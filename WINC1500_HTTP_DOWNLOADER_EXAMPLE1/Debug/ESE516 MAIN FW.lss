
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029e20  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003be20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000059ec  20000300  0003c120  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005cec  00041b0c  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00146943  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011df6  00000000  00000000  00176cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017735  00000000  00000000  00188aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003f20  00000000  00000000  001a01ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003ae8  00000000  00000000  001a410f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00044818  00000000  00000000  001a7bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00064682  00000000  00000000  001ec40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c560b  00000000  00000000  00250a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ee8c  00000000  00000000  0031609c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	f0 7c 00 20 99 bb 02 00 91 bc 02 00 91 bc 02 00     .|. ............
	...
   1202c:	9d ab 01 00 00 00 00 00 00 00 00 00 c1 ac 01 00     ................
   1203c:	09 ad 01 00 91 bc 02 00 91 bc 02 00 91 bc 02 00     ................
   1204c:	bd 7b 02 00 e9 70 02 00 91 bc 02 00 09 2e 01 00     .{...p..........
   1205c:	91 bc 02 00 4d 2f 01 00 61 82 02 00 79 82 02 00     ....M/..a...y...
   1206c:	91 82 02 00 a9 82 02 00 c1 82 02 00 d9 82 02 00     ................
   1207c:	e1 ba 02 00 f5 ba 02 00 09 bb 02 00 89 88 01 00     ................
   1208c:	9d 88 01 00 b1 88 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	91 2c 01 00 91 bc 02 00 cd 2d 01 00 91 bc 02 00     .,.......-......
   120ac:	91 bc 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003be20 	.word	0x0003be20

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003be20 	.word	0x0003be20
   1210c:	0003be20 	.word	0x0003be20
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004764 	.word	0x20004764
   12224:	0001493d 	.word	0x0001493d

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004764 	.word	0x20004764
   1227c:	0001493d 	.word	0x0001493d

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004778 	.word	0x20004778
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000477c 	.word	0x2000477c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00026d49 	.word	0x00026d49

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	00026d9d 	.word	0x00026d9d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004780 	.word	0x20004780
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00018835 	.word	0x00018835
   13444:	fffbffff 	.word	0xfffbffff
   13448:	000187d7 	.word	0x000187d7
   1344c:	00018779 	.word	0x00018779

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00018835 	.word	0x00018835
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c60 	.word	0x20005c60
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4ba4      	ldr	r3, [pc, #656]	; (13ab4 <vCommandConsoleTask+0x29c>)
   13822:	0018      	movs	r0, r3
   13824:	4ba4      	ldr	r3, [pc, #656]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4ba4      	ldr	r3, [pc, #656]	; (13abc <vCommandConsoleTask+0x2a4>)
   1382a:	0018      	movs	r0, r3
   1382c:	4ba2      	ldr	r3, [pc, #648]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4ba3      	ldr	r3, [pc, #652]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13832:	0018      	movs	r0, r3
   13834:	4ba0      	ldr	r3, [pc, #640]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4ba2      	ldr	r3, [pc, #648]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b9e      	ldr	r3, [pc, #632]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1383e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13840:	4ba1      	ldr	r3, [pc, #644]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13842:	0018      	movs	r0, r3
   13844:	4b9c      	ldr	r3, [pc, #624]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13846:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13848:	4ba0      	ldr	r3, [pc, #640]	; (13acc <vCommandConsoleTask+0x2b4>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b9a      	ldr	r3, [pc, #616]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1384e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13850:	4b9f      	ldr	r3, [pc, #636]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13852:	0018      	movs	r0, r3
   13854:	4b98      	ldr	r3, [pc, #608]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13856:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13858:	4b9e      	ldr	r3, [pc, #632]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b96      	ldr	r3, [pc, #600]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1385e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13860:	4b9d      	ldr	r3, [pc, #628]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13862:	0018      	movs	r0, r3
   13864:	4b94      	ldr	r3, [pc, #592]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13866:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13868:	4b9c      	ldr	r3, [pc, #624]	; (13adc <vCommandConsoleTask+0x2c4>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b92      	ldr	r3, [pc, #584]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1386e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13870:	4b9b      	ldr	r3, [pc, #620]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13872:	0018      	movs	r0, r3
   13874:	4b90      	ldr	r3, [pc, #576]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   13876:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13878:	4b9a      	ldr	r3, [pc, #616]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1387a:	0018      	movs	r0, r3
   1387c:	4b8e      	ldr	r3, [pc, #568]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1387e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13880:	2317      	movs	r3, #23
   13882:	18fb      	adds	r3, r7, r3
   13884:	2200      	movs	r2, #0
   13886:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13888:	4b97      	ldr	r3, [pc, #604]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   1388a:	0018      	movs	r0, r3
   1388c:	4b97      	ldr	r3, [pc, #604]	; (13aec <vCommandConsoleTask+0x2d4>)
   1388e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13890:	2203      	movs	r2, #3
   13892:	2100      	movs	r1, #0
   13894:	2001      	movs	r0, #1
   13896:	4b96      	ldr	r3, [pc, #600]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13898:	4798      	blx	r3
   1389a:	0002      	movs	r2, r0
   1389c:	4b95      	ldr	r3, [pc, #596]	; (13af4 <vCommandConsoleTask+0x2dc>)
   1389e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   138a0:	4b94      	ldr	r3, [pc, #592]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138a2:	681b      	ldr	r3, [r3, #0]
   138a4:	2b00      	cmp	r3, #0
   138a6:	d107      	bne.n	138b8 <vCommandConsoleTask+0xa0>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   138a8:	4b93      	ldr	r3, [pc, #588]	; (13af8 <vCommandConsoleTask+0x2e0>)
   138aa:	0019      	movs	r1, r3
   138ac:	2003      	movs	r0, #3
   138ae:	4b93      	ldr	r3, [pc, #588]	; (13afc <vCommandConsoleTask+0x2e4>)
   138b0:	4798      	blx	r3
        vTaskSuspend(NULL);
   138b2:	2000      	movs	r0, #0
   138b4:	4b92      	ldr	r3, [pc, #584]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138b6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   138b8:	230c      	movs	r3, #12
   138ba:	18fb      	adds	r3, r7, r3
   138bc:	0018      	movs	r0, r3
   138be:	4b91      	ldr	r3, [pc, #580]	; (13b04 <vCommandConsoleTask+0x2ec>)
   138c0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138c2:	230c      	movs	r3, #12
   138c4:	18fb      	adds	r3, r7, r3
   138c6:	781b      	ldrb	r3, [r3, #0]
   138c8:	2b0a      	cmp	r3, #10
   138ca:	d004      	beq.n	138d6 <vCommandConsoleTask+0xbe>
   138cc:	230c      	movs	r3, #12
   138ce:	18fb      	adds	r3, r7, r3
   138d0:	781b      	ldrb	r3, [r3, #0]
   138d2:	2b0d      	cmp	r3, #13
   138d4:	d137      	bne.n	13946 <vCommandConsoleTask+0x12e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138d6:	4b8c      	ldr	r3, [pc, #560]	; (13b08 <vCommandConsoleTask+0x2f0>)
   138d8:	0018      	movs	r0, r3
   138da:	4b84      	ldr	r3, [pc, #528]	; (13aec <vCommandConsoleTask+0x2d4>)
   138dc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138de:	4b8b      	ldr	r3, [pc, #556]	; (13b0c <vCommandConsoleTask+0x2f4>)
   138e0:	2200      	movs	r2, #0
   138e2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138e4:	4b8a      	ldr	r3, [pc, #552]	; (13b10 <vCommandConsoleTask+0x2f8>)
   138e6:	2200      	movs	r2, #0
   138e8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ea:	498a      	ldr	r1, [pc, #552]	; (13b14 <vCommandConsoleTask+0x2fc>)
   138ec:	4b8a      	ldr	r3, [pc, #552]	; (13b18 <vCommandConsoleTask+0x300>)
   138ee:	2231      	movs	r2, #49	; 0x31
   138f0:	0018      	movs	r0, r3
   138f2:	4b8a      	ldr	r3, [pc, #552]	; (13b1c <vCommandConsoleTask+0x304>)
   138f4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138f6:	4b88      	ldr	r3, [pc, #544]	; (13b18 <vCommandConsoleTask+0x300>)
   138f8:	2231      	movs	r2, #49	; 0x31
   138fa:	2100      	movs	r1, #0
   138fc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138fe:	4988      	ldr	r1, [pc, #544]	; (13b20 <vCommandConsoleTask+0x308>)
   13900:	4b84      	ldr	r3, [pc, #528]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13902:	2264      	movs	r2, #100	; 0x64
   13904:	0018      	movs	r0, r3
   13906:	4b87      	ldr	r3, [pc, #540]	; (13b24 <vCommandConsoleTask+0x30c>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1390e:	4b84      	ldr	r3, [pc, #528]	; (13b20 <vCommandConsoleTask+0x308>)
   13910:	2263      	movs	r2, #99	; 0x63
   13912:	2100      	movs	r1, #0
   13914:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13916:	4b82      	ldr	r3, [pc, #520]	; (13b20 <vCommandConsoleTask+0x308>)
   13918:	0018      	movs	r0, r3
   1391a:	4b74      	ldr	r3, [pc, #464]	; (13aec <vCommandConsoleTask+0x2d4>)
   1391c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1391e:	693b      	ldr	r3, [r7, #16]
   13920:	2b00      	cmp	r3, #0
   13922:	d1ec      	bne.n	138fe <vCommandConsoleTask+0xe6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13924:	2317      	movs	r3, #23
   13926:	18fb      	adds	r3, r7, r3
   13928:	2200      	movs	r2, #0
   1392a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1392c:	4b79      	ldr	r3, [pc, #484]	; (13b14 <vCommandConsoleTask+0x2fc>)
   1392e:	2232      	movs	r2, #50	; 0x32
   13930:	2100      	movs	r1, #0
   13932:	0018      	movs	r0, r3
   13934:	4b7c      	ldr	r3, [pc, #496]	; (13b28 <vCommandConsoleTask+0x310>)
   13936:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13938:	4b79      	ldr	r3, [pc, #484]	; (13b20 <vCommandConsoleTask+0x308>)
   1393a:	2264      	movs	r2, #100	; 0x64
   1393c:	2100      	movs	r1, #0
   1393e:	0018      	movs	r0, r3
   13940:	4b79      	ldr	r3, [pc, #484]	; (13b28 <vCommandConsoleTask+0x310>)
   13942:	4798      	blx	r3
   13944:	e0b5      	b.n	13ab2 <vCommandConsoleTask+0x29a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13946:	4b71      	ldr	r3, [pc, #452]	; (13b0c <vCommandConsoleTask+0x2f4>)
   13948:	781b      	ldrb	r3, [r3, #0]
   1394a:	2b00      	cmp	r3, #0
   1394c:	d059      	beq.n	13a02 <vCommandConsoleTask+0x1ea>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1394e:	4b70      	ldr	r3, [pc, #448]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	2b03      	cmp	r3, #3
   13954:	d80c      	bhi.n	13970 <vCommandConsoleTask+0x158>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13956:	4b6e      	ldr	r3, [pc, #440]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	1c5a      	adds	r2, r3, #1
   1395c:	b2d1      	uxtb	r1, r2
   1395e:	4a6c      	ldr	r2, [pc, #432]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13960:	7011      	strb	r1, [r2, #0]
   13962:	001a      	movs	r2, r3
   13964:	230c      	movs	r3, #12
   13966:	18fb      	adds	r3, r7, r3
   13968:	7819      	ldrb	r1, [r3, #0]
   1396a:	4b70      	ldr	r3, [pc, #448]	; (13b2c <vCommandConsoleTask+0x314>)
   1396c:	5499      	strb	r1, [r3, r2]
   1396e:	e005      	b.n	1397c <vCommandConsoleTask+0x164>
                } else {
                    isEscapeCode = false;
   13970:	4b66      	ldr	r3, [pc, #408]	; (13b0c <vCommandConsoleTask+0x2f4>)
   13972:	2200      	movs	r2, #0
   13974:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13976:	4b66      	ldr	r3, [pc, #408]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13978:	2200      	movs	r2, #0
   1397a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1397c:	4b64      	ldr	r3, [pc, #400]	; (13b10 <vCommandConsoleTask+0x2f8>)
   1397e:	781b      	ldrb	r3, [r3, #0]
   13980:	2b01      	cmp	r3, #1
   13982:	d999      	bls.n	138b8 <vCommandConsoleTask+0xa0>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13984:	4a6a      	ldr	r2, [pc, #424]	; (13b30 <vCommandConsoleTask+0x318>)
   13986:	4b69      	ldr	r3, [pc, #420]	; (13b2c <vCommandConsoleTask+0x314>)
   13988:	0011      	movs	r1, r2
   1398a:	0018      	movs	r0, r3
   1398c:	4b69      	ldr	r3, [pc, #420]	; (13b34 <vCommandConsoleTask+0x31c>)
   1398e:	4798      	blx	r3
   13990:	1e03      	subs	r3, r0, #0
   13992:	d02f      	beq.n	139f4 <vCommandConsoleTask+0x1dc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13994:	4968      	ldr	r1, [pc, #416]	; (13b38 <vCommandConsoleTask+0x320>)
   13996:	4b5f      	ldr	r3, [pc, #380]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13998:	221b      	movs	r2, #27
   1399a:	0018      	movs	r0, r3
   1399c:	4b67      	ldr	r3, [pc, #412]	; (13b3c <vCommandConsoleTask+0x324>)
   1399e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   139a0:	4b5c      	ldr	r3, [pc, #368]	; (13b14 <vCommandConsoleTask+0x2fc>)
   139a2:	0018      	movs	r0, r3
   139a4:	4b51      	ldr	r3, [pc, #324]	; (13aec <vCommandConsoleTask+0x2d4>)
   139a6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   139a8:	2317      	movs	r3, #23
   139aa:	18fb      	adds	r3, r7, r3
   139ac:	2200      	movs	r2, #0
   139ae:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   139b0:	4b58      	ldr	r3, [pc, #352]	; (13b14 <vCommandConsoleTask+0x2fc>)
   139b2:	2232      	movs	r2, #50	; 0x32
   139b4:	2100      	movs	r1, #0
   139b6:	0018      	movs	r0, r3
   139b8:	4b5b      	ldr	r3, [pc, #364]	; (13b28 <vCommandConsoleTask+0x310>)
   139ba:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   139bc:	4956      	ldr	r1, [pc, #344]	; (13b18 <vCommandConsoleTask+0x300>)
   139be:	4b55      	ldr	r3, [pc, #340]	; (13b14 <vCommandConsoleTask+0x2fc>)
   139c0:	2231      	movs	r2, #49	; 0x31
   139c2:	0018      	movs	r0, r3
   139c4:	4b55      	ldr	r3, [pc, #340]	; (13b1c <vCommandConsoleTask+0x304>)
   139c6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139c8:	4b52      	ldr	r3, [pc, #328]	; (13b14 <vCommandConsoleTask+0x2fc>)
   139ca:	0018      	movs	r0, r3
   139cc:	4b5c      	ldr	r3, [pc, #368]	; (13b40 <vCommandConsoleTask+0x328>)
   139ce:	4798      	blx	r3
   139d0:	0003      	movs	r3, r0
   139d2:	2b30      	cmp	r3, #48	; 0x30
   139d4:	d806      	bhi.n	139e4 <vCommandConsoleTask+0x1cc>
   139d6:	4b50      	ldr	r3, [pc, #320]	; (13b18 <vCommandConsoleTask+0x300>)
   139d8:	0018      	movs	r0, r3
   139da:	4b59      	ldr	r3, [pc, #356]	; (13b40 <vCommandConsoleTask+0x328>)
   139dc:	4798      	blx	r3
   139de:	0003      	movs	r3, r0
   139e0:	b2da      	uxtb	r2, r3
   139e2:	e000      	b.n	139e6 <vCommandConsoleTask+0x1ce>
   139e4:	2231      	movs	r2, #49	; 0x31
   139e6:	2317      	movs	r3, #23
   139e8:	18fb      	adds	r3, r7, r3
   139ea:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139ec:	4b49      	ldr	r3, [pc, #292]	; (13b14 <vCommandConsoleTask+0x2fc>)
   139ee:	0018      	movs	r0, r3
   139f0:	4b3e      	ldr	r3, [pc, #248]	; (13aec <vCommandConsoleTask+0x2d4>)
   139f2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139f4:	4b45      	ldr	r3, [pc, #276]	; (13b0c <vCommandConsoleTask+0x2f4>)
   139f6:	2200      	movs	r2, #0
   139f8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139fa:	4b45      	ldr	r3, [pc, #276]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139fc:	2200      	movs	r2, #0
   139fe:	701a      	strb	r2, [r3, #0]
   13a00:	e75a      	b.n	138b8 <vCommandConsoleTask+0xa0>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13a02:	230c      	movs	r3, #12
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	781b      	ldrb	r3, [r3, #0]
   13a08:	2b0d      	cmp	r3, #13
   13a0a:	d100      	bne.n	13a0e <vCommandConsoleTask+0x1f6>
   13a0c:	e754      	b.n	138b8 <vCommandConsoleTask+0xa0>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a0e:	230c      	movs	r3, #12
   13a10:	18fb      	adds	r3, r7, r3
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	2b08      	cmp	r3, #8
   13a16:	d004      	beq.n	13a22 <vCommandConsoleTask+0x20a>
   13a18:	230c      	movs	r3, #12
   13a1a:	18fb      	adds	r3, r7, r3
   13a1c:	781b      	ldrb	r3, [r3, #0]
   13a1e:	2b7f      	cmp	r3, #127	; 0x7f
   13a20:	d11c      	bne.n	13a5c <vCommandConsoleTask+0x244>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a22:	2308      	movs	r3, #8
   13a24:	18fb      	adds	r3, r7, r3
   13a26:	4a47      	ldr	r2, [pc, #284]	; (13b44 <vCommandConsoleTask+0x32c>)
   13a28:	6812      	ldr	r2, [r2, #0]
   13a2a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a2c:	2308      	movs	r3, #8
   13a2e:	18fb      	adds	r3, r7, r3
   13a30:	0018      	movs	r0, r3
   13a32:	4b2e      	ldr	r3, [pc, #184]	; (13aec <vCommandConsoleTask+0x2d4>)
   13a34:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a36:	2317      	movs	r3, #23
   13a38:	18fb      	adds	r3, r7, r3
   13a3a:	781b      	ldrb	r3, [r3, #0]
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d037      	beq.n	13ab0 <vCommandConsoleTask+0x298>
                    cInputIndex--;
   13a40:	2317      	movs	r3, #23
   13a42:	18fb      	adds	r3, r7, r3
   13a44:	781a      	ldrb	r2, [r3, #0]
   13a46:	2317      	movs	r3, #23
   13a48:	18fb      	adds	r3, r7, r3
   13a4a:	3a01      	subs	r2, #1
   13a4c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a4e:	2317      	movs	r3, #23
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	781b      	ldrb	r3, [r3, #0]
   13a54:	4a2f      	ldr	r2, [pc, #188]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a56:	2100      	movs	r1, #0
   13a58:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a5a:	e029      	b.n	13ab0 <vCommandConsoleTask+0x298>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a5c:	230c      	movs	r3, #12
   13a5e:	18fb      	adds	r3, r7, r3
   13a60:	781b      	ldrb	r3, [r3, #0]
   13a62:	2b1b      	cmp	r3, #27
   13a64:	d106      	bne.n	13a74 <vCommandConsoleTask+0x25c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a66:	4b29      	ldr	r3, [pc, #164]	; (13b0c <vCommandConsoleTask+0x2f4>)
   13a68:	2201      	movs	r2, #1
   13a6a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a6c:	4b28      	ldr	r3, [pc, #160]	; (13b10 <vCommandConsoleTask+0x2f8>)
   13a6e:	2200      	movs	r2, #0
   13a70:	701a      	strb	r2, [r3, #0]
   13a72:	e721      	b.n	138b8 <vCommandConsoleTask+0xa0>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a74:	2317      	movs	r3, #23
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	781b      	ldrb	r3, [r3, #0]
   13a7a:	2b31      	cmp	r3, #49	; 0x31
   13a7c:	d80e      	bhi.n	13a9c <vCommandConsoleTask+0x284>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a7e:	2317      	movs	r3, #23
   13a80:	18fb      	adds	r3, r7, r3
   13a82:	781b      	ldrb	r3, [r3, #0]
   13a84:	220c      	movs	r2, #12
   13a86:	18ba      	adds	r2, r7, r2
   13a88:	7811      	ldrb	r1, [r2, #0]
   13a8a:	4a22      	ldr	r2, [pc, #136]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a8c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a8e:	2317      	movs	r3, #23
   13a90:	18fb      	adds	r3, r7, r3
   13a92:	781a      	ldrb	r2, [r3, #0]
   13a94:	2317      	movs	r3, #23
   13a96:	18fb      	adds	r3, r7, r3
   13a98:	3201      	adds	r2, #1
   13a9a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a9c:	230c      	movs	r3, #12
   13a9e:	18fb      	adds	r3, r7, r3
   13aa0:	2200      	movs	r2, #0
   13aa2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13aa4:	230c      	movs	r3, #12
   13aa6:	18fb      	adds	r3, r7, r3
   13aa8:	0018      	movs	r0, r3
   13aaa:	4b10      	ldr	r3, [pc, #64]	; (13aec <vCommandConsoleTask+0x2d4>)
   13aac:	4798      	blx	r3
   13aae:	e703      	b.n	138b8 <vCommandConsoleTask+0xa0>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13ab0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13ab2:	e701      	b.n	138b8 <vCommandConsoleTask+0xa0>
   13ab4:	00037c68 	.word	0x00037c68
   13ab8:	0001897d 	.word	0x0001897d
   13abc:	00037c58 	.word	0x00037c58
   13ac0:	00037d08 	.word	0x00037d08
   13ac4:	00037c78 	.word	0x00037c78
   13ac8:	00037c88 	.word	0x00037c88
   13acc:	00037c98 	.word	0x00037c98
   13ad0:	00037ca8 	.word	0x00037ca8
   13ad4:	00037cc8 	.word	0x00037cc8
   13ad8:	00037cb8 	.word	0x00037cb8
   13adc:	00037cd8 	.word	0x00037cd8
   13ae0:	00037ce8 	.word	0x00037ce8
   13ae4:	00037cf8 	.word	0x00037cf8
   13ae8:	00037858 	.word	0x00037858
   13aec:	0001e8a5 	.word	0x0001e8a5
   13af0:	0001af45 	.word	0x0001af45
   13af4:	200047d0 	.word	0x200047d0
   13af8:	00037abc 	.word	0x00037abc
   13afc:	0001e991 	.word	0x0001e991
   13b00:	0001cd31 	.word	0x0001cd31
   13b04:	00013b49 	.word	0x00013b49
   13b08:	00037adc 	.word	0x00037adc
   13b0c:	20000514 	.word	0x20000514
   13b10:	20000515 	.word	0x20000515
   13b14:	2000054c 	.word	0x2000054c
   13b18:	20000518 	.word	0x20000518
   13b1c:	000365cf 	.word	0x000365cf
   13b20:	20000580 	.word	0x20000580
   13b24:	000189ed 	.word	0x000189ed
   13b28:	00036203 	.word	0x00036203
   13b2c:	200005e4 	.word	0x200005e4
   13b30:	00037ae0 	.word	0x00037ae0
   13b34:	00036505 	.word	0x00036505
   13b38:	00037ae4 	.word	0x00037ae4
   13b3c:	000364c1 	.word	0x000364c1
   13b40:	0003659f 	.word	0x0003659f
   13b44:	00037aec 	.word	0x00037aec

00013b48 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b48:	b580      	push	{r7, lr}
   13b4a:	b084      	sub	sp, #16
   13b4c:	af00      	add	r7, sp, #0
   13b4e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b50:	687b      	ldr	r3, [r7, #4]
   13b52:	0018      	movs	r0, r3
   13b54:	4b0c      	ldr	r3, [pc, #48]	; (13b88 <FreeRTOS_read+0x40>)
   13b56:	4798      	blx	r3
   13b58:	0003      	movs	r3, r0
   13b5a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b5c:	e00d      	b.n	13b7a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b5e:	4b0b      	ldr	r3, [pc, #44]	; (13b8c <FreeRTOS_read+0x44>)
   13b60:	681a      	ldr	r2, [r3, #0]
   13b62:	2301      	movs	r3, #1
   13b64:	425b      	negs	r3, r3
   13b66:	0019      	movs	r1, r3
   13b68:	0010      	movs	r0, r2
   13b6a:	4b09      	ldr	r3, [pc, #36]	; (13b90 <FreeRTOS_read+0x48>)
   13b6c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	0018      	movs	r0, r3
   13b72:	4b05      	ldr	r3, [pc, #20]	; (13b88 <FreeRTOS_read+0x40>)
   13b74:	4798      	blx	r3
   13b76:	0003      	movs	r3, r0
   13b78:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b7a:	68fb      	ldr	r3, [r7, #12]
   13b7c:	3301      	adds	r3, #1
   13b7e:	d0ee      	beq.n	13b5e <FreeRTOS_read+0x16>
    }
}
   13b80:	46c0      	nop			; (mov r8, r8)
   13b82:	46bd      	mov	sp, r7
   13b84:	b004      	add	sp, #16
   13b86:	bd80      	pop	{r7, pc}
   13b88:	0001e941 	.word	0x0001e941
   13b8c:	200047d0 	.word	0x200047d0
   13b90:	0001befd 	.word	0x0001befd

00013b94 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b94:	b580      	push	{r7, lr}
   13b96:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b98:	4b0a      	ldr	r3, [pc, #40]	; (13bc4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b9a:	2200      	movs	r2, #0
   13b9c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b9e:	4b0a      	ldr	r3, [pc, #40]	; (13bc8 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13ba0:	681b      	ldr	r3, [r3, #0]
   13ba2:	4a08      	ldr	r2, [pc, #32]	; (13bc4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ba4:	0011      	movs	r1, r2
   13ba6:	0018      	movs	r0, r3
   13ba8:	4b08      	ldr	r3, [pc, #32]	; (13bcc <CliCharReadySemaphoreGiveFromISR+0x38>)
   13baa:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bac:	4b05      	ldr	r3, [pc, #20]	; (13bc4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bae:	681b      	ldr	r3, [r3, #0]
   13bb0:	2b00      	cmp	r3, #0
   13bb2:	d003      	beq.n	13bbc <CliCharReadySemaphoreGiveFromISR+0x28>
   13bb4:	4b06      	ldr	r3, [pc, #24]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13bb6:	2280      	movs	r2, #128	; 0x80
   13bb8:	0552      	lsls	r2, r2, #21
   13bba:	601a      	str	r2, [r3, #0]
}
   13bbc:	46c0      	nop			; (mov r8, r8)
   13bbe:	46bd      	mov	sp, r7
   13bc0:	bd80      	pop	{r7, pc}
   13bc2:	46c0      	nop			; (mov r8, r8)
   13bc4:	200005e8 	.word	0x200005e8
   13bc8:	200047d0 	.word	0x200047d0
   13bcc:	0001b875 	.word	0x0001b875
   13bd0:	e000ed04 	.word	0xe000ed04

00013bd4 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bd4:	b5b0      	push	{r4, r5, r7, lr}
   13bd6:	b088      	sub	sp, #32
   13bd8:	af02      	add	r7, sp, #8
   13bda:	60f8      	str	r0, [r7, #12]
   13bdc:	60b9      	str	r1, [r7, #8]
   13bde:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13be0:	4b2e      	ldr	r3, [pc, #184]	; (13c9c <CLI_GetImuData+0xc8>)
   13be2:	4798      	blx	r3
   13be4:	0003      	movs	r3, r0
   13be6:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13be8:	2313      	movs	r3, #19
   13bea:	18fa      	adds	r2, r7, r3
   13bec:	697b      	ldr	r3, [r7, #20]
   13bee:	0011      	movs	r1, r2
   13bf0:	0018      	movs	r0, r3
   13bf2:	4b2b      	ldr	r3, [pc, #172]	; (13ca0 <CLI_GetImuData+0xcc>)
   13bf4:	4798      	blx	r3

    if (reg) {
   13bf6:	2313      	movs	r3, #19
   13bf8:	18fb      	adds	r3, r7, r3
   13bfa:	781b      	ldrb	r3, [r3, #0]
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	d041      	beq.n	13c84 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13c00:	4b28      	ldr	r3, [pc, #160]	; (13ca4 <CLI_GetImuData+0xd0>)
   13c02:	2206      	movs	r2, #6
   13c04:	2100      	movs	r1, #0
   13c06:	0018      	movs	r0, r3
   13c08:	4b27      	ldr	r3, [pc, #156]	; (13ca8 <CLI_GetImuData+0xd4>)
   13c0a:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13c0c:	4a25      	ldr	r2, [pc, #148]	; (13ca4 <CLI_GetImuData+0xd0>)
   13c0e:	697b      	ldr	r3, [r7, #20]
   13c10:	0011      	movs	r1, r2
   13c12:	0018      	movs	r0, r3
   13c14:	4b25      	ldr	r3, [pc, #148]	; (13cac <CLI_GetImuData+0xd8>)
   13c16:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13c18:	4b22      	ldr	r3, [pc, #136]	; (13ca4 <CLI_GetImuData+0xd0>)
   13c1a:	2200      	movs	r2, #0
   13c1c:	5e9b      	ldrsh	r3, [r3, r2]
   13c1e:	0018      	movs	r0, r3
   13c20:	4b23      	ldr	r3, [pc, #140]	; (13cb0 <CLI_GetImuData+0xdc>)
   13c22:	4798      	blx	r3
   13c24:	1c02      	adds	r2, r0, #0
   13c26:	4b23      	ldr	r3, [pc, #140]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c28:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13c2a:	4b1e      	ldr	r3, [pc, #120]	; (13ca4 <CLI_GetImuData+0xd0>)
   13c2c:	2202      	movs	r2, #2
   13c2e:	5e9b      	ldrsh	r3, [r3, r2]
   13c30:	0018      	movs	r0, r3
   13c32:	4b1f      	ldr	r3, [pc, #124]	; (13cb0 <CLI_GetImuData+0xdc>)
   13c34:	4798      	blx	r3
   13c36:	1c02      	adds	r2, r0, #0
   13c38:	4b1e      	ldr	r3, [pc, #120]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c3a:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c3c:	4b19      	ldr	r3, [pc, #100]	; (13ca4 <CLI_GetImuData+0xd0>)
   13c3e:	2204      	movs	r2, #4
   13c40:	5e9b      	ldrsh	r3, [r3, r2]
   13c42:	0018      	movs	r0, r3
   13c44:	4b1a      	ldr	r3, [pc, #104]	; (13cb0 <CLI_GetImuData+0xdc>)
   13c46:	4798      	blx	r3
   13c48:	1c02      	adds	r2, r0, #0
   13c4a:	4b1a      	ldr	r3, [pc, #104]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c4c:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c4e:	4b19      	ldr	r3, [pc, #100]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c50:	681a      	ldr	r2, [r3, #0]
   13c52:	4b19      	ldr	r3, [pc, #100]	; (13cb8 <CLI_GetImuData+0xe4>)
   13c54:	1c10      	adds	r0, r2, #0
   13c56:	4798      	blx	r3
   13c58:	0005      	movs	r5, r0
   13c5a:	4b16      	ldr	r3, [pc, #88]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c5c:	685a      	ldr	r2, [r3, #4]
   13c5e:	4b16      	ldr	r3, [pc, #88]	; (13cb8 <CLI_GetImuData+0xe4>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0004      	movs	r4, r0
   13c66:	4b13      	ldr	r3, [pc, #76]	; (13cb4 <CLI_GetImuData+0xe0>)
   13c68:	689a      	ldr	r2, [r3, #8]
   13c6a:	4b13      	ldr	r3, [pc, #76]	; (13cb8 <CLI_GetImuData+0xe4>)
   13c6c:	1c10      	adds	r0, r2, #0
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	4a12      	ldr	r2, [pc, #72]	; (13cbc <CLI_GetImuData+0xe8>)
   13c74:	68b9      	ldr	r1, [r7, #8]
   13c76:	68f8      	ldr	r0, [r7, #12]
   13c78:	9301      	str	r3, [sp, #4]
   13c7a:	9400      	str	r4, [sp, #0]
   13c7c:	002b      	movs	r3, r5
   13c7e:	4c10      	ldr	r4, [pc, #64]	; (13cc0 <CLI_GetImuData+0xec>)
   13c80:	47a0      	blx	r4
   13c82:	e005      	b.n	13c90 <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13c84:	4a0f      	ldr	r2, [pc, #60]	; (13cc4 <CLI_GetImuData+0xf0>)
   13c86:	68b9      	ldr	r1, [r7, #8]
   13c88:	68fb      	ldr	r3, [r7, #12]
   13c8a:	0018      	movs	r0, r3
   13c8c:	4b0c      	ldr	r3, [pc, #48]	; (13cc0 <CLI_GetImuData+0xec>)
   13c8e:	4798      	blx	r3
    }
    return pdFALSE;
   13c90:	2300      	movs	r3, #0
}
   13c92:	0018      	movs	r0, r3
   13c94:	46bd      	mov	sp, r7
   13c96:	b006      	add	sp, #24
   13c98:	bdb0      	pop	{r4, r5, r7, pc}
   13c9a:	46c0      	nop			; (mov r8, r8)
   13c9c:	00015879 	.word	0x00015879
   13ca0:	00015325 	.word	0x00015325
   13ca4:	200005ec 	.word	0x200005ec
   13ca8:	00036203 	.word	0x00036203
   13cac:	00015361 	.word	0x00015361
   13cb0:	00014bb5 	.word	0x00014bb5
   13cb4:	200005f4 	.word	0x200005f4
   13cb8:	00034541 	.word	0x00034541
   13cbc:	00037af0 	.word	0x00037af0
   13cc0:	0003645d 	.word	0x0003645d
   13cc4:	00037b14 	.word	0x00037b14

00013cc8 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cc8:	b590      	push	{r4, r7, lr}
   13cca:	b087      	sub	sp, #28
   13ccc:	af00      	add	r7, sp, #0
   13cce:	60f8      	str	r0, [r7, #12]
   13cd0:	60b9      	str	r1, [r7, #8]
   13cd2:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13cd4:	2317      	movs	r3, #23
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	221b      	movs	r2, #27
   13cda:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13cdc:	2317      	movs	r3, #23
   13cde:	18fb      	adds	r3, r7, r3
   13ce0:	781b      	ldrb	r3, [r3, #0]
   13ce2:	4a08      	ldr	r2, [pc, #32]	; (13d04 <xCliClearTerminalScreen+0x3c>)
   13ce4:	4808      	ldr	r0, [pc, #32]	; (13d08 <xCliClearTerminalScreen+0x40>)
   13ce6:	210f      	movs	r1, #15
   13ce8:	4c08      	ldr	r4, [pc, #32]	; (13d0c <xCliClearTerminalScreen+0x44>)
   13cea:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13cec:	4a06      	ldr	r2, [pc, #24]	; (13d08 <xCliClearTerminalScreen+0x40>)
   13cee:	68b9      	ldr	r1, [r7, #8]
   13cf0:	68fb      	ldr	r3, [r7, #12]
   13cf2:	0018      	movs	r0, r3
   13cf4:	4b05      	ldr	r3, [pc, #20]	; (13d0c <xCliClearTerminalScreen+0x44>)
   13cf6:	4798      	blx	r3
    return pdFALSE;
   13cf8:	2300      	movs	r3, #0
}
   13cfa:	0018      	movs	r0, r3
   13cfc:	46bd      	mov	sp, r7
   13cfe:	b007      	add	sp, #28
   13d00:	bd90      	pop	{r4, r7, pc}
   13d02:	46c0      	nop			; (mov r8, r8)
   13d04:	00037b28 	.word	0x00037b28
   13d08:	20000504 	.word	0x20000504
   13d0c:	0003645d 	.word	0x0003645d

00013d10 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d10:	b580      	push	{r7, lr}
   13d12:	b084      	sub	sp, #16
   13d14:	af00      	add	r7, sp, #0
   13d16:	60f8      	str	r0, [r7, #12]
   13d18:	60b9      	str	r1, [r7, #8]
   13d1a:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d1c:	2002      	movs	r0, #2
   13d1e:	4b03      	ldr	r3, [pc, #12]	; (13d2c <CLI_OTAU+0x1c>)
   13d20:	4798      	blx	r3

    return pdFALSE;
   13d22:	2300      	movs	r3, #0
}
   13d24:	0018      	movs	r0, r3
   13d26:	46bd      	mov	sp, r7
   13d28:	b004      	add	sp, #16
   13d2a:	bd80      	pop	{r7, pc}
   13d2c:	00017f61 	.word	0x00017f61

00013d30 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d30:	b580      	push	{r7, lr}
   13d32:	b084      	sub	sp, #16
   13d34:	af00      	add	r7, sp, #0
   13d36:	60f8      	str	r0, [r7, #12]
   13d38:	60b9      	str	r1, [r7, #8]
   13d3a:	607a      	str	r2, [r7, #4]
    system_reset();
   13d3c:	4b03      	ldr	r3, [pc, #12]	; (13d4c <CLI_ResetDevice+0x1c>)
   13d3e:	4798      	blx	r3
    return pdFALSE;
   13d40:	2300      	movs	r3, #0
}
   13d42:	0018      	movs	r0, r3
   13d44:	46bd      	mov	sp, r7
   13d46:	b004      	add	sp, #16
   13d48:	bd80      	pop	{r7, pc}
   13d4a:	46c0      	nop			; (mov r8, r8)
   13d4c:	00013805 	.word	0x00013805

00013d50 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d50:	b580      	push	{r7, lr}
   13d52:	b084      	sub	sp, #16
   13d54:	af00      	add	r7, sp, #0
   13d56:	60f8      	str	r0, [r7, #12]
   13d58:	60b9      	str	r1, [r7, #8]
   13d5a:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13d5c:	4a05      	ldr	r2, [pc, #20]	; (13d74 <CLI_NeotrellisSetLed+0x24>)
   13d5e:	68b9      	ldr	r1, [r7, #8]
   13d60:	68fb      	ldr	r3, [r7, #12]
   13d62:	0018      	movs	r0, r3
   13d64:	4b04      	ldr	r3, [pc, #16]	; (13d78 <CLI_NeotrellisSetLed+0x28>)
   13d66:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13d68:	2300      	movs	r3, #0
}
   13d6a:	0018      	movs	r0, r3
   13d6c:	46bd      	mov	sp, r7
   13d6e:	b004      	add	sp, #16
   13d70:	bd80      	pop	{r7, pc}
   13d72:	46c0      	nop			; (mov r8, r8)
   13d74:	00037b30 	.word	0x00037b30
   13d78:	0003645d 	.word	0x0003645d

00013d7c <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d7c:	b590      	push	{r4, r7, lr}
   13d7e:	b099      	sub	sp, #100	; 0x64
   13d80:	af00      	add	r7, sp, #0
   13d82:	60f8      	str	r0, [r7, #12]
   13d84:	60b9      	str	r1, [r7, #8]
   13d86:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13d88:	235f      	movs	r3, #95	; 0x5f
   13d8a:	18fc      	adds	r4, r7, r3
   13d8c:	4b36      	ldr	r3, [pc, #216]	; (13e68 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13d8e:	4798      	blx	r3
   13d90:	0003      	movs	r3, r0
   13d92:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13d94:	235f      	movs	r3, #95	; 0x5f
   13d96:	18fb      	adds	r3, r7, r3
   13d98:	781b      	ldrb	r3, [r3, #0]
   13d9a:	2b00      	cmp	r3, #0
   13d9c:	d05d      	beq.n	13e5a <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13d9e:	2310      	movs	r3, #16
   13da0:	18fb      	adds	r3, r7, r3
   13da2:	2101      	movs	r1, #1
   13da4:	0018      	movs	r0, r3
   13da6:	4b31      	ldr	r3, [pc, #196]	; (13e6c <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13da8:	4798      	blx	r3
   13daa:	0003      	movs	r3, r0
   13dac:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13db0:	2b00      	cmp	r3, #0
   13db2:	d150      	bne.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13db4:	2310      	movs	r3, #16
   13db6:	18fb      	adds	r3, r7, r3
   13db8:	781a      	ldrb	r2, [r3, #0]
   13dba:	2357      	movs	r3, #87	; 0x57
   13dbc:	18fb      	adds	r3, r7, r3
   13dbe:	2103      	movs	r1, #3
   13dc0:	400a      	ands	r2, r1
   13dc2:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13dc4:	2310      	movs	r3, #16
   13dc6:	18fb      	adds	r3, r7, r3
   13dc8:	781a      	ldrb	r2, [r3, #0]
   13dca:	2356      	movs	r3, #86	; 0x56
   13dcc:	18fb      	adds	r3, r7, r3
   13dce:	0892      	lsrs	r2, r2, #2
   13dd0:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13dd2:	2356      	movs	r3, #86	; 0x56
   13dd4:	18fb      	adds	r3, r7, r3
   13dd6:	781b      	ldrb	r3, [r3, #0]
   13dd8:	08db      	lsrs	r3, r3, #3
   13dda:	b2db      	uxtb	r3, r3
   13ddc:	009a      	lsls	r2, r3, #2
   13dde:	2356      	movs	r3, #86	; 0x56
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	2107      	movs	r1, #7
   13de6:	400b      	ands	r3, r1
   13de8:	18d3      	adds	r3, r2, r3
   13dea:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13dec:	2357      	movs	r3, #87	; 0x57
   13dee:	18fb      	adds	r3, r7, r3
   13df0:	781b      	ldrb	r3, [r3, #0]
   13df2:	2b02      	cmp	r3, #2
   13df4:	d115      	bne.n	13e22 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13df8:	2b00      	cmp	r3, #0
   13dfa:	da00      	bge.n	13dfe <CLI_NeotrellProcessButtonBuffer+0x82>
   13dfc:	3307      	adds	r3, #7
   13dfe:	10db      	asrs	r3, r3, #3
   13e00:	009a      	lsls	r2, r3, #2
   13e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e04:	491a      	ldr	r1, [pc, #104]	; (13e70 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e06:	400b      	ands	r3, r1
   13e08:	d504      	bpl.n	13e14 <CLI_NeotrellProcessButtonBuffer+0x98>
   13e0a:	3b01      	subs	r3, #1
   13e0c:	2108      	movs	r1, #8
   13e0e:	4249      	negs	r1, r1
   13e10:	430b      	orrs	r3, r1
   13e12:	3301      	adds	r3, #1
   13e14:	18d3      	adds	r3, r2, r3
   13e16:	4a17      	ldr	r2, [pc, #92]	; (13e74 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13e18:	68b9      	ldr	r1, [r7, #8]
   13e1a:	68f8      	ldr	r0, [r7, #12]
   13e1c:	4c16      	ldr	r4, [pc, #88]	; (13e78 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e1e:	47a0      	blx	r4
   13e20:	e019      	b.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13e22:	2357      	movs	r3, #87	; 0x57
   13e24:	18fb      	adds	r3, r7, r3
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	2b03      	cmp	r3, #3
   13e2a:	d114      	bne.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e2e:	2b00      	cmp	r3, #0
   13e30:	da00      	bge.n	13e34 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13e32:	3307      	adds	r3, #7
   13e34:	10db      	asrs	r3, r3, #3
   13e36:	009a      	lsls	r2, r3, #2
   13e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e3a:	490d      	ldr	r1, [pc, #52]	; (13e70 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e3c:	400b      	ands	r3, r1
   13e3e:	d504      	bpl.n	13e4a <CLI_NeotrellProcessButtonBuffer+0xce>
   13e40:	3b01      	subs	r3, #1
   13e42:	2108      	movs	r1, #8
   13e44:	4249      	negs	r1, r1
   13e46:	430b      	orrs	r3, r1
   13e48:	3301      	adds	r3, #1
   13e4a:	18d3      	adds	r3, r2, r3
   13e4c:	4a0b      	ldr	r2, [pc, #44]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0x100>)
   13e4e:	68b9      	ldr	r1, [r7, #8]
   13e50:	68f8      	ldr	r0, [r7, #12]
   13e52:	4c09      	ldr	r4, [pc, #36]	; (13e78 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e54:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13e56:	2301      	movs	r3, #1
   13e58:	e002      	b.n	13e60 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13e5a:	2300      	movs	r3, #0
   13e5c:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13e5e:	2300      	movs	r3, #0
    }
}
   13e60:	0018      	movs	r0, r3
   13e62:	46bd      	mov	sp, r7
   13e64:	b019      	add	sp, #100	; 0x64
   13e66:	bd90      	pop	{r4, r7, pc}
   13e68:	000160b5 	.word	0x000160b5
   13e6c:	0001611d 	.word	0x0001611d
   13e70:	80000007 	.word	0x80000007
   13e74:	00037b48 	.word	0x00037b48
   13e78:	0003645d 	.word	0x0003645d
   13e7c:	00037b64 	.word	0x00037b64

00013e80 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e80:	b590      	push	{r4, r7, lr}
   13e82:	b087      	sub	sp, #28
   13e84:	af00      	add	r7, sp, #0
   13e86:	60f8      	str	r0, [r7, #12]
   13e88:	60b9      	str	r1, [r7, #8]
   13e8a:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13e8c:	2312      	movs	r3, #18
   13e8e:	18fb      	adds	r3, r7, r3
   13e90:	2200      	movs	r2, #0
   13e92:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13e94:	2312      	movs	r3, #18
   13e96:	18fb      	adds	r3, r7, r3
   13e98:	2164      	movs	r1, #100	; 0x64
   13e9a:	0018      	movs	r0, r3
   13e9c:	4b19      	ldr	r3, [pc, #100]	; (13f04 <CLI_DistanceSensorGetDistance+0x84>)
   13e9e:	4798      	blx	r3
   13ea0:	0003      	movs	r3, r0
   13ea2:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13ea4:	697b      	ldr	r3, [r7, #20]
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	d006      	beq.n	13eb8 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13eaa:	697b      	ldr	r3, [r7, #20]
   13eac:	4a16      	ldr	r2, [pc, #88]	; (13f08 <CLI_DistanceSensorGetDistance+0x88>)
   13eae:	68b9      	ldr	r1, [r7, #8]
   13eb0:	68f8      	ldr	r0, [r7, #12]
   13eb2:	4c16      	ldr	r4, [pc, #88]	; (13f0c <CLI_DistanceSensorGetDistance+0x8c>)
   13eb4:	47a0      	blx	r4
   13eb6:	e007      	b.n	13ec8 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13eb8:	2312      	movs	r3, #18
   13eba:	18fb      	adds	r3, r7, r3
   13ebc:	881b      	ldrh	r3, [r3, #0]
   13ebe:	4a14      	ldr	r2, [pc, #80]	; (13f10 <CLI_DistanceSensorGetDistance+0x90>)
   13ec0:	68b9      	ldr	r1, [r7, #8]
   13ec2:	68f8      	ldr	r0, [r7, #12]
   13ec4:	4c11      	ldr	r4, [pc, #68]	; (13f0c <CLI_DistanceSensorGetDistance+0x8c>)
   13ec6:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13ec8:	2312      	movs	r3, #18
   13eca:	18fb      	adds	r3, r7, r3
   13ecc:	0018      	movs	r0, r3
   13ece:	4b11      	ldr	r3, [pc, #68]	; (13f14 <CLI_DistanceSensorGetDistance+0x94>)
   13ed0:	4798      	blx	r3
   13ed2:	0003      	movs	r3, r0
   13ed4:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13ed6:	697b      	ldr	r3, [r7, #20]
   13ed8:	2b01      	cmp	r3, #1
   13eda:	d10e      	bne.n	13efa <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13edc:	68fb      	ldr	r3, [r7, #12]
   13ede:	0018      	movs	r0, r3
   13ee0:	4b0d      	ldr	r3, [pc, #52]	; (13f18 <CLI_DistanceSensorGetDistance+0x98>)
   13ee2:	4798      	blx	r3
   13ee4:	0003      	movs	r3, r0
   13ee6:	001a      	movs	r2, r3
   13ee8:	68fb      	ldr	r3, [r7, #12]
   13eea:	189a      	adds	r2, r3, r2
   13eec:	4b0b      	ldr	r3, [pc, #44]	; (13f1c <CLI_DistanceSensorGetDistance+0x9c>)
   13eee:	0010      	movs	r0, r2
   13ef0:	0019      	movs	r1, r3
   13ef2:	231a      	movs	r3, #26
   13ef4:	001a      	movs	r2, r3
   13ef6:	4b0a      	ldr	r3, [pc, #40]	; (13f20 <CLI_DistanceSensorGetDistance+0xa0>)
   13ef8:	4798      	blx	r3
    }
    return pdFALSE;
   13efa:	2300      	movs	r3, #0
}
   13efc:	0018      	movs	r0, r3
   13efe:	46bd      	mov	sp, r7
   13f00:	b007      	add	sp, #28
   13f02:	bd90      	pop	{r4, r7, pc}
   13f04:	00014209 	.word	0x00014209
   13f08:	00037b7c 	.word	0x00037b7c
   13f0c:	0003645d 	.word	0x0003645d
   13f10:	00037b90 	.word	0x00037b90
   13f14:	00017f95 	.word	0x00017f95
   13f18:	0003659f 	.word	0x0003659f
   13f1c:	00037ba4 	.word	0x00037ba4
   13f20:	000361cd 	.word	0x000361cd

00013f24 <CLI_SendTestData>:
                                 for more information on how to use the FreeRTOS CLI.

 */

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f24:	b580      	push	{r7, lr}
   13f26:	b086      	sub	sp, #24
   13f28:	af00      	add	r7, sp, #0
   13f2a:	60f8      	str	r0, [r7, #12]
   13f2c:	60b9      	str	r1, [r7, #8]
   13f2e:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13f30:	2310      	movs	r3, #16
   13f32:	18fb      	adds	r3, r7, r3
   13f34:	2206      	movs	r2, #6
   13f36:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13f38:	2310      	movs	r3, #16
   13f3a:	18fb      	adds	r3, r7, r3
   13f3c:	0018      	movs	r0, r3
   13f3e:	4b09      	ldr	r3, [pc, #36]	; (13f64 <CLI_SendTestData+0x40>)
   13f40:	4798      	blx	r3
   13f42:	0003      	movs	r3, r0
   13f44:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13f46:	697b      	ldr	r3, [r7, #20]
   13f48:	2b01      	cmp	r3, #1
   13f4a:	d105      	bne.n	13f58 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13f4c:	4a06      	ldr	r2, [pc, #24]	; (13f68 <CLI_SendTestData+0x44>)
   13f4e:	68b9      	ldr	r1, [r7, #8]
   13f50:	68fb      	ldr	r3, [r7, #12]
   13f52:	0018      	movs	r0, r3
   13f54:	4b05      	ldr	r3, [pc, #20]	; (13f6c <CLI_SendTestData+0x48>)
   13f56:	4798      	blx	r3
	}
	return pdFALSE;
   13f58:	2300      	movs	r3, #0
}
   13f5a:	0018      	movs	r0, r3
   13f5c:	46bd      	mov	sp, r7
   13f5e:	b006      	add	sp, #24
   13f60:	bd80      	pop	{r7, pc}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	00017fc1 	.word	0x00017fc1
   13f68:	00037bc0 	.word	0x00037bc0
   13f6c:	0003645d 	.word	0x0003645d

00013f70 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b084      	sub	sp, #16
   13f74:	af00      	add	r7, sp, #0
   13f76:	60f8      	str	r0, [r7, #12]
   13f78:	60b9      	str	r1, [r7, #8]
   13f7a:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   13f7c:	2002      	movs	r0, #2
   13f7e:	4b03      	ldr	r3, [pc, #12]	; (13f8c <CLI_ServoOpen+0x1c>)
   13f80:	4798      	blx	r3
	return pdFALSE;
   13f82:	2300      	movs	r3, #0
}
   13f84:	0018      	movs	r0, r3
   13f86:	46bd      	mov	sp, r7
   13f88:	b004      	add	sp, #16
   13f8a:	bd80      	pop	{r7, pc}
   13f8c:	00016549 	.word	0x00016549

00013f90 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f90:	b580      	push	{r7, lr}
   13f92:	b084      	sub	sp, #16
   13f94:	af00      	add	r7, sp, #0
   13f96:	60f8      	str	r0, [r7, #12]
   13f98:	60b9      	str	r1, [r7, #8]
   13f9a:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   13f9c:	2003      	movs	r0, #3
   13f9e:	4b03      	ldr	r3, [pc, #12]	; (13fac <CLI_ServoClose+0x1c>)
   13fa0:	4798      	blx	r3
	return pdFALSE;
   13fa2:	2300      	movs	r3, #0
}
   13fa4:	0018      	movs	r0, r3
   13fa6:	46bd      	mov	sp, r7
   13fa8:	b004      	add	sp, #16
   13faa:	bd80      	pop	{r7, pc}
   13fac:	00016549 	.word	0x00016549

00013fb0 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fb0:	b590      	push	{r4, r7, lr}
   13fb2:	b0ab      	sub	sp, #172	; 0xac
   13fb4:	af00      	add	r7, sp, #0
   13fb6:	60f8      	str	r0, [r7, #12]
   13fb8:	60b9      	str	r1, [r7, #8]
   13fba:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	ADCchip_Init();
   13fbc:	4b33      	ldr	r3, [pc, #204]	; (1408c <CLI_SendWeightData+0xdc>)
   13fbe:	4798      	blx	r3
	ADC_StartConversion();
   13fc0:	4b33      	ldr	r3, [pc, #204]	; (14090 <CLI_SendWeightData+0xe0>)
   13fc2:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   13fc4:	46c0      	nop			; (mov r8, r8)
   13fc6:	2000      	movs	r0, #0
   13fc8:	4b32      	ldr	r3, [pc, #200]	; (14094 <CLI_SendWeightData+0xe4>)
   13fca:	4798      	blx	r3
   13fcc:	0003      	movs	r3, r0
   13fce:	001a      	movs	r2, r3
   13fd0:	2320      	movs	r3, #32
   13fd2:	4013      	ands	r3, r2
   13fd4:	2b20      	cmp	r3, #32
   13fd6:	d1f6      	bne.n	13fc6 <CLI_SendWeightData+0x16>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   13fd8:	4b2f      	ldr	r3, [pc, #188]	; (14098 <CLI_SendWeightData+0xe8>)
   13fda:	4798      	blx	r3
   13fdc:	0003      	movs	r3, r0
   13fde:	22a4      	movs	r2, #164	; 0xa4
   13fe0:	18ba      	adds	r2, r7, r2
   13fe2:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   13fe4:	23a4      	movs	r3, #164	; 0xa4
   13fe6:	18fb      	adds	r3, r7, r3
   13fe8:	681b      	ldr	r3, [r3, #0]
   13fea:	2290      	movs	r2, #144	; 0x90
   13fec:	18ba      	adds	r2, r7, r2
   13fee:	0011      	movs	r1, r2
   13ff0:	0018      	movs	r0, r3
   13ff2:	4b2a      	ldr	r3, [pc, #168]	; (1409c <CLI_SendWeightData+0xec>)
   13ff4:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   13ff6:	2390      	movs	r3, #144	; 0x90
   13ff8:	18fb      	adds	r3, r7, r3
   13ffa:	681b      	ldr	r3, [r3, #0]
   13ffc:	4a28      	ldr	r2, [pc, #160]	; (140a0 <CLI_SendWeightData+0xf0>)
   13ffe:	2150      	movs	r1, #80	; 0x50
   14000:	1878      	adds	r0, r7, r1
   14002:	2140      	movs	r1, #64	; 0x40
   14004:	4c27      	ldr	r4, [pc, #156]	; (140a4 <CLI_SendWeightData+0xf4>)
   14006:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   14008:	2350      	movs	r3, #80	; 0x50
   1400a:	18fb      	adds	r3, r7, r3
   1400c:	0018      	movs	r0, r3
   1400e:	4b26      	ldr	r3, [pc, #152]	; (140a8 <CLI_SendWeightData+0xf8>)
   14010:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   14012:	2390      	movs	r3, #144	; 0x90
   14014:	18fb      	adds	r3, r7, r3
   14016:	681b      	ldr	r3, [r3, #0]
   14018:	b29a      	uxth	r2, r3
   1401a:	2398      	movs	r3, #152	; 0x98
   1401c:	18fb      	adds	r3, r7, r3
   1401e:	801a      	strh	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   14020:	2390      	movs	r3, #144	; 0x90
   14022:	18fb      	adds	r3, r7, r3
   14024:	685b      	ldr	r3, [r3, #4]
   14026:	b29a      	uxth	r2, r3
   14028:	2398      	movs	r3, #152	; 0x98
   1402a:	18fb      	adds	r3, r7, r3
   1402c:	805a      	strh	r2, [r3, #2]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   1402e:	2398      	movs	r3, #152	; 0x98
   14030:	18fb      	adds	r3, r7, r3
   14032:	0018      	movs	r0, r3
   14034:	4b1d      	ldr	r3, [pc, #116]	; (140ac <CLI_SendWeightData+0xfc>)
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	22a0      	movs	r2, #160	; 0xa0
   1403c:	18ba      	adds	r2, r7, r2
   1403e:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   14040:	23a0      	movs	r3, #160	; 0xa0
   14042:	18fb      	adds	r3, r7, r3
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	2b01      	cmp	r3, #1
   14048:	d105      	bne.n	14056 <CLI_SendWeightData+0xa6>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   1404a:	4a19      	ldr	r2, [pc, #100]	; (140b0 <CLI_SendWeightData+0x100>)
   1404c:	68b9      	ldr	r1, [r7, #8]
   1404e:	68fb      	ldr	r3, [r7, #12]
   14050:	0018      	movs	r0, r3
   14052:	4b14      	ldr	r3, [pc, #80]	; (140a4 <CLI_SendWeightData+0xf4>)
   14054:	4798      	blx	r3
	}
	gfx_mono_init();
   14056:	4b17      	ldr	r3, [pc, #92]	; (140b4 <CLI_SendWeightData+0x104>)
   14058:	4798      	blx	r3
	uint8_t charge = 100;
   1405a:	239f      	movs	r3, #159	; 0x9f
   1405c:	18fb      	adds	r3, r7, r3
   1405e:	2264      	movs	r2, #100	; 0x64
   14060:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   14062:	239f      	movs	r3, #159	; 0x9f
   14064:	18fb      	adds	r3, r7, r3
   14066:	781a      	ldrb	r2, [r3, #0]
   14068:	4913      	ldr	r1, [pc, #76]	; (140b8 <CLI_SendWeightData+0x108>)
   1406a:	2310      	movs	r3, #16
   1406c:	18fb      	adds	r3, r7, r3
   1406e:	0018      	movs	r0, r3
   14070:	4b12      	ldr	r3, [pc, #72]	; (140bc <CLI_SendWeightData+0x10c>)
   14072:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   14074:	4b12      	ldr	r3, [pc, #72]	; (140c0 <CLI_SendWeightData+0x110>)
   14076:	2210      	movs	r2, #16
   14078:	18b8      	adds	r0, r7, r2
   1407a:	2208      	movs	r2, #8
   1407c:	2100      	movs	r1, #0
   1407e:	4c11      	ldr	r4, [pc, #68]	; (140c4 <CLI_SendWeightData+0x114>)
   14080:	47a0      	blx	r4
	return pdFALSE;
   14082:	2300      	movs	r3, #0
}
   14084:	0018      	movs	r0, r3
   14086:	46bd      	mov	sp, r7
   14088:	b02b      	add	sp, #172	; 0xac
   1408a:	bd90      	pop	{r4, r7, pc}
   1408c:	00015b79 	.word	0x00015b79
   14090:	00015c15 	.word	0x00015c15
   14094:	00015a61 	.word	0x00015a61
   14098:	00015cd1 	.word	0x00015cd1
   1409c:	00015cf5 	.word	0x00015cf5
   140a0:	00037bd8 	.word	0x00037bd8
   140a4:	0003645d 	.word	0x0003645d
   140a8:	0001e8a5 	.word	0x0001e8a5
   140ac:	00017fed 	.word	0x00017fed
   140b0:	00037bfc 	.word	0x00037bfc
   140b4:	0001287d 	.word	0x0001287d
   140b8:	00037c14 	.word	0x00037c14
   140bc:	000364c1 	.word	0x000364c1
   140c0:	20000000 	.word	0x20000000
   140c4:	00012721 	.word	0x00012721

000140c8 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   140c8:	b590      	push	{r4, r7, lr}
   140ca:	b08f      	sub	sp, #60	; 0x3c
   140cc:	af00      	add	r7, sp, #0
   140ce:	60f8      	str	r0, [r7, #12]
   140d0:	60b9      	str	r1, [r7, #8]
   140d2:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   140d4:	2318      	movs	r3, #24
   140d6:	18fb      	adds	r3, r7, r3
   140d8:	2200      	movs	r2, #0
   140da:	701a      	strb	r2, [r3, #0]
   140dc:	2318      	movs	r3, #24
   140de:	18fb      	adds	r3, r7, r3
   140e0:	2200      	movs	r2, #0
   140e2:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   140e4:	2318      	movs	r3, #24
   140e6:	18fb      	adds	r3, r7, r3
   140e8:	2200      	movs	r2, #0
   140ea:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   140ec:	2318      	movs	r3, #24
   140ee:	18fb      	adds	r3, r7, r3
   140f0:	2200      	movs	r2, #0
   140f2:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   140f4:	231c      	movs	r3, #28
   140f6:	18fb      	adds	r3, r7, r3
   140f8:	2200      	movs	r2, #0
   140fa:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   140fc:	231c      	movs	r3, #28
   140fe:	18fb      	adds	r3, r7, r3
   14100:	2214      	movs	r2, #20
   14102:	18ba      	adds	r2, r7, r2
   14104:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   14106:	231c      	movs	r3, #28
   14108:	18fb      	adds	r3, r7, r3
   1410a:	2201      	movs	r2, #1
   1410c:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1410e:	231c      	movs	r3, #28
   14110:	18fb      	adds	r3, r7, r3
   14112:	2218      	movs	r2, #24
   14114:	18ba      	adds	r2, r7, r2
   14116:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   14118:	231c      	movs	r3, #28
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	2201      	movs	r2, #1
   1411e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   14120:	4b2c      	ldr	r3, [pc, #176]	; (141d4 <CLI_i2cScan+0x10c>)
   14122:	0018      	movs	r0, r3
   14124:	4b2c      	ldr	r3, [pc, #176]	; (141d8 <CLI_i2cScan+0x110>)
   14126:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14128:	2300      	movs	r3, #0
   1412a:	637b      	str	r3, [r7, #52]	; 0x34
   1412c:	e046      	b.n	141bc <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14130:	4a2a      	ldr	r2, [pc, #168]	; (141dc <CLI_i2cScan+0x114>)
   14132:	482b      	ldr	r0, [pc, #172]	; (141e0 <CLI_i2cScan+0x118>)
   14134:	210f      	movs	r1, #15
   14136:	4c2b      	ldr	r4, [pc, #172]	; (141e4 <CLI_i2cScan+0x11c>)
   14138:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1413a:	4b29      	ldr	r3, [pc, #164]	; (141e0 <CLI_i2cScan+0x118>)
   1413c:	0018      	movs	r0, r3
   1413e:	4b26      	ldr	r3, [pc, #152]	; (141d8 <CLI_i2cScan+0x110>)
   14140:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   14142:	2300      	movs	r3, #0
   14144:	633b      	str	r3, [r7, #48]	; 0x30
   14146:	e02f      	b.n	141a8 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   14148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1414a:	b2da      	uxtb	r2, r3
   1414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1414e:	b2db      	uxtb	r3, r3
   14150:	18d3      	adds	r3, r2, r3
   14152:	b2db      	uxtb	r3, r3
   14154:	18db      	adds	r3, r3, r3
   14156:	b2da      	uxtb	r2, r3
   14158:	231c      	movs	r3, #28
   1415a:	18fb      	adds	r3, r7, r3
   1415c:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   1415e:	231c      	movs	r3, #28
   14160:	18fb      	adds	r3, r7, r3
   14162:	2164      	movs	r1, #100	; 0x64
   14164:	0018      	movs	r0, r3
   14166:	4b20      	ldr	r3, [pc, #128]	; (141e8 <CLI_i2cScan+0x120>)
   14168:	4798      	blx	r3
   1416a:	0003      	movs	r3, r0
   1416c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   1416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14170:	2b00      	cmp	r3, #0
   14172:	d10c      	bne.n	1418e <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   14174:	231c      	movs	r3, #28
   14176:	18fb      	adds	r3, r7, r3
   14178:	781b      	ldrb	r3, [r3, #0]
   1417a:	4a18      	ldr	r2, [pc, #96]	; (141dc <CLI_i2cScan+0x114>)
   1417c:	4818      	ldr	r0, [pc, #96]	; (141e0 <CLI_i2cScan+0x118>)
   1417e:	210f      	movs	r1, #15
   14180:	4c18      	ldr	r4, [pc, #96]	; (141e4 <CLI_i2cScan+0x11c>)
   14182:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   14184:	4b16      	ldr	r3, [pc, #88]	; (141e0 <CLI_i2cScan+0x118>)
   14186:	0018      	movs	r0, r3
   14188:	4b13      	ldr	r3, [pc, #76]	; (141d8 <CLI_i2cScan+0x110>)
   1418a:	4798      	blx	r3
   1418c:	e009      	b.n	141a2 <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   1418e:	4b14      	ldr	r3, [pc, #80]	; (141e0 <CLI_i2cScan+0x118>)
   14190:	4a16      	ldr	r2, [pc, #88]	; (141ec <CLI_i2cScan+0x124>)
   14192:	8811      	ldrh	r1, [r2, #0]
   14194:	8019      	strh	r1, [r3, #0]
   14196:	7892      	ldrb	r2, [r2, #2]
   14198:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   1419a:	4b11      	ldr	r3, [pc, #68]	; (141e0 <CLI_i2cScan+0x118>)
   1419c:	0018      	movs	r0, r3
   1419e:	4b0e      	ldr	r3, [pc, #56]	; (141d8 <CLI_i2cScan+0x110>)
   141a0:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141a4:	3301      	adds	r3, #1
   141a6:	633b      	str	r3, [r7, #48]	; 0x30
   141a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141aa:	2b0f      	cmp	r3, #15
   141ac:	ddcc      	ble.n	14148 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   141ae:	4b10      	ldr	r3, [pc, #64]	; (141f0 <CLI_i2cScan+0x128>)
   141b0:	0018      	movs	r0, r3
   141b2:	4b09      	ldr	r3, [pc, #36]	; (141d8 <CLI_i2cScan+0x110>)
   141b4:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   141b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141b8:	3310      	adds	r3, #16
   141ba:	637b      	str	r3, [r7, #52]	; 0x34
   141bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141be:	2b7f      	cmp	r3, #127	; 0x7f
   141c0:	ddb5      	ble.n	1412e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   141c2:	4b0b      	ldr	r3, [pc, #44]	; (141f0 <CLI_i2cScan+0x128>)
   141c4:	0018      	movs	r0, r3
   141c6:	4b04      	ldr	r3, [pc, #16]	; (141d8 <CLI_i2cScan+0x110>)
   141c8:	4798      	blx	r3
			return pdFALSE;
   141ca:	2300      	movs	r3, #0

}
   141cc:	0018      	movs	r0, r3
   141ce:	46bd      	mov	sp, r7
   141d0:	b00f      	add	sp, #60	; 0x3c
   141d2:	bd90      	pop	{r4, r7, pc}
   141d4:	00037c18 	.word	0x00037c18
   141d8:	0001e8a5 	.word	0x0001e8a5
   141dc:	00037c4c 	.word	0x00037c4c
   141e0:	20000504 	.word	0x20000504
   141e4:	0003645d 	.word	0x0003645d
   141e8:	0001493d 	.word	0x0001493d
   141ec:	00037c54 	.word	0x00037c54
   141f0:	00037adc 	.word	0x00037adc

000141f4 <vControlHandlerTask>:
   141f4:	b580      	push	{r7, lr}
   141f6:	b082      	sub	sp, #8
   141f8:	af00      	add	r7, sp, #0
   141fa:	6078      	str	r0, [r7, #4]
   141fc:	2028      	movs	r0, #40	; 0x28
   141fe:	4b01      	ldr	r3, [pc, #4]	; (14204 <vControlHandlerTask+0x10>)
   14200:	4798      	blx	r3
   14202:	e7fb      	b.n	141fc <vControlHandlerTask+0x8>
   14204:	0001cc51 	.word	0x0001cc51

00014208 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
   14210:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14212:	2300      	movs	r3, #0
   14214:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14216:	2396      	movs	r3, #150	; 0x96
   14218:	005b      	lsls	r3, r3, #1
   1421a:	0018      	movs	r0, r3
   1421c:	4b25      	ldr	r3, [pc, #148]	; (142b4 <DistanceSensorGetDistance+0xac>)
   1421e:	4798      	blx	r3
   14220:	0003      	movs	r3, r0
   14222:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14224:	68fb      	ldr	r3, [r7, #12]
   14226:	2b00      	cmp	r3, #0
   14228:	d139      	bne.n	1429e <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   1422a:	4b23      	ldr	r3, [pc, #140]	; (142b8 <DistanceSensorGetDistance+0xb0>)
   1422c:	2255      	movs	r2, #85	; 0x55
   1422e:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14230:	4921      	ldr	r1, [pc, #132]	; (142b8 <DistanceSensorGetDistance+0xb0>)
   14232:	4b22      	ldr	r3, [pc, #136]	; (142bc <DistanceSensorGetDistance+0xb4>)
   14234:	2201      	movs	r2, #1
   14236:	0018      	movs	r0, r3
   14238:	4b21      	ldr	r3, [pc, #132]	; (142c0 <DistanceSensorGetDistance+0xb8>)
   1423a:	4798      	blx	r3
   1423c:	1e03      	subs	r3, r0, #0
   1423e:	d130      	bne.n	142a2 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14240:	4b20      	ldr	r3, [pc, #128]	; (142c4 <DistanceSensorGetDistance+0xbc>)
   14242:	681b      	ldr	r3, [r3, #0]
   14244:	683a      	ldr	r2, [r7, #0]
   14246:	0011      	movs	r1, r2
   14248:	0018      	movs	r0, r3
   1424a:	4b1f      	ldr	r3, [pc, #124]	; (142c8 <DistanceSensorGetDistance+0xc0>)
   1424c:	4798      	blx	r3
   1424e:	0003      	movs	r3, r0
   14250:	2b01      	cmp	r3, #1
   14252:	d003      	beq.n	1425c <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14254:	2303      	movs	r3, #3
   14256:	425b      	negs	r3, r3
   14258:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1425a:	e023      	b.n	142a4 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   1425c:	491b      	ldr	r1, [pc, #108]	; (142cc <DistanceSensorGetDistance+0xc4>)
   1425e:	4b17      	ldr	r3, [pc, #92]	; (142bc <DistanceSensorGetDistance+0xb4>)
   14260:	2202      	movs	r2, #2
   14262:	0018      	movs	r0, r3
   14264:	4b1a      	ldr	r3, [pc, #104]	; (142d0 <DistanceSensorGetDistance+0xc8>)
   14266:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14268:	4b16      	ldr	r3, [pc, #88]	; (142c4 <DistanceSensorGetDistance+0xbc>)
   1426a:	681b      	ldr	r3, [r3, #0]
   1426c:	683a      	ldr	r2, [r7, #0]
   1426e:	0011      	movs	r1, r2
   14270:	0018      	movs	r0, r3
   14272:	4b15      	ldr	r3, [pc, #84]	; (142c8 <DistanceSensorGetDistance+0xc0>)
   14274:	4798      	blx	r3
   14276:	0003      	movs	r3, r0
   14278:	2b01      	cmp	r3, #1
   1427a:	d10c      	bne.n	14296 <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   1427c:	4b13      	ldr	r3, [pc, #76]	; (142cc <DistanceSensorGetDistance+0xc4>)
   1427e:	781b      	ldrb	r3, [r3, #0]
   14280:	b29b      	uxth	r3, r3
   14282:	021b      	lsls	r3, r3, #8
   14284:	b29a      	uxth	r2, r3
   14286:	4b11      	ldr	r3, [pc, #68]	; (142cc <DistanceSensorGetDistance+0xc4>)
   14288:	785b      	ldrb	r3, [r3, #1]
   1428a:	b29b      	uxth	r3, r3
   1428c:	18d3      	adds	r3, r2, r3
   1428e:	b29a      	uxth	r2, r3
   14290:	687b      	ldr	r3, [r7, #4]
   14292:	801a      	strh	r2, [r3, #0]
   14294:	e006      	b.n	142a4 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14296:	2303      	movs	r3, #3
   14298:	425b      	negs	r3, r3
   1429a:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1429c:	e002      	b.n	142a4 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   1429e:	46c0      	nop			; (mov r8, r8)
   142a0:	e000      	b.n	142a4 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   142a2:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   142a4:	4b0b      	ldr	r3, [pc, #44]	; (142d4 <DistanceSensorGetDistance+0xcc>)
   142a6:	4798      	blx	r3

    return error;
   142a8:	68fb      	ldr	r3, [r7, #12]
}
   142aa:	0018      	movs	r0, r3
   142ac:	46bd      	mov	sp, r7
   142ae:	b004      	add	sp, #16
   142b0:	bd80      	pop	{r7, pc}
   142b2:	46c0      	nop			; (mov r8, r8)
   142b4:	00014311 	.word	0x00014311
   142b8:	200047d6 	.word	0x200047d6
   142bc:	200047e0 	.word	0x200047e0
   142c0:	00029a7d 	.word	0x00029a7d
   142c4:	200047d8 	.word	0x200047d8
   142c8:	0001befd 	.word	0x0001befd
   142cc:	200047d4 	.word	0x200047d4
   142d0:	00029ac5 	.word	0x00029ac5
   142d4:	000142d9 	.word	0x000142d9

000142d8 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   142d8:	b590      	push	{r4, r7, lr}
   142da:	b083      	sub	sp, #12
   142dc:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   142de:	2300      	movs	r3, #0
   142e0:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   142e2:	4b09      	ldr	r3, [pc, #36]	; (14308 <DistanceSensorFreeMutex+0x30>)
   142e4:	6818      	ldr	r0, [r3, #0]
   142e6:	2300      	movs	r3, #0
   142e8:	2200      	movs	r2, #0
   142ea:	2100      	movs	r1, #0
   142ec:	4c07      	ldr	r4, [pc, #28]	; (1430c <DistanceSensorFreeMutex+0x34>)
   142ee:	47a0      	blx	r4
   142f0:	0003      	movs	r3, r0
   142f2:	2b01      	cmp	r3, #1
   142f4:	d002      	beq.n	142fc <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   142f6:	2314      	movs	r3, #20
   142f8:	425b      	negs	r3, r3
   142fa:	607b      	str	r3, [r7, #4]
    }
    return error;
   142fc:	687b      	ldr	r3, [r7, #4]
}
   142fe:	0018      	movs	r0, r3
   14300:	46bd      	mov	sp, r7
   14302:	b003      	add	sp, #12
   14304:	bd90      	pop	{r4, r7, pc}
   14306:	46c0      	nop			; (mov r8, r8)
   14308:	200047dc 	.word	0x200047dc
   1430c:	0001b1ed 	.word	0x0001b1ed

00014310 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14310:	b580      	push	{r7, lr}
   14312:	b084      	sub	sp, #16
   14314:	af00      	add	r7, sp, #0
   14316:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14318:	2300      	movs	r3, #0
   1431a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   1431c:	4b08      	ldr	r3, [pc, #32]	; (14340 <DistanceSensorGetMutex+0x30>)
   1431e:	681b      	ldr	r3, [r3, #0]
   14320:	687a      	ldr	r2, [r7, #4]
   14322:	0011      	movs	r1, r2
   14324:	0018      	movs	r0, r3
   14326:	4b07      	ldr	r3, [pc, #28]	; (14344 <DistanceSensorGetMutex+0x34>)
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	2b01      	cmp	r3, #1
   1432e:	d002      	beq.n	14336 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14330:	231d      	movs	r3, #29
   14332:	425b      	negs	r3, r3
   14334:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14336:	68fb      	ldr	r3, [r7, #12]
   14338:	0018      	movs	r0, r3
   1433a:	46bd      	mov	sp, r7
   1433c:	b004      	add	sp, #16
   1433e:	bd80      	pop	{r7, pc}
   14340:	200047dc 	.word	0x200047dc
   14344:	0001befd 	.word	0x0001befd

00014348 <system_interrupt_enable>:
{
   14348:	b580      	push	{r7, lr}
   1434a:	b082      	sub	sp, #8
   1434c:	af00      	add	r7, sp, #0
   1434e:	0002      	movs	r2, r0
   14350:	1dfb      	adds	r3, r7, #7
   14352:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14354:	4b06      	ldr	r3, [pc, #24]	; (14370 <system_interrupt_enable+0x28>)
   14356:	1dfa      	adds	r2, r7, #7
   14358:	7812      	ldrb	r2, [r2, #0]
   1435a:	0011      	movs	r1, r2
   1435c:	221f      	movs	r2, #31
   1435e:	400a      	ands	r2, r1
   14360:	2101      	movs	r1, #1
   14362:	4091      	lsls	r1, r2
   14364:	000a      	movs	r2, r1
   14366:	601a      	str	r2, [r3, #0]
}
   14368:	46c0      	nop			; (mov r8, r8)
   1436a:	46bd      	mov	sp, r7
   1436c:	b002      	add	sp, #8
   1436e:	bd80      	pop	{r7, pc}
   14370:	e000e100 	.word	0xe000e100

00014374 <i2c_master_is_syncing>:
{
   14374:	b580      	push	{r7, lr}
   14376:	b084      	sub	sp, #16
   14378:	af00      	add	r7, sp, #0
   1437a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1437c:	687b      	ldr	r3, [r7, #4]
   1437e:	681b      	ldr	r3, [r3, #0]
   14380:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14382:	68fb      	ldr	r3, [r7, #12]
   14384:	69db      	ldr	r3, [r3, #28]
   14386:	2207      	movs	r2, #7
   14388:	4013      	ands	r3, r2
   1438a:	1e5a      	subs	r2, r3, #1
   1438c:	4193      	sbcs	r3, r2
   1438e:	b2db      	uxtb	r3, r3
}
   14390:	0018      	movs	r0, r3
   14392:	46bd      	mov	sp, r7
   14394:	b004      	add	sp, #16
   14396:	bd80      	pop	{r7, pc}

00014398 <_i2c_master_wait_for_sync>:
{
   14398:	b580      	push	{r7, lr}
   1439a:	b082      	sub	sp, #8
   1439c:	af00      	add	r7, sp, #0
   1439e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   143a0:	46c0      	nop			; (mov r8, r8)
   143a2:	687b      	ldr	r3, [r7, #4]
   143a4:	0018      	movs	r0, r3
   143a6:	4b04      	ldr	r3, [pc, #16]	; (143b8 <_i2c_master_wait_for_sync+0x20>)
   143a8:	4798      	blx	r3
   143aa:	1e03      	subs	r3, r0, #0
   143ac:	d1f9      	bne.n	143a2 <_i2c_master_wait_for_sync+0xa>
}
   143ae:	46c0      	nop			; (mov r8, r8)
   143b0:	46bd      	mov	sp, r7
   143b2:	b002      	add	sp, #8
   143b4:	bd80      	pop	{r7, pc}
   143b6:	46c0      	nop			; (mov r8, r8)
   143b8:	00014375 	.word	0x00014375

000143bc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   143bc:	b580      	push	{r7, lr}
   143be:	b082      	sub	sp, #8
   143c0:	af00      	add	r7, sp, #0
   143c2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   143c4:	687b      	ldr	r3, [r7, #4]
   143c6:	2264      	movs	r2, #100	; 0x64
   143c8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   143ca:	687b      	ldr	r3, [r7, #4]
   143cc:	4a1b      	ldr	r2, [pc, #108]	; (1443c <i2c_master_get_config_defaults+0x80>)
   143ce:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   143d0:	687b      	ldr	r3, [r7, #4]
   143d2:	2200      	movs	r2, #0
   143d4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   143d6:	687b      	ldr	r3, [r7, #4]
   143d8:	2200      	movs	r2, #0
   143da:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	2200      	movs	r2, #0
   143e0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   143e2:	687b      	ldr	r3, [r7, #4]
   143e4:	2280      	movs	r2, #128	; 0x80
   143e6:	0392      	lsls	r2, r2, #14
   143e8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   143ea:	687b      	ldr	r3, [r7, #4]
   143ec:	2201      	movs	r2, #1
   143ee:	4252      	negs	r2, r2
   143f0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   143f2:	687b      	ldr	r3, [r7, #4]
   143f4:	2201      	movs	r2, #1
   143f6:	4252      	negs	r2, r2
   143f8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   143fa:	687b      	ldr	r3, [r7, #4]
   143fc:	2200      	movs	r2, #0
   143fe:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14400:	687b      	ldr	r3, [r7, #4]
   14402:	2200      	movs	r2, #0
   14404:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14406:	687b      	ldr	r3, [r7, #4]
   14408:	2224      	movs	r2, #36	; 0x24
   1440a:	2100      	movs	r1, #0
   1440c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1440e:	687b      	ldr	r3, [r7, #4]
   14410:	2200      	movs	r2, #0
   14412:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14414:	687b      	ldr	r3, [r7, #4]
   14416:	222c      	movs	r2, #44	; 0x2c
   14418:	2100      	movs	r1, #0
   1441a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   1441c:	687b      	ldr	r3, [r7, #4]
   1441e:	222d      	movs	r2, #45	; 0x2d
   14420:	2100      	movs	r1, #0
   14422:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	222e      	movs	r2, #46	; 0x2e
   14428:	2100      	movs	r1, #0
   1442a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   1442c:	687b      	ldr	r3, [r7, #4]
   1442e:	22d7      	movs	r2, #215	; 0xd7
   14430:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14432:	46c0      	nop			; (mov r8, r8)
   14434:	46bd      	mov	sp, r7
   14436:	b002      	add	sp, #8
   14438:	bd80      	pop	{r7, pc}
   1443a:	46c0      	nop			; (mov r8, r8)
   1443c:	00000d48 	.word	0x00000d48

00014440 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14440:	b580      	push	{r7, lr}
   14442:	b084      	sub	sp, #16
   14444:	af00      	add	r7, sp, #0
   14446:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14448:	687b      	ldr	r3, [r7, #4]
   1444a:	681b      	ldr	r3, [r3, #0]
   1444c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   1444e:	2300      	movs	r3, #0
   14450:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14452:	687b      	ldr	r3, [r7, #4]
   14454:	0018      	movs	r0, r3
   14456:	4b14      	ldr	r3, [pc, #80]	; (144a8 <i2c_master_enable+0x68>)
   14458:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1445a:	68bb      	ldr	r3, [r7, #8]
   1445c:	681b      	ldr	r3, [r3, #0]
   1445e:	2202      	movs	r2, #2
   14460:	431a      	orrs	r2, r3
   14462:	68bb      	ldr	r3, [r7, #8]
   14464:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	681b      	ldr	r3, [r3, #0]
   1446a:	0018      	movs	r0, r3
   1446c:	4b0f      	ldr	r3, [pc, #60]	; (144ac <i2c_master_enable+0x6c>)
   1446e:	4798      	blx	r3
   14470:	0003      	movs	r3, r0
   14472:	0018      	movs	r0, r3
   14474:	4b0e      	ldr	r3, [pc, #56]	; (144b0 <i2c_master_enable+0x70>)
   14476:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14478:	e00c      	b.n	14494 <i2c_master_enable+0x54>
		timeout_counter++;
   1447a:	68fb      	ldr	r3, [r7, #12]
   1447c:	3301      	adds	r3, #1
   1447e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	88db      	ldrh	r3, [r3, #6]
   14484:	001a      	movs	r2, r3
   14486:	68fb      	ldr	r3, [r7, #12]
   14488:	429a      	cmp	r2, r3
   1448a:	d803      	bhi.n	14494 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   1448c:	68bb      	ldr	r3, [r7, #8]
   1448e:	2210      	movs	r2, #16
   14490:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14492:	e006      	b.n	144a2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14494:	68bb      	ldr	r3, [r7, #8]
   14496:	8b5b      	ldrh	r3, [r3, #26]
   14498:	b29b      	uxth	r3, r3
   1449a:	001a      	movs	r2, r3
   1449c:	2310      	movs	r3, #16
   1449e:	4013      	ands	r3, r2
   144a0:	d0eb      	beq.n	1447a <i2c_master_enable+0x3a>
		}
	}
}
   144a2:	46bd      	mov	sp, r7
   144a4:	b004      	add	sp, #16
   144a6:	bd80      	pop	{r7, pc}
   144a8:	00014399 	.word	0x00014399
   144ac:	0002821d 	.word	0x0002821d
   144b0:	00014349 	.word	0x00014349

000144b4 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   144b4:	b580      	push	{r7, lr}
   144b6:	b082      	sub	sp, #8
   144b8:	af00      	add	r7, sp, #0
   144ba:	6078      	str	r0, [r7, #4]
   144bc:	000a      	movs	r2, r1
   144be:	1cfb      	adds	r3, r7, #3
   144c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	7e5b      	ldrb	r3, [r3, #25]
   144c6:	b2db      	uxtb	r3, r3
   144c8:	b25a      	sxtb	r2, r3
   144ca:	1cfb      	adds	r3, r7, #3
   144cc:	781b      	ldrb	r3, [r3, #0]
   144ce:	2101      	movs	r1, #1
   144d0:	4099      	lsls	r1, r3
   144d2:	000b      	movs	r3, r1
   144d4:	b25b      	sxtb	r3, r3
   144d6:	4313      	orrs	r3, r2
   144d8:	b25b      	sxtb	r3, r3
   144da:	b2da      	uxtb	r2, r3
   144dc:	687b      	ldr	r3, [r7, #4]
   144de:	765a      	strb	r2, [r3, #25]
}
   144e0:	46c0      	nop			; (mov r8, r8)
   144e2:	46bd      	mov	sp, r7
   144e4:	b002      	add	sp, #8
   144e6:	bd80      	pop	{r7, pc}

000144e8 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   144e8:	b590      	push	{r4, r7, lr}
   144ea:	b091      	sub	sp, #68	; 0x44
   144ec:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   144ee:	2300      	movs	r3, #0
   144f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   144f2:	233a      	movs	r3, #58	; 0x3a
   144f4:	18fb      	adds	r3, r7, r3
   144f6:	2200      	movs	r2, #0
   144f8:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   144fa:	1d3b      	adds	r3, r7, #4
   144fc:	0018      	movs	r0, r3
   144fe:	4b21      	ldr	r3, [pc, #132]	; (14584 <I2cDriverConfigureSensorBus+0x9c>)
   14500:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14502:	1d3b      	adds	r3, r7, #4
   14504:	4a20      	ldr	r2, [pc, #128]	; (14588 <I2cDriverConfigureSensorBus+0xa0>)
   14506:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14508:	1d3b      	adds	r3, r7, #4
   1450a:	4a20      	ldr	r2, [pc, #128]	; (1458c <I2cDriverConfigureSensorBus+0xa4>)
   1450c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1450e:	1d3b      	adds	r3, r7, #4
   14510:	22fa      	movs	r2, #250	; 0xfa
   14512:	0092      	lsls	r2, r2, #2
   14514:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14516:	233b      	movs	r3, #59	; 0x3b
   14518:	18fb      	adds	r3, r7, r3
   1451a:	2203      	movs	r2, #3
   1451c:	701a      	strb	r2, [r3, #0]
   1451e:	e01e      	b.n	1455e <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14520:	233a      	movs	r3, #58	; 0x3a
   14522:	18fc      	adds	r4, r7, r3
   14524:	1d3a      	adds	r2, r7, #4
   14526:	491a      	ldr	r1, [pc, #104]	; (14590 <I2cDriverConfigureSensorBus+0xa8>)
   14528:	4b1a      	ldr	r3, [pc, #104]	; (14594 <I2cDriverConfigureSensorBus+0xac>)
   1452a:	0018      	movs	r0, r3
   1452c:	4b1a      	ldr	r3, [pc, #104]	; (14598 <I2cDriverConfigureSensorBus+0xb0>)
   1452e:	4798      	blx	r3
   14530:	0003      	movs	r3, r0
   14532:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14534:	233a      	movs	r3, #58	; 0x3a
   14536:	18fb      	adds	r3, r7, r3
   14538:	781b      	ldrb	r3, [r3, #0]
   1453a:	2b00      	cmp	r3, #0
   1453c:	d104      	bne.n	14548 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   1453e:	233a      	movs	r3, #58	; 0x3a
   14540:	18fb      	adds	r3, r7, r3
   14542:	781b      	ldrb	r3, [r3, #0]
   14544:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14546:	e00f      	b.n	14568 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14548:	4b12      	ldr	r3, [pc, #72]	; (14594 <I2cDriverConfigureSensorBus+0xac>)
   1454a:	0018      	movs	r0, r3
   1454c:	4b13      	ldr	r3, [pc, #76]	; (1459c <I2cDriverConfigureSensorBus+0xb4>)
   1454e:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14550:	233b      	movs	r3, #59	; 0x3b
   14552:	18fb      	adds	r3, r7, r3
   14554:	781a      	ldrb	r2, [r3, #0]
   14556:	233b      	movs	r3, #59	; 0x3b
   14558:	18fb      	adds	r3, r7, r3
   1455a:	3a01      	subs	r2, #1
   1455c:	701a      	strb	r2, [r3, #0]
   1455e:	233b      	movs	r3, #59	; 0x3b
   14560:	18fb      	adds	r3, r7, r3
   14562:	781b      	ldrb	r3, [r3, #0]
   14564:	2b00      	cmp	r3, #0
   14566:	d1db      	bne.n	14520 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1456a:	2b00      	cmp	r3, #0
   1456c:	d104      	bne.n	14578 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   1456e:	4b09      	ldr	r3, [pc, #36]	; (14594 <I2cDriverConfigureSensorBus+0xac>)
   14570:	0018      	movs	r0, r3
   14572:	4b0b      	ldr	r3, [pc, #44]	; (145a0 <I2cDriverConfigureSensorBus+0xb8>)
   14574:	4798      	blx	r3
   14576:	e000      	b.n	1457a <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14578:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1457c:	0018      	movs	r0, r3
   1457e:	46bd      	mov	sp, r7
   14580:	b011      	add	sp, #68	; 0x44
   14582:	bd90      	pop	{r4, r7, pc}
   14584:	000143bd 	.word	0x000143bd
   14588:	00080002 	.word	0x00080002
   1458c:	00090002 	.word	0x00090002
   14590:	42000800 	.word	0x42000800
   14594:	20004818 	.word	0x20004818
   14598:	000185dd 	.word	0x000185dd
   1459c:	00018711 	.word	0x00018711
   145a0:	00014441 	.word	0x00014441

000145a4 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   145a4:	b580      	push	{r7, lr}
   145a6:	b084      	sub	sp, #16
   145a8:	af00      	add	r7, sp, #0
   145aa:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   145ac:	4b0e      	ldr	r3, [pc, #56]	; (145e8 <I2cSensorsTxComplete+0x44>)
   145ae:	2200      	movs	r2, #0
   145b0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   145b2:	4b0d      	ldr	r3, [pc, #52]	; (145e8 <I2cSensorsTxComplete+0x44>)
   145b4:	2201      	movs	r2, #1
   145b6:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   145b8:	2300      	movs	r3, #0
   145ba:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   145bc:	4b0b      	ldr	r3, [pc, #44]	; (145ec <I2cSensorsTxComplete+0x48>)
   145be:	681b      	ldr	r3, [r3, #0]
   145c0:	220c      	movs	r2, #12
   145c2:	18ba      	adds	r2, r7, r2
   145c4:	0011      	movs	r1, r2
   145c6:	0018      	movs	r0, r3
   145c8:	4b09      	ldr	r3, [pc, #36]	; (145f0 <I2cSensorsTxComplete+0x4c>)
   145ca:	4798      	blx	r3
    sensorTransmitError = false;
   145cc:	4b09      	ldr	r3, [pc, #36]	; (145f4 <I2cSensorsTxComplete+0x50>)
   145ce:	2200      	movs	r2, #0
   145d0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   145d2:	68fb      	ldr	r3, [r7, #12]
   145d4:	2b00      	cmp	r3, #0
   145d6:	d003      	beq.n	145e0 <I2cSensorsTxComplete+0x3c>
   145d8:	4b07      	ldr	r3, [pc, #28]	; (145f8 <I2cSensorsTxComplete+0x54>)
   145da:	2280      	movs	r2, #128	; 0x80
   145dc:	0552      	lsls	r2, r2, #21
   145de:	601a      	str	r2, [r3, #0]
}
   145e0:	46c0      	nop			; (mov r8, r8)
   145e2:	46bd      	mov	sp, r7
   145e4:	b004      	add	sp, #16
   145e6:	bd80      	pop	{r7, pc}
   145e8:	20000604 	.word	0x20000604
   145ec:	20004840 	.word	0x20004840
   145f0:	0001b875 	.word	0x0001b875
   145f4:	20000600 	.word	0x20000600
   145f8:	e000ed04 	.word	0xe000ed04

000145fc <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   145fc:	b580      	push	{r7, lr}
   145fe:	b084      	sub	sp, #16
   14600:	af00      	add	r7, sp, #0
   14602:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14604:	4b0e      	ldr	r3, [pc, #56]	; (14640 <I2cSensorsRxComplete+0x44>)
   14606:	2200      	movs	r2, #0
   14608:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1460a:	4b0d      	ldr	r3, [pc, #52]	; (14640 <I2cSensorsRxComplete+0x44>)
   1460c:	2201      	movs	r2, #1
   1460e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14610:	2300      	movs	r3, #0
   14612:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14614:	4b0b      	ldr	r3, [pc, #44]	; (14644 <I2cSensorsRxComplete+0x48>)
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	220c      	movs	r2, #12
   1461a:	18ba      	adds	r2, r7, r2
   1461c:	0011      	movs	r1, r2
   1461e:	0018      	movs	r0, r3
   14620:	4b09      	ldr	r3, [pc, #36]	; (14648 <I2cSensorsRxComplete+0x4c>)
   14622:	4798      	blx	r3
    sensorTransmitError = false;
   14624:	4b09      	ldr	r3, [pc, #36]	; (1464c <I2cSensorsRxComplete+0x50>)
   14626:	2200      	movs	r2, #0
   14628:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1462a:	68fb      	ldr	r3, [r7, #12]
   1462c:	2b00      	cmp	r3, #0
   1462e:	d003      	beq.n	14638 <I2cSensorsRxComplete+0x3c>
   14630:	4b07      	ldr	r3, [pc, #28]	; (14650 <I2cSensorsRxComplete+0x54>)
   14632:	2280      	movs	r2, #128	; 0x80
   14634:	0552      	lsls	r2, r2, #21
   14636:	601a      	str	r2, [r3, #0]
}
   14638:	46c0      	nop			; (mov r8, r8)
   1463a:	46bd      	mov	sp, r7
   1463c:	b004      	add	sp, #16
   1463e:	bd80      	pop	{r7, pc}
   14640:	20000604 	.word	0x20000604
   14644:	20004840 	.word	0x20004840
   14648:	0001b875 	.word	0x0001b875
   1464c:	20000600 	.word	0x20000600
   14650:	e000ed04 	.word	0xe000ed04

00014654 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14654:	b580      	push	{r7, lr}
   14656:	b084      	sub	sp, #16
   14658:	af00      	add	r7, sp, #0
   1465a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1465c:	4b0e      	ldr	r3, [pc, #56]	; (14698 <I2cSensorsError+0x44>)
   1465e:	2200      	movs	r2, #0
   14660:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14662:	4b0d      	ldr	r3, [pc, #52]	; (14698 <I2cSensorsError+0x44>)
   14664:	2201      	movs	r2, #1
   14666:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14668:	2300      	movs	r3, #0
   1466a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1466c:	4b0b      	ldr	r3, [pc, #44]	; (1469c <I2cSensorsError+0x48>)
   1466e:	681b      	ldr	r3, [r3, #0]
   14670:	220c      	movs	r2, #12
   14672:	18ba      	adds	r2, r7, r2
   14674:	0011      	movs	r1, r2
   14676:	0018      	movs	r0, r3
   14678:	4b09      	ldr	r3, [pc, #36]	; (146a0 <I2cSensorsError+0x4c>)
   1467a:	4798      	blx	r3
    sensorTransmitError = true;
   1467c:	4b09      	ldr	r3, [pc, #36]	; (146a4 <I2cSensorsError+0x50>)
   1467e:	2201      	movs	r2, #1
   14680:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14682:	68fb      	ldr	r3, [r7, #12]
   14684:	2b00      	cmp	r3, #0
   14686:	d003      	beq.n	14690 <I2cSensorsError+0x3c>
   14688:	4b07      	ldr	r3, [pc, #28]	; (146a8 <I2cSensorsError+0x54>)
   1468a:	2280      	movs	r2, #128	; 0x80
   1468c:	0552      	lsls	r2, r2, #21
   1468e:	601a      	str	r2, [r3, #0]
}
   14690:	46c0      	nop			; (mov r8, r8)
   14692:	46bd      	mov	sp, r7
   14694:	b004      	add	sp, #16
   14696:	bd80      	pop	{r7, pc}
   14698:	20000604 	.word	0x20000604
   1469c:	20004840 	.word	0x20004840
   146a0:	0001b875 	.word	0x0001b875
   146a4:	20000600 	.word	0x20000600
   146a8:	e000ed04 	.word	0xe000ed04

000146ac <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   146ac:	b580      	push	{r7, lr}
   146ae:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   146b0:	4911      	ldr	r1, [pc, #68]	; (146f8 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   146b2:	4b12      	ldr	r3, [pc, #72]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146b4:	2200      	movs	r2, #0
   146b6:	0018      	movs	r0, r3
   146b8:	4b11      	ldr	r3, [pc, #68]	; (14700 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   146ba:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   146bc:	4b0f      	ldr	r3, [pc, #60]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146be:	2100      	movs	r1, #0
   146c0:	0018      	movs	r0, r3
   146c2:	4b10      	ldr	r3, [pc, #64]	; (14704 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   146c4:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   146c6:	4910      	ldr	r1, [pc, #64]	; (14708 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   146c8:	4b0c      	ldr	r3, [pc, #48]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146ca:	2201      	movs	r2, #1
   146cc:	0018      	movs	r0, r3
   146ce:	4b0c      	ldr	r3, [pc, #48]	; (14700 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   146d0:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   146d2:	4b0a      	ldr	r3, [pc, #40]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146d4:	2101      	movs	r1, #1
   146d6:	0018      	movs	r0, r3
   146d8:	4b0a      	ldr	r3, [pc, #40]	; (14704 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   146da:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   146dc:	490b      	ldr	r1, [pc, #44]	; (1470c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   146de:	4b07      	ldr	r3, [pc, #28]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146e0:	2202      	movs	r2, #2
   146e2:	0018      	movs	r0, r3
   146e4:	4b06      	ldr	r3, [pc, #24]	; (14700 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   146e6:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   146e8:	4b04      	ldr	r3, [pc, #16]	; (146fc <I2cDriverRegisterSensorBusCallbacks+0x50>)
   146ea:	2102      	movs	r1, #2
   146ec:	0018      	movs	r0, r3
   146ee:	4b05      	ldr	r3, [pc, #20]	; (14704 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   146f0:	4798      	blx	r3
}
   146f2:	46c0      	nop			; (mov r8, r8)
   146f4:	46bd      	mov	sp, r7
   146f6:	bd80      	pop	{r7, pc}
   146f8:	000145a5 	.word	0x000145a5
   146fc:	20004818 	.word	0x20004818
   14700:	000132b1 	.word	0x000132b1
   14704:	000144b5 	.word	0x000144b5
   14708:	000145fd 	.word	0x000145fd
   1470c:	00014655 	.word	0x00014655

00014710 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14710:	b580      	push	{r7, lr}
   14712:	b082      	sub	sp, #8
   14714:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14716:	2300      	movs	r3, #0
   14718:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1471a:	4b14      	ldr	r3, [pc, #80]	; (1476c <I2cInitializeDriver+0x5c>)
   1471c:	4798      	blx	r3
   1471e:	0003      	movs	r3, r0
   14720:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14722:	687b      	ldr	r3, [r7, #4]
   14724:	2b00      	cmp	r3, #0
   14726:	d11a      	bne.n	1475e <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14728:	4b11      	ldr	r3, [pc, #68]	; (14770 <I2cInitializeDriver+0x60>)
   1472a:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   1472c:	2001      	movs	r0, #1
   1472e:	4b11      	ldr	r3, [pc, #68]	; (14774 <I2cInitializeDriver+0x64>)
   14730:	4798      	blx	r3
   14732:	0002      	movs	r2, r0
   14734:	4b10      	ldr	r3, [pc, #64]	; (14778 <I2cInitializeDriver+0x68>)
   14736:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14738:	2203      	movs	r2, #3
   1473a:	2100      	movs	r1, #0
   1473c:	2001      	movs	r0, #1
   1473e:	4b0f      	ldr	r3, [pc, #60]	; (1477c <I2cInitializeDriver+0x6c>)
   14740:	4798      	blx	r3
   14742:	0002      	movs	r2, r0
   14744:	4b0e      	ldr	r3, [pc, #56]	; (14780 <I2cInitializeDriver+0x70>)
   14746:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14748:	4b0b      	ldr	r3, [pc, #44]	; (14778 <I2cInitializeDriver+0x68>)
   1474a:	681b      	ldr	r3, [r3, #0]
   1474c:	2b00      	cmp	r3, #0
   1474e:	d003      	beq.n	14758 <I2cInitializeDriver+0x48>
   14750:	4b0b      	ldr	r3, [pc, #44]	; (14780 <I2cInitializeDriver+0x70>)
   14752:	681b      	ldr	r3, [r3, #0]
   14754:	2b00      	cmp	r3, #0
   14756:	d103      	bne.n	14760 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14758:	2306      	movs	r3, #6
   1475a:	607b      	str	r3, [r7, #4]
        goto exit;
   1475c:	e000      	b.n	14760 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   1475e:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14760:	687b      	ldr	r3, [r7, #4]
}
   14762:	0018      	movs	r0, r3
   14764:	46bd      	mov	sp, r7
   14766:	b002      	add	sp, #8
   14768:	bd80      	pop	{r7, pc}
   1476a:	46c0      	nop			; (mov r8, r8)
   1476c:	000144e9 	.word	0x000144e9
   14770:	000146ad 	.word	0x000146ad
   14774:	0001b1ad 	.word	0x0001b1ad
   14778:	20004814 	.word	0x20004814
   1477c:	0001af45 	.word	0x0001af45
   14780:	20004840 	.word	0x20004840

00014784 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14784:	b590      	push	{r4, r7, lr}
   14786:	b085      	sub	sp, #20
   14788:	af00      	add	r7, sp, #0
   1478a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1478c:	2300      	movs	r3, #0
   1478e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14790:	687b      	ldr	r3, [r7, #4]
   14792:	2b00      	cmp	r3, #0
   14794:	d003      	beq.n	1479e <I2cWriteData+0x1a>
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	685b      	ldr	r3, [r3, #4]
   1479a:	2b00      	cmp	r3, #0
   1479c:	d103      	bne.n	147a6 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1479e:	2308      	movs	r3, #8
   147a0:	425b      	negs	r3, r3
   147a2:	60fb      	str	r3, [r7, #12]
        goto exit;
   147a4:	e01f      	b.n	147e6 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   147a6:	687b      	ldr	r3, [r7, #4]
   147a8:	781b      	ldrb	r3, [r3, #0]
   147aa:	b29a      	uxth	r2, r3
   147ac:	4b10      	ldr	r3, [pc, #64]	; (147f0 <I2cWriteData+0x6c>)
   147ae:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	685a      	ldr	r2, [r3, #4]
   147b4:	4b0e      	ldr	r3, [pc, #56]	; (147f0 <I2cWriteData+0x6c>)
   147b6:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   147b8:	687b      	ldr	r3, [r7, #4]
   147ba:	89da      	ldrh	r2, [r3, #14]
   147bc:	4b0c      	ldr	r3, [pc, #48]	; (147f0 <I2cWriteData+0x6c>)
   147be:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   147c0:	230b      	movs	r3, #11
   147c2:	18fc      	adds	r4, r7, r3
   147c4:	4a0a      	ldr	r2, [pc, #40]	; (147f0 <I2cWriteData+0x6c>)
   147c6:	4b0b      	ldr	r3, [pc, #44]	; (147f4 <I2cWriteData+0x70>)
   147c8:	0011      	movs	r1, r2
   147ca:	0018      	movs	r0, r3
   147cc:	4b0a      	ldr	r3, [pc, #40]	; (147f8 <I2cWriteData+0x74>)
   147ce:	4798      	blx	r3
   147d0:	0003      	movs	r3, r0
   147d2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   147d4:	230b      	movs	r3, #11
   147d6:	18fb      	adds	r3, r7, r3
   147d8:	781b      	ldrb	r3, [r3, #0]
   147da:	2b00      	cmp	r3, #0
   147dc:	d003      	beq.n	147e6 <I2cWriteData+0x62>
        error = ERROR_IO;
   147de:	2306      	movs	r3, #6
   147e0:	425b      	negs	r3, r3
   147e2:	60fb      	str	r3, [r7, #12]
        goto exit;
   147e4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   147e6:	68fb      	ldr	r3, [r7, #12]
}
   147e8:	0018      	movs	r0, r3
   147ea:	46bd      	mov	sp, r7
   147ec:	b005      	add	sp, #20
   147ee:	bd90      	pop	{r4, r7, pc}
   147f0:	20004844 	.word	0x20004844
   147f4:	20004818 	.word	0x20004818
   147f8:	00013535 	.word	0x00013535

000147fc <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   147fc:	b590      	push	{r4, r7, lr}
   147fe:	b085      	sub	sp, #20
   14800:	af00      	add	r7, sp, #0
   14802:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14804:	2300      	movs	r3, #0
   14806:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14808:	687b      	ldr	r3, [r7, #4]
   1480a:	2b00      	cmp	r3, #0
   1480c:	d003      	beq.n	14816 <I2cReadData+0x1a>
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	685b      	ldr	r3, [r3, #4]
   14812:	2b00      	cmp	r3, #0
   14814:	d103      	bne.n	1481e <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14816:	2308      	movs	r3, #8
   14818:	425b      	negs	r3, r3
   1481a:	60fb      	str	r3, [r7, #12]
        goto exit;
   1481c:	e01f      	b.n	1485e <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1481e:	687b      	ldr	r3, [r7, #4]
   14820:	781b      	ldrb	r3, [r3, #0]
   14822:	b29a      	uxth	r2, r3
   14824:	4b10      	ldr	r3, [pc, #64]	; (14868 <I2cReadData+0x6c>)
   14826:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14828:	687b      	ldr	r3, [r7, #4]
   1482a:	689a      	ldr	r2, [r3, #8]
   1482c:	4b0e      	ldr	r3, [pc, #56]	; (14868 <I2cReadData+0x6c>)
   1482e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14830:	687b      	ldr	r3, [r7, #4]
   14832:	899a      	ldrh	r2, [r3, #12]
   14834:	4b0c      	ldr	r3, [pc, #48]	; (14868 <I2cReadData+0x6c>)
   14836:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14838:	230b      	movs	r3, #11
   1483a:	18fc      	adds	r4, r7, r3
   1483c:	4a0a      	ldr	r2, [pc, #40]	; (14868 <I2cReadData+0x6c>)
   1483e:	4b0b      	ldr	r3, [pc, #44]	; (1486c <I2cReadData+0x70>)
   14840:	0011      	movs	r1, r2
   14842:	0018      	movs	r0, r3
   14844:	4b0a      	ldr	r3, [pc, #40]	; (14870 <I2cReadData+0x74>)
   14846:	4798      	blx	r3
   14848:	0003      	movs	r3, r0
   1484a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   1484c:	230b      	movs	r3, #11
   1484e:	18fb      	adds	r3, r7, r3
   14850:	781b      	ldrb	r3, [r3, #0]
   14852:	2b00      	cmp	r3, #0
   14854:	d003      	beq.n	1485e <I2cReadData+0x62>
        error = ERROR_IO;
   14856:	2306      	movs	r3, #6
   14858:	425b      	negs	r3, r3
   1485a:	60fb      	str	r3, [r7, #12]
        goto exit;
   1485c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1485e:	68fb      	ldr	r3, [r7, #12]
}
   14860:	0018      	movs	r0, r3
   14862:	46bd      	mov	sp, r7
   14864:	b005      	add	sp, #20
   14866:	bd90      	pop	{r4, r7, pc}
   14868:	20004844 	.word	0x20004844
   1486c:	20004818 	.word	0x20004818
   14870:	00013451 	.word	0x00013451

00014874 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14874:	b590      	push	{r4, r7, lr}
   14876:	b083      	sub	sp, #12
   14878:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1487a:	2300      	movs	r3, #0
   1487c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1487e:	4b09      	ldr	r3, [pc, #36]	; (148a4 <I2cFreeMutex+0x30>)
   14880:	6818      	ldr	r0, [r3, #0]
   14882:	2300      	movs	r3, #0
   14884:	2200      	movs	r2, #0
   14886:	2100      	movs	r1, #0
   14888:	4c07      	ldr	r4, [pc, #28]	; (148a8 <I2cFreeMutex+0x34>)
   1488a:	47a0      	blx	r4
   1488c:	0003      	movs	r3, r0
   1488e:	2b01      	cmp	r3, #1
   14890:	d002      	beq.n	14898 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14892:	2314      	movs	r3, #20
   14894:	425b      	negs	r3, r3
   14896:	607b      	str	r3, [r7, #4]
    }
    return error;
   14898:	687b      	ldr	r3, [r7, #4]
}
   1489a:	0018      	movs	r0, r3
   1489c:	46bd      	mov	sp, r7
   1489e:	b003      	add	sp, #12
   148a0:	bd90      	pop	{r4, r7, pc}
   148a2:	46c0      	nop			; (mov r8, r8)
   148a4:	20004814 	.word	0x20004814
   148a8:	0001b1ed 	.word	0x0001b1ed

000148ac <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   148ac:	b580      	push	{r7, lr}
   148ae:	b084      	sub	sp, #16
   148b0:	af00      	add	r7, sp, #0
   148b2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   148b4:	2300      	movs	r3, #0
   148b6:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   148b8:	4b08      	ldr	r3, [pc, #32]	; (148dc <I2cGetMutex+0x30>)
   148ba:	681b      	ldr	r3, [r3, #0]
   148bc:	687a      	ldr	r2, [r7, #4]
   148be:	0011      	movs	r1, r2
   148c0:	0018      	movs	r0, r3
   148c2:	4b07      	ldr	r3, [pc, #28]	; (148e0 <I2cGetMutex+0x34>)
   148c4:	4798      	blx	r3
   148c6:	0003      	movs	r3, r0
   148c8:	2b01      	cmp	r3, #1
   148ca:	d002      	beq.n	148d2 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   148cc:	231d      	movs	r3, #29
   148ce:	425b      	negs	r3, r3
   148d0:	60fb      	str	r3, [r7, #12]
    }
    return error;
   148d2:	68fb      	ldr	r3, [r7, #12]
}
   148d4:	0018      	movs	r0, r3
   148d6:	46bd      	mov	sp, r7
   148d8:	b004      	add	sp, #16
   148da:	bd80      	pop	{r7, pc}
   148dc:	20004814 	.word	0x20004814
   148e0:	0001befd 	.word	0x0001befd

000148e4 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   148e4:	b580      	push	{r7, lr}
   148e6:	b084      	sub	sp, #16
   148e8:	af00      	add	r7, sp, #0
   148ea:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   148ec:	2300      	movs	r3, #0
   148ee:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   148f0:	4b04      	ldr	r3, [pc, #16]	; (14904 <I2cGetSemaphoreHandle+0x20>)
   148f2:	681a      	ldr	r2, [r3, #0]
   148f4:	687b      	ldr	r3, [r7, #4]
   148f6:	601a      	str	r2, [r3, #0]
    return error;
   148f8:	68fb      	ldr	r3, [r7, #12]
}
   148fa:	0018      	movs	r0, r3
   148fc:	46bd      	mov	sp, r7
   148fe:	b004      	add	sp, #16
   14900:	bd80      	pop	{r7, pc}
   14902:	46c0      	nop			; (mov r8, r8)
   14904:	20004840 	.word	0x20004840

00014908 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14908:	b580      	push	{r7, lr}
   1490a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   1490c:	4b02      	ldr	r3, [pc, #8]	; (14918 <I2cGetTaskErrorStatus+0x10>)
   1490e:	781b      	ldrb	r3, [r3, #0]
}
   14910:	0018      	movs	r0, r3
   14912:	46bd      	mov	sp, r7
   14914:	bd80      	pop	{r7, pc}
   14916:	46c0      	nop			; (mov r8, r8)
   14918:	20000600 	.word	0x20000600

0001491c <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   1491c:	b580      	push	{r7, lr}
   1491e:	b082      	sub	sp, #8
   14920:	af00      	add	r7, sp, #0
   14922:	0002      	movs	r2, r0
   14924:	1dfb      	adds	r3, r7, #7
   14926:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14928:	4b03      	ldr	r3, [pc, #12]	; (14938 <I2cSetTaskErrorStatus+0x1c>)
   1492a:	1dfa      	adds	r2, r7, #7
   1492c:	7812      	ldrb	r2, [r2, #0]
   1492e:	701a      	strb	r2, [r3, #0]
}
   14930:	46c0      	nop			; (mov r8, r8)
   14932:	46bd      	mov	sp, r7
   14934:	b002      	add	sp, #8
   14936:	bd80      	pop	{r7, pc}
   14938:	20000600 	.word	0x20000600

0001493c <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   1493c:	b580      	push	{r7, lr}
   1493e:	b084      	sub	sp, #16
   14940:	af00      	add	r7, sp, #0
   14942:	6078      	str	r0, [r7, #4]
   14944:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14946:	2300      	movs	r3, #0
   14948:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   1494a:	2300      	movs	r3, #0
   1494c:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1494e:	2396      	movs	r3, #150	; 0x96
   14950:	005b      	lsls	r3, r3, #1
   14952:	0018      	movs	r0, r3
   14954:	4b28      	ldr	r3, [pc, #160]	; (149f8 <I2cWriteDataWait+0xbc>)
   14956:	4798      	blx	r3
   14958:	0003      	movs	r3, r0
   1495a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   1495c:	68fb      	ldr	r3, [r7, #12]
   1495e:	2b00      	cmp	r3, #0
   14960:	d138      	bne.n	149d4 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14962:	2308      	movs	r3, #8
   14964:	18fb      	adds	r3, r7, r3
   14966:	0018      	movs	r0, r3
   14968:	4b24      	ldr	r3, [pc, #144]	; (149fc <I2cWriteDataWait+0xc0>)
   1496a:	4798      	blx	r3
   1496c:	0003      	movs	r3, r0
   1496e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14970:	68fb      	ldr	r3, [r7, #12]
   14972:	2b00      	cmp	r3, #0
   14974:	d130      	bne.n	149d8 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	0018      	movs	r0, r3
   1497a:	4b21      	ldr	r3, [pc, #132]	; (14a00 <I2cWriteDataWait+0xc4>)
   1497c:	4798      	blx	r3
   1497e:	0003      	movs	r3, r0
   14980:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14982:	68fb      	ldr	r3, [r7, #12]
   14984:	2b00      	cmp	r3, #0
   14986:	d12a      	bne.n	149de <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14988:	68bb      	ldr	r3, [r7, #8]
   1498a:	683a      	ldr	r2, [r7, #0]
   1498c:	0011      	movs	r1, r2
   1498e:	0018      	movs	r0, r3
   14990:	4b1c      	ldr	r3, [pc, #112]	; (14a04 <I2cWriteDataWait+0xc8>)
   14992:	4798      	blx	r3
   14994:	0003      	movs	r3, r0
   14996:	2b01      	cmp	r3, #1
   14998:	d111      	bne.n	149be <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1499a:	4b1b      	ldr	r3, [pc, #108]	; (14a08 <I2cWriteDataWait+0xcc>)
   1499c:	4798      	blx	r3
   1499e:	1e03      	subs	r3, r0, #0
   149a0:	d011      	beq.n	149c6 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   149a2:	2000      	movs	r0, #0
   149a4:	4b19      	ldr	r3, [pc, #100]	; (14a0c <I2cWriteDataWait+0xd0>)
   149a6:	4798      	blx	r3
            if (error != ERROR_NONE) {
   149a8:	68fb      	ldr	r3, [r7, #12]
   149aa:	2b00      	cmp	r3, #0
   149ac:	d003      	beq.n	149b6 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   149ae:	2321      	movs	r3, #33	; 0x21
   149b0:	425b      	negs	r3, r3
   149b2:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   149b4:	e014      	b.n	149e0 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   149b6:	2303      	movs	r3, #3
   149b8:	425b      	negs	r3, r3
   149ba:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   149bc:	e010      	b.n	149e0 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   149be:	2303      	movs	r3, #3
   149c0:	425b      	negs	r3, r3
   149c2:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   149c4:	e00c      	b.n	149e0 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   149c6:	4b12      	ldr	r3, [pc, #72]	; (14a10 <I2cWriteDataWait+0xd4>)
   149c8:	4798      	blx	r3
   149ca:	0002      	movs	r2, r0
   149cc:	68fb      	ldr	r3, [r7, #12]
   149ce:	4313      	orrs	r3, r2
   149d0:	60fb      	str	r3, [r7, #12]
   149d2:	e002      	b.n	149da <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   149d4:	46c0      	nop			; (mov r8, r8)
   149d6:	e000      	b.n	149da <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   149d8:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   149da:	68fb      	ldr	r3, [r7, #12]
   149dc:	e007      	b.n	149ee <I2cWriteDataWait+0xb2>
        goto exitError0;
   149de:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   149e0:	4b0b      	ldr	r3, [pc, #44]	; (14a10 <I2cWriteDataWait+0xd4>)
   149e2:	4798      	blx	r3
   149e4:	0002      	movs	r2, r0
   149e6:	68fb      	ldr	r3, [r7, #12]
   149e8:	4313      	orrs	r3, r2
   149ea:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   149ec:	68fb      	ldr	r3, [r7, #12]
}
   149ee:	0018      	movs	r0, r3
   149f0:	46bd      	mov	sp, r7
   149f2:	b004      	add	sp, #16
   149f4:	bd80      	pop	{r7, pc}
   149f6:	46c0      	nop			; (mov r8, r8)
   149f8:	000148ad 	.word	0x000148ad
   149fc:	000148e5 	.word	0x000148e5
   14a00:	00014785 	.word	0x00014785
   14a04:	0001befd 	.word	0x0001befd
   14a08:	00014909 	.word	0x00014909
   14a0c:	0001491d 	.word	0x0001491d
   14a10:	00014875 	.word	0x00014875

00014a14 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14a14:	b580      	push	{r7, lr}
   14a16:	b086      	sub	sp, #24
   14a18:	af00      	add	r7, sp, #0
   14a1a:	60f8      	str	r0, [r7, #12]
   14a1c:	60b9      	str	r1, [r7, #8]
   14a1e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14a20:	2300      	movs	r3, #0
   14a22:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14a24:	2300      	movs	r3, #0
   14a26:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14a28:	2396      	movs	r3, #150	; 0x96
   14a2a:	005b      	lsls	r3, r3, #1
   14a2c:	0018      	movs	r0, r3
   14a2e:	4b35      	ldr	r3, [pc, #212]	; (14b04 <I2cReadDataWait+0xf0>)
   14a30:	4798      	blx	r3
   14a32:	0003      	movs	r3, r0
   14a34:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14a36:	697b      	ldr	r3, [r7, #20]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d155      	bne.n	14ae8 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14a3c:	2310      	movs	r3, #16
   14a3e:	18fb      	adds	r3, r7, r3
   14a40:	0018      	movs	r0, r3
   14a42:	4b31      	ldr	r3, [pc, #196]	; (14b08 <I2cReadDataWait+0xf4>)
   14a44:	4798      	blx	r3
   14a46:	0003      	movs	r3, r0
   14a48:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14a4a:	697b      	ldr	r3, [r7, #20]
   14a4c:	2b00      	cmp	r3, #0
   14a4e:	d14d      	bne.n	14aec <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14a50:	68fb      	ldr	r3, [r7, #12]
   14a52:	0018      	movs	r0, r3
   14a54:	4b2d      	ldr	r3, [pc, #180]	; (14b0c <I2cReadDataWait+0xf8>)
   14a56:	4798      	blx	r3
   14a58:	0003      	movs	r3, r0
   14a5a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14a5c:	697b      	ldr	r3, [r7, #20]
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d147      	bne.n	14af2 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14a62:	693b      	ldr	r3, [r7, #16]
   14a64:	687a      	ldr	r2, [r7, #4]
   14a66:	0011      	movs	r1, r2
   14a68:	0018      	movs	r0, r3
   14a6a:	4b29      	ldr	r3, [pc, #164]	; (14b10 <I2cReadDataWait+0xfc>)
   14a6c:	4798      	blx	r3
   14a6e:	0003      	movs	r3, r0
   14a70:	2b01      	cmp	r3, #1
   14a72:	d118      	bne.n	14aa6 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14a74:	4b27      	ldr	r3, [pc, #156]	; (14b14 <I2cReadDataWait+0x100>)
   14a76:	4798      	blx	r3
   14a78:	1e03      	subs	r3, r0, #0
   14a7a:	d006      	beq.n	14a8a <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14a7c:	2000      	movs	r0, #0
   14a7e:	4b26      	ldr	r3, [pc, #152]	; (14b18 <I2cReadDataWait+0x104>)
   14a80:	4798      	blx	r3
            error = ERROR_ABORTED;
   14a82:	2303      	movs	r3, #3
   14a84:	425b      	negs	r3, r3
   14a86:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14a88:	e034      	b.n	14af4 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14a8a:	68bb      	ldr	r3, [r7, #8]
   14a8c:	0018      	movs	r0, r3
   14a8e:	4b23      	ldr	r3, [pc, #140]	; (14b1c <I2cReadDataWait+0x108>)
   14a90:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14a92:	68fb      	ldr	r3, [r7, #12]
   14a94:	0018      	movs	r0, r3
   14a96:	4b22      	ldr	r3, [pc, #136]	; (14b20 <I2cReadDataWait+0x10c>)
   14a98:	4798      	blx	r3
   14a9a:	0003      	movs	r3, r0
   14a9c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14a9e:	697b      	ldr	r3, [r7, #20]
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	d004      	beq.n	14aae <I2cReadDataWait+0x9a>
        goto exitError0;
   14aa4:	e026      	b.n	14af4 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14aa6:	2303      	movs	r3, #3
   14aa8:	425b      	negs	r3, r3
   14aaa:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14aac:	e022      	b.n	14af4 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14aae:	693b      	ldr	r3, [r7, #16]
   14ab0:	687a      	ldr	r2, [r7, #4]
   14ab2:	0011      	movs	r1, r2
   14ab4:	0018      	movs	r0, r3
   14ab6:	4b16      	ldr	r3, [pc, #88]	; (14b10 <I2cReadDataWait+0xfc>)
   14ab8:	4798      	blx	r3
   14aba:	0003      	movs	r3, r0
   14abc:	2b01      	cmp	r3, #1
   14abe:	d10a      	bne.n	14ad6 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14ac0:	4b14      	ldr	r3, [pc, #80]	; (14b14 <I2cReadDataWait+0x100>)
   14ac2:	4798      	blx	r3
   14ac4:	1e03      	subs	r3, r0, #0
   14ac6:	d00a      	beq.n	14ade <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14ac8:	2000      	movs	r0, #0
   14aca:	4b13      	ldr	r3, [pc, #76]	; (14b18 <I2cReadDataWait+0x104>)
   14acc:	4798      	blx	r3
            error = ERROR_ABORTED;
   14ace:	2303      	movs	r3, #3
   14ad0:	425b      	negs	r3, r3
   14ad2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14ad4:	e00e      	b.n	14af4 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14ad6:	2303      	movs	r3, #3
   14ad8:	425b      	negs	r3, r3
   14ada:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14adc:	e00a      	b.n	14af4 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14ade:	4b11      	ldr	r3, [pc, #68]	; (14b24 <I2cReadDataWait+0x110>)
   14ae0:	4798      	blx	r3
   14ae2:	0003      	movs	r3, r0
   14ae4:	617b      	str	r3, [r7, #20]
   14ae6:	e002      	b.n	14aee <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14ae8:	46c0      	nop			; (mov r8, r8)
   14aea:	e000      	b.n	14aee <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14aec:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14aee:	697b      	ldr	r3, [r7, #20]
   14af0:	e003      	b.n	14afa <I2cReadDataWait+0xe6>
        goto exitError0;
   14af2:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14af4:	4b0b      	ldr	r3, [pc, #44]	; (14b24 <I2cReadDataWait+0x110>)
   14af6:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14af8:	697b      	ldr	r3, [r7, #20]
}
   14afa:	0018      	movs	r0, r3
   14afc:	46bd      	mov	sp, r7
   14afe:	b006      	add	sp, #24
   14b00:	bd80      	pop	{r7, pc}
   14b02:	46c0      	nop			; (mov r8, r8)
   14b04:	000148ad 	.word	0x000148ad
   14b08:	000148e5 	.word	0x000148e5
   14b0c:	00014785 	.word	0x00014785
   14b10:	0001befd 	.word	0x0001befd
   14b14:	00014909 	.word	0x00014909
   14b18:	0001491d 	.word	0x0001491d
   14b1c:	0001cc51 	.word	0x0001cc51
   14b20:	000147fd 	.word	0x000147fd
   14b24:	00014875 	.word	0x00014875

00014b28 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14b28:	b5b0      	push	{r4, r5, r7, lr}
   14b2a:	b086      	sub	sp, #24
   14b2c:	af00      	add	r7, sp, #0
   14b2e:	60f8      	str	r0, [r7, #12]
   14b30:	0008      	movs	r0, r1
   14b32:	607a      	str	r2, [r7, #4]
   14b34:	0019      	movs	r1, r3
   14b36:	230b      	movs	r3, #11
   14b38:	18fb      	adds	r3, r7, r3
   14b3a:	1c02      	adds	r2, r0, #0
   14b3c:	701a      	strb	r2, [r3, #0]
   14b3e:	2308      	movs	r3, #8
   14b40:	18fb      	adds	r3, r7, r3
   14b42:	1c0a      	adds	r2, r1, #0
   14b44:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14b46:	68fb      	ldr	r3, [r7, #12]
   14b48:	685c      	ldr	r4, [r3, #4]
   14b4a:	68fb      	ldr	r3, [r7, #12]
   14b4c:	6898      	ldr	r0, [r3, #8]
   14b4e:	2308      	movs	r3, #8
   14b50:	18fb      	adds	r3, r7, r3
   14b52:	881d      	ldrh	r5, [r3, #0]
   14b54:	687a      	ldr	r2, [r7, #4]
   14b56:	230b      	movs	r3, #11
   14b58:	18fb      	adds	r3, r7, r3
   14b5a:	7819      	ldrb	r1, [r3, #0]
   14b5c:	002b      	movs	r3, r5
   14b5e:	47a0      	blx	r4
   14b60:	0003      	movs	r3, r0
   14b62:	617b      	str	r3, [r7, #20]

  return ret;
   14b64:	697b      	ldr	r3, [r7, #20]
}
   14b66:	0018      	movs	r0, r3
   14b68:	46bd      	mov	sp, r7
   14b6a:	b006      	add	sp, #24
   14b6c:	bdb0      	pop	{r4, r5, r7, pc}

00014b6e <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14b6e:	b5b0      	push	{r4, r5, r7, lr}
   14b70:	b086      	sub	sp, #24
   14b72:	af00      	add	r7, sp, #0
   14b74:	60f8      	str	r0, [r7, #12]
   14b76:	0008      	movs	r0, r1
   14b78:	607a      	str	r2, [r7, #4]
   14b7a:	0019      	movs	r1, r3
   14b7c:	230b      	movs	r3, #11
   14b7e:	18fb      	adds	r3, r7, r3
   14b80:	1c02      	adds	r2, r0, #0
   14b82:	701a      	strb	r2, [r3, #0]
   14b84:	2308      	movs	r3, #8
   14b86:	18fb      	adds	r3, r7, r3
   14b88:	1c0a      	adds	r2, r1, #0
   14b8a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14b8c:	68fb      	ldr	r3, [r7, #12]
   14b8e:	681c      	ldr	r4, [r3, #0]
   14b90:	68fb      	ldr	r3, [r7, #12]
   14b92:	6898      	ldr	r0, [r3, #8]
   14b94:	2308      	movs	r3, #8
   14b96:	18fb      	adds	r3, r7, r3
   14b98:	881d      	ldrh	r5, [r3, #0]
   14b9a:	687a      	ldr	r2, [r7, #4]
   14b9c:	230b      	movs	r3, #11
   14b9e:	18fb      	adds	r3, r7, r3
   14ba0:	7819      	ldrb	r1, [r3, #0]
   14ba2:	002b      	movs	r3, r5
   14ba4:	47a0      	blx	r4
   14ba6:	0003      	movs	r3, r0
   14ba8:	617b      	str	r3, [r7, #20]

  return ret;
   14baa:	697b      	ldr	r3, [r7, #20]
}
   14bac:	0018      	movs	r0, r3
   14bae:	46bd      	mov	sp, r7
   14bb0:	b006      	add	sp, #24
   14bb2:	bdb0      	pop	{r4, r5, r7, pc}

00014bb4 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b082      	sub	sp, #8
   14bb8:	af00      	add	r7, sp, #0
   14bba:	0002      	movs	r2, r0
   14bbc:	1dbb      	adds	r3, r7, #6
   14bbe:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14bc0:	1dbb      	adds	r3, r7, #6
   14bc2:	2200      	movs	r2, #0
   14bc4:	5e9a      	ldrsh	r2, [r3, r2]
   14bc6:	4b06      	ldr	r3, [pc, #24]	; (14be0 <lsm6dso_from_fs2_to_mg+0x2c>)
   14bc8:	0010      	movs	r0, r2
   14bca:	4798      	blx	r3
   14bcc:	1c02      	adds	r2, r0, #0
   14bce:	4b05      	ldr	r3, [pc, #20]	; (14be4 <lsm6dso_from_fs2_to_mg+0x30>)
   14bd0:	4905      	ldr	r1, [pc, #20]	; (14be8 <lsm6dso_from_fs2_to_mg+0x34>)
   14bd2:	1c10      	adds	r0, r2, #0
   14bd4:	4798      	blx	r3
   14bd6:	1c03      	adds	r3, r0, #0
}
   14bd8:	1c18      	adds	r0, r3, #0
   14bda:	46bd      	mov	sp, r7
   14bdc:	b002      	add	sp, #8
   14bde:	bd80      	pop	{r7, pc}
   14be0:	00034581 	.word	0x00034581
   14be4:	00033fc9 	.word	0x00033fc9
   14be8:	3d79db23 	.word	0x3d79db23

00014bec <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14bec:	b590      	push	{r4, r7, lr}
   14bee:	b085      	sub	sp, #20
   14bf0:	af00      	add	r7, sp, #0
   14bf2:	6078      	str	r0, [r7, #4]
   14bf4:	000a      	movs	r2, r1
   14bf6:	1cfb      	adds	r3, r7, #3
   14bf8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14bfa:	2308      	movs	r3, #8
   14bfc:	18fa      	adds	r2, r7, r3
   14bfe:	6878      	ldr	r0, [r7, #4]
   14c00:	2301      	movs	r3, #1
   14c02:	2110      	movs	r1, #16
   14c04:	4c12      	ldr	r4, [pc, #72]	; (14c50 <lsm6dso_xl_full_scale_set+0x64>)
   14c06:	47a0      	blx	r4
   14c08:	0003      	movs	r3, r0
   14c0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14c0c:	68fb      	ldr	r3, [r7, #12]
   14c0e:	2b00      	cmp	r3, #0
   14c10:	d119      	bne.n	14c46 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14c12:	1cfb      	adds	r3, r7, #3
   14c14:	781b      	ldrb	r3, [r3, #0]
   14c16:	2203      	movs	r2, #3
   14c18:	4013      	ands	r3, r2
   14c1a:	b2da      	uxtb	r2, r3
   14c1c:	2308      	movs	r3, #8
   14c1e:	18fb      	adds	r3, r7, r3
   14c20:	2103      	movs	r1, #3
   14c22:	400a      	ands	r2, r1
   14c24:	0090      	lsls	r0, r2, #2
   14c26:	781a      	ldrb	r2, [r3, #0]
   14c28:	210c      	movs	r1, #12
   14c2a:	438a      	bics	r2, r1
   14c2c:	1c11      	adds	r1, r2, #0
   14c2e:	1c02      	adds	r2, r0, #0
   14c30:	430a      	orrs	r2, r1
   14c32:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14c34:	2308      	movs	r3, #8
   14c36:	18fa      	adds	r2, r7, r3
   14c38:	6878      	ldr	r0, [r7, #4]
   14c3a:	2301      	movs	r3, #1
   14c3c:	2110      	movs	r1, #16
   14c3e:	4c05      	ldr	r4, [pc, #20]	; (14c54 <lsm6dso_xl_full_scale_set+0x68>)
   14c40:	47a0      	blx	r4
   14c42:	0003      	movs	r3, r0
   14c44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14c46:	68fb      	ldr	r3, [r7, #12]
}
   14c48:	0018      	movs	r0, r3
   14c4a:	46bd      	mov	sp, r7
   14c4c:	b005      	add	sp, #20
   14c4e:	bd90      	pop	{r4, r7, pc}
   14c50:	00014b29 	.word	0x00014b29
   14c54:	00014b6f 	.word	0x00014b6f

00014c58 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14c58:	b590      	push	{r4, r7, lr}
   14c5a:	b087      	sub	sp, #28
   14c5c:	af00      	add	r7, sp, #0
   14c5e:	6078      	str	r0, [r7, #4]
   14c60:	000a      	movs	r2, r1
   14c62:	1cfb      	adds	r3, r7, #3
   14c64:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14c66:	2317      	movs	r3, #23
   14c68:	18fb      	adds	r3, r7, r3
   14c6a:	1cfa      	adds	r2, r7, #3
   14c6c:	7812      	ldrb	r2, [r2, #0]
   14c6e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14c70:	230c      	movs	r3, #12
   14c72:	18fa      	adds	r2, r7, r3
   14c74:	687b      	ldr	r3, [r7, #4]
   14c76:	0011      	movs	r1, r2
   14c78:	0018      	movs	r0, r3
   14c7a:	4ba4      	ldr	r3, [pc, #656]	; (14f0c <lsm6dso_xl_data_rate_set+0x2b4>)
   14c7c:	4798      	blx	r3
   14c7e:	0003      	movs	r3, r0
   14c80:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14c82:	693b      	ldr	r3, [r7, #16]
   14c84:	2b00      	cmp	r3, #0
   14c86:	d000      	beq.n	14c8a <lsm6dso_xl_data_rate_set+0x32>
   14c88:	e113      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14c8a:	230c      	movs	r3, #12
   14c8c:	18fb      	adds	r3, r7, r3
   14c8e:	781b      	ldrb	r3, [r3, #0]
   14c90:	07db      	lsls	r3, r3, #31
   14c92:	0fdb      	lsrs	r3, r3, #31
   14c94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14c96:	230c      	movs	r3, #12
   14c98:	18fb      	adds	r3, r7, r3
   14c9a:	781b      	ldrb	r3, [r3, #0]
   14c9c:	079b      	lsls	r3, r3, #30
   14c9e:	0fdb      	lsrs	r3, r3, #31
   14ca0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14ca2:	4313      	orrs	r3, r2
   14ca4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14ca6:	230c      	movs	r3, #12
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	781b      	ldrb	r3, [r3, #0]
   14cac:	075b      	lsls	r3, r3, #29
   14cae:	0fdb      	lsrs	r3, r3, #31
   14cb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14cb2:	4313      	orrs	r3, r2
   14cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14cb6:	230c      	movs	r3, #12
   14cb8:	18fb      	adds	r3, r7, r3
   14cba:	781b      	ldrb	r3, [r3, #0]
   14cbc:	071b      	lsls	r3, r3, #28
   14cbe:	0fdb      	lsrs	r3, r3, #31
   14cc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14cc2:	4313      	orrs	r3, r2
   14cc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14cc6:	230c      	movs	r3, #12
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	06db      	lsls	r3, r3, #27
   14cce:	0fdb      	lsrs	r3, r3, #31
   14cd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14cd2:	4313      	orrs	r3, r2
   14cd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14cd6:	230c      	movs	r3, #12
   14cd8:	18fb      	adds	r3, r7, r3
   14cda:	781b      	ldrb	r3, [r3, #0]
   14cdc:	069b      	lsls	r3, r3, #26
   14cde:	0fdb      	lsrs	r3, r3, #31
   14ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14ce2:	4313      	orrs	r3, r2
   14ce4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14ce6:	230c      	movs	r3, #12
   14ce8:	18fb      	adds	r3, r7, r3
   14cea:	781b      	ldrb	r3, [r3, #0]
   14cec:	065b      	lsls	r3, r3, #25
   14cee:	0fdb      	lsrs	r3, r3, #31
   14cf0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14cf2:	4313      	orrs	r3, r2
   14cf4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14cf6:	230c      	movs	r3, #12
   14cf8:	18fb      	adds	r3, r7, r3
   14cfa:	781b      	ldrb	r3, [r3, #0]
   14cfc:	061b      	lsls	r3, r3, #24
   14cfe:	0fdb      	lsrs	r3, r3, #31
   14d00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14d02:	4313      	orrs	r3, r2
   14d04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14d06:	230c      	movs	r3, #12
   14d08:	18fb      	adds	r3, r7, r3
   14d0a:	785b      	ldrb	r3, [r3, #1]
   14d0c:	07db      	lsls	r3, r3, #31
   14d0e:	0fdb      	lsrs	r3, r3, #31
   14d10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14d12:	4313      	orrs	r3, r2
   14d14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14d16:	230c      	movs	r3, #12
   14d18:	18fb      	adds	r3, r7, r3
   14d1a:	785b      	ldrb	r3, [r3, #1]
   14d1c:	079b      	lsls	r3, r3, #30
   14d1e:	0fdb      	lsrs	r3, r3, #31
   14d20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14d22:	4313      	orrs	r3, r2
   14d24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14d26:	230c      	movs	r3, #12
   14d28:	18fb      	adds	r3, r7, r3
   14d2a:	785b      	ldrb	r3, [r3, #1]
   14d2c:	075b      	lsls	r3, r3, #29
   14d2e:	0fdb      	lsrs	r3, r3, #31
   14d30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14d32:	4313      	orrs	r3, r2
   14d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14d36:	230c      	movs	r3, #12
   14d38:	18fb      	adds	r3, r7, r3
   14d3a:	785b      	ldrb	r3, [r3, #1]
   14d3c:	071b      	lsls	r3, r3, #28
   14d3e:	0fdb      	lsrs	r3, r3, #31
   14d40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14d42:	4313      	orrs	r3, r2
   14d44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14d46:	230c      	movs	r3, #12
   14d48:	18fb      	adds	r3, r7, r3
   14d4a:	785b      	ldrb	r3, [r3, #1]
   14d4c:	06db      	lsls	r3, r3, #27
   14d4e:	0fdb      	lsrs	r3, r3, #31
   14d50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14d52:	4313      	orrs	r3, r2
   14d54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14d56:	230c      	movs	r3, #12
   14d58:	18fb      	adds	r3, r7, r3
   14d5a:	785b      	ldrb	r3, [r3, #1]
   14d5c:	069b      	lsls	r3, r3, #26
   14d5e:	0fdb      	lsrs	r3, r3, #31
   14d60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14d62:	4313      	orrs	r3, r2
   14d64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14d66:	230c      	movs	r3, #12
   14d68:	18fb      	adds	r3, r7, r3
   14d6a:	785b      	ldrb	r3, [r3, #1]
   14d6c:	065b      	lsls	r3, r3, #25
   14d6e:	0fdb      	lsrs	r3, r3, #31
   14d70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14d72:	4313      	orrs	r3, r2
   14d74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14d76:	230c      	movs	r3, #12
   14d78:	18fb      	adds	r3, r7, r3
   14d7a:	785b      	ldrb	r3, [r3, #1]
   14d7c:	061b      	lsls	r3, r3, #24
   14d7e:	0fdb      	lsrs	r3, r3, #31
   14d80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14d82:	4313      	orrs	r3, r2
   14d84:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14d86:	2b01      	cmp	r3, #1
   14d88:	d000      	beq.n	14d8c <lsm6dso_xl_data_rate_set+0x134>
   14d8a:	e092      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14d8c:	230b      	movs	r3, #11
   14d8e:	18fa      	adds	r2, r7, r3
   14d90:	687b      	ldr	r3, [r7, #4]
   14d92:	0011      	movs	r1, r2
   14d94:	0018      	movs	r0, r3
   14d96:	4b5e      	ldr	r3, [pc, #376]	; (14f10 <lsm6dso_xl_data_rate_set+0x2b8>)
   14d98:	4798      	blx	r3
   14d9a:	0003      	movs	r3, r0
   14d9c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14d9e:	693b      	ldr	r3, [r7, #16]
   14da0:	2b00      	cmp	r3, #0
   14da2:	d000      	beq.n	14da6 <lsm6dso_xl_data_rate_set+0x14e>
   14da4:	e085      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14da6:	230b      	movs	r3, #11
   14da8:	18fb      	adds	r3, r7, r3
   14daa:	781b      	ldrb	r3, [r3, #0]
   14dac:	2b01      	cmp	r3, #1
   14dae:	d017      	beq.n	14de0 <lsm6dso_xl_data_rate_set+0x188>
   14db0:	dc02      	bgt.n	14db8 <lsm6dso_xl_data_rate_set+0x160>
   14db2:	2b00      	cmp	r3, #0
   14db4:	d005      	beq.n	14dc2 <lsm6dso_xl_data_rate_set+0x16a>
   14db6:	e076      	b.n	14ea6 <lsm6dso_xl_data_rate_set+0x24e>
   14db8:	2b02      	cmp	r3, #2
   14dba:	d029      	beq.n	14e10 <lsm6dso_xl_data_rate_set+0x1b8>
   14dbc:	2b03      	cmp	r3, #3
   14dbe:	d048      	beq.n	14e52 <lsm6dso_xl_data_rate_set+0x1fa>
   14dc0:	e071      	b.n	14ea6 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14dc2:	1cfb      	adds	r3, r7, #3
   14dc4:	781b      	ldrb	r3, [r3, #0]
   14dc6:	2b00      	cmp	r3, #0
   14dc8:	d104      	bne.n	14dd4 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14dca:	2317      	movs	r3, #23
   14dcc:	18fb      	adds	r3, r7, r3
   14dce:	2201      	movs	r2, #1
   14dd0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14dd2:	e06e      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14dd4:	2317      	movs	r3, #23
   14dd6:	18fb      	adds	r3, r7, r3
   14dd8:	1cfa      	adds	r2, r7, #3
   14dda:	7812      	ldrb	r2, [r2, #0]
   14ddc:	701a      	strb	r2, [r3, #0]
            break;
   14dde:	e068      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14de0:	1cfb      	adds	r3, r7, #3
   14de2:	781b      	ldrb	r3, [r3, #0]
   14de4:	2b00      	cmp	r3, #0
   14de6:	d104      	bne.n	14df2 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14de8:	2317      	movs	r3, #23
   14dea:	18fb      	adds	r3, r7, r3
   14dec:	2202      	movs	r2, #2
   14dee:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14df0:	e05f      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14df2:	1cfb      	adds	r3, r7, #3
   14df4:	781b      	ldrb	r3, [r3, #0]
   14df6:	2b01      	cmp	r3, #1
   14df8:	d104      	bne.n	14e04 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14dfa:	2317      	movs	r3, #23
   14dfc:	18fb      	adds	r3, r7, r3
   14dfe:	2202      	movs	r2, #2
   14e00:	701a      	strb	r2, [r3, #0]
            break;
   14e02:	e056      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14e04:	2317      	movs	r3, #23
   14e06:	18fb      	adds	r3, r7, r3
   14e08:	1cfa      	adds	r2, r7, #3
   14e0a:	7812      	ldrb	r2, [r2, #0]
   14e0c:	701a      	strb	r2, [r3, #0]
            break;
   14e0e:	e050      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14e10:	1cfb      	adds	r3, r7, #3
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	2b00      	cmp	r3, #0
   14e16:	d104      	bne.n	14e22 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e18:	2317      	movs	r3, #23
   14e1a:	18fb      	adds	r3, r7, r3
   14e1c:	2203      	movs	r2, #3
   14e1e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14e20:	e047      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14e22:	1cfb      	adds	r3, r7, #3
   14e24:	781b      	ldrb	r3, [r3, #0]
   14e26:	2b01      	cmp	r3, #1
   14e28:	d104      	bne.n	14e34 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e2a:	2317      	movs	r3, #23
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	2203      	movs	r2, #3
   14e30:	701a      	strb	r2, [r3, #0]
            break;
   14e32:	e03e      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14e34:	1cfb      	adds	r3, r7, #3
   14e36:	781b      	ldrb	r3, [r3, #0]
   14e38:	2b02      	cmp	r3, #2
   14e3a:	d104      	bne.n	14e46 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14e3c:	2317      	movs	r3, #23
   14e3e:	18fb      	adds	r3, r7, r3
   14e40:	2203      	movs	r2, #3
   14e42:	701a      	strb	r2, [r3, #0]
            break;
   14e44:	e035      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14e46:	2317      	movs	r3, #23
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	1cfa      	adds	r2, r7, #3
   14e4c:	7812      	ldrb	r2, [r2, #0]
   14e4e:	701a      	strb	r2, [r3, #0]
            break;
   14e50:	e02f      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14e52:	1cfb      	adds	r3, r7, #3
   14e54:	781b      	ldrb	r3, [r3, #0]
   14e56:	2b00      	cmp	r3, #0
   14e58:	d104      	bne.n	14e64 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14e5a:	2317      	movs	r3, #23
   14e5c:	18fb      	adds	r3, r7, r3
   14e5e:	2204      	movs	r2, #4
   14e60:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14e62:	e026      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14e64:	1cfb      	adds	r3, r7, #3
   14e66:	781b      	ldrb	r3, [r3, #0]
   14e68:	2b01      	cmp	r3, #1
   14e6a:	d104      	bne.n	14e76 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14e6c:	2317      	movs	r3, #23
   14e6e:	18fb      	adds	r3, r7, r3
   14e70:	2204      	movs	r2, #4
   14e72:	701a      	strb	r2, [r3, #0]
            break;
   14e74:	e01d      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14e76:	1cfb      	adds	r3, r7, #3
   14e78:	781b      	ldrb	r3, [r3, #0]
   14e7a:	2b02      	cmp	r3, #2
   14e7c:	d104      	bne.n	14e88 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14e7e:	2317      	movs	r3, #23
   14e80:	18fb      	adds	r3, r7, r3
   14e82:	2204      	movs	r2, #4
   14e84:	701a      	strb	r2, [r3, #0]
            break;
   14e86:	e014      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14e88:	1cfb      	adds	r3, r7, #3
   14e8a:	781b      	ldrb	r3, [r3, #0]
   14e8c:	2b03      	cmp	r3, #3
   14e8e:	d104      	bne.n	14e9a <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14e90:	2317      	movs	r3, #23
   14e92:	18fb      	adds	r3, r7, r3
   14e94:	2204      	movs	r2, #4
   14e96:	701a      	strb	r2, [r3, #0]
            break;
   14e98:	e00b      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14e9a:	2317      	movs	r3, #23
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	1cfa      	adds	r2, r7, #3
   14ea0:	7812      	ldrb	r2, [r2, #0]
   14ea2:	701a      	strb	r2, [r3, #0]
            break;
   14ea4:	e005      	b.n	14eb2 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14ea6:	2317      	movs	r3, #23
   14ea8:	18fb      	adds	r3, r7, r3
   14eaa:	1cfa      	adds	r2, r7, #3
   14eac:	7812      	ldrb	r2, [r2, #0]
   14eae:	701a      	strb	r2, [r3, #0]
            break;
   14eb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   14eb2:	693b      	ldr	r3, [r7, #16]
   14eb4:	2b00      	cmp	r3, #0
   14eb6:	d108      	bne.n	14eca <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14eb8:	2308      	movs	r3, #8
   14eba:	18fa      	adds	r2, r7, r3
   14ebc:	6878      	ldr	r0, [r7, #4]
   14ebe:	2301      	movs	r3, #1
   14ec0:	2110      	movs	r1, #16
   14ec2:	4c14      	ldr	r4, [pc, #80]	; (14f14 <lsm6dso_xl_data_rate_set+0x2bc>)
   14ec4:	47a0      	blx	r4
   14ec6:	0003      	movs	r3, r0
   14ec8:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14eca:	693b      	ldr	r3, [r7, #16]
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d118      	bne.n	14f02 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   14ed0:	2317      	movs	r3, #23
   14ed2:	18fb      	adds	r3, r7, r3
   14ed4:	781b      	ldrb	r3, [r3, #0]
   14ed6:	220f      	movs	r2, #15
   14ed8:	4013      	ands	r3, r2
   14eda:	b2da      	uxtb	r2, r3
   14edc:	2308      	movs	r3, #8
   14ede:	18fb      	adds	r3, r7, r3
   14ee0:	0110      	lsls	r0, r2, #4
   14ee2:	781a      	ldrb	r2, [r3, #0]
   14ee4:	210f      	movs	r1, #15
   14ee6:	400a      	ands	r2, r1
   14ee8:	1c11      	adds	r1, r2, #0
   14eea:	1c02      	adds	r2, r0, #0
   14eec:	430a      	orrs	r2, r1
   14eee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14ef0:	2308      	movs	r3, #8
   14ef2:	18fa      	adds	r2, r7, r3
   14ef4:	6878      	ldr	r0, [r7, #4]
   14ef6:	2301      	movs	r3, #1
   14ef8:	2110      	movs	r1, #16
   14efa:	4c07      	ldr	r4, [pc, #28]	; (14f18 <lsm6dso_xl_data_rate_set+0x2c0>)
   14efc:	47a0      	blx	r4
   14efe:	0003      	movs	r3, r0
   14f00:	613b      	str	r3, [r7, #16]
  }

  return ret;
   14f02:	693b      	ldr	r3, [r7, #16]
}
   14f04:	0018      	movs	r0, r3
   14f06:	46bd      	mov	sp, r7
   14f08:	b007      	add	sp, #28
   14f0a:	bd90      	pop	{r4, r7, pc}
   14f0c:	00015735 	.word	0x00015735
   14f10:	00015789 	.word	0x00015789
   14f14:	00014b29 	.word	0x00014b29
   14f18:	00014b6f 	.word	0x00014b6f

00014f1c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14f1c:	b590      	push	{r4, r7, lr}
   14f1e:	b085      	sub	sp, #20
   14f20:	af00      	add	r7, sp, #0
   14f22:	6078      	str	r0, [r7, #4]
   14f24:	000a      	movs	r2, r1
   14f26:	1cfb      	adds	r3, r7, #3
   14f28:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14f2a:	2308      	movs	r3, #8
   14f2c:	18fa      	adds	r2, r7, r3
   14f2e:	6878      	ldr	r0, [r7, #4]
   14f30:	2301      	movs	r3, #1
   14f32:	2111      	movs	r1, #17
   14f34:	4c12      	ldr	r4, [pc, #72]	; (14f80 <lsm6dso_gy_full_scale_set+0x64>)
   14f36:	47a0      	blx	r4
   14f38:	0003      	movs	r3, r0
   14f3a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14f3c:	68fb      	ldr	r3, [r7, #12]
   14f3e:	2b00      	cmp	r3, #0
   14f40:	d119      	bne.n	14f76 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   14f42:	1cfb      	adds	r3, r7, #3
   14f44:	781b      	ldrb	r3, [r3, #0]
   14f46:	2207      	movs	r2, #7
   14f48:	4013      	ands	r3, r2
   14f4a:	b2da      	uxtb	r2, r3
   14f4c:	2308      	movs	r3, #8
   14f4e:	18fb      	adds	r3, r7, r3
   14f50:	2107      	movs	r1, #7
   14f52:	400a      	ands	r2, r1
   14f54:	1890      	adds	r0, r2, r2
   14f56:	781a      	ldrb	r2, [r3, #0]
   14f58:	210e      	movs	r1, #14
   14f5a:	438a      	bics	r2, r1
   14f5c:	1c11      	adds	r1, r2, #0
   14f5e:	1c02      	adds	r2, r0, #0
   14f60:	430a      	orrs	r2, r1
   14f62:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14f64:	2308      	movs	r3, #8
   14f66:	18fa      	adds	r2, r7, r3
   14f68:	6878      	ldr	r0, [r7, #4]
   14f6a:	2301      	movs	r3, #1
   14f6c:	2111      	movs	r1, #17
   14f6e:	4c05      	ldr	r4, [pc, #20]	; (14f84 <lsm6dso_gy_full_scale_set+0x68>)
   14f70:	47a0      	blx	r4
   14f72:	0003      	movs	r3, r0
   14f74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14f76:	68fb      	ldr	r3, [r7, #12]
}
   14f78:	0018      	movs	r0, r3
   14f7a:	46bd      	mov	sp, r7
   14f7c:	b005      	add	sp, #20
   14f7e:	bd90      	pop	{r4, r7, pc}
   14f80:	00014b29 	.word	0x00014b29
   14f84:	00014b6f 	.word	0x00014b6f

00014f88 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   14f88:	b590      	push	{r4, r7, lr}
   14f8a:	b087      	sub	sp, #28
   14f8c:	af00      	add	r7, sp, #0
   14f8e:	6078      	str	r0, [r7, #4]
   14f90:	000a      	movs	r2, r1
   14f92:	1cfb      	adds	r3, r7, #3
   14f94:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   14f96:	2317      	movs	r3, #23
   14f98:	18fb      	adds	r3, r7, r3
   14f9a:	1cfa      	adds	r2, r7, #3
   14f9c:	7812      	ldrb	r2, [r2, #0]
   14f9e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14fa0:	230c      	movs	r3, #12
   14fa2:	18fa      	adds	r2, r7, r3
   14fa4:	687b      	ldr	r3, [r7, #4]
   14fa6:	0011      	movs	r1, r2
   14fa8:	0018      	movs	r0, r3
   14faa:	4ba4      	ldr	r3, [pc, #656]	; (1523c <lsm6dso_gy_data_rate_set+0x2b4>)
   14fac:	4798      	blx	r3
   14fae:	0003      	movs	r3, r0
   14fb0:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14fb2:	693b      	ldr	r3, [r7, #16]
   14fb4:	2b00      	cmp	r3, #0
   14fb6:	d000      	beq.n	14fba <lsm6dso_gy_data_rate_set+0x32>
   14fb8:	e113      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14fba:	230c      	movs	r3, #12
   14fbc:	18fb      	adds	r3, r7, r3
   14fbe:	781b      	ldrb	r3, [r3, #0]
   14fc0:	07db      	lsls	r3, r3, #31
   14fc2:	0fdb      	lsrs	r3, r3, #31
   14fc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14fc6:	230c      	movs	r3, #12
   14fc8:	18fb      	adds	r3, r7, r3
   14fca:	781b      	ldrb	r3, [r3, #0]
   14fcc:	079b      	lsls	r3, r3, #30
   14fce:	0fdb      	lsrs	r3, r3, #31
   14fd0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14fd2:	4313      	orrs	r3, r2
   14fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14fd6:	230c      	movs	r3, #12
   14fd8:	18fb      	adds	r3, r7, r3
   14fda:	781b      	ldrb	r3, [r3, #0]
   14fdc:	075b      	lsls	r3, r3, #29
   14fde:	0fdb      	lsrs	r3, r3, #31
   14fe0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14fe2:	4313      	orrs	r3, r2
   14fe4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14fe6:	230c      	movs	r3, #12
   14fe8:	18fb      	adds	r3, r7, r3
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	071b      	lsls	r3, r3, #28
   14fee:	0fdb      	lsrs	r3, r3, #31
   14ff0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14ff2:	4313      	orrs	r3, r2
   14ff4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14ff6:	230c      	movs	r3, #12
   14ff8:	18fb      	adds	r3, r7, r3
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	06db      	lsls	r3, r3, #27
   14ffe:	0fdb      	lsrs	r3, r3, #31
   15000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15002:	4313      	orrs	r3, r2
   15004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15006:	230c      	movs	r3, #12
   15008:	18fb      	adds	r3, r7, r3
   1500a:	781b      	ldrb	r3, [r3, #0]
   1500c:	069b      	lsls	r3, r3, #26
   1500e:	0fdb      	lsrs	r3, r3, #31
   15010:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15012:	4313      	orrs	r3, r2
   15014:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15016:	230c      	movs	r3, #12
   15018:	18fb      	adds	r3, r7, r3
   1501a:	781b      	ldrb	r3, [r3, #0]
   1501c:	065b      	lsls	r3, r3, #25
   1501e:	0fdb      	lsrs	r3, r3, #31
   15020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15022:	4313      	orrs	r3, r2
   15024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15026:	230c      	movs	r3, #12
   15028:	18fb      	adds	r3, r7, r3
   1502a:	781b      	ldrb	r3, [r3, #0]
   1502c:	061b      	lsls	r3, r3, #24
   1502e:	0fdb      	lsrs	r3, r3, #31
   15030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15032:	4313      	orrs	r3, r2
   15034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15036:	230c      	movs	r3, #12
   15038:	18fb      	adds	r3, r7, r3
   1503a:	785b      	ldrb	r3, [r3, #1]
   1503c:	07db      	lsls	r3, r3, #31
   1503e:	0fdb      	lsrs	r3, r3, #31
   15040:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15042:	4313      	orrs	r3, r2
   15044:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15046:	230c      	movs	r3, #12
   15048:	18fb      	adds	r3, r7, r3
   1504a:	785b      	ldrb	r3, [r3, #1]
   1504c:	079b      	lsls	r3, r3, #30
   1504e:	0fdb      	lsrs	r3, r3, #31
   15050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15052:	4313      	orrs	r3, r2
   15054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15056:	230c      	movs	r3, #12
   15058:	18fb      	adds	r3, r7, r3
   1505a:	785b      	ldrb	r3, [r3, #1]
   1505c:	075b      	lsls	r3, r3, #29
   1505e:	0fdb      	lsrs	r3, r3, #31
   15060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15062:	4313      	orrs	r3, r2
   15064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15066:	230c      	movs	r3, #12
   15068:	18fb      	adds	r3, r7, r3
   1506a:	785b      	ldrb	r3, [r3, #1]
   1506c:	071b      	lsls	r3, r3, #28
   1506e:	0fdb      	lsrs	r3, r3, #31
   15070:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15072:	4313      	orrs	r3, r2
   15074:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15076:	230c      	movs	r3, #12
   15078:	18fb      	adds	r3, r7, r3
   1507a:	785b      	ldrb	r3, [r3, #1]
   1507c:	06db      	lsls	r3, r3, #27
   1507e:	0fdb      	lsrs	r3, r3, #31
   15080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15082:	4313      	orrs	r3, r2
   15084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15086:	230c      	movs	r3, #12
   15088:	18fb      	adds	r3, r7, r3
   1508a:	785b      	ldrb	r3, [r3, #1]
   1508c:	069b      	lsls	r3, r3, #26
   1508e:	0fdb      	lsrs	r3, r3, #31
   15090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15092:	4313      	orrs	r3, r2
   15094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15096:	230c      	movs	r3, #12
   15098:	18fb      	adds	r3, r7, r3
   1509a:	785b      	ldrb	r3, [r3, #1]
   1509c:	065b      	lsls	r3, r3, #25
   1509e:	0fdb      	lsrs	r3, r3, #31
   150a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   150a2:	4313      	orrs	r3, r2
   150a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   150a6:	230c      	movs	r3, #12
   150a8:	18fb      	adds	r3, r7, r3
   150aa:	785b      	ldrb	r3, [r3, #1]
   150ac:	061b      	lsls	r3, r3, #24
   150ae:	0fdb      	lsrs	r3, r3, #31
   150b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   150b2:	4313      	orrs	r3, r2
   150b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   150b6:	2b01      	cmp	r3, #1
   150b8:	d000      	beq.n	150bc <lsm6dso_gy_data_rate_set+0x134>
   150ba:	e092      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   150bc:	230b      	movs	r3, #11
   150be:	18fa      	adds	r2, r7, r3
   150c0:	687b      	ldr	r3, [r7, #4]
   150c2:	0011      	movs	r1, r2
   150c4:	0018      	movs	r0, r3
   150c6:	4b5e      	ldr	r3, [pc, #376]	; (15240 <lsm6dso_gy_data_rate_set+0x2b8>)
   150c8:	4798      	blx	r3
   150ca:	0003      	movs	r3, r0
   150cc:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   150ce:	693b      	ldr	r3, [r7, #16]
   150d0:	2b00      	cmp	r3, #0
   150d2:	d000      	beq.n	150d6 <lsm6dso_gy_data_rate_set+0x14e>
   150d4:	e085      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   150d6:	230b      	movs	r3, #11
   150d8:	18fb      	adds	r3, r7, r3
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	2b01      	cmp	r3, #1
   150de:	d017      	beq.n	15110 <lsm6dso_gy_data_rate_set+0x188>
   150e0:	dc02      	bgt.n	150e8 <lsm6dso_gy_data_rate_set+0x160>
   150e2:	2b00      	cmp	r3, #0
   150e4:	d005      	beq.n	150f2 <lsm6dso_gy_data_rate_set+0x16a>
   150e6:	e076      	b.n	151d6 <lsm6dso_gy_data_rate_set+0x24e>
   150e8:	2b02      	cmp	r3, #2
   150ea:	d029      	beq.n	15140 <lsm6dso_gy_data_rate_set+0x1b8>
   150ec:	2b03      	cmp	r3, #3
   150ee:	d048      	beq.n	15182 <lsm6dso_gy_data_rate_set+0x1fa>
   150f0:	e071      	b.n	151d6 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   150f2:	1cfb      	adds	r3, r7, #3
   150f4:	781b      	ldrb	r3, [r3, #0]
   150f6:	2b00      	cmp	r3, #0
   150f8:	d104      	bne.n	15104 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   150fa:	2317      	movs	r3, #23
   150fc:	18fb      	adds	r3, r7, r3
   150fe:	2201      	movs	r2, #1
   15100:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15102:	e06e      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15104:	2317      	movs	r3, #23
   15106:	18fb      	adds	r3, r7, r3
   15108:	1cfa      	adds	r2, r7, #3
   1510a:	7812      	ldrb	r2, [r2, #0]
   1510c:	701a      	strb	r2, [r3, #0]
            break;
   1510e:	e068      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15110:	1cfb      	adds	r3, r7, #3
   15112:	781b      	ldrb	r3, [r3, #0]
   15114:	2b00      	cmp	r3, #0
   15116:	d104      	bne.n	15122 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15118:	2317      	movs	r3, #23
   1511a:	18fb      	adds	r3, r7, r3
   1511c:	2202      	movs	r2, #2
   1511e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15120:	e05f      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15122:	1cfb      	adds	r3, r7, #3
   15124:	781b      	ldrb	r3, [r3, #0]
   15126:	2b01      	cmp	r3, #1
   15128:	d104      	bne.n	15134 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1512a:	2317      	movs	r3, #23
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	2202      	movs	r2, #2
   15130:	701a      	strb	r2, [r3, #0]
            break;
   15132:	e056      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15134:	2317      	movs	r3, #23
   15136:	18fb      	adds	r3, r7, r3
   15138:	1cfa      	adds	r2, r7, #3
   1513a:	7812      	ldrb	r2, [r2, #0]
   1513c:	701a      	strb	r2, [r3, #0]
            break;
   1513e:	e050      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15140:	1cfb      	adds	r3, r7, #3
   15142:	781b      	ldrb	r3, [r3, #0]
   15144:	2b00      	cmp	r3, #0
   15146:	d104      	bne.n	15152 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15148:	2317      	movs	r3, #23
   1514a:	18fb      	adds	r3, r7, r3
   1514c:	2203      	movs	r2, #3
   1514e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15150:	e047      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15152:	1cfb      	adds	r3, r7, #3
   15154:	781b      	ldrb	r3, [r3, #0]
   15156:	2b01      	cmp	r3, #1
   15158:	d104      	bne.n	15164 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1515a:	2317      	movs	r3, #23
   1515c:	18fb      	adds	r3, r7, r3
   1515e:	2203      	movs	r2, #3
   15160:	701a      	strb	r2, [r3, #0]
            break;
   15162:	e03e      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15164:	1cfb      	adds	r3, r7, #3
   15166:	781b      	ldrb	r3, [r3, #0]
   15168:	2b02      	cmp	r3, #2
   1516a:	d104      	bne.n	15176 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   1516c:	2317      	movs	r3, #23
   1516e:	18fb      	adds	r3, r7, r3
   15170:	2203      	movs	r2, #3
   15172:	701a      	strb	r2, [r3, #0]
            break;
   15174:	e035      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15176:	2317      	movs	r3, #23
   15178:	18fb      	adds	r3, r7, r3
   1517a:	1cfa      	adds	r2, r7, #3
   1517c:	7812      	ldrb	r2, [r2, #0]
   1517e:	701a      	strb	r2, [r3, #0]
            break;
   15180:	e02f      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15182:	1cfb      	adds	r3, r7, #3
   15184:	781b      	ldrb	r3, [r3, #0]
   15186:	2b00      	cmp	r3, #0
   15188:	d104      	bne.n	15194 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1518a:	2317      	movs	r3, #23
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	2204      	movs	r2, #4
   15190:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15192:	e026      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15194:	1cfb      	adds	r3, r7, #3
   15196:	781b      	ldrb	r3, [r3, #0]
   15198:	2b01      	cmp	r3, #1
   1519a:	d104      	bne.n	151a6 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1519c:	2317      	movs	r3, #23
   1519e:	18fb      	adds	r3, r7, r3
   151a0:	2204      	movs	r2, #4
   151a2:	701a      	strb	r2, [r3, #0]
            break;
   151a4:	e01d      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   151a6:	1cfb      	adds	r3, r7, #3
   151a8:	781b      	ldrb	r3, [r3, #0]
   151aa:	2b02      	cmp	r3, #2
   151ac:	d104      	bne.n	151b8 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   151ae:	2317      	movs	r3, #23
   151b0:	18fb      	adds	r3, r7, r3
   151b2:	2204      	movs	r2, #4
   151b4:	701a      	strb	r2, [r3, #0]
            break;
   151b6:	e014      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   151b8:	1cfb      	adds	r3, r7, #3
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	2b03      	cmp	r3, #3
   151be:	d104      	bne.n	151ca <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   151c0:	2317      	movs	r3, #23
   151c2:	18fb      	adds	r3, r7, r3
   151c4:	2204      	movs	r2, #4
   151c6:	701a      	strb	r2, [r3, #0]
            break;
   151c8:	e00b      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   151ca:	2317      	movs	r3, #23
   151cc:	18fb      	adds	r3, r7, r3
   151ce:	1cfa      	adds	r2, r7, #3
   151d0:	7812      	ldrb	r2, [r2, #0]
   151d2:	701a      	strb	r2, [r3, #0]
            break;
   151d4:	e005      	b.n	151e2 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   151d6:	2317      	movs	r3, #23
   151d8:	18fb      	adds	r3, r7, r3
   151da:	1cfa      	adds	r2, r7, #3
   151dc:	7812      	ldrb	r2, [r2, #0]
   151de:	701a      	strb	r2, [r3, #0]
            break;
   151e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   151e2:	693b      	ldr	r3, [r7, #16]
   151e4:	2b00      	cmp	r3, #0
   151e6:	d108      	bne.n	151fa <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   151e8:	2308      	movs	r3, #8
   151ea:	18fa      	adds	r2, r7, r3
   151ec:	6878      	ldr	r0, [r7, #4]
   151ee:	2301      	movs	r3, #1
   151f0:	2111      	movs	r1, #17
   151f2:	4c14      	ldr	r4, [pc, #80]	; (15244 <lsm6dso_gy_data_rate_set+0x2bc>)
   151f4:	47a0      	blx	r4
   151f6:	0003      	movs	r3, r0
   151f8:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   151fa:	693b      	ldr	r3, [r7, #16]
   151fc:	2b00      	cmp	r3, #0
   151fe:	d118      	bne.n	15232 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15200:	2317      	movs	r3, #23
   15202:	18fb      	adds	r3, r7, r3
   15204:	781b      	ldrb	r3, [r3, #0]
   15206:	220f      	movs	r2, #15
   15208:	4013      	ands	r3, r2
   1520a:	b2da      	uxtb	r2, r3
   1520c:	2308      	movs	r3, #8
   1520e:	18fb      	adds	r3, r7, r3
   15210:	0110      	lsls	r0, r2, #4
   15212:	781a      	ldrb	r2, [r3, #0]
   15214:	210f      	movs	r1, #15
   15216:	400a      	ands	r2, r1
   15218:	1c11      	adds	r1, r2, #0
   1521a:	1c02      	adds	r2, r0, #0
   1521c:	430a      	orrs	r2, r1
   1521e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15220:	2308      	movs	r3, #8
   15222:	18fa      	adds	r2, r7, r3
   15224:	6878      	ldr	r0, [r7, #4]
   15226:	2301      	movs	r3, #1
   15228:	2111      	movs	r1, #17
   1522a:	4c07      	ldr	r4, [pc, #28]	; (15248 <lsm6dso_gy_data_rate_set+0x2c0>)
   1522c:	47a0      	blx	r4
   1522e:	0003      	movs	r3, r0
   15230:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15232:	693b      	ldr	r3, [r7, #16]
}
   15234:	0018      	movs	r0, r3
   15236:	46bd      	mov	sp, r7
   15238:	b007      	add	sp, #28
   1523a:	bd90      	pop	{r4, r7, pc}
   1523c:	00015735 	.word	0x00015735
   15240:	00015789 	.word	0x00015789
   15244:	00014b29 	.word	0x00014b29
   15248:	00014b6f 	.word	0x00014b6f

0001524c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1524c:	b590      	push	{r4, r7, lr}
   1524e:	b085      	sub	sp, #20
   15250:	af00      	add	r7, sp, #0
   15252:	6078      	str	r0, [r7, #4]
   15254:	000a      	movs	r2, r1
   15256:	1cfb      	adds	r3, r7, #3
   15258:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1525a:	2308      	movs	r3, #8
   1525c:	18fa      	adds	r2, r7, r3
   1525e:	6878      	ldr	r0, [r7, #4]
   15260:	2301      	movs	r3, #1
   15262:	2112      	movs	r1, #18
   15264:	4c12      	ldr	r4, [pc, #72]	; (152b0 <lsm6dso_block_data_update_set+0x64>)
   15266:	47a0      	blx	r4
   15268:	0003      	movs	r3, r0
   1526a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1526c:	68fb      	ldr	r3, [r7, #12]
   1526e:	2b00      	cmp	r3, #0
   15270:	d119      	bne.n	152a6 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15272:	1cfb      	adds	r3, r7, #3
   15274:	781b      	ldrb	r3, [r3, #0]
   15276:	2201      	movs	r2, #1
   15278:	4013      	ands	r3, r2
   1527a:	b2da      	uxtb	r2, r3
   1527c:	2308      	movs	r3, #8
   1527e:	18fb      	adds	r3, r7, r3
   15280:	2101      	movs	r1, #1
   15282:	400a      	ands	r2, r1
   15284:	0190      	lsls	r0, r2, #6
   15286:	781a      	ldrb	r2, [r3, #0]
   15288:	2140      	movs	r1, #64	; 0x40
   1528a:	438a      	bics	r2, r1
   1528c:	1c11      	adds	r1, r2, #0
   1528e:	1c02      	adds	r2, r0, #0
   15290:	430a      	orrs	r2, r1
   15292:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15294:	2308      	movs	r3, #8
   15296:	18fa      	adds	r2, r7, r3
   15298:	6878      	ldr	r0, [r7, #4]
   1529a:	2301      	movs	r3, #1
   1529c:	2112      	movs	r1, #18
   1529e:	4c05      	ldr	r4, [pc, #20]	; (152b4 <lsm6dso_block_data_update_set+0x68>)
   152a0:	47a0      	blx	r4
   152a2:	0003      	movs	r3, r0
   152a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   152a6:	68fb      	ldr	r3, [r7, #12]
}
   152a8:	0018      	movs	r0, r3
   152aa:	46bd      	mov	sp, r7
   152ac:	b005      	add	sp, #20
   152ae:	bd90      	pop	{r4, r7, pc}
   152b0:	00014b29 	.word	0x00014b29
   152b4:	00014b6f 	.word	0x00014b6f

000152b8 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   152b8:	b590      	push	{r4, r7, lr}
   152ba:	b085      	sub	sp, #20
   152bc:	af00      	add	r7, sp, #0
   152be:	6078      	str	r0, [r7, #4]
   152c0:	000a      	movs	r2, r1
   152c2:	1cfb      	adds	r3, r7, #3
   152c4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   152c6:	2308      	movs	r3, #8
   152c8:	18fa      	adds	r2, r7, r3
   152ca:	6878      	ldr	r0, [r7, #4]
   152cc:	2301      	movs	r3, #1
   152ce:	2115      	movs	r1, #21
   152d0:	4c12      	ldr	r4, [pc, #72]	; (1531c <lsm6dso_xl_offset_weight_set+0x64>)
   152d2:	47a0      	blx	r4
   152d4:	0003      	movs	r3, r0
   152d6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   152d8:	68fb      	ldr	r3, [r7, #12]
   152da:	2b00      	cmp	r3, #0
   152dc:	d119      	bne.n	15312 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   152de:	1cfb      	adds	r3, r7, #3
   152e0:	781b      	ldrb	r3, [r3, #0]
   152e2:	2201      	movs	r2, #1
   152e4:	4013      	ands	r3, r2
   152e6:	b2da      	uxtb	r2, r3
   152e8:	2308      	movs	r3, #8
   152ea:	18fb      	adds	r3, r7, r3
   152ec:	2101      	movs	r1, #1
   152ee:	400a      	ands	r2, r1
   152f0:	00d0      	lsls	r0, r2, #3
   152f2:	781a      	ldrb	r2, [r3, #0]
   152f4:	2108      	movs	r1, #8
   152f6:	438a      	bics	r2, r1
   152f8:	1c11      	adds	r1, r2, #0
   152fa:	1c02      	adds	r2, r0, #0
   152fc:	430a      	orrs	r2, r1
   152fe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15300:	2308      	movs	r3, #8
   15302:	18fa      	adds	r2, r7, r3
   15304:	6878      	ldr	r0, [r7, #4]
   15306:	2301      	movs	r3, #1
   15308:	2115      	movs	r1, #21
   1530a:	4c05      	ldr	r4, [pc, #20]	; (15320 <lsm6dso_xl_offset_weight_set+0x68>)
   1530c:	47a0      	blx	r4
   1530e:	0003      	movs	r3, r0
   15310:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15312:	68fb      	ldr	r3, [r7, #12]
}
   15314:	0018      	movs	r0, r3
   15316:	46bd      	mov	sp, r7
   15318:	b005      	add	sp, #20
   1531a:	bd90      	pop	{r4, r7, pc}
   1531c:	00014b29 	.word	0x00014b29
   15320:	00014b6f 	.word	0x00014b6f

00015324 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15324:	b590      	push	{r4, r7, lr}
   15326:	b085      	sub	sp, #20
   15328:	af00      	add	r7, sp, #0
   1532a:	6078      	str	r0, [r7, #4]
   1532c:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1532e:	2308      	movs	r3, #8
   15330:	18fa      	adds	r2, r7, r3
   15332:	6878      	ldr	r0, [r7, #4]
   15334:	2301      	movs	r3, #1
   15336:	211e      	movs	r1, #30
   15338:	4c08      	ldr	r4, [pc, #32]	; (1535c <lsm6dso_xl_flag_data_ready_get+0x38>)
   1533a:	47a0      	blx	r4
   1533c:	0003      	movs	r3, r0
   1533e:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15340:	2308      	movs	r3, #8
   15342:	18fb      	adds	r3, r7, r3
   15344:	781b      	ldrb	r3, [r3, #0]
   15346:	07db      	lsls	r3, r3, #31
   15348:	0fdb      	lsrs	r3, r3, #31
   1534a:	b2db      	uxtb	r3, r3
   1534c:	001a      	movs	r2, r3
   1534e:	683b      	ldr	r3, [r7, #0]
   15350:	701a      	strb	r2, [r3, #0]

  return ret;
   15352:	68fb      	ldr	r3, [r7, #12]
}
   15354:	0018      	movs	r0, r3
   15356:	46bd      	mov	sp, r7
   15358:	b005      	add	sp, #20
   1535a:	bd90      	pop	{r4, r7, pc}
   1535c:	00014b29 	.word	0x00014b29

00015360 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15360:	b590      	push	{r4, r7, lr}
   15362:	b087      	sub	sp, #28
   15364:	af00      	add	r7, sp, #0
   15366:	6078      	str	r0, [r7, #4]
   15368:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   1536a:	230c      	movs	r3, #12
   1536c:	18fa      	adds	r2, r7, r3
   1536e:	6878      	ldr	r0, [r7, #4]
   15370:	2306      	movs	r3, #6
   15372:	2128      	movs	r1, #40	; 0x28
   15374:	4c26      	ldr	r4, [pc, #152]	; (15410 <lsm6dso_acceleration_raw_get+0xb0>)
   15376:	47a0      	blx	r4
   15378:	0003      	movs	r3, r0
   1537a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   1537c:	230c      	movs	r3, #12
   1537e:	18fb      	adds	r3, r7, r3
   15380:	785b      	ldrb	r3, [r3, #1]
   15382:	b21a      	sxth	r2, r3
   15384:	683b      	ldr	r3, [r7, #0]
   15386:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15388:	683b      	ldr	r3, [r7, #0]
   1538a:	2200      	movs	r2, #0
   1538c:	5e9b      	ldrsh	r3, [r3, r2]
   1538e:	b29b      	uxth	r3, r3
   15390:	021b      	lsls	r3, r3, #8
   15392:	b29a      	uxth	r2, r3
   15394:	230c      	movs	r3, #12
   15396:	18fb      	adds	r3, r7, r3
   15398:	781b      	ldrb	r3, [r3, #0]
   1539a:	b29b      	uxth	r3, r3
   1539c:	18d3      	adds	r3, r2, r3
   1539e:	b29b      	uxth	r3, r3
   153a0:	b21a      	sxth	r2, r3
   153a2:	683b      	ldr	r3, [r7, #0]
   153a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   153a6:	683b      	ldr	r3, [r7, #0]
   153a8:	3302      	adds	r3, #2
   153aa:	220c      	movs	r2, #12
   153ac:	18ba      	adds	r2, r7, r2
   153ae:	78d2      	ldrb	r2, [r2, #3]
   153b0:	b212      	sxth	r2, r2
   153b2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   153b4:	683b      	ldr	r3, [r7, #0]
   153b6:	3302      	adds	r3, #2
   153b8:	683a      	ldr	r2, [r7, #0]
   153ba:	3202      	adds	r2, #2
   153bc:	2100      	movs	r1, #0
   153be:	5e52      	ldrsh	r2, [r2, r1]
   153c0:	b292      	uxth	r2, r2
   153c2:	0212      	lsls	r2, r2, #8
   153c4:	b291      	uxth	r1, r2
   153c6:	220c      	movs	r2, #12
   153c8:	18ba      	adds	r2, r7, r2
   153ca:	7892      	ldrb	r2, [r2, #2]
   153cc:	b292      	uxth	r2, r2
   153ce:	188a      	adds	r2, r1, r2
   153d0:	b292      	uxth	r2, r2
   153d2:	b212      	sxth	r2, r2
   153d4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   153d6:	683b      	ldr	r3, [r7, #0]
   153d8:	3304      	adds	r3, #4
   153da:	220c      	movs	r2, #12
   153dc:	18ba      	adds	r2, r7, r2
   153de:	7952      	ldrb	r2, [r2, #5]
   153e0:	b212      	sxth	r2, r2
   153e2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   153e4:	683b      	ldr	r3, [r7, #0]
   153e6:	3304      	adds	r3, #4
   153e8:	683a      	ldr	r2, [r7, #0]
   153ea:	3204      	adds	r2, #4
   153ec:	2100      	movs	r1, #0
   153ee:	5e52      	ldrsh	r2, [r2, r1]
   153f0:	b292      	uxth	r2, r2
   153f2:	0212      	lsls	r2, r2, #8
   153f4:	b291      	uxth	r1, r2
   153f6:	220c      	movs	r2, #12
   153f8:	18ba      	adds	r2, r7, r2
   153fa:	7912      	ldrb	r2, [r2, #4]
   153fc:	b292      	uxth	r2, r2
   153fe:	188a      	adds	r2, r1, r2
   15400:	b292      	uxth	r2, r2
   15402:	b212      	sxth	r2, r2
   15404:	801a      	strh	r2, [r3, #0]

  return ret;
   15406:	697b      	ldr	r3, [r7, #20]
}
   15408:	0018      	movs	r0, r3
   1540a:	46bd      	mov	sp, r7
   1540c:	b007      	add	sp, #28
   1540e:	bd90      	pop	{r4, r7, pc}
   15410:	00014b29 	.word	0x00014b29

00015414 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15414:	b590      	push	{r4, r7, lr}
   15416:	b085      	sub	sp, #20
   15418:	af00      	add	r7, sp, #0
   1541a:	6078      	str	r0, [r7, #4]
   1541c:	000a      	movs	r2, r1
   1541e:	1cfb      	adds	r3, r7, #3
   15420:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15422:	2308      	movs	r3, #8
   15424:	18fa      	adds	r2, r7, r3
   15426:	6878      	ldr	r0, [r7, #4]
   15428:	2301      	movs	r3, #1
   1542a:	2101      	movs	r1, #1
   1542c:	4c11      	ldr	r4, [pc, #68]	; (15474 <lsm6dso_mem_bank_set+0x60>)
   1542e:	47a0      	blx	r4
   15430:	0003      	movs	r3, r0
   15432:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15434:	68fb      	ldr	r3, [r7, #12]
   15436:	2b00      	cmp	r3, #0
   15438:	d117      	bne.n	1546a <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   1543a:	1cfb      	adds	r3, r7, #3
   1543c:	781b      	ldrb	r3, [r3, #0]
   1543e:	2203      	movs	r2, #3
   15440:	4013      	ands	r3, r2
   15442:	b2da      	uxtb	r2, r3
   15444:	2308      	movs	r3, #8
   15446:	18fb      	adds	r3, r7, r3
   15448:	0190      	lsls	r0, r2, #6
   1544a:	781a      	ldrb	r2, [r3, #0]
   1544c:	213f      	movs	r1, #63	; 0x3f
   1544e:	400a      	ands	r2, r1
   15450:	1c11      	adds	r1, r2, #0
   15452:	1c02      	adds	r2, r0, #0
   15454:	430a      	orrs	r2, r1
   15456:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15458:	2308      	movs	r3, #8
   1545a:	18fa      	adds	r2, r7, r3
   1545c:	6878      	ldr	r0, [r7, #4]
   1545e:	2301      	movs	r3, #1
   15460:	2101      	movs	r1, #1
   15462:	4c05      	ldr	r4, [pc, #20]	; (15478 <lsm6dso_mem_bank_set+0x64>)
   15464:	47a0      	blx	r4
   15466:	0003      	movs	r3, r0
   15468:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1546a:	68fb      	ldr	r3, [r7, #12]
}
   1546c:	0018      	movs	r0, r3
   1546e:	46bd      	mov	sp, r7
   15470:	b005      	add	sp, #20
   15472:	bd90      	pop	{r4, r7, pc}
   15474:	00014b29 	.word	0x00014b29
   15478:	00014b6f 	.word	0x00014b6f

0001547c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   1547c:	b590      	push	{r4, r7, lr}
   1547e:	b085      	sub	sp, #20
   15480:	af00      	add	r7, sp, #0
   15482:	6078      	str	r0, [r7, #4]
   15484:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15486:	683a      	ldr	r2, [r7, #0]
   15488:	6878      	ldr	r0, [r7, #4]
   1548a:	2301      	movs	r3, #1
   1548c:	210f      	movs	r1, #15
   1548e:	4c04      	ldr	r4, [pc, #16]	; (154a0 <lsm6dso_device_id_get+0x24>)
   15490:	47a0      	blx	r4
   15492:	0003      	movs	r3, r0
   15494:	60fb      	str	r3, [r7, #12]

  return ret;
   15496:	68fb      	ldr	r3, [r7, #12]
}
   15498:	0018      	movs	r0, r3
   1549a:	46bd      	mov	sp, r7
   1549c:	b005      	add	sp, #20
   1549e:	bd90      	pop	{r4, r7, pc}
   154a0:	00014b29 	.word	0x00014b29

000154a4 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   154a4:	b590      	push	{r4, r7, lr}
   154a6:	b085      	sub	sp, #20
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	000a      	movs	r2, r1
   154ae:	1cfb      	adds	r3, r7, #3
   154b0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   154b2:	2308      	movs	r3, #8
   154b4:	18fa      	adds	r2, r7, r3
   154b6:	6878      	ldr	r0, [r7, #4]
   154b8:	2301      	movs	r3, #1
   154ba:	2112      	movs	r1, #18
   154bc:	4c12      	ldr	r4, [pc, #72]	; (15508 <lsm6dso_reset_set+0x64>)
   154be:	47a0      	blx	r4
   154c0:	0003      	movs	r3, r0
   154c2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   154c4:	68fb      	ldr	r3, [r7, #12]
   154c6:	2b00      	cmp	r3, #0
   154c8:	d119      	bne.n	154fe <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   154ca:	1cfb      	adds	r3, r7, #3
   154cc:	781b      	ldrb	r3, [r3, #0]
   154ce:	2201      	movs	r2, #1
   154d0:	4013      	ands	r3, r2
   154d2:	b2da      	uxtb	r2, r3
   154d4:	2308      	movs	r3, #8
   154d6:	18fb      	adds	r3, r7, r3
   154d8:	2101      	movs	r1, #1
   154da:	400a      	ands	r2, r1
   154dc:	0010      	movs	r0, r2
   154de:	781a      	ldrb	r2, [r3, #0]
   154e0:	2101      	movs	r1, #1
   154e2:	438a      	bics	r2, r1
   154e4:	1c11      	adds	r1, r2, #0
   154e6:	1c02      	adds	r2, r0, #0
   154e8:	430a      	orrs	r2, r1
   154ea:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   154ec:	2308      	movs	r3, #8
   154ee:	18fa      	adds	r2, r7, r3
   154f0:	6878      	ldr	r0, [r7, #4]
   154f2:	2301      	movs	r3, #1
   154f4:	2112      	movs	r1, #18
   154f6:	4c05      	ldr	r4, [pc, #20]	; (1550c <lsm6dso_reset_set+0x68>)
   154f8:	47a0      	blx	r4
   154fa:	0003      	movs	r3, r0
   154fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   154fe:	68fb      	ldr	r3, [r7, #12]
}
   15500:	0018      	movs	r0, r3
   15502:	46bd      	mov	sp, r7
   15504:	b005      	add	sp, #20
   15506:	bd90      	pop	{r4, r7, pc}
   15508:	00014b29 	.word	0x00014b29
   1550c:	00014b6f 	.word	0x00014b6f

00015510 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15510:	b590      	push	{r4, r7, lr}
   15512:	b085      	sub	sp, #20
   15514:	af00      	add	r7, sp, #0
   15516:	6078      	str	r0, [r7, #4]
   15518:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1551a:	2308      	movs	r3, #8
   1551c:	18fa      	adds	r2, r7, r3
   1551e:	6878      	ldr	r0, [r7, #4]
   15520:	2301      	movs	r3, #1
   15522:	2112      	movs	r1, #18
   15524:	4c08      	ldr	r4, [pc, #32]	; (15548 <lsm6dso_reset_get+0x38>)
   15526:	47a0      	blx	r4
   15528:	0003      	movs	r3, r0
   1552a:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   1552c:	2308      	movs	r3, #8
   1552e:	18fb      	adds	r3, r7, r3
   15530:	781b      	ldrb	r3, [r3, #0]
   15532:	07db      	lsls	r3, r3, #31
   15534:	0fdb      	lsrs	r3, r3, #31
   15536:	b2db      	uxtb	r3, r3
   15538:	001a      	movs	r2, r3
   1553a:	683b      	ldr	r3, [r7, #0]
   1553c:	701a      	strb	r2, [r3, #0]

  return ret;
   1553e:	68fb      	ldr	r3, [r7, #12]
}
   15540:	0018      	movs	r0, r3
   15542:	46bd      	mov	sp, r7
   15544:	b005      	add	sp, #20
   15546:	bd90      	pop	{r4, r7, pc}
   15548:	00014b29 	.word	0x00014b29

0001554c <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1554c:	b590      	push	{r4, r7, lr}
   1554e:	b085      	sub	sp, #20
   15550:	af00      	add	r7, sp, #0
   15552:	6078      	str	r0, [r7, #4]
   15554:	000a      	movs	r2, r1
   15556:	1cfb      	adds	r3, r7, #3
   15558:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1555a:	2308      	movs	r3, #8
   1555c:	18fa      	adds	r2, r7, r3
   1555e:	6878      	ldr	r0, [r7, #4]
   15560:	2301      	movs	r3, #1
   15562:	2110      	movs	r1, #16
   15564:	4c12      	ldr	r4, [pc, #72]	; (155b0 <lsm6dso_xl_filter_lp2_set+0x64>)
   15566:	47a0      	blx	r4
   15568:	0003      	movs	r3, r0
   1556a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1556c:	68fb      	ldr	r3, [r7, #12]
   1556e:	2b00      	cmp	r3, #0
   15570:	d119      	bne.n	155a6 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15572:	1cfb      	adds	r3, r7, #3
   15574:	781b      	ldrb	r3, [r3, #0]
   15576:	2201      	movs	r2, #1
   15578:	4013      	ands	r3, r2
   1557a:	b2da      	uxtb	r2, r3
   1557c:	2308      	movs	r3, #8
   1557e:	18fb      	adds	r3, r7, r3
   15580:	2101      	movs	r1, #1
   15582:	400a      	ands	r2, r1
   15584:	1890      	adds	r0, r2, r2
   15586:	781a      	ldrb	r2, [r3, #0]
   15588:	2102      	movs	r1, #2
   1558a:	438a      	bics	r2, r1
   1558c:	1c11      	adds	r1, r2, #0
   1558e:	1c02      	adds	r2, r0, #0
   15590:	430a      	orrs	r2, r1
   15592:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15594:	2308      	movs	r3, #8
   15596:	18fa      	adds	r2, r7, r3
   15598:	6878      	ldr	r0, [r7, #4]
   1559a:	2301      	movs	r3, #1
   1559c:	2110      	movs	r1, #16
   1559e:	4c05      	ldr	r4, [pc, #20]	; (155b4 <lsm6dso_xl_filter_lp2_set+0x68>)
   155a0:	47a0      	blx	r4
   155a2:	0003      	movs	r3, r0
   155a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155a6:	68fb      	ldr	r3, [r7, #12]
}
   155a8:	0018      	movs	r0, r3
   155aa:	46bd      	mov	sp, r7
   155ac:	b005      	add	sp, #20
   155ae:	bd90      	pop	{r4, r7, pc}
   155b0:	00014b29 	.word	0x00014b29
   155b4:	00014b6f 	.word	0x00014b6f

000155b8 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   155b8:	b590      	push	{r4, r7, lr}
   155ba:	b085      	sub	sp, #20
   155bc:	af00      	add	r7, sp, #0
   155be:	6078      	str	r0, [r7, #4]
   155c0:	000a      	movs	r2, r1
   155c2:	1cfb      	adds	r3, r7, #3
   155c4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   155c6:	2308      	movs	r3, #8
   155c8:	18fa      	adds	r2, r7, r3
   155ca:	6878      	ldr	r0, [r7, #4]
   155cc:	2301      	movs	r3, #1
   155ce:	2117      	movs	r1, #23
   155d0:	4c25      	ldr	r4, [pc, #148]	; (15668 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   155d2:	47a0      	blx	r4
   155d4:	0003      	movs	r3, r0
   155d6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155d8:	68fb      	ldr	r3, [r7, #12]
   155da:	2b00      	cmp	r3, #0
   155dc:	d13f      	bne.n	1565e <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   155de:	1cfb      	adds	r3, r7, #3
   155e0:	781b      	ldrb	r3, [r3, #0]
   155e2:	091b      	lsrs	r3, r3, #4
   155e4:	b2db      	uxtb	r3, r3
   155e6:	1c1a      	adds	r2, r3, #0
   155e8:	2301      	movs	r3, #1
   155ea:	4013      	ands	r3, r2
   155ec:	b2da      	uxtb	r2, r3
   155ee:	2308      	movs	r3, #8
   155f0:	18fb      	adds	r3, r7, r3
   155f2:	2101      	movs	r1, #1
   155f4:	400a      	ands	r2, r1
   155f6:	0090      	lsls	r0, r2, #2
   155f8:	781a      	ldrb	r2, [r3, #0]
   155fa:	2104      	movs	r1, #4
   155fc:	438a      	bics	r2, r1
   155fe:	1c11      	adds	r1, r2, #0
   15600:	1c02      	adds	r2, r0, #0
   15602:	430a      	orrs	r2, r1
   15604:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15606:	1cfb      	adds	r3, r7, #3
   15608:	781b      	ldrb	r3, [r3, #0]
   1560a:	095b      	lsrs	r3, r3, #5
   1560c:	b2db      	uxtb	r3, r3
   1560e:	1c1a      	adds	r2, r3, #0
   15610:	2301      	movs	r3, #1
   15612:	4013      	ands	r3, r2
   15614:	b2da      	uxtb	r2, r3
   15616:	2308      	movs	r3, #8
   15618:	18fb      	adds	r3, r7, r3
   1561a:	2101      	movs	r1, #1
   1561c:	400a      	ands	r2, r1
   1561e:	0110      	lsls	r0, r2, #4
   15620:	781a      	ldrb	r2, [r3, #0]
   15622:	2110      	movs	r1, #16
   15624:	438a      	bics	r2, r1
   15626:	1c11      	adds	r1, r2, #0
   15628:	1c02      	adds	r2, r0, #0
   1562a:	430a      	orrs	r2, r1
   1562c:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1562e:	1cfb      	adds	r3, r7, #3
   15630:	781b      	ldrb	r3, [r3, #0]
   15632:	2207      	movs	r2, #7
   15634:	4013      	ands	r3, r2
   15636:	b2da      	uxtb	r2, r3
   15638:	2308      	movs	r3, #8
   1563a:	18fb      	adds	r3, r7, r3
   1563c:	0150      	lsls	r0, r2, #5
   1563e:	781a      	ldrb	r2, [r3, #0]
   15640:	211f      	movs	r1, #31
   15642:	400a      	ands	r2, r1
   15644:	1c11      	adds	r1, r2, #0
   15646:	1c02      	adds	r2, r0, #0
   15648:	430a      	orrs	r2, r1
   1564a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1564c:	2308      	movs	r3, #8
   1564e:	18fa      	adds	r2, r7, r3
   15650:	6878      	ldr	r0, [r7, #4]
   15652:	2301      	movs	r3, #1
   15654:	2117      	movs	r1, #23
   15656:	4c05      	ldr	r4, [pc, #20]	; (1566c <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15658:	47a0      	blx	r4
   1565a:	0003      	movs	r3, r0
   1565c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1565e:	68fb      	ldr	r3, [r7, #12]
}
   15660:	0018      	movs	r0, r3
   15662:	46bd      	mov	sp, r7
   15664:	b005      	add	sp, #20
   15666:	bd90      	pop	{r4, r7, pc}
   15668:	00014b29 	.word	0x00014b29
   1566c:	00014b6f 	.word	0x00014b6f

00015670 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15670:	b590      	push	{r4, r7, lr}
   15672:	b087      	sub	sp, #28
   15674:	af00      	add	r7, sp, #0
   15676:	6078      	str	r0, [r7, #4]
   15678:	000a      	movs	r2, r1
   1567a:	1cfb      	adds	r3, r7, #3
   1567c:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1567e:	230c      	movs	r3, #12
   15680:	18fa      	adds	r2, r7, r3
   15682:	6878      	ldr	r0, [r7, #4]
   15684:	2301      	movs	r3, #1
   15686:	2118      	movs	r1, #24
   15688:	4c28      	ldr	r4, [pc, #160]	; (1572c <lsm6dso_i3c_disable_set+0xbc>)
   1568a:	47a0      	blx	r4
   1568c:	0003      	movs	r3, r0
   1568e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15690:	697b      	ldr	r3, [r7, #20]
   15692:	2b00      	cmp	r3, #0
   15694:	d11c      	bne.n	156d0 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15696:	1cfb      	adds	r3, r7, #3
   15698:	781b      	ldrb	r3, [r3, #0]
   1569a:	09db      	lsrs	r3, r3, #7
   1569c:	b2db      	uxtb	r3, r3
   1569e:	1c1a      	adds	r2, r3, #0
   156a0:	2301      	movs	r3, #1
   156a2:	4013      	ands	r3, r2
   156a4:	b2da      	uxtb	r2, r3
   156a6:	230c      	movs	r3, #12
   156a8:	18fb      	adds	r3, r7, r3
   156aa:	2101      	movs	r1, #1
   156ac:	400a      	ands	r2, r1
   156ae:	1890      	adds	r0, r2, r2
   156b0:	781a      	ldrb	r2, [r3, #0]
   156b2:	2102      	movs	r1, #2
   156b4:	438a      	bics	r2, r1
   156b6:	1c11      	adds	r1, r2, #0
   156b8:	1c02      	adds	r2, r0, #0
   156ba:	430a      	orrs	r2, r1
   156bc:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   156be:	230c      	movs	r3, #12
   156c0:	18fa      	adds	r2, r7, r3
   156c2:	6878      	ldr	r0, [r7, #4]
   156c4:	2301      	movs	r3, #1
   156c6:	2118      	movs	r1, #24
   156c8:	4c19      	ldr	r4, [pc, #100]	; (15730 <lsm6dso_i3c_disable_set+0xc0>)
   156ca:	47a0      	blx	r4
   156cc:	0003      	movs	r3, r0
   156ce:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   156d0:	697b      	ldr	r3, [r7, #20]
   156d2:	2b00      	cmp	r3, #0
   156d4:	d108      	bne.n	156e8 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   156d6:	2310      	movs	r3, #16
   156d8:	18fa      	adds	r2, r7, r3
   156da:	6878      	ldr	r0, [r7, #4]
   156dc:	2301      	movs	r3, #1
   156de:	2162      	movs	r1, #98	; 0x62
   156e0:	4c12      	ldr	r4, [pc, #72]	; (1572c <lsm6dso_i3c_disable_set+0xbc>)
   156e2:	47a0      	blx	r4
   156e4:	0003      	movs	r3, r0
   156e6:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   156e8:	697b      	ldr	r3, [r7, #20]
   156ea:	2b00      	cmp	r3, #0
   156ec:	d119      	bne.n	15722 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   156ee:	1cfb      	adds	r3, r7, #3
   156f0:	781b      	ldrb	r3, [r3, #0]
   156f2:	2203      	movs	r2, #3
   156f4:	4013      	ands	r3, r2
   156f6:	b2da      	uxtb	r2, r3
   156f8:	2310      	movs	r3, #16
   156fa:	18fb      	adds	r3, r7, r3
   156fc:	2103      	movs	r1, #3
   156fe:	400a      	ands	r2, r1
   15700:	00d0      	lsls	r0, r2, #3
   15702:	781a      	ldrb	r2, [r3, #0]
   15704:	2118      	movs	r1, #24
   15706:	438a      	bics	r2, r1
   15708:	1c11      	adds	r1, r2, #0
   1570a:	1c02      	adds	r2, r0, #0
   1570c:	430a      	orrs	r2, r1
   1570e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15710:	2310      	movs	r3, #16
   15712:	18fa      	adds	r2, r7, r3
   15714:	6878      	ldr	r0, [r7, #4]
   15716:	2301      	movs	r3, #1
   15718:	2162      	movs	r1, #98	; 0x62
   1571a:	4c05      	ldr	r4, [pc, #20]	; (15730 <lsm6dso_i3c_disable_set+0xc0>)
   1571c:	47a0      	blx	r4
   1571e:	0003      	movs	r3, r0
   15720:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15722:	697b      	ldr	r3, [r7, #20]
}
   15724:	0018      	movs	r0, r3
   15726:	46bd      	mov	sp, r7
   15728:	b007      	add	sp, #28
   1572a:	bd90      	pop	{r4, r7, pc}
   1572c:	00014b29 	.word	0x00014b29
   15730:	00014b6f 	.word	0x00014b6f

00015734 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15734:	b590      	push	{r4, r7, lr}
   15736:	b085      	sub	sp, #20
   15738:	af00      	add	r7, sp, #0
   1573a:	6078      	str	r0, [r7, #4]
   1573c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	2102      	movs	r1, #2
   15742:	0018      	movs	r0, r3
   15744:	4b0e      	ldr	r3, [pc, #56]	; (15780 <lsm6dso_fsm_enable_get+0x4c>)
   15746:	4798      	blx	r3
   15748:	0003      	movs	r3, r0
   1574a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	2b00      	cmp	r3, #0
   15750:	d107      	bne.n	15762 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15752:	683a      	ldr	r2, [r7, #0]
   15754:	6878      	ldr	r0, [r7, #4]
   15756:	2302      	movs	r3, #2
   15758:	2146      	movs	r1, #70	; 0x46
   1575a:	4c0a      	ldr	r4, [pc, #40]	; (15784 <lsm6dso_fsm_enable_get+0x50>)
   1575c:	47a0      	blx	r4
   1575e:	0003      	movs	r3, r0
   15760:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15762:	68fb      	ldr	r3, [r7, #12]
   15764:	2b00      	cmp	r3, #0
   15766:	d106      	bne.n	15776 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15768:	687b      	ldr	r3, [r7, #4]
   1576a:	2100      	movs	r1, #0
   1576c:	0018      	movs	r0, r3
   1576e:	4b04      	ldr	r3, [pc, #16]	; (15780 <lsm6dso_fsm_enable_get+0x4c>)
   15770:	4798      	blx	r3
   15772:	0003      	movs	r3, r0
   15774:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15776:	68fb      	ldr	r3, [r7, #12]
}
   15778:	0018      	movs	r0, r3
   1577a:	46bd      	mov	sp, r7
   1577c:	b005      	add	sp, #20
   1577e:	bd90      	pop	{r4, r7, pc}
   15780:	00015415 	.word	0x00015415
   15784:	00014b29 	.word	0x00014b29

00015788 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15788:	b590      	push	{r4, r7, lr}
   1578a:	b085      	sub	sp, #20
   1578c:	af00      	add	r7, sp, #0
   1578e:	6078      	str	r0, [r7, #4]
   15790:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15792:	687b      	ldr	r3, [r7, #4]
   15794:	2102      	movs	r1, #2
   15796:	0018      	movs	r0, r3
   15798:	4b21      	ldr	r3, [pc, #132]	; (15820 <lsm6dso_fsm_data_rate_get+0x98>)
   1579a:	4798      	blx	r3
   1579c:	0003      	movs	r3, r0
   1579e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   157a0:	68fb      	ldr	r3, [r7, #12]
   157a2:	2b00      	cmp	r3, #0
   157a4:	d108      	bne.n	157b8 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   157a6:	2308      	movs	r3, #8
   157a8:	18fa      	adds	r2, r7, r3
   157aa:	6878      	ldr	r0, [r7, #4]
   157ac:	2301      	movs	r3, #1
   157ae:	215f      	movs	r1, #95	; 0x5f
   157b0:	4c1c      	ldr	r4, [pc, #112]	; (15824 <lsm6dso_fsm_data_rate_get+0x9c>)
   157b2:	47a0      	blx	r4
   157b4:	0003      	movs	r3, r0
   157b6:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   157b8:	68fb      	ldr	r3, [r7, #12]
   157ba:	2b00      	cmp	r3, #0
   157bc:	d12b      	bne.n	15816 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   157be:	2308      	movs	r3, #8
   157c0:	18fb      	adds	r3, r7, r3
   157c2:	781b      	ldrb	r3, [r3, #0]
   157c4:	06db      	lsls	r3, r3, #27
   157c6:	0f9b      	lsrs	r3, r3, #30
   157c8:	b2db      	uxtb	r3, r3
   157ca:	2b01      	cmp	r3, #1
   157cc:	d00c      	beq.n	157e8 <lsm6dso_fsm_data_rate_get+0x60>
   157ce:	dc02      	bgt.n	157d6 <lsm6dso_fsm_data_rate_get+0x4e>
   157d0:	2b00      	cmp	r3, #0
   157d2:	d005      	beq.n	157e0 <lsm6dso_fsm_data_rate_get+0x58>
   157d4:	e014      	b.n	15800 <lsm6dso_fsm_data_rate_get+0x78>
   157d6:	2b02      	cmp	r3, #2
   157d8:	d00a      	beq.n	157f0 <lsm6dso_fsm_data_rate_get+0x68>
   157da:	2b03      	cmp	r3, #3
   157dc:	d00c      	beq.n	157f8 <lsm6dso_fsm_data_rate_get+0x70>
   157de:	e00f      	b.n	15800 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   157e0:	683b      	ldr	r3, [r7, #0]
   157e2:	2200      	movs	r2, #0
   157e4:	701a      	strb	r2, [r3, #0]
        break;
   157e6:	e00f      	b.n	15808 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   157e8:	683b      	ldr	r3, [r7, #0]
   157ea:	2201      	movs	r2, #1
   157ec:	701a      	strb	r2, [r3, #0]
        break;
   157ee:	e00b      	b.n	15808 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   157f0:	683b      	ldr	r3, [r7, #0]
   157f2:	2202      	movs	r2, #2
   157f4:	701a      	strb	r2, [r3, #0]
        break;
   157f6:	e007      	b.n	15808 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   157f8:	683b      	ldr	r3, [r7, #0]
   157fa:	2203      	movs	r2, #3
   157fc:	701a      	strb	r2, [r3, #0]
        break;
   157fe:	e003      	b.n	15808 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15800:	683b      	ldr	r3, [r7, #0]
   15802:	2200      	movs	r2, #0
   15804:	701a      	strb	r2, [r3, #0]
        break;
   15806:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15808:	687b      	ldr	r3, [r7, #4]
   1580a:	2100      	movs	r1, #0
   1580c:	0018      	movs	r0, r3
   1580e:	4b04      	ldr	r3, [pc, #16]	; (15820 <lsm6dso_fsm_data_rate_get+0x98>)
   15810:	4798      	blx	r3
   15812:	0003      	movs	r3, r0
   15814:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15816:	68fb      	ldr	r3, [r7, #12]
}
   15818:	0018      	movs	r0, r3
   1581a:	46bd      	mov	sp, r7
   1581c:	b005      	add	sp, #20
   1581e:	bd90      	pop	{r4, r7, pc}
   15820:	00015415 	.word	0x00015415
   15824:	00014b29 	.word	0x00014b29

00015828 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15828:	b580      	push	{r7, lr}
   1582a:	b084      	sub	sp, #16
   1582c:	af00      	add	r7, sp, #0
   1582e:	60f8      	str	r0, [r7, #12]
   15830:	0008      	movs	r0, r1
   15832:	607a      	str	r2, [r7, #4]
   15834:	0019      	movs	r1, r3
   15836:	230b      	movs	r3, #11
   15838:	18fb      	adds	r3, r7, r3
   1583a:	1c02      	adds	r2, r0, #0
   1583c:	701a      	strb	r2, [r3, #0]
   1583e:	2308      	movs	r3, #8
   15840:	18fb      	adds	r3, r7, r3
   15842:	1c0a      	adds	r2, r1, #0
   15844:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   15846:	2300      	movs	r3, #0

}
   15848:	0018      	movs	r0, r3
   1584a:	46bd      	mov	sp, r7
   1584c:	b004      	add	sp, #16
   1584e:	bd80      	pop	{r7, pc}

00015850 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15850:	b580      	push	{r7, lr}
   15852:	b084      	sub	sp, #16
   15854:	af00      	add	r7, sp, #0
   15856:	60f8      	str	r0, [r7, #12]
   15858:	0008      	movs	r0, r1
   1585a:	607a      	str	r2, [r7, #4]
   1585c:	0019      	movs	r1, r3
   1585e:	230b      	movs	r3, #11
   15860:	18fb      	adds	r3, r7, r3
   15862:	1c02      	adds	r2, r0, #0
   15864:	701a      	strb	r2, [r3, #0]
   15866:	2308      	movs	r3, #8
   15868:	18fb      	adds	r3, r7, r3
   1586a:	1c0a      	adds	r2, r1, #0
   1586c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   1586e:	2300      	movs	r3, #0


}
   15870:	0018      	movs	r0, r3
   15872:	46bd      	mov	sp, r7
   15874:	b004      	add	sp, #16
   15876:	bd80      	pop	{r7, pc}

00015878 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15878:	b580      	push	{r7, lr}
   1587a:	af00      	add	r7, sp, #0
return &dev_ctx;
   1587c:	4b01      	ldr	r3, [pc, #4]	; (15884 <GetImuStruct+0xc>)
}
   1587e:	0018      	movs	r0, r3
   15880:	46bd      	mov	sp, r7
   15882:	bd80      	pop	{r7, pc}
   15884:	20000020 	.word	0x20000020

00015888 <InitImu>:



int32_t InitImu(void)
{
   15888:	b580      	push	{r7, lr}
   1588a:	b082      	sub	sp, #8
   1588c:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   1588e:	2300      	movs	r3, #0
   15890:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15892:	4b23      	ldr	r3, [pc, #140]	; (15920 <InitImu+0x98>)
   15894:	2101      	movs	r1, #1
   15896:	0018      	movs	r0, r3
   15898:	4b22      	ldr	r3, [pc, #136]	; (15924 <InitImu+0x9c>)
   1589a:	4798      	blx	r3
   1589c:	0003      	movs	r3, r0
   1589e:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   158a0:	1cfa      	adds	r2, r7, #3
   158a2:	4b1f      	ldr	r3, [pc, #124]	; (15920 <InitImu+0x98>)
   158a4:	0011      	movs	r1, r2
   158a6:	0018      	movs	r0, r3
   158a8:	4b1f      	ldr	r3, [pc, #124]	; (15928 <InitImu+0xa0>)
   158aa:	4798      	blx	r3
   158ac:	0002      	movs	r2, r0
   158ae:	687b      	ldr	r3, [r7, #4]
   158b0:	4313      	orrs	r3, r2
   158b2:	607b      	str	r3, [r7, #4]
  } while (rst);
   158b4:	1cfb      	adds	r3, r7, #3
   158b6:	781b      	ldrb	r3, [r3, #0]
   158b8:	2b00      	cmp	r3, #0
   158ba:	d1f1      	bne.n	158a0 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   158bc:	4b18      	ldr	r3, [pc, #96]	; (15920 <InitImu+0x98>)
   158be:	2180      	movs	r1, #128	; 0x80
   158c0:	0018      	movs	r0, r3
   158c2:	4b1a      	ldr	r3, [pc, #104]	; (1592c <InitImu+0xa4>)
   158c4:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   158c6:	4b16      	ldr	r3, [pc, #88]	; (15920 <InitImu+0x98>)
   158c8:	2101      	movs	r1, #1
   158ca:	0018      	movs	r0, r3
   158cc:	4b18      	ldr	r3, [pc, #96]	; (15930 <InitImu+0xa8>)
   158ce:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   158d0:	4b13      	ldr	r3, [pc, #76]	; (15920 <InitImu+0x98>)
   158d2:	2100      	movs	r1, #0
   158d4:	0018      	movs	r0, r3
   158d6:	4b17      	ldr	r3, [pc, #92]	; (15934 <InitImu+0xac>)
   158d8:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   158da:	4b11      	ldr	r3, [pc, #68]	; (15920 <InitImu+0x98>)
   158dc:	2101      	movs	r1, #1
   158de:	0018      	movs	r0, r3
   158e0:	4b15      	ldr	r3, [pc, #84]	; (15938 <InitImu+0xb0>)
   158e2:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   158e4:	4b0e      	ldr	r3, [pc, #56]	; (15920 <InitImu+0x98>)
   158e6:	2101      	movs	r1, #1
   158e8:	0018      	movs	r0, r3
   158ea:	4b14      	ldr	r3, [pc, #80]	; (1593c <InitImu+0xb4>)
   158ec:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   158ee:	4b0c      	ldr	r3, [pc, #48]	; (15920 <InitImu+0x98>)
   158f0:	2100      	movs	r1, #0
   158f2:	0018      	movs	r0, r3
   158f4:	4b12      	ldr	r3, [pc, #72]	; (15940 <InitImu+0xb8>)
   158f6:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   158f8:	4b09      	ldr	r3, [pc, #36]	; (15920 <InitImu+0x98>)
   158fa:	2106      	movs	r1, #6
   158fc:	0018      	movs	r0, r3
   158fe:	4b11      	ldr	r3, [pc, #68]	; (15944 <InitImu+0xbc>)
   15900:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15902:	4b07      	ldr	r3, [pc, #28]	; (15920 <InitImu+0x98>)
   15904:	2104      	movs	r1, #4
   15906:	0018      	movs	r0, r3
   15908:	4b0f      	ldr	r3, [pc, #60]	; (15948 <InitImu+0xc0>)
   1590a:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   1590c:	4b04      	ldr	r3, [pc, #16]	; (15920 <InitImu+0x98>)
   1590e:	2101      	movs	r1, #1
   15910:	0018      	movs	r0, r3
   15912:	4b0e      	ldr	r3, [pc, #56]	; (1594c <InitImu+0xc4>)
   15914:	4798      	blx	r3

  return error;
   15916:	687b      	ldr	r3, [r7, #4]
}
   15918:	0018      	movs	r0, r3
   1591a:	46bd      	mov	sp, r7
   1591c:	b002      	add	sp, #8
   1591e:	bd80      	pop	{r7, pc}
   15920:	20000020 	.word	0x20000020
   15924:	000154a5 	.word	0x000154a5
   15928:	00015511 	.word	0x00015511
   1592c:	00015671 	.word	0x00015671
   15930:	0001524d 	.word	0x0001524d
   15934:	000152b9 	.word	0x000152b9
   15938:	00014c59 	.word	0x00014c59
   1593c:	00014f89 	.word	0x00014f89
   15940:	00014bed 	.word	0x00014bed
   15944:	00014f1d 	.word	0x00014f1d
   15948:	000155b9 	.word	0x000155b9
   1594c:	0001554d 	.word	0x0001554d

00015950 <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15950:	b580      	push	{r7, lr}
   15952:	b096      	sub	sp, #88	; 0x58
   15954:	af00      	add	r7, sp, #0
   15956:	60f8      	str	r0, [r7, #12]
   15958:	0008      	movs	r0, r1
   1595a:	607a      	str	r2, [r7, #4]
   1595c:	0019      	movs	r1, r3
   1595e:	230b      	movs	r3, #11
   15960:	18fb      	adds	r3, r7, r3
   15962:	1c02      	adds	r2, r0, #0
   15964:	701a      	strb	r2, [r3, #0]
   15966:	2308      	movs	r3, #8
   15968:	18fb      	adds	r3, r7, r3
   1596a:	1c0a      	adds	r2, r1, #0
   1596c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   1596e:	2300      	movs	r3, #0
   15970:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   15972:	4b19      	ldr	r3, [pc, #100]	; (159d8 <reg_write+0x88>)
   15974:	220b      	movs	r2, #11
   15976:	18ba      	adds	r2, r7, r2
   15978:	7812      	ldrb	r2, [r2, #0]
   1597a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   1597c:	2300      	movs	r3, #0
   1597e:	657b      	str	r3, [r7, #84]	; 0x54
   15980:	e00a      	b.n	15998 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   15982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15984:	3301      	adds	r3, #1
   15986:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15988:	6879      	ldr	r1, [r7, #4]
   1598a:	188a      	adds	r2, r1, r2
   1598c:	7811      	ldrb	r1, [r2, #0]
   1598e:	4a12      	ldr	r2, [pc, #72]	; (159d8 <reg_write+0x88>)
   15990:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   15992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15994:	3301      	adds	r3, #1
   15996:	657b      	str	r3, [r7, #84]	; 0x54
   15998:	2308      	movs	r3, #8
   1599a:	18fb      	adds	r3, r7, r3
   1599c:	881a      	ldrh	r2, [r3, #0]
   1599e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   159a0:	429a      	cmp	r2, r3
   159a2:	dcee      	bgt.n	15982 <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   159a4:	4b0d      	ldr	r3, [pc, #52]	; (159dc <reg_write+0x8c>)
   159a6:	222a      	movs	r2, #42	; 0x2a
   159a8:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   159aa:	4b0c      	ldr	r3, [pc, #48]	; (159dc <reg_write+0x8c>)
   159ac:	4a0a      	ldr	r2, [pc, #40]	; (159d8 <reg_write+0x88>)
   159ae:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   159b0:	2308      	movs	r3, #8
   159b2:	18fb      	adds	r3, r7, r3
   159b4:	881b      	ldrh	r3, [r3, #0]
   159b6:	3301      	adds	r3, #1
   159b8:	b29a      	uxth	r2, r3
   159ba:	4b08      	ldr	r3, [pc, #32]	; (159dc <reg_write+0x8c>)
   159bc:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   159be:	4b07      	ldr	r3, [pc, #28]	; (159dc <reg_write+0x8c>)
   159c0:	2164      	movs	r1, #100	; 0x64
   159c2:	0018      	movs	r0, r3
   159c4:	4b06      	ldr	r3, [pc, #24]	; (159e0 <reg_write+0x90>)
   159c6:	4798      	blx	r3
   159c8:	0003      	movs	r3, r0
   159ca:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   159cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   159ce:	0018      	movs	r0, r3
   159d0:	46bd      	mov	sp, r7
   159d2:	b016      	add	sp, #88	; 0x58
   159d4:	bd80      	pop	{r7, pc}
   159d6:	46c0      	nop			; (mov r8, r8)
   159d8:	20004854 	.word	0x20004854
   159dc:	20004894 	.word	0x20004894
   159e0:	0001493d 	.word	0x0001493d

000159e4 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   159e4:	b580      	push	{r7, lr}
   159e6:	b096      	sub	sp, #88	; 0x58
   159e8:	af00      	add	r7, sp, #0
   159ea:	60f8      	str	r0, [r7, #12]
   159ec:	0008      	movs	r0, r1
   159ee:	607a      	str	r2, [r7, #4]
   159f0:	0019      	movs	r1, r3
   159f2:	230b      	movs	r3, #11
   159f4:	18fb      	adds	r3, r7, r3
   159f6:	1c02      	adds	r2, r0, #0
   159f8:	701a      	strb	r2, [r3, #0]
   159fa:	2308      	movs	r3, #8
   159fc:	18fb      	adds	r3, r7, r3
   159fe:	1c0a      	adds	r2, r1, #0
   15a00:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15a02:	2300      	movs	r3, #0
   15a04:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15a06:	4b13      	ldr	r3, [pc, #76]	; (15a54 <reg_read+0x70>)
   15a08:	222a      	movs	r2, #42	; 0x2a
   15a0a:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   15a0c:	4b11      	ldr	r3, [pc, #68]	; (15a54 <reg_read+0x70>)
   15a0e:	2208      	movs	r2, #8
   15a10:	18ba      	adds	r2, r7, r2
   15a12:	8812      	ldrh	r2, [r2, #0]
   15a14:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   15a16:	4b0f      	ldr	r3, [pc, #60]	; (15a54 <reg_read+0x70>)
   15a18:	687a      	ldr	r2, [r7, #4]
   15a1a:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   15a1c:	4b0e      	ldr	r3, [pc, #56]	; (15a58 <reg_read+0x74>)
   15a1e:	220b      	movs	r2, #11
   15a20:	18ba      	adds	r2, r7, r2
   15a22:	7812      	ldrb	r2, [r2, #0]
   15a24:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   15a26:	4b0c      	ldr	r3, [pc, #48]	; (15a58 <reg_read+0x74>)
   15a28:	2200      	movs	r2, #0
   15a2a:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   15a2c:	4b09      	ldr	r3, [pc, #36]	; (15a54 <reg_read+0x70>)
   15a2e:	4a0a      	ldr	r2, [pc, #40]	; (15a58 <reg_read+0x74>)
   15a30:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   15a32:	4b08      	ldr	r3, [pc, #32]	; (15a54 <reg_read+0x70>)
   15a34:	2201      	movs	r2, #1
   15a36:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   15a38:	4b06      	ldr	r3, [pc, #24]	; (15a54 <reg_read+0x70>)
   15a3a:	2264      	movs	r2, #100	; 0x64
   15a3c:	2105      	movs	r1, #5
   15a3e:	0018      	movs	r0, r3
   15a40:	4b06      	ldr	r3, [pc, #24]	; (15a5c <reg_read+0x78>)
   15a42:	4798      	blx	r3
   15a44:	0003      	movs	r3, r0
   15a46:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   15a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   15a4a:	0018      	movs	r0, r3
   15a4c:	46bd      	mov	sp, r7
   15a4e:	b016      	add	sp, #88	; 0x58
   15a50:	bd80      	pop	{r7, pc}
   15a52:	46c0      	nop			; (mov r8, r8)
   15a54:	20004894 	.word	0x20004894
   15a58:	20004854 	.word	0x20004854
   15a5c:	00014a15 	.word	0x00014a15

00015a60 <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   15a60:	b590      	push	{r4, r7, lr}
   15a62:	b085      	sub	sp, #20
   15a64:	af00      	add	r7, sp, #0
   15a66:	0002      	movs	r2, r0
   15a68:	1dfb      	adds	r3, r7, #7
   15a6a:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   15a6c:	4b07      	ldr	r3, [pc, #28]	; (15a8c <ADC_ReadReg+0x2c>)
   15a6e:	6818      	ldr	r0, [r3, #0]
   15a70:	4a07      	ldr	r2, [pc, #28]	; (15a90 <ADC_ReadReg+0x30>)
   15a72:	1dfb      	adds	r3, r7, #7
   15a74:	7819      	ldrb	r1, [r3, #0]
   15a76:	2301      	movs	r3, #1
   15a78:	4c06      	ldr	r4, [pc, #24]	; (15a94 <ADC_ReadReg+0x34>)
   15a7a:	47a0      	blx	r4
   15a7c:	0003      	movs	r3, r0
   15a7e:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   15a80:	4b03      	ldr	r3, [pc, #12]	; (15a90 <ADC_ReadReg+0x30>)
   15a82:	781b      	ldrb	r3, [r3, #0]
	
}
   15a84:	0018      	movs	r0, r3
   15a86:	46bd      	mov	sp, r7
   15a88:	b005      	add	sp, #20
   15a8a:	bd90      	pop	{r4, r7, pc}
   15a8c:	20004850 	.word	0x20004850
   15a90:	20000618 	.word	0x20000618
   15a94:	000159e5 	.word	0x000159e5

00015a98 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   15a98:	b590      	push	{r4, r7, lr}
   15a9a:	b085      	sub	sp, #20
   15a9c:	af00      	add	r7, sp, #0
   15a9e:	0002      	movs	r2, r0
   15aa0:	1dfb      	adds	r3, r7, #7
   15aa2:	701a      	strb	r2, [r3, #0]
   15aa4:	1dbb      	adds	r3, r7, #6
   15aa6:	1c0a      	adds	r2, r1, #0
   15aa8:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   15aaa:	4b08      	ldr	r3, [pc, #32]	; (15acc <ADC_WriteReg+0x34>)
   15aac:	6818      	ldr	r0, [r3, #0]
   15aae:	1dba      	adds	r2, r7, #6
   15ab0:	1dfb      	adds	r3, r7, #7
   15ab2:	7819      	ldrb	r1, [r3, #0]
   15ab4:	2301      	movs	r3, #1
   15ab6:	4c06      	ldr	r4, [pc, #24]	; (15ad0 <ADC_WriteReg+0x38>)
   15ab8:	47a0      	blx	r4
   15aba:	0003      	movs	r3, r0
   15abc:	60fb      	str	r3, [r7, #12]
	return err;
   15abe:	68fb      	ldr	r3, [r7, #12]
   15ac0:	b2db      	uxtb	r3, r3
}
   15ac2:	0018      	movs	r0, r3
   15ac4:	46bd      	mov	sp, r7
   15ac6:	b005      	add	sp, #20
   15ac8:	bd90      	pop	{r4, r7, pc}
   15aca:	46c0      	nop			; (mov r8, r8)
   15acc:	20004850 	.word	0x20004850
   15ad0:	00015951 	.word	0x00015951

00015ad4 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   15ad4:	b590      	push	{r4, r7, lr}
   15ad6:	b083      	sub	sp, #12
   15ad8:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15ada:	1dfb      	adds	r3, r7, #7
   15adc:	2200      	movs	r2, #0
   15ade:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   15ae0:	1dfc      	adds	r4, r7, #7
   15ae2:	2002      	movs	r0, #2
   15ae4:	4b21      	ldr	r3, [pc, #132]	; (15b6c <ADC_Calibration+0x98>)
   15ae6:	4798      	blx	r3
   15ae8:	0003      	movs	r3, r0
   15aea:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   15aec:	1dfb      	adds	r3, r7, #7
   15aee:	1dfa      	adds	r2, r7, #7
   15af0:	7812      	ldrb	r2, [r2, #0]
   15af2:	2107      	movs	r1, #7
   15af4:	438a      	bics	r2, r1
   15af6:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   15af8:	1dfb      	adds	r3, r7, #7
   15afa:	1dfa      	adds	r2, r7, #7
   15afc:	7812      	ldrb	r2, [r2, #0]
   15afe:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15b00:	1dfb      	adds	r3, r7, #7
   15b02:	781b      	ldrb	r3, [r3, #0]
   15b04:	0019      	movs	r1, r3
   15b06:	2002      	movs	r0, #2
   15b08:	4b19      	ldr	r3, [pc, #100]	; (15b70 <ADC_Calibration+0x9c>)
   15b0a:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   15b0c:	1dfb      	adds	r3, r7, #7
   15b0e:	1dfa      	adds	r2, r7, #7
   15b10:	7812      	ldrb	r2, [r2, #0]
   15b12:	2104      	movs	r1, #4
   15b14:	430a      	orrs	r2, r1
   15b16:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15b18:	1dfb      	adds	r3, r7, #7
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	0019      	movs	r1, r3
   15b1e:	2002      	movs	r0, #2
   15b20:	4b13      	ldr	r3, [pc, #76]	; (15b70 <ADC_Calibration+0x9c>)
   15b22:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   15b24:	2032      	movs	r0, #50	; 0x32
   15b26:	4b13      	ldr	r3, [pc, #76]	; (15b74 <ADC_Calibration+0xa0>)
   15b28:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   15b2a:	1dfc      	adds	r4, r7, #7
   15b2c:	2002      	movs	r0, #2
   15b2e:	4b0f      	ldr	r3, [pc, #60]	; (15b6c <ADC_Calibration+0x98>)
   15b30:	4798      	blx	r3
   15b32:	0003      	movs	r3, r0
   15b34:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   15b36:	1dfb      	adds	r3, r7, #7
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	2204      	movs	r2, #4
   15b3c:	4013      	ands	r3, r2
   15b3e:	d000      	beq.n	15b42 <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   15b40:	e7f0      	b.n	15b24 <ADC_Calibration+0x50>
			break;
   15b42:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   15b44:	1dfb      	adds	r3, r7, #7
   15b46:	1dfa      	adds	r2, r7, #7
   15b48:	7812      	ldrb	r2, [r2, #0]
   15b4a:	2108      	movs	r1, #8
   15b4c:	400a      	ands	r2, r1
   15b4e:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   15b50:	1dfb      	adds	r3, r7, #7
   15b52:	781b      	ldrb	r3, [r3, #0]
   15b54:	2208      	movs	r2, #8
   15b56:	4013      	ands	r3, r2
   15b58:	d000      	beq.n	15b5c <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   15b5a:	e7c1      	b.n	15ae0 <ADC_Calibration+0xc>
		break;
   15b5c:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   15b5e:	2001      	movs	r0, #1
   15b60:	4b04      	ldr	r3, [pc, #16]	; (15b74 <ADC_Calibration+0xa0>)
   15b62:	4798      	blx	r3

}
   15b64:	46c0      	nop			; (mov r8, r8)
   15b66:	46bd      	mov	sp, r7
   15b68:	b003      	add	sp, #12
   15b6a:	bd90      	pop	{r4, r7, pc}
   15b6c:	00015a61 	.word	0x00015a61
   15b70:	00015a99 	.word	0x00015a99
   15b74:	00020c5d 	.word	0x00020c5d

00015b78 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   15b78:	b580      	push	{r7, lr}
   15b7a:	b082      	sub	sp, #8
   15b7c:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15b7e:	1dfb      	adds	r3, r7, #7
   15b80:	2200      	movs	r2, #0
   15b82:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   15b84:	1dfb      	adds	r3, r7, #7
   15b86:	2201      	movs	r2, #1
   15b88:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15b8a:	1dfb      	adds	r3, r7, #7
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	0019      	movs	r1, r3
   15b90:	2000      	movs	r0, #0
   15b92:	4b1d      	ldr	r3, [pc, #116]	; (15c08 <ADCchip_Init+0x90>)
   15b94:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   15b96:	2001      	movs	r0, #1
   15b98:	4b1c      	ldr	r3, [pc, #112]	; (15c0c <ADCchip_Init+0x94>)
   15b9a:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   15b9c:	1dfb      	adds	r3, r7, #7
   15b9e:	2202      	movs	r2, #2
   15ba0:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15ba2:	1dfb      	adds	r3, r7, #7
   15ba4:	781b      	ldrb	r3, [r3, #0]
   15ba6:	0019      	movs	r1, r3
   15ba8:	2000      	movs	r0, #0
   15baa:	4b17      	ldr	r3, [pc, #92]	; (15c08 <ADCchip_Init+0x90>)
   15bac:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   15bae:	2032      	movs	r0, #50	; 0x32
   15bb0:	4b16      	ldr	r3, [pc, #88]	; (15c0c <ADCchip_Init+0x94>)
   15bb2:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   15bb4:	1dfb      	adds	r3, r7, #7
   15bb6:	2227      	movs	r2, #39	; 0x27
   15bb8:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   15bba:	1dfb      	adds	r3, r7, #7
   15bbc:	781b      	ldrb	r3, [r3, #0]
   15bbe:	0019      	movs	r1, r3
   15bc0:	2001      	movs	r0, #1
   15bc2:	4b11      	ldr	r3, [pc, #68]	; (15c08 <ADCchip_Init+0x90>)
   15bc4:	4798      	blx	r3
	delay_ms(1);
   15bc6:	2001      	movs	r0, #1
   15bc8:	4b10      	ldr	r3, [pc, #64]	; (15c0c <ADCchip_Init+0x94>)
   15bca:	4798      	blx	r3
	
	reg=0x86;
   15bcc:	1dfb      	adds	r3, r7, #7
   15bce:	2286      	movs	r2, #134	; 0x86
   15bd0:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15bd2:	1dfb      	adds	r3, r7, #7
   15bd4:	781b      	ldrb	r3, [r3, #0]
   15bd6:	0019      	movs	r1, r3
   15bd8:	2000      	movs	r0, #0
   15bda:	4b0b      	ldr	r3, [pc, #44]	; (15c08 <ADCchip_Init+0x90>)
   15bdc:	4798      	blx	r3
	delay_ms(1);
   15bde:	2001      	movs	r0, #1
   15be0:	4b0a      	ldr	r3, [pc, #40]	; (15c0c <ADCchip_Init+0x94>)
   15be2:	4798      	blx	r3
	
	reg=0x30;
   15be4:	1dfb      	adds	r3, r7, #7
   15be6:	2230      	movs	r2, #48	; 0x30
   15be8:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   15bea:	1dfb      	adds	r3, r7, #7
   15bec:	781b      	ldrb	r3, [r3, #0]
   15bee:	0019      	movs	r1, r3
   15bf0:	2015      	movs	r0, #21
   15bf2:	4b05      	ldr	r3, [pc, #20]	; (15c08 <ADCchip_Init+0x90>)
   15bf4:	4798      	blx	r3
	delay_ms(1);
   15bf6:	2001      	movs	r0, #1
   15bf8:	4b04      	ldr	r3, [pc, #16]	; (15c0c <ADCchip_Init+0x94>)
   15bfa:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   15bfc:	4b04      	ldr	r3, [pc, #16]	; (15c10 <ADCchip_Init+0x98>)
   15bfe:	4798      	blx	r3
}
   15c00:	46c0      	nop			; (mov r8, r8)
   15c02:	46bd      	mov	sp, r7
   15c04:	b002      	add	sp, #8
   15c06:	bd80      	pop	{r7, pc}
   15c08:	00015a99 	.word	0x00015a99
   15c0c:	00020c5d 	.word	0x00020c5d
   15c10:	00015ad5 	.word	0x00015ad5

00015c14 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   15c14:	b590      	push	{r4, r7, lr}
   15c16:	b083      	sub	sp, #12
   15c18:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15c1a:	1dfb      	adds	r3, r7, #7
   15c1c:	2200      	movs	r2, #0
   15c1e:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   15c20:	1dfc      	adds	r4, r7, #7
   15c22:	2000      	movs	r0, #0
   15c24:	4b09      	ldr	r3, [pc, #36]	; (15c4c <ADC_StartConversion+0x38>)
   15c26:	4798      	blx	r3
   15c28:	0003      	movs	r3, r0
   15c2a:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   15c2c:	1dfb      	adds	r3, r7, #7
   15c2e:	1dfa      	adds	r2, r7, #7
   15c30:	7812      	ldrb	r2, [r2, #0]
   15c32:	2110      	movs	r1, #16
   15c34:	430a      	orrs	r2, r1
   15c36:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15c38:	1dfb      	adds	r3, r7, #7
   15c3a:	781b      	ldrb	r3, [r3, #0]
   15c3c:	0019      	movs	r1, r3
   15c3e:	2000      	movs	r0, #0
   15c40:	4b03      	ldr	r3, [pc, #12]	; (15c50 <ADC_StartConversion+0x3c>)
   15c42:	4798      	blx	r3
}
   15c44:	46c0      	nop			; (mov r8, r8)
   15c46:	46bd      	mov	sp, r7
   15c48:	b003      	add	sp, #12
   15c4a:	bd90      	pop	{r4, r7, pc}
   15c4c:	00015a61 	.word	0x00015a61
   15c50:	00015a99 	.word	0x00015a99

00015c54 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   15c54:	b580      	push	{r7, lr}
   15c56:	b088      	sub	sp, #32
   15c58:	af00      	add	r7, sp, #0
   15c5a:	60ba      	str	r2, [r7, #8]
   15c5c:	607b      	str	r3, [r7, #4]
   15c5e:	230f      	movs	r3, #15
   15c60:	18fb      	adds	r3, r7, r3
   15c62:	1c02      	adds	r2, r0, #0
   15c64:	701a      	strb	r2, [r3, #0]
   15c66:	230e      	movs	r3, #14
   15c68:	18fb      	adds	r3, r7, r3
   15c6a:	1c0a      	adds	r2, r1, #0
   15c6c:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   15c6e:	2002      	movs	r0, #2
   15c70:	4b14      	ldr	r3, [pc, #80]	; (15cc4 <I2C_ReadMultiBytesOneReg+0x70>)
   15c72:	4798      	blx	r3
   15c74:	0003      	movs	r3, r0
   15c76:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   15c78:	69fb      	ldr	r3, [r7, #28]
   15c7a:	b2db      	uxtb	r3, r3
   15c7c:	0019      	movs	r1, r3
   15c7e:	2002      	movs	r0, #2
   15c80:	4b11      	ldr	r3, [pc, #68]	; (15cc8 <I2C_ReadMultiBytesOneReg+0x74>)
   15c82:	4798      	blx	r3
	delay_ms(1);
   15c84:	2001      	movs	r0, #1
   15c86:	4b11      	ldr	r3, [pc, #68]	; (15ccc <I2C_ReadMultiBytesOneReg+0x78>)
   15c88:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   15c8a:	2012      	movs	r0, #18
   15c8c:	4b0d      	ldr	r3, [pc, #52]	; (15cc4 <I2C_ReadMultiBytesOneReg+0x70>)
   15c8e:	4798      	blx	r3
   15c90:	0003      	movs	r3, r0
   15c92:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   15c94:	2013      	movs	r0, #19
   15c96:	4b0b      	ldr	r3, [pc, #44]	; (15cc4 <I2C_ReadMultiBytesOneReg+0x70>)
   15c98:	4798      	blx	r3
   15c9a:	0003      	movs	r3, r0
   15c9c:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   15c9e:	2014      	movs	r0, #20
   15ca0:	4b08      	ldr	r3, [pc, #32]	; (15cc4 <I2C_ReadMultiBytesOneReg+0x70>)
   15ca2:	4798      	blx	r3
   15ca4:	0003      	movs	r3, r0
   15ca6:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   15ca8:	69fb      	ldr	r3, [r7, #28]
   15caa:	041a      	lsls	r2, r3, #16
   15cac:	69bb      	ldr	r3, [r7, #24]
   15cae:	021b      	lsls	r3, r3, #8
   15cb0:	431a      	orrs	r2, r3
   15cb2:	697b      	ldr	r3, [r7, #20]
   15cb4:	4313      	orrs	r3, r2
   15cb6:	613b      	str	r3, [r7, #16]
	return x;
   15cb8:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   15cba:	0018      	movs	r0, r3
   15cbc:	46bd      	mov	sp, r7
   15cbe:	b008      	add	sp, #32
   15cc0:	bd80      	pop	{r7, pc}
   15cc2:	46c0      	nop			; (mov r8, r8)
   15cc4:	00015a61 	.word	0x00015a61
   15cc8:	00015a99 	.word	0x00015a99
   15ccc:	00020c5d 	.word	0x00020c5d

00015cd0 <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   15cd0:	b590      	push	{r4, r7, lr}
   15cd2:	b083      	sub	sp, #12
   15cd4:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   15cd6:	003a      	movs	r2, r7
   15cd8:	2303      	movs	r3, #3
   15cda:	2112      	movs	r1, #18
   15cdc:	202a      	movs	r0, #42	; 0x2a
   15cde:	4c04      	ldr	r4, [pc, #16]	; (15cf0 <ADC_Read_Conversion_Data+0x20>)
   15ce0:	47a0      	blx	r4
   15ce2:	0003      	movs	r3, r0
   15ce4:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   15ce6:	687b      	ldr	r3, [r7, #4]
}
   15ce8:	0018      	movs	r0, r3
   15cea:	46bd      	mov	sp, r7
   15cec:	b003      	add	sp, #12
   15cee:	bd90      	pop	{r4, r7, pc}
   15cf0:	00015c55 	.word	0x00015c55

00015cf4 <Value_conversion>:

void Value_conversion(int value,uint16_t final[2]){
   15cf4:	b5b0      	push	{r4, r5, r7, lr}
   15cf6:	b094      	sub	sp, #80	; 0x50
   15cf8:	af02      	add	r7, sp, #8
   15cfa:	6078      	str	r0, [r7, #4]
   15cfc:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   15cfe:	2006      	movs	r0, #6
   15d00:	4b91      	ldr	r3, [pc, #580]	; (15f48 <Value_conversion+0x254>)
   15d02:	4798      	blx	r3
   15d04:	0003      	movs	r3, r0
   15d06:	001a      	movs	r2, r3
   15d08:	232c      	movs	r3, #44	; 0x2c
   15d0a:	18fb      	adds	r3, r7, r3
   15d0c:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   15d0e:	2007      	movs	r0, #7
   15d10:	4b8d      	ldr	r3, [pc, #564]	; (15f48 <Value_conversion+0x254>)
   15d12:	4798      	blx	r3
   15d14:	0003      	movs	r3, r0
   15d16:	001a      	movs	r2, r3
   15d18:	232c      	movs	r3, #44	; 0x2c
   15d1a:	18fb      	adds	r3, r7, r3
   15d1c:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   15d1e:	2008      	movs	r0, #8
   15d20:	4b89      	ldr	r3, [pc, #548]	; (15f48 <Value_conversion+0x254>)
   15d22:	4798      	blx	r3
   15d24:	0003      	movs	r3, r0
   15d26:	001a      	movs	r2, r3
   15d28:	232c      	movs	r3, #44	; 0x2c
   15d2a:	18fb      	adds	r3, r7, r3
   15d2c:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   15d2e:	2009      	movs	r0, #9
   15d30:	4b85      	ldr	r3, [pc, #532]	; (15f48 <Value_conversion+0x254>)
   15d32:	4798      	blx	r3
   15d34:	0003      	movs	r3, r0
   15d36:	001a      	movs	r2, r3
   15d38:	232c      	movs	r3, #44	; 0x2c
   15d3a:	18fb      	adds	r3, r7, r3
   15d3c:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   15d3e:	2003      	movs	r0, #3
   15d40:	4b81      	ldr	r3, [pc, #516]	; (15f48 <Value_conversion+0x254>)
   15d42:	4798      	blx	r3
   15d44:	0003      	movs	r3, r0
   15d46:	001a      	movs	r2, r3
   15d48:	2328      	movs	r3, #40	; 0x28
   15d4a:	18fb      	adds	r3, r7, r3
   15d4c:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   15d4e:	2004      	movs	r0, #4
   15d50:	4b7d      	ldr	r3, [pc, #500]	; (15f48 <Value_conversion+0x254>)
   15d52:	4798      	blx	r3
   15d54:	0003      	movs	r3, r0
   15d56:	001a      	movs	r2, r3
   15d58:	2328      	movs	r3, #40	; 0x28
   15d5a:	18fb      	adds	r3, r7, r3
   15d5c:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   15d5e:	2005      	movs	r0, #5
   15d60:	4b79      	ldr	r3, [pc, #484]	; (15f48 <Value_conversion+0x254>)
   15d62:	4798      	blx	r3
   15d64:	0003      	movs	r3, r0
   15d66:	001a      	movs	r2, r3
   15d68:	2328      	movs	r3, #40	; 0x28
   15d6a:	18fb      	adds	r3, r7, r3
   15d6c:	709a      	strb	r2, [r3, #2]
	
	char help[32];
	for(int j=0;j<4;j++)
   15d6e:	2300      	movs	r3, #0
   15d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   15d72:	e002      	b.n	15d7a <Value_conversion+0x86>
   15d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15d76:	3301      	adds	r3, #1
   15d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   15d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15d7c:	2b03      	cmp	r3, #3
   15d7e:	ddf9      	ble.n	15d74 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   15d80:	231f      	movs	r3, #31
   15d82:	63bb      	str	r3, [r7, #56]	; 0x38
   15d84:	e02c      	b.n	15de0 <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   15d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15d88:	2b00      	cmp	r3, #0
   15d8a:	da00      	bge.n	15d8e <Value_conversion+0x9a>
   15d8c:	3307      	adds	r3, #7
   15d8e:	10db      	asrs	r3, r3, #3
   15d90:	425b      	negs	r3, r3
   15d92:	3303      	adds	r3, #3
   15d94:	222c      	movs	r2, #44	; 0x2c
   15d96:	18ba      	adds	r2, r7, r2
   15d98:	5cd3      	ldrb	r3, [r2, r3]
   15d9a:	0019      	movs	r1, r3
   15d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15d9e:	4a6b      	ldr	r2, [pc, #428]	; (15f4c <Value_conversion+0x258>)
   15da0:	4013      	ands	r3, r2
   15da2:	d504      	bpl.n	15dae <Value_conversion+0xba>
   15da4:	3b01      	subs	r3, #1
   15da6:	2208      	movs	r2, #8
   15da8:	4252      	negs	r2, r2
   15daa:	4313      	orrs	r3, r2
   15dac:	3301      	adds	r3, #1
   15dae:	4119      	asrs	r1, r3
   15db0:	000b      	movs	r3, r1
   15db2:	2201      	movs	r2, #1
   15db4:	4013      	ands	r3, r2
   15db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   15db8:	3a17      	subs	r2, #23
   15dba:	4965      	ldr	r1, [pc, #404]	; (15f50 <Value_conversion+0x25c>)
   15dbc:	434a      	muls	r2, r1
   15dbe:	2102      	movs	r1, #2
   15dc0:	4091      	lsls	r1, r2
   15dc2:	000a      	movs	r2, r1
   15dc4:	435a      	muls	r2, r3
   15dc6:	4b63      	ldr	r3, [pc, #396]	; (15f54 <Value_conversion+0x260>)
   15dc8:	0010      	movs	r0, r2
   15dca:	4798      	blx	r3
   15dcc:	1c02      	adds	r2, r0, #0
   15dce:	4b62      	ldr	r3, [pc, #392]	; (15f58 <Value_conversion+0x264>)
   15dd0:	1c11      	adds	r1, r2, #0
   15dd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15dd4:	4798      	blx	r3
   15dd6:	1c03      	adds	r3, r0, #0
   15dd8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   15dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15ddc:	3b01      	subs	r3, #1
   15dde:	63bb      	str	r3, [r7, #56]	; 0x38
   15de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15de2:	2b00      	cmp	r3, #0
   15de4:	dacf      	bge.n	15d86 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   15de6:	2316      	movs	r3, #22
   15de8:	637b      	str	r3, [r7, #52]	; 0x34
   15dea:	e02c      	b.n	15e46 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   15dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15dee:	2b00      	cmp	r3, #0
   15df0:	da00      	bge.n	15df4 <Value_conversion+0x100>
   15df2:	3307      	adds	r3, #7
   15df4:	10db      	asrs	r3, r3, #3
   15df6:	425b      	negs	r3, r3
   15df8:	3302      	adds	r3, #2
   15dfa:	2228      	movs	r2, #40	; 0x28
   15dfc:	18ba      	adds	r2, r7, r2
   15dfe:	5cd3      	ldrb	r3, [r2, r3]
   15e00:	0019      	movs	r1, r3
   15e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e04:	4a51      	ldr	r2, [pc, #324]	; (15f4c <Value_conversion+0x258>)
   15e06:	4013      	ands	r3, r2
   15e08:	d504      	bpl.n	15e14 <Value_conversion+0x120>
   15e0a:	3b01      	subs	r3, #1
   15e0c:	2208      	movs	r2, #8
   15e0e:	4252      	negs	r2, r2
   15e10:	4313      	orrs	r3, r2
   15e12:	3301      	adds	r3, #1
   15e14:	4119      	asrs	r1, r3
   15e16:	000b      	movs	r3, r1
   15e18:	2201      	movs	r2, #1
   15e1a:	4013      	ands	r3, r2
   15e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15e1e:	3a17      	subs	r2, #23
   15e20:	494b      	ldr	r1, [pc, #300]	; (15f50 <Value_conversion+0x25c>)
   15e22:	434a      	muls	r2, r1
   15e24:	2102      	movs	r1, #2
   15e26:	4091      	lsls	r1, r2
   15e28:	000a      	movs	r2, r1
   15e2a:	435a      	muls	r2, r3
   15e2c:	4b49      	ldr	r3, [pc, #292]	; (15f54 <Value_conversion+0x260>)
   15e2e:	0010      	movs	r0, r2
   15e30:	4798      	blx	r3
   15e32:	1c02      	adds	r2, r0, #0
   15e34:	4b48      	ldr	r3, [pc, #288]	; (15f58 <Value_conversion+0x264>)
   15e36:	1c11      	adds	r1, r2, #0
   15e38:	6c38      	ldr	r0, [r7, #64]	; 0x40
   15e3a:	4798      	blx	r3
   15e3c:	1c03      	adds	r3, r0, #0
   15e3e:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   15e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e42:	3b01      	subs	r3, #1
   15e44:	637b      	str	r3, [r7, #52]	; 0x34
   15e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e48:	2b00      	cmp	r3, #0
   15e4a:	dacf      	bge.n	15dec <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   15e4c:	2328      	movs	r3, #40	; 0x28
   15e4e:	18fb      	adds	r3, r7, r3
   15e50:	781b      	ldrb	r3, [r3, #0]
   15e52:	09db      	lsrs	r3, r3, #7
   15e54:	b2db      	uxtb	r3, r3
   15e56:	001a      	movs	r2, r3
   15e58:	2301      	movs	r3, #1
   15e5a:	1a9b      	subs	r3, r3, r2
   15e5c:	2201      	movs	r2, #1
   15e5e:	401a      	ands	r2, r3
   15e60:	4b3c      	ldr	r3, [pc, #240]	; (15f54 <Value_conversion+0x260>)
   15e62:	0010      	movs	r0, r2
   15e64:	4798      	blx	r3
   15e66:	1c02      	adds	r2, r0, #0
   15e68:	4b3c      	ldr	r3, [pc, #240]	; (15f5c <Value_conversion+0x268>)
   15e6a:	1c11      	adds	r1, r2, #0
   15e6c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   15e6e:	4798      	blx	r3
   15e70:	1c03      	adds	r3, r0, #0
   15e72:	643b      	str	r3, [r7, #64]	; 0x40
	snprintf(help, 32, " gain= %d\r\n",gain);
   15e74:	4b3a      	ldr	r3, [pc, #232]	; (15f60 <Value_conversion+0x26c>)
   15e76:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15e78:	4798      	blx	r3
   15e7a:	0003      	movs	r3, r0
   15e7c:	000c      	movs	r4, r1
   15e7e:	4a39      	ldr	r2, [pc, #228]	; (15f64 <Value_conversion+0x270>)
   15e80:	2108      	movs	r1, #8
   15e82:	1878      	adds	r0, r7, r1
   15e84:	9300      	str	r3, [sp, #0]
   15e86:	9401      	str	r4, [sp, #4]
   15e88:	2120      	movs	r1, #32
   15e8a:	4b37      	ldr	r3, [pc, #220]	; (15f68 <Value_conversion+0x274>)
   15e8c:	4798      	blx	r3
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   15e8e:	4b37      	ldr	r3, [pc, #220]	; (15f6c <Value_conversion+0x278>)
   15e90:	4937      	ldr	r1, [pc, #220]	; (15f70 <Value_conversion+0x27c>)
   15e92:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15e94:	4798      	blx	r3
   15e96:	1c03      	adds	r3, r0, #0
   15e98:	1c1c      	adds	r4, r3, #0
   15e9a:	4b2e      	ldr	r3, [pc, #184]	; (15f54 <Value_conversion+0x260>)
   15e9c:	6878      	ldr	r0, [r7, #4]
   15e9e:	4798      	blx	r3
   15ea0:	1c05      	adds	r5, r0, #0
   15ea2:	4b32      	ldr	r3, [pc, #200]	; (15f6c <Value_conversion+0x278>)
   15ea4:	4932      	ldr	r1, [pc, #200]	; (15f70 <Value_conversion+0x27c>)
   15ea6:	6c38      	ldr	r0, [r7, #64]	; 0x40
   15ea8:	4798      	blx	r3
   15eaa:	1c03      	adds	r3, r0, #0
   15eac:	1c1a      	adds	r2, r3, #0
   15eae:	4b31      	ldr	r3, [pc, #196]	; (15f74 <Value_conversion+0x280>)
   15eb0:	1c11      	adds	r1, r2, #0
   15eb2:	1c28      	adds	r0, r5, #0
   15eb4:	4798      	blx	r3
   15eb6:	1c03      	adds	r3, r0, #0
   15eb8:	1c1a      	adds	r2, r3, #0
   15eba:	4b28      	ldr	r3, [pc, #160]	; (15f5c <Value_conversion+0x268>)
   15ebc:	1c11      	adds	r1, r2, #0
   15ebe:	1c20      	adds	r0, r4, #0
   15ec0:	4798      	blx	r3
   15ec2:	1c03      	adds	r3, r0, #0
   15ec4:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   15ec6:	4b2c      	ldr	r3, [pc, #176]	; (15f78 <Value_conversion+0x284>)
   15ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   15eca:	4798      	blx	r3
   15ecc:	0003      	movs	r3, r0
   15ece:	b29a      	uxth	r2, r3
   15ed0:	683b      	ldr	r3, [r7, #0]
   15ed2:	801a      	strh	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   15ed4:	683b      	ldr	r3, [r7, #0]
   15ed6:	1c9c      	adds	r4, r3, #2
   15ed8:	683b      	ldr	r3, [r7, #0]
   15eda:	881b      	ldrh	r3, [r3, #0]
   15edc:	001a      	movs	r2, r3
   15ede:	4b1d      	ldr	r3, [pc, #116]	; (15f54 <Value_conversion+0x260>)
   15ee0:	0010      	movs	r0, r2
   15ee2:	4798      	blx	r3
   15ee4:	1c02      	adds	r2, r0, #0
   15ee6:	4b23      	ldr	r3, [pc, #140]	; (15f74 <Value_conversion+0x280>)
   15ee8:	1c11      	adds	r1, r2, #0
   15eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
   15eec:	4798      	blx	r3
   15eee:	1c03      	adds	r3, r0, #0
   15ef0:	1c1a      	adds	r2, r3, #0
   15ef2:	4b1a      	ldr	r3, [pc, #104]	; (15f5c <Value_conversion+0x268>)
   15ef4:	491e      	ldr	r1, [pc, #120]	; (15f70 <Value_conversion+0x27c>)
   15ef6:	1c10      	adds	r0, r2, #0
   15ef8:	4798      	blx	r3
   15efa:	1c03      	adds	r3, r0, #0
   15efc:	1c1a      	adds	r2, r3, #0
   15efe:	4b1f      	ldr	r3, [pc, #124]	; (15f7c <Value_conversion+0x288>)
   15f00:	1c10      	adds	r0, r2, #0
   15f02:	4798      	blx	r3
   15f04:	0003      	movs	r3, r0
   15f06:	b29b      	uxth	r3, r3
   15f08:	8023      	strh	r3, [r4, #0]
	snprintf(help, 32, "final_int= %d\r\n",final[0]);
   15f0a:	683b      	ldr	r3, [r7, #0]
   15f0c:	881b      	ldrh	r3, [r3, #0]
   15f0e:	4a1c      	ldr	r2, [pc, #112]	; (15f80 <Value_conversion+0x28c>)
   15f10:	2108      	movs	r1, #8
   15f12:	1878      	adds	r0, r7, r1
   15f14:	2120      	movs	r1, #32
   15f16:	4c14      	ldr	r4, [pc, #80]	; (15f68 <Value_conversion+0x274>)
   15f18:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   15f1a:	2308      	movs	r3, #8
   15f1c:	18fb      	adds	r3, r7, r3
   15f1e:	0018      	movs	r0, r3
   15f20:	4b18      	ldr	r3, [pc, #96]	; (15f84 <Value_conversion+0x290>)
   15f22:	4798      	blx	r3
	snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
   15f24:	683b      	ldr	r3, [r7, #0]
   15f26:	3302      	adds	r3, #2
   15f28:	881b      	ldrh	r3, [r3, #0]
   15f2a:	4a17      	ldr	r2, [pc, #92]	; (15f88 <Value_conversion+0x294>)
   15f2c:	2108      	movs	r1, #8
   15f2e:	1878      	adds	r0, r7, r1
   15f30:	2120      	movs	r1, #32
   15f32:	4c0d      	ldr	r4, [pc, #52]	; (15f68 <Value_conversion+0x274>)
   15f34:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   15f36:	2308      	movs	r3, #8
   15f38:	18fb      	adds	r3, r7, r3
   15f3a:	0018      	movs	r0, r3
   15f3c:	4b11      	ldr	r3, [pc, #68]	; (15f84 <Value_conversion+0x290>)
   15f3e:	4798      	blx	r3
	//return final;
	//final=(float)((float)value / 16777216) * (float)(3.14);
   15f40:	46c0      	nop			; (mov r8, r8)
   15f42:	46bd      	mov	sp, r7
   15f44:	b012      	add	sp, #72	; 0x48
   15f46:	bdb0      	pop	{r4, r5, r7, pc}
   15f48:	00015a61 	.word	0x00015a61
   15f4c:	80000007 	.word	0x80000007
   15f50:	00002710 	.word	0x00002710
   15f54:	00034581 	.word	0x00034581
   15f58:	00033a15 	.word	0x00033a15
   15f5c:	00033fc9 	.word	0x00033fc9
   15f60:	00035ead 	.word	0x00035ead
   15f64:	00037d18 	.word	0x00037d18
   15f68:	0003645d 	.word	0x0003645d
   15f6c:	00033d39 	.word	0x00033d39
   15f70:	461c4000 	.word	0x461c4000
   15f74:	00034209 	.word	0x00034209
   15f78:	00034541 	.word	0x00034541
   15f7c:	000339e5 	.word	0x000339e5
   15f80:	00037d24 	.word	0x00037d24
   15f84:	0001e8a5 	.word	0x0001e8a5
   15f88:	00037d34 	.word	0x00037d34

00015f8c <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15f8c:	b580      	push	{r7, lr}
   15f8e:	b082      	sub	sp, #8
   15f90:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15f92:	4b38      	ldr	r3, [pc, #224]	; (16074 <InitializeSeesaw+0xe8>)
   15f94:	222e      	movs	r2, #46	; 0x2e
   15f96:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15f98:	4b36      	ldr	r3, [pc, #216]	; (16074 <InitializeSeesaw+0xe8>)
   15f9a:	4a37      	ldr	r2, [pc, #220]	; (16078 <InitializeSeesaw+0xec>)
   15f9c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   15f9e:	4b35      	ldr	r3, [pc, #212]	; (16074 <InitializeSeesaw+0xe8>)
   15fa0:	2202      	movs	r2, #2
   15fa2:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15fa4:	4b33      	ldr	r3, [pc, #204]	; (16074 <InitializeSeesaw+0xe8>)
   15fa6:	003a      	movs	r2, r7
   15fa8:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15faa:	4b32      	ldr	r3, [pc, #200]	; (16074 <InitializeSeesaw+0xe8>)
   15fac:	2201      	movs	r2, #1
   15fae:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15fb0:	4b30      	ldr	r3, [pc, #192]	; (16074 <InitializeSeesaw+0xe8>)
   15fb2:	2264      	movs	r2, #100	; 0x64
   15fb4:	2100      	movs	r1, #0
   15fb6:	0018      	movs	r0, r3
   15fb8:	4b30      	ldr	r3, [pc, #192]	; (1607c <InitializeSeesaw+0xf0>)
   15fba:	4798      	blx	r3
   15fbc:	0003      	movs	r3, r0
   15fbe:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15fc0:	687b      	ldr	r3, [r7, #4]
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	d004      	beq.n	15fd0 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15fc6:	4b2e      	ldr	r3, [pc, #184]	; (16080 <InitializeSeesaw+0xf4>)
   15fc8:	0018      	movs	r0, r3
   15fca:	4b2e      	ldr	r3, [pc, #184]	; (16084 <InitializeSeesaw+0xf8>)
   15fcc:	4798      	blx	r3
   15fce:	e00c      	b.n	15fea <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15fd0:	003b      	movs	r3, r7
   15fd2:	781b      	ldrb	r3, [r3, #0]
   15fd4:	2b55      	cmp	r3, #85	; 0x55
   15fd6:	d004      	beq.n	15fe2 <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15fd8:	4b2b      	ldr	r3, [pc, #172]	; (16088 <InitializeSeesaw+0xfc>)
   15fda:	0018      	movs	r0, r3
   15fdc:	4b29      	ldr	r3, [pc, #164]	; (16084 <InitializeSeesaw+0xf8>)
   15fde:	4798      	blx	r3
   15fe0:	e003      	b.n	15fea <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15fe2:	4b2a      	ldr	r3, [pc, #168]	; (1608c <InitializeSeesaw+0x100>)
   15fe4:	0018      	movs	r0, r3
   15fe6:	4b27      	ldr	r3, [pc, #156]	; (16084 <InitializeSeesaw+0xf8>)
   15fe8:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15fea:	4b22      	ldr	r3, [pc, #136]	; (16074 <InitializeSeesaw+0xe8>)
   15fec:	4a28      	ldr	r2, [pc, #160]	; (16090 <InitializeSeesaw+0x104>)
   15fee:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15ff0:	4b20      	ldr	r3, [pc, #128]	; (16074 <InitializeSeesaw+0xe8>)
   15ff2:	2203      	movs	r2, #3
   15ff4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ff6:	4b1f      	ldr	r3, [pc, #124]	; (16074 <InitializeSeesaw+0xe8>)
   15ff8:	2164      	movs	r1, #100	; 0x64
   15ffa:	0018      	movs	r0, r3
   15ffc:	4b25      	ldr	r3, [pc, #148]	; (16094 <InitializeSeesaw+0x108>)
   15ffe:	4798      	blx	r3
   16000:	0003      	movs	r3, r0
   16002:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	2b00      	cmp	r3, #0
   16008:	d003      	beq.n	16012 <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   1600a:	4b23      	ldr	r3, [pc, #140]	; (16098 <InitializeSeesaw+0x10c>)
   1600c:	0018      	movs	r0, r3
   1600e:	4b1d      	ldr	r3, [pc, #116]	; (16084 <InitializeSeesaw+0xf8>)
   16010:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   16012:	4b18      	ldr	r3, [pc, #96]	; (16074 <InitializeSeesaw+0xe8>)
   16014:	4a21      	ldr	r2, [pc, #132]	; (1609c <InitializeSeesaw+0x110>)
   16016:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16018:	4b16      	ldr	r3, [pc, #88]	; (16074 <InitializeSeesaw+0xe8>)
   1601a:	2203      	movs	r2, #3
   1601c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1601e:	4b15      	ldr	r3, [pc, #84]	; (16074 <InitializeSeesaw+0xe8>)
   16020:	2164      	movs	r1, #100	; 0x64
   16022:	0018      	movs	r0, r3
   16024:	4b1b      	ldr	r3, [pc, #108]	; (16094 <InitializeSeesaw+0x108>)
   16026:	4798      	blx	r3
   16028:	0003      	movs	r3, r0
   1602a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	2b00      	cmp	r3, #0
   16030:	d003      	beq.n	1603a <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   16032:	4b1b      	ldr	r3, [pc, #108]	; (160a0 <InitializeSeesaw+0x114>)
   16034:	0018      	movs	r0, r3
   16036:	4b13      	ldr	r3, [pc, #76]	; (16084 <InitializeSeesaw+0xf8>)
   16038:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   1603a:	4b0e      	ldr	r3, [pc, #56]	; (16074 <InitializeSeesaw+0xe8>)
   1603c:	4a19      	ldr	r2, [pc, #100]	; (160a4 <InitializeSeesaw+0x118>)
   1603e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   16040:	4b0c      	ldr	r3, [pc, #48]	; (16074 <InitializeSeesaw+0xe8>)
   16042:	2204      	movs	r2, #4
   16044:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16046:	4b0b      	ldr	r3, [pc, #44]	; (16074 <InitializeSeesaw+0xe8>)
   16048:	2164      	movs	r1, #100	; 0x64
   1604a:	0018      	movs	r0, r3
   1604c:	4b11      	ldr	r3, [pc, #68]	; (16094 <InitializeSeesaw+0x108>)
   1604e:	4798      	blx	r3
   16050:	0003      	movs	r3, r0
   16052:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16054:	687b      	ldr	r3, [r7, #4]
   16056:	2b00      	cmp	r3, #0
   16058:	d003      	beq.n	16062 <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   1605a:	4b13      	ldr	r3, [pc, #76]	; (160a8 <InitializeSeesaw+0x11c>)
   1605c:	0018      	movs	r0, r3
   1605e:	4b09      	ldr	r3, [pc, #36]	; (16084 <InitializeSeesaw+0xf8>)
   16060:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   16062:	4b12      	ldr	r3, [pc, #72]	; (160ac <InitializeSeesaw+0x120>)
   16064:	4798      	blx	r3

    SeesawInitializeKeypad();
   16066:	4b12      	ldr	r3, [pc, #72]	; (160b0 <InitializeSeesaw+0x124>)
   16068:	4798      	blx	r3
    return error;
   1606a:	687b      	ldr	r3, [r7, #4]
}
   1606c:	0018      	movs	r0, r3
   1606e:	46bd      	mov	sp, r7
   16070:	b002      	add	sp, #8
   16072:	bd80      	pop	{r7, pc}
   16074:	200048a4 	.word	0x200048a4
   16078:	00037d48 	.word	0x00037d48
   1607c:	00014a15 	.word	0x00014a15
   16080:	00037d60 	.word	0x00037d60
   16084:	0001e8a5 	.word	0x0001e8a5
   16088:	00037d80 	.word	0x00037d80
   1608c:	00037d8c 	.word	0x00037d8c
   16090:	00037d4c 	.word	0x00037d4c
   16094:	0001493d 	.word	0x0001493d
   16098:	00037da0 	.word	0x00037da0
   1609c:	00037d50 	.word	0x00037d50
   160a0:	00037dc0 	.word	0x00037dc0
   160a4:	00037d54 	.word	0x00037d54
   160a8:	00037dec 	.word	0x00037dec
   160ac:	00016461 	.word	0x00016461
   160b0:	00016371 	.word	0x00016371

000160b4 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   160b4:	b580      	push	{r7, lr}
   160b6:	b082      	sub	sp, #8
   160b8:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   160ba:	1cfb      	adds	r3, r7, #3
   160bc:	2200      	movs	r2, #0
   160be:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   160c0:	4b11      	ldr	r3, [pc, #68]	; (16108 <SeesawGetKeypadCount+0x54>)
   160c2:	222e      	movs	r2, #46	; 0x2e
   160c4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   160c6:	4b10      	ldr	r3, [pc, #64]	; (16108 <SeesawGetKeypadCount+0x54>)
   160c8:	4a10      	ldr	r2, [pc, #64]	; (1610c <SeesawGetKeypadCount+0x58>)
   160ca:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   160cc:	4b0e      	ldr	r3, [pc, #56]	; (16108 <SeesawGetKeypadCount+0x54>)
   160ce:	2202      	movs	r2, #2
   160d0:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   160d2:	4b0d      	ldr	r3, [pc, #52]	; (16108 <SeesawGetKeypadCount+0x54>)
   160d4:	1cfa      	adds	r2, r7, #3
   160d6:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   160d8:	4b0b      	ldr	r3, [pc, #44]	; (16108 <SeesawGetKeypadCount+0x54>)
   160da:	2201      	movs	r2, #1
   160dc:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   160de:	4b0a      	ldr	r3, [pc, #40]	; (16108 <SeesawGetKeypadCount+0x54>)
   160e0:	2264      	movs	r2, #100	; 0x64
   160e2:	2100      	movs	r1, #0
   160e4:	0018      	movs	r0, r3
   160e6:	4b0a      	ldr	r3, [pc, #40]	; (16110 <SeesawGetKeypadCount+0x5c>)
   160e8:	4798      	blx	r3
   160ea:	0003      	movs	r3, r0
   160ec:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   160ee:	687b      	ldr	r3, [r7, #4]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d003      	beq.n	160fc <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   160f4:	4b07      	ldr	r3, [pc, #28]	; (16114 <SeesawGetKeypadCount+0x60>)
   160f6:	0018      	movs	r0, r3
   160f8:	4b07      	ldr	r3, [pc, #28]	; (16118 <SeesawGetKeypadCount+0x64>)
   160fa:	4798      	blx	r3
    }
    return count;
   160fc:	1cfb      	adds	r3, r7, #3
   160fe:	781b      	ldrb	r3, [r3, #0]
}
   16100:	0018      	movs	r0, r3
   16102:	46bd      	mov	sp, r7
   16104:	b002      	add	sp, #8
   16106:	bd80      	pop	{r7, pc}
   16108:	200048a4 	.word	0x200048a4
   1610c:	00037d5c 	.word	0x00037d5c
   16110:	00014a15 	.word	0x00014a15
   16114:	00037e20 	.word	0x00037e20
   16118:	0001e8a5 	.word	0x0001e8a5

0001611c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   1611c:	b580      	push	{r7, lr}
   1611e:	b084      	sub	sp, #16
   16120:	af00      	add	r7, sp, #0
   16122:	6078      	str	r0, [r7, #4]
   16124:	000a      	movs	r2, r1
   16126:	1cfb      	adds	r3, r7, #3
   16128:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1612a:	1cfb      	adds	r3, r7, #3
   1612c:	781b      	ldrb	r3, [r3, #0]
   1612e:	2b00      	cmp	r3, #0
   16130:	d101      	bne.n	16136 <SeesawReadKeypad+0x1a>
   16132:	2300      	movs	r3, #0
   16134:	e026      	b.n	16184 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16136:	2308      	movs	r3, #8
   16138:	18fb      	adds	r3, r7, r3
   1613a:	4a14      	ldr	r2, [pc, #80]	; (1618c <SeesawReadKeypad+0x70>)
   1613c:	8812      	ldrh	r2, [r2, #0]
   1613e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16140:	4b13      	ldr	r3, [pc, #76]	; (16190 <SeesawReadKeypad+0x74>)
   16142:	222e      	movs	r2, #46	; 0x2e
   16144:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16146:	4b12      	ldr	r3, [pc, #72]	; (16190 <SeesawReadKeypad+0x74>)
   16148:	2208      	movs	r2, #8
   1614a:	18ba      	adds	r2, r7, r2
   1614c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1614e:	4b10      	ldr	r3, [pc, #64]	; (16190 <SeesawReadKeypad+0x74>)
   16150:	2202      	movs	r2, #2
   16152:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16154:	4b0e      	ldr	r3, [pc, #56]	; (16190 <SeesawReadKeypad+0x74>)
   16156:	687a      	ldr	r2, [r7, #4]
   16158:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   1615a:	1cfb      	adds	r3, r7, #3
   1615c:	781b      	ldrb	r3, [r3, #0]
   1615e:	b29a      	uxth	r2, r3
   16160:	4b0b      	ldr	r3, [pc, #44]	; (16190 <SeesawReadKeypad+0x74>)
   16162:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16164:	4b0a      	ldr	r3, [pc, #40]	; (16190 <SeesawReadKeypad+0x74>)
   16166:	2264      	movs	r2, #100	; 0x64
   16168:	2100      	movs	r1, #0
   1616a:	0018      	movs	r0, r3
   1616c:	4b09      	ldr	r3, [pc, #36]	; (16194 <SeesawReadKeypad+0x78>)
   1616e:	4798      	blx	r3
   16170:	0003      	movs	r3, r0
   16172:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16174:	68fb      	ldr	r3, [r7, #12]
   16176:	2b00      	cmp	r3, #0
   16178:	d003      	beq.n	16182 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1617a:	4b07      	ldr	r3, [pc, #28]	; (16198 <SeesawReadKeypad+0x7c>)
   1617c:	0018      	movs	r0, r3
   1617e:	4b07      	ldr	r3, [pc, #28]	; (1619c <SeesawReadKeypad+0x80>)
   16180:	4798      	blx	r3
    }
    return error;
   16182:	68fb      	ldr	r3, [r7, #12]
}
   16184:	0018      	movs	r0, r3
   16186:	46bd      	mov	sp, r7
   16188:	b004      	add	sp, #16
   1618a:	bd80      	pop	{r7, pc}
   1618c:	00037e44 	.word	0x00037e44
   16190:	200048a4 	.word	0x200048a4
   16194:	00014a15 	.word	0x00014a15
   16198:	00037e20 	.word	0x00037e20
   1619c:	0001e8a5 	.word	0x0001e8a5

000161a0 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   161a0:	b590      	push	{r4, r7, lr}
   161a2:	b087      	sub	sp, #28
   161a4:	af00      	add	r7, sp, #0
   161a6:	0004      	movs	r4, r0
   161a8:	0008      	movs	r0, r1
   161aa:	0011      	movs	r1, r2
   161ac:	1dfb      	adds	r3, r7, #7
   161ae:	1c22      	adds	r2, r4, #0
   161b0:	701a      	strb	r2, [r3, #0]
   161b2:	1dbb      	adds	r3, r7, #6
   161b4:	1c02      	adds	r2, r0, #0
   161b6:	701a      	strb	r2, [r3, #0]
   161b8:	1d7b      	adds	r3, r7, #5
   161ba:	1c0a      	adds	r2, r1, #0
   161bc:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   161be:	2310      	movs	r3, #16
   161c0:	18fb      	adds	r3, r7, r3
   161c2:	1d7a      	adds	r2, r7, #5
   161c4:	7812      	ldrb	r2, [r2, #0]
   161c6:	2101      	movs	r1, #1
   161c8:	0010      	movs	r0, r2
   161ca:	4008      	ands	r0, r1
   161cc:	781a      	ldrb	r2, [r3, #0]
   161ce:	2101      	movs	r1, #1
   161d0:	438a      	bics	r2, r1
   161d2:	1c11      	adds	r1, r2, #0
   161d4:	1c02      	adds	r2, r0, #0
   161d6:	430a      	orrs	r2, r1
   161d8:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   161da:	1dbb      	adds	r3, r7, #6
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	2201      	movs	r2, #1
   161e0:	409a      	lsls	r2, r3
   161e2:	0013      	movs	r3, r2
   161e4:	b2db      	uxtb	r3, r3
   161e6:	1c1a      	adds	r2, r3, #0
   161e8:	230f      	movs	r3, #15
   161ea:	4013      	ands	r3, r2
   161ec:	b2da      	uxtb	r2, r3
   161ee:	2310      	movs	r3, #16
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	210f      	movs	r1, #15
   161f4:	400a      	ands	r2, r1
   161f6:	1890      	adds	r0, r2, r2
   161f8:	781a      	ldrb	r2, [r3, #0]
   161fa:	211e      	movs	r1, #30
   161fc:	438a      	bics	r2, r1
   161fe:	1c11      	adds	r1, r2, #0
   16200:	1c02      	adds	r2, r0, #0
   16202:	430a      	orrs	r2, r1
   16204:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   16206:	230c      	movs	r3, #12
   16208:	18fb      	adds	r3, r7, r3
   1620a:	2210      	movs	r2, #16
   1620c:	701a      	strb	r2, [r3, #0]
   1620e:	230c      	movs	r3, #12
   16210:	18fb      	adds	r3, r7, r3
   16212:	2201      	movs	r2, #1
   16214:	705a      	strb	r2, [r3, #1]
   16216:	230c      	movs	r3, #12
   16218:	18fb      	adds	r3, r7, r3
   1621a:	1dfa      	adds	r2, r7, #7
   1621c:	7812      	ldrb	r2, [r2, #0]
   1621e:	709a      	strb	r2, [r3, #2]
   16220:	2310      	movs	r3, #16
   16222:	18fb      	adds	r3, r7, r3
   16224:	781a      	ldrb	r2, [r3, #0]
   16226:	230c      	movs	r3, #12
   16228:	18fb      	adds	r3, r7, r3
   1622a:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   1622c:	4b0c      	ldr	r3, [pc, #48]	; (16260 <SeesawActivateKey+0xc0>)
   1622e:	222e      	movs	r2, #46	; 0x2e
   16230:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   16232:	4b0b      	ldr	r3, [pc, #44]	; (16260 <SeesawActivateKey+0xc0>)
   16234:	220c      	movs	r2, #12
   16236:	18ba      	adds	r2, r7, r2
   16238:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1623a:	4b09      	ldr	r3, [pc, #36]	; (16260 <SeesawActivateKey+0xc0>)
   1623c:	2204      	movs	r2, #4
   1623e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16240:	4b07      	ldr	r3, [pc, #28]	; (16260 <SeesawActivateKey+0xc0>)
   16242:	2200      	movs	r2, #0
   16244:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16246:	4b06      	ldr	r3, [pc, #24]	; (16260 <SeesawActivateKey+0xc0>)
   16248:	2164      	movs	r1, #100	; 0x64
   1624a:	0018      	movs	r0, r3
   1624c:	4b05      	ldr	r3, [pc, #20]	; (16264 <SeesawActivateKey+0xc4>)
   1624e:	4798      	blx	r3
   16250:	0003      	movs	r3, r0
   16252:	617b      	str	r3, [r7, #20]
    return error;
   16254:	697b      	ldr	r3, [r7, #20]
}
   16256:	0018      	movs	r0, r3
   16258:	46bd      	mov	sp, r7
   1625a:	b007      	add	sp, #28
   1625c:	bd90      	pop	{r4, r7, pc}
   1625e:	46c0      	nop			; (mov r8, r8)
   16260:	200048a4 	.word	0x200048a4
   16264:	0001493d 	.word	0x0001493d

00016268 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16268:	b5b0      	push	{r4, r5, r7, lr}
   1626a:	b086      	sub	sp, #24
   1626c:	af00      	add	r7, sp, #0
   1626e:	0005      	movs	r5, r0
   16270:	000c      	movs	r4, r1
   16272:	0010      	movs	r0, r2
   16274:	0019      	movs	r1, r3
   16276:	1dfb      	adds	r3, r7, #7
   16278:	1c2a      	adds	r2, r5, #0
   1627a:	701a      	strb	r2, [r3, #0]
   1627c:	1dbb      	adds	r3, r7, #6
   1627e:	1c22      	adds	r2, r4, #0
   16280:	701a      	strb	r2, [r3, #0]
   16282:	1d7b      	adds	r3, r7, #5
   16284:	1c02      	adds	r2, r0, #0
   16286:	701a      	strb	r2, [r3, #0]
   16288:	1d3b      	adds	r3, r7, #4
   1628a:	1c0a      	adds	r2, r1, #0
   1628c:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   1628e:	2308      	movs	r3, #8
   16290:	18fb      	adds	r3, r7, r3
   16292:	220e      	movs	r2, #14
   16294:	701a      	strb	r2, [r3, #0]
   16296:	2308      	movs	r3, #8
   16298:	18fb      	adds	r3, r7, r3
   1629a:	2204      	movs	r2, #4
   1629c:	705a      	strb	r2, [r3, #1]
   1629e:	2308      	movs	r3, #8
   162a0:	18fb      	adds	r3, r7, r3
   162a2:	2200      	movs	r2, #0
   162a4:	709a      	strb	r2, [r3, #2]
   162a6:	2308      	movs	r3, #8
   162a8:	18fb      	adds	r3, r7, r3
   162aa:	2200      	movs	r2, #0
   162ac:	70da      	strb	r2, [r3, #3]
   162ae:	2308      	movs	r3, #8
   162b0:	18fb      	adds	r3, r7, r3
   162b2:	1d7a      	adds	r2, r7, #5
   162b4:	7812      	ldrb	r2, [r2, #0]
   162b6:	711a      	strb	r2, [r3, #4]
   162b8:	2308      	movs	r3, #8
   162ba:	18fb      	adds	r3, r7, r3
   162bc:	1dba      	adds	r2, r7, #6
   162be:	7812      	ldrb	r2, [r2, #0]
   162c0:	715a      	strb	r2, [r3, #5]
   162c2:	2308      	movs	r3, #8
   162c4:	18fb      	adds	r3, r7, r3
   162c6:	1d3a      	adds	r2, r7, #4
   162c8:	7812      	ldrb	r2, [r2, #0]
   162ca:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   162cc:	1dfb      	adds	r3, r7, #7
   162ce:	781b      	ldrb	r3, [r3, #0]
   162d0:	b29b      	uxth	r3, r3
   162d2:	2216      	movs	r2, #22
   162d4:	18ba      	adds	r2, r7, r2
   162d6:	1c19      	adds	r1, r3, #0
   162d8:	1c0b      	adds	r3, r1, #0
   162da:	18db      	adds	r3, r3, r3
   162dc:	185b      	adds	r3, r3, r1
   162de:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   162e0:	2316      	movs	r3, #22
   162e2:	18fb      	adds	r3, r7, r3
   162e4:	881b      	ldrh	r3, [r3, #0]
   162e6:	0a1b      	lsrs	r3, r3, #8
   162e8:	b29b      	uxth	r3, r3
   162ea:	b2da      	uxtb	r2, r3
   162ec:	2308      	movs	r3, #8
   162ee:	18fb      	adds	r3, r7, r3
   162f0:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   162f2:	2316      	movs	r3, #22
   162f4:	18fb      	adds	r3, r7, r3
   162f6:	881b      	ldrh	r3, [r3, #0]
   162f8:	b2da      	uxtb	r2, r3
   162fa:	2308      	movs	r3, #8
   162fc:	18fb      	adds	r3, r7, r3
   162fe:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16300:	4b09      	ldr	r3, [pc, #36]	; (16328 <SeesawSetLed+0xc0>)
   16302:	2208      	movs	r2, #8
   16304:	18ba      	adds	r2, r7, r2
   16306:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16308:	4b07      	ldr	r3, [pc, #28]	; (16328 <SeesawSetLed+0xc0>)
   1630a:	2207      	movs	r2, #7
   1630c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1630e:	4b06      	ldr	r3, [pc, #24]	; (16328 <SeesawSetLed+0xc0>)
   16310:	2164      	movs	r1, #100	; 0x64
   16312:	0018      	movs	r0, r3
   16314:	4b05      	ldr	r3, [pc, #20]	; (1632c <SeesawSetLed+0xc4>)
   16316:	4798      	blx	r3
   16318:	0003      	movs	r3, r0
   1631a:	613b      	str	r3, [r7, #16]
    return error;
   1631c:	693b      	ldr	r3, [r7, #16]
}
   1631e:	0018      	movs	r0, r3
   16320:	46bd      	mov	sp, r7
   16322:	b006      	add	sp, #24
   16324:	bdb0      	pop	{r4, r5, r7, pc}
   16326:	46c0      	nop			; (mov r8, r8)
   16328:	200048a4 	.word	0x200048a4
   1632c:	0001493d 	.word	0x0001493d

00016330 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16330:	b580      	push	{r7, lr}
   16332:	b082      	sub	sp, #8
   16334:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16336:	003b      	movs	r3, r7
   16338:	4a0a      	ldr	r2, [pc, #40]	; (16364 <SeesawOrderLedUpdate+0x34>)
   1633a:	8812      	ldrh	r2, [r2, #0]
   1633c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1633e:	4b0a      	ldr	r3, [pc, #40]	; (16368 <SeesawOrderLedUpdate+0x38>)
   16340:	003a      	movs	r2, r7
   16342:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16344:	4b08      	ldr	r3, [pc, #32]	; (16368 <SeesawOrderLedUpdate+0x38>)
   16346:	2202      	movs	r2, #2
   16348:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1634a:	4b07      	ldr	r3, [pc, #28]	; (16368 <SeesawOrderLedUpdate+0x38>)
   1634c:	2164      	movs	r1, #100	; 0x64
   1634e:	0018      	movs	r0, r3
   16350:	4b06      	ldr	r3, [pc, #24]	; (1636c <SeesawOrderLedUpdate+0x3c>)
   16352:	4798      	blx	r3
   16354:	0003      	movs	r3, r0
   16356:	607b      	str	r3, [r7, #4]
    return error;
   16358:	687b      	ldr	r3, [r7, #4]
}
   1635a:	0018      	movs	r0, r3
   1635c:	46bd      	mov	sp, r7
   1635e:	b002      	add	sp, #8
   16360:	bd80      	pop	{r7, pc}
   16362:	46c0      	nop			; (mov r8, r8)
   16364:	00037e48 	.word	0x00037e48
   16368:	200048a4 	.word	0x200048a4
   1636c:	0001493d 	.word	0x0001493d

00016370 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   16370:	b580      	push	{r7, lr}
   16372:	b082      	sub	sp, #8
   16374:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   16376:	4b33      	ldr	r3, [pc, #204]	; (16444 <SeesawInitializeKeypad+0xd4>)
   16378:	222e      	movs	r2, #46	; 0x2e
   1637a:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   1637c:	4b31      	ldr	r3, [pc, #196]	; (16444 <SeesawInitializeKeypad+0xd4>)
   1637e:	4a32      	ldr	r2, [pc, #200]	; (16448 <SeesawInitializeKeypad+0xd8>)
   16380:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   16382:	4b30      	ldr	r3, [pc, #192]	; (16444 <SeesawInitializeKeypad+0xd4>)
   16384:	2203      	movs	r2, #3
   16386:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16388:	4b2e      	ldr	r3, [pc, #184]	; (16444 <SeesawInitializeKeypad+0xd4>)
   1638a:	2200      	movs	r2, #0
   1638c:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1638e:	4b2d      	ldr	r3, [pc, #180]	; (16444 <SeesawInitializeKeypad+0xd4>)
   16390:	2164      	movs	r1, #100	; 0x64
   16392:	0018      	movs	r0, r3
   16394:	4b2d      	ldr	r3, [pc, #180]	; (1644c <SeesawInitializeKeypad+0xdc>)
   16396:	4798      	blx	r3
   16398:	0003      	movs	r3, r0
   1639a:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   1639c:	683b      	ldr	r3, [r7, #0]
   1639e:	2b00      	cmp	r3, #0
   163a0:	d003      	beq.n	163aa <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   163a2:	4b2b      	ldr	r3, [pc, #172]	; (16450 <SeesawInitializeKeypad+0xe0>)
   163a4:	0018      	movs	r0, r3
   163a6:	4b2b      	ldr	r3, [pc, #172]	; (16454 <SeesawInitializeKeypad+0xe4>)
   163a8:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   163aa:	2300      	movs	r3, #0
   163ac:	607b      	str	r3, [r7, #4]
   163ae:	e041      	b.n	16434 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   163b0:	687b      	ldr	r3, [r7, #4]
   163b2:	2b00      	cmp	r3, #0
   163b4:	da00      	bge.n	163b8 <SeesawInitializeKeypad+0x48>
   163b6:	3303      	adds	r3, #3
   163b8:	109b      	asrs	r3, r3, #2
   163ba:	b2db      	uxtb	r3, r3
   163bc:	00db      	lsls	r3, r3, #3
   163be:	b2da      	uxtb	r2, r3
   163c0:	687b      	ldr	r3, [r7, #4]
   163c2:	4925      	ldr	r1, [pc, #148]	; (16458 <SeesawInitializeKeypad+0xe8>)
   163c4:	400b      	ands	r3, r1
   163c6:	d504      	bpl.n	163d2 <SeesawInitializeKeypad+0x62>
   163c8:	3b01      	subs	r3, #1
   163ca:	2104      	movs	r1, #4
   163cc:	4249      	negs	r1, r1
   163ce:	430b      	orrs	r3, r1
   163d0:	3301      	adds	r3, #1
   163d2:	b2db      	uxtb	r3, r3
   163d4:	18d3      	adds	r3, r2, r3
   163d6:	b2db      	uxtb	r3, r3
   163d8:	2201      	movs	r2, #1
   163da:	2103      	movs	r1, #3
   163dc:	0018      	movs	r0, r3
   163de:	4b1f      	ldr	r3, [pc, #124]	; (1645c <SeesawInitializeKeypad+0xec>)
   163e0:	4798      	blx	r3
   163e2:	0003      	movs	r3, r0
   163e4:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   163e6:	687b      	ldr	r3, [r7, #4]
   163e8:	2b00      	cmp	r3, #0
   163ea:	da00      	bge.n	163ee <SeesawInitializeKeypad+0x7e>
   163ec:	3303      	adds	r3, #3
   163ee:	109b      	asrs	r3, r3, #2
   163f0:	b2db      	uxtb	r3, r3
   163f2:	00db      	lsls	r3, r3, #3
   163f4:	b2da      	uxtb	r2, r3
   163f6:	687b      	ldr	r3, [r7, #4]
   163f8:	4917      	ldr	r1, [pc, #92]	; (16458 <SeesawInitializeKeypad+0xe8>)
   163fa:	400b      	ands	r3, r1
   163fc:	d504      	bpl.n	16408 <SeesawInitializeKeypad+0x98>
   163fe:	3b01      	subs	r3, #1
   16400:	2104      	movs	r1, #4
   16402:	4249      	negs	r1, r1
   16404:	430b      	orrs	r3, r1
   16406:	3301      	adds	r3, #1
   16408:	b2db      	uxtb	r3, r3
   1640a:	18d3      	adds	r3, r2, r3
   1640c:	b2db      	uxtb	r3, r3
   1640e:	2201      	movs	r2, #1
   16410:	2102      	movs	r1, #2
   16412:	0018      	movs	r0, r3
   16414:	4b11      	ldr	r3, [pc, #68]	; (1645c <SeesawInitializeKeypad+0xec>)
   16416:	4798      	blx	r3
   16418:	0002      	movs	r2, r0
   1641a:	683b      	ldr	r3, [r7, #0]
   1641c:	4313      	orrs	r3, r2
   1641e:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   16420:	683b      	ldr	r3, [r7, #0]
   16422:	2b00      	cmp	r3, #0
   16424:	d003      	beq.n	1642e <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   16426:	4b0a      	ldr	r3, [pc, #40]	; (16450 <SeesawInitializeKeypad+0xe0>)
   16428:	0018      	movs	r0, r3
   1642a:	4b0a      	ldr	r3, [pc, #40]	; (16454 <SeesawInitializeKeypad+0xe4>)
   1642c:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1642e:	687b      	ldr	r3, [r7, #4]
   16430:	3301      	adds	r3, #1
   16432:	607b      	str	r3, [r7, #4]
   16434:	687b      	ldr	r3, [r7, #4]
   16436:	2b0f      	cmp	r3, #15
   16438:	ddba      	ble.n	163b0 <SeesawInitializeKeypad+0x40>
        }
    }
}
   1643a:	46c0      	nop			; (mov r8, r8)
   1643c:	46bd      	mov	sp, r7
   1643e:	b002      	add	sp, #8
   16440:	bd80      	pop	{r7, pc}
   16442:	46c0      	nop			; (mov r8, r8)
   16444:	200048a4 	.word	0x200048a4
   16448:	00037d58 	.word	0x00037d58
   1644c:	0001493d 	.word	0x0001493d
   16450:	00037e4c 	.word	0x00037e4c
   16454:	0001e8a5 	.word	0x0001e8a5
   16458:	80000003 	.word	0x80000003
   1645c:	000161a1 	.word	0x000161a1

00016460 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   16460:	b5b0      	push	{r4, r5, r7, lr}
   16462:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   16464:	23ff      	movs	r3, #255	; 0xff
   16466:	22ff      	movs	r2, #255	; 0xff
   16468:	21ff      	movs	r1, #255	; 0xff
   1646a:	200f      	movs	r0, #15
   1646c:	4c09      	ldr	r4, [pc, #36]	; (16494 <SeesawTurnOnLedTest+0x34>)
   1646e:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16470:	4b09      	ldr	r3, [pc, #36]	; (16498 <SeesawTurnOnLedTest+0x38>)
   16472:	4798      	blx	r3
    vTaskDelay(400);
   16474:	23c8      	movs	r3, #200	; 0xc8
   16476:	005b      	lsls	r3, r3, #1
   16478:	0018      	movs	r0, r3
   1647a:	4b08      	ldr	r3, [pc, #32]	; (1649c <SeesawTurnOnLedTest+0x3c>)
   1647c:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   1647e:	2300      	movs	r3, #0
   16480:	2200      	movs	r2, #0
   16482:	2100      	movs	r1, #0
   16484:	200f      	movs	r0, #15
   16486:	4c03      	ldr	r4, [pc, #12]	; (16494 <SeesawTurnOnLedTest+0x34>)
   16488:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   1648a:	4b03      	ldr	r3, [pc, #12]	; (16498 <SeesawTurnOnLedTest+0x38>)
   1648c:	4798      	blx	r3
   1648e:	46c0      	nop			; (mov r8, r8)
   16490:	46bd      	mov	sp, r7
   16492:	bdb0      	pop	{r4, r5, r7, pc}
   16494:	00016269 	.word	0x00016269
   16498:	00016331 	.word	0x00016331
   1649c:	0001cc51 	.word	0x0001cc51

000164a0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   164a0:	b580      	push	{r7, lr}
   164a2:	b084      	sub	sp, #16
   164a4:	af00      	add	r7, sp, #0
   164a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   164a8:	687b      	ldr	r3, [r7, #4]
   164aa:	681b      	ldr	r3, [r3, #0]
   164ac:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   164ae:	46c0      	nop			; (mov r8, r8)
   164b0:	68fb      	ldr	r3, [r7, #12]
   164b2:	689b      	ldr	r3, [r3, #8]
   164b4:	2202      	movs	r2, #2
   164b6:	4013      	ands	r3, r2
   164b8:	d1fa      	bne.n	164b0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   164ba:	68fb      	ldr	r3, [r7, #12]
   164bc:	681b      	ldr	r3, [r3, #0]
   164be:	2202      	movs	r2, #2
   164c0:	431a      	orrs	r2, r3
   164c2:	68fb      	ldr	r3, [r7, #12]
   164c4:	601a      	str	r2, [r3, #0]
}
   164c6:	46c0      	nop			; (mov r8, r8)
   164c8:	46bd      	mov	sp, r7
   164ca:	b004      	add	sp, #16
   164cc:	bd80      	pop	{r7, pc}
	...

000164d0 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   164d0:	b580      	push	{r7, lr}
   164d2:	b0aa      	sub	sp, #168	; 0xa8
   164d4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   164d6:	4a15      	ldr	r2, [pc, #84]	; (1652c <configure_tcc+0x5c>)
   164d8:	1d3b      	adds	r3, r7, #4
   164da:	0011      	movs	r1, r2
   164dc:	0018      	movs	r0, r3
   164de:	4b14      	ldr	r3, [pc, #80]	; (16530 <configure_tcc+0x60>)
   164e0:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   164e2:	1d3b      	adds	r3, r7, #4
   164e4:	2202      	movs	r2, #2
   164e6:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   164e8:	1d3b      	adds	r3, r7, #4
   164ea:	4a12      	ldr	r2, [pc, #72]	; (16534 <configure_tcc+0x64>)
   164ec:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   164ee:	1d3b      	adds	r3, r7, #4
   164f0:	2202      	movs	r2, #2
   164f2:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   164f4:	1d3b      	adds	r3, r7, #4
   164f6:	4a10      	ldr	r2, [pc, #64]	; (16538 <configure_tcc+0x68>)
   164f8:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   164fa:	1d3b      	adds	r3, r7, #4
   164fc:	229a      	movs	r2, #154	; 0x9a
   164fe:	2101      	movs	r1, #1
   16500:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   16502:	1d3b      	adds	r3, r7, #4
   16504:	220a      	movs	r2, #10
   16506:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   16508:	1d3b      	adds	r3, r7, #4
   1650a:	2280      	movs	r2, #128	; 0x80
   1650c:	2105      	movs	r1, #5
   1650e:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   16510:	1d3a      	adds	r2, r7, #4
   16512:	4906      	ldr	r1, [pc, #24]	; (1652c <configure_tcc+0x5c>)
   16514:	4b09      	ldr	r3, [pc, #36]	; (1653c <configure_tcc+0x6c>)
   16516:	0018      	movs	r0, r3
   16518:	4b09      	ldr	r3, [pc, #36]	; (16540 <configure_tcc+0x70>)
   1651a:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   1651c:	4b07      	ldr	r3, [pc, #28]	; (1653c <configure_tcc+0x6c>)
   1651e:	0018      	movs	r0, r3
   16520:	4b08      	ldr	r3, [pc, #32]	; (16544 <configure_tcc+0x74>)
   16522:	4798      	blx	r3
}
   16524:	46c0      	nop			; (mov r8, r8)
   16526:	46bd      	mov	sp, r7
   16528:	b02a      	add	sp, #168	; 0xa8
   1652a:	bd80      	pop	{r7, pc}
   1652c:	42002000 	.word	0x42002000
   16530:	0002ae9d 	.word	0x0002ae9d
   16534:	0000ba2e 	.word	0x0000ba2e
   16538:	00005d17 	.word	0x00005d17
   1653c:	200048b4 	.word	0x200048b4
   16540:	0002b4f9 	.word	0x0002b4f9
   16544:	000164a1 	.word	0x000164a1

00016548 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   16548:	b580      	push	{r7, lr}
   1654a:	b084      	sub	sp, #16
   1654c:	af00      	add	r7, sp, #0
   1654e:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   16550:	4b07      	ldr	r3, [pc, #28]	; (16570 <servo_setDuty+0x28>)
   16552:	6879      	ldr	r1, [r7, #4]
   16554:	4807      	ldr	r0, [pc, #28]	; (16574 <servo_setDuty+0x2c>)
   16556:	4798      	blx	r3
   16558:	0003      	movs	r3, r0
   1655a:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   1655c:	68fa      	ldr	r2, [r7, #12]
   1655e:	4b06      	ldr	r3, [pc, #24]	; (16578 <servo_setDuty+0x30>)
   16560:	2102      	movs	r1, #2
   16562:	0018      	movs	r0, r3
   16564:	4b05      	ldr	r3, [pc, #20]	; (1657c <servo_setDuty+0x34>)
   16566:	4798      	blx	r3
   16568:	46c0      	nop			; (mov r8, r8)
   1656a:	46bd      	mov	sp, r7
   1656c:	b004      	add	sp, #16
   1656e:	bd80      	pop	{r7, pc}
   16570:	000337b9 	.word	0x000337b9
   16574:	0000ba2e 	.word	0x0000ba2e
   16578:	200048b4 	.word	0x200048b4
   1657c:	0002b9b9 	.word	0x0002b9b9

00016580 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16580:	b590      	push	{r4, r7, lr}
   16582:	b09f      	sub	sp, #124	; 0x7c
   16584:	af00      	add	r7, sp, #0
   16586:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   16588:	4b40      	ldr	r3, [pc, #256]	; (1668c <vUiHandlerTask+0x10c>)
   1658a:	0018      	movs	r0, r3
   1658c:	4b40      	ldr	r3, [pc, #256]	; (16690 <vUiHandlerTask+0x110>)
   1658e:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16590:	4b40      	ldr	r3, [pc, #256]	; (16694 <vUiHandlerTask+0x114>)
   16592:	2201      	movs	r2, #1
   16594:	701a      	strb	r2, [r3, #0]
	configure_tcc();
   16596:	4b40      	ldr	r3, [pc, #256]	; (16698 <vUiHandlerTask+0x118>)
   16598:	4798      	blx	r3
	servo_setDuty(2);
   1659a:	2002      	movs	r0, #2
   1659c:	4b3f      	ldr	r3, [pc, #252]	; (1669c <vUiHandlerTask+0x11c>)
   1659e:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   165a0:	4b3f      	ldr	r3, [pc, #252]	; (166a0 <vUiHandlerTask+0x120>)
   165a2:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   165a4:	4b3f      	ldr	r3, [pc, #252]	; (166a4 <vUiHandlerTask+0x124>)
   165a6:	4840      	ldr	r0, [pc, #256]	; (166a8 <vUiHandlerTask+0x128>)
   165a8:	2208      	movs	r2, #8
   165aa:	2100      	movs	r1, #0
   165ac:	4c3f      	ldr	r4, [pc, #252]	; (166ac <vUiHandlerTask+0x12c>)
   165ae:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   165b0:	4b3c      	ldr	r3, [pc, #240]	; (166a4 <vUiHandlerTask+0x124>)
   165b2:	483f      	ldr	r0, [pc, #252]	; (166b0 <vUiHandlerTask+0x130>)
   165b4:	2212      	movs	r2, #18
   165b6:	2100      	movs	r1, #0
   165b8:	4c3c      	ldr	r4, [pc, #240]	; (166ac <vUiHandlerTask+0x12c>)
   165ba:	47a0      	blx	r4
	uint8_t count = 0;
   165bc:	2377      	movs	r3, #119	; 0x77
   165be:	18fb      	adds	r3, r7, r3
   165c0:	2200      	movs	r2, #0
   165c2:	701a      	strb	r2, [r3, #0]
	uint8_t count_nau = 0;
   165c4:	2376      	movs	r3, #118	; 0x76
   165c6:	18fb      	adds	r3, r7, r3
   165c8:	2200      	movs	r2, #0
   165ca:	701a      	strb	r2, [r3, #0]
	uint16_t nau_i_total = 0;
   165cc:	2374      	movs	r3, #116	; 0x74
   165ce:	18fb      	adds	r3, r7, r3
   165d0:	2200      	movs	r2, #0
   165d2:	801a      	strh	r2, [r3, #0]
	uint16_t nau_f_total = 0;
   165d4:	2372      	movs	r3, #114	; 0x72
   165d6:	18fb      	adds	r3, r7, r3
   165d8:	2200      	movs	r2, #0
   165da:	801a      	strh	r2, [r3, #0]
	char oled_display[24];
	bool servo_flag = false;
   165dc:	2371      	movs	r3, #113	; 0x71
   165de:	18fb      	adds	r3, r7, r3
   165e0:	2200      	movs	r2, #0
   165e2:	701a      	strb	r2, [r3, #0]
	ADCchip_Init();
   165e4:	4b33      	ldr	r3, [pc, #204]	; (166b4 <vUiHandlerTask+0x134>)
   165e6:	4798      	blx	r3
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   165e8:	4b33      	ldr	r3, [pc, #204]	; (166b8 <vUiHandlerTask+0x138>)
   165ea:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   165ec:	46c0      	nop			; (mov r8, r8)
   165ee:	2000      	movs	r0, #0
   165f0:	4b32      	ldr	r3, [pc, #200]	; (166bc <vUiHandlerTask+0x13c>)
   165f2:	4798      	blx	r3
   165f4:	0003      	movs	r3, r0
   165f6:	001a      	movs	r2, r3
   165f8:	2320      	movs	r3, #32
   165fa:	4013      	ands	r3, r2
   165fc:	2b20      	cmp	r3, #32
   165fe:	d1f6      	bne.n	165ee <vUiHandlerTask+0x6e>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   16600:	4b2f      	ldr	r3, [pc, #188]	; (166c0 <vUiHandlerTask+0x140>)
   16602:	4798      	blx	r3
   16604:	0003      	movs	r3, r0
   16606:	66fb      	str	r3, [r7, #108]	; 0x6c
		uint16_t ADC_Array[2];
		//int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   16608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1660a:	2248      	movs	r2, #72	; 0x48
   1660c:	18ba      	adds	r2, r7, r2
   1660e:	0011      	movs	r1, r2
   16610:	0018      	movs	r0, r3
   16612:	4b2c      	ldr	r3, [pc, #176]	; (166c4 <vUiHandlerTask+0x144>)
   16614:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   16616:	2348      	movs	r3, #72	; 0x48
   16618:	18fb      	adds	r3, r7, r3
   1661a:	881a      	ldrh	r2, [r3, #0]
   1661c:	234c      	movs	r3, #76	; 0x4c
   1661e:	18fb      	adds	r3, r7, r3
   16620:	801a      	strh	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   16622:	2348      	movs	r3, #72	; 0x48
   16624:	18fb      	adds	r3, r7, r3
   16626:	885a      	ldrh	r2, [r3, #2]
   16628:	234c      	movs	r3, #76	; 0x4c
   1662a:	18fb      	adds	r3, r7, r3
   1662c:	805a      	strh	r2, [r3, #2]
		//nau_i_total = ADC_Array[0] + nau_i_total;
		//nau_f_total = ADC_Array[1] + nau_f_total;
		
		int error = WifiAddNauDataToQueue(&nauvar);
   1662e:	234c      	movs	r3, #76	; 0x4c
   16630:	18fb      	adds	r3, r7, r3
   16632:	0018      	movs	r0, r3
   16634:	4b24      	ldr	r3, [pc, #144]	; (166c8 <vUiHandlerTask+0x148>)
   16636:	4798      	blx	r3
   16638:	0003      	movs	r3, r0
   1663a:	66bb      	str	r3, [r7, #104]	; 0x68
			//int error = WifiAddNauDataToQueue(&nauvar);
		//}
		//
		
		
		if(count!=100)
   1663c:	2377      	movs	r3, #119	; 0x77
   1663e:	18fb      	adds	r3, r7, r3
   16640:	781b      	ldrb	r3, [r3, #0]
   16642:	2b64      	cmp	r3, #100	; 0x64
   16644:	d007      	beq.n	16656 <vUiHandlerTask+0xd6>
		{
			count = count + 1;
   16646:	2377      	movs	r3, #119	; 0x77
   16648:	18fb      	adds	r3, r7, r3
   1664a:	2277      	movs	r2, #119	; 0x77
   1664c:	18ba      	adds	r2, r7, r2
   1664e:	7812      	ldrb	r2, [r2, #0]
   16650:	3201      	adds	r2, #1
   16652:	701a      	strb	r2, [r3, #0]
   16654:	e016      	b.n	16684 <vUiHandlerTask+0x104>
		}
		else
		{
			count = 0;
   16656:	2377      	movs	r3, #119	; 0x77
   16658:	18fb      	adds	r3, r7, r3
   1665a:	2200      	movs	r2, #0
   1665c:	701a      	strb	r2, [r3, #0]
			//gfx_mono_init();
			sprintf(oled_display, "%d.%d", ADC_Array[0], ADC_Array[1]);
   1665e:	2348      	movs	r3, #72	; 0x48
   16660:	18fb      	adds	r3, r7, r3
   16662:	881b      	ldrh	r3, [r3, #0]
   16664:	001a      	movs	r2, r3
   16666:	2348      	movs	r3, #72	; 0x48
   16668:	18fb      	adds	r3, r7, r3
   1666a:	885b      	ldrh	r3, [r3, #2]
   1666c:	4917      	ldr	r1, [pc, #92]	; (166cc <vUiHandlerTask+0x14c>)
   1666e:	2050      	movs	r0, #80	; 0x50
   16670:	1838      	adds	r0, r7, r0
   16672:	4c17      	ldr	r4, [pc, #92]	; (166d0 <vUiHandlerTask+0x150>)
   16674:	47a0      	blx	r4
			gfx_mono_draw_string(oled_display, 0, 8, &sysfont);
   16676:	4b0b      	ldr	r3, [pc, #44]	; (166a4 <vUiHandlerTask+0x124>)
   16678:	2250      	movs	r2, #80	; 0x50
   1667a:	18b8      	adds	r0, r7, r2
   1667c:	2208      	movs	r2, #8
   1667e:	2100      	movs	r1, #0
   16680:	4c0a      	ldr	r4, [pc, #40]	; (166ac <vUiHandlerTask+0x12c>)
   16682:	47a0      	blx	r4
		}
		
		
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   16684:	2032      	movs	r0, #50	; 0x32
   16686:	4b13      	ldr	r3, [pc, #76]	; (166d4 <vUiHandlerTask+0x154>)
   16688:	4798      	blx	r3
    while (1) {
   1668a:	e7ad      	b.n	165e8 <vUiHandlerTask+0x68>
   1668c:	00037e70 	.word	0x00037e70
   16690:	0001e8a5 	.word	0x0001e8a5
   16694:	20004904 	.word	0x20004904
   16698:	000164d1 	.word	0x000164d1
   1669c:	00016549 	.word	0x00016549
   166a0:	0001287d 	.word	0x0001287d
   166a4:	20000000 	.word	0x20000000
   166a8:	00037e84 	.word	0x00037e84
   166ac:	00012721 	.word	0x00012721
   166b0:	00037e8c 	.word	0x00037e8c
   166b4:	00015b79 	.word	0x00015b79
   166b8:	00015c15 	.word	0x00015c15
   166bc:	00015a61 	.word	0x00015a61
   166c0:	00015cd1 	.word	0x00015cd1
   166c4:	00015cf5 	.word	0x00015cf5
   166c8:	00017fed 	.word	0x00017fed
   166cc:	00037e94 	.word	0x00037e94
   166d0:	000364c1 	.word	0x000364c1
   166d4:	0001cc51 	.word	0x0001cc51

000166d8 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   166d8:	b590      	push	{r4, r7, lr}
   166da:	b083      	sub	sp, #12
   166dc:	af00      	add	r7, sp, #0
   166de:	0004      	movs	r4, r0
   166e0:	0008      	movs	r0, r1
   166e2:	0011      	movs	r1, r2
   166e4:	1dfb      	adds	r3, r7, #7
   166e6:	1c22      	adds	r2, r4, #0
   166e8:	701a      	strb	r2, [r3, #0]
   166ea:	1dbb      	adds	r3, r7, #6
   166ec:	1c02      	adds	r2, r0, #0
   166ee:	701a      	strb	r2, [r3, #0]
   166f0:	1d7b      	adds	r3, r7, #5
   166f2:	1c0a      	adds	r2, r1, #0
   166f4:	701a      	strb	r2, [r3, #0]
    red = r;
   166f6:	4b08      	ldr	r3, [pc, #32]	; (16718 <UIChangeColors+0x40>)
   166f8:	1dfa      	adds	r2, r7, #7
   166fa:	7812      	ldrb	r2, [r2, #0]
   166fc:	701a      	strb	r2, [r3, #0]
    green = g;
   166fe:	4b07      	ldr	r3, [pc, #28]	; (1671c <UIChangeColors+0x44>)
   16700:	1dba      	adds	r2, r7, #6
   16702:	7812      	ldrb	r2, [r2, #0]
   16704:	701a      	strb	r2, [r3, #0]
    blue = b;
   16706:	4b06      	ldr	r3, [pc, #24]	; (16720 <UIChangeColors+0x48>)
   16708:	1d7a      	adds	r2, r7, #5
   1670a:	7812      	ldrb	r2, [r2, #0]
   1670c:	701a      	strb	r2, [r3, #0]
}
   1670e:	46c0      	nop			; (mov r8, r8)
   16710:	46bd      	mov	sp, r7
   16712:	b003      	add	sp, #12
   16714:	bd90      	pop	{r4, r7, pc}
   16716:	46c0      	nop			; (mov r8, r8)
   16718:	20000619 	.word	0x20000619
   1671c:	2000002c 	.word	0x2000002c
   16720:	2000002d 	.word	0x2000002d

00016724 <NVIC_SystemReset>:
   16724:	b580      	push	{r7, lr}
   16726:	af00      	add	r7, sp, #0
   16728:	f3bf 8f4f 	dsb	sy
   1672c:	4b02      	ldr	r3, [pc, #8]	; (16738 <NVIC_SystemReset+0x14>)
   1672e:	4a03      	ldr	r2, [pc, #12]	; (1673c <NVIC_SystemReset+0x18>)
   16730:	60da      	str	r2, [r3, #12]
   16732:	f3bf 8f4f 	dsb	sy
   16736:	e7fe      	b.n	16736 <NVIC_SystemReset+0x12>
   16738:	e000ed00 	.word	0xe000ed00
   1673c:	05fa0004 	.word	0x05fa0004

00016740 <system_pinmux_get_group_from_gpio_pin>:
   16740:	b580      	push	{r7, lr}
   16742:	b084      	sub	sp, #16
   16744:	af00      	add	r7, sp, #0
   16746:	0002      	movs	r2, r0
   16748:	1dfb      	adds	r3, r7, #7
   1674a:	701a      	strb	r2, [r3, #0]
   1674c:	230f      	movs	r3, #15
   1674e:	18fb      	adds	r3, r7, r3
   16750:	1dfa      	adds	r2, r7, #7
   16752:	7812      	ldrb	r2, [r2, #0]
   16754:	09d2      	lsrs	r2, r2, #7
   16756:	701a      	strb	r2, [r3, #0]
   16758:	230e      	movs	r3, #14
   1675a:	18fb      	adds	r3, r7, r3
   1675c:	1dfa      	adds	r2, r7, #7
   1675e:	7812      	ldrb	r2, [r2, #0]
   16760:	0952      	lsrs	r2, r2, #5
   16762:	701a      	strb	r2, [r3, #0]
   16764:	4b0d      	ldr	r3, [pc, #52]	; (1679c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16766:	60bb      	str	r3, [r7, #8]
   16768:	230f      	movs	r3, #15
   1676a:	18fb      	adds	r3, r7, r3
   1676c:	781b      	ldrb	r3, [r3, #0]
   1676e:	2b00      	cmp	r3, #0
   16770:	d10f      	bne.n	16792 <system_pinmux_get_group_from_gpio_pin+0x52>
   16772:	230f      	movs	r3, #15
   16774:	18fb      	adds	r3, r7, r3
   16776:	781b      	ldrb	r3, [r3, #0]
   16778:	009b      	lsls	r3, r3, #2
   1677a:	2210      	movs	r2, #16
   1677c:	4694      	mov	ip, r2
   1677e:	44bc      	add	ip, r7
   16780:	4463      	add	r3, ip
   16782:	3b08      	subs	r3, #8
   16784:	681a      	ldr	r2, [r3, #0]
   16786:	230e      	movs	r3, #14
   16788:	18fb      	adds	r3, r7, r3
   1678a:	781b      	ldrb	r3, [r3, #0]
   1678c:	01db      	lsls	r3, r3, #7
   1678e:	18d3      	adds	r3, r2, r3
   16790:	e000      	b.n	16794 <system_pinmux_get_group_from_gpio_pin+0x54>
   16792:	2300      	movs	r3, #0
   16794:	0018      	movs	r0, r3
   16796:	46bd      	mov	sp, r7
   16798:	b004      	add	sp, #16
   1679a:	bd80      	pop	{r7, pc}
   1679c:	41004400 	.word	0x41004400

000167a0 <system_reset>:
   167a0:	b580      	push	{r7, lr}
   167a2:	af00      	add	r7, sp, #0
   167a4:	4b02      	ldr	r3, [pc, #8]	; (167b0 <system_reset+0x10>)
   167a6:	4798      	blx	r3
   167a8:	46c0      	nop			; (mov r8, r8)
   167aa:	46bd      	mov	sp, r7
   167ac:	bd80      	pop	{r7, pc}
   167ae:	46c0      	nop			; (mov r8, r8)
   167b0:	00016725 	.word	0x00016725

000167b4 <port_get_group_from_gpio_pin>:
   167b4:	b580      	push	{r7, lr}
   167b6:	b082      	sub	sp, #8
   167b8:	af00      	add	r7, sp, #0
   167ba:	0002      	movs	r2, r0
   167bc:	1dfb      	adds	r3, r7, #7
   167be:	701a      	strb	r2, [r3, #0]
   167c0:	1dfb      	adds	r3, r7, #7
   167c2:	781b      	ldrb	r3, [r3, #0]
   167c4:	0018      	movs	r0, r3
   167c6:	4b03      	ldr	r3, [pc, #12]	; (167d4 <port_get_group_from_gpio_pin+0x20>)
   167c8:	4798      	blx	r3
   167ca:	0003      	movs	r3, r0
   167cc:	0018      	movs	r0, r3
   167ce:	46bd      	mov	sp, r7
   167d0:	b002      	add	sp, #8
   167d2:	bd80      	pop	{r7, pc}
   167d4:	00016741 	.word	0x00016741

000167d8 <port_pin_set_output_level>:
   167d8:	b580      	push	{r7, lr}
   167da:	b084      	sub	sp, #16
   167dc:	af00      	add	r7, sp, #0
   167de:	0002      	movs	r2, r0
   167e0:	1dfb      	adds	r3, r7, #7
   167e2:	701a      	strb	r2, [r3, #0]
   167e4:	1dbb      	adds	r3, r7, #6
   167e6:	1c0a      	adds	r2, r1, #0
   167e8:	701a      	strb	r2, [r3, #0]
   167ea:	1dfb      	adds	r3, r7, #7
   167ec:	781b      	ldrb	r3, [r3, #0]
   167ee:	0018      	movs	r0, r3
   167f0:	4b0d      	ldr	r3, [pc, #52]	; (16828 <port_pin_set_output_level+0x50>)
   167f2:	4798      	blx	r3
   167f4:	0003      	movs	r3, r0
   167f6:	60fb      	str	r3, [r7, #12]
   167f8:	1dfb      	adds	r3, r7, #7
   167fa:	781b      	ldrb	r3, [r3, #0]
   167fc:	221f      	movs	r2, #31
   167fe:	4013      	ands	r3, r2
   16800:	2201      	movs	r2, #1
   16802:	409a      	lsls	r2, r3
   16804:	0013      	movs	r3, r2
   16806:	60bb      	str	r3, [r7, #8]
   16808:	1dbb      	adds	r3, r7, #6
   1680a:	781b      	ldrb	r3, [r3, #0]
   1680c:	2b00      	cmp	r3, #0
   1680e:	d003      	beq.n	16818 <port_pin_set_output_level+0x40>
   16810:	68fb      	ldr	r3, [r7, #12]
   16812:	68ba      	ldr	r2, [r7, #8]
   16814:	619a      	str	r2, [r3, #24]
   16816:	e002      	b.n	1681e <port_pin_set_output_level+0x46>
   16818:	68fb      	ldr	r3, [r7, #12]
   1681a:	68ba      	ldr	r2, [r7, #8]
   1681c:	615a      	str	r2, [r3, #20]
   1681e:	46c0      	nop			; (mov r8, r8)
   16820:	46bd      	mov	sp, r7
   16822:	b004      	add	sp, #16
   16824:	bd80      	pop	{r7, pc}
   16826:	46c0      	nop			; (mov r8, r8)
   16828:	000167b5 	.word	0x000167b5

0001682c <init_state>:
   1682c:	b580      	push	{r7, lr}
   1682e:	af00      	add	r7, sp, #0
   16830:	4b02      	ldr	r3, [pc, #8]	; (1683c <init_state+0x10>)
   16832:	2200      	movs	r2, #0
   16834:	701a      	strb	r2, [r3, #0]
   16836:	46c0      	nop			; (mov r8, r8)
   16838:	46bd      	mov	sp, r7
   1683a:	bd80      	pop	{r7, pc}
   1683c:	20000631 	.word	0x20000631

00016840 <clear_state>:
   16840:	b580      	push	{r7, lr}
   16842:	b082      	sub	sp, #8
   16844:	af00      	add	r7, sp, #0
   16846:	0002      	movs	r2, r0
   16848:	1dfb      	adds	r3, r7, #7
   1684a:	701a      	strb	r2, [r3, #0]
   1684c:	1dfb      	adds	r3, r7, #7
   1684e:	781b      	ldrb	r3, [r3, #0]
   16850:	b25b      	sxtb	r3, r3
   16852:	43db      	mvns	r3, r3
   16854:	b25b      	sxtb	r3, r3
   16856:	4a06      	ldr	r2, [pc, #24]	; (16870 <clear_state+0x30>)
   16858:	7812      	ldrb	r2, [r2, #0]
   1685a:	b252      	sxtb	r2, r2
   1685c:	4013      	ands	r3, r2
   1685e:	b25b      	sxtb	r3, r3
   16860:	b2da      	uxtb	r2, r3
   16862:	4b03      	ldr	r3, [pc, #12]	; (16870 <clear_state+0x30>)
   16864:	701a      	strb	r2, [r3, #0]
   16866:	46c0      	nop			; (mov r8, r8)
   16868:	46bd      	mov	sp, r7
   1686a:	b002      	add	sp, #8
   1686c:	bd80      	pop	{r7, pc}
   1686e:	46c0      	nop			; (mov r8, r8)
   16870:	20000631 	.word	0x20000631

00016874 <add_state>:
   16874:	b580      	push	{r7, lr}
   16876:	b082      	sub	sp, #8
   16878:	af00      	add	r7, sp, #0
   1687a:	0002      	movs	r2, r0
   1687c:	1dfb      	adds	r3, r7, #7
   1687e:	701a      	strb	r2, [r3, #0]
   16880:	4b05      	ldr	r3, [pc, #20]	; (16898 <add_state+0x24>)
   16882:	781a      	ldrb	r2, [r3, #0]
   16884:	1dfb      	adds	r3, r7, #7
   16886:	781b      	ldrb	r3, [r3, #0]
   16888:	4313      	orrs	r3, r2
   1688a:	b2da      	uxtb	r2, r3
   1688c:	4b02      	ldr	r3, [pc, #8]	; (16898 <add_state+0x24>)
   1688e:	701a      	strb	r2, [r3, #0]
   16890:	46c0      	nop			; (mov r8, r8)
   16892:	46bd      	mov	sp, r7
   16894:	b002      	add	sp, #8
   16896:	bd80      	pop	{r7, pc}
   16898:	20000631 	.word	0x20000631

0001689c <is_state_set>:
   1689c:	b580      	push	{r7, lr}
   1689e:	b082      	sub	sp, #8
   168a0:	af00      	add	r7, sp, #0
   168a2:	0002      	movs	r2, r0
   168a4:	1dfb      	adds	r3, r7, #7
   168a6:	701a      	strb	r2, [r3, #0]
   168a8:	4b06      	ldr	r3, [pc, #24]	; (168c4 <is_state_set+0x28>)
   168aa:	781b      	ldrb	r3, [r3, #0]
   168ac:	1dfa      	adds	r2, r7, #7
   168ae:	7812      	ldrb	r2, [r2, #0]
   168b0:	4013      	ands	r3, r2
   168b2:	b2db      	uxtb	r3, r3
   168b4:	1e5a      	subs	r2, r3, #1
   168b6:	4193      	sbcs	r3, r2
   168b8:	b2db      	uxtb	r3, r3
   168ba:	0018      	movs	r0, r3
   168bc:	46bd      	mov	sp, r7
   168be:	b002      	add	sp, #8
   168c0:	bd80      	pop	{r7, pc}
   168c2:	46c0      	nop			; (mov r8, r8)
   168c4:	20000631 	.word	0x20000631

000168c8 <is_exist_file>:
   168c8:	b590      	push	{r4, r7, lr}
   168ca:	b085      	sub	sp, #20
   168cc:	af00      	add	r7, sp, #0
   168ce:	6078      	str	r0, [r7, #4]
   168d0:	6039      	str	r1, [r7, #0]
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	2b00      	cmp	r3, #0
   168d6:	d002      	beq.n	168de <is_exist_file+0x16>
   168d8:	683b      	ldr	r3, [r7, #0]
   168da:	2b00      	cmp	r3, #0
   168dc:	d101      	bne.n	168e2 <is_exist_file+0x1a>
   168de:	2300      	movs	r3, #0
   168e0:	e013      	b.n	1690a <is_exist_file+0x42>
   168e2:	230f      	movs	r3, #15
   168e4:	18fc      	adds	r4, r7, r3
   168e6:	6839      	ldr	r1, [r7, #0]
   168e8:	4b0a      	ldr	r3, [pc, #40]	; (16914 <is_exist_file+0x4c>)
   168ea:	2200      	movs	r2, #0
   168ec:	0018      	movs	r0, r3
   168ee:	4b0a      	ldr	r3, [pc, #40]	; (16918 <is_exist_file+0x50>)
   168f0:	4798      	blx	r3
   168f2:	0003      	movs	r3, r0
   168f4:	7023      	strb	r3, [r4, #0]
   168f6:	4b07      	ldr	r3, [pc, #28]	; (16914 <is_exist_file+0x4c>)
   168f8:	0018      	movs	r0, r3
   168fa:	4b08      	ldr	r3, [pc, #32]	; (1691c <is_exist_file+0x54>)
   168fc:	4798      	blx	r3
   168fe:	230f      	movs	r3, #15
   16900:	18fb      	adds	r3, r7, r3
   16902:	781b      	ldrb	r3, [r3, #0]
   16904:	425a      	negs	r2, r3
   16906:	4153      	adcs	r3, r2
   16908:	b2db      	uxtb	r3, r3
   1690a:	0018      	movs	r0, r3
   1690c:	46bd      	mov	sp, r7
   1690e:	b005      	add	sp, #20
   16910:	bd90      	pop	{r4, r7, pc}
   16912:	46c0      	nop			; (mov r8, r8)
   16914:	20000864 	.word	0x20000864
   16918:	0002e5cd 	.word	0x0002e5cd
   1691c:	0002efcd 	.word	0x0002efcd

00016920 <rename_to_unique>:
   16920:	b580      	push	{r7, lr}
   16922:	b09e      	sub	sp, #120	; 0x78
   16924:	af00      	add	r7, sp, #0
   16926:	60f8      	str	r0, [r7, #12]
   16928:	60b9      	str	r1, [r7, #8]
   1692a:	1dfb      	adds	r3, r7, #7
   1692c:	701a      	strb	r2, [r3, #0]
   1692e:	2376      	movs	r3, #118	; 0x76
   16930:	18fb      	adds	r3, r7, r3
   16932:	2201      	movs	r2, #1
   16934:	801a      	strh	r2, [r3, #0]
   16936:	2374      	movs	r3, #116	; 0x74
   16938:	18fb      	adds	r3, r7, r3
   1693a:	2200      	movs	r2, #0
   1693c:	801a      	strh	r2, [r3, #0]
   1693e:	236e      	movs	r3, #110	; 0x6e
   16940:	18fb      	adds	r3, r7, r3
   16942:	2200      	movs	r2, #0
   16944:	801a      	strh	r2, [r3, #0]
   16946:	2372      	movs	r3, #114	; 0x72
   16948:	18fb      	adds	r3, r7, r3
   1694a:	2200      	movs	r2, #0
   1694c:	801a      	strh	r2, [r3, #0]
   1694e:	2324      	movs	r3, #36	; 0x24
   16950:	18fb      	adds	r3, r7, r3
   16952:	0018      	movs	r0, r3
   16954:	2341      	movs	r3, #65	; 0x41
   16956:	001a      	movs	r2, r3
   16958:	2100      	movs	r1, #0
   1695a:	4b92      	ldr	r3, [pc, #584]	; (16ba4 <rename_to_unique+0x284>)
   1695c:	4798      	blx	r3
   1695e:	2318      	movs	r3, #24
   16960:	18fb      	adds	r3, r7, r3
   16962:	0018      	movs	r0, r3
   16964:	2309      	movs	r3, #9
   16966:	001a      	movs	r2, r3
   16968:	2100      	movs	r1, #0
   1696a:	4b8e      	ldr	r3, [pc, #568]	; (16ba4 <rename_to_unique+0x284>)
   1696c:	4798      	blx	r3
   1696e:	2314      	movs	r3, #20
   16970:	18fb      	adds	r3, r7, r3
   16972:	2200      	movs	r2, #0
   16974:	601a      	str	r2, [r3, #0]
   16976:	2300      	movs	r3, #0
   16978:	66bb      	str	r3, [r7, #104]	; 0x68
   1697a:	2371      	movs	r3, #113	; 0x71
   1697c:	18fb      	adds	r3, r7, r3
   1697e:	2200      	movs	r2, #0
   16980:	701a      	strb	r2, [r3, #0]
   16982:	68bb      	ldr	r3, [r7, #8]
   16984:	2b00      	cmp	r3, #0
   16986:	d101      	bne.n	1698c <rename_to_unique+0x6c>
   16988:	2300      	movs	r3, #0
   1698a:	e106      	b.n	16b9a <rename_to_unique+0x27a>
   1698c:	68ba      	ldr	r2, [r7, #8]
   1698e:	68fb      	ldr	r3, [r7, #12]
   16990:	0011      	movs	r1, r2
   16992:	0018      	movs	r0, r3
   16994:	4b84      	ldr	r3, [pc, #528]	; (16ba8 <rename_to_unique+0x288>)
   16996:	4798      	blx	r3
   16998:	0003      	movs	r3, r0
   1699a:	001a      	movs	r2, r3
   1699c:	2301      	movs	r3, #1
   1699e:	4053      	eors	r3, r2
   169a0:	b2db      	uxtb	r3, r3
   169a2:	2b00      	cmp	r3, #0
   169a4:	d001      	beq.n	169aa <rename_to_unique+0x8a>
   169a6:	2301      	movs	r3, #1
   169a8:	e0f7      	b.n	16b9a <rename_to_unique+0x27a>
   169aa:	68bb      	ldr	r3, [r7, #8]
   169ac:	0018      	movs	r0, r3
   169ae:	4b7f      	ldr	r3, [pc, #508]	; (16bac <rename_to_unique+0x28c>)
   169b0:	4798      	blx	r3
   169b2:	0003      	movs	r3, r0
   169b4:	2b40      	cmp	r3, #64	; 0x40
   169b6:	d901      	bls.n	169bc <rename_to_unique+0x9c>
   169b8:	2300      	movs	r3, #0
   169ba:	e0ee      	b.n	16b9a <rename_to_unique+0x27a>
   169bc:	68bb      	ldr	r3, [r7, #8]
   169be:	212e      	movs	r1, #46	; 0x2e
   169c0:	0018      	movs	r0, r3
   169c2:	4b7b      	ldr	r3, [pc, #492]	; (16bb0 <rename_to_unique+0x290>)
   169c4:	4798      	blx	r3
   169c6:	0003      	movs	r3, r0
   169c8:	66bb      	str	r3, [r7, #104]	; 0x68
   169ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   169cc:	2b00      	cmp	r3, #0
   169ce:	d052      	beq.n	16a76 <rename_to_unique+0x156>
   169d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   169d2:	0018      	movs	r0, r3
   169d4:	4b75      	ldr	r3, [pc, #468]	; (16bac <rename_to_unique+0x28c>)
   169d6:	4798      	blx	r3
   169d8:	0002      	movs	r2, r0
   169da:	236e      	movs	r3, #110	; 0x6e
   169dc:	18fb      	adds	r3, r7, r3
   169de:	801a      	strh	r2, [r3, #0]
   169e0:	236e      	movs	r3, #110	; 0x6e
   169e2:	18fb      	adds	r3, r7, r3
   169e4:	881b      	ldrh	r3, [r3, #0]
   169e6:	2b07      	cmp	r3, #7
   169e8:	d837      	bhi.n	16a5a <rename_to_unique+0x13a>
   169ea:	2371      	movs	r3, #113	; 0x71
   169ec:	18fb      	adds	r3, r7, r3
   169ee:	2201      	movs	r2, #1
   169f0:	701a      	strb	r2, [r3, #0]
   169f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   169f4:	2318      	movs	r3, #24
   169f6:	18fb      	adds	r3, r7, r3
   169f8:	0011      	movs	r1, r2
   169fa:	0018      	movs	r0, r3
   169fc:	4b6d      	ldr	r3, [pc, #436]	; (16bb4 <rename_to_unique+0x294>)
   169fe:	4798      	blx	r3
   16a00:	68bb      	ldr	r3, [r7, #8]
   16a02:	0018      	movs	r0, r3
   16a04:	4b69      	ldr	r3, [pc, #420]	; (16bac <rename_to_unique+0x28c>)
   16a06:	4798      	blx	r3
   16a08:	0002      	movs	r2, r0
   16a0a:	236e      	movs	r3, #110	; 0x6e
   16a0c:	18fb      	adds	r3, r7, r3
   16a0e:	881b      	ldrh	r3, [r3, #0]
   16a10:	1ad3      	subs	r3, r2, r3
   16a12:	2b3c      	cmp	r3, #60	; 0x3c
   16a14:	d911      	bls.n	16a3a <rename_to_unique+0x11a>
   16a16:	2374      	movs	r3, #116	; 0x74
   16a18:	18fb      	adds	r3, r7, r3
   16a1a:	226e      	movs	r2, #110	; 0x6e
   16a1c:	18ba      	adds	r2, r7, r2
   16a1e:	8812      	ldrh	r2, [r2, #0]
   16a20:	213c      	movs	r1, #60	; 0x3c
   16a22:	1a8a      	subs	r2, r1, r2
   16a24:	801a      	strh	r2, [r3, #0]
   16a26:	2374      	movs	r3, #116	; 0x74
   16a28:	18fb      	adds	r3, r7, r3
   16a2a:	881a      	ldrh	r2, [r3, #0]
   16a2c:	68b9      	ldr	r1, [r7, #8]
   16a2e:	2324      	movs	r3, #36	; 0x24
   16a30:	18fb      	adds	r3, r7, r3
   16a32:	0018      	movs	r0, r3
   16a34:	4b60      	ldr	r3, [pc, #384]	; (16bb8 <rename_to_unique+0x298>)
   16a36:	4798      	blx	r3
   16a38:	e02a      	b.n	16a90 <rename_to_unique+0x170>
   16a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16a3c:	68bb      	ldr	r3, [r7, #8]
   16a3e:	1ad2      	subs	r2, r2, r3
   16a40:	2374      	movs	r3, #116	; 0x74
   16a42:	18fb      	adds	r3, r7, r3
   16a44:	801a      	strh	r2, [r3, #0]
   16a46:	2374      	movs	r3, #116	; 0x74
   16a48:	18fb      	adds	r3, r7, r3
   16a4a:	881a      	ldrh	r2, [r3, #0]
   16a4c:	68b9      	ldr	r1, [r7, #8]
   16a4e:	2324      	movs	r3, #36	; 0x24
   16a50:	18fb      	adds	r3, r7, r3
   16a52:	0018      	movs	r0, r3
   16a54:	4b58      	ldr	r3, [pc, #352]	; (16bb8 <rename_to_unique+0x298>)
   16a56:	4798      	blx	r3
   16a58:	e01a      	b.n	16a90 <rename_to_unique+0x170>
   16a5a:	2374      	movs	r3, #116	; 0x74
   16a5c:	18fb      	adds	r3, r7, r3
   16a5e:	223c      	movs	r2, #60	; 0x3c
   16a60:	801a      	strh	r2, [r3, #0]
   16a62:	2374      	movs	r3, #116	; 0x74
   16a64:	18fb      	adds	r3, r7, r3
   16a66:	881a      	ldrh	r2, [r3, #0]
   16a68:	68b9      	ldr	r1, [r7, #8]
   16a6a:	2324      	movs	r3, #36	; 0x24
   16a6c:	18fb      	adds	r3, r7, r3
   16a6e:	0018      	movs	r0, r3
   16a70:	4b51      	ldr	r3, [pc, #324]	; (16bb8 <rename_to_unique+0x298>)
   16a72:	4798      	blx	r3
   16a74:	e00c      	b.n	16a90 <rename_to_unique+0x170>
   16a76:	2374      	movs	r3, #116	; 0x74
   16a78:	18fb      	adds	r3, r7, r3
   16a7a:	223c      	movs	r2, #60	; 0x3c
   16a7c:	801a      	strh	r2, [r3, #0]
   16a7e:	2374      	movs	r3, #116	; 0x74
   16a80:	18fb      	adds	r3, r7, r3
   16a82:	881a      	ldrh	r2, [r3, #0]
   16a84:	68b9      	ldr	r1, [r7, #8]
   16a86:	2324      	movs	r3, #36	; 0x24
   16a88:	18fb      	adds	r3, r7, r3
   16a8a:	0018      	movs	r0, r3
   16a8c:	4b4a      	ldr	r3, [pc, #296]	; (16bb8 <rename_to_unique+0x298>)
   16a8e:	4798      	blx	r3
   16a90:	2374      	movs	r3, #116	; 0x74
   16a92:	18fb      	adds	r3, r7, r3
   16a94:	881b      	ldrh	r3, [r3, #0]
   16a96:	2274      	movs	r2, #116	; 0x74
   16a98:	18ba      	adds	r2, r7, r2
   16a9a:	1c59      	adds	r1, r3, #1
   16a9c:	8011      	strh	r1, [r2, #0]
   16a9e:	001a      	movs	r2, r3
   16aa0:	2324      	movs	r3, #36	; 0x24
   16aa2:	18fb      	adds	r3, r7, r3
   16aa4:	212d      	movs	r1, #45	; 0x2d
   16aa6:	5499      	strb	r1, [r3, r2]
   16aa8:	2376      	movs	r3, #118	; 0x76
   16aaa:	18fb      	adds	r3, r7, r3
   16aac:	2200      	movs	r2, #0
   16aae:	801a      	strh	r2, [r3, #0]
   16ab0:	2372      	movs	r3, #114	; 0x72
   16ab2:	18fb      	adds	r3, r7, r3
   16ab4:	2201      	movs	r2, #1
   16ab6:	801a      	strh	r2, [r3, #0]
   16ab8:	e010      	b.n	16adc <rename_to_unique+0x1bc>
   16aba:	2372      	movs	r3, #114	; 0x72
   16abc:	18fa      	adds	r2, r7, r3
   16abe:	2372      	movs	r3, #114	; 0x72
   16ac0:	18fb      	adds	r3, r7, r3
   16ac2:	881b      	ldrh	r3, [r3, #0]
   16ac4:	1c19      	adds	r1, r3, #0
   16ac6:	0089      	lsls	r1, r1, #2
   16ac8:	18cb      	adds	r3, r1, r3
   16aca:	18db      	adds	r3, r3, r3
   16acc:	8013      	strh	r3, [r2, #0]
   16ace:	2376      	movs	r3, #118	; 0x76
   16ad0:	18fb      	adds	r3, r7, r3
   16ad2:	881a      	ldrh	r2, [r3, #0]
   16ad4:	2376      	movs	r3, #118	; 0x76
   16ad6:	18fb      	adds	r3, r7, r3
   16ad8:	3201      	adds	r2, #1
   16ada:	801a      	strh	r2, [r3, #0]
   16adc:	2376      	movs	r3, #118	; 0x76
   16ade:	18fb      	adds	r3, r7, r3
   16ae0:	881b      	ldrh	r3, [r3, #0]
   16ae2:	2b02      	cmp	r3, #2
   16ae4:	d9e9      	bls.n	16aba <rename_to_unique+0x19a>
   16ae6:	2376      	movs	r3, #118	; 0x76
   16ae8:	18fb      	adds	r3, r7, r3
   16aea:	2201      	movs	r2, #1
   16aec:	801a      	strh	r2, [r3, #0]
   16aee:	e04b      	b.n	16b88 <rename_to_unique+0x268>
   16af0:	2376      	movs	r3, #118	; 0x76
   16af2:	18fb      	adds	r3, r7, r3
   16af4:	881a      	ldrh	r2, [r3, #0]
   16af6:	4931      	ldr	r1, [pc, #196]	; (16bbc <rename_to_unique+0x29c>)
   16af8:	2314      	movs	r3, #20
   16afa:	18fb      	adds	r3, r7, r3
   16afc:	0018      	movs	r0, r3
   16afe:	4b30      	ldr	r3, [pc, #192]	; (16bc0 <rename_to_unique+0x2a0>)
   16b00:	4798      	blx	r3
   16b02:	2374      	movs	r3, #116	; 0x74
   16b04:	18fb      	adds	r3, r7, r3
   16b06:	881b      	ldrh	r3, [r3, #0]
   16b08:	2224      	movs	r2, #36	; 0x24
   16b0a:	18ba      	adds	r2, r7, r2
   16b0c:	18d3      	adds	r3, r2, r3
   16b0e:	2214      	movs	r2, #20
   16b10:	18b9      	adds	r1, r7, r2
   16b12:	2203      	movs	r2, #3
   16b14:	0018      	movs	r0, r3
   16b16:	4b28      	ldr	r3, [pc, #160]	; (16bb8 <rename_to_unique+0x298>)
   16b18:	4798      	blx	r3
   16b1a:	2371      	movs	r3, #113	; 0x71
   16b1c:	18fb      	adds	r3, r7, r3
   16b1e:	781b      	ldrb	r3, [r3, #0]
   16b20:	2b00      	cmp	r3, #0
   16b22:	d00c      	beq.n	16b3e <rename_to_unique+0x21e>
   16b24:	2374      	movs	r3, #116	; 0x74
   16b26:	18fb      	adds	r3, r7, r3
   16b28:	881b      	ldrh	r3, [r3, #0]
   16b2a:	3303      	adds	r3, #3
   16b2c:	2224      	movs	r2, #36	; 0x24
   16b2e:	18ba      	adds	r2, r7, r2
   16b30:	18d3      	adds	r3, r2, r3
   16b32:	2218      	movs	r2, #24
   16b34:	18ba      	adds	r2, r7, r2
   16b36:	0011      	movs	r1, r2
   16b38:	0018      	movs	r0, r3
   16b3a:	4b1e      	ldr	r3, [pc, #120]	; (16bb4 <rename_to_unique+0x294>)
   16b3c:	4798      	blx	r3
   16b3e:	2324      	movs	r3, #36	; 0x24
   16b40:	18fa      	adds	r2, r7, r3
   16b42:	68fb      	ldr	r3, [r7, #12]
   16b44:	0011      	movs	r1, r2
   16b46:	0018      	movs	r0, r3
   16b48:	4b17      	ldr	r3, [pc, #92]	; (16ba8 <rename_to_unique+0x288>)
   16b4a:	4798      	blx	r3
   16b4c:	0003      	movs	r3, r0
   16b4e:	001a      	movs	r2, r3
   16b50:	2301      	movs	r3, #1
   16b52:	4053      	eors	r3, r2
   16b54:	b2db      	uxtb	r3, r3
   16b56:	2b00      	cmp	r3, #0
   16b58:	d00f      	beq.n	16b7a <rename_to_unique+0x25a>
   16b5a:	1dfb      	adds	r3, r7, #7
   16b5c:	781a      	ldrb	r2, [r3, #0]
   16b5e:	68bb      	ldr	r3, [r7, #8]
   16b60:	2100      	movs	r1, #0
   16b62:	0018      	movs	r0, r3
   16b64:	4b0f      	ldr	r3, [pc, #60]	; (16ba4 <rename_to_unique+0x284>)
   16b66:	4798      	blx	r3
   16b68:	2324      	movs	r3, #36	; 0x24
   16b6a:	18fa      	adds	r2, r7, r3
   16b6c:	68bb      	ldr	r3, [r7, #8]
   16b6e:	0011      	movs	r1, r2
   16b70:	0018      	movs	r0, r3
   16b72:	4b10      	ldr	r3, [pc, #64]	; (16bb4 <rename_to_unique+0x294>)
   16b74:	4798      	blx	r3
   16b76:	2301      	movs	r3, #1
   16b78:	e00f      	b.n	16b9a <rename_to_unique+0x27a>
   16b7a:	2376      	movs	r3, #118	; 0x76
   16b7c:	18fb      	adds	r3, r7, r3
   16b7e:	881a      	ldrh	r2, [r3, #0]
   16b80:	2376      	movs	r3, #118	; 0x76
   16b82:	18fb      	adds	r3, r7, r3
   16b84:	3201      	adds	r2, #1
   16b86:	801a      	strh	r2, [r3, #0]
   16b88:	2376      	movs	r3, #118	; 0x76
   16b8a:	18fa      	adds	r2, r7, r3
   16b8c:	2372      	movs	r3, #114	; 0x72
   16b8e:	18fb      	adds	r3, r7, r3
   16b90:	8812      	ldrh	r2, [r2, #0]
   16b92:	881b      	ldrh	r3, [r3, #0]
   16b94:	429a      	cmp	r2, r3
   16b96:	d3ab      	bcc.n	16af0 <rename_to_unique+0x1d0>
   16b98:	2300      	movs	r3, #0
   16b9a:	0018      	movs	r0, r3
   16b9c:	46bd      	mov	sp, r7
   16b9e:	b01e      	add	sp, #120	; 0x78
   16ba0:	bd80      	pop	{r7, pc}
   16ba2:	46c0      	nop			; (mov r8, r8)
   16ba4:	00036203 	.word	0x00036203
   16ba8:	000168c9 	.word	0x000168c9
   16bac:	0003659f 	.word	0x0003659f
   16bb0:	000365f9 	.word	0x000365f9
   16bb4:	00036555 	.word	0x00036555
   16bb8:	000365cf 	.word	0x000365cf
   16bbc:	00037eb0 	.word	0x00037eb0
   16bc0:	000364c1 	.word	0x000364c1

00016bc4 <start_download>:
   16bc4:	b590      	push	{r4, r7, lr}
   16bc6:	b083      	sub	sp, #12
   16bc8:	af02      	add	r7, sp, #8
   16bca:	2001      	movs	r0, #1
   16bcc:	4b22      	ldr	r3, [pc, #136]	; (16c58 <start_download+0x94>)
   16bce:	4798      	blx	r3
   16bd0:	0003      	movs	r3, r0
   16bd2:	001a      	movs	r2, r3
   16bd4:	2301      	movs	r3, #1
   16bd6:	4053      	eors	r3, r2
   16bd8:	b2db      	uxtb	r3, r3
   16bda:	2b00      	cmp	r3, #0
   16bdc:	d005      	beq.n	16bea <start_download+0x26>
   16bde:	4b1f      	ldr	r3, [pc, #124]	; (16c5c <start_download+0x98>)
   16be0:	0019      	movs	r1, r3
   16be2:	2001      	movs	r0, #1
   16be4:	4b1e      	ldr	r3, [pc, #120]	; (16c60 <start_download+0x9c>)
   16be6:	4798      	blx	r3
   16be8:	e032      	b.n	16c50 <start_download+0x8c>
   16bea:	2002      	movs	r0, #2
   16bec:	4b1a      	ldr	r3, [pc, #104]	; (16c58 <start_download+0x94>)
   16bee:	4798      	blx	r3
   16bf0:	0003      	movs	r3, r0
   16bf2:	001a      	movs	r2, r3
   16bf4:	2301      	movs	r3, #1
   16bf6:	4053      	eors	r3, r2
   16bf8:	b2db      	uxtb	r3, r3
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d005      	beq.n	16c0a <start_download+0x46>
   16bfe:	4b19      	ldr	r3, [pc, #100]	; (16c64 <start_download+0xa0>)
   16c00:	0019      	movs	r1, r3
   16c02:	2001      	movs	r0, #1
   16c04:	4b16      	ldr	r3, [pc, #88]	; (16c60 <start_download+0x9c>)
   16c06:	4798      	blx	r3
   16c08:	e022      	b.n	16c50 <start_download+0x8c>
   16c0a:	2004      	movs	r0, #4
   16c0c:	4b12      	ldr	r3, [pc, #72]	; (16c58 <start_download+0x94>)
   16c0e:	4798      	blx	r3
   16c10:	1e03      	subs	r3, r0, #0
   16c12:	d005      	beq.n	16c20 <start_download+0x5c>
   16c14:	4b14      	ldr	r3, [pc, #80]	; (16c68 <start_download+0xa4>)
   16c16:	0019      	movs	r1, r3
   16c18:	2001      	movs	r0, #1
   16c1a:	4b11      	ldr	r3, [pc, #68]	; (16c60 <start_download+0x9c>)
   16c1c:	4798      	blx	r3
   16c1e:	e017      	b.n	16c50 <start_download+0x8c>
   16c20:	2008      	movs	r0, #8
   16c22:	4b0d      	ldr	r3, [pc, #52]	; (16c58 <start_download+0x94>)
   16c24:	4798      	blx	r3
   16c26:	1e03      	subs	r3, r0, #0
   16c28:	d005      	beq.n	16c36 <start_download+0x72>
   16c2a:	4b10      	ldr	r3, [pc, #64]	; (16c6c <start_download+0xa8>)
   16c2c:	0019      	movs	r1, r3
   16c2e:	2001      	movs	r0, #1
   16c30:	4b0b      	ldr	r3, [pc, #44]	; (16c60 <start_download+0x9c>)
   16c32:	4798      	blx	r3
   16c34:	e00c      	b.n	16c50 <start_download+0x8c>
   16c36:	4b0e      	ldr	r3, [pc, #56]	; (16c70 <start_download+0xac>)
   16c38:	0019      	movs	r1, r3
   16c3a:	2001      	movs	r0, #1
   16c3c:	4b08      	ldr	r3, [pc, #32]	; (16c60 <start_download+0x9c>)
   16c3e:	4798      	blx	r3
   16c40:	490c      	ldr	r1, [pc, #48]	; (16c74 <start_download+0xb0>)
   16c42:	480d      	ldr	r0, [pc, #52]	; (16c78 <start_download+0xb4>)
   16c44:	2300      	movs	r3, #0
   16c46:	9300      	str	r3, [sp, #0]
   16c48:	2300      	movs	r3, #0
   16c4a:	2201      	movs	r2, #1
   16c4c:	4c0b      	ldr	r4, [pc, #44]	; (16c7c <start_download+0xb8>)
   16c4e:	47a0      	blx	r4
   16c50:	46bd      	mov	sp, r7
   16c52:	b001      	add	sp, #4
   16c54:	bd90      	pop	{r4, r7, pc}
   16c56:	46c0      	nop			; (mov r8, r8)
   16c58:	0001689d 	.word	0x0001689d
   16c5c:	00037eb8 	.word	0x00037eb8
   16c60:	0001e991 	.word	0x0001e991
   16c64:	00037ee4 	.word	0x00037ee4
   16c68:	00037f10 	.word	0x00037f10
   16c6c:	00037f3c 	.word	0x00037f3c
   16c70:	00037f68 	.word	0x00037f68
   16c74:	00037f94 	.word	0x00037f94
   16c78:	20004960 	.word	0x20004960
   16c7c:	00031c21 	.word	0x00031c21

00016c80 <store_file_packet>:
   16c80:	b5b0      	push	{r4, r5, r7, lr}
   16c82:	b086      	sub	sp, #24
   16c84:	af00      	add	r7, sp, #0
   16c86:	6078      	str	r0, [r7, #4]
   16c88:	6039      	str	r1, [r7, #0]
   16c8a:	687b      	ldr	r3, [r7, #4]
   16c8c:	2b00      	cmp	r3, #0
   16c8e:	d002      	beq.n	16c96 <store_file_packet+0x16>
   16c90:	683b      	ldr	r3, [r7, #0]
   16c92:	2b00      	cmp	r3, #0
   16c94:	d105      	bne.n	16ca2 <store_file_packet+0x22>
   16c96:	4b58      	ldr	r3, [pc, #352]	; (16df8 <store_file_packet+0x178>)
   16c98:	0019      	movs	r1, r3
   16c9a:	2001      	movs	r0, #1
   16c9c:	4b57      	ldr	r3, [pc, #348]	; (16dfc <store_file_packet+0x17c>)
   16c9e:	4798      	blx	r3
   16ca0:	e0a6      	b.n	16df0 <store_file_packet+0x170>
   16ca2:	2008      	movs	r0, #8
   16ca4:	4b56      	ldr	r3, [pc, #344]	; (16e00 <store_file_packet+0x180>)
   16ca6:	4798      	blx	r3
   16ca8:	0003      	movs	r3, r0
   16caa:	001a      	movs	r2, r3
   16cac:	2301      	movs	r3, #1
   16cae:	4053      	eors	r3, r2
   16cb0:	b2db      	uxtb	r3, r3
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	d055      	beq.n	16d62 <store_file_packet+0xe2>
   16cb6:	2300      	movs	r3, #0
   16cb8:	617b      	str	r3, [r7, #20]
   16cba:	4b52      	ldr	r3, [pc, #328]	; (16e04 <store_file_packet+0x184>)
   16cbc:	2230      	movs	r2, #48	; 0x30
   16cbe:	701a      	strb	r2, [r3, #0]
   16cc0:	4b50      	ldr	r3, [pc, #320]	; (16e04 <store_file_packet+0x184>)
   16cc2:	223a      	movs	r2, #58	; 0x3a
   16cc4:	705a      	strb	r2, [r3, #1]
   16cc6:	4b50      	ldr	r3, [pc, #320]	; (16e08 <store_file_packet+0x188>)
   16cc8:	617b      	str	r3, [r7, #20]
   16cca:	e002      	b.n	16cd2 <store_file_packet+0x52>
   16ccc:	697b      	ldr	r3, [r7, #20]
   16cce:	3b01      	subs	r3, #1
   16cd0:	617b      	str	r3, [r7, #20]
   16cd2:	697b      	ldr	r3, [r7, #20]
   16cd4:	781b      	ldrb	r3, [r3, #0]
   16cd6:	2b2f      	cmp	r3, #47	; 0x2f
   16cd8:	d1f8      	bne.n	16ccc <store_file_packet+0x4c>
   16cda:	697b      	ldr	r3, [r7, #20]
   16cdc:	0018      	movs	r0, r3
   16cde:	4b4b      	ldr	r3, [pc, #300]	; (16e0c <store_file_packet+0x18c>)
   16ce0:	4798      	blx	r3
   16ce2:	0003      	movs	r3, r0
   16ce4:	2b01      	cmp	r3, #1
   16ce6:	d924      	bls.n	16d32 <store_file_packet+0xb2>
   16ce8:	697b      	ldr	r3, [r7, #20]
   16cea:	3301      	adds	r3, #1
   16cec:	617b      	str	r3, [r7, #20]
   16cee:	697a      	ldr	r2, [r7, #20]
   16cf0:	4b47      	ldr	r3, [pc, #284]	; (16e10 <store_file_packet+0x190>)
   16cf2:	0011      	movs	r1, r2
   16cf4:	0018      	movs	r0, r3
   16cf6:	4b47      	ldr	r3, [pc, #284]	; (16e14 <store_file_packet+0x194>)
   16cf8:	4798      	blx	r3
   16cfa:	4942      	ldr	r1, [pc, #264]	; (16e04 <store_file_packet+0x184>)
   16cfc:	4b46      	ldr	r3, [pc, #280]	; (16e18 <store_file_packet+0x198>)
   16cfe:	2240      	movs	r2, #64	; 0x40
   16d00:	0018      	movs	r0, r3
   16d02:	4b46      	ldr	r3, [pc, #280]	; (16e1c <store_file_packet+0x19c>)
   16d04:	4798      	blx	r3
   16d06:	4a3f      	ldr	r2, [pc, #252]	; (16e04 <store_file_packet+0x184>)
   16d08:	4b45      	ldr	r3, [pc, #276]	; (16e20 <store_file_packet+0x1a0>)
   16d0a:	0019      	movs	r1, r3
   16d0c:	2001      	movs	r0, #1
   16d0e:	4b3b      	ldr	r3, [pc, #236]	; (16dfc <store_file_packet+0x17c>)
   16d10:	4798      	blx	r3
   16d12:	2313      	movs	r3, #19
   16d14:	18fc      	adds	r4, r7, r3
   16d16:	493b      	ldr	r1, [pc, #236]	; (16e04 <store_file_packet+0x184>)
   16d18:	4b3f      	ldr	r3, [pc, #252]	; (16e18 <store_file_packet+0x198>)
   16d1a:	220a      	movs	r2, #10
   16d1c:	0018      	movs	r0, r3
   16d1e:	4b41      	ldr	r3, [pc, #260]	; (16e24 <store_file_packet+0x1a4>)
   16d20:	4798      	blx	r3
   16d22:	0003      	movs	r3, r0
   16d24:	7023      	strb	r3, [r4, #0]
   16d26:	2313      	movs	r3, #19
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	781b      	ldrb	r3, [r3, #0]
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	d012      	beq.n	16d56 <store_file_packet+0xd6>
   16d30:	e008      	b.n	16d44 <store_file_packet+0xc4>
   16d32:	4b3d      	ldr	r3, [pc, #244]	; (16e28 <store_file_packet+0x1a8>)
   16d34:	0019      	movs	r1, r3
   16d36:	2001      	movs	r0, #1
   16d38:	4b30      	ldr	r3, [pc, #192]	; (16dfc <store_file_packet+0x17c>)
   16d3a:	4798      	blx	r3
   16d3c:	2020      	movs	r0, #32
   16d3e:	4b3b      	ldr	r3, [pc, #236]	; (16e2c <store_file_packet+0x1ac>)
   16d40:	4798      	blx	r3
   16d42:	e055      	b.n	16df0 <store_file_packet+0x170>
   16d44:	2313      	movs	r3, #19
   16d46:	18fb      	adds	r3, r7, r3
   16d48:	781a      	ldrb	r2, [r3, #0]
   16d4a:	4b39      	ldr	r3, [pc, #228]	; (16e30 <store_file_packet+0x1b0>)
   16d4c:	0019      	movs	r1, r3
   16d4e:	2001      	movs	r0, #1
   16d50:	4b2a      	ldr	r3, [pc, #168]	; (16dfc <store_file_packet+0x17c>)
   16d52:	4798      	blx	r3
   16d54:	e04c      	b.n	16df0 <store_file_packet+0x170>
   16d56:	4b37      	ldr	r3, [pc, #220]	; (16e34 <store_file_packet+0x1b4>)
   16d58:	2200      	movs	r2, #0
   16d5a:	601a      	str	r2, [r3, #0]
   16d5c:	2008      	movs	r0, #8
   16d5e:	4b33      	ldr	r3, [pc, #204]	; (16e2c <store_file_packet+0x1ac>)
   16d60:	4798      	blx	r3
   16d62:	687b      	ldr	r3, [r7, #4]
   16d64:	2b00      	cmp	r3, #0
   16d66:	d043      	beq.n	16df0 <store_file_packet+0x170>
   16d68:	2300      	movs	r3, #0
   16d6a:	60fb      	str	r3, [r7, #12]
   16d6c:	2313      	movs	r3, #19
   16d6e:	18fc      	adds	r4, r7, r3
   16d70:	230c      	movs	r3, #12
   16d72:	18fb      	adds	r3, r7, r3
   16d74:	683a      	ldr	r2, [r7, #0]
   16d76:	6879      	ldr	r1, [r7, #4]
   16d78:	4827      	ldr	r0, [pc, #156]	; (16e18 <store_file_packet+0x198>)
   16d7a:	4d2f      	ldr	r5, [pc, #188]	; (16e38 <store_file_packet+0x1b8>)
   16d7c:	47a8      	blx	r5
   16d7e:	0003      	movs	r3, r0
   16d80:	7023      	strb	r3, [r4, #0]
   16d82:	2313      	movs	r3, #19
   16d84:	18fb      	adds	r3, r7, r3
   16d86:	781b      	ldrb	r3, [r3, #0]
   16d88:	2b00      	cmp	r3, #0
   16d8a:	d00c      	beq.n	16da6 <store_file_packet+0x126>
   16d8c:	4b22      	ldr	r3, [pc, #136]	; (16e18 <store_file_packet+0x198>)
   16d8e:	0018      	movs	r0, r3
   16d90:	4b2a      	ldr	r3, [pc, #168]	; (16e3c <store_file_packet+0x1bc>)
   16d92:	4798      	blx	r3
   16d94:	2020      	movs	r0, #32
   16d96:	4b25      	ldr	r3, [pc, #148]	; (16e2c <store_file_packet+0x1ac>)
   16d98:	4798      	blx	r3
   16d9a:	4b29      	ldr	r3, [pc, #164]	; (16e40 <store_file_packet+0x1c0>)
   16d9c:	0019      	movs	r1, r3
   16d9e:	2001      	movs	r0, #1
   16da0:	4b16      	ldr	r3, [pc, #88]	; (16dfc <store_file_packet+0x17c>)
   16da2:	4798      	blx	r3
   16da4:	e024      	b.n	16df0 <store_file_packet+0x170>
   16da6:	4b23      	ldr	r3, [pc, #140]	; (16e34 <store_file_packet+0x1b4>)
   16da8:	681a      	ldr	r2, [r3, #0]
   16daa:	68fb      	ldr	r3, [r7, #12]
   16dac:	18d2      	adds	r2, r2, r3
   16dae:	4b21      	ldr	r3, [pc, #132]	; (16e34 <store_file_packet+0x1b4>)
   16db0:	601a      	str	r2, [r3, #0]
   16db2:	4b20      	ldr	r3, [pc, #128]	; (16e34 <store_file_packet+0x1b4>)
   16db4:	681a      	ldr	r2, [r3, #0]
   16db6:	4b23      	ldr	r3, [pc, #140]	; (16e44 <store_file_packet+0x1c4>)
   16db8:	681b      	ldr	r3, [r3, #0]
   16dba:	4923      	ldr	r1, [pc, #140]	; (16e48 <store_file_packet+0x1c8>)
   16dbc:	2001      	movs	r0, #1
   16dbe:	4c0f      	ldr	r4, [pc, #60]	; (16dfc <store_file_packet+0x17c>)
   16dc0:	47a0      	blx	r4
   16dc2:	4b1c      	ldr	r3, [pc, #112]	; (16e34 <store_file_packet+0x1b4>)
   16dc4:	681a      	ldr	r2, [r3, #0]
   16dc6:	4b1f      	ldr	r3, [pc, #124]	; (16e44 <store_file_packet+0x1c4>)
   16dc8:	681b      	ldr	r3, [r3, #0]
   16dca:	429a      	cmp	r2, r3
   16dcc:	d310      	bcc.n	16df0 <store_file_packet+0x170>
   16dce:	4b12      	ldr	r3, [pc, #72]	; (16e18 <store_file_packet+0x198>)
   16dd0:	0018      	movs	r0, r3
   16dd2:	4b1a      	ldr	r3, [pc, #104]	; (16e3c <store_file_packet+0x1bc>)
   16dd4:	4798      	blx	r3
   16dd6:	4b1d      	ldr	r3, [pc, #116]	; (16e4c <store_file_packet+0x1cc>)
   16dd8:	0019      	movs	r1, r3
   16dda:	2001      	movs	r0, #1
   16ddc:	4b07      	ldr	r3, [pc, #28]	; (16dfc <store_file_packet+0x17c>)
   16dde:	4798      	blx	r3
   16de0:	2100      	movs	r1, #0
   16de2:	2017      	movs	r0, #23
   16de4:	4b1a      	ldr	r3, [pc, #104]	; (16e50 <store_file_packet+0x1d0>)
   16de6:	4798      	blx	r3
   16de8:	2010      	movs	r0, #16
   16dea:	4b10      	ldr	r3, [pc, #64]	; (16e2c <store_file_packet+0x1ac>)
   16dec:	4798      	blx	r3
   16dee:	46c0      	nop			; (mov r8, r8)
   16df0:	46bd      	mov	sp, r7
   16df2:	b006      	add	sp, #24
   16df4:	bdb0      	pop	{r4, r5, r7, pc}
   16df6:	46c0      	nop			; (mov r8, r8)
   16df8:	00037fb4 	.word	0x00037fb4
   16dfc:	0001e991 	.word	0x0001e991
   16e00:	0001689d 	.word	0x0001689d
   16e04:	200000b4 	.word	0x200000b4
   16e08:	00037fb3 	.word	0x00037fb3
   16e0c:	0003659f 	.word	0x0003659f
   16e10:	200000b6 	.word	0x200000b6
   16e14:	00036555 	.word	0x00036555
   16e18:	20000864 	.word	0x20000864
   16e1c:	00016921 	.word	0x00016921
   16e20:	00038018 	.word	0x00038018
   16e24:	0002e5cd 	.word	0x0002e5cd
   16e28:	00037fd8 	.word	0x00037fd8
   16e2c:	00016875 	.word	0x00016875
   16e30:	00038040 	.word	0x00038040
   16e34:	2000088c 	.word	0x2000088c
   16e38:	0002eafd 	.word	0x0002eafd
   16e3c:	0002efcd 	.word	0x0002efcd
   16e40:	00038074 	.word	0x00038074
   16e44:	20000888 	.word	0x20000888
   16e48:	000380b0 	.word	0x000380b0
   16e4c:	000380e4 	.word	0x000380e4
   16e50:	000167d9 	.word	0x000167d9

00016e54 <http_client_callback>:
   16e54:	b590      	push	{r4, r7, lr}
   16e56:	b085      	sub	sp, #20
   16e58:	af00      	add	r7, sp, #0
   16e5a:	60f8      	str	r0, [r7, #12]
   16e5c:	60b9      	str	r1, [r7, #8]
   16e5e:	607a      	str	r2, [r7, #4]
   16e60:	68bb      	ldr	r3, [r7, #8]
   16e62:	2b04      	cmp	r3, #4
   16e64:	d900      	bls.n	16e68 <http_client_callback+0x14>
   16e66:	e077      	b.n	16f58 <http_client_callback+0x104>
   16e68:	68bb      	ldr	r3, [r7, #8]
   16e6a:	009a      	lsls	r2, r3, #2
   16e6c:	4b3c      	ldr	r3, [pc, #240]	; (16f60 <http_client_callback+0x10c>)
   16e6e:	18d3      	adds	r3, r2, r3
   16e70:	681b      	ldr	r3, [r3, #0]
   16e72:	469f      	mov	pc, r3
   16e74:	4b3b      	ldr	r3, [pc, #236]	; (16f64 <http_client_callback+0x110>)
   16e76:	0019      	movs	r1, r3
   16e78:	2001      	movs	r0, #1
   16e7a:	4b3b      	ldr	r3, [pc, #236]	; (16f68 <http_client_callback+0x114>)
   16e7c:	4798      	blx	r3
   16e7e:	e06b      	b.n	16f58 <http_client_callback+0x104>
   16e80:	4b3a      	ldr	r3, [pc, #232]	; (16f6c <http_client_callback+0x118>)
   16e82:	0019      	movs	r1, r3
   16e84:	2001      	movs	r0, #1
   16e86:	4b38      	ldr	r3, [pc, #224]	; (16f68 <http_client_callback+0x114>)
   16e88:	4798      	blx	r3
   16e8a:	2004      	movs	r0, #4
   16e8c:	4b38      	ldr	r3, [pc, #224]	; (16f70 <http_client_callback+0x11c>)
   16e8e:	4798      	blx	r3
   16e90:	e062      	b.n	16f58 <http_client_callback+0x104>
   16e92:	687b      	ldr	r3, [r7, #4]
   16e94:	881b      	ldrh	r3, [r3, #0]
   16e96:	001a      	movs	r2, r3
   16e98:	687b      	ldr	r3, [r7, #4]
   16e9a:	685b      	ldr	r3, [r3, #4]
   16e9c:	4935      	ldr	r1, [pc, #212]	; (16f74 <http_client_callback+0x120>)
   16e9e:	2001      	movs	r0, #1
   16ea0:	4c31      	ldr	r4, [pc, #196]	; (16f68 <http_client_callback+0x114>)
   16ea2:	47a0      	blx	r4
   16ea4:	687b      	ldr	r3, [r7, #4]
   16ea6:	881b      	ldrh	r3, [r3, #0]
   16ea8:	2bc8      	cmp	r3, #200	; 0xc8
   16eaa:	d10d      	bne.n	16ec8 <http_client_callback+0x74>
   16eac:	687b      	ldr	r3, [r7, #4]
   16eae:	685a      	ldr	r2, [r3, #4]
   16eb0:	4b31      	ldr	r3, [pc, #196]	; (16f78 <http_client_callback+0x124>)
   16eb2:	601a      	str	r2, [r3, #0]
   16eb4:	4b31      	ldr	r3, [pc, #196]	; (16f7c <http_client_callback+0x128>)
   16eb6:	2200      	movs	r2, #0
   16eb8:	601a      	str	r2, [r3, #0]
   16eba:	687b      	ldr	r3, [r7, #4]
   16ebc:	685a      	ldr	r2, [r3, #4]
   16ebe:	2380      	movs	r3, #128	; 0x80
   16ec0:	009b      	lsls	r3, r3, #2
   16ec2:	429a      	cmp	r2, r3
   16ec4:	d843      	bhi.n	16f4e <http_client_callback+0xfa>
   16ec6:	e003      	b.n	16ed0 <http_client_callback+0x7c>
   16ec8:	2020      	movs	r0, #32
   16eca:	4b29      	ldr	r3, [pc, #164]	; (16f70 <http_client_callback+0x11c>)
   16ecc:	4798      	blx	r3
   16ece:	e043      	b.n	16f58 <http_client_callback+0x104>
   16ed0:	687b      	ldr	r3, [r7, #4]
   16ed2:	689a      	ldr	r2, [r3, #8]
   16ed4:	687b      	ldr	r3, [r7, #4]
   16ed6:	685b      	ldr	r3, [r3, #4]
   16ed8:	0019      	movs	r1, r3
   16eda:	0010      	movs	r0, r2
   16edc:	4b28      	ldr	r3, [pc, #160]	; (16f80 <http_client_callback+0x12c>)
   16ede:	4798      	blx	r3
   16ee0:	2010      	movs	r0, #16
   16ee2:	4b23      	ldr	r3, [pc, #140]	; (16f70 <http_client_callback+0x11c>)
   16ee4:	4798      	blx	r3
   16ee6:	e032      	b.n	16f4e <http_client_callback+0xfa>
   16ee8:	687b      	ldr	r3, [r7, #4]
   16eea:	685a      	ldr	r2, [r3, #4]
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	0019      	movs	r1, r3
   16ef2:	0010      	movs	r0, r2
   16ef4:	4b22      	ldr	r3, [pc, #136]	; (16f80 <http_client_callback+0x12c>)
   16ef6:	4798      	blx	r3
   16ef8:	687b      	ldr	r3, [r7, #4]
   16efa:	7a1b      	ldrb	r3, [r3, #8]
   16efc:	2b00      	cmp	r3, #0
   16efe:	d028      	beq.n	16f52 <http_client_callback+0xfe>
   16f00:	2010      	movs	r0, #16
   16f02:	4b1b      	ldr	r3, [pc, #108]	; (16f70 <http_client_callback+0x11c>)
   16f04:	4798      	blx	r3
   16f06:	e024      	b.n	16f52 <http_client_callback+0xfe>
   16f08:	687b      	ldr	r3, [r7, #4]
   16f0a:	681a      	ldr	r2, [r3, #0]
   16f0c:	4b1d      	ldr	r3, [pc, #116]	; (16f84 <http_client_callback+0x130>)
   16f0e:	0019      	movs	r1, r3
   16f10:	2001      	movs	r0, #1
   16f12:	4b15      	ldr	r3, [pc, #84]	; (16f68 <http_client_callback+0x114>)
   16f14:	4798      	blx	r3
   16f16:	687b      	ldr	r3, [r7, #4]
   16f18:	681b      	ldr	r3, [r3, #0]
   16f1a:	330b      	adds	r3, #11
   16f1c:	d11b      	bne.n	16f56 <http_client_callback+0x102>
   16f1e:	2008      	movs	r0, #8
   16f20:	4b19      	ldr	r3, [pc, #100]	; (16f88 <http_client_callback+0x134>)
   16f22:	4798      	blx	r3
   16f24:	1e03      	subs	r3, r0, #0
   16f26:	d006      	beq.n	16f36 <http_client_callback+0xe2>
   16f28:	4b18      	ldr	r3, [pc, #96]	; (16f8c <http_client_callback+0x138>)
   16f2a:	0018      	movs	r0, r3
   16f2c:	4b18      	ldr	r3, [pc, #96]	; (16f90 <http_client_callback+0x13c>)
   16f2e:	4798      	blx	r3
   16f30:	2008      	movs	r0, #8
   16f32:	4b18      	ldr	r3, [pc, #96]	; (16f94 <http_client_callback+0x140>)
   16f34:	4798      	blx	r3
   16f36:	2004      	movs	r0, #4
   16f38:	4b13      	ldr	r3, [pc, #76]	; (16f88 <http_client_callback+0x134>)
   16f3a:	4798      	blx	r3
   16f3c:	1e03      	subs	r3, r0, #0
   16f3e:	d002      	beq.n	16f46 <http_client_callback+0xf2>
   16f40:	2004      	movs	r0, #4
   16f42:	4b14      	ldr	r3, [pc, #80]	; (16f94 <http_client_callback+0x140>)
   16f44:	4798      	blx	r3
   16f46:	4b14      	ldr	r3, [pc, #80]	; (16f98 <http_client_callback+0x144>)
   16f48:	4798      	blx	r3
   16f4a:	46c0      	nop			; (mov r8, r8)
   16f4c:	e003      	b.n	16f56 <http_client_callback+0x102>
   16f4e:	46c0      	nop			; (mov r8, r8)
   16f50:	e002      	b.n	16f58 <http_client_callback+0x104>
   16f52:	46c0      	nop			; (mov r8, r8)
   16f54:	e000      	b.n	16f58 <http_client_callback+0x104>
   16f56:	46c0      	nop			; (mov r8, r8)
   16f58:	46bd      	mov	sp, r7
   16f5a:	b005      	add	sp, #20
   16f5c:	bd90      	pop	{r4, r7, pc}
   16f5e:	46c0      	nop			; (mov r8, r8)
   16f60:	0003879c 	.word	0x0003879c
   16f64:	00038118 	.word	0x00038118
   16f68:	0001e991 	.word	0x0001e991
   16f6c:	00038150 	.word	0x00038150
   16f70:	00016875 	.word	0x00016875
   16f74:	0003817c 	.word	0x0003817c
   16f78:	20000888 	.word	0x20000888
   16f7c:	2000088c 	.word	0x2000088c
   16f80:	00016c81 	.word	0x00016c81
   16f84:	000381b8 	.word	0x000381b8
   16f88:	0001689d 	.word	0x0001689d
   16f8c:	20000864 	.word	0x20000864
   16f90:	0002efcd 	.word	0x0002efcd
   16f94:	00016841 	.word	0x00016841
   16f98:	00016bc5 	.word	0x00016bc5

00016f9c <socket_cb>:
   16f9c:	b580      	push	{r7, lr}
   16f9e:	b082      	sub	sp, #8
   16fa0:	af00      	add	r7, sp, #0
   16fa2:	603a      	str	r2, [r7, #0]
   16fa4:	1dfb      	adds	r3, r7, #7
   16fa6:	1c02      	adds	r2, r0, #0
   16fa8:	701a      	strb	r2, [r3, #0]
   16faa:	1dbb      	adds	r3, r7, #6
   16fac:	1c0a      	adds	r2, r1, #0
   16fae:	701a      	strb	r2, [r3, #0]
   16fb0:	683a      	ldr	r2, [r7, #0]
   16fb2:	1dbb      	adds	r3, r7, #6
   16fb4:	7819      	ldrb	r1, [r3, #0]
   16fb6:	1dfb      	adds	r3, r7, #7
   16fb8:	781b      	ldrb	r3, [r3, #0]
   16fba:	b25b      	sxtb	r3, r3
   16fbc:	0018      	movs	r0, r3
   16fbe:	4b03      	ldr	r3, [pc, #12]	; (16fcc <socket_cb+0x30>)
   16fc0:	4798      	blx	r3
   16fc2:	46c0      	nop			; (mov r8, r8)
   16fc4:	46bd      	mov	sp, r7
   16fc6:	b002      	add	sp, #8
   16fc8:	bd80      	pop	{r7, pc}
   16fca:	46c0      	nop			; (mov r8, r8)
   16fcc:	00031931 	.word	0x00031931

00016fd0 <resolve_cb>:
   16fd0:	b5b0      	push	{r4, r5, r7, lr}
   16fd2:	b086      	sub	sp, #24
   16fd4:	af04      	add	r7, sp, #16
   16fd6:	6078      	str	r0, [r7, #4]
   16fd8:	6039      	str	r1, [r7, #0]
   16fda:	683b      	ldr	r3, [r7, #0]
   16fdc:	22ff      	movs	r2, #255	; 0xff
   16fde:	4013      	ands	r3, r2
   16fe0:	001c      	movs	r4, r3
   16fe2:	683b      	ldr	r3, [r7, #0]
   16fe4:	0a1b      	lsrs	r3, r3, #8
   16fe6:	001a      	movs	r2, r3
   16fe8:	23ff      	movs	r3, #255	; 0xff
   16fea:	4013      	ands	r3, r2
   16fec:	683a      	ldr	r2, [r7, #0]
   16fee:	0c12      	lsrs	r2, r2, #16
   16ff0:	0011      	movs	r1, r2
   16ff2:	22ff      	movs	r2, #255	; 0xff
   16ff4:	400a      	ands	r2, r1
   16ff6:	6839      	ldr	r1, [r7, #0]
   16ff8:	0e09      	lsrs	r1, r1, #24
   16ffa:	000d      	movs	r5, r1
   16ffc:	6878      	ldr	r0, [r7, #4]
   16ffe:	4909      	ldr	r1, [pc, #36]	; (17024 <resolve_cb+0x54>)
   17000:	9502      	str	r5, [sp, #8]
   17002:	9201      	str	r2, [sp, #4]
   17004:	9300      	str	r3, [sp, #0]
   17006:	0023      	movs	r3, r4
   17008:	0002      	movs	r2, r0
   1700a:	2001      	movs	r0, #1
   1700c:	4c06      	ldr	r4, [pc, #24]	; (17028 <resolve_cb+0x58>)
   1700e:	47a0      	blx	r4
   17010:	683a      	ldr	r2, [r7, #0]
   17012:	687b      	ldr	r3, [r7, #4]
   17014:	0011      	movs	r1, r2
   17016:	0018      	movs	r0, r3
   17018:	4b04      	ldr	r3, [pc, #16]	; (1702c <resolve_cb+0x5c>)
   1701a:	4798      	blx	r3
   1701c:	46c0      	nop			; (mov r8, r8)
   1701e:	46bd      	mov	sp, r7
   17020:	b002      	add	sp, #8
   17022:	bdb0      	pop	{r4, r5, r7, pc}
   17024:	000381e8 	.word	0x000381e8
   17028:	0001e991 	.word	0x0001e991
   1702c:	00031a95 	.word	0x00031a95

00017030 <wifi_cb>:
   17030:	b590      	push	{r4, r7, lr}
   17032:	b087      	sub	sp, #28
   17034:	af02      	add	r7, sp, #8
   17036:	0002      	movs	r2, r0
   17038:	6039      	str	r1, [r7, #0]
   1703a:	1dfb      	adds	r3, r7, #7
   1703c:	701a      	strb	r2, [r3, #0]
   1703e:	1dfb      	adds	r3, r7, #7
   17040:	781b      	ldrb	r3, [r3, #0]
   17042:	2b2c      	cmp	r3, #44	; 0x2c
   17044:	d002      	beq.n	1704c <wifi_cb+0x1c>
   17046:	2b32      	cmp	r3, #50	; 0x32
   17048:	d03d      	beq.n	170c6 <wifi_cb+0x96>
   1704a:	e06f      	b.n	1712c <wifi_cb+0xfc>
   1704c:	683b      	ldr	r3, [r7, #0]
   1704e:	60fb      	str	r3, [r7, #12]
   17050:	68fb      	ldr	r3, [r7, #12]
   17052:	781b      	ldrb	r3, [r3, #0]
   17054:	2b01      	cmp	r3, #1
   17056:	d107      	bne.n	17068 <wifi_cb+0x38>
   17058:	4b36      	ldr	r3, [pc, #216]	; (17134 <wifi_cb+0x104>)
   1705a:	0019      	movs	r1, r3
   1705c:	2001      	movs	r0, #1
   1705e:	4b36      	ldr	r3, [pc, #216]	; (17138 <wifi_cb+0x108>)
   17060:	4798      	blx	r3
   17062:	4b36      	ldr	r3, [pc, #216]	; (1713c <wifi_cb+0x10c>)
   17064:	4798      	blx	r3
   17066:	e05e      	b.n	17126 <wifi_cb+0xf6>
   17068:	68fb      	ldr	r3, [r7, #12]
   1706a:	781b      	ldrb	r3, [r3, #0]
   1706c:	2b00      	cmp	r3, #0
   1706e:	d15a      	bne.n	17126 <wifi_cb+0xf6>
   17070:	4b33      	ldr	r3, [pc, #204]	; (17140 <wifi_cb+0x110>)
   17072:	0019      	movs	r1, r3
   17074:	2001      	movs	r0, #1
   17076:	4b30      	ldr	r3, [pc, #192]	; (17138 <wifi_cb+0x108>)
   17078:	4798      	blx	r3
   1707a:	2002      	movs	r0, #2
   1707c:	4b31      	ldr	r3, [pc, #196]	; (17144 <wifi_cb+0x114>)
   1707e:	4798      	blx	r3
   17080:	2008      	movs	r0, #8
   17082:	4b31      	ldr	r3, [pc, #196]	; (17148 <wifi_cb+0x118>)
   17084:	4798      	blx	r3
   17086:	1e03      	subs	r3, r0, #0
   17088:	d006      	beq.n	17098 <wifi_cb+0x68>
   1708a:	4b30      	ldr	r3, [pc, #192]	; (1714c <wifi_cb+0x11c>)
   1708c:	0018      	movs	r0, r3
   1708e:	4b30      	ldr	r3, [pc, #192]	; (17150 <wifi_cb+0x120>)
   17090:	4798      	blx	r3
   17092:	2008      	movs	r0, #8
   17094:	4b2b      	ldr	r3, [pc, #172]	; (17144 <wifi_cb+0x114>)
   17096:	4798      	blx	r3
   17098:	2004      	movs	r0, #4
   1709a:	4b2b      	ldr	r3, [pc, #172]	; (17148 <wifi_cb+0x118>)
   1709c:	4798      	blx	r3
   1709e:	1e03      	subs	r3, r0, #0
   170a0:	d002      	beq.n	170a8 <wifi_cb+0x78>
   170a2:	2004      	movs	r0, #4
   170a4:	4b27      	ldr	r3, [pc, #156]	; (17144 <wifi_cb+0x114>)
   170a6:	4798      	blx	r3
   170a8:	4b2a      	ldr	r3, [pc, #168]	; (17154 <wifi_cb+0x124>)
   170aa:	2101      	movs	r1, #1
   170ac:	0018      	movs	r0, r3
   170ae:	4b2a      	ldr	r3, [pc, #168]	; (17158 <wifi_cb+0x128>)
   170b0:	4798      	blx	r3
   170b2:	4a2a      	ldr	r2, [pc, #168]	; (1715c <wifi_cb+0x12c>)
   170b4:	482a      	ldr	r0, [pc, #168]	; (17160 <wifi_cb+0x130>)
   170b6:	23ff      	movs	r3, #255	; 0xff
   170b8:	9300      	str	r3, [sp, #0]
   170ba:	0013      	movs	r3, r2
   170bc:	2202      	movs	r2, #2
   170be:	2102      	movs	r1, #2
   170c0:	4c28      	ldr	r4, [pc, #160]	; (17164 <wifi_cb+0x134>)
   170c2:	47a0      	blx	r4
   170c4:	e02f      	b.n	17126 <wifi_cb+0xf6>
   170c6:	683b      	ldr	r3, [r7, #0]
   170c8:	60bb      	str	r3, [r7, #8]
   170ca:	68bb      	ldr	r3, [r7, #8]
   170cc:	781b      	ldrb	r3, [r3, #0]
   170ce:	0018      	movs	r0, r3
   170d0:	68bb      	ldr	r3, [r7, #8]
   170d2:	3301      	adds	r3, #1
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	001c      	movs	r4, r3
   170d8:	68bb      	ldr	r3, [r7, #8]
   170da:	3302      	adds	r3, #2
   170dc:	781b      	ldrb	r3, [r3, #0]
   170de:	001a      	movs	r2, r3
   170e0:	68bb      	ldr	r3, [r7, #8]
   170e2:	3303      	adds	r3, #3
   170e4:	781b      	ldrb	r3, [r3, #0]
   170e6:	4920      	ldr	r1, [pc, #128]	; (17168 <wifi_cb+0x138>)
   170e8:	9301      	str	r3, [sp, #4]
   170ea:	9200      	str	r2, [sp, #0]
   170ec:	0023      	movs	r3, r4
   170ee:	0002      	movs	r2, r0
   170f0:	2001      	movs	r0, #1
   170f2:	4c11      	ldr	r4, [pc, #68]	; (17138 <wifi_cb+0x108>)
   170f4:	47a0      	blx	r4
   170f6:	2002      	movs	r0, #2
   170f8:	4b1c      	ldr	r3, [pc, #112]	; (1716c <wifi_cb+0x13c>)
   170fa:	4798      	blx	r3
   170fc:	4b1c      	ldr	r3, [pc, #112]	; (17170 <wifi_cb+0x140>)
   170fe:	781b      	ldrb	r3, [r3, #0]
   17100:	2b01      	cmp	r3, #1
   17102:	d102      	bne.n	1710a <wifi_cb+0xda>
   17104:	4b1b      	ldr	r3, [pc, #108]	; (17174 <wifi_cb+0x144>)
   17106:	4798      	blx	r3
   17108:	e00f      	b.n	1712a <wifi_cb+0xfa>
   1710a:	4a1b      	ldr	r2, [pc, #108]	; (17178 <wifi_cb+0x148>)
   1710c:	4b11      	ldr	r3, [pc, #68]	; (17154 <wifi_cb+0x124>)
   1710e:	0011      	movs	r1, r2
   17110:	0018      	movs	r0, r3
   17112:	4b1a      	ldr	r3, [pc, #104]	; (1717c <wifi_cb+0x14c>)
   17114:	4798      	blx	r3
   17116:	1e03      	subs	r3, r0, #0
   17118:	d007      	beq.n	1712a <wifi_cb+0xfa>
   1711a:	4b19      	ldr	r3, [pc, #100]	; (17180 <wifi_cb+0x150>)
   1711c:	0019      	movs	r1, r3
   1711e:	2001      	movs	r0, #1
   17120:	4b05      	ldr	r3, [pc, #20]	; (17138 <wifi_cb+0x108>)
   17122:	4798      	blx	r3
   17124:	e001      	b.n	1712a <wifi_cb+0xfa>
   17126:	46c0      	nop			; (mov r8, r8)
   17128:	e000      	b.n	1712c <wifi_cb+0xfc>
   1712a:	46c0      	nop			; (mov r8, r8)
   1712c:	46c0      	nop			; (mov r8, r8)
   1712e:	46bd      	mov	sp, r7
   17130:	b005      	add	sp, #20
   17132:	bd90      	pop	{r4, r7, pc}
   17134:	00038218 	.word	0x00038218
   17138:	0001e991 	.word	0x0001e991
   1713c:	00022fd5 	.word	0x00022fd5
   17140:	00038238 	.word	0x00038238
   17144:	00016841 	.word	0x00016841
   17148:	0001689d 	.word	0x0001689d
   1714c:	20000864 	.word	0x20000864
   17150:	0002efcd 	.word	0x0002efcd
   17154:	20000890 	.word	0x20000890
   17158:	000305dd 	.word	0x000305dd
   1715c:	0003825c 	.word	0x0003825c
   17160:	00038268 	.word	0x00038268
   17164:	00022b01 	.word	0x00022b01
   17168:	0003826c 	.word	0x0003826c
   1716c:	00016875 	.word	0x00016875
   17170:	20000630 	.word	0x20000630
   17174:	00016bc5 	.word	0x00016bc5
   17178:	00037e9c 	.word	0x00037e9c
   1717c:	000304a9 	.word	0x000304a9
   17180:	00038294 	.word	0x00038294

00017184 <init_storage>:
   17184:	b590      	push	{r4, r7, lr}
   17186:	b083      	sub	sp, #12
   17188:	af00      	add	r7, sp, #0
   1718a:	4b29      	ldr	r3, [pc, #164]	; (17230 <init_storage+0xac>)
   1718c:	4798      	blx	r3
   1718e:	4b29      	ldr	r3, [pc, #164]	; (17234 <init_storage+0xb0>)
   17190:	0019      	movs	r1, r3
   17192:	2001      	movs	r0, #1
   17194:	4b28      	ldr	r3, [pc, #160]	; (17238 <init_storage+0xb4>)
   17196:	4798      	blx	r3
   17198:	1dfc      	adds	r4, r7, #7
   1719a:	2000      	movs	r0, #0
   1719c:	4b27      	ldr	r3, [pc, #156]	; (1723c <init_storage+0xb8>)
   1719e:	4798      	blx	r3
   171a0:	0003      	movs	r3, r0
   171a2:	7023      	strb	r3, [r4, #0]
   171a4:	1dfb      	adds	r3, r7, #7
   171a6:	781b      	ldrb	r3, [r3, #0]
   171a8:	2b01      	cmp	r3, #1
   171aa:	d110      	bne.n	171ce <init_storage+0x4a>
   171ac:	4b24      	ldr	r3, [pc, #144]	; (17240 <init_storage+0xbc>)
   171ae:	0019      	movs	r1, r3
   171b0:	2001      	movs	r0, #1
   171b2:	4b21      	ldr	r3, [pc, #132]	; (17238 <init_storage+0xb4>)
   171b4:	4798      	blx	r3
   171b6:	4b23      	ldr	r3, [pc, #140]	; (17244 <init_storage+0xc0>)
   171b8:	0019      	movs	r1, r3
   171ba:	2001      	movs	r0, #1
   171bc:	4b1e      	ldr	r3, [pc, #120]	; (17238 <init_storage+0xb4>)
   171be:	4798      	blx	r3
   171c0:	46c0      	nop			; (mov r8, r8)
   171c2:	2000      	movs	r0, #0
   171c4:	4b20      	ldr	r3, [pc, #128]	; (17248 <init_storage+0xc4>)
   171c6:	4798      	blx	r3
   171c8:	0003      	movs	r3, r0
   171ca:	2b02      	cmp	r3, #2
   171cc:	d1f9      	bne.n	171c2 <init_storage+0x3e>
   171ce:	1dfb      	adds	r3, r7, #7
   171d0:	781b      	ldrb	r3, [r3, #0]
   171d2:	2b00      	cmp	r3, #0
   171d4:	d1e0      	bne.n	17198 <init_storage+0x14>
   171d6:	4b1d      	ldr	r3, [pc, #116]	; (1724c <init_storage+0xc8>)
   171d8:	0019      	movs	r1, r3
   171da:	2001      	movs	r0, #1
   171dc:	4b16      	ldr	r3, [pc, #88]	; (17238 <init_storage+0xb4>)
   171de:	4798      	blx	r3
   171e0:	238c      	movs	r3, #140	; 0x8c
   171e2:	009a      	lsls	r2, r3, #2
   171e4:	4b1a      	ldr	r3, [pc, #104]	; (17250 <init_storage+0xcc>)
   171e6:	2100      	movs	r1, #0
   171e8:	0018      	movs	r0, r3
   171ea:	4b1a      	ldr	r3, [pc, #104]	; (17254 <init_storage+0xd0>)
   171ec:	4798      	blx	r3
   171ee:	1dbc      	adds	r4, r7, #6
   171f0:	4b17      	ldr	r3, [pc, #92]	; (17250 <init_storage+0xcc>)
   171f2:	0019      	movs	r1, r3
   171f4:	2000      	movs	r0, #0
   171f6:	4b18      	ldr	r3, [pc, #96]	; (17258 <init_storage+0xd4>)
   171f8:	4798      	blx	r3
   171fa:	0003      	movs	r3, r0
   171fc:	7023      	strb	r3, [r4, #0]
   171fe:	1dbb      	adds	r3, r7, #6
   17200:	781b      	ldrb	r3, [r3, #0]
   17202:	2b0b      	cmp	r3, #11
   17204:	d107      	bne.n	17216 <init_storage+0x92>
   17206:	1dbb      	adds	r3, r7, #6
   17208:	781a      	ldrb	r2, [r3, #0]
   1720a:	4b14      	ldr	r3, [pc, #80]	; (1725c <init_storage+0xd8>)
   1720c:	0019      	movs	r1, r3
   1720e:	2001      	movs	r0, #1
   17210:	4b09      	ldr	r3, [pc, #36]	; (17238 <init_storage+0xb4>)
   17212:	4798      	blx	r3
   17214:	e008      	b.n	17228 <init_storage+0xa4>
   17216:	4b12      	ldr	r3, [pc, #72]	; (17260 <init_storage+0xdc>)
   17218:	0019      	movs	r1, r3
   1721a:	2001      	movs	r0, #1
   1721c:	4b06      	ldr	r3, [pc, #24]	; (17238 <init_storage+0xb4>)
   1721e:	4798      	blx	r3
   17220:	2001      	movs	r0, #1
   17222:	4b10      	ldr	r3, [pc, #64]	; (17264 <init_storage+0xe0>)
   17224:	4798      	blx	r3
   17226:	46c0      	nop			; (mov r8, r8)
   17228:	46bd      	mov	sp, r7
   1722a:	b003      	add	sp, #12
   1722c:	bd90      	pop	{r4, r7, pc}
   1722e:	46c0      	nop			; (mov r8, r8)
   17230:	0001f7a9 	.word	0x0001f7a9
   17234:	000382b8 	.word	0x000382b8
   17238:	0001e991 	.word	0x0001e991
   1723c:	0001fc85 	.word	0x0001fc85
   17240:	000382f0 	.word	0x000382f0
   17244:	00038318 	.word	0x00038318
   17248:	0001f7f9 	.word	0x0001f7f9
   1724c:	0003834c 	.word	0x0003834c
   17250:	20000634 	.word	0x20000634
   17254:	00036203 	.word	0x00036203
   17258:	0002e575 	.word	0x0002e575
   1725c:	00038370 	.word	0x00038370
   17260:	000383a0 	.word	0x000383a0
   17264:	00016875 	.word	0x00016875

00017268 <configure_timer>:
   17268:	b580      	push	{r7, lr}
   1726a:	b082      	sub	sp, #8
   1726c:	af00      	add	r7, sp, #0
   1726e:	1d3b      	adds	r3, r7, #4
   17270:	0018      	movs	r0, r3
   17272:	4b08      	ldr	r3, [pc, #32]	; (17294 <configure_timer+0x2c>)
   17274:	4798      	blx	r3
   17276:	1d3a      	adds	r2, r7, #4
   17278:	4b07      	ldr	r3, [pc, #28]	; (17298 <configure_timer+0x30>)
   1727a:	0011      	movs	r1, r2
   1727c:	0018      	movs	r0, r3
   1727e:	4b07      	ldr	r3, [pc, #28]	; (1729c <configure_timer+0x34>)
   17280:	4798      	blx	r3
   17282:	4b05      	ldr	r3, [pc, #20]	; (17298 <configure_timer+0x30>)
   17284:	0018      	movs	r0, r3
   17286:	4b06      	ldr	r3, [pc, #24]	; (172a0 <configure_timer+0x38>)
   17288:	4798      	blx	r3
   1728a:	46c0      	nop			; (mov r8, r8)
   1728c:	46bd      	mov	sp, r7
   1728e:	b002      	add	sp, #8
   17290:	bd80      	pop	{r7, pc}
   17292:	46c0      	nop			; (mov r8, r8)
   17294:	000330c5 	.word	0x000330c5
   17298:	20004908 	.word	0x20004908
   1729c:	000330e9 	.word	0x000330e9
   172a0:	000331d5 	.word	0x000331d5

000172a4 <configure_http_client>:
   172a4:	b580      	push	{r7, lr}
   172a6:	b088      	sub	sp, #32
   172a8:	af00      	add	r7, sp, #0
   172aa:	003b      	movs	r3, r7
   172ac:	0018      	movs	r0, r3
   172ae:	4b12      	ldr	r3, [pc, #72]	; (172f8 <configure_http_client+0x54>)
   172b0:	4798      	blx	r3
   172b2:	003b      	movs	r3, r7
   172b4:	2280      	movs	r2, #128	; 0x80
   172b6:	0092      	lsls	r2, r2, #2
   172b8:	611a      	str	r2, [r3, #16]
   172ba:	003b      	movs	r3, r7
   172bc:	4a0f      	ldr	r2, [pc, #60]	; (172fc <configure_http_client+0x58>)
   172be:	605a      	str	r2, [r3, #4]
   172c0:	003a      	movs	r2, r7
   172c2:	4b0f      	ldr	r3, [pc, #60]	; (17300 <configure_http_client+0x5c>)
   172c4:	0011      	movs	r1, r2
   172c6:	0018      	movs	r0, r3
   172c8:	4b0e      	ldr	r3, [pc, #56]	; (17304 <configure_http_client+0x60>)
   172ca:	4798      	blx	r3
   172cc:	0003      	movs	r3, r0
   172ce:	61fb      	str	r3, [r7, #28]
   172d0:	69fb      	ldr	r3, [r7, #28]
   172d2:	2b00      	cmp	r3, #0
   172d4:	da06      	bge.n	172e4 <configure_http_client+0x40>
   172d6:	69fa      	ldr	r2, [r7, #28]
   172d8:	4b0b      	ldr	r3, [pc, #44]	; (17308 <configure_http_client+0x64>)
   172da:	0019      	movs	r1, r3
   172dc:	2001      	movs	r0, #1
   172de:	4b0b      	ldr	r3, [pc, #44]	; (1730c <configure_http_client+0x68>)
   172e0:	4798      	blx	r3
   172e2:	e7fe      	b.n	172e2 <configure_http_client+0x3e>
   172e4:	4a0a      	ldr	r2, [pc, #40]	; (17310 <configure_http_client+0x6c>)
   172e6:	4b06      	ldr	r3, [pc, #24]	; (17300 <configure_http_client+0x5c>)
   172e8:	0011      	movs	r1, r2
   172ea:	0018      	movs	r0, r3
   172ec:	4b09      	ldr	r3, [pc, #36]	; (17314 <configure_http_client+0x70>)
   172ee:	4798      	blx	r3
   172f0:	46c0      	nop			; (mov r8, r8)
   172f2:	46bd      	mov	sp, r7
   172f4:	b008      	add	sp, #32
   172f6:	bd80      	pop	{r7, pc}
   172f8:	00031759 	.word	0x00031759
   172fc:	20004908 	.word	0x20004908
   17300:	20004960 	.word	0x20004960
   17304:	000317a5 	.word	0x000317a5
   17308:	000383c4 	.word	0x000383c4
   1730c:	0001e991 	.word	0x0001e991
   17310:	00016e55 	.word	0x00016e55
   17314:	00031891 	.word	0x00031891

00017318 <socket_event_handler>:
   17318:	b580      	push	{r7, lr}
   1731a:	b082      	sub	sp, #8
   1731c:	af00      	add	r7, sp, #0
   1731e:	603a      	str	r2, [r7, #0]
   17320:	1dfb      	adds	r3, r7, #7
   17322:	1c02      	adds	r2, r0, #0
   17324:	701a      	strb	r2, [r3, #0]
   17326:	1dbb      	adds	r3, r7, #6
   17328:	1c0a      	adds	r2, r1, #0
   1732a:	701a      	strb	r2, [r3, #0]
   1732c:	683a      	ldr	r2, [r7, #0]
   1732e:	1dbb      	adds	r3, r7, #6
   17330:	7819      	ldrb	r1, [r3, #0]
   17332:	1dfb      	adds	r3, r7, #7
   17334:	781b      	ldrb	r3, [r3, #0]
   17336:	b25b      	sxtb	r3, r3
   17338:	0018      	movs	r0, r3
   1733a:	4b03      	ldr	r3, [pc, #12]	; (17348 <socket_event_handler+0x30>)
   1733c:	4798      	blx	r3
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	46bd      	mov	sp, r7
   17342:	b002      	add	sp, #8
   17344:	bd80      	pop	{r7, pc}
   17346:	46c0      	nop			; (mov r8, r8)
   17348:	00030451 	.word	0x00030451

0001734c <socket_resolve_handler>:
   1734c:	b580      	push	{r7, lr}
   1734e:	b082      	sub	sp, #8
   17350:	af00      	add	r7, sp, #0
   17352:	6078      	str	r0, [r7, #4]
   17354:	6039      	str	r1, [r7, #0]
   17356:	683a      	ldr	r2, [r7, #0]
   17358:	687b      	ldr	r3, [r7, #4]
   1735a:	0011      	movs	r1, r2
   1735c:	0018      	movs	r0, r3
   1735e:	4b03      	ldr	r3, [pc, #12]	; (1736c <socket_resolve_handler+0x20>)
   17360:	4798      	blx	r3
   17362:	46c0      	nop			; (mov r8, r8)
   17364:	46bd      	mov	sp, r7
   17366:	b002      	add	sp, #8
   17368:	bd80      	pop	{r7, pc}
   1736a:	46c0      	nop			; (mov r8, r8)
   1736c:	00030485 	.word	0x00030485

00017370 <SubscribeHandlerLedTopic>:
   17370:	b590      	push	{r4, r7, lr}
   17372:	b089      	sub	sp, #36	; 0x24
   17374:	af02      	add	r7, sp, #8
   17376:	6078      	str	r0, [r7, #4]
   17378:	2310      	movs	r3, #16
   1737a:	18fb      	adds	r3, r7, r3
   1737c:	2200      	movs	r2, #0
   1737e:	701a      	strb	r2, [r3, #0]
   17380:	2310      	movs	r3, #16
   17382:	18fb      	adds	r3, r7, r3
   17384:	2200      	movs	r2, #0
   17386:	705a      	strb	r2, [r3, #1]
   17388:	2310      	movs	r3, #16
   1738a:	18fb      	adds	r3, r7, r3
   1738c:	2200      	movs	r2, #0
   1738e:	709a      	strb	r2, [r3, #2]
   17390:	687b      	ldr	r3, [r7, #4]
   17392:	685b      	ldr	r3, [r3, #4]
   17394:	685a      	ldr	r2, [r3, #4]
   17396:	687b      	ldr	r3, [r7, #4]
   17398:	685b      	ldr	r3, [r3, #4]
   1739a:	689b      	ldr	r3, [r3, #8]
   1739c:	492a      	ldr	r1, [pc, #168]	; (17448 <SubscribeHandlerLedTopic+0xd8>)
   1739e:	2001      	movs	r0, #1
   173a0:	4c2a      	ldr	r4, [pc, #168]	; (1744c <SubscribeHandlerLedTopic+0xdc>)
   173a2:	47a0      	blx	r4
   173a4:	687b      	ldr	r3, [r7, #4]
   173a6:	681b      	ldr	r3, [r3, #0]
   173a8:	689b      	ldr	r3, [r3, #8]
   173aa:	4929      	ldr	r1, [pc, #164]	; (17450 <SubscribeHandlerLedTopic+0xe0>)
   173ac:	2204      	movs	r2, #4
   173ae:	0018      	movs	r0, r3
   173b0:	4b28      	ldr	r3, [pc, #160]	; (17454 <SubscribeHandlerLedTopic+0xe4>)
   173b2:	4798      	blx	r3
   173b4:	1e03      	subs	r3, r0, #0
   173b6:	d143      	bne.n	17440 <SubscribeHandlerLedTopic+0xd0>
   173b8:	687b      	ldr	r3, [r7, #4]
   173ba:	681b      	ldr	r3, [r3, #0]
   173bc:	689b      	ldr	r3, [r3, #8]
   173be:	3304      	adds	r3, #4
   173c0:	60fb      	str	r3, [r7, #12]
   173c2:	2300      	movs	r3, #0
   173c4:	617b      	str	r3, [r7, #20]
   173c6:	e015      	b.n	173f4 <SubscribeHandlerLedTopic+0x84>
   173c8:	697c      	ldr	r4, [r7, #20]
   173ca:	1c63      	adds	r3, r4, #1
   173cc:	617b      	str	r3, [r7, #20]
   173ce:	68fb      	ldr	r3, [r7, #12]
   173d0:	220c      	movs	r2, #12
   173d2:	18b9      	adds	r1, r7, r2
   173d4:	220a      	movs	r2, #10
   173d6:	0018      	movs	r0, r3
   173d8:	4b1f      	ldr	r3, [pc, #124]	; (17458 <SubscribeHandlerLedTopic+0xe8>)
   173da:	4798      	blx	r3
   173dc:	0003      	movs	r3, r0
   173de:	b2da      	uxtb	r2, r3
   173e0:	2310      	movs	r3, #16
   173e2:	18fb      	adds	r3, r7, r3
   173e4:	551a      	strb	r2, [r3, r4]
   173e6:	68fb      	ldr	r3, [r7, #12]
   173e8:	781b      	ldrb	r3, [r3, #0]
   173ea:	2b2c      	cmp	r3, #44	; 0x2c
   173ec:	d10a      	bne.n	17404 <SubscribeHandlerLedTopic+0x94>
   173ee:	68fb      	ldr	r3, [r7, #12]
   173f0:	3301      	adds	r3, #1
   173f2:	60fb      	str	r3, [r7, #12]
   173f4:	697b      	ldr	r3, [r7, #20]
   173f6:	2b02      	cmp	r3, #2
   173f8:	dc05      	bgt.n	17406 <SubscribeHandlerLedTopic+0x96>
   173fa:	68fb      	ldr	r3, [r7, #12]
   173fc:	781b      	ldrb	r3, [r3, #0]
   173fe:	2b00      	cmp	r3, #0
   17400:	d1e2      	bne.n	173c8 <SubscribeHandlerLedTopic+0x58>
   17402:	e000      	b.n	17406 <SubscribeHandlerLedTopic+0x96>
   17404:	46c0      	nop			; (mov r8, r8)
   17406:	2310      	movs	r3, #16
   17408:	18fb      	adds	r3, r7, r3
   1740a:	781b      	ldrb	r3, [r3, #0]
   1740c:	001a      	movs	r2, r3
   1740e:	2310      	movs	r3, #16
   17410:	18fb      	adds	r3, r7, r3
   17412:	785b      	ldrb	r3, [r3, #1]
   17414:	0018      	movs	r0, r3
   17416:	2310      	movs	r3, #16
   17418:	18fb      	adds	r3, r7, r3
   1741a:	789b      	ldrb	r3, [r3, #2]
   1741c:	490f      	ldr	r1, [pc, #60]	; (1745c <SubscribeHandlerLedTopic+0xec>)
   1741e:	9300      	str	r3, [sp, #0]
   17420:	0003      	movs	r3, r0
   17422:	2001      	movs	r0, #1
   17424:	4c09      	ldr	r4, [pc, #36]	; (1744c <SubscribeHandlerLedTopic+0xdc>)
   17426:	47a0      	blx	r4
   17428:	2310      	movs	r3, #16
   1742a:	18fb      	adds	r3, r7, r3
   1742c:	7818      	ldrb	r0, [r3, #0]
   1742e:	2310      	movs	r3, #16
   17430:	18fb      	adds	r3, r7, r3
   17432:	7859      	ldrb	r1, [r3, #1]
   17434:	2310      	movs	r3, #16
   17436:	18fb      	adds	r3, r7, r3
   17438:	789b      	ldrb	r3, [r3, #2]
   1743a:	001a      	movs	r2, r3
   1743c:	4b08      	ldr	r3, [pc, #32]	; (17460 <SubscribeHandlerLedTopic+0xf0>)
   1743e:	4798      	blx	r3
   17440:	46c0      	nop			; (mov r8, r8)
   17442:	46bd      	mov	sp, r7
   17444:	b007      	add	sp, #28
   17446:	bd90      	pop	{r4, r7, pc}
   17448:	0003840c 	.word	0x0003840c
   1744c:	0001e991 	.word	0x0001e991
   17450:	00038414 	.word	0x00038414
   17454:	000365ad 	.word	0x000365ad
   17458:	00036759 	.word	0x00036759
   1745c:	0003841c 	.word	0x0003841c
   17460:	000166d9 	.word	0x000166d9

00017464 <SubscribeHandler>:
   17464:	b590      	push	{r4, r7, lr}
   17466:	b083      	sub	sp, #12
   17468:	af00      	add	r7, sp, #0
   1746a:	6078      	str	r0, [r7, #4]
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	685b      	ldr	r3, [r3, #4]
   17470:	685a      	ldr	r2, [r3, #4]
   17472:	687b      	ldr	r3, [r7, #4]
   17474:	685b      	ldr	r3, [r3, #4]
   17476:	689b      	ldr	r3, [r3, #8]
   17478:	4921      	ldr	r1, [pc, #132]	; (17500 <SubscribeHandler+0x9c>)
   1747a:	2001      	movs	r0, #1
   1747c:	4c21      	ldr	r4, [pc, #132]	; (17504 <SubscribeHandler+0xa0>)
   1747e:	47a0      	blx	r4
   17480:	4b21      	ldr	r3, [pc, #132]	; (17508 <SubscribeHandler+0xa4>)
   17482:	0019      	movs	r1, r3
   17484:	2001      	movs	r0, #1
   17486:	4b1f      	ldr	r3, [pc, #124]	; (17504 <SubscribeHandler+0xa0>)
   17488:	4798      	blx	r3
   1748a:	687b      	ldr	r3, [r7, #4]
   1748c:	681b      	ldr	r3, [r3, #0]
   1748e:	68da      	ldr	r2, [r3, #12]
   17490:	687b      	ldr	r3, [r7, #4]
   17492:	681b      	ldr	r3, [r3, #0]
   17494:	689b      	ldr	r3, [r3, #8]
   17496:	491d      	ldr	r1, [pc, #116]	; (1750c <SubscribeHandler+0xa8>)
   17498:	2001      	movs	r0, #1
   1749a:	4c1a      	ldr	r4, [pc, #104]	; (17504 <SubscribeHandler+0xa0>)
   1749c:	47a0      	blx	r4
   1749e:	687b      	ldr	r3, [r7, #4]
   174a0:	685b      	ldr	r3, [r3, #4]
   174a2:	6898      	ldr	r0, [r3, #8]
   174a4:	687b      	ldr	r3, [r7, #4]
   174a6:	681b      	ldr	r3, [r3, #0]
   174a8:	68da      	ldr	r2, [r3, #12]
   174aa:	4b19      	ldr	r3, [pc, #100]	; (17510 <SubscribeHandler+0xac>)
   174ac:	0019      	movs	r1, r3
   174ae:	4b19      	ldr	r3, [pc, #100]	; (17514 <SubscribeHandler+0xb0>)
   174b0:	4798      	blx	r3
   174b2:	1e03      	subs	r3, r0, #0
   174b4:	d120      	bne.n	174f8 <SubscribeHandler+0x94>
   174b6:	687b      	ldr	r3, [r7, #4]
   174b8:	681b      	ldr	r3, [r3, #0]
   174ba:	6898      	ldr	r0, [r3, #8]
   174bc:	687b      	ldr	r3, [r7, #4]
   174be:	681b      	ldr	r3, [r3, #0]
   174c0:	68da      	ldr	r2, [r3, #12]
   174c2:	4b15      	ldr	r3, [pc, #84]	; (17518 <SubscribeHandler+0xb4>)
   174c4:	0019      	movs	r1, r3
   174c6:	4b13      	ldr	r3, [pc, #76]	; (17514 <SubscribeHandler+0xb0>)
   174c8:	4798      	blx	r3
   174ca:	1e03      	subs	r3, r0, #0
   174cc:	d104      	bne.n	174d8 <SubscribeHandler+0x74>
   174ce:	2101      	movs	r1, #1
   174d0:	2017      	movs	r0, #23
   174d2:	4b12      	ldr	r3, [pc, #72]	; (1751c <SubscribeHandler+0xb8>)
   174d4:	4798      	blx	r3
   174d6:	e00f      	b.n	174f8 <SubscribeHandler+0x94>
   174d8:	687b      	ldr	r3, [r7, #4]
   174da:	681b      	ldr	r3, [r3, #0]
   174dc:	6898      	ldr	r0, [r3, #8]
   174de:	687b      	ldr	r3, [r7, #4]
   174e0:	681b      	ldr	r3, [r3, #0]
   174e2:	68da      	ldr	r2, [r3, #12]
   174e4:	4b0e      	ldr	r3, [pc, #56]	; (17520 <SubscribeHandler+0xbc>)
   174e6:	0019      	movs	r1, r3
   174e8:	4b0a      	ldr	r3, [pc, #40]	; (17514 <SubscribeHandler+0xb0>)
   174ea:	4798      	blx	r3
   174ec:	1e03      	subs	r3, r0, #0
   174ee:	d103      	bne.n	174f8 <SubscribeHandler+0x94>
   174f0:	2100      	movs	r1, #0
   174f2:	2017      	movs	r0, #23
   174f4:	4b09      	ldr	r3, [pc, #36]	; (1751c <SubscribeHandler+0xb8>)
   174f6:	4798      	blx	r3
   174f8:	46c0      	nop			; (mov r8, r8)
   174fa:	46bd      	mov	sp, r7
   174fc:	b003      	add	sp, #12
   174fe:	bd90      	pop	{r4, r7, pc}
   17500:	0003840c 	.word	0x0003840c
   17504:	0001e991 	.word	0x0001e991
   17508:	00038430 	.word	0x00038430
   1750c:	00038438 	.word	0x00038438
   17510:	00038440 	.word	0x00038440
   17514:	000365ad 	.word	0x000365ad
   17518:	00038454 	.word	0x00038454
   1751c:	000167d9 	.word	0x000167d9
   17520:	0003845c 	.word	0x0003845c

00017524 <SubscribeHandlerServo>:
   17524:	b590      	push	{r4, r7, lr}
   17526:	b083      	sub	sp, #12
   17528:	af00      	add	r7, sp, #0
   1752a:	6078      	str	r0, [r7, #4]
   1752c:	687b      	ldr	r3, [r7, #4]
   1752e:	685b      	ldr	r3, [r3, #4]
   17530:	685a      	ldr	r2, [r3, #4]
   17532:	687b      	ldr	r3, [r7, #4]
   17534:	685b      	ldr	r3, [r3, #4]
   17536:	689b      	ldr	r3, [r3, #8]
   17538:	4920      	ldr	r1, [pc, #128]	; (175bc <SubscribeHandlerServo+0x98>)
   1753a:	2001      	movs	r0, #1
   1753c:	4c20      	ldr	r4, [pc, #128]	; (175c0 <SubscribeHandlerServo+0x9c>)
   1753e:	47a0      	blx	r4
   17540:	4b20      	ldr	r3, [pc, #128]	; (175c4 <SubscribeHandlerServo+0xa0>)
   17542:	0019      	movs	r1, r3
   17544:	2001      	movs	r0, #1
   17546:	4b1e      	ldr	r3, [pc, #120]	; (175c0 <SubscribeHandlerServo+0x9c>)
   17548:	4798      	blx	r3
   1754a:	687b      	ldr	r3, [r7, #4]
   1754c:	681b      	ldr	r3, [r3, #0]
   1754e:	68da      	ldr	r2, [r3, #12]
   17550:	687b      	ldr	r3, [r7, #4]
   17552:	681b      	ldr	r3, [r3, #0]
   17554:	689b      	ldr	r3, [r3, #8]
   17556:	491c      	ldr	r1, [pc, #112]	; (175c8 <SubscribeHandlerServo+0xa4>)
   17558:	2001      	movs	r0, #1
   1755a:	4c19      	ldr	r4, [pc, #100]	; (175c0 <SubscribeHandlerServo+0x9c>)
   1755c:	47a0      	blx	r4
   1755e:	687b      	ldr	r3, [r7, #4]
   17560:	685b      	ldr	r3, [r3, #4]
   17562:	6898      	ldr	r0, [r3, #8]
   17564:	687b      	ldr	r3, [r7, #4]
   17566:	681b      	ldr	r3, [r3, #0]
   17568:	68da      	ldr	r2, [r3, #12]
   1756a:	4b18      	ldr	r3, [pc, #96]	; (175cc <SubscribeHandlerServo+0xa8>)
   1756c:	0019      	movs	r1, r3
   1756e:	4b18      	ldr	r3, [pc, #96]	; (175d0 <SubscribeHandlerServo+0xac>)
   17570:	4798      	blx	r3
   17572:	1e03      	subs	r3, r0, #0
   17574:	d11e      	bne.n	175b4 <SubscribeHandlerServo+0x90>
   17576:	687b      	ldr	r3, [r7, #4]
   17578:	681b      	ldr	r3, [r3, #0]
   1757a:	6898      	ldr	r0, [r3, #8]
   1757c:	687b      	ldr	r3, [r7, #4]
   1757e:	681b      	ldr	r3, [r3, #0]
   17580:	68da      	ldr	r2, [r3, #12]
   17582:	4b14      	ldr	r3, [pc, #80]	; (175d4 <SubscribeHandlerServo+0xb0>)
   17584:	0019      	movs	r1, r3
   17586:	4b12      	ldr	r3, [pc, #72]	; (175d0 <SubscribeHandlerServo+0xac>)
   17588:	4798      	blx	r3
   1758a:	1e03      	subs	r3, r0, #0
   1758c:	d103      	bne.n	17596 <SubscribeHandlerServo+0x72>
   1758e:	2002      	movs	r0, #2
   17590:	4b11      	ldr	r3, [pc, #68]	; (175d8 <SubscribeHandlerServo+0xb4>)
   17592:	4798      	blx	r3
   17594:	e00e      	b.n	175b4 <SubscribeHandlerServo+0x90>
   17596:	687b      	ldr	r3, [r7, #4]
   17598:	681b      	ldr	r3, [r3, #0]
   1759a:	6898      	ldr	r0, [r3, #8]
   1759c:	687b      	ldr	r3, [r7, #4]
   1759e:	681b      	ldr	r3, [r3, #0]
   175a0:	68da      	ldr	r2, [r3, #12]
   175a2:	4b0e      	ldr	r3, [pc, #56]	; (175dc <SubscribeHandlerServo+0xb8>)
   175a4:	0019      	movs	r1, r3
   175a6:	4b0a      	ldr	r3, [pc, #40]	; (175d0 <SubscribeHandlerServo+0xac>)
   175a8:	4798      	blx	r3
   175aa:	1e03      	subs	r3, r0, #0
   175ac:	d102      	bne.n	175b4 <SubscribeHandlerServo+0x90>
   175ae:	2003      	movs	r0, #3
   175b0:	4b09      	ldr	r3, [pc, #36]	; (175d8 <SubscribeHandlerServo+0xb4>)
   175b2:	4798      	blx	r3
   175b4:	46c0      	nop			; (mov r8, r8)
   175b6:	46bd      	mov	sp, r7
   175b8:	b003      	add	sp, #12
   175ba:	bd90      	pop	{r4, r7, pc}
   175bc:	0003840c 	.word	0x0003840c
   175c0:	0001e991 	.word	0x0001e991
   175c4:	00038430 	.word	0x00038430
   175c8:	00038438 	.word	0x00038438
   175cc:	00038464 	.word	0x00038464
   175d0:	000365ad 	.word	0x000365ad
   175d4:	00038454 	.word	0x00038454
   175d8:	00016549 	.word	0x00016549
   175dc:	0003845c 	.word	0x0003845c

000175e0 <mqtt_callback>:
   175e0:	b590      	push	{r4, r7, lr}
   175e2:	b08b      	sub	sp, #44	; 0x2c
   175e4:	af06      	add	r7, sp, #24
   175e6:	60f8      	str	r0, [r7, #12]
   175e8:	60b9      	str	r1, [r7, #8]
   175ea:	607a      	str	r2, [r7, #4]
   175ec:	68bb      	ldr	r3, [r7, #8]
   175ee:	2b01      	cmp	r3, #1
   175f0:	d03b      	beq.n	1766a <mqtt_callback+0x8a>
   175f2:	2b05      	cmp	r3, #5
   175f4:	d05e      	beq.n	176b4 <mqtt_callback+0xd4>
   175f6:	2b00      	cmp	r3, #0
   175f8:	d000      	beq.n	175fc <mqtt_callback+0x1c>
   175fa:	e061      	b.n	176c0 <mqtt_callback+0xe0>
   175fc:	687b      	ldr	r3, [r7, #4]
   175fe:	681b      	ldr	r3, [r3, #0]
   17600:	2b00      	cmp	r3, #0
   17602:	db25      	blt.n	17650 <mqtt_callback+0x70>
   17604:	4b30      	ldr	r3, [pc, #192]	; (176c8 <mqtt_callback+0xe8>)
   17606:	0019      	movs	r1, r3
   17608:	2001      	movs	r0, #1
   1760a:	4b30      	ldr	r3, [pc, #192]	; (176cc <mqtt_callback+0xec>)
   1760c:	4798      	blx	r3
   1760e:	4930      	ldr	r1, [pc, #192]	; (176d0 <mqtt_callback+0xf0>)
   17610:	4a30      	ldr	r2, [pc, #192]	; (176d4 <mqtt_callback+0xf4>)
   17612:	68f8      	ldr	r0, [r7, #12]
   17614:	2300      	movs	r3, #0
   17616:	9305      	str	r3, [sp, #20]
   17618:	2300      	movs	r3, #0
   1761a:	9304      	str	r3, [sp, #16]
   1761c:	2300      	movs	r3, #0
   1761e:	9303      	str	r3, [sp, #12]
   17620:	2300      	movs	r3, #0
   17622:	9302      	str	r3, [sp, #8]
   17624:	2300      	movs	r3, #0
   17626:	9301      	str	r3, [sp, #4]
   17628:	4b2a      	ldr	r3, [pc, #168]	; (176d4 <mqtt_callback+0xf4>)
   1762a:	9300      	str	r3, [sp, #0]
   1762c:	000b      	movs	r3, r1
   1762e:	2101      	movs	r1, #1
   17630:	4c29      	ldr	r4, [pc, #164]	; (176d8 <mqtt_callback+0xf8>)
   17632:	47a0      	blx	r4
   17634:	1e03      	subs	r3, r0, #0
   17636:	d005      	beq.n	17644 <mqtt_callback+0x64>
   17638:	4b28      	ldr	r3, [pc, #160]	; (176dc <mqtt_callback+0xfc>)
   1763a:	0019      	movs	r1, r3
   1763c:	2001      	movs	r0, #1
   1763e:	4b23      	ldr	r3, [pc, #140]	; (176cc <mqtt_callback+0xec>)
   17640:	4798      	blx	r3
   17642:	e03d      	b.n	176c0 <mqtt_callback+0xe0>
   17644:	4b26      	ldr	r3, [pc, #152]	; (176e0 <mqtt_callback+0x100>)
   17646:	0019      	movs	r1, r3
   17648:	2001      	movs	r0, #1
   1764a:	4b20      	ldr	r3, [pc, #128]	; (176cc <mqtt_callback+0xec>)
   1764c:	4798      	blx	r3
   1764e:	e037      	b.n	176c0 <mqtt_callback+0xe0>
   17650:	4a24      	ldr	r2, [pc, #144]	; (176e4 <mqtt_callback+0x104>)
   17652:	4b25      	ldr	r3, [pc, #148]	; (176e8 <mqtt_callback+0x108>)
   17654:	0019      	movs	r1, r3
   17656:	2001      	movs	r0, #1
   17658:	4b1c      	ldr	r3, [pc, #112]	; (176cc <mqtt_callback+0xec>)
   1765a:	4798      	blx	r3
   1765c:	4a21      	ldr	r2, [pc, #132]	; (176e4 <mqtt_callback+0x104>)
   1765e:	68fb      	ldr	r3, [r7, #12]
   17660:	0011      	movs	r1, r2
   17662:	0018      	movs	r0, r3
   17664:	4b21      	ldr	r3, [pc, #132]	; (176ec <mqtt_callback+0x10c>)
   17666:	4798      	blx	r3
   17668:	e02a      	b.n	176c0 <mqtt_callback+0xe0>
   1766a:	687b      	ldr	r3, [r7, #4]
   1766c:	781b      	ldrb	r3, [r3, #0]
   1766e:	2b00      	cmp	r3, #0
   17670:	d117      	bne.n	176a2 <mqtt_callback+0xc2>
   17672:	4b1f      	ldr	r3, [pc, #124]	; (176f0 <mqtt_callback+0x110>)
   17674:	491f      	ldr	r1, [pc, #124]	; (176f4 <mqtt_callback+0x114>)
   17676:	68f8      	ldr	r0, [r7, #12]
   17678:	2202      	movs	r2, #2
   1767a:	4c1f      	ldr	r4, [pc, #124]	; (176f8 <mqtt_callback+0x118>)
   1767c:	47a0      	blx	r4
   1767e:	4b1f      	ldr	r3, [pc, #124]	; (176fc <mqtt_callback+0x11c>)
   17680:	491c      	ldr	r1, [pc, #112]	; (176f4 <mqtt_callback+0x114>)
   17682:	68f8      	ldr	r0, [r7, #12]
   17684:	2202      	movs	r2, #2
   17686:	4c1c      	ldr	r4, [pc, #112]	; (176f8 <mqtt_callback+0x118>)
   17688:	47a0      	blx	r4
   1768a:	4b1d      	ldr	r3, [pc, #116]	; (17700 <mqtt_callback+0x120>)
   1768c:	491d      	ldr	r1, [pc, #116]	; (17704 <mqtt_callback+0x124>)
   1768e:	68f8      	ldr	r0, [r7, #12]
   17690:	2202      	movs	r2, #2
   17692:	4c19      	ldr	r4, [pc, #100]	; (176f8 <mqtt_callback+0x118>)
   17694:	47a0      	blx	r4
   17696:	4b1c      	ldr	r3, [pc, #112]	; (17708 <mqtt_callback+0x128>)
   17698:	0019      	movs	r1, r3
   1769a:	2001      	movs	r0, #1
   1769c:	4b0b      	ldr	r3, [pc, #44]	; (176cc <mqtt_callback+0xec>)
   1769e:	4798      	blx	r3
   176a0:	e00e      	b.n	176c0 <mqtt_callback+0xe0>
   176a2:	687b      	ldr	r3, [r7, #4]
   176a4:	781b      	ldrb	r3, [r3, #0]
   176a6:	001a      	movs	r2, r3
   176a8:	4b18      	ldr	r3, [pc, #96]	; (1770c <mqtt_callback+0x12c>)
   176aa:	0019      	movs	r1, r3
   176ac:	2001      	movs	r0, #1
   176ae:	4b07      	ldr	r3, [pc, #28]	; (176cc <mqtt_callback+0xec>)
   176b0:	4798      	blx	r3
   176b2:	e005      	b.n	176c0 <mqtt_callback+0xe0>
   176b4:	4b16      	ldr	r3, [pc, #88]	; (17710 <mqtt_callback+0x130>)
   176b6:	0019      	movs	r1, r3
   176b8:	2001      	movs	r0, #1
   176ba:	4b04      	ldr	r3, [pc, #16]	; (176cc <mqtt_callback+0xec>)
   176bc:	4798      	blx	r3
   176be:	46c0      	nop			; (mov r8, r8)
   176c0:	46c0      	nop			; (mov r8, r8)
   176c2:	46bd      	mov	sp, r7
   176c4:	b005      	add	sp, #20
   176c6:	bd90      	pop	{r4, r7, pc}
   176c8:	00038478 	.word	0x00038478
   176cc:	0001e991 	.word	0x0001e991
   176d0:	00038494 	.word	0x00038494
   176d4:	000384a4 	.word	0x000384a4
   176d8:	000304f1 	.word	0x000304f1
   176dc:	000384b0 	.word	0x000384b0
   176e0:	000384d8 	.word	0x000384d8
   176e4:	00037e9c 	.word	0x00037e9c
   176e8:	000384f4 	.word	0x000384f4
   176ec:	000304a9 	.word	0x000304a9
   176f0:	00017371 	.word	0x00017371
   176f4:	00038440 	.word	0x00038440
   176f8:	00030691 	.word	0x00030691
   176fc:	00017465 	.word	0x00017465
   17700:	00017525 	.word	0x00017525
   17704:	00038464 	.word	0x00038464
   17708:	0003852c 	.word	0x0003852c
   1770c:	00038540 	.word	0x00038540
   17710:	00038574 	.word	0x00038574

00017714 <configure_mqtt>:
   17714:	b580      	push	{r7, lr}
   17716:	b088      	sub	sp, #32
   17718:	af00      	add	r7, sp, #0
   1771a:	1d3b      	adds	r3, r7, #4
   1771c:	0018      	movs	r0, r3
   1771e:	4b1f      	ldr	r3, [pc, #124]	; (1779c <configure_mqtt+0x88>)
   17720:	4798      	blx	r3
   17722:	1d3b      	adds	r3, r7, #4
   17724:	4a1e      	ldr	r2, [pc, #120]	; (177a0 <configure_mqtt+0x8c>)
   17726:	609a      	str	r2, [r3, #8]
   17728:	1d3b      	adds	r3, r7, #4
   1772a:	2280      	movs	r2, #128	; 0x80
   1772c:	0092      	lsls	r2, r2, #2
   1772e:	60da      	str	r2, [r3, #12]
   17730:	1d3b      	adds	r3, r7, #4
   17732:	4a1c      	ldr	r2, [pc, #112]	; (177a4 <configure_mqtt+0x90>)
   17734:	611a      	str	r2, [r3, #16]
   17736:	1d3b      	adds	r3, r7, #4
   17738:	2280      	movs	r2, #128	; 0x80
   1773a:	0092      	lsls	r2, r2, #2
   1773c:	615a      	str	r2, [r3, #20]
   1773e:	1d3b      	adds	r3, r7, #4
   17740:	4a19      	ldr	r2, [pc, #100]	; (177a8 <configure_mqtt+0x94>)
   17742:	801a      	strh	r2, [r3, #0]
   17744:	1d3b      	adds	r3, r7, #4
   17746:	4a19      	ldr	r2, [pc, #100]	; (177ac <configure_mqtt+0x98>)
   17748:	809a      	strh	r2, [r3, #4]
   1774a:	1d3a      	adds	r2, r7, #4
   1774c:	4b18      	ldr	r3, [pc, #96]	; (177b0 <configure_mqtt+0x9c>)
   1774e:	0011      	movs	r1, r2
   17750:	0018      	movs	r0, r3
   17752:	4b18      	ldr	r3, [pc, #96]	; (177b4 <configure_mqtt+0xa0>)
   17754:	4798      	blx	r3
   17756:	0003      	movs	r3, r0
   17758:	61fb      	str	r3, [r7, #28]
   1775a:	69fb      	ldr	r3, [r7, #28]
   1775c:	2b00      	cmp	r3, #0
   1775e:	da06      	bge.n	1776e <configure_mqtt+0x5a>
   17760:	69fa      	ldr	r2, [r7, #28]
   17762:	4b15      	ldr	r3, [pc, #84]	; (177b8 <configure_mqtt+0xa4>)
   17764:	0019      	movs	r1, r3
   17766:	2001      	movs	r0, #1
   17768:	4b14      	ldr	r3, [pc, #80]	; (177bc <configure_mqtt+0xa8>)
   1776a:	4798      	blx	r3
   1776c:	e7fe      	b.n	1776c <configure_mqtt+0x58>
   1776e:	4a14      	ldr	r2, [pc, #80]	; (177c0 <configure_mqtt+0xac>)
   17770:	4b0f      	ldr	r3, [pc, #60]	; (177b0 <configure_mqtt+0x9c>)
   17772:	0011      	movs	r1, r2
   17774:	0018      	movs	r0, r3
   17776:	4b13      	ldr	r3, [pc, #76]	; (177c4 <configure_mqtt+0xb0>)
   17778:	4798      	blx	r3
   1777a:	0003      	movs	r3, r0
   1777c:	61fb      	str	r3, [r7, #28]
   1777e:	69fb      	ldr	r3, [r7, #28]
   17780:	2b00      	cmp	r3, #0
   17782:	da06      	bge.n	17792 <configure_mqtt+0x7e>
   17784:	69fa      	ldr	r2, [r7, #28]
   17786:	4b10      	ldr	r3, [pc, #64]	; (177c8 <configure_mqtt+0xb4>)
   17788:	0019      	movs	r1, r3
   1778a:	2001      	movs	r0, #1
   1778c:	4b0b      	ldr	r3, [pc, #44]	; (177bc <configure_mqtt+0xa8>)
   1778e:	4798      	blx	r3
   17790:	e7fe      	b.n	17790 <configure_mqtt+0x7c>
   17792:	46c0      	nop			; (mov r8, r8)
   17794:	46bd      	mov	sp, r7
   17796:	b008      	add	sp, #32
   17798:	bd80      	pop	{r7, pc}
   1779a:	46c0      	nop			; (mov r8, r8)
   1779c:	000303e9 	.word	0x000303e9
   177a0:	200008c8 	.word	0x200008c8
   177a4:	20000ac8 	.word	0x20000ac8
   177a8:	0000075b 	.word	0x0000075b
   177ac:	00001770 	.word	0x00001770
   177b0:	20000890 	.word	0x20000890
   177b4:	00030339 	.word	0x00030339
   177b8:	00038588 	.word	0x00038588
   177bc:	0001e991 	.word	0x0001e991
   177c0:	000175e1 	.word	0x000175e1
   177c4:	00030429 	.word	0x00030429
   177c8:	000385bc 	.word	0x000385bc

000177cc <configure_extint_channel>:
   177cc:	b580      	push	{r7, lr}
   177ce:	b084      	sub	sp, #16
   177d0:	af00      	add	r7, sp, #0
   177d2:	1d3b      	adds	r3, r7, #4
   177d4:	0018      	movs	r0, r3
   177d6:	4b0b      	ldr	r3, [pc, #44]	; (17804 <configure_extint_channel+0x38>)
   177d8:	4798      	blx	r3
   177da:	1d3b      	adds	r3, r7, #4
   177dc:	2237      	movs	r2, #55	; 0x37
   177de:	601a      	str	r2, [r3, #0]
   177e0:	1d3b      	adds	r3, r7, #4
   177e2:	2200      	movs	r2, #0
   177e4:	605a      	str	r2, [r3, #4]
   177e6:	1d3b      	adds	r3, r7, #4
   177e8:	2201      	movs	r2, #1
   177ea:	721a      	strb	r2, [r3, #8]
   177ec:	1d3b      	adds	r3, r7, #4
   177ee:	2202      	movs	r2, #2
   177f0:	72da      	strb	r2, [r3, #11]
   177f2:	1d3b      	adds	r3, r7, #4
   177f4:	0019      	movs	r1, r3
   177f6:	2007      	movs	r0, #7
   177f8:	4b03      	ldr	r3, [pc, #12]	; (17808 <configure_extint_channel+0x3c>)
   177fa:	4798      	blx	r3
   177fc:	46c0      	nop			; (mov r8, r8)
   177fe:	46bd      	mov	sp, r7
   17800:	b004      	add	sp, #16
   17802:	bd80      	pop	{r7, pc}
   17804:	000273f5 	.word	0x000273f5
   17808:	00027429 	.word	0x00027429

0001780c <configure_extint_callbacks>:
   1780c:	b580      	push	{r7, lr}
   1780e:	af00      	add	r7, sp, #0
   17810:	4b06      	ldr	r3, [pc, #24]	; (1782c <configure_extint_callbacks+0x20>)
   17812:	2200      	movs	r2, #0
   17814:	2107      	movs	r1, #7
   17816:	0018      	movs	r0, r3
   17818:	4b05      	ldr	r3, [pc, #20]	; (17830 <configure_extint_callbacks+0x24>)
   1781a:	4798      	blx	r3
   1781c:	2100      	movs	r1, #0
   1781e:	2007      	movs	r0, #7
   17820:	4b04      	ldr	r3, [pc, #16]	; (17834 <configure_extint_callbacks+0x28>)
   17822:	4798      	blx	r3
   17824:	46c0      	nop			; (mov r8, r8)
   17826:	46bd      	mov	sp, r7
   17828:	bd80      	pop	{r7, pc}
   1782a:	46c0      	nop			; (mov r8, r8)
   1782c:	00017839 	.word	0x00017839
   17830:	00026ff5 	.word	0x00026ff5
   17834:	00027059 	.word	0x00027059

00017838 <extint_detection_callback>:
   17838:	b5b0      	push	{r4, r5, r7, lr}
   1783a:	af00      	add	r7, sp, #0
   1783c:	4b0c      	ldr	r3, [pc, #48]	; (17870 <extint_detection_callback+0x38>)
   1783e:	681b      	ldr	r3, [r3, #0]
   17840:	1c5a      	adds	r2, r3, #1
   17842:	4b0b      	ldr	r3, [pc, #44]	; (17870 <extint_detection_callback+0x38>)
   17844:	601a      	str	r2, [r3, #0]
   17846:	4b0a      	ldr	r3, [pc, #40]	; (17870 <extint_detection_callback+0x38>)
   17848:	681b      	ldr	r3, [r3, #0]
   1784a:	2b28      	cmp	r3, #40	; 0x28
   1784c:	d902      	bls.n	17854 <extint_detection_callback+0x1c>
   1784e:	4b08      	ldr	r3, [pc, #32]	; (17870 <extint_detection_callback+0x38>)
   17850:	2201      	movs	r2, #1
   17852:	601a      	str	r2, [r3, #0]
   17854:	4b06      	ldr	r3, [pc, #24]	; (17870 <extint_detection_callback+0x38>)
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	4a06      	ldr	r2, [pc, #24]	; (17874 <extint_detection_callback+0x3c>)
   1785a:	4807      	ldr	r0, [pc, #28]	; (17878 <extint_detection_callback+0x40>)
   1785c:	213f      	movs	r1, #63	; 0x3f
   1785e:	4c07      	ldr	r4, [pc, #28]	; (1787c <extint_detection_callback+0x44>)
   17860:	47a0      	blx	r4
   17862:	4b07      	ldr	r3, [pc, #28]	; (17880 <extint_detection_callback+0x48>)
   17864:	2201      	movs	r2, #1
   17866:	701a      	strb	r2, [r3, #0]
   17868:	46c0      	nop			; (mov r8, r8)
   1786a:	46bd      	mov	sp, r7
   1786c:	bdb0      	pop	{r4, r5, r7, pc}
   1786e:	46c0      	nop			; (mov r8, r8)
   17870:	200000b0 	.word	0x200000b0
   17874:	000385f0 	.word	0x000385f0
   17878:	20000070 	.word	0x20000070
   1787c:	0003645d 	.word	0x0003645d
   17880:	20000cc8 	.word	0x20000cc8

00017884 <HTTP_DownloadFileInit>:
   17884:	b580      	push	{r7, lr}
   17886:	af00      	add	r7, sp, #0
   17888:	4a15      	ldr	r2, [pc, #84]	; (178e0 <HTTP_DownloadFileInit+0x5c>)
   1788a:	4b16      	ldr	r3, [pc, #88]	; (178e4 <HTTP_DownloadFileInit+0x60>)
   1788c:	0011      	movs	r1, r2
   1788e:	0018      	movs	r0, r3
   17890:	4b15      	ldr	r3, [pc, #84]	; (178e8 <HTTP_DownloadFileInit+0x64>)
   17892:	4798      	blx	r3
   17894:	1e03      	subs	r3, r0, #0
   17896:	d008      	beq.n	178aa <HTTP_DownloadFileInit+0x26>
   17898:	4b14      	ldr	r3, [pc, #80]	; (178ec <HTTP_DownloadFileInit+0x68>)
   1789a:	0019      	movs	r1, r3
   1789c:	2001      	movs	r0, #1
   1789e:	4b14      	ldr	r3, [pc, #80]	; (178f0 <HTTP_DownloadFileInit+0x6c>)
   178a0:	4798      	blx	r3
   178a2:	e002      	b.n	178aa <HTTP_DownloadFileInit+0x26>
   178a4:	2000      	movs	r0, #0
   178a6:	4b13      	ldr	r3, [pc, #76]	; (178f4 <HTTP_DownloadFileInit+0x70>)
   178a8:	4798      	blx	r3
   178aa:	4b0e      	ldr	r3, [pc, #56]	; (178e4 <HTTP_DownloadFileInit+0x60>)
   178ac:	2234      	movs	r2, #52	; 0x34
   178ae:	5c9b      	ldrb	r3, [r3, r2]
   178b0:	2b00      	cmp	r3, #0
   178b2:	d1f7      	bne.n	178a4 <HTTP_DownloadFileInit+0x20>
   178b4:	4b10      	ldr	r3, [pc, #64]	; (178f8 <HTTP_DownloadFileInit+0x74>)
   178b6:	4798      	blx	r3
   178b8:	4b10      	ldr	r3, [pc, #64]	; (178fc <HTTP_DownloadFileInit+0x78>)
   178ba:	2201      	movs	r2, #1
   178bc:	701a      	strb	r2, [r3, #0]
   178be:	4a10      	ldr	r2, [pc, #64]	; (17900 <HTTP_DownloadFileInit+0x7c>)
   178c0:	4b10      	ldr	r3, [pc, #64]	; (17904 <HTTP_DownloadFileInit+0x80>)
   178c2:	0011      	movs	r1, r2
   178c4:	0018      	movs	r0, r3
   178c6:	4b10      	ldr	r3, [pc, #64]	; (17908 <HTTP_DownloadFileInit+0x84>)
   178c8:	4798      	blx	r3
   178ca:	4b10      	ldr	r3, [pc, #64]	; (1790c <HTTP_DownloadFileInit+0x88>)
   178cc:	4798      	blx	r3
   178ce:	4b10      	ldr	r3, [pc, #64]	; (17910 <HTTP_DownloadFileInit+0x8c>)
   178d0:	4798      	blx	r3
   178d2:	4b10      	ldr	r3, [pc, #64]	; (17914 <HTTP_DownloadFileInit+0x90>)
   178d4:	2203      	movs	r2, #3
   178d6:	701a      	strb	r2, [r3, #0]
   178d8:	46c0      	nop			; (mov r8, r8)
   178da:	46bd      	mov	sp, r7
   178dc:	bd80      	pop	{r7, pc}
   178de:	46c0      	nop			; (mov r8, r8)
   178e0:	00037e9c 	.word	0x00037e9c
   178e4:	20000890 	.word	0x20000890
   178e8:	000305dd 	.word	0x000305dd
   178ec:	00038294 	.word	0x00038294
   178f0:	0001e991 	.word	0x0001e991
   178f4:	00022ae5 	.word	0x00022ae5
   178f8:	000260a1 	.word	0x000260a1
   178fc:	20000630 	.word	0x20000630
   17900:	00016fd1 	.word	0x00016fd1
   17904:	00016f9d 	.word	0x00016f9d
   17908:	000260e9 	.word	0x000260e9
   1790c:	00026051 	.word	0x00026051
   17910:	00016bc5 	.word	0x00016bc5
   17914:	2000061a 	.word	0x2000061a

00017918 <HTTP_DownloadFileTransaction>:
   17918:	b590      	push	{r4, r7, lr}
   1791a:	b085      	sub	sp, #20
   1791c:	af00      	add	r7, sp, #0
   1791e:	e009      	b.n	17934 <HTTP_DownloadFileTransaction+0x1c>
   17920:	2000      	movs	r0, #0
   17922:	4b30      	ldr	r3, [pc, #192]	; (179e4 <HTTP_DownloadFileTransaction+0xcc>)
   17924:	4798      	blx	r3
   17926:	4b30      	ldr	r3, [pc, #192]	; (179e8 <HTTP_DownloadFileTransaction+0xd0>)
   17928:	0018      	movs	r0, r3
   1792a:	4b30      	ldr	r3, [pc, #192]	; (179ec <HTTP_DownloadFileTransaction+0xd4>)
   1792c:	4798      	blx	r3
   1792e:	2005      	movs	r0, #5
   17930:	4b2f      	ldr	r3, [pc, #188]	; (179f0 <HTTP_DownloadFileTransaction+0xd8>)
   17932:	4798      	blx	r3
   17934:	2010      	movs	r0, #16
   17936:	4b2f      	ldr	r3, [pc, #188]	; (179f4 <HTTP_DownloadFileTransaction+0xdc>)
   17938:	4798      	blx	r3
   1793a:	0003      	movs	r3, r0
   1793c:	001a      	movs	r2, r3
   1793e:	2301      	movs	r3, #1
   17940:	4053      	eors	r3, r2
   17942:	b2db      	uxtb	r3, r3
   17944:	2b00      	cmp	r3, #0
   17946:	d009      	beq.n	1795c <HTTP_DownloadFileTransaction+0x44>
   17948:	2020      	movs	r0, #32
   1794a:	4b2a      	ldr	r3, [pc, #168]	; (179f4 <HTTP_DownloadFileTransaction+0xdc>)
   1794c:	4798      	blx	r3
   1794e:	0003      	movs	r3, r0
   17950:	001a      	movs	r2, r3
   17952:	2301      	movs	r3, #1
   17954:	4053      	eors	r3, r2
   17956:	b2db      	uxtb	r3, r3
   17958:	2b00      	cmp	r3, #0
   1795a:	d1e1      	bne.n	17920 <HTTP_DownloadFileTransaction+0x8>
   1795c:	4b26      	ldr	r3, [pc, #152]	; (179f8 <HTTP_DownloadFileTransaction+0xe0>)
   1795e:	4798      	blx	r3
   17960:	23fa      	movs	r3, #250	; 0xfa
   17962:	009b      	lsls	r3, r3, #2
   17964:	0018      	movs	r0, r3
   17966:	4b22      	ldr	r3, [pc, #136]	; (179f0 <HTTP_DownloadFileTransaction+0xd8>)
   17968:	4798      	blx	r3
   1796a:	4b24      	ldr	r3, [pc, #144]	; (179fc <HTTP_DownloadFileTransaction+0xe4>)
   1796c:	2200      	movs	r2, #0
   1796e:	701a      	strb	r2, [r3, #0]
   17970:	003b      	movs	r3, r7
   17972:	4a23      	ldr	r2, [pc, #140]	; (17a00 <HTTP_DownloadFileTransaction+0xe8>)
   17974:	ca13      	ldmia	r2!, {r0, r1, r4}
   17976:	c313      	stmia	r3!, {r0, r1, r4}
   17978:	003b      	movs	r3, r7
   1797a:	2230      	movs	r2, #48	; 0x30
   1797c:	701a      	strb	r2, [r3, #0]
   1797e:	230f      	movs	r3, #15
   17980:	18fc      	adds	r4, r7, r3
   17982:	0039      	movs	r1, r7
   17984:	4b1f      	ldr	r3, [pc, #124]	; (17a04 <HTTP_DownloadFileTransaction+0xec>)
   17986:	220a      	movs	r2, #10
   17988:	0018      	movs	r0, r3
   1798a:	4b1f      	ldr	r3, [pc, #124]	; (17a08 <HTTP_DownloadFileTransaction+0xf0>)
   1798c:	4798      	blx	r3
   1798e:	0003      	movs	r3, r0
   17990:	7023      	strb	r3, [r4, #0]
   17992:	230f      	movs	r3, #15
   17994:	18fc      	adds	r4, r7, r3
   17996:	0039      	movs	r1, r7
   17998:	4b1a      	ldr	r3, [pc, #104]	; (17a04 <HTTP_DownloadFileTransaction+0xec>)
   1799a:	220a      	movs	r2, #10
   1799c:	0018      	movs	r0, r3
   1799e:	4b1a      	ldr	r3, [pc, #104]	; (17a08 <HTTP_DownloadFileTransaction+0xf0>)
   179a0:	4798      	blx	r3
   179a2:	0003      	movs	r3, r0
   179a4:	7023      	strb	r3, [r4, #0]
   179a6:	230f      	movs	r3, #15
   179a8:	18fb      	adds	r3, r7, r3
   179aa:	781b      	ldrb	r3, [r3, #0]
   179ac:	2b00      	cmp	r3, #0
   179ae:	d008      	beq.n	179c2 <HTTP_DownloadFileTransaction+0xaa>
   179b0:	230f      	movs	r3, #15
   179b2:	18fb      	adds	r3, r7, r3
   179b4:	781a      	ldrb	r2, [r3, #0]
   179b6:	4b15      	ldr	r3, [pc, #84]	; (17a0c <HTTP_DownloadFileTransaction+0xf4>)
   179b8:	0019      	movs	r1, r3
   179ba:	2000      	movs	r0, #0
   179bc:	4b14      	ldr	r3, [pc, #80]	; (17a10 <HTTP_DownloadFileTransaction+0xf8>)
   179be:	4798      	blx	r3
   179c0:	e003      	b.n	179ca <HTTP_DownloadFileTransaction+0xb2>
   179c2:	4b14      	ldr	r3, [pc, #80]	; (17a14 <HTTP_DownloadFileTransaction+0xfc>)
   179c4:	0018      	movs	r0, r3
   179c6:	4b14      	ldr	r3, [pc, #80]	; (17a18 <HTTP_DownloadFileTransaction+0x100>)
   179c8:	4798      	blx	r3
   179ca:	2064      	movs	r0, #100	; 0x64
   179cc:	4b13      	ldr	r3, [pc, #76]	; (17a1c <HTTP_DownloadFileTransaction+0x104>)
   179ce:	4798      	blx	r3
   179d0:	4b13      	ldr	r3, [pc, #76]	; (17a20 <HTTP_DownloadFileTransaction+0x108>)
   179d2:	4798      	blx	r3
   179d4:	4b13      	ldr	r3, [pc, #76]	; (17a24 <HTTP_DownloadFileTransaction+0x10c>)
   179d6:	2200      	movs	r2, #0
   179d8:	701a      	strb	r2, [r3, #0]
   179da:	46c0      	nop			; (mov r8, r8)
   179dc:	46bd      	mov	sp, r7
   179de:	b005      	add	sp, #20
   179e0:	bd90      	pop	{r4, r7, pc}
   179e2:	46c0      	nop			; (mov r8, r8)
   179e4:	00022ae5 	.word	0x00022ae5
   179e8:	20004908 	.word	0x20004908
   179ec:	00033305 	.word	0x00033305
   179f0:	0001cc51 	.word	0x0001cc51
   179f4:	0001689d 	.word	0x0001689d
   179f8:	000260a1 	.word	0x000260a1
   179fc:	20000630 	.word	0x20000630
   17a00:	00038628 	.word	0x00038628
   17a04:	20000864 	.word	0x20000864
   17a08:	0002e5cd 	.word	0x0002e5cd
   17a0c:	00038604 	.word	0x00038604
   17a10:	0001e991 	.word	0x0001e991
   17a14:	00038614 	.word	0x00038614
   17a18:	0001e8a5 	.word	0x0001e8a5
   17a1c:	00020c5d 	.word	0x00020c5d
   17a20:	000167a1 	.word	0x000167a1
   17a24:	2000061a 	.word	0x2000061a

00017a28 <MQTT_InitRoutine>:
   17a28:	b580      	push	{r7, lr}
   17a2a:	af00      	add	r7, sp, #0
   17a2c:	4b18      	ldr	r3, [pc, #96]	; (17a90 <MQTT_InitRoutine+0x68>)
   17a2e:	4798      	blx	r3
   17a30:	4b18      	ldr	r3, [pc, #96]	; (17a94 <MQTT_InitRoutine+0x6c>)
   17a32:	4798      	blx	r3
   17a34:	4a18      	ldr	r2, [pc, #96]	; (17a98 <MQTT_InitRoutine+0x70>)
   17a36:	4b19      	ldr	r3, [pc, #100]	; (17a9c <MQTT_InitRoutine+0x74>)
   17a38:	0011      	movs	r1, r2
   17a3a:	0018      	movs	r0, r3
   17a3c:	4b18      	ldr	r3, [pc, #96]	; (17aa0 <MQTT_InitRoutine+0x78>)
   17a3e:	4798      	blx	r3
   17a40:	4b18      	ldr	r3, [pc, #96]	; (17aa4 <MQTT_InitRoutine+0x7c>)
   17a42:	4798      	blx	r3
   17a44:	4b18      	ldr	r3, [pc, #96]	; (17aa8 <MQTT_InitRoutine+0x80>)
   17a46:	2234      	movs	r2, #52	; 0x34
   17a48:	5c9b      	ldrb	r3, [r3, r2]
   17a4a:	2201      	movs	r2, #1
   17a4c:	4053      	eors	r3, r2
   17a4e:	b2db      	uxtb	r3, r3
   17a50:	2b00      	cmp	r3, #0
   17a52:	d00c      	beq.n	17a6e <MQTT_InitRoutine+0x46>
   17a54:	4a15      	ldr	r2, [pc, #84]	; (17aac <MQTT_InitRoutine+0x84>)
   17a56:	4b14      	ldr	r3, [pc, #80]	; (17aa8 <MQTT_InitRoutine+0x80>)
   17a58:	0011      	movs	r1, r2
   17a5a:	0018      	movs	r0, r3
   17a5c:	4b14      	ldr	r3, [pc, #80]	; (17ab0 <MQTT_InitRoutine+0x88>)
   17a5e:	4798      	blx	r3
   17a60:	1e03      	subs	r3, r0, #0
   17a62:	d004      	beq.n	17a6e <MQTT_InitRoutine+0x46>
   17a64:	4b13      	ldr	r3, [pc, #76]	; (17ab4 <MQTT_InitRoutine+0x8c>)
   17a66:	0019      	movs	r1, r3
   17a68:	2001      	movs	r0, #1
   17a6a:	4b13      	ldr	r3, [pc, #76]	; (17ab8 <MQTT_InitRoutine+0x90>)
   17a6c:	4798      	blx	r3
   17a6e:	4b0e      	ldr	r3, [pc, #56]	; (17aa8 <MQTT_InitRoutine+0x80>)
   17a70:	2234      	movs	r2, #52	; 0x34
   17a72:	5c9b      	ldrb	r3, [r3, r2]
   17a74:	2b00      	cmp	r3, #0
   17a76:	d004      	beq.n	17a82 <MQTT_InitRoutine+0x5a>
   17a78:	4b10      	ldr	r3, [pc, #64]	; (17abc <MQTT_InitRoutine+0x94>)
   17a7a:	0019      	movs	r1, r3
   17a7c:	2001      	movs	r0, #1
   17a7e:	4b0e      	ldr	r3, [pc, #56]	; (17ab8 <MQTT_InitRoutine+0x90>)
   17a80:	4798      	blx	r3
   17a82:	4b0f      	ldr	r3, [pc, #60]	; (17ac0 <MQTT_InitRoutine+0x98>)
   17a84:	2201      	movs	r2, #1
   17a86:	701a      	strb	r2, [r3, #0]
   17a88:	46c0      	nop			; (mov r8, r8)
   17a8a:	46bd      	mov	sp, r7
   17a8c:	bd80      	pop	{r7, pc}
   17a8e:	46c0      	nop			; (mov r8, r8)
   17a90:	000260a1 	.word	0x000260a1
   17a94:	00017715 	.word	0x00017715
   17a98:	0001734d 	.word	0x0001734d
   17a9c:	00017319 	.word	0x00017319
   17aa0:	000260e9 	.word	0x000260e9
   17aa4:	00026051 	.word	0x00026051
   17aa8:	20000890 	.word	0x20000890
   17aac:	00037e9c 	.word	0x00037e9c
   17ab0:	000304a9 	.word	0x000304a9
   17ab4:	00038294 	.word	0x00038294
   17ab8:	0001e991 	.word	0x0001e991
   17abc:	00038634 	.word	0x00038634
   17ac0:	2000061a 	.word	0x2000061a

00017ac4 <MQTT_HandleTransactions>:
   17ac4:	b580      	push	{r7, lr}
   17ac6:	af00      	add	r7, sp, #0
   17ac8:	2000      	movs	r0, #0
   17aca:	4b0c      	ldr	r3, [pc, #48]	; (17afc <MQTT_HandleTransactions+0x38>)
   17acc:	4798      	blx	r3
   17ace:	4b0c      	ldr	r3, [pc, #48]	; (17b00 <MQTT_HandleTransactions+0x3c>)
   17ad0:	0018      	movs	r0, r3
   17ad2:	4b0c      	ldr	r3, [pc, #48]	; (17b04 <MQTT_HandleTransactions+0x40>)
   17ad4:	4798      	blx	r3
   17ad6:	4b0c      	ldr	r3, [pc, #48]	; (17b08 <MQTT_HandleTransactions+0x44>)
   17ad8:	4798      	blx	r3
   17ada:	4b0c      	ldr	r3, [pc, #48]	; (17b0c <MQTT_HandleTransactions+0x48>)
   17adc:	4798      	blx	r3
   17ade:	4b0c      	ldr	r3, [pc, #48]	; (17b10 <MQTT_HandleTransactions+0x4c>)
   17ae0:	4798      	blx	r3
   17ae2:	4b0c      	ldr	r3, [pc, #48]	; (17b14 <MQTT_HandleTransactions+0x50>)
   17ae4:	2234      	movs	r2, #52	; 0x34
   17ae6:	5c9b      	ldrb	r3, [r3, r2]
   17ae8:	2b00      	cmp	r3, #0
   17aea:	d004      	beq.n	17af6 <MQTT_HandleTransactions+0x32>
   17aec:	4b09      	ldr	r3, [pc, #36]	; (17b14 <MQTT_HandleTransactions+0x50>)
   17aee:	2164      	movs	r1, #100	; 0x64
   17af0:	0018      	movs	r0, r3
   17af2:	4b09      	ldr	r3, [pc, #36]	; (17b18 <MQTT_HandleTransactions+0x54>)
   17af4:	4798      	blx	r3
   17af6:	46c0      	nop			; (mov r8, r8)
   17af8:	46bd      	mov	sp, r7
   17afa:	bd80      	pop	{r7, pc}
   17afc:	00022ae5 	.word	0x00022ae5
   17b00:	20004908 	.word	0x20004908
   17b04:	00033305 	.word	0x00033305
   17b08:	00017b1d 	.word	0x00017b1d
   17b0c:	00017ba9 	.word	0x00017ba9
   17b10:	00017c1d 	.word	0x00017c1d
   17b14:	20000890 	.word	0x20000890
   17b18:	000306d9 	.word	0x000306d9

00017b1c <MQTT_HandleImuMessages>:
   17b1c:	b590      	push	{r4, r7, lr}
   17b1e:	b085      	sub	sp, #20
   17b20:	af02      	add	r7, sp, #8
   17b22:	4b18      	ldr	r3, [pc, #96]	; (17b84 <MQTT_HandleImuMessages+0x68>)
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	0039      	movs	r1, r7
   17b28:	2200      	movs	r2, #0
   17b2a:	0018      	movs	r0, r3
   17b2c:	4b16      	ldr	r3, [pc, #88]	; (17b88 <MQTT_HandleImuMessages+0x6c>)
   17b2e:	4798      	blx	r3
   17b30:	0003      	movs	r3, r0
   17b32:	2b01      	cmp	r3, #1
   17b34:	d121      	bne.n	17b7a <MQTT_HandleImuMessages+0x5e>
   17b36:	003b      	movs	r3, r7
   17b38:	2200      	movs	r2, #0
   17b3a:	5e9b      	ldrsh	r3, [r3, r2]
   17b3c:	001c      	movs	r4, r3
   17b3e:	003b      	movs	r3, r7
   17b40:	2202      	movs	r2, #2
   17b42:	5e9b      	ldrsh	r3, [r3, r2]
   17b44:	0019      	movs	r1, r3
   17b46:	003b      	movs	r3, r7
   17b48:	2204      	movs	r2, #4
   17b4a:	5e9b      	ldrsh	r3, [r3, r2]
   17b4c:	4a0f      	ldr	r2, [pc, #60]	; (17b8c <MQTT_HandleImuMessages+0x70>)
   17b4e:	4810      	ldr	r0, [pc, #64]	; (17b90 <MQTT_HandleImuMessages+0x74>)
   17b50:	9301      	str	r3, [sp, #4]
   17b52:	9100      	str	r1, [sp, #0]
   17b54:	0023      	movs	r3, r4
   17b56:	213f      	movs	r1, #63	; 0x3f
   17b58:	4c0e      	ldr	r4, [pc, #56]	; (17b94 <MQTT_HandleImuMessages+0x78>)
   17b5a:	47a0      	blx	r4
   17b5c:	4b0c      	ldr	r3, [pc, #48]	; (17b90 <MQTT_HandleImuMessages+0x74>)
   17b5e:	0018      	movs	r0, r3
   17b60:	4b0d      	ldr	r3, [pc, #52]	; (17b98 <MQTT_HandleImuMessages+0x7c>)
   17b62:	4798      	blx	r3
   17b64:	0004      	movs	r4, r0
   17b66:	4a0a      	ldr	r2, [pc, #40]	; (17b90 <MQTT_HandleImuMessages+0x74>)
   17b68:	490c      	ldr	r1, [pc, #48]	; (17b9c <MQTT_HandleImuMessages+0x80>)
   17b6a:	480d      	ldr	r0, [pc, #52]	; (17ba0 <MQTT_HandleImuMessages+0x84>)
   17b6c:	2300      	movs	r3, #0
   17b6e:	9301      	str	r3, [sp, #4]
   17b70:	2301      	movs	r3, #1
   17b72:	9300      	str	r3, [sp, #0]
   17b74:	0023      	movs	r3, r4
   17b76:	4c0b      	ldr	r4, [pc, #44]	; (17ba4 <MQTT_HandleImuMessages+0x88>)
   17b78:	47a0      	blx	r4
   17b7a:	46c0      	nop			; (mov r8, r8)
   17b7c:	46bd      	mov	sp, r7
   17b7e:	b003      	add	sp, #12
   17b80:	bd90      	pop	{r4, r7, pc}
   17b82:	46c0      	nop			; (mov r8, r8)
   17b84:	20000620 	.word	0x20000620
   17b88:	0001baa5 	.word	0x0001baa5
   17b8c:	00038650 	.word	0x00038650
   17b90:	20000030 	.word	0x20000030
   17b94:	0003645d 	.word	0x0003645d
   17b98:	0003659f 	.word	0x0003659f
   17b9c:	00038674 	.word	0x00038674
   17ba0:	20000890 	.word	0x20000890
   17ba4:	00030625 	.word	0x00030625

00017ba8 <MQTT_HandleTestMessages>:
   17ba8:	b590      	push	{r4, r7, lr}
   17baa:	b085      	sub	sp, #20
   17bac:	af02      	add	r7, sp, #8
   17bae:	4b12      	ldr	r3, [pc, #72]	; (17bf8 <MQTT_HandleTestMessages+0x50>)
   17bb0:	681b      	ldr	r3, [r3, #0]
   17bb2:	1d39      	adds	r1, r7, #4
   17bb4:	2200      	movs	r2, #0
   17bb6:	0018      	movs	r0, r3
   17bb8:	4b10      	ldr	r3, [pc, #64]	; (17bfc <MQTT_HandleTestMessages+0x54>)
   17bba:	4798      	blx	r3
   17bbc:	0003      	movs	r3, r0
   17bbe:	2b01      	cmp	r3, #1
   17bc0:	d115      	bne.n	17bee <MQTT_HandleTestMessages+0x46>
   17bc2:	1d3b      	adds	r3, r7, #4
   17bc4:	781b      	ldrb	r3, [r3, #0]
   17bc6:	4a0e      	ldr	r2, [pc, #56]	; (17c00 <MQTT_HandleTestMessages+0x58>)
   17bc8:	480e      	ldr	r0, [pc, #56]	; (17c04 <MQTT_HandleTestMessages+0x5c>)
   17bca:	213f      	movs	r1, #63	; 0x3f
   17bcc:	4c0e      	ldr	r4, [pc, #56]	; (17c08 <MQTT_HandleTestMessages+0x60>)
   17bce:	47a0      	blx	r4
   17bd0:	4b0c      	ldr	r3, [pc, #48]	; (17c04 <MQTT_HandleTestMessages+0x5c>)
   17bd2:	0018      	movs	r0, r3
   17bd4:	4b0d      	ldr	r3, [pc, #52]	; (17c0c <MQTT_HandleTestMessages+0x64>)
   17bd6:	4798      	blx	r3
   17bd8:	0004      	movs	r4, r0
   17bda:	4a0a      	ldr	r2, [pc, #40]	; (17c04 <MQTT_HandleTestMessages+0x5c>)
   17bdc:	490c      	ldr	r1, [pc, #48]	; (17c10 <MQTT_HandleTestMessages+0x68>)
   17bde:	480d      	ldr	r0, [pc, #52]	; (17c14 <MQTT_HandleTestMessages+0x6c>)
   17be0:	2300      	movs	r3, #0
   17be2:	9301      	str	r3, [sp, #4]
   17be4:	2301      	movs	r3, #1
   17be6:	9300      	str	r3, [sp, #0]
   17be8:	0023      	movs	r3, r4
   17bea:	4c0b      	ldr	r4, [pc, #44]	; (17c18 <MQTT_HandleTestMessages+0x70>)
   17bec:	47a0      	blx	r4
   17bee:	46c0      	nop			; (mov r8, r8)
   17bf0:	46bd      	mov	sp, r7
   17bf2:	b003      	add	sp, #12
   17bf4:	bd90      	pop	{r4, r7, pc}
   17bf6:	46c0      	nop			; (mov r8, r8)
   17bf8:	20000628 	.word	0x20000628
   17bfc:	0001baa5 	.word	0x0001baa5
   17c00:	00038688 	.word	0x00038688
   17c04:	20000030 	.word	0x20000030
   17c08:	0003645d 	.word	0x0003645d
   17c0c:	0003659f 	.word	0x0003659f
   17c10:	00038698 	.word	0x00038698
   17c14:	20000890 	.word	0x20000890
   17c18:	00030625 	.word	0x00030625

00017c1c <MQTT_HandleNauMessages>:
   17c1c:	b590      	push	{r4, r7, lr}
   17c1e:	b085      	sub	sp, #20
   17c20:	af02      	add	r7, sp, #8
   17c22:	4b14      	ldr	r3, [pc, #80]	; (17c74 <MQTT_HandleNauMessages+0x58>)
   17c24:	681b      	ldr	r3, [r3, #0]
   17c26:	1d39      	adds	r1, r7, #4
   17c28:	2200      	movs	r2, #0
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b12      	ldr	r3, [pc, #72]	; (17c78 <MQTT_HandleNauMessages+0x5c>)
   17c2e:	4798      	blx	r3
   17c30:	0003      	movs	r3, r0
   17c32:	2b01      	cmp	r3, #1
   17c34:	d11a      	bne.n	17c6c <MQTT_HandleNauMessages+0x50>
   17c36:	1d3b      	adds	r3, r7, #4
   17c38:	881b      	ldrh	r3, [r3, #0]
   17c3a:	0019      	movs	r1, r3
   17c3c:	1d3b      	adds	r3, r7, #4
   17c3e:	885b      	ldrh	r3, [r3, #2]
   17c40:	4a0e      	ldr	r2, [pc, #56]	; (17c7c <MQTT_HandleNauMessages+0x60>)
   17c42:	480f      	ldr	r0, [pc, #60]	; (17c80 <MQTT_HandleNauMessages+0x64>)
   17c44:	9300      	str	r3, [sp, #0]
   17c46:	000b      	movs	r3, r1
   17c48:	213f      	movs	r1, #63	; 0x3f
   17c4a:	4c0e      	ldr	r4, [pc, #56]	; (17c84 <MQTT_HandleNauMessages+0x68>)
   17c4c:	47a0      	blx	r4
   17c4e:	4b0c      	ldr	r3, [pc, #48]	; (17c80 <MQTT_HandleNauMessages+0x64>)
   17c50:	0018      	movs	r0, r3
   17c52:	4b0d      	ldr	r3, [pc, #52]	; (17c88 <MQTT_HandleNauMessages+0x6c>)
   17c54:	4798      	blx	r3
   17c56:	0004      	movs	r4, r0
   17c58:	4a09      	ldr	r2, [pc, #36]	; (17c80 <MQTT_HandleNauMessages+0x64>)
   17c5a:	490c      	ldr	r1, [pc, #48]	; (17c8c <MQTT_HandleNauMessages+0x70>)
   17c5c:	480c      	ldr	r0, [pc, #48]	; (17c90 <MQTT_HandleNauMessages+0x74>)
   17c5e:	2300      	movs	r3, #0
   17c60:	9301      	str	r3, [sp, #4]
   17c62:	2301      	movs	r3, #1
   17c64:	9300      	str	r3, [sp, #0]
   17c66:	0023      	movs	r3, r4
   17c68:	4c0a      	ldr	r4, [pc, #40]	; (17c94 <MQTT_HandleNauMessages+0x78>)
   17c6a:	47a0      	blx	r4
   17c6c:	46c0      	nop			; (mov r8, r8)
   17c6e:	46bd      	mov	sp, r7
   17c70:	b003      	add	sp, #12
   17c72:	bd90      	pop	{r4, r7, pc}
   17c74:	2000062c 	.word	0x2000062c
   17c78:	0001baa5 	.word	0x0001baa5
   17c7c:	000386ac 	.word	0x000386ac
   17c80:	20000030 	.word	0x20000030
   17c84:	0003645d 	.word	0x0003645d
   17c88:	0003659f 	.word	0x0003659f
   17c8c:	000386c8 	.word	0x000386c8
   17c90:	20000890 	.word	0x20000890
   17c94:	00030625 	.word	0x00030625

00017c98 <vWifiTask>:
   17c98:	b590      	push	{r4, r7, lr}
   17c9a:	b08d      	sub	sp, #52	; 0x34
   17c9c:	af02      	add	r7, sp, #8
   17c9e:	6078      	str	r0, [r7, #4]
   17ca0:	2064      	movs	r0, #100	; 0x64
   17ca2:	4b7f      	ldr	r3, [pc, #508]	; (17ea0 <vWifiTask+0x208>)
   17ca4:	4798      	blx	r3
   17ca6:	4b7f      	ldr	r3, [pc, #508]	; (17ea4 <vWifiTask+0x20c>)
   17ca8:	4798      	blx	r3
   17caa:	2200      	movs	r2, #0
   17cac:	2104      	movs	r1, #4
   17cae:	2005      	movs	r0, #5
   17cb0:	4b7d      	ldr	r3, [pc, #500]	; (17ea8 <vWifiTask+0x210>)
   17cb2:	4798      	blx	r3
   17cb4:	0002      	movs	r2, r0
   17cb6:	4b7d      	ldr	r3, [pc, #500]	; (17eac <vWifiTask+0x214>)
   17cb8:	601a      	str	r2, [r3, #0]
   17cba:	2200      	movs	r2, #0
   17cbc:	2106      	movs	r1, #6
   17cbe:	2005      	movs	r0, #5
   17cc0:	4b79      	ldr	r3, [pc, #484]	; (17ea8 <vWifiTask+0x210>)
   17cc2:	4798      	blx	r3
   17cc4:	0002      	movs	r2, r0
   17cc6:	4b7a      	ldr	r3, [pc, #488]	; (17eb0 <vWifiTask+0x218>)
   17cc8:	601a      	str	r2, [r3, #0]
   17cca:	2200      	movs	r2, #0
   17ccc:	2101      	movs	r1, #1
   17cce:	2005      	movs	r0, #5
   17cd0:	4b75      	ldr	r3, [pc, #468]	; (17ea8 <vWifiTask+0x210>)
   17cd2:	4798      	blx	r3
   17cd4:	0002      	movs	r2, r0
   17cd6:	4b77      	ldr	r3, [pc, #476]	; (17eb4 <vWifiTask+0x21c>)
   17cd8:	601a      	str	r2, [r3, #0]
   17cda:	2200      	movs	r2, #0
   17cdc:	2104      	movs	r1, #4
   17cde:	2005      	movs	r0, #5
   17ce0:	4b71      	ldr	r3, [pc, #452]	; (17ea8 <vWifiTask+0x210>)
   17ce2:	4798      	blx	r3
   17ce4:	0002      	movs	r2, r0
   17ce6:	4b74      	ldr	r3, [pc, #464]	; (17eb8 <vWifiTask+0x220>)
   17ce8:	601a      	str	r2, [r3, #0]
   17cea:	2200      	movs	r2, #0
   17cec:	2102      	movs	r1, #2
   17cee:	2005      	movs	r0, #5
   17cf0:	4b6d      	ldr	r3, [pc, #436]	; (17ea8 <vWifiTask+0x210>)
   17cf2:	4798      	blx	r3
   17cf4:	0002      	movs	r2, r0
   17cf6:	4b71      	ldr	r3, [pc, #452]	; (17ebc <vWifiTask+0x224>)
   17cf8:	601a      	str	r2, [r3, #0]
   17cfa:	4b6c      	ldr	r3, [pc, #432]	; (17eac <vWifiTask+0x214>)
   17cfc:	681b      	ldr	r3, [r3, #0]
   17cfe:	2b00      	cmp	r3, #0
   17d00:	d00f      	beq.n	17d22 <vWifiTask+0x8a>
   17d02:	4b6b      	ldr	r3, [pc, #428]	; (17eb0 <vWifiTask+0x218>)
   17d04:	681b      	ldr	r3, [r3, #0]
   17d06:	2b00      	cmp	r3, #0
   17d08:	d00b      	beq.n	17d22 <vWifiTask+0x8a>
   17d0a:	4b6c      	ldr	r3, [pc, #432]	; (17ebc <vWifiTask+0x224>)
   17d0c:	681b      	ldr	r3, [r3, #0]
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d007      	beq.n	17d22 <vWifiTask+0x8a>
   17d12:	4b68      	ldr	r3, [pc, #416]	; (17eb4 <vWifiTask+0x21c>)
   17d14:	681b      	ldr	r3, [r3, #0]
   17d16:	2b00      	cmp	r3, #0
   17d18:	d003      	beq.n	17d22 <vWifiTask+0x8a>
   17d1a:	4b67      	ldr	r3, [pc, #412]	; (17eb8 <vWifiTask+0x220>)
   17d1c:	681b      	ldr	r3, [r3, #0]
   17d1e:	2b00      	cmp	r3, #0
   17d20:	d003      	beq.n	17d2a <vWifiTask+0x92>
   17d22:	4b67      	ldr	r3, [pc, #412]	; (17ec0 <vWifiTask+0x228>)
   17d24:	0018      	movs	r0, r3
   17d26:	4b67      	ldr	r3, [pc, #412]	; (17ec4 <vWifiTask+0x22c>)
   17d28:	4798      	blx	r3
   17d2a:	4b67      	ldr	r3, [pc, #412]	; (17ec8 <vWifiTask+0x230>)
   17d2c:	0018      	movs	r0, r3
   17d2e:	4b65      	ldr	r3, [pc, #404]	; (17ec4 <vWifiTask+0x22c>)
   17d30:	4798      	blx	r3
   17d32:	4b66      	ldr	r3, [pc, #408]	; (17ecc <vWifiTask+0x234>)
   17d34:	4798      	blx	r3
   17d36:	4b66      	ldr	r3, [pc, #408]	; (17ed0 <vWifiTask+0x238>)
   17d38:	4798      	blx	r3
   17d3a:	4b66      	ldr	r3, [pc, #408]	; (17ed4 <vWifiTask+0x23c>)
   17d3c:	4798      	blx	r3
   17d3e:	4b66      	ldr	r3, [pc, #408]	; (17ed8 <vWifiTask+0x240>)
   17d40:	4798      	blx	r3
   17d42:	4b66      	ldr	r3, [pc, #408]	; (17edc <vWifiTask+0x244>)
   17d44:	4798      	blx	r3
   17d46:	4b66      	ldr	r3, [pc, #408]	; (17ee0 <vWifiTask+0x248>)
   17d48:	4798      	blx	r3
   17d4a:	230c      	movs	r3, #12
   17d4c:	18fb      	adds	r3, r7, r3
   17d4e:	2218      	movs	r2, #24
   17d50:	2100      	movs	r1, #0
   17d52:	0018      	movs	r0, r3
   17d54:	4b63      	ldr	r3, [pc, #396]	; (17ee4 <vWifiTask+0x24c>)
   17d56:	4798      	blx	r3
   17d58:	4b63      	ldr	r3, [pc, #396]	; (17ee8 <vWifiTask+0x250>)
   17d5a:	4798      	blx	r3
   17d5c:	230c      	movs	r3, #12
   17d5e:	18fb      	adds	r3, r7, r3
   17d60:	4a62      	ldr	r2, [pc, #392]	; (17eec <vWifiTask+0x254>)
   17d62:	601a      	str	r2, [r3, #0]
   17d64:	2327      	movs	r3, #39	; 0x27
   17d66:	18fc      	adds	r4, r7, r3
   17d68:	230c      	movs	r3, #12
   17d6a:	18fb      	adds	r3, r7, r3
   17d6c:	0018      	movs	r0, r3
   17d6e:	4b60      	ldr	r3, [pc, #384]	; (17ef0 <vWifiTask+0x258>)
   17d70:	4798      	blx	r3
   17d72:	0003      	movs	r3, r0
   17d74:	7023      	strb	r3, [r4, #0]
   17d76:	2327      	movs	r3, #39	; 0x27
   17d78:	18fb      	adds	r3, r7, r3
   17d7a:	781b      	ldrb	r3, [r3, #0]
   17d7c:	b25b      	sxtb	r3, r3
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d009      	beq.n	17d96 <vWifiTask+0xfe>
   17d82:	2327      	movs	r3, #39	; 0x27
   17d84:	18fb      	adds	r3, r7, r3
   17d86:	2200      	movs	r2, #0
   17d88:	569a      	ldrsb	r2, [r3, r2]
   17d8a:	4b5a      	ldr	r3, [pc, #360]	; (17ef4 <vWifiTask+0x25c>)
   17d8c:	0019      	movs	r1, r3
   17d8e:	2001      	movs	r0, #1
   17d90:	4b59      	ldr	r3, [pc, #356]	; (17ef8 <vWifiTask+0x260>)
   17d92:	4798      	blx	r3
   17d94:	e7fe      	b.n	17d94 <vWifiTask+0xfc>
   17d96:	4a59      	ldr	r2, [pc, #356]	; (17efc <vWifiTask+0x264>)
   17d98:	4b59      	ldr	r3, [pc, #356]	; (17f00 <vWifiTask+0x268>)
   17d9a:	0019      	movs	r1, r3
   17d9c:	2001      	movs	r0, #1
   17d9e:	4b56      	ldr	r3, [pc, #344]	; (17ef8 <vWifiTask+0x260>)
   17da0:	4798      	blx	r3
   17da2:	4b58      	ldr	r3, [pc, #352]	; (17f04 <vWifiTask+0x26c>)
   17da4:	4798      	blx	r3
   17da6:	4a58      	ldr	r2, [pc, #352]	; (17f08 <vWifiTask+0x270>)
   17da8:	4b58      	ldr	r3, [pc, #352]	; (17f0c <vWifiTask+0x274>)
   17daa:	0011      	movs	r1, r2
   17dac:	0018      	movs	r0, r3
   17dae:	4b58      	ldr	r3, [pc, #352]	; (17f10 <vWifiTask+0x278>)
   17db0:	4798      	blx	r3
   17db2:	4a58      	ldr	r2, [pc, #352]	; (17f14 <vWifiTask+0x27c>)
   17db4:	4851      	ldr	r0, [pc, #324]	; (17efc <vWifiTask+0x264>)
   17db6:	23ff      	movs	r3, #255	; 0xff
   17db8:	9300      	str	r3, [sp, #0]
   17dba:	0013      	movs	r3, r2
   17dbc:	2202      	movs	r2, #2
   17dbe:	2102      	movs	r1, #2
   17dc0:	4c55      	ldr	r4, [pc, #340]	; (17f18 <vWifiTask+0x280>)
   17dc2:	47a0      	blx	r4
   17dc4:	e006      	b.n	17dd4 <vWifiTask+0x13c>
   17dc6:	2000      	movs	r0, #0
   17dc8:	4b54      	ldr	r3, [pc, #336]	; (17f1c <vWifiTask+0x284>)
   17dca:	4798      	blx	r3
   17dcc:	4b54      	ldr	r3, [pc, #336]	; (17f20 <vWifiTask+0x288>)
   17dce:	0018      	movs	r0, r3
   17dd0:	4b54      	ldr	r3, [pc, #336]	; (17f24 <vWifiTask+0x28c>)
   17dd2:	4798      	blx	r3
   17dd4:	2002      	movs	r0, #2
   17dd6:	4b54      	ldr	r3, [pc, #336]	; (17f28 <vWifiTask+0x290>)
   17dd8:	4798      	blx	r3
   17dda:	0003      	movs	r3, r0
   17ddc:	001a      	movs	r2, r3
   17dde:	2301      	movs	r3, #1
   17de0:	4053      	eors	r3, r2
   17de2:	b2db      	uxtb	r3, r3
   17de4:	2b00      	cmp	r3, #0
   17de6:	d1ee      	bne.n	17dc6 <vWifiTask+0x12e>
   17de8:	23fa      	movs	r3, #250	; 0xfa
   17dea:	009b      	lsls	r3, r3, #2
   17dec:	0018      	movs	r0, r3
   17dee:	4b2c      	ldr	r3, [pc, #176]	; (17ea0 <vWifiTask+0x208>)
   17df0:	4798      	blx	r3
   17df2:	4b4e      	ldr	r3, [pc, #312]	; (17f2c <vWifiTask+0x294>)
   17df4:	2201      	movs	r2, #1
   17df6:	701a      	strb	r2, [r3, #0]
   17df8:	4b4c      	ldr	r3, [pc, #304]	; (17f2c <vWifiTask+0x294>)
   17dfa:	781b      	ldrb	r3, [r3, #0]
   17dfc:	b25b      	sxtb	r3, r3
   17dfe:	2b01      	cmp	r3, #1
   17e00:	d00b      	beq.n	17e1a <vWifiTask+0x182>
   17e02:	dc02      	bgt.n	17e0a <vWifiTask+0x172>
   17e04:	2b00      	cmp	r3, #0
   17e06:	d005      	beq.n	17e14 <vWifiTask+0x17c>
   17e08:	e010      	b.n	17e2c <vWifiTask+0x194>
   17e0a:	2b02      	cmp	r3, #2
   17e0c:	d008      	beq.n	17e20 <vWifiTask+0x188>
   17e0e:	2b03      	cmp	r3, #3
   17e10:	d009      	beq.n	17e26 <vWifiTask+0x18e>
   17e12:	e00b      	b.n	17e2c <vWifiTask+0x194>
   17e14:	4b46      	ldr	r3, [pc, #280]	; (17f30 <vWifiTask+0x298>)
   17e16:	4798      	blx	r3
   17e18:	e00c      	b.n	17e34 <vWifiTask+0x19c>
   17e1a:	4b46      	ldr	r3, [pc, #280]	; (17f34 <vWifiTask+0x29c>)
   17e1c:	4798      	blx	r3
   17e1e:	e009      	b.n	17e34 <vWifiTask+0x19c>
   17e20:	4b45      	ldr	r3, [pc, #276]	; (17f38 <vWifiTask+0x2a0>)
   17e22:	4798      	blx	r3
   17e24:	e006      	b.n	17e34 <vWifiTask+0x19c>
   17e26:	4b45      	ldr	r3, [pc, #276]	; (17f3c <vWifiTask+0x2a4>)
   17e28:	4798      	blx	r3
   17e2a:	e003      	b.n	17e34 <vWifiTask+0x19c>
   17e2c:	4b3f      	ldr	r3, [pc, #252]	; (17f2c <vWifiTask+0x294>)
   17e2e:	2200      	movs	r2, #0
   17e30:	701a      	strb	r2, [r3, #0]
   17e32:	46c0      	nop			; (mov r8, r8)
   17e34:	230b      	movs	r3, #11
   17e36:	18fb      	adds	r3, r7, r3
   17e38:	2200      	movs	r2, #0
   17e3a:	701a      	strb	r2, [r3, #0]
   17e3c:	4b1b      	ldr	r3, [pc, #108]	; (17eac <vWifiTask+0x214>)
   17e3e:	681b      	ldr	r3, [r3, #0]
   17e40:	220b      	movs	r2, #11
   17e42:	18b9      	adds	r1, r7, r2
   17e44:	2200      	movs	r2, #0
   17e46:	0018      	movs	r0, r3
   17e48:	4b3d      	ldr	r3, [pc, #244]	; (17f40 <vWifiTask+0x2a8>)
   17e4a:	4798      	blx	r3
   17e4c:	0003      	movs	r3, r0
   17e4e:	2b01      	cmp	r3, #1
   17e50:	d105      	bne.n	17e5e <vWifiTask+0x1c6>
   17e52:	230b      	movs	r3, #11
   17e54:	18fb      	adds	r3, r7, r3
   17e56:	781b      	ldrb	r3, [r3, #0]
   17e58:	b25a      	sxtb	r2, r3
   17e5a:	4b34      	ldr	r3, [pc, #208]	; (17f2c <vWifiTask+0x294>)
   17e5c:	701a      	strb	r2, [r3, #0]
   17e5e:	4b39      	ldr	r3, [pc, #228]	; (17f44 <vWifiTask+0x2ac>)
   17e60:	781b      	ldrb	r3, [r3, #0]
   17e62:	b2db      	uxtb	r3, r3
   17e64:	2b00      	cmp	r3, #0
   17e66:	d017      	beq.n	17e98 <vWifiTask+0x200>
   17e68:	4b37      	ldr	r3, [pc, #220]	; (17f48 <vWifiTask+0x2b0>)
   17e6a:	0018      	movs	r0, r3
   17e6c:	4b37      	ldr	r3, [pc, #220]	; (17f4c <vWifiTask+0x2b4>)
   17e6e:	4798      	blx	r3
   17e70:	0004      	movs	r4, r0
   17e72:	4a35      	ldr	r2, [pc, #212]	; (17f48 <vWifiTask+0x2b0>)
   17e74:	4936      	ldr	r1, [pc, #216]	; (17f50 <vWifiTask+0x2b8>)
   17e76:	4837      	ldr	r0, [pc, #220]	; (17f54 <vWifiTask+0x2bc>)
   17e78:	2300      	movs	r3, #0
   17e7a:	9301      	str	r3, [sp, #4]
   17e7c:	2301      	movs	r3, #1
   17e7e:	9300      	str	r3, [sp, #0]
   17e80:	0023      	movs	r3, r4
   17e82:	4c35      	ldr	r4, [pc, #212]	; (17f58 <vWifiTask+0x2c0>)
   17e84:	47a0      	blx	r4
   17e86:	4a30      	ldr	r2, [pc, #192]	; (17f48 <vWifiTask+0x2b0>)
   17e88:	4b34      	ldr	r3, [pc, #208]	; (17f5c <vWifiTask+0x2c4>)
   17e8a:	0019      	movs	r1, r3
   17e8c:	2001      	movs	r0, #1
   17e8e:	4b1a      	ldr	r3, [pc, #104]	; (17ef8 <vWifiTask+0x260>)
   17e90:	4798      	blx	r3
   17e92:	4b2c      	ldr	r3, [pc, #176]	; (17f44 <vWifiTask+0x2ac>)
   17e94:	2200      	movs	r2, #0
   17e96:	701a      	strb	r2, [r3, #0]
   17e98:	2064      	movs	r0, #100	; 0x64
   17e9a:	4b01      	ldr	r3, [pc, #4]	; (17ea0 <vWifiTask+0x208>)
   17e9c:	4798      	blx	r3
   17e9e:	e7ab      	b.n	17df8 <vWifiTask+0x160>
   17ea0:	0001cc51 	.word	0x0001cc51
   17ea4:	0001682d 	.word	0x0001682d
   17ea8:	0001af45 	.word	0x0001af45
   17eac:	2000061c 	.word	0x2000061c
   17eb0:	20000620 	.word	0x20000620
   17eb4:	20000628 	.word	0x20000628
   17eb8:	2000062c 	.word	0x2000062c
   17ebc:	20000624 	.word	0x20000624
   17ec0:	000386dc 	.word	0x000386dc
   17ec4:	0001e8a5 	.word	0x0001e8a5
   17ec8:	00038704 	.word	0x00038704
   17ecc:	00017269 	.word	0x00017269
   17ed0:	000172a5 	.word	0x000172a5
   17ed4:	00017715 	.word	0x00017715
   17ed8:	00017185 	.word	0x00017185
   17edc:	000177cd 	.word	0x000177cd
   17ee0:	0001780d 	.word	0x0001780d
   17ee4:	00036203 	.word	0x00036203
   17ee8:	00020e19 	.word	0x00020e19
   17eec:	00017031 	.word	0x00017031
   17ef0:	000228f1 	.word	0x000228f1
   17ef4:	00038720 	.word	0x00038720
   17ef8:	0001e991 	.word	0x0001e991
   17efc:	00038268 	.word	0x00038268
   17f00:	0003874c 	.word	0x0003874c
   17f04:	00026051 	.word	0x00026051
   17f08:	0001734d 	.word	0x0001734d
   17f0c:	00017319 	.word	0x00017319
   17f10:	000260e9 	.word	0x000260e9
   17f14:	0003825c 	.word	0x0003825c
   17f18:	00022b01 	.word	0x00022b01
   17f1c:	00022ae5 	.word	0x00022ae5
   17f20:	20004908 	.word	0x20004908
   17f24:	00033305 	.word	0x00033305
   17f28:	0001689d 	.word	0x0001689d
   17f2c:	2000061a 	.word	0x2000061a
   17f30:	00017a29 	.word	0x00017a29
   17f34:	00017ac5 	.word	0x00017ac5
   17f38:	00017885 	.word	0x00017885
   17f3c:	00017919 	.word	0x00017919
   17f40:	0001baa5 	.word	0x0001baa5
   17f44:	20000cc8 	.word	0x20000cc8
   17f48:	20000070 	.word	0x20000070
   17f4c:	0003659f 	.word	0x0003659f
   17f50:	00038770 	.word	0x00038770
   17f54:	20000890 	.word	0x20000890
   17f58:	00030625 	.word	0x00030625
   17f5c:	0003878c 	.word	0x0003878c

00017f60 <WifiHandlerSetState>:
   17f60:	b590      	push	{r4, r7, lr}
   17f62:	b083      	sub	sp, #12
   17f64:	af00      	add	r7, sp, #0
   17f66:	0002      	movs	r2, r0
   17f68:	1dfb      	adds	r3, r7, #7
   17f6a:	701a      	strb	r2, [r3, #0]
   17f6c:	1dfb      	adds	r3, r7, #7
   17f6e:	781b      	ldrb	r3, [r3, #0]
   17f70:	2b03      	cmp	r3, #3
   17f72:	d806      	bhi.n	17f82 <WifiHandlerSetState+0x22>
   17f74:	4b05      	ldr	r3, [pc, #20]	; (17f8c <WifiHandlerSetState+0x2c>)
   17f76:	6818      	ldr	r0, [r3, #0]
   17f78:	1df9      	adds	r1, r7, #7
   17f7a:	2300      	movs	r3, #0
   17f7c:	220a      	movs	r2, #10
   17f7e:	4c04      	ldr	r4, [pc, #16]	; (17f90 <WifiHandlerSetState+0x30>)
   17f80:	47a0      	blx	r4
   17f82:	46c0      	nop			; (mov r8, r8)
   17f84:	46bd      	mov	sp, r7
   17f86:	b003      	add	sp, #12
   17f88:	bd90      	pop	{r4, r7, pc}
   17f8a:	46c0      	nop			; (mov r8, r8)
   17f8c:	2000061c 	.word	0x2000061c
   17f90:	0001b1ed 	.word	0x0001b1ed

00017f94 <WifiAddDistanceDataToQueue>:
   17f94:	b590      	push	{r4, r7, lr}
   17f96:	b085      	sub	sp, #20
   17f98:	af00      	add	r7, sp, #0
   17f9a:	6078      	str	r0, [r7, #4]
   17f9c:	4b06      	ldr	r3, [pc, #24]	; (17fb8 <WifiAddDistanceDataToQueue+0x24>)
   17f9e:	6818      	ldr	r0, [r3, #0]
   17fa0:	6879      	ldr	r1, [r7, #4]
   17fa2:	2300      	movs	r3, #0
   17fa4:	220a      	movs	r2, #10
   17fa6:	4c05      	ldr	r4, [pc, #20]	; (17fbc <WifiAddDistanceDataToQueue+0x28>)
   17fa8:	47a0      	blx	r4
   17faa:	0003      	movs	r3, r0
   17fac:	60fb      	str	r3, [r7, #12]
   17fae:	68fb      	ldr	r3, [r7, #12]
   17fb0:	0018      	movs	r0, r3
   17fb2:	46bd      	mov	sp, r7
   17fb4:	b005      	add	sp, #20
   17fb6:	bd90      	pop	{r4, r7, pc}
   17fb8:	20000624 	.word	0x20000624
   17fbc:	0001b1ed 	.word	0x0001b1ed

00017fc0 <WifiAddTestDataToQueue>:
   17fc0:	b590      	push	{r4, r7, lr}
   17fc2:	b085      	sub	sp, #20
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
   17fc8:	4b06      	ldr	r3, [pc, #24]	; (17fe4 <WifiAddTestDataToQueue+0x24>)
   17fca:	6818      	ldr	r0, [r3, #0]
   17fcc:	6879      	ldr	r1, [r7, #4]
   17fce:	2300      	movs	r3, #0
   17fd0:	220a      	movs	r2, #10
   17fd2:	4c05      	ldr	r4, [pc, #20]	; (17fe8 <WifiAddTestDataToQueue+0x28>)
   17fd4:	47a0      	blx	r4
   17fd6:	0003      	movs	r3, r0
   17fd8:	60fb      	str	r3, [r7, #12]
   17fda:	68fb      	ldr	r3, [r7, #12]
   17fdc:	0018      	movs	r0, r3
   17fde:	46bd      	mov	sp, r7
   17fe0:	b005      	add	sp, #20
   17fe2:	bd90      	pop	{r4, r7, pc}
   17fe4:	20000628 	.word	0x20000628
   17fe8:	0001b1ed 	.word	0x0001b1ed

00017fec <WifiAddNauDataToQueue>:
   17fec:	b590      	push	{r4, r7, lr}
   17fee:	b085      	sub	sp, #20
   17ff0:	af00      	add	r7, sp, #0
   17ff2:	6078      	str	r0, [r7, #4]
   17ff4:	4b06      	ldr	r3, [pc, #24]	; (18010 <WifiAddNauDataToQueue+0x24>)
   17ff6:	6818      	ldr	r0, [r3, #0]
   17ff8:	6879      	ldr	r1, [r7, #4]
   17ffa:	2300      	movs	r3, #0
   17ffc:	220a      	movs	r2, #10
   17ffe:	4c05      	ldr	r4, [pc, #20]	; (18014 <WifiAddNauDataToQueue+0x28>)
   18000:	47a0      	blx	r4
   18002:	0003      	movs	r3, r0
   18004:	60fb      	str	r3, [r7, #12]
   18006:	68fb      	ldr	r3, [r7, #12]
   18008:	0018      	movs	r0, r3
   1800a:	46bd      	mov	sp, r7
   1800c:	b005      	add	sp, #20
   1800e:	bd90      	pop	{r4, r7, pc}
   18010:	2000062c 	.word	0x2000062c
   18014:	0001b1ed 	.word	0x0001b1ed

00018018 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   18018:	b580      	push	{r7, lr}
   1801a:	b082      	sub	sp, #8
   1801c:	af00      	add	r7, sp, #0
   1801e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18020:	687b      	ldr	r3, [r7, #4]
   18022:	2200      	movs	r2, #0
   18024:	701a      	strb	r2, [r3, #0]
}
   18026:	46c0      	nop			; (mov r8, r8)
   18028:	46bd      	mov	sp, r7
   1802a:	b002      	add	sp, #8
   1802c:	bd80      	pop	{r7, pc}
	...

00018030 <system_apb_clock_set_mask>:
{
   18030:	b580      	push	{r7, lr}
   18032:	b082      	sub	sp, #8
   18034:	af00      	add	r7, sp, #0
   18036:	0002      	movs	r2, r0
   18038:	6039      	str	r1, [r7, #0]
   1803a:	1dfb      	adds	r3, r7, #7
   1803c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1803e:	1dfb      	adds	r3, r7, #7
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	2b01      	cmp	r3, #1
   18044:	d00a      	beq.n	1805c <system_apb_clock_set_mask+0x2c>
   18046:	2b02      	cmp	r3, #2
   18048:	d00f      	beq.n	1806a <system_apb_clock_set_mask+0x3a>
   1804a:	2b00      	cmp	r3, #0
   1804c:	d114      	bne.n	18078 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1804e:	4b0e      	ldr	r3, [pc, #56]	; (18088 <system_apb_clock_set_mask+0x58>)
   18050:	4a0d      	ldr	r2, [pc, #52]	; (18088 <system_apb_clock_set_mask+0x58>)
   18052:	6991      	ldr	r1, [r2, #24]
   18054:	683a      	ldr	r2, [r7, #0]
   18056:	430a      	orrs	r2, r1
   18058:	619a      	str	r2, [r3, #24]
			break;
   1805a:	e00f      	b.n	1807c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1805c:	4b0a      	ldr	r3, [pc, #40]	; (18088 <system_apb_clock_set_mask+0x58>)
   1805e:	4a0a      	ldr	r2, [pc, #40]	; (18088 <system_apb_clock_set_mask+0x58>)
   18060:	69d1      	ldr	r1, [r2, #28]
   18062:	683a      	ldr	r2, [r7, #0]
   18064:	430a      	orrs	r2, r1
   18066:	61da      	str	r2, [r3, #28]
			break;
   18068:	e008      	b.n	1807c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1806a:	4b07      	ldr	r3, [pc, #28]	; (18088 <system_apb_clock_set_mask+0x58>)
   1806c:	4a06      	ldr	r2, [pc, #24]	; (18088 <system_apb_clock_set_mask+0x58>)
   1806e:	6a11      	ldr	r1, [r2, #32]
   18070:	683a      	ldr	r2, [r7, #0]
   18072:	430a      	orrs	r2, r1
   18074:	621a      	str	r2, [r3, #32]
			break;
   18076:	e001      	b.n	1807c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18078:	2317      	movs	r3, #23
   1807a:	e000      	b.n	1807e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1807c:	2300      	movs	r3, #0
}
   1807e:	0018      	movs	r0, r3
   18080:	46bd      	mov	sp, r7
   18082:	b002      	add	sp, #8
   18084:	bd80      	pop	{r7, pc}
   18086:	46c0      	nop			; (mov r8, r8)
   18088:	40000400 	.word	0x40000400

0001808c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   1808c:	b580      	push	{r7, lr}
   1808e:	b082      	sub	sp, #8
   18090:	af00      	add	r7, sp, #0
   18092:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18094:	687b      	ldr	r3, [r7, #4]
   18096:	2280      	movs	r2, #128	; 0x80
   18098:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1809a:	687b      	ldr	r3, [r7, #4]
   1809c:	2200      	movs	r2, #0
   1809e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   180a0:	687b      	ldr	r3, [r7, #4]
   180a2:	2201      	movs	r2, #1
   180a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   180a6:	687b      	ldr	r3, [r7, #4]
   180a8:	2200      	movs	r2, #0
   180aa:	70da      	strb	r2, [r3, #3]
}
   180ac:	46c0      	nop			; (mov r8, r8)
   180ae:	46bd      	mov	sp, r7
   180b0:	b002      	add	sp, #8
   180b2:	bd80      	pop	{r7, pc}

000180b4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   180b4:	b580      	push	{r7, lr}
   180b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   180b8:	4b05      	ldr	r3, [pc, #20]	; (180d0 <system_is_debugger_present+0x1c>)
   180ba:	789b      	ldrb	r3, [r3, #2]
   180bc:	b2db      	uxtb	r3, r3
   180be:	001a      	movs	r2, r3
   180c0:	2302      	movs	r3, #2
   180c2:	4013      	ands	r3, r2
   180c4:	1e5a      	subs	r2, r3, #1
   180c6:	4193      	sbcs	r3, r2
   180c8:	b2db      	uxtb	r3, r3
}
   180ca:	0018      	movs	r0, r3
   180cc:	46bd      	mov	sp, r7
   180ce:	bd80      	pop	{r7, pc}
   180d0:	41002000 	.word	0x41002000

000180d4 <system_interrupt_enter_critical_section>:
{
   180d4:	b580      	push	{r7, lr}
   180d6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   180d8:	4b02      	ldr	r3, [pc, #8]	; (180e4 <system_interrupt_enter_critical_section+0x10>)
   180da:	4798      	blx	r3
}
   180dc:	46c0      	nop			; (mov r8, r8)
   180de:	46bd      	mov	sp, r7
   180e0:	bd80      	pop	{r7, pc}
   180e2:	46c0      	nop			; (mov r8, r8)
   180e4:	00026d49 	.word	0x00026d49

000180e8 <system_interrupt_leave_critical_section>:
{
   180e8:	b580      	push	{r7, lr}
   180ea:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   180ec:	4b02      	ldr	r3, [pc, #8]	; (180f8 <system_interrupt_leave_critical_section+0x10>)
   180ee:	4798      	blx	r3
}
   180f0:	46c0      	nop			; (mov r8, r8)
   180f2:	46bd      	mov	sp, r7
   180f4:	bd80      	pop	{r7, pc}
   180f6:	46c0      	nop			; (mov r8, r8)
   180f8:	00026d9d 	.word	0x00026d9d

000180fc <system_interrupt_disable>:
{
   180fc:	b580      	push	{r7, lr}
   180fe:	b082      	sub	sp, #8
   18100:	af00      	add	r7, sp, #0
   18102:	0002      	movs	r2, r0
   18104:	1dfb      	adds	r3, r7, #7
   18106:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18108:	4a07      	ldr	r2, [pc, #28]	; (18128 <system_interrupt_disable+0x2c>)
   1810a:	1dfb      	adds	r3, r7, #7
   1810c:	781b      	ldrb	r3, [r3, #0]
   1810e:	0019      	movs	r1, r3
   18110:	231f      	movs	r3, #31
   18112:	400b      	ands	r3, r1
   18114:	2101      	movs	r1, #1
   18116:	4099      	lsls	r1, r3
   18118:	000b      	movs	r3, r1
   1811a:	0019      	movs	r1, r3
   1811c:	2380      	movs	r3, #128	; 0x80
   1811e:	50d1      	str	r1, [r2, r3]
}
   18120:	46c0      	nop			; (mov r8, r8)
   18122:	46bd      	mov	sp, r7
   18124:	b002      	add	sp, #8
   18126:	bd80      	pop	{r7, pc}
   18128:	e000e100 	.word	0xe000e100

0001812c <i2c_master_is_syncing>:
{
   1812c:	b580      	push	{r7, lr}
   1812e:	b084      	sub	sp, #16
   18130:	af00      	add	r7, sp, #0
   18132:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   18134:	687b      	ldr	r3, [r7, #4]
   18136:	681b      	ldr	r3, [r3, #0]
   18138:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1813a:	68fb      	ldr	r3, [r7, #12]
   1813c:	69db      	ldr	r3, [r3, #28]
   1813e:	2207      	movs	r2, #7
   18140:	4013      	ands	r3, r2
   18142:	1e5a      	subs	r2, r3, #1
   18144:	4193      	sbcs	r3, r2
   18146:	b2db      	uxtb	r3, r3
}
   18148:	0018      	movs	r0, r3
   1814a:	46bd      	mov	sp, r7
   1814c:	b004      	add	sp, #16
   1814e:	bd80      	pop	{r7, pc}

00018150 <_i2c_master_wait_for_sync>:
{
   18150:	b580      	push	{r7, lr}
   18152:	b082      	sub	sp, #8
   18154:	af00      	add	r7, sp, #0
   18156:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   18158:	46c0      	nop			; (mov r8, r8)
   1815a:	687b      	ldr	r3, [r7, #4]
   1815c:	0018      	movs	r0, r3
   1815e:	4b04      	ldr	r3, [pc, #16]	; (18170 <_i2c_master_wait_for_sync+0x20>)
   18160:	4798      	blx	r3
   18162:	1e03      	subs	r3, r0, #0
   18164:	d1f9      	bne.n	1815a <_i2c_master_wait_for_sync+0xa>
}
   18166:	46c0      	nop			; (mov r8, r8)
   18168:	46bd      	mov	sp, r7
   1816a:	b002      	add	sp, #8
   1816c:	bd80      	pop	{r7, pc}
   1816e:	46c0      	nop			; (mov r8, r8)
   18170:	0001812d 	.word	0x0001812d

00018174 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   18174:	b580      	push	{r7, lr}
   18176:	b084      	sub	sp, #16
   18178:	af00      	add	r7, sp, #0
   1817a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1817c:	687b      	ldr	r3, [r7, #4]
   1817e:	681b      	ldr	r3, [r3, #0]
   18180:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   18182:	687b      	ldr	r3, [r7, #4]
   18184:	681b      	ldr	r3, [r3, #0]
   18186:	0018      	movs	r0, r3
   18188:	4b0d      	ldr	r3, [pc, #52]	; (181c0 <i2c_master_disable+0x4c>)
   1818a:	4798      	blx	r3
   1818c:	0003      	movs	r3, r0
   1818e:	0018      	movs	r0, r3
   18190:	4b0c      	ldr	r3, [pc, #48]	; (181c4 <i2c_master_disable+0x50>)
   18192:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   18194:	687b      	ldr	r3, [r7, #4]
   18196:	0018      	movs	r0, r3
   18198:	4b0b      	ldr	r3, [pc, #44]	; (181c8 <i2c_master_disable+0x54>)
   1819a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1819c:	68fb      	ldr	r3, [r7, #12]
   1819e:	2283      	movs	r2, #131	; 0x83
   181a0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   181a2:	68fb      	ldr	r3, [r7, #12]
   181a4:	2283      	movs	r2, #131	; 0x83
   181a6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   181a8:	68fb      	ldr	r3, [r7, #12]
   181aa:	681b      	ldr	r3, [r3, #0]
   181ac:	2202      	movs	r2, #2
   181ae:	4393      	bics	r3, r2
   181b0:	001a      	movs	r2, r3
   181b2:	68fb      	ldr	r3, [r7, #12]
   181b4:	601a      	str	r2, [r3, #0]

}
   181b6:	46c0      	nop			; (mov r8, r8)
   181b8:	46bd      	mov	sp, r7
   181ba:	b004      	add	sp, #16
   181bc:	bd80      	pop	{r7, pc}
   181be:	46c0      	nop			; (mov r8, r8)
   181c0:	0002821d 	.word	0x0002821d
   181c4:	000180fd 	.word	0x000180fd
   181c8:	00018151 	.word	0x00018151

000181cc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   181cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   181ce:	b097      	sub	sp, #92	; 0x5c
   181d0:	af00      	add	r7, sp, #0
   181d2:	6178      	str	r0, [r7, #20]
   181d4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   181d6:	2300      	movs	r3, #0
   181d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   181da:	2300      	movs	r3, #0
   181dc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   181de:	2300      	movs	r3, #0
   181e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   181e2:	233b      	movs	r3, #59	; 0x3b
   181e4:	2210      	movs	r2, #16
   181e6:	4694      	mov	ip, r2
   181e8:	44bc      	add	ip, r7
   181ea:	4463      	add	r3, ip
   181ec:	2200      	movs	r2, #0
   181ee:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181f0:	697b      	ldr	r3, [r7, #20]
   181f2:	681b      	ldr	r3, [r3, #0]
   181f4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   181f6:	697b      	ldr	r3, [r7, #20]
   181f8:	681b      	ldr	r3, [r3, #0]
   181fa:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   181fc:	2323      	movs	r3, #35	; 0x23
   181fe:	2210      	movs	r2, #16
   18200:	18ba      	adds	r2, r7, r2
   18202:	18d4      	adds	r4, r2, r3
   18204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18206:	0018      	movs	r0, r3
   18208:	4bc0      	ldr	r3, [pc, #768]	; (1850c <_i2c_master_set_config+0x340>)
   1820a:	4798      	blx	r3
   1820c:	0003      	movs	r3, r0
   1820e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18210:	230c      	movs	r3, #12
   18212:	2210      	movs	r2, #16
   18214:	4694      	mov	ip, r2
   18216:	44bc      	add	ip, r7
   18218:	4463      	add	r3, ip
   1821a:	0018      	movs	r0, r3
   1821c:	4bbc      	ldr	r3, [pc, #752]	; (18510 <_i2c_master_set_config+0x344>)
   1821e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18220:	693b      	ldr	r3, [r7, #16]
   18222:	69db      	ldr	r3, [r3, #28]
   18224:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   18226:	693b      	ldr	r3, [r7, #16]
   18228:	6a1b      	ldr	r3, [r3, #32]
   1822a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1822c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1822e:	2b00      	cmp	r3, #0
   18230:	d106      	bne.n	18240 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18234:	2100      	movs	r1, #0
   18236:	0018      	movs	r0, r3
   18238:	4bb6      	ldr	r3, [pc, #728]	; (18514 <_i2c_master_set_config+0x348>)
   1823a:	4798      	blx	r3
   1823c:	0003      	movs	r3, r0
   1823e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   18240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18242:	b2da      	uxtb	r2, r3
   18244:	230c      	movs	r3, #12
   18246:	2110      	movs	r1, #16
   18248:	468c      	mov	ip, r1
   1824a:	44bc      	add	ip, r7
   1824c:	4463      	add	r3, ip
   1824e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18250:	230c      	movs	r3, #12
   18252:	2210      	movs	r2, #16
   18254:	4694      	mov	ip, r2
   18256:	44bc      	add	ip, r7
   18258:	4463      	add	r3, ip
   1825a:	2202      	movs	r2, #2
   1825c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1825e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18260:	0c1b      	lsrs	r3, r3, #16
   18262:	b2db      	uxtb	r3, r3
   18264:	220c      	movs	r2, #12
   18266:	2110      	movs	r1, #16
   18268:	468c      	mov	ip, r1
   1826a:	44bc      	add	ip, r7
   1826c:	4462      	add	r2, ip
   1826e:	0011      	movs	r1, r2
   18270:	0018      	movs	r0, r3
   18272:	4ba9      	ldr	r3, [pc, #676]	; (18518 <_i2c_master_set_config+0x34c>)
   18274:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   18276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18278:	2b00      	cmp	r3, #0
   1827a:	d106      	bne.n	1828a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1827e:	2101      	movs	r1, #1
   18280:	0018      	movs	r0, r3
   18282:	4ba4      	ldr	r3, [pc, #656]	; (18514 <_i2c_master_set_config+0x348>)
   18284:	4798      	blx	r3
   18286:	0003      	movs	r3, r0
   18288:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1828a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1828c:	b2da      	uxtb	r2, r3
   1828e:	230c      	movs	r3, #12
   18290:	2110      	movs	r1, #16
   18292:	468c      	mov	ip, r1
   18294:	44bc      	add	ip, r7
   18296:	4463      	add	r3, ip
   18298:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1829a:	230c      	movs	r3, #12
   1829c:	2210      	movs	r2, #16
   1829e:	4694      	mov	ip, r2
   182a0:	44bc      	add	ip, r7
   182a2:	4463      	add	r3, ip
   182a4:	2202      	movs	r2, #2
   182a6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   182a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182aa:	0c1b      	lsrs	r3, r3, #16
   182ac:	b2db      	uxtb	r3, r3
   182ae:	220c      	movs	r2, #12
   182b0:	2110      	movs	r1, #16
   182b2:	468c      	mov	ip, r1
   182b4:	44bc      	add	ip, r7
   182b6:	4462      	add	r2, ip
   182b8:	0011      	movs	r1, r2
   182ba:	0018      	movs	r0, r3
   182bc:	4b96      	ldr	r3, [pc, #600]	; (18518 <_i2c_master_set_config+0x34c>)
   182be:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   182c0:	693b      	ldr	r3, [r7, #16]
   182c2:	8a9a      	ldrh	r2, [r3, #20]
   182c4:	697b      	ldr	r3, [r7, #20]
   182c6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   182c8:	693b      	ldr	r3, [r7, #16]
   182ca:	8ada      	ldrh	r2, [r3, #22]
   182cc:	697b      	ldr	r3, [r7, #20]
   182ce:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   182d0:	693b      	ldr	r3, [r7, #16]
   182d2:	7e1b      	ldrb	r3, [r3, #24]
   182d4:	2b00      	cmp	r3, #0
   182d6:	d103      	bne.n	182e0 <_i2c_master_set_config+0x114>
   182d8:	4b90      	ldr	r3, [pc, #576]	; (1851c <_i2c_master_set_config+0x350>)
   182da:	4798      	blx	r3
   182dc:	1e03      	subs	r3, r0, #0
   182de:	d002      	beq.n	182e6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   182e0:	2380      	movs	r3, #128	; 0x80
   182e2:	657b      	str	r3, [r7, #84]	; 0x54
   182e4:	e001      	b.n	182ea <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   182e6:	2300      	movs	r3, #0
   182e8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   182ea:	693b      	ldr	r3, [r7, #16]
   182ec:	691b      	ldr	r3, [r3, #16]
   182ee:	2b00      	cmp	r3, #0
   182f0:	d004      	beq.n	182fc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   182f2:	693b      	ldr	r3, [r7, #16]
   182f4:	691b      	ldr	r3, [r3, #16]
   182f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   182f8:	4313      	orrs	r3, r2
   182fa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   182fc:	693b      	ldr	r3, [r7, #16]
   182fe:	689b      	ldr	r3, [r3, #8]
   18300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18302:	4313      	orrs	r3, r2
   18304:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   18306:	693b      	ldr	r3, [r7, #16]
   18308:	2224      	movs	r2, #36	; 0x24
   1830a:	5c9b      	ldrb	r3, [r3, r2]
   1830c:	2b00      	cmp	r3, #0
   1830e:	d004      	beq.n	1831a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18312:	2280      	movs	r2, #128	; 0x80
   18314:	05d2      	lsls	r2, r2, #23
   18316:	4313      	orrs	r3, r2
   18318:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1831a:	693b      	ldr	r3, [r7, #16]
   1831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1831e:	2b00      	cmp	r3, #0
   18320:	d004      	beq.n	1832c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18322:	693b      	ldr	r3, [r7, #16]
   18324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18328:	4313      	orrs	r3, r2
   1832a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1832c:	693b      	ldr	r3, [r7, #16]
   1832e:	222c      	movs	r2, #44	; 0x2c
   18330:	5c9b      	ldrb	r3, [r3, r2]
   18332:	2b00      	cmp	r3, #0
   18334:	d105      	bne.n	18342 <_i2c_master_set_config+0x176>
   18336:	693b      	ldr	r3, [r7, #16]
   18338:	689a      	ldr	r2, [r3, #8]
   1833a:	2380      	movs	r3, #128	; 0x80
   1833c:	049b      	lsls	r3, r3, #18
   1833e:	429a      	cmp	r2, r3
   18340:	d104      	bne.n	1834c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18344:	2280      	movs	r2, #128	; 0x80
   18346:	0512      	lsls	r2, r2, #20
   18348:	4313      	orrs	r3, r2
   1834a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1834c:	693b      	ldr	r3, [r7, #16]
   1834e:	222d      	movs	r2, #45	; 0x2d
   18350:	5c9b      	ldrb	r3, [r3, r2]
   18352:	2b00      	cmp	r3, #0
   18354:	d004      	beq.n	18360 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   18356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18358:	2280      	movs	r2, #128	; 0x80
   1835a:	0412      	lsls	r2, r2, #16
   1835c:	4313      	orrs	r3, r2
   1835e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   18360:	693b      	ldr	r3, [r7, #16]
   18362:	222e      	movs	r2, #46	; 0x2e
   18364:	5c9b      	ldrb	r3, [r3, r2]
   18366:	2b00      	cmp	r3, #0
   18368:	d004      	beq.n	18374 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1836a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1836c:	2280      	movs	r2, #128	; 0x80
   1836e:	03d2      	lsls	r2, r2, #15
   18370:	4313      	orrs	r3, r2
   18372:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   18374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18376:	681a      	ldr	r2, [r3, #0]
   18378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1837a:	431a      	orrs	r2, r3
   1837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1837e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   18380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18382:	2280      	movs	r2, #128	; 0x80
   18384:	0052      	lsls	r2, r2, #1
   18386:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18388:	2323      	movs	r3, #35	; 0x23
   1838a:	2210      	movs	r2, #16
   1838c:	4694      	mov	ip, r2
   1838e:	44bc      	add	ip, r7
   18390:	4463      	add	r3, ip
   18392:	781b      	ldrb	r3, [r3, #0]
   18394:	3314      	adds	r3, #20
   18396:	b2db      	uxtb	r3, r3
   18398:	0018      	movs	r0, r3
   1839a:	4b61      	ldr	r3, [pc, #388]	; (18520 <_i2c_master_set_config+0x354>)
   1839c:	4798      	blx	r3
   1839e:	0003      	movs	r3, r0
   183a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   183a2:	693b      	ldr	r3, [r7, #16]
   183a4:	681b      	ldr	r3, [r3, #0]
   183a6:	22fa      	movs	r2, #250	; 0xfa
   183a8:	0092      	lsls	r2, r2, #2
   183aa:	4353      	muls	r3, r2
   183ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   183ae:	693b      	ldr	r3, [r7, #16]
   183b0:	685b      	ldr	r3, [r3, #4]
   183b2:	22fa      	movs	r2, #250	; 0xfa
   183b4:	0092      	lsls	r2, r2, #2
   183b6:	4353      	muls	r3, r2
   183b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   183ba:	693b      	ldr	r3, [r7, #16]
   183bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   183be:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   183c0:	4b58      	ldr	r3, [pc, #352]	; (18524 <_i2c_master_set_config+0x358>)
   183c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   183c4:	4798      	blx	r3
   183c6:	0005      	movs	r5, r0
   183c8:	000e      	movs	r6, r1
   183ca:	4b56      	ldr	r3, [pc, #344]	; (18524 <_i2c_master_set_config+0x358>)
   183cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   183ce:	4798      	blx	r3
   183d0:	60b8      	str	r0, [r7, #8]
   183d2:	60f9      	str	r1, [r7, #12]
   183d4:	4b53      	ldr	r3, [pc, #332]	; (18524 <_i2c_master_set_config+0x358>)
   183d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   183d8:	4798      	blx	r3
   183da:	4c53      	ldr	r4, [pc, #332]	; (18528 <_i2c_master_set_config+0x35c>)
   183dc:	4a53      	ldr	r2, [pc, #332]	; (1852c <_i2c_master_set_config+0x360>)
   183de:	4b54      	ldr	r3, [pc, #336]	; (18530 <_i2c_master_set_config+0x364>)
   183e0:	47a0      	blx	r4
   183e2:	0003      	movs	r3, r0
   183e4:	000c      	movs	r4, r1
   183e6:	603b      	str	r3, [r7, #0]
   183e8:	607c      	str	r4, [r7, #4]
   183ea:	4b4e      	ldr	r3, [pc, #312]	; (18524 <_i2c_master_set_config+0x358>)
   183ec:	6a38      	ldr	r0, [r7, #32]
   183ee:	4798      	blx	r3
   183f0:	0002      	movs	r2, r0
   183f2:	000b      	movs	r3, r1
   183f4:	4c4c      	ldr	r4, [pc, #304]	; (18528 <_i2c_master_set_config+0x35c>)
   183f6:	6838      	ldr	r0, [r7, #0]
   183f8:	6879      	ldr	r1, [r7, #4]
   183fa:	47a0      	blx	r4
   183fc:	0003      	movs	r3, r0
   183fe:	000c      	movs	r4, r1
   18400:	0018      	movs	r0, r3
   18402:	0021      	movs	r1, r4
   18404:	4c4b      	ldr	r4, [pc, #300]	; (18534 <_i2c_master_set_config+0x368>)
   18406:	2200      	movs	r2, #0
   18408:	4b4b      	ldr	r3, [pc, #300]	; (18538 <_i2c_master_set_config+0x36c>)
   1840a:	47a0      	blx	r4
   1840c:	0003      	movs	r3, r0
   1840e:	000c      	movs	r4, r1
   18410:	001a      	movs	r2, r3
   18412:	0023      	movs	r3, r4
   18414:	4c44      	ldr	r4, [pc, #272]	; (18528 <_i2c_master_set_config+0x35c>)
   18416:	68b8      	ldr	r0, [r7, #8]
   18418:	68f9      	ldr	r1, [r7, #12]
   1841a:	47a0      	blx	r4
   1841c:	0003      	movs	r3, r0
   1841e:	000c      	movs	r4, r1
   18420:	001a      	movs	r2, r3
   18422:	0023      	movs	r3, r4
   18424:	4c45      	ldr	r4, [pc, #276]	; (1853c <_i2c_master_set_config+0x370>)
   18426:	0028      	movs	r0, r5
   18428:	0031      	movs	r1, r6
   1842a:	47a0      	blx	r4
   1842c:	0003      	movs	r3, r0
   1842e:	000c      	movs	r4, r1
   18430:	001d      	movs	r5, r3
   18432:	0026      	movs	r6, r4
   18434:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18436:	005a      	lsls	r2, r3, #1
   18438:	4b3a      	ldr	r3, [pc, #232]	; (18524 <_i2c_master_set_config+0x358>)
   1843a:	0010      	movs	r0, r2
   1843c:	4798      	blx	r3
   1843e:	0002      	movs	r2, r0
   18440:	000b      	movs	r3, r1
   18442:	4c3c      	ldr	r4, [pc, #240]	; (18534 <_i2c_master_set_config+0x368>)
   18444:	0028      	movs	r0, r5
   18446:	0031      	movs	r1, r6
   18448:	47a0      	blx	r4
   1844a:	0003      	movs	r3, r0
   1844c:	000c      	movs	r4, r1
   1844e:	0018      	movs	r0, r3
   18450:	0021      	movs	r1, r4
   18452:	4c3a      	ldr	r4, [pc, #232]	; (1853c <_i2c_master_set_config+0x370>)
   18454:	2200      	movs	r2, #0
   18456:	4b3a      	ldr	r3, [pc, #232]	; (18540 <_i2c_master_set_config+0x374>)
   18458:	47a0      	blx	r4
   1845a:	0003      	movs	r3, r0
   1845c:	000c      	movs	r4, r1
   1845e:	001d      	movs	r5, r3
   18460:	0026      	movs	r6, r4
   18462:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18464:	005a      	lsls	r2, r3, #1
   18466:	4b2f      	ldr	r3, [pc, #188]	; (18524 <_i2c_master_set_config+0x358>)
   18468:	0010      	movs	r0, r2
   1846a:	4798      	blx	r3
   1846c:	0002      	movs	r2, r0
   1846e:	000b      	movs	r3, r1
   18470:	4c34      	ldr	r4, [pc, #208]	; (18544 <_i2c_master_set_config+0x378>)
   18472:	0028      	movs	r0, r5
   18474:	0031      	movs	r1, r6
   18476:	47a0      	blx	r4
   18478:	0003      	movs	r3, r0
   1847a:	000c      	movs	r4, r1
   1847c:	0019      	movs	r1, r3
   1847e:	0022      	movs	r2, r4
   18480:	4b31      	ldr	r3, [pc, #196]	; (18548 <_i2c_master_set_config+0x37c>)
   18482:	0008      	movs	r0, r1
   18484:	0011      	movs	r1, r2
   18486:	4798      	blx	r3
   18488:	0003      	movs	r3, r0
   1848a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1848c:	693b      	ldr	r3, [r7, #16]
   1848e:	689a      	ldr	r2, [r3, #8]
   18490:	2380      	movs	r3, #128	; 0x80
   18492:	049b      	lsls	r3, r3, #18
   18494:	429a      	cmp	r2, r3
   18496:	d16a      	bne.n	1856e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18498:	4b22      	ldr	r3, [pc, #136]	; (18524 <_i2c_master_set_config+0x358>)
   1849a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1849c:	4798      	blx	r3
   1849e:	4c25      	ldr	r4, [pc, #148]	; (18534 <_i2c_master_set_config+0x368>)
   184a0:	0002      	movs	r2, r0
   184a2:	000b      	movs	r3, r1
   184a4:	47a0      	blx	r4
   184a6:	0003      	movs	r3, r0
   184a8:	000c      	movs	r4, r1
   184aa:	001d      	movs	r5, r3
   184ac:	0026      	movs	r6, r4
   184ae:	4b1d      	ldr	r3, [pc, #116]	; (18524 <_i2c_master_set_config+0x358>)
   184b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   184b2:	4798      	blx	r3
   184b4:	4c1c      	ldr	r4, [pc, #112]	; (18528 <_i2c_master_set_config+0x35c>)
   184b6:	2200      	movs	r2, #0
   184b8:	4b24      	ldr	r3, [pc, #144]	; (1854c <_i2c_master_set_config+0x380>)
   184ba:	47a0      	blx	r4
   184bc:	0003      	movs	r3, r0
   184be:	000c      	movs	r4, r1
   184c0:	001a      	movs	r2, r3
   184c2:	0023      	movs	r3, r4
   184c4:	4c1f      	ldr	r4, [pc, #124]	; (18544 <_i2c_master_set_config+0x378>)
   184c6:	0028      	movs	r0, r5
   184c8:	0031      	movs	r1, r6
   184ca:	47a0      	blx	r4
   184cc:	0003      	movs	r3, r0
   184ce:	000c      	movs	r4, r1
   184d0:	0018      	movs	r0, r3
   184d2:	0021      	movs	r1, r4
   184d4:	4c19      	ldr	r4, [pc, #100]	; (1853c <_i2c_master_set_config+0x370>)
   184d6:	2200      	movs	r2, #0
   184d8:	4b19      	ldr	r3, [pc, #100]	; (18540 <_i2c_master_set_config+0x374>)
   184da:	47a0      	blx	r4
   184dc:	0003      	movs	r3, r0
   184de:	000c      	movs	r4, r1
   184e0:	0019      	movs	r1, r3
   184e2:	0022      	movs	r2, r4
   184e4:	4b18      	ldr	r3, [pc, #96]	; (18548 <_i2c_master_set_config+0x37c>)
   184e6:	0008      	movs	r0, r1
   184e8:	0011      	movs	r1, r2
   184ea:	4798      	blx	r3
   184ec:	0003      	movs	r3, r0
   184ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   184f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   184f2:	2b00      	cmp	r3, #0
   184f4:	d02e      	beq.n	18554 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   184f6:	4b16      	ldr	r3, [pc, #88]	; (18550 <_i2c_master_set_config+0x384>)
   184f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   184fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   184fc:	4798      	blx	r3
   184fe:	0003      	movs	r3, r0
   18500:	1e9a      	subs	r2, r3, #2
   18502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18504:	1ad3      	subs	r3, r2, r3
   18506:	653b      	str	r3, [r7, #80]	; 0x50
   18508:	e031      	b.n	1856e <_i2c_master_set_config+0x3a2>
   1850a:	46c0      	nop			; (mov r8, r8)
   1850c:	0002814d 	.word	0x0002814d
   18510:	0001808d 	.word	0x0001808d
   18514:	00027f91 	.word	0x00027f91
   18518:	0002ad3d 	.word	0x0002ad3d
   1851c:	000180b5 	.word	0x000180b5
   18520:	0002ab01 	.word	0x0002ab01
   18524:	00035e3d 	.word	0x00035e3d
   18528:	000352a9 	.word	0x000352a9
   1852c:	e826d695 	.word	0xe826d695
   18530:	3e112e0b 	.word	0x3e112e0b
   18534:	00034621 	.word	0x00034621
   18538:	40240000 	.word	0x40240000
   1853c:	000357a9 	.word	0x000357a9
   18540:	3ff00000 	.word	0x3ff00000
   18544:	00034c41 	.word	0x00034c41
   18548:	00035dd5 	.word	0x00035dd5
   1854c:	40080000 	.word	0x40080000
   18550:	000336a5 	.word	0x000336a5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18556:	005a      	lsls	r2, r3, #1
   18558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1855a:	18d3      	adds	r3, r2, r3
   1855c:	1e5a      	subs	r2, r3, #1
   1855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18560:	0059      	lsls	r1, r3, #1
   18562:	4b1d      	ldr	r3, [pc, #116]	; (185d8 <_i2c_master_set_config+0x40c>)
   18564:	0010      	movs	r0, r2
   18566:	4798      	blx	r3
   18568:	0003      	movs	r3, r0
   1856a:	3b01      	subs	r3, #1
   1856c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18570:	2bff      	cmp	r3, #255	; 0xff
   18572:	dc08      	bgt.n	18586 <_i2c_master_set_config+0x3ba>
   18574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18576:	2b00      	cmp	r3, #0
   18578:	db05      	blt.n	18586 <_i2c_master_set_config+0x3ba>
   1857a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1857c:	2bff      	cmp	r3, #255	; 0xff
   1857e:	dc02      	bgt.n	18586 <_i2c_master_set_config+0x3ba>
   18580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18582:	2b00      	cmp	r3, #0
   18584:	da06      	bge.n	18594 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   18586:	233b      	movs	r3, #59	; 0x3b
   18588:	2210      	movs	r2, #16
   1858a:	4694      	mov	ip, r2
   1858c:	44bc      	add	ip, r7
   1858e:	4463      	add	r3, ip
   18590:	2240      	movs	r2, #64	; 0x40
   18592:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   18594:	233b      	movs	r3, #59	; 0x3b
   18596:	2210      	movs	r2, #16
   18598:	4694      	mov	ip, r2
   1859a:	44bc      	add	ip, r7
   1859c:	4463      	add	r3, ip
   1859e:	781b      	ldrb	r3, [r3, #0]
   185a0:	2b40      	cmp	r3, #64	; 0x40
   185a2:	d00e      	beq.n	185c2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185a6:	22ff      	movs	r2, #255	; 0xff
   185a8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   185aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185ac:	041b      	lsls	r3, r3, #16
   185ae:	0019      	movs	r1, r3
   185b0:	23ff      	movs	r3, #255	; 0xff
   185b2:	041b      	lsls	r3, r3, #16
   185b4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185b6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   185b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   185ba:	0612      	lsls	r2, r2, #24
   185bc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   185be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   185c0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   185c2:	233b      	movs	r3, #59	; 0x3b
   185c4:	2210      	movs	r2, #16
   185c6:	4694      	mov	ip, r2
   185c8:	44bc      	add	ip, r7
   185ca:	4463      	add	r3, ip
   185cc:	781b      	ldrb	r3, [r3, #0]
}
   185ce:	0018      	movs	r0, r3
   185d0:	46bd      	mov	sp, r7
   185d2:	b017      	add	sp, #92	; 0x5c
   185d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   185d6:	46c0      	nop			; (mov r8, r8)
   185d8:	000336a5 	.word	0x000336a5

000185dc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   185dc:	b590      	push	{r4, r7, lr}
   185de:	b08b      	sub	sp, #44	; 0x2c
   185e0:	af00      	add	r7, sp, #0
   185e2:	60f8      	str	r0, [r7, #12]
   185e4:	60b9      	str	r1, [r7, #8]
   185e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   185e8:	68fb      	ldr	r3, [r7, #12]
   185ea:	68ba      	ldr	r2, [r7, #8]
   185ec:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   185ee:	68fb      	ldr	r3, [r7, #12]
   185f0:	681b      	ldr	r3, [r3, #0]
   185f2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   185f4:	68fb      	ldr	r3, [r7, #12]
   185f6:	681b      	ldr	r3, [r3, #0]
   185f8:	0018      	movs	r0, r3
   185fa:	4b3b      	ldr	r3, [pc, #236]	; (186e8 <i2c_master_init+0x10c>)
   185fc:	4798      	blx	r3
   185fe:	0003      	movs	r3, r0
   18600:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18602:	6a3b      	ldr	r3, [r7, #32]
   18604:	3302      	adds	r3, #2
   18606:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18608:	6a3b      	ldr	r3, [r7, #32]
   1860a:	3314      	adds	r3, #20
   1860c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1860e:	2201      	movs	r2, #1
   18610:	69fb      	ldr	r3, [r7, #28]
   18612:	409a      	lsls	r2, r3
   18614:	0013      	movs	r3, r2
   18616:	0019      	movs	r1, r3
   18618:	2002      	movs	r0, #2
   1861a:	4b34      	ldr	r3, [pc, #208]	; (186ec <i2c_master_init+0x110>)
   1861c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1861e:	2314      	movs	r3, #20
   18620:	18fb      	adds	r3, r7, r3
   18622:	0018      	movs	r0, r3
   18624:	4b32      	ldr	r3, [pc, #200]	; (186f0 <i2c_master_init+0x114>)
   18626:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18628:	687b      	ldr	r3, [r7, #4]
   1862a:	7b1a      	ldrb	r2, [r3, #12]
   1862c:	2314      	movs	r3, #20
   1862e:	18fb      	adds	r3, r7, r3
   18630:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18632:	69bb      	ldr	r3, [r7, #24]
   18634:	b2db      	uxtb	r3, r3
   18636:	2214      	movs	r2, #20
   18638:	18ba      	adds	r2, r7, r2
   1863a:	0011      	movs	r1, r2
   1863c:	0018      	movs	r0, r3
   1863e:	4b2d      	ldr	r3, [pc, #180]	; (186f4 <i2c_master_init+0x118>)
   18640:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18642:	69bb      	ldr	r3, [r7, #24]
   18644:	b2db      	uxtb	r3, r3
   18646:	0018      	movs	r0, r3
   18648:	4b2b      	ldr	r3, [pc, #172]	; (186f8 <i2c_master_init+0x11c>)
   1864a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1864c:	687b      	ldr	r3, [r7, #4]
   1864e:	7b1b      	ldrb	r3, [r3, #12]
   18650:	2100      	movs	r1, #0
   18652:	0018      	movs	r0, r3
   18654:	4b29      	ldr	r3, [pc, #164]	; (186fc <i2c_master_init+0x120>)
   18656:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   18658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1865a:	681b      	ldr	r3, [r3, #0]
   1865c:	2202      	movs	r2, #2
   1865e:	4013      	ands	r3, r2
   18660:	d001      	beq.n	18666 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18662:	231c      	movs	r3, #28
   18664:	e03b      	b.n	186de <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18668:	681b      	ldr	r3, [r3, #0]
   1866a:	2201      	movs	r2, #1
   1866c:	4013      	ands	r3, r2
   1866e:	d001      	beq.n	18674 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18670:	2305      	movs	r3, #5
   18672:	e034      	b.n	186de <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18674:	68fb      	ldr	r3, [r7, #12]
   18676:	681b      	ldr	r3, [r3, #0]
   18678:	2217      	movs	r2, #23
   1867a:	18bc      	adds	r4, r7, r2
   1867c:	0018      	movs	r0, r3
   1867e:	4b1a      	ldr	r3, [pc, #104]	; (186e8 <i2c_master_init+0x10c>)
   18680:	4798      	blx	r3
   18682:	0003      	movs	r3, r0
   18684:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   18686:	4a1e      	ldr	r2, [pc, #120]	; (18700 <i2c_master_init+0x124>)
   18688:	2317      	movs	r3, #23
   1868a:	18fb      	adds	r3, r7, r3
   1868c:	781b      	ldrb	r3, [r3, #0]
   1868e:	0011      	movs	r1, r2
   18690:	0018      	movs	r0, r3
   18692:	4b1c      	ldr	r3, [pc, #112]	; (18704 <i2c_master_init+0x128>)
   18694:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18696:	2317      	movs	r3, #23
   18698:	18fb      	adds	r3, r7, r3
   1869a:	781a      	ldrb	r2, [r3, #0]
   1869c:	4b1a      	ldr	r3, [pc, #104]	; (18708 <i2c_master_init+0x12c>)
   1869e:	0092      	lsls	r2, r2, #2
   186a0:	68f9      	ldr	r1, [r7, #12]
   186a2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   186a4:	68fb      	ldr	r3, [r7, #12]
   186a6:	2200      	movs	r2, #0
   186a8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   186aa:	68fb      	ldr	r3, [r7, #12]
   186ac:	2200      	movs	r2, #0
   186ae:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   186b0:	68fb      	ldr	r3, [r7, #12]
   186b2:	2200      	movs	r2, #0
   186b4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   186b6:	68fb      	ldr	r3, [r7, #12]
   186b8:	2200      	movs	r2, #0
   186ba:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   186bc:	68fb      	ldr	r3, [r7, #12]
   186be:	2225      	movs	r2, #37	; 0x25
   186c0:	2100      	movs	r1, #0
   186c2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   186c4:	68fb      	ldr	r3, [r7, #12]
   186c6:	2200      	movs	r2, #0
   186c8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   186ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186cc:	2214      	movs	r2, #20
   186ce:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   186d0:	687a      	ldr	r2, [r7, #4]
   186d2:	68fb      	ldr	r3, [r7, #12]
   186d4:	0011      	movs	r1, r2
   186d6:	0018      	movs	r0, r3
   186d8:	4b0c      	ldr	r3, [pc, #48]	; (1870c <i2c_master_init+0x130>)
   186da:	4798      	blx	r3
   186dc:	0003      	movs	r3, r0
}
   186de:	0018      	movs	r0, r3
   186e0:	46bd      	mov	sp, r7
   186e2:	b00b      	add	sp, #44	; 0x2c
   186e4:	bd90      	pop	{r4, r7, pc}
   186e6:	46c0      	nop			; (mov r8, r8)
   186e8:	0002814d 	.word	0x0002814d
   186ec:	00018031 	.word	0x00018031
   186f0:	00018019 	.word	0x00018019
   186f4:	0002a9dd 	.word	0x0002a9dd
   186f8:	0002aa21 	.word	0x0002aa21
   186fc:	00027f05 	.word	0x00027f05
   18700:	00013575 	.word	0x00013575
   18704:	000281b1 	.word	0x000281b1
   18708:	20005c60 	.word	0x20005c60
   1870c:	000181cd 	.word	0x000181cd

00018710 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18710:	b580      	push	{r7, lr}
   18712:	b084      	sub	sp, #16
   18714:	af00      	add	r7, sp, #0
   18716:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18718:	687b      	ldr	r3, [r7, #4]
   1871a:	681b      	ldr	r3, [r3, #0]
   1871c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1871e:	687b      	ldr	r3, [r7, #4]
   18720:	0018      	movs	r0, r3
   18722:	4b0f      	ldr	r3, [pc, #60]	; (18760 <i2c_master_reset+0x50>)
   18724:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18726:	687b      	ldr	r3, [r7, #4]
   18728:	0018      	movs	r0, r3
   1872a:	4b0e      	ldr	r3, [pc, #56]	; (18764 <i2c_master_reset+0x54>)
   1872c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1872e:	4b0e      	ldr	r3, [pc, #56]	; (18768 <i2c_master_reset+0x58>)
   18730:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18732:	687b      	ldr	r3, [r7, #4]
   18734:	681b      	ldr	r3, [r3, #0]
   18736:	0018      	movs	r0, r3
   18738:	4b0c      	ldr	r3, [pc, #48]	; (1876c <i2c_master_reset+0x5c>)
   1873a:	4798      	blx	r3
   1873c:	0003      	movs	r3, r0
   1873e:	0018      	movs	r0, r3
   18740:	4b0b      	ldr	r3, [pc, #44]	; (18770 <i2c_master_reset+0x60>)
   18742:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18744:	4b0b      	ldr	r3, [pc, #44]	; (18774 <i2c_master_reset+0x64>)
   18746:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18748:	687b      	ldr	r3, [r7, #4]
   1874a:	0018      	movs	r0, r3
   1874c:	4b04      	ldr	r3, [pc, #16]	; (18760 <i2c_master_reset+0x50>)
   1874e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18750:	68fb      	ldr	r3, [r7, #12]
   18752:	2201      	movs	r2, #1
   18754:	601a      	str	r2, [r3, #0]
}
   18756:	46c0      	nop			; (mov r8, r8)
   18758:	46bd      	mov	sp, r7
   1875a:	b004      	add	sp, #16
   1875c:	bd80      	pop	{r7, pc}
   1875e:	46c0      	nop			; (mov r8, r8)
   18760:	00018151 	.word	0x00018151
   18764:	00018175 	.word	0x00018175
   18768:	000180d5 	.word	0x000180d5
   1876c:	0002821d 	.word	0x0002821d
   18770:	0002ab59 	.word	0x0002ab59
   18774:	000180e9 	.word	0x000180e9

00018778 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18778:	b580      	push	{r7, lr}
   1877a:	b084      	sub	sp, #16
   1877c:	af00      	add	r7, sp, #0
   1877e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18780:	687b      	ldr	r3, [r7, #4]
   18782:	681b      	ldr	r3, [r3, #0]
   18784:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18786:	68fb      	ldr	r3, [r7, #12]
   18788:	7e1b      	ldrb	r3, [r3, #24]
   1878a:	b2db      	uxtb	r3, r3
   1878c:	001a      	movs	r2, r3
   1878e:	2302      	movs	r3, #2
   18790:	4013      	ands	r3, r2
   18792:	d00b      	beq.n	187ac <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18794:	68fb      	ldr	r3, [r7, #12]
   18796:	2202      	movs	r2, #2
   18798:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1879a:	68fb      	ldr	r3, [r7, #12]
   1879c:	8b5b      	ldrh	r3, [r3, #26]
   1879e:	b29b      	uxth	r3, r3
   187a0:	001a      	movs	r2, r3
   187a2:	2302      	movs	r3, #2
   187a4:	4013      	ands	r3, r2
   187a6:	d011      	beq.n	187cc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   187a8:	2341      	movs	r3, #65	; 0x41
   187aa:	e010      	b.n	187ce <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   187ac:	68fb      	ldr	r3, [r7, #12]
   187ae:	8b5b      	ldrh	r3, [r3, #26]
   187b0:	b29b      	uxth	r3, r3
   187b2:	001a      	movs	r2, r3
   187b4:	2304      	movs	r3, #4
   187b6:	4013      	ands	r3, r2
   187b8:	d008      	beq.n	187cc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   187ba:	68fb      	ldr	r3, [r7, #12]
   187bc:	685b      	ldr	r3, [r3, #4]
   187be:	22c0      	movs	r2, #192	; 0xc0
   187c0:	0292      	lsls	r2, r2, #10
   187c2:	431a      	orrs	r2, r3
   187c4:	68fb      	ldr	r3, [r7, #12]
   187c6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   187c8:	2318      	movs	r3, #24
   187ca:	e000      	b.n	187ce <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   187cc:	2300      	movs	r3, #0
}
   187ce:	0018      	movs	r0, r3
   187d0:	46bd      	mov	sp, r7
   187d2:	b004      	add	sp, #16
   187d4:	bd80      	pop	{r7, pc}

000187d6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   187d6:	b580      	push	{r7, lr}
   187d8:	b084      	sub	sp, #16
   187da:	af00      	add	r7, sp, #0
   187dc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187de:	687b      	ldr	r3, [r7, #4]
   187e0:	681b      	ldr	r3, [r3, #0]
   187e2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   187e4:	230e      	movs	r3, #14
   187e6:	18fb      	adds	r3, r7, r3
   187e8:	2200      	movs	r2, #0
   187ea:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   187ec:	e00f      	b.n	1880e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   187ee:	230e      	movs	r3, #14
   187f0:	18fb      	adds	r3, r7, r3
   187f2:	220e      	movs	r2, #14
   187f4:	18ba      	adds	r2, r7, r2
   187f6:	8812      	ldrh	r2, [r2, #0]
   187f8:	3201      	adds	r2, #1
   187fa:	801a      	strh	r2, [r3, #0]
   187fc:	687b      	ldr	r3, [r7, #4]
   187fe:	891b      	ldrh	r3, [r3, #8]
   18800:	220e      	movs	r2, #14
   18802:	18ba      	adds	r2, r7, r2
   18804:	8812      	ldrh	r2, [r2, #0]
   18806:	429a      	cmp	r2, r3
   18808:	d301      	bcc.n	1880e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1880a:	2312      	movs	r3, #18
   1880c:	e00e      	b.n	1882c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1880e:	68bb      	ldr	r3, [r7, #8]
   18810:	7e1b      	ldrb	r3, [r3, #24]
   18812:	b2db      	uxtb	r3, r3
   18814:	001a      	movs	r2, r3
   18816:	2301      	movs	r3, #1
   18818:	4013      	ands	r3, r2
   1881a:	d106      	bne.n	1882a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1881c:	68bb      	ldr	r3, [r7, #8]
   1881e:	7e1b      	ldrb	r3, [r3, #24]
   18820:	b2db      	uxtb	r3, r3
   18822:	001a      	movs	r2, r3
   18824:	2302      	movs	r3, #2
   18826:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18828:	d0e1      	beq.n	187ee <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1882a:	2300      	movs	r3, #0
}
   1882c:	0018      	movs	r0, r3
   1882e:	46bd      	mov	sp, r7
   18830:	b004      	add	sp, #16
   18832:	bd80      	pop	{r7, pc}

00018834 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18834:	b590      	push	{r4, r7, lr}
   18836:	b085      	sub	sp, #20
   18838:	af00      	add	r7, sp, #0
   1883a:	6078      	str	r0, [r7, #4]
   1883c:	000a      	movs	r2, r1
   1883e:	1cfb      	adds	r3, r7, #3
   18840:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18842:	687b      	ldr	r3, [r7, #4]
   18844:	681b      	ldr	r3, [r3, #0]
   18846:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18848:	68fb      	ldr	r3, [r7, #12]
   1884a:	685b      	ldr	r3, [r3, #4]
   1884c:	2280      	movs	r2, #128	; 0x80
   1884e:	02d2      	lsls	r2, r2, #11
   18850:	431a      	orrs	r2, r3
   18852:	68fb      	ldr	r3, [r7, #12]
   18854:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18856:	1cfb      	adds	r3, r7, #3
   18858:	781a      	ldrb	r2, [r3, #0]
   1885a:	68fb      	ldr	r3, [r7, #12]
   1885c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1885e:	230b      	movs	r3, #11
   18860:	18fc      	adds	r4, r7, r3
   18862:	687b      	ldr	r3, [r7, #4]
   18864:	0018      	movs	r0, r3
   18866:	4b07      	ldr	r3, [pc, #28]	; (18884 <_i2c_master_send_hs_master_code+0x50>)
   18868:	4798      	blx	r3
   1886a:	0003      	movs	r3, r0
   1886c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1886e:	68fb      	ldr	r3, [r7, #12]
   18870:	2201      	movs	r2, #1
   18872:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18874:	230b      	movs	r3, #11
   18876:	18fb      	adds	r3, r7, r3
   18878:	781b      	ldrb	r3, [r3, #0]
}
   1887a:	0018      	movs	r0, r3
   1887c:	46bd      	mov	sp, r7
   1887e:	b005      	add	sp, #20
   18880:	bd90      	pop	{r4, r7, pc}
   18882:	46c0      	nop			; (mov r8, r8)
   18884:	000187d7 	.word	0x000187d7

00018888 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18888:	b580      	push	{r7, lr}
   1888a:	af00      	add	r7, sp, #0
   1888c:	2000      	movs	r0, #0
   1888e:	4b02      	ldr	r3, [pc, #8]	; (18898 <TC3_Handler+0x10>)
   18890:	4798      	blx	r3
   18892:	46c0      	nop			; (mov r8, r8)
   18894:	46bd      	mov	sp, r7
   18896:	bd80      	pop	{r7, pc}
   18898:	000188c5 	.word	0x000188c5

0001889c <TC4_Handler>:
   1889c:	b580      	push	{r7, lr}
   1889e:	af00      	add	r7, sp, #0
   188a0:	2001      	movs	r0, #1
   188a2:	4b02      	ldr	r3, [pc, #8]	; (188ac <TC4_Handler+0x10>)
   188a4:	4798      	blx	r3
   188a6:	46c0      	nop			; (mov r8, r8)
   188a8:	46bd      	mov	sp, r7
   188aa:	bd80      	pop	{r7, pc}
   188ac:	000188c5 	.word	0x000188c5

000188b0 <TC5_Handler>:
   188b0:	b580      	push	{r7, lr}
   188b2:	af00      	add	r7, sp, #0
   188b4:	2002      	movs	r0, #2
   188b6:	4b02      	ldr	r3, [pc, #8]	; (188c0 <TC5_Handler+0x10>)
   188b8:	4798      	blx	r3
   188ba:	46c0      	nop			; (mov r8, r8)
   188bc:	46bd      	mov	sp, r7
   188be:	bd80      	pop	{r7, pc}
   188c0:	000188c5 	.word	0x000188c5

000188c4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   188c4:	b580      	push	{r7, lr}
   188c6:	b084      	sub	sp, #16
   188c8:	af00      	add	r7, sp, #0
   188ca:	0002      	movs	r2, r0
   188cc:	1dfb      	adds	r3, r7, #7
   188ce:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   188d0:	1dfb      	adds	r3, r7, #7
   188d2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   188d4:	4b28      	ldr	r3, [pc, #160]	; (18978 <_tc_interrupt_handler+0xb4>)
   188d6:	0092      	lsls	r2, r2, #2
   188d8:	58d3      	ldr	r3, [r2, r3]
   188da:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   188dc:	68fb      	ldr	r3, [r7, #12]
   188de:	681b      	ldr	r3, [r3, #0]
   188e0:	7b9b      	ldrb	r3, [r3, #14]
   188e2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   188e4:	68fa      	ldr	r2, [r7, #12]
   188e6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   188e8:	4013      	ands	r3, r2
   188ea:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   188ec:	68fb      	ldr	r3, [r7, #12]
   188ee:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   188f0:	230b      	movs	r3, #11
   188f2:	18fb      	adds	r3, r7, r3
   188f4:	400a      	ands	r2, r1
   188f6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   188f8:	230b      	movs	r3, #11
   188fa:	18fb      	adds	r3, r7, r3
   188fc:	781b      	ldrb	r3, [r3, #0]
   188fe:	2201      	movs	r2, #1
   18900:	4013      	ands	r3, r2
   18902:	d008      	beq.n	18916 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18904:	68fb      	ldr	r3, [r7, #12]
   18906:	689b      	ldr	r3, [r3, #8]
   18908:	68fa      	ldr	r2, [r7, #12]
   1890a:	0010      	movs	r0, r2
   1890c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1890e:	68fb      	ldr	r3, [r7, #12]
   18910:	681b      	ldr	r3, [r3, #0]
   18912:	2201      	movs	r2, #1
   18914:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18916:	230b      	movs	r3, #11
   18918:	18fb      	adds	r3, r7, r3
   1891a:	781b      	ldrb	r3, [r3, #0]
   1891c:	2202      	movs	r2, #2
   1891e:	4013      	ands	r3, r2
   18920:	d008      	beq.n	18934 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18922:	68fb      	ldr	r3, [r7, #12]
   18924:	68db      	ldr	r3, [r3, #12]
   18926:	68fa      	ldr	r2, [r7, #12]
   18928:	0010      	movs	r0, r2
   1892a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1892c:	68fb      	ldr	r3, [r7, #12]
   1892e:	681b      	ldr	r3, [r3, #0]
   18930:	2202      	movs	r2, #2
   18932:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18934:	230b      	movs	r3, #11
   18936:	18fb      	adds	r3, r7, r3
   18938:	781b      	ldrb	r3, [r3, #0]
   1893a:	2210      	movs	r2, #16
   1893c:	4013      	ands	r3, r2
   1893e:	d008      	beq.n	18952 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18940:	68fb      	ldr	r3, [r7, #12]
   18942:	691b      	ldr	r3, [r3, #16]
   18944:	68fa      	ldr	r2, [r7, #12]
   18946:	0010      	movs	r0, r2
   18948:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1894a:	68fb      	ldr	r3, [r7, #12]
   1894c:	681b      	ldr	r3, [r3, #0]
   1894e:	2210      	movs	r2, #16
   18950:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18952:	230b      	movs	r3, #11
   18954:	18fb      	adds	r3, r7, r3
   18956:	781b      	ldrb	r3, [r3, #0]
   18958:	2220      	movs	r2, #32
   1895a:	4013      	ands	r3, r2
   1895c:	d008      	beq.n	18970 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1895e:	68fb      	ldr	r3, [r7, #12]
   18960:	695b      	ldr	r3, [r3, #20]
   18962:	68fa      	ldr	r2, [r7, #12]
   18964:	0010      	movs	r0, r2
   18966:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18968:	68fb      	ldr	r3, [r7, #12]
   1896a:	681b      	ldr	r3, [r3, #0]
   1896c:	2220      	movs	r2, #32
   1896e:	739a      	strb	r2, [r3, #14]
	}
}
   18970:	46c0      	nop			; (mov r8, r8)
   18972:	46bd      	mov	sp, r7
   18974:	b004      	add	sp, #16
   18976:	bd80      	pop	{r7, pc}
   18978:	20004a48 	.word	0x20004a48

0001897c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1897c:	b580      	push	{r7, lr}
   1897e:	b084      	sub	sp, #16
   18980:	af00      	add	r7, sp, #0
   18982:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18984:	2300      	movs	r3, #0
   18986:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18988:	687b      	ldr	r3, [r7, #4]
   1898a:	2b00      	cmp	r3, #0
   1898c:	d101      	bne.n	18992 <FreeRTOS_CLIRegisterCommand+0x16>
   1898e:	b672      	cpsid	i
   18990:	e7fe      	b.n	18990 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18992:	2008      	movs	r0, #8
   18994:	4b11      	ldr	r3, [pc, #68]	; (189dc <FreeRTOS_CLIRegisterCommand+0x60>)
   18996:	4798      	blx	r3
   18998:	0003      	movs	r3, r0
   1899a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1899c:	68bb      	ldr	r3, [r7, #8]
   1899e:	2b00      	cmp	r3, #0
   189a0:	d101      	bne.n	189a6 <FreeRTOS_CLIRegisterCommand+0x2a>
   189a2:	b672      	cpsid	i
   189a4:	e7fe      	b.n	189a4 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   189a6:	68bb      	ldr	r3, [r7, #8]
   189a8:	2b00      	cmp	r3, #0
   189aa:	d012      	beq.n	189d2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   189ac:	4b0c      	ldr	r3, [pc, #48]	; (189e0 <FreeRTOS_CLIRegisterCommand+0x64>)
   189ae:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   189b0:	68bb      	ldr	r3, [r7, #8]
   189b2:	687a      	ldr	r2, [r7, #4]
   189b4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   189b6:	68bb      	ldr	r3, [r7, #8]
   189b8:	2200      	movs	r2, #0
   189ba:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   189bc:	4b09      	ldr	r3, [pc, #36]	; (189e4 <FreeRTOS_CLIRegisterCommand+0x68>)
   189be:	681b      	ldr	r3, [r3, #0]
   189c0:	68ba      	ldr	r2, [r7, #8]
   189c2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   189c4:	4b07      	ldr	r3, [pc, #28]	; (189e4 <FreeRTOS_CLIRegisterCommand+0x68>)
   189c6:	68ba      	ldr	r2, [r7, #8]
   189c8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   189ca:	4b07      	ldr	r3, [pc, #28]	; (189e8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   189cc:	4798      	blx	r3

		xReturn = pdPASS;
   189ce:	2301      	movs	r3, #1
   189d0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   189d2:	68fb      	ldr	r3, [r7, #12]
}
   189d4:	0018      	movs	r0, r3
   189d6:	46bd      	mov	sp, r7
   189d8:	b004      	add	sp, #16
   189da:	bd80      	pop	{r7, pc}
   189dc:	0001ad91 	.word	0x0001ad91
   189e0:	0001ac59 	.word	0x0001ac59
   189e4:	20000100 	.word	0x20000100
   189e8:	0001ac7d 	.word	0x0001ac7d

000189ec <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   189ec:	b580      	push	{r7, lr}
   189ee:	b088      	sub	sp, #32
   189f0:	af00      	add	r7, sp, #0
   189f2:	60f8      	str	r0, [r7, #12]
   189f4:	60b9      	str	r1, [r7, #8]
   189f6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   189f8:	2301      	movs	r3, #1
   189fa:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   189fc:	4b3d      	ldr	r3, [pc, #244]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   189fe:	681b      	ldr	r3, [r3, #0]
   18a00:	2b00      	cmp	r3, #0
   18a02:	d144      	bne.n	18a8e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18a04:	4b3b      	ldr	r3, [pc, #236]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a06:	4a3c      	ldr	r2, [pc, #240]	; (18af8 <FreeRTOS_CLIProcessCommand+0x10c>)
   18a08:	601a      	str	r2, [r3, #0]
   18a0a:	e03a      	b.n	18a82 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18a0c:	4b39      	ldr	r3, [pc, #228]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a0e:	681b      	ldr	r3, [r3, #0]
   18a10:	681b      	ldr	r3, [r3, #0]
   18a12:	681b      	ldr	r3, [r3, #0]
   18a14:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18a16:	69bb      	ldr	r3, [r7, #24]
   18a18:	0018      	movs	r0, r3
   18a1a:	4b38      	ldr	r3, [pc, #224]	; (18afc <FreeRTOS_CLIProcessCommand+0x110>)
   18a1c:	4798      	blx	r3
   18a1e:	0003      	movs	r3, r0
   18a20:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18a22:	68fa      	ldr	r2, [r7, #12]
   18a24:	697b      	ldr	r3, [r7, #20]
   18a26:	18d3      	adds	r3, r2, r3
   18a28:	781b      	ldrb	r3, [r3, #0]
   18a2a:	2b20      	cmp	r3, #32
   18a2c:	d005      	beq.n	18a3a <FreeRTOS_CLIProcessCommand+0x4e>
   18a2e:	68fa      	ldr	r2, [r7, #12]
   18a30:	697b      	ldr	r3, [r7, #20]
   18a32:	18d3      	adds	r3, r2, r3
   18a34:	781b      	ldrb	r3, [r3, #0]
   18a36:	2b00      	cmp	r3, #0
   18a38:	d11e      	bne.n	18a78 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18a3a:	697a      	ldr	r2, [r7, #20]
   18a3c:	69b9      	ldr	r1, [r7, #24]
   18a3e:	68fb      	ldr	r3, [r7, #12]
   18a40:	0018      	movs	r0, r3
   18a42:	4b2f      	ldr	r3, [pc, #188]	; (18b00 <FreeRTOS_CLIProcessCommand+0x114>)
   18a44:	4798      	blx	r3
   18a46:	1e03      	subs	r3, r0, #0
   18a48:	d116      	bne.n	18a78 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18a4a:	4b2a      	ldr	r3, [pc, #168]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a4c:	681b      	ldr	r3, [r3, #0]
   18a4e:	681b      	ldr	r3, [r3, #0]
   18a50:	7b1b      	ldrb	r3, [r3, #12]
   18a52:	b25b      	sxtb	r3, r3
   18a54:	2b00      	cmp	r3, #0
   18a56:	db19      	blt.n	18a8c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18a58:	68fb      	ldr	r3, [r7, #12]
   18a5a:	0018      	movs	r0, r3
   18a5c:	4b29      	ldr	r3, [pc, #164]	; (18b04 <FreeRTOS_CLIProcessCommand+0x118>)
   18a5e:	4798      	blx	r3
   18a60:	0003      	movs	r3, r0
   18a62:	001a      	movs	r2, r3
   18a64:	4b23      	ldr	r3, [pc, #140]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a66:	681b      	ldr	r3, [r3, #0]
   18a68:	681b      	ldr	r3, [r3, #0]
   18a6a:	7b1b      	ldrb	r3, [r3, #12]
   18a6c:	b25b      	sxtb	r3, r3
   18a6e:	429a      	cmp	r2, r3
   18a70:	d00c      	beq.n	18a8c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18a72:	2300      	movs	r3, #0
   18a74:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18a76:	e009      	b.n	18a8c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18a78:	4b1e      	ldr	r3, [pc, #120]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a7a:	681b      	ldr	r3, [r3, #0]
   18a7c:	685a      	ldr	r2, [r3, #4]
   18a7e:	4b1d      	ldr	r3, [pc, #116]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a80:	601a      	str	r2, [r3, #0]
   18a82:	4b1c      	ldr	r3, [pc, #112]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a84:	681b      	ldr	r3, [r3, #0]
   18a86:	2b00      	cmp	r3, #0
   18a88:	d1c0      	bne.n	18a0c <FreeRTOS_CLIProcessCommand+0x20>
   18a8a:	e000      	b.n	18a8e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18a8c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18a8e:	4b19      	ldr	r3, [pc, #100]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18a90:	681b      	ldr	r3, [r3, #0]
   18a92:	2b00      	cmp	r3, #0
   18a94:	d00c      	beq.n	18ab0 <FreeRTOS_CLIProcessCommand+0xc4>
   18a96:	69fb      	ldr	r3, [r7, #28]
   18a98:	2b00      	cmp	r3, #0
   18a9a:	d109      	bne.n	18ab0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18a9c:	687a      	ldr	r2, [r7, #4]
   18a9e:	491a      	ldr	r1, [pc, #104]	; (18b08 <FreeRTOS_CLIProcessCommand+0x11c>)
   18aa0:	68bb      	ldr	r3, [r7, #8]
   18aa2:	0018      	movs	r0, r3
   18aa4:	4b19      	ldr	r3, [pc, #100]	; (18b0c <FreeRTOS_CLIProcessCommand+0x120>)
   18aa6:	4798      	blx	r3
		pxCommand = NULL;
   18aa8:	4b12      	ldr	r3, [pc, #72]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18aaa:	2200      	movs	r2, #0
   18aac:	601a      	str	r2, [r3, #0]
   18aae:	e01c      	b.n	18aea <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18ab0:	4b10      	ldr	r3, [pc, #64]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18ab2:	681b      	ldr	r3, [r3, #0]
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	d010      	beq.n	18ada <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18ab8:	4b0e      	ldr	r3, [pc, #56]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18aba:	681b      	ldr	r3, [r3, #0]
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	689b      	ldr	r3, [r3, #8]
   18ac0:	68fa      	ldr	r2, [r7, #12]
   18ac2:	6879      	ldr	r1, [r7, #4]
   18ac4:	68b8      	ldr	r0, [r7, #8]
   18ac6:	4798      	blx	r3
   18ac8:	0003      	movs	r3, r0
   18aca:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18acc:	69fb      	ldr	r3, [r7, #28]
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d10b      	bne.n	18aea <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18ad2:	4b08      	ldr	r3, [pc, #32]	; (18af4 <FreeRTOS_CLIProcessCommand+0x108>)
   18ad4:	2200      	movs	r2, #0
   18ad6:	601a      	str	r2, [r3, #0]
   18ad8:	e007      	b.n	18aea <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18ada:	687a      	ldr	r2, [r7, #4]
   18adc:	490c      	ldr	r1, [pc, #48]	; (18b10 <FreeRTOS_CLIProcessCommand+0x124>)
   18ade:	68bb      	ldr	r3, [r7, #8]
   18ae0:	0018      	movs	r0, r3
   18ae2:	4b0a      	ldr	r3, [pc, #40]	; (18b0c <FreeRTOS_CLIProcessCommand+0x120>)
   18ae4:	4798      	blx	r3
		xReturn = pdFALSE;
   18ae6:	2300      	movs	r3, #0
   18ae8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18aea:	69fb      	ldr	r3, [r7, #28]
}
   18aec:	0018      	movs	r0, r3
   18aee:	46bd      	mov	sp, r7
   18af0:	b008      	add	sp, #32
   18af2:	bd80      	pop	{r7, pc}
   18af4:	20000ccc 	.word	0x20000ccc
   18af8:	200000f8 	.word	0x200000f8
   18afc:	0003659f 	.word	0x0003659f
   18b00:	000365ad 	.word	0x000365ad
   18b04:	00018b75 	.word	0x00018b75
   18b08:	000387e8 	.word	0x000387e8
   18b0c:	000365cf 	.word	0x000365cf
   18b10:	00038840 	.word	0x00038840

00018b14 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18b14:	b580      	push	{r7, lr}
   18b16:	b086      	sub	sp, #24
   18b18:	af00      	add	r7, sp, #0
   18b1a:	60f8      	str	r0, [r7, #12]
   18b1c:	60b9      	str	r1, [r7, #8]
   18b1e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18b20:	4b11      	ldr	r3, [pc, #68]	; (18b68 <prvHelpCommand+0x54>)
   18b22:	681b      	ldr	r3, [r3, #0]
   18b24:	2b00      	cmp	r3, #0
   18b26:	d102      	bne.n	18b2e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18b28:	4b0f      	ldr	r3, [pc, #60]	; (18b68 <prvHelpCommand+0x54>)
   18b2a:	4a10      	ldr	r2, [pc, #64]	; (18b6c <prvHelpCommand+0x58>)
   18b2c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18b2e:	4b0e      	ldr	r3, [pc, #56]	; (18b68 <prvHelpCommand+0x54>)
   18b30:	681b      	ldr	r3, [r3, #0]
   18b32:	681b      	ldr	r3, [r3, #0]
   18b34:	6859      	ldr	r1, [r3, #4]
   18b36:	68ba      	ldr	r2, [r7, #8]
   18b38:	68fb      	ldr	r3, [r7, #12]
   18b3a:	0018      	movs	r0, r3
   18b3c:	4b0c      	ldr	r3, [pc, #48]	; (18b70 <prvHelpCommand+0x5c>)
   18b3e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18b40:	4b09      	ldr	r3, [pc, #36]	; (18b68 <prvHelpCommand+0x54>)
   18b42:	681b      	ldr	r3, [r3, #0]
   18b44:	685a      	ldr	r2, [r3, #4]
   18b46:	4b08      	ldr	r3, [pc, #32]	; (18b68 <prvHelpCommand+0x54>)
   18b48:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18b4a:	4b07      	ldr	r3, [pc, #28]	; (18b68 <prvHelpCommand+0x54>)
   18b4c:	681b      	ldr	r3, [r3, #0]
   18b4e:	2b00      	cmp	r3, #0
   18b50:	d102      	bne.n	18b58 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18b52:	2300      	movs	r3, #0
   18b54:	617b      	str	r3, [r7, #20]
   18b56:	e001      	b.n	18b5c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18b58:	2301      	movs	r3, #1
   18b5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18b5c:	697b      	ldr	r3, [r7, #20]
}
   18b5e:	0018      	movs	r0, r3
   18b60:	46bd      	mov	sp, r7
   18b62:	b006      	add	sp, #24
   18b64:	bd80      	pop	{r7, pc}
   18b66:	46c0      	nop			; (mov r8, r8)
   18b68:	20000cd0 	.word	0x20000cd0
   18b6c:	200000f8 	.word	0x200000f8
   18b70:	000365cf 	.word	0x000365cf

00018b74 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18b74:	b580      	push	{r7, lr}
   18b76:	b084      	sub	sp, #16
   18b78:	af00      	add	r7, sp, #0
   18b7a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18b7c:	230f      	movs	r3, #15
   18b7e:	18fb      	adds	r3, r7, r3
   18b80:	2200      	movs	r2, #0
   18b82:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18b84:	2300      	movs	r3, #0
   18b86:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18b88:	e018      	b.n	18bbc <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18b8a:	687b      	ldr	r3, [r7, #4]
   18b8c:	781b      	ldrb	r3, [r3, #0]
   18b8e:	2b20      	cmp	r3, #32
   18b90:	d10f      	bne.n	18bb2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18b92:	68bb      	ldr	r3, [r7, #8]
   18b94:	2b01      	cmp	r3, #1
   18b96:	d00e      	beq.n	18bb6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18b98:	230f      	movs	r3, #15
   18b9a:	18fb      	adds	r3, r7, r3
   18b9c:	781b      	ldrb	r3, [r3, #0]
   18b9e:	b25b      	sxtb	r3, r3
   18ba0:	b2db      	uxtb	r3, r3
   18ba2:	3301      	adds	r3, #1
   18ba4:	b2da      	uxtb	r2, r3
   18ba6:	230f      	movs	r3, #15
   18ba8:	18fb      	adds	r3, r7, r3
   18baa:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18bac:	2301      	movs	r3, #1
   18bae:	60bb      	str	r3, [r7, #8]
   18bb0:	e001      	b.n	18bb6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18bb2:	2300      	movs	r3, #0
   18bb4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18bb6:	687b      	ldr	r3, [r7, #4]
   18bb8:	3301      	adds	r3, #1
   18bba:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18bbc:	687b      	ldr	r3, [r7, #4]
   18bbe:	781b      	ldrb	r3, [r3, #0]
   18bc0:	2b00      	cmp	r3, #0
   18bc2:	d1e2      	bne.n	18b8a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18bc4:	68bb      	ldr	r3, [r7, #8]
   18bc6:	2b01      	cmp	r3, #1
   18bc8:	d109      	bne.n	18bde <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18bca:	230f      	movs	r3, #15
   18bcc:	18fb      	adds	r3, r7, r3
   18bce:	781b      	ldrb	r3, [r3, #0]
   18bd0:	b25b      	sxtb	r3, r3
   18bd2:	b2db      	uxtb	r3, r3
   18bd4:	3b01      	subs	r3, #1
   18bd6:	b2da      	uxtb	r2, r3
   18bd8:	230f      	movs	r3, #15
   18bda:	18fb      	adds	r3, r7, r3
   18bdc:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18bde:	230f      	movs	r3, #15
   18be0:	18fb      	adds	r3, r7, r3
   18be2:	781b      	ldrb	r3, [r3, #0]
   18be4:	b25b      	sxtb	r3, r3
}
   18be6:	0018      	movs	r0, r3
   18be8:	46bd      	mov	sp, r7
   18bea:	b004      	add	sp, #16
   18bec:	bd80      	pop	{r7, pc}
	...

00018bf0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18bf0:	b580      	push	{r7, lr}
   18bf2:	b082      	sub	sp, #8
   18bf4:	af00      	add	r7, sp, #0
   18bf6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18bf8:	687b      	ldr	r3, [r7, #4]
   18bfa:	0018      	movs	r0, r3
   18bfc:	4b03      	ldr	r3, [pc, #12]	; (18c0c <prvTraceGetQueueNumber+0x1c>)
   18bfe:	4798      	blx	r3
   18c00:	0003      	movs	r3, r0
}
   18c02:	0018      	movs	r0, r3
   18c04:	46bd      	mov	sp, r7
   18c06:	b002      	add	sp, #8
   18c08:	bd80      	pop	{r7, pc}
   18c0a:	46c0      	nop			; (mov r8, r8)
   18c0c:	0001c3b5 	.word	0x0001c3b5

00018c10 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18c10:	b580      	push	{r7, lr}
   18c12:	b082      	sub	sp, #8
   18c14:	af00      	add	r7, sp, #0
   18c16:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18c18:	687b      	ldr	r3, [r7, #4]
   18c1a:	0018      	movs	r0, r3
   18c1c:	4b03      	ldr	r3, [pc, #12]	; (18c2c <prvTraceGetQueueType+0x1c>)
   18c1e:	4798      	blx	r3
   18c20:	0003      	movs	r3, r0
}
   18c22:	0018      	movs	r0, r3
   18c24:	46bd      	mov	sp, r7
   18c26:	b002      	add	sp, #8
   18c28:	bd80      	pop	{r7, pc}
   18c2a:	46c0      	nop			; (mov r8, r8)
   18c2c:	0001c3e1 	.word	0x0001c3e1

00018c30 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18c30:	b580      	push	{r7, lr}
   18c32:	b082      	sub	sp, #8
   18c34:	af00      	add	r7, sp, #0
   18c36:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18c38:	687b      	ldr	r3, [r7, #4]
   18c3a:	0018      	movs	r0, r3
   18c3c:	4b03      	ldr	r3, [pc, #12]	; (18c4c <prvTraceGetTaskNumberLow16+0x1c>)
   18c3e:	4798      	blx	r3
   18c40:	0003      	movs	r3, r0
   18c42:	b29b      	uxth	r3, r3
}
   18c44:	0018      	movs	r0, r3
   18c46:	46bd      	mov	sp, r7
   18c48:	b002      	add	sp, #8
   18c4a:	bd80      	pop	{r7, pc}
   18c4c:	0001d711 	.word	0x0001d711

00018c50 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18c50:	b580      	push	{r7, lr}
   18c52:	b082      	sub	sp, #8
   18c54:	af00      	add	r7, sp, #0
   18c56:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18c58:	687b      	ldr	r3, [r7, #4]
   18c5a:	0018      	movs	r0, r3
   18c5c:	4b04      	ldr	r3, [pc, #16]	; (18c70 <prvTraceGetTaskNumberHigh16+0x20>)
   18c5e:	4798      	blx	r3
   18c60:	0003      	movs	r3, r0
   18c62:	0c1b      	lsrs	r3, r3, #16
   18c64:	b29b      	uxth	r3, r3
}
   18c66:	0018      	movs	r0, r3
   18c68:	46bd      	mov	sp, r7
   18c6a:	b002      	add	sp, #8
   18c6c:	bd80      	pop	{r7, pc}
   18c6e:	46c0      	nop			; (mov r8, r8)
   18c70:	0001d711 	.word	0x0001d711

00018c74 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18c74:	b580      	push	{r7, lr}
   18c76:	b082      	sub	sp, #8
   18c78:	af00      	add	r7, sp, #0
   18c7a:	6078      	str	r0, [r7, #4]
   18c7c:	000a      	movs	r2, r1
   18c7e:	1cbb      	adds	r3, r7, #2
   18c80:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18c82:	687b      	ldr	r3, [r7, #4]
   18c84:	0018      	movs	r0, r3
   18c86:	4b08      	ldr	r3, [pc, #32]	; (18ca8 <prvTraceSetTaskNumberLow16+0x34>)
   18c88:	4798      	blx	r3
   18c8a:	0003      	movs	r3, r0
   18c8c:	0c1b      	lsrs	r3, r3, #16
   18c8e:	041a      	lsls	r2, r3, #16
   18c90:	1cbb      	adds	r3, r7, #2
   18c92:	881b      	ldrh	r3, [r3, #0]
   18c94:	431a      	orrs	r2, r3
   18c96:	687b      	ldr	r3, [r7, #4]
   18c98:	0011      	movs	r1, r2
   18c9a:	0018      	movs	r0, r3
   18c9c:	4b03      	ldr	r3, [pc, #12]	; (18cac <prvTraceSetTaskNumberLow16+0x38>)
   18c9e:	4798      	blx	r3
}
   18ca0:	46c0      	nop			; (mov r8, r8)
   18ca2:	46bd      	mov	sp, r7
   18ca4:	b002      	add	sp, #8
   18ca6:	bd80      	pop	{r7, pc}
   18ca8:	0001d711 	.word	0x0001d711
   18cac:	0001d739 	.word	0x0001d739

00018cb0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18cb0:	b580      	push	{r7, lr}
   18cb2:	b082      	sub	sp, #8
   18cb4:	af00      	add	r7, sp, #0
   18cb6:	6078      	str	r0, [r7, #4]
   18cb8:	000a      	movs	r2, r1
   18cba:	1cbb      	adds	r3, r7, #2
   18cbc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18cbe:	687b      	ldr	r3, [r7, #4]
   18cc0:	0018      	movs	r0, r3
   18cc2:	4b09      	ldr	r3, [pc, #36]	; (18ce8 <prvTraceSetTaskNumberHigh16+0x38>)
   18cc4:	4798      	blx	r3
   18cc6:	0003      	movs	r3, r0
   18cc8:	041b      	lsls	r3, r3, #16
   18cca:	0c1a      	lsrs	r2, r3, #16
   18ccc:	1cbb      	adds	r3, r7, #2
   18cce:	881b      	ldrh	r3, [r3, #0]
   18cd0:	041b      	lsls	r3, r3, #16
   18cd2:	431a      	orrs	r2, r3
   18cd4:	687b      	ldr	r3, [r7, #4]
   18cd6:	0011      	movs	r1, r2
   18cd8:	0018      	movs	r0, r3
   18cda:	4b04      	ldr	r3, [pc, #16]	; (18cec <prvTraceSetTaskNumberHigh16+0x3c>)
   18cdc:	4798      	blx	r3
}
   18cde:	46c0      	nop			; (mov r8, r8)
   18ce0:	46bd      	mov	sp, r7
   18ce2:	b002      	add	sp, #8
   18ce4:	bd80      	pop	{r7, pc}
   18ce6:	46c0      	nop			; (mov r8, r8)
   18ce8:	0001d711 	.word	0x0001d711
   18cec:	0001d739 	.word	0x0001d739

00018cf0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18cf0:	b580      	push	{r7, lr}
   18cf2:	b082      	sub	sp, #8
   18cf4:	af00      	add	r7, sp, #0
   18cf6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18cf8:	687b      	ldr	r3, [r7, #4]
   18cfa:	0018      	movs	r0, r3
   18cfc:	4b03      	ldr	r3, [pc, #12]	; (18d0c <prvTraceGetQueueNumberLow16+0x1c>)
   18cfe:	4798      	blx	r3
   18d00:	0003      	movs	r3, r0
   18d02:	b29b      	uxth	r3, r3
}
   18d04:	0018      	movs	r0, r3
   18d06:	46bd      	mov	sp, r7
   18d08:	b002      	add	sp, #8
   18d0a:	bd80      	pop	{r7, pc}
   18d0c:	00018bf1 	.word	0x00018bf1

00018d10 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18d10:	b580      	push	{r7, lr}
   18d12:	b082      	sub	sp, #8
   18d14:	af00      	add	r7, sp, #0
   18d16:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18d18:	687b      	ldr	r3, [r7, #4]
   18d1a:	0018      	movs	r0, r3
   18d1c:	4b04      	ldr	r3, [pc, #16]	; (18d30 <prvTraceGetQueueNumberHigh16+0x20>)
   18d1e:	4798      	blx	r3
   18d20:	0003      	movs	r3, r0
   18d22:	0c1b      	lsrs	r3, r3, #16
   18d24:	b29b      	uxth	r3, r3
}
   18d26:	0018      	movs	r0, r3
   18d28:	46bd      	mov	sp, r7
   18d2a:	b002      	add	sp, #8
   18d2c:	bd80      	pop	{r7, pc}
   18d2e:	46c0      	nop			; (mov r8, r8)
   18d30:	00018bf1 	.word	0x00018bf1

00018d34 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18d34:	b580      	push	{r7, lr}
   18d36:	b082      	sub	sp, #8
   18d38:	af00      	add	r7, sp, #0
   18d3a:	6078      	str	r0, [r7, #4]
   18d3c:	000a      	movs	r2, r1
   18d3e:	1cbb      	adds	r3, r7, #2
   18d40:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18d42:	687b      	ldr	r3, [r7, #4]
   18d44:	0018      	movs	r0, r3
   18d46:	4b08      	ldr	r3, [pc, #32]	; (18d68 <prvTraceSetQueueNumberLow16+0x34>)
   18d48:	4798      	blx	r3
   18d4a:	0003      	movs	r3, r0
   18d4c:	0c1b      	lsrs	r3, r3, #16
   18d4e:	041a      	lsls	r2, r3, #16
   18d50:	1cbb      	adds	r3, r7, #2
   18d52:	881b      	ldrh	r3, [r3, #0]
   18d54:	431a      	orrs	r2, r3
   18d56:	687b      	ldr	r3, [r7, #4]
   18d58:	0011      	movs	r1, r2
   18d5a:	0018      	movs	r0, r3
   18d5c:	4b03      	ldr	r3, [pc, #12]	; (18d6c <prvTraceSetQueueNumberLow16+0x38>)
   18d5e:	4798      	blx	r3
}
   18d60:	46c0      	nop			; (mov r8, r8)
   18d62:	46bd      	mov	sp, r7
   18d64:	b002      	add	sp, #8
   18d66:	bd80      	pop	{r7, pc}
   18d68:	00018bf1 	.word	0x00018bf1
   18d6c:	0001c3c9 	.word	0x0001c3c9

00018d70 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18d70:	b580      	push	{r7, lr}
   18d72:	b082      	sub	sp, #8
   18d74:	af00      	add	r7, sp, #0
   18d76:	6078      	str	r0, [r7, #4]
   18d78:	000a      	movs	r2, r1
   18d7a:	1cbb      	adds	r3, r7, #2
   18d7c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18d7e:	687b      	ldr	r3, [r7, #4]
   18d80:	0018      	movs	r0, r3
   18d82:	4b09      	ldr	r3, [pc, #36]	; (18da8 <prvTraceSetQueueNumberHigh16+0x38>)
   18d84:	4798      	blx	r3
   18d86:	0003      	movs	r3, r0
   18d88:	041b      	lsls	r3, r3, #16
   18d8a:	0c1a      	lsrs	r2, r3, #16
   18d8c:	1cbb      	adds	r3, r7, #2
   18d8e:	881b      	ldrh	r3, [r3, #0]
   18d90:	041b      	lsls	r3, r3, #16
   18d92:	431a      	orrs	r2, r3
   18d94:	687b      	ldr	r3, [r7, #4]
   18d96:	0011      	movs	r1, r2
   18d98:	0018      	movs	r0, r3
   18d9a:	4b04      	ldr	r3, [pc, #16]	; (18dac <prvTraceSetQueueNumberHigh16+0x3c>)
   18d9c:	4798      	blx	r3
}
   18d9e:	46c0      	nop			; (mov r8, r8)
   18da0:	46bd      	mov	sp, r7
   18da2:	b002      	add	sp, #8
   18da4:	bd80      	pop	{r7, pc}
   18da6:	46c0      	nop			; (mov r8, r8)
   18da8:	00018bf1 	.word	0x00018bf1
   18dac:	0001c3c9 	.word	0x0001c3c9

00018db0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18db0:	b580      	push	{r7, lr}
   18db2:	b084      	sub	sp, #16
   18db4:	af00      	add	r7, sp, #0
   18db6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18db8:	2300      	movs	r3, #0
   18dba:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18dbc:	2300      	movs	r3, #0
   18dbe:	60bb      	str	r3, [r7, #8]
   18dc0:	e018      	b.n	18df4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18dc2:	4b14      	ldr	r3, [pc, #80]	; (18e14 <prvAddTaskToStackMonitor+0x64>)
   18dc4:	68ba      	ldr	r2, [r7, #8]
   18dc6:	00d2      	lsls	r2, r2, #3
   18dc8:	58d3      	ldr	r3, [r2, r3]
   18dca:	2b00      	cmp	r3, #0
   18dcc:	d10f      	bne.n	18dee <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18dce:	4b11      	ldr	r3, [pc, #68]	; (18e14 <prvAddTaskToStackMonitor+0x64>)
   18dd0:	68ba      	ldr	r2, [r7, #8]
   18dd2:	00d2      	lsls	r2, r2, #3
   18dd4:	6879      	ldr	r1, [r7, #4]
   18dd6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18dd8:	4a0e      	ldr	r2, [pc, #56]	; (18e14 <prvAddTaskToStackMonitor+0x64>)
   18dda:	68bb      	ldr	r3, [r7, #8]
   18ddc:	00db      	lsls	r3, r3, #3
   18dde:	18d3      	adds	r3, r2, r3
   18de0:	3304      	adds	r3, #4
   18de2:	2201      	movs	r2, #1
   18de4:	4252      	negs	r2, r2
   18de6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18de8:	2301      	movs	r3, #1
   18dea:	60fb      	str	r3, [r7, #12]
			break;
   18dec:	e005      	b.n	18dfa <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18dee:	68bb      	ldr	r3, [r7, #8]
   18df0:	3301      	adds	r3, #1
   18df2:	60bb      	str	r3, [r7, #8]
   18df4:	68bb      	ldr	r3, [r7, #8]
   18df6:	2b09      	cmp	r3, #9
   18df8:	dde3      	ble.n	18dc2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18dfa:	68fb      	ldr	r3, [r7, #12]
   18dfc:	2b00      	cmp	r3, #0
   18dfe:	d104      	bne.n	18e0a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18e00:	4b05      	ldr	r3, [pc, #20]	; (18e18 <prvAddTaskToStackMonitor+0x68>)
   18e02:	681b      	ldr	r3, [r3, #0]
   18e04:	1c5a      	adds	r2, r3, #1
   18e06:	4b04      	ldr	r3, [pc, #16]	; (18e18 <prvAddTaskToStackMonitor+0x68>)
   18e08:	601a      	str	r2, [r3, #0]
	}
}
   18e0a:	46c0      	nop			; (mov r8, r8)
   18e0c:	46bd      	mov	sp, r7
   18e0e:	b004      	add	sp, #16
   18e10:	bd80      	pop	{r7, pc}
   18e12:	46c0      	nop			; (mov r8, r8)
   18e14:	20000cd8 	.word	0x20000cd8
   18e18:	20000d28 	.word	0x20000d28

00018e1c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18e1c:	b590      	push	{r4, r7, lr}
   18e1e:	b085      	sub	sp, #20
   18e20:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18e22:	2300      	movs	r3, #0
   18e24:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18e26:	4b2b      	ldr	r3, [pc, #172]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e28:	681b      	ldr	r3, [r3, #0]
   18e2a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18e2c:	4b29      	ldr	r3, [pc, #164]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e2e:	681a      	ldr	r2, [r3, #0]
   18e30:	4b29      	ldr	r3, [pc, #164]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e32:	00d2      	lsls	r2, r2, #3
   18e34:	58d3      	ldr	r3, [r2, r3]
   18e36:	2b00      	cmp	r3, #0
   18e38:	d035      	beq.n	18ea6 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18e3a:	4b26      	ldr	r3, [pc, #152]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e3c:	681a      	ldr	r2, [r3, #0]
   18e3e:	4b26      	ldr	r3, [pc, #152]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e40:	00d2      	lsls	r2, r2, #3
   18e42:	58d3      	ldr	r3, [r2, r3]
   18e44:	0018      	movs	r0, r3
   18e46:	4b25      	ldr	r3, [pc, #148]	; (18edc <prvReportStackUsage+0xc0>)
   18e48:	4798      	blx	r3
   18e4a:	0003      	movs	r3, r0
   18e4c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18e4e:	4b21      	ldr	r3, [pc, #132]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e50:	681b      	ldr	r3, [r3, #0]
   18e52:	4a21      	ldr	r2, [pc, #132]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e54:	00db      	lsls	r3, r3, #3
   18e56:	18d3      	adds	r3, r2, r3
   18e58:	3304      	adds	r3, #4
   18e5a:	681a      	ldr	r2, [r3, #0]
   18e5c:	687b      	ldr	r3, [r7, #4]
   18e5e:	429a      	cmp	r2, r3
   18e60:	d907      	bls.n	18e72 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18e62:	4b1c      	ldr	r3, [pc, #112]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e64:	681b      	ldr	r3, [r3, #0]
   18e66:	4a1c      	ldr	r2, [pc, #112]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e68:	00db      	lsls	r3, r3, #3
   18e6a:	18d3      	adds	r3, r2, r3
   18e6c:	3304      	adds	r3, #4
   18e6e:	687a      	ldr	r2, [r7, #4]
   18e70:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18e72:	4b18      	ldr	r3, [pc, #96]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e74:	681a      	ldr	r2, [r3, #0]
   18e76:	4b18      	ldr	r3, [pc, #96]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e78:	00d2      	lsls	r2, r2, #3
   18e7a:	58d3      	ldr	r3, [r2, r3]
   18e7c:	0018      	movs	r0, r3
   18e7e:	4b18      	ldr	r3, [pc, #96]	; (18ee0 <prvReportStackUsage+0xc4>)
   18e80:	4798      	blx	r3
   18e82:	0003      	movs	r3, r0
   18e84:	b2db      	uxtb	r3, r3
   18e86:	0019      	movs	r1, r3
   18e88:	4b12      	ldr	r3, [pc, #72]	; (18ed4 <prvReportStackUsage+0xb8>)
   18e8a:	681b      	ldr	r3, [r3, #0]
   18e8c:	4a12      	ldr	r2, [pc, #72]	; (18ed8 <prvReportStackUsage+0xbc>)
   18e8e:	00db      	lsls	r3, r3, #3
   18e90:	18d3      	adds	r3, r2, r3
   18e92:	3304      	adds	r3, #4
   18e94:	681b      	ldr	r3, [r3, #0]
   18e96:	000a      	movs	r2, r1
   18e98:	2103      	movs	r1, #3
   18e9a:	20ea      	movs	r0, #234	; 0xea
   18e9c:	4c11      	ldr	r4, [pc, #68]	; (18ee4 <prvReportStackUsage+0xc8>)
   18e9e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18ea0:	68fb      	ldr	r3, [r7, #12]
   18ea2:	3301      	adds	r3, #1
   18ea4:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18ea6:	4b0b      	ldr	r3, [pc, #44]	; (18ed4 <prvReportStackUsage+0xb8>)
   18ea8:	681b      	ldr	r3, [r3, #0]
   18eaa:	1c5a      	adds	r2, r3, #1
   18eac:	4b0e      	ldr	r3, [pc, #56]	; (18ee8 <prvReportStackUsage+0xcc>)
   18eae:	210a      	movs	r1, #10
   18eb0:	0010      	movs	r0, r2
   18eb2:	4798      	blx	r3
   18eb4:	000b      	movs	r3, r1
   18eb6:	001a      	movs	r2, r3
   18eb8:	4b06      	ldr	r3, [pc, #24]	; (18ed4 <prvReportStackUsage+0xb8>)
   18eba:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18ebc:	68fb      	ldr	r3, [r7, #12]
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	dc04      	bgt.n	18ecc <prvReportStackUsage+0xb0>
   18ec2:	4b04      	ldr	r3, [pc, #16]	; (18ed4 <prvReportStackUsage+0xb8>)
   18ec4:	681a      	ldr	r2, [r3, #0]
   18ec6:	68bb      	ldr	r3, [r7, #8]
   18ec8:	429a      	cmp	r2, r3
   18eca:	d1af      	bne.n	18e2c <prvReportStackUsage+0x10>
}
   18ecc:	46c0      	nop			; (mov r8, r8)
   18ece:	46bd      	mov	sp, r7
   18ed0:	b005      	add	sp, #20
   18ed2:	bd90      	pop	{r4, r7, pc}
   18ed4:	20000d2c 	.word	0x20000d2c
   18ed8:	20000cd8 	.word	0x20000cd8
   18edc:	0001d8b1 	.word	0x0001d8b1
   18ee0:	00018c31 	.word	0x00018c31
   18ee4:	00019779 	.word	0x00019779
   18ee8:	00033985 	.word	0x00033985

00018eec <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18eec:	b580      	push	{r7, lr}
   18eee:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18ef0:	4b02      	ldr	r3, [pc, #8]	; (18efc <prvTraceGetCurrentTaskHandle+0x10>)
   18ef2:	4798      	blx	r3
   18ef4:	0003      	movs	r3, r0
}
   18ef6:	0018      	movs	r0, r3
   18ef8:	46bd      	mov	sp, r7
   18efa:	bd80      	pop	{r7, pc}
   18efc:	0001d95d 	.word	0x0001d95d

00018f00 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18f00:	b590      	push	{r4, r7, lr}
   18f02:	b085      	sub	sp, #20
   18f04:	af02      	add	r7, sp, #8
   18f06:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18f08:	4b14      	ldr	r3, [pc, #80]	; (18f5c <vTraceEnable+0x5c>)
   18f0a:	4798      	blx	r3

	if (startOption == TRC_START)
   18f0c:	687b      	ldr	r3, [r7, #4]
   18f0e:	2b01      	cmp	r3, #1
   18f10:	d102      	bne.n	18f18 <vTraceEnable+0x18>
	{
		vTraceStart();
   18f12:	4b13      	ldr	r3, [pc, #76]	; (18f60 <vTraceEnable+0x60>)
   18f14:	4798      	blx	r3
   18f16:	e00e      	b.n	18f36 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18f18:	687b      	ldr	r3, [r7, #4]
   18f1a:	2b02      	cmp	r3, #2
   18f1c:	d104      	bne.n	18f28 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18f1e:	4b11      	ldr	r3, [pc, #68]	; (18f64 <vTraceEnable+0x64>)
   18f20:	0018      	movs	r0, r3
   18f22:	4b11      	ldr	r3, [pc, #68]	; (18f68 <vTraceEnable+0x68>)
   18f24:	4798      	blx	r3
   18f26:	e006      	b.n	18f36 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18f28:	687b      	ldr	r3, [r7, #4]
   18f2a:	2b00      	cmp	r3, #0
   18f2c:	d003      	beq.n	18f36 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18f2e:	4b0f      	ldr	r3, [pc, #60]	; (18f6c <vTraceEnable+0x6c>)
   18f30:	0018      	movs	r0, r3
   18f32:	4b0d      	ldr	r3, [pc, #52]	; (18f68 <vTraceEnable+0x68>)
   18f34:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18f36:	4b0e      	ldr	r3, [pc, #56]	; (18f70 <vTraceEnable+0x70>)
   18f38:	681b      	ldr	r3, [r3, #0]
   18f3a:	2b00      	cmp	r3, #0
   18f3c:	d10a      	bne.n	18f54 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18f3e:	2396      	movs	r3, #150	; 0x96
   18f40:	005a      	lsls	r2, r3, #1
   18f42:	490c      	ldr	r1, [pc, #48]	; (18f74 <vTraceEnable+0x74>)
   18f44:	480c      	ldr	r0, [pc, #48]	; (18f78 <vTraceEnable+0x78>)
   18f46:	4b0a      	ldr	r3, [pc, #40]	; (18f70 <vTraceEnable+0x70>)
   18f48:	9301      	str	r3, [sp, #4]
   18f4a:	2304      	movs	r3, #4
   18f4c:	9300      	str	r3, [sp, #0]
   18f4e:	2300      	movs	r3, #0
   18f50:	4c0a      	ldr	r4, [pc, #40]	; (18f7c <vTraceEnable+0x7c>)
   18f52:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18f54:	46c0      	nop			; (mov r8, r8)
   18f56:	46bd      	mov	sp, r7
   18f58:	b003      	add	sp, #12
   18f5a:	bd90      	pop	{r4, r7, pc}
   18f5c:	00019e45 	.word	0x00019e45
   18f60:	0001939d 	.word	0x0001939d
   18f64:	000388a0 	.word	0x000388a0
   18f68:	0001a4ed 	.word	0x0001a4ed
   18f6c:	000388e0 	.word	0x000388e0
   18f70:	20000cd4 	.word	0x20000cd4
   18f74:	00038914 	.word	0x00038914
   18f78:	00018f81 	.word	0x00018f81
   18f7c:	0001c8b5 	.word	0x0001c8b5

00018f80 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18f80:	b580      	push	{r7, lr}
   18f82:	b082      	sub	sp, #8
   18f84:	af00      	add	r7, sp, #0
   18f86:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18f88:	4b04      	ldr	r3, [pc, #16]	; (18f9c <TzCtrl+0x1c>)
   18f8a:	4798      	blx	r3
   18f8c:	1e03      	subs	r3, r0, #0
   18f8e:	d001      	beq.n	18f94 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18f90:	4b03      	ldr	r3, [pc, #12]	; (18fa0 <TzCtrl+0x20>)
   18f92:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18f94:	2004      	movs	r0, #4
   18f96:	4b03      	ldr	r3, [pc, #12]	; (18fa4 <TzCtrl+0x24>)
   18f98:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18f9a:	e7f5      	b.n	18f88 <TzCtrl+0x8>
   18f9c:	000193e1 	.word	0x000193e1
   18fa0:	00018e1d 	.word	0x00018e1d
   18fa4:	0001cc51 	.word	0x0001cc51

00018fa8 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18fa8:	b580      	push	{r7, lr}
   18faa:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18fac:	4b60      	ldr	r3, [pc, #384]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fae:	681b      	ldr	r3, [r3, #0]
   18fb0:	2209      	movs	r2, #9
   18fb2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18fb4:	4b5e      	ldr	r3, [pc, #376]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	2264      	movs	r2, #100	; 0x64
   18fba:	210a      	movs	r1, #10
   18fbc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18fbe:	4b5c      	ldr	r3, [pc, #368]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	2265      	movs	r2, #101	; 0x65
   18fc4:	210a      	movs	r1, #10
   18fc6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18fc8:	4b59      	ldr	r3, [pc, #356]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fca:	681b      	ldr	r3, [r3, #0]
   18fcc:	2266      	movs	r2, #102	; 0x66
   18fce:	210a      	movs	r1, #10
   18fd0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18fd2:	4b57      	ldr	r3, [pc, #348]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fd4:	681b      	ldr	r3, [r3, #0]
   18fd6:	2267      	movs	r2, #103	; 0x67
   18fd8:	210f      	movs	r1, #15
   18fda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18fdc:	4b54      	ldr	r3, [pc, #336]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2268      	movs	r2, #104	; 0x68
   18fe2:	2105      	movs	r1, #5
   18fe4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18fe6:	4b52      	ldr	r3, [pc, #328]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18fe8:	681b      	ldr	r3, [r3, #0]
   18fea:	2269      	movs	r2, #105	; 0x69
   18fec:	2105      	movs	r1, #5
   18fee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18ff0:	4b4f      	ldr	r3, [pc, #316]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18ff2:	681b      	ldr	r3, [r3, #0]
   18ff4:	226a      	movs	r2, #106	; 0x6a
   18ff6:	2105      	movs	r1, #5
   18ff8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18ffa:	4b4d      	ldr	r3, [pc, #308]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   18ffc:	681b      	ldr	r3, [r3, #0]
   18ffe:	226b      	movs	r2, #107	; 0x6b
   19000:	2105      	movs	r1, #5
   19002:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   19004:	4b4a      	ldr	r3, [pc, #296]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19006:	681b      	ldr	r3, [r3, #0]
   19008:	226c      	movs	r2, #108	; 0x6c
   1900a:	2105      	movs	r1, #5
   1900c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1900e:	4b48      	ldr	r3, [pc, #288]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19010:	681b      	ldr	r3, [r3, #0]
   19012:	2270      	movs	r2, #112	; 0x70
   19014:	210f      	movs	r1, #15
   19016:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   19018:	4b45      	ldr	r3, [pc, #276]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1901a:	681b      	ldr	r3, [r3, #0]
   1901c:	2271      	movs	r2, #113	; 0x71
   1901e:	210f      	movs	r1, #15
   19020:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19022:	4b43      	ldr	r3, [pc, #268]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19024:	681b      	ldr	r3, [r3, #0]
   19026:	2272      	movs	r2, #114	; 0x72
   19028:	210f      	movs	r1, #15
   1902a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1902c:	4b40      	ldr	r3, [pc, #256]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1902e:	681b      	ldr	r3, [r3, #0]
   19030:	2273      	movs	r2, #115	; 0x73
   19032:	210f      	movs	r1, #15
   19034:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   19036:	4b3e      	ldr	r3, [pc, #248]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19038:	681b      	ldr	r3, [r3, #0]
   1903a:	2274      	movs	r2, #116	; 0x74
   1903c:	210f      	movs	r1, #15
   1903e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   19040:	4b3b      	ldr	r3, [pc, #236]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19042:	681b      	ldr	r3, [r3, #0]
   19044:	2275      	movs	r2, #117	; 0x75
   19046:	210f      	movs	r1, #15
   19048:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1904a:	4b39      	ldr	r3, [pc, #228]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1904c:	681b      	ldr	r3, [r3, #0]
   1904e:	2276      	movs	r2, #118	; 0x76
   19050:	210f      	movs	r1, #15
   19052:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   19054:	4b36      	ldr	r3, [pc, #216]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19056:	681b      	ldr	r3, [r3, #0]
   19058:	2277      	movs	r2, #119	; 0x77
   1905a:	210f      	movs	r1, #15
   1905c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1905e:	4b34      	ldr	r3, [pc, #208]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19060:	681b      	ldr	r3, [r3, #0]
   19062:	2278      	movs	r2, #120	; 0x78
   19064:	210f      	movs	r1, #15
   19066:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   19068:	4b31      	ldr	r3, [pc, #196]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1906a:	681b      	ldr	r3, [r3, #0]
   1906c:	227c      	movs	r2, #124	; 0x7c
   1906e:	2110      	movs	r1, #16
   19070:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   19072:	4b2f      	ldr	r3, [pc, #188]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19074:	681b      	ldr	r3, [r3, #0]
   19076:	227d      	movs	r2, #125	; 0x7d
   19078:	2110      	movs	r1, #16
   1907a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1907c:	4b2c      	ldr	r3, [pc, #176]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1907e:	681b      	ldr	r3, [r3, #0]
   19080:	227e      	movs	r2, #126	; 0x7e
   19082:	2110      	movs	r1, #16
   19084:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   19086:	4b2a      	ldr	r3, [pc, #168]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19088:	681b      	ldr	r3, [r3, #0]
   1908a:	227f      	movs	r2, #127	; 0x7f
   1908c:	2113      	movs	r1, #19
   1908e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   19090:	4b27      	ldr	r3, [pc, #156]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	2280      	movs	r2, #128	; 0x80
   19096:	2111      	movs	r1, #17
   19098:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1909a:	4b25      	ldr	r3, [pc, #148]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1909c:	681b      	ldr	r3, [r3, #0]
   1909e:	2281      	movs	r2, #129	; 0x81
   190a0:	2110      	movs	r1, #16
   190a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   190a4:	4b22      	ldr	r3, [pc, #136]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	2282      	movs	r2, #130	; 0x82
   190aa:	2113      	movs	r1, #19
   190ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   190ae:	4b20      	ldr	r3, [pc, #128]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190b0:	681b      	ldr	r3, [r3, #0]
   190b2:	2283      	movs	r2, #131	; 0x83
   190b4:	2113      	movs	r1, #19
   190b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   190b8:	4b1d      	ldr	r3, [pc, #116]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190ba:	681b      	ldr	r3, [r3, #0]
   190bc:	2284      	movs	r2, #132	; 0x84
   190be:	2113      	movs	r1, #19
   190c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   190c2:	4b1b      	ldr	r3, [pc, #108]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190c4:	681b      	ldr	r3, [r3, #0]
   190c6:	2288      	movs	r2, #136	; 0x88
   190c8:	2100      	movs	r1, #0
   190ca:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   190cc:	4b18      	ldr	r3, [pc, #96]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190ce:	681b      	ldr	r3, [r3, #0]
   190d0:	228a      	movs	r2, #138	; 0x8a
   190d2:	21a0      	movs	r1, #160	; 0xa0
   190d4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   190d6:	4b16      	ldr	r3, [pc, #88]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190d8:	681b      	ldr	r3, [r3, #0]
   190da:	228c      	movs	r2, #140	; 0x8c
   190dc:	21a0      	movs	r1, #160	; 0xa0
   190de:	0049      	lsls	r1, r1, #1
   190e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   190e2:	4b13      	ldr	r3, [pc, #76]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190e4:	681b      	ldr	r3, [r3, #0]
   190e6:	228e      	movs	r2, #142	; 0x8e
   190e8:	21f0      	movs	r1, #240	; 0xf0
   190ea:	0049      	lsls	r1, r1, #1
   190ec:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   190ee:	4b10      	ldr	r3, [pc, #64]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190f0:	681b      	ldr	r3, [r3, #0]
   190f2:	2290      	movs	r2, #144	; 0x90
   190f4:	490f      	ldr	r1, [pc, #60]	; (19134 <vTraceInitObjectPropertyTable+0x18c>)
   190f6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   190f8:	4b0d      	ldr	r3, [pc, #52]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	2292      	movs	r2, #146	; 0x92
   190fe:	490e      	ldr	r1, [pc, #56]	; (19138 <vTraceInitObjectPropertyTable+0x190>)
   19100:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   19102:	4b0b      	ldr	r3, [pc, #44]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19104:	681b      	ldr	r3, [r3, #0]
   19106:	2294      	movs	r2, #148	; 0x94
   19108:	490c      	ldr	r1, [pc, #48]	; (1913c <vTraceInitObjectPropertyTable+0x194>)
   1910a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1910c:	4b08      	ldr	r3, [pc, #32]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   1910e:	681b      	ldr	r3, [r3, #0]
   19110:	2296      	movs	r2, #150	; 0x96
   19112:	490b      	ldr	r1, [pc, #44]	; (19140 <vTraceInitObjectPropertyTable+0x198>)
   19114:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   19116:	4b06      	ldr	r3, [pc, #24]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19118:	681b      	ldr	r3, [r3, #0]
   1911a:	2298      	movs	r2, #152	; 0x98
   1911c:	218c      	movs	r1, #140	; 0x8c
   1911e:	00c9      	lsls	r1, r1, #3
   19120:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19122:	4b03      	ldr	r3, [pc, #12]	; (19130 <vTraceInitObjectPropertyTable+0x188>)
   19124:	681b      	ldr	r3, [r3, #0]
   19126:	4a07      	ldr	r2, [pc, #28]	; (19144 <vTraceInitObjectPropertyTable+0x19c>)
   19128:	661a      	str	r2, [r3, #96]	; 0x60
}
   1912a:	46c0      	nop			; (mov r8, r8)
   1912c:	46bd      	mov	sp, r7
   1912e:	bd80      	pop	{r7, pc}
   19130:	20000dec 	.word	0x20000dec
   19134:	000002fd 	.word	0x000002fd
   19138:	00000352 	.word	0x00000352
   1913c:	000003a2 	.word	0x000003a2
   19140:	00000401 	.word	0x00000401
   19144:	000004bf 	.word	0x000004bf

00019148 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   19148:	b580      	push	{r7, lr}
   1914a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1914c:	4b2e      	ldr	r3, [pc, #184]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1914e:	2200      	movs	r2, #0
   19150:	825a      	strh	r2, [r3, #18]
   19152:	4b2d      	ldr	r3, [pc, #180]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19154:	8a5a      	ldrh	r2, [r3, #18]
   19156:	4b2c      	ldr	r3, [pc, #176]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19158:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1915a:	4b2b      	ldr	r3, [pc, #172]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1915c:	220a      	movs	r2, #10
   1915e:	829a      	strh	r2, [r3, #20]
   19160:	4b29      	ldr	r3, [pc, #164]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19162:	8a9a      	ldrh	r2, [r3, #20]
   19164:	4b28      	ldr	r3, [pc, #160]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19166:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   19168:	4b27      	ldr	r3, [pc, #156]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1916a:	2214      	movs	r2, #20
   1916c:	82da      	strh	r2, [r3, #22]
   1916e:	4b26      	ldr	r3, [pc, #152]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19170:	8ada      	ldrh	r2, [r3, #22]
   19172:	4b25      	ldr	r3, [pc, #148]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19174:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   19176:	4b24      	ldr	r3, [pc, #144]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19178:	221e      	movs	r2, #30
   1917a:	831a      	strh	r2, [r3, #24]
   1917c:	4b22      	ldr	r3, [pc, #136]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1917e:	8b1a      	ldrh	r2, [r3, #24]
   19180:	4b21      	ldr	r3, [pc, #132]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19182:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   19184:	4b20      	ldr	r3, [pc, #128]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19186:	222d      	movs	r2, #45	; 0x2d
   19188:	835a      	strh	r2, [r3, #26]
   1918a:	4b1f      	ldr	r3, [pc, #124]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1918c:	8b5a      	ldrh	r2, [r3, #26]
   1918e:	4b1e      	ldr	r3, [pc, #120]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19190:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   19192:	4b1d      	ldr	r3, [pc, #116]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   19194:	2232      	movs	r2, #50	; 0x32
   19196:	839a      	strh	r2, [r3, #28]
   19198:	4b1b      	ldr	r3, [pc, #108]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1919a:	8b9a      	ldrh	r2, [r3, #28]
   1919c:	4b1a      	ldr	r3, [pc, #104]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   1919e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   191a0:	4b19      	ldr	r3, [pc, #100]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191a2:	2237      	movs	r2, #55	; 0x37
   191a4:	83da      	strh	r2, [r3, #30]
   191a6:	4b18      	ldr	r3, [pc, #96]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191a8:	8bda      	ldrh	r2, [r3, #30]
   191aa:	4b17      	ldr	r3, [pc, #92]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191ac:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   191ae:	4b16      	ldr	r3, [pc, #88]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191b0:	223c      	movs	r2, #60	; 0x3c
   191b2:	841a      	strh	r2, [r3, #32]
   191b4:	4b14      	ldr	r3, [pc, #80]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191b6:	8c1a      	ldrh	r2, [r3, #32]
   191b8:	4b13      	ldr	r3, [pc, #76]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191ba:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   191bc:	4b12      	ldr	r3, [pc, #72]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191be:	2241      	movs	r2, #65	; 0x41
   191c0:	845a      	strh	r2, [r3, #34]	; 0x22
   191c2:	4b11      	ldr	r3, [pc, #68]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191c4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   191c6:	4b10      	ldr	r3, [pc, #64]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191c8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   191ca:	4b0f      	ldr	r3, [pc, #60]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191cc:	2209      	movs	r2, #9
   191ce:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   191d0:	4b0d      	ldr	r3, [pc, #52]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191d2:	2213      	movs	r2, #19
   191d4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   191d6:	4b0c      	ldr	r3, [pc, #48]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191d8:	221d      	movs	r2, #29
   191da:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   191dc:	4b0a      	ldr	r3, [pc, #40]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191de:	222c      	movs	r2, #44	; 0x2c
   191e0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   191e2:	4b09      	ldr	r3, [pc, #36]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191e4:	2231      	movs	r2, #49	; 0x31
   191e6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   191e8:	4b07      	ldr	r3, [pc, #28]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191ea:	2236      	movs	r2, #54	; 0x36
   191ec:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   191ee:	4b06      	ldr	r3, [pc, #24]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191f0:	223b      	movs	r2, #59	; 0x3b
   191f2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   191f4:	4b04      	ldr	r3, [pc, #16]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191f6:	2240      	movs	r2, #64	; 0x40
   191f8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   191fa:	4b03      	ldr	r3, [pc, #12]	; (19208 <vTraceInitObjectHandleStack+0xc0>)
   191fc:	2245      	movs	r2, #69	; 0x45
   191fe:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19200:	46c0      	nop			; (mov r8, r8)
   19202:	46bd      	mov	sp, r7
   19204:	bd80      	pop	{r7, pc}
   19206:	46c0      	nop			; (mov r8, r8)
   19208:	20000d5c 	.word	0x20000d5c

0001920c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1920c:	b580      	push	{r7, lr}
   1920e:	b082      	sub	sp, #8
   19210:	af00      	add	r7, sp, #0
   19212:	0002      	movs	r2, r0
   19214:	1dfb      	adds	r3, r7, #7
   19216:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   19218:	1dfb      	adds	r3, r7, #7
   1921a:	781b      	ldrb	r3, [r3, #0]
   1921c:	2b08      	cmp	r3, #8
   1921e:	d816      	bhi.n	1924e <pszTraceGetErrorNotEnoughHandles+0x42>
   19220:	009a      	lsls	r2, r3, #2
   19222:	4b0d      	ldr	r3, [pc, #52]	; (19258 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19224:	18d3      	adds	r3, r2, r3
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1922a:	4b0c      	ldr	r3, [pc, #48]	; (1925c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1922c:	e010      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1922e:	4b0c      	ldr	r3, [pc, #48]	; (19260 <pszTraceGetErrorNotEnoughHandles+0x54>)
   19230:	e00e      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   19232:	4b0c      	ldr	r3, [pc, #48]	; (19264 <pszTraceGetErrorNotEnoughHandles+0x58>)
   19234:	e00c      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   19236:	4b0c      	ldr	r3, [pc, #48]	; (19268 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   19238:	e00a      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1923a:	4b0c      	ldr	r3, [pc, #48]	; (1926c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1923c:	e008      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1923e:	4b0c      	ldr	r3, [pc, #48]	; (19270 <pszTraceGetErrorNotEnoughHandles+0x64>)
   19240:	e006      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   19242:	4b0c      	ldr	r3, [pc, #48]	; (19274 <pszTraceGetErrorNotEnoughHandles+0x68>)
   19244:	e004      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   19246:	4b0c      	ldr	r3, [pc, #48]	; (19278 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   19248:	e002      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1924a:	4b0c      	ldr	r3, [pc, #48]	; (1927c <pszTraceGetErrorNotEnoughHandles+0x70>)
   1924c:	e000      	b.n	19250 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1924e:	4b0c      	ldr	r3, [pc, #48]	; (19280 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   19250:	0018      	movs	r0, r3
   19252:	46bd      	mov	sp, r7
   19254:	b002      	add	sp, #8
   19256:	bd80      	pop	{r7, pc}
   19258:	00038c1c 	.word	0x00038c1c
   1925c:	0003891c 	.word	0x0003891c
   19260:	00038964 	.word	0x00038964
   19264:	000389ac 	.word	0x000389ac
   19268:	00038a00 	.word	0x00038a00
   1926c:	00038a4c 	.word	0x00038a4c
   19270:	00038a98 	.word	0x00038a98
   19274:	00038ae4 	.word	0x00038ae4
   19278:	00038b38 	.word	0x00038b38
   1927c:	00038b90 	.word	0x00038b90
   19280:	00038bec 	.word	0x00038bec

00019284 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   19284:	b590      	push	{r4, r7, lr}
   19286:	b087      	sub	sp, #28
   19288:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1928a:	2317      	movs	r3, #23
   1928c:	18fb      	adds	r3, r7, r3
   1928e:	2200      	movs	r2, #0
   19290:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   19292:	4b36      	ldr	r3, [pc, #216]	; (1936c <uiTraceStart+0xe8>)
   19294:	681b      	ldr	r3, [r3, #0]
   19296:	2b00      	cmp	r3, #0
   19298:	d10b      	bne.n	192b2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1929a:	4b34      	ldr	r3, [pc, #208]	; (1936c <uiTraceStart+0xe8>)
   1929c:	681b      	ldr	r3, [r3, #0]
   1929e:	2b00      	cmp	r3, #0
   192a0:	d105      	bne.n	192ae <uiTraceStart+0x2a>
   192a2:	4b33      	ldr	r3, [pc, #204]	; (19370 <uiTraceStart+0xec>)
   192a4:	0018      	movs	r0, r3
   192a6:	4b33      	ldr	r3, [pc, #204]	; (19374 <uiTraceStart+0xf0>)
   192a8:	4798      	blx	r3
   192aa:	2300      	movs	r3, #0
   192ac:	e059      	b.n	19362 <uiTraceStart+0xde>
		return 0;
   192ae:	2300      	movs	r3, #0
   192b0:	e057      	b.n	19362 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   192b2:	4b2e      	ldr	r3, [pc, #184]	; (1936c <uiTraceStart+0xe8>)
   192b4:	681b      	ldr	r3, [r3, #0]
   192b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   192b8:	2b01      	cmp	r3, #1
   192ba:	d101      	bne.n	192c0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   192bc:	2301      	movs	r3, #1
   192be:	e050      	b.n	19362 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   192c0:	4b2d      	ldr	r3, [pc, #180]	; (19378 <uiTraceStart+0xf4>)
   192c2:	681b      	ldr	r3, [r3, #0]
   192c4:	2b00      	cmp	r3, #0
   192c6:	d149      	bne.n	1935c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   192c8:	f3ef 8310 	mrs	r3, PRIMASK
   192cc:	60bb      	str	r3, [r7, #8]
  return(result);
   192ce:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   192d0:	613b      	str	r3, [r7, #16]
   192d2:	2301      	movs	r3, #1
   192d4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   192d6:	68fb      	ldr	r3, [r7, #12]
   192d8:	f383 8810 	msr	PRIMASK, r3
   192dc:	4b27      	ldr	r3, [pc, #156]	; (1937c <uiTraceStart+0xf8>)
   192de:	681b      	ldr	r3, [r3, #0]
   192e0:	1c5a      	adds	r2, r3, #1
   192e2:	4b26      	ldr	r3, [pc, #152]	; (1937c <uiTraceStart+0xf8>)
   192e4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   192e6:	4b21      	ldr	r3, [pc, #132]	; (1936c <uiTraceStart+0xe8>)
   192e8:	681b      	ldr	r3, [r3, #0]
   192ea:	2201      	movs	r2, #1
   192ec:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   192ee:	4b24      	ldr	r3, [pc, #144]	; (19380 <uiTraceStart+0xfc>)
   192f0:	4798      	blx	r3
   192f2:	0003      	movs	r3, r0
   192f4:	0018      	movs	r0, r3
   192f6:	4b23      	ldr	r3, [pc, #140]	; (19384 <uiTraceStart+0x100>)
   192f8:	4798      	blx	r3
   192fa:	0003      	movs	r3, r0
   192fc:	001a      	movs	r2, r3
   192fe:	2317      	movs	r3, #23
   19300:	18fb      	adds	r3, r7, r3
   19302:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19304:	2317      	movs	r3, #23
   19306:	18fb      	adds	r3, r7, r3
   19308:	781b      	ldrb	r3, [r3, #0]
   1930a:	2b00      	cmp	r3, #0
   1930c:	d116      	bne.n	1933c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1930e:	2317      	movs	r3, #23
   19310:	18fc      	adds	r4, r7, r3
   19312:	2003      	movs	r0, #3
   19314:	4b1c      	ldr	r3, [pc, #112]	; (19388 <uiTraceStart+0x104>)
   19316:	4798      	blx	r3
   19318:	0003      	movs	r3, r0
   1931a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1931c:	4a1b      	ldr	r2, [pc, #108]	; (1938c <uiTraceStart+0x108>)
   1931e:	2317      	movs	r3, #23
   19320:	18fb      	adds	r3, r7, r3
   19322:	781b      	ldrb	r3, [r3, #0]
   19324:	0019      	movs	r1, r3
   19326:	2003      	movs	r0, #3
   19328:	4b19      	ldr	r3, [pc, #100]	; (19390 <uiTraceStart+0x10c>)
   1932a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1932c:	2317      	movs	r3, #23
   1932e:	18fb      	adds	r3, r7, r3
   19330:	781b      	ldrb	r3, [r3, #0]
   19332:	2200      	movs	r2, #0
   19334:	0019      	movs	r1, r3
   19336:	2003      	movs	r0, #3
   19338:	4b16      	ldr	r3, [pc, #88]	; (19394 <uiTraceStart+0x110>)
   1933a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1933c:	2317      	movs	r3, #23
   1933e:	18fb      	adds	r3, r7, r3
   19340:	781b      	ldrb	r3, [r3, #0]
   19342:	0018      	movs	r0, r3
   19344:	4b14      	ldr	r3, [pc, #80]	; (19398 <uiTraceStart+0x114>)
   19346:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   19348:	4b0c      	ldr	r3, [pc, #48]	; (1937c <uiTraceStart+0xf8>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	1e5a      	subs	r2, r3, #1
   1934e:	4b0b      	ldr	r3, [pc, #44]	; (1937c <uiTraceStart+0xf8>)
   19350:	601a      	str	r2, [r3, #0]
   19352:	693b      	ldr	r3, [r7, #16]
   19354:	607b      	str	r3, [r7, #4]
   19356:	687b      	ldr	r3, [r7, #4]
   19358:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1935c:	4b03      	ldr	r3, [pc, #12]	; (1936c <uiTraceStart+0xe8>)
   1935e:	681b      	ldr	r3, [r3, #0]
   19360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   19362:	0018      	movs	r0, r3
   19364:	46bd      	mov	sp, r7
   19366:	b007      	add	sp, #28
   19368:	bd90      	pop	{r4, r7, pc}
   1936a:	46c0      	nop			; (mov r8, r8)
   1936c:	20000dec 	.word	0x20000dec
   19370:	00038c40 	.word	0x00038c40
   19374:	0001a4ed 	.word	0x0001a4ed
   19378:	20000d4c 	.word	0x20000d4c
   1937c:	20000d44 	.word	0x20000d44
   19380:	00018eed 	.word	0x00018eed
   19384:	00018c31 	.word	0x00018c31
   19388:	0001a1d1 	.word	0x0001a1d1
   1938c:	00038c84 	.word	0x00038c84
   19390:	0001a401 	.word	0x0001a401
   19394:	00019b65 	.word	0x00019b65
   19398:	00019a4d 	.word	0x00019a4d

0001939c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1939c:	b580      	push	{r7, lr}
   1939e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   193a0:	4b02      	ldr	r3, [pc, #8]	; (193ac <vTraceStart+0x10>)
   193a2:	4798      	blx	r3
}
   193a4:	46c0      	nop			; (mov r8, r8)
   193a6:	46bd      	mov	sp, r7
   193a8:	bd80      	pop	{r7, pc}
   193aa:	46c0      	nop			; (mov r8, r8)
   193ac:	00019285 	.word	0x00019285

000193b0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   193b0:	b580      	push	{r7, lr}
   193b2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   193b4:	4b08      	ldr	r3, [pc, #32]	; (193d8 <vTraceStop+0x28>)
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	2b00      	cmp	r3, #0
   193ba:	d003      	beq.n	193c4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   193bc:	4b06      	ldr	r3, [pc, #24]	; (193d8 <vTraceStop+0x28>)
   193be:	681b      	ldr	r3, [r3, #0]
   193c0:	2200      	movs	r2, #0
   193c2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   193c4:	4b05      	ldr	r3, [pc, #20]	; (193dc <vTraceStop+0x2c>)
   193c6:	681b      	ldr	r3, [r3, #0]
   193c8:	2b00      	cmp	r3, #0
   193ca:	d002      	beq.n	193d2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   193cc:	4b03      	ldr	r3, [pc, #12]	; (193dc <vTraceStop+0x2c>)
   193ce:	681b      	ldr	r3, [r3, #0]
   193d0:	4798      	blx	r3
	}
}
   193d2:	46c0      	nop			; (mov r8, r8)
   193d4:	46bd      	mov	sp, r7
   193d6:	bd80      	pop	{r7, pc}
   193d8:	20000dec 	.word	0x20000dec
   193dc:	20000d54 	.word	0x20000d54

000193e0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   193e0:	b580      	push	{r7, lr}
   193e2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   193e4:	4b05      	ldr	r3, [pc, #20]	; (193fc <xTraceIsRecordingEnabled+0x1c>)
   193e6:	681b      	ldr	r3, [r3, #0]
   193e8:	2b00      	cmp	r3, #0
   193ea:	d003      	beq.n	193f4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   193ec:	4b03      	ldr	r3, [pc, #12]	; (193fc <xTraceIsRecordingEnabled+0x1c>)
   193ee:	681b      	ldr	r3, [r3, #0]
   193f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   193f2:	e000      	b.n	193f6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   193f4:	2300      	movs	r3, #0
	}
}
   193f6:	0018      	movs	r0, r3
   193f8:	46bd      	mov	sp, r7
   193fa:	bd80      	pop	{r7, pc}
   193fc:	20000dec 	.word	0x20000dec

00019400 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19400:	b590      	push	{r4, r7, lr}
   19402:	b089      	sub	sp, #36	; 0x24
   19404:	af00      	add	r7, sp, #0
   19406:	0002      	movs	r2, r0
   19408:	1dfb      	adds	r3, r7, #7
   1940a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1940c:	1dfb      	adds	r3, r7, #7
   1940e:	781b      	ldrb	r3, [r3, #0]
   19410:	2b00      	cmp	r3, #0
   19412:	d057      	beq.n	194c4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   19414:	4b2e      	ldr	r3, [pc, #184]	; (194d0 <prvTraceStoreTaskReady+0xd0>)
   19416:	681b      	ldr	r3, [r3, #0]
   19418:	2b00      	cmp	r3, #0
   1941a:	d055      	beq.n	194c8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1941c:	1dfb      	adds	r3, r7, #7
   1941e:	781b      	ldrb	r3, [r3, #0]
   19420:	2b0f      	cmp	r3, #15
   19422:	d904      	bls.n	1942e <prvTraceStoreTaskReady+0x2e>
   19424:	4b2b      	ldr	r3, [pc, #172]	; (194d4 <prvTraceStoreTaskReady+0xd4>)
   19426:	0018      	movs	r0, r3
   19428:	4b2b      	ldr	r3, [pc, #172]	; (194d8 <prvTraceStoreTaskReady+0xd8>)
   1942a:	4798      	blx	r3
   1942c:	e04d      	b.n	194ca <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1942e:	4b2b      	ldr	r3, [pc, #172]	; (194dc <prvTraceStoreTaskReady+0xdc>)
   19430:	681b      	ldr	r3, [r3, #0]
   19432:	2b00      	cmp	r3, #0
   19434:	d004      	beq.n	19440 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   19436:	4b2a      	ldr	r3, [pc, #168]	; (194e0 <prvTraceStoreTaskReady+0xe0>)
   19438:	0018      	movs	r0, r3
   1943a:	4b27      	ldr	r3, [pc, #156]	; (194d8 <prvTraceStoreTaskReady+0xd8>)
   1943c:	4798      	blx	r3
		return;
   1943e:	e044      	b.n	194ca <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19440:	f3ef 8310 	mrs	r3, PRIMASK
   19444:	60fb      	str	r3, [r7, #12]
  return(result);
   19446:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   19448:	61fb      	str	r3, [r7, #28]
   1944a:	2301      	movs	r3, #1
   1944c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1944e:	693b      	ldr	r3, [r7, #16]
   19450:	f383 8810 	msr	PRIMASK, r3
   19454:	4b21      	ldr	r3, [pc, #132]	; (194dc <prvTraceStoreTaskReady+0xdc>)
   19456:	681b      	ldr	r3, [r3, #0]
   19458:	1c5a      	adds	r2, r3, #1
   1945a:	4b20      	ldr	r3, [pc, #128]	; (194dc <prvTraceStoreTaskReady+0xdc>)
   1945c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1945e:	4b21      	ldr	r3, [pc, #132]	; (194e4 <prvTraceStoreTaskReady+0xe4>)
   19460:	681b      	ldr	r3, [r3, #0]
   19462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19464:	2b00      	cmp	r3, #0
   19466:	d022      	beq.n	194ae <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19468:	231a      	movs	r3, #26
   1946a:	18fc      	adds	r4, r7, r3
   1946c:	4b1e      	ldr	r3, [pc, #120]	; (194e8 <prvTraceStoreTaskReady+0xe8>)
   1946e:	0018      	movs	r0, r3
   19470:	4b1e      	ldr	r3, [pc, #120]	; (194ec <prvTraceStoreTaskReady+0xec>)
   19472:	4798      	blx	r3
   19474:	0003      	movs	r3, r0
   19476:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   19478:	2319      	movs	r3, #25
   1947a:	18fb      	adds	r3, r7, r3
   1947c:	1dfa      	adds	r2, r7, #7
   1947e:	7812      	ldrb	r2, [r2, #0]
   19480:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   19482:	4b1b      	ldr	r3, [pc, #108]	; (194f0 <prvTraceStoreTaskReady+0xf0>)
   19484:	4798      	blx	r3
   19486:	0003      	movs	r3, r0
   19488:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1948a:	697b      	ldr	r3, [r7, #20]
   1948c:	2b00      	cmp	r3, #0
   1948e:	d00e      	beq.n	194ae <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   19490:	697b      	ldr	r3, [r7, #20]
   19492:	2202      	movs	r2, #2
   19494:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   19496:	697b      	ldr	r3, [r7, #20]
   19498:	221a      	movs	r2, #26
   1949a:	18ba      	adds	r2, r7, r2
   1949c:	8812      	ldrh	r2, [r2, #0]
   1949e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   194a0:	697b      	ldr	r3, [r7, #20]
   194a2:	2219      	movs	r2, #25
   194a4:	18ba      	adds	r2, r7, r2
   194a6:	7812      	ldrb	r2, [r2, #0]
   194a8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   194aa:	4b12      	ldr	r3, [pc, #72]	; (194f4 <prvTraceStoreTaskReady+0xf4>)
   194ac:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   194ae:	4b0b      	ldr	r3, [pc, #44]	; (194dc <prvTraceStoreTaskReady+0xdc>)
   194b0:	681b      	ldr	r3, [r3, #0]
   194b2:	1e5a      	subs	r2, r3, #1
   194b4:	4b09      	ldr	r3, [pc, #36]	; (194dc <prvTraceStoreTaskReady+0xdc>)
   194b6:	601a      	str	r2, [r3, #0]
   194b8:	69fb      	ldr	r3, [r7, #28]
   194ba:	60bb      	str	r3, [r7, #8]
   194bc:	68bb      	ldr	r3, [r7, #8]
   194be:	f383 8810 	msr	PRIMASK, r3
   194c2:	e002      	b.n	194ca <prvTraceStoreTaskReady+0xca>
		return;
   194c4:	46c0      	nop			; (mov r8, r8)
   194c6:	e000      	b.n	194ca <prvTraceStoreTaskReady+0xca>
		return;
   194c8:	46c0      	nop			; (mov r8, r8)
}
   194ca:	46bd      	mov	sp, r7
   194cc:	b009      	add	sp, #36	; 0x24
   194ce:	bd90      	pop	{r4, r7, pc}
   194d0:	2000010c 	.word	0x2000010c
   194d4:	00038fec 	.word	0x00038fec
   194d8:	0001a4ed 	.word	0x0001a4ed
   194dc:	20000d44 	.word	0x20000d44
   194e0:	0003902c 	.word	0x0003902c
   194e4:	20000dec 	.word	0x20000dec
   194e8:	0000ffff 	.word	0x0000ffff
   194ec:	0001a701 	.word	0x0001a701
   194f0:	0001a0a5 	.word	0x0001a0a5
   194f4:	0001a6a9 	.word	0x0001a6a9

000194f8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   194f8:	b580      	push	{r7, lr}
   194fa:	b08e      	sub	sp, #56	; 0x38
   194fc:	af00      	add	r7, sp, #0
   194fe:	60f8      	str	r0, [r7, #12]
   19500:	60b9      	str	r1, [r7, #8]
   19502:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19504:	4b48      	ldr	r3, [pc, #288]	; (19628 <vTraceStoreMemMangEvent+0x130>)
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	2b00      	cmp	r3, #0
   1950a:	d100      	bne.n	1950e <vTraceStoreMemMangEvent+0x16>
   1950c:	e088      	b.n	19620 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1950e:	687b      	ldr	r3, [r7, #4]
   19510:	2b00      	cmp	r3, #0
   19512:	da03      	bge.n	1951c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19514:	687b      	ldr	r3, [r7, #4]
   19516:	425b      	negs	r3, r3
   19518:	637b      	str	r3, [r7, #52]	; 0x34
   1951a:	e001      	b.n	19520 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1951c:	687b      	ldr	r3, [r7, #4]
   1951e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19520:	f3ef 8310 	mrs	r3, PRIMASK
   19524:	61bb      	str	r3, [r7, #24]
  return(result);
   19526:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19528:	633b      	str	r3, [r7, #48]	; 0x30
   1952a:	2301      	movs	r3, #1
   1952c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1952e:	69fb      	ldr	r3, [r7, #28]
   19530:	f383 8810 	msr	PRIMASK, r3
   19534:	4b3d      	ldr	r3, [pc, #244]	; (1962c <vTraceStoreMemMangEvent+0x134>)
   19536:	681b      	ldr	r3, [r3, #0]
   19538:	1c5a      	adds	r2, r3, #1
   1953a:	4b3c      	ldr	r3, [pc, #240]	; (1962c <vTraceStoreMemMangEvent+0x134>)
   1953c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1953e:	68bb      	ldr	r3, [r7, #8]
   19540:	2b00      	cmp	r3, #0
   19542:	d005      	beq.n	19550 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19544:	4b3a      	ldr	r3, [pc, #232]	; (19630 <vTraceStoreMemMangEvent+0x138>)
   19546:	681a      	ldr	r2, [r3, #0]
   19548:	687b      	ldr	r3, [r7, #4]
   1954a:	18d2      	adds	r2, r2, r3
   1954c:	4b38      	ldr	r3, [pc, #224]	; (19630 <vTraceStoreMemMangEvent+0x138>)
   1954e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19550:	4b35      	ldr	r3, [pc, #212]	; (19628 <vTraceStoreMemMangEvent+0x130>)
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19556:	2b00      	cmp	r3, #0
   19558:	d057      	beq.n	1960a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1955a:	20ff      	movs	r0, #255	; 0xff
   1955c:	4b35      	ldr	r3, [pc, #212]	; (19634 <vTraceStoreMemMangEvent+0x13c>)
   1955e:	4798      	blx	r3
   19560:	0003      	movs	r3, r0
   19562:	001a      	movs	r2, r3
   19564:	232f      	movs	r3, #47	; 0x2f
   19566:	18fb      	adds	r3, r7, r3
   19568:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1956a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1956c:	4a32      	ldr	r2, [pc, #200]	; (19638 <vTraceStoreMemMangEvent+0x140>)
   1956e:	0019      	movs	r1, r3
   19570:	0010      	movs	r0, r2
   19572:	4b32      	ldr	r3, [pc, #200]	; (1963c <vTraceStoreMemMangEvent+0x144>)
   19574:	4798      	blx	r3
   19576:	0002      	movs	r2, r0
   19578:	232c      	movs	r3, #44	; 0x2c
   1957a:	18fb      	adds	r3, r7, r3
   1957c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1957e:	4b30      	ldr	r3, [pc, #192]	; (19640 <vTraceStoreMemMangEvent+0x148>)
   19580:	4798      	blx	r3
   19582:	0003      	movs	r3, r0
   19584:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   19586:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19588:	2b00      	cmp	r3, #0
   1958a:	d03e      	beq.n	1960a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1958e:	222f      	movs	r2, #47	; 0x2f
   19590:	18ba      	adds	r2, r7, r2
   19592:	7812      	ldrb	r2, [r2, #0]
   19594:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   19596:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19598:	2200      	movs	r2, #0
   1959a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1959e:	222c      	movs	r2, #44	; 0x2c
   195a0:	18ba      	adds	r2, r7, r2
   195a2:	8812      	ldrh	r2, [r2, #0]
   195a4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   195a6:	4b27      	ldr	r3, [pc, #156]	; (19644 <vTraceStoreMemMangEvent+0x14c>)
   195a8:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   195aa:	68bb      	ldr	r3, [r7, #8]
   195ac:	4a22      	ldr	r2, [pc, #136]	; (19638 <vTraceStoreMemMangEvent+0x140>)
   195ae:	0019      	movs	r1, r3
   195b0:	0010      	movs	r0, r2
   195b2:	4b22      	ldr	r3, [pc, #136]	; (1963c <vTraceStoreMemMangEvent+0x144>)
   195b4:	4798      	blx	r3
   195b6:	0002      	movs	r2, r0
   195b8:	2326      	movs	r3, #38	; 0x26
   195ba:	18fb      	adds	r3, r7, r3
   195bc:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   195be:	2325      	movs	r3, #37	; 0x25
   195c0:	18fb      	adds	r3, r7, r3
   195c2:	2200      	movs	r2, #0
   195c4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   195c6:	4b1e      	ldr	r3, [pc, #120]	; (19640 <vTraceStoreMemMangEvent+0x148>)
   195c8:	4798      	blx	r3
   195ca:	0003      	movs	r3, r0
   195cc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   195ce:	6a3b      	ldr	r3, [r7, #32]
   195d0:	2b00      	cmp	r3, #0
   195d2:	d01a      	beq.n	1960a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   195d4:	6a3b      	ldr	r3, [r7, #32]
   195d6:	2226      	movs	r2, #38	; 0x26
   195d8:	18ba      	adds	r2, r7, r2
   195da:	8812      	ldrh	r2, [r2, #0]
   195dc:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   195de:	6a3b      	ldr	r3, [r7, #32]
   195e0:	2225      	movs	r2, #37	; 0x25
   195e2:	18ba      	adds	r2, r7, r2
   195e4:	7812      	ldrb	r2, [r2, #0]
   195e6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   195e8:	68fb      	ldr	r3, [r7, #12]
   195ea:	b2db      	uxtb	r3, r3
   195ec:	3301      	adds	r3, #1
   195ee:	b2da      	uxtb	r2, r3
   195f0:	6a3b      	ldr	r3, [r7, #32]
   195f2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   195f4:	68fb      	ldr	r3, [r7, #12]
   195f6:	b2da      	uxtb	r2, r3
   195f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   195fa:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   195fc:	4b11      	ldr	r3, [pc, #68]	; (19644 <vTraceStoreMemMangEvent+0x14c>)
   195fe:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19600:	4b09      	ldr	r3, [pc, #36]	; (19628 <vTraceStoreMemMangEvent+0x130>)
   19602:	681b      	ldr	r3, [r3, #0]
   19604:	4a0a      	ldr	r2, [pc, #40]	; (19630 <vTraceStoreMemMangEvent+0x138>)
   19606:	6812      	ldr	r2, [r2, #0]
   19608:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1960a:	4b08      	ldr	r3, [pc, #32]	; (1962c <vTraceStoreMemMangEvent+0x134>)
   1960c:	681b      	ldr	r3, [r3, #0]
   1960e:	1e5a      	subs	r2, r3, #1
   19610:	4b06      	ldr	r3, [pc, #24]	; (1962c <vTraceStoreMemMangEvent+0x134>)
   19612:	601a      	str	r2, [r3, #0]
   19614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19616:	617b      	str	r3, [r7, #20]
   19618:	697b      	ldr	r3, [r7, #20]
   1961a:	f383 8810 	msr	PRIMASK, r3
   1961e:	e000      	b.n	19622 <vTraceStoreMemMangEvent+0x12a>
		return;
   19620:	46c0      	nop			; (mov r8, r8)
}
   19622:	46bd      	mov	sp, r7
   19624:	b00e      	add	sp, #56	; 0x38
   19626:	bd80      	pop	{r7, pc}
   19628:	20000dec 	.word	0x20000dec
   1962c:	20000d44 	.word	0x20000d44
   19630:	20000d58 	.word	0x20000d58
   19634:	0001a701 	.word	0x0001a701
   19638:	0000ffff 	.word	0x0000ffff
   1963c:	000198c5 	.word	0x000198c5
   19640:	0001a0a5 	.word	0x0001a0a5
   19644:	0001a6a9 	.word	0x0001a6a9

00019648 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   19648:	b590      	push	{r4, r7, lr}
   1964a:	b08b      	sub	sp, #44	; 0x2c
   1964c:	af00      	add	r7, sp, #0
   1964e:	60f8      	str	r0, [r7, #12]
   19650:	607a      	str	r2, [r7, #4]
   19652:	230b      	movs	r3, #11
   19654:	18fb      	adds	r3, r7, r3
   19656:	1c0a      	adds	r2, r1, #0
   19658:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1965a:	68fb      	ldr	r3, [r7, #12]
   1965c:	2bfe      	cmp	r3, #254	; 0xfe
   1965e:	d904      	bls.n	1966a <prvTraceStoreKernelCall+0x22>
   19660:	4b39      	ldr	r3, [pc, #228]	; (19748 <prvTraceStoreKernelCall+0x100>)
   19662:	0018      	movs	r0, r3
   19664:	4b39      	ldr	r3, [pc, #228]	; (1974c <prvTraceStoreKernelCall+0x104>)
   19666:	4798      	blx	r3
   19668:	e06b      	b.n	19742 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1966a:	230b      	movs	r3, #11
   1966c:	18fb      	adds	r3, r7, r3
   1966e:	781b      	ldrb	r3, [r3, #0]
   19670:	2b08      	cmp	r3, #8
   19672:	d904      	bls.n	1967e <prvTraceStoreKernelCall+0x36>
   19674:	4b36      	ldr	r3, [pc, #216]	; (19750 <prvTraceStoreKernelCall+0x108>)
   19676:	0018      	movs	r0, r3
   19678:	4b34      	ldr	r3, [pc, #208]	; (1974c <prvTraceStoreKernelCall+0x104>)
   1967a:	4798      	blx	r3
   1967c:	e061      	b.n	19742 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1967e:	4b35      	ldr	r3, [pc, #212]	; (19754 <prvTraceStoreKernelCall+0x10c>)
   19680:	681a      	ldr	r2, [r3, #0]
   19682:	230b      	movs	r3, #11
   19684:	18fb      	adds	r3, r7, r3
   19686:	781b      	ldrb	r3, [r3, #0]
   19688:	2164      	movs	r1, #100	; 0x64
   1968a:	18d3      	adds	r3, r2, r3
   1968c:	185b      	adds	r3, r3, r1
   1968e:	781b      	ldrb	r3, [r3, #0]
   19690:	001a      	movs	r2, r3
   19692:	687b      	ldr	r3, [r7, #4]
   19694:	429a      	cmp	r2, r3
   19696:	d204      	bcs.n	196a2 <prvTraceStoreKernelCall+0x5a>
   19698:	4b2f      	ldr	r3, [pc, #188]	; (19758 <prvTraceStoreKernelCall+0x110>)
   1969a:	0018      	movs	r0, r3
   1969c:	4b2b      	ldr	r3, [pc, #172]	; (1974c <prvTraceStoreKernelCall+0x104>)
   1969e:	4798      	blx	r3
   196a0:	e04f      	b.n	19742 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   196a2:	4b2e      	ldr	r3, [pc, #184]	; (1975c <prvTraceStoreKernelCall+0x114>)
   196a4:	681b      	ldr	r3, [r3, #0]
   196a6:	2b00      	cmp	r3, #0
   196a8:	d004      	beq.n	196b4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   196aa:	4b2d      	ldr	r3, [pc, #180]	; (19760 <prvTraceStoreKernelCall+0x118>)
   196ac:	0018      	movs	r0, r3
   196ae:	4b27      	ldr	r3, [pc, #156]	; (1974c <prvTraceStoreKernelCall+0x104>)
   196b0:	4798      	blx	r3
		return;
   196b2:	e046      	b.n	19742 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   196b4:	4b2b      	ldr	r3, [pc, #172]	; (19764 <prvTraceStoreKernelCall+0x11c>)
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	2b00      	cmp	r3, #0
   196ba:	d041      	beq.n	19740 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   196bc:	f3ef 8310 	mrs	r3, PRIMASK
   196c0:	617b      	str	r3, [r7, #20]
  return(result);
   196c2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   196c4:	627b      	str	r3, [r7, #36]	; 0x24
   196c6:	2301      	movs	r3, #1
   196c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   196ca:	69bb      	ldr	r3, [r7, #24]
   196cc:	f383 8810 	msr	PRIMASK, r3
   196d0:	4b22      	ldr	r3, [pc, #136]	; (1975c <prvTraceStoreKernelCall+0x114>)
   196d2:	681b      	ldr	r3, [r3, #0]
   196d4:	1c5a      	adds	r2, r3, #1
   196d6:	4b21      	ldr	r3, [pc, #132]	; (1975c <prvTraceStoreKernelCall+0x114>)
   196d8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   196da:	4b1e      	ldr	r3, [pc, #120]	; (19754 <prvTraceStoreKernelCall+0x10c>)
   196dc:	681b      	ldr	r3, [r3, #0]
   196de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   196e0:	2b00      	cmp	r3, #0
   196e2:	d022      	beq.n	1972a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   196e4:	2322      	movs	r3, #34	; 0x22
   196e6:	18fc      	adds	r4, r7, r3
   196e8:	4b1f      	ldr	r3, [pc, #124]	; (19768 <prvTraceStoreKernelCall+0x120>)
   196ea:	0018      	movs	r0, r3
   196ec:	4b1f      	ldr	r3, [pc, #124]	; (1976c <prvTraceStoreKernelCall+0x124>)
   196ee:	4798      	blx	r3
   196f0:	0003      	movs	r3, r0
   196f2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   196f4:	2321      	movs	r3, #33	; 0x21
   196f6:	18fb      	adds	r3, r7, r3
   196f8:	687a      	ldr	r2, [r7, #4]
   196fa:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   196fc:	4b1c      	ldr	r3, [pc, #112]	; (19770 <prvTraceStoreKernelCall+0x128>)
   196fe:	4798      	blx	r3
   19700:	0003      	movs	r3, r0
   19702:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19704:	69fb      	ldr	r3, [r7, #28]
   19706:	2b00      	cmp	r3, #0
   19708:	d00f      	beq.n	1972a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1970a:	69fb      	ldr	r3, [r7, #28]
   1970c:	2222      	movs	r2, #34	; 0x22
   1970e:	18ba      	adds	r2, r7, r2
   19710:	8812      	ldrh	r2, [r2, #0]
   19712:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19714:	68fb      	ldr	r3, [r7, #12]
   19716:	b2da      	uxtb	r2, r3
   19718:	69fb      	ldr	r3, [r7, #28]
   1971a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1971c:	69fb      	ldr	r3, [r7, #28]
   1971e:	2221      	movs	r2, #33	; 0x21
   19720:	18ba      	adds	r2, r7, r2
   19722:	7812      	ldrb	r2, [r2, #0]
   19724:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19726:	4b13      	ldr	r3, [pc, #76]	; (19774 <prvTraceStoreKernelCall+0x12c>)
   19728:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1972a:	4b0c      	ldr	r3, [pc, #48]	; (1975c <prvTraceStoreKernelCall+0x114>)
   1972c:	681b      	ldr	r3, [r3, #0]
   1972e:	1e5a      	subs	r2, r3, #1
   19730:	4b0a      	ldr	r3, [pc, #40]	; (1975c <prvTraceStoreKernelCall+0x114>)
   19732:	601a      	str	r2, [r3, #0]
   19734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19736:	613b      	str	r3, [r7, #16]
   19738:	693b      	ldr	r3, [r7, #16]
   1973a:	f383 8810 	msr	PRIMASK, r3
   1973e:	e000      	b.n	19742 <prvTraceStoreKernelCall+0xfa>
		return;
   19740:	46c0      	nop			; (mov r8, r8)
}
   19742:	46bd      	mov	sp, r7
   19744:	b00b      	add	sp, #44	; 0x2c
   19746:	bd90      	pop	{r4, r7, pc}
   19748:	0003909c 	.word	0x0003909c
   1974c:	0001a4ed 	.word	0x0001a4ed
   19750:	000390d4 	.word	0x000390d4
   19754:	20000dec 	.word	0x20000dec
   19758:	0003911c 	.word	0x0003911c
   1975c:	20000d44 	.word	0x20000d44
   19760:	00039164 	.word	0x00039164
   19764:	20000d50 	.word	0x20000d50
   19768:	0000ffff 	.word	0x0000ffff
   1976c:	0001a701 	.word	0x0001a701
   19770:	0001a0a5 	.word	0x0001a0a5
   19774:	0001a6a9 	.word	0x0001a6a9

00019778 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19778:	b580      	push	{r7, lr}
   1977a:	b08a      	sub	sp, #40	; 0x28
   1977c:	af00      	add	r7, sp, #0
   1977e:	60f8      	str	r0, [r7, #12]
   19780:	607a      	str	r2, [r7, #4]
   19782:	603b      	str	r3, [r7, #0]
   19784:	230b      	movs	r3, #11
   19786:	18fb      	adds	r3, r7, r3
   19788:	1c0a      	adds	r2, r1, #0
   1978a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1978c:	68fb      	ldr	r3, [r7, #12]
   1978e:	2bfe      	cmp	r3, #254	; 0xfe
   19790:	d904      	bls.n	1979c <prvTraceStoreKernelCallWithParam+0x24>
   19792:	4b40      	ldr	r3, [pc, #256]	; (19894 <prvTraceStoreKernelCallWithParam+0x11c>)
   19794:	0018      	movs	r0, r3
   19796:	4b40      	ldr	r3, [pc, #256]	; (19898 <prvTraceStoreKernelCallWithParam+0x120>)
   19798:	4798      	blx	r3
   1979a:	e077      	b.n	1988c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1979c:	230b      	movs	r3, #11
   1979e:	18fb      	adds	r3, r7, r3
   197a0:	781b      	ldrb	r3, [r3, #0]
   197a2:	2b08      	cmp	r3, #8
   197a4:	d904      	bls.n	197b0 <prvTraceStoreKernelCallWithParam+0x38>
   197a6:	4b3d      	ldr	r3, [pc, #244]	; (1989c <prvTraceStoreKernelCallWithParam+0x124>)
   197a8:	0018      	movs	r0, r3
   197aa:	4b3b      	ldr	r3, [pc, #236]	; (19898 <prvTraceStoreKernelCallWithParam+0x120>)
   197ac:	4798      	blx	r3
   197ae:	e06d      	b.n	1988c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   197b0:	4b3b      	ldr	r3, [pc, #236]	; (198a0 <prvTraceStoreKernelCallWithParam+0x128>)
   197b2:	681a      	ldr	r2, [r3, #0]
   197b4:	230b      	movs	r3, #11
   197b6:	18fb      	adds	r3, r7, r3
   197b8:	781b      	ldrb	r3, [r3, #0]
   197ba:	2164      	movs	r1, #100	; 0x64
   197bc:	18d3      	adds	r3, r2, r3
   197be:	185b      	adds	r3, r3, r1
   197c0:	781b      	ldrb	r3, [r3, #0]
   197c2:	001a      	movs	r2, r3
   197c4:	687b      	ldr	r3, [r7, #4]
   197c6:	429a      	cmp	r2, r3
   197c8:	d204      	bcs.n	197d4 <prvTraceStoreKernelCallWithParam+0x5c>
   197ca:	4b36      	ldr	r3, [pc, #216]	; (198a4 <prvTraceStoreKernelCallWithParam+0x12c>)
   197cc:	0018      	movs	r0, r3
   197ce:	4b32      	ldr	r3, [pc, #200]	; (19898 <prvTraceStoreKernelCallWithParam+0x120>)
   197d0:	4798      	blx	r3
   197d2:	e05b      	b.n	1988c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   197d4:	4b34      	ldr	r3, [pc, #208]	; (198a8 <prvTraceStoreKernelCallWithParam+0x130>)
   197d6:	681b      	ldr	r3, [r3, #0]
   197d8:	2b00      	cmp	r3, #0
   197da:	d004      	beq.n	197e6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   197dc:	4b33      	ldr	r3, [pc, #204]	; (198ac <prvTraceStoreKernelCallWithParam+0x134>)
   197de:	0018      	movs	r0, r3
   197e0:	4b2d      	ldr	r3, [pc, #180]	; (19898 <prvTraceStoreKernelCallWithParam+0x120>)
   197e2:	4798      	blx	r3
		return;
   197e4:	e052      	b.n	1988c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   197e6:	f3ef 8310 	mrs	r3, PRIMASK
   197ea:	617b      	str	r3, [r7, #20]
  return(result);
   197ec:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   197ee:	627b      	str	r3, [r7, #36]	; 0x24
   197f0:	2301      	movs	r3, #1
   197f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   197f4:	69bb      	ldr	r3, [r7, #24]
   197f6:	f383 8810 	msr	PRIMASK, r3
   197fa:	4b2b      	ldr	r3, [pc, #172]	; (198a8 <prvTraceStoreKernelCallWithParam+0x130>)
   197fc:	681b      	ldr	r3, [r3, #0]
   197fe:	1c5a      	adds	r2, r3, #1
   19800:	4b29      	ldr	r3, [pc, #164]	; (198a8 <prvTraceStoreKernelCallWithParam+0x130>)
   19802:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19804:	4b26      	ldr	r3, [pc, #152]	; (198a0 <prvTraceStoreKernelCallWithParam+0x128>)
   19806:	681b      	ldr	r3, [r3, #0]
   19808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1980a:	2b00      	cmp	r3, #0
   1980c:	d034      	beq.n	19878 <prvTraceStoreKernelCallWithParam+0x100>
   1980e:	4b28      	ldr	r3, [pc, #160]	; (198b0 <prvTraceStoreKernelCallWithParam+0x138>)
   19810:	781b      	ldrb	r3, [r3, #0]
   19812:	2b00      	cmp	r3, #0
   19814:	d030      	beq.n	19878 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19816:	20ff      	movs	r0, #255	; 0xff
   19818:	4b26      	ldr	r3, [pc, #152]	; (198b4 <prvTraceStoreKernelCallWithParam+0x13c>)
   1981a:	4798      	blx	r3
   1981c:	0003      	movs	r3, r0
   1981e:	001a      	movs	r2, r3
   19820:	2323      	movs	r3, #35	; 0x23
   19822:	18fb      	adds	r3, r7, r3
   19824:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19826:	683b      	ldr	r3, [r7, #0]
   19828:	0019      	movs	r1, r3
   1982a:	20ff      	movs	r0, #255	; 0xff
   1982c:	4b22      	ldr	r3, [pc, #136]	; (198b8 <prvTraceStoreKernelCallWithParam+0x140>)
   1982e:	4798      	blx	r3
   19830:	0002      	movs	r2, r0
   19832:	2322      	movs	r3, #34	; 0x22
   19834:	18fb      	adds	r3, r7, r3
   19836:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19838:	2321      	movs	r3, #33	; 0x21
   1983a:	18fb      	adds	r3, r7, r3
   1983c:	687a      	ldr	r2, [r7, #4]
   1983e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19840:	4b1e      	ldr	r3, [pc, #120]	; (198bc <prvTraceStoreKernelCallWithParam+0x144>)
   19842:	4798      	blx	r3
   19844:	0003      	movs	r3, r0
   19846:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19848:	69fb      	ldr	r3, [r7, #28]
   1984a:	2b00      	cmp	r3, #0
   1984c:	d014      	beq.n	19878 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1984e:	69fb      	ldr	r3, [r7, #28]
   19850:	2223      	movs	r2, #35	; 0x23
   19852:	18ba      	adds	r2, r7, r2
   19854:	7812      	ldrb	r2, [r2, #0]
   19856:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19858:	68fb      	ldr	r3, [r7, #12]
   1985a:	b2da      	uxtb	r2, r3
   1985c:	69fb      	ldr	r3, [r7, #28]
   1985e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19860:	69fb      	ldr	r3, [r7, #28]
   19862:	2221      	movs	r2, #33	; 0x21
   19864:	18ba      	adds	r2, r7, r2
   19866:	7812      	ldrb	r2, [r2, #0]
   19868:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1986a:	69fb      	ldr	r3, [r7, #28]
   1986c:	2222      	movs	r2, #34	; 0x22
   1986e:	18ba      	adds	r2, r7, r2
   19870:	7812      	ldrb	r2, [r2, #0]
   19872:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19874:	4b12      	ldr	r3, [pc, #72]	; (198c0 <prvTraceStoreKernelCallWithParam+0x148>)
   19876:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19878:	4b0b      	ldr	r3, [pc, #44]	; (198a8 <prvTraceStoreKernelCallWithParam+0x130>)
   1987a:	681b      	ldr	r3, [r3, #0]
   1987c:	1e5a      	subs	r2, r3, #1
   1987e:	4b0a      	ldr	r3, [pc, #40]	; (198a8 <prvTraceStoreKernelCallWithParam+0x130>)
   19880:	601a      	str	r2, [r3, #0]
   19882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19884:	613b      	str	r3, [r7, #16]
   19886:	693b      	ldr	r3, [r7, #16]
   19888:	f383 8810 	msr	PRIMASK, r3
}
   1988c:	46bd      	mov	sp, r7
   1988e:	b00a      	add	sp, #40	; 0x28
   19890:	bd80      	pop	{r7, pc}
   19892:	46c0      	nop			; (mov r8, r8)
   19894:	0003919c 	.word	0x0003919c
   19898:	0001a4ed 	.word	0x0001a4ed
   1989c:	000391dc 	.word	0x000391dc
   198a0:	20000dec 	.word	0x20000dec
   198a4:	0003922c 	.word	0x0003922c
   198a8:	20000d44 	.word	0x20000d44
   198ac:	0003927c 	.word	0x0003927c
   198b0:	20000d50 	.word	0x20000d50
   198b4:	0001a701 	.word	0x0001a701
   198b8:	000198c5 	.word	0x000198c5
   198bc:	0001a0a5 	.word	0x0001a0a5
   198c0:	0001a6a9 	.word	0x0001a6a9

000198c4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   198c4:	b580      	push	{r7, lr}
   198c6:	b084      	sub	sp, #16
   198c8:	af00      	add	r7, sp, #0
   198ca:	6078      	str	r0, [r7, #4]
   198cc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   198ce:	687b      	ldr	r3, [r7, #4]
   198d0:	2bff      	cmp	r3, #255	; 0xff
   198d2:	d009      	beq.n	198e8 <prvTraceGetParam+0x24>
   198d4:	687b      	ldr	r3, [r7, #4]
   198d6:	4a19      	ldr	r2, [pc, #100]	; (1993c <prvTraceGetParam+0x78>)
   198d8:	4293      	cmp	r3, r2
   198da:	d005      	beq.n	198e8 <prvTraceGetParam+0x24>
   198dc:	4b18      	ldr	r3, [pc, #96]	; (19940 <prvTraceGetParam+0x7c>)
   198de:	0018      	movs	r0, r3
   198e0:	4b18      	ldr	r3, [pc, #96]	; (19944 <prvTraceGetParam+0x80>)
   198e2:	4798      	blx	r3
   198e4:	683b      	ldr	r3, [r7, #0]
   198e6:	e024      	b.n	19932 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   198e8:	683a      	ldr	r2, [r7, #0]
   198ea:	687b      	ldr	r3, [r7, #4]
   198ec:	429a      	cmp	r2, r3
   198ee:	d801      	bhi.n	198f4 <prvTraceGetParam+0x30>
	{
		return param;
   198f0:	683b      	ldr	r3, [r7, #0]
   198f2:	e01e      	b.n	19932 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   198f4:	4b14      	ldr	r3, [pc, #80]	; (19948 <prvTraceGetParam+0x84>)
   198f6:	4798      	blx	r3
   198f8:	0003      	movs	r3, r0
   198fa:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   198fc:	68fb      	ldr	r3, [r7, #12]
   198fe:	2b00      	cmp	r3, #0
   19900:	d014      	beq.n	1992c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19902:	68fb      	ldr	r3, [r7, #12]
   19904:	2201      	movs	r2, #1
   19906:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19908:	687b      	ldr	r3, [r7, #4]
   1990a:	43db      	mvns	r3, r3
   1990c:	683a      	ldr	r2, [r7, #0]
   1990e:	4013      	ands	r3, r2
   19910:	0a1b      	lsrs	r3, r3, #8
   19912:	b2da      	uxtb	r2, r3
   19914:	68fb      	ldr	r3, [r7, #12]
   19916:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19918:	687b      	ldr	r3, [r7, #4]
   1991a:	43db      	mvns	r3, r3
   1991c:	683a      	ldr	r2, [r7, #0]
   1991e:	4013      	ands	r3, r2
   19920:	0c1b      	lsrs	r3, r3, #16
   19922:	b29a      	uxth	r2, r3
   19924:	68fb      	ldr	r3, [r7, #12]
   19926:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19928:	4b08      	ldr	r3, [pc, #32]	; (1994c <prvTraceGetParam+0x88>)
   1992a:	4798      	blx	r3
		}

		return param & param_max;
   1992c:	683b      	ldr	r3, [r7, #0]
   1992e:	687a      	ldr	r2, [r7, #4]
   19930:	4013      	ands	r3, r2
	}
}
   19932:	0018      	movs	r0, r3
   19934:	46bd      	mov	sp, r7
   19936:	b004      	add	sp, #16
   19938:	bd80      	pop	{r7, pc}
   1993a:	46c0      	nop			; (mov r8, r8)
   1993c:	0000ffff 	.word	0x0000ffff
   19940:	000392b4 	.word	0x000392b4
   19944:	0001a4ed 	.word	0x0001a4ed
   19948:	0001a0a5 	.word	0x0001a0a5
   1994c:	0001a6a9 	.word	0x0001a6a9

00019950 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19950:	b580      	push	{r7, lr}
   19952:	b08a      	sub	sp, #40	; 0x28
   19954:	af00      	add	r7, sp, #0
   19956:	6078      	str	r0, [r7, #4]
   19958:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1995a:	2326      	movs	r3, #38	; 0x26
   1995c:	18fb      	adds	r3, r7, r3
   1995e:	2200      	movs	r2, #0
   19960:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19962:	687b      	ldr	r3, [r7, #4]
   19964:	2bfe      	cmp	r3, #254	; 0xfe
   19966:	d904      	bls.n	19972 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19968:	4b2d      	ldr	r3, [pc, #180]	; (19a20 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1996a:	0018      	movs	r0, r3
   1996c:	4b2d      	ldr	r3, [pc, #180]	; (19a24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1996e:	4798      	blx	r3
   19970:	e053      	b.n	19a1a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19972:	4b2d      	ldr	r3, [pc, #180]	; (19a28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19974:	681b      	ldr	r3, [r3, #0]
   19976:	2b00      	cmp	r3, #0
   19978:	d004      	beq.n	19984 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1997a:	4b2c      	ldr	r3, [pc, #176]	; (19a2c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1997c:	0018      	movs	r0, r3
   1997e:	4b29      	ldr	r3, [pc, #164]	; (19a24 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19980:	4798      	blx	r3
		return;
   19982:	e04a      	b.n	19a1a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19984:	f3ef 8310 	mrs	r3, PRIMASK
   19988:	613b      	str	r3, [r7, #16]
  return(result);
   1998a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1998c:	623b      	str	r3, [r7, #32]
   1998e:	2301      	movs	r3, #1
   19990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19992:	697b      	ldr	r3, [r7, #20]
   19994:	f383 8810 	msr	PRIMASK, r3
   19998:	4b23      	ldr	r3, [pc, #140]	; (19a28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1999a:	681b      	ldr	r3, [r3, #0]
   1999c:	1c5a      	adds	r2, r3, #1
   1999e:	4b22      	ldr	r3, [pc, #136]	; (19a28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   199a0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   199a2:	4b23      	ldr	r3, [pc, #140]	; (19a30 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   199a4:	681b      	ldr	r3, [r3, #0]
   199a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   199a8:	2b00      	cmp	r3, #0
   199aa:	d02c      	beq.n	19a06 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   199ac:	4b21      	ldr	r3, [pc, #132]	; (19a34 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   199ae:	781b      	ldrb	r3, [r3, #0]
   199b0:	2b00      	cmp	r3, #0
   199b2:	d028      	beq.n	19a06 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   199b4:	20ff      	movs	r0, #255	; 0xff
   199b6:	4b20      	ldr	r3, [pc, #128]	; (19a38 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   199b8:	4798      	blx	r3
   199ba:	0003      	movs	r3, r0
   199bc:	001a      	movs	r2, r3
   199be:	231f      	movs	r3, #31
   199c0:	18fb      	adds	r3, r7, r3
   199c2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   199c4:	683b      	ldr	r3, [r7, #0]
   199c6:	4a1d      	ldr	r2, [pc, #116]	; (19a3c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   199c8:	0019      	movs	r1, r3
   199ca:	0010      	movs	r0, r2
   199cc:	4b1c      	ldr	r3, [pc, #112]	; (19a40 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   199ce:	4798      	blx	r3
   199d0:	0002      	movs	r2, r0
   199d2:	2326      	movs	r3, #38	; 0x26
   199d4:	18fb      	adds	r3, r7, r3
   199d6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   199d8:	4b1a      	ldr	r3, [pc, #104]	; (19a44 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   199da:	4798      	blx	r3
   199dc:	0003      	movs	r3, r0
   199de:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   199e0:	69bb      	ldr	r3, [r7, #24]
   199e2:	2b00      	cmp	r3, #0
   199e4:	d00f      	beq.n	19a06 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   199e6:	69bb      	ldr	r3, [r7, #24]
   199e8:	221f      	movs	r2, #31
   199ea:	18ba      	adds	r2, r7, r2
   199ec:	7812      	ldrb	r2, [r2, #0]
   199ee:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   199f0:	687b      	ldr	r3, [r7, #4]
   199f2:	b2da      	uxtb	r2, r3
   199f4:	69bb      	ldr	r3, [r7, #24]
   199f6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   199f8:	69bb      	ldr	r3, [r7, #24]
   199fa:	2226      	movs	r2, #38	; 0x26
   199fc:	18ba      	adds	r2, r7, r2
   199fe:	8812      	ldrh	r2, [r2, #0]
   19a00:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19a02:	4b11      	ldr	r3, [pc, #68]	; (19a48 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19a04:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a06:	4b08      	ldr	r3, [pc, #32]	; (19a28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a08:	681b      	ldr	r3, [r3, #0]
   19a0a:	1e5a      	subs	r2, r3, #1
   19a0c:	4b06      	ldr	r3, [pc, #24]	; (19a28 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a0e:	601a      	str	r2, [r3, #0]
   19a10:	6a3b      	ldr	r3, [r7, #32]
   19a12:	60fb      	str	r3, [r7, #12]
   19a14:	68fb      	ldr	r3, [r7, #12]
   19a16:	f383 8810 	msr	PRIMASK, r3
}
   19a1a:	46bd      	mov	sp, r7
   19a1c:	b00a      	add	sp, #40	; 0x28
   19a1e:	bd80      	pop	{r7, pc}
   19a20:	000392f0 	.word	0x000392f0
   19a24:	0001a4ed 	.word	0x0001a4ed
   19a28:	20000d44 	.word	0x20000d44
   19a2c:	00039348 	.word	0x00039348
   19a30:	20000dec 	.word	0x20000dec
   19a34:	20000d50 	.word	0x20000d50
   19a38:	0001a701 	.word	0x0001a701
   19a3c:	0000ffff 	.word	0x0000ffff
   19a40:	000198c5 	.word	0x000198c5
   19a44:	0001a0a5 	.word	0x0001a0a5
   19a48:	0001a6a9 	.word	0x0001a6a9

00019a4c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19a4c:	b590      	push	{r4, r7, lr}
   19a4e:	b089      	sub	sp, #36	; 0x24
   19a50:	af00      	add	r7, sp, #0
   19a52:	0002      	movs	r2, r0
   19a54:	1dfb      	adds	r3, r7, #7
   19a56:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19a58:	1dfb      	adds	r3, r7, #7
   19a5a:	781b      	ldrb	r3, [r3, #0]
   19a5c:	2b0f      	cmp	r3, #15
   19a5e:	d904      	bls.n	19a6a <prvTraceStoreTaskswitch+0x1e>
   19a60:	4b34      	ldr	r3, [pc, #208]	; (19b34 <prvTraceStoreTaskswitch+0xe8>)
   19a62:	0018      	movs	r0, r3
   19a64:	4b34      	ldr	r3, [pc, #208]	; (19b38 <prvTraceStoreTaskswitch+0xec>)
   19a66:	4798      	blx	r3
   19a68:	e061      	b.n	19b2e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19a6a:	f3ef 8310 	mrs	r3, PRIMASK
   19a6e:	60fb      	str	r3, [r7, #12]
  return(result);
   19a70:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19a72:	61fb      	str	r3, [r7, #28]
   19a74:	2301      	movs	r3, #1
   19a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19a78:	693b      	ldr	r3, [r7, #16]
   19a7a:	f383 8810 	msr	PRIMASK, r3
   19a7e:	4b2f      	ldr	r3, [pc, #188]	; (19b3c <prvTraceStoreTaskswitch+0xf0>)
   19a80:	681b      	ldr	r3, [r3, #0]
   19a82:	1c5a      	adds	r2, r3, #1
   19a84:	4b2d      	ldr	r3, [pc, #180]	; (19b3c <prvTraceStoreTaskswitch+0xf0>)
   19a86:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19a88:	4b2d      	ldr	r3, [pc, #180]	; (19b40 <prvTraceStoreTaskswitch+0xf4>)
   19a8a:	781b      	ldrb	r3, [r3, #0]
   19a8c:	1dfa      	adds	r2, r7, #7
   19a8e:	7812      	ldrb	r2, [r2, #0]
   19a90:	429a      	cmp	r2, r3
   19a92:	d042      	beq.n	19b1a <prvTraceStoreTaskswitch+0xce>
   19a94:	4b2b      	ldr	r3, [pc, #172]	; (19b44 <prvTraceStoreTaskswitch+0xf8>)
   19a96:	681b      	ldr	r3, [r3, #0]
   19a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a9a:	2b00      	cmp	r3, #0
   19a9c:	d03d      	beq.n	19b1a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19a9e:	4b2a      	ldr	r3, [pc, #168]	; (19b48 <prvTraceStoreTaskswitch+0xfc>)
   19aa0:	2200      	movs	r2, #0
   19aa2:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19aa4:	231a      	movs	r3, #26
   19aa6:	18fc      	adds	r4, r7, r3
   19aa8:	4b28      	ldr	r3, [pc, #160]	; (19b4c <prvTraceStoreTaskswitch+0x100>)
   19aaa:	0018      	movs	r0, r3
   19aac:	4b28      	ldr	r3, [pc, #160]	; (19b50 <prvTraceStoreTaskswitch+0x104>)
   19aae:	4798      	blx	r3
   19ab0:	0003      	movs	r3, r0
   19ab2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19ab4:	4b22      	ldr	r3, [pc, #136]	; (19b40 <prvTraceStoreTaskswitch+0xf4>)
   19ab6:	1dfa      	adds	r2, r7, #7
   19ab8:	7812      	ldrb	r2, [r2, #0]
   19aba:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19abc:	2319      	movs	r3, #25
   19abe:	18fb      	adds	r3, r7, r3
   19ac0:	4a1f      	ldr	r2, [pc, #124]	; (19b40 <prvTraceStoreTaskswitch+0xf4>)
   19ac2:	7812      	ldrb	r2, [r2, #0]
   19ac4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19ac6:	4b23      	ldr	r3, [pc, #140]	; (19b54 <prvTraceStoreTaskswitch+0x108>)
   19ac8:	4798      	blx	r3
   19aca:	0003      	movs	r3, r0
   19acc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19ace:	697b      	ldr	r3, [r7, #20]
   19ad0:	2b00      	cmp	r3, #0
   19ad2:	d022      	beq.n	19b1a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19ad4:	4b1a      	ldr	r3, [pc, #104]	; (19b40 <prvTraceStoreTaskswitch+0xf4>)
   19ad6:	781b      	ldrb	r3, [r3, #0]
   19ad8:	0019      	movs	r1, r3
   19ada:	2003      	movs	r0, #3
   19adc:	4b1e      	ldr	r3, [pc, #120]	; (19b58 <prvTraceStoreTaskswitch+0x10c>)
   19ade:	4798      	blx	r3
   19ae0:	0003      	movs	r3, r0
   19ae2:	2b01      	cmp	r3, #1
   19ae4:	d103      	bne.n	19aee <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19ae6:	697b      	ldr	r3, [r7, #20]
   19ae8:	2207      	movs	r2, #7
   19aea:	701a      	strb	r2, [r3, #0]
   19aec:	e002      	b.n	19af4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19aee:	697b      	ldr	r3, [r7, #20]
   19af0:	2206      	movs	r2, #6
   19af2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19af4:	697b      	ldr	r3, [r7, #20]
   19af6:	221a      	movs	r2, #26
   19af8:	18ba      	adds	r2, r7, r2
   19afa:	8812      	ldrh	r2, [r2, #0]
   19afc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19afe:	697b      	ldr	r3, [r7, #20]
   19b00:	2219      	movs	r2, #25
   19b02:	18ba      	adds	r2, r7, r2
   19b04:	7812      	ldrb	r2, [r2, #0]
   19b06:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19b08:	4b0d      	ldr	r3, [pc, #52]	; (19b40 <prvTraceStoreTaskswitch+0xf4>)
   19b0a:	781b      	ldrb	r3, [r3, #0]
   19b0c:	2201      	movs	r2, #1
   19b0e:	0019      	movs	r1, r3
   19b10:	2003      	movs	r0, #3
   19b12:	4b12      	ldr	r3, [pc, #72]	; (19b5c <prvTraceStoreTaskswitch+0x110>)
   19b14:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19b16:	4b12      	ldr	r3, [pc, #72]	; (19b60 <prvTraceStoreTaskswitch+0x114>)
   19b18:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19b1a:	4b08      	ldr	r3, [pc, #32]	; (19b3c <prvTraceStoreTaskswitch+0xf0>)
   19b1c:	681b      	ldr	r3, [r3, #0]
   19b1e:	1e5a      	subs	r2, r3, #1
   19b20:	4b06      	ldr	r3, [pc, #24]	; (19b3c <prvTraceStoreTaskswitch+0xf0>)
   19b22:	601a      	str	r2, [r3, #0]
   19b24:	69fb      	ldr	r3, [r7, #28]
   19b26:	60bb      	str	r3, [r7, #8]
   19b28:	68bb      	ldr	r3, [r7, #8]
   19b2a:	f383 8810 	msr	PRIMASK, r3
}
   19b2e:	46bd      	mov	sp, r7
   19b30:	b009      	add	sp, #36	; 0x24
   19b32:	bd90      	pop	{r4, r7, pc}
   19b34:	00039380 	.word	0x00039380
   19b38:	0001a4ed 	.word	0x0001a4ed
   19b3c:	20000d44 	.word	0x20000d44
   19b40:	20000d50 	.word	0x20000d50
   19b44:	20000dec 	.word	0x20000dec
   19b48:	20000d30 	.word	0x20000d30
   19b4c:	0000ffff 	.word	0x0000ffff
   19b50:	0001a701 	.word	0x0001a701
   19b54:	0001a0a5 	.word	0x0001a0a5
   19b58:	00019d49 	.word	0x00019d49
   19b5c:	00019ca5 	.word	0x00019ca5
   19b60:	0001a6a9 	.word	0x0001a6a9

00019b64 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19b64:	b590      	push	{r4, r7, lr}
   19b66:	b083      	sub	sp, #12
   19b68:	af00      	add	r7, sp, #0
   19b6a:	0004      	movs	r4, r0
   19b6c:	0008      	movs	r0, r1
   19b6e:	0011      	movs	r1, r2
   19b70:	1dfb      	adds	r3, r7, #7
   19b72:	1c22      	adds	r2, r4, #0
   19b74:	701a      	strb	r2, [r3, #0]
   19b76:	1dbb      	adds	r3, r7, #6
   19b78:	1c02      	adds	r2, r0, #0
   19b7a:	701a      	strb	r2, [r3, #0]
   19b7c:	1d7b      	adds	r3, r7, #5
   19b7e:	1c0a      	adds	r2, r1, #0
   19b80:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19b82:	1dfb      	adds	r3, r7, #7
   19b84:	781b      	ldrb	r3, [r3, #0]
   19b86:	2b08      	cmp	r3, #8
   19b88:	d904      	bls.n	19b94 <prvTraceSetPriorityProperty+0x30>
   19b8a:	4b1a      	ldr	r3, [pc, #104]	; (19bf4 <prvTraceSetPriorityProperty+0x90>)
   19b8c:	0018      	movs	r0, r3
   19b8e:	4b1a      	ldr	r3, [pc, #104]	; (19bf8 <prvTraceSetPriorityProperty+0x94>)
   19b90:	4798      	blx	r3
   19b92:	e02c      	b.n	19bee <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19b94:	4b19      	ldr	r3, [pc, #100]	; (19bfc <prvTraceSetPriorityProperty+0x98>)
   19b96:	681a      	ldr	r2, [r3, #0]
   19b98:	1dfb      	adds	r3, r7, #7
   19b9a:	781b      	ldrb	r3, [r3, #0]
   19b9c:	2164      	movs	r1, #100	; 0x64
   19b9e:	18d3      	adds	r3, r2, r3
   19ba0:	185b      	adds	r3, r3, r1
   19ba2:	781b      	ldrb	r3, [r3, #0]
   19ba4:	1dba      	adds	r2, r7, #6
   19ba6:	7812      	ldrb	r2, [r2, #0]
   19ba8:	429a      	cmp	r2, r3
   19baa:	d904      	bls.n	19bb6 <prvTraceSetPriorityProperty+0x52>
   19bac:	4b14      	ldr	r3, [pc, #80]	; (19c00 <prvTraceSetPriorityProperty+0x9c>)
   19bae:	0018      	movs	r0, r3
   19bb0:	4b11      	ldr	r3, [pc, #68]	; (19bf8 <prvTraceSetPriorityProperty+0x94>)
   19bb2:	4798      	blx	r3
   19bb4:	e01b      	b.n	19bee <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19bb6:	4b11      	ldr	r3, [pc, #68]	; (19bfc <prvTraceSetPriorityProperty+0x98>)
   19bb8:	681c      	ldr	r4, [r3, #0]
   19bba:	1dfb      	adds	r3, r7, #7
   19bbc:	781a      	ldrb	r2, [r3, #0]
   19bbe:	1dbb      	adds	r3, r7, #6
   19bc0:	781b      	ldrb	r3, [r3, #0]
   19bc2:	0011      	movs	r1, r2
   19bc4:	0018      	movs	r0, r3
   19bc6:	4b0f      	ldr	r3, [pc, #60]	; (19c04 <prvTraceSetPriorityProperty+0xa0>)
   19bc8:	4798      	blx	r3
   19bca:	0003      	movs	r3, r0
   19bcc:	0018      	movs	r0, r3
   19bce:	4b0b      	ldr	r3, [pc, #44]	; (19bfc <prvTraceSetPriorityProperty+0x98>)
   19bd0:	681a      	ldr	r2, [r3, #0]
   19bd2:	1dfb      	adds	r3, r7, #7
   19bd4:	781b      	ldrb	r3, [r3, #0]
   19bd6:	2170      	movs	r1, #112	; 0x70
   19bd8:	18d3      	adds	r3, r2, r3
   19bda:	185b      	adds	r3, r3, r1
   19bdc:	781b      	ldrb	r3, [r3, #0]
   19bde:	18c3      	adds	r3, r0, r3
   19be0:	3301      	adds	r3, #1
   19be2:	229c      	movs	r2, #156	; 0x9c
   19be4:	18e3      	adds	r3, r4, r3
   19be6:	189b      	adds	r3, r3, r2
   19be8:	1d7a      	adds	r2, r7, #5
   19bea:	7812      	ldrb	r2, [r2, #0]
   19bec:	701a      	strb	r2, [r3, #0]
}
   19bee:	46bd      	mov	sp, r7
   19bf0:	b003      	add	sp, #12
   19bf2:	bd90      	pop	{r4, r7, pc}
   19bf4:	00039514 	.word	0x00039514
   19bf8:	0001a4ed 	.word	0x0001a4ed
   19bfc:	20000dec 	.word	0x20000dec
   19c00:	00039560 	.word	0x00039560
   19c04:	0001a0f9 	.word	0x0001a0f9

00019c08 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19c08:	b590      	push	{r4, r7, lr}
   19c0a:	b083      	sub	sp, #12
   19c0c:	af00      	add	r7, sp, #0
   19c0e:	0002      	movs	r2, r0
   19c10:	1dfb      	adds	r3, r7, #7
   19c12:	701a      	strb	r2, [r3, #0]
   19c14:	1dbb      	adds	r3, r7, #6
   19c16:	1c0a      	adds	r2, r1, #0
   19c18:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19c1a:	1dfb      	adds	r3, r7, #7
   19c1c:	781b      	ldrb	r3, [r3, #0]
   19c1e:	2b08      	cmp	r3, #8
   19c20:	d905      	bls.n	19c2e <prvTraceGetPriorityProperty+0x26>
   19c22:	4b1b      	ldr	r3, [pc, #108]	; (19c90 <prvTraceGetPriorityProperty+0x88>)
   19c24:	0018      	movs	r0, r3
   19c26:	4b1b      	ldr	r3, [pc, #108]	; (19c94 <prvTraceGetPriorityProperty+0x8c>)
   19c28:	4798      	blx	r3
   19c2a:	2300      	movs	r3, #0
   19c2c:	e02b      	b.n	19c86 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19c2e:	4b1a      	ldr	r3, [pc, #104]	; (19c98 <prvTraceGetPriorityProperty+0x90>)
   19c30:	681a      	ldr	r2, [r3, #0]
   19c32:	1dfb      	adds	r3, r7, #7
   19c34:	781b      	ldrb	r3, [r3, #0]
   19c36:	2164      	movs	r1, #100	; 0x64
   19c38:	18d3      	adds	r3, r2, r3
   19c3a:	185b      	adds	r3, r3, r1
   19c3c:	781b      	ldrb	r3, [r3, #0]
   19c3e:	1dba      	adds	r2, r7, #6
   19c40:	7812      	ldrb	r2, [r2, #0]
   19c42:	429a      	cmp	r2, r3
   19c44:	d905      	bls.n	19c52 <prvTraceGetPriorityProperty+0x4a>
   19c46:	4b15      	ldr	r3, [pc, #84]	; (19c9c <prvTraceGetPriorityProperty+0x94>)
   19c48:	0018      	movs	r0, r3
   19c4a:	4b12      	ldr	r3, [pc, #72]	; (19c94 <prvTraceGetPriorityProperty+0x8c>)
   19c4c:	4798      	blx	r3
   19c4e:	2300      	movs	r3, #0
   19c50:	e019      	b.n	19c86 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19c52:	4b11      	ldr	r3, [pc, #68]	; (19c98 <prvTraceGetPriorityProperty+0x90>)
   19c54:	681c      	ldr	r4, [r3, #0]
   19c56:	1dfb      	adds	r3, r7, #7
   19c58:	781a      	ldrb	r2, [r3, #0]
   19c5a:	1dbb      	adds	r3, r7, #6
   19c5c:	781b      	ldrb	r3, [r3, #0]
   19c5e:	0011      	movs	r1, r2
   19c60:	0018      	movs	r0, r3
   19c62:	4b0f      	ldr	r3, [pc, #60]	; (19ca0 <prvTraceGetPriorityProperty+0x98>)
   19c64:	4798      	blx	r3
   19c66:	0003      	movs	r3, r0
   19c68:	0018      	movs	r0, r3
   19c6a:	4b0b      	ldr	r3, [pc, #44]	; (19c98 <prvTraceGetPriorityProperty+0x90>)
   19c6c:	681a      	ldr	r2, [r3, #0]
   19c6e:	1dfb      	adds	r3, r7, #7
   19c70:	781b      	ldrb	r3, [r3, #0]
   19c72:	2170      	movs	r1, #112	; 0x70
   19c74:	18d3      	adds	r3, r2, r3
   19c76:	185b      	adds	r3, r3, r1
   19c78:	781b      	ldrb	r3, [r3, #0]
   19c7a:	18c3      	adds	r3, r0, r3
   19c7c:	3301      	adds	r3, #1
   19c7e:	229c      	movs	r2, #156	; 0x9c
   19c80:	18e3      	adds	r3, r4, r3
   19c82:	189b      	adds	r3, r3, r2
   19c84:	781b      	ldrb	r3, [r3, #0]
}
   19c86:	0018      	movs	r0, r3
   19c88:	46bd      	mov	sp, r7
   19c8a:	b003      	add	sp, #12
   19c8c:	bd90      	pop	{r4, r7, pc}
   19c8e:	46c0      	nop			; (mov r8, r8)
   19c90:	000395a0 	.word	0x000395a0
   19c94:	0001a4ed 	.word	0x0001a4ed
   19c98:	20000dec 	.word	0x20000dec
   19c9c:	000395ec 	.word	0x000395ec
   19ca0:	0001a0f9 	.word	0x0001a0f9

00019ca4 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19ca4:	b590      	push	{r4, r7, lr}
   19ca6:	b083      	sub	sp, #12
   19ca8:	af00      	add	r7, sp, #0
   19caa:	0004      	movs	r4, r0
   19cac:	0008      	movs	r0, r1
   19cae:	0011      	movs	r1, r2
   19cb0:	1dfb      	adds	r3, r7, #7
   19cb2:	1c22      	adds	r2, r4, #0
   19cb4:	701a      	strb	r2, [r3, #0]
   19cb6:	1dbb      	adds	r3, r7, #6
   19cb8:	1c02      	adds	r2, r0, #0
   19cba:	701a      	strb	r2, [r3, #0]
   19cbc:	1d7b      	adds	r3, r7, #5
   19cbe:	1c0a      	adds	r2, r1, #0
   19cc0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19cc2:	1dfb      	adds	r3, r7, #7
   19cc4:	781b      	ldrb	r3, [r3, #0]
   19cc6:	2b08      	cmp	r3, #8
   19cc8:	d904      	bls.n	19cd4 <prvTraceSetObjectState+0x30>
   19cca:	4b1a      	ldr	r3, [pc, #104]	; (19d34 <prvTraceSetObjectState+0x90>)
   19ccc:	0018      	movs	r0, r3
   19cce:	4b1a      	ldr	r3, [pc, #104]	; (19d38 <prvTraceSetObjectState+0x94>)
   19cd0:	4798      	blx	r3
   19cd2:	e02b      	b.n	19d2c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19cd4:	4b19      	ldr	r3, [pc, #100]	; (19d3c <prvTraceSetObjectState+0x98>)
   19cd6:	681a      	ldr	r2, [r3, #0]
   19cd8:	1dfb      	adds	r3, r7, #7
   19cda:	781b      	ldrb	r3, [r3, #0]
   19cdc:	2164      	movs	r1, #100	; 0x64
   19cde:	18d3      	adds	r3, r2, r3
   19ce0:	185b      	adds	r3, r3, r1
   19ce2:	781b      	ldrb	r3, [r3, #0]
   19ce4:	1dba      	adds	r2, r7, #6
   19ce6:	7812      	ldrb	r2, [r2, #0]
   19ce8:	429a      	cmp	r2, r3
   19cea:	d904      	bls.n	19cf6 <prvTraceSetObjectState+0x52>
   19cec:	4b14      	ldr	r3, [pc, #80]	; (19d40 <prvTraceSetObjectState+0x9c>)
   19cee:	0018      	movs	r0, r3
   19cf0:	4b11      	ldr	r3, [pc, #68]	; (19d38 <prvTraceSetObjectState+0x94>)
   19cf2:	4798      	blx	r3
   19cf4:	e01a      	b.n	19d2c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19cf6:	4b11      	ldr	r3, [pc, #68]	; (19d3c <prvTraceSetObjectState+0x98>)
   19cf8:	681c      	ldr	r4, [r3, #0]
   19cfa:	1dfb      	adds	r3, r7, #7
   19cfc:	781a      	ldrb	r2, [r3, #0]
   19cfe:	1dbb      	adds	r3, r7, #6
   19d00:	781b      	ldrb	r3, [r3, #0]
   19d02:	0011      	movs	r1, r2
   19d04:	0018      	movs	r0, r3
   19d06:	4b0f      	ldr	r3, [pc, #60]	; (19d44 <prvTraceSetObjectState+0xa0>)
   19d08:	4798      	blx	r3
   19d0a:	0003      	movs	r3, r0
   19d0c:	0018      	movs	r0, r3
   19d0e:	4b0b      	ldr	r3, [pc, #44]	; (19d3c <prvTraceSetObjectState+0x98>)
   19d10:	681a      	ldr	r2, [r3, #0]
   19d12:	1dfb      	adds	r3, r7, #7
   19d14:	781b      	ldrb	r3, [r3, #0]
   19d16:	2170      	movs	r1, #112	; 0x70
   19d18:	18d3      	adds	r3, r2, r3
   19d1a:	185b      	adds	r3, r3, r1
   19d1c:	781b      	ldrb	r3, [r3, #0]
   19d1e:	18c3      	adds	r3, r0, r3
   19d20:	229c      	movs	r2, #156	; 0x9c
   19d22:	18e3      	adds	r3, r4, r3
   19d24:	189b      	adds	r3, r3, r2
   19d26:	1d7a      	adds	r2, r7, #5
   19d28:	7812      	ldrb	r2, [r2, #0]
   19d2a:	701a      	strb	r2, [r3, #0]
}
   19d2c:	46bd      	mov	sp, r7
   19d2e:	b003      	add	sp, #12
   19d30:	bd90      	pop	{r4, r7, pc}
   19d32:	46c0      	nop			; (mov r8, r8)
   19d34:	0003962c 	.word	0x0003962c
   19d38:	0001a4ed 	.word	0x0001a4ed
   19d3c:	20000dec 	.word	0x20000dec
   19d40:	00039670 	.word	0x00039670
   19d44:	0001a0f9 	.word	0x0001a0f9

00019d48 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19d48:	b590      	push	{r4, r7, lr}
   19d4a:	b083      	sub	sp, #12
   19d4c:	af00      	add	r7, sp, #0
   19d4e:	0002      	movs	r2, r0
   19d50:	1dfb      	adds	r3, r7, #7
   19d52:	701a      	strb	r2, [r3, #0]
   19d54:	1dbb      	adds	r3, r7, #6
   19d56:	1c0a      	adds	r2, r1, #0
   19d58:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19d5a:	1dfb      	adds	r3, r7, #7
   19d5c:	781b      	ldrb	r3, [r3, #0]
   19d5e:	2b08      	cmp	r3, #8
   19d60:	d905      	bls.n	19d6e <prvTraceGetObjectState+0x26>
   19d62:	4b1a      	ldr	r3, [pc, #104]	; (19dcc <prvTraceGetObjectState+0x84>)
   19d64:	0018      	movs	r0, r3
   19d66:	4b1a      	ldr	r3, [pc, #104]	; (19dd0 <prvTraceGetObjectState+0x88>)
   19d68:	4798      	blx	r3
   19d6a:	2300      	movs	r3, #0
   19d6c:	e02a      	b.n	19dc4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19d6e:	4b19      	ldr	r3, [pc, #100]	; (19dd4 <prvTraceGetObjectState+0x8c>)
   19d70:	681a      	ldr	r2, [r3, #0]
   19d72:	1dfb      	adds	r3, r7, #7
   19d74:	781b      	ldrb	r3, [r3, #0]
   19d76:	2164      	movs	r1, #100	; 0x64
   19d78:	18d3      	adds	r3, r2, r3
   19d7a:	185b      	adds	r3, r3, r1
   19d7c:	781b      	ldrb	r3, [r3, #0]
   19d7e:	1dba      	adds	r2, r7, #6
   19d80:	7812      	ldrb	r2, [r2, #0]
   19d82:	429a      	cmp	r2, r3
   19d84:	d905      	bls.n	19d92 <prvTraceGetObjectState+0x4a>
   19d86:	4b14      	ldr	r3, [pc, #80]	; (19dd8 <prvTraceGetObjectState+0x90>)
   19d88:	0018      	movs	r0, r3
   19d8a:	4b11      	ldr	r3, [pc, #68]	; (19dd0 <prvTraceGetObjectState+0x88>)
   19d8c:	4798      	blx	r3
   19d8e:	2300      	movs	r3, #0
   19d90:	e018      	b.n	19dc4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19d92:	4b10      	ldr	r3, [pc, #64]	; (19dd4 <prvTraceGetObjectState+0x8c>)
   19d94:	681c      	ldr	r4, [r3, #0]
   19d96:	1dfb      	adds	r3, r7, #7
   19d98:	781a      	ldrb	r2, [r3, #0]
   19d9a:	1dbb      	adds	r3, r7, #6
   19d9c:	781b      	ldrb	r3, [r3, #0]
   19d9e:	0011      	movs	r1, r2
   19da0:	0018      	movs	r0, r3
   19da2:	4b0e      	ldr	r3, [pc, #56]	; (19ddc <prvTraceGetObjectState+0x94>)
   19da4:	4798      	blx	r3
   19da6:	0003      	movs	r3, r0
   19da8:	0018      	movs	r0, r3
   19daa:	4b0a      	ldr	r3, [pc, #40]	; (19dd4 <prvTraceGetObjectState+0x8c>)
   19dac:	681a      	ldr	r2, [r3, #0]
   19dae:	1dfb      	adds	r3, r7, #7
   19db0:	781b      	ldrb	r3, [r3, #0]
   19db2:	2170      	movs	r1, #112	; 0x70
   19db4:	18d3      	adds	r3, r2, r3
   19db6:	185b      	adds	r3, r3, r1
   19db8:	781b      	ldrb	r3, [r3, #0]
   19dba:	18c3      	adds	r3, r0, r3
   19dbc:	229c      	movs	r2, #156	; 0x9c
   19dbe:	18e3      	adds	r3, r4, r3
   19dc0:	189b      	adds	r3, r3, r2
   19dc2:	781b      	ldrb	r3, [r3, #0]
}
   19dc4:	0018      	movs	r0, r3
   19dc6:	46bd      	mov	sp, r7
   19dc8:	b003      	add	sp, #12
   19dca:	bd90      	pop	{r4, r7, pc}
   19dcc:	000396ac 	.word	0x000396ac
   19dd0:	0001a4ed 	.word	0x0001a4ed
   19dd4:	20000dec 	.word	0x20000dec
   19dd8:	000396f0 	.word	0x000396f0
   19ddc:	0001a0f9 	.word	0x0001a0f9

00019de0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19de0:	b590      	push	{r4, r7, lr}
   19de2:	b083      	sub	sp, #12
   19de4:	af00      	add	r7, sp, #0
   19de6:	0002      	movs	r2, r0
   19de8:	1dfb      	adds	r3, r7, #7
   19dea:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19dec:	4b11      	ldr	r3, [pc, #68]	; (19e34 <prvTraceSetTaskInstanceFinished+0x54>)
   19dee:	681b      	ldr	r3, [r3, #0]
   19df0:	2267      	movs	r2, #103	; 0x67
   19df2:	5c9b      	ldrb	r3, [r3, r2]
   19df4:	1dfa      	adds	r2, r7, #7
   19df6:	7812      	ldrb	r2, [r2, #0]
   19df8:	429a      	cmp	r2, r3
   19dfa:	d904      	bls.n	19e06 <prvTraceSetTaskInstanceFinished+0x26>
   19dfc:	4b0e      	ldr	r3, [pc, #56]	; (19e38 <prvTraceSetTaskInstanceFinished+0x58>)
   19dfe:	0018      	movs	r0, r3
   19e00:	4b0e      	ldr	r3, [pc, #56]	; (19e3c <prvTraceSetTaskInstanceFinished+0x5c>)
   19e02:	4798      	blx	r3
   19e04:	e013      	b.n	19e2e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19e06:	4b0b      	ldr	r3, [pc, #44]	; (19e34 <prvTraceSetTaskInstanceFinished+0x54>)
   19e08:	681c      	ldr	r4, [r3, #0]
   19e0a:	1dfb      	adds	r3, r7, #7
   19e0c:	781b      	ldrb	r3, [r3, #0]
   19e0e:	2103      	movs	r1, #3
   19e10:	0018      	movs	r0, r3
   19e12:	4b0b      	ldr	r3, [pc, #44]	; (19e40 <prvTraceSetTaskInstanceFinished+0x60>)
   19e14:	4798      	blx	r3
   19e16:	0003      	movs	r3, r0
   19e18:	0019      	movs	r1, r3
   19e1a:	4b06      	ldr	r3, [pc, #24]	; (19e34 <prvTraceSetTaskInstanceFinished+0x54>)
   19e1c:	681b      	ldr	r3, [r3, #0]
   19e1e:	2273      	movs	r2, #115	; 0x73
   19e20:	5c9b      	ldrb	r3, [r3, r2]
   19e22:	18cb      	adds	r3, r1, r3
   19e24:	229c      	movs	r2, #156	; 0x9c
   19e26:	18e3      	adds	r3, r4, r3
   19e28:	189b      	adds	r3, r3, r2
   19e2a:	2200      	movs	r2, #0
   19e2c:	701a      	strb	r2, [r3, #0]
#endif
}
   19e2e:	46bd      	mov	sp, r7
   19e30:	b003      	add	sp, #12
   19e32:	bd90      	pop	{r4, r7, pc}
   19e34:	20000dec 	.word	0x20000dec
   19e38:	0003972c 	.word	0x0003972c
   19e3c:	0001a4ed 	.word	0x0001a4ed
   19e40:	0001a0f9 	.word	0x0001a0f9

00019e44 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19e44:	b580      	push	{r7, lr}
   19e46:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19e48:	4b75      	ldr	r3, [pc, #468]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e4a:	681b      	ldr	r3, [r3, #0]
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	d103      	bne.n	19e58 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19e50:	4b73      	ldr	r3, [pc, #460]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e52:	4a74      	ldr	r2, [pc, #464]	; (1a024 <prvTraceInitTraceData+0x1e0>)
   19e54:	601a      	str	r2, [r3, #0]
   19e56:	e006      	b.n	19e66 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19e58:	4b71      	ldr	r3, [pc, #452]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e5a:	681b      	ldr	r3, [r3, #0]
   19e5c:	781b      	ldrb	r3, [r3, #0]
   19e5e:	b2db      	uxtb	r3, r3
   19e60:	2b01      	cmp	r3, #1
   19e62:	d100      	bne.n	19e66 <prvTraceInitTraceData+0x22>
   19e64:	e0d8      	b.n	1a018 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19e66:	4b70      	ldr	r3, [pc, #448]	; (1a028 <prvTraceInitTraceData+0x1e4>)
   19e68:	681a      	ldr	r2, [r3, #0]
   19e6a:	4b70      	ldr	r3, [pc, #448]	; (1a02c <prvTraceInitTraceData+0x1e8>)
   19e6c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19e6e:	4b6c      	ldr	r3, [pc, #432]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e70:	6818      	ldr	r0, [r3, #0]
   19e72:	23bd      	movs	r3, #189	; 0xbd
   19e74:	011b      	lsls	r3, r3, #4
   19e76:	001a      	movs	r2, r3
   19e78:	2100      	movs	r1, #0
   19e7a:	4b6d      	ldr	r3, [pc, #436]	; (1a030 <prvTraceInitTraceData+0x1ec>)
   19e7c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19e7e:	4b68      	ldr	r3, [pc, #416]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e80:	681b      	ldr	r3, [r3, #0]
   19e82:	4a6c      	ldr	r2, [pc, #432]	; (1a034 <prvTraceInitTraceData+0x1f0>)
   19e84:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19e86:	4b66      	ldr	r3, [pc, #408]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e88:	681b      	ldr	r3, [r3, #0]
   19e8a:	2205      	movs	r2, #5
   19e8c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19e8e:	4b64      	ldr	r3, [pc, #400]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e90:	681b      	ldr	r3, [r3, #0]
   19e92:	2200      	movs	r2, #0
   19e94:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19e96:	4b62      	ldr	r3, [pc, #392]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19e98:	681b      	ldr	r3, [r3, #0]
   19e9a:	22bd      	movs	r2, #189	; 0xbd
   19e9c:	0112      	lsls	r2, r2, #4
   19e9e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19ea0:	4b5f      	ldr	r3, [pc, #380]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ea2:	681b      	ldr	r3, [r3, #0]
   19ea4:	2296      	movs	r2, #150	; 0x96
   19ea6:	0052      	lsls	r2, r2, #1
   19ea8:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19eaa:	4b5d      	ldr	r3, [pc, #372]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19eac:	681b      	ldr	r3, [r3, #0]
   19eae:	4a62      	ldr	r2, [pc, #392]	; (1a038 <prvTraceInitTraceData+0x1f4>)
   19eb0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19eb2:	4b5b      	ldr	r3, [pc, #364]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19eb4:	681b      	ldr	r3, [r3, #0]
   19eb6:	2200      	movs	r2, #0
   19eb8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19eba:	4b59      	ldr	r3, [pc, #356]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ebc:	681b      	ldr	r3, [r3, #0]
   19ebe:	2200      	movs	r2, #0
   19ec0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19ec2:	4b5e      	ldr	r3, [pc, #376]	; (1a03c <prvTraceInitTraceData+0x1f8>)
   19ec4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19ec6:	4b56      	ldr	r3, [pc, #344]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ec8:	681b      	ldr	r3, [r3, #0]
   19eca:	4a5d      	ldr	r2, [pc, #372]	; (1a040 <prvTraceInitTraceData+0x1fc>)
   19ecc:	495d      	ldr	r1, [pc, #372]	; (1a044 <prvTraceInitTraceData+0x200>)
   19ece:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19ed0:	4b53      	ldr	r3, [pc, #332]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ed2:	681a      	ldr	r2, [r3, #0]
   19ed4:	23ac      	movs	r3, #172	; 0xac
   19ed6:	00db      	lsls	r3, r3, #3
   19ed8:	21c8      	movs	r1, #200	; 0xc8
   19eda:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19edc:	4b50      	ldr	r3, [pc, #320]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ede:	681b      	ldr	r3, [r3, #0]
   19ee0:	4a59      	ldr	r2, [pc, #356]	; (1a048 <prvTraceInitTraceData+0x204>)
   19ee2:	2101      	movs	r1, #1
   19ee4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19ee6:	4b4e      	ldr	r3, [pc, #312]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ee8:	681a      	ldr	r2, [r3, #0]
   19eea:	23d7      	movs	r3, #215	; 0xd7
   19eec:	00db      	lsls	r3, r3, #3
   19eee:	4957      	ldr	r1, [pc, #348]	; (1a04c <prvTraceInitTraceData+0x208>)
   19ef0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19ef2:	4b4b      	ldr	r3, [pc, #300]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ef4:	681b      	ldr	r3, [r3, #0]
   19ef6:	4a56      	ldr	r2, [pc, #344]	; (1a050 <prvTraceInitTraceData+0x20c>)
   19ef8:	4694      	mov	ip, r2
   19efa:	4463      	add	r3, ip
   19efc:	4955      	ldr	r1, [pc, #340]	; (1a054 <prvTraceInitTraceData+0x210>)
   19efe:	2250      	movs	r2, #80	; 0x50
   19f00:	0018      	movs	r0, r3
   19f02:	4b55      	ldr	r3, [pc, #340]	; (1a058 <prvTraceInitTraceData+0x214>)
   19f04:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19f06:	4b46      	ldr	r3, [pc, #280]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f08:	681b      	ldr	r3, [r3, #0]
   19f0a:	4a54      	ldr	r2, [pc, #336]	; (1a05c <prvTraceInitTraceData+0x218>)
   19f0c:	4954      	ldr	r1, [pc, #336]	; (1a060 <prvTraceInitTraceData+0x21c>)
   19f0e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19f10:	4b43      	ldr	r3, [pc, #268]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f12:	681b      	ldr	r3, [r3, #0]
   19f14:	4a53      	ldr	r2, [pc, #332]	; (1a064 <prvTraceInitTraceData+0x220>)
   19f16:	210a      	movs	r1, #10
   19f18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19f1a:	4b41      	ldr	r3, [pc, #260]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f1c:	681b      	ldr	r3, [r3, #0]
   19f1e:	4a52      	ldr	r2, [pc, #328]	; (1a068 <prvTraceInitTraceData+0x224>)
   19f20:	210b      	movs	r1, #11
   19f22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19f24:	4b3e      	ldr	r3, [pc, #248]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f26:	681b      	ldr	r3, [r3, #0]
   19f28:	4a50      	ldr	r2, [pc, #320]	; (1a06c <prvTraceInitTraceData+0x228>)
   19f2a:	210c      	movs	r1, #12
   19f2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19f2e:	4b3c      	ldr	r3, [pc, #240]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f30:	681b      	ldr	r3, [r3, #0]
   19f32:	4a4f      	ldr	r2, [pc, #316]	; (1a070 <prvTraceInitTraceData+0x22c>)
   19f34:	210d      	movs	r1, #13
   19f36:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19f38:	4b39      	ldr	r3, [pc, #228]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f3a:	681b      	ldr	r3, [r3, #0]
   19f3c:	4a4d      	ldr	r2, [pc, #308]	; (1a074 <prvTraceInitTraceData+0x230>)
   19f3e:	2171      	movs	r1, #113	; 0x71
   19f40:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19f42:	4b37      	ldr	r3, [pc, #220]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f44:	681b      	ldr	r3, [r3, #0]
   19f46:	4a4c      	ldr	r2, [pc, #304]	; (1a078 <prvTraceInitTraceData+0x234>)
   19f48:	2172      	movs	r1, #114	; 0x72
   19f4a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19f4c:	4b34      	ldr	r3, [pc, #208]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f4e:	681b      	ldr	r3, [r3, #0]
   19f50:	4a4a      	ldr	r2, [pc, #296]	; (1a07c <prvTraceInitTraceData+0x238>)
   19f52:	2173      	movs	r1, #115	; 0x73
   19f54:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19f56:	4b32      	ldr	r3, [pc, #200]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f58:	681b      	ldr	r3, [r3, #0]
   19f5a:	4a49      	ldr	r2, [pc, #292]	; (1a080 <prvTraceInitTraceData+0x23c>)
   19f5c:	2174      	movs	r1, #116	; 0x74
   19f5e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19f60:	4b2f      	ldr	r3, [pc, #188]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	4a47      	ldr	r2, [pc, #284]	; (1a084 <prvTraceInitTraceData+0x240>)
   19f66:	21f1      	movs	r1, #241	; 0xf1
   19f68:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19f6a:	4b2d      	ldr	r3, [pc, #180]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f6c:	681b      	ldr	r3, [r3, #0]
   19f6e:	4a46      	ldr	r2, [pc, #280]	; (1a088 <prvTraceInitTraceData+0x244>)
   19f70:	21f2      	movs	r1, #242	; 0xf2
   19f72:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19f74:	4b2a      	ldr	r3, [pc, #168]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f76:	681b      	ldr	r3, [r3, #0]
   19f78:	4a44      	ldr	r2, [pc, #272]	; (1a08c <prvTraceInitTraceData+0x248>)
   19f7a:	21f3      	movs	r1, #243	; 0xf3
   19f7c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19f7e:	4b28      	ldr	r3, [pc, #160]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f80:	681b      	ldr	r3, [r3, #0]
   19f82:	4a43      	ldr	r2, [pc, #268]	; (1a090 <prvTraceInitTraceData+0x24c>)
   19f84:	21f4      	movs	r1, #244	; 0xf4
   19f86:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19f88:	4b42      	ldr	r3, [pc, #264]	; (1a094 <prvTraceInitTraceData+0x250>)
   19f8a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19f8c:	4b24      	ldr	r3, [pc, #144]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f8e:	681b      	ldr	r3, [r3, #0]
   19f90:	22f4      	movs	r2, #244	; 0xf4
   19f92:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19f94:	4b22      	ldr	r3, [pc, #136]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f96:	681b      	ldr	r3, [r3, #0]
   19f98:	22f3      	movs	r2, #243	; 0xf3
   19f9a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19f9c:	4b20      	ldr	r3, [pc, #128]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19f9e:	681b      	ldr	r3, [r3, #0]
   19fa0:	22f2      	movs	r2, #242	; 0xf2
   19fa2:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19fa4:	4b1e      	ldr	r3, [pc, #120]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fa6:	681b      	ldr	r3, [r3, #0]
   19fa8:	22f1      	movs	r2, #241	; 0xf1
   19faa:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19fac:	4b1c      	ldr	r3, [pc, #112]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fae:	681b      	ldr	r3, [r3, #0]
   19fb0:	2274      	movs	r2, #116	; 0x74
   19fb2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19fb4:	4b1a      	ldr	r3, [pc, #104]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fb6:	681b      	ldr	r3, [r3, #0]
   19fb8:	2273      	movs	r2, #115	; 0x73
   19fba:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19fbc:	4b18      	ldr	r3, [pc, #96]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fbe:	681b      	ldr	r3, [r3, #0]
   19fc0:	2272      	movs	r2, #114	; 0x72
   19fc2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19fc4:	4b16      	ldr	r3, [pc, #88]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fc6:	681b      	ldr	r3, [r3, #0]
   19fc8:	2271      	movs	r2, #113	; 0x71
   19fca:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19fcc:	4b14      	ldr	r3, [pc, #80]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fce:	681b      	ldr	r3, [r3, #0]
   19fd0:	2204      	movs	r2, #4
   19fd2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19fd4:	4b12      	ldr	r3, [pc, #72]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fd6:	681b      	ldr	r3, [r3, #0]
   19fd8:	2203      	movs	r2, #3
   19fda:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19fdc:	4b10      	ldr	r3, [pc, #64]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fde:	681b      	ldr	r3, [r3, #0]
   19fe0:	2202      	movs	r2, #2
   19fe2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19fe4:	4b0e      	ldr	r3, [pc, #56]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19fe6:	681b      	ldr	r3, [r3, #0]
   19fe8:	2201      	movs	r2, #1
   19fea:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19fec:	4b2a      	ldr	r3, [pc, #168]	; (1a098 <prvTraceInitTraceData+0x254>)
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	2b00      	cmp	r3, #0
   19ff2:	d012      	beq.n	1a01a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19ff4:	4b0a      	ldr	r3, [pc, #40]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   19ff6:	681b      	ldr	r3, [r3, #0]
   19ff8:	4a15      	ldr	r2, [pc, #84]	; (1a050 <prvTraceInitTraceData+0x20c>)
   19ffa:	1898      	adds	r0, r3, r2
   19ffc:	4b26      	ldr	r3, [pc, #152]	; (1a098 <prvTraceInitTraceData+0x254>)
   19ffe:	681b      	ldr	r3, [r3, #0]
   1a000:	2250      	movs	r2, #80	; 0x50
   1a002:	0019      	movs	r1, r3
   1a004:	4b14      	ldr	r3, [pc, #80]	; (1a058 <prvTraceInitTraceData+0x214>)
   1a006:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a008:	4b05      	ldr	r3, [pc, #20]	; (1a020 <prvTraceInitTraceData+0x1dc>)
   1a00a:	681b      	ldr	r3, [r3, #0]
   1a00c:	4a23      	ldr	r2, [pc, #140]	; (1a09c <prvTraceInitTraceData+0x258>)
   1a00e:	2101      	movs	r1, #1
   1a010:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a012:	4b23      	ldr	r3, [pc, #140]	; (1a0a0 <prvTraceInitTraceData+0x25c>)
   1a014:	4798      	blx	r3
   1a016:	e000      	b.n	1a01a <prvTraceInitTraceData+0x1d6>
			return;
   1a018:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a01a:	46bd      	mov	sp, r7
   1a01c:	bd80      	pop	{r7, pc}
   1a01e:	46c0      	nop			; (mov r8, r8)
   1a020:	20000dec 	.word	0x20000dec
   1a024:	20004a54 	.word	0x20004a54
   1a028:	e000e018 	.word	0xe000e018
   1a02c:	20005624 	.word	0x20005624
   1a030:	00036203 	.word	0x00036203
   1a034:	00001aa1 	.word	0x00001aa1
   1a038:	f0f0f0f0 	.word	0xf0f0f0f0
   1a03c:	00018fa9 	.word	0x00018fa9
   1a040:	0000055c 	.word	0x0000055c
   1a044:	f1f1f1f1 	.word	0xf1f1f1f1
   1a048:	00000564 	.word	0x00000564
   1a04c:	f2f2f2f2 	.word	0xf2f2f2f2
   1a050:	000006bc 	.word	0x000006bc
   1a054:	00039774 	.word	0x00039774
   1a058:	0001a3b9 	.word	0x0001a3b9
   1a05c:	0000070c 	.word	0x0000070c
   1a060:	f3f3f3f3 	.word	0xf3f3f3f3
   1a064:	00000bc4 	.word	0x00000bc4
   1a068:	00000bc5 	.word	0x00000bc5
   1a06c:	00000bc6 	.word	0x00000bc6
   1a070:	00000bc7 	.word	0x00000bc7
   1a074:	00000bc8 	.word	0x00000bc8
   1a078:	00000bc9 	.word	0x00000bc9
   1a07c:	00000bca 	.word	0x00000bca
   1a080:	00000bcb 	.word	0x00000bcb
   1a084:	00000bcc 	.word	0x00000bcc
   1a088:	00000bcd 	.word	0x00000bcd
   1a08c:	00000bce 	.word	0x00000bce
   1a090:	00000bcf 	.word	0x00000bcf
   1a094:	00019149 	.word	0x00019149
   1a098:	20000d4c 	.word	0x20000d4c
   1a09c:	000006b4 	.word	0x000006b4
   1a0a0:	000193b1 	.word	0x000193b1

0001a0a4 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a0a4:	b580      	push	{r7, lr}
   1a0a6:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a0a8:	4b10      	ldr	r3, [pc, #64]	; (1a0ec <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0aa:	681b      	ldr	r3, [r3, #0]
   1a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a0ae:	2b00      	cmp	r3, #0
   1a0b0:	d101      	bne.n	1a0b6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a0b2:	2300      	movs	r3, #0
   1a0b4:	e017      	b.n	1a0e6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a0b6:	4b0d      	ldr	r3, [pc, #52]	; (1a0ec <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0b8:	681b      	ldr	r3, [r3, #0]
   1a0ba:	69da      	ldr	r2, [r3, #28]
   1a0bc:	232c      	movs	r3, #44	; 0x2c
   1a0be:	33ff      	adds	r3, #255	; 0xff
   1a0c0:	429a      	cmp	r2, r3
   1a0c2:	d905      	bls.n	1a0d0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a0c4:	4b0a      	ldr	r3, [pc, #40]	; (1a0f0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a0c6:	0018      	movs	r0, r3
   1a0c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0f4 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a0ca:	4798      	blx	r3
		return NULL;
   1a0cc:	2300      	movs	r3, #0
   1a0ce:	e00a      	b.n	1a0e6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a0d0:	4b06      	ldr	r3, [pc, #24]	; (1a0ec <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0d2:	681a      	ldr	r2, [r3, #0]
   1a0d4:	4b05      	ldr	r3, [pc, #20]	; (1a0ec <prvTraceNextFreeEventBufferSlot+0x48>)
   1a0d6:	681b      	ldr	r3, [r3, #0]
   1a0d8:	69db      	ldr	r3, [r3, #28]
   1a0da:	009b      	lsls	r3, r3, #2
   1a0dc:	21e2      	movs	r1, #226	; 0xe2
   1a0de:	00c9      	lsls	r1, r1, #3
   1a0e0:	468c      	mov	ip, r1
   1a0e2:	4463      	add	r3, ip
   1a0e4:	18d3      	adds	r3, r2, r3
}
   1a0e6:	0018      	movs	r0, r3
   1a0e8:	46bd      	mov	sp, r7
   1a0ea:	bd80      	pop	{r7, pc}
   1a0ec:	20000dec 	.word	0x20000dec
   1a0f0:	00039788 	.word	0x00039788
   1a0f4:	0001a4ed 	.word	0x0001a4ed

0001a0f8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a0f8:	b580      	push	{r7, lr}
   1a0fa:	b082      	sub	sp, #8
   1a0fc:	af00      	add	r7, sp, #0
   1a0fe:	0002      	movs	r2, r0
   1a100:	1dfb      	adds	r3, r7, #7
   1a102:	701a      	strb	r2, [r3, #0]
   1a104:	1dbb      	adds	r3, r7, #6
   1a106:	1c0a      	adds	r2, r1, #0
   1a108:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a10a:	1dbb      	adds	r3, r7, #6
   1a10c:	781b      	ldrb	r3, [r3, #0]
   1a10e:	2b08      	cmp	r3, #8
   1a110:	d905      	bls.n	1a11e <uiIndexOfObject+0x26>
   1a112:	4b2a      	ldr	r3, [pc, #168]	; (1a1bc <uiIndexOfObject+0xc4>)
   1a114:	0018      	movs	r0, r3
   1a116:	4b2a      	ldr	r3, [pc, #168]	; (1a1c0 <uiIndexOfObject+0xc8>)
   1a118:	4798      	blx	r3
   1a11a:	2300      	movs	r3, #0
   1a11c:	e049      	b.n	1a1b2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a11e:	1dfb      	adds	r3, r7, #7
   1a120:	781b      	ldrb	r3, [r3, #0]
   1a122:	2b00      	cmp	r3, #0
   1a124:	d00b      	beq.n	1a13e <uiIndexOfObject+0x46>
   1a126:	4b27      	ldr	r3, [pc, #156]	; (1a1c4 <uiIndexOfObject+0xcc>)
   1a128:	681a      	ldr	r2, [r3, #0]
   1a12a:	1dbb      	adds	r3, r7, #6
   1a12c:	781b      	ldrb	r3, [r3, #0]
   1a12e:	2164      	movs	r1, #100	; 0x64
   1a130:	18d3      	adds	r3, r2, r3
   1a132:	185b      	adds	r3, r3, r1
   1a134:	781b      	ldrb	r3, [r3, #0]
   1a136:	1dfa      	adds	r2, r7, #7
   1a138:	7812      	ldrb	r2, [r2, #0]
   1a13a:	429a      	cmp	r2, r3
   1a13c:	d905      	bls.n	1a14a <uiIndexOfObject+0x52>
   1a13e:	4b22      	ldr	r3, [pc, #136]	; (1a1c8 <uiIndexOfObject+0xd0>)
   1a140:	0018      	movs	r0, r3
   1a142:	4b1f      	ldr	r3, [pc, #124]	; (1a1c0 <uiIndexOfObject+0xc8>)
   1a144:	4798      	blx	r3
   1a146:	2300      	movs	r3, #0
   1a148:	e033      	b.n	1a1b2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a14a:	1dbb      	adds	r3, r7, #6
   1a14c:	781b      	ldrb	r3, [r3, #0]
   1a14e:	2b08      	cmp	r3, #8
   1a150:	d82a      	bhi.n	1a1a8 <uiIndexOfObject+0xb0>
   1a152:	1dfb      	adds	r3, r7, #7
   1a154:	781b      	ldrb	r3, [r3, #0]
   1a156:	2b00      	cmp	r3, #0
   1a158:	d026      	beq.n	1a1a8 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a15a:	4b1a      	ldr	r3, [pc, #104]	; (1a1c4 <uiIndexOfObject+0xcc>)
   1a15c:	681a      	ldr	r2, [r3, #0]
   1a15e:	1dbb      	adds	r3, r7, #6
   1a160:	781b      	ldrb	r3, [r3, #0]
   1a162:	2164      	movs	r1, #100	; 0x64
   1a164:	18d3      	adds	r3, r2, r3
   1a166:	185b      	adds	r3, r3, r1
   1a168:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a16a:	1dfa      	adds	r2, r7, #7
   1a16c:	7812      	ldrb	r2, [r2, #0]
   1a16e:	429a      	cmp	r2, r3
   1a170:	d81a      	bhi.n	1a1a8 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a172:	4b14      	ldr	r3, [pc, #80]	; (1a1c4 <uiIndexOfObject+0xcc>)
   1a174:	681a      	ldr	r2, [r3, #0]
   1a176:	1dbb      	adds	r3, r7, #6
   1a178:	781b      	ldrb	r3, [r3, #0]
   1a17a:	3340      	adds	r3, #64	; 0x40
   1a17c:	005b      	lsls	r3, r3, #1
   1a17e:	18d3      	adds	r3, r2, r3
   1a180:	3308      	adds	r3, #8
   1a182:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a184:	4b0f      	ldr	r3, [pc, #60]	; (1a1c4 <uiIndexOfObject+0xcc>)
   1a186:	6819      	ldr	r1, [r3, #0]
   1a188:	1dbb      	adds	r3, r7, #6
   1a18a:	781b      	ldrb	r3, [r3, #0]
   1a18c:	207c      	movs	r0, #124	; 0x7c
   1a18e:	18cb      	adds	r3, r1, r3
   1a190:	181b      	adds	r3, r3, r0
   1a192:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a194:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a196:	1df9      	adds	r1, r7, #7
   1a198:	7809      	ldrb	r1, [r1, #0]
   1a19a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a19c:	b289      	uxth	r1, r1
   1a19e:	434b      	muls	r3, r1
   1a1a0:	b29b      	uxth	r3, r3
   1a1a2:	18d3      	adds	r3, r2, r3
   1a1a4:	b29b      	uxth	r3, r3
   1a1a6:	e004      	b.n	1a1b2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a1a8:	4b08      	ldr	r3, [pc, #32]	; (1a1cc <uiIndexOfObject+0xd4>)
   1a1aa:	0018      	movs	r0, r3
   1a1ac:	4b04      	ldr	r3, [pc, #16]	; (1a1c0 <uiIndexOfObject+0xc8>)
   1a1ae:	4798      	blx	r3
	return 0;
   1a1b0:	2300      	movs	r3, #0
}
   1a1b2:	0018      	movs	r0, r3
   1a1b4:	46bd      	mov	sp, r7
   1a1b6:	b002      	add	sp, #8
   1a1b8:	bd80      	pop	{r7, pc}
   1a1ba:	46c0      	nop			; (mov r8, r8)
   1a1bc:	000397b0 	.word	0x000397b0
   1a1c0:	0001a4ed 	.word	0x0001a4ed
   1a1c4:	20000dec 	.word	0x20000dec
   1a1c8:	000397f0 	.word	0x000397f0
   1a1cc:	00039830 	.word	0x00039830

0001a1d0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b088      	sub	sp, #32
   1a1d4:	af00      	add	r7, sp, #0
   1a1d6:	0002      	movs	r2, r0
   1a1d8:	1dfb      	adds	r3, r7, #7
   1a1da:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a1dc:	4b5a      	ldr	r3, [pc, #360]	; (1a348 <prvTraceGetObjectHandle+0x178>)
   1a1de:	681b      	ldr	r3, [r3, #0]
   1a1e0:	2b00      	cmp	r3, #0
   1a1e2:	d105      	bne.n	1a1f0 <prvTraceGetObjectHandle+0x20>
   1a1e4:	4b59      	ldr	r3, [pc, #356]	; (1a34c <prvTraceGetObjectHandle+0x17c>)
   1a1e6:	0018      	movs	r0, r3
   1a1e8:	4b59      	ldr	r3, [pc, #356]	; (1a350 <prvTraceGetObjectHandle+0x180>)
   1a1ea:	4798      	blx	r3
   1a1ec:	2300      	movs	r3, #0
   1a1ee:	e0a7      	b.n	1a340 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a1f0:	1dfb      	adds	r3, r7, #7
   1a1f2:	781b      	ldrb	r3, [r3, #0]
   1a1f4:	2b08      	cmp	r3, #8
   1a1f6:	d905      	bls.n	1a204 <prvTraceGetObjectHandle+0x34>
   1a1f8:	4b56      	ldr	r3, [pc, #344]	; (1a354 <prvTraceGetObjectHandle+0x184>)
   1a1fa:	0018      	movs	r0, r3
   1a1fc:	4b54      	ldr	r3, [pc, #336]	; (1a350 <prvTraceGetObjectHandle+0x180>)
   1a1fe:	4798      	blx	r3
   1a200:	2300      	movs	r3, #0
   1a202:	e09d      	b.n	1a340 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a204:	f3ef 8310 	mrs	r3, PRIMASK
   1a208:	60fb      	str	r3, [r7, #12]
  return(result);
   1a20a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a20c:	61bb      	str	r3, [r7, #24]
   1a20e:	2301      	movs	r3, #1
   1a210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a212:	693b      	ldr	r3, [r7, #16]
   1a214:	f383 8810 	msr	PRIMASK, r3
   1a218:	4b4f      	ldr	r3, [pc, #316]	; (1a358 <prvTraceGetObjectHandle+0x188>)
   1a21a:	681b      	ldr	r3, [r3, #0]
   1a21c:	1c5a      	adds	r2, r3, #1
   1a21e:	4b4e      	ldr	r3, [pc, #312]	; (1a358 <prvTraceGetObjectHandle+0x188>)
   1a220:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a222:	1dfb      	adds	r3, r7, #7
   1a224:	781a      	ldrb	r2, [r3, #0]
   1a226:	4b4d      	ldr	r3, [pc, #308]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a228:	0052      	lsls	r2, r2, #1
   1a22a:	5ad3      	ldrh	r3, [r2, r3]
   1a22c:	001a      	movs	r2, r3
   1a22e:	4b4c      	ldr	r3, [pc, #304]	; (1a360 <prvTraceGetObjectHandle+0x190>)
   1a230:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a232:	4b4b      	ldr	r3, [pc, #300]	; (1a360 <prvTraceGetObjectHandle+0x190>)
   1a234:	681b      	ldr	r3, [r3, #0]
   1a236:	4a49      	ldr	r2, [pc, #292]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a238:	2148      	movs	r1, #72	; 0x48
   1a23a:	18d3      	adds	r3, r2, r3
   1a23c:	185b      	adds	r3, r3, r1
   1a23e:	781b      	ldrb	r3, [r3, #0]
   1a240:	2b00      	cmp	r3, #0
   1a242:	d117      	bne.n	1a274 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a244:	4b46      	ldr	r3, [pc, #280]	; (1a360 <prvTraceGetObjectHandle+0x190>)
   1a246:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a248:	4b45      	ldr	r3, [pc, #276]	; (1a360 <prvTraceGetObjectHandle+0x190>)
   1a24a:	681b      	ldr	r3, [r3, #0]
   1a24c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a24e:	1dfb      	adds	r3, r7, #7
   1a250:	781b      	ldrb	r3, [r3, #0]
   1a252:	4842      	ldr	r0, [pc, #264]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a254:	3308      	adds	r3, #8
   1a256:	005b      	lsls	r3, r3, #1
   1a258:	18c3      	adds	r3, r0, r3
   1a25a:	3302      	adds	r3, #2
   1a25c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a25e:	b2db      	uxtb	r3, r3
   1a260:	1acb      	subs	r3, r1, r3
   1a262:	b2db      	uxtb	r3, r3
   1a264:	3301      	adds	r3, #1
   1a266:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a268:	4b3c      	ldr	r3, [pc, #240]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a26a:	2148      	movs	r1, #72	; 0x48
   1a26c:	189b      	adds	r3, r3, r2
   1a26e:	185b      	adds	r3, r3, r1
   1a270:	1c02      	adds	r2, r0, #0
   1a272:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a274:	4b3a      	ldr	r3, [pc, #232]	; (1a360 <prvTraceGetObjectHandle+0x190>)
   1a276:	681a      	ldr	r2, [r3, #0]
   1a278:	231f      	movs	r3, #31
   1a27a:	18fb      	adds	r3, r7, r3
   1a27c:	4937      	ldr	r1, [pc, #220]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a27e:	2048      	movs	r0, #72	; 0x48
   1a280:	188a      	adds	r2, r1, r2
   1a282:	1812      	adds	r2, r2, r0
   1a284:	7812      	ldrb	r2, [r2, #0]
   1a286:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a288:	1dfb      	adds	r3, r7, #7
   1a28a:	781a      	ldrb	r2, [r3, #0]
   1a28c:	4b33      	ldr	r3, [pc, #204]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a28e:	0052      	lsls	r2, r2, #1
   1a290:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a292:	1dfb      	adds	r3, r7, #7
   1a294:	781b      	ldrb	r3, [r3, #0]
   1a296:	4931      	ldr	r1, [pc, #196]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a298:	3310      	adds	r3, #16
   1a29a:	005b      	lsls	r3, r3, #1
   1a29c:	18cb      	adds	r3, r1, r3
   1a29e:	3304      	adds	r3, #4
   1a2a0:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a2a2:	429a      	cmp	r2, r3
   1a2a4:	d90d      	bls.n	1a2c2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a2a6:	1dfb      	adds	r3, r7, #7
   1a2a8:	781b      	ldrb	r3, [r3, #0]
   1a2aa:	0018      	movs	r0, r3
   1a2ac:	4b2d      	ldr	r3, [pc, #180]	; (1a364 <prvTraceGetObjectHandle+0x194>)
   1a2ae:	4798      	blx	r3
   1a2b0:	0003      	movs	r3, r0
   1a2b2:	0018      	movs	r0, r3
   1a2b4:	4b26      	ldr	r3, [pc, #152]	; (1a350 <prvTraceGetObjectHandle+0x180>)
   1a2b6:	4798      	blx	r3
		handle = 0;
   1a2b8:	231f      	movs	r3, #31
   1a2ba:	18fb      	adds	r3, r7, r3
   1a2bc:	2200      	movs	r2, #0
   1a2be:	701a      	strb	r2, [r3, #0]
   1a2c0:	e031      	b.n	1a326 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a2c2:	1dfb      	adds	r3, r7, #7
   1a2c4:	781b      	ldrb	r3, [r3, #0]
   1a2c6:	4a25      	ldr	r2, [pc, #148]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a2c8:	0059      	lsls	r1, r3, #1
   1a2ca:	5a8a      	ldrh	r2, [r1, r2]
   1a2cc:	3201      	adds	r2, #1
   1a2ce:	b291      	uxth	r1, r2
   1a2d0:	4a22      	ldr	r2, [pc, #136]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a2d2:	005b      	lsls	r3, r3, #1
   1a2d4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a2d6:	1dfb      	adds	r3, r7, #7
   1a2d8:	781a      	ldrb	r2, [r3, #0]
   1a2da:	4b20      	ldr	r3, [pc, #128]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a2dc:	0052      	lsls	r2, r2, #1
   1a2de:	5ad3      	ldrh	r3, [r2, r3]
   1a2e0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a2e2:	1dfb      	adds	r3, r7, #7
   1a2e4:	781b      	ldrb	r3, [r3, #0]
   1a2e6:	4a1d      	ldr	r2, [pc, #116]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a2e8:	3308      	adds	r3, #8
   1a2ea:	005b      	lsls	r3, r3, #1
   1a2ec:	18d3      	adds	r3, r2, r3
   1a2ee:	3302      	adds	r3, #2
   1a2f0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a2f2:	1acb      	subs	r3, r1, r3
   1a2f4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a2f6:	1dfb      	adds	r3, r7, #7
   1a2f8:	781b      	ldrb	r3, [r3, #0]
   1a2fa:	4a18      	ldr	r2, [pc, #96]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a2fc:	3318      	adds	r3, #24
   1a2fe:	005b      	lsls	r3, r3, #1
   1a300:	18d3      	adds	r3, r2, r3
   1a302:	3306      	adds	r3, #6
   1a304:	881b      	ldrh	r3, [r3, #0]
   1a306:	001a      	movs	r2, r3
		if (hndCount >
   1a308:	697b      	ldr	r3, [r7, #20]
   1a30a:	429a      	cmp	r2, r3
   1a30c:	da0b      	bge.n	1a326 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a30e:	1dfb      	adds	r3, r7, #7
   1a310:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a312:	697a      	ldr	r2, [r7, #20]
   1a314:	b2d2      	uxtb	r2, r2
   1a316:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a318:	4a10      	ldr	r2, [pc, #64]	; (1a35c <prvTraceGetObjectHandle+0x18c>)
   1a31a:	3318      	adds	r3, #24
   1a31c:	005b      	lsls	r3, r3, #1
   1a31e:	18d3      	adds	r3, r2, r3
   1a320:	3306      	adds	r3, #6
   1a322:	1c0a      	adds	r2, r1, #0
   1a324:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a326:	4b0c      	ldr	r3, [pc, #48]	; (1a358 <prvTraceGetObjectHandle+0x188>)
   1a328:	681b      	ldr	r3, [r3, #0]
   1a32a:	1e5a      	subs	r2, r3, #1
   1a32c:	4b0a      	ldr	r3, [pc, #40]	; (1a358 <prvTraceGetObjectHandle+0x188>)
   1a32e:	601a      	str	r2, [r3, #0]
   1a330:	69bb      	ldr	r3, [r7, #24]
   1a332:	60bb      	str	r3, [r7, #8]
   1a334:	68bb      	ldr	r3, [r7, #8]
   1a336:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a33a:	231f      	movs	r3, #31
   1a33c:	18fb      	adds	r3, r7, r3
   1a33e:	781b      	ldrb	r3, [r3, #0]
}
   1a340:	0018      	movs	r0, r3
   1a342:	46bd      	mov	sp, r7
   1a344:	b008      	add	sp, #32
   1a346:	bd80      	pop	{r7, pc}
   1a348:	20000dec 	.word	0x20000dec
   1a34c:	00038c90 	.word	0x00038c90
   1a350:	0001a4ed 	.word	0x0001a4ed
   1a354:	00039870 	.word	0x00039870
   1a358:	20000d44 	.word	0x20000d44
   1a35c:	20000d5c 	.word	0x20000d5c
   1a360:	20000df0 	.word	0x20000df0
   1a364:	0001920d 	.word	0x0001920d

0001a368 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a368:	b590      	push	{r4, r7, lr}
   1a36a:	b085      	sub	sp, #20
   1a36c:	af00      	add	r7, sp, #0
   1a36e:	0002      	movs	r2, r0
   1a370:	1dfb      	adds	r3, r7, #7
   1a372:	701a      	strb	r2, [r3, #0]
   1a374:	1dbb      	adds	r3, r7, #6
   1a376:	1c0a      	adds	r2, r1, #0
   1a378:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a37a:	230e      	movs	r3, #14
   1a37c:	18fc      	adds	r4, r7, r3
   1a37e:	1dfb      	adds	r3, r7, #7
   1a380:	781a      	ldrb	r2, [r3, #0]
   1a382:	1dbb      	adds	r3, r7, #6
   1a384:	781b      	ldrb	r3, [r3, #0]
   1a386:	0011      	movs	r1, r2
   1a388:	0018      	movs	r0, r3
   1a38a:	4b09      	ldr	r3, [pc, #36]	; (1a3b0 <prvMarkObjectAsUsed+0x48>)
   1a38c:	4798      	blx	r3
   1a38e:	0003      	movs	r3, r0
   1a390:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a392:	4b08      	ldr	r3, [pc, #32]	; (1a3b4 <prvMarkObjectAsUsed+0x4c>)
   1a394:	681a      	ldr	r2, [r3, #0]
   1a396:	230e      	movs	r3, #14
   1a398:	18fb      	adds	r3, r7, r3
   1a39a:	881b      	ldrh	r3, [r3, #0]
   1a39c:	219c      	movs	r1, #156	; 0x9c
   1a39e:	18d3      	adds	r3, r2, r3
   1a3a0:	185b      	adds	r3, r3, r1
   1a3a2:	2201      	movs	r2, #1
   1a3a4:	701a      	strb	r2, [r3, #0]
}
   1a3a6:	46c0      	nop			; (mov r8, r8)
   1a3a8:	46bd      	mov	sp, r7
   1a3aa:	b005      	add	sp, #20
   1a3ac:	bd90      	pop	{r4, r7, pc}
   1a3ae:	46c0      	nop			; (mov r8, r8)
   1a3b0:	0001a0f9 	.word	0x0001a0f9
   1a3b4:	20000dec 	.word	0x20000dec

0001a3b8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a3b8:	b580      	push	{r7, lr}
   1a3ba:	b086      	sub	sp, #24
   1a3bc:	af00      	add	r7, sp, #0
   1a3be:	60f8      	str	r0, [r7, #12]
   1a3c0:	60b9      	str	r1, [r7, #8]
   1a3c2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a3c4:	2300      	movs	r3, #0
   1a3c6:	617b      	str	r3, [r7, #20]
   1a3c8:	e010      	b.n	1a3ec <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a3ca:	68fa      	ldr	r2, [r7, #12]
   1a3cc:	697b      	ldr	r3, [r7, #20]
   1a3ce:	18d3      	adds	r3, r2, r3
   1a3d0:	68b9      	ldr	r1, [r7, #8]
   1a3d2:	697a      	ldr	r2, [r7, #20]
   1a3d4:	188a      	adds	r2, r1, r2
   1a3d6:	7812      	ldrb	r2, [r2, #0]
   1a3d8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a3da:	68ba      	ldr	r2, [r7, #8]
   1a3dc:	697b      	ldr	r3, [r7, #20]
   1a3de:	18d3      	adds	r3, r2, r3
   1a3e0:	781b      	ldrb	r3, [r3, #0]
   1a3e2:	2b00      	cmp	r3, #0
   1a3e4:	d007      	beq.n	1a3f6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a3e6:	697b      	ldr	r3, [r7, #20]
   1a3e8:	3301      	adds	r3, #1
   1a3ea:	617b      	str	r3, [r7, #20]
   1a3ec:	697a      	ldr	r2, [r7, #20]
   1a3ee:	687b      	ldr	r3, [r7, #4]
   1a3f0:	429a      	cmp	r2, r3
   1a3f2:	d3ea      	bcc.n	1a3ca <prvStrncpy+0x12>
			break;
	}
}
   1a3f4:	e000      	b.n	1a3f8 <prvStrncpy+0x40>
			break;
   1a3f6:	46c0      	nop			; (mov r8, r8)
}
   1a3f8:	46c0      	nop			; (mov r8, r8)
   1a3fa:	46bd      	mov	sp, r7
   1a3fc:	b006      	add	sp, #24
   1a3fe:	bd80      	pop	{r7, pc}

0001a400 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a400:	b580      	push	{r7, lr}
   1a402:	b082      	sub	sp, #8
   1a404:	af00      	add	r7, sp, #0
   1a406:	603a      	str	r2, [r7, #0]
   1a408:	1dfb      	adds	r3, r7, #7
   1a40a:	1c02      	adds	r2, r0, #0
   1a40c:	701a      	strb	r2, [r3, #0]
   1a40e:	1dbb      	adds	r3, r7, #6
   1a410:	1c0a      	adds	r2, r1, #0
   1a412:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a414:	683b      	ldr	r3, [r7, #0]
   1a416:	2b00      	cmp	r3, #0
   1a418:	d104      	bne.n	1a424 <prvTraceSetObjectName+0x24>
   1a41a:	4b2a      	ldr	r3, [pc, #168]	; (1a4c4 <prvTraceSetObjectName+0xc4>)
   1a41c:	0018      	movs	r0, r3
   1a41e:	4b2a      	ldr	r3, [pc, #168]	; (1a4c8 <prvTraceSetObjectName+0xc8>)
   1a420:	4798      	blx	r3
   1a422:	e04b      	b.n	1a4bc <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a424:	1dfb      	adds	r3, r7, #7
   1a426:	781b      	ldrb	r3, [r3, #0]
   1a428:	2b08      	cmp	r3, #8
   1a42a:	d904      	bls.n	1a436 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a42c:	4b27      	ldr	r3, [pc, #156]	; (1a4cc <prvTraceSetObjectName+0xcc>)
   1a42e:	0018      	movs	r0, r3
   1a430:	4b25      	ldr	r3, [pc, #148]	; (1a4c8 <prvTraceSetObjectName+0xc8>)
   1a432:	4798      	blx	r3
		return;
   1a434:	e042      	b.n	1a4bc <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a436:	1dbb      	adds	r3, r7, #6
   1a438:	781b      	ldrb	r3, [r3, #0]
   1a43a:	2b00      	cmp	r3, #0
   1a43c:	d104      	bne.n	1a448 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a43e:	4b24      	ldr	r3, [pc, #144]	; (1a4d0 <prvTraceSetObjectName+0xd0>)
   1a440:	0018      	movs	r0, r3
   1a442:	4b21      	ldr	r3, [pc, #132]	; (1a4c8 <prvTraceSetObjectName+0xc8>)
   1a444:	4798      	blx	r3
		return;
   1a446:	e039      	b.n	1a4bc <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a448:	4b22      	ldr	r3, [pc, #136]	; (1a4d4 <prvTraceSetObjectName+0xd4>)
   1a44a:	681a      	ldr	r2, [r3, #0]
   1a44c:	1dfb      	adds	r3, r7, #7
   1a44e:	781b      	ldrb	r3, [r3, #0]
   1a450:	2164      	movs	r1, #100	; 0x64
   1a452:	18d3      	adds	r3, r2, r3
   1a454:	185b      	adds	r3, r3, r1
   1a456:	781b      	ldrb	r3, [r3, #0]
   1a458:	1dba      	adds	r2, r7, #6
   1a45a:	7812      	ldrb	r2, [r2, #0]
   1a45c:	429a      	cmp	r2, r3
   1a45e:	d909      	bls.n	1a474 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a460:	1dfb      	adds	r3, r7, #7
   1a462:	781b      	ldrb	r3, [r3, #0]
   1a464:	0018      	movs	r0, r3
   1a466:	4b1c      	ldr	r3, [pc, #112]	; (1a4d8 <prvTraceSetObjectName+0xd8>)
   1a468:	4798      	blx	r3
   1a46a:	0003      	movs	r3, r0
   1a46c:	0018      	movs	r0, r3
   1a46e:	4b16      	ldr	r3, [pc, #88]	; (1a4c8 <prvTraceSetObjectName+0xc8>)
   1a470:	4798      	blx	r3
   1a472:	e023      	b.n	1a4bc <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a474:	1dfb      	adds	r3, r7, #7
   1a476:	781a      	ldrb	r2, [r3, #0]
   1a478:	1dbb      	adds	r3, r7, #6
   1a47a:	781b      	ldrb	r3, [r3, #0]
   1a47c:	0011      	movs	r1, r2
   1a47e:	0018      	movs	r0, r3
   1a480:	4b16      	ldr	r3, [pc, #88]	; (1a4dc <prvTraceSetObjectName+0xdc>)
   1a482:	4798      	blx	r3
   1a484:	0003      	movs	r3, r0
   1a486:	001a      	movs	r2, r3
   1a488:	4b15      	ldr	r3, [pc, #84]	; (1a4e0 <prvTraceSetObjectName+0xe0>)
   1a48a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a48c:	4b15      	ldr	r3, [pc, #84]	; (1a4e4 <prvTraceSetObjectName+0xe4>)
   1a48e:	681b      	ldr	r3, [r3, #0]
   1a490:	2b00      	cmp	r3, #0
   1a492:	d113      	bne.n	1a4bc <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a494:	4b0f      	ldr	r3, [pc, #60]	; (1a4d4 <prvTraceSetObjectName+0xd4>)
   1a496:	681a      	ldr	r2, [r3, #0]
   1a498:	4b11      	ldr	r3, [pc, #68]	; (1a4e0 <prvTraceSetObjectName+0xe0>)
   1a49a:	881b      	ldrh	r3, [r3, #0]
   1a49c:	3398      	adds	r3, #152	; 0x98
   1a49e:	18d3      	adds	r3, r2, r3
   1a4a0:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a4a2:	4b0c      	ldr	r3, [pc, #48]	; (1a4d4 <prvTraceSetObjectName+0xd4>)
   1a4a4:	681a      	ldr	r2, [r3, #0]
   1a4a6:	1dfb      	adds	r3, r7, #7
   1a4a8:	781b      	ldrb	r3, [r3, #0]
   1a4aa:	2170      	movs	r1, #112	; 0x70
   1a4ac:	18d3      	adds	r3, r2, r3
   1a4ae:	185b      	adds	r3, r3, r1
   1a4b0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a4b2:	001a      	movs	r2, r3
   1a4b4:	683b      	ldr	r3, [r7, #0]
   1a4b6:	0019      	movs	r1, r3
   1a4b8:	4b0b      	ldr	r3, [pc, #44]	; (1a4e8 <prvTraceSetObjectName+0xe8>)
   1a4ba:	4798      	blx	r3
		}
	}
}
   1a4bc:	46bd      	mov	sp, r7
   1a4be:	b002      	add	sp, #8
   1a4c0:	bd80      	pop	{r7, pc}
   1a4c2:	46c0      	nop			; (mov r8, r8)
   1a4c4:	00039974 	.word	0x00039974
   1a4c8:	0001a4ed 	.word	0x0001a4ed
   1a4cc:	000399a8 	.word	0x000399a8
   1a4d0:	000399d8 	.word	0x000399d8
   1a4d4:	20000dec 	.word	0x20000dec
   1a4d8:	0001920d 	.word	0x0001920d
   1a4dc:	0001a0f9 	.word	0x0001a0f9
   1a4e0:	20000df4 	.word	0x20000df4
   1a4e4:	20000d4c 	.word	0x20000d4c
   1a4e8:	0001a3b9 	.word	0x0001a3b9

0001a4ec <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a4ec:	b580      	push	{r7, lr}
   1a4ee:	b082      	sub	sp, #8
   1a4f0:	af00      	add	r7, sp, #0
   1a4f2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a4f4:	4b11      	ldr	r3, [pc, #68]	; (1a53c <prvTraceError+0x50>)
   1a4f6:	681b      	ldr	r3, [r3, #0]
   1a4f8:	2b00      	cmp	r3, #0
   1a4fa:	d001      	beq.n	1a500 <prvTraceError+0x14>
	{
		vTraceStop();
   1a4fc:	4b10      	ldr	r3, [pc, #64]	; (1a540 <prvTraceError+0x54>)
   1a4fe:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a500:	4b10      	ldr	r3, [pc, #64]	; (1a544 <prvTraceError+0x58>)
   1a502:	681b      	ldr	r3, [r3, #0]
   1a504:	2b00      	cmp	r3, #0
   1a506:	d115      	bne.n	1a534 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a508:	4b0e      	ldr	r3, [pc, #56]	; (1a544 <prvTraceError+0x58>)
   1a50a:	687a      	ldr	r2, [r7, #4]
   1a50c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a50e:	4b0b      	ldr	r3, [pc, #44]	; (1a53c <prvTraceError+0x50>)
   1a510:	681b      	ldr	r3, [r3, #0]
   1a512:	2b00      	cmp	r3, #0
   1a514:	d00e      	beq.n	1a534 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a516:	4b09      	ldr	r3, [pc, #36]	; (1a53c <prvTraceError+0x50>)
   1a518:	681b      	ldr	r3, [r3, #0]
   1a51a:	4a0b      	ldr	r2, [pc, #44]	; (1a548 <prvTraceError+0x5c>)
   1a51c:	1898      	adds	r0, r3, r2
   1a51e:	4b09      	ldr	r3, [pc, #36]	; (1a544 <prvTraceError+0x58>)
   1a520:	681b      	ldr	r3, [r3, #0]
   1a522:	2250      	movs	r2, #80	; 0x50
   1a524:	0019      	movs	r1, r3
   1a526:	4b09      	ldr	r3, [pc, #36]	; (1a54c <prvTraceError+0x60>)
   1a528:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a52a:	4b04      	ldr	r3, [pc, #16]	; (1a53c <prvTraceError+0x50>)
   1a52c:	681b      	ldr	r3, [r3, #0]
   1a52e:	4a08      	ldr	r2, [pc, #32]	; (1a550 <prvTraceError+0x64>)
   1a530:	2101      	movs	r1, #1
   1a532:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a534:	46c0      	nop			; (mov r8, r8)
   1a536:	46bd      	mov	sp, r7
   1a538:	b002      	add	sp, #8
   1a53a:	bd80      	pop	{r7, pc}
   1a53c:	20000dec 	.word	0x20000dec
   1a540:	000193b1 	.word	0x000193b1
   1a544:	20000d4c 	.word	0x20000d4c
   1a548:	000006bc 	.word	0x000006bc
   1a54c:	0001a3b9 	.word	0x0001a3b9
   1a550:	000006b4 	.word	0x000006b4

0001a554 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a554:	b580      	push	{r7, lr}
   1a556:	b086      	sub	sp, #24
   1a558:	af00      	add	r7, sp, #0
   1a55a:	0002      	movs	r2, r0
   1a55c:	1dfb      	adds	r3, r7, #7
   1a55e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a560:	2300      	movs	r3, #0
   1a562:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a564:	2300      	movs	r3, #0
   1a566:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a568:	1dfb      	adds	r3, r7, #7
   1a56a:	781b      	ldrb	r3, [r3, #0]
   1a56c:	2b00      	cmp	r3, #0
   1a56e:	d000      	beq.n	1a572 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a570:	e089      	b.n	1a686 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a572:	4b49      	ldr	r3, [pc, #292]	; (1a698 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a574:	0018      	movs	r0, r3
   1a576:	4b49      	ldr	r3, [pc, #292]	; (1a69c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a578:	4798      	blx	r3
   1a57a:	e08a      	b.n	1a692 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a57c:	4b48      	ldr	r3, [pc, #288]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a57e:	681b      	ldr	r3, [r3, #0]
   1a580:	69da      	ldr	r2, [r3, #28]
   1a582:	697b      	ldr	r3, [r7, #20]
   1a584:	18d3      	adds	r3, r2, r3
   1a586:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a588:	4b45      	ldr	r3, [pc, #276]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a58a:	6819      	ldr	r1, [r3, #0]
   1a58c:	693b      	ldr	r3, [r7, #16]
   1a58e:	009a      	lsls	r2, r3, #2
   1a590:	23e2      	movs	r3, #226	; 0xe2
   1a592:	00db      	lsls	r3, r3, #3
   1a594:	188a      	adds	r2, r1, r2
   1a596:	18d3      	adds	r3, r2, r3
   1a598:	781b      	ldrb	r3, [r3, #0]
   1a59a:	2b98      	cmp	r3, #152	; 0x98
   1a59c:	d934      	bls.n	1a608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a59e:	4b40      	ldr	r3, [pc, #256]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5a0:	6819      	ldr	r1, [r3, #0]
   1a5a2:	693b      	ldr	r3, [r7, #16]
   1a5a4:	009a      	lsls	r2, r3, #2
   1a5a6:	23e2      	movs	r3, #226	; 0xe2
   1a5a8:	00db      	lsls	r3, r3, #3
   1a5aa:	188a      	adds	r2, r1, r2
   1a5ac:	18d3      	adds	r3, r2, r3
   1a5ae:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a5b0:	2ba7      	cmp	r3, #167	; 0xa7
   1a5b2:	d829      	bhi.n	1a608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a5b4:	4b3a      	ldr	r3, [pc, #232]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5b6:	6819      	ldr	r1, [r3, #0]
   1a5b8:	693b      	ldr	r3, [r7, #16]
   1a5ba:	009a      	lsls	r2, r3, #2
   1a5bc:	23e2      	movs	r3, #226	; 0xe2
   1a5be:	00db      	lsls	r3, r3, #3
   1a5c0:	188a      	adds	r2, r1, r2
   1a5c2:	18d3      	adds	r3, r2, r3
   1a5c4:	781a      	ldrb	r2, [r3, #0]
   1a5c6:	230f      	movs	r3, #15
   1a5c8:	18fb      	adds	r3, r7, r3
   1a5ca:	3268      	adds	r2, #104	; 0x68
   1a5cc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a5ce:	230f      	movs	r3, #15
   1a5d0:	18fb      	adds	r3, r7, r3
   1a5d2:	781a      	ldrb	r2, [r3, #0]
   1a5d4:	693b      	ldr	r3, [r7, #16]
   1a5d6:	18d2      	adds	r2, r2, r3
   1a5d8:	4b31      	ldr	r3, [pc, #196]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5da:	681b      	ldr	r3, [r3, #0]
   1a5dc:	699b      	ldr	r3, [r3, #24]
   1a5de:	429a      	cmp	r2, r3
   1a5e0:	d24d      	bcs.n	1a67e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a5e2:	4b2f      	ldr	r3, [pc, #188]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5e4:	681a      	ldr	r2, [r3, #0]
   1a5e6:	693b      	ldr	r3, [r7, #16]
   1a5e8:	009b      	lsls	r3, r3, #2
   1a5ea:	21e2      	movs	r1, #226	; 0xe2
   1a5ec:	00c9      	lsls	r1, r1, #3
   1a5ee:	468c      	mov	ip, r1
   1a5f0:	4463      	add	r3, ip
   1a5f2:	18d0      	adds	r0, r2, r3
   1a5f4:	230f      	movs	r3, #15
   1a5f6:	18fb      	adds	r3, r7, r3
   1a5f8:	781b      	ldrb	r3, [r3, #0]
   1a5fa:	3301      	adds	r3, #1
   1a5fc:	009b      	lsls	r3, r3, #2
   1a5fe:	001a      	movs	r2, r3
   1a600:	2100      	movs	r1, #0
   1a602:	4b28      	ldr	r3, [pc, #160]	; (1a6a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a604:	4798      	blx	r3
		{
   1a606:	e03a      	b.n	1a67e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a608:	4b25      	ldr	r3, [pc, #148]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a60a:	6819      	ldr	r1, [r3, #0]
   1a60c:	693b      	ldr	r3, [r7, #16]
   1a60e:	009a      	lsls	r2, r3, #2
   1a610:	23e2      	movs	r3, #226	; 0xe2
   1a612:	00db      	lsls	r3, r3, #3
   1a614:	188a      	adds	r2, r1, r2
   1a616:	18d3      	adds	r3, r2, r3
   1a618:	781b      	ldrb	r3, [r3, #0]
   1a61a:	2b01      	cmp	r3, #1
   1a61c:	d130      	bne.n	1a680 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a61e:	693b      	ldr	r3, [r7, #16]
   1a620:	1c5a      	adds	r2, r3, #1
   1a622:	4b1f      	ldr	r3, [pc, #124]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a624:	681b      	ldr	r3, [r3, #0]
   1a626:	699b      	ldr	r3, [r3, #24]
   1a628:	429a      	cmp	r2, r3
   1a62a:	d20e      	bcs.n	1a64a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a62c:	4b1c      	ldr	r3, [pc, #112]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a62e:	681a      	ldr	r2, [r3, #0]
   1a630:	693b      	ldr	r3, [r7, #16]
   1a632:	009b      	lsls	r3, r3, #2
   1a634:	21e2      	movs	r1, #226	; 0xe2
   1a636:	00c9      	lsls	r1, r1, #3
   1a638:	468c      	mov	ip, r1
   1a63a:	4463      	add	r3, ip
   1a63c:	18d3      	adds	r3, r2, r3
   1a63e:	2208      	movs	r2, #8
   1a640:	2100      	movs	r1, #0
   1a642:	0018      	movs	r0, r3
   1a644:	4b17      	ldr	r3, [pc, #92]	; (1a6a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a646:	4798      	blx	r3
   1a648:	e01a      	b.n	1a680 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a64a:	4b15      	ldr	r3, [pc, #84]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a64c:	681b      	ldr	r3, [r3, #0]
   1a64e:	22e2      	movs	r2, #226	; 0xe2
   1a650:	00d2      	lsls	r2, r2, #3
   1a652:	4694      	mov	ip, r2
   1a654:	4463      	add	r3, ip
   1a656:	2204      	movs	r2, #4
   1a658:	2100      	movs	r1, #0
   1a65a:	0018      	movs	r0, r3
   1a65c:	4b11      	ldr	r3, [pc, #68]	; (1a6a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a65e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a660:	4b0f      	ldr	r3, [pc, #60]	; (1a6a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a662:	681a      	ldr	r2, [r3, #0]
   1a664:	693b      	ldr	r3, [r7, #16]
   1a666:	009b      	lsls	r3, r3, #2
   1a668:	21e2      	movs	r1, #226	; 0xe2
   1a66a:	00c9      	lsls	r1, r1, #3
   1a66c:	468c      	mov	ip, r1
   1a66e:	4463      	add	r3, ip
   1a670:	18d3      	adds	r3, r2, r3
   1a672:	2204      	movs	r2, #4
   1a674:	2100      	movs	r1, #0
   1a676:	0018      	movs	r0, r3
   1a678:	4b0a      	ldr	r3, [pc, #40]	; (1a6a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a67a:	4798      	blx	r3
   1a67c:	e000      	b.n	1a680 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a67e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a680:	697b      	ldr	r3, [r7, #20]
   1a682:	3301      	adds	r3, #1
   1a684:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a686:	1dfb      	adds	r3, r7, #7
   1a688:	781a      	ldrb	r2, [r3, #0]
   1a68a:	697b      	ldr	r3, [r7, #20]
   1a68c:	429a      	cmp	r2, r3
   1a68e:	d900      	bls.n	1a692 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a690:	e774      	b.n	1a57c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a692:	46bd      	mov	sp, r7
   1a694:	b006      	add	sp, #24
   1a696:	bd80      	pop	{r7, pc}
   1a698:	00039a38 	.word	0x00039a38
   1a69c:	0001a4ed 	.word	0x0001a4ed
   1a6a0:	20000dec 	.word	0x20000dec
   1a6a4:	00036203 	.word	0x00036203

0001a6a8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a6a8:	b580      	push	{r7, lr}
   1a6aa:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a6ac:	4b12      	ldr	r3, [pc, #72]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6ae:	681b      	ldr	r3, [r3, #0]
   1a6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a6b2:	2b00      	cmp	r3, #0
   1a6b4:	d01c      	beq.n	1a6f0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a6b6:	4b10      	ldr	r3, [pc, #64]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6b8:	681b      	ldr	r3, [r3, #0]
   1a6ba:	695a      	ldr	r2, [r3, #20]
   1a6bc:	3201      	adds	r2, #1
   1a6be:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a6c0:	4b0d      	ldr	r3, [pc, #52]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6c2:	681b      	ldr	r3, [r3, #0]
   1a6c4:	69da      	ldr	r2, [r3, #28]
   1a6c6:	3201      	adds	r2, #1
   1a6c8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a6ca:	4b0b      	ldr	r3, [pc, #44]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6cc:	681b      	ldr	r3, [r3, #0]
   1a6ce:	69da      	ldr	r2, [r3, #28]
   1a6d0:	232c      	movs	r3, #44	; 0x2c
   1a6d2:	33ff      	adds	r3, #255	; 0xff
   1a6d4:	429a      	cmp	r2, r3
   1a6d6:	d907      	bls.n	1a6e8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a6d8:	4b07      	ldr	r3, [pc, #28]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6da:	681b      	ldr	r3, [r3, #0]
   1a6dc:	2201      	movs	r2, #1
   1a6de:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a6e0:	4b05      	ldr	r3, [pc, #20]	; (1a6f8 <prvTraceUpdateCounters+0x50>)
   1a6e2:	681b      	ldr	r3, [r3, #0]
   1a6e4:	2200      	movs	r2, #0
   1a6e6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a6e8:	2001      	movs	r0, #1
   1a6ea:	4b04      	ldr	r3, [pc, #16]	; (1a6fc <prvTraceUpdateCounters+0x54>)
   1a6ec:	4798      	blx	r3
   1a6ee:	e000      	b.n	1a6f2 <prvTraceUpdateCounters+0x4a>
		return;
   1a6f0:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a6f2:	46bd      	mov	sp, r7
   1a6f4:	bd80      	pop	{r7, pc}
   1a6f6:	46c0      	nop			; (mov r8, r8)
   1a6f8:	20000dec 	.word	0x20000dec
   1a6fc:	0001a555 	.word	0x0001a555

0001a700 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a700:	b5b0      	push	{r4, r5, r7, lr}
   1a702:	b086      	sub	sp, #24
   1a704:	af00      	add	r7, sp, #0
   1a706:	0002      	movs	r2, r0
   1a708:	1dbb      	adds	r3, r7, #6
   1a70a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a70c:	2300      	movs	r3, #0
   1a70e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a710:	2300      	movs	r3, #0
   1a712:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a714:	2300      	movs	r3, #0
   1a716:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a718:	1dbb      	adds	r3, r7, #6
   1a71a:	881b      	ldrh	r3, [r3, #0]
   1a71c:	2bff      	cmp	r3, #255	; 0xff
   1a71e:	d00a      	beq.n	1a736 <prvTraceGetDTS+0x36>
   1a720:	1dbb      	adds	r3, r7, #6
   1a722:	881b      	ldrh	r3, [r3, #0]
   1a724:	4a60      	ldr	r2, [pc, #384]	; (1a8a8 <prvTraceGetDTS+0x1a8>)
   1a726:	4293      	cmp	r3, r2
   1a728:	d005      	beq.n	1a736 <prvTraceGetDTS+0x36>
   1a72a:	4b60      	ldr	r3, [pc, #384]	; (1a8ac <prvTraceGetDTS+0x1ac>)
   1a72c:	0018      	movs	r0, r3
   1a72e:	4b60      	ldr	r3, [pc, #384]	; (1a8b0 <prvTraceGetDTS+0x1b0>)
   1a730:	4798      	blx	r3
   1a732:	2300      	movs	r3, #0
   1a734:	e0b3      	b.n	1a89e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a736:	4b5f      	ldr	r3, [pc, #380]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a738:	681b      	ldr	r3, [r3, #0]
   1a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a73c:	2b00      	cmp	r3, #0
   1a73e:	d118      	bne.n	1a772 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a740:	4b5d      	ldr	r3, [pc, #372]	; (1a8b8 <prvTraceGetDTS+0x1b8>)
   1a742:	681b      	ldr	r3, [r3, #0]
   1a744:	2b00      	cmp	r3, #0
   1a746:	d006      	beq.n	1a756 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a748:	4b5a      	ldr	r3, [pc, #360]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a74a:	681b      	ldr	r3, [r3, #0]
   1a74c:	4a5a      	ldr	r2, [pc, #360]	; (1a8b8 <prvTraceGetDTS+0x1b8>)
   1a74e:	6812      	ldr	r2, [r2, #0]
   1a750:	0892      	lsrs	r2, r2, #2
   1a752:	625a      	str	r2, [r3, #36]	; 0x24
   1a754:	e00d      	b.n	1a772 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a756:	4b59      	ldr	r3, [pc, #356]	; (1a8bc <prvTraceGetDTS+0x1bc>)
   1a758:	681a      	ldr	r2, [r3, #0]
   1a75a:	4b59      	ldr	r3, [pc, #356]	; (1a8c0 <prvTraceGetDTS+0x1c0>)
   1a75c:	681b      	ldr	r3, [r3, #0]
   1a75e:	429a      	cmp	r2, r3
   1a760:	d007      	beq.n	1a772 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a762:	4b54      	ldr	r3, [pc, #336]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a764:	681c      	ldr	r4, [r3, #0]
   1a766:	2000      	movs	r0, #0
   1a768:	4b56      	ldr	r3, [pc, #344]	; (1a8c4 <prvTraceGetDTS+0x1c4>)
   1a76a:	4798      	blx	r3
   1a76c:	0003      	movs	r3, r0
   1a76e:	089b      	lsrs	r3, r3, #2
   1a770:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a772:	230c      	movs	r3, #12
   1a774:	18fb      	adds	r3, r7, r3
   1a776:	0018      	movs	r0, r3
   1a778:	4b53      	ldr	r3, [pc, #332]	; (1a8c8 <prvTraceGetDTS+0x1c8>)
   1a77a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a77c:	68fa      	ldr	r2, [r7, #12]
   1a77e:	4b53      	ldr	r3, [pc, #332]	; (1a8cc <prvTraceGetDTS+0x1cc>)
   1a780:	681b      	ldr	r3, [r3, #0]
   1a782:	1ad3      	subs	r3, r2, r3
   1a784:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a786:	68fa      	ldr	r2, [r7, #12]
   1a788:	4b50      	ldr	r3, [pc, #320]	; (1a8cc <prvTraceGetDTS+0x1cc>)
   1a78a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a78c:	4b49      	ldr	r3, [pc, #292]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a78e:	681b      	ldr	r3, [r3, #0]
   1a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a792:	2b00      	cmp	r3, #0
   1a794:	d044      	beq.n	1a820 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a796:	4b47      	ldr	r3, [pc, #284]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a798:	681b      	ldr	r3, [r3, #0]
   1a79a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a79c:	693b      	ldr	r3, [r7, #16]
   1a79e:	429a      	cmp	r2, r3
   1a7a0:	d21e      	bcs.n	1a7e0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a7a2:	4b44      	ldr	r3, [pc, #272]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7a4:	681c      	ldr	r4, [r3, #0]
   1a7a6:	4b43      	ldr	r3, [pc, #268]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7a8:	681b      	ldr	r3, [r3, #0]
   1a7aa:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a7ac:	4b41      	ldr	r3, [pc, #260]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7ae:	681b      	ldr	r3, [r3, #0]
   1a7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a7b2:	4b47      	ldr	r3, [pc, #284]	; (1a8d0 <prvTraceGetDTS+0x1d0>)
   1a7b4:	0011      	movs	r1, r2
   1a7b6:	6938      	ldr	r0, [r7, #16]
   1a7b8:	4798      	blx	r3
   1a7ba:	0003      	movs	r3, r0
   1a7bc:	18eb      	adds	r3, r5, r3
   1a7be:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a7c0:	4b3c      	ldr	r3, [pc, #240]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7c2:	681c      	ldr	r4, [r3, #0]
   1a7c4:	4b3b      	ldr	r3, [pc, #236]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7c6:	681b      	ldr	r3, [r3, #0]
   1a7c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a7ca:	4b3a      	ldr	r3, [pc, #232]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7cc:	681b      	ldr	r3, [r3, #0]
   1a7ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a7d0:	693a      	ldr	r2, [r7, #16]
   1a7d2:	4b40      	ldr	r3, [pc, #256]	; (1a8d4 <prvTraceGetDTS+0x1d4>)
   1a7d4:	0010      	movs	r0, r2
   1a7d6:	4798      	blx	r3
   1a7d8:	000b      	movs	r3, r1
   1a7da:	18eb      	adds	r3, r5, r3
   1a7dc:	62a3      	str	r3, [r4, #40]	; 0x28
   1a7de:	e007      	b.n	1a7f0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a7e0:	4b34      	ldr	r3, [pc, #208]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7e2:	681b      	ldr	r3, [r3, #0]
   1a7e4:	4a33      	ldr	r2, [pc, #204]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7e6:	6812      	ldr	r2, [r2, #0]
   1a7e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a7ea:	693a      	ldr	r2, [r7, #16]
   1a7ec:	188a      	adds	r2, r1, r2
   1a7ee:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a7f0:	4b30      	ldr	r3, [pc, #192]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7f2:	681b      	ldr	r3, [r3, #0]
   1a7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a7f6:	4b2f      	ldr	r3, [pc, #188]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a7f8:	681b      	ldr	r3, [r3, #0]
   1a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a7fc:	429a      	cmp	r2, r3
   1a7fe:	d313      	bcc.n	1a828 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a800:	4b2c      	ldr	r3, [pc, #176]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a802:	681b      	ldr	r3, [r3, #0]
   1a804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a806:	3201      	adds	r2, #1
   1a808:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a80a:	4b2a      	ldr	r3, [pc, #168]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a80c:	681b      	ldr	r3, [r3, #0]
   1a80e:	4a29      	ldr	r2, [pc, #164]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a810:	6812      	ldr	r2, [r2, #0]
   1a812:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a814:	4a27      	ldr	r2, [pc, #156]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a816:	6812      	ldr	r2, [r2, #0]
   1a818:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a81a:	1a8a      	subs	r2, r1, r2
   1a81c:	629a      	str	r2, [r3, #40]	; 0x28
   1a81e:	e003      	b.n	1a828 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a820:	4b24      	ldr	r3, [pc, #144]	; (1a8b4 <prvTraceGetDTS+0x1b4>)
   1a822:	681b      	ldr	r3, [r3, #0]
   1a824:	68fa      	ldr	r2, [r7, #12]
   1a826:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a828:	1dbb      	adds	r3, r7, #6
   1a82a:	881a      	ldrh	r2, [r3, #0]
   1a82c:	693b      	ldr	r3, [r7, #16]
   1a82e:	429a      	cmp	r2, r3
   1a830:	d22f      	bcs.n	1a892 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a832:	4b29      	ldr	r3, [pc, #164]	; (1a8d8 <prvTraceGetDTS+0x1d8>)
   1a834:	4798      	blx	r3
   1a836:	0003      	movs	r3, r0
   1a838:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a83a:	697b      	ldr	r3, [r7, #20]
   1a83c:	2b00      	cmp	r3, #0
   1a83e:	d028      	beq.n	1a892 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a840:	1dbb      	adds	r3, r7, #6
   1a842:	881b      	ldrh	r3, [r3, #0]
   1a844:	4a18      	ldr	r2, [pc, #96]	; (1a8a8 <prvTraceGetDTS+0x1a8>)
   1a846:	4293      	cmp	r3, r2
   1a848:	d10b      	bne.n	1a862 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a84a:	697b      	ldr	r3, [r7, #20]
   1a84c:	22a9      	movs	r2, #169	; 0xa9
   1a84e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a850:	693b      	ldr	r3, [r7, #16]
   1a852:	0c1b      	lsrs	r3, r3, #16
   1a854:	b29a      	uxth	r2, r3
   1a856:	697b      	ldr	r3, [r7, #20]
   1a858:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a85a:	697b      	ldr	r3, [r7, #20]
   1a85c:	2200      	movs	r2, #0
   1a85e:	705a      	strb	r2, [r3, #1]
   1a860:	e015      	b.n	1a88e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a862:	1dbb      	adds	r3, r7, #6
   1a864:	881b      	ldrh	r3, [r3, #0]
   1a866:	2bff      	cmp	r3, #255	; 0xff
   1a868:	d10d      	bne.n	1a886 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a86a:	697b      	ldr	r3, [r7, #20]
   1a86c:	22a8      	movs	r2, #168	; 0xa8
   1a86e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a870:	693b      	ldr	r3, [r7, #16]
   1a872:	0a1b      	lsrs	r3, r3, #8
   1a874:	b29a      	uxth	r2, r3
   1a876:	697b      	ldr	r3, [r7, #20]
   1a878:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a87a:	693b      	ldr	r3, [r7, #16]
   1a87c:	0e1b      	lsrs	r3, r3, #24
   1a87e:	b2da      	uxtb	r2, r3
   1a880:	697b      	ldr	r3, [r7, #20]
   1a882:	705a      	strb	r2, [r3, #1]
   1a884:	e003      	b.n	1a88e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a886:	4b15      	ldr	r3, [pc, #84]	; (1a8dc <prvTraceGetDTS+0x1dc>)
   1a888:	0018      	movs	r0, r3
   1a88a:	4b09      	ldr	r3, [pc, #36]	; (1a8b0 <prvTraceGetDTS+0x1b0>)
   1a88c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a88e:	4b14      	ldr	r3, [pc, #80]	; (1a8e0 <prvTraceGetDTS+0x1e0>)
   1a890:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a892:	693b      	ldr	r3, [r7, #16]
   1a894:	b29b      	uxth	r3, r3
   1a896:	1dba      	adds	r2, r7, #6
   1a898:	8812      	ldrh	r2, [r2, #0]
   1a89a:	4013      	ands	r3, r2
   1a89c:	b29b      	uxth	r3, r3
}
   1a89e:	0018      	movs	r0, r3
   1a8a0:	46bd      	mov	sp, r7
   1a8a2:	b006      	add	sp, #24
   1a8a4:	bdb0      	pop	{r4, r5, r7, pc}
   1a8a6:	46c0      	nop			; (mov r8, r8)
   1a8a8:	0000ffff 	.word	0x0000ffff
   1a8ac:	00039a90 	.word	0x00039a90
   1a8b0:	0001a4ed 	.word	0x0001a4ed
   1a8b4:	20000dec 	.word	0x20000dec
   1a8b8:	20000d48 	.word	0x20000d48
   1a8bc:	e000e018 	.word	0xe000e018
   1a8c0:	20005624 	.word	0x20005624
   1a8c4:	0002a905 	.word	0x0002a905
   1a8c8:	0001a8e5 	.word	0x0001a8e5
   1a8cc:	20000df8 	.word	0x20000df8
   1a8d0:	000336a5 	.word	0x000336a5
   1a8d4:	000337b1 	.word	0x000337b1
   1a8d8:	0001a0a5 	.word	0x0001a0a5
   1a8dc:	00039ad0 	.word	0x00039ad0
   1a8e0:	0001a6a9 	.word	0x0001a6a9

0001a8e4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a8e4:	b580      	push	{r7, lr}
   1a8e6:	b084      	sub	sp, #16
   1a8e8:	af00      	add	r7, sp, #0
   1a8ea:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a8ec:	2300      	movs	r3, #0
   1a8ee:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a8f0:	2300      	movs	r3, #0
   1a8f2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a8f4:	4b2d      	ldr	r3, [pc, #180]	; (1a9ac <prvTracePortGetTimeStamp+0xc8>)
   1a8f6:	681b      	ldr	r3, [r3, #0]
   1a8f8:	2b01      	cmp	r3, #1
   1a8fa:	d107      	bne.n	1a90c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a8fc:	687b      	ldr	r3, [r7, #4]
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d04f      	beq.n	1a9a2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a902:	4b2b      	ldr	r3, [pc, #172]	; (1a9b0 <prvTracePortGetTimeStamp+0xcc>)
   1a904:	681a      	ldr	r2, [r3, #0]
   1a906:	687b      	ldr	r3, [r7, #4]
   1a908:	601a      	str	r2, [r3, #0]
		return;
   1a90a:	e04a      	b.n	1a9a2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a90c:	4b29      	ldr	r3, [pc, #164]	; (1a9b4 <prvTracePortGetTimeStamp+0xd0>)
   1a90e:	681a      	ldr	r2, [r3, #0]
   1a910:	4b29      	ldr	r3, [pc, #164]	; (1a9b8 <prvTracePortGetTimeStamp+0xd4>)
   1a912:	681b      	ldr	r3, [r3, #0]
   1a914:	1ad3      	subs	r3, r2, r3
   1a916:	3301      	adds	r3, #1
   1a918:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a91a:	4b28      	ldr	r3, [pc, #160]	; (1a9bc <prvTracePortGetTimeStamp+0xd8>)
   1a91c:	681a      	ldr	r2, [r3, #0]
   1a91e:	4b28      	ldr	r3, [pc, #160]	; (1a9c0 <prvTracePortGetTimeStamp+0xdc>)
   1a920:	681b      	ldr	r3, [r3, #0]
   1a922:	1ad3      	subs	r3, r2, r3
   1a924:	3b01      	subs	r3, #1
   1a926:	2b00      	cmp	r3, #0
   1a928:	db03      	blt.n	1a932 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a92a:	4b24      	ldr	r3, [pc, #144]	; (1a9bc <prvTracePortGetTimeStamp+0xd8>)
   1a92c:	681b      	ldr	r3, [r3, #0]
   1a92e:	60fb      	str	r3, [r7, #12]
   1a930:	e002      	b.n	1a938 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a932:	4b23      	ldr	r3, [pc, #140]	; (1a9c0 <prvTracePortGetTimeStamp+0xdc>)
   1a934:	681b      	ldr	r3, [r3, #0]
   1a936:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a938:	4b20      	ldr	r3, [pc, #128]	; (1a9bc <prvTracePortGetTimeStamp+0xd8>)
   1a93a:	681b      	ldr	r3, [r3, #0]
   1a93c:	68fa      	ldr	r2, [r7, #12]
   1a93e:	429a      	cmp	r2, r3
   1a940:	d107      	bne.n	1a952 <prvTracePortGetTimeStamp+0x6e>
   1a942:	4b20      	ldr	r3, [pc, #128]	; (1a9c4 <prvTracePortGetTimeStamp+0xe0>)
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	68ba      	ldr	r2, [r7, #8]
   1a948:	429a      	cmp	r2, r3
   1a94a:	d202      	bcs.n	1a952 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a94c:	68fb      	ldr	r3, [r7, #12]
   1a94e:	3301      	adds	r3, #1
   1a950:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a952:	687b      	ldr	r3, [r7, #4]
   1a954:	2b00      	cmp	r3, #0
   1a956:	d016      	beq.n	1a986 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a958:	4b16      	ldr	r3, [pc, #88]	; (1a9b4 <prvTracePortGetTimeStamp+0xd0>)
   1a95a:	681b      	ldr	r3, [r3, #0]
   1a95c:	3301      	adds	r3, #1
   1a95e:	089b      	lsrs	r3, r3, #2
   1a960:	68fa      	ldr	r2, [r7, #12]
   1a962:	435a      	muls	r2, r3
   1a964:	4b12      	ldr	r3, [pc, #72]	; (1a9b0 <prvTracePortGetTimeStamp+0xcc>)
   1a966:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a968:	4b12      	ldr	r3, [pc, #72]	; (1a9b4 <prvTracePortGetTimeStamp+0xd0>)
   1a96a:	681b      	ldr	r3, [r3, #0]
   1a96c:	3301      	adds	r3, #1
   1a96e:	2203      	movs	r2, #3
   1a970:	4013      	ands	r3, r2
   1a972:	68fa      	ldr	r2, [r7, #12]
   1a974:	435a      	muls	r2, r3
   1a976:	68bb      	ldr	r3, [r7, #8]
   1a978:	18d3      	adds	r3, r2, r3
   1a97a:	089a      	lsrs	r2, r3, #2
   1a97c:	4b0c      	ldr	r3, [pc, #48]	; (1a9b0 <prvTracePortGetTimeStamp+0xcc>)
   1a97e:	681b      	ldr	r3, [r3, #0]
   1a980:	18d2      	adds	r2, r2, r3
   1a982:	4b0b      	ldr	r3, [pc, #44]	; (1a9b0 <prvTracePortGetTimeStamp+0xcc>)
   1a984:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a986:	4b0d      	ldr	r3, [pc, #52]	; (1a9bc <prvTracePortGetTimeStamp+0xd8>)
   1a988:	68fa      	ldr	r2, [r7, #12]
   1a98a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a98c:	687b      	ldr	r3, [r7, #4]
   1a98e:	2b00      	cmp	r3, #0
   1a990:	d003      	beq.n	1a99a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a992:	4b07      	ldr	r3, [pc, #28]	; (1a9b0 <prvTracePortGetTimeStamp+0xcc>)
   1a994:	681a      	ldr	r2, [r3, #0]
   1a996:	687b      	ldr	r3, [r7, #4]
   1a998:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a99a:	4b0a      	ldr	r3, [pc, #40]	; (1a9c4 <prvTracePortGetTimeStamp+0xe0>)
   1a99c:	68ba      	ldr	r2, [r7, #8]
   1a99e:	601a      	str	r2, [r3, #0]
   1a9a0:	e000      	b.n	1a9a4 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a9a2:	46c0      	nop			; (mov r8, r8)
}
   1a9a4:	46bd      	mov	sp, r7
   1a9a6:	b004      	add	sp, #16
   1a9a8:	bd80      	pop	{r7, pc}
   1a9aa:	46c0      	nop			; (mov r8, r8)
   1a9ac:	20000d38 	.word	0x20000d38
   1a9b0:	20000d3c 	.word	0x20000d3c
   1a9b4:	e000e014 	.word	0xe000e014
   1a9b8:	e000e018 	.word	0xe000e018
   1a9bc:	20000dfc 	.word	0x20000dfc
   1a9c0:	20000d34 	.word	0x20000d34
   1a9c4:	20000e00 	.word	0x20000e00

0001a9c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a9c8:	b580      	push	{r7, lr}
   1a9ca:	b082      	sub	sp, #8
   1a9cc:	af00      	add	r7, sp, #0
   1a9ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a9d0:	687b      	ldr	r3, [r7, #4]
   1a9d2:	3308      	adds	r3, #8
   1a9d4:	001a      	movs	r2, r3
   1a9d6:	687b      	ldr	r3, [r7, #4]
   1a9d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a9da:	687b      	ldr	r3, [r7, #4]
   1a9dc:	2201      	movs	r2, #1
   1a9de:	4252      	negs	r2, r2
   1a9e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a9e2:	687b      	ldr	r3, [r7, #4]
   1a9e4:	3308      	adds	r3, #8
   1a9e6:	001a      	movs	r2, r3
   1a9e8:	687b      	ldr	r3, [r7, #4]
   1a9ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a9ec:	687b      	ldr	r3, [r7, #4]
   1a9ee:	3308      	adds	r3, #8
   1a9f0:	001a      	movs	r2, r3
   1a9f2:	687b      	ldr	r3, [r7, #4]
   1a9f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a9f6:	687b      	ldr	r3, [r7, #4]
   1a9f8:	2200      	movs	r2, #0
   1a9fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a9fc:	46c0      	nop			; (mov r8, r8)
   1a9fe:	46bd      	mov	sp, r7
   1aa00:	b002      	add	sp, #8
   1aa02:	bd80      	pop	{r7, pc}

0001aa04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1aa04:	b580      	push	{r7, lr}
   1aa06:	b082      	sub	sp, #8
   1aa08:	af00      	add	r7, sp, #0
   1aa0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1aa0c:	687b      	ldr	r3, [r7, #4]
   1aa0e:	2200      	movs	r2, #0
   1aa10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1aa12:	46c0      	nop			; (mov r8, r8)
   1aa14:	46bd      	mov	sp, r7
   1aa16:	b002      	add	sp, #8
   1aa18:	bd80      	pop	{r7, pc}

0001aa1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aa1a:	b580      	push	{r7, lr}
   1aa1c:	b084      	sub	sp, #16
   1aa1e:	af00      	add	r7, sp, #0
   1aa20:	6078      	str	r0, [r7, #4]
   1aa22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1aa24:	687b      	ldr	r3, [r7, #4]
   1aa26:	685b      	ldr	r3, [r3, #4]
   1aa28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1aa2a:	683b      	ldr	r3, [r7, #0]
   1aa2c:	68fa      	ldr	r2, [r7, #12]
   1aa2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1aa30:	68fb      	ldr	r3, [r7, #12]
   1aa32:	689a      	ldr	r2, [r3, #8]
   1aa34:	683b      	ldr	r3, [r7, #0]
   1aa36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1aa38:	68fb      	ldr	r3, [r7, #12]
   1aa3a:	689b      	ldr	r3, [r3, #8]
   1aa3c:	683a      	ldr	r2, [r7, #0]
   1aa3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1aa40:	68fb      	ldr	r3, [r7, #12]
   1aa42:	683a      	ldr	r2, [r7, #0]
   1aa44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aa46:	683b      	ldr	r3, [r7, #0]
   1aa48:	687a      	ldr	r2, [r7, #4]
   1aa4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aa4c:	687b      	ldr	r3, [r7, #4]
   1aa4e:	681b      	ldr	r3, [r3, #0]
   1aa50:	1c5a      	adds	r2, r3, #1
   1aa52:	687b      	ldr	r3, [r7, #4]
   1aa54:	601a      	str	r2, [r3, #0]
}
   1aa56:	46c0      	nop			; (mov r8, r8)
   1aa58:	46bd      	mov	sp, r7
   1aa5a:	b004      	add	sp, #16
   1aa5c:	bd80      	pop	{r7, pc}

0001aa5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aa5e:	b580      	push	{r7, lr}
   1aa60:	b084      	sub	sp, #16
   1aa62:	af00      	add	r7, sp, #0
   1aa64:	6078      	str	r0, [r7, #4]
   1aa66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1aa68:	683b      	ldr	r3, [r7, #0]
   1aa6a:	681b      	ldr	r3, [r3, #0]
   1aa6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1aa6e:	68bb      	ldr	r3, [r7, #8]
   1aa70:	3301      	adds	r3, #1
   1aa72:	d103      	bne.n	1aa7c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1aa74:	687b      	ldr	r3, [r7, #4]
   1aa76:	691b      	ldr	r3, [r3, #16]
   1aa78:	60fb      	str	r3, [r7, #12]
   1aa7a:	e00c      	b.n	1aa96 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa7c:	687b      	ldr	r3, [r7, #4]
   1aa7e:	3308      	adds	r3, #8
   1aa80:	60fb      	str	r3, [r7, #12]
   1aa82:	e002      	b.n	1aa8a <vListInsert+0x2c>
   1aa84:	68fb      	ldr	r3, [r7, #12]
   1aa86:	685b      	ldr	r3, [r3, #4]
   1aa88:	60fb      	str	r3, [r7, #12]
   1aa8a:	68fb      	ldr	r3, [r7, #12]
   1aa8c:	685b      	ldr	r3, [r3, #4]
   1aa8e:	681a      	ldr	r2, [r3, #0]
   1aa90:	68bb      	ldr	r3, [r7, #8]
   1aa92:	429a      	cmp	r2, r3
   1aa94:	d9f6      	bls.n	1aa84 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1aa96:	68fb      	ldr	r3, [r7, #12]
   1aa98:	685a      	ldr	r2, [r3, #4]
   1aa9a:	683b      	ldr	r3, [r7, #0]
   1aa9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1aa9e:	683b      	ldr	r3, [r7, #0]
   1aaa0:	685b      	ldr	r3, [r3, #4]
   1aaa2:	683a      	ldr	r2, [r7, #0]
   1aaa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1aaa6:	683b      	ldr	r3, [r7, #0]
   1aaa8:	68fa      	ldr	r2, [r7, #12]
   1aaaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1aaac:	68fb      	ldr	r3, [r7, #12]
   1aaae:	683a      	ldr	r2, [r7, #0]
   1aab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aab2:	683b      	ldr	r3, [r7, #0]
   1aab4:	687a      	ldr	r2, [r7, #4]
   1aab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aab8:	687b      	ldr	r3, [r7, #4]
   1aaba:	681b      	ldr	r3, [r3, #0]
   1aabc:	1c5a      	adds	r2, r3, #1
   1aabe:	687b      	ldr	r3, [r7, #4]
   1aac0:	601a      	str	r2, [r3, #0]
}
   1aac2:	46c0      	nop			; (mov r8, r8)
   1aac4:	46bd      	mov	sp, r7
   1aac6:	b004      	add	sp, #16
   1aac8:	bd80      	pop	{r7, pc}

0001aaca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1aaca:	b580      	push	{r7, lr}
   1aacc:	b084      	sub	sp, #16
   1aace:	af00      	add	r7, sp, #0
   1aad0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1aad2:	687b      	ldr	r3, [r7, #4]
   1aad4:	691b      	ldr	r3, [r3, #16]
   1aad6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1aad8:	687b      	ldr	r3, [r7, #4]
   1aada:	685b      	ldr	r3, [r3, #4]
   1aadc:	687a      	ldr	r2, [r7, #4]
   1aade:	6892      	ldr	r2, [r2, #8]
   1aae0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1aae2:	687b      	ldr	r3, [r7, #4]
   1aae4:	689b      	ldr	r3, [r3, #8]
   1aae6:	687a      	ldr	r2, [r7, #4]
   1aae8:	6852      	ldr	r2, [r2, #4]
   1aaea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1aaec:	68fb      	ldr	r3, [r7, #12]
   1aaee:	685a      	ldr	r2, [r3, #4]
   1aaf0:	687b      	ldr	r3, [r7, #4]
   1aaf2:	429a      	cmp	r2, r3
   1aaf4:	d103      	bne.n	1aafe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1aaf6:	687b      	ldr	r3, [r7, #4]
   1aaf8:	689a      	ldr	r2, [r3, #8]
   1aafa:	68fb      	ldr	r3, [r7, #12]
   1aafc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1aafe:	687b      	ldr	r3, [r7, #4]
   1ab00:	2200      	movs	r2, #0
   1ab02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ab04:	68fb      	ldr	r3, [r7, #12]
   1ab06:	681b      	ldr	r3, [r3, #0]
   1ab08:	1e5a      	subs	r2, r3, #1
   1ab0a:	68fb      	ldr	r3, [r7, #12]
   1ab0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ab0e:	68fb      	ldr	r3, [r7, #12]
   1ab10:	681b      	ldr	r3, [r3, #0]
}
   1ab12:	0018      	movs	r0, r3
   1ab14:	46bd      	mov	sp, r7
   1ab16:	b004      	add	sp, #16
   1ab18:	bd80      	pop	{r7, pc}
	...

0001ab1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ab1c:	b580      	push	{r7, lr}
   1ab1e:	b084      	sub	sp, #16
   1ab20:	af00      	add	r7, sp, #0
   1ab22:	60f8      	str	r0, [r7, #12]
   1ab24:	60b9      	str	r1, [r7, #8]
   1ab26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ab28:	68fb      	ldr	r3, [r7, #12]
   1ab2a:	3b04      	subs	r3, #4
   1ab2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ab2e:	68fb      	ldr	r3, [r7, #12]
   1ab30:	2280      	movs	r2, #128	; 0x80
   1ab32:	0452      	lsls	r2, r2, #17
   1ab34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ab36:	68fb      	ldr	r3, [r7, #12]
   1ab38:	3b04      	subs	r3, #4
   1ab3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ab3c:	68ba      	ldr	r2, [r7, #8]
   1ab3e:	68fb      	ldr	r3, [r7, #12]
   1ab40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ab42:	68fb      	ldr	r3, [r7, #12]
   1ab44:	3b04      	subs	r3, #4
   1ab46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ab48:	4a08      	ldr	r2, [pc, #32]	; (1ab6c <pxPortInitialiseStack+0x50>)
   1ab4a:	68fb      	ldr	r3, [r7, #12]
   1ab4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ab4e:	68fb      	ldr	r3, [r7, #12]
   1ab50:	3b14      	subs	r3, #20
   1ab52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ab54:	687a      	ldr	r2, [r7, #4]
   1ab56:	68fb      	ldr	r3, [r7, #12]
   1ab58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ab5a:	68fb      	ldr	r3, [r7, #12]
   1ab5c:	3b20      	subs	r3, #32
   1ab5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ab60:	68fb      	ldr	r3, [r7, #12]
}
   1ab62:	0018      	movs	r0, r3
   1ab64:	46bd      	mov	sp, r7
   1ab66:	b004      	add	sp, #16
   1ab68:	bd80      	pop	{r7, pc}
   1ab6a:	46c0      	nop			; (mov r8, r8)
   1ab6c:	0001ab71 	.word	0x0001ab71

0001ab70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ab70:	b580      	push	{r7, lr}
   1ab72:	b082      	sub	sp, #8
   1ab74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ab76:	2300      	movs	r3, #0
   1ab78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ab7a:	4b07      	ldr	r3, [pc, #28]	; (1ab98 <prvTaskExitError+0x28>)
   1ab7c:	681b      	ldr	r3, [r3, #0]
   1ab7e:	3301      	adds	r3, #1
   1ab80:	d001      	beq.n	1ab86 <prvTaskExitError+0x16>
   1ab82:	b672      	cpsid	i
   1ab84:	e7fe      	b.n	1ab84 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ab86:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ab88:	46c0      	nop			; (mov r8, r8)
   1ab8a:	687b      	ldr	r3, [r7, #4]
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d0fc      	beq.n	1ab8a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ab90:	46c0      	nop			; (mov r8, r8)
   1ab92:	46bd      	mov	sp, r7
   1ab94:	b002      	add	sp, #8
   1ab96:	bd80      	pop	{r7, pc}
   1ab98:	20000114 	.word	0x20000114

0001ab9c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ab9c:	b580      	push	{r7, lr}
   1ab9e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1aba0:	46c0      	nop			; (mov r8, r8)
   1aba2:	46bd      	mov	sp, r7
   1aba4:	bd80      	pop	{r7, pc}
	...

0001abb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1abb0:	4a0b      	ldr	r2, [pc, #44]	; (1abe0 <pxCurrentTCBConst2>)
   1abb2:	6813      	ldr	r3, [r2, #0]
   1abb4:	6818      	ldr	r0, [r3, #0]
   1abb6:	3020      	adds	r0, #32
   1abb8:	f380 8809 	msr	PSP, r0
   1abbc:	2002      	movs	r0, #2
   1abbe:	f380 8814 	msr	CONTROL, r0
   1abc2:	f3bf 8f6f 	isb	sy
   1abc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1abc8:	46ae      	mov	lr, r5
   1abca:	bc08      	pop	{r3}
   1abcc:	bc04      	pop	{r2}
   1abce:	b662      	cpsie	i
   1abd0:	4718      	bx	r3
   1abd2:	46c0      	nop			; (mov r8, r8)
   1abd4:	46c0      	nop			; (mov r8, r8)
   1abd6:	46c0      	nop			; (mov r8, r8)
   1abd8:	46c0      	nop			; (mov r8, r8)
   1abda:	46c0      	nop			; (mov r8, r8)
   1abdc:	46c0      	nop			; (mov r8, r8)
   1abde:	46c0      	nop			; (mov r8, r8)

0001abe0 <pxCurrentTCBConst2>:
   1abe0:	200040d4 	.word	0x200040d4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1abe4:	46c0      	nop			; (mov r8, r8)
   1abe6:	46c0      	nop			; (mov r8, r8)

0001abe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1abe8:	b580      	push	{r7, lr}
   1abea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1abec:	4b0e      	ldr	r3, [pc, #56]	; (1ac28 <xPortStartScheduler+0x40>)
   1abee:	4a0e      	ldr	r2, [pc, #56]	; (1ac28 <xPortStartScheduler+0x40>)
   1abf0:	6812      	ldr	r2, [r2, #0]
   1abf2:	21ff      	movs	r1, #255	; 0xff
   1abf4:	0409      	lsls	r1, r1, #16
   1abf6:	430a      	orrs	r2, r1
   1abf8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1abfa:	4b0b      	ldr	r3, [pc, #44]	; (1ac28 <xPortStartScheduler+0x40>)
   1abfc:	4a0a      	ldr	r2, [pc, #40]	; (1ac28 <xPortStartScheduler+0x40>)
   1abfe:	6812      	ldr	r2, [r2, #0]
   1ac00:	21ff      	movs	r1, #255	; 0xff
   1ac02:	0609      	lsls	r1, r1, #24
   1ac04:	430a      	orrs	r2, r1
   1ac06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ac08:	4b08      	ldr	r3, [pc, #32]	; (1ac2c <xPortStartScheduler+0x44>)
   1ac0a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ac0c:	4b08      	ldr	r3, [pc, #32]	; (1ac30 <xPortStartScheduler+0x48>)
   1ac0e:	2200      	movs	r2, #0
   1ac10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ac12:	4b08      	ldr	r3, [pc, #32]	; (1ac34 <xPortStartScheduler+0x4c>)
   1ac14:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ac16:	4b08      	ldr	r3, [pc, #32]	; (1ac38 <xPortStartScheduler+0x50>)
   1ac18:	4798      	blx	r3
	prvTaskExitError();
   1ac1a:	4b08      	ldr	r3, [pc, #32]	; (1ac3c <xPortStartScheduler+0x54>)
   1ac1c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ac1e:	2300      	movs	r3, #0
}
   1ac20:	0018      	movs	r0, r3
   1ac22:	46bd      	mov	sp, r7
   1ac24:	bd80      	pop	{r7, pc}
   1ac26:	46c0      	nop			; (mov r8, r8)
   1ac28:	e000ed20 	.word	0xe000ed20
   1ac2c:	0001ad49 	.word	0x0001ad49
   1ac30:	20000114 	.word	0x20000114
   1ac34:	0001abb1 	.word	0x0001abb1
   1ac38:	0001d2a5 	.word	0x0001d2a5
   1ac3c:	0001ab71 	.word	0x0001ab71

0001ac40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ac40:	b580      	push	{r7, lr}
   1ac42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ac44:	4b03      	ldr	r3, [pc, #12]	; (1ac54 <vPortYield+0x14>)
   1ac46:	2280      	movs	r2, #128	; 0x80
   1ac48:	0552      	lsls	r2, r2, #21
   1ac4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1ac4c:	46c0      	nop			; (mov r8, r8)
   1ac4e:	46bd      	mov	sp, r7
   1ac50:	bd80      	pop	{r7, pc}
   1ac52:	46c0      	nop			; (mov r8, r8)
   1ac54:	e000ed04 	.word	0xe000ed04

0001ac58 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ac58:	b580      	push	{r7, lr}
   1ac5a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ac5c:	b672      	cpsid	i
    uxCriticalNesting++;
   1ac5e:	4b06      	ldr	r3, [pc, #24]	; (1ac78 <vPortEnterCritical+0x20>)
   1ac60:	681b      	ldr	r3, [r3, #0]
   1ac62:	1c5a      	adds	r2, r3, #1
   1ac64:	4b04      	ldr	r3, [pc, #16]	; (1ac78 <vPortEnterCritical+0x20>)
   1ac66:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ac68:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ac6c:	f3bf 8f6f 	isb	sy
}
   1ac70:	46c0      	nop			; (mov r8, r8)
   1ac72:	46bd      	mov	sp, r7
   1ac74:	bd80      	pop	{r7, pc}
   1ac76:	46c0      	nop			; (mov r8, r8)
   1ac78:	20000114 	.word	0x20000114

0001ac7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ac7c:	b580      	push	{r7, lr}
   1ac7e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ac80:	4b09      	ldr	r3, [pc, #36]	; (1aca8 <vPortExitCritical+0x2c>)
   1ac82:	681b      	ldr	r3, [r3, #0]
   1ac84:	2b00      	cmp	r3, #0
   1ac86:	d101      	bne.n	1ac8c <vPortExitCritical+0x10>
   1ac88:	b672      	cpsid	i
   1ac8a:	e7fe      	b.n	1ac8a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ac8c:	4b06      	ldr	r3, [pc, #24]	; (1aca8 <vPortExitCritical+0x2c>)
   1ac8e:	681b      	ldr	r3, [r3, #0]
   1ac90:	1e5a      	subs	r2, r3, #1
   1ac92:	4b05      	ldr	r3, [pc, #20]	; (1aca8 <vPortExitCritical+0x2c>)
   1ac94:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ac96:	4b04      	ldr	r3, [pc, #16]	; (1aca8 <vPortExitCritical+0x2c>)
   1ac98:	681b      	ldr	r3, [r3, #0]
   1ac9a:	2b00      	cmp	r3, #0
   1ac9c:	d100      	bne.n	1aca0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ac9e:	b662      	cpsie	i
    }
}
   1aca0:	46c0      	nop			; (mov r8, r8)
   1aca2:	46bd      	mov	sp, r7
   1aca4:	bd80      	pop	{r7, pc}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	20000114 	.word	0x20000114

0001acac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1acac:	f3ef 8010 	mrs	r0, PRIMASK
   1acb0:	b672      	cpsid	i
   1acb2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1acb4:	46c0      	nop			; (mov r8, r8)
   1acb6:	0018      	movs	r0, r3

0001acb8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1acb8:	f380 8810 	msr	PRIMASK, r0
   1acbc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1acbe:	46c0      	nop			; (mov r8, r8)

0001acc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1acc0:	f3ef 8009 	mrs	r0, PSP
   1acc4:	4b0e      	ldr	r3, [pc, #56]	; (1ad00 <pxCurrentTCBConst>)
   1acc6:	681a      	ldr	r2, [r3, #0]
   1acc8:	3820      	subs	r0, #32
   1acca:	6010      	str	r0, [r2, #0]
   1accc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1acce:	4644      	mov	r4, r8
   1acd0:	464d      	mov	r5, r9
   1acd2:	4656      	mov	r6, sl
   1acd4:	465f      	mov	r7, fp
   1acd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1acd8:	b508      	push	{r3, lr}
   1acda:	b672      	cpsid	i
   1acdc:	f002 fae2 	bl	1d2a4 <vTaskSwitchContext>
   1ace0:	b662      	cpsie	i
   1ace2:	bc0c      	pop	{r2, r3}
   1ace4:	6811      	ldr	r1, [r2, #0]
   1ace6:	6808      	ldr	r0, [r1, #0]
   1ace8:	3010      	adds	r0, #16
   1acea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1acec:	46a0      	mov	r8, r4
   1acee:	46a9      	mov	r9, r5
   1acf0:	46b2      	mov	sl, r6
   1acf2:	46bb      	mov	fp, r7
   1acf4:	f380 8809 	msr	PSP, r0
   1acf8:	3820      	subs	r0, #32
   1acfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1acfc:	4718      	bx	r3
   1acfe:	46c0      	nop			; (mov r8, r8)

0001ad00 <pxCurrentTCBConst>:
   1ad00:	200040d4 	.word	0x200040d4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ad04:	46c0      	nop			; (mov r8, r8)
   1ad06:	46c0      	nop			; (mov r8, r8)

0001ad08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ad08:	b580      	push	{r7, lr}
   1ad0a:	b082      	sub	sp, #8
   1ad0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ad0e:	4b0a      	ldr	r3, [pc, #40]	; (1ad38 <SysTick_Handler+0x30>)
   1ad10:	4798      	blx	r3
   1ad12:	0003      	movs	r3, r0
   1ad14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ad16:	4b09      	ldr	r3, [pc, #36]	; (1ad3c <SysTick_Handler+0x34>)
   1ad18:	4798      	blx	r3
   1ad1a:	1e03      	subs	r3, r0, #0
   1ad1c:	d003      	beq.n	1ad26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ad1e:	4b08      	ldr	r3, [pc, #32]	; (1ad40 <SysTick_Handler+0x38>)
   1ad20:	2280      	movs	r2, #128	; 0x80
   1ad22:	0552      	lsls	r2, r2, #21
   1ad24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ad26:	687b      	ldr	r3, [r7, #4]
   1ad28:	0018      	movs	r0, r3
   1ad2a:	4b06      	ldr	r3, [pc, #24]	; (1ad44 <SysTick_Handler+0x3c>)
   1ad2c:	4798      	blx	r3
}
   1ad2e:	46c0      	nop			; (mov r8, r8)
   1ad30:	46bd      	mov	sp, r7
   1ad32:	b002      	add	sp, #8
   1ad34:	bd80      	pop	{r7, pc}
   1ad36:	46c0      	nop			; (mov r8, r8)
   1ad38:	0001acad 	.word	0x0001acad
   1ad3c:	0001d0b5 	.word	0x0001d0b5
   1ad40:	e000ed04 	.word	0xe000ed04
   1ad44:	0001acb9 	.word	0x0001acb9

0001ad48 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1ad48:	b5b0      	push	{r4, r5, r7, lr}
   1ad4a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1ad4c:	4b0b      	ldr	r3, [pc, #44]	; (1ad7c <prvSetupTimerInterrupt+0x34>)
   1ad4e:	2200      	movs	r2, #0
   1ad50:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1ad52:	4b0b      	ldr	r3, [pc, #44]	; (1ad80 <prvSetupTimerInterrupt+0x38>)
   1ad54:	2200      	movs	r2, #0
   1ad56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1ad58:	4c0a      	ldr	r4, [pc, #40]	; (1ad84 <prvSetupTimerInterrupt+0x3c>)
   1ad5a:	2000      	movs	r0, #0
   1ad5c:	4b0a      	ldr	r3, [pc, #40]	; (1ad88 <prvSetupTimerInterrupt+0x40>)
   1ad5e:	4798      	blx	r3
   1ad60:	4b0a      	ldr	r3, [pc, #40]	; (1ad8c <prvSetupTimerInterrupt+0x44>)
   1ad62:	22fa      	movs	r2, #250	; 0xfa
   1ad64:	0091      	lsls	r1, r2, #2
   1ad66:	4798      	blx	r3
   1ad68:	0003      	movs	r3, r0
   1ad6a:	3b01      	subs	r3, #1
   1ad6c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1ad6e:	4b03      	ldr	r3, [pc, #12]	; (1ad7c <prvSetupTimerInterrupt+0x34>)
   1ad70:	2207      	movs	r2, #7
   1ad72:	601a      	str	r2, [r3, #0]
}
   1ad74:	46c0      	nop			; (mov r8, r8)
   1ad76:	46bd      	mov	sp, r7
   1ad78:	bdb0      	pop	{r4, r5, r7, pc}
   1ad7a:	46c0      	nop			; (mov r8, r8)
   1ad7c:	e000e010 	.word	0xe000e010
   1ad80:	e000e018 	.word	0xe000e018
   1ad84:	e000e014 	.word	0xe000e014
   1ad88:	0002a905 	.word	0x0002a905
   1ad8c:	000336a5 	.word	0x000336a5

0001ad90 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ad90:	b580      	push	{r7, lr}
   1ad92:	b084      	sub	sp, #16
   1ad94:	af00      	add	r7, sp, #0
   1ad96:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1ad98:	2300      	movs	r3, #0
   1ad9a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1ad9c:	687b      	ldr	r3, [r7, #4]
   1ad9e:	2207      	movs	r2, #7
   1ada0:	4013      	ands	r3, r2
   1ada2:	d004      	beq.n	1adae <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1ada4:	687b      	ldr	r3, [r7, #4]
   1ada6:	2207      	movs	r2, #7
   1ada8:	4393      	bics	r3, r2
   1adaa:	3308      	adds	r3, #8
   1adac:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1adae:	4b21      	ldr	r3, [pc, #132]	; (1ae34 <pvPortMalloc+0xa4>)
   1adb0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1adb2:	4b21      	ldr	r3, [pc, #132]	; (1ae38 <pvPortMalloc+0xa8>)
   1adb4:	681b      	ldr	r3, [r3, #0]
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	d105      	bne.n	1adc6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1adba:	4b20      	ldr	r3, [pc, #128]	; (1ae3c <pvPortMalloc+0xac>)
   1adbc:	2207      	movs	r2, #7
   1adbe:	4393      	bics	r3, r2
   1adc0:	001a      	movs	r2, r3
   1adc2:	4b1d      	ldr	r3, [pc, #116]	; (1ae38 <pvPortMalloc+0xa8>)
   1adc4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1adc6:	4b1e      	ldr	r3, [pc, #120]	; (1ae40 <pvPortMalloc+0xb0>)
   1adc8:	681a      	ldr	r2, [r3, #0]
   1adca:	687b      	ldr	r3, [r7, #4]
   1adcc:	18d3      	adds	r3, r2, r3
   1adce:	4a1d      	ldr	r2, [pc, #116]	; (1ae44 <pvPortMalloc+0xb4>)
   1add0:	4293      	cmp	r3, r2
   1add2:	d813      	bhi.n	1adfc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1add4:	4b1a      	ldr	r3, [pc, #104]	; (1ae40 <pvPortMalloc+0xb0>)
   1add6:	681a      	ldr	r2, [r3, #0]
   1add8:	687b      	ldr	r3, [r7, #4]
   1adda:	18d2      	adds	r2, r2, r3
   1addc:	4b18      	ldr	r3, [pc, #96]	; (1ae40 <pvPortMalloc+0xb0>)
   1adde:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ade0:	429a      	cmp	r2, r3
   1ade2:	d90b      	bls.n	1adfc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1ade4:	4b14      	ldr	r3, [pc, #80]	; (1ae38 <pvPortMalloc+0xa8>)
   1ade6:	681a      	ldr	r2, [r3, #0]
   1ade8:	4b15      	ldr	r3, [pc, #84]	; (1ae40 <pvPortMalloc+0xb0>)
   1adea:	681b      	ldr	r3, [r3, #0]
   1adec:	18d3      	adds	r3, r2, r3
   1adee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1adf0:	4b13      	ldr	r3, [pc, #76]	; (1ae40 <pvPortMalloc+0xb0>)
   1adf2:	681a      	ldr	r2, [r3, #0]
   1adf4:	687b      	ldr	r3, [r7, #4]
   1adf6:	18d2      	adds	r2, r2, r3
   1adf8:	4b11      	ldr	r3, [pc, #68]	; (1ae40 <pvPortMalloc+0xb0>)
   1adfa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1adfc:	68fb      	ldr	r3, [r7, #12]
   1adfe:	2b00      	cmp	r3, #0
   1ae00:	d006      	beq.n	1ae10 <pvPortMalloc+0x80>
   1ae02:	68fb      	ldr	r3, [r7, #12]
   1ae04:	687a      	ldr	r2, [r7, #4]
   1ae06:	0019      	movs	r1, r3
   1ae08:	2094      	movs	r0, #148	; 0x94
   1ae0a:	4b0f      	ldr	r3, [pc, #60]	; (1ae48 <pvPortMalloc+0xb8>)
   1ae0c:	4798      	blx	r3
   1ae0e:	e005      	b.n	1ae1c <pvPortMalloc+0x8c>
   1ae10:	68fb      	ldr	r3, [r7, #12]
   1ae12:	687a      	ldr	r2, [r7, #4]
   1ae14:	0019      	movs	r1, r3
   1ae16:	20e8      	movs	r0, #232	; 0xe8
   1ae18:	4b0b      	ldr	r3, [pc, #44]	; (1ae48 <pvPortMalloc+0xb8>)
   1ae1a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1ae1c:	4b0b      	ldr	r3, [pc, #44]	; (1ae4c <pvPortMalloc+0xbc>)
   1ae1e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1ae20:	68fb      	ldr	r3, [r7, #12]
   1ae22:	2b00      	cmp	r3, #0
   1ae24:	d101      	bne.n	1ae2a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1ae26:	4b0a      	ldr	r3, [pc, #40]	; (1ae50 <pvPortMalloc+0xc0>)
   1ae28:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1ae2a:	68fb      	ldr	r3, [r7, #12]
}
   1ae2c:	0018      	movs	r0, r3
   1ae2e:	46bd      	mov	sp, r7
   1ae30:	b004      	add	sp, #16
   1ae32:	bd80      	pop	{r7, pc}
   1ae34:	0001cf11 	.word	0x0001cf11
   1ae38:	200040d0 	.word	0x200040d0
   1ae3c:	20000e0c 	.word	0x20000e0c
   1ae40:	200040cc 	.word	0x200040cc
   1ae44:	000032bf 	.word	0x000032bf
   1ae48:	000194f9 	.word	0x000194f9
   1ae4c:	0001cf29 	.word	0x0001cf29
   1ae50:	00033675 	.word	0x00033675

0001ae54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1ae54:	b580      	push	{r7, lr}
   1ae56:	b082      	sub	sp, #8
   1ae58:	af00      	add	r7, sp, #0
   1ae5a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1ae5c:	687b      	ldr	r3, [r7, #4]
   1ae5e:	2b00      	cmp	r3, #0
   1ae60:	d001      	beq.n	1ae66 <vPortFree+0x12>
   1ae62:	b672      	cpsid	i
   1ae64:	e7fe      	b.n	1ae64 <vPortFree+0x10>
}
   1ae66:	46c0      	nop			; (mov r8, r8)
   1ae68:	46bd      	mov	sp, r7
   1ae6a:	b002      	add	sp, #8
   1ae6c:	bd80      	pop	{r7, pc}
	...

0001ae70 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1ae70:	b580      	push	{r7, lr}
   1ae72:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1ae74:	4b03      	ldr	r3, [pc, #12]	; (1ae84 <xPortGetFreeHeapSize+0x14>)
   1ae76:	681b      	ldr	r3, [r3, #0]
   1ae78:	22cb      	movs	r2, #203	; 0xcb
   1ae7a:	0192      	lsls	r2, r2, #6
   1ae7c:	1ad3      	subs	r3, r2, r3
}
   1ae7e:	0018      	movs	r0, r3
   1ae80:	46bd      	mov	sp, r7
   1ae82:	bd80      	pop	{r7, pc}
   1ae84:	200040cc 	.word	0x200040cc

0001ae88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1ae88:	b580      	push	{r7, lr}
   1ae8a:	b084      	sub	sp, #16
   1ae8c:	af00      	add	r7, sp, #0
   1ae8e:	6078      	str	r0, [r7, #4]
   1ae90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ae92:	687b      	ldr	r3, [r7, #4]
   1ae94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1ae96:	68fb      	ldr	r3, [r7, #12]
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d101      	bne.n	1aea0 <xQueueGenericReset+0x18>
   1ae9c:	b672      	cpsid	i
   1ae9e:	e7fe      	b.n	1ae9e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1aea0:	4b23      	ldr	r3, [pc, #140]	; (1af30 <xQueueGenericReset+0xa8>)
   1aea2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1aea4:	68fb      	ldr	r3, [r7, #12]
   1aea6:	681a      	ldr	r2, [r3, #0]
   1aea8:	68fb      	ldr	r3, [r7, #12]
   1aeaa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1aeac:	68fb      	ldr	r3, [r7, #12]
   1aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aeb0:	434b      	muls	r3, r1
   1aeb2:	18d2      	adds	r2, r2, r3
   1aeb4:	68fb      	ldr	r3, [r7, #12]
   1aeb6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1aeb8:	68fb      	ldr	r3, [r7, #12]
   1aeba:	2200      	movs	r2, #0
   1aebc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1aebe:	68fb      	ldr	r3, [r7, #12]
   1aec0:	681a      	ldr	r2, [r3, #0]
   1aec2:	68fb      	ldr	r3, [r7, #12]
   1aec4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1aec6:	68fb      	ldr	r3, [r7, #12]
   1aec8:	681a      	ldr	r2, [r3, #0]
   1aeca:	68fb      	ldr	r3, [r7, #12]
   1aecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aece:	1e59      	subs	r1, r3, #1
   1aed0:	68fb      	ldr	r3, [r7, #12]
   1aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aed4:	434b      	muls	r3, r1
   1aed6:	18d2      	adds	r2, r2, r3
   1aed8:	68fb      	ldr	r3, [r7, #12]
   1aeda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1aedc:	68fb      	ldr	r3, [r7, #12]
   1aede:	2244      	movs	r2, #68	; 0x44
   1aee0:	21ff      	movs	r1, #255	; 0xff
   1aee2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1aee4:	68fb      	ldr	r3, [r7, #12]
   1aee6:	2245      	movs	r2, #69	; 0x45
   1aee8:	21ff      	movs	r1, #255	; 0xff
   1aeea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1aeec:	683b      	ldr	r3, [r7, #0]
   1aeee:	2b00      	cmp	r3, #0
   1aef0:	d10d      	bne.n	1af0e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aef2:	68fb      	ldr	r3, [r7, #12]
   1aef4:	691b      	ldr	r3, [r3, #16]
   1aef6:	2b00      	cmp	r3, #0
   1aef8:	d013      	beq.n	1af22 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aefa:	68fb      	ldr	r3, [r7, #12]
   1aefc:	3310      	adds	r3, #16
   1aefe:	0018      	movs	r0, r3
   1af00:	4b0c      	ldr	r3, [pc, #48]	; (1af34 <xQueueGenericReset+0xac>)
   1af02:	4798      	blx	r3
   1af04:	1e03      	subs	r3, r0, #0
   1af06:	d00c      	beq.n	1af22 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1af08:	4b0b      	ldr	r3, [pc, #44]	; (1af38 <xQueueGenericReset+0xb0>)
   1af0a:	4798      	blx	r3
   1af0c:	e009      	b.n	1af22 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1af0e:	68fb      	ldr	r3, [r7, #12]
   1af10:	3310      	adds	r3, #16
   1af12:	0018      	movs	r0, r3
   1af14:	4b09      	ldr	r3, [pc, #36]	; (1af3c <xQueueGenericReset+0xb4>)
   1af16:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1af18:	68fb      	ldr	r3, [r7, #12]
   1af1a:	3324      	adds	r3, #36	; 0x24
   1af1c:	0018      	movs	r0, r3
   1af1e:	4b07      	ldr	r3, [pc, #28]	; (1af3c <xQueueGenericReset+0xb4>)
   1af20:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1af22:	4b07      	ldr	r3, [pc, #28]	; (1af40 <xQueueGenericReset+0xb8>)
   1af24:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1af26:	2301      	movs	r3, #1
}
   1af28:	0018      	movs	r0, r3
   1af2a:	46bd      	mov	sp, r7
   1af2c:	b004      	add	sp, #16
   1af2e:	bd80      	pop	{r7, pc}
   1af30:	0001ac59 	.word	0x0001ac59
   1af34:	0001d4e9 	.word	0x0001d4e9
   1af38:	0001ac41 	.word	0x0001ac41
   1af3c:	0001a9c9 	.word	0x0001a9c9
   1af40:	0001ac7d 	.word	0x0001ac7d

0001af44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1af44:	b590      	push	{r4, r7, lr}
   1af46:	b08b      	sub	sp, #44	; 0x2c
   1af48:	af02      	add	r7, sp, #8
   1af4a:	60f8      	str	r0, [r7, #12]
   1af4c:	60b9      	str	r1, [r7, #8]
   1af4e:	1dfb      	adds	r3, r7, #7
   1af50:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1af52:	68fb      	ldr	r3, [r7, #12]
   1af54:	2b00      	cmp	r3, #0
   1af56:	d101      	bne.n	1af5c <xQueueGenericCreate+0x18>
   1af58:	b672      	cpsid	i
   1af5a:	e7fe      	b.n	1af5a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1af5c:	68bb      	ldr	r3, [r7, #8]
   1af5e:	2b00      	cmp	r3, #0
   1af60:	d102      	bne.n	1af68 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1af62:	2300      	movs	r3, #0
   1af64:	61fb      	str	r3, [r7, #28]
   1af66:	e003      	b.n	1af70 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af68:	68fb      	ldr	r3, [r7, #12]
   1af6a:	68ba      	ldr	r2, [r7, #8]
   1af6c:	4353      	muls	r3, r2
   1af6e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1af70:	69fb      	ldr	r3, [r7, #28]
   1af72:	3354      	adds	r3, #84	; 0x54
   1af74:	0018      	movs	r0, r3
   1af76:	4b19      	ldr	r3, [pc, #100]	; (1afdc <xQueueGenericCreate+0x98>)
   1af78:	4798      	blx	r3
   1af7a:	0003      	movs	r3, r0
   1af7c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1af7e:	69bb      	ldr	r3, [r7, #24]
   1af80:	2b00      	cmp	r3, #0
   1af82:	d00d      	beq.n	1afa0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1af84:	69bb      	ldr	r3, [r7, #24]
   1af86:	3354      	adds	r3, #84	; 0x54
   1af88:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1af8a:	1dfb      	adds	r3, r7, #7
   1af8c:	781c      	ldrb	r4, [r3, #0]
   1af8e:	697a      	ldr	r2, [r7, #20]
   1af90:	68b9      	ldr	r1, [r7, #8]
   1af92:	68f8      	ldr	r0, [r7, #12]
   1af94:	69bb      	ldr	r3, [r7, #24]
   1af96:	9300      	str	r3, [sp, #0]
   1af98:	0023      	movs	r3, r4
   1af9a:	4c11      	ldr	r4, [pc, #68]	; (1afe0 <xQueueGenericCreate+0x9c>)
   1af9c:	47a0      	blx	r4
   1af9e:	e017      	b.n	1afd0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1afa0:	4b10      	ldr	r3, [pc, #64]	; (1afe4 <xQueueGenericCreate+0xa0>)
   1afa2:	4798      	blx	r3
   1afa4:	0003      	movs	r3, r0
   1afa6:	0018      	movs	r0, r3
   1afa8:	4b0f      	ldr	r3, [pc, #60]	; (1afe8 <xQueueGenericCreate+0xa4>)
   1afaa:	4798      	blx	r3
   1afac:	0003      	movs	r3, r0
   1afae:	001a      	movs	r2, r3
   1afb0:	4b0e      	ldr	r3, [pc, #56]	; (1afec <xQueueGenericCreate+0xa8>)
   1afb2:	881b      	ldrh	r3, [r3, #0]
   1afb4:	4013      	ands	r3, r2
   1afb6:	b29b      	uxth	r3, r3
   1afb8:	2b00      	cmp	r3, #0
   1afba:	d009      	beq.n	1afd0 <xQueueGenericCreate+0x8c>
   1afbc:	1dfb      	adds	r3, r7, #7
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	4a0b      	ldr	r2, [pc, #44]	; (1aff0 <xQueueGenericCreate+0xac>)
   1afc2:	5cd3      	ldrb	r3, [r2, r3]
   1afc4:	3340      	adds	r3, #64	; 0x40
   1afc6:	b2db      	uxtb	r3, r3
   1afc8:	2100      	movs	r1, #0
   1afca:	0018      	movs	r0, r3
   1afcc:	4b09      	ldr	r3, [pc, #36]	; (1aff4 <xQueueGenericCreate+0xb0>)
   1afce:	4798      	blx	r3
		}

		return pxNewQueue;
   1afd0:	69bb      	ldr	r3, [r7, #24]
	}
   1afd2:	0018      	movs	r0, r3
   1afd4:	46bd      	mov	sp, r7
   1afd6:	b009      	add	sp, #36	; 0x24
   1afd8:	bd90      	pop	{r4, r7, pc}
   1afda:	46c0      	nop			; (mov r8, r8)
   1afdc:	0001ad91 	.word	0x0001ad91
   1afe0:	0001aff9 	.word	0x0001aff9
   1afe4:	00018eed 	.word	0x00018eed
   1afe8:	00018c51 	.word	0x00018c51
   1afec:	20000110 	.word	0x20000110
   1aff0:	20000104 	.word	0x20000104
   1aff4:	00019951 	.word	0x00019951

0001aff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1aff8:	b5b0      	push	{r4, r5, r7, lr}
   1affa:	b084      	sub	sp, #16
   1affc:	af00      	add	r7, sp, #0
   1affe:	60f8      	str	r0, [r7, #12]
   1b000:	60b9      	str	r1, [r7, #8]
   1b002:	607a      	str	r2, [r7, #4]
   1b004:	001a      	movs	r2, r3
   1b006:	1cfb      	adds	r3, r7, #3
   1b008:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b00a:	68bb      	ldr	r3, [r7, #8]
   1b00c:	2b00      	cmp	r3, #0
   1b00e:	d103      	bne.n	1b018 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b010:	6a3b      	ldr	r3, [r7, #32]
   1b012:	6a3a      	ldr	r2, [r7, #32]
   1b014:	601a      	str	r2, [r3, #0]
   1b016:	e002      	b.n	1b01e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b018:	6a3b      	ldr	r3, [r7, #32]
   1b01a:	687a      	ldr	r2, [r7, #4]
   1b01c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b01e:	6a3b      	ldr	r3, [r7, #32]
   1b020:	68fa      	ldr	r2, [r7, #12]
   1b022:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b024:	6a3b      	ldr	r3, [r7, #32]
   1b026:	68ba      	ldr	r2, [r7, #8]
   1b028:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b02a:	6a3b      	ldr	r3, [r7, #32]
   1b02c:	2101      	movs	r1, #1
   1b02e:	0018      	movs	r0, r3
   1b030:	4b41      	ldr	r3, [pc, #260]	; (1b138 <prvInitialiseNewQueue+0x140>)
   1b032:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b034:	6a3b      	ldr	r3, [r7, #32]
   1b036:	1cfa      	adds	r2, r7, #3
   1b038:	2150      	movs	r1, #80	; 0x50
   1b03a:	7812      	ldrb	r2, [r2, #0]
   1b03c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b03e:	6a3b      	ldr	r3, [r7, #32]
   1b040:	2200      	movs	r2, #0
   1b042:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b044:	6a3b      	ldr	r3, [r7, #32]
   1b046:	0018      	movs	r0, r3
   1b048:	4b3c      	ldr	r3, [pc, #240]	; (1b13c <prvInitialiseNewQueue+0x144>)
   1b04a:	4798      	blx	r3
   1b04c:	0003      	movs	r3, r0
   1b04e:	001a      	movs	r2, r3
   1b050:	4b3b      	ldr	r3, [pc, #236]	; (1b140 <prvInitialiseNewQueue+0x148>)
   1b052:	5c9b      	ldrb	r3, [r3, r2]
   1b054:	0018      	movs	r0, r3
   1b056:	4b3b      	ldr	r3, [pc, #236]	; (1b144 <prvInitialiseNewQueue+0x14c>)
   1b058:	4798      	blx	r3
   1b05a:	0003      	movs	r3, r0
   1b05c:	b29a      	uxth	r2, r3
   1b05e:	6a3b      	ldr	r3, [r7, #32]
   1b060:	0011      	movs	r1, r2
   1b062:	0018      	movs	r0, r3
   1b064:	4b38      	ldr	r3, [pc, #224]	; (1b148 <prvInitialiseNewQueue+0x150>)
   1b066:	4798      	blx	r3
   1b068:	4b38      	ldr	r3, [pc, #224]	; (1b14c <prvInitialiseNewQueue+0x154>)
   1b06a:	881a      	ldrh	r2, [r3, #0]
   1b06c:	6a3b      	ldr	r3, [r7, #32]
   1b06e:	0011      	movs	r1, r2
   1b070:	0018      	movs	r0, r3
   1b072:	4b37      	ldr	r3, [pc, #220]	; (1b150 <prvInitialiseNewQueue+0x158>)
   1b074:	4798      	blx	r3
   1b076:	6a3b      	ldr	r3, [r7, #32]
   1b078:	0018      	movs	r0, r3
   1b07a:	4b30      	ldr	r3, [pc, #192]	; (1b13c <prvInitialiseNewQueue+0x144>)
   1b07c:	4798      	blx	r3
   1b07e:	0003      	movs	r3, r0
   1b080:	001a      	movs	r2, r3
   1b082:	4b2f      	ldr	r3, [pc, #188]	; (1b140 <prvInitialiseNewQueue+0x148>)
   1b084:	5c9c      	ldrb	r4, [r3, r2]
   1b086:	6a3b      	ldr	r3, [r7, #32]
   1b088:	0018      	movs	r0, r3
   1b08a:	4b32      	ldr	r3, [pc, #200]	; (1b154 <prvInitialiseNewQueue+0x15c>)
   1b08c:	4798      	blx	r3
   1b08e:	0003      	movs	r3, r0
   1b090:	b2db      	uxtb	r3, r3
   1b092:	0019      	movs	r1, r3
   1b094:	0020      	movs	r0, r4
   1b096:	4b30      	ldr	r3, [pc, #192]	; (1b158 <prvInitialiseNewQueue+0x160>)
   1b098:	4798      	blx	r3
   1b09a:	4b30      	ldr	r3, [pc, #192]	; (1b15c <prvInitialiseNewQueue+0x164>)
   1b09c:	4798      	blx	r3
   1b09e:	0003      	movs	r3, r0
   1b0a0:	0018      	movs	r0, r3
   1b0a2:	4b2f      	ldr	r3, [pc, #188]	; (1b160 <prvInitialiseNewQueue+0x168>)
   1b0a4:	4798      	blx	r3
   1b0a6:	0003      	movs	r3, r0
   1b0a8:	001a      	movs	r2, r3
   1b0aa:	4b2e      	ldr	r3, [pc, #184]	; (1b164 <prvInitialiseNewQueue+0x16c>)
   1b0ac:	881b      	ldrh	r3, [r3, #0]
   1b0ae:	4013      	ands	r3, r2
   1b0b0:	b29b      	uxth	r3, r3
   1b0b2:	2b00      	cmp	r3, #0
   1b0b4:	d029      	beq.n	1b10a <prvInitialiseNewQueue+0x112>
   1b0b6:	6a3b      	ldr	r3, [r7, #32]
   1b0b8:	0018      	movs	r0, r3
   1b0ba:	4b2b      	ldr	r3, [pc, #172]	; (1b168 <prvInitialiseNewQueue+0x170>)
   1b0bc:	4798      	blx	r3
   1b0be:	0003      	movs	r3, r0
   1b0c0:	001a      	movs	r2, r3
   1b0c2:	4b28      	ldr	r3, [pc, #160]	; (1b164 <prvInitialiseNewQueue+0x16c>)
   1b0c4:	881b      	ldrh	r3, [r3, #0]
   1b0c6:	4013      	ands	r3, r2
   1b0c8:	b29b      	uxth	r3, r3
   1b0ca:	2b00      	cmp	r3, #0
   1b0cc:	d01d      	beq.n	1b10a <prvInitialiseNewQueue+0x112>
   1b0ce:	6a3b      	ldr	r3, [r7, #32]
   1b0d0:	0018      	movs	r0, r3
   1b0d2:	4b1a      	ldr	r3, [pc, #104]	; (1b13c <prvInitialiseNewQueue+0x144>)
   1b0d4:	4798      	blx	r3
   1b0d6:	0003      	movs	r3, r0
   1b0d8:	001a      	movs	r2, r3
   1b0da:	4b19      	ldr	r3, [pc, #100]	; (1b140 <prvInitialiseNewQueue+0x148>)
   1b0dc:	5c9b      	ldrb	r3, [r3, r2]
   1b0de:	3318      	adds	r3, #24
   1b0e0:	b2db      	uxtb	r3, r3
   1b0e2:	001d      	movs	r5, r3
   1b0e4:	6a3b      	ldr	r3, [r7, #32]
   1b0e6:	0018      	movs	r0, r3
   1b0e8:	4b14      	ldr	r3, [pc, #80]	; (1b13c <prvInitialiseNewQueue+0x144>)
   1b0ea:	4798      	blx	r3
   1b0ec:	0003      	movs	r3, r0
   1b0ee:	001a      	movs	r2, r3
   1b0f0:	4b13      	ldr	r3, [pc, #76]	; (1b140 <prvInitialiseNewQueue+0x148>)
   1b0f2:	5c9c      	ldrb	r4, [r3, r2]
   1b0f4:	6a3b      	ldr	r3, [r7, #32]
   1b0f6:	0018      	movs	r0, r3
   1b0f8:	4b16      	ldr	r3, [pc, #88]	; (1b154 <prvInitialiseNewQueue+0x15c>)
   1b0fa:	4798      	blx	r3
   1b0fc:	0003      	movs	r3, r0
   1b0fe:	b2db      	uxtb	r3, r3
   1b100:	001a      	movs	r2, r3
   1b102:	0021      	movs	r1, r4
   1b104:	0028      	movs	r0, r5
   1b106:	4b19      	ldr	r3, [pc, #100]	; (1b16c <prvInitialiseNewQueue+0x174>)
   1b108:	4798      	blx	r3
   1b10a:	6a3b      	ldr	r3, [r7, #32]
   1b10c:	0018      	movs	r0, r3
   1b10e:	4b0b      	ldr	r3, [pc, #44]	; (1b13c <prvInitialiseNewQueue+0x144>)
   1b110:	4798      	blx	r3
   1b112:	0003      	movs	r3, r0
   1b114:	001a      	movs	r2, r3
   1b116:	4b0a      	ldr	r3, [pc, #40]	; (1b140 <prvInitialiseNewQueue+0x148>)
   1b118:	5c9c      	ldrb	r4, [r3, r2]
   1b11a:	6a3b      	ldr	r3, [r7, #32]
   1b11c:	0018      	movs	r0, r3
   1b11e:	4b0d      	ldr	r3, [pc, #52]	; (1b154 <prvInitialiseNewQueue+0x15c>)
   1b120:	4798      	blx	r3
   1b122:	0003      	movs	r3, r0
   1b124:	b2db      	uxtb	r3, r3
   1b126:	2200      	movs	r2, #0
   1b128:	0019      	movs	r1, r3
   1b12a:	0020      	movs	r0, r4
   1b12c:	4b10      	ldr	r3, [pc, #64]	; (1b170 <prvInitialiseNewQueue+0x178>)
   1b12e:	4798      	blx	r3
}
   1b130:	46c0      	nop			; (mov r8, r8)
   1b132:	46bd      	mov	sp, r7
   1b134:	b004      	add	sp, #16
   1b136:	bdb0      	pop	{r4, r5, r7, pc}
   1b138:	0001ae89 	.word	0x0001ae89
   1b13c:	00018c11 	.word	0x00018c11
   1b140:	20000104 	.word	0x20000104
   1b144:	0001a1d1 	.word	0x0001a1d1
   1b148:	00018d35 	.word	0x00018d35
   1b14c:	20000112 	.word	0x20000112
   1b150:	00018d71 	.word	0x00018d71
   1b154:	00018cf1 	.word	0x00018cf1
   1b158:	0001a369 	.word	0x0001a369
   1b15c:	00018eed 	.word	0x00018eed
   1b160:	00018c51 	.word	0x00018c51
   1b164:	20000110 	.word	0x20000110
   1b168:	00018d11 	.word	0x00018d11
   1b16c:	00019649 	.word	0x00019649
   1b170:	00019ca5 	.word	0x00019ca5

0001b174 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b174:	b590      	push	{r4, r7, lr}
   1b176:	b083      	sub	sp, #12
   1b178:	af00      	add	r7, sp, #0
   1b17a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b17c:	687b      	ldr	r3, [r7, #4]
   1b17e:	2b00      	cmp	r3, #0
   1b180:	d00e      	beq.n	1b1a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b182:	687b      	ldr	r3, [r7, #4]
   1b184:	2200      	movs	r2, #0
   1b186:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b188:	687b      	ldr	r3, [r7, #4]
   1b18a:	2200      	movs	r2, #0
   1b18c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b18e:	687b      	ldr	r3, [r7, #4]
   1b190:	2200      	movs	r2, #0
   1b192:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b194:	6878      	ldr	r0, [r7, #4]
   1b196:	2300      	movs	r3, #0
   1b198:	2200      	movs	r2, #0
   1b19a:	2100      	movs	r1, #0
   1b19c:	4c02      	ldr	r4, [pc, #8]	; (1b1a8 <prvInitialiseMutex+0x34>)
   1b19e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b1a0:	46c0      	nop			; (mov r8, r8)
   1b1a2:	46bd      	mov	sp, r7
   1b1a4:	b003      	add	sp, #12
   1b1a6:	bd90      	pop	{r4, r7, pc}
   1b1a8:	0001b1ed 	.word	0x0001b1ed

0001b1ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b1ac:	b580      	push	{r7, lr}
   1b1ae:	b086      	sub	sp, #24
   1b1b0:	af00      	add	r7, sp, #0
   1b1b2:	0002      	movs	r2, r0
   1b1b4:	1dfb      	adds	r3, r7, #7
   1b1b6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b1b8:	2301      	movs	r3, #1
   1b1ba:	617b      	str	r3, [r7, #20]
   1b1bc:	2300      	movs	r3, #0
   1b1be:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b1c0:	1dfb      	adds	r3, r7, #7
   1b1c2:	781a      	ldrb	r2, [r3, #0]
   1b1c4:	6939      	ldr	r1, [r7, #16]
   1b1c6:	697b      	ldr	r3, [r7, #20]
   1b1c8:	0018      	movs	r0, r3
   1b1ca:	4b06      	ldr	r3, [pc, #24]	; (1b1e4 <xQueueCreateMutex+0x38>)
   1b1cc:	4798      	blx	r3
   1b1ce:	0003      	movs	r3, r0
   1b1d0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b1d2:	68fb      	ldr	r3, [r7, #12]
   1b1d4:	0018      	movs	r0, r3
   1b1d6:	4b04      	ldr	r3, [pc, #16]	; (1b1e8 <xQueueCreateMutex+0x3c>)
   1b1d8:	4798      	blx	r3

		return pxNewQueue;
   1b1da:	68fb      	ldr	r3, [r7, #12]
	}
   1b1dc:	0018      	movs	r0, r3
   1b1de:	46bd      	mov	sp, r7
   1b1e0:	b006      	add	sp, #24
   1b1e2:	bd80      	pop	{r7, pc}
   1b1e4:	0001af45 	.word	0x0001af45
   1b1e8:	0001b175 	.word	0x0001b175

0001b1ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b1ec:	b5b0      	push	{r4, r5, r7, lr}
   1b1ee:	b08a      	sub	sp, #40	; 0x28
   1b1f0:	af00      	add	r7, sp, #0
   1b1f2:	60f8      	str	r0, [r7, #12]
   1b1f4:	60b9      	str	r1, [r7, #8]
   1b1f6:	607a      	str	r2, [r7, #4]
   1b1f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b1fe:	68fb      	ldr	r3, [r7, #12]
   1b200:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b202:	6a3b      	ldr	r3, [r7, #32]
   1b204:	2b00      	cmp	r3, #0
   1b206:	d101      	bne.n	1b20c <xQueueGenericSend+0x20>
   1b208:	b672      	cpsid	i
   1b20a:	e7fe      	b.n	1b20a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b20c:	68bb      	ldr	r3, [r7, #8]
   1b20e:	2b00      	cmp	r3, #0
   1b210:	d103      	bne.n	1b21a <xQueueGenericSend+0x2e>
   1b212:	6a3b      	ldr	r3, [r7, #32]
   1b214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b216:	2b00      	cmp	r3, #0
   1b218:	d101      	bne.n	1b21e <xQueueGenericSend+0x32>
   1b21a:	2301      	movs	r3, #1
   1b21c:	e000      	b.n	1b220 <xQueueGenericSend+0x34>
   1b21e:	2300      	movs	r3, #0
   1b220:	2b00      	cmp	r3, #0
   1b222:	d101      	bne.n	1b228 <xQueueGenericSend+0x3c>
   1b224:	b672      	cpsid	i
   1b226:	e7fe      	b.n	1b226 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b228:	683b      	ldr	r3, [r7, #0]
   1b22a:	2b02      	cmp	r3, #2
   1b22c:	d103      	bne.n	1b236 <xQueueGenericSend+0x4a>
   1b22e:	6a3b      	ldr	r3, [r7, #32]
   1b230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b232:	2b01      	cmp	r3, #1
   1b234:	d101      	bne.n	1b23a <xQueueGenericSend+0x4e>
   1b236:	2301      	movs	r3, #1
   1b238:	e000      	b.n	1b23c <xQueueGenericSend+0x50>
   1b23a:	2300      	movs	r3, #0
   1b23c:	2b00      	cmp	r3, #0
   1b23e:	d101      	bne.n	1b244 <xQueueGenericSend+0x58>
   1b240:	b672      	cpsid	i
   1b242:	e7fe      	b.n	1b242 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b244:	4bbc      	ldr	r3, [pc, #752]	; (1b538 <xQueueGenericSend+0x34c>)
   1b246:	4798      	blx	r3
   1b248:	1e03      	subs	r3, r0, #0
   1b24a:	d102      	bne.n	1b252 <xQueueGenericSend+0x66>
   1b24c:	687b      	ldr	r3, [r7, #4]
   1b24e:	2b00      	cmp	r3, #0
   1b250:	d101      	bne.n	1b256 <xQueueGenericSend+0x6a>
   1b252:	2301      	movs	r3, #1
   1b254:	e000      	b.n	1b258 <xQueueGenericSend+0x6c>
   1b256:	2300      	movs	r3, #0
   1b258:	2b00      	cmp	r3, #0
   1b25a:	d101      	bne.n	1b260 <xQueueGenericSend+0x74>
   1b25c:	b672      	cpsid	i
   1b25e:	e7fe      	b.n	1b25e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b260:	4bb6      	ldr	r3, [pc, #728]	; (1b53c <xQueueGenericSend+0x350>)
   1b262:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b264:	6a3b      	ldr	r3, [r7, #32]
   1b266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b268:	6a3b      	ldr	r3, [r7, #32]
   1b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b26c:	429a      	cmp	r2, r3
   1b26e:	d303      	bcc.n	1b278 <xQueueGenericSend+0x8c>
   1b270:	683b      	ldr	r3, [r7, #0]
   1b272:	2b02      	cmp	r3, #2
   1b274:	d000      	beq.n	1b278 <xQueueGenericSend+0x8c>
   1b276:	e08e      	b.n	1b396 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b278:	4bb1      	ldr	r3, [pc, #708]	; (1b540 <xQueueGenericSend+0x354>)
   1b27a:	4798      	blx	r3
   1b27c:	0003      	movs	r3, r0
   1b27e:	0018      	movs	r0, r3
   1b280:	4bb0      	ldr	r3, [pc, #704]	; (1b544 <xQueueGenericSend+0x358>)
   1b282:	4798      	blx	r3
   1b284:	0003      	movs	r3, r0
   1b286:	001a      	movs	r2, r3
   1b288:	4baf      	ldr	r3, [pc, #700]	; (1b548 <xQueueGenericSend+0x35c>)
   1b28a:	881b      	ldrh	r3, [r3, #0]
   1b28c:	4013      	ands	r3, r2
   1b28e:	b29b      	uxth	r3, r3
   1b290:	2b00      	cmp	r3, #0
   1b292:	d02e      	beq.n	1b2f2 <xQueueGenericSend+0x106>
   1b294:	6a3b      	ldr	r3, [r7, #32]
   1b296:	0018      	movs	r0, r3
   1b298:	4bac      	ldr	r3, [pc, #688]	; (1b54c <xQueueGenericSend+0x360>)
   1b29a:	4798      	blx	r3
   1b29c:	0003      	movs	r3, r0
   1b29e:	001a      	movs	r2, r3
   1b2a0:	4ba9      	ldr	r3, [pc, #676]	; (1b548 <xQueueGenericSend+0x35c>)
   1b2a2:	881b      	ldrh	r3, [r3, #0]
   1b2a4:	4013      	ands	r3, r2
   1b2a6:	b29b      	uxth	r3, r3
   1b2a8:	2b00      	cmp	r3, #0
   1b2aa:	d022      	beq.n	1b2f2 <xQueueGenericSend+0x106>
   1b2ac:	683b      	ldr	r3, [r7, #0]
   1b2ae:	2b00      	cmp	r3, #0
   1b2b0:	d10b      	bne.n	1b2ca <xQueueGenericSend+0xde>
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4ba6      	ldr	r3, [pc, #664]	; (1b550 <xQueueGenericSend+0x364>)
   1b2b8:	4798      	blx	r3
   1b2ba:	0003      	movs	r3, r0
   1b2bc:	001a      	movs	r2, r3
   1b2be:	4ba5      	ldr	r3, [pc, #660]	; (1b554 <xQueueGenericSend+0x368>)
   1b2c0:	5c9b      	ldrb	r3, [r3, r2]
   1b2c2:	3320      	adds	r3, #32
   1b2c4:	b2db      	uxtb	r3, r3
   1b2c6:	001d      	movs	r5, r3
   1b2c8:	e000      	b.n	1b2cc <xQueueGenericSend+0xe0>
   1b2ca:	2525      	movs	r5, #37	; 0x25
   1b2cc:	6a3b      	ldr	r3, [r7, #32]
   1b2ce:	0018      	movs	r0, r3
   1b2d0:	4b9f      	ldr	r3, [pc, #636]	; (1b550 <xQueueGenericSend+0x364>)
   1b2d2:	4798      	blx	r3
   1b2d4:	0003      	movs	r3, r0
   1b2d6:	001a      	movs	r2, r3
   1b2d8:	4b9e      	ldr	r3, [pc, #632]	; (1b554 <xQueueGenericSend+0x368>)
   1b2da:	5c9c      	ldrb	r4, [r3, r2]
   1b2dc:	6a3b      	ldr	r3, [r7, #32]
   1b2de:	0018      	movs	r0, r3
   1b2e0:	4b9d      	ldr	r3, [pc, #628]	; (1b558 <xQueueGenericSend+0x36c>)
   1b2e2:	4798      	blx	r3
   1b2e4:	0003      	movs	r3, r0
   1b2e6:	b2db      	uxtb	r3, r3
   1b2e8:	001a      	movs	r2, r3
   1b2ea:	0021      	movs	r1, r4
   1b2ec:	0028      	movs	r0, r5
   1b2ee:	4b9b      	ldr	r3, [pc, #620]	; (1b55c <xQueueGenericSend+0x370>)
   1b2f0:	4798      	blx	r3
   1b2f2:	6a3b      	ldr	r3, [r7, #32]
   1b2f4:	0018      	movs	r0, r3
   1b2f6:	4b96      	ldr	r3, [pc, #600]	; (1b550 <xQueueGenericSend+0x364>)
   1b2f8:	4798      	blx	r3
   1b2fa:	0003      	movs	r3, r0
   1b2fc:	001a      	movs	r2, r3
   1b2fe:	4b95      	ldr	r3, [pc, #596]	; (1b554 <xQueueGenericSend+0x368>)
   1b300:	5c9c      	ldrb	r4, [r3, r2]
   1b302:	6a3b      	ldr	r3, [r7, #32]
   1b304:	0018      	movs	r0, r3
   1b306:	4b94      	ldr	r3, [pc, #592]	; (1b558 <xQueueGenericSend+0x36c>)
   1b308:	4798      	blx	r3
   1b30a:	0003      	movs	r3, r0
   1b30c:	b2dd      	uxtb	r5, r3
   1b30e:	6a3b      	ldr	r3, [r7, #32]
   1b310:	0018      	movs	r0, r3
   1b312:	4b8f      	ldr	r3, [pc, #572]	; (1b550 <xQueueGenericSend+0x364>)
   1b314:	4798      	blx	r3
   1b316:	0003      	movs	r3, r0
   1b318:	001a      	movs	r2, r3
   1b31a:	4b8e      	ldr	r3, [pc, #568]	; (1b554 <xQueueGenericSend+0x368>)
   1b31c:	5c9b      	ldrb	r3, [r3, r2]
   1b31e:	2b02      	cmp	r3, #2
   1b320:	d005      	beq.n	1b32e <xQueueGenericSend+0x142>
   1b322:	6a3b      	ldr	r3, [r7, #32]
   1b324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b326:	b2db      	uxtb	r3, r3
   1b328:	3301      	adds	r3, #1
   1b32a:	b2db      	uxtb	r3, r3
   1b32c:	e000      	b.n	1b330 <xQueueGenericSend+0x144>
   1b32e:	2300      	movs	r3, #0
   1b330:	001a      	movs	r2, r3
   1b332:	0029      	movs	r1, r5
   1b334:	0020      	movs	r0, r4
   1b336:	4b8a      	ldr	r3, [pc, #552]	; (1b560 <xQueueGenericSend+0x374>)
   1b338:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b33a:	683a      	ldr	r2, [r7, #0]
   1b33c:	68b9      	ldr	r1, [r7, #8]
   1b33e:	6a3b      	ldr	r3, [r7, #32]
   1b340:	0018      	movs	r0, r3
   1b342:	4b88      	ldr	r3, [pc, #544]	; (1b564 <xQueueGenericSend+0x378>)
   1b344:	4798      	blx	r3
   1b346:	0003      	movs	r3, r0
   1b348:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b34a:	6a3b      	ldr	r3, [r7, #32]
   1b34c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b34e:	2b00      	cmp	r3, #0
   1b350:	d00a      	beq.n	1b368 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b352:	683a      	ldr	r2, [r7, #0]
   1b354:	6a3b      	ldr	r3, [r7, #32]
   1b356:	0011      	movs	r1, r2
   1b358:	0018      	movs	r0, r3
   1b35a:	4b83      	ldr	r3, [pc, #524]	; (1b568 <xQueueGenericSend+0x37c>)
   1b35c:	4798      	blx	r3
   1b35e:	1e03      	subs	r3, r0, #0
   1b360:	d015      	beq.n	1b38e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b362:	4b82      	ldr	r3, [pc, #520]	; (1b56c <xQueueGenericSend+0x380>)
   1b364:	4798      	blx	r3
   1b366:	e012      	b.n	1b38e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b368:	6a3b      	ldr	r3, [r7, #32]
   1b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d009      	beq.n	1b384 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b370:	6a3b      	ldr	r3, [r7, #32]
   1b372:	3324      	adds	r3, #36	; 0x24
   1b374:	0018      	movs	r0, r3
   1b376:	4b7e      	ldr	r3, [pc, #504]	; (1b570 <xQueueGenericSend+0x384>)
   1b378:	4798      	blx	r3
   1b37a:	1e03      	subs	r3, r0, #0
   1b37c:	d007      	beq.n	1b38e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b37e:	4b7b      	ldr	r3, [pc, #492]	; (1b56c <xQueueGenericSend+0x380>)
   1b380:	4798      	blx	r3
   1b382:	e004      	b.n	1b38e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b384:	69fb      	ldr	r3, [r7, #28]
   1b386:	2b00      	cmp	r3, #0
   1b388:	d001      	beq.n	1b38e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b38a:	4b78      	ldr	r3, [pc, #480]	; (1b56c <xQueueGenericSend+0x380>)
   1b38c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b38e:	4b79      	ldr	r3, [pc, #484]	; (1b574 <xQueueGenericSend+0x388>)
   1b390:	4798      	blx	r3
				return pdPASS;
   1b392:	2301      	movs	r3, #1
   1b394:	e142      	b.n	1b61c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b396:	687b      	ldr	r3, [r7, #4]
   1b398:	2b00      	cmp	r3, #0
   1b39a:	d140      	bne.n	1b41e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b39c:	4b75      	ldr	r3, [pc, #468]	; (1b574 <xQueueGenericSend+0x388>)
   1b39e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b3a0:	4b67      	ldr	r3, [pc, #412]	; (1b540 <xQueueGenericSend+0x354>)
   1b3a2:	4798      	blx	r3
   1b3a4:	0003      	movs	r3, r0
   1b3a6:	0018      	movs	r0, r3
   1b3a8:	4b66      	ldr	r3, [pc, #408]	; (1b544 <xQueueGenericSend+0x358>)
   1b3aa:	4798      	blx	r3
   1b3ac:	0003      	movs	r3, r0
   1b3ae:	001a      	movs	r2, r3
   1b3b0:	4b65      	ldr	r3, [pc, #404]	; (1b548 <xQueueGenericSend+0x35c>)
   1b3b2:	881b      	ldrh	r3, [r3, #0]
   1b3b4:	4013      	ands	r3, r2
   1b3b6:	b29b      	uxth	r3, r3
   1b3b8:	2b00      	cmp	r3, #0
   1b3ba:	d02e      	beq.n	1b41a <xQueueGenericSend+0x22e>
   1b3bc:	6a3b      	ldr	r3, [r7, #32]
   1b3be:	0018      	movs	r0, r3
   1b3c0:	4b62      	ldr	r3, [pc, #392]	; (1b54c <xQueueGenericSend+0x360>)
   1b3c2:	4798      	blx	r3
   1b3c4:	0003      	movs	r3, r0
   1b3c6:	001a      	movs	r2, r3
   1b3c8:	4b5f      	ldr	r3, [pc, #380]	; (1b548 <xQueueGenericSend+0x35c>)
   1b3ca:	881b      	ldrh	r3, [r3, #0]
   1b3cc:	4013      	ands	r3, r2
   1b3ce:	b29b      	uxth	r3, r3
   1b3d0:	2b00      	cmp	r3, #0
   1b3d2:	d022      	beq.n	1b41a <xQueueGenericSend+0x22e>
   1b3d4:	683b      	ldr	r3, [r7, #0]
   1b3d6:	2b00      	cmp	r3, #0
   1b3d8:	d10b      	bne.n	1b3f2 <xQueueGenericSend+0x206>
   1b3da:	6a3b      	ldr	r3, [r7, #32]
   1b3dc:	0018      	movs	r0, r3
   1b3de:	4b5c      	ldr	r3, [pc, #368]	; (1b550 <xQueueGenericSend+0x364>)
   1b3e0:	4798      	blx	r3
   1b3e2:	0003      	movs	r3, r0
   1b3e4:	001a      	movs	r2, r3
   1b3e6:	4b5b      	ldr	r3, [pc, #364]	; (1b554 <xQueueGenericSend+0x368>)
   1b3e8:	5c9b      	ldrb	r3, [r3, r2]
   1b3ea:	3348      	adds	r3, #72	; 0x48
   1b3ec:	b2db      	uxtb	r3, r3
   1b3ee:	001d      	movs	r5, r3
   1b3f0:	e000      	b.n	1b3f4 <xQueueGenericSend+0x208>
   1b3f2:	254d      	movs	r5, #77	; 0x4d
   1b3f4:	6a3b      	ldr	r3, [r7, #32]
   1b3f6:	0018      	movs	r0, r3
   1b3f8:	4b55      	ldr	r3, [pc, #340]	; (1b550 <xQueueGenericSend+0x364>)
   1b3fa:	4798      	blx	r3
   1b3fc:	0003      	movs	r3, r0
   1b3fe:	001a      	movs	r2, r3
   1b400:	4b54      	ldr	r3, [pc, #336]	; (1b554 <xQueueGenericSend+0x368>)
   1b402:	5c9c      	ldrb	r4, [r3, r2]
   1b404:	6a3b      	ldr	r3, [r7, #32]
   1b406:	0018      	movs	r0, r3
   1b408:	4b53      	ldr	r3, [pc, #332]	; (1b558 <xQueueGenericSend+0x36c>)
   1b40a:	4798      	blx	r3
   1b40c:	0003      	movs	r3, r0
   1b40e:	b2db      	uxtb	r3, r3
   1b410:	001a      	movs	r2, r3
   1b412:	0021      	movs	r1, r4
   1b414:	0028      	movs	r0, r5
   1b416:	4b51      	ldr	r3, [pc, #324]	; (1b55c <xQueueGenericSend+0x370>)
   1b418:	4798      	blx	r3
					return errQUEUE_FULL;
   1b41a:	2300      	movs	r3, #0
   1b41c:	e0fe      	b.n	1b61c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b420:	2b00      	cmp	r3, #0
   1b422:	d106      	bne.n	1b432 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b424:	2314      	movs	r3, #20
   1b426:	18fb      	adds	r3, r7, r3
   1b428:	0018      	movs	r0, r3
   1b42a:	4b53      	ldr	r3, [pc, #332]	; (1b578 <xQueueGenericSend+0x38c>)
   1b42c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b42e:	2301      	movs	r3, #1
   1b430:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b432:	4b50      	ldr	r3, [pc, #320]	; (1b574 <xQueueGenericSend+0x388>)
   1b434:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b436:	4b51      	ldr	r3, [pc, #324]	; (1b57c <xQueueGenericSend+0x390>)
   1b438:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b43a:	4b40      	ldr	r3, [pc, #256]	; (1b53c <xQueueGenericSend+0x350>)
   1b43c:	4798      	blx	r3
   1b43e:	6a3b      	ldr	r3, [r7, #32]
   1b440:	2244      	movs	r2, #68	; 0x44
   1b442:	5c9b      	ldrb	r3, [r3, r2]
   1b444:	b25b      	sxtb	r3, r3
   1b446:	3301      	adds	r3, #1
   1b448:	d103      	bne.n	1b452 <xQueueGenericSend+0x266>
   1b44a:	6a3b      	ldr	r3, [r7, #32]
   1b44c:	2244      	movs	r2, #68	; 0x44
   1b44e:	2100      	movs	r1, #0
   1b450:	5499      	strb	r1, [r3, r2]
   1b452:	6a3b      	ldr	r3, [r7, #32]
   1b454:	2245      	movs	r2, #69	; 0x45
   1b456:	5c9b      	ldrb	r3, [r3, r2]
   1b458:	b25b      	sxtb	r3, r3
   1b45a:	3301      	adds	r3, #1
   1b45c:	d103      	bne.n	1b466 <xQueueGenericSend+0x27a>
   1b45e:	6a3b      	ldr	r3, [r7, #32]
   1b460:	2245      	movs	r2, #69	; 0x45
   1b462:	2100      	movs	r1, #0
   1b464:	5499      	strb	r1, [r3, r2]
   1b466:	4b43      	ldr	r3, [pc, #268]	; (1b574 <xQueueGenericSend+0x388>)
   1b468:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b46a:	1d3a      	adds	r2, r7, #4
   1b46c:	2314      	movs	r3, #20
   1b46e:	18fb      	adds	r3, r7, r3
   1b470:	0011      	movs	r1, r2
   1b472:	0018      	movs	r0, r3
   1b474:	4b42      	ldr	r3, [pc, #264]	; (1b580 <xQueueGenericSend+0x394>)
   1b476:	4798      	blx	r3
   1b478:	1e03      	subs	r3, r0, #0
   1b47a:	d000      	beq.n	1b47e <xQueueGenericSend+0x292>
   1b47c:	e08a      	b.n	1b594 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b47e:	6a3b      	ldr	r3, [r7, #32]
   1b480:	0018      	movs	r0, r3
   1b482:	4b40      	ldr	r3, [pc, #256]	; (1b584 <xQueueGenericSend+0x398>)
   1b484:	4798      	blx	r3
   1b486:	1e03      	subs	r3, r0, #0
   1b488:	d04f      	beq.n	1b52a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b48a:	4b2d      	ldr	r3, [pc, #180]	; (1b540 <xQueueGenericSend+0x354>)
   1b48c:	4798      	blx	r3
   1b48e:	0003      	movs	r3, r0
   1b490:	0018      	movs	r0, r3
   1b492:	4b2c      	ldr	r3, [pc, #176]	; (1b544 <xQueueGenericSend+0x358>)
   1b494:	4798      	blx	r3
   1b496:	0003      	movs	r3, r0
   1b498:	001a      	movs	r2, r3
   1b49a:	4b2b      	ldr	r3, [pc, #172]	; (1b548 <xQueueGenericSend+0x35c>)
   1b49c:	881b      	ldrh	r3, [r3, #0]
   1b49e:	4013      	ands	r3, r2
   1b4a0:	b29b      	uxth	r3, r3
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d02e      	beq.n	1b504 <xQueueGenericSend+0x318>
   1b4a6:	6a3b      	ldr	r3, [r7, #32]
   1b4a8:	0018      	movs	r0, r3
   1b4aa:	4b28      	ldr	r3, [pc, #160]	; (1b54c <xQueueGenericSend+0x360>)
   1b4ac:	4798      	blx	r3
   1b4ae:	0003      	movs	r3, r0
   1b4b0:	001a      	movs	r2, r3
   1b4b2:	4b25      	ldr	r3, [pc, #148]	; (1b548 <xQueueGenericSend+0x35c>)
   1b4b4:	881b      	ldrh	r3, [r3, #0]
   1b4b6:	4013      	ands	r3, r2
   1b4b8:	b29b      	uxth	r3, r3
   1b4ba:	2b00      	cmp	r3, #0
   1b4bc:	d022      	beq.n	1b504 <xQueueGenericSend+0x318>
   1b4be:	683b      	ldr	r3, [r7, #0]
   1b4c0:	2b00      	cmp	r3, #0
   1b4c2:	d10b      	bne.n	1b4dc <xQueueGenericSend+0x2f0>
   1b4c4:	6a3b      	ldr	r3, [r7, #32]
   1b4c6:	0018      	movs	r0, r3
   1b4c8:	4b21      	ldr	r3, [pc, #132]	; (1b550 <xQueueGenericSend+0x364>)
   1b4ca:	4798      	blx	r3
   1b4cc:	0003      	movs	r3, r0
   1b4ce:	001a      	movs	r2, r3
   1b4d0:	4b20      	ldr	r3, [pc, #128]	; (1b554 <xQueueGenericSend+0x368>)
   1b4d2:	5c9b      	ldrb	r3, [r3, r2]
   1b4d4:	3370      	adds	r3, #112	; 0x70
   1b4d6:	b2db      	uxtb	r3, r3
   1b4d8:	001d      	movs	r5, r3
   1b4da:	e000      	b.n	1b4de <xQueueGenericSend+0x2f2>
   1b4dc:	2575      	movs	r5, #117	; 0x75
   1b4de:	6a3b      	ldr	r3, [r7, #32]
   1b4e0:	0018      	movs	r0, r3
   1b4e2:	4b1b      	ldr	r3, [pc, #108]	; (1b550 <xQueueGenericSend+0x364>)
   1b4e4:	4798      	blx	r3
   1b4e6:	0003      	movs	r3, r0
   1b4e8:	001a      	movs	r2, r3
   1b4ea:	4b1a      	ldr	r3, [pc, #104]	; (1b554 <xQueueGenericSend+0x368>)
   1b4ec:	5c9c      	ldrb	r4, [r3, r2]
   1b4ee:	6a3b      	ldr	r3, [r7, #32]
   1b4f0:	0018      	movs	r0, r3
   1b4f2:	4b19      	ldr	r3, [pc, #100]	; (1b558 <xQueueGenericSend+0x36c>)
   1b4f4:	4798      	blx	r3
   1b4f6:	0003      	movs	r3, r0
   1b4f8:	b2db      	uxtb	r3, r3
   1b4fa:	001a      	movs	r2, r3
   1b4fc:	0021      	movs	r1, r4
   1b4fe:	0028      	movs	r0, r5
   1b500:	4b16      	ldr	r3, [pc, #88]	; (1b55c <xQueueGenericSend+0x370>)
   1b502:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b504:	6a3b      	ldr	r3, [r7, #32]
   1b506:	3310      	adds	r3, #16
   1b508:	687a      	ldr	r2, [r7, #4]
   1b50a:	0011      	movs	r1, r2
   1b50c:	0018      	movs	r0, r3
   1b50e:	4b1e      	ldr	r3, [pc, #120]	; (1b588 <xQueueGenericSend+0x39c>)
   1b510:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b512:	6a3b      	ldr	r3, [r7, #32]
   1b514:	0018      	movs	r0, r3
   1b516:	4b1d      	ldr	r3, [pc, #116]	; (1b58c <xQueueGenericSend+0x3a0>)
   1b518:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b51a:	4b1d      	ldr	r3, [pc, #116]	; (1b590 <xQueueGenericSend+0x3a4>)
   1b51c:	4798      	blx	r3
   1b51e:	1e03      	subs	r3, r0, #0
   1b520:	d000      	beq.n	1b524 <xQueueGenericSend+0x338>
   1b522:	e69d      	b.n	1b260 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b524:	4b11      	ldr	r3, [pc, #68]	; (1b56c <xQueueGenericSend+0x380>)
   1b526:	4798      	blx	r3
   1b528:	e69a      	b.n	1b260 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b52a:	6a3b      	ldr	r3, [r7, #32]
   1b52c:	0018      	movs	r0, r3
   1b52e:	4b17      	ldr	r3, [pc, #92]	; (1b58c <xQueueGenericSend+0x3a0>)
   1b530:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b532:	4b17      	ldr	r3, [pc, #92]	; (1b590 <xQueueGenericSend+0x3a4>)
   1b534:	4798      	blx	r3
   1b536:	e693      	b.n	1b260 <xQueueGenericSend+0x74>
   1b538:	0001d979 	.word	0x0001d979
   1b53c:	0001ac59 	.word	0x0001ac59
   1b540:	00018eed 	.word	0x00018eed
   1b544:	00018c51 	.word	0x00018c51
   1b548:	20000110 	.word	0x20000110
   1b54c:	00018d11 	.word	0x00018d11
   1b550:	00018c11 	.word	0x00018c11
   1b554:	20000104 	.word	0x20000104
   1b558:	00018cf1 	.word	0x00018cf1
   1b55c:	00019649 	.word	0x00019649
   1b560:	00019ca5 	.word	0x00019ca5
   1b564:	0001c425 	.word	0x0001c425
   1b568:	0001c729 	.word	0x0001c729
   1b56c:	0001ac41 	.word	0x0001ac41
   1b570:	0001d4e9 	.word	0x0001d4e9
   1b574:	0001ac7d 	.word	0x0001ac7d
   1b578:	0001d629 	.word	0x0001d629
   1b57c:	0001cf11 	.word	0x0001cf11
   1b580:	0001d651 	.word	0x0001d651
   1b584:	0001c679 	.word	0x0001c679
   1b588:	0001d3c5 	.word	0x0001d3c5
   1b58c:	0001c555 	.word	0x0001c555
   1b590:	0001cf29 	.word	0x0001cf29
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b594:	6a3b      	ldr	r3, [r7, #32]
   1b596:	0018      	movs	r0, r3
   1b598:	4b22      	ldr	r3, [pc, #136]	; (1b624 <xQueueGenericSend+0x438>)
   1b59a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b59c:	4b22      	ldr	r3, [pc, #136]	; (1b628 <xQueueGenericSend+0x43c>)
   1b59e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b5a0:	4b22      	ldr	r3, [pc, #136]	; (1b62c <xQueueGenericSend+0x440>)
   1b5a2:	4798      	blx	r3
   1b5a4:	0003      	movs	r3, r0
   1b5a6:	0018      	movs	r0, r3
   1b5a8:	4b21      	ldr	r3, [pc, #132]	; (1b630 <xQueueGenericSend+0x444>)
   1b5aa:	4798      	blx	r3
   1b5ac:	0003      	movs	r3, r0
   1b5ae:	001a      	movs	r2, r3
   1b5b0:	4b20      	ldr	r3, [pc, #128]	; (1b634 <xQueueGenericSend+0x448>)
   1b5b2:	881b      	ldrh	r3, [r3, #0]
   1b5b4:	4013      	ands	r3, r2
   1b5b6:	b29b      	uxth	r3, r3
   1b5b8:	2b00      	cmp	r3, #0
   1b5ba:	d02e      	beq.n	1b61a <xQueueGenericSend+0x42e>
   1b5bc:	6a3b      	ldr	r3, [r7, #32]
   1b5be:	0018      	movs	r0, r3
   1b5c0:	4b1d      	ldr	r3, [pc, #116]	; (1b638 <xQueueGenericSend+0x44c>)
   1b5c2:	4798      	blx	r3
   1b5c4:	0003      	movs	r3, r0
   1b5c6:	001a      	movs	r2, r3
   1b5c8:	4b1a      	ldr	r3, [pc, #104]	; (1b634 <xQueueGenericSend+0x448>)
   1b5ca:	881b      	ldrh	r3, [r3, #0]
   1b5cc:	4013      	ands	r3, r2
   1b5ce:	b29b      	uxth	r3, r3
   1b5d0:	2b00      	cmp	r3, #0
   1b5d2:	d022      	beq.n	1b61a <xQueueGenericSend+0x42e>
   1b5d4:	683b      	ldr	r3, [r7, #0]
   1b5d6:	2b00      	cmp	r3, #0
   1b5d8:	d10b      	bne.n	1b5f2 <xQueueGenericSend+0x406>
   1b5da:	6a3b      	ldr	r3, [r7, #32]
   1b5dc:	0018      	movs	r0, r3
   1b5de:	4b17      	ldr	r3, [pc, #92]	; (1b63c <xQueueGenericSend+0x450>)
   1b5e0:	4798      	blx	r3
   1b5e2:	0003      	movs	r3, r0
   1b5e4:	001a      	movs	r2, r3
   1b5e6:	4b16      	ldr	r3, [pc, #88]	; (1b640 <xQueueGenericSend+0x454>)
   1b5e8:	5c9b      	ldrb	r3, [r3, r2]
   1b5ea:	3348      	adds	r3, #72	; 0x48
   1b5ec:	b2db      	uxtb	r3, r3
   1b5ee:	001d      	movs	r5, r3
   1b5f0:	e000      	b.n	1b5f4 <xQueueGenericSend+0x408>
   1b5f2:	254d      	movs	r5, #77	; 0x4d
   1b5f4:	6a3b      	ldr	r3, [r7, #32]
   1b5f6:	0018      	movs	r0, r3
   1b5f8:	4b10      	ldr	r3, [pc, #64]	; (1b63c <xQueueGenericSend+0x450>)
   1b5fa:	4798      	blx	r3
   1b5fc:	0003      	movs	r3, r0
   1b5fe:	001a      	movs	r2, r3
   1b600:	4b0f      	ldr	r3, [pc, #60]	; (1b640 <xQueueGenericSend+0x454>)
   1b602:	5c9c      	ldrb	r4, [r3, r2]
   1b604:	6a3b      	ldr	r3, [r7, #32]
   1b606:	0018      	movs	r0, r3
   1b608:	4b0e      	ldr	r3, [pc, #56]	; (1b644 <xQueueGenericSend+0x458>)
   1b60a:	4798      	blx	r3
   1b60c:	0003      	movs	r3, r0
   1b60e:	b2db      	uxtb	r3, r3
   1b610:	001a      	movs	r2, r3
   1b612:	0021      	movs	r1, r4
   1b614:	0028      	movs	r0, r5
   1b616:	4b0c      	ldr	r3, [pc, #48]	; (1b648 <xQueueGenericSend+0x45c>)
   1b618:	4798      	blx	r3
			return errQUEUE_FULL;
   1b61a:	2300      	movs	r3, #0
		}
	}
}
   1b61c:	0018      	movs	r0, r3
   1b61e:	46bd      	mov	sp, r7
   1b620:	b00a      	add	sp, #40	; 0x28
   1b622:	bdb0      	pop	{r4, r5, r7, pc}
   1b624:	0001c555 	.word	0x0001c555
   1b628:	0001cf29 	.word	0x0001cf29
   1b62c:	00018eed 	.word	0x00018eed
   1b630:	00018c51 	.word	0x00018c51
   1b634:	20000110 	.word	0x20000110
   1b638:	00018d11 	.word	0x00018d11
   1b63c:	00018c11 	.word	0x00018c11
   1b640:	20000104 	.word	0x20000104
   1b644:	00018cf1 	.word	0x00018cf1
   1b648:	00019649 	.word	0x00019649

0001b64c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b64c:	b5b0      	push	{r4, r5, r7, lr}
   1b64e:	b088      	sub	sp, #32
   1b650:	af00      	add	r7, sp, #0
   1b652:	60f8      	str	r0, [r7, #12]
   1b654:	60b9      	str	r1, [r7, #8]
   1b656:	607a      	str	r2, [r7, #4]
   1b658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b65a:	68fb      	ldr	r3, [r7, #12]
   1b65c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b65e:	69bb      	ldr	r3, [r7, #24]
   1b660:	2b00      	cmp	r3, #0
   1b662:	d101      	bne.n	1b668 <xQueueGenericSendFromISR+0x1c>
   1b664:	b672      	cpsid	i
   1b666:	e7fe      	b.n	1b666 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b668:	68bb      	ldr	r3, [r7, #8]
   1b66a:	2b00      	cmp	r3, #0
   1b66c:	d103      	bne.n	1b676 <xQueueGenericSendFromISR+0x2a>
   1b66e:	69bb      	ldr	r3, [r7, #24]
   1b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b672:	2b00      	cmp	r3, #0
   1b674:	d101      	bne.n	1b67a <xQueueGenericSendFromISR+0x2e>
   1b676:	2301      	movs	r3, #1
   1b678:	e000      	b.n	1b67c <xQueueGenericSendFromISR+0x30>
   1b67a:	2300      	movs	r3, #0
   1b67c:	2b00      	cmp	r3, #0
   1b67e:	d101      	bne.n	1b684 <xQueueGenericSendFromISR+0x38>
   1b680:	b672      	cpsid	i
   1b682:	e7fe      	b.n	1b682 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b684:	683b      	ldr	r3, [r7, #0]
   1b686:	2b02      	cmp	r3, #2
   1b688:	d103      	bne.n	1b692 <xQueueGenericSendFromISR+0x46>
   1b68a:	69bb      	ldr	r3, [r7, #24]
   1b68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b68e:	2b01      	cmp	r3, #1
   1b690:	d101      	bne.n	1b696 <xQueueGenericSendFromISR+0x4a>
   1b692:	2301      	movs	r3, #1
   1b694:	e000      	b.n	1b698 <xQueueGenericSendFromISR+0x4c>
   1b696:	2300      	movs	r3, #0
   1b698:	2b00      	cmp	r3, #0
   1b69a:	d101      	bne.n	1b6a0 <xQueueGenericSendFromISR+0x54>
   1b69c:	b672      	cpsid	i
   1b69e:	e7fe      	b.n	1b69e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b6a0:	4b68      	ldr	r3, [pc, #416]	; (1b844 <xQueueGenericSendFromISR+0x1f8>)
   1b6a2:	4798      	blx	r3
   1b6a4:	0003      	movs	r3, r0
   1b6a6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b6a8:	69bb      	ldr	r3, [r7, #24]
   1b6aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b6ac:	69bb      	ldr	r3, [r7, #24]
   1b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b6b0:	429a      	cmp	r2, r3
   1b6b2:	d303      	bcc.n	1b6bc <xQueueGenericSendFromISR+0x70>
   1b6b4:	683b      	ldr	r3, [r7, #0]
   1b6b6:	2b02      	cmp	r3, #2
   1b6b8:	d000      	beq.n	1b6bc <xQueueGenericSendFromISR+0x70>
   1b6ba:	e088      	b.n	1b7ce <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b6bc:	2313      	movs	r3, #19
   1b6be:	18fb      	adds	r3, r7, r3
   1b6c0:	69ba      	ldr	r2, [r7, #24]
   1b6c2:	2145      	movs	r1, #69	; 0x45
   1b6c4:	5c52      	ldrb	r2, [r2, r1]
   1b6c6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b6c8:	69bb      	ldr	r3, [r7, #24]
   1b6ca:	0018      	movs	r0, r3
   1b6cc:	4b5e      	ldr	r3, [pc, #376]	; (1b848 <xQueueGenericSendFromISR+0x1fc>)
   1b6ce:	4798      	blx	r3
   1b6d0:	0003      	movs	r3, r0
   1b6d2:	001a      	movs	r2, r3
   1b6d4:	4b5d      	ldr	r3, [pc, #372]	; (1b84c <xQueueGenericSendFromISR+0x200>)
   1b6d6:	881b      	ldrh	r3, [r3, #0]
   1b6d8:	4013      	ands	r3, r2
   1b6da:	b29b      	uxth	r3, r3
   1b6dc:	2b00      	cmp	r3, #0
   1b6de:	d022      	beq.n	1b726 <xQueueGenericSendFromISR+0xda>
   1b6e0:	683b      	ldr	r3, [r7, #0]
   1b6e2:	2b00      	cmp	r3, #0
   1b6e4:	d10b      	bne.n	1b6fe <xQueueGenericSendFromISR+0xb2>
   1b6e6:	69bb      	ldr	r3, [r7, #24]
   1b6e8:	0018      	movs	r0, r3
   1b6ea:	4b59      	ldr	r3, [pc, #356]	; (1b850 <xQueueGenericSendFromISR+0x204>)
   1b6ec:	4798      	blx	r3
   1b6ee:	0003      	movs	r3, r0
   1b6f0:	001a      	movs	r2, r3
   1b6f2:	4b58      	ldr	r3, [pc, #352]	; (1b854 <xQueueGenericSendFromISR+0x208>)
   1b6f4:	5c9b      	ldrb	r3, [r3, r2]
   1b6f6:	3330      	adds	r3, #48	; 0x30
   1b6f8:	b2db      	uxtb	r3, r3
   1b6fa:	001d      	movs	r5, r3
   1b6fc:	e000      	b.n	1b700 <xQueueGenericSendFromISR+0xb4>
   1b6fe:	2535      	movs	r5, #53	; 0x35
   1b700:	69bb      	ldr	r3, [r7, #24]
   1b702:	0018      	movs	r0, r3
   1b704:	4b52      	ldr	r3, [pc, #328]	; (1b850 <xQueueGenericSendFromISR+0x204>)
   1b706:	4798      	blx	r3
   1b708:	0003      	movs	r3, r0
   1b70a:	001a      	movs	r2, r3
   1b70c:	4b51      	ldr	r3, [pc, #324]	; (1b854 <xQueueGenericSendFromISR+0x208>)
   1b70e:	5c9c      	ldrb	r4, [r3, r2]
   1b710:	69bb      	ldr	r3, [r7, #24]
   1b712:	0018      	movs	r0, r3
   1b714:	4b50      	ldr	r3, [pc, #320]	; (1b858 <xQueueGenericSendFromISR+0x20c>)
   1b716:	4798      	blx	r3
   1b718:	0003      	movs	r3, r0
   1b71a:	b2db      	uxtb	r3, r3
   1b71c:	001a      	movs	r2, r3
   1b71e:	0021      	movs	r1, r4
   1b720:	0028      	movs	r0, r5
   1b722:	4b4e      	ldr	r3, [pc, #312]	; (1b85c <xQueueGenericSendFromISR+0x210>)
   1b724:	4798      	blx	r3
   1b726:	69bb      	ldr	r3, [r7, #24]
   1b728:	0018      	movs	r0, r3
   1b72a:	4b49      	ldr	r3, [pc, #292]	; (1b850 <xQueueGenericSendFromISR+0x204>)
   1b72c:	4798      	blx	r3
   1b72e:	0003      	movs	r3, r0
   1b730:	001a      	movs	r2, r3
   1b732:	4b48      	ldr	r3, [pc, #288]	; (1b854 <xQueueGenericSendFromISR+0x208>)
   1b734:	5c9c      	ldrb	r4, [r3, r2]
   1b736:	69bb      	ldr	r3, [r7, #24]
   1b738:	0018      	movs	r0, r3
   1b73a:	4b47      	ldr	r3, [pc, #284]	; (1b858 <xQueueGenericSendFromISR+0x20c>)
   1b73c:	4798      	blx	r3
   1b73e:	0003      	movs	r3, r0
   1b740:	b2d9      	uxtb	r1, r3
   1b742:	69bb      	ldr	r3, [r7, #24]
   1b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b746:	b2db      	uxtb	r3, r3
   1b748:	3301      	adds	r3, #1
   1b74a:	b2db      	uxtb	r3, r3
   1b74c:	001a      	movs	r2, r3
   1b74e:	0020      	movs	r0, r4
   1b750:	4b43      	ldr	r3, [pc, #268]	; (1b860 <xQueueGenericSendFromISR+0x214>)
   1b752:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b754:	683a      	ldr	r2, [r7, #0]
   1b756:	68b9      	ldr	r1, [r7, #8]
   1b758:	69bb      	ldr	r3, [r7, #24]
   1b75a:	0018      	movs	r0, r3
   1b75c:	4b41      	ldr	r3, [pc, #260]	; (1b864 <xQueueGenericSendFromISR+0x218>)
   1b75e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b760:	2313      	movs	r3, #19
   1b762:	18fb      	adds	r3, r7, r3
   1b764:	781b      	ldrb	r3, [r3, #0]
   1b766:	b25b      	sxtb	r3, r3
   1b768:	3301      	adds	r3, #1
   1b76a:	d124      	bne.n	1b7b6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b76c:	69bb      	ldr	r3, [r7, #24]
   1b76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b770:	2b00      	cmp	r3, #0
   1b772:	d00e      	beq.n	1b792 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b774:	683a      	ldr	r2, [r7, #0]
   1b776:	69bb      	ldr	r3, [r7, #24]
   1b778:	0011      	movs	r1, r2
   1b77a:	0018      	movs	r0, r3
   1b77c:	4b3a      	ldr	r3, [pc, #232]	; (1b868 <xQueueGenericSendFromISR+0x21c>)
   1b77e:	4798      	blx	r3
   1b780:	1e03      	subs	r3, r0, #0
   1b782:	d021      	beq.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b784:	687b      	ldr	r3, [r7, #4]
   1b786:	2b00      	cmp	r3, #0
   1b788:	d01e      	beq.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b78a:	687b      	ldr	r3, [r7, #4]
   1b78c:	2201      	movs	r2, #1
   1b78e:	601a      	str	r2, [r3, #0]
   1b790:	e01a      	b.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b792:	69bb      	ldr	r3, [r7, #24]
   1b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b796:	2b00      	cmp	r3, #0
   1b798:	d016      	beq.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b79a:	69bb      	ldr	r3, [r7, #24]
   1b79c:	3324      	adds	r3, #36	; 0x24
   1b79e:	0018      	movs	r0, r3
   1b7a0:	4b32      	ldr	r3, [pc, #200]	; (1b86c <xQueueGenericSendFromISR+0x220>)
   1b7a2:	4798      	blx	r3
   1b7a4:	1e03      	subs	r3, r0, #0
   1b7a6:	d00f      	beq.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b7a8:	687b      	ldr	r3, [r7, #4]
   1b7aa:	2b00      	cmp	r3, #0
   1b7ac:	d00c      	beq.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b7ae:	687b      	ldr	r3, [r7, #4]
   1b7b0:	2201      	movs	r2, #1
   1b7b2:	601a      	str	r2, [r3, #0]
   1b7b4:	e008      	b.n	1b7c8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b7b6:	2313      	movs	r3, #19
   1b7b8:	18fb      	adds	r3, r7, r3
   1b7ba:	781b      	ldrb	r3, [r3, #0]
   1b7bc:	3301      	adds	r3, #1
   1b7be:	b2db      	uxtb	r3, r3
   1b7c0:	b259      	sxtb	r1, r3
   1b7c2:	69bb      	ldr	r3, [r7, #24]
   1b7c4:	2245      	movs	r2, #69	; 0x45
   1b7c6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b7c8:	2301      	movs	r3, #1
   1b7ca:	61fb      	str	r3, [r7, #28]
		{
   1b7cc:	e030      	b.n	1b830 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b7ce:	69bb      	ldr	r3, [r7, #24]
   1b7d0:	0018      	movs	r0, r3
   1b7d2:	4b1d      	ldr	r3, [pc, #116]	; (1b848 <xQueueGenericSendFromISR+0x1fc>)
   1b7d4:	4798      	blx	r3
   1b7d6:	0003      	movs	r3, r0
   1b7d8:	001a      	movs	r2, r3
   1b7da:	4b1c      	ldr	r3, [pc, #112]	; (1b84c <xQueueGenericSendFromISR+0x200>)
   1b7dc:	881b      	ldrh	r3, [r3, #0]
   1b7de:	4013      	ands	r3, r2
   1b7e0:	b29b      	uxth	r3, r3
   1b7e2:	2b00      	cmp	r3, #0
   1b7e4:	d022      	beq.n	1b82c <xQueueGenericSendFromISR+0x1e0>
   1b7e6:	683b      	ldr	r3, [r7, #0]
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d10b      	bne.n	1b804 <xQueueGenericSendFromISR+0x1b8>
   1b7ec:	69bb      	ldr	r3, [r7, #24]
   1b7ee:	0018      	movs	r0, r3
   1b7f0:	4b17      	ldr	r3, [pc, #92]	; (1b850 <xQueueGenericSendFromISR+0x204>)
   1b7f2:	4798      	blx	r3
   1b7f4:	0003      	movs	r3, r0
   1b7f6:	001a      	movs	r2, r3
   1b7f8:	4b16      	ldr	r3, [pc, #88]	; (1b854 <xQueueGenericSendFromISR+0x208>)
   1b7fa:	5c9b      	ldrb	r3, [r3, r2]
   1b7fc:	3358      	adds	r3, #88	; 0x58
   1b7fe:	b2db      	uxtb	r3, r3
   1b800:	001d      	movs	r5, r3
   1b802:	e000      	b.n	1b806 <xQueueGenericSendFromISR+0x1ba>
   1b804:	255d      	movs	r5, #93	; 0x5d
   1b806:	69bb      	ldr	r3, [r7, #24]
   1b808:	0018      	movs	r0, r3
   1b80a:	4b11      	ldr	r3, [pc, #68]	; (1b850 <xQueueGenericSendFromISR+0x204>)
   1b80c:	4798      	blx	r3
   1b80e:	0003      	movs	r3, r0
   1b810:	001a      	movs	r2, r3
   1b812:	4b10      	ldr	r3, [pc, #64]	; (1b854 <xQueueGenericSendFromISR+0x208>)
   1b814:	5c9c      	ldrb	r4, [r3, r2]
   1b816:	69bb      	ldr	r3, [r7, #24]
   1b818:	0018      	movs	r0, r3
   1b81a:	4b0f      	ldr	r3, [pc, #60]	; (1b858 <xQueueGenericSendFromISR+0x20c>)
   1b81c:	4798      	blx	r3
   1b81e:	0003      	movs	r3, r0
   1b820:	b2db      	uxtb	r3, r3
   1b822:	001a      	movs	r2, r3
   1b824:	0021      	movs	r1, r4
   1b826:	0028      	movs	r0, r5
   1b828:	4b0c      	ldr	r3, [pc, #48]	; (1b85c <xQueueGenericSendFromISR+0x210>)
   1b82a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b82c:	2300      	movs	r3, #0
   1b82e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b830:	697b      	ldr	r3, [r7, #20]
   1b832:	0018      	movs	r0, r3
   1b834:	4b0e      	ldr	r3, [pc, #56]	; (1b870 <xQueueGenericSendFromISR+0x224>)
   1b836:	4798      	blx	r3

	return xReturn;
   1b838:	69fb      	ldr	r3, [r7, #28]
}
   1b83a:	0018      	movs	r0, r3
   1b83c:	46bd      	mov	sp, r7
   1b83e:	b008      	add	sp, #32
   1b840:	bdb0      	pop	{r4, r5, r7, pc}
   1b842:	46c0      	nop			; (mov r8, r8)
   1b844:	0001acad 	.word	0x0001acad
   1b848:	00018d11 	.word	0x00018d11
   1b84c:	20000110 	.word	0x20000110
   1b850:	00018c11 	.word	0x00018c11
   1b854:	20000104 	.word	0x20000104
   1b858:	00018cf1 	.word	0x00018cf1
   1b85c:	00019649 	.word	0x00019649
   1b860:	00019ca5 	.word	0x00019ca5
   1b864:	0001c425 	.word	0x0001c425
   1b868:	0001c729 	.word	0x0001c729
   1b86c:	0001d4e9 	.word	0x0001d4e9
   1b870:	0001acb9 	.word	0x0001acb9

0001b874 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b874:	b580      	push	{r7, lr}
   1b876:	b082      	sub	sp, #8
   1b878:	af00      	add	r7, sp, #0
   1b87a:	6078      	str	r0, [r7, #4]
   1b87c:	6039      	str	r1, [r7, #0]
   1b87e:	6839      	ldr	r1, [r7, #0]
   1b880:	687b      	ldr	r3, [r7, #4]
   1b882:	2200      	movs	r2, #0
   1b884:	0018      	movs	r0, r3
   1b886:	4b03      	ldr	r3, [pc, #12]	; (1b894 <xQueueGiveFromISR+0x20>)
   1b888:	4798      	blx	r3
   1b88a:	0003      	movs	r3, r0
   1b88c:	0018      	movs	r0, r3
   1b88e:	46bd      	mov	sp, r7
   1b890:	b002      	add	sp, #8
   1b892:	bd80      	pop	{r7, pc}
   1b894:	0001b899 	.word	0x0001b899

0001b898 <MyWrapper>:
{
   1b898:	b5b0      	push	{r4, r5, r7, lr}
   1b89a:	b08a      	sub	sp, #40	; 0x28
   1b89c:	af00      	add	r7, sp, #0
   1b89e:	60f8      	str	r0, [r7, #12]
   1b8a0:	60b9      	str	r1, [r7, #8]
   1b8a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b8a4:	68fb      	ldr	r3, [r7, #12]
   1b8a6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b8a8:	6a3b      	ldr	r3, [r7, #32]
   1b8aa:	2b00      	cmp	r3, #0
   1b8ac:	d101      	bne.n	1b8b2 <MyWrapper+0x1a>
   1b8ae:	b672      	cpsid	i
   1b8b0:	e7fe      	b.n	1b8b0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b8b2:	6a3b      	ldr	r3, [r7, #32]
   1b8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b8b6:	2b00      	cmp	r3, #0
   1b8b8:	d001      	beq.n	1b8be <MyWrapper+0x26>
   1b8ba:	b672      	cpsid	i
   1b8bc:	e7fe      	b.n	1b8bc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b8be:	6a3b      	ldr	r3, [r7, #32]
   1b8c0:	681b      	ldr	r3, [r3, #0]
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	d103      	bne.n	1b8ce <MyWrapper+0x36>
   1b8c6:	6a3b      	ldr	r3, [r7, #32]
   1b8c8:	685b      	ldr	r3, [r3, #4]
   1b8ca:	2b00      	cmp	r3, #0
   1b8cc:	d101      	bne.n	1b8d2 <MyWrapper+0x3a>
   1b8ce:	2301      	movs	r3, #1
   1b8d0:	e000      	b.n	1b8d4 <MyWrapper+0x3c>
   1b8d2:	2300      	movs	r3, #0
   1b8d4:	2b00      	cmp	r3, #0
   1b8d6:	d101      	bne.n	1b8dc <MyWrapper+0x44>
   1b8d8:	b672      	cpsid	i
   1b8da:	e7fe      	b.n	1b8da <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b8dc:	4b66      	ldr	r3, [pc, #408]	; (1ba78 <MyWrapper+0x1e0>)
   1b8de:	4798      	blx	r3
   1b8e0:	0003      	movs	r3, r0
   1b8e2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b8e4:	6a3b      	ldr	r3, [r7, #32]
   1b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8e8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b8ea:	6a3b      	ldr	r3, [r7, #32]
   1b8ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b8ee:	69bb      	ldr	r3, [r7, #24]
   1b8f0:	429a      	cmp	r2, r3
   1b8f2:	d800      	bhi.n	1b8f6 <MyWrapper+0x5e>
   1b8f4:	e085      	b.n	1ba02 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b8f6:	2317      	movs	r3, #23
   1b8f8:	18fb      	adds	r3, r7, r3
   1b8fa:	6a3a      	ldr	r2, [r7, #32]
   1b8fc:	2145      	movs	r1, #69	; 0x45
   1b8fe:	5c52      	ldrb	r2, [r2, r1]
   1b900:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b902:	6a3b      	ldr	r3, [r7, #32]
   1b904:	0018      	movs	r0, r3
   1b906:	4b5d      	ldr	r3, [pc, #372]	; (1ba7c <MyWrapper+0x1e4>)
   1b908:	4798      	blx	r3
   1b90a:	0003      	movs	r3, r0
   1b90c:	001a      	movs	r2, r3
   1b90e:	4b5c      	ldr	r3, [pc, #368]	; (1ba80 <MyWrapper+0x1e8>)
   1b910:	881b      	ldrh	r3, [r3, #0]
   1b912:	4013      	ands	r3, r2
   1b914:	b29b      	uxth	r3, r3
   1b916:	2b00      	cmp	r3, #0
   1b918:	d022      	beq.n	1b960 <MyWrapper+0xc8>
   1b91a:	687b      	ldr	r3, [r7, #4]
   1b91c:	2b00      	cmp	r3, #0
   1b91e:	d10b      	bne.n	1b938 <MyWrapper+0xa0>
   1b920:	6a3b      	ldr	r3, [r7, #32]
   1b922:	0018      	movs	r0, r3
   1b924:	4b57      	ldr	r3, [pc, #348]	; (1ba84 <MyWrapper+0x1ec>)
   1b926:	4798      	blx	r3
   1b928:	0003      	movs	r3, r0
   1b92a:	001a      	movs	r2, r3
   1b92c:	4b56      	ldr	r3, [pc, #344]	; (1ba88 <MyWrapper+0x1f0>)
   1b92e:	5c9b      	ldrb	r3, [r3, r2]
   1b930:	3330      	adds	r3, #48	; 0x30
   1b932:	b2db      	uxtb	r3, r3
   1b934:	001d      	movs	r5, r3
   1b936:	e000      	b.n	1b93a <MyWrapper+0xa2>
   1b938:	2535      	movs	r5, #53	; 0x35
   1b93a:	6a3b      	ldr	r3, [r7, #32]
   1b93c:	0018      	movs	r0, r3
   1b93e:	4b51      	ldr	r3, [pc, #324]	; (1ba84 <MyWrapper+0x1ec>)
   1b940:	4798      	blx	r3
   1b942:	0003      	movs	r3, r0
   1b944:	001a      	movs	r2, r3
   1b946:	4b50      	ldr	r3, [pc, #320]	; (1ba88 <MyWrapper+0x1f0>)
   1b948:	5c9c      	ldrb	r4, [r3, r2]
   1b94a:	6a3b      	ldr	r3, [r7, #32]
   1b94c:	0018      	movs	r0, r3
   1b94e:	4b4f      	ldr	r3, [pc, #316]	; (1ba8c <MyWrapper+0x1f4>)
   1b950:	4798      	blx	r3
   1b952:	0003      	movs	r3, r0
   1b954:	b2db      	uxtb	r3, r3
   1b956:	001a      	movs	r2, r3
   1b958:	0021      	movs	r1, r4
   1b95a:	0028      	movs	r0, r5
   1b95c:	4b4c      	ldr	r3, [pc, #304]	; (1ba90 <MyWrapper+0x1f8>)
   1b95e:	4798      	blx	r3
   1b960:	6a3b      	ldr	r3, [r7, #32]
   1b962:	0018      	movs	r0, r3
   1b964:	4b47      	ldr	r3, [pc, #284]	; (1ba84 <MyWrapper+0x1ec>)
   1b966:	4798      	blx	r3
   1b968:	0003      	movs	r3, r0
   1b96a:	001a      	movs	r2, r3
   1b96c:	4b46      	ldr	r3, [pc, #280]	; (1ba88 <MyWrapper+0x1f0>)
   1b96e:	5c9c      	ldrb	r4, [r3, r2]
   1b970:	6a3b      	ldr	r3, [r7, #32]
   1b972:	0018      	movs	r0, r3
   1b974:	4b45      	ldr	r3, [pc, #276]	; (1ba8c <MyWrapper+0x1f4>)
   1b976:	4798      	blx	r3
   1b978:	0003      	movs	r3, r0
   1b97a:	b2d9      	uxtb	r1, r3
   1b97c:	6a3b      	ldr	r3, [r7, #32]
   1b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b980:	b2db      	uxtb	r3, r3
   1b982:	3301      	adds	r3, #1
   1b984:	b2db      	uxtb	r3, r3
   1b986:	001a      	movs	r2, r3
   1b988:	0020      	movs	r0, r4
   1b98a:	4b42      	ldr	r3, [pc, #264]	; (1ba94 <MyWrapper+0x1fc>)
   1b98c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b98e:	69bb      	ldr	r3, [r7, #24]
   1b990:	1c5a      	adds	r2, r3, #1
   1b992:	6a3b      	ldr	r3, [r7, #32]
   1b994:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b996:	2317      	movs	r3, #23
   1b998:	18fb      	adds	r3, r7, r3
   1b99a:	781b      	ldrb	r3, [r3, #0]
   1b99c:	b25b      	sxtb	r3, r3
   1b99e:	3301      	adds	r3, #1
   1b9a0:	d123      	bne.n	1b9ea <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b9a2:	6a3b      	ldr	r3, [r7, #32]
   1b9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b9a6:	2b00      	cmp	r3, #0
   1b9a8:	d00d      	beq.n	1b9c6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b9aa:	6a3b      	ldr	r3, [r7, #32]
   1b9ac:	2100      	movs	r1, #0
   1b9ae:	0018      	movs	r0, r3
   1b9b0:	4b39      	ldr	r3, [pc, #228]	; (1ba98 <MyWrapper+0x200>)
   1b9b2:	4798      	blx	r3
   1b9b4:	1e03      	subs	r3, r0, #0
   1b9b6:	d021      	beq.n	1b9fc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b9b8:	68bb      	ldr	r3, [r7, #8]
   1b9ba:	2b00      	cmp	r3, #0
   1b9bc:	d01e      	beq.n	1b9fc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b9be:	68bb      	ldr	r3, [r7, #8]
   1b9c0:	2201      	movs	r2, #1
   1b9c2:	601a      	str	r2, [r3, #0]
   1b9c4:	e01a      	b.n	1b9fc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b9c6:	6a3b      	ldr	r3, [r7, #32]
   1b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b9ca:	2b00      	cmp	r3, #0
   1b9cc:	d016      	beq.n	1b9fc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b9ce:	6a3b      	ldr	r3, [r7, #32]
   1b9d0:	3324      	adds	r3, #36	; 0x24
   1b9d2:	0018      	movs	r0, r3
   1b9d4:	4b31      	ldr	r3, [pc, #196]	; (1ba9c <MyWrapper+0x204>)
   1b9d6:	4798      	blx	r3
   1b9d8:	1e03      	subs	r3, r0, #0
   1b9da:	d00f      	beq.n	1b9fc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b9dc:	68bb      	ldr	r3, [r7, #8]
   1b9de:	2b00      	cmp	r3, #0
   1b9e0:	d00c      	beq.n	1b9fc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b9e2:	68bb      	ldr	r3, [r7, #8]
   1b9e4:	2201      	movs	r2, #1
   1b9e6:	601a      	str	r2, [r3, #0]
   1b9e8:	e008      	b.n	1b9fc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b9ea:	2317      	movs	r3, #23
   1b9ec:	18fb      	adds	r3, r7, r3
   1b9ee:	781b      	ldrb	r3, [r3, #0]
   1b9f0:	3301      	adds	r3, #1
   1b9f2:	b2db      	uxtb	r3, r3
   1b9f4:	b259      	sxtb	r1, r3
   1b9f6:	6a3b      	ldr	r3, [r7, #32]
   1b9f8:	2245      	movs	r2, #69	; 0x45
   1b9fa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b9fc:	2301      	movs	r3, #1
   1b9fe:	627b      	str	r3, [r7, #36]	; 0x24
   1ba00:	e030      	b.n	1ba64 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ba02:	6a3b      	ldr	r3, [r7, #32]
   1ba04:	0018      	movs	r0, r3
   1ba06:	4b1d      	ldr	r3, [pc, #116]	; (1ba7c <MyWrapper+0x1e4>)
   1ba08:	4798      	blx	r3
   1ba0a:	0003      	movs	r3, r0
   1ba0c:	001a      	movs	r2, r3
   1ba0e:	4b1c      	ldr	r3, [pc, #112]	; (1ba80 <MyWrapper+0x1e8>)
   1ba10:	881b      	ldrh	r3, [r3, #0]
   1ba12:	4013      	ands	r3, r2
   1ba14:	b29b      	uxth	r3, r3
   1ba16:	2b00      	cmp	r3, #0
   1ba18:	d022      	beq.n	1ba60 <MyWrapper+0x1c8>
   1ba1a:	687b      	ldr	r3, [r7, #4]
   1ba1c:	2b00      	cmp	r3, #0
   1ba1e:	d10b      	bne.n	1ba38 <MyWrapper+0x1a0>
   1ba20:	6a3b      	ldr	r3, [r7, #32]
   1ba22:	0018      	movs	r0, r3
   1ba24:	4b17      	ldr	r3, [pc, #92]	; (1ba84 <MyWrapper+0x1ec>)
   1ba26:	4798      	blx	r3
   1ba28:	0003      	movs	r3, r0
   1ba2a:	001a      	movs	r2, r3
   1ba2c:	4b16      	ldr	r3, [pc, #88]	; (1ba88 <MyWrapper+0x1f0>)
   1ba2e:	5c9b      	ldrb	r3, [r3, r2]
   1ba30:	3358      	adds	r3, #88	; 0x58
   1ba32:	b2db      	uxtb	r3, r3
   1ba34:	001d      	movs	r5, r3
   1ba36:	e000      	b.n	1ba3a <MyWrapper+0x1a2>
   1ba38:	255d      	movs	r5, #93	; 0x5d
   1ba3a:	6a3b      	ldr	r3, [r7, #32]
   1ba3c:	0018      	movs	r0, r3
   1ba3e:	4b11      	ldr	r3, [pc, #68]	; (1ba84 <MyWrapper+0x1ec>)
   1ba40:	4798      	blx	r3
   1ba42:	0003      	movs	r3, r0
   1ba44:	001a      	movs	r2, r3
   1ba46:	4b10      	ldr	r3, [pc, #64]	; (1ba88 <MyWrapper+0x1f0>)
   1ba48:	5c9c      	ldrb	r4, [r3, r2]
   1ba4a:	6a3b      	ldr	r3, [r7, #32]
   1ba4c:	0018      	movs	r0, r3
   1ba4e:	4b0f      	ldr	r3, [pc, #60]	; (1ba8c <MyWrapper+0x1f4>)
   1ba50:	4798      	blx	r3
   1ba52:	0003      	movs	r3, r0
   1ba54:	b2db      	uxtb	r3, r3
   1ba56:	001a      	movs	r2, r3
   1ba58:	0021      	movs	r1, r4
   1ba5a:	0028      	movs	r0, r5
   1ba5c:	4b0c      	ldr	r3, [pc, #48]	; (1ba90 <MyWrapper+0x1f8>)
   1ba5e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ba60:	2300      	movs	r3, #0
   1ba62:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ba64:	69fb      	ldr	r3, [r7, #28]
   1ba66:	0018      	movs	r0, r3
   1ba68:	4b0d      	ldr	r3, [pc, #52]	; (1baa0 <MyWrapper+0x208>)
   1ba6a:	4798      	blx	r3

	return xReturn;
   1ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1ba6e:	0018      	movs	r0, r3
   1ba70:	46bd      	mov	sp, r7
   1ba72:	b00a      	add	sp, #40	; 0x28
   1ba74:	bdb0      	pop	{r4, r5, r7, pc}
   1ba76:	46c0      	nop			; (mov r8, r8)
   1ba78:	0001acad 	.word	0x0001acad
   1ba7c:	00018d11 	.word	0x00018d11
   1ba80:	20000110 	.word	0x20000110
   1ba84:	00018c11 	.word	0x00018c11
   1ba88:	20000104 	.word	0x20000104
   1ba8c:	00018cf1 	.word	0x00018cf1
   1ba90:	00019649 	.word	0x00019649
   1ba94:	00019ca5 	.word	0x00019ca5
   1ba98:	0001c729 	.word	0x0001c729
   1ba9c:	0001d4e9 	.word	0x0001d4e9
   1baa0:	0001acb9 	.word	0x0001acb9

0001baa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1baa4:	b5b0      	push	{r4, r5, r7, lr}
   1baa6:	b08a      	sub	sp, #40	; 0x28
   1baa8:	af00      	add	r7, sp, #0
   1baaa:	60f8      	str	r0, [r7, #12]
   1baac:	60b9      	str	r1, [r7, #8]
   1baae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bab0:	2300      	movs	r3, #0
   1bab2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bab4:	68fb      	ldr	r3, [r7, #12]
   1bab6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bab8:	6a3b      	ldr	r3, [r7, #32]
   1baba:	2b00      	cmp	r3, #0
   1babc:	d101      	bne.n	1bac2 <xQueueReceive+0x1e>
   1babe:	b672      	cpsid	i
   1bac0:	e7fe      	b.n	1bac0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bac2:	68bb      	ldr	r3, [r7, #8]
   1bac4:	2b00      	cmp	r3, #0
   1bac6:	d103      	bne.n	1bad0 <xQueueReceive+0x2c>
   1bac8:	6a3b      	ldr	r3, [r7, #32]
   1baca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bacc:	2b00      	cmp	r3, #0
   1bace:	d101      	bne.n	1bad4 <xQueueReceive+0x30>
   1bad0:	2301      	movs	r3, #1
   1bad2:	e000      	b.n	1bad6 <xQueueReceive+0x32>
   1bad4:	2300      	movs	r3, #0
   1bad6:	2b00      	cmp	r3, #0
   1bad8:	d101      	bne.n	1bade <xQueueReceive+0x3a>
   1bada:	b672      	cpsid	i
   1badc:	e7fe      	b.n	1badc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bade:	4bbf      	ldr	r3, [pc, #764]	; (1bddc <xQueueReceive+0x338>)
   1bae0:	4798      	blx	r3
   1bae2:	1e03      	subs	r3, r0, #0
   1bae4:	d102      	bne.n	1baec <xQueueReceive+0x48>
   1bae6:	687b      	ldr	r3, [r7, #4]
   1bae8:	2b00      	cmp	r3, #0
   1baea:	d101      	bne.n	1baf0 <xQueueReceive+0x4c>
   1baec:	2301      	movs	r3, #1
   1baee:	e000      	b.n	1baf2 <xQueueReceive+0x4e>
   1baf0:	2300      	movs	r3, #0
   1baf2:	2b00      	cmp	r3, #0
   1baf4:	d101      	bne.n	1bafa <xQueueReceive+0x56>
   1baf6:	b672      	cpsid	i
   1baf8:	e7fe      	b.n	1baf8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bafa:	4bb9      	ldr	r3, [pc, #740]	; (1bde0 <xQueueReceive+0x33c>)
   1bafc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bafe:	6a3b      	ldr	r3, [r7, #32]
   1bb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb02:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bb04:	69fb      	ldr	r3, [r7, #28]
   1bb06:	2b00      	cmp	r3, #0
   1bb08:	d100      	bne.n	1bb0c <xQueueReceive+0x68>
   1bb0a:	e07d      	b.n	1bc08 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1bb0c:	68ba      	ldr	r2, [r7, #8]
   1bb0e:	6a3b      	ldr	r3, [r7, #32]
   1bb10:	0011      	movs	r1, r2
   1bb12:	0018      	movs	r0, r3
   1bb14:	4bb3      	ldr	r3, [pc, #716]	; (1bde4 <xQueueReceive+0x340>)
   1bb16:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1bb18:	4bb3      	ldr	r3, [pc, #716]	; (1bde8 <xQueueReceive+0x344>)
   1bb1a:	4798      	blx	r3
   1bb1c:	0003      	movs	r3, r0
   1bb1e:	0018      	movs	r0, r3
   1bb20:	4bb2      	ldr	r3, [pc, #712]	; (1bdec <xQueueReceive+0x348>)
   1bb22:	4798      	blx	r3
   1bb24:	0003      	movs	r3, r0
   1bb26:	001a      	movs	r2, r3
   1bb28:	4bb1      	ldr	r3, [pc, #708]	; (1bdf0 <xQueueReceive+0x34c>)
   1bb2a:	881b      	ldrh	r3, [r3, #0]
   1bb2c:	4013      	ands	r3, r2
   1bb2e:	b29b      	uxth	r3, r3
   1bb30:	2b00      	cmp	r3, #0
   1bb32:	d029      	beq.n	1bb88 <xQueueReceive+0xe4>
   1bb34:	6a3b      	ldr	r3, [r7, #32]
   1bb36:	0018      	movs	r0, r3
   1bb38:	4bae      	ldr	r3, [pc, #696]	; (1bdf4 <xQueueReceive+0x350>)
   1bb3a:	4798      	blx	r3
   1bb3c:	0003      	movs	r3, r0
   1bb3e:	001a      	movs	r2, r3
   1bb40:	4bab      	ldr	r3, [pc, #684]	; (1bdf0 <xQueueReceive+0x34c>)
   1bb42:	881b      	ldrh	r3, [r3, #0]
   1bb44:	4013      	ands	r3, r2
   1bb46:	b29b      	uxth	r3, r3
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	d01d      	beq.n	1bb88 <xQueueReceive+0xe4>
   1bb4c:	6a3b      	ldr	r3, [r7, #32]
   1bb4e:	0018      	movs	r0, r3
   1bb50:	4ba9      	ldr	r3, [pc, #676]	; (1bdf8 <xQueueReceive+0x354>)
   1bb52:	4798      	blx	r3
   1bb54:	0003      	movs	r3, r0
   1bb56:	001a      	movs	r2, r3
   1bb58:	4ba8      	ldr	r3, [pc, #672]	; (1bdfc <xQueueReceive+0x358>)
   1bb5a:	5c9b      	ldrb	r3, [r3, r2]
   1bb5c:	3328      	adds	r3, #40	; 0x28
   1bb5e:	b2db      	uxtb	r3, r3
   1bb60:	001d      	movs	r5, r3
   1bb62:	6a3b      	ldr	r3, [r7, #32]
   1bb64:	0018      	movs	r0, r3
   1bb66:	4ba4      	ldr	r3, [pc, #656]	; (1bdf8 <xQueueReceive+0x354>)
   1bb68:	4798      	blx	r3
   1bb6a:	0003      	movs	r3, r0
   1bb6c:	001a      	movs	r2, r3
   1bb6e:	4ba3      	ldr	r3, [pc, #652]	; (1bdfc <xQueueReceive+0x358>)
   1bb70:	5c9c      	ldrb	r4, [r3, r2]
   1bb72:	6a3b      	ldr	r3, [r7, #32]
   1bb74:	0018      	movs	r0, r3
   1bb76:	4ba2      	ldr	r3, [pc, #648]	; (1be00 <xQueueReceive+0x35c>)
   1bb78:	4798      	blx	r3
   1bb7a:	0003      	movs	r3, r0
   1bb7c:	b2db      	uxtb	r3, r3
   1bb7e:	001a      	movs	r2, r3
   1bb80:	0021      	movs	r1, r4
   1bb82:	0028      	movs	r0, r5
   1bb84:	4b9f      	ldr	r3, [pc, #636]	; (1be04 <xQueueReceive+0x360>)
   1bb86:	4798      	blx	r3
   1bb88:	6a3b      	ldr	r3, [r7, #32]
   1bb8a:	0018      	movs	r0, r3
   1bb8c:	4b9a      	ldr	r3, [pc, #616]	; (1bdf8 <xQueueReceive+0x354>)
   1bb8e:	4798      	blx	r3
   1bb90:	0003      	movs	r3, r0
   1bb92:	001a      	movs	r2, r3
   1bb94:	4b99      	ldr	r3, [pc, #612]	; (1bdfc <xQueueReceive+0x358>)
   1bb96:	5c9c      	ldrb	r4, [r3, r2]
   1bb98:	6a3b      	ldr	r3, [r7, #32]
   1bb9a:	0018      	movs	r0, r3
   1bb9c:	4b98      	ldr	r3, [pc, #608]	; (1be00 <xQueueReceive+0x35c>)
   1bb9e:	4798      	blx	r3
   1bba0:	0003      	movs	r3, r0
   1bba2:	b2dd      	uxtb	r5, r3
   1bba4:	6a3b      	ldr	r3, [r7, #32]
   1bba6:	0018      	movs	r0, r3
   1bba8:	4b93      	ldr	r3, [pc, #588]	; (1bdf8 <xQueueReceive+0x354>)
   1bbaa:	4798      	blx	r3
   1bbac:	0003      	movs	r3, r0
   1bbae:	001a      	movs	r2, r3
   1bbb0:	4b92      	ldr	r3, [pc, #584]	; (1bdfc <xQueueReceive+0x358>)
   1bbb2:	5c9b      	ldrb	r3, [r3, r2]
   1bbb4:	2b02      	cmp	r3, #2
   1bbb6:	d108      	bne.n	1bbca <xQueueReceive+0x126>
   1bbb8:	4b8b      	ldr	r3, [pc, #556]	; (1bde8 <xQueueReceive+0x344>)
   1bbba:	4798      	blx	r3
   1bbbc:	0003      	movs	r3, r0
   1bbbe:	0018      	movs	r0, r3
   1bbc0:	4b91      	ldr	r3, [pc, #580]	; (1be08 <xQueueReceive+0x364>)
   1bbc2:	4798      	blx	r3
   1bbc4:	0003      	movs	r3, r0
   1bbc6:	b2db      	uxtb	r3, r3
   1bbc8:	e004      	b.n	1bbd4 <xQueueReceive+0x130>
   1bbca:	6a3b      	ldr	r3, [r7, #32]
   1bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bbce:	b2db      	uxtb	r3, r3
   1bbd0:	3b01      	subs	r3, #1
   1bbd2:	b2db      	uxtb	r3, r3
   1bbd4:	001a      	movs	r2, r3
   1bbd6:	0029      	movs	r1, r5
   1bbd8:	0020      	movs	r0, r4
   1bbda:	4b8c      	ldr	r3, [pc, #560]	; (1be0c <xQueueReceive+0x368>)
   1bbdc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bbde:	69fb      	ldr	r3, [r7, #28]
   1bbe0:	1e5a      	subs	r2, r3, #1
   1bbe2:	6a3b      	ldr	r3, [r7, #32]
   1bbe4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bbe6:	6a3b      	ldr	r3, [r7, #32]
   1bbe8:	691b      	ldr	r3, [r3, #16]
   1bbea:	2b00      	cmp	r3, #0
   1bbec:	d008      	beq.n	1bc00 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bbee:	6a3b      	ldr	r3, [r7, #32]
   1bbf0:	3310      	adds	r3, #16
   1bbf2:	0018      	movs	r0, r3
   1bbf4:	4b86      	ldr	r3, [pc, #536]	; (1be10 <xQueueReceive+0x36c>)
   1bbf6:	4798      	blx	r3
   1bbf8:	1e03      	subs	r3, r0, #0
   1bbfa:	d001      	beq.n	1bc00 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bbfc:	4b85      	ldr	r3, [pc, #532]	; (1be14 <xQueueReceive+0x370>)
   1bbfe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bc00:	4b85      	ldr	r3, [pc, #532]	; (1be18 <xQueueReceive+0x374>)
   1bc02:	4798      	blx	r3
				return pdPASS;
   1bc04:	2301      	movs	r3, #1
   1bc06:	e15f      	b.n	1bec8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bc08:	687b      	ldr	r3, [r7, #4]
   1bc0a:	2b00      	cmp	r3, #0
   1bc0c:	d13b      	bne.n	1bc86 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bc0e:	4b82      	ldr	r3, [pc, #520]	; (1be18 <xQueueReceive+0x374>)
   1bc10:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bc12:	4b75      	ldr	r3, [pc, #468]	; (1bde8 <xQueueReceive+0x344>)
   1bc14:	4798      	blx	r3
   1bc16:	0003      	movs	r3, r0
   1bc18:	0018      	movs	r0, r3
   1bc1a:	4b74      	ldr	r3, [pc, #464]	; (1bdec <xQueueReceive+0x348>)
   1bc1c:	4798      	blx	r3
   1bc1e:	0003      	movs	r3, r0
   1bc20:	001a      	movs	r2, r3
   1bc22:	4b73      	ldr	r3, [pc, #460]	; (1bdf0 <xQueueReceive+0x34c>)
   1bc24:	881b      	ldrh	r3, [r3, #0]
   1bc26:	4013      	ands	r3, r2
   1bc28:	b29b      	uxth	r3, r3
   1bc2a:	2b00      	cmp	r3, #0
   1bc2c:	d029      	beq.n	1bc82 <xQueueReceive+0x1de>
   1bc2e:	6a3b      	ldr	r3, [r7, #32]
   1bc30:	0018      	movs	r0, r3
   1bc32:	4b70      	ldr	r3, [pc, #448]	; (1bdf4 <xQueueReceive+0x350>)
   1bc34:	4798      	blx	r3
   1bc36:	0003      	movs	r3, r0
   1bc38:	001a      	movs	r2, r3
   1bc3a:	4b6d      	ldr	r3, [pc, #436]	; (1bdf0 <xQueueReceive+0x34c>)
   1bc3c:	881b      	ldrh	r3, [r3, #0]
   1bc3e:	4013      	ands	r3, r2
   1bc40:	b29b      	uxth	r3, r3
   1bc42:	2b00      	cmp	r3, #0
   1bc44:	d01d      	beq.n	1bc82 <xQueueReceive+0x1de>
   1bc46:	6a3b      	ldr	r3, [r7, #32]
   1bc48:	0018      	movs	r0, r3
   1bc4a:	4b6b      	ldr	r3, [pc, #428]	; (1bdf8 <xQueueReceive+0x354>)
   1bc4c:	4798      	blx	r3
   1bc4e:	0003      	movs	r3, r0
   1bc50:	001a      	movs	r2, r3
   1bc52:	4b6a      	ldr	r3, [pc, #424]	; (1bdfc <xQueueReceive+0x358>)
   1bc54:	5c9b      	ldrb	r3, [r3, r2]
   1bc56:	3350      	adds	r3, #80	; 0x50
   1bc58:	b2db      	uxtb	r3, r3
   1bc5a:	001d      	movs	r5, r3
   1bc5c:	6a3b      	ldr	r3, [r7, #32]
   1bc5e:	0018      	movs	r0, r3
   1bc60:	4b65      	ldr	r3, [pc, #404]	; (1bdf8 <xQueueReceive+0x354>)
   1bc62:	4798      	blx	r3
   1bc64:	0003      	movs	r3, r0
   1bc66:	001a      	movs	r2, r3
   1bc68:	4b64      	ldr	r3, [pc, #400]	; (1bdfc <xQueueReceive+0x358>)
   1bc6a:	5c9c      	ldrb	r4, [r3, r2]
   1bc6c:	6a3b      	ldr	r3, [r7, #32]
   1bc6e:	0018      	movs	r0, r3
   1bc70:	4b63      	ldr	r3, [pc, #396]	; (1be00 <xQueueReceive+0x35c>)
   1bc72:	4798      	blx	r3
   1bc74:	0003      	movs	r3, r0
   1bc76:	b2db      	uxtb	r3, r3
   1bc78:	001a      	movs	r2, r3
   1bc7a:	0021      	movs	r1, r4
   1bc7c:	0028      	movs	r0, r5
   1bc7e:	4b61      	ldr	r3, [pc, #388]	; (1be04 <xQueueReceive+0x360>)
   1bc80:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bc82:	2300      	movs	r3, #0
   1bc84:	e120      	b.n	1bec8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	d106      	bne.n	1bc9a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bc8c:	2314      	movs	r3, #20
   1bc8e:	18fb      	adds	r3, r7, r3
   1bc90:	0018      	movs	r0, r3
   1bc92:	4b62      	ldr	r3, [pc, #392]	; (1be1c <xQueueReceive+0x378>)
   1bc94:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bc96:	2301      	movs	r3, #1
   1bc98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bc9a:	4b5f      	ldr	r3, [pc, #380]	; (1be18 <xQueueReceive+0x374>)
   1bc9c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bc9e:	4b60      	ldr	r3, [pc, #384]	; (1be20 <xQueueReceive+0x37c>)
   1bca0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bca2:	4b4f      	ldr	r3, [pc, #316]	; (1bde0 <xQueueReceive+0x33c>)
   1bca4:	4798      	blx	r3
   1bca6:	6a3b      	ldr	r3, [r7, #32]
   1bca8:	2244      	movs	r2, #68	; 0x44
   1bcaa:	5c9b      	ldrb	r3, [r3, r2]
   1bcac:	b25b      	sxtb	r3, r3
   1bcae:	3301      	adds	r3, #1
   1bcb0:	d103      	bne.n	1bcba <xQueueReceive+0x216>
   1bcb2:	6a3b      	ldr	r3, [r7, #32]
   1bcb4:	2244      	movs	r2, #68	; 0x44
   1bcb6:	2100      	movs	r1, #0
   1bcb8:	5499      	strb	r1, [r3, r2]
   1bcba:	6a3b      	ldr	r3, [r7, #32]
   1bcbc:	2245      	movs	r2, #69	; 0x45
   1bcbe:	5c9b      	ldrb	r3, [r3, r2]
   1bcc0:	b25b      	sxtb	r3, r3
   1bcc2:	3301      	adds	r3, #1
   1bcc4:	d103      	bne.n	1bcce <xQueueReceive+0x22a>
   1bcc6:	6a3b      	ldr	r3, [r7, #32]
   1bcc8:	2245      	movs	r2, #69	; 0x45
   1bcca:	2100      	movs	r1, #0
   1bccc:	5499      	strb	r1, [r3, r2]
   1bcce:	4b52      	ldr	r3, [pc, #328]	; (1be18 <xQueueReceive+0x374>)
   1bcd0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bcd2:	1d3a      	adds	r2, r7, #4
   1bcd4:	2314      	movs	r3, #20
   1bcd6:	18fb      	adds	r3, r7, r3
   1bcd8:	0011      	movs	r1, r2
   1bcda:	0018      	movs	r0, r3
   1bcdc:	4b51      	ldr	r3, [pc, #324]	; (1be24 <xQueueReceive+0x380>)
   1bcde:	4798      	blx	r3
   1bce0:	1e03      	subs	r3, r0, #0
   1bce2:	d000      	beq.n	1bce6 <xQueueReceive+0x242>
   1bce4:	e0aa      	b.n	1be3c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bce6:	6a3b      	ldr	r3, [r7, #32]
   1bce8:	0018      	movs	r0, r3
   1bcea:	4b4f      	ldr	r3, [pc, #316]	; (1be28 <xQueueReceive+0x384>)
   1bcec:	4798      	blx	r3
   1bcee:	1e03      	subs	r3, r0, #0
   1bcf0:	d06d      	beq.n	1bdce <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bcf2:	4b3d      	ldr	r3, [pc, #244]	; (1bde8 <xQueueReceive+0x344>)
   1bcf4:	4798      	blx	r3
   1bcf6:	0003      	movs	r3, r0
   1bcf8:	0018      	movs	r0, r3
   1bcfa:	4b3c      	ldr	r3, [pc, #240]	; (1bdec <xQueueReceive+0x348>)
   1bcfc:	4798      	blx	r3
   1bcfe:	0003      	movs	r3, r0
   1bd00:	001a      	movs	r2, r3
   1bd02:	4b3b      	ldr	r3, [pc, #236]	; (1bdf0 <xQueueReceive+0x34c>)
   1bd04:	881b      	ldrh	r3, [r3, #0]
   1bd06:	4013      	ands	r3, r2
   1bd08:	b29b      	uxth	r3, r3
   1bd0a:	2b00      	cmp	r3, #0
   1bd0c:	d029      	beq.n	1bd62 <xQueueReceive+0x2be>
   1bd0e:	6a3b      	ldr	r3, [r7, #32]
   1bd10:	0018      	movs	r0, r3
   1bd12:	4b38      	ldr	r3, [pc, #224]	; (1bdf4 <xQueueReceive+0x350>)
   1bd14:	4798      	blx	r3
   1bd16:	0003      	movs	r3, r0
   1bd18:	001a      	movs	r2, r3
   1bd1a:	4b35      	ldr	r3, [pc, #212]	; (1bdf0 <xQueueReceive+0x34c>)
   1bd1c:	881b      	ldrh	r3, [r3, #0]
   1bd1e:	4013      	ands	r3, r2
   1bd20:	b29b      	uxth	r3, r3
   1bd22:	2b00      	cmp	r3, #0
   1bd24:	d01d      	beq.n	1bd62 <xQueueReceive+0x2be>
   1bd26:	6a3b      	ldr	r3, [r7, #32]
   1bd28:	0018      	movs	r0, r3
   1bd2a:	4b33      	ldr	r3, [pc, #204]	; (1bdf8 <xQueueReceive+0x354>)
   1bd2c:	4798      	blx	r3
   1bd2e:	0003      	movs	r3, r0
   1bd30:	001a      	movs	r2, r3
   1bd32:	4b32      	ldr	r3, [pc, #200]	; (1bdfc <xQueueReceive+0x358>)
   1bd34:	5c9b      	ldrb	r3, [r3, r2]
   1bd36:	3368      	adds	r3, #104	; 0x68
   1bd38:	b2db      	uxtb	r3, r3
   1bd3a:	001d      	movs	r5, r3
   1bd3c:	6a3b      	ldr	r3, [r7, #32]
   1bd3e:	0018      	movs	r0, r3
   1bd40:	4b2d      	ldr	r3, [pc, #180]	; (1bdf8 <xQueueReceive+0x354>)
   1bd42:	4798      	blx	r3
   1bd44:	0003      	movs	r3, r0
   1bd46:	001a      	movs	r2, r3
   1bd48:	4b2c      	ldr	r3, [pc, #176]	; (1bdfc <xQueueReceive+0x358>)
   1bd4a:	5c9c      	ldrb	r4, [r3, r2]
   1bd4c:	6a3b      	ldr	r3, [r7, #32]
   1bd4e:	0018      	movs	r0, r3
   1bd50:	4b2b      	ldr	r3, [pc, #172]	; (1be00 <xQueueReceive+0x35c>)
   1bd52:	4798      	blx	r3
   1bd54:	0003      	movs	r3, r0
   1bd56:	b2db      	uxtb	r3, r3
   1bd58:	001a      	movs	r2, r3
   1bd5a:	0021      	movs	r1, r4
   1bd5c:	0028      	movs	r0, r5
   1bd5e:	4b29      	ldr	r3, [pc, #164]	; (1be04 <xQueueReceive+0x360>)
   1bd60:	4798      	blx	r3
   1bd62:	6a3b      	ldr	r3, [r7, #32]
   1bd64:	0018      	movs	r0, r3
   1bd66:	4b24      	ldr	r3, [pc, #144]	; (1bdf8 <xQueueReceive+0x354>)
   1bd68:	4798      	blx	r3
   1bd6a:	0003      	movs	r3, r0
   1bd6c:	001a      	movs	r2, r3
   1bd6e:	4b23      	ldr	r3, [pc, #140]	; (1bdfc <xQueueReceive+0x358>)
   1bd70:	5c9b      	ldrb	r3, [r3, r2]
   1bd72:	2b02      	cmp	r3, #2
   1bd74:	d018      	beq.n	1bda8 <xQueueReceive+0x304>
   1bd76:	4b1c      	ldr	r3, [pc, #112]	; (1bde8 <xQueueReceive+0x344>)
   1bd78:	4798      	blx	r3
   1bd7a:	0003      	movs	r3, r0
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b1b      	ldr	r3, [pc, #108]	; (1bdec <xQueueReceive+0x348>)
   1bd80:	4798      	blx	r3
   1bd82:	0003      	movs	r3, r0
   1bd84:	001a      	movs	r2, r3
   1bd86:	4b1a      	ldr	r3, [pc, #104]	; (1bdf0 <xQueueReceive+0x34c>)
   1bd88:	881b      	ldrh	r3, [r3, #0]
   1bd8a:	4013      	ands	r3, r2
   1bd8c:	b29b      	uxth	r3, r3
   1bd8e:	2b00      	cmp	r3, #0
   1bd90:	d00a      	beq.n	1bda8 <xQueueReceive+0x304>
   1bd92:	4b15      	ldr	r3, [pc, #84]	; (1bde8 <xQueueReceive+0x344>)
   1bd94:	4798      	blx	r3
   1bd96:	0003      	movs	r3, r0
   1bd98:	0018      	movs	r0, r3
   1bd9a:	4b1b      	ldr	r3, [pc, #108]	; (1be08 <xQueueReceive+0x364>)
   1bd9c:	4798      	blx	r3
   1bd9e:	0003      	movs	r3, r0
   1bda0:	b2db      	uxtb	r3, r3
   1bda2:	0018      	movs	r0, r3
   1bda4:	4b21      	ldr	r3, [pc, #132]	; (1be2c <xQueueReceive+0x388>)
   1bda6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bda8:	6a3b      	ldr	r3, [r7, #32]
   1bdaa:	3324      	adds	r3, #36	; 0x24
   1bdac:	687a      	ldr	r2, [r7, #4]
   1bdae:	0011      	movs	r1, r2
   1bdb0:	0018      	movs	r0, r3
   1bdb2:	4b1f      	ldr	r3, [pc, #124]	; (1be30 <xQueueReceive+0x38c>)
   1bdb4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bdb6:	6a3b      	ldr	r3, [r7, #32]
   1bdb8:	0018      	movs	r0, r3
   1bdba:	4b1e      	ldr	r3, [pc, #120]	; (1be34 <xQueueReceive+0x390>)
   1bdbc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bdbe:	4b1e      	ldr	r3, [pc, #120]	; (1be38 <xQueueReceive+0x394>)
   1bdc0:	4798      	blx	r3
   1bdc2:	1e03      	subs	r3, r0, #0
   1bdc4:	d000      	beq.n	1bdc8 <xQueueReceive+0x324>
   1bdc6:	e698      	b.n	1bafa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1bdc8:	4b12      	ldr	r3, [pc, #72]	; (1be14 <xQueueReceive+0x370>)
   1bdca:	4798      	blx	r3
   1bdcc:	e695      	b.n	1bafa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1bdce:	6a3b      	ldr	r3, [r7, #32]
   1bdd0:	0018      	movs	r0, r3
   1bdd2:	4b18      	ldr	r3, [pc, #96]	; (1be34 <xQueueReceive+0x390>)
   1bdd4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bdd6:	4b18      	ldr	r3, [pc, #96]	; (1be38 <xQueueReceive+0x394>)
   1bdd8:	4798      	blx	r3
   1bdda:	e68e      	b.n	1bafa <xQueueReceive+0x56>
   1bddc:	0001d979 	.word	0x0001d979
   1bde0:	0001ac59 	.word	0x0001ac59
   1bde4:	0001c505 	.word	0x0001c505
   1bde8:	00018eed 	.word	0x00018eed
   1bdec:	00018c51 	.word	0x00018c51
   1bdf0:	20000110 	.word	0x20000110
   1bdf4:	00018d11 	.word	0x00018d11
   1bdf8:	00018c11 	.word	0x00018c11
   1bdfc:	20000104 	.word	0x20000104
   1be00:	00018cf1 	.word	0x00018cf1
   1be04:	00019649 	.word	0x00019649
   1be08:	00018c31 	.word	0x00018c31
   1be0c:	00019ca5 	.word	0x00019ca5
   1be10:	0001d4e9 	.word	0x0001d4e9
   1be14:	0001ac41 	.word	0x0001ac41
   1be18:	0001ac7d 	.word	0x0001ac7d
   1be1c:	0001d629 	.word	0x0001d629
   1be20:	0001cf11 	.word	0x0001cf11
   1be24:	0001d651 	.word	0x0001d651
   1be28:	0001c645 	.word	0x0001c645
   1be2c:	00019de1 	.word	0x00019de1
   1be30:	0001d3c5 	.word	0x0001d3c5
   1be34:	0001c555 	.word	0x0001c555
   1be38:	0001cf29 	.word	0x0001cf29
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1be3c:	6a3b      	ldr	r3, [r7, #32]
   1be3e:	0018      	movs	r0, r3
   1be40:	4b23      	ldr	r3, [pc, #140]	; (1bed0 <xQueueReceive+0x42c>)
   1be42:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1be44:	4b23      	ldr	r3, [pc, #140]	; (1bed4 <xQueueReceive+0x430>)
   1be46:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1be48:	6a3b      	ldr	r3, [r7, #32]
   1be4a:	0018      	movs	r0, r3
   1be4c:	4b22      	ldr	r3, [pc, #136]	; (1bed8 <xQueueReceive+0x434>)
   1be4e:	4798      	blx	r3
   1be50:	1e03      	subs	r3, r0, #0
   1be52:	d100      	bne.n	1be56 <xQueueReceive+0x3b2>
   1be54:	e651      	b.n	1bafa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1be56:	4b21      	ldr	r3, [pc, #132]	; (1bedc <xQueueReceive+0x438>)
   1be58:	4798      	blx	r3
   1be5a:	0003      	movs	r3, r0
   1be5c:	0018      	movs	r0, r3
   1be5e:	4b20      	ldr	r3, [pc, #128]	; (1bee0 <xQueueReceive+0x43c>)
   1be60:	4798      	blx	r3
   1be62:	0003      	movs	r3, r0
   1be64:	001a      	movs	r2, r3
   1be66:	4b1f      	ldr	r3, [pc, #124]	; (1bee4 <xQueueReceive+0x440>)
   1be68:	881b      	ldrh	r3, [r3, #0]
   1be6a:	4013      	ands	r3, r2
   1be6c:	b29b      	uxth	r3, r3
   1be6e:	2b00      	cmp	r3, #0
   1be70:	d029      	beq.n	1bec6 <xQueueReceive+0x422>
   1be72:	6a3b      	ldr	r3, [r7, #32]
   1be74:	0018      	movs	r0, r3
   1be76:	4b1c      	ldr	r3, [pc, #112]	; (1bee8 <xQueueReceive+0x444>)
   1be78:	4798      	blx	r3
   1be7a:	0003      	movs	r3, r0
   1be7c:	001a      	movs	r2, r3
   1be7e:	4b19      	ldr	r3, [pc, #100]	; (1bee4 <xQueueReceive+0x440>)
   1be80:	881b      	ldrh	r3, [r3, #0]
   1be82:	4013      	ands	r3, r2
   1be84:	b29b      	uxth	r3, r3
   1be86:	2b00      	cmp	r3, #0
   1be88:	d01d      	beq.n	1bec6 <xQueueReceive+0x422>
   1be8a:	6a3b      	ldr	r3, [r7, #32]
   1be8c:	0018      	movs	r0, r3
   1be8e:	4b17      	ldr	r3, [pc, #92]	; (1beec <xQueueReceive+0x448>)
   1be90:	4798      	blx	r3
   1be92:	0003      	movs	r3, r0
   1be94:	001a      	movs	r2, r3
   1be96:	4b16      	ldr	r3, [pc, #88]	; (1bef0 <xQueueReceive+0x44c>)
   1be98:	5c9b      	ldrb	r3, [r3, r2]
   1be9a:	3350      	adds	r3, #80	; 0x50
   1be9c:	b2db      	uxtb	r3, r3
   1be9e:	001d      	movs	r5, r3
   1bea0:	6a3b      	ldr	r3, [r7, #32]
   1bea2:	0018      	movs	r0, r3
   1bea4:	4b11      	ldr	r3, [pc, #68]	; (1beec <xQueueReceive+0x448>)
   1bea6:	4798      	blx	r3
   1bea8:	0003      	movs	r3, r0
   1beaa:	001a      	movs	r2, r3
   1beac:	4b10      	ldr	r3, [pc, #64]	; (1bef0 <xQueueReceive+0x44c>)
   1beae:	5c9c      	ldrb	r4, [r3, r2]
   1beb0:	6a3b      	ldr	r3, [r7, #32]
   1beb2:	0018      	movs	r0, r3
   1beb4:	4b0f      	ldr	r3, [pc, #60]	; (1bef4 <xQueueReceive+0x450>)
   1beb6:	4798      	blx	r3
   1beb8:	0003      	movs	r3, r0
   1beba:	b2db      	uxtb	r3, r3
   1bebc:	001a      	movs	r2, r3
   1bebe:	0021      	movs	r1, r4
   1bec0:	0028      	movs	r0, r5
   1bec2:	4b0d      	ldr	r3, [pc, #52]	; (1bef8 <xQueueReceive+0x454>)
   1bec4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bec6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bec8:	0018      	movs	r0, r3
   1beca:	46bd      	mov	sp, r7
   1becc:	b00a      	add	sp, #40	; 0x28
   1bece:	bdb0      	pop	{r4, r5, r7, pc}
   1bed0:	0001c555 	.word	0x0001c555
   1bed4:	0001cf29 	.word	0x0001cf29
   1bed8:	0001c645 	.word	0x0001c645
   1bedc:	00018eed 	.word	0x00018eed
   1bee0:	00018c51 	.word	0x00018c51
   1bee4:	20000110 	.word	0x20000110
   1bee8:	00018d11 	.word	0x00018d11
   1beec:	00018c11 	.word	0x00018c11
   1bef0:	20000104 	.word	0x20000104
   1bef4:	00018cf1 	.word	0x00018cf1
   1bef8:	00019649 	.word	0x00019649

0001befc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1befc:	b5b0      	push	{r4, r5, r7, lr}
   1befe:	b08a      	sub	sp, #40	; 0x28
   1bf00:	af00      	add	r7, sp, #0
   1bf02:	6078      	str	r0, [r7, #4]
   1bf04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1bf06:	2300      	movs	r3, #0
   1bf08:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bf0a:	687b      	ldr	r3, [r7, #4]
   1bf0c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1bf0e:	2300      	movs	r3, #0
   1bf10:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bf12:	69fb      	ldr	r3, [r7, #28]
   1bf14:	2b00      	cmp	r3, #0
   1bf16:	d101      	bne.n	1bf1c <xQueueSemaphoreTake+0x20>
   1bf18:	b672      	cpsid	i
   1bf1a:	e7fe      	b.n	1bf1a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bf1c:	69fb      	ldr	r3, [r7, #28]
   1bf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d001      	beq.n	1bf28 <xQueueSemaphoreTake+0x2c>
   1bf24:	b672      	cpsid	i
   1bf26:	e7fe      	b.n	1bf26 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf28:	4bcb      	ldr	r3, [pc, #812]	; (1c258 <xQueueSemaphoreTake+0x35c>)
   1bf2a:	4798      	blx	r3
   1bf2c:	1e03      	subs	r3, r0, #0
   1bf2e:	d102      	bne.n	1bf36 <xQueueSemaphoreTake+0x3a>
   1bf30:	683b      	ldr	r3, [r7, #0]
   1bf32:	2b00      	cmp	r3, #0
   1bf34:	d101      	bne.n	1bf3a <xQueueSemaphoreTake+0x3e>
   1bf36:	2301      	movs	r3, #1
   1bf38:	e000      	b.n	1bf3c <xQueueSemaphoreTake+0x40>
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	2b00      	cmp	r3, #0
   1bf3e:	d101      	bne.n	1bf44 <xQueueSemaphoreTake+0x48>
   1bf40:	b672      	cpsid	i
   1bf42:	e7fe      	b.n	1bf42 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bf44:	4bc5      	ldr	r3, [pc, #788]	; (1c25c <xQueueSemaphoreTake+0x360>)
   1bf46:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1bf48:	69fb      	ldr	r3, [r7, #28]
   1bf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf4c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1bf4e:	69bb      	ldr	r3, [r7, #24]
   1bf50:	2b00      	cmp	r3, #0
   1bf52:	d100      	bne.n	1bf56 <xQueueSemaphoreTake+0x5a>
   1bf54:	e080      	b.n	1c058 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1bf56:	4bc2      	ldr	r3, [pc, #776]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1bf58:	4798      	blx	r3
   1bf5a:	0003      	movs	r3, r0
   1bf5c:	0018      	movs	r0, r3
   1bf5e:	4bc1      	ldr	r3, [pc, #772]	; (1c264 <xQueueSemaphoreTake+0x368>)
   1bf60:	4798      	blx	r3
   1bf62:	0003      	movs	r3, r0
   1bf64:	001a      	movs	r2, r3
   1bf66:	4bc0      	ldr	r3, [pc, #768]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1bf68:	881b      	ldrh	r3, [r3, #0]
   1bf6a:	4013      	ands	r3, r2
   1bf6c:	b29b      	uxth	r3, r3
   1bf6e:	2b00      	cmp	r3, #0
   1bf70:	d029      	beq.n	1bfc6 <xQueueSemaphoreTake+0xca>
   1bf72:	69fb      	ldr	r3, [r7, #28]
   1bf74:	0018      	movs	r0, r3
   1bf76:	4bbd      	ldr	r3, [pc, #756]	; (1c26c <xQueueSemaphoreTake+0x370>)
   1bf78:	4798      	blx	r3
   1bf7a:	0003      	movs	r3, r0
   1bf7c:	001a      	movs	r2, r3
   1bf7e:	4bba      	ldr	r3, [pc, #744]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1bf80:	881b      	ldrh	r3, [r3, #0]
   1bf82:	4013      	ands	r3, r2
   1bf84:	b29b      	uxth	r3, r3
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d01d      	beq.n	1bfc6 <xQueueSemaphoreTake+0xca>
   1bf8a:	69fb      	ldr	r3, [r7, #28]
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	4bb8      	ldr	r3, [pc, #736]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1bf90:	4798      	blx	r3
   1bf92:	0003      	movs	r3, r0
   1bf94:	001a      	movs	r2, r3
   1bf96:	4bb7      	ldr	r3, [pc, #732]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1bf98:	5c9b      	ldrb	r3, [r3, r2]
   1bf9a:	3328      	adds	r3, #40	; 0x28
   1bf9c:	b2db      	uxtb	r3, r3
   1bf9e:	001d      	movs	r5, r3
   1bfa0:	69fb      	ldr	r3, [r7, #28]
   1bfa2:	0018      	movs	r0, r3
   1bfa4:	4bb2      	ldr	r3, [pc, #712]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1bfa6:	4798      	blx	r3
   1bfa8:	0003      	movs	r3, r0
   1bfaa:	001a      	movs	r2, r3
   1bfac:	4bb1      	ldr	r3, [pc, #708]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1bfae:	5c9c      	ldrb	r4, [r3, r2]
   1bfb0:	69fb      	ldr	r3, [r7, #28]
   1bfb2:	0018      	movs	r0, r3
   1bfb4:	4bb0      	ldr	r3, [pc, #704]	; (1c278 <xQueueSemaphoreTake+0x37c>)
   1bfb6:	4798      	blx	r3
   1bfb8:	0003      	movs	r3, r0
   1bfba:	b2db      	uxtb	r3, r3
   1bfbc:	001a      	movs	r2, r3
   1bfbe:	0021      	movs	r1, r4
   1bfc0:	0028      	movs	r0, r5
   1bfc2:	4bae      	ldr	r3, [pc, #696]	; (1c27c <xQueueSemaphoreTake+0x380>)
   1bfc4:	4798      	blx	r3
   1bfc6:	69fb      	ldr	r3, [r7, #28]
   1bfc8:	0018      	movs	r0, r3
   1bfca:	4ba9      	ldr	r3, [pc, #676]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1bfcc:	4798      	blx	r3
   1bfce:	0003      	movs	r3, r0
   1bfd0:	001a      	movs	r2, r3
   1bfd2:	4ba8      	ldr	r3, [pc, #672]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1bfd4:	5c9c      	ldrb	r4, [r3, r2]
   1bfd6:	69fb      	ldr	r3, [r7, #28]
   1bfd8:	0018      	movs	r0, r3
   1bfda:	4ba7      	ldr	r3, [pc, #668]	; (1c278 <xQueueSemaphoreTake+0x37c>)
   1bfdc:	4798      	blx	r3
   1bfde:	0003      	movs	r3, r0
   1bfe0:	b2dd      	uxtb	r5, r3
   1bfe2:	69fb      	ldr	r3, [r7, #28]
   1bfe4:	0018      	movs	r0, r3
   1bfe6:	4ba2      	ldr	r3, [pc, #648]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1bfe8:	4798      	blx	r3
   1bfea:	0003      	movs	r3, r0
   1bfec:	001a      	movs	r2, r3
   1bfee:	4ba1      	ldr	r3, [pc, #644]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1bff0:	5c9b      	ldrb	r3, [r3, r2]
   1bff2:	2b02      	cmp	r3, #2
   1bff4:	d108      	bne.n	1c008 <xQueueSemaphoreTake+0x10c>
   1bff6:	4b9a      	ldr	r3, [pc, #616]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1bff8:	4798      	blx	r3
   1bffa:	0003      	movs	r3, r0
   1bffc:	0018      	movs	r0, r3
   1bffe:	4ba0      	ldr	r3, [pc, #640]	; (1c280 <xQueueSemaphoreTake+0x384>)
   1c000:	4798      	blx	r3
   1c002:	0003      	movs	r3, r0
   1c004:	b2db      	uxtb	r3, r3
   1c006:	e004      	b.n	1c012 <xQueueSemaphoreTake+0x116>
   1c008:	69fb      	ldr	r3, [r7, #28]
   1c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c00c:	b2db      	uxtb	r3, r3
   1c00e:	3b01      	subs	r3, #1
   1c010:	b2db      	uxtb	r3, r3
   1c012:	001a      	movs	r2, r3
   1c014:	0029      	movs	r1, r5
   1c016:	0020      	movs	r0, r4
   1c018:	4b9a      	ldr	r3, [pc, #616]	; (1c284 <xQueueSemaphoreTake+0x388>)
   1c01a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c01c:	69bb      	ldr	r3, [r7, #24]
   1c01e:	1e5a      	subs	r2, r3, #1
   1c020:	69fb      	ldr	r3, [r7, #28]
   1c022:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c024:	69fb      	ldr	r3, [r7, #28]
   1c026:	681b      	ldr	r3, [r3, #0]
   1c028:	2b00      	cmp	r3, #0
   1c02a:	d104      	bne.n	1c036 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c02c:	4b96      	ldr	r3, [pc, #600]	; (1c288 <xQueueSemaphoreTake+0x38c>)
   1c02e:	4798      	blx	r3
   1c030:	0002      	movs	r2, r0
   1c032:	69fb      	ldr	r3, [r7, #28]
   1c034:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c036:	69fb      	ldr	r3, [r7, #28]
   1c038:	691b      	ldr	r3, [r3, #16]
   1c03a:	2b00      	cmp	r3, #0
   1c03c:	d008      	beq.n	1c050 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c03e:	69fb      	ldr	r3, [r7, #28]
   1c040:	3310      	adds	r3, #16
   1c042:	0018      	movs	r0, r3
   1c044:	4b91      	ldr	r3, [pc, #580]	; (1c28c <xQueueSemaphoreTake+0x390>)
   1c046:	4798      	blx	r3
   1c048:	1e03      	subs	r3, r0, #0
   1c04a:	d001      	beq.n	1c050 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c04c:	4b90      	ldr	r3, [pc, #576]	; (1c290 <xQueueSemaphoreTake+0x394>)
   1c04e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c050:	4b90      	ldr	r3, [pc, #576]	; (1c294 <xQueueSemaphoreTake+0x398>)
   1c052:	4798      	blx	r3
				return pdPASS;
   1c054:	2301      	movs	r3, #1
   1c056:	e18b      	b.n	1c370 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c058:	683b      	ldr	r3, [r7, #0]
   1c05a:	2b00      	cmp	r3, #0
   1c05c:	d140      	bne.n	1c0e0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c05e:	6a3b      	ldr	r3, [r7, #32]
   1c060:	2b00      	cmp	r3, #0
   1c062:	d001      	beq.n	1c068 <xQueueSemaphoreTake+0x16c>
   1c064:	b672      	cpsid	i
   1c066:	e7fe      	b.n	1c066 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c068:	4b8a      	ldr	r3, [pc, #552]	; (1c294 <xQueueSemaphoreTake+0x398>)
   1c06a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c06c:	4b7c      	ldr	r3, [pc, #496]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1c06e:	4798      	blx	r3
   1c070:	0003      	movs	r3, r0
   1c072:	0018      	movs	r0, r3
   1c074:	4b7b      	ldr	r3, [pc, #492]	; (1c264 <xQueueSemaphoreTake+0x368>)
   1c076:	4798      	blx	r3
   1c078:	0003      	movs	r3, r0
   1c07a:	001a      	movs	r2, r3
   1c07c:	4b7a      	ldr	r3, [pc, #488]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1c07e:	881b      	ldrh	r3, [r3, #0]
   1c080:	4013      	ands	r3, r2
   1c082:	b29b      	uxth	r3, r3
   1c084:	2b00      	cmp	r3, #0
   1c086:	d029      	beq.n	1c0dc <xQueueSemaphoreTake+0x1e0>
   1c088:	69fb      	ldr	r3, [r7, #28]
   1c08a:	0018      	movs	r0, r3
   1c08c:	4b77      	ldr	r3, [pc, #476]	; (1c26c <xQueueSemaphoreTake+0x370>)
   1c08e:	4798      	blx	r3
   1c090:	0003      	movs	r3, r0
   1c092:	001a      	movs	r2, r3
   1c094:	4b74      	ldr	r3, [pc, #464]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1c096:	881b      	ldrh	r3, [r3, #0]
   1c098:	4013      	ands	r3, r2
   1c09a:	b29b      	uxth	r3, r3
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d01d      	beq.n	1c0dc <xQueueSemaphoreTake+0x1e0>
   1c0a0:	69fb      	ldr	r3, [r7, #28]
   1c0a2:	0018      	movs	r0, r3
   1c0a4:	4b72      	ldr	r3, [pc, #456]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1c0a6:	4798      	blx	r3
   1c0a8:	0003      	movs	r3, r0
   1c0aa:	001a      	movs	r2, r3
   1c0ac:	4b71      	ldr	r3, [pc, #452]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1c0ae:	5c9b      	ldrb	r3, [r3, r2]
   1c0b0:	3350      	adds	r3, #80	; 0x50
   1c0b2:	b2db      	uxtb	r3, r3
   1c0b4:	001d      	movs	r5, r3
   1c0b6:	69fb      	ldr	r3, [r7, #28]
   1c0b8:	0018      	movs	r0, r3
   1c0ba:	4b6d      	ldr	r3, [pc, #436]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1c0bc:	4798      	blx	r3
   1c0be:	0003      	movs	r3, r0
   1c0c0:	001a      	movs	r2, r3
   1c0c2:	4b6c      	ldr	r3, [pc, #432]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1c0c4:	5c9c      	ldrb	r4, [r3, r2]
   1c0c6:	69fb      	ldr	r3, [r7, #28]
   1c0c8:	0018      	movs	r0, r3
   1c0ca:	4b6b      	ldr	r3, [pc, #428]	; (1c278 <xQueueSemaphoreTake+0x37c>)
   1c0cc:	4798      	blx	r3
   1c0ce:	0003      	movs	r3, r0
   1c0d0:	b2db      	uxtb	r3, r3
   1c0d2:	001a      	movs	r2, r3
   1c0d4:	0021      	movs	r1, r4
   1c0d6:	0028      	movs	r0, r5
   1c0d8:	4b68      	ldr	r3, [pc, #416]	; (1c27c <xQueueSemaphoreTake+0x380>)
   1c0da:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c0dc:	2300      	movs	r3, #0
   1c0de:	e147      	b.n	1c370 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0e2:	2b00      	cmp	r3, #0
   1c0e4:	d106      	bne.n	1c0f4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c0e6:	230c      	movs	r3, #12
   1c0e8:	18fb      	adds	r3, r7, r3
   1c0ea:	0018      	movs	r0, r3
   1c0ec:	4b6a      	ldr	r3, [pc, #424]	; (1c298 <xQueueSemaphoreTake+0x39c>)
   1c0ee:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c0f0:	2301      	movs	r3, #1
   1c0f2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c0f4:	4b67      	ldr	r3, [pc, #412]	; (1c294 <xQueueSemaphoreTake+0x398>)
   1c0f6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c0f8:	4b68      	ldr	r3, [pc, #416]	; (1c29c <xQueueSemaphoreTake+0x3a0>)
   1c0fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c0fc:	4b57      	ldr	r3, [pc, #348]	; (1c25c <xQueueSemaphoreTake+0x360>)
   1c0fe:	4798      	blx	r3
   1c100:	69fb      	ldr	r3, [r7, #28]
   1c102:	2244      	movs	r2, #68	; 0x44
   1c104:	5c9b      	ldrb	r3, [r3, r2]
   1c106:	b25b      	sxtb	r3, r3
   1c108:	3301      	adds	r3, #1
   1c10a:	d103      	bne.n	1c114 <xQueueSemaphoreTake+0x218>
   1c10c:	69fb      	ldr	r3, [r7, #28]
   1c10e:	2244      	movs	r2, #68	; 0x44
   1c110:	2100      	movs	r1, #0
   1c112:	5499      	strb	r1, [r3, r2]
   1c114:	69fb      	ldr	r3, [r7, #28]
   1c116:	2245      	movs	r2, #69	; 0x45
   1c118:	5c9b      	ldrb	r3, [r3, r2]
   1c11a:	b25b      	sxtb	r3, r3
   1c11c:	3301      	adds	r3, #1
   1c11e:	d103      	bne.n	1c128 <xQueueSemaphoreTake+0x22c>
   1c120:	69fb      	ldr	r3, [r7, #28]
   1c122:	2245      	movs	r2, #69	; 0x45
   1c124:	2100      	movs	r1, #0
   1c126:	5499      	strb	r1, [r3, r2]
   1c128:	4b5a      	ldr	r3, [pc, #360]	; (1c294 <xQueueSemaphoreTake+0x398>)
   1c12a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c12c:	003a      	movs	r2, r7
   1c12e:	230c      	movs	r3, #12
   1c130:	18fb      	adds	r3, r7, r3
   1c132:	0011      	movs	r1, r2
   1c134:	0018      	movs	r0, r3
   1c136:	4b5a      	ldr	r3, [pc, #360]	; (1c2a0 <xQueueSemaphoreTake+0x3a4>)
   1c138:	4798      	blx	r3
   1c13a:	1e03      	subs	r3, r0, #0
   1c13c:	d000      	beq.n	1c140 <xQueueSemaphoreTake+0x244>
   1c13e:	e0bd      	b.n	1c2bc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c140:	69fb      	ldr	r3, [r7, #28]
   1c142:	0018      	movs	r0, r3
   1c144:	4b57      	ldr	r3, [pc, #348]	; (1c2a4 <xQueueSemaphoreTake+0x3a8>)
   1c146:	4798      	blx	r3
   1c148:	1e03      	subs	r3, r0, #0
   1c14a:	d100      	bne.n	1c14e <xQueueSemaphoreTake+0x252>
   1c14c:	e07c      	b.n	1c248 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c14e:	4b44      	ldr	r3, [pc, #272]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1c150:	4798      	blx	r3
   1c152:	0003      	movs	r3, r0
   1c154:	0018      	movs	r0, r3
   1c156:	4b43      	ldr	r3, [pc, #268]	; (1c264 <xQueueSemaphoreTake+0x368>)
   1c158:	4798      	blx	r3
   1c15a:	0003      	movs	r3, r0
   1c15c:	001a      	movs	r2, r3
   1c15e:	4b42      	ldr	r3, [pc, #264]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1c160:	881b      	ldrh	r3, [r3, #0]
   1c162:	4013      	ands	r3, r2
   1c164:	b29b      	uxth	r3, r3
   1c166:	2b00      	cmp	r3, #0
   1c168:	d029      	beq.n	1c1be <xQueueSemaphoreTake+0x2c2>
   1c16a:	69fb      	ldr	r3, [r7, #28]
   1c16c:	0018      	movs	r0, r3
   1c16e:	4b3f      	ldr	r3, [pc, #252]	; (1c26c <xQueueSemaphoreTake+0x370>)
   1c170:	4798      	blx	r3
   1c172:	0003      	movs	r3, r0
   1c174:	001a      	movs	r2, r3
   1c176:	4b3c      	ldr	r3, [pc, #240]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1c178:	881b      	ldrh	r3, [r3, #0]
   1c17a:	4013      	ands	r3, r2
   1c17c:	b29b      	uxth	r3, r3
   1c17e:	2b00      	cmp	r3, #0
   1c180:	d01d      	beq.n	1c1be <xQueueSemaphoreTake+0x2c2>
   1c182:	69fb      	ldr	r3, [r7, #28]
   1c184:	0018      	movs	r0, r3
   1c186:	4b3a      	ldr	r3, [pc, #232]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1c188:	4798      	blx	r3
   1c18a:	0003      	movs	r3, r0
   1c18c:	001a      	movs	r2, r3
   1c18e:	4b39      	ldr	r3, [pc, #228]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1c190:	5c9b      	ldrb	r3, [r3, r2]
   1c192:	3368      	adds	r3, #104	; 0x68
   1c194:	b2db      	uxtb	r3, r3
   1c196:	001d      	movs	r5, r3
   1c198:	69fb      	ldr	r3, [r7, #28]
   1c19a:	0018      	movs	r0, r3
   1c19c:	4b34      	ldr	r3, [pc, #208]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1c19e:	4798      	blx	r3
   1c1a0:	0003      	movs	r3, r0
   1c1a2:	001a      	movs	r2, r3
   1c1a4:	4b33      	ldr	r3, [pc, #204]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1c1a6:	5c9c      	ldrb	r4, [r3, r2]
   1c1a8:	69fb      	ldr	r3, [r7, #28]
   1c1aa:	0018      	movs	r0, r3
   1c1ac:	4b32      	ldr	r3, [pc, #200]	; (1c278 <xQueueSemaphoreTake+0x37c>)
   1c1ae:	4798      	blx	r3
   1c1b0:	0003      	movs	r3, r0
   1c1b2:	b2db      	uxtb	r3, r3
   1c1b4:	001a      	movs	r2, r3
   1c1b6:	0021      	movs	r1, r4
   1c1b8:	0028      	movs	r0, r5
   1c1ba:	4b30      	ldr	r3, [pc, #192]	; (1c27c <xQueueSemaphoreTake+0x380>)
   1c1bc:	4798      	blx	r3
   1c1be:	69fb      	ldr	r3, [r7, #28]
   1c1c0:	0018      	movs	r0, r3
   1c1c2:	4b2b      	ldr	r3, [pc, #172]	; (1c270 <xQueueSemaphoreTake+0x374>)
   1c1c4:	4798      	blx	r3
   1c1c6:	0003      	movs	r3, r0
   1c1c8:	001a      	movs	r2, r3
   1c1ca:	4b2a      	ldr	r3, [pc, #168]	; (1c274 <xQueueSemaphoreTake+0x378>)
   1c1cc:	5c9b      	ldrb	r3, [r3, r2]
   1c1ce:	2b02      	cmp	r3, #2
   1c1d0:	d018      	beq.n	1c204 <xQueueSemaphoreTake+0x308>
   1c1d2:	4b23      	ldr	r3, [pc, #140]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1c1d4:	4798      	blx	r3
   1c1d6:	0003      	movs	r3, r0
   1c1d8:	0018      	movs	r0, r3
   1c1da:	4b22      	ldr	r3, [pc, #136]	; (1c264 <xQueueSemaphoreTake+0x368>)
   1c1dc:	4798      	blx	r3
   1c1de:	0003      	movs	r3, r0
   1c1e0:	001a      	movs	r2, r3
   1c1e2:	4b21      	ldr	r3, [pc, #132]	; (1c268 <xQueueSemaphoreTake+0x36c>)
   1c1e4:	881b      	ldrh	r3, [r3, #0]
   1c1e6:	4013      	ands	r3, r2
   1c1e8:	b29b      	uxth	r3, r3
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d00a      	beq.n	1c204 <xQueueSemaphoreTake+0x308>
   1c1ee:	4b1c      	ldr	r3, [pc, #112]	; (1c260 <xQueueSemaphoreTake+0x364>)
   1c1f0:	4798      	blx	r3
   1c1f2:	0003      	movs	r3, r0
   1c1f4:	0018      	movs	r0, r3
   1c1f6:	4b22      	ldr	r3, [pc, #136]	; (1c280 <xQueueSemaphoreTake+0x384>)
   1c1f8:	4798      	blx	r3
   1c1fa:	0003      	movs	r3, r0
   1c1fc:	b2db      	uxtb	r3, r3
   1c1fe:	0018      	movs	r0, r3
   1c200:	4b29      	ldr	r3, [pc, #164]	; (1c2a8 <xQueueSemaphoreTake+0x3ac>)
   1c202:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c204:	69fb      	ldr	r3, [r7, #28]
   1c206:	681b      	ldr	r3, [r3, #0]
   1c208:	2b00      	cmp	r3, #0
   1c20a:	d10a      	bne.n	1c222 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c20c:	4b13      	ldr	r3, [pc, #76]	; (1c25c <xQueueSemaphoreTake+0x360>)
   1c20e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c210:	69fb      	ldr	r3, [r7, #28]
   1c212:	685b      	ldr	r3, [r3, #4]
   1c214:	0018      	movs	r0, r3
   1c216:	4b25      	ldr	r3, [pc, #148]	; (1c2ac <xQueueSemaphoreTake+0x3b0>)
   1c218:	4798      	blx	r3
   1c21a:	0003      	movs	r3, r0
   1c21c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c21e:	4b1d      	ldr	r3, [pc, #116]	; (1c294 <xQueueSemaphoreTake+0x398>)
   1c220:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c222:	69fb      	ldr	r3, [r7, #28]
   1c224:	3324      	adds	r3, #36	; 0x24
   1c226:	683a      	ldr	r2, [r7, #0]
   1c228:	0011      	movs	r1, r2
   1c22a:	0018      	movs	r0, r3
   1c22c:	4b20      	ldr	r3, [pc, #128]	; (1c2b0 <xQueueSemaphoreTake+0x3b4>)
   1c22e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c230:	69fb      	ldr	r3, [r7, #28]
   1c232:	0018      	movs	r0, r3
   1c234:	4b1f      	ldr	r3, [pc, #124]	; (1c2b4 <xQueueSemaphoreTake+0x3b8>)
   1c236:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c238:	4b1f      	ldr	r3, [pc, #124]	; (1c2b8 <xQueueSemaphoreTake+0x3bc>)
   1c23a:	4798      	blx	r3
   1c23c:	1e03      	subs	r3, r0, #0
   1c23e:	d000      	beq.n	1c242 <xQueueSemaphoreTake+0x346>
   1c240:	e680      	b.n	1bf44 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c242:	4b13      	ldr	r3, [pc, #76]	; (1c290 <xQueueSemaphoreTake+0x394>)
   1c244:	4798      	blx	r3
   1c246:	e67d      	b.n	1bf44 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c248:	69fb      	ldr	r3, [r7, #28]
   1c24a:	0018      	movs	r0, r3
   1c24c:	4b19      	ldr	r3, [pc, #100]	; (1c2b4 <xQueueSemaphoreTake+0x3b8>)
   1c24e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c250:	4b19      	ldr	r3, [pc, #100]	; (1c2b8 <xQueueSemaphoreTake+0x3bc>)
   1c252:	4798      	blx	r3
   1c254:	e676      	b.n	1bf44 <xQueueSemaphoreTake+0x48>
   1c256:	46c0      	nop			; (mov r8, r8)
   1c258:	0001d979 	.word	0x0001d979
   1c25c:	0001ac59 	.word	0x0001ac59
   1c260:	00018eed 	.word	0x00018eed
   1c264:	00018c51 	.word	0x00018c51
   1c268:	20000110 	.word	0x20000110
   1c26c:	00018d11 	.word	0x00018d11
   1c270:	00018c11 	.word	0x00018c11
   1c274:	20000104 	.word	0x20000104
   1c278:	00018cf1 	.word	0x00018cf1
   1c27c:	00019649 	.word	0x00019649
   1c280:	00018c31 	.word	0x00018c31
   1c284:	00019ca5 	.word	0x00019ca5
   1c288:	0001de45 	.word	0x0001de45
   1c28c:	0001d4e9 	.word	0x0001d4e9
   1c290:	0001ac41 	.word	0x0001ac41
   1c294:	0001ac7d 	.word	0x0001ac7d
   1c298:	0001d629 	.word	0x0001d629
   1c29c:	0001cf11 	.word	0x0001cf11
   1c2a0:	0001d651 	.word	0x0001d651
   1c2a4:	0001c645 	.word	0x0001c645
   1c2a8:	00019de1 	.word	0x00019de1
   1c2ac:	0001d9b1 	.word	0x0001d9b1
   1c2b0:	0001d3c5 	.word	0x0001d3c5
   1c2b4:	0001c555 	.word	0x0001c555
   1c2b8:	0001cf29 	.word	0x0001cf29
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c2bc:	69fb      	ldr	r3, [r7, #28]
   1c2be:	0018      	movs	r0, r3
   1c2c0:	4b2d      	ldr	r3, [pc, #180]	; (1c378 <xQueueSemaphoreTake+0x47c>)
   1c2c2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c2c4:	4b2d      	ldr	r3, [pc, #180]	; (1c37c <xQueueSemaphoreTake+0x480>)
   1c2c6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c2c8:	69fb      	ldr	r3, [r7, #28]
   1c2ca:	0018      	movs	r0, r3
   1c2cc:	4b2c      	ldr	r3, [pc, #176]	; (1c380 <xQueueSemaphoreTake+0x484>)
   1c2ce:	4798      	blx	r3
   1c2d0:	1e03      	subs	r3, r0, #0
   1c2d2:	d100      	bne.n	1c2d6 <xQueueSemaphoreTake+0x3da>
   1c2d4:	e636      	b.n	1bf44 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c2d6:	6a3b      	ldr	r3, [r7, #32]
   1c2d8:	2b00      	cmp	r3, #0
   1c2da:	d010      	beq.n	1c2fe <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c2dc:	4b29      	ldr	r3, [pc, #164]	; (1c384 <xQueueSemaphoreTake+0x488>)
   1c2de:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c2e0:	69fb      	ldr	r3, [r7, #28]
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	4b28      	ldr	r3, [pc, #160]	; (1c388 <xQueueSemaphoreTake+0x48c>)
   1c2e6:	4798      	blx	r3
   1c2e8:	0003      	movs	r3, r0
   1c2ea:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c2ec:	69fb      	ldr	r3, [r7, #28]
   1c2ee:	685b      	ldr	r3, [r3, #4]
   1c2f0:	697a      	ldr	r2, [r7, #20]
   1c2f2:	0011      	movs	r1, r2
   1c2f4:	0018      	movs	r0, r3
   1c2f6:	4b25      	ldr	r3, [pc, #148]	; (1c38c <xQueueSemaphoreTake+0x490>)
   1c2f8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c2fa:	4b25      	ldr	r3, [pc, #148]	; (1c390 <xQueueSemaphoreTake+0x494>)
   1c2fc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c2fe:	4b25      	ldr	r3, [pc, #148]	; (1c394 <xQueueSemaphoreTake+0x498>)
   1c300:	4798      	blx	r3
   1c302:	0003      	movs	r3, r0
   1c304:	0018      	movs	r0, r3
   1c306:	4b24      	ldr	r3, [pc, #144]	; (1c398 <xQueueSemaphoreTake+0x49c>)
   1c308:	4798      	blx	r3
   1c30a:	0003      	movs	r3, r0
   1c30c:	001a      	movs	r2, r3
   1c30e:	4b23      	ldr	r3, [pc, #140]	; (1c39c <xQueueSemaphoreTake+0x4a0>)
   1c310:	881b      	ldrh	r3, [r3, #0]
   1c312:	4013      	ands	r3, r2
   1c314:	b29b      	uxth	r3, r3
   1c316:	2b00      	cmp	r3, #0
   1c318:	d029      	beq.n	1c36e <xQueueSemaphoreTake+0x472>
   1c31a:	69fb      	ldr	r3, [r7, #28]
   1c31c:	0018      	movs	r0, r3
   1c31e:	4b20      	ldr	r3, [pc, #128]	; (1c3a0 <xQueueSemaphoreTake+0x4a4>)
   1c320:	4798      	blx	r3
   1c322:	0003      	movs	r3, r0
   1c324:	001a      	movs	r2, r3
   1c326:	4b1d      	ldr	r3, [pc, #116]	; (1c39c <xQueueSemaphoreTake+0x4a0>)
   1c328:	881b      	ldrh	r3, [r3, #0]
   1c32a:	4013      	ands	r3, r2
   1c32c:	b29b      	uxth	r3, r3
   1c32e:	2b00      	cmp	r3, #0
   1c330:	d01d      	beq.n	1c36e <xQueueSemaphoreTake+0x472>
   1c332:	69fb      	ldr	r3, [r7, #28]
   1c334:	0018      	movs	r0, r3
   1c336:	4b1b      	ldr	r3, [pc, #108]	; (1c3a4 <xQueueSemaphoreTake+0x4a8>)
   1c338:	4798      	blx	r3
   1c33a:	0003      	movs	r3, r0
   1c33c:	001a      	movs	r2, r3
   1c33e:	4b1a      	ldr	r3, [pc, #104]	; (1c3a8 <xQueueSemaphoreTake+0x4ac>)
   1c340:	5c9b      	ldrb	r3, [r3, r2]
   1c342:	3350      	adds	r3, #80	; 0x50
   1c344:	b2db      	uxtb	r3, r3
   1c346:	001d      	movs	r5, r3
   1c348:	69fb      	ldr	r3, [r7, #28]
   1c34a:	0018      	movs	r0, r3
   1c34c:	4b15      	ldr	r3, [pc, #84]	; (1c3a4 <xQueueSemaphoreTake+0x4a8>)
   1c34e:	4798      	blx	r3
   1c350:	0003      	movs	r3, r0
   1c352:	001a      	movs	r2, r3
   1c354:	4b14      	ldr	r3, [pc, #80]	; (1c3a8 <xQueueSemaphoreTake+0x4ac>)
   1c356:	5c9c      	ldrb	r4, [r3, r2]
   1c358:	69fb      	ldr	r3, [r7, #28]
   1c35a:	0018      	movs	r0, r3
   1c35c:	4b13      	ldr	r3, [pc, #76]	; (1c3ac <xQueueSemaphoreTake+0x4b0>)
   1c35e:	4798      	blx	r3
   1c360:	0003      	movs	r3, r0
   1c362:	b2db      	uxtb	r3, r3
   1c364:	001a      	movs	r2, r3
   1c366:	0021      	movs	r1, r4
   1c368:	0028      	movs	r0, r5
   1c36a:	4b11      	ldr	r3, [pc, #68]	; (1c3b0 <xQueueSemaphoreTake+0x4b4>)
   1c36c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c36e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c370:	0018      	movs	r0, r3
   1c372:	46bd      	mov	sp, r7
   1c374:	b00a      	add	sp, #40	; 0x28
   1c376:	bdb0      	pop	{r4, r5, r7, pc}
   1c378:	0001c555 	.word	0x0001c555
   1c37c:	0001cf29 	.word	0x0001cf29
   1c380:	0001c645 	.word	0x0001c645
   1c384:	0001ac59 	.word	0x0001ac59
   1c388:	0001c3f7 	.word	0x0001c3f7
   1c38c:	0001dca9 	.word	0x0001dca9
   1c390:	0001ac7d 	.word	0x0001ac7d
   1c394:	00018eed 	.word	0x00018eed
   1c398:	00018c51 	.word	0x00018c51
   1c39c:	20000110 	.word	0x20000110
   1c3a0:	00018d11 	.word	0x00018d11
   1c3a4:	00018c11 	.word	0x00018c11
   1c3a8:	20000104 	.word	0x20000104
   1c3ac:	00018cf1 	.word	0x00018cf1
   1c3b0:	00019649 	.word	0x00019649

0001c3b4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c3b4:	b580      	push	{r7, lr}
   1c3b6:	b082      	sub	sp, #8
   1c3b8:	af00      	add	r7, sp, #0
   1c3ba:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c3bc:	687b      	ldr	r3, [r7, #4]
   1c3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c3c0:	0018      	movs	r0, r3
   1c3c2:	46bd      	mov	sp, r7
   1c3c4:	b002      	add	sp, #8
   1c3c6:	bd80      	pop	{r7, pc}

0001c3c8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c3c8:	b580      	push	{r7, lr}
   1c3ca:	b082      	sub	sp, #8
   1c3cc:	af00      	add	r7, sp, #0
   1c3ce:	6078      	str	r0, [r7, #4]
   1c3d0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c3d2:	687b      	ldr	r3, [r7, #4]
   1c3d4:	683a      	ldr	r2, [r7, #0]
   1c3d6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c3d8:	46c0      	nop			; (mov r8, r8)
   1c3da:	46bd      	mov	sp, r7
   1c3dc:	b002      	add	sp, #8
   1c3de:	bd80      	pop	{r7, pc}

0001c3e0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c3e0:	b580      	push	{r7, lr}
   1c3e2:	b082      	sub	sp, #8
   1c3e4:	af00      	add	r7, sp, #0
   1c3e6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c3e8:	687b      	ldr	r3, [r7, #4]
   1c3ea:	2250      	movs	r2, #80	; 0x50
   1c3ec:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c3ee:	0018      	movs	r0, r3
   1c3f0:	46bd      	mov	sp, r7
   1c3f2:	b002      	add	sp, #8
   1c3f4:	bd80      	pop	{r7, pc}

0001c3f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c3f6:	b580      	push	{r7, lr}
   1c3f8:	b084      	sub	sp, #16
   1c3fa:	af00      	add	r7, sp, #0
   1c3fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c3fe:	687b      	ldr	r3, [r7, #4]
   1c400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c402:	2b00      	cmp	r3, #0
   1c404:	d006      	beq.n	1c414 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c406:	687b      	ldr	r3, [r7, #4]
   1c408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c40a:	681b      	ldr	r3, [r3, #0]
   1c40c:	2205      	movs	r2, #5
   1c40e:	1ad3      	subs	r3, r2, r3
   1c410:	60fb      	str	r3, [r7, #12]
   1c412:	e001      	b.n	1c418 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c414:	2300      	movs	r3, #0
   1c416:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c418:	68fb      	ldr	r3, [r7, #12]
	}
   1c41a:	0018      	movs	r0, r3
   1c41c:	46bd      	mov	sp, r7
   1c41e:	b004      	add	sp, #16
   1c420:	bd80      	pop	{r7, pc}
	...

0001c424 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c424:	b580      	push	{r7, lr}
   1c426:	b086      	sub	sp, #24
   1c428:	af00      	add	r7, sp, #0
   1c42a:	60f8      	str	r0, [r7, #12]
   1c42c:	60b9      	str	r1, [r7, #8]
   1c42e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c430:	2300      	movs	r3, #0
   1c432:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c434:	68fb      	ldr	r3, [r7, #12]
   1c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c438:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c43a:	68fb      	ldr	r3, [r7, #12]
   1c43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c43e:	2b00      	cmp	r3, #0
   1c440:	d10e      	bne.n	1c460 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c442:	68fb      	ldr	r3, [r7, #12]
   1c444:	681b      	ldr	r3, [r3, #0]
   1c446:	2b00      	cmp	r3, #0
   1c448:	d14e      	bne.n	1c4e8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c44a:	68fb      	ldr	r3, [r7, #12]
   1c44c:	685b      	ldr	r3, [r3, #4]
   1c44e:	0018      	movs	r0, r3
   1c450:	4b2a      	ldr	r3, [pc, #168]	; (1c4fc <prvCopyDataToQueue+0xd8>)
   1c452:	4798      	blx	r3
   1c454:	0003      	movs	r3, r0
   1c456:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c458:	68fb      	ldr	r3, [r7, #12]
   1c45a:	2200      	movs	r2, #0
   1c45c:	605a      	str	r2, [r3, #4]
   1c45e:	e043      	b.n	1c4e8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c460:	687b      	ldr	r3, [r7, #4]
   1c462:	2b00      	cmp	r3, #0
   1c464:	d119      	bne.n	1c49a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c466:	68fb      	ldr	r3, [r7, #12]
   1c468:	6898      	ldr	r0, [r3, #8]
   1c46a:	68fb      	ldr	r3, [r7, #12]
   1c46c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c46e:	68bb      	ldr	r3, [r7, #8]
   1c470:	0019      	movs	r1, r3
   1c472:	4b23      	ldr	r3, [pc, #140]	; (1c500 <prvCopyDataToQueue+0xdc>)
   1c474:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c476:	68fb      	ldr	r3, [r7, #12]
   1c478:	689a      	ldr	r2, [r3, #8]
   1c47a:	68fb      	ldr	r3, [r7, #12]
   1c47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c47e:	18d2      	adds	r2, r2, r3
   1c480:	68fb      	ldr	r3, [r7, #12]
   1c482:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c484:	68fb      	ldr	r3, [r7, #12]
   1c486:	689a      	ldr	r2, [r3, #8]
   1c488:	68fb      	ldr	r3, [r7, #12]
   1c48a:	685b      	ldr	r3, [r3, #4]
   1c48c:	429a      	cmp	r2, r3
   1c48e:	d32b      	bcc.n	1c4e8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c490:	68fb      	ldr	r3, [r7, #12]
   1c492:	681a      	ldr	r2, [r3, #0]
   1c494:	68fb      	ldr	r3, [r7, #12]
   1c496:	609a      	str	r2, [r3, #8]
   1c498:	e026      	b.n	1c4e8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c49a:	68fb      	ldr	r3, [r7, #12]
   1c49c:	68d8      	ldr	r0, [r3, #12]
   1c49e:	68fb      	ldr	r3, [r7, #12]
   1c4a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c4a2:	68bb      	ldr	r3, [r7, #8]
   1c4a4:	0019      	movs	r1, r3
   1c4a6:	4b16      	ldr	r3, [pc, #88]	; (1c500 <prvCopyDataToQueue+0xdc>)
   1c4a8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c4aa:	68fb      	ldr	r3, [r7, #12]
   1c4ac:	68da      	ldr	r2, [r3, #12]
   1c4ae:	68fb      	ldr	r3, [r7, #12]
   1c4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4b2:	425b      	negs	r3, r3
   1c4b4:	18d2      	adds	r2, r2, r3
   1c4b6:	68fb      	ldr	r3, [r7, #12]
   1c4b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c4ba:	68fb      	ldr	r3, [r7, #12]
   1c4bc:	68da      	ldr	r2, [r3, #12]
   1c4be:	68fb      	ldr	r3, [r7, #12]
   1c4c0:	681b      	ldr	r3, [r3, #0]
   1c4c2:	429a      	cmp	r2, r3
   1c4c4:	d207      	bcs.n	1c4d6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c4c6:	68fb      	ldr	r3, [r7, #12]
   1c4c8:	685a      	ldr	r2, [r3, #4]
   1c4ca:	68fb      	ldr	r3, [r7, #12]
   1c4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4ce:	425b      	negs	r3, r3
   1c4d0:	18d2      	adds	r2, r2, r3
   1c4d2:	68fb      	ldr	r3, [r7, #12]
   1c4d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c4d6:	687b      	ldr	r3, [r7, #4]
   1c4d8:	2b02      	cmp	r3, #2
   1c4da:	d105      	bne.n	1c4e8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c4dc:	693b      	ldr	r3, [r7, #16]
   1c4de:	2b00      	cmp	r3, #0
   1c4e0:	d002      	beq.n	1c4e8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c4e2:	693b      	ldr	r3, [r7, #16]
   1c4e4:	3b01      	subs	r3, #1
   1c4e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c4e8:	693b      	ldr	r3, [r7, #16]
   1c4ea:	1c5a      	adds	r2, r3, #1
   1c4ec:	68fb      	ldr	r3, [r7, #12]
   1c4ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c4f0:	697b      	ldr	r3, [r7, #20]
}
   1c4f2:	0018      	movs	r0, r3
   1c4f4:	46bd      	mov	sp, r7
   1c4f6:	b006      	add	sp, #24
   1c4f8:	bd80      	pop	{r7, pc}
   1c4fa:	46c0      	nop			; (mov r8, r8)
   1c4fc:	0001db41 	.word	0x0001db41
   1c500:	000361cd 	.word	0x000361cd

0001c504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c504:	b580      	push	{r7, lr}
   1c506:	b082      	sub	sp, #8
   1c508:	af00      	add	r7, sp, #0
   1c50a:	6078      	str	r0, [r7, #4]
   1c50c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c50e:	687b      	ldr	r3, [r7, #4]
   1c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c512:	2b00      	cmp	r3, #0
   1c514:	d018      	beq.n	1c548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c516:	687b      	ldr	r3, [r7, #4]
   1c518:	68da      	ldr	r2, [r3, #12]
   1c51a:	687b      	ldr	r3, [r7, #4]
   1c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c51e:	18d2      	adds	r2, r2, r3
   1c520:	687b      	ldr	r3, [r7, #4]
   1c522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c524:	687b      	ldr	r3, [r7, #4]
   1c526:	68da      	ldr	r2, [r3, #12]
   1c528:	687b      	ldr	r3, [r7, #4]
   1c52a:	685b      	ldr	r3, [r3, #4]
   1c52c:	429a      	cmp	r2, r3
   1c52e:	d303      	bcc.n	1c538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c530:	687b      	ldr	r3, [r7, #4]
   1c532:	681a      	ldr	r2, [r3, #0]
   1c534:	687b      	ldr	r3, [r7, #4]
   1c536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c538:	687b      	ldr	r3, [r7, #4]
   1c53a:	68d9      	ldr	r1, [r3, #12]
   1c53c:	687b      	ldr	r3, [r7, #4]
   1c53e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c540:	683b      	ldr	r3, [r7, #0]
   1c542:	0018      	movs	r0, r3
   1c544:	4b02      	ldr	r3, [pc, #8]	; (1c550 <prvCopyDataFromQueue+0x4c>)
   1c546:	4798      	blx	r3
	}
}
   1c548:	46c0      	nop			; (mov r8, r8)
   1c54a:	46bd      	mov	sp, r7
   1c54c:	b002      	add	sp, #8
   1c54e:	bd80      	pop	{r7, pc}
   1c550:	000361cd 	.word	0x000361cd

0001c554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c554:	b580      	push	{r7, lr}
   1c556:	b084      	sub	sp, #16
   1c558:	af00      	add	r7, sp, #0
   1c55a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c55c:	4b34      	ldr	r3, [pc, #208]	; (1c630 <prvUnlockQueue+0xdc>)
   1c55e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c560:	230f      	movs	r3, #15
   1c562:	18fb      	adds	r3, r7, r3
   1c564:	687a      	ldr	r2, [r7, #4]
   1c566:	2145      	movs	r1, #69	; 0x45
   1c568:	5c52      	ldrb	r2, [r2, r1]
   1c56a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c56c:	e022      	b.n	1c5b4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c56e:	687b      	ldr	r3, [r7, #4]
   1c570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c572:	2b00      	cmp	r3, #0
   1c574:	d009      	beq.n	1c58a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c576:	687b      	ldr	r3, [r7, #4]
   1c578:	2100      	movs	r1, #0
   1c57a:	0018      	movs	r0, r3
   1c57c:	4b2d      	ldr	r3, [pc, #180]	; (1c634 <prvUnlockQueue+0xe0>)
   1c57e:	4798      	blx	r3
   1c580:	1e03      	subs	r3, r0, #0
   1c582:	d00f      	beq.n	1c5a4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c584:	4b2c      	ldr	r3, [pc, #176]	; (1c638 <prvUnlockQueue+0xe4>)
   1c586:	4798      	blx	r3
   1c588:	e00c      	b.n	1c5a4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c58a:	687b      	ldr	r3, [r7, #4]
   1c58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c58e:	2b00      	cmp	r3, #0
   1c590:	d017      	beq.n	1c5c2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c592:	687b      	ldr	r3, [r7, #4]
   1c594:	3324      	adds	r3, #36	; 0x24
   1c596:	0018      	movs	r0, r3
   1c598:	4b28      	ldr	r3, [pc, #160]	; (1c63c <prvUnlockQueue+0xe8>)
   1c59a:	4798      	blx	r3
   1c59c:	1e03      	subs	r3, r0, #0
   1c59e:	d001      	beq.n	1c5a4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c5a0:	4b25      	ldr	r3, [pc, #148]	; (1c638 <prvUnlockQueue+0xe4>)
   1c5a2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c5a4:	230f      	movs	r3, #15
   1c5a6:	18fb      	adds	r3, r7, r3
   1c5a8:	781b      	ldrb	r3, [r3, #0]
   1c5aa:	3b01      	subs	r3, #1
   1c5ac:	b2da      	uxtb	r2, r3
   1c5ae:	230f      	movs	r3, #15
   1c5b0:	18fb      	adds	r3, r7, r3
   1c5b2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c5b4:	230f      	movs	r3, #15
   1c5b6:	18fb      	adds	r3, r7, r3
   1c5b8:	781b      	ldrb	r3, [r3, #0]
   1c5ba:	b25b      	sxtb	r3, r3
   1c5bc:	2b00      	cmp	r3, #0
   1c5be:	dcd6      	bgt.n	1c56e <prvUnlockQueue+0x1a>
   1c5c0:	e000      	b.n	1c5c4 <prvUnlockQueue+0x70>
						break;
   1c5c2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c5c4:	687b      	ldr	r3, [r7, #4]
   1c5c6:	2245      	movs	r2, #69	; 0x45
   1c5c8:	21ff      	movs	r1, #255	; 0xff
   1c5ca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c5cc:	4b1c      	ldr	r3, [pc, #112]	; (1c640 <prvUnlockQueue+0xec>)
   1c5ce:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c5d0:	4b17      	ldr	r3, [pc, #92]	; (1c630 <prvUnlockQueue+0xdc>)
   1c5d2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c5d4:	230e      	movs	r3, #14
   1c5d6:	18fb      	adds	r3, r7, r3
   1c5d8:	687a      	ldr	r2, [r7, #4]
   1c5da:	2144      	movs	r1, #68	; 0x44
   1c5dc:	5c52      	ldrb	r2, [r2, r1]
   1c5de:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c5e0:	e014      	b.n	1c60c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c5e2:	687b      	ldr	r3, [r7, #4]
   1c5e4:	691b      	ldr	r3, [r3, #16]
   1c5e6:	2b00      	cmp	r3, #0
   1c5e8:	d017      	beq.n	1c61a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c5ea:	687b      	ldr	r3, [r7, #4]
   1c5ec:	3310      	adds	r3, #16
   1c5ee:	0018      	movs	r0, r3
   1c5f0:	4b12      	ldr	r3, [pc, #72]	; (1c63c <prvUnlockQueue+0xe8>)
   1c5f2:	4798      	blx	r3
   1c5f4:	1e03      	subs	r3, r0, #0
   1c5f6:	d001      	beq.n	1c5fc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c5f8:	4b0f      	ldr	r3, [pc, #60]	; (1c638 <prvUnlockQueue+0xe4>)
   1c5fa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c5fc:	230e      	movs	r3, #14
   1c5fe:	18fb      	adds	r3, r7, r3
   1c600:	781b      	ldrb	r3, [r3, #0]
   1c602:	3b01      	subs	r3, #1
   1c604:	b2da      	uxtb	r2, r3
   1c606:	230e      	movs	r3, #14
   1c608:	18fb      	adds	r3, r7, r3
   1c60a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c60c:	230e      	movs	r3, #14
   1c60e:	18fb      	adds	r3, r7, r3
   1c610:	781b      	ldrb	r3, [r3, #0]
   1c612:	b25b      	sxtb	r3, r3
   1c614:	2b00      	cmp	r3, #0
   1c616:	dce4      	bgt.n	1c5e2 <prvUnlockQueue+0x8e>
   1c618:	e000      	b.n	1c61c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c61a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c61c:	687b      	ldr	r3, [r7, #4]
   1c61e:	2244      	movs	r2, #68	; 0x44
   1c620:	21ff      	movs	r1, #255	; 0xff
   1c622:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c624:	4b06      	ldr	r3, [pc, #24]	; (1c640 <prvUnlockQueue+0xec>)
   1c626:	4798      	blx	r3
}
   1c628:	46c0      	nop			; (mov r8, r8)
   1c62a:	46bd      	mov	sp, r7
   1c62c:	b004      	add	sp, #16
   1c62e:	bd80      	pop	{r7, pc}
   1c630:	0001ac59 	.word	0x0001ac59
   1c634:	0001c729 	.word	0x0001c729
   1c638:	0001d6fd 	.word	0x0001d6fd
   1c63c:	0001d4e9 	.word	0x0001d4e9
   1c640:	0001ac7d 	.word	0x0001ac7d

0001c644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c644:	b580      	push	{r7, lr}
   1c646:	b084      	sub	sp, #16
   1c648:	af00      	add	r7, sp, #0
   1c64a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c64c:	4b08      	ldr	r3, [pc, #32]	; (1c670 <prvIsQueueEmpty+0x2c>)
   1c64e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c650:	687b      	ldr	r3, [r7, #4]
   1c652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c654:	2b00      	cmp	r3, #0
   1c656:	d102      	bne.n	1c65e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c658:	2301      	movs	r3, #1
   1c65a:	60fb      	str	r3, [r7, #12]
   1c65c:	e001      	b.n	1c662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c65e:	2300      	movs	r3, #0
   1c660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c662:	4b04      	ldr	r3, [pc, #16]	; (1c674 <prvIsQueueEmpty+0x30>)
   1c664:	4798      	blx	r3

	return xReturn;
   1c666:	68fb      	ldr	r3, [r7, #12]
}
   1c668:	0018      	movs	r0, r3
   1c66a:	46bd      	mov	sp, r7
   1c66c:	b004      	add	sp, #16
   1c66e:	bd80      	pop	{r7, pc}
   1c670:	0001ac59 	.word	0x0001ac59
   1c674:	0001ac7d 	.word	0x0001ac7d

0001c678 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c678:	b580      	push	{r7, lr}
   1c67a:	b084      	sub	sp, #16
   1c67c:	af00      	add	r7, sp, #0
   1c67e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c680:	4b09      	ldr	r3, [pc, #36]	; (1c6a8 <prvIsQueueFull+0x30>)
   1c682:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c684:	687b      	ldr	r3, [r7, #4]
   1c686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c688:	687b      	ldr	r3, [r7, #4]
   1c68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c68c:	429a      	cmp	r2, r3
   1c68e:	d102      	bne.n	1c696 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c690:	2301      	movs	r3, #1
   1c692:	60fb      	str	r3, [r7, #12]
   1c694:	e001      	b.n	1c69a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c696:	2300      	movs	r3, #0
   1c698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c69a:	4b04      	ldr	r3, [pc, #16]	; (1c6ac <prvIsQueueFull+0x34>)
   1c69c:	4798      	blx	r3

	return xReturn;
   1c69e:	68fb      	ldr	r3, [r7, #12]
}
   1c6a0:	0018      	movs	r0, r3
   1c6a2:	46bd      	mov	sp, r7
   1c6a4:	b004      	add	sp, #16
   1c6a6:	bd80      	pop	{r7, pc}
   1c6a8:	0001ac59 	.word	0x0001ac59
   1c6ac:	0001ac7d 	.word	0x0001ac7d

0001c6b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c6b0:	b580      	push	{r7, lr}
   1c6b2:	b086      	sub	sp, #24
   1c6b4:	af00      	add	r7, sp, #0
   1c6b6:	60f8      	str	r0, [r7, #12]
   1c6b8:	60b9      	str	r1, [r7, #8]
   1c6ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c6bc:	68fb      	ldr	r3, [r7, #12]
   1c6be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c6c0:	4b15      	ldr	r3, [pc, #84]	; (1c718 <vQueueWaitForMessageRestricted+0x68>)
   1c6c2:	4798      	blx	r3
   1c6c4:	697b      	ldr	r3, [r7, #20]
   1c6c6:	2244      	movs	r2, #68	; 0x44
   1c6c8:	5c9b      	ldrb	r3, [r3, r2]
   1c6ca:	b25b      	sxtb	r3, r3
   1c6cc:	3301      	adds	r3, #1
   1c6ce:	d103      	bne.n	1c6d8 <vQueueWaitForMessageRestricted+0x28>
   1c6d0:	697b      	ldr	r3, [r7, #20]
   1c6d2:	2244      	movs	r2, #68	; 0x44
   1c6d4:	2100      	movs	r1, #0
   1c6d6:	5499      	strb	r1, [r3, r2]
   1c6d8:	697b      	ldr	r3, [r7, #20]
   1c6da:	2245      	movs	r2, #69	; 0x45
   1c6dc:	5c9b      	ldrb	r3, [r3, r2]
   1c6de:	b25b      	sxtb	r3, r3
   1c6e0:	3301      	adds	r3, #1
   1c6e2:	d103      	bne.n	1c6ec <vQueueWaitForMessageRestricted+0x3c>
   1c6e4:	697b      	ldr	r3, [r7, #20]
   1c6e6:	2245      	movs	r2, #69	; 0x45
   1c6e8:	2100      	movs	r1, #0
   1c6ea:	5499      	strb	r1, [r3, r2]
   1c6ec:	4b0b      	ldr	r3, [pc, #44]	; (1c71c <vQueueWaitForMessageRestricted+0x6c>)
   1c6ee:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c6f0:	697b      	ldr	r3, [r7, #20]
   1c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c6f4:	2b00      	cmp	r3, #0
   1c6f6:	d106      	bne.n	1c706 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c6f8:	697b      	ldr	r3, [r7, #20]
   1c6fa:	3324      	adds	r3, #36	; 0x24
   1c6fc:	687a      	ldr	r2, [r7, #4]
   1c6fe:	68b9      	ldr	r1, [r7, #8]
   1c700:	0018      	movs	r0, r3
   1c702:	4b07      	ldr	r3, [pc, #28]	; (1c720 <vQueueWaitForMessageRestricted+0x70>)
   1c704:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c706:	697b      	ldr	r3, [r7, #20]
   1c708:	0018      	movs	r0, r3
   1c70a:	4b06      	ldr	r3, [pc, #24]	; (1c724 <vQueueWaitForMessageRestricted+0x74>)
   1c70c:	4798      	blx	r3
	}
   1c70e:	46c0      	nop			; (mov r8, r8)
   1c710:	46bd      	mov	sp, r7
   1c712:	b006      	add	sp, #24
   1c714:	bd80      	pop	{r7, pc}
   1c716:	46c0      	nop			; (mov r8, r8)
   1c718:	0001ac59 	.word	0x0001ac59
   1c71c:	0001ac7d 	.word	0x0001ac7d
   1c720:	0001d409 	.word	0x0001d409
   1c724:	0001c555 	.word	0x0001c555

0001c728 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c728:	b5b0      	push	{r4, r5, r7, lr}
   1c72a:	b086      	sub	sp, #24
   1c72c:	af00      	add	r7, sp, #0
   1c72e:	6078      	str	r0, [r7, #4]
   1c730:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c732:	687b      	ldr	r3, [r7, #4]
   1c734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c738:	2300      	movs	r3, #0
   1c73a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c73c:	693b      	ldr	r3, [r7, #16]
   1c73e:	2b00      	cmp	r3, #0
   1c740:	d101      	bne.n	1c746 <prvNotifyQueueSetContainer+0x1e>
   1c742:	b672      	cpsid	i
   1c744:	e7fe      	b.n	1c744 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c746:	693b      	ldr	r3, [r7, #16]
   1c748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c74a:	693b      	ldr	r3, [r7, #16]
   1c74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c74e:	429a      	cmp	r2, r3
   1c750:	d301      	bcc.n	1c756 <prvNotifyQueueSetContainer+0x2e>
   1c752:	b672      	cpsid	i
   1c754:	e7fe      	b.n	1c754 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c756:	693b      	ldr	r3, [r7, #16]
   1c758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c75a:	693b      	ldr	r3, [r7, #16]
   1c75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c75e:	429a      	cmp	r2, r3
   1c760:	d300      	bcc.n	1c764 <prvNotifyQueueSetContainer+0x3c>
   1c762:	e08b      	b.n	1c87c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c764:	230f      	movs	r3, #15
   1c766:	18fb      	adds	r3, r7, r3
   1c768:	693a      	ldr	r2, [r7, #16]
   1c76a:	2145      	movs	r1, #69	; 0x45
   1c76c:	5c52      	ldrb	r2, [r2, r1]
   1c76e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c770:	4b45      	ldr	r3, [pc, #276]	; (1c888 <prvNotifyQueueSetContainer+0x160>)
   1c772:	4798      	blx	r3
   1c774:	0003      	movs	r3, r0
   1c776:	0018      	movs	r0, r3
   1c778:	4b44      	ldr	r3, [pc, #272]	; (1c88c <prvNotifyQueueSetContainer+0x164>)
   1c77a:	4798      	blx	r3
   1c77c:	0003      	movs	r3, r0
   1c77e:	001a      	movs	r2, r3
   1c780:	4b43      	ldr	r3, [pc, #268]	; (1c890 <prvNotifyQueueSetContainer+0x168>)
   1c782:	881b      	ldrh	r3, [r3, #0]
   1c784:	4013      	ands	r3, r2
   1c786:	b29b      	uxth	r3, r3
   1c788:	2b00      	cmp	r3, #0
   1c78a:	d02e      	beq.n	1c7ea <prvNotifyQueueSetContainer+0xc2>
   1c78c:	693b      	ldr	r3, [r7, #16]
   1c78e:	0018      	movs	r0, r3
   1c790:	4b40      	ldr	r3, [pc, #256]	; (1c894 <prvNotifyQueueSetContainer+0x16c>)
   1c792:	4798      	blx	r3
   1c794:	0003      	movs	r3, r0
   1c796:	001a      	movs	r2, r3
   1c798:	4b3d      	ldr	r3, [pc, #244]	; (1c890 <prvNotifyQueueSetContainer+0x168>)
   1c79a:	881b      	ldrh	r3, [r3, #0]
   1c79c:	4013      	ands	r3, r2
   1c79e:	b29b      	uxth	r3, r3
   1c7a0:	2b00      	cmp	r3, #0
   1c7a2:	d022      	beq.n	1c7ea <prvNotifyQueueSetContainer+0xc2>
   1c7a4:	683b      	ldr	r3, [r7, #0]
   1c7a6:	2b00      	cmp	r3, #0
   1c7a8:	d10b      	bne.n	1c7c2 <prvNotifyQueueSetContainer+0x9a>
   1c7aa:	693b      	ldr	r3, [r7, #16]
   1c7ac:	0018      	movs	r0, r3
   1c7ae:	4b3a      	ldr	r3, [pc, #232]	; (1c898 <prvNotifyQueueSetContainer+0x170>)
   1c7b0:	4798      	blx	r3
   1c7b2:	0003      	movs	r3, r0
   1c7b4:	001a      	movs	r2, r3
   1c7b6:	4b39      	ldr	r3, [pc, #228]	; (1c89c <prvNotifyQueueSetContainer+0x174>)
   1c7b8:	5c9b      	ldrb	r3, [r3, r2]
   1c7ba:	3320      	adds	r3, #32
   1c7bc:	b2db      	uxtb	r3, r3
   1c7be:	001d      	movs	r5, r3
   1c7c0:	e000      	b.n	1c7c4 <prvNotifyQueueSetContainer+0x9c>
   1c7c2:	2525      	movs	r5, #37	; 0x25
   1c7c4:	693b      	ldr	r3, [r7, #16]
   1c7c6:	0018      	movs	r0, r3
   1c7c8:	4b33      	ldr	r3, [pc, #204]	; (1c898 <prvNotifyQueueSetContainer+0x170>)
   1c7ca:	4798      	blx	r3
   1c7cc:	0003      	movs	r3, r0
   1c7ce:	001a      	movs	r2, r3
   1c7d0:	4b32      	ldr	r3, [pc, #200]	; (1c89c <prvNotifyQueueSetContainer+0x174>)
   1c7d2:	5c9c      	ldrb	r4, [r3, r2]
   1c7d4:	693b      	ldr	r3, [r7, #16]
   1c7d6:	0018      	movs	r0, r3
   1c7d8:	4b31      	ldr	r3, [pc, #196]	; (1c8a0 <prvNotifyQueueSetContainer+0x178>)
   1c7da:	4798      	blx	r3
   1c7dc:	0003      	movs	r3, r0
   1c7de:	b2db      	uxtb	r3, r3
   1c7e0:	001a      	movs	r2, r3
   1c7e2:	0021      	movs	r1, r4
   1c7e4:	0028      	movs	r0, r5
   1c7e6:	4b2f      	ldr	r3, [pc, #188]	; (1c8a4 <prvNotifyQueueSetContainer+0x17c>)
   1c7e8:	4798      	blx	r3
   1c7ea:	693b      	ldr	r3, [r7, #16]
   1c7ec:	0018      	movs	r0, r3
   1c7ee:	4b2a      	ldr	r3, [pc, #168]	; (1c898 <prvNotifyQueueSetContainer+0x170>)
   1c7f0:	4798      	blx	r3
   1c7f2:	0003      	movs	r3, r0
   1c7f4:	001a      	movs	r2, r3
   1c7f6:	4b29      	ldr	r3, [pc, #164]	; (1c89c <prvNotifyQueueSetContainer+0x174>)
   1c7f8:	5c9c      	ldrb	r4, [r3, r2]
   1c7fa:	693b      	ldr	r3, [r7, #16]
   1c7fc:	0018      	movs	r0, r3
   1c7fe:	4b28      	ldr	r3, [pc, #160]	; (1c8a0 <prvNotifyQueueSetContainer+0x178>)
   1c800:	4798      	blx	r3
   1c802:	0003      	movs	r3, r0
   1c804:	b2dd      	uxtb	r5, r3
   1c806:	693b      	ldr	r3, [r7, #16]
   1c808:	0018      	movs	r0, r3
   1c80a:	4b23      	ldr	r3, [pc, #140]	; (1c898 <prvNotifyQueueSetContainer+0x170>)
   1c80c:	4798      	blx	r3
   1c80e:	0003      	movs	r3, r0
   1c810:	001a      	movs	r2, r3
   1c812:	4b22      	ldr	r3, [pc, #136]	; (1c89c <prvNotifyQueueSetContainer+0x174>)
   1c814:	5c9b      	ldrb	r3, [r3, r2]
   1c816:	2b02      	cmp	r3, #2
   1c818:	d005      	beq.n	1c826 <prvNotifyQueueSetContainer+0xfe>
   1c81a:	693b      	ldr	r3, [r7, #16]
   1c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c81e:	b2db      	uxtb	r3, r3
   1c820:	3301      	adds	r3, #1
   1c822:	b2db      	uxtb	r3, r3
   1c824:	e000      	b.n	1c828 <prvNotifyQueueSetContainer+0x100>
   1c826:	2300      	movs	r3, #0
   1c828:	001a      	movs	r2, r3
   1c82a:	0029      	movs	r1, r5
   1c82c:	0020      	movs	r0, r4
   1c82e:	4b1e      	ldr	r3, [pc, #120]	; (1c8a8 <prvNotifyQueueSetContainer+0x180>)
   1c830:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c832:	683a      	ldr	r2, [r7, #0]
   1c834:	1d39      	adds	r1, r7, #4
   1c836:	693b      	ldr	r3, [r7, #16]
   1c838:	0018      	movs	r0, r3
   1c83a:	4b1c      	ldr	r3, [pc, #112]	; (1c8ac <prvNotifyQueueSetContainer+0x184>)
   1c83c:	4798      	blx	r3
   1c83e:	0003      	movs	r3, r0
   1c840:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c842:	230f      	movs	r3, #15
   1c844:	18fb      	adds	r3, r7, r3
   1c846:	781b      	ldrb	r3, [r3, #0]
   1c848:	b25b      	sxtb	r3, r3
   1c84a:	3301      	adds	r3, #1
   1c84c:	d10d      	bne.n	1c86a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c84e:	693b      	ldr	r3, [r7, #16]
   1c850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c852:	2b00      	cmp	r3, #0
   1c854:	d012      	beq.n	1c87c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c856:	693b      	ldr	r3, [r7, #16]
   1c858:	3324      	adds	r3, #36	; 0x24
   1c85a:	0018      	movs	r0, r3
   1c85c:	4b14      	ldr	r3, [pc, #80]	; (1c8b0 <prvNotifyQueueSetContainer+0x188>)
   1c85e:	4798      	blx	r3
   1c860:	1e03      	subs	r3, r0, #0
   1c862:	d00b      	beq.n	1c87c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c864:	2301      	movs	r3, #1
   1c866:	617b      	str	r3, [r7, #20]
   1c868:	e008      	b.n	1c87c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c86a:	230f      	movs	r3, #15
   1c86c:	18fb      	adds	r3, r7, r3
   1c86e:	781b      	ldrb	r3, [r3, #0]
   1c870:	3301      	adds	r3, #1
   1c872:	b2db      	uxtb	r3, r3
   1c874:	b259      	sxtb	r1, r3
   1c876:	693b      	ldr	r3, [r7, #16]
   1c878:	2245      	movs	r2, #69	; 0x45
   1c87a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c87c:	697b      	ldr	r3, [r7, #20]
	}
   1c87e:	0018      	movs	r0, r3
   1c880:	46bd      	mov	sp, r7
   1c882:	b006      	add	sp, #24
   1c884:	bdb0      	pop	{r4, r5, r7, pc}
   1c886:	46c0      	nop			; (mov r8, r8)
   1c888:	00018eed 	.word	0x00018eed
   1c88c:	00018c51 	.word	0x00018c51
   1c890:	20000110 	.word	0x20000110
   1c894:	00018d11 	.word	0x00018d11
   1c898:	00018c11 	.word	0x00018c11
   1c89c:	20000104 	.word	0x20000104
   1c8a0:	00018cf1 	.word	0x00018cf1
   1c8a4:	00019649 	.word	0x00019649
   1c8a8:	00019ca5 	.word	0x00019ca5
   1c8ac:	0001c425 	.word	0x0001c425
   1c8b0:	0001d4e9 	.word	0x0001d4e9

0001c8b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c8b4:	b590      	push	{r4, r7, lr}
   1c8b6:	b08d      	sub	sp, #52	; 0x34
   1c8b8:	af04      	add	r7, sp, #16
   1c8ba:	60f8      	str	r0, [r7, #12]
   1c8bc:	60b9      	str	r1, [r7, #8]
   1c8be:	603b      	str	r3, [r7, #0]
   1c8c0:	1dbb      	adds	r3, r7, #6
   1c8c2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8c4:	1dbb      	adds	r3, r7, #6
   1c8c6:	881b      	ldrh	r3, [r3, #0]
   1c8c8:	009b      	lsls	r3, r3, #2
   1c8ca:	0018      	movs	r0, r3
   1c8cc:	4b1d      	ldr	r3, [pc, #116]	; (1c944 <xTaskCreate+0x90>)
   1c8ce:	4798      	blx	r3
   1c8d0:	0003      	movs	r3, r0
   1c8d2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c8d4:	697b      	ldr	r3, [r7, #20]
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d010      	beq.n	1c8fc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c8da:	2054      	movs	r0, #84	; 0x54
   1c8dc:	4b19      	ldr	r3, [pc, #100]	; (1c944 <xTaskCreate+0x90>)
   1c8de:	4798      	blx	r3
   1c8e0:	0003      	movs	r3, r0
   1c8e2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c8e4:	69fb      	ldr	r3, [r7, #28]
   1c8e6:	2b00      	cmp	r3, #0
   1c8e8:	d003      	beq.n	1c8f2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c8ea:	69fb      	ldr	r3, [r7, #28]
   1c8ec:	697a      	ldr	r2, [r7, #20]
   1c8ee:	631a      	str	r2, [r3, #48]	; 0x30
   1c8f0:	e006      	b.n	1c900 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c8f2:	697b      	ldr	r3, [r7, #20]
   1c8f4:	0018      	movs	r0, r3
   1c8f6:	4b14      	ldr	r3, [pc, #80]	; (1c948 <xTaskCreate+0x94>)
   1c8f8:	4798      	blx	r3
   1c8fa:	e001      	b.n	1c900 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c8fc:	2300      	movs	r3, #0
   1c8fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c900:	69fb      	ldr	r3, [r7, #28]
   1c902:	2b00      	cmp	r3, #0
   1c904:	d016      	beq.n	1c934 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c906:	1dbb      	adds	r3, r7, #6
   1c908:	881a      	ldrh	r2, [r3, #0]
   1c90a:	683c      	ldr	r4, [r7, #0]
   1c90c:	68b9      	ldr	r1, [r7, #8]
   1c90e:	68f8      	ldr	r0, [r7, #12]
   1c910:	2300      	movs	r3, #0
   1c912:	9303      	str	r3, [sp, #12]
   1c914:	69fb      	ldr	r3, [r7, #28]
   1c916:	9302      	str	r3, [sp, #8]
   1c918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c91a:	9301      	str	r3, [sp, #4]
   1c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c91e:	9300      	str	r3, [sp, #0]
   1c920:	0023      	movs	r3, r4
   1c922:	4c0a      	ldr	r4, [pc, #40]	; (1c94c <xTaskCreate+0x98>)
   1c924:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c926:	69fb      	ldr	r3, [r7, #28]
   1c928:	0018      	movs	r0, r3
   1c92a:	4b09      	ldr	r3, [pc, #36]	; (1c950 <xTaskCreate+0x9c>)
   1c92c:	4798      	blx	r3
			xReturn = pdPASS;
   1c92e:	2301      	movs	r3, #1
   1c930:	61bb      	str	r3, [r7, #24]
   1c932:	e002      	b.n	1c93a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c934:	2301      	movs	r3, #1
   1c936:	425b      	negs	r3, r3
   1c938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c93a:	69bb      	ldr	r3, [r7, #24]
	}
   1c93c:	0018      	movs	r0, r3
   1c93e:	46bd      	mov	sp, r7
   1c940:	b009      	add	sp, #36	; 0x24
   1c942:	bd90      	pop	{r4, r7, pc}
   1c944:	0001ad91 	.word	0x0001ad91
   1c948:	0001ae55 	.word	0x0001ae55
   1c94c:	0001c955 	.word	0x0001c955
   1c950:	0001ca65 	.word	0x0001ca65

0001c954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c954:	b580      	push	{r7, lr}
   1c956:	b086      	sub	sp, #24
   1c958:	af00      	add	r7, sp, #0
   1c95a:	60f8      	str	r0, [r7, #12]
   1c95c:	60b9      	str	r1, [r7, #8]
   1c95e:	607a      	str	r2, [r7, #4]
   1c960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c964:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c966:	687b      	ldr	r3, [r7, #4]
   1c968:	009b      	lsls	r3, r3, #2
   1c96a:	001a      	movs	r2, r3
   1c96c:	21a5      	movs	r1, #165	; 0xa5
   1c96e:	4b39      	ldr	r3, [pc, #228]	; (1ca54 <prvInitialiseNewTask+0x100>)
   1c970:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c976:	687b      	ldr	r3, [r7, #4]
   1c978:	4937      	ldr	r1, [pc, #220]	; (1ca58 <prvInitialiseNewTask+0x104>)
   1c97a:	468c      	mov	ip, r1
   1c97c:	4463      	add	r3, ip
   1c97e:	009b      	lsls	r3, r3, #2
   1c980:	18d3      	adds	r3, r2, r3
   1c982:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c984:	693b      	ldr	r3, [r7, #16]
   1c986:	2207      	movs	r2, #7
   1c988:	4393      	bics	r3, r2
   1c98a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c98c:	693b      	ldr	r3, [r7, #16]
   1c98e:	2207      	movs	r2, #7
   1c990:	4013      	ands	r3, r2
   1c992:	d001      	beq.n	1c998 <prvInitialiseNewTask+0x44>
   1c994:	b672      	cpsid	i
   1c996:	e7fe      	b.n	1c996 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c998:	2300      	movs	r3, #0
   1c99a:	617b      	str	r3, [r7, #20]
   1c99c:	e013      	b.n	1c9c6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c99e:	68ba      	ldr	r2, [r7, #8]
   1c9a0:	697b      	ldr	r3, [r7, #20]
   1c9a2:	18d3      	adds	r3, r2, r3
   1c9a4:	7818      	ldrb	r0, [r3, #0]
   1c9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c9a8:	2134      	movs	r1, #52	; 0x34
   1c9aa:	697b      	ldr	r3, [r7, #20]
   1c9ac:	18d3      	adds	r3, r2, r3
   1c9ae:	185b      	adds	r3, r3, r1
   1c9b0:	1c02      	adds	r2, r0, #0
   1c9b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c9b4:	68ba      	ldr	r2, [r7, #8]
   1c9b6:	697b      	ldr	r3, [r7, #20]
   1c9b8:	18d3      	adds	r3, r2, r3
   1c9ba:	781b      	ldrb	r3, [r3, #0]
   1c9bc:	2b00      	cmp	r3, #0
   1c9be:	d006      	beq.n	1c9ce <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c9c0:	697b      	ldr	r3, [r7, #20]
   1c9c2:	3301      	adds	r3, #1
   1c9c4:	617b      	str	r3, [r7, #20]
   1c9c6:	697b      	ldr	r3, [r7, #20]
   1c9c8:	2b07      	cmp	r3, #7
   1c9ca:	d9e8      	bls.n	1c99e <prvInitialiseNewTask+0x4a>
   1c9cc:	e000      	b.n	1c9d0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c9ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9d2:	223b      	movs	r2, #59	; 0x3b
   1c9d4:	2100      	movs	r1, #0
   1c9d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c9d8:	6a3b      	ldr	r3, [r7, #32]
   1c9da:	2b04      	cmp	r3, #4
   1c9dc:	d901      	bls.n	1c9e2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c9de:	2304      	movs	r3, #4
   1c9e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9e4:	6a3a      	ldr	r2, [r7, #32]
   1c9e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9ea:	6a3a      	ldr	r2, [r7, #32]
   1c9ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9f0:	2200      	movs	r2, #0
   1c9f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9f6:	3304      	adds	r3, #4
   1c9f8:	0018      	movs	r0, r3
   1c9fa:	4b18      	ldr	r3, [pc, #96]	; (1ca5c <prvInitialiseNewTask+0x108>)
   1c9fc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca00:	3318      	adds	r3, #24
   1ca02:	0018      	movs	r0, r3
   1ca04:	4b15      	ldr	r3, [pc, #84]	; (1ca5c <prvInitialiseNewTask+0x108>)
   1ca06:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ca0e:	6a3b      	ldr	r3, [r7, #32]
   1ca10:	2205      	movs	r2, #5
   1ca12:	1ad2      	subs	r2, r2, r3
   1ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ca18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca20:	2200      	movs	r2, #0
   1ca22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ca24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca26:	2250      	movs	r2, #80	; 0x50
   1ca28:	2100      	movs	r1, #0
   1ca2a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ca2c:	683a      	ldr	r2, [r7, #0]
   1ca2e:	68f9      	ldr	r1, [r7, #12]
   1ca30:	693b      	ldr	r3, [r7, #16]
   1ca32:	0018      	movs	r0, r3
   1ca34:	4b0a      	ldr	r3, [pc, #40]	; (1ca60 <prvInitialiseNewTask+0x10c>)
   1ca36:	4798      	blx	r3
   1ca38:	0002      	movs	r2, r0
   1ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca3c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca40:	2b00      	cmp	r3, #0
   1ca42:	d002      	beq.n	1ca4a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca46:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ca4a:	46c0      	nop			; (mov r8, r8)
   1ca4c:	46bd      	mov	sp, r7
   1ca4e:	b006      	add	sp, #24
   1ca50:	bd80      	pop	{r7, pc}
   1ca52:	46c0      	nop			; (mov r8, r8)
   1ca54:	00036203 	.word	0x00036203
   1ca58:	3fffffff 	.word	0x3fffffff
   1ca5c:	0001aa05 	.word	0x0001aa05
   1ca60:	0001ab1d 	.word	0x0001ab1d

0001ca64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1ca64:	b580      	push	{r7, lr}
   1ca66:	b082      	sub	sp, #8
   1ca68:	af00      	add	r7, sp, #0
   1ca6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1ca6c:	4b60      	ldr	r3, [pc, #384]	; (1cbf0 <prvAddNewTaskToReadyList+0x18c>)
   1ca6e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1ca70:	4b60      	ldr	r3, [pc, #384]	; (1cbf4 <prvAddNewTaskToReadyList+0x190>)
   1ca72:	681b      	ldr	r3, [r3, #0]
   1ca74:	1c5a      	adds	r2, r3, #1
   1ca76:	4b5f      	ldr	r3, [pc, #380]	; (1cbf4 <prvAddNewTaskToReadyList+0x190>)
   1ca78:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1ca7a:	4b5f      	ldr	r3, [pc, #380]	; (1cbf8 <prvAddNewTaskToReadyList+0x194>)
   1ca7c:	681b      	ldr	r3, [r3, #0]
   1ca7e:	2b00      	cmp	r3, #0
   1ca80:	d109      	bne.n	1ca96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1ca82:	4b5d      	ldr	r3, [pc, #372]	; (1cbf8 <prvAddNewTaskToReadyList+0x194>)
   1ca84:	687a      	ldr	r2, [r7, #4]
   1ca86:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1ca88:	4b5a      	ldr	r3, [pc, #360]	; (1cbf4 <prvAddNewTaskToReadyList+0x190>)
   1ca8a:	681b      	ldr	r3, [r3, #0]
   1ca8c:	2b01      	cmp	r3, #1
   1ca8e:	d110      	bne.n	1cab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1ca90:	4b5a      	ldr	r3, [pc, #360]	; (1cbfc <prvAddNewTaskToReadyList+0x198>)
   1ca92:	4798      	blx	r3
   1ca94:	e00d      	b.n	1cab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1ca96:	4b5a      	ldr	r3, [pc, #360]	; (1cc00 <prvAddNewTaskToReadyList+0x19c>)
   1ca98:	681b      	ldr	r3, [r3, #0]
   1ca9a:	2b00      	cmp	r3, #0
   1ca9c:	d109      	bne.n	1cab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1ca9e:	4b56      	ldr	r3, [pc, #344]	; (1cbf8 <prvAddNewTaskToReadyList+0x194>)
   1caa0:	681b      	ldr	r3, [r3, #0]
   1caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1caa4:	687b      	ldr	r3, [r7, #4]
   1caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1caa8:	429a      	cmp	r2, r3
   1caaa:	d802      	bhi.n	1cab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1caac:	4b52      	ldr	r3, [pc, #328]	; (1cbf8 <prvAddNewTaskToReadyList+0x194>)
   1caae:	687a      	ldr	r2, [r7, #4]
   1cab0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cab2:	4b54      	ldr	r3, [pc, #336]	; (1cc04 <prvAddNewTaskToReadyList+0x1a0>)
   1cab4:	681b      	ldr	r3, [r3, #0]
   1cab6:	1c5a      	adds	r2, r3, #1
   1cab8:	4b52      	ldr	r3, [pc, #328]	; (1cc04 <prvAddNewTaskToReadyList+0x1a0>)
   1caba:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1cabc:	4b51      	ldr	r3, [pc, #324]	; (1cc04 <prvAddNewTaskToReadyList+0x1a0>)
   1cabe:	681a      	ldr	r2, [r3, #0]
   1cac0:	687b      	ldr	r3, [r7, #4]
   1cac2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1cac4:	687b      	ldr	r3, [r7, #4]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d052      	beq.n	1cb70 <prvAddNewTaskToReadyList+0x10c>
   1caca:	2003      	movs	r0, #3
   1cacc:	4b4e      	ldr	r3, [pc, #312]	; (1cc08 <prvAddNewTaskToReadyList+0x1a4>)
   1cace:	4798      	blx	r3
   1cad0:	0003      	movs	r3, r0
   1cad2:	b29a      	uxth	r2, r3
   1cad4:	687b      	ldr	r3, [r7, #4]
   1cad6:	0011      	movs	r1, r2
   1cad8:	0018      	movs	r0, r3
   1cada:	4b4c      	ldr	r3, [pc, #304]	; (1cc0c <prvAddNewTaskToReadyList+0x1a8>)
   1cadc:	4798      	blx	r3
   1cade:	4b4c      	ldr	r3, [pc, #304]	; (1cc10 <prvAddNewTaskToReadyList+0x1ac>)
   1cae0:	881a      	ldrh	r2, [r3, #0]
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	0011      	movs	r1, r2
   1cae6:	0018      	movs	r0, r3
   1cae8:	4b4a      	ldr	r3, [pc, #296]	; (1cc14 <prvAddNewTaskToReadyList+0x1b0>)
   1caea:	4798      	blx	r3
   1caec:	687b      	ldr	r3, [r7, #4]
   1caee:	0018      	movs	r0, r3
   1caf0:	4b49      	ldr	r3, [pc, #292]	; (1cc18 <prvAddNewTaskToReadyList+0x1b4>)
   1caf2:	4798      	blx	r3
   1caf4:	0003      	movs	r3, r0
   1caf6:	b2d9      	uxtb	r1, r3
   1caf8:	687b      	ldr	r3, [r7, #4]
   1cafa:	3334      	adds	r3, #52	; 0x34
   1cafc:	001a      	movs	r2, r3
   1cafe:	2003      	movs	r0, #3
   1cb00:	4b46      	ldr	r3, [pc, #280]	; (1cc1c <prvAddNewTaskToReadyList+0x1b8>)
   1cb02:	4798      	blx	r3
   1cb04:	687b      	ldr	r3, [r7, #4]
   1cb06:	0018      	movs	r0, r3
   1cb08:	4b43      	ldr	r3, [pc, #268]	; (1cc18 <prvAddNewTaskToReadyList+0x1b4>)
   1cb0a:	4798      	blx	r3
   1cb0c:	0003      	movs	r3, r0
   1cb0e:	b2d9      	uxtb	r1, r3
   1cb10:	687b      	ldr	r3, [r7, #4]
   1cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb14:	b2db      	uxtb	r3, r3
   1cb16:	001a      	movs	r2, r3
   1cb18:	2003      	movs	r0, #3
   1cb1a:	4b41      	ldr	r3, [pc, #260]	; (1cc20 <prvAddNewTaskToReadyList+0x1bc>)
   1cb1c:	4798      	blx	r3
   1cb1e:	4b41      	ldr	r3, [pc, #260]	; (1cc24 <prvAddNewTaskToReadyList+0x1c0>)
   1cb20:	4798      	blx	r3
   1cb22:	0003      	movs	r3, r0
   1cb24:	0018      	movs	r0, r3
   1cb26:	4b40      	ldr	r3, [pc, #256]	; (1cc28 <prvAddNewTaskToReadyList+0x1c4>)
   1cb28:	4798      	blx	r3
   1cb2a:	0003      	movs	r3, r0
   1cb2c:	001a      	movs	r2, r3
   1cb2e:	4b3f      	ldr	r3, [pc, #252]	; (1cc2c <prvAddNewTaskToReadyList+0x1c8>)
   1cb30:	881b      	ldrh	r3, [r3, #0]
   1cb32:	4013      	ands	r3, r2
   1cb34:	b29b      	uxth	r3, r3
   1cb36:	2b00      	cmp	r3, #0
   1cb38:	d016      	beq.n	1cb68 <prvAddNewTaskToReadyList+0x104>
   1cb3a:	687b      	ldr	r3, [r7, #4]
   1cb3c:	0018      	movs	r0, r3
   1cb3e:	4b3a      	ldr	r3, [pc, #232]	; (1cc28 <prvAddNewTaskToReadyList+0x1c4>)
   1cb40:	4798      	blx	r3
   1cb42:	0003      	movs	r3, r0
   1cb44:	001a      	movs	r2, r3
   1cb46:	4b39      	ldr	r3, [pc, #228]	; (1cc2c <prvAddNewTaskToReadyList+0x1c8>)
   1cb48:	881b      	ldrh	r3, [r3, #0]
   1cb4a:	4013      	ands	r3, r2
   1cb4c:	b29b      	uxth	r3, r3
   1cb4e:	2b00      	cmp	r3, #0
   1cb50:	d00a      	beq.n	1cb68 <prvAddNewTaskToReadyList+0x104>
   1cb52:	687b      	ldr	r3, [r7, #4]
   1cb54:	0018      	movs	r0, r3
   1cb56:	4b30      	ldr	r3, [pc, #192]	; (1cc18 <prvAddNewTaskToReadyList+0x1b4>)
   1cb58:	4798      	blx	r3
   1cb5a:	0003      	movs	r3, r0
   1cb5c:	b2db      	uxtb	r3, r3
   1cb5e:	001a      	movs	r2, r3
   1cb60:	2103      	movs	r1, #3
   1cb62:	201b      	movs	r0, #27
   1cb64:	4b32      	ldr	r3, [pc, #200]	; (1cc30 <prvAddNewTaskToReadyList+0x1cc>)
   1cb66:	4798      	blx	r3
   1cb68:	687b      	ldr	r3, [r7, #4]
   1cb6a:	0018      	movs	r0, r3
   1cb6c:	4b31      	ldr	r3, [pc, #196]	; (1cc34 <prvAddNewTaskToReadyList+0x1d0>)
   1cb6e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cb70:	687b      	ldr	r3, [r7, #4]
   1cb72:	0018      	movs	r0, r3
   1cb74:	4b2c      	ldr	r3, [pc, #176]	; (1cc28 <prvAddNewTaskToReadyList+0x1c4>)
   1cb76:	4798      	blx	r3
   1cb78:	0003      	movs	r3, r0
   1cb7a:	001a      	movs	r2, r3
   1cb7c:	4b2b      	ldr	r3, [pc, #172]	; (1cc2c <prvAddNewTaskToReadyList+0x1c8>)
   1cb7e:	881b      	ldrh	r3, [r3, #0]
   1cb80:	4013      	ands	r3, r2
   1cb82:	b29b      	uxth	r3, r3
   1cb84:	2b00      	cmp	r3, #0
   1cb86:	d008      	beq.n	1cb9a <prvAddNewTaskToReadyList+0x136>
   1cb88:	687b      	ldr	r3, [r7, #4]
   1cb8a:	0018      	movs	r0, r3
   1cb8c:	4b22      	ldr	r3, [pc, #136]	; (1cc18 <prvAddNewTaskToReadyList+0x1b4>)
   1cb8e:	4798      	blx	r3
   1cb90:	0003      	movs	r3, r0
   1cb92:	b2db      	uxtb	r3, r3
   1cb94:	0018      	movs	r0, r3
   1cb96:	4b28      	ldr	r3, [pc, #160]	; (1cc38 <prvAddNewTaskToReadyList+0x1d4>)
   1cb98:	4798      	blx	r3
   1cb9a:	687b      	ldr	r3, [r7, #4]
   1cb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb9e:	4b27      	ldr	r3, [pc, #156]	; (1cc3c <prvAddNewTaskToReadyList+0x1d8>)
   1cba0:	681b      	ldr	r3, [r3, #0]
   1cba2:	429a      	cmp	r2, r3
   1cba4:	d903      	bls.n	1cbae <prvAddNewTaskToReadyList+0x14a>
   1cba6:	687b      	ldr	r3, [r7, #4]
   1cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbaa:	4b24      	ldr	r3, [pc, #144]	; (1cc3c <prvAddNewTaskToReadyList+0x1d8>)
   1cbac:	601a      	str	r2, [r3, #0]
   1cbae:	687b      	ldr	r3, [r7, #4]
   1cbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbb2:	0013      	movs	r3, r2
   1cbb4:	009b      	lsls	r3, r3, #2
   1cbb6:	189b      	adds	r3, r3, r2
   1cbb8:	009b      	lsls	r3, r3, #2
   1cbba:	4a21      	ldr	r2, [pc, #132]	; (1cc40 <prvAddNewTaskToReadyList+0x1dc>)
   1cbbc:	189a      	adds	r2, r3, r2
   1cbbe:	687b      	ldr	r3, [r7, #4]
   1cbc0:	3304      	adds	r3, #4
   1cbc2:	0019      	movs	r1, r3
   1cbc4:	0010      	movs	r0, r2
   1cbc6:	4b1f      	ldr	r3, [pc, #124]	; (1cc44 <prvAddNewTaskToReadyList+0x1e0>)
   1cbc8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cbca:	4b1f      	ldr	r3, [pc, #124]	; (1cc48 <prvAddNewTaskToReadyList+0x1e4>)
   1cbcc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cbce:	4b0c      	ldr	r3, [pc, #48]	; (1cc00 <prvAddNewTaskToReadyList+0x19c>)
   1cbd0:	681b      	ldr	r3, [r3, #0]
   1cbd2:	2b00      	cmp	r3, #0
   1cbd4:	d008      	beq.n	1cbe8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cbd6:	4b08      	ldr	r3, [pc, #32]	; (1cbf8 <prvAddNewTaskToReadyList+0x194>)
   1cbd8:	681b      	ldr	r3, [r3, #0]
   1cbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbdc:	687b      	ldr	r3, [r7, #4]
   1cbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbe0:	429a      	cmp	r2, r3
   1cbe2:	d201      	bcs.n	1cbe8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cbe4:	4b19      	ldr	r3, [pc, #100]	; (1cc4c <prvAddNewTaskToReadyList+0x1e8>)
   1cbe6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cbe8:	46c0      	nop			; (mov r8, r8)
   1cbea:	46bd      	mov	sp, r7
   1cbec:	b002      	add	sp, #8
   1cbee:	bd80      	pop	{r7, pc}
   1cbf0:	0001ac59 	.word	0x0001ac59
   1cbf4:	200041ac 	.word	0x200041ac
   1cbf8:	200040d4 	.word	0x200040d4
   1cbfc:	0001d785 	.word	0x0001d785
   1cc00:	200041b8 	.word	0x200041b8
   1cc04:	200041c8 	.word	0x200041c8
   1cc08:	0001a1d1 	.word	0x0001a1d1
   1cc0c:	00018c75 	.word	0x00018c75
   1cc10:	20000112 	.word	0x20000112
   1cc14:	00018cb1 	.word	0x00018cb1
   1cc18:	00018c31 	.word	0x00018c31
   1cc1c:	0001a401 	.word	0x0001a401
   1cc20:	00019b65 	.word	0x00019b65
   1cc24:	00018eed 	.word	0x00018eed
   1cc28:	00018c51 	.word	0x00018c51
   1cc2c:	20000110 	.word	0x20000110
   1cc30:	00019649 	.word	0x00019649
   1cc34:	00018db1 	.word	0x00018db1
   1cc38:	00019401 	.word	0x00019401
   1cc3c:	200041b4 	.word	0x200041b4
   1cc40:	200040d8 	.word	0x200040d8
   1cc44:	0001aa1b 	.word	0x0001aa1b
   1cc48:	0001ac7d 	.word	0x0001ac7d
   1cc4c:	0001ac41 	.word	0x0001ac41

0001cc50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1cc50:	b580      	push	{r7, lr}
   1cc52:	b084      	sub	sp, #16
   1cc54:	af00      	add	r7, sp, #0
   1cc56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1cc58:	2300      	movs	r3, #0
   1cc5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cc5c:	687b      	ldr	r3, [r7, #4]
   1cc5e:	2b00      	cmp	r3, #0
   1cc60:	d045      	beq.n	1ccee <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1cc62:	4b27      	ldr	r3, [pc, #156]	; (1cd00 <vTaskDelay+0xb0>)
   1cc64:	681b      	ldr	r3, [r3, #0]
   1cc66:	2b00      	cmp	r3, #0
   1cc68:	d001      	beq.n	1cc6e <vTaskDelay+0x1e>
   1cc6a:	b672      	cpsid	i
   1cc6c:	e7fe      	b.n	1cc6c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1cc6e:	4b25      	ldr	r3, [pc, #148]	; (1cd04 <vTaskDelay+0xb4>)
   1cc70:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cc72:	4b25      	ldr	r3, [pc, #148]	; (1cd08 <vTaskDelay+0xb8>)
   1cc74:	681b      	ldr	r3, [r3, #0]
   1cc76:	0018      	movs	r0, r3
   1cc78:	4b24      	ldr	r3, [pc, #144]	; (1cd0c <vTaskDelay+0xbc>)
   1cc7a:	4798      	blx	r3
   1cc7c:	0003      	movs	r3, r0
   1cc7e:	001a      	movs	r2, r3
   1cc80:	4b23      	ldr	r3, [pc, #140]	; (1cd10 <vTaskDelay+0xc0>)
   1cc82:	881b      	ldrh	r3, [r3, #0]
   1cc84:	4013      	ands	r3, r2
   1cc86:	b29b      	uxth	r3, r3
   1cc88:	2b00      	cmp	r3, #0
   1cc8a:	d00e      	beq.n	1ccaa <vTaskDelay+0x5a>
   1cc8c:	687b      	ldr	r3, [r7, #4]
   1cc8e:	0019      	movs	r1, r3
   1cc90:	2089      	movs	r0, #137	; 0x89
   1cc92:	4b20      	ldr	r3, [pc, #128]	; (1cd14 <vTaskDelay+0xc4>)
   1cc94:	4798      	blx	r3
   1cc96:	4b1c      	ldr	r3, [pc, #112]	; (1cd08 <vTaskDelay+0xb8>)
   1cc98:	681b      	ldr	r3, [r3, #0]
   1cc9a:	0018      	movs	r0, r3
   1cc9c:	4b1e      	ldr	r3, [pc, #120]	; (1cd18 <vTaskDelay+0xc8>)
   1cc9e:	4798      	blx	r3
   1cca0:	0003      	movs	r3, r0
   1cca2:	b2db      	uxtb	r3, r3
   1cca4:	0018      	movs	r0, r3
   1cca6:	4b1d      	ldr	r3, [pc, #116]	; (1cd1c <vTaskDelay+0xcc>)
   1cca8:	4798      	blx	r3
   1ccaa:	4b1d      	ldr	r3, [pc, #116]	; (1cd20 <vTaskDelay+0xd0>)
   1ccac:	4798      	blx	r3
   1ccae:	0003      	movs	r3, r0
   1ccb0:	0018      	movs	r0, r3
   1ccb2:	4b16      	ldr	r3, [pc, #88]	; (1cd0c <vTaskDelay+0xbc>)
   1ccb4:	4798      	blx	r3
   1ccb6:	0003      	movs	r3, r0
   1ccb8:	001a      	movs	r2, r3
   1ccba:	4b15      	ldr	r3, [pc, #84]	; (1cd10 <vTaskDelay+0xc0>)
   1ccbc:	881b      	ldrh	r3, [r3, #0]
   1ccbe:	4013      	ands	r3, r2
   1ccc0:	b29b      	uxth	r3, r3
   1ccc2:	2b00      	cmp	r3, #0
   1ccc4:	d00a      	beq.n	1ccdc <vTaskDelay+0x8c>
   1ccc6:	4b16      	ldr	r3, [pc, #88]	; (1cd20 <vTaskDelay+0xd0>)
   1ccc8:	4798      	blx	r3
   1ccca:	0003      	movs	r3, r0
   1cccc:	0018      	movs	r0, r3
   1ccce:	4b12      	ldr	r3, [pc, #72]	; (1cd18 <vTaskDelay+0xc8>)
   1ccd0:	4798      	blx	r3
   1ccd2:	0003      	movs	r3, r0
   1ccd4:	b2db      	uxtb	r3, r3
   1ccd6:	0018      	movs	r0, r3
   1ccd8:	4b10      	ldr	r3, [pc, #64]	; (1cd1c <vTaskDelay+0xcc>)
   1ccda:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1ccdc:	687b      	ldr	r3, [r7, #4]
   1ccde:	2100      	movs	r1, #0
   1cce0:	0018      	movs	r0, r3
   1cce2:	4b10      	ldr	r3, [pc, #64]	; (1cd24 <vTaskDelay+0xd4>)
   1cce4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1cce6:	4b10      	ldr	r3, [pc, #64]	; (1cd28 <vTaskDelay+0xd8>)
   1cce8:	4798      	blx	r3
   1ccea:	0003      	movs	r3, r0
   1ccec:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1ccee:	68fb      	ldr	r3, [r7, #12]
   1ccf0:	2b00      	cmp	r3, #0
   1ccf2:	d101      	bne.n	1ccf8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1ccf4:	4b0d      	ldr	r3, [pc, #52]	; (1cd2c <vTaskDelay+0xdc>)
   1ccf6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ccf8:	46c0      	nop			; (mov r8, r8)
   1ccfa:	46bd      	mov	sp, r7
   1ccfc:	b004      	add	sp, #16
   1ccfe:	bd80      	pop	{r7, pc}
   1cd00:	200041d4 	.word	0x200041d4
   1cd04:	0001cf11 	.word	0x0001cf11
   1cd08:	200040d4 	.word	0x200040d4
   1cd0c:	00018c51 	.word	0x00018c51
   1cd10:	20000110 	.word	0x20000110
   1cd14:	00019951 	.word	0x00019951
   1cd18:	00018c31 	.word	0x00018c31
   1cd1c:	00019de1 	.word	0x00019de1
   1cd20:	00018eed 	.word	0x00018eed
   1cd24:	0001de69 	.word	0x0001de69
   1cd28:	0001cf29 	.word	0x0001cf29
   1cd2c:	0001ac41 	.word	0x0001ac41

0001cd30 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1cd30:	b580      	push	{r7, lr}
   1cd32:	b084      	sub	sp, #16
   1cd34:	af00      	add	r7, sp, #0
   1cd36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1cd38:	4b42      	ldr	r3, [pc, #264]	; (1ce44 <vTaskSuspend+0x114>)
   1cd3a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1cd3c:	687b      	ldr	r3, [r7, #4]
   1cd3e:	2b00      	cmp	r3, #0
   1cd40:	d102      	bne.n	1cd48 <vTaskSuspend+0x18>
   1cd42:	4b41      	ldr	r3, [pc, #260]	; (1ce48 <vTaskSuspend+0x118>)
   1cd44:	681b      	ldr	r3, [r3, #0]
   1cd46:	e000      	b.n	1cd4a <vTaskSuspend+0x1a>
   1cd48:	687b      	ldr	r3, [r7, #4]
   1cd4a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1cd4c:	4b3f      	ldr	r3, [pc, #252]	; (1ce4c <vTaskSuspend+0x11c>)
   1cd4e:	4798      	blx	r3
   1cd50:	0003      	movs	r3, r0
   1cd52:	0018      	movs	r0, r3
   1cd54:	4b3e      	ldr	r3, [pc, #248]	; (1ce50 <vTaskSuspend+0x120>)
   1cd56:	4798      	blx	r3
   1cd58:	0003      	movs	r3, r0
   1cd5a:	001a      	movs	r2, r3
   1cd5c:	4b3d      	ldr	r3, [pc, #244]	; (1ce54 <vTaskSuspend+0x124>)
   1cd5e:	881b      	ldrh	r3, [r3, #0]
   1cd60:	4013      	ands	r3, r2
   1cd62:	b29b      	uxth	r3, r3
   1cd64:	2b00      	cmp	r3, #0
   1cd66:	d016      	beq.n	1cd96 <vTaskSuspend+0x66>
   1cd68:	68fb      	ldr	r3, [r7, #12]
   1cd6a:	0018      	movs	r0, r3
   1cd6c:	4b38      	ldr	r3, [pc, #224]	; (1ce50 <vTaskSuspend+0x120>)
   1cd6e:	4798      	blx	r3
   1cd70:	0003      	movs	r3, r0
   1cd72:	001a      	movs	r2, r3
   1cd74:	4b37      	ldr	r3, [pc, #220]	; (1ce54 <vTaskSuspend+0x124>)
   1cd76:	881b      	ldrh	r3, [r3, #0]
   1cd78:	4013      	ands	r3, r2
   1cd7a:	b29b      	uxth	r3, r3
   1cd7c:	2b00      	cmp	r3, #0
   1cd7e:	d00a      	beq.n	1cd96 <vTaskSuspend+0x66>
   1cd80:	68fb      	ldr	r3, [r7, #12]
   1cd82:	0018      	movs	r0, r3
   1cd84:	4b34      	ldr	r3, [pc, #208]	; (1ce58 <vTaskSuspend+0x128>)
   1cd86:	4798      	blx	r3
   1cd88:	0003      	movs	r3, r0
   1cd8a:	b2db      	uxtb	r3, r3
   1cd8c:	001a      	movs	r2, r3
   1cd8e:	2103      	movs	r1, #3
   1cd90:	208a      	movs	r0, #138	; 0x8a
   1cd92:	4b32      	ldr	r3, [pc, #200]	; (1ce5c <vTaskSuspend+0x12c>)
   1cd94:	4798      	blx	r3
   1cd96:	68fb      	ldr	r3, [r7, #12]
   1cd98:	0018      	movs	r0, r3
   1cd9a:	4b2f      	ldr	r3, [pc, #188]	; (1ce58 <vTaskSuspend+0x128>)
   1cd9c:	4798      	blx	r3
   1cd9e:	0003      	movs	r3, r0
   1cda0:	b2db      	uxtb	r3, r3
   1cda2:	0018      	movs	r0, r3
   1cda4:	4b2e      	ldr	r3, [pc, #184]	; (1ce60 <vTaskSuspend+0x130>)
   1cda6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cda8:	68fb      	ldr	r3, [r7, #12]
   1cdaa:	3304      	adds	r3, #4
   1cdac:	0018      	movs	r0, r3
   1cdae:	4b2d      	ldr	r3, [pc, #180]	; (1ce64 <vTaskSuspend+0x134>)
   1cdb0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cdb2:	68fb      	ldr	r3, [r7, #12]
   1cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	d004      	beq.n	1cdc4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cdba:	68fb      	ldr	r3, [r7, #12]
   1cdbc:	3318      	adds	r3, #24
   1cdbe:	0018      	movs	r0, r3
   1cdc0:	4b28      	ldr	r3, [pc, #160]	; (1ce64 <vTaskSuspend+0x134>)
   1cdc2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1cdc4:	68fb      	ldr	r3, [r7, #12]
   1cdc6:	1d1a      	adds	r2, r3, #4
   1cdc8:	4b27      	ldr	r3, [pc, #156]	; (1ce68 <vTaskSuspend+0x138>)
   1cdca:	0011      	movs	r1, r2
   1cdcc:	0018      	movs	r0, r3
   1cdce:	4b27      	ldr	r3, [pc, #156]	; (1ce6c <vTaskSuspend+0x13c>)
   1cdd0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1cdd2:	68fb      	ldr	r3, [r7, #12]
   1cdd4:	2250      	movs	r2, #80	; 0x50
   1cdd6:	5c9b      	ldrb	r3, [r3, r2]
   1cdd8:	b2db      	uxtb	r3, r3
   1cdda:	2b01      	cmp	r3, #1
   1cddc:	d103      	bne.n	1cde6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cdde:	68fb      	ldr	r3, [r7, #12]
   1cde0:	2250      	movs	r2, #80	; 0x50
   1cde2:	2100      	movs	r1, #0
   1cde4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1cde6:	4b22      	ldr	r3, [pc, #136]	; (1ce70 <vTaskSuspend+0x140>)
   1cde8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1cdea:	4b22      	ldr	r3, [pc, #136]	; (1ce74 <vTaskSuspend+0x144>)
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d005      	beq.n	1cdfe <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1cdf2:	4b14      	ldr	r3, [pc, #80]	; (1ce44 <vTaskSuspend+0x114>)
   1cdf4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1cdf6:	4b20      	ldr	r3, [pc, #128]	; (1ce78 <vTaskSuspend+0x148>)
   1cdf8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1cdfa:	4b1d      	ldr	r3, [pc, #116]	; (1ce70 <vTaskSuspend+0x140>)
   1cdfc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1cdfe:	4b12      	ldr	r3, [pc, #72]	; (1ce48 <vTaskSuspend+0x118>)
   1ce00:	681b      	ldr	r3, [r3, #0]
   1ce02:	68fa      	ldr	r2, [r7, #12]
   1ce04:	429a      	cmp	r2, r3
   1ce06:	d118      	bne.n	1ce3a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1ce08:	4b1a      	ldr	r3, [pc, #104]	; (1ce74 <vTaskSuspend+0x144>)
   1ce0a:	681b      	ldr	r3, [r3, #0]
   1ce0c:	2b00      	cmp	r3, #0
   1ce0e:	d008      	beq.n	1ce22 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ce10:	4b1a      	ldr	r3, [pc, #104]	; (1ce7c <vTaskSuspend+0x14c>)
   1ce12:	681b      	ldr	r3, [r3, #0]
   1ce14:	2b00      	cmp	r3, #0
   1ce16:	d001      	beq.n	1ce1c <vTaskSuspend+0xec>
   1ce18:	b672      	cpsid	i
   1ce1a:	e7fe      	b.n	1ce1a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ce1c:	4b18      	ldr	r3, [pc, #96]	; (1ce80 <vTaskSuspend+0x150>)
   1ce1e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ce20:	e00b      	b.n	1ce3a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ce22:	4b11      	ldr	r3, [pc, #68]	; (1ce68 <vTaskSuspend+0x138>)
   1ce24:	681a      	ldr	r2, [r3, #0]
   1ce26:	4b17      	ldr	r3, [pc, #92]	; (1ce84 <vTaskSuspend+0x154>)
   1ce28:	681b      	ldr	r3, [r3, #0]
   1ce2a:	429a      	cmp	r2, r3
   1ce2c:	d103      	bne.n	1ce36 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ce2e:	4b06      	ldr	r3, [pc, #24]	; (1ce48 <vTaskSuspend+0x118>)
   1ce30:	2200      	movs	r2, #0
   1ce32:	601a      	str	r2, [r3, #0]
	}
   1ce34:	e001      	b.n	1ce3a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1ce36:	4b14      	ldr	r3, [pc, #80]	; (1ce88 <vTaskSuspend+0x158>)
   1ce38:	4798      	blx	r3
	}
   1ce3a:	46c0      	nop			; (mov r8, r8)
   1ce3c:	46bd      	mov	sp, r7
   1ce3e:	b004      	add	sp, #16
   1ce40:	bd80      	pop	{r7, pc}
   1ce42:	46c0      	nop			; (mov r8, r8)
   1ce44:	0001ac59 	.word	0x0001ac59
   1ce48:	200040d4 	.word	0x200040d4
   1ce4c:	00018eed 	.word	0x00018eed
   1ce50:	00018c51 	.word	0x00018c51
   1ce54:	20000110 	.word	0x20000110
   1ce58:	00018c31 	.word	0x00018c31
   1ce5c:	00019649 	.word	0x00019649
   1ce60:	00019de1 	.word	0x00019de1
   1ce64:	0001aacb 	.word	0x0001aacb
   1ce68:	20004198 	.word	0x20004198
   1ce6c:	0001aa1b 	.word	0x0001aa1b
   1ce70:	0001ac7d 	.word	0x0001ac7d
   1ce74:	200041b8 	.word	0x200041b8
   1ce78:	0001d915 	.word	0x0001d915
   1ce7c:	200041d4 	.word	0x200041d4
   1ce80:	0001ac41 	.word	0x0001ac41
   1ce84:	200041ac 	.word	0x200041ac
   1ce88:	0001d2a5 	.word	0x0001d2a5

0001ce8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ce8c:	b590      	push	{r4, r7, lr}
   1ce8e:	b085      	sub	sp, #20
   1ce90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ce92:	4916      	ldr	r1, [pc, #88]	; (1ceec <vTaskStartScheduler+0x60>)
   1ce94:	4816      	ldr	r0, [pc, #88]	; (1cef0 <vTaskStartScheduler+0x64>)
   1ce96:	4b17      	ldr	r3, [pc, #92]	; (1cef4 <vTaskStartScheduler+0x68>)
   1ce98:	9301      	str	r3, [sp, #4]
   1ce9a:	2300      	movs	r3, #0
   1ce9c:	9300      	str	r3, [sp, #0]
   1ce9e:	2300      	movs	r3, #0
   1cea0:	2296      	movs	r2, #150	; 0x96
   1cea2:	4c15      	ldr	r4, [pc, #84]	; (1cef8 <vTaskStartScheduler+0x6c>)
   1cea4:	47a0      	blx	r4
   1cea6:	0003      	movs	r3, r0
   1cea8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ceaa:	687b      	ldr	r3, [r7, #4]
   1ceac:	2b01      	cmp	r3, #1
   1ceae:	d103      	bne.n	1ceb8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1ceb0:	4b12      	ldr	r3, [pc, #72]	; (1cefc <vTaskStartScheduler+0x70>)
   1ceb2:	4798      	blx	r3
   1ceb4:	0003      	movs	r3, r0
   1ceb6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	2b01      	cmp	r3, #1
   1cebc:	d10d      	bne.n	1ceda <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1cebe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1cec0:	4b0f      	ldr	r3, [pc, #60]	; (1cf00 <vTaskStartScheduler+0x74>)
   1cec2:	2201      	movs	r2, #1
   1cec4:	4252      	negs	r2, r2
   1cec6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1cec8:	4b0e      	ldr	r3, [pc, #56]	; (1cf04 <vTaskStartScheduler+0x78>)
   1ceca:	2201      	movs	r2, #1
   1cecc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1cece:	4b0e      	ldr	r3, [pc, #56]	; (1cf08 <vTaskStartScheduler+0x7c>)
   1ced0:	2200      	movs	r2, #0
   1ced2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ced4:	4b0d      	ldr	r3, [pc, #52]	; (1cf0c <vTaskStartScheduler+0x80>)
   1ced6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ced8:	e004      	b.n	1cee4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ceda:	687b      	ldr	r3, [r7, #4]
   1cedc:	3301      	adds	r3, #1
   1cede:	d101      	bne.n	1cee4 <vTaskStartScheduler+0x58>
   1cee0:	b672      	cpsid	i
   1cee2:	e7fe      	b.n	1cee2 <vTaskStartScheduler+0x56>
}
   1cee4:	46c0      	nop			; (mov r8, r8)
   1cee6:	46bd      	mov	sp, r7
   1cee8:	b003      	add	sp, #12
   1ceea:	bd90      	pop	{r4, r7, pc}
   1ceec:	00039cbc 	.word	0x00039cbc
   1cef0:	0001d75d 	.word	0x0001d75d
   1cef4:	200041d0 	.word	0x200041d0
   1cef8:	0001c8b5 	.word	0x0001c8b5
   1cefc:	0001df1d 	.word	0x0001df1d
   1cf00:	200041cc 	.word	0x200041cc
   1cf04:	200041b8 	.word	0x200041b8
   1cf08:	200041b0 	.word	0x200041b0
   1cf0c:	0001abe9 	.word	0x0001abe9

0001cf10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1cf10:	b580      	push	{r7, lr}
   1cf12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1cf14:	4b03      	ldr	r3, [pc, #12]	; (1cf24 <vTaskSuspendAll+0x14>)
   1cf16:	681b      	ldr	r3, [r3, #0]
   1cf18:	1c5a      	adds	r2, r3, #1
   1cf1a:	4b02      	ldr	r3, [pc, #8]	; (1cf24 <vTaskSuspendAll+0x14>)
   1cf1c:	601a      	str	r2, [r3, #0]
}
   1cf1e:	46c0      	nop			; (mov r8, r8)
   1cf20:	46bd      	mov	sp, r7
   1cf22:	bd80      	pop	{r7, pc}
   1cf24:	200041d4 	.word	0x200041d4

0001cf28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1cf28:	b580      	push	{r7, lr}
   1cf2a:	b084      	sub	sp, #16
   1cf2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1cf2e:	2300      	movs	r3, #0
   1cf30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1cf32:	2300      	movs	r3, #0
   1cf34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1cf36:	4b45      	ldr	r3, [pc, #276]	; (1d04c <xTaskResumeAll+0x124>)
   1cf38:	681b      	ldr	r3, [r3, #0]
   1cf3a:	2b00      	cmp	r3, #0
   1cf3c:	d101      	bne.n	1cf42 <xTaskResumeAll+0x1a>
   1cf3e:	b672      	cpsid	i
   1cf40:	e7fe      	b.n	1cf40 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1cf42:	4b43      	ldr	r3, [pc, #268]	; (1d050 <xTaskResumeAll+0x128>)
   1cf44:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1cf46:	4b41      	ldr	r3, [pc, #260]	; (1d04c <xTaskResumeAll+0x124>)
   1cf48:	681b      	ldr	r3, [r3, #0]
   1cf4a:	1e5a      	subs	r2, r3, #1
   1cf4c:	4b3f      	ldr	r3, [pc, #252]	; (1d04c <xTaskResumeAll+0x124>)
   1cf4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cf50:	4b3e      	ldr	r3, [pc, #248]	; (1d04c <xTaskResumeAll+0x124>)
   1cf52:	681b      	ldr	r3, [r3, #0]
   1cf54:	2b00      	cmp	r3, #0
   1cf56:	d000      	beq.n	1cf5a <xTaskResumeAll+0x32>
   1cf58:	e071      	b.n	1d03e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1cf5a:	4b3e      	ldr	r3, [pc, #248]	; (1d054 <xTaskResumeAll+0x12c>)
   1cf5c:	681b      	ldr	r3, [r3, #0]
   1cf5e:	2b00      	cmp	r3, #0
   1cf60:	d100      	bne.n	1cf64 <xTaskResumeAll+0x3c>
   1cf62:	e06c      	b.n	1d03e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cf64:	e044      	b.n	1cff0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1cf66:	4b3c      	ldr	r3, [pc, #240]	; (1d058 <xTaskResumeAll+0x130>)
   1cf68:	68db      	ldr	r3, [r3, #12]
   1cf6a:	68db      	ldr	r3, [r3, #12]
   1cf6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cf6e:	68fb      	ldr	r3, [r7, #12]
   1cf70:	3318      	adds	r3, #24
   1cf72:	0018      	movs	r0, r3
   1cf74:	4b39      	ldr	r3, [pc, #228]	; (1d05c <xTaskResumeAll+0x134>)
   1cf76:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cf78:	68fb      	ldr	r3, [r7, #12]
   1cf7a:	3304      	adds	r3, #4
   1cf7c:	0018      	movs	r0, r3
   1cf7e:	4b37      	ldr	r3, [pc, #220]	; (1d05c <xTaskResumeAll+0x134>)
   1cf80:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cf82:	68fb      	ldr	r3, [r7, #12]
   1cf84:	0018      	movs	r0, r3
   1cf86:	4b36      	ldr	r3, [pc, #216]	; (1d060 <xTaskResumeAll+0x138>)
   1cf88:	4798      	blx	r3
   1cf8a:	0003      	movs	r3, r0
   1cf8c:	001a      	movs	r2, r3
   1cf8e:	4b35      	ldr	r3, [pc, #212]	; (1d064 <xTaskResumeAll+0x13c>)
   1cf90:	881b      	ldrh	r3, [r3, #0]
   1cf92:	4013      	ands	r3, r2
   1cf94:	b29b      	uxth	r3, r3
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	d008      	beq.n	1cfac <xTaskResumeAll+0x84>
   1cf9a:	68fb      	ldr	r3, [r7, #12]
   1cf9c:	0018      	movs	r0, r3
   1cf9e:	4b32      	ldr	r3, [pc, #200]	; (1d068 <xTaskResumeAll+0x140>)
   1cfa0:	4798      	blx	r3
   1cfa2:	0003      	movs	r3, r0
   1cfa4:	b2db      	uxtb	r3, r3
   1cfa6:	0018      	movs	r0, r3
   1cfa8:	4b30      	ldr	r3, [pc, #192]	; (1d06c <xTaskResumeAll+0x144>)
   1cfaa:	4798      	blx	r3
   1cfac:	68fb      	ldr	r3, [r7, #12]
   1cfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfb0:	4b2f      	ldr	r3, [pc, #188]	; (1d070 <xTaskResumeAll+0x148>)
   1cfb2:	681b      	ldr	r3, [r3, #0]
   1cfb4:	429a      	cmp	r2, r3
   1cfb6:	d903      	bls.n	1cfc0 <xTaskResumeAll+0x98>
   1cfb8:	68fb      	ldr	r3, [r7, #12]
   1cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfbc:	4b2c      	ldr	r3, [pc, #176]	; (1d070 <xTaskResumeAll+0x148>)
   1cfbe:	601a      	str	r2, [r3, #0]
   1cfc0:	68fb      	ldr	r3, [r7, #12]
   1cfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfc4:	0013      	movs	r3, r2
   1cfc6:	009b      	lsls	r3, r3, #2
   1cfc8:	189b      	adds	r3, r3, r2
   1cfca:	009b      	lsls	r3, r3, #2
   1cfcc:	4a29      	ldr	r2, [pc, #164]	; (1d074 <xTaskResumeAll+0x14c>)
   1cfce:	189a      	adds	r2, r3, r2
   1cfd0:	68fb      	ldr	r3, [r7, #12]
   1cfd2:	3304      	adds	r3, #4
   1cfd4:	0019      	movs	r1, r3
   1cfd6:	0010      	movs	r0, r2
   1cfd8:	4b27      	ldr	r3, [pc, #156]	; (1d078 <xTaskResumeAll+0x150>)
   1cfda:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cfdc:	68fb      	ldr	r3, [r7, #12]
   1cfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cfe0:	4b26      	ldr	r3, [pc, #152]	; (1d07c <xTaskResumeAll+0x154>)
   1cfe2:	681b      	ldr	r3, [r3, #0]
   1cfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cfe6:	429a      	cmp	r2, r3
   1cfe8:	d302      	bcc.n	1cff0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1cfea:	4b25      	ldr	r3, [pc, #148]	; (1d080 <xTaskResumeAll+0x158>)
   1cfec:	2201      	movs	r2, #1
   1cfee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cff0:	4b19      	ldr	r3, [pc, #100]	; (1d058 <xTaskResumeAll+0x130>)
   1cff2:	681b      	ldr	r3, [r3, #0]
   1cff4:	2b00      	cmp	r3, #0
   1cff6:	d1b6      	bne.n	1cf66 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1cff8:	68fb      	ldr	r3, [r7, #12]
   1cffa:	2b00      	cmp	r3, #0
   1cffc:	d001      	beq.n	1d002 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1cffe:	4b21      	ldr	r3, [pc, #132]	; (1d084 <xTaskResumeAll+0x15c>)
   1d000:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d002:	4b21      	ldr	r3, [pc, #132]	; (1d088 <xTaskResumeAll+0x160>)
   1d004:	681b      	ldr	r3, [r3, #0]
   1d006:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d008:	687b      	ldr	r3, [r7, #4]
   1d00a:	2b00      	cmp	r3, #0
   1d00c:	d00f      	beq.n	1d02e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d00e:	4b1f      	ldr	r3, [pc, #124]	; (1d08c <xTaskResumeAll+0x164>)
   1d010:	4798      	blx	r3
   1d012:	1e03      	subs	r3, r0, #0
   1d014:	d002      	beq.n	1d01c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d016:	4b1a      	ldr	r3, [pc, #104]	; (1d080 <xTaskResumeAll+0x158>)
   1d018:	2201      	movs	r2, #1
   1d01a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d01c:	687b      	ldr	r3, [r7, #4]
   1d01e:	3b01      	subs	r3, #1
   1d020:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d022:	687b      	ldr	r3, [r7, #4]
   1d024:	2b00      	cmp	r3, #0
   1d026:	d1f2      	bne.n	1d00e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d028:	4b17      	ldr	r3, [pc, #92]	; (1d088 <xTaskResumeAll+0x160>)
   1d02a:	2200      	movs	r2, #0
   1d02c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d02e:	4b14      	ldr	r3, [pc, #80]	; (1d080 <xTaskResumeAll+0x158>)
   1d030:	681b      	ldr	r3, [r3, #0]
   1d032:	2b00      	cmp	r3, #0
   1d034:	d003      	beq.n	1d03e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d036:	2301      	movs	r3, #1
   1d038:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d03a:	4b15      	ldr	r3, [pc, #84]	; (1d090 <xTaskResumeAll+0x168>)
   1d03c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d03e:	4b15      	ldr	r3, [pc, #84]	; (1d094 <xTaskResumeAll+0x16c>)
   1d040:	4798      	blx	r3

	return xAlreadyYielded;
   1d042:	68bb      	ldr	r3, [r7, #8]
}
   1d044:	0018      	movs	r0, r3
   1d046:	46bd      	mov	sp, r7
   1d048:	b004      	add	sp, #16
   1d04a:	bd80      	pop	{r7, pc}
   1d04c:	200041d4 	.word	0x200041d4
   1d050:	0001ac59 	.word	0x0001ac59
   1d054:	200041ac 	.word	0x200041ac
   1d058:	2000416c 	.word	0x2000416c
   1d05c:	0001aacb 	.word	0x0001aacb
   1d060:	00018c51 	.word	0x00018c51
   1d064:	20000110 	.word	0x20000110
   1d068:	00018c31 	.word	0x00018c31
   1d06c:	00019401 	.word	0x00019401
   1d070:	200041b4 	.word	0x200041b4
   1d074:	200040d8 	.word	0x200040d8
   1d078:	0001aa1b 	.word	0x0001aa1b
   1d07c:	200040d4 	.word	0x200040d4
   1d080:	200041c0 	.word	0x200041c0
   1d084:	0001d915 	.word	0x0001d915
   1d088:	200041bc 	.word	0x200041bc
   1d08c:	0001d0b5 	.word	0x0001d0b5
   1d090:	0001ac41 	.word	0x0001ac41
   1d094:	0001ac7d 	.word	0x0001ac7d

0001d098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d098:	b580      	push	{r7, lr}
   1d09a:	b082      	sub	sp, #8
   1d09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d09e:	4b04      	ldr	r3, [pc, #16]	; (1d0b0 <xTaskGetTickCount+0x18>)
   1d0a0:	681b      	ldr	r3, [r3, #0]
   1d0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d0a4:	687b      	ldr	r3, [r7, #4]
}
   1d0a6:	0018      	movs	r0, r3
   1d0a8:	46bd      	mov	sp, r7
   1d0aa:	b002      	add	sp, #8
   1d0ac:	bd80      	pop	{r7, pc}
   1d0ae:	46c0      	nop			; (mov r8, r8)
   1d0b0:	200041b0 	.word	0x200041b0

0001d0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d0b4:	b580      	push	{r7, lr}
   1d0b6:	b086      	sub	sp, #24
   1d0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d0ba:	2300      	movs	r3, #0
   1d0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d0be:	4b64      	ldr	r3, [pc, #400]	; (1d250 <xTaskIncrementTick+0x19c>)
   1d0c0:	681b      	ldr	r3, [r3, #0]
   1d0c2:	2b01      	cmp	r3, #1
   1d0c4:	d003      	beq.n	1d0ce <xTaskIncrementTick+0x1a>
   1d0c6:	4b63      	ldr	r3, [pc, #396]	; (1d254 <xTaskIncrementTick+0x1a0>)
   1d0c8:	681b      	ldr	r3, [r3, #0]
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	d107      	bne.n	1d0de <xTaskIncrementTick+0x2a>
   1d0ce:	4b62      	ldr	r3, [pc, #392]	; (1d258 <xTaskIncrementTick+0x1a4>)
   1d0d0:	681b      	ldr	r3, [r3, #0]
   1d0d2:	1c5a      	adds	r2, r3, #1
   1d0d4:	4b60      	ldr	r3, [pc, #384]	; (1d258 <xTaskIncrementTick+0x1a4>)
   1d0d6:	601a      	str	r2, [r3, #0]
   1d0d8:	2000      	movs	r0, #0
   1d0da:	4b60      	ldr	r3, [pc, #384]	; (1d25c <xTaskIncrementTick+0x1a8>)
   1d0dc:	4798      	blx	r3
   1d0de:	4b5c      	ldr	r3, [pc, #368]	; (1d250 <xTaskIncrementTick+0x19c>)
   1d0e0:	681b      	ldr	r3, [r3, #0]
   1d0e2:	2b00      	cmp	r3, #0
   1d0e4:	d106      	bne.n	1d0f4 <xTaskIncrementTick+0x40>
   1d0e6:	4b5e      	ldr	r3, [pc, #376]	; (1d260 <xTaskIncrementTick+0x1ac>)
   1d0e8:	681b      	ldr	r3, [r3, #0]
   1d0ea:	3301      	adds	r3, #1
   1d0ec:	0019      	movs	r1, r3
   1d0ee:	2003      	movs	r0, #3
   1d0f0:	4b5c      	ldr	r3, [pc, #368]	; (1d264 <xTaskIncrementTick+0x1b0>)
   1d0f2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d0f4:	4b56      	ldr	r3, [pc, #344]	; (1d250 <xTaskIncrementTick+0x19c>)
   1d0f6:	681b      	ldr	r3, [r3, #0]
   1d0f8:	2b00      	cmp	r3, #0
   1d0fa:	d000      	beq.n	1d0fe <xTaskIncrementTick+0x4a>
   1d0fc:	e098      	b.n	1d230 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d0fe:	4b58      	ldr	r3, [pc, #352]	; (1d260 <xTaskIncrementTick+0x1ac>)
   1d100:	681b      	ldr	r3, [r3, #0]
   1d102:	3301      	adds	r3, #1
   1d104:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d106:	4b56      	ldr	r3, [pc, #344]	; (1d260 <xTaskIncrementTick+0x1ac>)
   1d108:	693a      	ldr	r2, [r7, #16]
   1d10a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d10c:	693b      	ldr	r3, [r7, #16]
   1d10e:	2b00      	cmp	r3, #0
   1d110:	d117      	bne.n	1d142 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d112:	4b55      	ldr	r3, [pc, #340]	; (1d268 <xTaskIncrementTick+0x1b4>)
   1d114:	681b      	ldr	r3, [r3, #0]
   1d116:	681b      	ldr	r3, [r3, #0]
   1d118:	2b00      	cmp	r3, #0
   1d11a:	d001      	beq.n	1d120 <xTaskIncrementTick+0x6c>
   1d11c:	b672      	cpsid	i
   1d11e:	e7fe      	b.n	1d11e <xTaskIncrementTick+0x6a>
   1d120:	4b51      	ldr	r3, [pc, #324]	; (1d268 <xTaskIncrementTick+0x1b4>)
   1d122:	681b      	ldr	r3, [r3, #0]
   1d124:	60fb      	str	r3, [r7, #12]
   1d126:	4b51      	ldr	r3, [pc, #324]	; (1d26c <xTaskIncrementTick+0x1b8>)
   1d128:	681a      	ldr	r2, [r3, #0]
   1d12a:	4b4f      	ldr	r3, [pc, #316]	; (1d268 <xTaskIncrementTick+0x1b4>)
   1d12c:	601a      	str	r2, [r3, #0]
   1d12e:	4b4f      	ldr	r3, [pc, #316]	; (1d26c <xTaskIncrementTick+0x1b8>)
   1d130:	68fa      	ldr	r2, [r7, #12]
   1d132:	601a      	str	r2, [r3, #0]
   1d134:	4b4e      	ldr	r3, [pc, #312]	; (1d270 <xTaskIncrementTick+0x1bc>)
   1d136:	681b      	ldr	r3, [r3, #0]
   1d138:	1c5a      	adds	r2, r3, #1
   1d13a:	4b4d      	ldr	r3, [pc, #308]	; (1d270 <xTaskIncrementTick+0x1bc>)
   1d13c:	601a      	str	r2, [r3, #0]
   1d13e:	4b4d      	ldr	r3, [pc, #308]	; (1d274 <xTaskIncrementTick+0x1c0>)
   1d140:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d142:	4b4d      	ldr	r3, [pc, #308]	; (1d278 <xTaskIncrementTick+0x1c4>)
   1d144:	681b      	ldr	r3, [r3, #0]
   1d146:	693a      	ldr	r2, [r7, #16]
   1d148:	429a      	cmp	r2, r3
   1d14a:	d363      	bcc.n	1d214 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d14c:	4b46      	ldr	r3, [pc, #280]	; (1d268 <xTaskIncrementTick+0x1b4>)
   1d14e:	681b      	ldr	r3, [r3, #0]
   1d150:	681b      	ldr	r3, [r3, #0]
   1d152:	2b00      	cmp	r3, #0
   1d154:	d101      	bne.n	1d15a <xTaskIncrementTick+0xa6>
   1d156:	2301      	movs	r3, #1
   1d158:	e000      	b.n	1d15c <xTaskIncrementTick+0xa8>
   1d15a:	2300      	movs	r3, #0
   1d15c:	2b00      	cmp	r3, #0
   1d15e:	d004      	beq.n	1d16a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d160:	4b45      	ldr	r3, [pc, #276]	; (1d278 <xTaskIncrementTick+0x1c4>)
   1d162:	2201      	movs	r2, #1
   1d164:	4252      	negs	r2, r2
   1d166:	601a      	str	r2, [r3, #0]
					break;
   1d168:	e054      	b.n	1d214 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d16a:	4b3f      	ldr	r3, [pc, #252]	; (1d268 <xTaskIncrementTick+0x1b4>)
   1d16c:	681b      	ldr	r3, [r3, #0]
   1d16e:	68db      	ldr	r3, [r3, #12]
   1d170:	68db      	ldr	r3, [r3, #12]
   1d172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d174:	68bb      	ldr	r3, [r7, #8]
   1d176:	685b      	ldr	r3, [r3, #4]
   1d178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d17a:	693a      	ldr	r2, [r7, #16]
   1d17c:	687b      	ldr	r3, [r7, #4]
   1d17e:	429a      	cmp	r2, r3
   1d180:	d203      	bcs.n	1d18a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d182:	4b3d      	ldr	r3, [pc, #244]	; (1d278 <xTaskIncrementTick+0x1c4>)
   1d184:	687a      	ldr	r2, [r7, #4]
   1d186:	601a      	str	r2, [r3, #0]
						break;
   1d188:	e044      	b.n	1d214 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d18a:	68bb      	ldr	r3, [r7, #8]
   1d18c:	3304      	adds	r3, #4
   1d18e:	0018      	movs	r0, r3
   1d190:	4b3a      	ldr	r3, [pc, #232]	; (1d27c <xTaskIncrementTick+0x1c8>)
   1d192:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d194:	68bb      	ldr	r3, [r7, #8]
   1d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d198:	2b00      	cmp	r3, #0
   1d19a:	d004      	beq.n	1d1a6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d19c:	68bb      	ldr	r3, [r7, #8]
   1d19e:	3318      	adds	r3, #24
   1d1a0:	0018      	movs	r0, r3
   1d1a2:	4b36      	ldr	r3, [pc, #216]	; (1d27c <xTaskIncrementTick+0x1c8>)
   1d1a4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d1a6:	68bb      	ldr	r3, [r7, #8]
   1d1a8:	0018      	movs	r0, r3
   1d1aa:	4b35      	ldr	r3, [pc, #212]	; (1d280 <xTaskIncrementTick+0x1cc>)
   1d1ac:	4798      	blx	r3
   1d1ae:	0003      	movs	r3, r0
   1d1b0:	001a      	movs	r2, r3
   1d1b2:	4b34      	ldr	r3, [pc, #208]	; (1d284 <xTaskIncrementTick+0x1d0>)
   1d1b4:	881b      	ldrh	r3, [r3, #0]
   1d1b6:	4013      	ands	r3, r2
   1d1b8:	b29b      	uxth	r3, r3
   1d1ba:	2b00      	cmp	r3, #0
   1d1bc:	d008      	beq.n	1d1d0 <xTaskIncrementTick+0x11c>
   1d1be:	68bb      	ldr	r3, [r7, #8]
   1d1c0:	0018      	movs	r0, r3
   1d1c2:	4b31      	ldr	r3, [pc, #196]	; (1d288 <xTaskIncrementTick+0x1d4>)
   1d1c4:	4798      	blx	r3
   1d1c6:	0003      	movs	r3, r0
   1d1c8:	b2db      	uxtb	r3, r3
   1d1ca:	0018      	movs	r0, r3
   1d1cc:	4b2f      	ldr	r3, [pc, #188]	; (1d28c <xTaskIncrementTick+0x1d8>)
   1d1ce:	4798      	blx	r3
   1d1d0:	68bb      	ldr	r3, [r7, #8]
   1d1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1d4:	4b2e      	ldr	r3, [pc, #184]	; (1d290 <xTaskIncrementTick+0x1dc>)
   1d1d6:	681b      	ldr	r3, [r3, #0]
   1d1d8:	429a      	cmp	r2, r3
   1d1da:	d903      	bls.n	1d1e4 <xTaskIncrementTick+0x130>
   1d1dc:	68bb      	ldr	r3, [r7, #8]
   1d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1e0:	4b2b      	ldr	r3, [pc, #172]	; (1d290 <xTaskIncrementTick+0x1dc>)
   1d1e2:	601a      	str	r2, [r3, #0]
   1d1e4:	68bb      	ldr	r3, [r7, #8]
   1d1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1e8:	0013      	movs	r3, r2
   1d1ea:	009b      	lsls	r3, r3, #2
   1d1ec:	189b      	adds	r3, r3, r2
   1d1ee:	009b      	lsls	r3, r3, #2
   1d1f0:	4a28      	ldr	r2, [pc, #160]	; (1d294 <xTaskIncrementTick+0x1e0>)
   1d1f2:	189a      	adds	r2, r3, r2
   1d1f4:	68bb      	ldr	r3, [r7, #8]
   1d1f6:	3304      	adds	r3, #4
   1d1f8:	0019      	movs	r1, r3
   1d1fa:	0010      	movs	r0, r2
   1d1fc:	4b26      	ldr	r3, [pc, #152]	; (1d298 <xTaskIncrementTick+0x1e4>)
   1d1fe:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d200:	68bb      	ldr	r3, [r7, #8]
   1d202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d204:	4b25      	ldr	r3, [pc, #148]	; (1d29c <xTaskIncrementTick+0x1e8>)
   1d206:	681b      	ldr	r3, [r3, #0]
   1d208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d20a:	429a      	cmp	r2, r3
   1d20c:	d39e      	bcc.n	1d14c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d20e:	2301      	movs	r3, #1
   1d210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d212:	e79b      	b.n	1d14c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d214:	4b21      	ldr	r3, [pc, #132]	; (1d29c <xTaskIncrementTick+0x1e8>)
   1d216:	681b      	ldr	r3, [r3, #0]
   1d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d21a:	491e      	ldr	r1, [pc, #120]	; (1d294 <xTaskIncrementTick+0x1e0>)
   1d21c:	0013      	movs	r3, r2
   1d21e:	009b      	lsls	r3, r3, #2
   1d220:	189b      	adds	r3, r3, r2
   1d222:	009b      	lsls	r3, r3, #2
   1d224:	585b      	ldr	r3, [r3, r1]
   1d226:	2b01      	cmp	r3, #1
   1d228:	d907      	bls.n	1d23a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d22a:	2301      	movs	r3, #1
   1d22c:	617b      	str	r3, [r7, #20]
   1d22e:	e004      	b.n	1d23a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d230:	4b08      	ldr	r3, [pc, #32]	; (1d254 <xTaskIncrementTick+0x1a0>)
   1d232:	681b      	ldr	r3, [r3, #0]
   1d234:	1c5a      	adds	r2, r3, #1
   1d236:	4b07      	ldr	r3, [pc, #28]	; (1d254 <xTaskIncrementTick+0x1a0>)
   1d238:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d23a:	4b19      	ldr	r3, [pc, #100]	; (1d2a0 <xTaskIncrementTick+0x1ec>)
   1d23c:	681b      	ldr	r3, [r3, #0]
   1d23e:	2b00      	cmp	r3, #0
   1d240:	d001      	beq.n	1d246 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d242:	2301      	movs	r3, #1
   1d244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d246:	697b      	ldr	r3, [r7, #20]
}
   1d248:	0018      	movs	r0, r3
   1d24a:	46bd      	mov	sp, r7
   1d24c:	b006      	add	sp, #24
   1d24e:	bd80      	pop	{r7, pc}
   1d250:	200041d4 	.word	0x200041d4
   1d254:	200041bc 	.word	0x200041bc
   1d258:	20000d34 	.word	0x20000d34
   1d25c:	0001a8e5 	.word	0x0001a8e5
   1d260:	200041b0 	.word	0x200041b0
   1d264:	00019951 	.word	0x00019951
   1d268:	20004164 	.word	0x20004164
   1d26c:	20004168 	.word	0x20004168
   1d270:	200041c4 	.word	0x200041c4
   1d274:	0001d915 	.word	0x0001d915
   1d278:	200041cc 	.word	0x200041cc
   1d27c:	0001aacb 	.word	0x0001aacb
   1d280:	00018c51 	.word	0x00018c51
   1d284:	20000110 	.word	0x20000110
   1d288:	00018c31 	.word	0x00018c31
   1d28c:	00019401 	.word	0x00019401
   1d290:	200041b4 	.word	0x200041b4
   1d294:	200040d8 	.word	0x200040d8
   1d298:	0001aa1b 	.word	0x0001aa1b
   1d29c:	200040d4 	.word	0x200040d4
   1d2a0:	200041c0 	.word	0x200041c0

0001d2a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d2a4:	b580      	push	{r7, lr}
   1d2a6:	b082      	sub	sp, #8
   1d2a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d2aa:	4b3a      	ldr	r3, [pc, #232]	; (1d394 <vTaskSwitchContext+0xf0>)
   1d2ac:	681b      	ldr	r3, [r3, #0]
   1d2ae:	2b00      	cmp	r3, #0
   1d2b0:	d003      	beq.n	1d2ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d2b2:	4b39      	ldr	r3, [pc, #228]	; (1d398 <vTaskSwitchContext+0xf4>)
   1d2b4:	2201      	movs	r2, #1
   1d2b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d2b8:	e067      	b.n	1d38a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d2ba:	4b37      	ldr	r3, [pc, #220]	; (1d398 <vTaskSwitchContext+0xf4>)
   1d2bc:	2200      	movs	r2, #0
   1d2be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d2c0:	4b36      	ldr	r3, [pc, #216]	; (1d39c <vTaskSwitchContext+0xf8>)
   1d2c2:	681b      	ldr	r3, [r3, #0]
   1d2c4:	681a      	ldr	r2, [r3, #0]
   1d2c6:	4b35      	ldr	r3, [pc, #212]	; (1d39c <vTaskSwitchContext+0xf8>)
   1d2c8:	681b      	ldr	r3, [r3, #0]
   1d2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d2cc:	429a      	cmp	r2, r3
   1d2ce:	d808      	bhi.n	1d2e2 <vTaskSwitchContext+0x3e>
   1d2d0:	4b32      	ldr	r3, [pc, #200]	; (1d39c <vTaskSwitchContext+0xf8>)
   1d2d2:	681a      	ldr	r2, [r3, #0]
   1d2d4:	4b31      	ldr	r3, [pc, #196]	; (1d39c <vTaskSwitchContext+0xf8>)
   1d2d6:	681b      	ldr	r3, [r3, #0]
   1d2d8:	3334      	adds	r3, #52	; 0x34
   1d2da:	0019      	movs	r1, r3
   1d2dc:	0010      	movs	r0, r2
   1d2de:	4b30      	ldr	r3, [pc, #192]	; (1d3a0 <vTaskSwitchContext+0xfc>)
   1d2e0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d2e2:	4b30      	ldr	r3, [pc, #192]	; (1d3a4 <vTaskSwitchContext+0x100>)
   1d2e4:	681b      	ldr	r3, [r3, #0]
   1d2e6:	607b      	str	r3, [r7, #4]
   1d2e8:	e007      	b.n	1d2fa <vTaskSwitchContext+0x56>
   1d2ea:	687b      	ldr	r3, [r7, #4]
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	d101      	bne.n	1d2f4 <vTaskSwitchContext+0x50>
   1d2f0:	b672      	cpsid	i
   1d2f2:	e7fe      	b.n	1d2f2 <vTaskSwitchContext+0x4e>
   1d2f4:	687b      	ldr	r3, [r7, #4]
   1d2f6:	3b01      	subs	r3, #1
   1d2f8:	607b      	str	r3, [r7, #4]
   1d2fa:	492b      	ldr	r1, [pc, #172]	; (1d3a8 <vTaskSwitchContext+0x104>)
   1d2fc:	687a      	ldr	r2, [r7, #4]
   1d2fe:	0013      	movs	r3, r2
   1d300:	009b      	lsls	r3, r3, #2
   1d302:	189b      	adds	r3, r3, r2
   1d304:	009b      	lsls	r3, r3, #2
   1d306:	585b      	ldr	r3, [r3, r1]
   1d308:	2b00      	cmp	r3, #0
   1d30a:	d0ee      	beq.n	1d2ea <vTaskSwitchContext+0x46>
   1d30c:	687a      	ldr	r2, [r7, #4]
   1d30e:	0013      	movs	r3, r2
   1d310:	009b      	lsls	r3, r3, #2
   1d312:	189b      	adds	r3, r3, r2
   1d314:	009b      	lsls	r3, r3, #2
   1d316:	4a24      	ldr	r2, [pc, #144]	; (1d3a8 <vTaskSwitchContext+0x104>)
   1d318:	189b      	adds	r3, r3, r2
   1d31a:	603b      	str	r3, [r7, #0]
   1d31c:	683b      	ldr	r3, [r7, #0]
   1d31e:	685b      	ldr	r3, [r3, #4]
   1d320:	685a      	ldr	r2, [r3, #4]
   1d322:	683b      	ldr	r3, [r7, #0]
   1d324:	605a      	str	r2, [r3, #4]
   1d326:	683b      	ldr	r3, [r7, #0]
   1d328:	685a      	ldr	r2, [r3, #4]
   1d32a:	683b      	ldr	r3, [r7, #0]
   1d32c:	3308      	adds	r3, #8
   1d32e:	429a      	cmp	r2, r3
   1d330:	d104      	bne.n	1d33c <vTaskSwitchContext+0x98>
   1d332:	683b      	ldr	r3, [r7, #0]
   1d334:	685b      	ldr	r3, [r3, #4]
   1d336:	685a      	ldr	r2, [r3, #4]
   1d338:	683b      	ldr	r3, [r7, #0]
   1d33a:	605a      	str	r2, [r3, #4]
   1d33c:	683b      	ldr	r3, [r7, #0]
   1d33e:	685b      	ldr	r3, [r3, #4]
   1d340:	68da      	ldr	r2, [r3, #12]
   1d342:	4b16      	ldr	r3, [pc, #88]	; (1d39c <vTaskSwitchContext+0xf8>)
   1d344:	601a      	str	r2, [r3, #0]
   1d346:	4b17      	ldr	r3, [pc, #92]	; (1d3a4 <vTaskSwitchContext+0x100>)
   1d348:	687a      	ldr	r2, [r7, #4]
   1d34a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d34c:	4b17      	ldr	r3, [pc, #92]	; (1d3ac <vTaskSwitchContext+0x108>)
   1d34e:	2201      	movs	r2, #1
   1d350:	601a      	str	r2, [r3, #0]
   1d352:	4b17      	ldr	r3, [pc, #92]	; (1d3b0 <vTaskSwitchContext+0x10c>)
   1d354:	4798      	blx	r3
   1d356:	0003      	movs	r3, r0
   1d358:	0018      	movs	r0, r3
   1d35a:	4b16      	ldr	r3, [pc, #88]	; (1d3b4 <vTaskSwitchContext+0x110>)
   1d35c:	4798      	blx	r3
   1d35e:	0003      	movs	r3, r0
   1d360:	001a      	movs	r2, r3
   1d362:	4b15      	ldr	r3, [pc, #84]	; (1d3b8 <vTaskSwitchContext+0x114>)
   1d364:	881b      	ldrh	r3, [r3, #0]
   1d366:	4013      	ands	r3, r2
   1d368:	b29b      	uxth	r3, r3
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d00a      	beq.n	1d384 <vTaskSwitchContext+0xe0>
   1d36e:	4b10      	ldr	r3, [pc, #64]	; (1d3b0 <vTaskSwitchContext+0x10c>)
   1d370:	4798      	blx	r3
   1d372:	0003      	movs	r3, r0
   1d374:	0018      	movs	r0, r3
   1d376:	4b11      	ldr	r3, [pc, #68]	; (1d3bc <vTaskSwitchContext+0x118>)
   1d378:	4798      	blx	r3
   1d37a:	0003      	movs	r3, r0
   1d37c:	b2db      	uxtb	r3, r3
   1d37e:	0018      	movs	r0, r3
   1d380:	4b0f      	ldr	r3, [pc, #60]	; (1d3c0 <vTaskSwitchContext+0x11c>)
   1d382:	4798      	blx	r3
   1d384:	4b09      	ldr	r3, [pc, #36]	; (1d3ac <vTaskSwitchContext+0x108>)
   1d386:	2202      	movs	r2, #2
   1d388:	601a      	str	r2, [r3, #0]
}
   1d38a:	46c0      	nop			; (mov r8, r8)
   1d38c:	46bd      	mov	sp, r7
   1d38e:	b002      	add	sp, #8
   1d390:	bd80      	pop	{r7, pc}
   1d392:	46c0      	nop			; (mov r8, r8)
   1d394:	200041d4 	.word	0x200041d4
   1d398:	200041c0 	.word	0x200041c0
   1d39c:	200040d4 	.word	0x200040d4
   1d3a0:	0003368d 	.word	0x0003368d
   1d3a4:	200041b4 	.word	0x200041b4
   1d3a8:	200040d8 	.word	0x200040d8
   1d3ac:	20000d40 	.word	0x20000d40
   1d3b0:	00018eed 	.word	0x00018eed
   1d3b4:	00018c51 	.word	0x00018c51
   1d3b8:	20000110 	.word	0x20000110
   1d3bc:	00018c31 	.word	0x00018c31
   1d3c0:	00019a4d 	.word	0x00019a4d

0001d3c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d3c4:	b580      	push	{r7, lr}
   1d3c6:	b082      	sub	sp, #8
   1d3c8:	af00      	add	r7, sp, #0
   1d3ca:	6078      	str	r0, [r7, #4]
   1d3cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d3ce:	687b      	ldr	r3, [r7, #4]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d101      	bne.n	1d3d8 <vTaskPlaceOnEventList+0x14>
   1d3d4:	b672      	cpsid	i
   1d3d6:	e7fe      	b.n	1d3d6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d3d8:	4b08      	ldr	r3, [pc, #32]	; (1d3fc <vTaskPlaceOnEventList+0x38>)
   1d3da:	681b      	ldr	r3, [r3, #0]
   1d3dc:	3318      	adds	r3, #24
   1d3de:	001a      	movs	r2, r3
   1d3e0:	687b      	ldr	r3, [r7, #4]
   1d3e2:	0011      	movs	r1, r2
   1d3e4:	0018      	movs	r0, r3
   1d3e6:	4b06      	ldr	r3, [pc, #24]	; (1d400 <vTaskPlaceOnEventList+0x3c>)
   1d3e8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d3ea:	683b      	ldr	r3, [r7, #0]
   1d3ec:	2101      	movs	r1, #1
   1d3ee:	0018      	movs	r0, r3
   1d3f0:	4b04      	ldr	r3, [pc, #16]	; (1d404 <vTaskPlaceOnEventList+0x40>)
   1d3f2:	4798      	blx	r3
}
   1d3f4:	46c0      	nop			; (mov r8, r8)
   1d3f6:	46bd      	mov	sp, r7
   1d3f8:	b002      	add	sp, #8
   1d3fa:	bd80      	pop	{r7, pc}
   1d3fc:	200040d4 	.word	0x200040d4
   1d400:	0001aa5f 	.word	0x0001aa5f
   1d404:	0001de69 	.word	0x0001de69

0001d408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d408:	b580      	push	{r7, lr}
   1d40a:	b084      	sub	sp, #16
   1d40c:	af00      	add	r7, sp, #0
   1d40e:	60f8      	str	r0, [r7, #12]
   1d410:	60b9      	str	r1, [r7, #8]
   1d412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d414:	68fb      	ldr	r3, [r7, #12]
   1d416:	2b00      	cmp	r3, #0
   1d418:	d101      	bne.n	1d41e <vTaskPlaceOnEventListRestricted+0x16>
   1d41a:	b672      	cpsid	i
   1d41c:	e7fe      	b.n	1d41c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d41e:	4b28      	ldr	r3, [pc, #160]	; (1d4c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d420:	681b      	ldr	r3, [r3, #0]
   1d422:	3318      	adds	r3, #24
   1d424:	001a      	movs	r2, r3
   1d426:	68fb      	ldr	r3, [r7, #12]
   1d428:	0011      	movs	r1, r2
   1d42a:	0018      	movs	r0, r3
   1d42c:	4b25      	ldr	r3, [pc, #148]	; (1d4c4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d42e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d430:	687b      	ldr	r3, [r7, #4]
   1d432:	2b00      	cmp	r3, #0
   1d434:	d002      	beq.n	1d43c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d436:	2301      	movs	r3, #1
   1d438:	425b      	negs	r3, r3
   1d43a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d43c:	4b20      	ldr	r3, [pc, #128]	; (1d4c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d43e:	681b      	ldr	r3, [r3, #0]
   1d440:	0018      	movs	r0, r3
   1d442:	4b21      	ldr	r3, [pc, #132]	; (1d4c8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d444:	4798      	blx	r3
   1d446:	0003      	movs	r3, r0
   1d448:	001a      	movs	r2, r3
   1d44a:	4b20      	ldr	r3, [pc, #128]	; (1d4cc <vTaskPlaceOnEventListRestricted+0xc4>)
   1d44c:	881b      	ldrh	r3, [r3, #0]
   1d44e:	4013      	ands	r3, r2
   1d450:	b29b      	uxth	r3, r3
   1d452:	2b00      	cmp	r3, #0
   1d454:	d011      	beq.n	1d47a <vTaskPlaceOnEventListRestricted+0x72>
   1d456:	4b1e      	ldr	r3, [pc, #120]	; (1d4d0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d458:	681a      	ldr	r2, [r3, #0]
   1d45a:	68bb      	ldr	r3, [r7, #8]
   1d45c:	18d3      	adds	r3, r2, r3
   1d45e:	0019      	movs	r1, r3
   1d460:	2088      	movs	r0, #136	; 0x88
   1d462:	4b1c      	ldr	r3, [pc, #112]	; (1d4d4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d464:	4798      	blx	r3
   1d466:	4b16      	ldr	r3, [pc, #88]	; (1d4c0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d468:	681b      	ldr	r3, [r3, #0]
   1d46a:	0018      	movs	r0, r3
   1d46c:	4b1a      	ldr	r3, [pc, #104]	; (1d4d8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d46e:	4798      	blx	r3
   1d470:	0003      	movs	r3, r0
   1d472:	b2db      	uxtb	r3, r3
   1d474:	0018      	movs	r0, r3
   1d476:	4b19      	ldr	r3, [pc, #100]	; (1d4dc <vTaskPlaceOnEventListRestricted+0xd4>)
   1d478:	4798      	blx	r3
   1d47a:	4b19      	ldr	r3, [pc, #100]	; (1d4e0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d47c:	4798      	blx	r3
   1d47e:	0003      	movs	r3, r0
   1d480:	0018      	movs	r0, r3
   1d482:	4b11      	ldr	r3, [pc, #68]	; (1d4c8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d484:	4798      	blx	r3
   1d486:	0003      	movs	r3, r0
   1d488:	001a      	movs	r2, r3
   1d48a:	4b10      	ldr	r3, [pc, #64]	; (1d4cc <vTaskPlaceOnEventListRestricted+0xc4>)
   1d48c:	881b      	ldrh	r3, [r3, #0]
   1d48e:	4013      	ands	r3, r2
   1d490:	b29b      	uxth	r3, r3
   1d492:	2b00      	cmp	r3, #0
   1d494:	d00a      	beq.n	1d4ac <vTaskPlaceOnEventListRestricted+0xa4>
   1d496:	4b12      	ldr	r3, [pc, #72]	; (1d4e0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d498:	4798      	blx	r3
   1d49a:	0003      	movs	r3, r0
   1d49c:	0018      	movs	r0, r3
   1d49e:	4b0e      	ldr	r3, [pc, #56]	; (1d4d8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d4a0:	4798      	blx	r3
   1d4a2:	0003      	movs	r3, r0
   1d4a4:	b2db      	uxtb	r3, r3
   1d4a6:	0018      	movs	r0, r3
   1d4a8:	4b0c      	ldr	r3, [pc, #48]	; (1d4dc <vTaskPlaceOnEventListRestricted+0xd4>)
   1d4aa:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d4ac:	687a      	ldr	r2, [r7, #4]
   1d4ae:	68bb      	ldr	r3, [r7, #8]
   1d4b0:	0011      	movs	r1, r2
   1d4b2:	0018      	movs	r0, r3
   1d4b4:	4b0b      	ldr	r3, [pc, #44]	; (1d4e4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d4b6:	4798      	blx	r3
	}
   1d4b8:	46c0      	nop			; (mov r8, r8)
   1d4ba:	46bd      	mov	sp, r7
   1d4bc:	b004      	add	sp, #16
   1d4be:	bd80      	pop	{r7, pc}
   1d4c0:	200040d4 	.word	0x200040d4
   1d4c4:	0001aa1b 	.word	0x0001aa1b
   1d4c8:	00018c51 	.word	0x00018c51
   1d4cc:	20000110 	.word	0x20000110
   1d4d0:	200041b0 	.word	0x200041b0
   1d4d4:	00019951 	.word	0x00019951
   1d4d8:	00018c31 	.word	0x00018c31
   1d4dc:	00019de1 	.word	0x00019de1
   1d4e0:	00018eed 	.word	0x00018eed
   1d4e4:	0001de69 	.word	0x0001de69

0001d4e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d4e8:	b580      	push	{r7, lr}
   1d4ea:	b084      	sub	sp, #16
   1d4ec:	af00      	add	r7, sp, #0
   1d4ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d4f0:	687b      	ldr	r3, [r7, #4]
   1d4f2:	68db      	ldr	r3, [r3, #12]
   1d4f4:	68db      	ldr	r3, [r3, #12]
   1d4f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d4f8:	68bb      	ldr	r3, [r7, #8]
   1d4fa:	2b00      	cmp	r3, #0
   1d4fc:	d101      	bne.n	1d502 <xTaskRemoveFromEventList+0x1a>
   1d4fe:	b672      	cpsid	i
   1d500:	e7fe      	b.n	1d500 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d502:	68bb      	ldr	r3, [r7, #8]
   1d504:	3318      	adds	r3, #24
   1d506:	0018      	movs	r0, r3
   1d508:	4b2a      	ldr	r3, [pc, #168]	; (1d5b4 <xTaskRemoveFromEventList+0xcc>)
   1d50a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d50c:	4b2a      	ldr	r3, [pc, #168]	; (1d5b8 <xTaskRemoveFromEventList+0xd0>)
   1d50e:	681b      	ldr	r3, [r3, #0]
   1d510:	2b00      	cmp	r3, #0
   1d512:	d132      	bne.n	1d57a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d514:	68bb      	ldr	r3, [r7, #8]
   1d516:	3304      	adds	r3, #4
   1d518:	0018      	movs	r0, r3
   1d51a:	4b26      	ldr	r3, [pc, #152]	; (1d5b4 <xTaskRemoveFromEventList+0xcc>)
   1d51c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d51e:	68bb      	ldr	r3, [r7, #8]
   1d520:	0018      	movs	r0, r3
   1d522:	4b26      	ldr	r3, [pc, #152]	; (1d5bc <xTaskRemoveFromEventList+0xd4>)
   1d524:	4798      	blx	r3
   1d526:	0003      	movs	r3, r0
   1d528:	001a      	movs	r2, r3
   1d52a:	4b25      	ldr	r3, [pc, #148]	; (1d5c0 <xTaskRemoveFromEventList+0xd8>)
   1d52c:	881b      	ldrh	r3, [r3, #0]
   1d52e:	4013      	ands	r3, r2
   1d530:	b29b      	uxth	r3, r3
   1d532:	2b00      	cmp	r3, #0
   1d534:	d008      	beq.n	1d548 <xTaskRemoveFromEventList+0x60>
   1d536:	68bb      	ldr	r3, [r7, #8]
   1d538:	0018      	movs	r0, r3
   1d53a:	4b22      	ldr	r3, [pc, #136]	; (1d5c4 <xTaskRemoveFromEventList+0xdc>)
   1d53c:	4798      	blx	r3
   1d53e:	0003      	movs	r3, r0
   1d540:	b2db      	uxtb	r3, r3
   1d542:	0018      	movs	r0, r3
   1d544:	4b20      	ldr	r3, [pc, #128]	; (1d5c8 <xTaskRemoveFromEventList+0xe0>)
   1d546:	4798      	blx	r3
   1d548:	68bb      	ldr	r3, [r7, #8]
   1d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d54c:	4b1f      	ldr	r3, [pc, #124]	; (1d5cc <xTaskRemoveFromEventList+0xe4>)
   1d54e:	681b      	ldr	r3, [r3, #0]
   1d550:	429a      	cmp	r2, r3
   1d552:	d903      	bls.n	1d55c <xTaskRemoveFromEventList+0x74>
   1d554:	68bb      	ldr	r3, [r7, #8]
   1d556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d558:	4b1c      	ldr	r3, [pc, #112]	; (1d5cc <xTaskRemoveFromEventList+0xe4>)
   1d55a:	601a      	str	r2, [r3, #0]
   1d55c:	68bb      	ldr	r3, [r7, #8]
   1d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d560:	0013      	movs	r3, r2
   1d562:	009b      	lsls	r3, r3, #2
   1d564:	189b      	adds	r3, r3, r2
   1d566:	009b      	lsls	r3, r3, #2
   1d568:	4a19      	ldr	r2, [pc, #100]	; (1d5d0 <xTaskRemoveFromEventList+0xe8>)
   1d56a:	189a      	adds	r2, r3, r2
   1d56c:	68bb      	ldr	r3, [r7, #8]
   1d56e:	3304      	adds	r3, #4
   1d570:	0019      	movs	r1, r3
   1d572:	0010      	movs	r0, r2
   1d574:	4b17      	ldr	r3, [pc, #92]	; (1d5d4 <xTaskRemoveFromEventList+0xec>)
   1d576:	4798      	blx	r3
   1d578:	e007      	b.n	1d58a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d57a:	68bb      	ldr	r3, [r7, #8]
   1d57c:	3318      	adds	r3, #24
   1d57e:	001a      	movs	r2, r3
   1d580:	4b15      	ldr	r3, [pc, #84]	; (1d5d8 <xTaskRemoveFromEventList+0xf0>)
   1d582:	0011      	movs	r1, r2
   1d584:	0018      	movs	r0, r3
   1d586:	4b13      	ldr	r3, [pc, #76]	; (1d5d4 <xTaskRemoveFromEventList+0xec>)
   1d588:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d58a:	68bb      	ldr	r3, [r7, #8]
   1d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d58e:	4b13      	ldr	r3, [pc, #76]	; (1d5dc <xTaskRemoveFromEventList+0xf4>)
   1d590:	681b      	ldr	r3, [r3, #0]
   1d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d594:	429a      	cmp	r2, r3
   1d596:	d905      	bls.n	1d5a4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d598:	2301      	movs	r3, #1
   1d59a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d59c:	4b10      	ldr	r3, [pc, #64]	; (1d5e0 <xTaskRemoveFromEventList+0xf8>)
   1d59e:	2201      	movs	r2, #1
   1d5a0:	601a      	str	r2, [r3, #0]
   1d5a2:	e001      	b.n	1d5a8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d5a4:	2300      	movs	r3, #0
   1d5a6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d5a8:	68fb      	ldr	r3, [r7, #12]
}
   1d5aa:	0018      	movs	r0, r3
   1d5ac:	46bd      	mov	sp, r7
   1d5ae:	b004      	add	sp, #16
   1d5b0:	bd80      	pop	{r7, pc}
   1d5b2:	46c0      	nop			; (mov r8, r8)
   1d5b4:	0001aacb 	.word	0x0001aacb
   1d5b8:	200041d4 	.word	0x200041d4
   1d5bc:	00018c51 	.word	0x00018c51
   1d5c0:	20000110 	.word	0x20000110
   1d5c4:	00018c31 	.word	0x00018c31
   1d5c8:	00019401 	.word	0x00019401
   1d5cc:	200041b4 	.word	0x200041b4
   1d5d0:	200040d8 	.word	0x200040d8
   1d5d4:	0001aa1b 	.word	0x0001aa1b
   1d5d8:	2000416c 	.word	0x2000416c
   1d5dc:	200040d4 	.word	0x200040d4
   1d5e0:	200041c0 	.word	0x200041c0

0001d5e4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d5e4:	b580      	push	{r7, lr}
   1d5e6:	b082      	sub	sp, #8
   1d5e8:	af00      	add	r7, sp, #0
   1d5ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d5ec:	687b      	ldr	r3, [r7, #4]
   1d5ee:	2b00      	cmp	r3, #0
   1d5f0:	d101      	bne.n	1d5f6 <vTaskSetTimeOutState+0x12>
   1d5f2:	b672      	cpsid	i
   1d5f4:	e7fe      	b.n	1d5f4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d5f6:	4b08      	ldr	r3, [pc, #32]	; (1d618 <vTaskSetTimeOutState+0x34>)
   1d5f8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d5fa:	4b08      	ldr	r3, [pc, #32]	; (1d61c <vTaskSetTimeOutState+0x38>)
   1d5fc:	681a      	ldr	r2, [r3, #0]
   1d5fe:	687b      	ldr	r3, [r7, #4]
   1d600:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d602:	4b07      	ldr	r3, [pc, #28]	; (1d620 <vTaskSetTimeOutState+0x3c>)
   1d604:	681a      	ldr	r2, [r3, #0]
   1d606:	687b      	ldr	r3, [r7, #4]
   1d608:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d60a:	4b06      	ldr	r3, [pc, #24]	; (1d624 <vTaskSetTimeOutState+0x40>)
   1d60c:	4798      	blx	r3
}
   1d60e:	46c0      	nop			; (mov r8, r8)
   1d610:	46bd      	mov	sp, r7
   1d612:	b002      	add	sp, #8
   1d614:	bd80      	pop	{r7, pc}
   1d616:	46c0      	nop			; (mov r8, r8)
   1d618:	0001ac59 	.word	0x0001ac59
   1d61c:	200041c4 	.word	0x200041c4
   1d620:	200041b0 	.word	0x200041b0
   1d624:	0001ac7d 	.word	0x0001ac7d

0001d628 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d628:	b580      	push	{r7, lr}
   1d62a:	b082      	sub	sp, #8
   1d62c:	af00      	add	r7, sp, #0
   1d62e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d630:	4b05      	ldr	r3, [pc, #20]	; (1d648 <vTaskInternalSetTimeOutState+0x20>)
   1d632:	681a      	ldr	r2, [r3, #0]
   1d634:	687b      	ldr	r3, [r7, #4]
   1d636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d638:	4b04      	ldr	r3, [pc, #16]	; (1d64c <vTaskInternalSetTimeOutState+0x24>)
   1d63a:	681a      	ldr	r2, [r3, #0]
   1d63c:	687b      	ldr	r3, [r7, #4]
   1d63e:	605a      	str	r2, [r3, #4]
}
   1d640:	46c0      	nop			; (mov r8, r8)
   1d642:	46bd      	mov	sp, r7
   1d644:	b002      	add	sp, #8
   1d646:	bd80      	pop	{r7, pc}
   1d648:	200041c4 	.word	0x200041c4
   1d64c:	200041b0 	.word	0x200041b0

0001d650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d650:	b580      	push	{r7, lr}
   1d652:	b086      	sub	sp, #24
   1d654:	af00      	add	r7, sp, #0
   1d656:	6078      	str	r0, [r7, #4]
   1d658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d65a:	687b      	ldr	r3, [r7, #4]
   1d65c:	2b00      	cmp	r3, #0
   1d65e:	d101      	bne.n	1d664 <xTaskCheckForTimeOut+0x14>
   1d660:	b672      	cpsid	i
   1d662:	e7fe      	b.n	1d662 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d664:	683b      	ldr	r3, [r7, #0]
   1d666:	2b00      	cmp	r3, #0
   1d668:	d101      	bne.n	1d66e <xTaskCheckForTimeOut+0x1e>
   1d66a:	b672      	cpsid	i
   1d66c:	e7fe      	b.n	1d66c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d66e:	4b1e      	ldr	r3, [pc, #120]	; (1d6e8 <xTaskCheckForTimeOut+0x98>)
   1d670:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d672:	4b1e      	ldr	r3, [pc, #120]	; (1d6ec <xTaskCheckForTimeOut+0x9c>)
   1d674:	681b      	ldr	r3, [r3, #0]
   1d676:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d678:	687b      	ldr	r3, [r7, #4]
   1d67a:	685b      	ldr	r3, [r3, #4]
   1d67c:	693a      	ldr	r2, [r7, #16]
   1d67e:	1ad3      	subs	r3, r2, r3
   1d680:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d682:	683b      	ldr	r3, [r7, #0]
   1d684:	681b      	ldr	r3, [r3, #0]
   1d686:	3301      	adds	r3, #1
   1d688:	d102      	bne.n	1d690 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d68a:	2300      	movs	r3, #0
   1d68c:	617b      	str	r3, [r7, #20]
   1d68e:	e024      	b.n	1d6da <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d690:	687b      	ldr	r3, [r7, #4]
   1d692:	681a      	ldr	r2, [r3, #0]
   1d694:	4b16      	ldr	r3, [pc, #88]	; (1d6f0 <xTaskCheckForTimeOut+0xa0>)
   1d696:	681b      	ldr	r3, [r3, #0]
   1d698:	429a      	cmp	r2, r3
   1d69a:	d007      	beq.n	1d6ac <xTaskCheckForTimeOut+0x5c>
   1d69c:	687b      	ldr	r3, [r7, #4]
   1d69e:	685a      	ldr	r2, [r3, #4]
   1d6a0:	693b      	ldr	r3, [r7, #16]
   1d6a2:	429a      	cmp	r2, r3
   1d6a4:	d802      	bhi.n	1d6ac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d6a6:	2301      	movs	r3, #1
   1d6a8:	617b      	str	r3, [r7, #20]
   1d6aa:	e016      	b.n	1d6da <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d6ac:	683b      	ldr	r3, [r7, #0]
   1d6ae:	681a      	ldr	r2, [r3, #0]
   1d6b0:	68fb      	ldr	r3, [r7, #12]
   1d6b2:	429a      	cmp	r2, r3
   1d6b4:	d90c      	bls.n	1d6d0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d6b6:	683b      	ldr	r3, [r7, #0]
   1d6b8:	681a      	ldr	r2, [r3, #0]
   1d6ba:	68fb      	ldr	r3, [r7, #12]
   1d6bc:	1ad2      	subs	r2, r2, r3
   1d6be:	683b      	ldr	r3, [r7, #0]
   1d6c0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d6c2:	687b      	ldr	r3, [r7, #4]
   1d6c4:	0018      	movs	r0, r3
   1d6c6:	4b0b      	ldr	r3, [pc, #44]	; (1d6f4 <xTaskCheckForTimeOut+0xa4>)
   1d6c8:	4798      	blx	r3
			xReturn = pdFALSE;
   1d6ca:	2300      	movs	r3, #0
   1d6cc:	617b      	str	r3, [r7, #20]
   1d6ce:	e004      	b.n	1d6da <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d6d0:	683b      	ldr	r3, [r7, #0]
   1d6d2:	2200      	movs	r2, #0
   1d6d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d6d6:	2301      	movs	r3, #1
   1d6d8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d6da:	4b07      	ldr	r3, [pc, #28]	; (1d6f8 <xTaskCheckForTimeOut+0xa8>)
   1d6dc:	4798      	blx	r3

	return xReturn;
   1d6de:	697b      	ldr	r3, [r7, #20]
}
   1d6e0:	0018      	movs	r0, r3
   1d6e2:	46bd      	mov	sp, r7
   1d6e4:	b006      	add	sp, #24
   1d6e6:	bd80      	pop	{r7, pc}
   1d6e8:	0001ac59 	.word	0x0001ac59
   1d6ec:	200041b0 	.word	0x200041b0
   1d6f0:	200041c4 	.word	0x200041c4
   1d6f4:	0001d629 	.word	0x0001d629
   1d6f8:	0001ac7d 	.word	0x0001ac7d

0001d6fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d6fc:	b580      	push	{r7, lr}
   1d6fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d700:	4b02      	ldr	r3, [pc, #8]	; (1d70c <vTaskMissedYield+0x10>)
   1d702:	2201      	movs	r2, #1
   1d704:	601a      	str	r2, [r3, #0]
}
   1d706:	46c0      	nop			; (mov r8, r8)
   1d708:	46bd      	mov	sp, r7
   1d70a:	bd80      	pop	{r7, pc}
   1d70c:	200041c0 	.word	0x200041c0

0001d710 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d710:	b580      	push	{r7, lr}
   1d712:	b084      	sub	sp, #16
   1d714:	af00      	add	r7, sp, #0
   1d716:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d718:	687b      	ldr	r3, [r7, #4]
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d005      	beq.n	1d72a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d71e:	687b      	ldr	r3, [r7, #4]
   1d720:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d722:	68bb      	ldr	r3, [r7, #8]
   1d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d726:	60fb      	str	r3, [r7, #12]
   1d728:	e001      	b.n	1d72e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d72a:	2300      	movs	r3, #0
   1d72c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d72e:	68fb      	ldr	r3, [r7, #12]
	}
   1d730:	0018      	movs	r0, r3
   1d732:	46bd      	mov	sp, r7
   1d734:	b004      	add	sp, #16
   1d736:	bd80      	pop	{r7, pc}

0001d738 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d738:	b580      	push	{r7, lr}
   1d73a:	b084      	sub	sp, #16
   1d73c:	af00      	add	r7, sp, #0
   1d73e:	6078      	str	r0, [r7, #4]
   1d740:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d742:	687b      	ldr	r3, [r7, #4]
   1d744:	2b00      	cmp	r3, #0
   1d746:	d004      	beq.n	1d752 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d748:	687b      	ldr	r3, [r7, #4]
   1d74a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d74c:	68fb      	ldr	r3, [r7, #12]
   1d74e:	683a      	ldr	r2, [r7, #0]
   1d750:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d752:	46c0      	nop			; (mov r8, r8)
   1d754:	46bd      	mov	sp, r7
   1d756:	b004      	add	sp, #16
   1d758:	bd80      	pop	{r7, pc}
	...

0001d75c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d75c:	b580      	push	{r7, lr}
   1d75e:	b082      	sub	sp, #8
   1d760:	af00      	add	r7, sp, #0
   1d762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d764:	4b04      	ldr	r3, [pc, #16]	; (1d778 <prvIdleTask+0x1c>)
   1d766:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d768:	4b04      	ldr	r3, [pc, #16]	; (1d77c <prvIdleTask+0x20>)
   1d76a:	681b      	ldr	r3, [r3, #0]
   1d76c:	2b01      	cmp	r3, #1
   1d76e:	d9f9      	bls.n	1d764 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d770:	4b03      	ldr	r3, [pc, #12]	; (1d780 <prvIdleTask+0x24>)
   1d772:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d774:	e7f6      	b.n	1d764 <prvIdleTask+0x8>
   1d776:	46c0      	nop			; (mov r8, r8)
   1d778:	0001d811 	.word	0x0001d811
   1d77c:	200040d8 	.word	0x200040d8
   1d780:	0001ac41 	.word	0x0001ac41

0001d784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d784:	b580      	push	{r7, lr}
   1d786:	b082      	sub	sp, #8
   1d788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d78a:	2300      	movs	r3, #0
   1d78c:	607b      	str	r3, [r7, #4]
   1d78e:	e00c      	b.n	1d7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d790:	687a      	ldr	r2, [r7, #4]
   1d792:	0013      	movs	r3, r2
   1d794:	009b      	lsls	r3, r3, #2
   1d796:	189b      	adds	r3, r3, r2
   1d798:	009b      	lsls	r3, r3, #2
   1d79a:	4a14      	ldr	r2, [pc, #80]	; (1d7ec <prvInitialiseTaskLists+0x68>)
   1d79c:	189b      	adds	r3, r3, r2
   1d79e:	0018      	movs	r0, r3
   1d7a0:	4b13      	ldr	r3, [pc, #76]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7a2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d7a4:	687b      	ldr	r3, [r7, #4]
   1d7a6:	3301      	adds	r3, #1
   1d7a8:	607b      	str	r3, [r7, #4]
   1d7aa:	687b      	ldr	r3, [r7, #4]
   1d7ac:	2b04      	cmp	r3, #4
   1d7ae:	d9ef      	bls.n	1d790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d7b0:	4b10      	ldr	r3, [pc, #64]	; (1d7f4 <prvInitialiseTaskLists+0x70>)
   1d7b2:	0018      	movs	r0, r3
   1d7b4:	4b0e      	ldr	r3, [pc, #56]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7b6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d7b8:	4b0f      	ldr	r3, [pc, #60]	; (1d7f8 <prvInitialiseTaskLists+0x74>)
   1d7ba:	0018      	movs	r0, r3
   1d7bc:	4b0c      	ldr	r3, [pc, #48]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7be:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d7c0:	4b0e      	ldr	r3, [pc, #56]	; (1d7fc <prvInitialiseTaskLists+0x78>)
   1d7c2:	0018      	movs	r0, r3
   1d7c4:	4b0a      	ldr	r3, [pc, #40]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7c6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d7c8:	4b0d      	ldr	r3, [pc, #52]	; (1d800 <prvInitialiseTaskLists+0x7c>)
   1d7ca:	0018      	movs	r0, r3
   1d7cc:	4b08      	ldr	r3, [pc, #32]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7ce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d7d0:	4b0c      	ldr	r3, [pc, #48]	; (1d804 <prvInitialiseTaskLists+0x80>)
   1d7d2:	0018      	movs	r0, r3
   1d7d4:	4b06      	ldr	r3, [pc, #24]	; (1d7f0 <prvInitialiseTaskLists+0x6c>)
   1d7d6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d7d8:	4b0b      	ldr	r3, [pc, #44]	; (1d808 <prvInitialiseTaskLists+0x84>)
   1d7da:	4a06      	ldr	r2, [pc, #24]	; (1d7f4 <prvInitialiseTaskLists+0x70>)
   1d7dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d7de:	4b0b      	ldr	r3, [pc, #44]	; (1d80c <prvInitialiseTaskLists+0x88>)
   1d7e0:	4a05      	ldr	r2, [pc, #20]	; (1d7f8 <prvInitialiseTaskLists+0x74>)
   1d7e2:	601a      	str	r2, [r3, #0]
}
   1d7e4:	46c0      	nop			; (mov r8, r8)
   1d7e6:	46bd      	mov	sp, r7
   1d7e8:	b002      	add	sp, #8
   1d7ea:	bd80      	pop	{r7, pc}
   1d7ec:	200040d8 	.word	0x200040d8
   1d7f0:	0001a9c9 	.word	0x0001a9c9
   1d7f4:	2000413c 	.word	0x2000413c
   1d7f8:	20004150 	.word	0x20004150
   1d7fc:	2000416c 	.word	0x2000416c
   1d800:	20004180 	.word	0x20004180
   1d804:	20004198 	.word	0x20004198
   1d808:	20004164 	.word	0x20004164
   1d80c:	20004168 	.word	0x20004168

0001d810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d810:	b580      	push	{r7, lr}
   1d812:	b082      	sub	sp, #8
   1d814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d816:	e01a      	b.n	1d84e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d818:	4b11      	ldr	r3, [pc, #68]	; (1d860 <prvCheckTasksWaitingTermination+0x50>)
   1d81a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d81c:	4b11      	ldr	r3, [pc, #68]	; (1d864 <prvCheckTasksWaitingTermination+0x54>)
   1d81e:	68db      	ldr	r3, [r3, #12]
   1d820:	68db      	ldr	r3, [r3, #12]
   1d822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d824:	687b      	ldr	r3, [r7, #4]
   1d826:	3304      	adds	r3, #4
   1d828:	0018      	movs	r0, r3
   1d82a:	4b0f      	ldr	r3, [pc, #60]	; (1d868 <prvCheckTasksWaitingTermination+0x58>)
   1d82c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d82e:	4b0f      	ldr	r3, [pc, #60]	; (1d86c <prvCheckTasksWaitingTermination+0x5c>)
   1d830:	681b      	ldr	r3, [r3, #0]
   1d832:	1e5a      	subs	r2, r3, #1
   1d834:	4b0d      	ldr	r3, [pc, #52]	; (1d86c <prvCheckTasksWaitingTermination+0x5c>)
   1d836:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d838:	4b0d      	ldr	r3, [pc, #52]	; (1d870 <prvCheckTasksWaitingTermination+0x60>)
   1d83a:	681b      	ldr	r3, [r3, #0]
   1d83c:	1e5a      	subs	r2, r3, #1
   1d83e:	4b0c      	ldr	r3, [pc, #48]	; (1d870 <prvCheckTasksWaitingTermination+0x60>)
   1d840:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d842:	4b0c      	ldr	r3, [pc, #48]	; (1d874 <prvCheckTasksWaitingTermination+0x64>)
   1d844:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d846:	687b      	ldr	r3, [r7, #4]
   1d848:	0018      	movs	r0, r3
   1d84a:	4b0b      	ldr	r3, [pc, #44]	; (1d878 <prvCheckTasksWaitingTermination+0x68>)
   1d84c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d84e:	4b08      	ldr	r3, [pc, #32]	; (1d870 <prvCheckTasksWaitingTermination+0x60>)
   1d850:	681b      	ldr	r3, [r3, #0]
   1d852:	2b00      	cmp	r3, #0
   1d854:	d1e0      	bne.n	1d818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d856:	46c0      	nop			; (mov r8, r8)
   1d858:	46bd      	mov	sp, r7
   1d85a:	b002      	add	sp, #8
   1d85c:	bd80      	pop	{r7, pc}
   1d85e:	46c0      	nop			; (mov r8, r8)
   1d860:	0001ac59 	.word	0x0001ac59
   1d864:	20004180 	.word	0x20004180
   1d868:	0001aacb 	.word	0x0001aacb
   1d86c:	200041ac 	.word	0x200041ac
   1d870:	20004194 	.word	0x20004194
   1d874:	0001ac7d 	.word	0x0001ac7d
   1d878:	0001d8ed 	.word	0x0001d8ed

0001d87c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d87c:	b580      	push	{r7, lr}
   1d87e:	b084      	sub	sp, #16
   1d880:	af00      	add	r7, sp, #0
   1d882:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d884:	2300      	movs	r3, #0
   1d886:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d888:	e005      	b.n	1d896 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d88a:	687b      	ldr	r3, [r7, #4]
   1d88c:	3301      	adds	r3, #1
   1d88e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d890:	68fb      	ldr	r3, [r7, #12]
   1d892:	3301      	adds	r3, #1
   1d894:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d896:	687b      	ldr	r3, [r7, #4]
   1d898:	781b      	ldrb	r3, [r3, #0]
   1d89a:	2ba5      	cmp	r3, #165	; 0xa5
   1d89c:	d0f5      	beq.n	1d88a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d89e:	68fb      	ldr	r3, [r7, #12]
   1d8a0:	089b      	lsrs	r3, r3, #2
   1d8a2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d8a4:	68fb      	ldr	r3, [r7, #12]
   1d8a6:	b29b      	uxth	r3, r3
	}
   1d8a8:	0018      	movs	r0, r3
   1d8aa:	46bd      	mov	sp, r7
   1d8ac:	b004      	add	sp, #16
   1d8ae:	bd80      	pop	{r7, pc}

0001d8b0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d8b0:	b580      	push	{r7, lr}
   1d8b2:	b086      	sub	sp, #24
   1d8b4:	af00      	add	r7, sp, #0
   1d8b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d8b8:	687b      	ldr	r3, [r7, #4]
   1d8ba:	2b00      	cmp	r3, #0
   1d8bc:	d102      	bne.n	1d8c4 <uxTaskGetStackHighWaterMark+0x14>
   1d8be:	4b09      	ldr	r3, [pc, #36]	; (1d8e4 <uxTaskGetStackHighWaterMark+0x34>)
   1d8c0:	681b      	ldr	r3, [r3, #0]
   1d8c2:	e000      	b.n	1d8c6 <uxTaskGetStackHighWaterMark+0x16>
   1d8c4:	687b      	ldr	r3, [r7, #4]
   1d8c6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d8c8:	697b      	ldr	r3, [r7, #20]
   1d8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d8cc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d8ce:	693b      	ldr	r3, [r7, #16]
   1d8d0:	0018      	movs	r0, r3
   1d8d2:	4b05      	ldr	r3, [pc, #20]	; (1d8e8 <uxTaskGetStackHighWaterMark+0x38>)
   1d8d4:	4798      	blx	r3
   1d8d6:	0003      	movs	r3, r0
   1d8d8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d8da:	68fb      	ldr	r3, [r7, #12]
	}
   1d8dc:	0018      	movs	r0, r3
   1d8de:	46bd      	mov	sp, r7
   1d8e0:	b006      	add	sp, #24
   1d8e2:	bd80      	pop	{r7, pc}
   1d8e4:	200040d4 	.word	0x200040d4
   1d8e8:	0001d87d 	.word	0x0001d87d

0001d8ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d8ec:	b580      	push	{r7, lr}
   1d8ee:	b082      	sub	sp, #8
   1d8f0:	af00      	add	r7, sp, #0
   1d8f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d8f4:	687b      	ldr	r3, [r7, #4]
   1d8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d8f8:	0018      	movs	r0, r3
   1d8fa:	4b05      	ldr	r3, [pc, #20]	; (1d910 <prvDeleteTCB+0x24>)
   1d8fc:	4798      	blx	r3
			vPortFree( pxTCB );
   1d8fe:	687b      	ldr	r3, [r7, #4]
   1d900:	0018      	movs	r0, r3
   1d902:	4b03      	ldr	r3, [pc, #12]	; (1d910 <prvDeleteTCB+0x24>)
   1d904:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d906:	46c0      	nop			; (mov r8, r8)
   1d908:	46bd      	mov	sp, r7
   1d90a:	b002      	add	sp, #8
   1d90c:	bd80      	pop	{r7, pc}
   1d90e:	46c0      	nop			; (mov r8, r8)
   1d910:	0001ae55 	.word	0x0001ae55

0001d914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d914:	b580      	push	{r7, lr}
   1d916:	b082      	sub	sp, #8
   1d918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d91a:	4b0e      	ldr	r3, [pc, #56]	; (1d954 <prvResetNextTaskUnblockTime+0x40>)
   1d91c:	681b      	ldr	r3, [r3, #0]
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	2b00      	cmp	r3, #0
   1d922:	d101      	bne.n	1d928 <prvResetNextTaskUnblockTime+0x14>
   1d924:	2301      	movs	r3, #1
   1d926:	e000      	b.n	1d92a <prvResetNextTaskUnblockTime+0x16>
   1d928:	2300      	movs	r3, #0
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	d004      	beq.n	1d938 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d92e:	4b0a      	ldr	r3, [pc, #40]	; (1d958 <prvResetNextTaskUnblockTime+0x44>)
   1d930:	2201      	movs	r2, #1
   1d932:	4252      	negs	r2, r2
   1d934:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d936:	e008      	b.n	1d94a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d938:	4b06      	ldr	r3, [pc, #24]	; (1d954 <prvResetNextTaskUnblockTime+0x40>)
   1d93a:	681b      	ldr	r3, [r3, #0]
   1d93c:	68db      	ldr	r3, [r3, #12]
   1d93e:	68db      	ldr	r3, [r3, #12]
   1d940:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d942:	687b      	ldr	r3, [r7, #4]
   1d944:	685a      	ldr	r2, [r3, #4]
   1d946:	4b04      	ldr	r3, [pc, #16]	; (1d958 <prvResetNextTaskUnblockTime+0x44>)
   1d948:	601a      	str	r2, [r3, #0]
}
   1d94a:	46c0      	nop			; (mov r8, r8)
   1d94c:	46bd      	mov	sp, r7
   1d94e:	b002      	add	sp, #8
   1d950:	bd80      	pop	{r7, pc}
   1d952:	46c0      	nop			; (mov r8, r8)
   1d954:	20004164 	.word	0x20004164
   1d958:	200041cc 	.word	0x200041cc

0001d95c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d95c:	b580      	push	{r7, lr}
   1d95e:	b082      	sub	sp, #8
   1d960:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d962:	4b04      	ldr	r3, [pc, #16]	; (1d974 <xTaskGetCurrentTaskHandle+0x18>)
   1d964:	681b      	ldr	r3, [r3, #0]
   1d966:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d968:	687b      	ldr	r3, [r7, #4]
	}
   1d96a:	0018      	movs	r0, r3
   1d96c:	46bd      	mov	sp, r7
   1d96e:	b002      	add	sp, #8
   1d970:	bd80      	pop	{r7, pc}
   1d972:	46c0      	nop			; (mov r8, r8)
   1d974:	200040d4 	.word	0x200040d4

0001d978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d978:	b580      	push	{r7, lr}
   1d97a:	b082      	sub	sp, #8
   1d97c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d97e:	4b0a      	ldr	r3, [pc, #40]	; (1d9a8 <xTaskGetSchedulerState+0x30>)
   1d980:	681b      	ldr	r3, [r3, #0]
   1d982:	2b00      	cmp	r3, #0
   1d984:	d102      	bne.n	1d98c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d986:	2301      	movs	r3, #1
   1d988:	607b      	str	r3, [r7, #4]
   1d98a:	e008      	b.n	1d99e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d98c:	4b07      	ldr	r3, [pc, #28]	; (1d9ac <xTaskGetSchedulerState+0x34>)
   1d98e:	681b      	ldr	r3, [r3, #0]
   1d990:	2b00      	cmp	r3, #0
   1d992:	d102      	bne.n	1d99a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d994:	2302      	movs	r3, #2
   1d996:	607b      	str	r3, [r7, #4]
   1d998:	e001      	b.n	1d99e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d99a:	2300      	movs	r3, #0
   1d99c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d99e:	687b      	ldr	r3, [r7, #4]
	}
   1d9a0:	0018      	movs	r0, r3
   1d9a2:	46bd      	mov	sp, r7
   1d9a4:	b002      	add	sp, #8
   1d9a6:	bd80      	pop	{r7, pc}
   1d9a8:	200041b8 	.word	0x200041b8
   1d9ac:	200041d4 	.word	0x200041d4

0001d9b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d9b0:	b590      	push	{r4, r7, lr}
   1d9b2:	b085      	sub	sp, #20
   1d9b4:	af00      	add	r7, sp, #0
   1d9b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d9b8:	687b      	ldr	r3, [r7, #4]
   1d9ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d9bc:	2300      	movs	r3, #0
   1d9be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d9c0:	687b      	ldr	r3, [r7, #4]
   1d9c2:	2b00      	cmp	r3, #0
   1d9c4:	d100      	bne.n	1d9c8 <xTaskPriorityInherit+0x18>
   1d9c6:	e09d      	b.n	1db04 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d9c8:	68bb      	ldr	r3, [r7, #8]
   1d9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9cc:	4b50      	ldr	r3, [pc, #320]	; (1db10 <xTaskPriorityInherit+0x160>)
   1d9ce:	681b      	ldr	r3, [r3, #0]
   1d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d9d2:	429a      	cmp	r2, r3
   1d9d4:	d300      	bcc.n	1d9d8 <xTaskPriorityInherit+0x28>
   1d9d6:	e08c      	b.n	1daf2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d9d8:	68bb      	ldr	r3, [r7, #8]
   1d9da:	699b      	ldr	r3, [r3, #24]
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	db06      	blt.n	1d9ee <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d9e0:	4b4b      	ldr	r3, [pc, #300]	; (1db10 <xTaskPriorityInherit+0x160>)
   1d9e2:	681b      	ldr	r3, [r3, #0]
   1d9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d9e6:	2205      	movs	r2, #5
   1d9e8:	1ad2      	subs	r2, r2, r3
   1d9ea:	68bb      	ldr	r3, [r7, #8]
   1d9ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d9ee:	68bb      	ldr	r3, [r7, #8]
   1d9f0:	6959      	ldr	r1, [r3, #20]
   1d9f2:	68bb      	ldr	r3, [r7, #8]
   1d9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d9f6:	0013      	movs	r3, r2
   1d9f8:	009b      	lsls	r3, r3, #2
   1d9fa:	189b      	adds	r3, r3, r2
   1d9fc:	009b      	lsls	r3, r3, #2
   1d9fe:	4a45      	ldr	r2, [pc, #276]	; (1db14 <xTaskPriorityInherit+0x164>)
   1da00:	189b      	adds	r3, r3, r2
   1da02:	4299      	cmp	r1, r3
   1da04:	d101      	bne.n	1da0a <xTaskPriorityInherit+0x5a>
   1da06:	2301      	movs	r3, #1
   1da08:	e000      	b.n	1da0c <xTaskPriorityInherit+0x5c>
   1da0a:	2300      	movs	r3, #0
   1da0c:	2b00      	cmp	r3, #0
   1da0e:	d037      	beq.n	1da80 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1da10:	68bb      	ldr	r3, [r7, #8]
   1da12:	3304      	adds	r3, #4
   1da14:	0018      	movs	r0, r3
   1da16:	4b40      	ldr	r3, [pc, #256]	; (1db18 <xTaskPriorityInherit+0x168>)
   1da18:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1da1a:	4b3d      	ldr	r3, [pc, #244]	; (1db10 <xTaskPriorityInherit+0x160>)
   1da1c:	681b      	ldr	r3, [r3, #0]
   1da1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da20:	68bb      	ldr	r3, [r7, #8]
   1da22:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1da24:	68bb      	ldr	r3, [r7, #8]
   1da26:	0018      	movs	r0, r3
   1da28:	4b3c      	ldr	r3, [pc, #240]	; (1db1c <xTaskPriorityInherit+0x16c>)
   1da2a:	4798      	blx	r3
   1da2c:	0003      	movs	r3, r0
   1da2e:	001a      	movs	r2, r3
   1da30:	4b3b      	ldr	r3, [pc, #236]	; (1db20 <xTaskPriorityInherit+0x170>)
   1da32:	881b      	ldrh	r3, [r3, #0]
   1da34:	4013      	ands	r3, r2
   1da36:	b29b      	uxth	r3, r3
   1da38:	2b00      	cmp	r3, #0
   1da3a:	d008      	beq.n	1da4e <xTaskPriorityInherit+0x9e>
   1da3c:	68bb      	ldr	r3, [r7, #8]
   1da3e:	0018      	movs	r0, r3
   1da40:	4b38      	ldr	r3, [pc, #224]	; (1db24 <xTaskPriorityInherit+0x174>)
   1da42:	4798      	blx	r3
   1da44:	0003      	movs	r3, r0
   1da46:	b2db      	uxtb	r3, r3
   1da48:	0018      	movs	r0, r3
   1da4a:	4b37      	ldr	r3, [pc, #220]	; (1db28 <xTaskPriorityInherit+0x178>)
   1da4c:	4798      	blx	r3
   1da4e:	68bb      	ldr	r3, [r7, #8]
   1da50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da52:	4b36      	ldr	r3, [pc, #216]	; (1db2c <xTaskPriorityInherit+0x17c>)
   1da54:	681b      	ldr	r3, [r3, #0]
   1da56:	429a      	cmp	r2, r3
   1da58:	d903      	bls.n	1da62 <xTaskPriorityInherit+0xb2>
   1da5a:	68bb      	ldr	r3, [r7, #8]
   1da5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da5e:	4b33      	ldr	r3, [pc, #204]	; (1db2c <xTaskPriorityInherit+0x17c>)
   1da60:	601a      	str	r2, [r3, #0]
   1da62:	68bb      	ldr	r3, [r7, #8]
   1da64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da66:	0013      	movs	r3, r2
   1da68:	009b      	lsls	r3, r3, #2
   1da6a:	189b      	adds	r3, r3, r2
   1da6c:	009b      	lsls	r3, r3, #2
   1da6e:	4a29      	ldr	r2, [pc, #164]	; (1db14 <xTaskPriorityInherit+0x164>)
   1da70:	189a      	adds	r2, r3, r2
   1da72:	68bb      	ldr	r3, [r7, #8]
   1da74:	3304      	adds	r3, #4
   1da76:	0019      	movs	r1, r3
   1da78:	0010      	movs	r0, r2
   1da7a:	4b2d      	ldr	r3, [pc, #180]	; (1db30 <xTaskPriorityInherit+0x180>)
   1da7c:	4798      	blx	r3
   1da7e:	e004      	b.n	1da8a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1da80:	4b23      	ldr	r3, [pc, #140]	; (1db10 <xTaskPriorityInherit+0x160>)
   1da82:	681b      	ldr	r3, [r3, #0]
   1da84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da86:	68bb      	ldr	r3, [r7, #8]
   1da88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1da8a:	68bb      	ldr	r3, [r7, #8]
   1da8c:	0018      	movs	r0, r3
   1da8e:	4b23      	ldr	r3, [pc, #140]	; (1db1c <xTaskPriorityInherit+0x16c>)
   1da90:	4798      	blx	r3
   1da92:	0003      	movs	r3, r0
   1da94:	001a      	movs	r2, r3
   1da96:	4b22      	ldr	r3, [pc, #136]	; (1db20 <xTaskPriorityInherit+0x170>)
   1da98:	881b      	ldrh	r3, [r3, #0]
   1da9a:	4013      	ands	r3, r2
   1da9c:	b29b      	uxth	r3, r3
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	d024      	beq.n	1daec <xTaskPriorityInherit+0x13c>
   1daa2:	68bb      	ldr	r3, [r7, #8]
   1daa4:	0018      	movs	r0, r3
   1daa6:	4b1f      	ldr	r3, [pc, #124]	; (1db24 <xTaskPriorityInherit+0x174>)
   1daa8:	4798      	blx	r3
   1daaa:	0003      	movs	r3, r0
   1daac:	b2db      	uxtb	r3, r3
   1daae:	001c      	movs	r4, r3
   1dab0:	68bb      	ldr	r3, [r7, #8]
   1dab2:	0018      	movs	r0, r3
   1dab4:	4b1b      	ldr	r3, [pc, #108]	; (1db24 <xTaskPriorityInherit+0x174>)
   1dab6:	4798      	blx	r3
   1dab8:	0003      	movs	r3, r0
   1daba:	b2db      	uxtb	r3, r3
   1dabc:	0019      	movs	r1, r3
   1dabe:	2003      	movs	r0, #3
   1dac0:	4b1c      	ldr	r3, [pc, #112]	; (1db34 <xTaskPriorityInherit+0x184>)
   1dac2:	4798      	blx	r3
   1dac4:	0003      	movs	r3, r0
   1dac6:	0022      	movs	r2, r4
   1dac8:	2103      	movs	r1, #3
   1daca:	208e      	movs	r0, #142	; 0x8e
   1dacc:	4c1a      	ldr	r4, [pc, #104]	; (1db38 <xTaskPriorityInherit+0x188>)
   1dace:	47a0      	blx	r4
   1dad0:	68bb      	ldr	r3, [r7, #8]
   1dad2:	0018      	movs	r0, r3
   1dad4:	4b13      	ldr	r3, [pc, #76]	; (1db24 <xTaskPriorityInherit+0x174>)
   1dad6:	4798      	blx	r3
   1dad8:	0003      	movs	r3, r0
   1dada:	b2d9      	uxtb	r1, r3
   1dadc:	4b0c      	ldr	r3, [pc, #48]	; (1db10 <xTaskPriorityInherit+0x160>)
   1dade:	681b      	ldr	r3, [r3, #0]
   1dae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dae2:	b2db      	uxtb	r3, r3
   1dae4:	001a      	movs	r2, r3
   1dae6:	2003      	movs	r0, #3
   1dae8:	4b14      	ldr	r3, [pc, #80]	; (1db3c <xTaskPriorityInherit+0x18c>)
   1daea:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1daec:	2301      	movs	r3, #1
   1daee:	60fb      	str	r3, [r7, #12]
   1daf0:	e008      	b.n	1db04 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1daf2:	68bb      	ldr	r3, [r7, #8]
   1daf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1daf6:	4b06      	ldr	r3, [pc, #24]	; (1db10 <xTaskPriorityInherit+0x160>)
   1daf8:	681b      	ldr	r3, [r3, #0]
   1dafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dafc:	429a      	cmp	r2, r3
   1dafe:	d201      	bcs.n	1db04 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1db00:	2301      	movs	r3, #1
   1db02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1db04:	68fb      	ldr	r3, [r7, #12]
	}
   1db06:	0018      	movs	r0, r3
   1db08:	46bd      	mov	sp, r7
   1db0a:	b005      	add	sp, #20
   1db0c:	bd90      	pop	{r4, r7, pc}
   1db0e:	46c0      	nop			; (mov r8, r8)
   1db10:	200040d4 	.word	0x200040d4
   1db14:	200040d8 	.word	0x200040d8
   1db18:	0001aacb 	.word	0x0001aacb
   1db1c:	00018c51 	.word	0x00018c51
   1db20:	20000110 	.word	0x20000110
   1db24:	00018c31 	.word	0x00018c31
   1db28:	00019401 	.word	0x00019401
   1db2c:	200041b4 	.word	0x200041b4
   1db30:	0001aa1b 	.word	0x0001aa1b
   1db34:	00019c09 	.word	0x00019c09
   1db38:	00019779 	.word	0x00019779
   1db3c:	00019b65 	.word	0x00019b65

0001db40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1db40:	b590      	push	{r4, r7, lr}
   1db42:	b085      	sub	sp, #20
   1db44:	af00      	add	r7, sp, #0
   1db46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1db48:	687b      	ldr	r3, [r7, #4]
   1db4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1db4c:	2300      	movs	r3, #0
   1db4e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1db50:	687b      	ldr	r3, [r7, #4]
   1db52:	2b00      	cmp	r3, #0
   1db54:	d100      	bne.n	1db58 <xTaskPriorityDisinherit+0x18>
   1db56:	e089      	b.n	1dc6c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1db58:	4b47      	ldr	r3, [pc, #284]	; (1dc78 <xTaskPriorityDisinherit+0x138>)
   1db5a:	681b      	ldr	r3, [r3, #0]
   1db5c:	68ba      	ldr	r2, [r7, #8]
   1db5e:	429a      	cmp	r2, r3
   1db60:	d001      	beq.n	1db66 <xTaskPriorityDisinherit+0x26>
   1db62:	b672      	cpsid	i
   1db64:	e7fe      	b.n	1db64 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1db66:	68bb      	ldr	r3, [r7, #8]
   1db68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db6a:	2b00      	cmp	r3, #0
   1db6c:	d101      	bne.n	1db72 <xTaskPriorityDisinherit+0x32>
   1db6e:	b672      	cpsid	i
   1db70:	e7fe      	b.n	1db70 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1db72:	68bb      	ldr	r3, [r7, #8]
   1db74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db76:	1e5a      	subs	r2, r3, #1
   1db78:	68bb      	ldr	r3, [r7, #8]
   1db7a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1db7c:	68bb      	ldr	r3, [r7, #8]
   1db7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1db80:	68bb      	ldr	r3, [r7, #8]
   1db82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1db84:	429a      	cmp	r2, r3
   1db86:	d071      	beq.n	1dc6c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1db88:	68bb      	ldr	r3, [r7, #8]
   1db8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1db8c:	2b00      	cmp	r3, #0
   1db8e:	d16d      	bne.n	1dc6c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1db90:	68bb      	ldr	r3, [r7, #8]
   1db92:	3304      	adds	r3, #4
   1db94:	0018      	movs	r0, r3
   1db96:	4b39      	ldr	r3, [pc, #228]	; (1dc7c <xTaskPriorityDisinherit+0x13c>)
   1db98:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1db9a:	68bb      	ldr	r3, [r7, #8]
   1db9c:	0018      	movs	r0, r3
   1db9e:	4b38      	ldr	r3, [pc, #224]	; (1dc80 <xTaskPriorityDisinherit+0x140>)
   1dba0:	4798      	blx	r3
   1dba2:	0003      	movs	r3, r0
   1dba4:	001a      	movs	r2, r3
   1dba6:	4b37      	ldr	r3, [pc, #220]	; (1dc84 <xTaskPriorityDisinherit+0x144>)
   1dba8:	881b      	ldrh	r3, [r3, #0]
   1dbaa:	4013      	ands	r3, r2
   1dbac:	b29b      	uxth	r3, r3
   1dbae:	2b00      	cmp	r3, #0
   1dbb0:	d023      	beq.n	1dbfa <xTaskPriorityDisinherit+0xba>
   1dbb2:	68bb      	ldr	r3, [r7, #8]
   1dbb4:	0018      	movs	r0, r3
   1dbb6:	4b34      	ldr	r3, [pc, #208]	; (1dc88 <xTaskPriorityDisinherit+0x148>)
   1dbb8:	4798      	blx	r3
   1dbba:	0003      	movs	r3, r0
   1dbbc:	b2db      	uxtb	r3, r3
   1dbbe:	001c      	movs	r4, r3
   1dbc0:	68bb      	ldr	r3, [r7, #8]
   1dbc2:	0018      	movs	r0, r3
   1dbc4:	4b30      	ldr	r3, [pc, #192]	; (1dc88 <xTaskPriorityDisinherit+0x148>)
   1dbc6:	4798      	blx	r3
   1dbc8:	0003      	movs	r3, r0
   1dbca:	b2db      	uxtb	r3, r3
   1dbcc:	0019      	movs	r1, r3
   1dbce:	2003      	movs	r0, #3
   1dbd0:	4b2e      	ldr	r3, [pc, #184]	; (1dc8c <xTaskPriorityDisinherit+0x14c>)
   1dbd2:	4798      	blx	r3
   1dbd4:	0003      	movs	r3, r0
   1dbd6:	0022      	movs	r2, r4
   1dbd8:	2103      	movs	r1, #3
   1dbda:	208f      	movs	r0, #143	; 0x8f
   1dbdc:	4c2c      	ldr	r4, [pc, #176]	; (1dc90 <xTaskPriorityDisinherit+0x150>)
   1dbde:	47a0      	blx	r4
   1dbe0:	68bb      	ldr	r3, [r7, #8]
   1dbe2:	0018      	movs	r0, r3
   1dbe4:	4b28      	ldr	r3, [pc, #160]	; (1dc88 <xTaskPriorityDisinherit+0x148>)
   1dbe6:	4798      	blx	r3
   1dbe8:	0003      	movs	r3, r0
   1dbea:	b2d9      	uxtb	r1, r3
   1dbec:	68bb      	ldr	r3, [r7, #8]
   1dbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dbf0:	b2db      	uxtb	r3, r3
   1dbf2:	001a      	movs	r2, r3
   1dbf4:	2003      	movs	r0, #3
   1dbf6:	4b27      	ldr	r3, [pc, #156]	; (1dc94 <xTaskPriorityDisinherit+0x154>)
   1dbf8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1dbfa:	68bb      	ldr	r3, [r7, #8]
   1dbfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dbfe:	68bb      	ldr	r3, [r7, #8]
   1dc00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dc02:	68bb      	ldr	r3, [r7, #8]
   1dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dc06:	2205      	movs	r2, #5
   1dc08:	1ad2      	subs	r2, r2, r3
   1dc0a:	68bb      	ldr	r3, [r7, #8]
   1dc0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1dc0e:	68bb      	ldr	r3, [r7, #8]
   1dc10:	0018      	movs	r0, r3
   1dc12:	4b1b      	ldr	r3, [pc, #108]	; (1dc80 <xTaskPriorityDisinherit+0x140>)
   1dc14:	4798      	blx	r3
   1dc16:	0003      	movs	r3, r0
   1dc18:	001a      	movs	r2, r3
   1dc1a:	4b1a      	ldr	r3, [pc, #104]	; (1dc84 <xTaskPriorityDisinherit+0x144>)
   1dc1c:	881b      	ldrh	r3, [r3, #0]
   1dc1e:	4013      	ands	r3, r2
   1dc20:	b29b      	uxth	r3, r3
   1dc22:	2b00      	cmp	r3, #0
   1dc24:	d008      	beq.n	1dc38 <xTaskPriorityDisinherit+0xf8>
   1dc26:	68bb      	ldr	r3, [r7, #8]
   1dc28:	0018      	movs	r0, r3
   1dc2a:	4b17      	ldr	r3, [pc, #92]	; (1dc88 <xTaskPriorityDisinherit+0x148>)
   1dc2c:	4798      	blx	r3
   1dc2e:	0003      	movs	r3, r0
   1dc30:	b2db      	uxtb	r3, r3
   1dc32:	0018      	movs	r0, r3
   1dc34:	4b18      	ldr	r3, [pc, #96]	; (1dc98 <xTaskPriorityDisinherit+0x158>)
   1dc36:	4798      	blx	r3
   1dc38:	68bb      	ldr	r3, [r7, #8]
   1dc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc3c:	4b17      	ldr	r3, [pc, #92]	; (1dc9c <xTaskPriorityDisinherit+0x15c>)
   1dc3e:	681b      	ldr	r3, [r3, #0]
   1dc40:	429a      	cmp	r2, r3
   1dc42:	d903      	bls.n	1dc4c <xTaskPriorityDisinherit+0x10c>
   1dc44:	68bb      	ldr	r3, [r7, #8]
   1dc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc48:	4b14      	ldr	r3, [pc, #80]	; (1dc9c <xTaskPriorityDisinherit+0x15c>)
   1dc4a:	601a      	str	r2, [r3, #0]
   1dc4c:	68bb      	ldr	r3, [r7, #8]
   1dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc50:	0013      	movs	r3, r2
   1dc52:	009b      	lsls	r3, r3, #2
   1dc54:	189b      	adds	r3, r3, r2
   1dc56:	009b      	lsls	r3, r3, #2
   1dc58:	4a11      	ldr	r2, [pc, #68]	; (1dca0 <xTaskPriorityDisinherit+0x160>)
   1dc5a:	189a      	adds	r2, r3, r2
   1dc5c:	68bb      	ldr	r3, [r7, #8]
   1dc5e:	3304      	adds	r3, #4
   1dc60:	0019      	movs	r1, r3
   1dc62:	0010      	movs	r0, r2
   1dc64:	4b0f      	ldr	r3, [pc, #60]	; (1dca4 <xTaskPriorityDisinherit+0x164>)
   1dc66:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dc68:	2301      	movs	r3, #1
   1dc6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dc6c:	68fb      	ldr	r3, [r7, #12]
	}
   1dc6e:	0018      	movs	r0, r3
   1dc70:	46bd      	mov	sp, r7
   1dc72:	b005      	add	sp, #20
   1dc74:	bd90      	pop	{r4, r7, pc}
   1dc76:	46c0      	nop			; (mov r8, r8)
   1dc78:	200040d4 	.word	0x200040d4
   1dc7c:	0001aacb 	.word	0x0001aacb
   1dc80:	00018c51 	.word	0x00018c51
   1dc84:	20000110 	.word	0x20000110
   1dc88:	00018c31 	.word	0x00018c31
   1dc8c:	00019c09 	.word	0x00019c09
   1dc90:	00019779 	.word	0x00019779
   1dc94:	00019b65 	.word	0x00019b65
   1dc98:	00019401 	.word	0x00019401
   1dc9c:	200041b4 	.word	0x200041b4
   1dca0:	200040d8 	.word	0x200040d8
   1dca4:	0001aa1b 	.word	0x0001aa1b

0001dca8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1dca8:	b590      	push	{r4, r7, lr}
   1dcaa:	b087      	sub	sp, #28
   1dcac:	af00      	add	r7, sp, #0
   1dcae:	6078      	str	r0, [r7, #4]
   1dcb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1dcb6:	2301      	movs	r3, #1
   1dcb8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dcba:	687b      	ldr	r3, [r7, #4]
   1dcbc:	2b00      	cmp	r3, #0
   1dcbe:	d100      	bne.n	1dcc2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1dcc0:	e0a4      	b.n	1de0c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1dcc2:	693b      	ldr	r3, [r7, #16]
   1dcc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dcc6:	2b00      	cmp	r3, #0
   1dcc8:	d101      	bne.n	1dcce <vTaskPriorityDisinheritAfterTimeout+0x26>
   1dcca:	b672      	cpsid	i
   1dccc:	e7fe      	b.n	1dccc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1dcce:	693b      	ldr	r3, [r7, #16]
   1dcd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dcd2:	683b      	ldr	r3, [r7, #0]
   1dcd4:	429a      	cmp	r2, r3
   1dcd6:	d202      	bcs.n	1dcde <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1dcd8:	683b      	ldr	r3, [r7, #0]
   1dcda:	617b      	str	r3, [r7, #20]
   1dcdc:	e002      	b.n	1dce4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1dcde:	693b      	ldr	r3, [r7, #16]
   1dce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dce2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1dce4:	693b      	ldr	r3, [r7, #16]
   1dce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dce8:	697b      	ldr	r3, [r7, #20]
   1dcea:	429a      	cmp	r2, r3
   1dcec:	d100      	bne.n	1dcf0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1dcee:	e08d      	b.n	1de0c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1dcf0:	693b      	ldr	r3, [r7, #16]
   1dcf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dcf4:	68fb      	ldr	r3, [r7, #12]
   1dcf6:	429a      	cmp	r2, r3
   1dcf8:	d000      	beq.n	1dcfc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1dcfa:	e087      	b.n	1de0c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1dcfc:	4b45      	ldr	r3, [pc, #276]	; (1de14 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1dcfe:	681b      	ldr	r3, [r3, #0]
   1dd00:	693a      	ldr	r2, [r7, #16]
   1dd02:	429a      	cmp	r2, r3
   1dd04:	d101      	bne.n	1dd0a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1dd06:	b672      	cpsid	i
   1dd08:	e7fe      	b.n	1dd08 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dd0a:	693b      	ldr	r3, [r7, #16]
   1dd0c:	0018      	movs	r0, r3
   1dd0e:	4b42      	ldr	r3, [pc, #264]	; (1de18 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dd10:	4798      	blx	r3
   1dd12:	0003      	movs	r3, r0
   1dd14:	001a      	movs	r2, r3
   1dd16:	4b41      	ldr	r3, [pc, #260]	; (1de1c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dd18:	881b      	ldrh	r3, [r3, #0]
   1dd1a:	4013      	ands	r3, r2
   1dd1c:	b29b      	uxth	r3, r3
   1dd1e:	2b00      	cmp	r3, #0
   1dd20:	d023      	beq.n	1dd6a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1dd22:	693b      	ldr	r3, [r7, #16]
   1dd24:	0018      	movs	r0, r3
   1dd26:	4b3e      	ldr	r3, [pc, #248]	; (1de20 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd28:	4798      	blx	r3
   1dd2a:	0003      	movs	r3, r0
   1dd2c:	b2db      	uxtb	r3, r3
   1dd2e:	001c      	movs	r4, r3
   1dd30:	693b      	ldr	r3, [r7, #16]
   1dd32:	0018      	movs	r0, r3
   1dd34:	4b3a      	ldr	r3, [pc, #232]	; (1de20 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd36:	4798      	blx	r3
   1dd38:	0003      	movs	r3, r0
   1dd3a:	b2db      	uxtb	r3, r3
   1dd3c:	0019      	movs	r1, r3
   1dd3e:	2003      	movs	r0, #3
   1dd40:	4b38      	ldr	r3, [pc, #224]	; (1de24 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1dd42:	4798      	blx	r3
   1dd44:	0003      	movs	r3, r0
   1dd46:	0022      	movs	r2, r4
   1dd48:	2103      	movs	r1, #3
   1dd4a:	208f      	movs	r0, #143	; 0x8f
   1dd4c:	4c36      	ldr	r4, [pc, #216]	; (1de28 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1dd4e:	47a0      	blx	r4
   1dd50:	693b      	ldr	r3, [r7, #16]
   1dd52:	0018      	movs	r0, r3
   1dd54:	4b32      	ldr	r3, [pc, #200]	; (1de20 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd56:	4798      	blx	r3
   1dd58:	0003      	movs	r3, r0
   1dd5a:	b2d9      	uxtb	r1, r3
   1dd5c:	693b      	ldr	r3, [r7, #16]
   1dd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd60:	b2db      	uxtb	r3, r3
   1dd62:	001a      	movs	r2, r3
   1dd64:	2003      	movs	r0, #3
   1dd66:	4b31      	ldr	r3, [pc, #196]	; (1de2c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1dd68:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1dd6a:	693b      	ldr	r3, [r7, #16]
   1dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd6e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1dd70:	693b      	ldr	r3, [r7, #16]
   1dd72:	697a      	ldr	r2, [r7, #20]
   1dd74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dd76:	693b      	ldr	r3, [r7, #16]
   1dd78:	699b      	ldr	r3, [r3, #24]
   1dd7a:	2b00      	cmp	r3, #0
   1dd7c:	db04      	blt.n	1dd88 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dd7e:	697b      	ldr	r3, [r7, #20]
   1dd80:	2205      	movs	r2, #5
   1dd82:	1ad2      	subs	r2, r2, r3
   1dd84:	693b      	ldr	r3, [r7, #16]
   1dd86:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1dd88:	693b      	ldr	r3, [r7, #16]
   1dd8a:	6959      	ldr	r1, [r3, #20]
   1dd8c:	68ba      	ldr	r2, [r7, #8]
   1dd8e:	0013      	movs	r3, r2
   1dd90:	009b      	lsls	r3, r3, #2
   1dd92:	189b      	adds	r3, r3, r2
   1dd94:	009b      	lsls	r3, r3, #2
   1dd96:	4a26      	ldr	r2, [pc, #152]	; (1de30 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1dd98:	189b      	adds	r3, r3, r2
   1dd9a:	4299      	cmp	r1, r3
   1dd9c:	d101      	bne.n	1dda2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1dd9e:	2301      	movs	r3, #1
   1dda0:	e000      	b.n	1dda4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1dda2:	2300      	movs	r3, #0
   1dda4:	2b00      	cmp	r3, #0
   1dda6:	d031      	beq.n	1de0c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dda8:	693b      	ldr	r3, [r7, #16]
   1ddaa:	3304      	adds	r3, #4
   1ddac:	0018      	movs	r0, r3
   1ddae:	4b21      	ldr	r3, [pc, #132]	; (1de34 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1ddb0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1ddb2:	693b      	ldr	r3, [r7, #16]
   1ddb4:	0018      	movs	r0, r3
   1ddb6:	4b18      	ldr	r3, [pc, #96]	; (1de18 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ddb8:	4798      	blx	r3
   1ddba:	0003      	movs	r3, r0
   1ddbc:	001a      	movs	r2, r3
   1ddbe:	4b17      	ldr	r3, [pc, #92]	; (1de1c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ddc0:	881b      	ldrh	r3, [r3, #0]
   1ddc2:	4013      	ands	r3, r2
   1ddc4:	b29b      	uxth	r3, r3
   1ddc6:	2b00      	cmp	r3, #0
   1ddc8:	d008      	beq.n	1dddc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1ddca:	693b      	ldr	r3, [r7, #16]
   1ddcc:	0018      	movs	r0, r3
   1ddce:	4b14      	ldr	r3, [pc, #80]	; (1de20 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ddd0:	4798      	blx	r3
   1ddd2:	0003      	movs	r3, r0
   1ddd4:	b2db      	uxtb	r3, r3
   1ddd6:	0018      	movs	r0, r3
   1ddd8:	4b17      	ldr	r3, [pc, #92]	; (1de38 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1ddda:	4798      	blx	r3
   1dddc:	693b      	ldr	r3, [r7, #16]
   1ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dde0:	4b16      	ldr	r3, [pc, #88]	; (1de3c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1dde2:	681b      	ldr	r3, [r3, #0]
   1dde4:	429a      	cmp	r2, r3
   1dde6:	d903      	bls.n	1ddf0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1dde8:	693b      	ldr	r3, [r7, #16]
   1ddea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddec:	4b13      	ldr	r3, [pc, #76]	; (1de3c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ddee:	601a      	str	r2, [r3, #0]
   1ddf0:	693b      	ldr	r3, [r7, #16]
   1ddf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddf4:	0013      	movs	r3, r2
   1ddf6:	009b      	lsls	r3, r3, #2
   1ddf8:	189b      	adds	r3, r3, r2
   1ddfa:	009b      	lsls	r3, r3, #2
   1ddfc:	4a0c      	ldr	r2, [pc, #48]	; (1de30 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ddfe:	189a      	adds	r2, r3, r2
   1de00:	693b      	ldr	r3, [r7, #16]
   1de02:	3304      	adds	r3, #4
   1de04:	0019      	movs	r1, r3
   1de06:	0010      	movs	r0, r2
   1de08:	4b0d      	ldr	r3, [pc, #52]	; (1de40 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1de0a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1de0c:	46c0      	nop			; (mov r8, r8)
   1de0e:	46bd      	mov	sp, r7
   1de10:	b007      	add	sp, #28
   1de12:	bd90      	pop	{r4, r7, pc}
   1de14:	200040d4 	.word	0x200040d4
   1de18:	00018c51 	.word	0x00018c51
   1de1c:	20000110 	.word	0x20000110
   1de20:	00018c31 	.word	0x00018c31
   1de24:	00019c09 	.word	0x00019c09
   1de28:	00019779 	.word	0x00019779
   1de2c:	00019b65 	.word	0x00019b65
   1de30:	200040d8 	.word	0x200040d8
   1de34:	0001aacb 	.word	0x0001aacb
   1de38:	00019401 	.word	0x00019401
   1de3c:	200041b4 	.word	0x200041b4
   1de40:	0001aa1b 	.word	0x0001aa1b

0001de44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1de44:	b580      	push	{r7, lr}
   1de46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1de48:	4b06      	ldr	r3, [pc, #24]	; (1de64 <pvTaskIncrementMutexHeldCount+0x20>)
   1de4a:	681b      	ldr	r3, [r3, #0]
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	d004      	beq.n	1de5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1de50:	4b04      	ldr	r3, [pc, #16]	; (1de64 <pvTaskIncrementMutexHeldCount+0x20>)
   1de52:	681b      	ldr	r3, [r3, #0]
   1de54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1de56:	3201      	adds	r2, #1
   1de58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1de5a:	4b02      	ldr	r3, [pc, #8]	; (1de64 <pvTaskIncrementMutexHeldCount+0x20>)
   1de5c:	681b      	ldr	r3, [r3, #0]
	}
   1de5e:	0018      	movs	r0, r3
   1de60:	46bd      	mov	sp, r7
   1de62:	bd80      	pop	{r7, pc}
   1de64:	200040d4 	.word	0x200040d4

0001de68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1de68:	b580      	push	{r7, lr}
   1de6a:	b084      	sub	sp, #16
   1de6c:	af00      	add	r7, sp, #0
   1de6e:	6078      	str	r0, [r7, #4]
   1de70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1de72:	4b21      	ldr	r3, [pc, #132]	; (1def8 <prvAddCurrentTaskToDelayedList+0x90>)
   1de74:	681b      	ldr	r3, [r3, #0]
   1de76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1de78:	4b20      	ldr	r3, [pc, #128]	; (1defc <prvAddCurrentTaskToDelayedList+0x94>)
   1de7a:	681b      	ldr	r3, [r3, #0]
   1de7c:	3304      	adds	r3, #4
   1de7e:	0018      	movs	r0, r3
   1de80:	4b1f      	ldr	r3, [pc, #124]	; (1df00 <prvAddCurrentTaskToDelayedList+0x98>)
   1de82:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1de84:	687b      	ldr	r3, [r7, #4]
   1de86:	3301      	adds	r3, #1
   1de88:	d10b      	bne.n	1dea2 <prvAddCurrentTaskToDelayedList+0x3a>
   1de8a:	683b      	ldr	r3, [r7, #0]
   1de8c:	2b00      	cmp	r3, #0
   1de8e:	d008      	beq.n	1dea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1de90:	4b1a      	ldr	r3, [pc, #104]	; (1defc <prvAddCurrentTaskToDelayedList+0x94>)
   1de92:	681b      	ldr	r3, [r3, #0]
   1de94:	1d1a      	adds	r2, r3, #4
   1de96:	4b1b      	ldr	r3, [pc, #108]	; (1df04 <prvAddCurrentTaskToDelayedList+0x9c>)
   1de98:	0011      	movs	r1, r2
   1de9a:	0018      	movs	r0, r3
   1de9c:	4b1a      	ldr	r3, [pc, #104]	; (1df08 <prvAddCurrentTaskToDelayedList+0xa0>)
   1de9e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1dea0:	e026      	b.n	1def0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1dea2:	68fa      	ldr	r2, [r7, #12]
   1dea4:	687b      	ldr	r3, [r7, #4]
   1dea6:	18d3      	adds	r3, r2, r3
   1dea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1deaa:	4b14      	ldr	r3, [pc, #80]	; (1defc <prvAddCurrentTaskToDelayedList+0x94>)
   1deac:	681b      	ldr	r3, [r3, #0]
   1deae:	68ba      	ldr	r2, [r7, #8]
   1deb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1deb2:	68ba      	ldr	r2, [r7, #8]
   1deb4:	68fb      	ldr	r3, [r7, #12]
   1deb6:	429a      	cmp	r2, r3
   1deb8:	d209      	bcs.n	1dece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1deba:	4b14      	ldr	r3, [pc, #80]	; (1df0c <prvAddCurrentTaskToDelayedList+0xa4>)
   1debc:	681a      	ldr	r2, [r3, #0]
   1debe:	4b0f      	ldr	r3, [pc, #60]	; (1defc <prvAddCurrentTaskToDelayedList+0x94>)
   1dec0:	681b      	ldr	r3, [r3, #0]
   1dec2:	3304      	adds	r3, #4
   1dec4:	0019      	movs	r1, r3
   1dec6:	0010      	movs	r0, r2
   1dec8:	4b11      	ldr	r3, [pc, #68]	; (1df10 <prvAddCurrentTaskToDelayedList+0xa8>)
   1deca:	4798      	blx	r3
}
   1decc:	e010      	b.n	1def0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1dece:	4b11      	ldr	r3, [pc, #68]	; (1df14 <prvAddCurrentTaskToDelayedList+0xac>)
   1ded0:	681a      	ldr	r2, [r3, #0]
   1ded2:	4b0a      	ldr	r3, [pc, #40]	; (1defc <prvAddCurrentTaskToDelayedList+0x94>)
   1ded4:	681b      	ldr	r3, [r3, #0]
   1ded6:	3304      	adds	r3, #4
   1ded8:	0019      	movs	r1, r3
   1deda:	0010      	movs	r0, r2
   1dedc:	4b0c      	ldr	r3, [pc, #48]	; (1df10 <prvAddCurrentTaskToDelayedList+0xa8>)
   1dede:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1dee0:	4b0d      	ldr	r3, [pc, #52]	; (1df18 <prvAddCurrentTaskToDelayedList+0xb0>)
   1dee2:	681b      	ldr	r3, [r3, #0]
   1dee4:	68ba      	ldr	r2, [r7, #8]
   1dee6:	429a      	cmp	r2, r3
   1dee8:	d202      	bcs.n	1def0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1deea:	4b0b      	ldr	r3, [pc, #44]	; (1df18 <prvAddCurrentTaskToDelayedList+0xb0>)
   1deec:	68ba      	ldr	r2, [r7, #8]
   1deee:	601a      	str	r2, [r3, #0]
}
   1def0:	46c0      	nop			; (mov r8, r8)
   1def2:	46bd      	mov	sp, r7
   1def4:	b004      	add	sp, #16
   1def6:	bd80      	pop	{r7, pc}
   1def8:	200041b0 	.word	0x200041b0
   1defc:	200040d4 	.word	0x200040d4
   1df00:	0001aacb 	.word	0x0001aacb
   1df04:	20004198 	.word	0x20004198
   1df08:	0001aa1b 	.word	0x0001aa1b
   1df0c:	20004168 	.word	0x20004168
   1df10:	0001aa5f 	.word	0x0001aa5f
   1df14:	20004164 	.word	0x20004164
   1df18:	200041cc 	.word	0x200041cc

0001df1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1df1c:	b590      	push	{r4, r7, lr}
   1df1e:	b085      	sub	sp, #20
   1df20:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1df22:	2300      	movs	r3, #0
   1df24:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1df26:	4b0e      	ldr	r3, [pc, #56]	; (1df60 <xTimerCreateTimerTask+0x44>)
   1df28:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1df2a:	4b0e      	ldr	r3, [pc, #56]	; (1df64 <xTimerCreateTimerTask+0x48>)
   1df2c:	681b      	ldr	r3, [r3, #0]
   1df2e:	2b00      	cmp	r3, #0
   1df30:	d00b      	beq.n	1df4a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1df32:	490d      	ldr	r1, [pc, #52]	; (1df68 <xTimerCreateTimerTask+0x4c>)
   1df34:	480d      	ldr	r0, [pc, #52]	; (1df6c <xTimerCreateTimerTask+0x50>)
   1df36:	4b0e      	ldr	r3, [pc, #56]	; (1df70 <xTimerCreateTimerTask+0x54>)
   1df38:	9301      	str	r3, [sp, #4]
   1df3a:	2302      	movs	r3, #2
   1df3c:	9300      	str	r3, [sp, #0]
   1df3e:	2300      	movs	r3, #0
   1df40:	2280      	movs	r2, #128	; 0x80
   1df42:	4c0c      	ldr	r4, [pc, #48]	; (1df74 <xTimerCreateTimerTask+0x58>)
   1df44:	47a0      	blx	r4
   1df46:	0003      	movs	r3, r0
   1df48:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1df4a:	687b      	ldr	r3, [r7, #4]
   1df4c:	2b00      	cmp	r3, #0
   1df4e:	d101      	bne.n	1df54 <xTimerCreateTimerTask+0x38>
   1df50:	b672      	cpsid	i
   1df52:	e7fe      	b.n	1df52 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1df54:	687b      	ldr	r3, [r7, #4]
}
   1df56:	0018      	movs	r0, r3
   1df58:	46bd      	mov	sp, r7
   1df5a:	b003      	add	sp, #12
   1df5c:	bd90      	pop	{r4, r7, pc}
   1df5e:	46c0      	nop			; (mov r8, r8)
   1df60:	0001e465 	.word	0x0001e465
   1df64:	20004208 	.word	0x20004208
   1df68:	00039cc4 	.word	0x00039cc4
   1df6c:	0001e09d 	.word	0x0001e09d
   1df70:	2000420c 	.word	0x2000420c
   1df74:	0001c8b5 	.word	0x0001c8b5

0001df78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1df78:	b590      	push	{r4, r7, lr}
   1df7a:	b089      	sub	sp, #36	; 0x24
   1df7c:	af00      	add	r7, sp, #0
   1df7e:	60f8      	str	r0, [r7, #12]
   1df80:	60b9      	str	r1, [r7, #8]
   1df82:	607a      	str	r2, [r7, #4]
   1df84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1df86:	2300      	movs	r3, #0
   1df88:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1df8a:	68fb      	ldr	r3, [r7, #12]
   1df8c:	2b00      	cmp	r3, #0
   1df8e:	d101      	bne.n	1df94 <xTimerGenericCommand+0x1c>
   1df90:	b672      	cpsid	i
   1df92:	e7fe      	b.n	1df92 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1df94:	4b1e      	ldr	r3, [pc, #120]	; (1e010 <xTimerGenericCommand+0x98>)
   1df96:	681b      	ldr	r3, [r3, #0]
   1df98:	2b00      	cmp	r3, #0
   1df9a:	d033      	beq.n	1e004 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1df9c:	2310      	movs	r3, #16
   1df9e:	18fb      	adds	r3, r7, r3
   1dfa0:	68ba      	ldr	r2, [r7, #8]
   1dfa2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1dfa4:	2310      	movs	r3, #16
   1dfa6:	18fb      	adds	r3, r7, r3
   1dfa8:	687a      	ldr	r2, [r7, #4]
   1dfaa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1dfac:	2310      	movs	r3, #16
   1dfae:	18fb      	adds	r3, r7, r3
   1dfb0:	68fa      	ldr	r2, [r7, #12]
   1dfb2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1dfb4:	68bb      	ldr	r3, [r7, #8]
   1dfb6:	2b05      	cmp	r3, #5
   1dfb8:	dc1a      	bgt.n	1dff0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1dfba:	4b16      	ldr	r3, [pc, #88]	; (1e014 <xTimerGenericCommand+0x9c>)
   1dfbc:	4798      	blx	r3
   1dfbe:	0003      	movs	r3, r0
   1dfc0:	2b02      	cmp	r3, #2
   1dfc2:	d10a      	bne.n	1dfda <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1dfc4:	4b12      	ldr	r3, [pc, #72]	; (1e010 <xTimerGenericCommand+0x98>)
   1dfc6:	6818      	ldr	r0, [r3, #0]
   1dfc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1dfca:	2310      	movs	r3, #16
   1dfcc:	18f9      	adds	r1, r7, r3
   1dfce:	2300      	movs	r3, #0
   1dfd0:	4c11      	ldr	r4, [pc, #68]	; (1e018 <xTimerGenericCommand+0xa0>)
   1dfd2:	47a0      	blx	r4
   1dfd4:	0003      	movs	r3, r0
   1dfd6:	61fb      	str	r3, [r7, #28]
   1dfd8:	e014      	b.n	1e004 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1dfda:	4b0d      	ldr	r3, [pc, #52]	; (1e010 <xTimerGenericCommand+0x98>)
   1dfdc:	6818      	ldr	r0, [r3, #0]
   1dfde:	2310      	movs	r3, #16
   1dfe0:	18f9      	adds	r1, r7, r3
   1dfe2:	2300      	movs	r3, #0
   1dfe4:	2200      	movs	r2, #0
   1dfe6:	4c0c      	ldr	r4, [pc, #48]	; (1e018 <xTimerGenericCommand+0xa0>)
   1dfe8:	47a0      	blx	r4
   1dfea:	0003      	movs	r3, r0
   1dfec:	61fb      	str	r3, [r7, #28]
   1dfee:	e009      	b.n	1e004 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1dff0:	4b07      	ldr	r3, [pc, #28]	; (1e010 <xTimerGenericCommand+0x98>)
   1dff2:	6818      	ldr	r0, [r3, #0]
   1dff4:	683a      	ldr	r2, [r7, #0]
   1dff6:	2310      	movs	r3, #16
   1dff8:	18f9      	adds	r1, r7, r3
   1dffa:	2300      	movs	r3, #0
   1dffc:	4c07      	ldr	r4, [pc, #28]	; (1e01c <xTimerGenericCommand+0xa4>)
   1dffe:	47a0      	blx	r4
   1e000:	0003      	movs	r3, r0
   1e002:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e004:	69fb      	ldr	r3, [r7, #28]
}
   1e006:	0018      	movs	r0, r3
   1e008:	46bd      	mov	sp, r7
   1e00a:	b009      	add	sp, #36	; 0x24
   1e00c:	bd90      	pop	{r4, r7, pc}
   1e00e:	46c0      	nop			; (mov r8, r8)
   1e010:	20004208 	.word	0x20004208
   1e014:	0001d979 	.word	0x0001d979
   1e018:	0001b1ed 	.word	0x0001b1ed
   1e01c:	0001b64d 	.word	0x0001b64d

0001e020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e020:	b590      	push	{r4, r7, lr}
   1e022:	b087      	sub	sp, #28
   1e024:	af02      	add	r7, sp, #8
   1e026:	6078      	str	r0, [r7, #4]
   1e028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e02a:	4b18      	ldr	r3, [pc, #96]	; (1e08c <prvProcessExpiredTimer+0x6c>)
   1e02c:	681b      	ldr	r3, [r3, #0]
   1e02e:	68db      	ldr	r3, [r3, #12]
   1e030:	68db      	ldr	r3, [r3, #12]
   1e032:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e034:	68fb      	ldr	r3, [r7, #12]
   1e036:	3304      	adds	r3, #4
   1e038:	0018      	movs	r0, r3
   1e03a:	4b15      	ldr	r3, [pc, #84]	; (1e090 <prvProcessExpiredTimer+0x70>)
   1e03c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e03e:	68fb      	ldr	r3, [r7, #12]
   1e040:	69db      	ldr	r3, [r3, #28]
   1e042:	2b01      	cmp	r3, #1
   1e044:	d119      	bne.n	1e07a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e046:	68fb      	ldr	r3, [r7, #12]
   1e048:	699a      	ldr	r2, [r3, #24]
   1e04a:	687b      	ldr	r3, [r7, #4]
   1e04c:	18d1      	adds	r1, r2, r3
   1e04e:	687b      	ldr	r3, [r7, #4]
   1e050:	683a      	ldr	r2, [r7, #0]
   1e052:	68f8      	ldr	r0, [r7, #12]
   1e054:	4c0f      	ldr	r4, [pc, #60]	; (1e094 <prvProcessExpiredTimer+0x74>)
   1e056:	47a0      	blx	r4
   1e058:	1e03      	subs	r3, r0, #0
   1e05a:	d00e      	beq.n	1e07a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e05c:	687a      	ldr	r2, [r7, #4]
   1e05e:	68f8      	ldr	r0, [r7, #12]
   1e060:	2300      	movs	r3, #0
   1e062:	9300      	str	r3, [sp, #0]
   1e064:	2300      	movs	r3, #0
   1e066:	2100      	movs	r1, #0
   1e068:	4c0b      	ldr	r4, [pc, #44]	; (1e098 <prvProcessExpiredTimer+0x78>)
   1e06a:	47a0      	blx	r4
   1e06c:	0003      	movs	r3, r0
   1e06e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e070:	68bb      	ldr	r3, [r7, #8]
   1e072:	2b00      	cmp	r3, #0
   1e074:	d101      	bne.n	1e07a <prvProcessExpiredTimer+0x5a>
   1e076:	b672      	cpsid	i
   1e078:	e7fe      	b.n	1e078 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e07a:	68fb      	ldr	r3, [r7, #12]
   1e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e07e:	68fa      	ldr	r2, [r7, #12]
   1e080:	0010      	movs	r0, r2
   1e082:	4798      	blx	r3
}
   1e084:	46c0      	nop			; (mov r8, r8)
   1e086:	46bd      	mov	sp, r7
   1e088:	b005      	add	sp, #20
   1e08a:	bd90      	pop	{r4, r7, pc}
   1e08c:	20004200 	.word	0x20004200
   1e090:	0001aacb 	.word	0x0001aacb
   1e094:	0001e205 	.word	0x0001e205
   1e098:	0001df79 	.word	0x0001df79

0001e09c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e09c:	b580      	push	{r7, lr}
   1e09e:	b084      	sub	sp, #16
   1e0a0:	af00      	add	r7, sp, #0
   1e0a2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e0a4:	4b08      	ldr	r3, [pc, #32]	; (1e0c8 <prvTimerTask+0x2c>)
   1e0a6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e0a8:	2308      	movs	r3, #8
   1e0aa:	18fb      	adds	r3, r7, r3
   1e0ac:	0018      	movs	r0, r3
   1e0ae:	4b07      	ldr	r3, [pc, #28]	; (1e0cc <prvTimerTask+0x30>)
   1e0b0:	4798      	blx	r3
   1e0b2:	0003      	movs	r3, r0
   1e0b4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e0b6:	68ba      	ldr	r2, [r7, #8]
   1e0b8:	68fb      	ldr	r3, [r7, #12]
   1e0ba:	0011      	movs	r1, r2
   1e0bc:	0018      	movs	r0, r3
   1e0be:	4b04      	ldr	r3, [pc, #16]	; (1e0d0 <prvTimerTask+0x34>)
   1e0c0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e0c2:	4b04      	ldr	r3, [pc, #16]	; (1e0d4 <prvTimerTask+0x38>)
   1e0c4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e0c6:	e7ef      	b.n	1e0a8 <prvTimerTask+0xc>
   1e0c8:	000333fd 	.word	0x000333fd
   1e0cc:	0001e17d 	.word	0x0001e17d
   1e0d0:	0001e0d9 	.word	0x0001e0d9
   1e0d4:	0001e28d 	.word	0x0001e28d

0001e0d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e0d8:	b580      	push	{r7, lr}
   1e0da:	b084      	sub	sp, #16
   1e0dc:	af00      	add	r7, sp, #0
   1e0de:	6078      	str	r0, [r7, #4]
   1e0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e0e2:	4b1e      	ldr	r3, [pc, #120]	; (1e15c <prvProcessTimerOrBlockTask+0x84>)
   1e0e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e0e6:	2308      	movs	r3, #8
   1e0e8:	18fb      	adds	r3, r7, r3
   1e0ea:	0018      	movs	r0, r3
   1e0ec:	4b1c      	ldr	r3, [pc, #112]	; (1e160 <prvProcessTimerOrBlockTask+0x88>)
   1e0ee:	4798      	blx	r3
   1e0f0:	0003      	movs	r3, r0
   1e0f2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e0f4:	68bb      	ldr	r3, [r7, #8]
   1e0f6:	2b00      	cmp	r3, #0
   1e0f8:	d129      	bne.n	1e14e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e0fa:	683b      	ldr	r3, [r7, #0]
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	d10c      	bne.n	1e11a <prvProcessTimerOrBlockTask+0x42>
   1e100:	687a      	ldr	r2, [r7, #4]
   1e102:	68fb      	ldr	r3, [r7, #12]
   1e104:	429a      	cmp	r2, r3
   1e106:	d808      	bhi.n	1e11a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e108:	4b16      	ldr	r3, [pc, #88]	; (1e164 <prvProcessTimerOrBlockTask+0x8c>)
   1e10a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e10c:	68fa      	ldr	r2, [r7, #12]
   1e10e:	687b      	ldr	r3, [r7, #4]
   1e110:	0011      	movs	r1, r2
   1e112:	0018      	movs	r0, r3
   1e114:	4b14      	ldr	r3, [pc, #80]	; (1e168 <prvProcessTimerOrBlockTask+0x90>)
   1e116:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e118:	e01b      	b.n	1e152 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e11a:	683b      	ldr	r3, [r7, #0]
   1e11c:	2b00      	cmp	r3, #0
   1e11e:	d006      	beq.n	1e12e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e120:	4b12      	ldr	r3, [pc, #72]	; (1e16c <prvProcessTimerOrBlockTask+0x94>)
   1e122:	681b      	ldr	r3, [r3, #0]
   1e124:	681b      	ldr	r3, [r3, #0]
   1e126:	425a      	negs	r2, r3
   1e128:	4153      	adcs	r3, r2
   1e12a:	b2db      	uxtb	r3, r3
   1e12c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e12e:	4b10      	ldr	r3, [pc, #64]	; (1e170 <prvProcessTimerOrBlockTask+0x98>)
   1e130:	6818      	ldr	r0, [r3, #0]
   1e132:	687a      	ldr	r2, [r7, #4]
   1e134:	68fb      	ldr	r3, [r7, #12]
   1e136:	1ad3      	subs	r3, r2, r3
   1e138:	683a      	ldr	r2, [r7, #0]
   1e13a:	0019      	movs	r1, r3
   1e13c:	4b0d      	ldr	r3, [pc, #52]	; (1e174 <prvProcessTimerOrBlockTask+0x9c>)
   1e13e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e140:	4b08      	ldr	r3, [pc, #32]	; (1e164 <prvProcessTimerOrBlockTask+0x8c>)
   1e142:	4798      	blx	r3
   1e144:	1e03      	subs	r3, r0, #0
   1e146:	d104      	bne.n	1e152 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e148:	4b0b      	ldr	r3, [pc, #44]	; (1e178 <prvProcessTimerOrBlockTask+0xa0>)
   1e14a:	4798      	blx	r3
}
   1e14c:	e001      	b.n	1e152 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e14e:	4b05      	ldr	r3, [pc, #20]	; (1e164 <prvProcessTimerOrBlockTask+0x8c>)
   1e150:	4798      	blx	r3
}
   1e152:	46c0      	nop			; (mov r8, r8)
   1e154:	46bd      	mov	sp, r7
   1e156:	b004      	add	sp, #16
   1e158:	bd80      	pop	{r7, pc}
   1e15a:	46c0      	nop			; (mov r8, r8)
   1e15c:	0001cf11 	.word	0x0001cf11
   1e160:	0001e1bd 	.word	0x0001e1bd
   1e164:	0001cf29 	.word	0x0001cf29
   1e168:	0001e021 	.word	0x0001e021
   1e16c:	20004204 	.word	0x20004204
   1e170:	20004208 	.word	0x20004208
   1e174:	0001c6b1 	.word	0x0001c6b1
   1e178:	0001ac41 	.word	0x0001ac41

0001e17c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e17c:	b580      	push	{r7, lr}
   1e17e:	b084      	sub	sp, #16
   1e180:	af00      	add	r7, sp, #0
   1e182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e184:	4b0c      	ldr	r3, [pc, #48]	; (1e1b8 <prvGetNextExpireTime+0x3c>)
   1e186:	681b      	ldr	r3, [r3, #0]
   1e188:	681b      	ldr	r3, [r3, #0]
   1e18a:	425a      	negs	r2, r3
   1e18c:	4153      	adcs	r3, r2
   1e18e:	b2db      	uxtb	r3, r3
   1e190:	001a      	movs	r2, r3
   1e192:	687b      	ldr	r3, [r7, #4]
   1e194:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e196:	687b      	ldr	r3, [r7, #4]
   1e198:	681b      	ldr	r3, [r3, #0]
   1e19a:	2b00      	cmp	r3, #0
   1e19c:	d105      	bne.n	1e1aa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e19e:	4b06      	ldr	r3, [pc, #24]	; (1e1b8 <prvGetNextExpireTime+0x3c>)
   1e1a0:	681b      	ldr	r3, [r3, #0]
   1e1a2:	68db      	ldr	r3, [r3, #12]
   1e1a4:	681b      	ldr	r3, [r3, #0]
   1e1a6:	60fb      	str	r3, [r7, #12]
   1e1a8:	e001      	b.n	1e1ae <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e1aa:	2300      	movs	r3, #0
   1e1ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e1ae:	68fb      	ldr	r3, [r7, #12]
}
   1e1b0:	0018      	movs	r0, r3
   1e1b2:	46bd      	mov	sp, r7
   1e1b4:	b004      	add	sp, #16
   1e1b6:	bd80      	pop	{r7, pc}
   1e1b8:	20004200 	.word	0x20004200

0001e1bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e1bc:	b580      	push	{r7, lr}
   1e1be:	b084      	sub	sp, #16
   1e1c0:	af00      	add	r7, sp, #0
   1e1c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e1c4:	4b0c      	ldr	r3, [pc, #48]	; (1e1f8 <prvSampleTimeNow+0x3c>)
   1e1c6:	4798      	blx	r3
   1e1c8:	0003      	movs	r3, r0
   1e1ca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e1cc:	4b0b      	ldr	r3, [pc, #44]	; (1e1fc <prvSampleTimeNow+0x40>)
   1e1ce:	681b      	ldr	r3, [r3, #0]
   1e1d0:	68fa      	ldr	r2, [r7, #12]
   1e1d2:	429a      	cmp	r2, r3
   1e1d4:	d205      	bcs.n	1e1e2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e1d6:	4b0a      	ldr	r3, [pc, #40]	; (1e200 <prvSampleTimeNow+0x44>)
   1e1d8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e1da:	687b      	ldr	r3, [r7, #4]
   1e1dc:	2201      	movs	r2, #1
   1e1de:	601a      	str	r2, [r3, #0]
   1e1e0:	e002      	b.n	1e1e8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e1e2:	687b      	ldr	r3, [r7, #4]
   1e1e4:	2200      	movs	r2, #0
   1e1e6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e1e8:	4b04      	ldr	r3, [pc, #16]	; (1e1fc <prvSampleTimeNow+0x40>)
   1e1ea:	68fa      	ldr	r2, [r7, #12]
   1e1ec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e1ee:	68fb      	ldr	r3, [r7, #12]
}
   1e1f0:	0018      	movs	r0, r3
   1e1f2:	46bd      	mov	sp, r7
   1e1f4:	b004      	add	sp, #16
   1e1f6:	bd80      	pop	{r7, pc}
   1e1f8:	0001d099 	.word	0x0001d099
   1e1fc:	20004210 	.word	0x20004210
   1e200:	0001e3a5 	.word	0x0001e3a5

0001e204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e204:	b580      	push	{r7, lr}
   1e206:	b086      	sub	sp, #24
   1e208:	af00      	add	r7, sp, #0
   1e20a:	60f8      	str	r0, [r7, #12]
   1e20c:	60b9      	str	r1, [r7, #8]
   1e20e:	607a      	str	r2, [r7, #4]
   1e210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e212:	2300      	movs	r3, #0
   1e214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e216:	68fb      	ldr	r3, [r7, #12]
   1e218:	68ba      	ldr	r2, [r7, #8]
   1e21a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e21c:	68fb      	ldr	r3, [r7, #12]
   1e21e:	68fa      	ldr	r2, [r7, #12]
   1e220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e222:	68ba      	ldr	r2, [r7, #8]
   1e224:	687b      	ldr	r3, [r7, #4]
   1e226:	429a      	cmp	r2, r3
   1e228:	d812      	bhi.n	1e250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e22a:	687a      	ldr	r2, [r7, #4]
   1e22c:	683b      	ldr	r3, [r7, #0]
   1e22e:	1ad2      	subs	r2, r2, r3
   1e230:	68fb      	ldr	r3, [r7, #12]
   1e232:	699b      	ldr	r3, [r3, #24]
   1e234:	429a      	cmp	r2, r3
   1e236:	d302      	bcc.n	1e23e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e238:	2301      	movs	r3, #1
   1e23a:	617b      	str	r3, [r7, #20]
   1e23c:	e01b      	b.n	1e276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e23e:	4b10      	ldr	r3, [pc, #64]	; (1e280 <prvInsertTimerInActiveList+0x7c>)
   1e240:	681a      	ldr	r2, [r3, #0]
   1e242:	68fb      	ldr	r3, [r7, #12]
   1e244:	3304      	adds	r3, #4
   1e246:	0019      	movs	r1, r3
   1e248:	0010      	movs	r0, r2
   1e24a:	4b0e      	ldr	r3, [pc, #56]	; (1e284 <prvInsertTimerInActiveList+0x80>)
   1e24c:	4798      	blx	r3
   1e24e:	e012      	b.n	1e276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e250:	687a      	ldr	r2, [r7, #4]
   1e252:	683b      	ldr	r3, [r7, #0]
   1e254:	429a      	cmp	r2, r3
   1e256:	d206      	bcs.n	1e266 <prvInsertTimerInActiveList+0x62>
   1e258:	68ba      	ldr	r2, [r7, #8]
   1e25a:	683b      	ldr	r3, [r7, #0]
   1e25c:	429a      	cmp	r2, r3
   1e25e:	d302      	bcc.n	1e266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e260:	2301      	movs	r3, #1
   1e262:	617b      	str	r3, [r7, #20]
   1e264:	e007      	b.n	1e276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e266:	4b08      	ldr	r3, [pc, #32]	; (1e288 <prvInsertTimerInActiveList+0x84>)
   1e268:	681a      	ldr	r2, [r3, #0]
   1e26a:	68fb      	ldr	r3, [r7, #12]
   1e26c:	3304      	adds	r3, #4
   1e26e:	0019      	movs	r1, r3
   1e270:	0010      	movs	r0, r2
   1e272:	4b04      	ldr	r3, [pc, #16]	; (1e284 <prvInsertTimerInActiveList+0x80>)
   1e274:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e276:	697b      	ldr	r3, [r7, #20]
}
   1e278:	0018      	movs	r0, r3
   1e27a:	46bd      	mov	sp, r7
   1e27c:	b006      	add	sp, #24
   1e27e:	bd80      	pop	{r7, pc}
   1e280:	20004204 	.word	0x20004204
   1e284:	0001aa5f 	.word	0x0001aa5f
   1e288:	20004200 	.word	0x20004200

0001e28c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e28c:	b590      	push	{r4, r7, lr}
   1e28e:	b08b      	sub	sp, #44	; 0x2c
   1e290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e292:	e068      	b.n	1e366 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e294:	2308      	movs	r3, #8
   1e296:	18fb      	adds	r3, r7, r3
   1e298:	681b      	ldr	r3, [r3, #0]
   1e29a:	2b00      	cmp	r3, #0
   1e29c:	db63      	blt.n	1e366 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e29e:	2308      	movs	r3, #8
   1e2a0:	18fb      	adds	r3, r7, r3
   1e2a2:	689b      	ldr	r3, [r3, #8]
   1e2a4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e2a6:	69fb      	ldr	r3, [r7, #28]
   1e2a8:	695b      	ldr	r3, [r3, #20]
   1e2aa:	2b00      	cmp	r3, #0
   1e2ac:	d004      	beq.n	1e2b8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e2ae:	69fb      	ldr	r3, [r7, #28]
   1e2b0:	3304      	adds	r3, #4
   1e2b2:	0018      	movs	r0, r3
   1e2b4:	4b33      	ldr	r3, [pc, #204]	; (1e384 <prvProcessReceivedCommands+0xf8>)
   1e2b6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e2b8:	1d3b      	adds	r3, r7, #4
   1e2ba:	0018      	movs	r0, r3
   1e2bc:	4b32      	ldr	r3, [pc, #200]	; (1e388 <prvProcessReceivedCommands+0xfc>)
   1e2be:	4798      	blx	r3
   1e2c0:	0003      	movs	r3, r0
   1e2c2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e2c4:	2308      	movs	r3, #8
   1e2c6:	18fb      	adds	r3, r7, r3
   1e2c8:	681b      	ldr	r3, [r3, #0]
   1e2ca:	2b09      	cmp	r3, #9
   1e2cc:	d84a      	bhi.n	1e364 <prvProcessReceivedCommands+0xd8>
   1e2ce:	009a      	lsls	r2, r3, #2
   1e2d0:	4b2e      	ldr	r3, [pc, #184]	; (1e38c <prvProcessReceivedCommands+0x100>)
   1e2d2:	18d3      	adds	r3, r2, r3
   1e2d4:	681b      	ldr	r3, [r3, #0]
   1e2d6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e2d8:	2308      	movs	r3, #8
   1e2da:	18fb      	adds	r3, r7, r3
   1e2dc:	685a      	ldr	r2, [r3, #4]
   1e2de:	69fb      	ldr	r3, [r7, #28]
   1e2e0:	699b      	ldr	r3, [r3, #24]
   1e2e2:	18d1      	adds	r1, r2, r3
   1e2e4:	2308      	movs	r3, #8
   1e2e6:	18fb      	adds	r3, r7, r3
   1e2e8:	685b      	ldr	r3, [r3, #4]
   1e2ea:	69ba      	ldr	r2, [r7, #24]
   1e2ec:	69f8      	ldr	r0, [r7, #28]
   1e2ee:	4c28      	ldr	r4, [pc, #160]	; (1e390 <prvProcessReceivedCommands+0x104>)
   1e2f0:	47a0      	blx	r4
   1e2f2:	1e03      	subs	r3, r0, #0
   1e2f4:	d037      	beq.n	1e366 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e2f6:	69fb      	ldr	r3, [r7, #28]
   1e2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e2fa:	69fa      	ldr	r2, [r7, #28]
   1e2fc:	0010      	movs	r0, r2
   1e2fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e300:	69fb      	ldr	r3, [r7, #28]
   1e302:	69db      	ldr	r3, [r3, #28]
   1e304:	2b01      	cmp	r3, #1
   1e306:	d12e      	bne.n	1e366 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e308:	2308      	movs	r3, #8
   1e30a:	18fb      	adds	r3, r7, r3
   1e30c:	685a      	ldr	r2, [r3, #4]
   1e30e:	69fb      	ldr	r3, [r7, #28]
   1e310:	699b      	ldr	r3, [r3, #24]
   1e312:	18d2      	adds	r2, r2, r3
   1e314:	69f8      	ldr	r0, [r7, #28]
   1e316:	2300      	movs	r3, #0
   1e318:	9300      	str	r3, [sp, #0]
   1e31a:	2300      	movs	r3, #0
   1e31c:	2100      	movs	r1, #0
   1e31e:	4c1d      	ldr	r4, [pc, #116]	; (1e394 <prvProcessReceivedCommands+0x108>)
   1e320:	47a0      	blx	r4
   1e322:	0003      	movs	r3, r0
   1e324:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e326:	697b      	ldr	r3, [r7, #20]
   1e328:	2b00      	cmp	r3, #0
   1e32a:	d11c      	bne.n	1e366 <prvProcessReceivedCommands+0xda>
   1e32c:	b672      	cpsid	i
   1e32e:	e7fe      	b.n	1e32e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e330:	2308      	movs	r3, #8
   1e332:	18fb      	adds	r3, r7, r3
   1e334:	685a      	ldr	r2, [r3, #4]
   1e336:	69fb      	ldr	r3, [r7, #28]
   1e338:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e33a:	69fb      	ldr	r3, [r7, #28]
   1e33c:	699b      	ldr	r3, [r3, #24]
   1e33e:	2b00      	cmp	r3, #0
   1e340:	d101      	bne.n	1e346 <prvProcessReceivedCommands+0xba>
   1e342:	b672      	cpsid	i
   1e344:	e7fe      	b.n	1e344 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e346:	69fb      	ldr	r3, [r7, #28]
   1e348:	699a      	ldr	r2, [r3, #24]
   1e34a:	69bb      	ldr	r3, [r7, #24]
   1e34c:	18d1      	adds	r1, r2, r3
   1e34e:	69bb      	ldr	r3, [r7, #24]
   1e350:	69ba      	ldr	r2, [r7, #24]
   1e352:	69f8      	ldr	r0, [r7, #28]
   1e354:	4c0e      	ldr	r4, [pc, #56]	; (1e390 <prvProcessReceivedCommands+0x104>)
   1e356:	47a0      	blx	r4
					break;
   1e358:	e005      	b.n	1e366 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e35a:	69fb      	ldr	r3, [r7, #28]
   1e35c:	0018      	movs	r0, r3
   1e35e:	4b0e      	ldr	r3, [pc, #56]	; (1e398 <prvProcessReceivedCommands+0x10c>)
   1e360:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e362:	e000      	b.n	1e366 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e364:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e366:	4b0d      	ldr	r3, [pc, #52]	; (1e39c <prvProcessReceivedCommands+0x110>)
   1e368:	681b      	ldr	r3, [r3, #0]
   1e36a:	2208      	movs	r2, #8
   1e36c:	18b9      	adds	r1, r7, r2
   1e36e:	2200      	movs	r2, #0
   1e370:	0018      	movs	r0, r3
   1e372:	4b0b      	ldr	r3, [pc, #44]	; (1e3a0 <prvProcessReceivedCommands+0x114>)
   1e374:	4798      	blx	r3
   1e376:	1e03      	subs	r3, r0, #0
   1e378:	d18c      	bne.n	1e294 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e37a:	46c0      	nop			; (mov r8, r8)
   1e37c:	46bd      	mov	sp, r7
   1e37e:	b009      	add	sp, #36	; 0x24
   1e380:	bd90      	pop	{r4, r7, pc}
   1e382:	46c0      	nop			; (mov r8, r8)
   1e384:	0001aacb 	.word	0x0001aacb
   1e388:	0001e1bd 	.word	0x0001e1bd
   1e38c:	00039ccc 	.word	0x00039ccc
   1e390:	0001e205 	.word	0x0001e205
   1e394:	0001df79 	.word	0x0001df79
   1e398:	0001ae55 	.word	0x0001ae55
   1e39c:	20004208 	.word	0x20004208
   1e3a0:	0001baa5 	.word	0x0001baa5

0001e3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e3a4:	b590      	push	{r4, r7, lr}
   1e3a6:	b089      	sub	sp, #36	; 0x24
   1e3a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e3aa:	e03e      	b.n	1e42a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e3ac:	4b28      	ldr	r3, [pc, #160]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e3ae:	681b      	ldr	r3, [r3, #0]
   1e3b0:	68db      	ldr	r3, [r3, #12]
   1e3b2:	681b      	ldr	r3, [r3, #0]
   1e3b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e3b6:	4b26      	ldr	r3, [pc, #152]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e3b8:	681b      	ldr	r3, [r3, #0]
   1e3ba:	68db      	ldr	r3, [r3, #12]
   1e3bc:	68db      	ldr	r3, [r3, #12]
   1e3be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e3c0:	693b      	ldr	r3, [r7, #16]
   1e3c2:	3304      	adds	r3, #4
   1e3c4:	0018      	movs	r0, r3
   1e3c6:	4b23      	ldr	r3, [pc, #140]	; (1e454 <prvSwitchTimerLists+0xb0>)
   1e3c8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e3ca:	693b      	ldr	r3, [r7, #16]
   1e3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e3ce:	693a      	ldr	r2, [r7, #16]
   1e3d0:	0010      	movs	r0, r2
   1e3d2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e3d4:	693b      	ldr	r3, [r7, #16]
   1e3d6:	69db      	ldr	r3, [r3, #28]
   1e3d8:	2b01      	cmp	r3, #1
   1e3da:	d126      	bne.n	1e42a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e3dc:	693b      	ldr	r3, [r7, #16]
   1e3de:	699a      	ldr	r2, [r3, #24]
   1e3e0:	697b      	ldr	r3, [r7, #20]
   1e3e2:	18d3      	adds	r3, r2, r3
   1e3e4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e3e6:	68fa      	ldr	r2, [r7, #12]
   1e3e8:	697b      	ldr	r3, [r7, #20]
   1e3ea:	429a      	cmp	r2, r3
   1e3ec:	d90e      	bls.n	1e40c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e3ee:	693b      	ldr	r3, [r7, #16]
   1e3f0:	68fa      	ldr	r2, [r7, #12]
   1e3f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e3f4:	693b      	ldr	r3, [r7, #16]
   1e3f6:	693a      	ldr	r2, [r7, #16]
   1e3f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e3fa:	4b15      	ldr	r3, [pc, #84]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e3fc:	681a      	ldr	r2, [r3, #0]
   1e3fe:	693b      	ldr	r3, [r7, #16]
   1e400:	3304      	adds	r3, #4
   1e402:	0019      	movs	r1, r3
   1e404:	0010      	movs	r0, r2
   1e406:	4b14      	ldr	r3, [pc, #80]	; (1e458 <prvSwitchTimerLists+0xb4>)
   1e408:	4798      	blx	r3
   1e40a:	e00e      	b.n	1e42a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e40c:	697a      	ldr	r2, [r7, #20]
   1e40e:	6938      	ldr	r0, [r7, #16]
   1e410:	2300      	movs	r3, #0
   1e412:	9300      	str	r3, [sp, #0]
   1e414:	2300      	movs	r3, #0
   1e416:	2100      	movs	r1, #0
   1e418:	4c10      	ldr	r4, [pc, #64]	; (1e45c <prvSwitchTimerLists+0xb8>)
   1e41a:	47a0      	blx	r4
   1e41c:	0003      	movs	r3, r0
   1e41e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e420:	68bb      	ldr	r3, [r7, #8]
   1e422:	2b00      	cmp	r3, #0
   1e424:	d101      	bne.n	1e42a <prvSwitchTimerLists+0x86>
   1e426:	b672      	cpsid	i
   1e428:	e7fe      	b.n	1e428 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e42a:	4b09      	ldr	r3, [pc, #36]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e42c:	681b      	ldr	r3, [r3, #0]
   1e42e:	681b      	ldr	r3, [r3, #0]
   1e430:	2b00      	cmp	r3, #0
   1e432:	d1bb      	bne.n	1e3ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e434:	4b06      	ldr	r3, [pc, #24]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e436:	681b      	ldr	r3, [r3, #0]
   1e438:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e43a:	4b09      	ldr	r3, [pc, #36]	; (1e460 <prvSwitchTimerLists+0xbc>)
   1e43c:	681a      	ldr	r2, [r3, #0]
   1e43e:	4b04      	ldr	r3, [pc, #16]	; (1e450 <prvSwitchTimerLists+0xac>)
   1e440:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e442:	4b07      	ldr	r3, [pc, #28]	; (1e460 <prvSwitchTimerLists+0xbc>)
   1e444:	687a      	ldr	r2, [r7, #4]
   1e446:	601a      	str	r2, [r3, #0]
}
   1e448:	46c0      	nop			; (mov r8, r8)
   1e44a:	46bd      	mov	sp, r7
   1e44c:	b007      	add	sp, #28
   1e44e:	bd90      	pop	{r4, r7, pc}
   1e450:	20004200 	.word	0x20004200
   1e454:	0001aacb 	.word	0x0001aacb
   1e458:	0001aa5f 	.word	0x0001aa5f
   1e45c:	0001df79 	.word	0x0001df79
   1e460:	20004204 	.word	0x20004204

0001e464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e464:	b580      	push	{r7, lr}
   1e466:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e468:	4b10      	ldr	r3, [pc, #64]	; (1e4ac <prvCheckForValidListAndQueue+0x48>)
   1e46a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e46c:	4b10      	ldr	r3, [pc, #64]	; (1e4b0 <prvCheckForValidListAndQueue+0x4c>)
   1e46e:	681b      	ldr	r3, [r3, #0]
   1e470:	2b00      	cmp	r3, #0
   1e472:	d115      	bne.n	1e4a0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e474:	4b0f      	ldr	r3, [pc, #60]	; (1e4b4 <prvCheckForValidListAndQueue+0x50>)
   1e476:	0018      	movs	r0, r3
   1e478:	4b0f      	ldr	r3, [pc, #60]	; (1e4b8 <prvCheckForValidListAndQueue+0x54>)
   1e47a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e47c:	4b0f      	ldr	r3, [pc, #60]	; (1e4bc <prvCheckForValidListAndQueue+0x58>)
   1e47e:	0018      	movs	r0, r3
   1e480:	4b0d      	ldr	r3, [pc, #52]	; (1e4b8 <prvCheckForValidListAndQueue+0x54>)
   1e482:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e484:	4b0e      	ldr	r3, [pc, #56]	; (1e4c0 <prvCheckForValidListAndQueue+0x5c>)
   1e486:	4a0b      	ldr	r2, [pc, #44]	; (1e4b4 <prvCheckForValidListAndQueue+0x50>)
   1e488:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e48a:	4b0e      	ldr	r3, [pc, #56]	; (1e4c4 <prvCheckForValidListAndQueue+0x60>)
   1e48c:	4a0b      	ldr	r2, [pc, #44]	; (1e4bc <prvCheckForValidListAndQueue+0x58>)
   1e48e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e490:	2200      	movs	r2, #0
   1e492:	210c      	movs	r1, #12
   1e494:	2005      	movs	r0, #5
   1e496:	4b0c      	ldr	r3, [pc, #48]	; (1e4c8 <prvCheckForValidListAndQueue+0x64>)
   1e498:	4798      	blx	r3
   1e49a:	0002      	movs	r2, r0
   1e49c:	4b04      	ldr	r3, [pc, #16]	; (1e4b0 <prvCheckForValidListAndQueue+0x4c>)
   1e49e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e4a0:	4b0a      	ldr	r3, [pc, #40]	; (1e4cc <prvCheckForValidListAndQueue+0x68>)
   1e4a2:	4798      	blx	r3
}
   1e4a4:	46c0      	nop			; (mov r8, r8)
   1e4a6:	46bd      	mov	sp, r7
   1e4a8:	bd80      	pop	{r7, pc}
   1e4aa:	46c0      	nop			; (mov r8, r8)
   1e4ac:	0001ac59 	.word	0x0001ac59
   1e4b0:	20004208 	.word	0x20004208
   1e4b4:	200041d8 	.word	0x200041d8
   1e4b8:	0001a9c9 	.word	0x0001a9c9
   1e4bc:	200041ec 	.word	0x200041ec
   1e4c0:	20004200 	.word	0x20004200
   1e4c4:	20004204 	.word	0x20004204
   1e4c8:	0001af45 	.word	0x0001af45
   1e4cc:	0001ac7d 	.word	0x0001ac7d

0001e4d0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e4d0:	b580      	push	{r7, lr}
   1e4d2:	b082      	sub	sp, #8
   1e4d4:	af00      	add	r7, sp, #0
   1e4d6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e4d8:	687b      	ldr	r3, [r7, #4]
   1e4da:	7c1b      	ldrb	r3, [r3, #16]
   1e4dc:	2b00      	cmp	r3, #0
   1e4de:	d00b      	beq.n	1e4f8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e4e0:	687b      	ldr	r3, [r7, #4]
   1e4e2:	689b      	ldr	r3, [r3, #8]
   1e4e4:	1c5a      	adds	r2, r3, #1
   1e4e6:	687b      	ldr	r3, [r7, #4]
   1e4e8:	68d9      	ldr	r1, [r3, #12]
   1e4ea:	4b10      	ldr	r3, [pc, #64]	; (1e52c <advance_pointer+0x5c>)
   1e4ec:	0010      	movs	r0, r2
   1e4ee:	4798      	blx	r3
   1e4f0:	000b      	movs	r3, r1
   1e4f2:	001a      	movs	r2, r3
   1e4f4:	687b      	ldr	r3, [r7, #4]
   1e4f6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e4f8:	687b      	ldr	r3, [r7, #4]
   1e4fa:	685b      	ldr	r3, [r3, #4]
   1e4fc:	1c5a      	adds	r2, r3, #1
   1e4fe:	687b      	ldr	r3, [r7, #4]
   1e500:	68d9      	ldr	r1, [r3, #12]
   1e502:	4b0a      	ldr	r3, [pc, #40]	; (1e52c <advance_pointer+0x5c>)
   1e504:	0010      	movs	r0, r2
   1e506:	4798      	blx	r3
   1e508:	000b      	movs	r3, r1
   1e50a:	001a      	movs	r2, r3
   1e50c:	687b      	ldr	r3, [r7, #4]
   1e50e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e510:	687b      	ldr	r3, [r7, #4]
   1e512:	685a      	ldr	r2, [r3, #4]
   1e514:	687b      	ldr	r3, [r7, #4]
   1e516:	689b      	ldr	r3, [r3, #8]
   1e518:	1ad3      	subs	r3, r2, r3
   1e51a:	425a      	negs	r2, r3
   1e51c:	4153      	adcs	r3, r2
   1e51e:	b2da      	uxtb	r2, r3
   1e520:	687b      	ldr	r3, [r7, #4]
   1e522:	741a      	strb	r2, [r3, #16]
 }
   1e524:	46c0      	nop			; (mov r8, r8)
   1e526:	46bd      	mov	sp, r7
   1e528:	b002      	add	sp, #8
   1e52a:	bd80      	pop	{r7, pc}
   1e52c:	000337b1 	.word	0x000337b1

0001e530 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e530:	b580      	push	{r7, lr}
   1e532:	b082      	sub	sp, #8
   1e534:	af00      	add	r7, sp, #0
   1e536:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e538:	687b      	ldr	r3, [r7, #4]
   1e53a:	2200      	movs	r2, #0
   1e53c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e53e:	687b      	ldr	r3, [r7, #4]
   1e540:	689b      	ldr	r3, [r3, #8]
   1e542:	1c5a      	adds	r2, r3, #1
   1e544:	687b      	ldr	r3, [r7, #4]
   1e546:	68d9      	ldr	r1, [r3, #12]
   1e548:	4b05      	ldr	r3, [pc, #20]	; (1e560 <retreat_pointer+0x30>)
   1e54a:	0010      	movs	r0, r2
   1e54c:	4798      	blx	r3
   1e54e:	000b      	movs	r3, r1
   1e550:	001a      	movs	r2, r3
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	609a      	str	r2, [r3, #8]
 }
   1e556:	46c0      	nop			; (mov r8, r8)
   1e558:	46bd      	mov	sp, r7
   1e55a:	b002      	add	sp, #8
   1e55c:	bd80      	pop	{r7, pc}
   1e55e:	46c0      	nop			; (mov r8, r8)
   1e560:	000337b1 	.word	0x000337b1

0001e564 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e564:	b580      	push	{r7, lr}
   1e566:	b084      	sub	sp, #16
   1e568:	af00      	add	r7, sp, #0
   1e56a:	6078      	str	r0, [r7, #4]
   1e56c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e56e:	2014      	movs	r0, #20
   1e570:	4b09      	ldr	r3, [pc, #36]	; (1e598 <circular_buf_init+0x34>)
   1e572:	4798      	blx	r3
   1e574:	0003      	movs	r3, r0
   1e576:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e578:	68fb      	ldr	r3, [r7, #12]
   1e57a:	687a      	ldr	r2, [r7, #4]
   1e57c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e57e:	68fb      	ldr	r3, [r7, #12]
   1e580:	683a      	ldr	r2, [r7, #0]
   1e582:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e584:	68fb      	ldr	r3, [r7, #12]
   1e586:	0018      	movs	r0, r3
   1e588:	4b04      	ldr	r3, [pc, #16]	; (1e59c <circular_buf_init+0x38>)
   1e58a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e58c:	68fb      	ldr	r3, [r7, #12]
 }
   1e58e:	0018      	movs	r0, r3
   1e590:	46bd      	mov	sp, r7
   1e592:	b004      	add	sp, #16
   1e594:	bd80      	pop	{r7, pc}
   1e596:	46c0      	nop			; (mov r8, r8)
   1e598:	000361a5 	.word	0x000361a5
   1e59c:	0001e5a1 	.word	0x0001e5a1

0001e5a0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e5a0:	b580      	push	{r7, lr}
   1e5a2:	b082      	sub	sp, #8
   1e5a4:	af00      	add	r7, sp, #0
   1e5a6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e5a8:	687b      	ldr	r3, [r7, #4]
   1e5aa:	2200      	movs	r2, #0
   1e5ac:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e5ae:	687b      	ldr	r3, [r7, #4]
   1e5b0:	2200      	movs	r2, #0
   1e5b2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e5b4:	687b      	ldr	r3, [r7, #4]
   1e5b6:	2200      	movs	r2, #0
   1e5b8:	741a      	strb	r2, [r3, #16]
 }
   1e5ba:	46c0      	nop			; (mov r8, r8)
   1e5bc:	46bd      	mov	sp, r7
   1e5be:	b002      	add	sp, #8
   1e5c0:	bd80      	pop	{r7, pc}
	...

0001e5c4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e5c4:	b580      	push	{r7, lr}
   1e5c6:	b082      	sub	sp, #8
   1e5c8:	af00      	add	r7, sp, #0
   1e5ca:	6078      	str	r0, [r7, #4]
   1e5cc:	000a      	movs	r2, r1
   1e5ce:	1cfb      	adds	r3, r7, #3
   1e5d0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e5d2:	687b      	ldr	r3, [r7, #4]
   1e5d4:	681a      	ldr	r2, [r3, #0]
   1e5d6:	687b      	ldr	r3, [r7, #4]
   1e5d8:	685b      	ldr	r3, [r3, #4]
   1e5da:	18d3      	adds	r3, r2, r3
   1e5dc:	1cfa      	adds	r2, r7, #3
   1e5de:	7812      	ldrb	r2, [r2, #0]
   1e5e0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e5e2:	687b      	ldr	r3, [r7, #4]
   1e5e4:	0018      	movs	r0, r3
   1e5e6:	4b03      	ldr	r3, [pc, #12]	; (1e5f4 <circular_buf_put+0x30>)
   1e5e8:	4798      	blx	r3
 }
   1e5ea:	46c0      	nop			; (mov r8, r8)
   1e5ec:	46bd      	mov	sp, r7
   1e5ee:	b002      	add	sp, #8
   1e5f0:	bd80      	pop	{r7, pc}
   1e5f2:	46c0      	nop			; (mov r8, r8)
   1e5f4:	0001e4d1 	.word	0x0001e4d1

0001e5f8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e5f8:	b580      	push	{r7, lr}
   1e5fa:	b084      	sub	sp, #16
   1e5fc:	af00      	add	r7, sp, #0
   1e5fe:	6078      	str	r0, [r7, #4]
   1e600:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e602:	2301      	movs	r3, #1
   1e604:	425b      	negs	r3, r3
   1e606:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e608:	687b      	ldr	r3, [r7, #4]
   1e60a:	0018      	movs	r0, r3
   1e60c:	4b0d      	ldr	r3, [pc, #52]	; (1e644 <circular_buf_get+0x4c>)
   1e60e:	4798      	blx	r3
   1e610:	0003      	movs	r3, r0
   1e612:	001a      	movs	r2, r3
   1e614:	2301      	movs	r3, #1
   1e616:	4053      	eors	r3, r2
   1e618:	b2db      	uxtb	r3, r3
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	d00d      	beq.n	1e63a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e61e:	687b      	ldr	r3, [r7, #4]
   1e620:	681a      	ldr	r2, [r3, #0]
   1e622:	687b      	ldr	r3, [r7, #4]
   1e624:	689b      	ldr	r3, [r3, #8]
   1e626:	18d3      	adds	r3, r2, r3
   1e628:	781a      	ldrb	r2, [r3, #0]
   1e62a:	683b      	ldr	r3, [r7, #0]
   1e62c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e62e:	687b      	ldr	r3, [r7, #4]
   1e630:	0018      	movs	r0, r3
   1e632:	4b05      	ldr	r3, [pc, #20]	; (1e648 <circular_buf_get+0x50>)
   1e634:	4798      	blx	r3

		 r = 0;
   1e636:	2300      	movs	r3, #0
   1e638:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e63a:	68fb      	ldr	r3, [r7, #12]
 }
   1e63c:	0018      	movs	r0, r3
   1e63e:	46bd      	mov	sp, r7
   1e640:	b004      	add	sp, #16
   1e642:	bd80      	pop	{r7, pc}
   1e644:	0001e64d 	.word	0x0001e64d
   1e648:	0001e531 	.word	0x0001e531

0001e64c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e64c:	b580      	push	{r7, lr}
   1e64e:	b082      	sub	sp, #8
   1e650:	af00      	add	r7, sp, #0
   1e652:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e654:	687b      	ldr	r3, [r7, #4]
   1e656:	7c1b      	ldrb	r3, [r3, #16]
   1e658:	2201      	movs	r2, #1
   1e65a:	4053      	eors	r3, r2
   1e65c:	b2db      	uxtb	r3, r3
   1e65e:	2b00      	cmp	r3, #0
   1e660:	d007      	beq.n	1e672 <circular_buf_empty+0x26>
   1e662:	687b      	ldr	r3, [r7, #4]
   1e664:	685a      	ldr	r2, [r3, #4]
   1e666:	687b      	ldr	r3, [r7, #4]
   1e668:	689b      	ldr	r3, [r3, #8]
   1e66a:	429a      	cmp	r2, r3
   1e66c:	d101      	bne.n	1e672 <circular_buf_empty+0x26>
   1e66e:	2301      	movs	r3, #1
   1e670:	e000      	b.n	1e674 <circular_buf_empty+0x28>
   1e672:	2300      	movs	r3, #0
   1e674:	1c1a      	adds	r2, r3, #0
   1e676:	2301      	movs	r3, #1
   1e678:	4013      	ands	r3, r2
   1e67a:	b2db      	uxtb	r3, r3
 }
   1e67c:	0018      	movs	r0, r3
   1e67e:	46bd      	mov	sp, r7
   1e680:	b002      	add	sp, #8
   1e682:	bd80      	pop	{r7, pc}

0001e684 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1e684:	b580      	push	{r7, lr}
   1e686:	b082      	sub	sp, #8
   1e688:	af00      	add	r7, sp, #0
   1e68a:	0002      	movs	r2, r0
   1e68c:	1dfb      	adds	r3, r7, #7
   1e68e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e690:	4b06      	ldr	r3, [pc, #24]	; (1e6ac <system_interrupt_enable+0x28>)
   1e692:	1dfa      	adds	r2, r7, #7
   1e694:	7812      	ldrb	r2, [r2, #0]
   1e696:	0011      	movs	r1, r2
   1e698:	221f      	movs	r2, #31
   1e69a:	400a      	ands	r2, r1
   1e69c:	2101      	movs	r1, #1
   1e69e:	4091      	lsls	r1, r2
   1e6a0:	000a      	movs	r2, r1
   1e6a2:	601a      	str	r2, [r3, #0]
}
   1e6a4:	46c0      	nop			; (mov r8, r8)
   1e6a6:	46bd      	mov	sp, r7
   1e6a8:	b002      	add	sp, #8
   1e6aa:	bd80      	pop	{r7, pc}
   1e6ac:	e000e100 	.word	0xe000e100

0001e6b0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e6b0:	b580      	push	{r7, lr}
   1e6b2:	b084      	sub	sp, #16
   1e6b4:	af00      	add	r7, sp, #0
   1e6b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	681b      	ldr	r3, [r3, #0]
   1e6bc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e6be:	68fb      	ldr	r3, [r7, #12]
   1e6c0:	69db      	ldr	r3, [r3, #28]
   1e6c2:	1e5a      	subs	r2, r3, #1
   1e6c4:	4193      	sbcs	r3, r2
   1e6c6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1e6c8:	0018      	movs	r0, r3
   1e6ca:	46bd      	mov	sp, r7
   1e6cc:	b004      	add	sp, #16
   1e6ce:	bd80      	pop	{r7, pc}

0001e6d0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1e6d0:	b580      	push	{r7, lr}
   1e6d2:	b082      	sub	sp, #8
   1e6d4:	af00      	add	r7, sp, #0
   1e6d6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e6d8:	46c0      	nop			; (mov r8, r8)
   1e6da:	687b      	ldr	r3, [r7, #4]
   1e6dc:	0018      	movs	r0, r3
   1e6de:	4b04      	ldr	r3, [pc, #16]	; (1e6f0 <_usart_wait_for_sync+0x20>)
   1e6e0:	4798      	blx	r3
   1e6e2:	1e03      	subs	r3, r0, #0
   1e6e4:	d1f9      	bne.n	1e6da <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1e6e6:	46c0      	nop			; (mov r8, r8)
   1e6e8:	46bd      	mov	sp, r7
   1e6ea:	b002      	add	sp, #8
   1e6ec:	bd80      	pop	{r7, pc}
   1e6ee:	46c0      	nop			; (mov r8, r8)
   1e6f0:	0001e6b1 	.word	0x0001e6b1

0001e6f4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1e6f4:	b580      	push	{r7, lr}
   1e6f6:	b082      	sub	sp, #8
   1e6f8:	af00      	add	r7, sp, #0
   1e6fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1e6fc:	687b      	ldr	r3, [r7, #4]
   1e6fe:	2280      	movs	r2, #128	; 0x80
   1e700:	05d2      	lsls	r2, r2, #23
   1e702:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e704:	687b      	ldr	r3, [r7, #4]
   1e706:	2200      	movs	r2, #0
   1e708:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e70a:	687b      	ldr	r3, [r7, #4]
   1e70c:	22ff      	movs	r2, #255	; 0xff
   1e70e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e710:	687b      	ldr	r3, [r7, #4]
   1e712:	2200      	movs	r2, #0
   1e714:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e716:	687b      	ldr	r3, [r7, #4]
   1e718:	2200      	movs	r2, #0
   1e71a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e71c:	687b      	ldr	r3, [r7, #4]
   1e71e:	2296      	movs	r2, #150	; 0x96
   1e720:	0192      	lsls	r2, r2, #6
   1e722:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e724:	687b      	ldr	r3, [r7, #4]
   1e726:	2224      	movs	r2, #36	; 0x24
   1e728:	2101      	movs	r1, #1
   1e72a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e72c:	687b      	ldr	r3, [r7, #4]
   1e72e:	2225      	movs	r2, #37	; 0x25
   1e730:	2101      	movs	r1, #1
   1e732:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e734:	687b      	ldr	r3, [r7, #4]
   1e736:	2226      	movs	r2, #38	; 0x26
   1e738:	2100      	movs	r1, #0
   1e73a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e73c:	687b      	ldr	r3, [r7, #4]
   1e73e:	2227      	movs	r2, #39	; 0x27
   1e740:	2100      	movs	r1, #0
   1e742:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e744:	687b      	ldr	r3, [r7, #4]
   1e746:	2200      	movs	r2, #0
   1e748:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e74a:	687b      	ldr	r3, [r7, #4]
   1e74c:	2288      	movs	r2, #136	; 0x88
   1e74e:	0352      	lsls	r2, r2, #13
   1e750:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e752:	687b      	ldr	r3, [r7, #4]
   1e754:	222c      	movs	r2, #44	; 0x2c
   1e756:	2100      	movs	r1, #0
   1e758:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e75a:	687b      	ldr	r3, [r7, #4]
   1e75c:	222d      	movs	r2, #45	; 0x2d
   1e75e:	2100      	movs	r1, #0
   1e760:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e762:	687b      	ldr	r3, [r7, #4]
   1e764:	2200      	movs	r2, #0
   1e766:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e768:	687b      	ldr	r3, [r7, #4]
   1e76a:	2200      	movs	r2, #0
   1e76c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e76e:	687b      	ldr	r3, [r7, #4]
   1e770:	2200      	movs	r2, #0
   1e772:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e774:	687b      	ldr	r3, [r7, #4]
   1e776:	2200      	movs	r2, #0
   1e778:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e77a:	687b      	ldr	r3, [r7, #4]
   1e77c:	2200      	movs	r2, #0
   1e77e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e780:	687b      	ldr	r3, [r7, #4]
   1e782:	2200      	movs	r2, #0
   1e784:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1e786:	687b      	ldr	r3, [r7, #4]
   1e788:	2200      	movs	r2, #0
   1e78a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1e78c:	687b      	ldr	r3, [r7, #4]
   1e78e:	2200      	movs	r2, #0
   1e790:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1e792:	687b      	ldr	r3, [r7, #4]
   1e794:	2200      	movs	r2, #0
   1e796:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1e798:	687b      	ldr	r3, [r7, #4]
   1e79a:	2200      	movs	r2, #0
   1e79c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e79e:	687b      	ldr	r3, [r7, #4]
   1e7a0:	2213      	movs	r2, #19
   1e7a2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1e7a4:	687b      	ldr	r3, [r7, #4]
   1e7a6:	2200      	movs	r2, #0
   1e7a8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1e7aa:	46c0      	nop			; (mov r8, r8)
   1e7ac:	46bd      	mov	sp, r7
   1e7ae:	b002      	add	sp, #8
   1e7b0:	bd80      	pop	{r7, pc}
	...

0001e7b4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1e7b4:	b580      	push	{r7, lr}
   1e7b6:	b084      	sub	sp, #16
   1e7b8:	af00      	add	r7, sp, #0
   1e7ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e7bc:	687b      	ldr	r3, [r7, #4]
   1e7be:	681b      	ldr	r3, [r3, #0]
   1e7c0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e7c2:	687b      	ldr	r3, [r7, #4]
   1e7c4:	681b      	ldr	r3, [r3, #0]
   1e7c6:	0018      	movs	r0, r3
   1e7c8:	4b09      	ldr	r3, [pc, #36]	; (1e7f0 <usart_enable+0x3c>)
   1e7ca:	4798      	blx	r3
   1e7cc:	0003      	movs	r3, r0
   1e7ce:	0018      	movs	r0, r3
   1e7d0:	4b08      	ldr	r3, [pc, #32]	; (1e7f4 <usart_enable+0x40>)
   1e7d2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1e7d4:	687b      	ldr	r3, [r7, #4]
   1e7d6:	0018      	movs	r0, r3
   1e7d8:	4b07      	ldr	r3, [pc, #28]	; (1e7f8 <usart_enable+0x44>)
   1e7da:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e7dc:	68fb      	ldr	r3, [r7, #12]
   1e7de:	681b      	ldr	r3, [r3, #0]
   1e7e0:	2202      	movs	r2, #2
   1e7e2:	431a      	orrs	r2, r3
   1e7e4:	68fb      	ldr	r3, [r7, #12]
   1e7e6:	601a      	str	r2, [r3, #0]
}
   1e7e8:	46c0      	nop			; (mov r8, r8)
   1e7ea:	46bd      	mov	sp, r7
   1e7ec:	b004      	add	sp, #16
   1e7ee:	bd80      	pop	{r7, pc}
   1e7f0:	0002821d 	.word	0x0002821d
   1e7f4:	0001e685 	.word	0x0001e685
   1e7f8:	0001e6d1 	.word	0x0001e6d1

0001e7fc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1e7fc:	b580      	push	{r7, lr}
   1e7fe:	b082      	sub	sp, #8
   1e800:	af00      	add	r7, sp, #0
   1e802:	6078      	str	r0, [r7, #4]
   1e804:	000a      	movs	r2, r1
   1e806:	1cfb      	adds	r3, r7, #3
   1e808:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1e80a:	687b      	ldr	r3, [r7, #4]
   1e80c:	2231      	movs	r2, #49	; 0x31
   1e80e:	5c9b      	ldrb	r3, [r3, r2]
   1e810:	b25a      	sxtb	r2, r3
   1e812:	1cfb      	adds	r3, r7, #3
   1e814:	781b      	ldrb	r3, [r3, #0]
   1e816:	2101      	movs	r1, #1
   1e818:	4099      	lsls	r1, r3
   1e81a:	000b      	movs	r3, r1
   1e81c:	b25b      	sxtb	r3, r3
   1e81e:	4313      	orrs	r3, r2
   1e820:	b25b      	sxtb	r3, r3
   1e822:	b2d9      	uxtb	r1, r3
   1e824:	687b      	ldr	r3, [r7, #4]
   1e826:	2231      	movs	r2, #49	; 0x31
   1e828:	5499      	strb	r1, [r3, r2]

}
   1e82a:	46c0      	nop			; (mov r8, r8)
   1e82c:	46bd      	mov	sp, r7
   1e82e:	b002      	add	sp, #8
   1e830:	bd80      	pop	{r7, pc}
	...

0001e834 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e834:	b580      	push	{r7, lr}
   1e836:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e838:	2380      	movs	r3, #128	; 0x80
   1e83a:	009a      	lsls	r2, r3, #2
   1e83c:	4b0f      	ldr	r3, [pc, #60]	; (1e87c <InitializeSerialConsole+0x48>)
   1e83e:	0011      	movs	r1, r2
   1e840:	0018      	movs	r0, r3
   1e842:	4b0f      	ldr	r3, [pc, #60]	; (1e880 <InitializeSerialConsole+0x4c>)
   1e844:	4798      	blx	r3
   1e846:	0002      	movs	r2, r0
   1e848:	4b0e      	ldr	r3, [pc, #56]	; (1e884 <InitializeSerialConsole+0x50>)
   1e84a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e84c:	2380      	movs	r3, #128	; 0x80
   1e84e:	009a      	lsls	r2, r3, #2
   1e850:	4b0d      	ldr	r3, [pc, #52]	; (1e888 <InitializeSerialConsole+0x54>)
   1e852:	0011      	movs	r1, r2
   1e854:	0018      	movs	r0, r3
   1e856:	4b0a      	ldr	r3, [pc, #40]	; (1e880 <InitializeSerialConsole+0x4c>)
   1e858:	4798      	blx	r3
   1e85a:	0002      	movs	r2, r0
   1e85c:	4b0b      	ldr	r3, [pc, #44]	; (1e88c <InitializeSerialConsole+0x58>)
   1e85e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e860:	4b0b      	ldr	r3, [pc, #44]	; (1e890 <InitializeSerialConsole+0x5c>)
   1e862:	4798      	blx	r3
    configure_usart_callbacks();
   1e864:	4b0b      	ldr	r3, [pc, #44]	; (1e894 <InitializeSerialConsole+0x60>)
   1e866:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e868:	490b      	ldr	r1, [pc, #44]	; (1e898 <InitializeSerialConsole+0x64>)
   1e86a:	4b0c      	ldr	r3, [pc, #48]	; (1e89c <InitializeSerialConsole+0x68>)
   1e86c:	2201      	movs	r2, #1
   1e86e:	0018      	movs	r0, r3
   1e870:	4b0b      	ldr	r3, [pc, #44]	; (1e8a0 <InitializeSerialConsole+0x6c>)
   1e872:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e874:	46c0      	nop			; (mov r8, r8)
   1e876:	46bd      	mov	sp, r7
   1e878:	bd80      	pop	{r7, pc}
   1e87a:	46c0      	nop			; (mov r8, r8)
   1e87c:	200058e4 	.word	0x200058e4
   1e880:	0001e565 	.word	0x0001e565
   1e884:	200056dc 	.word	0x200056dc
   1e888:	200056e4 	.word	0x200056e4
   1e88c:	20005ae8 	.word	0x20005ae8
   1e890:	0001ea09 	.word	0x0001ea09
   1e894:	0001ea81 	.word	0x0001ea81
   1e898:	200056e0 	.word	0x200056e0
   1e89c:	200056a8 	.word	0x200056a8
   1e8a0:	00029ac5 	.word	0x00029ac5

0001e8a4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e8a4:	b580      	push	{r7, lr}
   1e8a6:	b084      	sub	sp, #16
   1e8a8:	af00      	add	r7, sp, #0
   1e8aa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e8ac:	4b1a      	ldr	r3, [pc, #104]	; (1e918 <SerialConsoleWriteString+0x74>)
   1e8ae:	4798      	blx	r3
    if (string != NULL) {
   1e8b0:	687b      	ldr	r3, [r7, #4]
   1e8b2:	2b00      	cmp	r3, #0
   1e8b4:	d02a      	beq.n	1e90c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e8b6:	2300      	movs	r3, #0
   1e8b8:	60fb      	str	r3, [r7, #12]
   1e8ba:	e00b      	b.n	1e8d4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e8bc:	4b17      	ldr	r3, [pc, #92]	; (1e91c <SerialConsoleWriteString+0x78>)
   1e8be:	6818      	ldr	r0, [r3, #0]
   1e8c0:	687a      	ldr	r2, [r7, #4]
   1e8c2:	68fb      	ldr	r3, [r7, #12]
   1e8c4:	18d3      	adds	r3, r2, r3
   1e8c6:	781b      	ldrb	r3, [r3, #0]
   1e8c8:	0019      	movs	r1, r3
   1e8ca:	4b15      	ldr	r3, [pc, #84]	; (1e920 <SerialConsoleWriteString+0x7c>)
   1e8cc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e8ce:	68fb      	ldr	r3, [r7, #12]
   1e8d0:	3301      	adds	r3, #1
   1e8d2:	60fb      	str	r3, [r7, #12]
   1e8d4:	687b      	ldr	r3, [r7, #4]
   1e8d6:	0018      	movs	r0, r3
   1e8d8:	4b12      	ldr	r3, [pc, #72]	; (1e924 <SerialConsoleWriteString+0x80>)
   1e8da:	4798      	blx	r3
   1e8dc:	0002      	movs	r2, r0
   1e8de:	68fb      	ldr	r3, [r7, #12]
   1e8e0:	429a      	cmp	r2, r3
   1e8e2:	d8eb      	bhi.n	1e8bc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e8e4:	4b10      	ldr	r3, [pc, #64]	; (1e928 <SerialConsoleWriteString+0x84>)
   1e8e6:	2101      	movs	r1, #1
   1e8e8:	0018      	movs	r0, r3
   1e8ea:	4b10      	ldr	r3, [pc, #64]	; (1e92c <SerialConsoleWriteString+0x88>)
   1e8ec:	4798      	blx	r3
   1e8ee:	1e03      	subs	r3, r0, #0
   1e8f0:	d10c      	bne.n	1e90c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e8f2:	4b0a      	ldr	r3, [pc, #40]	; (1e91c <SerialConsoleWriteString+0x78>)
   1e8f4:	681b      	ldr	r3, [r3, #0]
   1e8f6:	4a0e      	ldr	r2, [pc, #56]	; (1e930 <SerialConsoleWriteString+0x8c>)
   1e8f8:	0011      	movs	r1, r2
   1e8fa:	0018      	movs	r0, r3
   1e8fc:	4b0d      	ldr	r3, [pc, #52]	; (1e934 <SerialConsoleWriteString+0x90>)
   1e8fe:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e900:	490b      	ldr	r1, [pc, #44]	; (1e930 <SerialConsoleWriteString+0x8c>)
   1e902:	4b09      	ldr	r3, [pc, #36]	; (1e928 <SerialConsoleWriteString+0x84>)
   1e904:	2201      	movs	r2, #1
   1e906:	0018      	movs	r0, r3
   1e908:	4b0b      	ldr	r3, [pc, #44]	; (1e938 <SerialConsoleWriteString+0x94>)
   1e90a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e90c:	4b0b      	ldr	r3, [pc, #44]	; (1e93c <SerialConsoleWriteString+0x98>)
   1e90e:	4798      	blx	r3
}
   1e910:	46c0      	nop			; (mov r8, r8)
   1e912:	46bd      	mov	sp, r7
   1e914:	b004      	add	sp, #16
   1e916:	bd80      	pop	{r7, pc}
   1e918:	0001cf11 	.word	0x0001cf11
   1e91c:	20005ae8 	.word	0x20005ae8
   1e920:	0001e5c5 	.word	0x0001e5c5
   1e924:	0003659f 	.word	0x0003659f
   1e928:	200056a8 	.word	0x200056a8
   1e92c:	00029b0d 	.word	0x00029b0d
   1e930:	20005ae4 	.word	0x20005ae4
   1e934:	0001e5f9 	.word	0x0001e5f9
   1e938:	00029a7d 	.word	0x00029a7d
   1e93c:	0001cf29 	.word	0x0001cf29

0001e940 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e940:	b580      	push	{r7, lr}
   1e942:	b084      	sub	sp, #16
   1e944:	af00      	add	r7, sp, #0
   1e946:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e948:	4b08      	ldr	r3, [pc, #32]	; (1e96c <SerialConsoleReadCharacter+0x2c>)
   1e94a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e94c:	4b08      	ldr	r3, [pc, #32]	; (1e970 <SerialConsoleReadCharacter+0x30>)
   1e94e:	681b      	ldr	r3, [r3, #0]
   1e950:	687a      	ldr	r2, [r7, #4]
   1e952:	0011      	movs	r1, r2
   1e954:	0018      	movs	r0, r3
   1e956:	4b07      	ldr	r3, [pc, #28]	; (1e974 <SerialConsoleReadCharacter+0x34>)
   1e958:	4798      	blx	r3
   1e95a:	0003      	movs	r3, r0
   1e95c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e95e:	4b06      	ldr	r3, [pc, #24]	; (1e978 <SerialConsoleReadCharacter+0x38>)
   1e960:	4798      	blx	r3
    return a;
   1e962:	68fb      	ldr	r3, [r7, #12]
}
   1e964:	0018      	movs	r0, r3
   1e966:	46bd      	mov	sp, r7
   1e968:	b004      	add	sp, #16
   1e96a:	bd80      	pop	{r7, pc}
   1e96c:	0001cf11 	.word	0x0001cf11
   1e970:	200056dc 	.word	0x200056dc
   1e974:	0001e5f9 	.word	0x0001e5f9
   1e978:	0001cf29 	.word	0x0001cf29

0001e97c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e97c:	b580      	push	{r7, lr}
   1e97e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e980:	4b02      	ldr	r3, [pc, #8]	; (1e98c <getLogLevel+0x10>)
   1e982:	781b      	ldrb	r3, [r3, #0]
}
   1e984:	0018      	movs	r0, r3
   1e986:	46bd      	mov	sp, r7
   1e988:	bd80      	pop	{r7, pc}
   1e98a:	46c0      	nop			; (mov r8, r8)
   1e98c:	20004214 	.word	0x20004214

0001e990 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e990:	b40e      	push	{r1, r2, r3}
   1e992:	b590      	push	{r4, r7, lr}
   1e994:	b084      	sub	sp, #16
   1e996:	af00      	add	r7, sp, #0
   1e998:	0002      	movs	r2, r0
   1e99a:	1dfb      	adds	r3, r7, #7
   1e99c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e99e:	4b0e      	ldr	r3, [pc, #56]	; (1e9d8 <LogMessage+0x48>)
   1e9a0:	4798      	blx	r3
   1e9a2:	0003      	movs	r3, r0
   1e9a4:	001a      	movs	r2, r3
   1e9a6:	1dfb      	adds	r3, r7, #7
   1e9a8:	781b      	ldrb	r3, [r3, #0]
   1e9aa:	4293      	cmp	r3, r2
   1e9ac:	d30c      	bcc.n	1e9c8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e9ae:	2320      	movs	r3, #32
   1e9b0:	18fb      	adds	r3, r7, r3
   1e9b2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e9b4:	68fb      	ldr	r3, [r7, #12]
   1e9b6:	69fa      	ldr	r2, [r7, #28]
   1e9b8:	4808      	ldr	r0, [pc, #32]	; (1e9dc <LogMessage+0x4c>)
   1e9ba:	217f      	movs	r1, #127	; 0x7f
   1e9bc:	4c08      	ldr	r4, [pc, #32]	; (1e9e0 <LogMessage+0x50>)
   1e9be:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e9c0:	4b06      	ldr	r3, [pc, #24]	; (1e9dc <LogMessage+0x4c>)
   1e9c2:	0018      	movs	r0, r3
   1e9c4:	4b07      	ldr	r3, [pc, #28]	; (1e9e4 <LogMessage+0x54>)
   1e9c6:	4798      	blx	r3
        va_end(ap);
    }
};
   1e9c8:	46c0      	nop			; (mov r8, r8)
   1e9ca:	46bd      	mov	sp, r7
   1e9cc:	b004      	add	sp, #16
   1e9ce:	bc90      	pop	{r4, r7}
   1e9d0:	bc08      	pop	{r3}
   1e9d2:	b003      	add	sp, #12
   1e9d4:	4718      	bx	r3
   1e9d6:	46c0      	nop			; (mov r8, r8)
   1e9d8:	0001e97d 	.word	0x0001e97d
   1e9dc:	20005628 	.word	0x20005628
   1e9e0:	000367d9 	.word	0x000367d9
   1e9e4:	0001e8a5 	.word	0x0001e8a5

0001e9e8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e9e8:	b40f      	push	{r0, r1, r2, r3}
   1e9ea:	b580      	push	{r7, lr}
   1e9ec:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e9ee:	68bb      	ldr	r3, [r7, #8]
   1e9f0:	0019      	movs	r1, r3
   1e9f2:	2001      	movs	r0, #1
   1e9f4:	4b03      	ldr	r3, [pc, #12]	; (1ea04 <LogMessageDebug+0x1c>)
   1e9f6:	4798      	blx	r3
};
   1e9f8:	46c0      	nop			; (mov r8, r8)
   1e9fa:	46bd      	mov	sp, r7
   1e9fc:	bc80      	pop	{r7}
   1e9fe:	bc08      	pop	{r3}
   1ea00:	b004      	add	sp, #16
   1ea02:	4718      	bx	r3
   1ea04:	0001e991 	.word	0x0001e991

0001ea08 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ea08:	b580      	push	{r7, lr}
   1ea0a:	b090      	sub	sp, #64	; 0x40
   1ea0c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ea0e:	003b      	movs	r3, r7
   1ea10:	0018      	movs	r0, r3
   1ea12:	4b14      	ldr	r3, [pc, #80]	; (1ea64 <configure_usart+0x5c>)
   1ea14:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ea16:	003b      	movs	r3, r7
   1ea18:	22e1      	movs	r2, #225	; 0xe1
   1ea1a:	0252      	lsls	r2, r2, #9
   1ea1c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ea1e:	003b      	movs	r3, r7
   1ea20:	22c4      	movs	r2, #196	; 0xc4
   1ea22:	0392      	lsls	r2, r2, #14
   1ea24:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ea26:	003b      	movs	r3, r7
   1ea28:	2201      	movs	r2, #1
   1ea2a:	4252      	negs	r2, r2
   1ea2c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ea2e:	003b      	movs	r3, r7
   1ea30:	2201      	movs	r2, #1
   1ea32:	4252      	negs	r2, r2
   1ea34:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ea36:	003b      	movs	r3, r7
   1ea38:	4a0b      	ldr	r2, [pc, #44]	; (1ea68 <configure_usart+0x60>)
   1ea3a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ea3c:	003b      	movs	r3, r7
   1ea3e:	4a0b      	ldr	r2, [pc, #44]	; (1ea6c <configure_usart+0x64>)
   1ea40:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ea42:	46c0      	nop			; (mov r8, r8)
   1ea44:	003a      	movs	r2, r7
   1ea46:	490a      	ldr	r1, [pc, #40]	; (1ea70 <configure_usart+0x68>)
   1ea48:	4b0a      	ldr	r3, [pc, #40]	; (1ea74 <configure_usart+0x6c>)
   1ea4a:	0018      	movs	r0, r3
   1ea4c:	4b0a      	ldr	r3, [pc, #40]	; (1ea78 <configure_usart+0x70>)
   1ea4e:	4798      	blx	r3
   1ea50:	1e03      	subs	r3, r0, #0
   1ea52:	d1f7      	bne.n	1ea44 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ea54:	4b07      	ldr	r3, [pc, #28]	; (1ea74 <configure_usart+0x6c>)
   1ea56:	0018      	movs	r0, r3
   1ea58:	4b08      	ldr	r3, [pc, #32]	; (1ea7c <configure_usart+0x74>)
   1ea5a:	4798      	blx	r3
}
   1ea5c:	46c0      	nop			; (mov r8, r8)
   1ea5e:	46bd      	mov	sp, r7
   1ea60:	b010      	add	sp, #64	; 0x40
   1ea62:	bd80      	pop	{r7, pc}
   1ea64:	0001e6f5 	.word	0x0001e6f5
   1ea68:	002a0003 	.word	0x002a0003
   1ea6c:	002b0003 	.word	0x002b0003
   1ea70:	42001800 	.word	0x42001800
   1ea74:	200056a8 	.word	0x200056a8
   1ea78:	00029681 	.word	0x00029681
   1ea7c:	0001e7b5 	.word	0x0001e7b5

0001ea80 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1ea80:	b580      	push	{r7, lr}
   1ea82:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ea84:	490c      	ldr	r1, [pc, #48]	; (1eab8 <configure_usart_callbacks+0x38>)
   1ea86:	4b0d      	ldr	r3, [pc, #52]	; (1eabc <configure_usart_callbacks+0x3c>)
   1ea88:	2200      	movs	r2, #0
   1ea8a:	0018      	movs	r0, r3
   1ea8c:	4b0c      	ldr	r3, [pc, #48]	; (1eac0 <configure_usart_callbacks+0x40>)
   1ea8e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ea90:	490c      	ldr	r1, [pc, #48]	; (1eac4 <configure_usart_callbacks+0x44>)
   1ea92:	4b0a      	ldr	r3, [pc, #40]	; (1eabc <configure_usart_callbacks+0x3c>)
   1ea94:	2201      	movs	r2, #1
   1ea96:	0018      	movs	r0, r3
   1ea98:	4b09      	ldr	r3, [pc, #36]	; (1eac0 <configure_usart_callbacks+0x40>)
   1ea9a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ea9c:	4b07      	ldr	r3, [pc, #28]	; (1eabc <configure_usart_callbacks+0x3c>)
   1ea9e:	2100      	movs	r1, #0
   1eaa0:	0018      	movs	r0, r3
   1eaa2:	4b09      	ldr	r3, [pc, #36]	; (1eac8 <configure_usart_callbacks+0x48>)
   1eaa4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1eaa6:	4b05      	ldr	r3, [pc, #20]	; (1eabc <configure_usart_callbacks+0x3c>)
   1eaa8:	2101      	movs	r1, #1
   1eaaa:	0018      	movs	r0, r3
   1eaac:	4b06      	ldr	r3, [pc, #24]	; (1eac8 <configure_usart_callbacks+0x48>)
   1eaae:	4798      	blx	r3
}
   1eab0:	46c0      	nop			; (mov r8, r8)
   1eab2:	46bd      	mov	sp, r7
   1eab4:	bd80      	pop	{r7, pc}
   1eab6:	46c0      	nop			; (mov r8, r8)
   1eab8:	0001eb15 	.word	0x0001eb15
   1eabc:	200056a8 	.word	0x200056a8
   1eac0:	00029a35 	.word	0x00029a35
   1eac4:	0001eacd 	.word	0x0001eacd
   1eac8:	0001e7fd 	.word	0x0001e7fd

0001eacc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1eacc:	b580      	push	{r7, lr}
   1eace:	b082      	sub	sp, #8
   1ead0:	af00      	add	r7, sp, #0
   1ead2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ead4:	4b09      	ldr	r3, [pc, #36]	; (1eafc <usart_read_callback+0x30>)
   1ead6:	681a      	ldr	r2, [r3, #0]
   1ead8:	4b09      	ldr	r3, [pc, #36]	; (1eb00 <usart_read_callback+0x34>)
   1eada:	781b      	ldrb	r3, [r3, #0]
   1eadc:	0019      	movs	r1, r3
   1eade:	0010      	movs	r0, r2
   1eae0:	4b08      	ldr	r3, [pc, #32]	; (1eb04 <usart_read_callback+0x38>)
   1eae2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1eae4:	4906      	ldr	r1, [pc, #24]	; (1eb00 <usart_read_callback+0x34>)
   1eae6:	4b08      	ldr	r3, [pc, #32]	; (1eb08 <usart_read_callback+0x3c>)
   1eae8:	2201      	movs	r2, #1
   1eaea:	0018      	movs	r0, r3
   1eaec:	4b07      	ldr	r3, [pc, #28]	; (1eb0c <usart_read_callback+0x40>)
   1eaee:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1eaf0:	4b07      	ldr	r3, [pc, #28]	; (1eb10 <usart_read_callback+0x44>)
   1eaf2:	4798      	blx	r3
}
   1eaf4:	46c0      	nop			; (mov r8, r8)
   1eaf6:	46bd      	mov	sp, r7
   1eaf8:	b002      	add	sp, #8
   1eafa:	bd80      	pop	{r7, pc}
   1eafc:	200056dc 	.word	0x200056dc
   1eb00:	200056e0 	.word	0x200056e0
   1eb04:	0001e5c5 	.word	0x0001e5c5
   1eb08:	200056a8 	.word	0x200056a8
   1eb0c:	00029ac5 	.word	0x00029ac5
   1eb10:	00013b95 	.word	0x00013b95

0001eb14 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1eb14:	b580      	push	{r7, lr}
   1eb16:	b082      	sub	sp, #8
   1eb18:	af00      	add	r7, sp, #0
   1eb1a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1eb1c:	4b09      	ldr	r3, [pc, #36]	; (1eb44 <usart_write_callback+0x30>)
   1eb1e:	681b      	ldr	r3, [r3, #0]
   1eb20:	4a09      	ldr	r2, [pc, #36]	; (1eb48 <usart_write_callback+0x34>)
   1eb22:	0011      	movs	r1, r2
   1eb24:	0018      	movs	r0, r3
   1eb26:	4b09      	ldr	r3, [pc, #36]	; (1eb4c <usart_write_callback+0x38>)
   1eb28:	4798      	blx	r3
   1eb2a:	0003      	movs	r3, r0
   1eb2c:	3301      	adds	r3, #1
   1eb2e:	d005      	beq.n	1eb3c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eb30:	4905      	ldr	r1, [pc, #20]	; (1eb48 <usart_write_callback+0x34>)
   1eb32:	4b07      	ldr	r3, [pc, #28]	; (1eb50 <usart_write_callback+0x3c>)
   1eb34:	2201      	movs	r2, #1
   1eb36:	0018      	movs	r0, r3
   1eb38:	4b06      	ldr	r3, [pc, #24]	; (1eb54 <usart_write_callback+0x40>)
   1eb3a:	4798      	blx	r3
    }
}
   1eb3c:	46c0      	nop			; (mov r8, r8)
   1eb3e:	46bd      	mov	sp, r7
   1eb40:	b002      	add	sp, #8
   1eb42:	bd80      	pop	{r7, pc}
   1eb44:	20005ae8 	.word	0x20005ae8
   1eb48:	20005ae4 	.word	0x20005ae4
   1eb4c:	0001e5f9 	.word	0x0001e5f9
   1eb50:	200056a8 	.word	0x200056a8
   1eb54:	00029a7d 	.word	0x00029a7d

0001eb58 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1eb58:	b590      	push	{r4, r7, lr}
   1eb5a:	b087      	sub	sp, #28
   1eb5c:	af00      	add	r7, sp, #0
   1eb5e:	60f8      	str	r0, [r7, #12]
   1eb60:	000c      	movs	r4, r1
   1eb62:	0010      	movs	r0, r2
   1eb64:	0019      	movs	r1, r3
   1eb66:	230a      	movs	r3, #10
   1eb68:	18fb      	adds	r3, r7, r3
   1eb6a:	1c22      	adds	r2, r4, #0
   1eb6c:	801a      	strh	r2, [r3, #0]
   1eb6e:	2308      	movs	r3, #8
   1eb70:	18fb      	adds	r3, r7, r3
   1eb72:	1c02      	adds	r2, r0, #0
   1eb74:	801a      	strh	r2, [r3, #0]
   1eb76:	1dfb      	adds	r3, r7, #7
   1eb78:	1c0a      	adds	r2, r1, #0
   1eb7a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1eb7c:	230a      	movs	r3, #10
   1eb7e:	18fb      	adds	r3, r7, r3
   1eb80:	881a      	ldrh	r2, [r3, #0]
   1eb82:	2308      	movs	r3, #8
   1eb84:	18fb      	adds	r3, r7, r3
   1eb86:	881b      	ldrh	r3, [r3, #0]
   1eb88:	1ad3      	subs	r3, r2, r3
   1eb8a:	3307      	adds	r3, #7
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	da00      	bge.n	1eb92 <SDMMC_UNSTUFF_BITS+0x3a>
   1eb90:	3307      	adds	r3, #7
   1eb92:	10db      	asrs	r3, r3, #3
   1eb94:	3b01      	subs	r3, #1
   1eb96:	68fa      	ldr	r2, [r7, #12]
   1eb98:	18d3      	adds	r3, r2, r3
   1eb9a:	781b      	ldrb	r3, [r3, #0]
   1eb9c:	0019      	movs	r1, r3
   1eb9e:	2308      	movs	r3, #8
   1eba0:	18fb      	adds	r3, r7, r3
   1eba2:	881b      	ldrh	r3, [r3, #0]
   1eba4:	2207      	movs	r2, #7
   1eba6:	4013      	ands	r3, r2
   1eba8:	4119      	asrs	r1, r3
   1ebaa:	000b      	movs	r3, r1
   1ebac:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ebae:	2308      	movs	r3, #8
   1ebb0:	18fb      	adds	r3, r7, r3
   1ebb2:	881b      	ldrh	r3, [r3, #0]
   1ebb4:	2207      	movs	r2, #7
   1ebb6:	401a      	ands	r2, r3
   1ebb8:	1dfb      	adds	r3, r7, #7
   1ebba:	781b      	ldrb	r3, [r3, #0]
   1ebbc:	18d3      	adds	r3, r2, r3
   1ebbe:	2b08      	cmp	r3, #8
   1ebc0:	dd1c      	ble.n	1ebfc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ebc2:	230a      	movs	r3, #10
   1ebc4:	18fb      	adds	r3, r7, r3
   1ebc6:	881a      	ldrh	r2, [r3, #0]
   1ebc8:	2308      	movs	r3, #8
   1ebca:	18fb      	adds	r3, r7, r3
   1ebcc:	881b      	ldrh	r3, [r3, #0]
   1ebce:	1ad3      	subs	r3, r2, r3
   1ebd0:	3307      	adds	r3, #7
   1ebd2:	2b00      	cmp	r3, #0
   1ebd4:	da00      	bge.n	1ebd8 <SDMMC_UNSTUFF_BITS+0x80>
   1ebd6:	3307      	adds	r3, #7
   1ebd8:	10db      	asrs	r3, r3, #3
   1ebda:	3b02      	subs	r3, #2
   1ebdc:	68fa      	ldr	r2, [r7, #12]
   1ebde:	18d3      	adds	r3, r2, r3
   1ebe0:	781b      	ldrb	r3, [r3, #0]
   1ebe2:	0019      	movs	r1, r3
   1ebe4:	2308      	movs	r3, #8
   1ebe6:	18fb      	adds	r3, r7, r3
   1ebe8:	881b      	ldrh	r3, [r3, #0]
   1ebea:	2207      	movs	r2, #7
   1ebec:	4013      	ands	r3, r2
   1ebee:	2208      	movs	r2, #8
   1ebf0:	1ad3      	subs	r3, r2, r3
   1ebf2:	4099      	lsls	r1, r3
   1ebf4:	000b      	movs	r3, r1
   1ebf6:	697a      	ldr	r2, [r7, #20]
   1ebf8:	4313      	orrs	r3, r2
   1ebfa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ebfc:	2308      	movs	r3, #8
   1ebfe:	18fb      	adds	r3, r7, r3
   1ec00:	881b      	ldrh	r3, [r3, #0]
   1ec02:	2207      	movs	r2, #7
   1ec04:	401a      	ands	r2, r3
   1ec06:	1dfb      	adds	r3, r7, #7
   1ec08:	781b      	ldrb	r3, [r3, #0]
   1ec0a:	18d3      	adds	r3, r2, r3
   1ec0c:	2b10      	cmp	r3, #16
   1ec0e:	dd1c      	ble.n	1ec4a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ec10:	230a      	movs	r3, #10
   1ec12:	18fb      	adds	r3, r7, r3
   1ec14:	881a      	ldrh	r2, [r3, #0]
   1ec16:	2308      	movs	r3, #8
   1ec18:	18fb      	adds	r3, r7, r3
   1ec1a:	881b      	ldrh	r3, [r3, #0]
   1ec1c:	1ad3      	subs	r3, r2, r3
   1ec1e:	3307      	adds	r3, #7
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	da00      	bge.n	1ec26 <SDMMC_UNSTUFF_BITS+0xce>
   1ec24:	3307      	adds	r3, #7
   1ec26:	10db      	asrs	r3, r3, #3
   1ec28:	3b03      	subs	r3, #3
   1ec2a:	68fa      	ldr	r2, [r7, #12]
   1ec2c:	18d3      	adds	r3, r2, r3
   1ec2e:	781b      	ldrb	r3, [r3, #0]
   1ec30:	0019      	movs	r1, r3
   1ec32:	2308      	movs	r3, #8
   1ec34:	18fb      	adds	r3, r7, r3
   1ec36:	881b      	ldrh	r3, [r3, #0]
   1ec38:	2207      	movs	r2, #7
   1ec3a:	4013      	ands	r3, r2
   1ec3c:	2210      	movs	r2, #16
   1ec3e:	1ad3      	subs	r3, r2, r3
   1ec40:	4099      	lsls	r1, r3
   1ec42:	000b      	movs	r3, r1
   1ec44:	697a      	ldr	r2, [r7, #20]
   1ec46:	4313      	orrs	r3, r2
   1ec48:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ec4a:	2308      	movs	r3, #8
   1ec4c:	18fb      	adds	r3, r7, r3
   1ec4e:	881b      	ldrh	r3, [r3, #0]
   1ec50:	2207      	movs	r2, #7
   1ec52:	401a      	ands	r2, r3
   1ec54:	1dfb      	adds	r3, r7, #7
   1ec56:	781b      	ldrb	r3, [r3, #0]
   1ec58:	18d3      	adds	r3, r2, r3
   1ec5a:	2b10      	cmp	r3, #16
   1ec5c:	dd1c      	ble.n	1ec98 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ec5e:	230a      	movs	r3, #10
   1ec60:	18fb      	adds	r3, r7, r3
   1ec62:	881a      	ldrh	r2, [r3, #0]
   1ec64:	2308      	movs	r3, #8
   1ec66:	18fb      	adds	r3, r7, r3
   1ec68:	881b      	ldrh	r3, [r3, #0]
   1ec6a:	1ad3      	subs	r3, r2, r3
   1ec6c:	3307      	adds	r3, #7
   1ec6e:	2b00      	cmp	r3, #0
   1ec70:	da00      	bge.n	1ec74 <SDMMC_UNSTUFF_BITS+0x11c>
   1ec72:	3307      	adds	r3, #7
   1ec74:	10db      	asrs	r3, r3, #3
   1ec76:	3b03      	subs	r3, #3
   1ec78:	68fa      	ldr	r2, [r7, #12]
   1ec7a:	18d3      	adds	r3, r2, r3
   1ec7c:	781b      	ldrb	r3, [r3, #0]
   1ec7e:	0019      	movs	r1, r3
   1ec80:	2308      	movs	r3, #8
   1ec82:	18fb      	adds	r3, r7, r3
   1ec84:	881b      	ldrh	r3, [r3, #0]
   1ec86:	2207      	movs	r2, #7
   1ec88:	4013      	ands	r3, r2
   1ec8a:	2210      	movs	r2, #16
   1ec8c:	1ad3      	subs	r3, r2, r3
   1ec8e:	4099      	lsls	r1, r3
   1ec90:	000b      	movs	r3, r1
   1ec92:	697a      	ldr	r2, [r7, #20]
   1ec94:	4313      	orrs	r3, r2
   1ec96:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ec98:	1dfb      	adds	r3, r7, #7
   1ec9a:	781b      	ldrb	r3, [r3, #0]
   1ec9c:	2201      	movs	r2, #1
   1ec9e:	409a      	lsls	r2, r3
   1eca0:	0013      	movs	r3, r2
   1eca2:	1e5a      	subs	r2, r3, #1
   1eca4:	697b      	ldr	r3, [r7, #20]
   1eca6:	4013      	ands	r3, r2
   1eca8:	617b      	str	r3, [r7, #20]
	return value;
   1ecaa:	697b      	ldr	r3, [r7, #20]
}
   1ecac:	0018      	movs	r0, r3
   1ecae:	46bd      	mov	sp, r7
   1ecb0:	b007      	add	sp, #28
   1ecb2:	bd90      	pop	{r4, r7, pc}

0001ecb4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ecb4:	b580      	push	{r7, lr}
   1ecb6:	b082      	sub	sp, #8
   1ecb8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ecba:	4b23      	ldr	r3, [pc, #140]	; (1ed48 <mmc_spi_op_cond+0x94>)
   1ecbc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ecbe:	4b23      	ldr	r3, [pc, #140]	; (1ed4c <mmc_spi_op_cond+0x98>)
   1ecc0:	2100      	movs	r1, #0
   1ecc2:	0018      	movs	r0, r3
   1ecc4:	4b22      	ldr	r3, [pc, #136]	; (1ed50 <mmc_spi_op_cond+0x9c>)
   1ecc6:	4798      	blx	r3
   1ecc8:	0003      	movs	r3, r0
   1ecca:	001a      	movs	r2, r3
   1eccc:	2301      	movs	r3, #1
   1ecce:	4053      	eors	r3, r2
   1ecd0:	b2db      	uxtb	r3, r3
   1ecd2:	2b00      	cmp	r3, #0
   1ecd4:	d001      	beq.n	1ecda <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1ecd6:	2300      	movs	r3, #0
   1ecd8:	e031      	b.n	1ed3e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1ecda:	4b1e      	ldr	r3, [pc, #120]	; (1ed54 <mmc_spi_op_cond+0xa0>)
   1ecdc:	4798      	blx	r3
   1ecde:	0003      	movs	r3, r0
   1ece0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ece2:	683b      	ldr	r3, [r7, #0]
   1ece4:	2201      	movs	r2, #1
   1ece6:	4013      	ands	r3, r2
   1ece8:	d006      	beq.n	1ecf8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1ecea:	687b      	ldr	r3, [r7, #4]
   1ecec:	1e5a      	subs	r2, r3, #1
   1ecee:	607a      	str	r2, [r7, #4]
   1ecf0:	2b00      	cmp	r3, #0
   1ecf2:	d1e4      	bne.n	1ecbe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ecf4:	2300      	movs	r3, #0
   1ecf6:	e022      	b.n	1ed3e <mmc_spi_op_cond+0x8a>
			break;
   1ecf8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ecfa:	4b17      	ldr	r3, [pc, #92]	; (1ed58 <mmc_spi_op_cond+0xa4>)
   1ecfc:	2100      	movs	r1, #0
   1ecfe:	0018      	movs	r0, r3
   1ed00:	4b13      	ldr	r3, [pc, #76]	; (1ed50 <mmc_spi_op_cond+0x9c>)
   1ed02:	4798      	blx	r3
   1ed04:	0003      	movs	r3, r0
   1ed06:	001a      	movs	r2, r3
   1ed08:	2301      	movs	r3, #1
   1ed0a:	4053      	eors	r3, r2
   1ed0c:	b2db      	uxtb	r3, r3
   1ed0e:	2b00      	cmp	r3, #0
   1ed10:	d001      	beq.n	1ed16 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ed12:	2300      	movs	r3, #0
   1ed14:	e013      	b.n	1ed3e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1ed16:	4b0f      	ldr	r3, [pc, #60]	; (1ed54 <mmc_spi_op_cond+0xa0>)
   1ed18:	4798      	blx	r3
   1ed1a:	0002      	movs	r2, r0
   1ed1c:	23c0      	movs	r3, #192	; 0xc0
   1ed1e:	05db      	lsls	r3, r3, #23
   1ed20:	401a      	ands	r2, r3
   1ed22:	2380      	movs	r3, #128	; 0x80
   1ed24:	05db      	lsls	r3, r3, #23
   1ed26:	429a      	cmp	r2, r3
   1ed28:	d108      	bne.n	1ed3c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ed2a:	4b0c      	ldr	r3, [pc, #48]	; (1ed5c <mmc_spi_op_cond+0xa8>)
   1ed2c:	681a      	ldr	r2, [r3, #0]
   1ed2e:	4b0b      	ldr	r3, [pc, #44]	; (1ed5c <mmc_spi_op_cond+0xa8>)
   1ed30:	681b      	ldr	r3, [r3, #0]
   1ed32:	7adb      	ldrb	r3, [r3, #11]
   1ed34:	2108      	movs	r1, #8
   1ed36:	430b      	orrs	r3, r1
   1ed38:	b2db      	uxtb	r3, r3
   1ed3a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ed3c:	2301      	movs	r3, #1
}
   1ed3e:	0018      	movs	r0, r3
   1ed40:	46bd      	mov	sp, r7
   1ed42:	b002      	add	sp, #8
   1ed44:	bd80      	pop	{r7, pc}
   1ed46:	46c0      	nop			; (mov r8, r8)
   1ed48:	00001bee 	.word	0x00001bee
   1ed4c:	00001101 	.word	0x00001101
   1ed50:	00020731 	.word	0x00020731
   1ed54:	00020971 	.word	0x00020971
   1ed58:	0000053a 	.word	0x0000053a
   1ed5c:	2000423c 	.word	0x2000423c

0001ed60 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1ed60:	b580      	push	{r7, lr}
   1ed62:	b086      	sub	sp, #24
   1ed64:	af00      	add	r7, sp, #0
   1ed66:	0002      	movs	r2, r0
   1ed68:	1dfb      	adds	r3, r7, #7
   1ed6a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ed6c:	4b2e      	ldr	r3, [pc, #184]	; (1ee28 <sd_spi_op_cond+0xc8>)
   1ed6e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ed70:	4b2e      	ldr	r3, [pc, #184]	; (1ee2c <sd_spi_op_cond+0xcc>)
   1ed72:	2100      	movs	r1, #0
   1ed74:	0018      	movs	r0, r3
   1ed76:	4b2e      	ldr	r3, [pc, #184]	; (1ee30 <sd_spi_op_cond+0xd0>)
   1ed78:	4798      	blx	r3
   1ed7a:	0003      	movs	r3, r0
   1ed7c:	001a      	movs	r2, r3
   1ed7e:	2301      	movs	r3, #1
   1ed80:	4053      	eors	r3, r2
   1ed82:	b2db      	uxtb	r3, r3
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	d001      	beq.n	1ed8c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1ed88:	2300      	movs	r3, #0
   1ed8a:	e048      	b.n	1ee1e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1ed8c:	2300      	movs	r3, #0
   1ed8e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ed90:	1dfb      	adds	r3, r7, #7
   1ed92:	781b      	ldrb	r3, [r3, #0]
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	d004      	beq.n	1eda2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ed98:	697b      	ldr	r3, [r7, #20]
   1ed9a:	2280      	movs	r2, #128	; 0x80
   1ed9c:	05d2      	lsls	r2, r2, #23
   1ed9e:	4313      	orrs	r3, r2
   1eda0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1eda2:	697b      	ldr	r3, [r7, #20]
   1eda4:	4a23      	ldr	r2, [pc, #140]	; (1ee34 <sd_spi_op_cond+0xd4>)
   1eda6:	0019      	movs	r1, r3
   1eda8:	0010      	movs	r0, r2
   1edaa:	4b21      	ldr	r3, [pc, #132]	; (1ee30 <sd_spi_op_cond+0xd0>)
   1edac:	4798      	blx	r3
   1edae:	0003      	movs	r3, r0
   1edb0:	001a      	movs	r2, r3
   1edb2:	2301      	movs	r3, #1
   1edb4:	4053      	eors	r3, r2
   1edb6:	b2db      	uxtb	r3, r3
   1edb8:	2b00      	cmp	r3, #0
   1edba:	d001      	beq.n	1edc0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1edbc:	2300      	movs	r3, #0
   1edbe:	e02e      	b.n	1ee1e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1edc0:	4b1d      	ldr	r3, [pc, #116]	; (1ee38 <sd_spi_op_cond+0xd8>)
   1edc2:	4798      	blx	r3
   1edc4:	0003      	movs	r3, r0
   1edc6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1edc8:	68fb      	ldr	r3, [r7, #12]
   1edca:	2201      	movs	r2, #1
   1edcc:	4013      	ands	r3, r2
   1edce:	d006      	beq.n	1edde <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1edd0:	693b      	ldr	r3, [r7, #16]
   1edd2:	1e5a      	subs	r2, r3, #1
   1edd4:	613a      	str	r2, [r7, #16]
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d1ca      	bne.n	1ed70 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1edda:	2300      	movs	r3, #0
   1eddc:	e01f      	b.n	1ee1e <sd_spi_op_cond+0xbe>
			break;
   1edde:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ede0:	4b16      	ldr	r3, [pc, #88]	; (1ee3c <sd_spi_op_cond+0xdc>)
   1ede2:	2100      	movs	r1, #0
   1ede4:	0018      	movs	r0, r3
   1ede6:	4b12      	ldr	r3, [pc, #72]	; (1ee30 <sd_spi_op_cond+0xd0>)
   1ede8:	4798      	blx	r3
   1edea:	0003      	movs	r3, r0
   1edec:	001a      	movs	r2, r3
   1edee:	2301      	movs	r3, #1
   1edf0:	4053      	eors	r3, r2
   1edf2:	b2db      	uxtb	r3, r3
   1edf4:	2b00      	cmp	r3, #0
   1edf6:	d001      	beq.n	1edfc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1edf8:	2300      	movs	r3, #0
   1edfa:	e010      	b.n	1ee1e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1edfc:	4b0e      	ldr	r3, [pc, #56]	; (1ee38 <sd_spi_op_cond+0xd8>)
   1edfe:	4798      	blx	r3
   1ee00:	0002      	movs	r2, r0
   1ee02:	2380      	movs	r3, #128	; 0x80
   1ee04:	05db      	lsls	r3, r3, #23
   1ee06:	4013      	ands	r3, r2
   1ee08:	d008      	beq.n	1ee1c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ee0a:	4b0d      	ldr	r3, [pc, #52]	; (1ee40 <sd_spi_op_cond+0xe0>)
   1ee0c:	681a      	ldr	r2, [r3, #0]
   1ee0e:	4b0c      	ldr	r3, [pc, #48]	; (1ee40 <sd_spi_op_cond+0xe0>)
   1ee10:	681b      	ldr	r3, [r3, #0]
   1ee12:	7adb      	ldrb	r3, [r3, #11]
   1ee14:	2108      	movs	r1, #8
   1ee16:	430b      	orrs	r3, r1
   1ee18:	b2db      	uxtb	r3, r3
   1ee1a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ee1c:	2301      	movs	r3, #1
}
   1ee1e:	0018      	movs	r0, r3
   1ee20:	46bd      	mov	sp, r7
   1ee22:	b006      	add	sp, #24
   1ee24:	bd80      	pop	{r7, pc}
   1ee26:	46c0      	nop			; (mov r8, r8)
   1ee28:	00001bee 	.word	0x00001bee
   1ee2c:	00001137 	.word	0x00001137
   1ee30:	00020731 	.word	0x00020731
   1ee34:	00001129 	.word	0x00001129
   1ee38:	00020971 	.word	0x00020971
   1ee3c:	0000053a 	.word	0x0000053a
   1ee40:	2000423c 	.word	0x2000423c

0001ee44 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1ee44:	b580      	push	{r7, lr}
   1ee46:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1ee48:	2301      	movs	r3, #1
}
   1ee4a:	0018      	movs	r0, r3
   1ee4c:	46bd      	mov	sp, r7
   1ee4e:	bd80      	pop	{r7, pc}

0001ee50 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1ee50:	b580      	push	{r7, lr}
   1ee52:	b084      	sub	sp, #16
   1ee54:	af00      	add	r7, sp, #0
   1ee56:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1ee58:	687b      	ldr	r3, [r7, #4]
   1ee5a:	2200      	movs	r2, #0
   1ee5c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1ee5e:	23d5      	movs	r3, #213	; 0xd5
   1ee60:	005b      	lsls	r3, r3, #1
   1ee62:	4a14      	ldr	r2, [pc, #80]	; (1eeb4 <sd_cmd8+0x64>)
   1ee64:	0019      	movs	r1, r3
   1ee66:	0010      	movs	r0, r2
   1ee68:	4b13      	ldr	r3, [pc, #76]	; (1eeb8 <sd_cmd8+0x68>)
   1ee6a:	4798      	blx	r3
   1ee6c:	0003      	movs	r3, r0
   1ee6e:	001a      	movs	r2, r3
   1ee70:	2301      	movs	r3, #1
   1ee72:	4053      	eors	r3, r2
   1ee74:	b2db      	uxtb	r3, r3
   1ee76:	2b00      	cmp	r3, #0
   1ee78:	d001      	beq.n	1ee7e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1ee7a:	2301      	movs	r3, #1
   1ee7c:	e015      	b.n	1eeaa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1ee7e:	4b0f      	ldr	r3, [pc, #60]	; (1eebc <sd_cmd8+0x6c>)
   1ee80:	4798      	blx	r3
   1ee82:	0003      	movs	r3, r0
   1ee84:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1ee86:	68fb      	ldr	r3, [r7, #12]
   1ee88:	3301      	adds	r3, #1
   1ee8a:	d101      	bne.n	1ee90 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1ee8c:	2301      	movs	r3, #1
   1ee8e:	e00c      	b.n	1eeaa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1ee90:	68fb      	ldr	r3, [r7, #12]
   1ee92:	051b      	lsls	r3, r3, #20
   1ee94:	0d1a      	lsrs	r2, r3, #20
   1ee96:	23d5      	movs	r3, #213	; 0xd5
   1ee98:	005b      	lsls	r3, r3, #1
   1ee9a:	429a      	cmp	r2, r3
   1ee9c:	d001      	beq.n	1eea2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1ee9e:	2300      	movs	r3, #0
   1eea0:	e003      	b.n	1eeaa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1eea2:	687b      	ldr	r3, [r7, #4]
   1eea4:	2201      	movs	r2, #1
   1eea6:	701a      	strb	r2, [r3, #0]
	return true;
   1eea8:	2301      	movs	r3, #1
}
   1eeaa:	0018      	movs	r0, r3
   1eeac:	46bd      	mov	sp, r7
   1eeae:	b004      	add	sp, #16
   1eeb0:	bd80      	pop	{r7, pc}
   1eeb2:	46c0      	nop			; (mov r8, r8)
   1eeb4:	00005508 	.word	0x00005508
   1eeb8:	00020731 	.word	0x00020731
   1eebc:	00020971 	.word	0x00020971

0001eec0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1eec0:	b590      	push	{r4, r7, lr}
   1eec2:	b089      	sub	sp, #36	; 0x24
   1eec4:	af02      	add	r7, sp, #8
   1eec6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1eec8:	2380      	movs	r3, #128	; 0x80
   1eeca:	009a      	lsls	r2, r3, #2
   1eecc:	4841      	ldr	r0, [pc, #260]	; (1efd4 <mmc_cmd8+0x114>)
   1eece:	2300      	movs	r3, #0
   1eed0:	9300      	str	r3, [sp, #0]
   1eed2:	2301      	movs	r3, #1
   1eed4:	2100      	movs	r1, #0
   1eed6:	4c40      	ldr	r4, [pc, #256]	; (1efd8 <mmc_cmd8+0x118>)
   1eed8:	47a0      	blx	r4
   1eeda:	0003      	movs	r3, r0
   1eedc:	001a      	movs	r2, r3
   1eede:	2301      	movs	r3, #1
   1eee0:	4053      	eors	r3, r2
   1eee2:	b2db      	uxtb	r3, r3
   1eee4:	2b00      	cmp	r3, #0
   1eee6:	d001      	beq.n	1eeec <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1eee8:	2300      	movs	r3, #0
   1eeea:	e06e      	b.n	1efca <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1eeec:	2316      	movs	r3, #22
   1eeee:	18fb      	adds	r3, r7, r3
   1eef0:	2200      	movs	r2, #0
   1eef2:	801a      	strh	r2, [r3, #0]
   1eef4:	e014      	b.n	1ef20 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1eef6:	2310      	movs	r3, #16
   1eef8:	18fb      	adds	r3, r7, r3
   1eefa:	0018      	movs	r0, r3
   1eefc:	4b37      	ldr	r3, [pc, #220]	; (1efdc <mmc_cmd8+0x11c>)
   1eefe:	4798      	blx	r3
   1ef00:	0003      	movs	r3, r0
   1ef02:	001a      	movs	r2, r3
   1ef04:	2301      	movs	r3, #1
   1ef06:	4053      	eors	r3, r2
   1ef08:	b2db      	uxtb	r3, r3
   1ef0a:	2b00      	cmp	r3, #0
   1ef0c:	d001      	beq.n	1ef12 <mmc_cmd8+0x52>
			return false;
   1ef0e:	2300      	movs	r3, #0
   1ef10:	e05b      	b.n	1efca <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ef12:	2316      	movs	r3, #22
   1ef14:	18fb      	adds	r3, r7, r3
   1ef16:	881a      	ldrh	r2, [r3, #0]
   1ef18:	2316      	movs	r3, #22
   1ef1a:	18fb      	adds	r3, r7, r3
   1ef1c:	3201      	adds	r2, #1
   1ef1e:	801a      	strh	r2, [r3, #0]
   1ef20:	2316      	movs	r3, #22
   1ef22:	18fb      	adds	r3, r7, r3
   1ef24:	881b      	ldrh	r3, [r3, #0]
   1ef26:	2b31      	cmp	r3, #49	; 0x31
   1ef28:	d9e5      	bls.n	1eef6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ef2a:	693b      	ldr	r3, [r7, #16]
   1ef2c:	b2db      	uxtb	r3, r3
   1ef2e:	2202      	movs	r2, #2
   1ef30:	4013      	ands	r3, r2
   1ef32:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1ef34:	687b      	ldr	r3, [r7, #4]
   1ef36:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1ef38:	4b29      	ldr	r3, [pc, #164]	; (1efe0 <mmc_cmd8+0x120>)
   1ef3a:	681b      	ldr	r3, [r3, #0]
   1ef3c:	330e      	adds	r3, #14
   1ef3e:	0018      	movs	r0, r3
   1ef40:	230c      	movs	r3, #12
   1ef42:	223e      	movs	r2, #62	; 0x3e
   1ef44:	2180      	movs	r1, #128	; 0x80
   1ef46:	4c27      	ldr	r4, [pc, #156]	; (1efe4 <mmc_cmd8+0x124>)
   1ef48:	47a0      	blx	r4
   1ef4a:	0002      	movs	r2, r0
   1ef4c:	4b26      	ldr	r3, [pc, #152]	; (1efe8 <mmc_cmd8+0x128>)
   1ef4e:	429a      	cmp	r2, r3
   1ef50:	d135      	bne.n	1efbe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ef52:	e014      	b.n	1ef7e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1ef54:	230c      	movs	r3, #12
   1ef56:	18fb      	adds	r3, r7, r3
   1ef58:	0018      	movs	r0, r3
   1ef5a:	4b20      	ldr	r3, [pc, #128]	; (1efdc <mmc_cmd8+0x11c>)
   1ef5c:	4798      	blx	r3
   1ef5e:	0003      	movs	r3, r0
   1ef60:	001a      	movs	r2, r3
   1ef62:	2301      	movs	r3, #1
   1ef64:	4053      	eors	r3, r2
   1ef66:	b2db      	uxtb	r3, r3
   1ef68:	2b00      	cmp	r3, #0
   1ef6a:	d001      	beq.n	1ef70 <mmc_cmd8+0xb0>
				return false;
   1ef6c:	2300      	movs	r3, #0
   1ef6e:	e02c      	b.n	1efca <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ef70:	2316      	movs	r3, #22
   1ef72:	18fb      	adds	r3, r7, r3
   1ef74:	881a      	ldrh	r2, [r3, #0]
   1ef76:	2316      	movs	r3, #22
   1ef78:	18fb      	adds	r3, r7, r3
   1ef7a:	3201      	adds	r2, #1
   1ef7c:	801a      	strh	r2, [r3, #0]
   1ef7e:	2316      	movs	r3, #22
   1ef80:	18fb      	adds	r3, r7, r3
   1ef82:	881b      	ldrh	r3, [r3, #0]
   1ef84:	2b35      	cmp	r3, #53	; 0x35
   1ef86:	d9e5      	bls.n	1ef54 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1ef88:	4b15      	ldr	r3, [pc, #84]	; (1efe0 <mmc_cmd8+0x120>)
   1ef8a:	681b      	ldr	r3, [r3, #0]
   1ef8c:	68fa      	ldr	r2, [r7, #12]
   1ef8e:	0852      	lsrs	r2, r2, #1
   1ef90:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ef92:	e014      	b.n	1efbe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1ef94:	230c      	movs	r3, #12
   1ef96:	18fb      	adds	r3, r7, r3
   1ef98:	0018      	movs	r0, r3
   1ef9a:	4b10      	ldr	r3, [pc, #64]	; (1efdc <mmc_cmd8+0x11c>)
   1ef9c:	4798      	blx	r3
   1ef9e:	0003      	movs	r3, r0
   1efa0:	001a      	movs	r2, r3
   1efa2:	2301      	movs	r3, #1
   1efa4:	4053      	eors	r3, r2
   1efa6:	b2db      	uxtb	r3, r3
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	d001      	beq.n	1efb0 <mmc_cmd8+0xf0>
			return false;
   1efac:	2300      	movs	r3, #0
   1efae:	e00c      	b.n	1efca <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1efb0:	2316      	movs	r3, #22
   1efb2:	18fb      	adds	r3, r7, r3
   1efb4:	881a      	ldrh	r2, [r3, #0]
   1efb6:	2316      	movs	r3, #22
   1efb8:	18fb      	adds	r3, r7, r3
   1efba:	3201      	adds	r2, #1
   1efbc:	801a      	strh	r2, [r3, #0]
   1efbe:	2316      	movs	r3, #22
   1efc0:	18fb      	adds	r3, r7, r3
   1efc2:	881b      	ldrh	r3, [r3, #0]
   1efc4:	2b7f      	cmp	r3, #127	; 0x7f
   1efc6:	d9e5      	bls.n	1ef94 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1efc8:	2301      	movs	r3, #1
}
   1efca:	0018      	movs	r0, r3
   1efcc:	46bd      	mov	sp, r7
   1efce:	b007      	add	sp, #28
   1efd0:	bd90      	pop	{r4, r7, pc}
   1efd2:	46c0      	nop			; (mov r8, r8)
   1efd4:	00081108 	.word	0x00081108
   1efd8:	00020759 	.word	0x00020759
   1efdc:	00020985 	.word	0x00020985
   1efe0:	2000423c 	.word	0x2000423c
   1efe4:	0001eb59 	.word	0x0001eb59
   1efe8:	00000fff 	.word	0x00000fff

0001efec <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1efec:	b590      	push	{r4, r7, lr}
   1efee:	b083      	sub	sp, #12
   1eff0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1eff2:	4b15      	ldr	r3, [pc, #84]	; (1f048 <sd_mmc_cmd9_spi+0x5c>)
   1eff4:	681b      	ldr	r3, [r3, #0]
   1eff6:	891b      	ldrh	r3, [r3, #8]
   1eff8:	0419      	lsls	r1, r3, #16
   1effa:	4814      	ldr	r0, [pc, #80]	; (1f04c <sd_mmc_cmd9_spi+0x60>)
   1effc:	2301      	movs	r3, #1
   1effe:	9300      	str	r3, [sp, #0]
   1f000:	2301      	movs	r3, #1
   1f002:	2210      	movs	r2, #16
   1f004:	4c12      	ldr	r4, [pc, #72]	; (1f050 <sd_mmc_cmd9_spi+0x64>)
   1f006:	47a0      	blx	r4
   1f008:	0003      	movs	r3, r0
   1f00a:	001a      	movs	r2, r3
   1f00c:	2301      	movs	r3, #1
   1f00e:	4053      	eors	r3, r2
   1f010:	b2db      	uxtb	r3, r3
   1f012:	2b00      	cmp	r3, #0
   1f014:	d001      	beq.n	1f01a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f016:	2300      	movs	r3, #0
   1f018:	e012      	b.n	1f040 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f01a:	4b0b      	ldr	r3, [pc, #44]	; (1f048 <sd_mmc_cmd9_spi+0x5c>)
   1f01c:	681b      	ldr	r3, [r3, #0]
   1f01e:	330e      	adds	r3, #14
   1f020:	2101      	movs	r1, #1
   1f022:	0018      	movs	r0, r3
   1f024:	4b0b      	ldr	r3, [pc, #44]	; (1f054 <sd_mmc_cmd9_spi+0x68>)
   1f026:	4798      	blx	r3
   1f028:	0003      	movs	r3, r0
   1f02a:	001a      	movs	r2, r3
   1f02c:	2301      	movs	r3, #1
   1f02e:	4053      	eors	r3, r2
   1f030:	b2db      	uxtb	r3, r3
   1f032:	2b00      	cmp	r3, #0
   1f034:	d001      	beq.n	1f03a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f036:	2300      	movs	r3, #0
   1f038:	e002      	b.n	1f040 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f03a:	4b07      	ldr	r3, [pc, #28]	; (1f058 <sd_mmc_cmd9_spi+0x6c>)
   1f03c:	4798      	blx	r3
   1f03e:	0003      	movs	r3, r0
}
   1f040:	0018      	movs	r0, r3
   1f042:	46bd      	mov	sp, r7
   1f044:	b001      	add	sp, #4
   1f046:	bd90      	pop	{r4, r7, pc}
   1f048:	2000423c 	.word	0x2000423c
   1f04c:	00081109 	.word	0x00081109
   1f050:	00020759 	.word	0x00020759
   1f054:	00020a29 	.word	0x00020a29
   1f058:	00020acd 	.word	0x00020acd

0001f05c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f05c:	b5b0      	push	{r4, r5, r7, lr}
   1f05e:	b084      	sub	sp, #16
   1f060:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f062:	4b45      	ldr	r3, [pc, #276]	; (1f178 <mmc_decode_csd+0x11c>)
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	330e      	adds	r3, #14
   1f068:	0018      	movs	r0, r3
   1f06a:	2304      	movs	r3, #4
   1f06c:	227a      	movs	r2, #122	; 0x7a
   1f06e:	2180      	movs	r1, #128	; 0x80
   1f070:	4c42      	ldr	r4, [pc, #264]	; (1f17c <mmc_decode_csd+0x120>)
   1f072:	47a0      	blx	r4
   1f074:	0003      	movs	r3, r0
   1f076:	2b02      	cmp	r3, #2
   1f078:	d011      	beq.n	1f09e <mmc_decode_csd+0x42>
   1f07a:	d802      	bhi.n	1f082 <mmc_decode_csd+0x26>
   1f07c:	2b01      	cmp	r3, #1
   1f07e:	d009      	beq.n	1f094 <mmc_decode_csd+0x38>
   1f080:	e003      	b.n	1f08a <mmc_decode_csd+0x2e>
   1f082:	2b03      	cmp	r3, #3
   1f084:	d010      	beq.n	1f0a8 <mmc_decode_csd+0x4c>
   1f086:	2b04      	cmp	r3, #4
   1f088:	d013      	beq.n	1f0b2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f08a:	4b3b      	ldr	r3, [pc, #236]	; (1f178 <mmc_decode_csd+0x11c>)
   1f08c:	681b      	ldr	r3, [r3, #0]
   1f08e:	2212      	movs	r2, #18
   1f090:	731a      	strb	r2, [r3, #12]
		break;
   1f092:	e013      	b.n	1f0bc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f094:	4b38      	ldr	r3, [pc, #224]	; (1f178 <mmc_decode_csd+0x11c>)
   1f096:	681b      	ldr	r3, [r3, #0]
   1f098:	2214      	movs	r2, #20
   1f09a:	731a      	strb	r2, [r3, #12]
		break;
   1f09c:	e00e      	b.n	1f0bc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f09e:	4b36      	ldr	r3, [pc, #216]	; (1f178 <mmc_decode_csd+0x11c>)
   1f0a0:	681b      	ldr	r3, [r3, #0]
   1f0a2:	2222      	movs	r2, #34	; 0x22
   1f0a4:	731a      	strb	r2, [r3, #12]
		break;
   1f0a6:	e009      	b.n	1f0bc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f0a8:	4b33      	ldr	r3, [pc, #204]	; (1f178 <mmc_decode_csd+0x11c>)
   1f0aa:	681b      	ldr	r3, [r3, #0]
   1f0ac:	2230      	movs	r2, #48	; 0x30
   1f0ae:	731a      	strb	r2, [r3, #12]
		break;
   1f0b0:	e004      	b.n	1f0bc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f0b2:	4b31      	ldr	r3, [pc, #196]	; (1f178 <mmc_decode_csd+0x11c>)
   1f0b4:	681b      	ldr	r3, [r3, #0]
   1f0b6:	2240      	movs	r2, #64	; 0x40
   1f0b8:	731a      	strb	r2, [r3, #12]
		break;
   1f0ba:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f0bc:	4b2e      	ldr	r3, [pc, #184]	; (1f178 <mmc_decode_csd+0x11c>)
   1f0be:	681b      	ldr	r3, [r3, #0]
   1f0c0:	330e      	adds	r3, #14
   1f0c2:	0018      	movs	r0, r3
   1f0c4:	2308      	movs	r3, #8
   1f0c6:	2260      	movs	r2, #96	; 0x60
   1f0c8:	2180      	movs	r1, #128	; 0x80
   1f0ca:	4c2c      	ldr	r4, [pc, #176]	; (1f17c <mmc_decode_csd+0x120>)
   1f0cc:	47a0      	blx	r4
   1f0ce:	0003      	movs	r3, r0
   1f0d0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f0d2:	68fb      	ldr	r3, [r7, #12]
   1f0d4:	2207      	movs	r2, #7
   1f0d6:	401a      	ands	r2, r3
   1f0d8:	4b29      	ldr	r3, [pc, #164]	; (1f180 <mmc_decode_csd+0x124>)
   1f0da:	0092      	lsls	r2, r2, #2
   1f0dc:	58d3      	ldr	r3, [r2, r3]
   1f0de:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f0e0:	68fb      	ldr	r3, [r7, #12]
   1f0e2:	08db      	lsrs	r3, r3, #3
   1f0e4:	220f      	movs	r2, #15
   1f0e6:	401a      	ands	r2, r3
   1f0e8:	4b26      	ldr	r3, [pc, #152]	; (1f184 <mmc_decode_csd+0x128>)
   1f0ea:	0092      	lsls	r2, r2, #2
   1f0ec:	58d3      	ldr	r3, [r2, r3]
   1f0ee:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f0f0:	4b21      	ldr	r3, [pc, #132]	; (1f178 <mmc_decode_csd+0x11c>)
   1f0f2:	681b      	ldr	r3, [r3, #0]
   1f0f4:	68ba      	ldr	r2, [r7, #8]
   1f0f6:	6879      	ldr	r1, [r7, #4]
   1f0f8:	434a      	muls	r2, r1
   1f0fa:	21fa      	movs	r1, #250	; 0xfa
   1f0fc:	0089      	lsls	r1, r1, #2
   1f0fe:	434a      	muls	r2, r1
   1f100:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f102:	4b1d      	ldr	r3, [pc, #116]	; (1f178 <mmc_decode_csd+0x11c>)
   1f104:	681b      	ldr	r3, [r3, #0]
   1f106:	330e      	adds	r3, #14
   1f108:	0018      	movs	r0, r3
   1f10a:	230c      	movs	r3, #12
   1f10c:	223e      	movs	r2, #62	; 0x3e
   1f10e:	2180      	movs	r1, #128	; 0x80
   1f110:	4c1a      	ldr	r4, [pc, #104]	; (1f17c <mmc_decode_csd+0x120>)
   1f112:	47a0      	blx	r4
   1f114:	0002      	movs	r2, r0
   1f116:	4b1c      	ldr	r3, [pc, #112]	; (1f188 <mmc_decode_csd+0x12c>)
   1f118:	429a      	cmp	r2, r3
   1f11a:	d028      	beq.n	1f16e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f11c:	4b16      	ldr	r3, [pc, #88]	; (1f178 <mmc_decode_csd+0x11c>)
   1f11e:	681b      	ldr	r3, [r3, #0]
   1f120:	330e      	adds	r3, #14
   1f122:	0018      	movs	r0, r3
   1f124:	230c      	movs	r3, #12
   1f126:	223e      	movs	r2, #62	; 0x3e
   1f128:	2180      	movs	r1, #128	; 0x80
   1f12a:	4c14      	ldr	r4, [pc, #80]	; (1f17c <mmc_decode_csd+0x120>)
   1f12c:	47a0      	blx	r4
   1f12e:	0003      	movs	r3, r0
   1f130:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f132:	4b11      	ldr	r3, [pc, #68]	; (1f178 <mmc_decode_csd+0x11c>)
   1f134:	681b      	ldr	r3, [r3, #0]
   1f136:	330e      	adds	r3, #14
   1f138:	0018      	movs	r0, r3
   1f13a:	2303      	movs	r3, #3
   1f13c:	222f      	movs	r2, #47	; 0x2f
   1f13e:	2180      	movs	r1, #128	; 0x80
   1f140:	4d0e      	ldr	r5, [pc, #56]	; (1f17c <mmc_decode_csd+0x120>)
   1f142:	47a8      	blx	r5
   1f144:	0003      	movs	r3, r0
   1f146:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f148:	409c      	lsls	r4, r3
   1f14a:	0023      	movs	r3, r4
   1f14c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f14e:	4b0a      	ldr	r3, [pc, #40]	; (1f178 <mmc_decode_csd+0x11c>)
   1f150:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f152:	4b09      	ldr	r3, [pc, #36]	; (1f178 <mmc_decode_csd+0x11c>)
   1f154:	681b      	ldr	r3, [r3, #0]
   1f156:	330e      	adds	r3, #14
   1f158:	0018      	movs	r0, r3
   1f15a:	2304      	movs	r3, #4
   1f15c:	2250      	movs	r2, #80	; 0x50
   1f15e:	2180      	movs	r1, #128	; 0x80
   1f160:	4d06      	ldr	r5, [pc, #24]	; (1f17c <mmc_decode_csd+0x120>)
   1f162:	47a8      	blx	r5
   1f164:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f166:	683b      	ldr	r3, [r7, #0]
   1f168:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f16a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f16c:	6063      	str	r3, [r4, #4]
	}
}
   1f16e:	46c0      	nop			; (mov r8, r8)
   1f170:	46bd      	mov	sp, r7
   1f172:	b004      	add	sp, #16
   1f174:	bdb0      	pop	{r4, r5, r7, pc}
   1f176:	46c0      	nop			; (mov r8, r8)
   1f178:	2000423c 	.word	0x2000423c
   1f17c:	0001eb59 	.word	0x0001eb59
   1f180:	00039cf4 	.word	0x00039cf4
   1f184:	00039d50 	.word	0x00039d50
   1f188:	00000fff 	.word	0x00000fff

0001f18c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f18c:	b5b0      	push	{r4, r5, r7, lr}
   1f18e:	b084      	sub	sp, #16
   1f190:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f192:	4b35      	ldr	r3, [pc, #212]	; (1f268 <sd_decode_csd+0xdc>)
   1f194:	681b      	ldr	r3, [r3, #0]
   1f196:	330e      	adds	r3, #14
   1f198:	0018      	movs	r0, r3
   1f19a:	2308      	movs	r3, #8
   1f19c:	2260      	movs	r2, #96	; 0x60
   1f19e:	2180      	movs	r1, #128	; 0x80
   1f1a0:	4c32      	ldr	r4, [pc, #200]	; (1f26c <sd_decode_csd+0xe0>)
   1f1a2:	47a0      	blx	r4
   1f1a4:	0003      	movs	r3, r0
   1f1a6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f1a8:	68fb      	ldr	r3, [r7, #12]
   1f1aa:	2207      	movs	r2, #7
   1f1ac:	401a      	ands	r2, r3
   1f1ae:	4b30      	ldr	r3, [pc, #192]	; (1f270 <sd_decode_csd+0xe4>)
   1f1b0:	0092      	lsls	r2, r2, #2
   1f1b2:	58d3      	ldr	r3, [r2, r3]
   1f1b4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f1b6:	68fb      	ldr	r3, [r7, #12]
   1f1b8:	08db      	lsrs	r3, r3, #3
   1f1ba:	220f      	movs	r2, #15
   1f1bc:	401a      	ands	r2, r3
   1f1be:	4b2d      	ldr	r3, [pc, #180]	; (1f274 <sd_decode_csd+0xe8>)
   1f1c0:	0092      	lsls	r2, r2, #2
   1f1c2:	58d3      	ldr	r3, [r2, r3]
   1f1c4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f1c6:	4b28      	ldr	r3, [pc, #160]	; (1f268 <sd_decode_csd+0xdc>)
   1f1c8:	681b      	ldr	r3, [r3, #0]
   1f1ca:	68ba      	ldr	r2, [r7, #8]
   1f1cc:	6879      	ldr	r1, [r7, #4]
   1f1ce:	434a      	muls	r2, r1
   1f1d0:	21fa      	movs	r1, #250	; 0xfa
   1f1d2:	0089      	lsls	r1, r1, #2
   1f1d4:	434a      	muls	r2, r1
   1f1d6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f1d8:	4b23      	ldr	r3, [pc, #140]	; (1f268 <sd_decode_csd+0xdc>)
   1f1da:	681b      	ldr	r3, [r3, #0]
   1f1dc:	330e      	adds	r3, #14
   1f1de:	0018      	movs	r0, r3
   1f1e0:	2302      	movs	r3, #2
   1f1e2:	227e      	movs	r2, #126	; 0x7e
   1f1e4:	2180      	movs	r1, #128	; 0x80
   1f1e6:	4c21      	ldr	r4, [pc, #132]	; (1f26c <sd_decode_csd+0xe0>)
   1f1e8:	47a0      	blx	r4
   1f1ea:	1e03      	subs	r3, r0, #0
   1f1ec:	d00f      	beq.n	1f20e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f1ee:	4b1e      	ldr	r3, [pc, #120]	; (1f268 <sd_decode_csd+0xdc>)
   1f1f0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f1f2:	4b1d      	ldr	r3, [pc, #116]	; (1f268 <sd_decode_csd+0xdc>)
   1f1f4:	681b      	ldr	r3, [r3, #0]
   1f1f6:	330e      	adds	r3, #14
   1f1f8:	0018      	movs	r0, r3
   1f1fa:	2316      	movs	r3, #22
   1f1fc:	2230      	movs	r2, #48	; 0x30
   1f1fe:	2180      	movs	r1, #128	; 0x80
   1f200:	4d1a      	ldr	r5, [pc, #104]	; (1f26c <sd_decode_csd+0xe0>)
   1f202:	47a8      	blx	r5
   1f204:	0003      	movs	r3, r0
				* 512;
   1f206:	3301      	adds	r3, #1
   1f208:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f20a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f20c:	e028      	b.n	1f260 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f20e:	4b16      	ldr	r3, [pc, #88]	; (1f268 <sd_decode_csd+0xdc>)
   1f210:	681b      	ldr	r3, [r3, #0]
   1f212:	330e      	adds	r3, #14
   1f214:	0018      	movs	r0, r3
   1f216:	230c      	movs	r3, #12
   1f218:	223e      	movs	r2, #62	; 0x3e
   1f21a:	2180      	movs	r1, #128	; 0x80
   1f21c:	4c13      	ldr	r4, [pc, #76]	; (1f26c <sd_decode_csd+0xe0>)
   1f21e:	47a0      	blx	r4
   1f220:	0003      	movs	r3, r0
   1f222:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f224:	4b10      	ldr	r3, [pc, #64]	; (1f268 <sd_decode_csd+0xdc>)
   1f226:	681b      	ldr	r3, [r3, #0]
   1f228:	330e      	adds	r3, #14
   1f22a:	0018      	movs	r0, r3
   1f22c:	2303      	movs	r3, #3
   1f22e:	222f      	movs	r2, #47	; 0x2f
   1f230:	2180      	movs	r1, #128	; 0x80
   1f232:	4d0e      	ldr	r5, [pc, #56]	; (1f26c <sd_decode_csd+0xe0>)
   1f234:	47a8      	blx	r5
   1f236:	0003      	movs	r3, r0
   1f238:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f23a:	409c      	lsls	r4, r3
   1f23c:	0023      	movs	r3, r4
   1f23e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f240:	4b09      	ldr	r3, [pc, #36]	; (1f268 <sd_decode_csd+0xdc>)
   1f242:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f244:	4b08      	ldr	r3, [pc, #32]	; (1f268 <sd_decode_csd+0xdc>)
   1f246:	681b      	ldr	r3, [r3, #0]
   1f248:	330e      	adds	r3, #14
   1f24a:	0018      	movs	r0, r3
   1f24c:	2304      	movs	r3, #4
   1f24e:	2250      	movs	r2, #80	; 0x50
   1f250:	2180      	movs	r1, #128	; 0x80
   1f252:	4d06      	ldr	r5, [pc, #24]	; (1f26c <sd_decode_csd+0xe0>)
   1f254:	47a8      	blx	r5
   1f256:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f258:	683b      	ldr	r3, [r7, #0]
   1f25a:	4093      	lsls	r3, r2
				/ 1024;
   1f25c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f25e:	6063      	str	r3, [r4, #4]
}
   1f260:	46c0      	nop			; (mov r8, r8)
   1f262:	46bd      	mov	sp, r7
   1f264:	b004      	add	sp, #16
   1f266:	bdb0      	pop	{r4, r5, r7, pc}
   1f268:	2000423c 	.word	0x2000423c
   1f26c:	0001eb59 	.word	0x0001eb59
   1f270:	00039cf4 	.word	0x00039cf4
   1f274:	00039d10 	.word	0x00039d10

0001f278 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f278:	b580      	push	{r7, lr}
   1f27a:	b082      	sub	sp, #8
   1f27c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f27e:	4b11      	ldr	r3, [pc, #68]	; (1f2c4 <sd_mmc_cmd13+0x4c>)
   1f280:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f282:	4b11      	ldr	r3, [pc, #68]	; (1f2c8 <sd_mmc_cmd13+0x50>)
   1f284:	2100      	movs	r1, #0
   1f286:	0018      	movs	r0, r3
   1f288:	4b10      	ldr	r3, [pc, #64]	; (1f2cc <sd_mmc_cmd13+0x54>)
   1f28a:	4798      	blx	r3
   1f28c:	0003      	movs	r3, r0
   1f28e:	001a      	movs	r2, r3
   1f290:	2301      	movs	r3, #1
   1f292:	4053      	eors	r3, r2
   1f294:	b2db      	uxtb	r3, r3
   1f296:	2b00      	cmp	r3, #0
   1f298:	d001      	beq.n	1f29e <sd_mmc_cmd13+0x26>
				return false;
   1f29a:	2300      	movs	r3, #0
   1f29c:	e00e      	b.n	1f2bc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f29e:	4b0c      	ldr	r3, [pc, #48]	; (1f2d0 <sd_mmc_cmd13+0x58>)
   1f2a0:	4798      	blx	r3
   1f2a2:	0002      	movs	r2, r0
   1f2a4:	23ff      	movs	r3, #255	; 0xff
   1f2a6:	4013      	ands	r3, r2
   1f2a8:	d006      	beq.n	1f2b8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f2aa:	687b      	ldr	r3, [r7, #4]
   1f2ac:	1e5a      	subs	r2, r3, #1
   1f2ae:	607a      	str	r2, [r7, #4]
   1f2b0:	2b00      	cmp	r3, #0
   1f2b2:	d1e6      	bne.n	1f282 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f2b4:	2300      	movs	r3, #0
   1f2b6:	e001      	b.n	1f2bc <sd_mmc_cmd13+0x44>
				break;
   1f2b8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f2ba:	2301      	movs	r3, #1
}
   1f2bc:	0018      	movs	r0, r3
   1f2be:	46bd      	mov	sp, r7
   1f2c0:	b002      	add	sp, #8
   1f2c2:	bd80      	pop	{r7, pc}
   1f2c4:	00030d40 	.word	0x00030d40
   1f2c8:	00001b0d 	.word	0x00001b0d
   1f2cc:	00020731 	.word	0x00020731
   1f2d0:	00020971 	.word	0x00020971

0001f2d4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f2d4:	b590      	push	{r4, r7, lr}
   1f2d6:	b085      	sub	sp, #20
   1f2d8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f2da:	4b38      	ldr	r3, [pc, #224]	; (1f3bc <sd_acmd51+0xe8>)
   1f2dc:	681b      	ldr	r3, [r3, #0]
   1f2de:	891b      	ldrh	r3, [r3, #8]
   1f2e0:	041b      	lsls	r3, r3, #16
   1f2e2:	4a37      	ldr	r2, [pc, #220]	; (1f3c0 <sd_acmd51+0xec>)
   1f2e4:	0019      	movs	r1, r3
   1f2e6:	0010      	movs	r0, r2
   1f2e8:	4b36      	ldr	r3, [pc, #216]	; (1f3c4 <sd_acmd51+0xf0>)
   1f2ea:	4798      	blx	r3
   1f2ec:	0003      	movs	r3, r0
   1f2ee:	001a      	movs	r2, r3
   1f2f0:	2301      	movs	r3, #1
   1f2f2:	4053      	eors	r3, r2
   1f2f4:	b2db      	uxtb	r3, r3
   1f2f6:	2b00      	cmp	r3, #0
   1f2f8:	d001      	beq.n	1f2fe <sd_acmd51+0x2a>
		return false;
   1f2fa:	2300      	movs	r3, #0
   1f2fc:	e059      	b.n	1f3b2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f2fe:	4832      	ldr	r0, [pc, #200]	; (1f3c8 <sd_acmd51+0xf4>)
   1f300:	2301      	movs	r3, #1
   1f302:	9300      	str	r3, [sp, #0]
   1f304:	2301      	movs	r3, #1
   1f306:	2208      	movs	r2, #8
   1f308:	2100      	movs	r1, #0
   1f30a:	4c30      	ldr	r4, [pc, #192]	; (1f3cc <sd_acmd51+0xf8>)
   1f30c:	47a0      	blx	r4
   1f30e:	0003      	movs	r3, r0
   1f310:	001a      	movs	r2, r3
   1f312:	2301      	movs	r3, #1
   1f314:	4053      	eors	r3, r2
   1f316:	b2db      	uxtb	r3, r3
   1f318:	2b00      	cmp	r3, #0
   1f31a:	d001      	beq.n	1f320 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f31c:	2300      	movs	r3, #0
   1f31e:	e048      	b.n	1f3b2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f320:	003b      	movs	r3, r7
   1f322:	2101      	movs	r1, #1
   1f324:	0018      	movs	r0, r3
   1f326:	4b2a      	ldr	r3, [pc, #168]	; (1f3d0 <sd_acmd51+0xfc>)
   1f328:	4798      	blx	r3
   1f32a:	0003      	movs	r3, r0
   1f32c:	001a      	movs	r2, r3
   1f32e:	2301      	movs	r3, #1
   1f330:	4053      	eors	r3, r2
   1f332:	b2db      	uxtb	r3, r3
   1f334:	2b00      	cmp	r3, #0
   1f336:	d001      	beq.n	1f33c <sd_acmd51+0x68>
		return false;
   1f338:	2300      	movs	r3, #0
   1f33a:	e03a      	b.n	1f3b2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f33c:	4b25      	ldr	r3, [pc, #148]	; (1f3d4 <sd_acmd51+0x100>)
   1f33e:	4798      	blx	r3
   1f340:	0003      	movs	r3, r0
   1f342:	001a      	movs	r2, r3
   1f344:	2301      	movs	r3, #1
   1f346:	4053      	eors	r3, r2
   1f348:	b2db      	uxtb	r3, r3
   1f34a:	2b00      	cmp	r3, #0
   1f34c:	d001      	beq.n	1f352 <sd_acmd51+0x7e>
		return false;
   1f34e:	2300      	movs	r3, #0
   1f350:	e02f      	b.n	1f3b2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f352:	0038      	movs	r0, r7
   1f354:	2304      	movs	r3, #4
   1f356:	2238      	movs	r2, #56	; 0x38
   1f358:	2140      	movs	r1, #64	; 0x40
   1f35a:	4c1f      	ldr	r4, [pc, #124]	; (1f3d8 <sd_acmd51+0x104>)
   1f35c:	47a0      	blx	r4
   1f35e:	0003      	movs	r3, r0
   1f360:	2b01      	cmp	r3, #1
   1f362:	d008      	beq.n	1f376 <sd_acmd51+0xa2>
   1f364:	d302      	bcc.n	1f36c <sd_acmd51+0x98>
   1f366:	2b02      	cmp	r3, #2
   1f368:	d00a      	beq.n	1f380 <sd_acmd51+0xac>
   1f36a:	e01c      	b.n	1f3a6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f36c:	4b13      	ldr	r3, [pc, #76]	; (1f3bc <sd_acmd51+0xe8>)
   1f36e:	681b      	ldr	r3, [r3, #0]
   1f370:	2210      	movs	r2, #16
   1f372:	731a      	strb	r2, [r3, #12]
		break;
   1f374:	e01c      	b.n	1f3b0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f376:	4b11      	ldr	r3, [pc, #68]	; (1f3bc <sd_acmd51+0xe8>)
   1f378:	681b      	ldr	r3, [r3, #0]
   1f37a:	221a      	movs	r2, #26
   1f37c:	731a      	strb	r2, [r3, #12]
		break;
   1f37e:	e017      	b.n	1f3b0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f380:	0038      	movs	r0, r7
   1f382:	2301      	movs	r3, #1
   1f384:	222f      	movs	r2, #47	; 0x2f
   1f386:	2140      	movs	r1, #64	; 0x40
   1f388:	4c13      	ldr	r4, [pc, #76]	; (1f3d8 <sd_acmd51+0x104>)
   1f38a:	47a0      	blx	r4
   1f38c:	0003      	movs	r3, r0
   1f38e:	2b01      	cmp	r3, #1
   1f390:	d104      	bne.n	1f39c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f392:	4b0a      	ldr	r3, [pc, #40]	; (1f3bc <sd_acmd51+0xe8>)
   1f394:	681b      	ldr	r3, [r3, #0]
   1f396:	2230      	movs	r2, #48	; 0x30
   1f398:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f39a:	e009      	b.n	1f3b0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f39c:	4b07      	ldr	r3, [pc, #28]	; (1f3bc <sd_acmd51+0xe8>)
   1f39e:	681b      	ldr	r3, [r3, #0]
   1f3a0:	2220      	movs	r2, #32
   1f3a2:	731a      	strb	r2, [r3, #12]
		break;
   1f3a4:	e004      	b.n	1f3b0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f3a6:	4b05      	ldr	r3, [pc, #20]	; (1f3bc <sd_acmd51+0xe8>)
   1f3a8:	681b      	ldr	r3, [r3, #0]
   1f3aa:	2210      	movs	r2, #16
   1f3ac:	731a      	strb	r2, [r3, #12]
		break;
   1f3ae:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f3b0:	2301      	movs	r3, #1
}
   1f3b2:	0018      	movs	r0, r3
   1f3b4:	46bd      	mov	sp, r7
   1f3b6:	b003      	add	sp, #12
   1f3b8:	bd90      	pop	{r4, r7, pc}
   1f3ba:	46c0      	nop			; (mov r8, r8)
   1f3bc:	2000423c 	.word	0x2000423c
   1f3c0:	00001137 	.word	0x00001137
   1f3c4:	00020731 	.word	0x00020731
   1f3c8:	00081133 	.word	0x00081133
   1f3cc:	00020759 	.word	0x00020759
   1f3d0:	00020a29 	.word	0x00020a29
   1f3d4:	00020acd 	.word	0x00020acd
   1f3d8:	0001eb59 	.word	0x0001eb59

0001f3dc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f3dc:	b580      	push	{r7, lr}
   1f3de:	b082      	sub	sp, #8
   1f3e0:	af00      	add	r7, sp, #0
   1f3e2:	0002      	movs	r2, r0
   1f3e4:	1dfb      	adds	r3, r7, #7
   1f3e6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f3e8:	1dfb      	adds	r3, r7, #7
   1f3ea:	781b      	ldrb	r3, [r3, #0]
   1f3ec:	2b00      	cmp	r3, #0
   1f3ee:	d001      	beq.n	1f3f4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f3f0:	2304      	movs	r3, #4
   1f3f2:	e047      	b.n	1f484 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f3f4:	1dfb      	adds	r3, r7, #7
   1f3f6:	781b      	ldrb	r3, [r3, #0]
   1f3f8:	4a24      	ldr	r2, [pc, #144]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f3fa:	015b      	lsls	r3, r3, #5
   1f3fc:	18d3      	adds	r3, r2, r3
   1f3fe:	330a      	adds	r3, #10
   1f400:	781b      	ldrb	r3, [r3, #0]
   1f402:	2b04      	cmp	r3, #4
   1f404:	d008      	beq.n	1f418 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f406:	1dfb      	adds	r3, r7, #7
   1f408:	781b      	ldrb	r3, [r3, #0]
   1f40a:	4a20      	ldr	r2, [pc, #128]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f40c:	015b      	lsls	r3, r3, #5
   1f40e:	18d3      	adds	r3, r2, r3
   1f410:	330a      	adds	r3, #10
   1f412:	781b      	ldrb	r3, [r3, #0]
   1f414:	2b03      	cmp	r3, #3
   1f416:	d11d      	bne.n	1f454 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f418:	1dfb      	adds	r3, r7, #7
   1f41a:	781b      	ldrb	r3, [r3, #0]
   1f41c:	4a1b      	ldr	r2, [pc, #108]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f41e:	015b      	lsls	r3, r3, #5
   1f420:	18d3      	adds	r3, r2, r3
   1f422:	330a      	adds	r3, #10
   1f424:	2202      	movs	r2, #2
   1f426:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f428:	1dfb      	adds	r3, r7, #7
   1f42a:	781a      	ldrb	r2, [r3, #0]
   1f42c:	4b17      	ldr	r3, [pc, #92]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f42e:	0152      	lsls	r2, r2, #5
   1f430:	4917      	ldr	r1, [pc, #92]	; (1f490 <sd_mmc_select_slot+0xb4>)
   1f432:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f434:	1dfb      	adds	r3, r7, #7
   1f436:	781b      	ldrb	r3, [r3, #0]
   1f438:	4a14      	ldr	r2, [pc, #80]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f43a:	015b      	lsls	r3, r3, #5
   1f43c:	18d3      	adds	r3, r2, r3
   1f43e:	330d      	adds	r3, #13
   1f440:	2201      	movs	r2, #1
   1f442:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f444:	1dfb      	adds	r3, r7, #7
   1f446:	781b      	ldrb	r3, [r3, #0]
   1f448:	4a10      	ldr	r2, [pc, #64]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f44a:	015b      	lsls	r3, r3, #5
   1f44c:	18d3      	adds	r3, r2, r3
   1f44e:	331e      	adds	r3, #30
   1f450:	2200      	movs	r2, #0
   1f452:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f454:	4b0f      	ldr	r3, [pc, #60]	; (1f494 <sd_mmc_select_slot+0xb8>)
   1f456:	1dfa      	adds	r2, r7, #7
   1f458:	7812      	ldrb	r2, [r2, #0]
   1f45a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f45c:	1dfb      	adds	r3, r7, #7
   1f45e:	781b      	ldrb	r3, [r3, #0]
   1f460:	015a      	lsls	r2, r3, #5
   1f462:	4b0a      	ldr	r3, [pc, #40]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f464:	18d2      	adds	r2, r2, r3
   1f466:	4b0c      	ldr	r3, [pc, #48]	; (1f498 <sd_mmc_select_slot+0xbc>)
   1f468:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f46a:	4b0c      	ldr	r3, [pc, #48]	; (1f49c <sd_mmc_select_slot+0xc0>)
   1f46c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f46e:	1dfb      	adds	r3, r7, #7
   1f470:	781b      	ldrb	r3, [r3, #0]
   1f472:	4a06      	ldr	r2, [pc, #24]	; (1f48c <sd_mmc_select_slot+0xb0>)
   1f474:	015b      	lsls	r3, r3, #5
   1f476:	18d3      	adds	r3, r2, r3
   1f478:	330a      	adds	r3, #10
   1f47a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f47c:	3b02      	subs	r3, #2
   1f47e:	425a      	negs	r2, r3
   1f480:	4153      	adcs	r3, r2
   1f482:	b2db      	uxtb	r3, r3
}
   1f484:	0018      	movs	r0, r3
   1f486:	46bd      	mov	sp, r7
   1f488:	b002      	add	sp, #8
   1f48a:	bd80      	pop	{r7, pc}
   1f48c:	20004218 	.word	0x20004218
   1f490:	00061a80 	.word	0x00061a80
   1f494:	20004238 	.word	0x20004238
   1f498:	2000423c 	.word	0x2000423c
   1f49c:	0001f4a1 	.word	0x0001f4a1

0001f4a0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f4a0:	b5b0      	push	{r4, r5, r7, lr}
   1f4a2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4a4:	4b09      	ldr	r3, [pc, #36]	; (1f4cc <sd_mmc_configure_slot+0x2c>)
   1f4a6:	7818      	ldrb	r0, [r3, #0]
   1f4a8:	4b09      	ldr	r3, [pc, #36]	; (1f4d0 <sd_mmc_configure_slot+0x30>)
   1f4aa:	681b      	ldr	r3, [r3, #0]
   1f4ac:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f4ae:	4b08      	ldr	r3, [pc, #32]	; (1f4d0 <sd_mmc_configure_slot+0x30>)
   1f4b0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4b2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f4b4:	4b06      	ldr	r3, [pc, #24]	; (1f4d0 <sd_mmc_configure_slot+0x30>)
   1f4b6:	681b      	ldr	r3, [r3, #0]
   1f4b8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f4ba:	1e5c      	subs	r4, r3, #1
   1f4bc:	41a3      	sbcs	r3, r4
   1f4be:	b2db      	uxtb	r3, r3
   1f4c0:	4c04      	ldr	r4, [pc, #16]	; (1f4d4 <sd_mmc_configure_slot+0x34>)
   1f4c2:	47a0      	blx	r4
}
   1f4c4:	46c0      	nop			; (mov r8, r8)
   1f4c6:	46bd      	mov	sp, r7
   1f4c8:	bdb0      	pop	{r4, r5, r7, pc}
   1f4ca:	46c0      	nop			; (mov r8, r8)
   1f4cc:	20004238 	.word	0x20004238
   1f4d0:	2000423c 	.word	0x2000423c
   1f4d4:	00020619 	.word	0x00020619

0001f4d8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f4d8:	b580      	push	{r7, lr}
   1f4da:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f4dc:	4b05      	ldr	r3, [pc, #20]	; (1f4f4 <sd_mmc_deselect_slot+0x1c>)
   1f4de:	781b      	ldrb	r3, [r3, #0]
   1f4e0:	2b00      	cmp	r3, #0
   1f4e2:	d104      	bne.n	1f4ee <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f4e4:	4b03      	ldr	r3, [pc, #12]	; (1f4f4 <sd_mmc_deselect_slot+0x1c>)
   1f4e6:	781b      	ldrb	r3, [r3, #0]
   1f4e8:	0018      	movs	r0, r3
   1f4ea:	4b03      	ldr	r3, [pc, #12]	; (1f4f8 <sd_mmc_deselect_slot+0x20>)
   1f4ec:	4798      	blx	r3
	}
}
   1f4ee:	46c0      	nop			; (mov r8, r8)
   1f4f0:	46bd      	mov	sp, r7
   1f4f2:	bd80      	pop	{r7, pc}
   1f4f4:	20004238 	.word	0x20004238
   1f4f8:	000206a1 	.word	0x000206a1

0001f4fc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f4fc:	b580      	push	{r7, lr}
   1f4fe:	b082      	sub	sp, #8
   1f500:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f502:	1dfb      	adds	r3, r7, #7
   1f504:	2200      	movs	r2, #0
   1f506:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f508:	4b59      	ldr	r3, [pc, #356]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f50a:	681b      	ldr	r3, [r3, #0]
   1f50c:	2201      	movs	r2, #1
   1f50e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f510:	4b57      	ldr	r3, [pc, #348]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f512:	681b      	ldr	r3, [r3, #0]
   1f514:	2200      	movs	r2, #0
   1f516:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f518:	4b55      	ldr	r3, [pc, #340]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f51a:	681b      	ldr	r3, [r3, #0]
   1f51c:	2200      	movs	r2, #0
   1f51e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f520:	4b54      	ldr	r3, [pc, #336]	; (1f674 <sd_mmc_spi_card_init+0x178>)
   1f522:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f524:	2388      	movs	r3, #136	; 0x88
   1f526:	015b      	lsls	r3, r3, #5
   1f528:	2100      	movs	r1, #0
   1f52a:	0018      	movs	r0, r3
   1f52c:	4b52      	ldr	r3, [pc, #328]	; (1f678 <sd_mmc_spi_card_init+0x17c>)
   1f52e:	4798      	blx	r3
   1f530:	0003      	movs	r3, r0
   1f532:	001a      	movs	r2, r3
   1f534:	2301      	movs	r3, #1
   1f536:	4053      	eors	r3, r2
   1f538:	b2db      	uxtb	r3, r3
   1f53a:	2b00      	cmp	r3, #0
   1f53c:	d001      	beq.n	1f542 <sd_mmc_spi_card_init+0x46>
		return false;
   1f53e:	2300      	movs	r3, #0
   1f540:	e092      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f542:	1dfb      	adds	r3, r7, #7
   1f544:	0018      	movs	r0, r3
   1f546:	4b4d      	ldr	r3, [pc, #308]	; (1f67c <sd_mmc_spi_card_init+0x180>)
   1f548:	4798      	blx	r3
   1f54a:	0003      	movs	r3, r0
   1f54c:	001a      	movs	r2, r3
   1f54e:	2301      	movs	r3, #1
   1f550:	4053      	eors	r3, r2
   1f552:	b2db      	uxtb	r3, r3
   1f554:	2b00      	cmp	r3, #0
   1f556:	d001      	beq.n	1f55c <sd_mmc_spi_card_init+0x60>
		return false;
   1f558:	2300      	movs	r3, #0
   1f55a:	e085      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f55c:	4b48      	ldr	r3, [pc, #288]	; (1f680 <sd_mmc_spi_card_init+0x184>)
   1f55e:	4798      	blx	r3
   1f560:	0003      	movs	r3, r0
   1f562:	001a      	movs	r2, r3
   1f564:	2301      	movs	r3, #1
   1f566:	4053      	eors	r3, r2
   1f568:	b2db      	uxtb	r3, r3
   1f56a:	2b00      	cmp	r3, #0
   1f56c:	d001      	beq.n	1f572 <sd_mmc_spi_card_init+0x76>
		return false;
   1f56e:	2300      	movs	r3, #0
   1f570:	e07a      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f572:	4b3f      	ldr	r3, [pc, #252]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f574:	681b      	ldr	r3, [r3, #0]
   1f576:	7adb      	ldrb	r3, [r3, #11]
   1f578:	001a      	movs	r2, r3
   1f57a:	2301      	movs	r3, #1
   1f57c:	4013      	ands	r3, r2
   1f57e:	d021      	beq.n	1f5c4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f580:	1dfb      	adds	r3, r7, #7
   1f582:	781b      	ldrb	r3, [r3, #0]
   1f584:	0018      	movs	r0, r3
   1f586:	4b3f      	ldr	r3, [pc, #252]	; (1f684 <sd_mmc_spi_card_init+0x188>)
   1f588:	4798      	blx	r3
   1f58a:	0003      	movs	r3, r0
   1f58c:	001a      	movs	r2, r3
   1f58e:	2301      	movs	r3, #1
   1f590:	4053      	eors	r3, r2
   1f592:	b2db      	uxtb	r3, r3
   1f594:	2b00      	cmp	r3, #0
   1f596:	d007      	beq.n	1f5a8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f598:	4b35      	ldr	r3, [pc, #212]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f59a:	681b      	ldr	r3, [r3, #0]
   1f59c:	2202      	movs	r2, #2
   1f59e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f5a0:	4b39      	ldr	r3, [pc, #228]	; (1f688 <sd_mmc_spi_card_init+0x18c>)
   1f5a2:	4798      	blx	r3
   1f5a4:	0003      	movs	r3, r0
   1f5a6:	e05f      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f5a8:	4b38      	ldr	r3, [pc, #224]	; (1f68c <sd_mmc_spi_card_init+0x190>)
   1f5aa:	2100      	movs	r1, #0
   1f5ac:	0018      	movs	r0, r3
   1f5ae:	4b32      	ldr	r3, [pc, #200]	; (1f678 <sd_mmc_spi_card_init+0x17c>)
   1f5b0:	4798      	blx	r3
   1f5b2:	0003      	movs	r3, r0
   1f5b4:	001a      	movs	r2, r3
   1f5b6:	2301      	movs	r3, #1
   1f5b8:	4053      	eors	r3, r2
   1f5ba:	b2db      	uxtb	r3, r3
   1f5bc:	2b00      	cmp	r3, #0
   1f5be:	d001      	beq.n	1f5c4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f5c0:	2300      	movs	r3, #0
   1f5c2:	e051      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f5c4:	4b2a      	ldr	r3, [pc, #168]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f5c6:	681b      	ldr	r3, [r3, #0]
   1f5c8:	7adb      	ldrb	r3, [r3, #11]
   1f5ca:	001a      	movs	r2, r3
   1f5cc:	2301      	movs	r3, #1
   1f5ce:	4013      	ands	r3, r2
   1f5d0:	d017      	beq.n	1f602 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f5d2:	4b2f      	ldr	r3, [pc, #188]	; (1f690 <sd_mmc_spi_card_init+0x194>)
   1f5d4:	4798      	blx	r3
   1f5d6:	0003      	movs	r3, r0
   1f5d8:	001a      	movs	r2, r3
   1f5da:	2301      	movs	r3, #1
   1f5dc:	4053      	eors	r3, r2
   1f5de:	b2db      	uxtb	r3, r3
   1f5e0:	2b00      	cmp	r3, #0
   1f5e2:	d001      	beq.n	1f5e8 <sd_mmc_spi_card_init+0xec>
			return false;
   1f5e4:	2300      	movs	r3, #0
   1f5e6:	e03f      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f5e8:	4b2a      	ldr	r3, [pc, #168]	; (1f694 <sd_mmc_spi_card_init+0x198>)
   1f5ea:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f5ec:	4b2a      	ldr	r3, [pc, #168]	; (1f698 <sd_mmc_spi_card_init+0x19c>)
   1f5ee:	4798      	blx	r3
   1f5f0:	0003      	movs	r3, r0
   1f5f2:	001a      	movs	r2, r3
   1f5f4:	2301      	movs	r3, #1
   1f5f6:	4053      	eors	r3, r2
   1f5f8:	b2db      	uxtb	r3, r3
   1f5fa:	2b00      	cmp	r3, #0
   1f5fc:	d001      	beq.n	1f602 <sd_mmc_spi_card_init+0x106>
			return false;
   1f5fe:	2300      	movs	r3, #0
   1f600:	e032      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f602:	4b1b      	ldr	r3, [pc, #108]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f604:	681b      	ldr	r3, [r3, #0]
   1f606:	7adb      	ldrb	r3, [r3, #11]
   1f608:	001a      	movs	r2, r3
   1f60a:	2301      	movs	r3, #1
   1f60c:	4013      	ands	r3, r2
   1f60e:	d016      	beq.n	1f63e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f610:	4b17      	ldr	r3, [pc, #92]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f612:	681b      	ldr	r3, [r3, #0]
   1f614:	7adb      	ldrb	r3, [r3, #11]
   1f616:	001a      	movs	r2, r3
   1f618:	2308      	movs	r3, #8
   1f61a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f61c:	d10f      	bne.n	1f63e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f61e:	2380      	movs	r3, #128	; 0x80
   1f620:	009b      	lsls	r3, r3, #2
   1f622:	4a1e      	ldr	r2, [pc, #120]	; (1f69c <sd_mmc_spi_card_init+0x1a0>)
   1f624:	0019      	movs	r1, r3
   1f626:	0010      	movs	r0, r2
   1f628:	4b13      	ldr	r3, [pc, #76]	; (1f678 <sd_mmc_spi_card_init+0x17c>)
   1f62a:	4798      	blx	r3
   1f62c:	0003      	movs	r3, r0
   1f62e:	001a      	movs	r2, r3
   1f630:	2301      	movs	r3, #1
   1f632:	4053      	eors	r3, r2
   1f634:	b2db      	uxtb	r3, r3
   1f636:	2b00      	cmp	r3, #0
   1f638:	d001      	beq.n	1f63e <sd_mmc_spi_card_init+0x142>
			return false;
   1f63a:	2300      	movs	r3, #0
   1f63c:	e014      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f63e:	4b0c      	ldr	r3, [pc, #48]	; (1f670 <sd_mmc_spi_card_init+0x174>)
   1f640:	681b      	ldr	r3, [r3, #0]
   1f642:	7adb      	ldrb	r3, [r3, #11]
   1f644:	001a      	movs	r2, r3
   1f646:	2301      	movs	r3, #1
   1f648:	4013      	ands	r3, r2
   1f64a:	d00a      	beq.n	1f662 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f64c:	4b14      	ldr	r3, [pc, #80]	; (1f6a0 <sd_mmc_spi_card_init+0x1a4>)
   1f64e:	4798      	blx	r3
   1f650:	0003      	movs	r3, r0
   1f652:	001a      	movs	r2, r3
   1f654:	2301      	movs	r3, #1
   1f656:	4053      	eors	r3, r2
   1f658:	b2db      	uxtb	r3, r3
   1f65a:	2b00      	cmp	r3, #0
   1f65c:	d001      	beq.n	1f662 <sd_mmc_spi_card_init+0x166>
			return false;
   1f65e:	2300      	movs	r3, #0
   1f660:	e002      	b.n	1f668 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f662:	4b10      	ldr	r3, [pc, #64]	; (1f6a4 <sd_mmc_spi_card_init+0x1a8>)
   1f664:	4798      	blx	r3
	return true;
   1f666:	2301      	movs	r3, #1
}
   1f668:	0018      	movs	r0, r3
   1f66a:	46bd      	mov	sp, r7
   1f66c:	b002      	add	sp, #8
   1f66e:	bd80      	pop	{r7, pc}
   1f670:	2000423c 	.word	0x2000423c
   1f674:	000206e5 	.word	0x000206e5
   1f678:	00020731 	.word	0x00020731
   1f67c:	0001ee51 	.word	0x0001ee51
   1f680:	0001ee45 	.word	0x0001ee45
   1f684:	0001ed61 	.word	0x0001ed61
   1f688:	0001f6a9 	.word	0x0001f6a9
   1f68c:	0000113b 	.word	0x0000113b
   1f690:	0001efed 	.word	0x0001efed
   1f694:	0001f18d 	.word	0x0001f18d
   1f698:	0001f2d5 	.word	0x0001f2d5
   1f69c:	00001110 	.word	0x00001110
   1f6a0:	0001f279 	.word	0x0001f279
   1f6a4:	0001f4a1 	.word	0x0001f4a1

0001f6a8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f6a8:	b580      	push	{r7, lr}
   1f6aa:	b082      	sub	sp, #8
   1f6ac:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f6ae:	2388      	movs	r3, #136	; 0x88
   1f6b0:	015b      	lsls	r3, r3, #5
   1f6b2:	2100      	movs	r1, #0
   1f6b4:	0018      	movs	r0, r3
   1f6b6:	4b32      	ldr	r3, [pc, #200]	; (1f780 <sd_mmc_spi_install_mmc+0xd8>)
   1f6b8:	4798      	blx	r3
   1f6ba:	0003      	movs	r3, r0
   1f6bc:	001a      	movs	r2, r3
   1f6be:	2301      	movs	r3, #1
   1f6c0:	4053      	eors	r3, r2
   1f6c2:	b2db      	uxtb	r3, r3
   1f6c4:	2b00      	cmp	r3, #0
   1f6c6:	d001      	beq.n	1f6cc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	e055      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f6cc:	4b2d      	ldr	r3, [pc, #180]	; (1f784 <sd_mmc_spi_install_mmc+0xdc>)
   1f6ce:	4798      	blx	r3
   1f6d0:	0003      	movs	r3, r0
   1f6d2:	001a      	movs	r2, r3
   1f6d4:	2301      	movs	r3, #1
   1f6d6:	4053      	eors	r3, r2
   1f6d8:	b2db      	uxtb	r3, r3
   1f6da:	2b00      	cmp	r3, #0
   1f6dc:	d001      	beq.n	1f6e2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f6de:	2300      	movs	r3, #0
   1f6e0:	e04a      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f6e2:	4b29      	ldr	r3, [pc, #164]	; (1f788 <sd_mmc_spi_install_mmc+0xe0>)
   1f6e4:	2100      	movs	r1, #0
   1f6e6:	0018      	movs	r0, r3
   1f6e8:	4b25      	ldr	r3, [pc, #148]	; (1f780 <sd_mmc_spi_install_mmc+0xd8>)
   1f6ea:	4798      	blx	r3
   1f6ec:	0003      	movs	r3, r0
   1f6ee:	001a      	movs	r2, r3
   1f6f0:	2301      	movs	r3, #1
   1f6f2:	4053      	eors	r3, r2
   1f6f4:	b2db      	uxtb	r3, r3
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d001      	beq.n	1f6fe <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	e03c      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f6fe:	4b23      	ldr	r3, [pc, #140]	; (1f78c <sd_mmc_spi_install_mmc+0xe4>)
   1f700:	4798      	blx	r3
   1f702:	0003      	movs	r3, r0
   1f704:	001a      	movs	r2, r3
   1f706:	2301      	movs	r3, #1
   1f708:	4053      	eors	r3, r2
   1f70a:	b2db      	uxtb	r3, r3
   1f70c:	2b00      	cmp	r3, #0
   1f70e:	d001      	beq.n	1f714 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f710:	2300      	movs	r3, #0
   1f712:	e031      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f714:	4b1e      	ldr	r3, [pc, #120]	; (1f790 <sd_mmc_spi_install_mmc+0xe8>)
   1f716:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f718:	4b1e      	ldr	r3, [pc, #120]	; (1f794 <sd_mmc_spi_install_mmc+0xec>)
   1f71a:	681b      	ldr	r3, [r3, #0]
   1f71c:	7b1b      	ldrb	r3, [r3, #12]
   1f71e:	2b3f      	cmp	r3, #63	; 0x3f
   1f720:	d90c      	bls.n	1f73c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f722:	1dfb      	adds	r3, r7, #7
   1f724:	0018      	movs	r0, r3
   1f726:	4b1c      	ldr	r3, [pc, #112]	; (1f798 <sd_mmc_spi_install_mmc+0xf0>)
   1f728:	4798      	blx	r3
   1f72a:	0003      	movs	r3, r0
   1f72c:	001a      	movs	r2, r3
   1f72e:	2301      	movs	r3, #1
   1f730:	4053      	eors	r3, r2
   1f732:	b2db      	uxtb	r3, r3
   1f734:	2b00      	cmp	r3, #0
   1f736:	d001      	beq.n	1f73c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f738:	2300      	movs	r3, #0
   1f73a:	e01d      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f73c:	2380      	movs	r3, #128	; 0x80
   1f73e:	009b      	lsls	r3, r3, #2
   1f740:	4a16      	ldr	r2, [pc, #88]	; (1f79c <sd_mmc_spi_install_mmc+0xf4>)
   1f742:	0019      	movs	r1, r3
   1f744:	0010      	movs	r0, r2
   1f746:	4b0e      	ldr	r3, [pc, #56]	; (1f780 <sd_mmc_spi_install_mmc+0xd8>)
   1f748:	4798      	blx	r3
   1f74a:	0003      	movs	r3, r0
   1f74c:	001a      	movs	r2, r3
   1f74e:	2301      	movs	r3, #1
   1f750:	4053      	eors	r3, r2
   1f752:	b2db      	uxtb	r3, r3
   1f754:	2b00      	cmp	r3, #0
   1f756:	d001      	beq.n	1f75c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f758:	2300      	movs	r3, #0
   1f75a:	e00d      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f75c:	4b10      	ldr	r3, [pc, #64]	; (1f7a0 <sd_mmc_spi_install_mmc+0xf8>)
   1f75e:	4798      	blx	r3
   1f760:	0003      	movs	r3, r0
   1f762:	001a      	movs	r2, r3
   1f764:	2301      	movs	r3, #1
   1f766:	4053      	eors	r3, r2
   1f768:	b2db      	uxtb	r3, r3
   1f76a:	2b00      	cmp	r3, #0
   1f76c:	d001      	beq.n	1f772 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f76e:	2300      	movs	r3, #0
   1f770:	e002      	b.n	1f778 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f772:	4b0c      	ldr	r3, [pc, #48]	; (1f7a4 <sd_mmc_spi_install_mmc+0xfc>)
   1f774:	4798      	blx	r3
	return true;
   1f776:	2301      	movs	r3, #1
}
   1f778:	0018      	movs	r0, r3
   1f77a:	46bd      	mov	sp, r7
   1f77c:	b002      	add	sp, #8
   1f77e:	bd80      	pop	{r7, pc}
   1f780:	00020731 	.word	0x00020731
   1f784:	0001ecb5 	.word	0x0001ecb5
   1f788:	0000113b 	.word	0x0000113b
   1f78c:	0001efed 	.word	0x0001efed
   1f790:	0001f05d 	.word	0x0001f05d
   1f794:	2000423c 	.word	0x2000423c
   1f798:	0001eec1 	.word	0x0001eec1
   1f79c:	00001110 	.word	0x00001110
   1f7a0:	0001f279 	.word	0x0001f279
   1f7a4:	0001f4a1 	.word	0x0001f4a1

0001f7a8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f7a8:	b580      	push	{r7, lr}
   1f7aa:	b082      	sub	sp, #8
   1f7ac:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f7ae:	1dfb      	adds	r3, r7, #7
   1f7b0:	2200      	movs	r2, #0
   1f7b2:	701a      	strb	r2, [r3, #0]
   1f7b4:	e00c      	b.n	1f7d0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f7b6:	1dfb      	adds	r3, r7, #7
   1f7b8:	781b      	ldrb	r3, [r3, #0]
   1f7ba:	4a0c      	ldr	r2, [pc, #48]	; (1f7ec <sd_mmc_init+0x44>)
   1f7bc:	015b      	lsls	r3, r3, #5
   1f7be:	18d3      	adds	r3, r2, r3
   1f7c0:	330a      	adds	r3, #10
   1f7c2:	2204      	movs	r2, #4
   1f7c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f7c6:	1dfb      	adds	r3, r7, #7
   1f7c8:	781a      	ldrb	r2, [r3, #0]
   1f7ca:	1dfb      	adds	r3, r7, #7
   1f7cc:	3201      	adds	r2, #1
   1f7ce:	701a      	strb	r2, [r3, #0]
   1f7d0:	1dfb      	adds	r3, r7, #7
   1f7d2:	781b      	ldrb	r3, [r3, #0]
   1f7d4:	2b00      	cmp	r3, #0
   1f7d6:	d0ee      	beq.n	1f7b6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f7d8:	4b05      	ldr	r3, [pc, #20]	; (1f7f0 <sd_mmc_init+0x48>)
   1f7da:	22ff      	movs	r2, #255	; 0xff
   1f7dc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f7de:	4b05      	ldr	r3, [pc, #20]	; (1f7f4 <sd_mmc_init+0x4c>)
   1f7e0:	4798      	blx	r3
}
   1f7e2:	46c0      	nop			; (mov r8, r8)
   1f7e4:	46bd      	mov	sp, r7
   1f7e6:	b002      	add	sp, #8
   1f7e8:	bd80      	pop	{r7, pc}
   1f7ea:	46c0      	nop			; (mov r8, r8)
   1f7ec:	20004218 	.word	0x20004218
   1f7f0:	20004238 	.word	0x20004238
   1f7f4:	00020551 	.word	0x00020551

0001f7f8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f7f8:	b590      	push	{r4, r7, lr}
   1f7fa:	b085      	sub	sp, #20
   1f7fc:	af00      	add	r7, sp, #0
   1f7fe:	0002      	movs	r2, r0
   1f800:	1dfb      	adds	r3, r7, #7
   1f802:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f804:	230f      	movs	r3, #15
   1f806:	18fc      	adds	r4, r7, r3
   1f808:	1dfb      	adds	r3, r7, #7
   1f80a:	781b      	ldrb	r3, [r3, #0]
   1f80c:	0018      	movs	r0, r3
   1f80e:	4b13      	ldr	r3, [pc, #76]	; (1f85c <sd_mmc_check+0x64>)
   1f810:	4798      	blx	r3
   1f812:	0003      	movs	r3, r0
   1f814:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f816:	230f      	movs	r3, #15
   1f818:	18fb      	adds	r3, r7, r3
   1f81a:	781b      	ldrb	r3, [r3, #0]
   1f81c:	2b01      	cmp	r3, #1
   1f81e:	d005      	beq.n	1f82c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f820:	4b0f      	ldr	r3, [pc, #60]	; (1f860 <sd_mmc_check+0x68>)
   1f822:	4798      	blx	r3
		return sd_mmc_err;
   1f824:	230f      	movs	r3, #15
   1f826:	18fb      	adds	r3, r7, r3
   1f828:	781b      	ldrb	r3, [r3, #0]
   1f82a:	e012      	b.n	1f852 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f82c:	4b0d      	ldr	r3, [pc, #52]	; (1f864 <sd_mmc_check+0x6c>)
   1f82e:	4798      	blx	r3
   1f830:	1e03      	subs	r3, r0, #0
   1f832:	d007      	beq.n	1f844 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f834:	4b0c      	ldr	r3, [pc, #48]	; (1f868 <sd_mmc_check+0x70>)
   1f836:	681b      	ldr	r3, [r3, #0]
   1f838:	2200      	movs	r2, #0
   1f83a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f83c:	4b08      	ldr	r3, [pc, #32]	; (1f860 <sd_mmc_check+0x68>)
   1f83e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f840:	2301      	movs	r3, #1
   1f842:	e006      	b.n	1f852 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f844:	4b08      	ldr	r3, [pc, #32]	; (1f868 <sd_mmc_check+0x70>)
   1f846:	681b      	ldr	r3, [r3, #0]
   1f848:	2203      	movs	r2, #3
   1f84a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f84c:	4b04      	ldr	r3, [pc, #16]	; (1f860 <sd_mmc_check+0x68>)
   1f84e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f850:	2303      	movs	r3, #3
}
   1f852:	0018      	movs	r0, r3
   1f854:	46bd      	mov	sp, r7
   1f856:	b005      	add	sp, #20
   1f858:	bd90      	pop	{r4, r7, pc}
   1f85a:	46c0      	nop			; (mov r8, r8)
   1f85c:	0001f3dd 	.word	0x0001f3dd
   1f860:	0001f4d9 	.word	0x0001f4d9
   1f864:	0001f4fd 	.word	0x0001f4fd
   1f868:	2000423c 	.word	0x2000423c

0001f86c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f86c:	b580      	push	{r7, lr}
   1f86e:	b082      	sub	sp, #8
   1f870:	af00      	add	r7, sp, #0
   1f872:	0002      	movs	r2, r0
   1f874:	1dfb      	adds	r3, r7, #7
   1f876:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f878:	1dfb      	adds	r3, r7, #7
   1f87a:	781b      	ldrb	r3, [r3, #0]
   1f87c:	0018      	movs	r0, r3
   1f87e:	4b07      	ldr	r3, [pc, #28]	; (1f89c <sd_mmc_get_type+0x30>)
   1f880:	4798      	blx	r3
   1f882:	1e03      	subs	r3, r0, #0
   1f884:	d001      	beq.n	1f88a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f886:	2300      	movs	r3, #0
   1f888:	e004      	b.n	1f894 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f88a:	4b05      	ldr	r3, [pc, #20]	; (1f8a0 <sd_mmc_get_type+0x34>)
   1f88c:	4798      	blx	r3
	return sd_mmc_card->type;
   1f88e:	4b05      	ldr	r3, [pc, #20]	; (1f8a4 <sd_mmc_get_type+0x38>)
   1f890:	681b      	ldr	r3, [r3, #0]
   1f892:	7adb      	ldrb	r3, [r3, #11]
}
   1f894:	0018      	movs	r0, r3
   1f896:	46bd      	mov	sp, r7
   1f898:	b002      	add	sp, #8
   1f89a:	bd80      	pop	{r7, pc}
   1f89c:	0001f3dd 	.word	0x0001f3dd
   1f8a0:	0001f4d9 	.word	0x0001f4d9
   1f8a4:	2000423c 	.word	0x2000423c

0001f8a8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f8a8:	b580      	push	{r7, lr}
   1f8aa:	b082      	sub	sp, #8
   1f8ac:	af00      	add	r7, sp, #0
   1f8ae:	0002      	movs	r2, r0
   1f8b0:	1dfb      	adds	r3, r7, #7
   1f8b2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f8b4:	1dfb      	adds	r3, r7, #7
   1f8b6:	781b      	ldrb	r3, [r3, #0]
   1f8b8:	0018      	movs	r0, r3
   1f8ba:	4b07      	ldr	r3, [pc, #28]	; (1f8d8 <sd_mmc_get_capacity+0x30>)
   1f8bc:	4798      	blx	r3
   1f8be:	1e03      	subs	r3, r0, #0
   1f8c0:	d001      	beq.n	1f8c6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f8c2:	2300      	movs	r3, #0
   1f8c4:	e004      	b.n	1f8d0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f8c6:	4b05      	ldr	r3, [pc, #20]	; (1f8dc <sd_mmc_get_capacity+0x34>)
   1f8c8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f8ca:	4b05      	ldr	r3, [pc, #20]	; (1f8e0 <sd_mmc_get_capacity+0x38>)
   1f8cc:	681b      	ldr	r3, [r3, #0]
   1f8ce:	685b      	ldr	r3, [r3, #4]
}
   1f8d0:	0018      	movs	r0, r3
   1f8d2:	46bd      	mov	sp, r7
   1f8d4:	b002      	add	sp, #8
   1f8d6:	bd80      	pop	{r7, pc}
   1f8d8:	0001f3dd 	.word	0x0001f3dd
   1f8dc:	0001f4d9 	.word	0x0001f4d9
   1f8e0:	2000423c 	.word	0x2000423c

0001f8e4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f8e4:	b580      	push	{r7, lr}
   1f8e6:	b082      	sub	sp, #8
   1f8e8:	af00      	add	r7, sp, #0
   1f8ea:	0002      	movs	r2, r0
   1f8ec:	1dfb      	adds	r3, r7, #7
   1f8ee:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f8f0:	2300      	movs	r3, #0
}
   1f8f2:	0018      	movs	r0, r3
   1f8f4:	46bd      	mov	sp, r7
   1f8f6:	b002      	add	sp, #8
   1f8f8:	bd80      	pop	{r7, pc}
	...

0001f8fc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f8fc:	b590      	push	{r4, r7, lr}
   1f8fe:	b089      	sub	sp, #36	; 0x24
   1f900:	af02      	add	r7, sp, #8
   1f902:	6039      	str	r1, [r7, #0]
   1f904:	0011      	movs	r1, r2
   1f906:	1dfb      	adds	r3, r7, #7
   1f908:	1c02      	adds	r2, r0, #0
   1f90a:	701a      	strb	r2, [r3, #0]
   1f90c:	1d3b      	adds	r3, r7, #4
   1f90e:	1c0a      	adds	r2, r1, #0
   1f910:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f912:	230f      	movs	r3, #15
   1f914:	18fc      	adds	r4, r7, r3
   1f916:	1dfb      	adds	r3, r7, #7
   1f918:	781b      	ldrb	r3, [r3, #0]
   1f91a:	0018      	movs	r0, r3
   1f91c:	4b29      	ldr	r3, [pc, #164]	; (1f9c4 <sd_mmc_init_read_blocks+0xc8>)
   1f91e:	4798      	blx	r3
   1f920:	0003      	movs	r3, r0
   1f922:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f924:	230f      	movs	r3, #15
   1f926:	18fb      	adds	r3, r7, r3
   1f928:	781b      	ldrb	r3, [r3, #0]
   1f92a:	2b00      	cmp	r3, #0
   1f92c:	d003      	beq.n	1f936 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f92e:	230f      	movs	r3, #15
   1f930:	18fb      	adds	r3, r7, r3
   1f932:	781b      	ldrb	r3, [r3, #0]
   1f934:	e041      	b.n	1f9ba <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f936:	4b24      	ldr	r3, [pc, #144]	; (1f9c8 <sd_mmc_init_read_blocks+0xcc>)
   1f938:	4798      	blx	r3
   1f93a:	0003      	movs	r3, r0
   1f93c:	001a      	movs	r2, r3
   1f93e:	2301      	movs	r3, #1
   1f940:	4053      	eors	r3, r2
   1f942:	b2db      	uxtb	r3, r3
   1f944:	2b00      	cmp	r3, #0
   1f946:	d003      	beq.n	1f950 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f948:	4b20      	ldr	r3, [pc, #128]	; (1f9cc <sd_mmc_init_read_blocks+0xd0>)
   1f94a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f94c:	2305      	movs	r3, #5
   1f94e:	e034      	b.n	1f9ba <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f950:	1d3b      	adds	r3, r7, #4
   1f952:	881b      	ldrh	r3, [r3, #0]
   1f954:	2b01      	cmp	r3, #1
   1f956:	d902      	bls.n	1f95e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f958:	4b1d      	ldr	r3, [pc, #116]	; (1f9d0 <sd_mmc_init_read_blocks+0xd4>)
   1f95a:	617b      	str	r3, [r7, #20]
   1f95c:	e001      	b.n	1f962 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f95e:	4b1d      	ldr	r3, [pc, #116]	; (1f9d4 <sd_mmc_init_read_blocks+0xd8>)
   1f960:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f962:	4b1d      	ldr	r3, [pc, #116]	; (1f9d8 <sd_mmc_init_read_blocks+0xdc>)
   1f964:	681b      	ldr	r3, [r3, #0]
   1f966:	7adb      	ldrb	r3, [r3, #11]
   1f968:	001a      	movs	r2, r3
   1f96a:	2308      	movs	r3, #8
   1f96c:	4013      	ands	r3, r2
   1f96e:	d002      	beq.n	1f976 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f970:	683b      	ldr	r3, [r7, #0]
   1f972:	613b      	str	r3, [r7, #16]
   1f974:	e002      	b.n	1f97c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f976:	683b      	ldr	r3, [r7, #0]
   1f978:	025b      	lsls	r3, r3, #9
   1f97a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f97c:	1d3b      	adds	r3, r7, #4
   1f97e:	881c      	ldrh	r4, [r3, #0]
   1f980:	2380      	movs	r3, #128	; 0x80
   1f982:	009a      	lsls	r2, r3, #2
   1f984:	6939      	ldr	r1, [r7, #16]
   1f986:	6978      	ldr	r0, [r7, #20]
   1f988:	2301      	movs	r3, #1
   1f98a:	9300      	str	r3, [sp, #0]
   1f98c:	0023      	movs	r3, r4
   1f98e:	4c13      	ldr	r4, [pc, #76]	; (1f9dc <sd_mmc_init_read_blocks+0xe0>)
   1f990:	47a0      	blx	r4
   1f992:	0003      	movs	r3, r0
   1f994:	001a      	movs	r2, r3
   1f996:	2301      	movs	r3, #1
   1f998:	4053      	eors	r3, r2
   1f99a:	b2db      	uxtb	r3, r3
   1f99c:	2b00      	cmp	r3, #0
   1f99e:	d003      	beq.n	1f9a8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f9a0:	4b0a      	ldr	r3, [pc, #40]	; (1f9cc <sd_mmc_init_read_blocks+0xd0>)
   1f9a2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f9a4:	2305      	movs	r3, #5
   1f9a6:	e008      	b.n	1f9ba <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f9a8:	4b0d      	ldr	r3, [pc, #52]	; (1f9e0 <sd_mmc_init_read_blocks+0xe4>)
   1f9aa:	1d3a      	adds	r2, r7, #4
   1f9ac:	8812      	ldrh	r2, [r2, #0]
   1f9ae:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f9b0:	4b0c      	ldr	r3, [pc, #48]	; (1f9e4 <sd_mmc_init_read_blocks+0xe8>)
   1f9b2:	1d3a      	adds	r2, r7, #4
   1f9b4:	8812      	ldrh	r2, [r2, #0]
   1f9b6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f9b8:	2300      	movs	r3, #0
}
   1f9ba:	0018      	movs	r0, r3
   1f9bc:	46bd      	mov	sp, r7
   1f9be:	b007      	add	sp, #28
   1f9c0:	bd90      	pop	{r4, r7, pc}
   1f9c2:	46c0      	nop			; (mov r8, r8)
   1f9c4:	0001f3dd 	.word	0x0001f3dd
   1f9c8:	0001f279 	.word	0x0001f279
   1f9cc:	0001f4d9 	.word	0x0001f4d9
   1f9d0:	00101112 	.word	0x00101112
   1f9d4:	00081111 	.word	0x00081111
   1f9d8:	2000423c 	.word	0x2000423c
   1f9dc:	00020759 	.word	0x00020759
   1f9e0:	20004242 	.word	0x20004242
   1f9e4:	20004240 	.word	0x20004240

0001f9e8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f9e8:	b580      	push	{r7, lr}
   1f9ea:	b082      	sub	sp, #8
   1f9ec:	af00      	add	r7, sp, #0
   1f9ee:	6078      	str	r0, [r7, #4]
   1f9f0:	000a      	movs	r2, r1
   1f9f2:	1cbb      	adds	r3, r7, #2
   1f9f4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f9f6:	1cbb      	adds	r3, r7, #2
   1f9f8:	881a      	ldrh	r2, [r3, #0]
   1f9fa:	687b      	ldr	r3, [r7, #4]
   1f9fc:	0011      	movs	r1, r2
   1f9fe:	0018      	movs	r0, r3
   1fa00:	4b0d      	ldr	r3, [pc, #52]	; (1fa38 <sd_mmc_start_read_blocks+0x50>)
   1fa02:	4798      	blx	r3
   1fa04:	0003      	movs	r3, r0
   1fa06:	001a      	movs	r2, r3
   1fa08:	2301      	movs	r3, #1
   1fa0a:	4053      	eors	r3, r2
   1fa0c:	b2db      	uxtb	r3, r3
   1fa0e:	2b00      	cmp	r3, #0
   1fa10:	d004      	beq.n	1fa1c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fa12:	4b0a      	ldr	r3, [pc, #40]	; (1fa3c <sd_mmc_start_read_blocks+0x54>)
   1fa14:	2200      	movs	r2, #0
   1fa16:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fa18:	2305      	movs	r3, #5
   1fa1a:	e008      	b.n	1fa2e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fa1c:	4b07      	ldr	r3, [pc, #28]	; (1fa3c <sd_mmc_start_read_blocks+0x54>)
   1fa1e:	881a      	ldrh	r2, [r3, #0]
   1fa20:	1cbb      	adds	r3, r7, #2
   1fa22:	881b      	ldrh	r3, [r3, #0]
   1fa24:	1ad3      	subs	r3, r2, r3
   1fa26:	b29a      	uxth	r2, r3
   1fa28:	4b04      	ldr	r3, [pc, #16]	; (1fa3c <sd_mmc_start_read_blocks+0x54>)
   1fa2a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fa2c:	2300      	movs	r3, #0
}
   1fa2e:	0018      	movs	r0, r3
   1fa30:	46bd      	mov	sp, r7
   1fa32:	b002      	add	sp, #8
   1fa34:	bd80      	pop	{r7, pc}
   1fa36:	46c0      	nop			; (mov r8, r8)
   1fa38:	00020a29 	.word	0x00020a29
   1fa3c:	20004242 	.word	0x20004242

0001fa40 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fa40:	b580      	push	{r7, lr}
   1fa42:	b082      	sub	sp, #8
   1fa44:	af00      	add	r7, sp, #0
   1fa46:	0002      	movs	r2, r0
   1fa48:	1dfb      	adds	r3, r7, #7
   1fa4a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fa4c:	4b1c      	ldr	r3, [pc, #112]	; (1fac0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fa4e:	4798      	blx	r3
   1fa50:	0003      	movs	r3, r0
   1fa52:	001a      	movs	r2, r3
   1fa54:	2301      	movs	r3, #1
   1fa56:	4053      	eors	r3, r2
   1fa58:	b2db      	uxtb	r3, r3
   1fa5a:	2b00      	cmp	r3, #0
   1fa5c:	d001      	beq.n	1fa62 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fa5e:	2305      	movs	r3, #5
   1fa60:	e029      	b.n	1fab6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fa62:	1dfb      	adds	r3, r7, #7
   1fa64:	781b      	ldrb	r3, [r3, #0]
   1fa66:	2b00      	cmp	r3, #0
   1fa68:	d003      	beq.n	1fa72 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fa6a:	4b16      	ldr	r3, [pc, #88]	; (1fac4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fa6c:	2200      	movs	r2, #0
   1fa6e:	801a      	strh	r2, [r3, #0]
   1fa70:	e005      	b.n	1fa7e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fa72:	4b14      	ldr	r3, [pc, #80]	; (1fac4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fa74:	881b      	ldrh	r3, [r3, #0]
   1fa76:	2b00      	cmp	r3, #0
   1fa78:	d001      	beq.n	1fa7e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fa7a:	2300      	movs	r3, #0
   1fa7c:	e01b      	b.n	1fab6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fa7e:	4b12      	ldr	r3, [pc, #72]	; (1fac8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fa80:	881b      	ldrh	r3, [r3, #0]
   1fa82:	2b01      	cmp	r3, #1
   1fa84:	d103      	bne.n	1fa8e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fa86:	4b11      	ldr	r3, [pc, #68]	; (1facc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fa88:	4798      	blx	r3
		return SD_MMC_OK;
   1fa8a:	2300      	movs	r3, #0
   1fa8c:	e013      	b.n	1fab6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fa8e:	4b10      	ldr	r3, [pc, #64]	; (1fad0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fa90:	2100      	movs	r1, #0
   1fa92:	0018      	movs	r0, r3
   1fa94:	4b0f      	ldr	r3, [pc, #60]	; (1fad4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fa96:	4798      	blx	r3
   1fa98:	0003      	movs	r3, r0
   1fa9a:	001a      	movs	r2, r3
   1fa9c:	2301      	movs	r3, #1
   1fa9e:	4053      	eors	r3, r2
   1faa0:	b2db      	uxtb	r3, r3
   1faa2:	2b00      	cmp	r3, #0
   1faa4:	d004      	beq.n	1fab0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1faa6:	4b0a      	ldr	r3, [pc, #40]	; (1fad0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1faa8:	2100      	movs	r1, #0
   1faaa:	0018      	movs	r0, r3
   1faac:	4b09      	ldr	r3, [pc, #36]	; (1fad4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1faae:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fab0:	4b06      	ldr	r3, [pc, #24]	; (1facc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fab2:	4798      	blx	r3
	return SD_MMC_OK;
   1fab4:	2300      	movs	r3, #0
}
   1fab6:	0018      	movs	r0, r3
   1fab8:	46bd      	mov	sp, r7
   1faba:	b002      	add	sp, #8
   1fabc:	bd80      	pop	{r7, pc}
   1fabe:	46c0      	nop			; (mov r8, r8)
   1fac0:	00020acd 	.word	0x00020acd
   1fac4:	20004242 	.word	0x20004242
   1fac8:	20004240 	.word	0x20004240
   1facc:	0001f4d9 	.word	0x0001f4d9
   1fad0:	0000310c 	.word	0x0000310c
   1fad4:	00020731 	.word	0x00020731

0001fad8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fad8:	b590      	push	{r4, r7, lr}
   1fada:	b089      	sub	sp, #36	; 0x24
   1fadc:	af02      	add	r7, sp, #8
   1fade:	6039      	str	r1, [r7, #0]
   1fae0:	0011      	movs	r1, r2
   1fae2:	1dfb      	adds	r3, r7, #7
   1fae4:	1c02      	adds	r2, r0, #0
   1fae6:	701a      	strb	r2, [r3, #0]
   1fae8:	1d3b      	adds	r3, r7, #4
   1faea:	1c0a      	adds	r2, r1, #0
   1faec:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1faee:	230f      	movs	r3, #15
   1faf0:	18fc      	adds	r4, r7, r3
   1faf2:	1dfb      	adds	r3, r7, #7
   1faf4:	781b      	ldrb	r3, [r3, #0]
   1faf6:	0018      	movs	r0, r3
   1faf8:	4b28      	ldr	r3, [pc, #160]	; (1fb9c <sd_mmc_init_write_blocks+0xc4>)
   1fafa:	4798      	blx	r3
   1fafc:	0003      	movs	r3, r0
   1fafe:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fb00:	230f      	movs	r3, #15
   1fb02:	18fb      	adds	r3, r7, r3
   1fb04:	781b      	ldrb	r3, [r3, #0]
   1fb06:	2b00      	cmp	r3, #0
   1fb08:	d003      	beq.n	1fb12 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fb0a:	230f      	movs	r3, #15
   1fb0c:	18fb      	adds	r3, r7, r3
   1fb0e:	781b      	ldrb	r3, [r3, #0]
   1fb10:	e03f      	b.n	1fb92 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fb12:	1dfb      	adds	r3, r7, #7
   1fb14:	781b      	ldrb	r3, [r3, #0]
   1fb16:	0018      	movs	r0, r3
   1fb18:	4b21      	ldr	r3, [pc, #132]	; (1fba0 <sd_mmc_init_write_blocks+0xc8>)
   1fb1a:	4798      	blx	r3
   1fb1c:	1e03      	subs	r3, r0, #0
   1fb1e:	d003      	beq.n	1fb28 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fb20:	4b20      	ldr	r3, [pc, #128]	; (1fba4 <sd_mmc_init_write_blocks+0xcc>)
   1fb22:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fb24:	2307      	movs	r3, #7
   1fb26:	e034      	b.n	1fb92 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fb28:	1d3b      	adds	r3, r7, #4
   1fb2a:	881b      	ldrh	r3, [r3, #0]
   1fb2c:	2b01      	cmp	r3, #1
   1fb2e:	d902      	bls.n	1fb36 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fb30:	4b1d      	ldr	r3, [pc, #116]	; (1fba8 <sd_mmc_init_write_blocks+0xd0>)
   1fb32:	617b      	str	r3, [r7, #20]
   1fb34:	e001      	b.n	1fb3a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fb36:	4b1d      	ldr	r3, [pc, #116]	; (1fbac <sd_mmc_init_write_blocks+0xd4>)
   1fb38:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fb3a:	4b1d      	ldr	r3, [pc, #116]	; (1fbb0 <sd_mmc_init_write_blocks+0xd8>)
   1fb3c:	681b      	ldr	r3, [r3, #0]
   1fb3e:	7adb      	ldrb	r3, [r3, #11]
   1fb40:	001a      	movs	r2, r3
   1fb42:	2308      	movs	r3, #8
   1fb44:	4013      	ands	r3, r2
   1fb46:	d002      	beq.n	1fb4e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fb48:	683b      	ldr	r3, [r7, #0]
   1fb4a:	613b      	str	r3, [r7, #16]
   1fb4c:	e002      	b.n	1fb54 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fb4e:	683b      	ldr	r3, [r7, #0]
   1fb50:	025b      	lsls	r3, r3, #9
   1fb52:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fb54:	1d3b      	adds	r3, r7, #4
   1fb56:	881c      	ldrh	r4, [r3, #0]
   1fb58:	2380      	movs	r3, #128	; 0x80
   1fb5a:	009a      	lsls	r2, r3, #2
   1fb5c:	6939      	ldr	r1, [r7, #16]
   1fb5e:	6978      	ldr	r0, [r7, #20]
   1fb60:	2301      	movs	r3, #1
   1fb62:	9300      	str	r3, [sp, #0]
   1fb64:	0023      	movs	r3, r4
   1fb66:	4c13      	ldr	r4, [pc, #76]	; (1fbb4 <sd_mmc_init_write_blocks+0xdc>)
   1fb68:	47a0      	blx	r4
   1fb6a:	0003      	movs	r3, r0
   1fb6c:	001a      	movs	r2, r3
   1fb6e:	2301      	movs	r3, #1
   1fb70:	4053      	eors	r3, r2
   1fb72:	b2db      	uxtb	r3, r3
   1fb74:	2b00      	cmp	r3, #0
   1fb76:	d003      	beq.n	1fb80 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fb78:	4b0a      	ldr	r3, [pc, #40]	; (1fba4 <sd_mmc_init_write_blocks+0xcc>)
   1fb7a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fb7c:	2305      	movs	r3, #5
   1fb7e:	e008      	b.n	1fb92 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fb80:	4b0d      	ldr	r3, [pc, #52]	; (1fbb8 <sd_mmc_init_write_blocks+0xe0>)
   1fb82:	1d3a      	adds	r2, r7, #4
   1fb84:	8812      	ldrh	r2, [r2, #0]
   1fb86:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fb88:	4b0c      	ldr	r3, [pc, #48]	; (1fbbc <sd_mmc_init_write_blocks+0xe4>)
   1fb8a:	1d3a      	adds	r2, r7, #4
   1fb8c:	8812      	ldrh	r2, [r2, #0]
   1fb8e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fb90:	2300      	movs	r3, #0
}
   1fb92:	0018      	movs	r0, r3
   1fb94:	46bd      	mov	sp, r7
   1fb96:	b007      	add	sp, #28
   1fb98:	bd90      	pop	{r4, r7, pc}
   1fb9a:	46c0      	nop			; (mov r8, r8)
   1fb9c:	0001f3dd 	.word	0x0001f3dd
   1fba0:	0001f8e5 	.word	0x0001f8e5
   1fba4:	0001f4d9 	.word	0x0001f4d9
   1fba8:	00109119 	.word	0x00109119
   1fbac:	00089118 	.word	0x00089118
   1fbb0:	2000423c 	.word	0x2000423c
   1fbb4:	00020759 	.word	0x00020759
   1fbb8:	20004242 	.word	0x20004242
   1fbbc:	20004240 	.word	0x20004240

0001fbc0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fbc0:	b580      	push	{r7, lr}
   1fbc2:	b082      	sub	sp, #8
   1fbc4:	af00      	add	r7, sp, #0
   1fbc6:	6078      	str	r0, [r7, #4]
   1fbc8:	000a      	movs	r2, r1
   1fbca:	1cbb      	adds	r3, r7, #2
   1fbcc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fbce:	1cbb      	adds	r3, r7, #2
   1fbd0:	881a      	ldrh	r2, [r3, #0]
   1fbd2:	687b      	ldr	r3, [r7, #4]
   1fbd4:	0011      	movs	r1, r2
   1fbd6:	0018      	movs	r0, r3
   1fbd8:	4b0d      	ldr	r3, [pc, #52]	; (1fc10 <sd_mmc_start_write_blocks+0x50>)
   1fbda:	4798      	blx	r3
   1fbdc:	0003      	movs	r3, r0
   1fbde:	001a      	movs	r2, r3
   1fbe0:	2301      	movs	r3, #1
   1fbe2:	4053      	eors	r3, r2
   1fbe4:	b2db      	uxtb	r3, r3
   1fbe6:	2b00      	cmp	r3, #0
   1fbe8:	d004      	beq.n	1fbf4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fbea:	4b0a      	ldr	r3, [pc, #40]	; (1fc14 <sd_mmc_start_write_blocks+0x54>)
   1fbec:	2200      	movs	r2, #0
   1fbee:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fbf0:	2305      	movs	r3, #5
   1fbf2:	e008      	b.n	1fc06 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fbf4:	4b07      	ldr	r3, [pc, #28]	; (1fc14 <sd_mmc_start_write_blocks+0x54>)
   1fbf6:	881a      	ldrh	r2, [r3, #0]
   1fbf8:	1cbb      	adds	r3, r7, #2
   1fbfa:	881b      	ldrh	r3, [r3, #0]
   1fbfc:	1ad3      	subs	r3, r2, r3
   1fbfe:	b29a      	uxth	r2, r3
   1fc00:	4b04      	ldr	r3, [pc, #16]	; (1fc14 <sd_mmc_start_write_blocks+0x54>)
   1fc02:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fc04:	2300      	movs	r3, #0
}
   1fc06:	0018      	movs	r0, r3
   1fc08:	46bd      	mov	sp, r7
   1fc0a:	b002      	add	sp, #8
   1fc0c:	bd80      	pop	{r7, pc}
   1fc0e:	46c0      	nop			; (mov r8, r8)
   1fc10:	00020ad9 	.word	0x00020ad9
   1fc14:	20004242 	.word	0x20004242

0001fc18 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fc18:	b580      	push	{r7, lr}
   1fc1a:	b082      	sub	sp, #8
   1fc1c:	af00      	add	r7, sp, #0
   1fc1e:	0002      	movs	r2, r0
   1fc20:	1dfb      	adds	r3, r7, #7
   1fc22:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fc24:	4b13      	ldr	r3, [pc, #76]	; (1fc74 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fc26:	4798      	blx	r3
   1fc28:	0003      	movs	r3, r0
   1fc2a:	001a      	movs	r2, r3
   1fc2c:	2301      	movs	r3, #1
   1fc2e:	4053      	eors	r3, r2
   1fc30:	b2db      	uxtb	r3, r3
   1fc32:	2b00      	cmp	r3, #0
   1fc34:	d001      	beq.n	1fc3a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fc36:	2305      	movs	r3, #5
   1fc38:	e018      	b.n	1fc6c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fc3a:	1dfb      	adds	r3, r7, #7
   1fc3c:	781b      	ldrb	r3, [r3, #0]
   1fc3e:	2b00      	cmp	r3, #0
   1fc40:	d003      	beq.n	1fc4a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fc42:	4b0d      	ldr	r3, [pc, #52]	; (1fc78 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fc44:	2200      	movs	r2, #0
   1fc46:	801a      	strh	r2, [r3, #0]
   1fc48:	e005      	b.n	1fc56 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fc4a:	4b0b      	ldr	r3, [pc, #44]	; (1fc78 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fc4c:	881b      	ldrh	r3, [r3, #0]
   1fc4e:	2b00      	cmp	r3, #0
   1fc50:	d001      	beq.n	1fc56 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fc52:	2300      	movs	r3, #0
   1fc54:	e00a      	b.n	1fc6c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fc56:	4b09      	ldr	r3, [pc, #36]	; (1fc7c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fc58:	881b      	ldrh	r3, [r3, #0]
   1fc5a:	2b01      	cmp	r3, #1
   1fc5c:	d103      	bne.n	1fc66 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fc5e:	4b08      	ldr	r3, [pc, #32]	; (1fc80 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fc60:	4798      	blx	r3
		return SD_MMC_OK;
   1fc62:	2300      	movs	r3, #0
   1fc64:	e002      	b.n	1fc6c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fc66:	4b06      	ldr	r3, [pc, #24]	; (1fc80 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fc68:	4798      	blx	r3
	return SD_MMC_OK;
   1fc6a:	2300      	movs	r3, #0
}
   1fc6c:	0018      	movs	r0, r3
   1fc6e:	46bd      	mov	sp, r7
   1fc70:	b002      	add	sp, #8
   1fc72:	bd80      	pop	{r7, pc}
   1fc74:	00020b99 	.word	0x00020b99
   1fc78:	20004242 	.word	0x20004242
   1fc7c:	20004240 	.word	0x20004240
   1fc80:	0001f4d9 	.word	0x0001f4d9

0001fc84 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fc84:	b580      	push	{r7, lr}
   1fc86:	b082      	sub	sp, #8
   1fc88:	af00      	add	r7, sp, #0
   1fc8a:	0002      	movs	r2, r0
   1fc8c:	1dfb      	adds	r3, r7, #7
   1fc8e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1fc90:	1dfb      	adds	r3, r7, #7
   1fc92:	781b      	ldrb	r3, [r3, #0]
   1fc94:	0018      	movs	r0, r3
   1fc96:	4b16      	ldr	r3, [pc, #88]	; (1fcf0 <sd_mmc_test_unit_ready+0x6c>)
   1fc98:	4798      	blx	r3
   1fc9a:	0003      	movs	r3, r0
   1fc9c:	2b01      	cmp	r3, #1
   1fc9e:	d019      	beq.n	1fcd4 <sd_mmc_test_unit_ready+0x50>
   1fca0:	2b02      	cmp	r3, #2
   1fca2:	d019      	beq.n	1fcd8 <sd_mmc_test_unit_ready+0x54>
   1fca4:	2b00      	cmp	r3, #0
   1fca6:	d11e      	bne.n	1fce6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1fca8:	1dfb      	adds	r3, r7, #7
   1fcaa:	781b      	ldrb	r3, [r3, #0]
   1fcac:	4a11      	ldr	r2, [pc, #68]	; (1fcf4 <sd_mmc_test_unit_ready+0x70>)
   1fcae:	5cd3      	ldrb	r3, [r2, r3]
   1fcb0:	2b00      	cmp	r3, #0
   1fcb2:	d001      	beq.n	1fcb8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fcb4:	2302      	movs	r3, #2
   1fcb6:	e017      	b.n	1fce8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fcb8:	1dfb      	adds	r3, r7, #7
   1fcba:	781b      	ldrb	r3, [r3, #0]
   1fcbc:	0018      	movs	r0, r3
   1fcbe:	4b0e      	ldr	r3, [pc, #56]	; (1fcf8 <sd_mmc_test_unit_ready+0x74>)
   1fcc0:	4798      	blx	r3
   1fcc2:	0003      	movs	r3, r0
   1fcc4:	001a      	movs	r2, r3
   1fcc6:	2303      	movs	r3, #3
   1fcc8:	4013      	ands	r3, r2
   1fcca:	d001      	beq.n	1fcd0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1fccc:	2300      	movs	r3, #0
   1fcce:	e00b      	b.n	1fce8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1fcd0:	2302      	movs	r3, #2
   1fcd2:	e009      	b.n	1fce8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1fcd4:	2303      	movs	r3, #3
   1fcd6:	e007      	b.n	1fce8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1fcd8:	1dfb      	adds	r3, r7, #7
   1fcda:	781b      	ldrb	r3, [r3, #0]
   1fcdc:	4a05      	ldr	r2, [pc, #20]	; (1fcf4 <sd_mmc_test_unit_ready+0x70>)
   1fcde:	2100      	movs	r1, #0
   1fce0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1fce2:	2302      	movs	r3, #2
   1fce4:	e000      	b.n	1fce8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1fce6:	2301      	movs	r3, #1
	}
}
   1fce8:	0018      	movs	r0, r3
   1fcea:	46bd      	mov	sp, r7
   1fcec:	b002      	add	sp, #8
   1fcee:	bd80      	pop	{r7, pc}
   1fcf0:	0001f7f9 	.word	0x0001f7f9
   1fcf4:	20004244 	.word	0x20004244
   1fcf8:	0001f86d 	.word	0x0001f86d

0001fcfc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1fcfc:	b580      	push	{r7, lr}
   1fcfe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1fd00:	2000      	movs	r0, #0
   1fd02:	4b03      	ldr	r3, [pc, #12]	; (1fd10 <sd_mmc_test_unit_ready_0+0x14>)
   1fd04:	4798      	blx	r3
   1fd06:	0003      	movs	r3, r0
}
   1fd08:	0018      	movs	r0, r3
   1fd0a:	46bd      	mov	sp, r7
   1fd0c:	bd80      	pop	{r7, pc}
   1fd0e:	46c0      	nop			; (mov r8, r8)
   1fd10:	0001fc85 	.word	0x0001fc85

0001fd14 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1fd14:	b580      	push	{r7, lr}
   1fd16:	b082      	sub	sp, #8
   1fd18:	af00      	add	r7, sp, #0
   1fd1a:	0002      	movs	r2, r0
   1fd1c:	6039      	str	r1, [r7, #0]
   1fd1e:	1dfb      	adds	r3, r7, #7
   1fd20:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1fd22:	1dfb      	adds	r3, r7, #7
   1fd24:	781b      	ldrb	r3, [r3, #0]
   1fd26:	0018      	movs	r0, r3
   1fd28:	4b08      	ldr	r3, [pc, #32]	; (1fd4c <sd_mmc_read_capacity+0x38>)
   1fd2a:	4798      	blx	r3
   1fd2c:	0003      	movs	r3, r0
   1fd2e:	005b      	lsls	r3, r3, #1
   1fd30:	1e5a      	subs	r2, r3, #1
   1fd32:	683b      	ldr	r3, [r7, #0]
   1fd34:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1fd36:	1dfb      	adds	r3, r7, #7
   1fd38:	781b      	ldrb	r3, [r3, #0]
   1fd3a:	0018      	movs	r0, r3
   1fd3c:	4b04      	ldr	r3, [pc, #16]	; (1fd50 <sd_mmc_read_capacity+0x3c>)
   1fd3e:	4798      	blx	r3
   1fd40:	0003      	movs	r3, r0
}
   1fd42:	0018      	movs	r0, r3
   1fd44:	46bd      	mov	sp, r7
   1fd46:	b002      	add	sp, #8
   1fd48:	bd80      	pop	{r7, pc}
   1fd4a:	46c0      	nop			; (mov r8, r8)
   1fd4c:	0001f8a9 	.word	0x0001f8a9
   1fd50:	0001fc85 	.word	0x0001fc85

0001fd54 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1fd54:	b580      	push	{r7, lr}
   1fd56:	b082      	sub	sp, #8
   1fd58:	af00      	add	r7, sp, #0
   1fd5a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1fd5c:	687b      	ldr	r3, [r7, #4]
   1fd5e:	0019      	movs	r1, r3
   1fd60:	2000      	movs	r0, #0
   1fd62:	4b03      	ldr	r3, [pc, #12]	; (1fd70 <sd_mmc_read_capacity_0+0x1c>)
   1fd64:	4798      	blx	r3
   1fd66:	0003      	movs	r3, r0
}
   1fd68:	0018      	movs	r0, r3
   1fd6a:	46bd      	mov	sp, r7
   1fd6c:	b002      	add	sp, #8
   1fd6e:	bd80      	pop	{r7, pc}
   1fd70:	0001fd15 	.word	0x0001fd15

0001fd74 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1fd74:	b580      	push	{r7, lr}
   1fd76:	b082      	sub	sp, #8
   1fd78:	af00      	add	r7, sp, #0
   1fd7a:	0002      	movs	r2, r0
   1fd7c:	1dfb      	adds	r3, r7, #7
   1fd7e:	701a      	strb	r2, [r3, #0]
   1fd80:	1dbb      	adds	r3, r7, #6
   1fd82:	1c0a      	adds	r2, r1, #0
   1fd84:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1fd86:	1dfb      	adds	r3, r7, #7
   1fd88:	781b      	ldrb	r3, [r3, #0]
   1fd8a:	4a04      	ldr	r2, [pc, #16]	; (1fd9c <sd_mmc_unload+0x28>)
   1fd8c:	1db9      	adds	r1, r7, #6
   1fd8e:	7809      	ldrb	r1, [r1, #0]
   1fd90:	54d1      	strb	r1, [r2, r3]
	return true;
   1fd92:	2301      	movs	r3, #1
}
   1fd94:	0018      	movs	r0, r3
   1fd96:	46bd      	mov	sp, r7
   1fd98:	b002      	add	sp, #8
   1fd9a:	bd80      	pop	{r7, pc}
   1fd9c:	20004244 	.word	0x20004244

0001fda0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1fda0:	b580      	push	{r7, lr}
   1fda2:	b082      	sub	sp, #8
   1fda4:	af00      	add	r7, sp, #0
   1fda6:	0002      	movs	r2, r0
   1fda8:	1dfb      	adds	r3, r7, #7
   1fdaa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1fdac:	1dfb      	adds	r3, r7, #7
   1fdae:	781b      	ldrb	r3, [r3, #0]
   1fdb0:	0019      	movs	r1, r3
   1fdb2:	2000      	movs	r0, #0
   1fdb4:	4b03      	ldr	r3, [pc, #12]	; (1fdc4 <sd_mmc_unload_0+0x24>)
   1fdb6:	4798      	blx	r3
   1fdb8:	0003      	movs	r3, r0
}
   1fdba:	0018      	movs	r0, r3
   1fdbc:	46bd      	mov	sp, r7
   1fdbe:	b002      	add	sp, #8
   1fdc0:	bd80      	pop	{r7, pc}
   1fdc2:	46c0      	nop			; (mov r8, r8)
   1fdc4:	0001fd75 	.word	0x0001fd75

0001fdc8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1fdc8:	b580      	push	{r7, lr}
   1fdca:	b082      	sub	sp, #8
   1fdcc:	af00      	add	r7, sp, #0
   1fdce:	0002      	movs	r2, r0
   1fdd0:	1dfb      	adds	r3, r7, #7
   1fdd2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1fdd4:	1dfb      	adds	r3, r7, #7
   1fdd6:	781b      	ldrb	r3, [r3, #0]
   1fdd8:	0018      	movs	r0, r3
   1fdda:	4b03      	ldr	r3, [pc, #12]	; (1fde8 <sd_mmc_wr_protect+0x20>)
   1fddc:	4798      	blx	r3
   1fdde:	0003      	movs	r3, r0
}
   1fde0:	0018      	movs	r0, r3
   1fde2:	46bd      	mov	sp, r7
   1fde4:	b002      	add	sp, #8
   1fde6:	bd80      	pop	{r7, pc}
   1fde8:	0001f8e5 	.word	0x0001f8e5

0001fdec <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1fdec:	b580      	push	{r7, lr}
   1fdee:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1fdf0:	2000      	movs	r0, #0
   1fdf2:	4b03      	ldr	r3, [pc, #12]	; (1fe00 <sd_mmc_wr_protect_0+0x14>)
   1fdf4:	4798      	blx	r3
   1fdf6:	0003      	movs	r3, r0
}
   1fdf8:	0018      	movs	r0, r3
   1fdfa:	46bd      	mov	sp, r7
   1fdfc:	bd80      	pop	{r7, pc}
   1fdfe:	46c0      	nop			; (mov r8, r8)
   1fe00:	0001fdc9 	.word	0x0001fdc9

0001fe04 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1fe04:	b580      	push	{r7, lr}
   1fe06:	b082      	sub	sp, #8
   1fe08:	af00      	add	r7, sp, #0
   1fe0a:	0002      	movs	r2, r0
   1fe0c:	1dfb      	adds	r3, r7, #7
   1fe0e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fe10:	2301      	movs	r3, #1
}
   1fe12:	0018      	movs	r0, r3
   1fe14:	46bd      	mov	sp, r7
   1fe16:	b002      	add	sp, #8
   1fe18:	bd80      	pop	{r7, pc}
	...

0001fe1c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fe1c:	b580      	push	{r7, lr}
   1fe1e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1fe20:	2000      	movs	r0, #0
   1fe22:	4b03      	ldr	r3, [pc, #12]	; (1fe30 <sd_mmc_removal_0+0x14>)
   1fe24:	4798      	blx	r3
   1fe26:	0003      	movs	r3, r0
}
   1fe28:	0018      	movs	r0, r3
   1fe2a:	46bd      	mov	sp, r7
   1fe2c:	bd80      	pop	{r7, pc}
   1fe2e:	46c0      	nop			; (mov r8, r8)
   1fe30:	0001fe05 	.word	0x0001fe05

0001fe34 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1fe34:	b580      	push	{r7, lr}
   1fe36:	b084      	sub	sp, #16
   1fe38:	af00      	add	r7, sp, #0
   1fe3a:	60b9      	str	r1, [r7, #8]
   1fe3c:	607a      	str	r2, [r7, #4]
   1fe3e:	230f      	movs	r3, #15
   1fe40:	18fb      	adds	r3, r7, r3
   1fe42:	1c02      	adds	r2, r0, #0
   1fe44:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1fe46:	68b9      	ldr	r1, [r7, #8]
   1fe48:	230f      	movs	r3, #15
   1fe4a:	18fb      	adds	r3, r7, r3
   1fe4c:	781b      	ldrb	r3, [r3, #0]
   1fe4e:	2201      	movs	r2, #1
   1fe50:	0018      	movs	r0, r3
   1fe52:	4b10      	ldr	r3, [pc, #64]	; (1fe94 <sd_mmc_mem_2_ram+0x60>)
   1fe54:	4798      	blx	r3
   1fe56:	1e03      	subs	r3, r0, #0
   1fe58:	d005      	beq.n	1fe66 <sd_mmc_mem_2_ram+0x32>
   1fe5a:	2b02      	cmp	r3, #2
   1fe5c:	d101      	bne.n	1fe62 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fe5e:	2302      	movs	r3, #2
   1fe60:	e013      	b.n	1fe8a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1fe62:	2301      	movs	r3, #1
   1fe64:	e011      	b.n	1fe8a <sd_mmc_mem_2_ram+0x56>
		break;
   1fe66:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1fe68:	687b      	ldr	r3, [r7, #4]
   1fe6a:	2101      	movs	r1, #1
   1fe6c:	0018      	movs	r0, r3
   1fe6e:	4b0a      	ldr	r3, [pc, #40]	; (1fe98 <sd_mmc_mem_2_ram+0x64>)
   1fe70:	4798      	blx	r3
   1fe72:	1e03      	subs	r3, r0, #0
   1fe74:	d001      	beq.n	1fe7a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1fe76:	2301      	movs	r3, #1
   1fe78:	e007      	b.n	1fe8a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1fe7a:	2000      	movs	r0, #0
   1fe7c:	4b07      	ldr	r3, [pc, #28]	; (1fe9c <sd_mmc_mem_2_ram+0x68>)
   1fe7e:	4798      	blx	r3
   1fe80:	1e03      	subs	r3, r0, #0
   1fe82:	d001      	beq.n	1fe88 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1fe84:	2301      	movs	r3, #1
   1fe86:	e000      	b.n	1fe8a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1fe88:	2300      	movs	r3, #0
}
   1fe8a:	0018      	movs	r0, r3
   1fe8c:	46bd      	mov	sp, r7
   1fe8e:	b004      	add	sp, #16
   1fe90:	bd80      	pop	{r7, pc}
   1fe92:	46c0      	nop			; (mov r8, r8)
   1fe94:	0001f8fd 	.word	0x0001f8fd
   1fe98:	0001f9e9 	.word	0x0001f9e9
   1fe9c:	0001fa41 	.word	0x0001fa41

0001fea0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1fea0:	b580      	push	{r7, lr}
   1fea2:	b082      	sub	sp, #8
   1fea4:	af00      	add	r7, sp, #0
   1fea6:	6078      	str	r0, [r7, #4]
   1fea8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1feaa:	683a      	ldr	r2, [r7, #0]
   1feac:	687b      	ldr	r3, [r7, #4]
   1feae:	0019      	movs	r1, r3
   1feb0:	2000      	movs	r0, #0
   1feb2:	4b03      	ldr	r3, [pc, #12]	; (1fec0 <sd_mmc_mem_2_ram_0+0x20>)
   1feb4:	4798      	blx	r3
   1feb6:	0003      	movs	r3, r0
}
   1feb8:	0018      	movs	r0, r3
   1feba:	46bd      	mov	sp, r7
   1febc:	b002      	add	sp, #8
   1febe:	bd80      	pop	{r7, pc}
   1fec0:	0001fe35 	.word	0x0001fe35

0001fec4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1fec4:	b580      	push	{r7, lr}
   1fec6:	b084      	sub	sp, #16
   1fec8:	af00      	add	r7, sp, #0
   1feca:	60b9      	str	r1, [r7, #8]
   1fecc:	607a      	str	r2, [r7, #4]
   1fece:	230f      	movs	r3, #15
   1fed0:	18fb      	adds	r3, r7, r3
   1fed2:	1c02      	adds	r2, r0, #0
   1fed4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1fed6:	68b9      	ldr	r1, [r7, #8]
   1fed8:	230f      	movs	r3, #15
   1feda:	18fb      	adds	r3, r7, r3
   1fedc:	781b      	ldrb	r3, [r3, #0]
   1fede:	2201      	movs	r2, #1
   1fee0:	0018      	movs	r0, r3
   1fee2:	4b10      	ldr	r3, [pc, #64]	; (1ff24 <sd_mmc_ram_2_mem+0x60>)
   1fee4:	4798      	blx	r3
   1fee6:	1e03      	subs	r3, r0, #0
   1fee8:	d005      	beq.n	1fef6 <sd_mmc_ram_2_mem+0x32>
   1feea:	2b02      	cmp	r3, #2
   1feec:	d101      	bne.n	1fef2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1feee:	2302      	movs	r3, #2
   1fef0:	e013      	b.n	1ff1a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1fef2:	2301      	movs	r3, #1
   1fef4:	e011      	b.n	1ff1a <sd_mmc_ram_2_mem+0x56>
		break;
   1fef6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1fef8:	687b      	ldr	r3, [r7, #4]
   1fefa:	2101      	movs	r1, #1
   1fefc:	0018      	movs	r0, r3
   1fefe:	4b0a      	ldr	r3, [pc, #40]	; (1ff28 <sd_mmc_ram_2_mem+0x64>)
   1ff00:	4798      	blx	r3
   1ff02:	1e03      	subs	r3, r0, #0
   1ff04:	d001      	beq.n	1ff0a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1ff06:	2301      	movs	r3, #1
   1ff08:	e007      	b.n	1ff1a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1ff0a:	2000      	movs	r0, #0
   1ff0c:	4b07      	ldr	r3, [pc, #28]	; (1ff2c <sd_mmc_ram_2_mem+0x68>)
   1ff0e:	4798      	blx	r3
   1ff10:	1e03      	subs	r3, r0, #0
   1ff12:	d001      	beq.n	1ff18 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1ff14:	2301      	movs	r3, #1
   1ff16:	e000      	b.n	1ff1a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1ff18:	2300      	movs	r3, #0
}
   1ff1a:	0018      	movs	r0, r3
   1ff1c:	46bd      	mov	sp, r7
   1ff1e:	b004      	add	sp, #16
   1ff20:	bd80      	pop	{r7, pc}
   1ff22:	46c0      	nop			; (mov r8, r8)
   1ff24:	0001fad9 	.word	0x0001fad9
   1ff28:	0001fbc1 	.word	0x0001fbc1
   1ff2c:	0001fc19 	.word	0x0001fc19

0001ff30 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1ff30:	b580      	push	{r7, lr}
   1ff32:	b082      	sub	sp, #8
   1ff34:	af00      	add	r7, sp, #0
   1ff36:	6078      	str	r0, [r7, #4]
   1ff38:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1ff3a:	683a      	ldr	r2, [r7, #0]
   1ff3c:	687b      	ldr	r3, [r7, #4]
   1ff3e:	0019      	movs	r1, r3
   1ff40:	2000      	movs	r0, #0
   1ff42:	4b03      	ldr	r3, [pc, #12]	; (1ff50 <sd_mmc_ram_2_mem_0+0x20>)
   1ff44:	4798      	blx	r3
   1ff46:	0003      	movs	r3, r0
}
   1ff48:	0018      	movs	r0, r3
   1ff4a:	46bd      	mov	sp, r7
   1ff4c:	b002      	add	sp, #8
   1ff4e:	bd80      	pop	{r7, pc}
   1ff50:	0001fec5 	.word	0x0001fec5

0001ff54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1ff54:	b580      	push	{r7, lr}
   1ff56:	b084      	sub	sp, #16
   1ff58:	af00      	add	r7, sp, #0
   1ff5a:	0002      	movs	r2, r0
   1ff5c:	1dfb      	adds	r3, r7, #7
   1ff5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ff60:	230f      	movs	r3, #15
   1ff62:	18fb      	adds	r3, r7, r3
   1ff64:	1dfa      	adds	r2, r7, #7
   1ff66:	7812      	ldrb	r2, [r2, #0]
   1ff68:	09d2      	lsrs	r2, r2, #7
   1ff6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ff6c:	230e      	movs	r3, #14
   1ff6e:	18fb      	adds	r3, r7, r3
   1ff70:	1dfa      	adds	r2, r7, #7
   1ff72:	7812      	ldrb	r2, [r2, #0]
   1ff74:	0952      	lsrs	r2, r2, #5
   1ff76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ff78:	4b0d      	ldr	r3, [pc, #52]	; (1ffb0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ff7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1ff7c:	230f      	movs	r3, #15
   1ff7e:	18fb      	adds	r3, r7, r3
   1ff80:	781b      	ldrb	r3, [r3, #0]
   1ff82:	2b00      	cmp	r3, #0
   1ff84:	d10f      	bne.n	1ffa6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ff86:	230f      	movs	r3, #15
   1ff88:	18fb      	adds	r3, r7, r3
   1ff8a:	781b      	ldrb	r3, [r3, #0]
   1ff8c:	009b      	lsls	r3, r3, #2
   1ff8e:	2210      	movs	r2, #16
   1ff90:	4694      	mov	ip, r2
   1ff92:	44bc      	add	ip, r7
   1ff94:	4463      	add	r3, ip
   1ff96:	3b08      	subs	r3, #8
   1ff98:	681a      	ldr	r2, [r3, #0]
   1ff9a:	230e      	movs	r3, #14
   1ff9c:	18fb      	adds	r3, r7, r3
   1ff9e:	781b      	ldrb	r3, [r3, #0]
   1ffa0:	01db      	lsls	r3, r3, #7
   1ffa2:	18d3      	adds	r3, r2, r3
   1ffa4:	e000      	b.n	1ffa8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1ffa6:	2300      	movs	r3, #0
	}
}
   1ffa8:	0018      	movs	r0, r3
   1ffaa:	46bd      	mov	sp, r7
   1ffac:	b004      	add	sp, #16
   1ffae:	bd80      	pop	{r7, pc}
   1ffb0:	41004400 	.word	0x41004400

0001ffb4 <system_interrupt_enable>:
{
   1ffb4:	b580      	push	{r7, lr}
   1ffb6:	b082      	sub	sp, #8
   1ffb8:	af00      	add	r7, sp, #0
   1ffba:	0002      	movs	r2, r0
   1ffbc:	1dfb      	adds	r3, r7, #7
   1ffbe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ffc0:	4b06      	ldr	r3, [pc, #24]	; (1ffdc <system_interrupt_enable+0x28>)
   1ffc2:	1dfa      	adds	r2, r7, #7
   1ffc4:	7812      	ldrb	r2, [r2, #0]
   1ffc6:	0011      	movs	r1, r2
   1ffc8:	221f      	movs	r2, #31
   1ffca:	400a      	ands	r2, r1
   1ffcc:	2101      	movs	r1, #1
   1ffce:	4091      	lsls	r1, r2
   1ffd0:	000a      	movs	r2, r1
   1ffd2:	601a      	str	r2, [r3, #0]
}
   1ffd4:	46c0      	nop			; (mov r8, r8)
   1ffd6:	46bd      	mov	sp, r7
   1ffd8:	b002      	add	sp, #8
   1ffda:	bd80      	pop	{r7, pc}
   1ffdc:	e000e100 	.word	0xe000e100

0001ffe0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1ffe0:	b580      	push	{r7, lr}
   1ffe2:	b082      	sub	sp, #8
   1ffe4:	af00      	add	r7, sp, #0
   1ffe6:	0002      	movs	r2, r0
   1ffe8:	1dfb      	adds	r3, r7, #7
   1ffea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ffec:	1dfb      	adds	r3, r7, #7
   1ffee:	781b      	ldrb	r3, [r3, #0]
   1fff0:	0018      	movs	r0, r3
   1fff2:	4b03      	ldr	r3, [pc, #12]	; (20000 <port_get_group_from_gpio_pin+0x20>)
   1fff4:	4798      	blx	r3
   1fff6:	0003      	movs	r3, r0
}
   1fff8:	0018      	movs	r0, r3
   1fffa:	46bd      	mov	sp, r7
   1fffc:	b002      	add	sp, #8
   1fffe:	bd80      	pop	{r7, pc}
   20000:	0001ff55 	.word	0x0001ff55

00020004 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   20004:	b580      	push	{r7, lr}
   20006:	b082      	sub	sp, #8
   20008:	af00      	add	r7, sp, #0
   2000a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   2000c:	687b      	ldr	r3, [r7, #4]
   2000e:	2200      	movs	r2, #0
   20010:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20012:	687b      	ldr	r3, [r7, #4]
   20014:	2201      	movs	r2, #1
   20016:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20018:	687b      	ldr	r3, [r7, #4]
   2001a:	2200      	movs	r2, #0
   2001c:	709a      	strb	r2, [r3, #2]
}
   2001e:	46c0      	nop			; (mov r8, r8)
   20020:	46bd      	mov	sp, r7
   20022:	b002      	add	sp, #8
   20024:	bd80      	pop	{r7, pc}
	...

00020028 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   20028:	b580      	push	{r7, lr}
   2002a:	b084      	sub	sp, #16
   2002c:	af00      	add	r7, sp, #0
   2002e:	0002      	movs	r2, r0
   20030:	1dfb      	adds	r3, r7, #7
   20032:	701a      	strb	r2, [r3, #0]
   20034:	1dbb      	adds	r3, r7, #6
   20036:	1c0a      	adds	r2, r1, #0
   20038:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2003a:	1dfb      	adds	r3, r7, #7
   2003c:	781b      	ldrb	r3, [r3, #0]
   2003e:	0018      	movs	r0, r3
   20040:	4b0d      	ldr	r3, [pc, #52]	; (20078 <port_pin_set_output_level+0x50>)
   20042:	4798      	blx	r3
   20044:	0003      	movs	r3, r0
   20046:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20048:	1dfb      	adds	r3, r7, #7
   2004a:	781b      	ldrb	r3, [r3, #0]
   2004c:	221f      	movs	r2, #31
   2004e:	4013      	ands	r3, r2
   20050:	2201      	movs	r2, #1
   20052:	409a      	lsls	r2, r3
   20054:	0013      	movs	r3, r2
   20056:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   20058:	1dbb      	adds	r3, r7, #6
   2005a:	781b      	ldrb	r3, [r3, #0]
   2005c:	2b00      	cmp	r3, #0
   2005e:	d003      	beq.n	20068 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20060:	68fb      	ldr	r3, [r7, #12]
   20062:	68ba      	ldr	r2, [r7, #8]
   20064:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   20066:	e002      	b.n	2006e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20068:	68fb      	ldr	r3, [r7, #12]
   2006a:	68ba      	ldr	r2, [r7, #8]
   2006c:	615a      	str	r2, [r3, #20]
}
   2006e:	46c0      	nop			; (mov r8, r8)
   20070:	46bd      	mov	sp, r7
   20072:	b004      	add	sp, #16
   20074:	bd80      	pop	{r7, pc}
   20076:	46c0      	nop			; (mov r8, r8)
   20078:	0001ffe1 	.word	0x0001ffe1

0002007c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   2007c:	b580      	push	{r7, lr}
   2007e:	b084      	sub	sp, #16
   20080:	af00      	add	r7, sp, #0
   20082:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20084:	687b      	ldr	r3, [r7, #4]
   20086:	681b      	ldr	r3, [r3, #0]
   20088:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2008a:	68fb      	ldr	r3, [r7, #12]
   2008c:	69db      	ldr	r3, [r3, #28]
   2008e:	1e5a      	subs	r2, r3, #1
   20090:	4193      	sbcs	r3, r2
   20092:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20094:	0018      	movs	r0, r3
   20096:	46bd      	mov	sp, r7
   20098:	b004      	add	sp, #16
   2009a:	bd80      	pop	{r7, pc}

0002009c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2009c:	b580      	push	{r7, lr}
   2009e:	b082      	sub	sp, #8
   200a0:	af00      	add	r7, sp, #0
   200a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   200a4:	687b      	ldr	r3, [r7, #4]
   200a6:	2201      	movs	r2, #1
   200a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   200aa:	687b      	ldr	r3, [r7, #4]
   200ac:	2200      	movs	r2, #0
   200ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   200b0:	687b      	ldr	r3, [r7, #4]
   200b2:	2200      	movs	r2, #0
   200b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   200b6:	687b      	ldr	r3, [r7, #4]
   200b8:	22c0      	movs	r2, #192	; 0xc0
   200ba:	0392      	lsls	r2, r2, #14
   200bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   200be:	687b      	ldr	r3, [r7, #4]
   200c0:	2200      	movs	r2, #0
   200c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   200c4:	687b      	ldr	r3, [r7, #4]
   200c6:	2200      	movs	r2, #0
   200c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   200ca:	687b      	ldr	r3, [r7, #4]
   200cc:	2201      	movs	r2, #1
   200ce:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   200d0:	687b      	ldr	r3, [r7, #4]
   200d2:	2201      	movs	r2, #1
   200d4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   200d6:	687b      	ldr	r3, [r7, #4]
   200d8:	2200      	movs	r2, #0
   200da:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   200dc:	687b      	ldr	r3, [r7, #4]
   200de:	2224      	movs	r2, #36	; 0x24
   200e0:	2100      	movs	r1, #0
   200e2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   200e4:	687b      	ldr	r3, [r7, #4]
   200e6:	3318      	adds	r3, #24
   200e8:	220c      	movs	r2, #12
   200ea:	2100      	movs	r1, #0
   200ec:	0018      	movs	r0, r3
   200ee:	4b0a      	ldr	r3, [pc, #40]	; (20118 <spi_get_config_defaults+0x7c>)
   200f0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   200f2:	687b      	ldr	r3, [r7, #4]
   200f4:	4a09      	ldr	r2, [pc, #36]	; (2011c <spi_get_config_defaults+0x80>)
   200f6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   200f8:	687b      	ldr	r3, [r7, #4]
   200fa:	2200      	movs	r2, #0
   200fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   200fe:	687b      	ldr	r3, [r7, #4]
   20100:	2200      	movs	r2, #0
   20102:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20104:	687b      	ldr	r3, [r7, #4]
   20106:	2200      	movs	r2, #0
   20108:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2010a:	687b      	ldr	r3, [r7, #4]
   2010c:	2200      	movs	r2, #0
   2010e:	635a      	str	r2, [r3, #52]	; 0x34

};
   20110:	46c0      	nop			; (mov r8, r8)
   20112:	46bd      	mov	sp, r7
   20114:	b002      	add	sp, #8
   20116:	bd80      	pop	{r7, pc}
   20118:	00036203 	.word	0x00036203
   2011c:	000186a0 	.word	0x000186a0

00020120 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20120:	b580      	push	{r7, lr}
   20122:	b082      	sub	sp, #8
   20124:	af00      	add	r7, sp, #0
   20126:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20128:	687b      	ldr	r3, [r7, #4]
   2012a:	220a      	movs	r2, #10
   2012c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2012e:	687b      	ldr	r3, [r7, #4]
   20130:	2200      	movs	r2, #0
   20132:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20134:	687b      	ldr	r3, [r7, #4]
   20136:	2200      	movs	r2, #0
   20138:	709a      	strb	r2, [r3, #2]
}
   2013a:	46c0      	nop			; (mov r8, r8)
   2013c:	46bd      	mov	sp, r7
   2013e:	b002      	add	sp, #8
   20140:	bd80      	pop	{r7, pc}
	...

00020144 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   20144:	b580      	push	{r7, lr}
   20146:	b084      	sub	sp, #16
   20148:	af00      	add	r7, sp, #0
   2014a:	6078      	str	r0, [r7, #4]
   2014c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   2014e:	683b      	ldr	r3, [r7, #0]
   20150:	781a      	ldrb	r2, [r3, #0]
   20152:	687b      	ldr	r3, [r7, #4]
   20154:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20156:	683b      	ldr	r3, [r7, #0]
   20158:	785a      	ldrb	r2, [r3, #1]
   2015a:	687b      	ldr	r3, [r7, #4]
   2015c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   2015e:	683b      	ldr	r3, [r7, #0]
   20160:	789a      	ldrb	r2, [r3, #2]
   20162:	687b      	ldr	r3, [r7, #4]
   20164:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   20166:	230c      	movs	r3, #12
   20168:	18fb      	adds	r3, r7, r3
   2016a:	0018      	movs	r0, r3
   2016c:	4b0b      	ldr	r3, [pc, #44]	; (2019c <spi_attach_slave+0x58>)
   2016e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20170:	230c      	movs	r3, #12
   20172:	18fb      	adds	r3, r7, r3
   20174:	2201      	movs	r2, #1
   20176:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20178:	687b      	ldr	r3, [r7, #4]
   2017a:	781b      	ldrb	r3, [r3, #0]
   2017c:	220c      	movs	r2, #12
   2017e:	18ba      	adds	r2, r7, r2
   20180:	0011      	movs	r1, r2
   20182:	0018      	movs	r0, r3
   20184:	4b06      	ldr	r3, [pc, #24]	; (201a0 <spi_attach_slave+0x5c>)
   20186:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20188:	687b      	ldr	r3, [r7, #4]
   2018a:	781b      	ldrb	r3, [r3, #0]
   2018c:	2101      	movs	r1, #1
   2018e:	0018      	movs	r0, r3
   20190:	4b04      	ldr	r3, [pc, #16]	; (201a4 <spi_attach_slave+0x60>)
   20192:	4798      	blx	r3
}
   20194:	46c0      	nop			; (mov r8, r8)
   20196:	46bd      	mov	sp, r7
   20198:	b004      	add	sp, #16
   2019a:	bd80      	pop	{r7, pc}
   2019c:	00020005 	.word	0x00020005
   201a0:	0002754d 	.word	0x0002754d
   201a4:	00020029 	.word	0x00020029

000201a8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   201a8:	b580      	push	{r7, lr}
   201aa:	b084      	sub	sp, #16
   201ac:	af00      	add	r7, sp, #0
   201ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201b0:	687b      	ldr	r3, [r7, #4]
   201b2:	681b      	ldr	r3, [r3, #0]
   201b4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   201b6:	687b      	ldr	r3, [r7, #4]
   201b8:	681b      	ldr	r3, [r3, #0]
   201ba:	0018      	movs	r0, r3
   201bc:	4b0b      	ldr	r3, [pc, #44]	; (201ec <spi_enable+0x44>)
   201be:	4798      	blx	r3
   201c0:	0003      	movs	r3, r0
   201c2:	0018      	movs	r0, r3
   201c4:	4b0a      	ldr	r3, [pc, #40]	; (201f0 <spi_enable+0x48>)
   201c6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   201c8:	46c0      	nop			; (mov r8, r8)
   201ca:	687b      	ldr	r3, [r7, #4]
   201cc:	0018      	movs	r0, r3
   201ce:	4b09      	ldr	r3, [pc, #36]	; (201f4 <spi_enable+0x4c>)
   201d0:	4798      	blx	r3
   201d2:	1e03      	subs	r3, r0, #0
   201d4:	d1f9      	bne.n	201ca <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   201d6:	68fb      	ldr	r3, [r7, #12]
   201d8:	681b      	ldr	r3, [r3, #0]
   201da:	2202      	movs	r2, #2
   201dc:	431a      	orrs	r2, r3
   201de:	68fb      	ldr	r3, [r7, #12]
   201e0:	601a      	str	r2, [r3, #0]
}
   201e2:	46c0      	nop			; (mov r8, r8)
   201e4:	46bd      	mov	sp, r7
   201e6:	b004      	add	sp, #16
   201e8:	bd80      	pop	{r7, pc}
   201ea:	46c0      	nop			; (mov r8, r8)
   201ec:	0002821d 	.word	0x0002821d
   201f0:	0001ffb5 	.word	0x0001ffb5
   201f4:	0002007d 	.word	0x0002007d

000201f8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   201f8:	b580      	push	{r7, lr}
   201fa:	b084      	sub	sp, #16
   201fc:	af00      	add	r7, sp, #0
   201fe:	6078      	str	r0, [r7, #4]
   20200:	000a      	movs	r2, r1
   20202:	1cfb      	adds	r3, r7, #3
   20204:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20206:	230f      	movs	r3, #15
   20208:	18fb      	adds	r3, r7, r3
   2020a:	2200      	movs	r2, #0
   2020c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2020e:	e038      	b.n	20282 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20210:	687b      	ldr	r3, [r7, #4]
   20212:	1c5a      	adds	r2, r3, #1
   20214:	607a      	str	r2, [r7, #4]
   20216:	220e      	movs	r2, #14
   20218:	18ba      	adds	r2, r7, r2
   2021a:	781b      	ldrb	r3, [r3, #0]
   2021c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2021e:	230d      	movs	r3, #13
   20220:	18fb      	adds	r3, r7, r3
   20222:	2200      	movs	r2, #0
   20224:	701a      	strb	r2, [r3, #0]
   20226:	e027      	b.n	20278 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20228:	230f      	movs	r3, #15
   2022a:	18fa      	adds	r2, r7, r3
   2022c:	230f      	movs	r3, #15
   2022e:	18fb      	adds	r3, r7, r3
   20230:	781b      	ldrb	r3, [r3, #0]
   20232:	18db      	adds	r3, r3, r3
   20234:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   20236:	230e      	movs	r3, #14
   20238:	18fa      	adds	r2, r7, r3
   2023a:	230f      	movs	r3, #15
   2023c:	18fb      	adds	r3, r7, r3
   2023e:	7812      	ldrb	r2, [r2, #0]
   20240:	781b      	ldrb	r3, [r3, #0]
   20242:	4053      	eors	r3, r2
   20244:	b2db      	uxtb	r3, r3
   20246:	b25b      	sxtb	r3, r3
   20248:	2b00      	cmp	r3, #0
   2024a:	da07      	bge.n	2025c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   2024c:	230f      	movs	r3, #15
   2024e:	18fb      	adds	r3, r7, r3
   20250:	220f      	movs	r2, #15
   20252:	18ba      	adds	r2, r7, r2
   20254:	7812      	ldrb	r2, [r2, #0]
   20256:	2109      	movs	r1, #9
   20258:	404a      	eors	r2, r1
   2025a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   2025c:	230e      	movs	r3, #14
   2025e:	18fa      	adds	r2, r7, r3
   20260:	230e      	movs	r3, #14
   20262:	18fb      	adds	r3, r7, r3
   20264:	781b      	ldrb	r3, [r3, #0]
   20266:	18db      	adds	r3, r3, r3
   20268:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2026a:	230d      	movs	r3, #13
   2026c:	18fb      	adds	r3, r7, r3
   2026e:	781a      	ldrb	r2, [r3, #0]
   20270:	230d      	movs	r3, #13
   20272:	18fb      	adds	r3, r7, r3
   20274:	3201      	adds	r2, #1
   20276:	701a      	strb	r2, [r3, #0]
   20278:	230d      	movs	r3, #13
   2027a:	18fb      	adds	r3, r7, r3
   2027c:	781b      	ldrb	r3, [r3, #0]
   2027e:	2b07      	cmp	r3, #7
   20280:	d9d2      	bls.n	20228 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   20282:	1cfb      	adds	r3, r7, #3
   20284:	781b      	ldrb	r3, [r3, #0]
   20286:	1cfa      	adds	r2, r7, #3
   20288:	1e59      	subs	r1, r3, #1
   2028a:	7011      	strb	r1, [r2, #0]
   2028c:	2b00      	cmp	r3, #0
   2028e:	d1bf      	bne.n	20210 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20290:	230f      	movs	r3, #15
   20292:	18fb      	adds	r3, r7, r3
   20294:	781b      	ldrb	r3, [r3, #0]
   20296:	005b      	lsls	r3, r3, #1
   20298:	b25b      	sxtb	r3, r3
   2029a:	2201      	movs	r2, #1
   2029c:	4313      	orrs	r3, r2
   2029e:	b25a      	sxtb	r2, r3
   202a0:	230f      	movs	r3, #15
   202a2:	18fb      	adds	r3, r7, r3
   202a4:	701a      	strb	r2, [r3, #0]
	return crc;
   202a6:	230f      	movs	r3, #15
   202a8:	18fb      	adds	r3, r7, r3
   202aa:	781b      	ldrb	r3, [r3, #0]
}
   202ac:	0018      	movs	r0, r3
   202ae:	46bd      	mov	sp, r7
   202b0:	b004      	add	sp, #16
   202b2:	bd80      	pop	{r7, pc}

000202b4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   202b4:	b590      	push	{r4, r7, lr}
   202b6:	b083      	sub	sp, #12
   202b8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   202ba:	1c7b      	adds	r3, r7, #1
   202bc:	22ff      	movs	r2, #255	; 0xff
   202be:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   202c0:	1cbb      	adds	r3, r7, #2
   202c2:	22ff      	movs	r2, #255	; 0xff
   202c4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   202c6:	1cbb      	adds	r3, r7, #2
   202c8:	881b      	ldrh	r3, [r3, #0]
   202ca:	1c79      	adds	r1, r7, #1
   202cc:	4811      	ldr	r0, [pc, #68]	; (20314 <sd_mmc_spi_wait_busy+0x60>)
   202ce:	2201      	movs	r2, #1
   202d0:	4c11      	ldr	r4, [pc, #68]	; (20318 <sd_mmc_spi_wait_busy+0x64>)
   202d2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   202d4:	4b11      	ldr	r3, [pc, #68]	; (2031c <sd_mmc_spi_wait_busy+0x68>)
   202d6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   202d8:	1cbb      	adds	r3, r7, #2
   202da:	881b      	ldrh	r3, [r3, #0]
   202dc:	1c79      	adds	r1, r7, #1
   202de:	480d      	ldr	r0, [pc, #52]	; (20314 <sd_mmc_spi_wait_busy+0x60>)
   202e0:	2201      	movs	r2, #1
   202e2:	4c0d      	ldr	r4, [pc, #52]	; (20318 <sd_mmc_spi_wait_busy+0x64>)
   202e4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   202e6:	1cbb      	adds	r3, r7, #2
   202e8:	881b      	ldrh	r3, [r3, #0]
   202ea:	1c79      	adds	r1, r7, #1
   202ec:	4809      	ldr	r0, [pc, #36]	; (20314 <sd_mmc_spi_wait_busy+0x60>)
   202ee:	2201      	movs	r2, #1
   202f0:	4c09      	ldr	r4, [pc, #36]	; (20318 <sd_mmc_spi_wait_busy+0x64>)
   202f2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   202f4:	687b      	ldr	r3, [r7, #4]
   202f6:	1e5a      	subs	r2, r3, #1
   202f8:	607a      	str	r2, [r7, #4]
   202fa:	2b00      	cmp	r3, #0
   202fc:	d101      	bne.n	20302 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   202fe:	2300      	movs	r3, #0
   20300:	e004      	b.n	2030c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20302:	1c7b      	adds	r3, r7, #1
   20304:	781b      	ldrb	r3, [r3, #0]
   20306:	2bff      	cmp	r3, #255	; 0xff
   20308:	d1ed      	bne.n	202e6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2030a:	2301      	movs	r3, #1
}
   2030c:	0018      	movs	r0, r3
   2030e:	46bd      	mov	sp, r7
   20310:	b003      	add	sp, #12
   20312:	bd90      	pop	{r4, r7, pc}
   20314:	20004248 	.word	0x20004248
   20318:	00028b5d 	.word	0x00028b5d
   2031c:	00030d40 	.word	0x00030d40

00020320 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20320:	b590      	push	{r4, r7, lr}
   20322:	b083      	sub	sp, #12
   20324:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20326:	1cbb      	adds	r3, r7, #2
   20328:	22ff      	movs	r2, #255	; 0xff
   2032a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2032c:	1c7b      	adds	r3, r7, #1
   2032e:	2200      	movs	r2, #0
   20330:	701a      	strb	r2, [r3, #0]
	i = 500000;
   20332:	4b18      	ldr	r3, [pc, #96]	; (20394 <sd_mmc_spi_start_read_block+0x74>)
   20334:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   20336:	687b      	ldr	r3, [r7, #4]
   20338:	1e5a      	subs	r2, r3, #1
   2033a:	607a      	str	r2, [r7, #4]
   2033c:	2b00      	cmp	r3, #0
   2033e:	d104      	bne.n	2034a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   20340:	4b15      	ldr	r3, [pc, #84]	; (20398 <sd_mmc_spi_start_read_block+0x78>)
   20342:	2204      	movs	r2, #4
   20344:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   20346:	2300      	movs	r3, #0
   20348:	e020      	b.n	2038c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2034a:	1cbb      	adds	r3, r7, #2
   2034c:	881b      	ldrh	r3, [r3, #0]
   2034e:	1c79      	adds	r1, r7, #1
   20350:	4812      	ldr	r0, [pc, #72]	; (2039c <sd_mmc_spi_start_read_block+0x7c>)
   20352:	2201      	movs	r2, #1
   20354:	4c12      	ldr	r4, [pc, #72]	; (203a0 <sd_mmc_spi_start_read_block+0x80>)
   20356:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   20358:	1c7b      	adds	r3, r7, #1
   2035a:	781b      	ldrb	r3, [r3, #0]
   2035c:	001a      	movs	r2, r3
   2035e:	23f0      	movs	r3, #240	; 0xf0
   20360:	4013      	ands	r3, r2
   20362:	d10e      	bne.n	20382 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   20364:	1c7b      	adds	r3, r7, #1
   20366:	781b      	ldrb	r3, [r3, #0]
   20368:	001a      	movs	r2, r3
   2036a:	2307      	movs	r3, #7
   2036c:	4013      	ands	r3, r2
   2036e:	d003      	beq.n	20378 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   20370:	4b09      	ldr	r3, [pc, #36]	; (20398 <sd_mmc_spi_start_read_block+0x78>)
   20372:	2207      	movs	r2, #7
   20374:	701a      	strb	r2, [r3, #0]
   20376:	e002      	b.n	2037e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   20378:	4b07      	ldr	r3, [pc, #28]	; (20398 <sd_mmc_spi_start_read_block+0x78>)
   2037a:	220b      	movs	r2, #11
   2037c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   2037e:	2300      	movs	r3, #0
   20380:	e004      	b.n	2038c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   20382:	1c7b      	adds	r3, r7, #1
   20384:	781b      	ldrb	r3, [r3, #0]
   20386:	2bfe      	cmp	r3, #254	; 0xfe
   20388:	d1d5      	bne.n	20336 <sd_mmc_spi_start_read_block+0x16>

	return true;
   2038a:	2301      	movs	r3, #1
}
   2038c:	0018      	movs	r0, r3
   2038e:	46bd      	mov	sp, r7
   20390:	b003      	add	sp, #12
   20392:	bd90      	pop	{r4, r7, pc}
   20394:	0007a120 	.word	0x0007a120
   20398:	2000428b 	.word	0x2000428b
   2039c:	20004248 	.word	0x20004248
   203a0:	00028b5d 	.word	0x00028b5d

000203a4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   203a4:	b590      	push	{r4, r7, lr}
   203a6:	b083      	sub	sp, #12
   203a8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   203aa:	1dbb      	adds	r3, r7, #6
   203ac:	22ff      	movs	r2, #255	; 0xff
   203ae:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   203b0:	1dbb      	adds	r3, r7, #6
   203b2:	881b      	ldrh	r3, [r3, #0]
   203b4:	1d39      	adds	r1, r7, #4
   203b6:	4804      	ldr	r0, [pc, #16]	; (203c8 <sd_mmc_spi_stop_read_block+0x24>)
   203b8:	2202      	movs	r2, #2
   203ba:	4c04      	ldr	r4, [pc, #16]	; (203cc <sd_mmc_spi_stop_read_block+0x28>)
   203bc:	47a0      	blx	r4
			dummy);
}
   203be:	46c0      	nop			; (mov r8, r8)
   203c0:	46bd      	mov	sp, r7
   203c2:	b003      	add	sp, #12
   203c4:	bd90      	pop	{r4, r7, pc}
   203c6:	46c0      	nop			; (mov r8, r8)
   203c8:	20004248 	.word	0x20004248
   203cc:	00028b5d 	.word	0x00028b5d

000203d0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   203d0:	b580      	push	{r7, lr}
   203d2:	b082      	sub	sp, #8
   203d4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   203d6:	1dfb      	adds	r3, r7, #7
   203d8:	22ff      	movs	r2, #255	; 0xff
   203da:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   203dc:	1df9      	adds	r1, r7, #7
   203de:	4b0d      	ldr	r3, [pc, #52]	; (20414 <sd_mmc_spi_start_write_block+0x44>)
   203e0:	2201      	movs	r2, #1
   203e2:	0018      	movs	r0, r3
   203e4:	4b0c      	ldr	r3, [pc, #48]	; (20418 <sd_mmc_spi_start_write_block+0x48>)
   203e6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   203e8:	4b0c      	ldr	r3, [pc, #48]	; (2041c <sd_mmc_spi_start_write_block+0x4c>)
   203ea:	881b      	ldrh	r3, [r3, #0]
   203ec:	2b01      	cmp	r3, #1
   203ee:	d103      	bne.n	203f8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   203f0:	1dbb      	adds	r3, r7, #6
   203f2:	22fe      	movs	r2, #254	; 0xfe
   203f4:	701a      	strb	r2, [r3, #0]
   203f6:	e002      	b.n	203fe <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   203f8:	1dbb      	adds	r3, r7, #6
   203fa:	22fc      	movs	r2, #252	; 0xfc
   203fc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   203fe:	1db9      	adds	r1, r7, #6
   20400:	4b04      	ldr	r3, [pc, #16]	; (20414 <sd_mmc_spi_start_write_block+0x44>)
   20402:	2201      	movs	r2, #1
   20404:	0018      	movs	r0, r3
   20406:	4b04      	ldr	r3, [pc, #16]	; (20418 <sd_mmc_spi_start_write_block+0x48>)
   20408:	4798      	blx	r3
}
   2040a:	46c0      	nop			; (mov r8, r8)
   2040c:	46bd      	mov	sp, r7
   2040e:	b002      	add	sp, #8
   20410:	bd80      	pop	{r7, pc}
   20412:	46c0      	nop			; (mov r8, r8)
   20414:	20004248 	.word	0x20004248
   20418:	00028d81 	.word	0x00028d81
   2041c:	20004296 	.word	0x20004296

00020420 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20420:	b590      	push	{r4, r7, lr}
   20422:	b083      	sub	sp, #12
   20424:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20426:	1dbb      	adds	r3, r7, #6
   20428:	22ff      	movs	r2, #255	; 0xff
   2042a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2042c:	1cbb      	adds	r3, r7, #2
   2042e:	2201      	movs	r2, #1
   20430:	4252      	negs	r2, r2
   20432:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20434:	1cb9      	adds	r1, r7, #2
   20436:	4b1b      	ldr	r3, [pc, #108]	; (204a4 <sd_mmc_spi_stop_write_block+0x84>)
   20438:	2202      	movs	r2, #2
   2043a:	0018      	movs	r0, r3
   2043c:	4b1a      	ldr	r3, [pc, #104]	; (204a8 <sd_mmc_spi_stop_write_block+0x88>)
   2043e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20440:	1dbb      	adds	r3, r7, #6
   20442:	881b      	ldrh	r3, [r3, #0]
   20444:	1d79      	adds	r1, r7, #5
   20446:	4817      	ldr	r0, [pc, #92]	; (204a4 <sd_mmc_spi_stop_write_block+0x84>)
   20448:	2201      	movs	r2, #1
   2044a:	4c18      	ldr	r4, [pc, #96]	; (204ac <sd_mmc_spi_stop_write_block+0x8c>)
   2044c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   2044e:	1d7b      	adds	r3, r7, #5
   20450:	781b      	ldrb	r3, [r3, #0]
   20452:	001a      	movs	r2, r3
   20454:	2310      	movs	r3, #16
   20456:	4013      	ands	r3, r2
   20458:	d105      	bne.n	20466 <sd_mmc_spi_stop_write_block+0x46>
   2045a:	1d7b      	adds	r3, r7, #5
   2045c:	781b      	ldrb	r3, [r3, #0]
   2045e:	001a      	movs	r2, r3
   20460:	2301      	movs	r3, #1
   20462:	4013      	ands	r3, r2
   20464:	d104      	bne.n	20470 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20466:	4b12      	ldr	r3, [pc, #72]	; (204b0 <sd_mmc_spi_stop_write_block+0x90>)
   20468:	2201      	movs	r2, #1
   2046a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   2046c:	2300      	movs	r3, #0
   2046e:	e014      	b.n	2049a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   20470:	1d7b      	adds	r3, r7, #5
   20472:	781b      	ldrb	r3, [r3, #0]
   20474:	001a      	movs	r2, r3
   20476:	231e      	movs	r3, #30
   20478:	4013      	ands	r3, r2
   2047a:	2b04      	cmp	r3, #4
   2047c:	d00b      	beq.n	20496 <sd_mmc_spi_stop_write_block+0x76>
   2047e:	2b0a      	cmp	r3, #10
   20480:	d104      	bne.n	2048c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   20482:	4b0b      	ldr	r3, [pc, #44]	; (204b0 <sd_mmc_spi_stop_write_block+0x90>)
   20484:	2208      	movs	r2, #8
   20486:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20488:	2300      	movs	r3, #0
   2048a:	e006      	b.n	2049a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   2048c:	4b08      	ldr	r3, [pc, #32]	; (204b0 <sd_mmc_spi_stop_write_block+0x90>)
   2048e:	220a      	movs	r2, #10
   20490:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20492:	2300      	movs	r3, #0
   20494:	e001      	b.n	2049a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   20496:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20498:	2301      	movs	r3, #1
}
   2049a:	0018      	movs	r0, r3
   2049c:	46bd      	mov	sp, r7
   2049e:	b003      	add	sp, #12
   204a0:	bd90      	pop	{r4, r7, pc}
   204a2:	46c0      	nop			; (mov r8, r8)
   204a4:	20004248 	.word	0x20004248
   204a8:	00028d81 	.word	0x00028d81
   204ac:	00028b5d 	.word	0x00028b5d
   204b0:	2000428b 	.word	0x2000428b

000204b4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   204b4:	b590      	push	{r4, r7, lr}
   204b6:	b083      	sub	sp, #12
   204b8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   204ba:	4b1d      	ldr	r3, [pc, #116]	; (20530 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   204bc:	881b      	ldrh	r3, [r3, #0]
   204be:	2b01      	cmp	r3, #1
   204c0:	d101      	bne.n	204c6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   204c2:	2301      	movs	r3, #1
   204c4:	e030      	b.n	20528 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   204c6:	4b1a      	ldr	r3, [pc, #104]	; (20530 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   204c8:	881b      	ldrh	r3, [r3, #0]
   204ca:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   204cc:	4b19      	ldr	r3, [pc, #100]	; (20534 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   204ce:	681a      	ldr	r2, [r3, #0]
   204d0:	4b19      	ldr	r3, [pc, #100]	; (20538 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   204d2:	881b      	ldrh	r3, [r3, #0]
   204d4:	0019      	movs	r1, r3
   204d6:	4b19      	ldr	r3, [pc, #100]	; (2053c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   204d8:	0010      	movs	r0, r2
   204da:	4798      	blx	r3
   204dc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   204de:	429c      	cmp	r4, r3
   204e0:	d901      	bls.n	204e6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   204e2:	2301      	movs	r3, #1
   204e4:	e020      	b.n	20528 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   204e6:	1dfb      	adds	r3, r7, #7
   204e8:	22ff      	movs	r2, #255	; 0xff
   204ea:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   204ec:	1df9      	adds	r1, r7, #7
   204ee:	4b14      	ldr	r3, [pc, #80]	; (20540 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   204f0:	2201      	movs	r2, #1
   204f2:	0018      	movs	r0, r3
   204f4:	4b13      	ldr	r3, [pc, #76]	; (20544 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   204f6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   204f8:	1dfb      	adds	r3, r7, #7
   204fa:	22fd      	movs	r2, #253	; 0xfd
   204fc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   204fe:	1df9      	adds	r1, r7, #7
   20500:	4b0f      	ldr	r3, [pc, #60]	; (20540 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20502:	2201      	movs	r2, #1
   20504:	0018      	movs	r0, r3
   20506:	4b0f      	ldr	r3, [pc, #60]	; (20544 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20508:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2050a:	4b0f      	ldr	r3, [pc, #60]	; (20548 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2050c:	4798      	blx	r3
   2050e:	0003      	movs	r3, r0
   20510:	001a      	movs	r2, r3
   20512:	2301      	movs	r3, #1
   20514:	4053      	eors	r3, r2
   20516:	b2db      	uxtb	r3, r3
   20518:	2b00      	cmp	r3, #0
   2051a:	d004      	beq.n	20526 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2051c:	4b0b      	ldr	r3, [pc, #44]	; (2054c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2051e:	2205      	movs	r2, #5
   20520:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20522:	2300      	movs	r3, #0
   20524:	e000      	b.n	20528 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20526:	2301      	movs	r3, #1
}
   20528:	0018      	movs	r0, r3
   2052a:	46bd      	mov	sp, r7
   2052c:	b003      	add	sp, #12
   2052e:	bd90      	pop	{r4, r7, pc}
   20530:	20004296 	.word	0x20004296
   20534:	20004290 	.word	0x20004290
   20538:	20004294 	.word	0x20004294
   2053c:	000336a5 	.word	0x000336a5
   20540:	20004248 	.word	0x20004248
   20544:	00028d81 	.word	0x00028d81
   20548:	000202b5 	.word	0x000202b5
   2054c:	2000428b 	.word	0x2000428b

00020550 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   20550:	b580      	push	{r7, lr}
   20552:	b090      	sub	sp, #64	; 0x40
   20554:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20556:	4b1f      	ldr	r3, [pc, #124]	; (205d4 <sd_mmc_spi_init+0x84>)
   20558:	2200      	movs	r2, #0
   2055a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2055c:	233c      	movs	r3, #60	; 0x3c
   2055e:	18fb      	adds	r3, r7, r3
   20560:	0018      	movs	r0, r3
   20562:	4b1d      	ldr	r3, [pc, #116]	; (205d8 <sd_mmc_spi_init+0x88>)
   20564:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   20566:	1d3b      	adds	r3, r7, #4
   20568:	0018      	movs	r0, r3
   2056a:	4b1c      	ldr	r3, [pc, #112]	; (205dc <sd_mmc_spi_init+0x8c>)
   2056c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   2056e:	1d3b      	adds	r3, r7, #4
   20570:	2280      	movs	r2, #128	; 0x80
   20572:	0252      	lsls	r2, r2, #9
   20574:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   20576:	1d3b      	adds	r3, r7, #4
   20578:	4a19      	ldr	r2, [pc, #100]	; (205e0 <sd_mmc_spi_init+0x90>)
   2057a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   2057c:	1d3b      	adds	r3, r7, #4
   2057e:	4a19      	ldr	r2, [pc, #100]	; (205e4 <sd_mmc_spi_init+0x94>)
   20580:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   20582:	1d3b      	adds	r3, r7, #4
   20584:	4a18      	ldr	r2, [pc, #96]	; (205e8 <sd_mmc_spi_init+0x98>)
   20586:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   20588:	1d3b      	adds	r3, r7, #4
   2058a:	4a18      	ldr	r2, [pc, #96]	; (205ec <sd_mmc_spi_init+0x9c>)
   2058c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   2058e:	1d3b      	adds	r3, r7, #4
   20590:	2224      	movs	r2, #36	; 0x24
   20592:	2100      	movs	r1, #0
   20594:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   20596:	1d3b      	adds	r3, r7, #4
   20598:	4a15      	ldr	r2, [pc, #84]	; (205f0 <sd_mmc_spi_init+0xa0>)
   2059a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2059c:	1d3a      	adds	r2, r7, #4
   2059e:	4915      	ldr	r1, [pc, #84]	; (205f4 <sd_mmc_spi_init+0xa4>)
   205a0:	4b15      	ldr	r3, [pc, #84]	; (205f8 <sd_mmc_spi_init+0xa8>)
   205a2:	0018      	movs	r0, r3
   205a4:	4b15      	ldr	r3, [pc, #84]	; (205fc <sd_mmc_spi_init+0xac>)
   205a6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   205a8:	4b13      	ldr	r3, [pc, #76]	; (205f8 <sd_mmc_spi_init+0xa8>)
   205aa:	0018      	movs	r0, r3
   205ac:	4b14      	ldr	r3, [pc, #80]	; (20600 <sd_mmc_spi_init+0xb0>)
   205ae:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   205b0:	4b14      	ldr	r3, [pc, #80]	; (20604 <sd_mmc_spi_init+0xb4>)
   205b2:	0018      	movs	r0, r3
   205b4:	4b14      	ldr	r3, [pc, #80]	; (20608 <sd_mmc_spi_init+0xb8>)
   205b6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   205b8:	4b14      	ldr	r3, [pc, #80]	; (2060c <sd_mmc_spi_init+0xbc>)
   205ba:	781a      	ldrb	r2, [r3, #0]
   205bc:	4b11      	ldr	r3, [pc, #68]	; (20604 <sd_mmc_spi_init+0xb4>)
   205be:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   205c0:	4a10      	ldr	r2, [pc, #64]	; (20604 <sd_mmc_spi_init+0xb4>)
   205c2:	4b13      	ldr	r3, [pc, #76]	; (20610 <sd_mmc_spi_init+0xc0>)
   205c4:	0011      	movs	r1, r2
   205c6:	0018      	movs	r0, r3
   205c8:	4b12      	ldr	r3, [pc, #72]	; (20614 <sd_mmc_spi_init+0xc4>)
   205ca:	4798      	blx	r3
}
   205cc:	46c0      	nop			; (mov r8, r8)
   205ce:	46bd      	mov	sp, r7
   205d0:	b010      	add	sp, #64	; 0x40
   205d2:	bd80      	pop	{r7, pc}
   205d4:	2000428b 	.word	0x2000428b
   205d8:	00020005 	.word	0x00020005
   205dc:	0002009d 	.word	0x0002009d
   205e0:	00100002 	.word	0x00100002
   205e4:	00110002 	.word	0x00110002
   205e8:	00120002 	.word	0x00120002
   205ec:	00130002 	.word	0x00130002
   205f0:	00061a80 	.word	0x00061a80
   205f4:	42000c00 	.word	0x42000c00
   205f8:	20004248 	.word	0x20004248
   205fc:	000289cd 	.word	0x000289cd
   20600:	000201a9 	.word	0x000201a9
   20604:	20004288 	.word	0x20004288
   20608:	00020121 	.word	0x00020121
   2060c:	20000118 	.word	0x20000118
   20610:	20004284 	.word	0x20004284
   20614:	00020145 	.word	0x00020145

00020618 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20618:	b590      	push	{r4, r7, lr}
   2061a:	b083      	sub	sp, #12
   2061c:	af00      	add	r7, sp, #0
   2061e:	0004      	movs	r4, r0
   20620:	6039      	str	r1, [r7, #0]
   20622:	0010      	movs	r0, r2
   20624:	0019      	movs	r1, r3
   20626:	1dfb      	adds	r3, r7, #7
   20628:	1c22      	adds	r2, r4, #0
   2062a:	701a      	strb	r2, [r3, #0]
   2062c:	1dbb      	adds	r3, r7, #6
   2062e:	1c02      	adds	r2, r0, #0
   20630:	701a      	strb	r2, [r3, #0]
   20632:	1d7b      	adds	r3, r7, #5
   20634:	1c0a      	adds	r2, r1, #0
   20636:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20638:	4b13      	ldr	r3, [pc, #76]	; (20688 <sd_mmc_spi_select_device+0x70>)
   2063a:	2200      	movs	r2, #0
   2063c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   2063e:	683b      	ldr	r3, [r7, #0]
   20640:	4a12      	ldr	r2, [pc, #72]	; (2068c <sd_mmc_spi_select_device+0x74>)
   20642:	4293      	cmp	r3, r2
   20644:	d907      	bls.n	20656 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20646:	4b11      	ldr	r3, [pc, #68]	; (2068c <sd_mmc_spi_select_device+0x74>)
   20648:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2064a:	e004      	b.n	20656 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   2064c:	683b      	ldr	r3, [r7, #0]
   2064e:	08db      	lsrs	r3, r3, #3
   20650:	683a      	ldr	r2, [r7, #0]
   20652:	1ad3      	subs	r3, r2, r3
   20654:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20656:	683a      	ldr	r2, [r7, #0]
   20658:	4b0d      	ldr	r3, [pc, #52]	; (20690 <sd_mmc_spi_select_device+0x78>)
   2065a:	0011      	movs	r1, r2
   2065c:	0018      	movs	r0, r3
   2065e:	4b0d      	ldr	r3, [pc, #52]	; (20694 <sd_mmc_spi_select_device+0x7c>)
   20660:	4798      	blx	r3
   20662:	0003      	movs	r3, r0
   20664:	2b17      	cmp	r3, #23
   20666:	d0f1      	beq.n	2064c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   20668:	1dfb      	adds	r3, r7, #7
   2066a:	781a      	ldrb	r2, [r3, #0]
   2066c:	0013      	movs	r3, r2
   2066e:	005b      	lsls	r3, r3, #1
   20670:	189b      	adds	r3, r3, r2
   20672:	4a09      	ldr	r2, [pc, #36]	; (20698 <sd_mmc_spi_select_device+0x80>)
   20674:	1899      	adds	r1, r3, r2
   20676:	4b06      	ldr	r3, [pc, #24]	; (20690 <sd_mmc_spi_select_device+0x78>)
   20678:	2201      	movs	r2, #1
   2067a:	0018      	movs	r0, r3
   2067c:	4b07      	ldr	r3, [pc, #28]	; (2069c <sd_mmc_spi_select_device+0x84>)
   2067e:	4798      	blx	r3
}
   20680:	46c0      	nop			; (mov r8, r8)
   20682:	46bd      	mov	sp, r7
   20684:	b003      	add	sp, #12
   20686:	bd90      	pop	{r4, r7, pc}
   20688:	2000428b 	.word	0x2000428b
   2068c:	00989680 	.word	0x00989680
   20690:	20004248 	.word	0x20004248
   20694:	000286f5 	.word	0x000286f5
   20698:	20004284 	.word	0x20004284
   2069c:	00028c91 	.word	0x00028c91

000206a0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   206a0:	b580      	push	{r7, lr}
   206a2:	b082      	sub	sp, #8
   206a4:	af00      	add	r7, sp, #0
   206a6:	0002      	movs	r2, r0
   206a8:	1dfb      	adds	r3, r7, #7
   206aa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   206ac:	4b09      	ldr	r3, [pc, #36]	; (206d4 <sd_mmc_spi_deselect_device+0x34>)
   206ae:	2200      	movs	r2, #0
   206b0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   206b2:	1dfb      	adds	r3, r7, #7
   206b4:	781a      	ldrb	r2, [r3, #0]
   206b6:	0013      	movs	r3, r2
   206b8:	005b      	lsls	r3, r3, #1
   206ba:	189b      	adds	r3, r3, r2
   206bc:	4a06      	ldr	r2, [pc, #24]	; (206d8 <sd_mmc_spi_deselect_device+0x38>)
   206be:	1899      	adds	r1, r3, r2
   206c0:	4b06      	ldr	r3, [pc, #24]	; (206dc <sd_mmc_spi_deselect_device+0x3c>)
   206c2:	2200      	movs	r2, #0
   206c4:	0018      	movs	r0, r3
   206c6:	4b06      	ldr	r3, [pc, #24]	; (206e0 <sd_mmc_spi_deselect_device+0x40>)
   206c8:	4798      	blx	r3
}
   206ca:	46c0      	nop			; (mov r8, r8)
   206cc:	46bd      	mov	sp, r7
   206ce:	b002      	add	sp, #8
   206d0:	bd80      	pop	{r7, pc}
   206d2:	46c0      	nop			; (mov r8, r8)
   206d4:	2000428b 	.word	0x2000428b
   206d8:	20004284 	.word	0x20004284
   206dc:	20004248 	.word	0x20004248
   206e0:	00028c91 	.word	0x00028c91

000206e4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   206e4:	b580      	push	{r7, lr}
   206e6:	b082      	sub	sp, #8
   206e8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   206ea:	1dbb      	adds	r3, r7, #6
   206ec:	22ff      	movs	r2, #255	; 0xff
   206ee:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   206f0:	4b0c      	ldr	r3, [pc, #48]	; (20724 <sd_mmc_spi_send_clock+0x40>)
   206f2:	2200      	movs	r2, #0
   206f4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   206f6:	1dfb      	adds	r3, r7, #7
   206f8:	2200      	movs	r2, #0
   206fa:	701a      	strb	r2, [r3, #0]
   206fc:	e00a      	b.n	20714 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   206fe:	1db9      	adds	r1, r7, #6
   20700:	4b09      	ldr	r3, [pc, #36]	; (20728 <sd_mmc_spi_send_clock+0x44>)
   20702:	2201      	movs	r2, #1
   20704:	0018      	movs	r0, r3
   20706:	4b09      	ldr	r3, [pc, #36]	; (2072c <sd_mmc_spi_send_clock+0x48>)
   20708:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2070a:	1dfb      	adds	r3, r7, #7
   2070c:	781a      	ldrb	r2, [r3, #0]
   2070e:	1dfb      	adds	r3, r7, #7
   20710:	3201      	adds	r2, #1
   20712:	701a      	strb	r2, [r3, #0]
   20714:	1dfb      	adds	r3, r7, #7
   20716:	781b      	ldrb	r3, [r3, #0]
   20718:	2b09      	cmp	r3, #9
   2071a:	d9f0      	bls.n	206fe <sd_mmc_spi_send_clock+0x1a>
	}
}
   2071c:	46c0      	nop			; (mov r8, r8)
   2071e:	46bd      	mov	sp, r7
   20720:	b002      	add	sp, #8
   20722:	bd80      	pop	{r7, pc}
   20724:	2000428b 	.word	0x2000428b
   20728:	20004248 	.word	0x20004248
   2072c:	00028d81 	.word	0x00028d81

00020730 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20730:	b590      	push	{r4, r7, lr}
   20732:	b085      	sub	sp, #20
   20734:	af02      	add	r7, sp, #8
   20736:	6078      	str	r0, [r7, #4]
   20738:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   2073a:	6839      	ldr	r1, [r7, #0]
   2073c:	6878      	ldr	r0, [r7, #4]
   2073e:	2300      	movs	r3, #0
   20740:	9300      	str	r3, [sp, #0]
   20742:	2300      	movs	r3, #0
   20744:	2200      	movs	r2, #0
   20746:	4c03      	ldr	r4, [pc, #12]	; (20754 <sd_mmc_spi_send_cmd+0x24>)
   20748:	47a0      	blx	r4
   2074a:	0003      	movs	r3, r0
}
   2074c:	0018      	movs	r0, r3
   2074e:	46bd      	mov	sp, r7
   20750:	b003      	add	sp, #12
   20752:	bd90      	pop	{r4, r7, pc}
   20754:	00020759 	.word	0x00020759

00020758 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20758:	b590      	push	{r4, r7, lr}
   2075a:	b089      	sub	sp, #36	; 0x24
   2075c:	af00      	add	r7, sp, #0
   2075e:	60f8      	str	r0, [r7, #12]
   20760:	60b9      	str	r1, [r7, #8]
   20762:	0019      	movs	r1, r3
   20764:	1dbb      	adds	r3, r7, #6
   20766:	801a      	strh	r2, [r3, #0]
   20768:	1d3b      	adds	r3, r7, #4
   2076a:	1c0a      	adds	r2, r1, #0
   2076c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   2076e:	231b      	movs	r3, #27
   20770:	18fb      	adds	r3, r7, r3
   20772:	22ff      	movs	r2, #255	; 0xff
   20774:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20776:	231c      	movs	r3, #28
   20778:	18fb      	adds	r3, r7, r3
   2077a:	22ff      	movs	r2, #255	; 0xff
   2077c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2077e:	4b72      	ldr	r3, [pc, #456]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   20780:	2200      	movs	r2, #0
   20782:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20784:	68fb      	ldr	r3, [r7, #12]
   20786:	b2db      	uxtb	r3, r3
   20788:	223f      	movs	r2, #63	; 0x3f
   2078a:	4013      	ands	r3, r2
   2078c:	b2db      	uxtb	r3, r3
   2078e:	2240      	movs	r2, #64	; 0x40
   20790:	4313      	orrs	r3, r2
   20792:	b2da      	uxtb	r2, r3
   20794:	2314      	movs	r3, #20
   20796:	18fb      	adds	r3, r7, r3
   20798:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2079a:	68bb      	ldr	r3, [r7, #8]
   2079c:	0e1b      	lsrs	r3, r3, #24
   2079e:	b2da      	uxtb	r2, r3
   207a0:	2314      	movs	r3, #20
   207a2:	18fb      	adds	r3, r7, r3
   207a4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   207a6:	68bb      	ldr	r3, [r7, #8]
   207a8:	0c1b      	lsrs	r3, r3, #16
   207aa:	b2da      	uxtb	r2, r3
   207ac:	2314      	movs	r3, #20
   207ae:	18fb      	adds	r3, r7, r3
   207b0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   207b2:	68bb      	ldr	r3, [r7, #8]
   207b4:	0a1b      	lsrs	r3, r3, #8
   207b6:	b2da      	uxtb	r2, r3
   207b8:	2314      	movs	r3, #20
   207ba:	18fb      	adds	r3, r7, r3
   207bc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   207be:	68bb      	ldr	r3, [r7, #8]
   207c0:	b2da      	uxtb	r2, r3
   207c2:	2314      	movs	r3, #20
   207c4:	18fb      	adds	r3, r7, r3
   207c6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   207c8:	2314      	movs	r3, #20
   207ca:	18fb      	adds	r3, r7, r3
   207cc:	2105      	movs	r1, #5
   207ce:	0018      	movs	r0, r3
   207d0:	4b5e      	ldr	r3, [pc, #376]	; (2094c <sd_mmc_spi_adtc_start+0x1f4>)
   207d2:	4798      	blx	r3
   207d4:	0003      	movs	r3, r0
   207d6:	001a      	movs	r2, r3
   207d8:	2314      	movs	r3, #20
   207da:	18fb      	adds	r3, r7, r3
   207dc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   207de:	231b      	movs	r3, #27
   207e0:	18f9      	adds	r1, r7, r3
   207e2:	4b5b      	ldr	r3, [pc, #364]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   207e4:	2201      	movs	r2, #1
   207e6:	0018      	movs	r0, r3
   207e8:	4b5a      	ldr	r3, [pc, #360]	; (20954 <sd_mmc_spi_adtc_start+0x1fc>)
   207ea:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   207ec:	2314      	movs	r3, #20
   207ee:	18f9      	adds	r1, r7, r3
   207f0:	4b57      	ldr	r3, [pc, #348]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   207f2:	2206      	movs	r2, #6
   207f4:	0018      	movs	r0, r3
   207f6:	4b57      	ldr	r3, [pc, #348]	; (20954 <sd_mmc_spi_adtc_start+0x1fc>)
   207f8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   207fa:	2313      	movs	r3, #19
   207fc:	18fb      	adds	r3, r7, r3
   207fe:	22ff      	movs	r2, #255	; 0xff
   20800:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20802:	231c      	movs	r3, #28
   20804:	18fb      	adds	r3, r7, r3
   20806:	881b      	ldrh	r3, [r3, #0]
   20808:	2213      	movs	r2, #19
   2080a:	18b9      	adds	r1, r7, r2
   2080c:	4850      	ldr	r0, [pc, #320]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   2080e:	2201      	movs	r2, #1
   20810:	4c51      	ldr	r4, [pc, #324]	; (20958 <sd_mmc_spi_adtc_start+0x200>)
   20812:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20814:	231f      	movs	r3, #31
   20816:	18fb      	adds	r3, r7, r3
   20818:	2207      	movs	r2, #7
   2081a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   2081c:	231c      	movs	r3, #28
   2081e:	18fb      	adds	r3, r7, r3
   20820:	881b      	ldrh	r3, [r3, #0]
   20822:	2213      	movs	r2, #19
   20824:	18b9      	adds	r1, r7, r2
   20826:	484a      	ldr	r0, [pc, #296]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   20828:	2201      	movs	r2, #1
   2082a:	4c4b      	ldr	r4, [pc, #300]	; (20958 <sd_mmc_spi_adtc_start+0x200>)
   2082c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   2082e:	2313      	movs	r3, #19
   20830:	18fb      	adds	r3, r7, r3
   20832:	781b      	ldrb	r3, [r3, #0]
   20834:	b25b      	sxtb	r3, r3
   20836:	2b00      	cmp	r3, #0
   20838:	da10      	bge.n	2085c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   2083a:	231f      	movs	r3, #31
   2083c:	18fb      	adds	r3, r7, r3
   2083e:	221f      	movs	r2, #31
   20840:	18ba      	adds	r2, r7, r2
   20842:	7812      	ldrb	r2, [r2, #0]
   20844:	3a01      	subs	r2, #1
   20846:	701a      	strb	r2, [r3, #0]
   20848:	231f      	movs	r3, #31
   2084a:	18fb      	adds	r3, r7, r3
   2084c:	781b      	ldrb	r3, [r3, #0]
   2084e:	2b00      	cmp	r3, #0
   20850:	d1e4      	bne.n	2081c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20852:	4b3d      	ldr	r3, [pc, #244]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   20854:	2202      	movs	r2, #2
   20856:	701a      	strb	r2, [r3, #0]
			return false;
   20858:	2300      	movs	r3, #0
   2085a:	e070      	b.n	2093e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   2085c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   2085e:	2313      	movs	r3, #19
   20860:	18fb      	adds	r3, r7, r3
   20862:	781b      	ldrb	r3, [r3, #0]
   20864:	001a      	movs	r2, r3
   20866:	4b3d      	ldr	r3, [pc, #244]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   20868:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   2086a:	2313      	movs	r3, #19
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	781b      	ldrb	r3, [r3, #0]
   20870:	001a      	movs	r2, r3
   20872:	2308      	movs	r3, #8
   20874:	4013      	ands	r3, r2
   20876:	d004      	beq.n	20882 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20878:	4b33      	ldr	r3, [pc, #204]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   2087a:	2206      	movs	r2, #6
   2087c:	701a      	strb	r2, [r3, #0]
		return false;
   2087e:	2300      	movs	r3, #0
   20880:	e05d      	b.n	2093e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20882:	2313      	movs	r3, #19
   20884:	18fb      	adds	r3, r7, r3
   20886:	781b      	ldrb	r3, [r3, #0]
   20888:	001a      	movs	r2, r3
   2088a:	2304      	movs	r3, #4
   2088c:	4013      	ands	r3, r2
   2088e:	d004      	beq.n	2089a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20890:	4b2d      	ldr	r3, [pc, #180]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   20892:	2209      	movs	r2, #9
   20894:	701a      	strb	r2, [r3, #0]
		return false;
   20896:	2300      	movs	r3, #0
   20898:	e051      	b.n	2093e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2089a:	2313      	movs	r3, #19
   2089c:	18fb      	adds	r3, r7, r3
   2089e:	781b      	ldrb	r3, [r3, #0]
   208a0:	001a      	movs	r2, r3
   208a2:	2301      	movs	r3, #1
   208a4:	439a      	bics	r2, r3
   208a6:	1e13      	subs	r3, r2, #0
   208a8:	d004      	beq.n	208b4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   208aa:	4b27      	ldr	r3, [pc, #156]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   208ac:	2201      	movs	r2, #1
   208ae:	701a      	strb	r2, [r3, #0]
		return false;
   208b0:	2300      	movs	r3, #0
   208b2:	e044      	b.n	2093e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   208b4:	68fa      	ldr	r2, [r7, #12]
   208b6:	2380      	movs	r3, #128	; 0x80
   208b8:	019b      	lsls	r3, r3, #6
   208ba:	4013      	ands	r3, r2
   208bc:	d00d      	beq.n	208da <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   208be:	4b28      	ldr	r3, [pc, #160]	; (20960 <sd_mmc_spi_adtc_start+0x208>)
   208c0:	4798      	blx	r3
   208c2:	0003      	movs	r3, r0
   208c4:	001a      	movs	r2, r3
   208c6:	2301      	movs	r3, #1
   208c8:	4053      	eors	r3, r2
   208ca:	b2db      	uxtb	r3, r3
   208cc:	2b00      	cmp	r3, #0
   208ce:	d004      	beq.n	208da <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   208d0:	4b1d      	ldr	r3, [pc, #116]	; (20948 <sd_mmc_spi_adtc_start+0x1f0>)
   208d2:	2203      	movs	r2, #3
   208d4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   208d6:	2300      	movs	r3, #0
   208d8:	e031      	b.n	2093e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   208da:	68fa      	ldr	r2, [r7, #12]
   208dc:	2380      	movs	r3, #128	; 0x80
   208de:	009b      	lsls	r3, r3, #2
   208e0:	4013      	ands	r3, r2
   208e2:	d00e      	beq.n	20902 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   208e4:	4b1d      	ldr	r3, [pc, #116]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   208e6:	2200      	movs	r2, #0
   208e8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   208ea:	231c      	movs	r3, #28
   208ec:	18fb      	adds	r3, r7, r3
   208ee:	881b      	ldrh	r3, [r3, #0]
   208f0:	491a      	ldr	r1, [pc, #104]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   208f2:	4817      	ldr	r0, [pc, #92]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   208f4:	2201      	movs	r2, #1
   208f6:	4c18      	ldr	r4, [pc, #96]	; (20958 <sd_mmc_spi_adtc_start+0x200>)
   208f8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   208fa:	4b18      	ldr	r3, [pc, #96]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   208fc:	681a      	ldr	r2, [r3, #0]
   208fe:	4b17      	ldr	r3, [pc, #92]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   20900:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20902:	68fa      	ldr	r2, [r7, #12]
   20904:	2380      	movs	r3, #128	; 0x80
   20906:	00db      	lsls	r3, r3, #3
   20908:	4013      	ands	r3, r2
   2090a:	d00c      	beq.n	20926 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   2090c:	231c      	movs	r3, #28
   2090e:	18fb      	adds	r3, r7, r3
   20910:	881b      	ldrh	r3, [r3, #0]
   20912:	4912      	ldr	r1, [pc, #72]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   20914:	480e      	ldr	r0, [pc, #56]	; (20950 <sd_mmc_spi_adtc_start+0x1f8>)
   20916:	2204      	movs	r2, #4
   20918:	4c0f      	ldr	r4, [pc, #60]	; (20958 <sd_mmc_spi_adtc_start+0x200>)
   2091a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   2091c:	4b0f      	ldr	r3, [pc, #60]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   2091e:	681b      	ldr	r3, [r3, #0]
   20920:	ba1a      	rev	r2, r3
   20922:	4b0e      	ldr	r3, [pc, #56]	; (2095c <sd_mmc_spi_adtc_start+0x204>)
   20924:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20926:	4b0f      	ldr	r3, [pc, #60]	; (20964 <sd_mmc_spi_adtc_start+0x20c>)
   20928:	1dba      	adds	r2, r7, #6
   2092a:	8812      	ldrh	r2, [r2, #0]
   2092c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   2092e:	4b0e      	ldr	r3, [pc, #56]	; (20968 <sd_mmc_spi_adtc_start+0x210>)
   20930:	1d3a      	adds	r2, r7, #4
   20932:	8812      	ldrh	r2, [r2, #0]
   20934:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20936:	4b0d      	ldr	r3, [pc, #52]	; (2096c <sd_mmc_spi_adtc_start+0x214>)
   20938:	2200      	movs	r2, #0
   2093a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   2093c:	2301      	movs	r3, #1
}
   2093e:	0018      	movs	r0, r3
   20940:	46bd      	mov	sp, r7
   20942:	b009      	add	sp, #36	; 0x24
   20944:	bd90      	pop	{r4, r7, pc}
   20946:	46c0      	nop			; (mov r8, r8)
   20948:	2000428b 	.word	0x2000428b
   2094c:	000201f9 	.word	0x000201f9
   20950:	20004248 	.word	0x20004248
   20954:	00028d81 	.word	0x00028d81
   20958:	00028b5d 	.word	0x00028b5d
   2095c:	2000428c 	.word	0x2000428c
   20960:	000202b5 	.word	0x000202b5
   20964:	20004294 	.word	0x20004294
   20968:	20004296 	.word	0x20004296
   2096c:	20004290 	.word	0x20004290

00020970 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20970:	b580      	push	{r7, lr}
   20972:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20974:	4b02      	ldr	r3, [pc, #8]	; (20980 <sd_mmc_spi_get_response+0x10>)
   20976:	681b      	ldr	r3, [r3, #0]
}
   20978:	0018      	movs	r0, r3
   2097a:	46bd      	mov	sp, r7
   2097c:	bd80      	pop	{r7, pc}
   2097e:	46c0      	nop			; (mov r8, r8)
   20980:	2000428c 	.word	0x2000428c

00020984 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20984:	b590      	push	{r4, r7, lr}
   20986:	b085      	sub	sp, #20
   20988:	af00      	add	r7, sp, #0
   2098a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   2098c:	230e      	movs	r3, #14
   2098e:	18fb      	adds	r3, r7, r3
   20990:	22ff      	movs	r2, #255	; 0xff
   20992:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20994:	4b1c      	ldr	r3, [pc, #112]	; (20a08 <sd_mmc_spi_read_word+0x84>)
   20996:	2200      	movs	r2, #0
   20998:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2099a:	4b1c      	ldr	r3, [pc, #112]	; (20a0c <sd_mmc_spi_read_word+0x88>)
   2099c:	681a      	ldr	r2, [r3, #0]
   2099e:	4b1c      	ldr	r3, [pc, #112]	; (20a10 <sd_mmc_spi_read_word+0x8c>)
   209a0:	881b      	ldrh	r3, [r3, #0]
   209a2:	0019      	movs	r1, r3
   209a4:	4b1b      	ldr	r3, [pc, #108]	; (20a14 <sd_mmc_spi_read_word+0x90>)
   209a6:	0010      	movs	r0, r2
   209a8:	4798      	blx	r3
   209aa:	1e0b      	subs	r3, r1, #0
   209ac:	d10a      	bne.n	209c4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   209ae:	4b1a      	ldr	r3, [pc, #104]	; (20a18 <sd_mmc_spi_read_word+0x94>)
   209b0:	4798      	blx	r3
   209b2:	0003      	movs	r3, r0
   209b4:	001a      	movs	r2, r3
   209b6:	2301      	movs	r3, #1
   209b8:	4053      	eors	r3, r2
   209ba:	b2db      	uxtb	r3, r3
   209bc:	2b00      	cmp	r3, #0
   209be:	d001      	beq.n	209c4 <sd_mmc_spi_read_word+0x40>
			return false;
   209c0:	2300      	movs	r3, #0
   209c2:	e01d      	b.n	20a00 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   209c4:	230e      	movs	r3, #14
   209c6:	18fb      	adds	r3, r7, r3
   209c8:	881b      	ldrh	r3, [r3, #0]
   209ca:	1d39      	adds	r1, r7, #4
   209cc:	4813      	ldr	r0, [pc, #76]	; (20a1c <sd_mmc_spi_read_word+0x98>)
   209ce:	2204      	movs	r2, #4
   209d0:	4c13      	ldr	r4, [pc, #76]	; (20a20 <sd_mmc_spi_read_word+0x9c>)
   209d2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   209d4:	687b      	ldr	r3, [r7, #4]
   209d6:	687a      	ldr	r2, [r7, #4]
   209d8:	6812      	ldr	r2, [r2, #0]
   209da:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   209dc:	4b0b      	ldr	r3, [pc, #44]	; (20a0c <sd_mmc_spi_read_word+0x88>)
   209de:	681b      	ldr	r3, [r3, #0]
   209e0:	1d1a      	adds	r2, r3, #4
   209e2:	4b0a      	ldr	r3, [pc, #40]	; (20a0c <sd_mmc_spi_read_word+0x88>)
   209e4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   209e6:	4b09      	ldr	r3, [pc, #36]	; (20a0c <sd_mmc_spi_read_word+0x88>)
   209e8:	681a      	ldr	r2, [r3, #0]
   209ea:	4b09      	ldr	r3, [pc, #36]	; (20a10 <sd_mmc_spi_read_word+0x8c>)
   209ec:	881b      	ldrh	r3, [r3, #0]
   209ee:	0019      	movs	r1, r3
   209f0:	4b08      	ldr	r3, [pc, #32]	; (20a14 <sd_mmc_spi_read_word+0x90>)
   209f2:	0010      	movs	r0, r2
   209f4:	4798      	blx	r3
   209f6:	1e0b      	subs	r3, r1, #0
   209f8:	d101      	bne.n	209fe <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   209fa:	4b0a      	ldr	r3, [pc, #40]	; (20a24 <sd_mmc_spi_read_word+0xa0>)
   209fc:	4798      	blx	r3
	}
	return true;
   209fe:	2301      	movs	r3, #1
}
   20a00:	0018      	movs	r0, r3
   20a02:	46bd      	mov	sp, r7
   20a04:	b005      	add	sp, #20
   20a06:	bd90      	pop	{r4, r7, pc}
   20a08:	2000428b 	.word	0x2000428b
   20a0c:	20004290 	.word	0x20004290
   20a10:	20004294 	.word	0x20004294
   20a14:	000337b1 	.word	0x000337b1
   20a18:	00020321 	.word	0x00020321
   20a1c:	20004248 	.word	0x20004248
   20a20:	00028b5d 	.word	0x00028b5d
   20a24:	000203a5 	.word	0x000203a5

00020a28 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20a28:	b590      	push	{r4, r7, lr}
   20a2a:	b085      	sub	sp, #20
   20a2c:	af00      	add	r7, sp, #0
   20a2e:	6078      	str	r0, [r7, #4]
   20a30:	000a      	movs	r2, r1
   20a32:	1cbb      	adds	r3, r7, #2
   20a34:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20a36:	230a      	movs	r3, #10
   20a38:	18fb      	adds	r3, r7, r3
   20a3a:	22ff      	movs	r2, #255	; 0xff
   20a3c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a3e:	4b1c      	ldr	r3, [pc, #112]	; (20ab0 <sd_mmc_spi_start_read_blocks+0x88>)
   20a40:	2200      	movs	r2, #0
   20a42:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20a44:	2300      	movs	r3, #0
   20a46:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20a48:	e025      	b.n	20a96 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20a4a:	4b1a      	ldr	r3, [pc, #104]	; (20ab4 <sd_mmc_spi_start_read_blocks+0x8c>)
   20a4c:	4798      	blx	r3
   20a4e:	0003      	movs	r3, r0
   20a50:	001a      	movs	r2, r3
   20a52:	2301      	movs	r3, #1
   20a54:	4053      	eors	r3, r2
   20a56:	b2db      	uxtb	r3, r3
   20a58:	2b00      	cmp	r3, #0
   20a5a:	d001      	beq.n	20a60 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20a5c:	2300      	movs	r3, #0
   20a5e:	e022      	b.n	20aa6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20a60:	687a      	ldr	r2, [r7, #4]
   20a62:	68fb      	ldr	r3, [r7, #12]
   20a64:	18d1      	adds	r1, r2, r3
   20a66:	4b14      	ldr	r3, [pc, #80]	; (20ab8 <sd_mmc_spi_start_read_blocks+0x90>)
   20a68:	881a      	ldrh	r2, [r3, #0]
   20a6a:	230a      	movs	r3, #10
   20a6c:	18fb      	adds	r3, r7, r3
   20a6e:	881b      	ldrh	r3, [r3, #0]
   20a70:	4812      	ldr	r0, [pc, #72]	; (20abc <sd_mmc_spi_start_read_blocks+0x94>)
   20a72:	4c13      	ldr	r4, [pc, #76]	; (20ac0 <sd_mmc_spi_start_read_blocks+0x98>)
   20a74:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20a76:	4b10      	ldr	r3, [pc, #64]	; (20ab8 <sd_mmc_spi_start_read_blocks+0x90>)
   20a78:	881b      	ldrh	r3, [r3, #0]
   20a7a:	001a      	movs	r2, r3
   20a7c:	68fb      	ldr	r3, [r7, #12]
   20a7e:	189b      	adds	r3, r3, r2
   20a80:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20a82:	4b0d      	ldr	r3, [pc, #52]	; (20ab8 <sd_mmc_spi_start_read_blocks+0x90>)
   20a84:	881b      	ldrh	r3, [r3, #0]
   20a86:	001a      	movs	r2, r3
   20a88:	4b0e      	ldr	r3, [pc, #56]	; (20ac4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20a8a:	681b      	ldr	r3, [r3, #0]
   20a8c:	18d2      	adds	r2, r2, r3
   20a8e:	4b0d      	ldr	r3, [pc, #52]	; (20ac4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20a90:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20a92:	4b0d      	ldr	r3, [pc, #52]	; (20ac8 <sd_mmc_spi_start_read_blocks+0xa0>)
   20a94:	4798      	blx	r3
	while (nb_block--) {
   20a96:	1cbb      	adds	r3, r7, #2
   20a98:	881b      	ldrh	r3, [r3, #0]
   20a9a:	1cba      	adds	r2, r7, #2
   20a9c:	1e59      	subs	r1, r3, #1
   20a9e:	8011      	strh	r1, [r2, #0]
   20aa0:	2b00      	cmp	r3, #0
   20aa2:	d1d2      	bne.n	20a4a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20aa4:	2301      	movs	r3, #1
}
   20aa6:	0018      	movs	r0, r3
   20aa8:	46bd      	mov	sp, r7
   20aaa:	b005      	add	sp, #20
   20aac:	bd90      	pop	{r4, r7, pc}
   20aae:	46c0      	nop			; (mov r8, r8)
   20ab0:	2000428b 	.word	0x2000428b
   20ab4:	00020321 	.word	0x00020321
   20ab8:	20004294 	.word	0x20004294
   20abc:	20004248 	.word	0x20004248
   20ac0:	00028b5d 	.word	0x00028b5d
   20ac4:	20004290 	.word	0x20004290
   20ac8:	000203a5 	.word	0x000203a5

00020acc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20acc:	b580      	push	{r7, lr}
   20ace:	af00      	add	r7, sp, #0
	return true;
   20ad0:	2301      	movs	r3, #1
}
   20ad2:	0018      	movs	r0, r3
   20ad4:	46bd      	mov	sp, r7
   20ad6:	bd80      	pop	{r7, pc}

00020ad8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20ad8:	b580      	push	{r7, lr}
   20ada:	b084      	sub	sp, #16
   20adc:	af00      	add	r7, sp, #0
   20ade:	6078      	str	r0, [r7, #4]
   20ae0:	000a      	movs	r2, r1
   20ae2:	1cbb      	adds	r3, r7, #2
   20ae4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20ae6:	4b24      	ldr	r3, [pc, #144]	; (20b78 <sd_mmc_spi_start_write_blocks+0xa0>)
   20ae8:	2200      	movs	r2, #0
   20aea:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20aec:	2300      	movs	r3, #0
   20aee:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20af0:	e035      	b.n	20b5e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20af2:	4b22      	ldr	r3, [pc, #136]	; (20b7c <sd_mmc_spi_start_write_blocks+0xa4>)
   20af4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20af6:	687a      	ldr	r2, [r7, #4]
   20af8:	68fb      	ldr	r3, [r7, #12]
   20afa:	18d1      	adds	r1, r2, r3
   20afc:	4b20      	ldr	r3, [pc, #128]	; (20b80 <sd_mmc_spi_start_write_blocks+0xa8>)
   20afe:	881a      	ldrh	r2, [r3, #0]
   20b00:	4b20      	ldr	r3, [pc, #128]	; (20b84 <sd_mmc_spi_start_write_blocks+0xac>)
   20b02:	0018      	movs	r0, r3
   20b04:	4b20      	ldr	r3, [pc, #128]	; (20b88 <sd_mmc_spi_start_write_blocks+0xb0>)
   20b06:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20b08:	4b1d      	ldr	r3, [pc, #116]	; (20b80 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b0a:	881b      	ldrh	r3, [r3, #0]
   20b0c:	001a      	movs	r2, r3
   20b0e:	68fb      	ldr	r3, [r7, #12]
   20b10:	189b      	adds	r3, r3, r2
   20b12:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20b14:	4b1a      	ldr	r3, [pc, #104]	; (20b80 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b16:	881b      	ldrh	r3, [r3, #0]
   20b18:	001a      	movs	r2, r3
   20b1a:	4b1c      	ldr	r3, [pc, #112]	; (20b8c <sd_mmc_spi_start_write_blocks+0xb4>)
   20b1c:	681b      	ldr	r3, [r3, #0]
   20b1e:	18d2      	adds	r2, r2, r3
   20b20:	4b1a      	ldr	r3, [pc, #104]	; (20b8c <sd_mmc_spi_start_write_blocks+0xb4>)
   20b22:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20b24:	4b1a      	ldr	r3, [pc, #104]	; (20b90 <sd_mmc_spi_start_write_blocks+0xb8>)
   20b26:	4798      	blx	r3
   20b28:	0003      	movs	r3, r0
   20b2a:	001a      	movs	r2, r3
   20b2c:	2301      	movs	r3, #1
   20b2e:	4053      	eors	r3, r2
   20b30:	b2db      	uxtb	r3, r3
   20b32:	2b00      	cmp	r3, #0
   20b34:	d001      	beq.n	20b3a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20b36:	2300      	movs	r3, #0
   20b38:	e019      	b.n	20b6e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20b3a:	1cbb      	adds	r3, r7, #2
   20b3c:	881b      	ldrh	r3, [r3, #0]
   20b3e:	2b00      	cmp	r3, #0
   20b40:	d00d      	beq.n	20b5e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20b42:	4b14      	ldr	r3, [pc, #80]	; (20b94 <sd_mmc_spi_start_write_blocks+0xbc>)
   20b44:	4798      	blx	r3
   20b46:	0003      	movs	r3, r0
   20b48:	001a      	movs	r2, r3
   20b4a:	2301      	movs	r3, #1
   20b4c:	4053      	eors	r3, r2
   20b4e:	b2db      	uxtb	r3, r3
   20b50:	2b00      	cmp	r3, #0
   20b52:	d004      	beq.n	20b5e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20b54:	4b08      	ldr	r3, [pc, #32]	; (20b78 <sd_mmc_spi_start_write_blocks+0xa0>)
   20b56:	2205      	movs	r2, #5
   20b58:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20b5a:	2300      	movs	r3, #0
   20b5c:	e007      	b.n	20b6e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20b5e:	1cbb      	adds	r3, r7, #2
   20b60:	881b      	ldrh	r3, [r3, #0]
   20b62:	1cba      	adds	r2, r7, #2
   20b64:	1e59      	subs	r1, r3, #1
   20b66:	8011      	strh	r1, [r2, #0]
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d1c2      	bne.n	20af2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20b6c:	2301      	movs	r3, #1
}
   20b6e:	0018      	movs	r0, r3
   20b70:	46bd      	mov	sp, r7
   20b72:	b004      	add	sp, #16
   20b74:	bd80      	pop	{r7, pc}
   20b76:	46c0      	nop			; (mov r8, r8)
   20b78:	2000428b 	.word	0x2000428b
   20b7c:	000203d1 	.word	0x000203d1
   20b80:	20004294 	.word	0x20004294
   20b84:	20004248 	.word	0x20004248
   20b88:	00028d81 	.word	0x00028d81
   20b8c:	20004290 	.word	0x20004290
   20b90:	00020421 	.word	0x00020421
   20b94:	000202b5 	.word	0x000202b5

00020b98 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20b98:	b580      	push	{r7, lr}
   20b9a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20b9c:	4b09      	ldr	r3, [pc, #36]	; (20bc4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20b9e:	4798      	blx	r3
   20ba0:	0003      	movs	r3, r0
   20ba2:	001a      	movs	r2, r3
   20ba4:	2301      	movs	r3, #1
   20ba6:	4053      	eors	r3, r2
   20ba8:	b2db      	uxtb	r3, r3
   20baa:	2b00      	cmp	r3, #0
   20bac:	d004      	beq.n	20bb8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20bae:	4b06      	ldr	r3, [pc, #24]	; (20bc8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20bb0:	2205      	movs	r2, #5
   20bb2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20bb4:	2300      	movs	r3, #0
   20bb6:	e002      	b.n	20bbe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20bb8:	4b04      	ldr	r3, [pc, #16]	; (20bcc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20bba:	4798      	blx	r3
   20bbc:	0003      	movs	r3, r0
}
   20bbe:	0018      	movs	r0, r3
   20bc0:	46bd      	mov	sp, r7
   20bc2:	bd80      	pop	{r7, pc}
   20bc4:	000202b5 	.word	0x000202b5
   20bc8:	2000428b 	.word	0x2000428b
   20bcc:	000204b5 	.word	0x000204b5

00020bd0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   20bd0:	b580      	push	{r7, lr}
   20bd2:	b082      	sub	sp, #8
   20bd4:	af00      	add	r7, sp, #0
   20bd6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   20bd8:	687b      	ldr	r3, [r7, #4]
   20bda:	2b00      	cmp	r3, #0
   20bdc:	d00c      	beq.n	20bf8 <delay_cycles+0x28>
		SysTick->LOAD = n;
   20bde:	4b08      	ldr	r3, [pc, #32]	; (20c00 <delay_cycles+0x30>)
   20be0:	687a      	ldr	r2, [r7, #4]
   20be2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   20be4:	4b06      	ldr	r3, [pc, #24]	; (20c00 <delay_cycles+0x30>)
   20be6:	2200      	movs	r2, #0
   20be8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   20bea:	46c0      	nop			; (mov r8, r8)
   20bec:	4b04      	ldr	r3, [pc, #16]	; (20c00 <delay_cycles+0x30>)
   20bee:	681a      	ldr	r2, [r3, #0]
   20bf0:	2380      	movs	r3, #128	; 0x80
   20bf2:	025b      	lsls	r3, r3, #9
   20bf4:	4013      	ands	r3, r2
   20bf6:	d0f9      	beq.n	20bec <delay_cycles+0x1c>
		};
	}
}
   20bf8:	46c0      	nop			; (mov r8, r8)
   20bfa:	46bd      	mov	sp, r7
   20bfc:	b002      	add	sp, #8
   20bfe:	bd80      	pop	{r7, pc}
   20c00:	e000e010 	.word	0xe000e010

00020c04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20c04:	b580      	push	{r7, lr}
   20c06:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20c08:	2000      	movs	r0, #0
   20c0a:	4b0f      	ldr	r3, [pc, #60]	; (20c48 <delay_init+0x44>)
   20c0c:	4798      	blx	r3
   20c0e:	0002      	movs	r2, r0
   20c10:	4b0e      	ldr	r3, [pc, #56]	; (20c4c <delay_init+0x48>)
   20c12:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20c14:	4b0d      	ldr	r3, [pc, #52]	; (20c4c <delay_init+0x48>)
   20c16:	6818      	ldr	r0, [r3, #0]
   20c18:	4b0d      	ldr	r3, [pc, #52]	; (20c50 <delay_init+0x4c>)
   20c1a:	22fa      	movs	r2, #250	; 0xfa
   20c1c:	0091      	lsls	r1, r2, #2
   20c1e:	4798      	blx	r3
   20c20:	0003      	movs	r3, r0
   20c22:	001a      	movs	r2, r3
   20c24:	4b09      	ldr	r3, [pc, #36]	; (20c4c <delay_init+0x48>)
   20c26:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20c28:	4b08      	ldr	r3, [pc, #32]	; (20c4c <delay_init+0x48>)
   20c2a:	6818      	ldr	r0, [r3, #0]
   20c2c:	4b08      	ldr	r3, [pc, #32]	; (20c50 <delay_init+0x4c>)
   20c2e:	22fa      	movs	r2, #250	; 0xfa
   20c30:	0091      	lsls	r1, r2, #2
   20c32:	4798      	blx	r3
   20c34:	0003      	movs	r3, r0
   20c36:	001a      	movs	r2, r3
   20c38:	4b06      	ldr	r3, [pc, #24]	; (20c54 <delay_init+0x50>)
   20c3a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20c3c:	4b06      	ldr	r3, [pc, #24]	; (20c58 <delay_init+0x54>)
   20c3e:	2205      	movs	r2, #5
   20c40:	601a      	str	r2, [r3, #0]
}
   20c42:	46c0      	nop			; (mov r8, r8)
   20c44:	46bd      	mov	sp, r7
   20c46:	bd80      	pop	{r7, pc}
   20c48:	0002a905 	.word	0x0002a905
   20c4c:	2000011c 	.word	0x2000011c
   20c50:	000336a5 	.word	0x000336a5
   20c54:	20000120 	.word	0x20000120
   20c58:	e000e010 	.word	0xe000e010

00020c5c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   20c5c:	b580      	push	{r7, lr}
   20c5e:	b082      	sub	sp, #8
   20c60:	af00      	add	r7, sp, #0
   20c62:	6078      	str	r0, [r7, #4]
	while (n--) {
   20c64:	e004      	b.n	20c70 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   20c66:	4b07      	ldr	r3, [pc, #28]	; (20c84 <delay_cycles_ms+0x28>)
   20c68:	681b      	ldr	r3, [r3, #0]
   20c6a:	0018      	movs	r0, r3
   20c6c:	4b06      	ldr	r3, [pc, #24]	; (20c88 <delay_cycles_ms+0x2c>)
   20c6e:	4798      	blx	r3
	while (n--) {
   20c70:	687b      	ldr	r3, [r7, #4]
   20c72:	1e5a      	subs	r2, r3, #1
   20c74:	607a      	str	r2, [r7, #4]
   20c76:	2b00      	cmp	r3, #0
   20c78:	d1f5      	bne.n	20c66 <delay_cycles_ms+0xa>
	}
}
   20c7a:	46c0      	nop			; (mov r8, r8)
   20c7c:	46bd      	mov	sp, r7
   20c7e:	b002      	add	sp, #8
   20c80:	bd80      	pop	{r7, pc}
   20c82:	46c0      	nop			; (mov r8, r8)
   20c84:	2000011c 	.word	0x2000011c
   20c88:	00020bd1 	.word	0x00020bd1

00020c8c <system_pinmux_get_group_from_gpio_pin>:
{
   20c8c:	b580      	push	{r7, lr}
   20c8e:	b084      	sub	sp, #16
   20c90:	af00      	add	r7, sp, #0
   20c92:	0002      	movs	r2, r0
   20c94:	1dfb      	adds	r3, r7, #7
   20c96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20c98:	230f      	movs	r3, #15
   20c9a:	18fb      	adds	r3, r7, r3
   20c9c:	1dfa      	adds	r2, r7, #7
   20c9e:	7812      	ldrb	r2, [r2, #0]
   20ca0:	09d2      	lsrs	r2, r2, #7
   20ca2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20ca4:	230e      	movs	r3, #14
   20ca6:	18fb      	adds	r3, r7, r3
   20ca8:	1dfa      	adds	r2, r7, #7
   20caa:	7812      	ldrb	r2, [r2, #0]
   20cac:	0952      	lsrs	r2, r2, #5
   20cae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20cb0:	4b0d      	ldr	r3, [pc, #52]	; (20ce8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20cb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20cb4:	230f      	movs	r3, #15
   20cb6:	18fb      	adds	r3, r7, r3
   20cb8:	781b      	ldrb	r3, [r3, #0]
   20cba:	2b00      	cmp	r3, #0
   20cbc:	d10f      	bne.n	20cde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20cbe:	230f      	movs	r3, #15
   20cc0:	18fb      	adds	r3, r7, r3
   20cc2:	781b      	ldrb	r3, [r3, #0]
   20cc4:	009b      	lsls	r3, r3, #2
   20cc6:	2210      	movs	r2, #16
   20cc8:	4694      	mov	ip, r2
   20cca:	44bc      	add	ip, r7
   20ccc:	4463      	add	r3, ip
   20cce:	3b08      	subs	r3, #8
   20cd0:	681a      	ldr	r2, [r3, #0]
   20cd2:	230e      	movs	r3, #14
   20cd4:	18fb      	adds	r3, r7, r3
   20cd6:	781b      	ldrb	r3, [r3, #0]
   20cd8:	01db      	lsls	r3, r3, #7
   20cda:	18d3      	adds	r3, r2, r3
   20cdc:	e000      	b.n	20ce0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20cde:	2300      	movs	r3, #0
}
   20ce0:	0018      	movs	r0, r3
   20ce2:	46bd      	mov	sp, r7
   20ce4:	b004      	add	sp, #16
   20ce6:	bd80      	pop	{r7, pc}
   20ce8:	41004400 	.word	0x41004400

00020cec <system_interrupt_enable_global>:
{
   20cec:	b580      	push	{r7, lr}
   20cee:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20cf0:	4b04      	ldr	r3, [pc, #16]	; (20d04 <system_interrupt_enable_global+0x18>)
   20cf2:	2201      	movs	r2, #1
   20cf4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20cf6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20cfa:	b662      	cpsie	i
}
   20cfc:	46c0      	nop			; (mov r8, r8)
   20cfe:	46bd      	mov	sp, r7
   20d00:	bd80      	pop	{r7, pc}
   20d02:	46c0      	nop			; (mov r8, r8)
   20d04:	20000126 	.word	0x20000126

00020d08 <port_get_group_from_gpio_pin>:
{
   20d08:	b580      	push	{r7, lr}
   20d0a:	b082      	sub	sp, #8
   20d0c:	af00      	add	r7, sp, #0
   20d0e:	0002      	movs	r2, r0
   20d10:	1dfb      	adds	r3, r7, #7
   20d12:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20d14:	1dfb      	adds	r3, r7, #7
   20d16:	781b      	ldrb	r3, [r3, #0]
   20d18:	0018      	movs	r0, r3
   20d1a:	4b03      	ldr	r3, [pc, #12]	; (20d28 <port_get_group_from_gpio_pin+0x20>)
   20d1c:	4798      	blx	r3
   20d1e:	0003      	movs	r3, r0
}
   20d20:	0018      	movs	r0, r3
   20d22:	46bd      	mov	sp, r7
   20d24:	b002      	add	sp, #8
   20d26:	bd80      	pop	{r7, pc}
   20d28:	00020c8d 	.word	0x00020c8d

00020d2c <port_get_config_defaults>:
{
   20d2c:	b580      	push	{r7, lr}
   20d2e:	b082      	sub	sp, #8
   20d30:	af00      	add	r7, sp, #0
   20d32:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20d34:	687b      	ldr	r3, [r7, #4]
   20d36:	2200      	movs	r2, #0
   20d38:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20d3a:	687b      	ldr	r3, [r7, #4]
   20d3c:	2201      	movs	r2, #1
   20d3e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20d40:	687b      	ldr	r3, [r7, #4]
   20d42:	2200      	movs	r2, #0
   20d44:	709a      	strb	r2, [r3, #2]
}
   20d46:	46c0      	nop			; (mov r8, r8)
   20d48:	46bd      	mov	sp, r7
   20d4a:	b002      	add	sp, #8
   20d4c:	bd80      	pop	{r7, pc}
	...

00020d50 <port_pin_set_output_level>:
{
   20d50:	b580      	push	{r7, lr}
   20d52:	b084      	sub	sp, #16
   20d54:	af00      	add	r7, sp, #0
   20d56:	0002      	movs	r2, r0
   20d58:	1dfb      	adds	r3, r7, #7
   20d5a:	701a      	strb	r2, [r3, #0]
   20d5c:	1dbb      	adds	r3, r7, #6
   20d5e:	1c0a      	adds	r2, r1, #0
   20d60:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20d62:	1dfb      	adds	r3, r7, #7
   20d64:	781b      	ldrb	r3, [r3, #0]
   20d66:	0018      	movs	r0, r3
   20d68:	4b0d      	ldr	r3, [pc, #52]	; (20da0 <port_pin_set_output_level+0x50>)
   20d6a:	4798      	blx	r3
   20d6c:	0003      	movs	r3, r0
   20d6e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20d70:	1dfb      	adds	r3, r7, #7
   20d72:	781b      	ldrb	r3, [r3, #0]
   20d74:	221f      	movs	r2, #31
   20d76:	4013      	ands	r3, r2
   20d78:	2201      	movs	r2, #1
   20d7a:	409a      	lsls	r2, r3
   20d7c:	0013      	movs	r3, r2
   20d7e:	60bb      	str	r3, [r7, #8]
	if (level) {
   20d80:	1dbb      	adds	r3, r7, #6
   20d82:	781b      	ldrb	r3, [r3, #0]
   20d84:	2b00      	cmp	r3, #0
   20d86:	d003      	beq.n	20d90 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20d88:	68fb      	ldr	r3, [r7, #12]
   20d8a:	68ba      	ldr	r2, [r7, #8]
   20d8c:	619a      	str	r2, [r3, #24]
}
   20d8e:	e002      	b.n	20d96 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20d90:	68fb      	ldr	r3, [r7, #12]
   20d92:	68ba      	ldr	r2, [r7, #8]
   20d94:	615a      	str	r2, [r3, #20]
}
   20d96:	46c0      	nop			; (mov r8, r8)
   20d98:	46bd      	mov	sp, r7
   20d9a:	b004      	add	sp, #16
   20d9c:	bd80      	pop	{r7, pc}
   20d9e:	46c0      	nop			; (mov r8, r8)
   20da0:	00020d09 	.word	0x00020d09

00020da4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20da4:	b580      	push	{r7, lr}
   20da6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20da8:	4b04      	ldr	r3, [pc, #16]	; (20dbc <chip_isr+0x18>)
   20daa:	681b      	ldr	r3, [r3, #0]
   20dac:	2b00      	cmp	r3, #0
   20dae:	d002      	beq.n	20db6 <chip_isr+0x12>
		gpfIsr();
   20db0:	4b02      	ldr	r3, [pc, #8]	; (20dbc <chip_isr+0x18>)
   20db2:	681b      	ldr	r3, [r3, #0]
   20db4:	4798      	blx	r3
	}
}
   20db6:	46c0      	nop			; (mov r8, r8)
   20db8:	46bd      	mov	sp, r7
   20dba:	bd80      	pop	{r7, pc}
   20dbc:	20004298 	.word	0x20004298

00020dc0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20dc0:	b580      	push	{r7, lr}
   20dc2:	b082      	sub	sp, #8
   20dc4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20dc6:	1d3b      	adds	r3, r7, #4
   20dc8:	0018      	movs	r0, r3
   20dca:	4b10      	ldr	r3, [pc, #64]	; (20e0c <init_chip_pins+0x4c>)
   20dcc:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20dce:	1d3b      	adds	r3, r7, #4
   20dd0:	2201      	movs	r2, #1
   20dd2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20dd4:	1d3b      	adds	r3, r7, #4
   20dd6:	0019      	movs	r1, r3
   20dd8:	201b      	movs	r0, #27
   20dda:	4b0d      	ldr	r3, [pc, #52]	; (20e10 <init_chip_pins+0x50>)
   20ddc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20dde:	1d3b      	adds	r3, r7, #4
   20de0:	0019      	movs	r1, r3
   20de2:	201c      	movs	r0, #28
   20de4:	4b0a      	ldr	r3, [pc, #40]	; (20e10 <init_chip_pins+0x50>)
   20de6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20de8:	1d3b      	adds	r3, r7, #4
   20dea:	0019      	movs	r1, r3
   20dec:	2028      	movs	r0, #40	; 0x28
   20dee:	4b08      	ldr	r3, [pc, #32]	; (20e10 <init_chip_pins+0x50>)
   20df0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20df2:	2100      	movs	r1, #0
   20df4:	201c      	movs	r0, #28
   20df6:	4b07      	ldr	r3, [pc, #28]	; (20e14 <init_chip_pins+0x54>)
   20df8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20dfa:	2100      	movs	r1, #0
   20dfc:	201b      	movs	r0, #27
   20dfe:	4b05      	ldr	r3, [pc, #20]	; (20e14 <init_chip_pins+0x54>)
   20e00:	4798      	blx	r3
}
   20e02:	46c0      	nop			; (mov r8, r8)
   20e04:	46bd      	mov	sp, r7
   20e06:	b002      	add	sp, #8
   20e08:	bd80      	pop	{r7, pc}
   20e0a:	46c0      	nop			; (mov r8, r8)
   20e0c:	00020d2d 	.word	0x00020d2d
   20e10:	0002754d 	.word	0x0002754d
   20e14:	00020d51 	.word	0x00020d51

00020e18 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20e18:	b580      	push	{r7, lr}
   20e1a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20e1c:	4b0b      	ldr	r3, [pc, #44]	; (20e4c <nm_bsp_init+0x34>)
   20e1e:	2200      	movs	r2, #0
   20e20:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20e22:	4b0b      	ldr	r3, [pc, #44]	; (20e50 <nm_bsp_init+0x38>)
   20e24:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20e26:	4b0b      	ldr	r3, [pc, #44]	; (20e54 <nm_bsp_init+0x3c>)
   20e28:	681b      	ldr	r3, [r3, #0]
   20e2a:	2201      	movs	r2, #1
   20e2c:	4013      	ands	r3, r2
   20e2e:	d004      	beq.n	20e3a <nm_bsp_init+0x22>
   20e30:	4b08      	ldr	r3, [pc, #32]	; (20e54 <nm_bsp_init+0x3c>)
   20e32:	681b      	ldr	r3, [r3, #0]
   20e34:	2202      	movs	r2, #2
   20e36:	4013      	ands	r3, r2
   20e38:	d101      	bne.n	20e3e <nm_bsp_init+0x26>
	    delay_init();
   20e3a:	4b07      	ldr	r3, [pc, #28]	; (20e58 <nm_bsp_init+0x40>)
   20e3c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20e3e:	4b07      	ldr	r3, [pc, #28]	; (20e5c <nm_bsp_init+0x44>)
   20e40:	4798      	blx	r3

	return M2M_SUCCESS;
   20e42:	2300      	movs	r3, #0
}
   20e44:	0018      	movs	r0, r3
   20e46:	46bd      	mov	sp, r7
   20e48:	bd80      	pop	{r7, pc}
   20e4a:	46c0      	nop			; (mov r8, r8)
   20e4c:	20004298 	.word	0x20004298
   20e50:	00020dc1 	.word	0x00020dc1
   20e54:	e000e010 	.word	0xe000e010
   20e58:	00020c05 	.word	0x00020c05
   20e5c:	00020ced 	.word	0x00020ced

00020e60 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20e60:	b580      	push	{r7, lr}
   20e62:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20e64:	2100      	movs	r1, #0
   20e66:	201c      	movs	r0, #28
   20e68:	4b0b      	ldr	r3, [pc, #44]	; (20e98 <nm_bsp_reset+0x38>)
   20e6a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20e6c:	2100      	movs	r1, #0
   20e6e:	201b      	movs	r0, #27
   20e70:	4b09      	ldr	r3, [pc, #36]	; (20e98 <nm_bsp_reset+0x38>)
   20e72:	4798      	blx	r3
	nm_bsp_sleep(1);
   20e74:	2001      	movs	r0, #1
   20e76:	4b09      	ldr	r3, [pc, #36]	; (20e9c <nm_bsp_reset+0x3c>)
   20e78:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20e7a:	2101      	movs	r1, #1
   20e7c:	201c      	movs	r0, #28
   20e7e:	4b06      	ldr	r3, [pc, #24]	; (20e98 <nm_bsp_reset+0x38>)
   20e80:	4798      	blx	r3
	nm_bsp_sleep(10);
   20e82:	200a      	movs	r0, #10
   20e84:	4b05      	ldr	r3, [pc, #20]	; (20e9c <nm_bsp_reset+0x3c>)
   20e86:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20e88:	2101      	movs	r1, #1
   20e8a:	201b      	movs	r0, #27
   20e8c:	4b02      	ldr	r3, [pc, #8]	; (20e98 <nm_bsp_reset+0x38>)
   20e8e:	4798      	blx	r3
}
   20e90:	46c0      	nop			; (mov r8, r8)
   20e92:	46bd      	mov	sp, r7
   20e94:	bd80      	pop	{r7, pc}
   20e96:	46c0      	nop			; (mov r8, r8)
   20e98:	00020d51 	.word	0x00020d51
   20e9c:	00020ea1 	.word	0x00020ea1

00020ea0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20ea0:	b580      	push	{r7, lr}
   20ea2:	b082      	sub	sp, #8
   20ea4:	af00      	add	r7, sp, #0
   20ea6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20ea8:	687b      	ldr	r3, [r7, #4]
   20eaa:	0018      	movs	r0, r3
   20eac:	4b02      	ldr	r3, [pc, #8]	; (20eb8 <nm_bsp_sleep+0x18>)
   20eae:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20eb0:	46c0      	nop			; (mov r8, r8)
   20eb2:	46bd      	mov	sp, r7
   20eb4:	b002      	add	sp, #8
   20eb6:	bd80      	pop	{r7, pc}
   20eb8:	0001cc51 	.word	0x0001cc51

00020ebc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20ebc:	b580      	push	{r7, lr}
   20ebe:	b086      	sub	sp, #24
   20ec0:	af00      	add	r7, sp, #0
   20ec2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20ec4:	4b15      	ldr	r3, [pc, #84]	; (20f1c <nm_bsp_register_isr+0x60>)
   20ec6:	687a      	ldr	r2, [r7, #4]
   20ec8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20eca:	230c      	movs	r3, #12
   20ecc:	18fb      	adds	r3, r7, r3
   20ece:	0018      	movs	r0, r3
   20ed0:	4b13      	ldr	r3, [pc, #76]	; (20f20 <nm_bsp_register_isr+0x64>)
   20ed2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20ed4:	230c      	movs	r3, #12
   20ed6:	18fb      	adds	r3, r7, r3
   20ed8:	2229      	movs	r2, #41	; 0x29
   20eda:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20edc:	230c      	movs	r3, #12
   20ede:	18fb      	adds	r3, r7, r3
   20ee0:	2200      	movs	r2, #0
   20ee2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20ee4:	230c      	movs	r3, #12
   20ee6:	18fb      	adds	r3, r7, r3
   20ee8:	2201      	movs	r2, #1
   20eea:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20eec:	230c      	movs	r3, #12
   20eee:	18fb      	adds	r3, r7, r3
   20ef0:	2202      	movs	r2, #2
   20ef2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20ef4:	230c      	movs	r3, #12
   20ef6:	18fb      	adds	r3, r7, r3
   20ef8:	0019      	movs	r1, r3
   20efa:	2009      	movs	r0, #9
   20efc:	4b09      	ldr	r3, [pc, #36]	; (20f24 <nm_bsp_register_isr+0x68>)
   20efe:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20f00:	4b09      	ldr	r3, [pc, #36]	; (20f28 <nm_bsp_register_isr+0x6c>)
   20f02:	2200      	movs	r2, #0
   20f04:	2109      	movs	r1, #9
   20f06:	0018      	movs	r0, r3
   20f08:	4b08      	ldr	r3, [pc, #32]	; (20f2c <nm_bsp_register_isr+0x70>)
   20f0a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20f0c:	2100      	movs	r1, #0
   20f0e:	2009      	movs	r0, #9
   20f10:	4b07      	ldr	r3, [pc, #28]	; (20f30 <nm_bsp_register_isr+0x74>)
   20f12:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20f14:	46c0      	nop			; (mov r8, r8)
   20f16:	46bd      	mov	sp, r7
   20f18:	b006      	add	sp, #24
   20f1a:	bd80      	pop	{r7, pc}
   20f1c:	20004298 	.word	0x20004298
   20f20:	000273f5 	.word	0x000273f5
   20f24:	00027429 	.word	0x00027429
   20f28:	00020da5 	.word	0x00020da5
   20f2c:	00026ff5 	.word	0x00026ff5
   20f30:	00027059 	.word	0x00027059

00020f34 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20f34:	b580      	push	{r7, lr}
   20f36:	b082      	sub	sp, #8
   20f38:	af00      	add	r7, sp, #0
   20f3a:	0002      	movs	r2, r0
   20f3c:	1dfb      	adds	r3, r7, #7
   20f3e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20f40:	1dfb      	adds	r3, r7, #7
   20f42:	781b      	ldrb	r3, [r3, #0]
   20f44:	2b00      	cmp	r3, #0
   20f46:	d004      	beq.n	20f52 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20f48:	2100      	movs	r1, #0
   20f4a:	2009      	movs	r0, #9
   20f4c:	4b05      	ldr	r3, [pc, #20]	; (20f64 <nm_bsp_interrupt_ctrl+0x30>)
   20f4e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20f50:	e003      	b.n	20f5a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20f52:	2100      	movs	r1, #0
   20f54:	2009      	movs	r0, #9
   20f56:	4b04      	ldr	r3, [pc, #16]	; (20f68 <nm_bsp_interrupt_ctrl+0x34>)
   20f58:	4798      	blx	r3
}
   20f5a:	46c0      	nop			; (mov r8, r8)
   20f5c:	46bd      	mov	sp, r7
   20f5e:	b002      	add	sp, #8
   20f60:	bd80      	pop	{r7, pc}
   20f62:	46c0      	nop			; (mov r8, r8)
   20f64:	00027059 	.word	0x00027059
   20f68:	000270a1 	.word	0x000270a1

00020f6c <system_pinmux_get_group_from_gpio_pin>:
{
   20f6c:	b580      	push	{r7, lr}
   20f6e:	b084      	sub	sp, #16
   20f70:	af00      	add	r7, sp, #0
   20f72:	0002      	movs	r2, r0
   20f74:	1dfb      	adds	r3, r7, #7
   20f76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20f78:	230f      	movs	r3, #15
   20f7a:	18fb      	adds	r3, r7, r3
   20f7c:	1dfa      	adds	r2, r7, #7
   20f7e:	7812      	ldrb	r2, [r2, #0]
   20f80:	09d2      	lsrs	r2, r2, #7
   20f82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20f84:	230e      	movs	r3, #14
   20f86:	18fb      	adds	r3, r7, r3
   20f88:	1dfa      	adds	r2, r7, #7
   20f8a:	7812      	ldrb	r2, [r2, #0]
   20f8c:	0952      	lsrs	r2, r2, #5
   20f8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20f90:	4b0d      	ldr	r3, [pc, #52]	; (20fc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20f92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20f94:	230f      	movs	r3, #15
   20f96:	18fb      	adds	r3, r7, r3
   20f98:	781b      	ldrb	r3, [r3, #0]
   20f9a:	2b00      	cmp	r3, #0
   20f9c:	d10f      	bne.n	20fbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20f9e:	230f      	movs	r3, #15
   20fa0:	18fb      	adds	r3, r7, r3
   20fa2:	781b      	ldrb	r3, [r3, #0]
   20fa4:	009b      	lsls	r3, r3, #2
   20fa6:	2210      	movs	r2, #16
   20fa8:	4694      	mov	ip, r2
   20faa:	44bc      	add	ip, r7
   20fac:	4463      	add	r3, ip
   20fae:	3b08      	subs	r3, #8
   20fb0:	681a      	ldr	r2, [r3, #0]
   20fb2:	230e      	movs	r3, #14
   20fb4:	18fb      	adds	r3, r7, r3
   20fb6:	781b      	ldrb	r3, [r3, #0]
   20fb8:	01db      	lsls	r3, r3, #7
   20fba:	18d3      	adds	r3, r2, r3
   20fbc:	e000      	b.n	20fc0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20fbe:	2300      	movs	r3, #0
}
   20fc0:	0018      	movs	r0, r3
   20fc2:	46bd      	mov	sp, r7
   20fc4:	b004      	add	sp, #16
   20fc6:	bd80      	pop	{r7, pc}
   20fc8:	41004400 	.word	0x41004400

00020fcc <system_interrupt_enable>:
{
   20fcc:	b580      	push	{r7, lr}
   20fce:	b082      	sub	sp, #8
   20fd0:	af00      	add	r7, sp, #0
   20fd2:	0002      	movs	r2, r0
   20fd4:	1dfb      	adds	r3, r7, #7
   20fd6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20fd8:	4b06      	ldr	r3, [pc, #24]	; (20ff4 <system_interrupt_enable+0x28>)
   20fda:	1dfa      	adds	r2, r7, #7
   20fdc:	7812      	ldrb	r2, [r2, #0]
   20fde:	0011      	movs	r1, r2
   20fe0:	221f      	movs	r2, #31
   20fe2:	400a      	ands	r2, r1
   20fe4:	2101      	movs	r1, #1
   20fe6:	4091      	lsls	r1, r2
   20fe8:	000a      	movs	r2, r1
   20fea:	601a      	str	r2, [r3, #0]
}
   20fec:	46c0      	nop			; (mov r8, r8)
   20fee:	46bd      	mov	sp, r7
   20ff0:	b002      	add	sp, #8
   20ff2:	bd80      	pop	{r7, pc}
   20ff4:	e000e100 	.word	0xe000e100

00020ff8 <system_interrupt_disable>:
{
   20ff8:	b580      	push	{r7, lr}
   20ffa:	b082      	sub	sp, #8
   20ffc:	af00      	add	r7, sp, #0
   20ffe:	0002      	movs	r2, r0
   21000:	1dfb      	adds	r3, r7, #7
   21002:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21004:	4a07      	ldr	r2, [pc, #28]	; (21024 <system_interrupt_disable+0x2c>)
   21006:	1dfb      	adds	r3, r7, #7
   21008:	781b      	ldrb	r3, [r3, #0]
   2100a:	0019      	movs	r1, r3
   2100c:	231f      	movs	r3, #31
   2100e:	400b      	ands	r3, r1
   21010:	2101      	movs	r1, #1
   21012:	4099      	lsls	r1, r3
   21014:	000b      	movs	r3, r1
   21016:	0019      	movs	r1, r3
   21018:	2380      	movs	r3, #128	; 0x80
   2101a:	50d1      	str	r1, [r2, r3]
}
   2101c:	46c0      	nop			; (mov r8, r8)
   2101e:	46bd      	mov	sp, r7
   21020:	b002      	add	sp, #8
   21022:	bd80      	pop	{r7, pc}
   21024:	e000e100 	.word	0xe000e100

00021028 <port_get_group_from_gpio_pin>:
{
   21028:	b580      	push	{r7, lr}
   2102a:	b082      	sub	sp, #8
   2102c:	af00      	add	r7, sp, #0
   2102e:	0002      	movs	r2, r0
   21030:	1dfb      	adds	r3, r7, #7
   21032:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21034:	1dfb      	adds	r3, r7, #7
   21036:	781b      	ldrb	r3, [r3, #0]
   21038:	0018      	movs	r0, r3
   2103a:	4b03      	ldr	r3, [pc, #12]	; (21048 <port_get_group_from_gpio_pin+0x20>)
   2103c:	4798      	blx	r3
   2103e:	0003      	movs	r3, r0
}
   21040:	0018      	movs	r0, r3
   21042:	46bd      	mov	sp, r7
   21044:	b002      	add	sp, #8
   21046:	bd80      	pop	{r7, pc}
   21048:	00020f6d 	.word	0x00020f6d

0002104c <port_get_config_defaults>:
{
   2104c:	b580      	push	{r7, lr}
   2104e:	b082      	sub	sp, #8
   21050:	af00      	add	r7, sp, #0
   21052:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21054:	687b      	ldr	r3, [r7, #4]
   21056:	2200      	movs	r2, #0
   21058:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2105a:	687b      	ldr	r3, [r7, #4]
   2105c:	2201      	movs	r2, #1
   2105e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21060:	687b      	ldr	r3, [r7, #4]
   21062:	2200      	movs	r2, #0
   21064:	709a      	strb	r2, [r3, #2]
}
   21066:	46c0      	nop			; (mov r8, r8)
   21068:	46bd      	mov	sp, r7
   2106a:	b002      	add	sp, #8
   2106c:	bd80      	pop	{r7, pc}
	...

00021070 <port_pin_set_output_level>:
{
   21070:	b580      	push	{r7, lr}
   21072:	b084      	sub	sp, #16
   21074:	af00      	add	r7, sp, #0
   21076:	0002      	movs	r2, r0
   21078:	1dfb      	adds	r3, r7, #7
   2107a:	701a      	strb	r2, [r3, #0]
   2107c:	1dbb      	adds	r3, r7, #6
   2107e:	1c0a      	adds	r2, r1, #0
   21080:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21082:	1dfb      	adds	r3, r7, #7
   21084:	781b      	ldrb	r3, [r3, #0]
   21086:	0018      	movs	r0, r3
   21088:	4b0d      	ldr	r3, [pc, #52]	; (210c0 <port_pin_set_output_level+0x50>)
   2108a:	4798      	blx	r3
   2108c:	0003      	movs	r3, r0
   2108e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21090:	1dfb      	adds	r3, r7, #7
   21092:	781b      	ldrb	r3, [r3, #0]
   21094:	221f      	movs	r2, #31
   21096:	4013      	ands	r3, r2
   21098:	2201      	movs	r2, #1
   2109a:	409a      	lsls	r2, r3
   2109c:	0013      	movs	r3, r2
   2109e:	60bb      	str	r3, [r7, #8]
	if (level) {
   210a0:	1dbb      	adds	r3, r7, #6
   210a2:	781b      	ldrb	r3, [r3, #0]
   210a4:	2b00      	cmp	r3, #0
   210a6:	d003      	beq.n	210b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   210a8:	68fb      	ldr	r3, [r7, #12]
   210aa:	68ba      	ldr	r2, [r7, #8]
   210ac:	619a      	str	r2, [r3, #24]
}
   210ae:	e002      	b.n	210b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   210b0:	68fb      	ldr	r3, [r7, #12]
   210b2:	68ba      	ldr	r2, [r7, #8]
   210b4:	615a      	str	r2, [r3, #20]
}
   210b6:	46c0      	nop			; (mov r8, r8)
   210b8:	46bd      	mov	sp, r7
   210ba:	b004      	add	sp, #16
   210bc:	bd80      	pop	{r7, pc}
   210be:	46c0      	nop			; (mov r8, r8)
   210c0:	00021029 	.word	0x00021029

000210c4 <spi_is_syncing>:
{
   210c4:	b580      	push	{r7, lr}
   210c6:	b084      	sub	sp, #16
   210c8:	af00      	add	r7, sp, #0
   210ca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   210cc:	687b      	ldr	r3, [r7, #4]
   210ce:	681b      	ldr	r3, [r3, #0]
   210d0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   210d2:	68fb      	ldr	r3, [r7, #12]
   210d4:	69db      	ldr	r3, [r3, #28]
   210d6:	1e5a      	subs	r2, r3, #1
   210d8:	4193      	sbcs	r3, r2
   210da:	b2db      	uxtb	r3, r3
}
   210dc:	0018      	movs	r0, r3
   210de:	46bd      	mov	sp, r7
   210e0:	b004      	add	sp, #16
   210e2:	bd80      	pop	{r7, pc}

000210e4 <spi_get_config_defaults>:
{
   210e4:	b580      	push	{r7, lr}
   210e6:	b082      	sub	sp, #8
   210e8:	af00      	add	r7, sp, #0
   210ea:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   210ec:	687b      	ldr	r3, [r7, #4]
   210ee:	2201      	movs	r2, #1
   210f0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   210f2:	687b      	ldr	r3, [r7, #4]
   210f4:	2200      	movs	r2, #0
   210f6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   210f8:	687b      	ldr	r3, [r7, #4]
   210fa:	2200      	movs	r2, #0
   210fc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   210fe:	687b      	ldr	r3, [r7, #4]
   21100:	22c0      	movs	r2, #192	; 0xc0
   21102:	0392      	lsls	r2, r2, #14
   21104:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21106:	687b      	ldr	r3, [r7, #4]
   21108:	2200      	movs	r2, #0
   2110a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2110c:	687b      	ldr	r3, [r7, #4]
   2110e:	2200      	movs	r2, #0
   21110:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   21112:	687b      	ldr	r3, [r7, #4]
   21114:	2201      	movs	r2, #1
   21116:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   21118:	687b      	ldr	r3, [r7, #4]
   2111a:	2201      	movs	r2, #1
   2111c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2111e:	687b      	ldr	r3, [r7, #4]
   21120:	2200      	movs	r2, #0
   21122:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   21124:	687b      	ldr	r3, [r7, #4]
   21126:	2224      	movs	r2, #36	; 0x24
   21128:	2100      	movs	r1, #0
   2112a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   2112c:	687b      	ldr	r3, [r7, #4]
   2112e:	3318      	adds	r3, #24
   21130:	220c      	movs	r2, #12
   21132:	2100      	movs	r1, #0
   21134:	0018      	movs	r0, r3
   21136:	4b0a      	ldr	r3, [pc, #40]	; (21160 <spi_get_config_defaults+0x7c>)
   21138:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   2113a:	687b      	ldr	r3, [r7, #4]
   2113c:	4a09      	ldr	r2, [pc, #36]	; (21164 <spi_get_config_defaults+0x80>)
   2113e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21140:	687b      	ldr	r3, [r7, #4]
   21142:	2200      	movs	r2, #0
   21144:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21146:	687b      	ldr	r3, [r7, #4]
   21148:	2200      	movs	r2, #0
   2114a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   2114c:	687b      	ldr	r3, [r7, #4]
   2114e:	2200      	movs	r2, #0
   21150:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21152:	687b      	ldr	r3, [r7, #4]
   21154:	2200      	movs	r2, #0
   21156:	635a      	str	r2, [r3, #52]	; 0x34
};
   21158:	46c0      	nop			; (mov r8, r8)
   2115a:	46bd      	mov	sp, r7
   2115c:	b002      	add	sp, #8
   2115e:	bd80      	pop	{r7, pc}
   21160:	00036203 	.word	0x00036203
   21164:	000186a0 	.word	0x000186a0

00021168 <spi_slave_inst_get_config_defaults>:
{
   21168:	b580      	push	{r7, lr}
   2116a:	b082      	sub	sp, #8
   2116c:	af00      	add	r7, sp, #0
   2116e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   21170:	687b      	ldr	r3, [r7, #4]
   21172:	220a      	movs	r2, #10
   21174:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21176:	687b      	ldr	r3, [r7, #4]
   21178:	2200      	movs	r2, #0
   2117a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2117c:	687b      	ldr	r3, [r7, #4]
   2117e:	2200      	movs	r2, #0
   21180:	709a      	strb	r2, [r3, #2]
}
   21182:	46c0      	nop			; (mov r8, r8)
   21184:	46bd      	mov	sp, r7
   21186:	b002      	add	sp, #8
   21188:	bd80      	pop	{r7, pc}
	...

0002118c <spi_attach_slave>:
{
   2118c:	b580      	push	{r7, lr}
   2118e:	b084      	sub	sp, #16
   21190:	af00      	add	r7, sp, #0
   21192:	6078      	str	r0, [r7, #4]
   21194:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21196:	683b      	ldr	r3, [r7, #0]
   21198:	781a      	ldrb	r2, [r3, #0]
   2119a:	687b      	ldr	r3, [r7, #4]
   2119c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2119e:	683b      	ldr	r3, [r7, #0]
   211a0:	785a      	ldrb	r2, [r3, #1]
   211a2:	687b      	ldr	r3, [r7, #4]
   211a4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   211a6:	683b      	ldr	r3, [r7, #0]
   211a8:	789a      	ldrb	r2, [r3, #2]
   211aa:	687b      	ldr	r3, [r7, #4]
   211ac:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   211ae:	230c      	movs	r3, #12
   211b0:	18fb      	adds	r3, r7, r3
   211b2:	0018      	movs	r0, r3
   211b4:	4b0b      	ldr	r3, [pc, #44]	; (211e4 <spi_attach_slave+0x58>)
   211b6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   211b8:	230c      	movs	r3, #12
   211ba:	18fb      	adds	r3, r7, r3
   211bc:	2201      	movs	r2, #1
   211be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   211c0:	687b      	ldr	r3, [r7, #4]
   211c2:	781b      	ldrb	r3, [r3, #0]
   211c4:	220c      	movs	r2, #12
   211c6:	18ba      	adds	r2, r7, r2
   211c8:	0011      	movs	r1, r2
   211ca:	0018      	movs	r0, r3
   211cc:	4b06      	ldr	r3, [pc, #24]	; (211e8 <spi_attach_slave+0x5c>)
   211ce:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   211d0:	687b      	ldr	r3, [r7, #4]
   211d2:	781b      	ldrb	r3, [r3, #0]
   211d4:	2101      	movs	r1, #1
   211d6:	0018      	movs	r0, r3
   211d8:	4b04      	ldr	r3, [pc, #16]	; (211ec <spi_attach_slave+0x60>)
   211da:	4798      	blx	r3
}
   211dc:	46c0      	nop			; (mov r8, r8)
   211de:	46bd      	mov	sp, r7
   211e0:	b004      	add	sp, #16
   211e2:	bd80      	pop	{r7, pc}
   211e4:	0002104d 	.word	0x0002104d
   211e8:	0002754d 	.word	0x0002754d
   211ec:	00021071 	.word	0x00021071

000211f0 <spi_enable>:
{
   211f0:	b580      	push	{r7, lr}
   211f2:	b084      	sub	sp, #16
   211f4:	af00      	add	r7, sp, #0
   211f6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   211f8:	687b      	ldr	r3, [r7, #4]
   211fa:	681b      	ldr	r3, [r3, #0]
   211fc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   211fe:	687b      	ldr	r3, [r7, #4]
   21200:	681b      	ldr	r3, [r3, #0]
   21202:	0018      	movs	r0, r3
   21204:	4b0b      	ldr	r3, [pc, #44]	; (21234 <spi_enable+0x44>)
   21206:	4798      	blx	r3
   21208:	0003      	movs	r3, r0
   2120a:	0018      	movs	r0, r3
   2120c:	4b0a      	ldr	r3, [pc, #40]	; (21238 <spi_enable+0x48>)
   2120e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   21210:	46c0      	nop			; (mov r8, r8)
   21212:	687b      	ldr	r3, [r7, #4]
   21214:	0018      	movs	r0, r3
   21216:	4b09      	ldr	r3, [pc, #36]	; (2123c <spi_enable+0x4c>)
   21218:	4798      	blx	r3
   2121a:	1e03      	subs	r3, r0, #0
   2121c:	d1f9      	bne.n	21212 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2121e:	68fb      	ldr	r3, [r7, #12]
   21220:	681b      	ldr	r3, [r3, #0]
   21222:	2202      	movs	r2, #2
   21224:	431a      	orrs	r2, r3
   21226:	68fb      	ldr	r3, [r7, #12]
   21228:	601a      	str	r2, [r3, #0]
}
   2122a:	46c0      	nop			; (mov r8, r8)
   2122c:	46bd      	mov	sp, r7
   2122e:	b004      	add	sp, #16
   21230:	bd80      	pop	{r7, pc}
   21232:	46c0      	nop			; (mov r8, r8)
   21234:	0002821d 	.word	0x0002821d
   21238:	00020fcd 	.word	0x00020fcd
   2123c:	000210c5 	.word	0x000210c5

00021240 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   21240:	b580      	push	{r7, lr}
   21242:	b084      	sub	sp, #16
   21244:	af00      	add	r7, sp, #0
   21246:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21248:	687b      	ldr	r3, [r7, #4]
   2124a:	681b      	ldr	r3, [r3, #0]
   2124c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2124e:	687b      	ldr	r3, [r7, #4]
   21250:	681b      	ldr	r3, [r3, #0]
   21252:	0018      	movs	r0, r3
   21254:	4b0e      	ldr	r3, [pc, #56]	; (21290 <spi_disable+0x50>)
   21256:	4798      	blx	r3
   21258:	0003      	movs	r3, r0
   2125a:	0018      	movs	r0, r3
   2125c:	4b0d      	ldr	r3, [pc, #52]	; (21294 <spi_disable+0x54>)
   2125e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   21260:	46c0      	nop			; (mov r8, r8)
   21262:	687b      	ldr	r3, [r7, #4]
   21264:	0018      	movs	r0, r3
   21266:	4b0c      	ldr	r3, [pc, #48]	; (21298 <spi_disable+0x58>)
   21268:	4798      	blx	r3
   2126a:	1e03      	subs	r3, r0, #0
   2126c:	d1f9      	bne.n	21262 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2126e:	68fb      	ldr	r3, [r7, #12]
   21270:	228f      	movs	r2, #143	; 0x8f
   21272:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21274:	68fb      	ldr	r3, [r7, #12]
   21276:	228f      	movs	r2, #143	; 0x8f
   21278:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2127a:	68fb      	ldr	r3, [r7, #12]
   2127c:	681b      	ldr	r3, [r3, #0]
   2127e:	2202      	movs	r2, #2
   21280:	4393      	bics	r3, r2
   21282:	001a      	movs	r2, r3
   21284:	68fb      	ldr	r3, [r7, #12]
   21286:	601a      	str	r2, [r3, #0]
}
   21288:	46c0      	nop			; (mov r8, r8)
   2128a:	46bd      	mov	sp, r7
   2128c:	b004      	add	sp, #16
   2128e:	bd80      	pop	{r7, pc}
   21290:	0002821d 	.word	0x0002821d
   21294:	00020ff9 	.word	0x00020ff9
   21298:	000210c5 	.word	0x000210c5

0002129c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2129c:	b580      	push	{r7, lr}
   2129e:	b084      	sub	sp, #16
   212a0:	af00      	add	r7, sp, #0
   212a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212a4:	687b      	ldr	r3, [r7, #4]
   212a6:	681b      	ldr	r3, [r3, #0]
   212a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   212aa:	68fb      	ldr	r3, [r7, #12]
   212ac:	7e1b      	ldrb	r3, [r3, #24]
   212ae:	b2db      	uxtb	r3, r3
   212b0:	001a      	movs	r2, r3
   212b2:	2302      	movs	r3, #2
   212b4:	4013      	ands	r3, r2
   212b6:	1e5a      	subs	r2, r3, #1
   212b8:	4193      	sbcs	r3, r2
   212ba:	b2db      	uxtb	r3, r3
}
   212bc:	0018      	movs	r0, r3
   212be:	46bd      	mov	sp, r7
   212c0:	b004      	add	sp, #16
   212c2:	bd80      	pop	{r7, pc}

000212c4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   212c4:	b580      	push	{r7, lr}
   212c6:	b084      	sub	sp, #16
   212c8:	af00      	add	r7, sp, #0
   212ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212cc:	687b      	ldr	r3, [r7, #4]
   212ce:	681b      	ldr	r3, [r3, #0]
   212d0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   212d2:	68fb      	ldr	r3, [r7, #12]
   212d4:	7e1b      	ldrb	r3, [r3, #24]
   212d6:	b2db      	uxtb	r3, r3
   212d8:	001a      	movs	r2, r3
   212da:	2301      	movs	r3, #1
   212dc:	4013      	ands	r3, r2
   212de:	1e5a      	subs	r2, r3, #1
   212e0:	4193      	sbcs	r3, r2
   212e2:	b2db      	uxtb	r3, r3
}
   212e4:	0018      	movs	r0, r3
   212e6:	46bd      	mov	sp, r7
   212e8:	b004      	add	sp, #16
   212ea:	bd80      	pop	{r7, pc}

000212ec <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   212ec:	b580      	push	{r7, lr}
   212ee:	b084      	sub	sp, #16
   212f0:	af00      	add	r7, sp, #0
   212f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212f4:	687b      	ldr	r3, [r7, #4]
   212f6:	681b      	ldr	r3, [r3, #0]
   212f8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   212fa:	68fb      	ldr	r3, [r7, #12]
   212fc:	7e1b      	ldrb	r3, [r3, #24]
   212fe:	b2db      	uxtb	r3, r3
   21300:	001a      	movs	r2, r3
   21302:	2304      	movs	r3, #4
   21304:	4013      	ands	r3, r2
   21306:	1e5a      	subs	r2, r3, #1
   21308:	4193      	sbcs	r3, r2
   2130a:	b2db      	uxtb	r3, r3
}
   2130c:	0018      	movs	r0, r3
   2130e:	46bd      	mov	sp, r7
   21310:	b004      	add	sp, #16
   21312:	bd80      	pop	{r7, pc}

00021314 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   21314:	b580      	push	{r7, lr}
   21316:	b084      	sub	sp, #16
   21318:	af00      	add	r7, sp, #0
   2131a:	6078      	str	r0, [r7, #4]
   2131c:	000a      	movs	r2, r1
   2131e:	1cbb      	adds	r3, r7, #2
   21320:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21322:	687b      	ldr	r3, [r7, #4]
   21324:	681b      	ldr	r3, [r3, #0]
   21326:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   21328:	687b      	ldr	r3, [r7, #4]
   2132a:	0018      	movs	r0, r3
   2132c:	4b0a      	ldr	r3, [pc, #40]	; (21358 <spi_write+0x44>)
   2132e:	4798      	blx	r3
   21330:	0003      	movs	r3, r0
   21332:	001a      	movs	r2, r3
   21334:	2301      	movs	r3, #1
   21336:	4053      	eors	r3, r2
   21338:	b2db      	uxtb	r3, r3
   2133a:	2b00      	cmp	r3, #0
   2133c:	d001      	beq.n	21342 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2133e:	2305      	movs	r3, #5
   21340:	e006      	b.n	21350 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   21342:	1cbb      	adds	r3, r7, #2
   21344:	881b      	ldrh	r3, [r3, #0]
   21346:	05db      	lsls	r3, r3, #23
   21348:	0dda      	lsrs	r2, r3, #23
   2134a:	68fb      	ldr	r3, [r7, #12]
   2134c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2134e:	2300      	movs	r3, #0
}
   21350:	0018      	movs	r0, r3
   21352:	46bd      	mov	sp, r7
   21354:	b004      	add	sp, #16
   21356:	bd80      	pop	{r7, pc}
   21358:	000212c5 	.word	0x000212c5

0002135c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   2135c:	b580      	push	{r7, lr}
   2135e:	b084      	sub	sp, #16
   21360:	af00      	add	r7, sp, #0
   21362:	6078      	str	r0, [r7, #4]
   21364:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21366:	687b      	ldr	r3, [r7, #4]
   21368:	681b      	ldr	r3, [r3, #0]
   2136a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   2136c:	687b      	ldr	r3, [r7, #4]
   2136e:	0018      	movs	r0, r3
   21370:	4b1b      	ldr	r3, [pc, #108]	; (213e0 <spi_read+0x84>)
   21372:	4798      	blx	r3
   21374:	0003      	movs	r3, r0
   21376:	001a      	movs	r2, r3
   21378:	2301      	movs	r3, #1
   2137a:	4053      	eors	r3, r2
   2137c:	b2db      	uxtb	r3, r3
   2137e:	2b00      	cmp	r3, #0
   21380:	d001      	beq.n	21386 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   21382:	2310      	movs	r3, #16
   21384:	e027      	b.n	213d6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21386:	230f      	movs	r3, #15
   21388:	18fb      	adds	r3, r7, r3
   2138a:	2200      	movs	r2, #0
   2138c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2138e:	68bb      	ldr	r3, [r7, #8]
   21390:	8b5b      	ldrh	r3, [r3, #26]
   21392:	b29b      	uxth	r3, r3
   21394:	001a      	movs	r2, r3
   21396:	2304      	movs	r3, #4
   21398:	4013      	ands	r3, r2
   2139a:	d006      	beq.n	213aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2139c:	230f      	movs	r3, #15
   2139e:	18fb      	adds	r3, r7, r3
   213a0:	221e      	movs	r2, #30
   213a2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   213a4:	68bb      	ldr	r3, [r7, #8]
   213a6:	2204      	movs	r2, #4
   213a8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   213aa:	687b      	ldr	r3, [r7, #4]
   213ac:	799b      	ldrb	r3, [r3, #6]
   213ae:	2b01      	cmp	r3, #1
   213b0:	d108      	bne.n	213c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   213b2:	68bb      	ldr	r3, [r7, #8]
   213b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   213b6:	b29b      	uxth	r3, r3
   213b8:	05db      	lsls	r3, r3, #23
   213ba:	0ddb      	lsrs	r3, r3, #23
   213bc:	b29a      	uxth	r2, r3
   213be:	683b      	ldr	r3, [r7, #0]
   213c0:	801a      	strh	r2, [r3, #0]
   213c2:	e005      	b.n	213d0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   213c4:	68bb      	ldr	r3, [r7, #8]
   213c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   213c8:	b2db      	uxtb	r3, r3
   213ca:	b29a      	uxth	r2, r3
   213cc:	683b      	ldr	r3, [r7, #0]
   213ce:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   213d0:	230f      	movs	r3, #15
   213d2:	18fb      	adds	r3, r7, r3
   213d4:	781b      	ldrb	r3, [r3, #0]
}
   213d6:	0018      	movs	r0, r3
   213d8:	46bd      	mov	sp, r7
   213da:	b004      	add	sp, #16
   213dc:	bd80      	pop	{r7, pc}
   213de:	46c0      	nop			; (mov r8, r8)
   213e0:	000212ed 	.word	0x000212ed

000213e4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   213e4:	b580      	push	{r7, lr}
   213e6:	b086      	sub	sp, #24
   213e8:	af00      	add	r7, sp, #0
   213ea:	60f8      	str	r0, [r7, #12]
   213ec:	60b9      	str	r1, [r7, #8]
   213ee:	1dbb      	adds	r3, r7, #6
   213f0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   213f2:	2313      	movs	r3, #19
   213f4:	18fb      	adds	r3, r7, r3
   213f6:	22ff      	movs	r2, #255	; 0xff
   213f8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   213fa:	2317      	movs	r3, #23
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	2200      	movs	r2, #0
   21400:	701a      	strb	r2, [r3, #0]
   21402:	2316      	movs	r3, #22
   21404:	18fb      	adds	r3, r7, r3
   21406:	2200      	movs	r2, #0
   21408:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2140a:	2314      	movs	r3, #20
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	2200      	movs	r2, #0
   21410:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   21412:	2310      	movs	r3, #16
   21414:	18fb      	adds	r3, r7, r3
   21416:	2200      	movs	r2, #0
   21418:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2141a:	68bb      	ldr	r3, [r7, #8]
   2141c:	2b00      	cmp	r3, #0
   2141e:	d102      	bne.n	21426 <spi_rw+0x42>
   21420:	68fb      	ldr	r3, [r7, #12]
   21422:	2b00      	cmp	r3, #0
   21424:	d003      	beq.n	2142e <spi_rw+0x4a>
   21426:	1dbb      	adds	r3, r7, #6
   21428:	881b      	ldrh	r3, [r3, #0]
   2142a:	2b00      	cmp	r3, #0
   2142c:	d102      	bne.n	21434 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2142e:	230f      	movs	r3, #15
   21430:	425b      	negs	r3, r3
   21432:	e07e      	b.n	21532 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21434:	68fb      	ldr	r3, [r7, #12]
   21436:	2b00      	cmp	r3, #0
   21438:	d106      	bne.n	21448 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2143a:	2313      	movs	r3, #19
   2143c:	18fb      	adds	r3, r7, r3
   2143e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   21440:	2317      	movs	r3, #23
   21442:	18fb      	adds	r3, r7, r3
   21444:	2201      	movs	r2, #1
   21446:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21448:	68bb      	ldr	r3, [r7, #8]
   2144a:	2b00      	cmp	r3, #0
   2144c:	d106      	bne.n	2145c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2144e:	2313      	movs	r3, #19
   21450:	18fb      	adds	r3, r7, r3
   21452:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21454:	2316      	movs	r3, #22
   21456:	18fb      	adds	r3, r7, r3
   21458:	2201      	movs	r2, #1
   2145a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   2145c:	4937      	ldr	r1, [pc, #220]	; (2153c <spi_rw+0x158>)
   2145e:	4b38      	ldr	r3, [pc, #224]	; (21540 <spi_rw+0x15c>)
   21460:	2201      	movs	r2, #1
   21462:	0018      	movs	r0, r3
   21464:	4b37      	ldr	r3, [pc, #220]	; (21544 <spi_rw+0x160>)
   21466:	4798      	blx	r3

	while (u16Sz) {
   21468:	e04c      	b.n	21504 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2146a:	68fb      	ldr	r3, [r7, #12]
   2146c:	781a      	ldrb	r2, [r3, #0]
   2146e:	2314      	movs	r3, #20
   21470:	18fb      	adds	r3, r7, r3
   21472:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21474:	46c0      	nop			; (mov r8, r8)
   21476:	4b32      	ldr	r3, [pc, #200]	; (21540 <spi_rw+0x15c>)
   21478:	0018      	movs	r0, r3
   2147a:	4b33      	ldr	r3, [pc, #204]	; (21548 <spi_rw+0x164>)
   2147c:	4798      	blx	r3
   2147e:	0003      	movs	r3, r0
   21480:	001a      	movs	r2, r3
   21482:	2301      	movs	r3, #1
   21484:	4053      	eors	r3, r2
   21486:	b2db      	uxtb	r3, r3
   21488:	2b00      	cmp	r3, #0
   2148a:	d1f4      	bne.n	21476 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2148c:	46c0      	nop			; (mov r8, r8)
   2148e:	2314      	movs	r3, #20
   21490:	18fb      	adds	r3, r7, r3
   21492:	881a      	ldrh	r2, [r3, #0]
   21494:	4b2a      	ldr	r3, [pc, #168]	; (21540 <spi_rw+0x15c>)
   21496:	0011      	movs	r1, r2
   21498:	0018      	movs	r0, r3
   2149a:	4b2c      	ldr	r3, [pc, #176]	; (2154c <spi_rw+0x168>)
   2149c:	4798      	blx	r3
   2149e:	1e03      	subs	r3, r0, #0
   214a0:	d1f5      	bne.n	2148e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   214a2:	46c0      	nop			; (mov r8, r8)
   214a4:	4b26      	ldr	r3, [pc, #152]	; (21540 <spi_rw+0x15c>)
   214a6:	0018      	movs	r0, r3
   214a8:	4b29      	ldr	r3, [pc, #164]	; (21550 <spi_rw+0x16c>)
   214aa:	4798      	blx	r3
   214ac:	0003      	movs	r3, r0
   214ae:	001a      	movs	r2, r3
   214b0:	2301      	movs	r3, #1
   214b2:	4053      	eors	r3, r2
   214b4:	b2db      	uxtb	r3, r3
   214b6:	2b00      	cmp	r3, #0
   214b8:	d1f4      	bne.n	214a4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   214ba:	46c0      	nop			; (mov r8, r8)
   214bc:	2310      	movs	r3, #16
   214be:	18fa      	adds	r2, r7, r3
   214c0:	4b1f      	ldr	r3, [pc, #124]	; (21540 <spi_rw+0x15c>)
   214c2:	0011      	movs	r1, r2
   214c4:	0018      	movs	r0, r3
   214c6:	4b23      	ldr	r3, [pc, #140]	; (21554 <spi_rw+0x170>)
   214c8:	4798      	blx	r3
   214ca:	1e03      	subs	r3, r0, #0
   214cc:	d1f6      	bne.n	214bc <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   214ce:	2310      	movs	r3, #16
   214d0:	18fb      	adds	r3, r7, r3
   214d2:	881b      	ldrh	r3, [r3, #0]
   214d4:	b2da      	uxtb	r2, r3
   214d6:	68bb      	ldr	r3, [r7, #8]
   214d8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   214da:	1dbb      	adds	r3, r7, #6
   214dc:	881a      	ldrh	r2, [r3, #0]
   214de:	1dbb      	adds	r3, r7, #6
   214e0:	3a01      	subs	r2, #1
   214e2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   214e4:	2316      	movs	r3, #22
   214e6:	18fb      	adds	r3, r7, r3
   214e8:	781b      	ldrb	r3, [r3, #0]
   214ea:	2b00      	cmp	r3, #0
   214ec:	d102      	bne.n	214f4 <spi_rw+0x110>
			pu8Miso++;
   214ee:	68bb      	ldr	r3, [r7, #8]
   214f0:	3301      	adds	r3, #1
   214f2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   214f4:	2317      	movs	r3, #23
   214f6:	18fb      	adds	r3, r7, r3
   214f8:	781b      	ldrb	r3, [r3, #0]
   214fa:	2b00      	cmp	r3, #0
   214fc:	d102      	bne.n	21504 <spi_rw+0x120>
			pu8Mosi++;
   214fe:	68fb      	ldr	r3, [r7, #12]
   21500:	3301      	adds	r3, #1
   21502:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21504:	1dbb      	adds	r3, r7, #6
   21506:	881b      	ldrh	r3, [r3, #0]
   21508:	2b00      	cmp	r3, #0
   2150a:	d1ae      	bne.n	2146a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2150c:	46c0      	nop			; (mov r8, r8)
   2150e:	4b0c      	ldr	r3, [pc, #48]	; (21540 <spi_rw+0x15c>)
   21510:	0018      	movs	r0, r3
   21512:	4b11      	ldr	r3, [pc, #68]	; (21558 <spi_rw+0x174>)
   21514:	4798      	blx	r3
   21516:	0003      	movs	r3, r0
   21518:	001a      	movs	r2, r3
   2151a:	2301      	movs	r3, #1
   2151c:	4053      	eors	r3, r2
   2151e:	b2db      	uxtb	r3, r3
   21520:	2b00      	cmp	r3, #0
   21522:	d1f4      	bne.n	2150e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21524:	4905      	ldr	r1, [pc, #20]	; (2153c <spi_rw+0x158>)
   21526:	4b06      	ldr	r3, [pc, #24]	; (21540 <spi_rw+0x15c>)
   21528:	2200      	movs	r2, #0
   2152a:	0018      	movs	r0, r3
   2152c:	4b05      	ldr	r3, [pc, #20]	; (21544 <spi_rw+0x160>)
   2152e:	4798      	blx	r3

	return M2M_SUCCESS;
   21530:	2300      	movs	r3, #0
}
   21532:	0018      	movs	r0, r3
   21534:	46bd      	mov	sp, r7
   21536:	b006      	add	sp, #24
   21538:	bd80      	pop	{r7, pc}
   2153a:	46c0      	nop			; (mov r8, r8)
   2153c:	20005aec 	.word	0x20005aec
   21540:	20005af0 	.word	0x20005af0
   21544:	00028c91 	.word	0x00028c91
   21548:	000212c5 	.word	0x000212c5
   2154c:	00021315 	.word	0x00021315
   21550:	000212ed 	.word	0x000212ed
   21554:	0002135d 	.word	0x0002135d
   21558:	0002129d 	.word	0x0002129d

0002155c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   2155c:	b580      	push	{r7, lr}
   2155e:	b092      	sub	sp, #72	; 0x48
   21560:	af00      	add	r7, sp, #0
   21562:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21564:	2347      	movs	r3, #71	; 0x47
   21566:	18fb      	adds	r3, r7, r3
   21568:	2200      	movs	r2, #0
   2156a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   2156c:	2308      	movs	r3, #8
   2156e:	18fb      	adds	r3, r7, r3
   21570:	0018      	movs	r0, r3
   21572:	4b26      	ldr	r3, [pc, #152]	; (2160c <nm_bus_init+0xb0>)
   21574:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21576:	2308      	movs	r3, #8
   21578:	18fb      	adds	r3, r7, r3
   2157a:	220e      	movs	r2, #14
   2157c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2157e:	2308      	movs	r3, #8
   21580:	18fa      	adds	r2, r7, r3
   21582:	4b23      	ldr	r3, [pc, #140]	; (21610 <nm_bus_init+0xb4>)
   21584:	0011      	movs	r1, r2
   21586:	0018      	movs	r0, r3
   21588:	4b22      	ldr	r3, [pc, #136]	; (21614 <nm_bus_init+0xb8>)
   2158a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2158c:	230c      	movs	r3, #12
   2158e:	18fb      	adds	r3, r7, r3
   21590:	0018      	movs	r0, r3
   21592:	4b21      	ldr	r3, [pc, #132]	; (21618 <nm_bus_init+0xbc>)
   21594:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21596:	230c      	movs	r3, #12
   21598:	18fb      	adds	r3, r7, r3
   2159a:	22c0      	movs	r2, #192	; 0xc0
   2159c:	0392      	lsls	r2, r2, #14
   2159e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   215a0:	230c      	movs	r3, #12
   215a2:	18fb      	adds	r3, r7, r3
   215a4:	4a1d      	ldr	r2, [pc, #116]	; (2161c <nm_bus_init+0xc0>)
   215a6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   215a8:	230c      	movs	r3, #12
   215aa:	18fb      	adds	r3, r7, r3
   215ac:	4a1c      	ldr	r2, [pc, #112]	; (21620 <nm_bus_init+0xc4>)
   215ae:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   215b0:	230c      	movs	r3, #12
   215b2:	18fb      	adds	r3, r7, r3
   215b4:	2201      	movs	r2, #1
   215b6:	4252      	negs	r2, r2
   215b8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   215ba:	230c      	movs	r3, #12
   215bc:	18fb      	adds	r3, r7, r3
   215be:	4a19      	ldr	r2, [pc, #100]	; (21624 <nm_bus_init+0xc8>)
   215c0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   215c2:	230c      	movs	r3, #12
   215c4:	18fb      	adds	r3, r7, r3
   215c6:	2200      	movs	r2, #0
   215c8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   215ca:	230c      	movs	r3, #12
   215cc:	18fb      	adds	r3, r7, r3
   215ce:	4a16      	ldr	r2, [pc, #88]	; (21628 <nm_bus_init+0xcc>)
   215d0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   215d2:	230c      	movs	r3, #12
   215d4:	18fa      	adds	r2, r7, r3
   215d6:	4915      	ldr	r1, [pc, #84]	; (2162c <nm_bus_init+0xd0>)
   215d8:	4b15      	ldr	r3, [pc, #84]	; (21630 <nm_bus_init+0xd4>)
   215da:	0018      	movs	r0, r3
   215dc:	4b15      	ldr	r3, [pc, #84]	; (21634 <nm_bus_init+0xd8>)
   215de:	4798      	blx	r3
   215e0:	1e03      	subs	r3, r0, #0
   215e2:	d002      	beq.n	215ea <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   215e4:	2306      	movs	r3, #6
   215e6:	425b      	negs	r3, r3
   215e8:	e00c      	b.n	21604 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   215ea:	4b11      	ldr	r3, [pc, #68]	; (21630 <nm_bus_init+0xd4>)
   215ec:	0018      	movs	r0, r3
   215ee:	4b12      	ldr	r3, [pc, #72]	; (21638 <nm_bus_init+0xdc>)
   215f0:	4798      	blx	r3

	nm_bsp_reset();
   215f2:	4b12      	ldr	r3, [pc, #72]	; (2163c <nm_bus_init+0xe0>)
   215f4:	4798      	blx	r3
	nm_bsp_sleep(1);
   215f6:	2001      	movs	r0, #1
   215f8:	4b11      	ldr	r3, [pc, #68]	; (21640 <nm_bus_init+0xe4>)
   215fa:	4798      	blx	r3
#endif
	return result;
   215fc:	2347      	movs	r3, #71	; 0x47
   215fe:	18fb      	adds	r3, r7, r3
   21600:	781b      	ldrb	r3, [r3, #0]
   21602:	b25b      	sxtb	r3, r3
}
   21604:	0018      	movs	r0, r3
   21606:	46bd      	mov	sp, r7
   21608:	b012      	add	sp, #72	; 0x48
   2160a:	bd80      	pop	{r7, pc}
   2160c:	00021169 	.word	0x00021169
   21610:	20005aec 	.word	0x20005aec
   21614:	0002118d 	.word	0x0002118d
   21618:	000210e5 	.word	0x000210e5
   2161c:	000c0002 	.word	0x000c0002
   21620:	000d0002 	.word	0x000d0002
   21624:	000f0002 	.word	0x000f0002
   21628:	00124f80 	.word	0x00124f80
   2162c:	42001000 	.word	0x42001000
   21630:	20005af0 	.word	0x20005af0
   21634:	000289cd 	.word	0x000289cd
   21638:	000211f1 	.word	0x000211f1
   2163c:	00020e61 	.word	0x00020e61
   21640:	00020ea1 	.word	0x00020ea1

00021644 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21644:	b590      	push	{r4, r7, lr}
   21646:	b085      	sub	sp, #20
   21648:	af00      	add	r7, sp, #0
   2164a:	0002      	movs	r2, r0
   2164c:	6039      	str	r1, [r7, #0]
   2164e:	1dfb      	adds	r3, r7, #7
   21650:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   21652:	230f      	movs	r3, #15
   21654:	18fb      	adds	r3, r7, r3
   21656:	2200      	movs	r2, #0
   21658:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   2165a:	1dfb      	adds	r3, r7, #7
   2165c:	781b      	ldrb	r3, [r3, #0]
   2165e:	2b03      	cmp	r3, #3
   21660:	d10f      	bne.n	21682 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   21662:	683b      	ldr	r3, [r7, #0]
   21664:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21666:	68bb      	ldr	r3, [r7, #8]
   21668:	6818      	ldr	r0, [r3, #0]
   2166a:	68bb      	ldr	r3, [r7, #8]
   2166c:	6859      	ldr	r1, [r3, #4]
   2166e:	68bb      	ldr	r3, [r7, #8]
   21670:	891b      	ldrh	r3, [r3, #8]
   21672:	220f      	movs	r2, #15
   21674:	18bc      	adds	r4, r7, r2
   21676:	001a      	movs	r2, r3
   21678:	4b10      	ldr	r3, [pc, #64]	; (216bc <nm_bus_ioctl+0x78>)
   2167a:	4798      	blx	r3
   2167c:	0003      	movs	r3, r0
   2167e:	7023      	strb	r3, [r4, #0]
		}
		break;
   21680:	e013      	b.n	216aa <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21682:	230f      	movs	r3, #15
   21684:	18fb      	adds	r3, r7, r3
   21686:	22ff      	movs	r2, #255	; 0xff
   21688:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2168a:	2383      	movs	r3, #131	; 0x83
   2168c:	005a      	lsls	r2, r3, #1
   2168e:	490c      	ldr	r1, [pc, #48]	; (216c0 <nm_bus_ioctl+0x7c>)
   21690:	4b0c      	ldr	r3, [pc, #48]	; (216c4 <nm_bus_ioctl+0x80>)
   21692:	0018      	movs	r0, r3
   21694:	4b0c      	ldr	r3, [pc, #48]	; (216c8 <nm_bus_ioctl+0x84>)
   21696:	4798      	blx	r3
   21698:	4b0c      	ldr	r3, [pc, #48]	; (216cc <nm_bus_ioctl+0x88>)
   2169a:	0018      	movs	r0, r3
   2169c:	4b0a      	ldr	r3, [pc, #40]	; (216c8 <nm_bus_ioctl+0x84>)
   2169e:	4798      	blx	r3
   216a0:	4b0b      	ldr	r3, [pc, #44]	; (216d0 <nm_bus_ioctl+0x8c>)
   216a2:	0018      	movs	r0, r3
   216a4:	4b08      	ldr	r3, [pc, #32]	; (216c8 <nm_bus_ioctl+0x84>)
   216a6:	4798      	blx	r3
			break;
   216a8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   216aa:	230f      	movs	r3, #15
   216ac:	18fb      	adds	r3, r7, r3
   216ae:	781b      	ldrb	r3, [r3, #0]
   216b0:	b25b      	sxtb	r3, r3
}
   216b2:	0018      	movs	r0, r3
   216b4:	46bd      	mov	sp, r7
   216b6:	b005      	add	sp, #20
   216b8:	bd90      	pop	{r4, r7, pc}
   216ba:	46c0      	nop			; (mov r8, r8)
   216bc:	000213e5 	.word	0x000213e5
   216c0:	00039dbc 	.word	0x00039dbc
   216c4:	00039d90 	.word	0x00039d90
   216c8:	0001e9e9 	.word	0x0001e9e9
   216cc:	00039da4 	.word	0x00039da4
   216d0:	00039db8 	.word	0x00039db8

000216d4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   216d4:	b580      	push	{r7, lr}
   216d6:	b082      	sub	sp, #8
   216d8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   216da:	1dfb      	adds	r3, r7, #7
   216dc:	2200      	movs	r2, #0
   216de:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   216e0:	1d3b      	adds	r3, r7, #4
   216e2:	0018      	movs	r0, r3
   216e4:	4b13      	ldr	r3, [pc, #76]	; (21734 <nm_bus_deinit+0x60>)
   216e6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   216e8:	1d3b      	adds	r3, r7, #4
   216ea:	2200      	movs	r2, #0
   216ec:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   216ee:	1d3b      	adds	r3, r7, #4
   216f0:	2200      	movs	r2, #0
   216f2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   216f4:	4b10      	ldr	r3, [pc, #64]	; (21738 <nm_bus_deinit+0x64>)
   216f6:	0018      	movs	r0, r3
   216f8:	4b10      	ldr	r3, [pc, #64]	; (2173c <nm_bus_deinit+0x68>)
   216fa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   216fc:	1d3b      	adds	r3, r7, #4
   216fe:	0019      	movs	r1, r3
   21700:	200c      	movs	r0, #12
   21702:	4b0f      	ldr	r3, [pc, #60]	; (21740 <nm_bus_deinit+0x6c>)
   21704:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21706:	1d3b      	adds	r3, r7, #4
   21708:	0019      	movs	r1, r3
   2170a:	200f      	movs	r0, #15
   2170c:	4b0c      	ldr	r3, [pc, #48]	; (21740 <nm_bus_deinit+0x6c>)
   2170e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   21710:	1d3b      	adds	r3, r7, #4
   21712:	0019      	movs	r1, r3
   21714:	200d      	movs	r0, #13
   21716:	4b0a      	ldr	r3, [pc, #40]	; (21740 <nm_bus_deinit+0x6c>)
   21718:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   2171a:	1d3b      	adds	r3, r7, #4
   2171c:	0019      	movs	r1, r3
   2171e:	200e      	movs	r0, #14
   21720:	4b07      	ldr	r3, [pc, #28]	; (21740 <nm_bus_deinit+0x6c>)
   21722:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21724:	1dfb      	adds	r3, r7, #7
   21726:	781b      	ldrb	r3, [r3, #0]
   21728:	b25b      	sxtb	r3, r3
}
   2172a:	0018      	movs	r0, r3
   2172c:	46bd      	mov	sp, r7
   2172e:	b002      	add	sp, #8
   21730:	bd80      	pop	{r7, pc}
   21732:	46c0      	nop			; (mov r8, r8)
   21734:	0002104d 	.word	0x0002104d
   21738:	20005af0 	.word	0x20005af0
   2173c:	00021241 	.word	0x00021241
   21740:	0002754d 	.word	0x0002754d

00021744 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21744:	b580      	push	{r7, lr}
   21746:	b084      	sub	sp, #16
   21748:	af00      	add	r7, sp, #0
   2174a:	60f8      	str	r0, [r7, #12]
   2174c:	60b9      	str	r1, [r7, #8]
   2174e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21750:	687b      	ldr	r3, [r7, #4]
   21752:	2b00      	cmp	r3, #0
   21754:	d010      	beq.n	21778 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21756:	68bb      	ldr	r3, [r7, #8]
   21758:	781a      	ldrb	r2, [r3, #0]
   2175a:	68fb      	ldr	r3, [r7, #12]
   2175c:	701a      	strb	r2, [r3, #0]
		pDst++;
   2175e:	68fb      	ldr	r3, [r7, #12]
   21760:	3301      	adds	r3, #1
   21762:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21764:	68bb      	ldr	r3, [r7, #8]
   21766:	3301      	adds	r3, #1
   21768:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2176a:	687b      	ldr	r3, [r7, #4]
   2176c:	3b01      	subs	r3, #1
   2176e:	607b      	str	r3, [r7, #4]
   21770:	687b      	ldr	r3, [r7, #4]
   21772:	2b00      	cmp	r3, #0
   21774:	d1ef      	bne.n	21756 <m2m_memcpy+0x12>
   21776:	e000      	b.n	2177a <m2m_memcpy+0x36>
	if(sz == 0) return;
   21778:	46c0      	nop			; (mov r8, r8)
}
   2177a:	46bd      	mov	sp, r7
   2177c:	b004      	add	sp, #16
   2177e:	bd80      	pop	{r7, pc}

00021780 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21780:	b580      	push	{r7, lr}
   21782:	b084      	sub	sp, #16
   21784:	af00      	add	r7, sp, #0
   21786:	60f8      	str	r0, [r7, #12]
   21788:	607a      	str	r2, [r7, #4]
   2178a:	230b      	movs	r3, #11
   2178c:	18fb      	adds	r3, r7, r3
   2178e:	1c0a      	adds	r2, r1, #0
   21790:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21792:	687b      	ldr	r3, [r7, #4]
   21794:	2b00      	cmp	r3, #0
   21796:	d00e      	beq.n	217b6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21798:	68fb      	ldr	r3, [r7, #12]
   2179a:	220b      	movs	r2, #11
   2179c:	18ba      	adds	r2, r7, r2
   2179e:	7812      	ldrb	r2, [r2, #0]
   217a0:	701a      	strb	r2, [r3, #0]
		pBuf++;
   217a2:	68fb      	ldr	r3, [r7, #12]
   217a4:	3301      	adds	r3, #1
   217a6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   217a8:	687b      	ldr	r3, [r7, #4]
   217aa:	3b01      	subs	r3, #1
   217ac:	607b      	str	r3, [r7, #4]
   217ae:	687b      	ldr	r3, [r7, #4]
   217b0:	2b00      	cmp	r3, #0
   217b2:	d1f1      	bne.n	21798 <m2m_memset+0x18>
   217b4:	e000      	b.n	217b8 <m2m_memset+0x38>
	if(sz == 0) return;
   217b6:	46c0      	nop			; (mov r8, r8)
}
   217b8:	46bd      	mov	sp, r7
   217ba:	b004      	add	sp, #16
   217bc:	bd80      	pop	{r7, pc}

000217be <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   217be:	b580      	push	{r7, lr}
   217c0:	b084      	sub	sp, #16
   217c2:	af00      	add	r7, sp, #0
   217c4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   217c6:	230e      	movs	r3, #14
   217c8:	18fb      	adds	r3, r7, r3
   217ca:	2200      	movs	r2, #0
   217cc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   217ce:	e009      	b.n	217e4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   217d0:	230e      	movs	r3, #14
   217d2:	18fb      	adds	r3, r7, r3
   217d4:	881a      	ldrh	r2, [r3, #0]
   217d6:	230e      	movs	r3, #14
   217d8:	18fb      	adds	r3, r7, r3
   217da:	3201      	adds	r2, #1
   217dc:	801a      	strh	r2, [r3, #0]
		pcStr++;
   217de:	687b      	ldr	r3, [r7, #4]
   217e0:	3301      	adds	r3, #1
   217e2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   217e4:	687b      	ldr	r3, [r7, #4]
   217e6:	781b      	ldrb	r3, [r3, #0]
   217e8:	2b00      	cmp	r3, #0
   217ea:	d1f1      	bne.n	217d0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   217ec:	230e      	movs	r3, #14
   217ee:	18fb      	adds	r3, r7, r3
   217f0:	881b      	ldrh	r3, [r3, #0]
}
   217f2:	0018      	movs	r0, r3
   217f4:	46bd      	mov	sp, r7
   217f6:	b004      	add	sp, #16
   217f8:	bd80      	pop	{r7, pc}
	...

000217fc <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   217fc:	b580      	push	{r7, lr}
   217fe:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21800:	4b04      	ldr	r3, [pc, #16]	; (21814 <isr+0x18>)
   21802:	78db      	ldrb	r3, [r3, #3]
   21804:	b2db      	uxtb	r3, r3
   21806:	3301      	adds	r3, #1
   21808:	b2da      	uxtb	r2, r3
   2180a:	4b02      	ldr	r3, [pc, #8]	; (21814 <isr+0x18>)
   2180c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2180e:	46c0      	nop			; (mov r8, r8)
   21810:	46bd      	mov	sp, r7
   21812:	bd80      	pop	{r7, pc}
   21814:	20005b2c 	.word	0x20005b2c

00021818 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21818:	b590      	push	{r4, r7, lr}
   2181a:	b083      	sub	sp, #12
   2181c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2181e:	1dfb      	adds	r3, r7, #7
   21820:	2200      	movs	r2, #0
   21822:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21824:	4b14      	ldr	r3, [pc, #80]	; (21878 <hif_set_rx_done+0x60>)
   21826:	2200      	movs	r2, #0
   21828:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   2182a:	2001      	movs	r0, #1
   2182c:	4b13      	ldr	r3, [pc, #76]	; (2187c <hif_set_rx_done+0x64>)
   2182e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21830:	1dfc      	adds	r4, r7, #7
   21832:	003b      	movs	r3, r7
   21834:	4a12      	ldr	r2, [pc, #72]	; (21880 <hif_set_rx_done+0x68>)
   21836:	0019      	movs	r1, r3
   21838:	0010      	movs	r0, r2
   2183a:	4b12      	ldr	r3, [pc, #72]	; (21884 <hif_set_rx_done+0x6c>)
   2183c:	4798      	blx	r3
   2183e:	0003      	movs	r3, r0
   21840:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21842:	1dfb      	adds	r3, r7, #7
   21844:	781b      	ldrb	r3, [r3, #0]
   21846:	b25b      	sxtb	r3, r3
   21848:	2b00      	cmp	r3, #0
   2184a:	d10d      	bne.n	21868 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   2184c:	683b      	ldr	r3, [r7, #0]
   2184e:	2202      	movs	r2, #2
   21850:	4313      	orrs	r3, r2
   21852:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21854:	683b      	ldr	r3, [r7, #0]
   21856:	1dfc      	adds	r4, r7, #7
   21858:	4a09      	ldr	r2, [pc, #36]	; (21880 <hif_set_rx_done+0x68>)
   2185a:	0019      	movs	r1, r3
   2185c:	0010      	movs	r0, r2
   2185e:	4b0a      	ldr	r3, [pc, #40]	; (21888 <hif_set_rx_done+0x70>)
   21860:	4798      	blx	r3
   21862:	0003      	movs	r3, r0
   21864:	7023      	strb	r3, [r4, #0]
   21866:	e000      	b.n	2186a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21868:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   2186a:	1dfb      	adds	r3, r7, #7
   2186c:	781b      	ldrb	r3, [r3, #0]
   2186e:	b25b      	sxtb	r3, r3

}
   21870:	0018      	movs	r0, r3
   21872:	46bd      	mov	sp, r7
   21874:	b003      	add	sp, #12
   21876:	bd90      	pop	{r4, r7, pc}
   21878:	20005b2c 	.word	0x20005b2c
   2187c:	00020f35 	.word	0x00020f35
   21880:	00001070 	.word	0x00001070
   21884:	00023811 	.word	0x00023811
   21888:	00023835 	.word	0x00023835

0002188c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2188c:	b580      	push	{r7, lr}
   2188e:	b082      	sub	sp, #8
   21890:	af00      	add	r7, sp, #0
   21892:	603a      	str	r2, [r7, #0]
   21894:	1dfb      	adds	r3, r7, #7
   21896:	1c02      	adds	r2, r0, #0
   21898:	701a      	strb	r2, [r3, #0]
   2189a:	1d3b      	adds	r3, r7, #4
   2189c:	1c0a      	adds	r2, r1, #0
   2189e:	801a      	strh	r2, [r3, #0]


}
   218a0:	46c0      	nop			; (mov r8, r8)
   218a2:	46bd      	mov	sp, r7
   218a4:	b002      	add	sp, #8
   218a6:	bd80      	pop	{r7, pc}

000218a8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   218a8:	b590      	push	{r4, r7, lr}
   218aa:	b083      	sub	sp, #12
   218ac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   218ae:	1dfb      	adds	r3, r7, #7
   218b0:	2200      	movs	r2, #0
   218b2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   218b4:	4b16      	ldr	r3, [pc, #88]	; (21910 <hif_chip_wake+0x68>)
   218b6:	789b      	ldrb	r3, [r3, #2]
   218b8:	b2db      	uxtb	r3, r3
   218ba:	2b00      	cmp	r3, #0
   218bc:	d003      	beq.n	218c6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   218be:	1dfb      	adds	r3, r7, #7
   218c0:	781b      	ldrb	r3, [r3, #0]
   218c2:	b25b      	sxtb	r3, r3
   218c4:	e01f      	b.n	21906 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   218c6:	4b12      	ldr	r3, [pc, #72]	; (21910 <hif_chip_wake+0x68>)
   218c8:	785b      	ldrb	r3, [r3, #1]
   218ca:	b2db      	uxtb	r3, r3
   218cc:	2b00      	cmp	r3, #0
   218ce:	d10e      	bne.n	218ee <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   218d0:	4b0f      	ldr	r3, [pc, #60]	; (21910 <hif_chip_wake+0x68>)
   218d2:	781b      	ldrb	r3, [r3, #0]
   218d4:	b2db      	uxtb	r3, r3
   218d6:	2b00      	cmp	r3, #0
   218d8:	d009      	beq.n	218ee <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   218da:	1dfc      	adds	r4, r7, #7
   218dc:	4b0d      	ldr	r3, [pc, #52]	; (21914 <hif_chip_wake+0x6c>)
   218de:	4798      	blx	r3
   218e0:	0003      	movs	r3, r0
   218e2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   218e4:	1dfb      	adds	r3, r7, #7
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	b25b      	sxtb	r3, r3
   218ea:	2b00      	cmp	r3, #0
   218ec:	d107      	bne.n	218fe <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   218ee:	4b08      	ldr	r3, [pc, #32]	; (21910 <hif_chip_wake+0x68>)
   218f0:	785b      	ldrb	r3, [r3, #1]
   218f2:	b2db      	uxtb	r3, r3
   218f4:	3301      	adds	r3, #1
   218f6:	b2da      	uxtb	r2, r3
   218f8:	4b05      	ldr	r3, [pc, #20]	; (21910 <hif_chip_wake+0x68>)
   218fa:	705a      	strb	r2, [r3, #1]
   218fc:	e000      	b.n	21900 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   218fe:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21900:	1dfb      	adds	r3, r7, #7
   21902:	781b      	ldrb	r3, [r3, #0]
   21904:	b25b      	sxtb	r3, r3
}
   21906:	0018      	movs	r0, r3
   21908:	46bd      	mov	sp, r7
   2190a:	b003      	add	sp, #12
   2190c:	bd90      	pop	{r4, r7, pc}
   2190e:	46c0      	nop			; (mov r8, r8)
   21910:	20005b2c 	.word	0x20005b2c
   21914:	000232e1 	.word	0x000232e1

00021918 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21918:	b580      	push	{r7, lr}
   2191a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   2191c:	4b07      	ldr	r3, [pc, #28]	; (2193c <hif_chip_sleep_sc+0x24>)
   2191e:	785b      	ldrb	r3, [r3, #1]
   21920:	b2db      	uxtb	r3, r3
   21922:	2b00      	cmp	r3, #0
   21924:	d006      	beq.n	21934 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21926:	4b05      	ldr	r3, [pc, #20]	; (2193c <hif_chip_sleep_sc+0x24>)
   21928:	785b      	ldrb	r3, [r3, #1]
   2192a:	b2db      	uxtb	r3, r3
   2192c:	3b01      	subs	r3, #1
   2192e:	b2da      	uxtb	r2, r3
   21930:	4b02      	ldr	r3, [pc, #8]	; (2193c <hif_chip_sleep_sc+0x24>)
   21932:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21934:	2300      	movs	r3, #0
}
   21936:	0018      	movs	r0, r3
   21938:	46bd      	mov	sp, r7
   2193a:	bd80      	pop	{r7, pc}
   2193c:	20005b2c 	.word	0x20005b2c

00021940 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21940:	b590      	push	{r4, r7, lr}
   21942:	b083      	sub	sp, #12
   21944:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21946:	1dfb      	adds	r3, r7, #7
   21948:	2200      	movs	r2, #0
   2194a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   2194c:	4b10      	ldr	r3, [pc, #64]	; (21990 <hif_chip_sleep+0x50>)
   2194e:	785b      	ldrb	r3, [r3, #1]
   21950:	b2db      	uxtb	r3, r3
   21952:	2b00      	cmp	r3, #0
   21954:	d006      	beq.n	21964 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21956:	4b0e      	ldr	r3, [pc, #56]	; (21990 <hif_chip_sleep+0x50>)
   21958:	785b      	ldrb	r3, [r3, #1]
   2195a:	b2db      	uxtb	r3, r3
   2195c:	3b01      	subs	r3, #1
   2195e:	b2da      	uxtb	r2, r3
   21960:	4b0b      	ldr	r3, [pc, #44]	; (21990 <hif_chip_sleep+0x50>)
   21962:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21964:	4b0a      	ldr	r3, [pc, #40]	; (21990 <hif_chip_sleep+0x50>)
   21966:	785b      	ldrb	r3, [r3, #1]
   21968:	b2db      	uxtb	r3, r3
   2196a:	2b00      	cmp	r3, #0
   2196c:	d109      	bne.n	21982 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2196e:	4b08      	ldr	r3, [pc, #32]	; (21990 <hif_chip_sleep+0x50>)
   21970:	781b      	ldrb	r3, [r3, #0]
   21972:	b2db      	uxtb	r3, r3
   21974:	2b00      	cmp	r3, #0
   21976:	d004      	beq.n	21982 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21978:	1dfc      	adds	r4, r7, #7
   2197a:	4b06      	ldr	r3, [pc, #24]	; (21994 <hif_chip_sleep+0x54>)
   2197c:	4798      	blx	r3
   2197e:	0003      	movs	r3, r0
   21980:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21982:	1dfb      	adds	r3, r7, #7
   21984:	781b      	ldrb	r3, [r3, #0]
   21986:	b25b      	sxtb	r3, r3
}
   21988:	0018      	movs	r0, r3
   2198a:	46bd      	mov	sp, r7
   2198c:	b003      	add	sp, #12
   2198e:	bd90      	pop	{r4, r7, pc}
   21990:	20005b2c 	.word	0x20005b2c
   21994:	00023209 	.word	0x00023209

00021998 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21998:	b580      	push	{r7, lr}
   2199a:	b082      	sub	sp, #8
   2199c:	af00      	add	r7, sp, #0
   2199e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   219a0:	4b09      	ldr	r3, [pc, #36]	; (219c8 <hif_init+0x30>)
   219a2:	222c      	movs	r2, #44	; 0x2c
   219a4:	2100      	movs	r1, #0
   219a6:	0018      	movs	r0, r3
   219a8:	4b08      	ldr	r3, [pc, #32]	; (219cc <hif_init+0x34>)
   219aa:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   219ac:	4b08      	ldr	r3, [pc, #32]	; (219d0 <hif_init+0x38>)
   219ae:	0018      	movs	r0, r3
   219b0:	4b08      	ldr	r3, [pc, #32]	; (219d4 <hif_init+0x3c>)
   219b2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   219b4:	4b08      	ldr	r3, [pc, #32]	; (219d8 <hif_init+0x40>)
   219b6:	0019      	movs	r1, r3
   219b8:	2003      	movs	r0, #3
   219ba:	4b08      	ldr	r3, [pc, #32]	; (219dc <hif_init+0x44>)
   219bc:	4798      	blx	r3
	return M2M_SUCCESS;
   219be:	2300      	movs	r3, #0
}
   219c0:	0018      	movs	r0, r3
   219c2:	46bd      	mov	sp, r7
   219c4:	b002      	add	sp, #8
   219c6:	bd80      	pop	{r7, pc}
   219c8:	20005b2c 	.word	0x20005b2c
   219cc:	00021781 	.word	0x00021781
   219d0:	000217fd 	.word	0x000217fd
   219d4:	00020ebd 	.word	0x00020ebd
   219d8:	0002188d 	.word	0x0002188d
   219dc:	0002247d 	.word	0x0002247d

000219e0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   219e0:	b590      	push	{r4, r7, lr}
   219e2:	b089      	sub	sp, #36	; 0x24
   219e4:	af00      	add	r7, sp, #0
   219e6:	0004      	movs	r4, r0
   219e8:	0008      	movs	r0, r1
   219ea:	603a      	str	r2, [r7, #0]
   219ec:	0019      	movs	r1, r3
   219ee:	1dfb      	adds	r3, r7, #7
   219f0:	1c22      	adds	r2, r4, #0
   219f2:	701a      	strb	r2, [r3, #0]
   219f4:	1dbb      	adds	r3, r7, #6
   219f6:	1c02      	adds	r2, r0, #0
   219f8:	701a      	strb	r2, [r3, #0]
   219fa:	1d3b      	adds	r3, r7, #4
   219fc:	1c0a      	adds	r2, r1, #0
   219fe:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21a00:	231f      	movs	r3, #31
   21a02:	18fb      	adds	r3, r7, r3
   21a04:	22ff      	movs	r2, #255	; 0xff
   21a06:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21a08:	1dbb      	adds	r3, r7, #6
   21a0a:	781b      	ldrb	r3, [r3, #0]
   21a0c:	227f      	movs	r2, #127	; 0x7f
   21a0e:	4013      	ands	r3, r2
   21a10:	b2da      	uxtb	r2, r3
   21a12:	2318      	movs	r3, #24
   21a14:	18fb      	adds	r3, r7, r3
   21a16:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21a18:	2318      	movs	r3, #24
   21a1a:	18fb      	adds	r3, r7, r3
   21a1c:	1dfa      	adds	r2, r7, #7
   21a1e:	7812      	ldrb	r2, [r2, #0]
   21a20:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21a22:	2318      	movs	r3, #24
   21a24:	18fb      	adds	r3, r7, r3
   21a26:	2208      	movs	r2, #8
   21a28:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a2c:	2b00      	cmp	r3, #0
   21a2e:	d011      	beq.n	21a54 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21a30:	2318      	movs	r3, #24
   21a32:	18fb      	adds	r3, r7, r3
   21a34:	885b      	ldrh	r3, [r3, #2]
   21a36:	b29a      	uxth	r2, r3
   21a38:	2338      	movs	r3, #56	; 0x38
   21a3a:	18f9      	adds	r1, r7, r3
   21a3c:	2334      	movs	r3, #52	; 0x34
   21a3e:	18fb      	adds	r3, r7, r3
   21a40:	8809      	ldrh	r1, [r1, #0]
   21a42:	881b      	ldrh	r3, [r3, #0]
   21a44:	18cb      	adds	r3, r1, r3
   21a46:	b29b      	uxth	r3, r3
   21a48:	18d3      	adds	r3, r2, r3
   21a4a:	b29a      	uxth	r2, r3
   21a4c:	2318      	movs	r3, #24
   21a4e:	18fb      	adds	r3, r7, r3
   21a50:	805a      	strh	r2, [r3, #2]
   21a52:	e00a      	b.n	21a6a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21a54:	2318      	movs	r3, #24
   21a56:	18fb      	adds	r3, r7, r3
   21a58:	885b      	ldrh	r3, [r3, #2]
   21a5a:	b29a      	uxth	r2, r3
   21a5c:	1d3b      	adds	r3, r7, #4
   21a5e:	881b      	ldrh	r3, [r3, #0]
   21a60:	18d3      	adds	r3, r2, r3
   21a62:	b29a      	uxth	r2, r3
   21a64:	2318      	movs	r3, #24
   21a66:	18fb      	adds	r3, r7, r3
   21a68:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21a6a:	231f      	movs	r3, #31
   21a6c:	18fc      	adds	r4, r7, r3
   21a6e:	4bb2      	ldr	r3, [pc, #712]	; (21d38 <hif_send+0x358>)
   21a70:	4798      	blx	r3
   21a72:	0003      	movs	r3, r0
   21a74:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21a76:	231f      	movs	r3, #31
   21a78:	18fb      	adds	r3, r7, r3
   21a7a:	781b      	ldrb	r3, [r3, #0]
   21a7c:	b25b      	sxtb	r3, r3
   21a7e:	2b00      	cmp	r3, #0
   21a80:	d000      	beq.n	21a84 <hif_send+0xa4>
   21a82:	e129      	b.n	21cd8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21a84:	2300      	movs	r3, #0
   21a86:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21a88:	230e      	movs	r3, #14
   21a8a:	18fb      	adds	r3, r7, r3
   21a8c:	2200      	movs	r2, #0
   21a8e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21a90:	2300      	movs	r3, #0
   21a92:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21a94:	1dfb      	adds	r3, r7, #7
   21a96:	781a      	ldrb	r2, [r3, #0]
   21a98:	697b      	ldr	r3, [r7, #20]
   21a9a:	4313      	orrs	r3, r2
   21a9c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21a9e:	1dbb      	adds	r3, r7, #6
   21aa0:	781b      	ldrb	r3, [r3, #0]
   21aa2:	021a      	lsls	r2, r3, #8
   21aa4:	697b      	ldr	r3, [r7, #20]
   21aa6:	4313      	orrs	r3, r2
   21aa8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21aaa:	2318      	movs	r3, #24
   21aac:	18fb      	adds	r3, r7, r3
   21aae:	885b      	ldrh	r3, [r3, #2]
   21ab0:	b29b      	uxth	r3, r3
   21ab2:	041a      	lsls	r2, r3, #16
   21ab4:	697b      	ldr	r3, [r7, #20]
   21ab6:	4313      	orrs	r3, r2
   21ab8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21aba:	697b      	ldr	r3, [r7, #20]
   21abc:	221f      	movs	r2, #31
   21abe:	18bc      	adds	r4, r7, r2
   21ac0:	4a9e      	ldr	r2, [pc, #632]	; (21d3c <hif_send+0x35c>)
   21ac2:	0019      	movs	r1, r3
   21ac4:	0010      	movs	r0, r2
   21ac6:	4b9e      	ldr	r3, [pc, #632]	; (21d40 <hif_send+0x360>)
   21ac8:	4798      	blx	r3
   21aca:	0003      	movs	r3, r0
   21acc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21ace:	231f      	movs	r3, #31
   21ad0:	18fb      	adds	r3, r7, r3
   21ad2:	781b      	ldrb	r3, [r3, #0]
   21ad4:	b25b      	sxtb	r3, r3
   21ad6:	2b00      	cmp	r3, #0
   21ad8:	d000      	beq.n	21adc <hif_send+0xfc>
   21ada:	e119      	b.n	21d10 <hif_send+0x330>

		reg = 0UL;
   21adc:	2300      	movs	r3, #0
   21ade:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21ae0:	697b      	ldr	r3, [r7, #20]
   21ae2:	2202      	movs	r2, #2
   21ae4:	4313      	orrs	r3, r2
   21ae6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21ae8:	697b      	ldr	r3, [r7, #20]
   21aea:	221f      	movs	r2, #31
   21aec:	18bc      	adds	r4, r7, r2
   21aee:	4a95      	ldr	r2, [pc, #596]	; (21d44 <hif_send+0x364>)
   21af0:	0019      	movs	r1, r3
   21af2:	0010      	movs	r0, r2
   21af4:	4b92      	ldr	r3, [pc, #584]	; (21d40 <hif_send+0x360>)
   21af6:	4798      	blx	r3
   21af8:	0003      	movs	r3, r0
   21afa:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21afc:	231f      	movs	r3, #31
   21afe:	18fb      	adds	r3, r7, r3
   21b00:	781b      	ldrb	r3, [r3, #0]
   21b02:	b25b      	sxtb	r3, r3
   21b04:	2b00      	cmp	r3, #0
   21b06:	d000      	beq.n	21b0a <hif_send+0x12a>
   21b08:	e104      	b.n	21d14 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21b0a:	2300      	movs	r3, #0
   21b0c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21b0e:	230e      	movs	r3, #14
   21b10:	18fb      	adds	r3, r7, r3
   21b12:	2200      	movs	r2, #0
   21b14:	801a      	strh	r2, [r3, #0]
   21b16:	e050      	b.n	21bba <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21b18:	231f      	movs	r3, #31
   21b1a:	18fc      	adds	r4, r7, r3
   21b1c:	2314      	movs	r3, #20
   21b1e:	18fb      	adds	r3, r7, r3
   21b20:	4a88      	ldr	r2, [pc, #544]	; (21d44 <hif_send+0x364>)
   21b22:	0019      	movs	r1, r3
   21b24:	0010      	movs	r0, r2
   21b26:	4b88      	ldr	r3, [pc, #544]	; (21d48 <hif_send+0x368>)
   21b28:	4798      	blx	r3
   21b2a:	0003      	movs	r3, r0
   21b2c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21b2e:	231f      	movs	r3, #31
   21b30:	18fb      	adds	r3, r7, r3
   21b32:	781b      	ldrb	r3, [r3, #0]
   21b34:	b25b      	sxtb	r3, r3
   21b36:	2b00      	cmp	r3, #0
   21b38:	d147      	bne.n	21bca <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21b3a:	230e      	movs	r3, #14
   21b3c:	18fb      	adds	r3, r7, r3
   21b3e:	881b      	ldrh	r3, [r3, #0]
   21b40:	b29a      	uxth	r2, r3
   21b42:	23f4      	movs	r3, #244	; 0xf4
   21b44:	33ff      	adds	r3, #255	; 0xff
   21b46:	429a      	cmp	r2, r3
   21b48:	d916      	bls.n	21b78 <hif_send+0x198>
				if(cnt < 501) {
   21b4a:	230e      	movs	r3, #14
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	881b      	ldrh	r3, [r3, #0]
   21b50:	b29a      	uxth	r2, r3
   21b52:	23fa      	movs	r3, #250	; 0xfa
   21b54:	005b      	lsls	r3, r3, #1
   21b56:	429a      	cmp	r2, r3
   21b58:	d80b      	bhi.n	21b72 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21b5a:	4b7c      	ldr	r3, [pc, #496]	; (21d4c <hif_send+0x36c>)
   21b5c:	0018      	movs	r0, r3
   21b5e:	4b7c      	ldr	r3, [pc, #496]	; (21d50 <hif_send+0x370>)
   21b60:	4798      	blx	r3
   21b62:	4b7c      	ldr	r3, [pc, #496]	; (21d54 <hif_send+0x374>)
   21b64:	0018      	movs	r0, r3
   21b66:	4b7a      	ldr	r3, [pc, #488]	; (21d50 <hif_send+0x370>)
   21b68:	4798      	blx	r3
   21b6a:	4b7b      	ldr	r3, [pc, #492]	; (21d58 <hif_send+0x378>)
   21b6c:	0018      	movs	r0, r3
   21b6e:	4b78      	ldr	r3, [pc, #480]	; (21d50 <hif_send+0x370>)
   21b70:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21b72:	2001      	movs	r0, #1
   21b74:	4b79      	ldr	r3, [pc, #484]	; (21d5c <hif_send+0x37c>)
   21b76:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21b78:	697b      	ldr	r3, [r7, #20]
   21b7a:	2202      	movs	r2, #2
   21b7c:	4013      	ands	r3, r2
   21b7e:	d113      	bne.n	21ba8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21b80:	231f      	movs	r3, #31
   21b82:	18fc      	adds	r4, r7, r3
   21b84:	2310      	movs	r3, #16
   21b86:	18fb      	adds	r3, r7, r3
   21b88:	4a75      	ldr	r2, [pc, #468]	; (21d60 <hif_send+0x380>)
   21b8a:	0019      	movs	r1, r3
   21b8c:	0010      	movs	r0, r2
   21b8e:	4b6e      	ldr	r3, [pc, #440]	; (21d48 <hif_send+0x368>)
   21b90:	4798      	blx	r3
   21b92:	0003      	movs	r3, r0
   21b94:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21b96:	231f      	movs	r3, #31
   21b98:	18fb      	adds	r3, r7, r3
   21b9a:	781b      	ldrb	r3, [r3, #0]
   21b9c:	b25b      	sxtb	r3, r3
   21b9e:	2b00      	cmp	r3, #0
   21ba0:	d015      	beq.n	21bce <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21ba2:	2300      	movs	r3, #0
   21ba4:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21ba6:	e0bc      	b.n	21d22 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21ba8:	230e      	movs	r3, #14
   21baa:	18fb      	adds	r3, r7, r3
   21bac:	881b      	ldrh	r3, [r3, #0]
   21bae:	b29b      	uxth	r3, r3
   21bb0:	3301      	adds	r3, #1
   21bb2:	b29a      	uxth	r2, r3
   21bb4:	230e      	movs	r3, #14
   21bb6:	18fb      	adds	r3, r7, r3
   21bb8:	801a      	strh	r2, [r3, #0]
   21bba:	230e      	movs	r3, #14
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	881b      	ldrh	r3, [r3, #0]
   21bc0:	b29b      	uxth	r3, r3
   21bc2:	4a68      	ldr	r2, [pc, #416]	; (21d64 <hif_send+0x384>)
   21bc4:	4293      	cmp	r3, r2
   21bc6:	d9a7      	bls.n	21b18 <hif_send+0x138>
   21bc8:	e002      	b.n	21bd0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21bca:	46c0      	nop			; (mov r8, r8)
   21bcc:	e000      	b.n	21bd0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21bce:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21bd0:	693b      	ldr	r3, [r7, #16]
   21bd2:	2b00      	cmp	r3, #0
   21bd4:	d100      	bne.n	21bd8 <hif_send+0x1f8>
   21bd6:	e074      	b.n	21cc2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21bd8:	693b      	ldr	r3, [r7, #16]
   21bda:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21bdc:	2318      	movs	r3, #24
   21bde:	18fb      	adds	r3, r7, r3
   21be0:	885b      	ldrh	r3, [r3, #2]
   21be2:	b29a      	uxth	r2, r3
   21be4:	2318      	movs	r3, #24
   21be6:	18fb      	adds	r3, r7, r3
   21be8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21bea:	68bb      	ldr	r3, [r7, #8]
   21bec:	221f      	movs	r2, #31
   21bee:	18bc      	adds	r4, r7, r2
   21bf0:	2218      	movs	r2, #24
   21bf2:	18b9      	adds	r1, r7, r2
   21bf4:	2208      	movs	r2, #8
   21bf6:	0018      	movs	r0, r3
   21bf8:	4b5b      	ldr	r3, [pc, #364]	; (21d68 <hif_send+0x388>)
   21bfa:	4798      	blx	r3
   21bfc:	0003      	movs	r3, r0
   21bfe:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21c00:	231f      	movs	r3, #31
   21c02:	18fb      	adds	r3, r7, r3
   21c04:	781b      	ldrb	r3, [r3, #0]
   21c06:	b25b      	sxtb	r3, r3
   21c08:	2b00      	cmp	r3, #0
   21c0a:	d000      	beq.n	21c0e <hif_send+0x22e>
   21c0c:	e084      	b.n	21d18 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21c0e:	68bb      	ldr	r3, [r7, #8]
   21c10:	3308      	adds	r3, #8
   21c12:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21c14:	683b      	ldr	r3, [r7, #0]
   21c16:	2b00      	cmp	r3, #0
   21c18:	d016      	beq.n	21c48 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21c1a:	68b8      	ldr	r0, [r7, #8]
   21c1c:	1d3b      	adds	r3, r7, #4
   21c1e:	881a      	ldrh	r2, [r3, #0]
   21c20:	231f      	movs	r3, #31
   21c22:	18fc      	adds	r4, r7, r3
   21c24:	683b      	ldr	r3, [r7, #0]
   21c26:	0019      	movs	r1, r3
   21c28:	4b4f      	ldr	r3, [pc, #316]	; (21d68 <hif_send+0x388>)
   21c2a:	4798      	blx	r3
   21c2c:	0003      	movs	r3, r0
   21c2e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21c30:	231f      	movs	r3, #31
   21c32:	18fb      	adds	r3, r7, r3
   21c34:	781b      	ldrb	r3, [r3, #0]
   21c36:	b25b      	sxtb	r3, r3
   21c38:	2b00      	cmp	r3, #0
   21c3a:	d000      	beq.n	21c3e <hif_send+0x25e>
   21c3c:	e06e      	b.n	21d1c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21c3e:	1d3b      	adds	r3, r7, #4
   21c40:	881a      	ldrh	r2, [r3, #0]
   21c42:	68bb      	ldr	r3, [r7, #8]
   21c44:	18d3      	adds	r3, r2, r3
   21c46:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21c4a:	2b00      	cmp	r3, #0
   21c4c:	d021      	beq.n	21c92 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21c4e:	2338      	movs	r3, #56	; 0x38
   21c50:	18fb      	adds	r3, r7, r3
   21c52:	881a      	ldrh	r2, [r3, #0]
   21c54:	1d3b      	adds	r3, r7, #4
   21c56:	881b      	ldrh	r3, [r3, #0]
   21c58:	1ad3      	subs	r3, r2, r3
   21c5a:	001a      	movs	r2, r3
   21c5c:	68bb      	ldr	r3, [r7, #8]
   21c5e:	18d3      	adds	r3, r2, r3
   21c60:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21c62:	68b8      	ldr	r0, [r7, #8]
   21c64:	2334      	movs	r3, #52	; 0x34
   21c66:	18fb      	adds	r3, r7, r3
   21c68:	881a      	ldrh	r2, [r3, #0]
   21c6a:	231f      	movs	r3, #31
   21c6c:	18fc      	adds	r4, r7, r3
   21c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21c70:	0019      	movs	r1, r3
   21c72:	4b3d      	ldr	r3, [pc, #244]	; (21d68 <hif_send+0x388>)
   21c74:	4798      	blx	r3
   21c76:	0003      	movs	r3, r0
   21c78:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21c7a:	231f      	movs	r3, #31
   21c7c:	18fb      	adds	r3, r7, r3
   21c7e:	781b      	ldrb	r3, [r3, #0]
   21c80:	b25b      	sxtb	r3, r3
   21c82:	2b00      	cmp	r3, #0
   21c84:	d14c      	bne.n	21d20 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21c86:	2334      	movs	r3, #52	; 0x34
   21c88:	18fb      	adds	r3, r7, r3
   21c8a:	881a      	ldrh	r2, [r3, #0]
   21c8c:	68bb      	ldr	r3, [r7, #8]
   21c8e:	18d3      	adds	r3, r2, r3
   21c90:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21c92:	693b      	ldr	r3, [r7, #16]
   21c94:	009b      	lsls	r3, r3, #2
   21c96:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21c98:	697b      	ldr	r3, [r7, #20]
   21c9a:	2202      	movs	r2, #2
   21c9c:	4313      	orrs	r3, r2
   21c9e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21ca0:	697b      	ldr	r3, [r7, #20]
   21ca2:	221f      	movs	r2, #31
   21ca4:	18bc      	adds	r4, r7, r2
   21ca6:	4a31      	ldr	r2, [pc, #196]	; (21d6c <hif_send+0x38c>)
   21ca8:	0019      	movs	r1, r3
   21caa:	0010      	movs	r0, r2
   21cac:	4b24      	ldr	r3, [pc, #144]	; (21d40 <hif_send+0x360>)
   21cae:	4798      	blx	r3
   21cb0:	0003      	movs	r3, r0
   21cb2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21cb4:	231f      	movs	r3, #31
   21cb6:	18fb      	adds	r3, r7, r3
   21cb8:	781b      	ldrb	r3, [r3, #0]
   21cba:	b25b      	sxtb	r3, r3
   21cbc:	2b00      	cmp	r3, #0
   21cbe:	d01c      	beq.n	21cfa <hif_send+0x31a>
   21cc0:	e02f      	b.n	21d22 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21cc2:	231f      	movs	r3, #31
   21cc4:	18fc      	adds	r4, r7, r3
   21cc6:	4b2a      	ldr	r3, [pc, #168]	; (21d70 <hif_send+0x390>)
   21cc8:	4798      	blx	r3
   21cca:	0003      	movs	r3, r0
   21ccc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21cce:	231f      	movs	r3, #31
   21cd0:	18fb      	adds	r3, r7, r3
   21cd2:	22fd      	movs	r2, #253	; 0xfd
   21cd4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21cd6:	e026      	b.n	21d26 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21cd8:	2398      	movs	r3, #152	; 0x98
   21cda:	33ff      	adds	r3, #255	; 0xff
   21cdc:	001a      	movs	r2, r3
   21cde:	4925      	ldr	r1, [pc, #148]	; (21d74 <hif_send+0x394>)
   21ce0:	4b25      	ldr	r3, [pc, #148]	; (21d78 <hif_send+0x398>)
   21ce2:	0018      	movs	r0, r3
   21ce4:	4b1a      	ldr	r3, [pc, #104]	; (21d50 <hif_send+0x370>)
   21ce6:	4798      	blx	r3
   21ce8:	4b24      	ldr	r3, [pc, #144]	; (21d7c <hif_send+0x39c>)
   21cea:	0018      	movs	r0, r3
   21cec:	4b18      	ldr	r3, [pc, #96]	; (21d50 <hif_send+0x370>)
   21cee:	4798      	blx	r3
   21cf0:	4b19      	ldr	r3, [pc, #100]	; (21d58 <hif_send+0x378>)
   21cf2:	0018      	movs	r0, r3
   21cf4:	4b16      	ldr	r3, [pc, #88]	; (21d50 <hif_send+0x370>)
   21cf6:	4798      	blx	r3
		goto ERR2;
   21cf8:	e015      	b.n	21d26 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21cfa:	231f      	movs	r3, #31
   21cfc:	18fc      	adds	r4, r7, r3
   21cfe:	4b1c      	ldr	r3, [pc, #112]	; (21d70 <hif_send+0x390>)
   21d00:	4798      	blx	r3
   21d02:	0003      	movs	r3, r0
   21d04:	7023      	strb	r3, [r4, #0]
	return ret;
   21d06:	231f      	movs	r3, #31
   21d08:	18fb      	adds	r3, r7, r3
   21d0a:	781b      	ldrb	r3, [r3, #0]
   21d0c:	b25b      	sxtb	r3, r3
   21d0e:	e00e      	b.n	21d2e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21d10:	46c0      	nop			; (mov r8, r8)
   21d12:	e006      	b.n	21d22 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21d14:	46c0      	nop			; (mov r8, r8)
   21d16:	e004      	b.n	21d22 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21d18:	46c0      	nop			; (mov r8, r8)
   21d1a:	e002      	b.n	21d22 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21d1c:	46c0      	nop			; (mov r8, r8)
   21d1e:	e000      	b.n	21d22 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21d20:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21d22:	4b17      	ldr	r3, [pc, #92]	; (21d80 <hif_send+0x3a0>)
   21d24:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21d26:	231f      	movs	r3, #31
   21d28:	18fb      	adds	r3, r7, r3
   21d2a:	781b      	ldrb	r3, [r3, #0]
   21d2c:	b25b      	sxtb	r3, r3
}
   21d2e:	0018      	movs	r0, r3
   21d30:	46bd      	mov	sp, r7
   21d32:	b009      	add	sp, #36	; 0x24
   21d34:	bd90      	pop	{r4, r7, pc}
   21d36:	46c0      	nop			; (mov r8, r8)
   21d38:	000218a9 	.word	0x000218a9
   21d3c:	0000108c 	.word	0x0000108c
   21d40:	00023835 	.word	0x00023835
   21d44:	00001078 	.word	0x00001078
   21d48:	00023811 	.word	0x00023811
   21d4c:	00039dcc 	.word	0x00039dcc
   21d50:	0001e9e9 	.word	0x0001e9e9
   21d54:	00039dd8 	.word	0x00039dd8
   21d58:	00039dec 	.word	0x00039dec
   21d5c:	00020ea1 	.word	0x00020ea1
   21d60:	00150400 	.word	0x00150400
   21d64:	000003e7 	.word	0x000003e7
   21d68:	0002397d 	.word	0x0002397d
   21d6c:	0000106c 	.word	0x0000106c
   21d70:	00021941 	.word	0x00021941
   21d74:	0003a0f4 	.word	0x0003a0f4
   21d78:	00039df0 	.word	0x00039df0
   21d7c:	00039e04 	.word	0x00039e04
   21d80:	00021919 	.word	0x00021919

00021d84 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21d84:	b590      	push	{r4, r7, lr}
   21d86:	b087      	sub	sp, #28
   21d88:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21d8a:	230f      	movs	r3, #15
   21d8c:	18fb      	adds	r3, r7, r3
   21d8e:	2200      	movs	r2, #0
   21d90:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21d92:	230f      	movs	r3, #15
   21d94:	18fc      	adds	r4, r7, r3
   21d96:	2308      	movs	r3, #8
   21d98:	18fb      	adds	r3, r7, r3
   21d9a:	4adc      	ldr	r2, [pc, #880]	; (2210c <hif_isr+0x388>)
   21d9c:	0019      	movs	r1, r3
   21d9e:	0010      	movs	r0, r2
   21da0:	4bdb      	ldr	r3, [pc, #876]	; (22110 <hif_isr+0x38c>)
   21da2:	4798      	blx	r3
   21da4:	0003      	movs	r3, r0
   21da6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21da8:	230f      	movs	r3, #15
   21daa:	18fb      	adds	r3, r7, r3
   21dac:	781b      	ldrb	r3, [r3, #0]
   21dae:	b25b      	sxtb	r3, r3
   21db0:	2b00      	cmp	r3, #0
   21db2:	d000      	beq.n	21db6 <hif_isr+0x32>
   21db4:	e21e      	b.n	221f4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21db6:	68bb      	ldr	r3, [r7, #8]
   21db8:	2201      	movs	r2, #1
   21dba:	4013      	ands	r3, r2
   21dbc:	d100      	bne.n	21dc0 <hif_isr+0x3c>
   21dbe:	e204      	b.n	221ca <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21dc0:	2000      	movs	r0, #0
   21dc2:	4bd4      	ldr	r3, [pc, #848]	; (22114 <hif_isr+0x390>)
   21dc4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21dc6:	68bb      	ldr	r3, [r7, #8]
   21dc8:	2201      	movs	r2, #1
   21dca:	4393      	bics	r3, r2
   21dcc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21dce:	68bb      	ldr	r3, [r7, #8]
   21dd0:	220f      	movs	r2, #15
   21dd2:	18bc      	adds	r4, r7, r2
   21dd4:	4acd      	ldr	r2, [pc, #820]	; (2210c <hif_isr+0x388>)
   21dd6:	0019      	movs	r1, r3
   21dd8:	0010      	movs	r0, r2
   21dda:	4bcf      	ldr	r3, [pc, #828]	; (22118 <hif_isr+0x394>)
   21ddc:	4798      	blx	r3
   21dde:	0003      	movs	r3, r0
   21de0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21de2:	230f      	movs	r3, #15
   21de4:	18fb      	adds	r3, r7, r3
   21de6:	781b      	ldrb	r3, [r3, #0]
   21de8:	b25b      	sxtb	r3, r3
   21dea:	2b00      	cmp	r3, #0
   21dec:	d000      	beq.n	21df0 <hif_isr+0x6c>
   21dee:	e210      	b.n	22212 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21df0:	4bca      	ldr	r3, [pc, #808]	; (2211c <hif_isr+0x398>)
   21df2:	2201      	movs	r2, #1
   21df4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21df6:	68bb      	ldr	r3, [r7, #8]
   21df8:	089b      	lsrs	r3, r3, #2
   21dfa:	b29a      	uxth	r2, r3
   21dfc:	230c      	movs	r3, #12
   21dfe:	18fb      	adds	r3, r7, r3
   21e00:	0512      	lsls	r2, r2, #20
   21e02:	0d12      	lsrs	r2, r2, #20
   21e04:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21e06:	230c      	movs	r3, #12
   21e08:	18fb      	adds	r3, r7, r3
   21e0a:	881b      	ldrh	r3, [r3, #0]
   21e0c:	2b00      	cmp	r3, #0
   21e0e:	d100      	bne.n	21e12 <hif_isr+0x8e>
   21e10:	e1c8      	b.n	221a4 <hif_isr+0x420>
				uint32 address = 0;
   21e12:	2300      	movs	r3, #0
   21e14:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21e16:	230f      	movs	r3, #15
   21e18:	18fc      	adds	r4, r7, r3
   21e1a:	003b      	movs	r3, r7
   21e1c:	4ac0      	ldr	r2, [pc, #768]	; (22120 <hif_isr+0x39c>)
   21e1e:	0019      	movs	r1, r3
   21e20:	0010      	movs	r0, r2
   21e22:	4bbb      	ldr	r3, [pc, #748]	; (22110 <hif_isr+0x38c>)
   21e24:	4798      	blx	r3
   21e26:	0003      	movs	r3, r0
   21e28:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21e2a:	230f      	movs	r3, #15
   21e2c:	18fb      	adds	r3, r7, r3
   21e2e:	781b      	ldrb	r3, [r3, #0]
   21e30:	b25b      	sxtb	r3, r3
   21e32:	2b00      	cmp	r3, #0
   21e34:	d012      	beq.n	21e5c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21e36:	23e4      	movs	r3, #228	; 0xe4
   21e38:	005a      	lsls	r2, r3, #1
   21e3a:	49ba      	ldr	r1, [pc, #744]	; (22124 <hif_isr+0x3a0>)
   21e3c:	4bba      	ldr	r3, [pc, #744]	; (22128 <hif_isr+0x3a4>)
   21e3e:	0018      	movs	r0, r3
   21e40:	4bba      	ldr	r3, [pc, #744]	; (2212c <hif_isr+0x3a8>)
   21e42:	4798      	blx	r3
   21e44:	4bba      	ldr	r3, [pc, #744]	; (22130 <hif_isr+0x3ac>)
   21e46:	0018      	movs	r0, r3
   21e48:	4bb8      	ldr	r3, [pc, #736]	; (2212c <hif_isr+0x3a8>)
   21e4a:	4798      	blx	r3
   21e4c:	4bb9      	ldr	r3, [pc, #740]	; (22134 <hif_isr+0x3b0>)
   21e4e:	0018      	movs	r0, r3
   21e50:	4bb6      	ldr	r3, [pc, #728]	; (2212c <hif_isr+0x3a8>)
   21e52:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21e54:	2001      	movs	r0, #1
   21e56:	4baf      	ldr	r3, [pc, #700]	; (22114 <hif_isr+0x390>)
   21e58:	4798      	blx	r3
					goto ERR1;
   21e5a:	e1db      	b.n	22214 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21e5c:	683a      	ldr	r2, [r7, #0]
   21e5e:	4baf      	ldr	r3, [pc, #700]	; (2211c <hif_isr+0x398>)
   21e60:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21e62:	230c      	movs	r3, #12
   21e64:	18fb      	adds	r3, r7, r3
   21e66:	881a      	ldrh	r2, [r3, #0]
   21e68:	4bac      	ldr	r3, [pc, #688]	; (2211c <hif_isr+0x398>)
   21e6a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21e6c:	683b      	ldr	r3, [r7, #0]
   21e6e:	220f      	movs	r2, #15
   21e70:	18bc      	adds	r4, r7, r2
   21e72:	1d39      	adds	r1, r7, #4
   21e74:	2204      	movs	r2, #4
   21e76:	0018      	movs	r0, r3
   21e78:	4baf      	ldr	r3, [pc, #700]	; (22138 <hif_isr+0x3b4>)
   21e7a:	4798      	blx	r3
   21e7c:	0003      	movs	r3, r0
   21e7e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21e80:	1d3b      	adds	r3, r7, #4
   21e82:	885b      	ldrh	r3, [r3, #2]
   21e84:	b29a      	uxth	r2, r3
   21e86:	1d3b      	adds	r3, r7, #4
   21e88:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21e8a:	230f      	movs	r3, #15
   21e8c:	18fb      	adds	r3, r7, r3
   21e8e:	781b      	ldrb	r3, [r3, #0]
   21e90:	b25b      	sxtb	r3, r3
   21e92:	2b00      	cmp	r3, #0
   21e94:	d012      	beq.n	21ebc <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21e96:	23e9      	movs	r3, #233	; 0xe9
   21e98:	005a      	lsls	r2, r3, #1
   21e9a:	49a2      	ldr	r1, [pc, #648]	; (22124 <hif_isr+0x3a0>)
   21e9c:	4ba2      	ldr	r3, [pc, #648]	; (22128 <hif_isr+0x3a4>)
   21e9e:	0018      	movs	r0, r3
   21ea0:	4ba2      	ldr	r3, [pc, #648]	; (2212c <hif_isr+0x3a8>)
   21ea2:	4798      	blx	r3
   21ea4:	4ba5      	ldr	r3, [pc, #660]	; (2213c <hif_isr+0x3b8>)
   21ea6:	0018      	movs	r0, r3
   21ea8:	4ba0      	ldr	r3, [pc, #640]	; (2212c <hif_isr+0x3a8>)
   21eaa:	4798      	blx	r3
   21eac:	4ba1      	ldr	r3, [pc, #644]	; (22134 <hif_isr+0x3b0>)
   21eae:	0018      	movs	r0, r3
   21eb0:	4b9e      	ldr	r3, [pc, #632]	; (2212c <hif_isr+0x3a8>)
   21eb2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21eb4:	2001      	movs	r0, #1
   21eb6:	4b97      	ldr	r3, [pc, #604]	; (22114 <hif_isr+0x390>)
   21eb8:	4798      	blx	r3
					goto ERR1;
   21eba:	e1ab      	b.n	22214 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21ebc:	1d3b      	adds	r3, r7, #4
   21ebe:	885b      	ldrh	r3, [r3, #2]
   21ec0:	b29b      	uxth	r3, r3
   21ec2:	220c      	movs	r2, #12
   21ec4:	18ba      	adds	r2, r7, r2
   21ec6:	8812      	ldrh	r2, [r2, #0]
   21ec8:	429a      	cmp	r2, r3
   21eca:	d02f      	beq.n	21f2c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21ecc:	230c      	movs	r3, #12
   21ece:	18fb      	adds	r3, r7, r3
   21ed0:	881b      	ldrh	r3, [r3, #0]
   21ed2:	1d3a      	adds	r2, r7, #4
   21ed4:	8852      	ldrh	r2, [r2, #2]
   21ed6:	b292      	uxth	r2, r2
   21ed8:	1a9b      	subs	r3, r3, r2
   21eda:	2b04      	cmp	r3, #4
   21edc:	dd26      	ble.n	21f2c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   21ede:	23dc      	movs	r3, #220	; 0xdc
   21ee0:	33ff      	adds	r3, #255	; 0xff
   21ee2:	001a      	movs	r2, r3
   21ee4:	498f      	ldr	r1, [pc, #572]	; (22124 <hif_isr+0x3a0>)
   21ee6:	4b90      	ldr	r3, [pc, #576]	; (22128 <hif_isr+0x3a4>)
   21ee8:	0018      	movs	r0, r3
   21eea:	4b90      	ldr	r3, [pc, #576]	; (2212c <hif_isr+0x3a8>)
   21eec:	4798      	blx	r3
   21eee:	230c      	movs	r3, #12
   21ef0:	18fb      	adds	r3, r7, r3
   21ef2:	8819      	ldrh	r1, [r3, #0]
   21ef4:	1d3b      	adds	r3, r7, #4
   21ef6:	885b      	ldrh	r3, [r3, #2]
   21ef8:	b29b      	uxth	r3, r3
   21efa:	001a      	movs	r2, r3
   21efc:	1d3b      	adds	r3, r7, #4
   21efe:	781b      	ldrb	r3, [r3, #0]
   21f00:	b2db      	uxtb	r3, r3
   21f02:	001c      	movs	r4, r3
   21f04:	1d3b      	adds	r3, r7, #4
   21f06:	785b      	ldrb	r3, [r3, #1]
   21f08:	b2db      	uxtb	r3, r3
   21f0a:	488d      	ldr	r0, [pc, #564]	; (22140 <hif_isr+0x3bc>)
   21f0c:	9300      	str	r3, [sp, #0]
   21f0e:	0023      	movs	r3, r4
   21f10:	4c86      	ldr	r4, [pc, #536]	; (2212c <hif_isr+0x3a8>)
   21f12:	47a0      	blx	r4
   21f14:	4b87      	ldr	r3, [pc, #540]	; (22134 <hif_isr+0x3b0>)
   21f16:	0018      	movs	r0, r3
   21f18:	4b84      	ldr	r3, [pc, #528]	; (2212c <hif_isr+0x3a8>)
   21f1a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21f1c:	2001      	movs	r0, #1
   21f1e:	4b7d      	ldr	r3, [pc, #500]	; (22114 <hif_isr+0x390>)
   21f20:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21f22:	230f      	movs	r3, #15
   21f24:	18fb      	adds	r3, r7, r3
   21f26:	22fa      	movs	r2, #250	; 0xfa
   21f28:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21f2a:	e173      	b.n	22214 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21f2c:	1d3b      	adds	r3, r7, #4
   21f2e:	781b      	ldrb	r3, [r3, #0]
   21f30:	b2db      	uxtb	r3, r3
   21f32:	2b01      	cmp	r3, #1
   21f34:	d122      	bne.n	21f7c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21f36:	4b79      	ldr	r3, [pc, #484]	; (2211c <hif_isr+0x398>)
   21f38:	691b      	ldr	r3, [r3, #16]
   21f3a:	2b00      	cmp	r3, #0
   21f3c:	d00d      	beq.n	21f5a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f3e:	4b77      	ldr	r3, [pc, #476]	; (2211c <hif_isr+0x398>)
   21f40:	691b      	ldr	r3, [r3, #16]
   21f42:	1d3a      	adds	r2, r7, #4
   21f44:	7852      	ldrb	r2, [r2, #1]
   21f46:	b2d0      	uxtb	r0, r2
   21f48:	1d3a      	adds	r2, r7, #4
   21f4a:	8852      	ldrh	r2, [r2, #2]
   21f4c:	b292      	uxth	r2, r2
   21f4e:	3a08      	subs	r2, #8
   21f50:	b291      	uxth	r1, r2
   21f52:	683a      	ldr	r2, [r7, #0]
   21f54:	3208      	adds	r2, #8
   21f56:	4798      	blx	r3
   21f58:	e102      	b.n	22160 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21f5a:	23e8      	movs	r3, #232	; 0xe8
   21f5c:	33ff      	adds	r3, #255	; 0xff
   21f5e:	001a      	movs	r2, r3
   21f60:	4970      	ldr	r1, [pc, #448]	; (22124 <hif_isr+0x3a0>)
   21f62:	4b71      	ldr	r3, [pc, #452]	; (22128 <hif_isr+0x3a4>)
   21f64:	0018      	movs	r0, r3
   21f66:	4b71      	ldr	r3, [pc, #452]	; (2212c <hif_isr+0x3a8>)
   21f68:	4798      	blx	r3
   21f6a:	4b76      	ldr	r3, [pc, #472]	; (22144 <hif_isr+0x3c0>)
   21f6c:	0018      	movs	r0, r3
   21f6e:	4b6f      	ldr	r3, [pc, #444]	; (2212c <hif_isr+0x3a8>)
   21f70:	4798      	blx	r3
   21f72:	4b70      	ldr	r3, [pc, #448]	; (22134 <hif_isr+0x3b0>)
   21f74:	0018      	movs	r0, r3
   21f76:	4b6d      	ldr	r3, [pc, #436]	; (2212c <hif_isr+0x3a8>)
   21f78:	4798      	blx	r3
   21f7a:	e0f1      	b.n	22160 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21f7c:	1d3b      	adds	r3, r7, #4
   21f7e:	781b      	ldrb	r3, [r3, #0]
   21f80:	b2db      	uxtb	r3, r3
   21f82:	2b02      	cmp	r3, #2
   21f84:	d122      	bne.n	21fcc <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21f86:	4b65      	ldr	r3, [pc, #404]	; (2211c <hif_isr+0x398>)
   21f88:	695b      	ldr	r3, [r3, #20]
   21f8a:	2b00      	cmp	r3, #0
   21f8c:	d00d      	beq.n	21faa <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21f8e:	4b63      	ldr	r3, [pc, #396]	; (2211c <hif_isr+0x398>)
   21f90:	695b      	ldr	r3, [r3, #20]
   21f92:	1d3a      	adds	r2, r7, #4
   21f94:	7852      	ldrb	r2, [r2, #1]
   21f96:	b2d0      	uxtb	r0, r2
   21f98:	1d3a      	adds	r2, r7, #4
   21f9a:	8852      	ldrh	r2, [r2, #2]
   21f9c:	b292      	uxth	r2, r2
   21f9e:	3a08      	subs	r2, #8
   21fa0:	b291      	uxth	r1, r2
   21fa2:	683a      	ldr	r2, [r7, #0]
   21fa4:	3208      	adds	r2, #8
   21fa6:	4798      	blx	r3
   21fa8:	e0da      	b.n	22160 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   21faa:	23f0      	movs	r3, #240	; 0xf0
   21fac:	33ff      	adds	r3, #255	; 0xff
   21fae:	001a      	movs	r2, r3
   21fb0:	495c      	ldr	r1, [pc, #368]	; (22124 <hif_isr+0x3a0>)
   21fb2:	4b5d      	ldr	r3, [pc, #372]	; (22128 <hif_isr+0x3a4>)
   21fb4:	0018      	movs	r0, r3
   21fb6:	4b5d      	ldr	r3, [pc, #372]	; (2212c <hif_isr+0x3a8>)
   21fb8:	4798      	blx	r3
   21fba:	4b63      	ldr	r3, [pc, #396]	; (22148 <hif_isr+0x3c4>)
   21fbc:	0018      	movs	r0, r3
   21fbe:	4b5b      	ldr	r3, [pc, #364]	; (2212c <hif_isr+0x3a8>)
   21fc0:	4798      	blx	r3
   21fc2:	4b5c      	ldr	r3, [pc, #368]	; (22134 <hif_isr+0x3b0>)
   21fc4:	0018      	movs	r0, r3
   21fc6:	4b59      	ldr	r3, [pc, #356]	; (2212c <hif_isr+0x3a8>)
   21fc8:	4798      	blx	r3
   21fca:	e0c9      	b.n	22160 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   21fcc:	1d3b      	adds	r3, r7, #4
   21fce:	781b      	ldrb	r3, [r3, #0]
   21fd0:	b2db      	uxtb	r3, r3
   21fd2:	2b04      	cmp	r3, #4
   21fd4:	d122      	bne.n	2201c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   21fd6:	4b51      	ldr	r3, [pc, #324]	; (2211c <hif_isr+0x398>)
   21fd8:	699b      	ldr	r3, [r3, #24]
   21fda:	2b00      	cmp	r3, #0
   21fdc:	d00d      	beq.n	21ffa <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21fde:	4b4f      	ldr	r3, [pc, #316]	; (2211c <hif_isr+0x398>)
   21fe0:	699b      	ldr	r3, [r3, #24]
   21fe2:	1d3a      	adds	r2, r7, #4
   21fe4:	7852      	ldrb	r2, [r2, #1]
   21fe6:	b2d0      	uxtb	r0, r2
   21fe8:	1d3a      	adds	r2, r7, #4
   21fea:	8852      	ldrh	r2, [r2, #2]
   21fec:	b292      	uxth	r2, r2
   21fee:	3a08      	subs	r2, #8
   21ff0:	b291      	uxth	r1, r2
   21ff2:	683a      	ldr	r2, [r7, #0]
   21ff4:	3208      	adds	r2, #8
   21ff6:	4798      	blx	r3
   21ff8:	e0b2      	b.n	22160 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   21ffa:	23f8      	movs	r3, #248	; 0xf8
   21ffc:	33ff      	adds	r3, #255	; 0xff
   21ffe:	001a      	movs	r2, r3
   22000:	4948      	ldr	r1, [pc, #288]	; (22124 <hif_isr+0x3a0>)
   22002:	4b49      	ldr	r3, [pc, #292]	; (22128 <hif_isr+0x3a4>)
   22004:	0018      	movs	r0, r3
   22006:	4b49      	ldr	r3, [pc, #292]	; (2212c <hif_isr+0x3a8>)
   22008:	4798      	blx	r3
   2200a:	4b50      	ldr	r3, [pc, #320]	; (2214c <hif_isr+0x3c8>)
   2200c:	0018      	movs	r0, r3
   2200e:	4b47      	ldr	r3, [pc, #284]	; (2212c <hif_isr+0x3a8>)
   22010:	4798      	blx	r3
   22012:	4b48      	ldr	r3, [pc, #288]	; (22134 <hif_isr+0x3b0>)
   22014:	0018      	movs	r0, r3
   22016:	4b45      	ldr	r3, [pc, #276]	; (2212c <hif_isr+0x3a8>)
   22018:	4798      	blx	r3
   2201a:	e0a1      	b.n	22160 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2201c:	1d3b      	adds	r3, r7, #4
   2201e:	781b      	ldrb	r3, [r3, #0]
   22020:	b2db      	uxtb	r3, r3
   22022:	2b06      	cmp	r3, #6
   22024:	d121      	bne.n	2206a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   22026:	4b3d      	ldr	r3, [pc, #244]	; (2211c <hif_isr+0x398>)
   22028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2202a:	2b00      	cmp	r3, #0
   2202c:	d00d      	beq.n	2204a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2202e:	4b3b      	ldr	r3, [pc, #236]	; (2211c <hif_isr+0x398>)
   22030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22032:	1d3a      	adds	r2, r7, #4
   22034:	7852      	ldrb	r2, [r2, #1]
   22036:	b2d0      	uxtb	r0, r2
   22038:	1d3a      	adds	r2, r7, #4
   2203a:	8852      	ldrh	r2, [r2, #2]
   2203c:	b292      	uxth	r2, r2
   2203e:	3a08      	subs	r2, #8
   22040:	b291      	uxth	r1, r2
   22042:	683a      	ldr	r2, [r7, #0]
   22044:	3208      	adds	r2, #8
   22046:	4798      	blx	r3
   22048:	e08a      	b.n	22160 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2204a:	2380      	movs	r3, #128	; 0x80
   2204c:	009a      	lsls	r2, r3, #2
   2204e:	4935      	ldr	r1, [pc, #212]	; (22124 <hif_isr+0x3a0>)
   22050:	4b35      	ldr	r3, [pc, #212]	; (22128 <hif_isr+0x3a4>)
   22052:	0018      	movs	r0, r3
   22054:	4b35      	ldr	r3, [pc, #212]	; (2212c <hif_isr+0x3a8>)
   22056:	4798      	blx	r3
   22058:	4b3d      	ldr	r3, [pc, #244]	; (22150 <hif_isr+0x3cc>)
   2205a:	0018      	movs	r0, r3
   2205c:	4b33      	ldr	r3, [pc, #204]	; (2212c <hif_isr+0x3a8>)
   2205e:	4798      	blx	r3
   22060:	4b34      	ldr	r3, [pc, #208]	; (22134 <hif_isr+0x3b0>)
   22062:	0018      	movs	r0, r3
   22064:	4b31      	ldr	r3, [pc, #196]	; (2212c <hif_isr+0x3a8>)
   22066:	4798      	blx	r3
   22068:	e07a      	b.n	22160 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2206a:	1d3b      	adds	r3, r7, #4
   2206c:	781b      	ldrb	r3, [r3, #0]
   2206e:	b2db      	uxtb	r3, r3
   22070:	2b07      	cmp	r3, #7
   22072:	d120      	bne.n	220b6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22074:	4b29      	ldr	r3, [pc, #164]	; (2211c <hif_isr+0x398>)
   22076:	69db      	ldr	r3, [r3, #28]
   22078:	2b00      	cmp	r3, #0
   2207a:	d00d      	beq.n	22098 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2207c:	4b27      	ldr	r3, [pc, #156]	; (2211c <hif_isr+0x398>)
   2207e:	69db      	ldr	r3, [r3, #28]
   22080:	1d3a      	adds	r2, r7, #4
   22082:	7852      	ldrb	r2, [r2, #1]
   22084:	b2d0      	uxtb	r0, r2
   22086:	1d3a      	adds	r2, r7, #4
   22088:	8852      	ldrh	r2, [r2, #2]
   2208a:	b292      	uxth	r2, r2
   2208c:	3a08      	subs	r2, #8
   2208e:	b291      	uxth	r1, r2
   22090:	683a      	ldr	r2, [r7, #0]
   22092:	3208      	adds	r2, #8
   22094:	4798      	blx	r3
   22096:	e063      	b.n	22160 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22098:	4a2e      	ldr	r2, [pc, #184]	; (22154 <hif_isr+0x3d0>)
   2209a:	4922      	ldr	r1, [pc, #136]	; (22124 <hif_isr+0x3a0>)
   2209c:	4b22      	ldr	r3, [pc, #136]	; (22128 <hif_isr+0x3a4>)
   2209e:	0018      	movs	r0, r3
   220a0:	4b22      	ldr	r3, [pc, #136]	; (2212c <hif_isr+0x3a8>)
   220a2:	4798      	blx	r3
   220a4:	4b2c      	ldr	r3, [pc, #176]	; (22158 <hif_isr+0x3d4>)
   220a6:	0018      	movs	r0, r3
   220a8:	4b20      	ldr	r3, [pc, #128]	; (2212c <hif_isr+0x3a8>)
   220aa:	4798      	blx	r3
   220ac:	4b21      	ldr	r3, [pc, #132]	; (22134 <hif_isr+0x3b0>)
   220ae:	0018      	movs	r0, r3
   220b0:	4b1e      	ldr	r3, [pc, #120]	; (2212c <hif_isr+0x3a8>)
   220b2:	4798      	blx	r3
   220b4:	e054      	b.n	22160 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   220b6:	1d3b      	adds	r3, r7, #4
   220b8:	781b      	ldrb	r3, [r3, #0]
   220ba:	b2db      	uxtb	r3, r3
   220bc:	2b05      	cmp	r3, #5
   220be:	d111      	bne.n	220e4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   220c0:	4b16      	ldr	r3, [pc, #88]	; (2211c <hif_isr+0x398>)
   220c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220c4:	2b00      	cmp	r3, #0
   220c6:	d04b      	beq.n	22160 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   220c8:	4b14      	ldr	r3, [pc, #80]	; (2211c <hif_isr+0x398>)
   220ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220cc:	1d3a      	adds	r2, r7, #4
   220ce:	7852      	ldrb	r2, [r2, #1]
   220d0:	b2d0      	uxtb	r0, r2
   220d2:	1d3a      	adds	r2, r7, #4
   220d4:	8852      	ldrh	r2, [r2, #2]
   220d6:	b292      	uxth	r2, r2
   220d8:	3a08      	subs	r2, #8
   220da:	b291      	uxth	r1, r2
   220dc:	683a      	ldr	r2, [r7, #0]
   220de:	3208      	adds	r2, #8
   220e0:	4798      	blx	r3
   220e2:	e03d      	b.n	22160 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   220e4:	2384      	movs	r3, #132	; 0x84
   220e6:	009a      	lsls	r2, r3, #2
   220e8:	490e      	ldr	r1, [pc, #56]	; (22124 <hif_isr+0x3a0>)
   220ea:	4b0f      	ldr	r3, [pc, #60]	; (22128 <hif_isr+0x3a4>)
   220ec:	0018      	movs	r0, r3
   220ee:	4b0f      	ldr	r3, [pc, #60]	; (2212c <hif_isr+0x3a8>)
   220f0:	4798      	blx	r3
   220f2:	4b1a      	ldr	r3, [pc, #104]	; (2215c <hif_isr+0x3d8>)
   220f4:	0018      	movs	r0, r3
   220f6:	4b0d      	ldr	r3, [pc, #52]	; (2212c <hif_isr+0x3a8>)
   220f8:	4798      	blx	r3
   220fa:	4b0e      	ldr	r3, [pc, #56]	; (22134 <hif_isr+0x3b0>)
   220fc:	0018      	movs	r0, r3
   220fe:	4b0b      	ldr	r3, [pc, #44]	; (2212c <hif_isr+0x3a8>)
   22100:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   22102:	230f      	movs	r3, #15
   22104:	18fb      	adds	r3, r7, r3
   22106:	22fa      	movs	r2, #250	; 0xfa
   22108:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2210a:	e083      	b.n	22214 <hif_isr+0x490>
   2210c:	00001070 	.word	0x00001070
   22110:	00023811 	.word	0x00023811
   22114:	00020f35 	.word	0x00020f35
   22118:	00023835 	.word	0x00023835
   2211c:	20005b2c 	.word	0x20005b2c
   22120:	00001084 	.word	0x00001084
   22124:	0003a100 	.word	0x0003a100
   22128:	00039df0 	.word	0x00039df0
   2212c:	0001e9e9 	.word	0x0001e9e9
   22130:	00039e24 	.word	0x00039e24
   22134:	00039dec 	.word	0x00039dec
   22138:	00023885 	.word	0x00023885
   2213c:	00039e4c 	.word	0x00039e4c
   22140:	00039e64 	.word	0x00039e64
   22144:	00039ea4 	.word	0x00039ea4
   22148:	00039ec8 	.word	0x00039ec8
   2214c:	00039eec 	.word	0x00039eec
   22150:	00039f0c 	.word	0x00039f0c
   22154:	00000207 	.word	0x00000207
   22158:	00039f30 	.word	0x00039f30
   2215c:	00039f54 	.word	0x00039f54
				}
				if(gstrHifCxt.u8HifRXDone)
   22160:	4b30      	ldr	r3, [pc, #192]	; (22224 <hif_isr+0x4a0>)
   22162:	789b      	ldrb	r3, [r3, #2]
   22164:	b2db      	uxtb	r3, r3
   22166:	2b00      	cmp	r3, #0
   22168:	d054      	beq.n	22214 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2216a:	4a2f      	ldr	r2, [pc, #188]	; (22228 <hif_isr+0x4a4>)
   2216c:	492f      	ldr	r1, [pc, #188]	; (2222c <hif_isr+0x4a8>)
   2216e:	4b30      	ldr	r3, [pc, #192]	; (22230 <hif_isr+0x4ac>)
   22170:	0018      	movs	r0, r3
   22172:	4b30      	ldr	r3, [pc, #192]	; (22234 <hif_isr+0x4b0>)
   22174:	4798      	blx	r3
   22176:	1d3b      	adds	r3, r7, #4
   22178:	781b      	ldrb	r3, [r3, #0]
   2217a:	b2db      	uxtb	r3, r3
   2217c:	0019      	movs	r1, r3
   2217e:	1d3b      	adds	r3, r7, #4
   22180:	785b      	ldrb	r3, [r3, #1]
   22182:	b2db      	uxtb	r3, r3
   22184:	001a      	movs	r2, r3
   22186:	4b2c      	ldr	r3, [pc, #176]	; (22238 <hif_isr+0x4b4>)
   22188:	0018      	movs	r0, r3
   2218a:	4b2a      	ldr	r3, [pc, #168]	; (22234 <hif_isr+0x4b0>)
   2218c:	4798      	blx	r3
   2218e:	4b2b      	ldr	r3, [pc, #172]	; (2223c <hif_isr+0x4b8>)
   22190:	0018      	movs	r0, r3
   22192:	4b28      	ldr	r3, [pc, #160]	; (22234 <hif_isr+0x4b0>)
   22194:	4798      	blx	r3
					ret = hif_set_rx_done();
   22196:	230f      	movs	r3, #15
   22198:	18fc      	adds	r4, r7, r3
   2219a:	4b29      	ldr	r3, [pc, #164]	; (22240 <hif_isr+0x4bc>)
   2219c:	4798      	blx	r3
   2219e:	0003      	movs	r3, r0
   221a0:	7023      	strb	r3, [r4, #0]
   221a2:	e037      	b.n	22214 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   221a4:	4a27      	ldr	r2, [pc, #156]	; (22244 <hif_isr+0x4c0>)
   221a6:	4921      	ldr	r1, [pc, #132]	; (2222c <hif_isr+0x4a8>)
   221a8:	4b21      	ldr	r3, [pc, #132]	; (22230 <hif_isr+0x4ac>)
   221aa:	0018      	movs	r0, r3
   221ac:	4b21      	ldr	r3, [pc, #132]	; (22234 <hif_isr+0x4b0>)
   221ae:	4798      	blx	r3
   221b0:	4b25      	ldr	r3, [pc, #148]	; (22248 <hif_isr+0x4c4>)
   221b2:	0018      	movs	r0, r3
   221b4:	4b1f      	ldr	r3, [pc, #124]	; (22234 <hif_isr+0x4b0>)
   221b6:	4798      	blx	r3
   221b8:	4b20      	ldr	r3, [pc, #128]	; (2223c <hif_isr+0x4b8>)
   221ba:	0018      	movs	r0, r3
   221bc:	4b1d      	ldr	r3, [pc, #116]	; (22234 <hif_isr+0x4b0>)
   221be:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   221c0:	230f      	movs	r3, #15
   221c2:	18fb      	adds	r3, r7, r3
   221c4:	22fe      	movs	r2, #254	; 0xfe
   221c6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   221c8:	e024      	b.n	22214 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   221ca:	4a20      	ldr	r2, [pc, #128]	; (2224c <hif_isr+0x4c8>)
   221cc:	4917      	ldr	r1, [pc, #92]	; (2222c <hif_isr+0x4a8>)
   221ce:	4b18      	ldr	r3, [pc, #96]	; (22230 <hif_isr+0x4ac>)
   221d0:	0018      	movs	r0, r3
   221d2:	4b18      	ldr	r3, [pc, #96]	; (22234 <hif_isr+0x4b0>)
   221d4:	4798      	blx	r3
   221d6:	68ba      	ldr	r2, [r7, #8]
   221d8:	4b1d      	ldr	r3, [pc, #116]	; (22250 <hif_isr+0x4cc>)
   221da:	0011      	movs	r1, r2
   221dc:	0018      	movs	r0, r3
   221de:	4b15      	ldr	r3, [pc, #84]	; (22234 <hif_isr+0x4b0>)
   221e0:	4798      	blx	r3
   221e2:	4b16      	ldr	r3, [pc, #88]	; (2223c <hif_isr+0x4b8>)
   221e4:	0018      	movs	r0, r3
   221e6:	4b13      	ldr	r3, [pc, #76]	; (22234 <hif_isr+0x4b0>)
   221e8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   221ea:	230f      	movs	r3, #15
   221ec:	18fb      	adds	r3, r7, r3
   221ee:	22f4      	movs	r2, #244	; 0xf4
   221f0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   221f2:	e00f      	b.n	22214 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   221f4:	4a17      	ldr	r2, [pc, #92]	; (22254 <hif_isr+0x4d0>)
   221f6:	490d      	ldr	r1, [pc, #52]	; (2222c <hif_isr+0x4a8>)
   221f8:	4b0d      	ldr	r3, [pc, #52]	; (22230 <hif_isr+0x4ac>)
   221fa:	0018      	movs	r0, r3
   221fc:	4b0d      	ldr	r3, [pc, #52]	; (22234 <hif_isr+0x4b0>)
   221fe:	4798      	blx	r3
   22200:	4b15      	ldr	r3, [pc, #84]	; (22258 <hif_isr+0x4d4>)
   22202:	0018      	movs	r0, r3
   22204:	4b0b      	ldr	r3, [pc, #44]	; (22234 <hif_isr+0x4b0>)
   22206:	4798      	blx	r3
   22208:	4b0c      	ldr	r3, [pc, #48]	; (2223c <hif_isr+0x4b8>)
   2220a:	0018      	movs	r0, r3
   2220c:	4b09      	ldr	r3, [pc, #36]	; (22234 <hif_isr+0x4b0>)
   2220e:	4798      	blx	r3
		goto ERR1;
   22210:	e000      	b.n	22214 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   22212:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22214:	230f      	movs	r3, #15
   22216:	18fb      	adds	r3, r7, r3
   22218:	781b      	ldrb	r3, [r3, #0]
   2221a:	b25b      	sxtb	r3, r3
}
   2221c:	0018      	movs	r0, r3
   2221e:	46bd      	mov	sp, r7
   22220:	b005      	add	sp, #20
   22222:	bd90      	pop	{r4, r7, pc}
   22224:	20005b2c 	.word	0x20005b2c
   22228:	00000216 	.word	0x00000216
   2222c:	0003a100 	.word	0x0003a100
   22230:	00039df0 	.word	0x00039df0
   22234:	0001e9e9 	.word	0x0001e9e9
   22238:	00039f6c 	.word	0x00039f6c
   2223c:	00039dec 	.word	0x00039dec
   22240:	00021819 	.word	0x00021819
   22244:	0000021d 	.word	0x0000021d
   22248:	00039f98 	.word	0x00039f98
   2224c:	00000225 	.word	0x00000225
   22250:	00039fac 	.word	0x00039fac
   22254:	0000022e 	.word	0x0000022e
   22258:	00039fc8 	.word	0x00039fc8

0002225c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2225c:	b590      	push	{r4, r7, lr}
   2225e:	b083      	sub	sp, #12
   22260:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   22262:	1dfb      	adds	r3, r7, #7
   22264:	2200      	movs	r2, #0
   22266:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   22268:	4b1c      	ldr	r3, [pc, #112]	; (222dc <hif_handle_isr+0x80>)
   2226a:	2200      	movs	r2, #0
   2226c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2226e:	e024      	b.n	222ba <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   22270:	4b1a      	ldr	r3, [pc, #104]	; (222dc <hif_handle_isr+0x80>)
   22272:	78db      	ldrb	r3, [r3, #3]
   22274:	b2db      	uxtb	r3, r3
   22276:	3b01      	subs	r3, #1
   22278:	b2da      	uxtb	r2, r3
   2227a:	4b18      	ldr	r3, [pc, #96]	; (222dc <hif_handle_isr+0x80>)
   2227c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2227e:	1dfc      	adds	r4, r7, #7
   22280:	4b17      	ldr	r3, [pc, #92]	; (222e0 <hif_handle_isr+0x84>)
   22282:	4798      	blx	r3
   22284:	0003      	movs	r3, r0
   22286:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22288:	1dfb      	adds	r3, r7, #7
   2228a:	781b      	ldrb	r3, [r3, #0]
   2228c:	b25b      	sxtb	r3, r3
   2228e:	2b00      	cmp	r3, #0
   22290:	d100      	bne.n	22294 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   22292:	e012      	b.n	222ba <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22294:	4a13      	ldr	r2, [pc, #76]	; (222e4 <hif_handle_isr+0x88>)
   22296:	4914      	ldr	r1, [pc, #80]	; (222e8 <hif_handle_isr+0x8c>)
   22298:	4b14      	ldr	r3, [pc, #80]	; (222ec <hif_handle_isr+0x90>)
   2229a:	0018      	movs	r0, r3
   2229c:	4b14      	ldr	r3, [pc, #80]	; (222f0 <hif_handle_isr+0x94>)
   2229e:	4798      	blx	r3
   222a0:	1dfb      	adds	r3, r7, #7
   222a2:	2200      	movs	r2, #0
   222a4:	569a      	ldrsb	r2, [r3, r2]
   222a6:	4b13      	ldr	r3, [pc, #76]	; (222f4 <hif_handle_isr+0x98>)
   222a8:	0011      	movs	r1, r2
   222aa:	0018      	movs	r0, r3
   222ac:	4b10      	ldr	r3, [pc, #64]	; (222f0 <hif_handle_isr+0x94>)
   222ae:	4798      	blx	r3
   222b0:	4b11      	ldr	r3, [pc, #68]	; (222f8 <hif_handle_isr+0x9c>)
   222b2:	0018      	movs	r0, r3
   222b4:	4b0e      	ldr	r3, [pc, #56]	; (222f0 <hif_handle_isr+0x94>)
   222b6:	4798      	blx	r3
			ret = hif_isr();
   222b8:	e7e1      	b.n	2227e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   222ba:	4b08      	ldr	r3, [pc, #32]	; (222dc <hif_handle_isr+0x80>)
   222bc:	78db      	ldrb	r3, [r3, #3]
   222be:	b2db      	uxtb	r3, r3
   222c0:	2b00      	cmp	r3, #0
   222c2:	d004      	beq.n	222ce <hif_handle_isr+0x72>
   222c4:	4b05      	ldr	r3, [pc, #20]	; (222dc <hif_handle_isr+0x80>)
   222c6:	791b      	ldrb	r3, [r3, #4]
   222c8:	b2db      	uxtb	r3, r3
   222ca:	2b00      	cmp	r3, #0
   222cc:	d0d0      	beq.n	22270 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   222ce:	1dfb      	adds	r3, r7, #7
   222d0:	781b      	ldrb	r3, [r3, #0]
   222d2:	b25b      	sxtb	r3, r3
}
   222d4:	0018      	movs	r0, r3
   222d6:	46bd      	mov	sp, r7
   222d8:	b003      	add	sp, #12
   222da:	bd90      	pop	{r4, r7, pc}
   222dc:	20005b2c 	.word	0x20005b2c
   222e0:	00021d85 	.word	0x00021d85
   222e4:	00000257 	.word	0x00000257
   222e8:	0003a108 	.word	0x0003a108
   222ec:	00039df0 	.word	0x00039df0
   222f0:	0001e9e9 	.word	0x0001e9e9
   222f4:	00039fec 	.word	0x00039fec
   222f8:	00039dec 	.word	0x00039dec

000222fc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   222fc:	b590      	push	{r4, r7, lr}
   222fe:	b087      	sub	sp, #28
   22300:	af00      	add	r7, sp, #0
   22302:	60f8      	str	r0, [r7, #12]
   22304:	60b9      	str	r1, [r7, #8]
   22306:	0019      	movs	r1, r3
   22308:	1dbb      	adds	r3, r7, #6
   2230a:	801a      	strh	r2, [r3, #0]
   2230c:	1d7b      	adds	r3, r7, #5
   2230e:	1c0a      	adds	r2, r1, #0
   22310:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22312:	2317      	movs	r3, #23
   22314:	18fb      	adds	r3, r7, r3
   22316:	2200      	movs	r2, #0
   22318:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2231a:	68fb      	ldr	r3, [r7, #12]
   2231c:	2b00      	cmp	r3, #0
   2231e:	d006      	beq.n	2232e <hif_receive+0x32>
   22320:	68bb      	ldr	r3, [r7, #8]
   22322:	2b00      	cmp	r3, #0
   22324:	d003      	beq.n	2232e <hif_receive+0x32>
   22326:	1dbb      	adds	r3, r7, #6
   22328:	881b      	ldrh	r3, [r3, #0]
   2232a:	2b00      	cmp	r3, #0
   2232c:	d11e      	bne.n	2236c <hif_receive+0x70>
	{
		if(isDone)
   2232e:	1d7b      	adds	r3, r7, #5
   22330:	781b      	ldrb	r3, [r3, #0]
   22332:	2b00      	cmp	r3, #0
   22334:	d006      	beq.n	22344 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   22336:	2317      	movs	r3, #23
   22338:	18fc      	adds	r4, r7, r3
   2233a:	4b45      	ldr	r3, [pc, #276]	; (22450 <hif_receive+0x154>)
   2233c:	4798      	blx	r3
   2233e:	0003      	movs	r3, r0
   22340:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   22342:	e07c      	b.n	2243e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   22344:	2317      	movs	r3, #23
   22346:	18fb      	adds	r3, r7, r3
   22348:	22f4      	movs	r2, #244	; 0xf4
   2234a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2234c:	239e      	movs	r3, #158	; 0x9e
   2234e:	009a      	lsls	r2, r3, #2
   22350:	4940      	ldr	r1, [pc, #256]	; (22454 <hif_receive+0x158>)
   22352:	4b41      	ldr	r3, [pc, #260]	; (22458 <hif_receive+0x15c>)
   22354:	0018      	movs	r0, r3
   22356:	4b41      	ldr	r3, [pc, #260]	; (2245c <hif_receive+0x160>)
   22358:	4798      	blx	r3
   2235a:	4b41      	ldr	r3, [pc, #260]	; (22460 <hif_receive+0x164>)
   2235c:	0018      	movs	r0, r3
   2235e:	4b3f      	ldr	r3, [pc, #252]	; (2245c <hif_receive+0x160>)
   22360:	4798      	blx	r3
   22362:	4b40      	ldr	r3, [pc, #256]	; (22464 <hif_receive+0x168>)
   22364:	0018      	movs	r0, r3
   22366:	4b3d      	ldr	r3, [pc, #244]	; (2245c <hif_receive+0x160>)
   22368:	4798      	blx	r3
		goto ERR1;
   2236a:	e068      	b.n	2243e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2236c:	1dbb      	adds	r3, r7, #6
   2236e:	881a      	ldrh	r2, [r3, #0]
   22370:	4b3d      	ldr	r3, [pc, #244]	; (22468 <hif_receive+0x16c>)
   22372:	68db      	ldr	r3, [r3, #12]
   22374:	429a      	cmp	r2, r3
   22376:	d917      	bls.n	223a8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   22378:	2317      	movs	r3, #23
   2237a:	18fb      	adds	r3, r7, r3
   2237c:	22f4      	movs	r2, #244	; 0xf4
   2237e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   22380:	23a0      	movs	r3, #160	; 0xa0
   22382:	009a      	lsls	r2, r3, #2
   22384:	4933      	ldr	r1, [pc, #204]	; (22454 <hif_receive+0x158>)
   22386:	4b34      	ldr	r3, [pc, #208]	; (22458 <hif_receive+0x15c>)
   22388:	0018      	movs	r0, r3
   2238a:	4b34      	ldr	r3, [pc, #208]	; (2245c <hif_receive+0x160>)
   2238c:	4798      	blx	r3
   2238e:	1dbb      	adds	r3, r7, #6
   22390:	8819      	ldrh	r1, [r3, #0]
   22392:	4b35      	ldr	r3, [pc, #212]	; (22468 <hif_receive+0x16c>)
   22394:	68da      	ldr	r2, [r3, #12]
   22396:	4b35      	ldr	r3, [pc, #212]	; (2246c <hif_receive+0x170>)
   22398:	0018      	movs	r0, r3
   2239a:	4b30      	ldr	r3, [pc, #192]	; (2245c <hif_receive+0x160>)
   2239c:	4798      	blx	r3
   2239e:	4b31      	ldr	r3, [pc, #196]	; (22464 <hif_receive+0x168>)
   223a0:	0018      	movs	r0, r3
   223a2:	4b2e      	ldr	r3, [pc, #184]	; (2245c <hif_receive+0x160>)
   223a4:	4798      	blx	r3
		goto ERR1;
   223a6:	e04a      	b.n	2243e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   223a8:	4b2f      	ldr	r3, [pc, #188]	; (22468 <hif_receive+0x16c>)
   223aa:	689a      	ldr	r2, [r3, #8]
   223ac:	68fb      	ldr	r3, [r7, #12]
   223ae:	429a      	cmp	r2, r3
   223b0:	d80a      	bhi.n	223c8 <hif_receive+0xcc>
   223b2:	1dbb      	adds	r3, r7, #6
   223b4:	881a      	ldrh	r2, [r3, #0]
   223b6:	68fb      	ldr	r3, [r7, #12]
   223b8:	18d2      	adds	r2, r2, r3
   223ba:	4b2b      	ldr	r3, [pc, #172]	; (22468 <hif_receive+0x16c>)
   223bc:	6899      	ldr	r1, [r3, #8]
   223be:	4b2a      	ldr	r3, [pc, #168]	; (22468 <hif_receive+0x16c>)
   223c0:	68db      	ldr	r3, [r3, #12]
   223c2:	18cb      	adds	r3, r1, r3
   223c4:	429a      	cmp	r2, r3
   223c6:	d912      	bls.n	223ee <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   223c8:	2317      	movs	r3, #23
   223ca:	18fb      	adds	r3, r7, r3
   223cc:	22f4      	movs	r2, #244	; 0xf4
   223ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   223d0:	4a27      	ldr	r2, [pc, #156]	; (22470 <hif_receive+0x174>)
   223d2:	4920      	ldr	r1, [pc, #128]	; (22454 <hif_receive+0x158>)
   223d4:	4b20      	ldr	r3, [pc, #128]	; (22458 <hif_receive+0x15c>)
   223d6:	0018      	movs	r0, r3
   223d8:	4b20      	ldr	r3, [pc, #128]	; (2245c <hif_receive+0x160>)
   223da:	4798      	blx	r3
   223dc:	4b25      	ldr	r3, [pc, #148]	; (22474 <hif_receive+0x178>)
   223de:	0018      	movs	r0, r3
   223e0:	4b1e      	ldr	r3, [pc, #120]	; (2245c <hif_receive+0x160>)
   223e2:	4798      	blx	r3
   223e4:	4b1f      	ldr	r3, [pc, #124]	; (22464 <hif_receive+0x168>)
   223e6:	0018      	movs	r0, r3
   223e8:	4b1c      	ldr	r3, [pc, #112]	; (2245c <hif_receive+0x160>)
   223ea:	4798      	blx	r3
		goto ERR1;
   223ec:	e027      	b.n	2243e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   223ee:	1dbb      	adds	r3, r7, #6
   223f0:	881a      	ldrh	r2, [r3, #0]
   223f2:	2317      	movs	r3, #23
   223f4:	18fc      	adds	r4, r7, r3
   223f6:	68b9      	ldr	r1, [r7, #8]
   223f8:	68fb      	ldr	r3, [r7, #12]
   223fa:	0018      	movs	r0, r3
   223fc:	4b1e      	ldr	r3, [pc, #120]	; (22478 <hif_receive+0x17c>)
   223fe:	4798      	blx	r3
   22400:	0003      	movs	r3, r0
   22402:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22404:	2317      	movs	r3, #23
   22406:	18fb      	adds	r3, r7, r3
   22408:	781b      	ldrb	r3, [r3, #0]
   2240a:	b25b      	sxtb	r3, r3
   2240c:	2b00      	cmp	r3, #0
   2240e:	d115      	bne.n	2243c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   22410:	4b15      	ldr	r3, [pc, #84]	; (22468 <hif_receive+0x16c>)
   22412:	689a      	ldr	r2, [r3, #8]
   22414:	4b14      	ldr	r3, [pc, #80]	; (22468 <hif_receive+0x16c>)
   22416:	68db      	ldr	r3, [r3, #12]
   22418:	18d2      	adds	r2, r2, r3
   2241a:	1dbb      	adds	r3, r7, #6
   2241c:	8819      	ldrh	r1, [r3, #0]
   2241e:	68fb      	ldr	r3, [r7, #12]
   22420:	18cb      	adds	r3, r1, r3
   22422:	429a      	cmp	r2, r3
   22424:	d003      	beq.n	2242e <hif_receive+0x132>
   22426:	1d7b      	adds	r3, r7, #5
   22428:	781b      	ldrb	r3, [r3, #0]
   2242a:	2b00      	cmp	r3, #0
   2242c:	d007      	beq.n	2243e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2242e:	2317      	movs	r3, #23
   22430:	18fc      	adds	r4, r7, r3
   22432:	4b07      	ldr	r3, [pc, #28]	; (22450 <hif_receive+0x154>)
   22434:	4798      	blx	r3
   22436:	0003      	movs	r3, r0
   22438:	7023      	strb	r3, [r4, #0]
   2243a:	e000      	b.n	2243e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2243c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2243e:	2317      	movs	r3, #23
   22440:	18fb      	adds	r3, r7, r3
   22442:	781b      	ldrb	r3, [r3, #0]
   22444:	b25b      	sxtb	r3, r3
}
   22446:	0018      	movs	r0, r3
   22448:	46bd      	mov	sp, r7
   2244a:	b007      	add	sp, #28
   2244c:	bd90      	pop	{r4, r7, pc}
   2244e:	46c0      	nop			; (mov r8, r8)
   22450:	00021819 	.word	0x00021819
   22454:	0003a118 	.word	0x0003a118
   22458:	00039df0 	.word	0x00039df0
   2245c:	0001e9e9 	.word	0x0001e9e9
   22460:	0003a01c 	.word	0x0003a01c
   22464:	00039dec 	.word	0x00039dec
   22468:	20005b2c 	.word	0x20005b2c
   2246c:	0003a03c 	.word	0x0003a03c
   22470:	00000286 	.word	0x00000286
   22474:	0003a084 	.word	0x0003a084
   22478:	00023885 	.word	0x00023885

0002247c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2247c:	b580      	push	{r7, lr}
   2247e:	b084      	sub	sp, #16
   22480:	af00      	add	r7, sp, #0
   22482:	0002      	movs	r2, r0
   22484:	6039      	str	r1, [r7, #0]
   22486:	1dfb      	adds	r3, r7, #7
   22488:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2248a:	230f      	movs	r3, #15
   2248c:	18fb      	adds	r3, r7, r3
   2248e:	2200      	movs	r2, #0
   22490:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   22492:	1dfb      	adds	r3, r7, #7
   22494:	781b      	ldrb	r3, [r3, #0]
   22496:	2b07      	cmp	r3, #7
   22498:	d820      	bhi.n	224dc <hif_register_cb+0x60>
   2249a:	009a      	lsls	r2, r3, #2
   2249c:	4b1e      	ldr	r3, [pc, #120]	; (22518 <hif_register_cb+0x9c>)
   2249e:	18d3      	adds	r3, r2, r3
   224a0:	681b      	ldr	r3, [r3, #0]
   224a2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   224a4:	4b1d      	ldr	r3, [pc, #116]	; (2251c <hif_register_cb+0xa0>)
   224a6:	683a      	ldr	r2, [r7, #0]
   224a8:	615a      	str	r2, [r3, #20]
			break;
   224aa:	e02d      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   224ac:	4b1b      	ldr	r3, [pc, #108]	; (2251c <hif_register_cb+0xa0>)
   224ae:	683a      	ldr	r2, [r7, #0]
   224b0:	611a      	str	r2, [r3, #16]
			break;
   224b2:	e029      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   224b4:	4b19      	ldr	r3, [pc, #100]	; (2251c <hif_register_cb+0xa0>)
   224b6:	683a      	ldr	r2, [r7, #0]
   224b8:	619a      	str	r2, [r3, #24]
			break;
   224ba:	e025      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   224bc:	4b17      	ldr	r3, [pc, #92]	; (2251c <hif_register_cb+0xa0>)
   224be:	683a      	ldr	r2, [r7, #0]
   224c0:	621a      	str	r2, [r3, #32]
			break;
   224c2:	e021      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   224c4:	4b15      	ldr	r3, [pc, #84]	; (2251c <hif_register_cb+0xa0>)
   224c6:	683a      	ldr	r2, [r7, #0]
   224c8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   224ca:	e01d      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   224cc:	4b13      	ldr	r3, [pc, #76]	; (2251c <hif_register_cb+0xa0>)
   224ce:	683a      	ldr	r2, [r7, #0]
   224d0:	61da      	str	r2, [r3, #28]
			break;
   224d2:	e019      	b.n	22508 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   224d4:	4b11      	ldr	r3, [pc, #68]	; (2251c <hif_register_cb+0xa0>)
   224d6:	683a      	ldr	r2, [r7, #0]
   224d8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   224da:	e015      	b.n	22508 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   224dc:	4a10      	ldr	r2, [pc, #64]	; (22520 <hif_register_cb+0xa4>)
   224de:	4911      	ldr	r1, [pc, #68]	; (22524 <hif_register_cb+0xa8>)
   224e0:	4b11      	ldr	r3, [pc, #68]	; (22528 <hif_register_cb+0xac>)
   224e2:	0018      	movs	r0, r3
   224e4:	4b11      	ldr	r3, [pc, #68]	; (2252c <hif_register_cb+0xb0>)
   224e6:	4798      	blx	r3
   224e8:	1dfb      	adds	r3, r7, #7
   224ea:	781a      	ldrb	r2, [r3, #0]
   224ec:	4b10      	ldr	r3, [pc, #64]	; (22530 <hif_register_cb+0xb4>)
   224ee:	0011      	movs	r1, r2
   224f0:	0018      	movs	r0, r3
   224f2:	4b0e      	ldr	r3, [pc, #56]	; (2252c <hif_register_cb+0xb0>)
   224f4:	4798      	blx	r3
   224f6:	4b0f      	ldr	r3, [pc, #60]	; (22534 <hif_register_cb+0xb8>)
   224f8:	0018      	movs	r0, r3
   224fa:	4b0c      	ldr	r3, [pc, #48]	; (2252c <hif_register_cb+0xb0>)
   224fc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   224fe:	230f      	movs	r3, #15
   22500:	18fb      	adds	r3, r7, r3
   22502:	22f4      	movs	r2, #244	; 0xf4
   22504:	701a      	strb	r2, [r3, #0]
			break;
   22506:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22508:	230f      	movs	r3, #15
   2250a:	18fb      	adds	r3, r7, r3
   2250c:	781b      	ldrb	r3, [r3, #0]
   2250e:	b25b      	sxtb	r3, r3
}
   22510:	0018      	movs	r0, r3
   22512:	46bd      	mov	sp, r7
   22514:	b004      	add	sp, #16
   22516:	bd80      	pop	{r7, pc}
   22518:	0003a0d4 	.word	0x0003a0d4
   2251c:	20005b2c 	.word	0x20005b2c
   22520:	000002be 	.word	0x000002be
   22524:	0003a124 	.word	0x0003a124
   22528:	00039df0 	.word	0x00039df0
   2252c:	0001e9e9 	.word	0x0001e9e9
   22530:	0003a0c8 	.word	0x0003a0c8
   22534:	00039dec 	.word	0x00039dec

00022538 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22538:	b590      	push	{r4, r7, lr}
   2253a:	b0af      	sub	sp, #188	; 0xbc
   2253c:	af02      	add	r7, sp, #8
   2253e:	603a      	str	r2, [r7, #0]
   22540:	1dfb      	adds	r3, r7, #7
   22542:	1c02      	adds	r2, r0, #0
   22544:	701a      	strb	r2, [r3, #0]
   22546:	1d3b      	adds	r3, r7, #4
   22548:	1c0a      	adds	r2, r1, #0
   2254a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   2254c:	1dfb      	adds	r3, r7, #7
   2254e:	781b      	ldrb	r3, [r3, #0]
   22550:	2b2c      	cmp	r3, #44	; 0x2c
   22552:	d116      	bne.n	22582 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22554:	23a4      	movs	r3, #164	; 0xa4
   22556:	18f9      	adds	r1, r7, r3
   22558:	6838      	ldr	r0, [r7, #0]
   2255a:	2300      	movs	r3, #0
   2255c:	2204      	movs	r2, #4
   2255e:	4cca      	ldr	r4, [pc, #808]	; (22888 <m2m_wifi_cb+0x350>)
   22560:	47a0      	blx	r4
   22562:	1e03      	subs	r3, r0, #0
   22564:	d000      	beq.n	22568 <m2m_wifi_cb+0x30>
   22566:	e1b4      	b.n	228d2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22568:	4bc8      	ldr	r3, [pc, #800]	; (2288c <m2m_wifi_cb+0x354>)
   2256a:	681b      	ldr	r3, [r3, #0]
   2256c:	2b00      	cmp	r3, #0
   2256e:	d100      	bne.n	22572 <m2m_wifi_cb+0x3a>
   22570:	e1af      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   22572:	4bc6      	ldr	r3, [pc, #792]	; (2288c <m2m_wifi_cb+0x354>)
   22574:	681b      	ldr	r3, [r3, #0]
   22576:	22a4      	movs	r2, #164	; 0xa4
   22578:	18ba      	adds	r2, r7, r2
   2257a:	0011      	movs	r1, r2
   2257c:	202c      	movs	r0, #44	; 0x2c
   2257e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   22580:	e1a7      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   22582:	1dfb      	adds	r3, r7, #7
   22584:	781b      	ldrb	r3, [r3, #0]
   22586:	2b1b      	cmp	r3, #27
   22588:	d116      	bne.n	225b8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2258a:	239c      	movs	r3, #156	; 0x9c
   2258c:	18f9      	adds	r1, r7, r3
   2258e:	6838      	ldr	r0, [r7, #0]
   22590:	2300      	movs	r3, #0
   22592:	2208      	movs	r2, #8
   22594:	4cbc      	ldr	r4, [pc, #752]	; (22888 <m2m_wifi_cb+0x350>)
   22596:	47a0      	blx	r4
   22598:	1e03      	subs	r3, r0, #0
   2259a:	d000      	beq.n	2259e <m2m_wifi_cb+0x66>
   2259c:	e199      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2259e:	4bbb      	ldr	r3, [pc, #748]	; (2288c <m2m_wifi_cb+0x354>)
   225a0:	681b      	ldr	r3, [r3, #0]
   225a2:	2b00      	cmp	r3, #0
   225a4:	d100      	bne.n	225a8 <m2m_wifi_cb+0x70>
   225a6:	e194      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   225a8:	4bb8      	ldr	r3, [pc, #736]	; (2288c <m2m_wifi_cb+0x354>)
   225aa:	681b      	ldr	r3, [r3, #0]
   225ac:	229c      	movs	r2, #156	; 0x9c
   225ae:	18ba      	adds	r2, r7, r2
   225b0:	0011      	movs	r1, r2
   225b2:	201b      	movs	r0, #27
   225b4:	4798      	blx	r3
}
   225b6:	e18c      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   225b8:	1dfb      	adds	r3, r7, #7
   225ba:	781b      	ldrb	r3, [r3, #0]
   225bc:	2b06      	cmp	r3, #6
   225be:	d116      	bne.n	225ee <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   225c0:	230c      	movs	r3, #12
   225c2:	18f9      	adds	r1, r7, r3
   225c4:	6838      	ldr	r0, [r7, #0]
   225c6:	2301      	movs	r3, #1
   225c8:	2230      	movs	r2, #48	; 0x30
   225ca:	4caf      	ldr	r4, [pc, #700]	; (22888 <m2m_wifi_cb+0x350>)
   225cc:	47a0      	blx	r4
   225ce:	1e03      	subs	r3, r0, #0
   225d0:	d000      	beq.n	225d4 <m2m_wifi_cb+0x9c>
   225d2:	e17e      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   225d4:	4bad      	ldr	r3, [pc, #692]	; (2288c <m2m_wifi_cb+0x354>)
   225d6:	681b      	ldr	r3, [r3, #0]
   225d8:	2b00      	cmp	r3, #0
   225da:	d100      	bne.n	225de <m2m_wifi_cb+0xa6>
   225dc:	e179      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   225de:	4bab      	ldr	r3, [pc, #684]	; (2288c <m2m_wifi_cb+0x354>)
   225e0:	681b      	ldr	r3, [r3, #0]
   225e2:	220c      	movs	r2, #12
   225e4:	18ba      	adds	r2, r7, r2
   225e6:	0011      	movs	r1, r2
   225e8:	2006      	movs	r0, #6
   225ea:	4798      	blx	r3
}
   225ec:	e171      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   225ee:	1dfb      	adds	r3, r7, #7
   225f0:	781b      	ldrb	r3, [r3, #0]
   225f2:	2b0e      	cmp	r3, #14
   225f4:	d100      	bne.n	225f8 <m2m_wifi_cb+0xc0>
   225f6:	e16c      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   225f8:	1dfb      	adds	r3, r7, #7
   225fa:	781b      	ldrb	r3, [r3, #0]
   225fc:	2b32      	cmp	r3, #50	; 0x32
   225fe:	d116      	bne.n	2262e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22600:	2384      	movs	r3, #132	; 0x84
   22602:	18f9      	adds	r1, r7, r3
   22604:	6838      	ldr	r0, [r7, #0]
   22606:	2300      	movs	r3, #0
   22608:	2218      	movs	r2, #24
   2260a:	4c9f      	ldr	r4, [pc, #636]	; (22888 <m2m_wifi_cb+0x350>)
   2260c:	47a0      	blx	r4
   2260e:	1e03      	subs	r3, r0, #0
   22610:	d000      	beq.n	22614 <m2m_wifi_cb+0xdc>
   22612:	e15e      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22614:	4b9d      	ldr	r3, [pc, #628]	; (2288c <m2m_wifi_cb+0x354>)
   22616:	681b      	ldr	r3, [r3, #0]
   22618:	2b00      	cmp	r3, #0
   2261a:	d100      	bne.n	2261e <m2m_wifi_cb+0xe6>
   2261c:	e159      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2261e:	4b9b      	ldr	r3, [pc, #620]	; (2288c <m2m_wifi_cb+0x354>)
   22620:	681b      	ldr	r3, [r3, #0]
   22622:	2284      	movs	r2, #132	; 0x84
   22624:	18ba      	adds	r2, r7, r2
   22626:	0011      	movs	r1, r2
   22628:	2032      	movs	r0, #50	; 0x32
   2262a:	4798      	blx	r3
}
   2262c:	e151      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2262e:	1dfb      	adds	r3, r7, #7
   22630:	781b      	ldrb	r3, [r3, #0]
   22632:	2b2f      	cmp	r3, #47	; 0x2f
   22634:	d11d      	bne.n	22672 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22636:	230c      	movs	r3, #12
   22638:	18fb      	adds	r3, r7, r3
   2263a:	2264      	movs	r2, #100	; 0x64
   2263c:	2100      	movs	r1, #0
   2263e:	0018      	movs	r0, r3
   22640:	4b93      	ldr	r3, [pc, #588]	; (22890 <m2m_wifi_cb+0x358>)
   22642:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22644:	230c      	movs	r3, #12
   22646:	18f9      	adds	r1, r7, r3
   22648:	6838      	ldr	r0, [r7, #0]
   2264a:	2300      	movs	r3, #0
   2264c:	2264      	movs	r2, #100	; 0x64
   2264e:	4c8e      	ldr	r4, [pc, #568]	; (22888 <m2m_wifi_cb+0x350>)
   22650:	47a0      	blx	r4
   22652:	1e03      	subs	r3, r0, #0
   22654:	d000      	beq.n	22658 <m2m_wifi_cb+0x120>
   22656:	e13c      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22658:	4b8c      	ldr	r3, [pc, #560]	; (2288c <m2m_wifi_cb+0x354>)
   2265a:	681b      	ldr	r3, [r3, #0]
   2265c:	2b00      	cmp	r3, #0
   2265e:	d100      	bne.n	22662 <m2m_wifi_cb+0x12a>
   22660:	e137      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   22662:	4b8a      	ldr	r3, [pc, #552]	; (2288c <m2m_wifi_cb+0x354>)
   22664:	681b      	ldr	r3, [r3, #0]
   22666:	220c      	movs	r2, #12
   22668:	18ba      	adds	r2, r7, r2
   2266a:	0011      	movs	r1, r2
   2266c:	202f      	movs	r0, #47	; 0x2f
   2266e:	4798      	blx	r3
}
   22670:	e12f      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22672:	1dfb      	adds	r3, r7, #7
   22674:	781b      	ldrb	r3, [r3, #0]
   22676:	2b34      	cmp	r3, #52	; 0x34
   22678:	d137      	bne.n	226ea <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2267a:	2380      	movs	r3, #128	; 0x80
   2267c:	18f9      	adds	r1, r7, r3
   2267e:	6838      	ldr	r0, [r7, #0]
   22680:	2300      	movs	r3, #0
   22682:	2204      	movs	r2, #4
   22684:	4c80      	ldr	r4, [pc, #512]	; (22888 <m2m_wifi_cb+0x350>)
   22686:	47a0      	blx	r4
   22688:	1e03      	subs	r3, r0, #0
   2268a:	d000      	beq.n	2268e <m2m_wifi_cb+0x156>
   2268c:	e121      	b.n	228d2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2268e:	4b81      	ldr	r3, [pc, #516]	; (22894 <m2m_wifi_cb+0x35c>)
   22690:	0018      	movs	r0, r3
   22692:	4b81      	ldr	r3, [pc, #516]	; (22898 <m2m_wifi_cb+0x360>)
   22694:	4798      	blx	r3
   22696:	2380      	movs	r3, #128	; 0x80
   22698:	18fb      	adds	r3, r7, r3
   2269a:	681b      	ldr	r3, [r3, #0]
   2269c:	0e1b      	lsrs	r3, r3, #24
   2269e:	b2db      	uxtb	r3, r3
   226a0:	0019      	movs	r1, r3
   226a2:	2380      	movs	r3, #128	; 0x80
   226a4:	18fb      	adds	r3, r7, r3
   226a6:	681b      	ldr	r3, [r3, #0]
   226a8:	0c1b      	lsrs	r3, r3, #16
   226aa:	b2db      	uxtb	r3, r3
   226ac:	001a      	movs	r2, r3
   226ae:	2380      	movs	r3, #128	; 0x80
   226b0:	18fb      	adds	r3, r7, r3
   226b2:	681b      	ldr	r3, [r3, #0]
   226b4:	0a1b      	lsrs	r3, r3, #8
   226b6:	b2db      	uxtb	r3, r3
   226b8:	001c      	movs	r4, r3
   226ba:	2380      	movs	r3, #128	; 0x80
   226bc:	18fb      	adds	r3, r7, r3
   226be:	681b      	ldr	r3, [r3, #0]
   226c0:	b2db      	uxtb	r3, r3
   226c2:	4876      	ldr	r0, [pc, #472]	; (2289c <m2m_wifi_cb+0x364>)
   226c4:	9300      	str	r3, [sp, #0]
   226c6:	0023      	movs	r3, r4
   226c8:	4c73      	ldr	r4, [pc, #460]	; (22898 <m2m_wifi_cb+0x360>)
   226ca:	47a0      	blx	r4
   226cc:	4b74      	ldr	r3, [pc, #464]	; (228a0 <m2m_wifi_cb+0x368>)
   226ce:	0018      	movs	r0, r3
   226d0:	4b71      	ldr	r3, [pc, #452]	; (22898 <m2m_wifi_cb+0x360>)
   226d2:	4798      	blx	r3
			if (gpfAppWifiCb)
   226d4:	4b6d      	ldr	r3, [pc, #436]	; (2288c <m2m_wifi_cb+0x354>)
   226d6:	681b      	ldr	r3, [r3, #0]
   226d8:	2b00      	cmp	r3, #0
   226da:	d100      	bne.n	226de <m2m_wifi_cb+0x1a6>
   226dc:	e0f9      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   226de:	4b6b      	ldr	r3, [pc, #428]	; (2288c <m2m_wifi_cb+0x354>)
   226e0:	681b      	ldr	r3, [r3, #0]
   226e2:	2100      	movs	r1, #0
   226e4:	2034      	movs	r0, #52	; 0x34
   226e6:	4798      	blx	r3
}
   226e8:	e0f3      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   226ea:	1dfb      	adds	r3, r7, #7
   226ec:	781b      	ldrb	r3, [r3, #0]
   226ee:	2b11      	cmp	r3, #17
   226f0:	d11e      	bne.n	22730 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   226f2:	4b6c      	ldr	r3, [pc, #432]	; (228a4 <m2m_wifi_cb+0x36c>)
   226f4:	2200      	movs	r2, #0
   226f6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   226f8:	237c      	movs	r3, #124	; 0x7c
   226fa:	18f9      	adds	r1, r7, r3
   226fc:	6838      	ldr	r0, [r7, #0]
   226fe:	2300      	movs	r3, #0
   22700:	2204      	movs	r2, #4
   22702:	4c61      	ldr	r4, [pc, #388]	; (22888 <m2m_wifi_cb+0x350>)
   22704:	47a0      	blx	r4
   22706:	1e03      	subs	r3, r0, #0
   22708:	d000      	beq.n	2270c <m2m_wifi_cb+0x1d4>
   2270a:	e0e2      	b.n	228d2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   2270c:	237c      	movs	r3, #124	; 0x7c
   2270e:	18fb      	adds	r3, r7, r3
   22710:	781a      	ldrb	r2, [r3, #0]
   22712:	4b65      	ldr	r3, [pc, #404]	; (228a8 <m2m_wifi_cb+0x370>)
   22714:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22716:	4b5d      	ldr	r3, [pc, #372]	; (2288c <m2m_wifi_cb+0x354>)
   22718:	681b      	ldr	r3, [r3, #0]
   2271a:	2b00      	cmp	r3, #0
   2271c:	d100      	bne.n	22720 <m2m_wifi_cb+0x1e8>
   2271e:	e0d8      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   22720:	4b5a      	ldr	r3, [pc, #360]	; (2288c <m2m_wifi_cb+0x354>)
   22722:	681b      	ldr	r3, [r3, #0]
   22724:	227c      	movs	r2, #124	; 0x7c
   22726:	18ba      	adds	r2, r7, r2
   22728:	0011      	movs	r1, r2
   2272a:	2011      	movs	r0, #17
   2272c:	4798      	blx	r3
}
   2272e:	e0d0      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22730:	1dfb      	adds	r3, r7, #7
   22732:	781b      	ldrb	r3, [r3, #0]
   22734:	2b13      	cmp	r3, #19
   22736:	d116      	bne.n	22766 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22738:	230c      	movs	r3, #12
   2273a:	18f9      	adds	r1, r7, r3
   2273c:	6838      	ldr	r0, [r7, #0]
   2273e:	2300      	movs	r3, #0
   22740:	222c      	movs	r2, #44	; 0x2c
   22742:	4c51      	ldr	r4, [pc, #324]	; (22888 <m2m_wifi_cb+0x350>)
   22744:	47a0      	blx	r4
   22746:	1e03      	subs	r3, r0, #0
   22748:	d000      	beq.n	2274c <m2m_wifi_cb+0x214>
   2274a:	e0c2      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2274c:	4b4f      	ldr	r3, [pc, #316]	; (2288c <m2m_wifi_cb+0x354>)
   2274e:	681b      	ldr	r3, [r3, #0]
   22750:	2b00      	cmp	r3, #0
   22752:	d100      	bne.n	22756 <m2m_wifi_cb+0x21e>
   22754:	e0bd      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22756:	4b4d      	ldr	r3, [pc, #308]	; (2288c <m2m_wifi_cb+0x354>)
   22758:	681b      	ldr	r3, [r3, #0]
   2275a:	220c      	movs	r2, #12
   2275c:	18ba      	adds	r2, r7, r2
   2275e:	0011      	movs	r1, r2
   22760:	2013      	movs	r0, #19
   22762:	4798      	blx	r3
}
   22764:	e0b5      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22766:	1dfb      	adds	r3, r7, #7
   22768:	781b      	ldrb	r3, [r3, #0]
   2276a:	2b04      	cmp	r3, #4
   2276c:	d116      	bne.n	2279c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2276e:	23a8      	movs	r3, #168	; 0xa8
   22770:	18f9      	adds	r1, r7, r3
   22772:	6838      	ldr	r0, [r7, #0]
   22774:	2300      	movs	r3, #0
   22776:	2204      	movs	r2, #4
   22778:	4c43      	ldr	r4, [pc, #268]	; (22888 <m2m_wifi_cb+0x350>)
   2277a:	47a0      	blx	r4
   2277c:	1e03      	subs	r3, r0, #0
   2277e:	d000      	beq.n	22782 <m2m_wifi_cb+0x24a>
   22780:	e0a7      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22782:	4b42      	ldr	r3, [pc, #264]	; (2288c <m2m_wifi_cb+0x354>)
   22784:	681b      	ldr	r3, [r3, #0]
   22786:	2b00      	cmp	r3, #0
   22788:	d100      	bne.n	2278c <m2m_wifi_cb+0x254>
   2278a:	e0a2      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2278c:	4b3f      	ldr	r3, [pc, #252]	; (2288c <m2m_wifi_cb+0x354>)
   2278e:	681b      	ldr	r3, [r3, #0]
   22790:	22a8      	movs	r2, #168	; 0xa8
   22792:	18ba      	adds	r2, r7, r2
   22794:	0011      	movs	r1, r2
   22796:	2004      	movs	r0, #4
   22798:	4798      	blx	r3
}
   2279a:	e09a      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2279c:	1dfb      	adds	r3, r7, #7
   2279e:	781b      	ldrb	r3, [r3, #0]
   227a0:	2b65      	cmp	r3, #101	; 0x65
   227a2:	d116      	bne.n	227d2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   227a4:	23a8      	movs	r3, #168	; 0xa8
   227a6:	18f9      	adds	r1, r7, r3
   227a8:	6838      	ldr	r0, [r7, #0]
   227aa:	2300      	movs	r3, #0
   227ac:	2204      	movs	r2, #4
   227ae:	4c36      	ldr	r4, [pc, #216]	; (22888 <m2m_wifi_cb+0x350>)
   227b0:	47a0      	blx	r4
   227b2:	1e03      	subs	r3, r0, #0
   227b4:	d000      	beq.n	227b8 <m2m_wifi_cb+0x280>
   227b6:	e08c      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227b8:	4b34      	ldr	r3, [pc, #208]	; (2288c <m2m_wifi_cb+0x354>)
   227ba:	681b      	ldr	r3, [r3, #0]
   227bc:	2b00      	cmp	r3, #0
   227be:	d100      	bne.n	227c2 <m2m_wifi_cb+0x28a>
   227c0:	e087      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   227c2:	4b32      	ldr	r3, [pc, #200]	; (2288c <m2m_wifi_cb+0x354>)
   227c4:	681b      	ldr	r3, [r3, #0]
   227c6:	22a8      	movs	r2, #168	; 0xa8
   227c8:	18ba      	adds	r2, r7, r2
   227ca:	0011      	movs	r1, r2
   227cc:	2065      	movs	r0, #101	; 0x65
   227ce:	4798      	blx	r3
}
   227d0:	e07f      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   227d2:	1dfb      	adds	r3, r7, #7
   227d4:	781b      	ldrb	r3, [r3, #0]
   227d6:	2b09      	cmp	r3, #9
   227d8:	d116      	bne.n	22808 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   227da:	230c      	movs	r3, #12
   227dc:	18f9      	adds	r1, r7, r3
   227de:	6838      	ldr	r0, [r7, #0]
   227e0:	2301      	movs	r3, #1
   227e2:	2264      	movs	r2, #100	; 0x64
   227e4:	4c28      	ldr	r4, [pc, #160]	; (22888 <m2m_wifi_cb+0x350>)
   227e6:	47a0      	blx	r4
   227e8:	1e03      	subs	r3, r0, #0
   227ea:	d000      	beq.n	227ee <m2m_wifi_cb+0x2b6>
   227ec:	e071      	b.n	228d2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   227ee:	4b27      	ldr	r3, [pc, #156]	; (2288c <m2m_wifi_cb+0x354>)
   227f0:	681b      	ldr	r3, [r3, #0]
   227f2:	2b00      	cmp	r3, #0
   227f4:	d100      	bne.n	227f8 <m2m_wifi_cb+0x2c0>
   227f6:	e06c      	b.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   227f8:	4b24      	ldr	r3, [pc, #144]	; (2288c <m2m_wifi_cb+0x354>)
   227fa:	681b      	ldr	r3, [r3, #0]
   227fc:	220c      	movs	r2, #12
   227fe:	18ba      	adds	r2, r7, r2
   22800:	0011      	movs	r1, r2
   22802:	2009      	movs	r0, #9
   22804:	4798      	blx	r3
}
   22806:	e064      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22808:	1dfb      	adds	r3, r7, #7
   2280a:	781b      	ldrb	r3, [r3, #0]
   2280c:	2b2a      	cmp	r3, #42	; 0x2a
   2280e:	d114      	bne.n	2283a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22810:	2378      	movs	r3, #120	; 0x78
   22812:	18f9      	adds	r1, r7, r3
   22814:	6838      	ldr	r0, [r7, #0]
   22816:	2301      	movs	r3, #1
   22818:	2204      	movs	r2, #4
   2281a:	4c1b      	ldr	r4, [pc, #108]	; (22888 <m2m_wifi_cb+0x350>)
   2281c:	47a0      	blx	r4
   2281e:	1e03      	subs	r3, r0, #0
   22820:	d157      	bne.n	228d2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22822:	4b1a      	ldr	r3, [pc, #104]	; (2288c <m2m_wifi_cb+0x354>)
   22824:	681b      	ldr	r3, [r3, #0]
   22826:	2b00      	cmp	r3, #0
   22828:	d053      	beq.n	228d2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   2282a:	4b18      	ldr	r3, [pc, #96]	; (2288c <m2m_wifi_cb+0x354>)
   2282c:	681b      	ldr	r3, [r3, #0]
   2282e:	2278      	movs	r2, #120	; 0x78
   22830:	18ba      	adds	r2, r7, r2
   22832:	0011      	movs	r1, r2
   22834:	202a      	movs	r0, #42	; 0x2a
   22836:	4798      	blx	r3
}
   22838:	e04b      	b.n	228d2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   2283a:	1dfb      	adds	r3, r7, #7
   2283c:	781b      	ldrb	r3, [r3, #0]
   2283e:	2b20      	cmp	r3, #32
   22840:	d134      	bne.n	228ac <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22842:	2370      	movs	r3, #112	; 0x70
   22844:	18f9      	adds	r1, r7, r3
   22846:	6838      	ldr	r0, [r7, #0]
   22848:	2300      	movs	r3, #0
   2284a:	2208      	movs	r2, #8
   2284c:	4c0e      	ldr	r4, [pc, #56]	; (22888 <m2m_wifi_cb+0x350>)
   2284e:	47a0      	blx	r4
   22850:	1e03      	subs	r3, r0, #0
   22852:	d13e      	bne.n	228d2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22854:	683b      	ldr	r3, [r7, #0]
   22856:	3308      	adds	r3, #8
   22858:	0018      	movs	r0, r3
   2285a:	2370      	movs	r3, #112	; 0x70
   2285c:	18fb      	adds	r3, r7, r3
   2285e:	6819      	ldr	r1, [r3, #0]
   22860:	2370      	movs	r3, #112	; 0x70
   22862:	18fb      	adds	r3, r7, r3
   22864:	889a      	ldrh	r2, [r3, #4]
   22866:	2301      	movs	r3, #1
   22868:	4c07      	ldr	r4, [pc, #28]	; (22888 <m2m_wifi_cb+0x350>)
   2286a:	47a0      	blx	r4
   2286c:	1e03      	subs	r3, r0, #0
   2286e:	d130      	bne.n	228d2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22870:	4b06      	ldr	r3, [pc, #24]	; (2288c <m2m_wifi_cb+0x354>)
   22872:	681b      	ldr	r3, [r3, #0]
   22874:	2b00      	cmp	r3, #0
   22876:	d02c      	beq.n	228d2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22878:	4b04      	ldr	r3, [pc, #16]	; (2288c <m2m_wifi_cb+0x354>)
   2287a:	681b      	ldr	r3, [r3, #0]
   2287c:	2270      	movs	r2, #112	; 0x70
   2287e:	18ba      	adds	r2, r7, r2
   22880:	0011      	movs	r1, r2
   22882:	2020      	movs	r0, #32
   22884:	4798      	blx	r3
}
   22886:	e024      	b.n	228d2 <m2m_wifi_cb+0x39a>
   22888:	000222fd 	.word	0x000222fd
   2288c:	200042a0 	.word	0x200042a0
   22890:	00021781 	.word	0x00021781
   22894:	0003a134 	.word	0x0003a134
   22898:	0001e9e9 	.word	0x0001e9e9
   2289c:	0003a140 	.word	0x0003a140
   228a0:	0003a160 	.word	0x0003a160
   228a4:	2000429d 	.word	0x2000429d
   228a8:	2000429c 	.word	0x2000429c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   228ac:	2324      	movs	r3, #36	; 0x24
   228ae:	33ff      	adds	r3, #255	; 0xff
   228b0:	001a      	movs	r2, r3
   228b2:	490a      	ldr	r1, [pc, #40]	; (228dc <m2m_wifi_cb+0x3a4>)
   228b4:	4b0a      	ldr	r3, [pc, #40]	; (228e0 <m2m_wifi_cb+0x3a8>)
   228b6:	0018      	movs	r0, r3
   228b8:	4b0a      	ldr	r3, [pc, #40]	; (228e4 <m2m_wifi_cb+0x3ac>)
   228ba:	4798      	blx	r3
   228bc:	1dfb      	adds	r3, r7, #7
   228be:	781a      	ldrb	r2, [r3, #0]
   228c0:	4b09      	ldr	r3, [pc, #36]	; (228e8 <m2m_wifi_cb+0x3b0>)
   228c2:	0011      	movs	r1, r2
   228c4:	0018      	movs	r0, r3
   228c6:	4b07      	ldr	r3, [pc, #28]	; (228e4 <m2m_wifi_cb+0x3ac>)
   228c8:	4798      	blx	r3
   228ca:	4b08      	ldr	r3, [pc, #32]	; (228ec <m2m_wifi_cb+0x3b4>)
   228cc:	0018      	movs	r0, r3
   228ce:	4b05      	ldr	r3, [pc, #20]	; (228e4 <m2m_wifi_cb+0x3ac>)
   228d0:	4798      	blx	r3
}
   228d2:	46c0      	nop			; (mov r8, r8)
   228d4:	46bd      	mov	sp, r7
   228d6:	b02d      	add	sp, #180	; 0xb4
   228d8:	bd90      	pop	{r4, r7, pc}
   228da:	46c0      	nop			; (mov r8, r8)
   228dc:	0003a500 	.word	0x0003a500
   228e0:	0003a164 	.word	0x0003a164
   228e4:	0001e9e9 	.word	0x0001e9e9
   228e8:	0003a178 	.word	0x0003a178
   228ec:	0003a160 	.word	0x0003a160

000228f0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   228f0:	b590      	push	{r4, r7, lr}
   228f2:	b091      	sub	sp, #68	; 0x44
   228f4:	af02      	add	r7, sp, #8
   228f6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   228f8:	2337      	movs	r3, #55	; 0x37
   228fa:	18fb      	adds	r3, r7, r3
   228fc:	2200      	movs	r2, #0
   228fe:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22900:	230b      	movs	r3, #11
   22902:	18fb      	adds	r3, r7, r3
   22904:	2201      	movs	r2, #1
   22906:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22908:	687b      	ldr	r3, [r7, #4]
   2290a:	2b00      	cmp	r3, #0
   2290c:	d104      	bne.n	22918 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2290e:	2337      	movs	r3, #55	; 0x37
   22910:	18fb      	adds	r3, r7, r3
   22912:	22f4      	movs	r2, #244	; 0xf4
   22914:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22916:	e0b3      	b.n	22a80 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22918:	687b      	ldr	r3, [r7, #4]
   2291a:	681a      	ldr	r2, [r3, #0]
   2291c:	4b5c      	ldr	r3, [pc, #368]	; (22a90 <m2m_wifi_init+0x1a0>)
   2291e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22920:	4b5c      	ldr	r3, [pc, #368]	; (22a94 <m2m_wifi_init+0x1a4>)
   22922:	2200      	movs	r2, #0
   22924:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22926:	2337      	movs	r3, #55	; 0x37
   22928:	18fc      	adds	r4, r7, r3
   2292a:	230b      	movs	r3, #11
   2292c:	18fb      	adds	r3, r7, r3
   2292e:	0018      	movs	r0, r3
   22930:	4b59      	ldr	r3, [pc, #356]	; (22a98 <m2m_wifi_init+0x1a8>)
   22932:	4798      	blx	r3
   22934:	0003      	movs	r3, r0
   22936:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22938:	2337      	movs	r3, #55	; 0x37
   2293a:	18fb      	adds	r3, r7, r3
   2293c:	781b      	ldrb	r3, [r3, #0]
   2293e:	b25b      	sxtb	r3, r3
   22940:	2b00      	cmp	r3, #0
   22942:	d000      	beq.n	22946 <m2m_wifi_init+0x56>
   22944:	e099      	b.n	22a7a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22946:	2337      	movs	r3, #55	; 0x37
   22948:	18fc      	adds	r4, r7, r3
   2294a:	2000      	movs	r0, #0
   2294c:	4b53      	ldr	r3, [pc, #332]	; (22a9c <m2m_wifi_init+0x1ac>)
   2294e:	4798      	blx	r3
   22950:	0003      	movs	r3, r0
   22952:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22954:	2337      	movs	r3, #55	; 0x37
   22956:	18fb      	adds	r3, r7, r3
   22958:	781b      	ldrb	r3, [r3, #0]
   2295a:	b25b      	sxtb	r3, r3
   2295c:	2b00      	cmp	r3, #0
   2295e:	d000      	beq.n	22962 <m2m_wifi_init+0x72>
   22960:	e086      	b.n	22a70 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22962:	4b4f      	ldr	r3, [pc, #316]	; (22aa0 <m2m_wifi_init+0x1b0>)
   22964:	0019      	movs	r1, r3
   22966:	2001      	movs	r0, #1
   22968:	4b4e      	ldr	r3, [pc, #312]	; (22aa4 <m2m_wifi_init+0x1b4>)
   2296a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2296c:	2337      	movs	r3, #55	; 0x37
   2296e:	18fc      	adds	r4, r7, r3
   22970:	230c      	movs	r3, #12
   22972:	18fb      	adds	r3, r7, r3
   22974:	0018      	movs	r0, r3
   22976:	4b4c      	ldr	r3, [pc, #304]	; (22aa8 <m2m_wifi_init+0x1b8>)
   22978:	4798      	blx	r3
   2297a:	0003      	movs	r3, r0
   2297c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2297e:	4b4b      	ldr	r3, [pc, #300]	; (22aac <m2m_wifi_init+0x1bc>)
   22980:	0018      	movs	r0, r3
   22982:	4b4b      	ldr	r3, [pc, #300]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22984:	4798      	blx	r3
   22986:	230c      	movs	r3, #12
   22988:	18fb      	adds	r3, r7, r3
   2298a:	791b      	ldrb	r3, [r3, #4]
   2298c:	0019      	movs	r1, r3
   2298e:	230c      	movs	r3, #12
   22990:	18fb      	adds	r3, r7, r3
   22992:	795b      	ldrb	r3, [r3, #5]
   22994:	001a      	movs	r2, r3
   22996:	230c      	movs	r3, #12
   22998:	18fb      	adds	r3, r7, r3
   2299a:	799b      	ldrb	r3, [r3, #6]
   2299c:	001c      	movs	r4, r3
   2299e:	230c      	movs	r3, #12
   229a0:	18fb      	adds	r3, r7, r3
   229a2:	8c1b      	ldrh	r3, [r3, #32]
   229a4:	4843      	ldr	r0, [pc, #268]	; (22ab4 <m2m_wifi_init+0x1c4>)
   229a6:	9300      	str	r3, [sp, #0]
   229a8:	0023      	movs	r3, r4
   229aa:	4c41      	ldr	r4, [pc, #260]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229ac:	47a0      	blx	r4
   229ae:	4b42      	ldr	r3, [pc, #264]	; (22ab8 <m2m_wifi_init+0x1c8>)
   229b0:	0018      	movs	r0, r3
   229b2:	4b3f      	ldr	r3, [pc, #252]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229b4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   229b6:	4b3d      	ldr	r3, [pc, #244]	; (22aac <m2m_wifi_init+0x1bc>)
   229b8:	0018      	movs	r0, r3
   229ba:	4b3d      	ldr	r3, [pc, #244]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229bc:	4798      	blx	r3
   229be:	230c      	movs	r3, #12
   229c0:	18fb      	adds	r3, r7, r3
   229c2:	3316      	adds	r3, #22
   229c4:	001a      	movs	r2, r3
   229c6:	230c      	movs	r3, #12
   229c8:	18fb      	adds	r3, r7, r3
   229ca:	330a      	adds	r3, #10
   229cc:	0019      	movs	r1, r3
   229ce:	4b3b      	ldr	r3, [pc, #236]	; (22abc <m2m_wifi_init+0x1cc>)
   229d0:	0018      	movs	r0, r3
   229d2:	4b37      	ldr	r3, [pc, #220]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229d4:	4798      	blx	r3
   229d6:	4b38      	ldr	r3, [pc, #224]	; (22ab8 <m2m_wifi_init+0x1c8>)
   229d8:	0018      	movs	r0, r3
   229da:	4b35      	ldr	r3, [pc, #212]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229dc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   229de:	4b33      	ldr	r3, [pc, #204]	; (22aac <m2m_wifi_init+0x1bc>)
   229e0:	0018      	movs	r0, r3
   229e2:	4b33      	ldr	r3, [pc, #204]	; (22ab0 <m2m_wifi_init+0x1c0>)
   229e4:	4798      	blx	r3
   229e6:	230c      	movs	r3, #12
   229e8:	18fb      	adds	r3, r7, r3
   229ea:	79db      	ldrb	r3, [r3, #7]
   229ec:	0019      	movs	r1, r3
   229ee:	230c      	movs	r3, #12
   229f0:	18fb      	adds	r3, r7, r3
   229f2:	7a1b      	ldrb	r3, [r3, #8]
   229f4:	001a      	movs	r2, r3
   229f6:	230c      	movs	r3, #12
   229f8:	18fb      	adds	r3, r7, r3
   229fa:	7a5b      	ldrb	r3, [r3, #9]
   229fc:	4830      	ldr	r0, [pc, #192]	; (22ac0 <m2m_wifi_init+0x1d0>)
   229fe:	4c2c      	ldr	r4, [pc, #176]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a00:	47a0      	blx	r4
   22a02:	4b2d      	ldr	r3, [pc, #180]	; (22ab8 <m2m_wifi_init+0x1c8>)
   22a04:	0018      	movs	r0, r3
   22a06:	4b2a      	ldr	r3, [pc, #168]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a08:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22a0a:	4b28      	ldr	r3, [pc, #160]	; (22aac <m2m_wifi_init+0x1bc>)
   22a0c:	0018      	movs	r0, r3
   22a0e:	4b28      	ldr	r3, [pc, #160]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a10:	4798      	blx	r3
   22a12:	482c      	ldr	r0, [pc, #176]	; (22ac4 <m2m_wifi_init+0x1d4>)
   22a14:	2304      	movs	r3, #4
   22a16:	2205      	movs	r2, #5
   22a18:	2113      	movs	r1, #19
   22a1a:	4c25      	ldr	r4, [pc, #148]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a1c:	47a0      	blx	r4
   22a1e:	4b26      	ldr	r3, [pc, #152]	; (22ab8 <m2m_wifi_init+0x1c8>)
   22a20:	0018      	movs	r0, r3
   22a22:	4b23      	ldr	r3, [pc, #140]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a24:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22a26:	4b21      	ldr	r3, [pc, #132]	; (22aac <m2m_wifi_init+0x1bc>)
   22a28:	0018      	movs	r0, r3
   22a2a:	4b21      	ldr	r3, [pc, #132]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a2c:	4798      	blx	r3
   22a2e:	4a26      	ldr	r2, [pc, #152]	; (22ac8 <m2m_wifi_init+0x1d8>)
   22a30:	4926      	ldr	r1, [pc, #152]	; (22acc <m2m_wifi_init+0x1dc>)
   22a32:	4b27      	ldr	r3, [pc, #156]	; (22ad0 <m2m_wifi_init+0x1e0>)
   22a34:	0018      	movs	r0, r3
   22a36:	4b1e      	ldr	r3, [pc, #120]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a38:	4798      	blx	r3
   22a3a:	4b1f      	ldr	r3, [pc, #124]	; (22ab8 <m2m_wifi_init+0x1c8>)
   22a3c:	0018      	movs	r0, r3
   22a3e:	4b1c      	ldr	r3, [pc, #112]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a40:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22a42:	2337      	movs	r3, #55	; 0x37
   22a44:	18fb      	adds	r3, r7, r3
   22a46:	781b      	ldrb	r3, [r3, #0]
   22a48:	b25b      	sxtb	r3, r3
   22a4a:	330d      	adds	r3, #13
   22a4c:	d117      	bne.n	22a7e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22a4e:	23e8      	movs	r3, #232	; 0xe8
   22a50:	33ff      	adds	r3, #255	; 0xff
   22a52:	001a      	movs	r2, r3
   22a54:	491f      	ldr	r1, [pc, #124]	; (22ad4 <m2m_wifi_init+0x1e4>)
   22a56:	4b20      	ldr	r3, [pc, #128]	; (22ad8 <m2m_wifi_init+0x1e8>)
   22a58:	0018      	movs	r0, r3
   22a5a:	4b15      	ldr	r3, [pc, #84]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a5c:	4798      	blx	r3
   22a5e:	4b1f      	ldr	r3, [pc, #124]	; (22adc <m2m_wifi_init+0x1ec>)
   22a60:	0018      	movs	r0, r3
   22a62:	4b13      	ldr	r3, [pc, #76]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a64:	4798      	blx	r3
   22a66:	4b14      	ldr	r3, [pc, #80]	; (22ab8 <m2m_wifi_init+0x1c8>)
   22a68:	0018      	movs	r0, r3
   22a6a:	4b11      	ldr	r3, [pc, #68]	; (22ab0 <m2m_wifi_init+0x1c0>)
   22a6c:	4798      	blx	r3
	}

	goto _EXIT0;
   22a6e:	e006      	b.n	22a7e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22a70:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22a72:	2000      	movs	r0, #0
   22a74:	4b1a      	ldr	r3, [pc, #104]	; (22ae0 <m2m_wifi_init+0x1f0>)
   22a76:	4798      	blx	r3
   22a78:	e002      	b.n	22a80 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22a7a:	46c0      	nop			; (mov r8, r8)
   22a7c:	e000      	b.n	22a80 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22a7e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22a80:	2337      	movs	r3, #55	; 0x37
   22a82:	18fb      	adds	r3, r7, r3
   22a84:	781b      	ldrb	r3, [r3, #0]
   22a86:	b25b      	sxtb	r3, r3
}
   22a88:	0018      	movs	r0, r3
   22a8a:	46bd      	mov	sp, r7
   22a8c:	b00f      	add	sp, #60	; 0x3c
   22a8e:	bd90      	pop	{r4, r7, pc}
   22a90:	200042a0 	.word	0x200042a0
   22a94:	2000429d 	.word	0x2000429d
   22a98:	00023c15 	.word	0x00023c15
   22a9c:	00021999 	.word	0x00021999
   22aa0:	00022539 	.word	0x00022539
   22aa4:	0002247d 	.word	0x0002247d
   22aa8:	00023a49 	.word	0x00023a49
   22aac:	0003a134 	.word	0x0003a134
   22ab0:	0001e9e9 	.word	0x0001e9e9
   22ab4:	0003a2d8 	.word	0x0003a2d8
   22ab8:	0003a160 	.word	0x0003a160
   22abc:	0003a300 	.word	0x0003a300
   22ac0:	0003a31c 	.word	0x0003a31c
   22ac4:	0003a340 	.word	0x0003a340
   22ac8:	0003a358 	.word	0x0003a358
   22acc:	0003a364 	.word	0x0003a364
   22ad0:	0003a370 	.word	0x0003a370
   22ad4:	0003a50c 	.word	0x0003a50c
   22ad8:	0003a164 	.word	0x0003a164
   22adc:	0003a388 	.word	0x0003a388
   22ae0:	00023da5 	.word	0x00023da5

00022ae4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22ae4:	b580      	push	{r7, lr}
   22ae6:	b082      	sub	sp, #8
   22ae8:	af00      	add	r7, sp, #0
   22aea:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22aec:	4b03      	ldr	r3, [pc, #12]	; (22afc <m2m_wifi_handle_events+0x18>)
   22aee:	4798      	blx	r3
   22af0:	0003      	movs	r3, r0
}
   22af2:	0018      	movs	r0, r3
   22af4:	46bd      	mov	sp, r7
   22af6:	b002      	add	sp, #8
   22af8:	bd80      	pop	{r7, pc}
   22afa:	46c0      	nop			; (mov r8, r8)
   22afc:	0002225d 	.word	0x0002225d

00022b00 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22b00:	b590      	push	{r4, r7, lr}
   22b02:	b087      	sub	sp, #28
   22b04:	af02      	add	r7, sp, #8
   22b06:	60f8      	str	r0, [r7, #12]
   22b08:	0008      	movs	r0, r1
   22b0a:	0011      	movs	r1, r2
   22b0c:	607b      	str	r3, [r7, #4]
   22b0e:	230b      	movs	r3, #11
   22b10:	18fb      	adds	r3, r7, r3
   22b12:	1c02      	adds	r2, r0, #0
   22b14:	701a      	strb	r2, [r3, #0]
   22b16:	230a      	movs	r3, #10
   22b18:	18fb      	adds	r3, r7, r3
   22b1a:	1c0a      	adds	r2, r1, #0
   22b1c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22b1e:	687c      	ldr	r4, [r7, #4]
   22b20:	230a      	movs	r3, #10
   22b22:	18fb      	adds	r3, r7, r3
   22b24:	781a      	ldrb	r2, [r3, #0]
   22b26:	230b      	movs	r3, #11
   22b28:	18fb      	adds	r3, r7, r3
   22b2a:	7819      	ldrb	r1, [r3, #0]
   22b2c:	68f8      	ldr	r0, [r7, #12]
   22b2e:	2300      	movs	r3, #0
   22b30:	9301      	str	r3, [sp, #4]
   22b32:	2320      	movs	r3, #32
   22b34:	18fb      	adds	r3, r7, r3
   22b36:	881b      	ldrh	r3, [r3, #0]
   22b38:	9300      	str	r3, [sp, #0]
   22b3a:	0023      	movs	r3, r4
   22b3c:	4c03      	ldr	r4, [pc, #12]	; (22b4c <m2m_wifi_connect+0x4c>)
   22b3e:	47a0      	blx	r4
   22b40:	0003      	movs	r3, r0
}
   22b42:	0018      	movs	r0, r3
   22b44:	46bd      	mov	sp, r7
   22b46:	b005      	add	sp, #20
   22b48:	bd90      	pop	{r4, r7, pc}
   22b4a:	46c0      	nop			; (mov r8, r8)
   22b4c:	00022b51 	.word	0x00022b51

00022b50 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22b50:	b5b0      	push	{r4, r5, r7, lr}
   22b52:	b0aa      	sub	sp, #168	; 0xa8
   22b54:	af04      	add	r7, sp, #16
   22b56:	60f8      	str	r0, [r7, #12]
   22b58:	0008      	movs	r0, r1
   22b5a:	0011      	movs	r1, r2
   22b5c:	607b      	str	r3, [r7, #4]
   22b5e:	230b      	movs	r3, #11
   22b60:	18fb      	adds	r3, r7, r3
   22b62:	1c02      	adds	r2, r0, #0
   22b64:	701a      	strb	r2, [r3, #0]
   22b66:	230a      	movs	r3, #10
   22b68:	18fb      	adds	r3, r7, r3
   22b6a:	1c0a      	adds	r2, r1, #0
   22b6c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22b6e:	2397      	movs	r3, #151	; 0x97
   22b70:	18fb      	adds	r3, r7, r3
   22b72:	2200      	movs	r2, #0
   22b74:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22b76:	230a      	movs	r3, #10
   22b78:	18fb      	adds	r3, r7, r3
   22b7a:	781b      	ldrb	r3, [r3, #0]
   22b7c:	2b01      	cmp	r3, #1
   22b7e:	d100      	bne.n	22b82 <m2m_wifi_connect_sc+0x32>
   22b80:	e085      	b.n	22c8e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22b82:	687b      	ldr	r3, [r7, #4]
   22b84:	2b00      	cmp	r3, #0
   22b86:	d112      	bne.n	22bae <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22b88:	4ad8      	ldr	r2, [pc, #864]	; (22eec <m2m_wifi_connect_sc+0x39c>)
   22b8a:	49d9      	ldr	r1, [pc, #868]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22b8c:	4bd9      	ldr	r3, [pc, #868]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22b8e:	0018      	movs	r0, r3
   22b90:	4bd9      	ldr	r3, [pc, #868]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22b92:	4798      	blx	r3
   22b94:	4bd9      	ldr	r3, [pc, #868]	; (22efc <m2m_wifi_connect_sc+0x3ac>)
   22b96:	0018      	movs	r0, r3
   22b98:	4bd7      	ldr	r3, [pc, #860]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22b9a:	4798      	blx	r3
   22b9c:	4bd8      	ldr	r3, [pc, #864]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22b9e:	0018      	movs	r0, r3
   22ba0:	4bd5      	ldr	r3, [pc, #852]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22ba2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22ba4:	2397      	movs	r3, #151	; 0x97
   22ba6:	18fb      	adds	r3, r7, r3
   22ba8:	22f4      	movs	r2, #244	; 0xf4
   22baa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22bac:	e1f9      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22bae:	230a      	movs	r3, #10
   22bb0:	18fb      	adds	r3, r7, r3
   22bb2:	781b      	ldrb	r3, [r3, #0]
   22bb4:	2b02      	cmp	r3, #2
   22bb6:	d16a      	bne.n	22c8e <m2m_wifi_connect_sc+0x13e>
   22bb8:	687b      	ldr	r3, [r7, #4]
   22bba:	0018      	movs	r0, r3
   22bbc:	4bd1      	ldr	r3, [pc, #836]	; (22f04 <m2m_wifi_connect_sc+0x3b4>)
   22bbe:	4798      	blx	r3
   22bc0:	0003      	movs	r3, r0
   22bc2:	2b40      	cmp	r3, #64	; 0x40
   22bc4:	d163      	bne.n	22c8e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22bc6:	2396      	movs	r3, #150	; 0x96
   22bc8:	18fb      	adds	r3, r7, r3
   22bca:	2200      	movs	r2, #0
   22bcc:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22bce:	687b      	ldr	r3, [r7, #4]
   22bd0:	2290      	movs	r2, #144	; 0x90
   22bd2:	18ba      	adds	r2, r7, r2
   22bd4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22bd6:	e055      	b.n	22c84 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22bd8:	2396      	movs	r3, #150	; 0x96
   22bda:	18fb      	adds	r3, r7, r3
   22bdc:	781b      	ldrb	r3, [r3, #0]
   22bde:	2290      	movs	r2, #144	; 0x90
   22be0:	18ba      	adds	r2, r7, r2
   22be2:	6812      	ldr	r2, [r2, #0]
   22be4:	18d3      	adds	r3, r2, r3
   22be6:	781b      	ldrb	r3, [r3, #0]
   22be8:	2b2f      	cmp	r3, #47	; 0x2f
   22bea:	d931      	bls.n	22c50 <m2m_wifi_connect_sc+0x100>
   22bec:	2396      	movs	r3, #150	; 0x96
   22bee:	18fb      	adds	r3, r7, r3
   22bf0:	781b      	ldrb	r3, [r3, #0]
   22bf2:	2290      	movs	r2, #144	; 0x90
   22bf4:	18ba      	adds	r2, r7, r2
   22bf6:	6812      	ldr	r2, [r2, #0]
   22bf8:	18d3      	adds	r3, r2, r3
   22bfa:	781b      	ldrb	r3, [r3, #0]
   22bfc:	2b39      	cmp	r3, #57	; 0x39
   22bfe:	d909      	bls.n	22c14 <m2m_wifi_connect_sc+0xc4>
   22c00:	2396      	movs	r3, #150	; 0x96
   22c02:	18fb      	adds	r3, r7, r3
   22c04:	781b      	ldrb	r3, [r3, #0]
   22c06:	2290      	movs	r2, #144	; 0x90
   22c08:	18ba      	adds	r2, r7, r2
   22c0a:	6812      	ldr	r2, [r2, #0]
   22c0c:	18d3      	adds	r3, r2, r3
   22c0e:	781b      	ldrb	r3, [r3, #0]
   22c10:	2b40      	cmp	r3, #64	; 0x40
   22c12:	d91d      	bls.n	22c50 <m2m_wifi_connect_sc+0x100>
   22c14:	2396      	movs	r3, #150	; 0x96
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	2290      	movs	r2, #144	; 0x90
   22c1c:	18ba      	adds	r2, r7, r2
   22c1e:	6812      	ldr	r2, [r2, #0]
   22c20:	18d3      	adds	r3, r2, r3
   22c22:	781b      	ldrb	r3, [r3, #0]
   22c24:	2b46      	cmp	r3, #70	; 0x46
   22c26:	d909      	bls.n	22c3c <m2m_wifi_connect_sc+0xec>
   22c28:	2396      	movs	r3, #150	; 0x96
   22c2a:	18fb      	adds	r3, r7, r3
   22c2c:	781b      	ldrb	r3, [r3, #0]
   22c2e:	2290      	movs	r2, #144	; 0x90
   22c30:	18ba      	adds	r2, r7, r2
   22c32:	6812      	ldr	r2, [r2, #0]
   22c34:	18d3      	adds	r3, r2, r3
   22c36:	781b      	ldrb	r3, [r3, #0]
   22c38:	2b60      	cmp	r3, #96	; 0x60
   22c3a:	d909      	bls.n	22c50 <m2m_wifi_connect_sc+0x100>
   22c3c:	2396      	movs	r3, #150	; 0x96
   22c3e:	18fb      	adds	r3, r7, r3
   22c40:	781b      	ldrb	r3, [r3, #0]
   22c42:	2290      	movs	r2, #144	; 0x90
   22c44:	18ba      	adds	r2, r7, r2
   22c46:	6812      	ldr	r2, [r2, #0]
   22c48:	18d3      	adds	r3, r2, r3
   22c4a:	781b      	ldrb	r3, [r3, #0]
   22c4c:	2b66      	cmp	r3, #102	; 0x66
   22c4e:	d912      	bls.n	22c76 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22c50:	4aad      	ldr	r2, [pc, #692]	; (22f08 <m2m_wifi_connect_sc+0x3b8>)
   22c52:	49a7      	ldr	r1, [pc, #668]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22c54:	4ba7      	ldr	r3, [pc, #668]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22c56:	0018      	movs	r0, r3
   22c58:	4ba7      	ldr	r3, [pc, #668]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22c5a:	4798      	blx	r3
   22c5c:	4bab      	ldr	r3, [pc, #684]	; (22f0c <m2m_wifi_connect_sc+0x3bc>)
   22c5e:	0018      	movs	r0, r3
   22c60:	4ba5      	ldr	r3, [pc, #660]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22c62:	4798      	blx	r3
   22c64:	4ba6      	ldr	r3, [pc, #664]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22c66:	0018      	movs	r0, r3
   22c68:	4ba3      	ldr	r3, [pc, #652]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22c6a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22c6c:	2397      	movs	r3, #151	; 0x97
   22c6e:	18fb      	adds	r3, r7, r3
   22c70:	22f4      	movs	r2, #244	; 0xf4
   22c72:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22c74:	e195      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22c76:	2396      	movs	r3, #150	; 0x96
   22c78:	18fb      	adds	r3, r7, r3
   22c7a:	781a      	ldrb	r2, [r3, #0]
   22c7c:	2396      	movs	r3, #150	; 0x96
   22c7e:	18fb      	adds	r3, r7, r3
   22c80:	3201      	adds	r2, #1
   22c82:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22c84:	2396      	movs	r3, #150	; 0x96
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	781b      	ldrb	r3, [r3, #0]
   22c8a:	2b3f      	cmp	r3, #63	; 0x3f
   22c8c:	d9a4      	bls.n	22bd8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22c8e:	230b      	movs	r3, #11
   22c90:	18fb      	adds	r3, r7, r3
   22c92:	781b      	ldrb	r3, [r3, #0]
   22c94:	2b00      	cmp	r3, #0
   22c96:	d004      	beq.n	22ca2 <m2m_wifi_connect_sc+0x152>
   22c98:	230b      	movs	r3, #11
   22c9a:	18fb      	adds	r3, r7, r3
   22c9c:	781b      	ldrb	r3, [r3, #0]
   22c9e:	2b20      	cmp	r3, #32
   22ca0:	d913      	bls.n	22cca <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22ca2:	238c      	movs	r3, #140	; 0x8c
   22ca4:	009a      	lsls	r2, r3, #2
   22ca6:	4992      	ldr	r1, [pc, #584]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22ca8:	4b92      	ldr	r3, [pc, #584]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22caa:	0018      	movs	r0, r3
   22cac:	4b92      	ldr	r3, [pc, #584]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22cae:	4798      	blx	r3
   22cb0:	4b97      	ldr	r3, [pc, #604]	; (22f10 <m2m_wifi_connect_sc+0x3c0>)
   22cb2:	0018      	movs	r0, r3
   22cb4:	4b90      	ldr	r3, [pc, #576]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22cb6:	4798      	blx	r3
   22cb8:	4b91      	ldr	r3, [pc, #580]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22cba:	0018      	movs	r0, r3
   22cbc:	4b8e      	ldr	r3, [pc, #568]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22cbe:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22cc0:	2397      	movs	r3, #151	; 0x97
   22cc2:	18fb      	adds	r3, r7, r3
   22cc4:	22f4      	movs	r2, #244	; 0xf4
   22cc6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22cc8:	e16b      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22cca:	23a8      	movs	r3, #168	; 0xa8
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	881b      	ldrh	r3, [r3, #0]
   22cd0:	2b00      	cmp	r3, #0
   22cd2:	d004      	beq.n	22cde <m2m_wifi_connect_sc+0x18e>
   22cd4:	23a8      	movs	r3, #168	; 0xa8
   22cd6:	18fb      	adds	r3, r7, r3
   22cd8:	881b      	ldrh	r3, [r3, #0]
   22cda:	2b0e      	cmp	r3, #14
   22cdc:	d917      	bls.n	22d0e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22cde:	23a8      	movs	r3, #168	; 0xa8
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	881b      	ldrh	r3, [r3, #0]
   22ce4:	2bff      	cmp	r3, #255	; 0xff
   22ce6:	d012      	beq.n	22d0e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22ce8:	4a8a      	ldr	r2, [pc, #552]	; (22f14 <m2m_wifi_connect_sc+0x3c4>)
   22cea:	4981      	ldr	r1, [pc, #516]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22cec:	4b81      	ldr	r3, [pc, #516]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22cee:	0018      	movs	r0, r3
   22cf0:	4b81      	ldr	r3, [pc, #516]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22cf2:	4798      	blx	r3
   22cf4:	4b88      	ldr	r3, [pc, #544]	; (22f18 <m2m_wifi_connect_sc+0x3c8>)
   22cf6:	0018      	movs	r0, r3
   22cf8:	4b7f      	ldr	r3, [pc, #508]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22cfa:	4798      	blx	r3
   22cfc:	4b80      	ldr	r3, [pc, #512]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22cfe:	0018      	movs	r0, r3
   22d00:	4b7d      	ldr	r3, [pc, #500]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22d02:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22d04:	2397      	movs	r3, #151	; 0x97
   22d06:	18fb      	adds	r3, r7, r3
   22d08:	22f4      	movs	r2, #244	; 0xf4
   22d0a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22d0c:	e149      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22d0e:	230b      	movs	r3, #11
   22d10:	18fb      	adds	r3, r7, r3
   22d12:	781a      	ldrb	r2, [r3, #0]
   22d14:	68f9      	ldr	r1, [r7, #12]
   22d16:	2314      	movs	r3, #20
   22d18:	18fb      	adds	r3, r7, r3
   22d1a:	3346      	adds	r3, #70	; 0x46
   22d1c:	0018      	movs	r0, r3
   22d1e:	4b7f      	ldr	r3, [pc, #508]	; (22f1c <m2m_wifi_connect_sc+0x3cc>)
   22d20:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22d22:	230b      	movs	r3, #11
   22d24:	18fb      	adds	r3, r7, r3
   22d26:	781b      	ldrb	r3, [r3, #0]
   22d28:	2214      	movs	r2, #20
   22d2a:	18ba      	adds	r2, r7, r2
   22d2c:	2146      	movs	r1, #70	; 0x46
   22d2e:	18d3      	adds	r3, r2, r3
   22d30:	185b      	adds	r3, r3, r1
   22d32:	2200      	movs	r2, #0
   22d34:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22d36:	2314      	movs	r3, #20
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	22a8      	movs	r2, #168	; 0xa8
   22d3c:	18ba      	adds	r2, r7, r2
   22d3e:	2144      	movs	r1, #68	; 0x44
   22d40:	8812      	ldrh	r2, [r2, #0]
   22d42:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22d44:	23ac      	movs	r3, #172	; 0xac
   22d46:	18fb      	adds	r3, r7, r3
   22d48:	781b      	ldrb	r3, [r3, #0]
   22d4a:	1e5a      	subs	r2, r3, #1
   22d4c:	4193      	sbcs	r3, r2
   22d4e:	b2db      	uxtb	r3, r3
   22d50:	0019      	movs	r1, r3
   22d52:	2314      	movs	r3, #20
   22d54:	18fb      	adds	r3, r7, r3
   22d56:	2267      	movs	r2, #103	; 0x67
   22d58:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22d5a:	2314      	movs	r3, #20
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	228c      	movs	r2, #140	; 0x8c
   22d60:	18ba      	adds	r2, r7, r2
   22d62:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22d64:	238c      	movs	r3, #140	; 0x8c
   22d66:	18fb      	adds	r3, r7, r3
   22d68:	681b      	ldr	r3, [r3, #0]
   22d6a:	220a      	movs	r2, #10
   22d6c:	18ba      	adds	r2, r7, r2
   22d6e:	2141      	movs	r1, #65	; 0x41
   22d70:	7812      	ldrb	r2, [r2, #0]
   22d72:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22d74:	230a      	movs	r3, #10
   22d76:	18fb      	adds	r3, r7, r3
   22d78:	781b      	ldrb	r3, [r3, #0]
   22d7a:	2b03      	cmp	r3, #3
   22d7c:	d000      	beq.n	22d80 <m2m_wifi_connect_sc+0x230>
   22d7e:	e07d      	b.n	22e7c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22d80:	687b      	ldr	r3, [r7, #4]
   22d82:	2288      	movs	r2, #136	; 0x88
   22d84:	18ba      	adds	r2, r7, r2
   22d86:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22d88:	238c      	movs	r3, #140	; 0x8c
   22d8a:	18fb      	adds	r3, r7, r3
   22d8c:	681b      	ldr	r3, [r3, #0]
   22d8e:	2284      	movs	r2, #132	; 0x84
   22d90:	18ba      	adds	r2, r7, r2
   22d92:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22d94:	2388      	movs	r3, #136	; 0x88
   22d96:	18fb      	adds	r3, r7, r3
   22d98:	681b      	ldr	r3, [r3, #0]
   22d9a:	781b      	ldrb	r3, [r3, #0]
   22d9c:	3b01      	subs	r3, #1
   22d9e:	b2da      	uxtb	r2, r3
   22da0:	2384      	movs	r3, #132	; 0x84
   22da2:	18fb      	adds	r3, r7, r3
   22da4:	681b      	ldr	r3, [r3, #0]
   22da6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22da8:	2384      	movs	r3, #132	; 0x84
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	681b      	ldr	r3, [r3, #0]
   22dae:	781b      	ldrb	r3, [r3, #0]
   22db0:	2b03      	cmp	r3, #3
   22db2:	d919      	bls.n	22de8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22db4:	2394      	movs	r3, #148	; 0x94
   22db6:	009a      	lsls	r2, r3, #2
   22db8:	494d      	ldr	r1, [pc, #308]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22dba:	4b4e      	ldr	r3, [pc, #312]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22dbc:	0018      	movs	r0, r3
   22dbe:	4b4e      	ldr	r3, [pc, #312]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22dc0:	4798      	blx	r3
   22dc2:	2384      	movs	r3, #132	; 0x84
   22dc4:	18fb      	adds	r3, r7, r3
   22dc6:	681b      	ldr	r3, [r3, #0]
   22dc8:	781b      	ldrb	r3, [r3, #0]
   22dca:	001a      	movs	r2, r3
   22dcc:	4b54      	ldr	r3, [pc, #336]	; (22f20 <m2m_wifi_connect_sc+0x3d0>)
   22dce:	0011      	movs	r1, r2
   22dd0:	0018      	movs	r0, r3
   22dd2:	4b49      	ldr	r3, [pc, #292]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22dd4:	4798      	blx	r3
   22dd6:	4b4a      	ldr	r3, [pc, #296]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22dd8:	0018      	movs	r0, r3
   22dda:	4b47      	ldr	r3, [pc, #284]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22ddc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22dde:	2397      	movs	r3, #151	; 0x97
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	22f4      	movs	r2, #244	; 0xf4
   22de4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22de6:	e0dc      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22de8:	2388      	movs	r3, #136	; 0x88
   22dea:	18fb      	adds	r3, r7, r3
   22dec:	681b      	ldr	r3, [r3, #0]
   22dee:	785b      	ldrb	r3, [r3, #1]
   22df0:	3b01      	subs	r3, #1
   22df2:	b2da      	uxtb	r2, r3
   22df4:	2384      	movs	r3, #132	; 0x84
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	681b      	ldr	r3, [r3, #0]
   22dfa:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22dfc:	2384      	movs	r3, #132	; 0x84
   22dfe:	18fb      	adds	r3, r7, r3
   22e00:	681b      	ldr	r3, [r3, #0]
   22e02:	785b      	ldrb	r3, [r3, #1]
   22e04:	2b0a      	cmp	r3, #10
   22e06:	d01e      	beq.n	22e46 <m2m_wifi_connect_sc+0x2f6>
   22e08:	2384      	movs	r3, #132	; 0x84
   22e0a:	18fb      	adds	r3, r7, r3
   22e0c:	681b      	ldr	r3, [r3, #0]
   22e0e:	785b      	ldrb	r3, [r3, #1]
   22e10:	2b1a      	cmp	r3, #26
   22e12:	d018      	beq.n	22e46 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22e14:	4a43      	ldr	r2, [pc, #268]	; (22f24 <m2m_wifi_connect_sc+0x3d4>)
   22e16:	4936      	ldr	r1, [pc, #216]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22e18:	4b36      	ldr	r3, [pc, #216]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22e1a:	0018      	movs	r0, r3
   22e1c:	4b36      	ldr	r3, [pc, #216]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22e1e:	4798      	blx	r3
   22e20:	2384      	movs	r3, #132	; 0x84
   22e22:	18fb      	adds	r3, r7, r3
   22e24:	681b      	ldr	r3, [r3, #0]
   22e26:	785b      	ldrb	r3, [r3, #1]
   22e28:	001a      	movs	r2, r3
   22e2a:	4b3f      	ldr	r3, [pc, #252]	; (22f28 <m2m_wifi_connect_sc+0x3d8>)
   22e2c:	0011      	movs	r1, r2
   22e2e:	0018      	movs	r0, r3
   22e30:	4b31      	ldr	r3, [pc, #196]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22e32:	4798      	blx	r3
   22e34:	4b32      	ldr	r3, [pc, #200]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22e36:	0018      	movs	r0, r3
   22e38:	4b2f      	ldr	r3, [pc, #188]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22e3a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e3c:	2397      	movs	r3, #151	; 0x97
   22e3e:	18fb      	adds	r3, r7, r3
   22e40:	22f4      	movs	r2, #244	; 0xf4
   22e42:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e44:	e0ad      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22e46:	2384      	movs	r3, #132	; 0x84
   22e48:	18fb      	adds	r3, r7, r3
   22e4a:	681b      	ldr	r3, [r3, #0]
   22e4c:	1c98      	adds	r0, r3, #2
   22e4e:	2388      	movs	r3, #136	; 0x88
   22e50:	18fb      	adds	r3, r7, r3
   22e52:	681b      	ldr	r3, [r3, #0]
   22e54:	1c99      	adds	r1, r3, #2
   22e56:	2388      	movs	r3, #136	; 0x88
   22e58:	18fb      	adds	r3, r7, r3
   22e5a:	681b      	ldr	r3, [r3, #0]
   22e5c:	785b      	ldrb	r3, [r3, #1]
   22e5e:	001a      	movs	r2, r3
   22e60:	4b2e      	ldr	r3, [pc, #184]	; (22f1c <m2m_wifi_connect_sc+0x3cc>)
   22e62:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22e64:	2388      	movs	r3, #136	; 0x88
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	681b      	ldr	r3, [r3, #0]
   22e6a:	785b      	ldrb	r3, [r3, #1]
   22e6c:	001a      	movs	r2, r3
   22e6e:	2384      	movs	r3, #132	; 0x84
   22e70:	18fb      	adds	r3, r7, r3
   22e72:	681b      	ldr	r3, [r3, #0]
   22e74:	189b      	adds	r3, r3, r2
   22e76:	2200      	movs	r2, #0
   22e78:	709a      	strb	r2, [r3, #2]
   22e7a:	e081      	b.n	22f80 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22e7c:	230a      	movs	r3, #10
   22e7e:	18fb      	adds	r3, r7, r3
   22e80:	781b      	ldrb	r3, [r3, #0]
   22e82:	2b02      	cmp	r3, #2
   22e84:	d156      	bne.n	22f34 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22e86:	2382      	movs	r3, #130	; 0x82
   22e88:	18fc      	adds	r4, r7, r3
   22e8a:	687b      	ldr	r3, [r7, #4]
   22e8c:	0018      	movs	r0, r3
   22e8e:	4b1d      	ldr	r3, [pc, #116]	; (22f04 <m2m_wifi_connect_sc+0x3b4>)
   22e90:	4798      	blx	r3
   22e92:	0003      	movs	r3, r0
   22e94:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22e96:	2382      	movs	r3, #130	; 0x82
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	881b      	ldrh	r3, [r3, #0]
   22e9c:	2b00      	cmp	r3, #0
   22e9e:	d004      	beq.n	22eaa <m2m_wifi_connect_sc+0x35a>
   22ea0:	2382      	movs	r3, #130	; 0x82
   22ea2:	18fb      	adds	r3, r7, r3
   22ea4:	881b      	ldrh	r3, [r3, #0]
   22ea6:	2b40      	cmp	r3, #64	; 0x40
   22ea8:	d912      	bls.n	22ed0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22eaa:	4a20      	ldr	r2, [pc, #128]	; (22f2c <m2m_wifi_connect_sc+0x3dc>)
   22eac:	4910      	ldr	r1, [pc, #64]	; (22ef0 <m2m_wifi_connect_sc+0x3a0>)
   22eae:	4b11      	ldr	r3, [pc, #68]	; (22ef4 <m2m_wifi_connect_sc+0x3a4>)
   22eb0:	0018      	movs	r0, r3
   22eb2:	4b11      	ldr	r3, [pc, #68]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22eb4:	4798      	blx	r3
   22eb6:	4b1e      	ldr	r3, [pc, #120]	; (22f30 <m2m_wifi_connect_sc+0x3e0>)
   22eb8:	0018      	movs	r0, r3
   22eba:	4b0f      	ldr	r3, [pc, #60]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22ebc:	4798      	blx	r3
   22ebe:	4b10      	ldr	r3, [pc, #64]	; (22f00 <m2m_wifi_connect_sc+0x3b0>)
   22ec0:	0018      	movs	r0, r3
   22ec2:	4b0d      	ldr	r3, [pc, #52]	; (22ef8 <m2m_wifi_connect_sc+0x3a8>)
   22ec4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22ec6:	2397      	movs	r3, #151	; 0x97
   22ec8:	18fb      	adds	r3, r7, r3
   22eca:	22f4      	movs	r2, #244	; 0xf4
   22ecc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22ece:	e068      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22ed0:	238c      	movs	r3, #140	; 0x8c
   22ed2:	18fb      	adds	r3, r7, r3
   22ed4:	6818      	ldr	r0, [r3, #0]
   22ed6:	2382      	movs	r3, #130	; 0x82
   22ed8:	18fb      	adds	r3, r7, r3
   22eda:	881b      	ldrh	r3, [r3, #0]
   22edc:	3301      	adds	r3, #1
   22ede:	001a      	movs	r2, r3
   22ee0:	687b      	ldr	r3, [r7, #4]
   22ee2:	0019      	movs	r1, r3
   22ee4:	4b0d      	ldr	r3, [pc, #52]	; (22f1c <m2m_wifi_connect_sc+0x3cc>)
   22ee6:	4798      	blx	r3
   22ee8:	e04a      	b.n	22f80 <m2m_wifi_connect_sc+0x430>
   22eea:	46c0      	nop			; (mov r8, r8)
   22eec:	0000021a 	.word	0x0000021a
   22ef0:	0003a51c 	.word	0x0003a51c
   22ef4:	0003a164 	.word	0x0003a164
   22ef8:	0001e9e9 	.word	0x0001e9e9
   22efc:	0003a3a4 	.word	0x0003a3a4
   22f00:	0003a160 	.word	0x0003a160
   22f04:	000217bf 	.word	0x000217bf
   22f08:	00000226 	.word	0x00000226
   22f0c:	0003a3b8 	.word	0x0003a3b8
   22f10:	0003a3c8 	.word	0x0003a3c8
   22f14:	00000239 	.word	0x00000239
   22f18:	0003a3dc 	.word	0x0003a3dc
   22f1c:	00021745 	.word	0x00021745
   22f20:	0003a3e8 	.word	0x0003a3e8
   22f24:	00000257 	.word	0x00000257
   22f28:	0003a404 	.word	0x0003a404
   22f2c:	00000266 	.word	0x00000266
   22f30:	0003a420 	.word	0x0003a420
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22f34:	230a      	movs	r3, #10
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	781b      	ldrb	r3, [r3, #0]
   22f3a:	2b04      	cmp	r3, #4
   22f3c:	d108      	bne.n	22f50 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22f3e:	238c      	movs	r3, #140	; 0x8c
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	681b      	ldr	r3, [r3, #0]
   22f44:	6879      	ldr	r1, [r7, #4]
   22f46:	223e      	movs	r2, #62	; 0x3e
   22f48:	0018      	movs	r0, r3
   22f4a:	4b1a      	ldr	r3, [pc, #104]	; (22fb4 <m2m_wifi_connect_sc+0x464>)
   22f4c:	4798      	blx	r3
   22f4e:	e017      	b.n	22f80 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22f50:	230a      	movs	r3, #10
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	781b      	ldrb	r3, [r3, #0]
   22f56:	2b01      	cmp	r3, #1
   22f58:	d012      	beq.n	22f80 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22f5a:	4a17      	ldr	r2, [pc, #92]	; (22fb8 <m2m_wifi_connect_sc+0x468>)
   22f5c:	4917      	ldr	r1, [pc, #92]	; (22fbc <m2m_wifi_connect_sc+0x46c>)
   22f5e:	4b18      	ldr	r3, [pc, #96]	; (22fc0 <m2m_wifi_connect_sc+0x470>)
   22f60:	0018      	movs	r0, r3
   22f62:	4b18      	ldr	r3, [pc, #96]	; (22fc4 <m2m_wifi_connect_sc+0x474>)
   22f64:	4798      	blx	r3
   22f66:	4b18      	ldr	r3, [pc, #96]	; (22fc8 <m2m_wifi_connect_sc+0x478>)
   22f68:	0018      	movs	r0, r3
   22f6a:	4b16      	ldr	r3, [pc, #88]	; (22fc4 <m2m_wifi_connect_sc+0x474>)
   22f6c:	4798      	blx	r3
   22f6e:	4b17      	ldr	r3, [pc, #92]	; (22fcc <m2m_wifi_connect_sc+0x47c>)
   22f70:	0018      	movs	r0, r3
   22f72:	4b14      	ldr	r3, [pc, #80]	; (22fc4 <m2m_wifi_connect_sc+0x474>)
   22f74:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22f76:	2397      	movs	r3, #151	; 0x97
   22f78:	18fb      	adds	r3, r7, r3
   22f7a:	22f4      	movs	r2, #244	; 0xf4
   22f7c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22f7e:	e010      	b.n	22fa2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22f80:	2397      	movs	r3, #151	; 0x97
   22f82:	18fc      	adds	r4, r7, r3
   22f84:	2314      	movs	r3, #20
   22f86:	18fa      	adds	r2, r7, r3
   22f88:	2300      	movs	r3, #0
   22f8a:	9302      	str	r3, [sp, #8]
   22f8c:	2300      	movs	r3, #0
   22f8e:	9301      	str	r3, [sp, #4]
   22f90:	2300      	movs	r3, #0
   22f92:	9300      	str	r3, [sp, #0]
   22f94:	236c      	movs	r3, #108	; 0x6c
   22f96:	2128      	movs	r1, #40	; 0x28
   22f98:	2001      	movs	r0, #1
   22f9a:	4d0d      	ldr	r5, [pc, #52]	; (22fd0 <m2m_wifi_connect_sc+0x480>)
   22f9c:	47a8      	blx	r5
   22f9e:	0003      	movs	r3, r0
   22fa0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   22fa2:	2397      	movs	r3, #151	; 0x97
   22fa4:	18fb      	adds	r3, r7, r3
   22fa6:	781b      	ldrb	r3, [r3, #0]
   22fa8:	b25b      	sxtb	r3, r3
}
   22faa:	0018      	movs	r0, r3
   22fac:	46bd      	mov	sp, r7
   22fae:	b026      	add	sp, #152	; 0x98
   22fb0:	bdb0      	pop	{r4, r5, r7, pc}
   22fb2:	46c0      	nop			; (mov r8, r8)
   22fb4:	00021745 	.word	0x00021745
   22fb8:	00000276 	.word	0x00000276
   22fbc:	0003a51c 	.word	0x0003a51c
   22fc0:	0003a164 	.word	0x0003a164
   22fc4:	0001e9e9 	.word	0x0001e9e9
   22fc8:	0003a43c 	.word	0x0003a43c
   22fcc:	0003a160 	.word	0x0003a160
   22fd0:	000219e1 	.word	0x000219e1

00022fd4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   22fd4:	b580      	push	{r7, lr}
   22fd6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   22fd8:	2300      	movs	r3, #0
}
   22fda:	0018      	movs	r0, r3
   22fdc:	46bd      	mov	sp, r7
   22fde:	bd80      	pop	{r7, pc}

00022fe0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22fe0:	b590      	push	{r4, r7, lr}
   22fe2:	b087      	sub	sp, #28
   22fe4:	af00      	add	r7, sp, #0
   22fe6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22fe8:	2317      	movs	r3, #23
   22fea:	18fb      	adds	r3, r7, r3
   22fec:	2200      	movs	r2, #0
   22fee:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22ff0:	687b      	ldr	r3, [r7, #4]
   22ff2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22ff4:	693b      	ldr	r3, [r7, #16]
   22ff6:	2280      	movs	r2, #128	; 0x80
   22ff8:	0052      	lsls	r2, r2, #1
   22ffa:	4313      	orrs	r3, r2
   22ffc:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   22ffe:	693a      	ldr	r2, [r7, #16]
   23000:	23a5      	movs	r3, #165	; 0xa5
   23002:	015b      	lsls	r3, r3, #5
   23004:	0011      	movs	r1, r2
   23006:	0018      	movs	r0, r3
   23008:	4b12      	ldr	r3, [pc, #72]	; (23054 <chip_apply_conf+0x74>)
   2300a:	4798      	blx	r3
		if(val32 != 0) {		
   2300c:	693b      	ldr	r3, [r7, #16]
   2300e:	2b00      	cmp	r3, #0
   23010:	d018      	beq.n	23044 <chip_apply_conf+0x64>
			uint32 reg = 0;
   23012:	2300      	movs	r3, #0
   23014:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   23016:	2317      	movs	r3, #23
   23018:	18fc      	adds	r4, r7, r3
   2301a:	230c      	movs	r3, #12
   2301c:	18fa      	adds	r2, r7, r3
   2301e:	23a5      	movs	r3, #165	; 0xa5
   23020:	015b      	lsls	r3, r3, #5
   23022:	0011      	movs	r1, r2
   23024:	0018      	movs	r0, r3
   23026:	4b0c      	ldr	r3, [pc, #48]	; (23058 <chip_apply_conf+0x78>)
   23028:	4798      	blx	r3
   2302a:	0003      	movs	r3, r0
   2302c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2302e:	2317      	movs	r3, #23
   23030:	18fb      	adds	r3, r7, r3
   23032:	781b      	ldrb	r3, [r3, #0]
   23034:	b25b      	sxtb	r3, r3
   23036:	2b00      	cmp	r3, #0
   23038:	d1e1      	bne.n	22ffe <chip_apply_conf+0x1e>
				if(reg == val32)
   2303a:	68fa      	ldr	r2, [r7, #12]
   2303c:	693b      	ldr	r3, [r7, #16]
   2303e:	429a      	cmp	r2, r3
   23040:	d002      	beq.n	23048 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   23042:	e7dc      	b.n	22ffe <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   23044:	46c0      	nop			; (mov r8, r8)
   23046:	e000      	b.n	2304a <chip_apply_conf+0x6a>
					break;
   23048:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2304a:	2300      	movs	r3, #0
}
   2304c:	0018      	movs	r0, r3
   2304e:	46bd      	mov	sp, r7
   23050:	b007      	add	sp, #28
   23052:	bd90      	pop	{r4, r7, pc}
   23054:	00023835 	.word	0x00023835
   23058:	00023811 	.word	0x00023811

0002305c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2305c:	b590      	push	{r4, r7, lr}
   2305e:	b083      	sub	sp, #12
   23060:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23062:	2300      	movs	r3, #0
   23064:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   23066:	1dfb      	adds	r3, r7, #7
   23068:	2200      	movs	r2, #0
   2306a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2306c:	1dfc      	adds	r4, r7, #7
   2306e:	003b      	movs	r3, r7
   23070:	4a24      	ldr	r2, [pc, #144]	; (23104 <enable_interrupts+0xa8>)
   23072:	0019      	movs	r1, r3
   23074:	0010      	movs	r0, r2
   23076:	4b24      	ldr	r3, [pc, #144]	; (23108 <enable_interrupts+0xac>)
   23078:	4798      	blx	r3
   2307a:	0003      	movs	r3, r0
   2307c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2307e:	1dfb      	adds	r3, r7, #7
   23080:	781b      	ldrb	r3, [r3, #0]
   23082:	b25b      	sxtb	r3, r3
   23084:	2b00      	cmp	r3, #0
   23086:	d131      	bne.n	230ec <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   23088:	683b      	ldr	r3, [r7, #0]
   2308a:	2280      	movs	r2, #128	; 0x80
   2308c:	0052      	lsls	r2, r2, #1
   2308e:	4313      	orrs	r3, r2
   23090:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23092:	683b      	ldr	r3, [r7, #0]
   23094:	1dfc      	adds	r4, r7, #7
   23096:	4a1b      	ldr	r2, [pc, #108]	; (23104 <enable_interrupts+0xa8>)
   23098:	0019      	movs	r1, r3
   2309a:	0010      	movs	r0, r2
   2309c:	4b1b      	ldr	r3, [pc, #108]	; (2310c <enable_interrupts+0xb0>)
   2309e:	4798      	blx	r3
   230a0:	0003      	movs	r3, r0
   230a2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   230a4:	1dfb      	adds	r3, r7, #7
   230a6:	781b      	ldrb	r3, [r3, #0]
   230a8:	b25b      	sxtb	r3, r3
   230aa:	2b00      	cmp	r3, #0
   230ac:	d120      	bne.n	230f0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   230ae:	1dfc      	adds	r4, r7, #7
   230b0:	003a      	movs	r2, r7
   230b2:	23d0      	movs	r3, #208	; 0xd0
   230b4:	015b      	lsls	r3, r3, #5
   230b6:	0011      	movs	r1, r2
   230b8:	0018      	movs	r0, r3
   230ba:	4b13      	ldr	r3, [pc, #76]	; (23108 <enable_interrupts+0xac>)
   230bc:	4798      	blx	r3
   230be:	0003      	movs	r3, r0
   230c0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   230c2:	1dfb      	adds	r3, r7, #7
   230c4:	781b      	ldrb	r3, [r3, #0]
   230c6:	b25b      	sxtb	r3, r3
   230c8:	2b00      	cmp	r3, #0
   230ca:	d113      	bne.n	230f4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   230cc:	683b      	ldr	r3, [r7, #0]
   230ce:	2280      	movs	r2, #128	; 0x80
   230d0:	0252      	lsls	r2, r2, #9
   230d2:	4313      	orrs	r3, r2
   230d4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   230d6:	683a      	ldr	r2, [r7, #0]
   230d8:	1dfc      	adds	r4, r7, #7
   230da:	23d0      	movs	r3, #208	; 0xd0
   230dc:	015b      	lsls	r3, r3, #5
   230de:	0011      	movs	r1, r2
   230e0:	0018      	movs	r0, r3
   230e2:	4b0a      	ldr	r3, [pc, #40]	; (2310c <enable_interrupts+0xb0>)
   230e4:	4798      	blx	r3
   230e6:	0003      	movs	r3, r0
   230e8:	7023      	strb	r3, [r4, #0]
   230ea:	e004      	b.n	230f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230ec:	46c0      	nop			; (mov r8, r8)
   230ee:	e002      	b.n	230f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230f0:	46c0      	nop			; (mov r8, r8)
   230f2:	e000      	b.n	230f6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   230f4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   230f6:	1dfb      	adds	r3, r7, #7
   230f8:	781b      	ldrb	r3, [r3, #0]
   230fa:	b25b      	sxtb	r3, r3
}
   230fc:	0018      	movs	r0, r3
   230fe:	46bd      	mov	sp, r7
   23100:	b003      	add	sp, #12
   23102:	bd90      	pop	{r4, r7, pc}
   23104:	00001408 	.word	0x00001408
   23108:	00023811 	.word	0x00023811
   2310c:	00023835 	.word	0x00023835

00023110 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   23110:	b580      	push	{r7, lr}
   23112:	b082      	sub	sp, #8
   23114:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   23116:	4b32      	ldr	r3, [pc, #200]	; (231e0 <nmi_get_chipid+0xd0>)
   23118:	681b      	ldr	r3, [r3, #0]
   2311a:	2b00      	cmp	r3, #0
   2311c:	d159      	bne.n	231d2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2311e:	4a30      	ldr	r2, [pc, #192]	; (231e0 <nmi_get_chipid+0xd0>)
   23120:	2380      	movs	r3, #128	; 0x80
   23122:	015b      	lsls	r3, r3, #5
   23124:	0011      	movs	r1, r2
   23126:	0018      	movs	r0, r3
   23128:	4b2e      	ldr	r3, [pc, #184]	; (231e4 <nmi_get_chipid+0xd4>)
   2312a:	4798      	blx	r3
   2312c:	1e03      	subs	r3, r0, #0
   2312e:	d004      	beq.n	2313a <nmi_get_chipid+0x2a>
			chipid = 0;
   23130:	4b2b      	ldr	r3, [pc, #172]	; (231e0 <nmi_get_chipid+0xd0>)
   23132:	2200      	movs	r2, #0
   23134:	601a      	str	r2, [r3, #0]
			return 0;
   23136:	2300      	movs	r3, #0
   23138:	e04d      	b.n	231d6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2313a:	1d3b      	adds	r3, r7, #4
   2313c:	4a2a      	ldr	r2, [pc, #168]	; (231e8 <nmi_get_chipid+0xd8>)
   2313e:	0019      	movs	r1, r3
   23140:	0010      	movs	r0, r2
   23142:	4b28      	ldr	r3, [pc, #160]	; (231e4 <nmi_get_chipid+0xd4>)
   23144:	4798      	blx	r3
   23146:	1e03      	subs	r3, r0, #0
   23148:	d004      	beq.n	23154 <nmi_get_chipid+0x44>
			chipid = 0;
   2314a:	4b25      	ldr	r3, [pc, #148]	; (231e0 <nmi_get_chipid+0xd0>)
   2314c:	2200      	movs	r2, #0
   2314e:	601a      	str	r2, [r3, #0]
			return 0;
   23150:	2300      	movs	r3, #0
   23152:	e040      	b.n	231d6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   23154:	4b22      	ldr	r3, [pc, #136]	; (231e0 <nmi_get_chipid+0xd0>)
   23156:	681b      	ldr	r3, [r3, #0]
   23158:	4a24      	ldr	r2, [pc, #144]	; (231ec <nmi_get_chipid+0xdc>)
   2315a:	4293      	cmp	r3, r2
   2315c:	d106      	bne.n	2316c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2315e:	687b      	ldr	r3, [r7, #4]
   23160:	2b01      	cmp	r3, #1
   23162:	d029      	beq.n	231b8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23164:	4b1e      	ldr	r3, [pc, #120]	; (231e0 <nmi_get_chipid+0xd0>)
   23166:	4a22      	ldr	r2, [pc, #136]	; (231f0 <nmi_get_chipid+0xe0>)
   23168:	601a      	str	r2, [r3, #0]
   2316a:	e025      	b.n	231b8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2316c:	4b1c      	ldr	r3, [pc, #112]	; (231e0 <nmi_get_chipid+0xd0>)
   2316e:	681b      	ldr	r3, [r3, #0]
   23170:	4a20      	ldr	r2, [pc, #128]	; (231f4 <nmi_get_chipid+0xe4>)
   23172:	4293      	cmp	r3, r2
   23174:	d10d      	bne.n	23192 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   23176:	687b      	ldr	r3, [r7, #4]
   23178:	2b03      	cmp	r3, #3
   2317a:	d01d      	beq.n	231b8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2317c:	687b      	ldr	r3, [r7, #4]
   2317e:	2b04      	cmp	r3, #4
   23180:	d103      	bne.n	2318a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   23182:	4b17      	ldr	r3, [pc, #92]	; (231e0 <nmi_get_chipid+0xd0>)
   23184:	4a1c      	ldr	r2, [pc, #112]	; (231f8 <nmi_get_chipid+0xe8>)
   23186:	601a      	str	r2, [r3, #0]
   23188:	e016      	b.n	231b8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2318a:	4b15      	ldr	r3, [pc, #84]	; (231e0 <nmi_get_chipid+0xd0>)
   2318c:	4a1b      	ldr	r2, [pc, #108]	; (231fc <nmi_get_chipid+0xec>)
   2318e:	601a      	str	r2, [r3, #0]
   23190:	e012      	b.n	231b8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23192:	4b13      	ldr	r3, [pc, #76]	; (231e0 <nmi_get_chipid+0xd0>)
   23194:	681b      	ldr	r3, [r3, #0]
   23196:	4a1a      	ldr	r2, [pc, #104]	; (23200 <nmi_get_chipid+0xf0>)
   23198:	4293      	cmp	r3, r2
   2319a:	d10d      	bne.n	231b8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2319c:	4a10      	ldr	r2, [pc, #64]	; (231e0 <nmi_get_chipid+0xd0>)
   2319e:	23ec      	movs	r3, #236	; 0xec
   231a0:	039b      	lsls	r3, r3, #14
   231a2:	0011      	movs	r1, r2
   231a4:	0018      	movs	r0, r3
   231a6:	4b0f      	ldr	r3, [pc, #60]	; (231e4 <nmi_get_chipid+0xd4>)
   231a8:	4798      	blx	r3
   231aa:	1e03      	subs	r3, r0, #0
   231ac:	d004      	beq.n	231b8 <nmi_get_chipid+0xa8>
			chipid = 0;
   231ae:	4b0c      	ldr	r3, [pc, #48]	; (231e0 <nmi_get_chipid+0xd0>)
   231b0:	2200      	movs	r2, #0
   231b2:	601a      	str	r2, [r3, #0]
			return 0;
   231b4:	2300      	movs	r3, #0
   231b6:	e00e      	b.n	231d6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   231b8:	4b09      	ldr	r3, [pc, #36]	; (231e0 <nmi_get_chipid+0xd0>)
   231ba:	681b      	ldr	r3, [r3, #0]
   231bc:	4a11      	ldr	r2, [pc, #68]	; (23204 <nmi_get_chipid+0xf4>)
   231be:	401a      	ands	r2, r3
   231c0:	4b07      	ldr	r3, [pc, #28]	; (231e0 <nmi_get_chipid+0xd0>)
   231c2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   231c4:	4b06      	ldr	r3, [pc, #24]	; (231e0 <nmi_get_chipid+0xd0>)
   231c6:	681b      	ldr	r3, [r3, #0]
   231c8:	22a0      	movs	r2, #160	; 0xa0
   231ca:	02d2      	lsls	r2, r2, #11
   231cc:	431a      	orrs	r2, r3
   231ce:	4b04      	ldr	r3, [pc, #16]	; (231e0 <nmi_get_chipid+0xd0>)
   231d0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   231d2:	4b03      	ldr	r3, [pc, #12]	; (231e0 <nmi_get_chipid+0xd0>)
   231d4:	681b      	ldr	r3, [r3, #0]
}
   231d6:	0018      	movs	r0, r3
   231d8:	46bd      	mov	sp, r7
   231da:	b002      	add	sp, #8
   231dc:	bd80      	pop	{r7, pc}
   231de:	46c0      	nop			; (mov r8, r8)
   231e0:	200042a4 	.word	0x200042a4
   231e4:	00023811 	.word	0x00023811
   231e8:	000013f4 	.word	0x000013f4
   231ec:	001002a0 	.word	0x001002a0
   231f0:	001002a1 	.word	0x001002a1
   231f4:	001002b0 	.word	0x001002b0
   231f8:	001002b1 	.word	0x001002b1
   231fc:	001002b2 	.word	0x001002b2
   23200:	001000f0 	.word	0x001000f0
   23204:	fff0ffff 	.word	0xfff0ffff

00023208 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   23208:	b590      	push	{r4, r7, lr}
   2320a:	b083      	sub	sp, #12
   2320c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2320e:	1dfb      	adds	r3, r7, #7
   23210:	2200      	movs	r2, #0
   23212:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23214:	1dfc      	adds	r4, r7, #7
   23216:	003b      	movs	r3, r7
   23218:	0019      	movs	r1, r3
   2321a:	2010      	movs	r0, #16
   2321c:	4b2e      	ldr	r3, [pc, #184]	; (232d8 <chip_sleep+0xd0>)
   2321e:	4798      	blx	r3
   23220:	0003      	movs	r3, r0
   23222:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   23224:	1dfb      	adds	r3, r7, #7
   23226:	781b      	ldrb	r3, [r3, #0]
   23228:	b25b      	sxtb	r3, r3
   2322a:	2b00      	cmp	r3, #0
   2322c:	d145      	bne.n	232ba <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2322e:	683b      	ldr	r3, [r7, #0]
   23230:	2201      	movs	r2, #1
   23232:	4013      	ands	r3, r2
   23234:	d000      	beq.n	23238 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23236:	e7ed      	b.n	23214 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   23238:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2323a:	1dfc      	adds	r4, r7, #7
   2323c:	003b      	movs	r3, r7
   2323e:	0019      	movs	r1, r3
   23240:	2001      	movs	r0, #1
   23242:	4b25      	ldr	r3, [pc, #148]	; (232d8 <chip_sleep+0xd0>)
   23244:	4798      	blx	r3
   23246:	0003      	movs	r3, r0
   23248:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2324a:	1dfb      	adds	r3, r7, #7
   2324c:	781b      	ldrb	r3, [r3, #0]
   2324e:	b25b      	sxtb	r3, r3
   23250:	2b00      	cmp	r3, #0
   23252:	d134      	bne.n	232be <chip_sleep+0xb6>
	if(reg & NBIT1)
   23254:	683b      	ldr	r3, [r7, #0]
   23256:	2202      	movs	r2, #2
   23258:	4013      	ands	r3, r2
   2325a:	d010      	beq.n	2327e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2325c:	683b      	ldr	r3, [r7, #0]
   2325e:	2202      	movs	r2, #2
   23260:	4393      	bics	r3, r2
   23262:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23264:	683b      	ldr	r3, [r7, #0]
   23266:	1dfc      	adds	r4, r7, #7
   23268:	0019      	movs	r1, r3
   2326a:	2001      	movs	r0, #1
   2326c:	4b1b      	ldr	r3, [pc, #108]	; (232dc <chip_sleep+0xd4>)
   2326e:	4798      	blx	r3
   23270:	0003      	movs	r3, r0
   23272:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23274:	1dfb      	adds	r3, r7, #7
   23276:	781b      	ldrb	r3, [r3, #0]
   23278:	b25b      	sxtb	r3, r3
   2327a:	2b00      	cmp	r3, #0
   2327c:	d121      	bne.n	232c2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2327e:	1dfc      	adds	r4, r7, #7
   23280:	003b      	movs	r3, r7
   23282:	0019      	movs	r1, r3
   23284:	200b      	movs	r0, #11
   23286:	4b14      	ldr	r3, [pc, #80]	; (232d8 <chip_sleep+0xd0>)
   23288:	4798      	blx	r3
   2328a:	0003      	movs	r3, r0
   2328c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2328e:	1dfb      	adds	r3, r7, #7
   23290:	781b      	ldrb	r3, [r3, #0]
   23292:	b25b      	sxtb	r3, r3
   23294:	2b00      	cmp	r3, #0
   23296:	d116      	bne.n	232c6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   23298:	683b      	ldr	r3, [r7, #0]
   2329a:	2201      	movs	r2, #1
   2329c:	4013      	ands	r3, r2
   2329e:	d013      	beq.n	232c8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   232a0:	683b      	ldr	r3, [r7, #0]
   232a2:	2201      	movs	r2, #1
   232a4:	4393      	bics	r3, r2
   232a6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   232a8:	683b      	ldr	r3, [r7, #0]
   232aa:	1dfc      	adds	r4, r7, #7
   232ac:	0019      	movs	r1, r3
   232ae:	200b      	movs	r0, #11
   232b0:	4b0a      	ldr	r3, [pc, #40]	; (232dc <chip_sleep+0xd4>)
   232b2:	4798      	blx	r3
   232b4:	0003      	movs	r3, r0
   232b6:	7023      	strb	r3, [r4, #0]
   232b8:	e006      	b.n	232c8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   232ba:	46c0      	nop			; (mov r8, r8)
   232bc:	e004      	b.n	232c8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   232be:	46c0      	nop			; (mov r8, r8)
   232c0:	e002      	b.n	232c8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   232c2:	46c0      	nop			; (mov r8, r8)
   232c4:	e000      	b.n	232c8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   232c6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   232c8:	1dfb      	adds	r3, r7, #7
   232ca:	781b      	ldrb	r3, [r3, #0]
   232cc:	b25b      	sxtb	r3, r3
}
   232ce:	0018      	movs	r0, r3
   232d0:	46bd      	mov	sp, r7
   232d2:	b003      	add	sp, #12
   232d4:	bd90      	pop	{r4, r7, pc}
   232d6:	46c0      	nop			; (mov r8, r8)
   232d8:	00023811 	.word	0x00023811
   232dc:	00023835 	.word	0x00023835

000232e0 <chip_wake>:
sint8 chip_wake(void)
{
   232e0:	b590      	push	{r4, r7, lr}
   232e2:	b085      	sub	sp, #20
   232e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   232e6:	230f      	movs	r3, #15
   232e8:	18fb      	adds	r3, r7, r3
   232ea:	2200      	movs	r2, #0
   232ec:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   232ee:	2300      	movs	r3, #0
   232f0:	607b      	str	r3, [r7, #4]
   232f2:	2300      	movs	r3, #0
   232f4:	603b      	str	r3, [r7, #0]
   232f6:	2300      	movs	r3, #0
   232f8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   232fa:	230f      	movs	r3, #15
   232fc:	18fc      	adds	r4, r7, r3
   232fe:	1d3b      	adds	r3, r7, #4
   23300:	0019      	movs	r1, r3
   23302:	200b      	movs	r0, #11
   23304:	4b4e      	ldr	r3, [pc, #312]	; (23440 <chip_wake+0x160>)
   23306:	4798      	blx	r3
   23308:	0003      	movs	r3, r0
   2330a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2330c:	230f      	movs	r3, #15
   2330e:	18fb      	adds	r3, r7, r3
   23310:	781b      	ldrb	r3, [r3, #0]
   23312:	b25b      	sxtb	r3, r3
   23314:	2b00      	cmp	r3, #0
   23316:	d000      	beq.n	2331a <chip_wake+0x3a>
   23318:	e082      	b.n	23420 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2331a:	687b      	ldr	r3, [r7, #4]
   2331c:	2201      	movs	r2, #1
   2331e:	4013      	ands	r3, r2
   23320:	d111      	bne.n	23346 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   23322:	687b      	ldr	r3, [r7, #4]
   23324:	2201      	movs	r2, #1
   23326:	4313      	orrs	r3, r2
   23328:	220f      	movs	r2, #15
   2332a:	18bc      	adds	r4, r7, r2
   2332c:	0019      	movs	r1, r3
   2332e:	200b      	movs	r0, #11
   23330:	4b44      	ldr	r3, [pc, #272]	; (23444 <chip_wake+0x164>)
   23332:	4798      	blx	r3
   23334:	0003      	movs	r3, r0
   23336:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23338:	230f      	movs	r3, #15
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	781b      	ldrb	r3, [r3, #0]
   2333e:	b25b      	sxtb	r3, r3
   23340:	2b00      	cmp	r3, #0
   23342:	d000      	beq.n	23346 <chip_wake+0x66>
   23344:	e06e      	b.n	23424 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   23346:	230f      	movs	r3, #15
   23348:	18fc      	adds	r4, r7, r3
   2334a:	1d3b      	adds	r3, r7, #4
   2334c:	0019      	movs	r1, r3
   2334e:	2001      	movs	r0, #1
   23350:	4b3b      	ldr	r3, [pc, #236]	; (23440 <chip_wake+0x160>)
   23352:	4798      	blx	r3
   23354:	0003      	movs	r3, r0
   23356:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23358:	230f      	movs	r3, #15
   2335a:	18fb      	adds	r3, r7, r3
   2335c:	781b      	ldrb	r3, [r3, #0]
   2335e:	b25b      	sxtb	r3, r3
   23360:	2b00      	cmp	r3, #0
   23362:	d161      	bne.n	23428 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23364:	687b      	ldr	r3, [r7, #4]
   23366:	2202      	movs	r2, #2
   23368:	4013      	ands	r3, r2
   2336a:	d110      	bne.n	2338e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2336c:	687b      	ldr	r3, [r7, #4]
   2336e:	2202      	movs	r2, #2
   23370:	4313      	orrs	r3, r2
   23372:	220f      	movs	r2, #15
   23374:	18bc      	adds	r4, r7, r2
   23376:	0019      	movs	r1, r3
   23378:	2001      	movs	r0, #1
   2337a:	4b32      	ldr	r3, [pc, #200]	; (23444 <chip_wake+0x164>)
   2337c:	4798      	blx	r3
   2337e:	0003      	movs	r3, r0
   23380:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23382:	230f      	movs	r3, #15
   23384:	18fb      	adds	r3, r7, r3
   23386:	781b      	ldrb	r3, [r3, #0]
   23388:	b25b      	sxtb	r3, r3
   2338a:	2b00      	cmp	r3, #0
   2338c:	d14e      	bne.n	2342c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2338e:	230f      	movs	r3, #15
   23390:	18fc      	adds	r4, r7, r3
   23392:	003b      	movs	r3, r7
   23394:	0019      	movs	r1, r3
   23396:	200f      	movs	r0, #15
   23398:	4b29      	ldr	r3, [pc, #164]	; (23440 <chip_wake+0x160>)
   2339a:	4798      	blx	r3
   2339c:	0003      	movs	r3, r0
   2339e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   233a0:	230f      	movs	r3, #15
   233a2:	18fb      	adds	r3, r7, r3
   233a4:	781b      	ldrb	r3, [r3, #0]
   233a6:	b25b      	sxtb	r3, r3
   233a8:	2b00      	cmp	r3, #0
   233aa:	d014      	beq.n	233d6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   233ac:	23a8      	movs	r3, #168	; 0xa8
   233ae:	005a      	lsls	r2, r3, #1
   233b0:	4925      	ldr	r1, [pc, #148]	; (23448 <chip_wake+0x168>)
   233b2:	4b26      	ldr	r3, [pc, #152]	; (2344c <chip_wake+0x16c>)
   233b4:	0018      	movs	r0, r3
   233b6:	4b26      	ldr	r3, [pc, #152]	; (23450 <chip_wake+0x170>)
   233b8:	4798      	blx	r3
   233ba:	230f      	movs	r3, #15
   233bc:	18fb      	adds	r3, r7, r3
   233be:	2100      	movs	r1, #0
   233c0:	5659      	ldrsb	r1, [r3, r1]
   233c2:	683a      	ldr	r2, [r7, #0]
   233c4:	4b23      	ldr	r3, [pc, #140]	; (23454 <chip_wake+0x174>)
   233c6:	0018      	movs	r0, r3
   233c8:	4b21      	ldr	r3, [pc, #132]	; (23450 <chip_wake+0x170>)
   233ca:	4798      	blx	r3
   233cc:	4b22      	ldr	r3, [pc, #136]	; (23458 <chip_wake+0x178>)
   233ce:	0018      	movs	r0, r3
   233d0:	4b1f      	ldr	r3, [pc, #124]	; (23450 <chip_wake+0x170>)
   233d2:	4798      	blx	r3
			goto _WAKE_EXIT;
   233d4:	e02b      	b.n	2342e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   233d6:	683b      	ldr	r3, [r7, #0]
   233d8:	2204      	movs	r2, #4
   233da:	4013      	ands	r3, r2
   233dc:	d11c      	bne.n	23418 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   233de:	2002      	movs	r0, #2
   233e0:	4b1e      	ldr	r3, [pc, #120]	; (2345c <chip_wake+0x17c>)
   233e2:	4798      	blx	r3
		trials++;
   233e4:	68bb      	ldr	r3, [r7, #8]
   233e6:	3301      	adds	r3, #1
   233e8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   233ea:	68bb      	ldr	r3, [r7, #8]
   233ec:	2b04      	cmp	r3, #4
   233ee:	d9ce      	bls.n	2338e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   233f0:	23ad      	movs	r3, #173	; 0xad
   233f2:	005a      	lsls	r2, r3, #1
   233f4:	4914      	ldr	r1, [pc, #80]	; (23448 <chip_wake+0x168>)
   233f6:	4b15      	ldr	r3, [pc, #84]	; (2344c <chip_wake+0x16c>)
   233f8:	0018      	movs	r0, r3
   233fa:	4b15      	ldr	r3, [pc, #84]	; (23450 <chip_wake+0x170>)
   233fc:	4798      	blx	r3
   233fe:	4b18      	ldr	r3, [pc, #96]	; (23460 <chip_wake+0x180>)
   23400:	0018      	movs	r0, r3
   23402:	4b13      	ldr	r3, [pc, #76]	; (23450 <chip_wake+0x170>)
   23404:	4798      	blx	r3
   23406:	4b14      	ldr	r3, [pc, #80]	; (23458 <chip_wake+0x178>)
   23408:	0018      	movs	r0, r3
   2340a:	4b11      	ldr	r3, [pc, #68]	; (23450 <chip_wake+0x170>)
   2340c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2340e:	230f      	movs	r3, #15
   23410:	18fb      	adds	r3, r7, r3
   23412:	22fc      	movs	r2, #252	; 0xfc
   23414:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   23416:	e00a      	b.n	2342e <chip_wake+0x14e>
			break;
   23418:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2341a:	4b12      	ldr	r3, [pc, #72]	; (23464 <chip_wake+0x184>)
   2341c:	4798      	blx	r3
   2341e:	e006      	b.n	2342e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23420:	46c0      	nop			; (mov r8, r8)
   23422:	e004      	b.n	2342e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23424:	46c0      	nop			; (mov r8, r8)
   23426:	e002      	b.n	2342e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23428:	46c0      	nop			; (mov r8, r8)
   2342a:	e000      	b.n	2342e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2342c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2342e:	230f      	movs	r3, #15
   23430:	18fb      	adds	r3, r7, r3
   23432:	781b      	ldrb	r3, [r3, #0]
   23434:	b25b      	sxtb	r3, r3
}
   23436:	0018      	movs	r0, r3
   23438:	46bd      	mov	sp, r7
   2343a:	b005      	add	sp, #20
   2343c:	bd90      	pop	{r4, r7, pc}
   2343e:	46c0      	nop			; (mov r8, r8)
   23440:	00023811 	.word	0x00023811
   23444:	00023835 	.word	0x00023835
   23448:	0003a5bc 	.word	0x0003a5bc
   2344c:	0003a530 	.word	0x0003a530
   23450:	0001e9e9 	.word	0x0001e9e9
   23454:	0003a544 	.word	0x0003a544
   23458:	0003a55c 	.word	0x0003a55c
   2345c:	00020ea1 	.word	0x00020ea1
   23460:	0003a560 	.word	0x0003a560
   23464:	000237d1 	.word	0x000237d1

00023468 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   23468:	b580      	push	{r7, lr}
   2346a:	b088      	sub	sp, #32
   2346c:	af00      	add	r7, sp, #0
   2346e:	0002      	movs	r2, r0
   23470:	1dfb      	adds	r3, r7, #7
   23472:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23474:	2313      	movs	r3, #19
   23476:	18fb      	adds	r3, r7, r3
   23478:	2200      	movs	r2, #0
   2347a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2347c:	2300      	movs	r3, #0
   2347e:	61fb      	str	r3, [r7, #28]
   23480:	2300      	movs	r3, #0
   23482:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23484:	2300      	movs	r3, #0
   23486:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   23488:	4b4a      	ldr	r3, [pc, #296]	; (235b4 <wait_for_bootrom+0x14c>)
   2348a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2348c:	2300      	movs	r3, #0
   2348e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23490:	4b49      	ldr	r3, [pc, #292]	; (235b8 <wait_for_bootrom+0x150>)
   23492:	0018      	movs	r0, r3
   23494:	4b49      	ldr	r3, [pc, #292]	; (235bc <wait_for_bootrom+0x154>)
   23496:	4798      	blx	r3
   23498:	0003      	movs	r3, r0
   2349a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2349c:	69fb      	ldr	r3, [r7, #28]
   2349e:	2b00      	cmp	r3, #0
   234a0:	db03      	blt.n	234aa <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   234a2:	2001      	movs	r0, #1
   234a4:	4b46      	ldr	r3, [pc, #280]	; (235c0 <wait_for_bootrom+0x158>)
   234a6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   234a8:	e7f2      	b.n	23490 <wait_for_bootrom+0x28>
			break;
   234aa:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   234ac:	4b45      	ldr	r3, [pc, #276]	; (235c4 <wait_for_bootrom+0x15c>)
   234ae:	0018      	movs	r0, r3
   234b0:	4b42      	ldr	r3, [pc, #264]	; (235bc <wait_for_bootrom+0x154>)
   234b2:	4798      	blx	r3
   234b4:	0003      	movs	r3, r0
   234b6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   234b8:	69fb      	ldr	r3, [r7, #28]
   234ba:	2201      	movs	r2, #1
   234bc:	4013      	ands	r3, r2
   234be:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   234c0:	69fb      	ldr	r3, [r7, #28]
   234c2:	2b00      	cmp	r3, #0
   234c4:	d112      	bne.n	234ec <wait_for_bootrom+0x84>
	{
		reg = 0;
   234c6:	2300      	movs	r3, #0
   234c8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   234ca:	e00b      	b.n	234e4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   234cc:	2001      	movs	r0, #1
   234ce:	4b3c      	ldr	r3, [pc, #240]	; (235c0 <wait_for_bootrom+0x158>)
   234d0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   234d2:	4b3d      	ldr	r3, [pc, #244]	; (235c8 <wait_for_bootrom+0x160>)
   234d4:	0018      	movs	r0, r3
   234d6:	4b39      	ldr	r3, [pc, #228]	; (235bc <wait_for_bootrom+0x154>)
   234d8:	4798      	blx	r3
   234da:	0003      	movs	r3, r0
   234dc:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   234de:	69bb      	ldr	r3, [r7, #24]
   234e0:	3301      	adds	r3, #1
   234e2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   234e4:	69fb      	ldr	r3, [r7, #28]
   234e6:	4a39      	ldr	r2, [pc, #228]	; (235cc <wait_for_bootrom+0x164>)
   234e8:	4293      	cmp	r3, r2
   234ea:	d1ef      	bne.n	234cc <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   234ec:	1dfb      	adds	r3, r7, #7
   234ee:	781b      	ldrb	r3, [r3, #0]
   234f0:	2b02      	cmp	r3, #2
   234f2:	d10d      	bne.n	23510 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   234f4:	4a36      	ldr	r2, [pc, #216]	; (235d0 <wait_for_bootrom+0x168>)
   234f6:	4b37      	ldr	r3, [pc, #220]	; (235d4 <wait_for_bootrom+0x16c>)
   234f8:	0011      	movs	r1, r2
   234fa:	0018      	movs	r0, r3
   234fc:	4b36      	ldr	r3, [pc, #216]	; (235d8 <wait_for_bootrom+0x170>)
   234fe:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23500:	2380      	movs	r3, #128	; 0x80
   23502:	035b      	lsls	r3, r3, #13
   23504:	4a35      	ldr	r2, [pc, #212]	; (235dc <wait_for_bootrom+0x174>)
   23506:	0019      	movs	r1, r3
   23508:	0010      	movs	r0, r2
   2350a:	4b33      	ldr	r3, [pc, #204]	; (235d8 <wait_for_bootrom+0x170>)
   2350c:	4798      	blx	r3
   2350e:	e022      	b.n	23556 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   23510:	1dfb      	adds	r3, r7, #7
   23512:	781b      	ldrb	r3, [r3, #0]
   23514:	2b03      	cmp	r3, #3
   23516:	d10b      	bne.n	23530 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23518:	4a2d      	ldr	r2, [pc, #180]	; (235d0 <wait_for_bootrom+0x168>)
   2351a:	4b2e      	ldr	r3, [pc, #184]	; (235d4 <wait_for_bootrom+0x16c>)
   2351c:	0011      	movs	r1, r2
   2351e:	0018      	movs	r0, r3
   23520:	4b2d      	ldr	r3, [pc, #180]	; (235d8 <wait_for_bootrom+0x170>)
   23522:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23524:	4b2d      	ldr	r3, [pc, #180]	; (235dc <wait_for_bootrom+0x174>)
   23526:	2100      	movs	r1, #0
   23528:	0018      	movs	r0, r3
   2352a:	4b2b      	ldr	r3, [pc, #172]	; (235d8 <wait_for_bootrom+0x170>)
   2352c:	4798      	blx	r3
   2352e:	e012      	b.n	23556 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   23530:	1dfb      	adds	r3, r7, #7
   23532:	781b      	ldrb	r3, [r3, #0]
   23534:	2b04      	cmp	r3, #4
   23536:	d108      	bne.n	2354a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   23538:	2380      	movs	r3, #128	; 0x80
   2353a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2353c:	68fb      	ldr	r3, [r7, #12]
   2353e:	4a27      	ldr	r2, [pc, #156]	; (235dc <wait_for_bootrom+0x174>)
   23540:	0019      	movs	r1, r3
   23542:	0010      	movs	r0, r2
   23544:	4b24      	ldr	r3, [pc, #144]	; (235d8 <wait_for_bootrom+0x170>)
   23546:	4798      	blx	r3
   23548:	e005      	b.n	23556 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2354a:	68fb      	ldr	r3, [r7, #12]
   2354c:	4a23      	ldr	r2, [pc, #140]	; (235dc <wait_for_bootrom+0x174>)
   2354e:	0019      	movs	r1, r3
   23550:	0010      	movs	r0, r2
   23552:	4b21      	ldr	r3, [pc, #132]	; (235d8 <wait_for_bootrom+0x170>)
   23554:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   23556:	4b22      	ldr	r3, [pc, #136]	; (235e0 <wait_for_bootrom+0x178>)
   23558:	4798      	blx	r3
   2355a:	0003      	movs	r3, r0
   2355c:	051b      	lsls	r3, r3, #20
   2355e:	0d1b      	lsrs	r3, r3, #20
   23560:	4a20      	ldr	r2, [pc, #128]	; (235e4 <wait_for_bootrom+0x17c>)
   23562:	4293      	cmp	r3, r2
   23564:	d906      	bls.n	23574 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   23566:	697b      	ldr	r3, [r7, #20]
   23568:	2202      	movs	r2, #2
   2356a:	4313      	orrs	r3, r2
   2356c:	0018      	movs	r0, r3
   2356e:	4b1e      	ldr	r3, [pc, #120]	; (235e8 <wait_for_bootrom+0x180>)
   23570:	4798      	blx	r3
   23572:	e003      	b.n	2357c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23574:	697b      	ldr	r3, [r7, #20]
   23576:	0018      	movs	r0, r3
   23578:	4b1b      	ldr	r3, [pc, #108]	; (235e8 <wait_for_bootrom+0x180>)
   2357a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2357c:	4b1b      	ldr	r3, [pc, #108]	; (235ec <wait_for_bootrom+0x184>)
   2357e:	0018      	movs	r0, r3
   23580:	4b1b      	ldr	r3, [pc, #108]	; (235f0 <wait_for_bootrom+0x188>)
   23582:	4798      	blx	r3
   23584:	68fa      	ldr	r2, [r7, #12]
   23586:	4b1b      	ldr	r3, [pc, #108]	; (235f4 <wait_for_bootrom+0x18c>)
   23588:	0011      	movs	r1, r2
   2358a:	0018      	movs	r0, r3
   2358c:	4b18      	ldr	r3, [pc, #96]	; (235f0 <wait_for_bootrom+0x188>)
   2358e:	4798      	blx	r3
   23590:	4b19      	ldr	r3, [pc, #100]	; (235f8 <wait_for_bootrom+0x190>)
   23592:	0018      	movs	r0, r3
   23594:	4b16      	ldr	r3, [pc, #88]	; (235f0 <wait_for_bootrom+0x188>)
   23596:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   23598:	4a18      	ldr	r2, [pc, #96]	; (235fc <wait_for_bootrom+0x194>)
   2359a:	4b0b      	ldr	r3, [pc, #44]	; (235c8 <wait_for_bootrom+0x160>)
   2359c:	0011      	movs	r1, r2
   2359e:	0018      	movs	r0, r3
   235a0:	4b0d      	ldr	r3, [pc, #52]	; (235d8 <wait_for_bootrom+0x170>)
   235a2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   235a4:	2313      	movs	r3, #19
   235a6:	18fb      	adds	r3, r7, r3
   235a8:	781b      	ldrb	r3, [r3, #0]
   235aa:	b25b      	sxtb	r3, r3
}
   235ac:	0018      	movs	r0, r3
   235ae:	46bd      	mov	sp, r7
   235b0:	b008      	add	sp, #32
   235b2:	bd80      	pop	{r7, pc}
   235b4:	13301354 	.word	0x13301354
   235b8:	00001014 	.word	0x00001014
   235bc:	000237f1 	.word	0x000237f1
   235c0:	00020ea1 	.word	0x00020ea1
   235c4:	000207bc 	.word	0x000207bc
   235c8:	000c000c 	.word	0x000c000c
   235cc:	10add09e 	.word	0x10add09e
   235d0:	3c1cd57d 	.word	0x3c1cd57d
   235d4:	000207ac 	.word	0x000207ac
   235d8:	00023835 	.word	0x00023835
   235dc:	0000108c 	.word	0x0000108c
   235e0:	00023111 	.word	0x00023111
   235e4:	0000039f 	.word	0x0000039f
   235e8:	00022fe1 	.word	0x00022fe1
   235ec:	0003a57c 	.word	0x0003a57c
   235f0:	0001e9e9 	.word	0x0001e9e9
   235f4:	0003a588 	.word	0x0003a588
   235f8:	0003a55c 	.word	0x0003a55c
   235fc:	ef522f61 	.word	0xef522f61

00023600 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23600:	b580      	push	{r7, lr}
   23602:	b088      	sub	sp, #32
   23604:	af00      	add	r7, sp, #0
   23606:	0002      	movs	r2, r0
   23608:	1dfb      	adds	r3, r7, #7
   2360a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2360c:	231f      	movs	r3, #31
   2360e:	18fb      	adds	r3, r7, r3
   23610:	2200      	movs	r2, #0
   23612:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23614:	2300      	movs	r3, #0
   23616:	61bb      	str	r3, [r7, #24]
   23618:	2300      	movs	r3, #0
   2361a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   2361c:	2301      	movs	r3, #1
   2361e:	425b      	negs	r3, r3
   23620:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23622:	4b1d      	ldr	r3, [pc, #116]	; (23698 <wait_for_firmware_start+0x98>)
   23624:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   23626:	4b1d      	ldr	r3, [pc, #116]	; (2369c <wait_for_firmware_start+0x9c>)
   23628:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2362a:	1dfb      	adds	r3, r7, #7
   2362c:	781b      	ldrb	r3, [r3, #0]
   2362e:	2b02      	cmp	r3, #2
   23630:	d003      	beq.n	2363a <wait_for_firmware_start+0x3a>
   23632:	1dfb      	adds	r3, r7, #7
   23634:	781b      	ldrb	r3, [r3, #0]
   23636:	2b03      	cmp	r3, #3
   23638:	d119      	bne.n	2366e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2363a:	4b19      	ldr	r3, [pc, #100]	; (236a0 <wait_for_firmware_start+0xa0>)
   2363c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2363e:	4b19      	ldr	r3, [pc, #100]	; (236a4 <wait_for_firmware_start+0xa4>)
   23640:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23642:	e014      	b.n	2366e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23644:	2002      	movs	r0, #2
   23646:	4b18      	ldr	r3, [pc, #96]	; (236a8 <wait_for_firmware_start+0xa8>)
   23648:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2364a:	68fb      	ldr	r3, [r7, #12]
   2364c:	0018      	movs	r0, r3
   2364e:	4b17      	ldr	r3, [pc, #92]	; (236ac <wait_for_firmware_start+0xac>)
   23650:	4798      	blx	r3
   23652:	0003      	movs	r3, r0
   23654:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   23656:	697b      	ldr	r3, [r7, #20]
   23658:	3301      	adds	r3, #1
   2365a:	617b      	str	r3, [r7, #20]
   2365c:	697a      	ldr	r2, [r7, #20]
   2365e:	693b      	ldr	r3, [r7, #16]
   23660:	429a      	cmp	r2, r3
   23662:	d304      	bcc.n	2366e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23664:	231f      	movs	r3, #31
   23666:	18fb      	adds	r3, r7, r3
   23668:	22fb      	movs	r2, #251	; 0xfb
   2366a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2366c:	e00c      	b.n	23688 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2366e:	68ba      	ldr	r2, [r7, #8]
   23670:	69bb      	ldr	r3, [r7, #24]
   23672:	429a      	cmp	r2, r3
   23674:	d1e6      	bne.n	23644 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23676:	68bb      	ldr	r3, [r7, #8]
   23678:	4a08      	ldr	r2, [pc, #32]	; (2369c <wait_for_firmware_start+0x9c>)
   2367a:	4293      	cmp	r3, r2
   2367c:	d104      	bne.n	23688 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2367e:	4b06      	ldr	r3, [pc, #24]	; (23698 <wait_for_firmware_start+0x98>)
   23680:	2100      	movs	r1, #0
   23682:	0018      	movs	r0, r3
   23684:	4b0a      	ldr	r3, [pc, #40]	; (236b0 <wait_for_firmware_start+0xb0>)
   23686:	4798      	blx	r3
	}
ERR:
	return ret;
   23688:	231f      	movs	r3, #31
   2368a:	18fb      	adds	r3, r7, r3
   2368c:	781b      	ldrb	r3, [r3, #0]
   2368e:	b25b      	sxtb	r3, r3
}
   23690:	0018      	movs	r0, r3
   23692:	46bd      	mov	sp, r7
   23694:	b008      	add	sp, #32
   23696:	bd80      	pop	{r7, pc}
   23698:	0000108c 	.word	0x0000108c
   2369c:	02532636 	.word	0x02532636
   236a0:	000207ac 	.word	0x000207ac
   236a4:	d75dc1c3 	.word	0xd75dc1c3
   236a8:	00020ea1 	.word	0x00020ea1
   236ac:	000237f1 	.word	0x000237f1
   236b0:	00023835 	.word	0x00023835

000236b4 <chip_deinit>:

sint8 chip_deinit(void)
{
   236b4:	b590      	push	{r4, r7, lr}
   236b6:	b083      	sub	sp, #12
   236b8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   236ba:	2300      	movs	r3, #0
   236bc:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   236be:	1dfc      	adds	r4, r7, #7
   236c0:	003a      	movs	r2, r7
   236c2:	23a0      	movs	r3, #160	; 0xa0
   236c4:	015b      	lsls	r3, r3, #5
   236c6:	0011      	movs	r1, r2
   236c8:	0018      	movs	r0, r3
   236ca:	4b20      	ldr	r3, [pc, #128]	; (2374c <chip_deinit+0x98>)
   236cc:	4798      	blx	r3
   236ce:	0003      	movs	r3, r0
   236d0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   236d2:	1dfb      	adds	r3, r7, #7
   236d4:	781b      	ldrb	r3, [r3, #0]
   236d6:	b25b      	sxtb	r3, r3
   236d8:	2b00      	cmp	r3, #0
   236da:	d00e      	beq.n	236fa <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   236dc:	4a1c      	ldr	r2, [pc, #112]	; (23750 <chip_deinit+0x9c>)
   236de:	491d      	ldr	r1, [pc, #116]	; (23754 <chip_deinit+0xa0>)
   236e0:	4b1d      	ldr	r3, [pc, #116]	; (23758 <chip_deinit+0xa4>)
   236e2:	0018      	movs	r0, r3
   236e4:	4b1d      	ldr	r3, [pc, #116]	; (2375c <chip_deinit+0xa8>)
   236e6:	4798      	blx	r3
   236e8:	4b1d      	ldr	r3, [pc, #116]	; (23760 <chip_deinit+0xac>)
   236ea:	0018      	movs	r0, r3
   236ec:	4b1b      	ldr	r3, [pc, #108]	; (2375c <chip_deinit+0xa8>)
   236ee:	4798      	blx	r3
   236f0:	4b1c      	ldr	r3, [pc, #112]	; (23764 <chip_deinit+0xb0>)
   236f2:	0018      	movs	r0, r3
   236f4:	4b19      	ldr	r3, [pc, #100]	; (2375c <chip_deinit+0xa8>)
   236f6:	4798      	blx	r3
		goto ERR1;
   236f8:	e021      	b.n	2373e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   236fa:	683b      	ldr	r3, [r7, #0]
   236fc:	4a1a      	ldr	r2, [pc, #104]	; (23768 <chip_deinit+0xb4>)
   236fe:	4013      	ands	r3, r2
   23700:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23702:	683a      	ldr	r2, [r7, #0]
   23704:	1dfc      	adds	r4, r7, #7
   23706:	23a0      	movs	r3, #160	; 0xa0
   23708:	015b      	lsls	r3, r3, #5
   2370a:	0011      	movs	r1, r2
   2370c:	0018      	movs	r0, r3
   2370e:	4b17      	ldr	r3, [pc, #92]	; (2376c <chip_deinit+0xb8>)
   23710:	4798      	blx	r3
   23712:	0003      	movs	r3, r0
   23714:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23716:	1dfb      	adds	r3, r7, #7
   23718:	781b      	ldrb	r3, [r3, #0]
   2371a:	b25b      	sxtb	r3, r3
   2371c:	2b00      	cmp	r3, #0
   2371e:	d00e      	beq.n	2373e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23720:	4a13      	ldr	r2, [pc, #76]	; (23770 <chip_deinit+0xbc>)
   23722:	490c      	ldr	r1, [pc, #48]	; (23754 <chip_deinit+0xa0>)
   23724:	4b0c      	ldr	r3, [pc, #48]	; (23758 <chip_deinit+0xa4>)
   23726:	0018      	movs	r0, r3
   23728:	4b0c      	ldr	r3, [pc, #48]	; (2375c <chip_deinit+0xa8>)
   2372a:	4798      	blx	r3
   2372c:	4b0c      	ldr	r3, [pc, #48]	; (23760 <chip_deinit+0xac>)
   2372e:	0018      	movs	r0, r3
   23730:	4b0a      	ldr	r3, [pc, #40]	; (2375c <chip_deinit+0xa8>)
   23732:	4798      	blx	r3
   23734:	4b0b      	ldr	r3, [pc, #44]	; (23764 <chip_deinit+0xb0>)
   23736:	0018      	movs	r0, r3
   23738:	4b08      	ldr	r3, [pc, #32]	; (2375c <chip_deinit+0xa8>)
   2373a:	4798      	blx	r3
		goto ERR1;
   2373c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2373e:	1dfb      	adds	r3, r7, #7
   23740:	781b      	ldrb	r3, [r3, #0]
   23742:	b25b      	sxtb	r3, r3
}
   23744:	0018      	movs	r0, r3
   23746:	46bd      	mov	sp, r7
   23748:	b003      	add	sp, #12
   2374a:	bd90      	pop	{r4, r7, pc}
   2374c:	00023811 	.word	0x00023811
   23750:	00000201 	.word	0x00000201
   23754:	0003a5c8 	.word	0x0003a5c8
   23758:	0003a530 	.word	0x0003a530
   2375c:	0001e9e9 	.word	0x0001e9e9
   23760:	0003a5a0 	.word	0x0003a5a0
   23764:	0003a55c 	.word	0x0003a55c
   23768:	fffffbff 	.word	0xfffffbff
   2376c:	00023835 	.word	0x00023835
   23770:	00000207 	.word	0x00000207

00023774 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23774:	b590      	push	{r4, r7, lr}
   23776:	b085      	sub	sp, #20
   23778:	af00      	add	r7, sp, #0
   2377a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2377c:	230f      	movs	r3, #15
   2377e:	18fb      	adds	r3, r7, r3
   23780:	2200      	movs	r2, #0
   23782:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23784:	230f      	movs	r3, #15
   23786:	18fc      	adds	r4, r7, r3
   23788:	687b      	ldr	r3, [r7, #4]
   2378a:	0018      	movs	r0, r3
   2378c:	4b05      	ldr	r3, [pc, #20]	; (237a4 <nm_bus_iface_init+0x30>)
   2378e:	4798      	blx	r3
   23790:	0003      	movs	r3, r0
   23792:	7023      	strb	r3, [r4, #0]
	return ret;
   23794:	230f      	movs	r3, #15
   23796:	18fb      	adds	r3, r7, r3
   23798:	781b      	ldrb	r3, [r3, #0]
   2379a:	b25b      	sxtb	r3, r3
}
   2379c:	0018      	movs	r0, r3
   2379e:	46bd      	mov	sp, r7
   237a0:	b005      	add	sp, #20
   237a2:	bd90      	pop	{r4, r7, pc}
   237a4:	0002155d 	.word	0x0002155d

000237a8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   237a8:	b590      	push	{r4, r7, lr}
   237aa:	b083      	sub	sp, #12
   237ac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   237ae:	1dfb      	adds	r3, r7, #7
   237b0:	2200      	movs	r2, #0
   237b2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   237b4:	1dfc      	adds	r4, r7, #7
   237b6:	4b05      	ldr	r3, [pc, #20]	; (237cc <nm_bus_iface_deinit+0x24>)
   237b8:	4798      	blx	r3
   237ba:	0003      	movs	r3, r0
   237bc:	7023      	strb	r3, [r4, #0]

	return ret;
   237be:	1dfb      	adds	r3, r7, #7
   237c0:	781b      	ldrb	r3, [r3, #0]
   237c2:	b25b      	sxtb	r3, r3
}
   237c4:	0018      	movs	r0, r3
   237c6:	46bd      	mov	sp, r7
   237c8:	b003      	add	sp, #12
   237ca:	bd90      	pop	{r4, r7, pc}
   237cc:	000216d5 	.word	0x000216d5

000237d0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   237d0:	b580      	push	{r7, lr}
   237d2:	b082      	sub	sp, #8
   237d4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   237d6:	1dfb      	adds	r3, r7, #7
   237d8:	2200      	movs	r2, #0
   237da:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   237dc:	4b03      	ldr	r3, [pc, #12]	; (237ec <nm_bus_reset+0x1c>)
   237de:	4798      	blx	r3
   237e0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   237e2:	0018      	movs	r0, r3
   237e4:	46bd      	mov	sp, r7
   237e6:	b002      	add	sp, #8
   237e8:	bd80      	pop	{r7, pc}
   237ea:	46c0      	nop			; (mov r8, r8)
   237ec:	000255fd 	.word	0x000255fd

000237f0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   237f0:	b580      	push	{r7, lr}
   237f2:	b082      	sub	sp, #8
   237f4:	af00      	add	r7, sp, #0
   237f6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   237f8:	687b      	ldr	r3, [r7, #4]
   237fa:	0018      	movs	r0, r3
   237fc:	4b03      	ldr	r3, [pc, #12]	; (2380c <nm_read_reg+0x1c>)
   237fe:	4798      	blx	r3
   23800:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23802:	0018      	movs	r0, r3
   23804:	46bd      	mov	sp, r7
   23806:	b002      	add	sp, #8
   23808:	bd80      	pop	{r7, pc}
   2380a:	46c0      	nop			; (mov r8, r8)
   2380c:	00025791 	.word	0x00025791

00023810 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23810:	b580      	push	{r7, lr}
   23812:	b082      	sub	sp, #8
   23814:	af00      	add	r7, sp, #0
   23816:	6078      	str	r0, [r7, #4]
   23818:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2381a:	683a      	ldr	r2, [r7, #0]
   2381c:	687b      	ldr	r3, [r7, #4]
   2381e:	0011      	movs	r1, r2
   23820:	0018      	movs	r0, r3
   23822:	4b03      	ldr	r3, [pc, #12]	; (23830 <nm_read_reg_with_ret+0x20>)
   23824:	4798      	blx	r3
   23826:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23828:	0018      	movs	r0, r3
   2382a:	46bd      	mov	sp, r7
   2382c:	b002      	add	sp, #8
   2382e:	bd80      	pop	{r7, pc}
   23830:	000257b5 	.word	0x000257b5

00023834 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23834:	b580      	push	{r7, lr}
   23836:	b082      	sub	sp, #8
   23838:	af00      	add	r7, sp, #0
   2383a:	6078      	str	r0, [r7, #4]
   2383c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2383e:	683a      	ldr	r2, [r7, #0]
   23840:	687b      	ldr	r3, [r7, #4]
   23842:	0011      	movs	r1, r2
   23844:	0018      	movs	r0, r3
   23846:	4b03      	ldr	r3, [pc, #12]	; (23854 <nm_write_reg+0x20>)
   23848:	4798      	blx	r3
   2384a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   2384c:	0018      	movs	r0, r3
   2384e:	46bd      	mov	sp, r7
   23850:	b002      	add	sp, #8
   23852:	bd80      	pop	{r7, pc}
   23854:	00025805 	.word	0x00025805

00023858 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23858:	b580      	push	{r7, lr}
   2385a:	b084      	sub	sp, #16
   2385c:	af00      	add	r7, sp, #0
   2385e:	60f8      	str	r0, [r7, #12]
   23860:	60b9      	str	r1, [r7, #8]
   23862:	1dbb      	adds	r3, r7, #6
   23864:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23866:	1dbb      	adds	r3, r7, #6
   23868:	881a      	ldrh	r2, [r3, #0]
   2386a:	68b9      	ldr	r1, [r7, #8]
   2386c:	68fb      	ldr	r3, [r7, #12]
   2386e:	0018      	movs	r0, r3
   23870:	4b03      	ldr	r3, [pc, #12]	; (23880 <p_nm_read_block+0x28>)
   23872:	4798      	blx	r3
   23874:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23876:	0018      	movs	r0, r3
   23878:	46bd      	mov	sp, r7
   2387a:	b004      	add	sp, #16
   2387c:	bd80      	pop	{r7, pc}
   2387e:	46c0      	nop			; (mov r8, r8)
   23880:	00025855 	.word	0x00025855

00023884 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23884:	b580      	push	{r7, lr}
   23886:	b086      	sub	sp, #24
   23888:	af00      	add	r7, sp, #0
   2388a:	60f8      	str	r0, [r7, #12]
   2388c:	60b9      	str	r1, [r7, #8]
   2388e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23890:	4b2d      	ldr	r3, [pc, #180]	; (23948 <nm_read_block+0xc4>)
   23892:	881a      	ldrh	r2, [r3, #0]
   23894:	2310      	movs	r3, #16
   23896:	18fb      	adds	r3, r7, r3
   23898:	3a08      	subs	r2, #8
   2389a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2389c:	2300      	movs	r3, #0
   2389e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   238a0:	2313      	movs	r3, #19
   238a2:	18fb      	adds	r3, r7, r3
   238a4:	2200      	movs	r2, #0
   238a6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   238a8:	2310      	movs	r3, #16
   238aa:	18fb      	adds	r3, r7, r3
   238ac:	881a      	ldrh	r2, [r3, #0]
   238ae:	687b      	ldr	r3, [r7, #4]
   238b0:	429a      	cmp	r2, r3
   238b2:	d313      	bcc.n	238dc <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   238b4:	68ba      	ldr	r2, [r7, #8]
   238b6:	697b      	ldr	r3, [r7, #20]
   238b8:	18d1      	adds	r1, r2, r3
   238ba:	687b      	ldr	r3, [r7, #4]
   238bc:	b29a      	uxth	r2, r3
   238be:	68fb      	ldr	r3, [r7, #12]
   238c0:	0018      	movs	r0, r3
   238c2:	4b22      	ldr	r3, [pc, #136]	; (2394c <nm_read_block+0xc8>)
   238c4:	4798      	blx	r3
   238c6:	0003      	movs	r3, r0
   238c8:	b2da      	uxtb	r2, r3
   238ca:	2313      	movs	r3, #19
   238cc:	18fb      	adds	r3, r7, r3
   238ce:	781b      	ldrb	r3, [r3, #0]
   238d0:	18d3      	adds	r3, r2, r3
   238d2:	b2da      	uxtb	r2, r3
   238d4:	2313      	movs	r3, #19
   238d6:	18fb      	adds	r3, r7, r3
   238d8:	701a      	strb	r2, [r3, #0]
			break;
   238da:	e02d      	b.n	23938 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   238dc:	68ba      	ldr	r2, [r7, #8]
   238de:	697b      	ldr	r3, [r7, #20]
   238e0:	18d1      	adds	r1, r2, r3
   238e2:	2310      	movs	r3, #16
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	881a      	ldrh	r2, [r3, #0]
   238e8:	68fb      	ldr	r3, [r7, #12]
   238ea:	0018      	movs	r0, r3
   238ec:	4b17      	ldr	r3, [pc, #92]	; (2394c <nm_read_block+0xc8>)
   238ee:	4798      	blx	r3
   238f0:	0003      	movs	r3, r0
   238f2:	b2da      	uxtb	r2, r3
   238f4:	2313      	movs	r3, #19
   238f6:	18fb      	adds	r3, r7, r3
   238f8:	781b      	ldrb	r3, [r3, #0]
   238fa:	18d3      	adds	r3, r2, r3
   238fc:	b2da      	uxtb	r2, r3
   238fe:	2313      	movs	r3, #19
   23900:	18fb      	adds	r3, r7, r3
   23902:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23904:	2313      	movs	r3, #19
   23906:	18fb      	adds	r3, r7, r3
   23908:	781b      	ldrb	r3, [r3, #0]
   2390a:	b25b      	sxtb	r3, r3
   2390c:	2b00      	cmp	r3, #0
   2390e:	d112      	bne.n	23936 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23910:	2310      	movs	r3, #16
   23912:	18fb      	adds	r3, r7, r3
   23914:	881b      	ldrh	r3, [r3, #0]
   23916:	687a      	ldr	r2, [r7, #4]
   23918:	1ad3      	subs	r3, r2, r3
   2391a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2391c:	2310      	movs	r3, #16
   2391e:	18fb      	adds	r3, r7, r3
   23920:	881b      	ldrh	r3, [r3, #0]
   23922:	697a      	ldr	r2, [r7, #20]
   23924:	18d3      	adds	r3, r2, r3
   23926:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23928:	2310      	movs	r3, #16
   2392a:	18fb      	adds	r3, r7, r3
   2392c:	881b      	ldrh	r3, [r3, #0]
   2392e:	68fa      	ldr	r2, [r7, #12]
   23930:	18d3      	adds	r3, r2, r3
   23932:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23934:	e7b8      	b.n	238a8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23936:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23938:	2313      	movs	r3, #19
   2393a:	18fb      	adds	r3, r7, r3
   2393c:	781b      	ldrb	r3, [r3, #0]
   2393e:	b25b      	sxtb	r3, r3
}
   23940:	0018      	movs	r0, r3
   23942:	46bd      	mov	sp, r7
   23944:	b006      	add	sp, #24
   23946:	bd80      	pop	{r7, pc}
   23948:	20000124 	.word	0x20000124
   2394c:	00023859 	.word	0x00023859

00023950 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23950:	b580      	push	{r7, lr}
   23952:	b084      	sub	sp, #16
   23954:	af00      	add	r7, sp, #0
   23956:	60f8      	str	r0, [r7, #12]
   23958:	60b9      	str	r1, [r7, #8]
   2395a:	1dbb      	adds	r3, r7, #6
   2395c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2395e:	1dbb      	adds	r3, r7, #6
   23960:	881a      	ldrh	r2, [r3, #0]
   23962:	68b9      	ldr	r1, [r7, #8]
   23964:	68fb      	ldr	r3, [r7, #12]
   23966:	0018      	movs	r0, r3
   23968:	4b03      	ldr	r3, [pc, #12]	; (23978 <p_nm_write_block+0x28>)
   2396a:	4798      	blx	r3
   2396c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2396e:	0018      	movs	r0, r3
   23970:	46bd      	mov	sp, r7
   23972:	b004      	add	sp, #16
   23974:	bd80      	pop	{r7, pc}
   23976:	46c0      	nop			; (mov r8, r8)
   23978:	000258ad 	.word	0x000258ad

0002397c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2397c:	b580      	push	{r7, lr}
   2397e:	b086      	sub	sp, #24
   23980:	af00      	add	r7, sp, #0
   23982:	60f8      	str	r0, [r7, #12]
   23984:	60b9      	str	r1, [r7, #8]
   23986:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23988:	4b2d      	ldr	r3, [pc, #180]	; (23a40 <nm_write_block+0xc4>)
   2398a:	881a      	ldrh	r2, [r3, #0]
   2398c:	2310      	movs	r3, #16
   2398e:	18fb      	adds	r3, r7, r3
   23990:	3a08      	subs	r2, #8
   23992:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23994:	2300      	movs	r3, #0
   23996:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23998:	2313      	movs	r3, #19
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	2200      	movs	r2, #0
   2399e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   239a0:	2310      	movs	r3, #16
   239a2:	18fb      	adds	r3, r7, r3
   239a4:	881a      	ldrh	r2, [r3, #0]
   239a6:	687b      	ldr	r3, [r7, #4]
   239a8:	429a      	cmp	r2, r3
   239aa:	d313      	bcc.n	239d4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   239ac:	68ba      	ldr	r2, [r7, #8]
   239ae:	697b      	ldr	r3, [r7, #20]
   239b0:	18d1      	adds	r1, r2, r3
   239b2:	687b      	ldr	r3, [r7, #4]
   239b4:	b29a      	uxth	r2, r3
   239b6:	68fb      	ldr	r3, [r7, #12]
   239b8:	0018      	movs	r0, r3
   239ba:	4b22      	ldr	r3, [pc, #136]	; (23a44 <nm_write_block+0xc8>)
   239bc:	4798      	blx	r3
   239be:	0003      	movs	r3, r0
   239c0:	b2da      	uxtb	r2, r3
   239c2:	2313      	movs	r3, #19
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	781b      	ldrb	r3, [r3, #0]
   239c8:	18d3      	adds	r3, r2, r3
   239ca:	b2da      	uxtb	r2, r3
   239cc:	2313      	movs	r3, #19
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	701a      	strb	r2, [r3, #0]
			break;
   239d2:	e02d      	b.n	23a30 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   239d4:	68ba      	ldr	r2, [r7, #8]
   239d6:	697b      	ldr	r3, [r7, #20]
   239d8:	18d1      	adds	r1, r2, r3
   239da:	2310      	movs	r3, #16
   239dc:	18fb      	adds	r3, r7, r3
   239de:	881a      	ldrh	r2, [r3, #0]
   239e0:	68fb      	ldr	r3, [r7, #12]
   239e2:	0018      	movs	r0, r3
   239e4:	4b17      	ldr	r3, [pc, #92]	; (23a44 <nm_write_block+0xc8>)
   239e6:	4798      	blx	r3
   239e8:	0003      	movs	r3, r0
   239ea:	b2da      	uxtb	r2, r3
   239ec:	2313      	movs	r3, #19
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	781b      	ldrb	r3, [r3, #0]
   239f2:	18d3      	adds	r3, r2, r3
   239f4:	b2da      	uxtb	r2, r3
   239f6:	2313      	movs	r3, #19
   239f8:	18fb      	adds	r3, r7, r3
   239fa:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   239fc:	2313      	movs	r3, #19
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	781b      	ldrb	r3, [r3, #0]
   23a02:	b25b      	sxtb	r3, r3
   23a04:	2b00      	cmp	r3, #0
   23a06:	d112      	bne.n	23a2e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23a08:	2310      	movs	r3, #16
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	881b      	ldrh	r3, [r3, #0]
   23a0e:	687a      	ldr	r2, [r7, #4]
   23a10:	1ad3      	subs	r3, r2, r3
   23a12:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23a14:	2310      	movs	r3, #16
   23a16:	18fb      	adds	r3, r7, r3
   23a18:	881b      	ldrh	r3, [r3, #0]
   23a1a:	697a      	ldr	r2, [r7, #20]
   23a1c:	18d3      	adds	r3, r2, r3
   23a1e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23a20:	2310      	movs	r3, #16
   23a22:	18fb      	adds	r3, r7, r3
   23a24:	881b      	ldrh	r3, [r3, #0]
   23a26:	68fa      	ldr	r2, [r7, #12]
   23a28:	18d3      	adds	r3, r2, r3
   23a2a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23a2c:	e7b8      	b.n	239a0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23a2e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23a30:	2313      	movs	r3, #19
   23a32:	18fb      	adds	r3, r7, r3
   23a34:	781b      	ldrb	r3, [r3, #0]
   23a36:	b25b      	sxtb	r3, r3
}
   23a38:	0018      	movs	r0, r3
   23a3a:	46bd      	mov	sp, r7
   23a3c:	b006      	add	sp, #24
   23a3e:	bd80      	pop	{r7, pc}
   23a40:	20000124 	.word	0x20000124
   23a44:	00023951 	.word	0x00023951

00023a48 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23a48:	b590      	push	{r4, r7, lr}
   23a4a:	b089      	sub	sp, #36	; 0x24
   23a4c:	af00      	add	r7, sp, #0
   23a4e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23a50:	2300      	movs	r3, #0
   23a52:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23a54:	231f      	movs	r3, #31
   23a56:	18fb      	adds	r3, r7, r3
   23a58:	2200      	movs	r2, #0
   23a5a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23a5c:	230c      	movs	r3, #12
   23a5e:	18fb      	adds	r3, r7, r3
   23a60:	0018      	movs	r0, r3
   23a62:	2308      	movs	r3, #8
   23a64:	001a      	movs	r2, r3
   23a66:	2100      	movs	r1, #0
   23a68:	4b64      	ldr	r3, [pc, #400]	; (23bfc <nm_get_firmware_full_info+0x1b4>)
   23a6a:	4798      	blx	r3
	if (pstrRev != NULL)
   23a6c:	687b      	ldr	r3, [r7, #4]
   23a6e:	2b00      	cmp	r3, #0
   23a70:	d100      	bne.n	23a74 <nm_get_firmware_full_info+0x2c>
   23a72:	e0ba      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23a74:	687b      	ldr	r3, [r7, #4]
   23a76:	2228      	movs	r2, #40	; 0x28
   23a78:	2100      	movs	r1, #0
   23a7a:	0018      	movs	r0, r3
   23a7c:	4b60      	ldr	r3, [pc, #384]	; (23c00 <nm_get_firmware_full_info+0x1b8>)
   23a7e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23a80:	231f      	movs	r3, #31
   23a82:	18fc      	adds	r4, r7, r3
   23a84:	2314      	movs	r3, #20
   23a86:	18fb      	adds	r3, r7, r3
   23a88:	4a5e      	ldr	r2, [pc, #376]	; (23c04 <nm_get_firmware_full_info+0x1bc>)
   23a8a:	0019      	movs	r1, r3
   23a8c:	0010      	movs	r0, r2
   23a8e:	4b5e      	ldr	r3, [pc, #376]	; (23c08 <nm_get_firmware_full_info+0x1c0>)
   23a90:	4798      	blx	r3
   23a92:	0003      	movs	r3, r0
   23a94:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23a96:	231f      	movs	r3, #31
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	781b      	ldrb	r3, [r3, #0]
   23a9c:	b25b      	sxtb	r3, r3
   23a9e:	2b00      	cmp	r3, #0
   23aa0:	d000      	beq.n	23aa4 <nm_get_firmware_full_info+0x5c>
   23aa2:	e0a2      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23aa4:	697b      	ldr	r3, [r7, #20]
   23aa6:	2b00      	cmp	r3, #0
   23aa8:	d100      	bne.n	23aac <nm_get_firmware_full_info+0x64>
   23aaa:	e09a      	b.n	23be2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23aac:	697b      	ldr	r3, [r7, #20]
   23aae:	22c0      	movs	r2, #192	; 0xc0
   23ab0:	0292      	lsls	r2, r2, #10
   23ab2:	4313      	orrs	r3, r2
   23ab4:	221f      	movs	r2, #31
   23ab6:	18bc      	adds	r4, r7, r2
   23ab8:	220c      	movs	r2, #12
   23aba:	18b9      	adds	r1, r7, r2
   23abc:	2208      	movs	r2, #8
   23abe:	0018      	movs	r0, r3
   23ac0:	4b52      	ldr	r3, [pc, #328]	; (23c0c <nm_get_firmware_full_info+0x1c4>)
   23ac2:	4798      	blx	r3
   23ac4:	0003      	movs	r3, r0
   23ac6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23ac8:	231f      	movs	r3, #31
   23aca:	18fb      	adds	r3, r7, r3
   23acc:	781b      	ldrb	r3, [r3, #0]
   23ace:	b25b      	sxtb	r3, r3
   23ad0:	2b00      	cmp	r3, #0
   23ad2:	d000      	beq.n	23ad6 <nm_get_firmware_full_info+0x8e>
   23ad4:	e089      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23ad6:	230c      	movs	r3, #12
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	685b      	ldr	r3, [r3, #4]
   23adc:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23ade:	697b      	ldr	r3, [r7, #20]
   23ae0:	041b      	lsls	r3, r3, #16
   23ae2:	0c1b      	lsrs	r3, r3, #16
   23ae4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23ae6:	697b      	ldr	r3, [r7, #20]
   23ae8:	2b00      	cmp	r3, #0
   23aea:	d100      	bne.n	23aee <nm_get_firmware_full_info+0xa6>
   23aec:	e074      	b.n	23bd8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23aee:	697b      	ldr	r3, [r7, #20]
   23af0:	22c0      	movs	r2, #192	; 0xc0
   23af2:	0292      	lsls	r2, r2, #10
   23af4:	4313      	orrs	r3, r2
   23af6:	221f      	movs	r2, #31
   23af8:	18bc      	adds	r4, r7, r2
   23afa:	6879      	ldr	r1, [r7, #4]
   23afc:	2228      	movs	r2, #40	; 0x28
   23afe:	0018      	movs	r0, r3
   23b00:	4b42      	ldr	r3, [pc, #264]	; (23c0c <nm_get_firmware_full_info+0x1c4>)
   23b02:	4798      	blx	r3
   23b04:	0003      	movs	r3, r0
   23b06:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23b08:	231f      	movs	r3, #31
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	781b      	ldrb	r3, [r3, #0]
   23b0e:	b25b      	sxtb	r3, r3
   23b10:	2b00      	cmp	r3, #0
   23b12:	d16a      	bne.n	23bea <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23b14:	687b      	ldr	r3, [r7, #4]
   23b16:	791b      	ldrb	r3, [r3, #4]
   23b18:	021b      	lsls	r3, r3, #8
   23b1a:	b21a      	sxth	r2, r3
   23b1c:	687b      	ldr	r3, [r7, #4]
   23b1e:	795b      	ldrb	r3, [r3, #5]
   23b20:	011b      	lsls	r3, r3, #4
   23b22:	b21b      	sxth	r3, r3
   23b24:	21ff      	movs	r1, #255	; 0xff
   23b26:	400b      	ands	r3, r1
   23b28:	b21b      	sxth	r3, r3
   23b2a:	4313      	orrs	r3, r2
   23b2c:	b21a      	sxth	r2, r3
   23b2e:	687b      	ldr	r3, [r7, #4]
   23b30:	799b      	ldrb	r3, [r3, #6]
   23b32:	b21b      	sxth	r3, r3
   23b34:	210f      	movs	r1, #15
   23b36:	400b      	ands	r3, r1
   23b38:	b21b      	sxth	r3, r3
   23b3a:	4313      	orrs	r3, r2
   23b3c:	b21a      	sxth	r2, r3
   23b3e:	231c      	movs	r3, #28
   23b40:	18fb      	adds	r3, r7, r3
   23b42:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23b44:	231a      	movs	r3, #26
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	4a31      	ldr	r2, [pc, #196]	; (23c10 <nm_get_firmware_full_info+0x1c8>)
   23b4a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23b4c:	687b      	ldr	r3, [r7, #4]
   23b4e:	79db      	ldrb	r3, [r3, #7]
   23b50:	021b      	lsls	r3, r3, #8
   23b52:	b21a      	sxth	r2, r3
   23b54:	687b      	ldr	r3, [r7, #4]
   23b56:	7a1b      	ldrb	r3, [r3, #8]
   23b58:	011b      	lsls	r3, r3, #4
   23b5a:	b21b      	sxth	r3, r3
   23b5c:	21ff      	movs	r1, #255	; 0xff
   23b5e:	400b      	ands	r3, r1
   23b60:	b21b      	sxth	r3, r3
   23b62:	4313      	orrs	r3, r2
   23b64:	b21a      	sxth	r2, r3
   23b66:	687b      	ldr	r3, [r7, #4]
   23b68:	7a5b      	ldrb	r3, [r3, #9]
   23b6a:	b21b      	sxth	r3, r3
   23b6c:	210f      	movs	r1, #15
   23b6e:	400b      	ands	r3, r1
   23b70:	b21b      	sxth	r3, r3
   23b72:	4313      	orrs	r3, r2
   23b74:	b21a      	sxth	r2, r3
   23b76:	2318      	movs	r3, #24
   23b78:	18fb      	adds	r3, r7, r3
   23b7a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23b7c:	231c      	movs	r3, #28
   23b7e:	18fb      	adds	r3, r7, r3
   23b80:	881b      	ldrh	r3, [r3, #0]
   23b82:	2b00      	cmp	r3, #0
   23b84:	d009      	beq.n	23b9a <nm_get_firmware_full_info+0x152>
   23b86:	2318      	movs	r3, #24
   23b88:	18fb      	adds	r3, r7, r3
   23b8a:	881b      	ldrh	r3, [r3, #0]
   23b8c:	2b00      	cmp	r3, #0
   23b8e:	d004      	beq.n	23b9a <nm_get_firmware_full_info+0x152>
   23b90:	2318      	movs	r3, #24
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	881b      	ldrh	r3, [r3, #0]
   23b96:	2b00      	cmp	r3, #0
   23b98:	d104      	bne.n	23ba4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23b9a:	231f      	movs	r3, #31
   23b9c:	18fb      	adds	r3, r7, r3
   23b9e:	22f4      	movs	r2, #244	; 0xf4
   23ba0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23ba2:	e022      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23ba4:	231a      	movs	r3, #26
   23ba6:	18fa      	adds	r2, r7, r3
   23ba8:	2318      	movs	r3, #24
   23baa:	18fb      	adds	r3, r7, r3
   23bac:	8812      	ldrh	r2, [r2, #0]
   23bae:	881b      	ldrh	r3, [r3, #0]
   23bb0:	429a      	cmp	r2, r3
   23bb2:	d204      	bcs.n	23bbe <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23bb4:	231f      	movs	r3, #31
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	22f3      	movs	r2, #243	; 0xf3
   23bba:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23bbc:	e015      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23bbe:	231a      	movs	r3, #26
   23bc0:	18fa      	adds	r2, r7, r3
   23bc2:	231c      	movs	r3, #28
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	8812      	ldrh	r2, [r2, #0]
   23bc8:	881b      	ldrh	r3, [r3, #0]
   23bca:	429a      	cmp	r2, r3
   23bcc:	d90d      	bls.n	23bea <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23bce:	231f      	movs	r3, #31
   23bd0:	18fb      	adds	r3, r7, r3
   23bd2:	22f3      	movs	r2, #243	; 0xf3
   23bd4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23bd6:	e008      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23bd8:	231f      	movs	r3, #31
   23bda:	18fb      	adds	r3, r7, r3
   23bdc:	22f4      	movs	r2, #244	; 0xf4
   23bde:	701a      	strb	r2, [r3, #0]
   23be0:	e003      	b.n	23bea <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23be2:	231f      	movs	r3, #31
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	22f4      	movs	r2, #244	; 0xf4
   23be8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23bea:	231f      	movs	r3, #31
   23bec:	18fb      	adds	r3, r7, r3
   23bee:	781b      	ldrb	r3, [r3, #0]
   23bf0:	b25b      	sxtb	r3, r3
}
   23bf2:	0018      	movs	r0, r3
   23bf4:	46bd      	mov	sp, r7
   23bf6:	b009      	add	sp, #36	; 0x24
   23bf8:	bd90      	pop	{r4, r7, pc}
   23bfa:	46c0      	nop			; (mov r8, r8)
   23bfc:	00036203 	.word	0x00036203
   23c00:	00021781 	.word	0x00021781
   23c04:	000c0008 	.word	0x000c0008
   23c08:	00023811 	.word	0x00023811
   23c0c:	00023885 	.word	0x00023885
   23c10:	00001354 	.word	0x00001354

00023c14 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23c14:	b590      	push	{r4, r7, lr}
   23c16:	b085      	sub	sp, #20
   23c18:	af00      	add	r7, sp, #0
   23c1a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23c1c:	230f      	movs	r3, #15
   23c1e:	18fb      	adds	r3, r7, r3
   23c20:	2200      	movs	r2, #0
   23c22:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23c24:	687b      	ldr	r3, [r7, #4]
   23c26:	2b00      	cmp	r3, #0
   23c28:	d013      	beq.n	23c52 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23c2a:	230e      	movs	r3, #14
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	687a      	ldr	r2, [r7, #4]
   23c30:	7812      	ldrb	r2, [r2, #0]
   23c32:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23c34:	230e      	movs	r3, #14
   23c36:	18fb      	adds	r3, r7, r3
   23c38:	781b      	ldrb	r3, [r3, #0]
   23c3a:	2b00      	cmp	r3, #0
   23c3c:	d004      	beq.n	23c48 <nm_drv_init+0x34>
   23c3e:	230e      	movs	r3, #14
   23c40:	18fb      	adds	r3, r7, r3
   23c42:	781b      	ldrb	r3, [r3, #0]
   23c44:	2b04      	cmp	r3, #4
   23c46:	d908      	bls.n	23c5a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23c48:	230e      	movs	r3, #14
   23c4a:	18fb      	adds	r3, r7, r3
   23c4c:	2201      	movs	r2, #1
   23c4e:	701a      	strb	r2, [r3, #0]
   23c50:	e003      	b.n	23c5a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23c52:	230e      	movs	r3, #14
   23c54:	18fb      	adds	r3, r7, r3
   23c56:	2201      	movs	r2, #1
   23c58:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23c5a:	230f      	movs	r3, #15
   23c5c:	18fc      	adds	r4, r7, r3
   23c5e:	2000      	movs	r0, #0
   23c60:	4b41      	ldr	r3, [pc, #260]	; (23d68 <nm_drv_init+0x154>)
   23c62:	4798      	blx	r3
   23c64:	0003      	movs	r3, r0
   23c66:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23c68:	230f      	movs	r3, #15
   23c6a:	18fb      	adds	r3, r7, r3
   23c6c:	781b      	ldrb	r3, [r3, #0]
   23c6e:	b25b      	sxtb	r3, r3
   23c70:	2b00      	cmp	r3, #0
   23c72:	d00f      	beq.n	23c94 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23c74:	2390      	movs	r3, #144	; 0x90
   23c76:	005a      	lsls	r2, r3, #1
   23c78:	493c      	ldr	r1, [pc, #240]	; (23d6c <nm_drv_init+0x158>)
   23c7a:	4b3d      	ldr	r3, [pc, #244]	; (23d70 <nm_drv_init+0x15c>)
   23c7c:	0018      	movs	r0, r3
   23c7e:	4b3d      	ldr	r3, [pc, #244]	; (23d74 <nm_drv_init+0x160>)
   23c80:	4798      	blx	r3
   23c82:	4b3d      	ldr	r3, [pc, #244]	; (23d78 <nm_drv_init+0x164>)
   23c84:	0018      	movs	r0, r3
   23c86:	4b3b      	ldr	r3, [pc, #236]	; (23d74 <nm_drv_init+0x160>)
   23c88:	4798      	blx	r3
   23c8a:	4b3c      	ldr	r3, [pc, #240]	; (23d7c <nm_drv_init+0x168>)
   23c8c:	0018      	movs	r0, r3
   23c8e:	4b39      	ldr	r3, [pc, #228]	; (23d74 <nm_drv_init+0x160>)
   23c90:	4798      	blx	r3
		goto ERR1;
   23c92:	e061      	b.n	23d58 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23c94:	4b3a      	ldr	r3, [pc, #232]	; (23d80 <nm_drv_init+0x16c>)
   23c96:	0018      	movs	r0, r3
   23c98:	4b36      	ldr	r3, [pc, #216]	; (23d74 <nm_drv_init+0x160>)
   23c9a:	4798      	blx	r3
   23c9c:	4b39      	ldr	r3, [pc, #228]	; (23d84 <nm_drv_init+0x170>)
   23c9e:	4798      	blx	r3
   23ca0:	0002      	movs	r2, r0
   23ca2:	4b39      	ldr	r3, [pc, #228]	; (23d88 <nm_drv_init+0x174>)
   23ca4:	0011      	movs	r1, r2
   23ca6:	0018      	movs	r0, r3
   23ca8:	4b32      	ldr	r3, [pc, #200]	; (23d74 <nm_drv_init+0x160>)
   23caa:	4798      	blx	r3
   23cac:	4b33      	ldr	r3, [pc, #204]	; (23d7c <nm_drv_init+0x168>)
   23cae:	0018      	movs	r0, r3
   23cb0:	4b30      	ldr	r3, [pc, #192]	; (23d74 <nm_drv_init+0x160>)
   23cb2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23cb4:	4b35      	ldr	r3, [pc, #212]	; (23d8c <nm_drv_init+0x178>)
   23cb6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23cb8:	230f      	movs	r3, #15
   23cba:	18fc      	adds	r4, r7, r3
   23cbc:	230e      	movs	r3, #14
   23cbe:	18fb      	adds	r3, r7, r3
   23cc0:	781b      	ldrb	r3, [r3, #0]
   23cc2:	0018      	movs	r0, r3
   23cc4:	4b32      	ldr	r3, [pc, #200]	; (23d90 <nm_drv_init+0x17c>)
   23cc6:	4798      	blx	r3
   23cc8:	0003      	movs	r3, r0
   23cca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23ccc:	230f      	movs	r3, #15
   23cce:	18fb      	adds	r3, r7, r3
   23cd0:	781b      	ldrb	r3, [r3, #0]
   23cd2:	b25b      	sxtb	r3, r3
   23cd4:	2b00      	cmp	r3, #0
   23cd6:	d13a      	bne.n	23d4e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23cd8:	230f      	movs	r3, #15
   23cda:	18fc      	adds	r4, r7, r3
   23cdc:	230e      	movs	r3, #14
   23cde:	18fb      	adds	r3, r7, r3
   23ce0:	781b      	ldrb	r3, [r3, #0]
   23ce2:	0018      	movs	r0, r3
   23ce4:	4b2b      	ldr	r3, [pc, #172]	; (23d94 <nm_drv_init+0x180>)
   23ce6:	4798      	blx	r3
   23ce8:	0003      	movs	r3, r0
   23cea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23cec:	230f      	movs	r3, #15
   23cee:	18fb      	adds	r3, r7, r3
   23cf0:	781b      	ldrb	r3, [r3, #0]
   23cf2:	b25b      	sxtb	r3, r3
   23cf4:	2b00      	cmp	r3, #0
   23cf6:	d12c      	bne.n	23d52 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23cf8:	230e      	movs	r3, #14
   23cfa:	18fb      	adds	r3, r7, r3
   23cfc:	781b      	ldrb	r3, [r3, #0]
   23cfe:	2b02      	cmp	r3, #2
   23d00:	d02a      	beq.n	23d58 <nm_drv_init+0x144>
   23d02:	230e      	movs	r3, #14
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	781b      	ldrb	r3, [r3, #0]
   23d08:	2b03      	cmp	r3, #3
   23d0a:	d025      	beq.n	23d58 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23d0c:	230f      	movs	r3, #15
   23d0e:	18fc      	adds	r4, r7, r3
   23d10:	4b21      	ldr	r3, [pc, #132]	; (23d98 <nm_drv_init+0x184>)
   23d12:	4798      	blx	r3
   23d14:	0003      	movs	r3, r0
   23d16:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d18:	230f      	movs	r3, #15
   23d1a:	18fb      	adds	r3, r7, r3
   23d1c:	781b      	ldrb	r3, [r3, #0]
   23d1e:	b25b      	sxtb	r3, r3
   23d20:	2b00      	cmp	r3, #0
   23d22:	d00f      	beq.n	23d44 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23d24:	23a7      	movs	r3, #167	; 0xa7
   23d26:	005a      	lsls	r2, r3, #1
   23d28:	4910      	ldr	r1, [pc, #64]	; (23d6c <nm_drv_init+0x158>)
   23d2a:	4b11      	ldr	r3, [pc, #68]	; (23d70 <nm_drv_init+0x15c>)
   23d2c:	0018      	movs	r0, r3
   23d2e:	4b11      	ldr	r3, [pc, #68]	; (23d74 <nm_drv_init+0x160>)
   23d30:	4798      	blx	r3
   23d32:	4b1a      	ldr	r3, [pc, #104]	; (23d9c <nm_drv_init+0x188>)
   23d34:	0018      	movs	r0, r3
   23d36:	4b0f      	ldr	r3, [pc, #60]	; (23d74 <nm_drv_init+0x160>)
   23d38:	4798      	blx	r3
   23d3a:	4b10      	ldr	r3, [pc, #64]	; (23d7c <nm_drv_init+0x168>)
   23d3c:	0018      	movs	r0, r3
   23d3e:	4b0d      	ldr	r3, [pc, #52]	; (23d74 <nm_drv_init+0x160>)
   23d40:	4798      	blx	r3
		goto ERR2;
   23d42:	e007      	b.n	23d54 <nm_drv_init+0x140>
	}
	return ret;
   23d44:	230f      	movs	r3, #15
   23d46:	18fb      	adds	r3, r7, r3
   23d48:	781b      	ldrb	r3, [r3, #0]
   23d4a:	b25b      	sxtb	r3, r3
   23d4c:	e008      	b.n	23d60 <nm_drv_init+0x14c>
		goto ERR2;
   23d4e:	46c0      	nop			; (mov r8, r8)
   23d50:	e000      	b.n	23d54 <nm_drv_init+0x140>
		goto ERR2;
   23d52:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23d54:	4b12      	ldr	r3, [pc, #72]	; (23da0 <nm_drv_init+0x18c>)
   23d56:	4798      	blx	r3
ERR1:
	return ret;
   23d58:	230f      	movs	r3, #15
   23d5a:	18fb      	adds	r3, r7, r3
   23d5c:	781b      	ldrb	r3, [r3, #0]
   23d5e:	b25b      	sxtb	r3, r3
}
   23d60:	0018      	movs	r0, r3
   23d62:	46bd      	mov	sp, r7
   23d64:	b005      	add	sp, #20
   23d66:	bd90      	pop	{r4, r7, pc}
   23d68:	00023775 	.word	0x00023775
   23d6c:	0003a6a4 	.word	0x0003a6a4
   23d70:	0003a5d4 	.word	0x0003a5d4
   23d74:	0001e9e9 	.word	0x0001e9e9
   23d78:	0003a5e8 	.word	0x0003a5e8
   23d7c:	0003a604 	.word	0x0003a604
   23d80:	0003a608 	.word	0x0003a608
   23d84:	00023111 	.word	0x00023111
   23d88:	0003a614 	.word	0x0003a614
   23d8c:	0002562d 	.word	0x0002562d
   23d90:	00023469 	.word	0x00023469
   23d94:	00023601 	.word	0x00023601
   23d98:	0002305d 	.word	0x0002305d
   23d9c:	0003a624 	.word	0x0003a624
   23da0:	000237a9 	.word	0x000237a9

00023da4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23da4:	b590      	push	{r4, r7, lr}
   23da6:	b085      	sub	sp, #20
   23da8:	af00      	add	r7, sp, #0
   23daa:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23dac:	230f      	movs	r3, #15
   23dae:	18fc      	adds	r4, r7, r3
   23db0:	4b2e      	ldr	r3, [pc, #184]	; (23e6c <nm_drv_deinit+0xc8>)
   23db2:	4798      	blx	r3
   23db4:	0003      	movs	r3, r0
   23db6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23db8:	230f      	movs	r3, #15
   23dba:	18fb      	adds	r3, r7, r3
   23dbc:	781b      	ldrb	r3, [r3, #0]
   23dbe:	b25b      	sxtb	r3, r3
   23dc0:	2b00      	cmp	r3, #0
   23dc2:	d010      	beq.n	23de6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23dc4:	2366      	movs	r3, #102	; 0x66
   23dc6:	33ff      	adds	r3, #255	; 0xff
   23dc8:	001a      	movs	r2, r3
   23dca:	4929      	ldr	r1, [pc, #164]	; (23e70 <nm_drv_deinit+0xcc>)
   23dcc:	4b29      	ldr	r3, [pc, #164]	; (23e74 <nm_drv_deinit+0xd0>)
   23dce:	0018      	movs	r0, r3
   23dd0:	4b29      	ldr	r3, [pc, #164]	; (23e78 <nm_drv_deinit+0xd4>)
   23dd2:	4798      	blx	r3
   23dd4:	4b29      	ldr	r3, [pc, #164]	; (23e7c <nm_drv_deinit+0xd8>)
   23dd6:	0018      	movs	r0, r3
   23dd8:	4b27      	ldr	r3, [pc, #156]	; (23e78 <nm_drv_deinit+0xd4>)
   23dda:	4798      	blx	r3
   23ddc:	4b28      	ldr	r3, [pc, #160]	; (23e80 <nm_drv_deinit+0xdc>)
   23dde:	0018      	movs	r0, r3
   23de0:	4b25      	ldr	r3, [pc, #148]	; (23e78 <nm_drv_deinit+0xd4>)
   23de2:	4798      	blx	r3
		goto ERR1;
   23de4:	e03a      	b.n	23e5c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23de6:	230f      	movs	r3, #15
   23de8:	18fc      	adds	r4, r7, r3
   23dea:	2000      	movs	r0, #0
   23dec:	4b25      	ldr	r3, [pc, #148]	; (23e84 <nm_drv_deinit+0xe0>)
   23dee:	4798      	blx	r3
   23df0:	0003      	movs	r3, r0
   23df2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23df4:	230f      	movs	r3, #15
   23df6:	18fb      	adds	r3, r7, r3
   23df8:	781b      	ldrb	r3, [r3, #0]
   23dfa:	b25b      	sxtb	r3, r3
   23dfc:	2b00      	cmp	r3, #0
   23dfe:	d00f      	beq.n	23e20 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23e00:	23b6      	movs	r3, #182	; 0xb6
   23e02:	005a      	lsls	r2, r3, #1
   23e04:	491a      	ldr	r1, [pc, #104]	; (23e70 <nm_drv_deinit+0xcc>)
   23e06:	4b1b      	ldr	r3, [pc, #108]	; (23e74 <nm_drv_deinit+0xd0>)
   23e08:	0018      	movs	r0, r3
   23e0a:	4b1b      	ldr	r3, [pc, #108]	; (23e78 <nm_drv_deinit+0xd4>)
   23e0c:	4798      	blx	r3
   23e0e:	4b1e      	ldr	r3, [pc, #120]	; (23e88 <nm_drv_deinit+0xe4>)
   23e10:	0018      	movs	r0, r3
   23e12:	4b19      	ldr	r3, [pc, #100]	; (23e78 <nm_drv_deinit+0xd4>)
   23e14:	4798      	blx	r3
   23e16:	4b1a      	ldr	r3, [pc, #104]	; (23e80 <nm_drv_deinit+0xdc>)
   23e18:	0018      	movs	r0, r3
   23e1a:	4b17      	ldr	r3, [pc, #92]	; (23e78 <nm_drv_deinit+0xd4>)
   23e1c:	4798      	blx	r3
		goto ERR1;
   23e1e:	e01d      	b.n	23e5c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23e20:	230f      	movs	r3, #15
   23e22:	18fc      	adds	r4, r7, r3
   23e24:	4b19      	ldr	r3, [pc, #100]	; (23e8c <nm_drv_deinit+0xe8>)
   23e26:	4798      	blx	r3
   23e28:	0003      	movs	r3, r0
   23e2a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e2c:	230f      	movs	r3, #15
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	781b      	ldrb	r3, [r3, #0]
   23e32:	b25b      	sxtb	r3, r3
   23e34:	2b00      	cmp	r3, #0
   23e36:	d00f      	beq.n	23e58 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23e38:	23b9      	movs	r3, #185	; 0xb9
   23e3a:	005a      	lsls	r2, r3, #1
   23e3c:	490c      	ldr	r1, [pc, #48]	; (23e70 <nm_drv_deinit+0xcc>)
   23e3e:	4b0d      	ldr	r3, [pc, #52]	; (23e74 <nm_drv_deinit+0xd0>)
   23e40:	0018      	movs	r0, r3
   23e42:	4b0d      	ldr	r3, [pc, #52]	; (23e78 <nm_drv_deinit+0xd4>)
   23e44:	4798      	blx	r3
   23e46:	4b12      	ldr	r3, [pc, #72]	; (23e90 <nm_drv_deinit+0xec>)
   23e48:	0018      	movs	r0, r3
   23e4a:	4b0b      	ldr	r3, [pc, #44]	; (23e78 <nm_drv_deinit+0xd4>)
   23e4c:	4798      	blx	r3
   23e4e:	4b0c      	ldr	r3, [pc, #48]	; (23e80 <nm_drv_deinit+0xdc>)
   23e50:	0018      	movs	r0, r3
   23e52:	4b09      	ldr	r3, [pc, #36]	; (23e78 <nm_drv_deinit+0xd4>)
   23e54:	4798      	blx	r3
		goto ERR1;
   23e56:	e001      	b.n	23e5c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23e58:	4b0e      	ldr	r3, [pc, #56]	; (23e94 <nm_drv_deinit+0xf0>)
   23e5a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23e5c:	230f      	movs	r3, #15
   23e5e:	18fb      	adds	r3, r7, r3
   23e60:	781b      	ldrb	r3, [r3, #0]
   23e62:	b25b      	sxtb	r3, r3
}
   23e64:	0018      	movs	r0, r3
   23e66:	46bd      	mov	sp, r7
   23e68:	b005      	add	sp, #20
   23e6a:	bd90      	pop	{r4, r7, pc}
   23e6c:	000236b5 	.word	0x000236b5
   23e70:	0003a6b0 	.word	0x0003a6b0
   23e74:	0003a5d4 	.word	0x0003a5d4
   23e78:	0001e9e9 	.word	0x0001e9e9
   23e7c:	0003a644 	.word	0x0003a644
   23e80:	0003a604 	.word	0x0003a604
   23e84:	00026ad5 	.word	0x00026ad5
   23e88:	0003a664 	.word	0x0003a664
   23e8c:	000237a9 	.word	0x000237a9
   23e90:	0003a688 	.word	0x0003a688
   23e94:	00025779 	.word	0x00025779

00023e98 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23e98:	b580      	push	{r7, lr}
   23e9a:	b086      	sub	sp, #24
   23e9c:	af00      	add	r7, sp, #0
   23e9e:	6078      	str	r0, [r7, #4]
   23ea0:	000a      	movs	r2, r1
   23ea2:	1cbb      	adds	r3, r7, #2
   23ea4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23ea6:	230c      	movs	r3, #12
   23ea8:	18fb      	adds	r3, r7, r3
   23eaa:	2200      	movs	r2, #0
   23eac:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23eae:	230c      	movs	r3, #12
   23eb0:	18fb      	adds	r3, r7, r3
   23eb2:	687a      	ldr	r2, [r7, #4]
   23eb4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23eb6:	230c      	movs	r3, #12
   23eb8:	18fb      	adds	r3, r7, r3
   23eba:	1cba      	adds	r2, r7, #2
   23ebc:	8812      	ldrh	r2, [r2, #0]
   23ebe:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23ec0:	230c      	movs	r3, #12
   23ec2:	18fb      	adds	r3, r7, r3
   23ec4:	0019      	movs	r1, r3
   23ec6:	2003      	movs	r0, #3
   23ec8:	4b03      	ldr	r3, [pc, #12]	; (23ed8 <nmi_spi_read+0x40>)
   23eca:	4798      	blx	r3
   23ecc:	0003      	movs	r3, r0
}
   23ece:	0018      	movs	r0, r3
   23ed0:	46bd      	mov	sp, r7
   23ed2:	b006      	add	sp, #24
   23ed4:	bd80      	pop	{r7, pc}
   23ed6:	46c0      	nop			; (mov r8, r8)
   23ed8:	00021645 	.word	0x00021645

00023edc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23edc:	b580      	push	{r7, lr}
   23ede:	b086      	sub	sp, #24
   23ee0:	af00      	add	r7, sp, #0
   23ee2:	6078      	str	r0, [r7, #4]
   23ee4:	000a      	movs	r2, r1
   23ee6:	1cbb      	adds	r3, r7, #2
   23ee8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23eea:	230c      	movs	r3, #12
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	687a      	ldr	r2, [r7, #4]
   23ef0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23ef2:	230c      	movs	r3, #12
   23ef4:	18fb      	adds	r3, r7, r3
   23ef6:	2200      	movs	r2, #0
   23ef8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23efa:	230c      	movs	r3, #12
   23efc:	18fb      	adds	r3, r7, r3
   23efe:	1cba      	adds	r2, r7, #2
   23f00:	8812      	ldrh	r2, [r2, #0]
   23f02:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23f04:	230c      	movs	r3, #12
   23f06:	18fb      	adds	r3, r7, r3
   23f08:	0019      	movs	r1, r3
   23f0a:	2003      	movs	r0, #3
   23f0c:	4b03      	ldr	r3, [pc, #12]	; (23f1c <nmi_spi_write+0x40>)
   23f0e:	4798      	blx	r3
   23f10:	0003      	movs	r3, r0
}
   23f12:	0018      	movs	r0, r3
   23f14:	46bd      	mov	sp, r7
   23f16:	b006      	add	sp, #24
   23f18:	bd80      	pop	{r7, pc}
   23f1a:	46c0      	nop			; (mov r8, r8)
   23f1c:	00021645 	.word	0x00021645

00023f20 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23f20:	b580      	push	{r7, lr}
   23f22:	b088      	sub	sp, #32
   23f24:	af00      	add	r7, sp, #0
   23f26:	60f8      	str	r0, [r7, #12]
   23f28:	60b9      	str	r1, [r7, #8]
   23f2a:	1dbb      	adds	r3, r7, #6
   23f2c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23f2e:	2314      	movs	r3, #20
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	68fa      	ldr	r2, [r7, #12]
   23f34:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23f36:	2314      	movs	r3, #20
   23f38:	18fb      	adds	r3, r7, r3
   23f3a:	68ba      	ldr	r2, [r7, #8]
   23f3c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f3e:	2314      	movs	r3, #20
   23f40:	18fb      	adds	r3, r7, r3
   23f42:	1dba      	adds	r2, r7, #6
   23f44:	8812      	ldrh	r2, [r2, #0]
   23f46:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23f48:	2314      	movs	r3, #20
   23f4a:	18fb      	adds	r3, r7, r3
   23f4c:	0019      	movs	r1, r3
   23f4e:	2003      	movs	r0, #3
   23f50:	4b03      	ldr	r3, [pc, #12]	; (23f60 <nmi_spi_rw+0x40>)
   23f52:	4798      	blx	r3
   23f54:	0003      	movs	r3, r0
}
   23f56:	0018      	movs	r0, r3
   23f58:	46bd      	mov	sp, r7
   23f5a:	b008      	add	sp, #32
   23f5c:	bd80      	pop	{r7, pc}
   23f5e:	46c0      	nop			; (mov r8, r8)
   23f60:	00021645 	.word	0x00021645

00023f64 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23f64:	b580      	push	{r7, lr}
   23f66:	b082      	sub	sp, #8
   23f68:	af00      	add	r7, sp, #0
   23f6a:	0002      	movs	r2, r0
   23f6c:	1dfb      	adds	r3, r7, #7
   23f6e:	701a      	strb	r2, [r3, #0]
   23f70:	1dbb      	adds	r3, r7, #6
   23f72:	1c0a      	adds	r2, r1, #0
   23f74:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23f76:	1dfb      	adds	r3, r7, #7
   23f78:	781b      	ldrb	r3, [r3, #0]
   23f7a:	005a      	lsls	r2, r3, #1
   23f7c:	1dbb      	adds	r3, r7, #6
   23f7e:	781b      	ldrb	r3, [r3, #0]
   23f80:	4053      	eors	r3, r2
   23f82:	4a03      	ldr	r2, [pc, #12]	; (23f90 <crc7_byte+0x2c>)
   23f84:	5cd3      	ldrb	r3, [r2, r3]
}
   23f86:	0018      	movs	r0, r3
   23f88:	46bd      	mov	sp, r7
   23f8a:	b002      	add	sp, #8
   23f8c:	bd80      	pop	{r7, pc}
   23f8e:	46c0      	nop			; (mov r8, r8)
   23f90:	0003a6c0 	.word	0x0003a6c0

00023f94 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   23f94:	b590      	push	{r4, r7, lr}
   23f96:	b085      	sub	sp, #20
   23f98:	af00      	add	r7, sp, #0
   23f9a:	60b9      	str	r1, [r7, #8]
   23f9c:	607a      	str	r2, [r7, #4]
   23f9e:	230f      	movs	r3, #15
   23fa0:	18fb      	adds	r3, r7, r3
   23fa2:	1c02      	adds	r2, r0, #0
   23fa4:	701a      	strb	r2, [r3, #0]
	while (len--)
   23fa6:	e00e      	b.n	23fc6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   23fa8:	68bb      	ldr	r3, [r7, #8]
   23faa:	1c5a      	adds	r2, r3, #1
   23fac:	60ba      	str	r2, [r7, #8]
   23fae:	781a      	ldrb	r2, [r3, #0]
   23fb0:	230f      	movs	r3, #15
   23fb2:	18fc      	adds	r4, r7, r3
   23fb4:	230f      	movs	r3, #15
   23fb6:	18fb      	adds	r3, r7, r3
   23fb8:	781b      	ldrb	r3, [r3, #0]
   23fba:	0011      	movs	r1, r2
   23fbc:	0018      	movs	r0, r3
   23fbe:	4b08      	ldr	r3, [pc, #32]	; (23fe0 <crc7+0x4c>)
   23fc0:	4798      	blx	r3
   23fc2:	0003      	movs	r3, r0
   23fc4:	7023      	strb	r3, [r4, #0]
	while (len--)
   23fc6:	687b      	ldr	r3, [r7, #4]
   23fc8:	1e5a      	subs	r2, r3, #1
   23fca:	607a      	str	r2, [r7, #4]
   23fcc:	2b00      	cmp	r3, #0
   23fce:	d1eb      	bne.n	23fa8 <crc7+0x14>
	return crc;
   23fd0:	230f      	movs	r3, #15
   23fd2:	18fb      	adds	r3, r7, r3
   23fd4:	781b      	ldrb	r3, [r3, #0]
}
   23fd6:	0018      	movs	r0, r3
   23fd8:	46bd      	mov	sp, r7
   23fda:	b005      	add	sp, #20
   23fdc:	bd90      	pop	{r4, r7, pc}
   23fde:	46c0      	nop			; (mov r8, r8)
   23fe0:	00023f65 	.word	0x00023f65

00023fe4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23fe4:	b590      	push	{r4, r7, lr}
   23fe6:	b089      	sub	sp, #36	; 0x24
   23fe8:	af00      	add	r7, sp, #0
   23fea:	60b9      	str	r1, [r7, #8]
   23fec:	607a      	str	r2, [r7, #4]
   23fee:	603b      	str	r3, [r7, #0]
   23ff0:	230f      	movs	r3, #15
   23ff2:	18fb      	adds	r3, r7, r3
   23ff4:	1c02      	adds	r2, r0, #0
   23ff6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23ff8:	231f      	movs	r3, #31
   23ffa:	18fb      	adds	r3, r7, r3
   23ffc:	2205      	movs	r2, #5
   23ffe:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24000:	231e      	movs	r3, #30
   24002:	18fb      	adds	r3, r7, r3
   24004:	2201      	movs	r2, #1
   24006:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   24008:	2314      	movs	r3, #20
   2400a:	18fb      	adds	r3, r7, r3
   2400c:	220f      	movs	r2, #15
   2400e:	18ba      	adds	r2, r7, r2
   24010:	7812      	ldrb	r2, [r2, #0]
   24012:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24014:	230f      	movs	r3, #15
   24016:	18fb      	adds	r3, r7, r3
   24018:	781b      	ldrb	r3, [r3, #0]
   2401a:	3bc1      	subs	r3, #193	; 0xc1
   2401c:	2b0e      	cmp	r3, #14
   2401e:	d900      	bls.n	24022 <spi_cmd+0x3e>
   24020:	e11b      	b.n	2425a <spi_cmd+0x276>
   24022:	009a      	lsls	r2, r3, #2
   24024:	4bb6      	ldr	r3, [pc, #728]	; (24300 <spi_cmd+0x31c>)
   24026:	18d3      	adds	r3, r2, r3
   24028:	681b      	ldr	r3, [r3, #0]
   2402a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2402c:	68bb      	ldr	r3, [r7, #8]
   2402e:	0c1b      	lsrs	r3, r3, #16
   24030:	b2da      	uxtb	r2, r3
   24032:	2314      	movs	r3, #20
   24034:	18fb      	adds	r3, r7, r3
   24036:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24038:	68bb      	ldr	r3, [r7, #8]
   2403a:	0a1b      	lsrs	r3, r3, #8
   2403c:	b2da      	uxtb	r2, r3
   2403e:	2314      	movs	r3, #20
   24040:	18fb      	adds	r3, r7, r3
   24042:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24044:	68bb      	ldr	r3, [r7, #8]
   24046:	b2da      	uxtb	r2, r3
   24048:	2314      	movs	r3, #20
   2404a:	18fb      	adds	r3, r7, r3
   2404c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2404e:	231f      	movs	r3, #31
   24050:	18fb      	adds	r3, r7, r3
   24052:	2205      	movs	r2, #5
   24054:	701a      	strb	r2, [r3, #0]
		break;
   24056:	e105      	b.n	24264 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   24058:	68bb      	ldr	r3, [r7, #8]
   2405a:	0a1b      	lsrs	r3, r3, #8
   2405c:	b2da      	uxtb	r2, r3
   2405e:	2314      	movs	r3, #20
   24060:	18fb      	adds	r3, r7, r3
   24062:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24064:	2330      	movs	r3, #48	; 0x30
   24066:	18fb      	adds	r3, r7, r3
   24068:	781b      	ldrb	r3, [r3, #0]
   2406a:	2b00      	cmp	r3, #0
   2406c:	d009      	beq.n	24082 <spi_cmd+0x9e>
   2406e:	2314      	movs	r3, #20
   24070:	18fb      	adds	r3, r7, r3
   24072:	785b      	ldrb	r3, [r3, #1]
   24074:	2280      	movs	r2, #128	; 0x80
   24076:	4252      	negs	r2, r2
   24078:	4313      	orrs	r3, r2
   2407a:	b2da      	uxtb	r2, r3
   2407c:	2314      	movs	r3, #20
   2407e:	18fb      	adds	r3, r7, r3
   24080:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   24082:	68bb      	ldr	r3, [r7, #8]
   24084:	b2da      	uxtb	r2, r3
   24086:	2314      	movs	r3, #20
   24088:	18fb      	adds	r3, r7, r3
   2408a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2408c:	2314      	movs	r3, #20
   2408e:	18fb      	adds	r3, r7, r3
   24090:	2200      	movs	r2, #0
   24092:	70da      	strb	r2, [r3, #3]
		len = 5;
   24094:	231f      	movs	r3, #31
   24096:	18fb      	adds	r3, r7, r3
   24098:	2205      	movs	r2, #5
   2409a:	701a      	strb	r2, [r3, #0]
		break;
   2409c:	e0e2      	b.n	24264 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2409e:	2314      	movs	r3, #20
   240a0:	18fb      	adds	r3, r7, r3
   240a2:	2200      	movs	r2, #0
   240a4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   240a6:	2314      	movs	r3, #20
   240a8:	18fb      	adds	r3, r7, r3
   240aa:	2200      	movs	r2, #0
   240ac:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   240ae:	2314      	movs	r3, #20
   240b0:	18fb      	adds	r3, r7, r3
   240b2:	2200      	movs	r2, #0
   240b4:	70da      	strb	r2, [r3, #3]
		len = 5;
   240b6:	231f      	movs	r3, #31
   240b8:	18fb      	adds	r3, r7, r3
   240ba:	2205      	movs	r2, #5
   240bc:	701a      	strb	r2, [r3, #0]
		break;
   240be:	e0d1      	b.n	24264 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   240c0:	2314      	movs	r3, #20
   240c2:	18fb      	adds	r3, r7, r3
   240c4:	2200      	movs	r2, #0
   240c6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   240c8:	2314      	movs	r3, #20
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	2200      	movs	r2, #0
   240ce:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   240d0:	2314      	movs	r3, #20
   240d2:	18fb      	adds	r3, r7, r3
   240d4:	2200      	movs	r2, #0
   240d6:	70da      	strb	r2, [r3, #3]
		len = 5;
   240d8:	231f      	movs	r3, #31
   240da:	18fb      	adds	r3, r7, r3
   240dc:	2205      	movs	r2, #5
   240de:	701a      	strb	r2, [r3, #0]
		break;
   240e0:	e0c0      	b.n	24264 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   240e2:	2314      	movs	r3, #20
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	22ff      	movs	r2, #255	; 0xff
   240e8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   240ea:	2314      	movs	r3, #20
   240ec:	18fb      	adds	r3, r7, r3
   240ee:	22ff      	movs	r2, #255	; 0xff
   240f0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   240f2:	2314      	movs	r3, #20
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	22ff      	movs	r2, #255	; 0xff
   240f8:	70da      	strb	r2, [r3, #3]
		len = 5;
   240fa:	231f      	movs	r3, #31
   240fc:	18fb      	adds	r3, r7, r3
   240fe:	2205      	movs	r2, #5
   24100:	701a      	strb	r2, [r3, #0]
		break;
   24102:	e0af      	b.n	24264 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24104:	68bb      	ldr	r3, [r7, #8]
   24106:	0c1b      	lsrs	r3, r3, #16
   24108:	b2da      	uxtb	r2, r3
   2410a:	2314      	movs	r3, #20
   2410c:	18fb      	adds	r3, r7, r3
   2410e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24110:	68bb      	ldr	r3, [r7, #8]
   24112:	0a1b      	lsrs	r3, r3, #8
   24114:	b2da      	uxtb	r2, r3
   24116:	2314      	movs	r3, #20
   24118:	18fb      	adds	r3, r7, r3
   2411a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2411c:	68bb      	ldr	r3, [r7, #8]
   2411e:	b2da      	uxtb	r2, r3
   24120:	2314      	movs	r3, #20
   24122:	18fb      	adds	r3, r7, r3
   24124:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   24126:	683b      	ldr	r3, [r7, #0]
   24128:	0a1b      	lsrs	r3, r3, #8
   2412a:	b2da      	uxtb	r2, r3
   2412c:	2314      	movs	r3, #20
   2412e:	18fb      	adds	r3, r7, r3
   24130:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   24132:	683b      	ldr	r3, [r7, #0]
   24134:	b2da      	uxtb	r2, r3
   24136:	2314      	movs	r3, #20
   24138:	18fb      	adds	r3, r7, r3
   2413a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2413c:	231f      	movs	r3, #31
   2413e:	18fb      	adds	r3, r7, r3
   24140:	2207      	movs	r2, #7
   24142:	701a      	strb	r2, [r3, #0]
		break;
   24144:	e08e      	b.n	24264 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   24146:	68bb      	ldr	r3, [r7, #8]
   24148:	0c1b      	lsrs	r3, r3, #16
   2414a:	b2da      	uxtb	r2, r3
   2414c:	2314      	movs	r3, #20
   2414e:	18fb      	adds	r3, r7, r3
   24150:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24152:	68bb      	ldr	r3, [r7, #8]
   24154:	0a1b      	lsrs	r3, r3, #8
   24156:	b2da      	uxtb	r2, r3
   24158:	2314      	movs	r3, #20
   2415a:	18fb      	adds	r3, r7, r3
   2415c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2415e:	68bb      	ldr	r3, [r7, #8]
   24160:	b2da      	uxtb	r2, r3
   24162:	2314      	movs	r3, #20
   24164:	18fb      	adds	r3, r7, r3
   24166:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   24168:	683b      	ldr	r3, [r7, #0]
   2416a:	0c1b      	lsrs	r3, r3, #16
   2416c:	b2da      	uxtb	r2, r3
   2416e:	2314      	movs	r3, #20
   24170:	18fb      	adds	r3, r7, r3
   24172:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24174:	683b      	ldr	r3, [r7, #0]
   24176:	0a1b      	lsrs	r3, r3, #8
   24178:	b2da      	uxtb	r2, r3
   2417a:	2314      	movs	r3, #20
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   24180:	683b      	ldr	r3, [r7, #0]
   24182:	b2da      	uxtb	r2, r3
   24184:	2314      	movs	r3, #20
   24186:	18fb      	adds	r3, r7, r3
   24188:	719a      	strb	r2, [r3, #6]
		len = 8;
   2418a:	231f      	movs	r3, #31
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	2208      	movs	r2, #8
   24190:	701a      	strb	r2, [r3, #0]
		break;
   24192:	e067      	b.n	24264 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24194:	68bb      	ldr	r3, [r7, #8]
   24196:	0a1b      	lsrs	r3, r3, #8
   24198:	b2da      	uxtb	r2, r3
   2419a:	2314      	movs	r3, #20
   2419c:	18fb      	adds	r3, r7, r3
   2419e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   241a0:	2330      	movs	r3, #48	; 0x30
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	781b      	ldrb	r3, [r3, #0]
   241a6:	2b00      	cmp	r3, #0
   241a8:	d009      	beq.n	241be <spi_cmd+0x1da>
   241aa:	2314      	movs	r3, #20
   241ac:	18fb      	adds	r3, r7, r3
   241ae:	785b      	ldrb	r3, [r3, #1]
   241b0:	2280      	movs	r2, #128	; 0x80
   241b2:	4252      	negs	r2, r2
   241b4:	4313      	orrs	r3, r2
   241b6:	b2da      	uxtb	r2, r3
   241b8:	2314      	movs	r3, #20
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   241be:	68bb      	ldr	r3, [r7, #8]
   241c0:	b2da      	uxtb	r2, r3
   241c2:	2314      	movs	r3, #20
   241c4:	18fb      	adds	r3, r7, r3
   241c6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   241c8:	687b      	ldr	r3, [r7, #4]
   241ca:	0e1b      	lsrs	r3, r3, #24
   241cc:	b2da      	uxtb	r2, r3
   241ce:	2314      	movs	r3, #20
   241d0:	18fb      	adds	r3, r7, r3
   241d2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   241d4:	687b      	ldr	r3, [r7, #4]
   241d6:	0c1b      	lsrs	r3, r3, #16
   241d8:	b2da      	uxtb	r2, r3
   241da:	2314      	movs	r3, #20
   241dc:	18fb      	adds	r3, r7, r3
   241de:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   241e0:	687b      	ldr	r3, [r7, #4]
   241e2:	0a1b      	lsrs	r3, r3, #8
   241e4:	b2da      	uxtb	r2, r3
   241e6:	2314      	movs	r3, #20
   241e8:	18fb      	adds	r3, r7, r3
   241ea:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   241ec:	687b      	ldr	r3, [r7, #4]
   241ee:	b2da      	uxtb	r2, r3
   241f0:	2314      	movs	r3, #20
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	719a      	strb	r2, [r3, #6]
		len = 8;
   241f6:	231f      	movs	r3, #31
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	2208      	movs	r2, #8
   241fc:	701a      	strb	r2, [r3, #0]
		break;
   241fe:	e031      	b.n	24264 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24200:	68bb      	ldr	r3, [r7, #8]
   24202:	0c1b      	lsrs	r3, r3, #16
   24204:	b2da      	uxtb	r2, r3
   24206:	2314      	movs	r3, #20
   24208:	18fb      	adds	r3, r7, r3
   2420a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2420c:	68bb      	ldr	r3, [r7, #8]
   2420e:	0a1b      	lsrs	r3, r3, #8
   24210:	b2da      	uxtb	r2, r3
   24212:	2314      	movs	r3, #20
   24214:	18fb      	adds	r3, r7, r3
   24216:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   24218:	68bb      	ldr	r3, [r7, #8]
   2421a:	b2da      	uxtb	r2, r3
   2421c:	2314      	movs	r3, #20
   2421e:	18fb      	adds	r3, r7, r3
   24220:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   24222:	687b      	ldr	r3, [r7, #4]
   24224:	0e1b      	lsrs	r3, r3, #24
   24226:	b2da      	uxtb	r2, r3
   24228:	2314      	movs	r3, #20
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2422e:	687b      	ldr	r3, [r7, #4]
   24230:	0c1b      	lsrs	r3, r3, #16
   24232:	b2da      	uxtb	r2, r3
   24234:	2314      	movs	r3, #20
   24236:	18fb      	adds	r3, r7, r3
   24238:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2423a:	687b      	ldr	r3, [r7, #4]
   2423c:	0a1b      	lsrs	r3, r3, #8
   2423e:	b2da      	uxtb	r2, r3
   24240:	2314      	movs	r3, #20
   24242:	18fb      	adds	r3, r7, r3
   24244:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   24246:	687b      	ldr	r3, [r7, #4]
   24248:	b2da      	uxtb	r2, r3
   2424a:	2314      	movs	r3, #20
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	71da      	strb	r2, [r3, #7]
		len = 9;
   24250:	231f      	movs	r3, #31
   24252:	18fb      	adds	r3, r7, r3
   24254:	2209      	movs	r2, #9
   24256:	701a      	strb	r2, [r3, #0]
		break;
   24258:	e004      	b.n	24264 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2425a:	231e      	movs	r3, #30
   2425c:	18fb      	adds	r3, r7, r3
   2425e:	2200      	movs	r2, #0
   24260:	701a      	strb	r2, [r3, #0]
		break;
   24262:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24264:	231e      	movs	r3, #30
   24266:	18fb      	adds	r3, r7, r3
   24268:	781b      	ldrb	r3, [r3, #0]
   2426a:	b25b      	sxtb	r3, r3
   2426c:	2b00      	cmp	r3, #0
   2426e:	d03f      	beq.n	242f0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   24270:	4b24      	ldr	r3, [pc, #144]	; (24304 <spi_cmd+0x320>)
   24272:	781b      	ldrb	r3, [r3, #0]
   24274:	2b00      	cmp	r3, #0
   24276:	d115      	bne.n	242a4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   24278:	231f      	movs	r3, #31
   2427a:	18fb      	adds	r3, r7, r3
   2427c:	781b      	ldrb	r3, [r3, #0]
   2427e:	1e5c      	subs	r4, r3, #1
   24280:	231f      	movs	r3, #31
   24282:	18fb      	adds	r3, r7, r3
   24284:	781b      	ldrb	r3, [r3, #0]
   24286:	3b01      	subs	r3, #1
   24288:	001a      	movs	r2, r3
   2428a:	2314      	movs	r3, #20
   2428c:	18fb      	adds	r3, r7, r3
   2428e:	0019      	movs	r1, r3
   24290:	207f      	movs	r0, #127	; 0x7f
   24292:	4b1d      	ldr	r3, [pc, #116]	; (24308 <spi_cmd+0x324>)
   24294:	4798      	blx	r3
   24296:	0003      	movs	r3, r0
   24298:	18db      	adds	r3, r3, r3
   2429a:	b2da      	uxtb	r2, r3
   2429c:	2314      	movs	r3, #20
   2429e:	18fb      	adds	r3, r7, r3
   242a0:	551a      	strb	r2, [r3, r4]
   242a2:	e006      	b.n	242b2 <spi_cmd+0x2ce>
		else
			len-=1;
   242a4:	231f      	movs	r3, #31
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	221f      	movs	r2, #31
   242aa:	18ba      	adds	r2, r7, r2
   242ac:	7812      	ldrb	r2, [r2, #0]
   242ae:	3a01      	subs	r2, #1
   242b0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   242b2:	231f      	movs	r3, #31
   242b4:	18fb      	adds	r3, r7, r3
   242b6:	781b      	ldrb	r3, [r3, #0]
   242b8:	b29a      	uxth	r2, r3
   242ba:	2314      	movs	r3, #20
   242bc:	18fb      	adds	r3, r7, r3
   242be:	0011      	movs	r1, r2
   242c0:	0018      	movs	r0, r3
   242c2:	4b12      	ldr	r3, [pc, #72]	; (2430c <spi_cmd+0x328>)
   242c4:	4798      	blx	r3
   242c6:	1e03      	subs	r3, r0, #0
   242c8:	d012      	beq.n	242f0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   242ca:	2390      	movs	r3, #144	; 0x90
   242cc:	005a      	lsls	r2, r3, #1
   242ce:	4910      	ldr	r1, [pc, #64]	; (24310 <spi_cmd+0x32c>)
   242d0:	4b10      	ldr	r3, [pc, #64]	; (24314 <spi_cmd+0x330>)
   242d2:	0018      	movs	r0, r3
   242d4:	4b10      	ldr	r3, [pc, #64]	; (24318 <spi_cmd+0x334>)
   242d6:	4798      	blx	r3
   242d8:	4b10      	ldr	r3, [pc, #64]	; (2431c <spi_cmd+0x338>)
   242da:	0018      	movs	r0, r3
   242dc:	4b0e      	ldr	r3, [pc, #56]	; (24318 <spi_cmd+0x334>)
   242de:	4798      	blx	r3
   242e0:	4b0f      	ldr	r3, [pc, #60]	; (24320 <spi_cmd+0x33c>)
   242e2:	0018      	movs	r0, r3
   242e4:	4b0c      	ldr	r3, [pc, #48]	; (24318 <spi_cmd+0x334>)
   242e6:	4798      	blx	r3
			result = N_FAIL;
   242e8:	231e      	movs	r3, #30
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	2200      	movs	r2, #0
   242ee:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   242f0:	231e      	movs	r3, #30
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	781b      	ldrb	r3, [r3, #0]
   242f6:	b25b      	sxtb	r3, r3
}
   242f8:	0018      	movs	r0, r3
   242fa:	46bd      	mov	sp, r7
   242fc:	b009      	add	sp, #36	; 0x24
   242fe:	bd90      	pop	{r4, r7, pc}
   24300:	0003ad38 	.word	0x0003ad38
   24304:	200042a8 	.word	0x200042a8
   24308:	00023f95 	.word	0x00023f95
   2430c:	00023edd 	.word	0x00023edd
   24310:	0003adb0 	.word	0x0003adb0
   24314:	0003a7c0 	.word	0x0003a7c0
   24318:	0001e9e9 	.word	0x0001e9e9
   2431c:	0003a7d4 	.word	0x0003a7d4
   24320:	0003a800 	.word	0x0003a800

00024324 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   24324:	b590      	push	{r4, r7, lr}
   24326:	b085      	sub	sp, #20
   24328:	af00      	add	r7, sp, #0
   2432a:	0002      	movs	r2, r0
   2432c:	1dfb      	adds	r3, r7, #7
   2432e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   24330:	230e      	movs	r3, #14
   24332:	18fb      	adds	r3, r7, r3
   24334:	2201      	movs	r2, #1
   24336:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   24338:	4b32      	ldr	r3, [pc, #200]	; (24404 <spi_data_rsp+0xe0>)
   2433a:	781b      	ldrb	r3, [r3, #0]
   2433c:	2b00      	cmp	r3, #0
   2433e:	d104      	bne.n	2434a <spi_data_rsp+0x26>
		len = 2;
   24340:	230f      	movs	r3, #15
   24342:	18fb      	adds	r3, r7, r3
   24344:	2202      	movs	r2, #2
   24346:	701a      	strb	r2, [r3, #0]
   24348:	e003      	b.n	24352 <spi_data_rsp+0x2e>
	else
		len = 3;
   2434a:	230f      	movs	r3, #15
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	2203      	movs	r2, #3
   24350:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   24352:	230f      	movs	r3, #15
   24354:	18fb      	adds	r3, r7, r3
   24356:	781b      	ldrb	r3, [r3, #0]
   24358:	b29a      	uxth	r2, r3
   2435a:	2308      	movs	r3, #8
   2435c:	18fb      	adds	r3, r7, r3
   2435e:	0011      	movs	r1, r2
   24360:	0018      	movs	r0, r3
   24362:	4b29      	ldr	r3, [pc, #164]	; (24408 <spi_data_rsp+0xe4>)
   24364:	4798      	blx	r3
   24366:	1e03      	subs	r3, r0, #0
   24368:	d013      	beq.n	24392 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2436a:	239a      	movs	r3, #154	; 0x9a
   2436c:	005a      	lsls	r2, r3, #1
   2436e:	4927      	ldr	r1, [pc, #156]	; (2440c <spi_data_rsp+0xe8>)
   24370:	4b27      	ldr	r3, [pc, #156]	; (24410 <spi_data_rsp+0xec>)
   24372:	0018      	movs	r0, r3
   24374:	4b27      	ldr	r3, [pc, #156]	; (24414 <spi_data_rsp+0xf0>)
   24376:	4798      	blx	r3
   24378:	4b27      	ldr	r3, [pc, #156]	; (24418 <spi_data_rsp+0xf4>)
   2437a:	0018      	movs	r0, r3
   2437c:	4b25      	ldr	r3, [pc, #148]	; (24414 <spi_data_rsp+0xf0>)
   2437e:	4798      	blx	r3
   24380:	4b26      	ldr	r3, [pc, #152]	; (2441c <spi_data_rsp+0xf8>)
   24382:	0018      	movs	r0, r3
   24384:	4b23      	ldr	r3, [pc, #140]	; (24414 <spi_data_rsp+0xf0>)
   24386:	4798      	blx	r3
		result = N_FAIL;
   24388:	230e      	movs	r3, #14
   2438a:	18fb      	adds	r3, r7, r3
   2438c:	2200      	movs	r2, #0
   2438e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24390:	e030      	b.n	243f4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24392:	230f      	movs	r3, #15
   24394:	18fb      	adds	r3, r7, r3
   24396:	781b      	ldrb	r3, [r3, #0]
   24398:	3b01      	subs	r3, #1
   2439a:	2208      	movs	r2, #8
   2439c:	18ba      	adds	r2, r7, r2
   2439e:	5cd3      	ldrb	r3, [r2, r3]
   243a0:	2b00      	cmp	r3, #0
   243a2:	d108      	bne.n	243b6 <spi_data_rsp+0x92>
   243a4:	230f      	movs	r3, #15
   243a6:	18fb      	adds	r3, r7, r3
   243a8:	781b      	ldrb	r3, [r3, #0]
   243aa:	3b02      	subs	r3, #2
   243ac:	2208      	movs	r2, #8
   243ae:	18ba      	adds	r2, r7, r2
   243b0:	5cd3      	ldrb	r3, [r2, r3]
   243b2:	2bc3      	cmp	r3, #195	; 0xc3
   243b4:	d01e      	beq.n	243f4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   243b6:	233c      	movs	r3, #60	; 0x3c
   243b8:	33ff      	adds	r3, #255	; 0xff
   243ba:	001a      	movs	r2, r3
   243bc:	4913      	ldr	r1, [pc, #76]	; (2440c <spi_data_rsp+0xe8>)
   243be:	4b14      	ldr	r3, [pc, #80]	; (24410 <spi_data_rsp+0xec>)
   243c0:	0018      	movs	r0, r3
   243c2:	4b14      	ldr	r3, [pc, #80]	; (24414 <spi_data_rsp+0xf0>)
   243c4:	4798      	blx	r3
   243c6:	2308      	movs	r3, #8
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	781b      	ldrb	r3, [r3, #0]
   243cc:	0019      	movs	r1, r3
   243ce:	2308      	movs	r3, #8
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	785b      	ldrb	r3, [r3, #1]
   243d4:	001a      	movs	r2, r3
   243d6:	2308      	movs	r3, #8
   243d8:	18fb      	adds	r3, r7, r3
   243da:	789b      	ldrb	r3, [r3, #2]
   243dc:	4810      	ldr	r0, [pc, #64]	; (24420 <spi_data_rsp+0xfc>)
   243de:	4c0d      	ldr	r4, [pc, #52]	; (24414 <spi_data_rsp+0xf0>)
   243e0:	47a0      	blx	r4
   243e2:	4b0e      	ldr	r3, [pc, #56]	; (2441c <spi_data_rsp+0xf8>)
   243e4:	0018      	movs	r0, r3
   243e6:	4b0b      	ldr	r3, [pc, #44]	; (24414 <spi_data_rsp+0xf0>)
   243e8:	4798      	blx	r3
		result = N_FAIL;
   243ea:	230e      	movs	r3, #14
   243ec:	18fb      	adds	r3, r7, r3
   243ee:	2200      	movs	r2, #0
   243f0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   243f2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   243f4:	230e      	movs	r3, #14
   243f6:	18fb      	adds	r3, r7, r3
   243f8:	781b      	ldrb	r3, [r3, #0]
   243fa:	b25b      	sxtb	r3, r3
}
   243fc:	0018      	movs	r0, r3
   243fe:	46bd      	mov	sp, r7
   24400:	b005      	add	sp, #20
   24402:	bd90      	pop	{r4, r7, pc}
   24404:	200042a8 	.word	0x200042a8
   24408:	00023e99 	.word	0x00023e99
   2440c:	0003adb8 	.word	0x0003adb8
   24410:	0003a7c0 	.word	0x0003a7c0
   24414:	0001e9e9 	.word	0x0001e9e9
   24418:	0003a804 	.word	0x0003a804
   2441c:	0003a800 	.word	0x0003a800
   24420:	0003a824 	.word	0x0003a824

00024424 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   24424:	b580      	push	{r7, lr}
   24426:	b084      	sub	sp, #16
   24428:	af00      	add	r7, sp, #0
   2442a:	0002      	movs	r2, r0
   2442c:	1dfb      	adds	r3, r7, #7
   2442e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   24430:	230f      	movs	r3, #15
   24432:	18fb      	adds	r3, r7, r3
   24434:	2201      	movs	r2, #1
   24436:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24438:	1dfb      	adds	r3, r7, #7
   2443a:	781b      	ldrb	r3, [r3, #0]
   2443c:	2bcf      	cmp	r3, #207	; 0xcf
   2443e:	d007      	beq.n	24450 <spi_cmd_rsp+0x2c>
   24440:	1dfb      	adds	r3, r7, #7
   24442:	781b      	ldrb	r3, [r3, #0]
   24444:	2bc5      	cmp	r3, #197	; 0xc5
   24446:	d003      	beq.n	24450 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   24448:	1dfb      	adds	r3, r7, #7
   2444a:	781b      	ldrb	r3, [r3, #0]
   2444c:	2bc6      	cmp	r3, #198	; 0xc6
   2444e:	d10c      	bne.n	2446a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24450:	230d      	movs	r3, #13
   24452:	18fb      	adds	r3, r7, r3
   24454:	2101      	movs	r1, #1
   24456:	0018      	movs	r0, r3
   24458:	4b3b      	ldr	r3, [pc, #236]	; (24548 <spi_cmd_rsp+0x124>)
   2445a:	4798      	blx	r3
   2445c:	1e03      	subs	r3, r0, #0
   2445e:	d004      	beq.n	2446a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   24460:	230f      	movs	r3, #15
   24462:	18fb      	adds	r3, r7, r3
   24464:	2200      	movs	r2, #0
   24466:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24468:	e065      	b.n	24536 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2446a:	230e      	movs	r3, #14
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	220a      	movs	r2, #10
   24470:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24472:	230d      	movs	r3, #13
   24474:	18fb      	adds	r3, r7, r3
   24476:	2101      	movs	r1, #1
   24478:	0018      	movs	r0, r3
   2447a:	4b33      	ldr	r3, [pc, #204]	; (24548 <spi_cmd_rsp+0x124>)
   2447c:	4798      	blx	r3
   2447e:	1e03      	subs	r3, r0, #0
   24480:	d014      	beq.n	244ac <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   24482:	235c      	movs	r3, #92	; 0x5c
   24484:	33ff      	adds	r3, #255	; 0xff
   24486:	001a      	movs	r2, r3
   24488:	4930      	ldr	r1, [pc, #192]	; (2454c <spi_cmd_rsp+0x128>)
   2448a:	4b31      	ldr	r3, [pc, #196]	; (24550 <spi_cmd_rsp+0x12c>)
   2448c:	0018      	movs	r0, r3
   2448e:	4b31      	ldr	r3, [pc, #196]	; (24554 <spi_cmd_rsp+0x130>)
   24490:	4798      	blx	r3
   24492:	4b31      	ldr	r3, [pc, #196]	; (24558 <spi_cmd_rsp+0x134>)
   24494:	0018      	movs	r0, r3
   24496:	4b2f      	ldr	r3, [pc, #188]	; (24554 <spi_cmd_rsp+0x130>)
   24498:	4798      	blx	r3
   2449a:	4b30      	ldr	r3, [pc, #192]	; (2455c <spi_cmd_rsp+0x138>)
   2449c:	0018      	movs	r0, r3
   2449e:	4b2d      	ldr	r3, [pc, #180]	; (24554 <spi_cmd_rsp+0x130>)
   244a0:	4798      	blx	r3
			result = N_FAIL;
   244a2:	230f      	movs	r3, #15
   244a4:	18fb      	adds	r3, r7, r3
   244a6:	2200      	movs	r2, #0
   244a8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   244aa:	e044      	b.n	24536 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   244ac:	230d      	movs	r3, #13
   244ae:	18fb      	adds	r3, r7, r3
   244b0:	781b      	ldrb	r3, [r3, #0]
   244b2:	1dfa      	adds	r2, r7, #7
   244b4:	7812      	ldrb	r2, [r2, #0]
   244b6:	429a      	cmp	r2, r3
   244b8:	d00b      	beq.n	244d2 <spi_cmd_rsp+0xae>
   244ba:	230e      	movs	r3, #14
   244bc:	18fb      	adds	r3, r7, r3
   244be:	781b      	ldrb	r3, [r3, #0]
   244c0:	b25b      	sxtb	r3, r3
   244c2:	b2da      	uxtb	r2, r3
   244c4:	3a01      	subs	r2, #1
   244c6:	b2d1      	uxtb	r1, r2
   244c8:	220e      	movs	r2, #14
   244ca:	18ba      	adds	r2, r7, r2
   244cc:	7011      	strb	r1, [r2, #0]
   244ce:	2b00      	cmp	r3, #0
   244d0:	dccf      	bgt.n	24472 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   244d2:	230e      	movs	r3, #14
   244d4:	18fb      	adds	r3, r7, r3
   244d6:	220a      	movs	r2, #10
   244d8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   244da:	230d      	movs	r3, #13
   244dc:	18fb      	adds	r3, r7, r3
   244de:	2101      	movs	r1, #1
   244e0:	0018      	movs	r0, r3
   244e2:	4b19      	ldr	r3, [pc, #100]	; (24548 <spi_cmd_rsp+0x124>)
   244e4:	4798      	blx	r3
   244e6:	1e03      	subs	r3, r0, #0
   244e8:	d014      	beq.n	24514 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   244ea:	236a      	movs	r3, #106	; 0x6a
   244ec:	33ff      	adds	r3, #255	; 0xff
   244ee:	001a      	movs	r2, r3
   244f0:	4916      	ldr	r1, [pc, #88]	; (2454c <spi_cmd_rsp+0x128>)
   244f2:	4b17      	ldr	r3, [pc, #92]	; (24550 <spi_cmd_rsp+0x12c>)
   244f4:	0018      	movs	r0, r3
   244f6:	4b17      	ldr	r3, [pc, #92]	; (24554 <spi_cmd_rsp+0x130>)
   244f8:	4798      	blx	r3
   244fa:	4b17      	ldr	r3, [pc, #92]	; (24558 <spi_cmd_rsp+0x134>)
   244fc:	0018      	movs	r0, r3
   244fe:	4b15      	ldr	r3, [pc, #84]	; (24554 <spi_cmd_rsp+0x130>)
   24500:	4798      	blx	r3
   24502:	4b16      	ldr	r3, [pc, #88]	; (2455c <spi_cmd_rsp+0x138>)
   24504:	0018      	movs	r0, r3
   24506:	4b13      	ldr	r3, [pc, #76]	; (24554 <spi_cmd_rsp+0x130>)
   24508:	4798      	blx	r3
			result = N_FAIL;
   2450a:	230f      	movs	r3, #15
   2450c:	18fb      	adds	r3, r7, r3
   2450e:	2200      	movs	r2, #0
   24510:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24512:	e010      	b.n	24536 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   24514:	230d      	movs	r3, #13
   24516:	18fb      	adds	r3, r7, r3
   24518:	781b      	ldrb	r3, [r3, #0]
   2451a:	2b00      	cmp	r3, #0
   2451c:	d00b      	beq.n	24536 <spi_cmd_rsp+0x112>
   2451e:	230e      	movs	r3, #14
   24520:	18fb      	adds	r3, r7, r3
   24522:	781b      	ldrb	r3, [r3, #0]
   24524:	b25b      	sxtb	r3, r3
   24526:	b2da      	uxtb	r2, r3
   24528:	3a01      	subs	r2, #1
   2452a:	b2d1      	uxtb	r1, r2
   2452c:	220e      	movs	r2, #14
   2452e:	18ba      	adds	r2, r7, r2
   24530:	7011      	strb	r1, [r2, #0]
   24532:	2b00      	cmp	r3, #0
   24534:	dcd1      	bgt.n	244da <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   24536:	230f      	movs	r3, #15
   24538:	18fb      	adds	r3, r7, r3
   2453a:	781b      	ldrb	r3, [r3, #0]
   2453c:	b25b      	sxtb	r3, r3
}
   2453e:	0018      	movs	r0, r3
   24540:	46bd      	mov	sp, r7
   24542:	b004      	add	sp, #16
   24544:	bd80      	pop	{r7, pc}
   24546:	46c0      	nop			; (mov r8, r8)
   24548:	00023e99 	.word	0x00023e99
   2454c:	0003adc8 	.word	0x0003adc8
   24550:	0003a7c0 	.word	0x0003a7c0
   24554:	0001e9e9 	.word	0x0001e9e9
   24558:	0003a854 	.word	0x0003a854
   2455c:	0003a800 	.word	0x0003a800

00024560 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24560:	b590      	push	{r4, r7, lr}
   24562:	b09f      	sub	sp, #124	; 0x7c
   24564:	af00      	add	r7, sp, #0
   24566:	60b9      	str	r1, [r7, #8]
   24568:	607a      	str	r2, [r7, #4]
   2456a:	603b      	str	r3, [r7, #0]
   2456c:	230f      	movs	r3, #15
   2456e:	18fb      	adds	r3, r7, r3
   24570:	1c02      	adds	r2, r0, #0
   24572:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24574:	2300      	movs	r3, #0
   24576:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   24578:	2301      	movs	r3, #1
   2457a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2457c:	2338      	movs	r3, #56	; 0x38
   2457e:	18fb      	adds	r3, r7, r3
   24580:	220f      	movs	r2, #15
   24582:	18ba      	adds	r2, r7, r2
   24584:	7812      	ldrb	r2, [r2, #0]
   24586:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24588:	230f      	movs	r3, #15
   2458a:	18fb      	adds	r3, r7, r3
   2458c:	781b      	ldrb	r3, [r3, #0]
   2458e:	3bc1      	subs	r3, #193	; 0xc1
   24590:	2b0e      	cmp	r3, #14
   24592:	d900      	bls.n	24596 <spi_cmd_complete+0x36>
   24594:	e103      	b.n	2479e <spi_cmd_complete+0x23e>
   24596:	009a      	lsls	r2, r3, #2
   24598:	4bd1      	ldr	r3, [pc, #836]	; (248e0 <spi_cmd_complete+0x380>)
   2459a:	18d3      	adds	r3, r2, r3
   2459c:	681b      	ldr	r3, [r3, #0]
   2459e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   245a0:	68bb      	ldr	r3, [r7, #8]
   245a2:	0c1b      	lsrs	r3, r3, #16
   245a4:	b2da      	uxtb	r2, r3
   245a6:	2338      	movs	r3, #56	; 0x38
   245a8:	18fb      	adds	r3, r7, r3
   245aa:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   245ac:	68bb      	ldr	r3, [r7, #8]
   245ae:	0a1b      	lsrs	r3, r3, #8
   245b0:	b2da      	uxtb	r2, r3
   245b2:	2338      	movs	r3, #56	; 0x38
   245b4:	18fb      	adds	r3, r7, r3
   245b6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   245b8:	68bb      	ldr	r3, [r7, #8]
   245ba:	b2da      	uxtb	r2, r3
   245bc:	2338      	movs	r3, #56	; 0x38
   245be:	18fb      	adds	r3, r7, r3
   245c0:	70da      	strb	r2, [r3, #3]
		len = 5;
   245c2:	2305      	movs	r3, #5
   245c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   245c6:	e0ed      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   245c8:	68bb      	ldr	r3, [r7, #8]
   245ca:	0a1b      	lsrs	r3, r3, #8
   245cc:	b2da      	uxtb	r2, r3
   245ce:	2338      	movs	r3, #56	; 0x38
   245d0:	18fb      	adds	r3, r7, r3
   245d2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   245d4:	2388      	movs	r3, #136	; 0x88
   245d6:	18fb      	adds	r3, r7, r3
   245d8:	781b      	ldrb	r3, [r3, #0]
   245da:	2b01      	cmp	r3, #1
   245dc:	d109      	bne.n	245f2 <spi_cmd_complete+0x92>
   245de:	2338      	movs	r3, #56	; 0x38
   245e0:	18fb      	adds	r3, r7, r3
   245e2:	785b      	ldrb	r3, [r3, #1]
   245e4:	2280      	movs	r2, #128	; 0x80
   245e6:	4252      	negs	r2, r2
   245e8:	4313      	orrs	r3, r2
   245ea:	b2da      	uxtb	r2, r3
   245ec:	2338      	movs	r3, #56	; 0x38
   245ee:	18fb      	adds	r3, r7, r3
   245f0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   245f2:	68bb      	ldr	r3, [r7, #8]
   245f4:	b2da      	uxtb	r2, r3
   245f6:	2338      	movs	r3, #56	; 0x38
   245f8:	18fb      	adds	r3, r7, r3
   245fa:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   245fc:	2338      	movs	r3, #56	; 0x38
   245fe:	18fb      	adds	r3, r7, r3
   24600:	2200      	movs	r2, #0
   24602:	70da      	strb	r2, [r3, #3]
		len = 5;
   24604:	2305      	movs	r3, #5
   24606:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24608:	e0cc      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2460a:	2338      	movs	r3, #56	; 0x38
   2460c:	18fb      	adds	r3, r7, r3
   2460e:	2200      	movs	r2, #0
   24610:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24612:	2338      	movs	r3, #56	; 0x38
   24614:	18fb      	adds	r3, r7, r3
   24616:	2200      	movs	r2, #0
   24618:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2461a:	2338      	movs	r3, #56	; 0x38
   2461c:	18fb      	adds	r3, r7, r3
   2461e:	2200      	movs	r2, #0
   24620:	70da      	strb	r2, [r3, #3]
		len = 5;
   24622:	2305      	movs	r3, #5
   24624:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24626:	e0bd      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   24628:	2338      	movs	r3, #56	; 0x38
   2462a:	18fb      	adds	r3, r7, r3
   2462c:	2200      	movs	r2, #0
   2462e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24630:	2338      	movs	r3, #56	; 0x38
   24632:	18fb      	adds	r3, r7, r3
   24634:	2200      	movs	r2, #0
   24636:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24638:	2338      	movs	r3, #56	; 0x38
   2463a:	18fb      	adds	r3, r7, r3
   2463c:	2200      	movs	r2, #0
   2463e:	70da      	strb	r2, [r3, #3]
		len = 5;
   24640:	2305      	movs	r3, #5
   24642:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24644:	e0ae      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   24646:	2338      	movs	r3, #56	; 0x38
   24648:	18fb      	adds	r3, r7, r3
   2464a:	22ff      	movs	r2, #255	; 0xff
   2464c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2464e:	2338      	movs	r3, #56	; 0x38
   24650:	18fb      	adds	r3, r7, r3
   24652:	22ff      	movs	r2, #255	; 0xff
   24654:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   24656:	2338      	movs	r3, #56	; 0x38
   24658:	18fb      	adds	r3, r7, r3
   2465a:	22ff      	movs	r2, #255	; 0xff
   2465c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2465e:	2305      	movs	r3, #5
   24660:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24662:	e09f      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24664:	68bb      	ldr	r3, [r7, #8]
   24666:	0c1b      	lsrs	r3, r3, #16
   24668:	b2da      	uxtb	r2, r3
   2466a:	2338      	movs	r3, #56	; 0x38
   2466c:	18fb      	adds	r3, r7, r3
   2466e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24670:	68bb      	ldr	r3, [r7, #8]
   24672:	0a1b      	lsrs	r3, r3, #8
   24674:	b2da      	uxtb	r2, r3
   24676:	2338      	movs	r3, #56	; 0x38
   24678:	18fb      	adds	r3, r7, r3
   2467a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2467c:	68bb      	ldr	r3, [r7, #8]
   2467e:	b2da      	uxtb	r2, r3
   24680:	2338      	movs	r3, #56	; 0x38
   24682:	18fb      	adds	r3, r7, r3
   24684:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24686:	683b      	ldr	r3, [r7, #0]
   24688:	0a1b      	lsrs	r3, r3, #8
   2468a:	b2da      	uxtb	r2, r3
   2468c:	2338      	movs	r3, #56	; 0x38
   2468e:	18fb      	adds	r3, r7, r3
   24690:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24692:	683b      	ldr	r3, [r7, #0]
   24694:	b2da      	uxtb	r2, r3
   24696:	2338      	movs	r3, #56	; 0x38
   24698:	18fb      	adds	r3, r7, r3
   2469a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2469c:	2307      	movs	r3, #7
   2469e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246a0:	e080      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   246a2:	68bb      	ldr	r3, [r7, #8]
   246a4:	0c1b      	lsrs	r3, r3, #16
   246a6:	b2da      	uxtb	r2, r3
   246a8:	2338      	movs	r3, #56	; 0x38
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   246ae:	68bb      	ldr	r3, [r7, #8]
   246b0:	0a1b      	lsrs	r3, r3, #8
   246b2:	b2da      	uxtb	r2, r3
   246b4:	2338      	movs	r3, #56	; 0x38
   246b6:	18fb      	adds	r3, r7, r3
   246b8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   246ba:	68bb      	ldr	r3, [r7, #8]
   246bc:	b2da      	uxtb	r2, r3
   246be:	2338      	movs	r3, #56	; 0x38
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   246c4:	683b      	ldr	r3, [r7, #0]
   246c6:	0c1b      	lsrs	r3, r3, #16
   246c8:	b2da      	uxtb	r2, r3
   246ca:	2338      	movs	r3, #56	; 0x38
   246cc:	18fb      	adds	r3, r7, r3
   246ce:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   246d0:	683b      	ldr	r3, [r7, #0]
   246d2:	0a1b      	lsrs	r3, r3, #8
   246d4:	b2da      	uxtb	r2, r3
   246d6:	2338      	movs	r3, #56	; 0x38
   246d8:	18fb      	adds	r3, r7, r3
   246da:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   246dc:	683b      	ldr	r3, [r7, #0]
   246de:	b2da      	uxtb	r2, r3
   246e0:	2338      	movs	r3, #56	; 0x38
   246e2:	18fb      	adds	r3, r7, r3
   246e4:	719a      	strb	r2, [r3, #6]
		len = 8;
   246e6:	2308      	movs	r3, #8
   246e8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246ea:	e05b      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   246ec:	68bb      	ldr	r3, [r7, #8]
   246ee:	0a1b      	lsrs	r3, r3, #8
   246f0:	b2da      	uxtb	r2, r3
   246f2:	2338      	movs	r3, #56	; 0x38
   246f4:	18fb      	adds	r3, r7, r3
   246f6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   246f8:	2388      	movs	r3, #136	; 0x88
   246fa:	18fb      	adds	r3, r7, r3
   246fc:	781b      	ldrb	r3, [r3, #0]
   246fe:	2b01      	cmp	r3, #1
   24700:	d109      	bne.n	24716 <spi_cmd_complete+0x1b6>
   24702:	2338      	movs	r3, #56	; 0x38
   24704:	18fb      	adds	r3, r7, r3
   24706:	785b      	ldrb	r3, [r3, #1]
   24708:	2280      	movs	r2, #128	; 0x80
   2470a:	4252      	negs	r2, r2
   2470c:	4313      	orrs	r3, r2
   2470e:	b2da      	uxtb	r2, r3
   24710:	2338      	movs	r3, #56	; 0x38
   24712:	18fb      	adds	r3, r7, r3
   24714:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   24716:	68bb      	ldr	r3, [r7, #8]
   24718:	b2da      	uxtb	r2, r3
   2471a:	2338      	movs	r3, #56	; 0x38
   2471c:	18fb      	adds	r3, r7, r3
   2471e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24720:	687b      	ldr	r3, [r7, #4]
   24722:	78da      	ldrb	r2, [r3, #3]
   24724:	2338      	movs	r3, #56	; 0x38
   24726:	18fb      	adds	r3, r7, r3
   24728:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2472a:	687b      	ldr	r3, [r7, #4]
   2472c:	789a      	ldrb	r2, [r3, #2]
   2472e:	2338      	movs	r3, #56	; 0x38
   24730:	18fb      	adds	r3, r7, r3
   24732:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24734:	687b      	ldr	r3, [r7, #4]
   24736:	785a      	ldrb	r2, [r3, #1]
   24738:	2338      	movs	r3, #56	; 0x38
   2473a:	18fb      	adds	r3, r7, r3
   2473c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2473e:	687b      	ldr	r3, [r7, #4]
   24740:	781a      	ldrb	r2, [r3, #0]
   24742:	2338      	movs	r3, #56	; 0x38
   24744:	18fb      	adds	r3, r7, r3
   24746:	719a      	strb	r2, [r3, #6]
		len = 8;
   24748:	2308      	movs	r3, #8
   2474a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2474c:	e02a      	b.n	247a4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2474e:	68bb      	ldr	r3, [r7, #8]
   24750:	0c1b      	lsrs	r3, r3, #16
   24752:	b2da      	uxtb	r2, r3
   24754:	2338      	movs	r3, #56	; 0x38
   24756:	18fb      	adds	r3, r7, r3
   24758:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2475a:	68bb      	ldr	r3, [r7, #8]
   2475c:	0a1b      	lsrs	r3, r3, #8
   2475e:	b2da      	uxtb	r2, r3
   24760:	2338      	movs	r3, #56	; 0x38
   24762:	18fb      	adds	r3, r7, r3
   24764:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   24766:	68bb      	ldr	r3, [r7, #8]
   24768:	b2da      	uxtb	r2, r3
   2476a:	2338      	movs	r3, #56	; 0x38
   2476c:	18fb      	adds	r3, r7, r3
   2476e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24770:	687b      	ldr	r3, [r7, #4]
   24772:	78da      	ldrb	r2, [r3, #3]
   24774:	2338      	movs	r3, #56	; 0x38
   24776:	18fb      	adds	r3, r7, r3
   24778:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2477a:	687b      	ldr	r3, [r7, #4]
   2477c:	789a      	ldrb	r2, [r3, #2]
   2477e:	2338      	movs	r3, #56	; 0x38
   24780:	18fb      	adds	r3, r7, r3
   24782:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24784:	687b      	ldr	r3, [r7, #4]
   24786:	785a      	ldrb	r2, [r3, #1]
   24788:	2338      	movs	r3, #56	; 0x38
   2478a:	18fb      	adds	r3, r7, r3
   2478c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2478e:	687b      	ldr	r3, [r7, #4]
   24790:	781a      	ldrb	r2, [r3, #0]
   24792:	2338      	movs	r3, #56	; 0x38
   24794:	18fb      	adds	r3, r7, r3
   24796:	71da      	strb	r2, [r3, #7]
		len = 9;
   24798:	2309      	movs	r3, #9
   2479a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2479c:	e002      	b.n	247a4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2479e:	2300      	movs	r3, #0
   247a0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   247a2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   247a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   247a6:	2b01      	cmp	r3, #1
   247a8:	d001      	beq.n	247ae <spi_cmd_complete+0x24e>
		return result;
   247aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   247ac:	e33a      	b.n	24e24 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   247ae:	4b4d      	ldr	r3, [pc, #308]	; (248e4 <spi_cmd_complete+0x384>)
   247b0:	781b      	ldrb	r3, [r3, #0]
   247b2:	2b00      	cmp	r3, #0
   247b4:	d111      	bne.n	247da <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   247b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247b8:	1e5c      	subs	r4, r3, #1
   247ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247bc:	3b01      	subs	r3, #1
   247be:	001a      	movs	r2, r3
   247c0:	2338      	movs	r3, #56	; 0x38
   247c2:	18fb      	adds	r3, r7, r3
   247c4:	0019      	movs	r1, r3
   247c6:	207f      	movs	r0, #127	; 0x7f
   247c8:	4b47      	ldr	r3, [pc, #284]	; (248e8 <spi_cmd_complete+0x388>)
   247ca:	4798      	blx	r3
   247cc:	0003      	movs	r3, r0
   247ce:	18db      	adds	r3, r3, r3
   247d0:	b2da      	uxtb	r2, r3
   247d2:	2338      	movs	r3, #56	; 0x38
   247d4:	18fb      	adds	r3, r7, r3
   247d6:	551a      	strb	r2, [r3, r4]
   247d8:	e002      	b.n	247e0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   247da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   247dc:	3b01      	subs	r3, #1
   247de:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   247e0:	230f      	movs	r3, #15
   247e2:	18fb      	adds	r3, r7, r3
   247e4:	781b      	ldrb	r3, [r3, #0]
   247e6:	2bcf      	cmp	r3, #207	; 0xcf
   247e8:	d009      	beq.n	247fe <spi_cmd_complete+0x29e>
   247ea:	230f      	movs	r3, #15
   247ec:	18fb      	adds	r3, r7, r3
   247ee:	781b      	ldrb	r3, [r3, #0]
   247f0:	2bc5      	cmp	r3, #197	; 0xc5
   247f2:	d004      	beq.n	247fe <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   247f4:	230f      	movs	r3, #15
   247f6:	18fb      	adds	r3, r7, r3
   247f8:	781b      	ldrb	r3, [r3, #0]
   247fa:	2bc6      	cmp	r3, #198	; 0xc6
   247fc:	d103      	bne.n	24806 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   247fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24800:	3306      	adds	r3, #6
   24802:	673b      	str	r3, [r7, #112]	; 0x70
   24804:	e018      	b.n	24838 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24806:	230f      	movs	r3, #15
   24808:	18fb      	adds	r3, r7, r3
   2480a:	781b      	ldrb	r3, [r3, #0]
   2480c:	2bc4      	cmp	r3, #196	; 0xc4
   2480e:	d004      	beq.n	2481a <spi_cmd_complete+0x2ba>
   24810:	230f      	movs	r3, #15
   24812:	18fb      	adds	r3, r7, r3
   24814:	781b      	ldrb	r3, [r3, #0]
   24816:	2bca      	cmp	r3, #202	; 0xca
   24818:	d10b      	bne.n	24832 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2481a:	4b32      	ldr	r3, [pc, #200]	; (248e4 <spi_cmd_complete+0x384>)
   2481c:	781b      	ldrb	r3, [r3, #0]
   2481e:	2b00      	cmp	r3, #0
   24820:	d103      	bne.n	2482a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24824:	330c      	adds	r3, #12
   24826:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24828:	e006      	b.n	24838 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2482c:	330a      	adds	r3, #10
   2482e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24830:	e002      	b.n	24838 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24834:	3305      	adds	r3, #5
   24836:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2483a:	2b20      	cmp	r3, #32
   2483c:	d914      	bls.n	24868 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2483e:	23f7      	movs	r3, #247	; 0xf7
   24840:	005a      	lsls	r2, r3, #1
   24842:	492a      	ldr	r1, [pc, #168]	; (248ec <spi_cmd_complete+0x38c>)
   24844:	4b2a      	ldr	r3, [pc, #168]	; (248f0 <spi_cmd_complete+0x390>)
   24846:	0018      	movs	r0, r3
   24848:	4b2a      	ldr	r3, [pc, #168]	; (248f4 <spi_cmd_complete+0x394>)
   2484a:	4798      	blx	r3
   2484c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2484e:	4b2a      	ldr	r3, [pc, #168]	; (248f8 <spi_cmd_complete+0x398>)
   24850:	2220      	movs	r2, #32
   24852:	0018      	movs	r0, r3
   24854:	4b27      	ldr	r3, [pc, #156]	; (248f4 <spi_cmd_complete+0x394>)
   24856:	4798      	blx	r3
   24858:	4b28      	ldr	r3, [pc, #160]	; (248fc <spi_cmd_complete+0x39c>)
   2485a:	0018      	movs	r0, r3
   2485c:	4b25      	ldr	r3, [pc, #148]	; (248f4 <spi_cmd_complete+0x394>)
   2485e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24860:	2300      	movs	r3, #0
   24862:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24866:	e2dd      	b.n	24e24 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24868:	2377      	movs	r3, #119	; 0x77
   2486a:	18fb      	adds	r3, r7, r3
   2486c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2486e:	701a      	strb	r2, [r3, #0]
   24870:	e00d      	b.n	2488e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24872:	2377      	movs	r3, #119	; 0x77
   24874:	18fb      	adds	r3, r7, r3
   24876:	781b      	ldrb	r3, [r3, #0]
   24878:	2238      	movs	r2, #56	; 0x38
   2487a:	18ba      	adds	r2, r7, r2
   2487c:	2100      	movs	r1, #0
   2487e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24880:	2377      	movs	r3, #119	; 0x77
   24882:	18fb      	adds	r3, r7, r3
   24884:	781a      	ldrb	r2, [r3, #0]
   24886:	2377      	movs	r3, #119	; 0x77
   24888:	18fb      	adds	r3, r7, r3
   2488a:	3201      	adds	r2, #1
   2488c:	701a      	strb	r2, [r3, #0]
   2488e:	2377      	movs	r3, #119	; 0x77
   24890:	18fb      	adds	r3, r7, r3
   24892:	781a      	ldrb	r2, [r3, #0]
   24894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24896:	429a      	cmp	r2, r3
   24898:	d3eb      	bcc.n	24872 <spi_cmd_complete+0x312>
	}
	rix = len;
   2489a:	2376      	movs	r3, #118	; 0x76
   2489c:	18fb      	adds	r3, r7, r3
   2489e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   248a0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   248a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   248a4:	b29a      	uxth	r2, r3
   248a6:	2318      	movs	r3, #24
   248a8:	18f9      	adds	r1, r7, r3
   248aa:	2338      	movs	r3, #56	; 0x38
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	0018      	movs	r0, r3
   248b0:	4b13      	ldr	r3, [pc, #76]	; (24900 <spi_cmd_complete+0x3a0>)
   248b2:	4798      	blx	r3
   248b4:	1e03      	subs	r3, r0, #0
   248b6:	d027      	beq.n	24908 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   248b8:	23fa      	movs	r3, #250	; 0xfa
   248ba:	33ff      	adds	r3, #255	; 0xff
   248bc:	001a      	movs	r2, r3
   248be:	490b      	ldr	r1, [pc, #44]	; (248ec <spi_cmd_complete+0x38c>)
   248c0:	4b0b      	ldr	r3, [pc, #44]	; (248f0 <spi_cmd_complete+0x390>)
   248c2:	0018      	movs	r0, r3
   248c4:	4b0b      	ldr	r3, [pc, #44]	; (248f4 <spi_cmd_complete+0x394>)
   248c6:	4798      	blx	r3
   248c8:	4b0e      	ldr	r3, [pc, #56]	; (24904 <spi_cmd_complete+0x3a4>)
   248ca:	0018      	movs	r0, r3
   248cc:	4b09      	ldr	r3, [pc, #36]	; (248f4 <spi_cmd_complete+0x394>)
   248ce:	4798      	blx	r3
   248d0:	4b0a      	ldr	r3, [pc, #40]	; (248fc <spi_cmd_complete+0x39c>)
   248d2:	0018      	movs	r0, r3
   248d4:	4b07      	ldr	r3, [pc, #28]	; (248f4 <spi_cmd_complete+0x394>)
   248d6:	4798      	blx	r3
		result = N_FAIL;
   248d8:	2300      	movs	r3, #0
   248da:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   248dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   248de:	e2a1      	b.n	24e24 <spi_cmd_complete+0x8c4>
   248e0:	0003ad74 	.word	0x0003ad74
   248e4:	200042a8 	.word	0x200042a8
   248e8:	00023f95 	.word	0x00023f95
   248ec:	0003add4 	.word	0x0003add4
   248f0:	0003a7c0 	.word	0x0003a7c0
   248f4:	0001e9e9 	.word	0x0001e9e9
   248f8:	0003a888 	.word	0x0003a888
   248fc:	0003a800 	.word	0x0003a800
   24900:	00023f21 	.word	0x00023f21
   24904:	0003a7d4 	.word	0x0003a7d4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24908:	230f      	movs	r3, #15
   2490a:	18fb      	adds	r3, r7, r3
   2490c:	781b      	ldrb	r3, [r3, #0]
   2490e:	2bcf      	cmp	r3, #207	; 0xcf
   24910:	d009      	beq.n	24926 <spi_cmd_complete+0x3c6>
   24912:	230f      	movs	r3, #15
   24914:	18fb      	adds	r3, r7, r3
   24916:	781b      	ldrb	r3, [r3, #0]
   24918:	2bc5      	cmp	r3, #197	; 0xc5
   2491a:	d004      	beq.n	24926 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   2491c:	230f      	movs	r3, #15
   2491e:	18fb      	adds	r3, r7, r3
   24920:	781b      	ldrb	r3, [r3, #0]
   24922:	2bc6      	cmp	r3, #198	; 0xc6
   24924:	d106      	bne.n	24934 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24926:	2376      	movs	r3, #118	; 0x76
   24928:	18fb      	adds	r3, r7, r3
   2492a:	781a      	ldrb	r2, [r3, #0]
   2492c:	2376      	movs	r3, #118	; 0x76
   2492e:	18fb      	adds	r3, r7, r3
   24930:	3201      	adds	r2, #1
   24932:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24934:	2376      	movs	r3, #118	; 0x76
   24936:	18fb      	adds	r3, r7, r3
   24938:	781b      	ldrb	r3, [r3, #0]
   2493a:	2276      	movs	r2, #118	; 0x76
   2493c:	18ba      	adds	r2, r7, r2
   2493e:	1c59      	adds	r1, r3, #1
   24940:	7011      	strb	r1, [r2, #0]
   24942:	001a      	movs	r2, r3
   24944:	2318      	movs	r3, #24
   24946:	18fb      	adds	r3, r7, r3
   24948:	5c9a      	ldrb	r2, [r3, r2]
   2494a:	2317      	movs	r3, #23
   2494c:	18fb      	adds	r3, r7, r3
   2494e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24950:	2317      	movs	r3, #23
   24952:	18fb      	adds	r3, r7, r3
   24954:	781b      	ldrb	r3, [r3, #0]
   24956:	220f      	movs	r2, #15
   24958:	18ba      	adds	r2, r7, r2
   2495a:	7812      	ldrb	r2, [r2, #0]
   2495c:	429a      	cmp	r2, r3
   2495e:	d018      	beq.n	24992 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24960:	4add      	ldr	r2, [pc, #884]	; (24cd8 <spi_cmd_complete+0x778>)
   24962:	49de      	ldr	r1, [pc, #888]	; (24cdc <spi_cmd_complete+0x77c>)
   24964:	4bde      	ldr	r3, [pc, #888]	; (24ce0 <spi_cmd_complete+0x780>)
   24966:	0018      	movs	r0, r3
   24968:	4bde      	ldr	r3, [pc, #888]	; (24ce4 <spi_cmd_complete+0x784>)
   2496a:	4798      	blx	r3
   2496c:	230f      	movs	r3, #15
   2496e:	18fb      	adds	r3, r7, r3
   24970:	7819      	ldrb	r1, [r3, #0]
   24972:	2317      	movs	r3, #23
   24974:	18fb      	adds	r3, r7, r3
   24976:	781b      	ldrb	r3, [r3, #0]
   24978:	001a      	movs	r2, r3
   2497a:	4bdb      	ldr	r3, [pc, #876]	; (24ce8 <spi_cmd_complete+0x788>)
   2497c:	0018      	movs	r0, r3
   2497e:	4bd9      	ldr	r3, [pc, #868]	; (24ce4 <spi_cmd_complete+0x784>)
   24980:	4798      	blx	r3
   24982:	4bda      	ldr	r3, [pc, #872]	; (24cec <spi_cmd_complete+0x78c>)
   24984:	0018      	movs	r0, r3
   24986:	4bd7      	ldr	r3, [pc, #860]	; (24ce4 <spi_cmd_complete+0x784>)
   24988:	4798      	blx	r3
		result = N_FAIL;
   2498a:	2300      	movs	r3, #0
   2498c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2498e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24990:	e248      	b.n	24e24 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24992:	2376      	movs	r3, #118	; 0x76
   24994:	18fb      	adds	r3, r7, r3
   24996:	781b      	ldrb	r3, [r3, #0]
   24998:	2276      	movs	r2, #118	; 0x76
   2499a:	18ba      	adds	r2, r7, r2
   2499c:	1c59      	adds	r1, r3, #1
   2499e:	7011      	strb	r1, [r2, #0]
   249a0:	001a      	movs	r2, r3
   249a2:	2318      	movs	r3, #24
   249a4:	18fb      	adds	r3, r7, r3
   249a6:	5c9a      	ldrb	r2, [r3, r2]
   249a8:	2317      	movs	r3, #23
   249aa:	18fb      	adds	r3, r7, r3
   249ac:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   249ae:	2317      	movs	r3, #23
   249b0:	18fb      	adds	r3, r7, r3
   249b2:	781b      	ldrb	r3, [r3, #0]
   249b4:	2b00      	cmp	r3, #0
   249b6:	d016      	beq.n	249e6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   249b8:	4acd      	ldr	r2, [pc, #820]	; (24cf0 <spi_cmd_complete+0x790>)
   249ba:	49c8      	ldr	r1, [pc, #800]	; (24cdc <spi_cmd_complete+0x77c>)
   249bc:	4bc8      	ldr	r3, [pc, #800]	; (24ce0 <spi_cmd_complete+0x780>)
   249be:	0018      	movs	r0, r3
   249c0:	4bc8      	ldr	r3, [pc, #800]	; (24ce4 <spi_cmd_complete+0x784>)
   249c2:	4798      	blx	r3
   249c4:	2317      	movs	r3, #23
   249c6:	18fb      	adds	r3, r7, r3
   249c8:	781b      	ldrb	r3, [r3, #0]
   249ca:	001a      	movs	r2, r3
   249cc:	4bc9      	ldr	r3, [pc, #804]	; (24cf4 <spi_cmd_complete+0x794>)
   249ce:	0011      	movs	r1, r2
   249d0:	0018      	movs	r0, r3
   249d2:	4bc4      	ldr	r3, [pc, #784]	; (24ce4 <spi_cmd_complete+0x784>)
   249d4:	4798      	blx	r3
   249d6:	4bc5      	ldr	r3, [pc, #788]	; (24cec <spi_cmd_complete+0x78c>)
   249d8:	0018      	movs	r0, r3
   249da:	4bc2      	ldr	r3, [pc, #776]	; (24ce4 <spi_cmd_complete+0x784>)
   249dc:	4798      	blx	r3
		result = N_FAIL;
   249de:	2300      	movs	r3, #0
   249e0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   249e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   249e4:	e21e      	b.n	24e24 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   249e6:	230f      	movs	r3, #15
   249e8:	18fb      	adds	r3, r7, r3
   249ea:	781b      	ldrb	r3, [r3, #0]
   249ec:	2bc4      	cmp	r3, #196	; 0xc4
   249ee:	d00f      	beq.n	24a10 <spi_cmd_complete+0x4b0>
   249f0:	230f      	movs	r3, #15
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	781b      	ldrb	r3, [r3, #0]
   249f6:	2bca      	cmp	r3, #202	; 0xca
   249f8:	d00a      	beq.n	24a10 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   249fa:	230f      	movs	r3, #15
   249fc:	18fb      	adds	r3, r7, r3
   249fe:	781b      	ldrb	r3, [r3, #0]
   24a00:	2bc2      	cmp	r3, #194	; 0xc2
   24a02:	d005      	beq.n	24a10 <spi_cmd_complete+0x4b0>
   24a04:	230f      	movs	r3, #15
   24a06:	18fb      	adds	r3, r7, r3
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	2bc8      	cmp	r3, #200	; 0xc8
   24a0c:	d000      	beq.n	24a10 <spi_cmd_complete+0x4b0>
   24a0e:	e208      	b.n	24e22 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24a10:	230a      	movs	r3, #10
   24a12:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24a14:	2376      	movs	r3, #118	; 0x76
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	781a      	ldrb	r2, [r3, #0]
   24a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a1c:	429a      	cmp	r2, r3
   24a1e:	d218      	bcs.n	24a52 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24a20:	2376      	movs	r3, #118	; 0x76
   24a22:	18fb      	adds	r3, r7, r3
   24a24:	781b      	ldrb	r3, [r3, #0]
   24a26:	2276      	movs	r2, #118	; 0x76
   24a28:	18ba      	adds	r2, r7, r2
   24a2a:	1c59      	adds	r1, r3, #1
   24a2c:	7011      	strb	r1, [r2, #0]
   24a2e:	001a      	movs	r2, r3
   24a30:	2318      	movs	r3, #24
   24a32:	18fb      	adds	r3, r7, r3
   24a34:	5c9a      	ldrb	r2, [r3, r2]
   24a36:	2317      	movs	r3, #23
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24a3c:	2317      	movs	r3, #23
   24a3e:	18fb      	adds	r3, r7, r3
   24a40:	781b      	ldrb	r3, [r3, #0]
   24a42:	091b      	lsrs	r3, r3, #4
   24a44:	b2db      	uxtb	r3, r3
   24a46:	001a      	movs	r2, r3
   24a48:	230f      	movs	r3, #15
   24a4a:	4013      	ands	r3, r2
   24a4c:	2b0f      	cmp	r3, #15
   24a4e:	d103      	bne.n	24a58 <spi_cmd_complete+0x4f8>
					break;
   24a50:	e007      	b.n	24a62 <spi_cmd_complete+0x502>
					retry = 0;
   24a52:	2300      	movs	r3, #0
   24a54:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24a56:	e004      	b.n	24a62 <spi_cmd_complete+0x502>
			} while (retry--);
   24a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24a5a:	1e5a      	subs	r2, r3, #1
   24a5c:	667a      	str	r2, [r7, #100]	; 0x64
   24a5e:	2b00      	cmp	r3, #0
   24a60:	d1d8      	bne.n	24a14 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24a64:	2b00      	cmp	r3, #0
   24a66:	dc18      	bgt.n	24a9a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24a68:	2395      	movs	r3, #149	; 0x95
   24a6a:	009a      	lsls	r2, r3, #2
   24a6c:	499b      	ldr	r1, [pc, #620]	; (24cdc <spi_cmd_complete+0x77c>)
   24a6e:	4b9c      	ldr	r3, [pc, #624]	; (24ce0 <spi_cmd_complete+0x780>)
   24a70:	0018      	movs	r0, r3
   24a72:	4b9c      	ldr	r3, [pc, #624]	; (24ce4 <spi_cmd_complete+0x784>)
   24a74:	4798      	blx	r3
   24a76:	2317      	movs	r3, #23
   24a78:	18fb      	adds	r3, r7, r3
   24a7a:	781b      	ldrb	r3, [r3, #0]
   24a7c:	001a      	movs	r2, r3
   24a7e:	4b9e      	ldr	r3, [pc, #632]	; (24cf8 <spi_cmd_complete+0x798>)
   24a80:	0011      	movs	r1, r2
   24a82:	0018      	movs	r0, r3
   24a84:	4b97      	ldr	r3, [pc, #604]	; (24ce4 <spi_cmd_complete+0x784>)
   24a86:	4798      	blx	r3
   24a88:	4b98      	ldr	r3, [pc, #608]	; (24cec <spi_cmd_complete+0x78c>)
   24a8a:	0018      	movs	r0, r3
   24a8c:	4b95      	ldr	r3, [pc, #596]	; (24ce4 <spi_cmd_complete+0x784>)
   24a8e:	4798      	blx	r3
				result = N_RESET;
   24a90:	2301      	movs	r3, #1
   24a92:	425b      	negs	r3, r3
   24a94:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a98:	e1c4      	b.n	24e24 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24a9a:	230f      	movs	r3, #15
   24a9c:	18fb      	adds	r3, r7, r3
   24a9e:	781b      	ldrb	r3, [r3, #0]
   24aa0:	2bc4      	cmp	r3, #196	; 0xc4
   24aa2:	d005      	beq.n	24ab0 <spi_cmd_complete+0x550>
   24aa4:	230f      	movs	r3, #15
   24aa6:	18fb      	adds	r3, r7, r3
   24aa8:	781b      	ldrb	r3, [r3, #0]
   24aaa:	2bca      	cmp	r3, #202	; 0xca
   24aac:	d000      	beq.n	24ab0 <spi_cmd_complete+0x550>
   24aae:	e08e      	b.n	24bce <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24ab0:	2376      	movs	r3, #118	; 0x76
   24ab2:	18fb      	adds	r3, r7, r3
   24ab4:	781b      	ldrb	r3, [r3, #0]
   24ab6:	3303      	adds	r3, #3
   24ab8:	001a      	movs	r2, r3
   24aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24abc:	429a      	cmp	r2, r3
   24abe:	d23c      	bcs.n	24b3a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24ac0:	2376      	movs	r3, #118	; 0x76
   24ac2:	18fb      	adds	r3, r7, r3
   24ac4:	781b      	ldrb	r3, [r3, #0]
   24ac6:	2276      	movs	r2, #118	; 0x76
   24ac8:	18ba      	adds	r2, r7, r2
   24aca:	1c59      	adds	r1, r3, #1
   24acc:	7011      	strb	r1, [r2, #0]
   24ace:	001a      	movs	r2, r3
   24ad0:	2318      	movs	r3, #24
   24ad2:	18fb      	adds	r3, r7, r3
   24ad4:	5c9a      	ldrb	r2, [r3, r2]
   24ad6:	687b      	ldr	r3, [r7, #4]
   24ad8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24ada:	687b      	ldr	r3, [r7, #4]
   24adc:	1c5a      	adds	r2, r3, #1
   24ade:	2376      	movs	r3, #118	; 0x76
   24ae0:	18fb      	adds	r3, r7, r3
   24ae2:	781b      	ldrb	r3, [r3, #0]
   24ae4:	2176      	movs	r1, #118	; 0x76
   24ae6:	1879      	adds	r1, r7, r1
   24ae8:	1c58      	adds	r0, r3, #1
   24aea:	7008      	strb	r0, [r1, #0]
   24aec:	0019      	movs	r1, r3
   24aee:	2318      	movs	r3, #24
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	5c5b      	ldrb	r3, [r3, r1]
   24af4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24af6:	687b      	ldr	r3, [r7, #4]
   24af8:	1c9a      	adds	r2, r3, #2
   24afa:	2376      	movs	r3, #118	; 0x76
   24afc:	18fb      	adds	r3, r7, r3
   24afe:	781b      	ldrb	r3, [r3, #0]
   24b00:	2176      	movs	r1, #118	; 0x76
   24b02:	1879      	adds	r1, r7, r1
   24b04:	1c58      	adds	r0, r3, #1
   24b06:	7008      	strb	r0, [r1, #0]
   24b08:	0019      	movs	r1, r3
   24b0a:	2318      	movs	r3, #24
   24b0c:	18fb      	adds	r3, r7, r3
   24b0e:	5c5b      	ldrb	r3, [r3, r1]
   24b10:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24b12:	687b      	ldr	r3, [r7, #4]
   24b14:	1cda      	adds	r2, r3, #3
   24b16:	2376      	movs	r3, #118	; 0x76
   24b18:	18fb      	adds	r3, r7, r3
   24b1a:	781b      	ldrb	r3, [r3, #0]
   24b1c:	2176      	movs	r1, #118	; 0x76
   24b1e:	1879      	adds	r1, r7, r1
   24b20:	1c58      	adds	r0, r3, #1
   24b22:	7008      	strb	r0, [r1, #0]
   24b24:	0019      	movs	r1, r3
   24b26:	2318      	movs	r3, #24
   24b28:	18fb      	adds	r3, r7, r3
   24b2a:	5c5b      	ldrb	r3, [r3, r1]
   24b2c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24b2e:	4b73      	ldr	r3, [pc, #460]	; (24cfc <spi_cmd_complete+0x79c>)
   24b30:	781b      	ldrb	r3, [r3, #0]
   24b32:	2b00      	cmp	r3, #0
   24b34:	d000      	beq.n	24b38 <spi_cmd_complete+0x5d8>
   24b36:	e174      	b.n	24e22 <spi_cmd_complete+0x8c2>
   24b38:	e011      	b.n	24b5e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24b3a:	4a71      	ldr	r2, [pc, #452]	; (24d00 <spi_cmd_complete+0x7a0>)
   24b3c:	4967      	ldr	r1, [pc, #412]	; (24cdc <spi_cmd_complete+0x77c>)
   24b3e:	4b68      	ldr	r3, [pc, #416]	; (24ce0 <spi_cmd_complete+0x780>)
   24b40:	0018      	movs	r0, r3
   24b42:	4b68      	ldr	r3, [pc, #416]	; (24ce4 <spi_cmd_complete+0x784>)
   24b44:	4798      	blx	r3
   24b46:	4b6f      	ldr	r3, [pc, #444]	; (24d04 <spi_cmd_complete+0x7a4>)
   24b48:	0018      	movs	r0, r3
   24b4a:	4b66      	ldr	r3, [pc, #408]	; (24ce4 <spi_cmd_complete+0x784>)
   24b4c:	4798      	blx	r3
   24b4e:	4b67      	ldr	r3, [pc, #412]	; (24cec <spi_cmd_complete+0x78c>)
   24b50:	0018      	movs	r0, r3
   24b52:	4b64      	ldr	r3, [pc, #400]	; (24ce4 <spi_cmd_complete+0x784>)
   24b54:	4798      	blx	r3
					result = N_FAIL;
   24b56:	2300      	movs	r3, #0
   24b58:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b5c:	e162      	b.n	24e24 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24b5e:	2376      	movs	r3, #118	; 0x76
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	781b      	ldrb	r3, [r3, #0]
   24b64:	3301      	adds	r3, #1
   24b66:	001a      	movs	r2, r3
   24b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b6a:	429a      	cmp	r2, r3
   24b6c:	d21c      	bcs.n	24ba8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24b6e:	2376      	movs	r3, #118	; 0x76
   24b70:	18fb      	adds	r3, r7, r3
   24b72:	781b      	ldrb	r3, [r3, #0]
   24b74:	2276      	movs	r2, #118	; 0x76
   24b76:	18ba      	adds	r2, r7, r2
   24b78:	1c59      	adds	r1, r3, #1
   24b7a:	7011      	strb	r1, [r2, #0]
   24b7c:	001a      	movs	r2, r3
   24b7e:	2318      	movs	r3, #24
   24b80:	18fb      	adds	r3, r7, r3
   24b82:	5c9a      	ldrb	r2, [r3, r2]
   24b84:	2314      	movs	r3, #20
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24b8a:	2376      	movs	r3, #118	; 0x76
   24b8c:	18fb      	adds	r3, r7, r3
   24b8e:	781b      	ldrb	r3, [r3, #0]
   24b90:	2276      	movs	r2, #118	; 0x76
   24b92:	18ba      	adds	r2, r7, r2
   24b94:	1c59      	adds	r1, r3, #1
   24b96:	7011      	strb	r1, [r2, #0]
   24b98:	001a      	movs	r2, r3
   24b9a:	2318      	movs	r3, #24
   24b9c:	18fb      	adds	r3, r7, r3
   24b9e:	5c9a      	ldrb	r2, [r3, r2]
   24ba0:	2314      	movs	r3, #20
   24ba2:	18fb      	adds	r3, r7, r3
   24ba4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24ba6:	e13c      	b.n	24e22 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24ba8:	239c      	movs	r3, #156	; 0x9c
   24baa:	009a      	lsls	r2, r3, #2
   24bac:	494b      	ldr	r1, [pc, #300]	; (24cdc <spi_cmd_complete+0x77c>)
   24bae:	4b4c      	ldr	r3, [pc, #304]	; (24ce0 <spi_cmd_complete+0x780>)
   24bb0:	0018      	movs	r0, r3
   24bb2:	4b4c      	ldr	r3, [pc, #304]	; (24ce4 <spi_cmd_complete+0x784>)
   24bb4:	4798      	blx	r3
   24bb6:	4b54      	ldr	r3, [pc, #336]	; (24d08 <spi_cmd_complete+0x7a8>)
   24bb8:	0018      	movs	r0, r3
   24bba:	4b4a      	ldr	r3, [pc, #296]	; (24ce4 <spi_cmd_complete+0x784>)
   24bbc:	4798      	blx	r3
   24bbe:	4b4b      	ldr	r3, [pc, #300]	; (24cec <spi_cmd_complete+0x78c>)
   24bc0:	0018      	movs	r0, r3
   24bc2:	4b48      	ldr	r3, [pc, #288]	; (24ce4 <spi_cmd_complete+0x784>)
   24bc4:	4798      	blx	r3
						result = N_FAIL;
   24bc6:	2300      	movs	r3, #0
   24bc8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bcc:	e12a      	b.n	24e24 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24bce:	230f      	movs	r3, #15
   24bd0:	18fb      	adds	r3, r7, r3
   24bd2:	781b      	ldrb	r3, [r3, #0]
   24bd4:	2bc2      	cmp	r3, #194	; 0xc2
   24bd6:	d005      	beq.n	24be4 <spi_cmd_complete+0x684>
   24bd8:	230f      	movs	r3, #15
   24bda:	18fb      	adds	r3, r7, r3
   24bdc:	781b      	ldrb	r3, [r3, #0]
   24bde:	2bc8      	cmp	r3, #200	; 0xc8
   24be0:	d000      	beq.n	24be4 <spi_cmd_complete+0x684>
   24be2:	e11e      	b.n	24e22 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24be4:	2300      	movs	r3, #0
   24be6:	663b      	str	r3, [r7, #96]	; 0x60
   24be8:	e011      	b.n	24c0e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24bec:	1c5a      	adds	r2, r3, #1
   24bee:	663a      	str	r2, [r7, #96]	; 0x60
   24bf0:	001a      	movs	r2, r3
   24bf2:	687b      	ldr	r3, [r7, #4]
   24bf4:	189a      	adds	r2, r3, r2
   24bf6:	2376      	movs	r3, #118	; 0x76
   24bf8:	18fb      	adds	r3, r7, r3
   24bfa:	781b      	ldrb	r3, [r3, #0]
   24bfc:	2176      	movs	r1, #118	; 0x76
   24bfe:	1879      	adds	r1, r7, r1
   24c00:	1c58      	adds	r0, r3, #1
   24c02:	7008      	strb	r0, [r1, #0]
   24c04:	0019      	movs	r1, r3
   24c06:	2318      	movs	r3, #24
   24c08:	18fb      	adds	r3, r7, r3
   24c0a:	5c5b      	ldrb	r3, [r3, r1]
   24c0c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24c0e:	2376      	movs	r3, #118	; 0x76
   24c10:	18fb      	adds	r3, r7, r3
   24c12:	781a      	ldrb	r2, [r3, #0]
   24c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c16:	429a      	cmp	r2, r3
   24c18:	d203      	bcs.n	24c22 <spi_cmd_complete+0x6c2>
   24c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24c1c:	683b      	ldr	r3, [r7, #0]
   24c1e:	429a      	cmp	r2, r3
   24c20:	d3e3      	bcc.n	24bea <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c24:	683a      	ldr	r2, [r7, #0]
   24c26:	1ad3      	subs	r3, r2, r3
   24c28:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24c2a:	683b      	ldr	r3, [r7, #0]
   24c2c:	2b00      	cmp	r3, #0
   24c2e:	d100      	bne.n	24c32 <spi_cmd_complete+0x6d2>
   24c30:	e0f1      	b.n	24e16 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c34:	2280      	movs	r2, #128	; 0x80
   24c36:	0192      	lsls	r2, r2, #6
   24c38:	1ad3      	subs	r3, r2, r3
   24c3a:	001a      	movs	r2, r3
   24c3c:	683b      	ldr	r3, [r7, #0]
   24c3e:	429a      	cmp	r2, r3
   24c40:	d302      	bcc.n	24c48 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24c42:	683b      	ldr	r3, [r7, #0]
   24c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   24c46:	e004      	b.n	24c52 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c4a:	2280      	movs	r2, #128	; 0x80
   24c4c:	0192      	lsls	r2, r2, #6
   24c4e:	1ad3      	subs	r3, r2, r3
   24c50:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c54:	687a      	ldr	r2, [r7, #4]
   24c56:	18d3      	adds	r3, r2, r3
   24c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24c5a:	b292      	uxth	r2, r2
   24c5c:	0011      	movs	r1, r2
   24c5e:	0018      	movs	r0, r3
   24c60:	4b2a      	ldr	r3, [pc, #168]	; (24d0c <spi_cmd_complete+0x7ac>)
   24c62:	4798      	blx	r3
   24c64:	1e03      	subs	r3, r0, #0
   24c66:	d010      	beq.n	24c8a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24c68:	4a29      	ldr	r2, [pc, #164]	; (24d10 <spi_cmd_complete+0x7b0>)
   24c6a:	491c      	ldr	r1, [pc, #112]	; (24cdc <spi_cmd_complete+0x77c>)
   24c6c:	4b1c      	ldr	r3, [pc, #112]	; (24ce0 <spi_cmd_complete+0x780>)
   24c6e:	0018      	movs	r0, r3
   24c70:	4b1c      	ldr	r3, [pc, #112]	; (24ce4 <spi_cmd_complete+0x784>)
   24c72:	4798      	blx	r3
   24c74:	4b27      	ldr	r3, [pc, #156]	; (24d14 <spi_cmd_complete+0x7b4>)
   24c76:	0018      	movs	r0, r3
   24c78:	4b1a      	ldr	r3, [pc, #104]	; (24ce4 <spi_cmd_complete+0x784>)
   24c7a:	4798      	blx	r3
   24c7c:	4b1b      	ldr	r3, [pc, #108]	; (24cec <spi_cmd_complete+0x78c>)
   24c7e:	0018      	movs	r0, r3
   24c80:	4b18      	ldr	r3, [pc, #96]	; (24ce4 <spi_cmd_complete+0x784>)
   24c82:	4798      	blx	r3
						result = N_FAIL;
   24c84:	2300      	movs	r3, #0
   24c86:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24c88:	e0cb      	b.n	24e22 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24c8a:	4b1c      	ldr	r3, [pc, #112]	; (24cfc <spi_cmd_complete+0x79c>)
   24c8c:	781b      	ldrb	r3, [r3, #0]
   24c8e:	2b00      	cmp	r3, #0
   24c90:	d119      	bne.n	24cc6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24c92:	2314      	movs	r3, #20
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	2102      	movs	r1, #2
   24c98:	0018      	movs	r0, r3
   24c9a:	4b1c      	ldr	r3, [pc, #112]	; (24d0c <spi_cmd_complete+0x7ac>)
   24c9c:	4798      	blx	r3
   24c9e:	1e03      	subs	r3, r0, #0
   24ca0:	d011      	beq.n	24cc6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24ca2:	23a6      	movs	r3, #166	; 0xa6
   24ca4:	009a      	lsls	r2, r3, #2
   24ca6:	490d      	ldr	r1, [pc, #52]	; (24cdc <spi_cmd_complete+0x77c>)
   24ca8:	4b0d      	ldr	r3, [pc, #52]	; (24ce0 <spi_cmd_complete+0x780>)
   24caa:	0018      	movs	r0, r3
   24cac:	4b0d      	ldr	r3, [pc, #52]	; (24ce4 <spi_cmd_complete+0x784>)
   24cae:	4798      	blx	r3
   24cb0:	4b19      	ldr	r3, [pc, #100]	; (24d18 <spi_cmd_complete+0x7b8>)
   24cb2:	0018      	movs	r0, r3
   24cb4:	4b0b      	ldr	r3, [pc, #44]	; (24ce4 <spi_cmd_complete+0x784>)
   24cb6:	4798      	blx	r3
   24cb8:	4b0c      	ldr	r3, [pc, #48]	; (24cec <spi_cmd_complete+0x78c>)
   24cba:	0018      	movs	r0, r3
   24cbc:	4b09      	ldr	r3, [pc, #36]	; (24ce4 <spi_cmd_complete+0x784>)
   24cbe:	4798      	blx	r3
							result = N_FAIL;
   24cc0:	2300      	movs	r3, #0
   24cc2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24cc4:	e0ad      	b.n	24e22 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24cca:	18d3      	adds	r3, r2, r3
   24ccc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24cd0:	683a      	ldr	r2, [r7, #0]
   24cd2:	1ad3      	subs	r3, r2, r3
   24cd4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24cd6:	e09e      	b.n	24e16 <spi_cmd_complete+0x8b6>
   24cd8:	0000022f 	.word	0x0000022f
   24cdc:	0003add4 	.word	0x0003add4
   24ce0:	0003a7c0 	.word	0x0003a7c0
   24ce4:	0001e9e9 	.word	0x0001e9e9
   24ce8:	0003a8b8 	.word	0x0003a8b8
   24cec:	0003a800 	.word	0x0003a800
   24cf0:	00000239 	.word	0x00000239
   24cf4:	0003a8f4 	.word	0x0003a8f4
   24cf8:	0003a928 	.word	0x0003a928
   24cfc:	200042a8 	.word	0x200042a8
   24d00:	00000263 	.word	0x00000263
   24d04:	0003a958 	.word	0x0003a958
   24d08:	0003a988 	.word	0x0003a988
   24d0c:	00023e99 	.word	0x00023e99
   24d10:	0000028e 	.word	0x0000028e
   24d14:	0003a9b8 	.word	0x0003a9b8
   24d18:	0003a9ec 	.word	0x0003a9ec
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24d1c:	683a      	ldr	r2, [r7, #0]
   24d1e:	2380      	movs	r3, #128	; 0x80
   24d20:	019b      	lsls	r3, r3, #6
   24d22:	429a      	cmp	r2, r3
   24d24:	d802      	bhi.n	24d2c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24d26:	683b      	ldr	r3, [r7, #0]
   24d28:	65bb      	str	r3, [r7, #88]	; 0x58
   24d2a:	e002      	b.n	24d32 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24d2c:	2380      	movs	r3, #128	; 0x80
   24d2e:	019b      	lsls	r3, r3, #6
   24d30:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24d32:	230a      	movs	r3, #10
   24d34:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24d36:	2317      	movs	r3, #23
   24d38:	18fb      	adds	r3, r7, r3
   24d3a:	2101      	movs	r1, #1
   24d3c:	0018      	movs	r0, r3
   24d3e:	4b3b      	ldr	r3, [pc, #236]	; (24e2c <spi_cmd_complete+0x8cc>)
   24d40:	4798      	blx	r3
   24d42:	1e03      	subs	r3, r0, #0
   24d44:	d011      	beq.n	24d6a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24d46:	23ae      	movs	r3, #174	; 0xae
   24d48:	009a      	lsls	r2, r3, #2
   24d4a:	4939      	ldr	r1, [pc, #228]	; (24e30 <spi_cmd_complete+0x8d0>)
   24d4c:	4b39      	ldr	r3, [pc, #228]	; (24e34 <spi_cmd_complete+0x8d4>)
   24d4e:	0018      	movs	r0, r3
   24d50:	4b39      	ldr	r3, [pc, #228]	; (24e38 <spi_cmd_complete+0x8d8>)
   24d52:	4798      	blx	r3
   24d54:	4b39      	ldr	r3, [pc, #228]	; (24e3c <spi_cmd_complete+0x8dc>)
   24d56:	0018      	movs	r0, r3
   24d58:	4b37      	ldr	r3, [pc, #220]	; (24e38 <spi_cmd_complete+0x8d8>)
   24d5a:	4798      	blx	r3
   24d5c:	4b38      	ldr	r3, [pc, #224]	; (24e40 <spi_cmd_complete+0x8e0>)
   24d5e:	0018      	movs	r0, r3
   24d60:	4b35      	ldr	r3, [pc, #212]	; (24e38 <spi_cmd_complete+0x8d8>)
   24d62:	4798      	blx	r3
							result = N_FAIL;
   24d64:	2300      	movs	r3, #0
   24d66:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24d68:	e010      	b.n	24d8c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24d6a:	2317      	movs	r3, #23
   24d6c:	18fb      	adds	r3, r7, r3
   24d6e:	781b      	ldrb	r3, [r3, #0]
   24d70:	091b      	lsrs	r3, r3, #4
   24d72:	b2db      	uxtb	r3, r3
   24d74:	001a      	movs	r2, r3
   24d76:	230f      	movs	r3, #15
   24d78:	4013      	ands	r3, r2
   24d7a:	2b0f      	cmp	r3, #15
   24d7c:	d005      	beq.n	24d8a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24d80:	1e5a      	subs	r2, r3, #1
   24d82:	667a      	str	r2, [r7, #100]	; 0x64
   24d84:	2b00      	cmp	r3, #0
   24d86:	d1d6      	bne.n	24d36 <spi_cmd_complete+0x7d6>
   24d88:	e000      	b.n	24d8c <spi_cmd_complete+0x82c>
							break;
   24d8a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d8e:	2b00      	cmp	r3, #0
   24d90:	d046      	beq.n	24e20 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24d94:	687a      	ldr	r2, [r7, #4]
   24d96:	18d3      	adds	r3, r2, r3
   24d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24d9a:	b292      	uxth	r2, r2
   24d9c:	0011      	movs	r1, r2
   24d9e:	0018      	movs	r0, r3
   24da0:	4b22      	ldr	r3, [pc, #136]	; (24e2c <spi_cmd_complete+0x8cc>)
   24da2:	4798      	blx	r3
   24da4:	1e03      	subs	r3, r0, #0
   24da6:	d011      	beq.n	24dcc <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24da8:	23b2      	movs	r3, #178	; 0xb2
   24daa:	009a      	lsls	r2, r3, #2
   24dac:	4920      	ldr	r1, [pc, #128]	; (24e30 <spi_cmd_complete+0x8d0>)
   24dae:	4b21      	ldr	r3, [pc, #132]	; (24e34 <spi_cmd_complete+0x8d4>)
   24db0:	0018      	movs	r0, r3
   24db2:	4b21      	ldr	r3, [pc, #132]	; (24e38 <spi_cmd_complete+0x8d8>)
   24db4:	4798      	blx	r3
   24db6:	4b23      	ldr	r3, [pc, #140]	; (24e44 <spi_cmd_complete+0x8e4>)
   24db8:	0018      	movs	r0, r3
   24dba:	4b1f      	ldr	r3, [pc, #124]	; (24e38 <spi_cmd_complete+0x8d8>)
   24dbc:	4798      	blx	r3
   24dbe:	4b20      	ldr	r3, [pc, #128]	; (24e40 <spi_cmd_complete+0x8e0>)
   24dc0:	0018      	movs	r0, r3
   24dc2:	4b1d      	ldr	r3, [pc, #116]	; (24e38 <spi_cmd_complete+0x8d8>)
   24dc4:	4798      	blx	r3
						result = N_FAIL;
   24dc6:	2300      	movs	r3, #0
   24dc8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24dca:	e02a      	b.n	24e22 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24dcc:	4b1e      	ldr	r3, [pc, #120]	; (24e48 <spi_cmd_complete+0x8e8>)
   24dce:	781b      	ldrb	r3, [r3, #0]
   24dd0:	2b00      	cmp	r3, #0
   24dd2:	d118      	bne.n	24e06 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24dd4:	2314      	movs	r3, #20
   24dd6:	18fb      	adds	r3, r7, r3
   24dd8:	2102      	movs	r1, #2
   24dda:	0018      	movs	r0, r3
   24ddc:	4b13      	ldr	r3, [pc, #76]	; (24e2c <spi_cmd_complete+0x8cc>)
   24dde:	4798      	blx	r3
   24de0:	1e03      	subs	r3, r0, #0
   24de2:	d010      	beq.n	24e06 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24de4:	4a19      	ldr	r2, [pc, #100]	; (24e4c <spi_cmd_complete+0x8ec>)
   24de6:	4912      	ldr	r1, [pc, #72]	; (24e30 <spi_cmd_complete+0x8d0>)
   24de8:	4b12      	ldr	r3, [pc, #72]	; (24e34 <spi_cmd_complete+0x8d4>)
   24dea:	0018      	movs	r0, r3
   24dec:	4b12      	ldr	r3, [pc, #72]	; (24e38 <spi_cmd_complete+0x8d8>)
   24dee:	4798      	blx	r3
   24df0:	4b17      	ldr	r3, [pc, #92]	; (24e50 <spi_cmd_complete+0x8f0>)
   24df2:	0018      	movs	r0, r3
   24df4:	4b10      	ldr	r3, [pc, #64]	; (24e38 <spi_cmd_complete+0x8d8>)
   24df6:	4798      	blx	r3
   24df8:	4b11      	ldr	r3, [pc, #68]	; (24e40 <spi_cmd_complete+0x8e0>)
   24dfa:	0018      	movs	r0, r3
   24dfc:	4b0e      	ldr	r3, [pc, #56]	; (24e38 <spi_cmd_complete+0x8d8>)
   24dfe:	4798      	blx	r3
							result = N_FAIL;
   24e00:	2300      	movs	r3, #0
   24e02:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24e04:	e00d      	b.n	24e22 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24e06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24e0a:	18d3      	adds	r3, r2, r3
   24e0c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24e10:	683a      	ldr	r2, [r7, #0]
   24e12:	1ad3      	subs	r3, r2, r3
   24e14:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24e16:	683b      	ldr	r3, [r7, #0]
   24e18:	2b00      	cmp	r3, #0
   24e1a:	d000      	beq.n	24e1e <spi_cmd_complete+0x8be>
   24e1c:	e77e      	b.n	24d1c <spi_cmd_complete+0x7bc>
   24e1e:	e000      	b.n	24e22 <spi_cmd_complete+0x8c2>
						break;
   24e20:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24e24:	0018      	movs	r0, r3
   24e26:	46bd      	mov	sp, r7
   24e28:	b01f      	add	sp, #124	; 0x7c
   24e2a:	bd90      	pop	{r4, r7, pc}
   24e2c:	00023e99 	.word	0x00023e99
   24e30:	0003add4 	.word	0x0003add4
   24e34:	0003a7c0 	.word	0x0003a7c0
   24e38:	0001e9e9 	.word	0x0001e9e9
   24e3c:	0003aa24 	.word	0x0003aa24
   24e40:	0003a800 	.word	0x0003a800
   24e44:	0003a9b8 	.word	0x0003a9b8
   24e48:	200042a8 	.word	0x200042a8
   24e4c:	000002d2 	.word	0x000002d2
   24e50:	0003a9ec 	.word	0x0003a9ec

00024e54 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24e54:	b580      	push	{r7, lr}
   24e56:	b086      	sub	sp, #24
   24e58:	af00      	add	r7, sp, #0
   24e5a:	6078      	str	r0, [r7, #4]
   24e5c:	000a      	movs	r2, r1
   24e5e:	1cbb      	adds	r3, r7, #2
   24e60:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24e62:	2313      	movs	r3, #19
   24e64:	18fb      	adds	r3, r7, r3
   24e66:	2201      	movs	r2, #1
   24e68:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24e6a:	230c      	movs	r3, #12
   24e6c:	18fb      	adds	r3, r7, r3
   24e6e:	2200      	movs	r2, #0
   24e70:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24e72:	2316      	movs	r3, #22
   24e74:	18fb      	adds	r3, r7, r3
   24e76:	2200      	movs	r2, #0
   24e78:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24e7a:	1cbb      	adds	r3, r7, #2
   24e7c:	881a      	ldrh	r2, [r3, #0]
   24e7e:	2380      	movs	r3, #128	; 0x80
   24e80:	019b      	lsls	r3, r3, #6
   24e82:	429a      	cmp	r2, r3
   24e84:	d805      	bhi.n	24e92 <spi_data_write+0x3e>
			nbytes = sz;
   24e86:	2314      	movs	r3, #20
   24e88:	18fb      	adds	r3, r7, r3
   24e8a:	1cba      	adds	r2, r7, #2
   24e8c:	8812      	ldrh	r2, [r2, #0]
   24e8e:	801a      	strh	r2, [r3, #0]
   24e90:	e004      	b.n	24e9c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24e92:	2314      	movs	r3, #20
   24e94:	18fb      	adds	r3, r7, r3
   24e96:	2280      	movs	r2, #128	; 0x80
   24e98:	0192      	lsls	r2, r2, #6
   24e9a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24e9c:	2311      	movs	r3, #17
   24e9e:	18fb      	adds	r3, r7, r3
   24ea0:	22f0      	movs	r2, #240	; 0xf0
   24ea2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24ea4:	2316      	movs	r3, #22
   24ea6:	18fb      	adds	r3, r7, r3
   24ea8:	2200      	movs	r2, #0
   24eaa:	5e9b      	ldrsh	r3, [r3, r2]
   24eac:	2b00      	cmp	r3, #0
   24eae:	d10f      	bne.n	24ed0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24eb0:	1cbb      	adds	r3, r7, #2
   24eb2:	881a      	ldrh	r2, [r3, #0]
   24eb4:	2380      	movs	r3, #128	; 0x80
   24eb6:	019b      	lsls	r3, r3, #6
   24eb8:	429a      	cmp	r2, r3
   24eba:	d804      	bhi.n	24ec6 <spi_data_write+0x72>
				order = 0x3;
   24ebc:	2312      	movs	r3, #18
   24ebe:	18fb      	adds	r3, r7, r3
   24ec0:	2203      	movs	r2, #3
   24ec2:	701a      	strb	r2, [r3, #0]
   24ec4:	e013      	b.n	24eee <spi_data_write+0x9a>
			else
				order = 0x1;
   24ec6:	2312      	movs	r3, #18
   24ec8:	18fb      	adds	r3, r7, r3
   24eca:	2201      	movs	r2, #1
   24ecc:	701a      	strb	r2, [r3, #0]
   24ece:	e00e      	b.n	24eee <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24ed0:	1cbb      	adds	r3, r7, #2
   24ed2:	881a      	ldrh	r2, [r3, #0]
   24ed4:	2380      	movs	r3, #128	; 0x80
   24ed6:	019b      	lsls	r3, r3, #6
   24ed8:	429a      	cmp	r2, r3
   24eda:	d804      	bhi.n	24ee6 <spi_data_write+0x92>
				order = 0x3;
   24edc:	2312      	movs	r3, #18
   24ede:	18fb      	adds	r3, r7, r3
   24ee0:	2203      	movs	r2, #3
   24ee2:	701a      	strb	r2, [r3, #0]
   24ee4:	e003      	b.n	24eee <spi_data_write+0x9a>
			else
				order = 0x2;
   24ee6:	2312      	movs	r3, #18
   24ee8:	18fb      	adds	r3, r7, r3
   24eea:	2202      	movs	r2, #2
   24eec:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24eee:	2311      	movs	r3, #17
   24ef0:	18fb      	adds	r3, r7, r3
   24ef2:	781a      	ldrb	r2, [r3, #0]
   24ef4:	2312      	movs	r3, #18
   24ef6:	18fb      	adds	r3, r7, r3
   24ef8:	781b      	ldrb	r3, [r3, #0]
   24efa:	4313      	orrs	r3, r2
   24efc:	b2da      	uxtb	r2, r3
   24efe:	2311      	movs	r3, #17
   24f00:	18fb      	adds	r3, r7, r3
   24f02:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24f04:	2311      	movs	r3, #17
   24f06:	18fb      	adds	r3, r7, r3
   24f08:	2101      	movs	r1, #1
   24f0a:	0018      	movs	r0, r3
   24f0c:	4b3c      	ldr	r3, [pc, #240]	; (25000 <spi_data_write+0x1ac>)
   24f0e:	4798      	blx	r3
   24f10:	1e03      	subs	r3, r0, #0
   24f12:	d012      	beq.n	24f3a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24f14:	4a3b      	ldr	r2, [pc, #236]	; (25004 <spi_data_write+0x1b0>)
   24f16:	493c      	ldr	r1, [pc, #240]	; (25008 <spi_data_write+0x1b4>)
   24f18:	4b3c      	ldr	r3, [pc, #240]	; (2500c <spi_data_write+0x1b8>)
   24f1a:	0018      	movs	r0, r3
   24f1c:	4b3c      	ldr	r3, [pc, #240]	; (25010 <spi_data_write+0x1bc>)
   24f1e:	4798      	blx	r3
   24f20:	4b3c      	ldr	r3, [pc, #240]	; (25014 <spi_data_write+0x1c0>)
   24f22:	0018      	movs	r0, r3
   24f24:	4b3a      	ldr	r3, [pc, #232]	; (25010 <spi_data_write+0x1bc>)
   24f26:	4798      	blx	r3
   24f28:	4b3b      	ldr	r3, [pc, #236]	; (25018 <spi_data_write+0x1c4>)
   24f2a:	0018      	movs	r0, r3
   24f2c:	4b38      	ldr	r3, [pc, #224]	; (25010 <spi_data_write+0x1bc>)
   24f2e:	4798      	blx	r3
			result = N_FAIL;
   24f30:	2313      	movs	r3, #19
   24f32:	18fb      	adds	r3, r7, r3
   24f34:	2200      	movs	r2, #0
   24f36:	701a      	strb	r2, [r3, #0]
			break;
   24f38:	e059      	b.n	24fee <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24f3a:	2316      	movs	r3, #22
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	2200      	movs	r2, #0
   24f40:	5e9b      	ldrsh	r3, [r3, r2]
   24f42:	687a      	ldr	r2, [r7, #4]
   24f44:	18d2      	adds	r2, r2, r3
   24f46:	2314      	movs	r3, #20
   24f48:	18fb      	adds	r3, r7, r3
   24f4a:	881b      	ldrh	r3, [r3, #0]
   24f4c:	0019      	movs	r1, r3
   24f4e:	0010      	movs	r0, r2
   24f50:	4b2b      	ldr	r3, [pc, #172]	; (25000 <spi_data_write+0x1ac>)
   24f52:	4798      	blx	r3
   24f54:	1e03      	subs	r3, r0, #0
   24f56:	d012      	beq.n	24f7e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24f58:	4a30      	ldr	r2, [pc, #192]	; (2501c <spi_data_write+0x1c8>)
   24f5a:	492b      	ldr	r1, [pc, #172]	; (25008 <spi_data_write+0x1b4>)
   24f5c:	4b2b      	ldr	r3, [pc, #172]	; (2500c <spi_data_write+0x1b8>)
   24f5e:	0018      	movs	r0, r3
   24f60:	4b2b      	ldr	r3, [pc, #172]	; (25010 <spi_data_write+0x1bc>)
   24f62:	4798      	blx	r3
   24f64:	4b2e      	ldr	r3, [pc, #184]	; (25020 <spi_data_write+0x1cc>)
   24f66:	0018      	movs	r0, r3
   24f68:	4b29      	ldr	r3, [pc, #164]	; (25010 <spi_data_write+0x1bc>)
   24f6a:	4798      	blx	r3
   24f6c:	4b2a      	ldr	r3, [pc, #168]	; (25018 <spi_data_write+0x1c4>)
   24f6e:	0018      	movs	r0, r3
   24f70:	4b27      	ldr	r3, [pc, #156]	; (25010 <spi_data_write+0x1bc>)
   24f72:	4798      	blx	r3
			result = N_FAIL;
   24f74:	2313      	movs	r3, #19
   24f76:	18fb      	adds	r3, r7, r3
   24f78:	2200      	movs	r2, #0
   24f7a:	701a      	strb	r2, [r3, #0]
			break;
   24f7c:	e037      	b.n	24fee <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24f7e:	4b29      	ldr	r3, [pc, #164]	; (25024 <spi_data_write+0x1d0>)
   24f80:	781b      	ldrb	r3, [r3, #0]
   24f82:	2b00      	cmp	r3, #0
   24f84:	d11b      	bne.n	24fbe <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24f86:	230c      	movs	r3, #12
   24f88:	18fb      	adds	r3, r7, r3
   24f8a:	2102      	movs	r1, #2
   24f8c:	0018      	movs	r0, r3
   24f8e:	4b1c      	ldr	r3, [pc, #112]	; (25000 <spi_data_write+0x1ac>)
   24f90:	4798      	blx	r3
   24f92:	1e03      	subs	r3, r0, #0
   24f94:	d013      	beq.n	24fbe <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   24f96:	23d7      	movs	r3, #215	; 0xd7
   24f98:	009a      	lsls	r2, r3, #2
   24f9a:	491b      	ldr	r1, [pc, #108]	; (25008 <spi_data_write+0x1b4>)
   24f9c:	4b1b      	ldr	r3, [pc, #108]	; (2500c <spi_data_write+0x1b8>)
   24f9e:	0018      	movs	r0, r3
   24fa0:	4b1b      	ldr	r3, [pc, #108]	; (25010 <spi_data_write+0x1bc>)
   24fa2:	4798      	blx	r3
   24fa4:	4b20      	ldr	r3, [pc, #128]	; (25028 <spi_data_write+0x1d4>)
   24fa6:	0018      	movs	r0, r3
   24fa8:	4b19      	ldr	r3, [pc, #100]	; (25010 <spi_data_write+0x1bc>)
   24faa:	4798      	blx	r3
   24fac:	4b1a      	ldr	r3, [pc, #104]	; (25018 <spi_data_write+0x1c4>)
   24fae:	0018      	movs	r0, r3
   24fb0:	4b17      	ldr	r3, [pc, #92]	; (25010 <spi_data_write+0x1bc>)
   24fb2:	4798      	blx	r3
				result = N_FAIL;
   24fb4:	2313      	movs	r3, #19
   24fb6:	18fb      	adds	r3, r7, r3
   24fb8:	2200      	movs	r2, #0
   24fba:	701a      	strb	r2, [r3, #0]
				break;
   24fbc:	e017      	b.n	24fee <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   24fbe:	2316      	movs	r3, #22
   24fc0:	18fb      	adds	r3, r7, r3
   24fc2:	881a      	ldrh	r2, [r3, #0]
   24fc4:	2314      	movs	r3, #20
   24fc6:	18fb      	adds	r3, r7, r3
   24fc8:	881b      	ldrh	r3, [r3, #0]
   24fca:	18d3      	adds	r3, r2, r3
   24fcc:	b29a      	uxth	r2, r3
   24fce:	2316      	movs	r3, #22
   24fd0:	18fb      	adds	r3, r7, r3
   24fd2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   24fd4:	1cbb      	adds	r3, r7, #2
   24fd6:	1cb9      	adds	r1, r7, #2
   24fd8:	2214      	movs	r2, #20
   24fda:	18ba      	adds	r2, r7, r2
   24fdc:	8809      	ldrh	r1, [r1, #0]
   24fde:	8812      	ldrh	r2, [r2, #0]
   24fe0:	1a8a      	subs	r2, r1, r2
   24fe2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24fe4:	1cbb      	adds	r3, r7, #2
   24fe6:	881b      	ldrh	r3, [r3, #0]
   24fe8:	2b00      	cmp	r3, #0
   24fea:	d000      	beq.n	24fee <spi_data_write+0x19a>
   24fec:	e745      	b.n	24e7a <spi_data_write+0x26>


	return result;
   24fee:	2313      	movs	r3, #19
   24ff0:	18fb      	adds	r3, r7, r3
   24ff2:	781b      	ldrb	r3, [r3, #0]
   24ff4:	b25b      	sxtb	r3, r3
}
   24ff6:	0018      	movs	r0, r3
   24ff8:	46bd      	mov	sp, r7
   24ffa:	b006      	add	sp, #24
   24ffc:	bd80      	pop	{r7, pc}
   24ffe:	46c0      	nop			; (mov r8, r8)
   25000:	00023edd 	.word	0x00023edd
   25004:	00000349 	.word	0x00000349
   25008:	0003ade8 	.word	0x0003ade8
   2500c:	0003a7c0 	.word	0x0003a7c0
   25010:	0001e9e9 	.word	0x0001e9e9
   25014:	0003aa88 	.word	0x0003aa88
   25018:	0003a800 	.word	0x0003a800
   2501c:	00000352 	.word	0x00000352
   25020:	0003aac0 	.word	0x0003aac0
   25024:	200042a8 	.word	0x200042a8
   25028:	0003aaf4 	.word	0x0003aaf4

0002502c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2502c:	b590      	push	{r4, r7, lr}
   2502e:	b087      	sub	sp, #28
   25030:	af02      	add	r7, sp, #8
   25032:	6078      	str	r0, [r7, #4]
   25034:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   25036:	230f      	movs	r3, #15
   25038:	18fb      	adds	r3, r7, r3
   2503a:	220a      	movs	r2, #10
   2503c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2503e:	230c      	movs	r3, #12
   25040:	18fb      	adds	r3, r7, r3
   25042:	2201      	movs	r2, #1
   25044:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   25046:	230e      	movs	r3, #14
   25048:	18fb      	adds	r3, r7, r3
   2504a:	22c9      	movs	r2, #201	; 0xc9
   2504c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2504e:	230d      	movs	r3, #13
   25050:	18fb      	adds	r3, r7, r3
   25052:	2200      	movs	r2, #0
   25054:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   25056:	687b      	ldr	r3, [r7, #4]
   25058:	2b30      	cmp	r3, #48	; 0x30
   2505a:	d808      	bhi.n	2506e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2505c:	230e      	movs	r3, #14
   2505e:	18fb      	adds	r3, r7, r3
   25060:	22c3      	movs	r2, #195	; 0xc3
   25062:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25064:	230d      	movs	r3, #13
   25066:	18fb      	adds	r3, r7, r3
   25068:	2201      	movs	r2, #1
   2506a:	701a      	strb	r2, [r3, #0]
   2506c:	e007      	b.n	2507e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2506e:	230e      	movs	r3, #14
   25070:	18fb      	adds	r3, r7, r3
   25072:	22c9      	movs	r2, #201	; 0xc9
   25074:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25076:	230d      	movs	r3, #13
   25078:	18fb      	adds	r3, r7, r3
   2507a:	2200      	movs	r2, #0
   2507c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2507e:	003a      	movs	r2, r7
   25080:	6879      	ldr	r1, [r7, #4]
   25082:	230e      	movs	r3, #14
   25084:	18fb      	adds	r3, r7, r3
   25086:	7818      	ldrb	r0, [r3, #0]
   25088:	230d      	movs	r3, #13
   2508a:	18fb      	adds	r3, r7, r3
   2508c:	781b      	ldrb	r3, [r3, #0]
   2508e:	9300      	str	r3, [sp, #0]
   25090:	2304      	movs	r3, #4
   25092:	4c2e      	ldr	r4, [pc, #184]	; (2514c <spi_write_reg+0x120>)
   25094:	47a0      	blx	r4
   25096:	0002      	movs	r2, r0
   25098:	230c      	movs	r3, #12
   2509a:	18fb      	adds	r3, r7, r3
   2509c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2509e:	230c      	movs	r3, #12
   250a0:	18fb      	adds	r3, r7, r3
   250a2:	781b      	ldrb	r3, [r3, #0]
   250a4:	b25b      	sxtb	r3, r3
   250a6:	2b01      	cmp	r3, #1
   250a8:	d010      	beq.n	250cc <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   250aa:	4a29      	ldr	r2, [pc, #164]	; (25150 <spi_write_reg+0x124>)
   250ac:	4929      	ldr	r1, [pc, #164]	; (25154 <spi_write_reg+0x128>)
   250ae:	4b2a      	ldr	r3, [pc, #168]	; (25158 <spi_write_reg+0x12c>)
   250b0:	0018      	movs	r0, r3
   250b2:	4b2a      	ldr	r3, [pc, #168]	; (2515c <spi_write_reg+0x130>)
   250b4:	4798      	blx	r3
   250b6:	687a      	ldr	r2, [r7, #4]
   250b8:	4b29      	ldr	r3, [pc, #164]	; (25160 <spi_write_reg+0x134>)
   250ba:	0011      	movs	r1, r2
   250bc:	0018      	movs	r0, r3
   250be:	4b27      	ldr	r3, [pc, #156]	; (2515c <spi_write_reg+0x130>)
   250c0:	4798      	blx	r3
   250c2:	4b28      	ldr	r3, [pc, #160]	; (25164 <spi_write_reg+0x138>)
   250c4:	0018      	movs	r0, r3
   250c6:	4b25      	ldr	r3, [pc, #148]	; (2515c <spi_write_reg+0x130>)
   250c8:	4798      	blx	r3
		goto _FAIL_;
   250ca:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   250cc:	230c      	movs	r3, #12
   250ce:	18fb      	adds	r3, r7, r3
   250d0:	781b      	ldrb	r3, [r3, #0]
   250d2:	b25b      	sxtb	r3, r3
   250d4:	2b01      	cmp	r3, #1
   250d6:	d030      	beq.n	2513a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   250d8:	2001      	movs	r0, #1
   250da:	4b23      	ldr	r3, [pc, #140]	; (25168 <spi_write_reg+0x13c>)
   250dc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   250de:	2300      	movs	r3, #0
   250e0:	9300      	str	r3, [sp, #0]
   250e2:	2300      	movs	r3, #0
   250e4:	2200      	movs	r2, #0
   250e6:	2100      	movs	r1, #0
   250e8:	20cf      	movs	r0, #207	; 0xcf
   250ea:	4c20      	ldr	r4, [pc, #128]	; (2516c <spi_write_reg+0x140>)
   250ec:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   250ee:	20cf      	movs	r0, #207	; 0xcf
   250f0:	4b1f      	ldr	r3, [pc, #124]	; (25170 <spi_write_reg+0x144>)
   250f2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   250f4:	23ea      	movs	r3, #234	; 0xea
   250f6:	009a      	lsls	r2, r3, #2
   250f8:	4916      	ldr	r1, [pc, #88]	; (25154 <spi_write_reg+0x128>)
   250fa:	4b17      	ldr	r3, [pc, #92]	; (25158 <spi_write_reg+0x12c>)
   250fc:	0018      	movs	r0, r3
   250fe:	4b17      	ldr	r3, [pc, #92]	; (2515c <spi_write_reg+0x130>)
   25100:	4798      	blx	r3
   25102:	230f      	movs	r3, #15
   25104:	18fb      	adds	r3, r7, r3
   25106:	7819      	ldrb	r1, [r3, #0]
   25108:	683b      	ldr	r3, [r7, #0]
   2510a:	687a      	ldr	r2, [r7, #4]
   2510c:	4819      	ldr	r0, [pc, #100]	; (25174 <spi_write_reg+0x148>)
   2510e:	4c13      	ldr	r4, [pc, #76]	; (2515c <spi_write_reg+0x130>)
   25110:	47a0      	blx	r4
   25112:	4b14      	ldr	r3, [pc, #80]	; (25164 <spi_write_reg+0x138>)
   25114:	0018      	movs	r0, r3
   25116:	4b11      	ldr	r3, [pc, #68]	; (2515c <spi_write_reg+0x130>)
   25118:	4798      	blx	r3
		nm_bsp_sleep(1);
   2511a:	2001      	movs	r0, #1
   2511c:	4b12      	ldr	r3, [pc, #72]	; (25168 <spi_write_reg+0x13c>)
   2511e:	4798      	blx	r3
		retry--;
   25120:	230f      	movs	r3, #15
   25122:	18fb      	adds	r3, r7, r3
   25124:	781a      	ldrb	r2, [r3, #0]
   25126:	230f      	movs	r3, #15
   25128:	18fb      	adds	r3, r7, r3
   2512a:	3a01      	subs	r2, #1
   2512c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2512e:	230f      	movs	r3, #15
   25130:	18fb      	adds	r3, r7, r3
   25132:	781b      	ldrb	r3, [r3, #0]
   25134:	2b00      	cmp	r3, #0
   25136:	d000      	beq.n	2513a <spi_write_reg+0x10e>
   25138:	e78d      	b.n	25056 <spi_write_reg+0x2a>
	}

	return result;
   2513a:	230c      	movs	r3, #12
   2513c:	18fb      	adds	r3, r7, r3
   2513e:	781b      	ldrb	r3, [r3, #0]
   25140:	b25b      	sxtb	r3, r3
}
   25142:	0018      	movs	r0, r3
   25144:	46bd      	mov	sp, r7
   25146:	b005      	add	sp, #20
   25148:	bd90      	pop	{r4, r7, pc}
   2514a:	46c0      	nop			; (mov r8, r8)
   2514c:	00024561 	.word	0x00024561
   25150:	0000039d 	.word	0x0000039d
   25154:	0003adf8 	.word	0x0003adf8
   25158:	0003a7c0 	.word	0x0003a7c0
   2515c:	0001e9e9 	.word	0x0001e9e9
   25160:	0003ab2c 	.word	0x0003ab2c
   25164:	0003a800 	.word	0x0003a800
   25168:	00020ea1 	.word	0x00020ea1
   2516c:	00023fe5 	.word	0x00023fe5
   25170:	00024425 	.word	0x00024425
   25174:	0003ab58 	.word	0x0003ab58

00025178 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   25178:	b590      	push	{r4, r7, lr}
   2517a:	b089      	sub	sp, #36	; 0x24
   2517c:	af02      	add	r7, sp, #8
   2517e:	60f8      	str	r0, [r7, #12]
   25180:	60b9      	str	r1, [r7, #8]
   25182:	1dbb      	adds	r3, r7, #6
   25184:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25186:	2316      	movs	r3, #22
   25188:	18fb      	adds	r3, r7, r3
   2518a:	220a      	movs	r2, #10
   2518c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2518e:	2315      	movs	r3, #21
   25190:	18fb      	adds	r3, r7, r3
   25192:	22c7      	movs	r2, #199	; 0xc7
   25194:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   25196:	1dbb      	adds	r3, r7, #6
   25198:	881a      	ldrh	r2, [r3, #0]
   2519a:	68f9      	ldr	r1, [r7, #12]
   2519c:	2315      	movs	r3, #21
   2519e:	18fb      	adds	r3, r7, r3
   251a0:	7818      	ldrb	r0, [r3, #0]
   251a2:	2300      	movs	r3, #0
   251a4:	9300      	str	r3, [sp, #0]
   251a6:	0013      	movs	r3, r2
   251a8:	2200      	movs	r2, #0
   251aa:	4c4d      	ldr	r4, [pc, #308]	; (252e0 <nm_spi_write+0x168>)
   251ac:	47a0      	blx	r4
   251ae:	0002      	movs	r2, r0
   251b0:	2317      	movs	r3, #23
   251b2:	18fb      	adds	r3, r7, r3
   251b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   251b6:	2317      	movs	r3, #23
   251b8:	18fb      	adds	r3, r7, r3
   251ba:	781b      	ldrb	r3, [r3, #0]
   251bc:	b25b      	sxtb	r3, r3
   251be:	2b01      	cmp	r3, #1
   251c0:	d010      	beq.n	251e4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   251c2:	4a48      	ldr	r2, [pc, #288]	; (252e4 <nm_spi_write+0x16c>)
   251c4:	4948      	ldr	r1, [pc, #288]	; (252e8 <nm_spi_write+0x170>)
   251c6:	4b49      	ldr	r3, [pc, #292]	; (252ec <nm_spi_write+0x174>)
   251c8:	0018      	movs	r0, r3
   251ca:	4b49      	ldr	r3, [pc, #292]	; (252f0 <nm_spi_write+0x178>)
   251cc:	4798      	blx	r3
   251ce:	68fa      	ldr	r2, [r7, #12]
   251d0:	4b48      	ldr	r3, [pc, #288]	; (252f4 <nm_spi_write+0x17c>)
   251d2:	0011      	movs	r1, r2
   251d4:	0018      	movs	r0, r3
   251d6:	4b46      	ldr	r3, [pc, #280]	; (252f0 <nm_spi_write+0x178>)
   251d8:	4798      	blx	r3
   251da:	4b47      	ldr	r3, [pc, #284]	; (252f8 <nm_spi_write+0x180>)
   251dc:	0018      	movs	r0, r3
   251de:	4b44      	ldr	r3, [pc, #272]	; (252f0 <nm_spi_write+0x178>)
   251e0:	4798      	blx	r3
		goto _FAIL_;
   251e2:	e03e      	b.n	25262 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   251e4:	2317      	movs	r3, #23
   251e6:	18fc      	adds	r4, r7, r3
   251e8:	1dbb      	adds	r3, r7, #6
   251ea:	881a      	ldrh	r2, [r3, #0]
   251ec:	68bb      	ldr	r3, [r7, #8]
   251ee:	0011      	movs	r1, r2
   251f0:	0018      	movs	r0, r3
   251f2:	4b42      	ldr	r3, [pc, #264]	; (252fc <nm_spi_write+0x184>)
   251f4:	4798      	blx	r3
   251f6:	0003      	movs	r3, r0
   251f8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   251fa:	2317      	movs	r3, #23
   251fc:	18fb      	adds	r3, r7, r3
   251fe:	781b      	ldrb	r3, [r3, #0]
   25200:	b25b      	sxtb	r3, r3
   25202:	2b01      	cmp	r3, #1
   25204:	d00e      	beq.n	25224 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25206:	4a3e      	ldr	r2, [pc, #248]	; (25300 <nm_spi_write+0x188>)
   25208:	4937      	ldr	r1, [pc, #220]	; (252e8 <nm_spi_write+0x170>)
   2520a:	4b38      	ldr	r3, [pc, #224]	; (252ec <nm_spi_write+0x174>)
   2520c:	0018      	movs	r0, r3
   2520e:	4b38      	ldr	r3, [pc, #224]	; (252f0 <nm_spi_write+0x178>)
   25210:	4798      	blx	r3
   25212:	4b3c      	ldr	r3, [pc, #240]	; (25304 <nm_spi_write+0x18c>)
   25214:	0018      	movs	r0, r3
   25216:	4b36      	ldr	r3, [pc, #216]	; (252f0 <nm_spi_write+0x178>)
   25218:	4798      	blx	r3
   2521a:	4b37      	ldr	r3, [pc, #220]	; (252f8 <nm_spi_write+0x180>)
   2521c:	0018      	movs	r0, r3
   2521e:	4b34      	ldr	r3, [pc, #208]	; (252f0 <nm_spi_write+0x178>)
   25220:	4798      	blx	r3
		goto _FAIL_;
   25222:	e01e      	b.n	25262 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   25224:	2317      	movs	r3, #23
   25226:	18fc      	adds	r4, r7, r3
   25228:	2315      	movs	r3, #21
   2522a:	18fb      	adds	r3, r7, r3
   2522c:	781b      	ldrb	r3, [r3, #0]
   2522e:	0018      	movs	r0, r3
   25230:	4b35      	ldr	r3, [pc, #212]	; (25308 <nm_spi_write+0x190>)
   25232:	4798      	blx	r3
   25234:	0003      	movs	r3, r0
   25236:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   25238:	2317      	movs	r3, #23
   2523a:	18fb      	adds	r3, r7, r3
   2523c:	781b      	ldrb	r3, [r3, #0]
   2523e:	b25b      	sxtb	r3, r3
   25240:	2b01      	cmp	r3, #1
   25242:	d00e      	beq.n	25262 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25244:	4a31      	ldr	r2, [pc, #196]	; (2530c <nm_spi_write+0x194>)
   25246:	4928      	ldr	r1, [pc, #160]	; (252e8 <nm_spi_write+0x170>)
   25248:	4b28      	ldr	r3, [pc, #160]	; (252ec <nm_spi_write+0x174>)
   2524a:	0018      	movs	r0, r3
   2524c:	4b28      	ldr	r3, [pc, #160]	; (252f0 <nm_spi_write+0x178>)
   2524e:	4798      	blx	r3
   25250:	4b2c      	ldr	r3, [pc, #176]	; (25304 <nm_spi_write+0x18c>)
   25252:	0018      	movs	r0, r3
   25254:	4b26      	ldr	r3, [pc, #152]	; (252f0 <nm_spi_write+0x178>)
   25256:	4798      	blx	r3
   25258:	4b27      	ldr	r3, [pc, #156]	; (252f8 <nm_spi_write+0x180>)
   2525a:	0018      	movs	r0, r3
   2525c:	4b24      	ldr	r3, [pc, #144]	; (252f0 <nm_spi_write+0x178>)
   2525e:	4798      	blx	r3
		goto _FAIL_;
   25260:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   25262:	2317      	movs	r3, #23
   25264:	18fb      	adds	r3, r7, r3
   25266:	781b      	ldrb	r3, [r3, #0]
   25268:	b25b      	sxtb	r3, r3
   2526a:	2b01      	cmp	r3, #1
   2526c:	d030      	beq.n	252d0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2526e:	2001      	movs	r0, #1
   25270:	4b27      	ldr	r3, [pc, #156]	; (25310 <nm_spi_write+0x198>)
   25272:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25274:	2300      	movs	r3, #0
   25276:	9300      	str	r3, [sp, #0]
   25278:	2300      	movs	r3, #0
   2527a:	2200      	movs	r2, #0
   2527c:	2100      	movs	r1, #0
   2527e:	20cf      	movs	r0, #207	; 0xcf
   25280:	4c24      	ldr	r4, [pc, #144]	; (25314 <nm_spi_write+0x19c>)
   25282:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25284:	20cf      	movs	r0, #207	; 0xcf
   25286:	4b24      	ldr	r3, [pc, #144]	; (25318 <nm_spi_write+0x1a0>)
   25288:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2528a:	4a24      	ldr	r2, [pc, #144]	; (2531c <nm_spi_write+0x1a4>)
   2528c:	4916      	ldr	r1, [pc, #88]	; (252e8 <nm_spi_write+0x170>)
   2528e:	4b17      	ldr	r3, [pc, #92]	; (252ec <nm_spi_write+0x174>)
   25290:	0018      	movs	r0, r3
   25292:	4b17      	ldr	r3, [pc, #92]	; (252f0 <nm_spi_write+0x178>)
   25294:	4798      	blx	r3
   25296:	2316      	movs	r3, #22
   25298:	18fb      	adds	r3, r7, r3
   2529a:	7819      	ldrb	r1, [r3, #0]
   2529c:	1dbb      	adds	r3, r7, #6
   2529e:	881b      	ldrh	r3, [r3, #0]
   252a0:	68fa      	ldr	r2, [r7, #12]
   252a2:	481f      	ldr	r0, [pc, #124]	; (25320 <nm_spi_write+0x1a8>)
   252a4:	4c12      	ldr	r4, [pc, #72]	; (252f0 <nm_spi_write+0x178>)
   252a6:	47a0      	blx	r4
   252a8:	4b13      	ldr	r3, [pc, #76]	; (252f8 <nm_spi_write+0x180>)
   252aa:	0018      	movs	r0, r3
   252ac:	4b10      	ldr	r3, [pc, #64]	; (252f0 <nm_spi_write+0x178>)
   252ae:	4798      	blx	r3
		nm_bsp_sleep(1);
   252b0:	2001      	movs	r0, #1
   252b2:	4b17      	ldr	r3, [pc, #92]	; (25310 <nm_spi_write+0x198>)
   252b4:	4798      	blx	r3
		retry--;
   252b6:	2316      	movs	r3, #22
   252b8:	18fb      	adds	r3, r7, r3
   252ba:	781a      	ldrb	r2, [r3, #0]
   252bc:	2316      	movs	r3, #22
   252be:	18fb      	adds	r3, r7, r3
   252c0:	3a01      	subs	r2, #1
   252c2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   252c4:	2316      	movs	r3, #22
   252c6:	18fb      	adds	r3, r7, r3
   252c8:	781b      	ldrb	r3, [r3, #0]
   252ca:	2b00      	cmp	r3, #0
   252cc:	d000      	beq.n	252d0 <nm_spi_write+0x158>
   252ce:	e762      	b.n	25196 <nm_spi_write+0x1e>
	}


	return result;
   252d0:	2317      	movs	r3, #23
   252d2:	18fb      	adds	r3, r7, r3
   252d4:	781b      	ldrb	r3, [r3, #0]
   252d6:	b25b      	sxtb	r3, r3
}
   252d8:	0018      	movs	r0, r3
   252da:	46bd      	mov	sp, r7
   252dc:	b007      	add	sp, #28
   252de:	bd90      	pop	{r4, r7, pc}
   252e0:	00024561 	.word	0x00024561
   252e4:	000003cf 	.word	0x000003cf
   252e8:	0003ae08 	.word	0x0003ae08
   252ec:	0003a7c0 	.word	0x0003a7c0
   252f0:	0001e9e9 	.word	0x0001e9e9
   252f4:	0003ab74 	.word	0x0003ab74
   252f8:	0003a800 	.word	0x0003a800
   252fc:	00024e55 	.word	0x00024e55
   25300:	000003d9 	.word	0x000003d9
   25304:	0003aba4 	.word	0x0003aba4
   25308:	00024325 	.word	0x00024325
   2530c:	000003e1 	.word	0x000003e1
   25310:	00020ea1 	.word	0x00020ea1
   25314:	00023fe5 	.word	0x00023fe5
   25318:	00024425 	.word	0x00024425
   2531c:	000003eb 	.word	0x000003eb
   25320:	0003abcc 	.word	0x0003abcc

00025324 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   25324:	b590      	push	{r4, r7, lr}
   25326:	b087      	sub	sp, #28
   25328:	af02      	add	r7, sp, #8
   2532a:	6078      	str	r0, [r7, #4]
   2532c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2532e:	230f      	movs	r3, #15
   25330:	18fb      	adds	r3, r7, r3
   25332:	220a      	movs	r2, #10
   25334:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25336:	230c      	movs	r3, #12
   25338:	18fb      	adds	r3, r7, r3
   2533a:	2201      	movs	r2, #1
   2533c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2533e:	230e      	movs	r3, #14
   25340:	18fb      	adds	r3, r7, r3
   25342:	22ca      	movs	r2, #202	; 0xca
   25344:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   25346:	230d      	movs	r3, #13
   25348:	18fb      	adds	r3, r7, r3
   2534a:	2200      	movs	r2, #0
   2534c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2534e:	687b      	ldr	r3, [r7, #4]
   25350:	2bff      	cmp	r3, #255	; 0xff
   25352:	d808      	bhi.n	25366 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   25354:	230e      	movs	r3, #14
   25356:	18fb      	adds	r3, r7, r3
   25358:	22c4      	movs	r2, #196	; 0xc4
   2535a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2535c:	230d      	movs	r3, #13
   2535e:	18fb      	adds	r3, r7, r3
   25360:	2201      	movs	r2, #1
   25362:	701a      	strb	r2, [r3, #0]
   25364:	e007      	b.n	25376 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   25366:	230e      	movs	r3, #14
   25368:	18fb      	adds	r3, r7, r3
   2536a:	22ca      	movs	r2, #202	; 0xca
   2536c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2536e:	230d      	movs	r3, #13
   25370:	18fb      	adds	r3, r7, r3
   25372:	2200      	movs	r2, #0
   25374:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   25376:	2308      	movs	r3, #8
   25378:	18fa      	adds	r2, r7, r3
   2537a:	6879      	ldr	r1, [r7, #4]
   2537c:	230e      	movs	r3, #14
   2537e:	18fb      	adds	r3, r7, r3
   25380:	7818      	ldrb	r0, [r3, #0]
   25382:	230d      	movs	r3, #13
   25384:	18fb      	adds	r3, r7, r3
   25386:	781b      	ldrb	r3, [r3, #0]
   25388:	9300      	str	r3, [sp, #0]
   2538a:	2304      	movs	r3, #4
   2538c:	4c37      	ldr	r4, [pc, #220]	; (2546c <spi_read_reg+0x148>)
   2538e:	47a0      	blx	r4
   25390:	0002      	movs	r2, r0
   25392:	230c      	movs	r3, #12
   25394:	18fb      	adds	r3, r7, r3
   25396:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25398:	230c      	movs	r3, #12
   2539a:	18fb      	adds	r3, r7, r3
   2539c:	781b      	ldrb	r3, [r3, #0]
   2539e:	b25b      	sxtb	r3, r3
   253a0:	2b01      	cmp	r3, #1
   253a2:	d010      	beq.n	253c6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   253a4:	4a32      	ldr	r2, [pc, #200]	; (25470 <spi_read_reg+0x14c>)
   253a6:	4933      	ldr	r1, [pc, #204]	; (25474 <spi_read_reg+0x150>)
   253a8:	4b33      	ldr	r3, [pc, #204]	; (25478 <spi_read_reg+0x154>)
   253aa:	0018      	movs	r0, r3
   253ac:	4b33      	ldr	r3, [pc, #204]	; (2547c <spi_read_reg+0x158>)
   253ae:	4798      	blx	r3
   253b0:	687a      	ldr	r2, [r7, #4]
   253b2:	4b33      	ldr	r3, [pc, #204]	; (25480 <spi_read_reg+0x15c>)
   253b4:	0011      	movs	r1, r2
   253b6:	0018      	movs	r0, r3
   253b8:	4b30      	ldr	r3, [pc, #192]	; (2547c <spi_read_reg+0x158>)
   253ba:	4798      	blx	r3
   253bc:	4b31      	ldr	r3, [pc, #196]	; (25484 <spi_read_reg+0x160>)
   253be:	0018      	movs	r0, r3
   253c0:	4b2e      	ldr	r3, [pc, #184]	; (2547c <spi_read_reg+0x158>)
   253c2:	4798      	blx	r3
		goto _FAIL_;
   253c4:	e014      	b.n	253f0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   253c6:	2308      	movs	r3, #8
   253c8:	18fb      	adds	r3, r7, r3
   253ca:	781b      	ldrb	r3, [r3, #0]
   253cc:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   253ce:	2308      	movs	r3, #8
   253d0:	18fb      	adds	r3, r7, r3
   253d2:	785b      	ldrb	r3, [r3, #1]
   253d4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   253d6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   253d8:	2308      	movs	r3, #8
   253da:	18fb      	adds	r3, r7, r3
   253dc:	789b      	ldrb	r3, [r3, #2]
   253de:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   253e0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   253e2:	2308      	movs	r3, #8
   253e4:	18fb      	adds	r3, r7, r3
   253e6:	78db      	ldrb	r3, [r3, #3]
   253e8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   253ea:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   253ec:	683b      	ldr	r3, [r7, #0]
   253ee:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   253f0:	230c      	movs	r3, #12
   253f2:	18fb      	adds	r3, r7, r3
   253f4:	781b      	ldrb	r3, [r3, #0]
   253f6:	b25b      	sxtb	r3, r3
   253f8:	2b01      	cmp	r3, #1
   253fa:	d02f      	beq.n	2545c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   253fc:	2001      	movs	r0, #1
   253fe:	4b22      	ldr	r3, [pc, #136]	; (25488 <spi_read_reg+0x164>)
   25400:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25402:	2300      	movs	r3, #0
   25404:	9300      	str	r3, [sp, #0]
   25406:	2300      	movs	r3, #0
   25408:	2200      	movs	r2, #0
   2540a:	2100      	movs	r1, #0
   2540c:	20cf      	movs	r0, #207	; 0xcf
   2540e:	4c1f      	ldr	r4, [pc, #124]	; (2548c <spi_read_reg+0x168>)
   25410:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25412:	20cf      	movs	r0, #207	; 0xcf
   25414:	4b1e      	ldr	r3, [pc, #120]	; (25490 <spi_read_reg+0x16c>)
   25416:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   25418:	4a1e      	ldr	r2, [pc, #120]	; (25494 <spi_read_reg+0x170>)
   2541a:	4916      	ldr	r1, [pc, #88]	; (25474 <spi_read_reg+0x150>)
   2541c:	4b16      	ldr	r3, [pc, #88]	; (25478 <spi_read_reg+0x154>)
   2541e:	0018      	movs	r0, r3
   25420:	4b16      	ldr	r3, [pc, #88]	; (2547c <spi_read_reg+0x158>)
   25422:	4798      	blx	r3
   25424:	230f      	movs	r3, #15
   25426:	18fb      	adds	r3, r7, r3
   25428:	7819      	ldrb	r1, [r3, #0]
   2542a:	687a      	ldr	r2, [r7, #4]
   2542c:	4b1a      	ldr	r3, [pc, #104]	; (25498 <spi_read_reg+0x174>)
   2542e:	0018      	movs	r0, r3
   25430:	4b12      	ldr	r3, [pc, #72]	; (2547c <spi_read_reg+0x158>)
   25432:	4798      	blx	r3
   25434:	4b13      	ldr	r3, [pc, #76]	; (25484 <spi_read_reg+0x160>)
   25436:	0018      	movs	r0, r3
   25438:	4b10      	ldr	r3, [pc, #64]	; (2547c <spi_read_reg+0x158>)
   2543a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2543c:	2001      	movs	r0, #1
   2543e:	4b12      	ldr	r3, [pc, #72]	; (25488 <spi_read_reg+0x164>)
   25440:	4798      	blx	r3
		retry--;
   25442:	230f      	movs	r3, #15
   25444:	18fb      	adds	r3, r7, r3
   25446:	781a      	ldrb	r2, [r3, #0]
   25448:	230f      	movs	r3, #15
   2544a:	18fb      	adds	r3, r7, r3
   2544c:	3a01      	subs	r2, #1
   2544e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25450:	230f      	movs	r3, #15
   25452:	18fb      	adds	r3, r7, r3
   25454:	781b      	ldrb	r3, [r3, #0]
   25456:	2b00      	cmp	r3, #0
   25458:	d000      	beq.n	2545c <spi_read_reg+0x138>
   2545a:	e778      	b.n	2534e <spi_read_reg+0x2a>
	}
		
	return result;
   2545c:	230c      	movs	r3, #12
   2545e:	18fb      	adds	r3, r7, r3
   25460:	781b      	ldrb	r3, [r3, #0]
   25462:	b25b      	sxtb	r3, r3
}
   25464:	0018      	movs	r0, r3
   25466:	46bd      	mov	sp, r7
   25468:	b005      	add	sp, #20
   2546a:	bd90      	pop	{r4, r7, pc}
   2546c:	00024561 	.word	0x00024561
   25470:	00000423 	.word	0x00000423
   25474:	0003ae18 	.word	0x0003ae18
   25478:	0003a7c0 	.word	0x0003a7c0
   2547c:	0001e9e9 	.word	0x0001e9e9
   25480:	0003abe8 	.word	0x0003abe8
   25484:	0003a800 	.word	0x0003a800
   25488:	00020ea1 	.word	0x00020ea1
   2548c:	00023fe5 	.word	0x00023fe5
   25490:	00024425 	.word	0x00024425
   25494:	00000435 	.word	0x00000435
   25498:	0003ac14 	.word	0x0003ac14

0002549c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2549c:	b590      	push	{r4, r7, lr}
   2549e:	b089      	sub	sp, #36	; 0x24
   254a0:	af02      	add	r7, sp, #8
   254a2:	60f8      	str	r0, [r7, #12]
   254a4:	60b9      	str	r1, [r7, #8]
   254a6:	1dbb      	adds	r3, r7, #6
   254a8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   254aa:	2316      	movs	r3, #22
   254ac:	18fb      	adds	r3, r7, r3
   254ae:	22c8      	movs	r2, #200	; 0xc8
   254b0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   254b2:	2317      	movs	r3, #23
   254b4:	18fb      	adds	r3, r7, r3
   254b6:	220a      	movs	r2, #10
   254b8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   254ba:	1dbb      	adds	r3, r7, #6
   254bc:	881c      	ldrh	r4, [r3, #0]
   254be:	68ba      	ldr	r2, [r7, #8]
   254c0:	68f9      	ldr	r1, [r7, #12]
   254c2:	2316      	movs	r3, #22
   254c4:	18fb      	adds	r3, r7, r3
   254c6:	7818      	ldrb	r0, [r3, #0]
   254c8:	2300      	movs	r3, #0
   254ca:	9300      	str	r3, [sp, #0]
   254cc:	0023      	movs	r3, r4
   254ce:	4c2e      	ldr	r4, [pc, #184]	; (25588 <nm_spi_read+0xec>)
   254d0:	47a0      	blx	r4
   254d2:	0002      	movs	r2, r0
   254d4:	2315      	movs	r3, #21
   254d6:	18fb      	adds	r3, r7, r3
   254d8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   254da:	2315      	movs	r3, #21
   254dc:	18fb      	adds	r3, r7, r3
   254de:	781b      	ldrb	r3, [r3, #0]
   254e0:	b25b      	sxtb	r3, r3
   254e2:	2b01      	cmp	r3, #1
   254e4:	d010      	beq.n	25508 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   254e6:	4a29      	ldr	r2, [pc, #164]	; (2558c <nm_spi_read+0xf0>)
   254e8:	4929      	ldr	r1, [pc, #164]	; (25590 <nm_spi_read+0xf4>)
   254ea:	4b2a      	ldr	r3, [pc, #168]	; (25594 <nm_spi_read+0xf8>)
   254ec:	0018      	movs	r0, r3
   254ee:	4b2a      	ldr	r3, [pc, #168]	; (25598 <nm_spi_read+0xfc>)
   254f0:	4798      	blx	r3
   254f2:	68fa      	ldr	r2, [r7, #12]
   254f4:	4b29      	ldr	r3, [pc, #164]	; (2559c <nm_spi_read+0x100>)
   254f6:	0011      	movs	r1, r2
   254f8:	0018      	movs	r0, r3
   254fa:	4b27      	ldr	r3, [pc, #156]	; (25598 <nm_spi_read+0xfc>)
   254fc:	4798      	blx	r3
   254fe:	4b28      	ldr	r3, [pc, #160]	; (255a0 <nm_spi_read+0x104>)
   25500:	0018      	movs	r0, r3
   25502:	4b25      	ldr	r3, [pc, #148]	; (25598 <nm_spi_read+0xfc>)
   25504:	4798      	blx	r3
		goto _FAIL_;
   25506:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   25508:	2315      	movs	r3, #21
   2550a:	18fb      	adds	r3, r7, r3
   2550c:	781b      	ldrb	r3, [r3, #0]
   2550e:	b25b      	sxtb	r3, r3
   25510:	2b01      	cmp	r3, #1
   25512:	d030      	beq.n	25576 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   25514:	2001      	movs	r0, #1
   25516:	4b23      	ldr	r3, [pc, #140]	; (255a4 <nm_spi_read+0x108>)
   25518:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2551a:	2300      	movs	r3, #0
   2551c:	9300      	str	r3, [sp, #0]
   2551e:	2300      	movs	r3, #0
   25520:	2200      	movs	r2, #0
   25522:	2100      	movs	r1, #0
   25524:	20cf      	movs	r0, #207	; 0xcf
   25526:	4c20      	ldr	r4, [pc, #128]	; (255a8 <nm_spi_read+0x10c>)
   25528:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2552a:	20cf      	movs	r0, #207	; 0xcf
   2552c:	4b1f      	ldr	r3, [pc, #124]	; (255ac <nm_spi_read+0x110>)
   2552e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25530:	4a1f      	ldr	r2, [pc, #124]	; (255b0 <nm_spi_read+0x114>)
   25532:	4917      	ldr	r1, [pc, #92]	; (25590 <nm_spi_read+0xf4>)
   25534:	4b17      	ldr	r3, [pc, #92]	; (25594 <nm_spi_read+0xf8>)
   25536:	0018      	movs	r0, r3
   25538:	4b17      	ldr	r3, [pc, #92]	; (25598 <nm_spi_read+0xfc>)
   2553a:	4798      	blx	r3
   2553c:	2317      	movs	r3, #23
   2553e:	18fb      	adds	r3, r7, r3
   25540:	7819      	ldrb	r1, [r3, #0]
   25542:	1dbb      	adds	r3, r7, #6
   25544:	881b      	ldrh	r3, [r3, #0]
   25546:	68fa      	ldr	r2, [r7, #12]
   25548:	481a      	ldr	r0, [pc, #104]	; (255b4 <nm_spi_read+0x118>)
   2554a:	4c13      	ldr	r4, [pc, #76]	; (25598 <nm_spi_read+0xfc>)
   2554c:	47a0      	blx	r4
   2554e:	4b14      	ldr	r3, [pc, #80]	; (255a0 <nm_spi_read+0x104>)
   25550:	0018      	movs	r0, r3
   25552:	4b11      	ldr	r3, [pc, #68]	; (25598 <nm_spi_read+0xfc>)
   25554:	4798      	blx	r3
		nm_bsp_sleep(1);
   25556:	2001      	movs	r0, #1
   25558:	4b12      	ldr	r3, [pc, #72]	; (255a4 <nm_spi_read+0x108>)
   2555a:	4798      	blx	r3
		retry--;
   2555c:	2317      	movs	r3, #23
   2555e:	18fb      	adds	r3, r7, r3
   25560:	781a      	ldrb	r2, [r3, #0]
   25562:	2317      	movs	r3, #23
   25564:	18fb      	adds	r3, r7, r3
   25566:	3a01      	subs	r2, #1
   25568:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2556a:	2317      	movs	r3, #23
   2556c:	18fb      	adds	r3, r7, r3
   2556e:	781b      	ldrb	r3, [r3, #0]
   25570:	2b00      	cmp	r3, #0
   25572:	d000      	beq.n	25576 <nm_spi_read+0xda>
   25574:	e7a1      	b.n	254ba <nm_spi_read+0x1e>
	}

	return result;
   25576:	2315      	movs	r3, #21
   25578:	18fb      	adds	r3, r7, r3
   2557a:	781b      	ldrb	r3, [r3, #0]
   2557c:	b25b      	sxtb	r3, r3
}
   2557e:	0018      	movs	r0, r3
   25580:	46bd      	mov	sp, r7
   25582:	b007      	add	sp, #28
   25584:	bd90      	pop	{r4, r7, pc}
   25586:	46c0      	nop			; (mov r8, r8)
   25588:	00024561 	.word	0x00024561
   2558c:	00000472 	.word	0x00000472
   25590:	0003ae28 	.word	0x0003ae28
   25594:	0003a7c0 	.word	0x0003a7c0
   25598:	0001e9e9 	.word	0x0001e9e9
   2559c:	0003ac2c 	.word	0x0003ac2c
   255a0:	0003a800 	.word	0x0003a800
   255a4:	00020ea1 	.word	0x00020ea1
   255a8:	00023fe5 	.word	0x00023fe5
   255ac:	00024425 	.word	0x00024425
   255b0:	0000047d 	.word	0x0000047d
   255b4:	0003abcc 	.word	0x0003abcc

000255b8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   255b8:	b580      	push	{r7, lr}
   255ba:	b082      	sub	sp, #8
   255bc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   255be:	4b0c      	ldr	r3, [pc, #48]	; (255f0 <spi_init_pkt_sz+0x38>)
   255c0:	0018      	movs	r0, r3
   255c2:	4b0c      	ldr	r3, [pc, #48]	; (255f4 <spi_init_pkt_sz+0x3c>)
   255c4:	4798      	blx	r3
   255c6:	0003      	movs	r3, r0
   255c8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   255ca:	687b      	ldr	r3, [r7, #4]
   255cc:	2270      	movs	r2, #112	; 0x70
   255ce:	4393      	bics	r3, r2
   255d0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   255d2:	687b      	ldr	r3, [r7, #4]
   255d4:	2250      	movs	r2, #80	; 0x50
   255d6:	4313      	orrs	r3, r2
   255d8:	607b      	str	r3, [r7, #4]
   255da:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   255dc:	687b      	ldr	r3, [r7, #4]
   255de:	4a04      	ldr	r2, [pc, #16]	; (255f0 <spi_init_pkt_sz+0x38>)
   255e0:	0019      	movs	r1, r3
   255e2:	0010      	movs	r0, r2
   255e4:	4b04      	ldr	r3, [pc, #16]	; (255f8 <spi_init_pkt_sz+0x40>)
   255e6:	4798      	blx	r3
}
   255e8:	46c0      	nop			; (mov r8, r8)
   255ea:	46bd      	mov	sp, r7
   255ec:	b002      	add	sp, #8
   255ee:	bd80      	pop	{r7, pc}
   255f0:	0000e824 	.word	0x0000e824
   255f4:	00025791 	.word	0x00025791
   255f8:	00025805 	.word	0x00025805

000255fc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   255fc:	b590      	push	{r4, r7, lr}
   255fe:	b083      	sub	sp, #12
   25600:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25602:	2300      	movs	r3, #0
   25604:	9300      	str	r3, [sp, #0]
   25606:	2300      	movs	r3, #0
   25608:	2200      	movs	r2, #0
   2560a:	2100      	movs	r1, #0
   2560c:	20cf      	movs	r0, #207	; 0xcf
   2560e:	4c05      	ldr	r4, [pc, #20]	; (25624 <nm_spi_reset+0x28>)
   25610:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25612:	20cf      	movs	r0, #207	; 0xcf
   25614:	4b04      	ldr	r3, [pc, #16]	; (25628 <nm_spi_reset+0x2c>)
   25616:	4798      	blx	r3
	return M2M_SUCCESS;
   25618:	2300      	movs	r3, #0
}
   2561a:	0018      	movs	r0, r3
   2561c:	46bd      	mov	sp, r7
   2561e:	b001      	add	sp, #4
   25620:	bd90      	pop	{r4, r7, pc}
   25622:	46c0      	nop			; (mov r8, r8)
   25624:	00023fe5 	.word	0x00023fe5
   25628:	00024425 	.word	0x00024425

0002562c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   2562c:	b580      	push	{r7, lr}
   2562e:	b082      	sub	sp, #8
   25630:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25632:	2300      	movs	r3, #0
   25634:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   25636:	4b40      	ldr	r3, [pc, #256]	; (25738 <nm_spi_init+0x10c>)
   25638:	2200      	movs	r2, #0
   2563a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   2563c:	003b      	movs	r3, r7
   2563e:	4a3f      	ldr	r2, [pc, #252]	; (2573c <nm_spi_init+0x110>)
   25640:	0019      	movs	r1, r3
   25642:	0010      	movs	r0, r2
   25644:	4b3e      	ldr	r3, [pc, #248]	; (25740 <nm_spi_init+0x114>)
   25646:	4798      	blx	r3
   25648:	1e03      	subs	r3, r0, #0
   2564a:	d129      	bne.n	256a0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   2564c:	4b3a      	ldr	r3, [pc, #232]	; (25738 <nm_spi_init+0x10c>)
   2564e:	2201      	movs	r2, #1
   25650:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25652:	2398      	movs	r3, #152	; 0x98
   25654:	00da      	lsls	r2, r3, #3
   25656:	493b      	ldr	r1, [pc, #236]	; (25744 <nm_spi_init+0x118>)
   25658:	4b3b      	ldr	r3, [pc, #236]	; (25748 <nm_spi_init+0x11c>)
   2565a:	0018      	movs	r0, r3
   2565c:	4b3b      	ldr	r3, [pc, #236]	; (2574c <nm_spi_init+0x120>)
   2565e:	4798      	blx	r3
   25660:	4b3b      	ldr	r3, [pc, #236]	; (25750 <nm_spi_init+0x124>)
   25662:	0018      	movs	r0, r3
   25664:	4b39      	ldr	r3, [pc, #228]	; (2574c <nm_spi_init+0x120>)
   25666:	4798      	blx	r3
   25668:	4b3a      	ldr	r3, [pc, #232]	; (25754 <nm_spi_init+0x128>)
   2566a:	0018      	movs	r0, r3
   2566c:	4b37      	ldr	r3, [pc, #220]	; (2574c <nm_spi_init+0x120>)
   2566e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25670:	003b      	movs	r3, r7
   25672:	4a32      	ldr	r2, [pc, #200]	; (2573c <nm_spi_init+0x110>)
   25674:	0019      	movs	r1, r3
   25676:	0010      	movs	r0, r2
   25678:	4b31      	ldr	r3, [pc, #196]	; (25740 <nm_spi_init+0x114>)
   2567a:	4798      	blx	r3
   2567c:	1e03      	subs	r3, r0, #0
   2567e:	d10f      	bne.n	256a0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25680:	4a35      	ldr	r2, [pc, #212]	; (25758 <nm_spi_init+0x12c>)
   25682:	4930      	ldr	r1, [pc, #192]	; (25744 <nm_spi_init+0x118>)
   25684:	4b30      	ldr	r3, [pc, #192]	; (25748 <nm_spi_init+0x11c>)
   25686:	0018      	movs	r0, r3
   25688:	4b30      	ldr	r3, [pc, #192]	; (2574c <nm_spi_init+0x120>)
   2568a:	4798      	blx	r3
   2568c:	4b33      	ldr	r3, [pc, #204]	; (2575c <nm_spi_init+0x130>)
   2568e:	0018      	movs	r0, r3
   25690:	4b2e      	ldr	r3, [pc, #184]	; (2574c <nm_spi_init+0x120>)
   25692:	4798      	blx	r3
   25694:	4b2f      	ldr	r3, [pc, #188]	; (25754 <nm_spi_init+0x128>)
   25696:	0018      	movs	r0, r3
   25698:	4b2c      	ldr	r3, [pc, #176]	; (2574c <nm_spi_init+0x120>)
   2569a:	4798      	blx	r3
			return 0;
   2569c:	2300      	movs	r3, #0
   2569e:	e047      	b.n	25730 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   256a0:	4b25      	ldr	r3, [pc, #148]	; (25738 <nm_spi_init+0x10c>)
   256a2:	781b      	ldrb	r3, [r3, #0]
   256a4:	2b00      	cmp	r3, #0
   256a6:	d126      	bne.n	256f6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   256a8:	683b      	ldr	r3, [r7, #0]
   256aa:	220c      	movs	r2, #12
   256ac:	4393      	bics	r3, r2
   256ae:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   256b0:	683b      	ldr	r3, [r7, #0]
   256b2:	2270      	movs	r2, #112	; 0x70
   256b4:	4393      	bics	r3, r2
   256b6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   256b8:	683b      	ldr	r3, [r7, #0]
   256ba:	2250      	movs	r2, #80	; 0x50
   256bc:	4313      	orrs	r3, r2
   256be:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   256c0:	683b      	ldr	r3, [r7, #0]
   256c2:	4a1e      	ldr	r2, [pc, #120]	; (2573c <nm_spi_init+0x110>)
   256c4:	0019      	movs	r1, r3
   256c6:	0010      	movs	r0, r2
   256c8:	4b25      	ldr	r3, [pc, #148]	; (25760 <nm_spi_init+0x134>)
   256ca:	4798      	blx	r3
   256cc:	1e03      	subs	r3, r0, #0
   256ce:	d10f      	bne.n	256f0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   256d0:	4a24      	ldr	r2, [pc, #144]	; (25764 <nm_spi_init+0x138>)
   256d2:	491c      	ldr	r1, [pc, #112]	; (25744 <nm_spi_init+0x118>)
   256d4:	4b1c      	ldr	r3, [pc, #112]	; (25748 <nm_spi_init+0x11c>)
   256d6:	0018      	movs	r0, r3
   256d8:	4b1c      	ldr	r3, [pc, #112]	; (2574c <nm_spi_init+0x120>)
   256da:	4798      	blx	r3
   256dc:	4b22      	ldr	r3, [pc, #136]	; (25768 <nm_spi_init+0x13c>)
   256de:	0018      	movs	r0, r3
   256e0:	4b1a      	ldr	r3, [pc, #104]	; (2574c <nm_spi_init+0x120>)
   256e2:	4798      	blx	r3
   256e4:	4b1b      	ldr	r3, [pc, #108]	; (25754 <nm_spi_init+0x128>)
   256e6:	0018      	movs	r0, r3
   256e8:	4b18      	ldr	r3, [pc, #96]	; (2574c <nm_spi_init+0x120>)
   256ea:	4798      	blx	r3
			return 0;
   256ec:	2300      	movs	r3, #0
   256ee:	e01f      	b.n	25730 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   256f0:	4b11      	ldr	r3, [pc, #68]	; (25738 <nm_spi_init+0x10c>)
   256f2:	2201      	movs	r2, #1
   256f4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   256f6:	1d3a      	adds	r2, r7, #4
   256f8:	2380      	movs	r3, #128	; 0x80
   256fa:	015b      	lsls	r3, r3, #5
   256fc:	0011      	movs	r1, r2
   256fe:	0018      	movs	r0, r3
   25700:	4b0f      	ldr	r3, [pc, #60]	; (25740 <nm_spi_init+0x114>)
   25702:	4798      	blx	r3
   25704:	1e03      	subs	r3, r0, #0
   25706:	d110      	bne.n	2572a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   25708:	4a18      	ldr	r2, [pc, #96]	; (2576c <nm_spi_init+0x140>)
   2570a:	490e      	ldr	r1, [pc, #56]	; (25744 <nm_spi_init+0x118>)
   2570c:	4b0e      	ldr	r3, [pc, #56]	; (25748 <nm_spi_init+0x11c>)
   2570e:	0018      	movs	r0, r3
   25710:	4b0e      	ldr	r3, [pc, #56]	; (2574c <nm_spi_init+0x120>)
   25712:	4798      	blx	r3
   25714:	4b16      	ldr	r3, [pc, #88]	; (25770 <nm_spi_init+0x144>)
   25716:	0018      	movs	r0, r3
   25718:	4b0c      	ldr	r3, [pc, #48]	; (2574c <nm_spi_init+0x120>)
   2571a:	4798      	blx	r3
   2571c:	4b0d      	ldr	r3, [pc, #52]	; (25754 <nm_spi_init+0x128>)
   2571e:	0018      	movs	r0, r3
   25720:	4b0a      	ldr	r3, [pc, #40]	; (2574c <nm_spi_init+0x120>)
   25722:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25724:	2306      	movs	r3, #6
   25726:	425b      	negs	r3, r3
   25728:	e002      	b.n	25730 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2572a:	4b12      	ldr	r3, [pc, #72]	; (25774 <nm_spi_init+0x148>)
   2572c:	4798      	blx	r3


	return M2M_SUCCESS;
   2572e:	2300      	movs	r3, #0
}
   25730:	0018      	movs	r0, r3
   25732:	46bd      	mov	sp, r7
   25734:	b002      	add	sp, #8
   25736:	bd80      	pop	{r7, pc}
   25738:	200042a8 	.word	0x200042a8
   2573c:	0000e824 	.word	0x0000e824
   25740:	00025325 	.word	0x00025325
   25744:	0003ae34 	.word	0x0003ae34
   25748:	0003a7c0 	.word	0x0003a7c0
   2574c:	0001e9e9 	.word	0x0001e9e9
   25750:	0003ac5c 	.word	0x0003ac5c
   25754:	0003a800 	.word	0x0003a800
   25758:	000004c3 	.word	0x000004c3
   2575c:	0003acac 	.word	0x0003acac
   25760:	0002502d 	.word	0x0002502d
   25764:	000004cd 	.word	0x000004cd
   25768:	0003acdc 	.word	0x0003acdc
   2576c:	000004d7 	.word	0x000004d7
   25770:	0003ad10 	.word	0x0003ad10
   25774:	000255b9 	.word	0x000255b9

00025778 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25778:	b580      	push	{r7, lr}
   2577a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2577c:	4b03      	ldr	r3, [pc, #12]	; (2578c <nm_spi_deinit+0x14>)
   2577e:	2200      	movs	r2, #0
   25780:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25782:	2300      	movs	r3, #0
}
   25784:	0018      	movs	r0, r3
   25786:	46bd      	mov	sp, r7
   25788:	bd80      	pop	{r7, pc}
   2578a:	46c0      	nop			; (mov r8, r8)
   2578c:	200042a8 	.word	0x200042a8

00025790 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25790:	b580      	push	{r7, lr}
   25792:	b084      	sub	sp, #16
   25794:	af00      	add	r7, sp, #0
   25796:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25798:	230c      	movs	r3, #12
   2579a:	18fa      	adds	r2, r7, r3
   2579c:	687b      	ldr	r3, [r7, #4]
   2579e:	0011      	movs	r1, r2
   257a0:	0018      	movs	r0, r3
   257a2:	4b03      	ldr	r3, [pc, #12]	; (257b0 <nm_spi_read_reg+0x20>)
   257a4:	4798      	blx	r3

	return u32Val;
   257a6:	68fb      	ldr	r3, [r7, #12]
}
   257a8:	0018      	movs	r0, r3
   257aa:	46bd      	mov	sp, r7
   257ac:	b004      	add	sp, #16
   257ae:	bd80      	pop	{r7, pc}
   257b0:	00025325 	.word	0x00025325

000257b4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   257b4:	b590      	push	{r4, r7, lr}
   257b6:	b085      	sub	sp, #20
   257b8:	af00      	add	r7, sp, #0
   257ba:	6078      	str	r0, [r7, #4]
   257bc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   257be:	230f      	movs	r3, #15
   257c0:	18fc      	adds	r4, r7, r3
   257c2:	683a      	ldr	r2, [r7, #0]
   257c4:	687b      	ldr	r3, [r7, #4]
   257c6:	0011      	movs	r1, r2
   257c8:	0018      	movs	r0, r3
   257ca:	4b0d      	ldr	r3, [pc, #52]	; (25800 <nm_spi_read_reg_with_ret+0x4c>)
   257cc:	4798      	blx	r3
   257ce:	0003      	movs	r3, r0
   257d0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   257d2:	230f      	movs	r3, #15
   257d4:	18fb      	adds	r3, r7, r3
   257d6:	781b      	ldrb	r3, [r3, #0]
   257d8:	b25b      	sxtb	r3, r3
   257da:	2b01      	cmp	r3, #1
   257dc:	d104      	bne.n	257e8 <nm_spi_read_reg_with_ret+0x34>
   257de:	230f      	movs	r3, #15
   257e0:	18fb      	adds	r3, r7, r3
   257e2:	2200      	movs	r2, #0
   257e4:	701a      	strb	r2, [r3, #0]
   257e6:	e003      	b.n	257f0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   257e8:	230f      	movs	r3, #15
   257ea:	18fb      	adds	r3, r7, r3
   257ec:	22fa      	movs	r2, #250	; 0xfa
   257ee:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   257f0:	230f      	movs	r3, #15
   257f2:	18fb      	adds	r3, r7, r3
   257f4:	781b      	ldrb	r3, [r3, #0]
   257f6:	b25b      	sxtb	r3, r3
}
   257f8:	0018      	movs	r0, r3
   257fa:	46bd      	mov	sp, r7
   257fc:	b005      	add	sp, #20
   257fe:	bd90      	pop	{r4, r7, pc}
   25800:	00025325 	.word	0x00025325

00025804 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25804:	b590      	push	{r4, r7, lr}
   25806:	b085      	sub	sp, #20
   25808:	af00      	add	r7, sp, #0
   2580a:	6078      	str	r0, [r7, #4]
   2580c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2580e:	230f      	movs	r3, #15
   25810:	18fc      	adds	r4, r7, r3
   25812:	683a      	ldr	r2, [r7, #0]
   25814:	687b      	ldr	r3, [r7, #4]
   25816:	0011      	movs	r1, r2
   25818:	0018      	movs	r0, r3
   2581a:	4b0d      	ldr	r3, [pc, #52]	; (25850 <nm_spi_write_reg+0x4c>)
   2581c:	4798      	blx	r3
   2581e:	0003      	movs	r3, r0
   25820:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25822:	230f      	movs	r3, #15
   25824:	18fb      	adds	r3, r7, r3
   25826:	781b      	ldrb	r3, [r3, #0]
   25828:	b25b      	sxtb	r3, r3
   2582a:	2b01      	cmp	r3, #1
   2582c:	d104      	bne.n	25838 <nm_spi_write_reg+0x34>
   2582e:	230f      	movs	r3, #15
   25830:	18fb      	adds	r3, r7, r3
   25832:	2200      	movs	r2, #0
   25834:	701a      	strb	r2, [r3, #0]
   25836:	e003      	b.n	25840 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25838:	230f      	movs	r3, #15
   2583a:	18fb      	adds	r3, r7, r3
   2583c:	22fa      	movs	r2, #250	; 0xfa
   2583e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25840:	230f      	movs	r3, #15
   25842:	18fb      	adds	r3, r7, r3
   25844:	781b      	ldrb	r3, [r3, #0]
   25846:	b25b      	sxtb	r3, r3
}
   25848:	0018      	movs	r0, r3
   2584a:	46bd      	mov	sp, r7
   2584c:	b005      	add	sp, #20
   2584e:	bd90      	pop	{r4, r7, pc}
   25850:	0002502d 	.word	0x0002502d

00025854 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25854:	b590      	push	{r4, r7, lr}
   25856:	b087      	sub	sp, #28
   25858:	af00      	add	r7, sp, #0
   2585a:	60f8      	str	r0, [r7, #12]
   2585c:	60b9      	str	r1, [r7, #8]
   2585e:	1dbb      	adds	r3, r7, #6
   25860:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25862:	2317      	movs	r3, #23
   25864:	18fc      	adds	r4, r7, r3
   25866:	1dbb      	adds	r3, r7, #6
   25868:	881a      	ldrh	r2, [r3, #0]
   2586a:	68b9      	ldr	r1, [r7, #8]
   2586c:	68fb      	ldr	r3, [r7, #12]
   2586e:	0018      	movs	r0, r3
   25870:	4b0d      	ldr	r3, [pc, #52]	; (258a8 <nm_spi_read_block+0x54>)
   25872:	4798      	blx	r3
   25874:	0003      	movs	r3, r0
   25876:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25878:	2317      	movs	r3, #23
   2587a:	18fb      	adds	r3, r7, r3
   2587c:	781b      	ldrb	r3, [r3, #0]
   2587e:	b25b      	sxtb	r3, r3
   25880:	2b01      	cmp	r3, #1
   25882:	d104      	bne.n	2588e <nm_spi_read_block+0x3a>
   25884:	2317      	movs	r3, #23
   25886:	18fb      	adds	r3, r7, r3
   25888:	2200      	movs	r2, #0
   2588a:	701a      	strb	r2, [r3, #0]
   2588c:	e003      	b.n	25896 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2588e:	2317      	movs	r3, #23
   25890:	18fb      	adds	r3, r7, r3
   25892:	22fa      	movs	r2, #250	; 0xfa
   25894:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25896:	2317      	movs	r3, #23
   25898:	18fb      	adds	r3, r7, r3
   2589a:	781b      	ldrb	r3, [r3, #0]
   2589c:	b25b      	sxtb	r3, r3
}
   2589e:	0018      	movs	r0, r3
   258a0:	46bd      	mov	sp, r7
   258a2:	b007      	add	sp, #28
   258a4:	bd90      	pop	{r4, r7, pc}
   258a6:	46c0      	nop			; (mov r8, r8)
   258a8:	0002549d 	.word	0x0002549d

000258ac <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   258ac:	b590      	push	{r4, r7, lr}
   258ae:	b087      	sub	sp, #28
   258b0:	af00      	add	r7, sp, #0
   258b2:	60f8      	str	r0, [r7, #12]
   258b4:	60b9      	str	r1, [r7, #8]
   258b6:	1dbb      	adds	r3, r7, #6
   258b8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   258ba:	2317      	movs	r3, #23
   258bc:	18fc      	adds	r4, r7, r3
   258be:	1dbb      	adds	r3, r7, #6
   258c0:	881a      	ldrh	r2, [r3, #0]
   258c2:	68b9      	ldr	r1, [r7, #8]
   258c4:	68fb      	ldr	r3, [r7, #12]
   258c6:	0018      	movs	r0, r3
   258c8:	4b0d      	ldr	r3, [pc, #52]	; (25900 <nm_spi_write_block+0x54>)
   258ca:	4798      	blx	r3
   258cc:	0003      	movs	r3, r0
   258ce:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   258d0:	2317      	movs	r3, #23
   258d2:	18fb      	adds	r3, r7, r3
   258d4:	781b      	ldrb	r3, [r3, #0]
   258d6:	b25b      	sxtb	r3, r3
   258d8:	2b01      	cmp	r3, #1
   258da:	d104      	bne.n	258e6 <nm_spi_write_block+0x3a>
   258dc:	2317      	movs	r3, #23
   258de:	18fb      	adds	r3, r7, r3
   258e0:	2200      	movs	r2, #0
   258e2:	701a      	strb	r2, [r3, #0]
   258e4:	e003      	b.n	258ee <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   258e6:	2317      	movs	r3, #23
   258e8:	18fb      	adds	r3, r7, r3
   258ea:	22fa      	movs	r2, #250	; 0xfa
   258ec:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   258ee:	2317      	movs	r3, #23
   258f0:	18fb      	adds	r3, r7, r3
   258f2:	781b      	ldrb	r3, [r3, #0]
   258f4:	b25b      	sxtb	r3, r3
}
   258f6:	0018      	movs	r0, r3
   258f8:	46bd      	mov	sp, r7
   258fa:	b007      	add	sp, #28
   258fc:	bd90      	pop	{r4, r7, pc}
   258fe:	46c0      	nop			; (mov r8, r8)
   25900:	00025179 	.word	0x00025179

00025904 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25904:	b590      	push	{r4, r7, lr}
   25906:	b089      	sub	sp, #36	; 0x24
   25908:	af00      	add	r7, sp, #0
   2590a:	60b9      	str	r1, [r7, #8]
   2590c:	0011      	movs	r1, r2
   2590e:	607b      	str	r3, [r7, #4]
   25910:	230f      	movs	r3, #15
   25912:	18fb      	adds	r3, r7, r3
   25914:	1c02      	adds	r2, r0, #0
   25916:	701a      	strb	r2, [r3, #0]
   25918:	230e      	movs	r3, #14
   2591a:	18fb      	adds	r3, r7, r3
   2591c:	1c0a      	adds	r2, r1, #0
   2591e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25920:	2330      	movs	r3, #48	; 0x30
   25922:	18fb      	adds	r3, r7, r3
   25924:	881b      	ldrh	r3, [r3, #0]
   25926:	2b00      	cmp	r3, #0
   25928:	d100      	bne.n	2592c <Socket_ReadSocketData+0x28>
   2592a:	e0d7      	b.n	25adc <Socket_ReadSocketData+0x1d8>
   2592c:	230f      	movs	r3, #15
   2592e:	18fb      	adds	r3, r7, r3
   25930:	2200      	movs	r2, #0
   25932:	569a      	ldrsb	r2, [r3, r2]
   25934:	4b6b      	ldr	r3, [pc, #428]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   25936:	0112      	lsls	r2, r2, #4
   25938:	58d3      	ldr	r3, [r2, r3]
   2593a:	2b00      	cmp	r3, #0
   2593c:	d100      	bne.n	25940 <Socket_ReadSocketData+0x3c>
   2593e:	e0cd      	b.n	25adc <Socket_ReadSocketData+0x1d8>
   25940:	230f      	movs	r3, #15
   25942:	18fb      	adds	r3, r7, r3
   25944:	781b      	ldrb	r3, [r3, #0]
   25946:	b25b      	sxtb	r3, r3
   25948:	4a66      	ldr	r2, [pc, #408]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   2594a:	011b      	lsls	r3, r3, #4
   2594c:	18d3      	adds	r3, r2, r3
   2594e:	3304      	adds	r3, #4
   25950:	881b      	ldrh	r3, [r3, #0]
   25952:	b29b      	uxth	r3, r3
   25954:	2b00      	cmp	r3, #0
   25956:	d100      	bne.n	2595a <Socket_ReadSocketData+0x56>
   25958:	e0c0      	b.n	25adc <Socket_ReadSocketData+0x1d8>
   2595a:	230f      	movs	r3, #15
   2595c:	18fb      	adds	r3, r7, r3
   2595e:	781b      	ldrb	r3, [r3, #0]
   25960:	b25b      	sxtb	r3, r3
   25962:	4a60      	ldr	r2, [pc, #384]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   25964:	011b      	lsls	r3, r3, #4
   25966:	18d3      	adds	r3, r2, r3
   25968:	330a      	adds	r3, #10
   2596a:	781b      	ldrb	r3, [r3, #0]
   2596c:	b2db      	uxtb	r3, r3
   2596e:	2b01      	cmp	r3, #1
   25970:	d000      	beq.n	25974 <Socket_ReadSocketData+0x70>
   25972:	e0b3      	b.n	25adc <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25974:	687b      	ldr	r3, [r7, #4]
   25976:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25978:	68bb      	ldr	r3, [r7, #8]
   2597a:	2230      	movs	r2, #48	; 0x30
   2597c:	18ba      	adds	r2, r7, r2
   2597e:	8812      	ldrh	r2, [r2, #0]
   25980:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25982:	2319      	movs	r3, #25
   25984:	18fb      	adds	r3, r7, r3
   25986:	2201      	movs	r2, #1
   25988:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2598a:	231a      	movs	r3, #26
   2598c:	18fb      	adds	r3, r7, r3
   2598e:	2230      	movs	r2, #48	; 0x30
   25990:	18ba      	adds	r2, r7, r2
   25992:	8812      	ldrh	r2, [r2, #0]
   25994:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25996:	230f      	movs	r3, #15
   25998:	18fb      	adds	r3, r7, r3
   2599a:	781b      	ldrb	r3, [r3, #0]
   2599c:	b25b      	sxtb	r3, r3
   2599e:	4a51      	ldr	r2, [pc, #324]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   259a0:	011b      	lsls	r3, r3, #4
   259a2:	18d3      	adds	r3, r2, r3
   259a4:	3304      	adds	r3, #4
   259a6:	881b      	ldrh	r3, [r3, #0]
   259a8:	b29b      	uxth	r3, r3
   259aa:	221a      	movs	r2, #26
   259ac:	18ba      	adds	r2, r7, r2
   259ae:	8812      	ldrh	r2, [r2, #0]
   259b0:	1ad3      	subs	r3, r2, r3
   259b2:	b29a      	uxth	r2, r3
   259b4:	2316      	movs	r3, #22
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   259ba:	2316      	movs	r3, #22
   259bc:	18fb      	adds	r3, r7, r3
   259be:	2200      	movs	r2, #0
   259c0:	5e9b      	ldrsh	r3, [r3, r2]
   259c2:	2b00      	cmp	r3, #0
   259c4:	dd0f      	ble.n	259e6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   259c6:	2319      	movs	r3, #25
   259c8:	18fb      	adds	r3, r7, r3
   259ca:	2200      	movs	r2, #0
   259cc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   259ce:	230f      	movs	r3, #15
   259d0:	18fb      	adds	r3, r7, r3
   259d2:	2200      	movs	r2, #0
   259d4:	569a      	ldrsb	r2, [r3, r2]
   259d6:	231a      	movs	r3, #26
   259d8:	18fb      	adds	r3, r7, r3
   259da:	4942      	ldr	r1, [pc, #264]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   259dc:	0112      	lsls	r2, r2, #4
   259de:	188a      	adds	r2, r1, r2
   259e0:	3204      	adds	r2, #4
   259e2:	8812      	ldrh	r2, [r2, #0]
   259e4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   259e6:	230f      	movs	r3, #15
   259e8:	18fb      	adds	r3, r7, r3
   259ea:	2200      	movs	r2, #0
   259ec:	569a      	ldrsb	r2, [r3, r2]
   259ee:	4b3d      	ldr	r3, [pc, #244]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   259f0:	0112      	lsls	r2, r2, #4
   259f2:	58d1      	ldr	r1, [r2, r3]
   259f4:	2319      	movs	r3, #25
   259f6:	18fb      	adds	r3, r7, r3
   259f8:	781c      	ldrb	r4, [r3, #0]
   259fa:	231a      	movs	r3, #26
   259fc:	18fb      	adds	r3, r7, r3
   259fe:	881a      	ldrh	r2, [r3, #0]
   25a00:	69f8      	ldr	r0, [r7, #28]
   25a02:	0023      	movs	r3, r4
   25a04:	4c38      	ldr	r4, [pc, #224]	; (25ae8 <Socket_ReadSocketData+0x1e4>)
   25a06:	47a0      	blx	r4
   25a08:	1e03      	subs	r3, r0, #0
   25a0a:	d14f      	bne.n	25aac <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25a0c:	230f      	movs	r3, #15
   25a0e:	18fb      	adds	r3, r7, r3
   25a10:	2200      	movs	r2, #0
   25a12:	569a      	ldrsb	r2, [r3, r2]
   25a14:	4b33      	ldr	r3, [pc, #204]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   25a16:	0112      	lsls	r2, r2, #4
   25a18:	58d2      	ldr	r2, [r2, r3]
   25a1a:	68bb      	ldr	r3, [r7, #8]
   25a1c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25a1e:	231a      	movs	r3, #26
   25a20:	18fb      	adds	r3, r7, r3
   25a22:	2200      	movs	r2, #0
   25a24:	5e9a      	ldrsh	r2, [r3, r2]
   25a26:	68bb      	ldr	r3, [r7, #8]
   25a28:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25a2a:	68bb      	ldr	r3, [r7, #8]
   25a2c:	88da      	ldrh	r2, [r3, #6]
   25a2e:	231a      	movs	r3, #26
   25a30:	18fb      	adds	r3, r7, r3
   25a32:	881b      	ldrh	r3, [r3, #0]
   25a34:	1ad3      	subs	r3, r2, r3
   25a36:	b29a      	uxth	r2, r3
   25a38:	68bb      	ldr	r3, [r7, #8]
   25a3a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25a3c:	4b2b      	ldr	r3, [pc, #172]	; (25aec <Socket_ReadSocketData+0x1e8>)
   25a3e:	681b      	ldr	r3, [r3, #0]
   25a40:	2b00      	cmp	r3, #0
   25a42:	d00b      	beq.n	25a5c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25a44:	4b29      	ldr	r3, [pc, #164]	; (25aec <Socket_ReadSocketData+0x1e8>)
   25a46:	681b      	ldr	r3, [r3, #0]
   25a48:	68bc      	ldr	r4, [r7, #8]
   25a4a:	220e      	movs	r2, #14
   25a4c:	18ba      	adds	r2, r7, r2
   25a4e:	7811      	ldrb	r1, [r2, #0]
   25a50:	220f      	movs	r2, #15
   25a52:	18ba      	adds	r2, r7, r2
   25a54:	2000      	movs	r0, #0
   25a56:	5610      	ldrsb	r0, [r2, r0]
   25a58:	0022      	movs	r2, r4
   25a5a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25a5c:	2330      	movs	r3, #48	; 0x30
   25a5e:	18f9      	adds	r1, r7, r3
   25a60:	2330      	movs	r3, #48	; 0x30
   25a62:	18fa      	adds	r2, r7, r3
   25a64:	231a      	movs	r3, #26
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	8812      	ldrh	r2, [r2, #0]
   25a6a:	881b      	ldrh	r3, [r3, #0]
   25a6c:	1ad3      	subs	r3, r2, r3
   25a6e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25a70:	231a      	movs	r3, #26
   25a72:	18fb      	adds	r3, r7, r3
   25a74:	881b      	ldrh	r3, [r3, #0]
   25a76:	69fa      	ldr	r2, [r7, #28]
   25a78:	18d3      	adds	r3, r2, r3
   25a7a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25a7c:	230f      	movs	r3, #15
   25a7e:	18fb      	adds	r3, r7, r3
   25a80:	781b      	ldrb	r3, [r3, #0]
   25a82:	b25b      	sxtb	r3, r3
   25a84:	4a17      	ldr	r2, [pc, #92]	; (25ae4 <Socket_ReadSocketData+0x1e0>)
   25a86:	011b      	lsls	r3, r3, #4
   25a88:	18d3      	adds	r3, r2, r3
   25a8a:	330a      	adds	r3, #10
   25a8c:	781b      	ldrb	r3, [r3, #0]
   25a8e:	b2db      	uxtb	r3, r3
   25a90:	2b00      	cmp	r3, #0
   25a92:	d11c      	bne.n	25ace <Socket_ReadSocketData+0x1ca>
   25a94:	2330      	movs	r3, #48	; 0x30
   25a96:	18fb      	adds	r3, r7, r3
   25a98:	881b      	ldrh	r3, [r3, #0]
   25a9a:	2b00      	cmp	r3, #0
   25a9c:	d017      	beq.n	25ace <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25a9e:	2301      	movs	r3, #1
   25aa0:	2200      	movs	r2, #0
   25aa2:	2100      	movs	r1, #0
   25aa4:	2000      	movs	r0, #0
   25aa6:	4c10      	ldr	r4, [pc, #64]	; (25ae8 <Socket_ReadSocketData+0x1e4>)
   25aa8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25aaa:	e017      	b.n	25adc <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25aac:	4b10      	ldr	r3, [pc, #64]	; (25af0 <Socket_ReadSocketData+0x1ec>)
   25aae:	0018      	movs	r0, r3
   25ab0:	4b10      	ldr	r3, [pc, #64]	; (25af4 <Socket_ReadSocketData+0x1f0>)
   25ab2:	4798      	blx	r3
   25ab4:	2330      	movs	r3, #48	; 0x30
   25ab6:	18fb      	adds	r3, r7, r3
   25ab8:	881a      	ldrh	r2, [r3, #0]
   25aba:	4b0f      	ldr	r3, [pc, #60]	; (25af8 <Socket_ReadSocketData+0x1f4>)
   25abc:	0011      	movs	r1, r2
   25abe:	0018      	movs	r0, r3
   25ac0:	4b0c      	ldr	r3, [pc, #48]	; (25af4 <Socket_ReadSocketData+0x1f0>)
   25ac2:	4798      	blx	r3
   25ac4:	4b0d      	ldr	r3, [pc, #52]	; (25afc <Socket_ReadSocketData+0x1f8>)
   25ac6:	0018      	movs	r0, r3
   25ac8:	4b0a      	ldr	r3, [pc, #40]	; (25af4 <Socket_ReadSocketData+0x1f0>)
   25aca:	4798      	blx	r3
				break;
   25acc:	e006      	b.n	25adc <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25ace:	2330      	movs	r3, #48	; 0x30
   25ad0:	18fb      	adds	r3, r7, r3
   25ad2:	881b      	ldrh	r3, [r3, #0]
   25ad4:	2b00      	cmp	r3, #0
   25ad6:	d000      	beq.n	25ada <Socket_ReadSocketData+0x1d6>
   25ad8:	e753      	b.n	25982 <Socket_ReadSocketData+0x7e>
	}
}
   25ada:	e7ff      	b.n	25adc <Socket_ReadSocketData+0x1d8>
   25adc:	46c0      	nop			; (mov r8, r8)
   25ade:	46bd      	mov	sp, r7
   25ae0:	b009      	add	sp, #36	; 0x24
   25ae2:	bd90      	pop	{r4, r7, pc}
   25ae4:	20005b5c 	.word	0x20005b5c
   25ae8:	000222fd 	.word	0x000222fd
   25aec:	20005c0c 	.word	0x20005c0c
   25af0:	0003ae40 	.word	0x0003ae40
   25af4:	0001e9e9 	.word	0x0001e9e9
   25af8:	0003ae4c 	.word	0x0003ae4c
   25afc:	0003ae60 	.word	0x0003ae60

00025b00 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25b00:	b590      	push	{r4, r7, lr}
   25b02:	b0bb      	sub	sp, #236	; 0xec
   25b04:	af02      	add	r7, sp, #8
   25b06:	603a      	str	r2, [r7, #0]
   25b08:	1dfb      	adds	r3, r7, #7
   25b0a:	1c02      	adds	r2, r0, #0
   25b0c:	701a      	strb	r2, [r3, #0]
   25b0e:	1d3b      	adds	r3, r7, #4
   25b10:	1c0a      	adds	r2, r1, #0
   25b12:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25b14:	1dfb      	adds	r3, r7, #7
   25b16:	781b      	ldrb	r3, [r3, #0]
   25b18:	2b41      	cmp	r3, #65	; 0x41
   25b1a:	d003      	beq.n	25b24 <m2m_ip_cb+0x24>
   25b1c:	1dfb      	adds	r3, r7, #7
   25b1e:	781b      	ldrb	r3, [r3, #0]
   25b20:	2b54      	cmp	r3, #84	; 0x54
   25b22:	d120      	bne.n	25b66 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25b24:	23cc      	movs	r3, #204	; 0xcc
   25b26:	18f9      	adds	r1, r7, r3
   25b28:	6838      	ldr	r0, [r7, #0]
   25b2a:	2300      	movs	r3, #0
   25b2c:	2204      	movs	r2, #4
   25b2e:	4c98      	ldr	r4, [pc, #608]	; (25d90 <m2m_ip_cb+0x290>)
   25b30:	47a0      	blx	r4
   25b32:	1e03      	subs	r3, r0, #0
   25b34:	d000      	beq.n	25b38 <m2m_ip_cb+0x38>
   25b36:	e275      	b.n	26024 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25b38:	23cc      	movs	r3, #204	; 0xcc
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	2201      	movs	r2, #1
   25b3e:	569a      	ldrsb	r2, [r3, r2]
   25b40:	23c8      	movs	r3, #200	; 0xc8
   25b42:	18fb      	adds	r3, r7, r3
   25b44:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25b46:	4b93      	ldr	r3, [pc, #588]	; (25d94 <m2m_ip_cb+0x294>)
   25b48:	681b      	ldr	r3, [r3, #0]
   25b4a:	2b00      	cmp	r3, #0
   25b4c:	d100      	bne.n	25b50 <m2m_ip_cb+0x50>
   25b4e:	e269      	b.n	26024 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25b50:	4b90      	ldr	r3, [pc, #576]	; (25d94 <m2m_ip_cb+0x294>)
   25b52:	681b      	ldr	r3, [r3, #0]
   25b54:	22cc      	movs	r2, #204	; 0xcc
   25b56:	18ba      	adds	r2, r7, r2
   25b58:	2000      	movs	r0, #0
   25b5a:	5610      	ldrsb	r0, [r2, r0]
   25b5c:	22c8      	movs	r2, #200	; 0xc8
   25b5e:	18ba      	adds	r2, r7, r2
   25b60:	2101      	movs	r1, #1
   25b62:	4798      	blx	r3
	{
   25b64:	e25e      	b.n	26024 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25b66:	1dfb      	adds	r3, r7, #7
   25b68:	781b      	ldrb	r3, [r3, #0]
   25b6a:	2b42      	cmp	r3, #66	; 0x42
   25b6c:	d120      	bne.n	25bb0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25b6e:	23c4      	movs	r3, #196	; 0xc4
   25b70:	18f9      	adds	r1, r7, r3
   25b72:	6838      	ldr	r0, [r7, #0]
   25b74:	2300      	movs	r3, #0
   25b76:	2204      	movs	r2, #4
   25b78:	4c85      	ldr	r4, [pc, #532]	; (25d90 <m2m_ip_cb+0x290>)
   25b7a:	47a0      	blx	r4
   25b7c:	1e03      	subs	r3, r0, #0
   25b7e:	d000      	beq.n	25b82 <m2m_ip_cb+0x82>
   25b80:	e257      	b.n	26032 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25b82:	23c4      	movs	r3, #196	; 0xc4
   25b84:	18fb      	adds	r3, r7, r3
   25b86:	2201      	movs	r2, #1
   25b88:	569a      	ldrsb	r2, [r3, r2]
   25b8a:	23c0      	movs	r3, #192	; 0xc0
   25b8c:	18fb      	adds	r3, r7, r3
   25b8e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25b90:	4b80      	ldr	r3, [pc, #512]	; (25d94 <m2m_ip_cb+0x294>)
   25b92:	681b      	ldr	r3, [r3, #0]
   25b94:	2b00      	cmp	r3, #0
   25b96:	d100      	bne.n	25b9a <m2m_ip_cb+0x9a>
   25b98:	e24b      	b.n	26032 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25b9a:	4b7e      	ldr	r3, [pc, #504]	; (25d94 <m2m_ip_cb+0x294>)
   25b9c:	681b      	ldr	r3, [r3, #0]
   25b9e:	22c4      	movs	r2, #196	; 0xc4
   25ba0:	18ba      	adds	r2, r7, r2
   25ba2:	2000      	movs	r0, #0
   25ba4:	5610      	ldrsb	r0, [r2, r0]
   25ba6:	22c0      	movs	r2, #192	; 0xc0
   25ba8:	18ba      	adds	r2, r7, r2
   25baa:	2102      	movs	r1, #2
   25bac:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25bae:	e240      	b.n	26032 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25bb0:	1dfb      	adds	r3, r7, #7
   25bb2:	781b      	ldrb	r3, [r3, #0]
   25bb4:	2b43      	cmp	r3, #67	; 0x43
   25bb6:	d000      	beq.n	25bba <m2m_ip_cb+0xba>
   25bb8:	e086      	b.n	25cc8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25bba:	23b4      	movs	r3, #180	; 0xb4
   25bbc:	18f9      	adds	r1, r7, r3
   25bbe:	6838      	ldr	r0, [r7, #0]
   25bc0:	2300      	movs	r3, #0
   25bc2:	220c      	movs	r2, #12
   25bc4:	4c72      	ldr	r4, [pc, #456]	; (25d90 <m2m_ip_cb+0x290>)
   25bc6:	47a0      	blx	r4
   25bc8:	1e03      	subs	r3, r0, #0
   25bca:	d000      	beq.n	25bce <m2m_ip_cb+0xce>
   25bcc:	e231      	b.n	26032 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25bce:	23b4      	movs	r3, #180	; 0xb4
   25bd0:	18fb      	adds	r3, r7, r3
   25bd2:	7a5b      	ldrb	r3, [r3, #9]
   25bd4:	b25b      	sxtb	r3, r3
   25bd6:	2b00      	cmp	r3, #0
   25bd8:	db4f      	blt.n	25c7a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25bda:	23b4      	movs	r3, #180	; 0xb4
   25bdc:	18fb      	adds	r3, r7, r3
   25bde:	7a5b      	ldrb	r3, [r3, #9]
   25be0:	b25b      	sxtb	r3, r3
   25be2:	0018      	movs	r0, r3
   25be4:	23b4      	movs	r3, #180	; 0xb4
   25be6:	18fb      	adds	r3, r7, r3
   25be8:	7a1b      	ldrb	r3, [r3, #8]
   25bea:	b25b      	sxtb	r3, r3
   25bec:	4a6a      	ldr	r2, [pc, #424]	; (25d98 <m2m_ip_cb+0x298>)
   25bee:	011b      	lsls	r3, r3, #4
   25bf0:	18d3      	adds	r3, r2, r3
   25bf2:	330b      	adds	r3, #11
   25bf4:	781b      	ldrb	r3, [r3, #0]
   25bf6:	b2d9      	uxtb	r1, r3
   25bf8:	4a67      	ldr	r2, [pc, #412]	; (25d98 <m2m_ip_cb+0x298>)
   25bfa:	0103      	lsls	r3, r0, #4
   25bfc:	18d3      	adds	r3, r2, r3
   25bfe:	330b      	adds	r3, #11
   25c00:	1c0a      	adds	r2, r1, #0
   25c02:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25c04:	23b4      	movs	r3, #180	; 0xb4
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	7a5b      	ldrb	r3, [r3, #9]
   25c0a:	b25b      	sxtb	r3, r3
   25c0c:	4a62      	ldr	r2, [pc, #392]	; (25d98 <m2m_ip_cb+0x298>)
   25c0e:	011b      	lsls	r3, r3, #4
   25c10:	18d3      	adds	r3, r2, r3
   25c12:	330a      	adds	r3, #10
   25c14:	2201      	movs	r2, #1
   25c16:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25c18:	23b4      	movs	r3, #180	; 0xb4
   25c1a:	18fb      	adds	r3, r7, r3
   25c1c:	7a5b      	ldrb	r3, [r3, #9]
   25c1e:	b25b      	sxtb	r3, r3
   25c20:	0018      	movs	r0, r3
   25c22:	23b4      	movs	r3, #180	; 0xb4
   25c24:	18fb      	adds	r3, r7, r3
   25c26:	895b      	ldrh	r3, [r3, #10]
   25c28:	3b08      	subs	r3, #8
   25c2a:	b299      	uxth	r1, r3
   25c2c:	4a5a      	ldr	r2, [pc, #360]	; (25d98 <m2m_ip_cb+0x298>)
   25c2e:	0103      	lsls	r3, r0, #4
   25c30:	18d3      	adds	r3, r2, r3
   25c32:	3308      	adds	r3, #8
   25c34:	1c0a      	adds	r2, r1, #0
   25c36:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25c38:	4b58      	ldr	r3, [pc, #352]	; (25d9c <m2m_ip_cb+0x29c>)
   25c3a:	881b      	ldrh	r3, [r3, #0]
   25c3c:	b29b      	uxth	r3, r3
   25c3e:	3301      	adds	r3, #1
   25c40:	b29a      	uxth	r2, r3
   25c42:	4b56      	ldr	r3, [pc, #344]	; (25d9c <m2m_ip_cb+0x29c>)
   25c44:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25c46:	4b55      	ldr	r3, [pc, #340]	; (25d9c <m2m_ip_cb+0x29c>)
   25c48:	881b      	ldrh	r3, [r3, #0]
   25c4a:	b29b      	uxth	r3, r3
   25c4c:	2b00      	cmp	r3, #0
   25c4e:	d106      	bne.n	25c5e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25c50:	4b52      	ldr	r3, [pc, #328]	; (25d9c <m2m_ip_cb+0x29c>)
   25c52:	881b      	ldrh	r3, [r3, #0]
   25c54:	b29b      	uxth	r3, r3
   25c56:	3301      	adds	r3, #1
   25c58:	b29a      	uxth	r2, r3
   25c5a:	4b50      	ldr	r3, [pc, #320]	; (25d9c <m2m_ip_cb+0x29c>)
   25c5c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25c5e:	23b4      	movs	r3, #180	; 0xb4
   25c60:	18fb      	adds	r3, r7, r3
   25c62:	7a5b      	ldrb	r3, [r3, #9]
   25c64:	b25b      	sxtb	r3, r3
   25c66:	0018      	movs	r0, r3
   25c68:	4b4c      	ldr	r3, [pc, #304]	; (25d9c <m2m_ip_cb+0x29c>)
   25c6a:	881b      	ldrh	r3, [r3, #0]
   25c6c:	b299      	uxth	r1, r3
   25c6e:	4a4a      	ldr	r2, [pc, #296]	; (25d98 <m2m_ip_cb+0x298>)
   25c70:	0103      	lsls	r3, r0, #4
   25c72:	18d3      	adds	r3, r2, r3
   25c74:	3306      	adds	r3, #6
   25c76:	1c0a      	adds	r2, r1, #0
   25c78:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25c7a:	23b4      	movs	r3, #180	; 0xb4
   25c7c:	18fb      	adds	r3, r7, r3
   25c7e:	2209      	movs	r2, #9
   25c80:	569a      	ldrsb	r2, [r3, r2]
   25c82:	23a0      	movs	r3, #160	; 0xa0
   25c84:	18fb      	adds	r3, r7, r3
   25c86:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25c88:	23a0      	movs	r3, #160	; 0xa0
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	2202      	movs	r2, #2
   25c8e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25c90:	23b4      	movs	r3, #180	; 0xb4
   25c92:	18fb      	adds	r3, r7, r3
   25c94:	885a      	ldrh	r2, [r3, #2]
   25c96:	23a0      	movs	r3, #160	; 0xa0
   25c98:	18fb      	adds	r3, r7, r3
   25c9a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25c9c:	23b4      	movs	r3, #180	; 0xb4
   25c9e:	18fb      	adds	r3, r7, r3
   25ca0:	685a      	ldr	r2, [r3, #4]
   25ca2:	23a0      	movs	r3, #160	; 0xa0
   25ca4:	18fb      	adds	r3, r7, r3
   25ca6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25ca8:	4b3a      	ldr	r3, [pc, #232]	; (25d94 <m2m_ip_cb+0x294>)
   25caa:	681b      	ldr	r3, [r3, #0]
   25cac:	2b00      	cmp	r3, #0
   25cae:	d100      	bne.n	25cb2 <m2m_ip_cb+0x1b2>
   25cb0:	e1bf      	b.n	26032 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25cb2:	4b38      	ldr	r3, [pc, #224]	; (25d94 <m2m_ip_cb+0x294>)
   25cb4:	681b      	ldr	r3, [r3, #0]
   25cb6:	22b4      	movs	r2, #180	; 0xb4
   25cb8:	18ba      	adds	r2, r7, r2
   25cba:	2008      	movs	r0, #8
   25cbc:	5610      	ldrsb	r0, [r2, r0]
   25cbe:	22a0      	movs	r2, #160	; 0xa0
   25cc0:	18ba      	adds	r2, r7, r2
   25cc2:	2104      	movs	r1, #4
   25cc4:	4798      	blx	r3
}
   25cc6:	e1b4      	b.n	26032 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25cc8:	1dfb      	adds	r3, r7, #7
   25cca:	781b      	ldrb	r3, [r3, #0]
   25ccc:	2b44      	cmp	r3, #68	; 0x44
   25cce:	d003      	beq.n	25cd8 <m2m_ip_cb+0x1d8>
   25cd0:	1dfb      	adds	r3, r7, #7
   25cd2:	781b      	ldrb	r3, [r3, #0]
   25cd4:	2b4b      	cmp	r3, #75	; 0x4b
   25cd6:	d13d      	bne.n	25d54 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25cd8:	239c      	movs	r3, #156	; 0x9c
   25cda:	18f9      	adds	r1, r7, r3
   25cdc:	6838      	ldr	r0, [r7, #0]
   25cde:	2300      	movs	r3, #0
   25ce0:	2204      	movs	r2, #4
   25ce2:	4c2b      	ldr	r4, [pc, #172]	; (25d90 <m2m_ip_cb+0x290>)
   25ce4:	47a0      	blx	r4
   25ce6:	1e03      	subs	r3, r0, #0
   25ce8:	d000      	beq.n	25cec <m2m_ip_cb+0x1ec>
   25cea:	e19d      	b.n	26028 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25cec:	239c      	movs	r3, #156	; 0x9c
   25cee:	18fb      	adds	r3, r7, r3
   25cf0:	2200      	movs	r2, #0
   25cf2:	569a      	ldrsb	r2, [r3, r2]
   25cf4:	2398      	movs	r3, #152	; 0x98
   25cf6:	18fb      	adds	r3, r7, r3
   25cf8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25cfa:	239c      	movs	r3, #156	; 0x9c
   25cfc:	18fb      	adds	r3, r7, r3
   25cfe:	2201      	movs	r2, #1
   25d00:	569a      	ldrsb	r2, [r3, r2]
   25d02:	2398      	movs	r3, #152	; 0x98
   25d04:	18fb      	adds	r3, r7, r3
   25d06:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25d08:	239c      	movs	r3, #156	; 0x9c
   25d0a:	18fb      	adds	r3, r7, r3
   25d0c:	785b      	ldrb	r3, [r3, #1]
   25d0e:	b25b      	sxtb	r3, r3
   25d10:	2b00      	cmp	r3, #0
   25d12:	d10f      	bne.n	25d34 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25d14:	239c      	movs	r3, #156	; 0x9c
   25d16:	18fb      	adds	r3, r7, r3
   25d18:	781b      	ldrb	r3, [r3, #0]
   25d1a:	b25b      	sxtb	r3, r3
   25d1c:	0018      	movs	r0, r3
   25d1e:	239c      	movs	r3, #156	; 0x9c
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	885b      	ldrh	r3, [r3, #2]
   25d24:	3b08      	subs	r3, #8
   25d26:	b299      	uxth	r1, r3
   25d28:	4a1b      	ldr	r2, [pc, #108]	; (25d98 <m2m_ip_cb+0x298>)
   25d2a:	0103      	lsls	r3, r0, #4
   25d2c:	18d3      	adds	r3, r2, r3
   25d2e:	3308      	adds	r3, #8
   25d30:	1c0a      	adds	r2, r1, #0
   25d32:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25d34:	4b17      	ldr	r3, [pc, #92]	; (25d94 <m2m_ip_cb+0x294>)
   25d36:	681b      	ldr	r3, [r3, #0]
   25d38:	2b00      	cmp	r3, #0
   25d3a:	d100      	bne.n	25d3e <m2m_ip_cb+0x23e>
   25d3c:	e174      	b.n	26028 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25d3e:	4b15      	ldr	r3, [pc, #84]	; (25d94 <m2m_ip_cb+0x294>)
   25d40:	681b      	ldr	r3, [r3, #0]
   25d42:	229c      	movs	r2, #156	; 0x9c
   25d44:	18ba      	adds	r2, r7, r2
   25d46:	2000      	movs	r0, #0
   25d48:	5610      	ldrsb	r0, [r2, r0]
   25d4a:	2298      	movs	r2, #152	; 0x98
   25d4c:	18ba      	adds	r2, r7, r2
   25d4e:	2105      	movs	r1, #5
   25d50:	4798      	blx	r3
	{
   25d52:	e169      	b.n	26028 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25d54:	1dfb      	adds	r3, r7, #7
   25d56:	781b      	ldrb	r3, [r3, #0]
   25d58:	2b4a      	cmp	r3, #74	; 0x4a
   25d5a:	d123      	bne.n	25da4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25d5c:	230c      	movs	r3, #12
   25d5e:	18f9      	adds	r1, r7, r3
   25d60:	6838      	ldr	r0, [r7, #0]
   25d62:	2300      	movs	r3, #0
   25d64:	2244      	movs	r2, #68	; 0x44
   25d66:	4c0a      	ldr	r4, [pc, #40]	; (25d90 <m2m_ip_cb+0x290>)
   25d68:	47a0      	blx	r4
   25d6a:	1e03      	subs	r3, r0, #0
   25d6c:	d000      	beq.n	25d70 <m2m_ip_cb+0x270>
   25d6e:	e160      	b.n	26032 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25d70:	4b0b      	ldr	r3, [pc, #44]	; (25da0 <m2m_ip_cb+0x2a0>)
   25d72:	681b      	ldr	r3, [r3, #0]
   25d74:	2b00      	cmp	r3, #0
   25d76:	d100      	bne.n	25d7a <m2m_ip_cb+0x27a>
   25d78:	e15b      	b.n	26032 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25d7a:	4b09      	ldr	r3, [pc, #36]	; (25da0 <m2m_ip_cb+0x2a0>)
   25d7c:	681a      	ldr	r2, [r3, #0]
   25d7e:	230c      	movs	r3, #12
   25d80:	18fb      	adds	r3, r7, r3
   25d82:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25d84:	230c      	movs	r3, #12
   25d86:	18fb      	adds	r3, r7, r3
   25d88:	0018      	movs	r0, r3
   25d8a:	4790      	blx	r2
}
   25d8c:	e151      	b.n	26032 <m2m_ip_cb+0x532>
   25d8e:	46c0      	nop			; (mov r8, r8)
   25d90:	000222fd 	.word	0x000222fd
   25d94:	20005c0c 	.word	0x20005c0c
   25d98:	20005b5c 	.word	0x20005b5c
   25d9c:	200042aa 	.word	0x200042aa
   25da0:	20005c14 	.word	0x20005c14
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25da4:	1dfb      	adds	r3, r7, #7
   25da6:	781b      	ldrb	r3, [r3, #0]
   25da8:	2b46      	cmp	r3, #70	; 0x46
   25daa:	d008      	beq.n	25dbe <m2m_ip_cb+0x2be>
   25dac:	1dfb      	adds	r3, r7, #7
   25dae:	781b      	ldrb	r3, [r3, #0]
   25db0:	2b48      	cmp	r3, #72	; 0x48
   25db2:	d004      	beq.n	25dbe <m2m_ip_cb+0x2be>
   25db4:	1dfb      	adds	r3, r7, #7
   25db6:	781b      	ldrb	r3, [r3, #0]
   25db8:	2b4d      	cmp	r3, #77	; 0x4d
   25dba:	d000      	beq.n	25dbe <m2m_ip_cb+0x2be>
   25dbc:	e0b4      	b.n	25f28 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25dbe:	23df      	movs	r3, #223	; 0xdf
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	2206      	movs	r2, #6
   25dc4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25dc6:	1dfb      	adds	r3, r7, #7
   25dc8:	781b      	ldrb	r3, [r3, #0]
   25dca:	2b48      	cmp	r3, #72	; 0x48
   25dcc:	d103      	bne.n	25dd6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25dce:	23df      	movs	r3, #223	; 0xdf
   25dd0:	18fb      	adds	r3, r7, r3
   25dd2:	2209      	movs	r2, #9
   25dd4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25dd6:	23d8      	movs	r3, #216	; 0xd8
   25dd8:	18fb      	adds	r3, r7, r3
   25dda:	2210      	movs	r2, #16
   25ddc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25dde:	23d8      	movs	r3, #216	; 0xd8
   25de0:	18fb      	adds	r3, r7, r3
   25de2:	881a      	ldrh	r2, [r3, #0]
   25de4:	2388      	movs	r3, #136	; 0x88
   25de6:	18f9      	adds	r1, r7, r3
   25de8:	6838      	ldr	r0, [r7, #0]
   25dea:	2300      	movs	r3, #0
   25dec:	4c93      	ldr	r4, [pc, #588]	; (2603c <m2m_ip_cb+0x53c>)
   25dee:	47a0      	blx	r4
   25df0:	1e03      	subs	r3, r0, #0
   25df2:	d000      	beq.n	25df6 <m2m_ip_cb+0x2f6>
   25df4:	e11a      	b.n	2602c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25df6:	23d6      	movs	r3, #214	; 0xd6
   25df8:	18fb      	adds	r3, r7, r3
   25dfa:	2200      	movs	r2, #0
   25dfc:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25dfe:	23d5      	movs	r3, #213	; 0xd5
   25e00:	18fb      	adds	r3, r7, r3
   25e02:	2288      	movs	r2, #136	; 0x88
   25e04:	18ba      	adds	r2, r7, r2
   25e06:	7b12      	ldrb	r2, [r2, #12]
   25e08:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25e0a:	23d6      	movs	r3, #214	; 0xd6
   25e0c:	18fb      	adds	r3, r7, r3
   25e0e:	2288      	movs	r2, #136	; 0x88
   25e10:	18ba      	adds	r2, r7, r2
   25e12:	89d2      	ldrh	r2, [r2, #14]
   25e14:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25e16:	23d5      	movs	r3, #213	; 0xd5
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	781b      	ldrb	r3, [r3, #0]
   25e1c:	b25b      	sxtb	r3, r3
   25e1e:	4a88      	ldr	r2, [pc, #544]	; (26040 <m2m_ip_cb+0x540>)
   25e20:	011b      	lsls	r3, r3, #4
   25e22:	18d3      	adds	r3, r2, r3
   25e24:	330c      	adds	r3, #12
   25e26:	2200      	movs	r2, #0
   25e28:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25e2a:	23d2      	movs	r3, #210	; 0xd2
   25e2c:	18fb      	adds	r3, r7, r3
   25e2e:	2288      	movs	r2, #136	; 0x88
   25e30:	18ba      	adds	r2, r7, r2
   25e32:	8912      	ldrh	r2, [r2, #8]
   25e34:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25e36:	23d0      	movs	r3, #208	; 0xd0
   25e38:	18fb      	adds	r3, r7, r3
   25e3a:	2288      	movs	r2, #136	; 0x88
   25e3c:	18ba      	adds	r2, r7, r2
   25e3e:	8952      	ldrh	r2, [r2, #10]
   25e40:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25e42:	2388      	movs	r3, #136	; 0x88
   25e44:	18fb      	adds	r3, r7, r3
   25e46:	885a      	ldrh	r2, [r3, #2]
   25e48:	2370      	movs	r3, #112	; 0x70
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25e4e:	2388      	movs	r3, #136	; 0x88
   25e50:	18fb      	adds	r3, r7, r3
   25e52:	685a      	ldr	r2, [r3, #4]
   25e54:	2370      	movs	r3, #112	; 0x70
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25e5a:	23d5      	movs	r3, #213	; 0xd5
   25e5c:	18fb      	adds	r3, r7, r3
   25e5e:	781b      	ldrb	r3, [r3, #0]
   25e60:	b25b      	sxtb	r3, r3
   25e62:	4a77      	ldr	r2, [pc, #476]	; (26040 <m2m_ip_cb+0x540>)
   25e64:	011b      	lsls	r3, r3, #4
   25e66:	18d3      	adds	r3, r2, r3
   25e68:	3306      	adds	r3, #6
   25e6a:	881b      	ldrh	r3, [r3, #0]
   25e6c:	b29b      	uxth	r3, r3
   25e6e:	22d6      	movs	r2, #214	; 0xd6
   25e70:	18ba      	adds	r2, r7, r2
   25e72:	8812      	ldrh	r2, [r2, #0]
   25e74:	429a      	cmp	r2, r3
   25e76:	d148      	bne.n	25f0a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25e78:	23d2      	movs	r3, #210	; 0xd2
   25e7a:	18fb      	adds	r3, r7, r3
   25e7c:	2200      	movs	r2, #0
   25e7e:	5e9b      	ldrsh	r3, [r3, r2]
   25e80:	2b00      	cmp	r3, #0
   25e82:	dd25      	ble.n	25ed0 <m2m_ip_cb+0x3d0>
   25e84:	23d2      	movs	r3, #210	; 0xd2
   25e86:	18fb      	adds	r3, r7, r3
   25e88:	2200      	movs	r2, #0
   25e8a:	5e9a      	ldrsh	r2, [r3, r2]
   25e8c:	1d3b      	adds	r3, r7, #4
   25e8e:	881b      	ldrh	r3, [r3, #0]
   25e90:	429a      	cmp	r2, r3
   25e92:	da1d      	bge.n	25ed0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25e94:	23d0      	movs	r3, #208	; 0xd0
   25e96:	18fb      	adds	r3, r7, r3
   25e98:	881b      	ldrh	r3, [r3, #0]
   25e9a:	683a      	ldr	r2, [r7, #0]
   25e9c:	18d3      	adds	r3, r2, r3
   25e9e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25ea0:	23d8      	movs	r3, #216	; 0xd8
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	22d2      	movs	r2, #210	; 0xd2
   25ea6:	18ba      	adds	r2, r7, r2
   25ea8:	8812      	ldrh	r2, [r2, #0]
   25eaa:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25eac:	683c      	ldr	r4, [r7, #0]
   25eae:	23df      	movs	r3, #223	; 0xdf
   25eb0:	18fb      	adds	r3, r7, r3
   25eb2:	781a      	ldrb	r2, [r3, #0]
   25eb4:	2370      	movs	r3, #112	; 0x70
   25eb6:	18f9      	adds	r1, r7, r3
   25eb8:	23d5      	movs	r3, #213	; 0xd5
   25eba:	18fb      	adds	r3, r7, r3
   25ebc:	2000      	movs	r0, #0
   25ebe:	5618      	ldrsb	r0, [r3, r0]
   25ec0:	23d8      	movs	r3, #216	; 0xd8
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	881b      	ldrh	r3, [r3, #0]
   25ec6:	9300      	str	r3, [sp, #0]
   25ec8:	0023      	movs	r3, r4
   25eca:	4c5e      	ldr	r4, [pc, #376]	; (26044 <m2m_ip_cb+0x544>)
   25ecc:	47a0      	blx	r4
	{
   25ece:	e0ad      	b.n	2602c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25ed0:	2370      	movs	r3, #112	; 0x70
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	22d2      	movs	r2, #210	; 0xd2
   25ed6:	18ba      	adds	r2, r7, r2
   25ed8:	8812      	ldrh	r2, [r2, #0]
   25eda:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25edc:	2370      	movs	r3, #112	; 0x70
   25ede:	18fb      	adds	r3, r7, r3
   25ee0:	2200      	movs	r2, #0
   25ee2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25ee4:	4b58      	ldr	r3, [pc, #352]	; (26048 <m2m_ip_cb+0x548>)
   25ee6:	681b      	ldr	r3, [r3, #0]
   25ee8:	2b00      	cmp	r3, #0
   25eea:	d100      	bne.n	25eee <m2m_ip_cb+0x3ee>
   25eec:	e09e      	b.n	2602c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25eee:	4b56      	ldr	r3, [pc, #344]	; (26048 <m2m_ip_cb+0x548>)
   25ef0:	681b      	ldr	r3, [r3, #0]
   25ef2:	2270      	movs	r2, #112	; 0x70
   25ef4:	18bc      	adds	r4, r7, r2
   25ef6:	22df      	movs	r2, #223	; 0xdf
   25ef8:	18ba      	adds	r2, r7, r2
   25efa:	7811      	ldrb	r1, [r2, #0]
   25efc:	22d5      	movs	r2, #213	; 0xd5
   25efe:	18ba      	adds	r2, r7, r2
   25f00:	2000      	movs	r0, #0
   25f02:	5610      	ldrsb	r0, [r2, r0]
   25f04:	0022      	movs	r2, r4
   25f06:	4798      	blx	r3
	{
   25f08:	e090      	b.n	2602c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25f0a:	23d8      	movs	r3, #216	; 0xd8
   25f0c:	18fa      	adds	r2, r7, r3
   25f0e:	1d3b      	adds	r3, r7, #4
   25f10:	8812      	ldrh	r2, [r2, #0]
   25f12:	881b      	ldrh	r3, [r3, #0]
   25f14:	429a      	cmp	r2, r3
   25f16:	d300      	bcc.n	25f1a <m2m_ip_cb+0x41a>
   25f18:	e088      	b.n	2602c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25f1a:	2301      	movs	r3, #1
   25f1c:	2200      	movs	r2, #0
   25f1e:	2100      	movs	r1, #0
   25f20:	2000      	movs	r0, #0
   25f22:	4c46      	ldr	r4, [pc, #280]	; (2603c <m2m_ip_cb+0x53c>)
   25f24:	47a0      	blx	r4
	{
   25f26:	e081      	b.n	2602c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25f28:	1dfb      	adds	r3, r7, #7
   25f2a:	781b      	ldrb	r3, [r3, #0]
   25f2c:	2b45      	cmp	r3, #69	; 0x45
   25f2e:	d007      	beq.n	25f40 <m2m_ip_cb+0x440>
   25f30:	1dfb      	adds	r3, r7, #7
   25f32:	781b      	ldrb	r3, [r3, #0]
   25f34:	2b47      	cmp	r3, #71	; 0x47
   25f36:	d003      	beq.n	25f40 <m2m_ip_cb+0x440>
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	781b      	ldrb	r3, [r3, #0]
   25f3c:	2b4c      	cmp	r3, #76	; 0x4c
   25f3e:	d14c      	bne.n	25fda <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25f40:	23de      	movs	r3, #222	; 0xde
   25f42:	18fb      	adds	r3, r7, r3
   25f44:	2207      	movs	r2, #7
   25f46:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25f48:	1dfb      	adds	r3, r7, #7
   25f4a:	781b      	ldrb	r3, [r3, #0]
   25f4c:	2b47      	cmp	r3, #71	; 0x47
   25f4e:	d103      	bne.n	25f58 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25f50:	23de      	movs	r3, #222	; 0xde
   25f52:	18fb      	adds	r3, r7, r3
   25f54:	2208      	movs	r2, #8
   25f56:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25f58:	2364      	movs	r3, #100	; 0x64
   25f5a:	18f9      	adds	r1, r7, r3
   25f5c:	6838      	ldr	r0, [r7, #0]
   25f5e:	2300      	movs	r3, #0
   25f60:	2208      	movs	r2, #8
   25f62:	4c36      	ldr	r4, [pc, #216]	; (2603c <m2m_ip_cb+0x53c>)
   25f64:	47a0      	blx	r4
   25f66:	1e03      	subs	r3, r0, #0
   25f68:	d162      	bne.n	26030 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25f6a:	23dc      	movs	r3, #220	; 0xdc
   25f6c:	18fb      	adds	r3, r7, r3
   25f6e:	2200      	movs	r2, #0
   25f70:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25f72:	23db      	movs	r3, #219	; 0xdb
   25f74:	18fb      	adds	r3, r7, r3
   25f76:	2264      	movs	r2, #100	; 0x64
   25f78:	18ba      	adds	r2, r7, r2
   25f7a:	7812      	ldrb	r2, [r2, #0]
   25f7c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25f7e:	23dc      	movs	r3, #220	; 0xdc
   25f80:	18fb      	adds	r3, r7, r3
   25f82:	2264      	movs	r2, #100	; 0x64
   25f84:	18ba      	adds	r2, r7, r2
   25f86:	8892      	ldrh	r2, [r2, #4]
   25f88:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25f8a:	2364      	movs	r3, #100	; 0x64
   25f8c:	18fb      	adds	r3, r7, r3
   25f8e:	2202      	movs	r2, #2
   25f90:	5e9a      	ldrsh	r2, [r3, r2]
   25f92:	236e      	movs	r3, #110	; 0x6e
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25f98:	23db      	movs	r3, #219	; 0xdb
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	781b      	ldrb	r3, [r3, #0]
   25f9e:	b25b      	sxtb	r3, r3
   25fa0:	4a27      	ldr	r2, [pc, #156]	; (26040 <m2m_ip_cb+0x540>)
   25fa2:	011b      	lsls	r3, r3, #4
   25fa4:	18d3      	adds	r3, r2, r3
   25fa6:	3306      	adds	r3, #6
   25fa8:	881b      	ldrh	r3, [r3, #0]
   25faa:	b29b      	uxth	r3, r3
   25fac:	22dc      	movs	r2, #220	; 0xdc
   25fae:	18ba      	adds	r2, r7, r2
   25fb0:	8812      	ldrh	r2, [r2, #0]
   25fb2:	429a      	cmp	r2, r3
   25fb4:	d13c      	bne.n	26030 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   25fb6:	4b24      	ldr	r3, [pc, #144]	; (26048 <m2m_ip_cb+0x548>)
   25fb8:	681b      	ldr	r3, [r3, #0]
   25fba:	2b00      	cmp	r3, #0
   25fbc:	d038      	beq.n	26030 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   25fbe:	4b22      	ldr	r3, [pc, #136]	; (26048 <m2m_ip_cb+0x548>)
   25fc0:	681b      	ldr	r3, [r3, #0]
   25fc2:	226e      	movs	r2, #110	; 0x6e
   25fc4:	18bc      	adds	r4, r7, r2
   25fc6:	22de      	movs	r2, #222	; 0xde
   25fc8:	18ba      	adds	r2, r7, r2
   25fca:	7811      	ldrb	r1, [r2, #0]
   25fcc:	22db      	movs	r2, #219	; 0xdb
   25fce:	18ba      	adds	r2, r7, r2
   25fd0:	2000      	movs	r0, #0
   25fd2:	5610      	ldrsb	r0, [r2, r0]
   25fd4:	0022      	movs	r2, r4
   25fd6:	4798      	blx	r3
	{
   25fd8:	e02a      	b.n	26030 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   25fda:	1dfb      	adds	r3, r7, #7
   25fdc:	781b      	ldrb	r3, [r3, #0]
   25fde:	2b52      	cmp	r3, #82	; 0x52
   25fe0:	d127      	bne.n	26032 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25fe2:	2350      	movs	r3, #80	; 0x50
   25fe4:	18f9      	adds	r1, r7, r3
   25fe6:	6838      	ldr	r0, [r7, #0]
   25fe8:	2301      	movs	r3, #1
   25fea:	2214      	movs	r2, #20
   25fec:	4c13      	ldr	r4, [pc, #76]	; (2603c <m2m_ip_cb+0x53c>)
   25fee:	47a0      	blx	r4
   25ff0:	1e03      	subs	r3, r0, #0
   25ff2:	d11e      	bne.n	26032 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25ff4:	2350      	movs	r3, #80	; 0x50
   25ff6:	18fb      	adds	r3, r7, r3
   25ff8:	685b      	ldr	r3, [r3, #4]
   25ffa:	001a      	movs	r2, r3
   25ffc:	4b13      	ldr	r3, [pc, #76]	; (2604c <m2m_ip_cb+0x54c>)
   25ffe:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   26000:	4b12      	ldr	r3, [pc, #72]	; (2604c <m2m_ip_cb+0x54c>)
   26002:	681b      	ldr	r3, [r3, #0]
   26004:	2b00      	cmp	r3, #0
   26006:	d014      	beq.n	26032 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   26008:	4b10      	ldr	r3, [pc, #64]	; (2604c <m2m_ip_cb+0x54c>)
   2600a:	681c      	ldr	r4, [r3, #0]
   2600c:	2350      	movs	r3, #80	; 0x50
   2600e:	18fb      	adds	r3, r7, r3
   26010:	6818      	ldr	r0, [r3, #0]
   26012:	2350      	movs	r3, #80	; 0x50
   26014:	18fb      	adds	r3, r7, r3
   26016:	6899      	ldr	r1, [r3, #8]
   26018:	2350      	movs	r3, #80	; 0x50
   2601a:	18fb      	adds	r3, r7, r3
   2601c:	7c1b      	ldrb	r3, [r3, #16]
   2601e:	001a      	movs	r2, r3
   26020:	47a0      	blx	r4
}
   26022:	e006      	b.n	26032 <m2m_ip_cb+0x532>
	{
   26024:	46c0      	nop			; (mov r8, r8)
   26026:	e004      	b.n	26032 <m2m_ip_cb+0x532>
	{
   26028:	46c0      	nop			; (mov r8, r8)
   2602a:	e002      	b.n	26032 <m2m_ip_cb+0x532>
	{
   2602c:	46c0      	nop			; (mov r8, r8)
   2602e:	e000      	b.n	26032 <m2m_ip_cb+0x532>
	{
   26030:	46c0      	nop			; (mov r8, r8)
}
   26032:	46c0      	nop			; (mov r8, r8)
   26034:	46bd      	mov	sp, r7
   26036:	b039      	add	sp, #228	; 0xe4
   26038:	bd90      	pop	{r4, r7, pc}
   2603a:	46c0      	nop			; (mov r8, r8)
   2603c:	000222fd 	.word	0x000222fd
   26040:	20005b5c 	.word	0x20005b5c
   26044:	00025905 	.word	0x00025905
   26048:	20005c0c 	.word	0x20005c0c
   2604c:	20005c10 	.word	0x20005c10

00026050 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   26050:	b580      	push	{r7, lr}
   26052:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   26054:	4b0c      	ldr	r3, [pc, #48]	; (26088 <socketInit+0x38>)
   26056:	781b      	ldrb	r3, [r3, #0]
   26058:	b2db      	uxtb	r3, r3
   2605a:	2b00      	cmp	r3, #0
   2605c:	d110      	bne.n	26080 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2605e:	4b0b      	ldr	r3, [pc, #44]	; (2608c <socketInit+0x3c>)
   26060:	22b0      	movs	r2, #176	; 0xb0
   26062:	2100      	movs	r1, #0
   26064:	0018      	movs	r0, r3
   26066:	4b0a      	ldr	r3, [pc, #40]	; (26090 <socketInit+0x40>)
   26068:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2606a:	4b0a      	ldr	r3, [pc, #40]	; (26094 <socketInit+0x44>)
   2606c:	0019      	movs	r1, r3
   2606e:	2002      	movs	r0, #2
   26070:	4b09      	ldr	r3, [pc, #36]	; (26098 <socketInit+0x48>)
   26072:	4798      	blx	r3
		gbSocketInit	= 1;
   26074:	4b04      	ldr	r3, [pc, #16]	; (26088 <socketInit+0x38>)
   26076:	2201      	movs	r2, #1
   26078:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2607a:	4b08      	ldr	r3, [pc, #32]	; (2609c <socketInit+0x4c>)
   2607c:	2200      	movs	r2, #0
   2607e:	801a      	strh	r2, [r3, #0]
	}
}
   26080:	46c0      	nop			; (mov r8, r8)
   26082:	46bd      	mov	sp, r7
   26084:	bd80      	pop	{r7, pc}
   26086:	46c0      	nop			; (mov r8, r8)
   26088:	200042ac 	.word	0x200042ac
   2608c:	20005b5c 	.word	0x20005b5c
   26090:	00021781 	.word	0x00021781
   26094:	00025b01 	.word	0x00025b01
   26098:	0002247d 	.word	0x0002247d
   2609c:	200042aa 	.word	0x200042aa

000260a0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   260a0:	b580      	push	{r7, lr}
   260a2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   260a4:	4b0a      	ldr	r3, [pc, #40]	; (260d0 <socketDeinit+0x30>)
   260a6:	22b0      	movs	r2, #176	; 0xb0
   260a8:	2100      	movs	r1, #0
   260aa:	0018      	movs	r0, r3
   260ac:	4b09      	ldr	r3, [pc, #36]	; (260d4 <socketDeinit+0x34>)
   260ae:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   260b0:	2100      	movs	r1, #0
   260b2:	2002      	movs	r0, #2
   260b4:	4b08      	ldr	r3, [pc, #32]	; (260d8 <socketDeinit+0x38>)
   260b6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   260b8:	4b08      	ldr	r3, [pc, #32]	; (260dc <socketDeinit+0x3c>)
   260ba:	2200      	movs	r2, #0
   260bc:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   260be:	4b08      	ldr	r3, [pc, #32]	; (260e0 <socketDeinit+0x40>)
   260c0:	2200      	movs	r2, #0
   260c2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   260c4:	4b07      	ldr	r3, [pc, #28]	; (260e4 <socketDeinit+0x44>)
   260c6:	2200      	movs	r2, #0
   260c8:	701a      	strb	r2, [r3, #0]
}
   260ca:	46c0      	nop			; (mov r8, r8)
   260cc:	46bd      	mov	sp, r7
   260ce:	bd80      	pop	{r7, pc}
   260d0:	20005b5c 	.word	0x20005b5c
   260d4:	00021781 	.word	0x00021781
   260d8:	0002247d 	.word	0x0002247d
   260dc:	20005c0c 	.word	0x20005c0c
   260e0:	20005c14 	.word	0x20005c14
   260e4:	200042ac 	.word	0x200042ac

000260e8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   260e8:	b580      	push	{r7, lr}
   260ea:	b082      	sub	sp, #8
   260ec:	af00      	add	r7, sp, #0
   260ee:	6078      	str	r0, [r7, #4]
   260f0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   260f2:	4b05      	ldr	r3, [pc, #20]	; (26108 <registerSocketCallback+0x20>)
   260f4:	687a      	ldr	r2, [r7, #4]
   260f6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   260f8:	4b04      	ldr	r3, [pc, #16]	; (2610c <registerSocketCallback+0x24>)
   260fa:	683a      	ldr	r2, [r7, #0]
   260fc:	601a      	str	r2, [r3, #0]
}
   260fe:	46c0      	nop			; (mov r8, r8)
   26100:	46bd      	mov	sp, r7
   26102:	b002      	add	sp, #8
   26104:	bd80      	pop	{r7, pc}
   26106:	46c0      	nop			; (mov r8, r8)
   26108:	20005c0c 	.word	0x20005c0c
   2610c:	20005c14 	.word	0x20005c14

00026110 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   26110:	b590      	push	{r4, r7, lr}
   26112:	b08d      	sub	sp, #52	; 0x34
   26114:	af04      	add	r7, sp, #16
   26116:	0004      	movs	r4, r0
   26118:	0008      	movs	r0, r1
   2611a:	0011      	movs	r1, r2
   2611c:	1dbb      	adds	r3, r7, #6
   2611e:	1c22      	adds	r2, r4, #0
   26120:	801a      	strh	r2, [r3, #0]
   26122:	1d7b      	adds	r3, r7, #5
   26124:	1c02      	adds	r2, r0, #0
   26126:	701a      	strb	r2, [r3, #0]
   26128:	1d3b      	adds	r3, r7, #4
   2612a:	1c0a      	adds	r2, r1, #0
   2612c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2612e:	231f      	movs	r3, #31
   26130:	18fb      	adds	r3, r7, r3
   26132:	22ff      	movs	r2, #255	; 0xff
   26134:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   26136:	1dbb      	adds	r3, r7, #6
   26138:	881b      	ldrh	r3, [r3, #0]
   2613a:	2b02      	cmp	r3, #2
   2613c:	d000      	beq.n	26140 <socket+0x30>
   2613e:	e0ce      	b.n	262de <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   26140:	1d7b      	adds	r3, r7, #5
   26142:	781b      	ldrb	r3, [r3, #0]
   26144:	2b01      	cmp	r3, #1
   26146:	d135      	bne.n	261b4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   26148:	231e      	movs	r3, #30
   2614a:	18fb      	adds	r3, r7, r3
   2614c:	2200      	movs	r2, #0
   2614e:	701a      	strb	r2, [r3, #0]
   26150:	e02a      	b.n	261a8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   26152:	2317      	movs	r3, #23
   26154:	18fb      	adds	r3, r7, r3
   26156:	4a66      	ldr	r2, [pc, #408]	; (262f0 <socket+0x1e0>)
   26158:	7812      	ldrb	r2, [r2, #0]
   2615a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2615c:	4b64      	ldr	r3, [pc, #400]	; (262f0 <socket+0x1e0>)
   2615e:	781b      	ldrb	r3, [r3, #0]
   26160:	b2db      	uxtb	r3, r3
   26162:	011a      	lsls	r2, r3, #4
   26164:	4b63      	ldr	r3, [pc, #396]	; (262f4 <socket+0x1e4>)
   26166:	18d3      	adds	r3, r2, r3
   26168:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2616a:	4b61      	ldr	r3, [pc, #388]	; (262f0 <socket+0x1e0>)
   2616c:	781b      	ldrb	r3, [r3, #0]
   2616e:	b2db      	uxtb	r3, r3
   26170:	1c5a      	adds	r2, r3, #1
   26172:	4b61      	ldr	r3, [pc, #388]	; (262f8 <socket+0x1e8>)
   26174:	2107      	movs	r1, #7
   26176:	0010      	movs	r0, r2
   26178:	4798      	blx	r3
   2617a:	000b      	movs	r3, r1
   2617c:	b2da      	uxtb	r2, r3
   2617e:	4b5c      	ldr	r3, [pc, #368]	; (262f0 <socket+0x1e0>)
   26180:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26182:	69bb      	ldr	r3, [r7, #24]
   26184:	7a9b      	ldrb	r3, [r3, #10]
   26186:	b2db      	uxtb	r3, r3
   26188:	2b00      	cmp	r3, #0
   2618a:	d106      	bne.n	2619a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2618c:	231f      	movs	r3, #31
   2618e:	18fb      	adds	r3, r7, r3
   26190:	2217      	movs	r2, #23
   26192:	18ba      	adds	r2, r7, r2
   26194:	7812      	ldrb	r2, [r2, #0]
   26196:	701a      	strb	r2, [r3, #0]
					break;
   26198:	e04c      	b.n	26234 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2619a:	231e      	movs	r3, #30
   2619c:	18fb      	adds	r3, r7, r3
   2619e:	781a      	ldrb	r2, [r3, #0]
   261a0:	231e      	movs	r3, #30
   261a2:	18fb      	adds	r3, r7, r3
   261a4:	3201      	adds	r2, #1
   261a6:	701a      	strb	r2, [r3, #0]
   261a8:	231e      	movs	r3, #30
   261aa:	18fb      	adds	r3, r7, r3
   261ac:	781b      	ldrb	r3, [r3, #0]
   261ae:	2b06      	cmp	r3, #6
   261b0:	d9cf      	bls.n	26152 <socket+0x42>
   261b2:	e03f      	b.n	26234 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   261b4:	1d7b      	adds	r3, r7, #5
   261b6:	781b      	ldrb	r3, [r3, #0]
   261b8:	2b02      	cmp	r3, #2
   261ba:	d13b      	bne.n	26234 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   261bc:	4b4f      	ldr	r3, [pc, #316]	; (262fc <socket+0x1ec>)
   261be:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   261c0:	231e      	movs	r3, #30
   261c2:	18fb      	adds	r3, r7, r3
   261c4:	2200      	movs	r2, #0
   261c6:	701a      	strb	r2, [r3, #0]
   261c8:	e02f      	b.n	2622a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   261ca:	2317      	movs	r3, #23
   261cc:	18fb      	adds	r3, r7, r3
   261ce:	4a4c      	ldr	r2, [pc, #304]	; (26300 <socket+0x1f0>)
   261d0:	7812      	ldrb	r2, [r2, #0]
   261d2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   261d4:	4b4a      	ldr	r3, [pc, #296]	; (26300 <socket+0x1f0>)
   261d6:	781b      	ldrb	r3, [r3, #0]
   261d8:	b2db      	uxtb	r3, r3
   261da:	011b      	lsls	r3, r3, #4
   261dc:	693a      	ldr	r2, [r7, #16]
   261de:	18d3      	adds	r3, r2, r3
   261e0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   261e2:	4b47      	ldr	r3, [pc, #284]	; (26300 <socket+0x1f0>)
   261e4:	781b      	ldrb	r3, [r3, #0]
   261e6:	b2db      	uxtb	r3, r3
   261e8:	3301      	adds	r3, #1
   261ea:	4a46      	ldr	r2, [pc, #280]	; (26304 <socket+0x1f4>)
   261ec:	4013      	ands	r3, r2
   261ee:	d504      	bpl.n	261fa <socket+0xea>
   261f0:	3b01      	subs	r3, #1
   261f2:	2204      	movs	r2, #4
   261f4:	4252      	negs	r2, r2
   261f6:	4313      	orrs	r3, r2
   261f8:	3301      	adds	r3, #1
   261fa:	b2da      	uxtb	r2, r3
   261fc:	4b40      	ldr	r3, [pc, #256]	; (26300 <socket+0x1f0>)
   261fe:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26200:	69bb      	ldr	r3, [r7, #24]
   26202:	7a9b      	ldrb	r3, [r3, #10]
   26204:	b2db      	uxtb	r3, r3
   26206:	2b00      	cmp	r3, #0
   26208:	d108      	bne.n	2621c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2620a:	2317      	movs	r3, #23
   2620c:	18fb      	adds	r3, r7, r3
   2620e:	781b      	ldrb	r3, [r3, #0]
   26210:	3307      	adds	r3, #7
   26212:	b2da      	uxtb	r2, r3
   26214:	231f      	movs	r3, #31
   26216:	18fb      	adds	r3, r7, r3
   26218:	701a      	strb	r2, [r3, #0]
					break;
   2621a:	e00b      	b.n	26234 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2621c:	231e      	movs	r3, #30
   2621e:	18fb      	adds	r3, r7, r3
   26220:	781a      	ldrb	r2, [r3, #0]
   26222:	231e      	movs	r3, #30
   26224:	18fb      	adds	r3, r7, r3
   26226:	3201      	adds	r2, #1
   26228:	701a      	strb	r2, [r3, #0]
   2622a:	231e      	movs	r3, #30
   2622c:	18fb      	adds	r3, r7, r3
   2622e:	781b      	ldrb	r3, [r3, #0]
   26230:	2b03      	cmp	r3, #3
   26232:	d9ca      	bls.n	261ca <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   26234:	231f      	movs	r3, #31
   26236:	18fb      	adds	r3, r7, r3
   26238:	781b      	ldrb	r3, [r3, #0]
   2623a:	2b7f      	cmp	r3, #127	; 0x7f
   2623c:	d84f      	bhi.n	262de <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2623e:	69bb      	ldr	r3, [r7, #24]
   26240:	2210      	movs	r2, #16
   26242:	2100      	movs	r1, #0
   26244:	0018      	movs	r0, r3
   26246:	4b30      	ldr	r3, [pc, #192]	; (26308 <socket+0x1f8>)
   26248:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2624a:	69bb      	ldr	r3, [r7, #24]
   2624c:	2201      	movs	r2, #1
   2624e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   26250:	4b2e      	ldr	r3, [pc, #184]	; (2630c <socket+0x1fc>)
   26252:	881b      	ldrh	r3, [r3, #0]
   26254:	b29b      	uxth	r3, r3
   26256:	3301      	adds	r3, #1
   26258:	b29a      	uxth	r2, r3
   2625a:	4b2c      	ldr	r3, [pc, #176]	; (2630c <socket+0x1fc>)
   2625c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2625e:	4b2b      	ldr	r3, [pc, #172]	; (2630c <socket+0x1fc>)
   26260:	881b      	ldrh	r3, [r3, #0]
   26262:	b29b      	uxth	r3, r3
   26264:	2b00      	cmp	r3, #0
   26266:	d106      	bne.n	26276 <socket+0x166>
				++gu16SessionID;
   26268:	4b28      	ldr	r3, [pc, #160]	; (2630c <socket+0x1fc>)
   2626a:	881b      	ldrh	r3, [r3, #0]
   2626c:	b29b      	uxth	r3, r3
   2626e:	3301      	adds	r3, #1
   26270:	b29a      	uxth	r2, r3
   26272:	4b26      	ldr	r3, [pc, #152]	; (2630c <socket+0x1fc>)
   26274:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   26276:	4b25      	ldr	r3, [pc, #148]	; (2630c <socket+0x1fc>)
   26278:	881b      	ldrh	r3, [r3, #0]
   2627a:	b29a      	uxth	r2, r3
   2627c:	69bb      	ldr	r3, [r7, #24]
   2627e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   26280:	4b23      	ldr	r3, [pc, #140]	; (26310 <socket+0x200>)
   26282:	0018      	movs	r0, r3
   26284:	4b23      	ldr	r3, [pc, #140]	; (26314 <socket+0x204>)
   26286:	4798      	blx	r3
   26288:	231f      	movs	r3, #31
   2628a:	18fb      	adds	r3, r7, r3
   2628c:	2100      	movs	r1, #0
   2628e:	5659      	ldrsb	r1, [r3, r1]
   26290:	4b1e      	ldr	r3, [pc, #120]	; (2630c <socket+0x1fc>)
   26292:	881b      	ldrh	r3, [r3, #0]
   26294:	b29b      	uxth	r3, r3
   26296:	001a      	movs	r2, r3
   26298:	4b1f      	ldr	r3, [pc, #124]	; (26318 <socket+0x208>)
   2629a:	0018      	movs	r0, r3
   2629c:	4b1d      	ldr	r3, [pc, #116]	; (26314 <socket+0x204>)
   2629e:	4798      	blx	r3
   262a0:	4b1e      	ldr	r3, [pc, #120]	; (2631c <socket+0x20c>)
   262a2:	0018      	movs	r0, r3
   262a4:	4b1b      	ldr	r3, [pc, #108]	; (26314 <socket+0x204>)
   262a6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   262a8:	1d3b      	adds	r3, r7, #4
   262aa:	781b      	ldrb	r3, [r3, #0]
   262ac:	2201      	movs	r2, #1
   262ae:	4013      	ands	r3, r2
   262b0:	d015      	beq.n	262de <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   262b2:	230c      	movs	r3, #12
   262b4:	18fb      	adds	r3, r7, r3
   262b6:	221f      	movs	r2, #31
   262b8:	18ba      	adds	r2, r7, r2
   262ba:	7812      	ldrb	r2, [r2, #0]
   262bc:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   262be:	69bb      	ldr	r3, [r7, #24]
   262c0:	2221      	movs	r2, #33	; 0x21
   262c2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   262c4:	230c      	movs	r3, #12
   262c6:	18fa      	adds	r2, r7, r3
   262c8:	2300      	movs	r3, #0
   262ca:	9302      	str	r3, [sp, #8]
   262cc:	2300      	movs	r3, #0
   262ce:	9301      	str	r3, [sp, #4]
   262d0:	2300      	movs	r3, #0
   262d2:	9300      	str	r3, [sp, #0]
   262d4:	2304      	movs	r3, #4
   262d6:	2150      	movs	r1, #80	; 0x50
   262d8:	2002      	movs	r0, #2
   262da:	4c11      	ldr	r4, [pc, #68]	; (26320 <socket+0x210>)
   262dc:	47a0      	blx	r4
			}
		}
	}
	return sock;
   262de:	231f      	movs	r3, #31
   262e0:	18fb      	adds	r3, r7, r3
   262e2:	781b      	ldrb	r3, [r3, #0]
   262e4:	b25b      	sxtb	r3, r3
}
   262e6:	0018      	movs	r0, r3
   262e8:	46bd      	mov	sp, r7
   262ea:	b009      	add	sp, #36	; 0x24
   262ec:	bd90      	pop	{r4, r7, pc}
   262ee:	46c0      	nop			; (mov r8, r8)
   262f0:	200042ad 	.word	0x200042ad
   262f4:	20005b5c 	.word	0x20005b5c
   262f8:	00033985 	.word	0x00033985
   262fc:	20005bcc 	.word	0x20005bcc
   26300:	200042ae 	.word	0x200042ae
   26304:	80000003 	.word	0x80000003
   26308:	00021781 	.word	0x00021781
   2630c:	200042aa 	.word	0x200042aa
   26310:	0003ae40 	.word	0x0003ae40
   26314:	0001e9e9 	.word	0x0001e9e9
   26318:	0003ae64 	.word	0x0003ae64
   2631c:	0003ae60 	.word	0x0003ae60
   26320:	000219e1 	.word	0x000219e1

00026324 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   26324:	b5b0      	push	{r4, r5, r7, lr}
   26326:	b08a      	sub	sp, #40	; 0x28
   26328:	af04      	add	r7, sp, #16
   2632a:	6039      	str	r1, [r7, #0]
   2632c:	0011      	movs	r1, r2
   2632e:	1dfb      	adds	r3, r7, #7
   26330:	1c02      	adds	r2, r0, #0
   26332:	701a      	strb	r2, [r3, #0]
   26334:	1dbb      	adds	r3, r7, #6
   26336:	1c0a      	adds	r2, r1, #0
   26338:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2633a:	2317      	movs	r3, #23
   2633c:	18fb      	adds	r3, r7, r3
   2633e:	22fa      	movs	r2, #250	; 0xfa
   26340:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   26342:	1dfb      	adds	r3, r7, #7
   26344:	781b      	ldrb	r3, [r3, #0]
   26346:	2b7f      	cmp	r3, #127	; 0x7f
   26348:	d867      	bhi.n	2641a <connect+0xf6>
   2634a:	683b      	ldr	r3, [r7, #0]
   2634c:	2b00      	cmp	r3, #0
   2634e:	d064      	beq.n	2641a <connect+0xf6>
   26350:	1dfb      	adds	r3, r7, #7
   26352:	781b      	ldrb	r3, [r3, #0]
   26354:	b25b      	sxtb	r3, r3
   26356:	4a35      	ldr	r2, [pc, #212]	; (2642c <connect+0x108>)
   26358:	011b      	lsls	r3, r3, #4
   2635a:	18d3      	adds	r3, r2, r3
   2635c:	330a      	adds	r3, #10
   2635e:	781b      	ldrb	r3, [r3, #0]
   26360:	b2db      	uxtb	r3, r3
   26362:	2b01      	cmp	r3, #1
   26364:	d159      	bne.n	2641a <connect+0xf6>
   26366:	1dbb      	adds	r3, r7, #6
   26368:	781b      	ldrb	r3, [r3, #0]
   2636a:	2b00      	cmp	r3, #0
   2636c:	d055      	beq.n	2641a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2636e:	2316      	movs	r3, #22
   26370:	18fb      	adds	r3, r7, r3
   26372:	2244      	movs	r2, #68	; 0x44
   26374:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   26376:	1dfb      	adds	r3, r7, #7
   26378:	781b      	ldrb	r3, [r3, #0]
   2637a:	b25b      	sxtb	r3, r3
   2637c:	4a2b      	ldr	r2, [pc, #172]	; (2642c <connect+0x108>)
   2637e:	011b      	lsls	r3, r3, #4
   26380:	18d3      	adds	r3, r2, r3
   26382:	330b      	adds	r3, #11
   26384:	781b      	ldrb	r3, [r3, #0]
   26386:	b2db      	uxtb	r3, r3
   26388:	001a      	movs	r2, r3
   2638a:	2301      	movs	r3, #1
   2638c:	4013      	ands	r3, r2
   2638e:	d00f      	beq.n	263b0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26390:	2316      	movs	r3, #22
   26392:	18fb      	adds	r3, r7, r3
   26394:	224b      	movs	r2, #75	; 0x4b
   26396:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   26398:	1dfb      	adds	r3, r7, #7
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	b25b      	sxtb	r3, r3
   2639e:	4a23      	ldr	r2, [pc, #140]	; (2642c <connect+0x108>)
   263a0:	011b      	lsls	r3, r3, #4
   263a2:	18d3      	adds	r3, r2, r3
   263a4:	330b      	adds	r3, #11
   263a6:	781b      	ldrb	r3, [r3, #0]
   263a8:	b2da      	uxtb	r2, r3
   263aa:	2308      	movs	r3, #8
   263ac:	18fb      	adds	r3, r7, r3
   263ae:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   263b0:	2308      	movs	r3, #8
   263b2:	18fb      	adds	r3, r7, r3
   263b4:	1dfa      	adds	r2, r7, #7
   263b6:	7812      	ldrb	r2, [r2, #0]
   263b8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   263ba:	6839      	ldr	r1, [r7, #0]
   263bc:	2308      	movs	r3, #8
   263be:	18fb      	adds	r3, r7, r3
   263c0:	2208      	movs	r2, #8
   263c2:	0018      	movs	r0, r3
   263c4:	4b1a      	ldr	r3, [pc, #104]	; (26430 <connect+0x10c>)
   263c6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   263c8:	1dfb      	adds	r3, r7, #7
   263ca:	781b      	ldrb	r3, [r3, #0]
   263cc:	b25b      	sxtb	r3, r3
   263ce:	4a17      	ldr	r2, [pc, #92]	; (2642c <connect+0x108>)
   263d0:	011b      	lsls	r3, r3, #4
   263d2:	18d3      	adds	r3, r2, r3
   263d4:	3306      	adds	r3, #6
   263d6:	881b      	ldrh	r3, [r3, #0]
   263d8:	b29a      	uxth	r2, r3
   263da:	2308      	movs	r3, #8
   263dc:	18fb      	adds	r3, r7, r3
   263de:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   263e0:	2317      	movs	r3, #23
   263e2:	18fc      	adds	r4, r7, r3
   263e4:	2308      	movs	r3, #8
   263e6:	18fa      	adds	r2, r7, r3
   263e8:	2316      	movs	r3, #22
   263ea:	18fb      	adds	r3, r7, r3
   263ec:	7819      	ldrb	r1, [r3, #0]
   263ee:	2300      	movs	r3, #0
   263f0:	9302      	str	r3, [sp, #8]
   263f2:	2300      	movs	r3, #0
   263f4:	9301      	str	r3, [sp, #4]
   263f6:	2300      	movs	r3, #0
   263f8:	9300      	str	r3, [sp, #0]
   263fa:	230c      	movs	r3, #12
   263fc:	2002      	movs	r0, #2
   263fe:	4d0d      	ldr	r5, [pc, #52]	; (26434 <connect+0x110>)
   26400:	47a8      	blx	r5
   26402:	0003      	movs	r3, r0
   26404:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26406:	2317      	movs	r3, #23
   26408:	18fb      	adds	r3, r7, r3
   2640a:	781b      	ldrb	r3, [r3, #0]
   2640c:	b25b      	sxtb	r3, r3
   2640e:	2b00      	cmp	r3, #0
   26410:	d003      	beq.n	2641a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   26412:	2317      	movs	r3, #23
   26414:	18fb      	adds	r3, r7, r3
   26416:	22f7      	movs	r2, #247	; 0xf7
   26418:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2641a:	2317      	movs	r3, #23
   2641c:	18fb      	adds	r3, r7, r3
   2641e:	781b      	ldrb	r3, [r3, #0]
   26420:	b25b      	sxtb	r3, r3
}
   26422:	0018      	movs	r0, r3
   26424:	46bd      	mov	sp, r7
   26426:	b006      	add	sp, #24
   26428:	bdb0      	pop	{r4, r5, r7, pc}
   2642a:	46c0      	nop			; (mov r8, r8)
   2642c:	20005b5c 	.word	0x20005b5c
   26430:	00021745 	.word	0x00021745
   26434:	000219e1 	.word	0x000219e1

00026438 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   26438:	b590      	push	{r4, r7, lr}
   2643a:	b08f      	sub	sp, #60	; 0x3c
   2643c:	af04      	add	r7, sp, #16
   2643e:	0004      	movs	r4, r0
   26440:	60b9      	str	r1, [r7, #8]
   26442:	0010      	movs	r0, r2
   26444:	0019      	movs	r1, r3
   26446:	230f      	movs	r3, #15
   26448:	18fb      	adds	r3, r7, r3
   2644a:	1c22      	adds	r2, r4, #0
   2644c:	701a      	strb	r2, [r3, #0]
   2644e:	230c      	movs	r3, #12
   26450:	18fb      	adds	r3, r7, r3
   26452:	1c02      	adds	r2, r0, #0
   26454:	801a      	strh	r2, [r3, #0]
   26456:	1dbb      	adds	r3, r7, #6
   26458:	1c0a      	adds	r2, r1, #0
   2645a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2645c:	2326      	movs	r3, #38	; 0x26
   2645e:	18fb      	adds	r3, r7, r3
   26460:	2206      	movs	r2, #6
   26462:	4252      	negs	r2, r2
   26464:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   26466:	230f      	movs	r3, #15
   26468:	18fb      	adds	r3, r7, r3
   2646a:	781b      	ldrb	r3, [r3, #0]
   2646c:	2b7f      	cmp	r3, #127	; 0x7f
   2646e:	d900      	bls.n	26472 <send+0x3a>
   26470:	e087      	b.n	26582 <send+0x14a>
   26472:	68bb      	ldr	r3, [r7, #8]
   26474:	2b00      	cmp	r3, #0
   26476:	d100      	bne.n	2647a <send+0x42>
   26478:	e083      	b.n	26582 <send+0x14a>
   2647a:	230c      	movs	r3, #12
   2647c:	18fb      	adds	r3, r7, r3
   2647e:	881a      	ldrh	r2, [r3, #0]
   26480:	23af      	movs	r3, #175	; 0xaf
   26482:	00db      	lsls	r3, r3, #3
   26484:	429a      	cmp	r2, r3
   26486:	d900      	bls.n	2648a <send+0x52>
   26488:	e07b      	b.n	26582 <send+0x14a>
   2648a:	230f      	movs	r3, #15
   2648c:	18fb      	adds	r3, r7, r3
   2648e:	781b      	ldrb	r3, [r3, #0]
   26490:	b25b      	sxtb	r3, r3
   26492:	4a40      	ldr	r2, [pc, #256]	; (26594 <send+0x15c>)
   26494:	011b      	lsls	r3, r3, #4
   26496:	18d3      	adds	r3, r2, r3
   26498:	330a      	adds	r3, #10
   2649a:	781b      	ldrb	r3, [r3, #0]
   2649c:	b2db      	uxtb	r3, r3
   2649e:	2b01      	cmp	r3, #1
   264a0:	d16f      	bne.n	26582 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   264a2:	2323      	movs	r3, #35	; 0x23
   264a4:	18fb      	adds	r3, r7, r3
   264a6:	2245      	movs	r2, #69	; 0x45
   264a8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   264aa:	2324      	movs	r3, #36	; 0x24
   264ac:	18fb      	adds	r3, r7, r3
   264ae:	2250      	movs	r2, #80	; 0x50
   264b0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   264b2:	2310      	movs	r3, #16
   264b4:	18fb      	adds	r3, r7, r3
   264b6:	220f      	movs	r2, #15
   264b8:	18ba      	adds	r2, r7, r2
   264ba:	7812      	ldrb	r2, [r2, #0]
   264bc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   264be:	2310      	movs	r3, #16
   264c0:	18fb      	adds	r3, r7, r3
   264c2:	220c      	movs	r2, #12
   264c4:	18ba      	adds	r2, r7, r2
   264c6:	8812      	ldrh	r2, [r2, #0]
   264c8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   264ca:	230f      	movs	r3, #15
   264cc:	18fb      	adds	r3, r7, r3
   264ce:	781b      	ldrb	r3, [r3, #0]
   264d0:	b25b      	sxtb	r3, r3
   264d2:	4a30      	ldr	r2, [pc, #192]	; (26594 <send+0x15c>)
   264d4:	011b      	lsls	r3, r3, #4
   264d6:	18d3      	adds	r3, r2, r3
   264d8:	3306      	adds	r3, #6
   264da:	881b      	ldrh	r3, [r3, #0]
   264dc:	b29a      	uxth	r2, r3
   264de:	2310      	movs	r3, #16
   264e0:	18fb      	adds	r3, r7, r3
   264e2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   264e4:	230f      	movs	r3, #15
   264e6:	18fb      	adds	r3, r7, r3
   264e8:	781b      	ldrb	r3, [r3, #0]
   264ea:	b25b      	sxtb	r3, r3
   264ec:	2b06      	cmp	r3, #6
   264ee:	dd03      	ble.n	264f8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   264f0:	2324      	movs	r3, #36	; 0x24
   264f2:	18fb      	adds	r3, r7, r3
   264f4:	2244      	movs	r2, #68	; 0x44
   264f6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   264f8:	230f      	movs	r3, #15
   264fa:	18fb      	adds	r3, r7, r3
   264fc:	781b      	ldrb	r3, [r3, #0]
   264fe:	b25b      	sxtb	r3, r3
   26500:	4a24      	ldr	r2, [pc, #144]	; (26594 <send+0x15c>)
   26502:	011b      	lsls	r3, r3, #4
   26504:	18d3      	adds	r3, r2, r3
   26506:	330b      	adds	r3, #11
   26508:	781b      	ldrb	r3, [r3, #0]
   2650a:	b2db      	uxtb	r3, r3
   2650c:	001a      	movs	r2, r3
   2650e:	2301      	movs	r3, #1
   26510:	4013      	ands	r3, r2
   26512:	d00f      	beq.n	26534 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   26514:	2323      	movs	r3, #35	; 0x23
   26516:	18fb      	adds	r3, r7, r3
   26518:	224c      	movs	r2, #76	; 0x4c
   2651a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   2651c:	230f      	movs	r3, #15
   2651e:	18fb      	adds	r3, r7, r3
   26520:	2200      	movs	r2, #0
   26522:	569a      	ldrsb	r2, [r3, r2]
   26524:	2324      	movs	r3, #36	; 0x24
   26526:	18fb      	adds	r3, r7, r3
   26528:	491a      	ldr	r1, [pc, #104]	; (26594 <send+0x15c>)
   2652a:	0112      	lsls	r2, r2, #4
   2652c:	188a      	adds	r2, r1, r2
   2652e:	3208      	adds	r2, #8
   26530:	8812      	ldrh	r2, [r2, #0]
   26532:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26534:	2323      	movs	r3, #35	; 0x23
   26536:	18fb      	adds	r3, r7, r3
   26538:	781b      	ldrb	r3, [r3, #0]
   2653a:	2280      	movs	r2, #128	; 0x80
   2653c:	4252      	negs	r2, r2
   2653e:	4313      	orrs	r3, r2
   26540:	b2d9      	uxtb	r1, r3
   26542:	2310      	movs	r3, #16
   26544:	18fa      	adds	r2, r7, r3
   26546:	2324      	movs	r3, #36	; 0x24
   26548:	18fb      	adds	r3, r7, r3
   2654a:	881b      	ldrh	r3, [r3, #0]
   2654c:	9302      	str	r3, [sp, #8]
   2654e:	230c      	movs	r3, #12
   26550:	18fb      	adds	r3, r7, r3
   26552:	881b      	ldrh	r3, [r3, #0]
   26554:	9301      	str	r3, [sp, #4]
   26556:	68bb      	ldr	r3, [r7, #8]
   26558:	9300      	str	r3, [sp, #0]
   2655a:	2310      	movs	r3, #16
   2655c:	2002      	movs	r0, #2
   2655e:	4c0e      	ldr	r4, [pc, #56]	; (26598 <send+0x160>)
   26560:	47a0      	blx	r4
   26562:	0003      	movs	r3, r0
   26564:	001a      	movs	r2, r3
   26566:	2326      	movs	r3, #38	; 0x26
   26568:	18fb      	adds	r3, r7, r3
   2656a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2656c:	2326      	movs	r3, #38	; 0x26
   2656e:	18fb      	adds	r3, r7, r3
   26570:	2200      	movs	r2, #0
   26572:	5e9b      	ldrsh	r3, [r3, r2]
   26574:	2b00      	cmp	r3, #0
   26576:	d004      	beq.n	26582 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   26578:	2326      	movs	r3, #38	; 0x26
   2657a:	18fb      	adds	r3, r7, r3
   2657c:	220e      	movs	r2, #14
   2657e:	4252      	negs	r2, r2
   26580:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26582:	2326      	movs	r3, #38	; 0x26
   26584:	18fb      	adds	r3, r7, r3
   26586:	2200      	movs	r2, #0
   26588:	5e9b      	ldrsh	r3, [r3, r2]
}
   2658a:	0018      	movs	r0, r3
   2658c:	46bd      	mov	sp, r7
   2658e:	b00b      	add	sp, #44	; 0x2c
   26590:	bd90      	pop	{r4, r7, pc}
   26592:	46c0      	nop			; (mov r8, r8)
   26594:	20005b5c 	.word	0x20005b5c
   26598:	000219e1 	.word	0x000219e1

0002659c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2659c:	b590      	push	{r4, r7, lr}
   2659e:	b08d      	sub	sp, #52	; 0x34
   265a0:	af04      	add	r7, sp, #16
   265a2:	60b9      	str	r1, [r7, #8]
   265a4:	0011      	movs	r1, r2
   265a6:	607b      	str	r3, [r7, #4]
   265a8:	230f      	movs	r3, #15
   265aa:	18fb      	adds	r3, r7, r3
   265ac:	1c02      	adds	r2, r0, #0
   265ae:	701a      	strb	r2, [r3, #0]
   265b0:	230c      	movs	r3, #12
   265b2:	18fb      	adds	r3, r7, r3
   265b4:	1c0a      	adds	r2, r1, #0
   265b6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   265b8:	231e      	movs	r3, #30
   265ba:	18fb      	adds	r3, r7, r3
   265bc:	2206      	movs	r2, #6
   265be:	4252      	negs	r2, r2
   265c0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   265c2:	230f      	movs	r3, #15
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	2b7f      	cmp	r3, #127	; 0x7f
   265ca:	d900      	bls.n	265ce <recv+0x32>
   265cc:	e099      	b.n	26702 <recv+0x166>
   265ce:	68bb      	ldr	r3, [r7, #8]
   265d0:	2b00      	cmp	r3, #0
   265d2:	d100      	bne.n	265d6 <recv+0x3a>
   265d4:	e095      	b.n	26702 <recv+0x166>
   265d6:	230c      	movs	r3, #12
   265d8:	18fb      	adds	r3, r7, r3
   265da:	881b      	ldrh	r3, [r3, #0]
   265dc:	2b00      	cmp	r3, #0
   265de:	d100      	bne.n	265e2 <recv+0x46>
   265e0:	e08f      	b.n	26702 <recv+0x166>
   265e2:	230f      	movs	r3, #15
   265e4:	18fb      	adds	r3, r7, r3
   265e6:	781b      	ldrb	r3, [r3, #0]
   265e8:	b25b      	sxtb	r3, r3
   265ea:	4a4a      	ldr	r2, [pc, #296]	; (26714 <recv+0x178>)
   265ec:	011b      	lsls	r3, r3, #4
   265ee:	18d3      	adds	r3, r2, r3
   265f0:	330a      	adds	r3, #10
   265f2:	781b      	ldrb	r3, [r3, #0]
   265f4:	b2db      	uxtb	r3, r3
   265f6:	2b01      	cmp	r3, #1
   265f8:	d000      	beq.n	265fc <recv+0x60>
   265fa:	e082      	b.n	26702 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   265fc:	231e      	movs	r3, #30
   265fe:	18fb      	adds	r3, r7, r3
   26600:	2200      	movs	r2, #0
   26602:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26604:	230f      	movs	r3, #15
   26606:	18fb      	adds	r3, r7, r3
   26608:	2200      	movs	r2, #0
   2660a:	569a      	ldrsb	r2, [r3, r2]
   2660c:	4b41      	ldr	r3, [pc, #260]	; (26714 <recv+0x178>)
   2660e:	0112      	lsls	r2, r2, #4
   26610:	68b9      	ldr	r1, [r7, #8]
   26612:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26614:	230f      	movs	r3, #15
   26616:	18fb      	adds	r3, r7, r3
   26618:	781b      	ldrb	r3, [r3, #0]
   2661a:	b25b      	sxtb	r3, r3
   2661c:	4a3d      	ldr	r2, [pc, #244]	; (26714 <recv+0x178>)
   2661e:	011b      	lsls	r3, r3, #4
   26620:	18d3      	adds	r3, r2, r3
   26622:	3304      	adds	r3, #4
   26624:	220c      	movs	r2, #12
   26626:	18ba      	adds	r2, r7, r2
   26628:	8812      	ldrh	r2, [r2, #0]
   2662a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   2662c:	230f      	movs	r3, #15
   2662e:	18fb      	adds	r3, r7, r3
   26630:	781b      	ldrb	r3, [r3, #0]
   26632:	b25b      	sxtb	r3, r3
   26634:	4a37      	ldr	r2, [pc, #220]	; (26714 <recv+0x178>)
   26636:	011b      	lsls	r3, r3, #4
   26638:	18d3      	adds	r3, r2, r3
   2663a:	330c      	adds	r3, #12
   2663c:	781b      	ldrb	r3, [r3, #0]
   2663e:	b2db      	uxtb	r3, r3
   26640:	2b00      	cmp	r3, #0
   26642:	d15e      	bne.n	26702 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26644:	231d      	movs	r3, #29
   26646:	18fb      	adds	r3, r7, r3
   26648:	2246      	movs	r2, #70	; 0x46
   2664a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   2664c:	230f      	movs	r3, #15
   2664e:	18fb      	adds	r3, r7, r3
   26650:	781b      	ldrb	r3, [r3, #0]
   26652:	b25b      	sxtb	r3, r3
   26654:	4a2f      	ldr	r2, [pc, #188]	; (26714 <recv+0x178>)
   26656:	011b      	lsls	r3, r3, #4
   26658:	18d3      	adds	r3, r2, r3
   2665a:	330c      	adds	r3, #12
   2665c:	2201      	movs	r2, #1
   2665e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26660:	230f      	movs	r3, #15
   26662:	18fb      	adds	r3, r7, r3
   26664:	781b      	ldrb	r3, [r3, #0]
   26666:	b25b      	sxtb	r3, r3
   26668:	4a2a      	ldr	r2, [pc, #168]	; (26714 <recv+0x178>)
   2666a:	011b      	lsls	r3, r3, #4
   2666c:	18d3      	adds	r3, r2, r3
   2666e:	330b      	adds	r3, #11
   26670:	781b      	ldrb	r3, [r3, #0]
   26672:	b2db      	uxtb	r3, r3
   26674:	001a      	movs	r2, r3
   26676:	2301      	movs	r3, #1
   26678:	4013      	ands	r3, r2
   2667a:	d003      	beq.n	26684 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2667c:	231d      	movs	r3, #29
   2667e:	18fb      	adds	r3, r7, r3
   26680:	224d      	movs	r2, #77	; 0x4d
   26682:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26684:	687b      	ldr	r3, [r7, #4]
   26686:	2b00      	cmp	r3, #0
   26688:	d105      	bne.n	26696 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2668a:	2314      	movs	r3, #20
   2668c:	18fb      	adds	r3, r7, r3
   2668e:	2201      	movs	r2, #1
   26690:	4252      	negs	r2, r2
   26692:	601a      	str	r2, [r3, #0]
   26694:	e003      	b.n	2669e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26696:	2314      	movs	r3, #20
   26698:	18fb      	adds	r3, r7, r3
   2669a:	687a      	ldr	r2, [r7, #4]
   2669c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2669e:	2314      	movs	r3, #20
   266a0:	18fb      	adds	r3, r7, r3
   266a2:	220f      	movs	r2, #15
   266a4:	18ba      	adds	r2, r7, r2
   266a6:	7812      	ldrb	r2, [r2, #0]
   266a8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   266aa:	230f      	movs	r3, #15
   266ac:	18fb      	adds	r3, r7, r3
   266ae:	781b      	ldrb	r3, [r3, #0]
   266b0:	b25b      	sxtb	r3, r3
   266b2:	4a18      	ldr	r2, [pc, #96]	; (26714 <recv+0x178>)
   266b4:	011b      	lsls	r3, r3, #4
   266b6:	18d3      	adds	r3, r2, r3
   266b8:	3306      	adds	r3, #6
   266ba:	881b      	ldrh	r3, [r3, #0]
   266bc:	b29a      	uxth	r2, r3
   266be:	2314      	movs	r3, #20
   266c0:	18fb      	adds	r3, r7, r3
   266c2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   266c4:	2314      	movs	r3, #20
   266c6:	18fa      	adds	r2, r7, r3
   266c8:	231d      	movs	r3, #29
   266ca:	18fb      	adds	r3, r7, r3
   266cc:	7819      	ldrb	r1, [r3, #0]
   266ce:	2300      	movs	r3, #0
   266d0:	9302      	str	r3, [sp, #8]
   266d2:	2300      	movs	r3, #0
   266d4:	9301      	str	r3, [sp, #4]
   266d6:	2300      	movs	r3, #0
   266d8:	9300      	str	r3, [sp, #0]
   266da:	2308      	movs	r3, #8
   266dc:	2002      	movs	r0, #2
   266de:	4c0e      	ldr	r4, [pc, #56]	; (26718 <recv+0x17c>)
   266e0:	47a0      	blx	r4
   266e2:	0003      	movs	r3, r0
   266e4:	001a      	movs	r2, r3
   266e6:	231e      	movs	r3, #30
   266e8:	18fb      	adds	r3, r7, r3
   266ea:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   266ec:	231e      	movs	r3, #30
   266ee:	18fb      	adds	r3, r7, r3
   266f0:	2200      	movs	r2, #0
   266f2:	5e9b      	ldrsh	r3, [r3, r2]
   266f4:	2b00      	cmp	r3, #0
   266f6:	d004      	beq.n	26702 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   266f8:	231e      	movs	r3, #30
   266fa:	18fb      	adds	r3, r7, r3
   266fc:	220e      	movs	r2, #14
   266fe:	4252      	negs	r2, r2
   26700:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26702:	231e      	movs	r3, #30
   26704:	18fb      	adds	r3, r7, r3
   26706:	2200      	movs	r2, #0
   26708:	5e9b      	ldrsh	r3, [r3, r2]
}
   2670a:	0018      	movs	r0, r3
   2670c:	46bd      	mov	sp, r7
   2670e:	b009      	add	sp, #36	; 0x24
   26710:	bd90      	pop	{r4, r7, pc}
   26712:	46c0      	nop			; (mov r8, r8)
   26714:	20005b5c 	.word	0x20005b5c
   26718:	000219e1 	.word	0x000219e1

0002671c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   2671c:	b5b0      	push	{r4, r5, r7, lr}
   2671e:	b088      	sub	sp, #32
   26720:	af04      	add	r7, sp, #16
   26722:	0002      	movs	r2, r0
   26724:	1dfb      	adds	r3, r7, #7
   26726:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26728:	230f      	movs	r3, #15
   2672a:	18fb      	adds	r3, r7, r3
   2672c:	22fa      	movs	r2, #250	; 0xfa
   2672e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26730:	4b43      	ldr	r3, [pc, #268]	; (26840 <close+0x124>)
   26732:	0018      	movs	r0, r3
   26734:	4b43      	ldr	r3, [pc, #268]	; (26844 <close+0x128>)
   26736:	4798      	blx	r3
   26738:	1dfb      	adds	r3, r7, #7
   2673a:	2200      	movs	r2, #0
   2673c:	569a      	ldrsb	r2, [r3, r2]
   2673e:	4b42      	ldr	r3, [pc, #264]	; (26848 <close+0x12c>)
   26740:	0011      	movs	r1, r2
   26742:	0018      	movs	r0, r3
   26744:	4b3f      	ldr	r3, [pc, #252]	; (26844 <close+0x128>)
   26746:	4798      	blx	r3
   26748:	4b40      	ldr	r3, [pc, #256]	; (2684c <close+0x130>)
   2674a:	0018      	movs	r0, r3
   2674c:	4b3d      	ldr	r3, [pc, #244]	; (26844 <close+0x128>)
   2674e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26750:	1dfb      	adds	r3, r7, #7
   26752:	781b      	ldrb	r3, [r3, #0]
   26754:	2b7f      	cmp	r3, #127	; 0x7f
   26756:	d86a      	bhi.n	2682e <close+0x112>
   26758:	1dfb      	adds	r3, r7, #7
   2675a:	781b      	ldrb	r3, [r3, #0]
   2675c:	b25b      	sxtb	r3, r3
   2675e:	4a3c      	ldr	r2, [pc, #240]	; (26850 <close+0x134>)
   26760:	011b      	lsls	r3, r3, #4
   26762:	18d3      	adds	r3, r2, r3
   26764:	330a      	adds	r3, #10
   26766:	781b      	ldrb	r3, [r3, #0]
   26768:	b2db      	uxtb	r3, r3
   2676a:	2b01      	cmp	r3, #1
   2676c:	d15f      	bne.n	2682e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2676e:	230e      	movs	r3, #14
   26770:	18fb      	adds	r3, r7, r3
   26772:	2249      	movs	r2, #73	; 0x49
   26774:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26776:	2308      	movs	r3, #8
   26778:	18fb      	adds	r3, r7, r3
   2677a:	1dfa      	adds	r2, r7, #7
   2677c:	7812      	ldrb	r2, [r2, #0]
   2677e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26780:	1dfb      	adds	r3, r7, #7
   26782:	781b      	ldrb	r3, [r3, #0]
   26784:	b25b      	sxtb	r3, r3
   26786:	4a32      	ldr	r2, [pc, #200]	; (26850 <close+0x134>)
   26788:	011b      	lsls	r3, r3, #4
   2678a:	18d3      	adds	r3, r2, r3
   2678c:	3306      	adds	r3, #6
   2678e:	881b      	ldrh	r3, [r3, #0]
   26790:	b29a      	uxth	r2, r3
   26792:	2308      	movs	r3, #8
   26794:	18fb      	adds	r3, r7, r3
   26796:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26798:	1dfb      	adds	r3, r7, #7
   2679a:	781b      	ldrb	r3, [r3, #0]
   2679c:	b25b      	sxtb	r3, r3
   2679e:	4a2c      	ldr	r2, [pc, #176]	; (26850 <close+0x134>)
   267a0:	011b      	lsls	r3, r3, #4
   267a2:	18d3      	adds	r3, r2, r3
   267a4:	330a      	adds	r3, #10
   267a6:	2200      	movs	r2, #0
   267a8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   267aa:	1dfb      	adds	r3, r7, #7
   267ac:	781b      	ldrb	r3, [r3, #0]
   267ae:	b25b      	sxtb	r3, r3
   267b0:	4a27      	ldr	r2, [pc, #156]	; (26850 <close+0x134>)
   267b2:	011b      	lsls	r3, r3, #4
   267b4:	18d3      	adds	r3, r2, r3
   267b6:	3306      	adds	r3, #6
   267b8:	2200      	movs	r2, #0
   267ba:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   267bc:	1dfb      	adds	r3, r7, #7
   267be:	781b      	ldrb	r3, [r3, #0]
   267c0:	b25b      	sxtb	r3, r3
   267c2:	4a23      	ldr	r2, [pc, #140]	; (26850 <close+0x134>)
   267c4:	011b      	lsls	r3, r3, #4
   267c6:	18d3      	adds	r3, r2, r3
   267c8:	330b      	adds	r3, #11
   267ca:	781b      	ldrb	r3, [r3, #0]
   267cc:	b2db      	uxtb	r3, r3
   267ce:	001a      	movs	r2, r3
   267d0:	2301      	movs	r3, #1
   267d2:	4013      	ands	r3, r2
   267d4:	d003      	beq.n	267de <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   267d6:	230e      	movs	r3, #14
   267d8:	18fb      	adds	r3, r7, r3
   267da:	224e      	movs	r2, #78	; 0x4e
   267dc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   267de:	230f      	movs	r3, #15
   267e0:	18fc      	adds	r4, r7, r3
   267e2:	2308      	movs	r3, #8
   267e4:	18fa      	adds	r2, r7, r3
   267e6:	230e      	movs	r3, #14
   267e8:	18fb      	adds	r3, r7, r3
   267ea:	7819      	ldrb	r1, [r3, #0]
   267ec:	2300      	movs	r3, #0
   267ee:	9302      	str	r3, [sp, #8]
   267f0:	2300      	movs	r3, #0
   267f2:	9301      	str	r3, [sp, #4]
   267f4:	2300      	movs	r3, #0
   267f6:	9300      	str	r3, [sp, #0]
   267f8:	2304      	movs	r3, #4
   267fa:	2002      	movs	r0, #2
   267fc:	4d15      	ldr	r5, [pc, #84]	; (26854 <close+0x138>)
   267fe:	47a8      	blx	r5
   26800:	0003      	movs	r3, r0
   26802:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26804:	230f      	movs	r3, #15
   26806:	18fb      	adds	r3, r7, r3
   26808:	781b      	ldrb	r3, [r3, #0]
   2680a:	b25b      	sxtb	r3, r3
   2680c:	2b00      	cmp	r3, #0
   2680e:	d003      	beq.n	26818 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26810:	230f      	movs	r3, #15
   26812:	18fb      	adds	r3, r7, r3
   26814:	22f7      	movs	r2, #247	; 0xf7
   26816:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26818:	1dfb      	adds	r3, r7, #7
   2681a:	781b      	ldrb	r3, [r3, #0]
   2681c:	b25b      	sxtb	r3, r3
   2681e:	011a      	lsls	r2, r3, #4
   26820:	4b0b      	ldr	r3, [pc, #44]	; (26850 <close+0x134>)
   26822:	18d3      	adds	r3, r2, r3
   26824:	2210      	movs	r2, #16
   26826:	2100      	movs	r1, #0
   26828:	0018      	movs	r0, r3
   2682a:	4b0b      	ldr	r3, [pc, #44]	; (26858 <close+0x13c>)
   2682c:	4798      	blx	r3
	}
	return s8Ret;
   2682e:	230f      	movs	r3, #15
   26830:	18fb      	adds	r3, r7, r3
   26832:	781b      	ldrb	r3, [r3, #0]
   26834:	b25b      	sxtb	r3, r3
}
   26836:	0018      	movs	r0, r3
   26838:	46bd      	mov	sp, r7
   2683a:	b004      	add	sp, #16
   2683c:	bdb0      	pop	{r4, r5, r7, pc}
   2683e:	46c0      	nop			; (mov r8, r8)
   26840:	0003ae40 	.word	0x0003ae40
   26844:	0001e9e9 	.word	0x0001e9e9
   26848:	0003ae80 	.word	0x0003ae80
   2684c:	0003ae60 	.word	0x0003ae60
   26850:	20005b5c 	.word	0x20005b5c
   26854:	000219e1 	.word	0x000219e1
   26858:	00021781 	.word	0x00021781

0002685c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2685c:	b580      	push	{r7, lr}
   2685e:	b086      	sub	sp, #24
   26860:	af00      	add	r7, sp, #0
   26862:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26864:	2300      	movs	r3, #0
   26866:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26868:	2317      	movs	r3, #23
   2686a:	18fb      	adds	r3, r7, r3
   2686c:	2200      	movs	r2, #0
   2686e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26870:	2316      	movs	r3, #22
   26872:	18fb      	adds	r3, r7, r3
   26874:	2200      	movs	r2, #0
   26876:	701a      	strb	r2, [r3, #0]
   26878:	e060      	b.n	2693c <nmi_inet_addr+0xe0>
	{
		j = 0;
   2687a:	2315      	movs	r3, #21
   2687c:	18fb      	adds	r3, r7, r3
   2687e:	2200      	movs	r2, #0
   26880:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26882:	2314      	movs	r3, #20
   26884:	18fb      	adds	r3, r7, r3
   26886:	687a      	ldr	r2, [r7, #4]
   26888:	7812      	ldrb	r2, [r2, #0]
   2688a:	701a      	strb	r2, [r3, #0]
			++j;
   2688c:	2315      	movs	r3, #21
   2688e:	18fb      	adds	r3, r7, r3
   26890:	2215      	movs	r2, #21
   26892:	18ba      	adds	r2, r7, r2
   26894:	7812      	ldrb	r2, [r2, #0]
   26896:	3201      	adds	r2, #1
   26898:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2689a:	2315      	movs	r3, #21
   2689c:	18fb      	adds	r3, r7, r3
   2689e:	781b      	ldrb	r3, [r3, #0]
   268a0:	2b04      	cmp	r3, #4
   268a2:	d901      	bls.n	268a8 <nmi_inet_addr+0x4c>
			{
				return 0;
   268a4:	2300      	movs	r3, #0
   268a6:	e057      	b.n	26958 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   268a8:	2314      	movs	r3, #20
   268aa:	18fb      	adds	r3, r7, r3
   268ac:	781b      	ldrb	r3, [r3, #0]
   268ae:	2b2e      	cmp	r3, #46	; 0x2e
   268b0:	d004      	beq.n	268bc <nmi_inet_addr+0x60>
   268b2:	2314      	movs	r3, #20
   268b4:	18fb      	adds	r3, r7, r3
   268b6:	781b      	ldrb	r3, [r3, #0]
   268b8:	2b00      	cmp	r3, #0
   268ba:	d10d      	bne.n	268d8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   268bc:	2316      	movs	r3, #22
   268be:	18fb      	adds	r3, r7, r3
   268c0:	781b      	ldrb	r3, [r3, #0]
   268c2:	220c      	movs	r2, #12
   268c4:	18ba      	adds	r2, r7, r2
   268c6:	2117      	movs	r1, #23
   268c8:	1879      	adds	r1, r7, r1
   268ca:	7809      	ldrb	r1, [r1, #0]
   268cc:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   268ce:	2317      	movs	r3, #23
   268d0:	18fb      	adds	r3, r7, r3
   268d2:	2200      	movs	r2, #0
   268d4:	701a      	strb	r2, [r3, #0]
   268d6:	e01d      	b.n	26914 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   268d8:	2314      	movs	r3, #20
   268da:	18fb      	adds	r3, r7, r3
   268dc:	781b      	ldrb	r3, [r3, #0]
   268de:	2b2f      	cmp	r3, #47	; 0x2f
   268e0:	d916      	bls.n	26910 <nmi_inet_addr+0xb4>
   268e2:	2314      	movs	r3, #20
   268e4:	18fb      	adds	r3, r7, r3
   268e6:	781b      	ldrb	r3, [r3, #0]
   268e8:	2b39      	cmp	r3, #57	; 0x39
   268ea:	d811      	bhi.n	26910 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   268ec:	2317      	movs	r3, #23
   268ee:	18fb      	adds	r3, r7, r3
   268f0:	781b      	ldrb	r3, [r3, #0]
   268f2:	1c1a      	adds	r2, r3, #0
   268f4:	0092      	lsls	r2, r2, #2
   268f6:	18d3      	adds	r3, r2, r3
   268f8:	18db      	adds	r3, r3, r3
   268fa:	b2da      	uxtb	r2, r3
   268fc:	2314      	movs	r3, #20
   268fe:	18fb      	adds	r3, r7, r3
   26900:	781b      	ldrb	r3, [r3, #0]
   26902:	18d3      	adds	r3, r2, r3
   26904:	b2da      	uxtb	r2, r3
   26906:	2317      	movs	r3, #23
   26908:	18fb      	adds	r3, r7, r3
   2690a:	3a30      	subs	r2, #48	; 0x30
   2690c:	701a      	strb	r2, [r3, #0]
   2690e:	e001      	b.n	26914 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26910:	2300      	movs	r3, #0
   26912:	e021      	b.n	26958 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26914:	687b      	ldr	r3, [r7, #4]
   26916:	3301      	adds	r3, #1
   26918:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2691a:	2314      	movs	r3, #20
   2691c:	18fb      	adds	r3, r7, r3
   2691e:	781b      	ldrb	r3, [r3, #0]
   26920:	2b2e      	cmp	r3, #46	; 0x2e
   26922:	d004      	beq.n	2692e <nmi_inet_addr+0xd2>
   26924:	2314      	movs	r3, #20
   26926:	18fb      	adds	r3, r7, r3
   26928:	781b      	ldrb	r3, [r3, #0]
   2692a:	2b00      	cmp	r3, #0
   2692c:	d1a9      	bne.n	26882 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2692e:	2316      	movs	r3, #22
   26930:	18fb      	adds	r3, r7, r3
   26932:	2216      	movs	r2, #22
   26934:	18ba      	adds	r2, r7, r2
   26936:	7812      	ldrb	r2, [r2, #0]
   26938:	3201      	adds	r2, #1
   2693a:	701a      	strb	r2, [r3, #0]
   2693c:	2316      	movs	r3, #22
   2693e:	18fb      	adds	r3, r7, r3
   26940:	781b      	ldrb	r3, [r3, #0]
   26942:	2b03      	cmp	r3, #3
   26944:	d999      	bls.n	2687a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26946:	230c      	movs	r3, #12
   26948:	18f9      	adds	r1, r7, r3
   2694a:	2310      	movs	r3, #16
   2694c:	18fb      	adds	r3, r7, r3
   2694e:	2204      	movs	r2, #4
   26950:	0018      	movs	r0, r3
   26952:	4b03      	ldr	r3, [pc, #12]	; (26960 <nmi_inet_addr+0x104>)
   26954:	4798      	blx	r3
	return u32IP;
   26956:	693b      	ldr	r3, [r7, #16]
}
   26958:	0018      	movs	r0, r3
   2695a:	46bd      	mov	sp, r7
   2695c:	b006      	add	sp, #24
   2695e:	bd80      	pop	{r7, pc}
   26960:	00021745 	.word	0x00021745

00026964 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26964:	b5b0      	push	{r4, r5, r7, lr}
   26966:	b088      	sub	sp, #32
   26968:	af04      	add	r7, sp, #16
   2696a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2696c:	230f      	movs	r3, #15
   2696e:	18fb      	adds	r3, r7, r3
   26970:	22fa      	movs	r2, #250	; 0xfa
   26972:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26974:	687b      	ldr	r3, [r7, #4]
   26976:	0018      	movs	r0, r3
   26978:	4b14      	ldr	r3, [pc, #80]	; (269cc <gethostbyname+0x68>)
   2697a:	4798      	blx	r3
   2697c:	0003      	movs	r3, r0
   2697e:	001a      	movs	r2, r3
   26980:	230e      	movs	r3, #14
   26982:	18fb      	adds	r3, r7, r3
   26984:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26986:	230e      	movs	r3, #14
   26988:	18fb      	adds	r3, r7, r3
   2698a:	781b      	ldrb	r3, [r3, #0]
   2698c:	2b40      	cmp	r3, #64	; 0x40
   2698e:	d815      	bhi.n	269bc <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26990:	230e      	movs	r3, #14
   26992:	18fb      	adds	r3, r7, r3
   26994:	781b      	ldrb	r3, [r3, #0]
   26996:	b29b      	uxth	r3, r3
   26998:	3301      	adds	r3, #1
   2699a:	b299      	uxth	r1, r3
   2699c:	230f      	movs	r3, #15
   2699e:	18fc      	adds	r4, r7, r3
   269a0:	687a      	ldr	r2, [r7, #4]
   269a2:	2300      	movs	r3, #0
   269a4:	9302      	str	r3, [sp, #8]
   269a6:	2300      	movs	r3, #0
   269a8:	9301      	str	r3, [sp, #4]
   269aa:	2300      	movs	r3, #0
   269ac:	9300      	str	r3, [sp, #0]
   269ae:	000b      	movs	r3, r1
   269b0:	214a      	movs	r1, #74	; 0x4a
   269b2:	2002      	movs	r0, #2
   269b4:	4d06      	ldr	r5, [pc, #24]	; (269d0 <gethostbyname+0x6c>)
   269b6:	47a8      	blx	r5
   269b8:	0003      	movs	r3, r0
   269ba:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   269bc:	230f      	movs	r3, #15
   269be:	18fb      	adds	r3, r7, r3
   269c0:	781b      	ldrb	r3, [r3, #0]
   269c2:	b25b      	sxtb	r3, r3
}
   269c4:	0018      	movs	r0, r3
   269c6:	46bd      	mov	sp, r7
   269c8:	b004      	add	sp, #16
   269ca:	bdb0      	pop	{r4, r5, r7, pc}
   269cc:	000217bf 	.word	0x000217bf
   269d0:	000219e1 	.word	0x000219e1

000269d4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   269d4:	b580      	push	{r7, lr}
   269d6:	b082      	sub	sp, #8
   269d8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   269da:	003b      	movs	r3, r7
   269dc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   269de:	687b      	ldr	r3, [r7, #4]
   269e0:	22b9      	movs	r2, #185	; 0xb9
   269e2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   269e4:	4b13      	ldr	r3, [pc, #76]	; (26a34 <spi_flash_enter_low_power_mode+0x60>)
   269e6:	2100      	movs	r1, #0
   269e8:	0018      	movs	r0, r3
   269ea:	4b13      	ldr	r3, [pc, #76]	; (26a38 <spi_flash_enter_low_power_mode+0x64>)
   269ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   269ee:	687b      	ldr	r3, [r7, #4]
   269f0:	781b      	ldrb	r3, [r3, #0]
   269f2:	001a      	movs	r2, r3
   269f4:	4b11      	ldr	r3, [pc, #68]	; (26a3c <spi_flash_enter_low_power_mode+0x68>)
   269f6:	0011      	movs	r1, r2
   269f8:	0018      	movs	r0, r3
   269fa:	4b0f      	ldr	r3, [pc, #60]	; (26a38 <spi_flash_enter_low_power_mode+0x64>)
   269fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   269fe:	4b10      	ldr	r3, [pc, #64]	; (26a40 <spi_flash_enter_low_power_mode+0x6c>)
   26a00:	2101      	movs	r1, #1
   26a02:	0018      	movs	r0, r3
   26a04:	4b0c      	ldr	r3, [pc, #48]	; (26a38 <spi_flash_enter_low_power_mode+0x64>)
   26a06:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26a08:	4b0e      	ldr	r3, [pc, #56]	; (26a44 <spi_flash_enter_low_power_mode+0x70>)
   26a0a:	2100      	movs	r1, #0
   26a0c:	0018      	movs	r0, r3
   26a0e:	4b0a      	ldr	r3, [pc, #40]	; (26a38 <spi_flash_enter_low_power_mode+0x64>)
   26a10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26a12:	4b0d      	ldr	r3, [pc, #52]	; (26a48 <spi_flash_enter_low_power_mode+0x74>)
   26a14:	2181      	movs	r1, #129	; 0x81
   26a16:	0018      	movs	r0, r3
   26a18:	4b07      	ldr	r3, [pc, #28]	; (26a38 <spi_flash_enter_low_power_mode+0x64>)
   26a1a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26a1c:	46c0      	nop			; (mov r8, r8)
   26a1e:	4b0b      	ldr	r3, [pc, #44]	; (26a4c <spi_flash_enter_low_power_mode+0x78>)
   26a20:	0018      	movs	r0, r3
   26a22:	4b0b      	ldr	r3, [pc, #44]	; (26a50 <spi_flash_enter_low_power_mode+0x7c>)
   26a24:	4798      	blx	r3
   26a26:	0003      	movs	r3, r0
   26a28:	2b01      	cmp	r3, #1
   26a2a:	d1f8      	bne.n	26a1e <spi_flash_enter_low_power_mode+0x4a>
}
   26a2c:	46c0      	nop			; (mov r8, r8)
   26a2e:	46bd      	mov	sp, r7
   26a30:	b002      	add	sp, #8
   26a32:	bd80      	pop	{r7, pc}
   26a34:	00010208 	.word	0x00010208
   26a38:	00023835 	.word	0x00023835
   26a3c:	0001020c 	.word	0x0001020c
   26a40:	00010214 	.word	0x00010214
   26a44:	0001021c 	.word	0x0001021c
   26a48:	00010204 	.word	0x00010204
   26a4c:	00010218 	.word	0x00010218
   26a50:	000237f1 	.word	0x000237f1

00026a54 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26a54:	b580      	push	{r7, lr}
   26a56:	b082      	sub	sp, #8
   26a58:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26a5a:	003b      	movs	r3, r7
   26a5c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26a5e:	687b      	ldr	r3, [r7, #4]
   26a60:	22ab      	movs	r2, #171	; 0xab
   26a62:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26a64:	4b13      	ldr	r3, [pc, #76]	; (26ab4 <spi_flash_leave_low_power_mode+0x60>)
   26a66:	2100      	movs	r1, #0
   26a68:	0018      	movs	r0, r3
   26a6a:	4b13      	ldr	r3, [pc, #76]	; (26ab8 <spi_flash_leave_low_power_mode+0x64>)
   26a6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26a6e:	687b      	ldr	r3, [r7, #4]
   26a70:	781b      	ldrb	r3, [r3, #0]
   26a72:	001a      	movs	r2, r3
   26a74:	4b11      	ldr	r3, [pc, #68]	; (26abc <spi_flash_leave_low_power_mode+0x68>)
   26a76:	0011      	movs	r1, r2
   26a78:	0018      	movs	r0, r3
   26a7a:	4b0f      	ldr	r3, [pc, #60]	; (26ab8 <spi_flash_leave_low_power_mode+0x64>)
   26a7c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26a7e:	4b10      	ldr	r3, [pc, #64]	; (26ac0 <spi_flash_leave_low_power_mode+0x6c>)
   26a80:	2101      	movs	r1, #1
   26a82:	0018      	movs	r0, r3
   26a84:	4b0c      	ldr	r3, [pc, #48]	; (26ab8 <spi_flash_leave_low_power_mode+0x64>)
   26a86:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26a88:	4b0e      	ldr	r3, [pc, #56]	; (26ac4 <spi_flash_leave_low_power_mode+0x70>)
   26a8a:	2100      	movs	r1, #0
   26a8c:	0018      	movs	r0, r3
   26a8e:	4b0a      	ldr	r3, [pc, #40]	; (26ab8 <spi_flash_leave_low_power_mode+0x64>)
   26a90:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26a92:	4b0d      	ldr	r3, [pc, #52]	; (26ac8 <spi_flash_leave_low_power_mode+0x74>)
   26a94:	2181      	movs	r1, #129	; 0x81
   26a96:	0018      	movs	r0, r3
   26a98:	4b07      	ldr	r3, [pc, #28]	; (26ab8 <spi_flash_leave_low_power_mode+0x64>)
   26a9a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26a9c:	46c0      	nop			; (mov r8, r8)
   26a9e:	4b0b      	ldr	r3, [pc, #44]	; (26acc <spi_flash_leave_low_power_mode+0x78>)
   26aa0:	0018      	movs	r0, r3
   26aa2:	4b0b      	ldr	r3, [pc, #44]	; (26ad0 <spi_flash_leave_low_power_mode+0x7c>)
   26aa4:	4798      	blx	r3
   26aa6:	0003      	movs	r3, r0
   26aa8:	2b01      	cmp	r3, #1
   26aaa:	d1f8      	bne.n	26a9e <spi_flash_leave_low_power_mode+0x4a>
}
   26aac:	46c0      	nop			; (mov r8, r8)
   26aae:	46bd      	mov	sp, r7
   26ab0:	b002      	add	sp, #8
   26ab2:	bd80      	pop	{r7, pc}
   26ab4:	00010208 	.word	0x00010208
   26ab8:	00023835 	.word	0x00023835
   26abc:	0001020c 	.word	0x0001020c
   26ac0:	00010214 	.word	0x00010214
   26ac4:	0001021c 	.word	0x0001021c
   26ac8:	00010204 	.word	0x00010204
   26acc:	00010218 	.word	0x00010218
   26ad0:	000237f1 	.word	0x000237f1

00026ad4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26ad4:	b590      	push	{r4, r7, lr}
   26ad6:	b085      	sub	sp, #20
   26ad8:	af00      	add	r7, sp, #0
   26ada:	0002      	movs	r2, r0
   26adc:	1dfb      	adds	r3, r7, #7
   26ade:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26ae0:	230f      	movs	r3, #15
   26ae2:	18fb      	adds	r3, r7, r3
   26ae4:	2200      	movs	r2, #0
   26ae6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26ae8:	4b24      	ldr	r3, [pc, #144]	; (26b7c <spi_flash_enable+0xa8>)
   26aea:	4798      	blx	r3
   26aec:	0003      	movs	r3, r0
   26aee:	051b      	lsls	r3, r3, #20
   26af0:	0d1b      	lsrs	r3, r3, #20
   26af2:	4a23      	ldr	r2, [pc, #140]	; (26b80 <spi_flash_enable+0xac>)
   26af4:	4293      	cmp	r3, r2
   26af6:	d938      	bls.n	26b6a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26af8:	230f      	movs	r3, #15
   26afa:	18fc      	adds	r4, r7, r3
   26afc:	2308      	movs	r3, #8
   26afe:	18fb      	adds	r3, r7, r3
   26b00:	4a20      	ldr	r2, [pc, #128]	; (26b84 <spi_flash_enable+0xb0>)
   26b02:	0019      	movs	r1, r3
   26b04:	0010      	movs	r0, r2
   26b06:	4b20      	ldr	r3, [pc, #128]	; (26b88 <spi_flash_enable+0xb4>)
   26b08:	4798      	blx	r3
   26b0a:	0003      	movs	r3, r0
   26b0c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26b0e:	230f      	movs	r3, #15
   26b10:	18fb      	adds	r3, r7, r3
   26b12:	781b      	ldrb	r3, [r3, #0]
   26b14:	b25b      	sxtb	r3, r3
   26b16:	2b00      	cmp	r3, #0
   26b18:	d126      	bne.n	26b68 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26b1a:	68bb      	ldr	r3, [r7, #8]
   26b1c:	4a1b      	ldr	r2, [pc, #108]	; (26b8c <spi_flash_enable+0xb8>)
   26b1e:	4013      	ands	r3, r2
   26b20:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26b22:	68bb      	ldr	r3, [r7, #8]
   26b24:	4a1a      	ldr	r2, [pc, #104]	; (26b90 <spi_flash_enable+0xbc>)
   26b26:	4313      	orrs	r3, r2
   26b28:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26b2a:	68bb      	ldr	r3, [r7, #8]
   26b2c:	4a15      	ldr	r2, [pc, #84]	; (26b84 <spi_flash_enable+0xb0>)
   26b2e:	0019      	movs	r1, r3
   26b30:	0010      	movs	r0, r2
   26b32:	4b18      	ldr	r3, [pc, #96]	; (26b94 <spi_flash_enable+0xc0>)
   26b34:	4798      	blx	r3
		if(enable) {
   26b36:	1dfb      	adds	r3, r7, #7
   26b38:	781b      	ldrb	r3, [r3, #0]
   26b3a:	2b00      	cmp	r3, #0
   26b3c:	d002      	beq.n	26b44 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26b3e:	4b16      	ldr	r3, [pc, #88]	; (26b98 <spi_flash_enable+0xc4>)
   26b40:	4798      	blx	r3
   26b42:	e001      	b.n	26b48 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26b44:	4b15      	ldr	r3, [pc, #84]	; (26b9c <spi_flash_enable+0xc8>)
   26b46:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26b48:	68bb      	ldr	r3, [r7, #8]
   26b4a:	4a10      	ldr	r2, [pc, #64]	; (26b8c <spi_flash_enable+0xb8>)
   26b4c:	4013      	ands	r3, r2
   26b4e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26b50:	68bb      	ldr	r3, [r7, #8]
   26b52:	2280      	movs	r2, #128	; 0x80
   26b54:	0252      	lsls	r2, r2, #9
   26b56:	4313      	orrs	r3, r2
   26b58:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26b5a:	68bb      	ldr	r3, [r7, #8]
   26b5c:	4a09      	ldr	r2, [pc, #36]	; (26b84 <spi_flash_enable+0xb0>)
   26b5e:	0019      	movs	r1, r3
   26b60:	0010      	movs	r0, r2
   26b62:	4b0c      	ldr	r3, [pc, #48]	; (26b94 <spi_flash_enable+0xc0>)
   26b64:	4798      	blx	r3
   26b66:	e000      	b.n	26b6a <spi_flash_enable+0x96>
			goto ERR1;
   26b68:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26b6a:	230f      	movs	r3, #15
   26b6c:	18fb      	adds	r3, r7, r3
   26b6e:	781b      	ldrb	r3, [r3, #0]
   26b70:	b25b      	sxtb	r3, r3
}
   26b72:	0018      	movs	r0, r3
   26b74:	46bd      	mov	sp, r7
   26b76:	b005      	add	sp, #20
   26b78:	bd90      	pop	{r4, r7, pc}
   26b7a:	46c0      	nop			; (mov r8, r8)
   26b7c:	00023111 	.word	0x00023111
   26b80:	0000039f 	.word	0x0000039f
   26b84:	00001410 	.word	0x00001410
   26b88:	00023811 	.word	0x00023811
   26b8c:	f8888fff 	.word	0xf8888fff
   26b90:	01111000 	.word	0x01111000
   26b94:	00023835 	.word	0x00023835
   26b98:	00026a55 	.word	0x00026a55
   26b9c:	000269d5 	.word	0x000269d5

00026ba0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26ba0:	b580      	push	{r7, lr}
   26ba2:	b084      	sub	sp, #16
   26ba4:	af00      	add	r7, sp, #0
   26ba6:	0002      	movs	r2, r0
   26ba8:	1dfb      	adds	r3, r7, #7
   26baa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26bac:	1dfb      	adds	r3, r7, #7
   26bae:	781b      	ldrb	r3, [r3, #0]
   26bb0:	2b00      	cmp	r3, #0
   26bb2:	d108      	bne.n	26bc6 <mem_test_unit_ready+0x26>
   26bb4:	1dfb      	adds	r3, r7, #7
   26bb6:	781a      	ldrb	r2, [r3, #0]
   26bb8:	4b08      	ldr	r3, [pc, #32]	; (26bdc <mem_test_unit_ready+0x3c>)
   26bba:	0152      	lsls	r2, r2, #5
   26bbc:	58d3      	ldr	r3, [r2, r3]
   26bbe:	4798      	blx	r3
   26bc0:	0003      	movs	r3, r0
   26bc2:	001a      	movs	r2, r3
   26bc4:	e000      	b.n	26bc8 <mem_test_unit_ready+0x28>
   26bc6:	2201      	movs	r2, #1
  status =
   26bc8:	230f      	movs	r3, #15
   26bca:	18fb      	adds	r3, r7, r3
   26bcc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26bce:	230f      	movs	r3, #15
   26bd0:	18fb      	adds	r3, r7, r3
   26bd2:	781b      	ldrb	r3, [r3, #0]
}
   26bd4:	0018      	movs	r0, r3
   26bd6:	46bd      	mov	sp, r7
   26bd8:	b004      	add	sp, #16
   26bda:	bd80      	pop	{r7, pc}
   26bdc:	0003af0c 	.word	0x0003af0c

00026be0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26be0:	b580      	push	{r7, lr}
   26be2:	b084      	sub	sp, #16
   26be4:	af00      	add	r7, sp, #0
   26be6:	0002      	movs	r2, r0
   26be8:	6039      	str	r1, [r7, #0]
   26bea:	1dfb      	adds	r3, r7, #7
   26bec:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26bee:	1dfb      	adds	r3, r7, #7
   26bf0:	781b      	ldrb	r3, [r3, #0]
   26bf2:	2b00      	cmp	r3, #0
   26bf4:	d10c      	bne.n	26c10 <mem_read_capacity+0x30>
   26bf6:	1dfb      	adds	r3, r7, #7
   26bf8:	781b      	ldrb	r3, [r3, #0]
   26bfa:	4a0b      	ldr	r2, [pc, #44]	; (26c28 <mem_read_capacity+0x48>)
   26bfc:	015b      	lsls	r3, r3, #5
   26bfe:	18d3      	adds	r3, r2, r3
   26c00:	3304      	adds	r3, #4
   26c02:	681b      	ldr	r3, [r3, #0]
   26c04:	683a      	ldr	r2, [r7, #0]
   26c06:	0010      	movs	r0, r2
   26c08:	4798      	blx	r3
   26c0a:	0003      	movs	r3, r0
   26c0c:	001a      	movs	r2, r3
   26c0e:	e000      	b.n	26c12 <mem_read_capacity+0x32>
   26c10:	2201      	movs	r2, #1
  status =
   26c12:	230f      	movs	r3, #15
   26c14:	18fb      	adds	r3, r7, r3
   26c16:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26c18:	230f      	movs	r3, #15
   26c1a:	18fb      	adds	r3, r7, r3
   26c1c:	781b      	ldrb	r3, [r3, #0]
}
   26c1e:	0018      	movs	r0, r3
   26c20:	46bd      	mov	sp, r7
   26c22:	b004      	add	sp, #16
   26c24:	bd80      	pop	{r7, pc}
   26c26:	46c0      	nop			; (mov r8, r8)
   26c28:	0003af0c 	.word	0x0003af0c

00026c2c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26c2c:	b580      	push	{r7, lr}
   26c2e:	b084      	sub	sp, #16
   26c30:	af00      	add	r7, sp, #0
   26c32:	0002      	movs	r2, r0
   26c34:	1dfb      	adds	r3, r7, #7
   26c36:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26c38:	1dfb      	adds	r3, r7, #7
   26c3a:	781b      	ldrb	r3, [r3, #0]
   26c3c:	425a      	negs	r2, r3
   26c3e:	4153      	adcs	r3, r2
   26c40:	b2da      	uxtb	r2, r3
  sector_size =
   26c42:	230f      	movs	r3, #15
   26c44:	18fb      	adds	r3, r7, r3
   26c46:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26c48:	230f      	movs	r3, #15
   26c4a:	18fb      	adds	r3, r7, r3
   26c4c:	781b      	ldrb	r3, [r3, #0]
}
   26c4e:	0018      	movs	r0, r3
   26c50:	46bd      	mov	sp, r7
   26c52:	b004      	add	sp, #16
   26c54:	bd80      	pop	{r7, pc}
	...

00026c58 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26c58:	b580      	push	{r7, lr}
   26c5a:	b084      	sub	sp, #16
   26c5c:	af00      	add	r7, sp, #0
   26c5e:	0002      	movs	r2, r0
   26c60:	1dfb      	adds	r3, r7, #7
   26c62:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26c64:	1dfb      	adds	r3, r7, #7
   26c66:	781b      	ldrb	r3, [r3, #0]
   26c68:	2b00      	cmp	r3, #0
   26c6a:	d109      	bne.n	26c80 <mem_wr_protect+0x28>
   26c6c:	1dfb      	adds	r3, r7, #7
   26c6e:	781b      	ldrb	r3, [r3, #0]
   26c70:	4a0a      	ldr	r2, [pc, #40]	; (26c9c <mem_wr_protect+0x44>)
   26c72:	015b      	lsls	r3, r3, #5
   26c74:	18d3      	adds	r3, r2, r3
   26c76:	330c      	adds	r3, #12
   26c78:	681b      	ldr	r3, [r3, #0]
   26c7a:	4798      	blx	r3
   26c7c:	1e03      	subs	r3, r0, #0
   26c7e:	d001      	beq.n	26c84 <mem_wr_protect+0x2c>
   26c80:	2201      	movs	r2, #1
   26c82:	e000      	b.n	26c86 <mem_wr_protect+0x2e>
   26c84:	2200      	movs	r2, #0
  wr_protect =
   26c86:	230f      	movs	r3, #15
   26c88:	18fb      	adds	r3, r7, r3
   26c8a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26c8c:	230f      	movs	r3, #15
   26c8e:	18fb      	adds	r3, r7, r3
   26c90:	781b      	ldrb	r3, [r3, #0]
}
   26c92:	0018      	movs	r0, r3
   26c94:	46bd      	mov	sp, r7
   26c96:	b004      	add	sp, #16
   26c98:	bd80      	pop	{r7, pc}
   26c9a:	46c0      	nop			; (mov r8, r8)
   26c9c:	0003af0c 	.word	0x0003af0c

00026ca0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26ca0:	b580      	push	{r7, lr}
   26ca2:	b086      	sub	sp, #24
   26ca4:	af00      	add	r7, sp, #0
   26ca6:	60b9      	str	r1, [r7, #8]
   26ca8:	607a      	str	r2, [r7, #4]
   26caa:	230f      	movs	r3, #15
   26cac:	18fb      	adds	r3, r7, r3
   26cae:	1c02      	adds	r2, r0, #0
   26cb0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26cb2:	230f      	movs	r3, #15
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	781b      	ldrb	r3, [r3, #0]
   26cb8:	2b00      	cmp	r3, #0
   26cba:	d10e      	bne.n	26cda <memory_2_ram+0x3a>
   26cbc:	230f      	movs	r3, #15
   26cbe:	18fb      	adds	r3, r7, r3
   26cc0:	781b      	ldrb	r3, [r3, #0]
   26cc2:	4a0b      	ldr	r2, [pc, #44]	; (26cf0 <memory_2_ram+0x50>)
   26cc4:	015b      	lsls	r3, r3, #5
   26cc6:	18d3      	adds	r3, r2, r3
   26cc8:	3314      	adds	r3, #20
   26cca:	681b      	ldr	r3, [r3, #0]
   26ccc:	6879      	ldr	r1, [r7, #4]
   26cce:	68ba      	ldr	r2, [r7, #8]
   26cd0:	0010      	movs	r0, r2
   26cd2:	4798      	blx	r3
   26cd4:	0003      	movs	r3, r0
   26cd6:	001a      	movs	r2, r3
   26cd8:	e000      	b.n	26cdc <memory_2_ram+0x3c>
   26cda:	2201      	movs	r2, #1
  status =
   26cdc:	2317      	movs	r3, #23
   26cde:	18fb      	adds	r3, r7, r3
   26ce0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26ce2:	2317      	movs	r3, #23
   26ce4:	18fb      	adds	r3, r7, r3
   26ce6:	781b      	ldrb	r3, [r3, #0]
}
   26ce8:	0018      	movs	r0, r3
   26cea:	46bd      	mov	sp, r7
   26cec:	b006      	add	sp, #24
   26cee:	bd80      	pop	{r7, pc}
   26cf0:	0003af0c 	.word	0x0003af0c

00026cf4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26cf4:	b580      	push	{r7, lr}
   26cf6:	b086      	sub	sp, #24
   26cf8:	af00      	add	r7, sp, #0
   26cfa:	60b9      	str	r1, [r7, #8]
   26cfc:	607a      	str	r2, [r7, #4]
   26cfe:	230f      	movs	r3, #15
   26d00:	18fb      	adds	r3, r7, r3
   26d02:	1c02      	adds	r2, r0, #0
   26d04:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26d06:	230f      	movs	r3, #15
   26d08:	18fb      	adds	r3, r7, r3
   26d0a:	781b      	ldrb	r3, [r3, #0]
   26d0c:	2b00      	cmp	r3, #0
   26d0e:	d10e      	bne.n	26d2e <ram_2_memory+0x3a>
   26d10:	230f      	movs	r3, #15
   26d12:	18fb      	adds	r3, r7, r3
   26d14:	781b      	ldrb	r3, [r3, #0]
   26d16:	4a0b      	ldr	r2, [pc, #44]	; (26d44 <ram_2_memory+0x50>)
   26d18:	015b      	lsls	r3, r3, #5
   26d1a:	18d3      	adds	r3, r2, r3
   26d1c:	3318      	adds	r3, #24
   26d1e:	681b      	ldr	r3, [r3, #0]
   26d20:	6879      	ldr	r1, [r7, #4]
   26d22:	68ba      	ldr	r2, [r7, #8]
   26d24:	0010      	movs	r0, r2
   26d26:	4798      	blx	r3
   26d28:	0003      	movs	r3, r0
   26d2a:	001a      	movs	r2, r3
   26d2c:	e000      	b.n	26d30 <ram_2_memory+0x3c>
   26d2e:	2201      	movs	r2, #1
  status =
   26d30:	2317      	movs	r3, #23
   26d32:	18fb      	adds	r3, r7, r3
   26d34:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26d36:	2317      	movs	r3, #23
   26d38:	18fb      	adds	r3, r7, r3
   26d3a:	781b      	ldrb	r3, [r3, #0]
}
   26d3c:	0018      	movs	r0, r3
   26d3e:	46bd      	mov	sp, r7
   26d40:	b006      	add	sp, #24
   26d42:	bd80      	pop	{r7, pc}
   26d44:	0003af0c 	.word	0x0003af0c

00026d48 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26d48:	b580      	push	{r7, lr}
   26d4a:	b082      	sub	sp, #8
   26d4c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26d4e:	4b10      	ldr	r3, [pc, #64]	; (26d90 <cpu_irq_enter_critical+0x48>)
   26d50:	681b      	ldr	r3, [r3, #0]
   26d52:	2b00      	cmp	r3, #0
   26d54:	d112      	bne.n	26d7c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26d56:	f3ef 8310 	mrs	r3, PRIMASK
   26d5a:	607b      	str	r3, [r7, #4]
  return(result);
   26d5c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26d5e:	2b00      	cmp	r3, #0
   26d60:	d109      	bne.n	26d76 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26d62:	b672      	cpsid	i
   26d64:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26d68:	4b0a      	ldr	r3, [pc, #40]	; (26d94 <cpu_irq_enter_critical+0x4c>)
   26d6a:	2200      	movs	r2, #0
   26d6c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26d6e:	4b0a      	ldr	r3, [pc, #40]	; (26d98 <cpu_irq_enter_critical+0x50>)
   26d70:	2201      	movs	r2, #1
   26d72:	701a      	strb	r2, [r3, #0]
   26d74:	e002      	b.n	26d7c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26d76:	4b08      	ldr	r3, [pc, #32]	; (26d98 <cpu_irq_enter_critical+0x50>)
   26d78:	2200      	movs	r2, #0
   26d7a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26d7c:	4b04      	ldr	r3, [pc, #16]	; (26d90 <cpu_irq_enter_critical+0x48>)
   26d7e:	681b      	ldr	r3, [r3, #0]
   26d80:	1c5a      	adds	r2, r3, #1
   26d82:	4b03      	ldr	r3, [pc, #12]	; (26d90 <cpu_irq_enter_critical+0x48>)
   26d84:	601a      	str	r2, [r3, #0]
}
   26d86:	46c0      	nop			; (mov r8, r8)
   26d88:	46bd      	mov	sp, r7
   26d8a:	b002      	add	sp, #8
   26d8c:	bd80      	pop	{r7, pc}
   26d8e:	46c0      	nop			; (mov r8, r8)
   26d90:	200042b0 	.word	0x200042b0
   26d94:	20000126 	.word	0x20000126
   26d98:	200042b4 	.word	0x200042b4

00026d9c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26d9c:	b580      	push	{r7, lr}
   26d9e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26da0:	4b0b      	ldr	r3, [pc, #44]	; (26dd0 <cpu_irq_leave_critical+0x34>)
   26da2:	681b      	ldr	r3, [r3, #0]
   26da4:	1e5a      	subs	r2, r3, #1
   26da6:	4b0a      	ldr	r3, [pc, #40]	; (26dd0 <cpu_irq_leave_critical+0x34>)
   26da8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26daa:	4b09      	ldr	r3, [pc, #36]	; (26dd0 <cpu_irq_leave_critical+0x34>)
   26dac:	681b      	ldr	r3, [r3, #0]
   26dae:	2b00      	cmp	r3, #0
   26db0:	d10a      	bne.n	26dc8 <cpu_irq_leave_critical+0x2c>
   26db2:	4b08      	ldr	r3, [pc, #32]	; (26dd4 <cpu_irq_leave_critical+0x38>)
   26db4:	781b      	ldrb	r3, [r3, #0]
   26db6:	b2db      	uxtb	r3, r3
   26db8:	2b00      	cmp	r3, #0
   26dba:	d005      	beq.n	26dc8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26dbc:	4b06      	ldr	r3, [pc, #24]	; (26dd8 <cpu_irq_leave_critical+0x3c>)
   26dbe:	2201      	movs	r2, #1
   26dc0:	701a      	strb	r2, [r3, #0]
   26dc2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26dc6:	b662      	cpsie	i
	}
}
   26dc8:	46c0      	nop			; (mov r8, r8)
   26dca:	46bd      	mov	sp, r7
   26dcc:	bd80      	pop	{r7, pc}
   26dce:	46c0      	nop			; (mov r8, r8)
   26dd0:	200042b0 	.word	0x200042b0
   26dd4:	200042b4 	.word	0x200042b4
   26dd8:	20000126 	.word	0x20000126

00026ddc <system_pinmux_get_group_from_gpio_pin>:
{
   26ddc:	b580      	push	{r7, lr}
   26dde:	b084      	sub	sp, #16
   26de0:	af00      	add	r7, sp, #0
   26de2:	0002      	movs	r2, r0
   26de4:	1dfb      	adds	r3, r7, #7
   26de6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26de8:	230f      	movs	r3, #15
   26dea:	18fb      	adds	r3, r7, r3
   26dec:	1dfa      	adds	r2, r7, #7
   26dee:	7812      	ldrb	r2, [r2, #0]
   26df0:	09d2      	lsrs	r2, r2, #7
   26df2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26df4:	230e      	movs	r3, #14
   26df6:	18fb      	adds	r3, r7, r3
   26df8:	1dfa      	adds	r2, r7, #7
   26dfa:	7812      	ldrb	r2, [r2, #0]
   26dfc:	0952      	lsrs	r2, r2, #5
   26dfe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26e00:	4b0d      	ldr	r3, [pc, #52]	; (26e38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26e02:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26e04:	230f      	movs	r3, #15
   26e06:	18fb      	adds	r3, r7, r3
   26e08:	781b      	ldrb	r3, [r3, #0]
   26e0a:	2b00      	cmp	r3, #0
   26e0c:	d10f      	bne.n	26e2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26e0e:	230f      	movs	r3, #15
   26e10:	18fb      	adds	r3, r7, r3
   26e12:	781b      	ldrb	r3, [r3, #0]
   26e14:	009b      	lsls	r3, r3, #2
   26e16:	2210      	movs	r2, #16
   26e18:	4694      	mov	ip, r2
   26e1a:	44bc      	add	ip, r7
   26e1c:	4463      	add	r3, ip
   26e1e:	3b08      	subs	r3, #8
   26e20:	681a      	ldr	r2, [r3, #0]
   26e22:	230e      	movs	r3, #14
   26e24:	18fb      	adds	r3, r7, r3
   26e26:	781b      	ldrb	r3, [r3, #0]
   26e28:	01db      	lsls	r3, r3, #7
   26e2a:	18d3      	adds	r3, r2, r3
   26e2c:	e000      	b.n	26e30 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26e2e:	2300      	movs	r3, #0
}
   26e30:	0018      	movs	r0, r3
   26e32:	46bd      	mov	sp, r7
   26e34:	b004      	add	sp, #16
   26e36:	bd80      	pop	{r7, pc}
   26e38:	41004400 	.word	0x41004400

00026e3c <port_get_group_from_gpio_pin>:
{
   26e3c:	b580      	push	{r7, lr}
   26e3e:	b082      	sub	sp, #8
   26e40:	af00      	add	r7, sp, #0
   26e42:	0002      	movs	r2, r0
   26e44:	1dfb      	adds	r3, r7, #7
   26e46:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26e48:	1dfb      	adds	r3, r7, #7
   26e4a:	781b      	ldrb	r3, [r3, #0]
   26e4c:	0018      	movs	r0, r3
   26e4e:	4b03      	ldr	r3, [pc, #12]	; (26e5c <port_get_group_from_gpio_pin+0x20>)
   26e50:	4798      	blx	r3
   26e52:	0003      	movs	r3, r0
}
   26e54:	0018      	movs	r0, r3
   26e56:	46bd      	mov	sp, r7
   26e58:	b002      	add	sp, #8
   26e5a:	bd80      	pop	{r7, pc}
   26e5c:	00026ddd 	.word	0x00026ddd

00026e60 <port_get_config_defaults>:
{
   26e60:	b580      	push	{r7, lr}
   26e62:	b082      	sub	sp, #8
   26e64:	af00      	add	r7, sp, #0
   26e66:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26e68:	687b      	ldr	r3, [r7, #4]
   26e6a:	2200      	movs	r2, #0
   26e6c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26e6e:	687b      	ldr	r3, [r7, #4]
   26e70:	2201      	movs	r2, #1
   26e72:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26e74:	687b      	ldr	r3, [r7, #4]
   26e76:	2200      	movs	r2, #0
   26e78:	709a      	strb	r2, [r3, #2]
}
   26e7a:	46c0      	nop			; (mov r8, r8)
   26e7c:	46bd      	mov	sp, r7
   26e7e:	b002      	add	sp, #8
   26e80:	bd80      	pop	{r7, pc}
	...

00026e84 <port_pin_set_output_level>:
{
   26e84:	b580      	push	{r7, lr}
   26e86:	b084      	sub	sp, #16
   26e88:	af00      	add	r7, sp, #0
   26e8a:	0002      	movs	r2, r0
   26e8c:	1dfb      	adds	r3, r7, #7
   26e8e:	701a      	strb	r2, [r3, #0]
   26e90:	1dbb      	adds	r3, r7, #6
   26e92:	1c0a      	adds	r2, r1, #0
   26e94:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26e96:	1dfb      	adds	r3, r7, #7
   26e98:	781b      	ldrb	r3, [r3, #0]
   26e9a:	0018      	movs	r0, r3
   26e9c:	4b0d      	ldr	r3, [pc, #52]	; (26ed4 <port_pin_set_output_level+0x50>)
   26e9e:	4798      	blx	r3
   26ea0:	0003      	movs	r3, r0
   26ea2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26ea4:	1dfb      	adds	r3, r7, #7
   26ea6:	781b      	ldrb	r3, [r3, #0]
   26ea8:	221f      	movs	r2, #31
   26eaa:	4013      	ands	r3, r2
   26eac:	2201      	movs	r2, #1
   26eae:	409a      	lsls	r2, r3
   26eb0:	0013      	movs	r3, r2
   26eb2:	60bb      	str	r3, [r7, #8]
	if (level) {
   26eb4:	1dbb      	adds	r3, r7, #6
   26eb6:	781b      	ldrb	r3, [r3, #0]
   26eb8:	2b00      	cmp	r3, #0
   26eba:	d003      	beq.n	26ec4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26ebc:	68fb      	ldr	r3, [r7, #12]
   26ebe:	68ba      	ldr	r2, [r7, #8]
   26ec0:	619a      	str	r2, [r3, #24]
}
   26ec2:	e002      	b.n	26eca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26ec4:	68fb      	ldr	r3, [r7, #12]
   26ec6:	68ba      	ldr	r2, [r7, #8]
   26ec8:	615a      	str	r2, [r3, #20]
}
   26eca:	46c0      	nop			; (mov r8, r8)
   26ecc:	46bd      	mov	sp, r7
   26ece:	b004      	add	sp, #16
   26ed0:	bd80      	pop	{r7, pc}
   26ed2:	46c0      	nop			; (mov r8, r8)
   26ed4:	00026e3d 	.word	0x00026e3d

00026ed8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26ed8:	b580      	push	{r7, lr}
   26eda:	b082      	sub	sp, #8
   26edc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26ede:	1d3b      	adds	r3, r7, #4
   26ee0:	0018      	movs	r0, r3
   26ee2:	4b0e      	ldr	r3, [pc, #56]	; (26f1c <system_board_init+0x44>)
   26ee4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26ee6:	1d3b      	adds	r3, r7, #4
   26ee8:	2201      	movs	r2, #1
   26eea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26eec:	1d3b      	adds	r3, r7, #4
   26eee:	0019      	movs	r1, r3
   26ef0:	2017      	movs	r0, #23
   26ef2:	4b0b      	ldr	r3, [pc, #44]	; (26f20 <system_board_init+0x48>)
   26ef4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26ef6:	2101      	movs	r1, #1
   26ef8:	2017      	movs	r0, #23
   26efa:	4b0a      	ldr	r3, [pc, #40]	; (26f24 <system_board_init+0x4c>)
   26efc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26efe:	1d3b      	adds	r3, r7, #4
   26f00:	2200      	movs	r2, #0
   26f02:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26f04:	1d3b      	adds	r3, r7, #4
   26f06:	2201      	movs	r2, #1
   26f08:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26f0a:	1d3b      	adds	r3, r7, #4
   26f0c:	0019      	movs	r1, r3
   26f0e:	2037      	movs	r0, #55	; 0x37
   26f10:	4b03      	ldr	r3, [pc, #12]	; (26f20 <system_board_init+0x48>)
   26f12:	4798      	blx	r3
}
   26f14:	46c0      	nop			; (mov r8, r8)
   26f16:	46bd      	mov	sp, r7
   26f18:	b002      	add	sp, #8
   26f1a:	bd80      	pop	{r7, pc}
   26f1c:	00026e61 	.word	0x00026e61
   26f20:	0002754d 	.word	0x0002754d
   26f24:	00026e85 	.word	0x00026e85

00026f28 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26f28:	b580      	push	{r7, lr}
   26f2a:	b084      	sub	sp, #16
   26f2c:	af00      	add	r7, sp, #0
   26f2e:	0002      	movs	r2, r0
   26f30:	1dfb      	adds	r3, r7, #7
   26f32:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26f34:	230f      	movs	r3, #15
   26f36:	18fb      	adds	r3, r7, r3
   26f38:	1dfa      	adds	r2, r7, #7
   26f3a:	7812      	ldrb	r2, [r2, #0]
   26f3c:	0952      	lsrs	r2, r2, #5
   26f3e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26f40:	230f      	movs	r3, #15
   26f42:	18fb      	adds	r3, r7, r3
   26f44:	781b      	ldrb	r3, [r3, #0]
   26f46:	2b00      	cmp	r3, #0
   26f48:	d10c      	bne.n	26f64 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26f4a:	4b09      	ldr	r3, [pc, #36]	; (26f70 <_extint_get_eic_from_channel+0x48>)
   26f4c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26f4e:	230f      	movs	r3, #15
   26f50:	18fb      	adds	r3, r7, r3
   26f52:	781b      	ldrb	r3, [r3, #0]
   26f54:	009b      	lsls	r3, r3, #2
   26f56:	2210      	movs	r2, #16
   26f58:	4694      	mov	ip, r2
   26f5a:	44bc      	add	ip, r7
   26f5c:	4463      	add	r3, ip
   26f5e:	3b08      	subs	r3, #8
   26f60:	681b      	ldr	r3, [r3, #0]
   26f62:	e000      	b.n	26f66 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26f64:	2300      	movs	r3, #0
	}
}
   26f66:	0018      	movs	r0, r3
   26f68:	46bd      	mov	sp, r7
   26f6a:	b004      	add	sp, #16
   26f6c:	bd80      	pop	{r7, pc}
   26f6e:	46c0      	nop			; (mov r8, r8)
   26f70:	40001800 	.word	0x40001800

00026f74 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26f74:	b580      	push	{r7, lr}
   26f76:	b084      	sub	sp, #16
   26f78:	af00      	add	r7, sp, #0
   26f7a:	0002      	movs	r2, r0
   26f7c:	1dfb      	adds	r3, r7, #7
   26f7e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26f80:	1dfb      	adds	r3, r7, #7
   26f82:	781b      	ldrb	r3, [r3, #0]
   26f84:	0018      	movs	r0, r3
   26f86:	4b0b      	ldr	r3, [pc, #44]	; (26fb4 <extint_chan_is_detected+0x40>)
   26f88:	4798      	blx	r3
   26f8a:	0003      	movs	r3, r0
   26f8c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26f8e:	1dfb      	adds	r3, r7, #7
   26f90:	781b      	ldrb	r3, [r3, #0]
   26f92:	221f      	movs	r2, #31
   26f94:	4013      	ands	r3, r2
   26f96:	2201      	movs	r2, #1
   26f98:	409a      	lsls	r2, r3
   26f9a:	0013      	movs	r3, r2
   26f9c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   26f9e:	68fb      	ldr	r3, [r7, #12]
   26fa0:	691b      	ldr	r3, [r3, #16]
   26fa2:	68ba      	ldr	r2, [r7, #8]
   26fa4:	4013      	ands	r3, r2
   26fa6:	1e5a      	subs	r2, r3, #1
   26fa8:	4193      	sbcs	r3, r2
   26faa:	b2db      	uxtb	r3, r3
}
   26fac:	0018      	movs	r0, r3
   26fae:	46bd      	mov	sp, r7
   26fb0:	b004      	add	sp, #16
   26fb2:	bd80      	pop	{r7, pc}
   26fb4:	00026f29 	.word	0x00026f29

00026fb8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   26fb8:	b580      	push	{r7, lr}
   26fba:	b084      	sub	sp, #16
   26fbc:	af00      	add	r7, sp, #0
   26fbe:	0002      	movs	r2, r0
   26fc0:	1dfb      	adds	r3, r7, #7
   26fc2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26fc4:	1dfb      	adds	r3, r7, #7
   26fc6:	781b      	ldrb	r3, [r3, #0]
   26fc8:	0018      	movs	r0, r3
   26fca:	4b09      	ldr	r3, [pc, #36]	; (26ff0 <extint_chan_clear_detected+0x38>)
   26fcc:	4798      	blx	r3
   26fce:	0003      	movs	r3, r0
   26fd0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26fd2:	1dfb      	adds	r3, r7, #7
   26fd4:	781b      	ldrb	r3, [r3, #0]
   26fd6:	221f      	movs	r2, #31
   26fd8:	4013      	ands	r3, r2
   26fda:	2201      	movs	r2, #1
   26fdc:	409a      	lsls	r2, r3
   26fde:	0013      	movs	r3, r2
   26fe0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26fe2:	68fb      	ldr	r3, [r7, #12]
   26fe4:	68ba      	ldr	r2, [r7, #8]
   26fe6:	611a      	str	r2, [r3, #16]
}
   26fe8:	46c0      	nop			; (mov r8, r8)
   26fea:	46bd      	mov	sp, r7
   26fec:	b004      	add	sp, #16
   26fee:	bd80      	pop	{r7, pc}
   26ff0:	00026f29 	.word	0x00026f29

00026ff4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26ff4:	b580      	push	{r7, lr}
   26ff6:	b082      	sub	sp, #8
   26ff8:	af00      	add	r7, sp, #0
   26ffa:	6078      	str	r0, [r7, #4]
   26ffc:	0008      	movs	r0, r1
   26ffe:	0011      	movs	r1, r2
   27000:	1cfb      	adds	r3, r7, #3
   27002:	1c02      	adds	r2, r0, #0
   27004:	701a      	strb	r2, [r3, #0]
   27006:	1cbb      	adds	r3, r7, #2
   27008:	1c0a      	adds	r2, r1, #0
   2700a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2700c:	1cbb      	adds	r3, r7, #2
   2700e:	781b      	ldrb	r3, [r3, #0]
   27010:	2b00      	cmp	r3, #0
   27012:	d001      	beq.n	27018 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   27014:	2317      	movs	r3, #23
   27016:	e019      	b.n	2704c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   27018:	1cfb      	adds	r3, r7, #3
   2701a:	781a      	ldrb	r2, [r3, #0]
   2701c:	4b0d      	ldr	r3, [pc, #52]	; (27054 <extint_register_callback+0x60>)
   2701e:	0092      	lsls	r2, r2, #2
   27020:	58d3      	ldr	r3, [r2, r3]
   27022:	2b00      	cmp	r3, #0
   27024:	d107      	bne.n	27036 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   27026:	1cfb      	adds	r3, r7, #3
   27028:	781a      	ldrb	r2, [r3, #0]
   2702a:	4b0a      	ldr	r3, [pc, #40]	; (27054 <extint_register_callback+0x60>)
   2702c:	0092      	lsls	r2, r2, #2
   2702e:	6879      	ldr	r1, [r7, #4]
   27030:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   27032:	2300      	movs	r3, #0
   27034:	e00a      	b.n	2704c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   27036:	1cfb      	adds	r3, r7, #3
   27038:	781a      	ldrb	r2, [r3, #0]
   2703a:	4b06      	ldr	r3, [pc, #24]	; (27054 <extint_register_callback+0x60>)
   2703c:	0092      	lsls	r2, r2, #2
   2703e:	58d2      	ldr	r2, [r2, r3]
   27040:	687b      	ldr	r3, [r7, #4]
   27042:	429a      	cmp	r2, r3
   27044:	d101      	bne.n	2704a <extint_register_callback+0x56>
		return STATUS_OK;
   27046:	2300      	movs	r3, #0
   27048:	e000      	b.n	2704c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2704a:	231d      	movs	r3, #29
}
   2704c:	0018      	movs	r0, r3
   2704e:	46bd      	mov	sp, r7
   27050:	b002      	add	sp, #8
   27052:	bd80      	pop	{r7, pc}
   27054:	20005c1c 	.word	0x20005c1c

00027058 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27058:	b580      	push	{r7, lr}
   2705a:	b084      	sub	sp, #16
   2705c:	af00      	add	r7, sp, #0
   2705e:	0002      	movs	r2, r0
   27060:	1dfb      	adds	r3, r7, #7
   27062:	701a      	strb	r2, [r3, #0]
   27064:	1dbb      	adds	r3, r7, #6
   27066:	1c0a      	adds	r2, r1, #0
   27068:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2706a:	1dbb      	adds	r3, r7, #6
   2706c:	781b      	ldrb	r3, [r3, #0]
   2706e:	2b00      	cmp	r3, #0
   27070:	d10e      	bne.n	27090 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   27072:	1dfb      	adds	r3, r7, #7
   27074:	781b      	ldrb	r3, [r3, #0]
   27076:	0018      	movs	r0, r3
   27078:	4b08      	ldr	r3, [pc, #32]	; (2709c <extint_chan_enable_callback+0x44>)
   2707a:	4798      	blx	r3
   2707c:	0003      	movs	r3, r0
   2707e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   27080:	1dfb      	adds	r3, r7, #7
   27082:	781b      	ldrb	r3, [r3, #0]
   27084:	2201      	movs	r2, #1
   27086:	409a      	lsls	r2, r3
   27088:	68fb      	ldr	r3, [r7, #12]
   2708a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2708c:	2300      	movs	r3, #0
   2708e:	e000      	b.n	27092 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27090:	2317      	movs	r3, #23
}
   27092:	0018      	movs	r0, r3
   27094:	46bd      	mov	sp, r7
   27096:	b004      	add	sp, #16
   27098:	bd80      	pop	{r7, pc}
   2709a:	46c0      	nop			; (mov r8, r8)
   2709c:	00026f29 	.word	0x00026f29

000270a0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   270a0:	b580      	push	{r7, lr}
   270a2:	b084      	sub	sp, #16
   270a4:	af00      	add	r7, sp, #0
   270a6:	0002      	movs	r2, r0
   270a8:	1dfb      	adds	r3, r7, #7
   270aa:	701a      	strb	r2, [r3, #0]
   270ac:	1dbb      	adds	r3, r7, #6
   270ae:	1c0a      	adds	r2, r1, #0
   270b0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   270b2:	1dbb      	adds	r3, r7, #6
   270b4:	781b      	ldrb	r3, [r3, #0]
   270b6:	2b00      	cmp	r3, #0
   270b8:	d10e      	bne.n	270d8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   270ba:	1dfb      	adds	r3, r7, #7
   270bc:	781b      	ldrb	r3, [r3, #0]
   270be:	0018      	movs	r0, r3
   270c0:	4b08      	ldr	r3, [pc, #32]	; (270e4 <extint_chan_disable_callback+0x44>)
   270c2:	4798      	blx	r3
   270c4:	0003      	movs	r3, r0
   270c6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   270c8:	1dfb      	adds	r3, r7, #7
   270ca:	781b      	ldrb	r3, [r3, #0]
   270cc:	2201      	movs	r2, #1
   270ce:	409a      	lsls	r2, r3
   270d0:	68fb      	ldr	r3, [r7, #12]
   270d2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   270d4:	2300      	movs	r3, #0
   270d6:	e000      	b.n	270da <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   270d8:	2317      	movs	r3, #23
}
   270da:	0018      	movs	r0, r3
   270dc:	46bd      	mov	sp, r7
   270de:	b004      	add	sp, #16
   270e0:	bd80      	pop	{r7, pc}
   270e2:	46c0      	nop			; (mov r8, r8)
   270e4:	00026f29 	.word	0x00026f29

000270e8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   270e8:	b580      	push	{r7, lr}
   270ea:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   270ec:	4b15      	ldr	r3, [pc, #84]	; (27144 <EIC_Handler+0x5c>)
   270ee:	2200      	movs	r2, #0
   270f0:	701a      	strb	r2, [r3, #0]
   270f2:	e020      	b.n	27136 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   270f4:	4b13      	ldr	r3, [pc, #76]	; (27144 <EIC_Handler+0x5c>)
   270f6:	781b      	ldrb	r3, [r3, #0]
   270f8:	0018      	movs	r0, r3
   270fa:	4b13      	ldr	r3, [pc, #76]	; (27148 <EIC_Handler+0x60>)
   270fc:	4798      	blx	r3
   270fe:	1e03      	subs	r3, r0, #0
   27100:	d013      	beq.n	2712a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   27102:	4b10      	ldr	r3, [pc, #64]	; (27144 <EIC_Handler+0x5c>)
   27104:	781b      	ldrb	r3, [r3, #0]
   27106:	0018      	movs	r0, r3
   27108:	4b10      	ldr	r3, [pc, #64]	; (2714c <EIC_Handler+0x64>)
   2710a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2710c:	4b0d      	ldr	r3, [pc, #52]	; (27144 <EIC_Handler+0x5c>)
   2710e:	781b      	ldrb	r3, [r3, #0]
   27110:	001a      	movs	r2, r3
   27112:	4b0f      	ldr	r3, [pc, #60]	; (27150 <EIC_Handler+0x68>)
   27114:	0092      	lsls	r2, r2, #2
   27116:	58d3      	ldr	r3, [r2, r3]
   27118:	2b00      	cmp	r3, #0
   2711a:	d006      	beq.n	2712a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2711c:	4b09      	ldr	r3, [pc, #36]	; (27144 <EIC_Handler+0x5c>)
   2711e:	781b      	ldrb	r3, [r3, #0]
   27120:	001a      	movs	r2, r3
   27122:	4b0b      	ldr	r3, [pc, #44]	; (27150 <EIC_Handler+0x68>)
   27124:	0092      	lsls	r2, r2, #2
   27126:	58d3      	ldr	r3, [r2, r3]
   27128:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2712a:	4b06      	ldr	r3, [pc, #24]	; (27144 <EIC_Handler+0x5c>)
   2712c:	781b      	ldrb	r3, [r3, #0]
   2712e:	3301      	adds	r3, #1
   27130:	b2da      	uxtb	r2, r3
   27132:	4b04      	ldr	r3, [pc, #16]	; (27144 <EIC_Handler+0x5c>)
   27134:	701a      	strb	r2, [r3, #0]
   27136:	4b03      	ldr	r3, [pc, #12]	; (27144 <EIC_Handler+0x5c>)
   27138:	781b      	ldrb	r3, [r3, #0]
   2713a:	2b0f      	cmp	r3, #15
   2713c:	d9da      	bls.n	270f4 <EIC_Handler+0xc>
			}
		}
	}
}
   2713e:	46c0      	nop			; (mov r8, r8)
   27140:	46bd      	mov	sp, r7
   27142:	bd80      	pop	{r7, pc}
   27144:	20005c18 	.word	0x20005c18
   27148:	00026f75 	.word	0x00026f75
   2714c:	00026fb9 	.word	0x00026fb9
   27150:	20005c1c 	.word	0x20005c1c

00027154 <system_gclk_chan_get_config_defaults>:
{
   27154:	b580      	push	{r7, lr}
   27156:	b082      	sub	sp, #8
   27158:	af00      	add	r7, sp, #0
   2715a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2715c:	687b      	ldr	r3, [r7, #4]
   2715e:	2200      	movs	r2, #0
   27160:	701a      	strb	r2, [r3, #0]
}
   27162:	46c0      	nop			; (mov r8, r8)
   27164:	46bd      	mov	sp, r7
   27166:	b002      	add	sp, #8
   27168:	bd80      	pop	{r7, pc}
	...

0002716c <system_apb_clock_set_mask>:
{
   2716c:	b580      	push	{r7, lr}
   2716e:	b082      	sub	sp, #8
   27170:	af00      	add	r7, sp, #0
   27172:	0002      	movs	r2, r0
   27174:	6039      	str	r1, [r7, #0]
   27176:	1dfb      	adds	r3, r7, #7
   27178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2717a:	1dfb      	adds	r3, r7, #7
   2717c:	781b      	ldrb	r3, [r3, #0]
   2717e:	2b01      	cmp	r3, #1
   27180:	d00a      	beq.n	27198 <system_apb_clock_set_mask+0x2c>
   27182:	2b02      	cmp	r3, #2
   27184:	d00f      	beq.n	271a6 <system_apb_clock_set_mask+0x3a>
   27186:	2b00      	cmp	r3, #0
   27188:	d114      	bne.n	271b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2718a:	4b0e      	ldr	r3, [pc, #56]	; (271c4 <system_apb_clock_set_mask+0x58>)
   2718c:	4a0d      	ldr	r2, [pc, #52]	; (271c4 <system_apb_clock_set_mask+0x58>)
   2718e:	6991      	ldr	r1, [r2, #24]
   27190:	683a      	ldr	r2, [r7, #0]
   27192:	430a      	orrs	r2, r1
   27194:	619a      	str	r2, [r3, #24]
			break;
   27196:	e00f      	b.n	271b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27198:	4b0a      	ldr	r3, [pc, #40]	; (271c4 <system_apb_clock_set_mask+0x58>)
   2719a:	4a0a      	ldr	r2, [pc, #40]	; (271c4 <system_apb_clock_set_mask+0x58>)
   2719c:	69d1      	ldr	r1, [r2, #28]
   2719e:	683a      	ldr	r2, [r7, #0]
   271a0:	430a      	orrs	r2, r1
   271a2:	61da      	str	r2, [r3, #28]
			break;
   271a4:	e008      	b.n	271b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   271a6:	4b07      	ldr	r3, [pc, #28]	; (271c4 <system_apb_clock_set_mask+0x58>)
   271a8:	4a06      	ldr	r2, [pc, #24]	; (271c4 <system_apb_clock_set_mask+0x58>)
   271aa:	6a11      	ldr	r1, [r2, #32]
   271ac:	683a      	ldr	r2, [r7, #0]
   271ae:	430a      	orrs	r2, r1
   271b0:	621a      	str	r2, [r3, #32]
			break;
   271b2:	e001      	b.n	271b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   271b4:	2317      	movs	r3, #23
   271b6:	e000      	b.n	271ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   271b8:	2300      	movs	r3, #0
}
   271ba:	0018      	movs	r0, r3
   271bc:	46bd      	mov	sp, r7
   271be:	b002      	add	sp, #8
   271c0:	bd80      	pop	{r7, pc}
   271c2:	46c0      	nop			; (mov r8, r8)
   271c4:	40000400 	.word	0x40000400

000271c8 <system_pinmux_get_config_defaults>:
{
   271c8:	b580      	push	{r7, lr}
   271ca:	b082      	sub	sp, #8
   271cc:	af00      	add	r7, sp, #0
   271ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   271d0:	687b      	ldr	r3, [r7, #4]
   271d2:	2280      	movs	r2, #128	; 0x80
   271d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   271d6:	687b      	ldr	r3, [r7, #4]
   271d8:	2200      	movs	r2, #0
   271da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   271dc:	687b      	ldr	r3, [r7, #4]
   271de:	2201      	movs	r2, #1
   271e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   271e2:	687b      	ldr	r3, [r7, #4]
   271e4:	2200      	movs	r2, #0
   271e6:	70da      	strb	r2, [r3, #3]
}
   271e8:	46c0      	nop			; (mov r8, r8)
   271ea:	46bd      	mov	sp, r7
   271ec:	b002      	add	sp, #8
   271ee:	bd80      	pop	{r7, pc}

000271f0 <system_interrupt_enable>:
{
   271f0:	b580      	push	{r7, lr}
   271f2:	b082      	sub	sp, #8
   271f4:	af00      	add	r7, sp, #0
   271f6:	0002      	movs	r2, r0
   271f8:	1dfb      	adds	r3, r7, #7
   271fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   271fc:	4b06      	ldr	r3, [pc, #24]	; (27218 <system_interrupt_enable+0x28>)
   271fe:	1dfa      	adds	r2, r7, #7
   27200:	7812      	ldrb	r2, [r2, #0]
   27202:	0011      	movs	r1, r2
   27204:	221f      	movs	r2, #31
   27206:	400a      	ands	r2, r1
   27208:	2101      	movs	r1, #1
   2720a:	4091      	lsls	r1, r2
   2720c:	000a      	movs	r2, r1
   2720e:	601a      	str	r2, [r3, #0]
}
   27210:	46c0      	nop			; (mov r8, r8)
   27212:	46bd      	mov	sp, r7
   27214:	b002      	add	sp, #8
   27216:	bd80      	pop	{r7, pc}
   27218:	e000e100 	.word	0xe000e100

0002721c <_extint_get_eic_from_channel>:
{
   2721c:	b580      	push	{r7, lr}
   2721e:	b084      	sub	sp, #16
   27220:	af00      	add	r7, sp, #0
   27222:	0002      	movs	r2, r0
   27224:	1dfb      	adds	r3, r7, #7
   27226:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27228:	230f      	movs	r3, #15
   2722a:	18fb      	adds	r3, r7, r3
   2722c:	1dfa      	adds	r2, r7, #7
   2722e:	7812      	ldrb	r2, [r2, #0]
   27230:	0952      	lsrs	r2, r2, #5
   27232:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   27234:	230f      	movs	r3, #15
   27236:	18fb      	adds	r3, r7, r3
   27238:	781b      	ldrb	r3, [r3, #0]
   2723a:	2b00      	cmp	r3, #0
   2723c:	d10c      	bne.n	27258 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2723e:	4b09      	ldr	r3, [pc, #36]	; (27264 <_extint_get_eic_from_channel+0x48>)
   27240:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   27242:	230f      	movs	r3, #15
   27244:	18fb      	adds	r3, r7, r3
   27246:	781b      	ldrb	r3, [r3, #0]
   27248:	009b      	lsls	r3, r3, #2
   2724a:	2210      	movs	r2, #16
   2724c:	4694      	mov	ip, r2
   2724e:	44bc      	add	ip, r7
   27250:	4463      	add	r3, ip
   27252:	3b08      	subs	r3, #8
   27254:	681b      	ldr	r3, [r3, #0]
   27256:	e000      	b.n	2725a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   27258:	2300      	movs	r3, #0
}
   2725a:	0018      	movs	r0, r3
   2725c:	46bd      	mov	sp, r7
   2725e:	b004      	add	sp, #16
   27260:	bd80      	pop	{r7, pc}
   27262:	46c0      	nop			; (mov r8, r8)
   27264:	40001800 	.word	0x40001800

00027268 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   27268:	b580      	push	{r7, lr}
   2726a:	b082      	sub	sp, #8
   2726c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2726e:	4b0f      	ldr	r3, [pc, #60]	; (272ac <extint_is_syncing+0x44>)
   27270:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27272:	2300      	movs	r3, #0
   27274:	607b      	str	r3, [r7, #4]
   27276:	e011      	b.n	2729c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   27278:	687b      	ldr	r3, [r7, #4]
   2727a:	009b      	lsls	r3, r3, #2
   2727c:	2208      	movs	r2, #8
   2727e:	4694      	mov	ip, r2
   27280:	44bc      	add	ip, r7
   27282:	4463      	add	r3, ip
   27284:	3b08      	subs	r3, #8
   27286:	681b      	ldr	r3, [r3, #0]
   27288:	785b      	ldrb	r3, [r3, #1]
   2728a:	b2db      	uxtb	r3, r3
   2728c:	b25b      	sxtb	r3, r3
   2728e:	2b00      	cmp	r3, #0
   27290:	da01      	bge.n	27296 <extint_is_syncing+0x2e>
			return true;
   27292:	2301      	movs	r3, #1
   27294:	e006      	b.n	272a4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27296:	687b      	ldr	r3, [r7, #4]
   27298:	3301      	adds	r3, #1
   2729a:	607b      	str	r3, [r7, #4]
   2729c:	687b      	ldr	r3, [r7, #4]
   2729e:	2b00      	cmp	r3, #0
   272a0:	d0ea      	beq.n	27278 <extint_is_syncing+0x10>
		}
	}
	return false;
   272a2:	2300      	movs	r3, #0
}
   272a4:	0018      	movs	r0, r3
   272a6:	46bd      	mov	sp, r7
   272a8:	b002      	add	sp, #8
   272aa:	bd80      	pop	{r7, pc}
   272ac:	40001800 	.word	0x40001800

000272b0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   272b0:	b580      	push	{r7, lr}
   272b2:	b084      	sub	sp, #16
   272b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   272b6:	4b2d      	ldr	r3, [pc, #180]	; (2736c <_system_extint_init+0xbc>)
   272b8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   272ba:	2140      	movs	r1, #64	; 0x40
   272bc:	2000      	movs	r0, #0
   272be:	4b2c      	ldr	r3, [pc, #176]	; (27370 <_system_extint_init+0xc0>)
   272c0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   272c2:	003b      	movs	r3, r7
   272c4:	0018      	movs	r0, r3
   272c6:	4b2b      	ldr	r3, [pc, #172]	; (27374 <_system_extint_init+0xc4>)
   272c8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   272ca:	003b      	movs	r3, r7
   272cc:	2200      	movs	r2, #0
   272ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   272d0:	003b      	movs	r3, r7
   272d2:	0019      	movs	r1, r3
   272d4:	2005      	movs	r0, #5
   272d6:	4b28      	ldr	r3, [pc, #160]	; (27378 <_system_extint_init+0xc8>)
   272d8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   272da:	2005      	movs	r0, #5
   272dc:	4b27      	ldr	r3, [pc, #156]	; (2737c <_system_extint_init+0xcc>)
   272de:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   272e0:	2300      	movs	r3, #0
   272e2:	60fb      	str	r3, [r7, #12]
   272e4:	e018      	b.n	27318 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   272e6:	68fb      	ldr	r3, [r7, #12]
   272e8:	009b      	lsls	r3, r3, #2
   272ea:	2210      	movs	r2, #16
   272ec:	4694      	mov	ip, r2
   272ee:	44bc      	add	ip, r7
   272f0:	4463      	add	r3, ip
   272f2:	3b0c      	subs	r3, #12
   272f4:	681a      	ldr	r2, [r3, #0]
   272f6:	68fb      	ldr	r3, [r7, #12]
   272f8:	009b      	lsls	r3, r3, #2
   272fa:	2110      	movs	r1, #16
   272fc:	468c      	mov	ip, r1
   272fe:	44bc      	add	ip, r7
   27300:	4463      	add	r3, ip
   27302:	3b0c      	subs	r3, #12
   27304:	681b      	ldr	r3, [r3, #0]
   27306:	781b      	ldrb	r3, [r3, #0]
   27308:	b2db      	uxtb	r3, r3
   2730a:	2101      	movs	r1, #1
   2730c:	430b      	orrs	r3, r1
   2730e:	b2db      	uxtb	r3, r3
   27310:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27312:	68fb      	ldr	r3, [r7, #12]
   27314:	3301      	adds	r3, #1
   27316:	60fb      	str	r3, [r7, #12]
   27318:	68fb      	ldr	r3, [r7, #12]
   2731a:	2b00      	cmp	r3, #0
   2731c:	d0e3      	beq.n	272e6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2731e:	46c0      	nop			; (mov r8, r8)
   27320:	4b17      	ldr	r3, [pc, #92]	; (27380 <_system_extint_init+0xd0>)
   27322:	4798      	blx	r3
   27324:	1e03      	subs	r3, r0, #0
   27326:	d1fb      	bne.n	27320 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27328:	230b      	movs	r3, #11
   2732a:	18fb      	adds	r3, r7, r3
   2732c:	2200      	movs	r2, #0
   2732e:	701a      	strb	r2, [r3, #0]
   27330:	e00d      	b.n	2734e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   27332:	230b      	movs	r3, #11
   27334:	18fb      	adds	r3, r7, r3
   27336:	781a      	ldrb	r2, [r3, #0]
   27338:	4b12      	ldr	r3, [pc, #72]	; (27384 <_system_extint_init+0xd4>)
   2733a:	0092      	lsls	r2, r2, #2
   2733c:	2100      	movs	r1, #0
   2733e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27340:	230b      	movs	r3, #11
   27342:	18fb      	adds	r3, r7, r3
   27344:	781a      	ldrb	r2, [r3, #0]
   27346:	230b      	movs	r3, #11
   27348:	18fb      	adds	r3, r7, r3
   2734a:	3201      	adds	r2, #1
   2734c:	701a      	strb	r2, [r3, #0]
   2734e:	230b      	movs	r3, #11
   27350:	18fb      	adds	r3, r7, r3
   27352:	781b      	ldrb	r3, [r3, #0]
   27354:	2b0f      	cmp	r3, #15
   27356:	d9ec      	bls.n	27332 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   27358:	2004      	movs	r0, #4
   2735a:	4b0b      	ldr	r3, [pc, #44]	; (27388 <_system_extint_init+0xd8>)
   2735c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2735e:	4b0b      	ldr	r3, [pc, #44]	; (2738c <_system_extint_init+0xdc>)
   27360:	4798      	blx	r3
}
   27362:	46c0      	nop			; (mov r8, r8)
   27364:	46bd      	mov	sp, r7
   27366:	b004      	add	sp, #16
   27368:	bd80      	pop	{r7, pc}
   2736a:	46c0      	nop			; (mov r8, r8)
   2736c:	40001800 	.word	0x40001800
   27370:	0002716d 	.word	0x0002716d
   27374:	00027155 	.word	0x00027155
   27378:	0002a9dd 	.word	0x0002a9dd
   2737c:	0002aa21 	.word	0x0002aa21
   27380:	00027269 	.word	0x00027269
   27384:	20005c1c 	.word	0x20005c1c
   27388:	000271f1 	.word	0x000271f1
   2738c:	00027391 	.word	0x00027391

00027390 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   27390:	b580      	push	{r7, lr}
   27392:	b082      	sub	sp, #8
   27394:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27396:	4b15      	ldr	r3, [pc, #84]	; (273ec <_extint_enable+0x5c>)
   27398:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2739a:	2300      	movs	r3, #0
   2739c:	607b      	str	r3, [r7, #4]
   2739e:	e018      	b.n	273d2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   273a0:	687b      	ldr	r3, [r7, #4]
   273a2:	009b      	lsls	r3, r3, #2
   273a4:	2208      	movs	r2, #8
   273a6:	4694      	mov	ip, r2
   273a8:	44bc      	add	ip, r7
   273aa:	4463      	add	r3, ip
   273ac:	3b08      	subs	r3, #8
   273ae:	681a      	ldr	r2, [r3, #0]
   273b0:	687b      	ldr	r3, [r7, #4]
   273b2:	009b      	lsls	r3, r3, #2
   273b4:	2108      	movs	r1, #8
   273b6:	468c      	mov	ip, r1
   273b8:	44bc      	add	ip, r7
   273ba:	4463      	add	r3, ip
   273bc:	3b08      	subs	r3, #8
   273be:	681b      	ldr	r3, [r3, #0]
   273c0:	781b      	ldrb	r3, [r3, #0]
   273c2:	b2db      	uxtb	r3, r3
   273c4:	2102      	movs	r1, #2
   273c6:	430b      	orrs	r3, r1
   273c8:	b2db      	uxtb	r3, r3
   273ca:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   273cc:	687b      	ldr	r3, [r7, #4]
   273ce:	3301      	adds	r3, #1
   273d0:	607b      	str	r3, [r7, #4]
   273d2:	687b      	ldr	r3, [r7, #4]
   273d4:	2b00      	cmp	r3, #0
   273d6:	d0e3      	beq.n	273a0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   273d8:	46c0      	nop			; (mov r8, r8)
   273da:	4b05      	ldr	r3, [pc, #20]	; (273f0 <_extint_enable+0x60>)
   273dc:	4798      	blx	r3
   273de:	1e03      	subs	r3, r0, #0
   273e0:	d1fb      	bne.n	273da <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   273e2:	46c0      	nop			; (mov r8, r8)
   273e4:	46bd      	mov	sp, r7
   273e6:	b002      	add	sp, #8
   273e8:	bd80      	pop	{r7, pc}
   273ea:	46c0      	nop			; (mov r8, r8)
   273ec:	40001800 	.word	0x40001800
   273f0:	00027269 	.word	0x00027269

000273f4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   273f4:	b580      	push	{r7, lr}
   273f6:	b082      	sub	sp, #8
   273f8:	af00      	add	r7, sp, #0
   273fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   273fc:	687b      	ldr	r3, [r7, #4]
   273fe:	2200      	movs	r2, #0
   27400:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   27402:	687b      	ldr	r3, [r7, #4]
   27404:	2200      	movs	r2, #0
   27406:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   27408:	687b      	ldr	r3, [r7, #4]
   2740a:	2201      	movs	r2, #1
   2740c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2740e:	687b      	ldr	r3, [r7, #4]
   27410:	2201      	movs	r2, #1
   27412:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   27414:	687b      	ldr	r3, [r7, #4]
   27416:	2200      	movs	r2, #0
   27418:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2741a:	687b      	ldr	r3, [r7, #4]
   2741c:	2202      	movs	r2, #2
   2741e:	72da      	strb	r2, [r3, #11]
}
   27420:	46c0      	nop			; (mov r8, r8)
   27422:	46bd      	mov	sp, r7
   27424:	b002      	add	sp, #8
   27426:	bd80      	pop	{r7, pc}

00027428 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   27428:	b580      	push	{r7, lr}
   2742a:	b086      	sub	sp, #24
   2742c:	af00      	add	r7, sp, #0
   2742e:	0002      	movs	r2, r0
   27430:	6039      	str	r1, [r7, #0]
   27432:	1dfb      	adds	r3, r7, #7
   27434:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   27436:	2308      	movs	r3, #8
   27438:	18fb      	adds	r3, r7, r3
   2743a:	0018      	movs	r0, r3
   2743c:	4b36      	ldr	r3, [pc, #216]	; (27518 <extint_chan_set_config+0xf0>)
   2743e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   27440:	683b      	ldr	r3, [r7, #0]
   27442:	685b      	ldr	r3, [r3, #4]
   27444:	b2da      	uxtb	r2, r3
   27446:	2308      	movs	r3, #8
   27448:	18fb      	adds	r3, r7, r3
   2744a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2744c:	2308      	movs	r3, #8
   2744e:	18fb      	adds	r3, r7, r3
   27450:	2200      	movs	r2, #0
   27452:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   27454:	683b      	ldr	r3, [r7, #0]
   27456:	7a1a      	ldrb	r2, [r3, #8]
   27458:	2308      	movs	r3, #8
   2745a:	18fb      	adds	r3, r7, r3
   2745c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2745e:	683b      	ldr	r3, [r7, #0]
   27460:	681b      	ldr	r3, [r3, #0]
   27462:	b2db      	uxtb	r3, r3
   27464:	2208      	movs	r2, #8
   27466:	18ba      	adds	r2, r7, r2
   27468:	0011      	movs	r1, r2
   2746a:	0018      	movs	r0, r3
   2746c:	4b2b      	ldr	r3, [pc, #172]	; (2751c <extint_chan_set_config+0xf4>)
   2746e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   27470:	1dfb      	adds	r3, r7, #7
   27472:	781b      	ldrb	r3, [r3, #0]
   27474:	0018      	movs	r0, r3
   27476:	4b2a      	ldr	r3, [pc, #168]	; (27520 <extint_chan_set_config+0xf8>)
   27478:	4798      	blx	r3
   2747a:	0003      	movs	r3, r0
   2747c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2747e:	1dfb      	adds	r3, r7, #7
   27480:	781b      	ldrb	r3, [r3, #0]
   27482:	2207      	movs	r2, #7
   27484:	4013      	ands	r3, r2
   27486:	009b      	lsls	r3, r3, #2
   27488:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2748a:	683b      	ldr	r3, [r7, #0]
   2748c:	7adb      	ldrb	r3, [r3, #11]
   2748e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   27490:	683b      	ldr	r3, [r7, #0]
   27492:	7a9b      	ldrb	r3, [r3, #10]
   27494:	2b00      	cmp	r3, #0
   27496:	d003      	beq.n	274a0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   27498:	697b      	ldr	r3, [r7, #20]
   2749a:	2208      	movs	r2, #8
   2749c:	4313      	orrs	r3, r2
   2749e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   274a0:	1dfb      	adds	r3, r7, #7
   274a2:	781b      	ldrb	r3, [r3, #0]
   274a4:	08db      	lsrs	r3, r3, #3
   274a6:	b2db      	uxtb	r3, r3
   274a8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   274aa:	1dfb      	adds	r3, r7, #7
   274ac:	781b      	ldrb	r3, [r3, #0]
   274ae:	08db      	lsrs	r3, r3, #3
   274b0:	b2db      	uxtb	r3, r3
   274b2:	001a      	movs	r2, r3
   274b4:	693b      	ldr	r3, [r7, #16]
   274b6:	3206      	adds	r2, #6
   274b8:	0092      	lsls	r2, r2, #2
   274ba:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   274bc:	210f      	movs	r1, #15
   274be:	68fa      	ldr	r2, [r7, #12]
   274c0:	4091      	lsls	r1, r2
   274c2:	000a      	movs	r2, r1
   274c4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   274c6:	401a      	ands	r2, r3
			(new_config << config_pos);
   274c8:	6979      	ldr	r1, [r7, #20]
   274ca:	68fb      	ldr	r3, [r7, #12]
   274cc:	4099      	lsls	r1, r3
   274ce:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   274d0:	431a      	orrs	r2, r3
   274d2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   274d4:	693b      	ldr	r3, [r7, #16]
   274d6:	1d82      	adds	r2, r0, #6
   274d8:	0092      	lsls	r2, r2, #2
   274da:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   274dc:	683b      	ldr	r3, [r7, #0]
   274de:	7a5b      	ldrb	r3, [r3, #9]
   274e0:	2b00      	cmp	r3, #0
   274e2:	d00a      	beq.n	274fa <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   274e4:	693b      	ldr	r3, [r7, #16]
   274e6:	695a      	ldr	r2, [r3, #20]
   274e8:	1dfb      	adds	r3, r7, #7
   274ea:	781b      	ldrb	r3, [r3, #0]
   274ec:	2101      	movs	r1, #1
   274ee:	4099      	lsls	r1, r3
   274f0:	000b      	movs	r3, r1
   274f2:	431a      	orrs	r2, r3
   274f4:	693b      	ldr	r3, [r7, #16]
   274f6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   274f8:	e00a      	b.n	27510 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   274fa:	693b      	ldr	r3, [r7, #16]
   274fc:	695b      	ldr	r3, [r3, #20]
   274fe:	1dfa      	adds	r2, r7, #7
   27500:	7812      	ldrb	r2, [r2, #0]
   27502:	2101      	movs	r1, #1
   27504:	4091      	lsls	r1, r2
   27506:	000a      	movs	r2, r1
   27508:	43d2      	mvns	r2, r2
   2750a:	401a      	ands	r2, r3
   2750c:	693b      	ldr	r3, [r7, #16]
   2750e:	615a      	str	r2, [r3, #20]
}
   27510:	46c0      	nop			; (mov r8, r8)
   27512:	46bd      	mov	sp, r7
   27514:	b006      	add	sp, #24
   27516:	bd80      	pop	{r7, pc}
   27518:	000271c9 	.word	0x000271c9
   2751c:	0002ad3d 	.word	0x0002ad3d
   27520:	0002721d 	.word	0x0002721d

00027524 <system_pinmux_get_config_defaults>:
{
   27524:	b580      	push	{r7, lr}
   27526:	b082      	sub	sp, #8
   27528:	af00      	add	r7, sp, #0
   2752a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2752c:	687b      	ldr	r3, [r7, #4]
   2752e:	2280      	movs	r2, #128	; 0x80
   27530:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27532:	687b      	ldr	r3, [r7, #4]
   27534:	2200      	movs	r2, #0
   27536:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27538:	687b      	ldr	r3, [r7, #4]
   2753a:	2201      	movs	r2, #1
   2753c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2753e:	687b      	ldr	r3, [r7, #4]
   27540:	2200      	movs	r2, #0
   27542:	70da      	strb	r2, [r3, #3]
}
   27544:	46c0      	nop			; (mov r8, r8)
   27546:	46bd      	mov	sp, r7
   27548:	b002      	add	sp, #8
   2754a:	bd80      	pop	{r7, pc}

0002754c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   2754c:	b580      	push	{r7, lr}
   2754e:	b084      	sub	sp, #16
   27550:	af00      	add	r7, sp, #0
   27552:	0002      	movs	r2, r0
   27554:	6039      	str	r1, [r7, #0]
   27556:	1dfb      	adds	r3, r7, #7
   27558:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2755a:	230c      	movs	r3, #12
   2755c:	18fb      	adds	r3, r7, r3
   2755e:	0018      	movs	r0, r3
   27560:	4b10      	ldr	r3, [pc, #64]	; (275a4 <port_pin_set_config+0x58>)
   27562:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27564:	230c      	movs	r3, #12
   27566:	18fb      	adds	r3, r7, r3
   27568:	2280      	movs	r2, #128	; 0x80
   2756a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2756c:	683b      	ldr	r3, [r7, #0]
   2756e:	781a      	ldrb	r2, [r3, #0]
   27570:	230c      	movs	r3, #12
   27572:	18fb      	adds	r3, r7, r3
   27574:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   27576:	683b      	ldr	r3, [r7, #0]
   27578:	785a      	ldrb	r2, [r3, #1]
   2757a:	230c      	movs	r3, #12
   2757c:	18fb      	adds	r3, r7, r3
   2757e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   27580:	683b      	ldr	r3, [r7, #0]
   27582:	789a      	ldrb	r2, [r3, #2]
   27584:	230c      	movs	r3, #12
   27586:	18fb      	adds	r3, r7, r3
   27588:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2758a:	230c      	movs	r3, #12
   2758c:	18fa      	adds	r2, r7, r3
   2758e:	1dfb      	adds	r3, r7, #7
   27590:	781b      	ldrb	r3, [r3, #0]
   27592:	0011      	movs	r1, r2
   27594:	0018      	movs	r0, r3
   27596:	4b04      	ldr	r3, [pc, #16]	; (275a8 <port_pin_set_config+0x5c>)
   27598:	4798      	blx	r3
}
   2759a:	46c0      	nop			; (mov r8, r8)
   2759c:	46bd      	mov	sp, r7
   2759e:	b004      	add	sp, #16
   275a0:	bd80      	pop	{r7, pc}
   275a2:	46c0      	nop			; (mov r8, r8)
   275a4:	00027525 	.word	0x00027525
   275a8:	0002ad3d 	.word	0x0002ad3d

000275ac <system_gclk_chan_get_config_defaults>:
{
   275ac:	b580      	push	{r7, lr}
   275ae:	b082      	sub	sp, #8
   275b0:	af00      	add	r7, sp, #0
   275b2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   275b4:	687b      	ldr	r3, [r7, #4]
   275b6:	2200      	movs	r2, #0
   275b8:	701a      	strb	r2, [r3, #0]
}
   275ba:	46c0      	nop			; (mov r8, r8)
   275bc:	46bd      	mov	sp, r7
   275be:	b002      	add	sp, #8
   275c0:	bd80      	pop	{r7, pc}
	...

000275c4 <system_apb_clock_set_mask>:
{
   275c4:	b580      	push	{r7, lr}
   275c6:	b082      	sub	sp, #8
   275c8:	af00      	add	r7, sp, #0
   275ca:	0002      	movs	r2, r0
   275cc:	6039      	str	r1, [r7, #0]
   275ce:	1dfb      	adds	r3, r7, #7
   275d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   275d2:	1dfb      	adds	r3, r7, #7
   275d4:	781b      	ldrb	r3, [r3, #0]
   275d6:	2b01      	cmp	r3, #1
   275d8:	d00a      	beq.n	275f0 <system_apb_clock_set_mask+0x2c>
   275da:	2b02      	cmp	r3, #2
   275dc:	d00f      	beq.n	275fe <system_apb_clock_set_mask+0x3a>
   275de:	2b00      	cmp	r3, #0
   275e0:	d114      	bne.n	2760c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   275e2:	4b0e      	ldr	r3, [pc, #56]	; (2761c <system_apb_clock_set_mask+0x58>)
   275e4:	4a0d      	ldr	r2, [pc, #52]	; (2761c <system_apb_clock_set_mask+0x58>)
   275e6:	6991      	ldr	r1, [r2, #24]
   275e8:	683a      	ldr	r2, [r7, #0]
   275ea:	430a      	orrs	r2, r1
   275ec:	619a      	str	r2, [r3, #24]
			break;
   275ee:	e00f      	b.n	27610 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   275f0:	4b0a      	ldr	r3, [pc, #40]	; (2761c <system_apb_clock_set_mask+0x58>)
   275f2:	4a0a      	ldr	r2, [pc, #40]	; (2761c <system_apb_clock_set_mask+0x58>)
   275f4:	69d1      	ldr	r1, [r2, #28]
   275f6:	683a      	ldr	r2, [r7, #0]
   275f8:	430a      	orrs	r2, r1
   275fa:	61da      	str	r2, [r3, #28]
			break;
   275fc:	e008      	b.n	27610 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   275fe:	4b07      	ldr	r3, [pc, #28]	; (2761c <system_apb_clock_set_mask+0x58>)
   27600:	4a06      	ldr	r2, [pc, #24]	; (2761c <system_apb_clock_set_mask+0x58>)
   27602:	6a11      	ldr	r1, [r2, #32]
   27604:	683a      	ldr	r2, [r7, #0]
   27606:	430a      	orrs	r2, r1
   27608:	621a      	str	r2, [r3, #32]
			break;
   2760a:	e001      	b.n	27610 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2760c:	2317      	movs	r3, #23
   2760e:	e000      	b.n	27612 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27610:	2300      	movs	r3, #0
}
   27612:	0018      	movs	r0, r3
   27614:	46bd      	mov	sp, r7
   27616:	b002      	add	sp, #8
   27618:	bd80      	pop	{r7, pc}
   2761a:	46c0      	nop			; (mov r8, r8)
   2761c:	40000400 	.word	0x40000400

00027620 <system_interrupt_enable>:
{
   27620:	b580      	push	{r7, lr}
   27622:	b082      	sub	sp, #8
   27624:	af00      	add	r7, sp, #0
   27626:	0002      	movs	r2, r0
   27628:	1dfb      	adds	r3, r7, #7
   2762a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2762c:	4b06      	ldr	r3, [pc, #24]	; (27648 <system_interrupt_enable+0x28>)
   2762e:	1dfa      	adds	r2, r7, #7
   27630:	7812      	ldrb	r2, [r2, #0]
   27632:	0011      	movs	r1, r2
   27634:	221f      	movs	r2, #31
   27636:	400a      	ands	r2, r1
   27638:	2101      	movs	r1, #1
   2763a:	4091      	lsls	r1, r2
   2763c:	000a      	movs	r2, r1
   2763e:	601a      	str	r2, [r3, #0]
}
   27640:	46c0      	nop			; (mov r8, r8)
   27642:	46bd      	mov	sp, r7
   27644:	b002      	add	sp, #8
   27646:	bd80      	pop	{r7, pc}
   27648:	e000e100 	.word	0xe000e100

0002764c <system_interrupt_disable>:
{
   2764c:	b580      	push	{r7, lr}
   2764e:	b082      	sub	sp, #8
   27650:	af00      	add	r7, sp, #0
   27652:	0002      	movs	r2, r0
   27654:	1dfb      	adds	r3, r7, #7
   27656:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27658:	4a07      	ldr	r2, [pc, #28]	; (27678 <system_interrupt_disable+0x2c>)
   2765a:	1dfb      	adds	r3, r7, #7
   2765c:	781b      	ldrb	r3, [r3, #0]
   2765e:	0019      	movs	r1, r3
   27660:	231f      	movs	r3, #31
   27662:	400b      	ands	r3, r1
   27664:	2101      	movs	r1, #1
   27666:	4099      	lsls	r1, r3
   27668:	000b      	movs	r3, r1
   2766a:	0019      	movs	r1, r3
   2766c:	2380      	movs	r3, #128	; 0x80
   2766e:	50d1      	str	r1, [r2, r3]
}
   27670:	46c0      	nop			; (mov r8, r8)
   27672:	46bd      	mov	sp, r7
   27674:	b002      	add	sp, #8
   27676:	bd80      	pop	{r7, pc}
   27678:	e000e100 	.word	0xe000e100

0002767c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2767c:	b580      	push	{r7, lr}
   2767e:	b084      	sub	sp, #16
   27680:	af00      	add	r7, sp, #0
   27682:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27684:	687b      	ldr	r3, [r7, #4]
   27686:	681b      	ldr	r3, [r3, #0]
   27688:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2768a:	68fb      	ldr	r3, [r7, #12]
   2768c:	7a9b      	ldrb	r3, [r3, #10]
   2768e:	b2db      	uxtb	r3, r3
   27690:	b25b      	sxtb	r3, r3
   27692:	2b00      	cmp	r3, #0
   27694:	da01      	bge.n	2769a <rtc_calendar_is_syncing+0x1e>
                return true;
   27696:	2301      	movs	r3, #1
   27698:	e000      	b.n	2769c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2769a:	2300      	movs	r3, #0
}
   2769c:	0018      	movs	r0, r3
   2769e:	46bd      	mov	sp, r7
   276a0:	b004      	add	sp, #16
   276a2:	bd80      	pop	{r7, pc}

000276a4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   276a4:	b580      	push	{r7, lr}
   276a6:	b084      	sub	sp, #16
   276a8:	af00      	add	r7, sp, #0
   276aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   276ac:	687b      	ldr	r3, [r7, #4]
   276ae:	681b      	ldr	r3, [r3, #0]
   276b0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   276b2:	2003      	movs	r0, #3
   276b4:	4b0a      	ldr	r3, [pc, #40]	; (276e0 <rtc_calendar_enable+0x3c>)
   276b6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   276b8:	46c0      	nop			; (mov r8, r8)
   276ba:	687b      	ldr	r3, [r7, #4]
   276bc:	0018      	movs	r0, r3
   276be:	4b09      	ldr	r3, [pc, #36]	; (276e4 <rtc_calendar_enable+0x40>)
   276c0:	4798      	blx	r3
   276c2:	1e03      	subs	r3, r0, #0
   276c4:	d1f9      	bne.n	276ba <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   276c6:	68fb      	ldr	r3, [r7, #12]
   276c8:	881b      	ldrh	r3, [r3, #0]
   276ca:	b29b      	uxth	r3, r3
   276cc:	2202      	movs	r2, #2
   276ce:	4313      	orrs	r3, r2
   276d0:	b29a      	uxth	r2, r3
   276d2:	68fb      	ldr	r3, [r7, #12]
   276d4:	801a      	strh	r2, [r3, #0]
}
   276d6:	46c0      	nop			; (mov r8, r8)
   276d8:	46bd      	mov	sp, r7
   276da:	b004      	add	sp, #16
   276dc:	bd80      	pop	{r7, pc}
   276de:	46c0      	nop			; (mov r8, r8)
   276e0:	00027621 	.word	0x00027621
   276e4:	0002767d 	.word	0x0002767d

000276e8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   276e8:	b580      	push	{r7, lr}
   276ea:	b084      	sub	sp, #16
   276ec:	af00      	add	r7, sp, #0
   276ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   276f0:	687b      	ldr	r3, [r7, #4]
   276f2:	681b      	ldr	r3, [r3, #0]
   276f4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   276f6:	2003      	movs	r0, #3
   276f8:	4b0d      	ldr	r3, [pc, #52]	; (27730 <rtc_calendar_disable+0x48>)
   276fa:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   276fc:	46c0      	nop			; (mov r8, r8)
   276fe:	687b      	ldr	r3, [r7, #4]
   27700:	0018      	movs	r0, r3
   27702:	4b0c      	ldr	r3, [pc, #48]	; (27734 <rtc_calendar_disable+0x4c>)
   27704:	4798      	blx	r3
   27706:	1e03      	subs	r3, r0, #0
   27708:	d1f9      	bne.n	276fe <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2770a:	68fb      	ldr	r3, [r7, #12]
   2770c:	22c1      	movs	r2, #193	; 0xc1
   2770e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27710:	68fb      	ldr	r3, [r7, #12]
   27712:	22c1      	movs	r2, #193	; 0xc1
   27714:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   27716:	68fb      	ldr	r3, [r7, #12]
   27718:	881b      	ldrh	r3, [r3, #0]
   2771a:	b29b      	uxth	r3, r3
   2771c:	2202      	movs	r2, #2
   2771e:	4393      	bics	r3, r2
   27720:	b29a      	uxth	r2, r3
   27722:	68fb      	ldr	r3, [r7, #12]
   27724:	801a      	strh	r2, [r3, #0]
}
   27726:	46c0      	nop			; (mov r8, r8)
   27728:	46bd      	mov	sp, r7
   2772a:	b004      	add	sp, #16
   2772c:	bd80      	pop	{r7, pc}
   2772e:	46c0      	nop			; (mov r8, r8)
   27730:	0002764d 	.word	0x0002764d
   27734:	0002767d 	.word	0x0002767d

00027738 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   27738:	b580      	push	{r7, lr}
   2773a:	b084      	sub	sp, #16
   2773c:	af00      	add	r7, sp, #0
   2773e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27740:	687b      	ldr	r3, [r7, #4]
   27742:	681b      	ldr	r3, [r3, #0]
   27744:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   27746:	687b      	ldr	r3, [r7, #4]
   27748:	0018      	movs	r0, r3
   2774a:	4b0d      	ldr	r3, [pc, #52]	; (27780 <rtc_calendar_reset+0x48>)
   2774c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2774e:	687b      	ldr	r3, [r7, #4]
   27750:	2200      	movs	r2, #0
   27752:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27754:	687b      	ldr	r3, [r7, #4]
   27756:	2200      	movs	r2, #0
   27758:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2775a:	46c0      	nop			; (mov r8, r8)
   2775c:	687b      	ldr	r3, [r7, #4]
   2775e:	0018      	movs	r0, r3
   27760:	4b08      	ldr	r3, [pc, #32]	; (27784 <rtc_calendar_reset+0x4c>)
   27762:	4798      	blx	r3
   27764:	1e03      	subs	r3, r0, #0
   27766:	d1f9      	bne.n	2775c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   27768:	68fb      	ldr	r3, [r7, #12]
   2776a:	881b      	ldrh	r3, [r3, #0]
   2776c:	b29b      	uxth	r3, r3
   2776e:	2201      	movs	r2, #1
   27770:	4313      	orrs	r3, r2
   27772:	b29a      	uxth	r2, r3
   27774:	68fb      	ldr	r3, [r7, #12]
   27776:	801a      	strh	r2, [r3, #0]
}
   27778:	46c0      	nop			; (mov r8, r8)
   2777a:	46bd      	mov	sp, r7
   2777c:	b004      	add	sp, #16
   2777e:	bd80      	pop	{r7, pc}
   27780:	000276e9 	.word	0x000276e9
   27784:	0002767d 	.word	0x0002767d

00027788 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27788:	b580      	push	{r7, lr}
   2778a:	b084      	sub	sp, #16
   2778c:	af00      	add	r7, sp, #0
   2778e:	6078      	str	r0, [r7, #4]
   27790:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27792:	683b      	ldr	r3, [r7, #0]
   27794:	88db      	ldrh	r3, [r3, #6]
   27796:	001a      	movs	r2, r3
   27798:	687b      	ldr	r3, [r7, #4]
   2779a:	88db      	ldrh	r3, [r3, #6]
   2779c:	1ad3      	subs	r3, r2, r3
   2779e:	069b      	lsls	r3, r3, #26
   277a0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   277a2:	683b      	ldr	r3, [r7, #0]
   277a4:	795b      	ldrb	r3, [r3, #5]
   277a6:	059b      	lsls	r3, r3, #22
   277a8:	001a      	movs	r2, r3
   277aa:	68fb      	ldr	r3, [r7, #12]
   277ac:	4313      	orrs	r3, r2
   277ae:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   277b0:	683b      	ldr	r3, [r7, #0]
   277b2:	791b      	ldrb	r3, [r3, #4]
   277b4:	045b      	lsls	r3, r3, #17
   277b6:	001a      	movs	r2, r3
   277b8:	68fb      	ldr	r3, [r7, #12]
   277ba:	4313      	orrs	r3, r2
   277bc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   277be:	683b      	ldr	r3, [r7, #0]
   277c0:	789b      	ldrb	r3, [r3, #2]
   277c2:	031b      	lsls	r3, r3, #12
   277c4:	001a      	movs	r2, r3
   277c6:	68fb      	ldr	r3, [r7, #12]
   277c8:	4313      	orrs	r3, r2
   277ca:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   277cc:	687b      	ldr	r3, [r7, #4]
   277ce:	791b      	ldrb	r3, [r3, #4]
   277d0:	2201      	movs	r2, #1
   277d2:	4053      	eors	r3, r2
   277d4:	b2db      	uxtb	r3, r3
   277d6:	2b00      	cmp	r3, #0
   277d8:	d008      	beq.n	277ec <rtc_calendar_time_to_register_value+0x64>
   277da:	683b      	ldr	r3, [r7, #0]
   277dc:	78db      	ldrb	r3, [r3, #3]
   277de:	2b00      	cmp	r3, #0
   277e0:	d004      	beq.n	277ec <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   277e2:	68fb      	ldr	r3, [r7, #12]
   277e4:	2280      	movs	r2, #128	; 0x80
   277e6:	0252      	lsls	r2, r2, #9
   277e8:	4313      	orrs	r3, r2
   277ea:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   277ec:	683b      	ldr	r3, [r7, #0]
   277ee:	785b      	ldrb	r3, [r3, #1]
   277f0:	019b      	lsls	r3, r3, #6
   277f2:	001a      	movs	r2, r3
   277f4:	68fb      	ldr	r3, [r7, #12]
   277f6:	4313      	orrs	r3, r2
   277f8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   277fa:	683b      	ldr	r3, [r7, #0]
   277fc:	781b      	ldrb	r3, [r3, #0]
   277fe:	001a      	movs	r2, r3
   27800:	68fb      	ldr	r3, [r7, #12]
   27802:	4313      	orrs	r3, r2
   27804:	60fb      	str	r3, [r7, #12]

	return register_value;
   27806:	68fb      	ldr	r3, [r7, #12]
}
   27808:	0018      	movs	r0, r3
   2780a:	46bd      	mov	sp, r7
   2780c:	b004      	add	sp, #16
   2780e:	bd80      	pop	{r7, pc}

00027810 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27810:	b580      	push	{r7, lr}
   27812:	b084      	sub	sp, #16
   27814:	af00      	add	r7, sp, #0
   27816:	60f8      	str	r0, [r7, #12]
   27818:	60b9      	str	r1, [r7, #8]
   2781a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2781c:	68bb      	ldr	r3, [r7, #8]
   2781e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27820:	b29a      	uxth	r2, r3
   27822:	68fb      	ldr	r3, [r7, #12]
   27824:	88db      	ldrh	r3, [r3, #6]
   27826:	18d3      	adds	r3, r2, r3
   27828:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2782a:	687b      	ldr	r3, [r7, #4]
   2782c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2782e:	68bb      	ldr	r3, [r7, #8]
   27830:	0d9b      	lsrs	r3, r3, #22
   27832:	b2db      	uxtb	r3, r3
   27834:	220f      	movs	r2, #15
   27836:	4013      	ands	r3, r2
   27838:	b2da      	uxtb	r2, r3
   2783a:	687b      	ldr	r3, [r7, #4]
   2783c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2783e:	68bb      	ldr	r3, [r7, #8]
   27840:	0c5b      	lsrs	r3, r3, #17
   27842:	b2db      	uxtb	r3, r3
   27844:	221f      	movs	r2, #31
   27846:	4013      	ands	r3, r2
   27848:	b2da      	uxtb	r2, r3
   2784a:	687b      	ldr	r3, [r7, #4]
   2784c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2784e:	68fb      	ldr	r3, [r7, #12]
   27850:	791b      	ldrb	r3, [r3, #4]
   27852:	2b00      	cmp	r3, #0
   27854:	d008      	beq.n	27868 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27856:	68bb      	ldr	r3, [r7, #8]
   27858:	0b1b      	lsrs	r3, r3, #12
   2785a:	b2db      	uxtb	r3, r3
   2785c:	221f      	movs	r2, #31
   2785e:	4013      	ands	r3, r2
   27860:	b2da      	uxtb	r2, r3
   27862:	687b      	ldr	r3, [r7, #4]
   27864:	709a      	strb	r2, [r3, #2]
   27866:	e010      	b.n	2788a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27868:	68bb      	ldr	r3, [r7, #8]
   2786a:	0b1b      	lsrs	r3, r3, #12
   2786c:	b2db      	uxtb	r3, r3
   2786e:	220f      	movs	r2, #15
   27870:	4013      	ands	r3, r2
   27872:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27874:	687b      	ldr	r3, [r7, #4]
   27876:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27878:	68ba      	ldr	r2, [r7, #8]
   2787a:	2380      	movs	r3, #128	; 0x80
   2787c:	025b      	lsls	r3, r3, #9
   2787e:	4013      	ands	r3, r2
   27880:	1e5a      	subs	r2, r3, #1
   27882:	4193      	sbcs	r3, r2
   27884:	b2da      	uxtb	r2, r3
   27886:	687b      	ldr	r3, [r7, #4]
   27888:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2788a:	68bb      	ldr	r3, [r7, #8]
   2788c:	099b      	lsrs	r3, r3, #6
   2788e:	b2db      	uxtb	r3, r3
   27890:	223f      	movs	r2, #63	; 0x3f
   27892:	4013      	ands	r3, r2
   27894:	b2da      	uxtb	r2, r3
   27896:	687b      	ldr	r3, [r7, #4]
   27898:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2789a:	68bb      	ldr	r3, [r7, #8]
   2789c:	b2db      	uxtb	r3, r3
   2789e:	223f      	movs	r2, #63	; 0x3f
   278a0:	4013      	ands	r3, r2
   278a2:	b2da      	uxtb	r2, r3
   278a4:	687b      	ldr	r3, [r7, #4]
   278a6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   278a8:	46c0      	nop			; (mov r8, r8)
   278aa:	46bd      	mov	sp, r7
   278ac:	b004      	add	sp, #16
   278ae:	bd80      	pop	{r7, pc}

000278b0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   278b0:	b580      	push	{r7, lr}
   278b2:	b084      	sub	sp, #16
   278b4:	af00      	add	r7, sp, #0
   278b6:	6078      	str	r0, [r7, #4]
   278b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   278ba:	687b      	ldr	r3, [r7, #4]
   278bc:	681b      	ldr	r3, [r3, #0]
   278be:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   278c0:	683b      	ldr	r3, [r7, #0]
   278c2:	881a      	ldrh	r2, [r3, #0]
   278c4:	230e      	movs	r3, #14
   278c6:	18fb      	adds	r3, r7, r3
   278c8:	2108      	movs	r1, #8
   278ca:	430a      	orrs	r2, r1
   278cc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   278ce:	683b      	ldr	r3, [r7, #0]
   278d0:	791b      	ldrb	r3, [r3, #4]
   278d2:	2201      	movs	r2, #1
   278d4:	4053      	eors	r3, r2
   278d6:	b2db      	uxtb	r3, r3
   278d8:	2b00      	cmp	r3, #0
   278da:	d007      	beq.n	278ec <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   278dc:	230e      	movs	r3, #14
   278de:	18fb      	adds	r3, r7, r3
   278e0:	220e      	movs	r2, #14
   278e2:	18ba      	adds	r2, r7, r2
   278e4:	8812      	ldrh	r2, [r2, #0]
   278e6:	2140      	movs	r1, #64	; 0x40
   278e8:	430a      	orrs	r2, r1
   278ea:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   278ec:	683b      	ldr	r3, [r7, #0]
   278ee:	789b      	ldrb	r3, [r3, #2]
   278f0:	2b00      	cmp	r3, #0
   278f2:	d007      	beq.n	27904 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   278f4:	230e      	movs	r3, #14
   278f6:	18fb      	adds	r3, r7, r3
   278f8:	220e      	movs	r2, #14
   278fa:	18ba      	adds	r2, r7, r2
   278fc:	8812      	ldrh	r2, [r2, #0]
   278fe:	2180      	movs	r1, #128	; 0x80
   27900:	430a      	orrs	r2, r1
   27902:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27904:	68bb      	ldr	r3, [r7, #8]
   27906:	220e      	movs	r2, #14
   27908:	18ba      	adds	r2, r7, r2
   2790a:	8812      	ldrh	r2, [r2, #0]
   2790c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2790e:	683b      	ldr	r3, [r7, #0]
   27910:	78db      	ldrb	r3, [r3, #3]
   27912:	2b00      	cmp	r3, #0
   27914:	d008      	beq.n	27928 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27916:	68bb      	ldr	r3, [r7, #8]
   27918:	885b      	ldrh	r3, [r3, #2]
   2791a:	b29b      	uxth	r3, r3
   2791c:	2280      	movs	r2, #128	; 0x80
   2791e:	01d2      	lsls	r2, r2, #7
   27920:	4313      	orrs	r3, r2
   27922:	b29a      	uxth	r2, r3
   27924:	68bb      	ldr	r3, [r7, #8]
   27926:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27928:	230d      	movs	r3, #13
   2792a:	18fb      	adds	r3, r7, r3
   2792c:	2200      	movs	r2, #0
   2792e:	701a      	strb	r2, [r3, #0]
   27930:	e017      	b.n	27962 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27932:	230d      	movs	r3, #13
   27934:	18fb      	adds	r3, r7, r3
   27936:	781a      	ldrb	r2, [r3, #0]
   27938:	0013      	movs	r3, r2
   2793a:	009b      	lsls	r3, r3, #2
   2793c:	189b      	adds	r3, r3, r2
   2793e:	005b      	lsls	r3, r3, #1
   27940:	3308      	adds	r3, #8
   27942:	683a      	ldr	r2, [r7, #0]
   27944:	18d1      	adds	r1, r2, r3
   27946:	230d      	movs	r3, #13
   27948:	18fb      	adds	r3, r7, r3
   2794a:	781a      	ldrb	r2, [r3, #0]
   2794c:	687b      	ldr	r3, [r7, #4]
   2794e:	0018      	movs	r0, r3
   27950:	4b08      	ldr	r3, [pc, #32]	; (27974 <_rtc_calendar_set_config+0xc4>)
   27952:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27954:	230d      	movs	r3, #13
   27956:	18fb      	adds	r3, r7, r3
   27958:	781a      	ldrb	r2, [r3, #0]
   2795a:	230d      	movs	r3, #13
   2795c:	18fb      	adds	r3, r7, r3
   2795e:	3201      	adds	r2, #1
   27960:	701a      	strb	r2, [r3, #0]
   27962:	230d      	movs	r3, #13
   27964:	18fb      	adds	r3, r7, r3
   27966:	781b      	ldrb	r3, [r3, #0]
   27968:	2b00      	cmp	r3, #0
   2796a:	d0e2      	beq.n	27932 <_rtc_calendar_set_config+0x82>
	}
}
   2796c:	46c0      	nop			; (mov r8, r8)
   2796e:	46bd      	mov	sp, r7
   27970:	b004      	add	sp, #16
   27972:	bd80      	pop	{r7, pc}
   27974:	00027a99 	.word	0x00027a99

00027978 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27978:	b580      	push	{r7, lr}
   2797a:	b086      	sub	sp, #24
   2797c:	af00      	add	r7, sp, #0
   2797e:	60f8      	str	r0, [r7, #12]
   27980:	60b9      	str	r1, [r7, #8]
   27982:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27984:	68fb      	ldr	r3, [r7, #12]
   27986:	68ba      	ldr	r2, [r7, #8]
   27988:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2798a:	2120      	movs	r1, #32
   2798c:	2000      	movs	r0, #0
   2798e:	4b18      	ldr	r3, [pc, #96]	; (279f0 <rtc_calendar_init+0x78>)
   27990:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27992:	2314      	movs	r3, #20
   27994:	18fb      	adds	r3, r7, r3
   27996:	0018      	movs	r0, r3
   27998:	4b16      	ldr	r3, [pc, #88]	; (279f4 <rtc_calendar_init+0x7c>)
   2799a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2799c:	2314      	movs	r3, #20
   2799e:	18fb      	adds	r3, r7, r3
   279a0:	2202      	movs	r2, #2
   279a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   279a4:	2314      	movs	r3, #20
   279a6:	18fb      	adds	r3, r7, r3
   279a8:	0019      	movs	r1, r3
   279aa:	2004      	movs	r0, #4
   279ac:	4b12      	ldr	r3, [pc, #72]	; (279f8 <rtc_calendar_init+0x80>)
   279ae:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   279b0:	2004      	movs	r0, #4
   279b2:	4b12      	ldr	r3, [pc, #72]	; (279fc <rtc_calendar_init+0x84>)
   279b4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   279b6:	68fb      	ldr	r3, [r7, #12]
   279b8:	0018      	movs	r0, r3
   279ba:	4b11      	ldr	r3, [pc, #68]	; (27a00 <rtc_calendar_init+0x88>)
   279bc:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   279be:	687b      	ldr	r3, [r7, #4]
   279c0:	791a      	ldrb	r2, [r3, #4]
   279c2:	68fb      	ldr	r3, [r7, #12]
   279c4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   279c6:	687b      	ldr	r3, [r7, #4]
   279c8:	78da      	ldrb	r2, [r3, #3]
   279ca:	68fb      	ldr	r3, [r7, #12]
   279cc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   279ce:	687b      	ldr	r3, [r7, #4]
   279d0:	88da      	ldrh	r2, [r3, #6]
   279d2:	68fb      	ldr	r3, [r7, #12]
   279d4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   279d6:	4b0b      	ldr	r3, [pc, #44]	; (27a04 <rtc_calendar_init+0x8c>)
   279d8:	68fa      	ldr	r2, [r7, #12]
   279da:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   279dc:	687a      	ldr	r2, [r7, #4]
   279de:	68fb      	ldr	r3, [r7, #12]
   279e0:	0011      	movs	r1, r2
   279e2:	0018      	movs	r0, r3
   279e4:	4b08      	ldr	r3, [pc, #32]	; (27a08 <rtc_calendar_init+0x90>)
   279e6:	4798      	blx	r3
}
   279e8:	46c0      	nop			; (mov r8, r8)
   279ea:	46bd      	mov	sp, r7
   279ec:	b006      	add	sp, #24
   279ee:	bd80      	pop	{r7, pc}
   279f0:	000275c5 	.word	0x000275c5
   279f4:	000275ad 	.word	0x000275ad
   279f8:	0002a9dd 	.word	0x0002a9dd
   279fc:	0002aa21 	.word	0x0002aa21
   27a00:	00027739 	.word	0x00027739
   27a04:	20005c5c 	.word	0x20005c5c
   27a08:	000278b1 	.word	0x000278b1

00027a0c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27a0c:	b580      	push	{r7, lr}
   27a0e:	b084      	sub	sp, #16
   27a10:	af00      	add	r7, sp, #0
   27a12:	6078      	str	r0, [r7, #4]
   27a14:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27a16:	687b      	ldr	r3, [r7, #4]
   27a18:	681b      	ldr	r3, [r3, #0]
   27a1a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27a1c:	687b      	ldr	r3, [r7, #4]
   27a1e:	795b      	ldrb	r3, [r3, #5]
   27a20:	2201      	movs	r2, #1
   27a22:	4053      	eors	r3, r2
   27a24:	b2db      	uxtb	r3, r3
   27a26:	2b00      	cmp	r3, #0
   27a28:	d00a      	beq.n	27a40 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27a2a:	68fb      	ldr	r3, [r7, #12]
   27a2c:	4a16      	ldr	r2, [pc, #88]	; (27a88 <rtc_calendar_get_time+0x7c>)
   27a2e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27a30:	46c0      	nop			; (mov r8, r8)
   27a32:	687b      	ldr	r3, [r7, #4]
   27a34:	0018      	movs	r0, r3
   27a36:	4b15      	ldr	r3, [pc, #84]	; (27a8c <rtc_calendar_get_time+0x80>)
   27a38:	4798      	blx	r3
   27a3a:	1e03      	subs	r3, r0, #0
   27a3c:	d1f9      	bne.n	27a32 <rtc_calendar_get_time+0x26>
   27a3e:	e016      	b.n	27a6e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27a40:	68fb      	ldr	r3, [r7, #12]
   27a42:	885b      	ldrh	r3, [r3, #2]
   27a44:	b29b      	uxth	r3, r3
   27a46:	001a      	movs	r2, r3
   27a48:	2380      	movs	r3, #128	; 0x80
   27a4a:	01db      	lsls	r3, r3, #7
   27a4c:	4013      	ands	r3, r2
   27a4e:	d10e      	bne.n	27a6e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27a50:	68fb      	ldr	r3, [r7, #12]
   27a52:	885b      	ldrh	r3, [r3, #2]
   27a54:	b29b      	uxth	r3, r3
   27a56:	4a0e      	ldr	r2, [pc, #56]	; (27a90 <rtc_calendar_get_time+0x84>)
   27a58:	4313      	orrs	r3, r2
   27a5a:	b29a      	uxth	r2, r3
   27a5c:	68fb      	ldr	r3, [r7, #12]
   27a5e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27a60:	46c0      	nop			; (mov r8, r8)
   27a62:	687b      	ldr	r3, [r7, #4]
   27a64:	0018      	movs	r0, r3
   27a66:	4b09      	ldr	r3, [pc, #36]	; (27a8c <rtc_calendar_get_time+0x80>)
   27a68:	4798      	blx	r3
   27a6a:	1e03      	subs	r3, r0, #0
   27a6c:	d1f9      	bne.n	27a62 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27a6e:	68fb      	ldr	r3, [r7, #12]
   27a70:	691b      	ldr	r3, [r3, #16]
   27a72:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27a74:	683a      	ldr	r2, [r7, #0]
   27a76:	68b9      	ldr	r1, [r7, #8]
   27a78:	687b      	ldr	r3, [r7, #4]
   27a7a:	0018      	movs	r0, r3
   27a7c:	4b05      	ldr	r3, [pc, #20]	; (27a94 <rtc_calendar_get_time+0x88>)
   27a7e:	4798      	blx	r3
}
   27a80:	46c0      	nop			; (mov r8, r8)
   27a82:	46bd      	mov	sp, r7
   27a84:	b004      	add	sp, #16
   27a86:	bd80      	pop	{r7, pc}
   27a88:	ffff8000 	.word	0xffff8000
   27a8c:	0002767d 	.word	0x0002767d
   27a90:	ffffc000 	.word	0xffffc000
   27a94:	00027811 	.word	0x00027811

00027a98 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27a98:	b580      	push	{r7, lr}
   27a9a:	b086      	sub	sp, #24
   27a9c:	af00      	add	r7, sp, #0
   27a9e:	60f8      	str	r0, [r7, #12]
   27aa0:	60b9      	str	r1, [r7, #8]
   27aa2:	1dfb      	adds	r3, r7, #7
   27aa4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27aa6:	68fb      	ldr	r3, [r7, #12]
   27aa8:	681b      	ldr	r3, [r3, #0]
   27aaa:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27aac:	1dfb      	adds	r3, r7, #7
   27aae:	781b      	ldrb	r3, [r3, #0]
   27ab0:	2b01      	cmp	r3, #1
   27ab2:	d901      	bls.n	27ab8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27ab4:	2317      	movs	r3, #23
   27ab6:	e021      	b.n	27afc <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27ab8:	68ba      	ldr	r2, [r7, #8]
   27aba:	68fb      	ldr	r3, [r7, #12]
   27abc:	0011      	movs	r1, r2
   27abe:	0018      	movs	r0, r3
   27ac0:	4b10      	ldr	r3, [pc, #64]	; (27b04 <rtc_calendar_set_alarm+0x6c>)
   27ac2:	4798      	blx	r3
   27ac4:	0003      	movs	r3, r0
   27ac6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27ac8:	46c0      	nop			; (mov r8, r8)
   27aca:	68fb      	ldr	r3, [r7, #12]
   27acc:	0018      	movs	r0, r3
   27ace:	4b0e      	ldr	r3, [pc, #56]	; (27b08 <rtc_calendar_set_alarm+0x70>)
   27ad0:	4798      	blx	r3
   27ad2:	1e03      	subs	r3, r0, #0
   27ad4:	d1f9      	bne.n	27aca <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27ad6:	1dfb      	adds	r3, r7, #7
   27ad8:	781a      	ldrb	r2, [r3, #0]
   27ada:	697b      	ldr	r3, [r7, #20]
   27adc:	3203      	adds	r2, #3
   27ade:	00d2      	lsls	r2, r2, #3
   27ae0:	6939      	ldr	r1, [r7, #16]
   27ae2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27ae4:	1dfb      	adds	r3, r7, #7
   27ae6:	781b      	ldrb	r3, [r3, #0]
   27ae8:	68ba      	ldr	r2, [r7, #8]
   27aea:	7a11      	ldrb	r1, [r2, #8]
   27aec:	697a      	ldr	r2, [r7, #20]
   27aee:	3303      	adds	r3, #3
   27af0:	00db      	lsls	r3, r3, #3
   27af2:	18d3      	adds	r3, r2, r3
   27af4:	3304      	adds	r3, #4
   27af6:	1c0a      	adds	r2, r1, #0
   27af8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27afa:	2300      	movs	r3, #0
}
   27afc:	0018      	movs	r0, r3
   27afe:	46bd      	mov	sp, r7
   27b00:	b006      	add	sp, #24
   27b02:	bd80      	pop	{r7, pc}
   27b04:	00027789 	.word	0x00027789
   27b08:	0002767d 	.word	0x0002767d

00027b0c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27b0c:	b580      	push	{r7, lr}
   27b0e:	b086      	sub	sp, #24
   27b10:	af00      	add	r7, sp, #0
   27b12:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27b14:	4b28      	ldr	r3, [pc, #160]	; (27bb8 <_rtc_interrupt_handler+0xac>)
   27b16:	687a      	ldr	r2, [r7, #4]
   27b18:	0092      	lsls	r2, r2, #2
   27b1a:	58d3      	ldr	r3, [r2, r3]
   27b1c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27b1e:	697b      	ldr	r3, [r7, #20]
   27b20:	681b      	ldr	r3, [r3, #0]
   27b22:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27b24:	230e      	movs	r3, #14
   27b26:	18fb      	adds	r3, r7, r3
   27b28:	697a      	ldr	r2, [r7, #20]
   27b2a:	8a52      	ldrh	r2, [r2, #18]
   27b2c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27b2e:	697b      	ldr	r3, [r7, #20]
   27b30:	8a1b      	ldrh	r3, [r3, #16]
   27b32:	b29a      	uxth	r2, r3
   27b34:	230e      	movs	r3, #14
   27b36:	18fb      	adds	r3, r7, r3
   27b38:	210e      	movs	r1, #14
   27b3a:	1879      	adds	r1, r7, r1
   27b3c:	8809      	ldrh	r1, [r1, #0]
   27b3e:	400a      	ands	r2, r1
   27b40:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27b42:	693b      	ldr	r3, [r7, #16]
   27b44:	7a1b      	ldrb	r3, [r3, #8]
   27b46:	b2da      	uxtb	r2, r3
   27b48:	230c      	movs	r3, #12
   27b4a:	18fb      	adds	r3, r7, r3
   27b4c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27b4e:	693b      	ldr	r3, [r7, #16]
   27b50:	79db      	ldrb	r3, [r3, #7]
   27b52:	b2db      	uxtb	r3, r3
   27b54:	b29a      	uxth	r2, r3
   27b56:	230c      	movs	r3, #12
   27b58:	18fb      	adds	r3, r7, r3
   27b5a:	210c      	movs	r1, #12
   27b5c:	1879      	adds	r1, r7, r1
   27b5e:	8809      	ldrh	r1, [r1, #0]
   27b60:	400a      	ands	r2, r1
   27b62:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27b64:	230c      	movs	r3, #12
   27b66:	18fb      	adds	r3, r7, r3
   27b68:	881b      	ldrh	r3, [r3, #0]
   27b6a:	2280      	movs	r2, #128	; 0x80
   27b6c:	4013      	ands	r3, r2
   27b6e:	d00c      	beq.n	27b8a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27b70:	230e      	movs	r3, #14
   27b72:	18fb      	adds	r3, r7, r3
   27b74:	881b      	ldrh	r3, [r3, #0]
   27b76:	2202      	movs	r2, #2
   27b78:	4013      	ands	r3, r2
   27b7a:	d002      	beq.n	27b82 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27b7c:	697b      	ldr	r3, [r7, #20]
   27b7e:	68db      	ldr	r3, [r3, #12]
   27b80:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27b82:	693b      	ldr	r3, [r7, #16]
   27b84:	2280      	movs	r2, #128	; 0x80
   27b86:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27b88:	e011      	b.n	27bae <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27b8a:	230c      	movs	r3, #12
   27b8c:	18fb      	adds	r3, r7, r3
   27b8e:	881b      	ldrh	r3, [r3, #0]
   27b90:	2201      	movs	r2, #1
   27b92:	4013      	ands	r3, r2
   27b94:	d00b      	beq.n	27bae <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27b96:	230e      	movs	r3, #14
   27b98:	18fb      	adds	r3, r7, r3
   27b9a:	881b      	ldrh	r3, [r3, #0]
   27b9c:	2201      	movs	r2, #1
   27b9e:	4013      	ands	r3, r2
   27ba0:	d002      	beq.n	27ba8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27ba2:	697b      	ldr	r3, [r7, #20]
   27ba4:	689b      	ldr	r3, [r3, #8]
   27ba6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27ba8:	693b      	ldr	r3, [r7, #16]
   27baa:	2201      	movs	r2, #1
   27bac:	721a      	strb	r2, [r3, #8]
}
   27bae:	46c0      	nop			; (mov r8, r8)
   27bb0:	46bd      	mov	sp, r7
   27bb2:	b006      	add	sp, #24
   27bb4:	bd80      	pop	{r7, pc}
   27bb6:	46c0      	nop			; (mov r8, r8)
   27bb8:	20005c5c 	.word	0x20005c5c

00027bbc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27bbc:	b580      	push	{r7, lr}
   27bbe:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27bc0:	2000      	movs	r0, #0
   27bc2:	4b02      	ldr	r3, [pc, #8]	; (27bcc <RTC_Handler+0x10>)
   27bc4:	4798      	blx	r3
}
   27bc6:	46c0      	nop			; (mov r8, r8)
   27bc8:	46bd      	mov	sp, r7
   27bca:	bd80      	pop	{r7, pc}
   27bcc:	00027b0d 	.word	0x00027b0d

00027bd0 <system_gclk_chan_get_config_defaults>:
{
   27bd0:	b580      	push	{r7, lr}
   27bd2:	b082      	sub	sp, #8
   27bd4:	af00      	add	r7, sp, #0
   27bd6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27bd8:	687b      	ldr	r3, [r7, #4]
   27bda:	2200      	movs	r2, #0
   27bdc:	701a      	strb	r2, [r3, #0]
}
   27bde:	46c0      	nop			; (mov r8, r8)
   27be0:	46bd      	mov	sp, r7
   27be2:	b002      	add	sp, #8
   27be4:	bd80      	pop	{r7, pc}

00027be6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27be6:	b5f0      	push	{r4, r5, r6, r7, lr}
   27be8:	b08d      	sub	sp, #52	; 0x34
   27bea:	af00      	add	r7, sp, #0
   27bec:	60b8      	str	r0, [r7, #8]
   27bee:	60f9      	str	r1, [r7, #12]
   27bf0:	603a      	str	r2, [r7, #0]
   27bf2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27bf4:	2300      	movs	r3, #0
   27bf6:	2400      	movs	r4, #0
   27bf8:	623b      	str	r3, [r7, #32]
   27bfa:	627c      	str	r4, [r7, #36]	; 0x24
   27bfc:	2300      	movs	r3, #0
   27bfe:	2400      	movs	r4, #0
   27c00:	61bb      	str	r3, [r7, #24]
   27c02:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27c04:	233f      	movs	r3, #63	; 0x3f
   27c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   27c08:	e053      	b.n	27cb2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c0c:	3b20      	subs	r3, #32
   27c0e:	2b00      	cmp	r3, #0
   27c10:	db04      	blt.n	27c1c <long_division+0x36>
   27c12:	2201      	movs	r2, #1
   27c14:	409a      	lsls	r2, r3
   27c16:	0013      	movs	r3, r2
   27c18:	617b      	str	r3, [r7, #20]
   27c1a:	e00b      	b.n	27c34 <long_division+0x4e>
   27c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c1e:	2220      	movs	r2, #32
   27c20:	1ad3      	subs	r3, r2, r3
   27c22:	2201      	movs	r2, #1
   27c24:	40da      	lsrs	r2, r3
   27c26:	0013      	movs	r3, r2
   27c28:	2100      	movs	r1, #0
   27c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27c2c:	4091      	lsls	r1, r2
   27c2e:	000a      	movs	r2, r1
   27c30:	4313      	orrs	r3, r2
   27c32:	617b      	str	r3, [r7, #20]
   27c34:	2201      	movs	r2, #1
   27c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c38:	409a      	lsls	r2, r3
   27c3a:	0013      	movs	r3, r2
   27c3c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27c3e:	69bb      	ldr	r3, [r7, #24]
   27c40:	69fc      	ldr	r4, [r7, #28]
   27c42:	18db      	adds	r3, r3, r3
   27c44:	4164      	adcs	r4, r4
   27c46:	61bb      	str	r3, [r7, #24]
   27c48:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27c4a:	68bb      	ldr	r3, [r7, #8]
   27c4c:	693a      	ldr	r2, [r7, #16]
   27c4e:	401a      	ands	r2, r3
   27c50:	0015      	movs	r5, r2
   27c52:	68fb      	ldr	r3, [r7, #12]
   27c54:	697a      	ldr	r2, [r7, #20]
   27c56:	401a      	ands	r2, r3
   27c58:	0016      	movs	r6, r2
   27c5a:	002b      	movs	r3, r5
   27c5c:	4333      	orrs	r3, r6
   27c5e:	d007      	beq.n	27c70 <long_division+0x8a>
			r |= 0x01;
   27c60:	69bb      	ldr	r3, [r7, #24]
   27c62:	2201      	movs	r2, #1
   27c64:	4313      	orrs	r3, r2
   27c66:	61bb      	str	r3, [r7, #24]
   27c68:	69fb      	ldr	r3, [r7, #28]
   27c6a:	2200      	movs	r2, #0
   27c6c:	4313      	orrs	r3, r2
   27c6e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27c70:	687a      	ldr	r2, [r7, #4]
   27c72:	69fb      	ldr	r3, [r7, #28]
   27c74:	429a      	cmp	r2, r3
   27c76:	d819      	bhi.n	27cac <long_division+0xc6>
   27c78:	687a      	ldr	r2, [r7, #4]
   27c7a:	69fb      	ldr	r3, [r7, #28]
   27c7c:	429a      	cmp	r2, r3
   27c7e:	d103      	bne.n	27c88 <long_division+0xa2>
   27c80:	683a      	ldr	r2, [r7, #0]
   27c82:	69bb      	ldr	r3, [r7, #24]
   27c84:	429a      	cmp	r2, r3
   27c86:	d811      	bhi.n	27cac <long_division+0xc6>
			r = r - d;
   27c88:	69b9      	ldr	r1, [r7, #24]
   27c8a:	69fa      	ldr	r2, [r7, #28]
   27c8c:	683b      	ldr	r3, [r7, #0]
   27c8e:	687c      	ldr	r4, [r7, #4]
   27c90:	1ac9      	subs	r1, r1, r3
   27c92:	41a2      	sbcs	r2, r4
   27c94:	000b      	movs	r3, r1
   27c96:	0014      	movs	r4, r2
   27c98:	61bb      	str	r3, [r7, #24]
   27c9a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27c9c:	6a3a      	ldr	r2, [r7, #32]
   27c9e:	693b      	ldr	r3, [r7, #16]
   27ca0:	4313      	orrs	r3, r2
   27ca2:	623b      	str	r3, [r7, #32]
   27ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27ca6:	697b      	ldr	r3, [r7, #20]
   27ca8:	4313      	orrs	r3, r2
   27caa:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27cae:	3b01      	subs	r3, #1
   27cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   27cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27cb4:	2b00      	cmp	r3, #0
   27cb6:	daa8      	bge.n	27c0a <long_division+0x24>
		}
	}

	return q;
   27cb8:	6a3b      	ldr	r3, [r7, #32]
   27cba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27cbc:	0018      	movs	r0, r3
   27cbe:	0021      	movs	r1, r4
   27cc0:	46bd      	mov	sp, r7
   27cc2:	b00d      	add	sp, #52	; 0x34
   27cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027cc6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27cc6:	b580      	push	{r7, lr}
   27cc8:	b086      	sub	sp, #24
   27cca:	af00      	add	r7, sp, #0
   27ccc:	60f8      	str	r0, [r7, #12]
   27cce:	60b9      	str	r1, [r7, #8]
   27cd0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27cd2:	2316      	movs	r3, #22
   27cd4:	18fb      	adds	r3, r7, r3
   27cd6:	2200      	movs	r2, #0
   27cd8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27cda:	68bb      	ldr	r3, [r7, #8]
   27cdc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27cde:	68bb      	ldr	r3, [r7, #8]
   27ce0:	085a      	lsrs	r2, r3, #1
   27ce2:	68fb      	ldr	r3, [r7, #12]
   27ce4:	429a      	cmp	r2, r3
   27ce6:	d201      	bcs.n	27cec <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27ce8:	2340      	movs	r3, #64	; 0x40
   27cea:	e026      	b.n	27d3a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27cec:	68bb      	ldr	r3, [r7, #8]
   27cee:	085b      	lsrs	r3, r3, #1
   27cf0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27cf2:	e00a      	b.n	27d0a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27cf4:	693a      	ldr	r2, [r7, #16]
   27cf6:	68fb      	ldr	r3, [r7, #12]
   27cf8:	1ad3      	subs	r3, r2, r3
   27cfa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27cfc:	2316      	movs	r3, #22
   27cfe:	18fb      	adds	r3, r7, r3
   27d00:	881a      	ldrh	r2, [r3, #0]
   27d02:	2316      	movs	r3, #22
   27d04:	18fb      	adds	r3, r7, r3
   27d06:	3201      	adds	r2, #1
   27d08:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27d0a:	693a      	ldr	r2, [r7, #16]
   27d0c:	68fb      	ldr	r3, [r7, #12]
   27d0e:	429a      	cmp	r2, r3
   27d10:	d2f0      	bcs.n	27cf4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27d12:	2316      	movs	r3, #22
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	2216      	movs	r2, #22
   27d18:	18ba      	adds	r2, r7, r2
   27d1a:	8812      	ldrh	r2, [r2, #0]
   27d1c:	3a01      	subs	r2, #1
   27d1e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27d20:	2316      	movs	r3, #22
   27d22:	18fb      	adds	r3, r7, r3
   27d24:	881b      	ldrh	r3, [r3, #0]
   27d26:	2bff      	cmp	r3, #255	; 0xff
   27d28:	d901      	bls.n	27d2e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d2a:	2340      	movs	r3, #64	; 0x40
   27d2c:	e005      	b.n	27d3a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27d2e:	687b      	ldr	r3, [r7, #4]
   27d30:	2216      	movs	r2, #22
   27d32:	18ba      	adds	r2, r7, r2
   27d34:	8812      	ldrh	r2, [r2, #0]
   27d36:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27d38:	2300      	movs	r3, #0
	}
}
   27d3a:	0018      	movs	r0, r3
   27d3c:	46bd      	mov	sp, r7
   27d3e:	b006      	add	sp, #24
   27d40:	bd80      	pop	{r7, pc}
	...

00027d44 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d46:	b0a1      	sub	sp, #132	; 0x84
   27d48:	af00      	add	r7, sp, #0
   27d4a:	64f8      	str	r0, [r7, #76]	; 0x4c
   27d4c:	64b9      	str	r1, [r7, #72]	; 0x48
   27d4e:	647a      	str	r2, [r7, #68]	; 0x44
   27d50:	2243      	movs	r2, #67	; 0x43
   27d52:	18ba      	adds	r2, r7, r2
   27d54:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27d56:	2300      	movs	r3, #0
   27d58:	2400      	movs	r4, #0
   27d5a:	673b      	str	r3, [r7, #112]	; 0x70
   27d5c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27d5e:	2300      	movs	r3, #0
   27d60:	2400      	movs	r4, #0
   27d62:	66bb      	str	r3, [r7, #104]	; 0x68
   27d64:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27d66:	2300      	movs	r3, #0
   27d68:	2400      	movs	r4, #0
   27d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   27d6c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27d6e:	2300      	movs	r3, #0
   27d70:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27d72:	2358      	movs	r3, #88	; 0x58
   27d74:	2240      	movs	r2, #64	; 0x40
   27d76:	4694      	mov	ip, r2
   27d78:	44bc      	add	ip, r7
   27d7a:	4463      	add	r3, ip
   27d7c:	781a      	ldrb	r2, [r3, #0]
   27d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27d80:	435a      	muls	r2, r3
   27d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27d84:	429a      	cmp	r2, r3
   27d86:	d901      	bls.n	27d8c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d88:	2340      	movs	r3, #64	; 0x40
   27d8a:	e0b3      	b.n	27ef4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27d8c:	2343      	movs	r3, #67	; 0x43
   27d8e:	18fb      	adds	r3, r7, r3
   27d90:	781b      	ldrb	r3, [r3, #0]
   27d92:	2b00      	cmp	r3, #0
   27d94:	d13d      	bne.n	27e12 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27d96:	2358      	movs	r3, #88	; 0x58
   27d98:	2240      	movs	r2, #64	; 0x40
   27d9a:	4694      	mov	ip, r2
   27d9c:	44bc      	add	ip, r7
   27d9e:	4463      	add	r3, ip
   27da0:	781b      	ldrb	r3, [r3, #0]
   27da2:	b2db      	uxtb	r3, r3
   27da4:	613b      	str	r3, [r7, #16]
   27da6:	2300      	movs	r3, #0
   27da8:	617b      	str	r3, [r7, #20]
   27daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27dac:	60bb      	str	r3, [r7, #8]
   27dae:	2300      	movs	r3, #0
   27db0:	60fb      	str	r3, [r7, #12]
   27db2:	4c52      	ldr	r4, [pc, #328]	; (27efc <_sercom_get_async_baud_val+0x1b8>)
   27db4:	68ba      	ldr	r2, [r7, #8]
   27db6:	68fb      	ldr	r3, [r7, #12]
   27db8:	6938      	ldr	r0, [r7, #16]
   27dba:	6979      	ldr	r1, [r7, #20]
   27dbc:	47a0      	blx	r4
   27dbe:	0003      	movs	r3, r0
   27dc0:	000c      	movs	r4, r1
   27dc2:	001b      	movs	r3, r3
   27dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   27dc6:	2300      	movs	r3, #0
   27dc8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27dcc:	603b      	str	r3, [r7, #0]
   27dce:	2300      	movs	r3, #0
   27dd0:	607b      	str	r3, [r7, #4]
   27dd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27dd4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27dd6:	683a      	ldr	r2, [r7, #0]
   27dd8:	687b      	ldr	r3, [r7, #4]
   27dda:	4c49      	ldr	r4, [pc, #292]	; (27f00 <_sercom_get_async_baud_val+0x1bc>)
   27ddc:	47a0      	blx	r4
   27dde:	0003      	movs	r3, r0
   27de0:	000c      	movs	r4, r1
   27de2:	673b      	str	r3, [r7, #112]	; 0x70
   27de4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27de6:	2100      	movs	r1, #0
   27de8:	2201      	movs	r2, #1
   27dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27dec:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27dee:	1ac9      	subs	r1, r1, r3
   27df0:	41a2      	sbcs	r2, r4
   27df2:	000b      	movs	r3, r1
   27df4:	0014      	movs	r4, r2
   27df6:	66bb      	str	r3, [r7, #104]	; 0x68
   27df8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27dfc:	0c1b      	lsrs	r3, r3, #16
   27dfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27e00:	0416      	lsls	r6, r2, #16
   27e02:	431e      	orrs	r6, r3
   27e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27e06:	041d      	lsls	r5, r3, #16
   27e08:	0033      	movs	r3, r6
   27e0a:	67bb      	str	r3, [r7, #120]	; 0x78
   27e0c:	2300      	movs	r3, #0
   27e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27e10:	e06a      	b.n	27ee8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27e12:	2343      	movs	r3, #67	; 0x43
   27e14:	18fb      	adds	r3, r7, r3
   27e16:	781b      	ldrb	r3, [r3, #0]
   27e18:	2b01      	cmp	r3, #1
   27e1a:	d165      	bne.n	27ee8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27e1e:	633b      	str	r3, [r7, #48]	; 0x30
   27e20:	2300      	movs	r3, #0
   27e22:	637b      	str	r3, [r7, #52]	; 0x34
   27e24:	2358      	movs	r3, #88	; 0x58
   27e26:	2240      	movs	r2, #64	; 0x40
   27e28:	4694      	mov	ip, r2
   27e2a:	44bc      	add	ip, r7
   27e2c:	4463      	add	r3, ip
   27e2e:	781b      	ldrb	r3, [r3, #0]
   27e30:	b2db      	uxtb	r3, r3
   27e32:	62bb      	str	r3, [r7, #40]	; 0x28
   27e34:	2300      	movs	r3, #0
   27e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   27e38:	4c30      	ldr	r4, [pc, #192]	; (27efc <_sercom_get_async_baud_val+0x1b8>)
   27e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27e40:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27e42:	47a0      	blx	r4
   27e44:	0003      	movs	r3, r0
   27e46:	000c      	movs	r4, r1
   27e48:	65bb      	str	r3, [r7, #88]	; 0x58
   27e4a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e4e:	623b      	str	r3, [r7, #32]
   27e50:	2300      	movs	r3, #0
   27e52:	627b      	str	r3, [r7, #36]	; 0x24
   27e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e56:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e58:	001a      	movs	r2, r3
   27e5a:	0023      	movs	r3, r4
   27e5c:	6a38      	ldr	r0, [r7, #32]
   27e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27e60:	4c27      	ldr	r4, [pc, #156]	; (27f00 <_sercom_get_async_baud_val+0x1bc>)
   27e62:	47a0      	blx	r4
   27e64:	0003      	movs	r3, r0
   27e66:	000c      	movs	r4, r1
   27e68:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27e6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27e6c:	2380      	movs	r3, #128	; 0x80
   27e6e:	019b      	lsls	r3, r3, #6
   27e70:	429a      	cmp	r2, r3
   27e72:	d901      	bls.n	27e78 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27e74:	2340      	movs	r3, #64	; 0x40
   27e76:	e03d      	b.n	27ef4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e7a:	61bb      	str	r3, [r7, #24]
   27e7c:	2300      	movs	r3, #0
   27e7e:	61fb      	str	r3, [r7, #28]
   27e80:	69b9      	ldr	r1, [r7, #24]
   27e82:	69fa      	ldr	r2, [r7, #28]
   27e84:	000b      	movs	r3, r1
   27e86:	0f5b      	lsrs	r3, r3, #29
   27e88:	0010      	movs	r0, r2
   27e8a:	00c0      	lsls	r0, r0, #3
   27e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27e90:	4318      	orrs	r0, r3
   27e92:	63f8      	str	r0, [r7, #60]	; 0x3c
   27e94:	000b      	movs	r3, r1
   27e96:	00db      	lsls	r3, r3, #3
   27e98:	63bb      	str	r3, [r7, #56]	; 0x38
   27e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27e9c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27e9e:	001a      	movs	r2, r3
   27ea0:	0023      	movs	r3, r4
   27ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27ea6:	4c16      	ldr	r4, [pc, #88]	; (27f00 <_sercom_get_async_baud_val+0x1bc>)
   27ea8:	47a0      	blx	r4
   27eaa:	0003      	movs	r3, r0
   27eac:	000c      	movs	r4, r1
   27eae:	65bb      	str	r3, [r7, #88]	; 0x58
   27eb0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27eb4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27eb6:	b2d9      	uxtb	r1, r3
   27eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27eba:	b2db      	uxtb	r3, r3
   27ebc:	00db      	lsls	r3, r3, #3
   27ebe:	b2da      	uxtb	r2, r3
   27ec0:	2317      	movs	r3, #23
   27ec2:	2040      	movs	r0, #64	; 0x40
   27ec4:	4684      	mov	ip, r0
   27ec6:	44bc      	add	ip, r7
   27ec8:	4463      	add	r3, ip
   27eca:	1a8a      	subs	r2, r1, r2
   27ecc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27ece:	2317      	movs	r3, #23
   27ed0:	2240      	movs	r2, #64	; 0x40
   27ed2:	4694      	mov	ip, r2
   27ed4:	44bc      	add	ip, r7
   27ed6:	4463      	add	r3, ip
   27ed8:	781b      	ldrb	r3, [r3, #0]
   27eda:	035b      	lsls	r3, r3, #13
   27edc:	001a      	movs	r2, r3
   27ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27ee0:	4313      	orrs	r3, r2
   27ee2:	67bb      	str	r3, [r7, #120]	; 0x78
   27ee4:	2300      	movs	r3, #0
   27ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27eea:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27eec:	b29a      	uxth	r2, r3
   27eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27ef0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27ef2:	2300      	movs	r3, #0
}
   27ef4:	0018      	movs	r0, r3
   27ef6:	46bd      	mov	sp, r7
   27ef8:	b021      	add	sp, #132	; 0x84
   27efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27efc:	00033991 	.word	0x00033991
   27f00:	00027be7 	.word	0x00027be7

00027f04 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27f04:	b580      	push	{r7, lr}
   27f06:	b084      	sub	sp, #16
   27f08:	af00      	add	r7, sp, #0
   27f0a:	0002      	movs	r2, r0
   27f0c:	1dfb      	adds	r3, r7, #7
   27f0e:	701a      	strb	r2, [r3, #0]
   27f10:	1dbb      	adds	r3, r7, #6
   27f12:	1c0a      	adds	r2, r1, #0
   27f14:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27f16:	4b1a      	ldr	r3, [pc, #104]	; (27f80 <sercom_set_gclk_generator+0x7c>)
   27f18:	781b      	ldrb	r3, [r3, #0]
   27f1a:	2201      	movs	r2, #1
   27f1c:	4053      	eors	r3, r2
   27f1e:	b2db      	uxtb	r3, r3
   27f20:	2b00      	cmp	r3, #0
   27f22:	d103      	bne.n	27f2c <sercom_set_gclk_generator+0x28>
   27f24:	1dbb      	adds	r3, r7, #6
   27f26:	781b      	ldrb	r3, [r3, #0]
   27f28:	2b00      	cmp	r3, #0
   27f2a:	d01b      	beq.n	27f64 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27f2c:	230c      	movs	r3, #12
   27f2e:	18fb      	adds	r3, r7, r3
   27f30:	0018      	movs	r0, r3
   27f32:	4b14      	ldr	r3, [pc, #80]	; (27f84 <sercom_set_gclk_generator+0x80>)
   27f34:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27f36:	230c      	movs	r3, #12
   27f38:	18fb      	adds	r3, r7, r3
   27f3a:	1dfa      	adds	r2, r7, #7
   27f3c:	7812      	ldrb	r2, [r2, #0]
   27f3e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27f40:	230c      	movs	r3, #12
   27f42:	18fb      	adds	r3, r7, r3
   27f44:	0019      	movs	r1, r3
   27f46:	2013      	movs	r0, #19
   27f48:	4b0f      	ldr	r3, [pc, #60]	; (27f88 <sercom_set_gclk_generator+0x84>)
   27f4a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27f4c:	2013      	movs	r0, #19
   27f4e:	4b0f      	ldr	r3, [pc, #60]	; (27f8c <sercom_set_gclk_generator+0x88>)
   27f50:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27f52:	4b0b      	ldr	r3, [pc, #44]	; (27f80 <sercom_set_gclk_generator+0x7c>)
   27f54:	1dfa      	adds	r2, r7, #7
   27f56:	7812      	ldrb	r2, [r2, #0]
   27f58:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27f5a:	4b09      	ldr	r3, [pc, #36]	; (27f80 <sercom_set_gclk_generator+0x7c>)
   27f5c:	2201      	movs	r2, #1
   27f5e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27f60:	2300      	movs	r3, #0
   27f62:	e008      	b.n	27f76 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27f64:	4b06      	ldr	r3, [pc, #24]	; (27f80 <sercom_set_gclk_generator+0x7c>)
   27f66:	785b      	ldrb	r3, [r3, #1]
   27f68:	1dfa      	adds	r2, r7, #7
   27f6a:	7812      	ldrb	r2, [r2, #0]
   27f6c:	429a      	cmp	r2, r3
   27f6e:	d101      	bne.n	27f74 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27f70:	2300      	movs	r3, #0
   27f72:	e000      	b.n	27f76 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27f74:	231d      	movs	r3, #29
}
   27f76:	0018      	movs	r0, r3
   27f78:	46bd      	mov	sp, r7
   27f7a:	b004      	add	sp, #16
   27f7c:	bd80      	pop	{r7, pc}
   27f7e:	46c0      	nop			; (mov r8, r8)
   27f80:	200042b8 	.word	0x200042b8
   27f84:	00027bd1 	.word	0x00027bd1
   27f88:	0002a9dd 	.word	0x0002a9dd
   27f8c:	0002aa21 	.word	0x0002aa21

00027f90 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   27f90:	b580      	push	{r7, lr}
   27f92:	b082      	sub	sp, #8
   27f94:	af00      	add	r7, sp, #0
   27f96:	6078      	str	r0, [r7, #4]
   27f98:	000a      	movs	r2, r1
   27f9a:	1cfb      	adds	r3, r7, #3
   27f9c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   27f9e:	687b      	ldr	r3, [r7, #4]
   27fa0:	4a4d      	ldr	r2, [pc, #308]	; (280d8 <_sercom_get_default_pad+0x148>)
   27fa2:	4293      	cmp	r3, r2
   27fa4:	d03f      	beq.n	28026 <_sercom_get_default_pad+0x96>
   27fa6:	4a4c      	ldr	r2, [pc, #304]	; (280d8 <_sercom_get_default_pad+0x148>)
   27fa8:	4293      	cmp	r3, r2
   27faa:	d806      	bhi.n	27fba <_sercom_get_default_pad+0x2a>
   27fac:	4a4b      	ldr	r2, [pc, #300]	; (280dc <_sercom_get_default_pad+0x14c>)
   27fae:	4293      	cmp	r3, r2
   27fb0:	d00f      	beq.n	27fd2 <_sercom_get_default_pad+0x42>
   27fb2:	4a4b      	ldr	r2, [pc, #300]	; (280e0 <_sercom_get_default_pad+0x150>)
   27fb4:	4293      	cmp	r3, r2
   27fb6:	d021      	beq.n	27ffc <_sercom_get_default_pad+0x6c>
   27fb8:	e089      	b.n	280ce <_sercom_get_default_pad+0x13e>
   27fba:	4a4a      	ldr	r2, [pc, #296]	; (280e4 <_sercom_get_default_pad+0x154>)
   27fbc:	4293      	cmp	r3, r2
   27fbe:	d100      	bne.n	27fc2 <_sercom_get_default_pad+0x32>
   27fc0:	e05b      	b.n	2807a <_sercom_get_default_pad+0xea>
   27fc2:	4a49      	ldr	r2, [pc, #292]	; (280e8 <_sercom_get_default_pad+0x158>)
   27fc4:	4293      	cmp	r3, r2
   27fc6:	d100      	bne.n	27fca <_sercom_get_default_pad+0x3a>
   27fc8:	e06c      	b.n	280a4 <_sercom_get_default_pad+0x114>
   27fca:	4a48      	ldr	r2, [pc, #288]	; (280ec <_sercom_get_default_pad+0x15c>)
   27fcc:	4293      	cmp	r3, r2
   27fce:	d03f      	beq.n	28050 <_sercom_get_default_pad+0xc0>
   27fd0:	e07d      	b.n	280ce <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   27fd2:	1cfb      	adds	r3, r7, #3
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	2b01      	cmp	r3, #1
   27fd8:	d00a      	beq.n	27ff0 <_sercom_get_default_pad+0x60>
   27fda:	dc02      	bgt.n	27fe2 <_sercom_get_default_pad+0x52>
   27fdc:	2b00      	cmp	r3, #0
   27fde:	d005      	beq.n	27fec <_sercom_get_default_pad+0x5c>
   27fe0:	e075      	b.n	280ce <_sercom_get_default_pad+0x13e>
   27fe2:	2b02      	cmp	r3, #2
   27fe4:	d006      	beq.n	27ff4 <_sercom_get_default_pad+0x64>
   27fe6:	2b03      	cmp	r3, #3
   27fe8:	d006      	beq.n	27ff8 <_sercom_get_default_pad+0x68>
   27fea:	e070      	b.n	280ce <_sercom_get_default_pad+0x13e>
   27fec:	4b40      	ldr	r3, [pc, #256]	; (280f0 <_sercom_get_default_pad+0x160>)
   27fee:	e06f      	b.n	280d0 <_sercom_get_default_pad+0x140>
   27ff0:	4b40      	ldr	r3, [pc, #256]	; (280f4 <_sercom_get_default_pad+0x164>)
   27ff2:	e06d      	b.n	280d0 <_sercom_get_default_pad+0x140>
   27ff4:	4b40      	ldr	r3, [pc, #256]	; (280f8 <_sercom_get_default_pad+0x168>)
   27ff6:	e06b      	b.n	280d0 <_sercom_get_default_pad+0x140>
   27ff8:	4b40      	ldr	r3, [pc, #256]	; (280fc <_sercom_get_default_pad+0x16c>)
   27ffa:	e069      	b.n	280d0 <_sercom_get_default_pad+0x140>
   27ffc:	1cfb      	adds	r3, r7, #3
   27ffe:	781b      	ldrb	r3, [r3, #0]
   28000:	2b01      	cmp	r3, #1
   28002:	d00a      	beq.n	2801a <_sercom_get_default_pad+0x8a>
   28004:	dc02      	bgt.n	2800c <_sercom_get_default_pad+0x7c>
   28006:	2b00      	cmp	r3, #0
   28008:	d005      	beq.n	28016 <_sercom_get_default_pad+0x86>
   2800a:	e060      	b.n	280ce <_sercom_get_default_pad+0x13e>
   2800c:	2b02      	cmp	r3, #2
   2800e:	d006      	beq.n	2801e <_sercom_get_default_pad+0x8e>
   28010:	2b03      	cmp	r3, #3
   28012:	d006      	beq.n	28022 <_sercom_get_default_pad+0x92>
   28014:	e05b      	b.n	280ce <_sercom_get_default_pad+0x13e>
   28016:	2303      	movs	r3, #3
   28018:	e05a      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2801a:	4b39      	ldr	r3, [pc, #228]	; (28100 <_sercom_get_default_pad+0x170>)
   2801c:	e058      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2801e:	4b39      	ldr	r3, [pc, #228]	; (28104 <_sercom_get_default_pad+0x174>)
   28020:	e056      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28022:	4b39      	ldr	r3, [pc, #228]	; (28108 <_sercom_get_default_pad+0x178>)
   28024:	e054      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28026:	1cfb      	adds	r3, r7, #3
   28028:	781b      	ldrb	r3, [r3, #0]
   2802a:	2b01      	cmp	r3, #1
   2802c:	d00a      	beq.n	28044 <_sercom_get_default_pad+0xb4>
   2802e:	dc02      	bgt.n	28036 <_sercom_get_default_pad+0xa6>
   28030:	2b00      	cmp	r3, #0
   28032:	d005      	beq.n	28040 <_sercom_get_default_pad+0xb0>
   28034:	e04b      	b.n	280ce <_sercom_get_default_pad+0x13e>
   28036:	2b02      	cmp	r3, #2
   28038:	d006      	beq.n	28048 <_sercom_get_default_pad+0xb8>
   2803a:	2b03      	cmp	r3, #3
   2803c:	d006      	beq.n	2804c <_sercom_get_default_pad+0xbc>
   2803e:	e046      	b.n	280ce <_sercom_get_default_pad+0x13e>
   28040:	4b32      	ldr	r3, [pc, #200]	; (2810c <_sercom_get_default_pad+0x17c>)
   28042:	e045      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28044:	4b32      	ldr	r3, [pc, #200]	; (28110 <_sercom_get_default_pad+0x180>)
   28046:	e043      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28048:	4b32      	ldr	r3, [pc, #200]	; (28114 <_sercom_get_default_pad+0x184>)
   2804a:	e041      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2804c:	4b32      	ldr	r3, [pc, #200]	; (28118 <_sercom_get_default_pad+0x188>)
   2804e:	e03f      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28050:	1cfb      	adds	r3, r7, #3
   28052:	781b      	ldrb	r3, [r3, #0]
   28054:	2b01      	cmp	r3, #1
   28056:	d00a      	beq.n	2806e <_sercom_get_default_pad+0xde>
   28058:	dc02      	bgt.n	28060 <_sercom_get_default_pad+0xd0>
   2805a:	2b00      	cmp	r3, #0
   2805c:	d005      	beq.n	2806a <_sercom_get_default_pad+0xda>
   2805e:	e036      	b.n	280ce <_sercom_get_default_pad+0x13e>
   28060:	2b02      	cmp	r3, #2
   28062:	d006      	beq.n	28072 <_sercom_get_default_pad+0xe2>
   28064:	2b03      	cmp	r3, #3
   28066:	d006      	beq.n	28076 <_sercom_get_default_pad+0xe6>
   28068:	e031      	b.n	280ce <_sercom_get_default_pad+0x13e>
   2806a:	4b2c      	ldr	r3, [pc, #176]	; (2811c <_sercom_get_default_pad+0x18c>)
   2806c:	e030      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2806e:	4b2c      	ldr	r3, [pc, #176]	; (28120 <_sercom_get_default_pad+0x190>)
   28070:	e02e      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28072:	4b2c      	ldr	r3, [pc, #176]	; (28124 <_sercom_get_default_pad+0x194>)
   28074:	e02c      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28076:	4b2c      	ldr	r3, [pc, #176]	; (28128 <_sercom_get_default_pad+0x198>)
   28078:	e02a      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2807a:	1cfb      	adds	r3, r7, #3
   2807c:	781b      	ldrb	r3, [r3, #0]
   2807e:	2b01      	cmp	r3, #1
   28080:	d00a      	beq.n	28098 <_sercom_get_default_pad+0x108>
   28082:	dc02      	bgt.n	2808a <_sercom_get_default_pad+0xfa>
   28084:	2b00      	cmp	r3, #0
   28086:	d005      	beq.n	28094 <_sercom_get_default_pad+0x104>
   28088:	e021      	b.n	280ce <_sercom_get_default_pad+0x13e>
   2808a:	2b02      	cmp	r3, #2
   2808c:	d006      	beq.n	2809c <_sercom_get_default_pad+0x10c>
   2808e:	2b03      	cmp	r3, #3
   28090:	d006      	beq.n	280a0 <_sercom_get_default_pad+0x110>
   28092:	e01c      	b.n	280ce <_sercom_get_default_pad+0x13e>
   28094:	4b25      	ldr	r3, [pc, #148]	; (2812c <_sercom_get_default_pad+0x19c>)
   28096:	e01b      	b.n	280d0 <_sercom_get_default_pad+0x140>
   28098:	4b25      	ldr	r3, [pc, #148]	; (28130 <_sercom_get_default_pad+0x1a0>)
   2809a:	e019      	b.n	280d0 <_sercom_get_default_pad+0x140>
   2809c:	4b25      	ldr	r3, [pc, #148]	; (28134 <_sercom_get_default_pad+0x1a4>)
   2809e:	e017      	b.n	280d0 <_sercom_get_default_pad+0x140>
   280a0:	4b25      	ldr	r3, [pc, #148]	; (28138 <_sercom_get_default_pad+0x1a8>)
   280a2:	e015      	b.n	280d0 <_sercom_get_default_pad+0x140>
   280a4:	1cfb      	adds	r3, r7, #3
   280a6:	781b      	ldrb	r3, [r3, #0]
   280a8:	2b01      	cmp	r3, #1
   280aa:	d00a      	beq.n	280c2 <_sercom_get_default_pad+0x132>
   280ac:	dc02      	bgt.n	280b4 <_sercom_get_default_pad+0x124>
   280ae:	2b00      	cmp	r3, #0
   280b0:	d005      	beq.n	280be <_sercom_get_default_pad+0x12e>
   280b2:	e00c      	b.n	280ce <_sercom_get_default_pad+0x13e>
   280b4:	2b02      	cmp	r3, #2
   280b6:	d006      	beq.n	280c6 <_sercom_get_default_pad+0x136>
   280b8:	2b03      	cmp	r3, #3
   280ba:	d006      	beq.n	280ca <_sercom_get_default_pad+0x13a>
   280bc:	e007      	b.n	280ce <_sercom_get_default_pad+0x13e>
   280be:	4b1f      	ldr	r3, [pc, #124]	; (2813c <_sercom_get_default_pad+0x1ac>)
   280c0:	e006      	b.n	280d0 <_sercom_get_default_pad+0x140>
   280c2:	4b1f      	ldr	r3, [pc, #124]	; (28140 <_sercom_get_default_pad+0x1b0>)
   280c4:	e004      	b.n	280d0 <_sercom_get_default_pad+0x140>
   280c6:	4b1f      	ldr	r3, [pc, #124]	; (28144 <_sercom_get_default_pad+0x1b4>)
   280c8:	e002      	b.n	280d0 <_sercom_get_default_pad+0x140>
   280ca:	4b1f      	ldr	r3, [pc, #124]	; (28148 <_sercom_get_default_pad+0x1b8>)
   280cc:	e000      	b.n	280d0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   280ce:	2300      	movs	r3, #0
}
   280d0:	0018      	movs	r0, r3
   280d2:	46bd      	mov	sp, r7
   280d4:	b002      	add	sp, #8
   280d6:	bd80      	pop	{r7, pc}
   280d8:	42001000 	.word	0x42001000
   280dc:	42000800 	.word	0x42000800
   280e0:	42000c00 	.word	0x42000c00
   280e4:	42001800 	.word	0x42001800
   280e8:	42001c00 	.word	0x42001c00
   280ec:	42001400 	.word	0x42001400
   280f0:	00040003 	.word	0x00040003
   280f4:	00050003 	.word	0x00050003
   280f8:	00060003 	.word	0x00060003
   280fc:	00070003 	.word	0x00070003
   28100:	00010003 	.word	0x00010003
   28104:	001e0003 	.word	0x001e0003
   28108:	001f0003 	.word	0x001f0003
   2810c:	00080003 	.word	0x00080003
   28110:	00090003 	.word	0x00090003
   28114:	000a0003 	.word	0x000a0003
   28118:	000b0003 	.word	0x000b0003
   2811c:	00100003 	.word	0x00100003
   28120:	00110003 	.word	0x00110003
   28124:	00120003 	.word	0x00120003
   28128:	00130003 	.word	0x00130003
   2812c:	000c0003 	.word	0x000c0003
   28130:	000d0003 	.word	0x000d0003
   28134:	000e0003 	.word	0x000e0003
   28138:	000f0003 	.word	0x000f0003
   2813c:	00160003 	.word	0x00160003
   28140:	00170003 	.word	0x00170003
   28144:	00180003 	.word	0x00180003
   28148:	00190003 	.word	0x00190003

0002814c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2814c:	b590      	push	{r4, r7, lr}
   2814e:	b08b      	sub	sp, #44	; 0x2c
   28150:	af00      	add	r7, sp, #0
   28152:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   28154:	230c      	movs	r3, #12
   28156:	18fb      	adds	r3, r7, r3
   28158:	4a0f      	ldr	r2, [pc, #60]	; (28198 <_sercom_get_sercom_inst_index+0x4c>)
   2815a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2815c:	c313      	stmia	r3!, {r0, r1, r4}
   2815e:	ca13      	ldmia	r2!, {r0, r1, r4}
   28160:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28162:	2300      	movs	r3, #0
   28164:	627b      	str	r3, [r7, #36]	; 0x24
   28166:	e00e      	b.n	28186 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   28168:	230c      	movs	r3, #12
   2816a:	18fb      	adds	r3, r7, r3
   2816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2816e:	0092      	lsls	r2, r2, #2
   28170:	58d3      	ldr	r3, [r2, r3]
   28172:	001a      	movs	r2, r3
   28174:	687b      	ldr	r3, [r7, #4]
   28176:	429a      	cmp	r2, r3
   28178:	d102      	bne.n	28180 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2817c:	b2db      	uxtb	r3, r3
   2817e:	e006      	b.n	2818e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28182:	3301      	adds	r3, #1
   28184:	627b      	str	r3, [r7, #36]	; 0x24
   28186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28188:	2b05      	cmp	r3, #5
   2818a:	d9ed      	bls.n	28168 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2818c:	2300      	movs	r3, #0
}
   2818e:	0018      	movs	r0, r3
   28190:	46bd      	mov	sp, r7
   28192:	b00b      	add	sp, #44	; 0x2c
   28194:	bd90      	pop	{r4, r7, pc}
   28196:	46c0      	nop			; (mov r8, r8)
   28198:	0003af2c 	.word	0x0003af2c

0002819c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2819c:	b580      	push	{r7, lr}
   2819e:	b082      	sub	sp, #8
   281a0:	af00      	add	r7, sp, #0
   281a2:	0002      	movs	r2, r0
   281a4:	1dfb      	adds	r3, r7, #7
   281a6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   281a8:	46c0      	nop			; (mov r8, r8)
   281aa:	46bd      	mov	sp, r7
   281ac:	b002      	add	sp, #8
   281ae:	bd80      	pop	{r7, pc}

000281b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   281b0:	b580      	push	{r7, lr}
   281b2:	b084      	sub	sp, #16
   281b4:	af00      	add	r7, sp, #0
   281b6:	0002      	movs	r2, r0
   281b8:	6039      	str	r1, [r7, #0]
   281ba:	1dfb      	adds	r3, r7, #7
   281bc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   281be:	4b13      	ldr	r3, [pc, #76]	; (2820c <_sercom_set_handler+0x5c>)
   281c0:	781b      	ldrb	r3, [r3, #0]
   281c2:	2201      	movs	r2, #1
   281c4:	4053      	eors	r3, r2
   281c6:	b2db      	uxtb	r3, r3
   281c8:	2b00      	cmp	r3, #0
   281ca:	d015      	beq.n	281f8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   281cc:	2300      	movs	r3, #0
   281ce:	60fb      	str	r3, [r7, #12]
   281d0:	e00c      	b.n	281ec <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   281d2:	4b0f      	ldr	r3, [pc, #60]	; (28210 <_sercom_set_handler+0x60>)
   281d4:	68fa      	ldr	r2, [r7, #12]
   281d6:	0092      	lsls	r2, r2, #2
   281d8:	490e      	ldr	r1, [pc, #56]	; (28214 <_sercom_set_handler+0x64>)
   281da:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   281dc:	4b0e      	ldr	r3, [pc, #56]	; (28218 <_sercom_set_handler+0x68>)
   281de:	68fa      	ldr	r2, [r7, #12]
   281e0:	0092      	lsls	r2, r2, #2
   281e2:	2100      	movs	r1, #0
   281e4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   281e6:	68fb      	ldr	r3, [r7, #12]
   281e8:	3301      	adds	r3, #1
   281ea:	60fb      	str	r3, [r7, #12]
   281ec:	68fb      	ldr	r3, [r7, #12]
   281ee:	2b05      	cmp	r3, #5
   281f0:	d9ef      	bls.n	281d2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   281f2:	4b06      	ldr	r3, [pc, #24]	; (2820c <_sercom_set_handler+0x5c>)
   281f4:	2201      	movs	r2, #1
   281f6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   281f8:	1dfb      	adds	r3, r7, #7
   281fa:	781a      	ldrb	r2, [r3, #0]
   281fc:	4b04      	ldr	r3, [pc, #16]	; (28210 <_sercom_set_handler+0x60>)
   281fe:	0092      	lsls	r2, r2, #2
   28200:	6839      	ldr	r1, [r7, #0]
   28202:	50d1      	str	r1, [r2, r3]
}
   28204:	46c0      	nop			; (mov r8, r8)
   28206:	46bd      	mov	sp, r7
   28208:	b004      	add	sp, #16
   2820a:	bd80      	pop	{r7, pc}
   2820c:	200042ba 	.word	0x200042ba
   28210:	200042bc 	.word	0x200042bc
   28214:	0002819d 	.word	0x0002819d
   28218:	20005c60 	.word	0x20005c60

0002821c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2821c:	b590      	push	{r4, r7, lr}
   2821e:	b085      	sub	sp, #20
   28220:	af00      	add	r7, sp, #0
   28222:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   28224:	2308      	movs	r3, #8
   28226:	18fb      	adds	r3, r7, r3
   28228:	4a0b      	ldr	r2, [pc, #44]	; (28258 <_sercom_get_interrupt_vector+0x3c>)
   2822a:	6811      	ldr	r1, [r2, #0]
   2822c:	6019      	str	r1, [r3, #0]
   2822e:	8892      	ldrh	r2, [r2, #4]
   28230:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   28232:	230f      	movs	r3, #15
   28234:	18fc      	adds	r4, r7, r3
   28236:	687b      	ldr	r3, [r7, #4]
   28238:	0018      	movs	r0, r3
   2823a:	4b08      	ldr	r3, [pc, #32]	; (2825c <_sercom_get_interrupt_vector+0x40>)
   2823c:	4798      	blx	r3
   2823e:	0003      	movs	r3, r0
   28240:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   28242:	230f      	movs	r3, #15
   28244:	18fb      	adds	r3, r7, r3
   28246:	781b      	ldrb	r3, [r3, #0]
   28248:	2208      	movs	r2, #8
   2824a:	18ba      	adds	r2, r7, r2
   2824c:	5cd3      	ldrb	r3, [r2, r3]
   2824e:	b25b      	sxtb	r3, r3
}
   28250:	0018      	movs	r0, r3
   28252:	46bd      	mov	sp, r7
   28254:	b005      	add	sp, #20
   28256:	bd90      	pop	{r4, r7, pc}
   28258:	0003af44 	.word	0x0003af44
   2825c:	0002814d 	.word	0x0002814d

00028260 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   28260:	b580      	push	{r7, lr}
   28262:	af00      	add	r7, sp, #0
   28264:	4b03      	ldr	r3, [pc, #12]	; (28274 <SERCOM0_Handler+0x14>)
   28266:	681b      	ldr	r3, [r3, #0]
   28268:	2000      	movs	r0, #0
   2826a:	4798      	blx	r3
   2826c:	46c0      	nop			; (mov r8, r8)
   2826e:	46bd      	mov	sp, r7
   28270:	bd80      	pop	{r7, pc}
   28272:	46c0      	nop			; (mov r8, r8)
   28274:	200042bc 	.word	0x200042bc

00028278 <SERCOM1_Handler>:
   28278:	b580      	push	{r7, lr}
   2827a:	af00      	add	r7, sp, #0
   2827c:	4b03      	ldr	r3, [pc, #12]	; (2828c <SERCOM1_Handler+0x14>)
   2827e:	685b      	ldr	r3, [r3, #4]
   28280:	2001      	movs	r0, #1
   28282:	4798      	blx	r3
   28284:	46c0      	nop			; (mov r8, r8)
   28286:	46bd      	mov	sp, r7
   28288:	bd80      	pop	{r7, pc}
   2828a:	46c0      	nop			; (mov r8, r8)
   2828c:	200042bc 	.word	0x200042bc

00028290 <SERCOM2_Handler>:
   28290:	b580      	push	{r7, lr}
   28292:	af00      	add	r7, sp, #0
   28294:	4b03      	ldr	r3, [pc, #12]	; (282a4 <SERCOM2_Handler+0x14>)
   28296:	689b      	ldr	r3, [r3, #8]
   28298:	2002      	movs	r0, #2
   2829a:	4798      	blx	r3
   2829c:	46c0      	nop			; (mov r8, r8)
   2829e:	46bd      	mov	sp, r7
   282a0:	bd80      	pop	{r7, pc}
   282a2:	46c0      	nop			; (mov r8, r8)
   282a4:	200042bc 	.word	0x200042bc

000282a8 <SERCOM3_Handler>:
   282a8:	b580      	push	{r7, lr}
   282aa:	af00      	add	r7, sp, #0
   282ac:	4b03      	ldr	r3, [pc, #12]	; (282bc <SERCOM3_Handler+0x14>)
   282ae:	68db      	ldr	r3, [r3, #12]
   282b0:	2003      	movs	r0, #3
   282b2:	4798      	blx	r3
   282b4:	46c0      	nop			; (mov r8, r8)
   282b6:	46bd      	mov	sp, r7
   282b8:	bd80      	pop	{r7, pc}
   282ba:	46c0      	nop			; (mov r8, r8)
   282bc:	200042bc 	.word	0x200042bc

000282c0 <SERCOM4_Handler>:
   282c0:	b580      	push	{r7, lr}
   282c2:	af00      	add	r7, sp, #0
   282c4:	4b03      	ldr	r3, [pc, #12]	; (282d4 <SERCOM4_Handler+0x14>)
   282c6:	691b      	ldr	r3, [r3, #16]
   282c8:	2004      	movs	r0, #4
   282ca:	4798      	blx	r3
   282cc:	46c0      	nop			; (mov r8, r8)
   282ce:	46bd      	mov	sp, r7
   282d0:	bd80      	pop	{r7, pc}
   282d2:	46c0      	nop			; (mov r8, r8)
   282d4:	200042bc 	.word	0x200042bc

000282d8 <SERCOM5_Handler>:
   282d8:	b580      	push	{r7, lr}
   282da:	af00      	add	r7, sp, #0
   282dc:	4b03      	ldr	r3, [pc, #12]	; (282ec <SERCOM5_Handler+0x14>)
   282de:	695b      	ldr	r3, [r3, #20]
   282e0:	2005      	movs	r0, #5
   282e2:	4798      	blx	r3
   282e4:	46c0      	nop			; (mov r8, r8)
   282e6:	46bd      	mov	sp, r7
   282e8:	bd80      	pop	{r7, pc}
   282ea:	46c0      	nop			; (mov r8, r8)
   282ec:	200042bc 	.word	0x200042bc

000282f0 <system_pinmux_get_config_defaults>:
{
   282f0:	b580      	push	{r7, lr}
   282f2:	b082      	sub	sp, #8
   282f4:	af00      	add	r7, sp, #0
   282f6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   282f8:	687b      	ldr	r3, [r7, #4]
   282fa:	2280      	movs	r2, #128	; 0x80
   282fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   282fe:	687b      	ldr	r3, [r7, #4]
   28300:	2200      	movs	r2, #0
   28302:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28304:	687b      	ldr	r3, [r7, #4]
   28306:	2201      	movs	r2, #1
   28308:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2830a:	687b      	ldr	r3, [r7, #4]
   2830c:	2200      	movs	r2, #0
   2830e:	70da      	strb	r2, [r3, #3]
}
   28310:	46c0      	nop			; (mov r8, r8)
   28312:	46bd      	mov	sp, r7
   28314:	b002      	add	sp, #8
   28316:	bd80      	pop	{r7, pc}

00028318 <system_pinmux_get_group_from_gpio_pin>:
{
   28318:	b580      	push	{r7, lr}
   2831a:	b084      	sub	sp, #16
   2831c:	af00      	add	r7, sp, #0
   2831e:	0002      	movs	r2, r0
   28320:	1dfb      	adds	r3, r7, #7
   28322:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28324:	230f      	movs	r3, #15
   28326:	18fb      	adds	r3, r7, r3
   28328:	1dfa      	adds	r2, r7, #7
   2832a:	7812      	ldrb	r2, [r2, #0]
   2832c:	09d2      	lsrs	r2, r2, #7
   2832e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28330:	230e      	movs	r3, #14
   28332:	18fb      	adds	r3, r7, r3
   28334:	1dfa      	adds	r2, r7, #7
   28336:	7812      	ldrb	r2, [r2, #0]
   28338:	0952      	lsrs	r2, r2, #5
   2833a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2833c:	4b0d      	ldr	r3, [pc, #52]	; (28374 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2833e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28340:	230f      	movs	r3, #15
   28342:	18fb      	adds	r3, r7, r3
   28344:	781b      	ldrb	r3, [r3, #0]
   28346:	2b00      	cmp	r3, #0
   28348:	d10f      	bne.n	2836a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2834a:	230f      	movs	r3, #15
   2834c:	18fb      	adds	r3, r7, r3
   2834e:	781b      	ldrb	r3, [r3, #0]
   28350:	009b      	lsls	r3, r3, #2
   28352:	2210      	movs	r2, #16
   28354:	4694      	mov	ip, r2
   28356:	44bc      	add	ip, r7
   28358:	4463      	add	r3, ip
   2835a:	3b08      	subs	r3, #8
   2835c:	681a      	ldr	r2, [r3, #0]
   2835e:	230e      	movs	r3, #14
   28360:	18fb      	adds	r3, r7, r3
   28362:	781b      	ldrb	r3, [r3, #0]
   28364:	01db      	lsls	r3, r3, #7
   28366:	18d3      	adds	r3, r2, r3
   28368:	e000      	b.n	2836c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2836a:	2300      	movs	r3, #0
}
   2836c:	0018      	movs	r0, r3
   2836e:	46bd      	mov	sp, r7
   28370:	b004      	add	sp, #16
   28372:	bd80      	pop	{r7, pc}
   28374:	41004400 	.word	0x41004400

00028378 <port_get_group_from_gpio_pin>:
{
   28378:	b580      	push	{r7, lr}
   2837a:	b082      	sub	sp, #8
   2837c:	af00      	add	r7, sp, #0
   2837e:	0002      	movs	r2, r0
   28380:	1dfb      	adds	r3, r7, #7
   28382:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28384:	1dfb      	adds	r3, r7, #7
   28386:	781b      	ldrb	r3, [r3, #0]
   28388:	0018      	movs	r0, r3
   2838a:	4b03      	ldr	r3, [pc, #12]	; (28398 <port_get_group_from_gpio_pin+0x20>)
   2838c:	4798      	blx	r3
   2838e:	0003      	movs	r3, r0
}
   28390:	0018      	movs	r0, r3
   28392:	46bd      	mov	sp, r7
   28394:	b002      	add	sp, #8
   28396:	bd80      	pop	{r7, pc}
   28398:	00028319 	.word	0x00028319

0002839c <port_pin_set_output_level>:
{
   2839c:	b580      	push	{r7, lr}
   2839e:	b084      	sub	sp, #16
   283a0:	af00      	add	r7, sp, #0
   283a2:	0002      	movs	r2, r0
   283a4:	1dfb      	adds	r3, r7, #7
   283a6:	701a      	strb	r2, [r3, #0]
   283a8:	1dbb      	adds	r3, r7, #6
   283aa:	1c0a      	adds	r2, r1, #0
   283ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   283ae:	1dfb      	adds	r3, r7, #7
   283b0:	781b      	ldrb	r3, [r3, #0]
   283b2:	0018      	movs	r0, r3
   283b4:	4b0d      	ldr	r3, [pc, #52]	; (283ec <port_pin_set_output_level+0x50>)
   283b6:	4798      	blx	r3
   283b8:	0003      	movs	r3, r0
   283ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   283bc:	1dfb      	adds	r3, r7, #7
   283be:	781b      	ldrb	r3, [r3, #0]
   283c0:	221f      	movs	r2, #31
   283c2:	4013      	ands	r3, r2
   283c4:	2201      	movs	r2, #1
   283c6:	409a      	lsls	r2, r3
   283c8:	0013      	movs	r3, r2
   283ca:	60bb      	str	r3, [r7, #8]
	if (level) {
   283cc:	1dbb      	adds	r3, r7, #6
   283ce:	781b      	ldrb	r3, [r3, #0]
   283d0:	2b00      	cmp	r3, #0
   283d2:	d003      	beq.n	283dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   283d4:	68fb      	ldr	r3, [r7, #12]
   283d6:	68ba      	ldr	r2, [r7, #8]
   283d8:	619a      	str	r2, [r3, #24]
}
   283da:	e002      	b.n	283e2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   283dc:	68fb      	ldr	r3, [r7, #12]
   283de:	68ba      	ldr	r2, [r7, #8]
   283e0:	615a      	str	r2, [r3, #20]
}
   283e2:	46c0      	nop			; (mov r8, r8)
   283e4:	46bd      	mov	sp, r7
   283e6:	b004      	add	sp, #16
   283e8:	bd80      	pop	{r7, pc}
   283ea:	46c0      	nop			; (mov r8, r8)
   283ec:	00028379 	.word	0x00028379

000283f0 <system_gclk_chan_get_config_defaults>:
{
   283f0:	b580      	push	{r7, lr}
   283f2:	b082      	sub	sp, #8
   283f4:	af00      	add	r7, sp, #0
   283f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   283f8:	687b      	ldr	r3, [r7, #4]
   283fa:	2200      	movs	r2, #0
   283fc:	701a      	strb	r2, [r3, #0]
}
   283fe:	46c0      	nop			; (mov r8, r8)
   28400:	46bd      	mov	sp, r7
   28402:	b002      	add	sp, #8
   28404:	bd80      	pop	{r7, pc}
	...

00028408 <system_apb_clock_set_mask>:
{
   28408:	b580      	push	{r7, lr}
   2840a:	b082      	sub	sp, #8
   2840c:	af00      	add	r7, sp, #0
   2840e:	0002      	movs	r2, r0
   28410:	6039      	str	r1, [r7, #0]
   28412:	1dfb      	adds	r3, r7, #7
   28414:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28416:	1dfb      	adds	r3, r7, #7
   28418:	781b      	ldrb	r3, [r3, #0]
   2841a:	2b01      	cmp	r3, #1
   2841c:	d00a      	beq.n	28434 <system_apb_clock_set_mask+0x2c>
   2841e:	2b02      	cmp	r3, #2
   28420:	d00f      	beq.n	28442 <system_apb_clock_set_mask+0x3a>
   28422:	2b00      	cmp	r3, #0
   28424:	d114      	bne.n	28450 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28426:	4b0e      	ldr	r3, [pc, #56]	; (28460 <system_apb_clock_set_mask+0x58>)
   28428:	4a0d      	ldr	r2, [pc, #52]	; (28460 <system_apb_clock_set_mask+0x58>)
   2842a:	6991      	ldr	r1, [r2, #24]
   2842c:	683a      	ldr	r2, [r7, #0]
   2842e:	430a      	orrs	r2, r1
   28430:	619a      	str	r2, [r3, #24]
			break;
   28432:	e00f      	b.n	28454 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28434:	4b0a      	ldr	r3, [pc, #40]	; (28460 <system_apb_clock_set_mask+0x58>)
   28436:	4a0a      	ldr	r2, [pc, #40]	; (28460 <system_apb_clock_set_mask+0x58>)
   28438:	69d1      	ldr	r1, [r2, #28]
   2843a:	683a      	ldr	r2, [r7, #0]
   2843c:	430a      	orrs	r2, r1
   2843e:	61da      	str	r2, [r3, #28]
			break;
   28440:	e008      	b.n	28454 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28442:	4b07      	ldr	r3, [pc, #28]	; (28460 <system_apb_clock_set_mask+0x58>)
   28444:	4a06      	ldr	r2, [pc, #24]	; (28460 <system_apb_clock_set_mask+0x58>)
   28446:	6a11      	ldr	r1, [r2, #32]
   28448:	683a      	ldr	r2, [r7, #0]
   2844a:	430a      	orrs	r2, r1
   2844c:	621a      	str	r2, [r3, #32]
			break;
   2844e:	e001      	b.n	28454 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28450:	2317      	movs	r3, #23
   28452:	e000      	b.n	28456 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28454:	2300      	movs	r3, #0
}
   28456:	0018      	movs	r0, r3
   28458:	46bd      	mov	sp, r7
   2845a:	b002      	add	sp, #8
   2845c:	bd80      	pop	{r7, pc}
   2845e:	46c0      	nop			; (mov r8, r8)
   28460:	40000400 	.word	0x40000400

00028464 <system_is_debugger_present>:
{
   28464:	b580      	push	{r7, lr}
   28466:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28468:	4b05      	ldr	r3, [pc, #20]	; (28480 <system_is_debugger_present+0x1c>)
   2846a:	789b      	ldrb	r3, [r3, #2]
   2846c:	b2db      	uxtb	r3, r3
   2846e:	001a      	movs	r2, r3
   28470:	2302      	movs	r3, #2
   28472:	4013      	ands	r3, r2
   28474:	1e5a      	subs	r2, r3, #1
   28476:	4193      	sbcs	r3, r2
   28478:	b2db      	uxtb	r3, r3
}
   2847a:	0018      	movs	r0, r3
   2847c:	46bd      	mov	sp, r7
   2847e:	bd80      	pop	{r7, pc}
   28480:	41002000 	.word	0x41002000

00028484 <system_interrupt_enable>:
{
   28484:	b580      	push	{r7, lr}
   28486:	b082      	sub	sp, #8
   28488:	af00      	add	r7, sp, #0
   2848a:	0002      	movs	r2, r0
   2848c:	1dfb      	adds	r3, r7, #7
   2848e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28490:	4b06      	ldr	r3, [pc, #24]	; (284ac <system_interrupt_enable+0x28>)
   28492:	1dfa      	adds	r2, r7, #7
   28494:	7812      	ldrb	r2, [r2, #0]
   28496:	0011      	movs	r1, r2
   28498:	221f      	movs	r2, #31
   2849a:	400a      	ands	r2, r1
   2849c:	2101      	movs	r1, #1
   2849e:	4091      	lsls	r1, r2
   284a0:	000a      	movs	r2, r1
   284a2:	601a      	str	r2, [r3, #0]
}
   284a4:	46c0      	nop			; (mov r8, r8)
   284a6:	46bd      	mov	sp, r7
   284a8:	b002      	add	sp, #8
   284aa:	bd80      	pop	{r7, pc}
   284ac:	e000e100 	.word	0xe000e100

000284b0 <system_interrupt_disable>:
{
   284b0:	b580      	push	{r7, lr}
   284b2:	b082      	sub	sp, #8
   284b4:	af00      	add	r7, sp, #0
   284b6:	0002      	movs	r2, r0
   284b8:	1dfb      	adds	r3, r7, #7
   284ba:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   284bc:	4a07      	ldr	r2, [pc, #28]	; (284dc <system_interrupt_disable+0x2c>)
   284be:	1dfb      	adds	r3, r7, #7
   284c0:	781b      	ldrb	r3, [r3, #0]
   284c2:	0019      	movs	r1, r3
   284c4:	231f      	movs	r3, #31
   284c6:	400b      	ands	r3, r1
   284c8:	2101      	movs	r1, #1
   284ca:	4099      	lsls	r1, r3
   284cc:	000b      	movs	r3, r1
   284ce:	0019      	movs	r1, r3
   284d0:	2380      	movs	r3, #128	; 0x80
   284d2:	50d1      	str	r1, [r2, r3]
}
   284d4:	46c0      	nop			; (mov r8, r8)
   284d6:	46bd      	mov	sp, r7
   284d8:	b002      	add	sp, #8
   284da:	bd80      	pop	{r7, pc}
   284dc:	e000e100 	.word	0xe000e100

000284e0 <spi_is_syncing>:
{
   284e0:	b580      	push	{r7, lr}
   284e2:	b084      	sub	sp, #16
   284e4:	af00      	add	r7, sp, #0
   284e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   284e8:	687b      	ldr	r3, [r7, #4]
   284ea:	681b      	ldr	r3, [r3, #0]
   284ec:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   284ee:	68fb      	ldr	r3, [r7, #12]
   284f0:	69db      	ldr	r3, [r3, #28]
   284f2:	1e5a      	subs	r2, r3, #1
   284f4:	4193      	sbcs	r3, r2
   284f6:	b2db      	uxtb	r3, r3
}
   284f8:	0018      	movs	r0, r3
   284fa:	46bd      	mov	sp, r7
   284fc:	b004      	add	sp, #16
   284fe:	bd80      	pop	{r7, pc}

00028500 <spi_enable>:
{
   28500:	b580      	push	{r7, lr}
   28502:	b084      	sub	sp, #16
   28504:	af00      	add	r7, sp, #0
   28506:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28508:	687b      	ldr	r3, [r7, #4]
   2850a:	681b      	ldr	r3, [r3, #0]
   2850c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2850e:	687b      	ldr	r3, [r7, #4]
   28510:	681b      	ldr	r3, [r3, #0]
   28512:	0018      	movs	r0, r3
   28514:	4b0b      	ldr	r3, [pc, #44]	; (28544 <spi_enable+0x44>)
   28516:	4798      	blx	r3
   28518:	0003      	movs	r3, r0
   2851a:	0018      	movs	r0, r3
   2851c:	4b0a      	ldr	r3, [pc, #40]	; (28548 <spi_enable+0x48>)
   2851e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28520:	46c0      	nop			; (mov r8, r8)
   28522:	687b      	ldr	r3, [r7, #4]
   28524:	0018      	movs	r0, r3
   28526:	4b09      	ldr	r3, [pc, #36]	; (2854c <spi_enable+0x4c>)
   28528:	4798      	blx	r3
   2852a:	1e03      	subs	r3, r0, #0
   2852c:	d1f9      	bne.n	28522 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2852e:	68fb      	ldr	r3, [r7, #12]
   28530:	681b      	ldr	r3, [r3, #0]
   28532:	2202      	movs	r2, #2
   28534:	431a      	orrs	r2, r3
   28536:	68fb      	ldr	r3, [r7, #12]
   28538:	601a      	str	r2, [r3, #0]
}
   2853a:	46c0      	nop			; (mov r8, r8)
   2853c:	46bd      	mov	sp, r7
   2853e:	b004      	add	sp, #16
   28540:	bd80      	pop	{r7, pc}
   28542:	46c0      	nop			; (mov r8, r8)
   28544:	0002821d 	.word	0x0002821d
   28548:	00028485 	.word	0x00028485
   2854c:	000284e1 	.word	0x000284e1

00028550 <spi_disable>:
{
   28550:	b580      	push	{r7, lr}
   28552:	b084      	sub	sp, #16
   28554:	af00      	add	r7, sp, #0
   28556:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28558:	687b      	ldr	r3, [r7, #4]
   2855a:	681b      	ldr	r3, [r3, #0]
   2855c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2855e:	687b      	ldr	r3, [r7, #4]
   28560:	681b      	ldr	r3, [r3, #0]
   28562:	0018      	movs	r0, r3
   28564:	4b0e      	ldr	r3, [pc, #56]	; (285a0 <spi_disable+0x50>)
   28566:	4798      	blx	r3
   28568:	0003      	movs	r3, r0
   2856a:	0018      	movs	r0, r3
   2856c:	4b0d      	ldr	r3, [pc, #52]	; (285a4 <spi_disable+0x54>)
   2856e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28570:	46c0      	nop			; (mov r8, r8)
   28572:	687b      	ldr	r3, [r7, #4]
   28574:	0018      	movs	r0, r3
   28576:	4b0c      	ldr	r3, [pc, #48]	; (285a8 <spi_disable+0x58>)
   28578:	4798      	blx	r3
   2857a:	1e03      	subs	r3, r0, #0
   2857c:	d1f9      	bne.n	28572 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2857e:	68fb      	ldr	r3, [r7, #12]
   28580:	228f      	movs	r2, #143	; 0x8f
   28582:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28584:	68fb      	ldr	r3, [r7, #12]
   28586:	228f      	movs	r2, #143	; 0x8f
   28588:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2858a:	68fb      	ldr	r3, [r7, #12]
   2858c:	681b      	ldr	r3, [r3, #0]
   2858e:	2202      	movs	r2, #2
   28590:	4393      	bics	r3, r2
   28592:	001a      	movs	r2, r3
   28594:	68fb      	ldr	r3, [r7, #12]
   28596:	601a      	str	r2, [r3, #0]
}
   28598:	46c0      	nop			; (mov r8, r8)
   2859a:	46bd      	mov	sp, r7
   2859c:	b004      	add	sp, #16
   2859e:	bd80      	pop	{r7, pc}
   285a0:	0002821d 	.word	0x0002821d
   285a4:	000284b1 	.word	0x000284b1
   285a8:	000284e1 	.word	0x000284e1

000285ac <spi_is_write_complete>:
{
   285ac:	b580      	push	{r7, lr}
   285ae:	b084      	sub	sp, #16
   285b0:	af00      	add	r7, sp, #0
   285b2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285b4:	687b      	ldr	r3, [r7, #4]
   285b6:	681b      	ldr	r3, [r3, #0]
   285b8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   285ba:	68fb      	ldr	r3, [r7, #12]
   285bc:	7e1b      	ldrb	r3, [r3, #24]
   285be:	b2db      	uxtb	r3, r3
   285c0:	001a      	movs	r2, r3
   285c2:	2302      	movs	r3, #2
   285c4:	4013      	ands	r3, r2
   285c6:	1e5a      	subs	r2, r3, #1
   285c8:	4193      	sbcs	r3, r2
   285ca:	b2db      	uxtb	r3, r3
}
   285cc:	0018      	movs	r0, r3
   285ce:	46bd      	mov	sp, r7
   285d0:	b004      	add	sp, #16
   285d2:	bd80      	pop	{r7, pc}

000285d4 <spi_is_ready_to_write>:
{
   285d4:	b580      	push	{r7, lr}
   285d6:	b084      	sub	sp, #16
   285d8:	af00      	add	r7, sp, #0
   285da:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285dc:	687b      	ldr	r3, [r7, #4]
   285de:	681b      	ldr	r3, [r3, #0]
   285e0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   285e2:	68fb      	ldr	r3, [r7, #12]
   285e4:	7e1b      	ldrb	r3, [r3, #24]
   285e6:	b2db      	uxtb	r3, r3
   285e8:	001a      	movs	r2, r3
   285ea:	2301      	movs	r3, #1
   285ec:	4013      	ands	r3, r2
   285ee:	1e5a      	subs	r2, r3, #1
   285f0:	4193      	sbcs	r3, r2
   285f2:	b2db      	uxtb	r3, r3
}
   285f4:	0018      	movs	r0, r3
   285f6:	46bd      	mov	sp, r7
   285f8:	b004      	add	sp, #16
   285fa:	bd80      	pop	{r7, pc}

000285fc <spi_is_ready_to_read>:
{
   285fc:	b580      	push	{r7, lr}
   285fe:	b084      	sub	sp, #16
   28600:	af00      	add	r7, sp, #0
   28602:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28604:	687b      	ldr	r3, [r7, #4]
   28606:	681b      	ldr	r3, [r3, #0]
   28608:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2860a:	68fb      	ldr	r3, [r7, #12]
   2860c:	7e1b      	ldrb	r3, [r3, #24]
   2860e:	b2db      	uxtb	r3, r3
   28610:	001a      	movs	r2, r3
   28612:	2304      	movs	r3, #4
   28614:	4013      	ands	r3, r2
   28616:	1e5a      	subs	r2, r3, #1
   28618:	4193      	sbcs	r3, r2
   2861a:	b2db      	uxtb	r3, r3
}
   2861c:	0018      	movs	r0, r3
   2861e:	46bd      	mov	sp, r7
   28620:	b004      	add	sp, #16
   28622:	bd80      	pop	{r7, pc}

00028624 <spi_write>:
{
   28624:	b580      	push	{r7, lr}
   28626:	b084      	sub	sp, #16
   28628:	af00      	add	r7, sp, #0
   2862a:	6078      	str	r0, [r7, #4]
   2862c:	000a      	movs	r2, r1
   2862e:	1cbb      	adds	r3, r7, #2
   28630:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28632:	687b      	ldr	r3, [r7, #4]
   28634:	681b      	ldr	r3, [r3, #0]
   28636:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   28638:	687b      	ldr	r3, [r7, #4]
   2863a:	0018      	movs	r0, r3
   2863c:	4b0a      	ldr	r3, [pc, #40]	; (28668 <spi_write+0x44>)
   2863e:	4798      	blx	r3
   28640:	0003      	movs	r3, r0
   28642:	001a      	movs	r2, r3
   28644:	2301      	movs	r3, #1
   28646:	4053      	eors	r3, r2
   28648:	b2db      	uxtb	r3, r3
   2864a:	2b00      	cmp	r3, #0
   2864c:	d001      	beq.n	28652 <spi_write+0x2e>
		return STATUS_BUSY;
   2864e:	2305      	movs	r3, #5
   28650:	e006      	b.n	28660 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28652:	1cbb      	adds	r3, r7, #2
   28654:	881b      	ldrh	r3, [r3, #0]
   28656:	05db      	lsls	r3, r3, #23
   28658:	0dda      	lsrs	r2, r3, #23
   2865a:	68fb      	ldr	r3, [r7, #12]
   2865c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2865e:	2300      	movs	r3, #0
}
   28660:	0018      	movs	r0, r3
   28662:	46bd      	mov	sp, r7
   28664:	b004      	add	sp, #16
   28666:	bd80      	pop	{r7, pc}
   28668:	000285d5 	.word	0x000285d5

0002866c <spi_read>:
{
   2866c:	b580      	push	{r7, lr}
   2866e:	b084      	sub	sp, #16
   28670:	af00      	add	r7, sp, #0
   28672:	6078      	str	r0, [r7, #4]
   28674:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28676:	687b      	ldr	r3, [r7, #4]
   28678:	681b      	ldr	r3, [r3, #0]
   2867a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2867c:	687b      	ldr	r3, [r7, #4]
   2867e:	0018      	movs	r0, r3
   28680:	4b1b      	ldr	r3, [pc, #108]	; (286f0 <spi_read+0x84>)
   28682:	4798      	blx	r3
   28684:	0003      	movs	r3, r0
   28686:	001a      	movs	r2, r3
   28688:	2301      	movs	r3, #1
   2868a:	4053      	eors	r3, r2
   2868c:	b2db      	uxtb	r3, r3
   2868e:	2b00      	cmp	r3, #0
   28690:	d001      	beq.n	28696 <spi_read+0x2a>
		return STATUS_ERR_IO;
   28692:	2310      	movs	r3, #16
   28694:	e027      	b.n	286e6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28696:	230f      	movs	r3, #15
   28698:	18fb      	adds	r3, r7, r3
   2869a:	2200      	movs	r2, #0
   2869c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2869e:	68bb      	ldr	r3, [r7, #8]
   286a0:	8b5b      	ldrh	r3, [r3, #26]
   286a2:	b29b      	uxth	r3, r3
   286a4:	001a      	movs	r2, r3
   286a6:	2304      	movs	r3, #4
   286a8:	4013      	ands	r3, r2
   286aa:	d006      	beq.n	286ba <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   286ac:	230f      	movs	r3, #15
   286ae:	18fb      	adds	r3, r7, r3
   286b0:	221e      	movs	r2, #30
   286b2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   286b4:	68bb      	ldr	r3, [r7, #8]
   286b6:	2204      	movs	r2, #4
   286b8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   286ba:	687b      	ldr	r3, [r7, #4]
   286bc:	799b      	ldrb	r3, [r3, #6]
   286be:	2b01      	cmp	r3, #1
   286c0:	d108      	bne.n	286d4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   286c2:	68bb      	ldr	r3, [r7, #8]
   286c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   286c6:	b29b      	uxth	r3, r3
   286c8:	05db      	lsls	r3, r3, #23
   286ca:	0ddb      	lsrs	r3, r3, #23
   286cc:	b29a      	uxth	r2, r3
   286ce:	683b      	ldr	r3, [r7, #0]
   286d0:	801a      	strh	r2, [r3, #0]
   286d2:	e005      	b.n	286e0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   286d4:	68bb      	ldr	r3, [r7, #8]
   286d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   286d8:	b2db      	uxtb	r3, r3
   286da:	b29a      	uxth	r2, r3
   286dc:	683b      	ldr	r3, [r7, #0]
   286de:	801a      	strh	r2, [r3, #0]
	return retval;
   286e0:	230f      	movs	r3, #15
   286e2:	18fb      	adds	r3, r7, r3
   286e4:	781b      	ldrb	r3, [r3, #0]
}
   286e6:	0018      	movs	r0, r3
   286e8:	46bd      	mov	sp, r7
   286ea:	b004      	add	sp, #16
   286ec:	bd80      	pop	{r7, pc}
   286ee:	46c0      	nop			; (mov r8, r8)
   286f0:	000285fd 	.word	0x000285fd

000286f4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   286f4:	b590      	push	{r4, r7, lr}
   286f6:	b089      	sub	sp, #36	; 0x24
   286f8:	af00      	add	r7, sp, #0
   286fa:	6078      	str	r0, [r7, #4]
   286fc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   286fe:	230c      	movs	r3, #12
   28700:	18fb      	adds	r3, r7, r3
   28702:	2200      	movs	r2, #0
   28704:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28706:	687b      	ldr	r3, [r7, #4]
   28708:	681b      	ldr	r3, [r3, #0]
   2870a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2870c:	687b      	ldr	r3, [r7, #4]
   2870e:	0018      	movs	r0, r3
   28710:	4b24      	ldr	r3, [pc, #144]	; (287a4 <spi_set_baudrate+0xb0>)
   28712:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28714:	46c0      	nop			; (mov r8, r8)
   28716:	687b      	ldr	r3, [r7, #4]
   28718:	0018      	movs	r0, r3
   2871a:	4b23      	ldr	r3, [pc, #140]	; (287a8 <spi_set_baudrate+0xb4>)
   2871c:	4798      	blx	r3
   2871e:	1e03      	subs	r3, r0, #0
   28720:	d1f9      	bne.n	28716 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28722:	687b      	ldr	r3, [r7, #4]
   28724:	681b      	ldr	r3, [r3, #0]
   28726:	0018      	movs	r0, r3
   28728:	4b20      	ldr	r3, [pc, #128]	; (287ac <spi_set_baudrate+0xb8>)
   2872a:	4798      	blx	r3
   2872c:	0003      	movs	r3, r0
   2872e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28730:	69bb      	ldr	r3, [r7, #24]
   28732:	3314      	adds	r3, #20
   28734:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28736:	697b      	ldr	r3, [r7, #20]
   28738:	b2db      	uxtb	r3, r3
   2873a:	0018      	movs	r0, r3
   2873c:	4b1c      	ldr	r3, [pc, #112]	; (287b0 <spi_set_baudrate+0xbc>)
   2873e:	4798      	blx	r3
   28740:	0003      	movs	r3, r0
   28742:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28744:	230f      	movs	r3, #15
   28746:	18fc      	adds	r4, r7, r3
   28748:	230c      	movs	r3, #12
   2874a:	18fa      	adds	r2, r7, r3
   2874c:	6939      	ldr	r1, [r7, #16]
   2874e:	683b      	ldr	r3, [r7, #0]
   28750:	0018      	movs	r0, r3
   28752:	4b18      	ldr	r3, [pc, #96]	; (287b4 <spi_set_baudrate+0xc0>)
   28754:	4798      	blx	r3
   28756:	0003      	movs	r3, r0
   28758:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2875a:	230f      	movs	r3, #15
   2875c:	18fb      	adds	r3, r7, r3
   2875e:	781b      	ldrb	r3, [r3, #0]
   28760:	2b00      	cmp	r3, #0
   28762:	d001      	beq.n	28768 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28764:	2317      	movs	r3, #23
   28766:	e018      	b.n	2879a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   28768:	230c      	movs	r3, #12
   2876a:	18fb      	adds	r3, r7, r3
   2876c:	881b      	ldrh	r3, [r3, #0]
   2876e:	b2da      	uxtb	r2, r3
   28770:	69fb      	ldr	r3, [r7, #28]
   28772:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28774:	46c0      	nop			; (mov r8, r8)
   28776:	687b      	ldr	r3, [r7, #4]
   28778:	0018      	movs	r0, r3
   2877a:	4b0b      	ldr	r3, [pc, #44]	; (287a8 <spi_set_baudrate+0xb4>)
   2877c:	4798      	blx	r3
   2877e:	1e03      	subs	r3, r0, #0
   28780:	d1f9      	bne.n	28776 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28782:	687b      	ldr	r3, [r7, #4]
   28784:	0018      	movs	r0, r3
   28786:	4b0c      	ldr	r3, [pc, #48]	; (287b8 <spi_set_baudrate+0xc4>)
   28788:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2878a:	46c0      	nop			; (mov r8, r8)
   2878c:	687b      	ldr	r3, [r7, #4]
   2878e:	0018      	movs	r0, r3
   28790:	4b05      	ldr	r3, [pc, #20]	; (287a8 <spi_set_baudrate+0xb4>)
   28792:	4798      	blx	r3
   28794:	1e03      	subs	r3, r0, #0
   28796:	d1f9      	bne.n	2878c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28798:	2300      	movs	r3, #0
}
   2879a:	0018      	movs	r0, r3
   2879c:	46bd      	mov	sp, r7
   2879e:	b009      	add	sp, #36	; 0x24
   287a0:	bd90      	pop	{r4, r7, pc}
   287a2:	46c0      	nop			; (mov r8, r8)
   287a4:	00028551 	.word	0x00028551
   287a8:	000284e1 	.word	0x000284e1
   287ac:	0002814d 	.word	0x0002814d
   287b0:	0002ab01 	.word	0x0002ab01
   287b4:	00027cc7 	.word	0x00027cc7
   287b8:	00028501 	.word	0x00028501

000287bc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   287bc:	b590      	push	{r4, r7, lr}
   287be:	b093      	sub	sp, #76	; 0x4c
   287c0:	af00      	add	r7, sp, #0
   287c2:	6078      	str	r0, [r7, #4]
   287c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   287c6:	687b      	ldr	r3, [r7, #4]
   287c8:	681b      	ldr	r3, [r3, #0]
   287ca:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   287cc:	687b      	ldr	r3, [r7, #4]
   287ce:	681b      	ldr	r3, [r3, #0]
   287d0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   287d2:	231c      	movs	r3, #28
   287d4:	18fb      	adds	r3, r7, r3
   287d6:	0018      	movs	r0, r3
   287d8:	4b75      	ldr	r3, [pc, #468]	; (289b0 <_spi_set_config+0x1f4>)
   287da:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   287dc:	231c      	movs	r3, #28
   287de:	18fb      	adds	r3, r7, r3
   287e0:	2200      	movs	r2, #0
   287e2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   287e4:	683b      	ldr	r3, [r7, #0]
   287e6:	781b      	ldrb	r3, [r3, #0]
   287e8:	2b00      	cmp	r3, #0
   287ea:	d103      	bne.n	287f4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   287ec:	231c      	movs	r3, #28
   287ee:	18fb      	adds	r3, r7, r3
   287f0:	2200      	movs	r2, #0
   287f2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   287f4:	683b      	ldr	r3, [r7, #0]
   287f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   287f8:	230c      	movs	r3, #12
   287fa:	18fb      	adds	r3, r7, r3
   287fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   287fe:	683b      	ldr	r3, [r7, #0]
   28800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28802:	230c      	movs	r3, #12
   28804:	18fb      	adds	r3, r7, r3
   28806:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28808:	683b      	ldr	r3, [r7, #0]
   2880a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2880c:	230c      	movs	r3, #12
   2880e:	18fb      	adds	r3, r7, r3
   28810:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28812:	683b      	ldr	r3, [r7, #0]
   28814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28816:	230c      	movs	r3, #12
   28818:	18fb      	adds	r3, r7, r3
   2881a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2881c:	2347      	movs	r3, #71	; 0x47
   2881e:	18fb      	adds	r3, r7, r3
   28820:	2200      	movs	r2, #0
   28822:	701a      	strb	r2, [r3, #0]
   28824:	e02c      	b.n	28880 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28826:	2347      	movs	r3, #71	; 0x47
   28828:	18fb      	adds	r3, r7, r3
   2882a:	781a      	ldrb	r2, [r3, #0]
   2882c:	230c      	movs	r3, #12
   2882e:	18fb      	adds	r3, r7, r3
   28830:	0092      	lsls	r2, r2, #2
   28832:	58d3      	ldr	r3, [r2, r3]
   28834:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28838:	2b00      	cmp	r3, #0
   2883a:	d109      	bne.n	28850 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2883c:	2347      	movs	r3, #71	; 0x47
   2883e:	18fb      	adds	r3, r7, r3
   28840:	781a      	ldrb	r2, [r3, #0]
   28842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28844:	0011      	movs	r1, r2
   28846:	0018      	movs	r0, r3
   28848:	4b5a      	ldr	r3, [pc, #360]	; (289b4 <_spi_set_config+0x1f8>)
   2884a:	4798      	blx	r3
   2884c:	0003      	movs	r3, r0
   2884e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28852:	3301      	adds	r3, #1
   28854:	d00d      	beq.n	28872 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28858:	b2da      	uxtb	r2, r3
   2885a:	231c      	movs	r3, #28
   2885c:	18fb      	adds	r3, r7, r3
   2885e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28862:	0c1b      	lsrs	r3, r3, #16
   28864:	b2db      	uxtb	r3, r3
   28866:	221c      	movs	r2, #28
   28868:	18ba      	adds	r2, r7, r2
   2886a:	0011      	movs	r1, r2
   2886c:	0018      	movs	r0, r3
   2886e:	4b52      	ldr	r3, [pc, #328]	; (289b8 <_spi_set_config+0x1fc>)
   28870:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28872:	2347      	movs	r3, #71	; 0x47
   28874:	18fb      	adds	r3, r7, r3
   28876:	781a      	ldrb	r2, [r3, #0]
   28878:	2347      	movs	r3, #71	; 0x47
   2887a:	18fb      	adds	r3, r7, r3
   2887c:	3201      	adds	r2, #1
   2887e:	701a      	strb	r2, [r3, #0]
   28880:	2347      	movs	r3, #71	; 0x47
   28882:	18fb      	adds	r3, r7, r3
   28884:	781b      	ldrb	r3, [r3, #0]
   28886:	2b03      	cmp	r3, #3
   28888:	d9cd      	bls.n	28826 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2888a:	683b      	ldr	r3, [r7, #0]
   2888c:	781a      	ldrb	r2, [r3, #0]
   2888e:	687b      	ldr	r3, [r7, #4]
   28890:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28892:	683b      	ldr	r3, [r7, #0]
   28894:	7c1a      	ldrb	r2, [r3, #16]
   28896:	687b      	ldr	r3, [r7, #4]
   28898:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2889a:	683b      	ldr	r3, [r7, #0]
   2889c:	7c9a      	ldrb	r2, [r3, #18]
   2889e:	687b      	ldr	r3, [r7, #4]
   288a0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   288a2:	683b      	ldr	r3, [r7, #0]
   288a4:	7d1a      	ldrb	r2, [r3, #20]
   288a6:	687b      	ldr	r3, [r7, #4]
   288a8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   288aa:	230a      	movs	r3, #10
   288ac:	18fb      	adds	r3, r7, r3
   288ae:	2200      	movs	r2, #0
   288b0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   288b2:	2300      	movs	r3, #0
   288b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   288b6:	2300      	movs	r3, #0
   288b8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   288ba:	683b      	ldr	r3, [r7, #0]
   288bc:	781b      	ldrb	r3, [r3, #0]
   288be:	2b01      	cmp	r3, #1
   288c0:	d129      	bne.n	28916 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   288c2:	687b      	ldr	r3, [r7, #4]
   288c4:	681b      	ldr	r3, [r3, #0]
   288c6:	0018      	movs	r0, r3
   288c8:	4b3c      	ldr	r3, [pc, #240]	; (289bc <_spi_set_config+0x200>)
   288ca:	4798      	blx	r3
   288cc:	0003      	movs	r3, r0
   288ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   288d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   288d2:	3314      	adds	r3, #20
   288d4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   288d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   288d8:	b2db      	uxtb	r3, r3
   288da:	0018      	movs	r0, r3
   288dc:	4b38      	ldr	r3, [pc, #224]	; (289c0 <_spi_set_config+0x204>)
   288de:	4798      	blx	r3
   288e0:	0003      	movs	r3, r0
   288e2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   288e4:	683b      	ldr	r3, [r7, #0]
   288e6:	699b      	ldr	r3, [r3, #24]
   288e8:	2223      	movs	r2, #35	; 0x23
   288ea:	18bc      	adds	r4, r7, r2
   288ec:	220a      	movs	r2, #10
   288ee:	18ba      	adds	r2, r7, r2
   288f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   288f2:	0018      	movs	r0, r3
   288f4:	4b33      	ldr	r3, [pc, #204]	; (289c4 <_spi_set_config+0x208>)
   288f6:	4798      	blx	r3
   288f8:	0003      	movs	r3, r0
   288fa:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   288fc:	2323      	movs	r3, #35	; 0x23
   288fe:	18fb      	adds	r3, r7, r3
   28900:	781b      	ldrb	r3, [r3, #0]
   28902:	2b00      	cmp	r3, #0
   28904:	d001      	beq.n	2890a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28906:	2317      	movs	r3, #23
   28908:	e04e      	b.n	289a8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2890a:	230a      	movs	r3, #10
   2890c:	18fb      	adds	r3, r7, r3
   2890e:	881b      	ldrh	r3, [r3, #0]
   28910:	b2da      	uxtb	r2, r3
   28912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28914:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28916:	683b      	ldr	r3, [r7, #0]
   28918:	685b      	ldr	r3, [r3, #4]
   2891a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2891c:	4313      	orrs	r3, r2
   2891e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28920:	683b      	ldr	r3, [r7, #0]
   28922:	689b      	ldr	r3, [r3, #8]
   28924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28926:	4313      	orrs	r3, r2
   28928:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2892a:	683b      	ldr	r3, [r7, #0]
   2892c:	68db      	ldr	r3, [r3, #12]
   2892e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28930:	4313      	orrs	r3, r2
   28932:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28934:	683b      	ldr	r3, [r7, #0]
   28936:	7c1b      	ldrb	r3, [r3, #16]
   28938:	001a      	movs	r2, r3
   2893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2893c:	4313      	orrs	r3, r2
   2893e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28940:	683b      	ldr	r3, [r7, #0]
   28942:	7c5b      	ldrb	r3, [r3, #17]
   28944:	2b00      	cmp	r3, #0
   28946:	d103      	bne.n	28950 <_spi_set_config+0x194>
   28948:	4b1f      	ldr	r3, [pc, #124]	; (289c8 <_spi_set_config+0x20c>)
   2894a:	4798      	blx	r3
   2894c:	1e03      	subs	r3, r0, #0
   2894e:	d003      	beq.n	28958 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28952:	2280      	movs	r2, #128	; 0x80
   28954:	4313      	orrs	r3, r2
   28956:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28958:	683b      	ldr	r3, [r7, #0]
   2895a:	7c9b      	ldrb	r3, [r3, #18]
   2895c:	2b00      	cmp	r3, #0
   2895e:	d004      	beq.n	2896a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28962:	2280      	movs	r2, #128	; 0x80
   28964:	0292      	lsls	r2, r2, #10
   28966:	4313      	orrs	r3, r2
   28968:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2896a:	683b      	ldr	r3, [r7, #0]
   2896c:	7cdb      	ldrb	r3, [r3, #19]
   2896e:	2b00      	cmp	r3, #0
   28970:	d004      	beq.n	2897c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28974:	2280      	movs	r2, #128	; 0x80
   28976:	0092      	lsls	r2, r2, #2
   28978:	4313      	orrs	r3, r2
   2897a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2897c:	683b      	ldr	r3, [r7, #0]
   2897e:	7d1b      	ldrb	r3, [r3, #20]
   28980:	2b00      	cmp	r3, #0
   28982:	d004      	beq.n	2898e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28986:	2280      	movs	r2, #128	; 0x80
   28988:	0192      	lsls	r2, r2, #6
   2898a:	4313      	orrs	r3, r2
   2898c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28990:	681a      	ldr	r2, [r3, #0]
   28992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28994:	431a      	orrs	r2, r3
   28996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28998:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2899c:	685a      	ldr	r2, [r3, #4]
   2899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289a0:	431a      	orrs	r2, r3
   289a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289a4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   289a6:	2300      	movs	r3, #0
}
   289a8:	0018      	movs	r0, r3
   289aa:	46bd      	mov	sp, r7
   289ac:	b013      	add	sp, #76	; 0x4c
   289ae:	bd90      	pop	{r4, r7, pc}
   289b0:	000282f1 	.word	0x000282f1
   289b4:	00027f91 	.word	0x00027f91
   289b8:	0002ad3d 	.word	0x0002ad3d
   289bc:	0002814d 	.word	0x0002814d
   289c0:	0002ab01 	.word	0x0002ab01
   289c4:	00027cc7 	.word	0x00027cc7
   289c8:	00028465 	.word	0x00028465

000289cc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   289cc:	b590      	push	{r4, r7, lr}
   289ce:	b08b      	sub	sp, #44	; 0x2c
   289d0:	af00      	add	r7, sp, #0
   289d2:	60f8      	str	r0, [r7, #12]
   289d4:	60b9      	str	r1, [r7, #8]
   289d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   289d8:	68fb      	ldr	r3, [r7, #12]
   289da:	68ba      	ldr	r2, [r7, #8]
   289dc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   289de:	68fb      	ldr	r3, [r7, #12]
   289e0:	681b      	ldr	r3, [r3, #0]
   289e2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   289e4:	6a3b      	ldr	r3, [r7, #32]
   289e6:	681b      	ldr	r3, [r3, #0]
   289e8:	2202      	movs	r2, #2
   289ea:	4013      	ands	r3, r2
   289ec:	d001      	beq.n	289f2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   289ee:	231c      	movs	r3, #28
   289f0:	e09c      	b.n	28b2c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   289f2:	6a3b      	ldr	r3, [r7, #32]
   289f4:	681b      	ldr	r3, [r3, #0]
   289f6:	2201      	movs	r2, #1
   289f8:	4013      	ands	r3, r2
   289fa:	d001      	beq.n	28a00 <spi_init+0x34>
		return STATUS_BUSY;
   289fc:	2305      	movs	r3, #5
   289fe:	e095      	b.n	28b2c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28a00:	68fb      	ldr	r3, [r7, #12]
   28a02:	681b      	ldr	r3, [r3, #0]
   28a04:	0018      	movs	r0, r3
   28a06:	4b4b      	ldr	r3, [pc, #300]	; (28b34 <spi_init+0x168>)
   28a08:	4798      	blx	r3
   28a0a:	0003      	movs	r3, r0
   28a0c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28a0e:	69fb      	ldr	r3, [r7, #28]
   28a10:	3302      	adds	r3, #2
   28a12:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28a14:	69fb      	ldr	r3, [r7, #28]
   28a16:	3314      	adds	r3, #20
   28a18:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28a1a:	2201      	movs	r2, #1
   28a1c:	69bb      	ldr	r3, [r7, #24]
   28a1e:	409a      	lsls	r2, r3
   28a20:	0013      	movs	r3, r2
   28a22:	0019      	movs	r1, r3
   28a24:	2002      	movs	r0, #2
   28a26:	4b44      	ldr	r3, [pc, #272]	; (28b38 <spi_init+0x16c>)
   28a28:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28a2a:	2310      	movs	r3, #16
   28a2c:	18fb      	adds	r3, r7, r3
   28a2e:	0018      	movs	r0, r3
   28a30:	4b42      	ldr	r3, [pc, #264]	; (28b3c <spi_init+0x170>)
   28a32:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28a34:	687b      	ldr	r3, [r7, #4]
   28a36:	2224      	movs	r2, #36	; 0x24
   28a38:	5c9a      	ldrb	r2, [r3, r2]
   28a3a:	2310      	movs	r3, #16
   28a3c:	18fb      	adds	r3, r7, r3
   28a3e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28a40:	697b      	ldr	r3, [r7, #20]
   28a42:	b2db      	uxtb	r3, r3
   28a44:	2210      	movs	r2, #16
   28a46:	18ba      	adds	r2, r7, r2
   28a48:	0011      	movs	r1, r2
   28a4a:	0018      	movs	r0, r3
   28a4c:	4b3c      	ldr	r3, [pc, #240]	; (28b40 <spi_init+0x174>)
   28a4e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28a50:	697b      	ldr	r3, [r7, #20]
   28a52:	b2db      	uxtb	r3, r3
   28a54:	0018      	movs	r0, r3
   28a56:	4b3b      	ldr	r3, [pc, #236]	; (28b44 <spi_init+0x178>)
   28a58:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28a5a:	687b      	ldr	r3, [r7, #4]
   28a5c:	2224      	movs	r2, #36	; 0x24
   28a5e:	5c9b      	ldrb	r3, [r3, r2]
   28a60:	2100      	movs	r1, #0
   28a62:	0018      	movs	r0, r3
   28a64:	4b38      	ldr	r3, [pc, #224]	; (28b48 <spi_init+0x17c>)
   28a66:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28a68:	687b      	ldr	r3, [r7, #4]
   28a6a:	781b      	ldrb	r3, [r3, #0]
   28a6c:	2b01      	cmp	r3, #1
   28a6e:	d105      	bne.n	28a7c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28a70:	6a3b      	ldr	r3, [r7, #32]
   28a72:	681b      	ldr	r3, [r3, #0]
   28a74:	220c      	movs	r2, #12
   28a76:	431a      	orrs	r2, r3
   28a78:	6a3b      	ldr	r3, [r7, #32]
   28a7a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a7c:	2327      	movs	r3, #39	; 0x27
   28a7e:	18fb      	adds	r3, r7, r3
   28a80:	2200      	movs	r2, #0
   28a82:	701a      	strb	r2, [r3, #0]
   28a84:	e010      	b.n	28aa8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28a86:	2327      	movs	r3, #39	; 0x27
   28a88:	18fb      	adds	r3, r7, r3
   28a8a:	781b      	ldrb	r3, [r3, #0]
   28a8c:	68fa      	ldr	r2, [r7, #12]
   28a8e:	3302      	adds	r3, #2
   28a90:	009b      	lsls	r3, r3, #2
   28a92:	18d3      	adds	r3, r2, r3
   28a94:	3304      	adds	r3, #4
   28a96:	2200      	movs	r2, #0
   28a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28a9a:	2327      	movs	r3, #39	; 0x27
   28a9c:	18fb      	adds	r3, r7, r3
   28a9e:	781a      	ldrb	r2, [r3, #0]
   28aa0:	2327      	movs	r3, #39	; 0x27
   28aa2:	18fb      	adds	r3, r7, r3
   28aa4:	3201      	adds	r2, #1
   28aa6:	701a      	strb	r2, [r3, #0]
   28aa8:	2327      	movs	r3, #39	; 0x27
   28aaa:	18fb      	adds	r3, r7, r3
   28aac:	781b      	ldrb	r3, [r3, #0]
   28aae:	2b06      	cmp	r3, #6
   28ab0:	d9e9      	bls.n	28a86 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28ab2:	68fb      	ldr	r3, [r7, #12]
   28ab4:	2200      	movs	r2, #0
   28ab6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28ab8:	68fb      	ldr	r3, [r7, #12]
   28aba:	2200      	movs	r2, #0
   28abc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28abe:	68fb      	ldr	r3, [r7, #12]
   28ac0:	2200      	movs	r2, #0
   28ac2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28ac4:	68fb      	ldr	r3, [r7, #12]
   28ac6:	2200      	movs	r2, #0
   28ac8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28aca:	68fb      	ldr	r3, [r7, #12]
   28acc:	2236      	movs	r2, #54	; 0x36
   28ace:	2100      	movs	r1, #0
   28ad0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28ad2:	68fb      	ldr	r3, [r7, #12]
   28ad4:	2237      	movs	r2, #55	; 0x37
   28ad6:	2100      	movs	r1, #0
   28ad8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28ada:	68fb      	ldr	r3, [r7, #12]
   28adc:	2238      	movs	r2, #56	; 0x38
   28ade:	2100      	movs	r1, #0
   28ae0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28ae2:	68fb      	ldr	r3, [r7, #12]
   28ae4:	2203      	movs	r2, #3
   28ae6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28ae8:	68fb      	ldr	r3, [r7, #12]
   28aea:	2200      	movs	r2, #0
   28aec:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28aee:	68fb      	ldr	r3, [r7, #12]
   28af0:	681b      	ldr	r3, [r3, #0]
   28af2:	2213      	movs	r2, #19
   28af4:	18bc      	adds	r4, r7, r2
   28af6:	0018      	movs	r0, r3
   28af8:	4b0e      	ldr	r3, [pc, #56]	; (28b34 <spi_init+0x168>)
   28afa:	4798      	blx	r3
   28afc:	0003      	movs	r3, r0
   28afe:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28b00:	4a12      	ldr	r2, [pc, #72]	; (28b4c <spi_init+0x180>)
   28b02:	2313      	movs	r3, #19
   28b04:	18fb      	adds	r3, r7, r3
   28b06:	781b      	ldrb	r3, [r3, #0]
   28b08:	0011      	movs	r1, r2
   28b0a:	0018      	movs	r0, r3
   28b0c:	4b10      	ldr	r3, [pc, #64]	; (28b50 <spi_init+0x184>)
   28b0e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28b10:	2313      	movs	r3, #19
   28b12:	18fb      	adds	r3, r7, r3
   28b14:	781a      	ldrb	r2, [r3, #0]
   28b16:	4b0f      	ldr	r3, [pc, #60]	; (28b54 <spi_init+0x188>)
   28b18:	0092      	lsls	r2, r2, #2
   28b1a:	68f9      	ldr	r1, [r7, #12]
   28b1c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28b1e:	687a      	ldr	r2, [r7, #4]
   28b20:	68fb      	ldr	r3, [r7, #12]
   28b22:	0011      	movs	r1, r2
   28b24:	0018      	movs	r0, r3
   28b26:	4b0c      	ldr	r3, [pc, #48]	; (28b58 <spi_init+0x18c>)
   28b28:	4798      	blx	r3
   28b2a:	0003      	movs	r3, r0
}
   28b2c:	0018      	movs	r0, r3
   28b2e:	46bd      	mov	sp, r7
   28b30:	b00b      	add	sp, #44	; 0x2c
   28b32:	bd90      	pop	{r4, r7, pc}
   28b34:	0002814d 	.word	0x0002814d
   28b38:	00028409 	.word	0x00028409
   28b3c:	000283f1 	.word	0x000283f1
   28b40:	0002a9dd 	.word	0x0002a9dd
   28b44:	0002aa21 	.word	0x0002aa21
   28b48:	00027f05 	.word	0x00027f05
   28b4c:	00029025 	.word	0x00029025
   28b50:	000281b1 	.word	0x000281b1
   28b54:	20005c60 	.word	0x20005c60
   28b58:	000287bd 	.word	0x000287bd

00028b5c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28b5c:	b590      	push	{r4, r7, lr}
   28b5e:	b087      	sub	sp, #28
   28b60:	af00      	add	r7, sp, #0
   28b62:	60f8      	str	r0, [r7, #12]
   28b64:	60b9      	str	r1, [r7, #8]
   28b66:	0019      	movs	r1, r3
   28b68:	1dbb      	adds	r3, r7, #6
   28b6a:	801a      	strh	r2, [r3, #0]
   28b6c:	1d3b      	adds	r3, r7, #4
   28b6e:	1c0a      	adds	r2, r1, #0
   28b70:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28b72:	68fb      	ldr	r3, [r7, #12]
   28b74:	2238      	movs	r2, #56	; 0x38
   28b76:	5c9b      	ldrb	r3, [r3, r2]
   28b78:	b2db      	uxtb	r3, r3
   28b7a:	2b05      	cmp	r3, #5
   28b7c:	d101      	bne.n	28b82 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28b7e:	2305      	movs	r3, #5
   28b80:	e07a      	b.n	28c78 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28b82:	1dbb      	adds	r3, r7, #6
   28b84:	881b      	ldrh	r3, [r3, #0]
   28b86:	2b00      	cmp	r3, #0
   28b88:	d101      	bne.n	28b8e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28b8a:	2317      	movs	r3, #23
   28b8c:	e074      	b.n	28c78 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28b8e:	68fb      	ldr	r3, [r7, #12]
   28b90:	79db      	ldrb	r3, [r3, #7]
   28b92:	2201      	movs	r2, #1
   28b94:	4053      	eors	r3, r2
   28b96:	b2db      	uxtb	r3, r3
   28b98:	2b00      	cmp	r3, #0
   28b9a:	d001      	beq.n	28ba0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28b9c:	231c      	movs	r3, #28
   28b9e:	e06b      	b.n	28c78 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28ba0:	2316      	movs	r3, #22
   28ba2:	18fb      	adds	r3, r7, r3
   28ba4:	2200      	movs	r2, #0
   28ba6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28ba8:	e05e      	b.n	28c68 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28baa:	68fb      	ldr	r3, [r7, #12]
   28bac:	795b      	ldrb	r3, [r3, #5]
   28bae:	2b01      	cmp	r3, #1
   28bb0:	d112      	bne.n	28bd8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28bb2:	46c0      	nop			; (mov r8, r8)
   28bb4:	68fb      	ldr	r3, [r7, #12]
   28bb6:	0018      	movs	r0, r3
   28bb8:	4b31      	ldr	r3, [pc, #196]	; (28c80 <spi_read_buffer_wait+0x124>)
   28bba:	4798      	blx	r3
   28bbc:	0003      	movs	r3, r0
   28bbe:	001a      	movs	r2, r3
   28bc0:	2301      	movs	r3, #1
   28bc2:	4053      	eors	r3, r2
   28bc4:	b2db      	uxtb	r3, r3
   28bc6:	2b00      	cmp	r3, #0
   28bc8:	d1f4      	bne.n	28bb4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28bca:	1d3b      	adds	r3, r7, #4
   28bcc:	881a      	ldrh	r2, [r3, #0]
   28bce:	68fb      	ldr	r3, [r7, #12]
   28bd0:	0011      	movs	r1, r2
   28bd2:	0018      	movs	r0, r3
   28bd4:	4b2b      	ldr	r3, [pc, #172]	; (28c84 <spi_read_buffer_wait+0x128>)
   28bd6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28bd8:	46c0      	nop			; (mov r8, r8)
   28bda:	68fb      	ldr	r3, [r7, #12]
   28bdc:	0018      	movs	r0, r3
   28bde:	4b2a      	ldr	r3, [pc, #168]	; (28c88 <spi_read_buffer_wait+0x12c>)
   28be0:	4798      	blx	r3
   28be2:	0003      	movs	r3, r0
   28be4:	001a      	movs	r2, r3
   28be6:	2301      	movs	r3, #1
   28be8:	4053      	eors	r3, r2
   28bea:	b2db      	uxtb	r3, r3
   28bec:	2b00      	cmp	r3, #0
   28bee:	d1f4      	bne.n	28bda <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28bf0:	2312      	movs	r3, #18
   28bf2:	18fb      	adds	r3, r7, r3
   28bf4:	2200      	movs	r2, #0
   28bf6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28bf8:	2315      	movs	r3, #21
   28bfa:	18fc      	adds	r4, r7, r3
   28bfc:	2312      	movs	r3, #18
   28bfe:	18fa      	adds	r2, r7, r3
   28c00:	68fb      	ldr	r3, [r7, #12]
   28c02:	0011      	movs	r1, r2
   28c04:	0018      	movs	r0, r3
   28c06:	4b21      	ldr	r3, [pc, #132]	; (28c8c <spi_read_buffer_wait+0x130>)
   28c08:	4798      	blx	r3
   28c0a:	0003      	movs	r3, r0
   28c0c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28c0e:	2315      	movs	r3, #21
   28c10:	18fb      	adds	r3, r7, r3
   28c12:	781b      	ldrb	r3, [r3, #0]
   28c14:	2b00      	cmp	r3, #0
   28c16:	d003      	beq.n	28c20 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28c18:	2315      	movs	r3, #21
   28c1a:	18fb      	adds	r3, r7, r3
   28c1c:	781b      	ldrb	r3, [r3, #0]
   28c1e:	e02b      	b.n	28c78 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28c20:	2316      	movs	r3, #22
   28c22:	18fb      	adds	r3, r7, r3
   28c24:	881b      	ldrh	r3, [r3, #0]
   28c26:	2216      	movs	r2, #22
   28c28:	18ba      	adds	r2, r7, r2
   28c2a:	1c59      	adds	r1, r3, #1
   28c2c:	8011      	strh	r1, [r2, #0]
   28c2e:	001a      	movs	r2, r3
   28c30:	68bb      	ldr	r3, [r7, #8]
   28c32:	189b      	adds	r3, r3, r2
   28c34:	2212      	movs	r2, #18
   28c36:	18ba      	adds	r2, r7, r2
   28c38:	8812      	ldrh	r2, [r2, #0]
   28c3a:	b2d2      	uxtb	r2, r2
   28c3c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28c3e:	68fb      	ldr	r3, [r7, #12]
   28c40:	799b      	ldrb	r3, [r3, #6]
   28c42:	2b01      	cmp	r3, #1
   28c44:	d110      	bne.n	28c68 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28c46:	2316      	movs	r3, #22
   28c48:	18fb      	adds	r3, r7, r3
   28c4a:	881b      	ldrh	r3, [r3, #0]
   28c4c:	2216      	movs	r2, #22
   28c4e:	18ba      	adds	r2, r7, r2
   28c50:	1c59      	adds	r1, r3, #1
   28c52:	8011      	strh	r1, [r2, #0]
   28c54:	001a      	movs	r2, r3
   28c56:	68bb      	ldr	r3, [r7, #8]
   28c58:	189b      	adds	r3, r3, r2
   28c5a:	2212      	movs	r2, #18
   28c5c:	18ba      	adds	r2, r7, r2
   28c5e:	8812      	ldrh	r2, [r2, #0]
   28c60:	0a12      	lsrs	r2, r2, #8
   28c62:	b292      	uxth	r2, r2
   28c64:	b2d2      	uxtb	r2, r2
   28c66:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28c68:	1dbb      	adds	r3, r7, #6
   28c6a:	881b      	ldrh	r3, [r3, #0]
   28c6c:	1dba      	adds	r2, r7, #6
   28c6e:	1e59      	subs	r1, r3, #1
   28c70:	8011      	strh	r1, [r2, #0]
   28c72:	2b00      	cmp	r3, #0
   28c74:	d199      	bne.n	28baa <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28c76:	2300      	movs	r3, #0
}
   28c78:	0018      	movs	r0, r3
   28c7a:	46bd      	mov	sp, r7
   28c7c:	b007      	add	sp, #28
   28c7e:	bd90      	pop	{r4, r7, pc}
   28c80:	000285d5 	.word	0x000285d5
   28c84:	00028625 	.word	0x00028625
   28c88:	000285fd 	.word	0x000285fd
   28c8c:	0002866d 	.word	0x0002866d

00028c90 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28c90:	b580      	push	{r7, lr}
   28c92:	b086      	sub	sp, #24
   28c94:	af00      	add	r7, sp, #0
   28c96:	60f8      	str	r0, [r7, #12]
   28c98:	60b9      	str	r1, [r7, #8]
   28c9a:	1dfb      	adds	r3, r7, #7
   28c9c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28c9e:	68fb      	ldr	r3, [r7, #12]
   28ca0:	795b      	ldrb	r3, [r3, #5]
   28ca2:	2b01      	cmp	r3, #1
   28ca4:	d001      	beq.n	28caa <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28ca6:	2315      	movs	r3, #21
   28ca8:	e05c      	b.n	28d64 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28caa:	68fb      	ldr	r3, [r7, #12]
   28cac:	7a1b      	ldrb	r3, [r3, #8]
   28cae:	2201      	movs	r2, #1
   28cb0:	4053      	eors	r3, r2
   28cb2:	b2db      	uxtb	r3, r3
   28cb4:	2b00      	cmp	r3, #0
   28cb6:	d054      	beq.n	28d62 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28cb8:	1dfb      	adds	r3, r7, #7
   28cba:	781b      	ldrb	r3, [r3, #0]
   28cbc:	2b00      	cmp	r3, #0
   28cbe:	d04a      	beq.n	28d56 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28cc0:	68bb      	ldr	r3, [r7, #8]
   28cc2:	785b      	ldrb	r3, [r3, #1]
   28cc4:	2b00      	cmp	r3, #0
   28cc6:	d03f      	beq.n	28d48 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28cc8:	68fb      	ldr	r3, [r7, #12]
   28cca:	0018      	movs	r0, r3
   28ccc:	4b27      	ldr	r3, [pc, #156]	; (28d6c <spi_select_slave+0xdc>)
   28cce:	4798      	blx	r3
   28cd0:	0003      	movs	r3, r0
   28cd2:	001a      	movs	r2, r3
   28cd4:	2301      	movs	r3, #1
   28cd6:	4053      	eors	r3, r2
   28cd8:	b2db      	uxtb	r3, r3
   28cda:	2b00      	cmp	r3, #0
   28cdc:	d007      	beq.n	28cee <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28cde:	68bb      	ldr	r3, [r7, #8]
   28ce0:	781b      	ldrb	r3, [r3, #0]
   28ce2:	2101      	movs	r1, #1
   28ce4:	0018      	movs	r0, r3
   28ce6:	4b22      	ldr	r3, [pc, #136]	; (28d70 <spi_select_slave+0xe0>)
   28ce8:	4798      	blx	r3
					return STATUS_BUSY;
   28cea:	2305      	movs	r3, #5
   28cec:	e03a      	b.n	28d64 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28cee:	68bb      	ldr	r3, [r7, #8]
   28cf0:	781b      	ldrb	r3, [r3, #0]
   28cf2:	2100      	movs	r1, #0
   28cf4:	0018      	movs	r0, r3
   28cf6:	4b1e      	ldr	r3, [pc, #120]	; (28d70 <spi_select_slave+0xe0>)
   28cf8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28cfa:	68bb      	ldr	r3, [r7, #8]
   28cfc:	789b      	ldrb	r3, [r3, #2]
   28cfe:	b29a      	uxth	r2, r3
   28d00:	68fb      	ldr	r3, [r7, #12]
   28d02:	0011      	movs	r1, r2
   28d04:	0018      	movs	r0, r3
   28d06:	4b1b      	ldr	r3, [pc, #108]	; (28d74 <spi_select_slave+0xe4>)
   28d08:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28d0a:	68fb      	ldr	r3, [r7, #12]
   28d0c:	79db      	ldrb	r3, [r3, #7]
   28d0e:	2201      	movs	r2, #1
   28d10:	4053      	eors	r3, r2
   28d12:	b2db      	uxtb	r3, r3
   28d14:	2b00      	cmp	r3, #0
   28d16:	d024      	beq.n	28d62 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28d18:	46c0      	nop			; (mov r8, r8)
   28d1a:	68fb      	ldr	r3, [r7, #12]
   28d1c:	0018      	movs	r0, r3
   28d1e:	4b16      	ldr	r3, [pc, #88]	; (28d78 <spi_select_slave+0xe8>)
   28d20:	4798      	blx	r3
   28d22:	0003      	movs	r3, r0
   28d24:	001a      	movs	r2, r3
   28d26:	2301      	movs	r3, #1
   28d28:	4053      	eors	r3, r2
   28d2a:	b2db      	uxtb	r3, r3
   28d2c:	2b00      	cmp	r3, #0
   28d2e:	d1f4      	bne.n	28d1a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28d30:	2316      	movs	r3, #22
   28d32:	18fb      	adds	r3, r7, r3
   28d34:	2200      	movs	r2, #0
   28d36:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28d38:	2316      	movs	r3, #22
   28d3a:	18fa      	adds	r2, r7, r3
   28d3c:	68fb      	ldr	r3, [r7, #12]
   28d3e:	0011      	movs	r1, r2
   28d40:	0018      	movs	r0, r3
   28d42:	4b0e      	ldr	r3, [pc, #56]	; (28d7c <spi_select_slave+0xec>)
   28d44:	4798      	blx	r3
   28d46:	e00c      	b.n	28d62 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28d48:	68bb      	ldr	r3, [r7, #8]
   28d4a:	781b      	ldrb	r3, [r3, #0]
   28d4c:	2100      	movs	r1, #0
   28d4e:	0018      	movs	r0, r3
   28d50:	4b07      	ldr	r3, [pc, #28]	; (28d70 <spi_select_slave+0xe0>)
   28d52:	4798      	blx	r3
   28d54:	e005      	b.n	28d62 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28d56:	68bb      	ldr	r3, [r7, #8]
   28d58:	781b      	ldrb	r3, [r3, #0]
   28d5a:	2101      	movs	r1, #1
   28d5c:	0018      	movs	r0, r3
   28d5e:	4b04      	ldr	r3, [pc, #16]	; (28d70 <spi_select_slave+0xe0>)
   28d60:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28d62:	2300      	movs	r3, #0
}
   28d64:	0018      	movs	r0, r3
   28d66:	46bd      	mov	sp, r7
   28d68:	b006      	add	sp, #24
   28d6a:	bd80      	pop	{r7, pc}
   28d6c:	000285d5 	.word	0x000285d5
   28d70:	0002839d 	.word	0x0002839d
   28d74:	00028625 	.word	0x00028625
   28d78:	000285fd 	.word	0x000285fd
   28d7c:	0002866d 	.word	0x0002866d

00028d80 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28d80:	b580      	push	{r7, lr}
   28d82:	b086      	sub	sp, #24
   28d84:	af00      	add	r7, sp, #0
   28d86:	60f8      	str	r0, [r7, #12]
   28d88:	60b9      	str	r1, [r7, #8]
   28d8a:	1dbb      	adds	r3, r7, #6
   28d8c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28d8e:	68fb      	ldr	r3, [r7, #12]
   28d90:	2238      	movs	r2, #56	; 0x38
   28d92:	5c9b      	ldrb	r3, [r3, r2]
   28d94:	b2db      	uxtb	r3, r3
   28d96:	2b05      	cmp	r3, #5
   28d98:	d101      	bne.n	28d9e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28d9a:	2305      	movs	r3, #5
   28d9c:	e087      	b.n	28eae <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28d9e:	1dbb      	adds	r3, r7, #6
   28da0:	881b      	ldrh	r3, [r3, #0]
   28da2:	2b00      	cmp	r3, #0
   28da4:	d101      	bne.n	28daa <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28da6:	2317      	movs	r3, #23
   28da8:	e081      	b.n	28eae <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28daa:	2316      	movs	r3, #22
   28dac:	18fb      	adds	r3, r7, r3
   28dae:	2200      	movs	r2, #0
   28db0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28db2:	2314      	movs	r3, #20
   28db4:	18fb      	adds	r3, r7, r3
   28db6:	1dba      	adds	r2, r7, #6
   28db8:	8812      	ldrh	r2, [r2, #0]
   28dba:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28dbc:	e05f      	b.n	28e7e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28dbe:	46c0      	nop			; (mov r8, r8)
   28dc0:	68fb      	ldr	r3, [r7, #12]
   28dc2:	0018      	movs	r0, r3
   28dc4:	4b3c      	ldr	r3, [pc, #240]	; (28eb8 <spi_write_buffer_wait+0x138>)
   28dc6:	4798      	blx	r3
   28dc8:	0003      	movs	r3, r0
   28dca:	001a      	movs	r2, r3
   28dcc:	2301      	movs	r3, #1
   28dce:	4053      	eors	r3, r2
   28dd0:	b2db      	uxtb	r3, r3
   28dd2:	2b00      	cmp	r3, #0
   28dd4:	d1f4      	bne.n	28dc0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28dd6:	2316      	movs	r3, #22
   28dd8:	18fb      	adds	r3, r7, r3
   28dda:	881b      	ldrh	r3, [r3, #0]
   28ddc:	2216      	movs	r2, #22
   28dde:	18ba      	adds	r2, r7, r2
   28de0:	1c59      	adds	r1, r3, #1
   28de2:	8011      	strh	r1, [r2, #0]
   28de4:	001a      	movs	r2, r3
   28de6:	68bb      	ldr	r3, [r7, #8]
   28de8:	189b      	adds	r3, r3, r2
   28dea:	781a      	ldrb	r2, [r3, #0]
   28dec:	2312      	movs	r3, #18
   28dee:	18fb      	adds	r3, r7, r3
   28df0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28df2:	68fb      	ldr	r3, [r7, #12]
   28df4:	799b      	ldrb	r3, [r3, #6]
   28df6:	2b01      	cmp	r3, #1
   28df8:	d115      	bne.n	28e26 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28dfa:	2316      	movs	r3, #22
   28dfc:	18fb      	adds	r3, r7, r3
   28dfe:	881b      	ldrh	r3, [r3, #0]
   28e00:	2216      	movs	r2, #22
   28e02:	18ba      	adds	r2, r7, r2
   28e04:	1c59      	adds	r1, r3, #1
   28e06:	8011      	strh	r1, [r2, #0]
   28e08:	001a      	movs	r2, r3
   28e0a:	68bb      	ldr	r3, [r7, #8]
   28e0c:	189b      	adds	r3, r3, r2
   28e0e:	781b      	ldrb	r3, [r3, #0]
   28e10:	021b      	lsls	r3, r3, #8
   28e12:	b21a      	sxth	r2, r3
   28e14:	2312      	movs	r3, #18
   28e16:	18fb      	adds	r3, r7, r3
   28e18:	2100      	movs	r1, #0
   28e1a:	5e5b      	ldrsh	r3, [r3, r1]
   28e1c:	4313      	orrs	r3, r2
   28e1e:	b21a      	sxth	r2, r3
   28e20:	2312      	movs	r3, #18
   28e22:	18fb      	adds	r3, r7, r3
   28e24:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28e26:	2312      	movs	r3, #18
   28e28:	18fb      	adds	r3, r7, r3
   28e2a:	881a      	ldrh	r2, [r3, #0]
   28e2c:	68fb      	ldr	r3, [r7, #12]
   28e2e:	0011      	movs	r1, r2
   28e30:	0018      	movs	r0, r3
   28e32:	4b22      	ldr	r3, [pc, #136]	; (28ebc <spi_write_buffer_wait+0x13c>)
   28e34:	4798      	blx	r3

		if (module->receiver_enabled) {
   28e36:	68fb      	ldr	r3, [r7, #12]
   28e38:	79db      	ldrb	r3, [r3, #7]
   28e3a:	2214      	movs	r2, #20
   28e3c:	18ba      	adds	r2, r7, r2
   28e3e:	2114      	movs	r1, #20
   28e40:	1879      	adds	r1, r7, r1
   28e42:	8809      	ldrh	r1, [r1, #0]
   28e44:	8011      	strh	r1, [r2, #0]
   28e46:	2b00      	cmp	r3, #0
   28e48:	d019      	beq.n	28e7e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28e4a:	46c0      	nop			; (mov r8, r8)
   28e4c:	68fb      	ldr	r3, [r7, #12]
   28e4e:	0018      	movs	r0, r3
   28e50:	4b1b      	ldr	r3, [pc, #108]	; (28ec0 <spi_write_buffer_wait+0x140>)
   28e52:	4798      	blx	r3
   28e54:	0003      	movs	r3, r0
   28e56:	001a      	movs	r2, r3
   28e58:	2301      	movs	r3, #1
   28e5a:	4053      	eors	r3, r2
   28e5c:	b2db      	uxtb	r3, r3
   28e5e:	2b00      	cmp	r3, #0
   28e60:	d1f4      	bne.n	28e4c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28e62:	2310      	movs	r3, #16
   28e64:	18fa      	adds	r2, r7, r3
   28e66:	68fb      	ldr	r3, [r7, #12]
   28e68:	0011      	movs	r1, r2
   28e6a:	0018      	movs	r0, r3
   28e6c:	4b15      	ldr	r3, [pc, #84]	; (28ec4 <spi_write_buffer_wait+0x144>)
   28e6e:	4798      	blx	r3
			flush_length--;
   28e70:	2314      	movs	r3, #20
   28e72:	18fb      	adds	r3, r7, r3
   28e74:	881a      	ldrh	r2, [r3, #0]
   28e76:	2314      	movs	r3, #20
   28e78:	18fb      	adds	r3, r7, r3
   28e7a:	3a01      	subs	r2, #1
   28e7c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28e7e:	1dbb      	adds	r3, r7, #6
   28e80:	881b      	ldrh	r3, [r3, #0]
   28e82:	1dba      	adds	r2, r7, #6
   28e84:	1e59      	subs	r1, r3, #1
   28e86:	8011      	strh	r1, [r2, #0]
   28e88:	2b00      	cmp	r3, #0
   28e8a:	d198      	bne.n	28dbe <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28e8c:	68fb      	ldr	r3, [r7, #12]
   28e8e:	795b      	ldrb	r3, [r3, #5]
   28e90:	2b01      	cmp	r3, #1
   28e92:	d10b      	bne.n	28eac <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28e94:	46c0      	nop			; (mov r8, r8)
   28e96:	68fb      	ldr	r3, [r7, #12]
   28e98:	0018      	movs	r0, r3
   28e9a:	4b0b      	ldr	r3, [pc, #44]	; (28ec8 <spi_write_buffer_wait+0x148>)
   28e9c:	4798      	blx	r3
   28e9e:	0003      	movs	r3, r0
   28ea0:	001a      	movs	r2, r3
   28ea2:	2301      	movs	r3, #1
   28ea4:	4053      	eors	r3, r2
   28ea6:	b2db      	uxtb	r3, r3
   28ea8:	2b00      	cmp	r3, #0
   28eaa:	d1f4      	bne.n	28e96 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28eac:	2300      	movs	r3, #0
}
   28eae:	0018      	movs	r0, r3
   28eb0:	46bd      	mov	sp, r7
   28eb2:	b006      	add	sp, #24
   28eb4:	bd80      	pop	{r7, pc}
   28eb6:	46c0      	nop			; (mov r8, r8)
   28eb8:	000285d5 	.word	0x000285d5
   28ebc:	00028625 	.word	0x00028625
   28ec0:	000285fd 	.word	0x000285fd
   28ec4:	0002866d 	.word	0x0002866d
   28ec8:	000285ad 	.word	0x000285ad

00028ecc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28ecc:	b580      	push	{r7, lr}
   28ece:	b084      	sub	sp, #16
   28ed0:	af00      	add	r7, sp, #0
   28ed2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ed4:	687b      	ldr	r3, [r7, #4]
   28ed6:	681b      	ldr	r3, [r3, #0]
   28ed8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28eda:	687b      	ldr	r3, [r7, #4]
   28edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28ede:	781b      	ldrb	r3, [r3, #0]
   28ee0:	b2da      	uxtb	r2, r3
   28ee2:	230e      	movs	r3, #14
   28ee4:	18fb      	adds	r3, r7, r3
   28ee6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28ee8:	687b      	ldr	r3, [r7, #4]
   28eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28eec:	1c5a      	adds	r2, r3, #1
   28eee:	687b      	ldr	r3, [r7, #4]
   28ef0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28ef2:	687b      	ldr	r3, [r7, #4]
   28ef4:	799b      	ldrb	r3, [r3, #6]
   28ef6:	2b01      	cmp	r3, #1
   28ef8:	d113      	bne.n	28f22 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28efa:	687b      	ldr	r3, [r7, #4]
   28efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28efe:	781b      	ldrb	r3, [r3, #0]
   28f00:	b2db      	uxtb	r3, r3
   28f02:	021b      	lsls	r3, r3, #8
   28f04:	b21a      	sxth	r2, r3
   28f06:	230e      	movs	r3, #14
   28f08:	18fb      	adds	r3, r7, r3
   28f0a:	2100      	movs	r1, #0
   28f0c:	5e5b      	ldrsh	r3, [r3, r1]
   28f0e:	4313      	orrs	r3, r2
   28f10:	b21a      	sxth	r2, r3
   28f12:	230e      	movs	r3, #14
   28f14:	18fb      	adds	r3, r7, r3
   28f16:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28f18:	687b      	ldr	r3, [r7, #4]
   28f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f1c:	1c5a      	adds	r2, r3, #1
   28f1e:	687b      	ldr	r3, [r7, #4]
   28f20:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28f22:	230e      	movs	r3, #14
   28f24:	18fb      	adds	r3, r7, r3
   28f26:	881b      	ldrh	r3, [r3, #0]
   28f28:	05db      	lsls	r3, r3, #23
   28f2a:	0dda      	lsrs	r2, r3, #23
   28f2c:	68bb      	ldr	r3, [r7, #8]
   28f2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28f30:	687b      	ldr	r3, [r7, #4]
   28f32:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28f34:	b29b      	uxth	r3, r3
   28f36:	3b01      	subs	r3, #1
   28f38:	b29a      	uxth	r2, r3
   28f3a:	687b      	ldr	r3, [r7, #4]
   28f3c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28f3e:	46c0      	nop			; (mov r8, r8)
   28f40:	46bd      	mov	sp, r7
   28f42:	b004      	add	sp, #16
   28f44:	bd80      	pop	{r7, pc}
	...

00028f48 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28f48:	b580      	push	{r7, lr}
   28f4a:	b084      	sub	sp, #16
   28f4c:	af00      	add	r7, sp, #0
   28f4e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f50:	687b      	ldr	r3, [r7, #4]
   28f52:	681b      	ldr	r3, [r3, #0]
   28f54:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28f56:	4b08      	ldr	r3, [pc, #32]	; (28f78 <_spi_write_dummy+0x30>)
   28f58:	881b      	ldrh	r3, [r3, #0]
   28f5a:	001a      	movs	r2, r3
   28f5c:	68fb      	ldr	r3, [r7, #12]
   28f5e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28f60:	687b      	ldr	r3, [r7, #4]
   28f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28f64:	b29b      	uxth	r3, r3
   28f66:	3b01      	subs	r3, #1
   28f68:	b29a      	uxth	r2, r3
   28f6a:	687b      	ldr	r3, [r7, #4]
   28f6c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28f6e:	46c0      	nop			; (mov r8, r8)
   28f70:	46bd      	mov	sp, r7
   28f72:	b004      	add	sp, #16
   28f74:	bd80      	pop	{r7, pc}
   28f76:	46c0      	nop			; (mov r8, r8)
   28f78:	20005c78 	.word	0x20005c78

00028f7c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28f7c:	b580      	push	{r7, lr}
   28f7e:	b084      	sub	sp, #16
   28f80:	af00      	add	r7, sp, #0
   28f82:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f84:	687b      	ldr	r3, [r7, #4]
   28f86:	681b      	ldr	r3, [r3, #0]
   28f88:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28f8a:	230a      	movs	r3, #10
   28f8c:	18fb      	adds	r3, r7, r3
   28f8e:	2200      	movs	r2, #0
   28f90:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   28f92:	68fb      	ldr	r3, [r7, #12]
   28f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28f96:	230a      	movs	r3, #10
   28f98:	18fb      	adds	r3, r7, r3
   28f9a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28f9c:	687b      	ldr	r3, [r7, #4]
   28f9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28fa0:	b29b      	uxth	r3, r3
   28fa2:	3b01      	subs	r3, #1
   28fa4:	b29a      	uxth	r2, r3
   28fa6:	687b      	ldr	r3, [r7, #4]
   28fa8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28faa:	46c0      	nop			; (mov r8, r8)
   28fac:	46bd      	mov	sp, r7
   28fae:	b004      	add	sp, #16
   28fb0:	bd80      	pop	{r7, pc}

00028fb2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   28fb2:	b580      	push	{r7, lr}
   28fb4:	b084      	sub	sp, #16
   28fb6:	af00      	add	r7, sp, #0
   28fb8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28fba:	687b      	ldr	r3, [r7, #4]
   28fbc:	681b      	ldr	r3, [r3, #0]
   28fbe:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   28fc0:	68fb      	ldr	r3, [r7, #12]
   28fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fc4:	b29a      	uxth	r2, r3
   28fc6:	230a      	movs	r3, #10
   28fc8:	18fb      	adds	r3, r7, r3
   28fca:	05d2      	lsls	r2, r2, #23
   28fcc:	0dd2      	lsrs	r2, r2, #23
   28fce:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   28fd0:	687b      	ldr	r3, [r7, #4]
   28fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fd4:	220a      	movs	r2, #10
   28fd6:	18ba      	adds	r2, r7, r2
   28fd8:	8812      	ldrh	r2, [r2, #0]
   28fda:	b2d2      	uxtb	r2, r2
   28fdc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   28fde:	687b      	ldr	r3, [r7, #4]
   28fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fe2:	1c5a      	adds	r2, r3, #1
   28fe4:	687b      	ldr	r3, [r7, #4]
   28fe6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28fe8:	687b      	ldr	r3, [r7, #4]
   28fea:	799b      	ldrb	r3, [r3, #6]
   28fec:	2b01      	cmp	r3, #1
   28fee:	d10d      	bne.n	2900c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28ff0:	687b      	ldr	r3, [r7, #4]
   28ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ff4:	220a      	movs	r2, #10
   28ff6:	18ba      	adds	r2, r7, r2
   28ff8:	8812      	ldrh	r2, [r2, #0]
   28ffa:	0a12      	lsrs	r2, r2, #8
   28ffc:	b292      	uxth	r2, r2
   28ffe:	b2d2      	uxtb	r2, r2
   29000:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   29002:	687b      	ldr	r3, [r7, #4]
   29004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29006:	1c5a      	adds	r2, r3, #1
   29008:	687b      	ldr	r3, [r7, #4]
   2900a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2900c:	687b      	ldr	r3, [r7, #4]
   2900e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29010:	b29b      	uxth	r3, r3
   29012:	3b01      	subs	r3, #1
   29014:	b29a      	uxth	r2, r3
   29016:	687b      	ldr	r3, [r7, #4]
   29018:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2901a:	46c0      	nop			; (mov r8, r8)
   2901c:	46bd      	mov	sp, r7
   2901e:	b004      	add	sp, #16
   29020:	bd80      	pop	{r7, pc}
	...

00029024 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   29024:	b580      	push	{r7, lr}
   29026:	b086      	sub	sp, #24
   29028:	af00      	add	r7, sp, #0
   2902a:	0002      	movs	r2, r0
   2902c:	1dfb      	adds	r3, r7, #7
   2902e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   29030:	1dfb      	adds	r3, r7, #7
   29032:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   29034:	4b96      	ldr	r3, [pc, #600]	; (29290 <_spi_interrupt_handler+0x26c>)
   29036:	0092      	lsls	r2, r2, #2
   29038:	58d3      	ldr	r3, [r2, r3]
   2903a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2903c:	697b      	ldr	r3, [r7, #20]
   2903e:	681b      	ldr	r3, [r3, #0]
   29040:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   29042:	697b      	ldr	r3, [r7, #20]
   29044:	2237      	movs	r2, #55	; 0x37
   29046:	5c9a      	ldrb	r2, [r3, r2]
   29048:	697b      	ldr	r3, [r7, #20]
   2904a:	2136      	movs	r1, #54	; 0x36
   2904c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2904e:	230f      	movs	r3, #15
   29050:	18fb      	adds	r3, r7, r3
   29052:	400a      	ands	r2, r1
   29054:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   29056:	693b      	ldr	r3, [r7, #16]
   29058:	7e1b      	ldrb	r3, [r3, #24]
   2905a:	b2da      	uxtb	r2, r3
   2905c:	230c      	movs	r3, #12
   2905e:	18fb      	adds	r3, r7, r3
   29060:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   29062:	693b      	ldr	r3, [r7, #16]
   29064:	7d9b      	ldrb	r3, [r3, #22]
   29066:	b2db      	uxtb	r3, r3
   29068:	b29a      	uxth	r2, r3
   2906a:	230c      	movs	r3, #12
   2906c:	18fb      	adds	r3, r7, r3
   2906e:	210c      	movs	r1, #12
   29070:	1879      	adds	r1, r7, r1
   29072:	8809      	ldrh	r1, [r1, #0]
   29074:	400a      	ands	r2, r1
   29076:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   29078:	230c      	movs	r3, #12
   2907a:	18fb      	adds	r3, r7, r3
   2907c:	881b      	ldrh	r3, [r3, #0]
   2907e:	2201      	movs	r2, #1
   29080:	4013      	ands	r3, r2
   29082:	d038      	beq.n	290f6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29084:	697b      	ldr	r3, [r7, #20]
   29086:	795b      	ldrb	r3, [r3, #5]
   29088:	2b01      	cmp	r3, #1
   2908a:	d110      	bne.n	290ae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2908c:	697b      	ldr	r3, [r7, #20]
   2908e:	7a5b      	ldrb	r3, [r3, #9]
   29090:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29092:	2b00      	cmp	r3, #0
   29094:	d10b      	bne.n	290ae <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   29096:	697b      	ldr	r3, [r7, #20]
   29098:	0018      	movs	r0, r3
   2909a:	4b7e      	ldr	r3, [pc, #504]	; (29294 <_spi_interrupt_handler+0x270>)
   2909c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2909e:	697b      	ldr	r3, [r7, #20]
   290a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   290a2:	b29b      	uxth	r3, r3
   290a4:	2b00      	cmp	r3, #0
   290a6:	d102      	bne.n	290ae <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   290a8:	693b      	ldr	r3, [r7, #16]
   290aa:	2201      	movs	r2, #1
   290ac:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   290ae:	697b      	ldr	r3, [r7, #20]
   290b0:	795b      	ldrb	r3, [r3, #5]
		if (0
   290b2:	2b01      	cmp	r3, #1
   290b4:	d11f      	bne.n	290f6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   290b6:	697b      	ldr	r3, [r7, #20]
   290b8:	7a5b      	ldrb	r3, [r3, #9]
   290ba:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   290bc:	2b00      	cmp	r3, #0
   290be:	d01a      	beq.n	290f6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   290c0:	697b      	ldr	r3, [r7, #20]
   290c2:	0018      	movs	r0, r3
   290c4:	4b74      	ldr	r3, [pc, #464]	; (29298 <_spi_interrupt_handler+0x274>)
   290c6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   290c8:	697b      	ldr	r3, [r7, #20]
   290ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   290cc:	b29b      	uxth	r3, r3
   290ce:	2b00      	cmp	r3, #0
   290d0:	d111      	bne.n	290f6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   290d2:	693b      	ldr	r3, [r7, #16]
   290d4:	2201      	movs	r2, #1
   290d6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   290d8:	697b      	ldr	r3, [r7, #20]
   290da:	7a5b      	ldrb	r3, [r3, #9]
   290dc:	b2db      	uxtb	r3, r3
   290de:	2b01      	cmp	r3, #1
   290e0:	d109      	bne.n	290f6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   290e2:	697b      	ldr	r3, [r7, #20]
   290e4:	79db      	ldrb	r3, [r3, #7]
   290e6:	2201      	movs	r2, #1
   290e8:	4053      	eors	r3, r2
   290ea:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   290ec:	2b00      	cmp	r3, #0
   290ee:	d002      	beq.n	290f6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   290f0:	693b      	ldr	r3, [r7, #16]
   290f2:	2202      	movs	r2, #2
   290f4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   290f6:	230c      	movs	r3, #12
   290f8:	18fb      	adds	r3, r7, r3
   290fa:	881b      	ldrh	r3, [r3, #0]
   290fc:	2204      	movs	r2, #4
   290fe:	4013      	ands	r3, r2
   29100:	d100      	bne.n	29104 <_spi_interrupt_handler+0xe0>
   29102:	e07e      	b.n	29202 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29104:	693b      	ldr	r3, [r7, #16]
   29106:	8b5b      	ldrh	r3, [r3, #26]
   29108:	b29b      	uxth	r3, r3
   2910a:	001a      	movs	r2, r3
   2910c:	2304      	movs	r3, #4
   2910e:	4013      	ands	r3, r2
   29110:	d022      	beq.n	29158 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   29112:	697b      	ldr	r3, [r7, #20]
   29114:	7a5b      	ldrb	r3, [r3, #9]
   29116:	b2db      	uxtb	r3, r3
   29118:	2b01      	cmp	r3, #1
   2911a:	d014      	beq.n	29146 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2911c:	697b      	ldr	r3, [r7, #20]
   2911e:	2238      	movs	r2, #56	; 0x38
   29120:	211e      	movs	r1, #30
   29122:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   29124:	697b      	ldr	r3, [r7, #20]
   29126:	2203      	movs	r2, #3
   29128:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2912a:	693b      	ldr	r3, [r7, #16]
   2912c:	2205      	movs	r2, #5
   2912e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   29130:	230f      	movs	r3, #15
   29132:	18fb      	adds	r3, r7, r3
   29134:	781b      	ldrb	r3, [r3, #0]
   29136:	2208      	movs	r2, #8
   29138:	4013      	ands	r3, r2
   2913a:	d004      	beq.n	29146 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2913c:	697b      	ldr	r3, [r7, #20]
   2913e:	699b      	ldr	r3, [r3, #24]
   29140:	697a      	ldr	r2, [r7, #20]
   29142:	0010      	movs	r0, r2
   29144:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   29146:	693b      	ldr	r3, [r7, #16]
   29148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2914a:	230a      	movs	r3, #10
   2914c:	18fb      	adds	r3, r7, r3
   2914e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29150:	693b      	ldr	r3, [r7, #16]
   29152:	2204      	movs	r2, #4
   29154:	835a      	strh	r2, [r3, #26]
   29156:	e054      	b.n	29202 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   29158:	697b      	ldr	r3, [r7, #20]
   2915a:	7a5b      	ldrb	r3, [r3, #9]
   2915c:	b2db      	uxtb	r3, r3
   2915e:	2b01      	cmp	r3, #1
   29160:	d11e      	bne.n	291a0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   29162:	697b      	ldr	r3, [r7, #20]
   29164:	0018      	movs	r0, r3
   29166:	4b4d      	ldr	r3, [pc, #308]	; (2929c <_spi_interrupt_handler+0x278>)
   29168:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2916a:	697b      	ldr	r3, [r7, #20]
   2916c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2916e:	b29b      	uxth	r3, r3
   29170:	2b00      	cmp	r3, #0
   29172:	d146      	bne.n	29202 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29174:	693b      	ldr	r3, [r7, #16]
   29176:	2204      	movs	r2, #4
   29178:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2917a:	697b      	ldr	r3, [r7, #20]
   2917c:	2238      	movs	r2, #56	; 0x38
   2917e:	2100      	movs	r1, #0
   29180:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   29182:	697b      	ldr	r3, [r7, #20]
   29184:	2203      	movs	r2, #3
   29186:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   29188:	230f      	movs	r3, #15
   2918a:	18fb      	adds	r3, r7, r3
   2918c:	781b      	ldrb	r3, [r3, #0]
   2918e:	2201      	movs	r2, #1
   29190:	4013      	ands	r3, r2
   29192:	d036      	beq.n	29202 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29194:	697b      	ldr	r3, [r7, #20]
   29196:	68db      	ldr	r3, [r3, #12]
   29198:	697a      	ldr	r2, [r7, #20]
   2919a:	0010      	movs	r0, r2
   2919c:	4798      	blx	r3
   2919e:	e030      	b.n	29202 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   291a0:	697b      	ldr	r3, [r7, #20]
   291a2:	0018      	movs	r0, r3
   291a4:	4b3e      	ldr	r3, [pc, #248]	; (292a0 <_spi_interrupt_handler+0x27c>)
   291a6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   291a8:	697b      	ldr	r3, [r7, #20]
   291aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   291ac:	b29b      	uxth	r3, r3
   291ae:	2b00      	cmp	r3, #0
   291b0:	d127      	bne.n	29202 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   291b2:	697b      	ldr	r3, [r7, #20]
   291b4:	2238      	movs	r2, #56	; 0x38
   291b6:	2100      	movs	r1, #0
   291b8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   291ba:	693b      	ldr	r3, [r7, #16]
   291bc:	2204      	movs	r2, #4
   291be:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   291c0:	697b      	ldr	r3, [r7, #20]
   291c2:	7a5b      	ldrb	r3, [r3, #9]
   291c4:	b2db      	uxtb	r3, r3
   291c6:	2b02      	cmp	r3, #2
   291c8:	d10b      	bne.n	291e2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   291ca:	230f      	movs	r3, #15
   291cc:	18fb      	adds	r3, r7, r3
   291ce:	781b      	ldrb	r3, [r3, #0]
   291d0:	2204      	movs	r2, #4
   291d2:	4013      	ands	r3, r2
   291d4:	d015      	beq.n	29202 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   291d6:	697b      	ldr	r3, [r7, #20]
   291d8:	695b      	ldr	r3, [r3, #20]
   291da:	697a      	ldr	r2, [r7, #20]
   291dc:	0010      	movs	r0, r2
   291de:	4798      	blx	r3
   291e0:	e00f      	b.n	29202 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   291e2:	697b      	ldr	r3, [r7, #20]
   291e4:	7a5b      	ldrb	r3, [r3, #9]
   291e6:	b2db      	uxtb	r3, r3
   291e8:	2b00      	cmp	r3, #0
   291ea:	d10a      	bne.n	29202 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   291ec:	230f      	movs	r3, #15
   291ee:	18fb      	adds	r3, r7, r3
   291f0:	781b      	ldrb	r3, [r3, #0]
   291f2:	2202      	movs	r2, #2
   291f4:	4013      	ands	r3, r2
   291f6:	d004      	beq.n	29202 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   291f8:	697b      	ldr	r3, [r7, #20]
   291fa:	691b      	ldr	r3, [r3, #16]
   291fc:	697a      	ldr	r2, [r7, #20]
   291fe:	0010      	movs	r0, r2
   29200:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   29202:	230c      	movs	r3, #12
   29204:	18fb      	adds	r3, r7, r3
   29206:	881b      	ldrh	r3, [r3, #0]
   29208:	2202      	movs	r2, #2
   2920a:	4013      	ands	r3, r2
   2920c:	d024      	beq.n	29258 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2920e:	697b      	ldr	r3, [r7, #20]
   29210:	795b      	ldrb	r3, [r3, #5]
   29212:	2b01      	cmp	r3, #1
   29214:	d120      	bne.n	29258 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29216:	697b      	ldr	r3, [r7, #20]
   29218:	7a5b      	ldrb	r3, [r3, #9]
   2921a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2921c:	2b01      	cmp	r3, #1
   2921e:	d11b      	bne.n	29258 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29220:	697b      	ldr	r3, [r7, #20]
   29222:	79db      	ldrb	r3, [r3, #7]
   29224:	2201      	movs	r2, #1
   29226:	4053      	eors	r3, r2
   29228:	b2db      	uxtb	r3, r3
   2922a:	2b00      	cmp	r3, #0
   2922c:	d014      	beq.n	29258 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2922e:	693b      	ldr	r3, [r7, #16]
   29230:	2202      	movs	r2, #2
   29232:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   29234:	697b      	ldr	r3, [r7, #20]
   29236:	2203      	movs	r2, #3
   29238:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2923a:	697b      	ldr	r3, [r7, #20]
   2923c:	2238      	movs	r2, #56	; 0x38
   2923e:	2100      	movs	r1, #0
   29240:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   29242:	230f      	movs	r3, #15
   29244:	18fb      	adds	r3, r7, r3
   29246:	781b      	ldrb	r3, [r3, #0]
   29248:	2201      	movs	r2, #1
   2924a:	4013      	ands	r3, r2
   2924c:	d004      	beq.n	29258 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2924e:	697b      	ldr	r3, [r7, #20]
   29250:	68db      	ldr	r3, [r3, #12]
   29252:	697a      	ldr	r2, [r7, #20]
   29254:	0010      	movs	r0, r2
   29256:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   29258:	230c      	movs	r3, #12
   2925a:	18fb      	adds	r3, r7, r3
   2925c:	881b      	ldrh	r3, [r3, #0]
   2925e:	2280      	movs	r2, #128	; 0x80
   29260:	4013      	ands	r3, r2
   29262:	d010      	beq.n	29286 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29264:	693b      	ldr	r3, [r7, #16]
   29266:	2280      	movs	r2, #128	; 0x80
   29268:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2926a:	693b      	ldr	r3, [r7, #16]
   2926c:	2280      	movs	r2, #128	; 0x80
   2926e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   29270:	230f      	movs	r3, #15
   29272:	18fb      	adds	r3, r7, r3
   29274:	781b      	ldrb	r3, [r3, #0]
   29276:	2240      	movs	r2, #64	; 0x40
   29278:	4013      	ands	r3, r2
   2927a:	d004      	beq.n	29286 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2927c:	697b      	ldr	r3, [r7, #20]
   2927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29280:	697a      	ldr	r2, [r7, #20]
   29282:	0010      	movs	r0, r2
   29284:	4798      	blx	r3
		}
	}
#  endif
}
   29286:	46c0      	nop			; (mov r8, r8)
   29288:	46bd      	mov	sp, r7
   2928a:	b006      	add	sp, #24
   2928c:	bd80      	pop	{r7, pc}
   2928e:	46c0      	nop			; (mov r8, r8)
   29290:	20005c60 	.word	0x20005c60
   29294:	00028f49 	.word	0x00028f49
   29298:	00028ecd 	.word	0x00028ecd
   2929c:	00028f7d 	.word	0x00028f7d
   292a0:	00028fb3 	.word	0x00028fb3

000292a4 <system_gclk_chan_get_config_defaults>:
{
   292a4:	b580      	push	{r7, lr}
   292a6:	b082      	sub	sp, #8
   292a8:	af00      	add	r7, sp, #0
   292aa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   292ac:	687b      	ldr	r3, [r7, #4]
   292ae:	2200      	movs	r2, #0
   292b0:	701a      	strb	r2, [r3, #0]
}
   292b2:	46c0      	nop			; (mov r8, r8)
   292b4:	46bd      	mov	sp, r7
   292b6:	b002      	add	sp, #8
   292b8:	bd80      	pop	{r7, pc}
	...

000292bc <system_apb_clock_set_mask>:
{
   292bc:	b580      	push	{r7, lr}
   292be:	b082      	sub	sp, #8
   292c0:	af00      	add	r7, sp, #0
   292c2:	0002      	movs	r2, r0
   292c4:	6039      	str	r1, [r7, #0]
   292c6:	1dfb      	adds	r3, r7, #7
   292c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   292ca:	1dfb      	adds	r3, r7, #7
   292cc:	781b      	ldrb	r3, [r3, #0]
   292ce:	2b01      	cmp	r3, #1
   292d0:	d00a      	beq.n	292e8 <system_apb_clock_set_mask+0x2c>
   292d2:	2b02      	cmp	r3, #2
   292d4:	d00f      	beq.n	292f6 <system_apb_clock_set_mask+0x3a>
   292d6:	2b00      	cmp	r3, #0
   292d8:	d114      	bne.n	29304 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   292da:	4b0e      	ldr	r3, [pc, #56]	; (29314 <system_apb_clock_set_mask+0x58>)
   292dc:	4a0d      	ldr	r2, [pc, #52]	; (29314 <system_apb_clock_set_mask+0x58>)
   292de:	6991      	ldr	r1, [r2, #24]
   292e0:	683a      	ldr	r2, [r7, #0]
   292e2:	430a      	orrs	r2, r1
   292e4:	619a      	str	r2, [r3, #24]
			break;
   292e6:	e00f      	b.n	29308 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   292e8:	4b0a      	ldr	r3, [pc, #40]	; (29314 <system_apb_clock_set_mask+0x58>)
   292ea:	4a0a      	ldr	r2, [pc, #40]	; (29314 <system_apb_clock_set_mask+0x58>)
   292ec:	69d1      	ldr	r1, [r2, #28]
   292ee:	683a      	ldr	r2, [r7, #0]
   292f0:	430a      	orrs	r2, r1
   292f2:	61da      	str	r2, [r3, #28]
			break;
   292f4:	e008      	b.n	29308 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   292f6:	4b07      	ldr	r3, [pc, #28]	; (29314 <system_apb_clock_set_mask+0x58>)
   292f8:	4a06      	ldr	r2, [pc, #24]	; (29314 <system_apb_clock_set_mask+0x58>)
   292fa:	6a11      	ldr	r1, [r2, #32]
   292fc:	683a      	ldr	r2, [r7, #0]
   292fe:	430a      	orrs	r2, r1
   29300:	621a      	str	r2, [r3, #32]
			break;
   29302:	e001      	b.n	29308 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29304:	2317      	movs	r3, #23
   29306:	e000      	b.n	2930a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29308:	2300      	movs	r3, #0
}
   2930a:	0018      	movs	r0, r3
   2930c:	46bd      	mov	sp, r7
   2930e:	b002      	add	sp, #8
   29310:	bd80      	pop	{r7, pc}
   29312:	46c0      	nop			; (mov r8, r8)
   29314:	40000400 	.word	0x40000400

00029318 <system_pinmux_get_config_defaults>:
{
   29318:	b580      	push	{r7, lr}
   2931a:	b082      	sub	sp, #8
   2931c:	af00      	add	r7, sp, #0
   2931e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29320:	687b      	ldr	r3, [r7, #4]
   29322:	2280      	movs	r2, #128	; 0x80
   29324:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29326:	687b      	ldr	r3, [r7, #4]
   29328:	2200      	movs	r2, #0
   2932a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2932c:	687b      	ldr	r3, [r7, #4]
   2932e:	2201      	movs	r2, #1
   29330:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29332:	687b      	ldr	r3, [r7, #4]
   29334:	2200      	movs	r2, #0
   29336:	70da      	strb	r2, [r3, #3]
}
   29338:	46c0      	nop			; (mov r8, r8)
   2933a:	46bd      	mov	sp, r7
   2933c:	b002      	add	sp, #8
   2933e:	bd80      	pop	{r7, pc}

00029340 <system_is_debugger_present>:
{
   29340:	b580      	push	{r7, lr}
   29342:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29344:	4b05      	ldr	r3, [pc, #20]	; (2935c <system_is_debugger_present+0x1c>)
   29346:	789b      	ldrb	r3, [r3, #2]
   29348:	b2db      	uxtb	r3, r3
   2934a:	001a      	movs	r2, r3
   2934c:	2302      	movs	r3, #2
   2934e:	4013      	ands	r3, r2
   29350:	1e5a      	subs	r2, r3, #1
   29352:	4193      	sbcs	r3, r2
   29354:	b2db      	uxtb	r3, r3
}
   29356:	0018      	movs	r0, r3
   29358:	46bd      	mov	sp, r7
   2935a:	bd80      	pop	{r7, pc}
   2935c:	41002000 	.word	0x41002000

00029360 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   29360:	b580      	push	{r7, lr}
   29362:	b084      	sub	sp, #16
   29364:	af00      	add	r7, sp, #0
   29366:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   29368:	687b      	ldr	r3, [r7, #4]
   2936a:	681b      	ldr	r3, [r3, #0]
   2936c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2936e:	68fb      	ldr	r3, [r7, #12]
   29370:	69db      	ldr	r3, [r3, #28]
   29372:	1e5a      	subs	r2, r3, #1
   29374:	4193      	sbcs	r3, r2
   29376:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   29378:	0018      	movs	r0, r3
   2937a:	46bd      	mov	sp, r7
   2937c:	b004      	add	sp, #16
   2937e:	bd80      	pop	{r7, pc}

00029380 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   29380:	b580      	push	{r7, lr}
   29382:	b082      	sub	sp, #8
   29384:	af00      	add	r7, sp, #0
   29386:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   29388:	46c0      	nop			; (mov r8, r8)
   2938a:	687b      	ldr	r3, [r7, #4]
   2938c:	0018      	movs	r0, r3
   2938e:	4b04      	ldr	r3, [pc, #16]	; (293a0 <_usart_wait_for_sync+0x20>)
   29390:	4798      	blx	r3
   29392:	1e03      	subs	r3, r0, #0
   29394:	d1f9      	bne.n	2938a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   29396:	46c0      	nop			; (mov r8, r8)
   29398:	46bd      	mov	sp, r7
   2939a:	b002      	add	sp, #8
   2939c:	bd80      	pop	{r7, pc}
   2939e:	46c0      	nop			; (mov r8, r8)
   293a0:	00029361 	.word	0x00029361

000293a4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   293a4:	b5b0      	push	{r4, r5, r7, lr}
   293a6:	b08c      	sub	sp, #48	; 0x30
   293a8:	af02      	add	r7, sp, #8
   293aa:	6078      	str	r0, [r7, #4]
   293ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   293ae:	687b      	ldr	r3, [r7, #4]
   293b0:	681b      	ldr	r3, [r3, #0]
   293b2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   293b4:	687b      	ldr	r3, [r7, #4]
   293b6:	681b      	ldr	r3, [r3, #0]
   293b8:	0018      	movs	r0, r3
   293ba:	4bab      	ldr	r3, [pc, #684]	; (29668 <_usart_set_config+0x2c4>)
   293bc:	4798      	blx	r3
   293be:	0003      	movs	r3, r0
   293c0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   293c2:	697b      	ldr	r3, [r7, #20]
   293c4:	3314      	adds	r3, #20
   293c6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   293c8:	2300      	movs	r3, #0
   293ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   293cc:	2300      	movs	r3, #0
   293ce:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   293d0:	230a      	movs	r3, #10
   293d2:	18fb      	adds	r3, r7, r3
   293d4:	2200      	movs	r2, #0
   293d6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   293d8:	231f      	movs	r3, #31
   293da:	18fb      	adds	r3, r7, r3
   293dc:	2200      	movs	r2, #0
   293de:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   293e0:	231e      	movs	r3, #30
   293e2:	18fb      	adds	r3, r7, r3
   293e4:	2210      	movs	r2, #16
   293e6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   293e8:	683b      	ldr	r3, [r7, #0]
   293ea:	8a1b      	ldrh	r3, [r3, #16]
   293ec:	2280      	movs	r2, #128	; 0x80
   293ee:	01d2      	lsls	r2, r2, #7
   293f0:	4293      	cmp	r3, r2
   293f2:	d01c      	beq.n	2942e <_usart_set_config+0x8a>
   293f4:	2280      	movs	r2, #128	; 0x80
   293f6:	01d2      	lsls	r2, r2, #7
   293f8:	4293      	cmp	r3, r2
   293fa:	dc06      	bgt.n	2940a <_usart_set_config+0x66>
   293fc:	2b00      	cmp	r3, #0
   293fe:	d00d      	beq.n	2941c <_usart_set_config+0x78>
   29400:	2280      	movs	r2, #128	; 0x80
   29402:	0192      	lsls	r2, r2, #6
   29404:	4293      	cmp	r3, r2
   29406:	d024      	beq.n	29452 <_usart_set_config+0xae>
   29408:	e035      	b.n	29476 <_usart_set_config+0xd2>
   2940a:	22c0      	movs	r2, #192	; 0xc0
   2940c:	01d2      	lsls	r2, r2, #7
   2940e:	4293      	cmp	r3, r2
   29410:	d028      	beq.n	29464 <_usart_set_config+0xc0>
   29412:	2280      	movs	r2, #128	; 0x80
   29414:	0212      	lsls	r2, r2, #8
   29416:	4293      	cmp	r3, r2
   29418:	d012      	beq.n	29440 <_usart_set_config+0x9c>
   2941a:	e02c      	b.n	29476 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2941c:	231f      	movs	r3, #31
   2941e:	18fb      	adds	r3, r7, r3
   29420:	2200      	movs	r2, #0
   29422:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29424:	231e      	movs	r3, #30
   29426:	18fb      	adds	r3, r7, r3
   29428:	2210      	movs	r2, #16
   2942a:	701a      	strb	r2, [r3, #0]
			break;
   2942c:	e023      	b.n	29476 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2942e:	231f      	movs	r3, #31
   29430:	18fb      	adds	r3, r7, r3
   29432:	2200      	movs	r2, #0
   29434:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29436:	231e      	movs	r3, #30
   29438:	18fb      	adds	r3, r7, r3
   2943a:	2208      	movs	r2, #8
   2943c:	701a      	strb	r2, [r3, #0]
			break;
   2943e:	e01a      	b.n	29476 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29440:	231f      	movs	r3, #31
   29442:	18fb      	adds	r3, r7, r3
   29444:	2200      	movs	r2, #0
   29446:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   29448:	231e      	movs	r3, #30
   2944a:	18fb      	adds	r3, r7, r3
   2944c:	2203      	movs	r2, #3
   2944e:	701a      	strb	r2, [r3, #0]
			break;
   29450:	e011      	b.n	29476 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29452:	231f      	movs	r3, #31
   29454:	18fb      	adds	r3, r7, r3
   29456:	2201      	movs	r2, #1
   29458:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2945a:	231e      	movs	r3, #30
   2945c:	18fb      	adds	r3, r7, r3
   2945e:	2210      	movs	r2, #16
   29460:	701a      	strb	r2, [r3, #0]
			break;
   29462:	e008      	b.n	29476 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29464:	231f      	movs	r3, #31
   29466:	18fb      	adds	r3, r7, r3
   29468:	2201      	movs	r2, #1
   2946a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2946c:	231e      	movs	r3, #30
   2946e:	18fb      	adds	r3, r7, r3
   29470:	2208      	movs	r2, #8
   29472:	701a      	strb	r2, [r3, #0]
			break;
   29474:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   29476:	683b      	ldr	r3, [r7, #0]
   29478:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2947a:	683b      	ldr	r3, [r7, #0]
   2947c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2947e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   29480:	683b      	ldr	r3, [r7, #0]
   29482:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   29484:	4313      	orrs	r3, r2
		config->sample_rate |
   29486:	683a      	ldr	r2, [r7, #0]
   29488:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2948a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2948c:	683a      	ldr	r2, [r7, #0]
   2948e:	7e12      	ldrb	r2, [r2, #24]
   29490:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   29492:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29494:	683a      	ldr	r2, [r7, #0]
   29496:	2126      	movs	r1, #38	; 0x26
   29498:	5c52      	ldrb	r2, [r2, r1]
   2949a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2949c:	4313      	orrs	r3, r2
   2949e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   294a0:	231d      	movs	r3, #29
   294a2:	18fb      	adds	r3, r7, r3
   294a4:	2200      	movs	r2, #0
   294a6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   294a8:	683b      	ldr	r3, [r7, #0]
   294aa:	685b      	ldr	r3, [r3, #4]
   294ac:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   294ae:	68fb      	ldr	r3, [r7, #12]
   294b0:	2b00      	cmp	r3, #0
   294b2:	d01e      	beq.n	294f2 <_usart_set_config+0x14e>
   294b4:	2280      	movs	r2, #128	; 0x80
   294b6:	0552      	lsls	r2, r2, #21
   294b8:	4293      	cmp	r3, r2
   294ba:	d14f      	bne.n	2955c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   294bc:	683b      	ldr	r3, [r7, #0]
   294be:	2227      	movs	r2, #39	; 0x27
   294c0:	5c9b      	ldrb	r3, [r3, r2]
   294c2:	2201      	movs	r2, #1
   294c4:	4053      	eors	r3, r2
   294c6:	b2db      	uxtb	r3, r3
   294c8:	2b00      	cmp	r3, #0
   294ca:	d046      	beq.n	2955a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   294cc:	683b      	ldr	r3, [r7, #0]
   294ce:	6a1d      	ldr	r5, [r3, #32]
   294d0:	693b      	ldr	r3, [r7, #16]
   294d2:	b2db      	uxtb	r3, r3
   294d4:	0018      	movs	r0, r3
   294d6:	4b65      	ldr	r3, [pc, #404]	; (2966c <_usart_set_config+0x2c8>)
   294d8:	4798      	blx	r3
   294da:	0001      	movs	r1, r0
   294dc:	231d      	movs	r3, #29
   294de:	18fc      	adds	r4, r7, r3
   294e0:	230a      	movs	r3, #10
   294e2:	18fb      	adds	r3, r7, r3
   294e4:	001a      	movs	r2, r3
   294e6:	0028      	movs	r0, r5
   294e8:	4b61      	ldr	r3, [pc, #388]	; (29670 <_usart_set_config+0x2cc>)
   294ea:	4798      	blx	r3
   294ec:	0003      	movs	r3, r0
   294ee:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   294f0:	e033      	b.n	2955a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   294f2:	683b      	ldr	r3, [r7, #0]
   294f4:	2227      	movs	r2, #39	; 0x27
   294f6:	5c9b      	ldrb	r3, [r3, r2]
   294f8:	2b00      	cmp	r3, #0
   294fa:	d014      	beq.n	29526 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   294fc:	683b      	ldr	r3, [r7, #0]
   294fe:	6a18      	ldr	r0, [r3, #32]
   29500:	683b      	ldr	r3, [r7, #0]
   29502:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29504:	231d      	movs	r3, #29
   29506:	18fc      	adds	r4, r7, r3
   29508:	231f      	movs	r3, #31
   2950a:	18fb      	adds	r3, r7, r3
   2950c:	781d      	ldrb	r5, [r3, #0]
   2950e:	230a      	movs	r3, #10
   29510:	18fa      	adds	r2, r7, r3
   29512:	231e      	movs	r3, #30
   29514:	18fb      	adds	r3, r7, r3
   29516:	781b      	ldrb	r3, [r3, #0]
   29518:	9300      	str	r3, [sp, #0]
   2951a:	002b      	movs	r3, r5
   2951c:	4d55      	ldr	r5, [pc, #340]	; (29674 <_usart_set_config+0x2d0>)
   2951e:	47a8      	blx	r5
   29520:	0003      	movs	r3, r0
   29522:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29524:	e01a      	b.n	2955c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   29526:	683b      	ldr	r3, [r7, #0]
   29528:	6a1d      	ldr	r5, [r3, #32]
   2952a:	693b      	ldr	r3, [r7, #16]
   2952c:	b2db      	uxtb	r3, r3
   2952e:	0018      	movs	r0, r3
   29530:	4b4e      	ldr	r3, [pc, #312]	; (2966c <_usart_set_config+0x2c8>)
   29532:	4798      	blx	r3
				status_code =
   29534:	231d      	movs	r3, #29
   29536:	18fc      	adds	r4, r7, r3
   29538:	231f      	movs	r3, #31
   2953a:	18fb      	adds	r3, r7, r3
   2953c:	7819      	ldrb	r1, [r3, #0]
   2953e:	230a      	movs	r3, #10
   29540:	18fa      	adds	r2, r7, r3
   29542:	231e      	movs	r3, #30
   29544:	18fb      	adds	r3, r7, r3
   29546:	781b      	ldrb	r3, [r3, #0]
   29548:	9300      	str	r3, [sp, #0]
   2954a:	000b      	movs	r3, r1
   2954c:	0001      	movs	r1, r0
   2954e:	0028      	movs	r0, r5
   29550:	4d48      	ldr	r5, [pc, #288]	; (29674 <_usart_set_config+0x2d0>)
   29552:	47a8      	blx	r5
   29554:	0003      	movs	r3, r0
   29556:	7023      	strb	r3, [r4, #0]
			break;
   29558:	e000      	b.n	2955c <_usart_set_config+0x1b8>
			break;
   2955a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2955c:	231d      	movs	r3, #29
   2955e:	18fb      	adds	r3, r7, r3
   29560:	781b      	ldrb	r3, [r3, #0]
   29562:	2b00      	cmp	r3, #0
   29564:	d003      	beq.n	2956e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   29566:	231d      	movs	r3, #29
   29568:	18fb      	adds	r3, r7, r3
   2956a:	781b      	ldrb	r3, [r3, #0]
   2956c:	e077      	b.n	2965e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2956e:	683b      	ldr	r3, [r7, #0]
   29570:	7e5b      	ldrb	r3, [r3, #25]
   29572:	2b00      	cmp	r3, #0
   29574:	d003      	beq.n	2957e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   29576:	683b      	ldr	r3, [r7, #0]
   29578:	7e9a      	ldrb	r2, [r3, #26]
   2957a:	69bb      	ldr	r3, [r7, #24]
   2957c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2957e:	687b      	ldr	r3, [r7, #4]
   29580:	0018      	movs	r0, r3
   29582:	4b3d      	ldr	r3, [pc, #244]	; (29678 <_usart_set_config+0x2d4>)
   29584:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   29586:	230a      	movs	r3, #10
   29588:	18fb      	adds	r3, r7, r3
   2958a:	881a      	ldrh	r2, [r3, #0]
   2958c:	69bb      	ldr	r3, [r7, #24]
   2958e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   29590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29592:	68fb      	ldr	r3, [r7, #12]
   29594:	4313      	orrs	r3, r2
   29596:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   29598:	683b      	ldr	r3, [r7, #0]
   2959a:	2227      	movs	r2, #39	; 0x27
   2959c:	5c9b      	ldrb	r3, [r3, r2]
   2959e:	2201      	movs	r2, #1
   295a0:	4053      	eors	r3, r2
   295a2:	b2db      	uxtb	r3, r3
   295a4:	2b00      	cmp	r3, #0
   295a6:	d003      	beq.n	295b0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   295a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295aa:	2204      	movs	r2, #4
   295ac:	4313      	orrs	r3, r2
   295ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   295b0:	683b      	ldr	r3, [r7, #0]
   295b2:	7e5b      	ldrb	r3, [r3, #25]
   295b4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   295b6:	683b      	ldr	r3, [r7, #0]
   295b8:	7f1b      	ldrb	r3, [r3, #28]
   295ba:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   295bc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   295be:	683b      	ldr	r3, [r7, #0]
   295c0:	7f5b      	ldrb	r3, [r3, #29]
   295c2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   295c4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   295c6:	683b      	ldr	r3, [r7, #0]
   295c8:	2124      	movs	r1, #36	; 0x24
   295ca:	5c5b      	ldrb	r3, [r3, r1]
   295cc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   295ce:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   295d0:	683b      	ldr	r3, [r7, #0]
   295d2:	2125      	movs	r1, #37	; 0x25
   295d4:	5c5b      	ldrb	r3, [r3, r1]
   295d6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   295d8:	4313      	orrs	r3, r2
	ctrlb =  
   295da:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   295dc:	683b      	ldr	r3, [r7, #0]
   295de:	7a9b      	ldrb	r3, [r3, #10]
   295e0:	001a      	movs	r2, r3
   295e2:	6a3b      	ldr	r3, [r7, #32]
   295e4:	4313      	orrs	r3, r2
   295e6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   295e8:	683b      	ldr	r3, [r7, #0]
   295ea:	7adb      	ldrb	r3, [r3, #11]
   295ec:	001a      	movs	r2, r3
   295ee:	6a3b      	ldr	r3, [r7, #32]
   295f0:	4313      	orrs	r3, r2
   295f2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   295f4:	683b      	ldr	r3, [r7, #0]
   295f6:	891b      	ldrh	r3, [r3, #8]
   295f8:	2bff      	cmp	r3, #255	; 0xff
   295fa:	d00b      	beq.n	29614 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   295fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   295fe:	2280      	movs	r2, #128	; 0x80
   29600:	0452      	lsls	r2, r2, #17
   29602:	4313      	orrs	r3, r2
   29604:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   29606:	683b      	ldr	r3, [r7, #0]
   29608:	891b      	ldrh	r3, [r3, #8]
   2960a:	001a      	movs	r2, r3
   2960c:	6a3b      	ldr	r3, [r7, #32]
   2960e:	4313      	orrs	r3, r2
   29610:	623b      	str	r3, [r7, #32]
   29612:	e008      	b.n	29626 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29614:	683b      	ldr	r3, [r7, #0]
   29616:	7edb      	ldrb	r3, [r3, #27]
   29618:	2b00      	cmp	r3, #0
   2961a:	d004      	beq.n	29626 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2961e:	2280      	movs	r2, #128	; 0x80
   29620:	04d2      	lsls	r2, r2, #19
   29622:	4313      	orrs	r3, r2
   29624:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29626:	683b      	ldr	r3, [r7, #0]
   29628:	222c      	movs	r2, #44	; 0x2c
   2962a:	5c9b      	ldrb	r3, [r3, r2]
   2962c:	2b00      	cmp	r3, #0
   2962e:	d103      	bne.n	29638 <_usart_set_config+0x294>
   29630:	4b12      	ldr	r3, [pc, #72]	; (2967c <_usart_set_config+0x2d8>)
   29632:	4798      	blx	r3
   29634:	1e03      	subs	r3, r0, #0
   29636:	d003      	beq.n	29640 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   29638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2963a:	2280      	movs	r2, #128	; 0x80
   2963c:	4313      	orrs	r3, r2
   2963e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29640:	687b      	ldr	r3, [r7, #4]
   29642:	0018      	movs	r0, r3
   29644:	4b0c      	ldr	r3, [pc, #48]	; (29678 <_usart_set_config+0x2d4>)
   29646:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   29648:	69bb      	ldr	r3, [r7, #24]
   2964a:	6a3a      	ldr	r2, [r7, #32]
   2964c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2964e:	687b      	ldr	r3, [r7, #4]
   29650:	0018      	movs	r0, r3
   29652:	4b09      	ldr	r3, [pc, #36]	; (29678 <_usart_set_config+0x2d4>)
   29654:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   29656:	69bb      	ldr	r3, [r7, #24]
   29658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2965a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2965c:	2300      	movs	r3, #0
}
   2965e:	0018      	movs	r0, r3
   29660:	46bd      	mov	sp, r7
   29662:	b00a      	add	sp, #40	; 0x28
   29664:	bdb0      	pop	{r4, r5, r7, pc}
   29666:	46c0      	nop			; (mov r8, r8)
   29668:	0002814d 	.word	0x0002814d
   2966c:	0002ab01 	.word	0x0002ab01
   29670:	00027cc7 	.word	0x00027cc7
   29674:	00027d45 	.word	0x00027d45
   29678:	00029381 	.word	0x00029381
   2967c:	00029341 	.word	0x00029341

00029680 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29680:	b590      	push	{r4, r7, lr}
   29682:	b093      	sub	sp, #76	; 0x4c
   29684:	af00      	add	r7, sp, #0
   29686:	60f8      	str	r0, [r7, #12]
   29688:	60b9      	str	r1, [r7, #8]
   2968a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2968c:	233b      	movs	r3, #59	; 0x3b
   2968e:	18fb      	adds	r3, r7, r3
   29690:	2200      	movs	r2, #0
   29692:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29694:	68fb      	ldr	r3, [r7, #12]
   29696:	68ba      	ldr	r2, [r7, #8]
   29698:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2969a:	68fb      	ldr	r3, [r7, #12]
   2969c:	681b      	ldr	r3, [r3, #0]
   2969e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   296a0:	68fb      	ldr	r3, [r7, #12]
   296a2:	681b      	ldr	r3, [r3, #0]
   296a4:	0018      	movs	r0, r3
   296a6:	4b86      	ldr	r3, [pc, #536]	; (298c0 <usart_init+0x240>)
   296a8:	4798      	blx	r3
   296aa:	0003      	movs	r3, r0
   296ac:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   296ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   296b0:	3302      	adds	r3, #2
   296b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   296b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   296b6:	3314      	adds	r3, #20
   296b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   296ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   296bc:	681b      	ldr	r3, [r3, #0]
   296be:	2201      	movs	r2, #1
   296c0:	4013      	ands	r3, r2
   296c2:	d001      	beq.n	296c8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   296c4:	2305      	movs	r3, #5
   296c6:	e0f6      	b.n	298b6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   296c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   296ca:	681b      	ldr	r3, [r3, #0]
   296cc:	2202      	movs	r2, #2
   296ce:	4013      	ands	r3, r2
   296d0:	d001      	beq.n	296d6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   296d2:	231c      	movs	r3, #28
   296d4:	e0ef      	b.n	298b6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   296d6:	2201      	movs	r2, #1
   296d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   296da:	409a      	lsls	r2, r3
   296dc:	0013      	movs	r3, r2
   296de:	0019      	movs	r1, r3
   296e0:	2002      	movs	r0, #2
   296e2:	4b78      	ldr	r3, [pc, #480]	; (298c4 <usart_init+0x244>)
   296e4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   296e6:	2324      	movs	r3, #36	; 0x24
   296e8:	18fb      	adds	r3, r7, r3
   296ea:	0018      	movs	r0, r3
   296ec:	4b76      	ldr	r3, [pc, #472]	; (298c8 <usart_init+0x248>)
   296ee:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   296f0:	687b      	ldr	r3, [r7, #4]
   296f2:	222d      	movs	r2, #45	; 0x2d
   296f4:	5c9a      	ldrb	r2, [r3, r2]
   296f6:	2324      	movs	r3, #36	; 0x24
   296f8:	18fb      	adds	r3, r7, r3
   296fa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   296fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   296fe:	b2db      	uxtb	r3, r3
   29700:	2224      	movs	r2, #36	; 0x24
   29702:	18ba      	adds	r2, r7, r2
   29704:	0011      	movs	r1, r2
   29706:	0018      	movs	r0, r3
   29708:	4b70      	ldr	r3, [pc, #448]	; (298cc <usart_init+0x24c>)
   2970a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2970e:	b2db      	uxtb	r3, r3
   29710:	0018      	movs	r0, r3
   29712:	4b6f      	ldr	r3, [pc, #444]	; (298d0 <usart_init+0x250>)
   29714:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   29716:	687b      	ldr	r3, [r7, #4]
   29718:	222d      	movs	r2, #45	; 0x2d
   2971a:	5c9b      	ldrb	r3, [r3, r2]
   2971c:	2100      	movs	r1, #0
   2971e:	0018      	movs	r0, r3
   29720:	4b6c      	ldr	r3, [pc, #432]	; (298d4 <usart_init+0x254>)
   29722:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29724:	687b      	ldr	r3, [r7, #4]
   29726:	7ada      	ldrb	r2, [r3, #11]
   29728:	68fb      	ldr	r3, [r7, #12]
   2972a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2972c:	687b      	ldr	r3, [r7, #4]
   2972e:	2224      	movs	r2, #36	; 0x24
   29730:	5c9a      	ldrb	r2, [r3, r2]
   29732:	68fb      	ldr	r3, [r7, #12]
   29734:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   29736:	687b      	ldr	r3, [r7, #4]
   29738:	2225      	movs	r2, #37	; 0x25
   2973a:	5c9a      	ldrb	r2, [r3, r2]
   2973c:	68fb      	ldr	r3, [r7, #12]
   2973e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29740:	687b      	ldr	r3, [r7, #4]
   29742:	7eda      	ldrb	r2, [r3, #27]
   29744:	68fb      	ldr	r3, [r7, #12]
   29746:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   29748:	687b      	ldr	r3, [r7, #4]
   2974a:	7f1a      	ldrb	r2, [r3, #28]
   2974c:	68fb      	ldr	r3, [r7, #12]
   2974e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29750:	233b      	movs	r3, #59	; 0x3b
   29752:	18fc      	adds	r4, r7, r3
   29754:	687a      	ldr	r2, [r7, #4]
   29756:	68fb      	ldr	r3, [r7, #12]
   29758:	0011      	movs	r1, r2
   2975a:	0018      	movs	r0, r3
   2975c:	4b5e      	ldr	r3, [pc, #376]	; (298d8 <usart_init+0x258>)
   2975e:	4798      	blx	r3
   29760:	0003      	movs	r3, r0
   29762:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29764:	233b      	movs	r3, #59	; 0x3b
   29766:	18fb      	adds	r3, r7, r3
   29768:	781b      	ldrb	r3, [r3, #0]
   2976a:	2b00      	cmp	r3, #0
   2976c:	d003      	beq.n	29776 <usart_init+0xf6>
		return status_code;
   2976e:	233b      	movs	r3, #59	; 0x3b
   29770:	18fb      	adds	r3, r7, r3
   29772:	781b      	ldrb	r3, [r3, #0]
   29774:	e09f      	b.n	298b6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29776:	2320      	movs	r3, #32
   29778:	18fb      	adds	r3, r7, r3
   2977a:	0018      	movs	r0, r3
   2977c:	4b57      	ldr	r3, [pc, #348]	; (298dc <usart_init+0x25c>)
   2977e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29780:	2320      	movs	r3, #32
   29782:	18fb      	adds	r3, r7, r3
   29784:	2200      	movs	r2, #0
   29786:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29788:	2320      	movs	r3, #32
   2978a:	18fb      	adds	r3, r7, r3
   2978c:	2200      	movs	r2, #0
   2978e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29790:	687b      	ldr	r3, [r7, #4]
   29792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29794:	2310      	movs	r3, #16
   29796:	18fb      	adds	r3, r7, r3
   29798:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2979a:	687b      	ldr	r3, [r7, #4]
   2979c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2979e:	2310      	movs	r3, #16
   297a0:	18fb      	adds	r3, r7, r3
   297a2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   297a4:	687b      	ldr	r3, [r7, #4]
   297a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   297a8:	2310      	movs	r3, #16
   297aa:	18fb      	adds	r3, r7, r3
   297ac:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   297ae:	687b      	ldr	r3, [r7, #4]
   297b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   297b2:	2310      	movs	r3, #16
   297b4:	18fb      	adds	r3, r7, r3
   297b6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   297b8:	2347      	movs	r3, #71	; 0x47
   297ba:	18fb      	adds	r3, r7, r3
   297bc:	2200      	movs	r2, #0
   297be:	701a      	strb	r2, [r3, #0]
   297c0:	e02c      	b.n	2981c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   297c2:	2347      	movs	r3, #71	; 0x47
   297c4:	18fb      	adds	r3, r7, r3
   297c6:	781a      	ldrb	r2, [r3, #0]
   297c8:	2310      	movs	r3, #16
   297ca:	18fb      	adds	r3, r7, r3
   297cc:	0092      	lsls	r2, r2, #2
   297ce:	58d3      	ldr	r3, [r2, r3]
   297d0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   297d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297d4:	2b00      	cmp	r3, #0
   297d6:	d109      	bne.n	297ec <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   297d8:	2347      	movs	r3, #71	; 0x47
   297da:	18fb      	adds	r3, r7, r3
   297dc:	781a      	ldrb	r2, [r3, #0]
   297de:	68bb      	ldr	r3, [r7, #8]
   297e0:	0011      	movs	r1, r2
   297e2:	0018      	movs	r0, r3
   297e4:	4b3e      	ldr	r3, [pc, #248]	; (298e0 <usart_init+0x260>)
   297e6:	4798      	blx	r3
   297e8:	0003      	movs	r3, r0
   297ea:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   297ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297ee:	3301      	adds	r3, #1
   297f0:	d00d      	beq.n	2980e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   297f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297f4:	b2da      	uxtb	r2, r3
   297f6:	2320      	movs	r3, #32
   297f8:	18fb      	adds	r3, r7, r3
   297fa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   297fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   297fe:	0c1b      	lsrs	r3, r3, #16
   29800:	b2db      	uxtb	r3, r3
   29802:	2220      	movs	r2, #32
   29804:	18ba      	adds	r2, r7, r2
   29806:	0011      	movs	r1, r2
   29808:	0018      	movs	r0, r3
   2980a:	4b36      	ldr	r3, [pc, #216]	; (298e4 <usart_init+0x264>)
   2980c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2980e:	2347      	movs	r3, #71	; 0x47
   29810:	18fb      	adds	r3, r7, r3
   29812:	781a      	ldrb	r2, [r3, #0]
   29814:	2347      	movs	r3, #71	; 0x47
   29816:	18fb      	adds	r3, r7, r3
   29818:	3201      	adds	r2, #1
   2981a:	701a      	strb	r2, [r3, #0]
   2981c:	2347      	movs	r3, #71	; 0x47
   2981e:	18fb      	adds	r3, r7, r3
   29820:	781b      	ldrb	r3, [r3, #0]
   29822:	2b03      	cmp	r3, #3
   29824:	d9cd      	bls.n	297c2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29826:	2300      	movs	r3, #0
   29828:	63fb      	str	r3, [r7, #60]	; 0x3c
   2982a:	e00a      	b.n	29842 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2982c:	68fa      	ldr	r2, [r7, #12]
   2982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29830:	3302      	adds	r3, #2
   29832:	009b      	lsls	r3, r3, #2
   29834:	18d3      	adds	r3, r2, r3
   29836:	3304      	adds	r3, #4
   29838:	2200      	movs	r2, #0
   2983a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2983e:	3301      	adds	r3, #1
   29840:	63fb      	str	r3, [r7, #60]	; 0x3c
   29842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29844:	2b05      	cmp	r3, #5
   29846:	d9f1      	bls.n	2982c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29848:	68fb      	ldr	r3, [r7, #12]
   2984a:	2200      	movs	r2, #0
   2984c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2984e:	68fb      	ldr	r3, [r7, #12]
   29850:	2200      	movs	r2, #0
   29852:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29854:	68fb      	ldr	r3, [r7, #12]
   29856:	2200      	movs	r2, #0
   29858:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2985a:	68fb      	ldr	r3, [r7, #12]
   2985c:	2200      	movs	r2, #0
   2985e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29860:	68fb      	ldr	r3, [r7, #12]
   29862:	2230      	movs	r2, #48	; 0x30
   29864:	2100      	movs	r1, #0
   29866:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29868:	68fb      	ldr	r3, [r7, #12]
   2986a:	2231      	movs	r2, #49	; 0x31
   2986c:	2100      	movs	r1, #0
   2986e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29870:	68fb      	ldr	r3, [r7, #12]
   29872:	2232      	movs	r2, #50	; 0x32
   29874:	2100      	movs	r1, #0
   29876:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29878:	68fb      	ldr	r3, [r7, #12]
   2987a:	2233      	movs	r2, #51	; 0x33
   2987c:	2100      	movs	r1, #0
   2987e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29880:	68fb      	ldr	r3, [r7, #12]
   29882:	681b      	ldr	r3, [r3, #0]
   29884:	2227      	movs	r2, #39	; 0x27
   29886:	18bc      	adds	r4, r7, r2
   29888:	0018      	movs	r0, r3
   2988a:	4b0d      	ldr	r3, [pc, #52]	; (298c0 <usart_init+0x240>)
   2988c:	4798      	blx	r3
   2988e:	0003      	movs	r3, r0
   29890:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29892:	4a15      	ldr	r2, [pc, #84]	; (298e8 <usart_init+0x268>)
   29894:	2327      	movs	r3, #39	; 0x27
   29896:	18fb      	adds	r3, r7, r3
   29898:	781b      	ldrb	r3, [r3, #0]
   2989a:	0011      	movs	r1, r2
   2989c:	0018      	movs	r0, r3
   2989e:	4b13      	ldr	r3, [pc, #76]	; (298ec <usart_init+0x26c>)
   298a0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   298a2:	2327      	movs	r3, #39	; 0x27
   298a4:	18fb      	adds	r3, r7, r3
   298a6:	781a      	ldrb	r2, [r3, #0]
   298a8:	4b11      	ldr	r3, [pc, #68]	; (298f0 <usart_init+0x270>)
   298aa:	0092      	lsls	r2, r2, #2
   298ac:	68f9      	ldr	r1, [r7, #12]
   298ae:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   298b0:	233b      	movs	r3, #59	; 0x3b
   298b2:	18fb      	adds	r3, r7, r3
   298b4:	781b      	ldrb	r3, [r3, #0]
}
   298b6:	0018      	movs	r0, r3
   298b8:	46bd      	mov	sp, r7
   298ba:	b013      	add	sp, #76	; 0x4c
   298bc:	bd90      	pop	{r4, r7, pc}
   298be:	46c0      	nop			; (mov r8, r8)
   298c0:	0002814d 	.word	0x0002814d
   298c4:	000292bd 	.word	0x000292bd
   298c8:	000292a5 	.word	0x000292a5
   298cc:	0002a9dd 	.word	0x0002a9dd
   298d0:	0002aa21 	.word	0x0002aa21
   298d4:	00027f05 	.word	0x00027f05
   298d8:	000293a5 	.word	0x000293a5
   298dc:	00029319 	.word	0x00029319
   298e0:	00027f91 	.word	0x00027f91
   298e4:	0002ad3d 	.word	0x0002ad3d
   298e8:	00029b5d 	.word	0x00029b5d
   298ec:	000281b1 	.word	0x000281b1
   298f0:	20005c60 	.word	0x20005c60

000298f4 <system_interrupt_enter_critical_section>:
{
   298f4:	b580      	push	{r7, lr}
   298f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   298f8:	4b02      	ldr	r3, [pc, #8]	; (29904 <system_interrupt_enter_critical_section+0x10>)
   298fa:	4798      	blx	r3
}
   298fc:	46c0      	nop			; (mov r8, r8)
   298fe:	46bd      	mov	sp, r7
   29900:	bd80      	pop	{r7, pc}
   29902:	46c0      	nop			; (mov r8, r8)
   29904:	00026d49 	.word	0x00026d49

00029908 <system_interrupt_leave_critical_section>:
{
   29908:	b580      	push	{r7, lr}
   2990a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2990c:	4b02      	ldr	r3, [pc, #8]	; (29918 <system_interrupt_leave_critical_section+0x10>)
   2990e:	4798      	blx	r3
}
   29910:	46c0      	nop			; (mov r8, r8)
   29912:	46bd      	mov	sp, r7
   29914:	bd80      	pop	{r7, pc}
   29916:	46c0      	nop			; (mov r8, r8)
   29918:	00026d9d 	.word	0x00026d9d

0002991c <usart_is_syncing>:
{
   2991c:	b580      	push	{r7, lr}
   2991e:	b084      	sub	sp, #16
   29920:	af00      	add	r7, sp, #0
   29922:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29924:	687b      	ldr	r3, [r7, #4]
   29926:	681b      	ldr	r3, [r3, #0]
   29928:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2992a:	68fb      	ldr	r3, [r7, #12]
   2992c:	69db      	ldr	r3, [r3, #28]
   2992e:	1e5a      	subs	r2, r3, #1
   29930:	4193      	sbcs	r3, r2
   29932:	b2db      	uxtb	r3, r3
}
   29934:	0018      	movs	r0, r3
   29936:	46bd      	mov	sp, r7
   29938:	b004      	add	sp, #16
   2993a:	bd80      	pop	{r7, pc}

0002993c <_usart_wait_for_sync>:
{
   2993c:	b580      	push	{r7, lr}
   2993e:	b082      	sub	sp, #8
   29940:	af00      	add	r7, sp, #0
   29942:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29944:	46c0      	nop			; (mov r8, r8)
   29946:	687b      	ldr	r3, [r7, #4]
   29948:	0018      	movs	r0, r3
   2994a:	4b04      	ldr	r3, [pc, #16]	; (2995c <_usart_wait_for_sync+0x20>)
   2994c:	4798      	blx	r3
   2994e:	1e03      	subs	r3, r0, #0
   29950:	d1f9      	bne.n	29946 <_usart_wait_for_sync+0xa>
}
   29952:	46c0      	nop			; (mov r8, r8)
   29954:	46bd      	mov	sp, r7
   29956:	b002      	add	sp, #8
   29958:	bd80      	pop	{r7, pc}
   2995a:	46c0      	nop			; (mov r8, r8)
   2995c:	0002991d 	.word	0x0002991d

00029960 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29960:	b580      	push	{r7, lr}
   29962:	b086      	sub	sp, #24
   29964:	af00      	add	r7, sp, #0
   29966:	60f8      	str	r0, [r7, #12]
   29968:	60b9      	str	r1, [r7, #8]
   2996a:	1dbb      	adds	r3, r7, #6
   2996c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2996e:	68fb      	ldr	r3, [r7, #12]
   29970:	681b      	ldr	r3, [r3, #0]
   29972:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29974:	4b0f      	ldr	r3, [pc, #60]	; (299b4 <_usart_write_buffer+0x54>)
   29976:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29978:	68fb      	ldr	r3, [r7, #12]
   2997a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2997c:	b29b      	uxth	r3, r3
   2997e:	2b00      	cmp	r3, #0
   29980:	d003      	beq.n	2998a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29982:	4b0d      	ldr	r3, [pc, #52]	; (299b8 <_usart_write_buffer+0x58>)
   29984:	4798      	blx	r3
		return STATUS_BUSY;
   29986:	2305      	movs	r3, #5
   29988:	e010      	b.n	299ac <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2998a:	68fb      	ldr	r3, [r7, #12]
   2998c:	1dba      	adds	r2, r7, #6
   2998e:	8812      	ldrh	r2, [r2, #0]
   29990:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29992:	4b09      	ldr	r3, [pc, #36]	; (299b8 <_usart_write_buffer+0x58>)
   29994:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29996:	68fb      	ldr	r3, [r7, #12]
   29998:	68ba      	ldr	r2, [r7, #8]
   2999a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2999c:	68fb      	ldr	r3, [r7, #12]
   2999e:	2233      	movs	r2, #51	; 0x33
   299a0:	2105      	movs	r1, #5
   299a2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   299a4:	697b      	ldr	r3, [r7, #20]
   299a6:	2201      	movs	r2, #1
   299a8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   299aa:	2300      	movs	r3, #0
}
   299ac:	0018      	movs	r0, r3
   299ae:	46bd      	mov	sp, r7
   299b0:	b006      	add	sp, #24
   299b2:	bd80      	pop	{r7, pc}
   299b4:	000298f5 	.word	0x000298f5
   299b8:	00029909 	.word	0x00029909

000299bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   299bc:	b580      	push	{r7, lr}
   299be:	b086      	sub	sp, #24
   299c0:	af00      	add	r7, sp, #0
   299c2:	60f8      	str	r0, [r7, #12]
   299c4:	60b9      	str	r1, [r7, #8]
   299c6:	1dbb      	adds	r3, r7, #6
   299c8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   299ca:	68fb      	ldr	r3, [r7, #12]
   299cc:	681b      	ldr	r3, [r3, #0]
   299ce:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   299d0:	4b16      	ldr	r3, [pc, #88]	; (29a2c <_usart_read_buffer+0x70>)
   299d2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   299d4:	68fb      	ldr	r3, [r7, #12]
   299d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   299d8:	b29b      	uxth	r3, r3
   299da:	2b00      	cmp	r3, #0
   299dc:	d003      	beq.n	299e6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   299de:	4b14      	ldr	r3, [pc, #80]	; (29a30 <_usart_read_buffer+0x74>)
   299e0:	4798      	blx	r3
		return STATUS_BUSY;
   299e2:	2305      	movs	r3, #5
   299e4:	e01e      	b.n	29a24 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   299e6:	68fb      	ldr	r3, [r7, #12]
   299e8:	1dba      	adds	r2, r7, #6
   299ea:	8812      	ldrh	r2, [r2, #0]
   299ec:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   299ee:	4b10      	ldr	r3, [pc, #64]	; (29a30 <_usart_read_buffer+0x74>)
   299f0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   299f2:	68fb      	ldr	r3, [r7, #12]
   299f4:	68ba      	ldr	r2, [r7, #8]
   299f6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   299f8:	68fb      	ldr	r3, [r7, #12]
   299fa:	2232      	movs	r2, #50	; 0x32
   299fc:	2105      	movs	r1, #5
   299fe:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29a00:	697b      	ldr	r3, [r7, #20]
   29a02:	2204      	movs	r2, #4
   29a04:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29a06:	68fb      	ldr	r3, [r7, #12]
   29a08:	7a1b      	ldrb	r3, [r3, #8]
   29a0a:	2b00      	cmp	r3, #0
   29a0c:	d002      	beq.n	29a14 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29a0e:	697b      	ldr	r3, [r7, #20]
   29a10:	2220      	movs	r2, #32
   29a12:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29a14:	68fb      	ldr	r3, [r7, #12]
   29a16:	7a5b      	ldrb	r3, [r3, #9]
   29a18:	2b00      	cmp	r3, #0
   29a1a:	d002      	beq.n	29a22 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29a1c:	697b      	ldr	r3, [r7, #20]
   29a1e:	2208      	movs	r2, #8
   29a20:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29a22:	2300      	movs	r3, #0
}
   29a24:	0018      	movs	r0, r3
   29a26:	46bd      	mov	sp, r7
   29a28:	b006      	add	sp, #24
   29a2a:	bd80      	pop	{r7, pc}
   29a2c:	000298f5 	.word	0x000298f5
   29a30:	00029909 	.word	0x00029909

00029a34 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29a34:	b580      	push	{r7, lr}
   29a36:	b084      	sub	sp, #16
   29a38:	af00      	add	r7, sp, #0
   29a3a:	60f8      	str	r0, [r7, #12]
   29a3c:	60b9      	str	r1, [r7, #8]
   29a3e:	1dfb      	adds	r3, r7, #7
   29a40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29a42:	1dfb      	adds	r3, r7, #7
   29a44:	781b      	ldrb	r3, [r3, #0]
   29a46:	68fa      	ldr	r2, [r7, #12]
   29a48:	3302      	adds	r3, #2
   29a4a:	009b      	lsls	r3, r3, #2
   29a4c:	18d3      	adds	r3, r2, r3
   29a4e:	3304      	adds	r3, #4
   29a50:	68ba      	ldr	r2, [r7, #8]
   29a52:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29a54:	68fb      	ldr	r3, [r7, #12]
   29a56:	2230      	movs	r2, #48	; 0x30
   29a58:	5c9b      	ldrb	r3, [r3, r2]
   29a5a:	b25a      	sxtb	r2, r3
   29a5c:	1dfb      	adds	r3, r7, #7
   29a5e:	781b      	ldrb	r3, [r3, #0]
   29a60:	2101      	movs	r1, #1
   29a62:	4099      	lsls	r1, r3
   29a64:	000b      	movs	r3, r1
   29a66:	b25b      	sxtb	r3, r3
   29a68:	4313      	orrs	r3, r2
   29a6a:	b25b      	sxtb	r3, r3
   29a6c:	b2d9      	uxtb	r1, r3
   29a6e:	68fb      	ldr	r3, [r7, #12]
   29a70:	2230      	movs	r2, #48	; 0x30
   29a72:	5499      	strb	r1, [r3, r2]
}
   29a74:	46c0      	nop			; (mov r8, r8)
   29a76:	46bd      	mov	sp, r7
   29a78:	b004      	add	sp, #16
   29a7a:	bd80      	pop	{r7, pc}

00029a7c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29a7c:	b580      	push	{r7, lr}
   29a7e:	b084      	sub	sp, #16
   29a80:	af00      	add	r7, sp, #0
   29a82:	60f8      	str	r0, [r7, #12]
   29a84:	60b9      	str	r1, [r7, #8]
   29a86:	1dbb      	adds	r3, r7, #6
   29a88:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29a8a:	1dbb      	adds	r3, r7, #6
   29a8c:	881b      	ldrh	r3, [r3, #0]
   29a8e:	2b00      	cmp	r3, #0
   29a90:	d101      	bne.n	29a96 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29a92:	2317      	movs	r3, #23
   29a94:	e010      	b.n	29ab8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29a96:	68fb      	ldr	r3, [r7, #12]
   29a98:	79db      	ldrb	r3, [r3, #7]
   29a9a:	2201      	movs	r2, #1
   29a9c:	4053      	eors	r3, r2
   29a9e:	b2db      	uxtb	r3, r3
   29aa0:	2b00      	cmp	r3, #0
   29aa2:	d001      	beq.n	29aa8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29aa4:	231c      	movs	r3, #28
   29aa6:	e007      	b.n	29ab8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29aa8:	1dbb      	adds	r3, r7, #6
   29aaa:	881a      	ldrh	r2, [r3, #0]
   29aac:	68b9      	ldr	r1, [r7, #8]
   29aae:	68fb      	ldr	r3, [r7, #12]
   29ab0:	0018      	movs	r0, r3
   29ab2:	4b03      	ldr	r3, [pc, #12]	; (29ac0 <usart_write_buffer_job+0x44>)
   29ab4:	4798      	blx	r3
   29ab6:	0003      	movs	r3, r0
}
   29ab8:	0018      	movs	r0, r3
   29aba:	46bd      	mov	sp, r7
   29abc:	b004      	add	sp, #16
   29abe:	bd80      	pop	{r7, pc}
   29ac0:	00029961 	.word	0x00029961

00029ac4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29ac4:	b580      	push	{r7, lr}
   29ac6:	b084      	sub	sp, #16
   29ac8:	af00      	add	r7, sp, #0
   29aca:	60f8      	str	r0, [r7, #12]
   29acc:	60b9      	str	r1, [r7, #8]
   29ace:	1dbb      	adds	r3, r7, #6
   29ad0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29ad2:	1dbb      	adds	r3, r7, #6
   29ad4:	881b      	ldrh	r3, [r3, #0]
   29ad6:	2b00      	cmp	r3, #0
   29ad8:	d101      	bne.n	29ade <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29ada:	2317      	movs	r3, #23
   29adc:	e010      	b.n	29b00 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29ade:	68fb      	ldr	r3, [r7, #12]
   29ae0:	799b      	ldrb	r3, [r3, #6]
   29ae2:	2201      	movs	r2, #1
   29ae4:	4053      	eors	r3, r2
   29ae6:	b2db      	uxtb	r3, r3
   29ae8:	2b00      	cmp	r3, #0
   29aea:	d001      	beq.n	29af0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29aec:	231c      	movs	r3, #28
   29aee:	e007      	b.n	29b00 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29af0:	1dbb      	adds	r3, r7, #6
   29af2:	881a      	ldrh	r2, [r3, #0]
   29af4:	68b9      	ldr	r1, [r7, #8]
   29af6:	68fb      	ldr	r3, [r7, #12]
   29af8:	0018      	movs	r0, r3
   29afa:	4b03      	ldr	r3, [pc, #12]	; (29b08 <usart_read_buffer_job+0x44>)
   29afc:	4798      	blx	r3
   29afe:	0003      	movs	r3, r0
}
   29b00:	0018      	movs	r0, r3
   29b02:	46bd      	mov	sp, r7
   29b04:	b004      	add	sp, #16
   29b06:	bd80      	pop	{r7, pc}
   29b08:	000299bd 	.word	0x000299bd

00029b0c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29b0c:	b580      	push	{r7, lr}
   29b0e:	b084      	sub	sp, #16
   29b10:	af00      	add	r7, sp, #0
   29b12:	6078      	str	r0, [r7, #4]
   29b14:	000a      	movs	r2, r1
   29b16:	1cfb      	adds	r3, r7, #3
   29b18:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29b1a:	1cfb      	adds	r3, r7, #3
   29b1c:	781b      	ldrb	r3, [r3, #0]
   29b1e:	2b00      	cmp	r3, #0
   29b20:	d002      	beq.n	29b28 <usart_get_job_status+0x1c>
   29b22:	2b01      	cmp	r3, #1
   29b24:	d007      	beq.n	29b36 <usart_get_job_status+0x2a>
   29b26:	e00d      	b.n	29b44 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29b28:	230f      	movs	r3, #15
   29b2a:	18fb      	adds	r3, r7, r3
   29b2c:	687a      	ldr	r2, [r7, #4]
   29b2e:	2132      	movs	r1, #50	; 0x32
   29b30:	5c52      	ldrb	r2, [r2, r1]
   29b32:	701a      	strb	r2, [r3, #0]
			break;
   29b34:	e00b      	b.n	29b4e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29b36:	230f      	movs	r3, #15
   29b38:	18fb      	adds	r3, r7, r3
   29b3a:	687a      	ldr	r2, [r7, #4]
   29b3c:	2133      	movs	r1, #51	; 0x33
   29b3e:	5c52      	ldrb	r2, [r2, r1]
   29b40:	701a      	strb	r2, [r3, #0]
			break;
   29b42:	e004      	b.n	29b4e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29b44:	230f      	movs	r3, #15
   29b46:	18fb      	adds	r3, r7, r3
   29b48:	2217      	movs	r2, #23
   29b4a:	701a      	strb	r2, [r3, #0]
			break;
   29b4c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29b4e:	230f      	movs	r3, #15
   29b50:	18fb      	adds	r3, r7, r3
   29b52:	781b      	ldrb	r3, [r3, #0]
}
   29b54:	0018      	movs	r0, r3
   29b56:	46bd      	mov	sp, r7
   29b58:	b004      	add	sp, #16
   29b5a:	bd80      	pop	{r7, pc}

00029b5c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29b5c:	b580      	push	{r7, lr}
   29b5e:	b088      	sub	sp, #32
   29b60:	af00      	add	r7, sp, #0
   29b62:	0002      	movs	r2, r0
   29b64:	1dfb      	adds	r3, r7, #7
   29b66:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29b68:	1dfb      	adds	r3, r7, #7
   29b6a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29b6c:	4ba3      	ldr	r3, [pc, #652]	; (29dfc <_usart_interrupt_handler+0x2a0>)
   29b6e:	0092      	lsls	r2, r2, #2
   29b70:	58d3      	ldr	r3, [r2, r3]
   29b72:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29b74:	69bb      	ldr	r3, [r7, #24]
   29b76:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29b78:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29b7a:	69bb      	ldr	r3, [r7, #24]
   29b7c:	0018      	movs	r0, r3
   29b7e:	4ba0      	ldr	r3, [pc, #640]	; (29e00 <_usart_interrupt_handler+0x2a4>)
   29b80:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29b82:	697b      	ldr	r3, [r7, #20]
   29b84:	7e1b      	ldrb	r3, [r3, #24]
   29b86:	b2da      	uxtb	r2, r3
   29b88:	2312      	movs	r3, #18
   29b8a:	18fb      	adds	r3, r7, r3
   29b8c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29b8e:	697b      	ldr	r3, [r7, #20]
   29b90:	7d9b      	ldrb	r3, [r3, #22]
   29b92:	b2db      	uxtb	r3, r3
   29b94:	b29a      	uxth	r2, r3
   29b96:	2312      	movs	r3, #18
   29b98:	18fb      	adds	r3, r7, r3
   29b9a:	2112      	movs	r1, #18
   29b9c:	1879      	adds	r1, r7, r1
   29b9e:	8809      	ldrh	r1, [r1, #0]
   29ba0:	400a      	ands	r2, r1
   29ba2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29ba4:	69bb      	ldr	r3, [r7, #24]
   29ba6:	2230      	movs	r2, #48	; 0x30
   29ba8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29baa:	69ba      	ldr	r2, [r7, #24]
   29bac:	2131      	movs	r1, #49	; 0x31
   29bae:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29bb0:	4013      	ands	r3, r2
   29bb2:	b2da      	uxtb	r2, r3
   29bb4:	2310      	movs	r3, #16
   29bb6:	18fb      	adds	r3, r7, r3
   29bb8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29bba:	2312      	movs	r3, #18
   29bbc:	18fb      	adds	r3, r7, r3
   29bbe:	881b      	ldrh	r3, [r3, #0]
   29bc0:	2201      	movs	r2, #1
   29bc2:	4013      	ands	r3, r2
   29bc4:	d044      	beq.n	29c50 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29bc6:	69bb      	ldr	r3, [r7, #24]
   29bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29bca:	b29b      	uxth	r3, r3
   29bcc:	2b00      	cmp	r3, #0
   29bce:	d03c      	beq.n	29c4a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29bd0:	69bb      	ldr	r3, [r7, #24]
   29bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29bd4:	781b      	ldrb	r3, [r3, #0]
   29bd6:	b2da      	uxtb	r2, r3
   29bd8:	231c      	movs	r3, #28
   29bda:	18fb      	adds	r3, r7, r3
   29bdc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29bde:	69bb      	ldr	r3, [r7, #24]
   29be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29be2:	1c5a      	adds	r2, r3, #1
   29be4:	69bb      	ldr	r3, [r7, #24]
   29be6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29be8:	69bb      	ldr	r3, [r7, #24]
   29bea:	795b      	ldrb	r3, [r3, #5]
   29bec:	2b01      	cmp	r3, #1
   29bee:	d113      	bne.n	29c18 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29bf0:	69bb      	ldr	r3, [r7, #24]
   29bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29bf4:	781b      	ldrb	r3, [r3, #0]
   29bf6:	b2db      	uxtb	r3, r3
   29bf8:	021b      	lsls	r3, r3, #8
   29bfa:	b21a      	sxth	r2, r3
   29bfc:	231c      	movs	r3, #28
   29bfe:	18fb      	adds	r3, r7, r3
   29c00:	2100      	movs	r1, #0
   29c02:	5e5b      	ldrsh	r3, [r3, r1]
   29c04:	4313      	orrs	r3, r2
   29c06:	b21a      	sxth	r2, r3
   29c08:	231c      	movs	r3, #28
   29c0a:	18fb      	adds	r3, r7, r3
   29c0c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29c0e:	69bb      	ldr	r3, [r7, #24]
   29c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c12:	1c5a      	adds	r2, r3, #1
   29c14:	69bb      	ldr	r3, [r7, #24]
   29c16:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29c18:	231c      	movs	r3, #28
   29c1a:	18fb      	adds	r3, r7, r3
   29c1c:	881b      	ldrh	r3, [r3, #0]
   29c1e:	05db      	lsls	r3, r3, #23
   29c20:	0ddb      	lsrs	r3, r3, #23
   29c22:	b29a      	uxth	r2, r3
   29c24:	697b      	ldr	r3, [r7, #20]
   29c26:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29c28:	69bb      	ldr	r3, [r7, #24]
   29c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29c2c:	b29b      	uxth	r3, r3
   29c2e:	3b01      	subs	r3, #1
   29c30:	b29b      	uxth	r3, r3
   29c32:	69ba      	ldr	r2, [r7, #24]
   29c34:	1c19      	adds	r1, r3, #0
   29c36:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29c38:	2b00      	cmp	r3, #0
   29c3a:	d109      	bne.n	29c50 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29c3c:	697b      	ldr	r3, [r7, #20]
   29c3e:	2201      	movs	r2, #1
   29c40:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29c42:	697b      	ldr	r3, [r7, #20]
   29c44:	2202      	movs	r2, #2
   29c46:	759a      	strb	r2, [r3, #22]
   29c48:	e002      	b.n	29c50 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29c4a:	697b      	ldr	r3, [r7, #20]
   29c4c:	2201      	movs	r2, #1
   29c4e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29c50:	2312      	movs	r3, #18
   29c52:	18fb      	adds	r3, r7, r3
   29c54:	881b      	ldrh	r3, [r3, #0]
   29c56:	2202      	movs	r2, #2
   29c58:	4013      	ands	r3, r2
   29c5a:	d011      	beq.n	29c80 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29c5c:	697b      	ldr	r3, [r7, #20]
   29c5e:	2202      	movs	r2, #2
   29c60:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29c62:	69bb      	ldr	r3, [r7, #24]
   29c64:	2233      	movs	r2, #51	; 0x33
   29c66:	2100      	movs	r1, #0
   29c68:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29c6a:	2310      	movs	r3, #16
   29c6c:	18fb      	adds	r3, r7, r3
   29c6e:	881b      	ldrh	r3, [r3, #0]
   29c70:	2201      	movs	r2, #1
   29c72:	4013      	ands	r3, r2
   29c74:	d004      	beq.n	29c80 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29c76:	69bb      	ldr	r3, [r7, #24]
   29c78:	68db      	ldr	r3, [r3, #12]
   29c7a:	69ba      	ldr	r2, [r7, #24]
   29c7c:	0010      	movs	r0, r2
   29c7e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29c80:	2312      	movs	r3, #18
   29c82:	18fb      	adds	r3, r7, r3
   29c84:	881b      	ldrh	r3, [r3, #0]
   29c86:	2204      	movs	r2, #4
   29c88:	4013      	ands	r3, r2
   29c8a:	d100      	bne.n	29c8e <_usart_interrupt_handler+0x132>
   29c8c:	e0bd      	b.n	29e0a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29c8e:	69bb      	ldr	r3, [r7, #24]
   29c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29c92:	b29b      	uxth	r3, r3
   29c94:	2b00      	cmp	r3, #0
   29c96:	d100      	bne.n	29c9a <_usart_interrupt_handler+0x13e>
   29c98:	e0b4      	b.n	29e04 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29c9a:	697b      	ldr	r3, [r7, #20]
   29c9c:	8b5b      	ldrh	r3, [r3, #26]
   29c9e:	b29b      	uxth	r3, r3
   29ca0:	b2da      	uxtb	r2, r3
   29ca2:	231f      	movs	r3, #31
   29ca4:	18fb      	adds	r3, r7, r3
   29ca6:	213f      	movs	r1, #63	; 0x3f
   29ca8:	400a      	ands	r2, r1
   29caa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29cac:	231f      	movs	r3, #31
   29cae:	18fb      	adds	r3, r7, r3
   29cb0:	781b      	ldrb	r3, [r3, #0]
   29cb2:	2208      	movs	r2, #8
   29cb4:	4013      	ands	r3, r2
   29cb6:	d007      	beq.n	29cc8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29cb8:	231f      	movs	r3, #31
   29cba:	18fb      	adds	r3, r7, r3
   29cbc:	221f      	movs	r2, #31
   29cbe:	18ba      	adds	r2, r7, r2
   29cc0:	7812      	ldrb	r2, [r2, #0]
   29cc2:	2108      	movs	r1, #8
   29cc4:	438a      	bics	r2, r1
   29cc6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29cc8:	231f      	movs	r3, #31
   29cca:	18fb      	adds	r3, r7, r3
   29ccc:	781b      	ldrb	r3, [r3, #0]
   29cce:	2b00      	cmp	r3, #0
   29cd0:	d050      	beq.n	29d74 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29cd2:	231f      	movs	r3, #31
   29cd4:	18fb      	adds	r3, r7, r3
   29cd6:	781b      	ldrb	r3, [r3, #0]
   29cd8:	2202      	movs	r2, #2
   29cda:	4013      	ands	r3, r2
   29cdc:	d007      	beq.n	29cee <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29cde:	69bb      	ldr	r3, [r7, #24]
   29ce0:	2232      	movs	r2, #50	; 0x32
   29ce2:	211a      	movs	r1, #26
   29ce4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29ce6:	697b      	ldr	r3, [r7, #20]
   29ce8:	2202      	movs	r2, #2
   29cea:	835a      	strh	r2, [r3, #26]
   29cec:	e036      	b.n	29d5c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29cee:	231f      	movs	r3, #31
   29cf0:	18fb      	adds	r3, r7, r3
   29cf2:	781b      	ldrb	r3, [r3, #0]
   29cf4:	2204      	movs	r2, #4
   29cf6:	4013      	ands	r3, r2
   29cf8:	d007      	beq.n	29d0a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29cfa:	69bb      	ldr	r3, [r7, #24]
   29cfc:	2232      	movs	r2, #50	; 0x32
   29cfe:	211e      	movs	r1, #30
   29d00:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29d02:	697b      	ldr	r3, [r7, #20]
   29d04:	2204      	movs	r2, #4
   29d06:	835a      	strh	r2, [r3, #26]
   29d08:	e028      	b.n	29d5c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29d0a:	231f      	movs	r3, #31
   29d0c:	18fb      	adds	r3, r7, r3
   29d0e:	781b      	ldrb	r3, [r3, #0]
   29d10:	2201      	movs	r2, #1
   29d12:	4013      	ands	r3, r2
   29d14:	d007      	beq.n	29d26 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29d16:	69bb      	ldr	r3, [r7, #24]
   29d18:	2232      	movs	r2, #50	; 0x32
   29d1a:	2113      	movs	r1, #19
   29d1c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29d1e:	697b      	ldr	r3, [r7, #20]
   29d20:	2201      	movs	r2, #1
   29d22:	835a      	strh	r2, [r3, #26]
   29d24:	e01a      	b.n	29d5c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29d26:	231f      	movs	r3, #31
   29d28:	18fb      	adds	r3, r7, r3
   29d2a:	781b      	ldrb	r3, [r3, #0]
   29d2c:	2210      	movs	r2, #16
   29d2e:	4013      	ands	r3, r2
   29d30:	d007      	beq.n	29d42 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29d32:	69bb      	ldr	r3, [r7, #24]
   29d34:	2232      	movs	r2, #50	; 0x32
   29d36:	2142      	movs	r1, #66	; 0x42
   29d38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29d3a:	697b      	ldr	r3, [r7, #20]
   29d3c:	2210      	movs	r2, #16
   29d3e:	835a      	strh	r2, [r3, #26]
   29d40:	e00c      	b.n	29d5c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29d42:	231f      	movs	r3, #31
   29d44:	18fb      	adds	r3, r7, r3
   29d46:	781b      	ldrb	r3, [r3, #0]
   29d48:	2220      	movs	r2, #32
   29d4a:	4013      	ands	r3, r2
   29d4c:	d006      	beq.n	29d5c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29d4e:	69bb      	ldr	r3, [r7, #24]
   29d50:	2232      	movs	r2, #50	; 0x32
   29d52:	2141      	movs	r1, #65	; 0x41
   29d54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29d56:	697b      	ldr	r3, [r7, #20]
   29d58:	2220      	movs	r2, #32
   29d5a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29d5c:	2310      	movs	r3, #16
   29d5e:	18fb      	adds	r3, r7, r3
   29d60:	881b      	ldrh	r3, [r3, #0]
   29d62:	2204      	movs	r2, #4
   29d64:	4013      	ands	r3, r2
				if (callback_status
   29d66:	d050      	beq.n	29e0a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29d68:	69bb      	ldr	r3, [r7, #24]
   29d6a:	695b      	ldr	r3, [r3, #20]
   29d6c:	69ba      	ldr	r2, [r7, #24]
   29d6e:	0010      	movs	r0, r2
   29d70:	4798      	blx	r3
   29d72:	e04a      	b.n	29e0a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29d74:	697b      	ldr	r3, [r7, #20]
   29d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29d78:	b29a      	uxth	r2, r3
   29d7a:	230e      	movs	r3, #14
   29d7c:	18fb      	adds	r3, r7, r3
   29d7e:	05d2      	lsls	r2, r2, #23
   29d80:	0dd2      	lsrs	r2, r2, #23
   29d82:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29d84:	69bb      	ldr	r3, [r7, #24]
   29d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d88:	220e      	movs	r2, #14
   29d8a:	18ba      	adds	r2, r7, r2
   29d8c:	8812      	ldrh	r2, [r2, #0]
   29d8e:	b2d2      	uxtb	r2, r2
   29d90:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29d92:	69bb      	ldr	r3, [r7, #24]
   29d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29d96:	1c5a      	adds	r2, r3, #1
   29d98:	69bb      	ldr	r3, [r7, #24]
   29d9a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29d9c:	69bb      	ldr	r3, [r7, #24]
   29d9e:	795b      	ldrb	r3, [r3, #5]
   29da0:	2b01      	cmp	r3, #1
   29da2:	d10d      	bne.n	29dc0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29da4:	69bb      	ldr	r3, [r7, #24]
   29da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29da8:	220e      	movs	r2, #14
   29daa:	18ba      	adds	r2, r7, r2
   29dac:	8812      	ldrh	r2, [r2, #0]
   29dae:	0a12      	lsrs	r2, r2, #8
   29db0:	b292      	uxth	r2, r2
   29db2:	b2d2      	uxtb	r2, r2
   29db4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29db6:	69bb      	ldr	r3, [r7, #24]
   29db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29dba:	1c5a      	adds	r2, r3, #1
   29dbc:	69bb      	ldr	r3, [r7, #24]
   29dbe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29dc0:	69bb      	ldr	r3, [r7, #24]
   29dc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29dc4:	b29b      	uxth	r3, r3
   29dc6:	3b01      	subs	r3, #1
   29dc8:	b29b      	uxth	r3, r3
   29dca:	69ba      	ldr	r2, [r7, #24]
   29dcc:	1c19      	adds	r1, r3, #0
   29dce:	8591      	strh	r1, [r2, #44]	; 0x2c
   29dd0:	2b00      	cmp	r3, #0
   29dd2:	d11a      	bne.n	29e0a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29dd4:	697b      	ldr	r3, [r7, #20]
   29dd6:	2204      	movs	r2, #4
   29dd8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   29dda:	69bb      	ldr	r3, [r7, #24]
   29ddc:	2232      	movs	r2, #50	; 0x32
   29dde:	2100      	movs	r1, #0
   29de0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29de2:	2310      	movs	r3, #16
   29de4:	18fb      	adds	r3, r7, r3
   29de6:	881b      	ldrh	r3, [r3, #0]
   29de8:	2202      	movs	r2, #2
   29dea:	4013      	ands	r3, r2
					if (callback_status
   29dec:	d00d      	beq.n	29e0a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29dee:	69bb      	ldr	r3, [r7, #24]
   29df0:	691b      	ldr	r3, [r3, #16]
   29df2:	69ba      	ldr	r2, [r7, #24]
   29df4:	0010      	movs	r0, r2
   29df6:	4798      	blx	r3
   29df8:	e007      	b.n	29e0a <_usart_interrupt_handler+0x2ae>
   29dfa:	46c0      	nop			; (mov r8, r8)
   29dfc:	20005c60 	.word	0x20005c60
   29e00:	0002993d 	.word	0x0002993d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29e04:	697b      	ldr	r3, [r7, #20]
   29e06:	2204      	movs	r2, #4
   29e08:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29e0a:	2312      	movs	r3, #18
   29e0c:	18fb      	adds	r3, r7, r3
   29e0e:	881b      	ldrh	r3, [r3, #0]
   29e10:	2210      	movs	r2, #16
   29e12:	4013      	ands	r3, r2
   29e14:	d010      	beq.n	29e38 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29e16:	697b      	ldr	r3, [r7, #20]
   29e18:	2210      	movs	r2, #16
   29e1a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29e1c:	697b      	ldr	r3, [r7, #20]
   29e1e:	2210      	movs	r2, #16
   29e20:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29e22:	2310      	movs	r3, #16
   29e24:	18fb      	adds	r3, r7, r3
   29e26:	881b      	ldrh	r3, [r3, #0]
   29e28:	2210      	movs	r2, #16
   29e2a:	4013      	ands	r3, r2
   29e2c:	d004      	beq.n	29e38 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29e2e:	69bb      	ldr	r3, [r7, #24]
   29e30:	69db      	ldr	r3, [r3, #28]
   29e32:	69ba      	ldr	r2, [r7, #24]
   29e34:	0010      	movs	r0, r2
   29e36:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29e38:	2312      	movs	r3, #18
   29e3a:	18fb      	adds	r3, r7, r3
   29e3c:	881b      	ldrh	r3, [r3, #0]
   29e3e:	2220      	movs	r2, #32
   29e40:	4013      	ands	r3, r2
   29e42:	d010      	beq.n	29e66 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29e44:	697b      	ldr	r3, [r7, #20]
   29e46:	2220      	movs	r2, #32
   29e48:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29e4a:	697b      	ldr	r3, [r7, #20]
   29e4c:	2220      	movs	r2, #32
   29e4e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29e50:	2310      	movs	r3, #16
   29e52:	18fb      	adds	r3, r7, r3
   29e54:	881b      	ldrh	r3, [r3, #0]
   29e56:	2208      	movs	r2, #8
   29e58:	4013      	ands	r3, r2
   29e5a:	d004      	beq.n	29e66 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29e5c:	69bb      	ldr	r3, [r7, #24]
   29e5e:	699b      	ldr	r3, [r3, #24]
   29e60:	69ba      	ldr	r2, [r7, #24]
   29e62:	0010      	movs	r0, r2
   29e64:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29e66:	2312      	movs	r3, #18
   29e68:	18fb      	adds	r3, r7, r3
   29e6a:	881b      	ldrh	r3, [r3, #0]
   29e6c:	2208      	movs	r2, #8
   29e6e:	4013      	ands	r3, r2
   29e70:	d010      	beq.n	29e94 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29e72:	697b      	ldr	r3, [r7, #20]
   29e74:	2208      	movs	r2, #8
   29e76:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29e78:	697b      	ldr	r3, [r7, #20]
   29e7a:	2208      	movs	r2, #8
   29e7c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29e7e:	2310      	movs	r3, #16
   29e80:	18fb      	adds	r3, r7, r3
   29e82:	881b      	ldrh	r3, [r3, #0]
   29e84:	2220      	movs	r2, #32
   29e86:	4013      	ands	r3, r2
   29e88:	d004      	beq.n	29e94 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29e8a:	69bb      	ldr	r3, [r7, #24]
   29e8c:	6a1b      	ldr	r3, [r3, #32]
   29e8e:	69ba      	ldr	r2, [r7, #24]
   29e90:	0010      	movs	r0, r2
   29e92:	4798      	blx	r3
		}
	}
#endif
}
   29e94:	46c0      	nop			; (mov r8, r8)
   29e96:	46bd      	mov	sp, r7
   29e98:	b008      	add	sp, #32
   29e9a:	bd80      	pop	{r7, pc}

00029e9c <system_gclk_gen_get_config_defaults>:
{
   29e9c:	b580      	push	{r7, lr}
   29e9e:	b082      	sub	sp, #8
   29ea0:	af00      	add	r7, sp, #0
   29ea2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29ea4:	687b      	ldr	r3, [r7, #4]
   29ea6:	2201      	movs	r2, #1
   29ea8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29eaa:	687b      	ldr	r3, [r7, #4]
   29eac:	2200      	movs	r2, #0
   29eae:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29eb0:	687b      	ldr	r3, [r7, #4]
   29eb2:	2206      	movs	r2, #6
   29eb4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29eb6:	687b      	ldr	r3, [r7, #4]
   29eb8:	2200      	movs	r2, #0
   29eba:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29ebc:	687b      	ldr	r3, [r7, #4]
   29ebe:	2200      	movs	r2, #0
   29ec0:	725a      	strb	r2, [r3, #9]
}
   29ec2:	46c0      	nop			; (mov r8, r8)
   29ec4:	46bd      	mov	sp, r7
   29ec6:	b002      	add	sp, #8
   29ec8:	bd80      	pop	{r7, pc}

00029eca <system_gclk_chan_get_config_defaults>:
{
   29eca:	b580      	push	{r7, lr}
   29ecc:	b082      	sub	sp, #8
   29ece:	af00      	add	r7, sp, #0
   29ed0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29ed2:	687b      	ldr	r3, [r7, #4]
   29ed4:	2200      	movs	r2, #0
   29ed6:	701a      	strb	r2, [r3, #0]
}
   29ed8:	46c0      	nop			; (mov r8, r8)
   29eda:	46bd      	mov	sp, r7
   29edc:	b002      	add	sp, #8
   29ede:	bd80      	pop	{r7, pc}

00029ee0 <system_clock_source_osc8m_get_config_defaults>:
{
   29ee0:	b580      	push	{r7, lr}
   29ee2:	b082      	sub	sp, #8
   29ee4:	af00      	add	r7, sp, #0
   29ee6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29ee8:	687b      	ldr	r3, [r7, #4]
   29eea:	2203      	movs	r2, #3
   29eec:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29eee:	687b      	ldr	r3, [r7, #4]
   29ef0:	2200      	movs	r2, #0
   29ef2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29ef4:	687b      	ldr	r3, [r7, #4]
   29ef6:	2201      	movs	r2, #1
   29ef8:	709a      	strb	r2, [r3, #2]
}
   29efa:	46c0      	nop			; (mov r8, r8)
   29efc:	46bd      	mov	sp, r7
   29efe:	b002      	add	sp, #8
   29f00:	bd80      	pop	{r7, pc}
	...

00029f04 <system_cpu_clock_set_divider>:
{
   29f04:	b580      	push	{r7, lr}
   29f06:	b082      	sub	sp, #8
   29f08:	af00      	add	r7, sp, #0
   29f0a:	0002      	movs	r2, r0
   29f0c:	1dfb      	adds	r3, r7, #7
   29f0e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29f10:	4a03      	ldr	r2, [pc, #12]	; (29f20 <system_cpu_clock_set_divider+0x1c>)
   29f12:	1dfb      	adds	r3, r7, #7
   29f14:	781b      	ldrb	r3, [r3, #0]
   29f16:	7213      	strb	r3, [r2, #8]
}
   29f18:	46c0      	nop			; (mov r8, r8)
   29f1a:	46bd      	mov	sp, r7
   29f1c:	b002      	add	sp, #8
   29f1e:	bd80      	pop	{r7, pc}
   29f20:	40000400 	.word	0x40000400

00029f24 <system_apb_clock_set_divider>:
{
   29f24:	b580      	push	{r7, lr}
   29f26:	b082      	sub	sp, #8
   29f28:	af00      	add	r7, sp, #0
   29f2a:	0002      	movs	r2, r0
   29f2c:	1dfb      	adds	r3, r7, #7
   29f2e:	701a      	strb	r2, [r3, #0]
   29f30:	1dbb      	adds	r3, r7, #6
   29f32:	1c0a      	adds	r2, r1, #0
   29f34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29f36:	1dfb      	adds	r3, r7, #7
   29f38:	781b      	ldrb	r3, [r3, #0]
   29f3a:	2b01      	cmp	r3, #1
   29f3c:	d008      	beq.n	29f50 <system_apb_clock_set_divider+0x2c>
   29f3e:	2b02      	cmp	r3, #2
   29f40:	d00b      	beq.n	29f5a <system_apb_clock_set_divider+0x36>
   29f42:	2b00      	cmp	r3, #0
   29f44:	d10e      	bne.n	29f64 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29f46:	4a0b      	ldr	r2, [pc, #44]	; (29f74 <system_apb_clock_set_divider+0x50>)
   29f48:	1dbb      	adds	r3, r7, #6
   29f4a:	781b      	ldrb	r3, [r3, #0]
   29f4c:	7253      	strb	r3, [r2, #9]
			break;
   29f4e:	e00b      	b.n	29f68 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29f50:	4a08      	ldr	r2, [pc, #32]	; (29f74 <system_apb_clock_set_divider+0x50>)
   29f52:	1dbb      	adds	r3, r7, #6
   29f54:	781b      	ldrb	r3, [r3, #0]
   29f56:	7293      	strb	r3, [r2, #10]
			break;
   29f58:	e006      	b.n	29f68 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29f5a:	4a06      	ldr	r2, [pc, #24]	; (29f74 <system_apb_clock_set_divider+0x50>)
   29f5c:	1dbb      	adds	r3, r7, #6
   29f5e:	781b      	ldrb	r3, [r3, #0]
   29f60:	72d3      	strb	r3, [r2, #11]
			break;
   29f62:	e001      	b.n	29f68 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29f64:	2317      	movs	r3, #23
   29f66:	e000      	b.n	29f6a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29f68:	2300      	movs	r3, #0
}
   29f6a:	0018      	movs	r0, r3
   29f6c:	46bd      	mov	sp, r7
   29f6e:	b002      	add	sp, #8
   29f70:	bd80      	pop	{r7, pc}
   29f72:	46c0      	nop			; (mov r8, r8)
   29f74:	40000400 	.word	0x40000400

00029f78 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29f78:	b580      	push	{r7, lr}
   29f7a:	b082      	sub	sp, #8
   29f7c:	af00      	add	r7, sp, #0
   29f7e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29f80:	687b      	ldr	r3, [r7, #4]
   29f82:	2201      	movs	r2, #1
   29f84:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29f86:	687b      	ldr	r3, [r7, #4]
   29f88:	2200      	movs	r2, #0
   29f8a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29f8c:	687b      	ldr	r3, [r7, #4]
   29f8e:	2200      	movs	r2, #0
   29f90:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   29f92:	687b      	ldr	r3, [r7, #4]
   29f94:	2200      	movs	r2, #0
   29f96:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   29f98:	687b      	ldr	r3, [r7, #4]
   29f9a:	2200      	movs	r2, #0
   29f9c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   29f9e:	687b      	ldr	r3, [r7, #4]
   29fa0:	4a0a      	ldr	r2, [pc, #40]	; (29fcc <system_clock_source_dpll_get_config_defaults+0x54>)
   29fa2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   29fa4:	687b      	ldr	r3, [r7, #4]
   29fa6:	2280      	movs	r2, #128	; 0x80
   29fa8:	0212      	lsls	r2, r2, #8
   29faa:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   29fac:	687b      	ldr	r3, [r7, #4]
   29fae:	2201      	movs	r2, #1
   29fb0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   29fb2:	687b      	ldr	r3, [r7, #4]
   29fb4:	2200      	movs	r2, #0
   29fb6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   29fb8:	687b      	ldr	r3, [r7, #4]
   29fba:	2200      	movs	r2, #0
   29fbc:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   29fbe:	687b      	ldr	r3, [r7, #4]
   29fc0:	2200      	movs	r2, #0
   29fc2:	749a      	strb	r2, [r3, #18]
};
   29fc4:	46c0      	nop			; (mov r8, r8)
   29fc6:	46bd      	mov	sp, r7
   29fc8:	b002      	add	sp, #8
   29fca:	bd80      	pop	{r7, pc}
   29fcc:	02dc6c00 	.word	0x02dc6c00

00029fd0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   29fd0:	b580      	push	{r7, lr}
   29fd2:	b082      	sub	sp, #8
   29fd4:	af00      	add	r7, sp, #0
   29fd6:	0002      	movs	r2, r0
   29fd8:	1dfb      	adds	r3, r7, #7
   29fda:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   29fdc:	4a08      	ldr	r2, [pc, #32]	; (2a000 <system_flash_set_waitstates+0x30>)
   29fde:	1dfb      	adds	r3, r7, #7
   29fe0:	781b      	ldrb	r3, [r3, #0]
   29fe2:	210f      	movs	r1, #15
   29fe4:	400b      	ands	r3, r1
   29fe6:	b2d9      	uxtb	r1, r3
   29fe8:	6853      	ldr	r3, [r2, #4]
   29fea:	200f      	movs	r0, #15
   29fec:	4001      	ands	r1, r0
   29fee:	0049      	lsls	r1, r1, #1
   29ff0:	201e      	movs	r0, #30
   29ff2:	4383      	bics	r3, r0
   29ff4:	430b      	orrs	r3, r1
   29ff6:	6053      	str	r3, [r2, #4]
}
   29ff8:	46c0      	nop			; (mov r8, r8)
   29ffa:	46bd      	mov	sp, r7
   29ffc:	b002      	add	sp, #8
   29ffe:	bd80      	pop	{r7, pc}
   2a000:	41004000 	.word	0x41004000

0002a004 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a004:	b580      	push	{r7, lr}
   2a006:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a008:	46c0      	nop			; (mov r8, r8)
   2a00a:	4b04      	ldr	r3, [pc, #16]	; (2a01c <_system_dfll_wait_for_sync+0x18>)
   2a00c:	68db      	ldr	r3, [r3, #12]
   2a00e:	2210      	movs	r2, #16
   2a010:	4013      	ands	r3, r2
   2a012:	d0fa      	beq.n	2a00a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a014:	46c0      	nop			; (mov r8, r8)
   2a016:	46bd      	mov	sp, r7
   2a018:	bd80      	pop	{r7, pc}
   2a01a:	46c0      	nop			; (mov r8, r8)
   2a01c:	40000800 	.word	0x40000800

0002a020 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a020:	b580      	push	{r7, lr}
   2a022:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a024:	4b0c      	ldr	r3, [pc, #48]	; (2a058 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a026:	2202      	movs	r2, #2
   2a028:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a02a:	4b0c      	ldr	r3, [pc, #48]	; (2a05c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a02c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a02e:	4a0a      	ldr	r2, [pc, #40]	; (2a058 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a030:	4b0b      	ldr	r3, [pc, #44]	; (2a060 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a032:	689b      	ldr	r3, [r3, #8]
   2a034:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a036:	4a08      	ldr	r2, [pc, #32]	; (2a058 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a038:	4b09      	ldr	r3, [pc, #36]	; (2a060 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a03a:	685b      	ldr	r3, [r3, #4]
   2a03c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a03e:	4b06      	ldr	r3, [pc, #24]	; (2a058 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a040:	2200      	movs	r2, #0
   2a042:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a044:	4b05      	ldr	r3, [pc, #20]	; (2a05c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a046:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a048:	4a03      	ldr	r2, [pc, #12]	; (2a058 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a04a:	4b05      	ldr	r3, [pc, #20]	; (2a060 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a04c:	681b      	ldr	r3, [r3, #0]
   2a04e:	b29b      	uxth	r3, r3
   2a050:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a052:	46c0      	nop			; (mov r8, r8)
   2a054:	46bd      	mov	sp, r7
   2a056:	bd80      	pop	{r7, pc}
   2a058:	40000800 	.word	0x40000800
   2a05c:	0002a005 	.word	0x0002a005
   2a060:	200042d4 	.word	0x200042d4

0002a064 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a064:	b580      	push	{r7, lr}
   2a066:	b082      	sub	sp, #8
   2a068:	af00      	add	r7, sp, #0
   2a06a:	0002      	movs	r2, r0
   2a06c:	1dfb      	adds	r3, r7, #7
   2a06e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a070:	1dfb      	adds	r3, r7, #7
   2a072:	781b      	ldrb	r3, [r3, #0]
   2a074:	2b08      	cmp	r3, #8
   2a076:	d841      	bhi.n	2a0fc <system_clock_source_get_hz+0x98>
   2a078:	009a      	lsls	r2, r3, #2
   2a07a:	4b23      	ldr	r3, [pc, #140]	; (2a108 <system_clock_source_get_hz+0xa4>)
   2a07c:	18d3      	adds	r3, r2, r3
   2a07e:	681b      	ldr	r3, [r3, #0]
   2a080:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a082:	4b22      	ldr	r3, [pc, #136]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a084:	691b      	ldr	r3, [r3, #16]
   2a086:	e03a      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a088:	4b21      	ldr	r3, [pc, #132]	; (2a110 <system_clock_source_get_hz+0xac>)
   2a08a:	6a1b      	ldr	r3, [r3, #32]
   2a08c:	059b      	lsls	r3, r3, #22
   2a08e:	0f9b      	lsrs	r3, r3, #30
   2a090:	b2db      	uxtb	r3, r3
   2a092:	001a      	movs	r2, r3
   2a094:	4b1f      	ldr	r3, [pc, #124]	; (2a114 <system_clock_source_get_hz+0xb0>)
   2a096:	40d3      	lsrs	r3, r2
   2a098:	e031      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a09a:	2380      	movs	r3, #128	; 0x80
   2a09c:	021b      	lsls	r3, r3, #8
   2a09e:	e02e      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a0a0:	2380      	movs	r3, #128	; 0x80
   2a0a2:	021b      	lsls	r3, r3, #8
   2a0a4:	e02b      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a0a6:	4b19      	ldr	r3, [pc, #100]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a0a8:	695b      	ldr	r3, [r3, #20]
   2a0aa:	e028      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a0ac:	4b17      	ldr	r3, [pc, #92]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a0ae:	681b      	ldr	r3, [r3, #0]
   2a0b0:	2202      	movs	r2, #2
   2a0b2:	4013      	ands	r3, r2
   2a0b4:	d101      	bne.n	2a0ba <system_clock_source_get_hz+0x56>
			return 0;
   2a0b6:	2300      	movs	r3, #0
   2a0b8:	e021      	b.n	2a0fe <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a0ba:	4b17      	ldr	r3, [pc, #92]	; (2a118 <system_clock_source_get_hz+0xb4>)
   2a0bc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a0be:	4b13      	ldr	r3, [pc, #76]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a0c0:	681b      	ldr	r3, [r3, #0]
   2a0c2:	2224      	movs	r2, #36	; 0x24
   2a0c4:	4013      	ands	r3, r2
   2a0c6:	2b04      	cmp	r3, #4
   2a0c8:	d109      	bne.n	2a0de <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a0ca:	2000      	movs	r0, #0
   2a0cc:	4b13      	ldr	r3, [pc, #76]	; (2a11c <system_clock_source_get_hz+0xb8>)
   2a0ce:	4798      	blx	r3
   2a0d0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a0d2:	4b0e      	ldr	r3, [pc, #56]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a0d4:	689b      	ldr	r3, [r3, #8]
   2a0d6:	041b      	lsls	r3, r3, #16
   2a0d8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a0da:	4353      	muls	r3, r2
   2a0dc:	e00f      	b.n	2a0fe <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a0de:	4b10      	ldr	r3, [pc, #64]	; (2a120 <system_clock_source_get_hz+0xbc>)
   2a0e0:	e00d      	b.n	2a0fe <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a0e2:	4a0b      	ldr	r2, [pc, #44]	; (2a110 <system_clock_source_get_hz+0xac>)
   2a0e4:	2350      	movs	r3, #80	; 0x50
   2a0e6:	5cd3      	ldrb	r3, [r2, r3]
   2a0e8:	b2db      	uxtb	r3, r3
   2a0ea:	001a      	movs	r2, r3
   2a0ec:	2304      	movs	r3, #4
   2a0ee:	4013      	ands	r3, r2
   2a0f0:	d101      	bne.n	2a0f6 <system_clock_source_get_hz+0x92>
			return 0;
   2a0f2:	2300      	movs	r3, #0
   2a0f4:	e003      	b.n	2a0fe <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a0f6:	4b05      	ldr	r3, [pc, #20]	; (2a10c <system_clock_source_get_hz+0xa8>)
   2a0f8:	68db      	ldr	r3, [r3, #12]
   2a0fa:	e000      	b.n	2a0fe <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a0fc:	2300      	movs	r3, #0
	}
}
   2a0fe:	0018      	movs	r0, r3
   2a100:	46bd      	mov	sp, r7
   2a102:	b002      	add	sp, #8
   2a104:	bd80      	pop	{r7, pc}
   2a106:	46c0      	nop			; (mov r8, r8)
   2a108:	0003af4c 	.word	0x0003af4c
   2a10c:	200042d4 	.word	0x200042d4
   2a110:	40000800 	.word	0x40000800
   2a114:	007a1200 	.word	0x007a1200
   2a118:	0002a005 	.word	0x0002a005
   2a11c:	0002ab01 	.word	0x0002ab01
   2a120:	02dc6c00 	.word	0x02dc6c00

0002a124 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a124:	b580      	push	{r7, lr}
   2a126:	b084      	sub	sp, #16
   2a128:	af00      	add	r7, sp, #0
   2a12a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a12c:	4b1a      	ldr	r3, [pc, #104]	; (2a198 <system_clock_source_osc8m_set_config+0x74>)
   2a12e:	6a1b      	ldr	r3, [r3, #32]
   2a130:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	781b      	ldrb	r3, [r3, #0]
   2a136:	1c1a      	adds	r2, r3, #0
   2a138:	2303      	movs	r3, #3
   2a13a:	4013      	ands	r3, r2
   2a13c:	b2da      	uxtb	r2, r3
   2a13e:	230d      	movs	r3, #13
   2a140:	18fb      	adds	r3, r7, r3
   2a142:	2103      	movs	r1, #3
   2a144:	400a      	ands	r2, r1
   2a146:	0010      	movs	r0, r2
   2a148:	781a      	ldrb	r2, [r3, #0]
   2a14a:	2103      	movs	r1, #3
   2a14c:	438a      	bics	r2, r1
   2a14e:	1c11      	adds	r1, r2, #0
   2a150:	1c02      	adds	r2, r0, #0
   2a152:	430a      	orrs	r2, r1
   2a154:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a156:	687b      	ldr	r3, [r7, #4]
   2a158:	789a      	ldrb	r2, [r3, #2]
   2a15a:	230c      	movs	r3, #12
   2a15c:	18fb      	adds	r3, r7, r3
   2a15e:	01d0      	lsls	r0, r2, #7
   2a160:	781a      	ldrb	r2, [r3, #0]
   2a162:	217f      	movs	r1, #127	; 0x7f
   2a164:	400a      	ands	r2, r1
   2a166:	1c11      	adds	r1, r2, #0
   2a168:	1c02      	adds	r2, r0, #0
   2a16a:	430a      	orrs	r2, r1
   2a16c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a16e:	687b      	ldr	r3, [r7, #4]
   2a170:	785a      	ldrb	r2, [r3, #1]
   2a172:	230c      	movs	r3, #12
   2a174:	18fb      	adds	r3, r7, r3
   2a176:	2101      	movs	r1, #1
   2a178:	400a      	ands	r2, r1
   2a17a:	0190      	lsls	r0, r2, #6
   2a17c:	781a      	ldrb	r2, [r3, #0]
   2a17e:	2140      	movs	r1, #64	; 0x40
   2a180:	438a      	bics	r2, r1
   2a182:	1c11      	adds	r1, r2, #0
   2a184:	1c02      	adds	r2, r0, #0
   2a186:	430a      	orrs	r2, r1
   2a188:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a18a:	4b03      	ldr	r3, [pc, #12]	; (2a198 <system_clock_source_osc8m_set_config+0x74>)
   2a18c:	68fa      	ldr	r2, [r7, #12]
   2a18e:	621a      	str	r2, [r3, #32]
}
   2a190:	46c0      	nop			; (mov r8, r8)
   2a192:	46bd      	mov	sp, r7
   2a194:	b004      	add	sp, #16
   2a196:	bd80      	pop	{r7, pc}
   2a198:	40000800 	.word	0x40000800

0002a19c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a19c:	b580      	push	{r7, lr}
   2a19e:	b086      	sub	sp, #24
   2a1a0:	af00      	add	r7, sp, #0
   2a1a2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a1a4:	687b      	ldr	r3, [r7, #4]
   2a1a6:	68db      	ldr	r3, [r3, #12]
   2a1a8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a1aa:	687b      	ldr	r3, [r7, #4]
   2a1ac:	7d1b      	ldrb	r3, [r3, #20]
   2a1ae:	2b01      	cmp	r3, #1
   2a1b0:	d10a      	bne.n	2a1c8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a1b2:	687b      	ldr	r3, [r7, #4]
   2a1b4:	8a1b      	ldrh	r3, [r3, #16]
   2a1b6:	3301      	adds	r3, #1
   2a1b8:	005b      	lsls	r3, r3, #1
   2a1ba:	001a      	movs	r2, r3
   2a1bc:	4b36      	ldr	r3, [pc, #216]	; (2a298 <system_clock_source_dpll_set_config+0xfc>)
   2a1be:	0011      	movs	r1, r2
   2a1c0:	6978      	ldr	r0, [r7, #20]
   2a1c2:	4798      	blx	r3
   2a1c4:	0003      	movs	r3, r0
   2a1c6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a1c8:	687b      	ldr	r3, [r7, #4]
   2a1ca:	689b      	ldr	r3, [r3, #8]
   2a1cc:	011a      	lsls	r2, r3, #4
   2a1ce:	4b32      	ldr	r3, [pc, #200]	; (2a298 <system_clock_source_dpll_set_config+0xfc>)
   2a1d0:	6979      	ldr	r1, [r7, #20]
   2a1d2:	0010      	movs	r0, r2
   2a1d4:	4798      	blx	r3
   2a1d6:	0003      	movs	r3, r0
   2a1d8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a1da:	693b      	ldr	r3, [r7, #16]
   2a1dc:	b2da      	uxtb	r2, r3
   2a1de:	230f      	movs	r3, #15
   2a1e0:	18fb      	adds	r3, r7, r3
   2a1e2:	210f      	movs	r1, #15
   2a1e4:	400a      	ands	r2, r1
   2a1e6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a1e8:	693b      	ldr	r3, [r7, #16]
   2a1ea:	091b      	lsrs	r3, r3, #4
   2a1ec:	3b01      	subs	r3, #1
   2a1ee:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a1f0:	492a      	ldr	r1, [pc, #168]	; (2a29c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a1f2:	687b      	ldr	r3, [r7, #4]
   2a1f4:	781b      	ldrb	r3, [r3, #0]
   2a1f6:	01db      	lsls	r3, r3, #7
   2a1f8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	785b      	ldrb	r3, [r3, #1]
   2a1fe:	019b      	lsls	r3, r3, #6
   2a200:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a202:	4313      	orrs	r3, r2
   2a204:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a206:	2344      	movs	r3, #68	; 0x44
   2a208:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a20a:	4b24      	ldr	r3, [pc, #144]	; (2a29c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a20c:	220f      	movs	r2, #15
   2a20e:	18ba      	adds	r2, r7, r2
   2a210:	7812      	ldrb	r2, [r2, #0]
   2a212:	0412      	lsls	r2, r2, #16
   2a214:	0011      	movs	r1, r2
   2a216:	22f0      	movs	r2, #240	; 0xf0
   2a218:	0312      	lsls	r2, r2, #12
   2a21a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a21c:	693a      	ldr	r2, [r7, #16]
   2a21e:	0512      	lsls	r2, r2, #20
   2a220:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a222:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a224:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a226:	4b1d      	ldr	r3, [pc, #116]	; (2a29c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a228:	687a      	ldr	r2, [r7, #4]
   2a22a:	8a12      	ldrh	r2, [r2, #16]
   2a22c:	0412      	lsls	r2, r2, #16
   2a22e:	0011      	movs	r1, r2
   2a230:	4a1b      	ldr	r2, [pc, #108]	; (2a2a0 <system_clock_source_dpll_set_config+0x104>)
   2a232:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a234:	687a      	ldr	r2, [r7, #4]
   2a236:	7892      	ldrb	r2, [r2, #2]
   2a238:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a23a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a23c:	687a      	ldr	r2, [r7, #4]
   2a23e:	7cd2      	ldrb	r2, [r2, #19]
   2a240:	0212      	lsls	r2, r2, #8
   2a242:	0010      	movs	r0, r2
   2a244:	22e0      	movs	r2, #224	; 0xe0
   2a246:	00d2      	lsls	r2, r2, #3
   2a248:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a24a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a24c:	687a      	ldr	r2, [r7, #4]
   2a24e:	7d12      	ldrb	r2, [r2, #20]
   2a250:	0112      	lsls	r2, r2, #4
   2a252:	0010      	movs	r0, r2
   2a254:	2230      	movs	r2, #48	; 0x30
   2a256:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a258:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a25a:	687a      	ldr	r2, [r7, #4]
   2a25c:	78d2      	ldrb	r2, [r2, #3]
   2a25e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a260:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a262:	687a      	ldr	r2, [r7, #4]
   2a264:	7912      	ldrb	r2, [r2, #4]
   2a266:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a268:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a26a:	687a      	ldr	r2, [r7, #4]
   2a26c:	7c92      	ldrb	r2, [r2, #18]
   2a26e:	0010      	movs	r0, r2
   2a270:	2203      	movs	r2, #3
   2a272:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a274:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a276:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a278:	693b      	ldr	r3, [r7, #16]
   2a27a:	3301      	adds	r3, #1
   2a27c:	011a      	lsls	r2, r3, #4
   2a27e:	230f      	movs	r3, #15
   2a280:	18fb      	adds	r3, r7, r3
   2a282:	781b      	ldrb	r3, [r3, #0]
   2a284:	18d3      	adds	r3, r2, r3
   2a286:	697a      	ldr	r2, [r7, #20]
   2a288:	4353      	muls	r3, r2
   2a28a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a28c:	4b05      	ldr	r3, [pc, #20]	; (2a2a4 <system_clock_source_dpll_set_config+0x108>)
   2a28e:	60da      	str	r2, [r3, #12]
}
   2a290:	46c0      	nop			; (mov r8, r8)
   2a292:	46bd      	mov	sp, r7
   2a294:	b006      	add	sp, #24
   2a296:	bd80      	pop	{r7, pc}
   2a298:	000336a5 	.word	0x000336a5
   2a29c:	40000800 	.word	0x40000800
   2a2a0:	07ff0000 	.word	0x07ff0000
   2a2a4:	200042d4 	.word	0x200042d4

0002a2a8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a2a8:	b580      	push	{r7, lr}
   2a2aa:	b082      	sub	sp, #8
   2a2ac:	af00      	add	r7, sp, #0
   2a2ae:	0002      	movs	r2, r0
   2a2b0:	1dfb      	adds	r3, r7, #7
   2a2b2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a2b4:	1dfb      	adds	r3, r7, #7
   2a2b6:	781b      	ldrb	r3, [r3, #0]
   2a2b8:	2b08      	cmp	r3, #8
   2a2ba:	d83b      	bhi.n	2a334 <system_clock_source_enable+0x8c>
   2a2bc:	009a      	lsls	r2, r3, #2
   2a2be:	4b21      	ldr	r3, [pc, #132]	; (2a344 <system_clock_source_enable+0x9c>)
   2a2c0:	18d3      	adds	r3, r2, r3
   2a2c2:	681b      	ldr	r3, [r3, #0]
   2a2c4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a2c6:	4b20      	ldr	r3, [pc, #128]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2c8:	4a1f      	ldr	r2, [pc, #124]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2ca:	6a12      	ldr	r2, [r2, #32]
   2a2cc:	2102      	movs	r1, #2
   2a2ce:	430a      	orrs	r2, r1
   2a2d0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a2d2:	2300      	movs	r3, #0
   2a2d4:	e031      	b.n	2a33a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a2d6:	4b1c      	ldr	r3, [pc, #112]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2d8:	4a1b      	ldr	r2, [pc, #108]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2da:	6992      	ldr	r2, [r2, #24]
   2a2dc:	2102      	movs	r1, #2
   2a2de:	430a      	orrs	r2, r1
   2a2e0:	619a      	str	r2, [r3, #24]
		break;
   2a2e2:	e029      	b.n	2a338 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a2e4:	4a18      	ldr	r2, [pc, #96]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2e6:	4b18      	ldr	r3, [pc, #96]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2e8:	8a1b      	ldrh	r3, [r3, #16]
   2a2ea:	b29b      	uxth	r3, r3
   2a2ec:	2102      	movs	r1, #2
   2a2ee:	430b      	orrs	r3, r1
   2a2f0:	b29b      	uxth	r3, r3
   2a2f2:	8213      	strh	r3, [r2, #16]
		break;
   2a2f4:	e020      	b.n	2a338 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a2f6:	4a14      	ldr	r2, [pc, #80]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2f8:	4b13      	ldr	r3, [pc, #76]	; (2a348 <system_clock_source_enable+0xa0>)
   2a2fa:	8a9b      	ldrh	r3, [r3, #20]
   2a2fc:	b29b      	uxth	r3, r3
   2a2fe:	2102      	movs	r1, #2
   2a300:	430b      	orrs	r3, r1
   2a302:	b29b      	uxth	r3, r3
   2a304:	8293      	strh	r3, [r2, #20]
		break;
   2a306:	e017      	b.n	2a338 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a308:	4b10      	ldr	r3, [pc, #64]	; (2a34c <system_clock_source_enable+0xa4>)
   2a30a:	681b      	ldr	r3, [r3, #0]
   2a30c:	2202      	movs	r2, #2
   2a30e:	431a      	orrs	r2, r3
   2a310:	4b0e      	ldr	r3, [pc, #56]	; (2a34c <system_clock_source_enable+0xa4>)
   2a312:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a314:	4b0e      	ldr	r3, [pc, #56]	; (2a350 <system_clock_source_enable+0xa8>)
   2a316:	4798      	blx	r3
		break;
   2a318:	e00e      	b.n	2a338 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a31a:	4a0b      	ldr	r2, [pc, #44]	; (2a348 <system_clock_source_enable+0xa0>)
   2a31c:	490a      	ldr	r1, [pc, #40]	; (2a348 <system_clock_source_enable+0xa0>)
   2a31e:	2344      	movs	r3, #68	; 0x44
   2a320:	5ccb      	ldrb	r3, [r1, r3]
   2a322:	b2db      	uxtb	r3, r3
   2a324:	2102      	movs	r1, #2
   2a326:	430b      	orrs	r3, r1
   2a328:	b2d9      	uxtb	r1, r3
   2a32a:	2344      	movs	r3, #68	; 0x44
   2a32c:	54d1      	strb	r1, [r2, r3]
		break;
   2a32e:	e003      	b.n	2a338 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a330:	2300      	movs	r3, #0
   2a332:	e002      	b.n	2a33a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a334:	2317      	movs	r3, #23
   2a336:	e000      	b.n	2a33a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a338:	2300      	movs	r3, #0
}
   2a33a:	0018      	movs	r0, r3
   2a33c:	46bd      	mov	sp, r7
   2a33e:	b002      	add	sp, #8
   2a340:	bd80      	pop	{r7, pc}
   2a342:	46c0      	nop			; (mov r8, r8)
   2a344:	0003af70 	.word	0x0003af70
   2a348:	40000800 	.word	0x40000800
   2a34c:	200042d4 	.word	0x200042d4
   2a350:	0002a021 	.word	0x0002a021

0002a354 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a354:	b580      	push	{r7, lr}
   2a356:	b084      	sub	sp, #16
   2a358:	af00      	add	r7, sp, #0
   2a35a:	0002      	movs	r2, r0
   2a35c:	1dfb      	adds	r3, r7, #7
   2a35e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a360:	2300      	movs	r3, #0
   2a362:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a364:	1dfb      	adds	r3, r7, #7
   2a366:	781b      	ldrb	r3, [r3, #0]
   2a368:	2b08      	cmp	r3, #8
   2a36a:	d821      	bhi.n	2a3b0 <system_clock_source_is_ready+0x5c>
   2a36c:	009a      	lsls	r2, r3, #2
   2a36e:	4b18      	ldr	r3, [pc, #96]	; (2a3d0 <system_clock_source_is_ready+0x7c>)
   2a370:	18d3      	adds	r3, r2, r3
   2a372:	681b      	ldr	r3, [r3, #0]
   2a374:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a376:	2308      	movs	r3, #8
   2a378:	60fb      	str	r3, [r7, #12]
		break;
   2a37a:	e01b      	b.n	2a3b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a37c:	2304      	movs	r3, #4
   2a37e:	60fb      	str	r3, [r7, #12]
		break;
   2a380:	e018      	b.n	2a3b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a382:	2301      	movs	r3, #1
   2a384:	60fb      	str	r3, [r7, #12]
		break;
   2a386:	e015      	b.n	2a3b4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a388:	2302      	movs	r3, #2
   2a38a:	60fb      	str	r3, [r7, #12]
		break;
   2a38c:	e012      	b.n	2a3b4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a38e:	2310      	movs	r3, #16
   2a390:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a392:	e00f      	b.n	2a3b4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a394:	4a0f      	ldr	r2, [pc, #60]	; (2a3d4 <system_clock_source_is_ready+0x80>)
   2a396:	2350      	movs	r3, #80	; 0x50
   2a398:	5cd3      	ldrb	r3, [r2, r3]
   2a39a:	b2db      	uxtb	r3, r3
   2a39c:	001a      	movs	r2, r3
   2a39e:	2303      	movs	r3, #3
   2a3a0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a3a2:	3b03      	subs	r3, #3
   2a3a4:	425a      	negs	r2, r3
   2a3a6:	4153      	adcs	r3, r2
   2a3a8:	b2db      	uxtb	r3, r3
   2a3aa:	e00c      	b.n	2a3c6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a3ac:	2301      	movs	r3, #1
   2a3ae:	e00a      	b.n	2a3c6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a3b0:	2300      	movs	r3, #0
   2a3b2:	e008      	b.n	2a3c6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a3b4:	4b07      	ldr	r3, [pc, #28]	; (2a3d4 <system_clock_source_is_ready+0x80>)
   2a3b6:	68db      	ldr	r3, [r3, #12]
   2a3b8:	68fa      	ldr	r2, [r7, #12]
   2a3ba:	401a      	ands	r2, r3
   2a3bc:	68fb      	ldr	r3, [r7, #12]
   2a3be:	1ad3      	subs	r3, r2, r3
   2a3c0:	425a      	negs	r2, r3
   2a3c2:	4153      	adcs	r3, r2
   2a3c4:	b2db      	uxtb	r3, r3
}
   2a3c6:	0018      	movs	r0, r3
   2a3c8:	46bd      	mov	sp, r7
   2a3ca:	b004      	add	sp, #16
   2a3cc:	bd80      	pop	{r7, pc}
   2a3ce:	46c0      	nop			; (mov r8, r8)
   2a3d0:	0003af94 	.word	0x0003af94
   2a3d4:	40000800 	.word	0x40000800

0002a3d8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a3d8:	b580      	push	{r7, lr}
   2a3da:	b082      	sub	sp, #8
   2a3dc:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a3de:	003b      	movs	r3, r7
   2a3e0:	2203      	movs	r2, #3
   2a3e2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a3e4:	2300      	movs	r3, #0
   2a3e6:	607b      	str	r3, [r7, #4]
   2a3e8:	e009      	b.n	2a3fe <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a3ea:	687b      	ldr	r3, [r7, #4]
   2a3ec:	b2db      	uxtb	r3, r3
   2a3ee:	003a      	movs	r2, r7
   2a3f0:	0011      	movs	r1, r2
   2a3f2:	0018      	movs	r0, r3
   2a3f4:	4b05      	ldr	r3, [pc, #20]	; (2a40c <_switch_peripheral_gclk+0x34>)
   2a3f6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a3f8:	687b      	ldr	r3, [r7, #4]
   2a3fa:	3301      	adds	r3, #1
   2a3fc:	607b      	str	r3, [r7, #4]
   2a3fe:	687b      	ldr	r3, [r7, #4]
   2a400:	2b24      	cmp	r3, #36	; 0x24
   2a402:	d9f2      	bls.n	2a3ea <_switch_peripheral_gclk+0x12>
	}
}
   2a404:	46c0      	nop			; (mov r8, r8)
   2a406:	46bd      	mov	sp, r7
   2a408:	b002      	add	sp, #8
   2a40a:	bd80      	pop	{r7, pc}
   2a40c:	0002a9dd 	.word	0x0002a9dd

0002a410 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a410:	b580      	push	{r7, lr}
   2a412:	b0a6      	sub	sp, #152	; 0x98
   2a414:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a416:	4b92      	ldr	r3, [pc, #584]	; (2a660 <system_clock_init+0x250>)
   2a418:	22c2      	movs	r2, #194	; 0xc2
   2a41a:	00d2      	lsls	r2, r2, #3
   2a41c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a41e:	2003      	movs	r0, #3
   2a420:	4b90      	ldr	r3, [pc, #576]	; (2a664 <system_clock_init+0x254>)
   2a422:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a424:	4b90      	ldr	r3, [pc, #576]	; (2a668 <system_clock_init+0x258>)
   2a426:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a428:	2394      	movs	r3, #148	; 0x94
   2a42a:	18fb      	adds	r3, r7, r3
   2a42c:	0018      	movs	r0, r3
   2a42e:	4b8f      	ldr	r3, [pc, #572]	; (2a66c <system_clock_init+0x25c>)
   2a430:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a432:	2394      	movs	r3, #148	; 0x94
   2a434:	18fb      	adds	r3, r7, r3
   2a436:	2200      	movs	r2, #0
   2a438:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a43a:	2394      	movs	r3, #148	; 0x94
   2a43c:	18fb      	adds	r3, r7, r3
   2a43e:	2201      	movs	r2, #1
   2a440:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a442:	2394      	movs	r3, #148	; 0x94
   2a444:	18fb      	adds	r3, r7, r3
   2a446:	2200      	movs	r2, #0
   2a448:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a44a:	2394      	movs	r3, #148	; 0x94
   2a44c:	18fb      	adds	r3, r7, r3
   2a44e:	0018      	movs	r0, r3
   2a450:	4b87      	ldr	r3, [pc, #540]	; (2a670 <system_clock_init+0x260>)
   2a452:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a454:	2006      	movs	r0, #6
   2a456:	4b87      	ldr	r3, [pc, #540]	; (2a674 <system_clock_init+0x264>)
   2a458:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a45a:	4b87      	ldr	r3, [pc, #540]	; (2a678 <system_clock_init+0x268>)
   2a45c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a45e:	2360      	movs	r3, #96	; 0x60
   2a460:	18fb      	adds	r3, r7, r3
   2a462:	0018      	movs	r0, r3
   2a464:	4b85      	ldr	r3, [pc, #532]	; (2a67c <system_clock_init+0x26c>)
   2a466:	4798      	blx	r3
   2a468:	2360      	movs	r3, #96	; 0x60
   2a46a:	18fb      	adds	r3, r7, r3
   2a46c:	2206      	movs	r2, #6
   2a46e:	701a      	strb	r2, [r3, #0]
   2a470:	2360      	movs	r3, #96	; 0x60
   2a472:	18fb      	adds	r3, r7, r3
   2a474:	2208      	movs	r2, #8
   2a476:	605a      	str	r2, [r3, #4]
   2a478:	2360      	movs	r3, #96	; 0x60
   2a47a:	18fb      	adds	r3, r7, r3
   2a47c:	2200      	movs	r2, #0
   2a47e:	721a      	strb	r2, [r3, #8]
   2a480:	2360      	movs	r3, #96	; 0x60
   2a482:	18fb      	adds	r3, r7, r3
   2a484:	2200      	movs	r2, #0
   2a486:	725a      	strb	r2, [r3, #9]
   2a488:	2360      	movs	r3, #96	; 0x60
   2a48a:	18fb      	adds	r3, r7, r3
   2a48c:	0019      	movs	r1, r3
   2a48e:	2001      	movs	r0, #1
   2a490:	4b7b      	ldr	r3, [pc, #492]	; (2a680 <system_clock_init+0x270>)
   2a492:	4798      	blx	r3
   2a494:	2001      	movs	r0, #1
   2a496:	4b7b      	ldr	r3, [pc, #492]	; (2a684 <system_clock_init+0x274>)
   2a498:	4798      	blx	r3
   2a49a:	2354      	movs	r3, #84	; 0x54
   2a49c:	18fb      	adds	r3, r7, r3
   2a49e:	0018      	movs	r0, r3
   2a4a0:	4b76      	ldr	r3, [pc, #472]	; (2a67c <system_clock_init+0x26c>)
   2a4a2:	4798      	blx	r3
   2a4a4:	2354      	movs	r3, #84	; 0x54
   2a4a6:	18fb      	adds	r3, r7, r3
   2a4a8:	2203      	movs	r2, #3
   2a4aa:	701a      	strb	r2, [r3, #0]
   2a4ac:	2354      	movs	r3, #84	; 0x54
   2a4ae:	18fb      	adds	r3, r7, r3
   2a4b0:	2201      	movs	r2, #1
   2a4b2:	605a      	str	r2, [r3, #4]
   2a4b4:	2354      	movs	r3, #84	; 0x54
   2a4b6:	18fb      	adds	r3, r7, r3
   2a4b8:	2201      	movs	r2, #1
   2a4ba:	721a      	strb	r2, [r3, #8]
   2a4bc:	2354      	movs	r3, #84	; 0x54
   2a4be:	18fb      	adds	r3, r7, r3
   2a4c0:	2200      	movs	r2, #0
   2a4c2:	725a      	strb	r2, [r3, #9]
   2a4c4:	2354      	movs	r3, #84	; 0x54
   2a4c6:	18fb      	adds	r3, r7, r3
   2a4c8:	0019      	movs	r1, r3
   2a4ca:	2002      	movs	r0, #2
   2a4cc:	4b6c      	ldr	r3, [pc, #432]	; (2a680 <system_clock_init+0x270>)
   2a4ce:	4798      	blx	r3
   2a4d0:	2002      	movs	r0, #2
   2a4d2:	4b6c      	ldr	r3, [pc, #432]	; (2a684 <system_clock_init+0x274>)
   2a4d4:	4798      	blx	r3
   2a4d6:	233c      	movs	r3, #60	; 0x3c
   2a4d8:	18fb      	adds	r3, r7, r3
   2a4da:	0018      	movs	r0, r3
   2a4dc:	4b67      	ldr	r3, [pc, #412]	; (2a67c <system_clock_init+0x26c>)
   2a4de:	4798      	blx	r3
   2a4e0:	233c      	movs	r3, #60	; 0x3c
   2a4e2:	18fb      	adds	r3, r7, r3
   2a4e4:	2203      	movs	r2, #3
   2a4e6:	701a      	strb	r2, [r3, #0]
   2a4e8:	233c      	movs	r3, #60	; 0x3c
   2a4ea:	18fb      	adds	r3, r7, r3
   2a4ec:	2220      	movs	r2, #32
   2a4ee:	605a      	str	r2, [r3, #4]
   2a4f0:	233c      	movs	r3, #60	; 0x3c
   2a4f2:	18fb      	adds	r3, r7, r3
   2a4f4:	2200      	movs	r2, #0
   2a4f6:	721a      	strb	r2, [r3, #8]
   2a4f8:	233c      	movs	r3, #60	; 0x3c
   2a4fa:	18fb      	adds	r3, r7, r3
   2a4fc:	2200      	movs	r2, #0
   2a4fe:	725a      	strb	r2, [r3, #9]
   2a500:	233c      	movs	r3, #60	; 0x3c
   2a502:	18fb      	adds	r3, r7, r3
   2a504:	0019      	movs	r1, r3
   2a506:	2004      	movs	r0, #4
   2a508:	4b5d      	ldr	r3, [pc, #372]	; (2a680 <system_clock_init+0x270>)
   2a50a:	4798      	blx	r3
   2a50c:	2004      	movs	r0, #4
   2a50e:	4b5d      	ldr	r3, [pc, #372]	; (2a684 <system_clock_init+0x274>)
   2a510:	4798      	blx	r3
   2a512:	2330      	movs	r3, #48	; 0x30
   2a514:	18fb      	adds	r3, r7, r3
   2a516:	0018      	movs	r0, r3
   2a518:	4b58      	ldr	r3, [pc, #352]	; (2a67c <system_clock_init+0x26c>)
   2a51a:	4798      	blx	r3
   2a51c:	2330      	movs	r3, #48	; 0x30
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	2206      	movs	r2, #6
   2a522:	701a      	strb	r2, [r3, #0]
   2a524:	2330      	movs	r3, #48	; 0x30
   2a526:	18fb      	adds	r3, r7, r3
   2a528:	2201      	movs	r2, #1
   2a52a:	605a      	str	r2, [r3, #4]
   2a52c:	2330      	movs	r3, #48	; 0x30
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	2200      	movs	r2, #0
   2a532:	721a      	strb	r2, [r3, #8]
   2a534:	2330      	movs	r3, #48	; 0x30
   2a536:	18fb      	adds	r3, r7, r3
   2a538:	2200      	movs	r2, #0
   2a53a:	725a      	strb	r2, [r3, #9]
   2a53c:	2330      	movs	r3, #48	; 0x30
   2a53e:	18fb      	adds	r3, r7, r3
   2a540:	0019      	movs	r1, r3
   2a542:	2005      	movs	r0, #5
   2a544:	4b4e      	ldr	r3, [pc, #312]	; (2a680 <system_clock_init+0x270>)
   2a546:	4798      	blx	r3
   2a548:	2005      	movs	r0, #5
   2a54a:	4b4e      	ldr	r3, [pc, #312]	; (2a684 <system_clock_init+0x274>)
   2a54c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a54e:	2390      	movs	r3, #144	; 0x90
   2a550:	18fb      	adds	r3, r7, r3
   2a552:	0018      	movs	r0, r3
   2a554:	4b4c      	ldr	r3, [pc, #304]	; (2a688 <system_clock_init+0x278>)
   2a556:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a558:	2390      	movs	r3, #144	; 0x90
   2a55a:	18fb      	adds	r3, r7, r3
   2a55c:	2201      	movs	r2, #1
   2a55e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a560:	2390      	movs	r3, #144	; 0x90
   2a562:	18fb      	adds	r3, r7, r3
   2a564:	0019      	movs	r1, r3
   2a566:	2001      	movs	r0, #1
   2a568:	4b48      	ldr	r3, [pc, #288]	; (2a68c <system_clock_init+0x27c>)
   2a56a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a56c:	2001      	movs	r0, #1
   2a56e:	4b48      	ldr	r3, [pc, #288]	; (2a690 <system_clock_init+0x280>)
   2a570:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a572:	2378      	movs	r3, #120	; 0x78
   2a574:	18fb      	adds	r3, r7, r3
   2a576:	0018      	movs	r0, r3
   2a578:	4b46      	ldr	r3, [pc, #280]	; (2a694 <system_clock_init+0x284>)
   2a57a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a57c:	2378      	movs	r3, #120	; 0x78
   2a57e:	18fb      	adds	r3, r7, r3
   2a580:	2200      	movs	r2, #0
   2a582:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a584:	2378      	movs	r3, #120	; 0x78
   2a586:	18fb      	adds	r3, r7, r3
   2a588:	2200      	movs	r2, #0
   2a58a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a58c:	2378      	movs	r3, #120	; 0x78
   2a58e:	18fb      	adds	r3, r7, r3
   2a590:	2200      	movs	r2, #0
   2a592:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a594:	2378      	movs	r3, #120	; 0x78
   2a596:	18fb      	adds	r3, r7, r3
   2a598:	2200      	movs	r2, #0
   2a59a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a59c:	2378      	movs	r3, #120	; 0x78
   2a59e:	18fb      	adds	r3, r7, r3
   2a5a0:	2200      	movs	r2, #0
   2a5a2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a5a4:	2378      	movs	r3, #120	; 0x78
   2a5a6:	18fb      	adds	r3, r7, r3
   2a5a8:	2200      	movs	r2, #0
   2a5aa:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a5ac:	2378      	movs	r3, #120	; 0x78
   2a5ae:	18fb      	adds	r3, r7, r3
   2a5b0:	2200      	movs	r2, #0
   2a5b2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a5b4:	2378      	movs	r3, #120	; 0x78
   2a5b6:	18fb      	adds	r3, r7, r3
   2a5b8:	2202      	movs	r2, #2
   2a5ba:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a5bc:	2378      	movs	r3, #120	; 0x78
   2a5be:	18fb      	adds	r3, r7, r3
   2a5c0:	4a35      	ldr	r2, [pc, #212]	; (2a698 <system_clock_init+0x288>)
   2a5c2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a5c4:	2378      	movs	r3, #120	; 0x78
   2a5c6:	18fb      	adds	r3, r7, r3
   2a5c8:	2201      	movs	r2, #1
   2a5ca:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a5cc:	2378      	movs	r3, #120	; 0x78
   2a5ce:	18fb      	adds	r3, r7, r3
   2a5d0:	4a32      	ldr	r2, [pc, #200]	; (2a69c <system_clock_init+0x28c>)
   2a5d2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a5d4:	2378      	movs	r3, #120	; 0x78
   2a5d6:	18fb      	adds	r3, r7, r3
   2a5d8:	0018      	movs	r0, r3
   2a5da:	4b31      	ldr	r3, [pc, #196]	; (2a6a0 <system_clock_init+0x290>)
   2a5dc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a5de:	2008      	movs	r0, #8
   2a5e0:	4b24      	ldr	r3, [pc, #144]	; (2a674 <system_clock_init+0x264>)
   2a5e2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a5e4:	46c0      	nop			; (mov r8, r8)
   2a5e6:	2008      	movs	r0, #8
   2a5e8:	4b2e      	ldr	r3, [pc, #184]	; (2a6a4 <system_clock_init+0x294>)
   2a5ea:	4798      	blx	r3
   2a5ec:	0003      	movs	r3, r0
   2a5ee:	001a      	movs	r2, r3
   2a5f0:	2301      	movs	r3, #1
   2a5f2:	4053      	eors	r3, r2
   2a5f4:	b2db      	uxtb	r3, r3
   2a5f6:	2b00      	cmp	r3, #0
   2a5f8:	d1f5      	bne.n	2a5e6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a5fa:	4919      	ldr	r1, [pc, #100]	; (2a660 <system_clock_init+0x250>)
   2a5fc:	2244      	movs	r2, #68	; 0x44
   2a5fe:	5c8b      	ldrb	r3, [r1, r2]
   2a600:	2080      	movs	r0, #128	; 0x80
   2a602:	4240      	negs	r0, r0
   2a604:	4303      	orrs	r3, r0
   2a606:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a608:	2000      	movs	r0, #0
   2a60a:	4b27      	ldr	r3, [pc, #156]	; (2a6a8 <system_clock_init+0x298>)
   2a60c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a60e:	2100      	movs	r1, #0
   2a610:	2000      	movs	r0, #0
   2a612:	4b26      	ldr	r3, [pc, #152]	; (2a6ac <system_clock_init+0x29c>)
   2a614:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a616:	2100      	movs	r1, #0
   2a618:	2001      	movs	r0, #1
   2a61a:	4b24      	ldr	r3, [pc, #144]	; (2a6ac <system_clock_init+0x29c>)
   2a61c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a61e:	2100      	movs	r1, #0
   2a620:	2002      	movs	r0, #2
   2a622:	4b22      	ldr	r3, [pc, #136]	; (2a6ac <system_clock_init+0x29c>)
   2a624:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a626:	003b      	movs	r3, r7
   2a628:	0018      	movs	r0, r3
   2a62a:	4b14      	ldr	r3, [pc, #80]	; (2a67c <system_clock_init+0x26c>)
   2a62c:	4798      	blx	r3
   2a62e:	003b      	movs	r3, r7
   2a630:	2208      	movs	r2, #8
   2a632:	701a      	strb	r2, [r3, #0]
   2a634:	003b      	movs	r3, r7
   2a636:	2201      	movs	r2, #1
   2a638:	605a      	str	r2, [r3, #4]
   2a63a:	003b      	movs	r3, r7
   2a63c:	2200      	movs	r2, #0
   2a63e:	721a      	strb	r2, [r3, #8]
   2a640:	003b      	movs	r3, r7
   2a642:	2201      	movs	r2, #1
   2a644:	725a      	strb	r2, [r3, #9]
   2a646:	003b      	movs	r3, r7
   2a648:	0019      	movs	r1, r3
   2a64a:	2000      	movs	r0, #0
   2a64c:	4b0c      	ldr	r3, [pc, #48]	; (2a680 <system_clock_init+0x270>)
   2a64e:	4798      	blx	r3
   2a650:	2000      	movs	r0, #0
   2a652:	4b0c      	ldr	r3, [pc, #48]	; (2a684 <system_clock_init+0x274>)
   2a654:	4798      	blx	r3
#endif
}
   2a656:	46c0      	nop			; (mov r8, r8)
   2a658:	46bd      	mov	sp, r7
   2a65a:	b026      	add	sp, #152	; 0x98
   2a65c:	bd80      	pop	{r7, pc}
   2a65e:	46c0      	nop			; (mov r8, r8)
   2a660:	40000800 	.word	0x40000800
   2a664:	00029fd1 	.word	0x00029fd1
   2a668:	0002a3d9 	.word	0x0002a3d9
   2a66c:	00029ee1 	.word	0x00029ee1
   2a670:	0002a125 	.word	0x0002a125
   2a674:	0002a2a9 	.word	0x0002a2a9
   2a678:	0002a755 	.word	0x0002a755
   2a67c:	00029e9d 	.word	0x00029e9d
   2a680:	0002a785 	.word	0x0002a785
   2a684:	0002a8a9 	.word	0x0002a8a9
   2a688:	00029ecb 	.word	0x00029ecb
   2a68c:	0002a9dd 	.word	0x0002a9dd
   2a690:	0002aa21 	.word	0x0002aa21
   2a694:	00029f79 	.word	0x00029f79
   2a698:	000f4240 	.word	0x000f4240
   2a69c:	02dc6c00 	.word	0x02dc6c00
   2a6a0:	0002a19d 	.word	0x0002a19d
   2a6a4:	0002a355 	.word	0x0002a355
   2a6a8:	00029f05 	.word	0x00029f05
   2a6ac:	00029f25 	.word	0x00029f25

0002a6b0 <system_apb_clock_set_mask>:
{
   2a6b0:	b580      	push	{r7, lr}
   2a6b2:	b082      	sub	sp, #8
   2a6b4:	af00      	add	r7, sp, #0
   2a6b6:	0002      	movs	r2, r0
   2a6b8:	6039      	str	r1, [r7, #0]
   2a6ba:	1dfb      	adds	r3, r7, #7
   2a6bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a6be:	1dfb      	adds	r3, r7, #7
   2a6c0:	781b      	ldrb	r3, [r3, #0]
   2a6c2:	2b01      	cmp	r3, #1
   2a6c4:	d00a      	beq.n	2a6dc <system_apb_clock_set_mask+0x2c>
   2a6c6:	2b02      	cmp	r3, #2
   2a6c8:	d00f      	beq.n	2a6ea <system_apb_clock_set_mask+0x3a>
   2a6ca:	2b00      	cmp	r3, #0
   2a6cc:	d114      	bne.n	2a6f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a6ce:	4b0e      	ldr	r3, [pc, #56]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6d0:	4a0d      	ldr	r2, [pc, #52]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6d2:	6991      	ldr	r1, [r2, #24]
   2a6d4:	683a      	ldr	r2, [r7, #0]
   2a6d6:	430a      	orrs	r2, r1
   2a6d8:	619a      	str	r2, [r3, #24]
			break;
   2a6da:	e00f      	b.n	2a6fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a6dc:	4b0a      	ldr	r3, [pc, #40]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6de:	4a0a      	ldr	r2, [pc, #40]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6e0:	69d1      	ldr	r1, [r2, #28]
   2a6e2:	683a      	ldr	r2, [r7, #0]
   2a6e4:	430a      	orrs	r2, r1
   2a6e6:	61da      	str	r2, [r3, #28]
			break;
   2a6e8:	e008      	b.n	2a6fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a6ea:	4b07      	ldr	r3, [pc, #28]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6ec:	4a06      	ldr	r2, [pc, #24]	; (2a708 <system_apb_clock_set_mask+0x58>)
   2a6ee:	6a11      	ldr	r1, [r2, #32]
   2a6f0:	683a      	ldr	r2, [r7, #0]
   2a6f2:	430a      	orrs	r2, r1
   2a6f4:	621a      	str	r2, [r3, #32]
			break;
   2a6f6:	e001      	b.n	2a6fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a6f8:	2317      	movs	r3, #23
   2a6fa:	e000      	b.n	2a6fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a6fc:	2300      	movs	r3, #0
}
   2a6fe:	0018      	movs	r0, r3
   2a700:	46bd      	mov	sp, r7
   2a702:	b002      	add	sp, #8
   2a704:	bd80      	pop	{r7, pc}
   2a706:	46c0      	nop			; (mov r8, r8)
   2a708:	40000400 	.word	0x40000400

0002a70c <system_interrupt_enter_critical_section>:
{
   2a70c:	b580      	push	{r7, lr}
   2a70e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a710:	4b02      	ldr	r3, [pc, #8]	; (2a71c <system_interrupt_enter_critical_section+0x10>)
   2a712:	4798      	blx	r3
}
   2a714:	46c0      	nop			; (mov r8, r8)
   2a716:	46bd      	mov	sp, r7
   2a718:	bd80      	pop	{r7, pc}
   2a71a:	46c0      	nop			; (mov r8, r8)
   2a71c:	00026d49 	.word	0x00026d49

0002a720 <system_interrupt_leave_critical_section>:
{
   2a720:	b580      	push	{r7, lr}
   2a722:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a724:	4b02      	ldr	r3, [pc, #8]	; (2a730 <system_interrupt_leave_critical_section+0x10>)
   2a726:	4798      	blx	r3
}
   2a728:	46c0      	nop			; (mov r8, r8)
   2a72a:	46bd      	mov	sp, r7
   2a72c:	bd80      	pop	{r7, pc}
   2a72e:	46c0      	nop			; (mov r8, r8)
   2a730:	00026d9d 	.word	0x00026d9d

0002a734 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a734:	b580      	push	{r7, lr}
   2a736:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a738:	4b05      	ldr	r3, [pc, #20]	; (2a750 <system_gclk_is_syncing+0x1c>)
   2a73a:	785b      	ldrb	r3, [r3, #1]
   2a73c:	b2db      	uxtb	r3, r3
   2a73e:	b25b      	sxtb	r3, r3
   2a740:	2b00      	cmp	r3, #0
   2a742:	da01      	bge.n	2a748 <system_gclk_is_syncing+0x14>
		return true;
   2a744:	2301      	movs	r3, #1
   2a746:	e000      	b.n	2a74a <system_gclk_is_syncing+0x16>
	}

	return false;
   2a748:	2300      	movs	r3, #0
}
   2a74a:	0018      	movs	r0, r3
   2a74c:	46bd      	mov	sp, r7
   2a74e:	bd80      	pop	{r7, pc}
   2a750:	40000c00 	.word	0x40000c00

0002a754 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a754:	b580      	push	{r7, lr}
   2a756:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a758:	2108      	movs	r1, #8
   2a75a:	2000      	movs	r0, #0
   2a75c:	4b07      	ldr	r3, [pc, #28]	; (2a77c <system_gclk_init+0x28>)
   2a75e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a760:	4b07      	ldr	r3, [pc, #28]	; (2a780 <system_gclk_init+0x2c>)
   2a762:	2201      	movs	r2, #1
   2a764:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a766:	46c0      	nop			; (mov r8, r8)
   2a768:	4b05      	ldr	r3, [pc, #20]	; (2a780 <system_gclk_init+0x2c>)
   2a76a:	781b      	ldrb	r3, [r3, #0]
   2a76c:	b2db      	uxtb	r3, r3
   2a76e:	001a      	movs	r2, r3
   2a770:	2301      	movs	r3, #1
   2a772:	4013      	ands	r3, r2
   2a774:	d1f8      	bne.n	2a768 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a776:	46c0      	nop			; (mov r8, r8)
   2a778:	46bd      	mov	sp, r7
   2a77a:	bd80      	pop	{r7, pc}
   2a77c:	0002a6b1 	.word	0x0002a6b1
   2a780:	40000c00 	.word	0x40000c00

0002a784 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a784:	b580      	push	{r7, lr}
   2a786:	b086      	sub	sp, #24
   2a788:	af00      	add	r7, sp, #0
   2a78a:	0002      	movs	r2, r0
   2a78c:	6039      	str	r1, [r7, #0]
   2a78e:	1dfb      	adds	r3, r7, #7
   2a790:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a792:	1dfb      	adds	r3, r7, #7
   2a794:	781b      	ldrb	r3, [r3, #0]
   2a796:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a798:	1dfb      	adds	r3, r7, #7
   2a79a:	781b      	ldrb	r3, [r3, #0]
   2a79c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a79e:	683b      	ldr	r3, [r7, #0]
   2a7a0:	781b      	ldrb	r3, [r3, #0]
   2a7a2:	021b      	lsls	r3, r3, #8
   2a7a4:	001a      	movs	r2, r3
   2a7a6:	697b      	ldr	r3, [r7, #20]
   2a7a8:	4313      	orrs	r3, r2
   2a7aa:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a7ac:	683b      	ldr	r3, [r7, #0]
   2a7ae:	785b      	ldrb	r3, [r3, #1]
   2a7b0:	2b00      	cmp	r3, #0
   2a7b2:	d004      	beq.n	2a7be <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a7b4:	697b      	ldr	r3, [r7, #20]
   2a7b6:	2280      	movs	r2, #128	; 0x80
   2a7b8:	02d2      	lsls	r2, r2, #11
   2a7ba:	4313      	orrs	r3, r2
   2a7bc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a7be:	683b      	ldr	r3, [r7, #0]
   2a7c0:	7a5b      	ldrb	r3, [r3, #9]
   2a7c2:	2b00      	cmp	r3, #0
   2a7c4:	d004      	beq.n	2a7d0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a7c6:	697b      	ldr	r3, [r7, #20]
   2a7c8:	2280      	movs	r2, #128	; 0x80
   2a7ca:	0312      	lsls	r2, r2, #12
   2a7cc:	4313      	orrs	r3, r2
   2a7ce:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a7d0:	683b      	ldr	r3, [r7, #0]
   2a7d2:	685b      	ldr	r3, [r3, #4]
   2a7d4:	2b01      	cmp	r3, #1
   2a7d6:	d92c      	bls.n	2a832 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a7d8:	683b      	ldr	r3, [r7, #0]
   2a7da:	685a      	ldr	r2, [r3, #4]
   2a7dc:	683b      	ldr	r3, [r7, #0]
   2a7de:	685b      	ldr	r3, [r3, #4]
   2a7e0:	3b01      	subs	r3, #1
   2a7e2:	4013      	ands	r3, r2
   2a7e4:	d11a      	bne.n	2a81c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a7e6:	2300      	movs	r3, #0
   2a7e8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a7ea:	2302      	movs	r3, #2
   2a7ec:	60bb      	str	r3, [r7, #8]
   2a7ee:	e005      	b.n	2a7fc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a7f0:	68fb      	ldr	r3, [r7, #12]
   2a7f2:	3301      	adds	r3, #1
   2a7f4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a7f6:	68bb      	ldr	r3, [r7, #8]
   2a7f8:	005b      	lsls	r3, r3, #1
   2a7fa:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a7fc:	683b      	ldr	r3, [r7, #0]
   2a7fe:	685a      	ldr	r2, [r3, #4]
   2a800:	68bb      	ldr	r3, [r7, #8]
   2a802:	429a      	cmp	r2, r3
   2a804:	d8f4      	bhi.n	2a7f0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a806:	68fb      	ldr	r3, [r7, #12]
   2a808:	021b      	lsls	r3, r3, #8
   2a80a:	693a      	ldr	r2, [r7, #16]
   2a80c:	4313      	orrs	r3, r2
   2a80e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a810:	697b      	ldr	r3, [r7, #20]
   2a812:	2280      	movs	r2, #128	; 0x80
   2a814:	0352      	lsls	r2, r2, #13
   2a816:	4313      	orrs	r3, r2
   2a818:	617b      	str	r3, [r7, #20]
   2a81a:	e00a      	b.n	2a832 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a81c:	683b      	ldr	r3, [r7, #0]
   2a81e:	685b      	ldr	r3, [r3, #4]
   2a820:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a822:	693a      	ldr	r2, [r7, #16]
   2a824:	4313      	orrs	r3, r2
   2a826:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a828:	697b      	ldr	r3, [r7, #20]
   2a82a:	2280      	movs	r2, #128	; 0x80
   2a82c:	0292      	lsls	r2, r2, #10
   2a82e:	4313      	orrs	r3, r2
   2a830:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a832:	683b      	ldr	r3, [r7, #0]
   2a834:	7a1b      	ldrb	r3, [r3, #8]
   2a836:	2b00      	cmp	r3, #0
   2a838:	d004      	beq.n	2a844 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a83a:	697b      	ldr	r3, [r7, #20]
   2a83c:	2280      	movs	r2, #128	; 0x80
   2a83e:	0392      	lsls	r2, r2, #14
   2a840:	4313      	orrs	r3, r2
   2a842:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a844:	46c0      	nop			; (mov r8, r8)
   2a846:	4b13      	ldr	r3, [pc, #76]	; (2a894 <system_gclk_gen_set_config+0x110>)
   2a848:	4798      	blx	r3
   2a84a:	1e03      	subs	r3, r0, #0
   2a84c:	d1fb      	bne.n	2a846 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a84e:	4b12      	ldr	r3, [pc, #72]	; (2a898 <system_gclk_gen_set_config+0x114>)
   2a850:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a852:	4a12      	ldr	r2, [pc, #72]	; (2a89c <system_gclk_gen_set_config+0x118>)
   2a854:	1dfb      	adds	r3, r7, #7
   2a856:	781b      	ldrb	r3, [r3, #0]
   2a858:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a85a:	46c0      	nop			; (mov r8, r8)
   2a85c:	4b0d      	ldr	r3, [pc, #52]	; (2a894 <system_gclk_gen_set_config+0x110>)
   2a85e:	4798      	blx	r3
   2a860:	1e03      	subs	r3, r0, #0
   2a862:	d1fb      	bne.n	2a85c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a864:	4b0e      	ldr	r3, [pc, #56]	; (2a8a0 <system_gclk_gen_set_config+0x11c>)
   2a866:	693a      	ldr	r2, [r7, #16]
   2a868:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a86a:	46c0      	nop			; (mov r8, r8)
   2a86c:	4b09      	ldr	r3, [pc, #36]	; (2a894 <system_gclk_gen_set_config+0x110>)
   2a86e:	4798      	blx	r3
   2a870:	1e03      	subs	r3, r0, #0
   2a872:	d1fb      	bne.n	2a86c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a874:	4b0a      	ldr	r3, [pc, #40]	; (2a8a0 <system_gclk_gen_set_config+0x11c>)
   2a876:	4a0a      	ldr	r2, [pc, #40]	; (2a8a0 <system_gclk_gen_set_config+0x11c>)
   2a878:	6851      	ldr	r1, [r2, #4]
   2a87a:	2280      	movs	r2, #128	; 0x80
   2a87c:	0252      	lsls	r2, r2, #9
   2a87e:	4011      	ands	r1, r2
   2a880:	697a      	ldr	r2, [r7, #20]
   2a882:	430a      	orrs	r2, r1
   2a884:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a886:	4b07      	ldr	r3, [pc, #28]	; (2a8a4 <system_gclk_gen_set_config+0x120>)
   2a888:	4798      	blx	r3
}
   2a88a:	46c0      	nop			; (mov r8, r8)
   2a88c:	46bd      	mov	sp, r7
   2a88e:	b006      	add	sp, #24
   2a890:	bd80      	pop	{r7, pc}
   2a892:	46c0      	nop			; (mov r8, r8)
   2a894:	0002a735 	.word	0x0002a735
   2a898:	0002a70d 	.word	0x0002a70d
   2a89c:	40000c08 	.word	0x40000c08
   2a8a0:	40000c00 	.word	0x40000c00
   2a8a4:	0002a721 	.word	0x0002a721

0002a8a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a8a8:	b580      	push	{r7, lr}
   2a8aa:	b082      	sub	sp, #8
   2a8ac:	af00      	add	r7, sp, #0
   2a8ae:	0002      	movs	r2, r0
   2a8b0:	1dfb      	adds	r3, r7, #7
   2a8b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a8b4:	46c0      	nop			; (mov r8, r8)
   2a8b6:	4b0e      	ldr	r3, [pc, #56]	; (2a8f0 <system_gclk_gen_enable+0x48>)
   2a8b8:	4798      	blx	r3
   2a8ba:	1e03      	subs	r3, r0, #0
   2a8bc:	d1fb      	bne.n	2a8b6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a8be:	4b0d      	ldr	r3, [pc, #52]	; (2a8f4 <system_gclk_gen_enable+0x4c>)
   2a8c0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a8c2:	4a0d      	ldr	r2, [pc, #52]	; (2a8f8 <system_gclk_gen_enable+0x50>)
   2a8c4:	1dfb      	adds	r3, r7, #7
   2a8c6:	781b      	ldrb	r3, [r3, #0]
   2a8c8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a8ca:	46c0      	nop			; (mov r8, r8)
   2a8cc:	4b08      	ldr	r3, [pc, #32]	; (2a8f0 <system_gclk_gen_enable+0x48>)
   2a8ce:	4798      	blx	r3
   2a8d0:	1e03      	subs	r3, r0, #0
   2a8d2:	d1fb      	bne.n	2a8cc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a8d4:	4b09      	ldr	r3, [pc, #36]	; (2a8fc <system_gclk_gen_enable+0x54>)
   2a8d6:	4a09      	ldr	r2, [pc, #36]	; (2a8fc <system_gclk_gen_enable+0x54>)
   2a8d8:	6852      	ldr	r2, [r2, #4]
   2a8da:	2180      	movs	r1, #128	; 0x80
   2a8dc:	0249      	lsls	r1, r1, #9
   2a8de:	430a      	orrs	r2, r1
   2a8e0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a8e2:	4b07      	ldr	r3, [pc, #28]	; (2a900 <system_gclk_gen_enable+0x58>)
   2a8e4:	4798      	blx	r3
}
   2a8e6:	46c0      	nop			; (mov r8, r8)
   2a8e8:	46bd      	mov	sp, r7
   2a8ea:	b002      	add	sp, #8
   2a8ec:	bd80      	pop	{r7, pc}
   2a8ee:	46c0      	nop			; (mov r8, r8)
   2a8f0:	0002a735 	.word	0x0002a735
   2a8f4:	0002a70d 	.word	0x0002a70d
   2a8f8:	40000c04 	.word	0x40000c04
   2a8fc:	40000c00 	.word	0x40000c00
   2a900:	0002a721 	.word	0x0002a721

0002a904 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a904:	b580      	push	{r7, lr}
   2a906:	b086      	sub	sp, #24
   2a908:	af00      	add	r7, sp, #0
   2a90a:	0002      	movs	r2, r0
   2a90c:	1dfb      	adds	r3, r7, #7
   2a90e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a910:	46c0      	nop			; (mov r8, r8)
   2a912:	4b2a      	ldr	r3, [pc, #168]	; (2a9bc <system_gclk_gen_get_hz+0xb8>)
   2a914:	4798      	blx	r3
   2a916:	1e03      	subs	r3, r0, #0
   2a918:	d1fb      	bne.n	2a912 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a91a:	4b29      	ldr	r3, [pc, #164]	; (2a9c0 <system_gclk_gen_get_hz+0xbc>)
   2a91c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a91e:	4a29      	ldr	r2, [pc, #164]	; (2a9c4 <system_gclk_gen_get_hz+0xc0>)
   2a920:	1dfb      	adds	r3, r7, #7
   2a922:	781b      	ldrb	r3, [r3, #0]
   2a924:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a926:	46c0      	nop			; (mov r8, r8)
   2a928:	4b24      	ldr	r3, [pc, #144]	; (2a9bc <system_gclk_gen_get_hz+0xb8>)
   2a92a:	4798      	blx	r3
   2a92c:	1e03      	subs	r3, r0, #0
   2a92e:	d1fb      	bne.n	2a928 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a930:	4b25      	ldr	r3, [pc, #148]	; (2a9c8 <system_gclk_gen_get_hz+0xc4>)
   2a932:	685b      	ldr	r3, [r3, #4]
   2a934:	04db      	lsls	r3, r3, #19
   2a936:	0edb      	lsrs	r3, r3, #27
   2a938:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a93a:	0018      	movs	r0, r3
   2a93c:	4b23      	ldr	r3, [pc, #140]	; (2a9cc <system_gclk_gen_get_hz+0xc8>)
   2a93e:	4798      	blx	r3
   2a940:	0003      	movs	r3, r0
   2a942:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a944:	4a1f      	ldr	r2, [pc, #124]	; (2a9c4 <system_gclk_gen_get_hz+0xc0>)
   2a946:	1dfb      	adds	r3, r7, #7
   2a948:	781b      	ldrb	r3, [r3, #0]
   2a94a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a94c:	4b1e      	ldr	r3, [pc, #120]	; (2a9c8 <system_gclk_gen_get_hz+0xc4>)
   2a94e:	685b      	ldr	r3, [r3, #4]
   2a950:	02db      	lsls	r3, r3, #11
   2a952:	0fdb      	lsrs	r3, r3, #31
   2a954:	b2da      	uxtb	r2, r3
   2a956:	2313      	movs	r3, #19
   2a958:	18fb      	adds	r3, r7, r3
   2a95a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a95c:	4a1c      	ldr	r2, [pc, #112]	; (2a9d0 <system_gclk_gen_get_hz+0xcc>)
   2a95e:	1dfb      	adds	r3, r7, #7
   2a960:	781b      	ldrb	r3, [r3, #0]
   2a962:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a964:	46c0      	nop			; (mov r8, r8)
   2a966:	4b15      	ldr	r3, [pc, #84]	; (2a9bc <system_gclk_gen_get_hz+0xb8>)
   2a968:	4798      	blx	r3
   2a96a:	1e03      	subs	r3, r0, #0
   2a96c:	d1fb      	bne.n	2a966 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a96e:	4b16      	ldr	r3, [pc, #88]	; (2a9c8 <system_gclk_gen_get_hz+0xc4>)
   2a970:	689b      	ldr	r3, [r3, #8]
   2a972:	021b      	lsls	r3, r3, #8
   2a974:	0c1b      	lsrs	r3, r3, #16
   2a976:	b29b      	uxth	r3, r3
   2a978:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a97a:	4b16      	ldr	r3, [pc, #88]	; (2a9d4 <system_gclk_gen_get_hz+0xd0>)
   2a97c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a97e:	2313      	movs	r3, #19
   2a980:	18fb      	adds	r3, r7, r3
   2a982:	781b      	ldrb	r3, [r3, #0]
   2a984:	2b00      	cmp	r3, #0
   2a986:	d109      	bne.n	2a99c <system_gclk_gen_get_hz+0x98>
   2a988:	68fb      	ldr	r3, [r7, #12]
   2a98a:	2b01      	cmp	r3, #1
   2a98c:	d906      	bls.n	2a99c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a98e:	4b12      	ldr	r3, [pc, #72]	; (2a9d8 <system_gclk_gen_get_hz+0xd4>)
   2a990:	68f9      	ldr	r1, [r7, #12]
   2a992:	6978      	ldr	r0, [r7, #20]
   2a994:	4798      	blx	r3
   2a996:	0003      	movs	r3, r0
   2a998:	617b      	str	r3, [r7, #20]
   2a99a:	e00a      	b.n	2a9b2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a99c:	2313      	movs	r3, #19
   2a99e:	18fb      	adds	r3, r7, r3
   2a9a0:	781b      	ldrb	r3, [r3, #0]
   2a9a2:	2b00      	cmp	r3, #0
   2a9a4:	d005      	beq.n	2a9b2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a9a6:	68fb      	ldr	r3, [r7, #12]
   2a9a8:	3301      	adds	r3, #1
   2a9aa:	697a      	ldr	r2, [r7, #20]
   2a9ac:	40da      	lsrs	r2, r3
   2a9ae:	0013      	movs	r3, r2
   2a9b0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a9b2:	697b      	ldr	r3, [r7, #20]
}
   2a9b4:	0018      	movs	r0, r3
   2a9b6:	46bd      	mov	sp, r7
   2a9b8:	b006      	add	sp, #24
   2a9ba:	bd80      	pop	{r7, pc}
   2a9bc:	0002a735 	.word	0x0002a735
   2a9c0:	0002a70d 	.word	0x0002a70d
   2a9c4:	40000c04 	.word	0x40000c04
   2a9c8:	40000c00 	.word	0x40000c00
   2a9cc:	0002a065 	.word	0x0002a065
   2a9d0:	40000c08 	.word	0x40000c08
   2a9d4:	0002a721 	.word	0x0002a721
   2a9d8:	000336a5 	.word	0x000336a5

0002a9dc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a9dc:	b580      	push	{r7, lr}
   2a9de:	b084      	sub	sp, #16
   2a9e0:	af00      	add	r7, sp, #0
   2a9e2:	0002      	movs	r2, r0
   2a9e4:	6039      	str	r1, [r7, #0]
   2a9e6:	1dfb      	adds	r3, r7, #7
   2a9e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a9ea:	1dfb      	adds	r3, r7, #7
   2a9ec:	781b      	ldrb	r3, [r3, #0]
   2a9ee:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a9f0:	683b      	ldr	r3, [r7, #0]
   2a9f2:	781b      	ldrb	r3, [r3, #0]
   2a9f4:	021b      	lsls	r3, r3, #8
   2a9f6:	001a      	movs	r2, r3
   2a9f8:	68fb      	ldr	r3, [r7, #12]
   2a9fa:	4313      	orrs	r3, r2
   2a9fc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a9fe:	1dfb      	adds	r3, r7, #7
   2aa00:	781b      	ldrb	r3, [r3, #0]
   2aa02:	0018      	movs	r0, r3
   2aa04:	4b04      	ldr	r3, [pc, #16]	; (2aa18 <system_gclk_chan_set_config+0x3c>)
   2aa06:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2aa08:	4b04      	ldr	r3, [pc, #16]	; (2aa1c <system_gclk_chan_set_config+0x40>)
   2aa0a:	68fa      	ldr	r2, [r7, #12]
   2aa0c:	b292      	uxth	r2, r2
   2aa0e:	805a      	strh	r2, [r3, #2]
}
   2aa10:	46c0      	nop			; (mov r8, r8)
   2aa12:	46bd      	mov	sp, r7
   2aa14:	b004      	add	sp, #16
   2aa16:	bd80      	pop	{r7, pc}
   2aa18:	0002aa69 	.word	0x0002aa69
   2aa1c:	40000c00 	.word	0x40000c00

0002aa20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2aa20:	b580      	push	{r7, lr}
   2aa22:	b082      	sub	sp, #8
   2aa24:	af00      	add	r7, sp, #0
   2aa26:	0002      	movs	r2, r0
   2aa28:	1dfb      	adds	r3, r7, #7
   2aa2a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aa2c:	4b0a      	ldr	r3, [pc, #40]	; (2aa58 <system_gclk_chan_enable+0x38>)
   2aa2e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aa30:	4a0a      	ldr	r2, [pc, #40]	; (2aa5c <system_gclk_chan_enable+0x3c>)
   2aa32:	1dfb      	adds	r3, r7, #7
   2aa34:	781b      	ldrb	r3, [r3, #0]
   2aa36:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2aa38:	4909      	ldr	r1, [pc, #36]	; (2aa60 <system_gclk_chan_enable+0x40>)
   2aa3a:	4b09      	ldr	r3, [pc, #36]	; (2aa60 <system_gclk_chan_enable+0x40>)
   2aa3c:	885b      	ldrh	r3, [r3, #2]
   2aa3e:	b29b      	uxth	r3, r3
   2aa40:	2280      	movs	r2, #128	; 0x80
   2aa42:	01d2      	lsls	r2, r2, #7
   2aa44:	4313      	orrs	r3, r2
   2aa46:	b29b      	uxth	r3, r3
   2aa48:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2aa4a:	4b06      	ldr	r3, [pc, #24]	; (2aa64 <system_gclk_chan_enable+0x44>)
   2aa4c:	4798      	blx	r3
}
   2aa4e:	46c0      	nop			; (mov r8, r8)
   2aa50:	46bd      	mov	sp, r7
   2aa52:	b002      	add	sp, #8
   2aa54:	bd80      	pop	{r7, pc}
   2aa56:	46c0      	nop			; (mov r8, r8)
   2aa58:	0002a70d 	.word	0x0002a70d
   2aa5c:	40000c02 	.word	0x40000c02
   2aa60:	40000c00 	.word	0x40000c00
   2aa64:	0002a721 	.word	0x0002a721

0002aa68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2aa68:	b580      	push	{r7, lr}
   2aa6a:	b084      	sub	sp, #16
   2aa6c:	af00      	add	r7, sp, #0
   2aa6e:	0002      	movs	r2, r0
   2aa70:	1dfb      	adds	r3, r7, #7
   2aa72:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aa74:	4b1c      	ldr	r3, [pc, #112]	; (2aae8 <system_gclk_chan_disable+0x80>)
   2aa76:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aa78:	4a1c      	ldr	r2, [pc, #112]	; (2aaec <system_gclk_chan_disable+0x84>)
   2aa7a:	1dfb      	adds	r3, r7, #7
   2aa7c:	781b      	ldrb	r3, [r3, #0]
   2aa7e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2aa80:	4b1b      	ldr	r3, [pc, #108]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aa82:	885b      	ldrh	r3, [r3, #2]
   2aa84:	051b      	lsls	r3, r3, #20
   2aa86:	0f1b      	lsrs	r3, r3, #28
   2aa88:	b2db      	uxtb	r3, r3
   2aa8a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2aa8c:	4a18      	ldr	r2, [pc, #96]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aa8e:	8853      	ldrh	r3, [r2, #2]
   2aa90:	4918      	ldr	r1, [pc, #96]	; (2aaf4 <system_gclk_chan_disable+0x8c>)
   2aa92:	400b      	ands	r3, r1
   2aa94:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2aa96:	4a16      	ldr	r2, [pc, #88]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aa98:	4b15      	ldr	r3, [pc, #84]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aa9a:	885b      	ldrh	r3, [r3, #2]
   2aa9c:	b29b      	uxth	r3, r3
   2aa9e:	4916      	ldr	r1, [pc, #88]	; (2aaf8 <system_gclk_chan_disable+0x90>)
   2aaa0:	400b      	ands	r3, r1
   2aaa2:	b29b      	uxth	r3, r3
   2aaa4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2aaa6:	46c0      	nop			; (mov r8, r8)
   2aaa8:	4b11      	ldr	r3, [pc, #68]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aaaa:	885b      	ldrh	r3, [r3, #2]
   2aaac:	b29b      	uxth	r3, r3
   2aaae:	001a      	movs	r2, r3
   2aab0:	2380      	movs	r3, #128	; 0x80
   2aab2:	01db      	lsls	r3, r3, #7
   2aab4:	4013      	ands	r3, r2
   2aab6:	d1f7      	bne.n	2aaa8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2aab8:	4a0d      	ldr	r2, [pc, #52]	; (2aaf0 <system_gclk_chan_disable+0x88>)
   2aaba:	68fb      	ldr	r3, [r7, #12]
   2aabc:	b2db      	uxtb	r3, r3
   2aabe:	1c19      	adds	r1, r3, #0
   2aac0:	230f      	movs	r3, #15
   2aac2:	400b      	ands	r3, r1
   2aac4:	b2d9      	uxtb	r1, r3
   2aac6:	8853      	ldrh	r3, [r2, #2]
   2aac8:	1c08      	adds	r0, r1, #0
   2aaca:	210f      	movs	r1, #15
   2aacc:	4001      	ands	r1, r0
   2aace:	0208      	lsls	r0, r1, #8
   2aad0:	4908      	ldr	r1, [pc, #32]	; (2aaf4 <system_gclk_chan_disable+0x8c>)
   2aad2:	400b      	ands	r3, r1
   2aad4:	1c19      	adds	r1, r3, #0
   2aad6:	1c03      	adds	r3, r0, #0
   2aad8:	430b      	orrs	r3, r1
   2aada:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2aadc:	4b07      	ldr	r3, [pc, #28]	; (2aafc <system_gclk_chan_disable+0x94>)
   2aade:	4798      	blx	r3
}
   2aae0:	46c0      	nop			; (mov r8, r8)
   2aae2:	46bd      	mov	sp, r7
   2aae4:	b004      	add	sp, #16
   2aae6:	bd80      	pop	{r7, pc}
   2aae8:	0002a70d 	.word	0x0002a70d
   2aaec:	40000c02 	.word	0x40000c02
   2aaf0:	40000c00 	.word	0x40000c00
   2aaf4:	fffff0ff 	.word	0xfffff0ff
   2aaf8:	ffffbfff 	.word	0xffffbfff
   2aafc:	0002a721 	.word	0x0002a721

0002ab00 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2ab00:	b580      	push	{r7, lr}
   2ab02:	b084      	sub	sp, #16
   2ab04:	af00      	add	r7, sp, #0
   2ab06:	0002      	movs	r2, r0
   2ab08:	1dfb      	adds	r3, r7, #7
   2ab0a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2ab0c:	4b0d      	ldr	r3, [pc, #52]	; (2ab44 <system_gclk_chan_get_hz+0x44>)
   2ab0e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ab10:	4a0d      	ldr	r2, [pc, #52]	; (2ab48 <system_gclk_chan_get_hz+0x48>)
   2ab12:	1dfb      	adds	r3, r7, #7
   2ab14:	781b      	ldrb	r3, [r3, #0]
   2ab16:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2ab18:	4b0c      	ldr	r3, [pc, #48]	; (2ab4c <system_gclk_chan_get_hz+0x4c>)
   2ab1a:	885b      	ldrh	r3, [r3, #2]
   2ab1c:	051b      	lsls	r3, r3, #20
   2ab1e:	0f1b      	lsrs	r3, r3, #28
   2ab20:	b2da      	uxtb	r2, r3
   2ab22:	230f      	movs	r3, #15
   2ab24:	18fb      	adds	r3, r7, r3
   2ab26:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2ab28:	4b09      	ldr	r3, [pc, #36]	; (2ab50 <system_gclk_chan_get_hz+0x50>)
   2ab2a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2ab2c:	230f      	movs	r3, #15
   2ab2e:	18fb      	adds	r3, r7, r3
   2ab30:	781b      	ldrb	r3, [r3, #0]
   2ab32:	0018      	movs	r0, r3
   2ab34:	4b07      	ldr	r3, [pc, #28]	; (2ab54 <system_gclk_chan_get_hz+0x54>)
   2ab36:	4798      	blx	r3
   2ab38:	0003      	movs	r3, r0
}
   2ab3a:	0018      	movs	r0, r3
   2ab3c:	46bd      	mov	sp, r7
   2ab3e:	b004      	add	sp, #16
   2ab40:	bd80      	pop	{r7, pc}
   2ab42:	46c0      	nop			; (mov r8, r8)
   2ab44:	0002a70d 	.word	0x0002a70d
   2ab48:	40000c02 	.word	0x40000c02
   2ab4c:	40000c00 	.word	0x40000c00
   2ab50:	0002a721 	.word	0x0002a721
   2ab54:	0002a905 	.word	0x0002a905

0002ab58 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2ab58:	b580      	push	{r7, lr}
   2ab5a:	b084      	sub	sp, #16
   2ab5c:	af00      	add	r7, sp, #0
   2ab5e:	0002      	movs	r2, r0
   2ab60:	1dfb      	adds	r3, r7, #7
   2ab62:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ab64:	230f      	movs	r3, #15
   2ab66:	18fb      	adds	r3, r7, r3
   2ab68:	2200      	movs	r2, #0
   2ab6a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ab6c:	1dfb      	adds	r3, r7, #7
   2ab6e:	781b      	ldrb	r3, [r3, #0]
   2ab70:	2b7f      	cmp	r3, #127	; 0x7f
   2ab72:	d80b      	bhi.n	2ab8c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ab74:	4a13      	ldr	r2, [pc, #76]	; (2abc4 <system_interrupt_clear_pending+0x6c>)
   2ab76:	1dfb      	adds	r3, r7, #7
   2ab78:	781b      	ldrb	r3, [r3, #0]
   2ab7a:	b25b      	sxtb	r3, r3
   2ab7c:	2101      	movs	r1, #1
   2ab7e:	4099      	lsls	r1, r3
   2ab80:	000b      	movs	r3, r1
   2ab82:	0019      	movs	r1, r3
   2ab84:	23c0      	movs	r3, #192	; 0xc0
   2ab86:	005b      	lsls	r3, r3, #1
   2ab88:	50d1      	str	r1, [r2, r3]
   2ab8a:	e014      	b.n	2abb6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ab8c:	1dfb      	adds	r3, r7, #7
   2ab8e:	781b      	ldrb	r3, [r3, #0]
   2ab90:	b25b      	sxtb	r3, r3
   2ab92:	330e      	adds	r3, #14
   2ab94:	d101      	bne.n	2ab9a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ab96:	2317      	movs	r3, #23
   2ab98:	e010      	b.n	2abbc <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ab9a:	1dfb      	adds	r3, r7, #7
   2ab9c:	781b      	ldrb	r3, [r3, #0]
   2ab9e:	b25b      	sxtb	r3, r3
   2aba0:	3301      	adds	r3, #1
   2aba2:	d104      	bne.n	2abae <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2aba4:	4b08      	ldr	r3, [pc, #32]	; (2abc8 <system_interrupt_clear_pending+0x70>)
   2aba6:	2280      	movs	r2, #128	; 0x80
   2aba8:	0492      	lsls	r2, r2, #18
   2abaa:	605a      	str	r2, [r3, #4]
   2abac:	e003      	b.n	2abb6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2abae:	230f      	movs	r3, #15
   2abb0:	18fb      	adds	r3, r7, r3
   2abb2:	2217      	movs	r2, #23
   2abb4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2abb6:	230f      	movs	r3, #15
   2abb8:	18fb      	adds	r3, r7, r3
   2abba:	781b      	ldrb	r3, [r3, #0]
}
   2abbc:	0018      	movs	r0, r3
   2abbe:	46bd      	mov	sp, r7
   2abc0:	b004      	add	sp, #16
   2abc2:	bd80      	pop	{r7, pc}
   2abc4:	e000e100 	.word	0xe000e100
   2abc8:	e000ed00 	.word	0xe000ed00

0002abcc <system_pinmux_get_group_from_gpio_pin>:
{
   2abcc:	b580      	push	{r7, lr}
   2abce:	b084      	sub	sp, #16
   2abd0:	af00      	add	r7, sp, #0
   2abd2:	0002      	movs	r2, r0
   2abd4:	1dfb      	adds	r3, r7, #7
   2abd6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2abd8:	230f      	movs	r3, #15
   2abda:	18fb      	adds	r3, r7, r3
   2abdc:	1dfa      	adds	r2, r7, #7
   2abde:	7812      	ldrb	r2, [r2, #0]
   2abe0:	09d2      	lsrs	r2, r2, #7
   2abe2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2abe4:	230e      	movs	r3, #14
   2abe6:	18fb      	adds	r3, r7, r3
   2abe8:	1dfa      	adds	r2, r7, #7
   2abea:	7812      	ldrb	r2, [r2, #0]
   2abec:	0952      	lsrs	r2, r2, #5
   2abee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2abf0:	4b0d      	ldr	r3, [pc, #52]	; (2ac28 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2abf2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2abf4:	230f      	movs	r3, #15
   2abf6:	18fb      	adds	r3, r7, r3
   2abf8:	781b      	ldrb	r3, [r3, #0]
   2abfa:	2b00      	cmp	r3, #0
   2abfc:	d10f      	bne.n	2ac1e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2abfe:	230f      	movs	r3, #15
   2ac00:	18fb      	adds	r3, r7, r3
   2ac02:	781b      	ldrb	r3, [r3, #0]
   2ac04:	009b      	lsls	r3, r3, #2
   2ac06:	2210      	movs	r2, #16
   2ac08:	4694      	mov	ip, r2
   2ac0a:	44bc      	add	ip, r7
   2ac0c:	4463      	add	r3, ip
   2ac0e:	3b08      	subs	r3, #8
   2ac10:	681a      	ldr	r2, [r3, #0]
   2ac12:	230e      	movs	r3, #14
   2ac14:	18fb      	adds	r3, r7, r3
   2ac16:	781b      	ldrb	r3, [r3, #0]
   2ac18:	01db      	lsls	r3, r3, #7
   2ac1a:	18d3      	adds	r3, r2, r3
   2ac1c:	e000      	b.n	2ac20 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2ac1e:	2300      	movs	r3, #0
}
   2ac20:	0018      	movs	r0, r3
   2ac22:	46bd      	mov	sp, r7
   2ac24:	b004      	add	sp, #16
   2ac26:	bd80      	pop	{r7, pc}
   2ac28:	41004400 	.word	0x41004400

0002ac2c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2ac2c:	b580      	push	{r7, lr}
   2ac2e:	b088      	sub	sp, #32
   2ac30:	af00      	add	r7, sp, #0
   2ac32:	60f8      	str	r0, [r7, #12]
   2ac34:	60b9      	str	r1, [r7, #8]
   2ac36:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2ac38:	2300      	movs	r3, #0
   2ac3a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2ac3c:	687b      	ldr	r3, [r7, #4]
   2ac3e:	78db      	ldrb	r3, [r3, #3]
   2ac40:	2201      	movs	r2, #1
   2ac42:	4053      	eors	r3, r2
   2ac44:	b2db      	uxtb	r3, r3
   2ac46:	2b00      	cmp	r3, #0
   2ac48:	d035      	beq.n	2acb6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2ac4a:	687b      	ldr	r3, [r7, #4]
   2ac4c:	781b      	ldrb	r3, [r3, #0]
   2ac4e:	2b80      	cmp	r3, #128	; 0x80
   2ac50:	d00b      	beq.n	2ac6a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2ac52:	69fb      	ldr	r3, [r7, #28]
   2ac54:	2280      	movs	r2, #128	; 0x80
   2ac56:	0252      	lsls	r2, r2, #9
   2ac58:	4313      	orrs	r3, r2
   2ac5a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2ac5c:	687b      	ldr	r3, [r7, #4]
   2ac5e:	781b      	ldrb	r3, [r3, #0]
   2ac60:	061b      	lsls	r3, r3, #24
   2ac62:	001a      	movs	r2, r3
   2ac64:	69fb      	ldr	r3, [r7, #28]
   2ac66:	4313      	orrs	r3, r2
   2ac68:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ac6a:	687b      	ldr	r3, [r7, #4]
   2ac6c:	785b      	ldrb	r3, [r3, #1]
   2ac6e:	2b00      	cmp	r3, #0
   2ac70:	d003      	beq.n	2ac7a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ac72:	687b      	ldr	r3, [r7, #4]
   2ac74:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ac76:	2b02      	cmp	r3, #2
   2ac78:	d110      	bne.n	2ac9c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2ac7a:	69fb      	ldr	r3, [r7, #28]
   2ac7c:	2280      	movs	r2, #128	; 0x80
   2ac7e:	0292      	lsls	r2, r2, #10
   2ac80:	4313      	orrs	r3, r2
   2ac82:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	789b      	ldrb	r3, [r3, #2]
   2ac88:	2b00      	cmp	r3, #0
   2ac8a:	d004      	beq.n	2ac96 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2ac8c:	69fb      	ldr	r3, [r7, #28]
   2ac8e:	2280      	movs	r2, #128	; 0x80
   2ac90:	02d2      	lsls	r2, r2, #11
   2ac92:	4313      	orrs	r3, r2
   2ac94:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2ac96:	68fb      	ldr	r3, [r7, #12]
   2ac98:	68ba      	ldr	r2, [r7, #8]
   2ac9a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ac9c:	687b      	ldr	r3, [r7, #4]
   2ac9e:	785b      	ldrb	r3, [r3, #1]
   2aca0:	2b01      	cmp	r3, #1
   2aca2:	d003      	beq.n	2acac <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2aca4:	687b      	ldr	r3, [r7, #4]
   2aca6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2aca8:	2b02      	cmp	r3, #2
   2acaa:	d107      	bne.n	2acbc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2acac:	69fb      	ldr	r3, [r7, #28]
   2acae:	4a22      	ldr	r2, [pc, #136]	; (2ad38 <_system_pinmux_config+0x10c>)
   2acb0:	4013      	ands	r3, r2
   2acb2:	61fb      	str	r3, [r7, #28]
   2acb4:	e002      	b.n	2acbc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2acb6:	68fb      	ldr	r3, [r7, #12]
   2acb8:	68ba      	ldr	r2, [r7, #8]
   2acba:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2acbc:	68bb      	ldr	r3, [r7, #8]
   2acbe:	041b      	lsls	r3, r3, #16
   2acc0:	0c1b      	lsrs	r3, r3, #16
   2acc2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2acc4:	68bb      	ldr	r3, [r7, #8]
   2acc6:	0c1b      	lsrs	r3, r3, #16
   2acc8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2acca:	69ba      	ldr	r2, [r7, #24]
   2accc:	69fb      	ldr	r3, [r7, #28]
   2acce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2acd0:	22a0      	movs	r2, #160	; 0xa0
   2acd2:	05d2      	lsls	r2, r2, #23
   2acd4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2acd6:	68fb      	ldr	r3, [r7, #12]
   2acd8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2acda:	697a      	ldr	r2, [r7, #20]
   2acdc:	69fb      	ldr	r3, [r7, #28]
   2acde:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2ace0:	22d0      	movs	r2, #208	; 0xd0
   2ace2:	0612      	lsls	r2, r2, #24
   2ace4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ace6:	68fb      	ldr	r3, [r7, #12]
   2ace8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2acea:	687b      	ldr	r3, [r7, #4]
   2acec:	78db      	ldrb	r3, [r3, #3]
   2acee:	2201      	movs	r2, #1
   2acf0:	4053      	eors	r3, r2
   2acf2:	b2db      	uxtb	r3, r3
   2acf4:	2b00      	cmp	r3, #0
   2acf6:	d01a      	beq.n	2ad2e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2acf8:	69fa      	ldr	r2, [r7, #28]
   2acfa:	2380      	movs	r3, #128	; 0x80
   2acfc:	02db      	lsls	r3, r3, #11
   2acfe:	4013      	ands	r3, r2
   2ad00:	d00a      	beq.n	2ad18 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2ad02:	687b      	ldr	r3, [r7, #4]
   2ad04:	789b      	ldrb	r3, [r3, #2]
   2ad06:	2b01      	cmp	r3, #1
   2ad08:	d103      	bne.n	2ad12 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2ad0a:	68fb      	ldr	r3, [r7, #12]
   2ad0c:	68ba      	ldr	r2, [r7, #8]
   2ad0e:	619a      	str	r2, [r3, #24]
   2ad10:	e002      	b.n	2ad18 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2ad12:	68fb      	ldr	r3, [r7, #12]
   2ad14:	68ba      	ldr	r2, [r7, #8]
   2ad16:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad18:	687b      	ldr	r3, [r7, #4]
   2ad1a:	785b      	ldrb	r3, [r3, #1]
   2ad1c:	2b01      	cmp	r3, #1
   2ad1e:	d003      	beq.n	2ad28 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ad20:	687b      	ldr	r3, [r7, #4]
   2ad22:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad24:	2b02      	cmp	r3, #2
   2ad26:	d102      	bne.n	2ad2e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2ad28:	68fb      	ldr	r3, [r7, #12]
   2ad2a:	68ba      	ldr	r2, [r7, #8]
   2ad2c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2ad2e:	46c0      	nop			; (mov r8, r8)
   2ad30:	46bd      	mov	sp, r7
   2ad32:	b008      	add	sp, #32
   2ad34:	bd80      	pop	{r7, pc}
   2ad36:	46c0      	nop			; (mov r8, r8)
   2ad38:	fffbffff 	.word	0xfffbffff

0002ad3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2ad3c:	b580      	push	{r7, lr}
   2ad3e:	b084      	sub	sp, #16
   2ad40:	af00      	add	r7, sp, #0
   2ad42:	0002      	movs	r2, r0
   2ad44:	6039      	str	r1, [r7, #0]
   2ad46:	1dfb      	adds	r3, r7, #7
   2ad48:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2ad4a:	1dfb      	adds	r3, r7, #7
   2ad4c:	781b      	ldrb	r3, [r3, #0]
   2ad4e:	0018      	movs	r0, r3
   2ad50:	4b0a      	ldr	r3, [pc, #40]	; (2ad7c <system_pinmux_pin_set_config+0x40>)
   2ad52:	4798      	blx	r3
   2ad54:	0003      	movs	r3, r0
   2ad56:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2ad58:	1dfb      	adds	r3, r7, #7
   2ad5a:	781b      	ldrb	r3, [r3, #0]
   2ad5c:	221f      	movs	r2, #31
   2ad5e:	4013      	ands	r3, r2
   2ad60:	2201      	movs	r2, #1
   2ad62:	409a      	lsls	r2, r3
   2ad64:	0013      	movs	r3, r2
   2ad66:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2ad68:	683a      	ldr	r2, [r7, #0]
   2ad6a:	68b9      	ldr	r1, [r7, #8]
   2ad6c:	68fb      	ldr	r3, [r7, #12]
   2ad6e:	0018      	movs	r0, r3
   2ad70:	4b03      	ldr	r3, [pc, #12]	; (2ad80 <system_pinmux_pin_set_config+0x44>)
   2ad72:	4798      	blx	r3
}
   2ad74:	46c0      	nop			; (mov r8, r8)
   2ad76:	46bd      	mov	sp, r7
   2ad78:	b004      	add	sp, #16
   2ad7a:	bd80      	pop	{r7, pc}
   2ad7c:	0002abcd 	.word	0x0002abcd
   2ad80:	0002ac2d 	.word	0x0002ac2d

0002ad84 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2ad84:	b580      	push	{r7, lr}
   2ad86:	af00      	add	r7, sp, #0
	return;
   2ad88:	46c0      	nop			; (mov r8, r8)
}
   2ad8a:	46bd      	mov	sp, r7
   2ad8c:	bd80      	pop	{r7, pc}
	...

0002ad90 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2ad90:	b580      	push	{r7, lr}
   2ad92:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2ad94:	4b06      	ldr	r3, [pc, #24]	; (2adb0 <system_init+0x20>)
   2ad96:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2ad98:	4b06      	ldr	r3, [pc, #24]	; (2adb4 <system_init+0x24>)
   2ad9a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2ad9c:	4b06      	ldr	r3, [pc, #24]	; (2adb8 <system_init+0x28>)
   2ad9e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2ada0:	4b06      	ldr	r3, [pc, #24]	; (2adbc <system_init+0x2c>)
   2ada2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2ada4:	4b06      	ldr	r3, [pc, #24]	; (2adc0 <system_init+0x30>)
   2ada6:	4798      	blx	r3
}
   2ada8:	46c0      	nop			; (mov r8, r8)
   2adaa:	46bd      	mov	sp, r7
   2adac:	bd80      	pop	{r7, pc}
   2adae:	46c0      	nop			; (mov r8, r8)
   2adb0:	0002a411 	.word	0x0002a411
   2adb4:	00026ed9 	.word	0x00026ed9
   2adb8:	00013011 	.word	0x00013011
   2adbc:	000272b1 	.word	0x000272b1
   2adc0:	0002ad85 	.word	0x0002ad85

0002adc4 <system_gclk_chan_get_config_defaults>:
{
   2adc4:	b580      	push	{r7, lr}
   2adc6:	b082      	sub	sp, #8
   2adc8:	af00      	add	r7, sp, #0
   2adca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2adcc:	687b      	ldr	r3, [r7, #4]
   2adce:	2200      	movs	r2, #0
   2add0:	701a      	strb	r2, [r3, #0]
}
   2add2:	46c0      	nop			; (mov r8, r8)
   2add4:	46bd      	mov	sp, r7
   2add6:	b002      	add	sp, #8
   2add8:	bd80      	pop	{r7, pc}
	...

0002addc <system_apb_clock_set_mask>:
{
   2addc:	b580      	push	{r7, lr}
   2adde:	b082      	sub	sp, #8
   2ade0:	af00      	add	r7, sp, #0
   2ade2:	0002      	movs	r2, r0
   2ade4:	6039      	str	r1, [r7, #0]
   2ade6:	1dfb      	adds	r3, r7, #7
   2ade8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2adea:	1dfb      	adds	r3, r7, #7
   2adec:	781b      	ldrb	r3, [r3, #0]
   2adee:	2b01      	cmp	r3, #1
   2adf0:	d00a      	beq.n	2ae08 <system_apb_clock_set_mask+0x2c>
   2adf2:	2b02      	cmp	r3, #2
   2adf4:	d00f      	beq.n	2ae16 <system_apb_clock_set_mask+0x3a>
   2adf6:	2b00      	cmp	r3, #0
   2adf8:	d114      	bne.n	2ae24 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2adfa:	4b0e      	ldr	r3, [pc, #56]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2adfc:	4a0d      	ldr	r2, [pc, #52]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2adfe:	6991      	ldr	r1, [r2, #24]
   2ae00:	683a      	ldr	r2, [r7, #0]
   2ae02:	430a      	orrs	r2, r1
   2ae04:	619a      	str	r2, [r3, #24]
			break;
   2ae06:	e00f      	b.n	2ae28 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2ae08:	4b0a      	ldr	r3, [pc, #40]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2ae0a:	4a0a      	ldr	r2, [pc, #40]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2ae0c:	69d1      	ldr	r1, [r2, #28]
   2ae0e:	683a      	ldr	r2, [r7, #0]
   2ae10:	430a      	orrs	r2, r1
   2ae12:	61da      	str	r2, [r3, #28]
			break;
   2ae14:	e008      	b.n	2ae28 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2ae16:	4b07      	ldr	r3, [pc, #28]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2ae18:	4a06      	ldr	r2, [pc, #24]	; (2ae34 <system_apb_clock_set_mask+0x58>)
   2ae1a:	6a11      	ldr	r1, [r2, #32]
   2ae1c:	683a      	ldr	r2, [r7, #0]
   2ae1e:	430a      	orrs	r2, r1
   2ae20:	621a      	str	r2, [r3, #32]
			break;
   2ae22:	e001      	b.n	2ae28 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2ae24:	2317      	movs	r3, #23
   2ae26:	e000      	b.n	2ae2a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2ae28:	2300      	movs	r3, #0
}
   2ae2a:	0018      	movs	r0, r3
   2ae2c:	46bd      	mov	sp, r7
   2ae2e:	b002      	add	sp, #8
   2ae30:	bd80      	pop	{r7, pc}
   2ae32:	46c0      	nop			; (mov r8, r8)
   2ae34:	40000400 	.word	0x40000400

0002ae38 <system_pinmux_get_config_defaults>:
{
   2ae38:	b580      	push	{r7, lr}
   2ae3a:	b082      	sub	sp, #8
   2ae3c:	af00      	add	r7, sp, #0
   2ae3e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2ae40:	687b      	ldr	r3, [r7, #4]
   2ae42:	2280      	movs	r2, #128	; 0x80
   2ae44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2ae46:	687b      	ldr	r3, [r7, #4]
   2ae48:	2200      	movs	r2, #0
   2ae4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2ae4c:	687b      	ldr	r3, [r7, #4]
   2ae4e:	2201      	movs	r2, #1
   2ae50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2ae52:	687b      	ldr	r3, [r7, #4]
   2ae54:	2200      	movs	r2, #0
   2ae56:	70da      	strb	r2, [r3, #3]
}
   2ae58:	46c0      	nop			; (mov r8, r8)
   2ae5a:	46bd      	mov	sp, r7
   2ae5c:	b002      	add	sp, #8
   2ae5e:	bd80      	pop	{r7, pc}

0002ae60 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2ae60:	b580      	push	{r7, lr}
   2ae62:	b084      	sub	sp, #16
   2ae64:	af00      	add	r7, sp, #0
   2ae66:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2ae68:	2300      	movs	r3, #0
   2ae6a:	60fb      	str	r3, [r7, #12]
   2ae6c:	e00c      	b.n	2ae88 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2ae6e:	4b0a      	ldr	r3, [pc, #40]	; (2ae98 <_tcc_get_inst_index+0x38>)
   2ae70:	68fa      	ldr	r2, [r7, #12]
   2ae72:	0092      	lsls	r2, r2, #2
   2ae74:	58d2      	ldr	r2, [r2, r3]
   2ae76:	687b      	ldr	r3, [r7, #4]
   2ae78:	429a      	cmp	r2, r3
   2ae7a:	d102      	bne.n	2ae82 <_tcc_get_inst_index+0x22>
			return i;
   2ae7c:	68fb      	ldr	r3, [r7, #12]
   2ae7e:	b2db      	uxtb	r3, r3
   2ae80:	e006      	b.n	2ae90 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2ae82:	68fb      	ldr	r3, [r7, #12]
   2ae84:	3301      	adds	r3, #1
   2ae86:	60fb      	str	r3, [r7, #12]
   2ae88:	68fb      	ldr	r3, [r7, #12]
   2ae8a:	2b02      	cmp	r3, #2
   2ae8c:	d9ef      	bls.n	2ae6e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2ae8e:	2300      	movs	r3, #0
}
   2ae90:	0018      	movs	r0, r3
   2ae92:	46bd      	mov	sp, r7
   2ae94:	b004      	add	sp, #16
   2ae96:	bd80      	pop	{r7, pc}
   2ae98:	0003afb8 	.word	0x0003afb8

0002ae9c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2ae9c:	b590      	push	{r4, r7, lr}
   2ae9e:	b085      	sub	sp, #20
   2aea0:	af00      	add	r7, sp, #0
   2aea2:	6078      	str	r0, [r7, #4]
   2aea4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2aea6:	230f      	movs	r3, #15
   2aea8:	18fc      	adds	r4, r7, r3
   2aeaa:	683b      	ldr	r3, [r7, #0]
   2aeac:	0018      	movs	r0, r3
   2aeae:	4bad      	ldr	r3, [pc, #692]	; (2b164 <tcc_get_config_defaults+0x2c8>)
   2aeb0:	4798      	blx	r3
   2aeb2:	0003      	movs	r3, r0
   2aeb4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2aeb6:	687b      	ldr	r3, [r7, #4]
   2aeb8:	2200      	movs	r2, #0
   2aeba:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2aebc:	230f      	movs	r3, #15
   2aebe:	18fb      	adds	r3, r7, r3
   2aec0:	781a      	ldrb	r2, [r3, #0]
   2aec2:	4ba9      	ldr	r3, [pc, #676]	; (2b168 <tcc_get_config_defaults+0x2cc>)
   2aec4:	0092      	lsls	r2, r2, #2
   2aec6:	58d2      	ldr	r2, [r2, r3]
   2aec8:	687b      	ldr	r3, [r7, #4]
   2aeca:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2aecc:	687b      	ldr	r3, [r7, #4]
   2aece:	2200      	movs	r2, #0
   2aed0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2aed2:	687b      	ldr	r3, [r7, #4]
   2aed4:	2200      	movs	r2, #0
   2aed6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2aed8:	687b      	ldr	r3, [r7, #4]
   2aeda:	2200      	movs	r2, #0
   2aedc:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2aede:	687b      	ldr	r3, [r7, #4]
   2aee0:	2200      	movs	r2, #0
   2aee2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2aee4:	687b      	ldr	r3, [r7, #4]
   2aee6:	2200      	movs	r2, #0
   2aee8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2aeea:	687b      	ldr	r3, [r7, #4]
   2aeec:	2200      	movs	r2, #0
   2aeee:	61da      	str	r2, [r3, #28]
   2aef0:	687b      	ldr	r3, [r7, #4]
   2aef2:	2200      	movs	r2, #0
   2aef4:	621a      	str	r2, [r3, #32]
   2aef6:	687b      	ldr	r3, [r7, #4]
   2aef8:	2200      	movs	r2, #0
   2aefa:	625a      	str	r2, [r3, #36]	; 0x24
   2aefc:	687b      	ldr	r3, [r7, #4]
   2aefe:	2200      	movs	r2, #0
   2af00:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af02:	687b      	ldr	r3, [r7, #4]
   2af04:	2200      	movs	r2, #0
   2af06:	751a      	strb	r2, [r3, #20]
   2af08:	687b      	ldr	r3, [r7, #4]
   2af0a:	2200      	movs	r2, #0
   2af0c:	755a      	strb	r2, [r3, #21]
   2af0e:	687b      	ldr	r3, [r7, #4]
   2af10:	2200      	movs	r2, #0
   2af12:	759a      	strb	r2, [r3, #22]
   2af14:	687b      	ldr	r3, [r7, #4]
   2af16:	2200      	movs	r2, #0
   2af18:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2af1a:	687b      	ldr	r3, [r7, #4]
   2af1c:	2200      	movs	r2, #0
   2af1e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2af20:	687b      	ldr	r3, [r7, #4]
   2af22:	2200      	movs	r2, #0
   2af24:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	2200      	movs	r2, #0
   2af2a:	741a      	strb	r2, [r3, #16]
   2af2c:	687b      	ldr	r3, [r7, #4]
   2af2e:	2200      	movs	r2, #0
   2af30:	745a      	strb	r2, [r3, #17]
   2af32:	687b      	ldr	r3, [r7, #4]
   2af34:	2200      	movs	r2, #0
   2af36:	749a      	strb	r2, [r3, #18]
   2af38:	687b      	ldr	r3, [r7, #4]
   2af3a:	2200      	movs	r2, #0
   2af3c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2af3e:	687b      	ldr	r3, [r7, #4]
   2af40:	222c      	movs	r2, #44	; 0x2c
   2af42:	2100      	movs	r1, #0
   2af44:	5499      	strb	r1, [r3, r2]
   2af46:	687b      	ldr	r3, [r7, #4]
   2af48:	222d      	movs	r2, #45	; 0x2d
   2af4a:	2100      	movs	r1, #0
   2af4c:	5499      	strb	r1, [r3, r2]
   2af4e:	687b      	ldr	r3, [r7, #4]
   2af50:	222e      	movs	r2, #46	; 0x2e
   2af52:	2100      	movs	r1, #0
   2af54:	5499      	strb	r1, [r3, r2]
   2af56:	687b      	ldr	r3, [r7, #4]
   2af58:	222f      	movs	r2, #47	; 0x2f
   2af5a:	2100      	movs	r1, #0
   2af5c:	5499      	strb	r1, [r3, r2]
   2af5e:	687b      	ldr	r3, [r7, #4]
   2af60:	2230      	movs	r2, #48	; 0x30
   2af62:	2100      	movs	r1, #0
   2af64:	5499      	strb	r1, [r3, r2]
   2af66:	687b      	ldr	r3, [r7, #4]
   2af68:	2231      	movs	r2, #49	; 0x31
   2af6a:	2100      	movs	r1, #0
   2af6c:	5499      	strb	r1, [r3, r2]
   2af6e:	687b      	ldr	r3, [r7, #4]
   2af70:	2232      	movs	r2, #50	; 0x32
   2af72:	2100      	movs	r1, #0
   2af74:	5499      	strb	r1, [r3, r2]
   2af76:	687b      	ldr	r3, [r7, #4]
   2af78:	2233      	movs	r2, #51	; 0x33
   2af7a:	2100      	movs	r1, #0
   2af7c:	5499      	strb	r1, [r3, r2]
   2af7e:	687b      	ldr	r3, [r7, #4]
   2af80:	2234      	movs	r2, #52	; 0x34
   2af82:	2100      	movs	r1, #0
   2af84:	5499      	strb	r1, [r3, r2]
   2af86:	687b      	ldr	r3, [r7, #4]
   2af88:	2235      	movs	r2, #53	; 0x35
   2af8a:	2100      	movs	r1, #0
   2af8c:	5499      	strb	r1, [r3, r2]
   2af8e:	687b      	ldr	r3, [r7, #4]
   2af90:	2236      	movs	r2, #54	; 0x36
   2af92:	2100      	movs	r1, #0
   2af94:	5499      	strb	r1, [r3, r2]
   2af96:	687b      	ldr	r3, [r7, #4]
   2af98:	2237      	movs	r2, #55	; 0x37
   2af9a:	2100      	movs	r1, #0
   2af9c:	5499      	strb	r1, [r3, r2]
   2af9e:	687b      	ldr	r3, [r7, #4]
   2afa0:	2238      	movs	r2, #56	; 0x38
   2afa2:	2100      	movs	r1, #0
   2afa4:	5499      	strb	r1, [r3, r2]
   2afa6:	687b      	ldr	r3, [r7, #4]
   2afa8:	2239      	movs	r2, #57	; 0x39
   2afaa:	2100      	movs	r1, #0
   2afac:	5499      	strb	r1, [r3, r2]
   2afae:	687b      	ldr	r3, [r7, #4]
   2afb0:	223a      	movs	r2, #58	; 0x3a
   2afb2:	2100      	movs	r1, #0
   2afb4:	5499      	strb	r1, [r3, r2]
   2afb6:	687b      	ldr	r3, [r7, #4]
   2afb8:	223b      	movs	r2, #59	; 0x3b
   2afba:	2100      	movs	r1, #0
   2afbc:	5499      	strb	r1, [r3, r2]
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	223c      	movs	r2, #60	; 0x3c
   2afc2:	2100      	movs	r1, #0
   2afc4:	5499      	strb	r1, [r3, r2]
   2afc6:	687b      	ldr	r3, [r7, #4]
   2afc8:	223d      	movs	r2, #61	; 0x3d
   2afca:	2100      	movs	r1, #0
   2afcc:	5499      	strb	r1, [r3, r2]
   2afce:	687b      	ldr	r3, [r7, #4]
   2afd0:	223e      	movs	r2, #62	; 0x3e
   2afd2:	2100      	movs	r1, #0
   2afd4:	5499      	strb	r1, [r3, r2]
   2afd6:	687b      	ldr	r3, [r7, #4]
   2afd8:	223f      	movs	r2, #63	; 0x3f
   2afda:	2100      	movs	r1, #0
   2afdc:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2afde:	687b      	ldr	r3, [r7, #4]
   2afe0:	2240      	movs	r2, #64	; 0x40
   2afe2:	2100      	movs	r1, #0
   2afe4:	5499      	strb	r1, [r3, r2]
   2afe6:	687b      	ldr	r3, [r7, #4]
   2afe8:	2241      	movs	r2, #65	; 0x41
   2afea:	2100      	movs	r1, #0
   2afec:	5499      	strb	r1, [r3, r2]
   2afee:	687b      	ldr	r3, [r7, #4]
   2aff0:	2242      	movs	r2, #66	; 0x42
   2aff2:	2100      	movs	r1, #0
   2aff4:	5499      	strb	r1, [r3, r2]
   2aff6:	687b      	ldr	r3, [r7, #4]
   2aff8:	2243      	movs	r2, #67	; 0x43
   2affa:	2100      	movs	r1, #0
   2affc:	5499      	strb	r1, [r3, r2]
   2affe:	687b      	ldr	r3, [r7, #4]
   2b000:	2244      	movs	r2, #68	; 0x44
   2b002:	2100      	movs	r1, #0
   2b004:	5499      	strb	r1, [r3, r2]
   2b006:	687b      	ldr	r3, [r7, #4]
   2b008:	2245      	movs	r2, #69	; 0x45
   2b00a:	2100      	movs	r1, #0
   2b00c:	5499      	strb	r1, [r3, r2]
   2b00e:	687b      	ldr	r3, [r7, #4]
   2b010:	2246      	movs	r2, #70	; 0x46
   2b012:	2100      	movs	r1, #0
   2b014:	5499      	strb	r1, [r3, r2]
   2b016:	687b      	ldr	r3, [r7, #4]
   2b018:	2247      	movs	r2, #71	; 0x47
   2b01a:	2100      	movs	r1, #0
   2b01c:	5499      	strb	r1, [r3, r2]
   2b01e:	687b      	ldr	r3, [r7, #4]
   2b020:	2248      	movs	r2, #72	; 0x48
   2b022:	2100      	movs	r1, #0
   2b024:	5499      	strb	r1, [r3, r2]
   2b026:	687b      	ldr	r3, [r7, #4]
   2b028:	2249      	movs	r2, #73	; 0x49
   2b02a:	2100      	movs	r1, #0
   2b02c:	5499      	strb	r1, [r3, r2]
   2b02e:	687b      	ldr	r3, [r7, #4]
   2b030:	224a      	movs	r2, #74	; 0x4a
   2b032:	2100      	movs	r1, #0
   2b034:	5499      	strb	r1, [r3, r2]
   2b036:	687b      	ldr	r3, [r7, #4]
   2b038:	224b      	movs	r2, #75	; 0x4b
   2b03a:	2100      	movs	r1, #0
   2b03c:	5499      	strb	r1, [r3, r2]
   2b03e:	687b      	ldr	r3, [r7, #4]
   2b040:	224c      	movs	r2, #76	; 0x4c
   2b042:	2100      	movs	r1, #0
   2b044:	5499      	strb	r1, [r3, r2]
   2b046:	687b      	ldr	r3, [r7, #4]
   2b048:	224d      	movs	r2, #77	; 0x4d
   2b04a:	2100      	movs	r1, #0
   2b04c:	5499      	strb	r1, [r3, r2]
   2b04e:	687b      	ldr	r3, [r7, #4]
   2b050:	224e      	movs	r2, #78	; 0x4e
   2b052:	2100      	movs	r1, #0
   2b054:	5499      	strb	r1, [r3, r2]
   2b056:	687b      	ldr	r3, [r7, #4]
   2b058:	224f      	movs	r2, #79	; 0x4f
   2b05a:	2100      	movs	r1, #0
   2b05c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b05e:	687b      	ldr	r3, [r7, #4]
   2b060:	2250      	movs	r2, #80	; 0x50
   2b062:	2100      	movs	r1, #0
   2b064:	5499      	strb	r1, [r3, r2]
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	2251      	movs	r2, #81	; 0x51
   2b06a:	2100      	movs	r1, #0
   2b06c:	5499      	strb	r1, [r3, r2]
   2b06e:	687b      	ldr	r3, [r7, #4]
   2b070:	2252      	movs	r2, #82	; 0x52
   2b072:	2100      	movs	r1, #0
   2b074:	5499      	strb	r1, [r3, r2]
   2b076:	687b      	ldr	r3, [r7, #4]
   2b078:	2253      	movs	r2, #83	; 0x53
   2b07a:	2100      	movs	r1, #0
   2b07c:	5499      	strb	r1, [r3, r2]
   2b07e:	687b      	ldr	r3, [r7, #4]
   2b080:	2254      	movs	r2, #84	; 0x54
   2b082:	2100      	movs	r1, #0
   2b084:	5499      	strb	r1, [r3, r2]
   2b086:	687b      	ldr	r3, [r7, #4]
   2b088:	2255      	movs	r2, #85	; 0x55
   2b08a:	2100      	movs	r1, #0
   2b08c:	5499      	strb	r1, [r3, r2]
   2b08e:	687b      	ldr	r3, [r7, #4]
   2b090:	2256      	movs	r2, #86	; 0x56
   2b092:	2100      	movs	r1, #0
   2b094:	5499      	strb	r1, [r3, r2]
   2b096:	687b      	ldr	r3, [r7, #4]
   2b098:	2257      	movs	r2, #87	; 0x57
   2b09a:	2100      	movs	r1, #0
   2b09c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b09e:	687b      	ldr	r3, [r7, #4]
   2b0a0:	2298      	movs	r2, #152	; 0x98
   2b0a2:	2100      	movs	r1, #0
   2b0a4:	5499      	strb	r1, [r3, r2]
   2b0a6:	687b      	ldr	r3, [r7, #4]
   2b0a8:	2200      	movs	r2, #0
   2b0aa:	659a      	str	r2, [r3, #88]	; 0x58
   2b0ac:	687b      	ldr	r3, [r7, #4]
   2b0ae:	2200      	movs	r2, #0
   2b0b0:	679a      	str	r2, [r3, #120]	; 0x78
   2b0b2:	687b      	ldr	r3, [r7, #4]
   2b0b4:	2299      	movs	r2, #153	; 0x99
   2b0b6:	2100      	movs	r1, #0
   2b0b8:	5499      	strb	r1, [r3, r2]
   2b0ba:	687b      	ldr	r3, [r7, #4]
   2b0bc:	2200      	movs	r2, #0
   2b0be:	65da      	str	r2, [r3, #92]	; 0x5c
   2b0c0:	687b      	ldr	r3, [r7, #4]
   2b0c2:	2200      	movs	r2, #0
   2b0c4:	67da      	str	r2, [r3, #124]	; 0x7c
   2b0c6:	687b      	ldr	r3, [r7, #4]
   2b0c8:	229a      	movs	r2, #154	; 0x9a
   2b0ca:	2100      	movs	r1, #0
   2b0cc:	5499      	strb	r1, [r3, r2]
   2b0ce:	687b      	ldr	r3, [r7, #4]
   2b0d0:	2200      	movs	r2, #0
   2b0d2:	661a      	str	r2, [r3, #96]	; 0x60
   2b0d4:	687b      	ldr	r3, [r7, #4]
   2b0d6:	2280      	movs	r2, #128	; 0x80
   2b0d8:	2100      	movs	r1, #0
   2b0da:	5099      	str	r1, [r3, r2]
   2b0dc:	687b      	ldr	r3, [r7, #4]
   2b0de:	229b      	movs	r2, #155	; 0x9b
   2b0e0:	2100      	movs	r1, #0
   2b0e2:	5499      	strb	r1, [r3, r2]
   2b0e4:	687b      	ldr	r3, [r7, #4]
   2b0e6:	2200      	movs	r2, #0
   2b0e8:	665a      	str	r2, [r3, #100]	; 0x64
   2b0ea:	687b      	ldr	r3, [r7, #4]
   2b0ec:	2284      	movs	r2, #132	; 0x84
   2b0ee:	2100      	movs	r1, #0
   2b0f0:	5099      	str	r1, [r3, r2]
   2b0f2:	687b      	ldr	r3, [r7, #4]
   2b0f4:	229c      	movs	r2, #156	; 0x9c
   2b0f6:	2100      	movs	r1, #0
   2b0f8:	5499      	strb	r1, [r3, r2]
   2b0fa:	687b      	ldr	r3, [r7, #4]
   2b0fc:	2200      	movs	r2, #0
   2b0fe:	669a      	str	r2, [r3, #104]	; 0x68
   2b100:	687b      	ldr	r3, [r7, #4]
   2b102:	2288      	movs	r2, #136	; 0x88
   2b104:	2100      	movs	r1, #0
   2b106:	5099      	str	r1, [r3, r2]
   2b108:	687b      	ldr	r3, [r7, #4]
   2b10a:	229d      	movs	r2, #157	; 0x9d
   2b10c:	2100      	movs	r1, #0
   2b10e:	5499      	strb	r1, [r3, r2]
   2b110:	687b      	ldr	r3, [r7, #4]
   2b112:	2200      	movs	r2, #0
   2b114:	66da      	str	r2, [r3, #108]	; 0x6c
   2b116:	687b      	ldr	r3, [r7, #4]
   2b118:	228c      	movs	r2, #140	; 0x8c
   2b11a:	2100      	movs	r1, #0
   2b11c:	5099      	str	r1, [r3, r2]
   2b11e:	687b      	ldr	r3, [r7, #4]
   2b120:	229e      	movs	r2, #158	; 0x9e
   2b122:	2100      	movs	r1, #0
   2b124:	5499      	strb	r1, [r3, r2]
   2b126:	687b      	ldr	r3, [r7, #4]
   2b128:	2200      	movs	r2, #0
   2b12a:	671a      	str	r2, [r3, #112]	; 0x70
   2b12c:	687b      	ldr	r3, [r7, #4]
   2b12e:	2290      	movs	r2, #144	; 0x90
   2b130:	2100      	movs	r1, #0
   2b132:	5099      	str	r1, [r3, r2]
   2b134:	687b      	ldr	r3, [r7, #4]
   2b136:	229f      	movs	r2, #159	; 0x9f
   2b138:	2100      	movs	r1, #0
   2b13a:	5499      	strb	r1, [r3, r2]
   2b13c:	687b      	ldr	r3, [r7, #4]
   2b13e:	2200      	movs	r2, #0
   2b140:	675a      	str	r2, [r3, #116]	; 0x74
   2b142:	687b      	ldr	r3, [r7, #4]
   2b144:	2294      	movs	r2, #148	; 0x94
   2b146:	2100      	movs	r1, #0
   2b148:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b14a:	687b      	ldr	r3, [r7, #4]
   2b14c:	22a0      	movs	r2, #160	; 0xa0
   2b14e:	2101      	movs	r1, #1
   2b150:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b152:	687b      	ldr	r3, [r7, #4]
   2b154:	22a1      	movs	r2, #161	; 0xa1
   2b156:	2100      	movs	r1, #0
   2b158:	5499      	strb	r1, [r3, r2]
}
   2b15a:	46c0      	nop			; (mov r8, r8)
   2b15c:	46bd      	mov	sp, r7
   2b15e:	b005      	add	sp, #20
   2b160:	bd90      	pop	{r4, r7, pc}
   2b162:	46c0      	nop			; (mov r8, r8)
   2b164:	0002ae61 	.word	0x0002ae61
   2b168:	0003afd4 	.word	0x0003afd4

0002b16c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b16c:	b580      	push	{r7, lr}
   2b16e:	b086      	sub	sp, #24
   2b170:	af00      	add	r7, sp, #0
   2b172:	60b9      	str	r1, [r7, #8]
   2b174:	607a      	str	r2, [r7, #4]
   2b176:	230f      	movs	r3, #15
   2b178:	18fb      	adds	r3, r7, r3
   2b17a:	1c02      	adds	r2, r0, #0
   2b17c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b17e:	2300      	movs	r3, #0
   2b180:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b182:	2300      	movs	r3, #0
   2b184:	613b      	str	r3, [r7, #16]
   2b186:	e01d      	b.n	2b1c4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b188:	68ba      	ldr	r2, [r7, #8]
   2b18a:	693b      	ldr	r3, [r7, #16]
   2b18c:	18d3      	adds	r3, r2, r3
   2b18e:	3310      	adds	r3, #16
   2b190:	781b      	ldrb	r3, [r3, #0]
   2b192:	2b01      	cmp	r3, #1
   2b194:	d113      	bne.n	2b1be <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b196:	230f      	movs	r3, #15
   2b198:	18fb      	adds	r3, r7, r3
   2b19a:	781b      	ldrb	r3, [r3, #0]
   2b19c:	4a1b      	ldr	r2, [pc, #108]	; (2b20c <_tcc_build_ctrla+0xa0>)
   2b19e:	5cd3      	ldrb	r3, [r2, r3]
   2b1a0:	001a      	movs	r2, r3
   2b1a2:	693b      	ldr	r3, [r7, #16]
   2b1a4:	429a      	cmp	r2, r3
   2b1a6:	da01      	bge.n	2b1ac <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b1a8:	2317      	movs	r3, #23
   2b1aa:	e02a      	b.n	2b202 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b1ac:	2380      	movs	r3, #128	; 0x80
   2b1ae:	045a      	lsls	r2, r3, #17
   2b1b0:	693b      	ldr	r3, [r7, #16]
   2b1b2:	409a      	lsls	r2, r3
   2b1b4:	0013      	movs	r3, r2
   2b1b6:	001a      	movs	r2, r3
   2b1b8:	697b      	ldr	r3, [r7, #20]
   2b1ba:	4313      	orrs	r3, r2
   2b1bc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b1be:	693b      	ldr	r3, [r7, #16]
   2b1c0:	3301      	adds	r3, #1
   2b1c2:	613b      	str	r3, [r7, #16]
   2b1c4:	693b      	ldr	r3, [r7, #16]
   2b1c6:	2b03      	cmp	r3, #3
   2b1c8:	ddde      	ble.n	2b188 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b1ca:	68bb      	ldr	r3, [r7, #8]
   2b1cc:	22a1      	movs	r2, #161	; 0xa1
   2b1ce:	5c9b      	ldrb	r3, [r3, r2]
   2b1d0:	2b00      	cmp	r3, #0
   2b1d2:	d004      	beq.n	2b1de <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b1d4:	697b      	ldr	r3, [r7, #20]
   2b1d6:	2280      	movs	r2, #128	; 0x80
   2b1d8:	0112      	lsls	r2, r2, #4
   2b1da:	4313      	orrs	r3, r2
   2b1dc:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b1de:	68bb      	ldr	r3, [r7, #8]
   2b1e0:	7b1b      	ldrb	r3, [r3, #12]
   2b1e2:	031b      	lsls	r3, r3, #12
   2b1e4:	001a      	movs	r2, r3
   2b1e6:	697b      	ldr	r3, [r7, #20]
   2b1e8:	4313      	orrs	r3, r2
   2b1ea:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b1ec:	68bb      	ldr	r3, [r7, #8]
   2b1ee:	7adb      	ldrb	r3, [r3, #11]
   2b1f0:	021b      	lsls	r3, r3, #8
   2b1f2:	001a      	movs	r2, r3
   2b1f4:	697b      	ldr	r3, [r7, #20]
   2b1f6:	4313      	orrs	r3, r2
   2b1f8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b1fa:	687b      	ldr	r3, [r7, #4]
   2b1fc:	697a      	ldr	r2, [r7, #20]
   2b1fe:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b200:	2300      	movs	r3, #0
}
   2b202:	0018      	movs	r0, r3
   2b204:	46bd      	mov	sp, r7
   2b206:	b006      	add	sp, #24
   2b208:	bd80      	pop	{r7, pc}
   2b20a:	46c0      	nop			; (mov r8, r8)
   2b20c:	0003afe0 	.word	0x0003afe0

0002b210 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b210:	b580      	push	{r7, lr}
   2b212:	b086      	sub	sp, #24
   2b214:	af00      	add	r7, sp, #0
   2b216:	60b9      	str	r1, [r7, #8]
   2b218:	607a      	str	r2, [r7, #4]
   2b21a:	230f      	movs	r3, #15
   2b21c:	18fb      	adds	r3, r7, r3
   2b21e:	1c02      	adds	r2, r0, #0
   2b220:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b222:	2317      	movs	r3, #23
   2b224:	18fb      	adds	r3, r7, r3
   2b226:	2200      	movs	r2, #0
   2b228:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b22a:	68bb      	ldr	r3, [r7, #8]
   2b22c:	7a1b      	ldrb	r3, [r3, #8]
   2b22e:	2b00      	cmp	r3, #0
   2b230:	d007      	beq.n	2b242 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b232:	2317      	movs	r3, #23
   2b234:	18fb      	adds	r3, r7, r3
   2b236:	2217      	movs	r2, #23
   2b238:	18ba      	adds	r2, r7, r2
   2b23a:	7812      	ldrb	r2, [r2, #0]
   2b23c:	2104      	movs	r1, #4
   2b23e:	430a      	orrs	r2, r1
   2b240:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b242:	68bb      	ldr	r3, [r7, #8]
   2b244:	7a5b      	ldrb	r3, [r3, #9]
   2b246:	2b01      	cmp	r3, #1
   2b248:	d107      	bne.n	2b25a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b24a:	2317      	movs	r3, #23
   2b24c:	18fb      	adds	r3, r7, r3
   2b24e:	2217      	movs	r2, #23
   2b250:	18ba      	adds	r2, r7, r2
   2b252:	7812      	ldrb	r2, [r2, #0]
   2b254:	2101      	movs	r1, #1
   2b256:	430a      	orrs	r2, r1
   2b258:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	2217      	movs	r2, #23
   2b25e:	18ba      	adds	r2, r7, r2
   2b260:	7812      	ldrb	r2, [r2, #0]
   2b262:	701a      	strb	r2, [r3, #0]
}
   2b264:	46c0      	nop			; (mov r8, r8)
   2b266:	46bd      	mov	sp, r7
   2b268:	b006      	add	sp, #24
   2b26a:	bd80      	pop	{r7, pc}

0002b26c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b26c:	b580      	push	{r7, lr}
   2b26e:	b088      	sub	sp, #32
   2b270:	af00      	add	r7, sp, #0
   2b272:	60b9      	str	r1, [r7, #8]
   2b274:	607a      	str	r2, [r7, #4]
   2b276:	230f      	movs	r3, #15
   2b278:	18fb      	adds	r3, r7, r3
   2b27a:	1c02      	adds	r2, r0, #0
   2b27c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b27e:	230f      	movs	r3, #15
   2b280:	18fb      	adds	r3, r7, r3
   2b282:	781a      	ldrb	r2, [r3, #0]
   2b284:	231b      	movs	r3, #27
   2b286:	18fb      	adds	r3, r7, r3
   2b288:	493e      	ldr	r1, [pc, #248]	; (2b384 <_tcc_build_faults+0x118>)
   2b28a:	5c8a      	ldrb	r2, [r1, r2]
   2b28c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b28e:	2300      	movs	r3, #0
   2b290:	61fb      	str	r3, [r7, #28]
   2b292:	e06e      	b.n	2b372 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b294:	69fa      	ldr	r2, [r7, #28]
   2b296:	0013      	movs	r3, r2
   2b298:	009b      	lsls	r3, r3, #2
   2b29a:	189b      	adds	r3, r3, r2
   2b29c:	005b      	lsls	r3, r3, #1
   2b29e:	3328      	adds	r3, #40	; 0x28
   2b2a0:	68ba      	ldr	r2, [r7, #8]
   2b2a2:	18d3      	adds	r3, r2, r3
   2b2a4:	3304      	adds	r3, #4
   2b2a6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b2a8:	697b      	ldr	r3, [r7, #20]
   2b2aa:	7a5b      	ldrb	r3, [r3, #9]
   2b2ac:	221b      	movs	r2, #27
   2b2ae:	18ba      	adds	r2, r7, r2
   2b2b0:	7812      	ldrb	r2, [r2, #0]
   2b2b2:	429a      	cmp	r2, r3
   2b2b4:	d801      	bhi.n	2b2ba <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b2b6:	2317      	movs	r3, #23
   2b2b8:	e05f      	b.n	2b37a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b2ba:	697b      	ldr	r3, [r7, #20]
   2b2bc:	781b      	ldrb	r3, [r3, #0]
   2b2be:	2b0f      	cmp	r3, #15
   2b2c0:	d901      	bls.n	2b2c6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b2c2:	2317      	movs	r3, #23
   2b2c4:	e059      	b.n	2b37a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b2c6:	697b      	ldr	r3, [r7, #20]
   2b2c8:	781b      	ldrb	r3, [r3, #0]
   2b2ca:	061b      	lsls	r3, r3, #24
   2b2cc:	001a      	movs	r2, r3
   2b2ce:	23f0      	movs	r3, #240	; 0xf0
   2b2d0:	051b      	lsls	r3, r3, #20
   2b2d2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b2d4:	697b      	ldr	r3, [r7, #20]
   2b2d6:	785b      	ldrb	r3, [r3, #1]
   2b2d8:	041b      	lsls	r3, r3, #16
   2b2da:	0019      	movs	r1, r3
   2b2dc:	23ff      	movs	r3, #255	; 0xff
   2b2de:	041b      	lsls	r3, r3, #16
   2b2e0:	400b      	ands	r3, r1
   2b2e2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b2e4:	697b      	ldr	r3, [r7, #20]
   2b2e6:	789b      	ldrb	r3, [r3, #2]
   2b2e8:	2b00      	cmp	r3, #0
   2b2ea:	d001      	beq.n	2b2f0 <_tcc_build_faults+0x84>
   2b2ec:	2380      	movs	r3, #128	; 0x80
   2b2ee:	e000      	b.n	2b2f2 <_tcc_build_faults+0x86>
   2b2f0:	2300      	movs	r3, #0
   2b2f2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b2f4:	697b      	ldr	r3, [r7, #20]
   2b2f6:	78db      	ldrb	r3, [r3, #3]
   2b2f8:	2b00      	cmp	r3, #0
   2b2fa:	d001      	beq.n	2b300 <_tcc_build_faults+0x94>
   2b2fc:	2308      	movs	r3, #8
   2b2fe:	e000      	b.n	2b302 <_tcc_build_faults+0x96>
   2b300:	2300      	movs	r3, #0
   2b302:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b304:	697b      	ldr	r3, [r7, #20]
   2b306:	791b      	ldrb	r3, [r3, #4]
   2b308:	2b00      	cmp	r3, #0
   2b30a:	d001      	beq.n	2b310 <_tcc_build_faults+0xa4>
   2b30c:	2310      	movs	r3, #16
   2b30e:	e000      	b.n	2b312 <_tcc_build_faults+0xa6>
   2b310:	2300      	movs	r3, #0
   2b312:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b314:	697b      	ldr	r3, [r7, #20]
   2b316:	795b      	ldrb	r3, [r3, #5]
   2b318:	0019      	movs	r1, r3
   2b31a:	2303      	movs	r3, #3
   2b31c:	400b      	ands	r3, r1
   2b31e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b320:	697b      	ldr	r3, [r7, #20]
   2b322:	799b      	ldrb	r3, [r3, #6]
   2b324:	015b      	lsls	r3, r3, #5
   2b326:	0019      	movs	r1, r3
   2b328:	2360      	movs	r3, #96	; 0x60
   2b32a:	400b      	ands	r3, r1
   2b32c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b32e:	697b      	ldr	r3, [r7, #20]
   2b330:	79db      	ldrb	r3, [r3, #7]
   2b332:	021b      	lsls	r3, r3, #8
   2b334:	0019      	movs	r1, r3
   2b336:	23c0      	movs	r3, #192	; 0xc0
   2b338:	009b      	lsls	r3, r3, #2
   2b33a:	400b      	ands	r3, r1
   2b33c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b33e:	697b      	ldr	r3, [r7, #20]
   2b340:	7a1b      	ldrb	r3, [r3, #8]
   2b342:	031b      	lsls	r3, r3, #12
   2b344:	0019      	movs	r1, r3
   2b346:	23e0      	movs	r3, #224	; 0xe0
   2b348:	01db      	lsls	r3, r3, #7
   2b34a:	400b      	ands	r3, r1
   2b34c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b34e:	697b      	ldr	r3, [r7, #20]
   2b350:	7a5b      	ldrb	r3, [r3, #9]
   2b352:	029b      	lsls	r3, r3, #10
   2b354:	0019      	movs	r1, r3
   2b356:	23c0      	movs	r3, #192	; 0xc0
   2b358:	011b      	lsls	r3, r3, #4
   2b35a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b35c:	4313      	orrs	r3, r2
   2b35e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b360:	69fb      	ldr	r3, [r7, #28]
   2b362:	009b      	lsls	r3, r3, #2
   2b364:	687a      	ldr	r2, [r7, #4]
   2b366:	18d3      	adds	r3, r2, r3
   2b368:	693a      	ldr	r2, [r7, #16]
   2b36a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b36c:	69fb      	ldr	r3, [r7, #28]
   2b36e:	3301      	adds	r3, #1
   2b370:	61fb      	str	r3, [r7, #28]
   2b372:	69fb      	ldr	r3, [r7, #28]
   2b374:	2b01      	cmp	r3, #1
   2b376:	dd8d      	ble.n	2b294 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b378:	2300      	movs	r3, #0
}
   2b37a:	0018      	movs	r0, r3
   2b37c:	46bd      	mov	sp, r7
   2b37e:	b008      	add	sp, #32
   2b380:	bd80      	pop	{r7, pc}
   2b382:	46c0      	nop			; (mov r8, r8)
   2b384:	0003afe0 	.word	0x0003afe0

0002b388 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b388:	b580      	push	{r7, lr}
   2b38a:	b088      	sub	sp, #32
   2b38c:	af00      	add	r7, sp, #0
   2b38e:	60b9      	str	r1, [r7, #8]
   2b390:	607a      	str	r2, [r7, #4]
   2b392:	230f      	movs	r3, #15
   2b394:	18fb      	adds	r3, r7, r3
   2b396:	1c02      	adds	r2, r0, #0
   2b398:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b39a:	230f      	movs	r3, #15
   2b39c:	18fb      	adds	r3, r7, r3
   2b39e:	781a      	ldrb	r2, [r3, #0]
   2b3a0:	2317      	movs	r3, #23
   2b3a2:	18fb      	adds	r3, r7, r3
   2b3a4:	492d      	ldr	r1, [pc, #180]	; (2b45c <_tcc_build_drvctrl+0xd4>)
   2b3a6:	5c8a      	ldrb	r2, [r1, r2]
   2b3a8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b3aa:	2300      	movs	r3, #0
   2b3ac:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b3ae:	2300      	movs	r3, #0
   2b3b0:	61fb      	str	r3, [r7, #28]
   2b3b2:	e048      	b.n	2b446 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b3b4:	68ba      	ldr	r2, [r7, #8]
   2b3b6:	2150      	movs	r1, #80	; 0x50
   2b3b8:	69fb      	ldr	r3, [r7, #28]
   2b3ba:	18d3      	adds	r3, r2, r3
   2b3bc:	185b      	adds	r3, r3, r1
   2b3be:	781b      	ldrb	r3, [r3, #0]
   2b3c0:	2b00      	cmp	r3, #0
   2b3c2:	d010      	beq.n	2b3e6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b3c4:	2317      	movs	r3, #23
   2b3c6:	18fb      	adds	r3, r7, r3
   2b3c8:	781a      	ldrb	r2, [r3, #0]
   2b3ca:	69fb      	ldr	r3, [r7, #28]
   2b3cc:	429a      	cmp	r2, r3
   2b3ce:	d801      	bhi.n	2b3d4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b3d0:	2317      	movs	r3, #23
   2b3d2:	e03f      	b.n	2b454 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b3d4:	2380      	movs	r3, #128	; 0x80
   2b3d6:	025a      	lsls	r2, r3, #9
   2b3d8:	69fb      	ldr	r3, [r7, #28]
   2b3da:	409a      	lsls	r2, r3
   2b3dc:	0013      	movs	r3, r2
   2b3de:	001a      	movs	r2, r3
   2b3e0:	69bb      	ldr	r3, [r7, #24]
   2b3e2:	4313      	orrs	r3, r2
   2b3e4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b3e6:	68ba      	ldr	r2, [r7, #8]
   2b3e8:	69fb      	ldr	r3, [r7, #28]
   2b3ea:	331c      	adds	r3, #28
   2b3ec:	005b      	lsls	r3, r3, #1
   2b3ee:	18d3      	adds	r3, r2, r3
   2b3f0:	3309      	adds	r3, #9
   2b3f2:	781b      	ldrb	r3, [r3, #0]
   2b3f4:	2b00      	cmp	r3, #0
   2b3f6:	d023      	beq.n	2b440 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b3f8:	2317      	movs	r3, #23
   2b3fa:	18fb      	adds	r3, r7, r3
   2b3fc:	781a      	ldrb	r2, [r3, #0]
   2b3fe:	69fb      	ldr	r3, [r7, #28]
   2b400:	429a      	cmp	r2, r3
   2b402:	d801      	bhi.n	2b408 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b404:	2317      	movs	r3, #23
   2b406:	e025      	b.n	2b454 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b408:	68ba      	ldr	r2, [r7, #8]
   2b40a:	69fb      	ldr	r3, [r7, #28]
   2b40c:	331c      	adds	r3, #28
   2b40e:	005b      	lsls	r3, r3, #1
   2b410:	18d3      	adds	r3, r2, r3
   2b412:	3309      	adds	r3, #9
   2b414:	781b      	ldrb	r3, [r3, #0]
   2b416:	2b02      	cmp	r3, #2
   2b418:	d10a      	bne.n	2b430 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b41a:	2302      	movs	r3, #2
   2b41c:	33ff      	adds	r3, #255	; 0xff
   2b41e:	001a      	movs	r2, r3
   2b420:	69fb      	ldr	r3, [r7, #28]
   2b422:	409a      	lsls	r2, r3
   2b424:	0013      	movs	r3, r2
   2b426:	001a      	movs	r2, r3
   2b428:	69bb      	ldr	r3, [r7, #24]
   2b42a:	4313      	orrs	r3, r2
   2b42c:	61bb      	str	r3, [r7, #24]
   2b42e:	e007      	b.n	2b440 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b430:	2201      	movs	r2, #1
   2b432:	69fb      	ldr	r3, [r7, #28]
   2b434:	409a      	lsls	r2, r3
   2b436:	0013      	movs	r3, r2
   2b438:	001a      	movs	r2, r3
   2b43a:	69bb      	ldr	r3, [r7, #24]
   2b43c:	4313      	orrs	r3, r2
   2b43e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b440:	69fb      	ldr	r3, [r7, #28]
   2b442:	3301      	adds	r3, #1
   2b444:	61fb      	str	r3, [r7, #28]
   2b446:	69fb      	ldr	r3, [r7, #28]
   2b448:	2b07      	cmp	r3, #7
   2b44a:	d9b3      	bls.n	2b3b4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b44c:	687b      	ldr	r3, [r7, #4]
   2b44e:	69ba      	ldr	r2, [r7, #24]
   2b450:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b452:	2300      	movs	r3, #0
}
   2b454:	0018      	movs	r0, r3
   2b456:	46bd      	mov	sp, r7
   2b458:	b008      	add	sp, #32
   2b45a:	bd80      	pop	{r7, pc}
   2b45c:	0003afe4 	.word	0x0003afe4

0002b460 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b460:	b580      	push	{r7, lr}
   2b462:	b088      	sub	sp, #32
   2b464:	af00      	add	r7, sp, #0
   2b466:	60b9      	str	r1, [r7, #8]
   2b468:	607a      	str	r2, [r7, #4]
   2b46a:	230f      	movs	r3, #15
   2b46c:	18fb      	adds	r3, r7, r3
   2b46e:	1c02      	adds	r2, r0, #0
   2b470:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b472:	230f      	movs	r3, #15
   2b474:	18fb      	adds	r3, r7, r3
   2b476:	781a      	ldrb	r2, [r3, #0]
   2b478:	2317      	movs	r3, #23
   2b47a:	18fb      	adds	r3, r7, r3
   2b47c:	491d      	ldr	r1, [pc, #116]	; (2b4f4 <_tcc_build_waves+0x94>)
   2b47e:	5c8a      	ldrb	r2, [r1, r2]
   2b480:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b482:	68bb      	ldr	r3, [r7, #8]
   2b484:	3310      	adds	r3, #16
   2b486:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b488:	693b      	ldr	r3, [r7, #16]
   2b48a:	7a5b      	ldrb	r3, [r3, #9]
   2b48c:	011b      	lsls	r3, r3, #4
   2b48e:	001a      	movs	r2, r3
   2b490:	2330      	movs	r3, #48	; 0x30
   2b492:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b494:	693b      	ldr	r3, [r7, #16]
   2b496:	7a1b      	ldrb	r3, [r3, #8]
   2b498:	0019      	movs	r1, r3
   2b49a:	2307      	movs	r3, #7
   2b49c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b49e:	4313      	orrs	r3, r2
   2b4a0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b4a2:	2300      	movs	r3, #0
   2b4a4:	61fb      	str	r3, [r7, #28]
   2b4a6:	e01a      	b.n	2b4de <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b4a8:	693a      	ldr	r2, [r7, #16]
   2b4aa:	69fb      	ldr	r3, [r7, #28]
   2b4ac:	18d3      	adds	r3, r2, r3
   2b4ae:	3304      	adds	r3, #4
   2b4b0:	781b      	ldrb	r3, [r3, #0]
   2b4b2:	2b00      	cmp	r3, #0
   2b4b4:	d010      	beq.n	2b4d8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b4b6:	2317      	movs	r3, #23
   2b4b8:	18fb      	adds	r3, r7, r3
   2b4ba:	781a      	ldrb	r2, [r3, #0]
   2b4bc:	69fb      	ldr	r3, [r7, #28]
   2b4be:	429a      	cmp	r2, r3
   2b4c0:	dc01      	bgt.n	2b4c6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b4c2:	2317      	movs	r3, #23
   2b4c4:	e012      	b.n	2b4ec <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b4c6:	2380      	movs	r3, #128	; 0x80
   2b4c8:	025a      	lsls	r2, r3, #9
   2b4ca:	69fb      	ldr	r3, [r7, #28]
   2b4cc:	409a      	lsls	r2, r3
   2b4ce:	0013      	movs	r3, r2
   2b4d0:	001a      	movs	r2, r3
   2b4d2:	69bb      	ldr	r3, [r7, #24]
   2b4d4:	4313      	orrs	r3, r2
   2b4d6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b4d8:	69fb      	ldr	r3, [r7, #28]
   2b4da:	3301      	adds	r3, #1
   2b4dc:	61fb      	str	r3, [r7, #28]
   2b4de:	69fb      	ldr	r3, [r7, #28]
   2b4e0:	2b03      	cmp	r3, #3
   2b4e2:	dde1      	ble.n	2b4a8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b4e4:	687b      	ldr	r3, [r7, #4]
   2b4e6:	69ba      	ldr	r2, [r7, #24]
   2b4e8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b4ea:	2300      	movs	r3, #0
}
   2b4ec:	0018      	movs	r0, r3
   2b4ee:	46bd      	mov	sp, r7
   2b4f0:	b008      	add	sp, #32
   2b4f2:	bd80      	pop	{r7, pc}
   2b4f4:	0003afe0 	.word	0x0003afe0

0002b4f8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b4f8:	b590      	push	{r4, r7, lr}
   2b4fa:	b091      	sub	sp, #68	; 0x44
   2b4fc:	af00      	add	r7, sp, #0
   2b4fe:	60f8      	str	r0, [r7, #12]
   2b500:	60b9      	str	r1, [r7, #8]
   2b502:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b504:	233b      	movs	r3, #59	; 0x3b
   2b506:	18fc      	adds	r4, r7, r3
   2b508:	68bb      	ldr	r3, [r7, #8]
   2b50a:	0018      	movs	r0, r3
   2b50c:	4bc4      	ldr	r3, [pc, #784]	; (2b820 <tcc_init+0x328>)
   2b50e:	4798      	blx	r3
   2b510:	0003      	movs	r3, r0
   2b512:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b514:	233b      	movs	r3, #59	; 0x3b
   2b516:	18fb      	adds	r3, r7, r3
   2b518:	781a      	ldrb	r2, [r3, #0]
   2b51a:	4bc2      	ldr	r3, [pc, #776]	; (2b824 <tcc_init+0x32c>)
   2b51c:	0092      	lsls	r2, r2, #2
   2b51e:	58d3      	ldr	r3, [r2, r3]
   2b520:	0019      	movs	r1, r3
   2b522:	2002      	movs	r0, #2
   2b524:	4bc0      	ldr	r3, [pc, #768]	; (2b828 <tcc_init+0x330>)
   2b526:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b528:	68bb      	ldr	r3, [r7, #8]
   2b52a:	681b      	ldr	r3, [r3, #0]
   2b52c:	2202      	movs	r2, #2
   2b52e:	4013      	ands	r3, r2
   2b530:	d001      	beq.n	2b536 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b532:	231c      	movs	r3, #28
   2b534:	e1be      	b.n	2b8b4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b536:	68bb      	ldr	r3, [r7, #8]
   2b538:	681b      	ldr	r3, [r3, #0]
   2b53a:	2201      	movs	r2, #1
   2b53c:	4013      	ands	r3, r2
   2b53e:	d001      	beq.n	2b544 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b540:	231c      	movs	r3, #28
   2b542:	e1b7      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b544:	233b      	movs	r3, #59	; 0x3b
   2b546:	18fb      	adds	r3, r7, r3
   2b548:	781a      	ldrb	r2, [r3, #0]
   2b54a:	4bb8      	ldr	r3, [pc, #736]	; (2b82c <tcc_init+0x334>)
   2b54c:	0092      	lsls	r2, r2, #2
   2b54e:	58d3      	ldr	r3, [r2, r3]
   2b550:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b552:	687b      	ldr	r3, [r7, #4]
   2b554:	681a      	ldr	r2, [r3, #0]
   2b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b558:	429a      	cmp	r2, r3
   2b55a:	d804      	bhi.n	2b566 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b55c:	687b      	ldr	r3, [r7, #4]
   2b55e:	685a      	ldr	r2, [r3, #4]
   2b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b562:	429a      	cmp	r2, r3
   2b564:	d901      	bls.n	2b56a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b566:	2317      	movs	r3, #23
   2b568:	e1a4      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b56a:	2300      	movs	r3, #0
   2b56c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b56e:	e00e      	b.n	2b58e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b570:	687a      	ldr	r2, [r7, #4]
   2b572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b574:	3306      	adds	r3, #6
   2b576:	009b      	lsls	r3, r3, #2
   2b578:	18d3      	adds	r3, r2, r3
   2b57a:	3304      	adds	r3, #4
   2b57c:	681a      	ldr	r2, [r3, #0]
   2b57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b580:	429a      	cmp	r2, r3
   2b582:	d901      	bls.n	2b588 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b584:	2317      	movs	r3, #23
   2b586:	e195      	b.n	2b8b4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b58a:	3301      	adds	r3, #1
   2b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b590:	2b03      	cmp	r3, #3
   2b592:	dded      	ble.n	2b570 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b594:	2300      	movs	r3, #0
   2b596:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b598:	e019      	b.n	2b5ce <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b59a:	687a      	ldr	r2, [r7, #4]
   2b59c:	2198      	movs	r1, #152	; 0x98
   2b59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5a0:	18d3      	adds	r3, r2, r3
   2b5a2:	185b      	adds	r3, r3, r1
   2b5a4:	781b      	ldrb	r3, [r3, #0]
   2b5a6:	2201      	movs	r2, #1
   2b5a8:	4053      	eors	r3, r2
   2b5aa:	b2db      	uxtb	r3, r3
   2b5ac:	2b00      	cmp	r3, #0
   2b5ae:	d10a      	bne.n	2b5c6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b5b0:	233b      	movs	r3, #59	; 0x3b
   2b5b2:	18fb      	adds	r3, r7, r3
   2b5b4:	781b      	ldrb	r3, [r3, #0]
   2b5b6:	4a9e      	ldr	r2, [pc, #632]	; (2b830 <tcc_init+0x338>)
   2b5b8:	5cd3      	ldrb	r3, [r2, r3]
   2b5ba:	001a      	movs	r2, r3
   2b5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5be:	429a      	cmp	r2, r3
   2b5c0:	dc02      	bgt.n	2b5c8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b5c2:	2317      	movs	r3, #23
   2b5c4:	e176      	b.n	2b8b4 <tcc_init+0x3bc>
			continue;
   2b5c6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5ca:	3301      	adds	r3, #1
   2b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5d0:	2b07      	cmp	r3, #7
   2b5d2:	dde2      	ble.n	2b59a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b5d4:	2300      	movs	r3, #0
   2b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b5d8:	2333      	movs	r3, #51	; 0x33
   2b5da:	18fc      	adds	r4, r7, r3
   2b5dc:	232c      	movs	r3, #44	; 0x2c
   2b5de:	18fa      	adds	r2, r7, r3
   2b5e0:	6879      	ldr	r1, [r7, #4]
   2b5e2:	233b      	movs	r3, #59	; 0x3b
   2b5e4:	18fb      	adds	r3, r7, r3
   2b5e6:	781b      	ldrb	r3, [r3, #0]
   2b5e8:	0018      	movs	r0, r3
   2b5ea:	4b92      	ldr	r3, [pc, #584]	; (2b834 <tcc_init+0x33c>)
   2b5ec:	4798      	blx	r3
   2b5ee:	0003      	movs	r3, r0
   2b5f0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b5f2:	2333      	movs	r3, #51	; 0x33
   2b5f4:	18fb      	adds	r3, r7, r3
   2b5f6:	781b      	ldrb	r3, [r3, #0]
   2b5f8:	2b00      	cmp	r3, #0
   2b5fa:	d003      	beq.n	2b604 <tcc_init+0x10c>
		return status;
   2b5fc:	2333      	movs	r3, #51	; 0x33
   2b5fe:	18fb      	adds	r3, r7, r3
   2b600:	781b      	ldrb	r3, [r3, #0]
   2b602:	e157      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b604:	232b      	movs	r3, #43	; 0x2b
   2b606:	18fa      	adds	r2, r7, r3
   2b608:	6879      	ldr	r1, [r7, #4]
   2b60a:	233b      	movs	r3, #59	; 0x3b
   2b60c:	18fb      	adds	r3, r7, r3
   2b60e:	781b      	ldrb	r3, [r3, #0]
   2b610:	0018      	movs	r0, r3
   2b612:	4b89      	ldr	r3, [pc, #548]	; (2b838 <tcc_init+0x340>)
   2b614:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b616:	2333      	movs	r3, #51	; 0x33
   2b618:	18fc      	adds	r4, r7, r3
   2b61a:	2320      	movs	r3, #32
   2b61c:	18fa      	adds	r2, r7, r3
   2b61e:	6879      	ldr	r1, [r7, #4]
   2b620:	233b      	movs	r3, #59	; 0x3b
   2b622:	18fb      	adds	r3, r7, r3
   2b624:	781b      	ldrb	r3, [r3, #0]
   2b626:	0018      	movs	r0, r3
   2b628:	4b84      	ldr	r3, [pc, #528]	; (2b83c <tcc_init+0x344>)
   2b62a:	4798      	blx	r3
   2b62c:	0003      	movs	r3, r0
   2b62e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b630:	2333      	movs	r3, #51	; 0x33
   2b632:	18fb      	adds	r3, r7, r3
   2b634:	781b      	ldrb	r3, [r3, #0]
   2b636:	2b00      	cmp	r3, #0
   2b638:	d003      	beq.n	2b642 <tcc_init+0x14a>
		return status;
   2b63a:	2333      	movs	r3, #51	; 0x33
   2b63c:	18fb      	adds	r3, r7, r3
   2b63e:	781b      	ldrb	r3, [r3, #0]
   2b640:	e138      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b642:	2300      	movs	r3, #0
   2b644:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b646:	2333      	movs	r3, #51	; 0x33
   2b648:	18fc      	adds	r4, r7, r3
   2b64a:	231c      	movs	r3, #28
   2b64c:	18fa      	adds	r2, r7, r3
   2b64e:	6879      	ldr	r1, [r7, #4]
   2b650:	233b      	movs	r3, #59	; 0x3b
   2b652:	18fb      	adds	r3, r7, r3
   2b654:	781b      	ldrb	r3, [r3, #0]
   2b656:	0018      	movs	r0, r3
   2b658:	4b79      	ldr	r3, [pc, #484]	; (2b840 <tcc_init+0x348>)
   2b65a:	4798      	blx	r3
   2b65c:	0003      	movs	r3, r0
   2b65e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b660:	2333      	movs	r3, #51	; 0x33
   2b662:	18fb      	adds	r3, r7, r3
   2b664:	781b      	ldrb	r3, [r3, #0]
   2b666:	2b00      	cmp	r3, #0
   2b668:	d003      	beq.n	2b672 <tcc_init+0x17a>
		return status;
   2b66a:	2333      	movs	r3, #51	; 0x33
   2b66c:	18fb      	adds	r3, r7, r3
   2b66e:	781b      	ldrb	r3, [r3, #0]
   2b670:	e120      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b672:	2333      	movs	r3, #51	; 0x33
   2b674:	18fc      	adds	r4, r7, r3
   2b676:	2318      	movs	r3, #24
   2b678:	18fa      	adds	r2, r7, r3
   2b67a:	6879      	ldr	r1, [r7, #4]
   2b67c:	233b      	movs	r3, #59	; 0x3b
   2b67e:	18fb      	adds	r3, r7, r3
   2b680:	781b      	ldrb	r3, [r3, #0]
   2b682:	0018      	movs	r0, r3
   2b684:	4b6f      	ldr	r3, [pc, #444]	; (2b844 <tcc_init+0x34c>)
   2b686:	4798      	blx	r3
   2b688:	0003      	movs	r3, r0
   2b68a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b68c:	2333      	movs	r3, #51	; 0x33
   2b68e:	18fb      	adds	r3, r7, r3
   2b690:	781b      	ldrb	r3, [r3, #0]
   2b692:	2b00      	cmp	r3, #0
   2b694:	d003      	beq.n	2b69e <tcc_init+0x1a6>
		return status;
   2b696:	2333      	movs	r3, #51	; 0x33
   2b698:	18fb      	adds	r3, r7, r3
   2b69a:	781b      	ldrb	r3, [r3, #0]
   2b69c:	e10a      	b.n	2b8b4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b69e:	2300      	movs	r3, #0
   2b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b6a2:	e009      	b.n	2b6b8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b6a4:	68fa      	ldr	r2, [r7, #12]
   2b6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b6a8:	009b      	lsls	r3, r3, #2
   2b6aa:	18d3      	adds	r3, r2, r3
   2b6ac:	3304      	adds	r3, #4
   2b6ae:	2200      	movs	r2, #0
   2b6b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b6b4:	3301      	adds	r3, #1
   2b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b6ba:	2b0b      	cmp	r3, #11
   2b6bc:	ddf2      	ble.n	2b6a4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b6be:	68fb      	ldr	r3, [r7, #12]
   2b6c0:	2200      	movs	r2, #0
   2b6c2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b6c4:	68fb      	ldr	r3, [r7, #12]
   2b6c6:	2200      	movs	r2, #0
   2b6c8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b6ca:	233b      	movs	r3, #59	; 0x3b
   2b6cc:	18fb      	adds	r3, r7, r3
   2b6ce:	781a      	ldrb	r2, [r3, #0]
   2b6d0:	4b5d      	ldr	r3, [pc, #372]	; (2b848 <tcc_init+0x350>)
   2b6d2:	0092      	lsls	r2, r2, #2
   2b6d4:	68f9      	ldr	r1, [r7, #12]
   2b6d6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b6d8:	68fb      	ldr	r3, [r7, #12]
   2b6da:	68ba      	ldr	r2, [r7, #8]
   2b6dc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b6de:	687b      	ldr	r3, [r7, #4]
   2b6e0:	22a0      	movs	r2, #160	; 0xa0
   2b6e2:	5c99      	ldrb	r1, [r3, r2]
   2b6e4:	68fb      	ldr	r3, [r7, #12]
   2b6e6:	223c      	movs	r2, #60	; 0x3c
   2b6e8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b6ea:	2314      	movs	r3, #20
   2b6ec:	18fb      	adds	r3, r7, r3
   2b6ee:	0018      	movs	r0, r3
   2b6f0:	4b56      	ldr	r3, [pc, #344]	; (2b84c <tcc_init+0x354>)
   2b6f2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b6f4:	687b      	ldr	r3, [r7, #4]
   2b6f6:	7a9a      	ldrb	r2, [r3, #10]
   2b6f8:	2314      	movs	r3, #20
   2b6fa:	18fb      	adds	r3, r7, r3
   2b6fc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b6fe:	233b      	movs	r3, #59	; 0x3b
   2b700:	18fb      	adds	r3, r7, r3
   2b702:	781b      	ldrb	r3, [r3, #0]
   2b704:	4a52      	ldr	r2, [pc, #328]	; (2b850 <tcc_init+0x358>)
   2b706:	5cd3      	ldrb	r3, [r2, r3]
   2b708:	2214      	movs	r2, #20
   2b70a:	18ba      	adds	r2, r7, r2
   2b70c:	0011      	movs	r1, r2
   2b70e:	0018      	movs	r0, r3
   2b710:	4b50      	ldr	r3, [pc, #320]	; (2b854 <tcc_init+0x35c>)
   2b712:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b714:	233b      	movs	r3, #59	; 0x3b
   2b716:	18fb      	adds	r3, r7, r3
   2b718:	781b      	ldrb	r3, [r3, #0]
   2b71a:	4a4d      	ldr	r2, [pc, #308]	; (2b850 <tcc_init+0x358>)
   2b71c:	5cd3      	ldrb	r3, [r2, r3]
   2b71e:	0018      	movs	r0, r3
   2b720:	4b4d      	ldr	r3, [pc, #308]	; (2b858 <tcc_init+0x360>)
   2b722:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b724:	2300      	movs	r3, #0
   2b726:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b728:	e02d      	b.n	2b786 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b72a:	687a      	ldr	r2, [r7, #4]
   2b72c:	2198      	movs	r1, #152	; 0x98
   2b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b730:	18d3      	adds	r3, r2, r3
   2b732:	185b      	adds	r3, r3, r1
   2b734:	781b      	ldrb	r3, [r3, #0]
   2b736:	2201      	movs	r2, #1
   2b738:	4053      	eors	r3, r2
   2b73a:	b2db      	uxtb	r3, r3
   2b73c:	2b00      	cmp	r3, #0
   2b73e:	d11e      	bne.n	2b77e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b740:	2310      	movs	r3, #16
   2b742:	18fb      	adds	r3, r7, r3
   2b744:	0018      	movs	r0, r3
   2b746:	4b45      	ldr	r3, [pc, #276]	; (2b85c <tcc_init+0x364>)
   2b748:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b74a:	687b      	ldr	r3, [r7, #4]
   2b74c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b74e:	321e      	adds	r2, #30
   2b750:	0092      	lsls	r2, r2, #2
   2b752:	58d3      	ldr	r3, [r2, r3]
   2b754:	b2da      	uxtb	r2, r3
   2b756:	2310      	movs	r3, #16
   2b758:	18fb      	adds	r3, r7, r3
   2b75a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b75c:	2310      	movs	r3, #16
   2b75e:	18fb      	adds	r3, r7, r3
   2b760:	2201      	movs	r2, #1
   2b762:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b764:	687b      	ldr	r3, [r7, #4]
   2b766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b768:	3216      	adds	r2, #22
   2b76a:	0092      	lsls	r2, r2, #2
   2b76c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b76e:	b2db      	uxtb	r3, r3
   2b770:	2210      	movs	r2, #16
   2b772:	18ba      	adds	r2, r7, r2
   2b774:	0011      	movs	r1, r2
   2b776:	0018      	movs	r0, r3
   2b778:	4b39      	ldr	r3, [pc, #228]	; (2b860 <tcc_init+0x368>)
   2b77a:	4798      	blx	r3
   2b77c:	e000      	b.n	2b780 <tcc_init+0x288>
			continue;
   2b77e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b782:	3301      	adds	r3, #1
   2b784:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b786:	233b      	movs	r3, #59	; 0x3b
   2b788:	18fb      	adds	r3, r7, r3
   2b78a:	781b      	ldrb	r3, [r3, #0]
   2b78c:	4a28      	ldr	r2, [pc, #160]	; (2b830 <tcc_init+0x338>)
   2b78e:	5cd3      	ldrb	r3, [r2, r3]
   2b790:	001a      	movs	r2, r3
   2b792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b794:	429a      	cmp	r2, r3
   2b796:	dcc8      	bgt.n	2b72a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b79a:	68bb      	ldr	r3, [r7, #8]
   2b79c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b79e:	46c0      	nop			; (mov r8, r8)
   2b7a0:	68bb      	ldr	r3, [r7, #8]
   2b7a2:	689b      	ldr	r3, [r3, #8]
   2b7a4:	2204      	movs	r2, #4
   2b7a6:	4013      	ands	r3, r2
   2b7a8:	d1fa      	bne.n	2b7a0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b7aa:	68bb      	ldr	r3, [r7, #8]
   2b7ac:	22ff      	movs	r2, #255	; 0xff
   2b7ae:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b7b0:	46c0      	nop			; (mov r8, r8)
   2b7b2:	68bb      	ldr	r3, [r7, #8]
   2b7b4:	689b      	ldr	r3, [r3, #8]
   2b7b6:	2204      	movs	r2, #4
   2b7b8:	4013      	ands	r3, r2
   2b7ba:	d1fa      	bne.n	2b7b2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b7bc:	232b      	movs	r3, #43	; 0x2b
   2b7be:	18fb      	adds	r3, r7, r3
   2b7c0:	781a      	ldrb	r2, [r3, #0]
   2b7c2:	68bb      	ldr	r3, [r7, #8]
   2b7c4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b7c6:	2320      	movs	r3, #32
   2b7c8:	18fb      	adds	r3, r7, r3
   2b7ca:	681a      	ldr	r2, [r3, #0]
   2b7cc:	68bb      	ldr	r3, [r7, #8]
   2b7ce:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b7d0:	2320      	movs	r3, #32
   2b7d2:	18fb      	adds	r3, r7, r3
   2b7d4:	685a      	ldr	r2, [r3, #4]
   2b7d6:	68bb      	ldr	r3, [r7, #8]
   2b7d8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b7da:	69fa      	ldr	r2, [r7, #28]
   2b7dc:	68bb      	ldr	r3, [r7, #8]
   2b7de:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b7e0:	46c0      	nop			; (mov r8, r8)
   2b7e2:	68bb      	ldr	r3, [r7, #8]
   2b7e4:	689b      	ldr	r3, [r3, #8]
   2b7e6:	4a1f      	ldr	r2, [pc, #124]	; (2b864 <tcc_init+0x36c>)
   2b7e8:	4013      	ands	r3, r2
   2b7ea:	d1fa      	bne.n	2b7e2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b7ec:	69ba      	ldr	r2, [r7, #24]
   2b7ee:	68bb      	ldr	r3, [r7, #8]
   2b7f0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b7f2:	46c0      	nop			; (mov r8, r8)
   2b7f4:	68bb      	ldr	r3, [r7, #8]
   2b7f6:	689b      	ldr	r3, [r3, #8]
   2b7f8:	2210      	movs	r2, #16
   2b7fa:	4013      	ands	r3, r2
   2b7fc:	d1fa      	bne.n	2b7f4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b7fe:	687b      	ldr	r3, [r7, #4]
   2b800:	681a      	ldr	r2, [r3, #0]
   2b802:	68bb      	ldr	r3, [r7, #8]
   2b804:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b806:	46c0      	nop			; (mov r8, r8)
   2b808:	68bb      	ldr	r3, [r7, #8]
   2b80a:	689b      	ldr	r3, [r3, #8]
   2b80c:	4a16      	ldr	r2, [pc, #88]	; (2b868 <tcc_init+0x370>)
   2b80e:	4013      	ands	r3, r2
   2b810:	d1fa      	bne.n	2b808 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b812:	687b      	ldr	r3, [r7, #4]
   2b814:	685a      	ldr	r2, [r3, #4]
   2b816:	68bb      	ldr	r3, [r7, #8]
   2b818:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b81a:	2300      	movs	r3, #0
   2b81c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b81e:	e03f      	b.n	2b8a0 <tcc_init+0x3a8>
   2b820:	0002ae61 	.word	0x0002ae61
   2b824:	0003afc8 	.word	0x0003afc8
   2b828:	0002addd 	.word	0x0002addd
   2b82c:	0003afd4 	.word	0x0003afd4
   2b830:	0003afe4 	.word	0x0003afe4
   2b834:	0002b16d 	.word	0x0002b16d
   2b838:	0002b211 	.word	0x0002b211
   2b83c:	0002b26d 	.word	0x0002b26d
   2b840:	0002b389 	.word	0x0002b389
   2b844:	0002b461 	.word	0x0002b461
   2b848:	20005c7c 	.word	0x20005c7c
   2b84c:	0002adc5 	.word	0x0002adc5
   2b850:	0003afc4 	.word	0x0003afc4
   2b854:	0002a9dd 	.word	0x0002a9dd
   2b858:	0002aa21 	.word	0x0002aa21
   2b85c:	0002ae39 	.word	0x0002ae39
   2b860:	0002ad3d 	.word	0x0002ad3d
   2b864:	00020040 	.word	0x00020040
   2b868:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b86c:	46c0      	nop			; (mov r8, r8)
   2b86e:	68bb      	ldr	r3, [r7, #8]
   2b870:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b872:	4912      	ldr	r1, [pc, #72]	; (2b8bc <tcc_init+0x3c4>)
   2b874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b876:	4091      	lsls	r1, r2
   2b878:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b87a:	4013      	ands	r3, r2
   2b87c:	d1f7      	bne.n	2b86e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b87e:	687a      	ldr	r2, [r7, #4]
   2b880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b882:	3306      	adds	r3, #6
   2b884:	009b      	lsls	r3, r3, #2
   2b886:	18d3      	adds	r3, r2, r3
   2b888:	3304      	adds	r3, #4
   2b88a:	681a      	ldr	r2, [r3, #0]
   2b88c:	68b9      	ldr	r1, [r7, #8]
   2b88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b890:	3310      	adds	r3, #16
   2b892:	009b      	lsls	r3, r3, #2
   2b894:	18cb      	adds	r3, r1, r3
   2b896:	3304      	adds	r3, #4
   2b898:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b89c:	3301      	adds	r3, #1
   2b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8a0:	233b      	movs	r3, #59	; 0x3b
   2b8a2:	18fb      	adds	r3, r7, r3
   2b8a4:	781b      	ldrb	r3, [r3, #0]
   2b8a6:	4a06      	ldr	r2, [pc, #24]	; (2b8c0 <tcc_init+0x3c8>)
   2b8a8:	5cd3      	ldrb	r3, [r2, r3]
   2b8aa:	001a      	movs	r2, r3
   2b8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8ae:	429a      	cmp	r2, r3
   2b8b0:	dcdc      	bgt.n	2b86c <tcc_init+0x374>
	}

	return STATUS_OK;
   2b8b2:	2300      	movs	r3, #0
}
   2b8b4:	0018      	movs	r0, r3
   2b8b6:	46bd      	mov	sp, r7
   2b8b8:	b011      	add	sp, #68	; 0x44
   2b8ba:	bd90      	pop	{r4, r7, pc}
   2b8bc:	00080100 	.word	0x00080100
   2b8c0:	0003afe0 	.word	0x0003afe0

0002b8c4 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   2b8c4:	b590      	push	{r4, r7, lr}
   2b8c6:	b089      	sub	sp, #36	; 0x24
   2b8c8:	af00      	add	r7, sp, #0
   2b8ca:	60f8      	str	r0, [r7, #12]
   2b8cc:	0008      	movs	r0, r1
   2b8ce:	607a      	str	r2, [r7, #4]
   2b8d0:	0019      	movs	r1, r3
   2b8d2:	230b      	movs	r3, #11
   2b8d4:	18fb      	adds	r3, r7, r3
   2b8d6:	1c02      	adds	r2, r0, #0
   2b8d8:	701a      	strb	r2, [r3, #0]
   2b8da:	230a      	movs	r3, #10
   2b8dc:	18fb      	adds	r3, r7, r3
   2b8de:	1c0a      	adds	r2, r1, #0
   2b8e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2b8e2:	68fb      	ldr	r3, [r7, #12]
   2b8e4:	681b      	ldr	r3, [r3, #0]
   2b8e6:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   2b8e8:	231b      	movs	r3, #27
   2b8ea:	18fc      	adds	r4, r7, r3
   2b8ec:	69fb      	ldr	r3, [r7, #28]
   2b8ee:	0018      	movs	r0, r3
   2b8f0:	4b2e      	ldr	r3, [pc, #184]	; (2b9ac <_tcc_set_compare_value+0xe8>)
   2b8f2:	4798      	blx	r3
   2b8f4:	0003      	movs	r3, r0
   2b8f6:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   2b8f8:	231b      	movs	r3, #27
   2b8fa:	18fb      	adds	r3, r7, r3
   2b8fc:	781b      	ldrb	r3, [r3, #0]
   2b8fe:	4a2c      	ldr	r2, [pc, #176]	; (2b9b0 <_tcc_set_compare_value+0xec>)
   2b900:	5cd3      	ldrb	r3, [r2, r3]
   2b902:	220b      	movs	r2, #11
   2b904:	18ba      	adds	r2, r7, r2
   2b906:	7812      	ldrb	r2, [r2, #0]
   2b908:	429a      	cmp	r2, r3
   2b90a:	d301      	bcc.n	2b910 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   2b90c:	2317      	movs	r3, #23
   2b90e:	e049      	b.n	2b9a4 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   2b910:	231b      	movs	r3, #27
   2b912:	18fb      	adds	r3, r7, r3
   2b914:	781a      	ldrb	r2, [r3, #0]
   2b916:	4b27      	ldr	r3, [pc, #156]	; (2b9b4 <_tcc_set_compare_value+0xf0>)
   2b918:	0092      	lsls	r2, r2, #2
   2b91a:	58d3      	ldr	r3, [r2, r3]
   2b91c:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   2b91e:	687a      	ldr	r2, [r7, #4]
   2b920:	697b      	ldr	r3, [r7, #20]
   2b922:	429a      	cmp	r2, r3
   2b924:	d901      	bls.n	2b92a <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   2b926:	2317      	movs	r3, #23
   2b928:	e03c      	b.n	2b9a4 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   2b92a:	230a      	movs	r3, #10
   2b92c:	18fb      	adds	r3, r7, r3
   2b92e:	781b      	ldrb	r3, [r3, #0]
   2b930:	2b00      	cmp	r3, #0
   2b932:	d020      	beq.n	2b976 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   2b934:	46c0      	nop			; (mov r8, r8)
   2b936:	69fb      	ldr	r3, [r7, #28]
   2b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   2b93a:	220b      	movs	r2, #11
   2b93c:	18ba      	adds	r2, r7, r2
   2b93e:	7812      	ldrb	r2, [r2, #0]
   2b940:	2180      	movs	r1, #128	; 0x80
   2b942:	0249      	lsls	r1, r1, #9
   2b944:	4091      	lsls	r1, r2
   2b946:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   2b948:	4013      	ands	r3, r2
   2b94a:	d1f4      	bne.n	2b936 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   2b94c:	46c0      	nop			; (mov r8, r8)
   2b94e:	69fb      	ldr	r3, [r7, #28]
   2b950:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   2b952:	220b      	movs	r2, #11
   2b954:	18ba      	adds	r2, r7, r2
   2b956:	7812      	ldrb	r2, [r2, #0]
   2b958:	2180      	movs	r1, #128	; 0x80
   2b95a:	0309      	lsls	r1, r1, #12
   2b95c:	4091      	lsls	r1, r2
   2b95e:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   2b960:	4013      	ands	r3, r2
   2b962:	d1f4      	bne.n	2b94e <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   2b964:	230b      	movs	r3, #11
   2b966:	18fb      	adds	r3, r7, r3
   2b968:	781a      	ldrb	r2, [r3, #0]
   2b96a:	69fb      	ldr	r3, [r7, #28]
   2b96c:	321c      	adds	r2, #28
   2b96e:	0092      	lsls	r2, r2, #2
   2b970:	6879      	ldr	r1, [r7, #4]
   2b972:	50d1      	str	r1, [r2, r3]
   2b974:	e015      	b.n	2b9a2 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   2b976:	46c0      	nop			; (mov r8, r8)
   2b978:	69fb      	ldr	r3, [r7, #28]
   2b97a:	689b      	ldr	r3, [r3, #8]
   2b97c:	220b      	movs	r2, #11
   2b97e:	18ba      	adds	r2, r7, r2
   2b980:	7812      	ldrb	r2, [r2, #0]
   2b982:	2180      	movs	r1, #128	; 0x80
   2b984:	0049      	lsls	r1, r1, #1
   2b986:	4091      	lsls	r1, r2
   2b988:	000a      	movs	r2, r1
   2b98a:	4013      	ands	r3, r2
   2b98c:	d1f4      	bne.n	2b978 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   2b98e:	230b      	movs	r3, #11
   2b990:	18fb      	adds	r3, r7, r3
   2b992:	781b      	ldrb	r3, [r3, #0]
   2b994:	69fa      	ldr	r2, [r7, #28]
   2b996:	3310      	adds	r3, #16
   2b998:	009b      	lsls	r3, r3, #2
   2b99a:	18d3      	adds	r3, r2, r3
   2b99c:	3304      	adds	r3, #4
   2b99e:	687a      	ldr	r2, [r7, #4]
   2b9a0:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   2b9a2:	2300      	movs	r3, #0
}
   2b9a4:	0018      	movs	r0, r3
   2b9a6:	46bd      	mov	sp, r7
   2b9a8:	b009      	add	sp, #36	; 0x24
   2b9aa:	bd90      	pop	{r4, r7, pc}
   2b9ac:	0002ae61 	.word	0x0002ae61
   2b9b0:	0003afe0 	.word	0x0003afe0
   2b9b4:	0003afd4 	.word	0x0003afd4

0002b9b8 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   2b9b8:	b590      	push	{r4, r7, lr}
   2b9ba:	b085      	sub	sp, #20
   2b9bc:	af00      	add	r7, sp, #0
   2b9be:	60f8      	str	r0, [r7, #12]
   2b9c0:	607a      	str	r2, [r7, #4]
   2b9c2:	230b      	movs	r3, #11
   2b9c4:	18fb      	adds	r3, r7, r3
   2b9c6:	1c0a      	adds	r2, r1, #0
   2b9c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   2b9ca:	68fb      	ldr	r3, [r7, #12]
   2b9cc:	223c      	movs	r2, #60	; 0x3c
   2b9ce:	5c9c      	ldrb	r4, [r3, r2]
   2b9d0:	687a      	ldr	r2, [r7, #4]
   2b9d2:	230b      	movs	r3, #11
   2b9d4:	18fb      	adds	r3, r7, r3
   2b9d6:	7819      	ldrb	r1, [r3, #0]
   2b9d8:	68f8      	ldr	r0, [r7, #12]
   2b9da:	0023      	movs	r3, r4
   2b9dc:	4c03      	ldr	r4, [pc, #12]	; (2b9ec <tcc_set_compare_value+0x34>)
   2b9de:	47a0      	blx	r4
   2b9e0:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   2b9e2:	0018      	movs	r0, r3
   2b9e4:	46bd      	mov	sp, r7
   2b9e6:	b005      	add	sp, #20
   2b9e8:	bd90      	pop	{r4, r7, pc}
   2b9ea:	46c0      	nop			; (mov r8, r8)
   2b9ec:	0002b8c5 	.word	0x0002b8c5

0002b9f0 <system_interrupt_enable>:
{
   2b9f0:	b580      	push	{r7, lr}
   2b9f2:	b082      	sub	sp, #8
   2b9f4:	af00      	add	r7, sp, #0
   2b9f6:	0002      	movs	r2, r0
   2b9f8:	1dfb      	adds	r3, r7, #7
   2b9fa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b9fc:	4b06      	ldr	r3, [pc, #24]	; (2ba18 <system_interrupt_enable+0x28>)
   2b9fe:	1dfa      	adds	r2, r7, #7
   2ba00:	7812      	ldrb	r2, [r2, #0]
   2ba02:	0011      	movs	r1, r2
   2ba04:	221f      	movs	r2, #31
   2ba06:	400a      	ands	r2, r1
   2ba08:	2101      	movs	r1, #1
   2ba0a:	4091      	lsls	r1, r2
   2ba0c:	000a      	movs	r2, r1
   2ba0e:	601a      	str	r2, [r3, #0]
}
   2ba10:	46c0      	nop			; (mov r8, r8)
   2ba12:	46bd      	mov	sp, r7
   2ba14:	b002      	add	sp, #8
   2ba16:	bd80      	pop	{r7, pc}
   2ba18:	e000e100 	.word	0xe000e100

0002ba1c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2ba1c:	b580      	push	{r7, lr}
   2ba1e:	b082      	sub	sp, #8
   2ba20:	af00      	add	r7, sp, #0
   2ba22:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2ba24:	4a04      	ldr	r2, [pc, #16]	; (2ba38 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2ba26:	687b      	ldr	r3, [r7, #4]
   2ba28:	18d3      	adds	r3, r2, r3
   2ba2a:	781b      	ldrb	r3, [r3, #0]
   2ba2c:	b25b      	sxtb	r3, r3
}
   2ba2e:	0018      	movs	r0, r3
   2ba30:	46bd      	mov	sp, r7
   2ba32:	b002      	add	sp, #8
   2ba34:	bd80      	pop	{r7, pc}
   2ba36:	46c0      	nop			; (mov r8, r8)
   2ba38:	20000128 	.word	0x20000128

0002ba3c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2ba3c:	b580      	push	{r7, lr}
   2ba3e:	b084      	sub	sp, #16
   2ba40:	af00      	add	r7, sp, #0
   2ba42:	60f8      	str	r0, [r7, #12]
   2ba44:	60b9      	str	r1, [r7, #8]
   2ba46:	1dfb      	adds	r3, r7, #7
   2ba48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2ba4a:	1dfb      	adds	r3, r7, #7
   2ba4c:	781b      	ldrb	r3, [r3, #0]
   2ba4e:	68fa      	ldr	r2, [r7, #12]
   2ba50:	009b      	lsls	r3, r3, #2
   2ba52:	18d3      	adds	r3, r2, r3
   2ba54:	3304      	adds	r3, #4
   2ba56:	68ba      	ldr	r2, [r7, #8]
   2ba58:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2ba5a:	68fb      	ldr	r3, [r7, #12]
   2ba5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ba5e:	1dfb      	adds	r3, r7, #7
   2ba60:	7819      	ldrb	r1, [r3, #0]
   2ba62:	4b05      	ldr	r3, [pc, #20]	; (2ba78 <tcc_register_callback+0x3c>)
   2ba64:	0089      	lsls	r1, r1, #2
   2ba66:	58cb      	ldr	r3, [r1, r3]
   2ba68:	431a      	orrs	r2, r3
   2ba6a:	68fb      	ldr	r3, [r7, #12]
   2ba6c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2ba6e:	2300      	movs	r3, #0
}
   2ba70:	0018      	movs	r0, r3
   2ba72:	46bd      	mov	sp, r7
   2ba74:	b004      	add	sp, #16
   2ba76:	bd80      	pop	{r7, pc}
   2ba78:	0003afe8 	.word	0x0003afe8

0002ba7c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2ba7c:	b580      	push	{r7, lr}
   2ba7e:	b082      	sub	sp, #8
   2ba80:	af00      	add	r7, sp, #0
   2ba82:	6078      	str	r0, [r7, #4]
   2ba84:	000a      	movs	r2, r1
   2ba86:	1cfb      	adds	r3, r7, #3
   2ba88:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ba8a:	687b      	ldr	r3, [r7, #4]
   2ba8c:	681b      	ldr	r3, [r3, #0]
   2ba8e:	0018      	movs	r0, r3
   2ba90:	4b0f      	ldr	r3, [pc, #60]	; (2bad0 <tcc_enable_callback+0x54>)
   2ba92:	4798      	blx	r3
   2ba94:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ba96:	0018      	movs	r0, r3
   2ba98:	4b0e      	ldr	r3, [pc, #56]	; (2bad4 <tcc_enable_callback+0x58>)
   2ba9a:	4798      	blx	r3
   2ba9c:	0003      	movs	r3, r0
   2ba9e:	0018      	movs	r0, r3
   2baa0:	4b0d      	ldr	r3, [pc, #52]	; (2bad8 <tcc_enable_callback+0x5c>)
   2baa2:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2baa4:	687b      	ldr	r3, [r7, #4]
   2baa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2baa8:	1cfb      	adds	r3, r7, #3
   2baaa:	7819      	ldrb	r1, [r3, #0]
   2baac:	4b0b      	ldr	r3, [pc, #44]	; (2badc <tcc_enable_callback+0x60>)
   2baae:	0089      	lsls	r1, r1, #2
   2bab0:	58cb      	ldr	r3, [r1, r3]
   2bab2:	431a      	orrs	r2, r3
   2bab4:	687b      	ldr	r3, [r7, #4]
   2bab6:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2bab8:	687b      	ldr	r3, [r7, #4]
   2baba:	681b      	ldr	r3, [r3, #0]
   2babc:	1cfa      	adds	r2, r7, #3
   2babe:	7811      	ldrb	r1, [r2, #0]
   2bac0:	4a06      	ldr	r2, [pc, #24]	; (2badc <tcc_enable_callback+0x60>)
   2bac2:	0089      	lsls	r1, r1, #2
   2bac4:	588a      	ldr	r2, [r1, r2]
   2bac6:	629a      	str	r2, [r3, #40]	; 0x28
}
   2bac8:	46c0      	nop			; (mov r8, r8)
   2baca:	46bd      	mov	sp, r7
   2bacc:	b002      	add	sp, #8
   2bace:	bd80      	pop	{r7, pc}
   2bad0:	0002ae61 	.word	0x0002ae61
   2bad4:	0002ba1d 	.word	0x0002ba1d
   2bad8:	0002b9f1 	.word	0x0002b9f1
   2badc:	0003afe8 	.word	0x0003afe8

0002bae0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2bae0:	b580      	push	{r7, lr}
   2bae2:	af00      	add	r7, sp, #0
   2bae4:	2000      	movs	r0, #0
   2bae6:	4b02      	ldr	r3, [pc, #8]	; (2baf0 <TCC0_Handler+0x10>)
   2bae8:	4798      	blx	r3
   2baea:	46c0      	nop			; (mov r8, r8)
   2baec:	46bd      	mov	sp, r7
   2baee:	bd80      	pop	{r7, pc}
   2baf0:	0002bb1d 	.word	0x0002bb1d

0002baf4 <TCC1_Handler>:
   2baf4:	b580      	push	{r7, lr}
   2baf6:	af00      	add	r7, sp, #0
   2baf8:	2001      	movs	r0, #1
   2bafa:	4b02      	ldr	r3, [pc, #8]	; (2bb04 <TCC1_Handler+0x10>)
   2bafc:	4798      	blx	r3
   2bafe:	46c0      	nop			; (mov r8, r8)
   2bb00:	46bd      	mov	sp, r7
   2bb02:	bd80      	pop	{r7, pc}
   2bb04:	0002bb1d 	.word	0x0002bb1d

0002bb08 <TCC2_Handler>:
   2bb08:	b580      	push	{r7, lr}
   2bb0a:	af00      	add	r7, sp, #0
   2bb0c:	2002      	movs	r0, #2
   2bb0e:	4b02      	ldr	r3, [pc, #8]	; (2bb18 <TCC2_Handler+0x10>)
   2bb10:	4798      	blx	r3
   2bb12:	46c0      	nop			; (mov r8, r8)
   2bb14:	46bd      	mov	sp, r7
   2bb16:	bd80      	pop	{r7, pc}
   2bb18:	0002bb1d 	.word	0x0002bb1d

0002bb1c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2bb1c:	b580      	push	{r7, lr}
   2bb1e:	b086      	sub	sp, #24
   2bb20:	af00      	add	r7, sp, #0
   2bb22:	0002      	movs	r2, r0
   2bb24:	1dfb      	adds	r3, r7, #7
   2bb26:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bb28:	1dfb      	adds	r3, r7, #7
   2bb2a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2bb2c:	4b18      	ldr	r3, [pc, #96]	; (2bb90 <_tcc_interrupt_handler+0x74>)
   2bb2e:	0092      	lsls	r2, r2, #2
   2bb30:	58d3      	ldr	r3, [r2, r3]
   2bb32:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bb34:	693b      	ldr	r3, [r7, #16]
   2bb36:	681b      	ldr	r3, [r3, #0]
   2bb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bb3a:	693b      	ldr	r3, [r7, #16]
   2bb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bb3e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bb40:	693b      	ldr	r3, [r7, #16]
   2bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bb44:	4013      	ands	r3, r2
   2bb46:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bb48:	2300      	movs	r3, #0
   2bb4a:	617b      	str	r3, [r7, #20]
   2bb4c:	e019      	b.n	2bb82 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bb4e:	4b11      	ldr	r3, [pc, #68]	; (2bb94 <_tcc_interrupt_handler+0x78>)
   2bb50:	697a      	ldr	r2, [r7, #20]
   2bb52:	0092      	lsls	r2, r2, #2
   2bb54:	58d3      	ldr	r3, [r2, r3]
   2bb56:	68fa      	ldr	r2, [r7, #12]
   2bb58:	4013      	ands	r3, r2
   2bb5a:	d00f      	beq.n	2bb7c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bb5c:	693a      	ldr	r2, [r7, #16]
   2bb5e:	697b      	ldr	r3, [r7, #20]
   2bb60:	009b      	lsls	r3, r3, #2
   2bb62:	18d3      	adds	r3, r2, r3
   2bb64:	3304      	adds	r3, #4
   2bb66:	681b      	ldr	r3, [r3, #0]
   2bb68:	693a      	ldr	r2, [r7, #16]
   2bb6a:	0010      	movs	r0, r2
   2bb6c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bb6e:	693b      	ldr	r3, [r7, #16]
   2bb70:	681b      	ldr	r3, [r3, #0]
   2bb72:	4a08      	ldr	r2, [pc, #32]	; (2bb94 <_tcc_interrupt_handler+0x78>)
   2bb74:	6979      	ldr	r1, [r7, #20]
   2bb76:	0089      	lsls	r1, r1, #2
   2bb78:	588a      	ldr	r2, [r1, r2]
   2bb7a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bb7c:	697b      	ldr	r3, [r7, #20]
   2bb7e:	3301      	adds	r3, #1
   2bb80:	617b      	str	r3, [r7, #20]
   2bb82:	697b      	ldr	r3, [r7, #20]
   2bb84:	2b0b      	cmp	r3, #11
   2bb86:	dde2      	ble.n	2bb4e <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bb88:	46c0      	nop			; (mov r8, r8)
   2bb8a:	46bd      	mov	sp, r7
   2bb8c:	b006      	add	sp, #24
   2bb8e:	bd80      	pop	{r7, pc}
   2bb90:	20005c7c 	.word	0x20005c7c
   2bb94:	0003afe8 	.word	0x0003afe8

0002bb98 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bb98:	b580      	push	{r7, lr}
   2bb9a:	b082      	sub	sp, #8
   2bb9c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bb9e:	4b2f      	ldr	r3, [pc, #188]	; (2bc5c <Reset_Handler+0xc4>)
   2bba0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bba2:	4b2f      	ldr	r3, [pc, #188]	; (2bc60 <Reset_Handler+0xc8>)
   2bba4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bba6:	687a      	ldr	r2, [r7, #4]
   2bba8:	683b      	ldr	r3, [r7, #0]
   2bbaa:	429a      	cmp	r2, r3
   2bbac:	d00c      	beq.n	2bbc8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bbae:	e007      	b.n	2bbc0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bbb0:	683b      	ldr	r3, [r7, #0]
   2bbb2:	1d1a      	adds	r2, r3, #4
   2bbb4:	603a      	str	r2, [r7, #0]
   2bbb6:	687a      	ldr	r2, [r7, #4]
   2bbb8:	1d11      	adds	r1, r2, #4
   2bbba:	6079      	str	r1, [r7, #4]
   2bbbc:	6812      	ldr	r2, [r2, #0]
   2bbbe:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bbc0:	683a      	ldr	r2, [r7, #0]
   2bbc2:	4b28      	ldr	r3, [pc, #160]	; (2bc64 <Reset_Handler+0xcc>)
   2bbc4:	429a      	cmp	r2, r3
   2bbc6:	d3f3      	bcc.n	2bbb0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bbc8:	4b27      	ldr	r3, [pc, #156]	; (2bc68 <Reset_Handler+0xd0>)
   2bbca:	603b      	str	r3, [r7, #0]
   2bbcc:	e004      	b.n	2bbd8 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bbce:	683b      	ldr	r3, [r7, #0]
   2bbd0:	1d1a      	adds	r2, r3, #4
   2bbd2:	603a      	str	r2, [r7, #0]
   2bbd4:	2200      	movs	r2, #0
   2bbd6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bbd8:	683a      	ldr	r2, [r7, #0]
   2bbda:	4b24      	ldr	r3, [pc, #144]	; (2bc6c <Reset_Handler+0xd4>)
   2bbdc:	429a      	cmp	r2, r3
   2bbde:	d3f6      	bcc.n	2bbce <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bbe0:	4b23      	ldr	r3, [pc, #140]	; (2bc70 <Reset_Handler+0xd8>)
   2bbe2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bbe4:	4b23      	ldr	r3, [pc, #140]	; (2bc74 <Reset_Handler+0xdc>)
   2bbe6:	687a      	ldr	r2, [r7, #4]
   2bbe8:	21ff      	movs	r1, #255	; 0xff
   2bbea:	438a      	bics	r2, r1
   2bbec:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bbee:	4a22      	ldr	r2, [pc, #136]	; (2bc78 <Reset_Handler+0xe0>)
   2bbf0:	2390      	movs	r3, #144	; 0x90
   2bbf2:	005b      	lsls	r3, r3, #1
   2bbf4:	2102      	movs	r1, #2
   2bbf6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bbf8:	4a20      	ldr	r2, [pc, #128]	; (2bc7c <Reset_Handler+0xe4>)
   2bbfa:	78d3      	ldrb	r3, [r2, #3]
   2bbfc:	2103      	movs	r1, #3
   2bbfe:	438b      	bics	r3, r1
   2bc00:	1c19      	adds	r1, r3, #0
   2bc02:	2302      	movs	r3, #2
   2bc04:	430b      	orrs	r3, r1
   2bc06:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bc08:	4a1c      	ldr	r2, [pc, #112]	; (2bc7c <Reset_Handler+0xe4>)
   2bc0a:	78d3      	ldrb	r3, [r2, #3]
   2bc0c:	210c      	movs	r1, #12
   2bc0e:	438b      	bics	r3, r1
   2bc10:	1c19      	adds	r1, r3, #0
   2bc12:	2308      	movs	r3, #8
   2bc14:	430b      	orrs	r3, r1
   2bc16:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bc18:	4a19      	ldr	r2, [pc, #100]	; (2bc80 <Reset_Handler+0xe8>)
   2bc1a:	7b93      	ldrb	r3, [r2, #14]
   2bc1c:	2130      	movs	r1, #48	; 0x30
   2bc1e:	438b      	bics	r3, r1
   2bc20:	1c19      	adds	r1, r3, #0
   2bc22:	2320      	movs	r3, #32
   2bc24:	430b      	orrs	r3, r1
   2bc26:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bc28:	4a15      	ldr	r2, [pc, #84]	; (2bc80 <Reset_Handler+0xe8>)
   2bc2a:	7b93      	ldrb	r3, [r2, #14]
   2bc2c:	210c      	movs	r1, #12
   2bc2e:	438b      	bics	r3, r1
   2bc30:	1c19      	adds	r1, r3, #0
   2bc32:	2308      	movs	r3, #8
   2bc34:	430b      	orrs	r3, r1
   2bc36:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bc38:	4a11      	ldr	r2, [pc, #68]	; (2bc80 <Reset_Handler+0xe8>)
   2bc3a:	7b93      	ldrb	r3, [r2, #14]
   2bc3c:	2103      	movs	r1, #3
   2bc3e:	438b      	bics	r3, r1
   2bc40:	1c19      	adds	r1, r3, #0
   2bc42:	2302      	movs	r3, #2
   2bc44:	430b      	orrs	r3, r1
   2bc46:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bc48:	4a0e      	ldr	r2, [pc, #56]	; (2bc84 <Reset_Handler+0xec>)
   2bc4a:	6853      	ldr	r3, [r2, #4]
   2bc4c:	2180      	movs	r1, #128	; 0x80
   2bc4e:	430b      	orrs	r3, r1
   2bc50:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2bc52:	4b0d      	ldr	r3, [pc, #52]	; (2bc88 <Reset_Handler+0xf0>)
   2bc54:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bc56:	4b0d      	ldr	r3, [pc, #52]	; (2bc8c <Reset_Handler+0xf4>)
   2bc58:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bc5a:	e7fe      	b.n	2bc5a <Reset_Handler+0xc2>
   2bc5c:	0003be20 	.word	0x0003be20
   2bc60:	20000000 	.word	0x20000000
   2bc64:	20000300 	.word	0x20000300
   2bc68:	20000300 	.word	0x20000300
   2bc6c:	20005cec 	.word	0x20005cec
   2bc70:	00012000 	.word	0x00012000
   2bc74:	e000ed00 	.word	0xe000ed00
   2bc78:	41007000 	.word	0x41007000
   2bc7c:	41005000 	.word	0x41005000
   2bc80:	41004800 	.word	0x41004800
   2bc84:	41004000 	.word	0x41004000
   2bc88:	0003615d 	.word	0x0003615d
   2bc8c:	000333cd 	.word	0x000333cd

0002bc90 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bc90:	b580      	push	{r7, lr}
   2bc92:	af00      	add	r7, sp, #0
  __asm volatile (
   2bc94:	2004      	movs	r0, #4
   2bc96:	4671      	mov	r1, lr
   2bc98:	4208      	tst	r0, r1
   2bc9a:	d002      	beq.n	2bca2 <_MSP>
   2bc9c:	f3ef 8009 	mrs	r0, PSP
   2bca0:	e001      	b.n	2bca6 <_HALT>

0002bca2 <_MSP>:
   2bca2:	f3ef 8008 	mrs	r0, MSP

0002bca6 <_HALT>:
   2bca6:	6941      	ldr	r1, [r0, #20]
   2bca8:	e004      	b.n	2bcb4 <HardFault_HandlerC>
   2bcaa:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bcac:	46c0      	nop			; (mov r8, r8)
   2bcae:	46bd      	mov	sp, r7
   2bcb0:	bd80      	pop	{r7, pc}
	...

0002bcb4 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bcb4:	b580      	push	{r7, lr}
   2bcb6:	b090      	sub	sp, #64	; 0x40
   2bcb8:	af00      	add	r7, sp, #0
   2bcba:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bcbc:	687b      	ldr	r3, [r7, #4]
   2bcbe:	681b      	ldr	r3, [r3, #0]
   2bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bcc2:	687b      	ldr	r3, [r7, #4]
   2bcc4:	685b      	ldr	r3, [r3, #4]
   2bcc6:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bcc8:	687b      	ldr	r3, [r7, #4]
   2bcca:	689b      	ldr	r3, [r3, #8]
   2bccc:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bcce:	687b      	ldr	r3, [r7, #4]
   2bcd0:	68db      	ldr	r3, [r3, #12]
   2bcd2:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bcd4:	687b      	ldr	r3, [r7, #4]
   2bcd6:	691b      	ldr	r3, [r3, #16]
   2bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bcda:	687b      	ldr	r3, [r7, #4]
   2bcdc:	695b      	ldr	r3, [r3, #20]
   2bcde:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bce0:	687b      	ldr	r3, [r7, #4]
   2bce2:	699b      	ldr	r3, [r3, #24]
   2bce4:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bce6:	687b      	ldr	r3, [r7, #4]
   2bce8:	69db      	ldr	r3, [r3, #28]
   2bcea:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bcec:	4b0b      	ldr	r3, [pc, #44]	; (2bd1c <HardFault_HandlerC+0x68>)
   2bcee:	681b      	ldr	r3, [r3, #0]
   2bcf0:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bcf2:	4b0b      	ldr	r3, [pc, #44]	; (2bd20 <HardFault_HandlerC+0x6c>)
   2bcf4:	681b      	ldr	r3, [r3, #0]
   2bcf6:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bcf8:	4b0a      	ldr	r3, [pc, #40]	; (2bd24 <HardFault_HandlerC+0x70>)
   2bcfa:	681b      	ldr	r3, [r3, #0]
   2bcfc:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2bcfe:	4b0a      	ldr	r3, [pc, #40]	; (2bd28 <HardFault_HandlerC+0x74>)
   2bd00:	681b      	ldr	r3, [r3, #0]
   2bd02:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2bd04:	4b09      	ldr	r3, [pc, #36]	; (2bd2c <HardFault_HandlerC+0x78>)
   2bd06:	681b      	ldr	r3, [r3, #0]
   2bd08:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2bd0a:	4b09      	ldr	r3, [pc, #36]	; (2bd30 <HardFault_HandlerC+0x7c>)
   2bd0c:	681b      	ldr	r3, [r3, #0]
   2bd0e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bd10:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bd12:	46c0      	nop			; (mov r8, r8)
   2bd14:	46bd      	mov	sp, r7
   2bd16:	b010      	add	sp, #64	; 0x40
   2bd18:	bd80      	pop	{r7, pc}
   2bd1a:	46c0      	nop			; (mov r8, r8)
   2bd1c:	e000ed28 	.word	0xe000ed28
   2bd20:	e000ed2c 	.word	0xe000ed2c
   2bd24:	e000ed30 	.word	0xe000ed30
   2bd28:	e000ed3c 	.word	0xe000ed3c
   2bd2c:	e000ed34 	.word	0xe000ed34
   2bd30:	e000ed38 	.word	0xe000ed38

0002bd34 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bd34:	b580      	push	{r7, lr}
   2bd36:	b086      	sub	sp, #24
   2bd38:	af00      	add	r7, sp, #0
   2bd3a:	60f8      	str	r0, [r7, #12]
   2bd3c:	60b9      	str	r1, [r7, #8]
   2bd3e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bd40:	2300      	movs	r3, #0
   2bd42:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bd44:	68fb      	ldr	r3, [r7, #12]
   2bd46:	2b00      	cmp	r3, #0
   2bd48:	d012      	beq.n	2bd70 <_read+0x3c>
		return -1;
   2bd4a:	2301      	movs	r3, #1
   2bd4c:	425b      	negs	r3, r3
   2bd4e:	e013      	b.n	2bd78 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bd50:	4b0b      	ldr	r3, [pc, #44]	; (2bd80 <_read+0x4c>)
   2bd52:	681a      	ldr	r2, [r3, #0]
   2bd54:	4b0b      	ldr	r3, [pc, #44]	; (2bd84 <_read+0x50>)
   2bd56:	681b      	ldr	r3, [r3, #0]
   2bd58:	68b9      	ldr	r1, [r7, #8]
   2bd5a:	0018      	movs	r0, r3
   2bd5c:	4790      	blx	r2
		ptr++;
   2bd5e:	68bb      	ldr	r3, [r7, #8]
   2bd60:	3301      	adds	r3, #1
   2bd62:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bd64:	697b      	ldr	r3, [r7, #20]
   2bd66:	3301      	adds	r3, #1
   2bd68:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bd6a:	687b      	ldr	r3, [r7, #4]
   2bd6c:	3b01      	subs	r3, #1
   2bd6e:	607b      	str	r3, [r7, #4]
   2bd70:	687b      	ldr	r3, [r7, #4]
   2bd72:	2b00      	cmp	r3, #0
   2bd74:	dcec      	bgt.n	2bd50 <_read+0x1c>
	}
	return nChars;
   2bd76:	697b      	ldr	r3, [r7, #20]
}
   2bd78:	0018      	movs	r0, r3
   2bd7a:	46bd      	mov	sp, r7
   2bd7c:	b006      	add	sp, #24
   2bd7e:	bd80      	pop	{r7, pc}
   2bd80:	20005c88 	.word	0x20005c88
   2bd84:	20005c90 	.word	0x20005c90

0002bd88 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bd88:	b580      	push	{r7, lr}
   2bd8a:	b086      	sub	sp, #24
   2bd8c:	af00      	add	r7, sp, #0
   2bd8e:	60f8      	str	r0, [r7, #12]
   2bd90:	60b9      	str	r1, [r7, #8]
   2bd92:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bd94:	2300      	movs	r3, #0
   2bd96:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bd98:	68fb      	ldr	r3, [r7, #12]
   2bd9a:	2b01      	cmp	r3, #1
   2bd9c:	d01d      	beq.n	2bdda <_write+0x52>
   2bd9e:	68fb      	ldr	r3, [r7, #12]
   2bda0:	2b02      	cmp	r3, #2
   2bda2:	d01a      	beq.n	2bdda <_write+0x52>
   2bda4:	68fb      	ldr	r3, [r7, #12]
   2bda6:	2b03      	cmp	r3, #3
   2bda8:	d017      	beq.n	2bdda <_write+0x52>
		return -1;
   2bdaa:	2301      	movs	r3, #1
   2bdac:	425b      	negs	r3, r3
   2bdae:	e018      	b.n	2bde2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2bdb0:	4b0e      	ldr	r3, [pc, #56]	; (2bdec <_write+0x64>)
   2bdb2:	681a      	ldr	r2, [r3, #0]
   2bdb4:	4b0e      	ldr	r3, [pc, #56]	; (2bdf0 <_write+0x68>)
   2bdb6:	6818      	ldr	r0, [r3, #0]
   2bdb8:	68bb      	ldr	r3, [r7, #8]
   2bdba:	1c59      	adds	r1, r3, #1
   2bdbc:	60b9      	str	r1, [r7, #8]
   2bdbe:	781b      	ldrb	r3, [r3, #0]
   2bdc0:	0019      	movs	r1, r3
   2bdc2:	4790      	blx	r2
   2bdc4:	1e03      	subs	r3, r0, #0
   2bdc6:	da02      	bge.n	2bdce <_write+0x46>
			return -1;
   2bdc8:	2301      	movs	r3, #1
   2bdca:	425b      	negs	r3, r3
   2bdcc:	e009      	b.n	2bde2 <_write+0x5a>
		}
		++nChars;
   2bdce:	697b      	ldr	r3, [r7, #20]
   2bdd0:	3301      	adds	r3, #1
   2bdd2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bdd4:	687b      	ldr	r3, [r7, #4]
   2bdd6:	3b01      	subs	r3, #1
   2bdd8:	607b      	str	r3, [r7, #4]
   2bdda:	687b      	ldr	r3, [r7, #4]
   2bddc:	2b00      	cmp	r3, #0
   2bdde:	d1e7      	bne.n	2bdb0 <_write+0x28>
	}
	return nChars;
   2bde0:	697b      	ldr	r3, [r7, #20]
}
   2bde2:	0018      	movs	r0, r3
   2bde4:	46bd      	mov	sp, r7
   2bde6:	b006      	add	sp, #24
   2bde8:	bd80      	pop	{r7, pc}
   2bdea:	46c0      	nop			; (mov r8, r8)
   2bdec:	20005c8c 	.word	0x20005c8c
   2bdf0:	20005c90 	.word	0x20005c90

0002bdf4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2bdf4:	b580      	push	{r7, lr}
   2bdf6:	b084      	sub	sp, #16
   2bdf8:	af00      	add	r7, sp, #0
   2bdfa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bdfc:	4b0a      	ldr	r3, [pc, #40]	; (2be28 <_sbrk+0x34>)
   2bdfe:	681b      	ldr	r3, [r3, #0]
   2be00:	2b00      	cmp	r3, #0
   2be02:	d102      	bne.n	2be0a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2be04:	4b08      	ldr	r3, [pc, #32]	; (2be28 <_sbrk+0x34>)
   2be06:	4a09      	ldr	r2, [pc, #36]	; (2be2c <_sbrk+0x38>)
   2be08:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2be0a:	4b07      	ldr	r3, [pc, #28]	; (2be28 <_sbrk+0x34>)
   2be0c:	681b      	ldr	r3, [r3, #0]
   2be0e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2be10:	4b05      	ldr	r3, [pc, #20]	; (2be28 <_sbrk+0x34>)
   2be12:	681a      	ldr	r2, [r3, #0]
   2be14:	687b      	ldr	r3, [r7, #4]
   2be16:	18d2      	adds	r2, r2, r3
   2be18:	4b03      	ldr	r3, [pc, #12]	; (2be28 <_sbrk+0x34>)
   2be1a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2be1c:	68fb      	ldr	r3, [r7, #12]
}
   2be1e:	0018      	movs	r0, r3
   2be20:	46bd      	mov	sp, r7
   2be22:	b004      	add	sp, #16
   2be24:	bd80      	pop	{r7, pc}
   2be26:	46c0      	nop			; (mov r8, r8)
   2be28:	200042ec 	.word	0x200042ec
   2be2c:	20007cf0 	.word	0x20007cf0

0002be30 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2be30:	b580      	push	{r7, lr}
   2be32:	b082      	sub	sp, #8
   2be34:	af00      	add	r7, sp, #0
   2be36:	6078      	str	r0, [r7, #4]
	return -1;
   2be38:	2301      	movs	r3, #1
   2be3a:	425b      	negs	r3, r3
}
   2be3c:	0018      	movs	r0, r3
   2be3e:	46bd      	mov	sp, r7
   2be40:	b002      	add	sp, #8
   2be42:	bd80      	pop	{r7, pc}

0002be44 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2be44:	b580      	push	{r7, lr}
   2be46:	b082      	sub	sp, #8
   2be48:	af00      	add	r7, sp, #0
   2be4a:	6078      	str	r0, [r7, #4]
   2be4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2be4e:	683b      	ldr	r3, [r7, #0]
   2be50:	2280      	movs	r2, #128	; 0x80
   2be52:	0192      	lsls	r2, r2, #6
   2be54:	605a      	str	r2, [r3, #4]

	return 0;
   2be56:	2300      	movs	r3, #0
}
   2be58:	0018      	movs	r0, r3
   2be5a:	46bd      	mov	sp, r7
   2be5c:	b002      	add	sp, #8
   2be5e:	bd80      	pop	{r7, pc}

0002be60 <_isatty>:

extern int _isatty(int file)
{
   2be60:	b580      	push	{r7, lr}
   2be62:	b082      	sub	sp, #8
   2be64:	af00      	add	r7, sp, #0
   2be66:	6078      	str	r0, [r7, #4]
	return 1;
   2be68:	2301      	movs	r3, #1
}
   2be6a:	0018      	movs	r0, r3
   2be6c:	46bd      	mov	sp, r7
   2be6e:	b002      	add	sp, #8
   2be70:	bd80      	pop	{r7, pc}

0002be72 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2be72:	b580      	push	{r7, lr}
   2be74:	b084      	sub	sp, #16
   2be76:	af00      	add	r7, sp, #0
   2be78:	60f8      	str	r0, [r7, #12]
   2be7a:	60b9      	str	r1, [r7, #8]
   2be7c:	607a      	str	r2, [r7, #4]
	return 0;
   2be7e:	2300      	movs	r3, #0
}
   2be80:	0018      	movs	r0, r3
   2be82:	46bd      	mov	sp, r7
   2be84:	b004      	add	sp, #16
   2be86:	bd80      	pop	{r7, pc}

0002be88 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2be88:	b580      	push	{r7, lr}
   2be8a:	b082      	sub	sp, #8
   2be8c:	af00      	add	r7, sp, #0
   2be8e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2be90:	687b      	ldr	r3, [r7, #4]
   2be92:	2200      	movs	r2, #0
   2be94:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2be96:	687b      	ldr	r3, [r7, #4]
   2be98:	2200      	movs	r2, #0
   2be9a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2be9c:	687b      	ldr	r3, [r7, #4]
   2be9e:	2200      	movs	r2, #0
   2bea0:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2bea2:	687b      	ldr	r3, [r7, #4]
   2bea4:	2200      	movs	r2, #0
   2bea6:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2bea8:	687b      	ldr	r3, [r7, #4]
   2beaa:	2201      	movs	r2, #1
   2beac:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2beae:	687b      	ldr	r3, [r7, #4]
   2beb0:	2201      	movs	r2, #1
   2beb2:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2beb4:	687b      	ldr	r3, [r7, #4]
   2beb6:	22fa      	movs	r2, #250	; 0xfa
   2beb8:	00d2      	lsls	r2, r2, #3
   2beba:	80da      	strh	r2, [r3, #6]
}
   2bebc:	46c0      	nop			; (mov r8, r8)
   2bebe:	46bd      	mov	sp, r7
   2bec0:	b002      	add	sp, #8
   2bec2:	bd80      	pop	{r7, pc}

0002bec4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2bec4:	b580      	push	{r7, lr}
   2bec6:	b086      	sub	sp, #24
   2bec8:	af00      	add	r7, sp, #0
   2beca:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2becc:	230c      	movs	r3, #12
   2bece:	18fb      	adds	r3, r7, r3
   2bed0:	0018      	movs	r0, r3
   2bed2:	4b23      	ldr	r3, [pc, #140]	; (2bf60 <rtc_calendar_get_config_defaults+0x9c>)
   2bed4:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2bed6:	687b      	ldr	r3, [r7, #4]
   2bed8:	22a0      	movs	r2, #160	; 0xa0
   2beda:	0112      	lsls	r2, r2, #4
   2bedc:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2bede:	687b      	ldr	r3, [r7, #4]
   2bee0:	2200      	movs	r2, #0
   2bee2:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2bee4:	687b      	ldr	r3, [r7, #4]
   2bee6:	2200      	movs	r2, #0
   2bee8:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2beea:	687b      	ldr	r3, [r7, #4]
   2beec:	2200      	movs	r2, #0
   2beee:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2bef0:	687b      	ldr	r3, [r7, #4]
   2bef2:	22fa      	movs	r2, #250	; 0xfa
   2bef4:	00d2      	lsls	r2, r2, #3
   2bef6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bef8:	2317      	movs	r3, #23
   2befa:	18fb      	adds	r3, r7, r3
   2befc:	2200      	movs	r2, #0
   2befe:	701a      	strb	r2, [r3, #0]
   2bf00:	e025      	b.n	2bf4e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2bf02:	2317      	movs	r3, #23
   2bf04:	18fb      	adds	r3, r7, r3
   2bf06:	781a      	ldrb	r2, [r3, #0]
   2bf08:	6879      	ldr	r1, [r7, #4]
   2bf0a:	2008      	movs	r0, #8
   2bf0c:	0013      	movs	r3, r2
   2bf0e:	009b      	lsls	r3, r3, #2
   2bf10:	189b      	adds	r3, r3, r2
   2bf12:	005b      	lsls	r3, r3, #1
   2bf14:	18cb      	adds	r3, r1, r3
   2bf16:	181a      	adds	r2, r3, r0
   2bf18:	230c      	movs	r3, #12
   2bf1a:	18fb      	adds	r3, r7, r3
   2bf1c:	0010      	movs	r0, r2
   2bf1e:	0019      	movs	r1, r3
   2bf20:	2308      	movs	r3, #8
   2bf22:	001a      	movs	r2, r3
   2bf24:	4b0f      	ldr	r3, [pc, #60]	; (2bf64 <rtc_calendar_get_config_defaults+0xa0>)
   2bf26:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bf28:	2317      	movs	r3, #23
   2bf2a:	18fb      	adds	r3, r7, r3
   2bf2c:	781a      	ldrb	r2, [r3, #0]
   2bf2e:	6879      	ldr	r1, [r7, #4]
   2bf30:	0013      	movs	r3, r2
   2bf32:	009b      	lsls	r3, r3, #2
   2bf34:	189b      	adds	r3, r3, r2
   2bf36:	005b      	lsls	r3, r3, #1
   2bf38:	18cb      	adds	r3, r1, r3
   2bf3a:	3310      	adds	r3, #16
   2bf3c:	2206      	movs	r2, #6
   2bf3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bf40:	2317      	movs	r3, #23
   2bf42:	18fb      	adds	r3, r7, r3
   2bf44:	781a      	ldrb	r2, [r3, #0]
   2bf46:	2317      	movs	r3, #23
   2bf48:	18fb      	adds	r3, r7, r3
   2bf4a:	3201      	adds	r2, #1
   2bf4c:	701a      	strb	r2, [r3, #0]
   2bf4e:	2317      	movs	r3, #23
   2bf50:	18fb      	adds	r3, r7, r3
   2bf52:	781b      	ldrb	r3, [r3, #0]
   2bf54:	2b00      	cmp	r3, #0
   2bf56:	d0d4      	beq.n	2bf02 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2bf58:	46c0      	nop			; (mov r8, r8)
   2bf5a:	46bd      	mov	sp, r7
   2bf5c:	b006      	add	sp, #24
   2bf5e:	bd80      	pop	{r7, pc}
   2bf60:	0002be89 	.word	0x0002be89
   2bf64:	000361cd 	.word	0x000361cd

0002bf68 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2bf68:	b580      	push	{r7, lr}
   2bf6a:	b088      	sub	sp, #32
   2bf6c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2bf6e:	230c      	movs	r3, #12
   2bf70:	18fb      	adds	r3, r7, r3
   2bf72:	0018      	movs	r0, r3
   2bf74:	4b1a      	ldr	r3, [pc, #104]	; (2bfe0 <configure_rtc_calendar+0x78>)
   2bf76:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2bf78:	1d3b      	adds	r3, r7, #4
   2bf7a:	0018      	movs	r0, r3
   2bf7c:	4b19      	ldr	r3, [pc, #100]	; (2bfe4 <configure_rtc_calendar+0x7c>)
   2bf7e:	4798      	blx	r3
	init_time.year   = 2014;
   2bf80:	1d3b      	adds	r3, r7, #4
   2bf82:	4a19      	ldr	r2, [pc, #100]	; (2bfe8 <configure_rtc_calendar+0x80>)
   2bf84:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2bf86:	1d3b      	adds	r3, r7, #4
   2bf88:	2201      	movs	r2, #1
   2bf8a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2bf8c:	1d3b      	adds	r3, r7, #4
   2bf8e:	2201      	movs	r2, #1
   2bf90:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2bf92:	1d3b      	adds	r3, r7, #4
   2bf94:	2200      	movs	r2, #0
   2bf96:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2bf98:	1d3b      	adds	r3, r7, #4
   2bf9a:	2200      	movs	r2, #0
   2bf9c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2bf9e:	1d3b      	adds	r3, r7, #4
   2bfa0:	2204      	movs	r2, #4
   2bfa2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2bfa4:	230c      	movs	r3, #12
   2bfa6:	18fb      	adds	r3, r7, r3
   2bfa8:	2201      	movs	r2, #1
   2bfaa:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2bfac:	230c      	movs	r3, #12
   2bfae:	18fb      	adds	r3, r7, r3
   2bfb0:	1d3a      	adds	r2, r7, #4
   2bfb2:	3308      	adds	r3, #8
   2bfb4:	ca03      	ldmia	r2!, {r0, r1}
   2bfb6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bfb8:	230c      	movs	r3, #12
   2bfba:	18fb      	adds	r3, r7, r3
   2bfbc:	2206      	movs	r2, #6
   2bfbe:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2bfc0:	230c      	movs	r3, #12
   2bfc2:	18fa      	adds	r2, r7, r3
   2bfc4:	4909      	ldr	r1, [pc, #36]	; (2bfec <configure_rtc_calendar+0x84>)
   2bfc6:	4b0a      	ldr	r3, [pc, #40]	; (2bff0 <configure_rtc_calendar+0x88>)
   2bfc8:	0018      	movs	r0, r3
   2bfca:	4b0a      	ldr	r3, [pc, #40]	; (2bff4 <configure_rtc_calendar+0x8c>)
   2bfcc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2bfce:	4b08      	ldr	r3, [pc, #32]	; (2bff0 <configure_rtc_calendar+0x88>)
   2bfd0:	0018      	movs	r0, r3
   2bfd2:	4b09      	ldr	r3, [pc, #36]	; (2bff8 <configure_rtc_calendar+0x90>)
   2bfd4:	4798      	blx	r3
}
   2bfd6:	46c0      	nop			; (mov r8, r8)
   2bfd8:	46bd      	mov	sp, r7
   2bfda:	b008      	add	sp, #32
   2bfdc:	bd80      	pop	{r7, pc}
   2bfde:	46c0      	nop			; (mov r8, r8)
   2bfe0:	0002bec5 	.word	0x0002bec5
   2bfe4:	0002be89 	.word	0x0002be89
   2bfe8:	000007de 	.word	0x000007de
   2bfec:	40001400 	.word	0x40001400
   2bff0:	20005c94 	.word	0x20005c94
   2bff4:	00027979 	.word	0x00027979
   2bff8:	000276a5 	.word	0x000276a5

0002bffc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2bffc:	b590      	push	{r4, r7, lr}
   2bffe:	b085      	sub	sp, #20
   2c000:	af00      	add	r7, sp, #0
   2c002:	0002      	movs	r2, r0
   2c004:	1dfb      	adds	r3, r7, #7
   2c006:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2c008:	4b1a      	ldr	r3, [pc, #104]	; (2c074 <disk_initialize+0x78>)
   2c00a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2c00c:	1dfb      	adds	r3, r7, #7
   2c00e:	781b      	ldrb	r3, [r3, #0]
   2c010:	2b01      	cmp	r3, #1
   2c012:	d901      	bls.n	2c018 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2c014:	2301      	movs	r3, #1
   2c016:	e029      	b.n	2c06c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2c018:	2300      	movs	r3, #0
   2c01a:	60fb      	str	r3, [r7, #12]
   2c01c:	e010      	b.n	2c040 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2c01e:	230b      	movs	r3, #11
   2c020:	18fc      	adds	r4, r7, r3
   2c022:	1dfb      	adds	r3, r7, #7
   2c024:	781b      	ldrb	r3, [r3, #0]
   2c026:	0018      	movs	r0, r3
   2c028:	4b13      	ldr	r3, [pc, #76]	; (2c078 <disk_initialize+0x7c>)
   2c02a:	4798      	blx	r3
   2c02c:	0003      	movs	r3, r0
   2c02e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2c030:	230b      	movs	r3, #11
   2c032:	18fb      	adds	r3, r7, r3
   2c034:	781b      	ldrb	r3, [r3, #0]
   2c036:	2b03      	cmp	r3, #3
   2c038:	d106      	bne.n	2c048 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2c03a:	68fb      	ldr	r3, [r7, #12]
   2c03c:	3301      	adds	r3, #1
   2c03e:	60fb      	str	r3, [r7, #12]
   2c040:	68fb      	ldr	r3, [r7, #12]
   2c042:	2b01      	cmp	r3, #1
   2c044:	ddeb      	ble.n	2c01e <disk_initialize+0x22>
   2c046:	e000      	b.n	2c04a <disk_initialize+0x4e>
			break;
   2c048:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2c04a:	230b      	movs	r3, #11
   2c04c:	18fb      	adds	r3, r7, r3
   2c04e:	781b      	ldrb	r3, [r3, #0]
   2c050:	2b00      	cmp	r3, #0
   2c052:	d001      	beq.n	2c058 <disk_initialize+0x5c>
		return STA_NOINIT;
   2c054:	2301      	movs	r3, #1
   2c056:	e009      	b.n	2c06c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2c058:	1dfb      	adds	r3, r7, #7
   2c05a:	781b      	ldrb	r3, [r3, #0]
   2c05c:	0018      	movs	r0, r3
   2c05e:	4b07      	ldr	r3, [pc, #28]	; (2c07c <disk_initialize+0x80>)
   2c060:	4798      	blx	r3
   2c062:	1e03      	subs	r3, r0, #0
   2c064:	d001      	beq.n	2c06a <disk_initialize+0x6e>
		return STA_PROTECT;
   2c066:	2304      	movs	r3, #4
   2c068:	e000      	b.n	2c06c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2c06a:	2300      	movs	r3, #0
}
   2c06c:	0018      	movs	r0, r3
   2c06e:	46bd      	mov	sp, r7
   2c070:	b005      	add	sp, #20
   2c072:	bd90      	pop	{r4, r7, pc}
   2c074:	0002bf69 	.word	0x0002bf69
   2c078:	00026ba1 	.word	0x00026ba1
   2c07c:	00026c59 	.word	0x00026c59

0002c080 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c080:	b580      	push	{r7, lr}
   2c082:	b082      	sub	sp, #8
   2c084:	af00      	add	r7, sp, #0
   2c086:	0002      	movs	r2, r0
   2c088:	1dfb      	adds	r3, r7, #7
   2c08a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c08c:	1dfb      	adds	r3, r7, #7
   2c08e:	781b      	ldrb	r3, [r3, #0]
   2c090:	0018      	movs	r0, r3
   2c092:	4b08      	ldr	r3, [pc, #32]	; (2c0b4 <disk_status+0x34>)
   2c094:	4798      	blx	r3
   2c096:	1e03      	subs	r3, r0, #0
   2c098:	d002      	beq.n	2c0a0 <disk_status+0x20>
   2c09a:	2b02      	cmp	r3, #2
   2c09c:	d002      	beq.n	2c0a4 <disk_status+0x24>
   2c09e:	e003      	b.n	2c0a8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c0a0:	2300      	movs	r3, #0
   2c0a2:	e002      	b.n	2c0aa <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c0a4:	2303      	movs	r3, #3
   2c0a6:	e000      	b.n	2c0aa <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c0a8:	2301      	movs	r3, #1
	}
}
   2c0aa:	0018      	movs	r0, r3
   2c0ac:	46bd      	mov	sp, r7
   2c0ae:	b002      	add	sp, #8
   2c0b0:	bd80      	pop	{r7, pc}
   2c0b2:	46c0      	nop			; (mov r8, r8)
   2c0b4:	00026ba1 	.word	0x00026ba1

0002c0b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c0b8:	b590      	push	{r4, r7, lr}
   2c0ba:	b089      	sub	sp, #36	; 0x24
   2c0bc:	af00      	add	r7, sp, #0
   2c0be:	60b9      	str	r1, [r7, #8]
   2c0c0:	607a      	str	r2, [r7, #4]
   2c0c2:	0019      	movs	r1, r3
   2c0c4:	230f      	movs	r3, #15
   2c0c6:	18fb      	adds	r3, r7, r3
   2c0c8:	1c02      	adds	r2, r0, #0
   2c0ca:	701a      	strb	r2, [r3, #0]
   2c0cc:	230e      	movs	r3, #14
   2c0ce:	18fb      	adds	r3, r7, r3
   2c0d0:	1c0a      	adds	r2, r1, #0
   2c0d2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c0d4:	231b      	movs	r3, #27
   2c0d6:	18fc      	adds	r4, r7, r3
   2c0d8:	230f      	movs	r3, #15
   2c0da:	18fb      	adds	r3, r7, r3
   2c0dc:	781b      	ldrb	r3, [r3, #0]
   2c0de:	0018      	movs	r0, r3
   2c0e0:	4b28      	ldr	r3, [pc, #160]	; (2c184 <disk_read+0xcc>)
   2c0e2:	4798      	blx	r3
   2c0e4:	0003      	movs	r3, r0
   2c0e6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c0e8:	231b      	movs	r3, #27
   2c0ea:	18fb      	adds	r3, r7, r3
   2c0ec:	781b      	ldrb	r3, [r3, #0]
   2c0ee:	2b00      	cmp	r3, #0
   2c0f0:	d101      	bne.n	2c0f6 <disk_read+0x3e>
		return RES_ERROR;
   2c0f2:	2301      	movs	r3, #1
   2c0f4:	e042      	b.n	2c17c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c0f6:	2314      	movs	r3, #20
   2c0f8:	18fa      	adds	r2, r7, r3
   2c0fa:	230f      	movs	r3, #15
   2c0fc:	18fb      	adds	r3, r7, r3
   2c0fe:	781b      	ldrb	r3, [r3, #0]
   2c100:	0011      	movs	r1, r2
   2c102:	0018      	movs	r0, r3
   2c104:	4b20      	ldr	r3, [pc, #128]	; (2c188 <disk_read+0xd0>)
   2c106:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c108:	230e      	movs	r3, #14
   2c10a:	18fb      	adds	r3, r7, r3
   2c10c:	781b      	ldrb	r3, [r3, #0]
   2c10e:	221b      	movs	r2, #27
   2c110:	18ba      	adds	r2, r7, r2
   2c112:	7812      	ldrb	r2, [r2, #0]
   2c114:	4353      	muls	r3, r2
   2c116:	001a      	movs	r2, r3
   2c118:	687b      	ldr	r3, [r7, #4]
   2c11a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c11c:	697b      	ldr	r3, [r7, #20]
   2c11e:	3301      	adds	r3, #1
   2c120:	211b      	movs	r1, #27
   2c122:	1879      	adds	r1, r7, r1
   2c124:	7809      	ldrb	r1, [r1, #0]
   2c126:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c128:	429a      	cmp	r2, r3
   2c12a:	d901      	bls.n	2c130 <disk_read+0x78>
		return RES_PARERR;
   2c12c:	2304      	movs	r3, #4
   2c12e:	e025      	b.n	2c17c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c130:	2300      	movs	r3, #0
   2c132:	61fb      	str	r3, [r7, #28]
   2c134:	e01b      	b.n	2c16e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c136:	231b      	movs	r3, #27
   2c138:	18fb      	adds	r3, r7, r3
   2c13a:	781b      	ldrb	r3, [r3, #0]
   2c13c:	69fa      	ldr	r2, [r7, #28]
   2c13e:	435a      	muls	r2, r3
   2c140:	687b      	ldr	r3, [r7, #4]
   2c142:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c144:	231b      	movs	r3, #27
   2c146:	18fb      	adds	r3, r7, r3
   2c148:	781b      	ldrb	r3, [r3, #0]
   2c14a:	69fa      	ldr	r2, [r7, #28]
   2c14c:	4353      	muls	r3, r2
   2c14e:	025b      	lsls	r3, r3, #9
   2c150:	68ba      	ldr	r2, [r7, #8]
   2c152:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c154:	230f      	movs	r3, #15
   2c156:	18fb      	adds	r3, r7, r3
   2c158:	781b      	ldrb	r3, [r3, #0]
   2c15a:	0018      	movs	r0, r3
   2c15c:	4b0b      	ldr	r3, [pc, #44]	; (2c18c <disk_read+0xd4>)
   2c15e:	4798      	blx	r3
   2c160:	1e03      	subs	r3, r0, #0
   2c162:	d001      	beq.n	2c168 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c164:	2301      	movs	r3, #1
   2c166:	e009      	b.n	2c17c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c168:	69fb      	ldr	r3, [r7, #28]
   2c16a:	3301      	adds	r3, #1
   2c16c:	61fb      	str	r3, [r7, #28]
   2c16e:	230e      	movs	r3, #14
   2c170:	18fb      	adds	r3, r7, r3
   2c172:	781a      	ldrb	r2, [r3, #0]
   2c174:	69fb      	ldr	r3, [r7, #28]
   2c176:	429a      	cmp	r2, r3
   2c178:	d8dd      	bhi.n	2c136 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c17a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c17c:	0018      	movs	r0, r3
   2c17e:	46bd      	mov	sp, r7
   2c180:	b009      	add	sp, #36	; 0x24
   2c182:	bd90      	pop	{r4, r7, pc}
   2c184:	00026c2d 	.word	0x00026c2d
   2c188:	00026be1 	.word	0x00026be1
   2c18c:	00026ca1 	.word	0x00026ca1

0002c190 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c190:	b590      	push	{r4, r7, lr}
   2c192:	b089      	sub	sp, #36	; 0x24
   2c194:	af00      	add	r7, sp, #0
   2c196:	60b9      	str	r1, [r7, #8]
   2c198:	607a      	str	r2, [r7, #4]
   2c19a:	0019      	movs	r1, r3
   2c19c:	230f      	movs	r3, #15
   2c19e:	18fb      	adds	r3, r7, r3
   2c1a0:	1c02      	adds	r2, r0, #0
   2c1a2:	701a      	strb	r2, [r3, #0]
   2c1a4:	230e      	movs	r3, #14
   2c1a6:	18fb      	adds	r3, r7, r3
   2c1a8:	1c0a      	adds	r2, r1, #0
   2c1aa:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c1ac:	231b      	movs	r3, #27
   2c1ae:	18fc      	adds	r4, r7, r3
   2c1b0:	230f      	movs	r3, #15
   2c1b2:	18fb      	adds	r3, r7, r3
   2c1b4:	781b      	ldrb	r3, [r3, #0]
   2c1b6:	0018      	movs	r0, r3
   2c1b8:	4b28      	ldr	r3, [pc, #160]	; (2c25c <disk_write+0xcc>)
   2c1ba:	4798      	blx	r3
   2c1bc:	0003      	movs	r3, r0
   2c1be:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c1c0:	231b      	movs	r3, #27
   2c1c2:	18fb      	adds	r3, r7, r3
   2c1c4:	781b      	ldrb	r3, [r3, #0]
   2c1c6:	2b00      	cmp	r3, #0
   2c1c8:	d101      	bne.n	2c1ce <disk_write+0x3e>
		return RES_ERROR;
   2c1ca:	2301      	movs	r3, #1
   2c1cc:	e042      	b.n	2c254 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c1ce:	2314      	movs	r3, #20
   2c1d0:	18fa      	adds	r2, r7, r3
   2c1d2:	230f      	movs	r3, #15
   2c1d4:	18fb      	adds	r3, r7, r3
   2c1d6:	781b      	ldrb	r3, [r3, #0]
   2c1d8:	0011      	movs	r1, r2
   2c1da:	0018      	movs	r0, r3
   2c1dc:	4b20      	ldr	r3, [pc, #128]	; (2c260 <disk_write+0xd0>)
   2c1de:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c1e0:	230e      	movs	r3, #14
   2c1e2:	18fb      	adds	r3, r7, r3
   2c1e4:	781b      	ldrb	r3, [r3, #0]
   2c1e6:	221b      	movs	r2, #27
   2c1e8:	18ba      	adds	r2, r7, r2
   2c1ea:	7812      	ldrb	r2, [r2, #0]
   2c1ec:	4353      	muls	r3, r2
   2c1ee:	001a      	movs	r2, r3
   2c1f0:	687b      	ldr	r3, [r7, #4]
   2c1f2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c1f4:	697b      	ldr	r3, [r7, #20]
   2c1f6:	3301      	adds	r3, #1
   2c1f8:	211b      	movs	r1, #27
   2c1fa:	1879      	adds	r1, r7, r1
   2c1fc:	7809      	ldrb	r1, [r1, #0]
   2c1fe:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c200:	429a      	cmp	r2, r3
   2c202:	d901      	bls.n	2c208 <disk_write+0x78>
		return RES_PARERR;
   2c204:	2304      	movs	r3, #4
   2c206:	e025      	b.n	2c254 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c208:	2300      	movs	r3, #0
   2c20a:	61fb      	str	r3, [r7, #28]
   2c20c:	e01b      	b.n	2c246 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c20e:	231b      	movs	r3, #27
   2c210:	18fb      	adds	r3, r7, r3
   2c212:	781b      	ldrb	r3, [r3, #0]
   2c214:	69fa      	ldr	r2, [r7, #28]
   2c216:	435a      	muls	r2, r3
   2c218:	687b      	ldr	r3, [r7, #4]
   2c21a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c21c:	231b      	movs	r3, #27
   2c21e:	18fb      	adds	r3, r7, r3
   2c220:	781b      	ldrb	r3, [r3, #0]
   2c222:	69fa      	ldr	r2, [r7, #28]
   2c224:	4353      	muls	r3, r2
   2c226:	025b      	lsls	r3, r3, #9
   2c228:	68ba      	ldr	r2, [r7, #8]
   2c22a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c22c:	230f      	movs	r3, #15
   2c22e:	18fb      	adds	r3, r7, r3
   2c230:	781b      	ldrb	r3, [r3, #0]
   2c232:	0018      	movs	r0, r3
   2c234:	4b0b      	ldr	r3, [pc, #44]	; (2c264 <disk_write+0xd4>)
   2c236:	4798      	blx	r3
   2c238:	1e03      	subs	r3, r0, #0
   2c23a:	d001      	beq.n	2c240 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c23c:	2301      	movs	r3, #1
   2c23e:	e009      	b.n	2c254 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c240:	69fb      	ldr	r3, [r7, #28]
   2c242:	3301      	adds	r3, #1
   2c244:	61fb      	str	r3, [r7, #28]
   2c246:	230e      	movs	r3, #14
   2c248:	18fb      	adds	r3, r7, r3
   2c24a:	781a      	ldrb	r2, [r3, #0]
   2c24c:	69fb      	ldr	r3, [r7, #28]
   2c24e:	429a      	cmp	r2, r3
   2c250:	d8dd      	bhi.n	2c20e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c252:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c254:	0018      	movs	r0, r3
   2c256:	46bd      	mov	sp, r7
   2c258:	b009      	add	sp, #36	; 0x24
   2c25a:	bd90      	pop	{r4, r7, pc}
   2c25c:	00026c2d 	.word	0x00026c2d
   2c260:	00026be1 	.word	0x00026be1
   2c264:	00026cf5 	.word	0x00026cf5

0002c268 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c268:	b590      	push	{r4, r7, lr}
   2c26a:	b085      	sub	sp, #20
   2c26c:	af00      	add	r7, sp, #0
   2c26e:	603a      	str	r2, [r7, #0]
   2c270:	1dfb      	adds	r3, r7, #7
   2c272:	1c02      	adds	r2, r0, #0
   2c274:	701a      	strb	r2, [r3, #0]
   2c276:	1dbb      	adds	r3, r7, #6
   2c278:	1c0a      	adds	r2, r1, #0
   2c27a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c27c:	230f      	movs	r3, #15
   2c27e:	18fb      	adds	r3, r7, r3
   2c280:	2204      	movs	r2, #4
   2c282:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c284:	1dbb      	adds	r3, r7, #6
   2c286:	781b      	ldrb	r3, [r3, #0]
   2c288:	2b01      	cmp	r3, #1
   2c28a:	d00f      	beq.n	2c2ac <disk_ioctl+0x44>
   2c28c:	dc02      	bgt.n	2c294 <disk_ioctl+0x2c>
   2c28e:	2b00      	cmp	r3, #0
   2c290:	d044      	beq.n	2c31c <disk_ioctl+0xb4>
   2c292:	e054      	b.n	2c33e <disk_ioctl+0xd6>
   2c294:	2b02      	cmp	r3, #2
   2c296:	d01a      	beq.n	2c2ce <disk_ioctl+0x66>
   2c298:	2b03      	cmp	r3, #3
   2c29a:	d150      	bne.n	2c33e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c29c:	683b      	ldr	r3, [r7, #0]
   2c29e:	2201      	movs	r2, #1
   2c2a0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c2a2:	230f      	movs	r3, #15
   2c2a4:	18fb      	adds	r3, r7, r3
   2c2a6:	2200      	movs	r2, #0
   2c2a8:	701a      	strb	r2, [r3, #0]
		break;
   2c2aa:	e04c      	b.n	2c346 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c2ac:	2308      	movs	r3, #8
   2c2ae:	18fa      	adds	r2, r7, r3
   2c2b0:	1dfb      	adds	r3, r7, #7
   2c2b2:	781b      	ldrb	r3, [r3, #0]
   2c2b4:	0011      	movs	r1, r2
   2c2b6:	0018      	movs	r0, r3
   2c2b8:	4b26      	ldr	r3, [pc, #152]	; (2c354 <disk_ioctl+0xec>)
   2c2ba:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c2bc:	68bb      	ldr	r3, [r7, #8]
   2c2be:	1c5a      	adds	r2, r3, #1
   2c2c0:	683b      	ldr	r3, [r7, #0]
   2c2c2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c2c4:	230f      	movs	r3, #15
   2c2c6:	18fb      	adds	r3, r7, r3
   2c2c8:	2200      	movs	r2, #0
   2c2ca:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c2cc:	e03b      	b.n	2c346 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c2ce:	230e      	movs	r3, #14
   2c2d0:	18fc      	adds	r4, r7, r3
   2c2d2:	1dfb      	adds	r3, r7, #7
   2c2d4:	781b      	ldrb	r3, [r3, #0]
   2c2d6:	0018      	movs	r0, r3
   2c2d8:	4b1f      	ldr	r3, [pc, #124]	; (2c358 <disk_ioctl+0xf0>)
   2c2da:	4798      	blx	r3
   2c2dc:	0003      	movs	r3, r0
   2c2de:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c2e0:	230e      	movs	r3, #14
   2c2e2:	18fb      	adds	r3, r7, r3
   2c2e4:	781b      	ldrb	r3, [r3, #0]
   2c2e6:	2b01      	cmp	r3, #1
   2c2e8:	d010      	beq.n	2c30c <disk_ioctl+0xa4>
   2c2ea:	230e      	movs	r3, #14
   2c2ec:	18fb      	adds	r3, r7, r3
   2c2ee:	781b      	ldrb	r3, [r3, #0]
   2c2f0:	2b02      	cmp	r3, #2
   2c2f2:	d00b      	beq.n	2c30c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c2f4:	230e      	movs	r3, #14
   2c2f6:	18fb      	adds	r3, r7, r3
   2c2f8:	781b      	ldrb	r3, [r3, #0]
   2c2fa:	2b04      	cmp	r3, #4
   2c2fc:	d006      	beq.n	2c30c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c2fe:	230e      	movs	r3, #14
   2c300:	18fb      	adds	r3, r7, r3
   2c302:	781b      	ldrb	r3, [r3, #0]
   2c304:	2b08      	cmp	r3, #8
   2c306:	d001      	beq.n	2c30c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c308:	2301      	movs	r3, #1
   2c30a:	e01f      	b.n	2c34c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c30c:	683b      	ldr	r3, [r7, #0]
   2c30e:	2200      	movs	r2, #0
   2c310:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c312:	230f      	movs	r3, #15
   2c314:	18fb      	adds	r3, r7, r3
   2c316:	2200      	movs	r2, #0
   2c318:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c31a:	e014      	b.n	2c346 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c31c:	1dfb      	adds	r3, r7, #7
   2c31e:	781b      	ldrb	r3, [r3, #0]
   2c320:	0018      	movs	r0, r3
   2c322:	4b0e      	ldr	r3, [pc, #56]	; (2c35c <disk_ioctl+0xf4>)
   2c324:	4798      	blx	r3
   2c326:	1e03      	subs	r3, r0, #0
   2c328:	d104      	bne.n	2c334 <disk_ioctl+0xcc>
			res = RES_OK;
   2c32a:	230f      	movs	r3, #15
   2c32c:	18fb      	adds	r3, r7, r3
   2c32e:	2200      	movs	r2, #0
   2c330:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c332:	e008      	b.n	2c346 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c334:	230f      	movs	r3, #15
   2c336:	18fb      	adds	r3, r7, r3
   2c338:	2203      	movs	r2, #3
   2c33a:	701a      	strb	r2, [r3, #0]
		break;
   2c33c:	e003      	b.n	2c346 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c33e:	230f      	movs	r3, #15
   2c340:	18fb      	adds	r3, r7, r3
   2c342:	2204      	movs	r2, #4
   2c344:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c346:	230f      	movs	r3, #15
   2c348:	18fb      	adds	r3, r7, r3
   2c34a:	781b      	ldrb	r3, [r3, #0]
}
   2c34c:	0018      	movs	r0, r3
   2c34e:	46bd      	mov	sp, r7
   2c350:	b005      	add	sp, #20
   2c352:	bd90      	pop	{r4, r7, pc}
   2c354:	00026be1 	.word	0x00026be1
   2c358:	00026c2d 	.word	0x00026c2d
   2c35c:	00026ba1 	.word	0x00026ba1

0002c360 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c360:	b580      	push	{r7, lr}
   2c362:	b084      	sub	sp, #16
   2c364:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c366:	1d3a      	adds	r2, r7, #4
   2c368:	4b12      	ldr	r3, [pc, #72]	; (2c3b4 <get_fattime+0x54>)
   2c36a:	0011      	movs	r1, r2
   2c36c:	0018      	movs	r0, r3
   2c36e:	4b12      	ldr	r3, [pc, #72]	; (2c3b8 <get_fattime+0x58>)
   2c370:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c372:	1d3b      	adds	r3, r7, #4
   2c374:	88db      	ldrh	r3, [r3, #6]
   2c376:	4a11      	ldr	r2, [pc, #68]	; (2c3bc <get_fattime+0x5c>)
   2c378:	4694      	mov	ip, r2
   2c37a:	4463      	add	r3, ip
   2c37c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c37e:	1d3b      	adds	r3, r7, #4
   2c380:	795b      	ldrb	r3, [r3, #5]
   2c382:	055b      	lsls	r3, r3, #21
   2c384:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c386:	1d3b      	adds	r3, r7, #4
   2c388:	791b      	ldrb	r3, [r3, #4]
   2c38a:	041b      	lsls	r3, r3, #16
   2c38c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c38e:	1d3b      	adds	r3, r7, #4
   2c390:	789b      	ldrb	r3, [r3, #2]
   2c392:	02db      	lsls	r3, r3, #11
   2c394:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c396:	1d3b      	adds	r3, r7, #4
   2c398:	785b      	ldrb	r3, [r3, #1]
   2c39a:	015b      	lsls	r3, r3, #5
   2c39c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c39e:	1d3a      	adds	r2, r7, #4
   2c3a0:	7812      	ldrb	r2, [r2, #0]
   2c3a2:	0852      	lsrs	r2, r2, #1
   2c3a4:	b2d2      	uxtb	r2, r2
   2c3a6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c3a8:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c3aa:	68fb      	ldr	r3, [r7, #12]
}
   2c3ac:	0018      	movs	r0, r3
   2c3ae:	46bd      	mov	sp, r7
   2c3b0:	b004      	add	sp, #16
   2c3b2:	bd80      	pop	{r7, pc}
   2c3b4:	20005c94 	.word	0x20005c94
   2c3b8:	00027a0d 	.word	0x00027a0d
   2c3bc:	fffff844 	.word	0xfffff844

0002c3c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c3c0:	b580      	push	{r7, lr}
   2c3c2:	b086      	sub	sp, #24
   2c3c4:	af00      	add	r7, sp, #0
   2c3c6:	60f8      	str	r0, [r7, #12]
   2c3c8:	60b9      	str	r1, [r7, #8]
   2c3ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c3cc:	68fb      	ldr	r3, [r7, #12]
   2c3ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c3d0:	68bb      	ldr	r3, [r7, #8]
   2c3d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c3d4:	e007      	b.n	2c3e6 <mem_cpy+0x26>
		*d++ = *s++;
   2c3d6:	697b      	ldr	r3, [r7, #20]
   2c3d8:	1c5a      	adds	r2, r3, #1
   2c3da:	617a      	str	r2, [r7, #20]
   2c3dc:	693a      	ldr	r2, [r7, #16]
   2c3de:	1c51      	adds	r1, r2, #1
   2c3e0:	6139      	str	r1, [r7, #16]
   2c3e2:	7812      	ldrb	r2, [r2, #0]
   2c3e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c3e6:	687b      	ldr	r3, [r7, #4]
   2c3e8:	1e5a      	subs	r2, r3, #1
   2c3ea:	607a      	str	r2, [r7, #4]
   2c3ec:	2b00      	cmp	r3, #0
   2c3ee:	d1f2      	bne.n	2c3d6 <mem_cpy+0x16>
}
   2c3f0:	46c0      	nop			; (mov r8, r8)
   2c3f2:	46bd      	mov	sp, r7
   2c3f4:	b006      	add	sp, #24
   2c3f6:	bd80      	pop	{r7, pc}

0002c3f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c3f8:	b580      	push	{r7, lr}
   2c3fa:	b086      	sub	sp, #24
   2c3fc:	af00      	add	r7, sp, #0
   2c3fe:	60f8      	str	r0, [r7, #12]
   2c400:	60b9      	str	r1, [r7, #8]
   2c402:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c404:	68fb      	ldr	r3, [r7, #12]
   2c406:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c408:	e005      	b.n	2c416 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c40a:	697b      	ldr	r3, [r7, #20]
   2c40c:	1c5a      	adds	r2, r3, #1
   2c40e:	617a      	str	r2, [r7, #20]
   2c410:	68ba      	ldr	r2, [r7, #8]
   2c412:	b2d2      	uxtb	r2, r2
   2c414:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c416:	687b      	ldr	r3, [r7, #4]
   2c418:	1e5a      	subs	r2, r3, #1
   2c41a:	607a      	str	r2, [r7, #4]
   2c41c:	2b00      	cmp	r3, #0
   2c41e:	d1f4      	bne.n	2c40a <mem_set+0x12>
}
   2c420:	46c0      	nop			; (mov r8, r8)
   2c422:	46bd      	mov	sp, r7
   2c424:	b006      	add	sp, #24
   2c426:	bd80      	pop	{r7, pc}

0002c428 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c428:	b580      	push	{r7, lr}
   2c42a:	b088      	sub	sp, #32
   2c42c:	af00      	add	r7, sp, #0
   2c42e:	60f8      	str	r0, [r7, #12]
   2c430:	60b9      	str	r1, [r7, #8]
   2c432:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c434:	68fb      	ldr	r3, [r7, #12]
   2c436:	61fb      	str	r3, [r7, #28]
   2c438:	68bb      	ldr	r3, [r7, #8]
   2c43a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c43c:	2300      	movs	r3, #0
   2c43e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c440:	46c0      	nop			; (mov r8, r8)
   2c442:	687b      	ldr	r3, [r7, #4]
   2c444:	1e5a      	subs	r2, r3, #1
   2c446:	607a      	str	r2, [r7, #4]
   2c448:	2b00      	cmp	r3, #0
   2c44a:	d00d      	beq.n	2c468 <mem_cmp+0x40>
   2c44c:	69fb      	ldr	r3, [r7, #28]
   2c44e:	1c5a      	adds	r2, r3, #1
   2c450:	61fa      	str	r2, [r7, #28]
   2c452:	781b      	ldrb	r3, [r3, #0]
   2c454:	0019      	movs	r1, r3
   2c456:	69bb      	ldr	r3, [r7, #24]
   2c458:	1c5a      	adds	r2, r3, #1
   2c45a:	61ba      	str	r2, [r7, #24]
   2c45c:	781b      	ldrb	r3, [r3, #0]
   2c45e:	1acb      	subs	r3, r1, r3
   2c460:	617b      	str	r3, [r7, #20]
   2c462:	697b      	ldr	r3, [r7, #20]
   2c464:	2b00      	cmp	r3, #0
   2c466:	d0ec      	beq.n	2c442 <mem_cmp+0x1a>
	return r;
   2c468:	697b      	ldr	r3, [r7, #20]
}
   2c46a:	0018      	movs	r0, r3
   2c46c:	46bd      	mov	sp, r7
   2c46e:	b008      	add	sp, #32
   2c470:	bd80      	pop	{r7, pc}

0002c472 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c472:	b580      	push	{r7, lr}
   2c474:	b082      	sub	sp, #8
   2c476:	af00      	add	r7, sp, #0
   2c478:	6078      	str	r0, [r7, #4]
   2c47a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c47c:	e002      	b.n	2c484 <chk_chr+0x12>
   2c47e:	687b      	ldr	r3, [r7, #4]
   2c480:	3301      	adds	r3, #1
   2c482:	607b      	str	r3, [r7, #4]
   2c484:	687b      	ldr	r3, [r7, #4]
   2c486:	781b      	ldrb	r3, [r3, #0]
   2c488:	2b00      	cmp	r3, #0
   2c48a:	d005      	beq.n	2c498 <chk_chr+0x26>
   2c48c:	687b      	ldr	r3, [r7, #4]
   2c48e:	781b      	ldrb	r3, [r3, #0]
   2c490:	001a      	movs	r2, r3
   2c492:	683b      	ldr	r3, [r7, #0]
   2c494:	429a      	cmp	r2, r3
   2c496:	d1f2      	bne.n	2c47e <chk_chr+0xc>
	return *str;
   2c498:	687b      	ldr	r3, [r7, #4]
   2c49a:	781b      	ldrb	r3, [r3, #0]
}
   2c49c:	0018      	movs	r0, r3
   2c49e:	46bd      	mov	sp, r7
   2c4a0:	b002      	add	sp, #8
   2c4a2:	bd80      	pop	{r7, pc}

0002c4a4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c4a4:	b590      	push	{r4, r7, lr}
   2c4a6:	b085      	sub	sp, #20
   2c4a8:	af00      	add	r7, sp, #0
   2c4aa:	6078      	str	r0, [r7, #4]
   2c4ac:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c4ae:	687b      	ldr	r3, [r7, #4]
   2c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c4b2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c4b4:	68fa      	ldr	r2, [r7, #12]
   2c4b6:	683b      	ldr	r3, [r7, #0]
   2c4b8:	429a      	cmp	r2, r3
   2c4ba:	d04e      	beq.n	2c55a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c4bc:	687b      	ldr	r3, [r7, #4]
   2c4be:	791b      	ldrb	r3, [r3, #4]
   2c4c0:	2b00      	cmp	r3, #0
   2c4c2:	d037      	beq.n	2c534 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c4c4:	687b      	ldr	r3, [r7, #4]
   2c4c6:	7858      	ldrb	r0, [r3, #1]
   2c4c8:	687b      	ldr	r3, [r7, #4]
   2c4ca:	3330      	adds	r3, #48	; 0x30
   2c4cc:	0019      	movs	r1, r3
   2c4ce:	68fa      	ldr	r2, [r7, #12]
   2c4d0:	2301      	movs	r3, #1
   2c4d2:	4c24      	ldr	r4, [pc, #144]	; (2c564 <move_window+0xc0>)
   2c4d4:	47a0      	blx	r4
   2c4d6:	1e03      	subs	r3, r0, #0
   2c4d8:	d001      	beq.n	2c4de <move_window+0x3a>
				return FR_DISK_ERR;
   2c4da:	2301      	movs	r3, #1
   2c4dc:	e03e      	b.n	2c55c <move_window+0xb8>
			fs->wflag = 0;
   2c4de:	687b      	ldr	r3, [r7, #4]
   2c4e0:	2200      	movs	r2, #0
   2c4e2:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c4e4:	687b      	ldr	r3, [r7, #4]
   2c4e6:	6a1a      	ldr	r2, [r3, #32]
   2c4e8:	687b      	ldr	r3, [r7, #4]
   2c4ea:	69db      	ldr	r3, [r3, #28]
   2c4ec:	18d2      	adds	r2, r2, r3
   2c4ee:	68fb      	ldr	r3, [r7, #12]
   2c4f0:	429a      	cmp	r2, r3
   2c4f2:	d91f      	bls.n	2c534 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c4f4:	230b      	movs	r3, #11
   2c4f6:	18fb      	adds	r3, r7, r3
   2c4f8:	687a      	ldr	r2, [r7, #4]
   2c4fa:	78d2      	ldrb	r2, [r2, #3]
   2c4fc:	701a      	strb	r2, [r3, #0]
   2c4fe:	e014      	b.n	2c52a <move_window+0x86>
					wsect += fs->fsize;
   2c500:	687b      	ldr	r3, [r7, #4]
   2c502:	69db      	ldr	r3, [r3, #28]
   2c504:	68fa      	ldr	r2, [r7, #12]
   2c506:	18d3      	adds	r3, r2, r3
   2c508:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c50a:	687b      	ldr	r3, [r7, #4]
   2c50c:	7858      	ldrb	r0, [r3, #1]
   2c50e:	687b      	ldr	r3, [r7, #4]
   2c510:	3330      	adds	r3, #48	; 0x30
   2c512:	0019      	movs	r1, r3
   2c514:	68fa      	ldr	r2, [r7, #12]
   2c516:	2301      	movs	r3, #1
   2c518:	4c12      	ldr	r4, [pc, #72]	; (2c564 <move_window+0xc0>)
   2c51a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c51c:	230b      	movs	r3, #11
   2c51e:	18fb      	adds	r3, r7, r3
   2c520:	781a      	ldrb	r2, [r3, #0]
   2c522:	230b      	movs	r3, #11
   2c524:	18fb      	adds	r3, r7, r3
   2c526:	3a01      	subs	r2, #1
   2c528:	701a      	strb	r2, [r3, #0]
   2c52a:	230b      	movs	r3, #11
   2c52c:	18fb      	adds	r3, r7, r3
   2c52e:	781b      	ldrb	r3, [r3, #0]
   2c530:	2b01      	cmp	r3, #1
   2c532:	d8e5      	bhi.n	2c500 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c534:	683b      	ldr	r3, [r7, #0]
   2c536:	2b00      	cmp	r3, #0
   2c538:	d00f      	beq.n	2c55a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c53a:	687b      	ldr	r3, [r7, #4]
   2c53c:	7858      	ldrb	r0, [r3, #1]
   2c53e:	687b      	ldr	r3, [r7, #4]
   2c540:	3330      	adds	r3, #48	; 0x30
   2c542:	0019      	movs	r1, r3
   2c544:	683a      	ldr	r2, [r7, #0]
   2c546:	2301      	movs	r3, #1
   2c548:	4c07      	ldr	r4, [pc, #28]	; (2c568 <move_window+0xc4>)
   2c54a:	47a0      	blx	r4
   2c54c:	1e03      	subs	r3, r0, #0
   2c54e:	d001      	beq.n	2c554 <move_window+0xb0>
				return FR_DISK_ERR;
   2c550:	2301      	movs	r3, #1
   2c552:	e003      	b.n	2c55c <move_window+0xb8>
			fs->winsect = sector;
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	683a      	ldr	r2, [r7, #0]
   2c558:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c55a:	2300      	movs	r3, #0
}
   2c55c:	0018      	movs	r0, r3
   2c55e:	46bd      	mov	sp, r7
   2c560:	b005      	add	sp, #20
   2c562:	bd90      	pop	{r4, r7, pc}
   2c564:	0002c191 	.word	0x0002c191
   2c568:	0002c0b9 	.word	0x0002c0b9

0002c56c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c56c:	b590      	push	{r4, r7, lr}
   2c56e:	b085      	sub	sp, #20
   2c570:	af00      	add	r7, sp, #0
   2c572:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c574:	230f      	movs	r3, #15
   2c576:	18fc      	adds	r4, r7, r3
   2c578:	687b      	ldr	r3, [r7, #4]
   2c57a:	2100      	movs	r1, #0
   2c57c:	0018      	movs	r0, r3
   2c57e:	4b52      	ldr	r3, [pc, #328]	; (2c6c8 <sync+0x15c>)
   2c580:	4798      	blx	r3
   2c582:	0003      	movs	r3, r0
   2c584:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c586:	230f      	movs	r3, #15
   2c588:	18fb      	adds	r3, r7, r3
   2c58a:	781b      	ldrb	r3, [r3, #0]
   2c58c:	2b00      	cmp	r3, #0
   2c58e:	d000      	beq.n	2c592 <sync+0x26>
   2c590:	e093      	b.n	2c6ba <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c592:	687b      	ldr	r3, [r7, #4]
   2c594:	781b      	ldrb	r3, [r3, #0]
   2c596:	2b03      	cmp	r3, #3
   2c598:	d000      	beq.n	2c59c <sync+0x30>
   2c59a:	e081      	b.n	2c6a0 <sync+0x134>
   2c59c:	687b      	ldr	r3, [r7, #4]
   2c59e:	795b      	ldrb	r3, [r3, #5]
   2c5a0:	2b00      	cmp	r3, #0
   2c5a2:	d07d      	beq.n	2c6a0 <sync+0x134>
			fs->winsect = 0;
   2c5a4:	687b      	ldr	r3, [r7, #4]
   2c5a6:	2200      	movs	r2, #0
   2c5a8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c5aa:	687b      	ldr	r3, [r7, #4]
   2c5ac:	3330      	adds	r3, #48	; 0x30
   2c5ae:	0018      	movs	r0, r3
   2c5b0:	2380      	movs	r3, #128	; 0x80
   2c5b2:	009b      	lsls	r3, r3, #2
   2c5b4:	001a      	movs	r2, r3
   2c5b6:	2100      	movs	r1, #0
   2c5b8:	4b44      	ldr	r3, [pc, #272]	; (2c6cc <sync+0x160>)
   2c5ba:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c5bc:	687b      	ldr	r3, [r7, #4]
   2c5be:	4a44      	ldr	r2, [pc, #272]	; (2c6d0 <sync+0x164>)
   2c5c0:	2155      	movs	r1, #85	; 0x55
   2c5c2:	5499      	strb	r1, [r3, r2]
   2c5c4:	687b      	ldr	r3, [r7, #4]
   2c5c6:	4a43      	ldr	r2, [pc, #268]	; (2c6d4 <sync+0x168>)
   2c5c8:	21aa      	movs	r1, #170	; 0xaa
   2c5ca:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c5cc:	687b      	ldr	r3, [r7, #4]
   2c5ce:	2230      	movs	r2, #48	; 0x30
   2c5d0:	2152      	movs	r1, #82	; 0x52
   2c5d2:	5499      	strb	r1, [r3, r2]
   2c5d4:	687b      	ldr	r3, [r7, #4]
   2c5d6:	2231      	movs	r2, #49	; 0x31
   2c5d8:	2152      	movs	r1, #82	; 0x52
   2c5da:	5499      	strb	r1, [r3, r2]
   2c5dc:	687b      	ldr	r3, [r7, #4]
   2c5de:	2232      	movs	r2, #50	; 0x32
   2c5e0:	2161      	movs	r1, #97	; 0x61
   2c5e2:	5499      	strb	r1, [r3, r2]
   2c5e4:	687b      	ldr	r3, [r7, #4]
   2c5e6:	2233      	movs	r2, #51	; 0x33
   2c5e8:	2141      	movs	r1, #65	; 0x41
   2c5ea:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c5ec:	687a      	ldr	r2, [r7, #4]
   2c5ee:	2385      	movs	r3, #133	; 0x85
   2c5f0:	009b      	lsls	r3, r3, #2
   2c5f2:	2172      	movs	r1, #114	; 0x72
   2c5f4:	54d1      	strb	r1, [r2, r3]
   2c5f6:	687b      	ldr	r3, [r7, #4]
   2c5f8:	4a37      	ldr	r2, [pc, #220]	; (2c6d8 <sync+0x16c>)
   2c5fa:	2172      	movs	r1, #114	; 0x72
   2c5fc:	5499      	strb	r1, [r3, r2]
   2c5fe:	687b      	ldr	r3, [r7, #4]
   2c600:	4a36      	ldr	r2, [pc, #216]	; (2c6dc <sync+0x170>)
   2c602:	2141      	movs	r1, #65	; 0x41
   2c604:	5499      	strb	r1, [r3, r2]
   2c606:	687b      	ldr	r3, [r7, #4]
   2c608:	4a35      	ldr	r2, [pc, #212]	; (2c6e0 <sync+0x174>)
   2c60a:	2161      	movs	r1, #97	; 0x61
   2c60c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c60e:	687b      	ldr	r3, [r7, #4]
   2c610:	691b      	ldr	r3, [r3, #16]
   2c612:	b2d9      	uxtb	r1, r3
   2c614:	687a      	ldr	r2, [r7, #4]
   2c616:	2386      	movs	r3, #134	; 0x86
   2c618:	009b      	lsls	r3, r3, #2
   2c61a:	54d1      	strb	r1, [r2, r3]
   2c61c:	687b      	ldr	r3, [r7, #4]
   2c61e:	691b      	ldr	r3, [r3, #16]
   2c620:	b29b      	uxth	r3, r3
   2c622:	0a1b      	lsrs	r3, r3, #8
   2c624:	b29b      	uxth	r3, r3
   2c626:	b2d9      	uxtb	r1, r3
   2c628:	687b      	ldr	r3, [r7, #4]
   2c62a:	4a2e      	ldr	r2, [pc, #184]	; (2c6e4 <sync+0x178>)
   2c62c:	5499      	strb	r1, [r3, r2]
   2c62e:	687b      	ldr	r3, [r7, #4]
   2c630:	691b      	ldr	r3, [r3, #16]
   2c632:	0c1b      	lsrs	r3, r3, #16
   2c634:	b2d9      	uxtb	r1, r3
   2c636:	687b      	ldr	r3, [r7, #4]
   2c638:	4a2b      	ldr	r2, [pc, #172]	; (2c6e8 <sync+0x17c>)
   2c63a:	5499      	strb	r1, [r3, r2]
   2c63c:	687b      	ldr	r3, [r7, #4]
   2c63e:	691b      	ldr	r3, [r3, #16]
   2c640:	0e1b      	lsrs	r3, r3, #24
   2c642:	b2d9      	uxtb	r1, r3
   2c644:	687b      	ldr	r3, [r7, #4]
   2c646:	4a29      	ldr	r2, [pc, #164]	; (2c6ec <sync+0x180>)
   2c648:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c64a:	687b      	ldr	r3, [r7, #4]
   2c64c:	68db      	ldr	r3, [r3, #12]
   2c64e:	b2d9      	uxtb	r1, r3
   2c650:	687a      	ldr	r2, [r7, #4]
   2c652:	2387      	movs	r3, #135	; 0x87
   2c654:	009b      	lsls	r3, r3, #2
   2c656:	54d1      	strb	r1, [r2, r3]
   2c658:	687b      	ldr	r3, [r7, #4]
   2c65a:	68db      	ldr	r3, [r3, #12]
   2c65c:	b29b      	uxth	r3, r3
   2c65e:	0a1b      	lsrs	r3, r3, #8
   2c660:	b29b      	uxth	r3, r3
   2c662:	b2d9      	uxtb	r1, r3
   2c664:	687b      	ldr	r3, [r7, #4]
   2c666:	4a22      	ldr	r2, [pc, #136]	; (2c6f0 <sync+0x184>)
   2c668:	5499      	strb	r1, [r3, r2]
   2c66a:	687b      	ldr	r3, [r7, #4]
   2c66c:	68db      	ldr	r3, [r3, #12]
   2c66e:	0c1b      	lsrs	r3, r3, #16
   2c670:	b2d9      	uxtb	r1, r3
   2c672:	687b      	ldr	r3, [r7, #4]
   2c674:	4a1f      	ldr	r2, [pc, #124]	; (2c6f4 <sync+0x188>)
   2c676:	5499      	strb	r1, [r3, r2]
   2c678:	687b      	ldr	r3, [r7, #4]
   2c67a:	68db      	ldr	r3, [r3, #12]
   2c67c:	0e1b      	lsrs	r3, r3, #24
   2c67e:	b2d9      	uxtb	r1, r3
   2c680:	687b      	ldr	r3, [r7, #4]
   2c682:	4a1d      	ldr	r2, [pc, #116]	; (2c6f8 <sync+0x18c>)
   2c684:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c686:	687b      	ldr	r3, [r7, #4]
   2c688:	7858      	ldrb	r0, [r3, #1]
   2c68a:	687b      	ldr	r3, [r7, #4]
   2c68c:	3330      	adds	r3, #48	; 0x30
   2c68e:	0019      	movs	r1, r3
   2c690:	687b      	ldr	r3, [r7, #4]
   2c692:	695a      	ldr	r2, [r3, #20]
   2c694:	2301      	movs	r3, #1
   2c696:	4c19      	ldr	r4, [pc, #100]	; (2c6fc <sync+0x190>)
   2c698:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	2200      	movs	r2, #0
   2c69e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c6a0:	687b      	ldr	r3, [r7, #4]
   2c6a2:	785b      	ldrb	r3, [r3, #1]
   2c6a4:	2200      	movs	r2, #0
   2c6a6:	2100      	movs	r1, #0
   2c6a8:	0018      	movs	r0, r3
   2c6aa:	4b15      	ldr	r3, [pc, #84]	; (2c700 <sync+0x194>)
   2c6ac:	4798      	blx	r3
   2c6ae:	1e03      	subs	r3, r0, #0
   2c6b0:	d003      	beq.n	2c6ba <sync+0x14e>
			res = FR_DISK_ERR;
   2c6b2:	230f      	movs	r3, #15
   2c6b4:	18fb      	adds	r3, r7, r3
   2c6b6:	2201      	movs	r2, #1
   2c6b8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c6ba:	230f      	movs	r3, #15
   2c6bc:	18fb      	adds	r3, r7, r3
   2c6be:	781b      	ldrb	r3, [r3, #0]
}
   2c6c0:	0018      	movs	r0, r3
   2c6c2:	46bd      	mov	sp, r7
   2c6c4:	b005      	add	sp, #20
   2c6c6:	bd90      	pop	{r4, r7, pc}
   2c6c8:	0002c4a5 	.word	0x0002c4a5
   2c6cc:	0002c3f9 	.word	0x0002c3f9
   2c6d0:	0000022e 	.word	0x0000022e
   2c6d4:	0000022f 	.word	0x0000022f
   2c6d8:	00000215 	.word	0x00000215
   2c6dc:	00000216 	.word	0x00000216
   2c6e0:	00000217 	.word	0x00000217
   2c6e4:	00000219 	.word	0x00000219
   2c6e8:	0000021a 	.word	0x0000021a
   2c6ec:	0000021b 	.word	0x0000021b
   2c6f0:	0000021d 	.word	0x0000021d
   2c6f4:	0000021e 	.word	0x0000021e
   2c6f8:	0000021f 	.word	0x0000021f
   2c6fc:	0002c191 	.word	0x0002c191
   2c700:	0002c269 	.word	0x0002c269

0002c704 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c704:	b580      	push	{r7, lr}
   2c706:	b082      	sub	sp, #8
   2c708:	af00      	add	r7, sp, #0
   2c70a:	6078      	str	r0, [r7, #4]
   2c70c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c70e:	683b      	ldr	r3, [r7, #0]
   2c710:	3b02      	subs	r3, #2
   2c712:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c714:	687b      	ldr	r3, [r7, #4]
   2c716:	699b      	ldr	r3, [r3, #24]
   2c718:	1e9a      	subs	r2, r3, #2
   2c71a:	683b      	ldr	r3, [r7, #0]
   2c71c:	429a      	cmp	r2, r3
   2c71e:	d801      	bhi.n	2c724 <clust2sect+0x20>
   2c720:	2300      	movs	r3, #0
   2c722:	e007      	b.n	2c734 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c724:	687b      	ldr	r3, [r7, #4]
   2c726:	789b      	ldrb	r3, [r3, #2]
   2c728:	001a      	movs	r2, r3
   2c72a:	683b      	ldr	r3, [r7, #0]
   2c72c:	435a      	muls	r2, r3
   2c72e:	687b      	ldr	r3, [r7, #4]
   2c730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c732:	18d3      	adds	r3, r2, r3
}
   2c734:	0018      	movs	r0, r3
   2c736:	46bd      	mov	sp, r7
   2c738:	b002      	add	sp, #8
   2c73a:	bd80      	pop	{r7, pc}

0002c73c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c73c:	b580      	push	{r7, lr}
   2c73e:	b086      	sub	sp, #24
   2c740:	af00      	add	r7, sp, #0
   2c742:	6078      	str	r0, [r7, #4]
   2c744:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c746:	683b      	ldr	r3, [r7, #0]
   2c748:	2b01      	cmp	r3, #1
   2c74a:	d904      	bls.n	2c756 <get_fat+0x1a>
   2c74c:	687b      	ldr	r3, [r7, #4]
   2c74e:	699a      	ldr	r2, [r3, #24]
   2c750:	683b      	ldr	r3, [r7, #0]
   2c752:	429a      	cmp	r2, r3
   2c754:	d801      	bhi.n	2c75a <get_fat+0x1e>
		return 1;
   2c756:	2301      	movs	r3, #1
   2c758:	e09f      	b.n	2c89a <get_fat+0x15e>

	switch (fs->fs_type) {
   2c75a:	687b      	ldr	r3, [r7, #4]
   2c75c:	781b      	ldrb	r3, [r3, #0]
   2c75e:	2b02      	cmp	r3, #2
   2c760:	d048      	beq.n	2c7f4 <get_fat+0xb8>
   2c762:	2b03      	cmp	r3, #3
   2c764:	d067      	beq.n	2c836 <get_fat+0xfa>
   2c766:	2b01      	cmp	r3, #1
   2c768:	d000      	beq.n	2c76c <get_fat+0x30>
   2c76a:	e094      	b.n	2c896 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c76c:	683b      	ldr	r3, [r7, #0]
   2c76e:	617b      	str	r3, [r7, #20]
   2c770:	697b      	ldr	r3, [r7, #20]
   2c772:	085b      	lsrs	r3, r3, #1
   2c774:	697a      	ldr	r2, [r7, #20]
   2c776:	18d3      	adds	r3, r2, r3
   2c778:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c77a:	687b      	ldr	r3, [r7, #4]
   2c77c:	6a1a      	ldr	r2, [r3, #32]
   2c77e:	697b      	ldr	r3, [r7, #20]
   2c780:	0a5b      	lsrs	r3, r3, #9
   2c782:	18d2      	adds	r2, r2, r3
   2c784:	687b      	ldr	r3, [r7, #4]
   2c786:	0011      	movs	r1, r2
   2c788:	0018      	movs	r0, r3
   2c78a:	4b46      	ldr	r3, [pc, #280]	; (2c8a4 <get_fat+0x168>)
   2c78c:	4798      	blx	r3
   2c78e:	1e03      	subs	r3, r0, #0
   2c790:	d000      	beq.n	2c794 <get_fat+0x58>
   2c792:	e079      	b.n	2c888 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c794:	697b      	ldr	r3, [r7, #20]
   2c796:	05db      	lsls	r3, r3, #23
   2c798:	0ddb      	lsrs	r3, r3, #23
   2c79a:	687a      	ldr	r2, [r7, #4]
   2c79c:	2130      	movs	r1, #48	; 0x30
   2c79e:	18d3      	adds	r3, r2, r3
   2c7a0:	185b      	adds	r3, r3, r1
   2c7a2:	781b      	ldrb	r3, [r3, #0]
   2c7a4:	613b      	str	r3, [r7, #16]
   2c7a6:	697b      	ldr	r3, [r7, #20]
   2c7a8:	3301      	adds	r3, #1
   2c7aa:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c7ac:	687b      	ldr	r3, [r7, #4]
   2c7ae:	6a1a      	ldr	r2, [r3, #32]
   2c7b0:	697b      	ldr	r3, [r7, #20]
   2c7b2:	0a5b      	lsrs	r3, r3, #9
   2c7b4:	18d2      	adds	r2, r2, r3
   2c7b6:	687b      	ldr	r3, [r7, #4]
   2c7b8:	0011      	movs	r1, r2
   2c7ba:	0018      	movs	r0, r3
   2c7bc:	4b39      	ldr	r3, [pc, #228]	; (2c8a4 <get_fat+0x168>)
   2c7be:	4798      	blx	r3
   2c7c0:	1e03      	subs	r3, r0, #0
   2c7c2:	d163      	bne.n	2c88c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c7c4:	697b      	ldr	r3, [r7, #20]
   2c7c6:	05db      	lsls	r3, r3, #23
   2c7c8:	0ddb      	lsrs	r3, r3, #23
   2c7ca:	687a      	ldr	r2, [r7, #4]
   2c7cc:	2130      	movs	r1, #48	; 0x30
   2c7ce:	18d3      	adds	r3, r2, r3
   2c7d0:	185b      	adds	r3, r3, r1
   2c7d2:	781b      	ldrb	r3, [r3, #0]
   2c7d4:	021b      	lsls	r3, r3, #8
   2c7d6:	001a      	movs	r2, r3
   2c7d8:	693b      	ldr	r3, [r7, #16]
   2c7da:	4313      	orrs	r3, r2
   2c7dc:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c7de:	683b      	ldr	r3, [r7, #0]
   2c7e0:	2201      	movs	r2, #1
   2c7e2:	4013      	ands	r3, r2
   2c7e4:	d002      	beq.n	2c7ec <get_fat+0xb0>
   2c7e6:	693b      	ldr	r3, [r7, #16]
   2c7e8:	091b      	lsrs	r3, r3, #4
   2c7ea:	e056      	b.n	2c89a <get_fat+0x15e>
   2c7ec:	693b      	ldr	r3, [r7, #16]
   2c7ee:	051b      	lsls	r3, r3, #20
   2c7f0:	0d1b      	lsrs	r3, r3, #20
   2c7f2:	e052      	b.n	2c89a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c7f4:	687b      	ldr	r3, [r7, #4]
   2c7f6:	6a1a      	ldr	r2, [r3, #32]
   2c7f8:	683b      	ldr	r3, [r7, #0]
   2c7fa:	0a1b      	lsrs	r3, r3, #8
   2c7fc:	18d2      	adds	r2, r2, r3
   2c7fe:	687b      	ldr	r3, [r7, #4]
   2c800:	0011      	movs	r1, r2
   2c802:	0018      	movs	r0, r3
   2c804:	4b27      	ldr	r3, [pc, #156]	; (2c8a4 <get_fat+0x168>)
   2c806:	4798      	blx	r3
   2c808:	1e03      	subs	r3, r0, #0
   2c80a:	d141      	bne.n	2c890 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c80c:	683b      	ldr	r3, [r7, #0]
   2c80e:	005a      	lsls	r2, r3, #1
   2c810:	23ff      	movs	r3, #255	; 0xff
   2c812:	005b      	lsls	r3, r3, #1
   2c814:	4013      	ands	r3, r2
   2c816:	3330      	adds	r3, #48	; 0x30
   2c818:	687a      	ldr	r2, [r7, #4]
   2c81a:	18d3      	adds	r3, r2, r3
   2c81c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c81e:	68fb      	ldr	r3, [r7, #12]
   2c820:	3301      	adds	r3, #1
   2c822:	781b      	ldrb	r3, [r3, #0]
   2c824:	021b      	lsls	r3, r3, #8
   2c826:	b21a      	sxth	r2, r3
   2c828:	68fb      	ldr	r3, [r7, #12]
   2c82a:	781b      	ldrb	r3, [r3, #0]
   2c82c:	b21b      	sxth	r3, r3
   2c82e:	4313      	orrs	r3, r2
   2c830:	b21b      	sxth	r3, r3
   2c832:	b29b      	uxth	r3, r3
   2c834:	e031      	b.n	2c89a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c836:	687b      	ldr	r3, [r7, #4]
   2c838:	6a1a      	ldr	r2, [r3, #32]
   2c83a:	683b      	ldr	r3, [r7, #0]
   2c83c:	09db      	lsrs	r3, r3, #7
   2c83e:	18d2      	adds	r2, r2, r3
   2c840:	687b      	ldr	r3, [r7, #4]
   2c842:	0011      	movs	r1, r2
   2c844:	0018      	movs	r0, r3
   2c846:	4b17      	ldr	r3, [pc, #92]	; (2c8a4 <get_fat+0x168>)
   2c848:	4798      	blx	r3
   2c84a:	1e03      	subs	r3, r0, #0
   2c84c:	d122      	bne.n	2c894 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c84e:	683b      	ldr	r3, [r7, #0]
   2c850:	009a      	lsls	r2, r3, #2
   2c852:	23fe      	movs	r3, #254	; 0xfe
   2c854:	005b      	lsls	r3, r3, #1
   2c856:	4013      	ands	r3, r2
   2c858:	3330      	adds	r3, #48	; 0x30
   2c85a:	687a      	ldr	r2, [r7, #4]
   2c85c:	18d3      	adds	r3, r2, r3
   2c85e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c860:	68fb      	ldr	r3, [r7, #12]
   2c862:	3303      	adds	r3, #3
   2c864:	781b      	ldrb	r3, [r3, #0]
   2c866:	061a      	lsls	r2, r3, #24
   2c868:	68fb      	ldr	r3, [r7, #12]
   2c86a:	3302      	adds	r3, #2
   2c86c:	781b      	ldrb	r3, [r3, #0]
   2c86e:	041b      	lsls	r3, r3, #16
   2c870:	4313      	orrs	r3, r2
   2c872:	68fa      	ldr	r2, [r7, #12]
   2c874:	3201      	adds	r2, #1
   2c876:	7812      	ldrb	r2, [r2, #0]
   2c878:	0212      	lsls	r2, r2, #8
   2c87a:	4313      	orrs	r3, r2
   2c87c:	68fa      	ldr	r2, [r7, #12]
   2c87e:	7812      	ldrb	r2, [r2, #0]
   2c880:	4313      	orrs	r3, r2
   2c882:	011b      	lsls	r3, r3, #4
   2c884:	091b      	lsrs	r3, r3, #4
   2c886:	e008      	b.n	2c89a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c888:	46c0      	nop			; (mov r8, r8)
   2c88a:	e004      	b.n	2c896 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c88c:	46c0      	nop			; (mov r8, r8)
   2c88e:	e002      	b.n	2c896 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c890:	46c0      	nop			; (mov r8, r8)
   2c892:	e000      	b.n	2c896 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c894:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c896:	2301      	movs	r3, #1
   2c898:	425b      	negs	r3, r3
}
   2c89a:	0018      	movs	r0, r3
   2c89c:	46bd      	mov	sp, r7
   2c89e:	b006      	add	sp, #24
   2c8a0:	bd80      	pop	{r7, pc}
   2c8a2:	46c0      	nop			; (mov r8, r8)
   2c8a4:	0002c4a5 	.word	0x0002c4a5

0002c8a8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c8a8:	b590      	push	{r4, r7, lr}
   2c8aa:	b089      	sub	sp, #36	; 0x24
   2c8ac:	af00      	add	r7, sp, #0
   2c8ae:	60f8      	str	r0, [r7, #12]
   2c8b0:	60b9      	str	r1, [r7, #8]
   2c8b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c8b4:	68bb      	ldr	r3, [r7, #8]
   2c8b6:	2b01      	cmp	r3, #1
   2c8b8:	d904      	bls.n	2c8c4 <put_fat+0x1c>
   2c8ba:	68fb      	ldr	r3, [r7, #12]
   2c8bc:	699a      	ldr	r2, [r3, #24]
   2c8be:	68bb      	ldr	r3, [r7, #8]
   2c8c0:	429a      	cmp	r2, r3
   2c8c2:	d804      	bhi.n	2c8ce <put_fat+0x26>
		res = FR_INT_ERR;
   2c8c4:	231f      	movs	r3, #31
   2c8c6:	18fb      	adds	r3, r7, r3
   2c8c8:	2202      	movs	r2, #2
   2c8ca:	701a      	strb	r2, [r3, #0]
   2c8cc:	e100      	b.n	2cad0 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c8ce:	68fb      	ldr	r3, [r7, #12]
   2c8d0:	781b      	ldrb	r3, [r3, #0]
   2c8d2:	2b02      	cmp	r3, #2
   2c8d4:	d100      	bne.n	2c8d8 <put_fat+0x30>
   2c8d6:	e078      	b.n	2c9ca <put_fat+0x122>
   2c8d8:	2b03      	cmp	r3, #3
   2c8da:	d100      	bne.n	2c8de <put_fat+0x36>
   2c8dc:	e09e      	b.n	2ca1c <put_fat+0x174>
   2c8de:	2b01      	cmp	r3, #1
   2c8e0:	d000      	beq.n	2c8e4 <put_fat+0x3c>
   2c8e2:	e0e6      	b.n	2cab2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c8e4:	68bb      	ldr	r3, [r7, #8]
   2c8e6:	61bb      	str	r3, [r7, #24]
   2c8e8:	69bb      	ldr	r3, [r7, #24]
   2c8ea:	085b      	lsrs	r3, r3, #1
   2c8ec:	69ba      	ldr	r2, [r7, #24]
   2c8ee:	18d3      	adds	r3, r2, r3
   2c8f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c8f2:	68fb      	ldr	r3, [r7, #12]
   2c8f4:	6a1a      	ldr	r2, [r3, #32]
   2c8f6:	69bb      	ldr	r3, [r7, #24]
   2c8f8:	0a5b      	lsrs	r3, r3, #9
   2c8fa:	18d2      	adds	r2, r2, r3
   2c8fc:	231f      	movs	r3, #31
   2c8fe:	18fc      	adds	r4, r7, r3
   2c900:	68fb      	ldr	r3, [r7, #12]
   2c902:	0011      	movs	r1, r2
   2c904:	0018      	movs	r0, r3
   2c906:	4b76      	ldr	r3, [pc, #472]	; (2cae0 <put_fat+0x238>)
   2c908:	4798      	blx	r3
   2c90a:	0003      	movs	r3, r0
   2c90c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c90e:	231f      	movs	r3, #31
   2c910:	18fb      	adds	r3, r7, r3
   2c912:	781b      	ldrb	r3, [r3, #0]
   2c914:	2b00      	cmp	r3, #0
   2c916:	d000      	beq.n	2c91a <put_fat+0x72>
   2c918:	e0d0      	b.n	2cabc <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c91a:	69bb      	ldr	r3, [r7, #24]
   2c91c:	05db      	lsls	r3, r3, #23
   2c91e:	0ddb      	lsrs	r3, r3, #23
   2c920:	3330      	adds	r3, #48	; 0x30
   2c922:	68fa      	ldr	r2, [r7, #12]
   2c924:	18d3      	adds	r3, r2, r3
   2c926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c928:	68bb      	ldr	r3, [r7, #8]
   2c92a:	2201      	movs	r2, #1
   2c92c:	4013      	ands	r3, r2
   2c92e:	d00d      	beq.n	2c94c <put_fat+0xa4>
   2c930:	697b      	ldr	r3, [r7, #20]
   2c932:	781b      	ldrb	r3, [r3, #0]
   2c934:	b25b      	sxtb	r3, r3
   2c936:	220f      	movs	r2, #15
   2c938:	4013      	ands	r3, r2
   2c93a:	b25a      	sxtb	r2, r3
   2c93c:	687b      	ldr	r3, [r7, #4]
   2c93e:	b2db      	uxtb	r3, r3
   2c940:	011b      	lsls	r3, r3, #4
   2c942:	b25b      	sxtb	r3, r3
   2c944:	4313      	orrs	r3, r2
   2c946:	b25b      	sxtb	r3, r3
   2c948:	b2db      	uxtb	r3, r3
   2c94a:	e001      	b.n	2c950 <put_fat+0xa8>
   2c94c:	687b      	ldr	r3, [r7, #4]
   2c94e:	b2db      	uxtb	r3, r3
   2c950:	697a      	ldr	r2, [r7, #20]
   2c952:	7013      	strb	r3, [r2, #0]
			bc++;
   2c954:	69bb      	ldr	r3, [r7, #24]
   2c956:	3301      	adds	r3, #1
   2c958:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c95a:	68fb      	ldr	r3, [r7, #12]
   2c95c:	2201      	movs	r2, #1
   2c95e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c960:	68fb      	ldr	r3, [r7, #12]
   2c962:	6a1a      	ldr	r2, [r3, #32]
   2c964:	69bb      	ldr	r3, [r7, #24]
   2c966:	0a5b      	lsrs	r3, r3, #9
   2c968:	18d2      	adds	r2, r2, r3
   2c96a:	231f      	movs	r3, #31
   2c96c:	18fc      	adds	r4, r7, r3
   2c96e:	68fb      	ldr	r3, [r7, #12]
   2c970:	0011      	movs	r1, r2
   2c972:	0018      	movs	r0, r3
   2c974:	4b5a      	ldr	r3, [pc, #360]	; (2cae0 <put_fat+0x238>)
   2c976:	4798      	blx	r3
   2c978:	0003      	movs	r3, r0
   2c97a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c97c:	231f      	movs	r3, #31
   2c97e:	18fb      	adds	r3, r7, r3
   2c980:	781b      	ldrb	r3, [r3, #0]
   2c982:	2b00      	cmp	r3, #0
   2c984:	d000      	beq.n	2c988 <put_fat+0xe0>
   2c986:	e09b      	b.n	2cac0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c988:	69bb      	ldr	r3, [r7, #24]
   2c98a:	05db      	lsls	r3, r3, #23
   2c98c:	0ddb      	lsrs	r3, r3, #23
   2c98e:	3330      	adds	r3, #48	; 0x30
   2c990:	68fa      	ldr	r2, [r7, #12]
   2c992:	18d3      	adds	r3, r2, r3
   2c994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c996:	68bb      	ldr	r3, [r7, #8]
   2c998:	2201      	movs	r2, #1
   2c99a:	4013      	ands	r3, r2
   2c99c:	d003      	beq.n	2c9a6 <put_fat+0xfe>
   2c99e:	687b      	ldr	r3, [r7, #4]
   2c9a0:	091b      	lsrs	r3, r3, #4
   2c9a2:	b2db      	uxtb	r3, r3
   2c9a4:	e00e      	b.n	2c9c4 <put_fat+0x11c>
   2c9a6:	697b      	ldr	r3, [r7, #20]
   2c9a8:	781b      	ldrb	r3, [r3, #0]
   2c9aa:	b25b      	sxtb	r3, r3
   2c9ac:	220f      	movs	r2, #15
   2c9ae:	4393      	bics	r3, r2
   2c9b0:	b25a      	sxtb	r2, r3
   2c9b2:	687b      	ldr	r3, [r7, #4]
   2c9b4:	0a1b      	lsrs	r3, r3, #8
   2c9b6:	b25b      	sxtb	r3, r3
   2c9b8:	210f      	movs	r1, #15
   2c9ba:	400b      	ands	r3, r1
   2c9bc:	b25b      	sxtb	r3, r3
   2c9be:	4313      	orrs	r3, r2
   2c9c0:	b25b      	sxtb	r3, r3
   2c9c2:	b2db      	uxtb	r3, r3
   2c9c4:	697a      	ldr	r2, [r7, #20]
   2c9c6:	7013      	strb	r3, [r2, #0]
			break;
   2c9c8:	e07f      	b.n	2caca <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c9ca:	68fb      	ldr	r3, [r7, #12]
   2c9cc:	6a1a      	ldr	r2, [r3, #32]
   2c9ce:	68bb      	ldr	r3, [r7, #8]
   2c9d0:	0a1b      	lsrs	r3, r3, #8
   2c9d2:	18d2      	adds	r2, r2, r3
   2c9d4:	231f      	movs	r3, #31
   2c9d6:	18fc      	adds	r4, r7, r3
   2c9d8:	68fb      	ldr	r3, [r7, #12]
   2c9da:	0011      	movs	r1, r2
   2c9dc:	0018      	movs	r0, r3
   2c9de:	4b40      	ldr	r3, [pc, #256]	; (2cae0 <put_fat+0x238>)
   2c9e0:	4798      	blx	r3
   2c9e2:	0003      	movs	r3, r0
   2c9e4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9e6:	231f      	movs	r3, #31
   2c9e8:	18fb      	adds	r3, r7, r3
   2c9ea:	781b      	ldrb	r3, [r3, #0]
   2c9ec:	2b00      	cmp	r3, #0
   2c9ee:	d169      	bne.n	2cac4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c9f0:	68bb      	ldr	r3, [r7, #8]
   2c9f2:	005a      	lsls	r2, r3, #1
   2c9f4:	23ff      	movs	r3, #255	; 0xff
   2c9f6:	005b      	lsls	r3, r3, #1
   2c9f8:	4013      	ands	r3, r2
   2c9fa:	3330      	adds	r3, #48	; 0x30
   2c9fc:	68fa      	ldr	r2, [r7, #12]
   2c9fe:	18d3      	adds	r3, r2, r3
   2ca00:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2ca02:	687b      	ldr	r3, [r7, #4]
   2ca04:	b2da      	uxtb	r2, r3
   2ca06:	697b      	ldr	r3, [r7, #20]
   2ca08:	701a      	strb	r2, [r3, #0]
   2ca0a:	697b      	ldr	r3, [r7, #20]
   2ca0c:	3301      	adds	r3, #1
   2ca0e:	687a      	ldr	r2, [r7, #4]
   2ca10:	b292      	uxth	r2, r2
   2ca12:	0a12      	lsrs	r2, r2, #8
   2ca14:	b292      	uxth	r2, r2
   2ca16:	b2d2      	uxtb	r2, r2
   2ca18:	701a      	strb	r2, [r3, #0]
			break;
   2ca1a:	e056      	b.n	2caca <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ca1c:	68fb      	ldr	r3, [r7, #12]
   2ca1e:	6a1a      	ldr	r2, [r3, #32]
   2ca20:	68bb      	ldr	r3, [r7, #8]
   2ca22:	09db      	lsrs	r3, r3, #7
   2ca24:	18d2      	adds	r2, r2, r3
   2ca26:	231f      	movs	r3, #31
   2ca28:	18fc      	adds	r4, r7, r3
   2ca2a:	68fb      	ldr	r3, [r7, #12]
   2ca2c:	0011      	movs	r1, r2
   2ca2e:	0018      	movs	r0, r3
   2ca30:	4b2b      	ldr	r3, [pc, #172]	; (2cae0 <put_fat+0x238>)
   2ca32:	4798      	blx	r3
   2ca34:	0003      	movs	r3, r0
   2ca36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ca38:	231f      	movs	r3, #31
   2ca3a:	18fb      	adds	r3, r7, r3
   2ca3c:	781b      	ldrb	r3, [r3, #0]
   2ca3e:	2b00      	cmp	r3, #0
   2ca40:	d142      	bne.n	2cac8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2ca42:	68bb      	ldr	r3, [r7, #8]
   2ca44:	009a      	lsls	r2, r3, #2
   2ca46:	23fe      	movs	r3, #254	; 0xfe
   2ca48:	005b      	lsls	r3, r3, #1
   2ca4a:	4013      	ands	r3, r2
   2ca4c:	3330      	adds	r3, #48	; 0x30
   2ca4e:	68fa      	ldr	r2, [r7, #12]
   2ca50:	18d3      	adds	r3, r2, r3
   2ca52:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2ca54:	697b      	ldr	r3, [r7, #20]
   2ca56:	3303      	adds	r3, #3
   2ca58:	781b      	ldrb	r3, [r3, #0]
   2ca5a:	061a      	lsls	r2, r3, #24
   2ca5c:	697b      	ldr	r3, [r7, #20]
   2ca5e:	3302      	adds	r3, #2
   2ca60:	781b      	ldrb	r3, [r3, #0]
   2ca62:	041b      	lsls	r3, r3, #16
   2ca64:	4313      	orrs	r3, r2
   2ca66:	697a      	ldr	r2, [r7, #20]
   2ca68:	3201      	adds	r2, #1
   2ca6a:	7812      	ldrb	r2, [r2, #0]
   2ca6c:	0212      	lsls	r2, r2, #8
   2ca6e:	4313      	orrs	r3, r2
   2ca70:	697a      	ldr	r2, [r7, #20]
   2ca72:	7812      	ldrb	r2, [r2, #0]
   2ca74:	4313      	orrs	r3, r2
   2ca76:	0f1b      	lsrs	r3, r3, #28
   2ca78:	071b      	lsls	r3, r3, #28
   2ca7a:	687a      	ldr	r2, [r7, #4]
   2ca7c:	4313      	orrs	r3, r2
   2ca7e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2ca80:	687b      	ldr	r3, [r7, #4]
   2ca82:	b2da      	uxtb	r2, r3
   2ca84:	697b      	ldr	r3, [r7, #20]
   2ca86:	701a      	strb	r2, [r3, #0]
   2ca88:	697b      	ldr	r3, [r7, #20]
   2ca8a:	3301      	adds	r3, #1
   2ca8c:	687a      	ldr	r2, [r7, #4]
   2ca8e:	b292      	uxth	r2, r2
   2ca90:	0a12      	lsrs	r2, r2, #8
   2ca92:	b292      	uxth	r2, r2
   2ca94:	b2d2      	uxtb	r2, r2
   2ca96:	701a      	strb	r2, [r3, #0]
   2ca98:	697b      	ldr	r3, [r7, #20]
   2ca9a:	3302      	adds	r3, #2
   2ca9c:	687a      	ldr	r2, [r7, #4]
   2ca9e:	0c12      	lsrs	r2, r2, #16
   2caa0:	b2d2      	uxtb	r2, r2
   2caa2:	701a      	strb	r2, [r3, #0]
   2caa4:	697b      	ldr	r3, [r7, #20]
   2caa6:	3303      	adds	r3, #3
   2caa8:	687a      	ldr	r2, [r7, #4]
   2caaa:	0e12      	lsrs	r2, r2, #24
   2caac:	b2d2      	uxtb	r2, r2
   2caae:	701a      	strb	r2, [r3, #0]
			break;
   2cab0:	e00b      	b.n	2caca <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2cab2:	231f      	movs	r3, #31
   2cab4:	18fb      	adds	r3, r7, r3
   2cab6:	2202      	movs	r2, #2
   2cab8:	701a      	strb	r2, [r3, #0]
   2caba:	e006      	b.n	2caca <put_fat+0x222>
			if (res != FR_OK) break;
   2cabc:	46c0      	nop			; (mov r8, r8)
   2cabe:	e004      	b.n	2caca <put_fat+0x222>
			if (res != FR_OK) break;
   2cac0:	46c0      	nop			; (mov r8, r8)
   2cac2:	e002      	b.n	2caca <put_fat+0x222>
			if (res != FR_OK) break;
   2cac4:	46c0      	nop			; (mov r8, r8)
   2cac6:	e000      	b.n	2caca <put_fat+0x222>
			if (res != FR_OK) break;
   2cac8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2caca:	68fb      	ldr	r3, [r7, #12]
   2cacc:	2201      	movs	r2, #1
   2cace:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2cad0:	231f      	movs	r3, #31
   2cad2:	18fb      	adds	r3, r7, r3
   2cad4:	781b      	ldrb	r3, [r3, #0]
}
   2cad6:	0018      	movs	r0, r3
   2cad8:	46bd      	mov	sp, r7
   2cada:	b009      	add	sp, #36	; 0x24
   2cadc:	bd90      	pop	{r4, r7, pc}
   2cade:	46c0      	nop			; (mov r8, r8)
   2cae0:	0002c4a5 	.word	0x0002c4a5

0002cae4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2cae4:	b590      	push	{r4, r7, lr}
   2cae6:	b085      	sub	sp, #20
   2cae8:	af00      	add	r7, sp, #0
   2caea:	6078      	str	r0, [r7, #4]
   2caec:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2caee:	683b      	ldr	r3, [r7, #0]
   2caf0:	2b01      	cmp	r3, #1
   2caf2:	d904      	bls.n	2cafe <remove_chain+0x1a>
   2caf4:	687b      	ldr	r3, [r7, #4]
   2caf6:	699a      	ldr	r2, [r3, #24]
   2caf8:	683b      	ldr	r3, [r7, #0]
   2cafa:	429a      	cmp	r2, r3
   2cafc:	d804      	bhi.n	2cb08 <remove_chain+0x24>
		res = FR_INT_ERR;
   2cafe:	230f      	movs	r3, #15
   2cb00:	18fb      	adds	r3, r7, r3
   2cb02:	2202      	movs	r2, #2
   2cb04:	701a      	strb	r2, [r3, #0]
   2cb06:	e045      	b.n	2cb94 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2cb08:	230f      	movs	r3, #15
   2cb0a:	18fb      	adds	r3, r7, r3
   2cb0c:	2200      	movs	r2, #0
   2cb0e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cb10:	e037      	b.n	2cb82 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2cb12:	683a      	ldr	r2, [r7, #0]
   2cb14:	687b      	ldr	r3, [r7, #4]
   2cb16:	0011      	movs	r1, r2
   2cb18:	0018      	movs	r0, r3
   2cb1a:	4b22      	ldr	r3, [pc, #136]	; (2cba4 <remove_chain+0xc0>)
   2cb1c:	4798      	blx	r3
   2cb1e:	0003      	movs	r3, r0
   2cb20:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2cb22:	68bb      	ldr	r3, [r7, #8]
   2cb24:	2b00      	cmp	r3, #0
   2cb26:	d032      	beq.n	2cb8e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2cb28:	68bb      	ldr	r3, [r7, #8]
   2cb2a:	2b01      	cmp	r3, #1
   2cb2c:	d104      	bne.n	2cb38 <remove_chain+0x54>
   2cb2e:	230f      	movs	r3, #15
   2cb30:	18fb      	adds	r3, r7, r3
   2cb32:	2202      	movs	r2, #2
   2cb34:	701a      	strb	r2, [r3, #0]
   2cb36:	e02d      	b.n	2cb94 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cb38:	68bb      	ldr	r3, [r7, #8]
   2cb3a:	3301      	adds	r3, #1
   2cb3c:	d104      	bne.n	2cb48 <remove_chain+0x64>
   2cb3e:	230f      	movs	r3, #15
   2cb40:	18fb      	adds	r3, r7, r3
   2cb42:	2201      	movs	r2, #1
   2cb44:	701a      	strb	r2, [r3, #0]
   2cb46:	e025      	b.n	2cb94 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cb48:	230f      	movs	r3, #15
   2cb4a:	18fc      	adds	r4, r7, r3
   2cb4c:	6839      	ldr	r1, [r7, #0]
   2cb4e:	687b      	ldr	r3, [r7, #4]
   2cb50:	2200      	movs	r2, #0
   2cb52:	0018      	movs	r0, r3
   2cb54:	4b14      	ldr	r3, [pc, #80]	; (2cba8 <remove_chain+0xc4>)
   2cb56:	4798      	blx	r3
   2cb58:	0003      	movs	r3, r0
   2cb5a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cb5c:	230f      	movs	r3, #15
   2cb5e:	18fb      	adds	r3, r7, r3
   2cb60:	781b      	ldrb	r3, [r3, #0]
   2cb62:	2b00      	cmp	r3, #0
   2cb64:	d115      	bne.n	2cb92 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cb66:	687b      	ldr	r3, [r7, #4]
   2cb68:	691b      	ldr	r3, [r3, #16]
   2cb6a:	3301      	adds	r3, #1
   2cb6c:	d007      	beq.n	2cb7e <remove_chain+0x9a>
				fs->free_clust++;
   2cb6e:	687b      	ldr	r3, [r7, #4]
   2cb70:	691b      	ldr	r3, [r3, #16]
   2cb72:	1c5a      	adds	r2, r3, #1
   2cb74:	687b      	ldr	r3, [r7, #4]
   2cb76:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cb78:	687b      	ldr	r3, [r7, #4]
   2cb7a:	2201      	movs	r2, #1
   2cb7c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cb7e:	68bb      	ldr	r3, [r7, #8]
   2cb80:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cb82:	687b      	ldr	r3, [r7, #4]
   2cb84:	699a      	ldr	r2, [r3, #24]
   2cb86:	683b      	ldr	r3, [r7, #0]
   2cb88:	429a      	cmp	r2, r3
   2cb8a:	d8c2      	bhi.n	2cb12 <remove_chain+0x2e>
   2cb8c:	e002      	b.n	2cb94 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cb8e:	46c0      	nop			; (mov r8, r8)
   2cb90:	e000      	b.n	2cb94 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cb92:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cb94:	230f      	movs	r3, #15
   2cb96:	18fb      	adds	r3, r7, r3
   2cb98:	781b      	ldrb	r3, [r3, #0]
}
   2cb9a:	0018      	movs	r0, r3
   2cb9c:	46bd      	mov	sp, r7
   2cb9e:	b005      	add	sp, #20
   2cba0:	bd90      	pop	{r4, r7, pc}
   2cba2:	46c0      	nop			; (mov r8, r8)
   2cba4:	0002c73d 	.word	0x0002c73d
   2cba8:	0002c8a9 	.word	0x0002c8a9

0002cbac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cbac:	b590      	push	{r4, r7, lr}
   2cbae:	b087      	sub	sp, #28
   2cbb0:	af00      	add	r7, sp, #0
   2cbb2:	6078      	str	r0, [r7, #4]
   2cbb4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cbb6:	683b      	ldr	r3, [r7, #0]
   2cbb8:	2b00      	cmp	r3, #0
   2cbba:	d10d      	bne.n	2cbd8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cbbc:	687b      	ldr	r3, [r7, #4]
   2cbbe:	68db      	ldr	r3, [r3, #12]
   2cbc0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cbc2:	693b      	ldr	r3, [r7, #16]
   2cbc4:	2b00      	cmp	r3, #0
   2cbc6:	d004      	beq.n	2cbd2 <create_chain+0x26>
   2cbc8:	687b      	ldr	r3, [r7, #4]
   2cbca:	699a      	ldr	r2, [r3, #24]
   2cbcc:	693b      	ldr	r3, [r7, #16]
   2cbce:	429a      	cmp	r2, r3
   2cbd0:	d818      	bhi.n	2cc04 <create_chain+0x58>
   2cbd2:	2301      	movs	r3, #1
   2cbd4:	613b      	str	r3, [r7, #16]
   2cbd6:	e015      	b.n	2cc04 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cbd8:	683a      	ldr	r2, [r7, #0]
   2cbda:	687b      	ldr	r3, [r7, #4]
   2cbdc:	0011      	movs	r1, r2
   2cbde:	0018      	movs	r0, r3
   2cbe0:	4b3e      	ldr	r3, [pc, #248]	; (2ccdc <create_chain+0x130>)
   2cbe2:	4798      	blx	r3
   2cbe4:	0003      	movs	r3, r0
   2cbe6:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2cbe8:	68bb      	ldr	r3, [r7, #8]
   2cbea:	2b01      	cmp	r3, #1
   2cbec:	d801      	bhi.n	2cbf2 <create_chain+0x46>
   2cbee:	2301      	movs	r3, #1
   2cbf0:	e070      	b.n	2ccd4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2cbf2:	687b      	ldr	r3, [r7, #4]
   2cbf4:	699a      	ldr	r2, [r3, #24]
   2cbf6:	68bb      	ldr	r3, [r7, #8]
   2cbf8:	429a      	cmp	r2, r3
   2cbfa:	d901      	bls.n	2cc00 <create_chain+0x54>
   2cbfc:	68bb      	ldr	r3, [r7, #8]
   2cbfe:	e069      	b.n	2ccd4 <create_chain+0x128>
		scl = clst;
   2cc00:	683b      	ldr	r3, [r7, #0]
   2cc02:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cc04:	693b      	ldr	r3, [r7, #16]
   2cc06:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cc08:	697b      	ldr	r3, [r7, #20]
   2cc0a:	3301      	adds	r3, #1
   2cc0c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cc0e:	687b      	ldr	r3, [r7, #4]
   2cc10:	699a      	ldr	r2, [r3, #24]
   2cc12:	697b      	ldr	r3, [r7, #20]
   2cc14:	429a      	cmp	r2, r3
   2cc16:	d807      	bhi.n	2cc28 <create_chain+0x7c>
			ncl = 2;
   2cc18:	2302      	movs	r3, #2
   2cc1a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cc1c:	697a      	ldr	r2, [r7, #20]
   2cc1e:	693b      	ldr	r3, [r7, #16]
   2cc20:	429a      	cmp	r2, r3
   2cc22:	d901      	bls.n	2cc28 <create_chain+0x7c>
   2cc24:	2300      	movs	r3, #0
   2cc26:	e055      	b.n	2ccd4 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cc28:	697a      	ldr	r2, [r7, #20]
   2cc2a:	687b      	ldr	r3, [r7, #4]
   2cc2c:	0011      	movs	r1, r2
   2cc2e:	0018      	movs	r0, r3
   2cc30:	4b2a      	ldr	r3, [pc, #168]	; (2ccdc <create_chain+0x130>)
   2cc32:	4798      	blx	r3
   2cc34:	0003      	movs	r3, r0
   2cc36:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cc38:	68bb      	ldr	r3, [r7, #8]
   2cc3a:	2b00      	cmp	r3, #0
   2cc3c:	d00d      	beq.n	2cc5a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cc3e:	68bb      	ldr	r3, [r7, #8]
   2cc40:	3301      	adds	r3, #1
   2cc42:	d002      	beq.n	2cc4a <create_chain+0x9e>
   2cc44:	68bb      	ldr	r3, [r7, #8]
   2cc46:	2b01      	cmp	r3, #1
   2cc48:	d101      	bne.n	2cc4e <create_chain+0xa2>
			return cs;
   2cc4a:	68bb      	ldr	r3, [r7, #8]
   2cc4c:	e042      	b.n	2ccd4 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2cc4e:	697a      	ldr	r2, [r7, #20]
   2cc50:	693b      	ldr	r3, [r7, #16]
   2cc52:	429a      	cmp	r2, r3
   2cc54:	d1d8      	bne.n	2cc08 <create_chain+0x5c>
   2cc56:	2300      	movs	r3, #0
   2cc58:	e03c      	b.n	2ccd4 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2cc5a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cc5c:	230f      	movs	r3, #15
   2cc5e:	18fc      	adds	r4, r7, r3
   2cc60:	4a1f      	ldr	r2, [pc, #124]	; (2cce0 <create_chain+0x134>)
   2cc62:	6979      	ldr	r1, [r7, #20]
   2cc64:	687b      	ldr	r3, [r7, #4]
   2cc66:	0018      	movs	r0, r3
   2cc68:	4b1e      	ldr	r3, [pc, #120]	; (2cce4 <create_chain+0x138>)
   2cc6a:	4798      	blx	r3
   2cc6c:	0003      	movs	r3, r0
   2cc6e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cc70:	230f      	movs	r3, #15
   2cc72:	18fb      	adds	r3, r7, r3
   2cc74:	781b      	ldrb	r3, [r3, #0]
   2cc76:	2b00      	cmp	r3, #0
   2cc78:	d10c      	bne.n	2cc94 <create_chain+0xe8>
   2cc7a:	683b      	ldr	r3, [r7, #0]
   2cc7c:	2b00      	cmp	r3, #0
   2cc7e:	d009      	beq.n	2cc94 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2cc80:	230f      	movs	r3, #15
   2cc82:	18fc      	adds	r4, r7, r3
   2cc84:	697a      	ldr	r2, [r7, #20]
   2cc86:	6839      	ldr	r1, [r7, #0]
   2cc88:	687b      	ldr	r3, [r7, #4]
   2cc8a:	0018      	movs	r0, r3
   2cc8c:	4b15      	ldr	r3, [pc, #84]	; (2cce4 <create_chain+0x138>)
   2cc8e:	4798      	blx	r3
   2cc90:	0003      	movs	r3, r0
   2cc92:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cc94:	230f      	movs	r3, #15
   2cc96:	18fb      	adds	r3, r7, r3
   2cc98:	781b      	ldrb	r3, [r3, #0]
   2cc9a:	2b00      	cmp	r3, #0
   2cc9c:	d10f      	bne.n	2ccbe <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cc9e:	687b      	ldr	r3, [r7, #4]
   2cca0:	697a      	ldr	r2, [r7, #20]
   2cca2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cca4:	687b      	ldr	r3, [r7, #4]
   2cca6:	691b      	ldr	r3, [r3, #16]
   2cca8:	3301      	adds	r3, #1
   2ccaa:	d012      	beq.n	2ccd2 <create_chain+0x126>
			fs->free_clust--;
   2ccac:	687b      	ldr	r3, [r7, #4]
   2ccae:	691b      	ldr	r3, [r3, #16]
   2ccb0:	1e5a      	subs	r2, r3, #1
   2ccb2:	687b      	ldr	r3, [r7, #4]
   2ccb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ccb6:	687b      	ldr	r3, [r7, #4]
   2ccb8:	2201      	movs	r2, #1
   2ccba:	715a      	strb	r2, [r3, #5]
   2ccbc:	e009      	b.n	2ccd2 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ccbe:	230f      	movs	r3, #15
   2ccc0:	18fb      	adds	r3, r7, r3
   2ccc2:	781b      	ldrb	r3, [r3, #0]
   2ccc4:	2b01      	cmp	r3, #1
   2ccc6:	d102      	bne.n	2ccce <create_chain+0x122>
   2ccc8:	2301      	movs	r3, #1
   2ccca:	425b      	negs	r3, r3
   2cccc:	e000      	b.n	2ccd0 <create_chain+0x124>
   2ccce:	2301      	movs	r3, #1
   2ccd0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ccd2:	697b      	ldr	r3, [r7, #20]
}
   2ccd4:	0018      	movs	r0, r3
   2ccd6:	46bd      	mov	sp, r7
   2ccd8:	b007      	add	sp, #28
   2ccda:	bd90      	pop	{r4, r7, pc}
   2ccdc:	0002c73d 	.word	0x0002c73d
   2cce0:	0fffffff 	.word	0x0fffffff
   2cce4:	0002c8a9 	.word	0x0002c8a9

0002cce8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cce8:	b580      	push	{r7, lr}
   2ccea:	b084      	sub	sp, #16
   2ccec:	af00      	add	r7, sp, #0
   2ccee:	6078      	str	r0, [r7, #4]
   2ccf0:	000a      	movs	r2, r1
   2ccf2:	1cbb      	adds	r3, r7, #2
   2ccf4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2ccf6:	687b      	ldr	r3, [r7, #4]
   2ccf8:	1cba      	adds	r2, r7, #2
   2ccfa:	8812      	ldrh	r2, [r2, #0]
   2ccfc:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ccfe:	687b      	ldr	r3, [r7, #4]
   2cd00:	689b      	ldr	r3, [r3, #8]
   2cd02:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2cd04:	68fb      	ldr	r3, [r7, #12]
   2cd06:	2b01      	cmp	r3, #1
   2cd08:	d005      	beq.n	2cd16 <dir_sdi+0x2e>
   2cd0a:	687b      	ldr	r3, [r7, #4]
   2cd0c:	681b      	ldr	r3, [r3, #0]
   2cd0e:	699a      	ldr	r2, [r3, #24]
   2cd10:	68fb      	ldr	r3, [r7, #12]
   2cd12:	429a      	cmp	r2, r3
   2cd14:	d801      	bhi.n	2cd1a <dir_sdi+0x32>
		return FR_INT_ERR;
   2cd16:	2302      	movs	r3, #2
   2cd18:	e075      	b.n	2ce06 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2cd1a:	68fb      	ldr	r3, [r7, #12]
   2cd1c:	2b00      	cmp	r3, #0
   2cd1e:	d108      	bne.n	2cd32 <dir_sdi+0x4a>
   2cd20:	687b      	ldr	r3, [r7, #4]
   2cd22:	681b      	ldr	r3, [r3, #0]
   2cd24:	781b      	ldrb	r3, [r3, #0]
   2cd26:	2b03      	cmp	r3, #3
   2cd28:	d103      	bne.n	2cd32 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2cd2a:	687b      	ldr	r3, [r7, #4]
   2cd2c:	681b      	ldr	r3, [r3, #0]
   2cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cd30:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2cd32:	68fb      	ldr	r3, [r7, #12]
   2cd34:	2b00      	cmp	r3, #0
   2cd36:	d116      	bne.n	2cd66 <dir_sdi+0x7e>
		dj->clust = clst;
   2cd38:	687b      	ldr	r3, [r7, #4]
   2cd3a:	68fa      	ldr	r2, [r7, #12]
   2cd3c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2cd3e:	687b      	ldr	r3, [r7, #4]
   2cd40:	681b      	ldr	r3, [r3, #0]
   2cd42:	891b      	ldrh	r3, [r3, #8]
   2cd44:	1cba      	adds	r2, r7, #2
   2cd46:	8812      	ldrh	r2, [r2, #0]
   2cd48:	429a      	cmp	r2, r3
   2cd4a:	d301      	bcc.n	2cd50 <dir_sdi+0x68>
			return FR_INT_ERR;
   2cd4c:	2302      	movs	r3, #2
   2cd4e:	e05a      	b.n	2ce06 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cd50:	687b      	ldr	r3, [r7, #4]
   2cd52:	681b      	ldr	r3, [r3, #0]
   2cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cd56:	1cba      	adds	r2, r7, #2
   2cd58:	8812      	ldrh	r2, [r2, #0]
   2cd5a:	0912      	lsrs	r2, r2, #4
   2cd5c:	b292      	uxth	r2, r2
   2cd5e:	189a      	adds	r2, r3, r2
   2cd60:	687b      	ldr	r3, [r7, #4]
   2cd62:	611a      	str	r2, [r3, #16]
   2cd64:	e042      	b.n	2cdec <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2cd66:	687b      	ldr	r3, [r7, #4]
   2cd68:	681b      	ldr	r3, [r3, #0]
   2cd6a:	789b      	ldrb	r3, [r3, #2]
   2cd6c:	b29a      	uxth	r2, r3
   2cd6e:	230a      	movs	r3, #10
   2cd70:	18fb      	adds	r3, r7, r3
   2cd72:	0112      	lsls	r2, r2, #4
   2cd74:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cd76:	e020      	b.n	2cdba <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2cd78:	687b      	ldr	r3, [r7, #4]
   2cd7a:	681b      	ldr	r3, [r3, #0]
   2cd7c:	68fa      	ldr	r2, [r7, #12]
   2cd7e:	0011      	movs	r1, r2
   2cd80:	0018      	movs	r0, r3
   2cd82:	4b23      	ldr	r3, [pc, #140]	; (2ce10 <dir_sdi+0x128>)
   2cd84:	4798      	blx	r3
   2cd86:	0003      	movs	r3, r0
   2cd88:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cd8a:	68fb      	ldr	r3, [r7, #12]
   2cd8c:	3301      	adds	r3, #1
   2cd8e:	d101      	bne.n	2cd94 <dir_sdi+0xac>
   2cd90:	2301      	movs	r3, #1
   2cd92:	e038      	b.n	2ce06 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2cd94:	68fb      	ldr	r3, [r7, #12]
   2cd96:	2b01      	cmp	r3, #1
   2cd98:	d905      	bls.n	2cda6 <dir_sdi+0xbe>
   2cd9a:	687b      	ldr	r3, [r7, #4]
   2cd9c:	681b      	ldr	r3, [r3, #0]
   2cd9e:	699a      	ldr	r2, [r3, #24]
   2cda0:	68fb      	ldr	r3, [r7, #12]
   2cda2:	429a      	cmp	r2, r3
   2cda4:	d801      	bhi.n	2cdaa <dir_sdi+0xc2>
				return FR_INT_ERR;
   2cda6:	2302      	movs	r3, #2
   2cda8:	e02d      	b.n	2ce06 <dir_sdi+0x11e>
			idx -= ic;
   2cdaa:	1cbb      	adds	r3, r7, #2
   2cdac:	1cb9      	adds	r1, r7, #2
   2cdae:	220a      	movs	r2, #10
   2cdb0:	18ba      	adds	r2, r7, r2
   2cdb2:	8809      	ldrh	r1, [r1, #0]
   2cdb4:	8812      	ldrh	r2, [r2, #0]
   2cdb6:	1a8a      	subs	r2, r1, r2
   2cdb8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cdba:	1cba      	adds	r2, r7, #2
   2cdbc:	230a      	movs	r3, #10
   2cdbe:	18fb      	adds	r3, r7, r3
   2cdc0:	8812      	ldrh	r2, [r2, #0]
   2cdc2:	881b      	ldrh	r3, [r3, #0]
   2cdc4:	429a      	cmp	r2, r3
   2cdc6:	d2d7      	bcs.n	2cd78 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2cdc8:	687b      	ldr	r3, [r7, #4]
   2cdca:	68fa      	ldr	r2, [r7, #12]
   2cdcc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cdce:	687b      	ldr	r3, [r7, #4]
   2cdd0:	681b      	ldr	r3, [r3, #0]
   2cdd2:	68fa      	ldr	r2, [r7, #12]
   2cdd4:	0011      	movs	r1, r2
   2cdd6:	0018      	movs	r0, r3
   2cdd8:	4b0e      	ldr	r3, [pc, #56]	; (2ce14 <dir_sdi+0x12c>)
   2cdda:	4798      	blx	r3
   2cddc:	0002      	movs	r2, r0
   2cdde:	1cbb      	adds	r3, r7, #2
   2cde0:	881b      	ldrh	r3, [r3, #0]
   2cde2:	091b      	lsrs	r3, r3, #4
   2cde4:	b29b      	uxth	r3, r3
   2cde6:	18d2      	adds	r2, r2, r3
   2cde8:	687b      	ldr	r3, [r7, #4]
   2cdea:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cdec:	687b      	ldr	r3, [r7, #4]
   2cdee:	681b      	ldr	r3, [r3, #0]
   2cdf0:	3330      	adds	r3, #48	; 0x30
   2cdf2:	001a      	movs	r2, r3
   2cdf4:	1cbb      	adds	r3, r7, #2
   2cdf6:	881b      	ldrh	r3, [r3, #0]
   2cdf8:	210f      	movs	r1, #15
   2cdfa:	400b      	ands	r3, r1
   2cdfc:	015b      	lsls	r3, r3, #5
   2cdfe:	18d2      	adds	r2, r2, r3
   2ce00:	687b      	ldr	r3, [r7, #4]
   2ce02:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2ce04:	2300      	movs	r3, #0
}
   2ce06:	0018      	movs	r0, r3
   2ce08:	46bd      	mov	sp, r7
   2ce0a:	b004      	add	sp, #16
   2ce0c:	bd80      	pop	{r7, pc}
   2ce0e:	46c0      	nop			; (mov r8, r8)
   2ce10:	0002c73d 	.word	0x0002c73d
   2ce14:	0002c705 	.word	0x0002c705

0002ce18 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2ce18:	b590      	push	{r4, r7, lr}
   2ce1a:	b085      	sub	sp, #20
   2ce1c:	af00      	add	r7, sp, #0
   2ce1e:	6078      	str	r0, [r7, #4]
   2ce20:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2ce22:	687b      	ldr	r3, [r7, #4]
   2ce24:	88da      	ldrh	r2, [r3, #6]
   2ce26:	2308      	movs	r3, #8
   2ce28:	18fb      	adds	r3, r7, r3
   2ce2a:	3201      	adds	r2, #1
   2ce2c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2ce2e:	2308      	movs	r3, #8
   2ce30:	18fb      	adds	r3, r7, r3
   2ce32:	881b      	ldrh	r3, [r3, #0]
   2ce34:	2b00      	cmp	r3, #0
   2ce36:	d003      	beq.n	2ce40 <dir_next+0x28>
   2ce38:	687b      	ldr	r3, [r7, #4]
   2ce3a:	691b      	ldr	r3, [r3, #16]
   2ce3c:	2b00      	cmp	r3, #0
   2ce3e:	d101      	bne.n	2ce44 <dir_next+0x2c>
		return FR_NO_FILE;
   2ce40:	2304      	movs	r3, #4
   2ce42:	e0d2      	b.n	2cfea <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2ce44:	2308      	movs	r3, #8
   2ce46:	18fb      	adds	r3, r7, r3
   2ce48:	881b      	ldrh	r3, [r3, #0]
   2ce4a:	220f      	movs	r2, #15
   2ce4c:	4013      	ands	r3, r2
   2ce4e:	b29b      	uxth	r3, r3
   2ce50:	2b00      	cmp	r3, #0
   2ce52:	d000      	beq.n	2ce56 <dir_next+0x3e>
   2ce54:	e0b6      	b.n	2cfc4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2ce56:	687b      	ldr	r3, [r7, #4]
   2ce58:	691b      	ldr	r3, [r3, #16]
   2ce5a:	1c5a      	adds	r2, r3, #1
   2ce5c:	687b      	ldr	r3, [r7, #4]
   2ce5e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2ce60:	687b      	ldr	r3, [r7, #4]
   2ce62:	68db      	ldr	r3, [r3, #12]
   2ce64:	2b00      	cmp	r3, #0
   2ce66:	d10a      	bne.n	2ce7e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2ce68:	687b      	ldr	r3, [r7, #4]
   2ce6a:	681b      	ldr	r3, [r3, #0]
   2ce6c:	891b      	ldrh	r3, [r3, #8]
   2ce6e:	2208      	movs	r2, #8
   2ce70:	18ba      	adds	r2, r7, r2
   2ce72:	8812      	ldrh	r2, [r2, #0]
   2ce74:	429a      	cmp	r2, r3
   2ce76:	d200      	bcs.n	2ce7a <dir_next+0x62>
   2ce78:	e0a4      	b.n	2cfc4 <dir_next+0x1ac>
				return FR_NO_FILE;
   2ce7a:	2304      	movs	r3, #4
   2ce7c:	e0b5      	b.n	2cfea <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2ce7e:	2308      	movs	r3, #8
   2ce80:	18fb      	adds	r3, r7, r3
   2ce82:	881b      	ldrh	r3, [r3, #0]
   2ce84:	091b      	lsrs	r3, r3, #4
   2ce86:	b29b      	uxth	r3, r3
   2ce88:	001a      	movs	r2, r3
   2ce8a:	687b      	ldr	r3, [r7, #4]
   2ce8c:	681b      	ldr	r3, [r3, #0]
   2ce8e:	789b      	ldrb	r3, [r3, #2]
   2ce90:	3b01      	subs	r3, #1
   2ce92:	4013      	ands	r3, r2
   2ce94:	d000      	beq.n	2ce98 <dir_next+0x80>
   2ce96:	e095      	b.n	2cfc4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2ce98:	687b      	ldr	r3, [r7, #4]
   2ce9a:	681a      	ldr	r2, [r3, #0]
   2ce9c:	687b      	ldr	r3, [r7, #4]
   2ce9e:	68db      	ldr	r3, [r3, #12]
   2cea0:	0019      	movs	r1, r3
   2cea2:	0010      	movs	r0, r2
   2cea4:	4b53      	ldr	r3, [pc, #332]	; (2cff4 <dir_next+0x1dc>)
   2cea6:	4798      	blx	r3
   2cea8:	0003      	movs	r3, r0
   2ceaa:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2ceac:	68fb      	ldr	r3, [r7, #12]
   2ceae:	2b01      	cmp	r3, #1
   2ceb0:	d801      	bhi.n	2ceb6 <dir_next+0x9e>
   2ceb2:	2302      	movs	r3, #2
   2ceb4:	e099      	b.n	2cfea <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ceb6:	68fb      	ldr	r3, [r7, #12]
   2ceb8:	3301      	adds	r3, #1
   2ceba:	d101      	bne.n	2cec0 <dir_next+0xa8>
   2cebc:	2301      	movs	r3, #1
   2cebe:	e094      	b.n	2cfea <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2cec0:	687b      	ldr	r3, [r7, #4]
   2cec2:	681b      	ldr	r3, [r3, #0]
   2cec4:	699a      	ldr	r2, [r3, #24]
   2cec6:	68fb      	ldr	r3, [r7, #12]
   2cec8:	429a      	cmp	r2, r3
   2ceca:	d900      	bls.n	2cece <dir_next+0xb6>
   2cecc:	e06d      	b.n	2cfaa <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2cece:	683b      	ldr	r3, [r7, #0]
   2ced0:	2b00      	cmp	r3, #0
   2ced2:	d101      	bne.n	2ced8 <dir_next+0xc0>
   2ced4:	2304      	movs	r3, #4
   2ced6:	e088      	b.n	2cfea <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2ced8:	687b      	ldr	r3, [r7, #4]
   2ceda:	681a      	ldr	r2, [r3, #0]
   2cedc:	687b      	ldr	r3, [r7, #4]
   2cede:	68db      	ldr	r3, [r3, #12]
   2cee0:	0019      	movs	r1, r3
   2cee2:	0010      	movs	r0, r2
   2cee4:	4b44      	ldr	r3, [pc, #272]	; (2cff8 <dir_next+0x1e0>)
   2cee6:	4798      	blx	r3
   2cee8:	0003      	movs	r3, r0
   2ceea:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2ceec:	68fb      	ldr	r3, [r7, #12]
   2ceee:	2b00      	cmp	r3, #0
   2cef0:	d101      	bne.n	2cef6 <dir_next+0xde>
   2cef2:	2307      	movs	r3, #7
   2cef4:	e079      	b.n	2cfea <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2cef6:	68fb      	ldr	r3, [r7, #12]
   2cef8:	2b01      	cmp	r3, #1
   2cefa:	d101      	bne.n	2cf00 <dir_next+0xe8>
   2cefc:	2302      	movs	r3, #2
   2cefe:	e074      	b.n	2cfea <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cf00:	68fb      	ldr	r3, [r7, #12]
   2cf02:	3301      	adds	r3, #1
   2cf04:	d101      	bne.n	2cf0a <dir_next+0xf2>
   2cf06:	2301      	movs	r3, #1
   2cf08:	e06f      	b.n	2cfea <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2cf0a:	687b      	ldr	r3, [r7, #4]
   2cf0c:	681b      	ldr	r3, [r3, #0]
   2cf0e:	2100      	movs	r1, #0
   2cf10:	0018      	movs	r0, r3
   2cf12:	4b3a      	ldr	r3, [pc, #232]	; (2cffc <dir_next+0x1e4>)
   2cf14:	4798      	blx	r3
   2cf16:	1e03      	subs	r3, r0, #0
   2cf18:	d001      	beq.n	2cf1e <dir_next+0x106>
   2cf1a:	2301      	movs	r3, #1
   2cf1c:	e065      	b.n	2cfea <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2cf1e:	687b      	ldr	r3, [r7, #4]
   2cf20:	681b      	ldr	r3, [r3, #0]
   2cf22:	3330      	adds	r3, #48	; 0x30
   2cf24:	0018      	movs	r0, r3
   2cf26:	2380      	movs	r3, #128	; 0x80
   2cf28:	009b      	lsls	r3, r3, #2
   2cf2a:	001a      	movs	r2, r3
   2cf2c:	2100      	movs	r1, #0
   2cf2e:	4b34      	ldr	r3, [pc, #208]	; (2d000 <dir_next+0x1e8>)
   2cf30:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2cf32:	687b      	ldr	r3, [r7, #4]
   2cf34:	681c      	ldr	r4, [r3, #0]
   2cf36:	687b      	ldr	r3, [r7, #4]
   2cf38:	681b      	ldr	r3, [r3, #0]
   2cf3a:	68fa      	ldr	r2, [r7, #12]
   2cf3c:	0011      	movs	r1, r2
   2cf3e:	0018      	movs	r0, r3
   2cf40:	4b30      	ldr	r3, [pc, #192]	; (2d004 <dir_next+0x1ec>)
   2cf42:	4798      	blx	r3
   2cf44:	0003      	movs	r3, r0
   2cf46:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cf48:	230b      	movs	r3, #11
   2cf4a:	18fb      	adds	r3, r7, r3
   2cf4c:	2200      	movs	r2, #0
   2cf4e:	701a      	strb	r2, [r3, #0]
   2cf50:	e019      	b.n	2cf86 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2cf52:	687b      	ldr	r3, [r7, #4]
   2cf54:	681b      	ldr	r3, [r3, #0]
   2cf56:	2201      	movs	r2, #1
   2cf58:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2cf5a:	687b      	ldr	r3, [r7, #4]
   2cf5c:	681b      	ldr	r3, [r3, #0]
   2cf5e:	2100      	movs	r1, #0
   2cf60:	0018      	movs	r0, r3
   2cf62:	4b26      	ldr	r3, [pc, #152]	; (2cffc <dir_next+0x1e4>)
   2cf64:	4798      	blx	r3
   2cf66:	1e03      	subs	r3, r0, #0
   2cf68:	d001      	beq.n	2cf6e <dir_next+0x156>
   2cf6a:	2301      	movs	r3, #1
   2cf6c:	e03d      	b.n	2cfea <dir_next+0x1d2>
						dj->fs->winsect++;
   2cf6e:	687b      	ldr	r3, [r7, #4]
   2cf70:	681b      	ldr	r3, [r3, #0]
   2cf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf74:	3201      	adds	r2, #1
   2cf76:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cf78:	230b      	movs	r3, #11
   2cf7a:	18fb      	adds	r3, r7, r3
   2cf7c:	781a      	ldrb	r2, [r3, #0]
   2cf7e:	230b      	movs	r3, #11
   2cf80:	18fb      	adds	r3, r7, r3
   2cf82:	3201      	adds	r2, #1
   2cf84:	701a      	strb	r2, [r3, #0]
   2cf86:	687b      	ldr	r3, [r7, #4]
   2cf88:	681b      	ldr	r3, [r3, #0]
   2cf8a:	789b      	ldrb	r3, [r3, #2]
   2cf8c:	220b      	movs	r2, #11
   2cf8e:	18ba      	adds	r2, r7, r2
   2cf90:	7812      	ldrb	r2, [r2, #0]
   2cf92:	429a      	cmp	r2, r3
   2cf94:	d3dd      	bcc.n	2cf52 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2cf96:	687b      	ldr	r3, [r7, #4]
   2cf98:	681b      	ldr	r3, [r3, #0]
   2cf9a:	687a      	ldr	r2, [r7, #4]
   2cf9c:	6812      	ldr	r2, [r2, #0]
   2cf9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2cfa0:	220b      	movs	r2, #11
   2cfa2:	18ba      	adds	r2, r7, r2
   2cfa4:	7812      	ldrb	r2, [r2, #0]
   2cfa6:	1a8a      	subs	r2, r1, r2
   2cfa8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2cfaa:	687b      	ldr	r3, [r7, #4]
   2cfac:	68fa      	ldr	r2, [r7, #12]
   2cfae:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2cfb0:	687b      	ldr	r3, [r7, #4]
   2cfb2:	681b      	ldr	r3, [r3, #0]
   2cfb4:	68fa      	ldr	r2, [r7, #12]
   2cfb6:	0011      	movs	r1, r2
   2cfb8:	0018      	movs	r0, r3
   2cfba:	4b12      	ldr	r3, [pc, #72]	; (2d004 <dir_next+0x1ec>)
   2cfbc:	4798      	blx	r3
   2cfbe:	0002      	movs	r2, r0
   2cfc0:	687b      	ldr	r3, [r7, #4]
   2cfc2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2cfc4:	687b      	ldr	r3, [r7, #4]
   2cfc6:	2208      	movs	r2, #8
   2cfc8:	18ba      	adds	r2, r7, r2
   2cfca:	8812      	ldrh	r2, [r2, #0]
   2cfcc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2cfce:	687b      	ldr	r3, [r7, #4]
   2cfd0:	681b      	ldr	r3, [r3, #0]
   2cfd2:	3330      	adds	r3, #48	; 0x30
   2cfd4:	001a      	movs	r2, r3
   2cfd6:	2308      	movs	r3, #8
   2cfd8:	18fb      	adds	r3, r7, r3
   2cfda:	881b      	ldrh	r3, [r3, #0]
   2cfdc:	210f      	movs	r1, #15
   2cfde:	400b      	ands	r3, r1
   2cfe0:	015b      	lsls	r3, r3, #5
   2cfe2:	18d2      	adds	r2, r2, r3
   2cfe4:	687b      	ldr	r3, [r7, #4]
   2cfe6:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2cfe8:	2300      	movs	r3, #0
}
   2cfea:	0018      	movs	r0, r3
   2cfec:	46bd      	mov	sp, r7
   2cfee:	b005      	add	sp, #20
   2cff0:	bd90      	pop	{r4, r7, pc}
   2cff2:	46c0      	nop			; (mov r8, r8)
   2cff4:	0002c73d 	.word	0x0002c73d
   2cff8:	0002cbad 	.word	0x0002cbad
   2cffc:	0002c4a5 	.word	0x0002c4a5
   2d000:	0002c3f9 	.word	0x0002c3f9
   2d004:	0002c705 	.word	0x0002c705

0002d008 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2d008:	b590      	push	{r4, r7, lr}
   2d00a:	b087      	sub	sp, #28
   2d00c:	af00      	add	r7, sp, #0
   2d00e:	6078      	str	r0, [r7, #4]
   2d010:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2d012:	683b      	ldr	r3, [r7, #0]
   2d014:	781b      	ldrb	r3, [r3, #0]
   2d016:	001a      	movs	r2, r3
   2d018:	2340      	movs	r3, #64	; 0x40
   2d01a:	439a      	bics	r2, r3
   2d01c:	0013      	movs	r3, r2
   2d01e:	1e5a      	subs	r2, r3, #1
   2d020:	0013      	movs	r3, r2
   2d022:	005b      	lsls	r3, r3, #1
   2d024:	189b      	adds	r3, r3, r2
   2d026:	009b      	lsls	r3, r3, #2
   2d028:	189b      	adds	r3, r3, r2
   2d02a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2d02c:	2300      	movs	r3, #0
   2d02e:	613b      	str	r3, [r7, #16]
   2d030:	230e      	movs	r3, #14
   2d032:	18fb      	adds	r3, r7, r3
   2d034:	2201      	movs	r2, #1
   2d036:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2d038:	4a31      	ldr	r2, [pc, #196]	; (2d100 <cmp_lfn+0xf8>)
   2d03a:	693b      	ldr	r3, [r7, #16]
   2d03c:	18d3      	adds	r3, r2, r3
   2d03e:	781b      	ldrb	r3, [r3, #0]
   2d040:	3301      	adds	r3, #1
   2d042:	683a      	ldr	r2, [r7, #0]
   2d044:	18d3      	adds	r3, r2, r3
   2d046:	781b      	ldrb	r3, [r3, #0]
   2d048:	021b      	lsls	r3, r3, #8
   2d04a:	b21a      	sxth	r2, r3
   2d04c:	492c      	ldr	r1, [pc, #176]	; (2d100 <cmp_lfn+0xf8>)
   2d04e:	693b      	ldr	r3, [r7, #16]
   2d050:	18cb      	adds	r3, r1, r3
   2d052:	781b      	ldrb	r3, [r3, #0]
   2d054:	0019      	movs	r1, r3
   2d056:	683b      	ldr	r3, [r7, #0]
   2d058:	185b      	adds	r3, r3, r1
   2d05a:	781b      	ldrb	r3, [r3, #0]
   2d05c:	b21b      	sxth	r3, r3
   2d05e:	4313      	orrs	r3, r2
   2d060:	b21a      	sxth	r2, r3
   2d062:	230c      	movs	r3, #12
   2d064:	18fb      	adds	r3, r7, r3
   2d066:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2d068:	230e      	movs	r3, #14
   2d06a:	18fb      	adds	r3, r7, r3
   2d06c:	881b      	ldrh	r3, [r3, #0]
   2d06e:	2b00      	cmp	r3, #0
   2d070:	d01f      	beq.n	2d0b2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d072:	230e      	movs	r3, #14
   2d074:	18fc      	adds	r4, r7, r3
   2d076:	230c      	movs	r3, #12
   2d078:	18fb      	adds	r3, r7, r3
   2d07a:	881b      	ldrh	r3, [r3, #0]
   2d07c:	0018      	movs	r0, r3
   2d07e:	4b21      	ldr	r3, [pc, #132]	; (2d104 <cmp_lfn+0xfc>)
   2d080:	4798      	blx	r3
   2d082:	0003      	movs	r3, r0
   2d084:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d086:	697b      	ldr	r3, [r7, #20]
   2d088:	2bfe      	cmp	r3, #254	; 0xfe
   2d08a:	d810      	bhi.n	2d0ae <cmp_lfn+0xa6>
   2d08c:	697b      	ldr	r3, [r7, #20]
   2d08e:	1c5a      	adds	r2, r3, #1
   2d090:	617a      	str	r2, [r7, #20]
   2d092:	005b      	lsls	r3, r3, #1
   2d094:	687a      	ldr	r2, [r7, #4]
   2d096:	18d3      	adds	r3, r2, r3
   2d098:	881b      	ldrh	r3, [r3, #0]
   2d09a:	0018      	movs	r0, r3
   2d09c:	4b19      	ldr	r3, [pc, #100]	; (2d104 <cmp_lfn+0xfc>)
   2d09e:	4798      	blx	r3
   2d0a0:	0003      	movs	r3, r0
   2d0a2:	001a      	movs	r2, r3
   2d0a4:	230e      	movs	r3, #14
   2d0a6:	18fb      	adds	r3, r7, r3
   2d0a8:	881b      	ldrh	r3, [r3, #0]
   2d0aa:	4293      	cmp	r3, r2
   2d0ac:	d009      	beq.n	2d0c2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d0ae:	2300      	movs	r3, #0
   2d0b0:	e022      	b.n	2d0f8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d0b2:	230c      	movs	r3, #12
   2d0b4:	18fb      	adds	r3, r7, r3
   2d0b6:	881b      	ldrh	r3, [r3, #0]
   2d0b8:	4a13      	ldr	r2, [pc, #76]	; (2d108 <cmp_lfn+0x100>)
   2d0ba:	4293      	cmp	r3, r2
   2d0bc:	d001      	beq.n	2d0c2 <cmp_lfn+0xba>
   2d0be:	2300      	movs	r3, #0
   2d0c0:	e01a      	b.n	2d0f8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d0c2:	693b      	ldr	r3, [r7, #16]
   2d0c4:	3301      	adds	r3, #1
   2d0c6:	613b      	str	r3, [r7, #16]
   2d0c8:	693b      	ldr	r3, [r7, #16]
   2d0ca:	2b0c      	cmp	r3, #12
   2d0cc:	d9b4      	bls.n	2d038 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d0ce:	683b      	ldr	r3, [r7, #0]
   2d0d0:	781b      	ldrb	r3, [r3, #0]
   2d0d2:	001a      	movs	r2, r3
   2d0d4:	2340      	movs	r3, #64	; 0x40
   2d0d6:	4013      	ands	r3, r2
   2d0d8:	d00d      	beq.n	2d0f6 <cmp_lfn+0xee>
   2d0da:	230e      	movs	r3, #14
   2d0dc:	18fb      	adds	r3, r7, r3
   2d0de:	881b      	ldrh	r3, [r3, #0]
   2d0e0:	2b00      	cmp	r3, #0
   2d0e2:	d008      	beq.n	2d0f6 <cmp_lfn+0xee>
   2d0e4:	697b      	ldr	r3, [r7, #20]
   2d0e6:	005b      	lsls	r3, r3, #1
   2d0e8:	687a      	ldr	r2, [r7, #4]
   2d0ea:	18d3      	adds	r3, r2, r3
   2d0ec:	881b      	ldrh	r3, [r3, #0]
   2d0ee:	2b00      	cmp	r3, #0
   2d0f0:	d001      	beq.n	2d0f6 <cmp_lfn+0xee>
		return 0;
   2d0f2:	2300      	movs	r3, #0
   2d0f4:	e000      	b.n	2d0f8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d0f6:	2301      	movs	r3, #1
}
   2d0f8:	0018      	movs	r0, r3
   2d0fa:	46bd      	mov	sp, r7
   2d0fc:	b007      	add	sp, #28
   2d0fe:	bd90      	pop	{r4, r7, pc}
   2d100:	0003b018 	.word	0x0003b018
   2d104:	0002f0b5 	.word	0x0002f0b5
   2d108:	0000ffff 	.word	0x0000ffff

0002d10c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d10c:	b580      	push	{r7, lr}
   2d10e:	b088      	sub	sp, #32
   2d110:	af00      	add	r7, sp, #0
   2d112:	60f8      	str	r0, [r7, #12]
   2d114:	60b9      	str	r1, [r7, #8]
   2d116:	0019      	movs	r1, r3
   2d118:	1dfb      	adds	r3, r7, #7
   2d11a:	701a      	strb	r2, [r3, #0]
   2d11c:	1dbb      	adds	r3, r7, #6
   2d11e:	1c0a      	adds	r2, r1, #0
   2d120:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d122:	68bb      	ldr	r3, [r7, #8]
   2d124:	330d      	adds	r3, #13
   2d126:	1dba      	adds	r2, r7, #6
   2d128:	7812      	ldrb	r2, [r2, #0]
   2d12a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d12c:	68bb      	ldr	r3, [r7, #8]
   2d12e:	330b      	adds	r3, #11
   2d130:	220f      	movs	r2, #15
   2d132:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d134:	68bb      	ldr	r3, [r7, #8]
   2d136:	330c      	adds	r3, #12
   2d138:	2200      	movs	r2, #0
   2d13a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d13c:	68bb      	ldr	r3, [r7, #8]
   2d13e:	331a      	adds	r3, #26
   2d140:	2200      	movs	r2, #0
   2d142:	701a      	strb	r2, [r3, #0]
   2d144:	68bb      	ldr	r3, [r7, #8]
   2d146:	331b      	adds	r3, #27
   2d148:	2200      	movs	r2, #0
   2d14a:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d14c:	1dfb      	adds	r3, r7, #7
   2d14e:	781b      	ldrb	r3, [r3, #0]
   2d150:	1e5a      	subs	r2, r3, #1
   2d152:	0013      	movs	r3, r2
   2d154:	005b      	lsls	r3, r3, #1
   2d156:	189b      	adds	r3, r3, r2
   2d158:	009b      	lsls	r3, r3, #2
   2d15a:	189b      	adds	r3, r3, r2
   2d15c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d15e:	2316      	movs	r3, #22
   2d160:	18fb      	adds	r3, r7, r3
   2d162:	2200      	movs	r2, #0
   2d164:	801a      	strh	r2, [r3, #0]
   2d166:	2300      	movs	r3, #0
   2d168:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d16a:	2316      	movs	r3, #22
   2d16c:	18fb      	adds	r3, r7, r3
   2d16e:	881b      	ldrh	r3, [r3, #0]
   2d170:	4a28      	ldr	r2, [pc, #160]	; (2d214 <fit_lfn+0x108>)
   2d172:	4293      	cmp	r3, r2
   2d174:	d009      	beq.n	2d18a <fit_lfn+0x7e>
   2d176:	69fb      	ldr	r3, [r7, #28]
   2d178:	1c5a      	adds	r2, r3, #1
   2d17a:	61fa      	str	r2, [r7, #28]
   2d17c:	005b      	lsls	r3, r3, #1
   2d17e:	68fa      	ldr	r2, [r7, #12]
   2d180:	18d2      	adds	r2, r2, r3
   2d182:	2316      	movs	r3, #22
   2d184:	18fb      	adds	r3, r7, r3
   2d186:	8812      	ldrh	r2, [r2, #0]
   2d188:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d18a:	4a23      	ldr	r2, [pc, #140]	; (2d218 <fit_lfn+0x10c>)
   2d18c:	69bb      	ldr	r3, [r7, #24]
   2d18e:	18d3      	adds	r3, r2, r3
   2d190:	781b      	ldrb	r3, [r3, #0]
   2d192:	001a      	movs	r2, r3
   2d194:	68bb      	ldr	r3, [r7, #8]
   2d196:	189b      	adds	r3, r3, r2
   2d198:	2216      	movs	r2, #22
   2d19a:	18ba      	adds	r2, r7, r2
   2d19c:	8812      	ldrh	r2, [r2, #0]
   2d19e:	b2d2      	uxtb	r2, r2
   2d1a0:	701a      	strb	r2, [r3, #0]
   2d1a2:	4a1d      	ldr	r2, [pc, #116]	; (2d218 <fit_lfn+0x10c>)
   2d1a4:	69bb      	ldr	r3, [r7, #24]
   2d1a6:	18d3      	adds	r3, r2, r3
   2d1a8:	781b      	ldrb	r3, [r3, #0]
   2d1aa:	3301      	adds	r3, #1
   2d1ac:	68ba      	ldr	r2, [r7, #8]
   2d1ae:	18d3      	adds	r3, r2, r3
   2d1b0:	2216      	movs	r2, #22
   2d1b2:	18ba      	adds	r2, r7, r2
   2d1b4:	8812      	ldrh	r2, [r2, #0]
   2d1b6:	0a12      	lsrs	r2, r2, #8
   2d1b8:	b292      	uxth	r2, r2
   2d1ba:	b2d2      	uxtb	r2, r2
   2d1bc:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d1be:	2316      	movs	r3, #22
   2d1c0:	18fb      	adds	r3, r7, r3
   2d1c2:	881b      	ldrh	r3, [r3, #0]
   2d1c4:	2b00      	cmp	r3, #0
   2d1c6:	d104      	bne.n	2d1d2 <fit_lfn+0xc6>
   2d1c8:	2316      	movs	r3, #22
   2d1ca:	18fb      	adds	r3, r7, r3
   2d1cc:	2201      	movs	r2, #1
   2d1ce:	4252      	negs	r2, r2
   2d1d0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d1d2:	69bb      	ldr	r3, [r7, #24]
   2d1d4:	3301      	adds	r3, #1
   2d1d6:	61bb      	str	r3, [r7, #24]
   2d1d8:	69bb      	ldr	r3, [r7, #24]
   2d1da:	2b0c      	cmp	r3, #12
   2d1dc:	d9c5      	bls.n	2d16a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d1de:	2316      	movs	r3, #22
   2d1e0:	18fb      	adds	r3, r7, r3
   2d1e2:	881b      	ldrh	r3, [r3, #0]
   2d1e4:	4a0b      	ldr	r2, [pc, #44]	; (2d214 <fit_lfn+0x108>)
   2d1e6:	4293      	cmp	r3, r2
   2d1e8:	d006      	beq.n	2d1f8 <fit_lfn+0xec>
   2d1ea:	69fb      	ldr	r3, [r7, #28]
   2d1ec:	005b      	lsls	r3, r3, #1
   2d1ee:	68fa      	ldr	r2, [r7, #12]
   2d1f0:	18d3      	adds	r3, r2, r3
   2d1f2:	881b      	ldrh	r3, [r3, #0]
   2d1f4:	2b00      	cmp	r3, #0
   2d1f6:	d105      	bne.n	2d204 <fit_lfn+0xf8>
   2d1f8:	1dfb      	adds	r3, r7, #7
   2d1fa:	1dfa      	adds	r2, r7, #7
   2d1fc:	7812      	ldrb	r2, [r2, #0]
   2d1fe:	2140      	movs	r1, #64	; 0x40
   2d200:	430a      	orrs	r2, r1
   2d202:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d204:	68bb      	ldr	r3, [r7, #8]
   2d206:	1dfa      	adds	r2, r7, #7
   2d208:	7812      	ldrb	r2, [r2, #0]
   2d20a:	701a      	strb	r2, [r3, #0]
}
   2d20c:	46c0      	nop			; (mov r8, r8)
   2d20e:	46bd      	mov	sp, r7
   2d210:	b008      	add	sp, #32
   2d212:	bd80      	pop	{r7, pc}
   2d214:	0000ffff 	.word	0x0000ffff
   2d218:	0003b018 	.word	0x0003b018

0002d21c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d21c:	b580      	push	{r7, lr}
   2d21e:	b08a      	sub	sp, #40	; 0x28
   2d220:	af00      	add	r7, sp, #0
   2d222:	60f8      	str	r0, [r7, #12]
   2d224:	60b9      	str	r1, [r7, #8]
   2d226:	607a      	str	r2, [r7, #4]
   2d228:	001a      	movs	r2, r3
   2d22a:	1cbb      	adds	r3, r7, #2
   2d22c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d22e:	68b9      	ldr	r1, [r7, #8]
   2d230:	68fb      	ldr	r3, [r7, #12]
   2d232:	220b      	movs	r2, #11
   2d234:	0018      	movs	r0, r3
   2d236:	4b38      	ldr	r3, [pc, #224]	; (2d318 <gen_numname+0xfc>)
   2d238:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d23a:	1cbb      	adds	r3, r7, #2
   2d23c:	881b      	ldrh	r3, [r3, #0]
   2d23e:	2b05      	cmp	r3, #5
   2d240:	d911      	bls.n	2d266 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d242:	1cbb      	adds	r3, r7, #2
   2d244:	881b      	ldrh	r3, [r3, #0]
   2d246:	b29a      	uxth	r2, r3
   2d248:	0852      	lsrs	r2, r2, #1
   2d24a:	03db      	lsls	r3, r3, #15
   2d24c:	4313      	orrs	r3, r2
   2d24e:	b299      	uxth	r1, r3
   2d250:	687b      	ldr	r3, [r7, #4]
   2d252:	1c9a      	adds	r2, r3, #2
   2d254:	607a      	str	r2, [r7, #4]
   2d256:	881a      	ldrh	r2, [r3, #0]
   2d258:	1cbb      	adds	r3, r7, #2
   2d25a:	188a      	adds	r2, r1, r2
   2d25c:	801a      	strh	r2, [r3, #0]
   2d25e:	687b      	ldr	r3, [r7, #4]
   2d260:	881b      	ldrh	r3, [r3, #0]
   2d262:	2b00      	cmp	r3, #0
   2d264:	d1ed      	bne.n	2d242 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d266:	2307      	movs	r3, #7
   2d268:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d26a:	1cbb      	adds	r3, r7, #2
   2d26c:	881b      	ldrh	r3, [r3, #0]
   2d26e:	b2db      	uxtb	r3, r3
   2d270:	220f      	movs	r2, #15
   2d272:	4013      	ands	r3, r2
   2d274:	b2da      	uxtb	r2, r3
   2d276:	2327      	movs	r3, #39	; 0x27
   2d278:	18fb      	adds	r3, r7, r3
   2d27a:	3230      	adds	r2, #48	; 0x30
   2d27c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d27e:	2327      	movs	r3, #39	; 0x27
   2d280:	18fb      	adds	r3, r7, r3
   2d282:	781b      	ldrb	r3, [r3, #0]
   2d284:	2b39      	cmp	r3, #57	; 0x39
   2d286:	d906      	bls.n	2d296 <gen_numname+0x7a>
   2d288:	2327      	movs	r3, #39	; 0x27
   2d28a:	18fb      	adds	r3, r7, r3
   2d28c:	2227      	movs	r2, #39	; 0x27
   2d28e:	18ba      	adds	r2, r7, r2
   2d290:	7812      	ldrb	r2, [r2, #0]
   2d292:	3207      	adds	r2, #7
   2d294:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d296:	6a3b      	ldr	r3, [r7, #32]
   2d298:	1e5a      	subs	r2, r3, #1
   2d29a:	623a      	str	r2, [r7, #32]
   2d29c:	2214      	movs	r2, #20
   2d29e:	18ba      	adds	r2, r7, r2
   2d2a0:	2127      	movs	r1, #39	; 0x27
   2d2a2:	1879      	adds	r1, r7, r1
   2d2a4:	7809      	ldrb	r1, [r1, #0]
   2d2a6:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d2a8:	1cbb      	adds	r3, r7, #2
   2d2aa:	1cba      	adds	r2, r7, #2
   2d2ac:	8812      	ldrh	r2, [r2, #0]
   2d2ae:	0912      	lsrs	r2, r2, #4
   2d2b0:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d2b2:	1cbb      	adds	r3, r7, #2
   2d2b4:	881b      	ldrh	r3, [r3, #0]
   2d2b6:	2b00      	cmp	r3, #0
   2d2b8:	d1d7      	bne.n	2d26a <gen_numname+0x4e>
	ns[i] = '~';
   2d2ba:	2314      	movs	r3, #20
   2d2bc:	18fa      	adds	r2, r7, r3
   2d2be:	6a3b      	ldr	r3, [r7, #32]
   2d2c0:	18d3      	adds	r3, r2, r3
   2d2c2:	227e      	movs	r2, #126	; 0x7e
   2d2c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d2c6:	2300      	movs	r3, #0
   2d2c8:	61fb      	str	r3, [r7, #28]
   2d2ca:	e002      	b.n	2d2d2 <gen_numname+0xb6>
   2d2cc:	69fb      	ldr	r3, [r7, #28]
   2d2ce:	3301      	adds	r3, #1
   2d2d0:	61fb      	str	r3, [r7, #28]
   2d2d2:	69fa      	ldr	r2, [r7, #28]
   2d2d4:	6a3b      	ldr	r3, [r7, #32]
   2d2d6:	429a      	cmp	r2, r3
   2d2d8:	d205      	bcs.n	2d2e6 <gen_numname+0xca>
   2d2da:	68fa      	ldr	r2, [r7, #12]
   2d2dc:	69fb      	ldr	r3, [r7, #28]
   2d2de:	18d3      	adds	r3, r2, r3
   2d2e0:	781b      	ldrb	r3, [r3, #0]
   2d2e2:	2b20      	cmp	r3, #32
   2d2e4:	d1f2      	bne.n	2d2cc <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d2e6:	69fb      	ldr	r3, [r7, #28]
   2d2e8:	1c5a      	adds	r2, r3, #1
   2d2ea:	61fa      	str	r2, [r7, #28]
   2d2ec:	68fa      	ldr	r2, [r7, #12]
   2d2ee:	18d2      	adds	r2, r2, r3
   2d2f0:	6a3b      	ldr	r3, [r7, #32]
   2d2f2:	2b07      	cmp	r3, #7
   2d2f4:	d806      	bhi.n	2d304 <gen_numname+0xe8>
   2d2f6:	6a3b      	ldr	r3, [r7, #32]
   2d2f8:	1c59      	adds	r1, r3, #1
   2d2fa:	6239      	str	r1, [r7, #32]
   2d2fc:	2114      	movs	r1, #20
   2d2fe:	1879      	adds	r1, r7, r1
   2d300:	5ccb      	ldrb	r3, [r1, r3]
   2d302:	e000      	b.n	2d306 <gen_numname+0xea>
   2d304:	2320      	movs	r3, #32
   2d306:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d308:	69fb      	ldr	r3, [r7, #28]
   2d30a:	2b07      	cmp	r3, #7
   2d30c:	d9eb      	bls.n	2d2e6 <gen_numname+0xca>
}
   2d30e:	46c0      	nop			; (mov r8, r8)
   2d310:	46bd      	mov	sp, r7
   2d312:	b00a      	add	sp, #40	; 0x28
   2d314:	bd80      	pop	{r7, pc}
   2d316:	46c0      	nop			; (mov r8, r8)
   2d318:	0002c3c1 	.word	0x0002c3c1

0002d31c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d31c:	b580      	push	{r7, lr}
   2d31e:	b084      	sub	sp, #16
   2d320:	af00      	add	r7, sp, #0
   2d322:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d324:	230f      	movs	r3, #15
   2d326:	18fb      	adds	r3, r7, r3
   2d328:	2200      	movs	r2, #0
   2d32a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d32c:	230b      	movs	r3, #11
   2d32e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d330:	230f      	movs	r3, #15
   2d332:	18fb      	adds	r3, r7, r3
   2d334:	781b      	ldrb	r3, [r3, #0]
   2d336:	b2da      	uxtb	r2, r3
   2d338:	0852      	lsrs	r2, r2, #1
   2d33a:	01db      	lsls	r3, r3, #7
   2d33c:	4313      	orrs	r3, r2
   2d33e:	b2d9      	uxtb	r1, r3
   2d340:	687b      	ldr	r3, [r7, #4]
   2d342:	1c5a      	adds	r2, r3, #1
   2d344:	607a      	str	r2, [r7, #4]
   2d346:	781a      	ldrb	r2, [r3, #0]
   2d348:	230f      	movs	r3, #15
   2d34a:	18fb      	adds	r3, r7, r3
   2d34c:	188a      	adds	r2, r1, r2
   2d34e:	701a      	strb	r2, [r3, #0]
   2d350:	68bb      	ldr	r3, [r7, #8]
   2d352:	3b01      	subs	r3, #1
   2d354:	60bb      	str	r3, [r7, #8]
   2d356:	68bb      	ldr	r3, [r7, #8]
   2d358:	2b00      	cmp	r3, #0
   2d35a:	d1e9      	bne.n	2d330 <sum_sfn+0x14>
	return sum;
   2d35c:	230f      	movs	r3, #15
   2d35e:	18fb      	adds	r3, r7, r3
   2d360:	781b      	ldrb	r3, [r3, #0]
}
   2d362:	0018      	movs	r0, r3
   2d364:	46bd      	mov	sp, r7
   2d366:	b004      	add	sp, #16
   2d368:	bd80      	pop	{r7, pc}
	...

0002d36c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d36c:	b590      	push	{r4, r7, lr}
   2d36e:	b087      	sub	sp, #28
   2d370:	af00      	add	r7, sp, #0
   2d372:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d374:	2317      	movs	r3, #23
   2d376:	18fc      	adds	r4, r7, r3
   2d378:	687b      	ldr	r3, [r7, #4]
   2d37a:	2100      	movs	r1, #0
   2d37c:	0018      	movs	r0, r3
   2d37e:	4b74      	ldr	r3, [pc, #464]	; (2d550 <dir_find+0x1e4>)
   2d380:	4798      	blx	r3
   2d382:	0003      	movs	r3, r0
   2d384:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d386:	2317      	movs	r3, #23
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	781b      	ldrb	r3, [r3, #0]
   2d38c:	2b00      	cmp	r3, #0
   2d38e:	d003      	beq.n	2d398 <dir_find+0x2c>
   2d390:	2317      	movs	r3, #23
   2d392:	18fb      	adds	r3, r7, r3
   2d394:	781b      	ldrb	r3, [r3, #0]
   2d396:	e0d6      	b.n	2d546 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d398:	2314      	movs	r3, #20
   2d39a:	18fb      	adds	r3, r7, r3
   2d39c:	22ff      	movs	r2, #255	; 0xff
   2d39e:	701a      	strb	r2, [r3, #0]
   2d3a0:	2315      	movs	r3, #21
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	2214      	movs	r2, #20
   2d3a6:	18ba      	adds	r2, r7, r2
   2d3a8:	7812      	ldrb	r2, [r2, #0]
   2d3aa:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d3ac:	687b      	ldr	r3, [r7, #4]
   2d3ae:	681a      	ldr	r2, [r3, #0]
   2d3b0:	687b      	ldr	r3, [r7, #4]
   2d3b2:	691b      	ldr	r3, [r3, #16]
   2d3b4:	2117      	movs	r1, #23
   2d3b6:	187c      	adds	r4, r7, r1
   2d3b8:	0019      	movs	r1, r3
   2d3ba:	0010      	movs	r0, r2
   2d3bc:	4b65      	ldr	r3, [pc, #404]	; (2d554 <dir_find+0x1e8>)
   2d3be:	4798      	blx	r3
   2d3c0:	0003      	movs	r3, r0
   2d3c2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d3c4:	2317      	movs	r3, #23
   2d3c6:	18fb      	adds	r3, r7, r3
   2d3c8:	781b      	ldrb	r3, [r3, #0]
   2d3ca:	2b00      	cmp	r3, #0
   2d3cc:	d000      	beq.n	2d3d0 <dir_find+0x64>
   2d3ce:	e0b2      	b.n	2d536 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d3d0:	687b      	ldr	r3, [r7, #4]
   2d3d2:	695b      	ldr	r3, [r3, #20]
   2d3d4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d3d6:	2316      	movs	r3, #22
   2d3d8:	18fb      	adds	r3, r7, r3
   2d3da:	693a      	ldr	r2, [r7, #16]
   2d3dc:	7812      	ldrb	r2, [r2, #0]
   2d3de:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d3e0:	2316      	movs	r3, #22
   2d3e2:	18fb      	adds	r3, r7, r3
   2d3e4:	781b      	ldrb	r3, [r3, #0]
   2d3e6:	2b00      	cmp	r3, #0
   2d3e8:	d104      	bne.n	2d3f4 <dir_find+0x88>
   2d3ea:	2317      	movs	r3, #23
   2d3ec:	18fb      	adds	r3, r7, r3
   2d3ee:	2204      	movs	r2, #4
   2d3f0:	701a      	strb	r2, [r3, #0]
   2d3f2:	e0a5      	b.n	2d540 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d3f4:	693b      	ldr	r3, [r7, #16]
   2d3f6:	330b      	adds	r3, #11
   2d3f8:	781a      	ldrb	r2, [r3, #0]
   2d3fa:	230f      	movs	r3, #15
   2d3fc:	18fb      	adds	r3, r7, r3
   2d3fe:	213f      	movs	r1, #63	; 0x3f
   2d400:	400a      	ands	r2, r1
   2d402:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d404:	2316      	movs	r3, #22
   2d406:	18fb      	adds	r3, r7, r3
   2d408:	781b      	ldrb	r3, [r3, #0]
   2d40a:	2be5      	cmp	r3, #229	; 0xe5
   2d40c:	d00a      	beq.n	2d424 <dir_find+0xb8>
   2d40e:	230f      	movs	r3, #15
   2d410:	18fb      	adds	r3, r7, r3
   2d412:	781b      	ldrb	r3, [r3, #0]
   2d414:	2208      	movs	r2, #8
   2d416:	4013      	ands	r3, r2
   2d418:	d009      	beq.n	2d42e <dir_find+0xc2>
   2d41a:	230f      	movs	r3, #15
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	781b      	ldrb	r3, [r3, #0]
   2d420:	2b0f      	cmp	r3, #15
   2d422:	d004      	beq.n	2d42e <dir_find+0xc2>
			ord = 0xFF;
   2d424:	2315      	movs	r3, #21
   2d426:	18fb      	adds	r3, r7, r3
   2d428:	22ff      	movs	r2, #255	; 0xff
   2d42a:	701a      	strb	r2, [r3, #0]
   2d42c:	e073      	b.n	2d516 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d42e:	230f      	movs	r3, #15
   2d430:	18fb      	adds	r3, r7, r3
   2d432:	781b      	ldrb	r3, [r3, #0]
   2d434:	2b0f      	cmp	r3, #15
   2d436:	d145      	bne.n	2d4c4 <dir_find+0x158>
				if (dj->lfn) {
   2d438:	687b      	ldr	r3, [r7, #4]
   2d43a:	69db      	ldr	r3, [r3, #28]
   2d43c:	2b00      	cmp	r3, #0
   2d43e:	d100      	bne.n	2d442 <dir_find+0xd6>
   2d440:	e069      	b.n	2d516 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d442:	2316      	movs	r3, #22
   2d444:	18fb      	adds	r3, r7, r3
   2d446:	781b      	ldrb	r3, [r3, #0]
   2d448:	2240      	movs	r2, #64	; 0x40
   2d44a:	4013      	ands	r3, r2
   2d44c:	d016      	beq.n	2d47c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d44e:	2314      	movs	r3, #20
   2d450:	18fb      	adds	r3, r7, r3
   2d452:	693a      	ldr	r2, [r7, #16]
   2d454:	7b52      	ldrb	r2, [r2, #13]
   2d456:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d458:	2316      	movs	r3, #22
   2d45a:	18fb      	adds	r3, r7, r3
   2d45c:	2216      	movs	r2, #22
   2d45e:	18ba      	adds	r2, r7, r2
   2d460:	7812      	ldrb	r2, [r2, #0]
   2d462:	2140      	movs	r1, #64	; 0x40
   2d464:	438a      	bics	r2, r1
   2d466:	701a      	strb	r2, [r3, #0]
   2d468:	2315      	movs	r3, #21
   2d46a:	18fb      	adds	r3, r7, r3
   2d46c:	2216      	movs	r2, #22
   2d46e:	18ba      	adds	r2, r7, r2
   2d470:	7812      	ldrb	r2, [r2, #0]
   2d472:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d474:	687b      	ldr	r3, [r7, #4]
   2d476:	88da      	ldrh	r2, [r3, #6]
   2d478:	687b      	ldr	r3, [r7, #4]
   2d47a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d47c:	2316      	movs	r3, #22
   2d47e:	18fa      	adds	r2, r7, r3
   2d480:	2315      	movs	r3, #21
   2d482:	18fb      	adds	r3, r7, r3
   2d484:	7812      	ldrb	r2, [r2, #0]
   2d486:	781b      	ldrb	r3, [r3, #0]
   2d488:	429a      	cmp	r2, r3
   2d48a:	d116      	bne.n	2d4ba <dir_find+0x14e>
   2d48c:	693b      	ldr	r3, [r7, #16]
   2d48e:	330d      	adds	r3, #13
   2d490:	781b      	ldrb	r3, [r3, #0]
   2d492:	2214      	movs	r2, #20
   2d494:	18ba      	adds	r2, r7, r2
   2d496:	7812      	ldrb	r2, [r2, #0]
   2d498:	429a      	cmp	r2, r3
   2d49a:	d10e      	bne.n	2d4ba <dir_find+0x14e>
   2d49c:	687b      	ldr	r3, [r7, #4]
   2d49e:	69db      	ldr	r3, [r3, #28]
   2d4a0:	693a      	ldr	r2, [r7, #16]
   2d4a2:	0011      	movs	r1, r2
   2d4a4:	0018      	movs	r0, r3
   2d4a6:	4b2c      	ldr	r3, [pc, #176]	; (2d558 <dir_find+0x1ec>)
   2d4a8:	4798      	blx	r3
   2d4aa:	1e03      	subs	r3, r0, #0
   2d4ac:	d005      	beq.n	2d4ba <dir_find+0x14e>
   2d4ae:	2315      	movs	r3, #21
   2d4b0:	18fb      	adds	r3, r7, r3
   2d4b2:	781b      	ldrb	r3, [r3, #0]
   2d4b4:	3b01      	subs	r3, #1
   2d4b6:	b2da      	uxtb	r2, r3
   2d4b8:	e000      	b.n	2d4bc <dir_find+0x150>
   2d4ba:	22ff      	movs	r2, #255	; 0xff
   2d4bc:	2315      	movs	r3, #21
   2d4be:	18fb      	adds	r3, r7, r3
   2d4c0:	701a      	strb	r2, [r3, #0]
   2d4c2:	e028      	b.n	2d516 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d4c4:	2315      	movs	r3, #21
   2d4c6:	18fb      	adds	r3, r7, r3
   2d4c8:	781b      	ldrb	r3, [r3, #0]
   2d4ca:	2b00      	cmp	r3, #0
   2d4cc:	d10a      	bne.n	2d4e4 <dir_find+0x178>
   2d4ce:	693b      	ldr	r3, [r7, #16]
   2d4d0:	0018      	movs	r0, r3
   2d4d2:	4b22      	ldr	r3, [pc, #136]	; (2d55c <dir_find+0x1f0>)
   2d4d4:	4798      	blx	r3
   2d4d6:	0003      	movs	r3, r0
   2d4d8:	001a      	movs	r2, r3
   2d4da:	2314      	movs	r3, #20
   2d4dc:	18fb      	adds	r3, r7, r3
   2d4de:	781b      	ldrb	r3, [r3, #0]
   2d4e0:	4293      	cmp	r3, r2
   2d4e2:	d02a      	beq.n	2d53a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d4e4:	2315      	movs	r3, #21
   2d4e6:	18fb      	adds	r3, r7, r3
   2d4e8:	22ff      	movs	r2, #255	; 0xff
   2d4ea:	701a      	strb	r2, [r3, #0]
   2d4ec:	687b      	ldr	r3, [r7, #4]
   2d4ee:	2201      	movs	r2, #1
   2d4f0:	4252      	negs	r2, r2
   2d4f2:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d4f4:	687b      	ldr	r3, [r7, #4]
   2d4f6:	699b      	ldr	r3, [r3, #24]
   2d4f8:	330b      	adds	r3, #11
   2d4fa:	781b      	ldrb	r3, [r3, #0]
   2d4fc:	001a      	movs	r2, r3
   2d4fe:	2301      	movs	r3, #1
   2d500:	4013      	ands	r3, r2
   2d502:	d108      	bne.n	2d516 <dir_find+0x1aa>
   2d504:	687b      	ldr	r3, [r7, #4]
   2d506:	6999      	ldr	r1, [r3, #24]
   2d508:	693b      	ldr	r3, [r7, #16]
   2d50a:	220b      	movs	r2, #11
   2d50c:	0018      	movs	r0, r3
   2d50e:	4b14      	ldr	r3, [pc, #80]	; (2d560 <dir_find+0x1f4>)
   2d510:	4798      	blx	r3
   2d512:	1e03      	subs	r3, r0, #0
   2d514:	d013      	beq.n	2d53e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d516:	2317      	movs	r3, #23
   2d518:	18fc      	adds	r4, r7, r3
   2d51a:	687b      	ldr	r3, [r7, #4]
   2d51c:	2100      	movs	r1, #0
   2d51e:	0018      	movs	r0, r3
   2d520:	4b10      	ldr	r3, [pc, #64]	; (2d564 <dir_find+0x1f8>)
   2d522:	4798      	blx	r3
   2d524:	0003      	movs	r3, r0
   2d526:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d528:	2317      	movs	r3, #23
   2d52a:	18fb      	adds	r3, r7, r3
   2d52c:	781b      	ldrb	r3, [r3, #0]
   2d52e:	2b00      	cmp	r3, #0
   2d530:	d100      	bne.n	2d534 <dir_find+0x1c8>
   2d532:	e73b      	b.n	2d3ac <dir_find+0x40>
   2d534:	e004      	b.n	2d540 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d536:	46c0      	nop			; (mov r8, r8)
   2d538:	e002      	b.n	2d540 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d53a:	46c0      	nop			; (mov r8, r8)
   2d53c:	e000      	b.n	2d540 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d53e:	46c0      	nop			; (mov r8, r8)

	return res;
   2d540:	2317      	movs	r3, #23
   2d542:	18fb      	adds	r3, r7, r3
   2d544:	781b      	ldrb	r3, [r3, #0]
}
   2d546:	0018      	movs	r0, r3
   2d548:	46bd      	mov	sp, r7
   2d54a:	b007      	add	sp, #28
   2d54c:	bd90      	pop	{r4, r7, pc}
   2d54e:	46c0      	nop			; (mov r8, r8)
   2d550:	0002cce9 	.word	0x0002cce9
   2d554:	0002c4a5 	.word	0x0002c4a5
   2d558:	0002d009 	.word	0x0002d009
   2d55c:	0002d31d 	.word	0x0002d31d
   2d560:	0002c429 	.word	0x0002c429
   2d564:	0002ce19 	.word	0x0002ce19

0002d568 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d568:	b590      	push	{r4, r7, lr}
   2d56a:	b08d      	sub	sp, #52	; 0x34
   2d56c:	af00      	add	r7, sp, #0
   2d56e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d570:	687b      	ldr	r3, [r7, #4]
   2d572:	699b      	ldr	r3, [r3, #24]
   2d574:	627b      	str	r3, [r7, #36]	; 0x24
   2d576:	687b      	ldr	r3, [r7, #4]
   2d578:	69db      	ldr	r3, [r3, #28]
   2d57a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d57e:	230c      	movs	r3, #12
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	220c      	movs	r2, #12
   2d584:	0018      	movs	r0, r3
   2d586:	4bc8      	ldr	r3, [pc, #800]	; (2d8a8 <dir_register+0x340>)
   2d588:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d58a:	230c      	movs	r3, #12
   2d58c:	18fb      	adds	r3, r7, r3
   2d58e:	7adb      	ldrb	r3, [r3, #11]
   2d590:	001a      	movs	r2, r3
   2d592:	2301      	movs	r3, #1
   2d594:	4013      	ands	r3, r2
   2d596:	d048      	beq.n	2d62a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d59a:	330b      	adds	r3, #11
   2d59c:	2200      	movs	r2, #0
   2d59e:	701a      	strb	r2, [r3, #0]
   2d5a0:	687b      	ldr	r3, [r7, #4]
   2d5a2:	2200      	movs	r2, #0
   2d5a4:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d5a6:	232c      	movs	r3, #44	; 0x2c
   2d5a8:	18fb      	adds	r3, r7, r3
   2d5aa:	2201      	movs	r2, #1
   2d5ac:	801a      	strh	r2, [r3, #0]
   2d5ae:	e01c      	b.n	2d5ea <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d5b0:	232c      	movs	r3, #44	; 0x2c
   2d5b2:	18fb      	adds	r3, r7, r3
   2d5b4:	881b      	ldrh	r3, [r3, #0]
   2d5b6:	6a3a      	ldr	r2, [r7, #32]
   2d5b8:	210c      	movs	r1, #12
   2d5ba:	1879      	adds	r1, r7, r1
   2d5bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d5be:	4cbb      	ldr	r4, [pc, #748]	; (2d8ac <dir_register+0x344>)
   2d5c0:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d5c2:	232f      	movs	r3, #47	; 0x2f
   2d5c4:	18fc      	adds	r4, r7, r3
   2d5c6:	687b      	ldr	r3, [r7, #4]
   2d5c8:	0018      	movs	r0, r3
   2d5ca:	4bb9      	ldr	r3, [pc, #740]	; (2d8b0 <dir_register+0x348>)
   2d5cc:	4798      	blx	r3
   2d5ce:	0003      	movs	r3, r0
   2d5d0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d5d2:	232f      	movs	r3, #47	; 0x2f
   2d5d4:	18fb      	adds	r3, r7, r3
   2d5d6:	781b      	ldrb	r3, [r3, #0]
   2d5d8:	2b00      	cmp	r3, #0
   2d5da:	d10c      	bne.n	2d5f6 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d5dc:	232c      	movs	r3, #44	; 0x2c
   2d5de:	18fb      	adds	r3, r7, r3
   2d5e0:	881a      	ldrh	r2, [r3, #0]
   2d5e2:	232c      	movs	r3, #44	; 0x2c
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	3201      	adds	r2, #1
   2d5e8:	801a      	strh	r2, [r3, #0]
   2d5ea:	232c      	movs	r3, #44	; 0x2c
   2d5ec:	18fb      	adds	r3, r7, r3
   2d5ee:	881b      	ldrh	r3, [r3, #0]
   2d5f0:	2b63      	cmp	r3, #99	; 0x63
   2d5f2:	d9dd      	bls.n	2d5b0 <dir_register+0x48>
   2d5f4:	e000      	b.n	2d5f8 <dir_register+0x90>
			if (res != FR_OK) break;
   2d5f6:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d5f8:	232c      	movs	r3, #44	; 0x2c
   2d5fa:	18fb      	adds	r3, r7, r3
   2d5fc:	881b      	ldrh	r3, [r3, #0]
   2d5fe:	2b64      	cmp	r3, #100	; 0x64
   2d600:	d101      	bne.n	2d606 <dir_register+0x9e>
   2d602:	2307      	movs	r3, #7
   2d604:	e14c      	b.n	2d8a0 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d606:	232f      	movs	r3, #47	; 0x2f
   2d608:	18fb      	adds	r3, r7, r3
   2d60a:	781b      	ldrb	r3, [r3, #0]
   2d60c:	2b04      	cmp	r3, #4
   2d60e:	d003      	beq.n	2d618 <dir_register+0xb0>
   2d610:	232f      	movs	r3, #47	; 0x2f
   2d612:	18fb      	adds	r3, r7, r3
   2d614:	781b      	ldrb	r3, [r3, #0]
   2d616:	e143      	b.n	2d8a0 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d61a:	330b      	adds	r3, #11
   2d61c:	220c      	movs	r2, #12
   2d61e:	18ba      	adds	r2, r7, r2
   2d620:	7ad2      	ldrb	r2, [r2, #11]
   2d622:	701a      	strb	r2, [r3, #0]
   2d624:	687b      	ldr	r3, [r7, #4]
   2d626:	6a3a      	ldr	r2, [r7, #32]
   2d628:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d62a:	230c      	movs	r3, #12
   2d62c:	18fb      	adds	r3, r7, r3
   2d62e:	7adb      	ldrb	r3, [r3, #11]
   2d630:	001a      	movs	r2, r3
   2d632:	2302      	movs	r3, #2
   2d634:	4013      	ands	r3, r2
   2d636:	d023      	beq.n	2d680 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d638:	232a      	movs	r3, #42	; 0x2a
   2d63a:	18fb      	adds	r3, r7, r3
   2d63c:	2200      	movs	r2, #0
   2d63e:	801a      	strh	r2, [r3, #0]
   2d640:	e006      	b.n	2d650 <dir_register+0xe8>
   2d642:	232a      	movs	r3, #42	; 0x2a
   2d644:	18fb      	adds	r3, r7, r3
   2d646:	881a      	ldrh	r2, [r3, #0]
   2d648:	232a      	movs	r3, #42	; 0x2a
   2d64a:	18fb      	adds	r3, r7, r3
   2d64c:	3201      	adds	r2, #1
   2d64e:	801a      	strh	r2, [r3, #0]
   2d650:	232a      	movs	r3, #42	; 0x2a
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	881b      	ldrh	r3, [r3, #0]
   2d656:	005b      	lsls	r3, r3, #1
   2d658:	6a3a      	ldr	r2, [r7, #32]
   2d65a:	18d3      	adds	r3, r2, r3
   2d65c:	881b      	ldrh	r3, [r3, #0]
   2d65e:	2b00      	cmp	r3, #0
   2d660:	d1ef      	bne.n	2d642 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d662:	232a      	movs	r3, #42	; 0x2a
   2d664:	18fb      	adds	r3, r7, r3
   2d666:	881b      	ldrh	r3, [r3, #0]
   2d668:	3319      	adds	r3, #25
   2d66a:	001a      	movs	r2, r3
   2d66c:	4b91      	ldr	r3, [pc, #580]	; (2d8b4 <dir_register+0x34c>)
   2d66e:	210d      	movs	r1, #13
   2d670:	0010      	movs	r0, r2
   2d672:	4798      	blx	r3
   2d674:	0003      	movs	r3, r0
   2d676:	001a      	movs	r2, r3
   2d678:	232a      	movs	r3, #42	; 0x2a
   2d67a:	18fb      	adds	r3, r7, r3
   2d67c:	801a      	strh	r2, [r3, #0]
   2d67e:	e003      	b.n	2d688 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d680:	232a      	movs	r3, #42	; 0x2a
   2d682:	18fb      	adds	r3, r7, r3
   2d684:	2201      	movs	r2, #1
   2d686:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d688:	232f      	movs	r3, #47	; 0x2f
   2d68a:	18fc      	adds	r4, r7, r3
   2d68c:	687b      	ldr	r3, [r7, #4]
   2d68e:	2100      	movs	r1, #0
   2d690:	0018      	movs	r0, r3
   2d692:	4b89      	ldr	r3, [pc, #548]	; (2d8b8 <dir_register+0x350>)
   2d694:	4798      	blx	r3
   2d696:	0003      	movs	r3, r0
   2d698:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d69a:	232f      	movs	r3, #47	; 0x2f
   2d69c:	18fb      	adds	r3, r7, r3
   2d69e:	781b      	ldrb	r3, [r3, #0]
   2d6a0:	2b00      	cmp	r3, #0
   2d6a2:	d003      	beq.n	2d6ac <dir_register+0x144>
   2d6a4:	232f      	movs	r3, #47	; 0x2f
   2d6a6:	18fb      	adds	r3, r7, r3
   2d6a8:	781b      	ldrb	r3, [r3, #0]
   2d6aa:	e0f9      	b.n	2d8a0 <dir_register+0x338>
	n = is = 0;
   2d6ac:	2328      	movs	r3, #40	; 0x28
   2d6ae:	18fb      	adds	r3, r7, r3
   2d6b0:	2200      	movs	r2, #0
   2d6b2:	801a      	strh	r2, [r3, #0]
   2d6b4:	232c      	movs	r3, #44	; 0x2c
   2d6b6:	18fb      	adds	r3, r7, r3
   2d6b8:	2228      	movs	r2, #40	; 0x28
   2d6ba:	18ba      	adds	r2, r7, r2
   2d6bc:	8812      	ldrh	r2, [r2, #0]
   2d6be:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d6c0:	687b      	ldr	r3, [r7, #4]
   2d6c2:	681a      	ldr	r2, [r3, #0]
   2d6c4:	687b      	ldr	r3, [r7, #4]
   2d6c6:	691b      	ldr	r3, [r3, #16]
   2d6c8:	212f      	movs	r1, #47	; 0x2f
   2d6ca:	187c      	adds	r4, r7, r1
   2d6cc:	0019      	movs	r1, r3
   2d6ce:	0010      	movs	r0, r2
   2d6d0:	4b7a      	ldr	r3, [pc, #488]	; (2d8bc <dir_register+0x354>)
   2d6d2:	4798      	blx	r3
   2d6d4:	0003      	movs	r3, r0
   2d6d6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d6d8:	232f      	movs	r3, #47	; 0x2f
   2d6da:	18fb      	adds	r3, r7, r3
   2d6dc:	781b      	ldrb	r3, [r3, #0]
   2d6de:	2b00      	cmp	r3, #0
   2d6e0:	d13c      	bne.n	2d75c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d6e2:	687b      	ldr	r3, [r7, #4]
   2d6e4:	695a      	ldr	r2, [r3, #20]
   2d6e6:	231f      	movs	r3, #31
   2d6e8:	18fb      	adds	r3, r7, r3
   2d6ea:	7812      	ldrb	r2, [r2, #0]
   2d6ec:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d6ee:	231f      	movs	r3, #31
   2d6f0:	18fb      	adds	r3, r7, r3
   2d6f2:	781b      	ldrb	r3, [r3, #0]
   2d6f4:	2be5      	cmp	r3, #229	; 0xe5
   2d6f6:	d004      	beq.n	2d702 <dir_register+0x19a>
   2d6f8:	231f      	movs	r3, #31
   2d6fa:	18fb      	adds	r3, r7, r3
   2d6fc:	781b      	ldrb	r3, [r3, #0]
   2d6fe:	2b00      	cmp	r3, #0
   2d700:	d119      	bne.n	2d736 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d702:	232c      	movs	r3, #44	; 0x2c
   2d704:	18fb      	adds	r3, r7, r3
   2d706:	881b      	ldrh	r3, [r3, #0]
   2d708:	2b00      	cmp	r3, #0
   2d70a:	d104      	bne.n	2d716 <dir_register+0x1ae>
   2d70c:	2328      	movs	r3, #40	; 0x28
   2d70e:	18fb      	adds	r3, r7, r3
   2d710:	687a      	ldr	r2, [r7, #4]
   2d712:	88d2      	ldrh	r2, [r2, #6]
   2d714:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d716:	232c      	movs	r3, #44	; 0x2c
   2d718:	18fb      	adds	r3, r7, r3
   2d71a:	222c      	movs	r2, #44	; 0x2c
   2d71c:	18ba      	adds	r2, r7, r2
   2d71e:	8812      	ldrh	r2, [r2, #0]
   2d720:	3201      	adds	r2, #1
   2d722:	801a      	strh	r2, [r3, #0]
   2d724:	232c      	movs	r3, #44	; 0x2c
   2d726:	18fa      	adds	r2, r7, r3
   2d728:	232a      	movs	r3, #42	; 0x2a
   2d72a:	18fb      	adds	r3, r7, r3
   2d72c:	8812      	ldrh	r2, [r2, #0]
   2d72e:	881b      	ldrh	r3, [r3, #0]
   2d730:	429a      	cmp	r2, r3
   2d732:	d104      	bne.n	2d73e <dir_register+0x1d6>
   2d734:	e013      	b.n	2d75e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d736:	232c      	movs	r3, #44	; 0x2c
   2d738:	18fb      	adds	r3, r7, r3
   2d73a:	2200      	movs	r2, #0
   2d73c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d73e:	232f      	movs	r3, #47	; 0x2f
   2d740:	18fc      	adds	r4, r7, r3
   2d742:	687b      	ldr	r3, [r7, #4]
   2d744:	2101      	movs	r1, #1
   2d746:	0018      	movs	r0, r3
   2d748:	4b5d      	ldr	r3, [pc, #372]	; (2d8c0 <dir_register+0x358>)
   2d74a:	4798      	blx	r3
   2d74c:	0003      	movs	r3, r0
   2d74e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d750:	232f      	movs	r3, #47	; 0x2f
   2d752:	18fb      	adds	r3, r7, r3
   2d754:	781b      	ldrb	r3, [r3, #0]
   2d756:	2b00      	cmp	r3, #0
   2d758:	d0b2      	beq.n	2d6c0 <dir_register+0x158>
   2d75a:	e000      	b.n	2d75e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d75c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d75e:	232f      	movs	r3, #47	; 0x2f
   2d760:	18fb      	adds	r3, r7, r3
   2d762:	781b      	ldrb	r3, [r3, #0]
   2d764:	2b00      	cmp	r3, #0
   2d766:	d163      	bne.n	2d830 <dir_register+0x2c8>
   2d768:	232a      	movs	r3, #42	; 0x2a
   2d76a:	18fb      	adds	r3, r7, r3
   2d76c:	881b      	ldrh	r3, [r3, #0]
   2d76e:	2b01      	cmp	r3, #1
   2d770:	d95e      	bls.n	2d830 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d772:	232f      	movs	r3, #47	; 0x2f
   2d774:	18fc      	adds	r4, r7, r3
   2d776:	2328      	movs	r3, #40	; 0x28
   2d778:	18fb      	adds	r3, r7, r3
   2d77a:	881a      	ldrh	r2, [r3, #0]
   2d77c:	687b      	ldr	r3, [r7, #4]
   2d77e:	0011      	movs	r1, r2
   2d780:	0018      	movs	r0, r3
   2d782:	4b4d      	ldr	r3, [pc, #308]	; (2d8b8 <dir_register+0x350>)
   2d784:	4798      	blx	r3
   2d786:	0003      	movs	r3, r0
   2d788:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d78a:	232f      	movs	r3, #47	; 0x2f
   2d78c:	18fb      	adds	r3, r7, r3
   2d78e:	781b      	ldrb	r3, [r3, #0]
   2d790:	2b00      	cmp	r3, #0
   2d792:	d14d      	bne.n	2d830 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d794:	687b      	ldr	r3, [r7, #4]
   2d796:	699b      	ldr	r3, [r3, #24]
   2d798:	221e      	movs	r2, #30
   2d79a:	18bc      	adds	r4, r7, r2
   2d79c:	0018      	movs	r0, r3
   2d79e:	4b49      	ldr	r3, [pc, #292]	; (2d8c4 <dir_register+0x35c>)
   2d7a0:	4798      	blx	r3
   2d7a2:	0003      	movs	r3, r0
   2d7a4:	7023      	strb	r3, [r4, #0]
			ne--;
   2d7a6:	232a      	movs	r3, #42	; 0x2a
   2d7a8:	18fb      	adds	r3, r7, r3
   2d7aa:	881a      	ldrh	r2, [r3, #0]
   2d7ac:	232a      	movs	r3, #42	; 0x2a
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	3a01      	subs	r2, #1
   2d7b2:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d7b4:	687b      	ldr	r3, [r7, #4]
   2d7b6:	681a      	ldr	r2, [r3, #0]
   2d7b8:	687b      	ldr	r3, [r7, #4]
   2d7ba:	691b      	ldr	r3, [r3, #16]
   2d7bc:	212f      	movs	r1, #47	; 0x2f
   2d7be:	187c      	adds	r4, r7, r1
   2d7c0:	0019      	movs	r1, r3
   2d7c2:	0010      	movs	r0, r2
   2d7c4:	4b3d      	ldr	r3, [pc, #244]	; (2d8bc <dir_register+0x354>)
   2d7c6:	4798      	blx	r3
   2d7c8:	0003      	movs	r3, r0
   2d7ca:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d7cc:	232f      	movs	r3, #47	; 0x2f
   2d7ce:	18fb      	adds	r3, r7, r3
   2d7d0:	781b      	ldrb	r3, [r3, #0]
   2d7d2:	2b00      	cmp	r3, #0
   2d7d4:	d12b      	bne.n	2d82e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d7d6:	687b      	ldr	r3, [r7, #4]
   2d7d8:	69d8      	ldr	r0, [r3, #28]
   2d7da:	687b      	ldr	r3, [r7, #4]
   2d7dc:	6959      	ldr	r1, [r3, #20]
   2d7de:	232a      	movs	r3, #42	; 0x2a
   2d7e0:	18fb      	adds	r3, r7, r3
   2d7e2:	881b      	ldrh	r3, [r3, #0]
   2d7e4:	b2da      	uxtb	r2, r3
   2d7e6:	231e      	movs	r3, #30
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	781b      	ldrb	r3, [r3, #0]
   2d7ec:	4c36      	ldr	r4, [pc, #216]	; (2d8c8 <dir_register+0x360>)
   2d7ee:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d7f0:	687b      	ldr	r3, [r7, #4]
   2d7f2:	681b      	ldr	r3, [r3, #0]
   2d7f4:	2201      	movs	r2, #1
   2d7f6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d7f8:	232f      	movs	r3, #47	; 0x2f
   2d7fa:	18fc      	adds	r4, r7, r3
   2d7fc:	687b      	ldr	r3, [r7, #4]
   2d7fe:	2100      	movs	r1, #0
   2d800:	0018      	movs	r0, r3
   2d802:	4b2f      	ldr	r3, [pc, #188]	; (2d8c0 <dir_register+0x358>)
   2d804:	4798      	blx	r3
   2d806:	0003      	movs	r3, r0
   2d808:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d80a:	232f      	movs	r3, #47	; 0x2f
   2d80c:	18fb      	adds	r3, r7, r3
   2d80e:	781b      	ldrb	r3, [r3, #0]
   2d810:	2b00      	cmp	r3, #0
   2d812:	d10d      	bne.n	2d830 <dir_register+0x2c8>
   2d814:	232a      	movs	r3, #42	; 0x2a
   2d816:	18fb      	adds	r3, r7, r3
   2d818:	222a      	movs	r2, #42	; 0x2a
   2d81a:	18ba      	adds	r2, r7, r2
   2d81c:	8812      	ldrh	r2, [r2, #0]
   2d81e:	3a01      	subs	r2, #1
   2d820:	801a      	strh	r2, [r3, #0]
   2d822:	232a      	movs	r3, #42	; 0x2a
   2d824:	18fb      	adds	r3, r7, r3
   2d826:	881b      	ldrh	r3, [r3, #0]
   2d828:	2b00      	cmp	r3, #0
   2d82a:	d1c3      	bne.n	2d7b4 <dir_register+0x24c>
   2d82c:	e000      	b.n	2d830 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d82e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d830:	232f      	movs	r3, #47	; 0x2f
   2d832:	18fb      	adds	r3, r7, r3
   2d834:	781b      	ldrb	r3, [r3, #0]
   2d836:	2b00      	cmp	r3, #0
   2d838:	d12f      	bne.n	2d89a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d83a:	687b      	ldr	r3, [r7, #4]
   2d83c:	681a      	ldr	r2, [r3, #0]
   2d83e:	687b      	ldr	r3, [r7, #4]
   2d840:	691b      	ldr	r3, [r3, #16]
   2d842:	212f      	movs	r1, #47	; 0x2f
   2d844:	187c      	adds	r4, r7, r1
   2d846:	0019      	movs	r1, r3
   2d848:	0010      	movs	r0, r2
   2d84a:	4b1c      	ldr	r3, [pc, #112]	; (2d8bc <dir_register+0x354>)
   2d84c:	4798      	blx	r3
   2d84e:	0003      	movs	r3, r0
   2d850:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d852:	232f      	movs	r3, #47	; 0x2f
   2d854:	18fb      	adds	r3, r7, r3
   2d856:	781b      	ldrb	r3, [r3, #0]
   2d858:	2b00      	cmp	r3, #0
   2d85a:	d11e      	bne.n	2d89a <dir_register+0x332>
			dir = dj->dir;
   2d85c:	687b      	ldr	r3, [r7, #4]
   2d85e:	695b      	ldr	r3, [r3, #20]
   2d860:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d862:	69bb      	ldr	r3, [r7, #24]
   2d864:	2220      	movs	r2, #32
   2d866:	2100      	movs	r1, #0
   2d868:	0018      	movs	r0, r3
   2d86a:	4b18      	ldr	r3, [pc, #96]	; (2d8cc <dir_register+0x364>)
   2d86c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d86e:	687b      	ldr	r3, [r7, #4]
   2d870:	6999      	ldr	r1, [r3, #24]
   2d872:	69bb      	ldr	r3, [r7, #24]
   2d874:	220b      	movs	r2, #11
   2d876:	0018      	movs	r0, r3
   2d878:	4b0b      	ldr	r3, [pc, #44]	; (2d8a8 <dir_register+0x340>)
   2d87a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d87c:	69bb      	ldr	r3, [r7, #24]
   2d87e:	330c      	adds	r3, #12
   2d880:	001a      	movs	r2, r3
   2d882:	687b      	ldr	r3, [r7, #4]
   2d884:	699b      	ldr	r3, [r3, #24]
   2d886:	330b      	adds	r3, #11
   2d888:	781b      	ldrb	r3, [r3, #0]
   2d88a:	2118      	movs	r1, #24
   2d88c:	400b      	ands	r3, r1
   2d88e:	b2db      	uxtb	r3, r3
   2d890:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d892:	687b      	ldr	r3, [r7, #4]
   2d894:	681b      	ldr	r3, [r3, #0]
   2d896:	2201      	movs	r2, #1
   2d898:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d89a:	232f      	movs	r3, #47	; 0x2f
   2d89c:	18fb      	adds	r3, r7, r3
   2d89e:	781b      	ldrb	r3, [r3, #0]
}
   2d8a0:	0018      	movs	r0, r3
   2d8a2:	46bd      	mov	sp, r7
   2d8a4:	b00d      	add	sp, #52	; 0x34
   2d8a6:	bd90      	pop	{r4, r7, pc}
   2d8a8:	0002c3c1 	.word	0x0002c3c1
   2d8ac:	0002d21d 	.word	0x0002d21d
   2d8b0:	0002d36d 	.word	0x0002d36d
   2d8b4:	000337b9 	.word	0x000337b9
   2d8b8:	0002cce9 	.word	0x0002cce9
   2d8bc:	0002c4a5 	.word	0x0002c4a5
   2d8c0:	0002ce19 	.word	0x0002ce19
   2d8c4:	0002d31d 	.word	0x0002d31d
   2d8c8:	0002d10d 	.word	0x0002d10d
   2d8cc:	0002c3f9 	.word	0x0002c3f9

0002d8d0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d8d0:	b590      	push	{r4, r7, lr}
   2d8d2:	b08b      	sub	sp, #44	; 0x2c
   2d8d4:	af00      	add	r7, sp, #0
   2d8d6:	6078      	str	r0, [r7, #4]
   2d8d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d8da:	683b      	ldr	r3, [r7, #0]
   2d8dc:	681b      	ldr	r3, [r3, #0]
   2d8de:	613b      	str	r3, [r7, #16]
   2d8e0:	e002      	b.n	2d8e8 <create_name+0x18>
   2d8e2:	693b      	ldr	r3, [r7, #16]
   2d8e4:	3301      	adds	r3, #1
   2d8e6:	613b      	str	r3, [r7, #16]
   2d8e8:	693b      	ldr	r3, [r7, #16]
   2d8ea:	781b      	ldrb	r3, [r3, #0]
   2d8ec:	2b2f      	cmp	r3, #47	; 0x2f
   2d8ee:	d0f8      	beq.n	2d8e2 <create_name+0x12>
   2d8f0:	693b      	ldr	r3, [r7, #16]
   2d8f2:	781b      	ldrb	r3, [r3, #0]
   2d8f4:	2b5c      	cmp	r3, #92	; 0x5c
   2d8f6:	d0f4      	beq.n	2d8e2 <create_name+0x12>
	lfn = dj->lfn;
   2d8f8:	687b      	ldr	r3, [r7, #4]
   2d8fa:	69db      	ldr	r3, [r3, #28]
   2d8fc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d8fe:	2300      	movs	r3, #0
   2d900:	617b      	str	r3, [r7, #20]
   2d902:	697b      	ldr	r3, [r7, #20]
   2d904:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d906:	69bb      	ldr	r3, [r7, #24]
   2d908:	1c5a      	adds	r2, r3, #1
   2d90a:	61ba      	str	r2, [r7, #24]
   2d90c:	693a      	ldr	r2, [r7, #16]
   2d90e:	18d3      	adds	r3, r2, r3
   2d910:	781a      	ldrb	r2, [r3, #0]
   2d912:	2324      	movs	r3, #36	; 0x24
   2d914:	18fb      	adds	r3, r7, r3
   2d916:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d918:	2324      	movs	r3, #36	; 0x24
   2d91a:	18fb      	adds	r3, r7, r3
   2d91c:	881b      	ldrh	r3, [r3, #0]
   2d91e:	2b1f      	cmp	r3, #31
   2d920:	d944      	bls.n	2d9ac <create_name+0xdc>
   2d922:	2324      	movs	r3, #36	; 0x24
   2d924:	18fb      	adds	r3, r7, r3
   2d926:	881b      	ldrh	r3, [r3, #0]
   2d928:	2b2f      	cmp	r3, #47	; 0x2f
   2d92a:	d03f      	beq.n	2d9ac <create_name+0xdc>
   2d92c:	2324      	movs	r3, #36	; 0x24
   2d92e:	18fb      	adds	r3, r7, r3
   2d930:	881b      	ldrh	r3, [r3, #0]
   2d932:	2b5c      	cmp	r3, #92	; 0x5c
   2d934:	d03a      	beq.n	2d9ac <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d936:	697b      	ldr	r3, [r7, #20]
   2d938:	2bfe      	cmp	r3, #254	; 0xfe
   2d93a:	d901      	bls.n	2d940 <create_name+0x70>
			return FR_INVALID_NAME;
   2d93c:	2306      	movs	r3, #6
   2d93e:	e1e7      	b.n	2dd10 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d940:	2324      	movs	r3, #36	; 0x24
   2d942:	18fb      	adds	r3, r7, r3
   2d944:	2224      	movs	r2, #36	; 0x24
   2d946:	18ba      	adds	r2, r7, r2
   2d948:	8812      	ldrh	r2, [r2, #0]
   2d94a:	21ff      	movs	r1, #255	; 0xff
   2d94c:	400a      	ands	r2, r1
   2d94e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d950:	2324      	movs	r3, #36	; 0x24
   2d952:	18fc      	adds	r4, r7, r3
   2d954:	2324      	movs	r3, #36	; 0x24
   2d956:	18fb      	adds	r3, r7, r3
   2d958:	881b      	ldrh	r3, [r3, #0]
   2d95a:	2101      	movs	r1, #1
   2d95c:	0018      	movs	r0, r3
   2d95e:	4bba      	ldr	r3, [pc, #744]	; (2dc48 <create_name+0x378>)
   2d960:	4798      	blx	r3
   2d962:	0003      	movs	r3, r0
   2d964:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d966:	2324      	movs	r3, #36	; 0x24
   2d968:	18fb      	adds	r3, r7, r3
   2d96a:	881b      	ldrh	r3, [r3, #0]
   2d96c:	2b00      	cmp	r3, #0
   2d96e:	d101      	bne.n	2d974 <create_name+0xa4>
   2d970:	2306      	movs	r3, #6
   2d972:	e1cd      	b.n	2dd10 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d974:	2324      	movs	r3, #36	; 0x24
   2d976:	18fb      	adds	r3, r7, r3
   2d978:	881b      	ldrh	r3, [r3, #0]
   2d97a:	2b7f      	cmp	r3, #127	; 0x7f
   2d97c:	d80b      	bhi.n	2d996 <create_name+0xc6>
   2d97e:	2324      	movs	r3, #36	; 0x24
   2d980:	18fb      	adds	r3, r7, r3
   2d982:	881a      	ldrh	r2, [r3, #0]
   2d984:	4bb1      	ldr	r3, [pc, #708]	; (2dc4c <create_name+0x37c>)
   2d986:	0011      	movs	r1, r2
   2d988:	0018      	movs	r0, r3
   2d98a:	4bb1      	ldr	r3, [pc, #708]	; (2dc50 <create_name+0x380>)
   2d98c:	4798      	blx	r3
   2d98e:	1e03      	subs	r3, r0, #0
   2d990:	d001      	beq.n	2d996 <create_name+0xc6>
			return FR_INVALID_NAME;
   2d992:	2306      	movs	r3, #6
   2d994:	e1bc      	b.n	2dd10 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d996:	697b      	ldr	r3, [r7, #20]
   2d998:	1c5a      	adds	r2, r3, #1
   2d99a:	617a      	str	r2, [r7, #20]
   2d99c:	005b      	lsls	r3, r3, #1
   2d99e:	68fa      	ldr	r2, [r7, #12]
   2d9a0:	18d3      	adds	r3, r2, r3
   2d9a2:	2224      	movs	r2, #36	; 0x24
   2d9a4:	18ba      	adds	r2, r7, r2
   2d9a6:	8812      	ldrh	r2, [r2, #0]
   2d9a8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d9aa:	e7ac      	b.n	2d906 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d9ac:	693a      	ldr	r2, [r7, #16]
   2d9ae:	69bb      	ldr	r3, [r7, #24]
   2d9b0:	18d2      	adds	r2, r2, r3
   2d9b2:	683b      	ldr	r3, [r7, #0]
   2d9b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d9b6:	2324      	movs	r3, #36	; 0x24
   2d9b8:	18fb      	adds	r3, r7, r3
   2d9ba:	881b      	ldrh	r3, [r3, #0]
   2d9bc:	2b1f      	cmp	r3, #31
   2d9be:	d801      	bhi.n	2d9c4 <create_name+0xf4>
   2d9c0:	2204      	movs	r2, #4
   2d9c2:	e000      	b.n	2d9c6 <create_name+0xf6>
   2d9c4:	2200      	movs	r2, #0
   2d9c6:	2326      	movs	r3, #38	; 0x26
   2d9c8:	18fb      	adds	r3, r7, r3
   2d9ca:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d9cc:	e017      	b.n	2d9fe <create_name+0x12e>
		w = lfn[di-1];
   2d9ce:	697b      	ldr	r3, [r7, #20]
   2d9d0:	4aa0      	ldr	r2, [pc, #640]	; (2dc54 <create_name+0x384>)
   2d9d2:	4694      	mov	ip, r2
   2d9d4:	4463      	add	r3, ip
   2d9d6:	005b      	lsls	r3, r3, #1
   2d9d8:	68fa      	ldr	r2, [r7, #12]
   2d9da:	18d2      	adds	r2, r2, r3
   2d9dc:	2324      	movs	r3, #36	; 0x24
   2d9de:	18fb      	adds	r3, r7, r3
   2d9e0:	8812      	ldrh	r2, [r2, #0]
   2d9e2:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d9e4:	2324      	movs	r3, #36	; 0x24
   2d9e6:	18fb      	adds	r3, r7, r3
   2d9e8:	881b      	ldrh	r3, [r3, #0]
   2d9ea:	2b20      	cmp	r3, #32
   2d9ec:	d004      	beq.n	2d9f8 <create_name+0x128>
   2d9ee:	2324      	movs	r3, #36	; 0x24
   2d9f0:	18fb      	adds	r3, r7, r3
   2d9f2:	881b      	ldrh	r3, [r3, #0]
   2d9f4:	2b2e      	cmp	r3, #46	; 0x2e
   2d9f6:	d106      	bne.n	2da06 <create_name+0x136>
		di--;
   2d9f8:	697b      	ldr	r3, [r7, #20]
   2d9fa:	3b01      	subs	r3, #1
   2d9fc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d9fe:	697b      	ldr	r3, [r7, #20]
   2da00:	2b00      	cmp	r3, #0
   2da02:	d1e4      	bne.n	2d9ce <create_name+0xfe>
   2da04:	e000      	b.n	2da08 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2da06:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2da08:	697b      	ldr	r3, [r7, #20]
   2da0a:	2b00      	cmp	r3, #0
   2da0c:	d101      	bne.n	2da12 <create_name+0x142>
   2da0e:	2306      	movs	r3, #6
   2da10:	e17e      	b.n	2dd10 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2da12:	697b      	ldr	r3, [r7, #20]
   2da14:	005b      	lsls	r3, r3, #1
   2da16:	68fa      	ldr	r2, [r7, #12]
   2da18:	18d3      	adds	r3, r2, r3
   2da1a:	2200      	movs	r2, #0
   2da1c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2da1e:	687b      	ldr	r3, [r7, #4]
   2da20:	699b      	ldr	r3, [r3, #24]
   2da22:	220b      	movs	r2, #11
   2da24:	2120      	movs	r1, #32
   2da26:	0018      	movs	r0, r3
   2da28:	4b8b      	ldr	r3, [pc, #556]	; (2dc58 <create_name+0x388>)
   2da2a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2da2c:	2300      	movs	r3, #0
   2da2e:	61bb      	str	r3, [r7, #24]
   2da30:	e002      	b.n	2da38 <create_name+0x168>
   2da32:	69bb      	ldr	r3, [r7, #24]
   2da34:	3301      	adds	r3, #1
   2da36:	61bb      	str	r3, [r7, #24]
   2da38:	69bb      	ldr	r3, [r7, #24]
   2da3a:	005b      	lsls	r3, r3, #1
   2da3c:	68fa      	ldr	r2, [r7, #12]
   2da3e:	18d3      	adds	r3, r2, r3
   2da40:	881b      	ldrh	r3, [r3, #0]
   2da42:	2b20      	cmp	r3, #32
   2da44:	d0f5      	beq.n	2da32 <create_name+0x162>
   2da46:	69bb      	ldr	r3, [r7, #24]
   2da48:	005b      	lsls	r3, r3, #1
   2da4a:	68fa      	ldr	r2, [r7, #12]
   2da4c:	18d3      	adds	r3, r2, r3
   2da4e:	881b      	ldrh	r3, [r3, #0]
   2da50:	2b2e      	cmp	r3, #46	; 0x2e
   2da52:	d0ee      	beq.n	2da32 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2da54:	69bb      	ldr	r3, [r7, #24]
   2da56:	2b00      	cmp	r3, #0
   2da58:	d00b      	beq.n	2da72 <create_name+0x1a2>
   2da5a:	2326      	movs	r3, #38	; 0x26
   2da5c:	18fb      	adds	r3, r7, r3
   2da5e:	2226      	movs	r2, #38	; 0x26
   2da60:	18ba      	adds	r2, r7, r2
   2da62:	7812      	ldrb	r2, [r2, #0]
   2da64:	2103      	movs	r1, #3
   2da66:	430a      	orrs	r2, r1
   2da68:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2da6a:	e002      	b.n	2da72 <create_name+0x1a2>
   2da6c:	697b      	ldr	r3, [r7, #20]
   2da6e:	3b01      	subs	r3, #1
   2da70:	617b      	str	r3, [r7, #20]
   2da72:	697b      	ldr	r3, [r7, #20]
   2da74:	2b00      	cmp	r3, #0
   2da76:	d009      	beq.n	2da8c <create_name+0x1bc>
   2da78:	697b      	ldr	r3, [r7, #20]
   2da7a:	4a76      	ldr	r2, [pc, #472]	; (2dc54 <create_name+0x384>)
   2da7c:	4694      	mov	ip, r2
   2da7e:	4463      	add	r3, ip
   2da80:	005b      	lsls	r3, r3, #1
   2da82:	68fa      	ldr	r2, [r7, #12]
   2da84:	18d3      	adds	r3, r2, r3
   2da86:	881b      	ldrh	r3, [r3, #0]
   2da88:	2b2e      	cmp	r3, #46	; 0x2e
   2da8a:	d1ef      	bne.n	2da6c <create_name+0x19c>

	b = i = 0; ni = 8;
   2da8c:	2300      	movs	r3, #0
   2da8e:	623b      	str	r3, [r7, #32]
   2da90:	2327      	movs	r3, #39	; 0x27
   2da92:	18fb      	adds	r3, r7, r3
   2da94:	2200      	movs	r2, #0
   2da96:	701a      	strb	r2, [r3, #0]
   2da98:	2308      	movs	r3, #8
   2da9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2da9c:	69bb      	ldr	r3, [r7, #24]
   2da9e:	1c5a      	adds	r2, r3, #1
   2daa0:	61ba      	str	r2, [r7, #24]
   2daa2:	005b      	lsls	r3, r3, #1
   2daa4:	68fa      	ldr	r2, [r7, #12]
   2daa6:	18d2      	adds	r2, r2, r3
   2daa8:	2324      	movs	r3, #36	; 0x24
   2daaa:	18fb      	adds	r3, r7, r3
   2daac:	8812      	ldrh	r2, [r2, #0]
   2daae:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2dab0:	2324      	movs	r3, #36	; 0x24
   2dab2:	18fb      	adds	r3, r7, r3
   2dab4:	881b      	ldrh	r3, [r3, #0]
   2dab6:	2b00      	cmp	r3, #0
   2dab8:	d100      	bne.n	2dabc <create_name+0x1ec>
   2daba:	e0c3      	b.n	2dc44 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2dabc:	2324      	movs	r3, #36	; 0x24
   2dabe:	18fb      	adds	r3, r7, r3
   2dac0:	881b      	ldrh	r3, [r3, #0]
   2dac2:	2b20      	cmp	r3, #32
   2dac4:	d008      	beq.n	2dad8 <create_name+0x208>
   2dac6:	2324      	movs	r3, #36	; 0x24
   2dac8:	18fb      	adds	r3, r7, r3
   2daca:	881b      	ldrh	r3, [r3, #0]
   2dacc:	2b2e      	cmp	r3, #46	; 0x2e
   2dace:	d10c      	bne.n	2daea <create_name+0x21a>
   2dad0:	69ba      	ldr	r2, [r7, #24]
   2dad2:	697b      	ldr	r3, [r7, #20]
   2dad4:	429a      	cmp	r2, r3
   2dad6:	d008      	beq.n	2daea <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2dad8:	2326      	movs	r3, #38	; 0x26
   2dada:	18fb      	adds	r3, r7, r3
   2dadc:	2226      	movs	r2, #38	; 0x26
   2dade:	18ba      	adds	r2, r7, r2
   2dae0:	7812      	ldrb	r2, [r2, #0]
   2dae2:	2103      	movs	r1, #3
   2dae4:	430a      	orrs	r2, r1
   2dae6:	701a      	strb	r2, [r3, #0]
   2dae8:	e0ab      	b.n	2dc42 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2daea:	6a3a      	ldr	r2, [r7, #32]
   2daec:	69fb      	ldr	r3, [r7, #28]
   2daee:	429a      	cmp	r2, r3
   2daf0:	d203      	bcs.n	2dafa <create_name+0x22a>
   2daf2:	69ba      	ldr	r2, [r7, #24]
   2daf4:	697b      	ldr	r3, [r7, #20]
   2daf6:	429a      	cmp	r2, r3
   2daf8:	d12a      	bne.n	2db50 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2dafa:	69fb      	ldr	r3, [r7, #28]
   2dafc:	2b0b      	cmp	r3, #11
   2dafe:	d108      	bne.n	2db12 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2db00:	2326      	movs	r3, #38	; 0x26
   2db02:	18fb      	adds	r3, r7, r3
   2db04:	2226      	movs	r2, #38	; 0x26
   2db06:	18ba      	adds	r2, r7, r2
   2db08:	7812      	ldrb	r2, [r2, #0]
   2db0a:	2103      	movs	r1, #3
   2db0c:	430a      	orrs	r2, r1
   2db0e:	701a      	strb	r2, [r3, #0]
   2db10:	e0a9      	b.n	2dc66 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2db12:	69ba      	ldr	r2, [r7, #24]
   2db14:	697b      	ldr	r3, [r7, #20]
   2db16:	429a      	cmp	r2, r3
   2db18:	d007      	beq.n	2db2a <create_name+0x25a>
   2db1a:	2326      	movs	r3, #38	; 0x26
   2db1c:	18fb      	adds	r3, r7, r3
   2db1e:	2226      	movs	r2, #38	; 0x26
   2db20:	18ba      	adds	r2, r7, r2
   2db22:	7812      	ldrb	r2, [r2, #0]
   2db24:	2103      	movs	r1, #3
   2db26:	430a      	orrs	r2, r1
   2db28:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2db2a:	69ba      	ldr	r2, [r7, #24]
   2db2c:	697b      	ldr	r3, [r7, #20]
   2db2e:	429a      	cmp	r2, r3
   2db30:	d900      	bls.n	2db34 <create_name+0x264>
   2db32:	e097      	b.n	2dc64 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2db34:	697b      	ldr	r3, [r7, #20]
   2db36:	61bb      	str	r3, [r7, #24]
   2db38:	2308      	movs	r3, #8
   2db3a:	623b      	str	r3, [r7, #32]
   2db3c:	230b      	movs	r3, #11
   2db3e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2db40:	2327      	movs	r3, #39	; 0x27
   2db42:	18fb      	adds	r3, r7, r3
   2db44:	2227      	movs	r2, #39	; 0x27
   2db46:	18ba      	adds	r2, r7, r2
   2db48:	7812      	ldrb	r2, [r2, #0]
   2db4a:	0092      	lsls	r2, r2, #2
   2db4c:	701a      	strb	r2, [r3, #0]
   2db4e:	e078      	b.n	2dc42 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2db50:	2324      	movs	r3, #36	; 0x24
   2db52:	18fb      	adds	r3, r7, r3
   2db54:	881b      	ldrh	r3, [r3, #0]
   2db56:	2b7f      	cmp	r3, #127	; 0x7f
   2db58:	d920      	bls.n	2db9c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2db5a:	2324      	movs	r3, #36	; 0x24
   2db5c:	18fc      	adds	r4, r7, r3
   2db5e:	2324      	movs	r3, #36	; 0x24
   2db60:	18fb      	adds	r3, r7, r3
   2db62:	881b      	ldrh	r3, [r3, #0]
   2db64:	2100      	movs	r1, #0
   2db66:	0018      	movs	r0, r3
   2db68:	4b37      	ldr	r3, [pc, #220]	; (2dc48 <create_name+0x378>)
   2db6a:	4798      	blx	r3
   2db6c:	0003      	movs	r3, r0
   2db6e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2db70:	2324      	movs	r3, #36	; 0x24
   2db72:	18fb      	adds	r3, r7, r3
   2db74:	881b      	ldrh	r3, [r3, #0]
   2db76:	2b00      	cmp	r3, #0
   2db78:	d008      	beq.n	2db8c <create_name+0x2bc>
   2db7a:	2324      	movs	r3, #36	; 0x24
   2db7c:	18fb      	adds	r3, r7, r3
   2db7e:	881b      	ldrh	r3, [r3, #0]
   2db80:	3b80      	subs	r3, #128	; 0x80
   2db82:	4a36      	ldr	r2, [pc, #216]	; (2dc5c <create_name+0x38c>)
   2db84:	5cd2      	ldrb	r2, [r2, r3]
   2db86:	2324      	movs	r3, #36	; 0x24
   2db88:	18fb      	adds	r3, r7, r3
   2db8a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2db8c:	2326      	movs	r3, #38	; 0x26
   2db8e:	18fb      	adds	r3, r7, r3
   2db90:	2226      	movs	r2, #38	; 0x26
   2db92:	18ba      	adds	r2, r7, r2
   2db94:	7812      	ldrb	r2, [r2, #0]
   2db96:	2102      	movs	r1, #2
   2db98:	430a      	orrs	r2, r1
   2db9a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2db9c:	2324      	movs	r3, #36	; 0x24
   2db9e:	18fb      	adds	r3, r7, r3
   2dba0:	881b      	ldrh	r3, [r3, #0]
   2dba2:	2b00      	cmp	r3, #0
   2dba4:	d009      	beq.n	2dbba <create_name+0x2ea>
   2dba6:	2324      	movs	r3, #36	; 0x24
   2dba8:	18fb      	adds	r3, r7, r3
   2dbaa:	881a      	ldrh	r2, [r3, #0]
   2dbac:	4b2c      	ldr	r3, [pc, #176]	; (2dc60 <create_name+0x390>)
   2dbae:	0011      	movs	r1, r2
   2dbb0:	0018      	movs	r0, r3
   2dbb2:	4b27      	ldr	r3, [pc, #156]	; (2dc50 <create_name+0x380>)
   2dbb4:	4798      	blx	r3
   2dbb6:	1e03      	subs	r3, r0, #0
   2dbb8:	d00c      	beq.n	2dbd4 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2dbba:	2324      	movs	r3, #36	; 0x24
   2dbbc:	18fb      	adds	r3, r7, r3
   2dbbe:	225f      	movs	r2, #95	; 0x5f
   2dbc0:	801a      	strh	r2, [r3, #0]
   2dbc2:	2326      	movs	r3, #38	; 0x26
   2dbc4:	18fb      	adds	r3, r7, r3
   2dbc6:	2226      	movs	r2, #38	; 0x26
   2dbc8:	18ba      	adds	r2, r7, r2
   2dbca:	7812      	ldrb	r2, [r2, #0]
   2dbcc:	2103      	movs	r1, #3
   2dbce:	430a      	orrs	r2, r1
   2dbd0:	701a      	strb	r2, [r3, #0]
   2dbd2:	e02b      	b.n	2dc2c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2dbd4:	2324      	movs	r3, #36	; 0x24
   2dbd6:	18fb      	adds	r3, r7, r3
   2dbd8:	881b      	ldrh	r3, [r3, #0]
   2dbda:	2b40      	cmp	r3, #64	; 0x40
   2dbdc:	d90d      	bls.n	2dbfa <create_name+0x32a>
   2dbde:	2324      	movs	r3, #36	; 0x24
   2dbe0:	18fb      	adds	r3, r7, r3
   2dbe2:	881b      	ldrh	r3, [r3, #0]
   2dbe4:	2b5a      	cmp	r3, #90	; 0x5a
   2dbe6:	d808      	bhi.n	2dbfa <create_name+0x32a>
					b |= 2;
   2dbe8:	2327      	movs	r3, #39	; 0x27
   2dbea:	18fb      	adds	r3, r7, r3
   2dbec:	2227      	movs	r2, #39	; 0x27
   2dbee:	18ba      	adds	r2, r7, r2
   2dbf0:	7812      	ldrb	r2, [r2, #0]
   2dbf2:	2102      	movs	r1, #2
   2dbf4:	430a      	orrs	r2, r1
   2dbf6:	701a      	strb	r2, [r3, #0]
   2dbf8:	e018      	b.n	2dc2c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2dbfa:	2324      	movs	r3, #36	; 0x24
   2dbfc:	18fb      	adds	r3, r7, r3
   2dbfe:	881b      	ldrh	r3, [r3, #0]
   2dc00:	2b60      	cmp	r3, #96	; 0x60
   2dc02:	d913      	bls.n	2dc2c <create_name+0x35c>
   2dc04:	2324      	movs	r3, #36	; 0x24
   2dc06:	18fb      	adds	r3, r7, r3
   2dc08:	881b      	ldrh	r3, [r3, #0]
   2dc0a:	2b7a      	cmp	r3, #122	; 0x7a
   2dc0c:	d80e      	bhi.n	2dc2c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2dc0e:	2327      	movs	r3, #39	; 0x27
   2dc10:	18fb      	adds	r3, r7, r3
   2dc12:	2227      	movs	r2, #39	; 0x27
   2dc14:	18ba      	adds	r2, r7, r2
   2dc16:	7812      	ldrb	r2, [r2, #0]
   2dc18:	2101      	movs	r1, #1
   2dc1a:	430a      	orrs	r2, r1
   2dc1c:	701a      	strb	r2, [r3, #0]
   2dc1e:	2324      	movs	r3, #36	; 0x24
   2dc20:	18fb      	adds	r3, r7, r3
   2dc22:	2224      	movs	r2, #36	; 0x24
   2dc24:	18ba      	adds	r2, r7, r2
   2dc26:	8812      	ldrh	r2, [r2, #0]
   2dc28:	3a20      	subs	r2, #32
   2dc2a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dc2c:	687b      	ldr	r3, [r7, #4]
   2dc2e:	699a      	ldr	r2, [r3, #24]
   2dc30:	6a3b      	ldr	r3, [r7, #32]
   2dc32:	1c59      	adds	r1, r3, #1
   2dc34:	6239      	str	r1, [r7, #32]
   2dc36:	18d3      	adds	r3, r2, r3
   2dc38:	2224      	movs	r2, #36	; 0x24
   2dc3a:	18ba      	adds	r2, r7, r2
   2dc3c:	8812      	ldrh	r2, [r2, #0]
   2dc3e:	b2d2      	uxtb	r2, r2
   2dc40:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dc42:	e72b      	b.n	2da9c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dc44:	46c0      	nop			; (mov r8, r8)
   2dc46:	e00e      	b.n	2dc66 <create_name+0x396>
   2dc48:	0002f009 	.word	0x0002f009
   2dc4c:	0003b028 	.word	0x0003b028
   2dc50:	0002c473 	.word	0x0002c473
   2dc54:	7fffffff 	.word	0x7fffffff
   2dc58:	0002c3f9 	.word	0x0002c3f9
   2dc5c:	0003b070 	.word	0x0003b070
   2dc60:	0003b034 	.word	0x0003b034
			if (si > di) break;			/* No extension */
   2dc64:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2dc66:	687b      	ldr	r3, [r7, #4]
   2dc68:	699b      	ldr	r3, [r3, #24]
   2dc6a:	781b      	ldrb	r3, [r3, #0]
   2dc6c:	2be5      	cmp	r3, #229	; 0xe5
   2dc6e:	d103      	bne.n	2dc78 <create_name+0x3a8>
   2dc70:	687b      	ldr	r3, [r7, #4]
   2dc72:	699b      	ldr	r3, [r3, #24]
   2dc74:	2205      	movs	r2, #5
   2dc76:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2dc78:	69fb      	ldr	r3, [r7, #28]
   2dc7a:	2b08      	cmp	r3, #8
   2dc7c:	d106      	bne.n	2dc8c <create_name+0x3bc>
   2dc7e:	2327      	movs	r3, #39	; 0x27
   2dc80:	18fb      	adds	r3, r7, r3
   2dc82:	2227      	movs	r2, #39	; 0x27
   2dc84:	18ba      	adds	r2, r7, r2
   2dc86:	7812      	ldrb	r2, [r2, #0]
   2dc88:	0092      	lsls	r2, r2, #2
   2dc8a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2dc8c:	2327      	movs	r3, #39	; 0x27
   2dc8e:	18fb      	adds	r3, r7, r3
   2dc90:	781b      	ldrb	r3, [r3, #0]
   2dc92:	220c      	movs	r2, #12
   2dc94:	4013      	ands	r3, r2
   2dc96:	2b0c      	cmp	r3, #12
   2dc98:	d006      	beq.n	2dca8 <create_name+0x3d8>
   2dc9a:	2327      	movs	r3, #39	; 0x27
   2dc9c:	18fb      	adds	r3, r7, r3
   2dc9e:	781b      	ldrb	r3, [r3, #0]
   2dca0:	2203      	movs	r2, #3
   2dca2:	4013      	ands	r3, r2
   2dca4:	2b03      	cmp	r3, #3
   2dca6:	d107      	bne.n	2dcb8 <create_name+0x3e8>
		cf |= NS_LFN;
   2dca8:	2326      	movs	r3, #38	; 0x26
   2dcaa:	18fb      	adds	r3, r7, r3
   2dcac:	2226      	movs	r2, #38	; 0x26
   2dcae:	18ba      	adds	r2, r7, r2
   2dcb0:	7812      	ldrb	r2, [r2, #0]
   2dcb2:	2102      	movs	r1, #2
   2dcb4:	430a      	orrs	r2, r1
   2dcb6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2dcb8:	2326      	movs	r3, #38	; 0x26
   2dcba:	18fb      	adds	r3, r7, r3
   2dcbc:	781b      	ldrb	r3, [r3, #0]
   2dcbe:	2202      	movs	r2, #2
   2dcc0:	4013      	ands	r3, r2
   2dcc2:	d11d      	bne.n	2dd00 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2dcc4:	2327      	movs	r3, #39	; 0x27
   2dcc6:	18fb      	adds	r3, r7, r3
   2dcc8:	781b      	ldrb	r3, [r3, #0]
   2dcca:	2203      	movs	r2, #3
   2dccc:	4013      	ands	r3, r2
   2dcce:	2b01      	cmp	r3, #1
   2dcd0:	d107      	bne.n	2dce2 <create_name+0x412>
   2dcd2:	2326      	movs	r3, #38	; 0x26
   2dcd4:	18fb      	adds	r3, r7, r3
   2dcd6:	2226      	movs	r2, #38	; 0x26
   2dcd8:	18ba      	adds	r2, r7, r2
   2dcda:	7812      	ldrb	r2, [r2, #0]
   2dcdc:	2110      	movs	r1, #16
   2dcde:	430a      	orrs	r2, r1
   2dce0:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2dce2:	2327      	movs	r3, #39	; 0x27
   2dce4:	18fb      	adds	r3, r7, r3
   2dce6:	781b      	ldrb	r3, [r3, #0]
   2dce8:	220c      	movs	r2, #12
   2dcea:	4013      	ands	r3, r2
   2dcec:	2b04      	cmp	r3, #4
   2dcee:	d107      	bne.n	2dd00 <create_name+0x430>
   2dcf0:	2326      	movs	r3, #38	; 0x26
   2dcf2:	18fb      	adds	r3, r7, r3
   2dcf4:	2226      	movs	r2, #38	; 0x26
   2dcf6:	18ba      	adds	r2, r7, r2
   2dcf8:	7812      	ldrb	r2, [r2, #0]
   2dcfa:	2108      	movs	r1, #8
   2dcfc:	430a      	orrs	r2, r1
   2dcfe:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2dd00:	687b      	ldr	r3, [r7, #4]
   2dd02:	699b      	ldr	r3, [r3, #24]
   2dd04:	330b      	adds	r3, #11
   2dd06:	2226      	movs	r2, #38	; 0x26
   2dd08:	18ba      	adds	r2, r7, r2
   2dd0a:	7812      	ldrb	r2, [r2, #0]
   2dd0c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2dd0e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dd10:	0018      	movs	r0, r3
   2dd12:	46bd      	mov	sp, r7
   2dd14:	b00b      	add	sp, #44	; 0x2c
   2dd16:	bd90      	pop	{r4, r7, pc}

0002dd18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dd18:	b590      	push	{r4, r7, lr}
   2dd1a:	b085      	sub	sp, #20
   2dd1c:	af00      	add	r7, sp, #0
   2dd1e:	6078      	str	r0, [r7, #4]
   2dd20:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2dd22:	683b      	ldr	r3, [r7, #0]
   2dd24:	781b      	ldrb	r3, [r3, #0]
   2dd26:	2b2f      	cmp	r3, #47	; 0x2f
   2dd28:	d003      	beq.n	2dd32 <follow_path+0x1a>
   2dd2a:	683b      	ldr	r3, [r7, #0]
   2dd2c:	781b      	ldrb	r3, [r3, #0]
   2dd2e:	2b5c      	cmp	r3, #92	; 0x5c
   2dd30:	d102      	bne.n	2dd38 <follow_path+0x20>
		path++;
   2dd32:	683b      	ldr	r3, [r7, #0]
   2dd34:	3301      	adds	r3, #1
   2dd36:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dd38:	687b      	ldr	r3, [r7, #4]
   2dd3a:	2200      	movs	r2, #0
   2dd3c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2dd3e:	683b      	ldr	r3, [r7, #0]
   2dd40:	781b      	ldrb	r3, [r3, #0]
   2dd42:	2b1f      	cmp	r3, #31
   2dd44:	d80c      	bhi.n	2dd60 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2dd46:	230f      	movs	r3, #15
   2dd48:	18fc      	adds	r4, r7, r3
   2dd4a:	687b      	ldr	r3, [r7, #4]
   2dd4c:	2100      	movs	r1, #0
   2dd4e:	0018      	movs	r0, r3
   2dd50:	4b3c      	ldr	r3, [pc, #240]	; (2de44 <follow_path+0x12c>)
   2dd52:	4798      	blx	r3
   2dd54:	0003      	movs	r3, r0
   2dd56:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2dd58:	687b      	ldr	r3, [r7, #4]
   2dd5a:	2200      	movs	r2, #0
   2dd5c:	615a      	str	r2, [r3, #20]
   2dd5e:	e06a      	b.n	2de36 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2dd60:	230f      	movs	r3, #15
   2dd62:	18fc      	adds	r4, r7, r3
   2dd64:	003a      	movs	r2, r7
   2dd66:	687b      	ldr	r3, [r7, #4]
   2dd68:	0011      	movs	r1, r2
   2dd6a:	0018      	movs	r0, r3
   2dd6c:	4b36      	ldr	r3, [pc, #216]	; (2de48 <follow_path+0x130>)
   2dd6e:	4798      	blx	r3
   2dd70:	0003      	movs	r3, r0
   2dd72:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dd74:	230f      	movs	r3, #15
   2dd76:	18fb      	adds	r3, r7, r3
   2dd78:	781b      	ldrb	r3, [r3, #0]
   2dd7a:	2b00      	cmp	r3, #0
   2dd7c:	d154      	bne.n	2de28 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2dd7e:	230f      	movs	r3, #15
   2dd80:	18fc      	adds	r4, r7, r3
   2dd82:	687b      	ldr	r3, [r7, #4]
   2dd84:	0018      	movs	r0, r3
   2dd86:	4b31      	ldr	r3, [pc, #196]	; (2de4c <follow_path+0x134>)
   2dd88:	4798      	blx	r3
   2dd8a:	0003      	movs	r3, r0
   2dd8c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2dd8e:	687b      	ldr	r3, [r7, #4]
   2dd90:	699a      	ldr	r2, [r3, #24]
   2dd92:	230e      	movs	r3, #14
   2dd94:	18fb      	adds	r3, r7, r3
   2dd96:	7ad2      	ldrb	r2, [r2, #11]
   2dd98:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2dd9a:	230f      	movs	r3, #15
   2dd9c:	18fb      	adds	r3, r7, r3
   2dd9e:	781b      	ldrb	r3, [r3, #0]
   2dda0:	2b00      	cmp	r3, #0
   2dda2:	d00f      	beq.n	2ddc4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dda4:	230f      	movs	r3, #15
   2dda6:	18fb      	adds	r3, r7, r3
   2dda8:	781b      	ldrb	r3, [r3, #0]
   2ddaa:	2b04      	cmp	r3, #4
   2ddac:	d13e      	bne.n	2de2c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2ddae:	230e      	movs	r3, #14
   2ddb0:	18fb      	adds	r3, r7, r3
   2ddb2:	781b      	ldrb	r3, [r3, #0]
   2ddb4:	2204      	movs	r2, #4
   2ddb6:	4013      	ands	r3, r2
   2ddb8:	d13a      	bne.n	2de30 <follow_path+0x118>
   2ddba:	230f      	movs	r3, #15
   2ddbc:	18fb      	adds	r3, r7, r3
   2ddbe:	2205      	movs	r2, #5
   2ddc0:	701a      	strb	r2, [r3, #0]
				}
				break;
   2ddc2:	e035      	b.n	2de30 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ddc4:	230e      	movs	r3, #14
   2ddc6:	18fb      	adds	r3, r7, r3
   2ddc8:	781b      	ldrb	r3, [r3, #0]
   2ddca:	2204      	movs	r2, #4
   2ddcc:	4013      	ands	r3, r2
   2ddce:	d131      	bne.n	2de34 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ddd0:	687b      	ldr	r3, [r7, #4]
   2ddd2:	695b      	ldr	r3, [r3, #20]
   2ddd4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2ddd6:	68bb      	ldr	r3, [r7, #8]
   2ddd8:	330b      	adds	r3, #11
   2ddda:	781b      	ldrb	r3, [r3, #0]
   2dddc:	001a      	movs	r2, r3
   2ddde:	2310      	movs	r3, #16
   2dde0:	4013      	ands	r3, r2
   2dde2:	d104      	bne.n	2ddee <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2dde4:	230f      	movs	r3, #15
   2dde6:	18fb      	adds	r3, r7, r3
   2dde8:	2205      	movs	r2, #5
   2ddea:	701a      	strb	r2, [r3, #0]
   2ddec:	e023      	b.n	2de36 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2ddee:	68bb      	ldr	r3, [r7, #8]
   2ddf0:	3315      	adds	r3, #21
   2ddf2:	781b      	ldrb	r3, [r3, #0]
   2ddf4:	021b      	lsls	r3, r3, #8
   2ddf6:	b21a      	sxth	r2, r3
   2ddf8:	68bb      	ldr	r3, [r7, #8]
   2ddfa:	3314      	adds	r3, #20
   2ddfc:	781b      	ldrb	r3, [r3, #0]
   2ddfe:	b21b      	sxth	r3, r3
   2de00:	4313      	orrs	r3, r2
   2de02:	b21b      	sxth	r3, r3
   2de04:	b29b      	uxth	r3, r3
   2de06:	041b      	lsls	r3, r3, #16
   2de08:	68ba      	ldr	r2, [r7, #8]
   2de0a:	321b      	adds	r2, #27
   2de0c:	7812      	ldrb	r2, [r2, #0]
   2de0e:	0212      	lsls	r2, r2, #8
   2de10:	b211      	sxth	r1, r2
   2de12:	68ba      	ldr	r2, [r7, #8]
   2de14:	321a      	adds	r2, #26
   2de16:	7812      	ldrb	r2, [r2, #0]
   2de18:	b212      	sxth	r2, r2
   2de1a:	430a      	orrs	r2, r1
   2de1c:	b212      	sxth	r2, r2
   2de1e:	b292      	uxth	r2, r2
   2de20:	431a      	orrs	r2, r3
   2de22:	687b      	ldr	r3, [r7, #4]
   2de24:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2de26:	e79b      	b.n	2dd60 <follow_path+0x48>
			if (res != FR_OK) break;
   2de28:	46c0      	nop			; (mov r8, r8)
   2de2a:	e004      	b.n	2de36 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2de2c:	46c0      	nop			; (mov r8, r8)
   2de2e:	e002      	b.n	2de36 <follow_path+0x11e>
				break;
   2de30:	46c0      	nop			; (mov r8, r8)
   2de32:	e000      	b.n	2de36 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2de34:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2de36:	230f      	movs	r3, #15
   2de38:	18fb      	adds	r3, r7, r3
   2de3a:	781b      	ldrb	r3, [r3, #0]
}
   2de3c:	0018      	movs	r0, r3
   2de3e:	46bd      	mov	sp, r7
   2de40:	b005      	add	sp, #20
   2de42:	bd90      	pop	{r4, r7, pc}
   2de44:	0002cce9 	.word	0x0002cce9
   2de48:	0002d8d1 	.word	0x0002d8d1
   2de4c:	0002d36d 	.word	0x0002d36d

0002de50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2de50:	b590      	push	{r4, r7, lr}
   2de52:	b083      	sub	sp, #12
   2de54:	af00      	add	r7, sp, #0
   2de56:	6078      	str	r0, [r7, #4]
   2de58:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2de5a:	687b      	ldr	r3, [r7, #4]
   2de5c:	7858      	ldrb	r0, [r3, #1]
   2de5e:	687b      	ldr	r3, [r7, #4]
   2de60:	3330      	adds	r3, #48	; 0x30
   2de62:	0019      	movs	r1, r3
   2de64:	683a      	ldr	r2, [r7, #0]
   2de66:	2301      	movs	r3, #1
   2de68:	4c2a      	ldr	r4, [pc, #168]	; (2df14 <check_fs+0xc4>)
   2de6a:	47a0      	blx	r4
   2de6c:	1e03      	subs	r3, r0, #0
   2de6e:	d001      	beq.n	2de74 <check_fs+0x24>
		return 3;
   2de70:	2303      	movs	r3, #3
   2de72:	e04b      	b.n	2df0c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2de74:	687b      	ldr	r3, [r7, #4]
   2de76:	4a28      	ldr	r2, [pc, #160]	; (2df18 <check_fs+0xc8>)
   2de78:	4694      	mov	ip, r2
   2de7a:	4463      	add	r3, ip
   2de7c:	3301      	adds	r3, #1
   2de7e:	781b      	ldrb	r3, [r3, #0]
   2de80:	021b      	lsls	r3, r3, #8
   2de82:	b21a      	sxth	r2, r3
   2de84:	687b      	ldr	r3, [r7, #4]
   2de86:	4924      	ldr	r1, [pc, #144]	; (2df18 <check_fs+0xc8>)
   2de88:	5c5b      	ldrb	r3, [r3, r1]
   2de8a:	b21b      	sxth	r3, r3
   2de8c:	4313      	orrs	r3, r2
   2de8e:	b21b      	sxth	r3, r3
   2de90:	4a22      	ldr	r2, [pc, #136]	; (2df1c <check_fs+0xcc>)
   2de92:	4293      	cmp	r3, r2
   2de94:	d001      	beq.n	2de9a <check_fs+0x4a>
		return 2;
   2de96:	2302      	movs	r3, #2
   2de98:	e038      	b.n	2df0c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2de9a:	687b      	ldr	r3, [r7, #4]
   2de9c:	3366      	adds	r3, #102	; 0x66
   2de9e:	3303      	adds	r3, #3
   2dea0:	781b      	ldrb	r3, [r3, #0]
   2dea2:	061a      	lsls	r2, r3, #24
   2dea4:	687b      	ldr	r3, [r7, #4]
   2dea6:	3366      	adds	r3, #102	; 0x66
   2dea8:	3302      	adds	r3, #2
   2deaa:	781b      	ldrb	r3, [r3, #0]
   2deac:	041b      	lsls	r3, r3, #16
   2deae:	4313      	orrs	r3, r2
   2deb0:	687a      	ldr	r2, [r7, #4]
   2deb2:	3266      	adds	r2, #102	; 0x66
   2deb4:	3201      	adds	r2, #1
   2deb6:	7812      	ldrb	r2, [r2, #0]
   2deb8:	0212      	lsls	r2, r2, #8
   2deba:	4313      	orrs	r3, r2
   2debc:	687a      	ldr	r2, [r7, #4]
   2debe:	2166      	movs	r1, #102	; 0x66
   2dec0:	5c52      	ldrb	r2, [r2, r1]
   2dec2:	4313      	orrs	r3, r2
   2dec4:	021b      	lsls	r3, r3, #8
   2dec6:	0a1b      	lsrs	r3, r3, #8
   2dec8:	4a15      	ldr	r2, [pc, #84]	; (2df20 <check_fs+0xd0>)
   2deca:	4293      	cmp	r3, r2
   2decc:	d101      	bne.n	2ded2 <check_fs+0x82>
		return 0;
   2dece:	2300      	movs	r3, #0
   2ded0:	e01c      	b.n	2df0c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2ded2:	687b      	ldr	r3, [r7, #4]
   2ded4:	3382      	adds	r3, #130	; 0x82
   2ded6:	3303      	adds	r3, #3
   2ded8:	781b      	ldrb	r3, [r3, #0]
   2deda:	061a      	lsls	r2, r3, #24
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	3382      	adds	r3, #130	; 0x82
   2dee0:	3302      	adds	r3, #2
   2dee2:	781b      	ldrb	r3, [r3, #0]
   2dee4:	041b      	lsls	r3, r3, #16
   2dee6:	4313      	orrs	r3, r2
   2dee8:	687a      	ldr	r2, [r7, #4]
   2deea:	3282      	adds	r2, #130	; 0x82
   2deec:	3201      	adds	r2, #1
   2deee:	7812      	ldrb	r2, [r2, #0]
   2def0:	0212      	lsls	r2, r2, #8
   2def2:	4313      	orrs	r3, r2
   2def4:	687a      	ldr	r2, [r7, #4]
   2def6:	2182      	movs	r1, #130	; 0x82
   2def8:	5c52      	ldrb	r2, [r2, r1]
   2defa:	4313      	orrs	r3, r2
   2defc:	021b      	lsls	r3, r3, #8
   2defe:	0a1b      	lsrs	r3, r3, #8
   2df00:	4a07      	ldr	r2, [pc, #28]	; (2df20 <check_fs+0xd0>)
   2df02:	4293      	cmp	r3, r2
   2df04:	d101      	bne.n	2df0a <check_fs+0xba>
		return 0;
   2df06:	2300      	movs	r3, #0
   2df08:	e000      	b.n	2df0c <check_fs+0xbc>

	return 1;
   2df0a:	2301      	movs	r3, #1
}
   2df0c:	0018      	movs	r0, r3
   2df0e:	46bd      	mov	sp, r7
   2df10:	b003      	add	sp, #12
   2df12:	bd90      	pop	{r4, r7, pc}
   2df14:	0002c0b9 	.word	0x0002c0b9
   2df18:	0000022e 	.word	0x0000022e
   2df1c:	ffffaa55 	.word	0xffffaa55
   2df20:	00544146 	.word	0x00544146

0002df24 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2df24:	b590      	push	{r4, r7, lr}
   2df26:	b093      	sub	sp, #76	; 0x4c
   2df28:	af00      	add	r7, sp, #0
   2df2a:	60f8      	str	r0, [r7, #12]
   2df2c:	60b9      	str	r1, [r7, #8]
   2df2e:	1dfb      	adds	r3, r7, #7
   2df30:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2df32:	68fb      	ldr	r3, [r7, #12]
   2df34:	681b      	ldr	r3, [r3, #0]
   2df36:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2df3a:	781b      	ldrb	r3, [r3, #0]
   2df3c:	3b30      	subs	r3, #48	; 0x30
   2df3e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2df40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2df42:	2b09      	cmp	r3, #9
   2df44:	d80b      	bhi.n	2df5e <chk_mounted+0x3a>
   2df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2df48:	3301      	adds	r3, #1
   2df4a:	781b      	ldrb	r3, [r3, #0]
   2df4c:	2b3a      	cmp	r3, #58	; 0x3a
   2df4e:	d106      	bne.n	2df5e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2df50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2df52:	3302      	adds	r3, #2
   2df54:	62fb      	str	r3, [r7, #44]	; 0x2c
   2df56:	68fb      	ldr	r3, [r7, #12]
   2df58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2df5a:	601a      	str	r2, [r3, #0]
   2df5c:	e001      	b.n	2df62 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2df5e:	2300      	movs	r3, #0
   2df60:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2df62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2df64:	2b07      	cmp	r3, #7
   2df66:	d901      	bls.n	2df6c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2df68:	230b      	movs	r3, #11
   2df6a:	e2af      	b.n	2e4cc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2df6c:	4bc5      	ldr	r3, [pc, #788]	; (2e284 <chk_mounted+0x360>)
   2df6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2df70:	0092      	lsls	r2, r2, #2
   2df72:	58d3      	ldr	r3, [r2, r3]
   2df74:	62bb      	str	r3, [r7, #40]	; 0x28
   2df76:	68bb      	ldr	r3, [r7, #8]
   2df78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df7a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df7e:	2b00      	cmp	r3, #0
   2df80:	d101      	bne.n	2df86 <chk_mounted+0x62>
   2df82:	230c      	movs	r3, #12
   2df84:	e2a2      	b.n	2e4cc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2df86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df88:	781b      	ldrb	r3, [r3, #0]
   2df8a:	2b00      	cmp	r3, #0
   2df8c:	d01c      	beq.n	2dfc8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df90:	785b      	ldrb	r3, [r3, #1]
   2df92:	2227      	movs	r2, #39	; 0x27
   2df94:	18bc      	adds	r4, r7, r2
   2df96:	0018      	movs	r0, r3
   2df98:	4bbb      	ldr	r3, [pc, #748]	; (2e288 <chk_mounted+0x364>)
   2df9a:	4798      	blx	r3
   2df9c:	0003      	movs	r3, r0
   2df9e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2dfa0:	2327      	movs	r3, #39	; 0x27
   2dfa2:	18fb      	adds	r3, r7, r3
   2dfa4:	781b      	ldrb	r3, [r3, #0]
   2dfa6:	2201      	movs	r2, #1
   2dfa8:	4013      	ands	r3, r2
   2dfaa:	d10d      	bne.n	2dfc8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2dfac:	1dfb      	adds	r3, r7, #7
   2dfae:	781b      	ldrb	r3, [r3, #0]
   2dfb0:	2b00      	cmp	r3, #0
   2dfb2:	d007      	beq.n	2dfc4 <chk_mounted+0xa0>
   2dfb4:	2327      	movs	r3, #39	; 0x27
   2dfb6:	18fb      	adds	r3, r7, r3
   2dfb8:	781b      	ldrb	r3, [r3, #0]
   2dfba:	2204      	movs	r2, #4
   2dfbc:	4013      	ands	r3, r2
   2dfbe:	d001      	beq.n	2dfc4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2dfc0:	230a      	movs	r3, #10
   2dfc2:	e283      	b.n	2e4cc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2dfc4:	2300      	movs	r3, #0
   2dfc6:	e281      	b.n	2e4cc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfca:	2200      	movs	r2, #0
   2dfcc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2dfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dfd0:	b2da      	uxtb	r2, r3
   2dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfd4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfd8:	785b      	ldrb	r3, [r3, #1]
   2dfda:	2227      	movs	r2, #39	; 0x27
   2dfdc:	18bc      	adds	r4, r7, r2
   2dfde:	0018      	movs	r0, r3
   2dfe0:	4baa      	ldr	r3, [pc, #680]	; (2e28c <chk_mounted+0x368>)
   2dfe2:	4798      	blx	r3
   2dfe4:	0003      	movs	r3, r0
   2dfe6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2dfe8:	2327      	movs	r3, #39	; 0x27
   2dfea:	18fb      	adds	r3, r7, r3
   2dfec:	781b      	ldrb	r3, [r3, #0]
   2dfee:	2201      	movs	r2, #1
   2dff0:	4013      	ands	r3, r2
   2dff2:	d001      	beq.n	2dff8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2dff4:	2303      	movs	r3, #3
   2dff6:	e269      	b.n	2e4cc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2dff8:	1dfb      	adds	r3, r7, #7
   2dffa:	781b      	ldrb	r3, [r3, #0]
   2dffc:	2b00      	cmp	r3, #0
   2dffe:	d007      	beq.n	2e010 <chk_mounted+0xec>
   2e000:	2327      	movs	r3, #39	; 0x27
   2e002:	18fb      	adds	r3, r7, r3
   2e004:	781b      	ldrb	r3, [r3, #0]
   2e006:	2204      	movs	r2, #4
   2e008:	4013      	ands	r3, r2
   2e00a:	d001      	beq.n	2e010 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2e00c:	230a      	movs	r3, #10
   2e00e:	e25d      	b.n	2e4cc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2e010:	2300      	movs	r3, #0
   2e012:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e014:	2347      	movs	r3, #71	; 0x47
   2e016:	18fc      	adds	r4, r7, r3
   2e018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e01c:	0011      	movs	r1, r2
   2e01e:	0018      	movs	r0, r3
   2e020:	4b9b      	ldr	r3, [pc, #620]	; (2e290 <chk_mounted+0x36c>)
   2e022:	4798      	blx	r3
   2e024:	0003      	movs	r3, r0
   2e026:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2e028:	2347      	movs	r3, #71	; 0x47
   2e02a:	18fb      	adds	r3, r7, r3
   2e02c:	781b      	ldrb	r3, [r3, #0]
   2e02e:	2b01      	cmp	r3, #1
   2e030:	d13b      	bne.n	2e0aa <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2e032:	2346      	movs	r3, #70	; 0x46
   2e034:	18fb      	adds	r3, r7, r3
   2e036:	2200      	movs	r2, #0
   2e038:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2e03a:	2346      	movs	r3, #70	; 0x46
   2e03c:	18fb      	adds	r3, r7, r3
   2e03e:	781b      	ldrb	r3, [r3, #0]
   2e040:	2b00      	cmp	r3, #0
   2e042:	d006      	beq.n	2e052 <chk_mounted+0x12e>
   2e044:	2346      	movs	r3, #70	; 0x46
   2e046:	18fb      	adds	r3, r7, r3
   2e048:	781a      	ldrb	r2, [r3, #0]
   2e04a:	2346      	movs	r3, #70	; 0x46
   2e04c:	18fb      	adds	r3, r7, r3
   2e04e:	3a01      	subs	r2, #1
   2e050:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2e052:	2346      	movs	r3, #70	; 0x46
   2e054:	18fb      	adds	r3, r7, r3
   2e056:	781b      	ldrb	r3, [r3, #0]
   2e058:	011b      	lsls	r3, r3, #4
   2e05a:	33bf      	adds	r3, #191	; 0xbf
   2e05c:	33ff      	adds	r3, #255	; 0xff
   2e05e:	3330      	adds	r3, #48	; 0x30
   2e060:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e062:	18d3      	adds	r3, r2, r3
   2e064:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2e066:	6a3b      	ldr	r3, [r7, #32]
   2e068:	3304      	adds	r3, #4
   2e06a:	781b      	ldrb	r3, [r3, #0]
   2e06c:	2b00      	cmp	r3, #0
   2e06e:	d01c      	beq.n	2e0aa <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e070:	6a3b      	ldr	r3, [r7, #32]
   2e072:	330b      	adds	r3, #11
   2e074:	781b      	ldrb	r3, [r3, #0]
   2e076:	061a      	lsls	r2, r3, #24
   2e078:	6a3b      	ldr	r3, [r7, #32]
   2e07a:	330a      	adds	r3, #10
   2e07c:	781b      	ldrb	r3, [r3, #0]
   2e07e:	041b      	lsls	r3, r3, #16
   2e080:	4313      	orrs	r3, r2
   2e082:	6a3a      	ldr	r2, [r7, #32]
   2e084:	3209      	adds	r2, #9
   2e086:	7812      	ldrb	r2, [r2, #0]
   2e088:	0212      	lsls	r2, r2, #8
   2e08a:	4313      	orrs	r3, r2
   2e08c:	6a3a      	ldr	r2, [r7, #32]
   2e08e:	3208      	adds	r2, #8
   2e090:	7812      	ldrb	r2, [r2, #0]
   2e092:	4313      	orrs	r3, r2
   2e094:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e096:	2347      	movs	r3, #71	; 0x47
   2e098:	18fc      	adds	r4, r7, r3
   2e09a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e09e:	0011      	movs	r1, r2
   2e0a0:	0018      	movs	r0, r3
   2e0a2:	4b7b      	ldr	r3, [pc, #492]	; (2e290 <chk_mounted+0x36c>)
   2e0a4:	4798      	blx	r3
   2e0a6:	0003      	movs	r3, r0
   2e0a8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e0aa:	2347      	movs	r3, #71	; 0x47
   2e0ac:	18fb      	adds	r3, r7, r3
   2e0ae:	781b      	ldrb	r3, [r3, #0]
   2e0b0:	2b03      	cmp	r3, #3
   2e0b2:	d101      	bne.n	2e0b8 <chk_mounted+0x194>
   2e0b4:	2301      	movs	r3, #1
   2e0b6:	e209      	b.n	2e4cc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e0b8:	2347      	movs	r3, #71	; 0x47
   2e0ba:	18fb      	adds	r3, r7, r3
   2e0bc:	781b      	ldrb	r3, [r3, #0]
   2e0be:	2b00      	cmp	r3, #0
   2e0c0:	d001      	beq.n	2e0c6 <chk_mounted+0x1a2>
   2e0c2:	230d      	movs	r3, #13
   2e0c4:	e202      	b.n	2e4cc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0c8:	223c      	movs	r2, #60	; 0x3c
   2e0ca:	5c9b      	ldrb	r3, [r3, r2]
   2e0cc:	021b      	lsls	r3, r3, #8
   2e0ce:	b21a      	sxth	r2, r3
   2e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0d2:	213b      	movs	r1, #59	; 0x3b
   2e0d4:	5c5b      	ldrb	r3, [r3, r1]
   2e0d6:	b21b      	sxth	r3, r3
   2e0d8:	4313      	orrs	r3, r2
   2e0da:	b21a      	sxth	r2, r3
   2e0dc:	2380      	movs	r3, #128	; 0x80
   2e0de:	009b      	lsls	r3, r3, #2
   2e0e0:	429a      	cmp	r2, r3
   2e0e2:	d001      	beq.n	2e0e8 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e0e4:	230d      	movs	r3, #13
   2e0e6:	e1f1      	b.n	2e4cc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0ea:	2247      	movs	r2, #71	; 0x47
   2e0ec:	5c9b      	ldrb	r3, [r3, r2]
   2e0ee:	021b      	lsls	r3, r3, #8
   2e0f0:	b21a      	sxth	r2, r3
   2e0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0f4:	2146      	movs	r1, #70	; 0x46
   2e0f6:	5c5b      	ldrb	r3, [r3, r1]
   2e0f8:	b21b      	sxth	r3, r3
   2e0fa:	4313      	orrs	r3, r2
   2e0fc:	b21b      	sxth	r3, r3
   2e0fe:	b29b      	uxth	r3, r3
   2e100:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e104:	2b00      	cmp	r3, #0
   2e106:	d112      	bne.n	2e12e <chk_mounted+0x20a>
   2e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e10a:	2257      	movs	r2, #87	; 0x57
   2e10c:	5c9b      	ldrb	r3, [r3, r2]
   2e10e:	061a      	lsls	r2, r3, #24
   2e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e112:	2156      	movs	r1, #86	; 0x56
   2e114:	5c5b      	ldrb	r3, [r3, r1]
   2e116:	041b      	lsls	r3, r3, #16
   2e118:	4313      	orrs	r3, r2
   2e11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e11c:	2155      	movs	r1, #85	; 0x55
   2e11e:	5c52      	ldrb	r2, [r2, r1]
   2e120:	0212      	lsls	r2, r2, #8
   2e122:	4313      	orrs	r3, r2
   2e124:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e126:	2154      	movs	r1, #84	; 0x54
   2e128:	5c52      	ldrb	r2, [r2, r1]
   2e12a:	4313      	orrs	r3, r2
   2e12c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e130:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e132:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e134:	231f      	movs	r3, #31
   2e136:	18fb      	adds	r3, r7, r3
   2e138:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e13a:	2140      	movs	r1, #64	; 0x40
   2e13c:	5c52      	ldrb	r2, [r2, r1]
   2e13e:	701a      	strb	r2, [r3, #0]
   2e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e142:	221f      	movs	r2, #31
   2e144:	18ba      	adds	r2, r7, r2
   2e146:	7812      	ldrb	r2, [r2, #0]
   2e148:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e14a:	231f      	movs	r3, #31
   2e14c:	18fb      	adds	r3, r7, r3
   2e14e:	781b      	ldrb	r3, [r3, #0]
   2e150:	2b01      	cmp	r3, #1
   2e152:	d006      	beq.n	2e162 <chk_mounted+0x23e>
   2e154:	231f      	movs	r3, #31
   2e156:	18fb      	adds	r3, r7, r3
   2e158:	781b      	ldrb	r3, [r3, #0]
   2e15a:	2b02      	cmp	r3, #2
   2e15c:	d001      	beq.n	2e162 <chk_mounted+0x23e>
   2e15e:	230d      	movs	r3, #13
   2e160:	e1b4      	b.n	2e4cc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e162:	231f      	movs	r3, #31
   2e164:	18fb      	adds	r3, r7, r3
   2e166:	781a      	ldrb	r2, [r3, #0]
   2e168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e16a:	4353      	muls	r3, r2
   2e16c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e16e:	231f      	movs	r3, #31
   2e170:	18fb      	adds	r3, r7, r3
   2e172:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e174:	213d      	movs	r1, #61	; 0x3d
   2e176:	5c52      	ldrb	r2, [r2, r1]
   2e178:	701a      	strb	r2, [r3, #0]
   2e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e17c:	221f      	movs	r2, #31
   2e17e:	18ba      	adds	r2, r7, r2
   2e180:	7812      	ldrb	r2, [r2, #0]
   2e182:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e184:	231f      	movs	r3, #31
   2e186:	18fb      	adds	r3, r7, r3
   2e188:	781b      	ldrb	r3, [r3, #0]
   2e18a:	2b00      	cmp	r3, #0
   2e18c:	d008      	beq.n	2e1a0 <chk_mounted+0x27c>
   2e18e:	231f      	movs	r3, #31
   2e190:	18fb      	adds	r3, r7, r3
   2e192:	781b      	ldrb	r3, [r3, #0]
   2e194:	221f      	movs	r2, #31
   2e196:	18ba      	adds	r2, r7, r2
   2e198:	7812      	ldrb	r2, [r2, #0]
   2e19a:	3a01      	subs	r2, #1
   2e19c:	4013      	ands	r3, r2
   2e19e:	d001      	beq.n	2e1a4 <chk_mounted+0x280>
   2e1a0:	230d      	movs	r3, #13
   2e1a2:	e193      	b.n	2e4cc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1a6:	2242      	movs	r2, #66	; 0x42
   2e1a8:	5c9b      	ldrb	r3, [r3, r2]
   2e1aa:	021b      	lsls	r3, r3, #8
   2e1ac:	b21a      	sxth	r2, r3
   2e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1b0:	2141      	movs	r1, #65	; 0x41
   2e1b2:	5c5b      	ldrb	r3, [r3, r1]
   2e1b4:	b21b      	sxth	r3, r3
   2e1b6:	4313      	orrs	r3, r2
   2e1b8:	b21b      	sxth	r3, r3
   2e1ba:	b29a      	uxth	r2, r3
   2e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1be:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1c2:	891b      	ldrh	r3, [r3, #8]
   2e1c4:	220f      	movs	r2, #15
   2e1c6:	4013      	ands	r3, r2
   2e1c8:	b29b      	uxth	r3, r3
   2e1ca:	2b00      	cmp	r3, #0
   2e1cc:	d001      	beq.n	2e1d2 <chk_mounted+0x2ae>
   2e1ce:	230d      	movs	r3, #13
   2e1d0:	e17c      	b.n	2e4cc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1d4:	2244      	movs	r2, #68	; 0x44
   2e1d6:	5c9b      	ldrb	r3, [r3, r2]
   2e1d8:	021b      	lsls	r3, r3, #8
   2e1da:	b21a      	sxth	r2, r3
   2e1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1de:	2143      	movs	r1, #67	; 0x43
   2e1e0:	5c5b      	ldrb	r3, [r3, r1]
   2e1e2:	b21b      	sxth	r3, r3
   2e1e4:	4313      	orrs	r3, r2
   2e1e6:	b21b      	sxth	r3, r3
   2e1e8:	b29b      	uxth	r3, r3
   2e1ea:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e1ee:	2b00      	cmp	r3, #0
   2e1f0:	d112      	bne.n	2e218 <chk_mounted+0x2f4>
   2e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1f4:	2253      	movs	r2, #83	; 0x53
   2e1f6:	5c9b      	ldrb	r3, [r3, r2]
   2e1f8:	061a      	lsls	r2, r3, #24
   2e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1fc:	2152      	movs	r1, #82	; 0x52
   2e1fe:	5c5b      	ldrb	r3, [r3, r1]
   2e200:	041b      	lsls	r3, r3, #16
   2e202:	4313      	orrs	r3, r2
   2e204:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e206:	2151      	movs	r1, #81	; 0x51
   2e208:	5c52      	ldrb	r2, [r2, r1]
   2e20a:	0212      	lsls	r2, r2, #8
   2e20c:	4313      	orrs	r3, r2
   2e20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e210:	2150      	movs	r1, #80	; 0x50
   2e212:	5c52      	ldrb	r2, [r2, r1]
   2e214:	4313      	orrs	r3, r2
   2e216:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e21a:	223f      	movs	r2, #63	; 0x3f
   2e21c:	5c9b      	ldrb	r3, [r3, r2]
   2e21e:	021b      	lsls	r3, r3, #8
   2e220:	b21a      	sxth	r2, r3
   2e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e224:	213e      	movs	r1, #62	; 0x3e
   2e226:	5c5b      	ldrb	r3, [r3, r1]
   2e228:	b21b      	sxth	r3, r3
   2e22a:	4313      	orrs	r3, r2
   2e22c:	b21a      	sxth	r2, r3
   2e22e:	231c      	movs	r3, #28
   2e230:	18fb      	adds	r3, r7, r3
   2e232:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e234:	231c      	movs	r3, #28
   2e236:	18fb      	adds	r3, r7, r3
   2e238:	881b      	ldrh	r3, [r3, #0]
   2e23a:	2b00      	cmp	r3, #0
   2e23c:	d101      	bne.n	2e242 <chk_mounted+0x31e>
   2e23e:	230d      	movs	r3, #13
   2e240:	e144      	b.n	2e4cc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e242:	231c      	movs	r3, #28
   2e244:	18fb      	adds	r3, r7, r3
   2e246:	881a      	ldrh	r2, [r3, #0]
   2e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e24a:	18d3      	adds	r3, r2, r3
   2e24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e24e:	8912      	ldrh	r2, [r2, #8]
   2e250:	0912      	lsrs	r2, r2, #4
   2e252:	b292      	uxth	r2, r2
   2e254:	189b      	adds	r3, r3, r2
   2e256:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e25a:	69bb      	ldr	r3, [r7, #24]
   2e25c:	429a      	cmp	r2, r3
   2e25e:	d201      	bcs.n	2e264 <chk_mounted+0x340>
   2e260:	230d      	movs	r3, #13
   2e262:	e133      	b.n	2e4cc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e266:	69bb      	ldr	r3, [r7, #24]
   2e268:	1ad2      	subs	r2, r2, r3
   2e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e26c:	789b      	ldrb	r3, [r3, #2]
   2e26e:	0019      	movs	r1, r3
   2e270:	4b08      	ldr	r3, [pc, #32]	; (2e294 <chk_mounted+0x370>)
   2e272:	0010      	movs	r0, r2
   2e274:	4798      	blx	r3
   2e276:	0003      	movs	r3, r0
   2e278:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e27a:	697b      	ldr	r3, [r7, #20]
   2e27c:	2b00      	cmp	r3, #0
   2e27e:	d10b      	bne.n	2e298 <chk_mounted+0x374>
   2e280:	230d      	movs	r3, #13
   2e282:	e123      	b.n	2e4cc <chk_mounted+0x5a8>
   2e284:	200042f0 	.word	0x200042f0
   2e288:	0002c081 	.word	0x0002c081
   2e28c:	0002bffd 	.word	0x0002bffd
   2e290:	0002de51 	.word	0x0002de51
   2e294:	000336a5 	.word	0x000336a5
	fmt = FS_FAT12;
   2e298:	2347      	movs	r3, #71	; 0x47
   2e29a:	18fb      	adds	r3, r7, r3
   2e29c:	2201      	movs	r2, #1
   2e29e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e2a0:	697b      	ldr	r3, [r7, #20]
   2e2a2:	4a8c      	ldr	r2, [pc, #560]	; (2e4d4 <chk_mounted+0x5b0>)
   2e2a4:	4293      	cmp	r3, r2
   2e2a6:	d903      	bls.n	2e2b0 <chk_mounted+0x38c>
   2e2a8:	2347      	movs	r3, #71	; 0x47
   2e2aa:	18fb      	adds	r3, r7, r3
   2e2ac:	2202      	movs	r2, #2
   2e2ae:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e2b0:	697b      	ldr	r3, [r7, #20]
   2e2b2:	4a89      	ldr	r2, [pc, #548]	; (2e4d8 <chk_mounted+0x5b4>)
   2e2b4:	4293      	cmp	r3, r2
   2e2b6:	d903      	bls.n	2e2c0 <chk_mounted+0x39c>
   2e2b8:	2347      	movs	r3, #71	; 0x47
   2e2ba:	18fb      	adds	r3, r7, r3
   2e2bc:	2203      	movs	r2, #3
   2e2be:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e2c0:	697b      	ldr	r3, [r7, #20]
   2e2c2:	1c9a      	adds	r2, r3, #2
   2e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e2c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e2ca:	69bb      	ldr	r3, [r7, #24]
   2e2cc:	18d2      	adds	r2, r2, r3
   2e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2d0:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e2d2:	231c      	movs	r3, #28
   2e2d4:	18fb      	adds	r3, r7, r3
   2e2d6:	881a      	ldrh	r2, [r3, #0]
   2e2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e2da:	18d2      	adds	r2, r2, r3
   2e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2de:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e2e0:	2347      	movs	r3, #71	; 0x47
   2e2e2:	18fb      	adds	r3, r7, r3
   2e2e4:	781b      	ldrb	r3, [r3, #0]
   2e2e6:	2b03      	cmp	r3, #3
   2e2e8:	d11e      	bne.n	2e328 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ec:	891b      	ldrh	r3, [r3, #8]
   2e2ee:	2b00      	cmp	r3, #0
   2e2f0:	d001      	beq.n	2e2f6 <chk_mounted+0x3d2>
   2e2f2:	230d      	movs	r3, #13
   2e2f4:	e0ea      	b.n	2e4cc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2f8:	225f      	movs	r2, #95	; 0x5f
   2e2fa:	5c9b      	ldrb	r3, [r3, r2]
   2e2fc:	061a      	lsls	r2, r3, #24
   2e2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e300:	215e      	movs	r1, #94	; 0x5e
   2e302:	5c5b      	ldrb	r3, [r3, r1]
   2e304:	041b      	lsls	r3, r3, #16
   2e306:	4313      	orrs	r3, r2
   2e308:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e30a:	215d      	movs	r1, #93	; 0x5d
   2e30c:	5c52      	ldrb	r2, [r2, r1]
   2e30e:	0212      	lsls	r2, r2, #8
   2e310:	4313      	orrs	r3, r2
   2e312:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e314:	215c      	movs	r1, #92	; 0x5c
   2e316:	5c52      	ldrb	r2, [r2, r1]
   2e318:	431a      	orrs	r2, r3
   2e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e31c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e320:	699b      	ldr	r3, [r3, #24]
   2e322:	009b      	lsls	r3, r3, #2
   2e324:	633b      	str	r3, [r7, #48]	; 0x30
   2e326:	e020      	b.n	2e36a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e32a:	891b      	ldrh	r3, [r3, #8]
   2e32c:	2b00      	cmp	r3, #0
   2e32e:	d101      	bne.n	2e334 <chk_mounted+0x410>
   2e330:	230d      	movs	r3, #13
   2e332:	e0cb      	b.n	2e4cc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e336:	6a1a      	ldr	r2, [r3, #32]
   2e338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e33a:	18d2      	adds	r2, r2, r3
   2e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e33e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e340:	2347      	movs	r3, #71	; 0x47
   2e342:	18fb      	adds	r3, r7, r3
   2e344:	781b      	ldrb	r3, [r3, #0]
   2e346:	2b02      	cmp	r3, #2
   2e348:	d103      	bne.n	2e352 <chk_mounted+0x42e>
   2e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e34c:	699b      	ldr	r3, [r3, #24]
   2e34e:	005b      	lsls	r3, r3, #1
   2e350:	e00a      	b.n	2e368 <chk_mounted+0x444>
   2e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e354:	699a      	ldr	r2, [r3, #24]
   2e356:	0013      	movs	r3, r2
   2e358:	005b      	lsls	r3, r3, #1
   2e35a:	189b      	adds	r3, r3, r2
   2e35c:	085a      	lsrs	r2, r3, #1
   2e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e360:	699b      	ldr	r3, [r3, #24]
   2e362:	2101      	movs	r1, #1
   2e364:	400b      	ands	r3, r1
   2e366:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e368:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e36c:	69da      	ldr	r2, [r3, #28]
   2e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e370:	495a      	ldr	r1, [pc, #360]	; (2e4dc <chk_mounted+0x5b8>)
   2e372:	468c      	mov	ip, r1
   2e374:	4463      	add	r3, ip
   2e376:	0a5b      	lsrs	r3, r3, #9
   2e378:	429a      	cmp	r2, r3
   2e37a:	d201      	bcs.n	2e380 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e37c:	230d      	movs	r3, #13
   2e37e:	e0a5      	b.n	2e4cc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e382:	2201      	movs	r2, #1
   2e384:	4252      	negs	r2, r2
   2e386:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e38a:	2200      	movs	r2, #0
   2e38c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e38e:	2347      	movs	r3, #71	; 0x47
   2e390:	18fb      	adds	r3, r7, r3
   2e392:	781b      	ldrb	r3, [r3, #0]
   2e394:	2b03      	cmp	r3, #3
   2e396:	d000      	beq.n	2e39a <chk_mounted+0x476>
   2e398:	e082      	b.n	2e4a0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e39c:	2200      	movs	r2, #0
   2e39e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3a2:	2261      	movs	r2, #97	; 0x61
   2e3a4:	5c9b      	ldrb	r3, [r3, r2]
   2e3a6:	021b      	lsls	r3, r3, #8
   2e3a8:	b21a      	sxth	r2, r3
   2e3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ac:	2160      	movs	r1, #96	; 0x60
   2e3ae:	5c5b      	ldrb	r3, [r3, r1]
   2e3b0:	b21b      	sxth	r3, r3
   2e3b2:	4313      	orrs	r3, r2
   2e3b4:	b21b      	sxth	r3, r3
   2e3b6:	b29b      	uxth	r3, r3
   2e3b8:	001a      	movs	r2, r3
   2e3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e3bc:	18d2      	adds	r2, r2, r3
   2e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c4:	7858      	ldrb	r0, [r3, #1]
   2e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c8:	3330      	adds	r3, #48	; 0x30
   2e3ca:	0019      	movs	r1, r3
   2e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ce:	695a      	ldr	r2, [r3, #20]
   2e3d0:	2301      	movs	r3, #1
   2e3d2:	4c43      	ldr	r4, [pc, #268]	; (2e4e0 <chk_mounted+0x5bc>)
   2e3d4:	47a0      	blx	r4
   2e3d6:	1e03      	subs	r3, r0, #0
   2e3d8:	d162      	bne.n	2e4a0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3dc:	4a41      	ldr	r2, [pc, #260]	; (2e4e4 <chk_mounted+0x5c0>)
   2e3de:	5c9b      	ldrb	r3, [r3, r2]
   2e3e0:	021b      	lsls	r3, r3, #8
   2e3e2:	b21a      	sxth	r2, r3
   2e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3e6:	4940      	ldr	r1, [pc, #256]	; (2e4e8 <chk_mounted+0x5c4>)
   2e3e8:	5c5b      	ldrb	r3, [r3, r1]
   2e3ea:	b21b      	sxth	r3, r3
   2e3ec:	4313      	orrs	r3, r2
   2e3ee:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e3f0:	4a3e      	ldr	r2, [pc, #248]	; (2e4ec <chk_mounted+0x5c8>)
   2e3f2:	4293      	cmp	r3, r2
   2e3f4:	d154      	bne.n	2e4a0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f8:	2233      	movs	r2, #51	; 0x33
   2e3fa:	5c9b      	ldrb	r3, [r3, r2]
   2e3fc:	061a      	lsls	r2, r3, #24
   2e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e400:	2132      	movs	r1, #50	; 0x32
   2e402:	5c5b      	ldrb	r3, [r3, r1]
   2e404:	041b      	lsls	r3, r3, #16
   2e406:	4313      	orrs	r3, r2
   2e408:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e40a:	2131      	movs	r1, #49	; 0x31
   2e40c:	5c52      	ldrb	r2, [r2, r1]
   2e40e:	0212      	lsls	r2, r2, #8
   2e410:	4313      	orrs	r3, r2
   2e412:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e414:	2130      	movs	r1, #48	; 0x30
   2e416:	5c52      	ldrb	r2, [r2, r1]
   2e418:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e41a:	4a35      	ldr	r2, [pc, #212]	; (2e4f0 <chk_mounted+0x5cc>)
   2e41c:	4293      	cmp	r3, r2
   2e41e:	d13f      	bne.n	2e4a0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e422:	4a34      	ldr	r2, [pc, #208]	; (2e4f4 <chk_mounted+0x5d0>)
   2e424:	5c9b      	ldrb	r3, [r3, r2]
   2e426:	061a      	lsls	r2, r3, #24
   2e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e42a:	4933      	ldr	r1, [pc, #204]	; (2e4f8 <chk_mounted+0x5d4>)
   2e42c:	5c5b      	ldrb	r3, [r3, r1]
   2e42e:	041b      	lsls	r3, r3, #16
   2e430:	4313      	orrs	r3, r2
   2e432:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e434:	4931      	ldr	r1, [pc, #196]	; (2e4fc <chk_mounted+0x5d8>)
   2e436:	5c52      	ldrb	r2, [r2, r1]
   2e438:	0212      	lsls	r2, r2, #8
   2e43a:	4313      	orrs	r3, r2
   2e43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e43e:	2285      	movs	r2, #133	; 0x85
   2e440:	0092      	lsls	r2, r2, #2
   2e442:	5c8a      	ldrb	r2, [r1, r2]
   2e444:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e446:	4a2e      	ldr	r2, [pc, #184]	; (2e500 <chk_mounted+0x5dc>)
   2e448:	4293      	cmp	r3, r2
   2e44a:	d129      	bne.n	2e4a0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e44e:	4a2d      	ldr	r2, [pc, #180]	; (2e504 <chk_mounted+0x5e0>)
   2e450:	5c9b      	ldrb	r3, [r3, r2]
   2e452:	061a      	lsls	r2, r3, #24
   2e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e456:	492c      	ldr	r1, [pc, #176]	; (2e508 <chk_mounted+0x5e4>)
   2e458:	5c5b      	ldrb	r3, [r3, r1]
   2e45a:	041b      	lsls	r3, r3, #16
   2e45c:	4313      	orrs	r3, r2
   2e45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e460:	492a      	ldr	r1, [pc, #168]	; (2e50c <chk_mounted+0x5e8>)
   2e462:	5c52      	ldrb	r2, [r2, r1]
   2e464:	0212      	lsls	r2, r2, #8
   2e466:	4313      	orrs	r3, r2
   2e468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e46a:	2287      	movs	r2, #135	; 0x87
   2e46c:	0092      	lsls	r2, r2, #2
   2e46e:	5c8a      	ldrb	r2, [r1, r2]
   2e470:	431a      	orrs	r2, r3
   2e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e474:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e478:	4a25      	ldr	r2, [pc, #148]	; (2e510 <chk_mounted+0x5ec>)
   2e47a:	5c9b      	ldrb	r3, [r3, r2]
   2e47c:	061a      	lsls	r2, r3, #24
   2e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e480:	4924      	ldr	r1, [pc, #144]	; (2e514 <chk_mounted+0x5f0>)
   2e482:	5c5b      	ldrb	r3, [r3, r1]
   2e484:	041b      	lsls	r3, r3, #16
   2e486:	4313      	orrs	r3, r2
   2e488:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e48a:	4923      	ldr	r1, [pc, #140]	; (2e518 <chk_mounted+0x5f4>)
   2e48c:	5c52      	ldrb	r2, [r2, r1]
   2e48e:	0212      	lsls	r2, r2, #8
   2e490:	4313      	orrs	r3, r2
   2e492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e494:	2286      	movs	r2, #134	; 0x86
   2e496:	0092      	lsls	r2, r2, #2
   2e498:	5c8a      	ldrb	r2, [r1, r2]
   2e49a:	431a      	orrs	r2, r3
   2e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e49e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4a2:	2247      	movs	r2, #71	; 0x47
   2e4a4:	18ba      	adds	r2, r7, r2
   2e4a6:	7812      	ldrb	r2, [r2, #0]
   2e4a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e4aa:	4b1c      	ldr	r3, [pc, #112]	; (2e51c <chk_mounted+0x5f8>)
   2e4ac:	881b      	ldrh	r3, [r3, #0]
   2e4ae:	3301      	adds	r3, #1
   2e4b0:	b29a      	uxth	r2, r3
   2e4b2:	4b1a      	ldr	r3, [pc, #104]	; (2e51c <chk_mounted+0x5f8>)
   2e4b4:	801a      	strh	r2, [r3, #0]
   2e4b6:	4b19      	ldr	r3, [pc, #100]	; (2e51c <chk_mounted+0x5f8>)
   2e4b8:	881a      	ldrh	r2, [r3, #0]
   2e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4bc:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4c0:	2200      	movs	r2, #0
   2e4c2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4c6:	2200      	movs	r2, #0
   2e4c8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e4ca:	2300      	movs	r3, #0
}
   2e4cc:	0018      	movs	r0, r3
   2e4ce:	46bd      	mov	sp, r7
   2e4d0:	b013      	add	sp, #76	; 0x4c
   2e4d2:	bd90      	pop	{r4, r7, pc}
   2e4d4:	00000ff5 	.word	0x00000ff5
   2e4d8:	0000fff5 	.word	0x0000fff5
   2e4dc:	000001ff 	.word	0x000001ff
   2e4e0:	0002c0b9 	.word	0x0002c0b9
   2e4e4:	0000022f 	.word	0x0000022f
   2e4e8:	0000022e 	.word	0x0000022e
   2e4ec:	ffffaa55 	.word	0xffffaa55
   2e4f0:	41615252 	.word	0x41615252
   2e4f4:	00000217 	.word	0x00000217
   2e4f8:	00000216 	.word	0x00000216
   2e4fc:	00000215 	.word	0x00000215
   2e500:	61417272 	.word	0x61417272
   2e504:	0000021f 	.word	0x0000021f
   2e508:	0000021e 	.word	0x0000021e
   2e50c:	0000021d 	.word	0x0000021d
   2e510:	0000021b 	.word	0x0000021b
   2e514:	0000021a 	.word	0x0000021a
   2e518:	00000219 	.word	0x00000219
   2e51c:	20004310 	.word	0x20004310

0002e520 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e520:	b580      	push	{r7, lr}
   2e522:	b082      	sub	sp, #8
   2e524:	af00      	add	r7, sp, #0
   2e526:	6078      	str	r0, [r7, #4]
   2e528:	000a      	movs	r2, r1
   2e52a:	1cbb      	adds	r3, r7, #2
   2e52c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e52e:	687b      	ldr	r3, [r7, #4]
   2e530:	2b00      	cmp	r3, #0
   2e532:	d009      	beq.n	2e548 <validate+0x28>
   2e534:	687b      	ldr	r3, [r7, #4]
   2e536:	781b      	ldrb	r3, [r3, #0]
   2e538:	2b00      	cmp	r3, #0
   2e53a:	d005      	beq.n	2e548 <validate+0x28>
   2e53c:	687b      	ldr	r3, [r7, #4]
   2e53e:	88db      	ldrh	r3, [r3, #6]
   2e540:	1cba      	adds	r2, r7, #2
   2e542:	8812      	ldrh	r2, [r2, #0]
   2e544:	429a      	cmp	r2, r3
   2e546:	d001      	beq.n	2e54c <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e548:	2309      	movs	r3, #9
   2e54a:	e00c      	b.n	2e566 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e54c:	687b      	ldr	r3, [r7, #4]
   2e54e:	785b      	ldrb	r3, [r3, #1]
   2e550:	0018      	movs	r0, r3
   2e552:	4b07      	ldr	r3, [pc, #28]	; (2e570 <validate+0x50>)
   2e554:	4798      	blx	r3
   2e556:	0003      	movs	r3, r0
   2e558:	001a      	movs	r2, r3
   2e55a:	2301      	movs	r3, #1
   2e55c:	4013      	ands	r3, r2
   2e55e:	d001      	beq.n	2e564 <validate+0x44>
		return FR_NOT_READY;
   2e560:	2303      	movs	r3, #3
   2e562:	e000      	b.n	2e566 <validate+0x46>

	return FR_OK;
   2e564:	2300      	movs	r3, #0
}
   2e566:	0018      	movs	r0, r3
   2e568:	46bd      	mov	sp, r7
   2e56a:	b002      	add	sp, #8
   2e56c:	bd80      	pop	{r7, pc}
   2e56e:	46c0      	nop			; (mov r8, r8)
   2e570:	0002c081 	.word	0x0002c081

0002e574 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e574:	b580      	push	{r7, lr}
   2e576:	b084      	sub	sp, #16
   2e578:	af00      	add	r7, sp, #0
   2e57a:	0002      	movs	r2, r0
   2e57c:	6039      	str	r1, [r7, #0]
   2e57e:	1dfb      	adds	r3, r7, #7
   2e580:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e582:	1dfb      	adds	r3, r7, #7
   2e584:	781b      	ldrb	r3, [r3, #0]
   2e586:	2b07      	cmp	r3, #7
   2e588:	d901      	bls.n	2e58e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e58a:	230b      	movs	r3, #11
   2e58c:	e018      	b.n	2e5c0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e58e:	1dfb      	adds	r3, r7, #7
   2e590:	781a      	ldrb	r2, [r3, #0]
   2e592:	4b0d      	ldr	r3, [pc, #52]	; (2e5c8 <f_mount+0x54>)
   2e594:	0092      	lsls	r2, r2, #2
   2e596:	58d3      	ldr	r3, [r2, r3]
   2e598:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e59a:	68fb      	ldr	r3, [r7, #12]
   2e59c:	2b00      	cmp	r3, #0
   2e59e:	d002      	beq.n	2e5a6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e5a0:	68fb      	ldr	r3, [r7, #12]
   2e5a2:	2200      	movs	r2, #0
   2e5a4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e5a6:	683b      	ldr	r3, [r7, #0]
   2e5a8:	2b00      	cmp	r3, #0
   2e5aa:	d002      	beq.n	2e5b2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e5ac:	683b      	ldr	r3, [r7, #0]
   2e5ae:	2200      	movs	r2, #0
   2e5b0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e5b2:	1dfb      	adds	r3, r7, #7
   2e5b4:	781a      	ldrb	r2, [r3, #0]
   2e5b6:	4b04      	ldr	r3, [pc, #16]	; (2e5c8 <f_mount+0x54>)
   2e5b8:	0092      	lsls	r2, r2, #2
   2e5ba:	6839      	ldr	r1, [r7, #0]
   2e5bc:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e5be:	2300      	movs	r3, #0
}
   2e5c0:	0018      	movs	r0, r3
   2e5c2:	46bd      	mov	sp, r7
   2e5c4:	b004      	add	sp, #16
   2e5c6:	bd80      	pop	{r7, pc}
   2e5c8:	200042f0 	.word	0x200042f0

0002e5cc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e5cc:	b590      	push	{r4, r7, lr}
   2e5ce:	4ce5      	ldr	r4, [pc, #916]	; (2e964 <f_open+0x398>)
   2e5d0:	44a5      	add	sp, r4
   2e5d2:	af00      	add	r7, sp, #0
   2e5d4:	60f8      	str	r0, [r7, #12]
   2e5d6:	60b9      	str	r1, [r7, #8]
   2e5d8:	4be3      	ldr	r3, [pc, #908]	; (2e968 <f_open+0x39c>)
   2e5da:	2194      	movs	r1, #148	; 0x94
   2e5dc:	0089      	lsls	r1, r1, #2
   2e5de:	468c      	mov	ip, r1
   2e5e0:	44bc      	add	ip, r7
   2e5e2:	4463      	add	r3, ip
   2e5e4:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e5e6:	68fb      	ldr	r3, [r7, #12]
   2e5e8:	2200      	movs	r2, #0
   2e5ea:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e5ec:	4bde      	ldr	r3, [pc, #888]	; (2e968 <f_open+0x39c>)
   2e5ee:	2294      	movs	r2, #148	; 0x94
   2e5f0:	0092      	lsls	r2, r2, #2
   2e5f2:	4694      	mov	ip, r2
   2e5f4:	44bc      	add	ip, r7
   2e5f6:	4463      	add	r3, ip
   2e5f8:	4adb      	ldr	r2, [pc, #876]	; (2e968 <f_open+0x39c>)
   2e5fa:	2194      	movs	r1, #148	; 0x94
   2e5fc:	0089      	lsls	r1, r1, #2
   2e5fe:	468c      	mov	ip, r1
   2e600:	44bc      	add	ip, r7
   2e602:	4462      	add	r2, ip
   2e604:	7812      	ldrb	r2, [r2, #0]
   2e606:	211f      	movs	r1, #31
   2e608:	400a      	ands	r2, r1
   2e60a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e60c:	4bd6      	ldr	r3, [pc, #856]	; (2e968 <f_open+0x39c>)
   2e60e:	2294      	movs	r2, #148	; 0x94
   2e610:	0092      	lsls	r2, r2, #2
   2e612:	4694      	mov	ip, r2
   2e614:	44bc      	add	ip, r7
   2e616:	4463      	add	r3, ip
   2e618:	781b      	ldrb	r3, [r3, #0]
   2e61a:	2201      	movs	r2, #1
   2e61c:	4393      	bics	r3, r2
   2e61e:	b2da      	uxtb	r2, r3
   2e620:	4bd2      	ldr	r3, [pc, #840]	; (2e96c <f_open+0x3a0>)
   2e622:	18fc      	adds	r4, r7, r3
   2e624:	2387      	movs	r3, #135	; 0x87
   2e626:	009b      	lsls	r3, r3, #2
   2e628:	18f9      	adds	r1, r7, r3
   2e62a:	2308      	movs	r3, #8
   2e62c:	18fb      	adds	r3, r7, r3
   2e62e:	0018      	movs	r0, r3
   2e630:	4bcf      	ldr	r3, [pc, #828]	; (2e970 <f_open+0x3a4>)
   2e632:	4798      	blx	r3
   2e634:	0003      	movs	r3, r0
   2e636:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e638:	2387      	movs	r3, #135	; 0x87
   2e63a:	009b      	lsls	r3, r3, #2
   2e63c:	18fb      	adds	r3, r7, r3
   2e63e:	2284      	movs	r2, #132	; 0x84
   2e640:	0092      	lsls	r2, r2, #2
   2e642:	18ba      	adds	r2, r7, r2
   2e644:	619a      	str	r2, [r3, #24]
   2e646:	2387      	movs	r3, #135	; 0x87
   2e648:	009b      	lsls	r3, r3, #2
   2e64a:	18fb      	adds	r3, r7, r3
   2e64c:	2210      	movs	r2, #16
   2e64e:	18ba      	adds	r2, r7, r2
   2e650:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e652:	4bc6      	ldr	r3, [pc, #792]	; (2e96c <f_open+0x3a0>)
   2e654:	18fb      	adds	r3, r7, r3
   2e656:	781b      	ldrb	r3, [r3, #0]
   2e658:	2b00      	cmp	r3, #0
   2e65a:	d10b      	bne.n	2e674 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e65c:	68ba      	ldr	r2, [r7, #8]
   2e65e:	4bc3      	ldr	r3, [pc, #780]	; (2e96c <f_open+0x3a0>)
   2e660:	18fc      	adds	r4, r7, r3
   2e662:	2387      	movs	r3, #135	; 0x87
   2e664:	009b      	lsls	r3, r3, #2
   2e666:	18fb      	adds	r3, r7, r3
   2e668:	0011      	movs	r1, r2
   2e66a:	0018      	movs	r0, r3
   2e66c:	4bc1      	ldr	r3, [pc, #772]	; (2e974 <f_open+0x3a8>)
   2e66e:	4798      	blx	r3
   2e670:	0003      	movs	r3, r0
   2e672:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e674:	2387      	movs	r3, #135	; 0x87
   2e676:	009b      	lsls	r3, r3, #2
   2e678:	18fb      	adds	r3, r7, r3
   2e67a:	695b      	ldr	r3, [r3, #20]
   2e67c:	2292      	movs	r2, #146	; 0x92
   2e67e:	0092      	lsls	r2, r2, #2
   2e680:	18ba      	adds	r2, r7, r2
   2e682:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e684:	4bb9      	ldr	r3, [pc, #740]	; (2e96c <f_open+0x3a0>)
   2e686:	18fb      	adds	r3, r7, r3
   2e688:	781b      	ldrb	r3, [r3, #0]
   2e68a:	2b00      	cmp	r3, #0
   2e68c:	d109      	bne.n	2e6a2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e68e:	2392      	movs	r3, #146	; 0x92
   2e690:	009b      	lsls	r3, r3, #2
   2e692:	18fb      	adds	r3, r7, r3
   2e694:	681b      	ldr	r3, [r3, #0]
   2e696:	2b00      	cmp	r3, #0
   2e698:	d103      	bne.n	2e6a2 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e69a:	4bb4      	ldr	r3, [pc, #720]	; (2e96c <f_open+0x3a0>)
   2e69c:	18fb      	adds	r3, r7, r3
   2e69e:	2206      	movs	r2, #6
   2e6a0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e6a2:	4bb1      	ldr	r3, [pc, #708]	; (2e968 <f_open+0x39c>)
   2e6a4:	2294      	movs	r2, #148	; 0x94
   2e6a6:	0092      	lsls	r2, r2, #2
   2e6a8:	4694      	mov	ip, r2
   2e6aa:	44bc      	add	ip, r7
   2e6ac:	4463      	add	r3, ip
   2e6ae:	781b      	ldrb	r3, [r3, #0]
   2e6b0:	221c      	movs	r2, #28
   2e6b2:	4013      	ands	r3, r2
   2e6b4:	d100      	bne.n	2e6b8 <f_open+0xec>
   2e6b6:	e141      	b.n	2e93c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e6b8:	4bac      	ldr	r3, [pc, #688]	; (2e96c <f_open+0x3a0>)
   2e6ba:	18fb      	adds	r3, r7, r3
   2e6bc:	781b      	ldrb	r3, [r3, #0]
   2e6be:	2b00      	cmp	r3, #0
   2e6c0:	d027      	beq.n	2e712 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e6c2:	4baa      	ldr	r3, [pc, #680]	; (2e96c <f_open+0x3a0>)
   2e6c4:	18fb      	adds	r3, r7, r3
   2e6c6:	781b      	ldrb	r3, [r3, #0]
   2e6c8:	2b04      	cmp	r3, #4
   2e6ca:	d109      	bne.n	2e6e0 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e6cc:	4ba7      	ldr	r3, [pc, #668]	; (2e96c <f_open+0x3a0>)
   2e6ce:	18fc      	adds	r4, r7, r3
   2e6d0:	2387      	movs	r3, #135	; 0x87
   2e6d2:	009b      	lsls	r3, r3, #2
   2e6d4:	18fb      	adds	r3, r7, r3
   2e6d6:	0018      	movs	r0, r3
   2e6d8:	4ba7      	ldr	r3, [pc, #668]	; (2e978 <f_open+0x3ac>)
   2e6da:	4798      	blx	r3
   2e6dc:	0003      	movs	r3, r0
   2e6de:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e6e0:	4ba1      	ldr	r3, [pc, #644]	; (2e968 <f_open+0x39c>)
   2e6e2:	2294      	movs	r2, #148	; 0x94
   2e6e4:	0092      	lsls	r2, r2, #2
   2e6e6:	4694      	mov	ip, r2
   2e6e8:	44bc      	add	ip, r7
   2e6ea:	4463      	add	r3, ip
   2e6ec:	4a9e      	ldr	r2, [pc, #632]	; (2e968 <f_open+0x39c>)
   2e6ee:	2194      	movs	r1, #148	; 0x94
   2e6f0:	0089      	lsls	r1, r1, #2
   2e6f2:	468c      	mov	ip, r1
   2e6f4:	44bc      	add	ip, r7
   2e6f6:	4462      	add	r2, ip
   2e6f8:	7812      	ldrb	r2, [r2, #0]
   2e6fa:	2108      	movs	r1, #8
   2e6fc:	430a      	orrs	r2, r1
   2e6fe:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e700:	2387      	movs	r3, #135	; 0x87
   2e702:	009b      	lsls	r3, r3, #2
   2e704:	18fb      	adds	r3, r7, r3
   2e706:	695b      	ldr	r3, [r3, #20]
   2e708:	2292      	movs	r2, #146	; 0x92
   2e70a:	0092      	lsls	r2, r2, #2
   2e70c:	18ba      	adds	r2, r7, r2
   2e70e:	6013      	str	r3, [r2, #0]
   2e710:	e01c      	b.n	2e74c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e712:	2392      	movs	r3, #146	; 0x92
   2e714:	009b      	lsls	r3, r3, #2
   2e716:	18fb      	adds	r3, r7, r3
   2e718:	681b      	ldr	r3, [r3, #0]
   2e71a:	330b      	adds	r3, #11
   2e71c:	781b      	ldrb	r3, [r3, #0]
   2e71e:	001a      	movs	r2, r3
   2e720:	2311      	movs	r3, #17
   2e722:	4013      	ands	r3, r2
   2e724:	d004      	beq.n	2e730 <f_open+0x164>
				res = FR_DENIED;
   2e726:	4b91      	ldr	r3, [pc, #580]	; (2e96c <f_open+0x3a0>)
   2e728:	18fb      	adds	r3, r7, r3
   2e72a:	2207      	movs	r2, #7
   2e72c:	701a      	strb	r2, [r3, #0]
   2e72e:	e00d      	b.n	2e74c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e730:	4b8d      	ldr	r3, [pc, #564]	; (2e968 <f_open+0x39c>)
   2e732:	2294      	movs	r2, #148	; 0x94
   2e734:	0092      	lsls	r2, r2, #2
   2e736:	4694      	mov	ip, r2
   2e738:	44bc      	add	ip, r7
   2e73a:	4463      	add	r3, ip
   2e73c:	781b      	ldrb	r3, [r3, #0]
   2e73e:	2204      	movs	r2, #4
   2e740:	4013      	ands	r3, r2
   2e742:	d003      	beq.n	2e74c <f_open+0x180>
					res = FR_EXIST;
   2e744:	4b89      	ldr	r3, [pc, #548]	; (2e96c <f_open+0x3a0>)
   2e746:	18fb      	adds	r3, r7, r3
   2e748:	2208      	movs	r2, #8
   2e74a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e74c:	4b87      	ldr	r3, [pc, #540]	; (2e96c <f_open+0x3a0>)
   2e74e:	18fb      	adds	r3, r7, r3
   2e750:	781b      	ldrb	r3, [r3, #0]
   2e752:	2b00      	cmp	r3, #0
   2e754:	d000      	beq.n	2e758 <f_open+0x18c>
   2e756:	e12f      	b.n	2e9b8 <f_open+0x3ec>
   2e758:	4b83      	ldr	r3, [pc, #524]	; (2e968 <f_open+0x39c>)
   2e75a:	2294      	movs	r2, #148	; 0x94
   2e75c:	0092      	lsls	r2, r2, #2
   2e75e:	4694      	mov	ip, r2
   2e760:	44bc      	add	ip, r7
   2e762:	4463      	add	r3, ip
   2e764:	781b      	ldrb	r3, [r3, #0]
   2e766:	2208      	movs	r2, #8
   2e768:	4013      	ands	r3, r2
   2e76a:	d100      	bne.n	2e76e <f_open+0x1a2>
   2e76c:	e124      	b.n	2e9b8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e76e:	4b83      	ldr	r3, [pc, #524]	; (2e97c <f_open+0x3b0>)
   2e770:	4798      	blx	r3
   2e772:	0003      	movs	r3, r0
   2e774:	2291      	movs	r2, #145	; 0x91
   2e776:	0092      	lsls	r2, r2, #2
   2e778:	18ba      	adds	r2, r7, r2
   2e77a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e77c:	2392      	movs	r3, #146	; 0x92
   2e77e:	009b      	lsls	r3, r3, #2
   2e780:	18fb      	adds	r3, r7, r3
   2e782:	681b      	ldr	r3, [r3, #0]
   2e784:	330e      	adds	r3, #14
   2e786:	2291      	movs	r2, #145	; 0x91
   2e788:	0092      	lsls	r2, r2, #2
   2e78a:	18ba      	adds	r2, r7, r2
   2e78c:	6812      	ldr	r2, [r2, #0]
   2e78e:	b2d2      	uxtb	r2, r2
   2e790:	701a      	strb	r2, [r3, #0]
   2e792:	2392      	movs	r3, #146	; 0x92
   2e794:	009b      	lsls	r3, r3, #2
   2e796:	18fb      	adds	r3, r7, r3
   2e798:	681b      	ldr	r3, [r3, #0]
   2e79a:	330f      	adds	r3, #15
   2e79c:	2291      	movs	r2, #145	; 0x91
   2e79e:	0092      	lsls	r2, r2, #2
   2e7a0:	18ba      	adds	r2, r7, r2
   2e7a2:	6812      	ldr	r2, [r2, #0]
   2e7a4:	b292      	uxth	r2, r2
   2e7a6:	0a12      	lsrs	r2, r2, #8
   2e7a8:	b292      	uxth	r2, r2
   2e7aa:	b2d2      	uxtb	r2, r2
   2e7ac:	701a      	strb	r2, [r3, #0]
   2e7ae:	2392      	movs	r3, #146	; 0x92
   2e7b0:	009b      	lsls	r3, r3, #2
   2e7b2:	18fb      	adds	r3, r7, r3
   2e7b4:	681b      	ldr	r3, [r3, #0]
   2e7b6:	3310      	adds	r3, #16
   2e7b8:	2291      	movs	r2, #145	; 0x91
   2e7ba:	0092      	lsls	r2, r2, #2
   2e7bc:	18ba      	adds	r2, r7, r2
   2e7be:	6812      	ldr	r2, [r2, #0]
   2e7c0:	0c12      	lsrs	r2, r2, #16
   2e7c2:	b2d2      	uxtb	r2, r2
   2e7c4:	701a      	strb	r2, [r3, #0]
   2e7c6:	2392      	movs	r3, #146	; 0x92
   2e7c8:	009b      	lsls	r3, r3, #2
   2e7ca:	18fb      	adds	r3, r7, r3
   2e7cc:	681b      	ldr	r3, [r3, #0]
   2e7ce:	3311      	adds	r3, #17
   2e7d0:	2291      	movs	r2, #145	; 0x91
   2e7d2:	0092      	lsls	r2, r2, #2
   2e7d4:	18ba      	adds	r2, r7, r2
   2e7d6:	6812      	ldr	r2, [r2, #0]
   2e7d8:	0e12      	lsrs	r2, r2, #24
   2e7da:	b2d2      	uxtb	r2, r2
   2e7dc:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e7de:	2392      	movs	r3, #146	; 0x92
   2e7e0:	009b      	lsls	r3, r3, #2
   2e7e2:	18fb      	adds	r3, r7, r3
   2e7e4:	681b      	ldr	r3, [r3, #0]
   2e7e6:	330b      	adds	r3, #11
   2e7e8:	2200      	movs	r2, #0
   2e7ea:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e7ec:	2392      	movs	r3, #146	; 0x92
   2e7ee:	009b      	lsls	r3, r3, #2
   2e7f0:	18fb      	adds	r3, r7, r3
   2e7f2:	681b      	ldr	r3, [r3, #0]
   2e7f4:	331c      	adds	r3, #28
   2e7f6:	2200      	movs	r2, #0
   2e7f8:	701a      	strb	r2, [r3, #0]
   2e7fa:	2392      	movs	r3, #146	; 0x92
   2e7fc:	009b      	lsls	r3, r3, #2
   2e7fe:	18fb      	adds	r3, r7, r3
   2e800:	681b      	ldr	r3, [r3, #0]
   2e802:	331d      	adds	r3, #29
   2e804:	2200      	movs	r2, #0
   2e806:	701a      	strb	r2, [r3, #0]
   2e808:	2392      	movs	r3, #146	; 0x92
   2e80a:	009b      	lsls	r3, r3, #2
   2e80c:	18fb      	adds	r3, r7, r3
   2e80e:	681b      	ldr	r3, [r3, #0]
   2e810:	331e      	adds	r3, #30
   2e812:	2200      	movs	r2, #0
   2e814:	701a      	strb	r2, [r3, #0]
   2e816:	2392      	movs	r3, #146	; 0x92
   2e818:	009b      	lsls	r3, r3, #2
   2e81a:	18fb      	adds	r3, r7, r3
   2e81c:	681b      	ldr	r3, [r3, #0]
   2e81e:	331f      	adds	r3, #31
   2e820:	2200      	movs	r2, #0
   2e822:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e824:	2392      	movs	r3, #146	; 0x92
   2e826:	009b      	lsls	r3, r3, #2
   2e828:	18fb      	adds	r3, r7, r3
   2e82a:	681b      	ldr	r3, [r3, #0]
   2e82c:	3315      	adds	r3, #21
   2e82e:	781b      	ldrb	r3, [r3, #0]
   2e830:	021b      	lsls	r3, r3, #8
   2e832:	b21a      	sxth	r2, r3
   2e834:	2392      	movs	r3, #146	; 0x92
   2e836:	009b      	lsls	r3, r3, #2
   2e838:	18fb      	adds	r3, r7, r3
   2e83a:	681b      	ldr	r3, [r3, #0]
   2e83c:	3314      	adds	r3, #20
   2e83e:	781b      	ldrb	r3, [r3, #0]
   2e840:	b21b      	sxth	r3, r3
   2e842:	4313      	orrs	r3, r2
   2e844:	b21b      	sxth	r3, r3
   2e846:	b29b      	uxth	r3, r3
   2e848:	041b      	lsls	r3, r3, #16
   2e84a:	2292      	movs	r2, #146	; 0x92
   2e84c:	0092      	lsls	r2, r2, #2
   2e84e:	18ba      	adds	r2, r7, r2
   2e850:	6812      	ldr	r2, [r2, #0]
   2e852:	321b      	adds	r2, #27
   2e854:	7812      	ldrb	r2, [r2, #0]
   2e856:	0212      	lsls	r2, r2, #8
   2e858:	b211      	sxth	r1, r2
   2e85a:	2292      	movs	r2, #146	; 0x92
   2e85c:	0092      	lsls	r2, r2, #2
   2e85e:	18ba      	adds	r2, r7, r2
   2e860:	6812      	ldr	r2, [r2, #0]
   2e862:	321a      	adds	r2, #26
   2e864:	7812      	ldrb	r2, [r2, #0]
   2e866:	b212      	sxth	r2, r2
   2e868:	430a      	orrs	r2, r1
   2e86a:	b212      	sxth	r2, r2
   2e86c:	b292      	uxth	r2, r2
   2e86e:	4313      	orrs	r3, r2
   2e870:	2290      	movs	r2, #144	; 0x90
   2e872:	0092      	lsls	r2, r2, #2
   2e874:	18ba      	adds	r2, r7, r2
   2e876:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e878:	2392      	movs	r3, #146	; 0x92
   2e87a:	009b      	lsls	r3, r3, #2
   2e87c:	18fb      	adds	r3, r7, r3
   2e87e:	681b      	ldr	r3, [r3, #0]
   2e880:	331a      	adds	r3, #26
   2e882:	2200      	movs	r2, #0
   2e884:	701a      	strb	r2, [r3, #0]
   2e886:	2392      	movs	r3, #146	; 0x92
   2e888:	009b      	lsls	r3, r3, #2
   2e88a:	18fb      	adds	r3, r7, r3
   2e88c:	681b      	ldr	r3, [r3, #0]
   2e88e:	331b      	adds	r3, #27
   2e890:	2200      	movs	r2, #0
   2e892:	701a      	strb	r2, [r3, #0]
   2e894:	2392      	movs	r3, #146	; 0x92
   2e896:	009b      	lsls	r3, r3, #2
   2e898:	18fb      	adds	r3, r7, r3
   2e89a:	681b      	ldr	r3, [r3, #0]
   2e89c:	3314      	adds	r3, #20
   2e89e:	2200      	movs	r2, #0
   2e8a0:	701a      	strb	r2, [r3, #0]
   2e8a2:	2392      	movs	r3, #146	; 0x92
   2e8a4:	009b      	lsls	r3, r3, #2
   2e8a6:	18fb      	adds	r3, r7, r3
   2e8a8:	681b      	ldr	r3, [r3, #0]
   2e8aa:	3315      	adds	r3, #21
   2e8ac:	2200      	movs	r2, #0
   2e8ae:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e8b0:	2387      	movs	r3, #135	; 0x87
   2e8b2:	009b      	lsls	r3, r3, #2
   2e8b4:	18fb      	adds	r3, r7, r3
   2e8b6:	681b      	ldr	r3, [r3, #0]
   2e8b8:	2201      	movs	r2, #1
   2e8ba:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e8bc:	2390      	movs	r3, #144	; 0x90
   2e8be:	009b      	lsls	r3, r3, #2
   2e8c0:	18fb      	adds	r3, r7, r3
   2e8c2:	681b      	ldr	r3, [r3, #0]
   2e8c4:	2b00      	cmp	r3, #0
   2e8c6:	d100      	bne.n	2e8ca <f_open+0x2fe>
   2e8c8:	e076      	b.n	2e9b8 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e8ca:	2387      	movs	r3, #135	; 0x87
   2e8cc:	009b      	lsls	r3, r3, #2
   2e8ce:	18fb      	adds	r3, r7, r3
   2e8d0:	681b      	ldr	r3, [r3, #0]
   2e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e8d4:	2291      	movs	r2, #145	; 0x91
   2e8d6:	0092      	lsls	r2, r2, #2
   2e8d8:	18ba      	adds	r2, r7, r2
   2e8da:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e8dc:	2387      	movs	r3, #135	; 0x87
   2e8de:	009b      	lsls	r3, r3, #2
   2e8e0:	18fb      	adds	r3, r7, r3
   2e8e2:	681b      	ldr	r3, [r3, #0]
   2e8e4:	4a21      	ldr	r2, [pc, #132]	; (2e96c <f_open+0x3a0>)
   2e8e6:	18bc      	adds	r4, r7, r2
   2e8e8:	2290      	movs	r2, #144	; 0x90
   2e8ea:	0092      	lsls	r2, r2, #2
   2e8ec:	18ba      	adds	r2, r7, r2
   2e8ee:	6812      	ldr	r2, [r2, #0]
   2e8f0:	0011      	movs	r1, r2
   2e8f2:	0018      	movs	r0, r3
   2e8f4:	4b22      	ldr	r3, [pc, #136]	; (2e980 <f_open+0x3b4>)
   2e8f6:	4798      	blx	r3
   2e8f8:	0003      	movs	r3, r0
   2e8fa:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e8fc:	4b1b      	ldr	r3, [pc, #108]	; (2e96c <f_open+0x3a0>)
   2e8fe:	18fb      	adds	r3, r7, r3
   2e900:	781b      	ldrb	r3, [r3, #0]
   2e902:	2b00      	cmp	r3, #0
   2e904:	d158      	bne.n	2e9b8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e906:	2387      	movs	r3, #135	; 0x87
   2e908:	009b      	lsls	r3, r3, #2
   2e90a:	18fb      	adds	r3, r7, r3
   2e90c:	681b      	ldr	r3, [r3, #0]
   2e90e:	2290      	movs	r2, #144	; 0x90
   2e910:	0092      	lsls	r2, r2, #2
   2e912:	18ba      	adds	r2, r7, r2
   2e914:	6812      	ldr	r2, [r2, #0]
   2e916:	3a01      	subs	r2, #1
   2e918:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e91a:	2387      	movs	r3, #135	; 0x87
   2e91c:	009b      	lsls	r3, r3, #2
   2e91e:	18fb      	adds	r3, r7, r3
   2e920:	681b      	ldr	r3, [r3, #0]
   2e922:	4a12      	ldr	r2, [pc, #72]	; (2e96c <f_open+0x3a0>)
   2e924:	18bc      	adds	r4, r7, r2
   2e926:	2291      	movs	r2, #145	; 0x91
   2e928:	0092      	lsls	r2, r2, #2
   2e92a:	18ba      	adds	r2, r7, r2
   2e92c:	6812      	ldr	r2, [r2, #0]
   2e92e:	0011      	movs	r1, r2
   2e930:	0018      	movs	r0, r3
   2e932:	4b14      	ldr	r3, [pc, #80]	; (2e984 <f_open+0x3b8>)
   2e934:	4798      	blx	r3
   2e936:	0003      	movs	r3, r0
   2e938:	7023      	strb	r3, [r4, #0]
   2e93a:	e03d      	b.n	2e9b8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e93c:	4b0b      	ldr	r3, [pc, #44]	; (2e96c <f_open+0x3a0>)
   2e93e:	18fb      	adds	r3, r7, r3
   2e940:	781b      	ldrb	r3, [r3, #0]
   2e942:	2b00      	cmp	r3, #0
   2e944:	d138      	bne.n	2e9b8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e946:	2392      	movs	r3, #146	; 0x92
   2e948:	009b      	lsls	r3, r3, #2
   2e94a:	18fb      	adds	r3, r7, r3
   2e94c:	681b      	ldr	r3, [r3, #0]
   2e94e:	330b      	adds	r3, #11
   2e950:	781b      	ldrb	r3, [r3, #0]
   2e952:	001a      	movs	r2, r3
   2e954:	2310      	movs	r3, #16
   2e956:	4013      	ands	r3, r2
   2e958:	d016      	beq.n	2e988 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e95a:	4b04      	ldr	r3, [pc, #16]	; (2e96c <f_open+0x3a0>)
   2e95c:	18fb      	adds	r3, r7, r3
   2e95e:	2204      	movs	r2, #4
   2e960:	701a      	strb	r2, [r3, #0]
   2e962:	e029      	b.n	2e9b8 <f_open+0x3ec>
   2e964:	fffffdac 	.word	0xfffffdac
   2e968:	fffffdb7 	.word	0xfffffdb7
   2e96c:	0000024f 	.word	0x0000024f
   2e970:	0002df25 	.word	0x0002df25
   2e974:	0002dd19 	.word	0x0002dd19
   2e978:	0002d569 	.word	0x0002d569
   2e97c:	0002c361 	.word	0x0002c361
   2e980:	0002cae5 	.word	0x0002cae5
   2e984:	0002c4a5 	.word	0x0002c4a5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e988:	4b5a      	ldr	r3, [pc, #360]	; (2eaf4 <f_open+0x528>)
   2e98a:	2294      	movs	r2, #148	; 0x94
   2e98c:	0092      	lsls	r2, r2, #2
   2e98e:	4694      	mov	ip, r2
   2e990:	44bc      	add	ip, r7
   2e992:	4463      	add	r3, ip
   2e994:	781b      	ldrb	r3, [r3, #0]
   2e996:	2202      	movs	r2, #2
   2e998:	4013      	ands	r3, r2
   2e99a:	d00d      	beq.n	2e9b8 <f_open+0x3ec>
   2e99c:	2392      	movs	r3, #146	; 0x92
   2e99e:	009b      	lsls	r3, r3, #2
   2e9a0:	18fb      	adds	r3, r7, r3
   2e9a2:	681b      	ldr	r3, [r3, #0]
   2e9a4:	330b      	adds	r3, #11
   2e9a6:	781b      	ldrb	r3, [r3, #0]
   2e9a8:	001a      	movs	r2, r3
   2e9aa:	2301      	movs	r3, #1
   2e9ac:	4013      	ands	r3, r2
   2e9ae:	d003      	beq.n	2e9b8 <f_open+0x3ec>
					res = FR_DENIED;
   2e9b0:	4b51      	ldr	r3, [pc, #324]	; (2eaf8 <f_open+0x52c>)
   2e9b2:	18fb      	adds	r3, r7, r3
   2e9b4:	2207      	movs	r2, #7
   2e9b6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e9b8:	4b4f      	ldr	r3, [pc, #316]	; (2eaf8 <f_open+0x52c>)
   2e9ba:	18fb      	adds	r3, r7, r3
   2e9bc:	781b      	ldrb	r3, [r3, #0]
   2e9be:	2b00      	cmp	r3, #0
   2e9c0:	d126      	bne.n	2ea10 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e9c2:	4b4c      	ldr	r3, [pc, #304]	; (2eaf4 <f_open+0x528>)
   2e9c4:	2294      	movs	r2, #148	; 0x94
   2e9c6:	0092      	lsls	r2, r2, #2
   2e9c8:	4694      	mov	ip, r2
   2e9ca:	44bc      	add	ip, r7
   2e9cc:	4463      	add	r3, ip
   2e9ce:	781b      	ldrb	r3, [r3, #0]
   2e9d0:	2208      	movs	r2, #8
   2e9d2:	4013      	ands	r3, r2
   2e9d4:	d00f      	beq.n	2e9f6 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e9d6:	4b47      	ldr	r3, [pc, #284]	; (2eaf4 <f_open+0x528>)
   2e9d8:	2294      	movs	r2, #148	; 0x94
   2e9da:	0092      	lsls	r2, r2, #2
   2e9dc:	4694      	mov	ip, r2
   2e9de:	44bc      	add	ip, r7
   2e9e0:	4463      	add	r3, ip
   2e9e2:	4a44      	ldr	r2, [pc, #272]	; (2eaf4 <f_open+0x528>)
   2e9e4:	2194      	movs	r1, #148	; 0x94
   2e9e6:	0089      	lsls	r1, r1, #2
   2e9e8:	468c      	mov	ip, r1
   2e9ea:	44bc      	add	ip, r7
   2e9ec:	4462      	add	r2, ip
   2e9ee:	7812      	ldrb	r2, [r2, #0]
   2e9f0:	2120      	movs	r1, #32
   2e9f2:	430a      	orrs	r2, r1
   2e9f4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e9f6:	2387      	movs	r3, #135	; 0x87
   2e9f8:	009b      	lsls	r3, r3, #2
   2e9fa:	18fb      	adds	r3, r7, r3
   2e9fc:	681b      	ldr	r3, [r3, #0]
   2e9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ea00:	68fb      	ldr	r3, [r7, #12]
   2ea02:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ea04:	68fb      	ldr	r3, [r7, #12]
   2ea06:	2292      	movs	r2, #146	; 0x92
   2ea08:	0092      	lsls	r2, r2, #2
   2ea0a:	18ba      	adds	r2, r7, r2
   2ea0c:	6812      	ldr	r2, [r2, #0]
   2ea0e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ea10:	4b39      	ldr	r3, [pc, #228]	; (2eaf8 <f_open+0x52c>)
   2ea12:	18fb      	adds	r3, r7, r3
   2ea14:	781b      	ldrb	r3, [r3, #0]
   2ea16:	2b00      	cmp	r3, #0
   2ea18:	d163      	bne.n	2eae2 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ea1a:	68fb      	ldr	r3, [r7, #12]
   2ea1c:	4a35      	ldr	r2, [pc, #212]	; (2eaf4 <f_open+0x528>)
   2ea1e:	2194      	movs	r1, #148	; 0x94
   2ea20:	0089      	lsls	r1, r1, #2
   2ea22:	468c      	mov	ip, r1
   2ea24:	44bc      	add	ip, r7
   2ea26:	4462      	add	r2, ip
   2ea28:	7812      	ldrb	r2, [r2, #0]
   2ea2a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ea2c:	2392      	movs	r3, #146	; 0x92
   2ea2e:	009b      	lsls	r3, r3, #2
   2ea30:	18fb      	adds	r3, r7, r3
   2ea32:	681b      	ldr	r3, [r3, #0]
   2ea34:	3315      	adds	r3, #21
   2ea36:	781b      	ldrb	r3, [r3, #0]
   2ea38:	021b      	lsls	r3, r3, #8
   2ea3a:	b21a      	sxth	r2, r3
   2ea3c:	2392      	movs	r3, #146	; 0x92
   2ea3e:	009b      	lsls	r3, r3, #2
   2ea40:	18fb      	adds	r3, r7, r3
   2ea42:	681b      	ldr	r3, [r3, #0]
   2ea44:	3314      	adds	r3, #20
   2ea46:	781b      	ldrb	r3, [r3, #0]
   2ea48:	b21b      	sxth	r3, r3
   2ea4a:	4313      	orrs	r3, r2
   2ea4c:	b21b      	sxth	r3, r3
   2ea4e:	b29b      	uxth	r3, r3
   2ea50:	041b      	lsls	r3, r3, #16
   2ea52:	2292      	movs	r2, #146	; 0x92
   2ea54:	0092      	lsls	r2, r2, #2
   2ea56:	18ba      	adds	r2, r7, r2
   2ea58:	6812      	ldr	r2, [r2, #0]
   2ea5a:	321b      	adds	r2, #27
   2ea5c:	7812      	ldrb	r2, [r2, #0]
   2ea5e:	0212      	lsls	r2, r2, #8
   2ea60:	b211      	sxth	r1, r2
   2ea62:	2292      	movs	r2, #146	; 0x92
   2ea64:	0092      	lsls	r2, r2, #2
   2ea66:	18ba      	adds	r2, r7, r2
   2ea68:	6812      	ldr	r2, [r2, #0]
   2ea6a:	321a      	adds	r2, #26
   2ea6c:	7812      	ldrb	r2, [r2, #0]
   2ea6e:	b212      	sxth	r2, r2
   2ea70:	430a      	orrs	r2, r1
   2ea72:	b212      	sxth	r2, r2
   2ea74:	b292      	uxth	r2, r2
   2ea76:	431a      	orrs	r2, r3
   2ea78:	68fb      	ldr	r3, [r7, #12]
   2ea7a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2ea7c:	2392      	movs	r3, #146	; 0x92
   2ea7e:	009b      	lsls	r3, r3, #2
   2ea80:	18fb      	adds	r3, r7, r3
   2ea82:	681b      	ldr	r3, [r3, #0]
   2ea84:	331f      	adds	r3, #31
   2ea86:	781b      	ldrb	r3, [r3, #0]
   2ea88:	061a      	lsls	r2, r3, #24
   2ea8a:	2392      	movs	r3, #146	; 0x92
   2ea8c:	009b      	lsls	r3, r3, #2
   2ea8e:	18fb      	adds	r3, r7, r3
   2ea90:	681b      	ldr	r3, [r3, #0]
   2ea92:	331e      	adds	r3, #30
   2ea94:	781b      	ldrb	r3, [r3, #0]
   2ea96:	041b      	lsls	r3, r3, #16
   2ea98:	4313      	orrs	r3, r2
   2ea9a:	2292      	movs	r2, #146	; 0x92
   2ea9c:	0092      	lsls	r2, r2, #2
   2ea9e:	18ba      	adds	r2, r7, r2
   2eaa0:	6812      	ldr	r2, [r2, #0]
   2eaa2:	321d      	adds	r2, #29
   2eaa4:	7812      	ldrb	r2, [r2, #0]
   2eaa6:	0212      	lsls	r2, r2, #8
   2eaa8:	4313      	orrs	r3, r2
   2eaaa:	2292      	movs	r2, #146	; 0x92
   2eaac:	0092      	lsls	r2, r2, #2
   2eaae:	18ba      	adds	r2, r7, r2
   2eab0:	6812      	ldr	r2, [r2, #0]
   2eab2:	321c      	adds	r2, #28
   2eab4:	7812      	ldrb	r2, [r2, #0]
   2eab6:	431a      	orrs	r2, r3
   2eab8:	68fb      	ldr	r3, [r7, #12]
   2eaba:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2eabc:	68fb      	ldr	r3, [r7, #12]
   2eabe:	2200      	movs	r2, #0
   2eac0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2eac2:	68fb      	ldr	r3, [r7, #12]
   2eac4:	2200      	movs	r2, #0
   2eac6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2eac8:	2387      	movs	r3, #135	; 0x87
   2eaca:	009b      	lsls	r3, r3, #2
   2eacc:	18fb      	adds	r3, r7, r3
   2eace:	681a      	ldr	r2, [r3, #0]
   2ead0:	68fb      	ldr	r3, [r7, #12]
   2ead2:	601a      	str	r2, [r3, #0]
   2ead4:	2387      	movs	r3, #135	; 0x87
   2ead6:	009b      	lsls	r3, r3, #2
   2ead8:	18fb      	adds	r3, r7, r3
   2eada:	681b      	ldr	r3, [r3, #0]
   2eadc:	88da      	ldrh	r2, [r3, #6]
   2eade:	68fb      	ldr	r3, [r7, #12]
   2eae0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2eae2:	4b05      	ldr	r3, [pc, #20]	; (2eaf8 <f_open+0x52c>)
   2eae4:	18fb      	adds	r3, r7, r3
   2eae6:	781b      	ldrb	r3, [r3, #0]
}
   2eae8:	0018      	movs	r0, r3
   2eaea:	46bd      	mov	sp, r7
   2eaec:	2395      	movs	r3, #149	; 0x95
   2eaee:	009b      	lsls	r3, r3, #2
   2eaf0:	449d      	add	sp, r3
   2eaf2:	bd90      	pop	{r4, r7, pc}
   2eaf4:	fffffdb7 	.word	0xfffffdb7
   2eaf8:	0000024f 	.word	0x0000024f

0002eafc <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2eafc:	b590      	push	{r4, r7, lr}
   2eafe:	b08b      	sub	sp, #44	; 0x2c
   2eb00:	af00      	add	r7, sp, #0
   2eb02:	60f8      	str	r0, [r7, #12]
   2eb04:	60b9      	str	r1, [r7, #8]
   2eb06:	607a      	str	r2, [r7, #4]
   2eb08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2eb0a:	68bb      	ldr	r3, [r7, #8]
   2eb0c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2eb0e:	683b      	ldr	r3, [r7, #0]
   2eb10:	2200      	movs	r2, #0
   2eb12:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2eb14:	68fb      	ldr	r3, [r7, #12]
   2eb16:	681a      	ldr	r2, [r3, #0]
   2eb18:	68fb      	ldr	r3, [r7, #12]
   2eb1a:	889b      	ldrh	r3, [r3, #4]
   2eb1c:	2117      	movs	r1, #23
   2eb1e:	187c      	adds	r4, r7, r1
   2eb20:	0019      	movs	r1, r3
   2eb22:	0010      	movs	r0, r2
   2eb24:	4bc3      	ldr	r3, [pc, #780]	; (2ee34 <f_write+0x338>)
   2eb26:	4798      	blx	r3
   2eb28:	0003      	movs	r3, r0
   2eb2a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2eb2c:	2317      	movs	r3, #23
   2eb2e:	18fb      	adds	r3, r7, r3
   2eb30:	781b      	ldrb	r3, [r3, #0]
   2eb32:	2b00      	cmp	r3, #0
   2eb34:	d003      	beq.n	2eb3e <f_write+0x42>
   2eb36:	2317      	movs	r3, #23
   2eb38:	18fb      	adds	r3, r7, r3
   2eb3a:	781b      	ldrb	r3, [r3, #0]
   2eb3c:	e176      	b.n	2ee2c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2eb3e:	68fb      	ldr	r3, [r7, #12]
   2eb40:	799b      	ldrb	r3, [r3, #6]
   2eb42:	b25b      	sxtb	r3, r3
   2eb44:	2b00      	cmp	r3, #0
   2eb46:	da01      	bge.n	2eb4c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2eb48:	2302      	movs	r3, #2
   2eb4a:	e16f      	b.n	2ee2c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2eb4c:	68fb      	ldr	r3, [r7, #12]
   2eb4e:	799b      	ldrb	r3, [r3, #6]
   2eb50:	001a      	movs	r2, r3
   2eb52:	2302      	movs	r3, #2
   2eb54:	4013      	ands	r3, r2
   2eb56:	d101      	bne.n	2eb5c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2eb58:	2307      	movs	r3, #7
   2eb5a:	e167      	b.n	2ee2c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2eb5c:	68fb      	ldr	r3, [r7, #12]
   2eb5e:	68da      	ldr	r2, [r3, #12]
   2eb60:	687b      	ldr	r3, [r7, #4]
   2eb62:	18d2      	adds	r2, r2, r3
   2eb64:	68fb      	ldr	r3, [r7, #12]
   2eb66:	68db      	ldr	r3, [r3, #12]
   2eb68:	429a      	cmp	r2, r3
   2eb6a:	d300      	bcc.n	2eb6e <f_write+0x72>
   2eb6c:	e146      	b.n	2edfc <f_write+0x300>
   2eb6e:	2300      	movs	r3, #0
   2eb70:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2eb72:	e143      	b.n	2edfc <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2eb74:	68fb      	ldr	r3, [r7, #12]
   2eb76:	689b      	ldr	r3, [r3, #8]
   2eb78:	05db      	lsls	r3, r3, #23
   2eb7a:	0ddb      	lsrs	r3, r3, #23
   2eb7c:	d000      	beq.n	2eb80 <f_write+0x84>
   2eb7e:	e0f6      	b.n	2ed6e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2eb80:	68fb      	ldr	r3, [r7, #12]
   2eb82:	689b      	ldr	r3, [r3, #8]
   2eb84:	0a5b      	lsrs	r3, r3, #9
   2eb86:	b2da      	uxtb	r2, r3
   2eb88:	68fb      	ldr	r3, [r7, #12]
   2eb8a:	681b      	ldr	r3, [r3, #0]
   2eb8c:	789b      	ldrb	r3, [r3, #2]
   2eb8e:	3b01      	subs	r3, #1
   2eb90:	b2d9      	uxtb	r1, r3
   2eb92:	2316      	movs	r3, #22
   2eb94:	18fb      	adds	r3, r7, r3
   2eb96:	400a      	ands	r2, r1
   2eb98:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2eb9a:	2316      	movs	r3, #22
   2eb9c:	18fb      	adds	r3, r7, r3
   2eb9e:	781b      	ldrb	r3, [r3, #0]
   2eba0:	2b00      	cmp	r3, #0
   2eba2:	d140      	bne.n	2ec26 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2eba4:	68fb      	ldr	r3, [r7, #12]
   2eba6:	689b      	ldr	r3, [r3, #8]
   2eba8:	2b00      	cmp	r3, #0
   2ebaa:	d111      	bne.n	2ebd0 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2ebac:	68fb      	ldr	r3, [r7, #12]
   2ebae:	691b      	ldr	r3, [r3, #16]
   2ebb0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ebb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ebb4:	2b00      	cmp	r3, #0
   2ebb6:	d115      	bne.n	2ebe4 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ebb8:	68fb      	ldr	r3, [r7, #12]
   2ebba:	681b      	ldr	r3, [r3, #0]
   2ebbc:	2100      	movs	r1, #0
   2ebbe:	0018      	movs	r0, r3
   2ebc0:	4b9d      	ldr	r3, [pc, #628]	; (2ee38 <f_write+0x33c>)
   2ebc2:	4798      	blx	r3
   2ebc4:	0003      	movs	r3, r0
   2ebc6:	627b      	str	r3, [r7, #36]	; 0x24
   2ebc8:	68fb      	ldr	r3, [r7, #12]
   2ebca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ebcc:	611a      	str	r2, [r3, #16]
   2ebce:	e009      	b.n	2ebe4 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ebd0:	68fb      	ldr	r3, [r7, #12]
   2ebd2:	681a      	ldr	r2, [r3, #0]
   2ebd4:	68fb      	ldr	r3, [r7, #12]
   2ebd6:	695b      	ldr	r3, [r3, #20]
   2ebd8:	0019      	movs	r1, r3
   2ebda:	0010      	movs	r0, r2
   2ebdc:	4b96      	ldr	r3, [pc, #600]	; (2ee38 <f_write+0x33c>)
   2ebde:	4798      	blx	r3
   2ebe0:	0003      	movs	r3, r0
   2ebe2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ebe6:	2b00      	cmp	r3, #0
   2ebe8:	d100      	bne.n	2ebec <f_write+0xf0>
   2ebea:	e10c      	b.n	2ee06 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ebee:	2b01      	cmp	r3, #1
   2ebf0:	d109      	bne.n	2ec06 <f_write+0x10a>
   2ebf2:	68fb      	ldr	r3, [r7, #12]
   2ebf4:	799b      	ldrb	r3, [r3, #6]
   2ebf6:	2280      	movs	r2, #128	; 0x80
   2ebf8:	4252      	negs	r2, r2
   2ebfa:	4313      	orrs	r3, r2
   2ebfc:	b2da      	uxtb	r2, r3
   2ebfe:	68fb      	ldr	r3, [r7, #12]
   2ec00:	719a      	strb	r2, [r3, #6]
   2ec02:	2302      	movs	r3, #2
   2ec04:	e112      	b.n	2ee2c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec08:	3301      	adds	r3, #1
   2ec0a:	d109      	bne.n	2ec20 <f_write+0x124>
   2ec0c:	68fb      	ldr	r3, [r7, #12]
   2ec0e:	799b      	ldrb	r3, [r3, #6]
   2ec10:	2280      	movs	r2, #128	; 0x80
   2ec12:	4252      	negs	r2, r2
   2ec14:	4313      	orrs	r3, r2
   2ec16:	b2da      	uxtb	r2, r3
   2ec18:	68fb      	ldr	r3, [r7, #12]
   2ec1a:	719a      	strb	r2, [r3, #6]
   2ec1c:	2301      	movs	r3, #1
   2ec1e:	e105      	b.n	2ee2c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2ec20:	68fb      	ldr	r3, [r7, #12]
   2ec22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec24:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2ec26:	68fb      	ldr	r3, [r7, #12]
   2ec28:	681b      	ldr	r3, [r3, #0]
   2ec2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec2c:	68fb      	ldr	r3, [r7, #12]
   2ec2e:	699b      	ldr	r3, [r3, #24]
   2ec30:	429a      	cmp	r2, r3
   2ec32:	d111      	bne.n	2ec58 <f_write+0x15c>
   2ec34:	68fb      	ldr	r3, [r7, #12]
   2ec36:	681b      	ldr	r3, [r3, #0]
   2ec38:	2100      	movs	r1, #0
   2ec3a:	0018      	movs	r0, r3
   2ec3c:	4b7f      	ldr	r3, [pc, #508]	; (2ee3c <f_write+0x340>)
   2ec3e:	4798      	blx	r3
   2ec40:	1e03      	subs	r3, r0, #0
   2ec42:	d009      	beq.n	2ec58 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2ec44:	68fb      	ldr	r3, [r7, #12]
   2ec46:	799b      	ldrb	r3, [r3, #6]
   2ec48:	2280      	movs	r2, #128	; 0x80
   2ec4a:	4252      	negs	r2, r2
   2ec4c:	4313      	orrs	r3, r2
   2ec4e:	b2da      	uxtb	r2, r3
   2ec50:	68fb      	ldr	r3, [r7, #12]
   2ec52:	719a      	strb	r2, [r3, #6]
   2ec54:	2301      	movs	r3, #1
   2ec56:	e0e9      	b.n	2ee2c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ec58:	68fb      	ldr	r3, [r7, #12]
   2ec5a:	681a      	ldr	r2, [r3, #0]
   2ec5c:	68fb      	ldr	r3, [r7, #12]
   2ec5e:	695b      	ldr	r3, [r3, #20]
   2ec60:	0019      	movs	r1, r3
   2ec62:	0010      	movs	r0, r2
   2ec64:	4b76      	ldr	r3, [pc, #472]	; (2ee40 <f_write+0x344>)
   2ec66:	4798      	blx	r3
   2ec68:	0003      	movs	r3, r0
   2ec6a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ec6c:	693b      	ldr	r3, [r7, #16]
   2ec6e:	2b00      	cmp	r3, #0
   2ec70:	d109      	bne.n	2ec86 <f_write+0x18a>
   2ec72:	68fb      	ldr	r3, [r7, #12]
   2ec74:	799b      	ldrb	r3, [r3, #6]
   2ec76:	2280      	movs	r2, #128	; 0x80
   2ec78:	4252      	negs	r2, r2
   2ec7a:	4313      	orrs	r3, r2
   2ec7c:	b2da      	uxtb	r2, r3
   2ec7e:	68fb      	ldr	r3, [r7, #12]
   2ec80:	719a      	strb	r2, [r3, #6]
   2ec82:	2302      	movs	r3, #2
   2ec84:	e0d2      	b.n	2ee2c <f_write+0x330>
			sect += csect;
   2ec86:	2316      	movs	r3, #22
   2ec88:	18fb      	adds	r3, r7, r3
   2ec8a:	781b      	ldrb	r3, [r3, #0]
   2ec8c:	693a      	ldr	r2, [r7, #16]
   2ec8e:	18d3      	adds	r3, r2, r3
   2ec90:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ec92:	687b      	ldr	r3, [r7, #4]
   2ec94:	0a5b      	lsrs	r3, r3, #9
   2ec96:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2ec98:	69fb      	ldr	r3, [r7, #28]
   2ec9a:	2b00      	cmp	r3, #0
   2ec9c:	d048      	beq.n	2ed30 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ec9e:	2316      	movs	r3, #22
   2eca0:	18fb      	adds	r3, r7, r3
   2eca2:	781a      	ldrb	r2, [r3, #0]
   2eca4:	69fb      	ldr	r3, [r7, #28]
   2eca6:	18d2      	adds	r2, r2, r3
   2eca8:	68fb      	ldr	r3, [r7, #12]
   2ecaa:	681b      	ldr	r3, [r3, #0]
   2ecac:	789b      	ldrb	r3, [r3, #2]
   2ecae:	429a      	cmp	r2, r3
   2ecb0:	d908      	bls.n	2ecc4 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2ecb2:	68fb      	ldr	r3, [r7, #12]
   2ecb4:	681b      	ldr	r3, [r3, #0]
   2ecb6:	789b      	ldrb	r3, [r3, #2]
   2ecb8:	001a      	movs	r2, r3
   2ecba:	2316      	movs	r3, #22
   2ecbc:	18fb      	adds	r3, r7, r3
   2ecbe:	781b      	ldrb	r3, [r3, #0]
   2ecc0:	1ad3      	subs	r3, r2, r3
   2ecc2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	681b      	ldr	r3, [r3, #0]
   2ecc8:	7858      	ldrb	r0, [r3, #1]
   2ecca:	69fb      	ldr	r3, [r7, #28]
   2eccc:	b2db      	uxtb	r3, r3
   2ecce:	693a      	ldr	r2, [r7, #16]
   2ecd0:	69b9      	ldr	r1, [r7, #24]
   2ecd2:	4c5c      	ldr	r4, [pc, #368]	; (2ee44 <f_write+0x348>)
   2ecd4:	47a0      	blx	r4
   2ecd6:	1e03      	subs	r3, r0, #0
   2ecd8:	d009      	beq.n	2ecee <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ecda:	68fb      	ldr	r3, [r7, #12]
   2ecdc:	799b      	ldrb	r3, [r3, #6]
   2ecde:	2280      	movs	r2, #128	; 0x80
   2ece0:	4252      	negs	r2, r2
   2ece2:	4313      	orrs	r3, r2
   2ece4:	b2da      	uxtb	r2, r3
   2ece6:	68fb      	ldr	r3, [r7, #12]
   2ece8:	719a      	strb	r2, [r3, #6]
   2ecea:	2301      	movs	r3, #1
   2ecec:	e09e      	b.n	2ee2c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2ecee:	68fb      	ldr	r3, [r7, #12]
   2ecf0:	681b      	ldr	r3, [r3, #0]
   2ecf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ecf4:	693b      	ldr	r3, [r7, #16]
   2ecf6:	1ad2      	subs	r2, r2, r3
   2ecf8:	69fb      	ldr	r3, [r7, #28]
   2ecfa:	429a      	cmp	r2, r3
   2ecfc:	d214      	bcs.n	2ed28 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ecfe:	68fb      	ldr	r3, [r7, #12]
   2ed00:	681b      	ldr	r3, [r3, #0]
   2ed02:	3330      	adds	r3, #48	; 0x30
   2ed04:	0018      	movs	r0, r3
   2ed06:	68fb      	ldr	r3, [r7, #12]
   2ed08:	681b      	ldr	r3, [r3, #0]
   2ed0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed0c:	693b      	ldr	r3, [r7, #16]
   2ed0e:	1ad3      	subs	r3, r2, r3
   2ed10:	025b      	lsls	r3, r3, #9
   2ed12:	69ba      	ldr	r2, [r7, #24]
   2ed14:	18d1      	adds	r1, r2, r3
   2ed16:	2380      	movs	r3, #128	; 0x80
   2ed18:	009b      	lsls	r3, r3, #2
   2ed1a:	001a      	movs	r2, r3
   2ed1c:	4b4a      	ldr	r3, [pc, #296]	; (2ee48 <f_write+0x34c>)
   2ed1e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ed20:	68fb      	ldr	r3, [r7, #12]
   2ed22:	681b      	ldr	r3, [r3, #0]
   2ed24:	2200      	movs	r2, #0
   2ed26:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2ed28:	69fb      	ldr	r3, [r7, #28]
   2ed2a:	025b      	lsls	r3, r3, #9
   2ed2c:	623b      	str	r3, [r7, #32]
				continue;
   2ed2e:	e051      	b.n	2edd4 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2ed30:	68fb      	ldr	r3, [r7, #12]
   2ed32:	689a      	ldr	r2, [r3, #8]
   2ed34:	68fb      	ldr	r3, [r7, #12]
   2ed36:	68db      	ldr	r3, [r3, #12]
   2ed38:	429a      	cmp	r2, r3
   2ed3a:	d315      	bcc.n	2ed68 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2ed3c:	68fb      	ldr	r3, [r7, #12]
   2ed3e:	681b      	ldr	r3, [r3, #0]
   2ed40:	2100      	movs	r1, #0
   2ed42:	0018      	movs	r0, r3
   2ed44:	4b3d      	ldr	r3, [pc, #244]	; (2ee3c <f_write+0x340>)
   2ed46:	4798      	blx	r3
   2ed48:	1e03      	subs	r3, r0, #0
   2ed4a:	d009      	beq.n	2ed60 <f_write+0x264>
   2ed4c:	68fb      	ldr	r3, [r7, #12]
   2ed4e:	799b      	ldrb	r3, [r3, #6]
   2ed50:	2280      	movs	r2, #128	; 0x80
   2ed52:	4252      	negs	r2, r2
   2ed54:	4313      	orrs	r3, r2
   2ed56:	b2da      	uxtb	r2, r3
   2ed58:	68fb      	ldr	r3, [r7, #12]
   2ed5a:	719a      	strb	r2, [r3, #6]
   2ed5c:	2301      	movs	r3, #1
   2ed5e:	e065      	b.n	2ee2c <f_write+0x330>
				fp->fs->winsect = sect;
   2ed60:	68fb      	ldr	r3, [r7, #12]
   2ed62:	681b      	ldr	r3, [r3, #0]
   2ed64:	693a      	ldr	r2, [r7, #16]
   2ed66:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ed68:	68fb      	ldr	r3, [r7, #12]
   2ed6a:	693a      	ldr	r2, [r7, #16]
   2ed6c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ed6e:	68fb      	ldr	r3, [r7, #12]
   2ed70:	689b      	ldr	r3, [r3, #8]
   2ed72:	05db      	lsls	r3, r3, #23
   2ed74:	0ddb      	lsrs	r3, r3, #23
   2ed76:	2280      	movs	r2, #128	; 0x80
   2ed78:	0092      	lsls	r2, r2, #2
   2ed7a:	1ad3      	subs	r3, r2, r3
   2ed7c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ed7e:	6a3a      	ldr	r2, [r7, #32]
   2ed80:	687b      	ldr	r3, [r7, #4]
   2ed82:	429a      	cmp	r2, r3
   2ed84:	d901      	bls.n	2ed8a <f_write+0x28e>
   2ed86:	687b      	ldr	r3, [r7, #4]
   2ed88:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ed8a:	68fb      	ldr	r3, [r7, #12]
   2ed8c:	681a      	ldr	r2, [r3, #0]
   2ed8e:	68fb      	ldr	r3, [r7, #12]
   2ed90:	699b      	ldr	r3, [r3, #24]
   2ed92:	0019      	movs	r1, r3
   2ed94:	0010      	movs	r0, r2
   2ed96:	4b29      	ldr	r3, [pc, #164]	; (2ee3c <f_write+0x340>)
   2ed98:	4798      	blx	r3
   2ed9a:	1e03      	subs	r3, r0, #0
   2ed9c:	d009      	beq.n	2edb2 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ed9e:	68fb      	ldr	r3, [r7, #12]
   2eda0:	799b      	ldrb	r3, [r3, #6]
   2eda2:	2280      	movs	r2, #128	; 0x80
   2eda4:	4252      	negs	r2, r2
   2eda6:	4313      	orrs	r3, r2
   2eda8:	b2da      	uxtb	r2, r3
   2edaa:	68fb      	ldr	r3, [r7, #12]
   2edac:	719a      	strb	r2, [r3, #6]
   2edae:	2301      	movs	r3, #1
   2edb0:	e03c      	b.n	2ee2c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2edb2:	68fb      	ldr	r3, [r7, #12]
   2edb4:	681a      	ldr	r2, [r3, #0]
   2edb6:	68fb      	ldr	r3, [r7, #12]
   2edb8:	689b      	ldr	r3, [r3, #8]
   2edba:	05db      	lsls	r3, r3, #23
   2edbc:	0ddb      	lsrs	r3, r3, #23
   2edbe:	3330      	adds	r3, #48	; 0x30
   2edc0:	18d3      	adds	r3, r2, r3
   2edc2:	6a3a      	ldr	r2, [r7, #32]
   2edc4:	69b9      	ldr	r1, [r7, #24]
   2edc6:	0018      	movs	r0, r3
   2edc8:	4b1f      	ldr	r3, [pc, #124]	; (2ee48 <f_write+0x34c>)
   2edca:	4798      	blx	r3
		fp->fs->wflag = 1;
   2edcc:	68fb      	ldr	r3, [r7, #12]
   2edce:	681b      	ldr	r3, [r3, #0]
   2edd0:	2201      	movs	r2, #1
   2edd2:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2edd4:	69ba      	ldr	r2, [r7, #24]
   2edd6:	6a3b      	ldr	r3, [r7, #32]
   2edd8:	18d3      	adds	r3, r2, r3
   2edda:	61bb      	str	r3, [r7, #24]
   2eddc:	68fb      	ldr	r3, [r7, #12]
   2edde:	689a      	ldr	r2, [r3, #8]
   2ede0:	6a3b      	ldr	r3, [r7, #32]
   2ede2:	18d2      	adds	r2, r2, r3
   2ede4:	68fb      	ldr	r3, [r7, #12]
   2ede6:	609a      	str	r2, [r3, #8]
   2ede8:	683b      	ldr	r3, [r7, #0]
   2edea:	681a      	ldr	r2, [r3, #0]
   2edec:	6a3b      	ldr	r3, [r7, #32]
   2edee:	18d2      	adds	r2, r2, r3
   2edf0:	683b      	ldr	r3, [r7, #0]
   2edf2:	601a      	str	r2, [r3, #0]
   2edf4:	687a      	ldr	r2, [r7, #4]
   2edf6:	6a3b      	ldr	r3, [r7, #32]
   2edf8:	1ad3      	subs	r3, r2, r3
   2edfa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2edfc:	687b      	ldr	r3, [r7, #4]
   2edfe:	2b00      	cmp	r3, #0
   2ee00:	d000      	beq.n	2ee04 <f_write+0x308>
   2ee02:	e6b7      	b.n	2eb74 <f_write+0x78>
   2ee04:	e000      	b.n	2ee08 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ee06:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ee08:	68fb      	ldr	r3, [r7, #12]
   2ee0a:	689a      	ldr	r2, [r3, #8]
   2ee0c:	68fb      	ldr	r3, [r7, #12]
   2ee0e:	68db      	ldr	r3, [r3, #12]
   2ee10:	429a      	cmp	r2, r3
   2ee12:	d903      	bls.n	2ee1c <f_write+0x320>
   2ee14:	68fb      	ldr	r3, [r7, #12]
   2ee16:	689a      	ldr	r2, [r3, #8]
   2ee18:	68fb      	ldr	r3, [r7, #12]
   2ee1a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ee1c:	68fb      	ldr	r3, [r7, #12]
   2ee1e:	799b      	ldrb	r3, [r3, #6]
   2ee20:	2220      	movs	r2, #32
   2ee22:	4313      	orrs	r3, r2
   2ee24:	b2da      	uxtb	r2, r3
   2ee26:	68fb      	ldr	r3, [r7, #12]
   2ee28:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ee2a:	2300      	movs	r3, #0
}
   2ee2c:	0018      	movs	r0, r3
   2ee2e:	46bd      	mov	sp, r7
   2ee30:	b00b      	add	sp, #44	; 0x2c
   2ee32:	bd90      	pop	{r4, r7, pc}
   2ee34:	0002e521 	.word	0x0002e521
   2ee38:	0002cbad 	.word	0x0002cbad
   2ee3c:	0002c4a5 	.word	0x0002c4a5
   2ee40:	0002c705 	.word	0x0002c705
   2ee44:	0002c191 	.word	0x0002c191
   2ee48:	0002c3c1 	.word	0x0002c3c1

0002ee4c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2ee4c:	b590      	push	{r4, r7, lr}
   2ee4e:	b087      	sub	sp, #28
   2ee50:	af00      	add	r7, sp, #0
   2ee52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2ee54:	687b      	ldr	r3, [r7, #4]
   2ee56:	681a      	ldr	r2, [r3, #0]
   2ee58:	687b      	ldr	r3, [r7, #4]
   2ee5a:	889b      	ldrh	r3, [r3, #4]
   2ee5c:	2117      	movs	r1, #23
   2ee5e:	187c      	adds	r4, r7, r1
   2ee60:	0019      	movs	r1, r3
   2ee62:	0010      	movs	r0, r2
   2ee64:	4b55      	ldr	r3, [pc, #340]	; (2efbc <f_sync+0x170>)
   2ee66:	4798      	blx	r3
   2ee68:	0003      	movs	r3, r0
   2ee6a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ee6c:	2317      	movs	r3, #23
   2ee6e:	18fb      	adds	r3, r7, r3
   2ee70:	781b      	ldrb	r3, [r3, #0]
   2ee72:	2b00      	cmp	r3, #0
   2ee74:	d000      	beq.n	2ee78 <f_sync+0x2c>
   2ee76:	e09a      	b.n	2efae <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ee78:	687b      	ldr	r3, [r7, #4]
   2ee7a:	799b      	ldrb	r3, [r3, #6]
   2ee7c:	001a      	movs	r2, r3
   2ee7e:	2320      	movs	r3, #32
   2ee80:	4013      	ands	r3, r2
   2ee82:	d100      	bne.n	2ee86 <f_sync+0x3a>
   2ee84:	e093      	b.n	2efae <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2ee86:	687b      	ldr	r3, [r7, #4]
   2ee88:	681a      	ldr	r2, [r3, #0]
   2ee8a:	687b      	ldr	r3, [r7, #4]
   2ee8c:	69db      	ldr	r3, [r3, #28]
   2ee8e:	2117      	movs	r1, #23
   2ee90:	187c      	adds	r4, r7, r1
   2ee92:	0019      	movs	r1, r3
   2ee94:	0010      	movs	r0, r2
   2ee96:	4b4a      	ldr	r3, [pc, #296]	; (2efc0 <f_sync+0x174>)
   2ee98:	4798      	blx	r3
   2ee9a:	0003      	movs	r3, r0
   2ee9c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ee9e:	2317      	movs	r3, #23
   2eea0:	18fb      	adds	r3, r7, r3
   2eea2:	781b      	ldrb	r3, [r3, #0]
   2eea4:	2b00      	cmp	r3, #0
   2eea6:	d000      	beq.n	2eeaa <f_sync+0x5e>
   2eea8:	e081      	b.n	2efae <f_sync+0x162>
				dir = fp->dir_ptr;
   2eeaa:	687b      	ldr	r3, [r7, #4]
   2eeac:	6a1b      	ldr	r3, [r3, #32]
   2eeae:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2eeb0:	693b      	ldr	r3, [r7, #16]
   2eeb2:	330b      	adds	r3, #11
   2eeb4:	693a      	ldr	r2, [r7, #16]
   2eeb6:	320b      	adds	r2, #11
   2eeb8:	7812      	ldrb	r2, [r2, #0]
   2eeba:	2120      	movs	r1, #32
   2eebc:	430a      	orrs	r2, r1
   2eebe:	b2d2      	uxtb	r2, r2
   2eec0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2eec2:	693b      	ldr	r3, [r7, #16]
   2eec4:	331c      	adds	r3, #28
   2eec6:	001a      	movs	r2, r3
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	68db      	ldr	r3, [r3, #12]
   2eecc:	b2db      	uxtb	r3, r3
   2eece:	7013      	strb	r3, [r2, #0]
   2eed0:	693b      	ldr	r3, [r7, #16]
   2eed2:	331d      	adds	r3, #29
   2eed4:	001a      	movs	r2, r3
   2eed6:	687b      	ldr	r3, [r7, #4]
   2eed8:	68db      	ldr	r3, [r3, #12]
   2eeda:	b29b      	uxth	r3, r3
   2eedc:	0a1b      	lsrs	r3, r3, #8
   2eede:	b29b      	uxth	r3, r3
   2eee0:	b2db      	uxtb	r3, r3
   2eee2:	7013      	strb	r3, [r2, #0]
   2eee4:	693b      	ldr	r3, [r7, #16]
   2eee6:	331e      	adds	r3, #30
   2eee8:	001a      	movs	r2, r3
   2eeea:	687b      	ldr	r3, [r7, #4]
   2eeec:	68db      	ldr	r3, [r3, #12]
   2eeee:	0c1b      	lsrs	r3, r3, #16
   2eef0:	b2db      	uxtb	r3, r3
   2eef2:	7013      	strb	r3, [r2, #0]
   2eef4:	693b      	ldr	r3, [r7, #16]
   2eef6:	331f      	adds	r3, #31
   2eef8:	001a      	movs	r2, r3
   2eefa:	687b      	ldr	r3, [r7, #4]
   2eefc:	68db      	ldr	r3, [r3, #12]
   2eefe:	0e1b      	lsrs	r3, r3, #24
   2ef00:	b2db      	uxtb	r3, r3
   2ef02:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ef04:	693b      	ldr	r3, [r7, #16]
   2ef06:	331a      	adds	r3, #26
   2ef08:	001a      	movs	r2, r3
   2ef0a:	687b      	ldr	r3, [r7, #4]
   2ef0c:	691b      	ldr	r3, [r3, #16]
   2ef0e:	b2db      	uxtb	r3, r3
   2ef10:	7013      	strb	r3, [r2, #0]
   2ef12:	693b      	ldr	r3, [r7, #16]
   2ef14:	331b      	adds	r3, #27
   2ef16:	001a      	movs	r2, r3
   2ef18:	687b      	ldr	r3, [r7, #4]
   2ef1a:	691b      	ldr	r3, [r3, #16]
   2ef1c:	b29b      	uxth	r3, r3
   2ef1e:	0a1b      	lsrs	r3, r3, #8
   2ef20:	b29b      	uxth	r3, r3
   2ef22:	b2db      	uxtb	r3, r3
   2ef24:	7013      	strb	r3, [r2, #0]
   2ef26:	693b      	ldr	r3, [r7, #16]
   2ef28:	3314      	adds	r3, #20
   2ef2a:	001a      	movs	r2, r3
   2ef2c:	687b      	ldr	r3, [r7, #4]
   2ef2e:	691b      	ldr	r3, [r3, #16]
   2ef30:	0c1b      	lsrs	r3, r3, #16
   2ef32:	b2db      	uxtb	r3, r3
   2ef34:	7013      	strb	r3, [r2, #0]
   2ef36:	693b      	ldr	r3, [r7, #16]
   2ef38:	3315      	adds	r3, #21
   2ef3a:	001a      	movs	r2, r3
   2ef3c:	687b      	ldr	r3, [r7, #4]
   2ef3e:	691b      	ldr	r3, [r3, #16]
   2ef40:	0c1b      	lsrs	r3, r3, #16
   2ef42:	b29b      	uxth	r3, r3
   2ef44:	0a1b      	lsrs	r3, r3, #8
   2ef46:	b29b      	uxth	r3, r3
   2ef48:	b2db      	uxtb	r3, r3
   2ef4a:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2ef4c:	4b1d      	ldr	r3, [pc, #116]	; (2efc4 <f_sync+0x178>)
   2ef4e:	4798      	blx	r3
   2ef50:	0003      	movs	r3, r0
   2ef52:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2ef54:	693b      	ldr	r3, [r7, #16]
   2ef56:	3316      	adds	r3, #22
   2ef58:	68fa      	ldr	r2, [r7, #12]
   2ef5a:	b2d2      	uxtb	r2, r2
   2ef5c:	701a      	strb	r2, [r3, #0]
   2ef5e:	693b      	ldr	r3, [r7, #16]
   2ef60:	3317      	adds	r3, #23
   2ef62:	68fa      	ldr	r2, [r7, #12]
   2ef64:	b292      	uxth	r2, r2
   2ef66:	0a12      	lsrs	r2, r2, #8
   2ef68:	b292      	uxth	r2, r2
   2ef6a:	b2d2      	uxtb	r2, r2
   2ef6c:	701a      	strb	r2, [r3, #0]
   2ef6e:	693b      	ldr	r3, [r7, #16]
   2ef70:	3318      	adds	r3, #24
   2ef72:	68fa      	ldr	r2, [r7, #12]
   2ef74:	0c12      	lsrs	r2, r2, #16
   2ef76:	b2d2      	uxtb	r2, r2
   2ef78:	701a      	strb	r2, [r3, #0]
   2ef7a:	693b      	ldr	r3, [r7, #16]
   2ef7c:	3319      	adds	r3, #25
   2ef7e:	68fa      	ldr	r2, [r7, #12]
   2ef80:	0e12      	lsrs	r2, r2, #24
   2ef82:	b2d2      	uxtb	r2, r2
   2ef84:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2ef86:	687b      	ldr	r3, [r7, #4]
   2ef88:	799b      	ldrb	r3, [r3, #6]
   2ef8a:	2220      	movs	r2, #32
   2ef8c:	4393      	bics	r3, r2
   2ef8e:	b2da      	uxtb	r2, r3
   2ef90:	687b      	ldr	r3, [r7, #4]
   2ef92:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2ef94:	687b      	ldr	r3, [r7, #4]
   2ef96:	681b      	ldr	r3, [r3, #0]
   2ef98:	2201      	movs	r2, #1
   2ef9a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2ef9c:	687b      	ldr	r3, [r7, #4]
   2ef9e:	681b      	ldr	r3, [r3, #0]
   2efa0:	2217      	movs	r2, #23
   2efa2:	18bc      	adds	r4, r7, r2
   2efa4:	0018      	movs	r0, r3
   2efa6:	4b08      	ldr	r3, [pc, #32]	; (2efc8 <f_sync+0x17c>)
   2efa8:	4798      	blx	r3
   2efaa:	0003      	movs	r3, r0
   2efac:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2efae:	2317      	movs	r3, #23
   2efb0:	18fb      	adds	r3, r7, r3
   2efb2:	781b      	ldrb	r3, [r3, #0]
}
   2efb4:	0018      	movs	r0, r3
   2efb6:	46bd      	mov	sp, r7
   2efb8:	b007      	add	sp, #28
   2efba:	bd90      	pop	{r4, r7, pc}
   2efbc:	0002e521 	.word	0x0002e521
   2efc0:	0002c4a5 	.word	0x0002c4a5
   2efc4:	0002c361 	.word	0x0002c361
   2efc8:	0002c56d 	.word	0x0002c56d

0002efcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2efcc:	b590      	push	{r4, r7, lr}
   2efce:	b085      	sub	sp, #20
   2efd0:	af00      	add	r7, sp, #0
   2efd2:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2efd4:	230f      	movs	r3, #15
   2efd6:	18fc      	adds	r4, r7, r3
   2efd8:	687b      	ldr	r3, [r7, #4]
   2efda:	0018      	movs	r0, r3
   2efdc:	4b09      	ldr	r3, [pc, #36]	; (2f004 <f_close+0x38>)
   2efde:	4798      	blx	r3
   2efe0:	0003      	movs	r3, r0
   2efe2:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2efe4:	230f      	movs	r3, #15
   2efe6:	18fb      	adds	r3, r7, r3
   2efe8:	781b      	ldrb	r3, [r3, #0]
   2efea:	2b00      	cmp	r3, #0
   2efec:	d102      	bne.n	2eff4 <f_close+0x28>
   2efee:	687b      	ldr	r3, [r7, #4]
   2eff0:	2200      	movs	r2, #0
   2eff2:	601a      	str	r2, [r3, #0]
	return res;
   2eff4:	230f      	movs	r3, #15
   2eff6:	18fb      	adds	r3, r7, r3
   2eff8:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2effa:	0018      	movs	r0, r3
   2effc:	46bd      	mov	sp, r7
   2effe:	b005      	add	sp, #20
   2f000:	bd90      	pop	{r4, r7, pc}
   2f002:	46c0      	nop			; (mov r8, r8)
   2f004:	0002ee4d 	.word	0x0002ee4d

0002f008 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2f008:	b580      	push	{r7, lr}
   2f00a:	b084      	sub	sp, #16
   2f00c:	af00      	add	r7, sp, #0
   2f00e:	0002      	movs	r2, r0
   2f010:	6039      	str	r1, [r7, #0]
   2f012:	1dbb      	adds	r3, r7, #6
   2f014:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2f016:	1dbb      	adds	r3, r7, #6
   2f018:	881b      	ldrh	r3, [r3, #0]
   2f01a:	2b7f      	cmp	r3, #127	; 0x7f
   2f01c:	d805      	bhi.n	2f02a <ff_convert+0x22>
		c = src;
   2f01e:	230e      	movs	r3, #14
   2f020:	18fb      	adds	r3, r7, r3
   2f022:	1dba      	adds	r2, r7, #6
   2f024:	8812      	ldrh	r2, [r2, #0]
   2f026:	801a      	strh	r2, [r3, #0]
   2f028:	e03a      	b.n	2f0a0 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2f02a:	683b      	ldr	r3, [r7, #0]
   2f02c:	2b00      	cmp	r3, #0
   2f02e:	d010      	beq.n	2f052 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2f030:	1dbb      	adds	r3, r7, #6
   2f032:	881b      	ldrh	r3, [r3, #0]
   2f034:	2bff      	cmp	r3, #255	; 0xff
   2f036:	d807      	bhi.n	2f048 <ff_convert+0x40>
   2f038:	1dbb      	adds	r3, r7, #6
   2f03a:	881b      	ldrh	r3, [r3, #0]
   2f03c:	3b80      	subs	r3, #128	; 0x80
   2f03e:	001a      	movs	r2, r3
   2f040:	4b1b      	ldr	r3, [pc, #108]	; (2f0b0 <ff_convert+0xa8>)
   2f042:	0052      	lsls	r2, r2, #1
   2f044:	5ad2      	ldrh	r2, [r2, r3]
   2f046:	e000      	b.n	2f04a <ff_convert+0x42>
   2f048:	2200      	movs	r2, #0
   2f04a:	230e      	movs	r3, #14
   2f04c:	18fb      	adds	r3, r7, r3
   2f04e:	801a      	strh	r2, [r3, #0]
   2f050:	e026      	b.n	2f0a0 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2f052:	230e      	movs	r3, #14
   2f054:	18fb      	adds	r3, r7, r3
   2f056:	2200      	movs	r2, #0
   2f058:	801a      	strh	r2, [r3, #0]
   2f05a:	e010      	b.n	2f07e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2f05c:	230e      	movs	r3, #14
   2f05e:	18fb      	adds	r3, r7, r3
   2f060:	881a      	ldrh	r2, [r3, #0]
   2f062:	4b13      	ldr	r3, [pc, #76]	; (2f0b0 <ff_convert+0xa8>)
   2f064:	0052      	lsls	r2, r2, #1
   2f066:	5ad3      	ldrh	r3, [r2, r3]
   2f068:	1dba      	adds	r2, r7, #6
   2f06a:	8812      	ldrh	r2, [r2, #0]
   2f06c:	429a      	cmp	r2, r3
   2f06e:	d00c      	beq.n	2f08a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2f070:	230e      	movs	r3, #14
   2f072:	18fb      	adds	r3, r7, r3
   2f074:	881a      	ldrh	r2, [r3, #0]
   2f076:	230e      	movs	r3, #14
   2f078:	18fb      	adds	r3, r7, r3
   2f07a:	3201      	adds	r2, #1
   2f07c:	801a      	strh	r2, [r3, #0]
   2f07e:	230e      	movs	r3, #14
   2f080:	18fb      	adds	r3, r7, r3
   2f082:	881b      	ldrh	r3, [r3, #0]
   2f084:	2b7f      	cmp	r3, #127	; 0x7f
   2f086:	d9e9      	bls.n	2f05c <ff_convert+0x54>
   2f088:	e000      	b.n	2f08c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2f08a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2f08c:	230e      	movs	r3, #14
   2f08e:	18fb      	adds	r3, r7, r3
   2f090:	881b      	ldrh	r3, [r3, #0]
   2f092:	3380      	adds	r3, #128	; 0x80
   2f094:	b29a      	uxth	r2, r3
   2f096:	230e      	movs	r3, #14
   2f098:	18fb      	adds	r3, r7, r3
   2f09a:	21ff      	movs	r1, #255	; 0xff
   2f09c:	400a      	ands	r2, r1
   2f09e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2f0a0:	230e      	movs	r3, #14
   2f0a2:	18fb      	adds	r3, r7, r3
   2f0a4:	881b      	ldrh	r3, [r3, #0]
}
   2f0a6:	0018      	movs	r0, r3
   2f0a8:	46bd      	mov	sp, r7
   2f0aa:	b004      	add	sp, #16
   2f0ac:	bd80      	pop	{r7, pc}
   2f0ae:	46c0      	nop			; (mov r8, r8)
   2f0b0:	0003b0f0 	.word	0x0003b0f0

0002f0b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2f0b4:	b580      	push	{r7, lr}
   2f0b6:	b084      	sub	sp, #16
   2f0b8:	af00      	add	r7, sp, #0
   2f0ba:	0002      	movs	r2, r0
   2f0bc:	1dbb      	adds	r3, r7, #6
   2f0be:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2f0c0:	2300      	movs	r3, #0
   2f0c2:	60fb      	str	r3, [r7, #12]
   2f0c4:	e002      	b.n	2f0cc <ff_wtoupper+0x18>
   2f0c6:	68fb      	ldr	r3, [r7, #12]
   2f0c8:	3301      	adds	r3, #1
   2f0ca:	60fb      	str	r3, [r7, #12]
   2f0cc:	4b0f      	ldr	r3, [pc, #60]	; (2f10c <ff_wtoupper+0x58>)
   2f0ce:	68fa      	ldr	r2, [r7, #12]
   2f0d0:	0052      	lsls	r2, r2, #1
   2f0d2:	5ad3      	ldrh	r3, [r2, r3]
   2f0d4:	2b00      	cmp	r3, #0
   2f0d6:	d007      	beq.n	2f0e8 <ff_wtoupper+0x34>
   2f0d8:	4b0c      	ldr	r3, [pc, #48]	; (2f10c <ff_wtoupper+0x58>)
   2f0da:	68fa      	ldr	r2, [r7, #12]
   2f0dc:	0052      	lsls	r2, r2, #1
   2f0de:	5ad3      	ldrh	r3, [r2, r3]
   2f0e0:	1dba      	adds	r2, r7, #6
   2f0e2:	8812      	ldrh	r2, [r2, #0]
   2f0e4:	429a      	cmp	r2, r3
   2f0e6:	d1ee      	bne.n	2f0c6 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2f0e8:	4b08      	ldr	r3, [pc, #32]	; (2f10c <ff_wtoupper+0x58>)
   2f0ea:	68fa      	ldr	r2, [r7, #12]
   2f0ec:	0052      	lsls	r2, r2, #1
   2f0ee:	5ad3      	ldrh	r3, [r2, r3]
   2f0f0:	2b00      	cmp	r3, #0
   2f0f2:	d004      	beq.n	2f0fe <ff_wtoupper+0x4a>
   2f0f4:	4b06      	ldr	r3, [pc, #24]	; (2f110 <ff_wtoupper+0x5c>)
   2f0f6:	68fa      	ldr	r2, [r7, #12]
   2f0f8:	0052      	lsls	r2, r2, #1
   2f0fa:	5ad3      	ldrh	r3, [r2, r3]
   2f0fc:	e001      	b.n	2f102 <ff_wtoupper+0x4e>
   2f0fe:	1dbb      	adds	r3, r7, #6
   2f100:	881b      	ldrh	r3, [r3, #0]
}
   2f102:	0018      	movs	r0, r3
   2f104:	46bd      	mov	sp, r7
   2f106:	b004      	add	sp, #16
   2f108:	bd80      	pop	{r7, pc}
   2f10a:	46c0      	nop			; (mov r8, r8)
   2f10c:	0003b1f0 	.word	0x0003b1f0
   2f110:	0003b3d0 	.word	0x0003b3d0

0002f114 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f114:	b580      	push	{r7, lr}
   2f116:	b084      	sub	sp, #16
   2f118:	af00      	add	r7, sp, #0
   2f11a:	60f8      	str	r0, [r7, #12]
   2f11c:	60b9      	str	r1, [r7, #8]
   2f11e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f120:	68fb      	ldr	r3, [r7, #12]
   2f122:	68ba      	ldr	r2, [r7, #8]
   2f124:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f126:	68fb      	ldr	r3, [r7, #12]
   2f128:	687a      	ldr	r2, [r7, #4]
   2f12a:	601a      	str	r2, [r3, #0]
}
   2f12c:	46c0      	nop			; (mov r8, r8)
   2f12e:	46bd      	mov	sp, r7
   2f130:	b004      	add	sp, #16
   2f132:	bd80      	pop	{r7, pc}

0002f134 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f134:	b580      	push	{r7, lr}
   2f136:	b082      	sub	sp, #8
   2f138:	af00      	add	r7, sp, #0
   2f13a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f13c:	687b      	ldr	r3, [r7, #4]
   2f13e:	681b      	ldr	r3, [r3, #0]
   2f140:	4a07      	ldr	r2, [pc, #28]	; (2f160 <getNextPacketId+0x2c>)
   2f142:	4293      	cmp	r3, r2
   2f144:	d003      	beq.n	2f14e <getNextPacketId+0x1a>
   2f146:	687b      	ldr	r3, [r7, #4]
   2f148:	681b      	ldr	r3, [r3, #0]
   2f14a:	1c5a      	adds	r2, r3, #1
   2f14c:	e000      	b.n	2f150 <getNextPacketId+0x1c>
   2f14e:	2201      	movs	r2, #1
   2f150:	687b      	ldr	r3, [r7, #4]
   2f152:	601a      	str	r2, [r3, #0]
   2f154:	687b      	ldr	r3, [r7, #4]
   2f156:	681b      	ldr	r3, [r3, #0]
}
   2f158:	0018      	movs	r0, r3
   2f15a:	46bd      	mov	sp, r7
   2f15c:	b002      	add	sp, #8
   2f15e:	bd80      	pop	{r7, pc}
   2f160:	0000ffff 	.word	0x0000ffff

0002f164 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f164:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f166:	b087      	sub	sp, #28
   2f168:	af00      	add	r7, sp, #0
   2f16a:	60f8      	str	r0, [r7, #12]
   2f16c:	60b9      	str	r1, [r7, #8]
   2f16e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f170:	2301      	movs	r3, #1
   2f172:	425b      	negs	r3, r3
   2f174:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f176:	2300      	movs	r3, #0
   2f178:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f17a:	e01a      	b.n	2f1b2 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f17c:	68fb      	ldr	r3, [r7, #12]
   2f17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f180:	68dc      	ldr	r4, [r3, #12]
   2f182:	68fb      	ldr	r3, [r7, #12]
   2f184:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f186:	68fb      	ldr	r3, [r7, #12]
   2f188:	691a      	ldr	r2, [r3, #16]
   2f18a:	693b      	ldr	r3, [r7, #16]
   2f18c:	18d6      	adds	r6, r2, r3
   2f18e:	687b      	ldr	r3, [r7, #4]
   2f190:	0018      	movs	r0, r3
   2f192:	4b1a      	ldr	r3, [pc, #104]	; (2f1fc <sendPacket+0x98>)
   2f194:	4798      	blx	r3
   2f196:	0003      	movs	r3, r0
   2f198:	68ba      	ldr	r2, [r7, #8]
   2f19a:	0031      	movs	r1, r6
   2f19c:	0028      	movs	r0, r5
   2f19e:	47a0      	blx	r4
   2f1a0:	0003      	movs	r3, r0
   2f1a2:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f1a4:	697b      	ldr	r3, [r7, #20]
   2f1a6:	2b00      	cmp	r3, #0
   2f1a8:	db0e      	blt.n	2f1c8 <sendPacket+0x64>
            break;
        sent += rc;
   2f1aa:	693a      	ldr	r2, [r7, #16]
   2f1ac:	697b      	ldr	r3, [r7, #20]
   2f1ae:	18d3      	adds	r3, r2, r3
   2f1b0:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f1b2:	693a      	ldr	r2, [r7, #16]
   2f1b4:	68bb      	ldr	r3, [r7, #8]
   2f1b6:	429a      	cmp	r2, r3
   2f1b8:	da07      	bge.n	2f1ca <sendPacket+0x66>
   2f1ba:	687b      	ldr	r3, [r7, #4]
   2f1bc:	0018      	movs	r0, r3
   2f1be:	4b10      	ldr	r3, [pc, #64]	; (2f200 <sendPacket+0x9c>)
   2f1c0:	4798      	blx	r3
   2f1c2:	1e03      	subs	r3, r0, #0
   2f1c4:	d0da      	beq.n	2f17c <sendPacket+0x18>
   2f1c6:	e000      	b.n	2f1ca <sendPacket+0x66>
            break;
   2f1c8:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f1ca:	693a      	ldr	r2, [r7, #16]
   2f1cc:	68bb      	ldr	r3, [r7, #8]
   2f1ce:	429a      	cmp	r2, r3
   2f1d0:	d10b      	bne.n	2f1ea <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f1d2:	68fb      	ldr	r3, [r7, #12]
   2f1d4:	3354      	adds	r3, #84	; 0x54
   2f1d6:	001a      	movs	r2, r3
   2f1d8:	68fb      	ldr	r3, [r7, #12]
   2f1da:	699b      	ldr	r3, [r3, #24]
   2f1dc:	0019      	movs	r1, r3
   2f1de:	0010      	movs	r0, r2
   2f1e0:	4b08      	ldr	r3, [pc, #32]	; (2f204 <sendPacket+0xa0>)
   2f1e2:	4798      	blx	r3
        rc = SUCCESS;
   2f1e4:	2300      	movs	r3, #0
   2f1e6:	617b      	str	r3, [r7, #20]
   2f1e8:	e002      	b.n	2f1f0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f1ea:	2301      	movs	r3, #1
   2f1ec:	425b      	negs	r3, r3
   2f1ee:	617b      	str	r3, [r7, #20]
    return rc;
   2f1f0:	697b      	ldr	r3, [r7, #20]
}
   2f1f2:	0018      	movs	r0, r3
   2f1f4:	46bd      	mov	sp, r7
   2f1f6:	b007      	add	sp, #28
   2f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f1fa:	46c0      	nop			; (mov r8, r8)
   2f1fc:	0002ffc5 	.word	0x0002ffc5
   2f200:	0002ff49 	.word	0x0002ff49
   2f204:	0002ff9d 	.word	0x0002ff9d

0002f208 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f208:	b580      	push	{r7, lr}
   2f20a:	b086      	sub	sp, #24
   2f20c:	af00      	add	r7, sp, #0
   2f20e:	60f8      	str	r0, [r7, #12]
   2f210:	60b9      	str	r1, [r7, #8]
   2f212:	607a      	str	r2, [r7, #4]
   2f214:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f216:	68fb      	ldr	r3, [r7, #12]
   2f218:	68ba      	ldr	r2, [r7, #8]
   2f21a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f21c:	2300      	movs	r3, #0
   2f21e:	617b      	str	r3, [r7, #20]
   2f220:	e00a      	b.n	2f238 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f222:	68fa      	ldr	r2, [r7, #12]
   2f224:	697b      	ldr	r3, [r7, #20]
   2f226:	3304      	adds	r3, #4
   2f228:	00db      	lsls	r3, r3, #3
   2f22a:	18d3      	adds	r3, r2, r3
   2f22c:	3304      	adds	r3, #4
   2f22e:	2200      	movs	r2, #0
   2f230:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f232:	697b      	ldr	r3, [r7, #20]
   2f234:	3301      	adds	r3, #1
   2f236:	617b      	str	r3, [r7, #20]
   2f238:	697b      	ldr	r3, [r7, #20]
   2f23a:	2b04      	cmp	r3, #4
   2f23c:	ddf1      	ble.n	2f222 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f23e:	68fb      	ldr	r3, [r7, #12]
   2f240:	687a      	ldr	r2, [r7, #4]
   2f242:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f244:	68fb      	ldr	r3, [r7, #12]
   2f246:	683a      	ldr	r2, [r7, #0]
   2f248:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f24a:	68fb      	ldr	r3, [r7, #12]
   2f24c:	6a3a      	ldr	r2, [r7, #32]
   2f24e:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f250:	68fb      	ldr	r3, [r7, #12]
   2f252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f254:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f256:	68fb      	ldr	r3, [r7, #12]
   2f258:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f25a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f25c:	68fb      	ldr	r3, [r7, #12]
   2f25e:	2200      	movs	r2, #0
   2f260:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f262:	68fb      	ldr	r3, [r7, #12]
   2f264:	2200      	movs	r2, #0
   2f266:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f268:	68fb      	ldr	r3, [r7, #12]
   2f26a:	2200      	movs	r2, #0
   2f26c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f26e:	68fb      	ldr	r3, [r7, #12]
   2f270:	2201      	movs	r2, #1
   2f272:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f274:	68fb      	ldr	r3, [r7, #12]
   2f276:	3354      	adds	r3, #84	; 0x54
   2f278:	0018      	movs	r0, r3
   2f27a:	4b03      	ldr	r3, [pc, #12]	; (2f288 <MQTTClientInit+0x80>)
   2f27c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f27e:	46c0      	nop			; (mov r8, r8)
   2f280:	46bd      	mov	sp, r7
   2f282:	b006      	add	sp, #24
   2f284:	bd80      	pop	{r7, pc}
   2f286:	46c0      	nop			; (mov r8, r8)
   2f288:	0002ffed 	.word	0x0002ffed

0002f28c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f28c:	b590      	push	{r4, r7, lr}
   2f28e:	b08b      	sub	sp, #44	; 0x2c
   2f290:	af00      	add	r7, sp, #0
   2f292:	60f8      	str	r0, [r7, #12]
   2f294:	60b9      	str	r1, [r7, #8]
   2f296:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f298:	2301      	movs	r3, #1
   2f29a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f29c:	2300      	movs	r3, #0
   2f29e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f2a0:	2304      	movs	r3, #4
   2f2a2:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f2a4:	68bb      	ldr	r3, [r7, #8]
   2f2a6:	2200      	movs	r2, #0
   2f2a8:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f2aa:	2301      	movs	r3, #1
   2f2ac:	425b      	negs	r3, r3
   2f2ae:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f2b0:	6a3b      	ldr	r3, [r7, #32]
   2f2b2:	3301      	adds	r3, #1
   2f2b4:	623b      	str	r3, [r7, #32]
   2f2b6:	6a3a      	ldr	r2, [r7, #32]
   2f2b8:	69fb      	ldr	r3, [r7, #28]
   2f2ba:	429a      	cmp	r2, r3
   2f2bc:	dd03      	ble.n	2f2c6 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f2be:	2301      	movs	r3, #1
   2f2c0:	425b      	negs	r3, r3
   2f2c2:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f2c4:	e026      	b.n	2f314 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f2c6:	68fb      	ldr	r3, [r7, #12]
   2f2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f2ca:	689c      	ldr	r4, [r3, #8]
   2f2cc:	68fb      	ldr	r3, [r7, #12]
   2f2ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f2d0:	687b      	ldr	r3, [r7, #4]
   2f2d2:	2217      	movs	r2, #23
   2f2d4:	18b9      	adds	r1, r7, r2
   2f2d6:	2201      	movs	r2, #1
   2f2d8:	47a0      	blx	r4
   2f2da:	0003      	movs	r3, r0
   2f2dc:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f2de:	69bb      	ldr	r3, [r7, #24]
   2f2e0:	2b01      	cmp	r3, #1
   2f2e2:	d116      	bne.n	2f312 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f2e4:	68bb      	ldr	r3, [r7, #8]
   2f2e6:	681a      	ldr	r2, [r3, #0]
   2f2e8:	2317      	movs	r3, #23
   2f2ea:	18fb      	adds	r3, r7, r3
   2f2ec:	781b      	ldrb	r3, [r3, #0]
   2f2ee:	0019      	movs	r1, r3
   2f2f0:	237f      	movs	r3, #127	; 0x7f
   2f2f2:	400b      	ands	r3, r1
   2f2f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f2f6:	434b      	muls	r3, r1
   2f2f8:	18d2      	adds	r2, r2, r3
   2f2fa:	68bb      	ldr	r3, [r7, #8]
   2f2fc:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f300:	01db      	lsls	r3, r3, #7
   2f302:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f304:	2317      	movs	r3, #23
   2f306:	18fb      	adds	r3, r7, r3
   2f308:	781b      	ldrb	r3, [r3, #0]
   2f30a:	b25b      	sxtb	r3, r3
   2f30c:	2b00      	cmp	r3, #0
   2f30e:	dbcc      	blt.n	2f2aa <decodePacket+0x1e>
   2f310:	e000      	b.n	2f314 <decodePacket+0x88>
            goto exit;
   2f312:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f314:	6a3b      	ldr	r3, [r7, #32]
}
   2f316:	0018      	movs	r0, r3
   2f318:	46bd      	mov	sp, r7
   2f31a:	b00b      	add	sp, #44	; 0x2c
   2f31c:	bd90      	pop	{r4, r7, pc}
	...

0002f320 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f320:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f322:	46c6      	mov	lr, r8
   2f324:	b500      	push	{lr}
   2f326:	b086      	sub	sp, #24
   2f328:	af00      	add	r7, sp, #0
   2f32a:	6078      	str	r0, [r7, #4]
   2f32c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f32e:	2301      	movs	r3, #1
   2f330:	425b      	negs	r3, r3
   2f332:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f334:	2300      	movs	r3, #0
   2f336:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f338:	2300      	movs	r3, #0
   2f33a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f33c:	2300      	movs	r3, #0
   2f33e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f340:	687b      	ldr	r3, [r7, #4]
   2f342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f344:	689c      	ldr	r4, [r3, #8]
   2f346:	687b      	ldr	r3, [r7, #4]
   2f348:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f34a:	687b      	ldr	r3, [r7, #4]
   2f34c:	695e      	ldr	r6, [r3, #20]
   2f34e:	683b      	ldr	r3, [r7, #0]
   2f350:	0018      	movs	r0, r3
   2f352:	4b2b      	ldr	r3, [pc, #172]	; (2f400 <readPacket+0xe0>)
   2f354:	4798      	blx	r3
   2f356:	0003      	movs	r3, r0
   2f358:	2201      	movs	r2, #1
   2f35a:	0031      	movs	r1, r6
   2f35c:	0028      	movs	r0, r5
   2f35e:	47a0      	blx	r4
   2f360:	0003      	movs	r3, r0
   2f362:	2b01      	cmp	r3, #1
   2f364:	d141      	bne.n	2f3ea <readPacket+0xca>
        goto exit;

    len = 1;
   2f366:	2301      	movs	r3, #1
   2f368:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f36a:	683b      	ldr	r3, [r7, #0]
   2f36c:	0018      	movs	r0, r3
   2f36e:	4b24      	ldr	r3, [pc, #144]	; (2f400 <readPacket+0xe0>)
   2f370:	4798      	blx	r3
   2f372:	0002      	movs	r2, r0
   2f374:	2308      	movs	r3, #8
   2f376:	18f9      	adds	r1, r7, r3
   2f378:	687b      	ldr	r3, [r7, #4]
   2f37a:	0018      	movs	r0, r3
   2f37c:	4b21      	ldr	r3, [pc, #132]	; (2f404 <readPacket+0xe4>)
   2f37e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f380:	687b      	ldr	r3, [r7, #4]
   2f382:	695b      	ldr	r3, [r3, #20]
   2f384:	3301      	adds	r3, #1
   2f386:	68ba      	ldr	r2, [r7, #8]
   2f388:	0011      	movs	r1, r2
   2f38a:	0018      	movs	r0, r3
   2f38c:	4b1e      	ldr	r3, [pc, #120]	; (2f408 <readPacket+0xe8>)
   2f38e:	4798      	blx	r3
   2f390:	0002      	movs	r2, r0
   2f392:	693b      	ldr	r3, [r7, #16]
   2f394:	189b      	adds	r3, r3, r2
   2f396:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f398:	68bb      	ldr	r3, [r7, #8]
   2f39a:	2b00      	cmp	r3, #0
   2f39c:	dd17      	ble.n	2f3ce <readPacket+0xae>
   2f39e:	687b      	ldr	r3, [r7, #4]
   2f3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f3a2:	689c      	ldr	r4, [r3, #8]
   2f3a4:	687b      	ldr	r3, [r7, #4]
   2f3a6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	695a      	ldr	r2, [r3, #20]
   2f3ac:	693b      	ldr	r3, [r7, #16]
   2f3ae:	18d6      	adds	r6, r2, r3
   2f3b0:	68bb      	ldr	r3, [r7, #8]
   2f3b2:	4698      	mov	r8, r3
   2f3b4:	683b      	ldr	r3, [r7, #0]
   2f3b6:	0018      	movs	r0, r3
   2f3b8:	4b11      	ldr	r3, [pc, #68]	; (2f400 <readPacket+0xe0>)
   2f3ba:	4798      	blx	r3
   2f3bc:	0003      	movs	r3, r0
   2f3be:	4642      	mov	r2, r8
   2f3c0:	0031      	movs	r1, r6
   2f3c2:	0028      	movs	r0, r5
   2f3c4:	47a0      	blx	r4
   2f3c6:	0002      	movs	r2, r0
   2f3c8:	68bb      	ldr	r3, [r7, #8]
   2f3ca:	429a      	cmp	r2, r3
   2f3cc:	d10f      	bne.n	2f3ee <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f3ce:	687b      	ldr	r3, [r7, #4]
   2f3d0:	695b      	ldr	r3, [r3, #20]
   2f3d2:	781a      	ldrb	r2, [r3, #0]
   2f3d4:	230c      	movs	r3, #12
   2f3d6:	18fb      	adds	r3, r7, r3
   2f3d8:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f3da:	230c      	movs	r3, #12
   2f3dc:	18fb      	adds	r3, r7, r3
   2f3de:	781b      	ldrb	r3, [r3, #0]
   2f3e0:	061b      	lsls	r3, r3, #24
   2f3e2:	0f1b      	lsrs	r3, r3, #28
   2f3e4:	b2db      	uxtb	r3, r3
   2f3e6:	617b      	str	r3, [r7, #20]
   2f3e8:	e002      	b.n	2f3f0 <readPacket+0xd0>
        goto exit;
   2f3ea:	46c0      	nop			; (mov r8, r8)
   2f3ec:	e000      	b.n	2f3f0 <readPacket+0xd0>
        goto exit;
   2f3ee:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f3f0:	697b      	ldr	r3, [r7, #20]
}
   2f3f2:	0018      	movs	r0, r3
   2f3f4:	46bd      	mov	sp, r7
   2f3f6:	b006      	add	sp, #24
   2f3f8:	bc04      	pop	{r2}
   2f3fa:	4690      	mov	r8, r2
   2f3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f3fe:	46c0      	nop			; (mov r8, r8)
   2f400:	0002ffc5 	.word	0x0002ffc5
   2f404:	0002f28d 	.word	0x0002f28d
   2f408:	00030d9d 	.word	0x00030d9d

0002f40c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f40c:	b580      	push	{r7, lr}
   2f40e:	b086      	sub	sp, #24
   2f410:	af00      	add	r7, sp, #0
   2f412:	6078      	str	r0, [r7, #4]
   2f414:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f416:	687b      	ldr	r3, [r7, #4]
   2f418:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f41a:	683b      	ldr	r3, [r7, #0]
   2f41c:	689b      	ldr	r3, [r3, #8]
   2f41e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f420:	683b      	ldr	r3, [r7, #0]
   2f422:	685b      	ldr	r3, [r3, #4]
   2f424:	001a      	movs	r2, r3
   2f426:	693b      	ldr	r3, [r7, #16]
   2f428:	189b      	adds	r3, r3, r2
   2f42a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f42c:	e039      	b.n	2f4a2 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f42e:	693b      	ldr	r3, [r7, #16]
   2f430:	781b      	ldrb	r3, [r3, #0]
   2f432:	2b2f      	cmp	r3, #47	; 0x2f
   2f434:	d103      	bne.n	2f43e <isTopicMatched+0x32>
   2f436:	697b      	ldr	r3, [r7, #20]
   2f438:	781b      	ldrb	r3, [r3, #0]
   2f43a:	2b2f      	cmp	r3, #47	; 0x2f
   2f43c:	d13a      	bne.n	2f4b4 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f43e:	697b      	ldr	r3, [r7, #20]
   2f440:	781b      	ldrb	r3, [r3, #0]
   2f442:	2b2b      	cmp	r3, #43	; 0x2b
   2f444:	d009      	beq.n	2f45a <isTopicMatched+0x4e>
   2f446:	697b      	ldr	r3, [r7, #20]
   2f448:	781b      	ldrb	r3, [r3, #0]
   2f44a:	2b23      	cmp	r3, #35	; 0x23
   2f44c:	d005      	beq.n	2f45a <isTopicMatched+0x4e>
   2f44e:	697b      	ldr	r3, [r7, #20]
   2f450:	781a      	ldrb	r2, [r3, #0]
   2f452:	693b      	ldr	r3, [r7, #16]
   2f454:	781b      	ldrb	r3, [r3, #0]
   2f456:	429a      	cmp	r2, r3
   2f458:	d12e      	bne.n	2f4b8 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f45a:	697b      	ldr	r3, [r7, #20]
   2f45c:	781b      	ldrb	r3, [r3, #0]
   2f45e:	2b2b      	cmp	r3, #43	; 0x2b
   2f460:	d112      	bne.n	2f488 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f462:	693b      	ldr	r3, [r7, #16]
   2f464:	3301      	adds	r3, #1
   2f466:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f468:	e005      	b.n	2f476 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f46a:	693b      	ldr	r3, [r7, #16]
   2f46c:	3301      	adds	r3, #1
   2f46e:	613b      	str	r3, [r7, #16]
   2f470:	693b      	ldr	r3, [r7, #16]
   2f472:	3301      	adds	r3, #1
   2f474:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f476:	68fa      	ldr	r2, [r7, #12]
   2f478:	68bb      	ldr	r3, [r7, #8]
   2f47a:	429a      	cmp	r2, r3
   2f47c:	d20b      	bcs.n	2f496 <isTopicMatched+0x8a>
   2f47e:	68fb      	ldr	r3, [r7, #12]
   2f480:	781b      	ldrb	r3, [r3, #0]
   2f482:	2b2f      	cmp	r3, #47	; 0x2f
   2f484:	d1f1      	bne.n	2f46a <isTopicMatched+0x5e>
   2f486:	e006      	b.n	2f496 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f488:	697b      	ldr	r3, [r7, #20]
   2f48a:	781b      	ldrb	r3, [r3, #0]
   2f48c:	2b23      	cmp	r3, #35	; 0x23
   2f48e:	d102      	bne.n	2f496 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f490:	68bb      	ldr	r3, [r7, #8]
   2f492:	3b01      	subs	r3, #1
   2f494:	613b      	str	r3, [r7, #16]
        curf++;
   2f496:	697b      	ldr	r3, [r7, #20]
   2f498:	3301      	adds	r3, #1
   2f49a:	617b      	str	r3, [r7, #20]
        curn++;
   2f49c:	693b      	ldr	r3, [r7, #16]
   2f49e:	3301      	adds	r3, #1
   2f4a0:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f4a2:	697b      	ldr	r3, [r7, #20]
   2f4a4:	781b      	ldrb	r3, [r3, #0]
   2f4a6:	2b00      	cmp	r3, #0
   2f4a8:	d007      	beq.n	2f4ba <isTopicMatched+0xae>
   2f4aa:	693a      	ldr	r2, [r7, #16]
   2f4ac:	68bb      	ldr	r3, [r7, #8]
   2f4ae:	429a      	cmp	r2, r3
   2f4b0:	d3bd      	bcc.n	2f42e <isTopicMatched+0x22>
   2f4b2:	e002      	b.n	2f4ba <isTopicMatched+0xae>
            break;
   2f4b4:	46c0      	nop			; (mov r8, r8)
   2f4b6:	e000      	b.n	2f4ba <isTopicMatched+0xae>
            break;
   2f4b8:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f4ba:	693a      	ldr	r2, [r7, #16]
   2f4bc:	68bb      	ldr	r3, [r7, #8]
   2f4be:	429a      	cmp	r2, r3
   2f4c0:	d105      	bne.n	2f4ce <isTopicMatched+0xc2>
   2f4c2:	697b      	ldr	r3, [r7, #20]
   2f4c4:	781b      	ldrb	r3, [r3, #0]
   2f4c6:	2b00      	cmp	r3, #0
   2f4c8:	d101      	bne.n	2f4ce <isTopicMatched+0xc2>
   2f4ca:	2301      	movs	r3, #1
   2f4cc:	e000      	b.n	2f4d0 <isTopicMatched+0xc4>
   2f4ce:	2300      	movs	r3, #0
   2f4d0:	b2db      	uxtb	r3, r3
}
   2f4d2:	0018      	movs	r0, r3
   2f4d4:	46bd      	mov	sp, r7
   2f4d6:	b006      	add	sp, #24
   2f4d8:	bd80      	pop	{r7, pc}
	...

0002f4dc <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f4dc:	b580      	push	{r7, lr}
   2f4de:	b08a      	sub	sp, #40	; 0x28
   2f4e0:	af00      	add	r7, sp, #0
   2f4e2:	60f8      	str	r0, [r7, #12]
   2f4e4:	60b9      	str	r1, [r7, #8]
   2f4e6:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f4e8:	2301      	movs	r3, #1
   2f4ea:	425b      	negs	r3, r3
   2f4ec:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f4ee:	2300      	movs	r3, #0
   2f4f0:	627b      	str	r3, [r7, #36]	; 0x24
   2f4f2:	e044      	b.n	2f57e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f4f4:	68fa      	ldr	r2, [r7, #12]
   2f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4f8:	3304      	adds	r3, #4
   2f4fa:	00db      	lsls	r3, r3, #3
   2f4fc:	18d3      	adds	r3, r2, r3
   2f4fe:	3304      	adds	r3, #4
   2f500:	681b      	ldr	r3, [r3, #0]
   2f502:	2b00      	cmp	r3, #0
   2f504:	d038      	beq.n	2f578 <deliverMessage+0x9c>
   2f506:	68fa      	ldr	r2, [r7, #12]
   2f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f50a:	3304      	adds	r3, #4
   2f50c:	00db      	lsls	r3, r3, #3
   2f50e:	18d3      	adds	r3, r2, r3
   2f510:	3304      	adds	r3, #4
   2f512:	681a      	ldr	r2, [r3, #0]
   2f514:	68bb      	ldr	r3, [r7, #8]
   2f516:	0011      	movs	r1, r2
   2f518:	0018      	movs	r0, r3
   2f51a:	4b28      	ldr	r3, [pc, #160]	; (2f5bc <deliverMessage+0xe0>)
   2f51c:	4798      	blx	r3
   2f51e:	1e03      	subs	r3, r0, #0
   2f520:	d10d      	bne.n	2f53e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f522:	68fa      	ldr	r2, [r7, #12]
   2f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f526:	3304      	adds	r3, #4
   2f528:	00db      	lsls	r3, r3, #3
   2f52a:	18d3      	adds	r3, r2, r3
   2f52c:	3304      	adds	r3, #4
   2f52e:	681b      	ldr	r3, [r3, #0]
   2f530:	68ba      	ldr	r2, [r7, #8]
   2f532:	0011      	movs	r1, r2
   2f534:	0018      	movs	r0, r3
   2f536:	4b22      	ldr	r3, [pc, #136]	; (2f5c0 <deliverMessage+0xe4>)
   2f538:	4798      	blx	r3
   2f53a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f53c:	d01c      	beq.n	2f578 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f53e:	68fa      	ldr	r2, [r7, #12]
   2f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f542:	3304      	adds	r3, #4
   2f544:	00db      	lsls	r3, r3, #3
   2f546:	18d3      	adds	r3, r2, r3
   2f548:	3308      	adds	r3, #8
   2f54a:	681b      	ldr	r3, [r3, #0]
   2f54c:	2b00      	cmp	r3, #0
   2f54e:	d013      	beq.n	2f578 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f550:	687a      	ldr	r2, [r7, #4]
   2f552:	68b9      	ldr	r1, [r7, #8]
   2f554:	2318      	movs	r3, #24
   2f556:	18fb      	adds	r3, r7, r3
   2f558:	0018      	movs	r0, r3
   2f55a:	4b1a      	ldr	r3, [pc, #104]	; (2f5c4 <deliverMessage+0xe8>)
   2f55c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f55e:	68fa      	ldr	r2, [r7, #12]
   2f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f562:	3304      	adds	r3, #4
   2f564:	00db      	lsls	r3, r3, #3
   2f566:	18d3      	adds	r3, r2, r3
   2f568:	3308      	adds	r3, #8
   2f56a:	681b      	ldr	r3, [r3, #0]
   2f56c:	2218      	movs	r2, #24
   2f56e:	18ba      	adds	r2, r7, r2
   2f570:	0010      	movs	r0, r2
   2f572:	4798      	blx	r3
                rc = SUCCESS;
   2f574:	2300      	movs	r3, #0
   2f576:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f57a:	3301      	adds	r3, #1
   2f57c:	627b      	str	r3, [r7, #36]	; 0x24
   2f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f580:	2b04      	cmp	r3, #4
   2f582:	ddb7      	ble.n	2f4f4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f584:	6a3b      	ldr	r3, [r7, #32]
   2f586:	3301      	adds	r3, #1
   2f588:	d112      	bne.n	2f5b0 <deliverMessage+0xd4>
   2f58a:	68fb      	ldr	r3, [r7, #12]
   2f58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f58e:	2b00      	cmp	r3, #0
   2f590:	d00e      	beq.n	2f5b0 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f592:	687a      	ldr	r2, [r7, #4]
   2f594:	68b9      	ldr	r1, [r7, #8]
   2f596:	2310      	movs	r3, #16
   2f598:	18fb      	adds	r3, r7, r3
   2f59a:	0018      	movs	r0, r3
   2f59c:	4b09      	ldr	r3, [pc, #36]	; (2f5c4 <deliverMessage+0xe8>)
   2f59e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f5a0:	68fb      	ldr	r3, [r7, #12]
   2f5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5a4:	2210      	movs	r2, #16
   2f5a6:	18ba      	adds	r2, r7, r2
   2f5a8:	0010      	movs	r0, r2
   2f5aa:	4798      	blx	r3
        rc = SUCCESS;
   2f5ac:	2300      	movs	r3, #0
   2f5ae:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f5b0:	6a3b      	ldr	r3, [r7, #32]
}
   2f5b2:	0018      	movs	r0, r3
   2f5b4:	46bd      	mov	sp, r7
   2f5b6:	b00a      	add	sp, #40	; 0x28
   2f5b8:	bd80      	pop	{r7, pc}
   2f5ba:	46c0      	nop			; (mov r8, r8)
   2f5bc:	000311b1 	.word	0x000311b1
   2f5c0:	0002f40d 	.word	0x0002f40d
   2f5c4:	0002f115 	.word	0x0002f115

0002f5c8 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f5c8:	b580      	push	{r7, lr}
   2f5ca:	b088      	sub	sp, #32
   2f5cc:	af00      	add	r7, sp, #0
   2f5ce:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f5d0:	2301      	movs	r3, #1
   2f5d2:	425b      	negs	r3, r3
   2f5d4:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f5d6:	687b      	ldr	r3, [r7, #4]
   2f5d8:	699b      	ldr	r3, [r3, #24]
   2f5da:	2b00      	cmp	r3, #0
   2f5dc:	d102      	bne.n	2f5e4 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f5de:	2300      	movs	r3, #0
   2f5e0:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f5e2:	e033      	b.n	2f64c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f5e4:	687b      	ldr	r3, [r7, #4]
   2f5e6:	3354      	adds	r3, #84	; 0x54
   2f5e8:	0018      	movs	r0, r3
   2f5ea:	4b1b      	ldr	r3, [pc, #108]	; (2f658 <keepalive+0x90>)
   2f5ec:	4798      	blx	r3
   2f5ee:	1e03      	subs	r3, r0, #0
   2f5f0:	d02c      	beq.n	2f64c <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f5f2:	687b      	ldr	r3, [r7, #4]
   2f5f4:	7f1b      	ldrb	r3, [r3, #28]
   2f5f6:	2b00      	cmp	r3, #0
   2f5f8:	d128      	bne.n	2f64c <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f5fa:	230c      	movs	r3, #12
   2f5fc:	18fb      	adds	r3, r7, r3
   2f5fe:	0018      	movs	r0, r3
   2f600:	4b16      	ldr	r3, [pc, #88]	; (2f65c <keepalive+0x94>)
   2f602:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f604:	23fa      	movs	r3, #250	; 0xfa
   2f606:	009a      	lsls	r2, r3, #2
   2f608:	230c      	movs	r3, #12
   2f60a:	18fb      	adds	r3, r7, r3
   2f60c:	0011      	movs	r1, r2
   2f60e:	0018      	movs	r0, r3
   2f610:	4b13      	ldr	r3, [pc, #76]	; (2f660 <keepalive+0x98>)
   2f612:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f614:	687b      	ldr	r3, [r7, #4]
   2f616:	691a      	ldr	r2, [r3, #16]
   2f618:	687b      	ldr	r3, [r7, #4]
   2f61a:	689b      	ldr	r3, [r3, #8]
   2f61c:	0019      	movs	r1, r3
   2f61e:	0010      	movs	r0, r2
   2f620:	4b10      	ldr	r3, [pc, #64]	; (2f664 <keepalive+0x9c>)
   2f622:	4798      	blx	r3
   2f624:	0003      	movs	r3, r0
   2f626:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f628:	69bb      	ldr	r3, [r7, #24]
   2f62a:	2b00      	cmp	r3, #0
   2f62c:	dd0e      	ble.n	2f64c <keepalive+0x84>
   2f62e:	230c      	movs	r3, #12
   2f630:	18fa      	adds	r2, r7, r3
   2f632:	69b9      	ldr	r1, [r7, #24]
   2f634:	687b      	ldr	r3, [r7, #4]
   2f636:	0018      	movs	r0, r3
   2f638:	4b0b      	ldr	r3, [pc, #44]	; (2f668 <keepalive+0xa0>)
   2f63a:	4798      	blx	r3
   2f63c:	0003      	movs	r3, r0
   2f63e:	61fb      	str	r3, [r7, #28]
   2f640:	69fb      	ldr	r3, [r7, #28]
   2f642:	2b00      	cmp	r3, #0
   2f644:	d102      	bne.n	2f64c <keepalive+0x84>
                c->ping_outstanding = 1;
   2f646:	687b      	ldr	r3, [r7, #4]
   2f648:	2201      	movs	r2, #1
   2f64a:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f64c:	69fb      	ldr	r3, [r7, #28]
}
   2f64e:	0018      	movs	r0, r3
   2f650:	46bd      	mov	sp, r7
   2f652:	b008      	add	sp, #32
   2f654:	bd80      	pop	{r7, pc}
   2f656:	46c0      	nop			; (mov r8, r8)
   2f658:	0002ff49 	.word	0x0002ff49
   2f65c:	0002ffed 	.word	0x0002ffed
   2f660:	0002ff75 	.word	0x0002ff75
   2f664:	00030bc1 	.word	0x00030bc1
   2f668:	0002f165 	.word	0x0002f165

0002f66c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f66c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f66e:	b095      	sub	sp, #84	; 0x54
   2f670:	af06      	add	r7, sp, #24
   2f672:	6078      	str	r0, [r7, #4]
   2f674:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f676:	683a      	ldr	r2, [r7, #0]
   2f678:	687b      	ldr	r3, [r7, #4]
   2f67a:	0011      	movs	r1, r2
   2f67c:	0018      	movs	r0, r3
   2f67e:	4b70      	ldr	r3, [pc, #448]	; (2f840 <cycle+0x1d4>)
   2f680:	4798      	blx	r3
   2f682:	0002      	movs	r2, r0
   2f684:	232e      	movs	r3, #46	; 0x2e
   2f686:	18fb      	adds	r3, r7, r3
   2f688:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f68a:	2300      	movs	r3, #0
   2f68c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f68e:	2300      	movs	r3, #0
   2f690:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f692:	232e      	movs	r3, #46	; 0x2e
   2f694:	18fb      	adds	r3, r7, r3
   2f696:	881b      	ldrh	r3, [r3, #0]
   2f698:	2b0d      	cmp	r3, #13
   2f69a:	d900      	bls.n	2f69e <cycle+0x32>
   2f69c:	e0bd      	b.n	2f81a <cycle+0x1ae>
   2f69e:	009a      	lsls	r2, r3, #2
   2f6a0:	4b68      	ldr	r3, [pc, #416]	; (2f844 <cycle+0x1d8>)
   2f6a2:	18d3      	adds	r3, r2, r3
   2f6a4:	681b      	ldr	r3, [r3, #0]
   2f6a6:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f6a8:	687b      	ldr	r3, [r7, #4]
   2f6aa:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f6ac:	687b      	ldr	r3, [r7, #4]
   2f6ae:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f6b0:	001e      	movs	r6, r3
   2f6b2:	2310      	movs	r3, #16
   2f6b4:	18fb      	adds	r3, r7, r3
   2f6b6:	1d1d      	adds	r5, r3, #4
   2f6b8:	2310      	movs	r3, #16
   2f6ba:	18fb      	adds	r3, r7, r3
   2f6bc:	1c5c      	adds	r4, r3, #1
   2f6be:	230c      	movs	r3, #12
   2f6c0:	18f9      	adds	r1, r7, r3
   2f6c2:	2310      	movs	r3, #16
   2f6c4:	18fb      	adds	r3, r7, r3
   2f6c6:	1c98      	adds	r0, r3, #2
   2f6c8:	9604      	str	r6, [sp, #16]
   2f6ca:	9203      	str	r2, [sp, #12]
   2f6cc:	2310      	movs	r3, #16
   2f6ce:	18fb      	adds	r3, r7, r3
   2f6d0:	330c      	adds	r3, #12
   2f6d2:	9302      	str	r3, [sp, #8]
   2f6d4:	2310      	movs	r3, #16
   2f6d6:	18fb      	adds	r3, r7, r3
   2f6d8:	3308      	adds	r3, #8
   2f6da:	9301      	str	r3, [sp, #4]
   2f6dc:	2320      	movs	r3, #32
   2f6de:	18fb      	adds	r3, r7, r3
   2f6e0:	9300      	str	r3, [sp, #0]
   2f6e2:	002b      	movs	r3, r5
   2f6e4:	0022      	movs	r2, r4
   2f6e6:	4c58      	ldr	r4, [pc, #352]	; (2f848 <cycle+0x1dc>)
   2f6e8:	47a0      	blx	r4
   2f6ea:	0003      	movs	r3, r0
   2f6ec:	2b01      	cmp	r3, #1
   2f6ee:	d000      	beq.n	2f6f2 <cycle+0x86>
   2f6f0:	e098      	b.n	2f824 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f6f2:	68fb      	ldr	r3, [r7, #12]
   2f6f4:	b2da      	uxtb	r2, r3
   2f6f6:	2310      	movs	r3, #16
   2f6f8:	18fb      	adds	r3, r7, r3
   2f6fa:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f6fc:	2310      	movs	r3, #16
   2f6fe:	18fa      	adds	r2, r7, r3
   2f700:	2320      	movs	r3, #32
   2f702:	18f9      	adds	r1, r7, r3
   2f704:	687b      	ldr	r3, [r7, #4]
   2f706:	0018      	movs	r0, r3
   2f708:	4b50      	ldr	r3, [pc, #320]	; (2f84c <cycle+0x1e0>)
   2f70a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f70c:	2310      	movs	r3, #16
   2f70e:	18fb      	adds	r3, r7, r3
   2f710:	781b      	ldrb	r3, [r3, #0]
   2f712:	2b00      	cmp	r3, #0
   2f714:	d100      	bne.n	2f718 <cycle+0xac>
   2f716:	e07d      	b.n	2f814 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f718:	2310      	movs	r3, #16
   2f71a:	18fb      	adds	r3, r7, r3
   2f71c:	781b      	ldrb	r3, [r3, #0]
   2f71e:	2b01      	cmp	r3, #1
   2f720:	d10f      	bne.n	2f742 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f722:	687b      	ldr	r3, [r7, #4]
   2f724:	6918      	ldr	r0, [r3, #16]
   2f726:	687b      	ldr	r3, [r7, #4]
   2f728:	689b      	ldr	r3, [r3, #8]
   2f72a:	0019      	movs	r1, r3
   2f72c:	2310      	movs	r3, #16
   2f72e:	18fb      	adds	r3, r7, r3
   2f730:	889b      	ldrh	r3, [r3, #4]
   2f732:	9300      	str	r3, [sp, #0]
   2f734:	2300      	movs	r3, #0
   2f736:	2204      	movs	r2, #4
   2f738:	4c45      	ldr	r4, [pc, #276]	; (2f850 <cycle+0x1e4>)
   2f73a:	47a0      	blx	r4
   2f73c:	0003      	movs	r3, r0
   2f73e:	637b      	str	r3, [r7, #52]	; 0x34
   2f740:	e013      	b.n	2f76a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f742:	2310      	movs	r3, #16
   2f744:	18fb      	adds	r3, r7, r3
   2f746:	781b      	ldrb	r3, [r3, #0]
   2f748:	2b02      	cmp	r3, #2
   2f74a:	d10e      	bne.n	2f76a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f74c:	687b      	ldr	r3, [r7, #4]
   2f74e:	6918      	ldr	r0, [r3, #16]
   2f750:	687b      	ldr	r3, [r7, #4]
   2f752:	689b      	ldr	r3, [r3, #8]
   2f754:	0019      	movs	r1, r3
   2f756:	2310      	movs	r3, #16
   2f758:	18fb      	adds	r3, r7, r3
   2f75a:	889b      	ldrh	r3, [r3, #4]
   2f75c:	9300      	str	r3, [sp, #0]
   2f75e:	2300      	movs	r3, #0
   2f760:	2205      	movs	r2, #5
   2f762:	4c3b      	ldr	r4, [pc, #236]	; (2f850 <cycle+0x1e4>)
   2f764:	47a0      	blx	r4
   2f766:	0003      	movs	r3, r0
   2f768:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f76c:	2b00      	cmp	r3, #0
   2f76e:	dc03      	bgt.n	2f778 <cycle+0x10c>
                    rc = FAILURE;
   2f770:	2301      	movs	r3, #1
   2f772:	425b      	negs	r3, r3
   2f774:	633b      	str	r3, [r7, #48]	; 0x30
   2f776:	e007      	b.n	2f788 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f778:	683a      	ldr	r2, [r7, #0]
   2f77a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f77c:	687b      	ldr	r3, [r7, #4]
   2f77e:	0018      	movs	r0, r3
   2f780:	4b34      	ldr	r3, [pc, #208]	; (2f854 <cycle+0x1e8>)
   2f782:	4798      	blx	r3
   2f784:	0003      	movs	r3, r0
   2f786:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f78a:	3301      	adds	r3, #1
   2f78c:	d142      	bne.n	2f814 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f78e:	46c0      	nop			; (mov r8, r8)
   2f790:	e049      	b.n	2f826 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f792:	687b      	ldr	r3, [r7, #4]
   2f794:	695c      	ldr	r4, [r3, #20]
   2f796:	687b      	ldr	r3, [r7, #4]
   2f798:	68db      	ldr	r3, [r3, #12]
   2f79a:	220a      	movs	r2, #10
   2f79c:	18ba      	adds	r2, r7, r2
   2f79e:	2109      	movs	r1, #9
   2f7a0:	1879      	adds	r1, r7, r1
   2f7a2:	2008      	movs	r0, #8
   2f7a4:	1838      	adds	r0, r7, r0
   2f7a6:	9300      	str	r3, [sp, #0]
   2f7a8:	0023      	movs	r3, r4
   2f7aa:	4c2b      	ldr	r4, [pc, #172]	; (2f858 <cycle+0x1ec>)
   2f7ac:	47a0      	blx	r4
   2f7ae:	0003      	movs	r3, r0
   2f7b0:	2b01      	cmp	r3, #1
   2f7b2:	d003      	beq.n	2f7bc <cycle+0x150>
                rc = FAILURE;
   2f7b4:	2301      	movs	r3, #1
   2f7b6:	425b      	negs	r3, r3
   2f7b8:	633b      	str	r3, [r7, #48]	; 0x30
   2f7ba:	e023      	b.n	2f804 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f7bc:	687b      	ldr	r3, [r7, #4]
   2f7be:	6918      	ldr	r0, [r3, #16]
   2f7c0:	687b      	ldr	r3, [r7, #4]
   2f7c2:	689b      	ldr	r3, [r3, #8]
   2f7c4:	0019      	movs	r1, r3
   2f7c6:	230a      	movs	r3, #10
   2f7c8:	18fb      	adds	r3, r7, r3
   2f7ca:	881b      	ldrh	r3, [r3, #0]
   2f7cc:	9300      	str	r3, [sp, #0]
   2f7ce:	2300      	movs	r3, #0
   2f7d0:	2206      	movs	r2, #6
   2f7d2:	4c1f      	ldr	r4, [pc, #124]	; (2f850 <cycle+0x1e4>)
   2f7d4:	47a0      	blx	r4
   2f7d6:	0003      	movs	r3, r0
   2f7d8:	637b      	str	r3, [r7, #52]	; 0x34
   2f7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f7dc:	2b00      	cmp	r3, #0
   2f7de:	dc03      	bgt.n	2f7e8 <cycle+0x17c>
                rc = FAILURE;
   2f7e0:	2301      	movs	r3, #1
   2f7e2:	425b      	negs	r3, r3
   2f7e4:	633b      	str	r3, [r7, #48]	; 0x30
   2f7e6:	e00d      	b.n	2f804 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f7e8:	683a      	ldr	r2, [r7, #0]
   2f7ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f7ec:	687b      	ldr	r3, [r7, #4]
   2f7ee:	0018      	movs	r0, r3
   2f7f0:	4b18      	ldr	r3, [pc, #96]	; (2f854 <cycle+0x1e8>)
   2f7f2:	4798      	blx	r3
   2f7f4:	0003      	movs	r3, r0
   2f7f6:	633b      	str	r3, [r7, #48]	; 0x30
   2f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f7fa:	2b00      	cmp	r3, #0
   2f7fc:	d002      	beq.n	2f804 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f7fe:	2301      	movs	r3, #1
   2f800:	425b      	negs	r3, r3
   2f802:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f806:	3301      	adds	r3, #1
   2f808:	d106      	bne.n	2f818 <cycle+0x1ac>
                goto exit; // there was a problem
   2f80a:	e00c      	b.n	2f826 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f80c:	687b      	ldr	r3, [r7, #4]
   2f80e:	2200      	movs	r2, #0
   2f810:	771a      	strb	r2, [r3, #28]
            break;
   2f812:	e002      	b.n	2f81a <cycle+0x1ae>
            break;
   2f814:	46c0      	nop			; (mov r8, r8)
   2f816:	e000      	b.n	2f81a <cycle+0x1ae>
            break;
   2f818:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f81a:	687b      	ldr	r3, [r7, #4]
   2f81c:	0018      	movs	r0, r3
   2f81e:	4b0f      	ldr	r3, [pc, #60]	; (2f85c <cycle+0x1f0>)
   2f820:	4798      	blx	r3
   2f822:	e000      	b.n	2f826 <cycle+0x1ba>
                goto exit;
   2f824:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f828:	2b00      	cmp	r3, #0
   2f82a:	d103      	bne.n	2f834 <cycle+0x1c8>
        rc = packet_type;
   2f82c:	232e      	movs	r3, #46	; 0x2e
   2f82e:	18fb      	adds	r3, r7, r3
   2f830:	881b      	ldrh	r3, [r3, #0]
   2f832:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f836:	0018      	movs	r0, r3
   2f838:	46bd      	mov	sp, r7
   2f83a:	b00f      	add	sp, #60	; 0x3c
   2f83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f83e:	46c0      	nop			; (mov r8, r8)
   2f840:	0002f321 	.word	0x0002f321
   2f844:	0003b5b0 	.word	0x0003b5b0
   2f848:	00030be5 	.word	0x00030be5
   2f84c:	0002f4dd 	.word	0x0002f4dd
   2f850:	000313dd 	.word	0x000313dd
   2f854:	0002f165 	.word	0x0002f165
   2f858:	00030ce9 	.word	0x00030ce9
   2f85c:	0002f5c9 	.word	0x0002f5c9

0002f860 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f860:	b580      	push	{r7, lr}
   2f862:	b086      	sub	sp, #24
   2f864:	af00      	add	r7, sp, #0
   2f866:	6078      	str	r0, [r7, #4]
   2f868:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f86a:	2300      	movs	r3, #0
   2f86c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f86e:	2308      	movs	r3, #8
   2f870:	18fb      	adds	r3, r7, r3
   2f872:	0018      	movs	r0, r3
   2f874:	4b11      	ldr	r3, [pc, #68]	; (2f8bc <MQTTYield+0x5c>)
   2f876:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f878:	683a      	ldr	r2, [r7, #0]
   2f87a:	2308      	movs	r3, #8
   2f87c:	18fb      	adds	r3, r7, r3
   2f87e:	0011      	movs	r1, r2
   2f880:	0018      	movs	r0, r3
   2f882:	4b0f      	ldr	r3, [pc, #60]	; (2f8c0 <MQTTYield+0x60>)
   2f884:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f886:	2308      	movs	r3, #8
   2f888:	18fa      	adds	r2, r7, r3
   2f88a:	687b      	ldr	r3, [r7, #4]
   2f88c:	0011      	movs	r1, r2
   2f88e:	0018      	movs	r0, r3
   2f890:	4b0c      	ldr	r3, [pc, #48]	; (2f8c4 <MQTTYield+0x64>)
   2f892:	4798      	blx	r3
   2f894:	0003      	movs	r3, r0
   2f896:	3301      	adds	r3, #1
   2f898:	d103      	bne.n	2f8a2 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f89a:	2301      	movs	r3, #1
   2f89c:	425b      	negs	r3, r3
   2f89e:	617b      	str	r3, [r7, #20]
            break;
   2f8a0:	e006      	b.n	2f8b0 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f8a2:	2308      	movs	r3, #8
   2f8a4:	18fb      	adds	r3, r7, r3
   2f8a6:	0018      	movs	r0, r3
   2f8a8:	4b07      	ldr	r3, [pc, #28]	; (2f8c8 <MQTTYield+0x68>)
   2f8aa:	4798      	blx	r3
   2f8ac:	1e03      	subs	r3, r0, #0
   2f8ae:	d0ea      	beq.n	2f886 <MQTTYield+0x26>
        
    return rc;
   2f8b0:	697b      	ldr	r3, [r7, #20]
}
   2f8b2:	0018      	movs	r0, r3
   2f8b4:	46bd      	mov	sp, r7
   2f8b6:	b006      	add	sp, #24
   2f8b8:	bd80      	pop	{r7, pc}
   2f8ba:	46c0      	nop			; (mov r8, r8)
   2f8bc:	0002ffed 	.word	0x0002ffed
   2f8c0:	0002ff75 	.word	0x0002ff75
   2f8c4:	0002f66d 	.word	0x0002f66d
   2f8c8:	0002ff49 	.word	0x0002ff49

0002f8cc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f8cc:	b580      	push	{r7, lr}
   2f8ce:	b086      	sub	sp, #24
   2f8d0:	af00      	add	r7, sp, #0
   2f8d2:	60f8      	str	r0, [r7, #12]
   2f8d4:	60b9      	str	r1, [r7, #8]
   2f8d6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f8d8:	2301      	movs	r3, #1
   2f8da:	425b      	negs	r3, r3
   2f8dc:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f8de:	687b      	ldr	r3, [r7, #4]
   2f8e0:	0018      	movs	r0, r3
   2f8e2:	4b0b      	ldr	r3, [pc, #44]	; (2f910 <waitfor+0x44>)
   2f8e4:	4798      	blx	r3
   2f8e6:	1e03      	subs	r3, r0, #0
   2f8e8:	d10c      	bne.n	2f904 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f8ea:	687a      	ldr	r2, [r7, #4]
   2f8ec:	68fb      	ldr	r3, [r7, #12]
   2f8ee:	0011      	movs	r1, r2
   2f8f0:	0018      	movs	r0, r3
   2f8f2:	4b08      	ldr	r3, [pc, #32]	; (2f914 <waitfor+0x48>)
   2f8f4:	4798      	blx	r3
   2f8f6:	0003      	movs	r3, r0
   2f8f8:	617b      	str	r3, [r7, #20]
   2f8fa:	697a      	ldr	r2, [r7, #20]
   2f8fc:	68bb      	ldr	r3, [r7, #8]
   2f8fe:	429a      	cmp	r2, r3
   2f900:	d1ed      	bne.n	2f8de <waitfor+0x12>
   2f902:	e000      	b.n	2f906 <waitfor+0x3a>
            break; // we timed out
   2f904:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f906:	697b      	ldr	r3, [r7, #20]
}
   2f908:	0018      	movs	r0, r3
   2f90a:	46bd      	mov	sp, r7
   2f90c:	b006      	add	sp, #24
   2f90e:	bd80      	pop	{r7, pc}
   2f910:	0002ff49 	.word	0x0002ff49
   2f914:	0002f66d 	.word	0x0002f66d

0002f918 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f918:	b590      	push	{r4, r7, lr}
   2f91a:	b09f      	sub	sp, #124	; 0x7c
   2f91c:	af00      	add	r7, sp, #0
   2f91e:	6078      	str	r0, [r7, #4]
   2f920:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f922:	2301      	movs	r3, #1
   2f924:	425b      	negs	r3, r3
   2f926:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f928:	230c      	movs	r3, #12
   2f92a:	18fa      	adds	r2, r7, r3
   2f92c:	4b41      	ldr	r3, [pc, #260]	; (2fa34 <MQTTConnect+0x11c>)
   2f92e:	0010      	movs	r0, r2
   2f930:	0019      	movs	r1, r3
   2f932:	2358      	movs	r3, #88	; 0x58
   2f934:	001a      	movs	r2, r3
   2f936:	4b40      	ldr	r3, [pc, #256]	; (2fa38 <MQTTConnect+0x120>)
   2f938:	4798      	blx	r3
    int len = 0;
   2f93a:	2300      	movs	r3, #0
   2f93c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f93e:	687b      	ldr	r3, [r7, #4]
   2f940:	6a1b      	ldr	r3, [r3, #32]
   2f942:	2b00      	cmp	r3, #0
   2f944:	d166      	bne.n	2fa14 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f946:	2364      	movs	r3, #100	; 0x64
   2f948:	18fb      	adds	r3, r7, r3
   2f94a:	0018      	movs	r0, r3
   2f94c:	4b3b      	ldr	r3, [pc, #236]	; (2fa3c <MQTTConnect+0x124>)
   2f94e:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f950:	687b      	ldr	r3, [r7, #4]
   2f952:	685a      	ldr	r2, [r3, #4]
   2f954:	2364      	movs	r3, #100	; 0x64
   2f956:	18fb      	adds	r3, r7, r3
   2f958:	0011      	movs	r1, r2
   2f95a:	0018      	movs	r0, r3
   2f95c:	4b38      	ldr	r3, [pc, #224]	; (2fa40 <MQTTConnect+0x128>)
   2f95e:	4798      	blx	r3

    if (options == 0)
   2f960:	683b      	ldr	r3, [r7, #0]
   2f962:	2b00      	cmp	r3, #0
   2f964:	d102      	bne.n	2f96c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f966:	230c      	movs	r3, #12
   2f968:	18fb      	adds	r3, r7, r3
   2f96a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f96c:	683b      	ldr	r3, [r7, #0]
   2f96e:	8b1b      	ldrh	r3, [r3, #24]
   2f970:	001a      	movs	r2, r3
   2f972:	687b      	ldr	r3, [r7, #4]
   2f974:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f976:	687b      	ldr	r3, [r7, #4]
   2f978:	3354      	adds	r3, #84	; 0x54
   2f97a:	001a      	movs	r2, r3
   2f97c:	687b      	ldr	r3, [r7, #4]
   2f97e:	699b      	ldr	r3, [r3, #24]
   2f980:	0019      	movs	r1, r3
   2f982:	0010      	movs	r0, r2
   2f984:	4b2f      	ldr	r3, [pc, #188]	; (2fa44 <MQTTConnect+0x12c>)
   2f986:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f988:	687b      	ldr	r3, [r7, #4]
   2f98a:	6918      	ldr	r0, [r3, #16]
   2f98c:	687b      	ldr	r3, [r7, #4]
   2f98e:	689b      	ldr	r3, [r3, #8]
   2f990:	0019      	movs	r1, r3
   2f992:	683b      	ldr	r3, [r7, #0]
   2f994:	001a      	movs	r2, r3
   2f996:	4b2c      	ldr	r3, [pc, #176]	; (2fa48 <MQTTConnect+0x130>)
   2f998:	4798      	blx	r3
   2f99a:	0003      	movs	r3, r0
   2f99c:	673b      	str	r3, [r7, #112]	; 0x70
   2f99e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f9a0:	2b00      	cmp	r3, #0
   2f9a2:	dd39      	ble.n	2fa18 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f9a4:	2364      	movs	r3, #100	; 0x64
   2f9a6:	18fa      	adds	r2, r7, r3
   2f9a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f9aa:	687b      	ldr	r3, [r7, #4]
   2f9ac:	0018      	movs	r0, r3
   2f9ae:	4b27      	ldr	r3, [pc, #156]	; (2fa4c <MQTTConnect+0x134>)
   2f9b0:	4798      	blx	r3
   2f9b2:	0003      	movs	r3, r0
   2f9b4:	677b      	str	r3, [r7, #116]	; 0x74
   2f9b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f9b8:	2b00      	cmp	r3, #0
   2f9ba:	d12f      	bne.n	2fa1c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f9bc:	2364      	movs	r3, #100	; 0x64
   2f9be:	18fa      	adds	r2, r7, r3
   2f9c0:	687b      	ldr	r3, [r7, #4]
   2f9c2:	2102      	movs	r1, #2
   2f9c4:	0018      	movs	r0, r3
   2f9c6:	4b22      	ldr	r3, [pc, #136]	; (2fa50 <MQTTConnect+0x138>)
   2f9c8:	4798      	blx	r3
   2f9ca:	0003      	movs	r3, r0
   2f9cc:	2b02      	cmp	r3, #2
   2f9ce:	d11d      	bne.n	2fa0c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f9d0:	230b      	movs	r3, #11
   2f9d2:	18fb      	adds	r3, r7, r3
   2f9d4:	22ff      	movs	r2, #255	; 0xff
   2f9d6:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f9d8:	230a      	movs	r3, #10
   2f9da:	18fb      	adds	r3, r7, r3
   2f9dc:	2200      	movs	r2, #0
   2f9de:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f9e0:	687b      	ldr	r3, [r7, #4]
   2f9e2:	695a      	ldr	r2, [r3, #20]
   2f9e4:	687b      	ldr	r3, [r7, #4]
   2f9e6:	68db      	ldr	r3, [r3, #12]
   2f9e8:	210b      	movs	r1, #11
   2f9ea:	1879      	adds	r1, r7, r1
   2f9ec:	200a      	movs	r0, #10
   2f9ee:	1838      	adds	r0, r7, r0
   2f9f0:	4c18      	ldr	r4, [pc, #96]	; (2fa54 <MQTTConnect+0x13c>)
   2f9f2:	47a0      	blx	r4
   2f9f4:	0003      	movs	r3, r0
   2f9f6:	2b01      	cmp	r3, #1
   2f9f8:	d104      	bne.n	2fa04 <MQTTConnect+0xec>
            rc = connack_rc;
   2f9fa:	230b      	movs	r3, #11
   2f9fc:	18fb      	adds	r3, r7, r3
   2f9fe:	781b      	ldrb	r3, [r3, #0]
   2fa00:	677b      	str	r3, [r7, #116]	; 0x74
   2fa02:	e00c      	b.n	2fa1e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fa04:	2301      	movs	r3, #1
   2fa06:	425b      	negs	r3, r3
   2fa08:	677b      	str	r3, [r7, #116]	; 0x74
   2fa0a:	e008      	b.n	2fa1e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fa0c:	2301      	movs	r3, #1
   2fa0e:	425b      	negs	r3, r3
   2fa10:	677b      	str	r3, [r7, #116]	; 0x74
   2fa12:	e004      	b.n	2fa1e <MQTTConnect+0x106>
		goto exit;
   2fa14:	46c0      	nop			; (mov r8, r8)
   2fa16:	e002      	b.n	2fa1e <MQTTConnect+0x106>
        goto exit;
   2fa18:	46c0      	nop			; (mov r8, r8)
   2fa1a:	e000      	b.n	2fa1e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fa1c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fa1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fa20:	2b00      	cmp	r3, #0
   2fa22:	d102      	bne.n	2fa2a <MQTTConnect+0x112>
        c->isconnected = 1;
   2fa24:	687b      	ldr	r3, [r7, #4]
   2fa26:	2201      	movs	r2, #1
   2fa28:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fa2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fa2c:	0018      	movs	r0, r3
   2fa2e:	46bd      	mov	sp, r7
   2fa30:	b01f      	add	sp, #124	; 0x7c
   2fa32:	bd90      	pop	{r4, r7, pc}
   2fa34:	0003b5e8 	.word	0x0003b5e8
   2fa38:	000361cd 	.word	0x000361cd
   2fa3c:	0002ffed 	.word	0x0002ffed
   2fa40:	0002ff75 	.word	0x0002ff75
   2fa44:	0002ff9d 	.word	0x0002ff9d
   2fa48:	000307c9 	.word	0x000307c9
   2fa4c:	0002f165 	.word	0x0002f165
   2fa50:	0002f8cd 	.word	0x0002f8cd
   2fa54:	00030a45 	.word	0x00030a45

0002fa58 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fa58:	b5b0      	push	{r4, r5, r7, lr}
   2fa5a:	b096      	sub	sp, #88	; 0x58
   2fa5c:	af04      	add	r7, sp, #16
   2fa5e:	60f8      	str	r0, [r7, #12]
   2fa60:	60b9      	str	r1, [r7, #8]
   2fa62:	603b      	str	r3, [r7, #0]
   2fa64:	1dfb      	adds	r3, r7, #7
   2fa66:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fa68:	2301      	movs	r3, #1
   2fa6a:	425b      	negs	r3, r3
   2fa6c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fa6e:	2300      	movs	r3, #0
   2fa70:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fa72:	2324      	movs	r3, #36	; 0x24
   2fa74:	18fb      	adds	r3, r7, r3
   2fa76:	2200      	movs	r2, #0
   2fa78:	601a      	str	r2, [r3, #0]
   2fa7a:	2324      	movs	r3, #36	; 0x24
   2fa7c:	18fb      	adds	r3, r7, r3
   2fa7e:	2200      	movs	r2, #0
   2fa80:	605a      	str	r2, [r3, #4]
   2fa82:	2324      	movs	r3, #36	; 0x24
   2fa84:	18fb      	adds	r3, r7, r3
   2fa86:	2200      	movs	r2, #0
   2fa88:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fa8a:	1dfb      	adds	r3, r7, #7
   2fa8c:	781b      	ldrb	r3, [r3, #0]
   2fa8e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fa90:	2324      	movs	r3, #36	; 0x24
   2fa92:	18fb      	adds	r3, r7, r3
   2fa94:	68ba      	ldr	r2, [r7, #8]
   2fa96:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fa98:	68fb      	ldr	r3, [r7, #12]
   2fa9a:	6a1b      	ldr	r3, [r3, #32]
   2fa9c:	2b00      	cmp	r3, #0
   2fa9e:	d100      	bne.n	2faa2 <MQTTSubscribe+0x4a>
   2faa0:	e088      	b.n	2fbb4 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2faa2:	2330      	movs	r3, #48	; 0x30
   2faa4:	18fb      	adds	r3, r7, r3
   2faa6:	0018      	movs	r0, r3
   2faa8:	4b47      	ldr	r3, [pc, #284]	; (2fbc8 <MQTTSubscribe+0x170>)
   2faaa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2faac:	68fb      	ldr	r3, [r7, #12]
   2faae:	685a      	ldr	r2, [r3, #4]
   2fab0:	2330      	movs	r3, #48	; 0x30
   2fab2:	18fb      	adds	r3, r7, r3
   2fab4:	0011      	movs	r1, r2
   2fab6:	0018      	movs	r0, r3
   2fab8:	4b44      	ldr	r3, [pc, #272]	; (2fbcc <MQTTSubscribe+0x174>)
   2faba:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fabc:	68fb      	ldr	r3, [r7, #12]
   2fabe:	691c      	ldr	r4, [r3, #16]
   2fac0:	68fb      	ldr	r3, [r7, #12]
   2fac2:	689b      	ldr	r3, [r3, #8]
   2fac4:	001d      	movs	r5, r3
   2fac6:	68fb      	ldr	r3, [r7, #12]
   2fac8:	0018      	movs	r0, r3
   2faca:	4b41      	ldr	r3, [pc, #260]	; (2fbd0 <MQTTSubscribe+0x178>)
   2facc:	4798      	blx	r3
   2face:	0003      	movs	r3, r0
   2fad0:	b29a      	uxth	r2, r3
   2fad2:	2320      	movs	r3, #32
   2fad4:	18fb      	adds	r3, r7, r3
   2fad6:	9302      	str	r3, [sp, #8]
   2fad8:	2324      	movs	r3, #36	; 0x24
   2fada:	18fb      	adds	r3, r7, r3
   2fadc:	9301      	str	r3, [sp, #4]
   2fade:	2301      	movs	r3, #1
   2fae0:	9300      	str	r3, [sp, #0]
   2fae2:	0013      	movs	r3, r2
   2fae4:	2200      	movs	r2, #0
   2fae6:	0029      	movs	r1, r5
   2fae8:	0020      	movs	r0, r4
   2faea:	4c3a      	ldr	r4, [pc, #232]	; (2fbd4 <MQTTSubscribe+0x17c>)
   2faec:	47a0      	blx	r4
   2faee:	0003      	movs	r3, r0
   2faf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2faf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2faf4:	2b00      	cmp	r3, #0
   2faf6:	dd5f      	ble.n	2fbb8 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2faf8:	2330      	movs	r3, #48	; 0x30
   2fafa:	18fa      	adds	r2, r7, r3
   2fafc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fafe:	68fb      	ldr	r3, [r7, #12]
   2fb00:	0018      	movs	r0, r3
   2fb02:	4b35      	ldr	r3, [pc, #212]	; (2fbd8 <MQTTSubscribe+0x180>)
   2fb04:	4798      	blx	r3
   2fb06:	0003      	movs	r3, r0
   2fb08:	647b      	str	r3, [r7, #68]	; 0x44
   2fb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fb0c:	2b00      	cmp	r3, #0
   2fb0e:	d155      	bne.n	2fbbc <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fb10:	2330      	movs	r3, #48	; 0x30
   2fb12:	18fa      	adds	r2, r7, r3
   2fb14:	68fb      	ldr	r3, [r7, #12]
   2fb16:	2109      	movs	r1, #9
   2fb18:	0018      	movs	r0, r3
   2fb1a:	4b30      	ldr	r3, [pc, #192]	; (2fbdc <MQTTSubscribe+0x184>)
   2fb1c:	4798      	blx	r3
   2fb1e:	0003      	movs	r3, r0
   2fb20:	2b09      	cmp	r3, #9
   2fb22:	d143      	bne.n	2fbac <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fb24:	2300      	movs	r3, #0
   2fb26:	61fb      	str	r3, [r7, #28]
   2fb28:	2301      	movs	r3, #1
   2fb2a:	425b      	negs	r3, r3
   2fb2c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fb2e:	68fb      	ldr	r3, [r7, #12]
   2fb30:	695a      	ldr	r2, [r3, #20]
   2fb32:	68fb      	ldr	r3, [r7, #12]
   2fb34:	68db      	ldr	r3, [r3, #12]
   2fb36:	001c      	movs	r4, r3
   2fb38:	2318      	movs	r3, #24
   2fb3a:	18fb      	adds	r3, r7, r3
   2fb3c:	211c      	movs	r1, #28
   2fb3e:	1879      	adds	r1, r7, r1
   2fb40:	2016      	movs	r0, #22
   2fb42:	1838      	adds	r0, r7, r0
   2fb44:	9401      	str	r4, [sp, #4]
   2fb46:	9200      	str	r2, [sp, #0]
   2fb48:	000a      	movs	r2, r1
   2fb4a:	2101      	movs	r1, #1
   2fb4c:	4c24      	ldr	r4, [pc, #144]	; (2fbe0 <MQTTSubscribe+0x188>)
   2fb4e:	47a0      	blx	r4
   2fb50:	0003      	movs	r3, r0
   2fb52:	2b01      	cmp	r3, #1
   2fb54:	d101      	bne.n	2fb5a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fb56:	69bb      	ldr	r3, [r7, #24]
   2fb58:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fb5c:	2b80      	cmp	r3, #128	; 0x80
   2fb5e:	d02e      	beq.n	2fbbe <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fb60:	2300      	movs	r3, #0
   2fb62:	643b      	str	r3, [r7, #64]	; 0x40
   2fb64:	e01e      	b.n	2fba4 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fb66:	68fa      	ldr	r2, [r7, #12]
   2fb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb6a:	3304      	adds	r3, #4
   2fb6c:	00db      	lsls	r3, r3, #3
   2fb6e:	18d3      	adds	r3, r2, r3
   2fb70:	3304      	adds	r3, #4
   2fb72:	681b      	ldr	r3, [r3, #0]
   2fb74:	2b00      	cmp	r3, #0
   2fb76:	d112      	bne.n	2fb9e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fb78:	68fa      	ldr	r2, [r7, #12]
   2fb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb7c:	3304      	adds	r3, #4
   2fb7e:	00db      	lsls	r3, r3, #3
   2fb80:	18d3      	adds	r3, r2, r3
   2fb82:	3304      	adds	r3, #4
   2fb84:	68ba      	ldr	r2, [r7, #8]
   2fb86:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fb88:	68fa      	ldr	r2, [r7, #12]
   2fb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb8c:	3304      	adds	r3, #4
   2fb8e:	00db      	lsls	r3, r3, #3
   2fb90:	18d3      	adds	r3, r2, r3
   2fb92:	3308      	adds	r3, #8
   2fb94:	683a      	ldr	r2, [r7, #0]
   2fb96:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fb98:	2300      	movs	r3, #0
   2fb9a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fb9c:	e00f      	b.n	2fbbe <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fba0:	3301      	adds	r3, #1
   2fba2:	643b      	str	r3, [r7, #64]	; 0x40
   2fba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fba6:	2b04      	cmp	r3, #4
   2fba8:	dddd      	ble.n	2fb66 <MQTTSubscribe+0x10e>
   2fbaa:	e008      	b.n	2fbbe <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fbac:	2301      	movs	r3, #1
   2fbae:	425b      	negs	r3, r3
   2fbb0:	647b      	str	r3, [r7, #68]	; 0x44
   2fbb2:	e004      	b.n	2fbbe <MQTTSubscribe+0x166>
		goto exit;
   2fbb4:	46c0      	nop			; (mov r8, r8)
   2fbb6:	e002      	b.n	2fbbe <MQTTSubscribe+0x166>
        goto exit;
   2fbb8:	46c0      	nop			; (mov r8, r8)
   2fbba:	e000      	b.n	2fbbe <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fbbc:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fbbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fbc0:	0018      	movs	r0, r3
   2fbc2:	46bd      	mov	sp, r7
   2fbc4:	b012      	add	sp, #72	; 0x48
   2fbc6:	bdb0      	pop	{r4, r5, r7, pc}
   2fbc8:	0002ffed 	.word	0x0002ffed
   2fbcc:	0002ff75 	.word	0x0002ff75
   2fbd0:	0002f135 	.word	0x0002f135
   2fbd4:	00031525 	.word	0x00031525
   2fbd8:	0002f165 	.word	0x0002f165
   2fbdc:	0002f8cd 	.word	0x0002f8cd
   2fbe0:	00031675 	.word	0x00031675

0002fbe4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fbe6:	46ce      	mov	lr, r9
   2fbe8:	4647      	mov	r7, r8
   2fbea:	b580      	push	{r7, lr}
   2fbec:	b097      	sub	sp, #92	; 0x5c
   2fbee:	af08      	add	r7, sp, #32
   2fbf0:	60f8      	str	r0, [r7, #12]
   2fbf2:	60b9      	str	r1, [r7, #8]
   2fbf4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fbf6:	2301      	movs	r3, #1
   2fbf8:	425b      	negs	r3, r3
   2fbfa:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fbfc:	2318      	movs	r3, #24
   2fbfe:	18fb      	adds	r3, r7, r3
   2fc00:	2200      	movs	r2, #0
   2fc02:	601a      	str	r2, [r3, #0]
   2fc04:	2318      	movs	r3, #24
   2fc06:	18fb      	adds	r3, r7, r3
   2fc08:	2200      	movs	r2, #0
   2fc0a:	605a      	str	r2, [r3, #4]
   2fc0c:	2318      	movs	r3, #24
   2fc0e:	18fb      	adds	r3, r7, r3
   2fc10:	2200      	movs	r2, #0
   2fc12:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fc14:	2318      	movs	r3, #24
   2fc16:	18fb      	adds	r3, r7, r3
   2fc18:	68ba      	ldr	r2, [r7, #8]
   2fc1a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fc1c:	2300      	movs	r3, #0
   2fc1e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fc20:	68fb      	ldr	r3, [r7, #12]
   2fc22:	6a1b      	ldr	r3, [r3, #32]
   2fc24:	2b00      	cmp	r3, #0
   2fc26:	d100      	bne.n	2fc2a <MQTTPublish+0x46>
   2fc28:	e0a0      	b.n	2fd6c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fc2a:	2324      	movs	r3, #36	; 0x24
   2fc2c:	18fb      	adds	r3, r7, r3
   2fc2e:	0018      	movs	r0, r3
   2fc30:	4b55      	ldr	r3, [pc, #340]	; (2fd88 <MQTTPublish+0x1a4>)
   2fc32:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fc34:	68fb      	ldr	r3, [r7, #12]
   2fc36:	685a      	ldr	r2, [r3, #4]
   2fc38:	2324      	movs	r3, #36	; 0x24
   2fc3a:	18fb      	adds	r3, r7, r3
   2fc3c:	0011      	movs	r1, r2
   2fc3e:	0018      	movs	r0, r3
   2fc40:	4b52      	ldr	r3, [pc, #328]	; (2fd8c <MQTTPublish+0x1a8>)
   2fc42:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fc44:	687b      	ldr	r3, [r7, #4]
   2fc46:	781b      	ldrb	r3, [r3, #0]
   2fc48:	2b01      	cmp	r3, #1
   2fc4a:	d003      	beq.n	2fc54 <MQTTPublish+0x70>
   2fc4c:	687b      	ldr	r3, [r7, #4]
   2fc4e:	781b      	ldrb	r3, [r3, #0]
   2fc50:	2b02      	cmp	r3, #2
   2fc52:	d107      	bne.n	2fc64 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fc54:	68fb      	ldr	r3, [r7, #12]
   2fc56:	0018      	movs	r0, r3
   2fc58:	4b4d      	ldr	r3, [pc, #308]	; (2fd90 <MQTTPublish+0x1ac>)
   2fc5a:	4798      	blx	r3
   2fc5c:	0003      	movs	r3, r0
   2fc5e:	b29a      	uxth	r2, r3
   2fc60:	687b      	ldr	r3, [r7, #4]
   2fc62:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fc64:	68fb      	ldr	r3, [r7, #12]
   2fc66:	691b      	ldr	r3, [r3, #16]
   2fc68:	469c      	mov	ip, r3
   2fc6a:	68fb      	ldr	r3, [r7, #12]
   2fc6c:	689b      	ldr	r3, [r3, #8]
   2fc6e:	001d      	movs	r5, r3
   2fc70:	687b      	ldr	r3, [r7, #4]
   2fc72:	781b      	ldrb	r3, [r3, #0]
   2fc74:	001e      	movs	r6, r3
   2fc76:	687b      	ldr	r3, [r7, #4]
   2fc78:	785b      	ldrb	r3, [r3, #1]
   2fc7a:	4698      	mov	r8, r3
   2fc7c:	687b      	ldr	r3, [r7, #4]
   2fc7e:	889b      	ldrh	r3, [r3, #4]
   2fc80:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fc82:	687b      	ldr	r3, [r7, #4]
   2fc84:	689a      	ldr	r2, [r3, #8]
   2fc86:	687b      	ldr	r3, [r7, #4]
   2fc88:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fc8a:	9306      	str	r3, [sp, #24]
   2fc8c:	9205      	str	r2, [sp, #20]
   2fc8e:	2318      	movs	r3, #24
   2fc90:	18fa      	adds	r2, r7, r3
   2fc92:	2308      	movs	r3, #8
   2fc94:	446b      	add	r3, sp
   2fc96:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fc98:	c313      	stmia	r3!, {r0, r1, r4}
   2fc9a:	464b      	mov	r3, r9
   2fc9c:	9301      	str	r3, [sp, #4]
   2fc9e:	4643      	mov	r3, r8
   2fca0:	9300      	str	r3, [sp, #0]
   2fca2:	0033      	movs	r3, r6
   2fca4:	2200      	movs	r2, #0
   2fca6:	0029      	movs	r1, r5
   2fca8:	4660      	mov	r0, ip
   2fcaa:	4c3a      	ldr	r4, [pc, #232]	; (2fd94 <MQTTPublish+0x1b0>)
   2fcac:	47a0      	blx	r4
   2fcae:	0003      	movs	r3, r0
   2fcb0:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fcb4:	2b00      	cmp	r3, #0
   2fcb6:	dd5b      	ble.n	2fd70 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fcb8:	2324      	movs	r3, #36	; 0x24
   2fcba:	18fa      	adds	r2, r7, r3
   2fcbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fcbe:	68fb      	ldr	r3, [r7, #12]
   2fcc0:	0018      	movs	r0, r3
   2fcc2:	4b35      	ldr	r3, [pc, #212]	; (2fd98 <MQTTPublish+0x1b4>)
   2fcc4:	4798      	blx	r3
   2fcc6:	0003      	movs	r3, r0
   2fcc8:	637b      	str	r3, [r7, #52]	; 0x34
   2fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fccc:	2b00      	cmp	r3, #0
   2fcce:	d151      	bne.n	2fd74 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fcd0:	687b      	ldr	r3, [r7, #4]
   2fcd2:	781b      	ldrb	r3, [r3, #0]
   2fcd4:	2b01      	cmp	r3, #1
   2fcd6:	d122      	bne.n	2fd1e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fcd8:	2324      	movs	r3, #36	; 0x24
   2fcda:	18fa      	adds	r2, r7, r3
   2fcdc:	68fb      	ldr	r3, [r7, #12]
   2fcde:	2104      	movs	r1, #4
   2fce0:	0018      	movs	r0, r3
   2fce2:	4b2e      	ldr	r3, [pc, #184]	; (2fd9c <MQTTPublish+0x1b8>)
   2fce4:	4798      	blx	r3
   2fce6:	0003      	movs	r3, r0
   2fce8:	2b04      	cmp	r3, #4
   2fcea:	d114      	bne.n	2fd16 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fcec:	68fb      	ldr	r3, [r7, #12]
   2fcee:	695c      	ldr	r4, [r3, #20]
   2fcf0:	68fb      	ldr	r3, [r7, #12]
   2fcf2:	68db      	ldr	r3, [r3, #12]
   2fcf4:	2216      	movs	r2, #22
   2fcf6:	18ba      	adds	r2, r7, r2
   2fcf8:	2115      	movs	r1, #21
   2fcfa:	1879      	adds	r1, r7, r1
   2fcfc:	2014      	movs	r0, #20
   2fcfe:	1838      	adds	r0, r7, r0
   2fd00:	9300      	str	r3, [sp, #0]
   2fd02:	0023      	movs	r3, r4
   2fd04:	4c26      	ldr	r4, [pc, #152]	; (2fda0 <MQTTPublish+0x1bc>)
   2fd06:	47a0      	blx	r4
   2fd08:	0003      	movs	r3, r0
   2fd0a:	2b01      	cmp	r3, #1
   2fd0c:	d033      	beq.n	2fd76 <MQTTPublish+0x192>
                rc = FAILURE;
   2fd0e:	2301      	movs	r3, #1
   2fd10:	425b      	negs	r3, r3
   2fd12:	637b      	str	r3, [r7, #52]	; 0x34
   2fd14:	e02f      	b.n	2fd76 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fd16:	2301      	movs	r3, #1
   2fd18:	425b      	negs	r3, r3
   2fd1a:	637b      	str	r3, [r7, #52]	; 0x34
   2fd1c:	e02b      	b.n	2fd76 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fd1e:	687b      	ldr	r3, [r7, #4]
   2fd20:	781b      	ldrb	r3, [r3, #0]
   2fd22:	2b02      	cmp	r3, #2
   2fd24:	d127      	bne.n	2fd76 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fd26:	2324      	movs	r3, #36	; 0x24
   2fd28:	18fa      	adds	r2, r7, r3
   2fd2a:	68fb      	ldr	r3, [r7, #12]
   2fd2c:	2107      	movs	r1, #7
   2fd2e:	0018      	movs	r0, r3
   2fd30:	4b1a      	ldr	r3, [pc, #104]	; (2fd9c <MQTTPublish+0x1b8>)
   2fd32:	4798      	blx	r3
   2fd34:	0003      	movs	r3, r0
   2fd36:	2b07      	cmp	r3, #7
   2fd38:	d114      	bne.n	2fd64 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fd3a:	68fb      	ldr	r3, [r7, #12]
   2fd3c:	695c      	ldr	r4, [r3, #20]
   2fd3e:	68fb      	ldr	r3, [r7, #12]
   2fd40:	68db      	ldr	r3, [r3, #12]
   2fd42:	2212      	movs	r2, #18
   2fd44:	18ba      	adds	r2, r7, r2
   2fd46:	2111      	movs	r1, #17
   2fd48:	1879      	adds	r1, r7, r1
   2fd4a:	2010      	movs	r0, #16
   2fd4c:	1838      	adds	r0, r7, r0
   2fd4e:	9300      	str	r3, [sp, #0]
   2fd50:	0023      	movs	r3, r4
   2fd52:	4c13      	ldr	r4, [pc, #76]	; (2fda0 <MQTTPublish+0x1bc>)
   2fd54:	47a0      	blx	r4
   2fd56:	0003      	movs	r3, r0
   2fd58:	2b01      	cmp	r3, #1
   2fd5a:	d00c      	beq.n	2fd76 <MQTTPublish+0x192>
                rc = FAILURE;
   2fd5c:	2301      	movs	r3, #1
   2fd5e:	425b      	negs	r3, r3
   2fd60:	637b      	str	r3, [r7, #52]	; 0x34
   2fd62:	e008      	b.n	2fd76 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fd64:	2301      	movs	r3, #1
   2fd66:	425b      	negs	r3, r3
   2fd68:	637b      	str	r3, [r7, #52]	; 0x34
   2fd6a:	e004      	b.n	2fd76 <MQTTPublish+0x192>
		goto exit;
   2fd6c:	46c0      	nop			; (mov r8, r8)
   2fd6e:	e002      	b.n	2fd76 <MQTTPublish+0x192>
        goto exit;
   2fd70:	46c0      	nop			; (mov r8, r8)
   2fd72:	e000      	b.n	2fd76 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fd74:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fd78:	0018      	movs	r0, r3
   2fd7a:	46bd      	mov	sp, r7
   2fd7c:	b00f      	add	sp, #60	; 0x3c
   2fd7e:	bc0c      	pop	{r2, r3}
   2fd80:	4690      	mov	r8, r2
   2fd82:	4699      	mov	r9, r3
   2fd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fd86:	46c0      	nop			; (mov r8, r8)
   2fd88:	0002ffed 	.word	0x0002ffed
   2fd8c:	0002ff75 	.word	0x0002ff75
   2fd90:	0002f135 	.word	0x0002f135
   2fd94:	00031271 	.word	0x00031271
   2fd98:	0002f165 	.word	0x0002f165
   2fd9c:	0002f8cd 	.word	0x0002f8cd
   2fda0:	00030ce9 	.word	0x00030ce9

0002fda4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fda4:	b580      	push	{r7, lr}
   2fda6:	b088      	sub	sp, #32
   2fda8:	af00      	add	r7, sp, #0
   2fdaa:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fdac:	2301      	movs	r3, #1
   2fdae:	425b      	negs	r3, r3
   2fdb0:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fdb2:	2300      	movs	r3, #0
   2fdb4:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fdb6:	230c      	movs	r3, #12
   2fdb8:	18fb      	adds	r3, r7, r3
   2fdba:	0018      	movs	r0, r3
   2fdbc:	4b13      	ldr	r3, [pc, #76]	; (2fe0c <MQTTDisconnect+0x68>)
   2fdbe:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fdc0:	687b      	ldr	r3, [r7, #4]
   2fdc2:	685a      	ldr	r2, [r3, #4]
   2fdc4:	230c      	movs	r3, #12
   2fdc6:	18fb      	adds	r3, r7, r3
   2fdc8:	0011      	movs	r1, r2
   2fdca:	0018      	movs	r0, r3
   2fdcc:	4b10      	ldr	r3, [pc, #64]	; (2fe10 <MQTTDisconnect+0x6c>)
   2fdce:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fdd0:	687b      	ldr	r3, [r7, #4]
   2fdd2:	691a      	ldr	r2, [r3, #16]
   2fdd4:	687b      	ldr	r3, [r7, #4]
   2fdd6:	689b      	ldr	r3, [r3, #8]
   2fdd8:	0019      	movs	r1, r3
   2fdda:	0010      	movs	r0, r2
   2fddc:	4b0d      	ldr	r3, [pc, #52]	; (2fe14 <MQTTDisconnect+0x70>)
   2fdde:	4798      	blx	r3
   2fde0:	0003      	movs	r3, r0
   2fde2:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fde4:	69bb      	ldr	r3, [r7, #24]
   2fde6:	2b00      	cmp	r3, #0
   2fde8:	dd08      	ble.n	2fdfc <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fdea:	230c      	movs	r3, #12
   2fdec:	18fa      	adds	r2, r7, r3
   2fdee:	69b9      	ldr	r1, [r7, #24]
   2fdf0:	687b      	ldr	r3, [r7, #4]
   2fdf2:	0018      	movs	r0, r3
   2fdf4:	4b08      	ldr	r3, [pc, #32]	; (2fe18 <MQTTDisconnect+0x74>)
   2fdf6:	4798      	blx	r3
   2fdf8:	0003      	movs	r3, r0
   2fdfa:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fdfc:	687b      	ldr	r3, [r7, #4]
   2fdfe:	2200      	movs	r2, #0
   2fe00:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fe02:	69fb      	ldr	r3, [r7, #28]
}
   2fe04:	0018      	movs	r0, r3
   2fe06:	46bd      	mov	sp, r7
   2fe08:	b008      	add	sp, #32
   2fe0a:	bd80      	pop	{r7, pc}
   2fe0c:	0002ffed 	.word	0x0002ffed
   2fe10:	0002ff75 	.word	0x0002ff75
   2fe14:	00030b9d 	.word	0x00030b9d
   2fe18:	0002f165 	.word	0x0002f165

0002fe1c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fe1c:	b580      	push	{r7, lr}
   2fe1e:	b084      	sub	sp, #16
   2fe20:	af00      	add	r7, sp, #0
   2fe22:	0002      	movs	r2, r0
   2fe24:	1dfb      	adds	r3, r7, #7
   2fe26:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fe28:	2300      	movs	r3, #0
   2fe2a:	60fb      	str	r3, [r7, #12]
   2fe2c:	e01c      	b.n	2fe68 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fe2e:	4a12      	ldr	r2, [pc, #72]	; (2fe78 <isMQTTSocket+0x5c>)
   2fe30:	68fb      	ldr	r3, [r7, #12]
   2fe32:	2164      	movs	r1, #100	; 0x64
   2fe34:	434b      	muls	r3, r1
   2fe36:	18d3      	adds	r3, r2, r3
   2fe38:	3360      	adds	r3, #96	; 0x60
   2fe3a:	681b      	ldr	r3, [r3, #0]
   2fe3c:	2b00      	cmp	r3, #0
   2fe3e:	d010      	beq.n	2fe62 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fe40:	4a0d      	ldr	r2, [pc, #52]	; (2fe78 <isMQTTSocket+0x5c>)
   2fe42:	68fb      	ldr	r3, [r7, #12]
   2fe44:	2164      	movs	r1, #100	; 0x64
   2fe46:	434b      	muls	r3, r1
   2fe48:	18d3      	adds	r3, r2, r3
   2fe4a:	3360      	adds	r3, #96	; 0x60
   2fe4c:	681b      	ldr	r3, [r3, #0]
   2fe4e:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2fe50:	68bb      	ldr	r3, [r7, #8]
   2fe52:	6a1a      	ldr	r2, [r3, #32]
   2fe54:	1dfb      	adds	r3, r7, #7
   2fe56:	781b      	ldrb	r3, [r3, #0]
   2fe58:	b25b      	sxtb	r3, r3
   2fe5a:	429a      	cmp	r2, r3
   2fe5c:	d101      	bne.n	2fe62 <isMQTTSocket+0x46>
				return true;
   2fe5e:	2301      	movs	r3, #1
   2fe60:	e006      	b.n	2fe70 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fe62:	68fb      	ldr	r3, [r7, #12]
   2fe64:	3301      	adds	r3, #1
   2fe66:	60fb      	str	r3, [r7, #12]
   2fe68:	68fb      	ldr	r3, [r7, #12]
   2fe6a:	2b06      	cmp	r3, #6
   2fe6c:	d9df      	bls.n	2fe2e <isMQTTSocket+0x12>
		}
	}
	return false;
   2fe6e:	2300      	movs	r3, #0
}
   2fe70:	0018      	movs	r0, r3
   2fe72:	46bd      	mov	sp, r7
   2fe74:	b004      	add	sp, #16
   2fe76:	bd80      	pop	{r7, pc}
   2fe78:	2000442c 	.word	0x2000442c

0002fe7c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2fe7c:	b580      	push	{r7, lr}
   2fe7e:	b082      	sub	sp, #8
   2fe80:	af00      	add	r7, sp, #0
   2fe82:	6078      	str	r0, [r7, #4]
   2fe84:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2fe86:	4b0d      	ldr	r3, [pc, #52]	; (2febc <dnsResolveCallback+0x40>)
   2fe88:	781b      	ldrb	r3, [r3, #0]
   2fe8a:	2201      	movs	r2, #1
   2fe8c:	4053      	eors	r3, r2
   2fe8e:	b2db      	uxtb	r3, r3
   2fe90:	2b00      	cmp	r3, #0
   2fe92:	d00e      	beq.n	2feb2 <dnsResolveCallback+0x36>
   2fe94:	4b0a      	ldr	r3, [pc, #40]	; (2fec0 <dnsResolveCallback+0x44>)
   2fe96:	681b      	ldr	r3, [r3, #0]
   2fe98:	687a      	ldr	r2, [r7, #4]
   2fe9a:	0011      	movs	r1, r2
   2fe9c:	0018      	movs	r0, r3
   2fe9e:	4b09      	ldr	r3, [pc, #36]	; (2fec4 <dnsResolveCallback+0x48>)
   2fea0:	4798      	blx	r3
   2fea2:	1e03      	subs	r3, r0, #0
   2fea4:	d105      	bne.n	2feb2 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2fea6:	683a      	ldr	r2, [r7, #0]
   2fea8:	4b07      	ldr	r3, [pc, #28]	; (2fec8 <dnsResolveCallback+0x4c>)
   2feaa:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2feac:	4b03      	ldr	r3, [pc, #12]	; (2febc <dnsResolveCallback+0x40>)
   2feae:	2201      	movs	r2, #1
   2feb0:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2feb2:	46c0      	nop			; (mov r8, r8)
   2feb4:	46bd      	mov	sp, r7
   2feb6:	b002      	add	sp, #8
   2feb8:	bd80      	pop	{r7, pc}
   2feba:	46c0      	nop			; (mov r8, r8)
   2febc:	2000431c 	.word	0x2000431c
   2fec0:	20004428 	.word	0x20004428
   2fec4:	00036541 	.word	0x00036541
   2fec8:	20004314 	.word	0x20004314

0002fecc <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2fecc:	b580      	push	{r7, lr}
   2fece:	b084      	sub	sp, #16
   2fed0:	af00      	add	r7, sp, #0
   2fed2:	603a      	str	r2, [r7, #0]
   2fed4:	1dfb      	adds	r3, r7, #7
   2fed6:	1c02      	adds	r2, r0, #0
   2fed8:	701a      	strb	r2, [r3, #0]
   2feda:	1dbb      	adds	r3, r7, #6
   2fedc:	1c0a      	adds	r2, r1, #0
   2fede:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2fee0:	1dfb      	adds	r3, r7, #7
   2fee2:	781b      	ldrb	r3, [r3, #0]
   2fee4:	b25b      	sxtb	r3, r3
   2fee6:	0018      	movs	r0, r3
   2fee8:	4b12      	ldr	r3, [pc, #72]	; (2ff34 <tcpClientSocketEventHandler+0x68>)
   2feea:	4798      	blx	r3
   2feec:	1e03      	subs	r3, r0, #0
   2feee:	d01c      	beq.n	2ff2a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2fef0:	1dbb      	adds	r3, r7, #6
   2fef2:	781b      	ldrb	r3, [r3, #0]
   2fef4:	2b06      	cmp	r3, #6
   2fef6:	d00c      	beq.n	2ff12 <tcpClientSocketEventHandler+0x46>
   2fef8:	2b07      	cmp	r3, #7
   2fefa:	d006      	beq.n	2ff0a <tcpClientSocketEventHandler+0x3e>
   2fefc:	2b05      	cmp	r3, #5
   2fefe:	d000      	beq.n	2ff02 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ff00:	e013      	b.n	2ff2a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ff02:	4b0d      	ldr	r3, [pc, #52]	; (2ff38 <tcpClientSocketEventHandler+0x6c>)
   2ff04:	2201      	movs	r2, #1
   2ff06:	701a      	strb	r2, [r3, #0]
			break;
   2ff08:	e00f      	b.n	2ff2a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ff0a:	4b0c      	ldr	r3, [pc, #48]	; (2ff3c <tcpClientSocketEventHandler+0x70>)
   2ff0c:	2201      	movs	r2, #1
   2ff0e:	701a      	strb	r2, [r3, #0]
			break;
   2ff10:	e00b      	b.n	2ff2a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ff12:	683b      	ldr	r3, [r7, #0]
   2ff14:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ff16:	68fb      	ldr	r3, [r7, #12]
   2ff18:	2204      	movs	r2, #4
   2ff1a:	5e9b      	ldrsh	r3, [r3, r2]
   2ff1c:	001a      	movs	r2, r3
   2ff1e:	4b08      	ldr	r3, [pc, #32]	; (2ff40 <tcpClientSocketEventHandler+0x74>)
   2ff20:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ff22:	4b08      	ldr	r3, [pc, #32]	; (2ff44 <tcpClientSocketEventHandler+0x78>)
   2ff24:	2201      	movs	r2, #1
   2ff26:	701a      	strb	r2, [r3, #0]
			break;
   2ff28:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ff2a:	46c0      	nop			; (mov r8, r8)
   2ff2c:	46bd      	mov	sp, r7
   2ff2e:	b004      	add	sp, #16
   2ff30:	bd80      	pop	{r7, pc}
   2ff32:	46c0      	nop			; (mov r8, r8)
   2ff34:	0002fe1d 	.word	0x0002fe1d
   2ff38:	2000431d 	.word	0x2000431d
   2ff3c:	2000431e 	.word	0x2000431e
   2ff40:	20004318 	.word	0x20004318
   2ff44:	2000431f 	.word	0x2000431f

0002ff48 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ff48:	b580      	push	{r7, lr}
   2ff4a:	b082      	sub	sp, #8
   2ff4c:	af00      	add	r7, sp, #0
   2ff4e:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ff50:	687b      	ldr	r3, [r7, #4]
   2ff52:	3304      	adds	r3, #4
   2ff54:	687a      	ldr	r2, [r7, #4]
   2ff56:	0011      	movs	r1, r2
   2ff58:	0018      	movs	r0, r3
   2ff5a:	4b05      	ldr	r3, [pc, #20]	; (2ff70 <TimerIsExpired+0x28>)
   2ff5c:	4798      	blx	r3
   2ff5e:	0003      	movs	r3, r0
   2ff60:	3b01      	subs	r3, #1
   2ff62:	425a      	negs	r2, r3
   2ff64:	4153      	adcs	r3, r2
   2ff66:	b2db      	uxtb	r3, r3
}
   2ff68:	0018      	movs	r0, r3
   2ff6a:	46bd      	mov	sp, r7
   2ff6c:	b002      	add	sp, #8
   2ff6e:	bd80      	pop	{r7, pc}
   2ff70:	0001d651 	.word	0x0001d651

0002ff74 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ff74:	b580      	push	{r7, lr}
   2ff76:	b082      	sub	sp, #8
   2ff78:	af00      	add	r7, sp, #0
   2ff7a:	6078      	str	r0, [r7, #4]
   2ff7c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ff7e:	687b      	ldr	r3, [r7, #4]
   2ff80:	683a      	ldr	r2, [r7, #0]
   2ff82:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ff84:	687b      	ldr	r3, [r7, #4]
   2ff86:	3304      	adds	r3, #4
   2ff88:	0018      	movs	r0, r3
   2ff8a:	4b03      	ldr	r3, [pc, #12]	; (2ff98 <TimerCountdownMS+0x24>)
   2ff8c:	4798      	blx	r3
}
   2ff8e:	46c0      	nop			; (mov r8, r8)
   2ff90:	46bd      	mov	sp, r7
   2ff92:	b002      	add	sp, #8
   2ff94:	bd80      	pop	{r7, pc}
   2ff96:	46c0      	nop			; (mov r8, r8)
   2ff98:	0001d5e5 	.word	0x0001d5e5

0002ff9c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ff9c:	b580      	push	{r7, lr}
   2ff9e:	b082      	sub	sp, #8
   2ffa0:	af00      	add	r7, sp, #0
   2ffa2:	6078      	str	r0, [r7, #4]
   2ffa4:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ffa6:	683b      	ldr	r3, [r7, #0]
   2ffa8:	22fa      	movs	r2, #250	; 0xfa
   2ffaa:	0092      	lsls	r2, r2, #2
   2ffac:	435a      	muls	r2, r3
   2ffae:	687b      	ldr	r3, [r7, #4]
   2ffb0:	0011      	movs	r1, r2
   2ffb2:	0018      	movs	r0, r3
   2ffb4:	4b02      	ldr	r3, [pc, #8]	; (2ffc0 <TimerCountdown+0x24>)
   2ffb6:	4798      	blx	r3
}
   2ffb8:	46c0      	nop			; (mov r8, r8)
   2ffba:	46bd      	mov	sp, r7
   2ffbc:	b002      	add	sp, #8
   2ffbe:	bd80      	pop	{r7, pc}
   2ffc0:	0002ff75 	.word	0x0002ff75

0002ffc4 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ffc4:	b580      	push	{r7, lr}
   2ffc6:	b082      	sub	sp, #8
   2ffc8:	af00      	add	r7, sp, #0
   2ffca:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ffcc:	687b      	ldr	r3, [r7, #4]
   2ffce:	3304      	adds	r3, #4
   2ffd0:	687a      	ldr	r2, [r7, #4]
   2ffd2:	0011      	movs	r1, r2
   2ffd4:	0018      	movs	r0, r3
   2ffd6:	4b04      	ldr	r3, [pc, #16]	; (2ffe8 <TimerLeftMS+0x24>)
   2ffd8:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ffda:	687b      	ldr	r3, [r7, #4]
   2ffdc:	681b      	ldr	r3, [r3, #0]
}
   2ffde:	0018      	movs	r0, r3
   2ffe0:	46bd      	mov	sp, r7
   2ffe2:	b002      	add	sp, #8
   2ffe4:	bd80      	pop	{r7, pc}
   2ffe6:	46c0      	nop			; (mov r8, r8)
   2ffe8:	0001d651 	.word	0x0001d651

0002ffec <TimerInit>:


void TimerInit(Timer* timer) {
   2ffec:	b580      	push	{r7, lr}
   2ffee:	b082      	sub	sp, #8
   2fff0:	af00      	add	r7, sp, #0
   2fff2:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2fff4:	687b      	ldr	r3, [r7, #4]
   2fff6:	2200      	movs	r2, #0
   2fff8:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2fffa:	687b      	ldr	r3, [r7, #4]
   2fffc:	3304      	adds	r3, #4
   2fffe:	2208      	movs	r2, #8
   30000:	2100      	movs	r1, #0
   30002:	0018      	movs	r0, r3
   30004:	4b02      	ldr	r3, [pc, #8]	; (30010 <TimerInit+0x24>)
   30006:	4798      	blx	r3
}
   30008:	46c0      	nop			; (mov r8, r8)
   3000a:	46bd      	mov	sp, r7
   3000c:	b002      	add	sp, #8
   3000e:	bd80      	pop	{r7, pc}
   30010:	00036203 	.word	0x00036203

00030014 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   30014:	b590      	push	{r4, r7, lr}
   30016:	b085      	sub	sp, #20
   30018:	af00      	add	r7, sp, #0
   3001a:	60f8      	str	r0, [r7, #12]
   3001c:	60b9      	str	r1, [r7, #8]
   3001e:	607a      	str	r2, [r7, #4]
   30020:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   30022:	683b      	ldr	r3, [r7, #0]
   30024:	2b00      	cmp	r3, #0
   30026:	d101      	bne.n	3002c <WINC1500_read+0x18>
   30028:	230a      	movs	r3, #10
   3002a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   3002c:	4b2c      	ldr	r3, [pc, #176]	; (300e0 <WINC1500_read+0xcc>)
   3002e:	681b      	ldr	r3, [r3, #0]
   30030:	2b00      	cmp	r3, #0
   30032:	d131      	bne.n	30098 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   30034:	4b2b      	ldr	r3, [pc, #172]	; (300e4 <WINC1500_read+0xd0>)
   30036:	2200      	movs	r2, #0
   30038:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   3003a:	68fb      	ldr	r3, [r7, #12]
   3003c:	681b      	ldr	r3, [r3, #0]
   3003e:	b258      	sxtb	r0, r3
   30040:	683c      	ldr	r4, [r7, #0]
   30042:	2380      	movs	r3, #128	; 0x80
   30044:	005a      	lsls	r2, r3, #1
   30046:	4928      	ldr	r1, [pc, #160]	; (300e8 <WINC1500_read+0xd4>)
   30048:	0023      	movs	r3, r4
   3004a:	4c28      	ldr	r4, [pc, #160]	; (300ec <WINC1500_read+0xd8>)
   3004c:	47a0      	blx	r4
   3004e:	1e03      	subs	r3, r0, #0
   30050:	d005      	beq.n	3005e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   30052:	2301      	movs	r3, #1
   30054:	425b      	negs	r3, r3
   30056:	e03e      	b.n	300d6 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   30058:	2000      	movs	r0, #0
   3005a:	4b25      	ldr	r3, [pc, #148]	; (300f0 <WINC1500_read+0xdc>)
   3005c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   3005e:	4b21      	ldr	r3, [pc, #132]	; (300e4 <WINC1500_read+0xd0>)
   30060:	781b      	ldrb	r3, [r3, #0]
   30062:	2201      	movs	r2, #1
   30064:	4053      	eors	r3, r2
   30066:	b2db      	uxtb	r3, r3
   30068:	2b00      	cmp	r3, #0
   3006a:	d1f5      	bne.n	30058 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   3006c:	4b21      	ldr	r3, [pc, #132]	; (300f4 <WINC1500_read+0xe0>)
   3006e:	681b      	ldr	r3, [r3, #0]
   30070:	2b00      	cmp	r3, #0
   30072:	dd08      	ble.n	30086 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   30074:	4b1f      	ldr	r3, [pc, #124]	; (300f4 <WINC1500_read+0xe0>)
   30076:	681b      	ldr	r3, [r3, #0]
   30078:	001a      	movs	r2, r3
   3007a:	4b19      	ldr	r3, [pc, #100]	; (300e0 <WINC1500_read+0xcc>)
   3007c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   3007e:	4b1e      	ldr	r3, [pc, #120]	; (300f8 <WINC1500_read+0xe4>)
   30080:	2200      	movs	r2, #0
   30082:	601a      	str	r2, [r3, #0]
   30084:	e008      	b.n	30098 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   30086:	4b16      	ldr	r3, [pc, #88]	; (300e0 <WINC1500_read+0xcc>)
   30088:	2200      	movs	r2, #0
   3008a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   3008c:	4b1a      	ldr	r3, [pc, #104]	; (300f8 <WINC1500_read+0xe4>)
   3008e:	2200      	movs	r2, #0
   30090:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   30092:	4b18      	ldr	r3, [pc, #96]	; (300f4 <WINC1500_read+0xe0>)
   30094:	681b      	ldr	r3, [r3, #0]
   30096:	e01e      	b.n	300d6 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30098:	4b11      	ldr	r3, [pc, #68]	; (300e0 <WINC1500_read+0xcc>)
   3009a:	681b      	ldr	r3, [r3, #0]
   3009c:	001a      	movs	r2, r3
   3009e:	687b      	ldr	r3, [r7, #4]
   300a0:	4293      	cmp	r3, r2
   300a2:	dd02      	ble.n	300aa <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   300a4:	2301      	movs	r3, #1
   300a6:	425b      	negs	r3, r3
   300a8:	e015      	b.n	300d6 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   300aa:	4b13      	ldr	r3, [pc, #76]	; (300f8 <WINC1500_read+0xe4>)
   300ac:	681a      	ldr	r2, [r3, #0]
   300ae:	4b0e      	ldr	r3, [pc, #56]	; (300e8 <WINC1500_read+0xd4>)
   300b0:	18d1      	adds	r1, r2, r3
   300b2:	687a      	ldr	r2, [r7, #4]
   300b4:	68bb      	ldr	r3, [r7, #8]
   300b6:	0018      	movs	r0, r3
   300b8:	4b10      	ldr	r3, [pc, #64]	; (300fc <WINC1500_read+0xe8>)
   300ba:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   300bc:	4b08      	ldr	r3, [pc, #32]	; (300e0 <WINC1500_read+0xcc>)
   300be:	681a      	ldr	r2, [r3, #0]
   300c0:	687b      	ldr	r3, [r7, #4]
   300c2:	1ad2      	subs	r2, r2, r3
   300c4:	4b06      	ldr	r3, [pc, #24]	; (300e0 <WINC1500_read+0xcc>)
   300c6:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   300c8:	4b0b      	ldr	r3, [pc, #44]	; (300f8 <WINC1500_read+0xe4>)
   300ca:	681a      	ldr	r2, [r3, #0]
   300cc:	687b      	ldr	r3, [r7, #4]
   300ce:	18d2      	adds	r2, r2, r3
   300d0:	4b09      	ldr	r3, [pc, #36]	; (300f8 <WINC1500_read+0xe4>)
   300d2:	601a      	str	r2, [r3, #0]
  
  return len;
   300d4:	687b      	ldr	r3, [r7, #4]
}
   300d6:	0018      	movs	r0, r3
   300d8:	46bd      	mov	sp, r7
   300da:	b005      	add	sp, #20
   300dc:	bd90      	pop	{r4, r7, pc}
   300de:	46c0      	nop			; (mov r8, r8)
   300e0:	20004424 	.word	0x20004424
   300e4:	2000431f 	.word	0x2000431f
   300e8:	20004320 	.word	0x20004320
   300ec:	0002659d 	.word	0x0002659d
   300f0:	00022ae5 	.word	0x00022ae5
   300f4:	20004318 	.word	0x20004318
   300f8:	20004420 	.word	0x20004420
   300fc:	000361cd 	.word	0x000361cd

00030100 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30100:	b590      	push	{r4, r7, lr}
   30102:	b085      	sub	sp, #20
   30104:	af00      	add	r7, sp, #0
   30106:	60f8      	str	r0, [r7, #12]
   30108:	60b9      	str	r1, [r7, #8]
   3010a:	607a      	str	r2, [r7, #4]
   3010c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   3010e:	4b10      	ldr	r3, [pc, #64]	; (30150 <WINC1500_write+0x50>)
   30110:	2200      	movs	r2, #0
   30112:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   30114:	68fb      	ldr	r3, [r7, #12]
   30116:	681b      	ldr	r3, [r3, #0]
   30118:	b258      	sxtb	r0, r3
   3011a:	687b      	ldr	r3, [r7, #4]
   3011c:	b29a      	uxth	r2, r3
   3011e:	68b9      	ldr	r1, [r7, #8]
   30120:	2300      	movs	r3, #0
   30122:	4c0c      	ldr	r4, [pc, #48]	; (30154 <WINC1500_write+0x54>)
   30124:	47a0      	blx	r4
   30126:	1e03      	subs	r3, r0, #0
   30128:	d005      	beq.n	30136 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   3012a:	2301      	movs	r3, #1
   3012c:	425b      	negs	r3, r3
   3012e:	e00a      	b.n	30146 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   30130:	2000      	movs	r0, #0
   30132:	4b09      	ldr	r3, [pc, #36]	; (30158 <WINC1500_write+0x58>)
   30134:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   30136:	4b06      	ldr	r3, [pc, #24]	; (30150 <WINC1500_write+0x50>)
   30138:	781b      	ldrb	r3, [r3, #0]
   3013a:	2201      	movs	r2, #1
   3013c:	4053      	eors	r3, r2
   3013e:	b2db      	uxtb	r3, r3
   30140:	2b00      	cmp	r3, #0
   30142:	d1f5      	bne.n	30130 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   30144:	687b      	ldr	r3, [r7, #4]
}
   30146:	0018      	movs	r0, r3
   30148:	46bd      	mov	sp, r7
   3014a:	b005      	add	sp, #20
   3014c:	bd90      	pop	{r4, r7, pc}
   3014e:	46c0      	nop			; (mov r8, r8)
   30150:	2000431e 	.word	0x2000431e
   30154:	00026439 	.word	0x00026439
   30158:	00022ae5 	.word	0x00022ae5

0003015c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   3015c:	b580      	push	{r7, lr}
   3015e:	b082      	sub	sp, #8
   30160:	af00      	add	r7, sp, #0
   30162:	6078      	str	r0, [r7, #4]
	close(n->socket);
   30164:	687b      	ldr	r3, [r7, #4]
   30166:	681b      	ldr	r3, [r3, #0]
   30168:	b25b      	sxtb	r3, r3
   3016a:	0018      	movs	r0, r3
   3016c:	4b06      	ldr	r3, [pc, #24]	; (30188 <WINC1500_disconnect+0x2c>)
   3016e:	4798      	blx	r3
	n->socket=-1;
   30170:	687b      	ldr	r3, [r7, #4]
   30172:	2201      	movs	r2, #1
   30174:	4252      	negs	r2, r2
   30176:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   30178:	4b04      	ldr	r3, [pc, #16]	; (3018c <WINC1500_disconnect+0x30>)
   3017a:	2200      	movs	r2, #0
   3017c:	701a      	strb	r2, [r3, #0]
}
   3017e:	46c0      	nop			; (mov r8, r8)
   30180:	46bd      	mov	sp, r7
   30182:	b002      	add	sp, #8
   30184:	bd80      	pop	{r7, pc}
   30186:	46c0      	nop			; (mov r8, r8)
   30188:	0002671d 	.word	0x0002671d
   3018c:	2000431d 	.word	0x2000431d

00030190 <NetworkInit>:


void NetworkInit(Network* n) {
   30190:	b580      	push	{r7, lr}
   30192:	b082      	sub	sp, #8
   30194:	af00      	add	r7, sp, #0
   30196:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30198:	687b      	ldr	r3, [r7, #4]
   3019a:	2201      	movs	r2, #1
   3019c:	4252      	negs	r2, r2
   3019e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   301a0:	687b      	ldr	r3, [r7, #4]
   301a2:	4a06      	ldr	r2, [pc, #24]	; (301bc <NetworkInit+0x2c>)
   301a4:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   301a6:	687b      	ldr	r3, [r7, #4]
   301a8:	4a05      	ldr	r2, [pc, #20]	; (301c0 <NetworkInit+0x30>)
   301aa:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   301ac:	687b      	ldr	r3, [r7, #4]
   301ae:	4a05      	ldr	r2, [pc, #20]	; (301c4 <NetworkInit+0x34>)
   301b0:	611a      	str	r2, [r3, #16]
}
   301b2:	46c0      	nop			; (mov r8, r8)
   301b4:	46bd      	mov	sp, r7
   301b6:	b002      	add	sp, #8
   301b8:	bd80      	pop	{r7, pc}
   301ba:	46c0      	nop			; (mov r8, r8)
   301bc:	00030015 	.word	0x00030015
   301c0:	00030101 	.word	0x00030101
   301c4:	0003015d 	.word	0x0003015d

000301c8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   301c8:	b580      	push	{r7, lr}
   301ca:	b088      	sub	sp, #32
   301cc:	af00      	add	r7, sp, #0
   301ce:	60f8      	str	r0, [r7, #12]
   301d0:	60b9      	str	r1, [r7, #8]
   301d2:	607a      	str	r2, [r7, #4]
   301d4:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   301d6:	4b37      	ldr	r3, [pc, #220]	; (302b4 <ConnectNetwork+0xec>)
   301d8:	2200      	movs	r2, #0
   301da:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   301dc:	4b36      	ldr	r3, [pc, #216]	; (302b8 <ConnectNetwork+0xf0>)
   301de:	68ba      	ldr	r2, [r7, #8]
   301e0:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   301e2:	68bb      	ldr	r3, [r7, #8]
   301e4:	0018      	movs	r0, r3
   301e6:	4b35      	ldr	r3, [pc, #212]	; (302bc <ConnectNetwork+0xf4>)
   301e8:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   301ea:	e002      	b.n	301f2 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   301ec:	2000      	movs	r0, #0
   301ee:	4b34      	ldr	r3, [pc, #208]	; (302c0 <ConnectNetwork+0xf8>)
   301f0:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   301f2:	4b30      	ldr	r3, [pc, #192]	; (302b4 <ConnectNetwork+0xec>)
   301f4:	781b      	ldrb	r3, [r3, #0]
   301f6:	2201      	movs	r2, #1
   301f8:	4053      	eors	r3, r2
   301fa:	b2db      	uxtb	r3, r3
   301fc:	2b00      	cmp	r3, #0
   301fe:	d1f5      	bne.n	301ec <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30200:	4b30      	ldr	r3, [pc, #192]	; (302c4 <ConnectNetwork+0xfc>)
   30202:	681a      	ldr	r2, [r3, #0]
   30204:	68fb      	ldr	r3, [r7, #12]
   30206:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30208:	2310      	movs	r3, #16
   3020a:	18fb      	adds	r3, r7, r3
   3020c:	2202      	movs	r2, #2
   3020e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30210:	687b      	ldr	r3, [r7, #4]
   30212:	b29b      	uxth	r3, r3
   30214:	021b      	lsls	r3, r3, #8
   30216:	b21a      	sxth	r2, r3
   30218:	687b      	ldr	r3, [r7, #4]
   3021a:	b29b      	uxth	r3, r3
   3021c:	0a1b      	lsrs	r3, r3, #8
   3021e:	b29b      	uxth	r3, r3
   30220:	b21b      	sxth	r3, r3
   30222:	4313      	orrs	r3, r2
   30224:	b21b      	sxth	r3, r3
   30226:	b29a      	uxth	r2, r3
   30228:	2310      	movs	r3, #16
   3022a:	18fb      	adds	r3, r7, r3
   3022c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   3022e:	4b25      	ldr	r3, [pc, #148]	; (302c4 <ConnectNetwork+0xfc>)
   30230:	681b      	ldr	r3, [r3, #0]
   30232:	001a      	movs	r2, r3
   30234:	2310      	movs	r3, #16
   30236:	18fb      	adds	r3, r7, r3
   30238:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   3023a:	68fb      	ldr	r3, [r7, #12]
   3023c:	681b      	ldr	r3, [r3, #0]
   3023e:	2b00      	cmp	r3, #0
   30240:	da0a      	bge.n	30258 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   30242:	683b      	ldr	r3, [r7, #0]
   30244:	b2db      	uxtb	r3, r3
   30246:	001a      	movs	r2, r3
   30248:	2101      	movs	r1, #1
   3024a:	2002      	movs	r0, #2
   3024c:	4b1e      	ldr	r3, [pc, #120]	; (302c8 <ConnectNetwork+0x100>)
   3024e:	4798      	blx	r3
   30250:	0003      	movs	r3, r0
   30252:	001a      	movs	r2, r3
   30254:	68fb      	ldr	r3, [r7, #12]
   30256:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   30258:	68fb      	ldr	r3, [r7, #12]
   3025a:	681b      	ldr	r3, [r3, #0]
   3025c:	3301      	adds	r3, #1
   3025e:	d108      	bne.n	30272 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   30260:	68fb      	ldr	r3, [r7, #12]
   30262:	681b      	ldr	r3, [r3, #0]
   30264:	b25b      	sxtb	r3, r3
   30266:	0018      	movs	r0, r3
   30268:	4b18      	ldr	r3, [pc, #96]	; (302cc <ConnectNetwork+0x104>)
   3026a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   3026c:	2309      	movs	r3, #9
   3026e:	425b      	negs	r3, r3
   30270:	e01c      	b.n	302ac <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   30272:	68fb      	ldr	r3, [r7, #12]
   30274:	681b      	ldr	r3, [r3, #0]
   30276:	b25b      	sxtb	r3, r3
   30278:	2210      	movs	r2, #16
   3027a:	18b9      	adds	r1, r7, r2
   3027c:	2210      	movs	r2, #16
   3027e:	0018      	movs	r0, r3
   30280:	4b13      	ldr	r3, [pc, #76]	; (302d0 <ConnectNetwork+0x108>)
   30282:	4798      	blx	r3
   30284:	1e03      	subs	r3, r0, #0
   30286:	d002      	beq.n	3028e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   30288:	2309      	movs	r3, #9
   3028a:	425b      	negs	r3, r3
   3028c:	e00e      	b.n	302ac <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   3028e:	4b11      	ldr	r3, [pc, #68]	; (302d4 <ConnectNetwork+0x10c>)
   30290:	2200      	movs	r2, #0
   30292:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   30294:	e002      	b.n	3029c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   30296:	2000      	movs	r0, #0
   30298:	4b09      	ldr	r3, [pc, #36]	; (302c0 <ConnectNetwork+0xf8>)
   3029a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   3029c:	4b0d      	ldr	r3, [pc, #52]	; (302d4 <ConnectNetwork+0x10c>)
   3029e:	781b      	ldrb	r3, [r3, #0]
   302a0:	2201      	movs	r2, #1
   302a2:	4053      	eors	r3, r2
   302a4:	b2db      	uxtb	r3, r3
   302a6:	2b00      	cmp	r3, #0
   302a8:	d1f5      	bne.n	30296 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   302aa:	2300      	movs	r3, #0
   302ac:	0018      	movs	r0, r3
   302ae:	46bd      	mov	sp, r7
   302b0:	b008      	add	sp, #32
   302b2:	bd80      	pop	{r7, pc}
   302b4:	2000431c 	.word	0x2000431c
   302b8:	20004428 	.word	0x20004428
   302bc:	00026965 	.word	0x00026965
   302c0:	00022ae5 	.word	0x00022ae5
   302c4:	20004314 	.word	0x20004314
   302c8:	00026111 	.word	0x00026111
   302cc:	0002671d 	.word	0x0002671d
   302d0:	00026325 	.word	0x00026325
   302d4:	2000431d 	.word	0x2000431d

000302d8 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   302d8:	b580      	push	{r7, lr}
   302da:	b084      	sub	sp, #16
   302dc:	af00      	add	r7, sp, #0
   302de:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   302e0:	687b      	ldr	r3, [r7, #4]
   302e2:	2b00      	cmp	r3, #0
   302e4:	d022      	beq.n	3032c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   302e6:	2300      	movs	r3, #0
   302e8:	60fb      	str	r3, [r7, #12]
   302ea:	e01b      	b.n	30324 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   302ec:	4a11      	ldr	r2, [pc, #68]	; (30334 <allocateClient+0x5c>)
   302ee:	68fb      	ldr	r3, [r7, #12]
   302f0:	2164      	movs	r1, #100	; 0x64
   302f2:	434b      	muls	r3, r1
   302f4:	18d3      	adds	r3, r2, r3
   302f6:	3360      	adds	r3, #96	; 0x60
   302f8:	681b      	ldr	r3, [r3, #0]
   302fa:	2b00      	cmp	r3, #0
   302fc:	d10f      	bne.n	3031e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   302fe:	4a0d      	ldr	r2, [pc, #52]	; (30334 <allocateClient+0x5c>)
   30300:	68fb      	ldr	r3, [r7, #12]
   30302:	2164      	movs	r1, #100	; 0x64
   30304:	434b      	muls	r3, r1
   30306:	18d3      	adds	r3, r2, r3
   30308:	3360      	adds	r3, #96	; 0x60
   3030a:	687a      	ldr	r2, [r7, #4]
   3030c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   3030e:	68fb      	ldr	r3, [r7, #12]
   30310:	2264      	movs	r2, #100	; 0x64
   30312:	435a      	muls	r2, r3
   30314:	4b07      	ldr	r3, [pc, #28]	; (30334 <allocateClient+0x5c>)
   30316:	18d2      	adds	r2, r2, r3
   30318:	687b      	ldr	r3, [r7, #4]
   3031a:	61da      	str	r2, [r3, #28]
			return;
   3031c:	e007      	b.n	3032e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3031e:	68fb      	ldr	r3, [r7, #12]
   30320:	3301      	adds	r3, #1
   30322:	60fb      	str	r3, [r7, #12]
   30324:	68fb      	ldr	r3, [r7, #12]
   30326:	2b06      	cmp	r3, #6
   30328:	d9e0      	bls.n	302ec <allocateClient+0x14>
   3032a:	e000      	b.n	3032e <allocateClient+0x56>
		return;
   3032c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   3032e:	46bd      	mov	sp, r7
   30330:	b004      	add	sp, #16
   30332:	bd80      	pop	{r7, pc}
   30334:	2000442c 	.word	0x2000442c

00030338 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   30338:	b5f0      	push	{r4, r5, r6, r7, lr}
   3033a:	b089      	sub	sp, #36	; 0x24
   3033c:	af04      	add	r7, sp, #16
   3033e:	6078      	str	r0, [r7, #4]
   30340:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   30342:	687b      	ldr	r3, [r7, #4]
   30344:	2b00      	cmp	r3, #0
   30346:	d00a      	beq.n	3035e <mqtt_init+0x26>
   30348:	683b      	ldr	r3, [r7, #0]
   3034a:	2b00      	cmp	r3, #0
   3034c:	d007      	beq.n	3035e <mqtt_init+0x26>
   3034e:	683b      	ldr	r3, [r7, #0]
   30350:	691b      	ldr	r3, [r3, #16]
   30352:	2b00      	cmp	r3, #0
   30354:	d003      	beq.n	3035e <mqtt_init+0x26>
   30356:	683b      	ldr	r3, [r7, #0]
   30358:	689b      	ldr	r3, [r3, #8]
   3035a:	2b00      	cmp	r3, #0
   3035c:	d102      	bne.n	30364 <mqtt_init+0x2c>
		return FAILURE;
   3035e:	2301      	movs	r3, #1
   30360:	425b      	negs	r3, r3
   30362:	e034      	b.n	303ce <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   30364:	683b      	ldr	r3, [r7, #0]
   30366:	889b      	ldrh	r3, [r3, #4]
   30368:	001a      	movs	r2, r3
   3036a:	23fa      	movs	r3, #250	; 0xfa
   3036c:	009b      	lsls	r3, r3, #2
   3036e:	4353      	muls	r3, r2
   30370:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   30372:	687b      	ldr	r3, [r7, #4]
   30374:	3320      	adds	r3, #32
   30376:	0018      	movs	r0, r3
   30378:	4b17      	ldr	r3, [pc, #92]	; (303d8 <mqtt_init+0xa0>)
   3037a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   3037c:	687b      	ldr	r3, [r7, #4]
   3037e:	3304      	adds	r3, #4
   30380:	6839      	ldr	r1, [r7, #0]
   30382:	2218      	movs	r2, #24
   30384:	0018      	movs	r0, r3
   30386:	4b15      	ldr	r3, [pc, #84]	; (303dc <mqtt_init+0xa4>)
   30388:	4798      	blx	r3
	allocateClient(module);
   3038a:	687b      	ldr	r3, [r7, #4]
   3038c:	0018      	movs	r0, r3
   3038e:	4b14      	ldr	r3, [pc, #80]	; (303e0 <mqtt_init+0xa8>)
   30390:	4798      	blx	r3
	
	if(module->client)
   30392:	687b      	ldr	r3, [r7, #4]
   30394:	69db      	ldr	r3, [r3, #28]
   30396:	2b00      	cmp	r3, #0
   30398:	d017      	beq.n	303ca <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3039a:	687b      	ldr	r3, [r7, #4]
   3039c:	69d8      	ldr	r0, [r3, #28]
   3039e:	687b      	ldr	r3, [r7, #4]
   303a0:	3320      	adds	r3, #32
   303a2:	001c      	movs	r4, r3
   303a4:	683b      	ldr	r3, [r7, #0]
   303a6:	691e      	ldr	r6, [r3, #16]
   303a8:	683b      	ldr	r3, [r7, #0]
   303aa:	695a      	ldr	r2, [r3, #20]
   303ac:	683b      	ldr	r3, [r7, #0]
   303ae:	6899      	ldr	r1, [r3, #8]
   303b0:	683b      	ldr	r3, [r7, #0]
   303b2:	68db      	ldr	r3, [r3, #12]
   303b4:	68fd      	ldr	r5, [r7, #12]
   303b6:	9302      	str	r3, [sp, #8]
   303b8:	9101      	str	r1, [sp, #4]
   303ba:	9200      	str	r2, [sp, #0]
   303bc:	0033      	movs	r3, r6
   303be:	002a      	movs	r2, r5
   303c0:	0021      	movs	r1, r4
   303c2:	4c08      	ldr	r4, [pc, #32]	; (303e4 <mqtt_init+0xac>)
   303c4:	47a0      	blx	r4
		return SUCCESS;
   303c6:	2300      	movs	r3, #0
   303c8:	e001      	b.n	303ce <mqtt_init+0x96>
	}
	else
		return FAILURE;
   303ca:	2301      	movs	r3, #1
   303cc:	425b      	negs	r3, r3
}
   303ce:	0018      	movs	r0, r3
   303d0:	46bd      	mov	sp, r7
   303d2:	b005      	add	sp, #20
   303d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   303d6:	46c0      	nop			; (mov r8, r8)
   303d8:	00030191 	.word	0x00030191
   303dc:	000361cd 	.word	0x000361cd
   303e0:	000302d9 	.word	0x000302d9
   303e4:	0002f209 	.word	0x0002f209

000303e8 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   303e8:	b580      	push	{r7, lr}
   303ea:	b082      	sub	sp, #8
   303ec:	af00      	add	r7, sp, #0
   303ee:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   303f0:	687b      	ldr	r3, [r7, #4]
   303f2:	4a0c      	ldr	r2, [pc, #48]	; (30424 <mqtt_get_config_defaults+0x3c>)
   303f4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   303f6:	687b      	ldr	r3, [r7, #4]
   303f8:	2200      	movs	r2, #0
   303fa:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   303fc:	687b      	ldr	r3, [r7, #4]
   303fe:	223c      	movs	r2, #60	; 0x3c
   30400:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   30402:	687b      	ldr	r3, [r7, #4]
   30404:	2200      	movs	r2, #0
   30406:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30408:	687b      	ldr	r3, [r7, #4]
   3040a:	2200      	movs	r2, #0
   3040c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   3040e:	687b      	ldr	r3, [r7, #4]
   30410:	2200      	movs	r2, #0
   30412:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   30414:	687b      	ldr	r3, [r7, #4]
   30416:	2200      	movs	r2, #0
   30418:	615a      	str	r2, [r3, #20]
}
   3041a:	46c0      	nop			; (mov r8, r8)
   3041c:	46bd      	mov	sp, r7
   3041e:	b002      	add	sp, #8
   30420:	bd80      	pop	{r7, pc}
   30422:	46c0      	nop			; (mov r8, r8)
   30424:	0000075b 	.word	0x0000075b

00030428 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   30428:	b580      	push	{r7, lr}
   3042a:	b082      	sub	sp, #8
   3042c:	af00      	add	r7, sp, #0
   3042e:	6078      	str	r0, [r7, #4]
   30430:	6039      	str	r1, [r7, #0]
	if(module)
   30432:	687b      	ldr	r3, [r7, #4]
   30434:	2b00      	cmp	r3, #0
   30436:	d004      	beq.n	30442 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   30438:	687b      	ldr	r3, [r7, #4]
   3043a:	683a      	ldr	r2, [r7, #0]
   3043c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   3043e:	2300      	movs	r3, #0
   30440:	e001      	b.n	30446 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   30442:	2301      	movs	r3, #1
   30444:	425b      	negs	r3, r3
}
   30446:	0018      	movs	r0, r3
   30448:	46bd      	mov	sp, r7
   3044a:	b002      	add	sp, #8
   3044c:	bd80      	pop	{r7, pc}
	...

00030450 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30450:	b580      	push	{r7, lr}
   30452:	b082      	sub	sp, #8
   30454:	af00      	add	r7, sp, #0
   30456:	603a      	str	r2, [r7, #0]
   30458:	1dfb      	adds	r3, r7, #7
   3045a:	1c02      	adds	r2, r0, #0
   3045c:	701a      	strb	r2, [r3, #0]
   3045e:	1dbb      	adds	r3, r7, #6
   30460:	1c0a      	adds	r2, r1, #0
   30462:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   30464:	683a      	ldr	r2, [r7, #0]
   30466:	1dbb      	adds	r3, r7, #6
   30468:	7819      	ldrb	r1, [r3, #0]
   3046a:	1dfb      	adds	r3, r7, #7
   3046c:	781b      	ldrb	r3, [r3, #0]
   3046e:	b25b      	sxtb	r3, r3
   30470:	0018      	movs	r0, r3
   30472:	4b03      	ldr	r3, [pc, #12]	; (30480 <mqtt_socket_event_handler+0x30>)
   30474:	4798      	blx	r3
}
   30476:	46c0      	nop			; (mov r8, r8)
   30478:	46bd      	mov	sp, r7
   3047a:	b002      	add	sp, #8
   3047c:	bd80      	pop	{r7, pc}
   3047e:	46c0      	nop			; (mov r8, r8)
   30480:	0002fecd 	.word	0x0002fecd

00030484 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   30484:	b580      	push	{r7, lr}
   30486:	b082      	sub	sp, #8
   30488:	af00      	add	r7, sp, #0
   3048a:	6078      	str	r0, [r7, #4]
   3048c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   3048e:	683a      	ldr	r2, [r7, #0]
   30490:	687b      	ldr	r3, [r7, #4]
   30492:	0011      	movs	r1, r2
   30494:	0018      	movs	r0, r3
   30496:	4b03      	ldr	r3, [pc, #12]	; (304a4 <mqtt_socket_resolve_handler+0x20>)
   30498:	4798      	blx	r3
}
   3049a:	46c0      	nop			; (mov r8, r8)
   3049c:	46bd      	mov	sp, r7
   3049e:	b002      	add	sp, #8
   304a0:	bd80      	pop	{r7, pc}
   304a2:	46c0      	nop			; (mov r8, r8)
   304a4:	0002fe7d 	.word	0x0002fe7d

000304a8 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   304a8:	b590      	push	{r4, r7, lr}
   304aa:	b085      	sub	sp, #20
   304ac:	af00      	add	r7, sp, #0
   304ae:	6078      	str	r0, [r7, #4]
   304b0:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   304b2:	687b      	ldr	r3, [r7, #4]
   304b4:	3320      	adds	r3, #32
   304b6:	0018      	movs	r0, r3
   304b8:	687b      	ldr	r3, [r7, #4]
   304ba:	889b      	ldrh	r3, [r3, #4]
   304bc:	001a      	movs	r2, r3
   304be:	687b      	ldr	r3, [r7, #4]
   304c0:	799b      	ldrb	r3, [r3, #6]
   304c2:	6839      	ldr	r1, [r7, #0]
   304c4:	4c09      	ldr	r4, [pc, #36]	; (304ec <mqtt_connect+0x44>)
   304c6:	47a0      	blx	r4
   304c8:	0003      	movs	r3, r0
   304ca:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   304cc:	687b      	ldr	r3, [r7, #4]
   304ce:	681b      	ldr	r3, [r3, #0]
   304d0:	2b00      	cmp	r3, #0
   304d2:	d006      	beq.n	304e2 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   304d4:	687b      	ldr	r3, [r7, #4]
   304d6:	681b      	ldr	r3, [r3, #0]
   304d8:	220c      	movs	r2, #12
   304da:	18ba      	adds	r2, r7, r2
   304dc:	6878      	ldr	r0, [r7, #4]
   304de:	2100      	movs	r1, #0
   304e0:	4798      	blx	r3
	return connResult.sock_connected.result;
   304e2:	68fb      	ldr	r3, [r7, #12]
}
   304e4:	0018      	movs	r0, r3
   304e6:	46bd      	mov	sp, r7
   304e8:	b005      	add	sp, #20
   304ea:	bd90      	pop	{r4, r7, pc}
   304ec:	000301c9 	.word	0x000301c9

000304f0 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   304f0:	b580      	push	{r7, lr}
   304f2:	b09c      	sub	sp, #112	; 0x70
   304f4:	af00      	add	r7, sp, #0
   304f6:	60f8      	str	r0, [r7, #12]
   304f8:	607a      	str	r2, [r7, #4]
   304fa:	603b      	str	r3, [r7, #0]
   304fc:	230b      	movs	r3, #11
   304fe:	18fb      	adds	r3, r7, r3
   30500:	1c0a      	adds	r2, r1, #0
   30502:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   30504:	2310      	movs	r3, #16
   30506:	18fa      	adds	r2, r7, r3
   30508:	4b31      	ldr	r3, [pc, #196]	; (305d0 <mqtt_connect_broker+0xe0>)
   3050a:	0010      	movs	r0, r2
   3050c:	0019      	movs	r1, r3
   3050e:	2358      	movs	r3, #88	; 0x58
   30510:	001a      	movs	r2, r3
   30512:	4b30      	ldr	r3, [pc, #192]	; (305d4 <mqtt_connect_broker+0xe4>)
   30514:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   30516:	2310      	movs	r3, #16
   30518:	18fb      	adds	r3, r7, r3
   3051a:	2204      	movs	r2, #4
   3051c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   3051e:	2310      	movs	r3, #16
   30520:	18fb      	adds	r3, r7, r3
   30522:	6fba      	ldr	r2, [r7, #120]	; 0x78
   30524:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   30526:	2310      	movs	r3, #16
   30528:	18fb      	adds	r3, r7, r3
   3052a:	687a      	ldr	r2, [r7, #4]
   3052c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   3052e:	2310      	movs	r3, #16
   30530:	18fb      	adds	r3, r7, r3
   30532:	683a      	ldr	r2, [r7, #0]
   30534:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   30536:	2310      	movs	r3, #16
   30538:	18fb      	adds	r3, r7, r3
   3053a:	220b      	movs	r2, #11
   3053c:	18ba      	adds	r2, r7, r2
   3053e:	7812      	ldrb	r2, [r2, #0]
   30540:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   30542:	2310      	movs	r3, #16
   30544:	18fb      	adds	r3, r7, r3
   30546:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   30548:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   3054a:	2310      	movs	r3, #16
   3054c:	18fb      	adds	r3, r7, r3
   3054e:	2280      	movs	r2, #128	; 0x80
   30550:	18ba      	adds	r2, r7, r2
   30552:	6812      	ldr	r2, [r2, #0]
   30554:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   30556:	2310      	movs	r3, #16
   30558:	18fb      	adds	r3, r7, r3
   3055a:	228c      	movs	r2, #140	; 0x8c
   3055c:	18ba      	adds	r2, r7, r2
   3055e:	213c      	movs	r1, #60	; 0x3c
   30560:	7812      	ldrb	r2, [r2, #0]
   30562:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   30564:	2310      	movs	r3, #16
   30566:	18fb      	adds	r3, r7, r3
   30568:	2288      	movs	r2, #136	; 0x88
   3056a:	18ba      	adds	r2, r7, r2
   3056c:	213d      	movs	r1, #61	; 0x3d
   3056e:	7812      	ldrb	r2, [r2, #0]
   30570:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   30572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   30574:	2b00      	cmp	r3, #0
   30576:	d008      	beq.n	3058a <mqtt_connect_broker+0x9a>
   30578:	2380      	movs	r3, #128	; 0x80
   3057a:	18fb      	adds	r3, r7, r3
   3057c:	681b      	ldr	r3, [r3, #0]
   3057e:	2b00      	cmp	r3, #0
   30580:	d003      	beq.n	3058a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   30582:	2310      	movs	r3, #16
   30584:	18fb      	adds	r3, r7, r3
   30586:	2201      	movs	r2, #1
   30588:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   3058a:	68fb      	ldr	r3, [r7, #12]
   3058c:	69db      	ldr	r3, [r3, #28]
   3058e:	2210      	movs	r2, #16
   30590:	18ba      	adds	r2, r7, r2
   30592:	0011      	movs	r1, r2
   30594:	0018      	movs	r0, r3
   30596:	4b10      	ldr	r3, [pc, #64]	; (305d8 <mqtt_connect_broker+0xe8>)
   30598:	4798      	blx	r3
   3059a:	0003      	movs	r3, r0
   3059c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   3059e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   305a0:	b2da      	uxtb	r2, r3
   305a2:	2368      	movs	r3, #104	; 0x68
   305a4:	18fb      	adds	r3, r7, r3
   305a6:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   305a8:	68fb      	ldr	r3, [r7, #12]
   305aa:	681b      	ldr	r3, [r3, #0]
   305ac:	2b00      	cmp	r3, #0
   305ae:	d006      	beq.n	305be <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   305b0:	68fb      	ldr	r3, [r7, #12]
   305b2:	681b      	ldr	r3, [r3, #0]
   305b4:	2268      	movs	r2, #104	; 0x68
   305b6:	18ba      	adds	r2, r7, r2
   305b8:	68f8      	ldr	r0, [r7, #12]
   305ba:	2101      	movs	r1, #1
   305bc:	4798      	blx	r3
	
	module->isConnected = true;
   305be:	68fb      	ldr	r3, [r7, #12]
   305c0:	2234      	movs	r2, #52	; 0x34
   305c2:	2101      	movs	r1, #1
   305c4:	5499      	strb	r1, [r3, r2]
	return rc;
   305c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   305c8:	0018      	movs	r0, r3
   305ca:	46bd      	mov	sp, r7
   305cc:	b01c      	add	sp, #112	; 0x70
   305ce:	bd80      	pop	{r7, pc}
   305d0:	0003b640 	.word	0x0003b640
   305d4:	000361cd 	.word	0x000361cd
   305d8:	0002f919 	.word	0x0002f919

000305dc <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   305dc:	b580      	push	{r7, lr}
   305de:	b084      	sub	sp, #16
   305e0:	af00      	add	r7, sp, #0
   305e2:	6078      	str	r0, [r7, #4]
   305e4:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   305e6:	687b      	ldr	r3, [r7, #4]
   305e8:	69db      	ldr	r3, [r3, #28]
   305ea:	0018      	movs	r0, r3
   305ec:	4b0c      	ldr	r3, [pc, #48]	; (30620 <mqtt_disconnect+0x44>)
   305ee:	4798      	blx	r3
   305f0:	0003      	movs	r3, r0
   305f2:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   305f4:	68fb      	ldr	r3, [r7, #12]
   305f6:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   305f8:	687b      	ldr	r3, [r7, #4]
   305fa:	681b      	ldr	r3, [r3, #0]
   305fc:	2b00      	cmp	r3, #0
   305fe:	d006      	beq.n	3060e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30600:	687b      	ldr	r3, [r7, #4]
   30602:	681b      	ldr	r3, [r3, #0]
   30604:	2208      	movs	r2, #8
   30606:	18ba      	adds	r2, r7, r2
   30608:	6878      	ldr	r0, [r7, #4]
   3060a:	2105      	movs	r1, #5
   3060c:	4798      	blx	r3
	
	module->isConnected = false;
   3060e:	687b      	ldr	r3, [r7, #4]
   30610:	2234      	movs	r2, #52	; 0x34
   30612:	2100      	movs	r1, #0
   30614:	5499      	strb	r1, [r3, r2]
	return rc;
   30616:	68fb      	ldr	r3, [r7, #12]
}
   30618:	0018      	movs	r0, r3
   3061a:	46bd      	mov	sp, r7
   3061c:	b004      	add	sp, #16
   3061e:	bd80      	pop	{r7, pc}
   30620:	0002fda5 	.word	0x0002fda5

00030624 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   30624:	b580      	push	{r7, lr}
   30626:	b08a      	sub	sp, #40	; 0x28
   30628:	af00      	add	r7, sp, #0
   3062a:	60f8      	str	r0, [r7, #12]
   3062c:	60b9      	str	r1, [r7, #8]
   3062e:	607a      	str	r2, [r7, #4]
   30630:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   30632:	2314      	movs	r3, #20
   30634:	18fb      	adds	r3, r7, r3
   30636:	2230      	movs	r2, #48	; 0x30
   30638:	18ba      	adds	r2, r7, r2
   3063a:	7812      	ldrb	r2, [r2, #0]
   3063c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   3063e:	2314      	movs	r3, #20
   30640:	18fb      	adds	r3, r7, r3
   30642:	687a      	ldr	r2, [r7, #4]
   30644:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   30646:	2314      	movs	r3, #20
   30648:	18fb      	adds	r3, r7, r3
   3064a:	683a      	ldr	r2, [r7, #0]
   3064c:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   3064e:	2314      	movs	r3, #20
   30650:	18fb      	adds	r3, r7, r3
   30652:	2234      	movs	r2, #52	; 0x34
   30654:	18ba      	adds	r2, r7, r2
   30656:	7812      	ldrb	r2, [r2, #0]
   30658:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   3065a:	68fb      	ldr	r3, [r7, #12]
   3065c:	69db      	ldr	r3, [r3, #28]
   3065e:	2214      	movs	r2, #20
   30660:	18ba      	adds	r2, r7, r2
   30662:	68b9      	ldr	r1, [r7, #8]
   30664:	0018      	movs	r0, r3
   30666:	4b09      	ldr	r3, [pc, #36]	; (3068c <mqtt_publish+0x68>)
   30668:	4798      	blx	r3
   3066a:	0003      	movs	r3, r0
   3066c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   3066e:	68fb      	ldr	r3, [r7, #12]
   30670:	681b      	ldr	r3, [r3, #0]
   30672:	2b00      	cmp	r3, #0
   30674:	d005      	beq.n	30682 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   30676:	68fb      	ldr	r3, [r7, #12]
   30678:	681b      	ldr	r3, [r3, #0]
   3067a:	68f8      	ldr	r0, [r7, #12]
   3067c:	2200      	movs	r2, #0
   3067e:	2102      	movs	r1, #2
   30680:	4798      	blx	r3
	
	return rc;
   30682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30684:	0018      	movs	r0, r3
   30686:	46bd      	mov	sp, r7
   30688:	b00a      	add	sp, #40	; 0x28
   3068a:	bd80      	pop	{r7, pc}
   3068c:	0002fbe5 	.word	0x0002fbe5

00030690 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30690:	b590      	push	{r4, r7, lr}
   30692:	b087      	sub	sp, #28
   30694:	af00      	add	r7, sp, #0
   30696:	60f8      	str	r0, [r7, #12]
   30698:	60b9      	str	r1, [r7, #8]
   3069a:	603b      	str	r3, [r7, #0]
   3069c:	1dfb      	adds	r3, r7, #7
   3069e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   306a0:	68fb      	ldr	r3, [r7, #12]
   306a2:	69d8      	ldr	r0, [r3, #28]
   306a4:	683c      	ldr	r4, [r7, #0]
   306a6:	1dfb      	adds	r3, r7, #7
   306a8:	781a      	ldrb	r2, [r3, #0]
   306aa:	68b9      	ldr	r1, [r7, #8]
   306ac:	0023      	movs	r3, r4
   306ae:	4c09      	ldr	r4, [pc, #36]	; (306d4 <mqtt_subscribe+0x44>)
   306b0:	47a0      	blx	r4
   306b2:	0003      	movs	r3, r0
   306b4:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   306b6:	68fb      	ldr	r3, [r7, #12]
   306b8:	681b      	ldr	r3, [r3, #0]
   306ba:	2b00      	cmp	r3, #0
   306bc:	d005      	beq.n	306ca <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   306be:	68fb      	ldr	r3, [r7, #12]
   306c0:	681b      	ldr	r3, [r3, #0]
   306c2:	68f8      	ldr	r0, [r7, #12]
   306c4:	2200      	movs	r2, #0
   306c6:	2103      	movs	r1, #3
   306c8:	4798      	blx	r3
	
	return rc;
   306ca:	697b      	ldr	r3, [r7, #20]
}
   306cc:	0018      	movs	r0, r3
   306ce:	46bd      	mov	sp, r7
   306d0:	b007      	add	sp, #28
   306d2:	bd90      	pop	{r4, r7, pc}
   306d4:	0002fa59 	.word	0x0002fa59

000306d8 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   306d8:	b580      	push	{r7, lr}
   306da:	b082      	sub	sp, #8
   306dc:	af00      	add	r7, sp, #0
   306de:	6078      	str	r0, [r7, #4]
   306e0:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   306e2:	687b      	ldr	r3, [r7, #4]
   306e4:	69db      	ldr	r3, [r3, #28]
   306e6:	683a      	ldr	r2, [r7, #0]
   306e8:	0011      	movs	r1, r2
   306ea:	0018      	movs	r0, r3
   306ec:	4b03      	ldr	r3, [pc, #12]	; (306fc <mqtt_yield+0x24>)
   306ee:	4798      	blx	r3
   306f0:	0003      	movs	r3, r0
   306f2:	0018      	movs	r0, r3
   306f4:	46bd      	mov	sp, r7
   306f6:	b002      	add	sp, #8
   306f8:	bd80      	pop	{r7, pc}
   306fa:	46c0      	nop			; (mov r8, r8)
   306fc:	0002f861 	.word	0x0002f861

00030700 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30700:	b590      	push	{r4, r7, lr}
   30702:	b085      	sub	sp, #20
   30704:	af00      	add	r7, sp, #0
   30706:	6078      	str	r0, [r7, #4]
	int len = 0;
   30708:	2300      	movs	r3, #0
   3070a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   3070c:	687b      	ldr	r3, [r7, #4]
   3070e:	7a1b      	ldrb	r3, [r3, #8]
   30710:	2b03      	cmp	r3, #3
   30712:	d102      	bne.n	3071a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   30714:	230c      	movs	r3, #12
   30716:	60fb      	str	r3, [r7, #12]
   30718:	e005      	b.n	30726 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   3071a:	687b      	ldr	r3, [r7, #4]
   3071c:	7a1b      	ldrb	r3, [r3, #8]
   3071e:	2b04      	cmp	r3, #4
   30720:	d101      	bne.n	30726 <MQTTSerialize_connectLength+0x26>
		len = 10;
   30722:	230a      	movs	r3, #10
   30724:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   30726:	687b      	ldr	r3, [r7, #4]
   30728:	68d8      	ldr	r0, [r3, #12]
   3072a:	6919      	ldr	r1, [r3, #16]
   3072c:	695a      	ldr	r2, [r3, #20]
   3072e:	4b25      	ldr	r3, [pc, #148]	; (307c4 <MQTTSerialize_connectLength+0xc4>)
   30730:	4798      	blx	r3
   30732:	0003      	movs	r3, r0
   30734:	3302      	adds	r3, #2
   30736:	68fa      	ldr	r2, [r7, #12]
   30738:	18d3      	adds	r3, r2, r3
   3073a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   3073c:	687b      	ldr	r3, [r7, #4]
   3073e:	7edb      	ldrb	r3, [r3, #27]
   30740:	2b00      	cmp	r3, #0
   30742:	d013      	beq.n	3076c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   30744:	687b      	ldr	r3, [r7, #4]
   30746:	6a58      	ldr	r0, [r3, #36]	; 0x24
   30748:	6a99      	ldr	r1, [r3, #40]	; 0x28
   3074a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3074c:	4b1d      	ldr	r3, [pc, #116]	; (307c4 <MQTTSerialize_connectLength+0xc4>)
   3074e:	4798      	blx	r3
   30750:	0003      	movs	r3, r0
   30752:	1c9c      	adds	r4, r3, #2
   30754:	687b      	ldr	r3, [r7, #4]
   30756:	6b18      	ldr	r0, [r3, #48]	; 0x30
   30758:	6b59      	ldr	r1, [r3, #52]	; 0x34
   3075a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3075c:	4b19      	ldr	r3, [pc, #100]	; (307c4 <MQTTSerialize_connectLength+0xc4>)
   3075e:	4798      	blx	r3
   30760:	0003      	movs	r3, r0
   30762:	18e3      	adds	r3, r4, r3
   30764:	3302      	adds	r3, #2
   30766:	68fa      	ldr	r2, [r7, #12]
   30768:	18d3      	adds	r3, r2, r3
   3076a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   3076c:	687b      	ldr	r3, [r7, #4]
   3076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30770:	2b00      	cmp	r3, #0
   30772:	d103      	bne.n	3077c <MQTTSerialize_connectLength+0x7c>
   30774:	687b      	ldr	r3, [r7, #4]
   30776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30778:	2b00      	cmp	r3, #0
   3077a:	d00a      	beq.n	30792 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   3077c:	687b      	ldr	r3, [r7, #4]
   3077e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30780:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30784:	4b0f      	ldr	r3, [pc, #60]	; (307c4 <MQTTSerialize_connectLength+0xc4>)
   30786:	4798      	blx	r3
   30788:	0003      	movs	r3, r0
   3078a:	3302      	adds	r3, #2
   3078c:	68fa      	ldr	r2, [r7, #12]
   3078e:	18d3      	adds	r3, r2, r3
   30790:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30792:	687b      	ldr	r3, [r7, #4]
   30794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30796:	2b00      	cmp	r3, #0
   30798:	d103      	bne.n	307a2 <MQTTSerialize_connectLength+0xa2>
   3079a:	687b      	ldr	r3, [r7, #4]
   3079c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3079e:	2b00      	cmp	r3, #0
   307a0:	d00a      	beq.n	307b8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   307a2:	687b      	ldr	r3, [r7, #4]
   307a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   307a6:	6d19      	ldr	r1, [r3, #80]	; 0x50
   307a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   307aa:	4b06      	ldr	r3, [pc, #24]	; (307c4 <MQTTSerialize_connectLength+0xc4>)
   307ac:	4798      	blx	r3
   307ae:	0003      	movs	r3, r0
   307b0:	3302      	adds	r3, #2
   307b2:	68fa      	ldr	r2, [r7, #12]
   307b4:	18d3      	adds	r3, r2, r3
   307b6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   307b8:	68fb      	ldr	r3, [r7, #12]
}
   307ba:	0018      	movs	r0, r3
   307bc:	46bd      	mov	sp, r7
   307be:	b005      	add	sp, #20
   307c0:	bd90      	pop	{r4, r7, pc}
   307c2:	46c0      	nop			; (mov r8, r8)
   307c4:	00031171 	.word	0x00031171

000307c8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   307c8:	b590      	push	{r4, r7, lr}
   307ca:	b08b      	sub	sp, #44	; 0x2c
   307cc:	af00      	add	r7, sp, #0
   307ce:	60f8      	str	r0, [r7, #12]
   307d0:	60b9      	str	r1, [r7, #8]
   307d2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   307d4:	68fb      	ldr	r3, [r7, #12]
   307d6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   307d8:	2300      	movs	r3, #0
   307da:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   307dc:	2300      	movs	r3, #0
   307de:	617b      	str	r3, [r7, #20]
	int len = 0;
   307e0:	2300      	movs	r3, #0
   307e2:	623b      	str	r3, [r7, #32]
	int rc = -1;
   307e4:	2301      	movs	r3, #1
   307e6:	425b      	negs	r3, r3
   307e8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   307ea:	687b      	ldr	r3, [r7, #4]
   307ec:	0018      	movs	r0, r3
   307ee:	4b8c      	ldr	r3, [pc, #560]	; (30a20 <MQTTSerialize_connect+0x258>)
   307f0:	4798      	blx	r3
   307f2:	0003      	movs	r3, r0
   307f4:	623b      	str	r3, [r7, #32]
   307f6:	6a3b      	ldr	r3, [r7, #32]
   307f8:	0018      	movs	r0, r3
   307fa:	4b8a      	ldr	r3, [pc, #552]	; (30a24 <MQTTSerialize_connect+0x25c>)
   307fc:	4798      	blx	r3
   307fe:	0002      	movs	r2, r0
   30800:	68bb      	ldr	r3, [r7, #8]
   30802:	429a      	cmp	r2, r3
   30804:	dd03      	ble.n	3080e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30806:	2302      	movs	r3, #2
   30808:	425b      	negs	r3, r3
   3080a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3080c:	e103      	b.n	30a16 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   3080e:	2318      	movs	r3, #24
   30810:	18fb      	adds	r3, r7, r3
   30812:	2200      	movs	r2, #0
   30814:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   30816:	2318      	movs	r3, #24
   30818:	18fb      	adds	r3, r7, r3
   3081a:	781a      	ldrb	r2, [r3, #0]
   3081c:	210f      	movs	r1, #15
   3081e:	400a      	ands	r2, r1
   30820:	1c11      	adds	r1, r2, #0
   30822:	2210      	movs	r2, #16
   30824:	430a      	orrs	r2, r1
   30826:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30828:	2318      	movs	r3, #24
   3082a:	18fb      	adds	r3, r7, r3
   3082c:	781a      	ldrb	r2, [r3, #0]
   3082e:	231c      	movs	r3, #28
   30830:	18fb      	adds	r3, r7, r3
   30832:	0011      	movs	r1, r2
   30834:	0018      	movs	r0, r3
   30836:	4b7c      	ldr	r3, [pc, #496]	; (30a28 <MQTTSerialize_connect+0x260>)
   30838:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   3083a:	69fb      	ldr	r3, [r7, #28]
   3083c:	6a3a      	ldr	r2, [r7, #32]
   3083e:	0011      	movs	r1, r2
   30840:	0018      	movs	r0, r3
   30842:	4b7a      	ldr	r3, [pc, #488]	; (30a2c <MQTTSerialize_connect+0x264>)
   30844:	4798      	blx	r3
   30846:	0002      	movs	r2, r0
   30848:	69fb      	ldr	r3, [r7, #28]
   3084a:	189b      	adds	r3, r3, r2
   3084c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   3084e:	687b      	ldr	r3, [r7, #4]
   30850:	7a1b      	ldrb	r3, [r3, #8]
   30852:	2b04      	cmp	r3, #4
   30854:	d10d      	bne.n	30872 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   30856:	4a76      	ldr	r2, [pc, #472]	; (30a30 <MQTTSerialize_connect+0x268>)
   30858:	231c      	movs	r3, #28
   3085a:	18fb      	adds	r3, r7, r3
   3085c:	0011      	movs	r1, r2
   3085e:	0018      	movs	r0, r3
   30860:	4b74      	ldr	r3, [pc, #464]	; (30a34 <MQTTSerialize_connect+0x26c>)
   30862:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   30864:	231c      	movs	r3, #28
   30866:	18fb      	adds	r3, r7, r3
   30868:	2104      	movs	r1, #4
   3086a:	0018      	movs	r0, r3
   3086c:	4b6e      	ldr	r3, [pc, #440]	; (30a28 <MQTTSerialize_connect+0x260>)
   3086e:	4798      	blx	r3
   30870:	e00c      	b.n	3088c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30872:	4a71      	ldr	r2, [pc, #452]	; (30a38 <MQTTSerialize_connect+0x270>)
   30874:	231c      	movs	r3, #28
   30876:	18fb      	adds	r3, r7, r3
   30878:	0011      	movs	r1, r2
   3087a:	0018      	movs	r0, r3
   3087c:	4b6d      	ldr	r3, [pc, #436]	; (30a34 <MQTTSerialize_connect+0x26c>)
   3087e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30880:	231c      	movs	r3, #28
   30882:	18fb      	adds	r3, r7, r3
   30884:	2103      	movs	r1, #3
   30886:	0018      	movs	r0, r3
   30888:	4b67      	ldr	r3, [pc, #412]	; (30a28 <MQTTSerialize_connect+0x260>)
   3088a:	4798      	blx	r3
	}

	flags.all = 0;
   3088c:	2314      	movs	r3, #20
   3088e:	18fb      	adds	r3, r7, r3
   30890:	2200      	movs	r2, #0
   30892:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30894:	687b      	ldr	r3, [r7, #4]
   30896:	7e9b      	ldrb	r3, [r3, #26]
   30898:	1c1a      	adds	r2, r3, #0
   3089a:	2301      	movs	r3, #1
   3089c:	4013      	ands	r3, r2
   3089e:	b2da      	uxtb	r2, r3
   308a0:	2314      	movs	r3, #20
   308a2:	18fb      	adds	r3, r7, r3
   308a4:	2101      	movs	r1, #1
   308a6:	400a      	ands	r2, r1
   308a8:	1890      	adds	r0, r2, r2
   308aa:	781a      	ldrb	r2, [r3, #0]
   308ac:	2102      	movs	r1, #2
   308ae:	438a      	bics	r2, r1
   308b0:	1c11      	adds	r1, r2, #0
   308b2:	1c02      	adds	r2, r0, #0
   308b4:	430a      	orrs	r2, r1
   308b6:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   308b8:	687b      	ldr	r3, [r7, #4]
   308ba:	7edb      	ldrb	r3, [r3, #27]
   308bc:	1e5a      	subs	r2, r3, #1
   308be:	4193      	sbcs	r3, r2
   308c0:	b2da      	uxtb	r2, r3
   308c2:	2314      	movs	r3, #20
   308c4:	18fb      	adds	r3, r7, r3
   308c6:	2101      	movs	r1, #1
   308c8:	400a      	ands	r2, r1
   308ca:	0090      	lsls	r0, r2, #2
   308cc:	781a      	ldrb	r2, [r3, #0]
   308ce:	2104      	movs	r1, #4
   308d0:	438a      	bics	r2, r1
   308d2:	1c11      	adds	r1, r2, #0
   308d4:	1c02      	adds	r2, r0, #0
   308d6:	430a      	orrs	r2, r1
   308d8:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   308da:	2314      	movs	r3, #20
   308dc:	18fb      	adds	r3, r7, r3
   308de:	781b      	ldrb	r3, [r3, #0]
   308e0:	2204      	movs	r2, #4
   308e2:	4013      	ands	r3, r2
   308e4:	b2db      	uxtb	r3, r3
   308e6:	2b00      	cmp	r3, #0
   308e8:	d025      	beq.n	30936 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   308ea:	687b      	ldr	r3, [r7, #4]
   308ec:	223d      	movs	r2, #61	; 0x3d
   308ee:	5c9b      	ldrb	r3, [r3, r2]
   308f0:	1c1a      	adds	r2, r3, #0
   308f2:	2303      	movs	r3, #3
   308f4:	4013      	ands	r3, r2
   308f6:	b2da      	uxtb	r2, r3
   308f8:	2314      	movs	r3, #20
   308fa:	18fb      	adds	r3, r7, r3
   308fc:	2103      	movs	r1, #3
   308fe:	400a      	ands	r2, r1
   30900:	00d0      	lsls	r0, r2, #3
   30902:	781a      	ldrb	r2, [r3, #0]
   30904:	2118      	movs	r1, #24
   30906:	438a      	bics	r2, r1
   30908:	1c11      	adds	r1, r2, #0
   3090a:	1c02      	adds	r2, r0, #0
   3090c:	430a      	orrs	r2, r1
   3090e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30910:	687b      	ldr	r3, [r7, #4]
   30912:	223c      	movs	r2, #60	; 0x3c
   30914:	5c9b      	ldrb	r3, [r3, r2]
   30916:	1c1a      	adds	r2, r3, #0
   30918:	2301      	movs	r3, #1
   3091a:	4013      	ands	r3, r2
   3091c:	b2da      	uxtb	r2, r3
   3091e:	2314      	movs	r3, #20
   30920:	18fb      	adds	r3, r7, r3
   30922:	2101      	movs	r1, #1
   30924:	400a      	ands	r2, r1
   30926:	0150      	lsls	r0, r2, #5
   30928:	781a      	ldrb	r2, [r3, #0]
   3092a:	2120      	movs	r1, #32
   3092c:	438a      	bics	r2, r1
   3092e:	1c11      	adds	r1, r2, #0
   30930:	1c02      	adds	r2, r0, #0
   30932:	430a      	orrs	r2, r1
   30934:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   30936:	687b      	ldr	r3, [r7, #4]
   30938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3093a:	2b00      	cmp	r3, #0
   3093c:	d103      	bne.n	30946 <MQTTSerialize_connect+0x17e>
   3093e:	687b      	ldr	r3, [r7, #4]
   30940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30942:	2b00      	cmp	r3, #0
   30944:	d006      	beq.n	30954 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   30946:	2314      	movs	r3, #20
   30948:	18fb      	adds	r3, r7, r3
   3094a:	781a      	ldrb	r2, [r3, #0]
   3094c:	2180      	movs	r1, #128	; 0x80
   3094e:	4249      	negs	r1, r1
   30950:	430a      	orrs	r2, r1
   30952:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   30954:	687b      	ldr	r3, [r7, #4]
   30956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30958:	2b00      	cmp	r3, #0
   3095a:	d103      	bne.n	30964 <MQTTSerialize_connect+0x19c>
   3095c:	687b      	ldr	r3, [r7, #4]
   3095e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30960:	2b00      	cmp	r3, #0
   30962:	d005      	beq.n	30970 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30964:	2314      	movs	r3, #20
   30966:	18fb      	adds	r3, r7, r3
   30968:	781a      	ldrb	r2, [r3, #0]
   3096a:	2140      	movs	r1, #64	; 0x40
   3096c:	430a      	orrs	r2, r1
   3096e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30970:	2314      	movs	r3, #20
   30972:	18fb      	adds	r3, r7, r3
   30974:	781a      	ldrb	r2, [r3, #0]
   30976:	231c      	movs	r3, #28
   30978:	18fb      	adds	r3, r7, r3
   3097a:	0011      	movs	r1, r2
   3097c:	0018      	movs	r0, r3
   3097e:	4b2a      	ldr	r3, [pc, #168]	; (30a28 <MQTTSerialize_connect+0x260>)
   30980:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30982:	687b      	ldr	r3, [r7, #4]
   30984:	8b1b      	ldrh	r3, [r3, #24]
   30986:	001a      	movs	r2, r3
   30988:	231c      	movs	r3, #28
   3098a:	18fb      	adds	r3, r7, r3
   3098c:	0011      	movs	r1, r2
   3098e:	0018      	movs	r0, r3
   30990:	4b2a      	ldr	r3, [pc, #168]	; (30a3c <MQTTSerialize_connect+0x274>)
   30992:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30994:	687b      	ldr	r3, [r7, #4]
   30996:	221c      	movs	r2, #28
   30998:	18b8      	adds	r0, r7, r2
   3099a:	68d9      	ldr	r1, [r3, #12]
   3099c:	691a      	ldr	r2, [r3, #16]
   3099e:	695b      	ldr	r3, [r3, #20]
   309a0:	4c27      	ldr	r4, [pc, #156]	; (30a40 <MQTTSerialize_connect+0x278>)
   309a2:	47a0      	blx	r4
	if (options->willFlag)
   309a4:	687b      	ldr	r3, [r7, #4]
   309a6:	7edb      	ldrb	r3, [r3, #27]
   309a8:	2b00      	cmp	r3, #0
   309aa:	d00f      	beq.n	309cc <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   309ac:	687b      	ldr	r3, [r7, #4]
   309ae:	221c      	movs	r2, #28
   309b0:	18b8      	adds	r0, r7, r2
   309b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   309b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   309b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   309b8:	4c21      	ldr	r4, [pc, #132]	; (30a40 <MQTTSerialize_connect+0x278>)
   309ba:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   309bc:	687b      	ldr	r3, [r7, #4]
   309be:	221c      	movs	r2, #28
   309c0:	18b8      	adds	r0, r7, r2
   309c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   309c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   309c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   309c8:	4c1d      	ldr	r4, [pc, #116]	; (30a40 <MQTTSerialize_connect+0x278>)
   309ca:	47a0      	blx	r4
	}
	if (flags.bits.username)
   309cc:	2314      	movs	r3, #20
   309ce:	18fb      	adds	r3, r7, r3
   309d0:	781b      	ldrb	r3, [r3, #0]
   309d2:	227f      	movs	r2, #127	; 0x7f
   309d4:	4393      	bics	r3, r2
   309d6:	b2db      	uxtb	r3, r3
   309d8:	2b00      	cmp	r3, #0
   309da:	d007      	beq.n	309ec <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   309dc:	687b      	ldr	r3, [r7, #4]
   309de:	221c      	movs	r2, #28
   309e0:	18b8      	adds	r0, r7, r2
   309e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   309e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   309e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   309e8:	4c15      	ldr	r4, [pc, #84]	; (30a40 <MQTTSerialize_connect+0x278>)
   309ea:	47a0      	blx	r4
	if (flags.bits.password)
   309ec:	2314      	movs	r3, #20
   309ee:	18fb      	adds	r3, r7, r3
   309f0:	781b      	ldrb	r3, [r3, #0]
   309f2:	2240      	movs	r2, #64	; 0x40
   309f4:	4013      	ands	r3, r2
   309f6:	b2db      	uxtb	r3, r3
   309f8:	2b00      	cmp	r3, #0
   309fa:	d007      	beq.n	30a0c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   309fc:	687b      	ldr	r3, [r7, #4]
   309fe:	221c      	movs	r2, #28
   30a00:	18b8      	adds	r0, r7, r2
   30a02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30a08:	4c0d      	ldr	r4, [pc, #52]	; (30a40 <MQTTSerialize_connect+0x278>)
   30a0a:	47a0      	blx	r4

	rc = ptr - buf;
   30a0c:	69fb      	ldr	r3, [r7, #28]
   30a0e:	001a      	movs	r2, r3
   30a10:	68fb      	ldr	r3, [r7, #12]
   30a12:	1ad3      	subs	r3, r2, r3
   30a14:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   30a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30a18:	0018      	movs	r0, r3
   30a1a:	46bd      	mov	sp, r7
   30a1c:	b00b      	add	sp, #44	; 0x2c
   30a1e:	bd90      	pop	{r4, r7, pc}
   30a20:	00030701 	.word	0x00030701
   30a24:	00030e95 	.word	0x00030e95
   30a28:	00030fb7 	.word	0x00030fb7
   30a2c:	00030d9d 	.word	0x00030d9d
   30a30:	0003b698 	.word	0x0003b698
   30a34:	00031039 	.word	0x00031039
   30a38:	0003b6a0 	.word	0x0003b6a0
   30a3c:	00030fe1 	.word	0x00030fe1
   30a40:	00031089 	.word	0x00031089

00030a44 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30a44:	b580      	push	{r7, lr}
   30a46:	b08a      	sub	sp, #40	; 0x28
   30a48:	af00      	add	r7, sp, #0
   30a4a:	60f8      	str	r0, [r7, #12]
   30a4c:	60b9      	str	r1, [r7, #8]
   30a4e:	607a      	str	r2, [r7, #4]
   30a50:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30a52:	2300      	movs	r3, #0
   30a54:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30a56:	687b      	ldr	r3, [r7, #4]
   30a58:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30a5a:	2300      	movs	r3, #0
   30a5c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30a5e:	2300      	movs	r3, #0
   30a60:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30a62:	2300      	movs	r3, #0
   30a64:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30a66:	2318      	movs	r3, #24
   30a68:	18fb      	adds	r3, r7, r3
   30a6a:	0018      	movs	r0, r3
   30a6c:	4b25      	ldr	r3, [pc, #148]	; (30b04 <MQTTDeserialize_connack+0xc0>)
   30a6e:	4798      	blx	r3
   30a70:	0003      	movs	r3, r0
   30a72:	001a      	movs	r2, r3
   30a74:	231c      	movs	r3, #28
   30a76:	18fb      	adds	r3, r7, r3
   30a78:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30a7a:	231c      	movs	r3, #28
   30a7c:	18fb      	adds	r3, r7, r3
   30a7e:	781b      	ldrb	r3, [r3, #0]
   30a80:	220f      	movs	r2, #15
   30a82:	4393      	bics	r3, r2
   30a84:	b2db      	uxtb	r3, r3
   30a86:	2b20      	cmp	r3, #32
   30a88:	d134      	bne.n	30af4 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30a8a:	69bb      	ldr	r3, [r7, #24]
   30a8c:	2214      	movs	r2, #20
   30a8e:	18ba      	adds	r2, r7, r2
   30a90:	0011      	movs	r1, r2
   30a92:	0018      	movs	r0, r3
   30a94:	4b1c      	ldr	r3, [pc, #112]	; (30b08 <MQTTDeserialize_connack+0xc4>)
   30a96:	4798      	blx	r3
   30a98:	0003      	movs	r3, r0
   30a9a:	627b      	str	r3, [r7, #36]	; 0x24
   30a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30a9e:	69bb      	ldr	r3, [r7, #24]
   30aa0:	189b      	adds	r3, r3, r2
   30aa2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30aa4:	69bb      	ldr	r3, [r7, #24]
   30aa6:	697a      	ldr	r2, [r7, #20]
   30aa8:	189b      	adds	r3, r3, r2
   30aaa:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30aac:	6a3b      	ldr	r3, [r7, #32]
   30aae:	69ba      	ldr	r2, [r7, #24]
   30ab0:	1a9b      	subs	r3, r3, r2
   30ab2:	2b01      	cmp	r3, #1
   30ab4:	dd20      	ble.n	30af8 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30ab6:	2318      	movs	r3, #24
   30ab8:	18fb      	adds	r3, r7, r3
   30aba:	0018      	movs	r0, r3
   30abc:	4b11      	ldr	r3, [pc, #68]	; (30b04 <MQTTDeserialize_connack+0xc0>)
   30abe:	4798      	blx	r3
   30ac0:	0003      	movs	r3, r0
   30ac2:	001a      	movs	r2, r3
   30ac4:	2310      	movs	r3, #16
   30ac6:	18fb      	adds	r3, r7, r3
   30ac8:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30aca:	2310      	movs	r3, #16
   30acc:	18fb      	adds	r3, r7, r3
   30ace:	781b      	ldrb	r3, [r3, #0]
   30ad0:	061b      	lsls	r3, r3, #24
   30ad2:	0fdb      	lsrs	r3, r3, #31
   30ad4:	b2db      	uxtb	r3, r3
   30ad6:	001a      	movs	r2, r3
   30ad8:	68fb      	ldr	r3, [r7, #12]
   30ada:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30adc:	2318      	movs	r3, #24
   30ade:	18fb      	adds	r3, r7, r3
   30ae0:	0018      	movs	r0, r3
   30ae2:	4b08      	ldr	r3, [pc, #32]	; (30b04 <MQTTDeserialize_connack+0xc0>)
   30ae4:	4798      	blx	r3
   30ae6:	0003      	movs	r3, r0
   30ae8:	001a      	movs	r2, r3
   30aea:	68bb      	ldr	r3, [r7, #8]
   30aec:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30aee:	2301      	movs	r3, #1
   30af0:	627b      	str	r3, [r7, #36]	; 0x24
   30af2:	e002      	b.n	30afa <MQTTDeserialize_connack+0xb6>
		goto exit;
   30af4:	46c0      	nop			; (mov r8, r8)
   30af6:	e000      	b.n	30afa <MQTTDeserialize_connack+0xb6>
		goto exit;
   30af8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30afc:	0018      	movs	r0, r3
   30afe:	46bd      	mov	sp, r7
   30b00:	b00a      	add	sp, #40	; 0x28
   30b02:	bd80      	pop	{r7, pc}
   30b04:	00030f8b 	.word	0x00030f8b
   30b08:	00030f25 	.word	0x00030f25

00030b0c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30b0c:	b580      	push	{r7, lr}
   30b0e:	b088      	sub	sp, #32
   30b10:	af00      	add	r7, sp, #0
   30b12:	60f8      	str	r0, [r7, #12]
   30b14:	60b9      	str	r1, [r7, #8]
   30b16:	1dfb      	adds	r3, r7, #7
   30b18:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30b1a:	2300      	movs	r3, #0
   30b1c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30b1e:	2301      	movs	r3, #1
   30b20:	425b      	negs	r3, r3
   30b22:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30b24:	68fb      	ldr	r3, [r7, #12]
   30b26:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30b28:	68bb      	ldr	r3, [r7, #8]
   30b2a:	2b01      	cmp	r3, #1
   30b2c:	dc03      	bgt.n	30b36 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30b2e:	2302      	movs	r3, #2
   30b30:	425b      	negs	r3, r3
   30b32:	61fb      	str	r3, [r7, #28]
		goto exit;
   30b34:	e029      	b.n	30b8a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30b36:	2318      	movs	r3, #24
   30b38:	18fb      	adds	r3, r7, r3
   30b3a:	2200      	movs	r2, #0
   30b3c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30b3e:	1dfb      	adds	r3, r7, #7
   30b40:	781b      	ldrb	r3, [r3, #0]
   30b42:	220f      	movs	r2, #15
   30b44:	4013      	ands	r3, r2
   30b46:	b2da      	uxtb	r2, r3
   30b48:	2318      	movs	r3, #24
   30b4a:	18fb      	adds	r3, r7, r3
   30b4c:	0110      	lsls	r0, r2, #4
   30b4e:	781a      	ldrb	r2, [r3, #0]
   30b50:	210f      	movs	r1, #15
   30b52:	400a      	ands	r2, r1
   30b54:	1c11      	adds	r1, r2, #0
   30b56:	1c02      	adds	r2, r0, #0
   30b58:	430a      	orrs	r2, r1
   30b5a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30b5c:	2318      	movs	r3, #24
   30b5e:	18fb      	adds	r3, r7, r3
   30b60:	781a      	ldrb	r2, [r3, #0]
   30b62:	2314      	movs	r3, #20
   30b64:	18fb      	adds	r3, r7, r3
   30b66:	0011      	movs	r1, r2
   30b68:	0018      	movs	r0, r3
   30b6a:	4b0a      	ldr	r3, [pc, #40]	; (30b94 <MQTTSerialize_zero+0x88>)
   30b6c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30b6e:	697b      	ldr	r3, [r7, #20]
   30b70:	2100      	movs	r1, #0
   30b72:	0018      	movs	r0, r3
   30b74:	4b08      	ldr	r3, [pc, #32]	; (30b98 <MQTTSerialize_zero+0x8c>)
   30b76:	4798      	blx	r3
   30b78:	0002      	movs	r2, r0
   30b7a:	697b      	ldr	r3, [r7, #20]
   30b7c:	189b      	adds	r3, r3, r2
   30b7e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30b80:	697b      	ldr	r3, [r7, #20]
   30b82:	001a      	movs	r2, r3
   30b84:	68fb      	ldr	r3, [r7, #12]
   30b86:	1ad3      	subs	r3, r2, r3
   30b88:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b8a:	69fb      	ldr	r3, [r7, #28]
}
   30b8c:	0018      	movs	r0, r3
   30b8e:	46bd      	mov	sp, r7
   30b90:	b008      	add	sp, #32
   30b92:	bd80      	pop	{r7, pc}
   30b94:	00030fb7 	.word	0x00030fb7
   30b98:	00030d9d 	.word	0x00030d9d

00030b9c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30b9c:	b580      	push	{r7, lr}
   30b9e:	b082      	sub	sp, #8
   30ba0:	af00      	add	r7, sp, #0
   30ba2:	6078      	str	r0, [r7, #4]
   30ba4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30ba6:	6839      	ldr	r1, [r7, #0]
   30ba8:	687b      	ldr	r3, [r7, #4]
   30baa:	220e      	movs	r2, #14
   30bac:	0018      	movs	r0, r3
   30bae:	4b03      	ldr	r3, [pc, #12]	; (30bbc <MQTTSerialize_disconnect+0x20>)
   30bb0:	4798      	blx	r3
   30bb2:	0003      	movs	r3, r0
}
   30bb4:	0018      	movs	r0, r3
   30bb6:	46bd      	mov	sp, r7
   30bb8:	b002      	add	sp, #8
   30bba:	bd80      	pop	{r7, pc}
   30bbc:	00030b0d 	.word	0x00030b0d

00030bc0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30bc0:	b580      	push	{r7, lr}
   30bc2:	b082      	sub	sp, #8
   30bc4:	af00      	add	r7, sp, #0
   30bc6:	6078      	str	r0, [r7, #4]
   30bc8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30bca:	6839      	ldr	r1, [r7, #0]
   30bcc:	687b      	ldr	r3, [r7, #4]
   30bce:	220c      	movs	r2, #12
   30bd0:	0018      	movs	r0, r3
   30bd2:	4b03      	ldr	r3, [pc, #12]	; (30be0 <MQTTSerialize_pingreq+0x20>)
   30bd4:	4798      	blx	r3
   30bd6:	0003      	movs	r3, r0
}
   30bd8:	0018      	movs	r0, r3
   30bda:	46bd      	mov	sp, r7
   30bdc:	b002      	add	sp, #8
   30bde:	bd80      	pop	{r7, pc}
   30be0:	00030b0d 	.word	0x00030b0d

00030be4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30be4:	b580      	push	{r7, lr}
   30be6:	b08a      	sub	sp, #40	; 0x28
   30be8:	af00      	add	r7, sp, #0
   30bea:	60f8      	str	r0, [r7, #12]
   30bec:	60b9      	str	r1, [r7, #8]
   30bee:	607a      	str	r2, [r7, #4]
   30bf0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30bf2:	2300      	movs	r3, #0
   30bf4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30bf8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30bfa:	2300      	movs	r3, #0
   30bfc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30bfe:	2300      	movs	r3, #0
   30c00:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30c02:	2300      	movs	r3, #0
   30c04:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c06:	2318      	movs	r3, #24
   30c08:	18fb      	adds	r3, r7, r3
   30c0a:	0018      	movs	r0, r3
   30c0c:	4b32      	ldr	r3, [pc, #200]	; (30cd8 <MQTTDeserialize_publish+0xf4>)
   30c0e:	4798      	blx	r3
   30c10:	0003      	movs	r3, r0
   30c12:	001a      	movs	r2, r3
   30c14:	231c      	movs	r3, #28
   30c16:	18fb      	adds	r3, r7, r3
   30c18:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30c1a:	231c      	movs	r3, #28
   30c1c:	18fb      	adds	r3, r7, r3
   30c1e:	781b      	ldrb	r3, [r3, #0]
   30c20:	220f      	movs	r2, #15
   30c22:	4393      	bics	r3, r2
   30c24:	b2db      	uxtb	r3, r3
   30c26:	2b30      	cmp	r3, #48	; 0x30
   30c28:	d150      	bne.n	30ccc <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30c2a:	231c      	movs	r3, #28
   30c2c:	18fb      	adds	r3, r7, r3
   30c2e:	781b      	ldrb	r3, [r3, #0]
   30c30:	071b      	lsls	r3, r3, #28
   30c32:	0fdb      	lsrs	r3, r3, #31
   30c34:	b2db      	uxtb	r3, r3
   30c36:	001a      	movs	r2, r3
   30c38:	68fb      	ldr	r3, [r7, #12]
   30c3a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30c3c:	231c      	movs	r3, #28
   30c3e:	18fb      	adds	r3, r7, r3
   30c40:	781b      	ldrb	r3, [r3, #0]
   30c42:	075b      	lsls	r3, r3, #29
   30c44:	0f9b      	lsrs	r3, r3, #30
   30c46:	b2db      	uxtb	r3, r3
   30c48:	001a      	movs	r2, r3
   30c4a:	68bb      	ldr	r3, [r7, #8]
   30c4c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30c4e:	231c      	movs	r3, #28
   30c50:	18fb      	adds	r3, r7, r3
   30c52:	781b      	ldrb	r3, [r3, #0]
   30c54:	07db      	lsls	r3, r3, #31
   30c56:	0fdb      	lsrs	r3, r3, #31
   30c58:	b2db      	uxtb	r3, r3
   30c5a:	001a      	movs	r2, r3
   30c5c:	687b      	ldr	r3, [r7, #4]
   30c5e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30c60:	69bb      	ldr	r3, [r7, #24]
   30c62:	2214      	movs	r2, #20
   30c64:	18ba      	adds	r2, r7, r2
   30c66:	0011      	movs	r1, r2
   30c68:	0018      	movs	r0, r3
   30c6a:	4b1c      	ldr	r3, [pc, #112]	; (30cdc <MQTTDeserialize_publish+0xf8>)
   30c6c:	4798      	blx	r3
   30c6e:	0003      	movs	r3, r0
   30c70:	627b      	str	r3, [r7, #36]	; 0x24
   30c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30c74:	69bb      	ldr	r3, [r7, #24]
   30c76:	189b      	adds	r3, r3, r2
   30c78:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30c7a:	69bb      	ldr	r3, [r7, #24]
   30c7c:	697a      	ldr	r2, [r7, #20]
   30c7e:	189b      	adds	r3, r3, r2
   30c80:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30c82:	6a3a      	ldr	r2, [r7, #32]
   30c84:	2318      	movs	r3, #24
   30c86:	18f9      	adds	r1, r7, r3
   30c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c8a:	0018      	movs	r0, r3
   30c8c:	4b14      	ldr	r3, [pc, #80]	; (30ce0 <MQTTDeserialize_publish+0xfc>)
   30c8e:	4798      	blx	r3
   30c90:	1e03      	subs	r3, r0, #0
   30c92:	d01c      	beq.n	30cce <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30c94:	6a3b      	ldr	r3, [r7, #32]
   30c96:	69ba      	ldr	r2, [r7, #24]
   30c98:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30c9a:	d418      	bmi.n	30cce <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30c9c:	68bb      	ldr	r3, [r7, #8]
   30c9e:	681b      	ldr	r3, [r3, #0]
   30ca0:	2b00      	cmp	r3, #0
   30ca2:	dd08      	ble.n	30cb6 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30ca4:	2318      	movs	r3, #24
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	0018      	movs	r0, r3
   30caa:	4b0e      	ldr	r3, [pc, #56]	; (30ce4 <MQTTDeserialize_publish+0x100>)
   30cac:	4798      	blx	r3
   30cae:	0003      	movs	r3, r0
   30cb0:	b29a      	uxth	r2, r3
   30cb2:	683b      	ldr	r3, [r7, #0]
   30cb4:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30cb6:	6a3b      	ldr	r3, [r7, #32]
   30cb8:	69ba      	ldr	r2, [r7, #24]
   30cba:	1a9a      	subs	r2, r3, r2
   30cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30cbe:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30cc0:	69ba      	ldr	r2, [r7, #24]
   30cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30cc4:	601a      	str	r2, [r3, #0]
	rc = 1;
   30cc6:	2301      	movs	r3, #1
   30cc8:	627b      	str	r3, [r7, #36]	; 0x24
   30cca:	e000      	b.n	30cce <MQTTDeserialize_publish+0xea>
		goto exit;
   30ccc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30cd0:	0018      	movs	r0, r3
   30cd2:	46bd      	mov	sp, r7
   30cd4:	b00a      	add	sp, #40	; 0x28
   30cd6:	bd80      	pop	{r7, pc}
   30cd8:	00030f8b 	.word	0x00030f8b
   30cdc:	00030f25 	.word	0x00030f25
   30ce0:	00031109 	.word	0x00031109
   30ce4:	00030f59 	.word	0x00030f59

00030ce8 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30ce8:	b580      	push	{r7, lr}
   30cea:	b08a      	sub	sp, #40	; 0x28
   30cec:	af00      	add	r7, sp, #0
   30cee:	60f8      	str	r0, [r7, #12]
   30cf0:	60b9      	str	r1, [r7, #8]
   30cf2:	607a      	str	r2, [r7, #4]
   30cf4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30cf6:	2300      	movs	r3, #0
   30cf8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30cfa:	683b      	ldr	r3, [r7, #0]
   30cfc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30cfe:	2300      	movs	r3, #0
   30d00:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30d02:	2300      	movs	r3, #0
   30d04:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30d06:	2318      	movs	r3, #24
   30d08:	18fb      	adds	r3, r7, r3
   30d0a:	0018      	movs	r0, r3
   30d0c:	4b20      	ldr	r3, [pc, #128]	; (30d90 <MQTTDeserialize_ack+0xa8>)
   30d0e:	4798      	blx	r3
   30d10:	0003      	movs	r3, r0
   30d12:	001a      	movs	r2, r3
   30d14:	231c      	movs	r3, #28
   30d16:	18fb      	adds	r3, r7, r3
   30d18:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30d1a:	231c      	movs	r3, #28
   30d1c:	18fb      	adds	r3, r7, r3
   30d1e:	781b      	ldrb	r3, [r3, #0]
   30d20:	071b      	lsls	r3, r3, #28
   30d22:	0fdb      	lsrs	r3, r3, #31
   30d24:	b2db      	uxtb	r3, r3
   30d26:	001a      	movs	r2, r3
   30d28:	68bb      	ldr	r3, [r7, #8]
   30d2a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30d2c:	231c      	movs	r3, #28
   30d2e:	18fb      	adds	r3, r7, r3
   30d30:	781b      	ldrb	r3, [r3, #0]
   30d32:	061b      	lsls	r3, r3, #24
   30d34:	0f1b      	lsrs	r3, r3, #28
   30d36:	b2db      	uxtb	r3, r3
   30d38:	001a      	movs	r2, r3
   30d3a:	68fb      	ldr	r3, [r7, #12]
   30d3c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30d3e:	69bb      	ldr	r3, [r7, #24]
   30d40:	2214      	movs	r2, #20
   30d42:	18ba      	adds	r2, r7, r2
   30d44:	0011      	movs	r1, r2
   30d46:	0018      	movs	r0, r3
   30d48:	4b12      	ldr	r3, [pc, #72]	; (30d94 <MQTTDeserialize_ack+0xac>)
   30d4a:	4798      	blx	r3
   30d4c:	0003      	movs	r3, r0
   30d4e:	627b      	str	r3, [r7, #36]	; 0x24
   30d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30d52:	69bb      	ldr	r3, [r7, #24]
   30d54:	189b      	adds	r3, r3, r2
   30d56:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30d58:	69bb      	ldr	r3, [r7, #24]
   30d5a:	697a      	ldr	r2, [r7, #20]
   30d5c:	189b      	adds	r3, r3, r2
   30d5e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30d60:	6a3b      	ldr	r3, [r7, #32]
   30d62:	69ba      	ldr	r2, [r7, #24]
   30d64:	1a9b      	subs	r3, r3, r2
   30d66:	2b01      	cmp	r3, #1
   30d68:	dd0b      	ble.n	30d82 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30d6a:	2318      	movs	r3, #24
   30d6c:	18fb      	adds	r3, r7, r3
   30d6e:	0018      	movs	r0, r3
   30d70:	4b09      	ldr	r3, [pc, #36]	; (30d98 <MQTTDeserialize_ack+0xb0>)
   30d72:	4798      	blx	r3
   30d74:	0003      	movs	r3, r0
   30d76:	b29a      	uxth	r2, r3
   30d78:	687b      	ldr	r3, [r7, #4]
   30d7a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30d7c:	2301      	movs	r3, #1
   30d7e:	627b      	str	r3, [r7, #36]	; 0x24
   30d80:	e000      	b.n	30d84 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30d82:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30d86:	0018      	movs	r0, r3
   30d88:	46bd      	mov	sp, r7
   30d8a:	b00a      	add	sp, #40	; 0x28
   30d8c:	bd80      	pop	{r7, pc}
   30d8e:	46c0      	nop			; (mov r8, r8)
   30d90:	00030f8b 	.word	0x00030f8b
   30d94:	00030f25 	.word	0x00030f25
   30d98:	00030f59 	.word	0x00030f59

00030d9c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30d9c:	b580      	push	{r7, lr}
   30d9e:	b084      	sub	sp, #16
   30da0:	af00      	add	r7, sp, #0
   30da2:	6078      	str	r0, [r7, #4]
   30da4:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30da6:	2300      	movs	r3, #0
   30da8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30daa:	683b      	ldr	r3, [r7, #0]
   30dac:	4a17      	ldr	r2, [pc, #92]	; (30e0c <MQTTPacket_encode+0x70>)
   30dae:	4013      	ands	r3, r2
   30db0:	d504      	bpl.n	30dbc <MQTTPacket_encode+0x20>
   30db2:	3b01      	subs	r3, #1
   30db4:	2280      	movs	r2, #128	; 0x80
   30db6:	4252      	negs	r2, r2
   30db8:	4313      	orrs	r3, r2
   30dba:	3301      	adds	r3, #1
   30dbc:	001a      	movs	r2, r3
   30dbe:	230b      	movs	r3, #11
   30dc0:	18fb      	adds	r3, r7, r3
   30dc2:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30dc4:	683b      	ldr	r3, [r7, #0]
   30dc6:	2b00      	cmp	r3, #0
   30dc8:	da00      	bge.n	30dcc <MQTTPacket_encode+0x30>
   30dca:	337f      	adds	r3, #127	; 0x7f
   30dcc:	11db      	asrs	r3, r3, #7
   30dce:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30dd0:	683b      	ldr	r3, [r7, #0]
   30dd2:	2b00      	cmp	r3, #0
   30dd4:	dd08      	ble.n	30de8 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30dd6:	230b      	movs	r3, #11
   30dd8:	18fb      	adds	r3, r7, r3
   30dda:	220b      	movs	r2, #11
   30ddc:	18ba      	adds	r2, r7, r2
   30dde:	7812      	ldrb	r2, [r2, #0]
   30de0:	2180      	movs	r1, #128	; 0x80
   30de2:	4249      	negs	r1, r1
   30de4:	430a      	orrs	r2, r1
   30de6:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30de8:	68fb      	ldr	r3, [r7, #12]
   30dea:	1c5a      	adds	r2, r3, #1
   30dec:	60fa      	str	r2, [r7, #12]
   30dee:	001a      	movs	r2, r3
   30df0:	687b      	ldr	r3, [r7, #4]
   30df2:	189b      	adds	r3, r3, r2
   30df4:	220b      	movs	r2, #11
   30df6:	18ba      	adds	r2, r7, r2
   30df8:	7812      	ldrb	r2, [r2, #0]
   30dfa:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30dfc:	683b      	ldr	r3, [r7, #0]
   30dfe:	2b00      	cmp	r3, #0
   30e00:	dcd3      	bgt.n	30daa <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30e02:	68fb      	ldr	r3, [r7, #12]
}
   30e04:	0018      	movs	r0, r3
   30e06:	46bd      	mov	sp, r7
   30e08:	b004      	add	sp, #16
   30e0a:	bd80      	pop	{r7, pc}
   30e0c:	8000007f 	.word	0x8000007f

00030e10 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30e10:	b580      	push	{r7, lr}
   30e12:	b086      	sub	sp, #24
   30e14:	af00      	add	r7, sp, #0
   30e16:	6078      	str	r0, [r7, #4]
   30e18:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30e1a:	2301      	movs	r3, #1
   30e1c:	617b      	str	r3, [r7, #20]
	int len = 0;
   30e1e:	2300      	movs	r3, #0
   30e20:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30e22:	683b      	ldr	r3, [r7, #0]
   30e24:	2200      	movs	r2, #0
   30e26:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30e28:	2301      	movs	r3, #1
   30e2a:	425b      	negs	r3, r3
   30e2c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30e2e:	693b      	ldr	r3, [r7, #16]
   30e30:	3301      	adds	r3, #1
   30e32:	613b      	str	r3, [r7, #16]
   30e34:	693b      	ldr	r3, [r7, #16]
   30e36:	2b04      	cmp	r3, #4
   30e38:	dd03      	ble.n	30e42 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30e3a:	2301      	movs	r3, #1
   30e3c:	425b      	negs	r3, r3
   30e3e:	60fb      	str	r3, [r7, #12]
			goto exit;
   30e40:	e022      	b.n	30e88 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30e42:	230b      	movs	r3, #11
   30e44:	18fa      	adds	r2, r7, r3
   30e46:	687b      	ldr	r3, [r7, #4]
   30e48:	2101      	movs	r1, #1
   30e4a:	0010      	movs	r0, r2
   30e4c:	4798      	blx	r3
   30e4e:	0003      	movs	r3, r0
   30e50:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30e52:	68fb      	ldr	r3, [r7, #12]
   30e54:	2b01      	cmp	r3, #1
   30e56:	d116      	bne.n	30e86 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30e58:	683b      	ldr	r3, [r7, #0]
   30e5a:	681a      	ldr	r2, [r3, #0]
   30e5c:	230b      	movs	r3, #11
   30e5e:	18fb      	adds	r3, r7, r3
   30e60:	781b      	ldrb	r3, [r3, #0]
   30e62:	0019      	movs	r1, r3
   30e64:	237f      	movs	r3, #127	; 0x7f
   30e66:	400b      	ands	r3, r1
   30e68:	6979      	ldr	r1, [r7, #20]
   30e6a:	434b      	muls	r3, r1
   30e6c:	18d2      	adds	r2, r2, r3
   30e6e:	683b      	ldr	r3, [r7, #0]
   30e70:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30e72:	697b      	ldr	r3, [r7, #20]
   30e74:	01db      	lsls	r3, r3, #7
   30e76:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30e78:	230b      	movs	r3, #11
   30e7a:	18fb      	adds	r3, r7, r3
   30e7c:	781b      	ldrb	r3, [r3, #0]
   30e7e:	b25b      	sxtb	r3, r3
   30e80:	2b00      	cmp	r3, #0
   30e82:	dbd1      	blt.n	30e28 <MQTTPacket_decode+0x18>
   30e84:	e000      	b.n	30e88 <MQTTPacket_decode+0x78>
			goto exit;
   30e86:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30e88:	693b      	ldr	r3, [r7, #16]
}
   30e8a:	0018      	movs	r0, r3
   30e8c:	46bd      	mov	sp, r7
   30e8e:	b006      	add	sp, #24
   30e90:	bd80      	pop	{r7, pc}
	...

00030e94 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30e94:	b580      	push	{r7, lr}
   30e96:	b082      	sub	sp, #8
   30e98:	af00      	add	r7, sp, #0
   30e9a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30e9c:	687b      	ldr	r3, [r7, #4]
   30e9e:	3301      	adds	r3, #1
   30ea0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30ea2:	687b      	ldr	r3, [r7, #4]
   30ea4:	2b7f      	cmp	r3, #127	; 0x7f
   30ea6:	dc03      	bgt.n	30eb0 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30ea8:	687b      	ldr	r3, [r7, #4]
   30eaa:	3301      	adds	r3, #1
   30eac:	607b      	str	r3, [r7, #4]
   30eae:	e012      	b.n	30ed6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30eb0:	687b      	ldr	r3, [r7, #4]
   30eb2:	4a0b      	ldr	r2, [pc, #44]	; (30ee0 <MQTTPacket_len+0x4c>)
   30eb4:	4293      	cmp	r3, r2
   30eb6:	dc03      	bgt.n	30ec0 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30eb8:	687b      	ldr	r3, [r7, #4]
   30eba:	3302      	adds	r3, #2
   30ebc:	607b      	str	r3, [r7, #4]
   30ebe:	e00a      	b.n	30ed6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30ec0:	687b      	ldr	r3, [r7, #4]
   30ec2:	4a08      	ldr	r2, [pc, #32]	; (30ee4 <MQTTPacket_len+0x50>)
   30ec4:	4293      	cmp	r3, r2
   30ec6:	dc03      	bgt.n	30ed0 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30ec8:	687b      	ldr	r3, [r7, #4]
   30eca:	3303      	adds	r3, #3
   30ecc:	607b      	str	r3, [r7, #4]
   30ece:	e002      	b.n	30ed6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30ed0:	687b      	ldr	r3, [r7, #4]
   30ed2:	3304      	adds	r3, #4
   30ed4:	607b      	str	r3, [r7, #4]
	return rem_len;
   30ed6:	687b      	ldr	r3, [r7, #4]
}
   30ed8:	0018      	movs	r0, r3
   30eda:	46bd      	mov	sp, r7
   30edc:	b002      	add	sp, #8
   30ede:	bd80      	pop	{r7, pc}
   30ee0:	00003fff 	.word	0x00003fff
   30ee4:	001ffffe 	.word	0x001ffffe

00030ee8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30ee8:	b580      	push	{r7, lr}
   30eea:	b084      	sub	sp, #16
   30eec:	af00      	add	r7, sp, #0
   30eee:	6078      	str	r0, [r7, #4]
   30ef0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30ef2:	2300      	movs	r3, #0
   30ef4:	60fb      	str	r3, [r7, #12]
   30ef6:	e00a      	b.n	30f0e <bufchar+0x26>
		*c = *bufptr++;
   30ef8:	4b09      	ldr	r3, [pc, #36]	; (30f20 <bufchar+0x38>)
   30efa:	681b      	ldr	r3, [r3, #0]
   30efc:	1c59      	adds	r1, r3, #1
   30efe:	4a08      	ldr	r2, [pc, #32]	; (30f20 <bufchar+0x38>)
   30f00:	6011      	str	r1, [r2, #0]
   30f02:	781a      	ldrb	r2, [r3, #0]
   30f04:	687b      	ldr	r3, [r7, #4]
   30f06:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30f08:	68fb      	ldr	r3, [r7, #12]
   30f0a:	3301      	adds	r3, #1
   30f0c:	60fb      	str	r3, [r7, #12]
   30f0e:	68fa      	ldr	r2, [r7, #12]
   30f10:	683b      	ldr	r3, [r7, #0]
   30f12:	429a      	cmp	r2, r3
   30f14:	dbf0      	blt.n	30ef8 <bufchar+0x10>
	return count;
   30f16:	683b      	ldr	r3, [r7, #0]
}
   30f18:	0018      	movs	r0, r3
   30f1a:	46bd      	mov	sp, r7
   30f1c:	b004      	add	sp, #16
   30f1e:	bd80      	pop	{r7, pc}
   30f20:	200046e8 	.word	0x200046e8

00030f24 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30f24:	b580      	push	{r7, lr}
   30f26:	b082      	sub	sp, #8
   30f28:	af00      	add	r7, sp, #0
   30f2a:	6078      	str	r0, [r7, #4]
   30f2c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30f2e:	4b07      	ldr	r3, [pc, #28]	; (30f4c <MQTTPacket_decodeBuf+0x28>)
   30f30:	687a      	ldr	r2, [r7, #4]
   30f32:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30f34:	683a      	ldr	r2, [r7, #0]
   30f36:	4b06      	ldr	r3, [pc, #24]	; (30f50 <MQTTPacket_decodeBuf+0x2c>)
   30f38:	0011      	movs	r1, r2
   30f3a:	0018      	movs	r0, r3
   30f3c:	4b05      	ldr	r3, [pc, #20]	; (30f54 <MQTTPacket_decodeBuf+0x30>)
   30f3e:	4798      	blx	r3
   30f40:	0003      	movs	r3, r0
}
   30f42:	0018      	movs	r0, r3
   30f44:	46bd      	mov	sp, r7
   30f46:	b002      	add	sp, #8
   30f48:	bd80      	pop	{r7, pc}
   30f4a:	46c0      	nop			; (mov r8, r8)
   30f4c:	200046e8 	.word	0x200046e8
   30f50:	00030ee9 	.word	0x00030ee9
   30f54:	00030e11 	.word	0x00030e11

00030f58 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30f58:	b580      	push	{r7, lr}
   30f5a:	b084      	sub	sp, #16
   30f5c:	af00      	add	r7, sp, #0
   30f5e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30f60:	687b      	ldr	r3, [r7, #4]
   30f62:	681b      	ldr	r3, [r3, #0]
   30f64:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30f66:	68fb      	ldr	r3, [r7, #12]
   30f68:	781b      	ldrb	r3, [r3, #0]
   30f6a:	021b      	lsls	r3, r3, #8
   30f6c:	68fa      	ldr	r2, [r7, #12]
   30f6e:	3201      	adds	r2, #1
   30f70:	7812      	ldrb	r2, [r2, #0]
   30f72:	189b      	adds	r3, r3, r2
   30f74:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30f76:	687b      	ldr	r3, [r7, #4]
   30f78:	681b      	ldr	r3, [r3, #0]
   30f7a:	1c9a      	adds	r2, r3, #2
   30f7c:	687b      	ldr	r3, [r7, #4]
   30f7e:	601a      	str	r2, [r3, #0]
	return len;
   30f80:	68bb      	ldr	r3, [r7, #8]
}
   30f82:	0018      	movs	r0, r3
   30f84:	46bd      	mov	sp, r7
   30f86:	b004      	add	sp, #16
   30f88:	bd80      	pop	{r7, pc}

00030f8a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30f8a:	b580      	push	{r7, lr}
   30f8c:	b084      	sub	sp, #16
   30f8e:	af00      	add	r7, sp, #0
   30f90:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30f92:	687b      	ldr	r3, [r7, #4]
   30f94:	681a      	ldr	r2, [r3, #0]
   30f96:	230f      	movs	r3, #15
   30f98:	18fb      	adds	r3, r7, r3
   30f9a:	7812      	ldrb	r2, [r2, #0]
   30f9c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30f9e:	687b      	ldr	r3, [r7, #4]
   30fa0:	681b      	ldr	r3, [r3, #0]
   30fa2:	1c5a      	adds	r2, r3, #1
   30fa4:	687b      	ldr	r3, [r7, #4]
   30fa6:	601a      	str	r2, [r3, #0]
	return c;
   30fa8:	230f      	movs	r3, #15
   30faa:	18fb      	adds	r3, r7, r3
   30fac:	781b      	ldrb	r3, [r3, #0]
}
   30fae:	0018      	movs	r0, r3
   30fb0:	46bd      	mov	sp, r7
   30fb2:	b004      	add	sp, #16
   30fb4:	bd80      	pop	{r7, pc}

00030fb6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30fb6:	b580      	push	{r7, lr}
   30fb8:	b082      	sub	sp, #8
   30fba:	af00      	add	r7, sp, #0
   30fbc:	6078      	str	r0, [r7, #4]
   30fbe:	000a      	movs	r2, r1
   30fc0:	1cfb      	adds	r3, r7, #3
   30fc2:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30fc4:	687b      	ldr	r3, [r7, #4]
   30fc6:	681b      	ldr	r3, [r3, #0]
   30fc8:	1cfa      	adds	r2, r7, #3
   30fca:	7812      	ldrb	r2, [r2, #0]
   30fcc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30fce:	687b      	ldr	r3, [r7, #4]
   30fd0:	681b      	ldr	r3, [r3, #0]
   30fd2:	1c5a      	adds	r2, r3, #1
   30fd4:	687b      	ldr	r3, [r7, #4]
   30fd6:	601a      	str	r2, [r3, #0]
}
   30fd8:	46c0      	nop			; (mov r8, r8)
   30fda:	46bd      	mov	sp, r7
   30fdc:	b002      	add	sp, #8
   30fde:	bd80      	pop	{r7, pc}

00030fe0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30fe0:	b580      	push	{r7, lr}
   30fe2:	b082      	sub	sp, #8
   30fe4:	af00      	add	r7, sp, #0
   30fe6:	6078      	str	r0, [r7, #4]
   30fe8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30fea:	687b      	ldr	r3, [r7, #4]
   30fec:	681a      	ldr	r2, [r3, #0]
   30fee:	683b      	ldr	r3, [r7, #0]
   30ff0:	2b00      	cmp	r3, #0
   30ff2:	da00      	bge.n	30ff6 <writeInt+0x16>
   30ff4:	33ff      	adds	r3, #255	; 0xff
   30ff6:	121b      	asrs	r3, r3, #8
   30ff8:	b2db      	uxtb	r3, r3
   30ffa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30ffc:	687b      	ldr	r3, [r7, #4]
   30ffe:	681b      	ldr	r3, [r3, #0]
   31000:	1c5a      	adds	r2, r3, #1
   31002:	687b      	ldr	r3, [r7, #4]
   31004:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   31006:	687b      	ldr	r3, [r7, #4]
   31008:	681a      	ldr	r2, [r3, #0]
   3100a:	683b      	ldr	r3, [r7, #0]
   3100c:	4908      	ldr	r1, [pc, #32]	; (31030 <writeInt+0x50>)
   3100e:	400b      	ands	r3, r1
   31010:	d503      	bpl.n	3101a <writeInt+0x3a>
   31012:	3b01      	subs	r3, #1
   31014:	4907      	ldr	r1, [pc, #28]	; (31034 <writeInt+0x54>)
   31016:	430b      	orrs	r3, r1
   31018:	3301      	adds	r3, #1
   3101a:	b2db      	uxtb	r3, r3
   3101c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3101e:	687b      	ldr	r3, [r7, #4]
   31020:	681b      	ldr	r3, [r3, #0]
   31022:	1c5a      	adds	r2, r3, #1
   31024:	687b      	ldr	r3, [r7, #4]
   31026:	601a      	str	r2, [r3, #0]
}
   31028:	46c0      	nop			; (mov r8, r8)
   3102a:	46bd      	mov	sp, r7
   3102c:	b002      	add	sp, #8
   3102e:	bd80      	pop	{r7, pc}
   31030:	800000ff 	.word	0x800000ff
   31034:	ffffff00 	.word	0xffffff00

00031038 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   31038:	b580      	push	{r7, lr}
   3103a:	b084      	sub	sp, #16
   3103c:	af00      	add	r7, sp, #0
   3103e:	6078      	str	r0, [r7, #4]
   31040:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   31042:	683b      	ldr	r3, [r7, #0]
   31044:	0018      	movs	r0, r3
   31046:	4b0d      	ldr	r3, [pc, #52]	; (3107c <writeCString+0x44>)
   31048:	4798      	blx	r3
   3104a:	0003      	movs	r3, r0
   3104c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   3104e:	68fa      	ldr	r2, [r7, #12]
   31050:	687b      	ldr	r3, [r7, #4]
   31052:	0011      	movs	r1, r2
   31054:	0018      	movs	r0, r3
   31056:	4b0a      	ldr	r3, [pc, #40]	; (31080 <writeCString+0x48>)
   31058:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3105a:	687b      	ldr	r3, [r7, #4]
   3105c:	681b      	ldr	r3, [r3, #0]
   3105e:	68fa      	ldr	r2, [r7, #12]
   31060:	6839      	ldr	r1, [r7, #0]
   31062:	0018      	movs	r0, r3
   31064:	4b07      	ldr	r3, [pc, #28]	; (31084 <writeCString+0x4c>)
   31066:	4798      	blx	r3
	*pptr += len;
   31068:	687b      	ldr	r3, [r7, #4]
   3106a:	681a      	ldr	r2, [r3, #0]
   3106c:	68fb      	ldr	r3, [r7, #12]
   3106e:	18d2      	adds	r2, r2, r3
   31070:	687b      	ldr	r3, [r7, #4]
   31072:	601a      	str	r2, [r3, #0]
}
   31074:	46c0      	nop			; (mov r8, r8)
   31076:	46bd      	mov	sp, r7
   31078:	b004      	add	sp, #16
   3107a:	bd80      	pop	{r7, pc}
   3107c:	0003659f 	.word	0x0003659f
   31080:	00030fe1 	.word	0x00030fe1
   31084:	000361cd 	.word	0x000361cd

00031088 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   31088:	b580      	push	{r7, lr}
   3108a:	b084      	sub	sp, #16
   3108c:	af00      	add	r7, sp, #0
   3108e:	60f8      	str	r0, [r7, #12]
   31090:	0038      	movs	r0, r7
   31092:	6001      	str	r1, [r0, #0]
   31094:	6042      	str	r2, [r0, #4]
   31096:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   31098:	003b      	movs	r3, r7
   3109a:	685b      	ldr	r3, [r3, #4]
   3109c:	2b00      	cmp	r3, #0
   3109e:	dd17      	ble.n	310d0 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   310a0:	003b      	movs	r3, r7
   310a2:	685a      	ldr	r2, [r3, #4]
   310a4:	68fb      	ldr	r3, [r7, #12]
   310a6:	0011      	movs	r1, r2
   310a8:	0018      	movs	r0, r3
   310aa:	4b14      	ldr	r3, [pc, #80]	; (310fc <writeMQTTString+0x74>)
   310ac:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   310ae:	68fb      	ldr	r3, [r7, #12]
   310b0:	6818      	ldr	r0, [r3, #0]
   310b2:	003b      	movs	r3, r7
   310b4:	6899      	ldr	r1, [r3, #8]
   310b6:	003b      	movs	r3, r7
   310b8:	685b      	ldr	r3, [r3, #4]
   310ba:	001a      	movs	r2, r3
   310bc:	4b10      	ldr	r3, [pc, #64]	; (31100 <writeMQTTString+0x78>)
   310be:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   310c0:	68fb      	ldr	r3, [r7, #12]
   310c2:	681a      	ldr	r2, [r3, #0]
   310c4:	003b      	movs	r3, r7
   310c6:	685b      	ldr	r3, [r3, #4]
   310c8:	18d2      	adds	r2, r2, r3
   310ca:	68fb      	ldr	r3, [r7, #12]
   310cc:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   310ce:	e010      	b.n	310f2 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   310d0:	003b      	movs	r3, r7
   310d2:	681b      	ldr	r3, [r3, #0]
   310d4:	2b00      	cmp	r3, #0
   310d6:	d007      	beq.n	310e8 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   310d8:	003b      	movs	r3, r7
   310da:	681a      	ldr	r2, [r3, #0]
   310dc:	68fb      	ldr	r3, [r7, #12]
   310de:	0011      	movs	r1, r2
   310e0:	0018      	movs	r0, r3
   310e2:	4b08      	ldr	r3, [pc, #32]	; (31104 <writeMQTTString+0x7c>)
   310e4:	4798      	blx	r3
}
   310e6:	e004      	b.n	310f2 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   310e8:	68fb      	ldr	r3, [r7, #12]
   310ea:	2100      	movs	r1, #0
   310ec:	0018      	movs	r0, r3
   310ee:	4b03      	ldr	r3, [pc, #12]	; (310fc <writeMQTTString+0x74>)
   310f0:	4798      	blx	r3
}
   310f2:	46c0      	nop			; (mov r8, r8)
   310f4:	46bd      	mov	sp, r7
   310f6:	b004      	add	sp, #16
   310f8:	bd80      	pop	{r7, pc}
   310fa:	46c0      	nop			; (mov r8, r8)
   310fc:	00030fe1 	.word	0x00030fe1
   31100:	000361cd 	.word	0x000361cd
   31104:	00031039 	.word	0x00031039

00031108 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31108:	b580      	push	{r7, lr}
   3110a:	b086      	sub	sp, #24
   3110c:	af00      	add	r7, sp, #0
   3110e:	60f8      	str	r0, [r7, #12]
   31110:	60b9      	str	r1, [r7, #8]
   31112:	607a      	str	r2, [r7, #4]
	int rc = 0;
   31114:	2300      	movs	r3, #0
   31116:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   31118:	687a      	ldr	r2, [r7, #4]
   3111a:	68bb      	ldr	r3, [r7, #8]
   3111c:	681b      	ldr	r3, [r3, #0]
   3111e:	1ad3      	subs	r3, r2, r3
   31120:	2b01      	cmp	r3, #1
   31122:	dd1b      	ble.n	3115c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   31124:	68bb      	ldr	r3, [r7, #8]
   31126:	0018      	movs	r0, r3
   31128:	4b10      	ldr	r3, [pc, #64]	; (3116c <readMQTTLenString+0x64>)
   3112a:	4798      	blx	r3
   3112c:	0002      	movs	r2, r0
   3112e:	68fb      	ldr	r3, [r7, #12]
   31130:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   31132:	68bb      	ldr	r3, [r7, #8]
   31134:	681a      	ldr	r2, [r3, #0]
   31136:	68fb      	ldr	r3, [r7, #12]
   31138:	685b      	ldr	r3, [r3, #4]
   3113a:	18d2      	adds	r2, r2, r3
   3113c:	687b      	ldr	r3, [r7, #4]
   3113e:	429a      	cmp	r2, r3
   31140:	d80c      	bhi.n	3115c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   31142:	68bb      	ldr	r3, [r7, #8]
   31144:	681a      	ldr	r2, [r3, #0]
   31146:	68fb      	ldr	r3, [r7, #12]
   31148:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   3114a:	68bb      	ldr	r3, [r7, #8]
   3114c:	681a      	ldr	r2, [r3, #0]
   3114e:	68fb      	ldr	r3, [r7, #12]
   31150:	685b      	ldr	r3, [r3, #4]
   31152:	18d2      	adds	r2, r2, r3
   31154:	68bb      	ldr	r3, [r7, #8]
   31156:	601a      	str	r2, [r3, #0]
			rc = 1;
   31158:	2301      	movs	r3, #1
   3115a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   3115c:	68fb      	ldr	r3, [r7, #12]
   3115e:	2200      	movs	r2, #0
   31160:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   31162:	697b      	ldr	r3, [r7, #20]
}
   31164:	0018      	movs	r0, r3
   31166:	46bd      	mov	sp, r7
   31168:	b006      	add	sp, #24
   3116a:	bd80      	pop	{r7, pc}
   3116c:	00030f59 	.word	0x00030f59

00031170 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   31170:	b580      	push	{r7, lr}
   31172:	b086      	sub	sp, #24
   31174:	af00      	add	r7, sp, #0
   31176:	1d3b      	adds	r3, r7, #4
   31178:	6018      	str	r0, [r3, #0]
   3117a:	6059      	str	r1, [r3, #4]
   3117c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3117e:	2300      	movs	r3, #0
   31180:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   31182:	1d3b      	adds	r3, r7, #4
   31184:	681b      	ldr	r3, [r3, #0]
   31186:	2b00      	cmp	r3, #0
   31188:	d007      	beq.n	3119a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3118a:	1d3b      	adds	r3, r7, #4
   3118c:	681b      	ldr	r3, [r3, #0]
   3118e:	0018      	movs	r0, r3
   31190:	4b06      	ldr	r3, [pc, #24]	; (311ac <MQTTstrlen+0x3c>)
   31192:	4798      	blx	r3
   31194:	0003      	movs	r3, r0
   31196:	617b      	str	r3, [r7, #20]
   31198:	e002      	b.n	311a0 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3119a:	1d3b      	adds	r3, r7, #4
   3119c:	685b      	ldr	r3, [r3, #4]
   3119e:	617b      	str	r3, [r7, #20]
	return rc;
   311a0:	697b      	ldr	r3, [r7, #20]
}
   311a2:	0018      	movs	r0, r3
   311a4:	46bd      	mov	sp, r7
   311a6:	b006      	add	sp, #24
   311a8:	bd80      	pop	{r7, pc}
   311aa:	46c0      	nop			; (mov r8, r8)
   311ac:	0003659f 	.word	0x0003659f

000311b0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   311b0:	b580      	push	{r7, lr}
   311b2:	b086      	sub	sp, #24
   311b4:	af00      	add	r7, sp, #0
   311b6:	6078      	str	r0, [r7, #4]
   311b8:	6039      	str	r1, [r7, #0]
	int alen = 0,
   311ba:	2300      	movs	r3, #0
   311bc:	617b      	str	r3, [r7, #20]
		blen = 0;
   311be:	2300      	movs	r3, #0
   311c0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   311c2:	687b      	ldr	r3, [r7, #4]
   311c4:	681b      	ldr	r3, [r3, #0]
   311c6:	2b00      	cmp	r3, #0
   311c8:	d00a      	beq.n	311e0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   311ca:	687b      	ldr	r3, [r7, #4]
   311cc:	681b      	ldr	r3, [r3, #0]
   311ce:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   311d0:	687b      	ldr	r3, [r7, #4]
   311d2:	681b      	ldr	r3, [r3, #0]
   311d4:	0018      	movs	r0, r3
   311d6:	4b12      	ldr	r3, [pc, #72]	; (31220 <MQTTPacket_equals+0x70>)
   311d8:	4798      	blx	r3
   311da:	0003      	movs	r3, r0
   311dc:	617b      	str	r3, [r7, #20]
   311de:	e005      	b.n	311ec <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   311e0:	687b      	ldr	r3, [r7, #4]
   311e2:	689b      	ldr	r3, [r3, #8]
   311e4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   311e6:	687b      	ldr	r3, [r7, #4]
   311e8:	685b      	ldr	r3, [r3, #4]
   311ea:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   311ec:	683b      	ldr	r3, [r7, #0]
   311ee:	0018      	movs	r0, r3
   311f0:	4b0b      	ldr	r3, [pc, #44]	; (31220 <MQTTPacket_equals+0x70>)
   311f2:	4798      	blx	r3
   311f4:	0003      	movs	r3, r0
   311f6:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   311f8:	697a      	ldr	r2, [r7, #20]
   311fa:	68fb      	ldr	r3, [r7, #12]
   311fc:	429a      	cmp	r2, r3
   311fe:	d109      	bne.n	31214 <MQTTPacket_equals+0x64>
   31200:	697a      	ldr	r2, [r7, #20]
   31202:	6839      	ldr	r1, [r7, #0]
   31204:	693b      	ldr	r3, [r7, #16]
   31206:	0018      	movs	r0, r3
   31208:	4b06      	ldr	r3, [pc, #24]	; (31224 <MQTTPacket_equals+0x74>)
   3120a:	4798      	blx	r3
   3120c:	1e03      	subs	r3, r0, #0
   3120e:	d101      	bne.n	31214 <MQTTPacket_equals+0x64>
   31210:	2301      	movs	r3, #1
   31212:	e000      	b.n	31216 <MQTTPacket_equals+0x66>
   31214:	2300      	movs	r3, #0
}
   31216:	0018      	movs	r0, r3
   31218:	46bd      	mov	sp, r7
   3121a:	b006      	add	sp, #24
   3121c:	bd80      	pop	{r7, pc}
   3121e:	46c0      	nop			; (mov r8, r8)
   31220:	0003659f 	.word	0x0003659f
   31224:	000365ad 	.word	0x000365ad

00031228 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   31228:	b580      	push	{r7, lr}
   3122a:	b086      	sub	sp, #24
   3122c:	af00      	add	r7, sp, #0
   3122e:	60f8      	str	r0, [r7, #12]
   31230:	0038      	movs	r0, r7
   31232:	6001      	str	r1, [r0, #0]
   31234:	6042      	str	r2, [r0, #4]
   31236:	6083      	str	r3, [r0, #8]
	int len = 0;
   31238:	2300      	movs	r3, #0
   3123a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   3123c:	003b      	movs	r3, r7
   3123e:	6818      	ldr	r0, [r3, #0]
   31240:	6859      	ldr	r1, [r3, #4]
   31242:	689a      	ldr	r2, [r3, #8]
   31244:	4b09      	ldr	r3, [pc, #36]	; (3126c <MQTTSerialize_publishLength+0x44>)
   31246:	4798      	blx	r3
   31248:	0003      	movs	r3, r0
   3124a:	1c9a      	adds	r2, r3, #2
   3124c:	6a3b      	ldr	r3, [r7, #32]
   3124e:	18d3      	adds	r3, r2, r3
   31250:	697a      	ldr	r2, [r7, #20]
   31252:	18d3      	adds	r3, r2, r3
   31254:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   31256:	68fb      	ldr	r3, [r7, #12]
   31258:	2b00      	cmp	r3, #0
   3125a:	dd02      	ble.n	31262 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   3125c:	697b      	ldr	r3, [r7, #20]
   3125e:	3302      	adds	r3, #2
   31260:	617b      	str	r3, [r7, #20]
	return len;
   31262:	697b      	ldr	r3, [r7, #20]
}
   31264:	0018      	movs	r0, r3
   31266:	46bd      	mov	sp, r7
   31268:	b006      	add	sp, #24
   3126a:	bd80      	pop	{r7, pc}
   3126c:	00031171 	.word	0x00031171

00031270 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   31270:	b590      	push	{r4, r7, lr}
   31272:	b08b      	sub	sp, #44	; 0x2c
   31274:	af02      	add	r7, sp, #8
   31276:	60f8      	str	r0, [r7, #12]
   31278:	60b9      	str	r1, [r7, #8]
   3127a:	603b      	str	r3, [r7, #0]
   3127c:	1dfb      	adds	r3, r7, #7
   3127e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   31280:	68fb      	ldr	r3, [r7, #12]
   31282:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   31284:	2300      	movs	r3, #0
   31286:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   31288:	2300      	movs	r3, #0
   3128a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3128c:	2300      	movs	r3, #0
   3128e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31290:	2308      	movs	r3, #8
   31292:	2230      	movs	r2, #48	; 0x30
   31294:	4694      	mov	ip, r2
   31296:	44bc      	add	ip, r7
   31298:	4463      	add	r3, ip
   3129a:	6838      	ldr	r0, [r7, #0]
   3129c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3129e:	9200      	str	r2, [sp, #0]
   312a0:	6819      	ldr	r1, [r3, #0]
   312a2:	685a      	ldr	r2, [r3, #4]
   312a4:	689b      	ldr	r3, [r3, #8]
   312a6:	4c46      	ldr	r4, [pc, #280]	; (313c0 <MQTTSerialize_publish+0x150>)
   312a8:	47a0      	blx	r4
   312aa:	0003      	movs	r3, r0
   312ac:	61bb      	str	r3, [r7, #24]
   312ae:	69bb      	ldr	r3, [r7, #24]
   312b0:	0018      	movs	r0, r3
   312b2:	4b44      	ldr	r3, [pc, #272]	; (313c4 <MQTTSerialize_publish+0x154>)
   312b4:	4798      	blx	r3
   312b6:	0002      	movs	r2, r0
   312b8:	68bb      	ldr	r3, [r7, #8]
   312ba:	429a      	cmp	r2, r3
   312bc:	dd03      	ble.n	312c6 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   312be:	2302      	movs	r3, #2
   312c0:	425b      	negs	r3, r3
   312c2:	61fb      	str	r3, [r7, #28]
		goto exit;
   312c4:	e077      	b.n	313b6 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   312c6:	2310      	movs	r3, #16
   312c8:	18fb      	adds	r3, r7, r3
   312ca:	781a      	ldrb	r2, [r3, #0]
   312cc:	210f      	movs	r1, #15
   312ce:	400a      	ands	r2, r1
   312d0:	1c11      	adds	r1, r2, #0
   312d2:	2230      	movs	r2, #48	; 0x30
   312d4:	430a      	orrs	r2, r1
   312d6:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   312d8:	1dfb      	adds	r3, r7, #7
   312da:	781b      	ldrb	r3, [r3, #0]
   312dc:	2201      	movs	r2, #1
   312de:	4013      	ands	r3, r2
   312e0:	b2da      	uxtb	r2, r3
   312e2:	2310      	movs	r3, #16
   312e4:	18fb      	adds	r3, r7, r3
   312e6:	2101      	movs	r1, #1
   312e8:	400a      	ands	r2, r1
   312ea:	00d0      	lsls	r0, r2, #3
   312ec:	781a      	ldrb	r2, [r3, #0]
   312ee:	2108      	movs	r1, #8
   312f0:	438a      	bics	r2, r1
   312f2:	1c11      	adds	r1, r2, #0
   312f4:	1c02      	adds	r2, r0, #0
   312f6:	430a      	orrs	r2, r1
   312f8:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   312fa:	683b      	ldr	r3, [r7, #0]
   312fc:	b2db      	uxtb	r3, r3
   312fe:	1c1a      	adds	r2, r3, #0
   31300:	2303      	movs	r3, #3
   31302:	4013      	ands	r3, r2
   31304:	b2da      	uxtb	r2, r3
   31306:	2310      	movs	r3, #16
   31308:	18fb      	adds	r3, r7, r3
   3130a:	2103      	movs	r1, #3
   3130c:	400a      	ands	r2, r1
   3130e:	1890      	adds	r0, r2, r2
   31310:	781a      	ldrb	r2, [r3, #0]
   31312:	2106      	movs	r1, #6
   31314:	438a      	bics	r2, r1
   31316:	1c11      	adds	r1, r2, #0
   31318:	1c02      	adds	r2, r0, #0
   3131a:	430a      	orrs	r2, r1
   3131c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3131e:	2330      	movs	r3, #48	; 0x30
   31320:	18fb      	adds	r3, r7, r3
   31322:	781b      	ldrb	r3, [r3, #0]
   31324:	2201      	movs	r2, #1
   31326:	4013      	ands	r3, r2
   31328:	b2da      	uxtb	r2, r3
   3132a:	2310      	movs	r3, #16
   3132c:	18fb      	adds	r3, r7, r3
   3132e:	2101      	movs	r1, #1
   31330:	400a      	ands	r2, r1
   31332:	0010      	movs	r0, r2
   31334:	781a      	ldrb	r2, [r3, #0]
   31336:	2101      	movs	r1, #1
   31338:	438a      	bics	r2, r1
   3133a:	1c11      	adds	r1, r2, #0
   3133c:	1c02      	adds	r2, r0, #0
   3133e:	430a      	orrs	r2, r1
   31340:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31342:	2310      	movs	r3, #16
   31344:	18fb      	adds	r3, r7, r3
   31346:	781a      	ldrb	r2, [r3, #0]
   31348:	2314      	movs	r3, #20
   3134a:	18fb      	adds	r3, r7, r3
   3134c:	0011      	movs	r1, r2
   3134e:	0018      	movs	r0, r3
   31350:	4b1d      	ldr	r3, [pc, #116]	; (313c8 <MQTTSerialize_publish+0x158>)
   31352:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31354:	697b      	ldr	r3, [r7, #20]
   31356:	69ba      	ldr	r2, [r7, #24]
   31358:	0011      	movs	r1, r2
   3135a:	0018      	movs	r0, r3
   3135c:	4b1b      	ldr	r3, [pc, #108]	; (313cc <MQTTSerialize_publish+0x15c>)
   3135e:	4798      	blx	r3
   31360:	0002      	movs	r2, r0
   31362:	697b      	ldr	r3, [r7, #20]
   31364:	189b      	adds	r3, r3, r2
   31366:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   31368:	2308      	movs	r3, #8
   3136a:	2230      	movs	r2, #48	; 0x30
   3136c:	4694      	mov	ip, r2
   3136e:	44bc      	add	ip, r7
   31370:	4463      	add	r3, ip
   31372:	2214      	movs	r2, #20
   31374:	18b8      	adds	r0, r7, r2
   31376:	6819      	ldr	r1, [r3, #0]
   31378:	685a      	ldr	r2, [r3, #4]
   3137a:	689b      	ldr	r3, [r3, #8]
   3137c:	4c14      	ldr	r4, [pc, #80]	; (313d0 <MQTTSerialize_publish+0x160>)
   3137e:	47a0      	blx	r4

	if (qos > 0)
   31380:	683b      	ldr	r3, [r7, #0]
   31382:	2b00      	cmp	r3, #0
   31384:	dd08      	ble.n	31398 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   31386:	2334      	movs	r3, #52	; 0x34
   31388:	18fb      	adds	r3, r7, r3
   3138a:	881a      	ldrh	r2, [r3, #0]
   3138c:	2314      	movs	r3, #20
   3138e:	18fb      	adds	r3, r7, r3
   31390:	0011      	movs	r1, r2
   31392:	0018      	movs	r0, r3
   31394:	4b0f      	ldr	r3, [pc, #60]	; (313d4 <MQTTSerialize_publish+0x164>)
   31396:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   31398:	697b      	ldr	r3, [r7, #20]
   3139a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3139c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3139e:	0018      	movs	r0, r3
   313a0:	4b0d      	ldr	r3, [pc, #52]	; (313d8 <MQTTSerialize_publish+0x168>)
   313a2:	4798      	blx	r3
	ptr += payloadlen;
   313a4:	697a      	ldr	r2, [r7, #20]
   313a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   313a8:	18d3      	adds	r3, r2, r3
   313aa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   313ac:	697b      	ldr	r3, [r7, #20]
   313ae:	001a      	movs	r2, r3
   313b0:	68fb      	ldr	r3, [r7, #12]
   313b2:	1ad3      	subs	r3, r2, r3
   313b4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   313b6:	69fb      	ldr	r3, [r7, #28]
}
   313b8:	0018      	movs	r0, r3
   313ba:	46bd      	mov	sp, r7
   313bc:	b009      	add	sp, #36	; 0x24
   313be:	bd90      	pop	{r4, r7, pc}
   313c0:	00031229 	.word	0x00031229
   313c4:	00030e95 	.word	0x00030e95
   313c8:	00030fb7 	.word	0x00030fb7
   313cc:	00030d9d 	.word	0x00030d9d
   313d0:	00031089 	.word	0x00031089
   313d4:	00030fe1 	.word	0x00030fe1
   313d8:	000361cd 	.word	0x000361cd

000313dc <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   313dc:	b580      	push	{r7, lr}
   313de:	b088      	sub	sp, #32
   313e0:	af00      	add	r7, sp, #0
   313e2:	60f8      	str	r0, [r7, #12]
   313e4:	60b9      	str	r1, [r7, #8]
   313e6:	0019      	movs	r1, r3
   313e8:	1dfb      	adds	r3, r7, #7
   313ea:	701a      	strb	r2, [r3, #0]
   313ec:	1dbb      	adds	r3, r7, #6
   313ee:	1c0a      	adds	r2, r1, #0
   313f0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   313f2:	2300      	movs	r3, #0
   313f4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   313f6:	2300      	movs	r3, #0
   313f8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   313fa:	68fb      	ldr	r3, [r7, #12]
   313fc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   313fe:	68bb      	ldr	r3, [r7, #8]
   31400:	2b03      	cmp	r3, #3
   31402:	dc03      	bgt.n	3140c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31404:	2302      	movs	r3, #2
   31406:	425b      	negs	r3, r3
   31408:	61fb      	str	r3, [r7, #28]
		goto exit;
   3140a:	e055      	b.n	314b8 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3140c:	1dfb      	adds	r3, r7, #7
   3140e:	781b      	ldrb	r3, [r3, #0]
   31410:	220f      	movs	r2, #15
   31412:	4013      	ands	r3, r2
   31414:	b2da      	uxtb	r2, r3
   31416:	2318      	movs	r3, #24
   31418:	18fb      	adds	r3, r7, r3
   3141a:	0110      	lsls	r0, r2, #4
   3141c:	781a      	ldrb	r2, [r3, #0]
   3141e:	210f      	movs	r1, #15
   31420:	400a      	ands	r2, r1
   31422:	1c11      	adds	r1, r2, #0
   31424:	1c02      	adds	r2, r0, #0
   31426:	430a      	orrs	r2, r1
   31428:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3142a:	1dbb      	adds	r3, r7, #6
   3142c:	781b      	ldrb	r3, [r3, #0]
   3142e:	2201      	movs	r2, #1
   31430:	4013      	ands	r3, r2
   31432:	b2da      	uxtb	r2, r3
   31434:	2318      	movs	r3, #24
   31436:	18fb      	adds	r3, r7, r3
   31438:	2101      	movs	r1, #1
   3143a:	400a      	ands	r2, r1
   3143c:	00d0      	lsls	r0, r2, #3
   3143e:	781a      	ldrb	r2, [r3, #0]
   31440:	2108      	movs	r1, #8
   31442:	438a      	bics	r2, r1
   31444:	1c11      	adds	r1, r2, #0
   31446:	1c02      	adds	r2, r0, #0
   31448:	430a      	orrs	r2, r1
   3144a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   3144c:	1dfb      	adds	r3, r7, #7
   3144e:	781b      	ldrb	r3, [r3, #0]
   31450:	3b06      	subs	r3, #6
   31452:	425a      	negs	r2, r3
   31454:	4153      	adcs	r3, r2
   31456:	b2db      	uxtb	r3, r3
   31458:	1c1a      	adds	r2, r3, #0
   3145a:	2303      	movs	r3, #3
   3145c:	4013      	ands	r3, r2
   3145e:	b2da      	uxtb	r2, r3
   31460:	2318      	movs	r3, #24
   31462:	18fb      	adds	r3, r7, r3
   31464:	2103      	movs	r1, #3
   31466:	400a      	ands	r2, r1
   31468:	1890      	adds	r0, r2, r2
   3146a:	781a      	ldrb	r2, [r3, #0]
   3146c:	2106      	movs	r1, #6
   3146e:	438a      	bics	r2, r1
   31470:	1c11      	adds	r1, r2, #0
   31472:	1c02      	adds	r2, r0, #0
   31474:	430a      	orrs	r2, r1
   31476:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31478:	2318      	movs	r3, #24
   3147a:	18fb      	adds	r3, r7, r3
   3147c:	781a      	ldrb	r2, [r3, #0]
   3147e:	2314      	movs	r3, #20
   31480:	18fb      	adds	r3, r7, r3
   31482:	0011      	movs	r1, r2
   31484:	0018      	movs	r0, r3
   31486:	4b0f      	ldr	r3, [pc, #60]	; (314c4 <MQTTSerialize_ack+0xe8>)
   31488:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3148a:	697b      	ldr	r3, [r7, #20]
   3148c:	2102      	movs	r1, #2
   3148e:	0018      	movs	r0, r3
   31490:	4b0d      	ldr	r3, [pc, #52]	; (314c8 <MQTTSerialize_ack+0xec>)
   31492:	4798      	blx	r3
   31494:	0002      	movs	r2, r0
   31496:	697b      	ldr	r3, [r7, #20]
   31498:	189b      	adds	r3, r3, r2
   3149a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3149c:	2328      	movs	r3, #40	; 0x28
   3149e:	18fb      	adds	r3, r7, r3
   314a0:	881a      	ldrh	r2, [r3, #0]
   314a2:	2314      	movs	r3, #20
   314a4:	18fb      	adds	r3, r7, r3
   314a6:	0011      	movs	r1, r2
   314a8:	0018      	movs	r0, r3
   314aa:	4b08      	ldr	r3, [pc, #32]	; (314cc <MQTTSerialize_ack+0xf0>)
   314ac:	4798      	blx	r3
	rc = ptr - buf;
   314ae:	697b      	ldr	r3, [r7, #20]
   314b0:	001a      	movs	r2, r3
   314b2:	68fb      	ldr	r3, [r7, #12]
   314b4:	1ad3      	subs	r3, r2, r3
   314b6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   314b8:	69fb      	ldr	r3, [r7, #28]
}
   314ba:	0018      	movs	r0, r3
   314bc:	46bd      	mov	sp, r7
   314be:	b008      	add	sp, #32
   314c0:	bd80      	pop	{r7, pc}
   314c2:	46c0      	nop			; (mov r8, r8)
   314c4:	00030fb7 	.word	0x00030fb7
   314c8:	00030d9d 	.word	0x00030d9d
   314cc:	00030fe1 	.word	0x00030fe1

000314d0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   314d0:	b580      	push	{r7, lr}
   314d2:	b084      	sub	sp, #16
   314d4:	af00      	add	r7, sp, #0
   314d6:	6078      	str	r0, [r7, #4]
   314d8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   314da:	2302      	movs	r3, #2
   314dc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   314de:	2300      	movs	r3, #0
   314e0:	60fb      	str	r3, [r7, #12]
   314e2:	e014      	b.n	3150e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   314e4:	68fa      	ldr	r2, [r7, #12]
   314e6:	0013      	movs	r3, r2
   314e8:	005b      	lsls	r3, r3, #1
   314ea:	189b      	adds	r3, r3, r2
   314ec:	009b      	lsls	r3, r3, #2
   314ee:	001a      	movs	r2, r3
   314f0:	683b      	ldr	r3, [r7, #0]
   314f2:	189b      	adds	r3, r3, r2
   314f4:	6818      	ldr	r0, [r3, #0]
   314f6:	6859      	ldr	r1, [r3, #4]
   314f8:	689a      	ldr	r2, [r3, #8]
   314fa:	4b09      	ldr	r3, [pc, #36]	; (31520 <MQTTSerialize_subscribeLength+0x50>)
   314fc:	4798      	blx	r3
   314fe:	0003      	movs	r3, r0
   31500:	3303      	adds	r3, #3
   31502:	68ba      	ldr	r2, [r7, #8]
   31504:	18d3      	adds	r3, r2, r3
   31506:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31508:	68fb      	ldr	r3, [r7, #12]
   3150a:	3301      	adds	r3, #1
   3150c:	60fb      	str	r3, [r7, #12]
   3150e:	68fa      	ldr	r2, [r7, #12]
   31510:	687b      	ldr	r3, [r7, #4]
   31512:	429a      	cmp	r2, r3
   31514:	dbe6      	blt.n	314e4 <MQTTSerialize_subscribeLength+0x14>
	return len;
   31516:	68bb      	ldr	r3, [r7, #8]
}
   31518:	0018      	movs	r0, r3
   3151a:	46bd      	mov	sp, r7
   3151c:	b004      	add	sp, #16
   3151e:	bd80      	pop	{r7, pc}
   31520:	00031171 	.word	0x00031171

00031524 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   31524:	b590      	push	{r4, r7, lr}
   31526:	b08b      	sub	sp, #44	; 0x2c
   31528:	af00      	add	r7, sp, #0
   3152a:	60f8      	str	r0, [r7, #12]
   3152c:	60b9      	str	r1, [r7, #8]
   3152e:	0019      	movs	r1, r3
   31530:	1dfb      	adds	r3, r7, #7
   31532:	701a      	strb	r2, [r3, #0]
   31534:	1d3b      	adds	r3, r7, #4
   31536:	1c0a      	adds	r2, r1, #0
   31538:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   3153a:	68fb      	ldr	r3, [r7, #12]
   3153c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3153e:	2300      	movs	r3, #0
   31540:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   31542:	2300      	movs	r3, #0
   31544:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   31546:	2300      	movs	r3, #0
   31548:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   3154a:	2300      	movs	r3, #0
   3154c:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3154e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   31550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31552:	0011      	movs	r1, r2
   31554:	0018      	movs	r0, r3
   31556:	4b41      	ldr	r3, [pc, #260]	; (3165c <MQTTSerialize_subscribe+0x138>)
   31558:	4798      	blx	r3
   3155a:	0003      	movs	r3, r0
   3155c:	61fb      	str	r3, [r7, #28]
   3155e:	69fb      	ldr	r3, [r7, #28]
   31560:	0018      	movs	r0, r3
   31562:	4b3f      	ldr	r3, [pc, #252]	; (31660 <MQTTSerialize_subscribe+0x13c>)
   31564:	4798      	blx	r3
   31566:	0002      	movs	r2, r0
   31568:	68bb      	ldr	r3, [r7, #8]
   3156a:	429a      	cmp	r2, r3
   3156c:	dd03      	ble.n	31576 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3156e:	2302      	movs	r3, #2
   31570:	425b      	negs	r3, r3
   31572:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31574:	e06c      	b.n	31650 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   31576:	2314      	movs	r3, #20
   31578:	18fb      	adds	r3, r7, r3
   3157a:	2200      	movs	r2, #0
   3157c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3157e:	2314      	movs	r3, #20
   31580:	18fb      	adds	r3, r7, r3
   31582:	781a      	ldrb	r2, [r3, #0]
   31584:	210f      	movs	r1, #15
   31586:	400a      	ands	r2, r1
   31588:	1c11      	adds	r1, r2, #0
   3158a:	2280      	movs	r2, #128	; 0x80
   3158c:	4252      	negs	r2, r2
   3158e:	430a      	orrs	r2, r1
   31590:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31592:	1dfb      	adds	r3, r7, #7
   31594:	781b      	ldrb	r3, [r3, #0]
   31596:	2201      	movs	r2, #1
   31598:	4013      	ands	r3, r2
   3159a:	b2da      	uxtb	r2, r3
   3159c:	2314      	movs	r3, #20
   3159e:	18fb      	adds	r3, r7, r3
   315a0:	2101      	movs	r1, #1
   315a2:	400a      	ands	r2, r1
   315a4:	00d0      	lsls	r0, r2, #3
   315a6:	781a      	ldrb	r2, [r3, #0]
   315a8:	2108      	movs	r1, #8
   315aa:	438a      	bics	r2, r1
   315ac:	1c11      	adds	r1, r2, #0
   315ae:	1c02      	adds	r2, r0, #0
   315b0:	430a      	orrs	r2, r1
   315b2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   315b4:	2314      	movs	r3, #20
   315b6:	18fb      	adds	r3, r7, r3
   315b8:	781a      	ldrb	r2, [r3, #0]
   315ba:	2106      	movs	r1, #6
   315bc:	438a      	bics	r2, r1
   315be:	1c11      	adds	r1, r2, #0
   315c0:	2202      	movs	r2, #2
   315c2:	430a      	orrs	r2, r1
   315c4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   315c6:	2314      	movs	r3, #20
   315c8:	18fb      	adds	r3, r7, r3
   315ca:	781a      	ldrb	r2, [r3, #0]
   315cc:	2318      	movs	r3, #24
   315ce:	18fb      	adds	r3, r7, r3
   315d0:	0011      	movs	r1, r2
   315d2:	0018      	movs	r0, r3
   315d4:	4b23      	ldr	r3, [pc, #140]	; (31664 <MQTTSerialize_subscribe+0x140>)
   315d6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   315d8:	69bb      	ldr	r3, [r7, #24]
   315da:	69fa      	ldr	r2, [r7, #28]
   315dc:	0011      	movs	r1, r2
   315de:	0018      	movs	r0, r3
   315e0:	4b21      	ldr	r3, [pc, #132]	; (31668 <MQTTSerialize_subscribe+0x144>)
   315e2:	4798      	blx	r3
   315e4:	0002      	movs	r2, r0
   315e6:	69bb      	ldr	r3, [r7, #24]
   315e8:	189b      	adds	r3, r3, r2
   315ea:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   315ec:	1d3b      	adds	r3, r7, #4
   315ee:	881a      	ldrh	r2, [r3, #0]
   315f0:	2318      	movs	r3, #24
   315f2:	18fb      	adds	r3, r7, r3
   315f4:	0011      	movs	r1, r2
   315f6:	0018      	movs	r0, r3
   315f8:	4b1c      	ldr	r3, [pc, #112]	; (3166c <MQTTSerialize_subscribe+0x148>)
   315fa:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   315fc:	2300      	movs	r3, #0
   315fe:	623b      	str	r3, [r7, #32]
   31600:	e01d      	b.n	3163e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   31602:	6a3a      	ldr	r2, [r7, #32]
   31604:	0013      	movs	r3, r2
   31606:	005b      	lsls	r3, r3, #1
   31608:	189b      	adds	r3, r3, r2
   3160a:	009b      	lsls	r3, r3, #2
   3160c:	001a      	movs	r2, r3
   3160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31610:	189b      	adds	r3, r3, r2
   31612:	2218      	movs	r2, #24
   31614:	18b8      	adds	r0, r7, r2
   31616:	6819      	ldr	r1, [r3, #0]
   31618:	685a      	ldr	r2, [r3, #4]
   3161a:	689b      	ldr	r3, [r3, #8]
   3161c:	4c14      	ldr	r4, [pc, #80]	; (31670 <MQTTSerialize_subscribe+0x14c>)
   3161e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31620:	6a3b      	ldr	r3, [r7, #32]
   31622:	009b      	lsls	r3, r3, #2
   31624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   31626:	18d3      	adds	r3, r2, r3
   31628:	681b      	ldr	r3, [r3, #0]
   3162a:	b2da      	uxtb	r2, r3
   3162c:	2318      	movs	r3, #24
   3162e:	18fb      	adds	r3, r7, r3
   31630:	0011      	movs	r1, r2
   31632:	0018      	movs	r0, r3
   31634:	4b0b      	ldr	r3, [pc, #44]	; (31664 <MQTTSerialize_subscribe+0x140>)
   31636:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   31638:	6a3b      	ldr	r3, [r7, #32]
   3163a:	3301      	adds	r3, #1
   3163c:	623b      	str	r3, [r7, #32]
   3163e:	6a3a      	ldr	r2, [r7, #32]
   31640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31642:	429a      	cmp	r2, r3
   31644:	dbdd      	blt.n	31602 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   31646:	69bb      	ldr	r3, [r7, #24]
   31648:	001a      	movs	r2, r3
   3164a:	68fb      	ldr	r3, [r7, #12]
   3164c:	1ad3      	subs	r3, r2, r3
   3164e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31652:	0018      	movs	r0, r3
   31654:	46bd      	mov	sp, r7
   31656:	b00b      	add	sp, #44	; 0x2c
   31658:	bd90      	pop	{r4, r7, pc}
   3165a:	46c0      	nop			; (mov r8, r8)
   3165c:	000314d1 	.word	0x000314d1
   31660:	00030e95 	.word	0x00030e95
   31664:	00030fb7 	.word	0x00030fb7
   31668:	00030d9d 	.word	0x00030d9d
   3166c:	00030fe1 	.word	0x00030fe1
   31670:	00031089 	.word	0x00031089

00031674 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   31674:	b590      	push	{r4, r7, lr}
   31676:	b08b      	sub	sp, #44	; 0x2c
   31678:	af00      	add	r7, sp, #0
   3167a:	60f8      	str	r0, [r7, #12]
   3167c:	60b9      	str	r1, [r7, #8]
   3167e:	607a      	str	r2, [r7, #4]
   31680:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31682:	2300      	movs	r3, #0
   31684:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31688:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3168a:	2300      	movs	r3, #0
   3168c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3168e:	2300      	movs	r3, #0
   31690:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31692:	2318      	movs	r3, #24
   31694:	18fb      	adds	r3, r7, r3
   31696:	0018      	movs	r0, r3
   31698:	4b2c      	ldr	r3, [pc, #176]	; (3174c <MQTTDeserialize_suback+0xd8>)
   3169a:	4798      	blx	r3
   3169c:	0003      	movs	r3, r0
   3169e:	001a      	movs	r2, r3
   316a0:	231c      	movs	r3, #28
   316a2:	18fb      	adds	r3, r7, r3
   316a4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   316a6:	231c      	movs	r3, #28
   316a8:	18fb      	adds	r3, r7, r3
   316aa:	781b      	ldrb	r3, [r3, #0]
   316ac:	220f      	movs	r2, #15
   316ae:	4393      	bics	r3, r2
   316b0:	b2db      	uxtb	r3, r3
   316b2:	2b90      	cmp	r3, #144	; 0x90
   316b4:	d142      	bne.n	3173c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   316b6:	69bb      	ldr	r3, [r7, #24]
   316b8:	2214      	movs	r2, #20
   316ba:	18ba      	adds	r2, r7, r2
   316bc:	0011      	movs	r1, r2
   316be:	0018      	movs	r0, r3
   316c0:	4b23      	ldr	r3, [pc, #140]	; (31750 <MQTTDeserialize_suback+0xdc>)
   316c2:	4798      	blx	r3
   316c4:	0003      	movs	r3, r0
   316c6:	627b      	str	r3, [r7, #36]	; 0x24
   316c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   316ca:	69bb      	ldr	r3, [r7, #24]
   316cc:	189b      	adds	r3, r3, r2
   316ce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   316d0:	69bb      	ldr	r3, [r7, #24]
   316d2:	697a      	ldr	r2, [r7, #20]
   316d4:	189b      	adds	r3, r3, r2
   316d6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   316d8:	6a3b      	ldr	r3, [r7, #32]
   316da:	69ba      	ldr	r2, [r7, #24]
   316dc:	1a9b      	subs	r3, r3, r2
   316de:	2b01      	cmp	r3, #1
   316e0:	dd2e      	ble.n	31740 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   316e2:	2318      	movs	r3, #24
   316e4:	18fb      	adds	r3, r7, r3
   316e6:	0018      	movs	r0, r3
   316e8:	4b1a      	ldr	r3, [pc, #104]	; (31754 <MQTTDeserialize_suback+0xe0>)
   316ea:	4798      	blx	r3
   316ec:	0003      	movs	r3, r0
   316ee:	b29a      	uxth	r2, r3
   316f0:	68fb      	ldr	r3, [r7, #12]
   316f2:	801a      	strh	r2, [r3, #0]

	*count = 0;
   316f4:	687b      	ldr	r3, [r7, #4]
   316f6:	2200      	movs	r2, #0
   316f8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   316fa:	e018      	b.n	3172e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   316fc:	687b      	ldr	r3, [r7, #4]
   316fe:	681a      	ldr	r2, [r3, #0]
   31700:	68bb      	ldr	r3, [r7, #8]
   31702:	429a      	cmp	r2, r3
   31704:	dd03      	ble.n	3170e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   31706:	2301      	movs	r3, #1
   31708:	425b      	negs	r3, r3
   3170a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3170c:	e019      	b.n	31742 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3170e:	687b      	ldr	r3, [r7, #4]
   31710:	681a      	ldr	r2, [r3, #0]
   31712:	1c51      	adds	r1, r2, #1
   31714:	687b      	ldr	r3, [r7, #4]
   31716:	6019      	str	r1, [r3, #0]
   31718:	0013      	movs	r3, r2
   3171a:	009b      	lsls	r3, r3, #2
   3171c:	683a      	ldr	r2, [r7, #0]
   3171e:	18d4      	adds	r4, r2, r3
   31720:	2318      	movs	r3, #24
   31722:	18fb      	adds	r3, r7, r3
   31724:	0018      	movs	r0, r3
   31726:	4b09      	ldr	r3, [pc, #36]	; (3174c <MQTTDeserialize_suback+0xd8>)
   31728:	4798      	blx	r3
   3172a:	0003      	movs	r3, r0
   3172c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3172e:	69ba      	ldr	r2, [r7, #24]
   31730:	6a3b      	ldr	r3, [r7, #32]
   31732:	429a      	cmp	r2, r3
   31734:	d3e2      	bcc.n	316fc <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   31736:	2301      	movs	r3, #1
   31738:	627b      	str	r3, [r7, #36]	; 0x24
   3173a:	e002      	b.n	31742 <MQTTDeserialize_suback+0xce>
		goto exit;
   3173c:	46c0      	nop			; (mov r8, r8)
   3173e:	e000      	b.n	31742 <MQTTDeserialize_suback+0xce>
		goto exit;
   31740:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31744:	0018      	movs	r0, r3
   31746:	46bd      	mov	sp, r7
   31748:	b00b      	add	sp, #44	; 0x2c
   3174a:	bd90      	pop	{r4, r7, pc}
   3174c:	00030f8b 	.word	0x00030f8b
   31750:	00030f25 	.word	0x00030f25
   31754:	00030f59 	.word	0x00030f59

00031758 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   31758:	b580      	push	{r7, lr}
   3175a:	b082      	sub	sp, #8
   3175c:	af00      	add	r7, sp, #0
   3175e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31760:	687b      	ldr	r3, [r7, #4]
   31762:	2250      	movs	r2, #80	; 0x50
   31764:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   31766:	687b      	ldr	r3, [r7, #4]
   31768:	2200      	movs	r2, #0
   3176a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   3176c:	687b      	ldr	r3, [r7, #4]
   3176e:	4a0b      	ldr	r2, [pc, #44]	; (3179c <http_client_get_config_defaults+0x44>)
   31770:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31772:	687b      	ldr	r3, [r7, #4]
   31774:	2200      	movs	r2, #0
   31776:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31778:	687b      	ldr	r3, [r7, #4]
   3177a:	2200      	movs	r2, #0
   3177c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3177e:	687b      	ldr	r3, [r7, #4]
   31780:	2280      	movs	r2, #128	; 0x80
   31782:	0052      	lsls	r2, r2, #1
   31784:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   31786:	687b      	ldr	r3, [r7, #4]
   31788:	2252      	movs	r2, #82	; 0x52
   3178a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   3178c:	687b      	ldr	r3, [r7, #4]
   3178e:	4a04      	ldr	r2, [pc, #16]	; (317a0 <http_client_get_config_defaults+0x48>)
   31790:	619a      	str	r2, [r3, #24]
}
   31792:	46c0      	nop			; (mov r8, r8)
   31794:	46bd      	mov	sp, r7
   31796:	b002      	add	sp, #8
   31798:	bd80      	pop	{r7, pc}
   3179a:	46c0      	nop			; (mov r8, r8)
   3179c:	00004e20 	.word	0x00004e20
   317a0:	0003b6a8 	.word	0x0003b6a8

000317a4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   317a4:	b590      	push	{r4, r7, lr}
   317a6:	b083      	sub	sp, #12
   317a8:	af00      	add	r7, sp, #0
   317aa:	6078      	str	r0, [r7, #4]
   317ac:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   317ae:	687b      	ldr	r3, [r7, #4]
   317b0:	2b00      	cmp	r3, #0
   317b2:	d002      	beq.n	317ba <http_client_init+0x16>
   317b4:	683b      	ldr	r3, [r7, #0]
   317b6:	2b00      	cmp	r3, #0
   317b8:	d102      	bne.n	317c0 <http_client_init+0x1c>
		return -EINVAL;
   317ba:	2316      	movs	r3, #22
   317bc:	425b      	negs	r3, r3
   317be:	e058      	b.n	31872 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   317c0:	683b      	ldr	r3, [r7, #0]
   317c2:	691b      	ldr	r3, [r3, #16]
   317c4:	2b00      	cmp	r3, #0
   317c6:	d102      	bne.n	317ce <http_client_init+0x2a>
		return -EINVAL;
   317c8:	2316      	movs	r3, #22
   317ca:	425b      	negs	r3, r3
   317cc:	e051      	b.n	31872 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   317ce:	683b      	ldr	r3, [r7, #0]
   317d0:	685b      	ldr	r3, [r3, #4]
   317d2:	2b00      	cmp	r3, #0
   317d4:	d102      	bne.n	317dc <http_client_init+0x38>
		return -EINVAL;
   317d6:	2316      	movs	r3, #22
   317d8:	425b      	negs	r3, r3
   317da:	e04a      	b.n	31872 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   317dc:	683b      	ldr	r3, [r7, #0]
   317de:	695b      	ldr	r3, [r3, #20]
   317e0:	2b51      	cmp	r3, #81	; 0x51
   317e2:	d802      	bhi.n	317ea <http_client_init+0x46>
		return -EINVAL;
   317e4:	2316      	movs	r3, #22
   317e6:	425b      	negs	r3, r3
   317e8:	e043      	b.n	31872 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   317ea:	687b      	ldr	r3, [r7, #4]
   317ec:	22e8      	movs	r2, #232	; 0xe8
   317ee:	2100      	movs	r1, #0
   317f0:	0018      	movs	r0, r3
   317f2:	4b22      	ldr	r3, [pc, #136]	; (3187c <http_client_init+0xd8>)
   317f4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   317f6:	687b      	ldr	r3, [r7, #4]
   317f8:	3350      	adds	r3, #80	; 0x50
   317fa:	6839      	ldr	r1, [r7, #0]
   317fc:	221c      	movs	r2, #28
   317fe:	0018      	movs	r0, r3
   31800:	4b1f      	ldr	r3, [pc, #124]	; (31880 <http_client_init+0xdc>)
   31802:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   31804:	687b      	ldr	r3, [r7, #4]
   31806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31808:	2b00      	cmp	r3, #0
   3180a:	d115      	bne.n	31838 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3180c:	683b      	ldr	r3, [r7, #0]
   3180e:	691b      	ldr	r3, [r3, #16]
   31810:	0018      	movs	r0, r3
   31812:	4b1c      	ldr	r3, [pc, #112]	; (31884 <http_client_init+0xe0>)
   31814:	4798      	blx	r3
   31816:	0003      	movs	r3, r0
   31818:	001a      	movs	r2, r3
   3181a:	687b      	ldr	r3, [r7, #4]
   3181c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3181e:	687b      	ldr	r3, [r7, #4]
   31820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31822:	2b00      	cmp	r3, #0
   31824:	d102      	bne.n	3182c <http_client_init+0x88>
			return -ENOMEM;
   31826:	230c      	movs	r3, #12
   31828:	425b      	negs	r3, r3
   3182a:	e022      	b.n	31872 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   3182c:	687b      	ldr	r3, [r7, #4]
   3182e:	2241      	movs	r2, #65	; 0x41
   31830:	5c99      	ldrb	r1, [r3, r2]
   31832:	2004      	movs	r0, #4
   31834:	4301      	orrs	r1, r0
   31836:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   31838:	683b      	ldr	r3, [r7, #0]
   3183a:	891b      	ldrh	r3, [r3, #8]
   3183c:	2b00      	cmp	r3, #0
   3183e:	d010      	beq.n	31862 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   31840:	683b      	ldr	r3, [r7, #0]
   31842:	6858      	ldr	r0, [r3, #4]
   31844:	687a      	ldr	r2, [r7, #4]
   31846:	4910      	ldr	r1, [pc, #64]	; (31888 <http_client_init+0xe4>)
   31848:	2300      	movs	r3, #0
   3184a:	4c10      	ldr	r4, [pc, #64]	; (3188c <http_client_init+0xe8>)
   3184c:	47a0      	blx	r4
   3184e:	0002      	movs	r2, r0
   31850:	687b      	ldr	r3, [r7, #4]
   31852:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   31854:	687b      	ldr	r3, [r7, #4]
   31856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31858:	2b00      	cmp	r3, #0
   3185a:	da02      	bge.n	31862 <http_client_init+0xbe>
			return -ENOSPC;
   3185c:	231c      	movs	r3, #28
   3185e:	425b      	negs	r3, r3
   31860:	e007      	b.n	31872 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   31862:	687b      	ldr	r3, [r7, #4]
   31864:	2200      	movs	r2, #0
   31866:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31868:	687b      	ldr	r3, [r7, #4]
   3186a:	22d8      	movs	r2, #216	; 0xd8
   3186c:	2100      	movs	r1, #0
   3186e:	5099      	str	r1, [r3, r2]

	return 0;
   31870:	2300      	movs	r3, #0
}
   31872:	0018      	movs	r0, r3
   31874:	46bd      	mov	sp, r7
   31876:	b003      	add	sp, #12
   31878:	bd90      	pop	{r4, r7, pc}
   3187a:	46c0      	nop			; (mov r8, r8)
   3187c:	00036203 	.word	0x00036203
   31880:	000361cd 	.word	0x000361cd
   31884:	000361a5 	.word	0x000361a5
   31888:	00031b55 	.word	0x00031b55
   3188c:	000331f9 	.word	0x000331f9

00031890 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31890:	b580      	push	{r7, lr}
   31892:	b082      	sub	sp, #8
   31894:	af00      	add	r7, sp, #0
   31896:	6078      	str	r0, [r7, #4]
   31898:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3189a:	687b      	ldr	r3, [r7, #4]
   3189c:	2b00      	cmp	r3, #0
   3189e:	d102      	bne.n	318a6 <http_client_register_callback+0x16>
		return -EINVAL;
   318a0:	2316      	movs	r3, #22
   318a2:	425b      	negs	r3, r3
   318a4:	e003      	b.n	318ae <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   318a6:	687b      	ldr	r3, [r7, #4]
   318a8:	683a      	ldr	r2, [r7, #0]
   318aa:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   318ac:	2300      	movs	r3, #0
}
   318ae:	0018      	movs	r0, r3
   318b0:	46bd      	mov	sp, r7
   318b2:	b002      	add	sp, #8
   318b4:	bd80      	pop	{r7, pc}
	...

000318b8 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   318b8:	b580      	push	{r7, lr}
   318ba:	b082      	sub	sp, #8
   318bc:	af00      	add	r7, sp, #0
   318be:	6078      	str	r0, [r7, #4]
	switch (err) {
   318c0:	687b      	ldr	r3, [r7, #4]
   318c2:	330e      	adds	r3, #14
   318c4:	2b0e      	cmp	r3, #14
   318c6:	d825      	bhi.n	31914 <_hwerr_to_stderr+0x5c>
   318c8:	009a      	lsls	r2, r3, #2
   318ca:	4b18      	ldr	r3, [pc, #96]	; (3192c <_hwerr_to_stderr+0x74>)
   318cc:	18d3      	adds	r3, r2, r3
   318ce:	681b      	ldr	r3, [r3, #0]
   318d0:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   318d2:	2305      	movs	r3, #5
   318d4:	425b      	negs	r3, r3
   318d6:	e024      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   318d8:	2302      	movs	r3, #2
   318da:	425b      	negs	r3, r3
   318dc:	e021      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   318de:	2370      	movs	r3, #112	; 0x70
   318e0:	425b      	negs	r3, r3
   318e2:	e01e      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   318e4:	230c      	movs	r3, #12
   318e6:	425b      	negs	r3, r3
   318e8:	e01b      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   318ea:	2316      	movs	r3, #22
   318ec:	425b      	negs	r3, r3
   318ee:	e018      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   318f0:	230c      	movs	r3, #12
   318f2:	425b      	negs	r3, r3
   318f4:	e015      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   318f6:	2305      	movs	r3, #5
   318f8:	425b      	negs	r3, r3
   318fa:	e012      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   318fc:	2379      	movs	r3, #121	; 0x79
   318fe:	425b      	negs	r3, r3
   31900:	e00f      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31902:	2368      	movs	r3, #104	; 0x68
   31904:	425b      	negs	r3, r3
   31906:	e00c      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31908:	230b      	movs	r3, #11
   3190a:	425b      	negs	r3, r3
   3190c:	e009      	b.n	31922 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3190e:	2310      	movs	r3, #16
   31910:	425b      	negs	r3, r3
   31912:	e006      	b.n	31922 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   31914:	687b      	ldr	r3, [r7, #4]
   31916:	2b00      	cmp	r3, #0
   31918:	da02      	bge.n	31920 <_hwerr_to_stderr+0x68>
				return -EIO;
   3191a:	2305      	movs	r3, #5
   3191c:	425b      	negs	r3, r3
   3191e:	e000      	b.n	31922 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31920:	2300      	movs	r3, #0
	}
}
   31922:	0018      	movs	r0, r3
   31924:	46bd      	mov	sp, r7
   31926:	b002      	add	sp, #8
   31928:	bd80      	pop	{r7, pc}
   3192a:	46c0      	nop			; (mov r8, r8)
   3192c:	0003b7e4 	.word	0x0003b7e4

00031930 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31930:	b580      	push	{r7, lr}
   31932:	b08a      	sub	sp, #40	; 0x28
   31934:	af00      	add	r7, sp, #0
   31936:	603a      	str	r2, [r7, #0]
   31938:	1dfb      	adds	r3, r7, #7
   3193a:	1c02      	adds	r2, r0, #0
   3193c:	701a      	strb	r2, [r3, #0]
   3193e:	1dbb      	adds	r3, r7, #6
   31940:	1c0a      	adds	r2, r1, #0
   31942:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   31944:	1dfb      	adds	r3, r7, #7
   31946:	2200      	movs	r2, #0
   31948:	569a      	ldrsb	r2, [r3, r2]
   3194a:	4b4b      	ldr	r3, [pc, #300]	; (31a78 <http_client_socket_event_handler+0x148>)
   3194c:	0092      	lsls	r2, r2, #2
   3194e:	58d3      	ldr	r3, [r2, r3]
   31950:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   31952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31954:	2b00      	cmp	r3, #0
   31956:	d100      	bne.n	3195a <http_client_socket_event_handler+0x2a>
   31958:	e08a      	b.n	31a70 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   3195a:	1dbb      	adds	r3, r7, #6
   3195c:	781b      	ldrb	r3, [r3, #0]
   3195e:	2b06      	cmp	r3, #6
   31960:	d040      	beq.n	319e4 <http_client_socket_event_handler+0xb4>
   31962:	2b07      	cmp	r3, #7
   31964:	d060      	beq.n	31a28 <http_client_socket_event_handler+0xf8>
   31966:	2b05      	cmp	r3, #5
   31968:	d000      	beq.n	3196c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   3196a:	e082      	b.n	31a72 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   3196c:	683b      	ldr	r3, [r7, #0]
   3196e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31970:	6a3b      	ldr	r3, [r7, #32]
   31972:	785b      	ldrb	r3, [r3, #1]
   31974:	b25b      	sxtb	r3, r3
   31976:	001a      	movs	r2, r3
   31978:	230c      	movs	r3, #12
   3197a:	18fb      	adds	r3, r7, r3
   3197c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3197e:	6a3b      	ldr	r3, [r7, #32]
   31980:	785b      	ldrb	r3, [r3, #1]
   31982:	b25b      	sxtb	r3, r3
   31984:	2b00      	cmp	r3, #0
   31986:	da0c      	bge.n	319a2 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31988:	6a3b      	ldr	r3, [r7, #32]
   3198a:	785b      	ldrb	r3, [r3, #1]
   3198c:	b25b      	sxtb	r3, r3
   3198e:	0018      	movs	r0, r3
   31990:	4b3a      	ldr	r3, [pc, #232]	; (31a7c <http_client_socket_event_handler+0x14c>)
   31992:	4798      	blx	r3
   31994:	0002      	movs	r2, r0
   31996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31998:	0011      	movs	r1, r2
   3199a:	0018      	movs	r0, r3
   3199c:	4b38      	ldr	r3, [pc, #224]	; (31a80 <http_client_socket_event_handler+0x150>)
   3199e:	4798      	blx	r3
    	break;
   319a0:	e067      	b.n	31a72 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   319a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319a6:	2b00      	cmp	r3, #0
   319a8:	d006      	beq.n	319b8 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   319aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   319ae:	220c      	movs	r2, #12
   319b0:	18ba      	adds	r2, r7, r2
   319b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   319b4:	2100      	movs	r1, #0
   319b6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   319b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319ba:	2203      	movs	r2, #3
   319bc:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   319be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   319c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   319c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319c8:	2258      	movs	r2, #88	; 0x58
   319ca:	5a9b      	ldrh	r3, [r3, r2]
   319cc:	001a      	movs	r2, r3
   319ce:	4b2d      	ldr	r3, [pc, #180]	; (31a84 <http_client_socket_event_handler+0x154>)
   319d0:	4798      	blx	r3
    		_http_client_recv_packet(module);
   319d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319d4:	0018      	movs	r0, r3
   319d6:	4b2c      	ldr	r3, [pc, #176]	; (31a88 <http_client_socket_event_handler+0x158>)
   319d8:	4798      	blx	r3
			_http_client_request(module);
   319da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319dc:	0018      	movs	r0, r3
   319de:	4b2b      	ldr	r3, [pc, #172]	; (31a8c <http_client_socket_event_handler+0x15c>)
   319e0:	4798      	blx	r3
    	break;
   319e2:	e046      	b.n	31a72 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   319e4:	683b      	ldr	r3, [r7, #0]
   319e6:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   319e8:	69fb      	ldr	r3, [r7, #28]
   319ea:	2204      	movs	r2, #4
   319ec:	5e9b      	ldrsh	r3, [r3, r2]
   319ee:	2b00      	cmp	r3, #0
   319f0:	dd09      	ble.n	31a06 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   319f2:	69fb      	ldr	r3, [r7, #28]
   319f4:	2204      	movs	r2, #4
   319f6:	5e9b      	ldrsh	r3, [r3, r2]
   319f8:	001a      	movs	r2, r3
   319fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319fc:	0011      	movs	r1, r2
   319fe:	0018      	movs	r0, r3
   31a00:	4b23      	ldr	r3, [pc, #140]	; (31a90 <http_client_socket_event_handler+0x160>)
   31a02:	4798      	blx	r3
   31a04:	e00b      	b.n	31a1e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31a06:	69fb      	ldr	r3, [r7, #28]
   31a08:	2204      	movs	r2, #4
   31a0a:	5e9b      	ldrsh	r3, [r3, r2]
   31a0c:	0018      	movs	r0, r3
   31a0e:	4b1b      	ldr	r3, [pc, #108]	; (31a7c <http_client_socket_event_handler+0x14c>)
   31a10:	4798      	blx	r3
   31a12:	0002      	movs	r2, r0
   31a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a16:	0011      	movs	r1, r2
   31a18:	0018      	movs	r0, r3
   31a1a:	4b19      	ldr	r3, [pc, #100]	; (31a80 <http_client_socket_event_handler+0x150>)
   31a1c:	4798      	blx	r3
		_http_client_recv_packet(module);
   31a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a20:	0018      	movs	r0, r3
   31a22:	4b19      	ldr	r3, [pc, #100]	; (31a88 <http_client_socket_event_handler+0x158>)
   31a24:	4798      	blx	r3
		break;
   31a26:	e024      	b.n	31a72 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31a28:	231a      	movs	r3, #26
   31a2a:	18fb      	adds	r3, r7, r3
   31a2c:	683a      	ldr	r2, [r7, #0]
   31a2e:	8812      	ldrh	r2, [r2, #0]
   31a30:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31a32:	231a      	movs	r3, #26
   31a34:	18fb      	adds	r3, r7, r3
   31a36:	2200      	movs	r2, #0
   31a38:	5e9b      	ldrsh	r3, [r3, r2]
   31a3a:	2b00      	cmp	r3, #0
   31a3c:	da0d      	bge.n	31a5a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31a3e:	231a      	movs	r3, #26
   31a40:	18fb      	adds	r3, r7, r3
   31a42:	2200      	movs	r2, #0
   31a44:	5e9b      	ldrsh	r3, [r3, r2]
   31a46:	0018      	movs	r0, r3
   31a48:	4b0c      	ldr	r3, [pc, #48]	; (31a7c <http_client_socket_event_handler+0x14c>)
   31a4a:	4798      	blx	r3
   31a4c:	0002      	movs	r2, r0
   31a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a50:	0011      	movs	r1, r2
   31a52:	0018      	movs	r0, r3
   31a54:	4b0a      	ldr	r3, [pc, #40]	; (31a80 <http_client_socket_event_handler+0x150>)
   31a56:	4798      	blx	r3
   31a58:	e003      	b.n	31a62 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a5c:	0018      	movs	r0, r3
   31a5e:	4b0b      	ldr	r3, [pc, #44]	; (31a8c <http_client_socket_event_handler+0x15c>)
   31a60:	4798      	blx	r3
		module->sending = 0;
   31a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a64:	2241      	movs	r2, #65	; 0x41
   31a66:	5c99      	ldrb	r1, [r3, r2]
   31a68:	2001      	movs	r0, #1
   31a6a:	4381      	bics	r1, r0
   31a6c:	5499      	strb	r1, [r3, r2]
    	break;
   31a6e:	e000      	b.n	31a72 <http_client_socket_event_handler+0x142>
		return;
   31a70:	46c0      	nop			; (mov r8, r8)
	}

}
   31a72:	46bd      	mov	sp, r7
   31a74:	b00a      	add	sp, #40	; 0x28
   31a76:	bd80      	pop	{r7, pc}
   31a78:	200046ec 	.word	0x200046ec
   31a7c:	000318b9 	.word	0x000318b9
   31a80:	00031f2d 	.word	0x00031f2d
   31a84:	00033289 	.word	0x00033289
   31a88:	000327b9 	.word	0x000327b9
   31a8c:	00032081 	.word	0x00032081
   31a90:	0003281d 	.word	0x0003281d

00031a94 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31a94:	b580      	push	{r7, lr}
   31a96:	b088      	sub	sp, #32
   31a98:	af00      	add	r7, sp, #0
   31a9a:	6078      	str	r0, [r7, #4]
   31a9c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31a9e:	2300      	movs	r3, #0
   31aa0:	61fb      	str	r3, [r7, #28]
   31aa2:	e048      	b.n	31b36 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31aa4:	4b27      	ldr	r3, [pc, #156]	; (31b44 <http_client_socket_resolve_handler+0xb0>)
   31aa6:	69fa      	ldr	r2, [r7, #28]
   31aa8:	0092      	lsls	r2, r2, #2
   31aaa:	58d3      	ldr	r3, [r2, r3]
   31aac:	2b00      	cmp	r3, #0
   31aae:	d03f      	beq.n	31b30 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31ab0:	4b24      	ldr	r3, [pc, #144]	; (31b44 <http_client_socket_resolve_handler+0xb0>)
   31ab2:	69fa      	ldr	r2, [r7, #28]
   31ab4:	0092      	lsls	r2, r2, #2
   31ab6:	58d3      	ldr	r3, [r2, r3]
   31ab8:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31aba:	69bb      	ldr	r3, [r7, #24]
   31abc:	1c5a      	adds	r2, r3, #1
   31abe:	687b      	ldr	r3, [r7, #4]
   31ac0:	0011      	movs	r1, r2
   31ac2:	0018      	movs	r0, r3
   31ac4:	4b20      	ldr	r3, [pc, #128]	; (31b48 <http_client_socket_resolve_handler+0xb4>)
   31ac6:	4798      	blx	r3
   31ac8:	1e03      	subs	r3, r0, #0
   31aca:	d131      	bne.n	31b30 <http_client_socket_resolve_handler+0x9c>
   31acc:	69bb      	ldr	r3, [r7, #24]
   31ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31ad0:	2b01      	cmp	r3, #1
   31ad2:	d12d      	bne.n	31b30 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31ad4:	683b      	ldr	r3, [r7, #0]
   31ad6:	2b00      	cmp	r3, #0
   31ad8:	d107      	bne.n	31aea <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31ada:	2376      	movs	r3, #118	; 0x76
   31adc:	425a      	negs	r2, r3
   31ade:	69bb      	ldr	r3, [r7, #24]
   31ae0:	0011      	movs	r1, r2
   31ae2:	0018      	movs	r0, r3
   31ae4:	4b19      	ldr	r3, [pc, #100]	; (31b4c <http_client_socket_resolve_handler+0xb8>)
   31ae6:	4798      	blx	r3
					return;
   31ae8:	e028      	b.n	31b3c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31aea:	2308      	movs	r3, #8
   31aec:	18fb      	adds	r3, r7, r3
   31aee:	2202      	movs	r2, #2
   31af0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31af2:	69bb      	ldr	r3, [r7, #24]
   31af4:	2250      	movs	r2, #80	; 0x50
   31af6:	5a9b      	ldrh	r3, [r3, r2]
   31af8:	021b      	lsls	r3, r3, #8
   31afa:	b21a      	sxth	r2, r3
   31afc:	69bb      	ldr	r3, [r7, #24]
   31afe:	2150      	movs	r1, #80	; 0x50
   31b00:	5a5b      	ldrh	r3, [r3, r1]
   31b02:	0a1b      	lsrs	r3, r3, #8
   31b04:	b29b      	uxth	r3, r3
   31b06:	b21b      	sxth	r3, r3
   31b08:	4313      	orrs	r3, r2
   31b0a:	b21b      	sxth	r3, r3
   31b0c:	b29a      	uxth	r2, r3
   31b0e:	2308      	movs	r3, #8
   31b10:	18fb      	adds	r3, r7, r3
   31b12:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31b14:	2308      	movs	r3, #8
   31b16:	18fb      	adds	r3, r7, r3
   31b18:	683a      	ldr	r2, [r7, #0]
   31b1a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31b1c:	69bb      	ldr	r3, [r7, #24]
   31b1e:	781b      	ldrb	r3, [r3, #0]
   31b20:	b25b      	sxtb	r3, r3
   31b22:	2208      	movs	r2, #8
   31b24:	18b9      	adds	r1, r7, r2
   31b26:	2210      	movs	r2, #16
   31b28:	0018      	movs	r0, r3
   31b2a:	4b09      	ldr	r3, [pc, #36]	; (31b50 <http_client_socket_resolve_handler+0xbc>)
   31b2c:	4798      	blx	r3
				return;
   31b2e:	e005      	b.n	31b3c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31b30:	69fb      	ldr	r3, [r7, #28]
   31b32:	3301      	adds	r3, #1
   31b34:	61fb      	str	r3, [r7, #28]
   31b36:	69fb      	ldr	r3, [r7, #28]
   31b38:	2b06      	cmp	r3, #6
   31b3a:	ddb3      	ble.n	31aa4 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31b3c:	46bd      	mov	sp, r7
   31b3e:	b008      	add	sp, #32
   31b40:	bd80      	pop	{r7, pc}
   31b42:	46c0      	nop			; (mov r8, r8)
   31b44:	200046ec 	.word	0x200046ec
   31b48:	00036541 	.word	0x00036541
   31b4c:	00031f2d 	.word	0x00031f2d
   31b50:	00026325 	.word	0x00026325

00031b54 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31b54:	b580      	push	{r7, lr}
   31b56:	b086      	sub	sp, #24
   31b58:	af00      	add	r7, sp, #0
   31b5a:	60f8      	str	r0, [r7, #12]
   31b5c:	60b9      	str	r1, [r7, #8]
   31b5e:	607a      	str	r2, [r7, #4]
   31b60:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31b62:	687b      	ldr	r3, [r7, #4]
   31b64:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31b66:	697b      	ldr	r3, [r7, #20]
   31b68:	2b00      	cmp	r3, #0
   31b6a:	d007      	beq.n	31b7c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31b6c:	233e      	movs	r3, #62	; 0x3e
   31b6e:	425a      	negs	r2, r3
   31b70:	697b      	ldr	r3, [r7, #20]
   31b72:	0011      	movs	r1, r2
   31b74:	0018      	movs	r0, r3
   31b76:	4b03      	ldr	r3, [pc, #12]	; (31b84 <http_client_timer_callback+0x30>)
   31b78:	4798      	blx	r3
   31b7a:	e000      	b.n	31b7e <http_client_timer_callback+0x2a>
		return;
   31b7c:	46c0      	nop			; (mov r8, r8)
}
   31b7e:	46bd      	mov	sp, r7
   31b80:	b006      	add	sp, #24
   31b82:	bd80      	pop	{r7, pc}
   31b84:	00031f2d 	.word	0x00031f2d

00031b88 <_is_ip>:

static int _is_ip(const char *host)
{
   31b88:	b580      	push	{r7, lr}
   31b8a:	b084      	sub	sp, #16
   31b8c:	af00      	add	r7, sp, #0
   31b8e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31b90:	2300      	movs	r3, #0
   31b92:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31b94:	e03a      	b.n	31c0c <_is_ip+0x84>
		ch = *host++;
   31b96:	687b      	ldr	r3, [r7, #4]
   31b98:	1c5a      	adds	r2, r3, #1
   31b9a:	607a      	str	r2, [r7, #4]
   31b9c:	220b      	movs	r2, #11
   31b9e:	18ba      	adds	r2, r7, r2
   31ba0:	781b      	ldrb	r3, [r3, #0]
   31ba2:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31ba4:	230b      	movs	r3, #11
   31ba6:	18fb      	adds	r3, r7, r3
   31ba8:	781b      	ldrb	r3, [r3, #0]
   31baa:	2b60      	cmp	r3, #96	; 0x60
   31bac:	d904      	bls.n	31bb8 <_is_ip+0x30>
   31bae:	230b      	movs	r3, #11
   31bb0:	18fb      	adds	r3, r7, r3
   31bb2:	781b      	ldrb	r3, [r3, #0]
   31bb4:	2b66      	cmp	r3, #102	; 0x66
   31bb6:	d913      	bls.n	31be0 <_is_ip+0x58>
   31bb8:	230b      	movs	r3, #11
   31bba:	18fb      	adds	r3, r7, r3
   31bbc:	781b      	ldrb	r3, [r3, #0]
   31bbe:	2b40      	cmp	r3, #64	; 0x40
   31bc0:	d904      	bls.n	31bcc <_is_ip+0x44>
   31bc2:	230b      	movs	r3, #11
   31bc4:	18fb      	adds	r3, r7, r3
   31bc6:	781b      	ldrb	r3, [r3, #0]
   31bc8:	2b46      	cmp	r3, #70	; 0x46
   31bca:	d909      	bls.n	31be0 <_is_ip+0x58>
   31bcc:	230b      	movs	r3, #11
   31bce:	18fb      	adds	r3, r7, r3
   31bd0:	781b      	ldrb	r3, [r3, #0]
   31bd2:	2b3a      	cmp	r3, #58	; 0x3a
   31bd4:	d004      	beq.n	31be0 <_is_ip+0x58>
   31bd6:	230b      	movs	r3, #11
   31bd8:	18fb      	adds	r3, r7, r3
   31bda:	781b      	ldrb	r3, [r3, #0]
   31bdc:	2b2f      	cmp	r3, #47	; 0x2f
   31bde:	d102      	bne.n	31be6 <_is_ip+0x5e>
			isv6 = 1;
   31be0:	2301      	movs	r3, #1
   31be2:	60fb      	str	r3, [r7, #12]
   31be4:	e012      	b.n	31c0c <_is_ip+0x84>
		} else if (ch == '.') {
   31be6:	230b      	movs	r3, #11
   31be8:	18fb      	adds	r3, r7, r3
   31bea:	781b      	ldrb	r3, [r3, #0]
   31bec:	2b2e      	cmp	r3, #46	; 0x2e
   31bee:	d104      	bne.n	31bfa <_is_ip+0x72>
			if (isv6) {
   31bf0:	68fb      	ldr	r3, [r7, #12]
   31bf2:	2b00      	cmp	r3, #0
   31bf4:	d00a      	beq.n	31c0c <_is_ip+0x84>
				return 0;
   31bf6:	2300      	movs	r3, #0
   31bf8:	e00d      	b.n	31c16 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31bfa:	230b      	movs	r3, #11
   31bfc:	18fb      	adds	r3, r7, r3
   31bfe:	781b      	ldrb	r3, [r3, #0]
   31c00:	2230      	movs	r2, #48	; 0x30
   31c02:	4013      	ands	r3, r2
   31c04:	2b30      	cmp	r3, #48	; 0x30
   31c06:	d001      	beq.n	31c0c <_is_ip+0x84>
			return 0;
   31c08:	2300      	movs	r3, #0
   31c0a:	e004      	b.n	31c16 <_is_ip+0x8e>
	while (*host != '\0') {
   31c0c:	687b      	ldr	r3, [r7, #4]
   31c0e:	781b      	ldrb	r3, [r3, #0]
   31c10:	2b00      	cmp	r3, #0
   31c12:	d1c0      	bne.n	31b96 <_is_ip+0xe>
		}
	}
	return 1;
   31c14:	2301      	movs	r3, #1
}
   31c16:	0018      	movs	r0, r3
   31c18:	46bd      	mov	sp, r7
   31c1a:	b004      	add	sp, #16
   31c1c:	bd80      	pop	{r7, pc}
	...

00031c20 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31c20:	b5b0      	push	{r4, r5, r7, lr}
   31c22:	b08e      	sub	sp, #56	; 0x38
   31c24:	af00      	add	r7, sp, #0
   31c26:	60f8      	str	r0, [r7, #12]
   31c28:	60b9      	str	r1, [r7, #8]
   31c2a:	603b      	str	r3, [r7, #0]
   31c2c:	1dfb      	adds	r3, r7, #7
   31c2e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31c30:	2337      	movs	r3, #55	; 0x37
   31c32:	18fb      	adds	r3, r7, r3
   31c34:	2200      	movs	r2, #0
   31c36:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31c38:	2300      	movs	r3, #0
   31c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31c3c:	2300      	movs	r3, #0
   31c3e:	633b      	str	r3, [r7, #48]	; 0x30
   31c40:	2300      	movs	r3, #0
   31c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   31c44:	2300      	movs	r3, #0
   31c46:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31c48:	68fb      	ldr	r3, [r7, #12]
   31c4a:	2b00      	cmp	r3, #0
   31c4c:	d102      	bne.n	31c54 <http_client_send_request+0x34>
		return -EINVAL;
   31c4e:	2316      	movs	r3, #22
   31c50:	425b      	negs	r3, r3
   31c52:	e145      	b.n	31ee0 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31c54:	68fb      	ldr	r3, [r7, #12]
   31c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31c58:	2b02      	cmp	r3, #2
   31c5a:	d902      	bls.n	31c62 <http_client_send_request+0x42>
		return -EBUSY;
   31c5c:	2310      	movs	r3, #16
   31c5e:	425b      	negs	r3, r3
   31c60:	e13e      	b.n	31ee0 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31c62:	49a1      	ldr	r1, [pc, #644]	; (31ee8 <http_client_send_request+0x2c8>)
   31c64:	68bb      	ldr	r3, [r7, #8]
   31c66:	2207      	movs	r2, #7
   31c68:	0018      	movs	r0, r3
   31c6a:	4ba0      	ldr	r3, [pc, #640]	; (31eec <http_client_send_request+0x2cc>)
   31c6c:	4798      	blx	r3
   31c6e:	1e03      	subs	r3, r0, #0
   31c70:	d102      	bne.n	31c78 <http_client_send_request+0x58>
		i = 7;
   31c72:	2307      	movs	r3, #7
   31c74:	633b      	str	r3, [r7, #48]	; 0x30
   31c76:	e009      	b.n	31c8c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31c78:	499d      	ldr	r1, [pc, #628]	; (31ef0 <http_client_send_request+0x2d0>)
   31c7a:	68bb      	ldr	r3, [r7, #8]
   31c7c:	2208      	movs	r2, #8
   31c7e:	0018      	movs	r0, r3
   31c80:	4b9a      	ldr	r3, [pc, #616]	; (31eec <http_client_send_request+0x2cc>)
   31c82:	4798      	blx	r3
   31c84:	1e03      	subs	r3, r0, #0
   31c86:	d101      	bne.n	31c8c <http_client_send_request+0x6c>
		i = 8;
   31c88:	2308      	movs	r3, #8
   31c8a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31c8c:	68fb      	ldr	r3, [r7, #12]
   31c8e:	1c5c      	adds	r4, r3, #1
   31c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c92:	68ba      	ldr	r2, [r7, #8]
   31c94:	18d5      	adds	r5, r2, r3
   31c96:	68fb      	ldr	r3, [r7, #12]
   31c98:	3301      	adds	r3, #1
   31c9a:	0018      	movs	r0, r3
   31c9c:	4b95      	ldr	r3, [pc, #596]	; (31ef4 <http_client_send_request+0x2d4>)
   31c9e:	4798      	blx	r3
   31ca0:	0003      	movs	r3, r0
   31ca2:	001a      	movs	r2, r3
   31ca4:	0029      	movs	r1, r5
   31ca6:	0020      	movs	r0, r4
   31ca8:	4b90      	ldr	r3, [pc, #576]	; (31eec <http_client_send_request+0x2cc>)
   31caa:	4798      	blx	r3
   31cac:	0003      	movs	r3, r0
   31cae:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31cb0:	e00d      	b.n	31cce <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31cb4:	1c5a      	adds	r2, r3, #1
   31cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   31cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31cba:	68b9      	ldr	r1, [r7, #8]
   31cbc:	188a      	adds	r2, r1, r2
   31cbe:	7811      	ldrb	r1, [r2, #0]
   31cc0:	68fa      	ldr	r2, [r7, #12]
   31cc2:	18d3      	adds	r3, r2, r3
   31cc4:	1c0a      	adds	r2, r1, #0
   31cc6:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31cca:	3301      	adds	r3, #1
   31ccc:	633b      	str	r3, [r7, #48]	; 0x30
   31cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31cd0:	68ba      	ldr	r2, [r7, #8]
   31cd2:	18d3      	adds	r3, r2, r3
   31cd4:	781b      	ldrb	r3, [r3, #0]
   31cd6:	2b00      	cmp	r3, #0
   31cd8:	d005      	beq.n	31ce6 <http_client_send_request+0xc6>
   31cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31cdc:	68ba      	ldr	r2, [r7, #8]
   31cde:	18d3      	adds	r3, r2, r3
   31ce0:	781b      	ldrb	r3, [r3, #0]
   31ce2:	2b2f      	cmp	r3, #47	; 0x2f
   31ce4:	d1e5      	bne.n	31cb2 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31ce6:	68fa      	ldr	r2, [r7, #12]
   31ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31cea:	18d3      	adds	r3, r2, r3
   31cec:	3301      	adds	r3, #1
   31cee:	2200      	movs	r2, #0
   31cf0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31cf4:	68ba      	ldr	r2, [r7, #8]
   31cf6:	18d3      	adds	r3, r2, r3
   31cf8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31cfa:	68fb      	ldr	r3, [r7, #12]
   31cfc:	3301      	adds	r3, #1
   31cfe:	781b      	ldrb	r3, [r3, #0]
   31d00:	2b00      	cmp	r3, #0
   31d02:	d102      	bne.n	31d0a <http_client_send_request+0xea>
		return -EINVAL;
   31d04:	2316      	movs	r3, #22
   31d06:	425b      	negs	r3, r3
   31d08:	e0ea      	b.n	31ee0 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d0c:	0018      	movs	r0, r3
   31d0e:	4b79      	ldr	r3, [pc, #484]	; (31ef4 <http_client_send_request+0x2d4>)
   31d10:	4798      	blx	r3
   31d12:	0003      	movs	r3, r0
   31d14:	2b3f      	cmp	r3, #63	; 0x3f
   31d16:	d902      	bls.n	31d1e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31d18:	235b      	movs	r3, #91	; 0x5b
   31d1a:	425b      	negs	r3, r3
   31d1c:	e0e0      	b.n	31ee0 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31d1e:	68fb      	ldr	r3, [r7, #12]
   31d20:	22d4      	movs	r2, #212	; 0xd4
   31d22:	589b      	ldr	r3, [r3, r2]
   31d24:	2b00      	cmp	r3, #0
   31d26:	d005      	beq.n	31d34 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31d28:	68fb      	ldr	r3, [r7, #12]
   31d2a:	22d4      	movs	r2, #212	; 0xd4
   31d2c:	589b      	ldr	r3, [r3, r2]
   31d2e:	0018      	movs	r0, r3
   31d30:	4b71      	ldr	r3, [pc, #452]	; (31ef8 <http_client_send_request+0x2d8>)
   31d32:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31d36:	2b00      	cmp	r3, #0
   31d38:	d010      	beq.n	31d5c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31d3c:	0018      	movs	r0, r3
   31d3e:	4b6f      	ldr	r3, [pc, #444]	; (31efc <http_client_send_request+0x2dc>)
   31d40:	4798      	blx	r3
   31d42:	0003      	movs	r3, r0
   31d44:	0019      	movs	r1, r3
   31d46:	68fb      	ldr	r3, [r7, #12]
   31d48:	22d4      	movs	r2, #212	; 0xd4
   31d4a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31d4c:	68fb      	ldr	r3, [r7, #12]
   31d4e:	22d4      	movs	r2, #212	; 0xd4
   31d50:	589b      	ldr	r3, [r3, r2]
   31d52:	2b00      	cmp	r3, #0
   31d54:	d106      	bne.n	31d64 <http_client_send_request+0x144>
			return -ENOMEM;
   31d56:	230c      	movs	r3, #12
   31d58:	425b      	negs	r3, r3
   31d5a:	e0c1      	b.n	31ee0 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31d5c:	68fb      	ldr	r3, [r7, #12]
   31d5e:	22d4      	movs	r2, #212	; 0xd4
   31d60:	2100      	movs	r1, #0
   31d62:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31d64:	68fb      	ldr	r3, [r7, #12]
   31d66:	2241      	movs	r2, #65	; 0x41
   31d68:	5c99      	ldrb	r1, [r3, r2]
   31d6a:	2001      	movs	r0, #1
   31d6c:	4381      	bics	r1, r0
   31d6e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31d70:	68fb      	ldr	r3, [r7, #12]
   31d72:	2200      	movs	r2, #0
   31d74:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d78:	781b      	ldrb	r3, [r3, #0]
   31d7a:	2b2f      	cmp	r3, #47	; 0x2f
   31d7c:	d107      	bne.n	31d8e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31d7e:	68fb      	ldr	r3, [r7, #12]
   31d80:	3370      	adds	r3, #112	; 0x70
   31d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31d84:	0011      	movs	r1, r2
   31d86:	0018      	movs	r0, r3
   31d88:	4b5d      	ldr	r3, [pc, #372]	; (31f00 <http_client_send_request+0x2e0>)
   31d8a:	4798      	blx	r3
   31d8c:	e00f      	b.n	31dae <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31d8e:	68fb      	ldr	r3, [r7, #12]
   31d90:	2270      	movs	r2, #112	; 0x70
   31d92:	212f      	movs	r1, #47	; 0x2f
   31d94:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d98:	781b      	ldrb	r3, [r3, #0]
   31d9a:	2b00      	cmp	r3, #0
   31d9c:	d007      	beq.n	31dae <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31d9e:	68fb      	ldr	r3, [r7, #12]
   31da0:	3370      	adds	r3, #112	; 0x70
   31da2:	3301      	adds	r3, #1
   31da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31da6:	0011      	movs	r1, r2
   31da8:	0018      	movs	r0, r3
   31daa:	4b55      	ldr	r3, [pc, #340]	; (31f00 <http_client_send_request+0x2e0>)
   31dac:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31dae:	683b      	ldr	r3, [r7, #0]
   31db0:	2b00      	cmp	r3, #0
   31db2:	d007      	beq.n	31dc4 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31db4:	68fb      	ldr	r3, [r7, #12]
   31db6:	33b0      	adds	r3, #176	; 0xb0
   31db8:	6839      	ldr	r1, [r7, #0]
   31dba:	2218      	movs	r2, #24
   31dbc:	0018      	movs	r0, r3
   31dbe:	4b51      	ldr	r3, [pc, #324]	; (31f04 <http_client_send_request+0x2e4>)
   31dc0:	4798      	blx	r3
   31dc2:	e006      	b.n	31dd2 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31dc4:	68fb      	ldr	r3, [r7, #12]
   31dc6:	33b0      	adds	r3, #176	; 0xb0
   31dc8:	2218      	movs	r2, #24
   31dca:	2100      	movs	r1, #0
   31dcc:	0018      	movs	r0, r3
   31dce:	4b4e      	ldr	r3, [pc, #312]	; (31f08 <http_client_send_request+0x2e8>)
   31dd0:	4798      	blx	r3
	}

	module->req.method = method;
   31dd2:	68fb      	ldr	r3, [r7, #12]
   31dd4:	1dfa      	adds	r2, r7, #7
   31dd6:	21c8      	movs	r1, #200	; 0xc8
   31dd8:	7812      	ldrb	r2, [r2, #0]
   31dda:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31ddc:	68fb      	ldr	r3, [r7, #12]
   31dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31de0:	2b01      	cmp	r3, #1
   31de2:	d003      	beq.n	31dec <http_client_send_request+0x1cc>
   31de4:	d316      	bcc.n	31e14 <http_client_send_request+0x1f4>
   31de6:	2b02      	cmp	r3, #2
   31de8:	d004      	beq.n	31df4 <http_client_send_request+0x1d4>
   31dea:	e074      	b.n	31ed6 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31dee:	2b00      	cmp	r3, #0
   31df0:	d100      	bne.n	31df4 <http_client_send_request+0x1d4>
   31df2:	e073      	b.n	31edc <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31df6:	2b00      	cmp	r3, #0
   31df8:	d107      	bne.n	31e0a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31dfa:	68fb      	ldr	r3, [r7, #12]
   31dfc:	2203      	movs	r2, #3
   31dfe:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31e00:	68fb      	ldr	r3, [r7, #12]
   31e02:	0018      	movs	r0, r3
   31e04:	4b41      	ldr	r3, [pc, #260]	; (31f0c <http_client_send_request+0x2ec>)
   31e06:	4798      	blx	r3
			break;
   31e08:	e069      	b.n	31ede <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31e0a:	68fb      	ldr	r3, [r7, #12]
   31e0c:	2100      	movs	r1, #0
   31e0e:	0018      	movs	r0, r3
   31e10:	4b3f      	ldr	r3, [pc, #252]	; (31f10 <http_client_send_request+0x2f0>)
   31e12:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31e14:	68fb      	ldr	r3, [r7, #12]
   31e16:	2252      	movs	r2, #82	; 0x52
   31e18:	5c9b      	ldrb	r3, [r3, r2]
   31e1a:	2b00      	cmp	r3, #0
   31e1c:	d007      	beq.n	31e2e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31e1e:	2337      	movs	r3, #55	; 0x37
   31e20:	18fb      	adds	r3, r7, r3
   31e22:	2237      	movs	r2, #55	; 0x37
   31e24:	18ba      	adds	r2, r7, r2
   31e26:	7812      	ldrb	r2, [r2, #0]
   31e28:	2101      	movs	r1, #1
   31e2a:	430a      	orrs	r2, r1
   31e2c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31e2e:	2337      	movs	r3, #55	; 0x37
   31e30:	18fb      	adds	r3, r7, r3
   31e32:	781b      	ldrb	r3, [r3, #0]
   31e34:	001a      	movs	r2, r3
   31e36:	2101      	movs	r1, #1
   31e38:	2002      	movs	r0, #2
   31e3a:	4b36      	ldr	r3, [pc, #216]	; (31f14 <http_client_send_request+0x2f4>)
   31e3c:	4798      	blx	r3
   31e3e:	0003      	movs	r3, r0
   31e40:	001a      	movs	r2, r3
   31e42:	68fb      	ldr	r3, [r7, #12]
   31e44:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31e46:	68fb      	ldr	r3, [r7, #12]
   31e48:	781b      	ldrb	r3, [r3, #0]
   31e4a:	b25b      	sxtb	r3, r3
   31e4c:	2b00      	cmp	r3, #0
   31e4e:	db3f      	blt.n	31ed0 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31e50:	68fb      	ldr	r3, [r7, #12]
   31e52:	781b      	ldrb	r3, [r3, #0]
   31e54:	b25b      	sxtb	r3, r3
   31e56:	001a      	movs	r2, r3
   31e58:	4b2f      	ldr	r3, [pc, #188]	; (31f18 <http_client_send_request+0x2f8>)
   31e5a:	0092      	lsls	r2, r2, #2
   31e5c:	68f9      	ldr	r1, [r7, #12]
   31e5e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31e60:	68fb      	ldr	r3, [r7, #12]
   31e62:	3301      	adds	r3, #1
   31e64:	0018      	movs	r0, r3
   31e66:	4b2d      	ldr	r3, [pc, #180]	; (31f1c <http_client_send_request+0x2fc>)
   31e68:	4798      	blx	r3
   31e6a:	1e03      	subs	r3, r0, #0
   31e6c:	d027      	beq.n	31ebe <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31e6e:	2314      	movs	r3, #20
   31e70:	18fb      	adds	r3, r7, r3
   31e72:	2202      	movs	r2, #2
   31e74:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31e76:	68fb      	ldr	r3, [r7, #12]
   31e78:	2250      	movs	r2, #80	; 0x50
   31e7a:	5a9b      	ldrh	r3, [r3, r2]
   31e7c:	021b      	lsls	r3, r3, #8
   31e7e:	b21a      	sxth	r2, r3
   31e80:	68fb      	ldr	r3, [r7, #12]
   31e82:	2150      	movs	r1, #80	; 0x50
   31e84:	5a5b      	ldrh	r3, [r3, r1]
   31e86:	0a1b      	lsrs	r3, r3, #8
   31e88:	b29b      	uxth	r3, r3
   31e8a:	b21b      	sxth	r3, r3
   31e8c:	4313      	orrs	r3, r2
   31e8e:	b21b      	sxth	r3, r3
   31e90:	b29a      	uxth	r2, r3
   31e92:	2314      	movs	r3, #20
   31e94:	18fb      	adds	r3, r7, r3
   31e96:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31e98:	68fb      	ldr	r3, [r7, #12]
   31e9a:	3301      	adds	r3, #1
   31e9c:	0018      	movs	r0, r3
   31e9e:	4b20      	ldr	r3, [pc, #128]	; (31f20 <http_client_send_request+0x300>)
   31ea0:	4798      	blx	r3
   31ea2:	0002      	movs	r2, r0
   31ea4:	2314      	movs	r3, #20
   31ea6:	18fb      	adds	r3, r7, r3
   31ea8:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31eaa:	68fb      	ldr	r3, [r7, #12]
   31eac:	781b      	ldrb	r3, [r3, #0]
   31eae:	b25b      	sxtb	r3, r3
   31eb0:	2214      	movs	r2, #20
   31eb2:	18b9      	adds	r1, r7, r2
   31eb4:	2210      	movs	r2, #16
   31eb6:	0018      	movs	r0, r3
   31eb8:	4b1a      	ldr	r3, [pc, #104]	; (31f24 <http_client_send_request+0x304>)
   31eba:	4798      	blx	r3
   31ebc:	e004      	b.n	31ec8 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31ebe:	68fb      	ldr	r3, [r7, #12]
   31ec0:	3301      	adds	r3, #1
   31ec2:	0018      	movs	r0, r3
   31ec4:	4b18      	ldr	r3, [pc, #96]	; (31f28 <http_client_send_request+0x308>)
   31ec6:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31ec8:	68fb      	ldr	r3, [r7, #12]
   31eca:	2201      	movs	r2, #1
   31ecc:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31ece:	e006      	b.n	31ede <http_client_send_request+0x2be>
			return -ENOSPC;
   31ed0:	231c      	movs	r3, #28
   31ed2:	425b      	negs	r3, r3
   31ed4:	e004      	b.n	31ee0 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31ed6:	230b      	movs	r3, #11
   31ed8:	425b      	negs	r3, r3
   31eda:	e001      	b.n	31ee0 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31edc:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31ede:	2300      	movs	r3, #0
}
   31ee0:	0018      	movs	r0, r3
   31ee2:	46bd      	mov	sp, r7
   31ee4:	b00e      	add	sp, #56	; 0x38
   31ee6:	bdb0      	pop	{r4, r5, r7, pc}
   31ee8:	0003b6b4 	.word	0x0003b6b4
   31eec:	000365ad 	.word	0x000365ad
   31ef0:	0003b6bc 	.word	0x0003b6bc
   31ef4:	0003659f 	.word	0x0003659f
   31ef8:	000361b9 	.word	0x000361b9
   31efc:	00036565 	.word	0x00036565
   31f00:	00036555 	.word	0x00036555
   31f04:	000361cd 	.word	0x000361cd
   31f08:	00036203 	.word	0x00036203
   31f0c:	00032081 	.word	0x00032081
   31f10:	00031f2d 	.word	0x00031f2d
   31f14:	00026111 	.word	0x00026111
   31f18:	200046ec 	.word	0x200046ec
   31f1c:	00031b89 	.word	0x00031b89
   31f20:	0002685d 	.word	0x0002685d
   31f24:	00026325 	.word	0x00026325
   31f28:	00026965 	.word	0x00026965

00031f2c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31f2c:	b580      	push	{r7, lr}
   31f2e:	b086      	sub	sp, #24
   31f30:	af00      	add	r7, sp, #0
   31f32:	6078      	str	r0, [r7, #4]
   31f34:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31f36:	687b      	ldr	r3, [r7, #4]
   31f38:	22c0      	movs	r2, #192	; 0xc0
   31f3a:	589b      	ldr	r3, [r3, r2]
   31f3c:	2b00      	cmp	r3, #0
   31f3e:	d007      	beq.n	31f50 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31f40:	687b      	ldr	r3, [r7, #4]
   31f42:	22c0      	movs	r2, #192	; 0xc0
   31f44:	589b      	ldr	r3, [r3, r2]
   31f46:	687a      	ldr	r2, [r7, #4]
   31f48:	21c4      	movs	r1, #196	; 0xc4
   31f4a:	5852      	ldr	r2, [r2, r1]
   31f4c:	0010      	movs	r0, r2
   31f4e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31f50:	687b      	ldr	r3, [r7, #4]
   31f52:	33b0      	adds	r3, #176	; 0xb0
   31f54:	2218      	movs	r2, #24
   31f56:	2100      	movs	r1, #0
   31f58:	0018      	movs	r0, r3
   31f5a:	4b24      	ldr	r3, [pc, #144]	; (31fec <_http_client_clear_conn+0xc0>)
   31f5c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31f5e:	687b      	ldr	r3, [r7, #4]
   31f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31f62:	2b00      	cmp	r3, #0
   31f64:	d005      	beq.n	31f72 <_http_client_clear_conn+0x46>
		close(module->sock);
   31f66:	687b      	ldr	r3, [r7, #4]
   31f68:	781b      	ldrb	r3, [r3, #0]
   31f6a:	b25b      	sxtb	r3, r3
   31f6c:	0018      	movs	r0, r3
   31f6e:	4b20      	ldr	r3, [pc, #128]	; (31ff0 <_http_client_clear_conn+0xc4>)
   31f70:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31f72:	687b      	ldr	r3, [r7, #4]
   31f74:	781b      	ldrb	r3, [r3, #0]
   31f76:	b25b      	sxtb	r3, r3
   31f78:	001a      	movs	r2, r3
   31f7a:	4b1e      	ldr	r3, [pc, #120]	; (31ff4 <_http_client_clear_conn+0xc8>)
   31f7c:	0092      	lsls	r2, r2, #2
   31f7e:	2100      	movs	r1, #0
   31f80:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31f82:	687b      	ldr	r3, [r7, #4]
   31f84:	336c      	adds	r3, #108	; 0x6c
   31f86:	226c      	movs	r2, #108	; 0x6c
   31f88:	2100      	movs	r1, #0
   31f8a:	0018      	movs	r0, r3
   31f8c:	4b17      	ldr	r3, [pc, #92]	; (31fec <_http_client_clear_conn+0xc0>)
   31f8e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31f90:	687b      	ldr	r3, [r7, #4]
   31f92:	33d8      	adds	r3, #216	; 0xd8
   31f94:	2210      	movs	r2, #16
   31f96:	2100      	movs	r1, #0
   31f98:	0018      	movs	r0, r3
   31f9a:	4b14      	ldr	r3, [pc, #80]	; (31fec <_http_client_clear_conn+0xc0>)
   31f9c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31f9e:	687b      	ldr	r3, [r7, #4]
   31fa0:	2200      	movs	r2, #0
   31fa2:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31fa4:	687b      	ldr	r3, [r7, #4]
   31fa6:	22d8      	movs	r2, #216	; 0xd8
   31fa8:	2100      	movs	r1, #0
   31faa:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31fac:	687b      	ldr	r3, [r7, #4]
   31fae:	2241      	movs	r2, #65	; 0x41
   31fb0:	5c99      	ldrb	r1, [r3, r2]
   31fb2:	2001      	movs	r0, #1
   31fb4:	4381      	bics	r1, r0
   31fb6:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31fb8:	687b      	ldr	r3, [r7, #4]
   31fba:	2241      	movs	r2, #65	; 0x41
   31fbc:	5c99      	ldrb	r1, [r3, r2]
   31fbe:	2002      	movs	r0, #2
   31fc0:	4381      	bics	r1, r0
   31fc2:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   31fc4:	230c      	movs	r3, #12
   31fc6:	18fb      	adds	r3, r7, r3
   31fc8:	683a      	ldr	r2, [r7, #0]
   31fca:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   31fcc:	687b      	ldr	r3, [r7, #4]
   31fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31fd0:	2b00      	cmp	r3, #0
   31fd2:	d006      	beq.n	31fe2 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   31fd4:	687b      	ldr	r3, [r7, #4]
   31fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31fd8:	220c      	movs	r2, #12
   31fda:	18ba      	adds	r2, r7, r2
   31fdc:	6878      	ldr	r0, [r7, #4]
   31fde:	2104      	movs	r1, #4
   31fe0:	4798      	blx	r3
	}
}
   31fe2:	46c0      	nop			; (mov r8, r8)
   31fe4:	46bd      	mov	sp, r7
   31fe6:	b006      	add	sp, #24
   31fe8:	bd80      	pop	{r7, pc}
   31fea:	46c0      	nop			; (mov r8, r8)
   31fec:	00036203 	.word	0x00036203
   31ff0:	0002671d 	.word	0x0002671d
   31ff4:	200046ec 	.word	0x200046ec

00031ff8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31ff8:	b590      	push	{r4, r7, lr}
   31ffa:	b087      	sub	sp, #28
   31ffc:	af00      	add	r7, sp, #0
   31ffe:	60f8      	str	r0, [r7, #12]
   32000:	60b9      	str	r1, [r7, #8]
   32002:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   32004:	68fb      	ldr	r3, [r7, #12]
   32006:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   32008:	697b      	ldr	r3, [r7, #20]
   3200a:	2241      	movs	r2, #65	; 0x41
   3200c:	5c99      	ldrb	r1, [r3, r2]
   3200e:	2001      	movs	r0, #1
   32010:	4301      	orrs	r1, r0
   32012:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   32014:	697b      	ldr	r3, [r7, #20]
   32016:	2000      	movs	r0, #0
   32018:	5618      	ldrsb	r0, [r3, r0]
   3201a:	687b      	ldr	r3, [r7, #4]
   3201c:	b29a      	uxth	r2, r3
   3201e:	68b9      	ldr	r1, [r7, #8]
   32020:	2300      	movs	r3, #0
   32022:	4c14      	ldr	r4, [pc, #80]	; (32074 <_http_client_send_wait+0x7c>)
   32024:	47a0      	blx	r4
   32026:	0003      	movs	r3, r0
   32028:	613b      	str	r3, [r7, #16]
   3202a:	693b      	ldr	r3, [r7, #16]
   3202c:	2b00      	cmp	r3, #0
   3202e:	da0f      	bge.n	32050 <_http_client_send_wait+0x58>
		module->sending = 0;
   32030:	697b      	ldr	r3, [r7, #20]
   32032:	2241      	movs	r2, #65	; 0x41
   32034:	5c99      	ldrb	r1, [r3, r2]
   32036:	2001      	movs	r0, #1
   32038:	4381      	bics	r1, r0
   3203a:	5499      	strb	r1, [r3, r2]
		return result;
   3203c:	693b      	ldr	r3, [r7, #16]
   3203e:	e014      	b.n	3206a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   32040:	2000      	movs	r0, #0
   32042:	4b0d      	ldr	r3, [pc, #52]	; (32078 <_http_client_send_wait+0x80>)
   32044:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   32046:	697b      	ldr	r3, [r7, #20]
   32048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3204a:	0018      	movs	r0, r3
   3204c:	4b0b      	ldr	r3, [pc, #44]	; (3207c <_http_client_send_wait+0x84>)
   3204e:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   32050:	697b      	ldr	r3, [r7, #20]
   32052:	2241      	movs	r2, #65	; 0x41
   32054:	5c9b      	ldrb	r3, [r3, r2]
   32056:	2201      	movs	r2, #1
   32058:	4013      	ands	r3, r2
   3205a:	b2db      	uxtb	r3, r3
   3205c:	2b00      	cmp	r3, #0
   3205e:	d003      	beq.n	32068 <_http_client_send_wait+0x70>
   32060:	697b      	ldr	r3, [r7, #20]
   32062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32064:	2b02      	cmp	r3, #2
   32066:	d8eb      	bhi.n	32040 <_http_client_send_wait+0x48>
	}

	return 0;
   32068:	2300      	movs	r3, #0
}
   3206a:	0018      	movs	r0, r3
   3206c:	46bd      	mov	sp, r7
   3206e:	b007      	add	sp, #28
   32070:	bd90      	pop	{r4, r7, pc}
   32072:	46c0      	nop			; (mov r8, r8)
   32074:	00026439 	.word	0x00026439
   32078:	00022ae5 	.word	0x00022ae5
   3207c:	00033305 	.word	0x00033305

00032080 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   32080:	b5f0      	push	{r4, r5, r6, r7, lr}
   32082:	46c6      	mov	lr, r8
   32084:	b500      	push	{lr}
   32086:	b0a0      	sub	sp, #128	; 0x80
   32088:	af02      	add	r7, sp, #8
   3208a:	61f8      	str	r0, [r7, #28]
   3208c:	4668      	mov	r0, sp
   3208e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32090:	2318      	movs	r3, #24
   32092:	2218      	movs	r2, #24
   32094:	18ba      	adds	r2, r7, r2
   32096:	18d0      	adds	r0, r2, r3
   32098:	4bbd      	ldr	r3, [pc, #756]	; (32390 <_http_client_request+0x310>)
   3209a:	469c      	mov	ip, r3
   3209c:	4663      	mov	r3, ip
   3209e:	cb16      	ldmia	r3!, {r1, r2, r4}
   320a0:	c016      	stmia	r0!, {r1, r2, r4}
   320a2:	469c      	mov	ip, r3
   320a4:	4663      	mov	r3, ip
   320a6:	681b      	ldr	r3, [r3, #0]
   320a8:	469c      	mov	ip, r3
   320aa:	4663      	mov	r3, ip
   320ac:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   320ae:	69f8      	ldr	r0, [r7, #28]
   320b0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   320b2:	4684      	mov	ip, r0
   320b4:	2301      	movs	r3, #1
   320b6:	425b      	negs	r3, r3
   320b8:	4698      	mov	r8, r3
   320ba:	44c4      	add	ip, r8
   320bc:	4663      	mov	r3, ip
   320be:	66fb      	str	r3, [r7, #108]	; 0x6c
   320c0:	6038      	str	r0, [r7, #0]
   320c2:	2300      	movs	r3, #0
   320c4:	607b      	str	r3, [r7, #4]
   320c6:	6839      	ldr	r1, [r7, #0]
   320c8:	687a      	ldr	r2, [r7, #4]
   320ca:	000b      	movs	r3, r1
   320cc:	0f5b      	lsrs	r3, r3, #29
   320ce:	469c      	mov	ip, r3
   320d0:	0013      	movs	r3, r2
   320d2:	00db      	lsls	r3, r3, #3
   320d4:	617b      	str	r3, [r7, #20]
   320d6:	4663      	mov	r3, ip
   320d8:	697c      	ldr	r4, [r7, #20]
   320da:	431c      	orrs	r4, r3
   320dc:	617c      	str	r4, [r7, #20]
   320de:	000b      	movs	r3, r1
   320e0:	00db      	lsls	r3, r3, #3
   320e2:	613b      	str	r3, [r7, #16]
   320e4:	0005      	movs	r5, r0
   320e6:	2200      	movs	r2, #0
   320e8:	0016      	movs	r6, r2
   320ea:	0f6a      	lsrs	r2, r5, #29
   320ec:	00f3      	lsls	r3, r6, #3
   320ee:	60fb      	str	r3, [r7, #12]
   320f0:	68fb      	ldr	r3, [r7, #12]
   320f2:	4313      	orrs	r3, r2
   320f4:	60fb      	str	r3, [r7, #12]
   320f6:	00eb      	lsls	r3, r5, #3
   320f8:	60bb      	str	r3, [r7, #8]
   320fa:	1dc3      	adds	r3, r0, #7
   320fc:	08db      	lsrs	r3, r3, #3
   320fe:	00db      	lsls	r3, r3, #3
   32100:	466a      	mov	r2, sp
   32102:	1ad3      	subs	r3, r2, r3
   32104:	469d      	mov	sp, r3
   32106:	ab02      	add	r3, sp, #8
   32108:	3300      	adds	r3, #0
   3210a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3210c:	69fb      	ldr	r3, [r7, #28]
   3210e:	2b00      	cmp	r3, #0
   32110:	d100      	bne.n	32114 <_http_client_request+0x94>
   32112:	e346      	b.n	327a2 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   32114:	69fb      	ldr	r3, [r7, #28]
   32116:	2241      	movs	r2, #65	; 0x41
   32118:	5c9b      	ldrb	r3, [r3, r2]
   3211a:	2201      	movs	r2, #1
   3211c:	4013      	ands	r3, r2
   3211e:	b2db      	uxtb	r3, r3
   32120:	2b00      	cmp	r3, #0
   32122:	d000      	beq.n	32126 <_http_client_request+0xa6>
   32124:	e33f      	b.n	327a6 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   32126:	69fb      	ldr	r3, [r7, #28]
   32128:	33b0      	adds	r3, #176	; 0xb0
   3212a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3212c:	69fb      	ldr	r3, [r7, #28]
   3212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32130:	2b03      	cmp	r3, #3
   32132:	d003      	beq.n	3213c <_http_client_request+0xbc>
   32134:	2b04      	cmp	r3, #4
   32136:	d100      	bne.n	3213a <_http_client_request+0xba>
   32138:	e1b3      	b.n	324a2 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3213a:	e32f      	b.n	3279c <_http_client_request+0x71c>
		module->req.content_length = 0;
   3213c:	69fb      	ldr	r3, [r7, #28]
   3213e:	22cc      	movs	r2, #204	; 0xcc
   32140:	2100      	movs	r1, #0
   32142:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   32144:	69fb      	ldr	r3, [r7, #28]
   32146:	22d0      	movs	r2, #208	; 0xd0
   32148:	2100      	movs	r1, #0
   3214a:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   3214c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3214e:	69fb      	ldr	r3, [r7, #28]
   32150:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   32152:	4c90      	ldr	r4, [pc, #576]	; (32394 <_http_client_request+0x314>)
   32154:	2334      	movs	r3, #52	; 0x34
   32156:	2018      	movs	r0, #24
   32158:	1838      	adds	r0, r7, r0
   3215a:	18c0      	adds	r0, r0, r3
   3215c:	69fb      	ldr	r3, [r7, #28]
   3215e:	9300      	str	r3, [sp, #0]
   32160:	0023      	movs	r3, r4
   32162:	4c8d      	ldr	r4, [pc, #564]	; (32398 <_http_client_request+0x318>)
   32164:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   32166:	69fb      	ldr	r3, [r7, #28]
   32168:	22c8      	movs	r2, #200	; 0xc8
   3216a:	5c9b      	ldrb	r3, [r3, r2]
   3216c:	2b01      	cmp	r3, #1
   3216e:	d10a      	bne.n	32186 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   32170:	498a      	ldr	r1, [pc, #552]	; (3239c <_http_client_request+0x31c>)
   32172:	2334      	movs	r3, #52	; 0x34
   32174:	2218      	movs	r2, #24
   32176:	4694      	mov	ip, r2
   32178:	44bc      	add	ip, r7
   3217a:	4463      	add	r3, ip
   3217c:	2204      	movs	r2, #4
   3217e:	0018      	movs	r0, r3
   32180:	4b87      	ldr	r3, [pc, #540]	; (323a0 <_http_client_request+0x320>)
   32182:	4798      	blx	r3
   32184:	e04e      	b.n	32224 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   32186:	69fb      	ldr	r3, [r7, #28]
   32188:	22c8      	movs	r2, #200	; 0xc8
   3218a:	5c9b      	ldrb	r3, [r3, r2]
   3218c:	2b02      	cmp	r3, #2
   3218e:	d10a      	bne.n	321a6 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32190:	4984      	ldr	r1, [pc, #528]	; (323a4 <_http_client_request+0x324>)
   32192:	2334      	movs	r3, #52	; 0x34
   32194:	2218      	movs	r2, #24
   32196:	4694      	mov	ip, r2
   32198:	44bc      	add	ip, r7
   3219a:	4463      	add	r3, ip
   3219c:	2205      	movs	r2, #5
   3219e:	0018      	movs	r0, r3
   321a0:	4b7f      	ldr	r3, [pc, #508]	; (323a0 <_http_client_request+0x320>)
   321a2:	4798      	blx	r3
   321a4:	e03e      	b.n	32224 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   321a6:	69fb      	ldr	r3, [r7, #28]
   321a8:	22c8      	movs	r2, #200	; 0xc8
   321aa:	5c9b      	ldrb	r3, [r3, r2]
   321ac:	2b03      	cmp	r3, #3
   321ae:	d10a      	bne.n	321c6 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   321b0:	497d      	ldr	r1, [pc, #500]	; (323a8 <_http_client_request+0x328>)
   321b2:	2334      	movs	r3, #52	; 0x34
   321b4:	2218      	movs	r2, #24
   321b6:	4694      	mov	ip, r2
   321b8:	44bc      	add	ip, r7
   321ba:	4463      	add	r3, ip
   321bc:	2207      	movs	r2, #7
   321be:	0018      	movs	r0, r3
   321c0:	4b77      	ldr	r3, [pc, #476]	; (323a0 <_http_client_request+0x320>)
   321c2:	4798      	blx	r3
   321c4:	e02e      	b.n	32224 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   321c6:	69fb      	ldr	r3, [r7, #28]
   321c8:	22c8      	movs	r2, #200	; 0xc8
   321ca:	5c9b      	ldrb	r3, [r3, r2]
   321cc:	2b04      	cmp	r3, #4
   321ce:	d10a      	bne.n	321e6 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   321d0:	4976      	ldr	r1, [pc, #472]	; (323ac <_http_client_request+0x32c>)
   321d2:	2334      	movs	r3, #52	; 0x34
   321d4:	2218      	movs	r2, #24
   321d6:	4694      	mov	ip, r2
   321d8:	44bc      	add	ip, r7
   321da:	4463      	add	r3, ip
   321dc:	2204      	movs	r2, #4
   321de:	0018      	movs	r0, r3
   321e0:	4b6f      	ldr	r3, [pc, #444]	; (323a0 <_http_client_request+0x320>)
   321e2:	4798      	blx	r3
   321e4:	e01e      	b.n	32224 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   321e6:	69fb      	ldr	r3, [r7, #28]
   321e8:	22c8      	movs	r2, #200	; 0xc8
   321ea:	5c9b      	ldrb	r3, [r3, r2]
   321ec:	2b05      	cmp	r3, #5
   321ee:	d10a      	bne.n	32206 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   321f0:	496f      	ldr	r1, [pc, #444]	; (323b0 <_http_client_request+0x330>)
   321f2:	2334      	movs	r3, #52	; 0x34
   321f4:	2218      	movs	r2, #24
   321f6:	4694      	mov	ip, r2
   321f8:	44bc      	add	ip, r7
   321fa:	4463      	add	r3, ip
   321fc:	2208      	movs	r2, #8
   321fe:	0018      	movs	r0, r3
   32200:	4b67      	ldr	r3, [pc, #412]	; (323a0 <_http_client_request+0x320>)
   32202:	4798      	blx	r3
   32204:	e00e      	b.n	32224 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   32206:	69fb      	ldr	r3, [r7, #28]
   32208:	22c8      	movs	r2, #200	; 0xc8
   3220a:	5c9b      	ldrb	r3, [r3, r2]
   3220c:	2b06      	cmp	r3, #6
   3220e:	d109      	bne.n	32224 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32210:	4968      	ldr	r1, [pc, #416]	; (323b4 <_http_client_request+0x334>)
   32212:	2334      	movs	r3, #52	; 0x34
   32214:	2218      	movs	r2, #24
   32216:	4694      	mov	ip, r2
   32218:	44bc      	add	ip, r7
   3221a:	4463      	add	r3, ip
   3221c:	2205      	movs	r2, #5
   3221e:	0018      	movs	r0, r3
   32220:	4b5f      	ldr	r3, [pc, #380]	; (323a0 <_http_client_request+0x320>)
   32222:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   32224:	69fb      	ldr	r3, [r7, #28]
   32226:	3370      	adds	r3, #112	; 0x70
   32228:	001c      	movs	r4, r3
   3222a:	69fb      	ldr	r3, [r7, #28]
   3222c:	3370      	adds	r3, #112	; 0x70
   3222e:	0018      	movs	r0, r3
   32230:	4b61      	ldr	r3, [pc, #388]	; (323b8 <_http_client_request+0x338>)
   32232:	4798      	blx	r3
   32234:	0002      	movs	r2, r0
   32236:	2334      	movs	r3, #52	; 0x34
   32238:	2118      	movs	r1, #24
   3223a:	468c      	mov	ip, r1
   3223c:	44bc      	add	ip, r7
   3223e:	4463      	add	r3, ip
   32240:	0021      	movs	r1, r4
   32242:	0018      	movs	r0, r3
   32244:	4b56      	ldr	r3, [pc, #344]	; (323a0 <_http_client_request+0x320>)
   32246:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   32248:	495c      	ldr	r1, [pc, #368]	; (323bc <_http_client_request+0x33c>)
   3224a:	2334      	movs	r3, #52	; 0x34
   3224c:	2218      	movs	r2, #24
   3224e:	4694      	mov	ip, r2
   32250:	44bc      	add	ip, r7
   32252:	4463      	add	r3, ip
   32254:	220b      	movs	r2, #11
   32256:	0018      	movs	r0, r3
   32258:	4b51      	ldr	r3, [pc, #324]	; (323a0 <_http_client_request+0x320>)
   3225a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3225c:	4958      	ldr	r1, [pc, #352]	; (323c0 <_http_client_request+0x340>)
   3225e:	2334      	movs	r3, #52	; 0x34
   32260:	2218      	movs	r2, #24
   32262:	4694      	mov	ip, r2
   32264:	44bc      	add	ip, r7
   32266:	4463      	add	r3, ip
   32268:	220c      	movs	r2, #12
   3226a:	0018      	movs	r0, r3
   3226c:	4b4c      	ldr	r3, [pc, #304]	; (323a0 <_http_client_request+0x320>)
   3226e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   32270:	69fb      	ldr	r3, [r7, #28]
   32272:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   32274:	69fb      	ldr	r3, [r7, #28]
   32276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   32278:	0018      	movs	r0, r3
   3227a:	4b4f      	ldr	r3, [pc, #316]	; (323b8 <_http_client_request+0x338>)
   3227c:	4798      	blx	r3
   3227e:	0002      	movs	r2, r0
   32280:	2334      	movs	r3, #52	; 0x34
   32282:	2118      	movs	r1, #24
   32284:	468c      	mov	ip, r1
   32286:	44bc      	add	ip, r7
   32288:	4463      	add	r3, ip
   3228a:	0021      	movs	r1, r4
   3228c:	0018      	movs	r0, r3
   3228e:	4b44      	ldr	r3, [pc, #272]	; (323a0 <_http_client_request+0x320>)
   32290:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32292:	494c      	ldr	r1, [pc, #304]	; (323c4 <_http_client_request+0x344>)
   32294:	2334      	movs	r3, #52	; 0x34
   32296:	2218      	movs	r2, #24
   32298:	4694      	mov	ip, r2
   3229a:	44bc      	add	ip, r7
   3229c:	4463      	add	r3, ip
   3229e:	2202      	movs	r2, #2
   322a0:	0018      	movs	r0, r3
   322a2:	4b3f      	ldr	r3, [pc, #252]	; (323a0 <_http_client_request+0x320>)
   322a4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   322a6:	4948      	ldr	r1, [pc, #288]	; (323c8 <_http_client_request+0x348>)
   322a8:	2334      	movs	r3, #52	; 0x34
   322aa:	2218      	movs	r2, #24
   322ac:	4694      	mov	ip, r2
   322ae:	44bc      	add	ip, r7
   322b0:	4463      	add	r3, ip
   322b2:	2206      	movs	r2, #6
   322b4:	0018      	movs	r0, r3
   322b6:	4b3a      	ldr	r3, [pc, #232]	; (323a0 <_http_client_request+0x320>)
   322b8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   322ba:	69fb      	ldr	r3, [r7, #28]
   322bc:	1c5c      	adds	r4, r3, #1
   322be:	69fb      	ldr	r3, [r7, #28]
   322c0:	3301      	adds	r3, #1
   322c2:	0018      	movs	r0, r3
   322c4:	4b3c      	ldr	r3, [pc, #240]	; (323b8 <_http_client_request+0x338>)
   322c6:	4798      	blx	r3
   322c8:	0002      	movs	r2, r0
   322ca:	2334      	movs	r3, #52	; 0x34
   322cc:	2118      	movs	r1, #24
   322ce:	468c      	mov	ip, r1
   322d0:	44bc      	add	ip, r7
   322d2:	4463      	add	r3, ip
   322d4:	0021      	movs	r1, r4
   322d6:	0018      	movs	r0, r3
   322d8:	4b31      	ldr	r3, [pc, #196]	; (323a0 <_http_client_request+0x320>)
   322da:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   322dc:	4939      	ldr	r1, [pc, #228]	; (323c4 <_http_client_request+0x344>)
   322de:	2334      	movs	r3, #52	; 0x34
   322e0:	2218      	movs	r2, #24
   322e2:	4694      	mov	ip, r2
   322e4:	44bc      	add	ip, r7
   322e6:	4463      	add	r3, ip
   322e8:	2202      	movs	r2, #2
   322ea:	0018      	movs	r0, r3
   322ec:	4b2c      	ldr	r3, [pc, #176]	; (323a0 <_http_client_request+0x320>)
   322ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   322f0:	4936      	ldr	r1, [pc, #216]	; (323cc <_http_client_request+0x34c>)
   322f2:	2334      	movs	r3, #52	; 0x34
   322f4:	2218      	movs	r2, #24
   322f6:	4694      	mov	ip, r2
   322f8:	44bc      	add	ip, r7
   322fa:	4463      	add	r3, ip
   322fc:	2218      	movs	r2, #24
   322fe:	0018      	movs	r0, r3
   32300:	4b27      	ldr	r3, [pc, #156]	; (323a0 <_http_client_request+0x320>)
   32302:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   32304:	4932      	ldr	r1, [pc, #200]	; (323d0 <_http_client_request+0x350>)
   32306:	2334      	movs	r3, #52	; 0x34
   32308:	2218      	movs	r2, #24
   3230a:	4694      	mov	ip, r2
   3230c:	44bc      	add	ip, r7
   3230e:	4463      	add	r3, ip
   32310:	2213      	movs	r2, #19
   32312:	0018      	movs	r0, r3
   32314:	4b22      	ldr	r3, [pc, #136]	; (323a0 <_http_client_request+0x320>)
   32316:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32318:	492e      	ldr	r1, [pc, #184]	; (323d4 <_http_client_request+0x354>)
   3231a:	2334      	movs	r3, #52	; 0x34
   3231c:	2218      	movs	r2, #24
   3231e:	4694      	mov	ip, r2
   32320:	44bc      	add	ip, r7
   32322:	4463      	add	r3, ip
   32324:	2217      	movs	r2, #23
   32326:	0018      	movs	r0, r3
   32328:	4b1d      	ldr	r3, [pc, #116]	; (323a0 <_http_client_request+0x320>)
   3232a:	4798      	blx	r3
		if (entity->read != NULL) {
   3232c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3232e:	68db      	ldr	r3, [r3, #12]
   32330:	2b00      	cmp	r3, #0
   32332:	d100      	bne.n	32336 <_http_client_request+0x2b6>
   32334:	e088      	b.n	32448 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   32336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32338:	781b      	ldrb	r3, [r3, #0]
   3233a:	2b00      	cmp	r3, #0
   3233c:	d00f      	beq.n	3235e <_http_client_request+0x2de>
				module->req.content_length = -1;
   3233e:	69fb      	ldr	r3, [r7, #28]
   32340:	21cc      	movs	r1, #204	; 0xcc
   32342:	2201      	movs	r2, #1
   32344:	4252      	negs	r2, r2
   32346:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   32348:	4923      	ldr	r1, [pc, #140]	; (323d8 <_http_client_request+0x358>)
   3234a:	2334      	movs	r3, #52	; 0x34
   3234c:	2218      	movs	r2, #24
   3234e:	4694      	mov	ip, r2
   32350:	44bc      	add	ip, r7
   32352:	4463      	add	r3, ip
   32354:	221c      	movs	r2, #28
   32356:	0018      	movs	r0, r3
   32358:	4b11      	ldr	r3, [pc, #68]	; (323a0 <_http_client_request+0x320>)
   3235a:	4798      	blx	r3
   3235c:	e074      	b.n	32448 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3235e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32360:	689b      	ldr	r3, [r3, #8]
   32362:	2b00      	cmp	r3, #0
   32364:	d070      	beq.n	32448 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   32366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32368:	689a      	ldr	r2, [r3, #8]
   3236a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3236c:	695b      	ldr	r3, [r3, #20]
   3236e:	0018      	movs	r0, r3
   32370:	4790      	blx	r2
   32372:	0001      	movs	r1, r0
   32374:	69fb      	ldr	r3, [r7, #28]
   32376:	22cc      	movs	r2, #204	; 0xcc
   32378:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3237a:	69fb      	ldr	r3, [r7, #28]
   3237c:	22cc      	movs	r2, #204	; 0xcc
   3237e:	589b      	ldr	r3, [r3, r2]
   32380:	2b00      	cmp	r3, #0
   32382:	da2b      	bge.n	323dc <_http_client_request+0x35c>
					module->req.content_length = 0;
   32384:	69fb      	ldr	r3, [r7, #28]
   32386:	22cc      	movs	r2, #204	; 0xcc
   32388:	2100      	movs	r1, #0
   3238a:	5099      	str	r1, [r3, r2]
   3238c:	e05c      	b.n	32448 <_http_client_request+0x3c8>
   3238e:	46c0      	nop			; (mov r8, r8)
   32390:	0003b7a4 	.word	0x0003b7a4
   32394:	00031ff9 	.word	0x00031ff9
   32398:	00032f61 	.word	0x00032f61
   3239c:	0003b6c8 	.word	0x0003b6c8
   323a0:	00032fe1 	.word	0x00032fe1
   323a4:	0003b6d0 	.word	0x0003b6d0
   323a8:	0003b6d8 	.word	0x0003b6d8
   323ac:	0003b6e0 	.word	0x0003b6e0
   323b0:	0003b6e8 	.word	0x0003b6e8
   323b4:	0003b6f4 	.word	0x0003b6f4
   323b8:	0003659f 	.word	0x0003659f
   323bc:	0003b6fc 	.word	0x0003b6fc
   323c0:	0003b708 	.word	0x0003b708
   323c4:	0003b718 	.word	0x0003b718
   323c8:	0003b71c 	.word	0x0003b71c
   323cc:	0003b724 	.word	0x0003b724
   323d0:	0003b740 	.word	0x0003b740
   323d4:	0003b754 	.word	0x0003b754
   323d8:	0003b76c 	.word	0x0003b76c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   323dc:	69fb      	ldr	r3, [r7, #28]
   323de:	22cc      	movs	r2, #204	; 0xcc
   323e0:	589b      	ldr	r3, [r3, r2]
   323e2:	001a      	movs	r2, r3
   323e4:	49e0      	ldr	r1, [pc, #896]	; (32768 <_http_client_request+0x6e8>)
   323e6:	2328      	movs	r3, #40	; 0x28
   323e8:	2018      	movs	r0, #24
   323ea:	4684      	mov	ip, r0
   323ec:	44bc      	add	ip, r7
   323ee:	4463      	add	r3, ip
   323f0:	0018      	movs	r0, r3
   323f2:	4bde      	ldr	r3, [pc, #888]	; (3276c <_http_client_request+0x6ec>)
   323f4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   323f6:	49de      	ldr	r1, [pc, #888]	; (32770 <_http_client_request+0x6f0>)
   323f8:	2334      	movs	r3, #52	; 0x34
   323fa:	2218      	movs	r2, #24
   323fc:	4694      	mov	ip, r2
   323fe:	44bc      	add	ip, r7
   32400:	4463      	add	r3, ip
   32402:	2210      	movs	r2, #16
   32404:	0018      	movs	r0, r3
   32406:	4bdb      	ldr	r3, [pc, #876]	; (32774 <_http_client_request+0x6f4>)
   32408:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3240a:	2328      	movs	r3, #40	; 0x28
   3240c:	2218      	movs	r2, #24
   3240e:	4694      	mov	ip, r2
   32410:	44bc      	add	ip, r7
   32412:	4463      	add	r3, ip
   32414:	0018      	movs	r0, r3
   32416:	4bd8      	ldr	r3, [pc, #864]	; (32778 <_http_client_request+0x6f8>)
   32418:	4798      	blx	r3
   3241a:	0002      	movs	r2, r0
   3241c:	2328      	movs	r3, #40	; 0x28
   3241e:	2118      	movs	r1, #24
   32420:	1879      	adds	r1, r7, r1
   32422:	18c9      	adds	r1, r1, r3
   32424:	2334      	movs	r3, #52	; 0x34
   32426:	2018      	movs	r0, #24
   32428:	4684      	mov	ip, r0
   3242a:	44bc      	add	ip, r7
   3242c:	4463      	add	r3, ip
   3242e:	0018      	movs	r0, r3
   32430:	4bd0      	ldr	r3, [pc, #832]	; (32774 <_http_client_request+0x6f4>)
   32432:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32434:	49d1      	ldr	r1, [pc, #836]	; (3277c <_http_client_request+0x6fc>)
   32436:	2334      	movs	r3, #52	; 0x34
   32438:	2218      	movs	r2, #24
   3243a:	4694      	mov	ip, r2
   3243c:	44bc      	add	ip, r7
   3243e:	4463      	add	r3, ip
   32440:	2202      	movs	r2, #2
   32442:	0018      	movs	r0, r3
   32444:	4bcb      	ldr	r3, [pc, #812]	; (32774 <_http_client_request+0x6f4>)
   32446:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   32448:	69fb      	ldr	r3, [r7, #28]
   3244a:	22d4      	movs	r2, #212	; 0xd4
   3244c:	589b      	ldr	r3, [r3, r2]
   3244e:	2b00      	cmp	r3, #0
   32450:	d012      	beq.n	32478 <_http_client_request+0x3f8>
				module->req.ext_header,
   32452:	69fb      	ldr	r3, [r7, #28]
   32454:	22d4      	movs	r2, #212	; 0xd4
   32456:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   32458:	69fb      	ldr	r3, [r7, #28]
   3245a:	22d4      	movs	r2, #212	; 0xd4
   3245c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3245e:	0018      	movs	r0, r3
   32460:	4bc5      	ldr	r3, [pc, #788]	; (32778 <_http_client_request+0x6f8>)
   32462:	4798      	blx	r3
   32464:	0002      	movs	r2, r0
   32466:	2334      	movs	r3, #52	; 0x34
   32468:	2118      	movs	r1, #24
   3246a:	468c      	mov	ip, r1
   3246c:	44bc      	add	ip, r7
   3246e:	4463      	add	r3, ip
   32470:	0021      	movs	r1, r4
   32472:	0018      	movs	r0, r3
   32474:	4bbf      	ldr	r3, [pc, #764]	; (32774 <_http_client_request+0x6f4>)
   32476:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32478:	49c0      	ldr	r1, [pc, #768]	; (3277c <_http_client_request+0x6fc>)
   3247a:	2334      	movs	r3, #52	; 0x34
   3247c:	2218      	movs	r2, #24
   3247e:	4694      	mov	ip, r2
   32480:	44bc      	add	ip, r7
   32482:	4463      	add	r3, ip
   32484:	2202      	movs	r2, #2
   32486:	0018      	movs	r0, r3
   32488:	4bba      	ldr	r3, [pc, #744]	; (32774 <_http_client_request+0x6f4>)
   3248a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3248c:	2334      	movs	r3, #52	; 0x34
   3248e:	2218      	movs	r2, #24
   32490:	4694      	mov	ip, r2
   32492:	44bc      	add	ip, r7
   32494:	4463      	add	r3, ip
   32496:	0018      	movs	r0, r3
   32498:	4bb9      	ldr	r3, [pc, #740]	; (32780 <_http_client_request+0x700>)
   3249a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3249c:	69fb      	ldr	r3, [r7, #28]
   3249e:	2204      	movs	r2, #4
   324a0:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   324a2:	69fb      	ldr	r3, [r7, #28]
   324a4:	22cc      	movs	r2, #204	; 0xcc
   324a6:	589b      	ldr	r3, [r3, r2]
   324a8:	2b00      	cmp	r3, #0
   324aa:	db00      	blt.n	324ae <_http_client_request+0x42e>
   324ac:	e0c6      	b.n	3263c <_http_client_request+0x5bc>
   324ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324b0:	68db      	ldr	r3, [r3, #12]
   324b2:	2b00      	cmp	r3, #0
   324b4:	d100      	bne.n	324b8 <_http_client_request+0x438>
   324b6:	e0c1      	b.n	3263c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   324b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324ba:	68dc      	ldr	r4, [r3, #12]
   324bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324be:	6958      	ldr	r0, [r3, #20]
   324c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324c2:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   324c4:	69fb      	ldr	r3, [r7, #28]
   324c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   324c8:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   324ca:	69fb      	ldr	r3, [r7, #28]
   324cc:	22d0      	movs	r2, #208	; 0xd0
   324ce:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   324d0:	002a      	movs	r2, r5
   324d2:	47a0      	blx	r4
   324d4:	0003      	movs	r3, r0
   324d6:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   324d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324da:	2b00      	cmp	r3, #0
   324dc:	da01      	bge.n	324e2 <_http_client_request+0x462>
				size = 0;
   324de:	2300      	movs	r3, #0
   324e0:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   324e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324e4:	220a      	movs	r2, #10
   324e6:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   324e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324ea:	220d      	movs	r2, #13
   324ec:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   324ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324f0:	3305      	adds	r3, #5
   324f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   324f4:	210d      	movs	r1, #13
   324f6:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   324f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324fa:	3306      	adds	r3, #6
   324fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   324fe:	210a      	movs	r1, #10
   32500:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   32502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32504:	2b00      	cmp	r3, #0
   32506:	db14      	blt.n	32532 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3250a:	3302      	adds	r3, #2
   3250c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3250e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32510:	4a9c      	ldr	r2, [pc, #624]	; (32784 <_http_client_request+0x704>)
   32512:	4013      	ands	r3, r2
   32514:	d504      	bpl.n	32520 <_http_client_request+0x4a0>
   32516:	3b01      	subs	r3, #1
   32518:	2210      	movs	r2, #16
   3251a:	4252      	negs	r2, r2
   3251c:	4313      	orrs	r3, r2
   3251e:	3301      	adds	r3, #1
   32520:	001a      	movs	r2, r3
   32522:	2318      	movs	r3, #24
   32524:	2118      	movs	r1, #24
   32526:	468c      	mov	ip, r1
   32528:	44bc      	add	ip, r7
   3252a:	4463      	add	r3, ip
   3252c:	5c9a      	ldrb	r2, [r3, r2]
   3252e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32530:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   32532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32534:	2b0f      	cmp	r3, #15
   32536:	dd19      	ble.n	3256c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   32538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3253a:	3301      	adds	r3, #1
   3253c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32540:	2b00      	cmp	r3, #0
   32542:	da00      	bge.n	32546 <_http_client_request+0x4c6>
   32544:	330f      	adds	r3, #15
   32546:	111b      	asrs	r3, r3, #4
   32548:	001a      	movs	r2, r3
   3254a:	4b8e      	ldr	r3, [pc, #568]	; (32784 <_http_client_request+0x704>)
   3254c:	4013      	ands	r3, r2
   3254e:	d504      	bpl.n	3255a <_http_client_request+0x4da>
   32550:	3b01      	subs	r3, #1
   32552:	2210      	movs	r2, #16
   32554:	4252      	negs	r2, r2
   32556:	4313      	orrs	r3, r2
   32558:	3301      	adds	r3, #1
   3255a:	001a      	movs	r2, r3
   3255c:	2318      	movs	r3, #24
   3255e:	2118      	movs	r1, #24
   32560:	468c      	mov	ip, r1
   32562:	44bc      	add	ip, r7
   32564:	4463      	add	r3, ip
   32566:	5c9a      	ldrb	r2, [r3, r2]
   32568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3256a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3256e:	2bff      	cmp	r3, #255	; 0xff
   32570:	dd18      	ble.n	325a4 <_http_client_request+0x524>
				ptr = buffer;
   32572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32574:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   32576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32578:	2b00      	cmp	r3, #0
   3257a:	da00      	bge.n	3257e <_http_client_request+0x4fe>
   3257c:	33ff      	adds	r3, #255	; 0xff
   3257e:	121b      	asrs	r3, r3, #8
   32580:	001a      	movs	r2, r3
   32582:	4b80      	ldr	r3, [pc, #512]	; (32784 <_http_client_request+0x704>)
   32584:	4013      	ands	r3, r2
   32586:	d504      	bpl.n	32592 <_http_client_request+0x512>
   32588:	3b01      	subs	r3, #1
   3258a:	2210      	movs	r2, #16
   3258c:	4252      	negs	r2, r2
   3258e:	4313      	orrs	r3, r2
   32590:	3301      	adds	r3, #1
   32592:	001a      	movs	r2, r3
   32594:	2318      	movs	r3, #24
   32596:	2118      	movs	r1, #24
   32598:	468c      	mov	ip, r1
   3259a:	44bc      	add	ip, r7
   3259c:	4463      	add	r3, ip
   3259e:	5c9a      	ldrb	r2, [r3, r2]
   325a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   325a2:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   325a4:	69fb      	ldr	r3, [r7, #28]
   325a6:	2000      	movs	r0, #0
   325a8:	5618      	ldrsb	r0, [r3, r0]
   325aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   325ac:	3303      	adds	r3, #3
   325ae:	001a      	movs	r2, r3
   325b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325b2:	1ad3      	subs	r3, r2, r3
   325b4:	b29a      	uxth	r2, r3
   325b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325b8:	b29b      	uxth	r3, r3
   325ba:	18d3      	adds	r3, r2, r3
   325bc:	b29b      	uxth	r3, r3
   325be:	3304      	adds	r3, #4
   325c0:	b29a      	uxth	r2, r3
   325c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
   325c4:	2300      	movs	r3, #0
   325c6:	4c70      	ldr	r4, [pc, #448]	; (32788 <_http_client_request+0x708>)
   325c8:	47a0      	blx	r4
   325ca:	0003      	movs	r3, r0
   325cc:	663b      	str	r3, [r7, #96]	; 0x60
   325ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   325d0:	2b00      	cmp	r3, #0
   325d2:	da07      	bge.n	325e4 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   325d4:	2305      	movs	r3, #5
   325d6:	425a      	negs	r2, r3
   325d8:	69fb      	ldr	r3, [r7, #28]
   325da:	0011      	movs	r1, r2
   325dc:	0018      	movs	r0, r3
   325de:	4b6b      	ldr	r3, [pc, #428]	; (3278c <_http_client_request+0x70c>)
   325e0:	4798      	blx	r3
				return;
   325e2:	e0e1      	b.n	327a8 <_http_client_request+0x728>
			module->req.sent_length += size;
   325e4:	69fb      	ldr	r3, [r7, #28]
   325e6:	22d0      	movs	r2, #208	; 0xd0
   325e8:	589a      	ldr	r2, [r3, r2]
   325ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325ec:	18d2      	adds	r2, r2, r3
   325ee:	69fb      	ldr	r3, [r7, #28]
   325f0:	21d0      	movs	r1, #208	; 0xd0
   325f2:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   325f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325f6:	2b00      	cmp	r3, #0
   325f8:	d000      	beq.n	325fc <_http_client_request+0x57c>
   325fa:	e0c9      	b.n	32790 <_http_client_request+0x710>
				if (module->req.entity.close) {
   325fc:	69fb      	ldr	r3, [r7, #28]
   325fe:	22c0      	movs	r2, #192	; 0xc0
   32600:	589b      	ldr	r3, [r3, r2]
   32602:	2b00      	cmp	r3, #0
   32604:	d007      	beq.n	32616 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   32606:	69fb      	ldr	r3, [r7, #28]
   32608:	22c0      	movs	r2, #192	; 0xc0
   3260a:	589b      	ldr	r3, [r3, r2]
   3260c:	69fa      	ldr	r2, [r7, #28]
   3260e:	21c4      	movs	r1, #196	; 0xc4
   32610:	5852      	ldr	r2, [r2, r1]
   32612:	0010      	movs	r0, r2
   32614:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32616:	69fb      	ldr	r3, [r7, #28]
   32618:	2202      	movs	r2, #2
   3261a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3261c:	69fb      	ldr	r3, [r7, #28]
   3261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32620:	2b00      	cmp	r3, #0
   32622:	d100      	bne.n	32626 <_http_client_request+0x5a6>
   32624:	e0b5      	b.n	32792 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32626:	69fb      	ldr	r3, [r7, #28]
   32628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3262a:	220c      	movs	r2, #12
   3262c:	2118      	movs	r1, #24
   3262e:	468c      	mov	ip, r1
   32630:	44bc      	add	ip, r7
   32632:	4462      	add	r2, ip
   32634:	69f8      	ldr	r0, [r7, #28]
   32636:	2101      	movs	r1, #1
   32638:	4798      	blx	r3
				break;
   3263a:	e0aa      	b.n	32792 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   3263c:	69fb      	ldr	r3, [r7, #28]
   3263e:	22cc      	movs	r2, #204	; 0xcc
   32640:	589b      	ldr	r3, [r3, r2]
   32642:	2b00      	cmp	r3, #0
   32644:	dc00      	bgt.n	32648 <_http_client_request+0x5c8>
   32646:	e07c      	b.n	32742 <_http_client_request+0x6c2>
   32648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3264a:	68db      	ldr	r3, [r3, #12]
   3264c:	2b00      	cmp	r3, #0
   3264e:	d100      	bne.n	32652 <_http_client_request+0x5d2>
   32650:	e077      	b.n	32742 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   32652:	69fb      	ldr	r3, [r7, #28]
   32654:	22d0      	movs	r2, #208	; 0xd0
   32656:	589a      	ldr	r2, [r3, r2]
   32658:	69fb      	ldr	r3, [r7, #28]
   3265a:	21cc      	movs	r1, #204	; 0xcc
   3265c:	585b      	ldr	r3, [r3, r1]
   3265e:	429a      	cmp	r2, r3
   32660:	db1f      	blt.n	326a2 <_http_client_request+0x622>
				if (module->req.entity.close) {
   32662:	69fb      	ldr	r3, [r7, #28]
   32664:	22c0      	movs	r2, #192	; 0xc0
   32666:	589b      	ldr	r3, [r3, r2]
   32668:	2b00      	cmp	r3, #0
   3266a:	d007      	beq.n	3267c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   3266c:	69fb      	ldr	r3, [r7, #28]
   3266e:	22c0      	movs	r2, #192	; 0xc0
   32670:	589b      	ldr	r3, [r3, r2]
   32672:	69fa      	ldr	r2, [r7, #28]
   32674:	21c4      	movs	r1, #196	; 0xc4
   32676:	5852      	ldr	r2, [r2, r1]
   32678:	0010      	movs	r0, r2
   3267a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3267c:	69fb      	ldr	r3, [r7, #28]
   3267e:	2202      	movs	r2, #2
   32680:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32682:	69fb      	ldr	r3, [r7, #28]
   32684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32686:	2b00      	cmp	r3, #0
   32688:	d100      	bne.n	3268c <_http_client_request+0x60c>
   3268a:	e084      	b.n	32796 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3268c:	69fb      	ldr	r3, [r7, #28]
   3268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32690:	220c      	movs	r2, #12
   32692:	2118      	movs	r1, #24
   32694:	468c      	mov	ip, r1
   32696:	44bc      	add	ip, r7
   32698:	4462      	add	r2, ip
   3269a:	69f8      	ldr	r0, [r7, #28]
   3269c:	2101      	movs	r1, #1
   3269e:	4798      	blx	r3
				break;
   326a0:	e079      	b.n	32796 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   326a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   326a4:	68dc      	ldr	r4, [r3, #12]
   326a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   326a8:	6958      	ldr	r0, [r3, #20]
   326aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   326ac:	69fb      	ldr	r3, [r7, #28]
   326ae:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   326b0:	69fb      	ldr	r3, [r7, #28]
   326b2:	22d0      	movs	r2, #208	; 0xd0
   326b4:	589b      	ldr	r3, [r3, r2]
   326b6:	002a      	movs	r2, r5
   326b8:	47a0      	blx	r4
   326ba:	0003      	movs	r3, r0
   326bc:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   326be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326c0:	2b00      	cmp	r3, #0
   326c2:	da0d      	bge.n	326e0 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   326c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326c6:	2b00      	cmp	r3, #0
   326c8:	d102      	bne.n	326d0 <_http_client_request+0x650>
   326ca:	234d      	movs	r3, #77	; 0x4d
   326cc:	425b      	negs	r3, r3
   326ce:	e001      	b.n	326d4 <_http_client_request+0x654>
   326d0:	2305      	movs	r3, #5
   326d2:	425b      	negs	r3, r3
   326d4:	69fa      	ldr	r2, [r7, #28]
   326d6:	0019      	movs	r1, r3
   326d8:	0010      	movs	r0, r2
   326da:	4b2c      	ldr	r3, [pc, #176]	; (3278c <_http_client_request+0x70c>)
   326dc:	4798      	blx	r3
			if (size < 0) {
   326de:	e057      	b.n	32790 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   326e0:	69fb      	ldr	r3, [r7, #28]
   326e2:	22cc      	movs	r2, #204	; 0xcc
   326e4:	589a      	ldr	r2, [r3, r2]
   326e6:	69fb      	ldr	r3, [r7, #28]
   326e8:	21d0      	movs	r1, #208	; 0xd0
   326ea:	585b      	ldr	r3, [r3, r1]
   326ec:	1ad2      	subs	r2, r2, r3
   326ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326f0:	429a      	cmp	r2, r3
   326f2:	da07      	bge.n	32704 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   326f4:	69fb      	ldr	r3, [r7, #28]
   326f6:	22cc      	movs	r2, #204	; 0xcc
   326f8:	589a      	ldr	r2, [r3, r2]
   326fa:	69fb      	ldr	r3, [r7, #28]
   326fc:	21d0      	movs	r1, #208	; 0xd0
   326fe:	585b      	ldr	r3, [r3, r1]
   32700:	1ad3      	subs	r3, r2, r3
   32702:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   32704:	69fb      	ldr	r3, [r7, #28]
   32706:	2000      	movs	r0, #0
   32708:	5618      	ldrsb	r0, [r3, r0]
   3270a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3270c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3270e:	b29a      	uxth	r2, r3
   32710:	2300      	movs	r3, #0
   32712:	4c1d      	ldr	r4, [pc, #116]	; (32788 <_http_client_request+0x708>)
   32714:	47a0      	blx	r4
   32716:	0003      	movs	r3, r0
   32718:	663b      	str	r3, [r7, #96]	; 0x60
   3271a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   3271c:	2b00      	cmp	r3, #0
   3271e:	da07      	bge.n	32730 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32720:	2305      	movs	r3, #5
   32722:	425a      	negs	r2, r3
   32724:	69fb      	ldr	r3, [r7, #28]
   32726:	0011      	movs	r1, r2
   32728:	0018      	movs	r0, r3
   3272a:	4b18      	ldr	r3, [pc, #96]	; (3278c <_http_client_request+0x70c>)
   3272c:	4798      	blx	r3
					return;
   3272e:	e03b      	b.n	327a8 <_http_client_request+0x728>
				module->req.sent_length += size;
   32730:	69fb      	ldr	r3, [r7, #28]
   32732:	22d0      	movs	r2, #208	; 0xd0
   32734:	589a      	ldr	r2, [r3, r2]
   32736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32738:	18d2      	adds	r2, r2, r3
   3273a:	69fb      	ldr	r3, [r7, #28]
   3273c:	21d0      	movs	r1, #208	; 0xd0
   3273e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   32740:	e026      	b.n	32790 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   32742:	69fb      	ldr	r3, [r7, #28]
   32744:	2202      	movs	r2, #2
   32746:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   32748:	69fb      	ldr	r3, [r7, #28]
   3274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3274c:	2b00      	cmp	r3, #0
   3274e:	d024      	beq.n	3279a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32750:	69fb      	ldr	r3, [r7, #28]
   32752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32754:	220c      	movs	r2, #12
   32756:	2118      	movs	r1, #24
   32758:	468c      	mov	ip, r1
   3275a:	44bc      	add	ip, r7
   3275c:	4462      	add	r2, ip
   3275e:	69f8      	ldr	r0, [r7, #28]
   32760:	2101      	movs	r1, #1
   32762:	4798      	blx	r3
			break;
   32764:	e019      	b.n	3279a <_http_client_request+0x71a>
   32766:	46c0      	nop			; (mov r8, r8)
   32768:	0003b78c 	.word	0x0003b78c
   3276c:	000364c1 	.word	0x000364c1
   32770:	0003b790 	.word	0x0003b790
   32774:	00032fe1 	.word	0x00032fe1
   32778:	0003659f 	.word	0x0003659f
   3277c:	0003b718 	.word	0x0003b718
   32780:	0003301d 	.word	0x0003301d
   32784:	8000000f 	.word	0x8000000f
   32788:	00026439 	.word	0x00026439
   3278c:	00031f2d 	.word	0x00031f2d
		break;
   32790:	e004      	b.n	3279c <_http_client_request+0x71c>
				break;
   32792:	46c0      	nop			; (mov r8, r8)
   32794:	e002      	b.n	3279c <_http_client_request+0x71c>
				break;
   32796:	46c0      	nop			; (mov r8, r8)
   32798:	e000      	b.n	3279c <_http_client_request+0x71c>
			break;
   3279a:	46c0      	nop			; (mov r8, r8)
   3279c:	69bb      	ldr	r3, [r7, #24]
   3279e:	469d      	mov	sp, r3
   327a0:	e004      	b.n	327ac <_http_client_request+0x72c>
		return;
   327a2:	46c0      	nop			; (mov r8, r8)
   327a4:	e000      	b.n	327a8 <_http_client_request+0x728>
		return;
   327a6:	46c0      	nop			; (mov r8, r8)
   327a8:	69bb      	ldr	r3, [r7, #24]
   327aa:	469d      	mov	sp, r3
	}
}
   327ac:	46bd      	mov	sp, r7
   327ae:	b01e      	add	sp, #120	; 0x78
   327b0:	bc04      	pop	{r2}
   327b2:	4690      	mov	r8, r2
   327b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   327b6:	46c0      	nop			; (mov r8, r8)

000327b8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   327b8:	b590      	push	{r4, r7, lr}
   327ba:	b083      	sub	sp, #12
   327bc:	af00      	add	r7, sp, #0
   327be:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   327c0:	687b      	ldr	r3, [r7, #4]
   327c2:	2b00      	cmp	r3, #0
   327c4:	d021      	beq.n	3280a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   327c6:	687b      	ldr	r3, [r7, #4]
   327c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   327ca:	687b      	ldr	r3, [r7, #4]
   327cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   327ce:	429a      	cmp	r2, r3
   327d0:	d307      	bcc.n	327e2 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   327d2:	238b      	movs	r3, #139	; 0x8b
   327d4:	425a      	negs	r2, r3
   327d6:	687b      	ldr	r3, [r7, #4]
   327d8:	0011      	movs	r1, r2
   327da:	0018      	movs	r0, r3
   327dc:	4b0d      	ldr	r3, [pc, #52]	; (32814 <_http_client_recv_packet+0x5c>)
   327de:	4798      	blx	r3
		return;
   327e0:	e014      	b.n	3280c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   327e2:	687b      	ldr	r3, [r7, #4]
   327e4:	2000      	movs	r0, #0
   327e6:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   327e8:	687b      	ldr	r3, [r7, #4]
   327ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   327ec:	687b      	ldr	r3, [r7, #4]
   327ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   327f0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   327f2:	687b      	ldr	r3, [r7, #4]
   327f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   327f6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   327f8:	687b      	ldr	r3, [r7, #4]
   327fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   327fc:	b29b      	uxth	r3, r3
   327fe:	1ad3      	subs	r3, r2, r3
   32800:	b29a      	uxth	r2, r3
   32802:	2300      	movs	r3, #0
   32804:	4c04      	ldr	r4, [pc, #16]	; (32818 <_http_client_recv_packet+0x60>)
   32806:	47a0      	blx	r4
   32808:	e000      	b.n	3280c <_http_client_recv_packet+0x54>
		return;
   3280a:	46c0      	nop			; (mov r8, r8)
}
   3280c:	46bd      	mov	sp, r7
   3280e:	b003      	add	sp, #12
   32810:	bd90      	pop	{r4, r7, pc}
   32812:	46c0      	nop			; (mov r8, r8)
   32814:	00031f2d 	.word	0x00031f2d
   32818:	0002659d 	.word	0x0002659d

0003281c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   3281c:	b580      	push	{r7, lr}
   3281e:	b082      	sub	sp, #8
   32820:	af00      	add	r7, sp, #0
   32822:	6078      	str	r0, [r7, #4]
   32824:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   32826:	687b      	ldr	r3, [r7, #4]
   32828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3282a:	683b      	ldr	r3, [r7, #0]
   3282c:	18d2      	adds	r2, r2, r3
   3282e:	687b      	ldr	r3, [r7, #4]
   32830:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   32832:	687b      	ldr	r3, [r7, #4]
   32834:	2258      	movs	r2, #88	; 0x58
   32836:	5a9b      	ldrh	r3, [r3, r2]
   32838:	2b00      	cmp	r3, #0
   3283a:	d007      	beq.n	3284c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   3283c:	687b      	ldr	r3, [r7, #4]
   3283e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32840:	687b      	ldr	r3, [r7, #4]
   32842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32844:	0019      	movs	r1, r3
   32846:	0010      	movs	r0, r2
   32848:	4b06      	ldr	r3, [pc, #24]	; (32864 <_http_client_recved_packet+0x48>)
   3284a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   3284c:	46c0      	nop			; (mov r8, r8)
   3284e:	687b      	ldr	r3, [r7, #4]
   32850:	0018      	movs	r0, r3
   32852:	4b05      	ldr	r3, [pc, #20]	; (32868 <_http_client_recved_packet+0x4c>)
   32854:	4798      	blx	r3
   32856:	1e03      	subs	r3, r0, #0
   32858:	d1f9      	bne.n	3284e <_http_client_recved_packet+0x32>
}
   3285a:	46c0      	nop			; (mov r8, r8)
   3285c:	46bd      	mov	sp, r7
   3285e:	b002      	add	sp, #8
   32860:	bd80      	pop	{r7, pc}
   32862:	46c0      	nop			; (mov r8, r8)
   32864:	000332d9 	.word	0x000332d9
   32868:	0003286d 	.word	0x0003286d

0003286c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   3286c:	b580      	push	{r7, lr}
   3286e:	b082      	sub	sp, #8
   32870:	af00      	add	r7, sp, #0
   32872:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32874:	687b      	ldr	r3, [r7, #4]
   32876:	22d8      	movs	r2, #216	; 0xd8
   32878:	589b      	ldr	r3, [r3, r2]
   3287a:	2b00      	cmp	r3, #0
   3287c:	d002      	beq.n	32884 <_http_client_handle_response+0x18>
   3287e:	2b01      	cmp	r3, #1
   32880:	d006      	beq.n	32890 <_http_client_handle_response+0x24>
   32882:	e00b      	b.n	3289c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32884:	687b      	ldr	r3, [r7, #4]
   32886:	0018      	movs	r0, r3
   32888:	4b07      	ldr	r3, [pc, #28]	; (328a8 <_http_client_handle_response+0x3c>)
   3288a:	4798      	blx	r3
   3288c:	0003      	movs	r3, r0
   3288e:	e006      	b.n	3289e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32890:	687b      	ldr	r3, [r7, #4]
   32892:	0018      	movs	r0, r3
   32894:	4b05      	ldr	r3, [pc, #20]	; (328ac <_http_client_handle_response+0x40>)
   32896:	4798      	blx	r3
   32898:	0003      	movs	r3, r0
   3289a:	e000      	b.n	3289e <_http_client_handle_response+0x32>
	}
	return 0;
   3289c:	2300      	movs	r3, #0
}
   3289e:	0018      	movs	r0, r3
   328a0:	46bd      	mov	sp, r7
   328a2:	b002      	add	sp, #8
   328a4:	bd80      	pop	{r7, pc}
   328a6:	46c0      	nop			; (mov r8, r8)
   328a8:	000328b1 	.word	0x000328b1
   328ac:	00032d69 	.word	0x00032d69

000328b0 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   328b0:	b590      	push	{r4, r7, lr}
   328b2:	b08b      	sub	sp, #44	; 0x2c
   328b4:	af00      	add	r7, sp, #0
   328b6:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   328b8:	687b      	ldr	r3, [r7, #4]
   328ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   328bc:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   328be:	4b9a      	ldr	r3, [pc, #616]	; (32b28 <_http_client_handle_header+0x278>)
   328c0:	681a      	ldr	r2, [r3, #0]
   328c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   328c4:	0011      	movs	r1, r2
   328c6:	0018      	movs	r0, r3
   328c8:	4b98      	ldr	r3, [pc, #608]	; (32b2c <_http_client_handle_header+0x27c>)
   328ca:	4798      	blx	r3
   328cc:	0003      	movs	r3, r0
   328ce:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   328d0:	69bb      	ldr	r3, [r7, #24]
   328d2:	2b00      	cmp	r3, #0
   328d4:	d007      	beq.n	328e6 <_http_client_handle_header+0x36>
   328d6:	687b      	ldr	r3, [r7, #4]
   328d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   328da:	687b      	ldr	r3, [r7, #4]
   328dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   328de:	18d2      	adds	r2, r2, r3
   328e0:	69bb      	ldr	r3, [r7, #24]
   328e2:	429a      	cmp	r2, r3
   328e4:	d807      	bhi.n	328f6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   328e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   328e8:	687b      	ldr	r3, [r7, #4]
   328ea:	0011      	movs	r1, r2
   328ec:	0018      	movs	r0, r3
   328ee:	4b90      	ldr	r3, [pc, #576]	; (32b30 <_http_client_handle_header+0x280>)
   328f0:	4798      	blx	r3
			return 0;
   328f2:	2300      	movs	r3, #0
   328f4:	e114      	b.n	32b20 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   328f6:	4b8c      	ldr	r3, [pc, #560]	; (32b28 <_http_client_handle_header+0x278>)
   328f8:	681c      	ldr	r4, [r3, #0]
   328fa:	4b8b      	ldr	r3, [pc, #556]	; (32b28 <_http_client_handle_header+0x278>)
   328fc:	681b      	ldr	r3, [r3, #0]
   328fe:	0018      	movs	r0, r3
   32900:	4b8c      	ldr	r3, [pc, #560]	; (32b34 <_http_client_handle_header+0x284>)
   32902:	4798      	blx	r3
   32904:	0002      	movs	r2, r0
   32906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32908:	0021      	movs	r1, r4
   3290a:	0018      	movs	r0, r3
   3290c:	4b8a      	ldr	r3, [pc, #552]	; (32b38 <_http_client_handle_header+0x288>)
   3290e:	4798      	blx	r3
   32910:	1e03      	subs	r3, r0, #0
   32912:	d15d      	bne.n	329d0 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   32914:	4b84      	ldr	r3, [pc, #528]	; (32b28 <_http_client_handle_header+0x278>)
   32916:	681b      	ldr	r3, [r3, #0]
   32918:	0018      	movs	r0, r3
   3291a:	4b86      	ldr	r3, [pc, #536]	; (32b34 <_http_client_handle_header+0x284>)
   3291c:	4798      	blx	r3
   3291e:	0002      	movs	r2, r0
   32920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32922:	189a      	adds	r2, r3, r2
   32924:	687b      	ldr	r3, [r7, #4]
   32926:	0011      	movs	r1, r2
   32928:	0018      	movs	r0, r3
   3292a:	4b81      	ldr	r3, [pc, #516]	; (32b30 <_http_client_handle_header+0x280>)
   3292c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3292e:	687b      	ldr	r3, [r7, #4]
   32930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32932:	2b00      	cmp	r3, #0
   32934:	d046      	beq.n	329c4 <_http_client_handle_header+0x114>
   32936:	687b      	ldr	r3, [r7, #4]
   32938:	22e4      	movs	r2, #228	; 0xe4
   3293a:	5a9b      	ldrh	r3, [r3, r2]
   3293c:	2b00      	cmp	r3, #0
   3293e:	d041      	beq.n	329c4 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32940:	687b      	ldr	r3, [r7, #4]
   32942:	22dc      	movs	r2, #220	; 0xdc
   32944:	589b      	ldr	r3, [r3, r2]
   32946:	2b00      	cmp	r3, #0
   32948:	da19      	bge.n	3297e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   3294a:	687b      	ldr	r3, [r7, #4]
   3294c:	22e4      	movs	r2, #228	; 0xe4
   3294e:	5a9a      	ldrh	r2, [r3, r2]
   32950:	230c      	movs	r3, #12
   32952:	18fb      	adds	r3, r7, r3
   32954:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   32956:	230c      	movs	r3, #12
   32958:	18fb      	adds	r3, r7, r3
   3295a:	2201      	movs	r2, #1
   3295c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3295e:	687b      	ldr	r3, [r7, #4]
   32960:	22e0      	movs	r2, #224	; 0xe0
   32962:	2100      	movs	r1, #0
   32964:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   32966:	230c      	movs	r3, #12
   32968:	18fb      	adds	r3, r7, r3
   3296a:	2200      	movs	r2, #0
   3296c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3296e:	687b      	ldr	r3, [r7, #4]
   32970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32972:	220c      	movs	r2, #12
   32974:	18ba      	adds	r2, r7, r2
   32976:	6878      	ldr	r0, [r7, #4]
   32978:	2102      	movs	r1, #2
   3297a:	4798      	blx	r3
   3297c:	e022      	b.n	329c4 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3297e:	687b      	ldr	r3, [r7, #4]
   32980:	22dc      	movs	r2, #220	; 0xdc
   32982:	589a      	ldr	r2, [r3, r2]
   32984:	687b      	ldr	r3, [r7, #4]
   32986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32988:	429a      	cmp	r2, r3
   3298a:	dd1b      	ble.n	329c4 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   3298c:	687b      	ldr	r3, [r7, #4]
   3298e:	22e4      	movs	r2, #228	; 0xe4
   32990:	5a9a      	ldrh	r2, [r3, r2]
   32992:	230c      	movs	r3, #12
   32994:	18fb      	adds	r3, r7, r3
   32996:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32998:	687b      	ldr	r3, [r7, #4]
   3299a:	22dc      	movs	r2, #220	; 0xdc
   3299c:	589b      	ldr	r3, [r3, r2]
   3299e:	001a      	movs	r2, r3
   329a0:	230c      	movs	r3, #12
   329a2:	18fb      	adds	r3, r7, r3
   329a4:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   329a6:	230c      	movs	r3, #12
   329a8:	18fb      	adds	r3, r7, r3
   329aa:	2200      	movs	r2, #0
   329ac:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   329ae:	687b      	ldr	r3, [r7, #4]
   329b0:	22e0      	movs	r2, #224	; 0xe0
   329b2:	2100      	movs	r1, #0
   329b4:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   329b6:	687b      	ldr	r3, [r7, #4]
   329b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   329ba:	220c      	movs	r2, #12
   329bc:	18ba      	adds	r2, r7, r2
   329be:	6878      	ldr	r0, [r7, #4]
   329c0:	2102      	movs	r1, #2
   329c2:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   329c4:	687b      	ldr	r3, [r7, #4]
   329c6:	22d8      	movs	r2, #216	; 0xd8
   329c8:	2101      	movs	r1, #1
   329ca:	5099      	str	r1, [r3, r2]
			return 1;
   329cc:	2301      	movs	r3, #1
   329ce:	e0a7      	b.n	32b20 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   329d0:	495a      	ldr	r1, [pc, #360]	; (32b3c <_http_client_handle_header+0x28c>)
   329d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329d4:	2210      	movs	r2, #16
   329d6:	0018      	movs	r0, r3
   329d8:	4b57      	ldr	r3, [pc, #348]	; (32b38 <_http_client_handle_header+0x288>)
   329da:	4798      	blx	r3
   329dc:	1e03      	subs	r3, r0, #0
   329de:	d109      	bne.n	329f4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   329e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329e2:	3310      	adds	r3, #16
   329e4:	0018      	movs	r0, r3
   329e6:	4b56      	ldr	r3, [pc, #344]	; (32b40 <_http_client_handle_header+0x290>)
   329e8:	4798      	blx	r3
   329ea:	0001      	movs	r1, r0
   329ec:	687b      	ldr	r3, [r7, #4]
   329ee:	22dc      	movs	r2, #220	; 0xdc
   329f0:	5099      	str	r1, [r3, r2]
   329f2:	e08b      	b.n	32b0c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   329f4:	4953      	ldr	r1, [pc, #332]	; (32b44 <_http_client_handle_header+0x294>)
   329f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329f8:	2213      	movs	r2, #19
   329fa:	0018      	movs	r0, r3
   329fc:	4b4e      	ldr	r3, [pc, #312]	; (32b38 <_http_client_handle_header+0x288>)
   329fe:	4798      	blx	r3
   32a00:	1e03      	subs	r3, r0, #0
   32a02:	d127      	bne.n	32a54 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a06:	3313      	adds	r3, #19
   32a08:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a0a:	e01e      	b.n	32a4a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32a0c:	6a3b      	ldr	r3, [r7, #32]
   32a0e:	781b      	ldrb	r3, [r3, #0]
   32a10:	2b20      	cmp	r3, #32
   32a12:	d103      	bne.n	32a1c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a14:	6a3b      	ldr	r3, [r7, #32]
   32a16:	3301      	adds	r3, #1
   32a18:	623b      	str	r3, [r7, #32]
   32a1a:	e016      	b.n	32a4a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32a1c:	6a3b      	ldr	r3, [r7, #32]
   32a1e:	781b      	ldrb	r3, [r3, #0]
   32a20:	2b43      	cmp	r3, #67	; 0x43
   32a22:	d003      	beq.n	32a2c <_http_client_handle_header+0x17c>
   32a24:	6a3b      	ldr	r3, [r7, #32]
   32a26:	781b      	ldrb	r3, [r3, #0]
   32a28:	2b63      	cmp	r3, #99	; 0x63
   32a2a:	d105      	bne.n	32a38 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32a2c:	687b      	ldr	r3, [r7, #4]
   32a2e:	21cc      	movs	r1, #204	; 0xcc
   32a30:	2201      	movs	r2, #1
   32a32:	4252      	negs	r2, r2
   32a34:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32a36:	e069      	b.n	32b0c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32a38:	2386      	movs	r3, #134	; 0x86
   32a3a:	425a      	negs	r2, r3
   32a3c:	687b      	ldr	r3, [r7, #4]
   32a3e:	0011      	movs	r1, r2
   32a40:	0018      	movs	r0, r3
   32a42:	4b41      	ldr	r3, [pc, #260]	; (32b48 <_http_client_handle_header+0x298>)
   32a44:	4798      	blx	r3
					return 0;
   32a46:	2300      	movs	r3, #0
   32a48:	e06a      	b.n	32b20 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a4a:	69ba      	ldr	r2, [r7, #24]
   32a4c:	6a3b      	ldr	r3, [r7, #32]
   32a4e:	429a      	cmp	r2, r3
   32a50:	d8dc      	bhi.n	32a0c <_http_client_handle_header+0x15c>
   32a52:	e05b      	b.n	32b0c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32a54:	493d      	ldr	r1, [pc, #244]	; (32b4c <_http_client_handle_header+0x29c>)
   32a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a58:	220c      	movs	r2, #12
   32a5a:	0018      	movs	r0, r3
   32a5c:	4b36      	ldr	r3, [pc, #216]	; (32b38 <_http_client_handle_header+0x288>)
   32a5e:	4798      	blx	r3
   32a60:	1e03      	subs	r3, r0, #0
   32a62:	d126      	bne.n	32ab2 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a66:	330c      	adds	r3, #12
   32a68:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a6a:	e01d      	b.n	32aa8 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32a6c:	69fb      	ldr	r3, [r7, #28]
   32a6e:	781b      	ldrb	r3, [r3, #0]
   32a70:	2b20      	cmp	r3, #32
   32a72:	d103      	bne.n	32a7c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a74:	69fb      	ldr	r3, [r7, #28]
   32a76:	3301      	adds	r3, #1
   32a78:	61fb      	str	r3, [r7, #28]
   32a7a:	e015      	b.n	32aa8 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32a7c:	69fb      	ldr	r3, [r7, #28]
   32a7e:	781b      	ldrb	r3, [r3, #0]
   32a80:	2b4b      	cmp	r3, #75	; 0x4b
   32a82:	d003      	beq.n	32a8c <_http_client_handle_header+0x1dc>
   32a84:	69fb      	ldr	r3, [r7, #28]
   32a86:	781b      	ldrb	r3, [r3, #0]
   32a88:	2b6b      	cmp	r3, #107	; 0x6b
   32a8a:	d106      	bne.n	32a9a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32a8c:	687b      	ldr	r3, [r7, #4]
   32a8e:	2241      	movs	r2, #65	; 0x41
   32a90:	5c99      	ldrb	r1, [r3, r2]
   32a92:	2002      	movs	r0, #2
   32a94:	4301      	orrs	r1, r0
   32a96:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32a98:	e038      	b.n	32b0c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32a9a:	687b      	ldr	r3, [r7, #4]
   32a9c:	2241      	movs	r2, #65	; 0x41
   32a9e:	5c99      	ldrb	r1, [r3, r2]
   32aa0:	2002      	movs	r0, #2
   32aa2:	4381      	bics	r1, r0
   32aa4:	5499      	strb	r1, [r3, r2]
				break;
   32aa6:	e031      	b.n	32b0c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32aa8:	69ba      	ldr	r2, [r7, #24]
   32aaa:	69fb      	ldr	r3, [r7, #28]
   32aac:	429a      	cmp	r2, r3
   32aae:	d8dd      	bhi.n	32a6c <_http_client_handle_header+0x1bc>
   32ab0:	e02c      	b.n	32b0c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32ab2:	4927      	ldr	r1, [pc, #156]	; (32b50 <_http_client_handle_header+0x2a0>)
   32ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ab6:	2205      	movs	r2, #5
   32ab8:	0018      	movs	r0, r3
   32aba:	4b1f      	ldr	r3, [pc, #124]	; (32b38 <_http_client_handle_header+0x288>)
   32abc:	4798      	blx	r3
   32abe:	1e03      	subs	r3, r0, #0
   32ac0:	d124      	bne.n	32b0c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ac4:	3309      	adds	r3, #9
   32ac6:	0018      	movs	r0, r3
   32ac8:	4b1d      	ldr	r3, [pc, #116]	; (32b40 <_http_client_handle_header+0x290>)
   32aca:	4798      	blx	r3
   32acc:	0003      	movs	r3, r0
   32ace:	b299      	uxth	r1, r3
   32ad0:	687b      	ldr	r3, [r7, #4]
   32ad2:	22e4      	movs	r2, #228	; 0xe4
   32ad4:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32ad6:	687b      	ldr	r3, [r7, #4]
   32ad8:	22dc      	movs	r2, #220	; 0xdc
   32ada:	2100      	movs	r1, #0
   32adc:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ae0:	3305      	adds	r3, #5
   32ae2:	781b      	ldrb	r3, [r3, #0]
   32ae4:	2b31      	cmp	r3, #49	; 0x31
   32ae6:	d804      	bhi.n	32af2 <_http_client_handle_header+0x242>
   32ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32aea:	3307      	adds	r3, #7
   32aec:	781b      	ldrb	r3, [r3, #0]
   32aee:	2b30      	cmp	r3, #48	; 0x30
   32af0:	d906      	bls.n	32b00 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32af2:	687b      	ldr	r3, [r7, #4]
   32af4:	2241      	movs	r2, #65	; 0x41
   32af6:	5c99      	ldrb	r1, [r3, r2]
   32af8:	2002      	movs	r0, #2
   32afa:	4301      	orrs	r1, r0
   32afc:	5499      	strb	r1, [r3, r2]
   32afe:	e005      	b.n	32b0c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32b00:	687b      	ldr	r3, [r7, #4]
   32b02:	2241      	movs	r2, #65	; 0x41
   32b04:	5c99      	ldrb	r1, [r3, r2]
   32b06:	2002      	movs	r0, #2
   32b08:	4381      	bics	r1, r0
   32b0a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32b0c:	4b06      	ldr	r3, [pc, #24]	; (32b28 <_http_client_handle_header+0x278>)
   32b0e:	681b      	ldr	r3, [r3, #0]
   32b10:	0018      	movs	r0, r3
   32b12:	4b08      	ldr	r3, [pc, #32]	; (32b34 <_http_client_handle_header+0x284>)
   32b14:	4798      	blx	r3
   32b16:	0002      	movs	r2, r0
   32b18:	69bb      	ldr	r3, [r7, #24]
   32b1a:	189b      	adds	r3, r3, r2
   32b1c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32b1e:	e6ce      	b.n	328be <_http_client_handle_header+0xe>
	}
}
   32b20:	0018      	movs	r0, r3
   32b22:	46bd      	mov	sp, r7
   32b24:	b00b      	add	sp, #44	; 0x2c
   32b26:	bd90      	pop	{r4, r7, pc}
   32b28:	2000012c 	.word	0x2000012c
   32b2c:	0003661d 	.word	0x0003661d
   32b30:	00032f15 	.word	0x00032f15
   32b34:	0003659f 	.word	0x0003659f
   32b38:	000365ad 	.word	0x000365ad
   32b3c:	0003b790 	.word	0x0003b790
   32b40:	00036151 	.word	0x00036151
   32b44:	0003b7b4 	.word	0x0003b7b4
   32b48:	00031f2d 	.word	0x00031f2d
   32b4c:	0003b7c8 	.word	0x0003b7c8
   32b50:	0003b7d8 	.word	0x0003b7d8

00032b54 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32b54:	b580      	push	{r7, lr}
   32b56:	b088      	sub	sp, #32
   32b58:	af00      	add	r7, sp, #0
   32b5a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32b5c:	687b      	ldr	r3, [r7, #4]
   32b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32b60:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32b62:	2300      	movs	r3, #0
   32b64:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32b66:	687b      	ldr	r3, [r7, #4]
   32b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32b6a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32b6c:	687b      	ldr	r3, [r7, #4]
   32b6e:	22e0      	movs	r2, #224	; 0xe0
   32b70:	589b      	ldr	r3, [r3, r2]
   32b72:	2b00      	cmp	r3, #0
   32b74:	db71      	blt.n	32c5a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32b76:	687b      	ldr	r3, [r7, #4]
   32b78:	22e0      	movs	r2, #224	; 0xe0
   32b7a:	589b      	ldr	r3, [r3, r2]
   32b7c:	2b00      	cmp	r3, #0
   32b7e:	d134      	bne.n	32bea <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32b80:	687b      	ldr	r3, [r7, #4]
   32b82:	22d8      	movs	r2, #216	; 0xd8
   32b84:	2100      	movs	r1, #0
   32b86:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32b88:	687b      	ldr	r3, [r7, #4]
   32b8a:	22e4      	movs	r2, #228	; 0xe4
   32b8c:	2100      	movs	r1, #0
   32b8e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32b90:	2308      	movs	r3, #8
   32b92:	18fb      	adds	r3, r7, r3
   32b94:	2201      	movs	r2, #1
   32b96:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32b98:	2308      	movs	r3, #8
   32b9a:	18fb      	adds	r3, r7, r3
   32b9c:	2200      	movs	r2, #0
   32b9e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32ba0:	2308      	movs	r3, #8
   32ba2:	18fb      	adds	r3, r7, r3
   32ba4:	2200      	movs	r2, #0
   32ba6:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32ba8:	687b      	ldr	r3, [r7, #4]
   32baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32bac:	2b00      	cmp	r3, #0
   32bae:	d006      	beq.n	32bbe <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32bb0:	687b      	ldr	r3, [r7, #4]
   32bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32bb4:	2208      	movs	r2, #8
   32bb6:	18ba      	adds	r2, r7, r2
   32bb8:	6878      	ldr	r0, [r7, #4]
   32bba:	2103      	movs	r1, #3
   32bbc:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32bbe:	687b      	ldr	r3, [r7, #4]
   32bc0:	2241      	movs	r2, #65	; 0x41
   32bc2:	5c9b      	ldrb	r3, [r3, r2]
   32bc4:	2202      	movs	r2, #2
   32bc6:	4013      	ands	r3, r2
   32bc8:	b2db      	uxtb	r3, r3
   32bca:	2b00      	cmp	r3, #0
   32bcc:	d105      	bne.n	32bda <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32bce:	687b      	ldr	r3, [r7, #4]
   32bd0:	2100      	movs	r1, #0
   32bd2:	0018      	movs	r0, r3
   32bd4:	4b62      	ldr	r3, [pc, #392]	; (32d60 <_http_client_read_chuked_entity+0x20c>)
   32bd6:	4798      	blx	r3
					return;
   32bd8:	e0bf      	b.n	32d5a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32bda:	697b      	ldr	r3, [r7, #20]
   32bdc:	1c9a      	adds	r2, r3, #2
   32bde:	687b      	ldr	r3, [r7, #4]
   32be0:	0011      	movs	r1, r2
   32be2:	0018      	movs	r0, r3
   32be4:	4b5f      	ldr	r3, [pc, #380]	; (32d64 <_http_client_read_chuked_entity+0x210>)
   32be6:	4798      	blx	r3
   32be8:	e0b2      	b.n	32d50 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32bea:	687b      	ldr	r3, [r7, #4]
   32bec:	22e0      	movs	r2, #224	; 0xe0
   32bee:	589a      	ldr	r2, [r3, r2]
   32bf0:	69fb      	ldr	r3, [r7, #28]
   32bf2:	429a      	cmp	r2, r3
   32bf4:	dd00      	ble.n	32bf8 <_http_client_read_chuked_entity+0xa4>
   32bf6:	e0ab      	b.n	32d50 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32bf8:	687b      	ldr	r3, [r7, #4]
   32bfa:	22e0      	movs	r2, #224	; 0xe0
   32bfc:	589b      	ldr	r3, [r3, r2]
   32bfe:	001a      	movs	r2, r3
   32c00:	2308      	movs	r3, #8
   32c02:	18fb      	adds	r3, r7, r3
   32c04:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32c06:	2308      	movs	r3, #8
   32c08:	18fb      	adds	r3, r7, r3
   32c0a:	697a      	ldr	r2, [r7, #20]
   32c0c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32c0e:	2308      	movs	r3, #8
   32c10:	18fb      	adds	r3, r7, r3
   32c12:	2200      	movs	r2, #0
   32c14:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32c16:	687b      	ldr	r3, [r7, #4]
   32c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c1a:	2b00      	cmp	r3, #0
   32c1c:	d006      	beq.n	32c2c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32c1e:	687b      	ldr	r3, [r7, #4]
   32c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c22:	2208      	movs	r2, #8
   32c24:	18ba      	adds	r2, r7, r2
   32c26:	6878      	ldr	r0, [r7, #4]
   32c28:	2103      	movs	r1, #3
   32c2a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32c2c:	687b      	ldr	r3, [r7, #4]
   32c2e:	22e0      	movs	r2, #224	; 0xe0
   32c30:	589b      	ldr	r3, [r3, r2]
   32c32:	3302      	adds	r3, #2
   32c34:	697a      	ldr	r2, [r7, #20]
   32c36:	18d2      	adds	r2, r2, r3
   32c38:	687b      	ldr	r3, [r7, #4]
   32c3a:	0011      	movs	r1, r2
   32c3c:	0018      	movs	r0, r3
   32c3e:	4b49      	ldr	r3, [pc, #292]	; (32d64 <_http_client_read_chuked_entity+0x210>)
   32c40:	4798      	blx	r3
				length = (int)module->recved_size;
   32c42:	687b      	ldr	r3, [r7, #4]
   32c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32c46:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32c48:	687b      	ldr	r3, [r7, #4]
   32c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32c4c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32c4e:	687b      	ldr	r3, [r7, #4]
   32c50:	21e0      	movs	r1, #224	; 0xe0
   32c52:	2201      	movs	r2, #1
   32c54:	4252      	negs	r2, r2
   32c56:	505a      	str	r2, [r3, r1]
   32c58:	e07a      	b.n	32d50 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32c5a:	687b      	ldr	r3, [r7, #4]
   32c5c:	22e0      	movs	r2, #224	; 0xe0
   32c5e:	2100      	movs	r1, #0
   32c60:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32c62:	e05a      	b.n	32d1a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32c64:	697b      	ldr	r3, [r7, #20]
   32c66:	781b      	ldrb	r3, [r3, #0]
   32c68:	2b0a      	cmp	r3, #10
   32c6a:	d106      	bne.n	32c7a <_http_client_read_chuked_entity+0x126>
					buffer++;
   32c6c:	697b      	ldr	r3, [r7, #20]
   32c6e:	3301      	adds	r3, #1
   32c70:	617b      	str	r3, [r7, #20]
					length--;
   32c72:	69fb      	ldr	r3, [r7, #28]
   32c74:	3b01      	subs	r3, #1
   32c76:	61fb      	str	r3, [r7, #28]
					break;
   32c78:	e052      	b.n	32d20 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32c7a:	69bb      	ldr	r3, [r7, #24]
   32c7c:	2b00      	cmp	r3, #0
   32c7e:	d145      	bne.n	32d0c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32c80:	697b      	ldr	r3, [r7, #20]
   32c82:	781b      	ldrb	r3, [r3, #0]
   32c84:	2b2f      	cmp	r3, #47	; 0x2f
   32c86:	d910      	bls.n	32caa <_http_client_read_chuked_entity+0x156>
   32c88:	697b      	ldr	r3, [r7, #20]
   32c8a:	781b      	ldrb	r3, [r3, #0]
   32c8c:	2b39      	cmp	r3, #57	; 0x39
   32c8e:	d80c      	bhi.n	32caa <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32c90:	687b      	ldr	r3, [r7, #4]
   32c92:	22e0      	movs	r2, #224	; 0xe0
   32c94:	589b      	ldr	r3, [r3, r2]
   32c96:	011b      	lsls	r3, r3, #4
   32c98:	697a      	ldr	r2, [r7, #20]
   32c9a:	7812      	ldrb	r2, [r2, #0]
   32c9c:	189b      	adds	r3, r3, r2
   32c9e:	3b30      	subs	r3, #48	; 0x30
   32ca0:	001a      	movs	r2, r3
   32ca2:	687b      	ldr	r3, [r7, #4]
   32ca4:	21e0      	movs	r1, #224	; 0xe0
   32ca6:	505a      	str	r2, [r3, r1]
   32ca8:	e031      	b.n	32d0e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32caa:	697b      	ldr	r3, [r7, #20]
   32cac:	781b      	ldrb	r3, [r3, #0]
   32cae:	2b60      	cmp	r3, #96	; 0x60
   32cb0:	d910      	bls.n	32cd4 <_http_client_read_chuked_entity+0x180>
   32cb2:	697b      	ldr	r3, [r7, #20]
   32cb4:	781b      	ldrb	r3, [r3, #0]
   32cb6:	2b66      	cmp	r3, #102	; 0x66
   32cb8:	d80c      	bhi.n	32cd4 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32cba:	687b      	ldr	r3, [r7, #4]
   32cbc:	22e0      	movs	r2, #224	; 0xe0
   32cbe:	589b      	ldr	r3, [r3, r2]
   32cc0:	011b      	lsls	r3, r3, #4
   32cc2:	697a      	ldr	r2, [r7, #20]
   32cc4:	7812      	ldrb	r2, [r2, #0]
   32cc6:	189b      	adds	r3, r3, r2
   32cc8:	3b61      	subs	r3, #97	; 0x61
   32cca:	001a      	movs	r2, r3
   32ccc:	687b      	ldr	r3, [r7, #4]
   32cce:	21e0      	movs	r1, #224	; 0xe0
   32cd0:	505a      	str	r2, [r3, r1]
   32cd2:	e01c      	b.n	32d0e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32cd4:	697b      	ldr	r3, [r7, #20]
   32cd6:	781b      	ldrb	r3, [r3, #0]
   32cd8:	2b40      	cmp	r3, #64	; 0x40
   32cda:	d910      	bls.n	32cfe <_http_client_read_chuked_entity+0x1aa>
   32cdc:	697b      	ldr	r3, [r7, #20]
   32cde:	781b      	ldrb	r3, [r3, #0]
   32ce0:	2b46      	cmp	r3, #70	; 0x46
   32ce2:	d80c      	bhi.n	32cfe <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32ce4:	687b      	ldr	r3, [r7, #4]
   32ce6:	22e0      	movs	r2, #224	; 0xe0
   32ce8:	589b      	ldr	r3, [r3, r2]
   32cea:	011b      	lsls	r3, r3, #4
   32cec:	697a      	ldr	r2, [r7, #20]
   32cee:	7812      	ldrb	r2, [r2, #0]
   32cf0:	189b      	adds	r3, r3, r2
   32cf2:	3b41      	subs	r3, #65	; 0x41
   32cf4:	001a      	movs	r2, r3
   32cf6:	687b      	ldr	r3, [r7, #4]
   32cf8:	21e0      	movs	r1, #224	; 0xe0
   32cfa:	505a      	str	r2, [r3, r1]
   32cfc:	e007      	b.n	32d0e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32cfe:	697b      	ldr	r3, [r7, #20]
   32d00:	781b      	ldrb	r3, [r3, #0]
   32d02:	2b3b      	cmp	r3, #59	; 0x3b
   32d04:	d103      	bne.n	32d0e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32d06:	2301      	movs	r3, #1
   32d08:	61bb      	str	r3, [r7, #24]
   32d0a:	e000      	b.n	32d0e <_http_client_read_chuked_entity+0x1ba>
					continue;
   32d0c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32d0e:	697b      	ldr	r3, [r7, #20]
   32d10:	3301      	adds	r3, #1
   32d12:	617b      	str	r3, [r7, #20]
   32d14:	69fb      	ldr	r3, [r7, #28]
   32d16:	3b01      	subs	r3, #1
   32d18:	61fb      	str	r3, [r7, #28]
   32d1a:	69fb      	ldr	r3, [r7, #28]
   32d1c:	2b00      	cmp	r3, #0
   32d1e:	dca1      	bgt.n	32c64 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32d20:	687b      	ldr	r3, [r7, #4]
   32d22:	22e0      	movs	r2, #224	; 0xe0
   32d24:	589a      	ldr	r2, [r3, r2]
   32d26:	687b      	ldr	r3, [r7, #4]
   32d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d2a:	429a      	cmp	r2, r3
   32d2c:	dd07      	ble.n	32d3e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32d2e:	238b      	movs	r3, #139	; 0x8b
   32d30:	425a      	negs	r2, r3
   32d32:	687b      	ldr	r3, [r7, #4]
   32d34:	0011      	movs	r1, r2
   32d36:	0018      	movs	r0, r3
   32d38:	4b09      	ldr	r3, [pc, #36]	; (32d60 <_http_client_read_chuked_entity+0x20c>)
   32d3a:	4798      	blx	r3
				return;
   32d3c:	e00d      	b.n	32d5a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32d3e:	69fb      	ldr	r3, [r7, #28]
   32d40:	2b00      	cmp	r3, #0
   32d42:	d105      	bne.n	32d50 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32d44:	687b      	ldr	r3, [r7, #4]
   32d46:	21e0      	movs	r1, #224	; 0xe0
   32d48:	2201      	movs	r2, #1
   32d4a:	4252      	negs	r2, r2
   32d4c:	505a      	str	r2, [r3, r1]
				return;
   32d4e:	e004      	b.n	32d5a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32d50:	687b      	ldr	r3, [r7, #4]
   32d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d54:	2b00      	cmp	r3, #0
   32d56:	d000      	beq.n	32d5a <_http_client_read_chuked_entity+0x206>
   32d58:	e708      	b.n	32b6c <_http_client_read_chuked_entity+0x18>
}
   32d5a:	46bd      	mov	sp, r7
   32d5c:	b008      	add	sp, #32
   32d5e:	bd80      	pop	{r7, pc}
   32d60:	00031f2d 	.word	0x00031f2d
   32d64:	00032f15 	.word	0x00032f15

00032d68 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32d68:	b580      	push	{r7, lr}
   32d6a:	b086      	sub	sp, #24
   32d6c:	af00      	add	r7, sp, #0
   32d6e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32d70:	687b      	ldr	r3, [r7, #4]
   32d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d74:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32d76:	687b      	ldr	r3, [r7, #4]
   32d78:	22dc      	movs	r2, #220	; 0xdc
   32d7a:	589b      	ldr	r3, [r3, r2]
   32d7c:	2b00      	cmp	r3, #0
   32d7e:	db58      	blt.n	32e32 <_http_client_handle_entity+0xca>
   32d80:	687b      	ldr	r3, [r7, #4]
   32d82:	22dc      	movs	r2, #220	; 0xdc
   32d84:	589a      	ldr	r2, [r3, r2]
   32d86:	687b      	ldr	r3, [r7, #4]
   32d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d8a:	429a      	cmp	r2, r3
   32d8c:	dc51      	bgt.n	32e32 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d92:	0019      	movs	r1, r3
   32d94:	687b      	ldr	r3, [r7, #4]
   32d96:	22dc      	movs	r2, #220	; 0xdc
   32d98:	589b      	ldr	r3, [r3, r2]
   32d9a:	4299      	cmp	r1, r3
   32d9c:	da00      	bge.n	32da0 <_http_client_handle_entity+0x38>
   32d9e:	e0a9      	b.n	32ef4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32da0:	687b      	ldr	r3, [r7, #4]
   32da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32da4:	2b00      	cmp	r3, #0
   32da6:	d020      	beq.n	32dea <_http_client_handle_entity+0x82>
   32da8:	687b      	ldr	r3, [r7, #4]
   32daa:	22e4      	movs	r2, #228	; 0xe4
   32dac:	5a9b      	ldrh	r3, [r3, r2]
   32dae:	2b00      	cmp	r3, #0
   32db0:	d01b      	beq.n	32dea <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32db2:	687b      	ldr	r3, [r7, #4]
   32db4:	22e4      	movs	r2, #228	; 0xe4
   32db6:	5a9a      	ldrh	r2, [r3, r2]
   32db8:	2308      	movs	r3, #8
   32dba:	18fb      	adds	r3, r7, r3
   32dbc:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32dbe:	2308      	movs	r3, #8
   32dc0:	18fb      	adds	r3, r7, r3
   32dc2:	2200      	movs	r2, #0
   32dc4:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32dc6:	687b      	ldr	r3, [r7, #4]
   32dc8:	22dc      	movs	r2, #220	; 0xdc
   32dca:	589b      	ldr	r3, [r3, r2]
   32dcc:	001a      	movs	r2, r3
   32dce:	2308      	movs	r3, #8
   32dd0:	18fb      	adds	r3, r7, r3
   32dd2:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32dd4:	2308      	movs	r3, #8
   32dd6:	18fb      	adds	r3, r7, r3
   32dd8:	697a      	ldr	r2, [r7, #20]
   32dda:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32ddc:	687b      	ldr	r3, [r7, #4]
   32dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32de0:	2208      	movs	r2, #8
   32de2:	18ba      	adds	r2, r7, r2
   32de4:	6878      	ldr	r0, [r7, #4]
   32de6:	2102      	movs	r1, #2
   32de8:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32dea:	687b      	ldr	r3, [r7, #4]
   32dec:	22d8      	movs	r2, #216	; 0xd8
   32dee:	2100      	movs	r1, #0
   32df0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32df2:	687b      	ldr	r3, [r7, #4]
   32df4:	22e4      	movs	r2, #228	; 0xe4
   32df6:	2100      	movs	r1, #0
   32df8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32dfa:	687b      	ldr	r3, [r7, #4]
   32dfc:	2241      	movs	r2, #65	; 0x41
   32dfe:	5c9b      	ldrb	r3, [r3, r2]
   32e00:	2202      	movs	r2, #2
   32e02:	4013      	ands	r3, r2
   32e04:	b2db      	uxtb	r3, r3
   32e06:	2b00      	cmp	r3, #0
   32e08:	d105      	bne.n	32e16 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32e0a:	687b      	ldr	r3, [r7, #4]
   32e0c:	2100      	movs	r1, #0
   32e0e:	0018      	movs	r0, r3
   32e10:	4b3b      	ldr	r3, [pc, #236]	; (32f00 <_http_client_handle_entity+0x198>)
   32e12:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32e14:	e06e      	b.n	32ef4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32e16:	687b      	ldr	r3, [r7, #4]
   32e18:	22dc      	movs	r2, #220	; 0xdc
   32e1a:	589b      	ldr	r3, [r3, r2]
   32e1c:	001a      	movs	r2, r3
   32e1e:	697b      	ldr	r3, [r7, #20]
   32e20:	189a      	adds	r2, r3, r2
   32e22:	687b      	ldr	r3, [r7, #4]
   32e24:	0011      	movs	r1, r2
   32e26:	0018      	movs	r0, r3
   32e28:	4b36      	ldr	r3, [pc, #216]	; (32f04 <_http_client_handle_entity+0x19c>)
   32e2a:	4798      	blx	r3
				return module->recved_size;
   32e2c:	687b      	ldr	r3, [r7, #4]
   32e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e30:	e061      	b.n	32ef6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32e32:	687b      	ldr	r3, [r7, #4]
   32e34:	22dc      	movs	r2, #220	; 0xdc
   32e36:	589b      	ldr	r3, [r3, r2]
   32e38:	2b00      	cmp	r3, #0
   32e3a:	db57      	blt.n	32eec <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32e3c:	687b      	ldr	r3, [r7, #4]
   32e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32e40:	2308      	movs	r3, #8
   32e42:	18fb      	adds	r3, r7, r3
   32e44:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32e46:	2308      	movs	r3, #8
   32e48:	18fb      	adds	r3, r7, r3
   32e4a:	697a      	ldr	r2, [r7, #20]
   32e4c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32e4e:	687b      	ldr	r3, [r7, #4]
   32e50:	22e0      	movs	r2, #224	; 0xe0
   32e52:	589a      	ldr	r2, [r3, r2]
   32e54:	687b      	ldr	r3, [r7, #4]
   32e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e58:	18d2      	adds	r2, r2, r3
   32e5a:	687b      	ldr	r3, [r7, #4]
   32e5c:	21e0      	movs	r1, #224	; 0xe0
   32e5e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32e60:	687b      	ldr	r3, [r7, #4]
   32e62:	22dc      	movs	r2, #220	; 0xdc
   32e64:	589a      	ldr	r2, [r3, r2]
   32e66:	687b      	ldr	r3, [r7, #4]
   32e68:	21e0      	movs	r1, #224	; 0xe0
   32e6a:	585b      	ldr	r3, [r3, r1]
   32e6c:	429a      	cmp	r2, r3
   32e6e:	dc0c      	bgt.n	32e8a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32e70:	687b      	ldr	r3, [r7, #4]
   32e72:	22d8      	movs	r2, #216	; 0xd8
   32e74:	2100      	movs	r1, #0
   32e76:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32e78:	687b      	ldr	r3, [r7, #4]
   32e7a:	22e4      	movs	r2, #228	; 0xe4
   32e7c:	2100      	movs	r1, #0
   32e7e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32e80:	2308      	movs	r3, #8
   32e82:	18fb      	adds	r3, r7, r3
   32e84:	2201      	movs	r2, #1
   32e86:	721a      	strb	r2, [r3, #8]
   32e88:	e003      	b.n	32e92 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32e8a:	2308      	movs	r3, #8
   32e8c:	18fb      	adds	r3, r7, r3
   32e8e:	2200      	movs	r2, #0
   32e90:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32e92:	687b      	ldr	r3, [r7, #4]
   32e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e96:	2b00      	cmp	r3, #0
   32e98:	d006      	beq.n	32ea8 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32e9a:	687b      	ldr	r3, [r7, #4]
   32e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e9e:	2208      	movs	r2, #8
   32ea0:	18ba      	adds	r2, r7, r2
   32ea2:	6878      	ldr	r0, [r7, #4]
   32ea4:	2103      	movs	r1, #3
   32ea6:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32ea8:	2308      	movs	r3, #8
   32eaa:	18fb      	adds	r3, r7, r3
   32eac:	7a1b      	ldrb	r3, [r3, #8]
   32eae:	2b01      	cmp	r3, #1
   32eb0:	d112      	bne.n	32ed8 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32eb2:	687b      	ldr	r3, [r7, #4]
   32eb4:	2241      	movs	r2, #65	; 0x41
   32eb6:	5c9b      	ldrb	r3, [r3, r2]
   32eb8:	2202      	movs	r2, #2
   32eba:	4013      	ands	r3, r2
   32ebc:	b2db      	uxtb	r3, r3
   32ebe:	2b00      	cmp	r3, #0
   32ec0:	d10a      	bne.n	32ed8 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32ec2:	4b11      	ldr	r3, [pc, #68]	; (32f08 <_http_client_handle_entity+0x1a0>)
   32ec4:	0018      	movs	r0, r3
   32ec6:	4b11      	ldr	r3, [pc, #68]	; (32f0c <_http_client_handle_entity+0x1a4>)
   32ec8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32eca:	687b      	ldr	r3, [r7, #4]
   32ecc:	2100      	movs	r1, #0
   32ece:	0018      	movs	r0, r3
   32ed0:	4b0b      	ldr	r3, [pc, #44]	; (32f00 <_http_client_handle_entity+0x198>)
   32ed2:	4798      	blx	r3
					return 0;
   32ed4:	2300      	movs	r3, #0
   32ed6:	e00e      	b.n	32ef6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32ed8:	687b      	ldr	r3, [r7, #4]
   32eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32edc:	697a      	ldr	r2, [r7, #20]
   32ede:	18d2      	adds	r2, r2, r3
   32ee0:	687b      	ldr	r3, [r7, #4]
   32ee2:	0011      	movs	r1, r2
   32ee4:	0018      	movs	r0, r3
   32ee6:	4b07      	ldr	r3, [pc, #28]	; (32f04 <_http_client_handle_entity+0x19c>)
   32ee8:	4798      	blx	r3
   32eea:	e003      	b.n	32ef4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32eec:	687b      	ldr	r3, [r7, #4]
   32eee:	0018      	movs	r0, r3
   32ef0:	4b07      	ldr	r3, [pc, #28]	; (32f10 <_http_client_handle_entity+0x1a8>)
   32ef2:	4798      	blx	r3
		}
	}

	return 0;
   32ef4:	2300      	movs	r3, #0
}
   32ef6:	0018      	movs	r0, r3
   32ef8:	46bd      	mov	sp, r7
   32efa:	b006      	add	sp, #24
   32efc:	bd80      	pop	{r7, pc}
   32efe:	46c0      	nop			; (mov r8, r8)
   32f00:	00031f2d 	.word	0x00031f2d
   32f04:	00032f15 	.word	0x00032f15
   32f08:	0003b7e0 	.word	0x0003b7e0
   32f0c:	00036425 	.word	0x00036425
   32f10:	00032b55 	.word	0x00032b55

00032f14 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32f14:	b580      	push	{r7, lr}
   32f16:	b084      	sub	sp, #16
   32f18:	af00      	add	r7, sp, #0
   32f1a:	6078      	str	r0, [r7, #4]
   32f1c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32f1e:	687b      	ldr	r3, [r7, #4]
   32f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32f22:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32f24:	687b      	ldr	r3, [r7, #4]
   32f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f28:	001a      	movs	r2, r3
   32f2a:	683b      	ldr	r3, [r7, #0]
   32f2c:	1ad2      	subs	r2, r2, r3
   32f2e:	68fb      	ldr	r3, [r7, #12]
   32f30:	18d3      	adds	r3, r2, r3
   32f32:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32f34:	68bb      	ldr	r3, [r7, #8]
   32f36:	2b00      	cmp	r3, #0
   32f38:	dd09      	ble.n	32f4e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32f3a:	68ba      	ldr	r2, [r7, #8]
   32f3c:	6839      	ldr	r1, [r7, #0]
   32f3e:	68fb      	ldr	r3, [r7, #12]
   32f40:	0018      	movs	r0, r3
   32f42:	4b06      	ldr	r3, [pc, #24]	; (32f5c <_http_client_move_buffer+0x48>)
   32f44:	4798      	blx	r3
		module->recved_size = remain;
   32f46:	68ba      	ldr	r2, [r7, #8]
   32f48:	687b      	ldr	r3, [r7, #4]
   32f4a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32f4c:	e002      	b.n	32f54 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32f4e:	687b      	ldr	r3, [r7, #4]
   32f50:	2200      	movs	r2, #0
   32f52:	645a      	str	r2, [r3, #68]	; 0x44
}
   32f54:	46c0      	nop			; (mov r8, r8)
   32f56:	46bd      	mov	sp, r7
   32f58:	b004      	add	sp, #16
   32f5a:	bd80      	pop	{r7, pc}
   32f5c:	000361df 	.word	0x000361df

00032f60 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32f60:	b580      	push	{r7, lr}
   32f62:	b084      	sub	sp, #16
   32f64:	af00      	add	r7, sp, #0
   32f66:	60f8      	str	r0, [r7, #12]
   32f68:	60b9      	str	r1, [r7, #8]
   32f6a:	607a      	str	r2, [r7, #4]
   32f6c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32f6e:	68fb      	ldr	r3, [r7, #12]
   32f70:	687a      	ldr	r2, [r7, #4]
   32f72:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32f74:	68fb      	ldr	r3, [r7, #12]
   32f76:	68ba      	ldr	r2, [r7, #8]
   32f78:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32f7a:	68fb      	ldr	r3, [r7, #12]
   32f7c:	2200      	movs	r2, #0
   32f7e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32f80:	68fb      	ldr	r3, [r7, #12]
   32f82:	683a      	ldr	r2, [r7, #0]
   32f84:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32f86:	68fb      	ldr	r3, [r7, #12]
   32f88:	69ba      	ldr	r2, [r7, #24]
   32f8a:	60da      	str	r2, [r3, #12]
}
   32f8c:	46c0      	nop			; (mov r8, r8)
   32f8e:	46bd      	mov	sp, r7
   32f90:	b004      	add	sp, #16
   32f92:	bd80      	pop	{r7, pc}

00032f94 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32f94:	b580      	push	{r7, lr}
   32f96:	b084      	sub	sp, #16
   32f98:	af00      	add	r7, sp, #0
   32f9a:	6078      	str	r0, [r7, #4]
   32f9c:	000a      	movs	r2, r1
   32f9e:	1cfb      	adds	r3, r7, #3
   32fa0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32fa2:	687b      	ldr	r3, [r7, #4]
   32fa4:	681a      	ldr	r2, [r3, #0]
   32fa6:	687b      	ldr	r3, [r7, #4]
   32fa8:	685b      	ldr	r3, [r3, #4]
   32faa:	1ad3      	subs	r3, r2, r3
   32fac:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32fae:	68fb      	ldr	r3, [r7, #12]
   32fb0:	2b00      	cmp	r3, #0
   32fb2:	dc03      	bgt.n	32fbc <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32fb4:	687b      	ldr	r3, [r7, #4]
   32fb6:	0018      	movs	r0, r3
   32fb8:	4b08      	ldr	r3, [pc, #32]	; (32fdc <stream_writer_send_8+0x48>)
   32fba:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32fbc:	687b      	ldr	r3, [r7, #4]
   32fbe:	6919      	ldr	r1, [r3, #16]
   32fc0:	687b      	ldr	r3, [r7, #4]
   32fc2:	685b      	ldr	r3, [r3, #4]
   32fc4:	1c58      	adds	r0, r3, #1
   32fc6:	687a      	ldr	r2, [r7, #4]
   32fc8:	6050      	str	r0, [r2, #4]
   32fca:	18cb      	adds	r3, r1, r3
   32fcc:	1cfa      	adds	r2, r7, #3
   32fce:	7812      	ldrb	r2, [r2, #0]
   32fd0:	701a      	strb	r2, [r3, #0]
}
   32fd2:	46c0      	nop			; (mov r8, r8)
   32fd4:	46bd      	mov	sp, r7
   32fd6:	b004      	add	sp, #16
   32fd8:	bd80      	pop	{r7, pc}
   32fda:	46c0      	nop			; (mov r8, r8)
   32fdc:	0003301d 	.word	0x0003301d

00032fe0 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32fe0:	b580      	push	{r7, lr}
   32fe2:	b084      	sub	sp, #16
   32fe4:	af00      	add	r7, sp, #0
   32fe6:	60f8      	str	r0, [r7, #12]
   32fe8:	60b9      	str	r1, [r7, #8]
   32fea:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   32fec:	e00d      	b.n	3300a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   32fee:	68bb      	ldr	r3, [r7, #8]
   32ff0:	781b      	ldrb	r3, [r3, #0]
   32ff2:	b25a      	sxtb	r2, r3
   32ff4:	68fb      	ldr	r3, [r7, #12]
   32ff6:	0011      	movs	r1, r2
   32ff8:	0018      	movs	r0, r3
   32ffa:	4b07      	ldr	r3, [pc, #28]	; (33018 <stream_writer_send_buffer+0x38>)
   32ffc:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   32ffe:	687b      	ldr	r3, [r7, #4]
   33000:	3b01      	subs	r3, #1
   33002:	607b      	str	r3, [r7, #4]
   33004:	68bb      	ldr	r3, [r7, #8]
   33006:	3301      	adds	r3, #1
   33008:	60bb      	str	r3, [r7, #8]
   3300a:	687b      	ldr	r3, [r7, #4]
   3300c:	2b00      	cmp	r3, #0
   3300e:	d1ee      	bne.n	32fee <stream_writer_send_buffer+0xe>
	}
}
   33010:	46c0      	nop			; (mov r8, r8)
   33012:	46bd      	mov	sp, r7
   33014:	b004      	add	sp, #16
   33016:	bd80      	pop	{r7, pc}
   33018:	00032f95 	.word	0x00032f95

0003301c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3301c:	b590      	push	{r4, r7, lr}
   3301e:	b083      	sub	sp, #12
   33020:	af00      	add	r7, sp, #0
   33022:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   33024:	687b      	ldr	r3, [r7, #4]
   33026:	685b      	ldr	r3, [r3, #4]
   33028:	2b00      	cmp	r3, #0
   3302a:	d00c      	beq.n	33046 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3302c:	687b      	ldr	r3, [r7, #4]
   3302e:	689c      	ldr	r4, [r3, #8]
   33030:	687b      	ldr	r3, [r7, #4]
   33032:	68d8      	ldr	r0, [r3, #12]
   33034:	687b      	ldr	r3, [r7, #4]
   33036:	6919      	ldr	r1, [r3, #16]
   33038:	687b      	ldr	r3, [r7, #4]
   3303a:	685b      	ldr	r3, [r3, #4]
   3303c:	001a      	movs	r2, r3
   3303e:	47a0      	blx	r4
		writer->written = 0;
   33040:	687b      	ldr	r3, [r7, #4]
   33042:	2200      	movs	r2, #0
   33044:	605a      	str	r2, [r3, #4]
	}
}
   33046:	46c0      	nop			; (mov r8, r8)
   33048:	46bd      	mov	sp, r7
   3304a:	b003      	add	sp, #12
   3304c:	bd90      	pop	{r4, r7, pc}
	...

00033050 <system_cpu_clock_get_hz>:
{
   33050:	b580      	push	{r7, lr}
   33052:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   33054:	2000      	movs	r0, #0
   33056:	4b05      	ldr	r3, [pc, #20]	; (3306c <system_cpu_clock_get_hz+0x1c>)
   33058:	4798      	blx	r3
   3305a:	0002      	movs	r2, r0
   3305c:	4b04      	ldr	r3, [pc, #16]	; (33070 <system_cpu_clock_get_hz+0x20>)
   3305e:	7a1b      	ldrb	r3, [r3, #8]
   33060:	b2db      	uxtb	r3, r3
   33062:	40da      	lsrs	r2, r3
   33064:	0013      	movs	r3, r2
}
   33066:	0018      	movs	r0, r3
   33068:	46bd      	mov	sp, r7
   3306a:	bd80      	pop	{r7, pc}
   3306c:	0002a905 	.word	0x0002a905
   33070:	40000400 	.word	0x40000400

00033074 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   33074:	b580      	push	{r7, lr}
   33076:	b084      	sub	sp, #16
   33078:	af00      	add	r7, sp, #0
   3307a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   3307c:	687b      	ldr	r3, [r7, #4]
   3307e:	681b      	ldr	r3, [r3, #0]
   33080:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   33082:	46c0      	nop			; (mov r8, r8)
   33084:	68fb      	ldr	r3, [r7, #12]
   33086:	689b      	ldr	r3, [r3, #8]
   33088:	2202      	movs	r2, #2
   3308a:	4013      	ands	r3, r2
   3308c:	d1fa      	bne.n	33084 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3308e:	68fb      	ldr	r3, [r7, #12]
   33090:	681b      	ldr	r3, [r3, #0]
   33092:	2202      	movs	r2, #2
   33094:	431a      	orrs	r2, r3
   33096:	68fb      	ldr	r3, [r7, #12]
   33098:	601a      	str	r2, [r3, #0]
}
   3309a:	46c0      	nop			; (mov r8, r8)
   3309c:	46bd      	mov	sp, r7
   3309e:	b004      	add	sp, #16
   330a0:	bd80      	pop	{r7, pc}
	...

000330a4 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   330a4:	b580      	push	{r7, lr}
   330a6:	b082      	sub	sp, #8
   330a8:	af00      	add	r7, sp, #0
   330aa:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   330ac:	4b04      	ldr	r3, [pc, #16]	; (330c0 <sw_timer_tcc_callback+0x1c>)
   330ae:	681b      	ldr	r3, [r3, #0]
   330b0:	1c5a      	adds	r2, r3, #1
   330b2:	4b03      	ldr	r3, [pc, #12]	; (330c0 <sw_timer_tcc_callback+0x1c>)
   330b4:	601a      	str	r2, [r3, #0]
}
   330b6:	46c0      	nop			; (mov r8, r8)
   330b8:	46bd      	mov	sp, r7
   330ba:	b002      	add	sp, #8
   330bc:	bd80      	pop	{r7, pc}
   330be:	46c0      	nop			; (mov r8, r8)
   330c0:	20004708 	.word	0x20004708

000330c4 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   330c4:	b580      	push	{r7, lr}
   330c6:	b082      	sub	sp, #8
   330c8:	af00      	add	r7, sp, #0
   330ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   330cc:	687b      	ldr	r3, [r7, #4]
   330ce:	2264      	movs	r2, #100	; 0x64
   330d0:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   330d2:	687b      	ldr	r3, [r7, #4]
   330d4:	2200      	movs	r2, #0
   330d6:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   330d8:	687b      	ldr	r3, [r7, #4]
   330da:	2200      	movs	r2, #0
   330dc:	705a      	strb	r2, [r3, #1]
}
   330de:	46c0      	nop			; (mov r8, r8)
   330e0:	46bd      	mov	sp, r7
   330e2:	b002      	add	sp, #8
   330e4:	bd80      	pop	{r7, pc}
	...

000330e8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   330e8:	b590      	push	{r4, r7, lr}
   330ea:	b0b1      	sub	sp, #196	; 0xc4
   330ec:	af00      	add	r7, sp, #0
   330ee:	6078      	str	r0, [r7, #4]
   330f0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   330f2:	230c      	movs	r3, #12
   330f4:	18fb      	adds	r3, r7, r3
   330f6:	4a2e      	ldr	r2, [pc, #184]	; (331b0 <sw_timer_init+0xc8>)
   330f8:	ca13      	ldmia	r2!, {r0, r1, r4}
   330fa:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   330fc:	683b      	ldr	r3, [r7, #0]
   330fe:	885b      	ldrh	r3, [r3, #2]
   33100:	001a      	movs	r2, r3
   33102:	687b      	ldr	r3, [r7, #4]
   33104:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   33106:	687b      	ldr	r3, [r7, #4]
   33108:	3314      	adds	r3, #20
   3310a:	22bc      	movs	r2, #188	; 0xbc
   3310c:	18ba      	adds	r2, r7, r2
   3310e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33110:	683b      	ldr	r3, [r7, #0]
   33112:	781b      	ldrb	r3, [r3, #0]
   33114:	001a      	movs	r2, r3
   33116:	230c      	movs	r3, #12
   33118:	18fb      	adds	r3, r7, r3
   3311a:	0092      	lsls	r2, r2, #2
   3311c:	58d2      	ldr	r2, [r2, r3]
   3311e:	2318      	movs	r3, #24
   33120:	18fb      	adds	r3, r7, r3
   33122:	0011      	movs	r1, r2
   33124:	0018      	movs	r0, r3
   33126:	4b23      	ldr	r3, [pc, #140]	; (331b4 <sw_timer_init+0xcc>)
   33128:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3312a:	4b23      	ldr	r3, [pc, #140]	; (331b8 <sw_timer_init+0xd0>)
   3312c:	4798      	blx	r3
   3312e:	0004      	movs	r4, r0
   33130:	683b      	ldr	r3, [r7, #0]
   33132:	885b      	ldrh	r3, [r3, #2]
   33134:	001a      	movs	r2, r3
   33136:	4b21      	ldr	r3, [pc, #132]	; (331bc <sw_timer_init+0xd4>)
   33138:	0011      	movs	r1, r2
   3313a:	22fa      	movs	r2, #250	; 0xfa
   3313c:	0210      	lsls	r0, r2, #8
   3313e:	4798      	blx	r3
   33140:	0003      	movs	r3, r0
   33142:	001a      	movs	r2, r3
   33144:	4b1e      	ldr	r3, [pc, #120]	; (331c0 <sw_timer_init+0xd8>)
   33146:	0011      	movs	r1, r2
   33148:	0020      	movs	r0, r4
   3314a:	4798      	blx	r3
   3314c:	0003      	movs	r3, r0
   3314e:	001a      	movs	r2, r3
   33150:	2318      	movs	r3, #24
   33152:	18fb      	adds	r3, r7, r3
   33154:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   33156:	2318      	movs	r3, #24
   33158:	18fb      	adds	r3, r7, r3
   3315a:	2205      	movs	r2, #5
   3315c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3315e:	683b      	ldr	r3, [r7, #0]
   33160:	781b      	ldrb	r3, [r3, #0]
   33162:	001a      	movs	r2, r3
   33164:	230c      	movs	r3, #12
   33166:	18fb      	adds	r3, r7, r3
   33168:	0092      	lsls	r2, r2, #2
   3316a:	58d1      	ldr	r1, [r2, r3]
   3316c:	2318      	movs	r3, #24
   3316e:	18fa      	adds	r2, r7, r3
   33170:	23bc      	movs	r3, #188	; 0xbc
   33172:	18fb      	adds	r3, r7, r3
   33174:	681b      	ldr	r3, [r3, #0]
   33176:	0018      	movs	r0, r3
   33178:	4b12      	ldr	r3, [pc, #72]	; (331c4 <sw_timer_init+0xdc>)
   3317a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3317c:	683b      	ldr	r3, [r7, #0]
   3317e:	785b      	ldrb	r3, [r3, #1]
   33180:	3308      	adds	r3, #8
   33182:	b2da      	uxtb	r2, r3
   33184:	4910      	ldr	r1, [pc, #64]	; (331c8 <sw_timer_init+0xe0>)
   33186:	23bc      	movs	r3, #188	; 0xbc
   33188:	18fb      	adds	r3, r7, r3
   3318a:	681b      	ldr	r3, [r3, #0]
   3318c:	0018      	movs	r0, r3
   3318e:	4b0f      	ldr	r3, [pc, #60]	; (331cc <sw_timer_init+0xe4>)
   33190:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33192:	683b      	ldr	r3, [r7, #0]
   33194:	785b      	ldrb	r3, [r3, #1]
   33196:	3308      	adds	r3, #8
   33198:	b2da      	uxtb	r2, r3
   3319a:	23bc      	movs	r3, #188	; 0xbc
   3319c:	18fb      	adds	r3, r7, r3
   3319e:	681b      	ldr	r3, [r3, #0]
   331a0:	0011      	movs	r1, r2
   331a2:	0018      	movs	r0, r3
   331a4:	4b0a      	ldr	r3, [pc, #40]	; (331d0 <sw_timer_init+0xe8>)
   331a6:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   331a8:	46c0      	nop			; (mov r8, r8)
   331aa:	46bd      	mov	sp, r7
   331ac:	b031      	add	sp, #196	; 0xc4
   331ae:	bd90      	pop	{r4, r7, pc}
   331b0:	0003b820 	.word	0x0003b820
   331b4:	0002ae9d 	.word	0x0002ae9d
   331b8:	00033051 	.word	0x00033051
   331bc:	000337b9 	.word	0x000337b9
   331c0:	000336a5 	.word	0x000336a5
   331c4:	0002b4f9 	.word	0x0002b4f9
   331c8:	000330a5 	.word	0x000330a5
   331cc:	0002ba3d 	.word	0x0002ba3d
   331d0:	0002ba7d 	.word	0x0002ba7d

000331d4 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   331d4:	b580      	push	{r7, lr}
   331d6:	b084      	sub	sp, #16
   331d8:	af00      	add	r7, sp, #0
   331da:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   331dc:	687b      	ldr	r3, [r7, #4]
   331de:	3314      	adds	r3, #20
   331e0:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   331e2:	68fb      	ldr	r3, [r7, #12]
   331e4:	0018      	movs	r0, r3
   331e6:	4b03      	ldr	r3, [pc, #12]	; (331f4 <sw_timer_enable+0x20>)
   331e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   331ea:	46c0      	nop			; (mov r8, r8)
   331ec:	46bd      	mov	sp, r7
   331ee:	b004      	add	sp, #16
   331f0:	bd80      	pop	{r7, pc}
   331f2:	46c0      	nop			; (mov r8, r8)
   331f4:	00033075 	.word	0x00033075

000331f8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   331f8:	b580      	push	{r7, lr}
   331fa:	b086      	sub	sp, #24
   331fc:	af00      	add	r7, sp, #0
   331fe:	60f8      	str	r0, [r7, #12]
   33200:	60b9      	str	r1, [r7, #8]
   33202:	607a      	str	r2, [r7, #4]
   33204:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33206:	2300      	movs	r3, #0
   33208:	617b      	str	r3, [r7, #20]
   3320a:	e032      	b.n	33272 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3320c:	68f9      	ldr	r1, [r7, #12]
   3320e:	697a      	ldr	r2, [r7, #20]
   33210:	0013      	movs	r3, r2
   33212:	009b      	lsls	r3, r3, #2
   33214:	189b      	adds	r3, r3, r2
   33216:	009b      	lsls	r3, r3, #2
   33218:	5c5b      	ldrb	r3, [r3, r1]
   3321a:	07db      	lsls	r3, r3, #31
   3321c:	0fdb      	lsrs	r3, r3, #31
   3321e:	b2db      	uxtb	r3, r3
   33220:	2b00      	cmp	r3, #0
   33222:	d123      	bne.n	3326c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   33224:	697a      	ldr	r2, [r7, #20]
   33226:	0013      	movs	r3, r2
   33228:	009b      	lsls	r3, r3, #2
   3322a:	189b      	adds	r3, r3, r2
   3322c:	009b      	lsls	r3, r3, #2
   3322e:	68fa      	ldr	r2, [r7, #12]
   33230:	18d3      	adds	r3, r2, r3
   33232:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   33234:	693b      	ldr	r3, [r7, #16]
   33236:	68ba      	ldr	r2, [r7, #8]
   33238:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3323a:	693b      	ldr	r3, [r7, #16]
   3323c:	781a      	ldrb	r2, [r3, #0]
   3323e:	2102      	movs	r1, #2
   33240:	438a      	bics	r2, r1
   33242:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   33244:	693b      	ldr	r3, [r7, #16]
   33246:	687a      	ldr	r2, [r7, #4]
   33248:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   3324a:	68fb      	ldr	r3, [r7, #12]
   3324c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3324e:	4b0d      	ldr	r3, [pc, #52]	; (33284 <sw_timer_register_callback+0x8c>)
   33250:	0011      	movs	r1, r2
   33252:	6838      	ldr	r0, [r7, #0]
   33254:	4798      	blx	r3
   33256:	0003      	movs	r3, r0
   33258:	001a      	movs	r2, r3
   3325a:	693b      	ldr	r3, [r7, #16]
   3325c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3325e:	693b      	ldr	r3, [r7, #16]
   33260:	781a      	ldrb	r2, [r3, #0]
   33262:	2101      	movs	r1, #1
   33264:	430a      	orrs	r2, r1
   33266:	701a      	strb	r2, [r3, #0]
			return index;
   33268:	697b      	ldr	r3, [r7, #20]
   3326a:	e007      	b.n	3327c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3326c:	697b      	ldr	r3, [r7, #20]
   3326e:	3301      	adds	r3, #1
   33270:	617b      	str	r3, [r7, #20]
   33272:	697b      	ldr	r3, [r7, #20]
   33274:	2b00      	cmp	r3, #0
   33276:	ddc9      	ble.n	3320c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   33278:	2301      	movs	r3, #1
   3327a:	425b      	negs	r3, r3
}
   3327c:	0018      	movs	r0, r3
   3327e:	46bd      	mov	sp, r7
   33280:	b006      	add	sp, #24
   33282:	bd80      	pop	{r7, pc}
   33284:	000336a5 	.word	0x000336a5

00033288 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   33288:	b580      	push	{r7, lr}
   3328a:	b086      	sub	sp, #24
   3328c:	af00      	add	r7, sp, #0
   3328e:	60f8      	str	r0, [r7, #12]
   33290:	60b9      	str	r1, [r7, #8]
   33292:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33294:	68ba      	ldr	r2, [r7, #8]
   33296:	0013      	movs	r3, r2
   33298:	009b      	lsls	r3, r3, #2
   3329a:	189b      	adds	r3, r3, r2
   3329c:	009b      	lsls	r3, r3, #2
   3329e:	68fa      	ldr	r2, [r7, #12]
   332a0:	18d3      	adds	r3, r2, r3
   332a2:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   332a4:	697b      	ldr	r3, [r7, #20]
   332a6:	781a      	ldrb	r2, [r3, #0]
   332a8:	2102      	movs	r1, #2
   332aa:	430a      	orrs	r2, r1
   332ac:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   332ae:	68fb      	ldr	r3, [r7, #12]
   332b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   332b2:	4b07      	ldr	r3, [pc, #28]	; (332d0 <sw_timer_enable_callback+0x48>)
   332b4:	0011      	movs	r1, r2
   332b6:	6878      	ldr	r0, [r7, #4]
   332b8:	4798      	blx	r3
   332ba:	0003      	movs	r3, r0
   332bc:	001a      	movs	r2, r3
   332be:	4b05      	ldr	r3, [pc, #20]	; (332d4 <sw_timer_enable_callback+0x4c>)
   332c0:	681b      	ldr	r3, [r3, #0]
   332c2:	18d2      	adds	r2, r2, r3
   332c4:	697b      	ldr	r3, [r7, #20]
   332c6:	611a      	str	r2, [r3, #16]
}
   332c8:	46c0      	nop			; (mov r8, r8)
   332ca:	46bd      	mov	sp, r7
   332cc:	b006      	add	sp, #24
   332ce:	bd80      	pop	{r7, pc}
   332d0:	000336a5 	.word	0x000336a5
   332d4:	20004708 	.word	0x20004708

000332d8 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   332d8:	b580      	push	{r7, lr}
   332da:	b084      	sub	sp, #16
   332dc:	af00      	add	r7, sp, #0
   332de:	6078      	str	r0, [r7, #4]
   332e0:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   332e2:	683a      	ldr	r2, [r7, #0]
   332e4:	0013      	movs	r3, r2
   332e6:	009b      	lsls	r3, r3, #2
   332e8:	189b      	adds	r3, r3, r2
   332ea:	009b      	lsls	r3, r3, #2
   332ec:	687a      	ldr	r2, [r7, #4]
   332ee:	18d3      	adds	r3, r2, r3
   332f0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   332f2:	68fb      	ldr	r3, [r7, #12]
   332f4:	781a      	ldrb	r2, [r3, #0]
   332f6:	2102      	movs	r1, #2
   332f8:	438a      	bics	r2, r1
   332fa:	701a      	strb	r2, [r3, #0]
}
   332fc:	46c0      	nop			; (mov r8, r8)
   332fe:	46bd      	mov	sp, r7
   33300:	b004      	add	sp, #16
   33302:	bd80      	pop	{r7, pc}

00033304 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   33304:	b590      	push	{r4, r7, lr}
   33306:	b085      	sub	sp, #20
   33308:	af00      	add	r7, sp, #0
   3330a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3330c:	2300      	movs	r3, #0
   3330e:	60fb      	str	r3, [r7, #12]
   33310:	e053      	b.n	333ba <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   33312:	6879      	ldr	r1, [r7, #4]
   33314:	68fa      	ldr	r2, [r7, #12]
   33316:	0013      	movs	r3, r2
   33318:	009b      	lsls	r3, r3, #2
   3331a:	189b      	adds	r3, r3, r2
   3331c:	009b      	lsls	r3, r3, #2
   3331e:	5c5b      	ldrb	r3, [r3, r1]
   33320:	07db      	lsls	r3, r3, #31
   33322:	0fdb      	lsrs	r3, r3, #31
   33324:	b2db      	uxtb	r3, r3
   33326:	2b00      	cmp	r3, #0
   33328:	d044      	beq.n	333b4 <sw_timer_task+0xb0>
   3332a:	6879      	ldr	r1, [r7, #4]
   3332c:	68fa      	ldr	r2, [r7, #12]
   3332e:	0013      	movs	r3, r2
   33330:	009b      	lsls	r3, r3, #2
   33332:	189b      	adds	r3, r3, r2
   33334:	009b      	lsls	r3, r3, #2
   33336:	5c5b      	ldrb	r3, [r3, r1]
   33338:	079b      	lsls	r3, r3, #30
   3333a:	0fdb      	lsrs	r3, r3, #31
   3333c:	b2db      	uxtb	r3, r3
   3333e:	2b00      	cmp	r3, #0
   33340:	d038      	beq.n	333b4 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   33342:	68fa      	ldr	r2, [r7, #12]
   33344:	0013      	movs	r3, r2
   33346:	009b      	lsls	r3, r3, #2
   33348:	189b      	adds	r3, r3, r2
   3334a:	009b      	lsls	r3, r3, #2
   3334c:	687a      	ldr	r2, [r7, #4]
   3334e:	18d3      	adds	r3, r2, r3
   33350:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   33352:	68bb      	ldr	r3, [r7, #8]
   33354:	691a      	ldr	r2, [r3, #16]
   33356:	4b1c      	ldr	r3, [pc, #112]	; (333c8 <sw_timer_task+0xc4>)
   33358:	681b      	ldr	r3, [r3, #0]
   3335a:	1ad3      	subs	r3, r2, r3
   3335c:	d52a      	bpl.n	333b4 <sw_timer_task+0xb0>
   3335e:	68bb      	ldr	r3, [r7, #8]
   33360:	781b      	ldrb	r3, [r3, #0]
   33362:	2204      	movs	r2, #4
   33364:	4013      	ands	r3, r2
   33366:	b2db      	uxtb	r3, r3
   33368:	2b00      	cmp	r3, #0
   3336a:	d123      	bne.n	333b4 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3336c:	68bb      	ldr	r3, [r7, #8]
   3336e:	781a      	ldrb	r2, [r3, #0]
   33370:	2104      	movs	r1, #4
   33372:	430a      	orrs	r2, r1
   33374:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   33376:	68bb      	ldr	r3, [r7, #8]
   33378:	68db      	ldr	r3, [r3, #12]
   3337a:	2b00      	cmp	r3, #0
   3337c:	d007      	beq.n	3338e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3337e:	68bb      	ldr	r3, [r7, #8]
   33380:	68da      	ldr	r2, [r3, #12]
   33382:	4b11      	ldr	r3, [pc, #68]	; (333c8 <sw_timer_task+0xc4>)
   33384:	681b      	ldr	r3, [r3, #0]
   33386:	18d2      	adds	r2, r2, r3
   33388:	68bb      	ldr	r3, [r7, #8]
   3338a:	611a      	str	r2, [r3, #16]
   3338c:	e004      	b.n	33398 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3338e:	68bb      	ldr	r3, [r7, #8]
   33390:	781a      	ldrb	r2, [r3, #0]
   33392:	2102      	movs	r1, #2
   33394:	438a      	bics	r2, r1
   33396:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33398:	68bb      	ldr	r3, [r7, #8]
   3339a:	685c      	ldr	r4, [r3, #4]
   3339c:	68bb      	ldr	r3, [r7, #8]
   3339e:	689a      	ldr	r2, [r3, #8]
   333a0:	68bb      	ldr	r3, [r7, #8]
   333a2:	68db      	ldr	r3, [r3, #12]
   333a4:	68f9      	ldr	r1, [r7, #12]
   333a6:	6878      	ldr	r0, [r7, #4]
   333a8:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   333aa:	68bb      	ldr	r3, [r7, #8]
   333ac:	781a      	ldrb	r2, [r3, #0]
   333ae:	2104      	movs	r1, #4
   333b0:	438a      	bics	r2, r1
   333b2:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   333b4:	68fb      	ldr	r3, [r7, #12]
   333b6:	3301      	adds	r3, #1
   333b8:	60fb      	str	r3, [r7, #12]
   333ba:	68fb      	ldr	r3, [r7, #12]
   333bc:	2b00      	cmp	r3, #0
   333be:	dda8      	ble.n	33312 <sw_timer_task+0xe>
			}
		}
	}
}
   333c0:	46c0      	nop			; (mov r8, r8)
   333c2:	46bd      	mov	sp, r7
   333c4:	b005      	add	sp, #20
   333c6:	bd90      	pop	{r4, r7, pc}
   333c8:	20004708 	.word	0x20004708

000333cc <main>:
   333cc:	b580      	push	{r7, lr}
   333ce:	af00      	add	r7, sp, #0
   333d0:	4b06      	ldr	r3, [pc, #24]	; (333ec <main+0x20>)
   333d2:	4798      	blx	r3
   333d4:	4b06      	ldr	r3, [pc, #24]	; (333f0 <main+0x24>)
   333d6:	4798      	blx	r3
   333d8:	2001      	movs	r0, #1
   333da:	4b06      	ldr	r3, [pc, #24]	; (333f4 <main+0x28>)
   333dc:	4798      	blx	r3
   333de:	4b06      	ldr	r3, [pc, #24]	; (333f8 <main+0x2c>)
   333e0:	4798      	blx	r3
   333e2:	2300      	movs	r3, #0
   333e4:	0018      	movs	r0, r3
   333e6:	46bd      	mov	sp, r7
   333e8:	bd80      	pop	{r7, pc}
   333ea:	46c0      	nop			; (mov r8, r8)
   333ec:	0002ad91 	.word	0x0002ad91
   333f0:	0001e835 	.word	0x0001e835
   333f4:	00018f01 	.word	0x00018f01
   333f8:	0001ce8d 	.word	0x0001ce8d

000333fc <vApplicationDaemonTaskStartupHook>:
   333fc:	b580      	push	{r7, lr}
   333fe:	b082      	sub	sp, #8
   33400:	af00      	add	r7, sp, #0
   33402:	4b29      	ldr	r3, [pc, #164]	; (334a8 <vApplicationDaemonTaskStartupHook+0xac>)
   33404:	0018      	movs	r0, r3
   33406:	4b29      	ldr	r3, [pc, #164]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33408:	4798      	blx	r3
   3340a:	4b29      	ldr	r3, [pc, #164]	; (334b0 <vApplicationDaemonTaskStartupHook+0xb4>)
   3340c:	0018      	movs	r0, r3
   3340e:	4b27      	ldr	r3, [pc, #156]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33410:	4798      	blx	r3
   33412:	4b28      	ldr	r3, [pc, #160]	; (334b4 <vApplicationDaemonTaskStartupHook+0xb8>)
   33414:	4798      	blx	r3
   33416:	1e03      	subs	r3, r0, #0
   33418:	d004      	beq.n	33424 <vApplicationDaemonTaskStartupHook+0x28>
   3341a:	4b27      	ldr	r3, [pc, #156]	; (334b8 <vApplicationDaemonTaskStartupHook+0xbc>)
   3341c:	0018      	movs	r0, r3
   3341e:	4b23      	ldr	r3, [pc, #140]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33420:	4798      	blx	r3
   33422:	e003      	b.n	3342c <vApplicationDaemonTaskStartupHook+0x30>
   33424:	4b25      	ldr	r3, [pc, #148]	; (334bc <vApplicationDaemonTaskStartupHook+0xc0>)
   33426:	0018      	movs	r0, r3
   33428:	4b20      	ldr	r3, [pc, #128]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   3342a:	4798      	blx	r3
   3342c:	4b24      	ldr	r3, [pc, #144]	; (334c0 <vApplicationDaemonTaskStartupHook+0xc4>)
   3342e:	4798      	blx	r3
   33430:	1e03      	subs	r3, r0, #0
   33432:	d004      	beq.n	3343e <vApplicationDaemonTaskStartupHook+0x42>
   33434:	4b23      	ldr	r3, [pc, #140]	; (334c4 <vApplicationDaemonTaskStartupHook+0xc8>)
   33436:	0018      	movs	r0, r3
   33438:	4b1c      	ldr	r3, [pc, #112]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   3343a:	4798      	blx	r3
   3343c:	e003      	b.n	33446 <vApplicationDaemonTaskStartupHook+0x4a>
   3343e:	4b22      	ldr	r3, [pc, #136]	; (334c8 <vApplicationDaemonTaskStartupHook+0xcc>)
   33440:	0018      	movs	r0, r3
   33442:	4b1a      	ldr	r3, [pc, #104]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33444:	4798      	blx	r3
   33446:	1dfb      	adds	r3, r7, #7
   33448:	2200      	movs	r2, #0
   3344a:	701a      	strb	r2, [r3, #0]
   3344c:	4b1f      	ldr	r3, [pc, #124]	; (334cc <vApplicationDaemonTaskStartupHook+0xd0>)
   3344e:	4798      	blx	r3
   33450:	0002      	movs	r2, r0
   33452:	1dfb      	adds	r3, r7, #7
   33454:	0019      	movs	r1, r3
   33456:	0010      	movs	r0, r2
   33458:	4b1d      	ldr	r3, [pc, #116]	; (334d0 <vApplicationDaemonTaskStartupHook+0xd4>)
   3345a:	4798      	blx	r3
   3345c:	1dfb      	adds	r3, r7, #7
   3345e:	781b      	ldrb	r3, [r3, #0]
   33460:	2b6c      	cmp	r3, #108	; 0x6c
   33462:	d004      	beq.n	3346e <vApplicationDaemonTaskStartupHook+0x72>
   33464:	4b1b      	ldr	r3, [pc, #108]	; (334d4 <vApplicationDaemonTaskStartupHook+0xd8>)
   33466:	0018      	movs	r0, r3
   33468:	4b10      	ldr	r3, [pc, #64]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   3346a:	4798      	blx	r3
   3346c:	e010      	b.n	33490 <vApplicationDaemonTaskStartupHook+0x94>
   3346e:	4b1a      	ldr	r3, [pc, #104]	; (334d8 <vApplicationDaemonTaskStartupHook+0xdc>)
   33470:	0018      	movs	r0, r3
   33472:	4b0e      	ldr	r3, [pc, #56]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33474:	4798      	blx	r3
   33476:	4b19      	ldr	r3, [pc, #100]	; (334dc <vApplicationDaemonTaskStartupHook+0xe0>)
   33478:	4798      	blx	r3
   3347a:	1e03      	subs	r3, r0, #0
   3347c:	d104      	bne.n	33488 <vApplicationDaemonTaskStartupHook+0x8c>
   3347e:	4b18      	ldr	r3, [pc, #96]	; (334e0 <vApplicationDaemonTaskStartupHook+0xe4>)
   33480:	0018      	movs	r0, r3
   33482:	4b0a      	ldr	r3, [pc, #40]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   33484:	4798      	blx	r3
   33486:	e003      	b.n	33490 <vApplicationDaemonTaskStartupHook+0x94>
   33488:	4b16      	ldr	r3, [pc, #88]	; (334e4 <vApplicationDaemonTaskStartupHook+0xe8>)
   3348a:	0018      	movs	r0, r3
   3348c:	4b07      	ldr	r3, [pc, #28]	; (334ac <vApplicationDaemonTaskStartupHook+0xb0>)
   3348e:	4798      	blx	r3
   33490:	4b15      	ldr	r3, [pc, #84]	; (334e8 <vApplicationDaemonTaskStartupHook+0xec>)
   33492:	4798      	blx	r3
   33494:	4b15      	ldr	r3, [pc, #84]	; (334ec <vApplicationDaemonTaskStartupHook+0xf0>)
   33496:	681b      	ldr	r3, [r3, #0]
   33498:	0018      	movs	r0, r3
   3349a:	4b15      	ldr	r3, [pc, #84]	; (334f0 <vApplicationDaemonTaskStartupHook+0xf4>)
   3349c:	4798      	blx	r3
   3349e:	46c0      	nop			; (mov r8, r8)
   334a0:	46bd      	mov	sp, r7
   334a2:	b002      	add	sp, #8
   334a4:	bd80      	pop	{r7, pc}
   334a6:	46c0      	nop			; (mov r8, r8)
   334a8:	0003b82c 	.word	0x0003b82c
   334ac:	0001e8a5 	.word	0x0001e8a5
   334b0:	0003b850 	.word	0x0003b850
   334b4:	00014711 	.word	0x00014711
   334b8:	0003b868 	.word	0x0003b868
   334bc:	0003b88c 	.word	0x0003b88c
   334c0:	00015f8d 	.word	0x00015f8d
   334c4:	0003b8a8 	.word	0x0003b8a8
   334c8:	0003b8c8 	.word	0x0003b8c8
   334cc:	00015879 	.word	0x00015879
   334d0:	0001547d 	.word	0x0001547d
   334d4:	0003b8e0 	.word	0x0003b8e0
   334d8:	0003b8f4 	.word	0x0003b8f4
   334dc:	00015889 	.word	0x00015889
   334e0:	0003b904 	.word	0x0003b904
   334e4:	0003b918 	.word	0x0003b918
   334e8:	000334f5 	.word	0x000334f5
   334ec:	20004710 	.word	0x20004710
   334f0:	0001cd31 	.word	0x0001cd31

000334f4 <StartTasks>:
   334f4:	b590      	push	{r4, r7, lr}
   334f6:	b083      	sub	sp, #12
   334f8:	af02      	add	r7, sp, #8
   334fa:	4b44      	ldr	r3, [pc, #272]	; (3360c <StartTasks+0x118>)
   334fc:	4798      	blx	r3
   334fe:	0003      	movs	r3, r0
   33500:	4a43      	ldr	r2, [pc, #268]	; (33610 <StartTasks+0x11c>)
   33502:	4844      	ldr	r0, [pc, #272]	; (33614 <StartTasks+0x120>)
   33504:	2140      	movs	r1, #64	; 0x40
   33506:	4c44      	ldr	r4, [pc, #272]	; (33618 <StartTasks+0x124>)
   33508:	47a0      	blx	r4
   3350a:	4b42      	ldr	r3, [pc, #264]	; (33614 <StartTasks+0x120>)
   3350c:	0018      	movs	r0, r3
   3350e:	4b43      	ldr	r3, [pc, #268]	; (3361c <StartTasks+0x128>)
   33510:	4798      	blx	r3
   33512:	23c8      	movs	r3, #200	; 0xc8
   33514:	005a      	lsls	r2, r3, #1
   33516:	4942      	ldr	r1, [pc, #264]	; (33620 <StartTasks+0x12c>)
   33518:	4842      	ldr	r0, [pc, #264]	; (33624 <StartTasks+0x130>)
   3351a:	4b43      	ldr	r3, [pc, #268]	; (33628 <StartTasks+0x134>)
   3351c:	9301      	str	r3, [sp, #4]
   3351e:	2304      	movs	r3, #4
   33520:	9300      	str	r3, [sp, #0]
   33522:	2300      	movs	r3, #0
   33524:	4c41      	ldr	r4, [pc, #260]	; (3362c <StartTasks+0x138>)
   33526:	47a0      	blx	r4
   33528:	0003      	movs	r3, r0
   3352a:	2b01      	cmp	r3, #1
   3352c:	d003      	beq.n	33536 <StartTasks+0x42>
   3352e:	4b40      	ldr	r3, [pc, #256]	; (33630 <StartTasks+0x13c>)
   33530:	0018      	movs	r0, r3
   33532:	4b3a      	ldr	r3, [pc, #232]	; (3361c <StartTasks+0x128>)
   33534:	4798      	blx	r3
   33536:	4b35      	ldr	r3, [pc, #212]	; (3360c <StartTasks+0x118>)
   33538:	4798      	blx	r3
   3353a:	0003      	movs	r3, r0
   3353c:	4a3d      	ldr	r2, [pc, #244]	; (33634 <StartTasks+0x140>)
   3353e:	4835      	ldr	r0, [pc, #212]	; (33614 <StartTasks+0x120>)
   33540:	2140      	movs	r1, #64	; 0x40
   33542:	4c35      	ldr	r4, [pc, #212]	; (33618 <StartTasks+0x124>)
   33544:	47a0      	blx	r4
   33546:	4b33      	ldr	r3, [pc, #204]	; (33614 <StartTasks+0x120>)
   33548:	0018      	movs	r0, r3
   3354a:	4b34      	ldr	r3, [pc, #208]	; (3361c <StartTasks+0x128>)
   3354c:	4798      	blx	r3
   3354e:	23fa      	movs	r3, #250	; 0xfa
   33550:	009a      	lsls	r2, r3, #2
   33552:	4939      	ldr	r1, [pc, #228]	; (33638 <StartTasks+0x144>)
   33554:	4839      	ldr	r0, [pc, #228]	; (3363c <StartTasks+0x148>)
   33556:	4b3a      	ldr	r3, [pc, #232]	; (33640 <StartTasks+0x14c>)
   33558:	9301      	str	r3, [sp, #4]
   3355a:	2303      	movs	r3, #3
   3355c:	9300      	str	r3, [sp, #0]
   3355e:	2300      	movs	r3, #0
   33560:	4c32      	ldr	r4, [pc, #200]	; (3362c <StartTasks+0x138>)
   33562:	47a0      	blx	r4
   33564:	0003      	movs	r3, r0
   33566:	2b01      	cmp	r3, #1
   33568:	d003      	beq.n	33572 <StartTasks+0x7e>
   3356a:	4b36      	ldr	r3, [pc, #216]	; (33644 <StartTasks+0x150>)
   3356c:	0018      	movs	r0, r3
   3356e:	4b2b      	ldr	r3, [pc, #172]	; (3361c <StartTasks+0x128>)
   33570:	4798      	blx	r3
   33572:	4b26      	ldr	r3, [pc, #152]	; (3360c <StartTasks+0x118>)
   33574:	4798      	blx	r3
   33576:	0003      	movs	r3, r0
   33578:	4a33      	ldr	r2, [pc, #204]	; (33648 <StartTasks+0x154>)
   3357a:	4826      	ldr	r0, [pc, #152]	; (33614 <StartTasks+0x120>)
   3357c:	2140      	movs	r1, #64	; 0x40
   3357e:	4c26      	ldr	r4, [pc, #152]	; (33618 <StartTasks+0x124>)
   33580:	47a0      	blx	r4
   33582:	4b24      	ldr	r3, [pc, #144]	; (33614 <StartTasks+0x120>)
   33584:	0018      	movs	r0, r3
   33586:	4b25      	ldr	r3, [pc, #148]	; (3361c <StartTasks+0x128>)
   33588:	4798      	blx	r3
   3358a:	23c8      	movs	r3, #200	; 0xc8
   3358c:	005a      	lsls	r2, r3, #1
   3358e:	492f      	ldr	r1, [pc, #188]	; (3364c <StartTasks+0x158>)
   33590:	482f      	ldr	r0, [pc, #188]	; (33650 <StartTasks+0x15c>)
   33592:	4b30      	ldr	r3, [pc, #192]	; (33654 <StartTasks+0x160>)
   33594:	9301      	str	r3, [sp, #4]
   33596:	2304      	movs	r3, #4
   33598:	9300      	str	r3, [sp, #0]
   3359a:	2300      	movs	r3, #0
   3359c:	4c23      	ldr	r4, [pc, #140]	; (3362c <StartTasks+0x138>)
   3359e:	47a0      	blx	r4
   335a0:	0003      	movs	r3, r0
   335a2:	2b01      	cmp	r3, #1
   335a4:	d003      	beq.n	335ae <StartTasks+0xba>
   335a6:	4b2c      	ldr	r3, [pc, #176]	; (33658 <StartTasks+0x164>)
   335a8:	0018      	movs	r0, r3
   335aa:	4b1c      	ldr	r3, [pc, #112]	; (3361c <StartTasks+0x128>)
   335ac:	4798      	blx	r3
   335ae:	4b17      	ldr	r3, [pc, #92]	; (3360c <StartTasks+0x118>)
   335b0:	4798      	blx	r3
   335b2:	0003      	movs	r3, r0
   335b4:	4a29      	ldr	r2, [pc, #164]	; (3365c <StartTasks+0x168>)
   335b6:	4817      	ldr	r0, [pc, #92]	; (33614 <StartTasks+0x120>)
   335b8:	2140      	movs	r1, #64	; 0x40
   335ba:	4c17      	ldr	r4, [pc, #92]	; (33618 <StartTasks+0x124>)
   335bc:	47a0      	blx	r4
   335be:	4b15      	ldr	r3, [pc, #84]	; (33614 <StartTasks+0x120>)
   335c0:	0018      	movs	r0, r3
   335c2:	4b16      	ldr	r3, [pc, #88]	; (3361c <StartTasks+0x128>)
   335c4:	4798      	blx	r3
   335c6:	2380      	movs	r3, #128	; 0x80
   335c8:	005a      	lsls	r2, r3, #1
   335ca:	4925      	ldr	r1, [pc, #148]	; (33660 <StartTasks+0x16c>)
   335cc:	4825      	ldr	r0, [pc, #148]	; (33664 <StartTasks+0x170>)
   335ce:	4b26      	ldr	r3, [pc, #152]	; (33668 <StartTasks+0x174>)
   335d0:	9301      	str	r3, [sp, #4]
   335d2:	2304      	movs	r3, #4
   335d4:	9300      	str	r3, [sp, #0]
   335d6:	2300      	movs	r3, #0
   335d8:	4c14      	ldr	r4, [pc, #80]	; (3362c <StartTasks+0x138>)
   335da:	47a0      	blx	r4
   335dc:	0003      	movs	r3, r0
   335de:	2b01      	cmp	r3, #1
   335e0:	d003      	beq.n	335ea <StartTasks+0xf6>
   335e2:	4b22      	ldr	r3, [pc, #136]	; (3366c <StartTasks+0x178>)
   335e4:	0018      	movs	r0, r3
   335e6:	4b0d      	ldr	r3, [pc, #52]	; (3361c <StartTasks+0x128>)
   335e8:	4798      	blx	r3
   335ea:	4b08      	ldr	r3, [pc, #32]	; (3360c <StartTasks+0x118>)
   335ec:	4798      	blx	r3
   335ee:	0003      	movs	r3, r0
   335f0:	4a1f      	ldr	r2, [pc, #124]	; (33670 <StartTasks+0x17c>)
   335f2:	4808      	ldr	r0, [pc, #32]	; (33614 <StartTasks+0x120>)
   335f4:	2140      	movs	r1, #64	; 0x40
   335f6:	4c08      	ldr	r4, [pc, #32]	; (33618 <StartTasks+0x124>)
   335f8:	47a0      	blx	r4
   335fa:	4b06      	ldr	r3, [pc, #24]	; (33614 <StartTasks+0x120>)
   335fc:	0018      	movs	r0, r3
   335fe:	4b07      	ldr	r3, [pc, #28]	; (3361c <StartTasks+0x128>)
   33600:	4798      	blx	r3
   33602:	46c0      	nop			; (mov r8, r8)
   33604:	46bd      	mov	sp, r7
   33606:	b001      	add	sp, #4
   33608:	bd90      	pop	{r4, r7, pc}
   3360a:	46c0      	nop			; (mov r8, r8)
   3360c:	0001ae71 	.word	0x0001ae71
   33610:	0003b934 	.word	0x0003b934
   33614:	20005ca8 	.word	0x20005ca8
   33618:	0003645d 	.word	0x0003645d
   3361c:	0001e8a5 	.word	0x0001e8a5
   33620:	0003b958 	.word	0x0003b958
   33624:	00013819 	.word	0x00013819
   33628:	2000470c 	.word	0x2000470c
   3362c:	0001c8b5 	.word	0x0001c8b5
   33630:	0003b964 	.word	0x0003b964
   33634:	0003b990 	.word	0x0003b990
   33638:	0003b9b0 	.word	0x0003b9b0
   3363c:	00017c99 	.word	0x00017c99
   33640:	20004714 	.word	0x20004714
   33644:	0003b9bc 	.word	0x0003b9bc
   33648:	0003b9e8 	.word	0x0003b9e8
   3364c:	0003ba08 	.word	0x0003ba08
   33650:	00016581 	.word	0x00016581
   33654:	20004718 	.word	0x20004718
   33658:	0003ba10 	.word	0x0003ba10
   3365c:	0003ba3c 	.word	0x0003ba3c
   33660:	0003ba60 	.word	0x0003ba60
   33664:	000141f5 	.word	0x000141f5
   33668:	2000471c 	.word	0x2000471c
   3366c:	0003ba70 	.word	0x0003ba70
   33670:	0003baa0 	.word	0x0003baa0

00033674 <vApplicationMallocFailedHook>:
   33674:	b580      	push	{r7, lr}
   33676:	af00      	add	r7, sp, #0
   33678:	4b02      	ldr	r3, [pc, #8]	; (33684 <vApplicationMallocFailedHook+0x10>)
   3367a:	0018      	movs	r0, r3
   3367c:	4b02      	ldr	r3, [pc, #8]	; (33688 <vApplicationMallocFailedHook+0x14>)
   3367e:	4798      	blx	r3
   33680:	e7fe      	b.n	33680 <vApplicationMallocFailedHook+0xc>
   33682:	46c0      	nop			; (mov r8, r8)
   33684:	0003bac8 	.word	0x0003bac8
   33688:	0001e8a5 	.word	0x0001e8a5

0003368c <vApplicationStackOverflowHook>:
   3368c:	b580      	push	{r7, lr}
   3368e:	af00      	add	r7, sp, #0
   33690:	4b02      	ldr	r3, [pc, #8]	; (3369c <vApplicationStackOverflowHook+0x10>)
   33692:	0018      	movs	r0, r3
   33694:	4b02      	ldr	r3, [pc, #8]	; (336a0 <vApplicationStackOverflowHook+0x14>)
   33696:	4798      	blx	r3
   33698:	e7fe      	b.n	33698 <vApplicationStackOverflowHook+0xc>
   3369a:	46c0      	nop			; (mov r8, r8)
   3369c:	0003baf4 	.word	0x0003baf4
   336a0:	0001e8a5 	.word	0x0001e8a5

000336a4 <__udivsi3>:
   336a4:	2200      	movs	r2, #0
   336a6:	0843      	lsrs	r3, r0, #1
   336a8:	428b      	cmp	r3, r1
   336aa:	d374      	bcc.n	33796 <__udivsi3+0xf2>
   336ac:	0903      	lsrs	r3, r0, #4
   336ae:	428b      	cmp	r3, r1
   336b0:	d35f      	bcc.n	33772 <__udivsi3+0xce>
   336b2:	0a03      	lsrs	r3, r0, #8
   336b4:	428b      	cmp	r3, r1
   336b6:	d344      	bcc.n	33742 <__udivsi3+0x9e>
   336b8:	0b03      	lsrs	r3, r0, #12
   336ba:	428b      	cmp	r3, r1
   336bc:	d328      	bcc.n	33710 <__udivsi3+0x6c>
   336be:	0c03      	lsrs	r3, r0, #16
   336c0:	428b      	cmp	r3, r1
   336c2:	d30d      	bcc.n	336e0 <__udivsi3+0x3c>
   336c4:	22ff      	movs	r2, #255	; 0xff
   336c6:	0209      	lsls	r1, r1, #8
   336c8:	ba12      	rev	r2, r2
   336ca:	0c03      	lsrs	r3, r0, #16
   336cc:	428b      	cmp	r3, r1
   336ce:	d302      	bcc.n	336d6 <__udivsi3+0x32>
   336d0:	1212      	asrs	r2, r2, #8
   336d2:	0209      	lsls	r1, r1, #8
   336d4:	d065      	beq.n	337a2 <__udivsi3+0xfe>
   336d6:	0b03      	lsrs	r3, r0, #12
   336d8:	428b      	cmp	r3, r1
   336da:	d319      	bcc.n	33710 <__udivsi3+0x6c>
   336dc:	e000      	b.n	336e0 <__udivsi3+0x3c>
   336de:	0a09      	lsrs	r1, r1, #8
   336e0:	0bc3      	lsrs	r3, r0, #15
   336e2:	428b      	cmp	r3, r1
   336e4:	d301      	bcc.n	336ea <__udivsi3+0x46>
   336e6:	03cb      	lsls	r3, r1, #15
   336e8:	1ac0      	subs	r0, r0, r3
   336ea:	4152      	adcs	r2, r2
   336ec:	0b83      	lsrs	r3, r0, #14
   336ee:	428b      	cmp	r3, r1
   336f0:	d301      	bcc.n	336f6 <__udivsi3+0x52>
   336f2:	038b      	lsls	r3, r1, #14
   336f4:	1ac0      	subs	r0, r0, r3
   336f6:	4152      	adcs	r2, r2
   336f8:	0b43      	lsrs	r3, r0, #13
   336fa:	428b      	cmp	r3, r1
   336fc:	d301      	bcc.n	33702 <__udivsi3+0x5e>
   336fe:	034b      	lsls	r3, r1, #13
   33700:	1ac0      	subs	r0, r0, r3
   33702:	4152      	adcs	r2, r2
   33704:	0b03      	lsrs	r3, r0, #12
   33706:	428b      	cmp	r3, r1
   33708:	d301      	bcc.n	3370e <__udivsi3+0x6a>
   3370a:	030b      	lsls	r3, r1, #12
   3370c:	1ac0      	subs	r0, r0, r3
   3370e:	4152      	adcs	r2, r2
   33710:	0ac3      	lsrs	r3, r0, #11
   33712:	428b      	cmp	r3, r1
   33714:	d301      	bcc.n	3371a <__udivsi3+0x76>
   33716:	02cb      	lsls	r3, r1, #11
   33718:	1ac0      	subs	r0, r0, r3
   3371a:	4152      	adcs	r2, r2
   3371c:	0a83      	lsrs	r3, r0, #10
   3371e:	428b      	cmp	r3, r1
   33720:	d301      	bcc.n	33726 <__udivsi3+0x82>
   33722:	028b      	lsls	r3, r1, #10
   33724:	1ac0      	subs	r0, r0, r3
   33726:	4152      	adcs	r2, r2
   33728:	0a43      	lsrs	r3, r0, #9
   3372a:	428b      	cmp	r3, r1
   3372c:	d301      	bcc.n	33732 <__udivsi3+0x8e>
   3372e:	024b      	lsls	r3, r1, #9
   33730:	1ac0      	subs	r0, r0, r3
   33732:	4152      	adcs	r2, r2
   33734:	0a03      	lsrs	r3, r0, #8
   33736:	428b      	cmp	r3, r1
   33738:	d301      	bcc.n	3373e <__udivsi3+0x9a>
   3373a:	020b      	lsls	r3, r1, #8
   3373c:	1ac0      	subs	r0, r0, r3
   3373e:	4152      	adcs	r2, r2
   33740:	d2cd      	bcs.n	336de <__udivsi3+0x3a>
   33742:	09c3      	lsrs	r3, r0, #7
   33744:	428b      	cmp	r3, r1
   33746:	d301      	bcc.n	3374c <__udivsi3+0xa8>
   33748:	01cb      	lsls	r3, r1, #7
   3374a:	1ac0      	subs	r0, r0, r3
   3374c:	4152      	adcs	r2, r2
   3374e:	0983      	lsrs	r3, r0, #6
   33750:	428b      	cmp	r3, r1
   33752:	d301      	bcc.n	33758 <__udivsi3+0xb4>
   33754:	018b      	lsls	r3, r1, #6
   33756:	1ac0      	subs	r0, r0, r3
   33758:	4152      	adcs	r2, r2
   3375a:	0943      	lsrs	r3, r0, #5
   3375c:	428b      	cmp	r3, r1
   3375e:	d301      	bcc.n	33764 <__udivsi3+0xc0>
   33760:	014b      	lsls	r3, r1, #5
   33762:	1ac0      	subs	r0, r0, r3
   33764:	4152      	adcs	r2, r2
   33766:	0903      	lsrs	r3, r0, #4
   33768:	428b      	cmp	r3, r1
   3376a:	d301      	bcc.n	33770 <__udivsi3+0xcc>
   3376c:	010b      	lsls	r3, r1, #4
   3376e:	1ac0      	subs	r0, r0, r3
   33770:	4152      	adcs	r2, r2
   33772:	08c3      	lsrs	r3, r0, #3
   33774:	428b      	cmp	r3, r1
   33776:	d301      	bcc.n	3377c <__udivsi3+0xd8>
   33778:	00cb      	lsls	r3, r1, #3
   3377a:	1ac0      	subs	r0, r0, r3
   3377c:	4152      	adcs	r2, r2
   3377e:	0883      	lsrs	r3, r0, #2
   33780:	428b      	cmp	r3, r1
   33782:	d301      	bcc.n	33788 <__udivsi3+0xe4>
   33784:	008b      	lsls	r3, r1, #2
   33786:	1ac0      	subs	r0, r0, r3
   33788:	4152      	adcs	r2, r2
   3378a:	0843      	lsrs	r3, r0, #1
   3378c:	428b      	cmp	r3, r1
   3378e:	d301      	bcc.n	33794 <__udivsi3+0xf0>
   33790:	004b      	lsls	r3, r1, #1
   33792:	1ac0      	subs	r0, r0, r3
   33794:	4152      	adcs	r2, r2
   33796:	1a41      	subs	r1, r0, r1
   33798:	d200      	bcs.n	3379c <__udivsi3+0xf8>
   3379a:	4601      	mov	r1, r0
   3379c:	4152      	adcs	r2, r2
   3379e:	4610      	mov	r0, r2
   337a0:	4770      	bx	lr
   337a2:	e7ff      	b.n	337a4 <__udivsi3+0x100>
   337a4:	b501      	push	{r0, lr}
   337a6:	2000      	movs	r0, #0
   337a8:	f000 f8f0 	bl	3398c <__aeabi_idiv0>
   337ac:	bd02      	pop	{r1, pc}
   337ae:	46c0      	nop			; (mov r8, r8)

000337b0 <__aeabi_uidivmod>:
   337b0:	2900      	cmp	r1, #0
   337b2:	d0f7      	beq.n	337a4 <__udivsi3+0x100>
   337b4:	e776      	b.n	336a4 <__udivsi3>
   337b6:	4770      	bx	lr

000337b8 <__divsi3>:
   337b8:	4603      	mov	r3, r0
   337ba:	430b      	orrs	r3, r1
   337bc:	d47f      	bmi.n	338be <__divsi3+0x106>
   337be:	2200      	movs	r2, #0
   337c0:	0843      	lsrs	r3, r0, #1
   337c2:	428b      	cmp	r3, r1
   337c4:	d374      	bcc.n	338b0 <__divsi3+0xf8>
   337c6:	0903      	lsrs	r3, r0, #4
   337c8:	428b      	cmp	r3, r1
   337ca:	d35f      	bcc.n	3388c <__divsi3+0xd4>
   337cc:	0a03      	lsrs	r3, r0, #8
   337ce:	428b      	cmp	r3, r1
   337d0:	d344      	bcc.n	3385c <__divsi3+0xa4>
   337d2:	0b03      	lsrs	r3, r0, #12
   337d4:	428b      	cmp	r3, r1
   337d6:	d328      	bcc.n	3382a <__divsi3+0x72>
   337d8:	0c03      	lsrs	r3, r0, #16
   337da:	428b      	cmp	r3, r1
   337dc:	d30d      	bcc.n	337fa <__divsi3+0x42>
   337de:	22ff      	movs	r2, #255	; 0xff
   337e0:	0209      	lsls	r1, r1, #8
   337e2:	ba12      	rev	r2, r2
   337e4:	0c03      	lsrs	r3, r0, #16
   337e6:	428b      	cmp	r3, r1
   337e8:	d302      	bcc.n	337f0 <__divsi3+0x38>
   337ea:	1212      	asrs	r2, r2, #8
   337ec:	0209      	lsls	r1, r1, #8
   337ee:	d065      	beq.n	338bc <__divsi3+0x104>
   337f0:	0b03      	lsrs	r3, r0, #12
   337f2:	428b      	cmp	r3, r1
   337f4:	d319      	bcc.n	3382a <__divsi3+0x72>
   337f6:	e000      	b.n	337fa <__divsi3+0x42>
   337f8:	0a09      	lsrs	r1, r1, #8
   337fa:	0bc3      	lsrs	r3, r0, #15
   337fc:	428b      	cmp	r3, r1
   337fe:	d301      	bcc.n	33804 <__divsi3+0x4c>
   33800:	03cb      	lsls	r3, r1, #15
   33802:	1ac0      	subs	r0, r0, r3
   33804:	4152      	adcs	r2, r2
   33806:	0b83      	lsrs	r3, r0, #14
   33808:	428b      	cmp	r3, r1
   3380a:	d301      	bcc.n	33810 <__divsi3+0x58>
   3380c:	038b      	lsls	r3, r1, #14
   3380e:	1ac0      	subs	r0, r0, r3
   33810:	4152      	adcs	r2, r2
   33812:	0b43      	lsrs	r3, r0, #13
   33814:	428b      	cmp	r3, r1
   33816:	d301      	bcc.n	3381c <__divsi3+0x64>
   33818:	034b      	lsls	r3, r1, #13
   3381a:	1ac0      	subs	r0, r0, r3
   3381c:	4152      	adcs	r2, r2
   3381e:	0b03      	lsrs	r3, r0, #12
   33820:	428b      	cmp	r3, r1
   33822:	d301      	bcc.n	33828 <__divsi3+0x70>
   33824:	030b      	lsls	r3, r1, #12
   33826:	1ac0      	subs	r0, r0, r3
   33828:	4152      	adcs	r2, r2
   3382a:	0ac3      	lsrs	r3, r0, #11
   3382c:	428b      	cmp	r3, r1
   3382e:	d301      	bcc.n	33834 <__divsi3+0x7c>
   33830:	02cb      	lsls	r3, r1, #11
   33832:	1ac0      	subs	r0, r0, r3
   33834:	4152      	adcs	r2, r2
   33836:	0a83      	lsrs	r3, r0, #10
   33838:	428b      	cmp	r3, r1
   3383a:	d301      	bcc.n	33840 <__divsi3+0x88>
   3383c:	028b      	lsls	r3, r1, #10
   3383e:	1ac0      	subs	r0, r0, r3
   33840:	4152      	adcs	r2, r2
   33842:	0a43      	lsrs	r3, r0, #9
   33844:	428b      	cmp	r3, r1
   33846:	d301      	bcc.n	3384c <__divsi3+0x94>
   33848:	024b      	lsls	r3, r1, #9
   3384a:	1ac0      	subs	r0, r0, r3
   3384c:	4152      	adcs	r2, r2
   3384e:	0a03      	lsrs	r3, r0, #8
   33850:	428b      	cmp	r3, r1
   33852:	d301      	bcc.n	33858 <__divsi3+0xa0>
   33854:	020b      	lsls	r3, r1, #8
   33856:	1ac0      	subs	r0, r0, r3
   33858:	4152      	adcs	r2, r2
   3385a:	d2cd      	bcs.n	337f8 <__divsi3+0x40>
   3385c:	09c3      	lsrs	r3, r0, #7
   3385e:	428b      	cmp	r3, r1
   33860:	d301      	bcc.n	33866 <__divsi3+0xae>
   33862:	01cb      	lsls	r3, r1, #7
   33864:	1ac0      	subs	r0, r0, r3
   33866:	4152      	adcs	r2, r2
   33868:	0983      	lsrs	r3, r0, #6
   3386a:	428b      	cmp	r3, r1
   3386c:	d301      	bcc.n	33872 <__divsi3+0xba>
   3386e:	018b      	lsls	r3, r1, #6
   33870:	1ac0      	subs	r0, r0, r3
   33872:	4152      	adcs	r2, r2
   33874:	0943      	lsrs	r3, r0, #5
   33876:	428b      	cmp	r3, r1
   33878:	d301      	bcc.n	3387e <__divsi3+0xc6>
   3387a:	014b      	lsls	r3, r1, #5
   3387c:	1ac0      	subs	r0, r0, r3
   3387e:	4152      	adcs	r2, r2
   33880:	0903      	lsrs	r3, r0, #4
   33882:	428b      	cmp	r3, r1
   33884:	d301      	bcc.n	3388a <__divsi3+0xd2>
   33886:	010b      	lsls	r3, r1, #4
   33888:	1ac0      	subs	r0, r0, r3
   3388a:	4152      	adcs	r2, r2
   3388c:	08c3      	lsrs	r3, r0, #3
   3388e:	428b      	cmp	r3, r1
   33890:	d301      	bcc.n	33896 <__divsi3+0xde>
   33892:	00cb      	lsls	r3, r1, #3
   33894:	1ac0      	subs	r0, r0, r3
   33896:	4152      	adcs	r2, r2
   33898:	0883      	lsrs	r3, r0, #2
   3389a:	428b      	cmp	r3, r1
   3389c:	d301      	bcc.n	338a2 <__divsi3+0xea>
   3389e:	008b      	lsls	r3, r1, #2
   338a0:	1ac0      	subs	r0, r0, r3
   338a2:	4152      	adcs	r2, r2
   338a4:	0843      	lsrs	r3, r0, #1
   338a6:	428b      	cmp	r3, r1
   338a8:	d301      	bcc.n	338ae <__divsi3+0xf6>
   338aa:	004b      	lsls	r3, r1, #1
   338ac:	1ac0      	subs	r0, r0, r3
   338ae:	4152      	adcs	r2, r2
   338b0:	1a41      	subs	r1, r0, r1
   338b2:	d200      	bcs.n	338b6 <__divsi3+0xfe>
   338b4:	4601      	mov	r1, r0
   338b6:	4152      	adcs	r2, r2
   338b8:	4610      	mov	r0, r2
   338ba:	4770      	bx	lr
   338bc:	e05d      	b.n	3397a <__divsi3+0x1c2>
   338be:	0fca      	lsrs	r2, r1, #31
   338c0:	d000      	beq.n	338c4 <__divsi3+0x10c>
   338c2:	4249      	negs	r1, r1
   338c4:	1003      	asrs	r3, r0, #32
   338c6:	d300      	bcc.n	338ca <__divsi3+0x112>
   338c8:	4240      	negs	r0, r0
   338ca:	4053      	eors	r3, r2
   338cc:	2200      	movs	r2, #0
   338ce:	469c      	mov	ip, r3
   338d0:	0903      	lsrs	r3, r0, #4
   338d2:	428b      	cmp	r3, r1
   338d4:	d32d      	bcc.n	33932 <__divsi3+0x17a>
   338d6:	0a03      	lsrs	r3, r0, #8
   338d8:	428b      	cmp	r3, r1
   338da:	d312      	bcc.n	33902 <__divsi3+0x14a>
   338dc:	22fc      	movs	r2, #252	; 0xfc
   338de:	0189      	lsls	r1, r1, #6
   338e0:	ba12      	rev	r2, r2
   338e2:	0a03      	lsrs	r3, r0, #8
   338e4:	428b      	cmp	r3, r1
   338e6:	d30c      	bcc.n	33902 <__divsi3+0x14a>
   338e8:	0189      	lsls	r1, r1, #6
   338ea:	1192      	asrs	r2, r2, #6
   338ec:	428b      	cmp	r3, r1
   338ee:	d308      	bcc.n	33902 <__divsi3+0x14a>
   338f0:	0189      	lsls	r1, r1, #6
   338f2:	1192      	asrs	r2, r2, #6
   338f4:	428b      	cmp	r3, r1
   338f6:	d304      	bcc.n	33902 <__divsi3+0x14a>
   338f8:	0189      	lsls	r1, r1, #6
   338fa:	d03a      	beq.n	33972 <__divsi3+0x1ba>
   338fc:	1192      	asrs	r2, r2, #6
   338fe:	e000      	b.n	33902 <__divsi3+0x14a>
   33900:	0989      	lsrs	r1, r1, #6
   33902:	09c3      	lsrs	r3, r0, #7
   33904:	428b      	cmp	r3, r1
   33906:	d301      	bcc.n	3390c <__divsi3+0x154>
   33908:	01cb      	lsls	r3, r1, #7
   3390a:	1ac0      	subs	r0, r0, r3
   3390c:	4152      	adcs	r2, r2
   3390e:	0983      	lsrs	r3, r0, #6
   33910:	428b      	cmp	r3, r1
   33912:	d301      	bcc.n	33918 <__divsi3+0x160>
   33914:	018b      	lsls	r3, r1, #6
   33916:	1ac0      	subs	r0, r0, r3
   33918:	4152      	adcs	r2, r2
   3391a:	0943      	lsrs	r3, r0, #5
   3391c:	428b      	cmp	r3, r1
   3391e:	d301      	bcc.n	33924 <__divsi3+0x16c>
   33920:	014b      	lsls	r3, r1, #5
   33922:	1ac0      	subs	r0, r0, r3
   33924:	4152      	adcs	r2, r2
   33926:	0903      	lsrs	r3, r0, #4
   33928:	428b      	cmp	r3, r1
   3392a:	d301      	bcc.n	33930 <__divsi3+0x178>
   3392c:	010b      	lsls	r3, r1, #4
   3392e:	1ac0      	subs	r0, r0, r3
   33930:	4152      	adcs	r2, r2
   33932:	08c3      	lsrs	r3, r0, #3
   33934:	428b      	cmp	r3, r1
   33936:	d301      	bcc.n	3393c <__divsi3+0x184>
   33938:	00cb      	lsls	r3, r1, #3
   3393a:	1ac0      	subs	r0, r0, r3
   3393c:	4152      	adcs	r2, r2
   3393e:	0883      	lsrs	r3, r0, #2
   33940:	428b      	cmp	r3, r1
   33942:	d301      	bcc.n	33948 <__divsi3+0x190>
   33944:	008b      	lsls	r3, r1, #2
   33946:	1ac0      	subs	r0, r0, r3
   33948:	4152      	adcs	r2, r2
   3394a:	d2d9      	bcs.n	33900 <__divsi3+0x148>
   3394c:	0843      	lsrs	r3, r0, #1
   3394e:	428b      	cmp	r3, r1
   33950:	d301      	bcc.n	33956 <__divsi3+0x19e>
   33952:	004b      	lsls	r3, r1, #1
   33954:	1ac0      	subs	r0, r0, r3
   33956:	4152      	adcs	r2, r2
   33958:	1a41      	subs	r1, r0, r1
   3395a:	d200      	bcs.n	3395e <__divsi3+0x1a6>
   3395c:	4601      	mov	r1, r0
   3395e:	4663      	mov	r3, ip
   33960:	4152      	adcs	r2, r2
   33962:	105b      	asrs	r3, r3, #1
   33964:	4610      	mov	r0, r2
   33966:	d301      	bcc.n	3396c <__divsi3+0x1b4>
   33968:	4240      	negs	r0, r0
   3396a:	2b00      	cmp	r3, #0
   3396c:	d500      	bpl.n	33970 <__divsi3+0x1b8>
   3396e:	4249      	negs	r1, r1
   33970:	4770      	bx	lr
   33972:	4663      	mov	r3, ip
   33974:	105b      	asrs	r3, r3, #1
   33976:	d300      	bcc.n	3397a <__divsi3+0x1c2>
   33978:	4240      	negs	r0, r0
   3397a:	b501      	push	{r0, lr}
   3397c:	2000      	movs	r0, #0
   3397e:	f000 f805 	bl	3398c <__aeabi_idiv0>
   33982:	bd02      	pop	{r1, pc}

00033984 <__aeabi_idivmod>:
   33984:	2900      	cmp	r1, #0
   33986:	d0f8      	beq.n	3397a <__divsi3+0x1c2>
   33988:	e716      	b.n	337b8 <__divsi3>
   3398a:	4770      	bx	lr

0003398c <__aeabi_idiv0>:
   3398c:	4770      	bx	lr
   3398e:	46c0      	nop			; (mov r8, r8)

00033990 <__aeabi_lmul>:
   33990:	b5f0      	push	{r4, r5, r6, r7, lr}
   33992:	46ce      	mov	lr, r9
   33994:	4647      	mov	r7, r8
   33996:	0415      	lsls	r5, r2, #16
   33998:	0c2d      	lsrs	r5, r5, #16
   3399a:	002e      	movs	r6, r5
   3399c:	b580      	push	{r7, lr}
   3399e:	0407      	lsls	r7, r0, #16
   339a0:	0c14      	lsrs	r4, r2, #16
   339a2:	0c3f      	lsrs	r7, r7, #16
   339a4:	4699      	mov	r9, r3
   339a6:	0c03      	lsrs	r3, r0, #16
   339a8:	437e      	muls	r6, r7
   339aa:	435d      	muls	r5, r3
   339ac:	4367      	muls	r7, r4
   339ae:	4363      	muls	r3, r4
   339b0:	197f      	adds	r7, r7, r5
   339b2:	0c34      	lsrs	r4, r6, #16
   339b4:	19e4      	adds	r4, r4, r7
   339b6:	469c      	mov	ip, r3
   339b8:	42a5      	cmp	r5, r4
   339ba:	d903      	bls.n	339c4 <__aeabi_lmul+0x34>
   339bc:	2380      	movs	r3, #128	; 0x80
   339be:	025b      	lsls	r3, r3, #9
   339c0:	4698      	mov	r8, r3
   339c2:	44c4      	add	ip, r8
   339c4:	464b      	mov	r3, r9
   339c6:	4351      	muls	r1, r2
   339c8:	4343      	muls	r3, r0
   339ca:	0436      	lsls	r6, r6, #16
   339cc:	0c36      	lsrs	r6, r6, #16
   339ce:	0c25      	lsrs	r5, r4, #16
   339d0:	0424      	lsls	r4, r4, #16
   339d2:	4465      	add	r5, ip
   339d4:	19a4      	adds	r4, r4, r6
   339d6:	1859      	adds	r1, r3, r1
   339d8:	1949      	adds	r1, r1, r5
   339da:	0020      	movs	r0, r4
   339dc:	bc0c      	pop	{r2, r3}
   339de:	4690      	mov	r8, r2
   339e0:	4699      	mov	r9, r3
   339e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000339e4 <__aeabi_f2uiz>:
   339e4:	219e      	movs	r1, #158	; 0x9e
   339e6:	b510      	push	{r4, lr}
   339e8:	05c9      	lsls	r1, r1, #23
   339ea:	1c04      	adds	r4, r0, #0
   339ec:	f002 fae0 	bl	35fb0 <__aeabi_fcmpge>
   339f0:	2800      	cmp	r0, #0
   339f2:	d103      	bne.n	339fc <__aeabi_f2uiz+0x18>
   339f4:	1c20      	adds	r0, r4, #0
   339f6:	f000 fda3 	bl	34540 <__aeabi_f2iz>
   339fa:	bd10      	pop	{r4, pc}
   339fc:	219e      	movs	r1, #158	; 0x9e
   339fe:	1c20      	adds	r0, r4, #0
   33a00:	05c9      	lsls	r1, r1, #23
   33a02:	f000 fc01 	bl	34208 <__aeabi_fsub>
   33a06:	f000 fd9b 	bl	34540 <__aeabi_f2iz>
   33a0a:	2380      	movs	r3, #128	; 0x80
   33a0c:	061b      	lsls	r3, r3, #24
   33a0e:	469c      	mov	ip, r3
   33a10:	4460      	add	r0, ip
   33a12:	e7f2      	b.n	339fa <__aeabi_f2uiz+0x16>

00033a14 <__aeabi_fadd>:
   33a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a16:	46c6      	mov	lr, r8
   33a18:	024e      	lsls	r6, r1, #9
   33a1a:	0247      	lsls	r7, r0, #9
   33a1c:	0a76      	lsrs	r6, r6, #9
   33a1e:	0a7b      	lsrs	r3, r7, #9
   33a20:	0044      	lsls	r4, r0, #1
   33a22:	0fc5      	lsrs	r5, r0, #31
   33a24:	00f7      	lsls	r7, r6, #3
   33a26:	0048      	lsls	r0, r1, #1
   33a28:	4698      	mov	r8, r3
   33a2a:	b500      	push	{lr}
   33a2c:	0e24      	lsrs	r4, r4, #24
   33a2e:	002a      	movs	r2, r5
   33a30:	00db      	lsls	r3, r3, #3
   33a32:	0e00      	lsrs	r0, r0, #24
   33a34:	0fc9      	lsrs	r1, r1, #31
   33a36:	46bc      	mov	ip, r7
   33a38:	428d      	cmp	r5, r1
   33a3a:	d067      	beq.n	33b0c <__aeabi_fadd+0xf8>
   33a3c:	1a22      	subs	r2, r4, r0
   33a3e:	2a00      	cmp	r2, #0
   33a40:	dc00      	bgt.n	33a44 <__aeabi_fadd+0x30>
   33a42:	e0a5      	b.n	33b90 <__aeabi_fadd+0x17c>
   33a44:	2800      	cmp	r0, #0
   33a46:	d13a      	bne.n	33abe <__aeabi_fadd+0xaa>
   33a48:	2f00      	cmp	r7, #0
   33a4a:	d100      	bne.n	33a4e <__aeabi_fadd+0x3a>
   33a4c:	e093      	b.n	33b76 <__aeabi_fadd+0x162>
   33a4e:	1e51      	subs	r1, r2, #1
   33a50:	2900      	cmp	r1, #0
   33a52:	d000      	beq.n	33a56 <__aeabi_fadd+0x42>
   33a54:	e0bc      	b.n	33bd0 <__aeabi_fadd+0x1bc>
   33a56:	2401      	movs	r4, #1
   33a58:	1bdb      	subs	r3, r3, r7
   33a5a:	015a      	lsls	r2, r3, #5
   33a5c:	d546      	bpl.n	33aec <__aeabi_fadd+0xd8>
   33a5e:	019b      	lsls	r3, r3, #6
   33a60:	099e      	lsrs	r6, r3, #6
   33a62:	0030      	movs	r0, r6
   33a64:	f002 faae 	bl	35fc4 <__clzsi2>
   33a68:	3805      	subs	r0, #5
   33a6a:	4086      	lsls	r6, r0
   33a6c:	4284      	cmp	r4, r0
   33a6e:	dd00      	ble.n	33a72 <__aeabi_fadd+0x5e>
   33a70:	e09d      	b.n	33bae <__aeabi_fadd+0x19a>
   33a72:	1b04      	subs	r4, r0, r4
   33a74:	0032      	movs	r2, r6
   33a76:	2020      	movs	r0, #32
   33a78:	3401      	adds	r4, #1
   33a7a:	40e2      	lsrs	r2, r4
   33a7c:	1b04      	subs	r4, r0, r4
   33a7e:	40a6      	lsls	r6, r4
   33a80:	0033      	movs	r3, r6
   33a82:	1e5e      	subs	r6, r3, #1
   33a84:	41b3      	sbcs	r3, r6
   33a86:	2400      	movs	r4, #0
   33a88:	4313      	orrs	r3, r2
   33a8a:	075a      	lsls	r2, r3, #29
   33a8c:	d004      	beq.n	33a98 <__aeabi_fadd+0x84>
   33a8e:	220f      	movs	r2, #15
   33a90:	401a      	ands	r2, r3
   33a92:	2a04      	cmp	r2, #4
   33a94:	d000      	beq.n	33a98 <__aeabi_fadd+0x84>
   33a96:	3304      	adds	r3, #4
   33a98:	015a      	lsls	r2, r3, #5
   33a9a:	d529      	bpl.n	33af0 <__aeabi_fadd+0xdc>
   33a9c:	3401      	adds	r4, #1
   33a9e:	2cff      	cmp	r4, #255	; 0xff
   33aa0:	d100      	bne.n	33aa4 <__aeabi_fadd+0x90>
   33aa2:	e081      	b.n	33ba8 <__aeabi_fadd+0x194>
   33aa4:	002a      	movs	r2, r5
   33aa6:	019b      	lsls	r3, r3, #6
   33aa8:	0a5b      	lsrs	r3, r3, #9
   33aaa:	b2e4      	uxtb	r4, r4
   33aac:	025b      	lsls	r3, r3, #9
   33aae:	05e4      	lsls	r4, r4, #23
   33ab0:	0a58      	lsrs	r0, r3, #9
   33ab2:	07d2      	lsls	r2, r2, #31
   33ab4:	4320      	orrs	r0, r4
   33ab6:	4310      	orrs	r0, r2
   33ab8:	bc04      	pop	{r2}
   33aba:	4690      	mov	r8, r2
   33abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33abe:	2cff      	cmp	r4, #255	; 0xff
   33ac0:	d0e3      	beq.n	33a8a <__aeabi_fadd+0x76>
   33ac2:	2180      	movs	r1, #128	; 0x80
   33ac4:	0038      	movs	r0, r7
   33ac6:	04c9      	lsls	r1, r1, #19
   33ac8:	4308      	orrs	r0, r1
   33aca:	4684      	mov	ip, r0
   33acc:	2a1b      	cmp	r2, #27
   33ace:	dd00      	ble.n	33ad2 <__aeabi_fadd+0xbe>
   33ad0:	e082      	b.n	33bd8 <__aeabi_fadd+0x1c4>
   33ad2:	2020      	movs	r0, #32
   33ad4:	4661      	mov	r1, ip
   33ad6:	40d1      	lsrs	r1, r2
   33ad8:	1a82      	subs	r2, r0, r2
   33ada:	4660      	mov	r0, ip
   33adc:	4090      	lsls	r0, r2
   33ade:	0002      	movs	r2, r0
   33ae0:	1e50      	subs	r0, r2, #1
   33ae2:	4182      	sbcs	r2, r0
   33ae4:	430a      	orrs	r2, r1
   33ae6:	1a9b      	subs	r3, r3, r2
   33ae8:	015a      	lsls	r2, r3, #5
   33aea:	d4b8      	bmi.n	33a5e <__aeabi_fadd+0x4a>
   33aec:	075a      	lsls	r2, r3, #29
   33aee:	d1ce      	bne.n	33a8e <__aeabi_fadd+0x7a>
   33af0:	08de      	lsrs	r6, r3, #3
   33af2:	002a      	movs	r2, r5
   33af4:	2cff      	cmp	r4, #255	; 0xff
   33af6:	d13a      	bne.n	33b6e <__aeabi_fadd+0x15a>
   33af8:	2e00      	cmp	r6, #0
   33afa:	d100      	bne.n	33afe <__aeabi_fadd+0xea>
   33afc:	e0ae      	b.n	33c5c <__aeabi_fadd+0x248>
   33afe:	2380      	movs	r3, #128	; 0x80
   33b00:	03db      	lsls	r3, r3, #15
   33b02:	4333      	orrs	r3, r6
   33b04:	025b      	lsls	r3, r3, #9
   33b06:	0a5b      	lsrs	r3, r3, #9
   33b08:	24ff      	movs	r4, #255	; 0xff
   33b0a:	e7cf      	b.n	33aac <__aeabi_fadd+0x98>
   33b0c:	1a21      	subs	r1, r4, r0
   33b0e:	2900      	cmp	r1, #0
   33b10:	dd52      	ble.n	33bb8 <__aeabi_fadd+0x1a4>
   33b12:	2800      	cmp	r0, #0
   33b14:	d031      	beq.n	33b7a <__aeabi_fadd+0x166>
   33b16:	2cff      	cmp	r4, #255	; 0xff
   33b18:	d0b7      	beq.n	33a8a <__aeabi_fadd+0x76>
   33b1a:	2080      	movs	r0, #128	; 0x80
   33b1c:	003e      	movs	r6, r7
   33b1e:	04c0      	lsls	r0, r0, #19
   33b20:	4306      	orrs	r6, r0
   33b22:	46b4      	mov	ip, r6
   33b24:	291b      	cmp	r1, #27
   33b26:	dd00      	ble.n	33b2a <__aeabi_fadd+0x116>
   33b28:	e0aa      	b.n	33c80 <__aeabi_fadd+0x26c>
   33b2a:	2620      	movs	r6, #32
   33b2c:	4660      	mov	r0, ip
   33b2e:	40c8      	lsrs	r0, r1
   33b30:	1a71      	subs	r1, r6, r1
   33b32:	4666      	mov	r6, ip
   33b34:	408e      	lsls	r6, r1
   33b36:	0031      	movs	r1, r6
   33b38:	1e4e      	subs	r6, r1, #1
   33b3a:	41b1      	sbcs	r1, r6
   33b3c:	4301      	orrs	r1, r0
   33b3e:	185b      	adds	r3, r3, r1
   33b40:	0159      	lsls	r1, r3, #5
   33b42:	d5d3      	bpl.n	33aec <__aeabi_fadd+0xd8>
   33b44:	3401      	adds	r4, #1
   33b46:	2cff      	cmp	r4, #255	; 0xff
   33b48:	d100      	bne.n	33b4c <__aeabi_fadd+0x138>
   33b4a:	e087      	b.n	33c5c <__aeabi_fadd+0x248>
   33b4c:	2201      	movs	r2, #1
   33b4e:	4978      	ldr	r1, [pc, #480]	; (33d30 <__aeabi_fadd+0x31c>)
   33b50:	401a      	ands	r2, r3
   33b52:	085b      	lsrs	r3, r3, #1
   33b54:	400b      	ands	r3, r1
   33b56:	4313      	orrs	r3, r2
   33b58:	e797      	b.n	33a8a <__aeabi_fadd+0x76>
   33b5a:	2c00      	cmp	r4, #0
   33b5c:	d000      	beq.n	33b60 <__aeabi_fadd+0x14c>
   33b5e:	e0a7      	b.n	33cb0 <__aeabi_fadd+0x29c>
   33b60:	2b00      	cmp	r3, #0
   33b62:	d000      	beq.n	33b66 <__aeabi_fadd+0x152>
   33b64:	e0b6      	b.n	33cd4 <__aeabi_fadd+0x2c0>
   33b66:	1e3b      	subs	r3, r7, #0
   33b68:	d162      	bne.n	33c30 <__aeabi_fadd+0x21c>
   33b6a:	2600      	movs	r6, #0
   33b6c:	2200      	movs	r2, #0
   33b6e:	0273      	lsls	r3, r6, #9
   33b70:	0a5b      	lsrs	r3, r3, #9
   33b72:	b2e4      	uxtb	r4, r4
   33b74:	e79a      	b.n	33aac <__aeabi_fadd+0x98>
   33b76:	0014      	movs	r4, r2
   33b78:	e787      	b.n	33a8a <__aeabi_fadd+0x76>
   33b7a:	2f00      	cmp	r7, #0
   33b7c:	d04d      	beq.n	33c1a <__aeabi_fadd+0x206>
   33b7e:	1e48      	subs	r0, r1, #1
   33b80:	2800      	cmp	r0, #0
   33b82:	d157      	bne.n	33c34 <__aeabi_fadd+0x220>
   33b84:	4463      	add	r3, ip
   33b86:	2401      	movs	r4, #1
   33b88:	015a      	lsls	r2, r3, #5
   33b8a:	d5af      	bpl.n	33aec <__aeabi_fadd+0xd8>
   33b8c:	2402      	movs	r4, #2
   33b8e:	e7dd      	b.n	33b4c <__aeabi_fadd+0x138>
   33b90:	2a00      	cmp	r2, #0
   33b92:	d124      	bne.n	33bde <__aeabi_fadd+0x1ca>
   33b94:	1c62      	adds	r2, r4, #1
   33b96:	b2d2      	uxtb	r2, r2
   33b98:	2a01      	cmp	r2, #1
   33b9a:	ddde      	ble.n	33b5a <__aeabi_fadd+0x146>
   33b9c:	1bde      	subs	r6, r3, r7
   33b9e:	0172      	lsls	r2, r6, #5
   33ba0:	d535      	bpl.n	33c0e <__aeabi_fadd+0x1fa>
   33ba2:	1afe      	subs	r6, r7, r3
   33ba4:	000d      	movs	r5, r1
   33ba6:	e75c      	b.n	33a62 <__aeabi_fadd+0x4e>
   33ba8:	002a      	movs	r2, r5
   33baa:	2300      	movs	r3, #0
   33bac:	e77e      	b.n	33aac <__aeabi_fadd+0x98>
   33bae:	0033      	movs	r3, r6
   33bb0:	4a60      	ldr	r2, [pc, #384]	; (33d34 <__aeabi_fadd+0x320>)
   33bb2:	1a24      	subs	r4, r4, r0
   33bb4:	4013      	ands	r3, r2
   33bb6:	e768      	b.n	33a8a <__aeabi_fadd+0x76>
   33bb8:	2900      	cmp	r1, #0
   33bba:	d163      	bne.n	33c84 <__aeabi_fadd+0x270>
   33bbc:	1c61      	adds	r1, r4, #1
   33bbe:	b2c8      	uxtb	r0, r1
   33bc0:	2801      	cmp	r0, #1
   33bc2:	dd4e      	ble.n	33c62 <__aeabi_fadd+0x24e>
   33bc4:	29ff      	cmp	r1, #255	; 0xff
   33bc6:	d049      	beq.n	33c5c <__aeabi_fadd+0x248>
   33bc8:	4463      	add	r3, ip
   33bca:	085b      	lsrs	r3, r3, #1
   33bcc:	000c      	movs	r4, r1
   33bce:	e75c      	b.n	33a8a <__aeabi_fadd+0x76>
   33bd0:	2aff      	cmp	r2, #255	; 0xff
   33bd2:	d041      	beq.n	33c58 <__aeabi_fadd+0x244>
   33bd4:	000a      	movs	r2, r1
   33bd6:	e779      	b.n	33acc <__aeabi_fadd+0xb8>
   33bd8:	2201      	movs	r2, #1
   33bda:	1a9b      	subs	r3, r3, r2
   33bdc:	e784      	b.n	33ae8 <__aeabi_fadd+0xd4>
   33bde:	2c00      	cmp	r4, #0
   33be0:	d01d      	beq.n	33c1e <__aeabi_fadd+0x20a>
   33be2:	28ff      	cmp	r0, #255	; 0xff
   33be4:	d022      	beq.n	33c2c <__aeabi_fadd+0x218>
   33be6:	2480      	movs	r4, #128	; 0x80
   33be8:	04e4      	lsls	r4, r4, #19
   33bea:	4252      	negs	r2, r2
   33bec:	4323      	orrs	r3, r4
   33bee:	2a1b      	cmp	r2, #27
   33bf0:	dd00      	ble.n	33bf4 <__aeabi_fadd+0x1e0>
   33bf2:	e08a      	b.n	33d0a <__aeabi_fadd+0x2f6>
   33bf4:	001c      	movs	r4, r3
   33bf6:	2520      	movs	r5, #32
   33bf8:	40d4      	lsrs	r4, r2
   33bfa:	1aaa      	subs	r2, r5, r2
   33bfc:	4093      	lsls	r3, r2
   33bfe:	1e5a      	subs	r2, r3, #1
   33c00:	4193      	sbcs	r3, r2
   33c02:	4323      	orrs	r3, r4
   33c04:	4662      	mov	r2, ip
   33c06:	0004      	movs	r4, r0
   33c08:	1ad3      	subs	r3, r2, r3
   33c0a:	000d      	movs	r5, r1
   33c0c:	e725      	b.n	33a5a <__aeabi_fadd+0x46>
   33c0e:	2e00      	cmp	r6, #0
   33c10:	d000      	beq.n	33c14 <__aeabi_fadd+0x200>
   33c12:	e726      	b.n	33a62 <__aeabi_fadd+0x4e>
   33c14:	2200      	movs	r2, #0
   33c16:	2400      	movs	r4, #0
   33c18:	e7a9      	b.n	33b6e <__aeabi_fadd+0x15a>
   33c1a:	000c      	movs	r4, r1
   33c1c:	e735      	b.n	33a8a <__aeabi_fadd+0x76>
   33c1e:	2b00      	cmp	r3, #0
   33c20:	d04d      	beq.n	33cbe <__aeabi_fadd+0x2aa>
   33c22:	43d2      	mvns	r2, r2
   33c24:	2a00      	cmp	r2, #0
   33c26:	d0ed      	beq.n	33c04 <__aeabi_fadd+0x1f0>
   33c28:	28ff      	cmp	r0, #255	; 0xff
   33c2a:	d1e0      	bne.n	33bee <__aeabi_fadd+0x1da>
   33c2c:	4663      	mov	r3, ip
   33c2e:	24ff      	movs	r4, #255	; 0xff
   33c30:	000d      	movs	r5, r1
   33c32:	e72a      	b.n	33a8a <__aeabi_fadd+0x76>
   33c34:	29ff      	cmp	r1, #255	; 0xff
   33c36:	d00f      	beq.n	33c58 <__aeabi_fadd+0x244>
   33c38:	0001      	movs	r1, r0
   33c3a:	e773      	b.n	33b24 <__aeabi_fadd+0x110>
   33c3c:	2b00      	cmp	r3, #0
   33c3e:	d061      	beq.n	33d04 <__aeabi_fadd+0x2f0>
   33c40:	24ff      	movs	r4, #255	; 0xff
   33c42:	2f00      	cmp	r7, #0
   33c44:	d100      	bne.n	33c48 <__aeabi_fadd+0x234>
   33c46:	e720      	b.n	33a8a <__aeabi_fadd+0x76>
   33c48:	2280      	movs	r2, #128	; 0x80
   33c4a:	4641      	mov	r1, r8
   33c4c:	03d2      	lsls	r2, r2, #15
   33c4e:	4211      	tst	r1, r2
   33c50:	d002      	beq.n	33c58 <__aeabi_fadd+0x244>
   33c52:	4216      	tst	r6, r2
   33c54:	d100      	bne.n	33c58 <__aeabi_fadd+0x244>
   33c56:	003b      	movs	r3, r7
   33c58:	24ff      	movs	r4, #255	; 0xff
   33c5a:	e716      	b.n	33a8a <__aeabi_fadd+0x76>
   33c5c:	24ff      	movs	r4, #255	; 0xff
   33c5e:	2300      	movs	r3, #0
   33c60:	e724      	b.n	33aac <__aeabi_fadd+0x98>
   33c62:	2c00      	cmp	r4, #0
   33c64:	d1ea      	bne.n	33c3c <__aeabi_fadd+0x228>
   33c66:	2b00      	cmp	r3, #0
   33c68:	d058      	beq.n	33d1c <__aeabi_fadd+0x308>
   33c6a:	2f00      	cmp	r7, #0
   33c6c:	d100      	bne.n	33c70 <__aeabi_fadd+0x25c>
   33c6e:	e70c      	b.n	33a8a <__aeabi_fadd+0x76>
   33c70:	4463      	add	r3, ip
   33c72:	015a      	lsls	r2, r3, #5
   33c74:	d400      	bmi.n	33c78 <__aeabi_fadd+0x264>
   33c76:	e739      	b.n	33aec <__aeabi_fadd+0xd8>
   33c78:	4a2e      	ldr	r2, [pc, #184]	; (33d34 <__aeabi_fadd+0x320>)
   33c7a:	000c      	movs	r4, r1
   33c7c:	4013      	ands	r3, r2
   33c7e:	e704      	b.n	33a8a <__aeabi_fadd+0x76>
   33c80:	2101      	movs	r1, #1
   33c82:	e75c      	b.n	33b3e <__aeabi_fadd+0x12a>
   33c84:	2c00      	cmp	r4, #0
   33c86:	d11e      	bne.n	33cc6 <__aeabi_fadd+0x2b2>
   33c88:	2b00      	cmp	r3, #0
   33c8a:	d040      	beq.n	33d0e <__aeabi_fadd+0x2fa>
   33c8c:	43c9      	mvns	r1, r1
   33c8e:	2900      	cmp	r1, #0
   33c90:	d00b      	beq.n	33caa <__aeabi_fadd+0x296>
   33c92:	28ff      	cmp	r0, #255	; 0xff
   33c94:	d036      	beq.n	33d04 <__aeabi_fadd+0x2f0>
   33c96:	291b      	cmp	r1, #27
   33c98:	dc47      	bgt.n	33d2a <__aeabi_fadd+0x316>
   33c9a:	001c      	movs	r4, r3
   33c9c:	2620      	movs	r6, #32
   33c9e:	40cc      	lsrs	r4, r1
   33ca0:	1a71      	subs	r1, r6, r1
   33ca2:	408b      	lsls	r3, r1
   33ca4:	1e59      	subs	r1, r3, #1
   33ca6:	418b      	sbcs	r3, r1
   33ca8:	4323      	orrs	r3, r4
   33caa:	4463      	add	r3, ip
   33cac:	0004      	movs	r4, r0
   33cae:	e747      	b.n	33b40 <__aeabi_fadd+0x12c>
   33cb0:	2b00      	cmp	r3, #0
   33cb2:	d118      	bne.n	33ce6 <__aeabi_fadd+0x2d2>
   33cb4:	1e3b      	subs	r3, r7, #0
   33cb6:	d02d      	beq.n	33d14 <__aeabi_fadd+0x300>
   33cb8:	000d      	movs	r5, r1
   33cba:	24ff      	movs	r4, #255	; 0xff
   33cbc:	e6e5      	b.n	33a8a <__aeabi_fadd+0x76>
   33cbe:	003b      	movs	r3, r7
   33cc0:	0004      	movs	r4, r0
   33cc2:	000d      	movs	r5, r1
   33cc4:	e6e1      	b.n	33a8a <__aeabi_fadd+0x76>
   33cc6:	28ff      	cmp	r0, #255	; 0xff
   33cc8:	d01c      	beq.n	33d04 <__aeabi_fadd+0x2f0>
   33cca:	2480      	movs	r4, #128	; 0x80
   33ccc:	04e4      	lsls	r4, r4, #19
   33cce:	4249      	negs	r1, r1
   33cd0:	4323      	orrs	r3, r4
   33cd2:	e7e0      	b.n	33c96 <__aeabi_fadd+0x282>
   33cd4:	2f00      	cmp	r7, #0
   33cd6:	d100      	bne.n	33cda <__aeabi_fadd+0x2c6>
   33cd8:	e6d7      	b.n	33a8a <__aeabi_fadd+0x76>
   33cda:	1bde      	subs	r6, r3, r7
   33cdc:	0172      	lsls	r2, r6, #5
   33cde:	d51f      	bpl.n	33d20 <__aeabi_fadd+0x30c>
   33ce0:	1afb      	subs	r3, r7, r3
   33ce2:	000d      	movs	r5, r1
   33ce4:	e6d1      	b.n	33a8a <__aeabi_fadd+0x76>
   33ce6:	24ff      	movs	r4, #255	; 0xff
   33ce8:	2f00      	cmp	r7, #0
   33cea:	d100      	bne.n	33cee <__aeabi_fadd+0x2da>
   33cec:	e6cd      	b.n	33a8a <__aeabi_fadd+0x76>
   33cee:	2280      	movs	r2, #128	; 0x80
   33cf0:	4640      	mov	r0, r8
   33cf2:	03d2      	lsls	r2, r2, #15
   33cf4:	4210      	tst	r0, r2
   33cf6:	d0af      	beq.n	33c58 <__aeabi_fadd+0x244>
   33cf8:	4216      	tst	r6, r2
   33cfa:	d1ad      	bne.n	33c58 <__aeabi_fadd+0x244>
   33cfc:	003b      	movs	r3, r7
   33cfe:	000d      	movs	r5, r1
   33d00:	24ff      	movs	r4, #255	; 0xff
   33d02:	e6c2      	b.n	33a8a <__aeabi_fadd+0x76>
   33d04:	4663      	mov	r3, ip
   33d06:	24ff      	movs	r4, #255	; 0xff
   33d08:	e6bf      	b.n	33a8a <__aeabi_fadd+0x76>
   33d0a:	2301      	movs	r3, #1
   33d0c:	e77a      	b.n	33c04 <__aeabi_fadd+0x1f0>
   33d0e:	003b      	movs	r3, r7
   33d10:	0004      	movs	r4, r0
   33d12:	e6ba      	b.n	33a8a <__aeabi_fadd+0x76>
   33d14:	2680      	movs	r6, #128	; 0x80
   33d16:	2200      	movs	r2, #0
   33d18:	03f6      	lsls	r6, r6, #15
   33d1a:	e6f0      	b.n	33afe <__aeabi_fadd+0xea>
   33d1c:	003b      	movs	r3, r7
   33d1e:	e6b4      	b.n	33a8a <__aeabi_fadd+0x76>
   33d20:	1e33      	subs	r3, r6, #0
   33d22:	d000      	beq.n	33d26 <__aeabi_fadd+0x312>
   33d24:	e6e2      	b.n	33aec <__aeabi_fadd+0xd8>
   33d26:	2200      	movs	r2, #0
   33d28:	e721      	b.n	33b6e <__aeabi_fadd+0x15a>
   33d2a:	2301      	movs	r3, #1
   33d2c:	e7bd      	b.n	33caa <__aeabi_fadd+0x296>
   33d2e:	46c0      	nop			; (mov r8, r8)
   33d30:	7dffffff 	.word	0x7dffffff
   33d34:	fbffffff 	.word	0xfbffffff

00033d38 <__aeabi_fdiv>:
   33d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   33d3a:	4657      	mov	r7, sl
   33d3c:	464e      	mov	r6, r9
   33d3e:	46de      	mov	lr, fp
   33d40:	4645      	mov	r5, r8
   33d42:	b5e0      	push	{r5, r6, r7, lr}
   33d44:	0244      	lsls	r4, r0, #9
   33d46:	0043      	lsls	r3, r0, #1
   33d48:	0fc6      	lsrs	r6, r0, #31
   33d4a:	b083      	sub	sp, #12
   33d4c:	1c0f      	adds	r7, r1, #0
   33d4e:	0a64      	lsrs	r4, r4, #9
   33d50:	0e1b      	lsrs	r3, r3, #24
   33d52:	46b2      	mov	sl, r6
   33d54:	d053      	beq.n	33dfe <__aeabi_fdiv+0xc6>
   33d56:	2bff      	cmp	r3, #255	; 0xff
   33d58:	d027      	beq.n	33daa <__aeabi_fdiv+0x72>
   33d5a:	2280      	movs	r2, #128	; 0x80
   33d5c:	00e4      	lsls	r4, r4, #3
   33d5e:	04d2      	lsls	r2, r2, #19
   33d60:	4314      	orrs	r4, r2
   33d62:	227f      	movs	r2, #127	; 0x7f
   33d64:	4252      	negs	r2, r2
   33d66:	4690      	mov	r8, r2
   33d68:	4498      	add	r8, r3
   33d6a:	2300      	movs	r3, #0
   33d6c:	4699      	mov	r9, r3
   33d6e:	469b      	mov	fp, r3
   33d70:	027d      	lsls	r5, r7, #9
   33d72:	0078      	lsls	r0, r7, #1
   33d74:	0ffb      	lsrs	r3, r7, #31
   33d76:	0a6d      	lsrs	r5, r5, #9
   33d78:	0e00      	lsrs	r0, r0, #24
   33d7a:	9300      	str	r3, [sp, #0]
   33d7c:	d024      	beq.n	33dc8 <__aeabi_fdiv+0x90>
   33d7e:	28ff      	cmp	r0, #255	; 0xff
   33d80:	d046      	beq.n	33e10 <__aeabi_fdiv+0xd8>
   33d82:	2380      	movs	r3, #128	; 0x80
   33d84:	2100      	movs	r1, #0
   33d86:	00ed      	lsls	r5, r5, #3
   33d88:	04db      	lsls	r3, r3, #19
   33d8a:	431d      	orrs	r5, r3
   33d8c:	387f      	subs	r0, #127	; 0x7f
   33d8e:	4647      	mov	r7, r8
   33d90:	1a38      	subs	r0, r7, r0
   33d92:	464f      	mov	r7, r9
   33d94:	430f      	orrs	r7, r1
   33d96:	00bf      	lsls	r7, r7, #2
   33d98:	46b9      	mov	r9, r7
   33d9a:	0033      	movs	r3, r6
   33d9c:	9a00      	ldr	r2, [sp, #0]
   33d9e:	4f87      	ldr	r7, [pc, #540]	; (33fbc <__aeabi_fdiv+0x284>)
   33da0:	4053      	eors	r3, r2
   33da2:	464a      	mov	r2, r9
   33da4:	58ba      	ldr	r2, [r7, r2]
   33da6:	9301      	str	r3, [sp, #4]
   33da8:	4697      	mov	pc, r2
   33daa:	2c00      	cmp	r4, #0
   33dac:	d14e      	bne.n	33e4c <__aeabi_fdiv+0x114>
   33dae:	2308      	movs	r3, #8
   33db0:	4699      	mov	r9, r3
   33db2:	33f7      	adds	r3, #247	; 0xf7
   33db4:	4698      	mov	r8, r3
   33db6:	3bfd      	subs	r3, #253	; 0xfd
   33db8:	469b      	mov	fp, r3
   33dba:	027d      	lsls	r5, r7, #9
   33dbc:	0078      	lsls	r0, r7, #1
   33dbe:	0ffb      	lsrs	r3, r7, #31
   33dc0:	0a6d      	lsrs	r5, r5, #9
   33dc2:	0e00      	lsrs	r0, r0, #24
   33dc4:	9300      	str	r3, [sp, #0]
   33dc6:	d1da      	bne.n	33d7e <__aeabi_fdiv+0x46>
   33dc8:	2d00      	cmp	r5, #0
   33dca:	d126      	bne.n	33e1a <__aeabi_fdiv+0xe2>
   33dcc:	2000      	movs	r0, #0
   33dce:	2101      	movs	r1, #1
   33dd0:	0033      	movs	r3, r6
   33dd2:	9a00      	ldr	r2, [sp, #0]
   33dd4:	4f7a      	ldr	r7, [pc, #488]	; (33fc0 <__aeabi_fdiv+0x288>)
   33dd6:	4053      	eors	r3, r2
   33dd8:	4642      	mov	r2, r8
   33dda:	1a10      	subs	r0, r2, r0
   33ddc:	464a      	mov	r2, r9
   33dde:	430a      	orrs	r2, r1
   33de0:	0092      	lsls	r2, r2, #2
   33de2:	58ba      	ldr	r2, [r7, r2]
   33de4:	001d      	movs	r5, r3
   33de6:	4697      	mov	pc, r2
   33de8:	9b00      	ldr	r3, [sp, #0]
   33dea:	002c      	movs	r4, r5
   33dec:	469a      	mov	sl, r3
   33dee:	468b      	mov	fp, r1
   33df0:	465b      	mov	r3, fp
   33df2:	2b02      	cmp	r3, #2
   33df4:	d131      	bne.n	33e5a <__aeabi_fdiv+0x122>
   33df6:	4653      	mov	r3, sl
   33df8:	21ff      	movs	r1, #255	; 0xff
   33dfa:	2400      	movs	r4, #0
   33dfc:	e038      	b.n	33e70 <__aeabi_fdiv+0x138>
   33dfe:	2c00      	cmp	r4, #0
   33e00:	d117      	bne.n	33e32 <__aeabi_fdiv+0xfa>
   33e02:	2304      	movs	r3, #4
   33e04:	4699      	mov	r9, r3
   33e06:	2300      	movs	r3, #0
   33e08:	4698      	mov	r8, r3
   33e0a:	3301      	adds	r3, #1
   33e0c:	469b      	mov	fp, r3
   33e0e:	e7af      	b.n	33d70 <__aeabi_fdiv+0x38>
   33e10:	20ff      	movs	r0, #255	; 0xff
   33e12:	2d00      	cmp	r5, #0
   33e14:	d10b      	bne.n	33e2e <__aeabi_fdiv+0xf6>
   33e16:	2102      	movs	r1, #2
   33e18:	e7da      	b.n	33dd0 <__aeabi_fdiv+0x98>
   33e1a:	0028      	movs	r0, r5
   33e1c:	f002 f8d2 	bl	35fc4 <__clzsi2>
   33e20:	1f43      	subs	r3, r0, #5
   33e22:	409d      	lsls	r5, r3
   33e24:	2376      	movs	r3, #118	; 0x76
   33e26:	425b      	negs	r3, r3
   33e28:	1a18      	subs	r0, r3, r0
   33e2a:	2100      	movs	r1, #0
   33e2c:	e7af      	b.n	33d8e <__aeabi_fdiv+0x56>
   33e2e:	2103      	movs	r1, #3
   33e30:	e7ad      	b.n	33d8e <__aeabi_fdiv+0x56>
   33e32:	0020      	movs	r0, r4
   33e34:	f002 f8c6 	bl	35fc4 <__clzsi2>
   33e38:	1f43      	subs	r3, r0, #5
   33e3a:	409c      	lsls	r4, r3
   33e3c:	2376      	movs	r3, #118	; 0x76
   33e3e:	425b      	negs	r3, r3
   33e40:	1a1b      	subs	r3, r3, r0
   33e42:	4698      	mov	r8, r3
   33e44:	2300      	movs	r3, #0
   33e46:	4699      	mov	r9, r3
   33e48:	469b      	mov	fp, r3
   33e4a:	e791      	b.n	33d70 <__aeabi_fdiv+0x38>
   33e4c:	230c      	movs	r3, #12
   33e4e:	4699      	mov	r9, r3
   33e50:	33f3      	adds	r3, #243	; 0xf3
   33e52:	4698      	mov	r8, r3
   33e54:	3bfc      	subs	r3, #252	; 0xfc
   33e56:	469b      	mov	fp, r3
   33e58:	e78a      	b.n	33d70 <__aeabi_fdiv+0x38>
   33e5a:	2b03      	cmp	r3, #3
   33e5c:	d100      	bne.n	33e60 <__aeabi_fdiv+0x128>
   33e5e:	e0a5      	b.n	33fac <__aeabi_fdiv+0x274>
   33e60:	4655      	mov	r5, sl
   33e62:	2b01      	cmp	r3, #1
   33e64:	d000      	beq.n	33e68 <__aeabi_fdiv+0x130>
   33e66:	e081      	b.n	33f6c <__aeabi_fdiv+0x234>
   33e68:	2301      	movs	r3, #1
   33e6a:	2100      	movs	r1, #0
   33e6c:	2400      	movs	r4, #0
   33e6e:	402b      	ands	r3, r5
   33e70:	0264      	lsls	r4, r4, #9
   33e72:	05c9      	lsls	r1, r1, #23
   33e74:	0a60      	lsrs	r0, r4, #9
   33e76:	07db      	lsls	r3, r3, #31
   33e78:	4308      	orrs	r0, r1
   33e7a:	4318      	orrs	r0, r3
   33e7c:	b003      	add	sp, #12
   33e7e:	bc3c      	pop	{r2, r3, r4, r5}
   33e80:	4690      	mov	r8, r2
   33e82:	4699      	mov	r9, r3
   33e84:	46a2      	mov	sl, r4
   33e86:	46ab      	mov	fp, r5
   33e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e8a:	2480      	movs	r4, #128	; 0x80
   33e8c:	2300      	movs	r3, #0
   33e8e:	03e4      	lsls	r4, r4, #15
   33e90:	21ff      	movs	r1, #255	; 0xff
   33e92:	e7ed      	b.n	33e70 <__aeabi_fdiv+0x138>
   33e94:	21ff      	movs	r1, #255	; 0xff
   33e96:	2400      	movs	r4, #0
   33e98:	e7ea      	b.n	33e70 <__aeabi_fdiv+0x138>
   33e9a:	2301      	movs	r3, #1
   33e9c:	1a59      	subs	r1, r3, r1
   33e9e:	291b      	cmp	r1, #27
   33ea0:	dd66      	ble.n	33f70 <__aeabi_fdiv+0x238>
   33ea2:	9a01      	ldr	r2, [sp, #4]
   33ea4:	4013      	ands	r3, r2
   33ea6:	2100      	movs	r1, #0
   33ea8:	2400      	movs	r4, #0
   33eaa:	e7e1      	b.n	33e70 <__aeabi_fdiv+0x138>
   33eac:	2380      	movs	r3, #128	; 0x80
   33eae:	03db      	lsls	r3, r3, #15
   33eb0:	421c      	tst	r4, r3
   33eb2:	d038      	beq.n	33f26 <__aeabi_fdiv+0x1ee>
   33eb4:	421d      	tst	r5, r3
   33eb6:	d051      	beq.n	33f5c <__aeabi_fdiv+0x224>
   33eb8:	431c      	orrs	r4, r3
   33eba:	0264      	lsls	r4, r4, #9
   33ebc:	0a64      	lsrs	r4, r4, #9
   33ebe:	0033      	movs	r3, r6
   33ec0:	21ff      	movs	r1, #255	; 0xff
   33ec2:	e7d5      	b.n	33e70 <__aeabi_fdiv+0x138>
   33ec4:	0163      	lsls	r3, r4, #5
   33ec6:	016c      	lsls	r4, r5, #5
   33ec8:	42a3      	cmp	r3, r4
   33eca:	d23b      	bcs.n	33f44 <__aeabi_fdiv+0x20c>
   33ecc:	261b      	movs	r6, #27
   33ece:	2100      	movs	r1, #0
   33ed0:	3801      	subs	r0, #1
   33ed2:	2501      	movs	r5, #1
   33ed4:	001f      	movs	r7, r3
   33ed6:	0049      	lsls	r1, r1, #1
   33ed8:	005b      	lsls	r3, r3, #1
   33eda:	2f00      	cmp	r7, #0
   33edc:	db01      	blt.n	33ee2 <__aeabi_fdiv+0x1aa>
   33ede:	429c      	cmp	r4, r3
   33ee0:	d801      	bhi.n	33ee6 <__aeabi_fdiv+0x1ae>
   33ee2:	1b1b      	subs	r3, r3, r4
   33ee4:	4329      	orrs	r1, r5
   33ee6:	3e01      	subs	r6, #1
   33ee8:	2e00      	cmp	r6, #0
   33eea:	d1f3      	bne.n	33ed4 <__aeabi_fdiv+0x19c>
   33eec:	001c      	movs	r4, r3
   33eee:	1e63      	subs	r3, r4, #1
   33ef0:	419c      	sbcs	r4, r3
   33ef2:	430c      	orrs	r4, r1
   33ef4:	0001      	movs	r1, r0
   33ef6:	317f      	adds	r1, #127	; 0x7f
   33ef8:	2900      	cmp	r1, #0
   33efa:	ddce      	ble.n	33e9a <__aeabi_fdiv+0x162>
   33efc:	0763      	lsls	r3, r4, #29
   33efe:	d004      	beq.n	33f0a <__aeabi_fdiv+0x1d2>
   33f00:	230f      	movs	r3, #15
   33f02:	4023      	ands	r3, r4
   33f04:	2b04      	cmp	r3, #4
   33f06:	d000      	beq.n	33f0a <__aeabi_fdiv+0x1d2>
   33f08:	3404      	adds	r4, #4
   33f0a:	0123      	lsls	r3, r4, #4
   33f0c:	d503      	bpl.n	33f16 <__aeabi_fdiv+0x1de>
   33f0e:	0001      	movs	r1, r0
   33f10:	4b2c      	ldr	r3, [pc, #176]	; (33fc4 <__aeabi_fdiv+0x28c>)
   33f12:	3180      	adds	r1, #128	; 0x80
   33f14:	401c      	ands	r4, r3
   33f16:	29fe      	cmp	r1, #254	; 0xfe
   33f18:	dd0d      	ble.n	33f36 <__aeabi_fdiv+0x1fe>
   33f1a:	2301      	movs	r3, #1
   33f1c:	9a01      	ldr	r2, [sp, #4]
   33f1e:	21ff      	movs	r1, #255	; 0xff
   33f20:	4013      	ands	r3, r2
   33f22:	2400      	movs	r4, #0
   33f24:	e7a4      	b.n	33e70 <__aeabi_fdiv+0x138>
   33f26:	2380      	movs	r3, #128	; 0x80
   33f28:	03db      	lsls	r3, r3, #15
   33f2a:	431c      	orrs	r4, r3
   33f2c:	0264      	lsls	r4, r4, #9
   33f2e:	0a64      	lsrs	r4, r4, #9
   33f30:	0033      	movs	r3, r6
   33f32:	21ff      	movs	r1, #255	; 0xff
   33f34:	e79c      	b.n	33e70 <__aeabi_fdiv+0x138>
   33f36:	2301      	movs	r3, #1
   33f38:	9a01      	ldr	r2, [sp, #4]
   33f3a:	01a4      	lsls	r4, r4, #6
   33f3c:	0a64      	lsrs	r4, r4, #9
   33f3e:	b2c9      	uxtb	r1, r1
   33f40:	4013      	ands	r3, r2
   33f42:	e795      	b.n	33e70 <__aeabi_fdiv+0x138>
   33f44:	1b1b      	subs	r3, r3, r4
   33f46:	261a      	movs	r6, #26
   33f48:	2101      	movs	r1, #1
   33f4a:	e7c2      	b.n	33ed2 <__aeabi_fdiv+0x19a>
   33f4c:	9b00      	ldr	r3, [sp, #0]
   33f4e:	468b      	mov	fp, r1
   33f50:	469a      	mov	sl, r3
   33f52:	2400      	movs	r4, #0
   33f54:	e74c      	b.n	33df0 <__aeabi_fdiv+0xb8>
   33f56:	0263      	lsls	r3, r4, #9
   33f58:	d5e5      	bpl.n	33f26 <__aeabi_fdiv+0x1ee>
   33f5a:	2500      	movs	r5, #0
   33f5c:	2480      	movs	r4, #128	; 0x80
   33f5e:	03e4      	lsls	r4, r4, #15
   33f60:	432c      	orrs	r4, r5
   33f62:	0264      	lsls	r4, r4, #9
   33f64:	0a64      	lsrs	r4, r4, #9
   33f66:	9b00      	ldr	r3, [sp, #0]
   33f68:	21ff      	movs	r1, #255	; 0xff
   33f6a:	e781      	b.n	33e70 <__aeabi_fdiv+0x138>
   33f6c:	9501      	str	r5, [sp, #4]
   33f6e:	e7c1      	b.n	33ef4 <__aeabi_fdiv+0x1bc>
   33f70:	0023      	movs	r3, r4
   33f72:	2020      	movs	r0, #32
   33f74:	40cb      	lsrs	r3, r1
   33f76:	1a41      	subs	r1, r0, r1
   33f78:	408c      	lsls	r4, r1
   33f7a:	1e61      	subs	r1, r4, #1
   33f7c:	418c      	sbcs	r4, r1
   33f7e:	431c      	orrs	r4, r3
   33f80:	0763      	lsls	r3, r4, #29
   33f82:	d004      	beq.n	33f8e <__aeabi_fdiv+0x256>
   33f84:	230f      	movs	r3, #15
   33f86:	4023      	ands	r3, r4
   33f88:	2b04      	cmp	r3, #4
   33f8a:	d000      	beq.n	33f8e <__aeabi_fdiv+0x256>
   33f8c:	3404      	adds	r4, #4
   33f8e:	0163      	lsls	r3, r4, #5
   33f90:	d505      	bpl.n	33f9e <__aeabi_fdiv+0x266>
   33f92:	2301      	movs	r3, #1
   33f94:	9a01      	ldr	r2, [sp, #4]
   33f96:	2101      	movs	r1, #1
   33f98:	4013      	ands	r3, r2
   33f9a:	2400      	movs	r4, #0
   33f9c:	e768      	b.n	33e70 <__aeabi_fdiv+0x138>
   33f9e:	2301      	movs	r3, #1
   33fa0:	9a01      	ldr	r2, [sp, #4]
   33fa2:	01a4      	lsls	r4, r4, #6
   33fa4:	0a64      	lsrs	r4, r4, #9
   33fa6:	4013      	ands	r3, r2
   33fa8:	2100      	movs	r1, #0
   33faa:	e761      	b.n	33e70 <__aeabi_fdiv+0x138>
   33fac:	2380      	movs	r3, #128	; 0x80
   33fae:	03db      	lsls	r3, r3, #15
   33fb0:	431c      	orrs	r4, r3
   33fb2:	0264      	lsls	r4, r4, #9
   33fb4:	0a64      	lsrs	r4, r4, #9
   33fb6:	4653      	mov	r3, sl
   33fb8:	21ff      	movs	r1, #255	; 0xff
   33fba:	e759      	b.n	33e70 <__aeabi_fdiv+0x138>
   33fbc:	0003bb1c 	.word	0x0003bb1c
   33fc0:	0003bb5c 	.word	0x0003bb5c
   33fc4:	f7ffffff 	.word	0xf7ffffff

00033fc8 <__aeabi_fmul>:
   33fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33fca:	4657      	mov	r7, sl
   33fcc:	464e      	mov	r6, r9
   33fce:	4645      	mov	r5, r8
   33fd0:	46de      	mov	lr, fp
   33fd2:	b5e0      	push	{r5, r6, r7, lr}
   33fd4:	0247      	lsls	r7, r0, #9
   33fd6:	0046      	lsls	r6, r0, #1
   33fd8:	4688      	mov	r8, r1
   33fda:	0a7f      	lsrs	r7, r7, #9
   33fdc:	0e36      	lsrs	r6, r6, #24
   33fde:	0fc4      	lsrs	r4, r0, #31
   33fe0:	2e00      	cmp	r6, #0
   33fe2:	d047      	beq.n	34074 <__aeabi_fmul+0xac>
   33fe4:	2eff      	cmp	r6, #255	; 0xff
   33fe6:	d024      	beq.n	34032 <__aeabi_fmul+0x6a>
   33fe8:	00fb      	lsls	r3, r7, #3
   33fea:	2780      	movs	r7, #128	; 0x80
   33fec:	04ff      	lsls	r7, r7, #19
   33fee:	431f      	orrs	r7, r3
   33ff0:	2300      	movs	r3, #0
   33ff2:	4699      	mov	r9, r3
   33ff4:	469a      	mov	sl, r3
   33ff6:	3e7f      	subs	r6, #127	; 0x7f
   33ff8:	4643      	mov	r3, r8
   33ffa:	025d      	lsls	r5, r3, #9
   33ffc:	0058      	lsls	r0, r3, #1
   33ffe:	0fdb      	lsrs	r3, r3, #31
   34000:	0a6d      	lsrs	r5, r5, #9
   34002:	0e00      	lsrs	r0, r0, #24
   34004:	4698      	mov	r8, r3
   34006:	d043      	beq.n	34090 <__aeabi_fmul+0xc8>
   34008:	28ff      	cmp	r0, #255	; 0xff
   3400a:	d03b      	beq.n	34084 <__aeabi_fmul+0xbc>
   3400c:	00eb      	lsls	r3, r5, #3
   3400e:	2580      	movs	r5, #128	; 0x80
   34010:	2200      	movs	r2, #0
   34012:	04ed      	lsls	r5, r5, #19
   34014:	431d      	orrs	r5, r3
   34016:	387f      	subs	r0, #127	; 0x7f
   34018:	1836      	adds	r6, r6, r0
   3401a:	1c73      	adds	r3, r6, #1
   3401c:	4641      	mov	r1, r8
   3401e:	469b      	mov	fp, r3
   34020:	464b      	mov	r3, r9
   34022:	4061      	eors	r1, r4
   34024:	4313      	orrs	r3, r2
   34026:	2b0f      	cmp	r3, #15
   34028:	d864      	bhi.n	340f4 <__aeabi_fmul+0x12c>
   3402a:	4875      	ldr	r0, [pc, #468]	; (34200 <__aeabi_fmul+0x238>)
   3402c:	009b      	lsls	r3, r3, #2
   3402e:	58c3      	ldr	r3, [r0, r3]
   34030:	469f      	mov	pc, r3
   34032:	2f00      	cmp	r7, #0
   34034:	d142      	bne.n	340bc <__aeabi_fmul+0xf4>
   34036:	2308      	movs	r3, #8
   34038:	4699      	mov	r9, r3
   3403a:	3b06      	subs	r3, #6
   3403c:	26ff      	movs	r6, #255	; 0xff
   3403e:	469a      	mov	sl, r3
   34040:	e7da      	b.n	33ff8 <__aeabi_fmul+0x30>
   34042:	4641      	mov	r1, r8
   34044:	2a02      	cmp	r2, #2
   34046:	d028      	beq.n	3409a <__aeabi_fmul+0xd2>
   34048:	2a03      	cmp	r2, #3
   3404a:	d100      	bne.n	3404e <__aeabi_fmul+0x86>
   3404c:	e0ce      	b.n	341ec <__aeabi_fmul+0x224>
   3404e:	2a01      	cmp	r2, #1
   34050:	d000      	beq.n	34054 <__aeabi_fmul+0x8c>
   34052:	e0ac      	b.n	341ae <__aeabi_fmul+0x1e6>
   34054:	4011      	ands	r1, r2
   34056:	2000      	movs	r0, #0
   34058:	2200      	movs	r2, #0
   3405a:	b2cc      	uxtb	r4, r1
   3405c:	0240      	lsls	r0, r0, #9
   3405e:	05d2      	lsls	r2, r2, #23
   34060:	0a40      	lsrs	r0, r0, #9
   34062:	07e4      	lsls	r4, r4, #31
   34064:	4310      	orrs	r0, r2
   34066:	4320      	orrs	r0, r4
   34068:	bc3c      	pop	{r2, r3, r4, r5}
   3406a:	4690      	mov	r8, r2
   3406c:	4699      	mov	r9, r3
   3406e:	46a2      	mov	sl, r4
   34070:	46ab      	mov	fp, r5
   34072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34074:	2f00      	cmp	r7, #0
   34076:	d115      	bne.n	340a4 <__aeabi_fmul+0xdc>
   34078:	2304      	movs	r3, #4
   3407a:	4699      	mov	r9, r3
   3407c:	3b03      	subs	r3, #3
   3407e:	2600      	movs	r6, #0
   34080:	469a      	mov	sl, r3
   34082:	e7b9      	b.n	33ff8 <__aeabi_fmul+0x30>
   34084:	20ff      	movs	r0, #255	; 0xff
   34086:	2202      	movs	r2, #2
   34088:	2d00      	cmp	r5, #0
   3408a:	d0c5      	beq.n	34018 <__aeabi_fmul+0x50>
   3408c:	2203      	movs	r2, #3
   3408e:	e7c3      	b.n	34018 <__aeabi_fmul+0x50>
   34090:	2d00      	cmp	r5, #0
   34092:	d119      	bne.n	340c8 <__aeabi_fmul+0x100>
   34094:	2000      	movs	r0, #0
   34096:	2201      	movs	r2, #1
   34098:	e7be      	b.n	34018 <__aeabi_fmul+0x50>
   3409a:	2401      	movs	r4, #1
   3409c:	22ff      	movs	r2, #255	; 0xff
   3409e:	400c      	ands	r4, r1
   340a0:	2000      	movs	r0, #0
   340a2:	e7db      	b.n	3405c <__aeabi_fmul+0x94>
   340a4:	0038      	movs	r0, r7
   340a6:	f001 ff8d 	bl	35fc4 <__clzsi2>
   340aa:	2676      	movs	r6, #118	; 0x76
   340ac:	1f43      	subs	r3, r0, #5
   340ae:	409f      	lsls	r7, r3
   340b0:	2300      	movs	r3, #0
   340b2:	4276      	negs	r6, r6
   340b4:	1a36      	subs	r6, r6, r0
   340b6:	4699      	mov	r9, r3
   340b8:	469a      	mov	sl, r3
   340ba:	e79d      	b.n	33ff8 <__aeabi_fmul+0x30>
   340bc:	230c      	movs	r3, #12
   340be:	4699      	mov	r9, r3
   340c0:	3b09      	subs	r3, #9
   340c2:	26ff      	movs	r6, #255	; 0xff
   340c4:	469a      	mov	sl, r3
   340c6:	e797      	b.n	33ff8 <__aeabi_fmul+0x30>
   340c8:	0028      	movs	r0, r5
   340ca:	f001 ff7b 	bl	35fc4 <__clzsi2>
   340ce:	1f43      	subs	r3, r0, #5
   340d0:	409d      	lsls	r5, r3
   340d2:	2376      	movs	r3, #118	; 0x76
   340d4:	425b      	negs	r3, r3
   340d6:	1a18      	subs	r0, r3, r0
   340d8:	2200      	movs	r2, #0
   340da:	e79d      	b.n	34018 <__aeabi_fmul+0x50>
   340dc:	2080      	movs	r0, #128	; 0x80
   340de:	2400      	movs	r4, #0
   340e0:	03c0      	lsls	r0, r0, #15
   340e2:	22ff      	movs	r2, #255	; 0xff
   340e4:	e7ba      	b.n	3405c <__aeabi_fmul+0x94>
   340e6:	003d      	movs	r5, r7
   340e8:	4652      	mov	r2, sl
   340ea:	e7ab      	b.n	34044 <__aeabi_fmul+0x7c>
   340ec:	003d      	movs	r5, r7
   340ee:	0021      	movs	r1, r4
   340f0:	4652      	mov	r2, sl
   340f2:	e7a7      	b.n	34044 <__aeabi_fmul+0x7c>
   340f4:	0c3b      	lsrs	r3, r7, #16
   340f6:	469c      	mov	ip, r3
   340f8:	042a      	lsls	r2, r5, #16
   340fa:	0c12      	lsrs	r2, r2, #16
   340fc:	0c2b      	lsrs	r3, r5, #16
   340fe:	0014      	movs	r4, r2
   34100:	4660      	mov	r0, ip
   34102:	4665      	mov	r5, ip
   34104:	043f      	lsls	r7, r7, #16
   34106:	0c3f      	lsrs	r7, r7, #16
   34108:	437c      	muls	r4, r7
   3410a:	4342      	muls	r2, r0
   3410c:	435d      	muls	r5, r3
   3410e:	437b      	muls	r3, r7
   34110:	0c27      	lsrs	r7, r4, #16
   34112:	189b      	adds	r3, r3, r2
   34114:	18ff      	adds	r7, r7, r3
   34116:	42ba      	cmp	r2, r7
   34118:	d903      	bls.n	34122 <__aeabi_fmul+0x15a>
   3411a:	2380      	movs	r3, #128	; 0x80
   3411c:	025b      	lsls	r3, r3, #9
   3411e:	469c      	mov	ip, r3
   34120:	4465      	add	r5, ip
   34122:	0424      	lsls	r4, r4, #16
   34124:	043a      	lsls	r2, r7, #16
   34126:	0c24      	lsrs	r4, r4, #16
   34128:	1912      	adds	r2, r2, r4
   3412a:	0193      	lsls	r3, r2, #6
   3412c:	1e5c      	subs	r4, r3, #1
   3412e:	41a3      	sbcs	r3, r4
   34130:	0c3f      	lsrs	r7, r7, #16
   34132:	0e92      	lsrs	r2, r2, #26
   34134:	197d      	adds	r5, r7, r5
   34136:	431a      	orrs	r2, r3
   34138:	01ad      	lsls	r5, r5, #6
   3413a:	4315      	orrs	r5, r2
   3413c:	012b      	lsls	r3, r5, #4
   3413e:	d504      	bpl.n	3414a <__aeabi_fmul+0x182>
   34140:	2301      	movs	r3, #1
   34142:	465e      	mov	r6, fp
   34144:	086a      	lsrs	r2, r5, #1
   34146:	401d      	ands	r5, r3
   34148:	4315      	orrs	r5, r2
   3414a:	0032      	movs	r2, r6
   3414c:	327f      	adds	r2, #127	; 0x7f
   3414e:	2a00      	cmp	r2, #0
   34150:	dd25      	ble.n	3419e <__aeabi_fmul+0x1d6>
   34152:	076b      	lsls	r3, r5, #29
   34154:	d004      	beq.n	34160 <__aeabi_fmul+0x198>
   34156:	230f      	movs	r3, #15
   34158:	402b      	ands	r3, r5
   3415a:	2b04      	cmp	r3, #4
   3415c:	d000      	beq.n	34160 <__aeabi_fmul+0x198>
   3415e:	3504      	adds	r5, #4
   34160:	012b      	lsls	r3, r5, #4
   34162:	d503      	bpl.n	3416c <__aeabi_fmul+0x1a4>
   34164:	0032      	movs	r2, r6
   34166:	4b27      	ldr	r3, [pc, #156]	; (34204 <__aeabi_fmul+0x23c>)
   34168:	3280      	adds	r2, #128	; 0x80
   3416a:	401d      	ands	r5, r3
   3416c:	2afe      	cmp	r2, #254	; 0xfe
   3416e:	dc94      	bgt.n	3409a <__aeabi_fmul+0xd2>
   34170:	2401      	movs	r4, #1
   34172:	01a8      	lsls	r0, r5, #6
   34174:	0a40      	lsrs	r0, r0, #9
   34176:	b2d2      	uxtb	r2, r2
   34178:	400c      	ands	r4, r1
   3417a:	e76f      	b.n	3405c <__aeabi_fmul+0x94>
   3417c:	2080      	movs	r0, #128	; 0x80
   3417e:	03c0      	lsls	r0, r0, #15
   34180:	4207      	tst	r7, r0
   34182:	d007      	beq.n	34194 <__aeabi_fmul+0x1cc>
   34184:	4205      	tst	r5, r0
   34186:	d105      	bne.n	34194 <__aeabi_fmul+0x1cc>
   34188:	4328      	orrs	r0, r5
   3418a:	0240      	lsls	r0, r0, #9
   3418c:	0a40      	lsrs	r0, r0, #9
   3418e:	4644      	mov	r4, r8
   34190:	22ff      	movs	r2, #255	; 0xff
   34192:	e763      	b.n	3405c <__aeabi_fmul+0x94>
   34194:	4338      	orrs	r0, r7
   34196:	0240      	lsls	r0, r0, #9
   34198:	0a40      	lsrs	r0, r0, #9
   3419a:	22ff      	movs	r2, #255	; 0xff
   3419c:	e75e      	b.n	3405c <__aeabi_fmul+0x94>
   3419e:	2401      	movs	r4, #1
   341a0:	1aa3      	subs	r3, r4, r2
   341a2:	2b1b      	cmp	r3, #27
   341a4:	dd05      	ble.n	341b2 <__aeabi_fmul+0x1ea>
   341a6:	400c      	ands	r4, r1
   341a8:	2200      	movs	r2, #0
   341aa:	2000      	movs	r0, #0
   341ac:	e756      	b.n	3405c <__aeabi_fmul+0x94>
   341ae:	465e      	mov	r6, fp
   341b0:	e7cb      	b.n	3414a <__aeabi_fmul+0x182>
   341b2:	002a      	movs	r2, r5
   341b4:	2020      	movs	r0, #32
   341b6:	40da      	lsrs	r2, r3
   341b8:	1ac3      	subs	r3, r0, r3
   341ba:	409d      	lsls	r5, r3
   341bc:	002b      	movs	r3, r5
   341be:	1e5d      	subs	r5, r3, #1
   341c0:	41ab      	sbcs	r3, r5
   341c2:	4313      	orrs	r3, r2
   341c4:	075a      	lsls	r2, r3, #29
   341c6:	d004      	beq.n	341d2 <__aeabi_fmul+0x20a>
   341c8:	220f      	movs	r2, #15
   341ca:	401a      	ands	r2, r3
   341cc:	2a04      	cmp	r2, #4
   341ce:	d000      	beq.n	341d2 <__aeabi_fmul+0x20a>
   341d0:	3304      	adds	r3, #4
   341d2:	015a      	lsls	r2, r3, #5
   341d4:	d504      	bpl.n	341e0 <__aeabi_fmul+0x218>
   341d6:	2401      	movs	r4, #1
   341d8:	2201      	movs	r2, #1
   341da:	400c      	ands	r4, r1
   341dc:	2000      	movs	r0, #0
   341de:	e73d      	b.n	3405c <__aeabi_fmul+0x94>
   341e0:	2401      	movs	r4, #1
   341e2:	019b      	lsls	r3, r3, #6
   341e4:	0a58      	lsrs	r0, r3, #9
   341e6:	400c      	ands	r4, r1
   341e8:	2200      	movs	r2, #0
   341ea:	e737      	b.n	3405c <__aeabi_fmul+0x94>
   341ec:	2080      	movs	r0, #128	; 0x80
   341ee:	2401      	movs	r4, #1
   341f0:	03c0      	lsls	r0, r0, #15
   341f2:	4328      	orrs	r0, r5
   341f4:	0240      	lsls	r0, r0, #9
   341f6:	0a40      	lsrs	r0, r0, #9
   341f8:	400c      	ands	r4, r1
   341fa:	22ff      	movs	r2, #255	; 0xff
   341fc:	e72e      	b.n	3405c <__aeabi_fmul+0x94>
   341fe:	46c0      	nop			; (mov r8, r8)
   34200:	0003bb9c 	.word	0x0003bb9c
   34204:	f7ffffff 	.word	0xf7ffffff

00034208 <__aeabi_fsub>:
   34208:	b5f0      	push	{r4, r5, r6, r7, lr}
   3420a:	464f      	mov	r7, r9
   3420c:	46d6      	mov	lr, sl
   3420e:	4646      	mov	r6, r8
   34210:	0044      	lsls	r4, r0, #1
   34212:	b5c0      	push	{r6, r7, lr}
   34214:	0fc2      	lsrs	r2, r0, #31
   34216:	0247      	lsls	r7, r0, #9
   34218:	0248      	lsls	r0, r1, #9
   3421a:	0a40      	lsrs	r0, r0, #9
   3421c:	4684      	mov	ip, r0
   3421e:	4666      	mov	r6, ip
   34220:	0a7b      	lsrs	r3, r7, #9
   34222:	0048      	lsls	r0, r1, #1
   34224:	0fc9      	lsrs	r1, r1, #31
   34226:	469a      	mov	sl, r3
   34228:	0e24      	lsrs	r4, r4, #24
   3422a:	0015      	movs	r5, r2
   3422c:	00db      	lsls	r3, r3, #3
   3422e:	0e00      	lsrs	r0, r0, #24
   34230:	4689      	mov	r9, r1
   34232:	00f6      	lsls	r6, r6, #3
   34234:	28ff      	cmp	r0, #255	; 0xff
   34236:	d100      	bne.n	3423a <__aeabi_fsub+0x32>
   34238:	e08f      	b.n	3435a <__aeabi_fsub+0x152>
   3423a:	2101      	movs	r1, #1
   3423c:	464f      	mov	r7, r9
   3423e:	404f      	eors	r7, r1
   34240:	0039      	movs	r1, r7
   34242:	4291      	cmp	r1, r2
   34244:	d066      	beq.n	34314 <__aeabi_fsub+0x10c>
   34246:	1a22      	subs	r2, r4, r0
   34248:	2a00      	cmp	r2, #0
   3424a:	dc00      	bgt.n	3424e <__aeabi_fsub+0x46>
   3424c:	e09d      	b.n	3438a <__aeabi_fsub+0x182>
   3424e:	2800      	cmp	r0, #0
   34250:	d13d      	bne.n	342ce <__aeabi_fsub+0xc6>
   34252:	2e00      	cmp	r6, #0
   34254:	d100      	bne.n	34258 <__aeabi_fsub+0x50>
   34256:	e08b      	b.n	34370 <__aeabi_fsub+0x168>
   34258:	1e51      	subs	r1, r2, #1
   3425a:	2900      	cmp	r1, #0
   3425c:	d000      	beq.n	34260 <__aeabi_fsub+0x58>
   3425e:	e0b5      	b.n	343cc <__aeabi_fsub+0x1c4>
   34260:	2401      	movs	r4, #1
   34262:	1b9b      	subs	r3, r3, r6
   34264:	015a      	lsls	r2, r3, #5
   34266:	d544      	bpl.n	342f2 <__aeabi_fsub+0xea>
   34268:	019b      	lsls	r3, r3, #6
   3426a:	099f      	lsrs	r7, r3, #6
   3426c:	0038      	movs	r0, r7
   3426e:	f001 fea9 	bl	35fc4 <__clzsi2>
   34272:	3805      	subs	r0, #5
   34274:	4087      	lsls	r7, r0
   34276:	4284      	cmp	r4, r0
   34278:	dd00      	ble.n	3427c <__aeabi_fsub+0x74>
   3427a:	e096      	b.n	343aa <__aeabi_fsub+0x1a2>
   3427c:	1b04      	subs	r4, r0, r4
   3427e:	003a      	movs	r2, r7
   34280:	2020      	movs	r0, #32
   34282:	3401      	adds	r4, #1
   34284:	40e2      	lsrs	r2, r4
   34286:	1b04      	subs	r4, r0, r4
   34288:	40a7      	lsls	r7, r4
   3428a:	003b      	movs	r3, r7
   3428c:	1e5f      	subs	r7, r3, #1
   3428e:	41bb      	sbcs	r3, r7
   34290:	2400      	movs	r4, #0
   34292:	4313      	orrs	r3, r2
   34294:	075a      	lsls	r2, r3, #29
   34296:	d004      	beq.n	342a2 <__aeabi_fsub+0x9a>
   34298:	220f      	movs	r2, #15
   3429a:	401a      	ands	r2, r3
   3429c:	2a04      	cmp	r2, #4
   3429e:	d000      	beq.n	342a2 <__aeabi_fsub+0x9a>
   342a0:	3304      	adds	r3, #4
   342a2:	015a      	lsls	r2, r3, #5
   342a4:	d527      	bpl.n	342f6 <__aeabi_fsub+0xee>
   342a6:	3401      	adds	r4, #1
   342a8:	2cff      	cmp	r4, #255	; 0xff
   342aa:	d100      	bne.n	342ae <__aeabi_fsub+0xa6>
   342ac:	e079      	b.n	343a2 <__aeabi_fsub+0x19a>
   342ae:	2201      	movs	r2, #1
   342b0:	019b      	lsls	r3, r3, #6
   342b2:	0a5b      	lsrs	r3, r3, #9
   342b4:	b2e4      	uxtb	r4, r4
   342b6:	402a      	ands	r2, r5
   342b8:	025b      	lsls	r3, r3, #9
   342ba:	05e4      	lsls	r4, r4, #23
   342bc:	0a58      	lsrs	r0, r3, #9
   342be:	07d2      	lsls	r2, r2, #31
   342c0:	4320      	orrs	r0, r4
   342c2:	4310      	orrs	r0, r2
   342c4:	bc1c      	pop	{r2, r3, r4}
   342c6:	4690      	mov	r8, r2
   342c8:	4699      	mov	r9, r3
   342ca:	46a2      	mov	sl, r4
   342cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   342ce:	2cff      	cmp	r4, #255	; 0xff
   342d0:	d0e0      	beq.n	34294 <__aeabi_fsub+0x8c>
   342d2:	2180      	movs	r1, #128	; 0x80
   342d4:	04c9      	lsls	r1, r1, #19
   342d6:	430e      	orrs	r6, r1
   342d8:	2a1b      	cmp	r2, #27
   342da:	dc7b      	bgt.n	343d4 <__aeabi_fsub+0x1cc>
   342dc:	0031      	movs	r1, r6
   342de:	2020      	movs	r0, #32
   342e0:	40d1      	lsrs	r1, r2
   342e2:	1a82      	subs	r2, r0, r2
   342e4:	4096      	lsls	r6, r2
   342e6:	1e72      	subs	r2, r6, #1
   342e8:	4196      	sbcs	r6, r2
   342ea:	430e      	orrs	r6, r1
   342ec:	1b9b      	subs	r3, r3, r6
   342ee:	015a      	lsls	r2, r3, #5
   342f0:	d4ba      	bmi.n	34268 <__aeabi_fsub+0x60>
   342f2:	075a      	lsls	r2, r3, #29
   342f4:	d1d0      	bne.n	34298 <__aeabi_fsub+0x90>
   342f6:	2201      	movs	r2, #1
   342f8:	08df      	lsrs	r7, r3, #3
   342fa:	402a      	ands	r2, r5
   342fc:	2cff      	cmp	r4, #255	; 0xff
   342fe:	d133      	bne.n	34368 <__aeabi_fsub+0x160>
   34300:	2f00      	cmp	r7, #0
   34302:	d100      	bne.n	34306 <__aeabi_fsub+0xfe>
   34304:	e0a8      	b.n	34458 <__aeabi_fsub+0x250>
   34306:	2380      	movs	r3, #128	; 0x80
   34308:	03db      	lsls	r3, r3, #15
   3430a:	433b      	orrs	r3, r7
   3430c:	025b      	lsls	r3, r3, #9
   3430e:	0a5b      	lsrs	r3, r3, #9
   34310:	24ff      	movs	r4, #255	; 0xff
   34312:	e7d1      	b.n	342b8 <__aeabi_fsub+0xb0>
   34314:	1a21      	subs	r1, r4, r0
   34316:	2900      	cmp	r1, #0
   34318:	dd4c      	ble.n	343b4 <__aeabi_fsub+0x1ac>
   3431a:	2800      	cmp	r0, #0
   3431c:	d02a      	beq.n	34374 <__aeabi_fsub+0x16c>
   3431e:	2cff      	cmp	r4, #255	; 0xff
   34320:	d0b8      	beq.n	34294 <__aeabi_fsub+0x8c>
   34322:	2080      	movs	r0, #128	; 0x80
   34324:	04c0      	lsls	r0, r0, #19
   34326:	4306      	orrs	r6, r0
   34328:	291b      	cmp	r1, #27
   3432a:	dd00      	ble.n	3432e <__aeabi_fsub+0x126>
   3432c:	e0af      	b.n	3448e <__aeabi_fsub+0x286>
   3432e:	0030      	movs	r0, r6
   34330:	2720      	movs	r7, #32
   34332:	40c8      	lsrs	r0, r1
   34334:	1a79      	subs	r1, r7, r1
   34336:	408e      	lsls	r6, r1
   34338:	1e71      	subs	r1, r6, #1
   3433a:	418e      	sbcs	r6, r1
   3433c:	4306      	orrs	r6, r0
   3433e:	199b      	adds	r3, r3, r6
   34340:	0159      	lsls	r1, r3, #5
   34342:	d5d6      	bpl.n	342f2 <__aeabi_fsub+0xea>
   34344:	3401      	adds	r4, #1
   34346:	2cff      	cmp	r4, #255	; 0xff
   34348:	d100      	bne.n	3434c <__aeabi_fsub+0x144>
   3434a:	e085      	b.n	34458 <__aeabi_fsub+0x250>
   3434c:	2201      	movs	r2, #1
   3434e:	497a      	ldr	r1, [pc, #488]	; (34538 <__aeabi_fsub+0x330>)
   34350:	401a      	ands	r2, r3
   34352:	085b      	lsrs	r3, r3, #1
   34354:	400b      	ands	r3, r1
   34356:	4313      	orrs	r3, r2
   34358:	e79c      	b.n	34294 <__aeabi_fsub+0x8c>
   3435a:	2e00      	cmp	r6, #0
   3435c:	d000      	beq.n	34360 <__aeabi_fsub+0x158>
   3435e:	e770      	b.n	34242 <__aeabi_fsub+0x3a>
   34360:	e76b      	b.n	3423a <__aeabi_fsub+0x32>
   34362:	1e3b      	subs	r3, r7, #0
   34364:	d1c5      	bne.n	342f2 <__aeabi_fsub+0xea>
   34366:	2200      	movs	r2, #0
   34368:	027b      	lsls	r3, r7, #9
   3436a:	0a5b      	lsrs	r3, r3, #9
   3436c:	b2e4      	uxtb	r4, r4
   3436e:	e7a3      	b.n	342b8 <__aeabi_fsub+0xb0>
   34370:	0014      	movs	r4, r2
   34372:	e78f      	b.n	34294 <__aeabi_fsub+0x8c>
   34374:	2e00      	cmp	r6, #0
   34376:	d04d      	beq.n	34414 <__aeabi_fsub+0x20c>
   34378:	1e48      	subs	r0, r1, #1
   3437a:	2800      	cmp	r0, #0
   3437c:	d157      	bne.n	3442e <__aeabi_fsub+0x226>
   3437e:	199b      	adds	r3, r3, r6
   34380:	2401      	movs	r4, #1
   34382:	015a      	lsls	r2, r3, #5
   34384:	d5b5      	bpl.n	342f2 <__aeabi_fsub+0xea>
   34386:	2402      	movs	r4, #2
   34388:	e7e0      	b.n	3434c <__aeabi_fsub+0x144>
   3438a:	2a00      	cmp	r2, #0
   3438c:	d125      	bne.n	343da <__aeabi_fsub+0x1d2>
   3438e:	1c62      	adds	r2, r4, #1
   34390:	b2d2      	uxtb	r2, r2
   34392:	2a01      	cmp	r2, #1
   34394:	dd72      	ble.n	3447c <__aeabi_fsub+0x274>
   34396:	1b9f      	subs	r7, r3, r6
   34398:	017a      	lsls	r2, r7, #5
   3439a:	d535      	bpl.n	34408 <__aeabi_fsub+0x200>
   3439c:	1af7      	subs	r7, r6, r3
   3439e:	000d      	movs	r5, r1
   343a0:	e764      	b.n	3426c <__aeabi_fsub+0x64>
   343a2:	2201      	movs	r2, #1
   343a4:	2300      	movs	r3, #0
   343a6:	402a      	ands	r2, r5
   343a8:	e786      	b.n	342b8 <__aeabi_fsub+0xb0>
   343aa:	003b      	movs	r3, r7
   343ac:	4a63      	ldr	r2, [pc, #396]	; (3453c <__aeabi_fsub+0x334>)
   343ae:	1a24      	subs	r4, r4, r0
   343b0:	4013      	ands	r3, r2
   343b2:	e76f      	b.n	34294 <__aeabi_fsub+0x8c>
   343b4:	2900      	cmp	r1, #0
   343b6:	d16c      	bne.n	34492 <__aeabi_fsub+0x28a>
   343b8:	1c61      	adds	r1, r4, #1
   343ba:	b2c8      	uxtb	r0, r1
   343bc:	2801      	cmp	r0, #1
   343be:	dd4e      	ble.n	3445e <__aeabi_fsub+0x256>
   343c0:	29ff      	cmp	r1, #255	; 0xff
   343c2:	d049      	beq.n	34458 <__aeabi_fsub+0x250>
   343c4:	199b      	adds	r3, r3, r6
   343c6:	085b      	lsrs	r3, r3, #1
   343c8:	000c      	movs	r4, r1
   343ca:	e763      	b.n	34294 <__aeabi_fsub+0x8c>
   343cc:	2aff      	cmp	r2, #255	; 0xff
   343ce:	d041      	beq.n	34454 <__aeabi_fsub+0x24c>
   343d0:	000a      	movs	r2, r1
   343d2:	e781      	b.n	342d8 <__aeabi_fsub+0xd0>
   343d4:	2601      	movs	r6, #1
   343d6:	1b9b      	subs	r3, r3, r6
   343d8:	e789      	b.n	342ee <__aeabi_fsub+0xe6>
   343da:	2c00      	cmp	r4, #0
   343dc:	d01c      	beq.n	34418 <__aeabi_fsub+0x210>
   343de:	28ff      	cmp	r0, #255	; 0xff
   343e0:	d021      	beq.n	34426 <__aeabi_fsub+0x21e>
   343e2:	2480      	movs	r4, #128	; 0x80
   343e4:	04e4      	lsls	r4, r4, #19
   343e6:	4252      	negs	r2, r2
   343e8:	4323      	orrs	r3, r4
   343ea:	2a1b      	cmp	r2, #27
   343ec:	dd00      	ble.n	343f0 <__aeabi_fsub+0x1e8>
   343ee:	e096      	b.n	3451e <__aeabi_fsub+0x316>
   343f0:	001c      	movs	r4, r3
   343f2:	2520      	movs	r5, #32
   343f4:	40d4      	lsrs	r4, r2
   343f6:	1aaa      	subs	r2, r5, r2
   343f8:	4093      	lsls	r3, r2
   343fa:	1e5a      	subs	r2, r3, #1
   343fc:	4193      	sbcs	r3, r2
   343fe:	4323      	orrs	r3, r4
   34400:	1af3      	subs	r3, r6, r3
   34402:	0004      	movs	r4, r0
   34404:	000d      	movs	r5, r1
   34406:	e72d      	b.n	34264 <__aeabi_fsub+0x5c>
   34408:	2f00      	cmp	r7, #0
   3440a:	d000      	beq.n	3440e <__aeabi_fsub+0x206>
   3440c:	e72e      	b.n	3426c <__aeabi_fsub+0x64>
   3440e:	2200      	movs	r2, #0
   34410:	2400      	movs	r4, #0
   34412:	e7a9      	b.n	34368 <__aeabi_fsub+0x160>
   34414:	000c      	movs	r4, r1
   34416:	e73d      	b.n	34294 <__aeabi_fsub+0x8c>
   34418:	2b00      	cmp	r3, #0
   3441a:	d058      	beq.n	344ce <__aeabi_fsub+0x2c6>
   3441c:	43d2      	mvns	r2, r2
   3441e:	2a00      	cmp	r2, #0
   34420:	d0ee      	beq.n	34400 <__aeabi_fsub+0x1f8>
   34422:	28ff      	cmp	r0, #255	; 0xff
   34424:	d1e1      	bne.n	343ea <__aeabi_fsub+0x1e2>
   34426:	0033      	movs	r3, r6
   34428:	24ff      	movs	r4, #255	; 0xff
   3442a:	000d      	movs	r5, r1
   3442c:	e732      	b.n	34294 <__aeabi_fsub+0x8c>
   3442e:	29ff      	cmp	r1, #255	; 0xff
   34430:	d010      	beq.n	34454 <__aeabi_fsub+0x24c>
   34432:	0001      	movs	r1, r0
   34434:	e778      	b.n	34328 <__aeabi_fsub+0x120>
   34436:	2b00      	cmp	r3, #0
   34438:	d06e      	beq.n	34518 <__aeabi_fsub+0x310>
   3443a:	24ff      	movs	r4, #255	; 0xff
   3443c:	2e00      	cmp	r6, #0
   3443e:	d100      	bne.n	34442 <__aeabi_fsub+0x23a>
   34440:	e728      	b.n	34294 <__aeabi_fsub+0x8c>
   34442:	2280      	movs	r2, #128	; 0x80
   34444:	4651      	mov	r1, sl
   34446:	03d2      	lsls	r2, r2, #15
   34448:	4211      	tst	r1, r2
   3444a:	d003      	beq.n	34454 <__aeabi_fsub+0x24c>
   3444c:	4661      	mov	r1, ip
   3444e:	4211      	tst	r1, r2
   34450:	d100      	bne.n	34454 <__aeabi_fsub+0x24c>
   34452:	0033      	movs	r3, r6
   34454:	24ff      	movs	r4, #255	; 0xff
   34456:	e71d      	b.n	34294 <__aeabi_fsub+0x8c>
   34458:	24ff      	movs	r4, #255	; 0xff
   3445a:	2300      	movs	r3, #0
   3445c:	e72c      	b.n	342b8 <__aeabi_fsub+0xb0>
   3445e:	2c00      	cmp	r4, #0
   34460:	d1e9      	bne.n	34436 <__aeabi_fsub+0x22e>
   34462:	2b00      	cmp	r3, #0
   34464:	d063      	beq.n	3452e <__aeabi_fsub+0x326>
   34466:	2e00      	cmp	r6, #0
   34468:	d100      	bne.n	3446c <__aeabi_fsub+0x264>
   3446a:	e713      	b.n	34294 <__aeabi_fsub+0x8c>
   3446c:	199b      	adds	r3, r3, r6
   3446e:	015a      	lsls	r2, r3, #5
   34470:	d400      	bmi.n	34474 <__aeabi_fsub+0x26c>
   34472:	e73e      	b.n	342f2 <__aeabi_fsub+0xea>
   34474:	4a31      	ldr	r2, [pc, #196]	; (3453c <__aeabi_fsub+0x334>)
   34476:	000c      	movs	r4, r1
   34478:	4013      	ands	r3, r2
   3447a:	e70b      	b.n	34294 <__aeabi_fsub+0x8c>
   3447c:	2c00      	cmp	r4, #0
   3447e:	d11e      	bne.n	344be <__aeabi_fsub+0x2b6>
   34480:	2b00      	cmp	r3, #0
   34482:	d12f      	bne.n	344e4 <__aeabi_fsub+0x2dc>
   34484:	2e00      	cmp	r6, #0
   34486:	d04f      	beq.n	34528 <__aeabi_fsub+0x320>
   34488:	0033      	movs	r3, r6
   3448a:	000d      	movs	r5, r1
   3448c:	e702      	b.n	34294 <__aeabi_fsub+0x8c>
   3448e:	2601      	movs	r6, #1
   34490:	e755      	b.n	3433e <__aeabi_fsub+0x136>
   34492:	2c00      	cmp	r4, #0
   34494:	d11f      	bne.n	344d6 <__aeabi_fsub+0x2ce>
   34496:	2b00      	cmp	r3, #0
   34498:	d043      	beq.n	34522 <__aeabi_fsub+0x31a>
   3449a:	43c9      	mvns	r1, r1
   3449c:	2900      	cmp	r1, #0
   3449e:	d00b      	beq.n	344b8 <__aeabi_fsub+0x2b0>
   344a0:	28ff      	cmp	r0, #255	; 0xff
   344a2:	d039      	beq.n	34518 <__aeabi_fsub+0x310>
   344a4:	291b      	cmp	r1, #27
   344a6:	dc44      	bgt.n	34532 <__aeabi_fsub+0x32a>
   344a8:	001c      	movs	r4, r3
   344aa:	2720      	movs	r7, #32
   344ac:	40cc      	lsrs	r4, r1
   344ae:	1a79      	subs	r1, r7, r1
   344b0:	408b      	lsls	r3, r1
   344b2:	1e59      	subs	r1, r3, #1
   344b4:	418b      	sbcs	r3, r1
   344b6:	4323      	orrs	r3, r4
   344b8:	199b      	adds	r3, r3, r6
   344ba:	0004      	movs	r4, r0
   344bc:	e740      	b.n	34340 <__aeabi_fsub+0x138>
   344be:	2b00      	cmp	r3, #0
   344c0:	d11a      	bne.n	344f8 <__aeabi_fsub+0x2f0>
   344c2:	2e00      	cmp	r6, #0
   344c4:	d124      	bne.n	34510 <__aeabi_fsub+0x308>
   344c6:	2780      	movs	r7, #128	; 0x80
   344c8:	2200      	movs	r2, #0
   344ca:	03ff      	lsls	r7, r7, #15
   344cc:	e71b      	b.n	34306 <__aeabi_fsub+0xfe>
   344ce:	0033      	movs	r3, r6
   344d0:	0004      	movs	r4, r0
   344d2:	000d      	movs	r5, r1
   344d4:	e6de      	b.n	34294 <__aeabi_fsub+0x8c>
   344d6:	28ff      	cmp	r0, #255	; 0xff
   344d8:	d01e      	beq.n	34518 <__aeabi_fsub+0x310>
   344da:	2480      	movs	r4, #128	; 0x80
   344dc:	04e4      	lsls	r4, r4, #19
   344de:	4249      	negs	r1, r1
   344e0:	4323      	orrs	r3, r4
   344e2:	e7df      	b.n	344a4 <__aeabi_fsub+0x29c>
   344e4:	2e00      	cmp	r6, #0
   344e6:	d100      	bne.n	344ea <__aeabi_fsub+0x2e2>
   344e8:	e6d4      	b.n	34294 <__aeabi_fsub+0x8c>
   344ea:	1b9f      	subs	r7, r3, r6
   344ec:	017a      	lsls	r2, r7, #5
   344ee:	d400      	bmi.n	344f2 <__aeabi_fsub+0x2ea>
   344f0:	e737      	b.n	34362 <__aeabi_fsub+0x15a>
   344f2:	1af3      	subs	r3, r6, r3
   344f4:	000d      	movs	r5, r1
   344f6:	e6cd      	b.n	34294 <__aeabi_fsub+0x8c>
   344f8:	24ff      	movs	r4, #255	; 0xff
   344fa:	2e00      	cmp	r6, #0
   344fc:	d100      	bne.n	34500 <__aeabi_fsub+0x2f8>
   344fe:	e6c9      	b.n	34294 <__aeabi_fsub+0x8c>
   34500:	2280      	movs	r2, #128	; 0x80
   34502:	4650      	mov	r0, sl
   34504:	03d2      	lsls	r2, r2, #15
   34506:	4210      	tst	r0, r2
   34508:	d0a4      	beq.n	34454 <__aeabi_fsub+0x24c>
   3450a:	4660      	mov	r0, ip
   3450c:	4210      	tst	r0, r2
   3450e:	d1a1      	bne.n	34454 <__aeabi_fsub+0x24c>
   34510:	0033      	movs	r3, r6
   34512:	000d      	movs	r5, r1
   34514:	24ff      	movs	r4, #255	; 0xff
   34516:	e6bd      	b.n	34294 <__aeabi_fsub+0x8c>
   34518:	0033      	movs	r3, r6
   3451a:	24ff      	movs	r4, #255	; 0xff
   3451c:	e6ba      	b.n	34294 <__aeabi_fsub+0x8c>
   3451e:	2301      	movs	r3, #1
   34520:	e76e      	b.n	34400 <__aeabi_fsub+0x1f8>
   34522:	0033      	movs	r3, r6
   34524:	0004      	movs	r4, r0
   34526:	e6b5      	b.n	34294 <__aeabi_fsub+0x8c>
   34528:	2700      	movs	r7, #0
   3452a:	2200      	movs	r2, #0
   3452c:	e71c      	b.n	34368 <__aeabi_fsub+0x160>
   3452e:	0033      	movs	r3, r6
   34530:	e6b0      	b.n	34294 <__aeabi_fsub+0x8c>
   34532:	2301      	movs	r3, #1
   34534:	e7c0      	b.n	344b8 <__aeabi_fsub+0x2b0>
   34536:	46c0      	nop			; (mov r8, r8)
   34538:	7dffffff 	.word	0x7dffffff
   3453c:	fbffffff 	.word	0xfbffffff

00034540 <__aeabi_f2iz>:
   34540:	0241      	lsls	r1, r0, #9
   34542:	0043      	lsls	r3, r0, #1
   34544:	0fc2      	lsrs	r2, r0, #31
   34546:	0a49      	lsrs	r1, r1, #9
   34548:	0e1b      	lsrs	r3, r3, #24
   3454a:	2000      	movs	r0, #0
   3454c:	2b7e      	cmp	r3, #126	; 0x7e
   3454e:	dd0d      	ble.n	3456c <__aeabi_f2iz+0x2c>
   34550:	2b9d      	cmp	r3, #157	; 0x9d
   34552:	dc0c      	bgt.n	3456e <__aeabi_f2iz+0x2e>
   34554:	2080      	movs	r0, #128	; 0x80
   34556:	0400      	lsls	r0, r0, #16
   34558:	4301      	orrs	r1, r0
   3455a:	2b95      	cmp	r3, #149	; 0x95
   3455c:	dc0a      	bgt.n	34574 <__aeabi_f2iz+0x34>
   3455e:	2096      	movs	r0, #150	; 0x96
   34560:	1ac3      	subs	r3, r0, r3
   34562:	40d9      	lsrs	r1, r3
   34564:	4248      	negs	r0, r1
   34566:	2a00      	cmp	r2, #0
   34568:	d100      	bne.n	3456c <__aeabi_f2iz+0x2c>
   3456a:	0008      	movs	r0, r1
   3456c:	4770      	bx	lr
   3456e:	4b03      	ldr	r3, [pc, #12]	; (3457c <__aeabi_f2iz+0x3c>)
   34570:	18d0      	adds	r0, r2, r3
   34572:	e7fb      	b.n	3456c <__aeabi_f2iz+0x2c>
   34574:	3b96      	subs	r3, #150	; 0x96
   34576:	4099      	lsls	r1, r3
   34578:	e7f4      	b.n	34564 <__aeabi_f2iz+0x24>
   3457a:	46c0      	nop			; (mov r8, r8)
   3457c:	7fffffff 	.word	0x7fffffff

00034580 <__aeabi_i2f>:
   34580:	b570      	push	{r4, r5, r6, lr}
   34582:	2800      	cmp	r0, #0
   34584:	d030      	beq.n	345e8 <__aeabi_i2f+0x68>
   34586:	17c3      	asrs	r3, r0, #31
   34588:	18c4      	adds	r4, r0, r3
   3458a:	405c      	eors	r4, r3
   3458c:	0fc5      	lsrs	r5, r0, #31
   3458e:	0020      	movs	r0, r4
   34590:	f001 fd18 	bl	35fc4 <__clzsi2>
   34594:	239e      	movs	r3, #158	; 0x9e
   34596:	1a1b      	subs	r3, r3, r0
   34598:	2b96      	cmp	r3, #150	; 0x96
   3459a:	dc0d      	bgt.n	345b8 <__aeabi_i2f+0x38>
   3459c:	2296      	movs	r2, #150	; 0x96
   3459e:	1ad2      	subs	r2, r2, r3
   345a0:	4094      	lsls	r4, r2
   345a2:	002a      	movs	r2, r5
   345a4:	0264      	lsls	r4, r4, #9
   345a6:	0a64      	lsrs	r4, r4, #9
   345a8:	b2db      	uxtb	r3, r3
   345aa:	0264      	lsls	r4, r4, #9
   345ac:	05db      	lsls	r3, r3, #23
   345ae:	0a60      	lsrs	r0, r4, #9
   345b0:	07d2      	lsls	r2, r2, #31
   345b2:	4318      	orrs	r0, r3
   345b4:	4310      	orrs	r0, r2
   345b6:	bd70      	pop	{r4, r5, r6, pc}
   345b8:	2b99      	cmp	r3, #153	; 0x99
   345ba:	dc19      	bgt.n	345f0 <__aeabi_i2f+0x70>
   345bc:	2299      	movs	r2, #153	; 0x99
   345be:	1ad2      	subs	r2, r2, r3
   345c0:	2a00      	cmp	r2, #0
   345c2:	dd29      	ble.n	34618 <__aeabi_i2f+0x98>
   345c4:	4094      	lsls	r4, r2
   345c6:	0022      	movs	r2, r4
   345c8:	4c14      	ldr	r4, [pc, #80]	; (3461c <__aeabi_i2f+0x9c>)
   345ca:	4014      	ands	r4, r2
   345cc:	0751      	lsls	r1, r2, #29
   345ce:	d004      	beq.n	345da <__aeabi_i2f+0x5a>
   345d0:	210f      	movs	r1, #15
   345d2:	400a      	ands	r2, r1
   345d4:	2a04      	cmp	r2, #4
   345d6:	d000      	beq.n	345da <__aeabi_i2f+0x5a>
   345d8:	3404      	adds	r4, #4
   345da:	0162      	lsls	r2, r4, #5
   345dc:	d413      	bmi.n	34606 <__aeabi_i2f+0x86>
   345de:	01a4      	lsls	r4, r4, #6
   345e0:	0a64      	lsrs	r4, r4, #9
   345e2:	b2db      	uxtb	r3, r3
   345e4:	002a      	movs	r2, r5
   345e6:	e7e0      	b.n	345aa <__aeabi_i2f+0x2a>
   345e8:	2200      	movs	r2, #0
   345ea:	2300      	movs	r3, #0
   345ec:	2400      	movs	r4, #0
   345ee:	e7dc      	b.n	345aa <__aeabi_i2f+0x2a>
   345f0:	2205      	movs	r2, #5
   345f2:	0021      	movs	r1, r4
   345f4:	1a12      	subs	r2, r2, r0
   345f6:	40d1      	lsrs	r1, r2
   345f8:	22b9      	movs	r2, #185	; 0xb9
   345fa:	1ad2      	subs	r2, r2, r3
   345fc:	4094      	lsls	r4, r2
   345fe:	1e62      	subs	r2, r4, #1
   34600:	4194      	sbcs	r4, r2
   34602:	430c      	orrs	r4, r1
   34604:	e7da      	b.n	345bc <__aeabi_i2f+0x3c>
   34606:	4b05      	ldr	r3, [pc, #20]	; (3461c <__aeabi_i2f+0x9c>)
   34608:	002a      	movs	r2, r5
   3460a:	401c      	ands	r4, r3
   3460c:	239f      	movs	r3, #159	; 0x9f
   3460e:	01a4      	lsls	r4, r4, #6
   34610:	1a1b      	subs	r3, r3, r0
   34612:	0a64      	lsrs	r4, r4, #9
   34614:	b2db      	uxtb	r3, r3
   34616:	e7c8      	b.n	345aa <__aeabi_i2f+0x2a>
   34618:	0022      	movs	r2, r4
   3461a:	e7d5      	b.n	345c8 <__aeabi_i2f+0x48>
   3461c:	fbffffff 	.word	0xfbffffff

00034620 <__aeabi_dadd>:
   34620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34622:	4645      	mov	r5, r8
   34624:	46de      	mov	lr, fp
   34626:	4657      	mov	r7, sl
   34628:	464e      	mov	r6, r9
   3462a:	030c      	lsls	r4, r1, #12
   3462c:	b5e0      	push	{r5, r6, r7, lr}
   3462e:	004e      	lsls	r6, r1, #1
   34630:	0fc9      	lsrs	r1, r1, #31
   34632:	4688      	mov	r8, r1
   34634:	000d      	movs	r5, r1
   34636:	0a61      	lsrs	r1, r4, #9
   34638:	0f44      	lsrs	r4, r0, #29
   3463a:	430c      	orrs	r4, r1
   3463c:	00c7      	lsls	r7, r0, #3
   3463e:	0319      	lsls	r1, r3, #12
   34640:	0058      	lsls	r0, r3, #1
   34642:	0fdb      	lsrs	r3, r3, #31
   34644:	469b      	mov	fp, r3
   34646:	0a4b      	lsrs	r3, r1, #9
   34648:	0f51      	lsrs	r1, r2, #29
   3464a:	430b      	orrs	r3, r1
   3464c:	0d76      	lsrs	r6, r6, #21
   3464e:	0d40      	lsrs	r0, r0, #21
   34650:	0019      	movs	r1, r3
   34652:	00d2      	lsls	r2, r2, #3
   34654:	45d8      	cmp	r8, fp
   34656:	d100      	bne.n	3465a <__aeabi_dadd+0x3a>
   34658:	e0ae      	b.n	347b8 <__aeabi_dadd+0x198>
   3465a:	1a35      	subs	r5, r6, r0
   3465c:	2d00      	cmp	r5, #0
   3465e:	dc00      	bgt.n	34662 <__aeabi_dadd+0x42>
   34660:	e0f6      	b.n	34850 <__aeabi_dadd+0x230>
   34662:	2800      	cmp	r0, #0
   34664:	d10f      	bne.n	34686 <__aeabi_dadd+0x66>
   34666:	4313      	orrs	r3, r2
   34668:	d100      	bne.n	3466c <__aeabi_dadd+0x4c>
   3466a:	e0db      	b.n	34824 <__aeabi_dadd+0x204>
   3466c:	1e6b      	subs	r3, r5, #1
   3466e:	2b00      	cmp	r3, #0
   34670:	d000      	beq.n	34674 <__aeabi_dadd+0x54>
   34672:	e137      	b.n	348e4 <__aeabi_dadd+0x2c4>
   34674:	1aba      	subs	r2, r7, r2
   34676:	4297      	cmp	r7, r2
   34678:	41bf      	sbcs	r7, r7
   3467a:	1a64      	subs	r4, r4, r1
   3467c:	427f      	negs	r7, r7
   3467e:	1be4      	subs	r4, r4, r7
   34680:	2601      	movs	r6, #1
   34682:	0017      	movs	r7, r2
   34684:	e024      	b.n	346d0 <__aeabi_dadd+0xb0>
   34686:	4bc6      	ldr	r3, [pc, #792]	; (349a0 <__aeabi_dadd+0x380>)
   34688:	429e      	cmp	r6, r3
   3468a:	d04d      	beq.n	34728 <__aeabi_dadd+0x108>
   3468c:	2380      	movs	r3, #128	; 0x80
   3468e:	041b      	lsls	r3, r3, #16
   34690:	4319      	orrs	r1, r3
   34692:	2d38      	cmp	r5, #56	; 0x38
   34694:	dd00      	ble.n	34698 <__aeabi_dadd+0x78>
   34696:	e107      	b.n	348a8 <__aeabi_dadd+0x288>
   34698:	2d1f      	cmp	r5, #31
   3469a:	dd00      	ble.n	3469e <__aeabi_dadd+0x7e>
   3469c:	e138      	b.n	34910 <__aeabi_dadd+0x2f0>
   3469e:	2020      	movs	r0, #32
   346a0:	1b43      	subs	r3, r0, r5
   346a2:	469a      	mov	sl, r3
   346a4:	000b      	movs	r3, r1
   346a6:	4650      	mov	r0, sl
   346a8:	4083      	lsls	r3, r0
   346aa:	4699      	mov	r9, r3
   346ac:	0013      	movs	r3, r2
   346ae:	4648      	mov	r0, r9
   346b0:	40eb      	lsrs	r3, r5
   346b2:	4318      	orrs	r0, r3
   346b4:	0003      	movs	r3, r0
   346b6:	4650      	mov	r0, sl
   346b8:	4082      	lsls	r2, r0
   346ba:	1e50      	subs	r0, r2, #1
   346bc:	4182      	sbcs	r2, r0
   346be:	40e9      	lsrs	r1, r5
   346c0:	431a      	orrs	r2, r3
   346c2:	1aba      	subs	r2, r7, r2
   346c4:	1a61      	subs	r1, r4, r1
   346c6:	4297      	cmp	r7, r2
   346c8:	41a4      	sbcs	r4, r4
   346ca:	0017      	movs	r7, r2
   346cc:	4264      	negs	r4, r4
   346ce:	1b0c      	subs	r4, r1, r4
   346d0:	0223      	lsls	r3, r4, #8
   346d2:	d562      	bpl.n	3479a <__aeabi_dadd+0x17a>
   346d4:	0264      	lsls	r4, r4, #9
   346d6:	0a65      	lsrs	r5, r4, #9
   346d8:	2d00      	cmp	r5, #0
   346da:	d100      	bne.n	346de <__aeabi_dadd+0xbe>
   346dc:	e0df      	b.n	3489e <__aeabi_dadd+0x27e>
   346de:	0028      	movs	r0, r5
   346e0:	f001 fc70 	bl	35fc4 <__clzsi2>
   346e4:	0003      	movs	r3, r0
   346e6:	3b08      	subs	r3, #8
   346e8:	2b1f      	cmp	r3, #31
   346ea:	dd00      	ble.n	346ee <__aeabi_dadd+0xce>
   346ec:	e0d2      	b.n	34894 <__aeabi_dadd+0x274>
   346ee:	2220      	movs	r2, #32
   346f0:	003c      	movs	r4, r7
   346f2:	1ad2      	subs	r2, r2, r3
   346f4:	409d      	lsls	r5, r3
   346f6:	40d4      	lsrs	r4, r2
   346f8:	409f      	lsls	r7, r3
   346fa:	4325      	orrs	r5, r4
   346fc:	429e      	cmp	r6, r3
   346fe:	dd00      	ble.n	34702 <__aeabi_dadd+0xe2>
   34700:	e0c4      	b.n	3488c <__aeabi_dadd+0x26c>
   34702:	1b9e      	subs	r6, r3, r6
   34704:	1c73      	adds	r3, r6, #1
   34706:	2b1f      	cmp	r3, #31
   34708:	dd00      	ble.n	3470c <__aeabi_dadd+0xec>
   3470a:	e0f1      	b.n	348f0 <__aeabi_dadd+0x2d0>
   3470c:	2220      	movs	r2, #32
   3470e:	0038      	movs	r0, r7
   34710:	0029      	movs	r1, r5
   34712:	1ad2      	subs	r2, r2, r3
   34714:	40d8      	lsrs	r0, r3
   34716:	4091      	lsls	r1, r2
   34718:	4097      	lsls	r7, r2
   3471a:	002c      	movs	r4, r5
   3471c:	4301      	orrs	r1, r0
   3471e:	1e78      	subs	r0, r7, #1
   34720:	4187      	sbcs	r7, r0
   34722:	40dc      	lsrs	r4, r3
   34724:	2600      	movs	r6, #0
   34726:	430f      	orrs	r7, r1
   34728:	077b      	lsls	r3, r7, #29
   3472a:	d009      	beq.n	34740 <__aeabi_dadd+0x120>
   3472c:	230f      	movs	r3, #15
   3472e:	403b      	ands	r3, r7
   34730:	2b04      	cmp	r3, #4
   34732:	d005      	beq.n	34740 <__aeabi_dadd+0x120>
   34734:	1d3b      	adds	r3, r7, #4
   34736:	42bb      	cmp	r3, r7
   34738:	41bf      	sbcs	r7, r7
   3473a:	427f      	negs	r7, r7
   3473c:	19e4      	adds	r4, r4, r7
   3473e:	001f      	movs	r7, r3
   34740:	0223      	lsls	r3, r4, #8
   34742:	d52c      	bpl.n	3479e <__aeabi_dadd+0x17e>
   34744:	4b96      	ldr	r3, [pc, #600]	; (349a0 <__aeabi_dadd+0x380>)
   34746:	3601      	adds	r6, #1
   34748:	429e      	cmp	r6, r3
   3474a:	d100      	bne.n	3474e <__aeabi_dadd+0x12e>
   3474c:	e09a      	b.n	34884 <__aeabi_dadd+0x264>
   3474e:	4645      	mov	r5, r8
   34750:	4b94      	ldr	r3, [pc, #592]	; (349a4 <__aeabi_dadd+0x384>)
   34752:	08ff      	lsrs	r7, r7, #3
   34754:	401c      	ands	r4, r3
   34756:	0760      	lsls	r0, r4, #29
   34758:	0576      	lsls	r6, r6, #21
   3475a:	0264      	lsls	r4, r4, #9
   3475c:	4307      	orrs	r7, r0
   3475e:	0b24      	lsrs	r4, r4, #12
   34760:	0d76      	lsrs	r6, r6, #21
   34762:	2100      	movs	r1, #0
   34764:	0324      	lsls	r4, r4, #12
   34766:	0b23      	lsrs	r3, r4, #12
   34768:	0d0c      	lsrs	r4, r1, #20
   3476a:	4a8f      	ldr	r2, [pc, #572]	; (349a8 <__aeabi_dadd+0x388>)
   3476c:	0524      	lsls	r4, r4, #20
   3476e:	431c      	orrs	r4, r3
   34770:	4014      	ands	r4, r2
   34772:	0533      	lsls	r3, r6, #20
   34774:	4323      	orrs	r3, r4
   34776:	005b      	lsls	r3, r3, #1
   34778:	07ed      	lsls	r5, r5, #31
   3477a:	085b      	lsrs	r3, r3, #1
   3477c:	432b      	orrs	r3, r5
   3477e:	0038      	movs	r0, r7
   34780:	0019      	movs	r1, r3
   34782:	bc3c      	pop	{r2, r3, r4, r5}
   34784:	4690      	mov	r8, r2
   34786:	4699      	mov	r9, r3
   34788:	46a2      	mov	sl, r4
   3478a:	46ab      	mov	fp, r5
   3478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3478e:	4664      	mov	r4, ip
   34790:	4304      	orrs	r4, r0
   34792:	d100      	bne.n	34796 <__aeabi_dadd+0x176>
   34794:	e211      	b.n	34bba <__aeabi_dadd+0x59a>
   34796:	0004      	movs	r4, r0
   34798:	4667      	mov	r7, ip
   3479a:	077b      	lsls	r3, r7, #29
   3479c:	d1c6      	bne.n	3472c <__aeabi_dadd+0x10c>
   3479e:	4645      	mov	r5, r8
   347a0:	0760      	lsls	r0, r4, #29
   347a2:	08ff      	lsrs	r7, r7, #3
   347a4:	4307      	orrs	r7, r0
   347a6:	08e4      	lsrs	r4, r4, #3
   347a8:	4b7d      	ldr	r3, [pc, #500]	; (349a0 <__aeabi_dadd+0x380>)
   347aa:	429e      	cmp	r6, r3
   347ac:	d030      	beq.n	34810 <__aeabi_dadd+0x1f0>
   347ae:	0324      	lsls	r4, r4, #12
   347b0:	0576      	lsls	r6, r6, #21
   347b2:	0b24      	lsrs	r4, r4, #12
   347b4:	0d76      	lsrs	r6, r6, #21
   347b6:	e7d4      	b.n	34762 <__aeabi_dadd+0x142>
   347b8:	1a33      	subs	r3, r6, r0
   347ba:	469a      	mov	sl, r3
   347bc:	2b00      	cmp	r3, #0
   347be:	dd78      	ble.n	348b2 <__aeabi_dadd+0x292>
   347c0:	2800      	cmp	r0, #0
   347c2:	d031      	beq.n	34828 <__aeabi_dadd+0x208>
   347c4:	4876      	ldr	r0, [pc, #472]	; (349a0 <__aeabi_dadd+0x380>)
   347c6:	4286      	cmp	r6, r0
   347c8:	d0ae      	beq.n	34728 <__aeabi_dadd+0x108>
   347ca:	2080      	movs	r0, #128	; 0x80
   347cc:	0400      	lsls	r0, r0, #16
   347ce:	4301      	orrs	r1, r0
   347d0:	4653      	mov	r3, sl
   347d2:	2b38      	cmp	r3, #56	; 0x38
   347d4:	dc00      	bgt.n	347d8 <__aeabi_dadd+0x1b8>
   347d6:	e0e9      	b.n	349ac <__aeabi_dadd+0x38c>
   347d8:	430a      	orrs	r2, r1
   347da:	1e51      	subs	r1, r2, #1
   347dc:	418a      	sbcs	r2, r1
   347de:	2100      	movs	r1, #0
   347e0:	19d2      	adds	r2, r2, r7
   347e2:	42ba      	cmp	r2, r7
   347e4:	41bf      	sbcs	r7, r7
   347e6:	1909      	adds	r1, r1, r4
   347e8:	427c      	negs	r4, r7
   347ea:	0017      	movs	r7, r2
   347ec:	190c      	adds	r4, r1, r4
   347ee:	0223      	lsls	r3, r4, #8
   347f0:	d5d3      	bpl.n	3479a <__aeabi_dadd+0x17a>
   347f2:	4b6b      	ldr	r3, [pc, #428]	; (349a0 <__aeabi_dadd+0x380>)
   347f4:	3601      	adds	r6, #1
   347f6:	429e      	cmp	r6, r3
   347f8:	d100      	bne.n	347fc <__aeabi_dadd+0x1dc>
   347fa:	e13a      	b.n	34a72 <__aeabi_dadd+0x452>
   347fc:	2001      	movs	r0, #1
   347fe:	4b69      	ldr	r3, [pc, #420]	; (349a4 <__aeabi_dadd+0x384>)
   34800:	401c      	ands	r4, r3
   34802:	087b      	lsrs	r3, r7, #1
   34804:	4007      	ands	r7, r0
   34806:	431f      	orrs	r7, r3
   34808:	07e0      	lsls	r0, r4, #31
   3480a:	4307      	orrs	r7, r0
   3480c:	0864      	lsrs	r4, r4, #1
   3480e:	e78b      	b.n	34728 <__aeabi_dadd+0x108>
   34810:	0023      	movs	r3, r4
   34812:	433b      	orrs	r3, r7
   34814:	d100      	bne.n	34818 <__aeabi_dadd+0x1f8>
   34816:	e1cb      	b.n	34bb0 <__aeabi_dadd+0x590>
   34818:	2280      	movs	r2, #128	; 0x80
   3481a:	0312      	lsls	r2, r2, #12
   3481c:	4314      	orrs	r4, r2
   3481e:	0324      	lsls	r4, r4, #12
   34820:	0b24      	lsrs	r4, r4, #12
   34822:	e79e      	b.n	34762 <__aeabi_dadd+0x142>
   34824:	002e      	movs	r6, r5
   34826:	e77f      	b.n	34728 <__aeabi_dadd+0x108>
   34828:	0008      	movs	r0, r1
   3482a:	4310      	orrs	r0, r2
   3482c:	d100      	bne.n	34830 <__aeabi_dadd+0x210>
   3482e:	e0b4      	b.n	3499a <__aeabi_dadd+0x37a>
   34830:	1e58      	subs	r0, r3, #1
   34832:	2800      	cmp	r0, #0
   34834:	d000      	beq.n	34838 <__aeabi_dadd+0x218>
   34836:	e0de      	b.n	349f6 <__aeabi_dadd+0x3d6>
   34838:	18ba      	adds	r2, r7, r2
   3483a:	42ba      	cmp	r2, r7
   3483c:	419b      	sbcs	r3, r3
   3483e:	1864      	adds	r4, r4, r1
   34840:	425b      	negs	r3, r3
   34842:	18e4      	adds	r4, r4, r3
   34844:	0017      	movs	r7, r2
   34846:	2601      	movs	r6, #1
   34848:	0223      	lsls	r3, r4, #8
   3484a:	d5a6      	bpl.n	3479a <__aeabi_dadd+0x17a>
   3484c:	2602      	movs	r6, #2
   3484e:	e7d5      	b.n	347fc <__aeabi_dadd+0x1dc>
   34850:	2d00      	cmp	r5, #0
   34852:	d16e      	bne.n	34932 <__aeabi_dadd+0x312>
   34854:	1c70      	adds	r0, r6, #1
   34856:	0540      	lsls	r0, r0, #21
   34858:	0d40      	lsrs	r0, r0, #21
   3485a:	2801      	cmp	r0, #1
   3485c:	dc00      	bgt.n	34860 <__aeabi_dadd+0x240>
   3485e:	e0f9      	b.n	34a54 <__aeabi_dadd+0x434>
   34860:	1ab8      	subs	r0, r7, r2
   34862:	4684      	mov	ip, r0
   34864:	4287      	cmp	r7, r0
   34866:	4180      	sbcs	r0, r0
   34868:	1ae5      	subs	r5, r4, r3
   3486a:	4240      	negs	r0, r0
   3486c:	1a2d      	subs	r5, r5, r0
   3486e:	0228      	lsls	r0, r5, #8
   34870:	d400      	bmi.n	34874 <__aeabi_dadd+0x254>
   34872:	e089      	b.n	34988 <__aeabi_dadd+0x368>
   34874:	1bd7      	subs	r7, r2, r7
   34876:	42ba      	cmp	r2, r7
   34878:	4192      	sbcs	r2, r2
   3487a:	1b1c      	subs	r4, r3, r4
   3487c:	4252      	negs	r2, r2
   3487e:	1aa5      	subs	r5, r4, r2
   34880:	46d8      	mov	r8, fp
   34882:	e729      	b.n	346d8 <__aeabi_dadd+0xb8>
   34884:	4645      	mov	r5, r8
   34886:	2400      	movs	r4, #0
   34888:	2700      	movs	r7, #0
   3488a:	e76a      	b.n	34762 <__aeabi_dadd+0x142>
   3488c:	4c45      	ldr	r4, [pc, #276]	; (349a4 <__aeabi_dadd+0x384>)
   3488e:	1af6      	subs	r6, r6, r3
   34890:	402c      	ands	r4, r5
   34892:	e749      	b.n	34728 <__aeabi_dadd+0x108>
   34894:	003d      	movs	r5, r7
   34896:	3828      	subs	r0, #40	; 0x28
   34898:	4085      	lsls	r5, r0
   3489a:	2700      	movs	r7, #0
   3489c:	e72e      	b.n	346fc <__aeabi_dadd+0xdc>
   3489e:	0038      	movs	r0, r7
   348a0:	f001 fb90 	bl	35fc4 <__clzsi2>
   348a4:	3020      	adds	r0, #32
   348a6:	e71d      	b.n	346e4 <__aeabi_dadd+0xc4>
   348a8:	430a      	orrs	r2, r1
   348aa:	1e51      	subs	r1, r2, #1
   348ac:	418a      	sbcs	r2, r1
   348ae:	2100      	movs	r1, #0
   348b0:	e707      	b.n	346c2 <__aeabi_dadd+0xa2>
   348b2:	2b00      	cmp	r3, #0
   348b4:	d000      	beq.n	348b8 <__aeabi_dadd+0x298>
   348b6:	e0f3      	b.n	34aa0 <__aeabi_dadd+0x480>
   348b8:	1c70      	adds	r0, r6, #1
   348ba:	0543      	lsls	r3, r0, #21
   348bc:	0d5b      	lsrs	r3, r3, #21
   348be:	2b01      	cmp	r3, #1
   348c0:	dc00      	bgt.n	348c4 <__aeabi_dadd+0x2a4>
   348c2:	e0ad      	b.n	34a20 <__aeabi_dadd+0x400>
   348c4:	4b36      	ldr	r3, [pc, #216]	; (349a0 <__aeabi_dadd+0x380>)
   348c6:	4298      	cmp	r0, r3
   348c8:	d100      	bne.n	348cc <__aeabi_dadd+0x2ac>
   348ca:	e0d1      	b.n	34a70 <__aeabi_dadd+0x450>
   348cc:	18ba      	adds	r2, r7, r2
   348ce:	42ba      	cmp	r2, r7
   348d0:	41bf      	sbcs	r7, r7
   348d2:	1864      	adds	r4, r4, r1
   348d4:	427f      	negs	r7, r7
   348d6:	19e4      	adds	r4, r4, r7
   348d8:	07e7      	lsls	r7, r4, #31
   348da:	0852      	lsrs	r2, r2, #1
   348dc:	4317      	orrs	r7, r2
   348de:	0864      	lsrs	r4, r4, #1
   348e0:	0006      	movs	r6, r0
   348e2:	e721      	b.n	34728 <__aeabi_dadd+0x108>
   348e4:	482e      	ldr	r0, [pc, #184]	; (349a0 <__aeabi_dadd+0x380>)
   348e6:	4285      	cmp	r5, r0
   348e8:	d100      	bne.n	348ec <__aeabi_dadd+0x2cc>
   348ea:	e093      	b.n	34a14 <__aeabi_dadd+0x3f4>
   348ec:	001d      	movs	r5, r3
   348ee:	e6d0      	b.n	34692 <__aeabi_dadd+0x72>
   348f0:	0029      	movs	r1, r5
   348f2:	3e1f      	subs	r6, #31
   348f4:	40f1      	lsrs	r1, r6
   348f6:	2b20      	cmp	r3, #32
   348f8:	d100      	bne.n	348fc <__aeabi_dadd+0x2dc>
   348fa:	e08d      	b.n	34a18 <__aeabi_dadd+0x3f8>
   348fc:	2240      	movs	r2, #64	; 0x40
   348fe:	1ad3      	subs	r3, r2, r3
   34900:	409d      	lsls	r5, r3
   34902:	432f      	orrs	r7, r5
   34904:	1e7d      	subs	r5, r7, #1
   34906:	41af      	sbcs	r7, r5
   34908:	2400      	movs	r4, #0
   3490a:	430f      	orrs	r7, r1
   3490c:	2600      	movs	r6, #0
   3490e:	e744      	b.n	3479a <__aeabi_dadd+0x17a>
   34910:	002b      	movs	r3, r5
   34912:	0008      	movs	r0, r1
   34914:	3b20      	subs	r3, #32
   34916:	40d8      	lsrs	r0, r3
   34918:	0003      	movs	r3, r0
   3491a:	2d20      	cmp	r5, #32
   3491c:	d100      	bne.n	34920 <__aeabi_dadd+0x300>
   3491e:	e07d      	b.n	34a1c <__aeabi_dadd+0x3fc>
   34920:	2040      	movs	r0, #64	; 0x40
   34922:	1b45      	subs	r5, r0, r5
   34924:	40a9      	lsls	r1, r5
   34926:	430a      	orrs	r2, r1
   34928:	1e51      	subs	r1, r2, #1
   3492a:	418a      	sbcs	r2, r1
   3492c:	2100      	movs	r1, #0
   3492e:	431a      	orrs	r2, r3
   34930:	e6c7      	b.n	346c2 <__aeabi_dadd+0xa2>
   34932:	2e00      	cmp	r6, #0
   34934:	d050      	beq.n	349d8 <__aeabi_dadd+0x3b8>
   34936:	4e1a      	ldr	r6, [pc, #104]	; (349a0 <__aeabi_dadd+0x380>)
   34938:	42b0      	cmp	r0, r6
   3493a:	d057      	beq.n	349ec <__aeabi_dadd+0x3cc>
   3493c:	2680      	movs	r6, #128	; 0x80
   3493e:	426b      	negs	r3, r5
   34940:	4699      	mov	r9, r3
   34942:	0436      	lsls	r6, r6, #16
   34944:	4334      	orrs	r4, r6
   34946:	464b      	mov	r3, r9
   34948:	2b38      	cmp	r3, #56	; 0x38
   3494a:	dd00      	ble.n	3494e <__aeabi_dadd+0x32e>
   3494c:	e0d6      	b.n	34afc <__aeabi_dadd+0x4dc>
   3494e:	2b1f      	cmp	r3, #31
   34950:	dd00      	ble.n	34954 <__aeabi_dadd+0x334>
   34952:	e135      	b.n	34bc0 <__aeabi_dadd+0x5a0>
   34954:	2620      	movs	r6, #32
   34956:	1af5      	subs	r5, r6, r3
   34958:	0026      	movs	r6, r4
   3495a:	40ae      	lsls	r6, r5
   3495c:	46b2      	mov	sl, r6
   3495e:	003e      	movs	r6, r7
   34960:	40de      	lsrs	r6, r3
   34962:	46ac      	mov	ip, r5
   34964:	0035      	movs	r5, r6
   34966:	4656      	mov	r6, sl
   34968:	432e      	orrs	r6, r5
   3496a:	4665      	mov	r5, ip
   3496c:	40af      	lsls	r7, r5
   3496e:	1e7d      	subs	r5, r7, #1
   34970:	41af      	sbcs	r7, r5
   34972:	40dc      	lsrs	r4, r3
   34974:	4337      	orrs	r7, r6
   34976:	1bd7      	subs	r7, r2, r7
   34978:	42ba      	cmp	r2, r7
   3497a:	4192      	sbcs	r2, r2
   3497c:	1b0c      	subs	r4, r1, r4
   3497e:	4252      	negs	r2, r2
   34980:	1aa4      	subs	r4, r4, r2
   34982:	0006      	movs	r6, r0
   34984:	46d8      	mov	r8, fp
   34986:	e6a3      	b.n	346d0 <__aeabi_dadd+0xb0>
   34988:	4664      	mov	r4, ip
   3498a:	4667      	mov	r7, ip
   3498c:	432c      	orrs	r4, r5
   3498e:	d000      	beq.n	34992 <__aeabi_dadd+0x372>
   34990:	e6a2      	b.n	346d8 <__aeabi_dadd+0xb8>
   34992:	2500      	movs	r5, #0
   34994:	2600      	movs	r6, #0
   34996:	2700      	movs	r7, #0
   34998:	e706      	b.n	347a8 <__aeabi_dadd+0x188>
   3499a:	001e      	movs	r6, r3
   3499c:	e6c4      	b.n	34728 <__aeabi_dadd+0x108>
   3499e:	46c0      	nop			; (mov r8, r8)
   349a0:	000007ff 	.word	0x000007ff
   349a4:	ff7fffff 	.word	0xff7fffff
   349a8:	800fffff 	.word	0x800fffff
   349ac:	2b1f      	cmp	r3, #31
   349ae:	dc63      	bgt.n	34a78 <__aeabi_dadd+0x458>
   349b0:	2020      	movs	r0, #32
   349b2:	1ac3      	subs	r3, r0, r3
   349b4:	0008      	movs	r0, r1
   349b6:	4098      	lsls	r0, r3
   349b8:	469c      	mov	ip, r3
   349ba:	4683      	mov	fp, r0
   349bc:	4653      	mov	r3, sl
   349be:	0010      	movs	r0, r2
   349c0:	40d8      	lsrs	r0, r3
   349c2:	0003      	movs	r3, r0
   349c4:	4658      	mov	r0, fp
   349c6:	4318      	orrs	r0, r3
   349c8:	4663      	mov	r3, ip
   349ca:	409a      	lsls	r2, r3
   349cc:	1e53      	subs	r3, r2, #1
   349ce:	419a      	sbcs	r2, r3
   349d0:	4653      	mov	r3, sl
   349d2:	4302      	orrs	r2, r0
   349d4:	40d9      	lsrs	r1, r3
   349d6:	e703      	b.n	347e0 <__aeabi_dadd+0x1c0>
   349d8:	0026      	movs	r6, r4
   349da:	433e      	orrs	r6, r7
   349dc:	d006      	beq.n	349ec <__aeabi_dadd+0x3cc>
   349de:	43eb      	mvns	r3, r5
   349e0:	4699      	mov	r9, r3
   349e2:	2b00      	cmp	r3, #0
   349e4:	d0c7      	beq.n	34976 <__aeabi_dadd+0x356>
   349e6:	4e94      	ldr	r6, [pc, #592]	; (34c38 <__aeabi_dadd+0x618>)
   349e8:	42b0      	cmp	r0, r6
   349ea:	d1ac      	bne.n	34946 <__aeabi_dadd+0x326>
   349ec:	000c      	movs	r4, r1
   349ee:	0017      	movs	r7, r2
   349f0:	0006      	movs	r6, r0
   349f2:	46d8      	mov	r8, fp
   349f4:	e698      	b.n	34728 <__aeabi_dadd+0x108>
   349f6:	4b90      	ldr	r3, [pc, #576]	; (34c38 <__aeabi_dadd+0x618>)
   349f8:	459a      	cmp	sl, r3
   349fa:	d00b      	beq.n	34a14 <__aeabi_dadd+0x3f4>
   349fc:	4682      	mov	sl, r0
   349fe:	e6e7      	b.n	347d0 <__aeabi_dadd+0x1b0>
   34a00:	2800      	cmp	r0, #0
   34a02:	d000      	beq.n	34a06 <__aeabi_dadd+0x3e6>
   34a04:	e09e      	b.n	34b44 <__aeabi_dadd+0x524>
   34a06:	0018      	movs	r0, r3
   34a08:	4310      	orrs	r0, r2
   34a0a:	d100      	bne.n	34a0e <__aeabi_dadd+0x3ee>
   34a0c:	e0e9      	b.n	34be2 <__aeabi_dadd+0x5c2>
   34a0e:	001c      	movs	r4, r3
   34a10:	0017      	movs	r7, r2
   34a12:	46d8      	mov	r8, fp
   34a14:	4e88      	ldr	r6, [pc, #544]	; (34c38 <__aeabi_dadd+0x618>)
   34a16:	e687      	b.n	34728 <__aeabi_dadd+0x108>
   34a18:	2500      	movs	r5, #0
   34a1a:	e772      	b.n	34902 <__aeabi_dadd+0x2e2>
   34a1c:	2100      	movs	r1, #0
   34a1e:	e782      	b.n	34926 <__aeabi_dadd+0x306>
   34a20:	0023      	movs	r3, r4
   34a22:	433b      	orrs	r3, r7
   34a24:	2e00      	cmp	r6, #0
   34a26:	d000      	beq.n	34a2a <__aeabi_dadd+0x40a>
   34a28:	e0ab      	b.n	34b82 <__aeabi_dadd+0x562>
   34a2a:	2b00      	cmp	r3, #0
   34a2c:	d100      	bne.n	34a30 <__aeabi_dadd+0x410>
   34a2e:	e0e7      	b.n	34c00 <__aeabi_dadd+0x5e0>
   34a30:	000b      	movs	r3, r1
   34a32:	4313      	orrs	r3, r2
   34a34:	d100      	bne.n	34a38 <__aeabi_dadd+0x418>
   34a36:	e677      	b.n	34728 <__aeabi_dadd+0x108>
   34a38:	18ba      	adds	r2, r7, r2
   34a3a:	42ba      	cmp	r2, r7
   34a3c:	41bf      	sbcs	r7, r7
   34a3e:	1864      	adds	r4, r4, r1
   34a40:	427f      	negs	r7, r7
   34a42:	19e4      	adds	r4, r4, r7
   34a44:	0223      	lsls	r3, r4, #8
   34a46:	d400      	bmi.n	34a4a <__aeabi_dadd+0x42a>
   34a48:	e0f2      	b.n	34c30 <__aeabi_dadd+0x610>
   34a4a:	4b7c      	ldr	r3, [pc, #496]	; (34c3c <__aeabi_dadd+0x61c>)
   34a4c:	0017      	movs	r7, r2
   34a4e:	401c      	ands	r4, r3
   34a50:	0006      	movs	r6, r0
   34a52:	e669      	b.n	34728 <__aeabi_dadd+0x108>
   34a54:	0020      	movs	r0, r4
   34a56:	4338      	orrs	r0, r7
   34a58:	2e00      	cmp	r6, #0
   34a5a:	d1d1      	bne.n	34a00 <__aeabi_dadd+0x3e0>
   34a5c:	2800      	cmp	r0, #0
   34a5e:	d15b      	bne.n	34b18 <__aeabi_dadd+0x4f8>
   34a60:	001c      	movs	r4, r3
   34a62:	4314      	orrs	r4, r2
   34a64:	d100      	bne.n	34a68 <__aeabi_dadd+0x448>
   34a66:	e0a8      	b.n	34bba <__aeabi_dadd+0x59a>
   34a68:	001c      	movs	r4, r3
   34a6a:	0017      	movs	r7, r2
   34a6c:	46d8      	mov	r8, fp
   34a6e:	e65b      	b.n	34728 <__aeabi_dadd+0x108>
   34a70:	0006      	movs	r6, r0
   34a72:	2400      	movs	r4, #0
   34a74:	2700      	movs	r7, #0
   34a76:	e697      	b.n	347a8 <__aeabi_dadd+0x188>
   34a78:	4650      	mov	r0, sl
   34a7a:	000b      	movs	r3, r1
   34a7c:	3820      	subs	r0, #32
   34a7e:	40c3      	lsrs	r3, r0
   34a80:	4699      	mov	r9, r3
   34a82:	4653      	mov	r3, sl
   34a84:	2b20      	cmp	r3, #32
   34a86:	d100      	bne.n	34a8a <__aeabi_dadd+0x46a>
   34a88:	e095      	b.n	34bb6 <__aeabi_dadd+0x596>
   34a8a:	2340      	movs	r3, #64	; 0x40
   34a8c:	4650      	mov	r0, sl
   34a8e:	1a1b      	subs	r3, r3, r0
   34a90:	4099      	lsls	r1, r3
   34a92:	430a      	orrs	r2, r1
   34a94:	1e51      	subs	r1, r2, #1
   34a96:	418a      	sbcs	r2, r1
   34a98:	464b      	mov	r3, r9
   34a9a:	2100      	movs	r1, #0
   34a9c:	431a      	orrs	r2, r3
   34a9e:	e69f      	b.n	347e0 <__aeabi_dadd+0x1c0>
   34aa0:	2e00      	cmp	r6, #0
   34aa2:	d130      	bne.n	34b06 <__aeabi_dadd+0x4e6>
   34aa4:	0026      	movs	r6, r4
   34aa6:	433e      	orrs	r6, r7
   34aa8:	d067      	beq.n	34b7a <__aeabi_dadd+0x55a>
   34aaa:	43db      	mvns	r3, r3
   34aac:	469a      	mov	sl, r3
   34aae:	2b00      	cmp	r3, #0
   34ab0:	d01c      	beq.n	34aec <__aeabi_dadd+0x4cc>
   34ab2:	4e61      	ldr	r6, [pc, #388]	; (34c38 <__aeabi_dadd+0x618>)
   34ab4:	42b0      	cmp	r0, r6
   34ab6:	d060      	beq.n	34b7a <__aeabi_dadd+0x55a>
   34ab8:	4653      	mov	r3, sl
   34aba:	2b38      	cmp	r3, #56	; 0x38
   34abc:	dd00      	ble.n	34ac0 <__aeabi_dadd+0x4a0>
   34abe:	e096      	b.n	34bee <__aeabi_dadd+0x5ce>
   34ac0:	2b1f      	cmp	r3, #31
   34ac2:	dd00      	ble.n	34ac6 <__aeabi_dadd+0x4a6>
   34ac4:	e09f      	b.n	34c06 <__aeabi_dadd+0x5e6>
   34ac6:	2620      	movs	r6, #32
   34ac8:	1af3      	subs	r3, r6, r3
   34aca:	0026      	movs	r6, r4
   34acc:	409e      	lsls	r6, r3
   34ace:	469c      	mov	ip, r3
   34ad0:	46b3      	mov	fp, r6
   34ad2:	4653      	mov	r3, sl
   34ad4:	003e      	movs	r6, r7
   34ad6:	40de      	lsrs	r6, r3
   34ad8:	0033      	movs	r3, r6
   34ada:	465e      	mov	r6, fp
   34adc:	431e      	orrs	r6, r3
   34ade:	4663      	mov	r3, ip
   34ae0:	409f      	lsls	r7, r3
   34ae2:	1e7b      	subs	r3, r7, #1
   34ae4:	419f      	sbcs	r7, r3
   34ae6:	4653      	mov	r3, sl
   34ae8:	40dc      	lsrs	r4, r3
   34aea:	4337      	orrs	r7, r6
   34aec:	18bf      	adds	r7, r7, r2
   34aee:	4297      	cmp	r7, r2
   34af0:	4192      	sbcs	r2, r2
   34af2:	1864      	adds	r4, r4, r1
   34af4:	4252      	negs	r2, r2
   34af6:	18a4      	adds	r4, r4, r2
   34af8:	0006      	movs	r6, r0
   34afa:	e678      	b.n	347ee <__aeabi_dadd+0x1ce>
   34afc:	4327      	orrs	r7, r4
   34afe:	1e7c      	subs	r4, r7, #1
   34b00:	41a7      	sbcs	r7, r4
   34b02:	2400      	movs	r4, #0
   34b04:	e737      	b.n	34976 <__aeabi_dadd+0x356>
   34b06:	4e4c      	ldr	r6, [pc, #304]	; (34c38 <__aeabi_dadd+0x618>)
   34b08:	42b0      	cmp	r0, r6
   34b0a:	d036      	beq.n	34b7a <__aeabi_dadd+0x55a>
   34b0c:	2680      	movs	r6, #128	; 0x80
   34b0e:	425b      	negs	r3, r3
   34b10:	0436      	lsls	r6, r6, #16
   34b12:	469a      	mov	sl, r3
   34b14:	4334      	orrs	r4, r6
   34b16:	e7cf      	b.n	34ab8 <__aeabi_dadd+0x498>
   34b18:	0018      	movs	r0, r3
   34b1a:	4310      	orrs	r0, r2
   34b1c:	d100      	bne.n	34b20 <__aeabi_dadd+0x500>
   34b1e:	e603      	b.n	34728 <__aeabi_dadd+0x108>
   34b20:	1ab8      	subs	r0, r7, r2
   34b22:	4684      	mov	ip, r0
   34b24:	4567      	cmp	r7, ip
   34b26:	41ad      	sbcs	r5, r5
   34b28:	1ae0      	subs	r0, r4, r3
   34b2a:	426d      	negs	r5, r5
   34b2c:	1b40      	subs	r0, r0, r5
   34b2e:	0205      	lsls	r5, r0, #8
   34b30:	d400      	bmi.n	34b34 <__aeabi_dadd+0x514>
   34b32:	e62c      	b.n	3478e <__aeabi_dadd+0x16e>
   34b34:	1bd7      	subs	r7, r2, r7
   34b36:	42ba      	cmp	r2, r7
   34b38:	4192      	sbcs	r2, r2
   34b3a:	1b1c      	subs	r4, r3, r4
   34b3c:	4252      	negs	r2, r2
   34b3e:	1aa4      	subs	r4, r4, r2
   34b40:	46d8      	mov	r8, fp
   34b42:	e5f1      	b.n	34728 <__aeabi_dadd+0x108>
   34b44:	0018      	movs	r0, r3
   34b46:	4310      	orrs	r0, r2
   34b48:	d100      	bne.n	34b4c <__aeabi_dadd+0x52c>
   34b4a:	e763      	b.n	34a14 <__aeabi_dadd+0x3f4>
   34b4c:	08f8      	lsrs	r0, r7, #3
   34b4e:	0767      	lsls	r7, r4, #29
   34b50:	4307      	orrs	r7, r0
   34b52:	2080      	movs	r0, #128	; 0x80
   34b54:	08e4      	lsrs	r4, r4, #3
   34b56:	0300      	lsls	r0, r0, #12
   34b58:	4204      	tst	r4, r0
   34b5a:	d008      	beq.n	34b6e <__aeabi_dadd+0x54e>
   34b5c:	08dd      	lsrs	r5, r3, #3
   34b5e:	4205      	tst	r5, r0
   34b60:	d105      	bne.n	34b6e <__aeabi_dadd+0x54e>
   34b62:	08d2      	lsrs	r2, r2, #3
   34b64:	0759      	lsls	r1, r3, #29
   34b66:	4311      	orrs	r1, r2
   34b68:	000f      	movs	r7, r1
   34b6a:	002c      	movs	r4, r5
   34b6c:	46d8      	mov	r8, fp
   34b6e:	0f7b      	lsrs	r3, r7, #29
   34b70:	00e4      	lsls	r4, r4, #3
   34b72:	431c      	orrs	r4, r3
   34b74:	00ff      	lsls	r7, r7, #3
   34b76:	4e30      	ldr	r6, [pc, #192]	; (34c38 <__aeabi_dadd+0x618>)
   34b78:	e5d6      	b.n	34728 <__aeabi_dadd+0x108>
   34b7a:	000c      	movs	r4, r1
   34b7c:	0017      	movs	r7, r2
   34b7e:	0006      	movs	r6, r0
   34b80:	e5d2      	b.n	34728 <__aeabi_dadd+0x108>
   34b82:	2b00      	cmp	r3, #0
   34b84:	d038      	beq.n	34bf8 <__aeabi_dadd+0x5d8>
   34b86:	000b      	movs	r3, r1
   34b88:	4313      	orrs	r3, r2
   34b8a:	d100      	bne.n	34b8e <__aeabi_dadd+0x56e>
   34b8c:	e742      	b.n	34a14 <__aeabi_dadd+0x3f4>
   34b8e:	08f8      	lsrs	r0, r7, #3
   34b90:	0767      	lsls	r7, r4, #29
   34b92:	4307      	orrs	r7, r0
   34b94:	2080      	movs	r0, #128	; 0x80
   34b96:	08e4      	lsrs	r4, r4, #3
   34b98:	0300      	lsls	r0, r0, #12
   34b9a:	4204      	tst	r4, r0
   34b9c:	d0e7      	beq.n	34b6e <__aeabi_dadd+0x54e>
   34b9e:	08cb      	lsrs	r3, r1, #3
   34ba0:	4203      	tst	r3, r0
   34ba2:	d1e4      	bne.n	34b6e <__aeabi_dadd+0x54e>
   34ba4:	08d2      	lsrs	r2, r2, #3
   34ba6:	0749      	lsls	r1, r1, #29
   34ba8:	4311      	orrs	r1, r2
   34baa:	000f      	movs	r7, r1
   34bac:	001c      	movs	r4, r3
   34bae:	e7de      	b.n	34b6e <__aeabi_dadd+0x54e>
   34bb0:	2700      	movs	r7, #0
   34bb2:	2400      	movs	r4, #0
   34bb4:	e5d5      	b.n	34762 <__aeabi_dadd+0x142>
   34bb6:	2100      	movs	r1, #0
   34bb8:	e76b      	b.n	34a92 <__aeabi_dadd+0x472>
   34bba:	2500      	movs	r5, #0
   34bbc:	2700      	movs	r7, #0
   34bbe:	e5f3      	b.n	347a8 <__aeabi_dadd+0x188>
   34bc0:	464e      	mov	r6, r9
   34bc2:	0025      	movs	r5, r4
   34bc4:	3e20      	subs	r6, #32
   34bc6:	40f5      	lsrs	r5, r6
   34bc8:	464b      	mov	r3, r9
   34bca:	002e      	movs	r6, r5
   34bcc:	2b20      	cmp	r3, #32
   34bce:	d02d      	beq.n	34c2c <__aeabi_dadd+0x60c>
   34bd0:	2540      	movs	r5, #64	; 0x40
   34bd2:	1aed      	subs	r5, r5, r3
   34bd4:	40ac      	lsls	r4, r5
   34bd6:	4327      	orrs	r7, r4
   34bd8:	1e7c      	subs	r4, r7, #1
   34bda:	41a7      	sbcs	r7, r4
   34bdc:	2400      	movs	r4, #0
   34bde:	4337      	orrs	r7, r6
   34be0:	e6c9      	b.n	34976 <__aeabi_dadd+0x356>
   34be2:	2480      	movs	r4, #128	; 0x80
   34be4:	2500      	movs	r5, #0
   34be6:	0324      	lsls	r4, r4, #12
   34be8:	4e13      	ldr	r6, [pc, #76]	; (34c38 <__aeabi_dadd+0x618>)
   34bea:	2700      	movs	r7, #0
   34bec:	e5dc      	b.n	347a8 <__aeabi_dadd+0x188>
   34bee:	4327      	orrs	r7, r4
   34bf0:	1e7c      	subs	r4, r7, #1
   34bf2:	41a7      	sbcs	r7, r4
   34bf4:	2400      	movs	r4, #0
   34bf6:	e779      	b.n	34aec <__aeabi_dadd+0x4cc>
   34bf8:	000c      	movs	r4, r1
   34bfa:	0017      	movs	r7, r2
   34bfc:	4e0e      	ldr	r6, [pc, #56]	; (34c38 <__aeabi_dadd+0x618>)
   34bfe:	e593      	b.n	34728 <__aeabi_dadd+0x108>
   34c00:	000c      	movs	r4, r1
   34c02:	0017      	movs	r7, r2
   34c04:	e590      	b.n	34728 <__aeabi_dadd+0x108>
   34c06:	4656      	mov	r6, sl
   34c08:	0023      	movs	r3, r4
   34c0a:	3e20      	subs	r6, #32
   34c0c:	40f3      	lsrs	r3, r6
   34c0e:	4699      	mov	r9, r3
   34c10:	4653      	mov	r3, sl
   34c12:	2b20      	cmp	r3, #32
   34c14:	d00e      	beq.n	34c34 <__aeabi_dadd+0x614>
   34c16:	2340      	movs	r3, #64	; 0x40
   34c18:	4656      	mov	r6, sl
   34c1a:	1b9b      	subs	r3, r3, r6
   34c1c:	409c      	lsls	r4, r3
   34c1e:	4327      	orrs	r7, r4
   34c20:	1e7c      	subs	r4, r7, #1
   34c22:	41a7      	sbcs	r7, r4
   34c24:	464b      	mov	r3, r9
   34c26:	2400      	movs	r4, #0
   34c28:	431f      	orrs	r7, r3
   34c2a:	e75f      	b.n	34aec <__aeabi_dadd+0x4cc>
   34c2c:	2400      	movs	r4, #0
   34c2e:	e7d2      	b.n	34bd6 <__aeabi_dadd+0x5b6>
   34c30:	0017      	movs	r7, r2
   34c32:	e5b2      	b.n	3479a <__aeabi_dadd+0x17a>
   34c34:	2400      	movs	r4, #0
   34c36:	e7f2      	b.n	34c1e <__aeabi_dadd+0x5fe>
   34c38:	000007ff 	.word	0x000007ff
   34c3c:	ff7fffff 	.word	0xff7fffff

00034c40 <__aeabi_ddiv>:
   34c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   34c42:	4657      	mov	r7, sl
   34c44:	4645      	mov	r5, r8
   34c46:	46de      	mov	lr, fp
   34c48:	464e      	mov	r6, r9
   34c4a:	b5e0      	push	{r5, r6, r7, lr}
   34c4c:	004c      	lsls	r4, r1, #1
   34c4e:	030e      	lsls	r6, r1, #12
   34c50:	b087      	sub	sp, #28
   34c52:	4683      	mov	fp, r0
   34c54:	4692      	mov	sl, r2
   34c56:	001d      	movs	r5, r3
   34c58:	4680      	mov	r8, r0
   34c5a:	0b36      	lsrs	r6, r6, #12
   34c5c:	0d64      	lsrs	r4, r4, #21
   34c5e:	0fcf      	lsrs	r7, r1, #31
   34c60:	2c00      	cmp	r4, #0
   34c62:	d04f      	beq.n	34d04 <__aeabi_ddiv+0xc4>
   34c64:	4b6f      	ldr	r3, [pc, #444]	; (34e24 <__aeabi_ddiv+0x1e4>)
   34c66:	429c      	cmp	r4, r3
   34c68:	d035      	beq.n	34cd6 <__aeabi_ddiv+0x96>
   34c6a:	2380      	movs	r3, #128	; 0x80
   34c6c:	0f42      	lsrs	r2, r0, #29
   34c6e:	041b      	lsls	r3, r3, #16
   34c70:	00f6      	lsls	r6, r6, #3
   34c72:	4313      	orrs	r3, r2
   34c74:	4333      	orrs	r3, r6
   34c76:	4699      	mov	r9, r3
   34c78:	00c3      	lsls	r3, r0, #3
   34c7a:	4698      	mov	r8, r3
   34c7c:	4b6a      	ldr	r3, [pc, #424]	; (34e28 <__aeabi_ddiv+0x1e8>)
   34c7e:	2600      	movs	r6, #0
   34c80:	469c      	mov	ip, r3
   34c82:	2300      	movs	r3, #0
   34c84:	4464      	add	r4, ip
   34c86:	9303      	str	r3, [sp, #12]
   34c88:	032b      	lsls	r3, r5, #12
   34c8a:	0b1b      	lsrs	r3, r3, #12
   34c8c:	469b      	mov	fp, r3
   34c8e:	006b      	lsls	r3, r5, #1
   34c90:	0fed      	lsrs	r5, r5, #31
   34c92:	4650      	mov	r0, sl
   34c94:	0d5b      	lsrs	r3, r3, #21
   34c96:	9501      	str	r5, [sp, #4]
   34c98:	d05e      	beq.n	34d58 <__aeabi_ddiv+0x118>
   34c9a:	4a62      	ldr	r2, [pc, #392]	; (34e24 <__aeabi_ddiv+0x1e4>)
   34c9c:	4293      	cmp	r3, r2
   34c9e:	d053      	beq.n	34d48 <__aeabi_ddiv+0x108>
   34ca0:	465a      	mov	r2, fp
   34ca2:	00d1      	lsls	r1, r2, #3
   34ca4:	2280      	movs	r2, #128	; 0x80
   34ca6:	0f40      	lsrs	r0, r0, #29
   34ca8:	0412      	lsls	r2, r2, #16
   34caa:	4302      	orrs	r2, r0
   34cac:	430a      	orrs	r2, r1
   34cae:	4693      	mov	fp, r2
   34cb0:	4652      	mov	r2, sl
   34cb2:	00d1      	lsls	r1, r2, #3
   34cb4:	4a5c      	ldr	r2, [pc, #368]	; (34e28 <__aeabi_ddiv+0x1e8>)
   34cb6:	4694      	mov	ip, r2
   34cb8:	2200      	movs	r2, #0
   34cba:	4463      	add	r3, ip
   34cbc:	0038      	movs	r0, r7
   34cbe:	4068      	eors	r0, r5
   34cc0:	4684      	mov	ip, r0
   34cc2:	9002      	str	r0, [sp, #8]
   34cc4:	1ae4      	subs	r4, r4, r3
   34cc6:	4316      	orrs	r6, r2
   34cc8:	2e0f      	cmp	r6, #15
   34cca:	d900      	bls.n	34cce <__aeabi_ddiv+0x8e>
   34ccc:	e0b4      	b.n	34e38 <__aeabi_ddiv+0x1f8>
   34cce:	4b57      	ldr	r3, [pc, #348]	; (34e2c <__aeabi_ddiv+0x1ec>)
   34cd0:	00b6      	lsls	r6, r6, #2
   34cd2:	599b      	ldr	r3, [r3, r6]
   34cd4:	469f      	mov	pc, r3
   34cd6:	0003      	movs	r3, r0
   34cd8:	4333      	orrs	r3, r6
   34cda:	4699      	mov	r9, r3
   34cdc:	d16c      	bne.n	34db8 <__aeabi_ddiv+0x178>
   34cde:	2300      	movs	r3, #0
   34ce0:	4698      	mov	r8, r3
   34ce2:	3302      	adds	r3, #2
   34ce4:	2608      	movs	r6, #8
   34ce6:	9303      	str	r3, [sp, #12]
   34ce8:	e7ce      	b.n	34c88 <__aeabi_ddiv+0x48>
   34cea:	46cb      	mov	fp, r9
   34cec:	4641      	mov	r1, r8
   34cee:	9a03      	ldr	r2, [sp, #12]
   34cf0:	9701      	str	r7, [sp, #4]
   34cf2:	2a02      	cmp	r2, #2
   34cf4:	d165      	bne.n	34dc2 <__aeabi_ddiv+0x182>
   34cf6:	9b01      	ldr	r3, [sp, #4]
   34cf8:	4c4a      	ldr	r4, [pc, #296]	; (34e24 <__aeabi_ddiv+0x1e4>)
   34cfa:	469c      	mov	ip, r3
   34cfc:	2300      	movs	r3, #0
   34cfe:	2200      	movs	r2, #0
   34d00:	4698      	mov	r8, r3
   34d02:	e06b      	b.n	34ddc <__aeabi_ddiv+0x19c>
   34d04:	0003      	movs	r3, r0
   34d06:	4333      	orrs	r3, r6
   34d08:	4699      	mov	r9, r3
   34d0a:	d04e      	beq.n	34daa <__aeabi_ddiv+0x16a>
   34d0c:	2e00      	cmp	r6, #0
   34d0e:	d100      	bne.n	34d12 <__aeabi_ddiv+0xd2>
   34d10:	e1bc      	b.n	3508c <__aeabi_ddiv+0x44c>
   34d12:	0030      	movs	r0, r6
   34d14:	f001 f956 	bl	35fc4 <__clzsi2>
   34d18:	0003      	movs	r3, r0
   34d1a:	3b0b      	subs	r3, #11
   34d1c:	2b1c      	cmp	r3, #28
   34d1e:	dd00      	ble.n	34d22 <__aeabi_ddiv+0xe2>
   34d20:	e1ac      	b.n	3507c <__aeabi_ddiv+0x43c>
   34d22:	221d      	movs	r2, #29
   34d24:	1ad3      	subs	r3, r2, r3
   34d26:	465a      	mov	r2, fp
   34d28:	0001      	movs	r1, r0
   34d2a:	40da      	lsrs	r2, r3
   34d2c:	3908      	subs	r1, #8
   34d2e:	408e      	lsls	r6, r1
   34d30:	0013      	movs	r3, r2
   34d32:	4333      	orrs	r3, r6
   34d34:	4699      	mov	r9, r3
   34d36:	465b      	mov	r3, fp
   34d38:	408b      	lsls	r3, r1
   34d3a:	4698      	mov	r8, r3
   34d3c:	2300      	movs	r3, #0
   34d3e:	4c3c      	ldr	r4, [pc, #240]	; (34e30 <__aeabi_ddiv+0x1f0>)
   34d40:	2600      	movs	r6, #0
   34d42:	1a24      	subs	r4, r4, r0
   34d44:	9303      	str	r3, [sp, #12]
   34d46:	e79f      	b.n	34c88 <__aeabi_ddiv+0x48>
   34d48:	4651      	mov	r1, sl
   34d4a:	465a      	mov	r2, fp
   34d4c:	4311      	orrs	r1, r2
   34d4e:	d129      	bne.n	34da4 <__aeabi_ddiv+0x164>
   34d50:	2200      	movs	r2, #0
   34d52:	4693      	mov	fp, r2
   34d54:	3202      	adds	r2, #2
   34d56:	e7b1      	b.n	34cbc <__aeabi_ddiv+0x7c>
   34d58:	4659      	mov	r1, fp
   34d5a:	4301      	orrs	r1, r0
   34d5c:	d01e      	beq.n	34d9c <__aeabi_ddiv+0x15c>
   34d5e:	465b      	mov	r3, fp
   34d60:	2b00      	cmp	r3, #0
   34d62:	d100      	bne.n	34d66 <__aeabi_ddiv+0x126>
   34d64:	e19e      	b.n	350a4 <__aeabi_ddiv+0x464>
   34d66:	4658      	mov	r0, fp
   34d68:	f001 f92c 	bl	35fc4 <__clzsi2>
   34d6c:	0003      	movs	r3, r0
   34d6e:	3b0b      	subs	r3, #11
   34d70:	2b1c      	cmp	r3, #28
   34d72:	dd00      	ble.n	34d76 <__aeabi_ddiv+0x136>
   34d74:	e18f      	b.n	35096 <__aeabi_ddiv+0x456>
   34d76:	0002      	movs	r2, r0
   34d78:	4659      	mov	r1, fp
   34d7a:	3a08      	subs	r2, #8
   34d7c:	4091      	lsls	r1, r2
   34d7e:	468b      	mov	fp, r1
   34d80:	211d      	movs	r1, #29
   34d82:	1acb      	subs	r3, r1, r3
   34d84:	4651      	mov	r1, sl
   34d86:	40d9      	lsrs	r1, r3
   34d88:	000b      	movs	r3, r1
   34d8a:	4659      	mov	r1, fp
   34d8c:	430b      	orrs	r3, r1
   34d8e:	4651      	mov	r1, sl
   34d90:	469b      	mov	fp, r3
   34d92:	4091      	lsls	r1, r2
   34d94:	4b26      	ldr	r3, [pc, #152]	; (34e30 <__aeabi_ddiv+0x1f0>)
   34d96:	2200      	movs	r2, #0
   34d98:	1a1b      	subs	r3, r3, r0
   34d9a:	e78f      	b.n	34cbc <__aeabi_ddiv+0x7c>
   34d9c:	2300      	movs	r3, #0
   34d9e:	2201      	movs	r2, #1
   34da0:	469b      	mov	fp, r3
   34da2:	e78b      	b.n	34cbc <__aeabi_ddiv+0x7c>
   34da4:	4651      	mov	r1, sl
   34da6:	2203      	movs	r2, #3
   34da8:	e788      	b.n	34cbc <__aeabi_ddiv+0x7c>
   34daa:	2300      	movs	r3, #0
   34dac:	4698      	mov	r8, r3
   34dae:	3301      	adds	r3, #1
   34db0:	2604      	movs	r6, #4
   34db2:	2400      	movs	r4, #0
   34db4:	9303      	str	r3, [sp, #12]
   34db6:	e767      	b.n	34c88 <__aeabi_ddiv+0x48>
   34db8:	2303      	movs	r3, #3
   34dba:	46b1      	mov	r9, r6
   34dbc:	9303      	str	r3, [sp, #12]
   34dbe:	260c      	movs	r6, #12
   34dc0:	e762      	b.n	34c88 <__aeabi_ddiv+0x48>
   34dc2:	2a03      	cmp	r2, #3
   34dc4:	d100      	bne.n	34dc8 <__aeabi_ddiv+0x188>
   34dc6:	e25c      	b.n	35282 <__aeabi_ddiv+0x642>
   34dc8:	9b01      	ldr	r3, [sp, #4]
   34dca:	2a01      	cmp	r2, #1
   34dcc:	d000      	beq.n	34dd0 <__aeabi_ddiv+0x190>
   34dce:	e1e4      	b.n	3519a <__aeabi_ddiv+0x55a>
   34dd0:	4013      	ands	r3, r2
   34dd2:	469c      	mov	ip, r3
   34dd4:	2300      	movs	r3, #0
   34dd6:	2400      	movs	r4, #0
   34dd8:	2200      	movs	r2, #0
   34dda:	4698      	mov	r8, r3
   34ddc:	2100      	movs	r1, #0
   34dde:	0312      	lsls	r2, r2, #12
   34de0:	0b13      	lsrs	r3, r2, #12
   34de2:	0d0a      	lsrs	r2, r1, #20
   34de4:	0512      	lsls	r2, r2, #20
   34de6:	431a      	orrs	r2, r3
   34de8:	0523      	lsls	r3, r4, #20
   34dea:	4c12      	ldr	r4, [pc, #72]	; (34e34 <__aeabi_ddiv+0x1f4>)
   34dec:	4640      	mov	r0, r8
   34dee:	4022      	ands	r2, r4
   34df0:	4313      	orrs	r3, r2
   34df2:	4662      	mov	r2, ip
   34df4:	005b      	lsls	r3, r3, #1
   34df6:	07d2      	lsls	r2, r2, #31
   34df8:	085b      	lsrs	r3, r3, #1
   34dfa:	4313      	orrs	r3, r2
   34dfc:	0019      	movs	r1, r3
   34dfe:	b007      	add	sp, #28
   34e00:	bc3c      	pop	{r2, r3, r4, r5}
   34e02:	4690      	mov	r8, r2
   34e04:	4699      	mov	r9, r3
   34e06:	46a2      	mov	sl, r4
   34e08:	46ab      	mov	fp, r5
   34e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34e0c:	2300      	movs	r3, #0
   34e0e:	2280      	movs	r2, #128	; 0x80
   34e10:	469c      	mov	ip, r3
   34e12:	0312      	lsls	r2, r2, #12
   34e14:	4698      	mov	r8, r3
   34e16:	4c03      	ldr	r4, [pc, #12]	; (34e24 <__aeabi_ddiv+0x1e4>)
   34e18:	e7e0      	b.n	34ddc <__aeabi_ddiv+0x19c>
   34e1a:	2300      	movs	r3, #0
   34e1c:	4c01      	ldr	r4, [pc, #4]	; (34e24 <__aeabi_ddiv+0x1e4>)
   34e1e:	2200      	movs	r2, #0
   34e20:	4698      	mov	r8, r3
   34e22:	e7db      	b.n	34ddc <__aeabi_ddiv+0x19c>
   34e24:	000007ff 	.word	0x000007ff
   34e28:	fffffc01 	.word	0xfffffc01
   34e2c:	0003bbdc 	.word	0x0003bbdc
   34e30:	fffffc0d 	.word	0xfffffc0d
   34e34:	800fffff 	.word	0x800fffff
   34e38:	45d9      	cmp	r9, fp
   34e3a:	d900      	bls.n	34e3e <__aeabi_ddiv+0x1fe>
   34e3c:	e139      	b.n	350b2 <__aeabi_ddiv+0x472>
   34e3e:	d100      	bne.n	34e42 <__aeabi_ddiv+0x202>
   34e40:	e134      	b.n	350ac <__aeabi_ddiv+0x46c>
   34e42:	2300      	movs	r3, #0
   34e44:	4646      	mov	r6, r8
   34e46:	464d      	mov	r5, r9
   34e48:	469a      	mov	sl, r3
   34e4a:	3c01      	subs	r4, #1
   34e4c:	465b      	mov	r3, fp
   34e4e:	0e0a      	lsrs	r2, r1, #24
   34e50:	021b      	lsls	r3, r3, #8
   34e52:	431a      	orrs	r2, r3
   34e54:	020b      	lsls	r3, r1, #8
   34e56:	0c17      	lsrs	r7, r2, #16
   34e58:	9303      	str	r3, [sp, #12]
   34e5a:	0413      	lsls	r3, r2, #16
   34e5c:	0c1b      	lsrs	r3, r3, #16
   34e5e:	0039      	movs	r1, r7
   34e60:	0028      	movs	r0, r5
   34e62:	4690      	mov	r8, r2
   34e64:	9301      	str	r3, [sp, #4]
   34e66:	f7fe fc1d 	bl	336a4 <__udivsi3>
   34e6a:	0002      	movs	r2, r0
   34e6c:	9b01      	ldr	r3, [sp, #4]
   34e6e:	4683      	mov	fp, r0
   34e70:	435a      	muls	r2, r3
   34e72:	0028      	movs	r0, r5
   34e74:	0039      	movs	r1, r7
   34e76:	4691      	mov	r9, r2
   34e78:	f7fe fc9a 	bl	337b0 <__aeabi_uidivmod>
   34e7c:	0c35      	lsrs	r5, r6, #16
   34e7e:	0409      	lsls	r1, r1, #16
   34e80:	430d      	orrs	r5, r1
   34e82:	45a9      	cmp	r9, r5
   34e84:	d90d      	bls.n	34ea2 <__aeabi_ddiv+0x262>
   34e86:	465b      	mov	r3, fp
   34e88:	4445      	add	r5, r8
   34e8a:	3b01      	subs	r3, #1
   34e8c:	45a8      	cmp	r8, r5
   34e8e:	d900      	bls.n	34e92 <__aeabi_ddiv+0x252>
   34e90:	e13a      	b.n	35108 <__aeabi_ddiv+0x4c8>
   34e92:	45a9      	cmp	r9, r5
   34e94:	d800      	bhi.n	34e98 <__aeabi_ddiv+0x258>
   34e96:	e137      	b.n	35108 <__aeabi_ddiv+0x4c8>
   34e98:	2302      	movs	r3, #2
   34e9a:	425b      	negs	r3, r3
   34e9c:	469c      	mov	ip, r3
   34e9e:	4445      	add	r5, r8
   34ea0:	44e3      	add	fp, ip
   34ea2:	464b      	mov	r3, r9
   34ea4:	1aeb      	subs	r3, r5, r3
   34ea6:	0039      	movs	r1, r7
   34ea8:	0018      	movs	r0, r3
   34eaa:	9304      	str	r3, [sp, #16]
   34eac:	f7fe fbfa 	bl	336a4 <__udivsi3>
   34eb0:	9b01      	ldr	r3, [sp, #4]
   34eb2:	0005      	movs	r5, r0
   34eb4:	4343      	muls	r3, r0
   34eb6:	0039      	movs	r1, r7
   34eb8:	9804      	ldr	r0, [sp, #16]
   34eba:	4699      	mov	r9, r3
   34ebc:	f7fe fc78 	bl	337b0 <__aeabi_uidivmod>
   34ec0:	0433      	lsls	r3, r6, #16
   34ec2:	0409      	lsls	r1, r1, #16
   34ec4:	0c1b      	lsrs	r3, r3, #16
   34ec6:	430b      	orrs	r3, r1
   34ec8:	4599      	cmp	r9, r3
   34eca:	d909      	bls.n	34ee0 <__aeabi_ddiv+0x2a0>
   34ecc:	4443      	add	r3, r8
   34ece:	1e6a      	subs	r2, r5, #1
   34ed0:	4598      	cmp	r8, r3
   34ed2:	d900      	bls.n	34ed6 <__aeabi_ddiv+0x296>
   34ed4:	e11a      	b.n	3510c <__aeabi_ddiv+0x4cc>
   34ed6:	4599      	cmp	r9, r3
   34ed8:	d800      	bhi.n	34edc <__aeabi_ddiv+0x29c>
   34eda:	e117      	b.n	3510c <__aeabi_ddiv+0x4cc>
   34edc:	3d02      	subs	r5, #2
   34ede:	4443      	add	r3, r8
   34ee0:	464a      	mov	r2, r9
   34ee2:	1a9b      	subs	r3, r3, r2
   34ee4:	465a      	mov	r2, fp
   34ee6:	0412      	lsls	r2, r2, #16
   34ee8:	432a      	orrs	r2, r5
   34eea:	9903      	ldr	r1, [sp, #12]
   34eec:	4693      	mov	fp, r2
   34eee:	0c10      	lsrs	r0, r2, #16
   34ef0:	0c0a      	lsrs	r2, r1, #16
   34ef2:	4691      	mov	r9, r2
   34ef4:	0409      	lsls	r1, r1, #16
   34ef6:	465a      	mov	r2, fp
   34ef8:	0c09      	lsrs	r1, r1, #16
   34efa:	464e      	mov	r6, r9
   34efc:	000d      	movs	r5, r1
   34efe:	0412      	lsls	r2, r2, #16
   34f00:	0c12      	lsrs	r2, r2, #16
   34f02:	4345      	muls	r5, r0
   34f04:	9105      	str	r1, [sp, #20]
   34f06:	4351      	muls	r1, r2
   34f08:	4372      	muls	r2, r6
   34f0a:	4370      	muls	r0, r6
   34f0c:	1952      	adds	r2, r2, r5
   34f0e:	0c0e      	lsrs	r6, r1, #16
   34f10:	18b2      	adds	r2, r6, r2
   34f12:	4295      	cmp	r5, r2
   34f14:	d903      	bls.n	34f1e <__aeabi_ddiv+0x2de>
   34f16:	2580      	movs	r5, #128	; 0x80
   34f18:	026d      	lsls	r5, r5, #9
   34f1a:	46ac      	mov	ip, r5
   34f1c:	4460      	add	r0, ip
   34f1e:	0c15      	lsrs	r5, r2, #16
   34f20:	0409      	lsls	r1, r1, #16
   34f22:	0412      	lsls	r2, r2, #16
   34f24:	0c09      	lsrs	r1, r1, #16
   34f26:	1828      	adds	r0, r5, r0
   34f28:	1852      	adds	r2, r2, r1
   34f2a:	4283      	cmp	r3, r0
   34f2c:	d200      	bcs.n	34f30 <__aeabi_ddiv+0x2f0>
   34f2e:	e0ce      	b.n	350ce <__aeabi_ddiv+0x48e>
   34f30:	d100      	bne.n	34f34 <__aeabi_ddiv+0x2f4>
   34f32:	e0c8      	b.n	350c6 <__aeabi_ddiv+0x486>
   34f34:	1a1d      	subs	r5, r3, r0
   34f36:	4653      	mov	r3, sl
   34f38:	1a9e      	subs	r6, r3, r2
   34f3a:	45b2      	cmp	sl, r6
   34f3c:	4192      	sbcs	r2, r2
   34f3e:	4252      	negs	r2, r2
   34f40:	1aab      	subs	r3, r5, r2
   34f42:	469a      	mov	sl, r3
   34f44:	4598      	cmp	r8, r3
   34f46:	d100      	bne.n	34f4a <__aeabi_ddiv+0x30a>
   34f48:	e117      	b.n	3517a <__aeabi_ddiv+0x53a>
   34f4a:	0039      	movs	r1, r7
   34f4c:	0018      	movs	r0, r3
   34f4e:	f7fe fba9 	bl	336a4 <__udivsi3>
   34f52:	9b01      	ldr	r3, [sp, #4]
   34f54:	0005      	movs	r5, r0
   34f56:	4343      	muls	r3, r0
   34f58:	0039      	movs	r1, r7
   34f5a:	4650      	mov	r0, sl
   34f5c:	9304      	str	r3, [sp, #16]
   34f5e:	f7fe fc27 	bl	337b0 <__aeabi_uidivmod>
   34f62:	9804      	ldr	r0, [sp, #16]
   34f64:	040b      	lsls	r3, r1, #16
   34f66:	0c31      	lsrs	r1, r6, #16
   34f68:	4319      	orrs	r1, r3
   34f6a:	4288      	cmp	r0, r1
   34f6c:	d909      	bls.n	34f82 <__aeabi_ddiv+0x342>
   34f6e:	4441      	add	r1, r8
   34f70:	1e6b      	subs	r3, r5, #1
   34f72:	4588      	cmp	r8, r1
   34f74:	d900      	bls.n	34f78 <__aeabi_ddiv+0x338>
   34f76:	e107      	b.n	35188 <__aeabi_ddiv+0x548>
   34f78:	4288      	cmp	r0, r1
   34f7a:	d800      	bhi.n	34f7e <__aeabi_ddiv+0x33e>
   34f7c:	e104      	b.n	35188 <__aeabi_ddiv+0x548>
   34f7e:	3d02      	subs	r5, #2
   34f80:	4441      	add	r1, r8
   34f82:	9b04      	ldr	r3, [sp, #16]
   34f84:	1acb      	subs	r3, r1, r3
   34f86:	0018      	movs	r0, r3
   34f88:	0039      	movs	r1, r7
   34f8a:	9304      	str	r3, [sp, #16]
   34f8c:	f7fe fb8a 	bl	336a4 <__udivsi3>
   34f90:	9b01      	ldr	r3, [sp, #4]
   34f92:	4682      	mov	sl, r0
   34f94:	4343      	muls	r3, r0
   34f96:	0039      	movs	r1, r7
   34f98:	9804      	ldr	r0, [sp, #16]
   34f9a:	9301      	str	r3, [sp, #4]
   34f9c:	f7fe fc08 	bl	337b0 <__aeabi_uidivmod>
   34fa0:	9801      	ldr	r0, [sp, #4]
   34fa2:	040b      	lsls	r3, r1, #16
   34fa4:	0431      	lsls	r1, r6, #16
   34fa6:	0c09      	lsrs	r1, r1, #16
   34fa8:	4319      	orrs	r1, r3
   34faa:	4288      	cmp	r0, r1
   34fac:	d90d      	bls.n	34fca <__aeabi_ddiv+0x38a>
   34fae:	4653      	mov	r3, sl
   34fb0:	4441      	add	r1, r8
   34fb2:	3b01      	subs	r3, #1
   34fb4:	4588      	cmp	r8, r1
   34fb6:	d900      	bls.n	34fba <__aeabi_ddiv+0x37a>
   34fb8:	e0e8      	b.n	3518c <__aeabi_ddiv+0x54c>
   34fba:	4288      	cmp	r0, r1
   34fbc:	d800      	bhi.n	34fc0 <__aeabi_ddiv+0x380>
   34fbe:	e0e5      	b.n	3518c <__aeabi_ddiv+0x54c>
   34fc0:	2302      	movs	r3, #2
   34fc2:	425b      	negs	r3, r3
   34fc4:	469c      	mov	ip, r3
   34fc6:	4441      	add	r1, r8
   34fc8:	44e2      	add	sl, ip
   34fca:	9b01      	ldr	r3, [sp, #4]
   34fcc:	042d      	lsls	r5, r5, #16
   34fce:	1ace      	subs	r6, r1, r3
   34fd0:	4651      	mov	r1, sl
   34fd2:	4329      	orrs	r1, r5
   34fd4:	9d05      	ldr	r5, [sp, #20]
   34fd6:	464f      	mov	r7, r9
   34fd8:	002a      	movs	r2, r5
   34fda:	040b      	lsls	r3, r1, #16
   34fdc:	0c08      	lsrs	r0, r1, #16
   34fde:	0c1b      	lsrs	r3, r3, #16
   34fe0:	435a      	muls	r2, r3
   34fe2:	4345      	muls	r5, r0
   34fe4:	437b      	muls	r3, r7
   34fe6:	4378      	muls	r0, r7
   34fe8:	195b      	adds	r3, r3, r5
   34fea:	0c17      	lsrs	r7, r2, #16
   34fec:	18fb      	adds	r3, r7, r3
   34fee:	429d      	cmp	r5, r3
   34ff0:	d903      	bls.n	34ffa <__aeabi_ddiv+0x3ba>
   34ff2:	2580      	movs	r5, #128	; 0x80
   34ff4:	026d      	lsls	r5, r5, #9
   34ff6:	46ac      	mov	ip, r5
   34ff8:	4460      	add	r0, ip
   34ffa:	0c1d      	lsrs	r5, r3, #16
   34ffc:	0412      	lsls	r2, r2, #16
   34ffe:	041b      	lsls	r3, r3, #16
   35000:	0c12      	lsrs	r2, r2, #16
   35002:	1828      	adds	r0, r5, r0
   35004:	189b      	adds	r3, r3, r2
   35006:	4286      	cmp	r6, r0
   35008:	d200      	bcs.n	3500c <__aeabi_ddiv+0x3cc>
   3500a:	e093      	b.n	35134 <__aeabi_ddiv+0x4f4>
   3500c:	d100      	bne.n	35010 <__aeabi_ddiv+0x3d0>
   3500e:	e08e      	b.n	3512e <__aeabi_ddiv+0x4ee>
   35010:	2301      	movs	r3, #1
   35012:	4319      	orrs	r1, r3
   35014:	4ba0      	ldr	r3, [pc, #640]	; (35298 <__aeabi_ddiv+0x658>)
   35016:	18e3      	adds	r3, r4, r3
   35018:	2b00      	cmp	r3, #0
   3501a:	dc00      	bgt.n	3501e <__aeabi_ddiv+0x3de>
   3501c:	e099      	b.n	35152 <__aeabi_ddiv+0x512>
   3501e:	074a      	lsls	r2, r1, #29
   35020:	d000      	beq.n	35024 <__aeabi_ddiv+0x3e4>
   35022:	e09e      	b.n	35162 <__aeabi_ddiv+0x522>
   35024:	465a      	mov	r2, fp
   35026:	01d2      	lsls	r2, r2, #7
   35028:	d506      	bpl.n	35038 <__aeabi_ddiv+0x3f8>
   3502a:	465a      	mov	r2, fp
   3502c:	4b9b      	ldr	r3, [pc, #620]	; (3529c <__aeabi_ddiv+0x65c>)
   3502e:	401a      	ands	r2, r3
   35030:	2380      	movs	r3, #128	; 0x80
   35032:	4693      	mov	fp, r2
   35034:	00db      	lsls	r3, r3, #3
   35036:	18e3      	adds	r3, r4, r3
   35038:	4a99      	ldr	r2, [pc, #612]	; (352a0 <__aeabi_ddiv+0x660>)
   3503a:	4293      	cmp	r3, r2
   3503c:	dd68      	ble.n	35110 <__aeabi_ddiv+0x4d0>
   3503e:	2301      	movs	r3, #1
   35040:	9a02      	ldr	r2, [sp, #8]
   35042:	4c98      	ldr	r4, [pc, #608]	; (352a4 <__aeabi_ddiv+0x664>)
   35044:	401a      	ands	r2, r3
   35046:	2300      	movs	r3, #0
   35048:	4694      	mov	ip, r2
   3504a:	4698      	mov	r8, r3
   3504c:	2200      	movs	r2, #0
   3504e:	e6c5      	b.n	34ddc <__aeabi_ddiv+0x19c>
   35050:	2280      	movs	r2, #128	; 0x80
   35052:	464b      	mov	r3, r9
   35054:	0312      	lsls	r2, r2, #12
   35056:	4213      	tst	r3, r2
   35058:	d00a      	beq.n	35070 <__aeabi_ddiv+0x430>
   3505a:	465b      	mov	r3, fp
   3505c:	4213      	tst	r3, r2
   3505e:	d106      	bne.n	3506e <__aeabi_ddiv+0x42e>
   35060:	431a      	orrs	r2, r3
   35062:	0312      	lsls	r2, r2, #12
   35064:	0b12      	lsrs	r2, r2, #12
   35066:	46ac      	mov	ip, r5
   35068:	4688      	mov	r8, r1
   3506a:	4c8e      	ldr	r4, [pc, #568]	; (352a4 <__aeabi_ddiv+0x664>)
   3506c:	e6b6      	b.n	34ddc <__aeabi_ddiv+0x19c>
   3506e:	464b      	mov	r3, r9
   35070:	431a      	orrs	r2, r3
   35072:	0312      	lsls	r2, r2, #12
   35074:	0b12      	lsrs	r2, r2, #12
   35076:	46bc      	mov	ip, r7
   35078:	4c8a      	ldr	r4, [pc, #552]	; (352a4 <__aeabi_ddiv+0x664>)
   3507a:	e6af      	b.n	34ddc <__aeabi_ddiv+0x19c>
   3507c:	0003      	movs	r3, r0
   3507e:	465a      	mov	r2, fp
   35080:	3b28      	subs	r3, #40	; 0x28
   35082:	409a      	lsls	r2, r3
   35084:	2300      	movs	r3, #0
   35086:	4691      	mov	r9, r2
   35088:	4698      	mov	r8, r3
   3508a:	e657      	b.n	34d3c <__aeabi_ddiv+0xfc>
   3508c:	4658      	mov	r0, fp
   3508e:	f000 ff99 	bl	35fc4 <__clzsi2>
   35092:	3020      	adds	r0, #32
   35094:	e640      	b.n	34d18 <__aeabi_ddiv+0xd8>
   35096:	0003      	movs	r3, r0
   35098:	4652      	mov	r2, sl
   3509a:	3b28      	subs	r3, #40	; 0x28
   3509c:	409a      	lsls	r2, r3
   3509e:	2100      	movs	r1, #0
   350a0:	4693      	mov	fp, r2
   350a2:	e677      	b.n	34d94 <__aeabi_ddiv+0x154>
   350a4:	f000 ff8e 	bl	35fc4 <__clzsi2>
   350a8:	3020      	adds	r0, #32
   350aa:	e65f      	b.n	34d6c <__aeabi_ddiv+0x12c>
   350ac:	4588      	cmp	r8, r1
   350ae:	d200      	bcs.n	350b2 <__aeabi_ddiv+0x472>
   350b0:	e6c7      	b.n	34e42 <__aeabi_ddiv+0x202>
   350b2:	464b      	mov	r3, r9
   350b4:	07de      	lsls	r6, r3, #31
   350b6:	085d      	lsrs	r5, r3, #1
   350b8:	4643      	mov	r3, r8
   350ba:	085b      	lsrs	r3, r3, #1
   350bc:	431e      	orrs	r6, r3
   350be:	4643      	mov	r3, r8
   350c0:	07db      	lsls	r3, r3, #31
   350c2:	469a      	mov	sl, r3
   350c4:	e6c2      	b.n	34e4c <__aeabi_ddiv+0x20c>
   350c6:	2500      	movs	r5, #0
   350c8:	4592      	cmp	sl, r2
   350ca:	d300      	bcc.n	350ce <__aeabi_ddiv+0x48e>
   350cc:	e733      	b.n	34f36 <__aeabi_ddiv+0x2f6>
   350ce:	9e03      	ldr	r6, [sp, #12]
   350d0:	4659      	mov	r1, fp
   350d2:	46b4      	mov	ip, r6
   350d4:	44e2      	add	sl, ip
   350d6:	45b2      	cmp	sl, r6
   350d8:	41ad      	sbcs	r5, r5
   350da:	426d      	negs	r5, r5
   350dc:	4445      	add	r5, r8
   350de:	18eb      	adds	r3, r5, r3
   350e0:	3901      	subs	r1, #1
   350e2:	4598      	cmp	r8, r3
   350e4:	d207      	bcs.n	350f6 <__aeabi_ddiv+0x4b6>
   350e6:	4298      	cmp	r0, r3
   350e8:	d900      	bls.n	350ec <__aeabi_ddiv+0x4ac>
   350ea:	e07f      	b.n	351ec <__aeabi_ddiv+0x5ac>
   350ec:	d100      	bne.n	350f0 <__aeabi_ddiv+0x4b0>
   350ee:	e0bc      	b.n	3526a <__aeabi_ddiv+0x62a>
   350f0:	1a1d      	subs	r5, r3, r0
   350f2:	468b      	mov	fp, r1
   350f4:	e71f      	b.n	34f36 <__aeabi_ddiv+0x2f6>
   350f6:	4598      	cmp	r8, r3
   350f8:	d1fa      	bne.n	350f0 <__aeabi_ddiv+0x4b0>
   350fa:	9d03      	ldr	r5, [sp, #12]
   350fc:	4555      	cmp	r5, sl
   350fe:	d9f2      	bls.n	350e6 <__aeabi_ddiv+0x4a6>
   35100:	4643      	mov	r3, r8
   35102:	468b      	mov	fp, r1
   35104:	1a1d      	subs	r5, r3, r0
   35106:	e716      	b.n	34f36 <__aeabi_ddiv+0x2f6>
   35108:	469b      	mov	fp, r3
   3510a:	e6ca      	b.n	34ea2 <__aeabi_ddiv+0x262>
   3510c:	0015      	movs	r5, r2
   3510e:	e6e7      	b.n	34ee0 <__aeabi_ddiv+0x2a0>
   35110:	465a      	mov	r2, fp
   35112:	08c9      	lsrs	r1, r1, #3
   35114:	0752      	lsls	r2, r2, #29
   35116:	430a      	orrs	r2, r1
   35118:	055b      	lsls	r3, r3, #21
   3511a:	4690      	mov	r8, r2
   3511c:	0d5c      	lsrs	r4, r3, #21
   3511e:	465a      	mov	r2, fp
   35120:	2301      	movs	r3, #1
   35122:	9902      	ldr	r1, [sp, #8]
   35124:	0252      	lsls	r2, r2, #9
   35126:	4019      	ands	r1, r3
   35128:	0b12      	lsrs	r2, r2, #12
   3512a:	468c      	mov	ip, r1
   3512c:	e656      	b.n	34ddc <__aeabi_ddiv+0x19c>
   3512e:	2b00      	cmp	r3, #0
   35130:	d100      	bne.n	35134 <__aeabi_ddiv+0x4f4>
   35132:	e76f      	b.n	35014 <__aeabi_ddiv+0x3d4>
   35134:	4446      	add	r6, r8
   35136:	1e4a      	subs	r2, r1, #1
   35138:	45b0      	cmp	r8, r6
   3513a:	d929      	bls.n	35190 <__aeabi_ddiv+0x550>
   3513c:	0011      	movs	r1, r2
   3513e:	4286      	cmp	r6, r0
   35140:	d000      	beq.n	35144 <__aeabi_ddiv+0x504>
   35142:	e765      	b.n	35010 <__aeabi_ddiv+0x3d0>
   35144:	9a03      	ldr	r2, [sp, #12]
   35146:	4293      	cmp	r3, r2
   35148:	d000      	beq.n	3514c <__aeabi_ddiv+0x50c>
   3514a:	e761      	b.n	35010 <__aeabi_ddiv+0x3d0>
   3514c:	e762      	b.n	35014 <__aeabi_ddiv+0x3d4>
   3514e:	2101      	movs	r1, #1
   35150:	4249      	negs	r1, r1
   35152:	2001      	movs	r0, #1
   35154:	1ac2      	subs	r2, r0, r3
   35156:	2a38      	cmp	r2, #56	; 0x38
   35158:	dd21      	ble.n	3519e <__aeabi_ddiv+0x55e>
   3515a:	9b02      	ldr	r3, [sp, #8]
   3515c:	4003      	ands	r3, r0
   3515e:	469c      	mov	ip, r3
   35160:	e638      	b.n	34dd4 <__aeabi_ddiv+0x194>
   35162:	220f      	movs	r2, #15
   35164:	400a      	ands	r2, r1
   35166:	2a04      	cmp	r2, #4
   35168:	d100      	bne.n	3516c <__aeabi_ddiv+0x52c>
   3516a:	e75b      	b.n	35024 <__aeabi_ddiv+0x3e4>
   3516c:	000a      	movs	r2, r1
   3516e:	1d11      	adds	r1, r2, #4
   35170:	4291      	cmp	r1, r2
   35172:	4192      	sbcs	r2, r2
   35174:	4252      	negs	r2, r2
   35176:	4493      	add	fp, r2
   35178:	e754      	b.n	35024 <__aeabi_ddiv+0x3e4>
   3517a:	4b47      	ldr	r3, [pc, #284]	; (35298 <__aeabi_ddiv+0x658>)
   3517c:	18e3      	adds	r3, r4, r3
   3517e:	2b00      	cmp	r3, #0
   35180:	dde5      	ble.n	3514e <__aeabi_ddiv+0x50e>
   35182:	2201      	movs	r2, #1
   35184:	4252      	negs	r2, r2
   35186:	e7f2      	b.n	3516e <__aeabi_ddiv+0x52e>
   35188:	001d      	movs	r5, r3
   3518a:	e6fa      	b.n	34f82 <__aeabi_ddiv+0x342>
   3518c:	469a      	mov	sl, r3
   3518e:	e71c      	b.n	34fca <__aeabi_ddiv+0x38a>
   35190:	42b0      	cmp	r0, r6
   35192:	d839      	bhi.n	35208 <__aeabi_ddiv+0x5c8>
   35194:	d06e      	beq.n	35274 <__aeabi_ddiv+0x634>
   35196:	0011      	movs	r1, r2
   35198:	e73a      	b.n	35010 <__aeabi_ddiv+0x3d0>
   3519a:	9302      	str	r3, [sp, #8]
   3519c:	e73a      	b.n	35014 <__aeabi_ddiv+0x3d4>
   3519e:	2a1f      	cmp	r2, #31
   351a0:	dc3c      	bgt.n	3521c <__aeabi_ddiv+0x5dc>
   351a2:	2320      	movs	r3, #32
   351a4:	1a9b      	subs	r3, r3, r2
   351a6:	000c      	movs	r4, r1
   351a8:	4658      	mov	r0, fp
   351aa:	4099      	lsls	r1, r3
   351ac:	4098      	lsls	r0, r3
   351ae:	1e4b      	subs	r3, r1, #1
   351b0:	4199      	sbcs	r1, r3
   351b2:	465b      	mov	r3, fp
   351b4:	40d4      	lsrs	r4, r2
   351b6:	40d3      	lsrs	r3, r2
   351b8:	4320      	orrs	r0, r4
   351ba:	4308      	orrs	r0, r1
   351bc:	001a      	movs	r2, r3
   351be:	0743      	lsls	r3, r0, #29
   351c0:	d009      	beq.n	351d6 <__aeabi_ddiv+0x596>
   351c2:	230f      	movs	r3, #15
   351c4:	4003      	ands	r3, r0
   351c6:	2b04      	cmp	r3, #4
   351c8:	d005      	beq.n	351d6 <__aeabi_ddiv+0x596>
   351ca:	0001      	movs	r1, r0
   351cc:	1d08      	adds	r0, r1, #4
   351ce:	4288      	cmp	r0, r1
   351d0:	419b      	sbcs	r3, r3
   351d2:	425b      	negs	r3, r3
   351d4:	18d2      	adds	r2, r2, r3
   351d6:	0213      	lsls	r3, r2, #8
   351d8:	d53a      	bpl.n	35250 <__aeabi_ddiv+0x610>
   351da:	2301      	movs	r3, #1
   351dc:	9a02      	ldr	r2, [sp, #8]
   351de:	2401      	movs	r4, #1
   351e0:	401a      	ands	r2, r3
   351e2:	2300      	movs	r3, #0
   351e4:	4694      	mov	ip, r2
   351e6:	4698      	mov	r8, r3
   351e8:	2200      	movs	r2, #0
   351ea:	e5f7      	b.n	34ddc <__aeabi_ddiv+0x19c>
   351ec:	2102      	movs	r1, #2
   351ee:	4249      	negs	r1, r1
   351f0:	468c      	mov	ip, r1
   351f2:	9d03      	ldr	r5, [sp, #12]
   351f4:	44e3      	add	fp, ip
   351f6:	46ac      	mov	ip, r5
   351f8:	44e2      	add	sl, ip
   351fa:	45aa      	cmp	sl, r5
   351fc:	41ad      	sbcs	r5, r5
   351fe:	426d      	negs	r5, r5
   35200:	4445      	add	r5, r8
   35202:	18ed      	adds	r5, r5, r3
   35204:	1a2d      	subs	r5, r5, r0
   35206:	e696      	b.n	34f36 <__aeabi_ddiv+0x2f6>
   35208:	1e8a      	subs	r2, r1, #2
   3520a:	9903      	ldr	r1, [sp, #12]
   3520c:	004d      	lsls	r5, r1, #1
   3520e:	428d      	cmp	r5, r1
   35210:	4189      	sbcs	r1, r1
   35212:	4249      	negs	r1, r1
   35214:	4441      	add	r1, r8
   35216:	1876      	adds	r6, r6, r1
   35218:	9503      	str	r5, [sp, #12]
   3521a:	e78f      	b.n	3513c <__aeabi_ddiv+0x4fc>
   3521c:	201f      	movs	r0, #31
   3521e:	4240      	negs	r0, r0
   35220:	1ac3      	subs	r3, r0, r3
   35222:	4658      	mov	r0, fp
   35224:	40d8      	lsrs	r0, r3
   35226:	0003      	movs	r3, r0
   35228:	2a20      	cmp	r2, #32
   3522a:	d028      	beq.n	3527e <__aeabi_ddiv+0x63e>
   3522c:	2040      	movs	r0, #64	; 0x40
   3522e:	465d      	mov	r5, fp
   35230:	1a82      	subs	r2, r0, r2
   35232:	4095      	lsls	r5, r2
   35234:	4329      	orrs	r1, r5
   35236:	1e4a      	subs	r2, r1, #1
   35238:	4191      	sbcs	r1, r2
   3523a:	4319      	orrs	r1, r3
   3523c:	2307      	movs	r3, #7
   3523e:	2200      	movs	r2, #0
   35240:	400b      	ands	r3, r1
   35242:	d009      	beq.n	35258 <__aeabi_ddiv+0x618>
   35244:	230f      	movs	r3, #15
   35246:	2200      	movs	r2, #0
   35248:	400b      	ands	r3, r1
   3524a:	0008      	movs	r0, r1
   3524c:	2b04      	cmp	r3, #4
   3524e:	d1bd      	bne.n	351cc <__aeabi_ddiv+0x58c>
   35250:	0001      	movs	r1, r0
   35252:	0753      	lsls	r3, r2, #29
   35254:	0252      	lsls	r2, r2, #9
   35256:	0b12      	lsrs	r2, r2, #12
   35258:	08c9      	lsrs	r1, r1, #3
   3525a:	4319      	orrs	r1, r3
   3525c:	2301      	movs	r3, #1
   3525e:	4688      	mov	r8, r1
   35260:	9902      	ldr	r1, [sp, #8]
   35262:	2400      	movs	r4, #0
   35264:	4019      	ands	r1, r3
   35266:	468c      	mov	ip, r1
   35268:	e5b8      	b.n	34ddc <__aeabi_ddiv+0x19c>
   3526a:	4552      	cmp	r2, sl
   3526c:	d8be      	bhi.n	351ec <__aeabi_ddiv+0x5ac>
   3526e:	468b      	mov	fp, r1
   35270:	2500      	movs	r5, #0
   35272:	e660      	b.n	34f36 <__aeabi_ddiv+0x2f6>
   35274:	9d03      	ldr	r5, [sp, #12]
   35276:	429d      	cmp	r5, r3
   35278:	d3c6      	bcc.n	35208 <__aeabi_ddiv+0x5c8>
   3527a:	0011      	movs	r1, r2
   3527c:	e762      	b.n	35144 <__aeabi_ddiv+0x504>
   3527e:	2500      	movs	r5, #0
   35280:	e7d8      	b.n	35234 <__aeabi_ddiv+0x5f4>
   35282:	2280      	movs	r2, #128	; 0x80
   35284:	465b      	mov	r3, fp
   35286:	0312      	lsls	r2, r2, #12
   35288:	431a      	orrs	r2, r3
   3528a:	9b01      	ldr	r3, [sp, #4]
   3528c:	0312      	lsls	r2, r2, #12
   3528e:	0b12      	lsrs	r2, r2, #12
   35290:	469c      	mov	ip, r3
   35292:	4688      	mov	r8, r1
   35294:	4c03      	ldr	r4, [pc, #12]	; (352a4 <__aeabi_ddiv+0x664>)
   35296:	e5a1      	b.n	34ddc <__aeabi_ddiv+0x19c>
   35298:	000003ff 	.word	0x000003ff
   3529c:	feffffff 	.word	0xfeffffff
   352a0:	000007fe 	.word	0x000007fe
   352a4:	000007ff 	.word	0x000007ff

000352a8 <__aeabi_dmul>:
   352a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   352aa:	4657      	mov	r7, sl
   352ac:	4645      	mov	r5, r8
   352ae:	46de      	mov	lr, fp
   352b0:	464e      	mov	r6, r9
   352b2:	b5e0      	push	{r5, r6, r7, lr}
   352b4:	030c      	lsls	r4, r1, #12
   352b6:	4698      	mov	r8, r3
   352b8:	004e      	lsls	r6, r1, #1
   352ba:	0b23      	lsrs	r3, r4, #12
   352bc:	b087      	sub	sp, #28
   352be:	0007      	movs	r7, r0
   352c0:	4692      	mov	sl, r2
   352c2:	469b      	mov	fp, r3
   352c4:	0d76      	lsrs	r6, r6, #21
   352c6:	0fcd      	lsrs	r5, r1, #31
   352c8:	2e00      	cmp	r6, #0
   352ca:	d06b      	beq.n	353a4 <__aeabi_dmul+0xfc>
   352cc:	4b6d      	ldr	r3, [pc, #436]	; (35484 <__aeabi_dmul+0x1dc>)
   352ce:	429e      	cmp	r6, r3
   352d0:	d035      	beq.n	3533e <__aeabi_dmul+0x96>
   352d2:	2480      	movs	r4, #128	; 0x80
   352d4:	465b      	mov	r3, fp
   352d6:	0f42      	lsrs	r2, r0, #29
   352d8:	0424      	lsls	r4, r4, #16
   352da:	00db      	lsls	r3, r3, #3
   352dc:	4314      	orrs	r4, r2
   352de:	431c      	orrs	r4, r3
   352e0:	00c3      	lsls	r3, r0, #3
   352e2:	4699      	mov	r9, r3
   352e4:	4b68      	ldr	r3, [pc, #416]	; (35488 <__aeabi_dmul+0x1e0>)
   352e6:	46a3      	mov	fp, r4
   352e8:	469c      	mov	ip, r3
   352ea:	2300      	movs	r3, #0
   352ec:	2700      	movs	r7, #0
   352ee:	4466      	add	r6, ip
   352f0:	9302      	str	r3, [sp, #8]
   352f2:	4643      	mov	r3, r8
   352f4:	031c      	lsls	r4, r3, #12
   352f6:	005a      	lsls	r2, r3, #1
   352f8:	0fdb      	lsrs	r3, r3, #31
   352fa:	4650      	mov	r0, sl
   352fc:	0b24      	lsrs	r4, r4, #12
   352fe:	0d52      	lsrs	r2, r2, #21
   35300:	4698      	mov	r8, r3
   35302:	d100      	bne.n	35306 <__aeabi_dmul+0x5e>
   35304:	e076      	b.n	353f4 <__aeabi_dmul+0x14c>
   35306:	4b5f      	ldr	r3, [pc, #380]	; (35484 <__aeabi_dmul+0x1dc>)
   35308:	429a      	cmp	r2, r3
   3530a:	d06d      	beq.n	353e8 <__aeabi_dmul+0x140>
   3530c:	2380      	movs	r3, #128	; 0x80
   3530e:	0f41      	lsrs	r1, r0, #29
   35310:	041b      	lsls	r3, r3, #16
   35312:	430b      	orrs	r3, r1
   35314:	495c      	ldr	r1, [pc, #368]	; (35488 <__aeabi_dmul+0x1e0>)
   35316:	00e4      	lsls	r4, r4, #3
   35318:	468c      	mov	ip, r1
   3531a:	431c      	orrs	r4, r3
   3531c:	00c3      	lsls	r3, r0, #3
   3531e:	2000      	movs	r0, #0
   35320:	4462      	add	r2, ip
   35322:	4641      	mov	r1, r8
   35324:	18b6      	adds	r6, r6, r2
   35326:	4069      	eors	r1, r5
   35328:	1c72      	adds	r2, r6, #1
   3532a:	9101      	str	r1, [sp, #4]
   3532c:	4694      	mov	ip, r2
   3532e:	4307      	orrs	r7, r0
   35330:	2f0f      	cmp	r7, #15
   35332:	d900      	bls.n	35336 <__aeabi_dmul+0x8e>
   35334:	e0b0      	b.n	35498 <__aeabi_dmul+0x1f0>
   35336:	4a55      	ldr	r2, [pc, #340]	; (3548c <__aeabi_dmul+0x1e4>)
   35338:	00bf      	lsls	r7, r7, #2
   3533a:	59d2      	ldr	r2, [r2, r7]
   3533c:	4697      	mov	pc, r2
   3533e:	465b      	mov	r3, fp
   35340:	4303      	orrs	r3, r0
   35342:	4699      	mov	r9, r3
   35344:	d000      	beq.n	35348 <__aeabi_dmul+0xa0>
   35346:	e087      	b.n	35458 <__aeabi_dmul+0x1b0>
   35348:	2300      	movs	r3, #0
   3534a:	469b      	mov	fp, r3
   3534c:	3302      	adds	r3, #2
   3534e:	2708      	movs	r7, #8
   35350:	9302      	str	r3, [sp, #8]
   35352:	e7ce      	b.n	352f2 <__aeabi_dmul+0x4a>
   35354:	4642      	mov	r2, r8
   35356:	9201      	str	r2, [sp, #4]
   35358:	2802      	cmp	r0, #2
   3535a:	d067      	beq.n	3542c <__aeabi_dmul+0x184>
   3535c:	2803      	cmp	r0, #3
   3535e:	d100      	bne.n	35362 <__aeabi_dmul+0xba>
   35360:	e20e      	b.n	35780 <__aeabi_dmul+0x4d8>
   35362:	2801      	cmp	r0, #1
   35364:	d000      	beq.n	35368 <__aeabi_dmul+0xc0>
   35366:	e162      	b.n	3562e <__aeabi_dmul+0x386>
   35368:	2300      	movs	r3, #0
   3536a:	2400      	movs	r4, #0
   3536c:	2200      	movs	r2, #0
   3536e:	4699      	mov	r9, r3
   35370:	9901      	ldr	r1, [sp, #4]
   35372:	4001      	ands	r1, r0
   35374:	b2cd      	uxtb	r5, r1
   35376:	2100      	movs	r1, #0
   35378:	0312      	lsls	r2, r2, #12
   3537a:	0d0b      	lsrs	r3, r1, #20
   3537c:	0b12      	lsrs	r2, r2, #12
   3537e:	051b      	lsls	r3, r3, #20
   35380:	4313      	orrs	r3, r2
   35382:	4a43      	ldr	r2, [pc, #268]	; (35490 <__aeabi_dmul+0x1e8>)
   35384:	0524      	lsls	r4, r4, #20
   35386:	4013      	ands	r3, r2
   35388:	431c      	orrs	r4, r3
   3538a:	0064      	lsls	r4, r4, #1
   3538c:	07ed      	lsls	r5, r5, #31
   3538e:	0864      	lsrs	r4, r4, #1
   35390:	432c      	orrs	r4, r5
   35392:	4648      	mov	r0, r9
   35394:	0021      	movs	r1, r4
   35396:	b007      	add	sp, #28
   35398:	bc3c      	pop	{r2, r3, r4, r5}
   3539a:	4690      	mov	r8, r2
   3539c:	4699      	mov	r9, r3
   3539e:	46a2      	mov	sl, r4
   353a0:	46ab      	mov	fp, r5
   353a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   353a4:	4303      	orrs	r3, r0
   353a6:	4699      	mov	r9, r3
   353a8:	d04f      	beq.n	3544a <__aeabi_dmul+0x1a2>
   353aa:	465b      	mov	r3, fp
   353ac:	2b00      	cmp	r3, #0
   353ae:	d100      	bne.n	353b2 <__aeabi_dmul+0x10a>
   353b0:	e189      	b.n	356c6 <__aeabi_dmul+0x41e>
   353b2:	4658      	mov	r0, fp
   353b4:	f000 fe06 	bl	35fc4 <__clzsi2>
   353b8:	0003      	movs	r3, r0
   353ba:	3b0b      	subs	r3, #11
   353bc:	2b1c      	cmp	r3, #28
   353be:	dd00      	ble.n	353c2 <__aeabi_dmul+0x11a>
   353c0:	e17a      	b.n	356b8 <__aeabi_dmul+0x410>
   353c2:	221d      	movs	r2, #29
   353c4:	1ad3      	subs	r3, r2, r3
   353c6:	003a      	movs	r2, r7
   353c8:	0001      	movs	r1, r0
   353ca:	465c      	mov	r4, fp
   353cc:	40da      	lsrs	r2, r3
   353ce:	3908      	subs	r1, #8
   353d0:	408c      	lsls	r4, r1
   353d2:	0013      	movs	r3, r2
   353d4:	408f      	lsls	r7, r1
   353d6:	4323      	orrs	r3, r4
   353d8:	469b      	mov	fp, r3
   353da:	46b9      	mov	r9, r7
   353dc:	2300      	movs	r3, #0
   353de:	4e2d      	ldr	r6, [pc, #180]	; (35494 <__aeabi_dmul+0x1ec>)
   353e0:	2700      	movs	r7, #0
   353e2:	1a36      	subs	r6, r6, r0
   353e4:	9302      	str	r3, [sp, #8]
   353e6:	e784      	b.n	352f2 <__aeabi_dmul+0x4a>
   353e8:	4653      	mov	r3, sl
   353ea:	4323      	orrs	r3, r4
   353ec:	d12a      	bne.n	35444 <__aeabi_dmul+0x19c>
   353ee:	2400      	movs	r4, #0
   353f0:	2002      	movs	r0, #2
   353f2:	e796      	b.n	35322 <__aeabi_dmul+0x7a>
   353f4:	4653      	mov	r3, sl
   353f6:	4323      	orrs	r3, r4
   353f8:	d020      	beq.n	3543c <__aeabi_dmul+0x194>
   353fa:	2c00      	cmp	r4, #0
   353fc:	d100      	bne.n	35400 <__aeabi_dmul+0x158>
   353fe:	e157      	b.n	356b0 <__aeabi_dmul+0x408>
   35400:	0020      	movs	r0, r4
   35402:	f000 fddf 	bl	35fc4 <__clzsi2>
   35406:	0003      	movs	r3, r0
   35408:	3b0b      	subs	r3, #11
   3540a:	2b1c      	cmp	r3, #28
   3540c:	dd00      	ble.n	35410 <__aeabi_dmul+0x168>
   3540e:	e149      	b.n	356a4 <__aeabi_dmul+0x3fc>
   35410:	211d      	movs	r1, #29
   35412:	1acb      	subs	r3, r1, r3
   35414:	4651      	mov	r1, sl
   35416:	0002      	movs	r2, r0
   35418:	40d9      	lsrs	r1, r3
   3541a:	4653      	mov	r3, sl
   3541c:	3a08      	subs	r2, #8
   3541e:	4094      	lsls	r4, r2
   35420:	4093      	lsls	r3, r2
   35422:	430c      	orrs	r4, r1
   35424:	4a1b      	ldr	r2, [pc, #108]	; (35494 <__aeabi_dmul+0x1ec>)
   35426:	1a12      	subs	r2, r2, r0
   35428:	2000      	movs	r0, #0
   3542a:	e77a      	b.n	35322 <__aeabi_dmul+0x7a>
   3542c:	2501      	movs	r5, #1
   3542e:	9b01      	ldr	r3, [sp, #4]
   35430:	4c14      	ldr	r4, [pc, #80]	; (35484 <__aeabi_dmul+0x1dc>)
   35432:	401d      	ands	r5, r3
   35434:	2300      	movs	r3, #0
   35436:	2200      	movs	r2, #0
   35438:	4699      	mov	r9, r3
   3543a:	e79c      	b.n	35376 <__aeabi_dmul+0xce>
   3543c:	2400      	movs	r4, #0
   3543e:	2200      	movs	r2, #0
   35440:	2001      	movs	r0, #1
   35442:	e76e      	b.n	35322 <__aeabi_dmul+0x7a>
   35444:	4653      	mov	r3, sl
   35446:	2003      	movs	r0, #3
   35448:	e76b      	b.n	35322 <__aeabi_dmul+0x7a>
   3544a:	2300      	movs	r3, #0
   3544c:	469b      	mov	fp, r3
   3544e:	3301      	adds	r3, #1
   35450:	2704      	movs	r7, #4
   35452:	2600      	movs	r6, #0
   35454:	9302      	str	r3, [sp, #8]
   35456:	e74c      	b.n	352f2 <__aeabi_dmul+0x4a>
   35458:	2303      	movs	r3, #3
   3545a:	4681      	mov	r9, r0
   3545c:	270c      	movs	r7, #12
   3545e:	9302      	str	r3, [sp, #8]
   35460:	e747      	b.n	352f2 <__aeabi_dmul+0x4a>
   35462:	2280      	movs	r2, #128	; 0x80
   35464:	2300      	movs	r3, #0
   35466:	2500      	movs	r5, #0
   35468:	0312      	lsls	r2, r2, #12
   3546a:	4699      	mov	r9, r3
   3546c:	4c05      	ldr	r4, [pc, #20]	; (35484 <__aeabi_dmul+0x1dc>)
   3546e:	e782      	b.n	35376 <__aeabi_dmul+0xce>
   35470:	465c      	mov	r4, fp
   35472:	464b      	mov	r3, r9
   35474:	9802      	ldr	r0, [sp, #8]
   35476:	e76f      	b.n	35358 <__aeabi_dmul+0xb0>
   35478:	465c      	mov	r4, fp
   3547a:	464b      	mov	r3, r9
   3547c:	9501      	str	r5, [sp, #4]
   3547e:	9802      	ldr	r0, [sp, #8]
   35480:	e76a      	b.n	35358 <__aeabi_dmul+0xb0>
   35482:	46c0      	nop			; (mov r8, r8)
   35484:	000007ff 	.word	0x000007ff
   35488:	fffffc01 	.word	0xfffffc01
   3548c:	0003bc1c 	.word	0x0003bc1c
   35490:	800fffff 	.word	0x800fffff
   35494:	fffffc0d 	.word	0xfffffc0d
   35498:	464a      	mov	r2, r9
   3549a:	4649      	mov	r1, r9
   3549c:	0c17      	lsrs	r7, r2, #16
   3549e:	0c1a      	lsrs	r2, r3, #16
   354a0:	041b      	lsls	r3, r3, #16
   354a2:	0c1b      	lsrs	r3, r3, #16
   354a4:	0408      	lsls	r0, r1, #16
   354a6:	0019      	movs	r1, r3
   354a8:	0c00      	lsrs	r0, r0, #16
   354aa:	4341      	muls	r1, r0
   354ac:	0015      	movs	r5, r2
   354ae:	4688      	mov	r8, r1
   354b0:	0019      	movs	r1, r3
   354b2:	437d      	muls	r5, r7
   354b4:	4379      	muls	r1, r7
   354b6:	9503      	str	r5, [sp, #12]
   354b8:	4689      	mov	r9, r1
   354ba:	0029      	movs	r1, r5
   354bc:	0015      	movs	r5, r2
   354be:	4345      	muls	r5, r0
   354c0:	444d      	add	r5, r9
   354c2:	9502      	str	r5, [sp, #8]
   354c4:	4645      	mov	r5, r8
   354c6:	0c2d      	lsrs	r5, r5, #16
   354c8:	46aa      	mov	sl, r5
   354ca:	9d02      	ldr	r5, [sp, #8]
   354cc:	4455      	add	r5, sl
   354ce:	45a9      	cmp	r9, r5
   354d0:	d906      	bls.n	354e0 <__aeabi_dmul+0x238>
   354d2:	468a      	mov	sl, r1
   354d4:	2180      	movs	r1, #128	; 0x80
   354d6:	0249      	lsls	r1, r1, #9
   354d8:	4689      	mov	r9, r1
   354da:	44ca      	add	sl, r9
   354dc:	4651      	mov	r1, sl
   354de:	9103      	str	r1, [sp, #12]
   354e0:	0c29      	lsrs	r1, r5, #16
   354e2:	9104      	str	r1, [sp, #16]
   354e4:	4641      	mov	r1, r8
   354e6:	0409      	lsls	r1, r1, #16
   354e8:	042d      	lsls	r5, r5, #16
   354ea:	0c09      	lsrs	r1, r1, #16
   354ec:	4688      	mov	r8, r1
   354ee:	0029      	movs	r1, r5
   354f0:	0c25      	lsrs	r5, r4, #16
   354f2:	0424      	lsls	r4, r4, #16
   354f4:	4441      	add	r1, r8
   354f6:	0c24      	lsrs	r4, r4, #16
   354f8:	9105      	str	r1, [sp, #20]
   354fa:	0021      	movs	r1, r4
   354fc:	4341      	muls	r1, r0
   354fe:	4688      	mov	r8, r1
   35500:	0021      	movs	r1, r4
   35502:	4379      	muls	r1, r7
   35504:	468a      	mov	sl, r1
   35506:	4368      	muls	r0, r5
   35508:	4641      	mov	r1, r8
   3550a:	4450      	add	r0, sl
   3550c:	4681      	mov	r9, r0
   3550e:	0c08      	lsrs	r0, r1, #16
   35510:	4448      	add	r0, r9
   35512:	436f      	muls	r7, r5
   35514:	4582      	cmp	sl, r0
   35516:	d903      	bls.n	35520 <__aeabi_dmul+0x278>
   35518:	2180      	movs	r1, #128	; 0x80
   3551a:	0249      	lsls	r1, r1, #9
   3551c:	4689      	mov	r9, r1
   3551e:	444f      	add	r7, r9
   35520:	0c01      	lsrs	r1, r0, #16
   35522:	4689      	mov	r9, r1
   35524:	0039      	movs	r1, r7
   35526:	4449      	add	r1, r9
   35528:	9102      	str	r1, [sp, #8]
   3552a:	4641      	mov	r1, r8
   3552c:	040f      	lsls	r7, r1, #16
   3552e:	9904      	ldr	r1, [sp, #16]
   35530:	0c3f      	lsrs	r7, r7, #16
   35532:	4688      	mov	r8, r1
   35534:	0400      	lsls	r0, r0, #16
   35536:	19c0      	adds	r0, r0, r7
   35538:	4480      	add	r8, r0
   3553a:	4641      	mov	r1, r8
   3553c:	9104      	str	r1, [sp, #16]
   3553e:	4659      	mov	r1, fp
   35540:	0c0f      	lsrs	r7, r1, #16
   35542:	0409      	lsls	r1, r1, #16
   35544:	0c09      	lsrs	r1, r1, #16
   35546:	4688      	mov	r8, r1
   35548:	4359      	muls	r1, r3
   3554a:	468a      	mov	sl, r1
   3554c:	0039      	movs	r1, r7
   3554e:	4351      	muls	r1, r2
   35550:	4689      	mov	r9, r1
   35552:	4641      	mov	r1, r8
   35554:	434a      	muls	r2, r1
   35556:	4651      	mov	r1, sl
   35558:	0c09      	lsrs	r1, r1, #16
   3555a:	468b      	mov	fp, r1
   3555c:	437b      	muls	r3, r7
   3555e:	18d2      	adds	r2, r2, r3
   35560:	445a      	add	r2, fp
   35562:	4293      	cmp	r3, r2
   35564:	d903      	bls.n	3556e <__aeabi_dmul+0x2c6>
   35566:	2380      	movs	r3, #128	; 0x80
   35568:	025b      	lsls	r3, r3, #9
   3556a:	469b      	mov	fp, r3
   3556c:	44d9      	add	r9, fp
   3556e:	4651      	mov	r1, sl
   35570:	0409      	lsls	r1, r1, #16
   35572:	0c09      	lsrs	r1, r1, #16
   35574:	468a      	mov	sl, r1
   35576:	4641      	mov	r1, r8
   35578:	4361      	muls	r1, r4
   3557a:	437c      	muls	r4, r7
   3557c:	0c13      	lsrs	r3, r2, #16
   3557e:	0412      	lsls	r2, r2, #16
   35580:	444b      	add	r3, r9
   35582:	4452      	add	r2, sl
   35584:	46a1      	mov	r9, r4
   35586:	468a      	mov	sl, r1
   35588:	003c      	movs	r4, r7
   3558a:	4641      	mov	r1, r8
   3558c:	436c      	muls	r4, r5
   3558e:	434d      	muls	r5, r1
   35590:	4651      	mov	r1, sl
   35592:	444d      	add	r5, r9
   35594:	0c0f      	lsrs	r7, r1, #16
   35596:	197d      	adds	r5, r7, r5
   35598:	45a9      	cmp	r9, r5
   3559a:	d903      	bls.n	355a4 <__aeabi_dmul+0x2fc>
   3559c:	2180      	movs	r1, #128	; 0x80
   3559e:	0249      	lsls	r1, r1, #9
   355a0:	4688      	mov	r8, r1
   355a2:	4444      	add	r4, r8
   355a4:	9f04      	ldr	r7, [sp, #16]
   355a6:	9903      	ldr	r1, [sp, #12]
   355a8:	46b8      	mov	r8, r7
   355aa:	4441      	add	r1, r8
   355ac:	468b      	mov	fp, r1
   355ae:	4583      	cmp	fp, r0
   355b0:	4180      	sbcs	r0, r0
   355b2:	4241      	negs	r1, r0
   355b4:	4688      	mov	r8, r1
   355b6:	4651      	mov	r1, sl
   355b8:	0408      	lsls	r0, r1, #16
   355ba:	042f      	lsls	r7, r5, #16
   355bc:	0c00      	lsrs	r0, r0, #16
   355be:	183f      	adds	r7, r7, r0
   355c0:	4658      	mov	r0, fp
   355c2:	9902      	ldr	r1, [sp, #8]
   355c4:	1810      	adds	r0, r2, r0
   355c6:	4689      	mov	r9, r1
   355c8:	4290      	cmp	r0, r2
   355ca:	4192      	sbcs	r2, r2
   355cc:	444f      	add	r7, r9
   355ce:	46ba      	mov	sl, r7
   355d0:	4252      	negs	r2, r2
   355d2:	4699      	mov	r9, r3
   355d4:	4693      	mov	fp, r2
   355d6:	44c2      	add	sl, r8
   355d8:	44d1      	add	r9, sl
   355da:	44cb      	add	fp, r9
   355dc:	428f      	cmp	r7, r1
   355de:	41bf      	sbcs	r7, r7
   355e0:	45c2      	cmp	sl, r8
   355e2:	4189      	sbcs	r1, r1
   355e4:	4599      	cmp	r9, r3
   355e6:	419b      	sbcs	r3, r3
   355e8:	4593      	cmp	fp, r2
   355ea:	4192      	sbcs	r2, r2
   355ec:	427f      	negs	r7, r7
   355ee:	4249      	negs	r1, r1
   355f0:	0c2d      	lsrs	r5, r5, #16
   355f2:	4252      	negs	r2, r2
   355f4:	430f      	orrs	r7, r1
   355f6:	425b      	negs	r3, r3
   355f8:	4313      	orrs	r3, r2
   355fa:	197f      	adds	r7, r7, r5
   355fc:	18ff      	adds	r7, r7, r3
   355fe:	465b      	mov	r3, fp
   35600:	193c      	adds	r4, r7, r4
   35602:	0ddb      	lsrs	r3, r3, #23
   35604:	9a05      	ldr	r2, [sp, #20]
   35606:	0264      	lsls	r4, r4, #9
   35608:	431c      	orrs	r4, r3
   3560a:	0243      	lsls	r3, r0, #9
   3560c:	4313      	orrs	r3, r2
   3560e:	1e5d      	subs	r5, r3, #1
   35610:	41ab      	sbcs	r3, r5
   35612:	465a      	mov	r2, fp
   35614:	0dc0      	lsrs	r0, r0, #23
   35616:	4303      	orrs	r3, r0
   35618:	0252      	lsls	r2, r2, #9
   3561a:	4313      	orrs	r3, r2
   3561c:	01e2      	lsls	r2, r4, #7
   3561e:	d556      	bpl.n	356ce <__aeabi_dmul+0x426>
   35620:	2001      	movs	r0, #1
   35622:	085a      	lsrs	r2, r3, #1
   35624:	4003      	ands	r3, r0
   35626:	4313      	orrs	r3, r2
   35628:	07e2      	lsls	r2, r4, #31
   3562a:	4313      	orrs	r3, r2
   3562c:	0864      	lsrs	r4, r4, #1
   3562e:	485a      	ldr	r0, [pc, #360]	; (35798 <__aeabi_dmul+0x4f0>)
   35630:	4460      	add	r0, ip
   35632:	2800      	cmp	r0, #0
   35634:	dd4d      	ble.n	356d2 <__aeabi_dmul+0x42a>
   35636:	075a      	lsls	r2, r3, #29
   35638:	d009      	beq.n	3564e <__aeabi_dmul+0x3a6>
   3563a:	220f      	movs	r2, #15
   3563c:	401a      	ands	r2, r3
   3563e:	2a04      	cmp	r2, #4
   35640:	d005      	beq.n	3564e <__aeabi_dmul+0x3a6>
   35642:	1d1a      	adds	r2, r3, #4
   35644:	429a      	cmp	r2, r3
   35646:	419b      	sbcs	r3, r3
   35648:	425b      	negs	r3, r3
   3564a:	18e4      	adds	r4, r4, r3
   3564c:	0013      	movs	r3, r2
   3564e:	01e2      	lsls	r2, r4, #7
   35650:	d504      	bpl.n	3565c <__aeabi_dmul+0x3b4>
   35652:	2080      	movs	r0, #128	; 0x80
   35654:	4a51      	ldr	r2, [pc, #324]	; (3579c <__aeabi_dmul+0x4f4>)
   35656:	00c0      	lsls	r0, r0, #3
   35658:	4014      	ands	r4, r2
   3565a:	4460      	add	r0, ip
   3565c:	4a50      	ldr	r2, [pc, #320]	; (357a0 <__aeabi_dmul+0x4f8>)
   3565e:	4290      	cmp	r0, r2
   35660:	dd00      	ble.n	35664 <__aeabi_dmul+0x3bc>
   35662:	e6e3      	b.n	3542c <__aeabi_dmul+0x184>
   35664:	2501      	movs	r5, #1
   35666:	08db      	lsrs	r3, r3, #3
   35668:	0762      	lsls	r2, r4, #29
   3566a:	431a      	orrs	r2, r3
   3566c:	0264      	lsls	r4, r4, #9
   3566e:	9b01      	ldr	r3, [sp, #4]
   35670:	4691      	mov	r9, r2
   35672:	0b22      	lsrs	r2, r4, #12
   35674:	0544      	lsls	r4, r0, #21
   35676:	0d64      	lsrs	r4, r4, #21
   35678:	401d      	ands	r5, r3
   3567a:	e67c      	b.n	35376 <__aeabi_dmul+0xce>
   3567c:	2280      	movs	r2, #128	; 0x80
   3567e:	4659      	mov	r1, fp
   35680:	0312      	lsls	r2, r2, #12
   35682:	4211      	tst	r1, r2
   35684:	d008      	beq.n	35698 <__aeabi_dmul+0x3f0>
   35686:	4214      	tst	r4, r2
   35688:	d106      	bne.n	35698 <__aeabi_dmul+0x3f0>
   3568a:	4322      	orrs	r2, r4
   3568c:	0312      	lsls	r2, r2, #12
   3568e:	0b12      	lsrs	r2, r2, #12
   35690:	4645      	mov	r5, r8
   35692:	4699      	mov	r9, r3
   35694:	4c43      	ldr	r4, [pc, #268]	; (357a4 <__aeabi_dmul+0x4fc>)
   35696:	e66e      	b.n	35376 <__aeabi_dmul+0xce>
   35698:	465b      	mov	r3, fp
   3569a:	431a      	orrs	r2, r3
   3569c:	0312      	lsls	r2, r2, #12
   3569e:	0b12      	lsrs	r2, r2, #12
   356a0:	4c40      	ldr	r4, [pc, #256]	; (357a4 <__aeabi_dmul+0x4fc>)
   356a2:	e668      	b.n	35376 <__aeabi_dmul+0xce>
   356a4:	0003      	movs	r3, r0
   356a6:	4654      	mov	r4, sl
   356a8:	3b28      	subs	r3, #40	; 0x28
   356aa:	409c      	lsls	r4, r3
   356ac:	2300      	movs	r3, #0
   356ae:	e6b9      	b.n	35424 <__aeabi_dmul+0x17c>
   356b0:	f000 fc88 	bl	35fc4 <__clzsi2>
   356b4:	3020      	adds	r0, #32
   356b6:	e6a6      	b.n	35406 <__aeabi_dmul+0x15e>
   356b8:	0003      	movs	r3, r0
   356ba:	3b28      	subs	r3, #40	; 0x28
   356bc:	409f      	lsls	r7, r3
   356be:	2300      	movs	r3, #0
   356c0:	46bb      	mov	fp, r7
   356c2:	4699      	mov	r9, r3
   356c4:	e68a      	b.n	353dc <__aeabi_dmul+0x134>
   356c6:	f000 fc7d 	bl	35fc4 <__clzsi2>
   356ca:	3020      	adds	r0, #32
   356cc:	e674      	b.n	353b8 <__aeabi_dmul+0x110>
   356ce:	46b4      	mov	ip, r6
   356d0:	e7ad      	b.n	3562e <__aeabi_dmul+0x386>
   356d2:	2501      	movs	r5, #1
   356d4:	1a2a      	subs	r2, r5, r0
   356d6:	2a38      	cmp	r2, #56	; 0x38
   356d8:	dd06      	ble.n	356e8 <__aeabi_dmul+0x440>
   356da:	9b01      	ldr	r3, [sp, #4]
   356dc:	2400      	movs	r4, #0
   356de:	401d      	ands	r5, r3
   356e0:	2300      	movs	r3, #0
   356e2:	2200      	movs	r2, #0
   356e4:	4699      	mov	r9, r3
   356e6:	e646      	b.n	35376 <__aeabi_dmul+0xce>
   356e8:	2a1f      	cmp	r2, #31
   356ea:	dc21      	bgt.n	35730 <__aeabi_dmul+0x488>
   356ec:	2520      	movs	r5, #32
   356ee:	0020      	movs	r0, r4
   356f0:	1aad      	subs	r5, r5, r2
   356f2:	001e      	movs	r6, r3
   356f4:	40ab      	lsls	r3, r5
   356f6:	40a8      	lsls	r0, r5
   356f8:	40d6      	lsrs	r6, r2
   356fa:	1e5d      	subs	r5, r3, #1
   356fc:	41ab      	sbcs	r3, r5
   356fe:	4330      	orrs	r0, r6
   35700:	4318      	orrs	r0, r3
   35702:	40d4      	lsrs	r4, r2
   35704:	0743      	lsls	r3, r0, #29
   35706:	d009      	beq.n	3571c <__aeabi_dmul+0x474>
   35708:	230f      	movs	r3, #15
   3570a:	4003      	ands	r3, r0
   3570c:	2b04      	cmp	r3, #4
   3570e:	d005      	beq.n	3571c <__aeabi_dmul+0x474>
   35710:	0003      	movs	r3, r0
   35712:	1d18      	adds	r0, r3, #4
   35714:	4298      	cmp	r0, r3
   35716:	419b      	sbcs	r3, r3
   35718:	425b      	negs	r3, r3
   3571a:	18e4      	adds	r4, r4, r3
   3571c:	0223      	lsls	r3, r4, #8
   3571e:	d521      	bpl.n	35764 <__aeabi_dmul+0x4bc>
   35720:	2501      	movs	r5, #1
   35722:	9b01      	ldr	r3, [sp, #4]
   35724:	2401      	movs	r4, #1
   35726:	401d      	ands	r5, r3
   35728:	2300      	movs	r3, #0
   3572a:	2200      	movs	r2, #0
   3572c:	4699      	mov	r9, r3
   3572e:	e622      	b.n	35376 <__aeabi_dmul+0xce>
   35730:	251f      	movs	r5, #31
   35732:	0021      	movs	r1, r4
   35734:	426d      	negs	r5, r5
   35736:	1a28      	subs	r0, r5, r0
   35738:	40c1      	lsrs	r1, r0
   3573a:	0008      	movs	r0, r1
   3573c:	2a20      	cmp	r2, #32
   3573e:	d01d      	beq.n	3577c <__aeabi_dmul+0x4d4>
   35740:	355f      	adds	r5, #95	; 0x5f
   35742:	1aaa      	subs	r2, r5, r2
   35744:	4094      	lsls	r4, r2
   35746:	4323      	orrs	r3, r4
   35748:	1e5c      	subs	r4, r3, #1
   3574a:	41a3      	sbcs	r3, r4
   3574c:	2507      	movs	r5, #7
   3574e:	4303      	orrs	r3, r0
   35750:	401d      	ands	r5, r3
   35752:	2200      	movs	r2, #0
   35754:	2d00      	cmp	r5, #0
   35756:	d009      	beq.n	3576c <__aeabi_dmul+0x4c4>
   35758:	220f      	movs	r2, #15
   3575a:	2400      	movs	r4, #0
   3575c:	401a      	ands	r2, r3
   3575e:	0018      	movs	r0, r3
   35760:	2a04      	cmp	r2, #4
   35762:	d1d6      	bne.n	35712 <__aeabi_dmul+0x46a>
   35764:	0003      	movs	r3, r0
   35766:	0765      	lsls	r5, r4, #29
   35768:	0264      	lsls	r4, r4, #9
   3576a:	0b22      	lsrs	r2, r4, #12
   3576c:	08db      	lsrs	r3, r3, #3
   3576e:	432b      	orrs	r3, r5
   35770:	2501      	movs	r5, #1
   35772:	4699      	mov	r9, r3
   35774:	9b01      	ldr	r3, [sp, #4]
   35776:	2400      	movs	r4, #0
   35778:	401d      	ands	r5, r3
   3577a:	e5fc      	b.n	35376 <__aeabi_dmul+0xce>
   3577c:	2400      	movs	r4, #0
   3577e:	e7e2      	b.n	35746 <__aeabi_dmul+0x49e>
   35780:	2280      	movs	r2, #128	; 0x80
   35782:	2501      	movs	r5, #1
   35784:	0312      	lsls	r2, r2, #12
   35786:	4322      	orrs	r2, r4
   35788:	9901      	ldr	r1, [sp, #4]
   3578a:	0312      	lsls	r2, r2, #12
   3578c:	0b12      	lsrs	r2, r2, #12
   3578e:	400d      	ands	r5, r1
   35790:	4699      	mov	r9, r3
   35792:	4c04      	ldr	r4, [pc, #16]	; (357a4 <__aeabi_dmul+0x4fc>)
   35794:	e5ef      	b.n	35376 <__aeabi_dmul+0xce>
   35796:	46c0      	nop			; (mov r8, r8)
   35798:	000003ff 	.word	0x000003ff
   3579c:	feffffff 	.word	0xfeffffff
   357a0:	000007fe 	.word	0x000007fe
   357a4:	000007ff 	.word	0x000007ff

000357a8 <__aeabi_dsub>:
   357a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   357aa:	4646      	mov	r6, r8
   357ac:	46d6      	mov	lr, sl
   357ae:	464f      	mov	r7, r9
   357b0:	030c      	lsls	r4, r1, #12
   357b2:	b5c0      	push	{r6, r7, lr}
   357b4:	0fcd      	lsrs	r5, r1, #31
   357b6:	004e      	lsls	r6, r1, #1
   357b8:	0a61      	lsrs	r1, r4, #9
   357ba:	0f44      	lsrs	r4, r0, #29
   357bc:	430c      	orrs	r4, r1
   357be:	00c1      	lsls	r1, r0, #3
   357c0:	0058      	lsls	r0, r3, #1
   357c2:	0d40      	lsrs	r0, r0, #21
   357c4:	4684      	mov	ip, r0
   357c6:	468a      	mov	sl, r1
   357c8:	000f      	movs	r7, r1
   357ca:	0319      	lsls	r1, r3, #12
   357cc:	0f50      	lsrs	r0, r2, #29
   357ce:	0a49      	lsrs	r1, r1, #9
   357d0:	4301      	orrs	r1, r0
   357d2:	48c6      	ldr	r0, [pc, #792]	; (35aec <__aeabi_dsub+0x344>)
   357d4:	0d76      	lsrs	r6, r6, #21
   357d6:	46a8      	mov	r8, r5
   357d8:	0fdb      	lsrs	r3, r3, #31
   357da:	00d2      	lsls	r2, r2, #3
   357dc:	4584      	cmp	ip, r0
   357de:	d100      	bne.n	357e2 <__aeabi_dsub+0x3a>
   357e0:	e0d8      	b.n	35994 <__aeabi_dsub+0x1ec>
   357e2:	2001      	movs	r0, #1
   357e4:	4043      	eors	r3, r0
   357e6:	42ab      	cmp	r3, r5
   357e8:	d100      	bne.n	357ec <__aeabi_dsub+0x44>
   357ea:	e0a6      	b.n	3593a <__aeabi_dsub+0x192>
   357ec:	4660      	mov	r0, ip
   357ee:	1a35      	subs	r5, r6, r0
   357f0:	2d00      	cmp	r5, #0
   357f2:	dc00      	bgt.n	357f6 <__aeabi_dsub+0x4e>
   357f4:	e105      	b.n	35a02 <__aeabi_dsub+0x25a>
   357f6:	2800      	cmp	r0, #0
   357f8:	d110      	bne.n	3581c <__aeabi_dsub+0x74>
   357fa:	000b      	movs	r3, r1
   357fc:	4313      	orrs	r3, r2
   357fe:	d100      	bne.n	35802 <__aeabi_dsub+0x5a>
   35800:	e0d7      	b.n	359b2 <__aeabi_dsub+0x20a>
   35802:	1e6b      	subs	r3, r5, #1
   35804:	2b00      	cmp	r3, #0
   35806:	d000      	beq.n	3580a <__aeabi_dsub+0x62>
   35808:	e14b      	b.n	35aa2 <__aeabi_dsub+0x2fa>
   3580a:	4653      	mov	r3, sl
   3580c:	1a9f      	subs	r7, r3, r2
   3580e:	45ba      	cmp	sl, r7
   35810:	4180      	sbcs	r0, r0
   35812:	1a64      	subs	r4, r4, r1
   35814:	4240      	negs	r0, r0
   35816:	1a24      	subs	r4, r4, r0
   35818:	2601      	movs	r6, #1
   3581a:	e01e      	b.n	3585a <__aeabi_dsub+0xb2>
   3581c:	4bb3      	ldr	r3, [pc, #716]	; (35aec <__aeabi_dsub+0x344>)
   3581e:	429e      	cmp	r6, r3
   35820:	d048      	beq.n	358b4 <__aeabi_dsub+0x10c>
   35822:	2380      	movs	r3, #128	; 0x80
   35824:	041b      	lsls	r3, r3, #16
   35826:	4319      	orrs	r1, r3
   35828:	2d38      	cmp	r5, #56	; 0x38
   3582a:	dd00      	ble.n	3582e <__aeabi_dsub+0x86>
   3582c:	e119      	b.n	35a62 <__aeabi_dsub+0x2ba>
   3582e:	2d1f      	cmp	r5, #31
   35830:	dd00      	ble.n	35834 <__aeabi_dsub+0x8c>
   35832:	e14c      	b.n	35ace <__aeabi_dsub+0x326>
   35834:	2320      	movs	r3, #32
   35836:	000f      	movs	r7, r1
   35838:	1b5b      	subs	r3, r3, r5
   3583a:	0010      	movs	r0, r2
   3583c:	409a      	lsls	r2, r3
   3583e:	409f      	lsls	r7, r3
   35840:	40e8      	lsrs	r0, r5
   35842:	1e53      	subs	r3, r2, #1
   35844:	419a      	sbcs	r2, r3
   35846:	40e9      	lsrs	r1, r5
   35848:	4307      	orrs	r7, r0
   3584a:	4317      	orrs	r7, r2
   3584c:	4653      	mov	r3, sl
   3584e:	1bdf      	subs	r7, r3, r7
   35850:	1a61      	subs	r1, r4, r1
   35852:	45ba      	cmp	sl, r7
   35854:	41a4      	sbcs	r4, r4
   35856:	4264      	negs	r4, r4
   35858:	1b0c      	subs	r4, r1, r4
   3585a:	0223      	lsls	r3, r4, #8
   3585c:	d400      	bmi.n	35860 <__aeabi_dsub+0xb8>
   3585e:	e0c5      	b.n	359ec <__aeabi_dsub+0x244>
   35860:	0264      	lsls	r4, r4, #9
   35862:	0a65      	lsrs	r5, r4, #9
   35864:	2d00      	cmp	r5, #0
   35866:	d100      	bne.n	3586a <__aeabi_dsub+0xc2>
   35868:	e0f6      	b.n	35a58 <__aeabi_dsub+0x2b0>
   3586a:	0028      	movs	r0, r5
   3586c:	f000 fbaa 	bl	35fc4 <__clzsi2>
   35870:	0003      	movs	r3, r0
   35872:	3b08      	subs	r3, #8
   35874:	2b1f      	cmp	r3, #31
   35876:	dd00      	ble.n	3587a <__aeabi_dsub+0xd2>
   35878:	e0e9      	b.n	35a4e <__aeabi_dsub+0x2a6>
   3587a:	2220      	movs	r2, #32
   3587c:	003c      	movs	r4, r7
   3587e:	1ad2      	subs	r2, r2, r3
   35880:	409d      	lsls	r5, r3
   35882:	40d4      	lsrs	r4, r2
   35884:	409f      	lsls	r7, r3
   35886:	4325      	orrs	r5, r4
   35888:	429e      	cmp	r6, r3
   3588a:	dd00      	ble.n	3588e <__aeabi_dsub+0xe6>
   3588c:	e0db      	b.n	35a46 <__aeabi_dsub+0x29e>
   3588e:	1b9e      	subs	r6, r3, r6
   35890:	1c73      	adds	r3, r6, #1
   35892:	2b1f      	cmp	r3, #31
   35894:	dd00      	ble.n	35898 <__aeabi_dsub+0xf0>
   35896:	e10a      	b.n	35aae <__aeabi_dsub+0x306>
   35898:	2220      	movs	r2, #32
   3589a:	0038      	movs	r0, r7
   3589c:	1ad2      	subs	r2, r2, r3
   3589e:	0029      	movs	r1, r5
   358a0:	4097      	lsls	r7, r2
   358a2:	002c      	movs	r4, r5
   358a4:	4091      	lsls	r1, r2
   358a6:	40d8      	lsrs	r0, r3
   358a8:	1e7a      	subs	r2, r7, #1
   358aa:	4197      	sbcs	r7, r2
   358ac:	40dc      	lsrs	r4, r3
   358ae:	2600      	movs	r6, #0
   358b0:	4301      	orrs	r1, r0
   358b2:	430f      	orrs	r7, r1
   358b4:	077b      	lsls	r3, r7, #29
   358b6:	d009      	beq.n	358cc <__aeabi_dsub+0x124>
   358b8:	230f      	movs	r3, #15
   358ba:	403b      	ands	r3, r7
   358bc:	2b04      	cmp	r3, #4
   358be:	d005      	beq.n	358cc <__aeabi_dsub+0x124>
   358c0:	1d3b      	adds	r3, r7, #4
   358c2:	42bb      	cmp	r3, r7
   358c4:	41bf      	sbcs	r7, r7
   358c6:	427f      	negs	r7, r7
   358c8:	19e4      	adds	r4, r4, r7
   358ca:	001f      	movs	r7, r3
   358cc:	0223      	lsls	r3, r4, #8
   358ce:	d525      	bpl.n	3591c <__aeabi_dsub+0x174>
   358d0:	4b86      	ldr	r3, [pc, #536]	; (35aec <__aeabi_dsub+0x344>)
   358d2:	3601      	adds	r6, #1
   358d4:	429e      	cmp	r6, r3
   358d6:	d100      	bne.n	358da <__aeabi_dsub+0x132>
   358d8:	e0af      	b.n	35a3a <__aeabi_dsub+0x292>
   358da:	4b85      	ldr	r3, [pc, #532]	; (35af0 <__aeabi_dsub+0x348>)
   358dc:	2501      	movs	r5, #1
   358de:	401c      	ands	r4, r3
   358e0:	4643      	mov	r3, r8
   358e2:	0762      	lsls	r2, r4, #29
   358e4:	08ff      	lsrs	r7, r7, #3
   358e6:	0264      	lsls	r4, r4, #9
   358e8:	0576      	lsls	r6, r6, #21
   358ea:	4317      	orrs	r7, r2
   358ec:	0b24      	lsrs	r4, r4, #12
   358ee:	0d76      	lsrs	r6, r6, #21
   358f0:	401d      	ands	r5, r3
   358f2:	2100      	movs	r1, #0
   358f4:	0324      	lsls	r4, r4, #12
   358f6:	0b23      	lsrs	r3, r4, #12
   358f8:	0d0c      	lsrs	r4, r1, #20
   358fa:	4a7e      	ldr	r2, [pc, #504]	; (35af4 <__aeabi_dsub+0x34c>)
   358fc:	0524      	lsls	r4, r4, #20
   358fe:	431c      	orrs	r4, r3
   35900:	4014      	ands	r4, r2
   35902:	0533      	lsls	r3, r6, #20
   35904:	4323      	orrs	r3, r4
   35906:	005b      	lsls	r3, r3, #1
   35908:	07ed      	lsls	r5, r5, #31
   3590a:	085b      	lsrs	r3, r3, #1
   3590c:	432b      	orrs	r3, r5
   3590e:	0038      	movs	r0, r7
   35910:	0019      	movs	r1, r3
   35912:	bc1c      	pop	{r2, r3, r4}
   35914:	4690      	mov	r8, r2
   35916:	4699      	mov	r9, r3
   35918:	46a2      	mov	sl, r4
   3591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3591c:	2501      	movs	r5, #1
   3591e:	4643      	mov	r3, r8
   35920:	0762      	lsls	r2, r4, #29
   35922:	08ff      	lsrs	r7, r7, #3
   35924:	4317      	orrs	r7, r2
   35926:	08e4      	lsrs	r4, r4, #3
   35928:	401d      	ands	r5, r3
   3592a:	4b70      	ldr	r3, [pc, #448]	; (35aec <__aeabi_dsub+0x344>)
   3592c:	429e      	cmp	r6, r3
   3592e:	d036      	beq.n	3599e <__aeabi_dsub+0x1f6>
   35930:	0324      	lsls	r4, r4, #12
   35932:	0576      	lsls	r6, r6, #21
   35934:	0b24      	lsrs	r4, r4, #12
   35936:	0d76      	lsrs	r6, r6, #21
   35938:	e7db      	b.n	358f2 <__aeabi_dsub+0x14a>
   3593a:	4663      	mov	r3, ip
   3593c:	1af3      	subs	r3, r6, r3
   3593e:	2b00      	cmp	r3, #0
   35940:	dc00      	bgt.n	35944 <__aeabi_dsub+0x19c>
   35942:	e094      	b.n	35a6e <__aeabi_dsub+0x2c6>
   35944:	4660      	mov	r0, ip
   35946:	2800      	cmp	r0, #0
   35948:	d035      	beq.n	359b6 <__aeabi_dsub+0x20e>
   3594a:	4868      	ldr	r0, [pc, #416]	; (35aec <__aeabi_dsub+0x344>)
   3594c:	4286      	cmp	r6, r0
   3594e:	d0b1      	beq.n	358b4 <__aeabi_dsub+0x10c>
   35950:	2780      	movs	r7, #128	; 0x80
   35952:	043f      	lsls	r7, r7, #16
   35954:	4339      	orrs	r1, r7
   35956:	2b38      	cmp	r3, #56	; 0x38
   35958:	dc00      	bgt.n	3595c <__aeabi_dsub+0x1b4>
   3595a:	e0fd      	b.n	35b58 <__aeabi_dsub+0x3b0>
   3595c:	430a      	orrs	r2, r1
   3595e:	0017      	movs	r7, r2
   35960:	2100      	movs	r1, #0
   35962:	1e7a      	subs	r2, r7, #1
   35964:	4197      	sbcs	r7, r2
   35966:	4457      	add	r7, sl
   35968:	4557      	cmp	r7, sl
   3596a:	4180      	sbcs	r0, r0
   3596c:	1909      	adds	r1, r1, r4
   3596e:	4244      	negs	r4, r0
   35970:	190c      	adds	r4, r1, r4
   35972:	0223      	lsls	r3, r4, #8
   35974:	d53a      	bpl.n	359ec <__aeabi_dsub+0x244>
   35976:	4b5d      	ldr	r3, [pc, #372]	; (35aec <__aeabi_dsub+0x344>)
   35978:	3601      	adds	r6, #1
   3597a:	429e      	cmp	r6, r3
   3597c:	d100      	bne.n	35980 <__aeabi_dsub+0x1d8>
   3597e:	e14b      	b.n	35c18 <__aeabi_dsub+0x470>
   35980:	2201      	movs	r2, #1
   35982:	4b5b      	ldr	r3, [pc, #364]	; (35af0 <__aeabi_dsub+0x348>)
   35984:	401c      	ands	r4, r3
   35986:	087b      	lsrs	r3, r7, #1
   35988:	4017      	ands	r7, r2
   3598a:	431f      	orrs	r7, r3
   3598c:	07e2      	lsls	r2, r4, #31
   3598e:	4317      	orrs	r7, r2
   35990:	0864      	lsrs	r4, r4, #1
   35992:	e78f      	b.n	358b4 <__aeabi_dsub+0x10c>
   35994:	0008      	movs	r0, r1
   35996:	4310      	orrs	r0, r2
   35998:	d000      	beq.n	3599c <__aeabi_dsub+0x1f4>
   3599a:	e724      	b.n	357e6 <__aeabi_dsub+0x3e>
   3599c:	e721      	b.n	357e2 <__aeabi_dsub+0x3a>
   3599e:	0023      	movs	r3, r4
   359a0:	433b      	orrs	r3, r7
   359a2:	d100      	bne.n	359a6 <__aeabi_dsub+0x1fe>
   359a4:	e1b9      	b.n	35d1a <__aeabi_dsub+0x572>
   359a6:	2280      	movs	r2, #128	; 0x80
   359a8:	0312      	lsls	r2, r2, #12
   359aa:	4314      	orrs	r4, r2
   359ac:	0324      	lsls	r4, r4, #12
   359ae:	0b24      	lsrs	r4, r4, #12
   359b0:	e79f      	b.n	358f2 <__aeabi_dsub+0x14a>
   359b2:	002e      	movs	r6, r5
   359b4:	e77e      	b.n	358b4 <__aeabi_dsub+0x10c>
   359b6:	0008      	movs	r0, r1
   359b8:	4310      	orrs	r0, r2
   359ba:	d100      	bne.n	359be <__aeabi_dsub+0x216>
   359bc:	e0ca      	b.n	35b54 <__aeabi_dsub+0x3ac>
   359be:	1e58      	subs	r0, r3, #1
   359c0:	4684      	mov	ip, r0
   359c2:	2800      	cmp	r0, #0
   359c4:	d000      	beq.n	359c8 <__aeabi_dsub+0x220>
   359c6:	e0e7      	b.n	35b98 <__aeabi_dsub+0x3f0>
   359c8:	4452      	add	r2, sl
   359ca:	4552      	cmp	r2, sl
   359cc:	4180      	sbcs	r0, r0
   359ce:	1864      	adds	r4, r4, r1
   359d0:	4240      	negs	r0, r0
   359d2:	1824      	adds	r4, r4, r0
   359d4:	0017      	movs	r7, r2
   359d6:	2601      	movs	r6, #1
   359d8:	0223      	lsls	r3, r4, #8
   359da:	d507      	bpl.n	359ec <__aeabi_dsub+0x244>
   359dc:	2602      	movs	r6, #2
   359de:	e7cf      	b.n	35980 <__aeabi_dsub+0x1d8>
   359e0:	4664      	mov	r4, ip
   359e2:	432c      	orrs	r4, r5
   359e4:	d100      	bne.n	359e8 <__aeabi_dsub+0x240>
   359e6:	e1b3      	b.n	35d50 <__aeabi_dsub+0x5a8>
   359e8:	002c      	movs	r4, r5
   359ea:	4667      	mov	r7, ip
   359ec:	077b      	lsls	r3, r7, #29
   359ee:	d000      	beq.n	359f2 <__aeabi_dsub+0x24a>
   359f0:	e762      	b.n	358b8 <__aeabi_dsub+0x110>
   359f2:	0763      	lsls	r3, r4, #29
   359f4:	08ff      	lsrs	r7, r7, #3
   359f6:	431f      	orrs	r7, r3
   359f8:	2501      	movs	r5, #1
   359fa:	4643      	mov	r3, r8
   359fc:	08e4      	lsrs	r4, r4, #3
   359fe:	401d      	ands	r5, r3
   35a00:	e793      	b.n	3592a <__aeabi_dsub+0x182>
   35a02:	2d00      	cmp	r5, #0
   35a04:	d178      	bne.n	35af8 <__aeabi_dsub+0x350>
   35a06:	1c75      	adds	r5, r6, #1
   35a08:	056d      	lsls	r5, r5, #21
   35a0a:	0d6d      	lsrs	r5, r5, #21
   35a0c:	2d01      	cmp	r5, #1
   35a0e:	dc00      	bgt.n	35a12 <__aeabi_dsub+0x26a>
   35a10:	e0f2      	b.n	35bf8 <__aeabi_dsub+0x450>
   35a12:	4650      	mov	r0, sl
   35a14:	1a80      	subs	r0, r0, r2
   35a16:	4582      	cmp	sl, r0
   35a18:	41bf      	sbcs	r7, r7
   35a1a:	1a65      	subs	r5, r4, r1
   35a1c:	427f      	negs	r7, r7
   35a1e:	1bed      	subs	r5, r5, r7
   35a20:	4684      	mov	ip, r0
   35a22:	0228      	lsls	r0, r5, #8
   35a24:	d400      	bmi.n	35a28 <__aeabi_dsub+0x280>
   35a26:	e08c      	b.n	35b42 <__aeabi_dsub+0x39a>
   35a28:	4650      	mov	r0, sl
   35a2a:	1a17      	subs	r7, r2, r0
   35a2c:	42ba      	cmp	r2, r7
   35a2e:	4192      	sbcs	r2, r2
   35a30:	1b0c      	subs	r4, r1, r4
   35a32:	4255      	negs	r5, r2
   35a34:	1b65      	subs	r5, r4, r5
   35a36:	4698      	mov	r8, r3
   35a38:	e714      	b.n	35864 <__aeabi_dsub+0xbc>
   35a3a:	2501      	movs	r5, #1
   35a3c:	4643      	mov	r3, r8
   35a3e:	2400      	movs	r4, #0
   35a40:	401d      	ands	r5, r3
   35a42:	2700      	movs	r7, #0
   35a44:	e755      	b.n	358f2 <__aeabi_dsub+0x14a>
   35a46:	4c2a      	ldr	r4, [pc, #168]	; (35af0 <__aeabi_dsub+0x348>)
   35a48:	1af6      	subs	r6, r6, r3
   35a4a:	402c      	ands	r4, r5
   35a4c:	e732      	b.n	358b4 <__aeabi_dsub+0x10c>
   35a4e:	003d      	movs	r5, r7
   35a50:	3828      	subs	r0, #40	; 0x28
   35a52:	4085      	lsls	r5, r0
   35a54:	2700      	movs	r7, #0
   35a56:	e717      	b.n	35888 <__aeabi_dsub+0xe0>
   35a58:	0038      	movs	r0, r7
   35a5a:	f000 fab3 	bl	35fc4 <__clzsi2>
   35a5e:	3020      	adds	r0, #32
   35a60:	e706      	b.n	35870 <__aeabi_dsub+0xc8>
   35a62:	430a      	orrs	r2, r1
   35a64:	0017      	movs	r7, r2
   35a66:	2100      	movs	r1, #0
   35a68:	1e7a      	subs	r2, r7, #1
   35a6a:	4197      	sbcs	r7, r2
   35a6c:	e6ee      	b.n	3584c <__aeabi_dsub+0xa4>
   35a6e:	2b00      	cmp	r3, #0
   35a70:	d000      	beq.n	35a74 <__aeabi_dsub+0x2cc>
   35a72:	e0e5      	b.n	35c40 <__aeabi_dsub+0x498>
   35a74:	1c73      	adds	r3, r6, #1
   35a76:	469c      	mov	ip, r3
   35a78:	055b      	lsls	r3, r3, #21
   35a7a:	0d5b      	lsrs	r3, r3, #21
   35a7c:	2b01      	cmp	r3, #1
   35a7e:	dc00      	bgt.n	35a82 <__aeabi_dsub+0x2da>
   35a80:	e09f      	b.n	35bc2 <__aeabi_dsub+0x41a>
   35a82:	4b1a      	ldr	r3, [pc, #104]	; (35aec <__aeabi_dsub+0x344>)
   35a84:	459c      	cmp	ip, r3
   35a86:	d100      	bne.n	35a8a <__aeabi_dsub+0x2e2>
   35a88:	e0c5      	b.n	35c16 <__aeabi_dsub+0x46e>
   35a8a:	4452      	add	r2, sl
   35a8c:	4552      	cmp	r2, sl
   35a8e:	4180      	sbcs	r0, r0
   35a90:	1864      	adds	r4, r4, r1
   35a92:	4240      	negs	r0, r0
   35a94:	1824      	adds	r4, r4, r0
   35a96:	07e7      	lsls	r7, r4, #31
   35a98:	0852      	lsrs	r2, r2, #1
   35a9a:	4317      	orrs	r7, r2
   35a9c:	0864      	lsrs	r4, r4, #1
   35a9e:	4666      	mov	r6, ip
   35aa0:	e708      	b.n	358b4 <__aeabi_dsub+0x10c>
   35aa2:	4812      	ldr	r0, [pc, #72]	; (35aec <__aeabi_dsub+0x344>)
   35aa4:	4285      	cmp	r5, r0
   35aa6:	d100      	bne.n	35aaa <__aeabi_dsub+0x302>
   35aa8:	e085      	b.n	35bb6 <__aeabi_dsub+0x40e>
   35aaa:	001d      	movs	r5, r3
   35aac:	e6bc      	b.n	35828 <__aeabi_dsub+0x80>
   35aae:	0029      	movs	r1, r5
   35ab0:	3e1f      	subs	r6, #31
   35ab2:	40f1      	lsrs	r1, r6
   35ab4:	2b20      	cmp	r3, #32
   35ab6:	d100      	bne.n	35aba <__aeabi_dsub+0x312>
   35ab8:	e07f      	b.n	35bba <__aeabi_dsub+0x412>
   35aba:	2240      	movs	r2, #64	; 0x40
   35abc:	1ad3      	subs	r3, r2, r3
   35abe:	409d      	lsls	r5, r3
   35ac0:	432f      	orrs	r7, r5
   35ac2:	1e7d      	subs	r5, r7, #1
   35ac4:	41af      	sbcs	r7, r5
   35ac6:	2400      	movs	r4, #0
   35ac8:	430f      	orrs	r7, r1
   35aca:	2600      	movs	r6, #0
   35acc:	e78e      	b.n	359ec <__aeabi_dsub+0x244>
   35ace:	002b      	movs	r3, r5
   35ad0:	000f      	movs	r7, r1
   35ad2:	3b20      	subs	r3, #32
   35ad4:	40df      	lsrs	r7, r3
   35ad6:	2d20      	cmp	r5, #32
   35ad8:	d071      	beq.n	35bbe <__aeabi_dsub+0x416>
   35ada:	2340      	movs	r3, #64	; 0x40
   35adc:	1b5d      	subs	r5, r3, r5
   35ade:	40a9      	lsls	r1, r5
   35ae0:	430a      	orrs	r2, r1
   35ae2:	1e51      	subs	r1, r2, #1
   35ae4:	418a      	sbcs	r2, r1
   35ae6:	2100      	movs	r1, #0
   35ae8:	4317      	orrs	r7, r2
   35aea:	e6af      	b.n	3584c <__aeabi_dsub+0xa4>
   35aec:	000007ff 	.word	0x000007ff
   35af0:	ff7fffff 	.word	0xff7fffff
   35af4:	800fffff 	.word	0x800fffff
   35af8:	2e00      	cmp	r6, #0
   35afa:	d03e      	beq.n	35b7a <__aeabi_dsub+0x3d2>
   35afc:	4eb3      	ldr	r6, [pc, #716]	; (35dcc <__aeabi_dsub+0x624>)
   35afe:	45b4      	cmp	ip, r6
   35b00:	d045      	beq.n	35b8e <__aeabi_dsub+0x3e6>
   35b02:	2680      	movs	r6, #128	; 0x80
   35b04:	0436      	lsls	r6, r6, #16
   35b06:	426d      	negs	r5, r5
   35b08:	4334      	orrs	r4, r6
   35b0a:	2d38      	cmp	r5, #56	; 0x38
   35b0c:	dd00      	ble.n	35b10 <__aeabi_dsub+0x368>
   35b0e:	e0a8      	b.n	35c62 <__aeabi_dsub+0x4ba>
   35b10:	2d1f      	cmp	r5, #31
   35b12:	dd00      	ble.n	35b16 <__aeabi_dsub+0x36e>
   35b14:	e11f      	b.n	35d56 <__aeabi_dsub+0x5ae>
   35b16:	2620      	movs	r6, #32
   35b18:	0027      	movs	r7, r4
   35b1a:	4650      	mov	r0, sl
   35b1c:	1b76      	subs	r6, r6, r5
   35b1e:	40b7      	lsls	r7, r6
   35b20:	40e8      	lsrs	r0, r5
   35b22:	4307      	orrs	r7, r0
   35b24:	4650      	mov	r0, sl
   35b26:	40b0      	lsls	r0, r6
   35b28:	1e46      	subs	r6, r0, #1
   35b2a:	41b0      	sbcs	r0, r6
   35b2c:	40ec      	lsrs	r4, r5
   35b2e:	4338      	orrs	r0, r7
   35b30:	1a17      	subs	r7, r2, r0
   35b32:	42ba      	cmp	r2, r7
   35b34:	4192      	sbcs	r2, r2
   35b36:	1b0c      	subs	r4, r1, r4
   35b38:	4252      	negs	r2, r2
   35b3a:	1aa4      	subs	r4, r4, r2
   35b3c:	4666      	mov	r6, ip
   35b3e:	4698      	mov	r8, r3
   35b40:	e68b      	b.n	3585a <__aeabi_dsub+0xb2>
   35b42:	4664      	mov	r4, ip
   35b44:	4667      	mov	r7, ip
   35b46:	432c      	orrs	r4, r5
   35b48:	d000      	beq.n	35b4c <__aeabi_dsub+0x3a4>
   35b4a:	e68b      	b.n	35864 <__aeabi_dsub+0xbc>
   35b4c:	2500      	movs	r5, #0
   35b4e:	2600      	movs	r6, #0
   35b50:	2700      	movs	r7, #0
   35b52:	e6ea      	b.n	3592a <__aeabi_dsub+0x182>
   35b54:	001e      	movs	r6, r3
   35b56:	e6ad      	b.n	358b4 <__aeabi_dsub+0x10c>
   35b58:	2b1f      	cmp	r3, #31
   35b5a:	dc60      	bgt.n	35c1e <__aeabi_dsub+0x476>
   35b5c:	2720      	movs	r7, #32
   35b5e:	1af8      	subs	r0, r7, r3
   35b60:	000f      	movs	r7, r1
   35b62:	4684      	mov	ip, r0
   35b64:	4087      	lsls	r7, r0
   35b66:	0010      	movs	r0, r2
   35b68:	40d8      	lsrs	r0, r3
   35b6a:	4307      	orrs	r7, r0
   35b6c:	4660      	mov	r0, ip
   35b6e:	4082      	lsls	r2, r0
   35b70:	1e50      	subs	r0, r2, #1
   35b72:	4182      	sbcs	r2, r0
   35b74:	40d9      	lsrs	r1, r3
   35b76:	4317      	orrs	r7, r2
   35b78:	e6f5      	b.n	35966 <__aeabi_dsub+0x1be>
   35b7a:	0026      	movs	r6, r4
   35b7c:	4650      	mov	r0, sl
   35b7e:	4306      	orrs	r6, r0
   35b80:	d005      	beq.n	35b8e <__aeabi_dsub+0x3e6>
   35b82:	43ed      	mvns	r5, r5
   35b84:	2d00      	cmp	r5, #0
   35b86:	d0d3      	beq.n	35b30 <__aeabi_dsub+0x388>
   35b88:	4e90      	ldr	r6, [pc, #576]	; (35dcc <__aeabi_dsub+0x624>)
   35b8a:	45b4      	cmp	ip, r6
   35b8c:	d1bd      	bne.n	35b0a <__aeabi_dsub+0x362>
   35b8e:	000c      	movs	r4, r1
   35b90:	0017      	movs	r7, r2
   35b92:	4666      	mov	r6, ip
   35b94:	4698      	mov	r8, r3
   35b96:	e68d      	b.n	358b4 <__aeabi_dsub+0x10c>
   35b98:	488c      	ldr	r0, [pc, #560]	; (35dcc <__aeabi_dsub+0x624>)
   35b9a:	4283      	cmp	r3, r0
   35b9c:	d00b      	beq.n	35bb6 <__aeabi_dsub+0x40e>
   35b9e:	4663      	mov	r3, ip
   35ba0:	e6d9      	b.n	35956 <__aeabi_dsub+0x1ae>
   35ba2:	2d00      	cmp	r5, #0
   35ba4:	d000      	beq.n	35ba8 <__aeabi_dsub+0x400>
   35ba6:	e096      	b.n	35cd6 <__aeabi_dsub+0x52e>
   35ba8:	0008      	movs	r0, r1
   35baa:	4310      	orrs	r0, r2
   35bac:	d100      	bne.n	35bb0 <__aeabi_dsub+0x408>
   35bae:	e0e2      	b.n	35d76 <__aeabi_dsub+0x5ce>
   35bb0:	000c      	movs	r4, r1
   35bb2:	0017      	movs	r7, r2
   35bb4:	4698      	mov	r8, r3
   35bb6:	4e85      	ldr	r6, [pc, #532]	; (35dcc <__aeabi_dsub+0x624>)
   35bb8:	e67c      	b.n	358b4 <__aeabi_dsub+0x10c>
   35bba:	2500      	movs	r5, #0
   35bbc:	e780      	b.n	35ac0 <__aeabi_dsub+0x318>
   35bbe:	2100      	movs	r1, #0
   35bc0:	e78e      	b.n	35ae0 <__aeabi_dsub+0x338>
   35bc2:	0023      	movs	r3, r4
   35bc4:	4650      	mov	r0, sl
   35bc6:	4303      	orrs	r3, r0
   35bc8:	2e00      	cmp	r6, #0
   35bca:	d000      	beq.n	35bce <__aeabi_dsub+0x426>
   35bcc:	e0a8      	b.n	35d20 <__aeabi_dsub+0x578>
   35bce:	2b00      	cmp	r3, #0
   35bd0:	d100      	bne.n	35bd4 <__aeabi_dsub+0x42c>
   35bd2:	e0de      	b.n	35d92 <__aeabi_dsub+0x5ea>
   35bd4:	000b      	movs	r3, r1
   35bd6:	4313      	orrs	r3, r2
   35bd8:	d100      	bne.n	35bdc <__aeabi_dsub+0x434>
   35bda:	e66b      	b.n	358b4 <__aeabi_dsub+0x10c>
   35bdc:	4452      	add	r2, sl
   35bde:	4552      	cmp	r2, sl
   35be0:	4180      	sbcs	r0, r0
   35be2:	1864      	adds	r4, r4, r1
   35be4:	4240      	negs	r0, r0
   35be6:	1824      	adds	r4, r4, r0
   35be8:	0017      	movs	r7, r2
   35bea:	0223      	lsls	r3, r4, #8
   35bec:	d400      	bmi.n	35bf0 <__aeabi_dsub+0x448>
   35bee:	e6fd      	b.n	359ec <__aeabi_dsub+0x244>
   35bf0:	4b77      	ldr	r3, [pc, #476]	; (35dd0 <__aeabi_dsub+0x628>)
   35bf2:	4666      	mov	r6, ip
   35bf4:	401c      	ands	r4, r3
   35bf6:	e65d      	b.n	358b4 <__aeabi_dsub+0x10c>
   35bf8:	0025      	movs	r5, r4
   35bfa:	4650      	mov	r0, sl
   35bfc:	4305      	orrs	r5, r0
   35bfe:	2e00      	cmp	r6, #0
   35c00:	d1cf      	bne.n	35ba2 <__aeabi_dsub+0x3fa>
   35c02:	2d00      	cmp	r5, #0
   35c04:	d14f      	bne.n	35ca6 <__aeabi_dsub+0x4fe>
   35c06:	000c      	movs	r4, r1
   35c08:	4314      	orrs	r4, r2
   35c0a:	d100      	bne.n	35c0e <__aeabi_dsub+0x466>
   35c0c:	e0a0      	b.n	35d50 <__aeabi_dsub+0x5a8>
   35c0e:	000c      	movs	r4, r1
   35c10:	0017      	movs	r7, r2
   35c12:	4698      	mov	r8, r3
   35c14:	e64e      	b.n	358b4 <__aeabi_dsub+0x10c>
   35c16:	4666      	mov	r6, ip
   35c18:	2400      	movs	r4, #0
   35c1a:	2700      	movs	r7, #0
   35c1c:	e685      	b.n	3592a <__aeabi_dsub+0x182>
   35c1e:	001f      	movs	r7, r3
   35c20:	0008      	movs	r0, r1
   35c22:	3f20      	subs	r7, #32
   35c24:	40f8      	lsrs	r0, r7
   35c26:	0007      	movs	r7, r0
   35c28:	2b20      	cmp	r3, #32
   35c2a:	d100      	bne.n	35c2e <__aeabi_dsub+0x486>
   35c2c:	e08e      	b.n	35d4c <__aeabi_dsub+0x5a4>
   35c2e:	2040      	movs	r0, #64	; 0x40
   35c30:	1ac3      	subs	r3, r0, r3
   35c32:	4099      	lsls	r1, r3
   35c34:	430a      	orrs	r2, r1
   35c36:	1e51      	subs	r1, r2, #1
   35c38:	418a      	sbcs	r2, r1
   35c3a:	2100      	movs	r1, #0
   35c3c:	4317      	orrs	r7, r2
   35c3e:	e692      	b.n	35966 <__aeabi_dsub+0x1be>
   35c40:	2e00      	cmp	r6, #0
   35c42:	d114      	bne.n	35c6e <__aeabi_dsub+0x4c6>
   35c44:	0026      	movs	r6, r4
   35c46:	4650      	mov	r0, sl
   35c48:	4306      	orrs	r6, r0
   35c4a:	d062      	beq.n	35d12 <__aeabi_dsub+0x56a>
   35c4c:	43db      	mvns	r3, r3
   35c4e:	2b00      	cmp	r3, #0
   35c50:	d15c      	bne.n	35d0c <__aeabi_dsub+0x564>
   35c52:	1887      	adds	r7, r0, r2
   35c54:	4297      	cmp	r7, r2
   35c56:	4192      	sbcs	r2, r2
   35c58:	1864      	adds	r4, r4, r1
   35c5a:	4252      	negs	r2, r2
   35c5c:	18a4      	adds	r4, r4, r2
   35c5e:	4666      	mov	r6, ip
   35c60:	e687      	b.n	35972 <__aeabi_dsub+0x1ca>
   35c62:	4650      	mov	r0, sl
   35c64:	4320      	orrs	r0, r4
   35c66:	1e44      	subs	r4, r0, #1
   35c68:	41a0      	sbcs	r0, r4
   35c6a:	2400      	movs	r4, #0
   35c6c:	e760      	b.n	35b30 <__aeabi_dsub+0x388>
   35c6e:	4e57      	ldr	r6, [pc, #348]	; (35dcc <__aeabi_dsub+0x624>)
   35c70:	45b4      	cmp	ip, r6
   35c72:	d04e      	beq.n	35d12 <__aeabi_dsub+0x56a>
   35c74:	2680      	movs	r6, #128	; 0x80
   35c76:	0436      	lsls	r6, r6, #16
   35c78:	425b      	negs	r3, r3
   35c7a:	4334      	orrs	r4, r6
   35c7c:	2b38      	cmp	r3, #56	; 0x38
   35c7e:	dd00      	ble.n	35c82 <__aeabi_dsub+0x4da>
   35c80:	e07f      	b.n	35d82 <__aeabi_dsub+0x5da>
   35c82:	2b1f      	cmp	r3, #31
   35c84:	dd00      	ble.n	35c88 <__aeabi_dsub+0x4e0>
   35c86:	e08b      	b.n	35da0 <__aeabi_dsub+0x5f8>
   35c88:	2620      	movs	r6, #32
   35c8a:	0027      	movs	r7, r4
   35c8c:	4650      	mov	r0, sl
   35c8e:	1af6      	subs	r6, r6, r3
   35c90:	40b7      	lsls	r7, r6
   35c92:	40d8      	lsrs	r0, r3
   35c94:	4307      	orrs	r7, r0
   35c96:	4650      	mov	r0, sl
   35c98:	40b0      	lsls	r0, r6
   35c9a:	1e46      	subs	r6, r0, #1
   35c9c:	41b0      	sbcs	r0, r6
   35c9e:	4307      	orrs	r7, r0
   35ca0:	40dc      	lsrs	r4, r3
   35ca2:	18bf      	adds	r7, r7, r2
   35ca4:	e7d6      	b.n	35c54 <__aeabi_dsub+0x4ac>
   35ca6:	000d      	movs	r5, r1
   35ca8:	4315      	orrs	r5, r2
   35caa:	d100      	bne.n	35cae <__aeabi_dsub+0x506>
   35cac:	e602      	b.n	358b4 <__aeabi_dsub+0x10c>
   35cae:	4650      	mov	r0, sl
   35cb0:	1a80      	subs	r0, r0, r2
   35cb2:	4582      	cmp	sl, r0
   35cb4:	41bf      	sbcs	r7, r7
   35cb6:	1a65      	subs	r5, r4, r1
   35cb8:	427f      	negs	r7, r7
   35cba:	1bed      	subs	r5, r5, r7
   35cbc:	4684      	mov	ip, r0
   35cbe:	0228      	lsls	r0, r5, #8
   35cc0:	d400      	bmi.n	35cc4 <__aeabi_dsub+0x51c>
   35cc2:	e68d      	b.n	359e0 <__aeabi_dsub+0x238>
   35cc4:	4650      	mov	r0, sl
   35cc6:	1a17      	subs	r7, r2, r0
   35cc8:	42ba      	cmp	r2, r7
   35cca:	4192      	sbcs	r2, r2
   35ccc:	1b0c      	subs	r4, r1, r4
   35cce:	4252      	negs	r2, r2
   35cd0:	1aa4      	subs	r4, r4, r2
   35cd2:	4698      	mov	r8, r3
   35cd4:	e5ee      	b.n	358b4 <__aeabi_dsub+0x10c>
   35cd6:	000d      	movs	r5, r1
   35cd8:	4315      	orrs	r5, r2
   35cda:	d100      	bne.n	35cde <__aeabi_dsub+0x536>
   35cdc:	e76b      	b.n	35bb6 <__aeabi_dsub+0x40e>
   35cde:	4650      	mov	r0, sl
   35ce0:	0767      	lsls	r7, r4, #29
   35ce2:	08c0      	lsrs	r0, r0, #3
   35ce4:	4307      	orrs	r7, r0
   35ce6:	2080      	movs	r0, #128	; 0x80
   35ce8:	08e4      	lsrs	r4, r4, #3
   35cea:	0300      	lsls	r0, r0, #12
   35cec:	4204      	tst	r4, r0
   35cee:	d007      	beq.n	35d00 <__aeabi_dsub+0x558>
   35cf0:	08cd      	lsrs	r5, r1, #3
   35cf2:	4205      	tst	r5, r0
   35cf4:	d104      	bne.n	35d00 <__aeabi_dsub+0x558>
   35cf6:	002c      	movs	r4, r5
   35cf8:	4698      	mov	r8, r3
   35cfa:	08d7      	lsrs	r7, r2, #3
   35cfc:	0749      	lsls	r1, r1, #29
   35cfe:	430f      	orrs	r7, r1
   35d00:	0f7b      	lsrs	r3, r7, #29
   35d02:	00e4      	lsls	r4, r4, #3
   35d04:	431c      	orrs	r4, r3
   35d06:	00ff      	lsls	r7, r7, #3
   35d08:	4e30      	ldr	r6, [pc, #192]	; (35dcc <__aeabi_dsub+0x624>)
   35d0a:	e5d3      	b.n	358b4 <__aeabi_dsub+0x10c>
   35d0c:	4e2f      	ldr	r6, [pc, #188]	; (35dcc <__aeabi_dsub+0x624>)
   35d0e:	45b4      	cmp	ip, r6
   35d10:	d1b4      	bne.n	35c7c <__aeabi_dsub+0x4d4>
   35d12:	000c      	movs	r4, r1
   35d14:	0017      	movs	r7, r2
   35d16:	4666      	mov	r6, ip
   35d18:	e5cc      	b.n	358b4 <__aeabi_dsub+0x10c>
   35d1a:	2700      	movs	r7, #0
   35d1c:	2400      	movs	r4, #0
   35d1e:	e5e8      	b.n	358f2 <__aeabi_dsub+0x14a>
   35d20:	2b00      	cmp	r3, #0
   35d22:	d039      	beq.n	35d98 <__aeabi_dsub+0x5f0>
   35d24:	000b      	movs	r3, r1
   35d26:	4313      	orrs	r3, r2
   35d28:	d100      	bne.n	35d2c <__aeabi_dsub+0x584>
   35d2a:	e744      	b.n	35bb6 <__aeabi_dsub+0x40e>
   35d2c:	08c0      	lsrs	r0, r0, #3
   35d2e:	0767      	lsls	r7, r4, #29
   35d30:	4307      	orrs	r7, r0
   35d32:	2080      	movs	r0, #128	; 0x80
   35d34:	08e4      	lsrs	r4, r4, #3
   35d36:	0300      	lsls	r0, r0, #12
   35d38:	4204      	tst	r4, r0
   35d3a:	d0e1      	beq.n	35d00 <__aeabi_dsub+0x558>
   35d3c:	08cb      	lsrs	r3, r1, #3
   35d3e:	4203      	tst	r3, r0
   35d40:	d1de      	bne.n	35d00 <__aeabi_dsub+0x558>
   35d42:	08d7      	lsrs	r7, r2, #3
   35d44:	0749      	lsls	r1, r1, #29
   35d46:	430f      	orrs	r7, r1
   35d48:	001c      	movs	r4, r3
   35d4a:	e7d9      	b.n	35d00 <__aeabi_dsub+0x558>
   35d4c:	2100      	movs	r1, #0
   35d4e:	e771      	b.n	35c34 <__aeabi_dsub+0x48c>
   35d50:	2500      	movs	r5, #0
   35d52:	2700      	movs	r7, #0
   35d54:	e5e9      	b.n	3592a <__aeabi_dsub+0x182>
   35d56:	002e      	movs	r6, r5
   35d58:	0027      	movs	r7, r4
   35d5a:	3e20      	subs	r6, #32
   35d5c:	40f7      	lsrs	r7, r6
   35d5e:	2d20      	cmp	r5, #32
   35d60:	d02f      	beq.n	35dc2 <__aeabi_dsub+0x61a>
   35d62:	2640      	movs	r6, #64	; 0x40
   35d64:	1b75      	subs	r5, r6, r5
   35d66:	40ac      	lsls	r4, r5
   35d68:	4650      	mov	r0, sl
   35d6a:	4320      	orrs	r0, r4
   35d6c:	1e44      	subs	r4, r0, #1
   35d6e:	41a0      	sbcs	r0, r4
   35d70:	2400      	movs	r4, #0
   35d72:	4338      	orrs	r0, r7
   35d74:	e6dc      	b.n	35b30 <__aeabi_dsub+0x388>
   35d76:	2480      	movs	r4, #128	; 0x80
   35d78:	2500      	movs	r5, #0
   35d7a:	0324      	lsls	r4, r4, #12
   35d7c:	4e13      	ldr	r6, [pc, #76]	; (35dcc <__aeabi_dsub+0x624>)
   35d7e:	2700      	movs	r7, #0
   35d80:	e5d3      	b.n	3592a <__aeabi_dsub+0x182>
   35d82:	4650      	mov	r0, sl
   35d84:	4320      	orrs	r0, r4
   35d86:	0007      	movs	r7, r0
   35d88:	1e78      	subs	r0, r7, #1
   35d8a:	4187      	sbcs	r7, r0
   35d8c:	2400      	movs	r4, #0
   35d8e:	18bf      	adds	r7, r7, r2
   35d90:	e760      	b.n	35c54 <__aeabi_dsub+0x4ac>
   35d92:	000c      	movs	r4, r1
   35d94:	0017      	movs	r7, r2
   35d96:	e58d      	b.n	358b4 <__aeabi_dsub+0x10c>
   35d98:	000c      	movs	r4, r1
   35d9a:	0017      	movs	r7, r2
   35d9c:	4e0b      	ldr	r6, [pc, #44]	; (35dcc <__aeabi_dsub+0x624>)
   35d9e:	e589      	b.n	358b4 <__aeabi_dsub+0x10c>
   35da0:	001e      	movs	r6, r3
   35da2:	0027      	movs	r7, r4
   35da4:	3e20      	subs	r6, #32
   35da6:	40f7      	lsrs	r7, r6
   35da8:	2b20      	cmp	r3, #32
   35daa:	d00c      	beq.n	35dc6 <__aeabi_dsub+0x61e>
   35dac:	2640      	movs	r6, #64	; 0x40
   35dae:	1af3      	subs	r3, r6, r3
   35db0:	409c      	lsls	r4, r3
   35db2:	4650      	mov	r0, sl
   35db4:	4320      	orrs	r0, r4
   35db6:	1e44      	subs	r4, r0, #1
   35db8:	41a0      	sbcs	r0, r4
   35dba:	4307      	orrs	r7, r0
   35dbc:	2400      	movs	r4, #0
   35dbe:	18bf      	adds	r7, r7, r2
   35dc0:	e748      	b.n	35c54 <__aeabi_dsub+0x4ac>
   35dc2:	2400      	movs	r4, #0
   35dc4:	e7d0      	b.n	35d68 <__aeabi_dsub+0x5c0>
   35dc6:	2400      	movs	r4, #0
   35dc8:	e7f3      	b.n	35db2 <__aeabi_dsub+0x60a>
   35dca:	46c0      	nop			; (mov r8, r8)
   35dcc:	000007ff 	.word	0x000007ff
   35dd0:	ff7fffff 	.word	0xff7fffff

00035dd4 <__aeabi_d2iz>:
   35dd4:	b530      	push	{r4, r5, lr}
   35dd6:	4d13      	ldr	r5, [pc, #76]	; (35e24 <__aeabi_d2iz+0x50>)
   35dd8:	030a      	lsls	r2, r1, #12
   35dda:	004b      	lsls	r3, r1, #1
   35ddc:	0b12      	lsrs	r2, r2, #12
   35dde:	0d5b      	lsrs	r3, r3, #21
   35de0:	0fc9      	lsrs	r1, r1, #31
   35de2:	2400      	movs	r4, #0
   35de4:	42ab      	cmp	r3, r5
   35de6:	dd10      	ble.n	35e0a <__aeabi_d2iz+0x36>
   35de8:	4c0f      	ldr	r4, [pc, #60]	; (35e28 <__aeabi_d2iz+0x54>)
   35dea:	42a3      	cmp	r3, r4
   35dec:	dc0f      	bgt.n	35e0e <__aeabi_d2iz+0x3a>
   35dee:	2480      	movs	r4, #128	; 0x80
   35df0:	4d0e      	ldr	r5, [pc, #56]	; (35e2c <__aeabi_d2iz+0x58>)
   35df2:	0364      	lsls	r4, r4, #13
   35df4:	4322      	orrs	r2, r4
   35df6:	1aed      	subs	r5, r5, r3
   35df8:	2d1f      	cmp	r5, #31
   35dfa:	dd0b      	ble.n	35e14 <__aeabi_d2iz+0x40>
   35dfc:	480c      	ldr	r0, [pc, #48]	; (35e30 <__aeabi_d2iz+0x5c>)
   35dfe:	1ac3      	subs	r3, r0, r3
   35e00:	40da      	lsrs	r2, r3
   35e02:	4254      	negs	r4, r2
   35e04:	2900      	cmp	r1, #0
   35e06:	d100      	bne.n	35e0a <__aeabi_d2iz+0x36>
   35e08:	0014      	movs	r4, r2
   35e0a:	0020      	movs	r0, r4
   35e0c:	bd30      	pop	{r4, r5, pc}
   35e0e:	4b09      	ldr	r3, [pc, #36]	; (35e34 <__aeabi_d2iz+0x60>)
   35e10:	18cc      	adds	r4, r1, r3
   35e12:	e7fa      	b.n	35e0a <__aeabi_d2iz+0x36>
   35e14:	4c08      	ldr	r4, [pc, #32]	; (35e38 <__aeabi_d2iz+0x64>)
   35e16:	40e8      	lsrs	r0, r5
   35e18:	46a4      	mov	ip, r4
   35e1a:	4463      	add	r3, ip
   35e1c:	409a      	lsls	r2, r3
   35e1e:	4302      	orrs	r2, r0
   35e20:	e7ef      	b.n	35e02 <__aeabi_d2iz+0x2e>
   35e22:	46c0      	nop			; (mov r8, r8)
   35e24:	000003fe 	.word	0x000003fe
   35e28:	0000041d 	.word	0x0000041d
   35e2c:	00000433 	.word	0x00000433
   35e30:	00000413 	.word	0x00000413
   35e34:	7fffffff 	.word	0x7fffffff
   35e38:	fffffbed 	.word	0xfffffbed

00035e3c <__aeabi_ui2d>:
   35e3c:	b510      	push	{r4, lr}
   35e3e:	1e04      	subs	r4, r0, #0
   35e40:	d028      	beq.n	35e94 <__aeabi_ui2d+0x58>
   35e42:	f000 f8bf 	bl	35fc4 <__clzsi2>
   35e46:	4b15      	ldr	r3, [pc, #84]	; (35e9c <__aeabi_ui2d+0x60>)
   35e48:	4a15      	ldr	r2, [pc, #84]	; (35ea0 <__aeabi_ui2d+0x64>)
   35e4a:	1a1b      	subs	r3, r3, r0
   35e4c:	1ad2      	subs	r2, r2, r3
   35e4e:	2a1f      	cmp	r2, #31
   35e50:	dd15      	ble.n	35e7e <__aeabi_ui2d+0x42>
   35e52:	4a14      	ldr	r2, [pc, #80]	; (35ea4 <__aeabi_ui2d+0x68>)
   35e54:	1ad2      	subs	r2, r2, r3
   35e56:	4094      	lsls	r4, r2
   35e58:	2200      	movs	r2, #0
   35e5a:	0324      	lsls	r4, r4, #12
   35e5c:	055b      	lsls	r3, r3, #21
   35e5e:	0b24      	lsrs	r4, r4, #12
   35e60:	0d5b      	lsrs	r3, r3, #21
   35e62:	2100      	movs	r1, #0
   35e64:	0010      	movs	r0, r2
   35e66:	0324      	lsls	r4, r4, #12
   35e68:	0d0a      	lsrs	r2, r1, #20
   35e6a:	0b24      	lsrs	r4, r4, #12
   35e6c:	0512      	lsls	r2, r2, #20
   35e6e:	4322      	orrs	r2, r4
   35e70:	4c0d      	ldr	r4, [pc, #52]	; (35ea8 <__aeabi_ui2d+0x6c>)
   35e72:	051b      	lsls	r3, r3, #20
   35e74:	4022      	ands	r2, r4
   35e76:	4313      	orrs	r3, r2
   35e78:	005b      	lsls	r3, r3, #1
   35e7a:	0859      	lsrs	r1, r3, #1
   35e7c:	bd10      	pop	{r4, pc}
   35e7e:	0021      	movs	r1, r4
   35e80:	4091      	lsls	r1, r2
   35e82:	000a      	movs	r2, r1
   35e84:	210b      	movs	r1, #11
   35e86:	1a08      	subs	r0, r1, r0
   35e88:	40c4      	lsrs	r4, r0
   35e8a:	055b      	lsls	r3, r3, #21
   35e8c:	0324      	lsls	r4, r4, #12
   35e8e:	0b24      	lsrs	r4, r4, #12
   35e90:	0d5b      	lsrs	r3, r3, #21
   35e92:	e7e6      	b.n	35e62 <__aeabi_ui2d+0x26>
   35e94:	2300      	movs	r3, #0
   35e96:	2400      	movs	r4, #0
   35e98:	2200      	movs	r2, #0
   35e9a:	e7e2      	b.n	35e62 <__aeabi_ui2d+0x26>
   35e9c:	0000041e 	.word	0x0000041e
   35ea0:	00000433 	.word	0x00000433
   35ea4:	00000413 	.word	0x00000413
   35ea8:	800fffff 	.word	0x800fffff

00035eac <__aeabi_f2d>:
   35eac:	0041      	lsls	r1, r0, #1
   35eae:	0e09      	lsrs	r1, r1, #24
   35eb0:	1c4b      	adds	r3, r1, #1
   35eb2:	b570      	push	{r4, r5, r6, lr}
   35eb4:	b2db      	uxtb	r3, r3
   35eb6:	0246      	lsls	r6, r0, #9
   35eb8:	0a75      	lsrs	r5, r6, #9
   35eba:	0fc4      	lsrs	r4, r0, #31
   35ebc:	2b01      	cmp	r3, #1
   35ebe:	dd14      	ble.n	35eea <__aeabi_f2d+0x3e>
   35ec0:	23e0      	movs	r3, #224	; 0xe0
   35ec2:	009b      	lsls	r3, r3, #2
   35ec4:	076d      	lsls	r5, r5, #29
   35ec6:	0b36      	lsrs	r6, r6, #12
   35ec8:	18cb      	adds	r3, r1, r3
   35eca:	2100      	movs	r1, #0
   35ecc:	0d0a      	lsrs	r2, r1, #20
   35ece:	0028      	movs	r0, r5
   35ed0:	0512      	lsls	r2, r2, #20
   35ed2:	4d1c      	ldr	r5, [pc, #112]	; (35f44 <__aeabi_f2d+0x98>)
   35ed4:	4332      	orrs	r2, r6
   35ed6:	055b      	lsls	r3, r3, #21
   35ed8:	402a      	ands	r2, r5
   35eda:	085b      	lsrs	r3, r3, #1
   35edc:	4313      	orrs	r3, r2
   35ede:	005b      	lsls	r3, r3, #1
   35ee0:	07e4      	lsls	r4, r4, #31
   35ee2:	085b      	lsrs	r3, r3, #1
   35ee4:	4323      	orrs	r3, r4
   35ee6:	0019      	movs	r1, r3
   35ee8:	bd70      	pop	{r4, r5, r6, pc}
   35eea:	2900      	cmp	r1, #0
   35eec:	d114      	bne.n	35f18 <__aeabi_f2d+0x6c>
   35eee:	2d00      	cmp	r5, #0
   35ef0:	d01e      	beq.n	35f30 <__aeabi_f2d+0x84>
   35ef2:	0028      	movs	r0, r5
   35ef4:	f000 f866 	bl	35fc4 <__clzsi2>
   35ef8:	280a      	cmp	r0, #10
   35efa:	dc1c      	bgt.n	35f36 <__aeabi_f2d+0x8a>
   35efc:	230b      	movs	r3, #11
   35efe:	002a      	movs	r2, r5
   35f00:	1a1b      	subs	r3, r3, r0
   35f02:	40da      	lsrs	r2, r3
   35f04:	0003      	movs	r3, r0
   35f06:	3315      	adds	r3, #21
   35f08:	409d      	lsls	r5, r3
   35f0a:	4b0f      	ldr	r3, [pc, #60]	; (35f48 <__aeabi_f2d+0x9c>)
   35f0c:	0312      	lsls	r2, r2, #12
   35f0e:	1a1b      	subs	r3, r3, r0
   35f10:	055b      	lsls	r3, r3, #21
   35f12:	0b16      	lsrs	r6, r2, #12
   35f14:	0d5b      	lsrs	r3, r3, #21
   35f16:	e7d8      	b.n	35eca <__aeabi_f2d+0x1e>
   35f18:	2d00      	cmp	r5, #0
   35f1a:	d006      	beq.n	35f2a <__aeabi_f2d+0x7e>
   35f1c:	0b32      	lsrs	r2, r6, #12
   35f1e:	2680      	movs	r6, #128	; 0x80
   35f20:	0336      	lsls	r6, r6, #12
   35f22:	076d      	lsls	r5, r5, #29
   35f24:	4316      	orrs	r6, r2
   35f26:	4b09      	ldr	r3, [pc, #36]	; (35f4c <__aeabi_f2d+0xa0>)
   35f28:	e7cf      	b.n	35eca <__aeabi_f2d+0x1e>
   35f2a:	4b08      	ldr	r3, [pc, #32]	; (35f4c <__aeabi_f2d+0xa0>)
   35f2c:	2600      	movs	r6, #0
   35f2e:	e7cc      	b.n	35eca <__aeabi_f2d+0x1e>
   35f30:	2300      	movs	r3, #0
   35f32:	2600      	movs	r6, #0
   35f34:	e7c9      	b.n	35eca <__aeabi_f2d+0x1e>
   35f36:	0003      	movs	r3, r0
   35f38:	002a      	movs	r2, r5
   35f3a:	3b0b      	subs	r3, #11
   35f3c:	409a      	lsls	r2, r3
   35f3e:	2500      	movs	r5, #0
   35f40:	e7e3      	b.n	35f0a <__aeabi_f2d+0x5e>
   35f42:	46c0      	nop			; (mov r8, r8)
   35f44:	800fffff 	.word	0x800fffff
   35f48:	00000389 	.word	0x00000389
   35f4c:	000007ff 	.word	0x000007ff

00035f50 <__aeabi_cfrcmple>:
   35f50:	4684      	mov	ip, r0
   35f52:	1c08      	adds	r0, r1, #0
   35f54:	4661      	mov	r1, ip
   35f56:	e7ff      	b.n	35f58 <__aeabi_cfcmpeq>

00035f58 <__aeabi_cfcmpeq>:
   35f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35f5a:	f000 f8b7 	bl	360cc <__lesf2>
   35f5e:	2800      	cmp	r0, #0
   35f60:	d401      	bmi.n	35f66 <__aeabi_cfcmpeq+0xe>
   35f62:	2100      	movs	r1, #0
   35f64:	42c8      	cmn	r0, r1
   35f66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00035f68 <__aeabi_fcmpeq>:
   35f68:	b510      	push	{r4, lr}
   35f6a:	f000 f849 	bl	36000 <__eqsf2>
   35f6e:	4240      	negs	r0, r0
   35f70:	3001      	adds	r0, #1
   35f72:	bd10      	pop	{r4, pc}

00035f74 <__aeabi_fcmplt>:
   35f74:	b510      	push	{r4, lr}
   35f76:	f000 f8a9 	bl	360cc <__lesf2>
   35f7a:	2800      	cmp	r0, #0
   35f7c:	db01      	blt.n	35f82 <__aeabi_fcmplt+0xe>
   35f7e:	2000      	movs	r0, #0
   35f80:	bd10      	pop	{r4, pc}
   35f82:	2001      	movs	r0, #1
   35f84:	bd10      	pop	{r4, pc}
   35f86:	46c0      	nop			; (mov r8, r8)

00035f88 <__aeabi_fcmple>:
   35f88:	b510      	push	{r4, lr}
   35f8a:	f000 f89f 	bl	360cc <__lesf2>
   35f8e:	2800      	cmp	r0, #0
   35f90:	dd01      	ble.n	35f96 <__aeabi_fcmple+0xe>
   35f92:	2000      	movs	r0, #0
   35f94:	bd10      	pop	{r4, pc}
   35f96:	2001      	movs	r0, #1
   35f98:	bd10      	pop	{r4, pc}
   35f9a:	46c0      	nop			; (mov r8, r8)

00035f9c <__aeabi_fcmpgt>:
   35f9c:	b510      	push	{r4, lr}
   35f9e:	f000 f855 	bl	3604c <__gesf2>
   35fa2:	2800      	cmp	r0, #0
   35fa4:	dc01      	bgt.n	35faa <__aeabi_fcmpgt+0xe>
   35fa6:	2000      	movs	r0, #0
   35fa8:	bd10      	pop	{r4, pc}
   35faa:	2001      	movs	r0, #1
   35fac:	bd10      	pop	{r4, pc}
   35fae:	46c0      	nop			; (mov r8, r8)

00035fb0 <__aeabi_fcmpge>:
   35fb0:	b510      	push	{r4, lr}
   35fb2:	f000 f84b 	bl	3604c <__gesf2>
   35fb6:	2800      	cmp	r0, #0
   35fb8:	da01      	bge.n	35fbe <__aeabi_fcmpge+0xe>
   35fba:	2000      	movs	r0, #0
   35fbc:	bd10      	pop	{r4, pc}
   35fbe:	2001      	movs	r0, #1
   35fc0:	bd10      	pop	{r4, pc}
   35fc2:	46c0      	nop			; (mov r8, r8)

00035fc4 <__clzsi2>:
   35fc4:	211c      	movs	r1, #28
   35fc6:	2301      	movs	r3, #1
   35fc8:	041b      	lsls	r3, r3, #16
   35fca:	4298      	cmp	r0, r3
   35fcc:	d301      	bcc.n	35fd2 <__clzsi2+0xe>
   35fce:	0c00      	lsrs	r0, r0, #16
   35fd0:	3910      	subs	r1, #16
   35fd2:	0a1b      	lsrs	r3, r3, #8
   35fd4:	4298      	cmp	r0, r3
   35fd6:	d301      	bcc.n	35fdc <__clzsi2+0x18>
   35fd8:	0a00      	lsrs	r0, r0, #8
   35fda:	3908      	subs	r1, #8
   35fdc:	091b      	lsrs	r3, r3, #4
   35fde:	4298      	cmp	r0, r3
   35fe0:	d301      	bcc.n	35fe6 <__clzsi2+0x22>
   35fe2:	0900      	lsrs	r0, r0, #4
   35fe4:	3904      	subs	r1, #4
   35fe6:	a202      	add	r2, pc, #8	; (adr r2, 35ff0 <__clzsi2+0x2c>)
   35fe8:	5c10      	ldrb	r0, [r2, r0]
   35fea:	1840      	adds	r0, r0, r1
   35fec:	4770      	bx	lr
   35fee:	46c0      	nop			; (mov r8, r8)
   35ff0:	02020304 	.word	0x02020304
   35ff4:	01010101 	.word	0x01010101
	...

00036000 <__eqsf2>:
   36000:	b570      	push	{r4, r5, r6, lr}
   36002:	0042      	lsls	r2, r0, #1
   36004:	0245      	lsls	r5, r0, #9
   36006:	024e      	lsls	r6, r1, #9
   36008:	004c      	lsls	r4, r1, #1
   3600a:	0fc3      	lsrs	r3, r0, #31
   3600c:	0a6d      	lsrs	r5, r5, #9
   3600e:	0e12      	lsrs	r2, r2, #24
   36010:	0a76      	lsrs	r6, r6, #9
   36012:	0e24      	lsrs	r4, r4, #24
   36014:	0fc9      	lsrs	r1, r1, #31
   36016:	2001      	movs	r0, #1
   36018:	2aff      	cmp	r2, #255	; 0xff
   3601a:	d006      	beq.n	3602a <__eqsf2+0x2a>
   3601c:	2cff      	cmp	r4, #255	; 0xff
   3601e:	d003      	beq.n	36028 <__eqsf2+0x28>
   36020:	42a2      	cmp	r2, r4
   36022:	d101      	bne.n	36028 <__eqsf2+0x28>
   36024:	42b5      	cmp	r5, r6
   36026:	d006      	beq.n	36036 <__eqsf2+0x36>
   36028:	bd70      	pop	{r4, r5, r6, pc}
   3602a:	2d00      	cmp	r5, #0
   3602c:	d1fc      	bne.n	36028 <__eqsf2+0x28>
   3602e:	2cff      	cmp	r4, #255	; 0xff
   36030:	d1fa      	bne.n	36028 <__eqsf2+0x28>
   36032:	2e00      	cmp	r6, #0
   36034:	d1f8      	bne.n	36028 <__eqsf2+0x28>
   36036:	428b      	cmp	r3, r1
   36038:	d006      	beq.n	36048 <__eqsf2+0x48>
   3603a:	2001      	movs	r0, #1
   3603c:	2a00      	cmp	r2, #0
   3603e:	d1f3      	bne.n	36028 <__eqsf2+0x28>
   36040:	0028      	movs	r0, r5
   36042:	1e45      	subs	r5, r0, #1
   36044:	41a8      	sbcs	r0, r5
   36046:	e7ef      	b.n	36028 <__eqsf2+0x28>
   36048:	2000      	movs	r0, #0
   3604a:	e7ed      	b.n	36028 <__eqsf2+0x28>

0003604c <__gesf2>:
   3604c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3604e:	0042      	lsls	r2, r0, #1
   36050:	0245      	lsls	r5, r0, #9
   36052:	024c      	lsls	r4, r1, #9
   36054:	0fc3      	lsrs	r3, r0, #31
   36056:	0048      	lsls	r0, r1, #1
   36058:	0a6d      	lsrs	r5, r5, #9
   3605a:	0e12      	lsrs	r2, r2, #24
   3605c:	0a64      	lsrs	r4, r4, #9
   3605e:	0e00      	lsrs	r0, r0, #24
   36060:	0fc9      	lsrs	r1, r1, #31
   36062:	2aff      	cmp	r2, #255	; 0xff
   36064:	d01e      	beq.n	360a4 <__gesf2+0x58>
   36066:	28ff      	cmp	r0, #255	; 0xff
   36068:	d021      	beq.n	360ae <__gesf2+0x62>
   3606a:	2a00      	cmp	r2, #0
   3606c:	d10a      	bne.n	36084 <__gesf2+0x38>
   3606e:	426e      	negs	r6, r5
   36070:	416e      	adcs	r6, r5
   36072:	b2f6      	uxtb	r6, r6
   36074:	2800      	cmp	r0, #0
   36076:	d10f      	bne.n	36098 <__gesf2+0x4c>
   36078:	2c00      	cmp	r4, #0
   3607a:	d10d      	bne.n	36098 <__gesf2+0x4c>
   3607c:	2000      	movs	r0, #0
   3607e:	2d00      	cmp	r5, #0
   36080:	d009      	beq.n	36096 <__gesf2+0x4a>
   36082:	e005      	b.n	36090 <__gesf2+0x44>
   36084:	2800      	cmp	r0, #0
   36086:	d101      	bne.n	3608c <__gesf2+0x40>
   36088:	2c00      	cmp	r4, #0
   3608a:	d001      	beq.n	36090 <__gesf2+0x44>
   3608c:	428b      	cmp	r3, r1
   3608e:	d011      	beq.n	360b4 <__gesf2+0x68>
   36090:	2101      	movs	r1, #1
   36092:	4258      	negs	r0, r3
   36094:	4308      	orrs	r0, r1
   36096:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36098:	2e00      	cmp	r6, #0
   3609a:	d0f7      	beq.n	3608c <__gesf2+0x40>
   3609c:	2001      	movs	r0, #1
   3609e:	3901      	subs	r1, #1
   360a0:	4308      	orrs	r0, r1
   360a2:	e7f8      	b.n	36096 <__gesf2+0x4a>
   360a4:	2d00      	cmp	r5, #0
   360a6:	d0de      	beq.n	36066 <__gesf2+0x1a>
   360a8:	2002      	movs	r0, #2
   360aa:	4240      	negs	r0, r0
   360ac:	e7f3      	b.n	36096 <__gesf2+0x4a>
   360ae:	2c00      	cmp	r4, #0
   360b0:	d0db      	beq.n	3606a <__gesf2+0x1e>
   360b2:	e7f9      	b.n	360a8 <__gesf2+0x5c>
   360b4:	4282      	cmp	r2, r0
   360b6:	dceb      	bgt.n	36090 <__gesf2+0x44>
   360b8:	db04      	blt.n	360c4 <__gesf2+0x78>
   360ba:	42a5      	cmp	r5, r4
   360bc:	d8e8      	bhi.n	36090 <__gesf2+0x44>
   360be:	2000      	movs	r0, #0
   360c0:	42a5      	cmp	r5, r4
   360c2:	d2e8      	bcs.n	36096 <__gesf2+0x4a>
   360c4:	2101      	movs	r1, #1
   360c6:	1e58      	subs	r0, r3, #1
   360c8:	4308      	orrs	r0, r1
   360ca:	e7e4      	b.n	36096 <__gesf2+0x4a>

000360cc <__lesf2>:
   360cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   360ce:	0042      	lsls	r2, r0, #1
   360d0:	024d      	lsls	r5, r1, #9
   360d2:	004c      	lsls	r4, r1, #1
   360d4:	0246      	lsls	r6, r0, #9
   360d6:	0a76      	lsrs	r6, r6, #9
   360d8:	0e12      	lsrs	r2, r2, #24
   360da:	0fc3      	lsrs	r3, r0, #31
   360dc:	0a6d      	lsrs	r5, r5, #9
   360de:	0e24      	lsrs	r4, r4, #24
   360e0:	0fc9      	lsrs	r1, r1, #31
   360e2:	2aff      	cmp	r2, #255	; 0xff
   360e4:	d016      	beq.n	36114 <__lesf2+0x48>
   360e6:	2cff      	cmp	r4, #255	; 0xff
   360e8:	d018      	beq.n	3611c <__lesf2+0x50>
   360ea:	2a00      	cmp	r2, #0
   360ec:	d10a      	bne.n	36104 <__lesf2+0x38>
   360ee:	4270      	negs	r0, r6
   360f0:	4170      	adcs	r0, r6
   360f2:	b2c0      	uxtb	r0, r0
   360f4:	2c00      	cmp	r4, #0
   360f6:	d015      	beq.n	36124 <__lesf2+0x58>
   360f8:	2800      	cmp	r0, #0
   360fa:	d005      	beq.n	36108 <__lesf2+0x3c>
   360fc:	2001      	movs	r0, #1
   360fe:	3901      	subs	r1, #1
   36100:	4308      	orrs	r0, r1
   36102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36104:	2c00      	cmp	r4, #0
   36106:	d013      	beq.n	36130 <__lesf2+0x64>
   36108:	4299      	cmp	r1, r3
   3610a:	d014      	beq.n	36136 <__lesf2+0x6a>
   3610c:	2001      	movs	r0, #1
   3610e:	425b      	negs	r3, r3
   36110:	4318      	orrs	r0, r3
   36112:	e7f6      	b.n	36102 <__lesf2+0x36>
   36114:	2002      	movs	r0, #2
   36116:	2e00      	cmp	r6, #0
   36118:	d1f3      	bne.n	36102 <__lesf2+0x36>
   3611a:	e7e4      	b.n	360e6 <__lesf2+0x1a>
   3611c:	2002      	movs	r0, #2
   3611e:	2d00      	cmp	r5, #0
   36120:	d1ef      	bne.n	36102 <__lesf2+0x36>
   36122:	e7e2      	b.n	360ea <__lesf2+0x1e>
   36124:	2d00      	cmp	r5, #0
   36126:	d1e7      	bne.n	360f8 <__lesf2+0x2c>
   36128:	2000      	movs	r0, #0
   3612a:	2e00      	cmp	r6, #0
   3612c:	d0e9      	beq.n	36102 <__lesf2+0x36>
   3612e:	e7ed      	b.n	3610c <__lesf2+0x40>
   36130:	2d00      	cmp	r5, #0
   36132:	d1e9      	bne.n	36108 <__lesf2+0x3c>
   36134:	e7ea      	b.n	3610c <__lesf2+0x40>
   36136:	42a2      	cmp	r2, r4
   36138:	dc06      	bgt.n	36148 <__lesf2+0x7c>
   3613a:	dbdf      	blt.n	360fc <__lesf2+0x30>
   3613c:	42ae      	cmp	r6, r5
   3613e:	d803      	bhi.n	36148 <__lesf2+0x7c>
   36140:	2000      	movs	r0, #0
   36142:	42ae      	cmp	r6, r5
   36144:	d3da      	bcc.n	360fc <__lesf2+0x30>
   36146:	e7dc      	b.n	36102 <__lesf2+0x36>
   36148:	2001      	movs	r0, #1
   3614a:	4249      	negs	r1, r1
   3614c:	4308      	orrs	r0, r1
   3614e:	e7d8      	b.n	36102 <__lesf2+0x36>

00036150 <atoi>:
   36150:	b510      	push	{r4, lr}
   36152:	220a      	movs	r2, #10
   36154:	2100      	movs	r1, #0
   36156:	f000 faff 	bl	36758 <strtol>
   3615a:	bd10      	pop	{r4, pc}

0003615c <__libc_init_array>:
   3615c:	b570      	push	{r4, r5, r6, lr}
   3615e:	2600      	movs	r6, #0
   36160:	4d0c      	ldr	r5, [pc, #48]	; (36194 <__libc_init_array+0x38>)
   36162:	4c0d      	ldr	r4, [pc, #52]	; (36198 <__libc_init_array+0x3c>)
   36164:	1b64      	subs	r4, r4, r5
   36166:	10a4      	asrs	r4, r4, #2
   36168:	42a6      	cmp	r6, r4
   3616a:	d109      	bne.n	36180 <__libc_init_array+0x24>
   3616c:	2600      	movs	r6, #0
   3616e:	f005 fe47 	bl	3be00 <_init>
   36172:	4d0a      	ldr	r5, [pc, #40]	; (3619c <__libc_init_array+0x40>)
   36174:	4c0a      	ldr	r4, [pc, #40]	; (361a0 <__libc_init_array+0x44>)
   36176:	1b64      	subs	r4, r4, r5
   36178:	10a4      	asrs	r4, r4, #2
   3617a:	42a6      	cmp	r6, r4
   3617c:	d105      	bne.n	3618a <__libc_init_array+0x2e>
   3617e:	bd70      	pop	{r4, r5, r6, pc}
   36180:	00b3      	lsls	r3, r6, #2
   36182:	58eb      	ldr	r3, [r5, r3]
   36184:	4798      	blx	r3
   36186:	3601      	adds	r6, #1
   36188:	e7ee      	b.n	36168 <__libc_init_array+0xc>
   3618a:	00b3      	lsls	r3, r6, #2
   3618c:	58eb      	ldr	r3, [r5, r3]
   3618e:	4798      	blx	r3
   36190:	3601      	adds	r6, #1
   36192:	e7f2      	b.n	3617a <__libc_init_array+0x1e>
   36194:	0003be0c 	.word	0x0003be0c
   36198:	0003be0c 	.word	0x0003be0c
   3619c:	0003be0c 	.word	0x0003be0c
   361a0:	0003be10 	.word	0x0003be10

000361a4 <malloc>:
   361a4:	b510      	push	{r4, lr}
   361a6:	4b03      	ldr	r3, [pc, #12]	; (361b4 <malloc+0x10>)
   361a8:	0001      	movs	r1, r0
   361aa:	6818      	ldr	r0, [r3, #0]
   361ac:	f000 f87c 	bl	362a8 <_malloc_r>
   361b0:	bd10      	pop	{r4, pc}
   361b2:	46c0      	nop			; (mov r8, r8)
   361b4:	20000130 	.word	0x20000130

000361b8 <free>:
   361b8:	b510      	push	{r4, lr}
   361ba:	4b03      	ldr	r3, [pc, #12]	; (361c8 <free+0x10>)
   361bc:	0001      	movs	r1, r0
   361be:	6818      	ldr	r0, [r3, #0]
   361c0:	f000 f828 	bl	36214 <_free_r>
   361c4:	bd10      	pop	{r4, pc}
   361c6:	46c0      	nop			; (mov r8, r8)
   361c8:	20000130 	.word	0x20000130

000361cc <memcpy>:
   361cc:	2300      	movs	r3, #0
   361ce:	b510      	push	{r4, lr}
   361d0:	429a      	cmp	r2, r3
   361d2:	d100      	bne.n	361d6 <memcpy+0xa>
   361d4:	bd10      	pop	{r4, pc}
   361d6:	5ccc      	ldrb	r4, [r1, r3]
   361d8:	54c4      	strb	r4, [r0, r3]
   361da:	3301      	adds	r3, #1
   361dc:	e7f8      	b.n	361d0 <memcpy+0x4>

000361de <memmove>:
   361de:	b510      	push	{r4, lr}
   361e0:	4288      	cmp	r0, r1
   361e2:	d902      	bls.n	361ea <memmove+0xc>
   361e4:	188b      	adds	r3, r1, r2
   361e6:	4298      	cmp	r0, r3
   361e8:	d308      	bcc.n	361fc <memmove+0x1e>
   361ea:	2300      	movs	r3, #0
   361ec:	429a      	cmp	r2, r3
   361ee:	d007      	beq.n	36200 <memmove+0x22>
   361f0:	5ccc      	ldrb	r4, [r1, r3]
   361f2:	54c4      	strb	r4, [r0, r3]
   361f4:	3301      	adds	r3, #1
   361f6:	e7f9      	b.n	361ec <memmove+0xe>
   361f8:	5c8b      	ldrb	r3, [r1, r2]
   361fa:	5483      	strb	r3, [r0, r2]
   361fc:	3a01      	subs	r2, #1
   361fe:	d2fb      	bcs.n	361f8 <memmove+0x1a>
   36200:	bd10      	pop	{r4, pc}

00036202 <memset>:
   36202:	0003      	movs	r3, r0
   36204:	1882      	adds	r2, r0, r2
   36206:	4293      	cmp	r3, r2
   36208:	d100      	bne.n	3620c <memset+0xa>
   3620a:	4770      	bx	lr
   3620c:	7019      	strb	r1, [r3, #0]
   3620e:	3301      	adds	r3, #1
   36210:	e7f9      	b.n	36206 <memset+0x4>
	...

00036214 <_free_r>:
   36214:	b570      	push	{r4, r5, r6, lr}
   36216:	0005      	movs	r5, r0
   36218:	2900      	cmp	r1, #0
   3621a:	d010      	beq.n	3623e <_free_r+0x2a>
   3621c:	1f0c      	subs	r4, r1, #4
   3621e:	6823      	ldr	r3, [r4, #0]
   36220:	2b00      	cmp	r3, #0
   36222:	da00      	bge.n	36226 <_free_r+0x12>
   36224:	18e4      	adds	r4, r4, r3
   36226:	0028      	movs	r0, r5
   36228:	f000 fdca 	bl	36dc0 <__malloc_lock>
   3622c:	4a1d      	ldr	r2, [pc, #116]	; (362a4 <_free_r+0x90>)
   3622e:	6813      	ldr	r3, [r2, #0]
   36230:	2b00      	cmp	r3, #0
   36232:	d105      	bne.n	36240 <_free_r+0x2c>
   36234:	6063      	str	r3, [r4, #4]
   36236:	6014      	str	r4, [r2, #0]
   36238:	0028      	movs	r0, r5
   3623a:	f000 fdc2 	bl	36dc2 <__malloc_unlock>
   3623e:	bd70      	pop	{r4, r5, r6, pc}
   36240:	42a3      	cmp	r3, r4
   36242:	d909      	bls.n	36258 <_free_r+0x44>
   36244:	6821      	ldr	r1, [r4, #0]
   36246:	1860      	adds	r0, r4, r1
   36248:	4283      	cmp	r3, r0
   3624a:	d1f3      	bne.n	36234 <_free_r+0x20>
   3624c:	6818      	ldr	r0, [r3, #0]
   3624e:	685b      	ldr	r3, [r3, #4]
   36250:	1841      	adds	r1, r0, r1
   36252:	6021      	str	r1, [r4, #0]
   36254:	e7ee      	b.n	36234 <_free_r+0x20>
   36256:	0013      	movs	r3, r2
   36258:	685a      	ldr	r2, [r3, #4]
   3625a:	2a00      	cmp	r2, #0
   3625c:	d001      	beq.n	36262 <_free_r+0x4e>
   3625e:	42a2      	cmp	r2, r4
   36260:	d9f9      	bls.n	36256 <_free_r+0x42>
   36262:	6819      	ldr	r1, [r3, #0]
   36264:	1858      	adds	r0, r3, r1
   36266:	42a0      	cmp	r0, r4
   36268:	d10b      	bne.n	36282 <_free_r+0x6e>
   3626a:	6820      	ldr	r0, [r4, #0]
   3626c:	1809      	adds	r1, r1, r0
   3626e:	1858      	adds	r0, r3, r1
   36270:	6019      	str	r1, [r3, #0]
   36272:	4282      	cmp	r2, r0
   36274:	d1e0      	bne.n	36238 <_free_r+0x24>
   36276:	6810      	ldr	r0, [r2, #0]
   36278:	6852      	ldr	r2, [r2, #4]
   3627a:	1841      	adds	r1, r0, r1
   3627c:	6019      	str	r1, [r3, #0]
   3627e:	605a      	str	r2, [r3, #4]
   36280:	e7da      	b.n	36238 <_free_r+0x24>
   36282:	42a0      	cmp	r0, r4
   36284:	d902      	bls.n	3628c <_free_r+0x78>
   36286:	230c      	movs	r3, #12
   36288:	602b      	str	r3, [r5, #0]
   3628a:	e7d5      	b.n	36238 <_free_r+0x24>
   3628c:	6821      	ldr	r1, [r4, #0]
   3628e:	1860      	adds	r0, r4, r1
   36290:	4282      	cmp	r2, r0
   36292:	d103      	bne.n	3629c <_free_r+0x88>
   36294:	6810      	ldr	r0, [r2, #0]
   36296:	6852      	ldr	r2, [r2, #4]
   36298:	1841      	adds	r1, r0, r1
   3629a:	6021      	str	r1, [r4, #0]
   3629c:	6062      	str	r2, [r4, #4]
   3629e:	605c      	str	r4, [r3, #4]
   362a0:	e7ca      	b.n	36238 <_free_r+0x24>
   362a2:	46c0      	nop			; (mov r8, r8)
   362a4:	20004720 	.word	0x20004720

000362a8 <_malloc_r>:
   362a8:	2303      	movs	r3, #3
   362aa:	b570      	push	{r4, r5, r6, lr}
   362ac:	1ccd      	adds	r5, r1, #3
   362ae:	439d      	bics	r5, r3
   362b0:	3508      	adds	r5, #8
   362b2:	0006      	movs	r6, r0
   362b4:	2d0c      	cmp	r5, #12
   362b6:	d21e      	bcs.n	362f6 <_malloc_r+0x4e>
   362b8:	250c      	movs	r5, #12
   362ba:	42a9      	cmp	r1, r5
   362bc:	d81d      	bhi.n	362fa <_malloc_r+0x52>
   362be:	0030      	movs	r0, r6
   362c0:	f000 fd7e 	bl	36dc0 <__malloc_lock>
   362c4:	4a25      	ldr	r2, [pc, #148]	; (3635c <_malloc_r+0xb4>)
   362c6:	6814      	ldr	r4, [r2, #0]
   362c8:	0021      	movs	r1, r4
   362ca:	2900      	cmp	r1, #0
   362cc:	d119      	bne.n	36302 <_malloc_r+0x5a>
   362ce:	4c24      	ldr	r4, [pc, #144]	; (36360 <_malloc_r+0xb8>)
   362d0:	6823      	ldr	r3, [r4, #0]
   362d2:	2b00      	cmp	r3, #0
   362d4:	d103      	bne.n	362de <_malloc_r+0x36>
   362d6:	0030      	movs	r0, r6
   362d8:	f000 f8ae 	bl	36438 <_sbrk_r>
   362dc:	6020      	str	r0, [r4, #0]
   362de:	0029      	movs	r1, r5
   362e0:	0030      	movs	r0, r6
   362e2:	f000 f8a9 	bl	36438 <_sbrk_r>
   362e6:	1c43      	adds	r3, r0, #1
   362e8:	d12c      	bne.n	36344 <_malloc_r+0x9c>
   362ea:	230c      	movs	r3, #12
   362ec:	0030      	movs	r0, r6
   362ee:	6033      	str	r3, [r6, #0]
   362f0:	f000 fd67 	bl	36dc2 <__malloc_unlock>
   362f4:	e003      	b.n	362fe <_malloc_r+0x56>
   362f6:	2d00      	cmp	r5, #0
   362f8:	dadf      	bge.n	362ba <_malloc_r+0x12>
   362fa:	230c      	movs	r3, #12
   362fc:	6033      	str	r3, [r6, #0]
   362fe:	2000      	movs	r0, #0
   36300:	bd70      	pop	{r4, r5, r6, pc}
   36302:	680b      	ldr	r3, [r1, #0]
   36304:	1b5b      	subs	r3, r3, r5
   36306:	d41a      	bmi.n	3633e <_malloc_r+0x96>
   36308:	2b0b      	cmp	r3, #11
   3630a:	d903      	bls.n	36314 <_malloc_r+0x6c>
   3630c:	600b      	str	r3, [r1, #0]
   3630e:	18cc      	adds	r4, r1, r3
   36310:	6025      	str	r5, [r4, #0]
   36312:	e003      	b.n	3631c <_malloc_r+0x74>
   36314:	428c      	cmp	r4, r1
   36316:	d10e      	bne.n	36336 <_malloc_r+0x8e>
   36318:	6863      	ldr	r3, [r4, #4]
   3631a:	6013      	str	r3, [r2, #0]
   3631c:	0030      	movs	r0, r6
   3631e:	f000 fd50 	bl	36dc2 <__malloc_unlock>
   36322:	0020      	movs	r0, r4
   36324:	2207      	movs	r2, #7
   36326:	300b      	adds	r0, #11
   36328:	1d23      	adds	r3, r4, #4
   3632a:	4390      	bics	r0, r2
   3632c:	1ac3      	subs	r3, r0, r3
   3632e:	d0e7      	beq.n	36300 <_malloc_r+0x58>
   36330:	425a      	negs	r2, r3
   36332:	50e2      	str	r2, [r4, r3]
   36334:	e7e4      	b.n	36300 <_malloc_r+0x58>
   36336:	684b      	ldr	r3, [r1, #4]
   36338:	6063      	str	r3, [r4, #4]
   3633a:	000c      	movs	r4, r1
   3633c:	e7ee      	b.n	3631c <_malloc_r+0x74>
   3633e:	000c      	movs	r4, r1
   36340:	6849      	ldr	r1, [r1, #4]
   36342:	e7c2      	b.n	362ca <_malloc_r+0x22>
   36344:	2303      	movs	r3, #3
   36346:	1cc4      	adds	r4, r0, #3
   36348:	439c      	bics	r4, r3
   3634a:	42a0      	cmp	r0, r4
   3634c:	d0e0      	beq.n	36310 <_malloc_r+0x68>
   3634e:	1a21      	subs	r1, r4, r0
   36350:	0030      	movs	r0, r6
   36352:	f000 f871 	bl	36438 <_sbrk_r>
   36356:	1c43      	adds	r3, r0, #1
   36358:	d1da      	bne.n	36310 <_malloc_r+0x68>
   3635a:	e7c6      	b.n	362ea <_malloc_r+0x42>
   3635c:	20004720 	.word	0x20004720
   36360:	20004724 	.word	0x20004724

00036364 <_puts_r>:
   36364:	b570      	push	{r4, r5, r6, lr}
   36366:	0005      	movs	r5, r0
   36368:	000e      	movs	r6, r1
   3636a:	2800      	cmp	r0, #0
   3636c:	d004      	beq.n	36378 <_puts_r+0x14>
   3636e:	6983      	ldr	r3, [r0, #24]
   36370:	2b00      	cmp	r3, #0
   36372:	d101      	bne.n	36378 <_puts_r+0x14>
   36374:	f000 fc00 	bl	36b78 <__sinit>
   36378:	69ab      	ldr	r3, [r5, #24]
   3637a:	68ac      	ldr	r4, [r5, #8]
   3637c:	2b00      	cmp	r3, #0
   3637e:	d102      	bne.n	36386 <_puts_r+0x22>
   36380:	0028      	movs	r0, r5
   36382:	f000 fbf9 	bl	36b78 <__sinit>
   36386:	4b24      	ldr	r3, [pc, #144]	; (36418 <_puts_r+0xb4>)
   36388:	429c      	cmp	r4, r3
   3638a:	d10f      	bne.n	363ac <_puts_r+0x48>
   3638c:	686c      	ldr	r4, [r5, #4]
   3638e:	89a3      	ldrh	r3, [r4, #12]
   36390:	071b      	lsls	r3, r3, #28
   36392:	d502      	bpl.n	3639a <_puts_r+0x36>
   36394:	6923      	ldr	r3, [r4, #16]
   36396:	2b00      	cmp	r3, #0
   36398:	d120      	bne.n	363dc <_puts_r+0x78>
   3639a:	0021      	movs	r1, r4
   3639c:	0028      	movs	r0, r5
   3639e:	f000 fa7d 	bl	3689c <__swsetup_r>
   363a2:	2800      	cmp	r0, #0
   363a4:	d01a      	beq.n	363dc <_puts_r+0x78>
   363a6:	2001      	movs	r0, #1
   363a8:	4240      	negs	r0, r0
   363aa:	bd70      	pop	{r4, r5, r6, pc}
   363ac:	4b1b      	ldr	r3, [pc, #108]	; (3641c <_puts_r+0xb8>)
   363ae:	429c      	cmp	r4, r3
   363b0:	d101      	bne.n	363b6 <_puts_r+0x52>
   363b2:	68ac      	ldr	r4, [r5, #8]
   363b4:	e7eb      	b.n	3638e <_puts_r+0x2a>
   363b6:	4b1a      	ldr	r3, [pc, #104]	; (36420 <_puts_r+0xbc>)
   363b8:	429c      	cmp	r4, r3
   363ba:	d1e8      	bne.n	3638e <_puts_r+0x2a>
   363bc:	68ec      	ldr	r4, [r5, #12]
   363be:	e7e6      	b.n	3638e <_puts_r+0x2a>
   363c0:	3b01      	subs	r3, #1
   363c2:	3601      	adds	r6, #1
   363c4:	60a3      	str	r3, [r4, #8]
   363c6:	2b00      	cmp	r3, #0
   363c8:	da04      	bge.n	363d4 <_puts_r+0x70>
   363ca:	69a2      	ldr	r2, [r4, #24]
   363cc:	4293      	cmp	r3, r2
   363ce:	db16      	blt.n	363fe <_puts_r+0x9a>
   363d0:	290a      	cmp	r1, #10
   363d2:	d014      	beq.n	363fe <_puts_r+0x9a>
   363d4:	6823      	ldr	r3, [r4, #0]
   363d6:	1c5a      	adds	r2, r3, #1
   363d8:	6022      	str	r2, [r4, #0]
   363da:	7019      	strb	r1, [r3, #0]
   363dc:	7831      	ldrb	r1, [r6, #0]
   363de:	68a3      	ldr	r3, [r4, #8]
   363e0:	2900      	cmp	r1, #0
   363e2:	d1ed      	bne.n	363c0 <_puts_r+0x5c>
   363e4:	3b01      	subs	r3, #1
   363e6:	60a3      	str	r3, [r4, #8]
   363e8:	2b00      	cmp	r3, #0
   363ea:	da0f      	bge.n	3640c <_puts_r+0xa8>
   363ec:	0022      	movs	r2, r4
   363ee:	310a      	adds	r1, #10
   363f0:	0028      	movs	r0, r5
   363f2:	f000 f9fd 	bl	367f0 <__swbuf_r>
   363f6:	1c43      	adds	r3, r0, #1
   363f8:	d0d5      	beq.n	363a6 <_puts_r+0x42>
   363fa:	200a      	movs	r0, #10
   363fc:	e7d5      	b.n	363aa <_puts_r+0x46>
   363fe:	0022      	movs	r2, r4
   36400:	0028      	movs	r0, r5
   36402:	f000 f9f5 	bl	367f0 <__swbuf_r>
   36406:	1c43      	adds	r3, r0, #1
   36408:	d1e8      	bne.n	363dc <_puts_r+0x78>
   3640a:	e7cc      	b.n	363a6 <_puts_r+0x42>
   3640c:	200a      	movs	r0, #10
   3640e:	6823      	ldr	r3, [r4, #0]
   36410:	1c5a      	adds	r2, r3, #1
   36412:	6022      	str	r2, [r4, #0]
   36414:	7018      	strb	r0, [r3, #0]
   36416:	e7c8      	b.n	363aa <_puts_r+0x46>
   36418:	0003bc80 	.word	0x0003bc80
   3641c:	0003bca0 	.word	0x0003bca0
   36420:	0003bc60 	.word	0x0003bc60

00036424 <puts>:
   36424:	b510      	push	{r4, lr}
   36426:	4b03      	ldr	r3, [pc, #12]	; (36434 <puts+0x10>)
   36428:	0001      	movs	r1, r0
   3642a:	6818      	ldr	r0, [r3, #0]
   3642c:	f7ff ff9a 	bl	36364 <_puts_r>
   36430:	bd10      	pop	{r4, pc}
   36432:	46c0      	nop			; (mov r8, r8)
   36434:	20000130 	.word	0x20000130

00036438 <_sbrk_r>:
   36438:	2300      	movs	r3, #0
   3643a:	b570      	push	{r4, r5, r6, lr}
   3643c:	4c06      	ldr	r4, [pc, #24]	; (36458 <_sbrk_r+0x20>)
   3643e:	0005      	movs	r5, r0
   36440:	0008      	movs	r0, r1
   36442:	6023      	str	r3, [r4, #0]
   36444:	f7f5 fcd6 	bl	2bdf4 <_sbrk>
   36448:	1c43      	adds	r3, r0, #1
   3644a:	d103      	bne.n	36454 <_sbrk_r+0x1c>
   3644c:	6823      	ldr	r3, [r4, #0]
   3644e:	2b00      	cmp	r3, #0
   36450:	d000      	beq.n	36454 <_sbrk_r+0x1c>
   36452:	602b      	str	r3, [r5, #0]
   36454:	bd70      	pop	{r4, r5, r6, pc}
   36456:	46c0      	nop			; (mov r8, r8)
   36458:	20005ce8 	.word	0x20005ce8

0003645c <sniprintf>:
   3645c:	b40c      	push	{r2, r3}
   3645e:	b530      	push	{r4, r5, lr}
   36460:	4b16      	ldr	r3, [pc, #88]	; (364bc <sniprintf+0x60>)
   36462:	b09d      	sub	sp, #116	; 0x74
   36464:	1e0c      	subs	r4, r1, #0
   36466:	681d      	ldr	r5, [r3, #0]
   36468:	da08      	bge.n	3647c <sniprintf+0x20>
   3646a:	238b      	movs	r3, #139	; 0x8b
   3646c:	2001      	movs	r0, #1
   3646e:	602b      	str	r3, [r5, #0]
   36470:	4240      	negs	r0, r0
   36472:	b01d      	add	sp, #116	; 0x74
   36474:	bc30      	pop	{r4, r5}
   36476:	bc08      	pop	{r3}
   36478:	b002      	add	sp, #8
   3647a:	4718      	bx	r3
   3647c:	2382      	movs	r3, #130	; 0x82
   3647e:	a902      	add	r1, sp, #8
   36480:	009b      	lsls	r3, r3, #2
   36482:	818b      	strh	r3, [r1, #12]
   36484:	2300      	movs	r3, #0
   36486:	9002      	str	r0, [sp, #8]
   36488:	6108      	str	r0, [r1, #16]
   3648a:	429c      	cmp	r4, r3
   3648c:	d000      	beq.n	36490 <sniprintf+0x34>
   3648e:	1e63      	subs	r3, r4, #1
   36490:	608b      	str	r3, [r1, #8]
   36492:	614b      	str	r3, [r1, #20]
   36494:	2301      	movs	r3, #1
   36496:	425b      	negs	r3, r3
   36498:	81cb      	strh	r3, [r1, #14]
   3649a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3649c:	ab21      	add	r3, sp, #132	; 0x84
   3649e:	0028      	movs	r0, r5
   364a0:	9301      	str	r3, [sp, #4]
   364a2:	f000 fcf1 	bl	36e88 <_svfiprintf_r>
   364a6:	1c43      	adds	r3, r0, #1
   364a8:	da01      	bge.n	364ae <sniprintf+0x52>
   364aa:	238b      	movs	r3, #139	; 0x8b
   364ac:	602b      	str	r3, [r5, #0]
   364ae:	2c00      	cmp	r4, #0
   364b0:	d0df      	beq.n	36472 <sniprintf+0x16>
   364b2:	2300      	movs	r3, #0
   364b4:	9a02      	ldr	r2, [sp, #8]
   364b6:	7013      	strb	r3, [r2, #0]
   364b8:	e7db      	b.n	36472 <sniprintf+0x16>
   364ba:	46c0      	nop			; (mov r8, r8)
   364bc:	20000130 	.word	0x20000130

000364c0 <siprintf>:
   364c0:	b40e      	push	{r1, r2, r3}
   364c2:	b510      	push	{r4, lr}
   364c4:	b09d      	sub	sp, #116	; 0x74
   364c6:	a902      	add	r1, sp, #8
   364c8:	9002      	str	r0, [sp, #8]
   364ca:	6108      	str	r0, [r1, #16]
   364cc:	480b      	ldr	r0, [pc, #44]	; (364fc <siprintf+0x3c>)
   364ce:	2482      	movs	r4, #130	; 0x82
   364d0:	6088      	str	r0, [r1, #8]
   364d2:	6148      	str	r0, [r1, #20]
   364d4:	2001      	movs	r0, #1
   364d6:	4240      	negs	r0, r0
   364d8:	ab1f      	add	r3, sp, #124	; 0x7c
   364da:	81c8      	strh	r0, [r1, #14]
   364dc:	4808      	ldr	r0, [pc, #32]	; (36500 <siprintf+0x40>)
   364de:	cb04      	ldmia	r3!, {r2}
   364e0:	00a4      	lsls	r4, r4, #2
   364e2:	6800      	ldr	r0, [r0, #0]
   364e4:	9301      	str	r3, [sp, #4]
   364e6:	818c      	strh	r4, [r1, #12]
   364e8:	f000 fcce 	bl	36e88 <_svfiprintf_r>
   364ec:	2300      	movs	r3, #0
   364ee:	9a02      	ldr	r2, [sp, #8]
   364f0:	7013      	strb	r3, [r2, #0]
   364f2:	b01d      	add	sp, #116	; 0x74
   364f4:	bc10      	pop	{r4}
   364f6:	bc08      	pop	{r3}
   364f8:	b003      	add	sp, #12
   364fa:	4718      	bx	r3
   364fc:	7fffffff 	.word	0x7fffffff
   36500:	20000130 	.word	0x20000130

00036504 <strcasecmp>:
   36504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36506:	0007      	movs	r7, r0
   36508:	000e      	movs	r6, r1
   3650a:	783c      	ldrb	r4, [r7, #0]
   3650c:	f000 fbcc 	bl	36ca8 <__locale_ctype_ptr>
   36510:	2203      	movs	r2, #3
   36512:	1900      	adds	r0, r0, r4
   36514:	7843      	ldrb	r3, [r0, #1]
   36516:	4013      	ands	r3, r2
   36518:	2b01      	cmp	r3, #1
   3651a:	d100      	bne.n	3651e <strcasecmp+0x1a>
   3651c:	3420      	adds	r4, #32
   3651e:	7835      	ldrb	r5, [r6, #0]
   36520:	f000 fbc2 	bl	36ca8 <__locale_ctype_ptr>
   36524:	2203      	movs	r2, #3
   36526:	1940      	adds	r0, r0, r5
   36528:	7843      	ldrb	r3, [r0, #1]
   3652a:	4013      	ands	r3, r2
   3652c:	2b01      	cmp	r3, #1
   3652e:	d100      	bne.n	36532 <strcasecmp+0x2e>
   36530:	3520      	adds	r5, #32
   36532:	1b60      	subs	r0, r4, r5
   36534:	d103      	bne.n	3653e <strcasecmp+0x3a>
   36536:	3701      	adds	r7, #1
   36538:	3601      	adds	r6, #1
   3653a:	2d00      	cmp	r5, #0
   3653c:	d1e5      	bne.n	3650a <strcasecmp+0x6>
   3653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036540 <strcmp>:
   36540:	7802      	ldrb	r2, [r0, #0]
   36542:	780b      	ldrb	r3, [r1, #0]
   36544:	2a00      	cmp	r2, #0
   36546:	d003      	beq.n	36550 <strcmp+0x10>
   36548:	3001      	adds	r0, #1
   3654a:	3101      	adds	r1, #1
   3654c:	429a      	cmp	r2, r3
   3654e:	d0f7      	beq.n	36540 <strcmp>
   36550:	1ad0      	subs	r0, r2, r3
   36552:	4770      	bx	lr

00036554 <strcpy>:
   36554:	1c03      	adds	r3, r0, #0
   36556:	780a      	ldrb	r2, [r1, #0]
   36558:	3101      	adds	r1, #1
   3655a:	701a      	strb	r2, [r3, #0]
   3655c:	3301      	adds	r3, #1
   3655e:	2a00      	cmp	r2, #0
   36560:	d1f9      	bne.n	36556 <strcpy+0x2>
   36562:	4770      	bx	lr

00036564 <strdup>:
   36564:	b510      	push	{r4, lr}
   36566:	4b03      	ldr	r3, [pc, #12]	; (36574 <strdup+0x10>)
   36568:	0001      	movs	r1, r0
   3656a:	6818      	ldr	r0, [r3, #0]
   3656c:	f000 f804 	bl	36578 <_strdup_r>
   36570:	bd10      	pop	{r4, pc}
   36572:	46c0      	nop			; (mov r8, r8)
   36574:	20000130 	.word	0x20000130

00036578 <_strdup_r>:
   36578:	b570      	push	{r4, r5, r6, lr}
   3657a:	0005      	movs	r5, r0
   3657c:	0008      	movs	r0, r1
   3657e:	000e      	movs	r6, r1
   36580:	f000 f80d 	bl	3659e <strlen>
   36584:	1c44      	adds	r4, r0, #1
   36586:	0021      	movs	r1, r4
   36588:	0028      	movs	r0, r5
   3658a:	f7ff fe8d 	bl	362a8 <_malloc_r>
   3658e:	1e05      	subs	r5, r0, #0
   36590:	d003      	beq.n	3659a <_strdup_r+0x22>
   36592:	0022      	movs	r2, r4
   36594:	0031      	movs	r1, r6
   36596:	f7ff fe19 	bl	361cc <memcpy>
   3659a:	0028      	movs	r0, r5
   3659c:	bd70      	pop	{r4, r5, r6, pc}

0003659e <strlen>:
   3659e:	2300      	movs	r3, #0
   365a0:	5cc2      	ldrb	r2, [r0, r3]
   365a2:	3301      	adds	r3, #1
   365a4:	2a00      	cmp	r2, #0
   365a6:	d1fb      	bne.n	365a0 <strlen+0x2>
   365a8:	1e58      	subs	r0, r3, #1
   365aa:	4770      	bx	lr

000365ac <strncmp>:
   365ac:	2300      	movs	r3, #0
   365ae:	b530      	push	{r4, r5, lr}
   365b0:	429a      	cmp	r2, r3
   365b2:	d00a      	beq.n	365ca <strncmp+0x1e>
   365b4:	3a01      	subs	r2, #1
   365b6:	5cc4      	ldrb	r4, [r0, r3]
   365b8:	5ccd      	ldrb	r5, [r1, r3]
   365ba:	42ac      	cmp	r4, r5
   365bc:	d104      	bne.n	365c8 <strncmp+0x1c>
   365be:	429a      	cmp	r2, r3
   365c0:	d002      	beq.n	365c8 <strncmp+0x1c>
   365c2:	3301      	adds	r3, #1
   365c4:	2c00      	cmp	r4, #0
   365c6:	d1f6      	bne.n	365b6 <strncmp+0xa>
   365c8:	1b63      	subs	r3, r4, r5
   365ca:	0018      	movs	r0, r3
   365cc:	bd30      	pop	{r4, r5, pc}

000365ce <strncpy>:
   365ce:	b570      	push	{r4, r5, r6, lr}
   365d0:	0004      	movs	r4, r0
   365d2:	2a00      	cmp	r2, #0
   365d4:	d100      	bne.n	365d8 <strncpy+0xa>
   365d6:	bd70      	pop	{r4, r5, r6, pc}
   365d8:	780d      	ldrb	r5, [r1, #0]
   365da:	1e56      	subs	r6, r2, #1
   365dc:	1c63      	adds	r3, r4, #1
   365de:	7025      	strb	r5, [r4, #0]
   365e0:	3101      	adds	r1, #1
   365e2:	2d00      	cmp	r5, #0
   365e4:	d105      	bne.n	365f2 <strncpy+0x24>
   365e6:	18a4      	adds	r4, r4, r2
   365e8:	429c      	cmp	r4, r3
   365ea:	d0f4      	beq.n	365d6 <strncpy+0x8>
   365ec:	701d      	strb	r5, [r3, #0]
   365ee:	3301      	adds	r3, #1
   365f0:	e7fa      	b.n	365e8 <strncpy+0x1a>
   365f2:	001c      	movs	r4, r3
   365f4:	0032      	movs	r2, r6
   365f6:	e7ec      	b.n	365d2 <strncpy+0x4>

000365f8 <strrchr>:
   365f8:	b570      	push	{r4, r5, r6, lr}
   365fa:	000d      	movs	r5, r1
   365fc:	2400      	movs	r4, #0
   365fe:	2900      	cmp	r1, #0
   36600:	d105      	bne.n	3660e <strrchr+0x16>
   36602:	f000 ff19 	bl	37438 <strchr>
   36606:	0004      	movs	r4, r0
   36608:	e006      	b.n	36618 <strrchr+0x20>
   3660a:	001c      	movs	r4, r3
   3660c:	1c58      	adds	r0, r3, #1
   3660e:	0029      	movs	r1, r5
   36610:	f000 ff12 	bl	37438 <strchr>
   36614:	1e03      	subs	r3, r0, #0
   36616:	d1f8      	bne.n	3660a <strrchr+0x12>
   36618:	0020      	movs	r0, r4
   3661a:	bd70      	pop	{r4, r5, r6, pc}

0003661c <strstr>:
   3661c:	b510      	push	{r4, lr}
   3661e:	0002      	movs	r2, r0
   36620:	7800      	ldrb	r0, [r0, #0]
   36622:	2800      	cmp	r0, #0
   36624:	d104      	bne.n	36630 <strstr+0x14>
   36626:	7809      	ldrb	r1, [r1, #0]
   36628:	2900      	cmp	r1, #0
   3662a:	d00d      	beq.n	36648 <strstr+0x2c>
   3662c:	bd10      	pop	{r4, pc}
   3662e:	3201      	adds	r2, #1
   36630:	7810      	ldrb	r0, [r2, #0]
   36632:	2800      	cmp	r0, #0
   36634:	d0fa      	beq.n	3662c <strstr+0x10>
   36636:	2300      	movs	r3, #0
   36638:	5cc8      	ldrb	r0, [r1, r3]
   3663a:	2800      	cmp	r0, #0
   3663c:	d004      	beq.n	36648 <strstr+0x2c>
   3663e:	5cd4      	ldrb	r4, [r2, r3]
   36640:	4284      	cmp	r4, r0
   36642:	d1f4      	bne.n	3662e <strstr+0x12>
   36644:	3301      	adds	r3, #1
   36646:	e7f7      	b.n	36638 <strstr+0x1c>
   36648:	0010      	movs	r0, r2
   3664a:	e7ef      	b.n	3662c <strstr+0x10>

0003664c <_strtol_l.isra.0>:
   3664c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3664e:	001f      	movs	r7, r3
   36650:	000e      	movs	r6, r1
   36652:	b087      	sub	sp, #28
   36654:	9005      	str	r0, [sp, #20]
   36656:	9103      	str	r1, [sp, #12]
   36658:	9202      	str	r2, [sp, #8]
   3665a:	980c      	ldr	r0, [sp, #48]	; 0x30
   3665c:	7834      	ldrb	r4, [r6, #0]
   3665e:	f000 fb20 	bl	36ca2 <__locale_ctype_ptr_l>
   36662:	2208      	movs	r2, #8
   36664:	1900      	adds	r0, r0, r4
   36666:	7843      	ldrb	r3, [r0, #1]
   36668:	1c75      	adds	r5, r6, #1
   3666a:	4013      	ands	r3, r2
   3666c:	d10c      	bne.n	36688 <_strtol_l.isra.0+0x3c>
   3666e:	2c2d      	cmp	r4, #45	; 0x2d
   36670:	d10c      	bne.n	3668c <_strtol_l.isra.0+0x40>
   36672:	3301      	adds	r3, #1
   36674:	782c      	ldrb	r4, [r5, #0]
   36676:	9301      	str	r3, [sp, #4]
   36678:	1cb5      	adds	r5, r6, #2
   3667a:	2f00      	cmp	r7, #0
   3667c:	d00c      	beq.n	36698 <_strtol_l.isra.0+0x4c>
   3667e:	2f10      	cmp	r7, #16
   36680:	d114      	bne.n	366ac <_strtol_l.isra.0+0x60>
   36682:	2c30      	cmp	r4, #48	; 0x30
   36684:	d00a      	beq.n	3669c <_strtol_l.isra.0+0x50>
   36686:	e011      	b.n	366ac <_strtol_l.isra.0+0x60>
   36688:	002e      	movs	r6, r5
   3668a:	e7e6      	b.n	3665a <_strtol_l.isra.0+0xe>
   3668c:	9301      	str	r3, [sp, #4]
   3668e:	2c2b      	cmp	r4, #43	; 0x2b
   36690:	d1f3      	bne.n	3667a <_strtol_l.isra.0+0x2e>
   36692:	782c      	ldrb	r4, [r5, #0]
   36694:	1cb5      	adds	r5, r6, #2
   36696:	e7f0      	b.n	3667a <_strtol_l.isra.0+0x2e>
   36698:	2c30      	cmp	r4, #48	; 0x30
   3669a:	d12f      	bne.n	366fc <_strtol_l.isra.0+0xb0>
   3669c:	2220      	movs	r2, #32
   3669e:	782b      	ldrb	r3, [r5, #0]
   366a0:	4393      	bics	r3, r2
   366a2:	2b58      	cmp	r3, #88	; 0x58
   366a4:	d151      	bne.n	3674a <_strtol_l.isra.0+0xfe>
   366a6:	2710      	movs	r7, #16
   366a8:	786c      	ldrb	r4, [r5, #1]
   366aa:	3502      	adds	r5, #2
   366ac:	9b01      	ldr	r3, [sp, #4]
   366ae:	4a29      	ldr	r2, [pc, #164]	; (36754 <_strtol_l.isra.0+0x108>)
   366b0:	0039      	movs	r1, r7
   366b2:	189e      	adds	r6, r3, r2
   366b4:	0030      	movs	r0, r6
   366b6:	f7fd f87b 	bl	337b0 <__aeabi_uidivmod>
   366ba:	0030      	movs	r0, r6
   366bc:	9104      	str	r1, [sp, #16]
   366be:	0039      	movs	r1, r7
   366c0:	f7fc fff0 	bl	336a4 <__udivsi3>
   366c4:	2101      	movs	r1, #1
   366c6:	2300      	movs	r3, #0
   366c8:	4249      	negs	r1, r1
   366ca:	0002      	movs	r2, r0
   366cc:	468c      	mov	ip, r1
   366ce:	0018      	movs	r0, r3
   366d0:	0021      	movs	r1, r4
   366d2:	3930      	subs	r1, #48	; 0x30
   366d4:	2909      	cmp	r1, #9
   366d6:	d813      	bhi.n	36700 <_strtol_l.isra.0+0xb4>
   366d8:	000c      	movs	r4, r1
   366da:	42a7      	cmp	r7, r4
   366dc:	dd1c      	ble.n	36718 <_strtol_l.isra.0+0xcc>
   366de:	1c59      	adds	r1, r3, #1
   366e0:	d009      	beq.n	366f6 <_strtol_l.isra.0+0xaa>
   366e2:	4663      	mov	r3, ip
   366e4:	4282      	cmp	r2, r0
   366e6:	d306      	bcc.n	366f6 <_strtol_l.isra.0+0xaa>
   366e8:	d102      	bne.n	366f0 <_strtol_l.isra.0+0xa4>
   366ea:	9904      	ldr	r1, [sp, #16]
   366ec:	42a1      	cmp	r1, r4
   366ee:	db02      	blt.n	366f6 <_strtol_l.isra.0+0xaa>
   366f0:	2301      	movs	r3, #1
   366f2:	4378      	muls	r0, r7
   366f4:	1820      	adds	r0, r4, r0
   366f6:	782c      	ldrb	r4, [r5, #0]
   366f8:	3501      	adds	r5, #1
   366fa:	e7e9      	b.n	366d0 <_strtol_l.isra.0+0x84>
   366fc:	270a      	movs	r7, #10
   366fe:	e7d5      	b.n	366ac <_strtol_l.isra.0+0x60>
   36700:	0021      	movs	r1, r4
   36702:	3941      	subs	r1, #65	; 0x41
   36704:	2919      	cmp	r1, #25
   36706:	d801      	bhi.n	3670c <_strtol_l.isra.0+0xc0>
   36708:	3c37      	subs	r4, #55	; 0x37
   3670a:	e7e6      	b.n	366da <_strtol_l.isra.0+0x8e>
   3670c:	0021      	movs	r1, r4
   3670e:	3961      	subs	r1, #97	; 0x61
   36710:	2919      	cmp	r1, #25
   36712:	d801      	bhi.n	36718 <_strtol_l.isra.0+0xcc>
   36714:	3c57      	subs	r4, #87	; 0x57
   36716:	e7e0      	b.n	366da <_strtol_l.isra.0+0x8e>
   36718:	1c5a      	adds	r2, r3, #1
   3671a:	d108      	bne.n	3672e <_strtol_l.isra.0+0xe2>
   3671c:	9a05      	ldr	r2, [sp, #20]
   3671e:	3323      	adds	r3, #35	; 0x23
   36720:	6013      	str	r3, [r2, #0]
   36722:	9b02      	ldr	r3, [sp, #8]
   36724:	0030      	movs	r0, r6
   36726:	2b00      	cmp	r3, #0
   36728:	d10b      	bne.n	36742 <_strtol_l.isra.0+0xf6>
   3672a:	b007      	add	sp, #28
   3672c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3672e:	9a01      	ldr	r2, [sp, #4]
   36730:	2a00      	cmp	r2, #0
   36732:	d000      	beq.n	36736 <_strtol_l.isra.0+0xea>
   36734:	4240      	negs	r0, r0
   36736:	9a02      	ldr	r2, [sp, #8]
   36738:	2a00      	cmp	r2, #0
   3673a:	d0f6      	beq.n	3672a <_strtol_l.isra.0+0xde>
   3673c:	9a03      	ldr	r2, [sp, #12]
   3673e:	2b00      	cmp	r3, #0
   36740:	d000      	beq.n	36744 <_strtol_l.isra.0+0xf8>
   36742:	1e6a      	subs	r2, r5, #1
   36744:	9b02      	ldr	r3, [sp, #8]
   36746:	601a      	str	r2, [r3, #0]
   36748:	e7ef      	b.n	3672a <_strtol_l.isra.0+0xde>
   3674a:	2430      	movs	r4, #48	; 0x30
   3674c:	2f00      	cmp	r7, #0
   3674e:	d1ad      	bne.n	366ac <_strtol_l.isra.0+0x60>
   36750:	3708      	adds	r7, #8
   36752:	e7ab      	b.n	366ac <_strtol_l.isra.0+0x60>
   36754:	7fffffff 	.word	0x7fffffff

00036758 <strtol>:
   36758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3675a:	0013      	movs	r3, r2
   3675c:	4a06      	ldr	r2, [pc, #24]	; (36778 <strtol+0x20>)
   3675e:	0005      	movs	r5, r0
   36760:	6810      	ldr	r0, [r2, #0]
   36762:	6a04      	ldr	r4, [r0, #32]
   36764:	2c00      	cmp	r4, #0
   36766:	d100      	bne.n	3676a <strtol+0x12>
   36768:	4c04      	ldr	r4, [pc, #16]	; (3677c <strtol+0x24>)
   3676a:	000a      	movs	r2, r1
   3676c:	9400      	str	r4, [sp, #0]
   3676e:	0029      	movs	r1, r5
   36770:	f7ff ff6c 	bl	3664c <_strtol_l.isra.0>
   36774:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   36776:	46c0      	nop			; (mov r8, r8)
   36778:	20000130 	.word	0x20000130
   3677c:	20000194 	.word	0x20000194

00036780 <_vsniprintf_r>:
   36780:	b530      	push	{r4, r5, lr}
   36782:	0014      	movs	r4, r2
   36784:	b09b      	sub	sp, #108	; 0x6c
   36786:	0005      	movs	r5, r0
   36788:	001a      	movs	r2, r3
   3678a:	2c00      	cmp	r4, #0
   3678c:	da05      	bge.n	3679a <_vsniprintf_r+0x1a>
   3678e:	238b      	movs	r3, #139	; 0x8b
   36790:	6003      	str	r3, [r0, #0]
   36792:	2001      	movs	r0, #1
   36794:	4240      	negs	r0, r0
   36796:	b01b      	add	sp, #108	; 0x6c
   36798:	bd30      	pop	{r4, r5, pc}
   3679a:	2382      	movs	r3, #130	; 0x82
   3679c:	4668      	mov	r0, sp
   3679e:	009b      	lsls	r3, r3, #2
   367a0:	8183      	strh	r3, [r0, #12]
   367a2:	2300      	movs	r3, #0
   367a4:	9100      	str	r1, [sp, #0]
   367a6:	9104      	str	r1, [sp, #16]
   367a8:	429c      	cmp	r4, r3
   367aa:	d000      	beq.n	367ae <_vsniprintf_r+0x2e>
   367ac:	1e63      	subs	r3, r4, #1
   367ae:	9302      	str	r3, [sp, #8]
   367b0:	9305      	str	r3, [sp, #20]
   367b2:	2301      	movs	r3, #1
   367b4:	4669      	mov	r1, sp
   367b6:	425b      	negs	r3, r3
   367b8:	81cb      	strh	r3, [r1, #14]
   367ba:	0028      	movs	r0, r5
   367bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   367be:	f000 fb63 	bl	36e88 <_svfiprintf_r>
   367c2:	1c43      	adds	r3, r0, #1
   367c4:	da01      	bge.n	367ca <_vsniprintf_r+0x4a>
   367c6:	238b      	movs	r3, #139	; 0x8b
   367c8:	602b      	str	r3, [r5, #0]
   367ca:	2c00      	cmp	r4, #0
   367cc:	d0e3      	beq.n	36796 <_vsniprintf_r+0x16>
   367ce:	2300      	movs	r3, #0
   367d0:	9a00      	ldr	r2, [sp, #0]
   367d2:	7013      	strb	r3, [r2, #0]
   367d4:	e7df      	b.n	36796 <_vsniprintf_r+0x16>
	...

000367d8 <vsniprintf>:
   367d8:	b507      	push	{r0, r1, r2, lr}
   367da:	9300      	str	r3, [sp, #0]
   367dc:	0013      	movs	r3, r2
   367de:	000a      	movs	r2, r1
   367e0:	0001      	movs	r1, r0
   367e2:	4802      	ldr	r0, [pc, #8]	; (367ec <vsniprintf+0x14>)
   367e4:	6800      	ldr	r0, [r0, #0]
   367e6:	f7ff ffcb 	bl	36780 <_vsniprintf_r>
   367ea:	bd0e      	pop	{r1, r2, r3, pc}
   367ec:	20000130 	.word	0x20000130

000367f0 <__swbuf_r>:
   367f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   367f2:	0005      	movs	r5, r0
   367f4:	000e      	movs	r6, r1
   367f6:	0014      	movs	r4, r2
   367f8:	2800      	cmp	r0, #0
   367fa:	d004      	beq.n	36806 <__swbuf_r+0x16>
   367fc:	6983      	ldr	r3, [r0, #24]
   367fe:	2b00      	cmp	r3, #0
   36800:	d101      	bne.n	36806 <__swbuf_r+0x16>
   36802:	f000 f9b9 	bl	36b78 <__sinit>
   36806:	4b22      	ldr	r3, [pc, #136]	; (36890 <__swbuf_r+0xa0>)
   36808:	429c      	cmp	r4, r3
   3680a:	d12d      	bne.n	36868 <__swbuf_r+0x78>
   3680c:	686c      	ldr	r4, [r5, #4]
   3680e:	69a3      	ldr	r3, [r4, #24]
   36810:	60a3      	str	r3, [r4, #8]
   36812:	89a3      	ldrh	r3, [r4, #12]
   36814:	071b      	lsls	r3, r3, #28
   36816:	d531      	bpl.n	3687c <__swbuf_r+0x8c>
   36818:	6923      	ldr	r3, [r4, #16]
   3681a:	2b00      	cmp	r3, #0
   3681c:	d02e      	beq.n	3687c <__swbuf_r+0x8c>
   3681e:	6823      	ldr	r3, [r4, #0]
   36820:	6922      	ldr	r2, [r4, #16]
   36822:	b2f7      	uxtb	r7, r6
   36824:	1a98      	subs	r0, r3, r2
   36826:	6963      	ldr	r3, [r4, #20]
   36828:	b2f6      	uxtb	r6, r6
   3682a:	4298      	cmp	r0, r3
   3682c:	db05      	blt.n	3683a <__swbuf_r+0x4a>
   3682e:	0021      	movs	r1, r4
   36830:	0028      	movs	r0, r5
   36832:	f000 f933 	bl	36a9c <_fflush_r>
   36836:	2800      	cmp	r0, #0
   36838:	d126      	bne.n	36888 <__swbuf_r+0x98>
   3683a:	68a3      	ldr	r3, [r4, #8]
   3683c:	3001      	adds	r0, #1
   3683e:	3b01      	subs	r3, #1
   36840:	60a3      	str	r3, [r4, #8]
   36842:	6823      	ldr	r3, [r4, #0]
   36844:	1c5a      	adds	r2, r3, #1
   36846:	6022      	str	r2, [r4, #0]
   36848:	701f      	strb	r7, [r3, #0]
   3684a:	6963      	ldr	r3, [r4, #20]
   3684c:	4298      	cmp	r0, r3
   3684e:	d004      	beq.n	3685a <__swbuf_r+0x6a>
   36850:	89a3      	ldrh	r3, [r4, #12]
   36852:	07db      	lsls	r3, r3, #31
   36854:	d51a      	bpl.n	3688c <__swbuf_r+0x9c>
   36856:	2e0a      	cmp	r6, #10
   36858:	d118      	bne.n	3688c <__swbuf_r+0x9c>
   3685a:	0021      	movs	r1, r4
   3685c:	0028      	movs	r0, r5
   3685e:	f000 f91d 	bl	36a9c <_fflush_r>
   36862:	2800      	cmp	r0, #0
   36864:	d012      	beq.n	3688c <__swbuf_r+0x9c>
   36866:	e00f      	b.n	36888 <__swbuf_r+0x98>
   36868:	4b0a      	ldr	r3, [pc, #40]	; (36894 <__swbuf_r+0xa4>)
   3686a:	429c      	cmp	r4, r3
   3686c:	d101      	bne.n	36872 <__swbuf_r+0x82>
   3686e:	68ac      	ldr	r4, [r5, #8]
   36870:	e7cd      	b.n	3680e <__swbuf_r+0x1e>
   36872:	4b09      	ldr	r3, [pc, #36]	; (36898 <__swbuf_r+0xa8>)
   36874:	429c      	cmp	r4, r3
   36876:	d1ca      	bne.n	3680e <__swbuf_r+0x1e>
   36878:	68ec      	ldr	r4, [r5, #12]
   3687a:	e7c8      	b.n	3680e <__swbuf_r+0x1e>
   3687c:	0021      	movs	r1, r4
   3687e:	0028      	movs	r0, r5
   36880:	f000 f80c 	bl	3689c <__swsetup_r>
   36884:	2800      	cmp	r0, #0
   36886:	d0ca      	beq.n	3681e <__swbuf_r+0x2e>
   36888:	2601      	movs	r6, #1
   3688a:	4276      	negs	r6, r6
   3688c:	0030      	movs	r0, r6
   3688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36890:	0003bc80 	.word	0x0003bc80
   36894:	0003bca0 	.word	0x0003bca0
   36898:	0003bc60 	.word	0x0003bc60

0003689c <__swsetup_r>:
   3689c:	4b36      	ldr	r3, [pc, #216]	; (36978 <__swsetup_r+0xdc>)
   3689e:	b570      	push	{r4, r5, r6, lr}
   368a0:	681d      	ldr	r5, [r3, #0]
   368a2:	0006      	movs	r6, r0
   368a4:	000c      	movs	r4, r1
   368a6:	2d00      	cmp	r5, #0
   368a8:	d005      	beq.n	368b6 <__swsetup_r+0x1a>
   368aa:	69ab      	ldr	r3, [r5, #24]
   368ac:	2b00      	cmp	r3, #0
   368ae:	d102      	bne.n	368b6 <__swsetup_r+0x1a>
   368b0:	0028      	movs	r0, r5
   368b2:	f000 f961 	bl	36b78 <__sinit>
   368b6:	4b31      	ldr	r3, [pc, #196]	; (3697c <__swsetup_r+0xe0>)
   368b8:	429c      	cmp	r4, r3
   368ba:	d10f      	bne.n	368dc <__swsetup_r+0x40>
   368bc:	686c      	ldr	r4, [r5, #4]
   368be:	230c      	movs	r3, #12
   368c0:	5ee2      	ldrsh	r2, [r4, r3]
   368c2:	b293      	uxth	r3, r2
   368c4:	0719      	lsls	r1, r3, #28
   368c6:	d42d      	bmi.n	36924 <__swsetup_r+0x88>
   368c8:	06d9      	lsls	r1, r3, #27
   368ca:	d411      	bmi.n	368f0 <__swsetup_r+0x54>
   368cc:	2309      	movs	r3, #9
   368ce:	2001      	movs	r0, #1
   368d0:	6033      	str	r3, [r6, #0]
   368d2:	3337      	adds	r3, #55	; 0x37
   368d4:	4313      	orrs	r3, r2
   368d6:	81a3      	strh	r3, [r4, #12]
   368d8:	4240      	negs	r0, r0
   368da:	bd70      	pop	{r4, r5, r6, pc}
   368dc:	4b28      	ldr	r3, [pc, #160]	; (36980 <__swsetup_r+0xe4>)
   368de:	429c      	cmp	r4, r3
   368e0:	d101      	bne.n	368e6 <__swsetup_r+0x4a>
   368e2:	68ac      	ldr	r4, [r5, #8]
   368e4:	e7eb      	b.n	368be <__swsetup_r+0x22>
   368e6:	4b27      	ldr	r3, [pc, #156]	; (36984 <__swsetup_r+0xe8>)
   368e8:	429c      	cmp	r4, r3
   368ea:	d1e8      	bne.n	368be <__swsetup_r+0x22>
   368ec:	68ec      	ldr	r4, [r5, #12]
   368ee:	e7e6      	b.n	368be <__swsetup_r+0x22>
   368f0:	075b      	lsls	r3, r3, #29
   368f2:	d513      	bpl.n	3691c <__swsetup_r+0x80>
   368f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   368f6:	2900      	cmp	r1, #0
   368f8:	d008      	beq.n	3690c <__swsetup_r+0x70>
   368fa:	0023      	movs	r3, r4
   368fc:	3344      	adds	r3, #68	; 0x44
   368fe:	4299      	cmp	r1, r3
   36900:	d002      	beq.n	36908 <__swsetup_r+0x6c>
   36902:	0030      	movs	r0, r6
   36904:	f7ff fc86 	bl	36214 <_free_r>
   36908:	2300      	movs	r3, #0
   3690a:	6363      	str	r3, [r4, #52]	; 0x34
   3690c:	2224      	movs	r2, #36	; 0x24
   3690e:	89a3      	ldrh	r3, [r4, #12]
   36910:	4393      	bics	r3, r2
   36912:	81a3      	strh	r3, [r4, #12]
   36914:	2300      	movs	r3, #0
   36916:	6063      	str	r3, [r4, #4]
   36918:	6923      	ldr	r3, [r4, #16]
   3691a:	6023      	str	r3, [r4, #0]
   3691c:	2308      	movs	r3, #8
   3691e:	89a2      	ldrh	r2, [r4, #12]
   36920:	4313      	orrs	r3, r2
   36922:	81a3      	strh	r3, [r4, #12]
   36924:	6923      	ldr	r3, [r4, #16]
   36926:	2b00      	cmp	r3, #0
   36928:	d10b      	bne.n	36942 <__swsetup_r+0xa6>
   3692a:	21a0      	movs	r1, #160	; 0xa0
   3692c:	2280      	movs	r2, #128	; 0x80
   3692e:	89a3      	ldrh	r3, [r4, #12]
   36930:	0089      	lsls	r1, r1, #2
   36932:	0092      	lsls	r2, r2, #2
   36934:	400b      	ands	r3, r1
   36936:	4293      	cmp	r3, r2
   36938:	d003      	beq.n	36942 <__swsetup_r+0xa6>
   3693a:	0021      	movs	r1, r4
   3693c:	0030      	movs	r0, r6
   3693e:	f000 f9e9 	bl	36d14 <__smakebuf_r>
   36942:	2301      	movs	r3, #1
   36944:	89a2      	ldrh	r2, [r4, #12]
   36946:	4013      	ands	r3, r2
   36948:	d011      	beq.n	3696e <__swsetup_r+0xd2>
   3694a:	2300      	movs	r3, #0
   3694c:	60a3      	str	r3, [r4, #8]
   3694e:	6963      	ldr	r3, [r4, #20]
   36950:	425b      	negs	r3, r3
   36952:	61a3      	str	r3, [r4, #24]
   36954:	2000      	movs	r0, #0
   36956:	6923      	ldr	r3, [r4, #16]
   36958:	4283      	cmp	r3, r0
   3695a:	d1be      	bne.n	368da <__swsetup_r+0x3e>
   3695c:	230c      	movs	r3, #12
   3695e:	5ee2      	ldrsh	r2, [r4, r3]
   36960:	0613      	lsls	r3, r2, #24
   36962:	d5ba      	bpl.n	368da <__swsetup_r+0x3e>
   36964:	2340      	movs	r3, #64	; 0x40
   36966:	4313      	orrs	r3, r2
   36968:	81a3      	strh	r3, [r4, #12]
   3696a:	3801      	subs	r0, #1
   3696c:	e7b5      	b.n	368da <__swsetup_r+0x3e>
   3696e:	0792      	lsls	r2, r2, #30
   36970:	d400      	bmi.n	36974 <__swsetup_r+0xd8>
   36972:	6963      	ldr	r3, [r4, #20]
   36974:	60a3      	str	r3, [r4, #8]
   36976:	e7ed      	b.n	36954 <__swsetup_r+0xb8>
   36978:	20000130 	.word	0x20000130
   3697c:	0003bc80 	.word	0x0003bc80
   36980:	0003bca0 	.word	0x0003bca0
   36984:	0003bc60 	.word	0x0003bc60

00036988 <__sflush_r>:
   36988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3698a:	898a      	ldrh	r2, [r1, #12]
   3698c:	0005      	movs	r5, r0
   3698e:	000c      	movs	r4, r1
   36990:	0713      	lsls	r3, r2, #28
   36992:	d460      	bmi.n	36a56 <__sflush_r+0xce>
   36994:	684b      	ldr	r3, [r1, #4]
   36996:	2b00      	cmp	r3, #0
   36998:	dc04      	bgt.n	369a4 <__sflush_r+0x1c>
   3699a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3699c:	2b00      	cmp	r3, #0
   3699e:	dc01      	bgt.n	369a4 <__sflush_r+0x1c>
   369a0:	2000      	movs	r0, #0
   369a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   369a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   369a6:	2f00      	cmp	r7, #0
   369a8:	d0fa      	beq.n	369a0 <__sflush_r+0x18>
   369aa:	2300      	movs	r3, #0
   369ac:	682e      	ldr	r6, [r5, #0]
   369ae:	602b      	str	r3, [r5, #0]
   369b0:	2380      	movs	r3, #128	; 0x80
   369b2:	015b      	lsls	r3, r3, #5
   369b4:	401a      	ands	r2, r3
   369b6:	d034      	beq.n	36a22 <__sflush_r+0x9a>
   369b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   369ba:	89a3      	ldrh	r3, [r4, #12]
   369bc:	075b      	lsls	r3, r3, #29
   369be:	d506      	bpl.n	369ce <__sflush_r+0x46>
   369c0:	6863      	ldr	r3, [r4, #4]
   369c2:	1ac0      	subs	r0, r0, r3
   369c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   369c6:	2b00      	cmp	r3, #0
   369c8:	d001      	beq.n	369ce <__sflush_r+0x46>
   369ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   369cc:	1ac0      	subs	r0, r0, r3
   369ce:	0002      	movs	r2, r0
   369d0:	6a21      	ldr	r1, [r4, #32]
   369d2:	2300      	movs	r3, #0
   369d4:	0028      	movs	r0, r5
   369d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   369d8:	47b8      	blx	r7
   369da:	89a1      	ldrh	r1, [r4, #12]
   369dc:	1c43      	adds	r3, r0, #1
   369de:	d106      	bne.n	369ee <__sflush_r+0x66>
   369e0:	682b      	ldr	r3, [r5, #0]
   369e2:	2b1d      	cmp	r3, #29
   369e4:	d831      	bhi.n	36a4a <__sflush_r+0xc2>
   369e6:	4a2c      	ldr	r2, [pc, #176]	; (36a98 <__sflush_r+0x110>)
   369e8:	40da      	lsrs	r2, r3
   369ea:	07d3      	lsls	r3, r2, #31
   369ec:	d52d      	bpl.n	36a4a <__sflush_r+0xc2>
   369ee:	2300      	movs	r3, #0
   369f0:	6063      	str	r3, [r4, #4]
   369f2:	6923      	ldr	r3, [r4, #16]
   369f4:	6023      	str	r3, [r4, #0]
   369f6:	04cb      	lsls	r3, r1, #19
   369f8:	d505      	bpl.n	36a06 <__sflush_r+0x7e>
   369fa:	1c43      	adds	r3, r0, #1
   369fc:	d102      	bne.n	36a04 <__sflush_r+0x7c>
   369fe:	682b      	ldr	r3, [r5, #0]
   36a00:	2b00      	cmp	r3, #0
   36a02:	d100      	bne.n	36a06 <__sflush_r+0x7e>
   36a04:	6560      	str	r0, [r4, #84]	; 0x54
   36a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36a08:	602e      	str	r6, [r5, #0]
   36a0a:	2900      	cmp	r1, #0
   36a0c:	d0c8      	beq.n	369a0 <__sflush_r+0x18>
   36a0e:	0023      	movs	r3, r4
   36a10:	3344      	adds	r3, #68	; 0x44
   36a12:	4299      	cmp	r1, r3
   36a14:	d002      	beq.n	36a1c <__sflush_r+0x94>
   36a16:	0028      	movs	r0, r5
   36a18:	f7ff fbfc 	bl	36214 <_free_r>
   36a1c:	2000      	movs	r0, #0
   36a1e:	6360      	str	r0, [r4, #52]	; 0x34
   36a20:	e7bf      	b.n	369a2 <__sflush_r+0x1a>
   36a22:	2301      	movs	r3, #1
   36a24:	6a21      	ldr	r1, [r4, #32]
   36a26:	0028      	movs	r0, r5
   36a28:	47b8      	blx	r7
   36a2a:	1c43      	adds	r3, r0, #1
   36a2c:	d1c5      	bne.n	369ba <__sflush_r+0x32>
   36a2e:	682b      	ldr	r3, [r5, #0]
   36a30:	2b00      	cmp	r3, #0
   36a32:	d0c2      	beq.n	369ba <__sflush_r+0x32>
   36a34:	2b1d      	cmp	r3, #29
   36a36:	d001      	beq.n	36a3c <__sflush_r+0xb4>
   36a38:	2b16      	cmp	r3, #22
   36a3a:	d101      	bne.n	36a40 <__sflush_r+0xb8>
   36a3c:	602e      	str	r6, [r5, #0]
   36a3e:	e7af      	b.n	369a0 <__sflush_r+0x18>
   36a40:	2340      	movs	r3, #64	; 0x40
   36a42:	89a2      	ldrh	r2, [r4, #12]
   36a44:	4313      	orrs	r3, r2
   36a46:	81a3      	strh	r3, [r4, #12]
   36a48:	e7ab      	b.n	369a2 <__sflush_r+0x1a>
   36a4a:	2340      	movs	r3, #64	; 0x40
   36a4c:	430b      	orrs	r3, r1
   36a4e:	2001      	movs	r0, #1
   36a50:	81a3      	strh	r3, [r4, #12]
   36a52:	4240      	negs	r0, r0
   36a54:	e7a5      	b.n	369a2 <__sflush_r+0x1a>
   36a56:	690f      	ldr	r7, [r1, #16]
   36a58:	2f00      	cmp	r7, #0
   36a5a:	d0a1      	beq.n	369a0 <__sflush_r+0x18>
   36a5c:	680b      	ldr	r3, [r1, #0]
   36a5e:	600f      	str	r7, [r1, #0]
   36a60:	1bdb      	subs	r3, r3, r7
   36a62:	9301      	str	r3, [sp, #4]
   36a64:	2300      	movs	r3, #0
   36a66:	0792      	lsls	r2, r2, #30
   36a68:	d100      	bne.n	36a6c <__sflush_r+0xe4>
   36a6a:	694b      	ldr	r3, [r1, #20]
   36a6c:	60a3      	str	r3, [r4, #8]
   36a6e:	9b01      	ldr	r3, [sp, #4]
   36a70:	2b00      	cmp	r3, #0
   36a72:	dc00      	bgt.n	36a76 <__sflush_r+0xee>
   36a74:	e794      	b.n	369a0 <__sflush_r+0x18>
   36a76:	9b01      	ldr	r3, [sp, #4]
   36a78:	003a      	movs	r2, r7
   36a7a:	6a21      	ldr	r1, [r4, #32]
   36a7c:	0028      	movs	r0, r5
   36a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   36a80:	47b0      	blx	r6
   36a82:	2800      	cmp	r0, #0
   36a84:	dc03      	bgt.n	36a8e <__sflush_r+0x106>
   36a86:	2340      	movs	r3, #64	; 0x40
   36a88:	89a2      	ldrh	r2, [r4, #12]
   36a8a:	4313      	orrs	r3, r2
   36a8c:	e7df      	b.n	36a4e <__sflush_r+0xc6>
   36a8e:	9b01      	ldr	r3, [sp, #4]
   36a90:	183f      	adds	r7, r7, r0
   36a92:	1a1b      	subs	r3, r3, r0
   36a94:	9301      	str	r3, [sp, #4]
   36a96:	e7ea      	b.n	36a6e <__sflush_r+0xe6>
   36a98:	20400001 	.word	0x20400001

00036a9c <_fflush_r>:
   36a9c:	690b      	ldr	r3, [r1, #16]
   36a9e:	b570      	push	{r4, r5, r6, lr}
   36aa0:	0005      	movs	r5, r0
   36aa2:	000c      	movs	r4, r1
   36aa4:	2b00      	cmp	r3, #0
   36aa6:	d101      	bne.n	36aac <_fflush_r+0x10>
   36aa8:	2000      	movs	r0, #0
   36aaa:	bd70      	pop	{r4, r5, r6, pc}
   36aac:	2800      	cmp	r0, #0
   36aae:	d004      	beq.n	36aba <_fflush_r+0x1e>
   36ab0:	6983      	ldr	r3, [r0, #24]
   36ab2:	2b00      	cmp	r3, #0
   36ab4:	d101      	bne.n	36aba <_fflush_r+0x1e>
   36ab6:	f000 f85f 	bl	36b78 <__sinit>
   36aba:	4b0b      	ldr	r3, [pc, #44]	; (36ae8 <_fflush_r+0x4c>)
   36abc:	429c      	cmp	r4, r3
   36abe:	d109      	bne.n	36ad4 <_fflush_r+0x38>
   36ac0:	686c      	ldr	r4, [r5, #4]
   36ac2:	220c      	movs	r2, #12
   36ac4:	5ea3      	ldrsh	r3, [r4, r2]
   36ac6:	2b00      	cmp	r3, #0
   36ac8:	d0ee      	beq.n	36aa8 <_fflush_r+0xc>
   36aca:	0021      	movs	r1, r4
   36acc:	0028      	movs	r0, r5
   36ace:	f7ff ff5b 	bl	36988 <__sflush_r>
   36ad2:	e7ea      	b.n	36aaa <_fflush_r+0xe>
   36ad4:	4b05      	ldr	r3, [pc, #20]	; (36aec <_fflush_r+0x50>)
   36ad6:	429c      	cmp	r4, r3
   36ad8:	d101      	bne.n	36ade <_fflush_r+0x42>
   36ada:	68ac      	ldr	r4, [r5, #8]
   36adc:	e7f1      	b.n	36ac2 <_fflush_r+0x26>
   36ade:	4b04      	ldr	r3, [pc, #16]	; (36af0 <_fflush_r+0x54>)
   36ae0:	429c      	cmp	r4, r3
   36ae2:	d1ee      	bne.n	36ac2 <_fflush_r+0x26>
   36ae4:	68ec      	ldr	r4, [r5, #12]
   36ae6:	e7ec      	b.n	36ac2 <_fflush_r+0x26>
   36ae8:	0003bc80 	.word	0x0003bc80
   36aec:	0003bca0 	.word	0x0003bca0
   36af0:	0003bc60 	.word	0x0003bc60

00036af4 <_cleanup_r>:
   36af4:	b510      	push	{r4, lr}
   36af6:	4902      	ldr	r1, [pc, #8]	; (36b00 <_cleanup_r+0xc>)
   36af8:	f000 f8b2 	bl	36c60 <_fwalk_reent>
   36afc:	bd10      	pop	{r4, pc}
   36afe:	46c0      	nop			; (mov r8, r8)
   36b00:	00036a9d 	.word	0x00036a9d

00036b04 <std.isra.0>:
   36b04:	2300      	movs	r3, #0
   36b06:	b510      	push	{r4, lr}
   36b08:	0004      	movs	r4, r0
   36b0a:	6003      	str	r3, [r0, #0]
   36b0c:	6043      	str	r3, [r0, #4]
   36b0e:	6083      	str	r3, [r0, #8]
   36b10:	8181      	strh	r1, [r0, #12]
   36b12:	6643      	str	r3, [r0, #100]	; 0x64
   36b14:	81c2      	strh	r2, [r0, #14]
   36b16:	6103      	str	r3, [r0, #16]
   36b18:	6143      	str	r3, [r0, #20]
   36b1a:	6183      	str	r3, [r0, #24]
   36b1c:	0019      	movs	r1, r3
   36b1e:	2208      	movs	r2, #8
   36b20:	305c      	adds	r0, #92	; 0x5c
   36b22:	f7ff fb6e 	bl	36202 <memset>
   36b26:	4b05      	ldr	r3, [pc, #20]	; (36b3c <std.isra.0+0x38>)
   36b28:	6224      	str	r4, [r4, #32]
   36b2a:	6263      	str	r3, [r4, #36]	; 0x24
   36b2c:	4b04      	ldr	r3, [pc, #16]	; (36b40 <std.isra.0+0x3c>)
   36b2e:	62a3      	str	r3, [r4, #40]	; 0x28
   36b30:	4b04      	ldr	r3, [pc, #16]	; (36b44 <std.isra.0+0x40>)
   36b32:	62e3      	str	r3, [r4, #44]	; 0x2c
   36b34:	4b04      	ldr	r3, [pc, #16]	; (36b48 <std.isra.0+0x44>)
   36b36:	6323      	str	r3, [r4, #48]	; 0x30
   36b38:	bd10      	pop	{r4, pc}
   36b3a:	46c0      	nop			; (mov r8, r8)
   36b3c:	000373a1 	.word	0x000373a1
   36b40:	000373c9 	.word	0x000373c9
   36b44:	00037401 	.word	0x00037401
   36b48:	0003742d 	.word	0x0003742d

00036b4c <__sfmoreglue>:
   36b4c:	b570      	push	{r4, r5, r6, lr}
   36b4e:	2568      	movs	r5, #104	; 0x68
   36b50:	1e4a      	subs	r2, r1, #1
   36b52:	4355      	muls	r5, r2
   36b54:	000e      	movs	r6, r1
   36b56:	0029      	movs	r1, r5
   36b58:	3174      	adds	r1, #116	; 0x74
   36b5a:	f7ff fba5 	bl	362a8 <_malloc_r>
   36b5e:	1e04      	subs	r4, r0, #0
   36b60:	d008      	beq.n	36b74 <__sfmoreglue+0x28>
   36b62:	2100      	movs	r1, #0
   36b64:	002a      	movs	r2, r5
   36b66:	6001      	str	r1, [r0, #0]
   36b68:	6046      	str	r6, [r0, #4]
   36b6a:	300c      	adds	r0, #12
   36b6c:	60a0      	str	r0, [r4, #8]
   36b6e:	3268      	adds	r2, #104	; 0x68
   36b70:	f7ff fb47 	bl	36202 <memset>
   36b74:	0020      	movs	r0, r4
   36b76:	bd70      	pop	{r4, r5, r6, pc}

00036b78 <__sinit>:
   36b78:	6983      	ldr	r3, [r0, #24]
   36b7a:	b513      	push	{r0, r1, r4, lr}
   36b7c:	0004      	movs	r4, r0
   36b7e:	2b00      	cmp	r3, #0
   36b80:	d128      	bne.n	36bd4 <__sinit+0x5c>
   36b82:	6483      	str	r3, [r0, #72]	; 0x48
   36b84:	64c3      	str	r3, [r0, #76]	; 0x4c
   36b86:	6503      	str	r3, [r0, #80]	; 0x50
   36b88:	4b13      	ldr	r3, [pc, #76]	; (36bd8 <__sinit+0x60>)
   36b8a:	4a14      	ldr	r2, [pc, #80]	; (36bdc <__sinit+0x64>)
   36b8c:	681b      	ldr	r3, [r3, #0]
   36b8e:	6282      	str	r2, [r0, #40]	; 0x28
   36b90:	9301      	str	r3, [sp, #4]
   36b92:	4298      	cmp	r0, r3
   36b94:	d101      	bne.n	36b9a <__sinit+0x22>
   36b96:	2301      	movs	r3, #1
   36b98:	6183      	str	r3, [r0, #24]
   36b9a:	0020      	movs	r0, r4
   36b9c:	f000 f820 	bl	36be0 <__sfp>
   36ba0:	6060      	str	r0, [r4, #4]
   36ba2:	0020      	movs	r0, r4
   36ba4:	f000 f81c 	bl	36be0 <__sfp>
   36ba8:	60a0      	str	r0, [r4, #8]
   36baa:	0020      	movs	r0, r4
   36bac:	f000 f818 	bl	36be0 <__sfp>
   36bb0:	2200      	movs	r2, #0
   36bb2:	60e0      	str	r0, [r4, #12]
   36bb4:	2104      	movs	r1, #4
   36bb6:	6860      	ldr	r0, [r4, #4]
   36bb8:	f7ff ffa4 	bl	36b04 <std.isra.0>
   36bbc:	2201      	movs	r2, #1
   36bbe:	2109      	movs	r1, #9
   36bc0:	68a0      	ldr	r0, [r4, #8]
   36bc2:	f7ff ff9f 	bl	36b04 <std.isra.0>
   36bc6:	2202      	movs	r2, #2
   36bc8:	2112      	movs	r1, #18
   36bca:	68e0      	ldr	r0, [r4, #12]
   36bcc:	f7ff ff9a 	bl	36b04 <std.isra.0>
   36bd0:	2301      	movs	r3, #1
   36bd2:	61a3      	str	r3, [r4, #24]
   36bd4:	bd13      	pop	{r0, r1, r4, pc}
   36bd6:	46c0      	nop			; (mov r8, r8)
   36bd8:	0003bc5c 	.word	0x0003bc5c
   36bdc:	00036af5 	.word	0x00036af5

00036be0 <__sfp>:
   36be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36be2:	4b1e      	ldr	r3, [pc, #120]	; (36c5c <__sfp+0x7c>)
   36be4:	0007      	movs	r7, r0
   36be6:	681e      	ldr	r6, [r3, #0]
   36be8:	69b3      	ldr	r3, [r6, #24]
   36bea:	2b00      	cmp	r3, #0
   36bec:	d102      	bne.n	36bf4 <__sfp+0x14>
   36bee:	0030      	movs	r0, r6
   36bf0:	f7ff ffc2 	bl	36b78 <__sinit>
   36bf4:	3648      	adds	r6, #72	; 0x48
   36bf6:	68b4      	ldr	r4, [r6, #8]
   36bf8:	6873      	ldr	r3, [r6, #4]
   36bfa:	3b01      	subs	r3, #1
   36bfc:	d504      	bpl.n	36c08 <__sfp+0x28>
   36bfe:	6833      	ldr	r3, [r6, #0]
   36c00:	2b00      	cmp	r3, #0
   36c02:	d007      	beq.n	36c14 <__sfp+0x34>
   36c04:	6836      	ldr	r6, [r6, #0]
   36c06:	e7f6      	b.n	36bf6 <__sfp+0x16>
   36c08:	220c      	movs	r2, #12
   36c0a:	5ea5      	ldrsh	r5, [r4, r2]
   36c0c:	2d00      	cmp	r5, #0
   36c0e:	d00d      	beq.n	36c2c <__sfp+0x4c>
   36c10:	3468      	adds	r4, #104	; 0x68
   36c12:	e7f2      	b.n	36bfa <__sfp+0x1a>
   36c14:	2104      	movs	r1, #4
   36c16:	0038      	movs	r0, r7
   36c18:	f7ff ff98 	bl	36b4c <__sfmoreglue>
   36c1c:	6030      	str	r0, [r6, #0]
   36c1e:	2800      	cmp	r0, #0
   36c20:	d1f0      	bne.n	36c04 <__sfp+0x24>
   36c22:	230c      	movs	r3, #12
   36c24:	0004      	movs	r4, r0
   36c26:	603b      	str	r3, [r7, #0]
   36c28:	0020      	movs	r0, r4
   36c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36c2c:	2301      	movs	r3, #1
   36c2e:	0020      	movs	r0, r4
   36c30:	425b      	negs	r3, r3
   36c32:	81e3      	strh	r3, [r4, #14]
   36c34:	3302      	adds	r3, #2
   36c36:	81a3      	strh	r3, [r4, #12]
   36c38:	6665      	str	r5, [r4, #100]	; 0x64
   36c3a:	6025      	str	r5, [r4, #0]
   36c3c:	60a5      	str	r5, [r4, #8]
   36c3e:	6065      	str	r5, [r4, #4]
   36c40:	6125      	str	r5, [r4, #16]
   36c42:	6165      	str	r5, [r4, #20]
   36c44:	61a5      	str	r5, [r4, #24]
   36c46:	2208      	movs	r2, #8
   36c48:	0029      	movs	r1, r5
   36c4a:	305c      	adds	r0, #92	; 0x5c
   36c4c:	f7ff fad9 	bl	36202 <memset>
   36c50:	6365      	str	r5, [r4, #52]	; 0x34
   36c52:	63a5      	str	r5, [r4, #56]	; 0x38
   36c54:	64a5      	str	r5, [r4, #72]	; 0x48
   36c56:	64e5      	str	r5, [r4, #76]	; 0x4c
   36c58:	e7e6      	b.n	36c28 <__sfp+0x48>
   36c5a:	46c0      	nop			; (mov r8, r8)
   36c5c:	0003bc5c 	.word	0x0003bc5c

00036c60 <_fwalk_reent>:
   36c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36c62:	0004      	movs	r4, r0
   36c64:	0007      	movs	r7, r0
   36c66:	2600      	movs	r6, #0
   36c68:	9101      	str	r1, [sp, #4]
   36c6a:	3448      	adds	r4, #72	; 0x48
   36c6c:	2c00      	cmp	r4, #0
   36c6e:	d101      	bne.n	36c74 <_fwalk_reent+0x14>
   36c70:	0030      	movs	r0, r6
   36c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36c74:	6863      	ldr	r3, [r4, #4]
   36c76:	68a5      	ldr	r5, [r4, #8]
   36c78:	9300      	str	r3, [sp, #0]
   36c7a:	9b00      	ldr	r3, [sp, #0]
   36c7c:	3b01      	subs	r3, #1
   36c7e:	9300      	str	r3, [sp, #0]
   36c80:	d501      	bpl.n	36c86 <_fwalk_reent+0x26>
   36c82:	6824      	ldr	r4, [r4, #0]
   36c84:	e7f2      	b.n	36c6c <_fwalk_reent+0xc>
   36c86:	89ab      	ldrh	r3, [r5, #12]
   36c88:	2b01      	cmp	r3, #1
   36c8a:	d908      	bls.n	36c9e <_fwalk_reent+0x3e>
   36c8c:	220e      	movs	r2, #14
   36c8e:	5eab      	ldrsh	r3, [r5, r2]
   36c90:	3301      	adds	r3, #1
   36c92:	d004      	beq.n	36c9e <_fwalk_reent+0x3e>
   36c94:	0029      	movs	r1, r5
   36c96:	0038      	movs	r0, r7
   36c98:	9b01      	ldr	r3, [sp, #4]
   36c9a:	4798      	blx	r3
   36c9c:	4306      	orrs	r6, r0
   36c9e:	3568      	adds	r5, #104	; 0x68
   36ca0:	e7eb      	b.n	36c7a <_fwalk_reent+0x1a>

00036ca2 <__locale_ctype_ptr_l>:
   36ca2:	30ec      	adds	r0, #236	; 0xec
   36ca4:	6800      	ldr	r0, [r0, #0]
   36ca6:	4770      	bx	lr

00036ca8 <__locale_ctype_ptr>:
   36ca8:	4b04      	ldr	r3, [pc, #16]	; (36cbc <__locale_ctype_ptr+0x14>)
   36caa:	681b      	ldr	r3, [r3, #0]
   36cac:	6a1b      	ldr	r3, [r3, #32]
   36cae:	2b00      	cmp	r3, #0
   36cb0:	d100      	bne.n	36cb4 <__locale_ctype_ptr+0xc>
   36cb2:	4b03      	ldr	r3, [pc, #12]	; (36cc0 <__locale_ctype_ptr+0x18>)
   36cb4:	33ec      	adds	r3, #236	; 0xec
   36cb6:	6818      	ldr	r0, [r3, #0]
   36cb8:	4770      	bx	lr
   36cba:	46c0      	nop			; (mov r8, r8)
   36cbc:	20000130 	.word	0x20000130
   36cc0:	20000194 	.word	0x20000194

00036cc4 <__swhatbuf_r>:
   36cc4:	b570      	push	{r4, r5, r6, lr}
   36cc6:	000e      	movs	r6, r1
   36cc8:	001d      	movs	r5, r3
   36cca:	230e      	movs	r3, #14
   36ccc:	5ec9      	ldrsh	r1, [r1, r3]
   36cce:	b090      	sub	sp, #64	; 0x40
   36cd0:	0014      	movs	r4, r2
   36cd2:	2900      	cmp	r1, #0
   36cd4:	da07      	bge.n	36ce6 <__swhatbuf_r+0x22>
   36cd6:	2300      	movs	r3, #0
   36cd8:	602b      	str	r3, [r5, #0]
   36cda:	89b3      	ldrh	r3, [r6, #12]
   36cdc:	061b      	lsls	r3, r3, #24
   36cde:	d411      	bmi.n	36d04 <__swhatbuf_r+0x40>
   36ce0:	2380      	movs	r3, #128	; 0x80
   36ce2:	00db      	lsls	r3, r3, #3
   36ce4:	e00f      	b.n	36d06 <__swhatbuf_r+0x42>
   36ce6:	aa01      	add	r2, sp, #4
   36ce8:	f000 fbe6 	bl	374b8 <_fstat_r>
   36cec:	2800      	cmp	r0, #0
   36cee:	dbf2      	blt.n	36cd6 <__swhatbuf_r+0x12>
   36cf0:	22f0      	movs	r2, #240	; 0xf0
   36cf2:	9b02      	ldr	r3, [sp, #8]
   36cf4:	0212      	lsls	r2, r2, #8
   36cf6:	4013      	ands	r3, r2
   36cf8:	4a05      	ldr	r2, [pc, #20]	; (36d10 <__swhatbuf_r+0x4c>)
   36cfa:	189b      	adds	r3, r3, r2
   36cfc:	425a      	negs	r2, r3
   36cfe:	4153      	adcs	r3, r2
   36d00:	602b      	str	r3, [r5, #0]
   36d02:	e7ed      	b.n	36ce0 <__swhatbuf_r+0x1c>
   36d04:	2340      	movs	r3, #64	; 0x40
   36d06:	2000      	movs	r0, #0
   36d08:	6023      	str	r3, [r4, #0]
   36d0a:	b010      	add	sp, #64	; 0x40
   36d0c:	bd70      	pop	{r4, r5, r6, pc}
   36d0e:	46c0      	nop			; (mov r8, r8)
   36d10:	ffffe000 	.word	0xffffe000

00036d14 <__smakebuf_r>:
   36d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36d16:	2602      	movs	r6, #2
   36d18:	898b      	ldrh	r3, [r1, #12]
   36d1a:	0005      	movs	r5, r0
   36d1c:	000c      	movs	r4, r1
   36d1e:	4233      	tst	r3, r6
   36d20:	d006      	beq.n	36d30 <__smakebuf_r+0x1c>
   36d22:	0023      	movs	r3, r4
   36d24:	3347      	adds	r3, #71	; 0x47
   36d26:	6023      	str	r3, [r4, #0]
   36d28:	6123      	str	r3, [r4, #16]
   36d2a:	2301      	movs	r3, #1
   36d2c:	6163      	str	r3, [r4, #20]
   36d2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36d30:	ab01      	add	r3, sp, #4
   36d32:	466a      	mov	r2, sp
   36d34:	f7ff ffc6 	bl	36cc4 <__swhatbuf_r>
   36d38:	9900      	ldr	r1, [sp, #0]
   36d3a:	0007      	movs	r7, r0
   36d3c:	0028      	movs	r0, r5
   36d3e:	f7ff fab3 	bl	362a8 <_malloc_r>
   36d42:	2800      	cmp	r0, #0
   36d44:	d108      	bne.n	36d58 <__smakebuf_r+0x44>
   36d46:	220c      	movs	r2, #12
   36d48:	5ea3      	ldrsh	r3, [r4, r2]
   36d4a:	059a      	lsls	r2, r3, #22
   36d4c:	d4ef      	bmi.n	36d2e <__smakebuf_r+0x1a>
   36d4e:	2203      	movs	r2, #3
   36d50:	4393      	bics	r3, r2
   36d52:	431e      	orrs	r6, r3
   36d54:	81a6      	strh	r6, [r4, #12]
   36d56:	e7e4      	b.n	36d22 <__smakebuf_r+0xe>
   36d58:	4b0f      	ldr	r3, [pc, #60]	; (36d98 <__smakebuf_r+0x84>)
   36d5a:	62ab      	str	r3, [r5, #40]	; 0x28
   36d5c:	2380      	movs	r3, #128	; 0x80
   36d5e:	89a2      	ldrh	r2, [r4, #12]
   36d60:	6020      	str	r0, [r4, #0]
   36d62:	4313      	orrs	r3, r2
   36d64:	81a3      	strh	r3, [r4, #12]
   36d66:	9b00      	ldr	r3, [sp, #0]
   36d68:	6120      	str	r0, [r4, #16]
   36d6a:	6163      	str	r3, [r4, #20]
   36d6c:	9b01      	ldr	r3, [sp, #4]
   36d6e:	2b00      	cmp	r3, #0
   36d70:	d00d      	beq.n	36d8e <__smakebuf_r+0x7a>
   36d72:	230e      	movs	r3, #14
   36d74:	5ee1      	ldrsh	r1, [r4, r3]
   36d76:	0028      	movs	r0, r5
   36d78:	f000 fbb0 	bl	374dc <_isatty_r>
   36d7c:	2800      	cmp	r0, #0
   36d7e:	d006      	beq.n	36d8e <__smakebuf_r+0x7a>
   36d80:	2203      	movs	r2, #3
   36d82:	89a3      	ldrh	r3, [r4, #12]
   36d84:	4393      	bics	r3, r2
   36d86:	001a      	movs	r2, r3
   36d88:	2301      	movs	r3, #1
   36d8a:	4313      	orrs	r3, r2
   36d8c:	81a3      	strh	r3, [r4, #12]
   36d8e:	89a0      	ldrh	r0, [r4, #12]
   36d90:	4338      	orrs	r0, r7
   36d92:	81a0      	strh	r0, [r4, #12]
   36d94:	e7cb      	b.n	36d2e <__smakebuf_r+0x1a>
   36d96:	46c0      	nop			; (mov r8, r8)
   36d98:	00036af5 	.word	0x00036af5

00036d9c <__ascii_mbtowc>:
   36d9c:	b082      	sub	sp, #8
   36d9e:	2900      	cmp	r1, #0
   36da0:	d100      	bne.n	36da4 <__ascii_mbtowc+0x8>
   36da2:	a901      	add	r1, sp, #4
   36da4:	1e10      	subs	r0, r2, #0
   36da6:	d006      	beq.n	36db6 <__ascii_mbtowc+0x1a>
   36da8:	2b00      	cmp	r3, #0
   36daa:	d006      	beq.n	36dba <__ascii_mbtowc+0x1e>
   36dac:	7813      	ldrb	r3, [r2, #0]
   36dae:	600b      	str	r3, [r1, #0]
   36db0:	7810      	ldrb	r0, [r2, #0]
   36db2:	1e43      	subs	r3, r0, #1
   36db4:	4198      	sbcs	r0, r3
   36db6:	b002      	add	sp, #8
   36db8:	4770      	bx	lr
   36dba:	2002      	movs	r0, #2
   36dbc:	4240      	negs	r0, r0
   36dbe:	e7fa      	b.n	36db6 <__ascii_mbtowc+0x1a>

00036dc0 <__malloc_lock>:
   36dc0:	4770      	bx	lr

00036dc2 <__malloc_unlock>:
   36dc2:	4770      	bx	lr

00036dc4 <__ssputs_r>:
   36dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   36dc6:	688e      	ldr	r6, [r1, #8]
   36dc8:	b085      	sub	sp, #20
   36dca:	0007      	movs	r7, r0
   36dcc:	000c      	movs	r4, r1
   36dce:	9203      	str	r2, [sp, #12]
   36dd0:	9301      	str	r3, [sp, #4]
   36dd2:	429e      	cmp	r6, r3
   36dd4:	d839      	bhi.n	36e4a <__ssputs_r+0x86>
   36dd6:	2390      	movs	r3, #144	; 0x90
   36dd8:	898a      	ldrh	r2, [r1, #12]
   36dda:	00db      	lsls	r3, r3, #3
   36ddc:	421a      	tst	r2, r3
   36dde:	d034      	beq.n	36e4a <__ssputs_r+0x86>
   36de0:	2503      	movs	r5, #3
   36de2:	6909      	ldr	r1, [r1, #16]
   36de4:	6823      	ldr	r3, [r4, #0]
   36de6:	1a5b      	subs	r3, r3, r1
   36de8:	9302      	str	r3, [sp, #8]
   36dea:	6963      	ldr	r3, [r4, #20]
   36dec:	9802      	ldr	r0, [sp, #8]
   36dee:	435d      	muls	r5, r3
   36df0:	0feb      	lsrs	r3, r5, #31
   36df2:	195d      	adds	r5, r3, r5
   36df4:	9b01      	ldr	r3, [sp, #4]
   36df6:	106d      	asrs	r5, r5, #1
   36df8:	3301      	adds	r3, #1
   36dfa:	181b      	adds	r3, r3, r0
   36dfc:	42ab      	cmp	r3, r5
   36dfe:	d900      	bls.n	36e02 <__ssputs_r+0x3e>
   36e00:	001d      	movs	r5, r3
   36e02:	0553      	lsls	r3, r2, #21
   36e04:	d532      	bpl.n	36e6c <__ssputs_r+0xa8>
   36e06:	0029      	movs	r1, r5
   36e08:	0038      	movs	r0, r7
   36e0a:	f7ff fa4d 	bl	362a8 <_malloc_r>
   36e0e:	1e06      	subs	r6, r0, #0
   36e10:	d109      	bne.n	36e26 <__ssputs_r+0x62>
   36e12:	230c      	movs	r3, #12
   36e14:	603b      	str	r3, [r7, #0]
   36e16:	2340      	movs	r3, #64	; 0x40
   36e18:	2001      	movs	r0, #1
   36e1a:	89a2      	ldrh	r2, [r4, #12]
   36e1c:	4240      	negs	r0, r0
   36e1e:	4313      	orrs	r3, r2
   36e20:	81a3      	strh	r3, [r4, #12]
   36e22:	b005      	add	sp, #20
   36e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36e26:	9a02      	ldr	r2, [sp, #8]
   36e28:	6921      	ldr	r1, [r4, #16]
   36e2a:	f7ff f9cf 	bl	361cc <memcpy>
   36e2e:	89a3      	ldrh	r3, [r4, #12]
   36e30:	4a14      	ldr	r2, [pc, #80]	; (36e84 <__ssputs_r+0xc0>)
   36e32:	401a      	ands	r2, r3
   36e34:	2380      	movs	r3, #128	; 0x80
   36e36:	4313      	orrs	r3, r2
   36e38:	81a3      	strh	r3, [r4, #12]
   36e3a:	9b02      	ldr	r3, [sp, #8]
   36e3c:	6126      	str	r6, [r4, #16]
   36e3e:	18f6      	adds	r6, r6, r3
   36e40:	6026      	str	r6, [r4, #0]
   36e42:	6165      	str	r5, [r4, #20]
   36e44:	9e01      	ldr	r6, [sp, #4]
   36e46:	1aed      	subs	r5, r5, r3
   36e48:	60a5      	str	r5, [r4, #8]
   36e4a:	9b01      	ldr	r3, [sp, #4]
   36e4c:	42b3      	cmp	r3, r6
   36e4e:	d200      	bcs.n	36e52 <__ssputs_r+0x8e>
   36e50:	001e      	movs	r6, r3
   36e52:	0032      	movs	r2, r6
   36e54:	9903      	ldr	r1, [sp, #12]
   36e56:	6820      	ldr	r0, [r4, #0]
   36e58:	f7ff f9c1 	bl	361de <memmove>
   36e5c:	68a3      	ldr	r3, [r4, #8]
   36e5e:	2000      	movs	r0, #0
   36e60:	1b9b      	subs	r3, r3, r6
   36e62:	60a3      	str	r3, [r4, #8]
   36e64:	6823      	ldr	r3, [r4, #0]
   36e66:	199e      	adds	r6, r3, r6
   36e68:	6026      	str	r6, [r4, #0]
   36e6a:	e7da      	b.n	36e22 <__ssputs_r+0x5e>
   36e6c:	002a      	movs	r2, r5
   36e6e:	0038      	movs	r0, r7
   36e70:	f000 fb65 	bl	3753e <_realloc_r>
   36e74:	1e06      	subs	r6, r0, #0
   36e76:	d1e0      	bne.n	36e3a <__ssputs_r+0x76>
   36e78:	6921      	ldr	r1, [r4, #16]
   36e7a:	0038      	movs	r0, r7
   36e7c:	f7ff f9ca 	bl	36214 <_free_r>
   36e80:	e7c7      	b.n	36e12 <__ssputs_r+0x4e>
   36e82:	46c0      	nop			; (mov r8, r8)
   36e84:	fffffb7f 	.word	0xfffffb7f

00036e88 <_svfiprintf_r>:
   36e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   36e8a:	b09f      	sub	sp, #124	; 0x7c
   36e8c:	9002      	str	r0, [sp, #8]
   36e8e:	9305      	str	r3, [sp, #20]
   36e90:	898b      	ldrh	r3, [r1, #12]
   36e92:	000f      	movs	r7, r1
   36e94:	0016      	movs	r6, r2
   36e96:	061b      	lsls	r3, r3, #24
   36e98:	d511      	bpl.n	36ebe <_svfiprintf_r+0x36>
   36e9a:	690b      	ldr	r3, [r1, #16]
   36e9c:	2b00      	cmp	r3, #0
   36e9e:	d10e      	bne.n	36ebe <_svfiprintf_r+0x36>
   36ea0:	2140      	movs	r1, #64	; 0x40
   36ea2:	f7ff fa01 	bl	362a8 <_malloc_r>
   36ea6:	6038      	str	r0, [r7, #0]
   36ea8:	6138      	str	r0, [r7, #16]
   36eaa:	2800      	cmp	r0, #0
   36eac:	d105      	bne.n	36eba <_svfiprintf_r+0x32>
   36eae:	230c      	movs	r3, #12
   36eb0:	9a02      	ldr	r2, [sp, #8]
   36eb2:	3801      	subs	r0, #1
   36eb4:	6013      	str	r3, [r2, #0]
   36eb6:	b01f      	add	sp, #124	; 0x7c
   36eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36eba:	2340      	movs	r3, #64	; 0x40
   36ebc:	617b      	str	r3, [r7, #20]
   36ebe:	2300      	movs	r3, #0
   36ec0:	ad06      	add	r5, sp, #24
   36ec2:	616b      	str	r3, [r5, #20]
   36ec4:	3320      	adds	r3, #32
   36ec6:	766b      	strb	r3, [r5, #25]
   36ec8:	3310      	adds	r3, #16
   36eca:	76ab      	strb	r3, [r5, #26]
   36ecc:	0034      	movs	r4, r6
   36ece:	7823      	ldrb	r3, [r4, #0]
   36ed0:	2b00      	cmp	r3, #0
   36ed2:	d147      	bne.n	36f64 <_svfiprintf_r+0xdc>
   36ed4:	1ba3      	subs	r3, r4, r6
   36ed6:	9304      	str	r3, [sp, #16]
   36ed8:	d00d      	beq.n	36ef6 <_svfiprintf_r+0x6e>
   36eda:	1ba3      	subs	r3, r4, r6
   36edc:	0032      	movs	r2, r6
   36ede:	0039      	movs	r1, r7
   36ee0:	9802      	ldr	r0, [sp, #8]
   36ee2:	f7ff ff6f 	bl	36dc4 <__ssputs_r>
   36ee6:	1c43      	adds	r3, r0, #1
   36ee8:	d100      	bne.n	36eec <_svfiprintf_r+0x64>
   36eea:	e0b5      	b.n	37058 <_svfiprintf_r+0x1d0>
   36eec:	696a      	ldr	r2, [r5, #20]
   36eee:	9b04      	ldr	r3, [sp, #16]
   36ef0:	4694      	mov	ip, r2
   36ef2:	4463      	add	r3, ip
   36ef4:	616b      	str	r3, [r5, #20]
   36ef6:	7823      	ldrb	r3, [r4, #0]
   36ef8:	2b00      	cmp	r3, #0
   36efa:	d100      	bne.n	36efe <_svfiprintf_r+0x76>
   36efc:	e0ac      	b.n	37058 <_svfiprintf_r+0x1d0>
   36efe:	2201      	movs	r2, #1
   36f00:	2300      	movs	r3, #0
   36f02:	4252      	negs	r2, r2
   36f04:	606a      	str	r2, [r5, #4]
   36f06:	a902      	add	r1, sp, #8
   36f08:	3254      	adds	r2, #84	; 0x54
   36f0a:	1852      	adds	r2, r2, r1
   36f0c:	3401      	adds	r4, #1
   36f0e:	602b      	str	r3, [r5, #0]
   36f10:	60eb      	str	r3, [r5, #12]
   36f12:	60ab      	str	r3, [r5, #8]
   36f14:	7013      	strb	r3, [r2, #0]
   36f16:	65ab      	str	r3, [r5, #88]	; 0x58
   36f18:	4e58      	ldr	r6, [pc, #352]	; (3707c <_svfiprintf_r+0x1f4>)
   36f1a:	2205      	movs	r2, #5
   36f1c:	7821      	ldrb	r1, [r4, #0]
   36f1e:	0030      	movs	r0, r6
   36f20:	f000 fb02 	bl	37528 <memchr>
   36f24:	1c62      	adds	r2, r4, #1
   36f26:	2800      	cmp	r0, #0
   36f28:	d120      	bne.n	36f6c <_svfiprintf_r+0xe4>
   36f2a:	6829      	ldr	r1, [r5, #0]
   36f2c:	06cb      	lsls	r3, r1, #27
   36f2e:	d504      	bpl.n	36f3a <_svfiprintf_r+0xb2>
   36f30:	2353      	movs	r3, #83	; 0x53
   36f32:	ae02      	add	r6, sp, #8
   36f34:	3020      	adds	r0, #32
   36f36:	199b      	adds	r3, r3, r6
   36f38:	7018      	strb	r0, [r3, #0]
   36f3a:	070b      	lsls	r3, r1, #28
   36f3c:	d504      	bpl.n	36f48 <_svfiprintf_r+0xc0>
   36f3e:	2353      	movs	r3, #83	; 0x53
   36f40:	202b      	movs	r0, #43	; 0x2b
   36f42:	ae02      	add	r6, sp, #8
   36f44:	199b      	adds	r3, r3, r6
   36f46:	7018      	strb	r0, [r3, #0]
   36f48:	7823      	ldrb	r3, [r4, #0]
   36f4a:	2b2a      	cmp	r3, #42	; 0x2a
   36f4c:	d016      	beq.n	36f7c <_svfiprintf_r+0xf4>
   36f4e:	2000      	movs	r0, #0
   36f50:	210a      	movs	r1, #10
   36f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36f54:	7822      	ldrb	r2, [r4, #0]
   36f56:	3a30      	subs	r2, #48	; 0x30
   36f58:	2a09      	cmp	r2, #9
   36f5a:	d955      	bls.n	37008 <_svfiprintf_r+0x180>
   36f5c:	2800      	cmp	r0, #0
   36f5e:	d015      	beq.n	36f8c <_svfiprintf_r+0x104>
   36f60:	9309      	str	r3, [sp, #36]	; 0x24
   36f62:	e013      	b.n	36f8c <_svfiprintf_r+0x104>
   36f64:	2b25      	cmp	r3, #37	; 0x25
   36f66:	d0b5      	beq.n	36ed4 <_svfiprintf_r+0x4c>
   36f68:	3401      	adds	r4, #1
   36f6a:	e7b0      	b.n	36ece <_svfiprintf_r+0x46>
   36f6c:	2301      	movs	r3, #1
   36f6e:	1b80      	subs	r0, r0, r6
   36f70:	4083      	lsls	r3, r0
   36f72:	6829      	ldr	r1, [r5, #0]
   36f74:	0014      	movs	r4, r2
   36f76:	430b      	orrs	r3, r1
   36f78:	602b      	str	r3, [r5, #0]
   36f7a:	e7cd      	b.n	36f18 <_svfiprintf_r+0x90>
   36f7c:	9b05      	ldr	r3, [sp, #20]
   36f7e:	1d18      	adds	r0, r3, #4
   36f80:	681b      	ldr	r3, [r3, #0]
   36f82:	9005      	str	r0, [sp, #20]
   36f84:	2b00      	cmp	r3, #0
   36f86:	db39      	blt.n	36ffc <_svfiprintf_r+0x174>
   36f88:	9309      	str	r3, [sp, #36]	; 0x24
   36f8a:	0014      	movs	r4, r2
   36f8c:	7823      	ldrb	r3, [r4, #0]
   36f8e:	2b2e      	cmp	r3, #46	; 0x2e
   36f90:	d10b      	bne.n	36faa <_svfiprintf_r+0x122>
   36f92:	7863      	ldrb	r3, [r4, #1]
   36f94:	1c62      	adds	r2, r4, #1
   36f96:	2b2a      	cmp	r3, #42	; 0x2a
   36f98:	d13e      	bne.n	37018 <_svfiprintf_r+0x190>
   36f9a:	9b05      	ldr	r3, [sp, #20]
   36f9c:	3402      	adds	r4, #2
   36f9e:	1d1a      	adds	r2, r3, #4
   36fa0:	681b      	ldr	r3, [r3, #0]
   36fa2:	9205      	str	r2, [sp, #20]
   36fa4:	2b00      	cmp	r3, #0
   36fa6:	db34      	blt.n	37012 <_svfiprintf_r+0x18a>
   36fa8:	9307      	str	r3, [sp, #28]
   36faa:	4e35      	ldr	r6, [pc, #212]	; (37080 <_svfiprintf_r+0x1f8>)
   36fac:	7821      	ldrb	r1, [r4, #0]
   36fae:	2203      	movs	r2, #3
   36fb0:	0030      	movs	r0, r6
   36fb2:	f000 fab9 	bl	37528 <memchr>
   36fb6:	2800      	cmp	r0, #0
   36fb8:	d006      	beq.n	36fc8 <_svfiprintf_r+0x140>
   36fba:	2340      	movs	r3, #64	; 0x40
   36fbc:	1b80      	subs	r0, r0, r6
   36fbe:	4083      	lsls	r3, r0
   36fc0:	682a      	ldr	r2, [r5, #0]
   36fc2:	3401      	adds	r4, #1
   36fc4:	4313      	orrs	r3, r2
   36fc6:	602b      	str	r3, [r5, #0]
   36fc8:	7821      	ldrb	r1, [r4, #0]
   36fca:	2206      	movs	r2, #6
   36fcc:	482d      	ldr	r0, [pc, #180]	; (37084 <_svfiprintf_r+0x1fc>)
   36fce:	1c66      	adds	r6, r4, #1
   36fd0:	7629      	strb	r1, [r5, #24]
   36fd2:	f000 faa9 	bl	37528 <memchr>
   36fd6:	2800      	cmp	r0, #0
   36fd8:	d046      	beq.n	37068 <_svfiprintf_r+0x1e0>
   36fda:	4b2b      	ldr	r3, [pc, #172]	; (37088 <_svfiprintf_r+0x200>)
   36fdc:	2b00      	cmp	r3, #0
   36fde:	d12f      	bne.n	37040 <_svfiprintf_r+0x1b8>
   36fe0:	6829      	ldr	r1, [r5, #0]
   36fe2:	9b05      	ldr	r3, [sp, #20]
   36fe4:	2207      	movs	r2, #7
   36fe6:	05c9      	lsls	r1, r1, #23
   36fe8:	d528      	bpl.n	3703c <_svfiprintf_r+0x1b4>
   36fea:	189b      	adds	r3, r3, r2
   36fec:	4393      	bics	r3, r2
   36fee:	3308      	adds	r3, #8
   36ff0:	9305      	str	r3, [sp, #20]
   36ff2:	696b      	ldr	r3, [r5, #20]
   36ff4:	9a03      	ldr	r2, [sp, #12]
   36ff6:	189b      	adds	r3, r3, r2
   36ff8:	616b      	str	r3, [r5, #20]
   36ffa:	e767      	b.n	36ecc <_svfiprintf_r+0x44>
   36ffc:	425b      	negs	r3, r3
   36ffe:	60eb      	str	r3, [r5, #12]
   37000:	2302      	movs	r3, #2
   37002:	430b      	orrs	r3, r1
   37004:	602b      	str	r3, [r5, #0]
   37006:	e7c0      	b.n	36f8a <_svfiprintf_r+0x102>
   37008:	434b      	muls	r3, r1
   3700a:	3401      	adds	r4, #1
   3700c:	189b      	adds	r3, r3, r2
   3700e:	2001      	movs	r0, #1
   37010:	e7a0      	b.n	36f54 <_svfiprintf_r+0xcc>
   37012:	2301      	movs	r3, #1
   37014:	425b      	negs	r3, r3
   37016:	e7c7      	b.n	36fa8 <_svfiprintf_r+0x120>
   37018:	2300      	movs	r3, #0
   3701a:	0014      	movs	r4, r2
   3701c:	200a      	movs	r0, #10
   3701e:	001a      	movs	r2, r3
   37020:	606b      	str	r3, [r5, #4]
   37022:	7821      	ldrb	r1, [r4, #0]
   37024:	3930      	subs	r1, #48	; 0x30
   37026:	2909      	cmp	r1, #9
   37028:	d903      	bls.n	37032 <_svfiprintf_r+0x1aa>
   3702a:	2b00      	cmp	r3, #0
   3702c:	d0bd      	beq.n	36faa <_svfiprintf_r+0x122>
   3702e:	9207      	str	r2, [sp, #28]
   37030:	e7bb      	b.n	36faa <_svfiprintf_r+0x122>
   37032:	4342      	muls	r2, r0
   37034:	3401      	adds	r4, #1
   37036:	1852      	adds	r2, r2, r1
   37038:	2301      	movs	r3, #1
   3703a:	e7f2      	b.n	37022 <_svfiprintf_r+0x19a>
   3703c:	3307      	adds	r3, #7
   3703e:	e7d5      	b.n	36fec <_svfiprintf_r+0x164>
   37040:	ab05      	add	r3, sp, #20
   37042:	9300      	str	r3, [sp, #0]
   37044:	003a      	movs	r2, r7
   37046:	4b11      	ldr	r3, [pc, #68]	; (3708c <_svfiprintf_r+0x204>)
   37048:	0029      	movs	r1, r5
   3704a:	9802      	ldr	r0, [sp, #8]
   3704c:	e000      	b.n	37050 <_svfiprintf_r+0x1c8>
   3704e:	bf00      	nop
   37050:	9003      	str	r0, [sp, #12]
   37052:	9b03      	ldr	r3, [sp, #12]
   37054:	3301      	adds	r3, #1
   37056:	d1cc      	bne.n	36ff2 <_svfiprintf_r+0x16a>
   37058:	89bb      	ldrh	r3, [r7, #12]
   3705a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3705c:	065b      	lsls	r3, r3, #25
   3705e:	d400      	bmi.n	37062 <_svfiprintf_r+0x1da>
   37060:	e729      	b.n	36eb6 <_svfiprintf_r+0x2e>
   37062:	2001      	movs	r0, #1
   37064:	4240      	negs	r0, r0
   37066:	e726      	b.n	36eb6 <_svfiprintf_r+0x2e>
   37068:	ab05      	add	r3, sp, #20
   3706a:	9300      	str	r3, [sp, #0]
   3706c:	003a      	movs	r2, r7
   3706e:	4b07      	ldr	r3, [pc, #28]	; (3708c <_svfiprintf_r+0x204>)
   37070:	0029      	movs	r1, r5
   37072:	9802      	ldr	r0, [sp, #8]
   37074:	f000 f87a 	bl	3716c <_printf_i>
   37078:	e7ea      	b.n	37050 <_svfiprintf_r+0x1c8>
   3707a:	46c0      	nop			; (mov r8, r8)
   3707c:	0003bcca 	.word	0x0003bcca
   37080:	0003bcd0 	.word	0x0003bcd0
   37084:	0003bcd4 	.word	0x0003bcd4
   37088:	00000000 	.word	0x00000000
   3708c:	00036dc5 	.word	0x00036dc5

00037090 <_printf_common>:
   37090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37092:	0015      	movs	r5, r2
   37094:	9301      	str	r3, [sp, #4]
   37096:	688a      	ldr	r2, [r1, #8]
   37098:	690b      	ldr	r3, [r1, #16]
   3709a:	9000      	str	r0, [sp, #0]
   3709c:	000c      	movs	r4, r1
   3709e:	4293      	cmp	r3, r2
   370a0:	da00      	bge.n	370a4 <_printf_common+0x14>
   370a2:	0013      	movs	r3, r2
   370a4:	0022      	movs	r2, r4
   370a6:	602b      	str	r3, [r5, #0]
   370a8:	3243      	adds	r2, #67	; 0x43
   370aa:	7812      	ldrb	r2, [r2, #0]
   370ac:	2a00      	cmp	r2, #0
   370ae:	d001      	beq.n	370b4 <_printf_common+0x24>
   370b0:	3301      	adds	r3, #1
   370b2:	602b      	str	r3, [r5, #0]
   370b4:	6823      	ldr	r3, [r4, #0]
   370b6:	069b      	lsls	r3, r3, #26
   370b8:	d502      	bpl.n	370c0 <_printf_common+0x30>
   370ba:	682b      	ldr	r3, [r5, #0]
   370bc:	3302      	adds	r3, #2
   370be:	602b      	str	r3, [r5, #0]
   370c0:	2706      	movs	r7, #6
   370c2:	6823      	ldr	r3, [r4, #0]
   370c4:	401f      	ands	r7, r3
   370c6:	d027      	beq.n	37118 <_printf_common+0x88>
   370c8:	0023      	movs	r3, r4
   370ca:	3343      	adds	r3, #67	; 0x43
   370cc:	781b      	ldrb	r3, [r3, #0]
   370ce:	1e5a      	subs	r2, r3, #1
   370d0:	4193      	sbcs	r3, r2
   370d2:	6822      	ldr	r2, [r4, #0]
   370d4:	0692      	lsls	r2, r2, #26
   370d6:	d430      	bmi.n	3713a <_printf_common+0xaa>
   370d8:	0022      	movs	r2, r4
   370da:	9901      	ldr	r1, [sp, #4]
   370dc:	3243      	adds	r2, #67	; 0x43
   370de:	9800      	ldr	r0, [sp, #0]
   370e0:	9e08      	ldr	r6, [sp, #32]
   370e2:	47b0      	blx	r6
   370e4:	1c43      	adds	r3, r0, #1
   370e6:	d025      	beq.n	37134 <_printf_common+0xa4>
   370e8:	2306      	movs	r3, #6
   370ea:	6820      	ldr	r0, [r4, #0]
   370ec:	682a      	ldr	r2, [r5, #0]
   370ee:	68e1      	ldr	r1, [r4, #12]
   370f0:	4003      	ands	r3, r0
   370f2:	2500      	movs	r5, #0
   370f4:	2b04      	cmp	r3, #4
   370f6:	d103      	bne.n	37100 <_printf_common+0x70>
   370f8:	1a8d      	subs	r5, r1, r2
   370fa:	43eb      	mvns	r3, r5
   370fc:	17db      	asrs	r3, r3, #31
   370fe:	401d      	ands	r5, r3
   37100:	68a3      	ldr	r3, [r4, #8]
   37102:	6922      	ldr	r2, [r4, #16]
   37104:	4293      	cmp	r3, r2
   37106:	dd01      	ble.n	3710c <_printf_common+0x7c>
   37108:	1a9b      	subs	r3, r3, r2
   3710a:	18ed      	adds	r5, r5, r3
   3710c:	2700      	movs	r7, #0
   3710e:	42bd      	cmp	r5, r7
   37110:	d120      	bne.n	37154 <_printf_common+0xc4>
   37112:	2000      	movs	r0, #0
   37114:	e010      	b.n	37138 <_printf_common+0xa8>
   37116:	3701      	adds	r7, #1
   37118:	68e3      	ldr	r3, [r4, #12]
   3711a:	682a      	ldr	r2, [r5, #0]
   3711c:	1a9b      	subs	r3, r3, r2
   3711e:	429f      	cmp	r7, r3
   37120:	dad2      	bge.n	370c8 <_printf_common+0x38>
   37122:	0022      	movs	r2, r4
   37124:	2301      	movs	r3, #1
   37126:	3219      	adds	r2, #25
   37128:	9901      	ldr	r1, [sp, #4]
   3712a:	9800      	ldr	r0, [sp, #0]
   3712c:	9e08      	ldr	r6, [sp, #32]
   3712e:	47b0      	blx	r6
   37130:	1c43      	adds	r3, r0, #1
   37132:	d1f0      	bne.n	37116 <_printf_common+0x86>
   37134:	2001      	movs	r0, #1
   37136:	4240      	negs	r0, r0
   37138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3713a:	2030      	movs	r0, #48	; 0x30
   3713c:	18e1      	adds	r1, r4, r3
   3713e:	3143      	adds	r1, #67	; 0x43
   37140:	7008      	strb	r0, [r1, #0]
   37142:	0021      	movs	r1, r4
   37144:	1c5a      	adds	r2, r3, #1
   37146:	3145      	adds	r1, #69	; 0x45
   37148:	7809      	ldrb	r1, [r1, #0]
   3714a:	18a2      	adds	r2, r4, r2
   3714c:	3243      	adds	r2, #67	; 0x43
   3714e:	3302      	adds	r3, #2
   37150:	7011      	strb	r1, [r2, #0]
   37152:	e7c1      	b.n	370d8 <_printf_common+0x48>
   37154:	0022      	movs	r2, r4
   37156:	2301      	movs	r3, #1
   37158:	321a      	adds	r2, #26
   3715a:	9901      	ldr	r1, [sp, #4]
   3715c:	9800      	ldr	r0, [sp, #0]
   3715e:	9e08      	ldr	r6, [sp, #32]
   37160:	47b0      	blx	r6
   37162:	1c43      	adds	r3, r0, #1
   37164:	d0e6      	beq.n	37134 <_printf_common+0xa4>
   37166:	3701      	adds	r7, #1
   37168:	e7d1      	b.n	3710e <_printf_common+0x7e>
	...

0003716c <_printf_i>:
   3716c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3716e:	b08b      	sub	sp, #44	; 0x2c
   37170:	9206      	str	r2, [sp, #24]
   37172:	000a      	movs	r2, r1
   37174:	3243      	adds	r2, #67	; 0x43
   37176:	9307      	str	r3, [sp, #28]
   37178:	9005      	str	r0, [sp, #20]
   3717a:	9204      	str	r2, [sp, #16]
   3717c:	7e0a      	ldrb	r2, [r1, #24]
   3717e:	000c      	movs	r4, r1
   37180:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37182:	2a6e      	cmp	r2, #110	; 0x6e
   37184:	d100      	bne.n	37188 <_printf_i+0x1c>
   37186:	e08f      	b.n	372a8 <_printf_i+0x13c>
   37188:	d817      	bhi.n	371ba <_printf_i+0x4e>
   3718a:	2a63      	cmp	r2, #99	; 0x63
   3718c:	d02c      	beq.n	371e8 <_printf_i+0x7c>
   3718e:	d808      	bhi.n	371a2 <_printf_i+0x36>
   37190:	2a00      	cmp	r2, #0
   37192:	d100      	bne.n	37196 <_printf_i+0x2a>
   37194:	e099      	b.n	372ca <_printf_i+0x15e>
   37196:	2a58      	cmp	r2, #88	; 0x58
   37198:	d054      	beq.n	37244 <_printf_i+0xd8>
   3719a:	0026      	movs	r6, r4
   3719c:	3642      	adds	r6, #66	; 0x42
   3719e:	7032      	strb	r2, [r6, #0]
   371a0:	e029      	b.n	371f6 <_printf_i+0x8a>
   371a2:	2a64      	cmp	r2, #100	; 0x64
   371a4:	d001      	beq.n	371aa <_printf_i+0x3e>
   371a6:	2a69      	cmp	r2, #105	; 0x69
   371a8:	d1f7      	bne.n	3719a <_printf_i+0x2e>
   371aa:	6821      	ldr	r1, [r4, #0]
   371ac:	681a      	ldr	r2, [r3, #0]
   371ae:	0608      	lsls	r0, r1, #24
   371b0:	d523      	bpl.n	371fa <_printf_i+0x8e>
   371b2:	1d11      	adds	r1, r2, #4
   371b4:	6019      	str	r1, [r3, #0]
   371b6:	6815      	ldr	r5, [r2, #0]
   371b8:	e025      	b.n	37206 <_printf_i+0x9a>
   371ba:	2a73      	cmp	r2, #115	; 0x73
   371bc:	d100      	bne.n	371c0 <_printf_i+0x54>
   371be:	e088      	b.n	372d2 <_printf_i+0x166>
   371c0:	d808      	bhi.n	371d4 <_printf_i+0x68>
   371c2:	2a6f      	cmp	r2, #111	; 0x6f
   371c4:	d029      	beq.n	3721a <_printf_i+0xae>
   371c6:	2a70      	cmp	r2, #112	; 0x70
   371c8:	d1e7      	bne.n	3719a <_printf_i+0x2e>
   371ca:	2220      	movs	r2, #32
   371cc:	6809      	ldr	r1, [r1, #0]
   371ce:	430a      	orrs	r2, r1
   371d0:	6022      	str	r2, [r4, #0]
   371d2:	e003      	b.n	371dc <_printf_i+0x70>
   371d4:	2a75      	cmp	r2, #117	; 0x75
   371d6:	d020      	beq.n	3721a <_printf_i+0xae>
   371d8:	2a78      	cmp	r2, #120	; 0x78
   371da:	d1de      	bne.n	3719a <_printf_i+0x2e>
   371dc:	0022      	movs	r2, r4
   371de:	2178      	movs	r1, #120	; 0x78
   371e0:	3245      	adds	r2, #69	; 0x45
   371e2:	7011      	strb	r1, [r2, #0]
   371e4:	4a6c      	ldr	r2, [pc, #432]	; (37398 <_printf_i+0x22c>)
   371e6:	e030      	b.n	3724a <_printf_i+0xde>
   371e8:	000e      	movs	r6, r1
   371ea:	681a      	ldr	r2, [r3, #0]
   371ec:	3642      	adds	r6, #66	; 0x42
   371ee:	1d11      	adds	r1, r2, #4
   371f0:	6019      	str	r1, [r3, #0]
   371f2:	6813      	ldr	r3, [r2, #0]
   371f4:	7033      	strb	r3, [r6, #0]
   371f6:	2301      	movs	r3, #1
   371f8:	e079      	b.n	372ee <_printf_i+0x182>
   371fa:	0649      	lsls	r1, r1, #25
   371fc:	d5d9      	bpl.n	371b2 <_printf_i+0x46>
   371fe:	1d11      	adds	r1, r2, #4
   37200:	6019      	str	r1, [r3, #0]
   37202:	2300      	movs	r3, #0
   37204:	5ed5      	ldrsh	r5, [r2, r3]
   37206:	2d00      	cmp	r5, #0
   37208:	da03      	bge.n	37212 <_printf_i+0xa6>
   3720a:	232d      	movs	r3, #45	; 0x2d
   3720c:	9a04      	ldr	r2, [sp, #16]
   3720e:	426d      	negs	r5, r5
   37210:	7013      	strb	r3, [r2, #0]
   37212:	4b62      	ldr	r3, [pc, #392]	; (3739c <_printf_i+0x230>)
   37214:	270a      	movs	r7, #10
   37216:	9303      	str	r3, [sp, #12]
   37218:	e02f      	b.n	3727a <_printf_i+0x10e>
   3721a:	6820      	ldr	r0, [r4, #0]
   3721c:	6819      	ldr	r1, [r3, #0]
   3721e:	0605      	lsls	r5, r0, #24
   37220:	d503      	bpl.n	3722a <_printf_i+0xbe>
   37222:	1d08      	adds	r0, r1, #4
   37224:	6018      	str	r0, [r3, #0]
   37226:	680d      	ldr	r5, [r1, #0]
   37228:	e005      	b.n	37236 <_printf_i+0xca>
   3722a:	0640      	lsls	r0, r0, #25
   3722c:	d5f9      	bpl.n	37222 <_printf_i+0xb6>
   3722e:	680d      	ldr	r5, [r1, #0]
   37230:	1d08      	adds	r0, r1, #4
   37232:	6018      	str	r0, [r3, #0]
   37234:	b2ad      	uxth	r5, r5
   37236:	4b59      	ldr	r3, [pc, #356]	; (3739c <_printf_i+0x230>)
   37238:	2708      	movs	r7, #8
   3723a:	9303      	str	r3, [sp, #12]
   3723c:	2a6f      	cmp	r2, #111	; 0x6f
   3723e:	d018      	beq.n	37272 <_printf_i+0x106>
   37240:	270a      	movs	r7, #10
   37242:	e016      	b.n	37272 <_printf_i+0x106>
   37244:	3145      	adds	r1, #69	; 0x45
   37246:	700a      	strb	r2, [r1, #0]
   37248:	4a54      	ldr	r2, [pc, #336]	; (3739c <_printf_i+0x230>)
   3724a:	9203      	str	r2, [sp, #12]
   3724c:	681a      	ldr	r2, [r3, #0]
   3724e:	6821      	ldr	r1, [r4, #0]
   37250:	1d10      	adds	r0, r2, #4
   37252:	6018      	str	r0, [r3, #0]
   37254:	6815      	ldr	r5, [r2, #0]
   37256:	0608      	lsls	r0, r1, #24
   37258:	d522      	bpl.n	372a0 <_printf_i+0x134>
   3725a:	07cb      	lsls	r3, r1, #31
   3725c:	d502      	bpl.n	37264 <_printf_i+0xf8>
   3725e:	2320      	movs	r3, #32
   37260:	4319      	orrs	r1, r3
   37262:	6021      	str	r1, [r4, #0]
   37264:	2710      	movs	r7, #16
   37266:	2d00      	cmp	r5, #0
   37268:	d103      	bne.n	37272 <_printf_i+0x106>
   3726a:	2320      	movs	r3, #32
   3726c:	6822      	ldr	r2, [r4, #0]
   3726e:	439a      	bics	r2, r3
   37270:	6022      	str	r2, [r4, #0]
   37272:	0023      	movs	r3, r4
   37274:	2200      	movs	r2, #0
   37276:	3343      	adds	r3, #67	; 0x43
   37278:	701a      	strb	r2, [r3, #0]
   3727a:	6863      	ldr	r3, [r4, #4]
   3727c:	60a3      	str	r3, [r4, #8]
   3727e:	2b00      	cmp	r3, #0
   37280:	db5c      	blt.n	3733c <_printf_i+0x1d0>
   37282:	2204      	movs	r2, #4
   37284:	6821      	ldr	r1, [r4, #0]
   37286:	4391      	bics	r1, r2
   37288:	6021      	str	r1, [r4, #0]
   3728a:	2d00      	cmp	r5, #0
   3728c:	d158      	bne.n	37340 <_printf_i+0x1d4>
   3728e:	9e04      	ldr	r6, [sp, #16]
   37290:	2b00      	cmp	r3, #0
   37292:	d064      	beq.n	3735e <_printf_i+0x1f2>
   37294:	0026      	movs	r6, r4
   37296:	9b03      	ldr	r3, [sp, #12]
   37298:	3642      	adds	r6, #66	; 0x42
   3729a:	781b      	ldrb	r3, [r3, #0]
   3729c:	7033      	strb	r3, [r6, #0]
   3729e:	e05e      	b.n	3735e <_printf_i+0x1f2>
   372a0:	0648      	lsls	r0, r1, #25
   372a2:	d5da      	bpl.n	3725a <_printf_i+0xee>
   372a4:	b2ad      	uxth	r5, r5
   372a6:	e7d8      	b.n	3725a <_printf_i+0xee>
   372a8:	6809      	ldr	r1, [r1, #0]
   372aa:	681a      	ldr	r2, [r3, #0]
   372ac:	0608      	lsls	r0, r1, #24
   372ae:	d505      	bpl.n	372bc <_printf_i+0x150>
   372b0:	1d11      	adds	r1, r2, #4
   372b2:	6019      	str	r1, [r3, #0]
   372b4:	6813      	ldr	r3, [r2, #0]
   372b6:	6962      	ldr	r2, [r4, #20]
   372b8:	601a      	str	r2, [r3, #0]
   372ba:	e006      	b.n	372ca <_printf_i+0x15e>
   372bc:	0649      	lsls	r1, r1, #25
   372be:	d5f7      	bpl.n	372b0 <_printf_i+0x144>
   372c0:	1d11      	adds	r1, r2, #4
   372c2:	6019      	str	r1, [r3, #0]
   372c4:	6813      	ldr	r3, [r2, #0]
   372c6:	8aa2      	ldrh	r2, [r4, #20]
   372c8:	801a      	strh	r2, [r3, #0]
   372ca:	2300      	movs	r3, #0
   372cc:	9e04      	ldr	r6, [sp, #16]
   372ce:	6123      	str	r3, [r4, #16]
   372d0:	e054      	b.n	3737c <_printf_i+0x210>
   372d2:	681a      	ldr	r2, [r3, #0]
   372d4:	1d11      	adds	r1, r2, #4
   372d6:	6019      	str	r1, [r3, #0]
   372d8:	6816      	ldr	r6, [r2, #0]
   372da:	2100      	movs	r1, #0
   372dc:	6862      	ldr	r2, [r4, #4]
   372de:	0030      	movs	r0, r6
   372e0:	f000 f922 	bl	37528 <memchr>
   372e4:	2800      	cmp	r0, #0
   372e6:	d001      	beq.n	372ec <_printf_i+0x180>
   372e8:	1b80      	subs	r0, r0, r6
   372ea:	6060      	str	r0, [r4, #4]
   372ec:	6863      	ldr	r3, [r4, #4]
   372ee:	6123      	str	r3, [r4, #16]
   372f0:	2300      	movs	r3, #0
   372f2:	9a04      	ldr	r2, [sp, #16]
   372f4:	7013      	strb	r3, [r2, #0]
   372f6:	e041      	b.n	3737c <_printf_i+0x210>
   372f8:	6923      	ldr	r3, [r4, #16]
   372fa:	0032      	movs	r2, r6
   372fc:	9906      	ldr	r1, [sp, #24]
   372fe:	9805      	ldr	r0, [sp, #20]
   37300:	9d07      	ldr	r5, [sp, #28]
   37302:	47a8      	blx	r5
   37304:	1c43      	adds	r3, r0, #1
   37306:	d043      	beq.n	37390 <_printf_i+0x224>
   37308:	6823      	ldr	r3, [r4, #0]
   3730a:	2500      	movs	r5, #0
   3730c:	079b      	lsls	r3, r3, #30
   3730e:	d40f      	bmi.n	37330 <_printf_i+0x1c4>
   37310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37312:	68e0      	ldr	r0, [r4, #12]
   37314:	4298      	cmp	r0, r3
   37316:	da3d      	bge.n	37394 <_printf_i+0x228>
   37318:	0018      	movs	r0, r3
   3731a:	e03b      	b.n	37394 <_printf_i+0x228>
   3731c:	0022      	movs	r2, r4
   3731e:	2301      	movs	r3, #1
   37320:	3219      	adds	r2, #25
   37322:	9906      	ldr	r1, [sp, #24]
   37324:	9805      	ldr	r0, [sp, #20]
   37326:	9e07      	ldr	r6, [sp, #28]
   37328:	47b0      	blx	r6
   3732a:	1c43      	adds	r3, r0, #1
   3732c:	d030      	beq.n	37390 <_printf_i+0x224>
   3732e:	3501      	adds	r5, #1
   37330:	68e3      	ldr	r3, [r4, #12]
   37332:	9a09      	ldr	r2, [sp, #36]	; 0x24
   37334:	1a9b      	subs	r3, r3, r2
   37336:	429d      	cmp	r5, r3
   37338:	dbf0      	blt.n	3731c <_printf_i+0x1b0>
   3733a:	e7e9      	b.n	37310 <_printf_i+0x1a4>
   3733c:	2d00      	cmp	r5, #0
   3733e:	d0a9      	beq.n	37294 <_printf_i+0x128>
   37340:	9e04      	ldr	r6, [sp, #16]
   37342:	0028      	movs	r0, r5
   37344:	0039      	movs	r1, r7
   37346:	f7fc fa33 	bl	337b0 <__aeabi_uidivmod>
   3734a:	9b03      	ldr	r3, [sp, #12]
   3734c:	3e01      	subs	r6, #1
   3734e:	5c5b      	ldrb	r3, [r3, r1]
   37350:	0028      	movs	r0, r5
   37352:	7033      	strb	r3, [r6, #0]
   37354:	0039      	movs	r1, r7
   37356:	f7fc f9a5 	bl	336a4 <__udivsi3>
   3735a:	1e05      	subs	r5, r0, #0
   3735c:	d1f1      	bne.n	37342 <_printf_i+0x1d6>
   3735e:	2f08      	cmp	r7, #8
   37360:	d109      	bne.n	37376 <_printf_i+0x20a>
   37362:	6823      	ldr	r3, [r4, #0]
   37364:	07db      	lsls	r3, r3, #31
   37366:	d506      	bpl.n	37376 <_printf_i+0x20a>
   37368:	6863      	ldr	r3, [r4, #4]
   3736a:	6922      	ldr	r2, [r4, #16]
   3736c:	4293      	cmp	r3, r2
   3736e:	dc02      	bgt.n	37376 <_printf_i+0x20a>
   37370:	2330      	movs	r3, #48	; 0x30
   37372:	3e01      	subs	r6, #1
   37374:	7033      	strb	r3, [r6, #0]
   37376:	9b04      	ldr	r3, [sp, #16]
   37378:	1b9b      	subs	r3, r3, r6
   3737a:	6123      	str	r3, [r4, #16]
   3737c:	9b07      	ldr	r3, [sp, #28]
   3737e:	aa09      	add	r2, sp, #36	; 0x24
   37380:	9300      	str	r3, [sp, #0]
   37382:	0021      	movs	r1, r4
   37384:	9b06      	ldr	r3, [sp, #24]
   37386:	9805      	ldr	r0, [sp, #20]
   37388:	f7ff fe82 	bl	37090 <_printf_common>
   3738c:	1c43      	adds	r3, r0, #1
   3738e:	d1b3      	bne.n	372f8 <_printf_i+0x18c>
   37390:	2001      	movs	r0, #1
   37392:	4240      	negs	r0, r0
   37394:	b00b      	add	sp, #44	; 0x2c
   37396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37398:	0003bcec 	.word	0x0003bcec
   3739c:	0003bcdb 	.word	0x0003bcdb

000373a0 <__sread>:
   373a0:	b570      	push	{r4, r5, r6, lr}
   373a2:	000c      	movs	r4, r1
   373a4:	250e      	movs	r5, #14
   373a6:	5f49      	ldrsh	r1, [r1, r5]
   373a8:	f000 f8f0 	bl	3758c <_read_r>
   373ac:	2800      	cmp	r0, #0
   373ae:	db03      	blt.n	373b8 <__sread+0x18>
   373b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   373b2:	181b      	adds	r3, r3, r0
   373b4:	6563      	str	r3, [r4, #84]	; 0x54
   373b6:	bd70      	pop	{r4, r5, r6, pc}
   373b8:	89a3      	ldrh	r3, [r4, #12]
   373ba:	4a02      	ldr	r2, [pc, #8]	; (373c4 <__sread+0x24>)
   373bc:	4013      	ands	r3, r2
   373be:	81a3      	strh	r3, [r4, #12]
   373c0:	e7f9      	b.n	373b6 <__sread+0x16>
   373c2:	46c0      	nop			; (mov r8, r8)
   373c4:	ffffefff 	.word	0xffffefff

000373c8 <__swrite>:
   373c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   373ca:	001f      	movs	r7, r3
   373cc:	898b      	ldrh	r3, [r1, #12]
   373ce:	0005      	movs	r5, r0
   373d0:	000c      	movs	r4, r1
   373d2:	0016      	movs	r6, r2
   373d4:	05db      	lsls	r3, r3, #23
   373d6:	d505      	bpl.n	373e4 <__swrite+0x1c>
   373d8:	230e      	movs	r3, #14
   373da:	5ec9      	ldrsh	r1, [r1, r3]
   373dc:	2200      	movs	r2, #0
   373de:	2302      	movs	r3, #2
   373e0:	f000 f88e 	bl	37500 <_lseek_r>
   373e4:	89a3      	ldrh	r3, [r4, #12]
   373e6:	4a05      	ldr	r2, [pc, #20]	; (373fc <__swrite+0x34>)
   373e8:	0028      	movs	r0, r5
   373ea:	4013      	ands	r3, r2
   373ec:	81a3      	strh	r3, [r4, #12]
   373ee:	0032      	movs	r2, r6
   373f0:	230e      	movs	r3, #14
   373f2:	5ee1      	ldrsh	r1, [r4, r3]
   373f4:	003b      	movs	r3, r7
   373f6:	f000 f839 	bl	3746c <_write_r>
   373fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   373fc:	ffffefff 	.word	0xffffefff

00037400 <__sseek>:
   37400:	b570      	push	{r4, r5, r6, lr}
   37402:	000c      	movs	r4, r1
   37404:	250e      	movs	r5, #14
   37406:	5f49      	ldrsh	r1, [r1, r5]
   37408:	f000 f87a 	bl	37500 <_lseek_r>
   3740c:	89a3      	ldrh	r3, [r4, #12]
   3740e:	1c42      	adds	r2, r0, #1
   37410:	d103      	bne.n	3741a <__sseek+0x1a>
   37412:	4a05      	ldr	r2, [pc, #20]	; (37428 <__sseek+0x28>)
   37414:	4013      	ands	r3, r2
   37416:	81a3      	strh	r3, [r4, #12]
   37418:	bd70      	pop	{r4, r5, r6, pc}
   3741a:	2280      	movs	r2, #128	; 0x80
   3741c:	0152      	lsls	r2, r2, #5
   3741e:	4313      	orrs	r3, r2
   37420:	81a3      	strh	r3, [r4, #12]
   37422:	6560      	str	r0, [r4, #84]	; 0x54
   37424:	e7f8      	b.n	37418 <__sseek+0x18>
   37426:	46c0      	nop			; (mov r8, r8)
   37428:	ffffefff 	.word	0xffffefff

0003742c <__sclose>:
   3742c:	b510      	push	{r4, lr}
   3742e:	230e      	movs	r3, #14
   37430:	5ec9      	ldrsh	r1, [r1, r3]
   37432:	f000 f82f 	bl	37494 <_close_r>
   37436:	bd10      	pop	{r4, pc}

00037438 <strchr>:
   37438:	b2c9      	uxtb	r1, r1
   3743a:	7803      	ldrb	r3, [r0, #0]
   3743c:	2b00      	cmp	r3, #0
   3743e:	d004      	beq.n	3744a <strchr+0x12>
   37440:	4299      	cmp	r1, r3
   37442:	d100      	bne.n	37446 <strchr+0xe>
   37444:	4770      	bx	lr
   37446:	3001      	adds	r0, #1
   37448:	e7f7      	b.n	3743a <strchr+0x2>
   3744a:	424b      	negs	r3, r1
   3744c:	4159      	adcs	r1, r3
   3744e:	4249      	negs	r1, r1
   37450:	4008      	ands	r0, r1
   37452:	e7f7      	b.n	37444 <strchr+0xc>

00037454 <__ascii_wctomb>:
   37454:	1e0b      	subs	r3, r1, #0
   37456:	d004      	beq.n	37462 <__ascii_wctomb+0xe>
   37458:	2aff      	cmp	r2, #255	; 0xff
   3745a:	d904      	bls.n	37466 <__ascii_wctomb+0x12>
   3745c:	238a      	movs	r3, #138	; 0x8a
   3745e:	6003      	str	r3, [r0, #0]
   37460:	3b8b      	subs	r3, #139	; 0x8b
   37462:	0018      	movs	r0, r3
   37464:	4770      	bx	lr
   37466:	700a      	strb	r2, [r1, #0]
   37468:	2301      	movs	r3, #1
   3746a:	e7fa      	b.n	37462 <__ascii_wctomb+0xe>

0003746c <_write_r>:
   3746c:	b570      	push	{r4, r5, r6, lr}
   3746e:	0005      	movs	r5, r0
   37470:	0008      	movs	r0, r1
   37472:	0011      	movs	r1, r2
   37474:	2200      	movs	r2, #0
   37476:	4c06      	ldr	r4, [pc, #24]	; (37490 <_write_r+0x24>)
   37478:	6022      	str	r2, [r4, #0]
   3747a:	001a      	movs	r2, r3
   3747c:	f7f4 fc84 	bl	2bd88 <_write>
   37480:	1c43      	adds	r3, r0, #1
   37482:	d103      	bne.n	3748c <_write_r+0x20>
   37484:	6823      	ldr	r3, [r4, #0]
   37486:	2b00      	cmp	r3, #0
   37488:	d000      	beq.n	3748c <_write_r+0x20>
   3748a:	602b      	str	r3, [r5, #0]
   3748c:	bd70      	pop	{r4, r5, r6, pc}
   3748e:	46c0      	nop			; (mov r8, r8)
   37490:	20005ce8 	.word	0x20005ce8

00037494 <_close_r>:
   37494:	2300      	movs	r3, #0
   37496:	b570      	push	{r4, r5, r6, lr}
   37498:	4c06      	ldr	r4, [pc, #24]	; (374b4 <_close_r+0x20>)
   3749a:	0005      	movs	r5, r0
   3749c:	0008      	movs	r0, r1
   3749e:	6023      	str	r3, [r4, #0]
   374a0:	f7f4 fcc6 	bl	2be30 <_close>
   374a4:	1c43      	adds	r3, r0, #1
   374a6:	d103      	bne.n	374b0 <_close_r+0x1c>
   374a8:	6823      	ldr	r3, [r4, #0]
   374aa:	2b00      	cmp	r3, #0
   374ac:	d000      	beq.n	374b0 <_close_r+0x1c>
   374ae:	602b      	str	r3, [r5, #0]
   374b0:	bd70      	pop	{r4, r5, r6, pc}
   374b2:	46c0      	nop			; (mov r8, r8)
   374b4:	20005ce8 	.word	0x20005ce8

000374b8 <_fstat_r>:
   374b8:	2300      	movs	r3, #0
   374ba:	b570      	push	{r4, r5, r6, lr}
   374bc:	4c06      	ldr	r4, [pc, #24]	; (374d8 <_fstat_r+0x20>)
   374be:	0005      	movs	r5, r0
   374c0:	0008      	movs	r0, r1
   374c2:	0011      	movs	r1, r2
   374c4:	6023      	str	r3, [r4, #0]
   374c6:	f7f4 fcbd 	bl	2be44 <_fstat>
   374ca:	1c43      	adds	r3, r0, #1
   374cc:	d103      	bne.n	374d6 <_fstat_r+0x1e>
   374ce:	6823      	ldr	r3, [r4, #0]
   374d0:	2b00      	cmp	r3, #0
   374d2:	d000      	beq.n	374d6 <_fstat_r+0x1e>
   374d4:	602b      	str	r3, [r5, #0]
   374d6:	bd70      	pop	{r4, r5, r6, pc}
   374d8:	20005ce8 	.word	0x20005ce8

000374dc <_isatty_r>:
   374dc:	2300      	movs	r3, #0
   374de:	b570      	push	{r4, r5, r6, lr}
   374e0:	4c06      	ldr	r4, [pc, #24]	; (374fc <_isatty_r+0x20>)
   374e2:	0005      	movs	r5, r0
   374e4:	0008      	movs	r0, r1
   374e6:	6023      	str	r3, [r4, #0]
   374e8:	f7f4 fcba 	bl	2be60 <_isatty>
   374ec:	1c43      	adds	r3, r0, #1
   374ee:	d103      	bne.n	374f8 <_isatty_r+0x1c>
   374f0:	6823      	ldr	r3, [r4, #0]
   374f2:	2b00      	cmp	r3, #0
   374f4:	d000      	beq.n	374f8 <_isatty_r+0x1c>
   374f6:	602b      	str	r3, [r5, #0]
   374f8:	bd70      	pop	{r4, r5, r6, pc}
   374fa:	46c0      	nop			; (mov r8, r8)
   374fc:	20005ce8 	.word	0x20005ce8

00037500 <_lseek_r>:
   37500:	b570      	push	{r4, r5, r6, lr}
   37502:	0005      	movs	r5, r0
   37504:	0008      	movs	r0, r1
   37506:	0011      	movs	r1, r2
   37508:	2200      	movs	r2, #0
   3750a:	4c06      	ldr	r4, [pc, #24]	; (37524 <_lseek_r+0x24>)
   3750c:	6022      	str	r2, [r4, #0]
   3750e:	001a      	movs	r2, r3
   37510:	f7f4 fcaf 	bl	2be72 <_lseek>
   37514:	1c43      	adds	r3, r0, #1
   37516:	d103      	bne.n	37520 <_lseek_r+0x20>
   37518:	6823      	ldr	r3, [r4, #0]
   3751a:	2b00      	cmp	r3, #0
   3751c:	d000      	beq.n	37520 <_lseek_r+0x20>
   3751e:	602b      	str	r3, [r5, #0]
   37520:	bd70      	pop	{r4, r5, r6, pc}
   37522:	46c0      	nop			; (mov r8, r8)
   37524:	20005ce8 	.word	0x20005ce8

00037528 <memchr>:
   37528:	b2c9      	uxtb	r1, r1
   3752a:	1882      	adds	r2, r0, r2
   3752c:	4290      	cmp	r0, r2
   3752e:	d101      	bne.n	37534 <memchr+0xc>
   37530:	2000      	movs	r0, #0
   37532:	4770      	bx	lr
   37534:	7803      	ldrb	r3, [r0, #0]
   37536:	428b      	cmp	r3, r1
   37538:	d0fb      	beq.n	37532 <memchr+0xa>
   3753a:	3001      	adds	r0, #1
   3753c:	e7f6      	b.n	3752c <memchr+0x4>

0003753e <_realloc_r>:
   3753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37540:	0007      	movs	r7, r0
   37542:	000d      	movs	r5, r1
   37544:	0016      	movs	r6, r2
   37546:	2900      	cmp	r1, #0
   37548:	d105      	bne.n	37556 <_realloc_r+0x18>
   3754a:	0011      	movs	r1, r2
   3754c:	f7fe feac 	bl	362a8 <_malloc_r>
   37550:	0004      	movs	r4, r0
   37552:	0020      	movs	r0, r4
   37554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37556:	2a00      	cmp	r2, #0
   37558:	d103      	bne.n	37562 <_realloc_r+0x24>
   3755a:	f7fe fe5b 	bl	36214 <_free_r>
   3755e:	0034      	movs	r4, r6
   37560:	e7f7      	b.n	37552 <_realloc_r+0x14>
   37562:	f000 f827 	bl	375b4 <_malloc_usable_size_r>
   37566:	002c      	movs	r4, r5
   37568:	4286      	cmp	r6, r0
   3756a:	d9f2      	bls.n	37552 <_realloc_r+0x14>
   3756c:	0031      	movs	r1, r6
   3756e:	0038      	movs	r0, r7
   37570:	f7fe fe9a 	bl	362a8 <_malloc_r>
   37574:	1e04      	subs	r4, r0, #0
   37576:	d0ec      	beq.n	37552 <_realloc_r+0x14>
   37578:	0029      	movs	r1, r5
   3757a:	0032      	movs	r2, r6
   3757c:	f7fe fe26 	bl	361cc <memcpy>
   37580:	0029      	movs	r1, r5
   37582:	0038      	movs	r0, r7
   37584:	f7fe fe46 	bl	36214 <_free_r>
   37588:	e7e3      	b.n	37552 <_realloc_r+0x14>
	...

0003758c <_read_r>:
   3758c:	b570      	push	{r4, r5, r6, lr}
   3758e:	0005      	movs	r5, r0
   37590:	0008      	movs	r0, r1
   37592:	0011      	movs	r1, r2
   37594:	2200      	movs	r2, #0
   37596:	4c06      	ldr	r4, [pc, #24]	; (375b0 <_read_r+0x24>)
   37598:	6022      	str	r2, [r4, #0]
   3759a:	001a      	movs	r2, r3
   3759c:	f7f4 fbca 	bl	2bd34 <_read>
   375a0:	1c43      	adds	r3, r0, #1
   375a2:	d103      	bne.n	375ac <_read_r+0x20>
   375a4:	6823      	ldr	r3, [r4, #0]
   375a6:	2b00      	cmp	r3, #0
   375a8:	d000      	beq.n	375ac <_read_r+0x20>
   375aa:	602b      	str	r3, [r5, #0]
   375ac:	bd70      	pop	{r4, r5, r6, pc}
   375ae:	46c0      	nop			; (mov r8, r8)
   375b0:	20005ce8 	.word	0x20005ce8

000375b4 <_malloc_usable_size_r>:
   375b4:	1f0b      	subs	r3, r1, #4
   375b6:	681b      	ldr	r3, [r3, #0]
   375b8:	1f18      	subs	r0, r3, #4
   375ba:	2b00      	cmp	r3, #0
   375bc:	da01      	bge.n	375c2 <_malloc_usable_size_r+0xe>
   375be:	580b      	ldr	r3, [r1, r0]
   375c0:	18c0      	adds	r0, r0, r3
   375c2:	4770      	bx	lr

000375c4 <sysfont_glyphs>:
   375c4:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   375d4:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   375e4:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   375f4:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   37604:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   37614:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   37624:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   37634:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   37644:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   37654:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   37664:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   37674:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   37684:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   37694:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   376a4:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   376b4:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   376c4:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   376d4:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   376e4:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   376f4:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   37704:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   37714:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   37724:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   37734:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   37744:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   37754:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   37764:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   37774:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   37784:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   37794:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   377a4:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   377b4:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   377c4:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   377d4:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   377e4:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   377f4:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   37804:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   37814:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   37824:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   37834:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   37844:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   37854:	4020 0000                                    @..

00037858 <pcWelcomeMessage>:
   37858:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   37868:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   37878:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   37888:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   37898:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   378a8:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   378b8:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   378c8:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   378d8:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   378e8:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   378f8:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   37908:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   37918:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   37928:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   37938:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   37948:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   37958:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   37968:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   37978:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   37988:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   37998:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   379a8:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   379b8:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   379c8:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   379d8:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   379e8:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   379f8:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   37a08:	3269 0063 3269 3a63 5320 6163 736e 4920     i2c.i2c: Scans I
   37a18:	4332 6220 7375 0a0d 0000 0000 6574 7473     2C bus......test
   37a28:	0000 0000 6574 7473 203a 6553 646e 2073     ....test: Sends 
   37a38:	6574 7473 6420 7461 0d61 000a 616e 0075     test data...nau.
   37a48:	616e 3a75 5320 6e65 7364 7720 6965 6867     nau: Sends weigh
   37a58:	2074 6164 6174 0a0d 0000 0000 706f 6e65     t data......open
   37a68:	0000 0000 6573 7672 3a6f 4f20 6570 0d6e     ....servo: Open.
   37a78:	000a 0000 6c63 736f 0065 0000 6573 7672     ....close...serv
   37a88:	3a6f 4320 6f6c 6573 0a0d 0000 6c63 0073     o: Close....cls.
   37a98:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   37aa8:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   37ab8:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   37ac8:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   37ad8:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   37ae8:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   37af8:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   37b08:	2520 0964 205a 6425 0a0d 0000 6f4e 6420      %d.Z %d....No d
   37b18:	7461 2061 6572 6461 2179 0d20 000a 0000     ata ready! .....
   37b28:	6325 325b 004a 0000 7453 6475 6e65 7374     %c[2J...Students
   37b38:	7420 206f 6966 6c6c 6f20 7475 0021 0000      to fill out!...
   37b48:	7542 7474 6e6f 2320 6425 6920 2073 6572     Button #%d is re
   37b58:	656c 7361 6465 0a0d 0000 0000 7542 7474     leased......Butt
   37b68:	6e6f 2320 6425 6920 2073 7270 7365 6573     on #%d is presse
   37b78:	0d64 000a 6553 736e 726f 4520 7272 726f     d...Sensor Error
   37b88:	2520 2164 0a0d 0000 6944 7473 6e61 6563      %d!....Distance
   37b98:	203a 6425 6d20 0d6d 000a 0000 6944 7473     : %d mm.....Dist
   37ba8:	6e61 6563 4420 7461 2061 514d 5454 5020     ance Data MQTT P
   37bb8:	736f 0d74 000a 0000 6554 7473 4420 7461     ost.....Test Dat
   37bc8:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   37bd8:	6e69 7570 2074 6f76 206c 203d 4956 314e     input vol = VIN1
   37be8:	2050 202d 4956 314e 204e 203d 6425 0a0d     P - VIN1N = %d..
   37bf8:	0000 0000 614e 2075 6144 6174 4d20 5451     ....Nau Data MQT
   37c08:	2054 6f50 7473 0a0d 0000 0000 6425 0000     T Post......%d..
   37c18:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   37c28:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   37c38:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   37c48:	0000 0000 3025 7832 203a 0000 2058 0000     ....%02x: ..X ..

00037c58 <xImuGetCommand>:
   37c58:	789c 0003 78a0 0003 3bd5 0001 0000 0000     .x...x...;......

00037c68 <xOTAUCommand>:
   37c68:	78c4 0003 78c8 0003 3d11 0001 0000 0000     .x...x...=......

00037c78 <xResetCommand>:
   37c78:	78f8 0003 7900 0003 3d31 0001 0000 0000     .x...y..1=......

00037c88 <xNeotrellisTurnLEDCommand>:
   37c88:	791c 0003 7920 0003 3d51 0001 0004 0000     .y.. y..Q=......

00037c98 <xNeotrellisProcessButtonCommand>:
   37c98:	7968 0003 7974 0003 3d7d 0001 0000 0000     hy..ty..}=......

00037ca8 <xDistanceSensorGetDistance>:
   37ca8:	79c0 0003 79cc 0003 3e81 0001 0000 0000     .y...y...>......

00037cb8 <xI2cScan>:
   37cb8:	7a08 0003 7a0c 0003 40c9 0001 0000 0000     .z...z...@......

00037cc8 <xSendTestData>:
   37cc8:	7a24 0003 7a2c 0003 3f25 0001 0000 0000     $z..,z..%?......

00037cd8 <xSendWeightData>:
   37cd8:	7a44 0003 7a48 0003 3fb1 0001 0000 0000     Dz..Hz...?......

00037ce8 <xServoOpen>:
   37ce8:	7a64 0003 7a6c 0003 3f71 0001 0000 0000     dz..lz..q?......

00037cf8 <xServoClose>:
   37cf8:	7a7c 0003 7a84 0003 3f91 0001 0000 0000     |z...z...?......

00037d08 <xClearScreen>:
   37d08:	7a94 0003 7a98 0003 3cc9 0001 0000 0000     .z...z...<......
   37d18:	6720 6961 3d6e 2520 0d64 000a 6966 616e      gain= %d...fina
   37d28:	5f6c 6e69 3d74 2520 0d64 000a 6966 616e     l_int= %d...fina
   37d38:	5f6c 6564 6963 616d 3d6c 2520 0d64 000a     l_decimal= %d...

00037d48 <msgBaseGetHWID>:
   37d48:	0100 0000                                   ....

00037d4c <msgNeopixelPin>:
   37d4c:	010e 0003                                   ....

00037d50 <msgNeopixelSpeed>:
   37d50:	020e 0001                                   ....

00037d54 <msgNeopixelBufLength>:
   37d54:	030e 3000                                   ...0

00037d58 <msgKeypadEnableInt>:
   37d58:	0210 0001                                   ....

00037d5c <msgKeypadGetCount>:
   37d5c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   37d6c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   37d7c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   37d8c:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   37d9c:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   37dac:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   37dbc:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   37dcc:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   37ddc:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   37dec:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   37dfc:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   37e0c:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   37e1c:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   37e2c:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   37e3c:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   37e4c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   37e5c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   37e6c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   37e7c:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   37e8c:	4948 4847 4157 0059 6425 252e 0064 0000     HIGHWAY.%d.%d...

00037e9c <main_mqtt_broker>:
   37e9c:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   37eac:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   37ebc:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   37ecc:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   37edc:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   37eec:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   37efc:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   37f0c:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   37f1c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   37f2c:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   37f3c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   37f4c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   37f5c:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37f6c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37f7c:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37f8c:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37f9c:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   37fac:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   37fbc:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   37fcc:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   37fdc:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   37fec:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   37ffc:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   3800c:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   3801c:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   3802c:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   3803c:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   3804c:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   3805c:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   3806c:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   3807c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3808c:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   3809c:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   380ac:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   380bc:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   380cc:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   380dc:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   380ec:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   380fc:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   3810c:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   3811c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   3812c:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   3813c:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   3814c:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   3815c:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   3816c:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   3817c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   3818c:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   3819c:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   381ac:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   381bc:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   381cc:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   381dc:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   381ec:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   381fc:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   3820c:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   3821c:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   3822c:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   3823c:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   3824c:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   3825c:	317a 3332 3534 3736 0038 0000 007a 0000     z12345678...z...
   3826c:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   3827c:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   3828c:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   3829c:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   382ac:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   382bc:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   382cc:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   382dc:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   382ec:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   382fc:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   3830c:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   3831c:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   3832c:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   3833c:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   3834c:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   3835c:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   3836c:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   3837c:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   3838c:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   3839c:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   383ac:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   383bc:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   383cc:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   383dc:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   383ec:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   383fc:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   3840c:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   3841c:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   3842c:	0000 0000 3e20 203e 0000 0000 2e25 732a     .... >> ....%.*s
   3843c:	0000 0000 3150 4c5f 4445 455f 4553 3135     ....P1_LED_ESE51
   3844c:	5f36 3954 0000 0000 6166 736c 0065 0000     6_T9....false...
   3845c:	7274 6575 0000 0000 4553 5652 5f4f 4f54     true....SERVO_TO
   3846c:	4950 5f43 3135 5f36 3954 0000 0a0d 6f43     PIC_516_T9....Co
   3847c:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   3848c:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   3849c:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   384ac:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   384bc:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   384cc:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   384dc:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   384ec:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   384fc:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   3850c:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   3851c:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   3852c:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   3853c:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   3854c:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   3855c:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   3856c:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   3857c:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   3858c:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   3859c:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   385ac:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   385bc:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   385cc:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   385dc:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   385ec:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   385fc:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   3860c:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   3861c:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   3862c:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   3863c:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   3864c:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   3865c:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   3866c:	227a 203a 6425 007d 3150 495f 554d 455f     z": %d}.P1_IMU_E
   3867c:	4553 3135 5f36 3954 0000 0000 227b 6574     SE516_T9....{"te
   3868c:	7473 3a22 6425 7d20 0000 0000 4554 5453     st":%d }....TEST
   3869c:	545f 504f 4349 355f 3631 545f 0039 0000     _TOPIC_516_T9...
   386ac:	227b 616e 5f75 2269 253a 2c64 2020 6e22     {"nau_i":%d,  "n
   386bc:	7561 665f 3a22 2520 7d64 0000 414e 5f55     au_f": %d}..NAU_
   386cc:	4f54 4950 5f43 3135 5f36 3954 0000 0000     TOPIC_516_T9....
   386dc:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   386ec:	676e 5720 6669 2069 6144 6174 7120 6575     ng Wifi Data que
   386fc:	6575 2173 0a0d 0000 5345 3545 3631 2d20     ues!....ESE516 -
   3870c:	5720 6669 2069 6e49 7469 4320 646f 0d65      Wifi Init Code.
   3871c:	000a 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
   3872c:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
   3873c:	726f 2021 7228 7365 2520 2964 0a0d 0000     or! (res %d)....
   3874c:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
   3875c:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
   3876c:	0d2e 000a 3150 545f 4d45 4550 4152 5554     ....P1_TEMPERATU
   3877c:	4552 455f 4553 3135 5f36 3954 0000 0000     RE_ESE516_T9....
   3878c:	514d 5454 7320 6e65 2064 7325 0a0d 0000     MQTT send %s....
   3879c:	6e74 0001 6e80 0001 6e92 0001 6ee8 0001     tn...n...n...n..
   387ac:	6f08 0001 6568 706c 0000 0000 0a0d 6568     .o..help......he
   387bc:	706c 0d3a 200a 694c 7473 2073 6c61 206c     lp:.. Lists all 
   387cc:	6874 2065 6572 6967 7473 7265 6465 6320     the registered c
   387dc:	6d6f 616d 646e 0d73 0d0a 000a 6e49 6f63     ommands.....Inco
   387ec:	7272 6365 2074 6f63 6d6d 6e61 2064 6170     rrect command pa
   387fc:	6172 656d 6574 2872 2973 202e 4520 746e     rameter(s).  Ent
   3880c:	7265 2220 6568 706c 2022 6f74 7620 6569     er "help" to vie
   3881c:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   3882c:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   3883c:	0d0a 000a 6f43 6d6d 6e61 2064 6f6e 2074     ....Command not 
   3884c:	6572 6f63 6e67 7369 6465 202e 4520 746e     recognised.  Ent
   3885c:	7265 2720 6568 706c 2027 6f74 7620 6569     er 'help' to vie
   3886c:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   3887c:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   3888c:	0d0a 000a                                   ....

00038890 <xHelpCommand>:
   38890:	87b0 0003 87b8 0003 8b15 0001 0000 0000     ................
   388a0:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   388b0:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   388c0:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   388d0:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   388e0:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   388f0:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   38900:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   38910:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   38920:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   38930:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   38940:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   38950:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   38960:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   38970:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   38980:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   38990:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   389a0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   389b0:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   389c0:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   389d0:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   389e0:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   389f0:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   38a00:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   38a10:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38a20:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   38a30:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   38a40:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38a50:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   38a60:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   38a70:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   38a80:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   38a90:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   38aa0:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   38ab0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38ac0:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   38ad0:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   38ae0:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   38af0:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   38b00:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   38b10:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   38b20:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   38b30:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   38b40:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   38b50:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   38b60:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   38b70:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   38b80:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   38b90:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   38ba0:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   38bb0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38bc0:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   38bd0:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   38be0:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   38bf0:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   38c00:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   38c10:	6365 6374 616c 7373 0021 0000 923a 0001     ectclass!...:...
   38c20:	9232 0001 9236 0001 922a 0001 922e 0001     2...6...*.......
   38c30:	923e 0001 9242 0001 9246 0001 924a 0001     >...B...F...J...
   38c40:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38c50:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38c60:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   38c70:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   38c80:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   38c90:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38ca0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38cb0:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   38cc0:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   38cd0:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   38ce0:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38cf0:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   38d00:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   38d10:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   38d20:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38d30:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   38d40:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   38d50:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   38d60:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   38d70:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   38d80:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38d90:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38da0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38db0:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   38dc0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38dd0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38de0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38df0:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   38e00:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   38e10:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   38e20:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   38e30:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   38e40:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   38e50:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   38e60:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   38e70:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   38e80:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   38e90:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   38ea0:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   38eb0:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   38ec0:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   38ed0:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   38ee0:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   38ef0:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38f00:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38f10:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38f20:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38f30:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38f40:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38f50:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   38f60:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   38f70:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   38f80:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   38f90:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   38fa0:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   38fb0:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38fc0:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   38fd0:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   38fe0:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   38ff0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39000:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   39010:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   39020:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   39030:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   39040:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   39050:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   39060:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39070:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   39080:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   39090:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   390a0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   390b0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   390c0:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   390d0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   390e0:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   390f0:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   39100:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   39110:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   39120:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39130:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39140:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   39150:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   39160:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   39170:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   39180:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   39190:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   391a0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   391b0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   391c0:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   391d0:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   391e0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   391f0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39200:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   39210:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   39220:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   39230:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39240:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   39250:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   39260:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   39270:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   39280:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   39290:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   392a0:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   392b0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   392c0:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   392d0:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   392e0:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   392f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39300:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   39310:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   39320:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   39330:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   39340:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   39350:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   39360:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   39370:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   39380:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39390:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   393a0:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   393b0:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   393c0:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   393d0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   393e0:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   393f0:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   39400:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   39410:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   39420:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39430:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   39440:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   39450:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   39460:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   39470:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   39480:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   39490:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   394a0:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   394b0:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   394c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   394d0:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   394e0:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   394f0:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   39500:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   39510:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   39520:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   39530:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   39540:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   39550:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   39560:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39570:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   39580:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   39590:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   395a0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   395b0:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   395c0:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   395d0:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   395e0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   395f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39600:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   39610:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   39620:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   39630:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39640:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   39650:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   39660:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   39670:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39680:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   39690:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   396a0:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   396b0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   396c0:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   396d0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   396e0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   396f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39700:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   39710:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   39720:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   39730:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   39740:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   39750:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   39760:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   39770:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   39780:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   39790:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   397a0:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   397b0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   397c0:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   397d0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   397e0:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   397f0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   39800:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   39810:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   39820:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   39830:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   39840:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   39850:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   39860:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   39870:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39880:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   39890:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   398a0:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   398b0:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   398c0:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   398d0:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   398e0:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   398f0:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   39900:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39910:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   39920:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   39930:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   39940:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   39950:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   39960:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   39970:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39980:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   39990:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   399a0:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   399b0:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   399c0:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   399d0:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   399e0:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   399f0:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   39a00:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   39a10:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   39a20:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   39a30:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   39a40:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   39a50:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   39a60:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   39a70:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   39a80:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   39a90:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39aa0:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   39ab0:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   39ac0:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   39ad0:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   39ae0:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   39af0:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   39b00:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   39b10:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39b20:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   39b30:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39b40:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   39b50:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   39b60:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   39b70:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   39b80:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   39b90:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   39ba0:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   39bb0:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   39bc0:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39bd0:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   39be0:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   39bf0:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   39c00:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   39c10:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   39c20:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39c30:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   39c40:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   39c50:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   39c60:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   39c70:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   39c80:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   39c90:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   39ca0:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   39cb0:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   39cc0:	0000 0000 6d54 2072 7653 0063 e2d8 0001     ....Tmr Svc.....
   39cd0:	e2d8 0001 e2d8 0001 e366 0001 e330 0001     ........f...0...
   39ce0:	e35a 0001 e2d8 0001 e2d8 0001 e366 0001     Z...........f...
   39cf0:	e330 0001                                   0...

00039cf4 <sd_mmc_trans_units>:
   39cf4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00039d10 <sd_trans_multipliers>:
   39d10:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39d20:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   39d30:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   39d40:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00039d50 <mmc_trans_multipliers>:
   39d50:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39d60:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   39d70:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   39d80:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   39d90:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39da0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   39db0:	746c 6320 646d 000a 000d 0000               lt cmd......

00039dbc <__FUNCTION__.17099>:
   39dbc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   39dcc:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39ddc:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   39dec:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39dfc:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   39e0c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   39e1c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   39e2c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   39e3c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   39e4c:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   39e5c:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   39e6c:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   39e7c:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   39e8c:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   39e9c:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   39eac:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   39ebc:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   39ecc:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39edc:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   39eec:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39efc:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   39f0c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   39f1c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   39f2c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   39f3c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   39f4c:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   39f5c:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   39f6c:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   39f7c:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   39f8c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   39f9c:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   39fac:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   39fbc:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   39fcc:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39fdc:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   39fec:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39ffc:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3a00c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3a01c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3a02c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3a03c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   3a04c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   3a05c:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   3a06c:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   3a07c:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   3a08c:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   3a09c:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   3a0ac:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   3a0bc:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   3a0cc:	203f 6425 000a 0000 24dc 0002 24ac 0002     ? %d.....$...$..
   3a0dc:	24a4 0002 24bc 0002 24b4 0002 24d4 0002     .$...$...$...$..
   3a0ec:	24c4 0002 24cc 0002                         .$...$..

0003a0f4 <__FUNCTION__.17967>:
   3a0f4:	6968 5f66 6573 646e 0000 0000               hif_send....

0003a100 <__FUNCTION__.17977>:
   3a100:	6968 5f66 7369 0072                         hif_isr.

0003a108 <__FUNCTION__.17986>:
   3a108:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003a118 <__FUNCTION__.17998>:
   3a118:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003a124 <__FUNCTION__.18014>:
   3a124:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3a134:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3a144:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3a154:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3a164:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3a174:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3a184:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3a194:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3a1a4:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3a1b4:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3a1c4:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3a1d4:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3a1e4:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3a1f4:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3a204:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3a214:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3a224:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3a234:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3a244:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3a254:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3a264:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3a274:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3a284:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3a294:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3a2a4:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3a2b4:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3a2c4:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3a2d4:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3a2e4:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3a2f4:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3a304:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   3a314:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   3a324:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   3a334:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   3a344:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   3a354:	000a 0000 3332 303a 3a32 3130 0000 0000     ....23:02:01....
   3a364:	7041 2072 3931 3220 3230 0033 7244 7669     Apr 19 2023.Driv
   3a374:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   3a384:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   3a394:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   3a3a4:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   3a3b4:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   3a3c4:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   3a3d4:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3a3e4:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3a3f4:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3a404:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   3a414:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   3a424:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   3a434:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   3a444:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   3a454:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   3a464:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   3a474:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   3a484:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   3a494:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   3a4a4:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   3a4b4:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   3a4c4:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   3a4d4:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   3a4e4:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   3a4f4:	4220 6675 6566 0a72 0000 0000                Buffer.....

0003a500 <__FUNCTION__.17949>:
   3a500:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003a50c <__FUNCTION__.17978>:
   3a50c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003a51c <__FUNCTION__.18009>:
   3a51c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3a52c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3a53c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3a54c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3a55c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3a56c:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3a57c:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3a58c:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3a59c:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   3a5ac:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

0003a5bc <__FUNCTION__.17806>:
   3a5bc:	6863 7069 775f 6b61 0065 0000               chip_wake...

0003a5c8 <__FUNCTION__.17855>:
   3a5c8:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   3a5d8:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   3a5e8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   3a5f8:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   3a608:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   3a618:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   3a628:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   3a638:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3a648:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3a658:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3a668:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3a678:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3a688:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   3a698:	6920 696e 2074 7562 0a73 0000                init bus...

0003a6a4 <__FUNCTION__.17853>:
   3a6a4:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003a6b0 <__FUNCTION__.17860>:
   3a6b0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003a6c0 <crc7_syndrome_table>:
   3a6c0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3a6d0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3a6e0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3a6f0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3a700:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3a710:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3a720:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3a730:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   3a740:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   3a750:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3a760:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3a770:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3a780:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3a790:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3a7a0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3a7b0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3a7c0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3a7d0:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3a7e0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3a7f0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3a800:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a810:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3a820:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a830:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3a840:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   3a850:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3a860:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3a870:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3a880:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3a890:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3a8a0:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3a8b0:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3a8c0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3a8d0:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3a8e0:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3a8f0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a900:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3a910:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3a920:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3a930:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   3a940:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3a950:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3a960:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3a970:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3a980:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3a990:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3a9a0:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3a9b0:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3a9c0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3a9d0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3a9e0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3a9f0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3aa00:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3aa10:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3aa20:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3aa30:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3aa40:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3aa50:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3aa60:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3aa70:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3aa80:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3aa90:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3aaa0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3aab0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3aac0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3aad0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3aae0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3aaf0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3ab00:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3ab10:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3ab20:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3ab30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3ab40:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3ab50:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3ab60:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3ab70:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3ab80:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3ab90:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3aba0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3abb0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3abc0:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3abd0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3abe0:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3abf0:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3ac00:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3ac10:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3ac20:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3ac30:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3ac40:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3ac50:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3ac60:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3ac70:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3ac80:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3ac90:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3aca0:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3acb0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3acc0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3acd0:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3ace0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3acf0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3ad00:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3ad10:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3ad20:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3ad30:	2e2e 0a2e 0000 0000 4104 0002 4104 0002     .........A...A..
   3ad40:	4194 0002 4058 0002 409e 0002 40c0 0002     .A..X@...@...@..
   3ad50:	4146 0002 4146 0002 4200 0002 402c 0002     FA..FA...B..,@..
   3ad60:	425a 0002 425a 0002 425a 0002 425a 0002     ZB..ZB..ZB..ZB..
   3ad70:	40e2 0002 4664 0002 4664 0002 46ec 0002     .@..dF..dF...F..
   3ad80:	45c8 0002 460a 0002 4628 0002 46a2 0002     .E...F..(F...F..
   3ad90:	46a2 0002 474e 0002 45a0 0002 479e 0002     .F..NG...E...G..
   3ada0:	479e 0002 479e 0002 479e 0002 4646 0002     .G...G...G..FF..

0003adb0 <__FUNCTION__.17128>:
   3adb0:	7073 5f69 6d63 0064                         spi_cmd.

0003adb8 <__FUNCTION__.17135>:
   3adb8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003adc8 <__FUNCTION__.17144>:
   3adc8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003add4 <__FUNCTION__.17177>:
   3add4:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3ade4:	0000 0000                                   ....

0003ade8 <__FUNCTION__.17223>:
   3ade8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003adf8 <__FUNCTION__.17235>:
   3adf8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003ae08 <__FUNCTION__.17246>:
   3ae08:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003ae18 <__FUNCTION__.17258>:
   3ae18:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003ae28 <__FUNCTION__.17269>:
   3ae28:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003ae34 <__FUNCTION__.17290>:
   3ae34:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3ae44:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3ae54:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3ae64:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3ae74:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3ae84:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3ae94:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3aea4:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3aeb4:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3aec4:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3aed4:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3aee4:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3aef4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3af04:	2074 2230 0000 0000                         t 0"....

0003af0c <lun_desc>:
   3af0c:	fcfd 0001 fd55 0001 fda1 0001 fded 0001     ....U...........
   3af1c:	fe1d 0001 fea1 0001 ff31 0001 aef4 0003     ........1.......
   3af2c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3af3c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3af4c:	a082 0002 a0fc 0002 a0fc 0002 a0a0 0002     ................
   3af5c:	a09a 0002 a0a6 0002 a088 0002 a0ac 0002     ................
   3af6c:	a0e2 0002 a2e4 0002 a334 0002 a334 0002     ........4...4...
   3af7c:	a330 0002 a2d6 0002 a2f6 0002 a2c6 0002     0...............
   3af8c:	a308 0002 a31a 0002 a382 0002 a3b0 0002     ................
   3af9c:	a3b0 0002 a3ac 0002 a37c 0002 a388 0002     ........|.......
   3afac:	a376 0002 a38e 0002 a394 0002               v...........

0003afb8 <tcc_modules>:
   3afb8:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003afc4 <_tcc_gclk_ids>:
   3afc4:	1a1a 001b                                   ....

0003afc8 <_tcc_apbcmasks>:
   3afc8:	0100 0000 0200 0000 0400 0000               ............

0003afd4 <_tcc_maxs>:
   3afd4:	ffff 00ff ffff 00ff ffff 0000               ............

0003afe0 <_tcc_cc_nums>:
   3afe0:	0204 0002                                   ....

0003afe4 <_tcc_ow_nums>:
   3afe4:	0408 0002                                   ....

0003afe8 <_tcc_intflag>:
   3afe8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3aff8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3b008:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003b018 <LfnOfs>:
   3b018:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3b028:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3b038:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3b048:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3b058:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3b068:	5441 2020 2020 0020                         AT     .

0003b070 <excvt.4558>:
   3b070:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3b080:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3b090:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3b0a0:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3b0b0:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3b0c0:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3b0d0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3b0e0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003b0f0 <Tbl>:
   3b0f0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3b100:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3b110:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3b120:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3b130:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3b140:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3b150:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3b160:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3b170:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3b180:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3b190:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3b1a0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3b1b0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3b1c0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3b1d0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3b1e0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003b1f0 <tbl_lower.4308>:
   3b1f0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3b200:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3b210:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3b220:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3b230:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3b240:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3b250:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3b260:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3b270:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3b280:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3b290:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3b2a0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3b2b0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3b2c0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3b2d0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3b2e0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3b2f0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3b300:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3b310:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3b320:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3b330:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3b340:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3b350:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3b360:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3b370:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3b380:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3b390:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3b3a0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3b3b0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3b3c0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003b3d0 <tbl_upper.4309>:
   3b3d0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3b3e0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3b3f0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3b400:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3b410:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3b420:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3b430:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3b440:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3b450:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3b460:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3b470:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3b480:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3b490:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3b4a0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3b4b0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3b4c0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3b4d0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3b4e0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3b4f0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3b500:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3b510:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3b520:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3b530:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3b540:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3b550:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3b560:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3b570:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3b580:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3b590:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3b5a0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3b5b0:	f81a 0002 f81a 0002 f81a 0002 f6a8 0002     ................
   3b5c0:	f81a 0002 f792 0002 f81a 0002 f81a 0002     ................
   3b5d0:	f81a 0002 f81a 0002 f81a 0002 f81a 0002     ................
   3b5e0:	f81a 0002 f80c 0002 514d 4354 0000 0000     ........MQTC....
   3b5f0:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3b600:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3b640:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3b658:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3b698:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3b6a8:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3b6b8:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3b6c8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3b6d8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3b6e8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3b6f8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3b708:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3b718:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3b728:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3b738:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3b748:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3b758:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3b768:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3b778:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3b788:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3b798:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3b7a8:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3b7b8:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3b7c8:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3b7d8:	5448 5054 002f 0000 0d31 0000 190e 0003     HTTP/...1.......
   3b7e8:	1908 0003 1902 0003 18fc 0003 1914 0003     ................
   3b7f8:	18f6 0003 1914 0003 18f0 0003 18ea 0003     ................
   3b808:	1914 0003 18e4 0003 18e4 0003 18de 0003     ................
   3b818:	18d8 0003 18d2 0003 2000 4200 2400 4200     ......... .B.$.B
   3b828:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3b838:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3b848:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3b858:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3b868:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3b878:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3b888:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3b898:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3b8a8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3b8b8:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3b8c8:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3b8d8:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3b8e8:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3b8f8:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3b908:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3b918:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3b928:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3b938:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3b948:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3b958:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3b968:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3b978:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3b988:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3b998:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3b9a8:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3b9b8:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3b9c8:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3b9d8:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3b9e8:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3b9f8:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3ba08:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3ba18:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3ba28:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3ba38:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3ba48:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3ba58:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3ba68:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3ba78:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3ba88:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3ba98:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3baa8:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3bab8:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3bac8:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3bad8:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3bae8:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3baf8:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3bb08:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3bb18:	0a0d 0000 3ec4 0003 3e94 0003 3ea6 0003     .....>...>...>..
   3bb28:	3de8 0003 3ea6 0003 3e8a 0003 3ea6 0003     .=...>...>...>..
   3bb38:	3de8 0003 3e94 0003 3e94 0003 3e8a 0003     .=...>...>...>..
   3bb48:	3de8 0003 3df0 0003 3df0 0003 3df0 0003     .=...=...=...=..
   3bb58:	3eac 0003 3e94 0003 3e94 0003 3e68 0003     .>...>...>..h>..
   3bb68:	3f4c 0003 3e68 0003 3e8a 0003 3e68 0003     L?..h>...>..h>..
   3bb78:	3f4c 0003 3e94 0003 3e94 0003 3e8a 0003     L?...>...>...>..
   3bb88:	3f4c 0003 3df0 0003 3df0 0003 3df0 0003     L?...=...=...=..
   3bb98:	3f56 0003 40f4 0003 4044 0003 4044 0003     V?...@..D@..D@..
   3bba8:	4042 0003 40e6 0003 40e6 0003 40dc 0003     B@...@...@...@..
   3bbb8:	4042 0003 40e6 0003 40dc 0003 40e6 0003     B@...@...@...@..
   3bbc8:	4042 0003 40ec 0003 40ec 0003 40ec 0003     B@...@...@...@..
   3bbd8:	417c 0003 4e38 0003 4e1a 0003 4dd4 0003     |A..8N...N...M..
   3bbe8:	4cf2 0003 4dd4 0003 4e0c 0003 4dd4 0003     .L...M...N...M..
   3bbf8:	4cf2 0003 4e1a 0003 4e1a 0003 4e0c 0003     .L...N...N...N..
   3bc08:	4cf2 0003 4cea 0003 4cea 0003 4cea 0003     .L...L...L...L..
   3bc18:	5050 0003 5498 0003 5358 0003 5358 0003     PP...T..XS..XS..
   3bc28:	5354 0003 5470 0003 5470 0003 5462 0003     TS..pT..pT..bT..
   3bc38:	5354 0003 5470 0003 5462 0003 5470 0003     TS..pT..bT..pT..
   3bc48:	5354 0003 5478 0003 5478 0003 5478 0003     TS..xT..xT..xT..
   3bc58:	567c 0003                                   |V..

0003bc5c <_global_impure_ptr>:
   3bc5c:	0134 2000                                   4.. 

0003bc60 <__sf_fake_stderr>:
	...

0003bc80 <__sf_fake_stdin>:
	...

0003bca0 <__sf_fake_stdout>:
	...
   3bcc0:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3bcd0:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3bce0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3bcf0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003bcfd <_ctype_>:
   3bcfd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3bd0d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3bd1d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3bd2d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3bd3d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3bd4d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3bd5d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3bd6d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3bd7d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003be00 <_init>:
   3be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3be02:	46c0      	nop			; (mov r8, r8)
   3be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3be06:	bc08      	pop	{r3}
   3be08:	469e      	mov	lr, r3
   3be0a:	4770      	bx	lr

0003be0c <__init_array_start>:
   3be0c:	000120dd 	.word	0x000120dd

0003be10 <_fini>:
   3be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3be12:	46c0      	nop			; (mov r8, r8)
   3be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3be16:	bc08      	pop	{r3}
   3be18:	469e      	mov	lr, r3
   3be1a:	4770      	bx	lr

0003be1c <__fini_array_start>:
   3be1c:	000120b5 	.word	0x000120b5
