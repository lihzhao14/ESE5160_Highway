
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000293f4  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003b3f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a28  20000300  0003b700  00030300  2**4
                  ALLOC
  3 .stack        00002000  20005d28  00041128  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   00146b3d  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011de8  00000000  00000000  00176ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017869  00000000  00000000  00188ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003f50  00000000  00000000  001a050f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003b48  00000000  00000000  001a445f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00044806  00000000  00000000  001a7fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000646cb  00000000  00000000  001ec7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c56e9  00000000  00000000  00250e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ede0  00000000  00000000  00316564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	28 7d 00 20 09 bc 02 00 01 bd 02 00 01 bd 02 00     (}. ............
	...
   1202c:	15 ac 01 00 00 00 00 00 00 00 00 00 31 ad 01 00     ............1...
   1203c:	79 ad 01 00 01 bd 02 00 01 bd 02 00 01 bd 02 00     y...............
   1204c:	2d 7c 02 00 59 71 02 00 01 bd 02 00 09 2e 01 00     -|..Yq..........
   1205c:	01 bd 02 00 4d 2f 01 00 d1 82 02 00 e9 82 02 00     ....M/..........
   1206c:	01 83 02 00 19 83 02 00 31 83 02 00 49 83 02 00     ........1...I...
   1207c:	51 bb 02 00 65 bb 02 00 79 bb 02 00 01 89 01 00     Q...e...y.......
   1208c:	15 89 01 00 29 89 01 00 00 00 00 00 00 00 00 00     ....)...........
   1209c:	91 2c 01 00 01 bd 02 00 cd 2d 01 00 01 bd 02 00     .,.......-......
   120ac:	01 bd 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b3f4 	.word	0x0003b3f4

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b3f4 	.word	0x0003b3f4
   1210c:	0003b3f4 	.word	0x0003b3f4
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004770 	.word	0x20004770
   12224:	00014aad 	.word	0x00014aad

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004770 	.word	0x20004770
   1227c:	00014aad 	.word	0x00014aad

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000320 	.word	0x20000320
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004784 	.word	0x20004784
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20004788 	.word	0x20004788
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	00026db9 	.word	0x00026db9

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	00026e0d 	.word	0x00026e0d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004f0 	.word	0x200004f0
   12f40:	20004790 	.word	0x20004790
   12f44:	200004a0 	.word	0x200004a0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	000188ad 	.word	0x000188ad
   13444:	fffbffff 	.word	0xfffbffff
   13448:	0001884f 	.word	0x0001884f
   1344c:	000187f1 	.word	0x000187f1

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	000188ad 	.word	0x000188ad
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005c9c 	.word	0x20005c9c
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4ba6      	ldr	r3, [pc, #664]	; (13abc <vCommandConsoleTask+0x2a4>)
   13822:	0018      	movs	r0, r3
   13824:	4ba6      	ldr	r3, [pc, #664]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13828:	4ba6      	ldr	r3, [pc, #664]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1382a:	0018      	movs	r0, r3
   1382c:	4ba4      	ldr	r3, [pc, #656]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13830:	4ba5      	ldr	r3, [pc, #660]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   13832:	0018      	movs	r0, r3
   13834:	4ba2      	ldr	r3, [pc, #648]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13836:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13838:	4ba4      	ldr	r3, [pc, #656]	; (13acc <vCommandConsoleTask+0x2b4>)
   1383a:	0018      	movs	r0, r3
   1383c:	4ba0      	ldr	r3, [pc, #640]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1383e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13840:	4ba3      	ldr	r3, [pc, #652]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13842:	0018      	movs	r0, r3
   13844:	4b9e      	ldr	r3, [pc, #632]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13846:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13848:	4ba2      	ldr	r3, [pc, #648]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b9c      	ldr	r3, [pc, #624]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1384e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13850:	4ba1      	ldr	r3, [pc, #644]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   13852:	0018      	movs	r0, r3
   13854:	4b9a      	ldr	r3, [pc, #616]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13856:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13858:	4ba0      	ldr	r3, [pc, #640]	; (13adc <vCommandConsoleTask+0x2c4>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b98      	ldr	r3, [pc, #608]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1385e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13860:	4b9f      	ldr	r3, [pc, #636]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13862:	0018      	movs	r0, r3
   13864:	4b96      	ldr	r3, [pc, #600]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13866:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13868:	4b9e      	ldr	r3, [pc, #632]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b94      	ldr	r3, [pc, #592]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1386e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13870:	4b9d      	ldr	r3, [pc, #628]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   13872:	0018      	movs	r0, r3
   13874:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13876:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13878:	4b9c      	ldr	r3, [pc, #624]	; (13aec <vCommandConsoleTask+0x2d4>)
   1387a:	0018      	movs	r0, r3
   1387c:	4b90      	ldr	r3, [pc, #576]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   1387e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13880:	4b9b      	ldr	r3, [pc, #620]	; (13af0 <vCommandConsoleTask+0x2d8>)
   13882:	0018      	movs	r0, r3
   13884:	4b8e      	ldr	r3, [pc, #568]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13886:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13888:	2317      	movs	r3, #23
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	2200      	movs	r2, #0
   1388e:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13890:	4b98      	ldr	r3, [pc, #608]	; (13af4 <vCommandConsoleTask+0x2dc>)
   13892:	0018      	movs	r0, r3
   13894:	4b98      	ldr	r3, [pc, #608]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13896:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13898:	2203      	movs	r2, #3
   1389a:	2100      	movs	r1, #0
   1389c:	2001      	movs	r0, #1
   1389e:	4b97      	ldr	r3, [pc, #604]	; (13afc <vCommandConsoleTask+0x2e4>)
   138a0:	4798      	blx	r3
   138a2:	0002      	movs	r2, r0
   138a4:	4b96      	ldr	r3, [pc, #600]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138a6:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   138a8:	4b95      	ldr	r3, [pc, #596]	; (13b00 <vCommandConsoleTask+0x2e8>)
   138aa:	681b      	ldr	r3, [r3, #0]
   138ac:	2b00      	cmp	r3, #0
   138ae:	d107      	bne.n	138c0 <vCommandConsoleTask+0xa8>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   138b0:	4b94      	ldr	r3, [pc, #592]	; (13b04 <vCommandConsoleTask+0x2ec>)
   138b2:	0019      	movs	r1, r3
   138b4:	2003      	movs	r0, #3
   138b6:	4b94      	ldr	r3, [pc, #592]	; (13b08 <vCommandConsoleTask+0x2f0>)
   138b8:	4798      	blx	r3
        vTaskSuspend(NULL);
   138ba:	2000      	movs	r0, #0
   138bc:	4b93      	ldr	r3, [pc, #588]	; (13b0c <vCommandConsoleTask+0x2f4>)
   138be:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   138c0:	230c      	movs	r3, #12
   138c2:	18fb      	adds	r3, r7, r3
   138c4:	0018      	movs	r0, r3
   138c6:	4b92      	ldr	r3, [pc, #584]	; (13b10 <vCommandConsoleTask+0x2f8>)
   138c8:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138ca:	230c      	movs	r3, #12
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	2b0a      	cmp	r3, #10
   138d2:	d004      	beq.n	138de <vCommandConsoleTask+0xc6>
   138d4:	230c      	movs	r3, #12
   138d6:	18fb      	adds	r3, r7, r3
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b0d      	cmp	r3, #13
   138dc:	d137      	bne.n	1394e <vCommandConsoleTask+0x136>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138de:	4b8d      	ldr	r3, [pc, #564]	; (13b14 <vCommandConsoleTask+0x2fc>)
   138e0:	0018      	movs	r0, r3
   138e2:	4b85      	ldr	r3, [pc, #532]	; (13af8 <vCommandConsoleTask+0x2e0>)
   138e4:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138e6:	4b8c      	ldr	r3, [pc, #560]	; (13b18 <vCommandConsoleTask+0x300>)
   138e8:	2200      	movs	r2, #0
   138ea:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138ec:	4b8b      	ldr	r3, [pc, #556]	; (13b1c <vCommandConsoleTask+0x304>)
   138ee:	2200      	movs	r2, #0
   138f0:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138f2:	498b      	ldr	r1, [pc, #556]	; (13b20 <vCommandConsoleTask+0x308>)
   138f4:	4b8b      	ldr	r3, [pc, #556]	; (13b24 <vCommandConsoleTask+0x30c>)
   138f6:	2231      	movs	r2, #49	; 0x31
   138f8:	0018      	movs	r0, r3
   138fa:	4b8b      	ldr	r3, [pc, #556]	; (13b28 <vCommandConsoleTask+0x310>)
   138fc:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138fe:	4b89      	ldr	r3, [pc, #548]	; (13b24 <vCommandConsoleTask+0x30c>)
   13900:	2231      	movs	r2, #49	; 0x31
   13902:	2100      	movs	r1, #0
   13904:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13906:	4989      	ldr	r1, [pc, #548]	; (13b2c <vCommandConsoleTask+0x314>)
   13908:	4b85      	ldr	r3, [pc, #532]	; (13b20 <vCommandConsoleTask+0x308>)
   1390a:	2264      	movs	r2, #100	; 0x64
   1390c:	0018      	movs	r0, r3
   1390e:	4b88      	ldr	r3, [pc, #544]	; (13b30 <vCommandConsoleTask+0x318>)
   13910:	4798      	blx	r3
   13912:	0003      	movs	r3, r0
   13914:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13916:	4b85      	ldr	r3, [pc, #532]	; (13b2c <vCommandConsoleTask+0x314>)
   13918:	2263      	movs	r2, #99	; 0x63
   1391a:	2100      	movs	r1, #0
   1391c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1391e:	4b83      	ldr	r3, [pc, #524]	; (13b2c <vCommandConsoleTask+0x314>)
   13920:	0018      	movs	r0, r3
   13922:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13924:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13926:	693b      	ldr	r3, [r7, #16]
   13928:	2b00      	cmp	r3, #0
   1392a:	d1ec      	bne.n	13906 <vCommandConsoleTask+0xee>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   1392c:	2317      	movs	r3, #23
   1392e:	18fb      	adds	r3, r7, r3
   13930:	2200      	movs	r2, #0
   13932:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13934:	4b7a      	ldr	r3, [pc, #488]	; (13b20 <vCommandConsoleTask+0x308>)
   13936:	2232      	movs	r2, #50	; 0x32
   13938:	2100      	movs	r1, #0
   1393a:	0018      	movs	r0, r3
   1393c:	4b7d      	ldr	r3, [pc, #500]	; (13b34 <vCommandConsoleTask+0x31c>)
   1393e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13940:	4b7a      	ldr	r3, [pc, #488]	; (13b2c <vCommandConsoleTask+0x314>)
   13942:	2264      	movs	r2, #100	; 0x64
   13944:	2100      	movs	r1, #0
   13946:	0018      	movs	r0, r3
   13948:	4b7a      	ldr	r3, [pc, #488]	; (13b34 <vCommandConsoleTask+0x31c>)
   1394a:	4798      	blx	r3
   1394c:	e0b5      	b.n	13aba <vCommandConsoleTask+0x2a2>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   1394e:	4b72      	ldr	r3, [pc, #456]	; (13b18 <vCommandConsoleTask+0x300>)
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	2b00      	cmp	r3, #0
   13954:	d059      	beq.n	13a0a <vCommandConsoleTask+0x1f2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13956:	4b71      	ldr	r3, [pc, #452]	; (13b1c <vCommandConsoleTask+0x304>)
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	2b03      	cmp	r3, #3
   1395c:	d80c      	bhi.n	13978 <vCommandConsoleTask+0x160>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1395e:	4b6f      	ldr	r3, [pc, #444]	; (13b1c <vCommandConsoleTask+0x304>)
   13960:	781b      	ldrb	r3, [r3, #0]
   13962:	1c5a      	adds	r2, r3, #1
   13964:	b2d1      	uxtb	r1, r2
   13966:	4a6d      	ldr	r2, [pc, #436]	; (13b1c <vCommandConsoleTask+0x304>)
   13968:	7011      	strb	r1, [r2, #0]
   1396a:	001a      	movs	r2, r3
   1396c:	230c      	movs	r3, #12
   1396e:	18fb      	adds	r3, r7, r3
   13970:	7819      	ldrb	r1, [r3, #0]
   13972:	4b71      	ldr	r3, [pc, #452]	; (13b38 <vCommandConsoleTask+0x320>)
   13974:	5499      	strb	r1, [r3, r2]
   13976:	e005      	b.n	13984 <vCommandConsoleTask+0x16c>
                } else {
                    isEscapeCode = false;
   13978:	4b67      	ldr	r3, [pc, #412]	; (13b18 <vCommandConsoleTask+0x300>)
   1397a:	2200      	movs	r2, #0
   1397c:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1397e:	4b67      	ldr	r3, [pc, #412]	; (13b1c <vCommandConsoleTask+0x304>)
   13980:	2200      	movs	r2, #0
   13982:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13984:	4b65      	ldr	r3, [pc, #404]	; (13b1c <vCommandConsoleTask+0x304>)
   13986:	781b      	ldrb	r3, [r3, #0]
   13988:	2b01      	cmp	r3, #1
   1398a:	d999      	bls.n	138c0 <vCommandConsoleTask+0xa8>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   1398c:	4a6b      	ldr	r2, [pc, #428]	; (13b3c <vCommandConsoleTask+0x324>)
   1398e:	4b6a      	ldr	r3, [pc, #424]	; (13b38 <vCommandConsoleTask+0x320>)
   13990:	0011      	movs	r1, r2
   13992:	0018      	movs	r0, r3
   13994:	4b6a      	ldr	r3, [pc, #424]	; (13b40 <vCommandConsoleTask+0x328>)
   13996:	4798      	blx	r3
   13998:	1e03      	subs	r3, r0, #0
   1399a:	d02f      	beq.n	139fc <vCommandConsoleTask+0x1e4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   1399c:	4969      	ldr	r1, [pc, #420]	; (13b44 <vCommandConsoleTask+0x32c>)
   1399e:	4b60      	ldr	r3, [pc, #384]	; (13b20 <vCommandConsoleTask+0x308>)
   139a0:	221b      	movs	r2, #27
   139a2:	0018      	movs	r0, r3
   139a4:	4b68      	ldr	r3, [pc, #416]	; (13b48 <vCommandConsoleTask+0x330>)
   139a6:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   139a8:	4b5d      	ldr	r3, [pc, #372]	; (13b20 <vCommandConsoleTask+0x308>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b52      	ldr	r3, [pc, #328]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139ae:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   139b0:	2317      	movs	r3, #23
   139b2:	18fb      	adds	r3, r7, r3
   139b4:	2200      	movs	r2, #0
   139b6:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   139b8:	4b59      	ldr	r3, [pc, #356]	; (13b20 <vCommandConsoleTask+0x308>)
   139ba:	2232      	movs	r2, #50	; 0x32
   139bc:	2100      	movs	r1, #0
   139be:	0018      	movs	r0, r3
   139c0:	4b5c      	ldr	r3, [pc, #368]	; (13b34 <vCommandConsoleTask+0x31c>)
   139c2:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   139c4:	4957      	ldr	r1, [pc, #348]	; (13b24 <vCommandConsoleTask+0x30c>)
   139c6:	4b56      	ldr	r3, [pc, #344]	; (13b20 <vCommandConsoleTask+0x308>)
   139c8:	2231      	movs	r2, #49	; 0x31
   139ca:	0018      	movs	r0, r3
   139cc:	4b56      	ldr	r3, [pc, #344]	; (13b28 <vCommandConsoleTask+0x310>)
   139ce:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139d0:	4b53      	ldr	r3, [pc, #332]	; (13b20 <vCommandConsoleTask+0x308>)
   139d2:	0018      	movs	r0, r3
   139d4:	4b5d      	ldr	r3, [pc, #372]	; (13b4c <vCommandConsoleTask+0x334>)
   139d6:	4798      	blx	r3
   139d8:	0003      	movs	r3, r0
   139da:	2b30      	cmp	r3, #48	; 0x30
   139dc:	d806      	bhi.n	139ec <vCommandConsoleTask+0x1d4>
   139de:	4b51      	ldr	r3, [pc, #324]	; (13b24 <vCommandConsoleTask+0x30c>)
   139e0:	0018      	movs	r0, r3
   139e2:	4b5a      	ldr	r3, [pc, #360]	; (13b4c <vCommandConsoleTask+0x334>)
   139e4:	4798      	blx	r3
   139e6:	0003      	movs	r3, r0
   139e8:	b2da      	uxtb	r2, r3
   139ea:	e000      	b.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	2231      	movs	r2, #49	; 0x31
   139ee:	2317      	movs	r3, #23
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139f4:	4b4a      	ldr	r3, [pc, #296]	; (13b20 <vCommandConsoleTask+0x308>)
   139f6:	0018      	movs	r0, r3
   139f8:	4b3f      	ldr	r3, [pc, #252]	; (13af8 <vCommandConsoleTask+0x2e0>)
   139fa:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139fc:	4b46      	ldr	r3, [pc, #280]	; (13b18 <vCommandConsoleTask+0x300>)
   139fe:	2200      	movs	r2, #0
   13a00:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13a02:	4b46      	ldr	r3, [pc, #280]	; (13b1c <vCommandConsoleTask+0x304>)
   13a04:	2200      	movs	r2, #0
   13a06:	701a      	strb	r2, [r3, #0]
   13a08:	e75a      	b.n	138c0 <vCommandConsoleTask+0xa8>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13a0a:	230c      	movs	r3, #12
   13a0c:	18fb      	adds	r3, r7, r3
   13a0e:	781b      	ldrb	r3, [r3, #0]
   13a10:	2b0d      	cmp	r3, #13
   13a12:	d100      	bne.n	13a16 <vCommandConsoleTask+0x1fe>
   13a14:	e754      	b.n	138c0 <vCommandConsoleTask+0xa8>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a16:	230c      	movs	r3, #12
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b08      	cmp	r3, #8
   13a1e:	d004      	beq.n	13a2a <vCommandConsoleTask+0x212>
   13a20:	230c      	movs	r3, #12
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781b      	ldrb	r3, [r3, #0]
   13a26:	2b7f      	cmp	r3, #127	; 0x7f
   13a28:	d11c      	bne.n	13a64 <vCommandConsoleTask+0x24c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a2a:	2308      	movs	r3, #8
   13a2c:	18fb      	adds	r3, r7, r3
   13a2e:	4a48      	ldr	r2, [pc, #288]	; (13b50 <vCommandConsoleTask+0x338>)
   13a30:	6812      	ldr	r2, [r2, #0]
   13a32:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a34:	2308      	movs	r3, #8
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	0018      	movs	r0, r3
   13a3a:	4b2f      	ldr	r3, [pc, #188]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13a3c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a3e:	2317      	movs	r3, #23
   13a40:	18fb      	adds	r3, r7, r3
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	2b00      	cmp	r3, #0
   13a46:	d037      	beq.n	13ab8 <vCommandConsoleTask+0x2a0>
                    cInputIndex--;
   13a48:	2317      	movs	r3, #23
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	781a      	ldrb	r2, [r3, #0]
   13a4e:	2317      	movs	r3, #23
   13a50:	18fb      	adds	r3, r7, r3
   13a52:	3a01      	subs	r2, #1
   13a54:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a56:	2317      	movs	r3, #23
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	4a30      	ldr	r2, [pc, #192]	; (13b20 <vCommandConsoleTask+0x308>)
   13a5e:	2100      	movs	r1, #0
   13a60:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a62:	e029      	b.n	13ab8 <vCommandConsoleTask+0x2a0>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a64:	230c      	movs	r3, #12
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2b1b      	cmp	r3, #27
   13a6c:	d106      	bne.n	13a7c <vCommandConsoleTask+0x264>
                isEscapeCode = true;  // Next characters will be code arguments
   13a6e:	4b2a      	ldr	r3, [pc, #168]	; (13b18 <vCommandConsoleTask+0x300>)
   13a70:	2201      	movs	r2, #1
   13a72:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a74:	4b29      	ldr	r3, [pc, #164]	; (13b1c <vCommandConsoleTask+0x304>)
   13a76:	2200      	movs	r2, #0
   13a78:	701a      	strb	r2, [r3, #0]
   13a7a:	e721      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a7c:	2317      	movs	r3, #23
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	781b      	ldrb	r3, [r3, #0]
   13a82:	2b31      	cmp	r3, #49	; 0x31
   13a84:	d80e      	bhi.n	13aa4 <vCommandConsoleTask+0x28c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a86:	2317      	movs	r3, #23
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	781b      	ldrb	r3, [r3, #0]
   13a8c:	220c      	movs	r2, #12
   13a8e:	18ba      	adds	r2, r7, r2
   13a90:	7811      	ldrb	r1, [r2, #0]
   13a92:	4a23      	ldr	r2, [pc, #140]	; (13b20 <vCommandConsoleTask+0x308>)
   13a94:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a96:	2317      	movs	r3, #23
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	781a      	ldrb	r2, [r3, #0]
   13a9c:	2317      	movs	r3, #23
   13a9e:	18fb      	adds	r3, r7, r3
   13aa0:	3201      	adds	r2, #1
   13aa2:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13aa4:	230c      	movs	r3, #12
   13aa6:	18fb      	adds	r3, r7, r3
   13aa8:	2200      	movs	r2, #0
   13aaa:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13aac:	230c      	movs	r3, #12
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	0018      	movs	r0, r3
   13ab2:	4b11      	ldr	r3, [pc, #68]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13ab4:	4798      	blx	r3
   13ab6:	e703      	b.n	138c0 <vCommandConsoleTask+0xa8>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13ab8:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13aba:	e701      	b.n	138c0 <vCommandConsoleTask+0xa8>
   13abc:	000371b0 	.word	0x000371b0
   13ac0:	000189f5 	.word	0x000189f5
   13ac4:	000371a0 	.word	0x000371a0
   13ac8:	00037260 	.word	0x00037260
   13acc:	000371c0 	.word	0x000371c0
   13ad0:	000371d0 	.word	0x000371d0
   13ad4:	000371e0 	.word	0x000371e0
   13ad8:	000371f0 	.word	0x000371f0
   13adc:	00037200 	.word	0x00037200
   13ae0:	00037220 	.word	0x00037220
   13ae4:	00037210 	.word	0x00037210
   13ae8:	00037230 	.word	0x00037230
   13aec:	00037240 	.word	0x00037240
   13af0:	00037250 	.word	0x00037250
   13af4:	00036d60 	.word	0x00036d60
   13af8:	0001e915 	.word	0x0001e915
   13afc:	0001afb5 	.word	0x0001afb5
   13b00:	200047e0 	.word	0x200047e0
   13b04:	00036fec 	.word	0x00036fec
   13b08:	0001ea01 	.word	0x0001ea01
   13b0c:	0001cda1 	.word	0x0001cda1
   13b10:	00013b55 	.word	0x00013b55
   13b14:	0003700c 	.word	0x0003700c
   13b18:	20000514 	.word	0x20000514
   13b1c:	20000515 	.word	0x20000515
   13b20:	2000054c 	.word	0x2000054c
   13b24:	20000518 	.word	0x20000518
   13b28:	00035ad7 	.word	0x00035ad7
   13b2c:	20000580 	.word	0x20000580
   13b30:	00018a65 	.word	0x00018a65
   13b34:	000356ef 	.word	0x000356ef
   13b38:	200005e4 	.word	0x200005e4
   13b3c:	00037010 	.word	0x00037010
   13b40:	000359f1 	.word	0x000359f1
   13b44:	00037014 	.word	0x00037014
   13b48:	000359ad 	.word	0x000359ad
   13b4c:	00035aa7 	.word	0x00035aa7
   13b50:	0003701c 	.word	0x0003701c

00013b54 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b54:	b580      	push	{r7, lr}
   13b56:	b084      	sub	sp, #16
   13b58:	af00      	add	r7, sp, #0
   13b5a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b5c:	687b      	ldr	r3, [r7, #4]
   13b5e:	0018      	movs	r0, r3
   13b60:	4b0c      	ldr	r3, [pc, #48]	; (13b94 <FreeRTOS_read+0x40>)
   13b62:	4798      	blx	r3
   13b64:	0003      	movs	r3, r0
   13b66:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b68:	e00d      	b.n	13b86 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b6a:	4b0b      	ldr	r3, [pc, #44]	; (13b98 <FreeRTOS_read+0x44>)
   13b6c:	681a      	ldr	r2, [r3, #0]
   13b6e:	2301      	movs	r3, #1
   13b70:	425b      	negs	r3, r3
   13b72:	0019      	movs	r1, r3
   13b74:	0010      	movs	r0, r2
   13b76:	4b09      	ldr	r3, [pc, #36]	; (13b9c <FreeRTOS_read+0x48>)
   13b78:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b7a:	687b      	ldr	r3, [r7, #4]
   13b7c:	0018      	movs	r0, r3
   13b7e:	4b05      	ldr	r3, [pc, #20]	; (13b94 <FreeRTOS_read+0x40>)
   13b80:	4798      	blx	r3
   13b82:	0003      	movs	r3, r0
   13b84:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b86:	68fb      	ldr	r3, [r7, #12]
   13b88:	3301      	adds	r3, #1
   13b8a:	d0ee      	beq.n	13b6a <FreeRTOS_read+0x16>
    }
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	b004      	add	sp, #16
   13b92:	bd80      	pop	{r7, pc}
   13b94:	0001e9b1 	.word	0x0001e9b1
   13b98:	200047e0 	.word	0x200047e0
   13b9c:	0001bf6d 	.word	0x0001bf6d

00013ba0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13ba4:	4b0a      	ldr	r3, [pc, #40]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ba6:	2200      	movs	r2, #0
   13ba8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13baa:	4b0a      	ldr	r3, [pc, #40]	; (13bd4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13bac:	681b      	ldr	r3, [r3, #0]
   13bae:	4a08      	ldr	r2, [pc, #32]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bb0:	0011      	movs	r1, r2
   13bb2:	0018      	movs	r0, r3
   13bb4:	4b08      	ldr	r3, [pc, #32]	; (13bd8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13bb6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bb8:	4b05      	ldr	r3, [pc, #20]	; (13bd0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13bba:	681b      	ldr	r3, [r3, #0]
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d003      	beq.n	13bc8 <CliCharReadySemaphoreGiveFromISR+0x28>
   13bc0:	4b06      	ldr	r3, [pc, #24]	; (13bdc <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13bc2:	2280      	movs	r2, #128	; 0x80
   13bc4:	0552      	lsls	r2, r2, #21
   13bc6:	601a      	str	r2, [r3, #0]
}
   13bc8:	46c0      	nop			; (mov r8, r8)
   13bca:	46bd      	mov	sp, r7
   13bcc:	bd80      	pop	{r7, pc}
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	200005e8 	.word	0x200005e8
   13bd4:	200047e0 	.word	0x200047e0
   13bd8:	0001b8e5 	.word	0x0001b8e5
   13bdc:	e000ed04 	.word	0xe000ed04

00013be0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13be0:	b5b0      	push	{r4, r5, r7, lr}
   13be2:	b088      	sub	sp, #32
   13be4:	af02      	add	r7, sp, #8
   13be6:	60f8      	str	r0, [r7, #12]
   13be8:	60b9      	str	r1, [r7, #8]
   13bea:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13bec:	4b2e      	ldr	r3, [pc, #184]	; (13ca8 <CLI_GetImuData+0xc8>)
   13bee:	4798      	blx	r3
   13bf0:	0003      	movs	r3, r0
   13bf2:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13bf4:	2313      	movs	r3, #19
   13bf6:	18fa      	adds	r2, r7, r3
   13bf8:	697b      	ldr	r3, [r7, #20]
   13bfa:	0011      	movs	r1, r2
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b2b      	ldr	r3, [pc, #172]	; (13cac <CLI_GetImuData+0xcc>)
   13c00:	4798      	blx	r3

    if (reg) {
   13c02:	2313      	movs	r3, #19
   13c04:	18fb      	adds	r3, r7, r3
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d041      	beq.n	13c90 <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13c0c:	4b28      	ldr	r3, [pc, #160]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c0e:	2206      	movs	r2, #6
   13c10:	2100      	movs	r1, #0
   13c12:	0018      	movs	r0, r3
   13c14:	4b27      	ldr	r3, [pc, #156]	; (13cb4 <CLI_GetImuData+0xd4>)
   13c16:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13c18:	4a25      	ldr	r2, [pc, #148]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c1a:	697b      	ldr	r3, [r7, #20]
   13c1c:	0011      	movs	r1, r2
   13c1e:	0018      	movs	r0, r3
   13c20:	4b25      	ldr	r3, [pc, #148]	; (13cb8 <CLI_GetImuData+0xd8>)
   13c22:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13c24:	4b22      	ldr	r3, [pc, #136]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c26:	2200      	movs	r2, #0
   13c28:	5e9b      	ldrsh	r3, [r3, r2]
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b23      	ldr	r3, [pc, #140]	; (13cbc <CLI_GetImuData+0xdc>)
   13c2e:	4798      	blx	r3
   13c30:	1c02      	adds	r2, r0, #0
   13c32:	4b23      	ldr	r3, [pc, #140]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c34:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13c36:	4b1e      	ldr	r3, [pc, #120]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c38:	2202      	movs	r2, #2
   13c3a:	5e9b      	ldrsh	r3, [r3, r2]
   13c3c:	0018      	movs	r0, r3
   13c3e:	4b1f      	ldr	r3, [pc, #124]	; (13cbc <CLI_GetImuData+0xdc>)
   13c40:	4798      	blx	r3
   13c42:	1c02      	adds	r2, r0, #0
   13c44:	4b1e      	ldr	r3, [pc, #120]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c46:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13c48:	4b19      	ldr	r3, [pc, #100]	; (13cb0 <CLI_GetImuData+0xd0>)
   13c4a:	2204      	movs	r2, #4
   13c4c:	5e9b      	ldrsh	r3, [r3, r2]
   13c4e:	0018      	movs	r0, r3
   13c50:	4b1a      	ldr	r3, [pc, #104]	; (13cbc <CLI_GetImuData+0xdc>)
   13c52:	4798      	blx	r3
   13c54:	1c02      	adds	r2, r0, #0
   13c56:	4b1a      	ldr	r3, [pc, #104]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c58:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13c5a:	4b19      	ldr	r3, [pc, #100]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c5c:	681a      	ldr	r2, [r3, #0]
   13c5e:	4b19      	ldr	r3, [pc, #100]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c60:	1c10      	adds	r0, r2, #0
   13c62:	4798      	blx	r3
   13c64:	0005      	movs	r5, r0
   13c66:	4b16      	ldr	r3, [pc, #88]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c68:	685a      	ldr	r2, [r3, #4]
   13c6a:	4b16      	ldr	r3, [pc, #88]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c6c:	1c10      	adds	r0, r2, #0
   13c6e:	4798      	blx	r3
   13c70:	0004      	movs	r4, r0
   13c72:	4b13      	ldr	r3, [pc, #76]	; (13cc0 <CLI_GetImuData+0xe0>)
   13c74:	689a      	ldr	r2, [r3, #8]
   13c76:	4b13      	ldr	r3, [pc, #76]	; (13cc4 <CLI_GetImuData+0xe4>)
   13c78:	1c10      	adds	r0, r2, #0
   13c7a:	4798      	blx	r3
   13c7c:	0003      	movs	r3, r0
   13c7e:	4a12      	ldr	r2, [pc, #72]	; (13cc8 <CLI_GetImuData+0xe8>)
   13c80:	68b9      	ldr	r1, [r7, #8]
   13c82:	68f8      	ldr	r0, [r7, #12]
   13c84:	9301      	str	r3, [sp, #4]
   13c86:	9400      	str	r4, [sp, #0]
   13c88:	002b      	movs	r3, r5
   13c8a:	4c10      	ldr	r4, [pc, #64]	; (13ccc <CLI_GetImuData+0xec>)
   13c8c:	47a0      	blx	r4
   13c8e:	e005      	b.n	13c9c <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13c90:	4a0f      	ldr	r2, [pc, #60]	; (13cd0 <CLI_GetImuData+0xf0>)
   13c92:	68b9      	ldr	r1, [r7, #8]
   13c94:	68fb      	ldr	r3, [r7, #12]
   13c96:	0018      	movs	r0, r3
   13c98:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <CLI_GetImuData+0xec>)
   13c9a:	4798      	blx	r3
    }
    return pdFALSE;
   13c9c:	2300      	movs	r3, #0
}
   13c9e:	0018      	movs	r0, r3
   13ca0:	46bd      	mov	sp, r7
   13ca2:	b006      	add	sp, #24
   13ca4:	bdb0      	pop	{r4, r5, r7, pc}
   13ca6:	46c0      	nop			; (mov r8, r8)
   13ca8:	000159e9 	.word	0x000159e9
   13cac:	00015495 	.word	0x00015495
   13cb0:	200005ec 	.word	0x200005ec
   13cb4:	000356ef 	.word	0x000356ef
   13cb8:	000154d1 	.word	0x000154d1
   13cbc:	00014d25 	.word	0x00014d25
   13cc0:	200005f4 	.word	0x200005f4
   13cc4:	00033c95 	.word	0x00033c95
   13cc8:	00037020 	.word	0x00037020
   13ccc:	00035949 	.word	0x00035949
   13cd0:	00037044 	.word	0x00037044

00013cd4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cd4:	b590      	push	{r4, r7, lr}
   13cd6:	b087      	sub	sp, #28
   13cd8:	af00      	add	r7, sp, #0
   13cda:	60f8      	str	r0, [r7, #12]
   13cdc:	60b9      	str	r1, [r7, #8]
   13cde:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13ce0:	2317      	movs	r3, #23
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	221b      	movs	r2, #27
   13ce6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13ce8:	2317      	movs	r3, #23
   13cea:	18fb      	adds	r3, r7, r3
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	4a08      	ldr	r2, [pc, #32]	; (13d10 <xCliClearTerminalScreen+0x3c>)
   13cf0:	4808      	ldr	r0, [pc, #32]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cf2:	210f      	movs	r1, #15
   13cf4:	4c08      	ldr	r4, [pc, #32]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13cf6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13cf8:	4a06      	ldr	r2, [pc, #24]	; (13d14 <xCliClearTerminalScreen+0x40>)
   13cfa:	68b9      	ldr	r1, [r7, #8]
   13cfc:	68fb      	ldr	r3, [r7, #12]
   13cfe:	0018      	movs	r0, r3
   13d00:	4b05      	ldr	r3, [pc, #20]	; (13d18 <xCliClearTerminalScreen+0x44>)
   13d02:	4798      	blx	r3
    return pdFALSE;
   13d04:	2300      	movs	r3, #0
}
   13d06:	0018      	movs	r0, r3
   13d08:	46bd      	mov	sp, r7
   13d0a:	b007      	add	sp, #28
   13d0c:	bd90      	pop	{r4, r7, pc}
   13d0e:	46c0      	nop			; (mov r8, r8)
   13d10:	00037058 	.word	0x00037058
   13d14:	20000504 	.word	0x20000504
   13d18:	00035949 	.word	0x00035949

00013d1c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	60f8      	str	r0, [r7, #12]
   13d24:	60b9      	str	r1, [r7, #8]
   13d26:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13d28:	2002      	movs	r0, #2
   13d2a:	4b03      	ldr	r3, [pc, #12]	; (13d38 <CLI_OTAU+0x1c>)
   13d2c:	4798      	blx	r3

    return pdFALSE;
   13d2e:	2300      	movs	r3, #0
}
   13d30:	0018      	movs	r0, r3
   13d32:	46bd      	mov	sp, r7
   13d34:	b004      	add	sp, #16
   13d36:	bd80      	pop	{r7, pc}
   13d38:	00017fad 	.word	0x00017fad

00013d3c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d3c:	b580      	push	{r7, lr}
   13d3e:	b084      	sub	sp, #16
   13d40:	af00      	add	r7, sp, #0
   13d42:	60f8      	str	r0, [r7, #12]
   13d44:	60b9      	str	r1, [r7, #8]
   13d46:	607a      	str	r2, [r7, #4]
    system_reset();
   13d48:	4b03      	ldr	r3, [pc, #12]	; (13d58 <CLI_ResetDevice+0x1c>)
   13d4a:	4798      	blx	r3
    return pdFALSE;
   13d4c:	2300      	movs	r3, #0
}
   13d4e:	0018      	movs	r0, r3
   13d50:	46bd      	mov	sp, r7
   13d52:	b004      	add	sp, #16
   13d54:	bd80      	pop	{r7, pc}
   13d56:	46c0      	nop			; (mov r8, r8)
   13d58:	00013805 	.word	0x00013805

00013d5c <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d5c:	b580      	push	{r7, lr}
   13d5e:	b084      	sub	sp, #16
   13d60:	af00      	add	r7, sp, #0
   13d62:	60f8      	str	r0, [r7, #12]
   13d64:	60b9      	str	r1, [r7, #8]
   13d66:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13d68:	4a05      	ldr	r2, [pc, #20]	; (13d80 <CLI_NeotrellisSetLed+0x24>)
   13d6a:	68b9      	ldr	r1, [r7, #8]
   13d6c:	68fb      	ldr	r3, [r7, #12]
   13d6e:	0018      	movs	r0, r3
   13d70:	4b04      	ldr	r3, [pc, #16]	; (13d84 <CLI_NeotrellisSetLed+0x28>)
   13d72:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   13d74:	2300      	movs	r3, #0
}
   13d76:	0018      	movs	r0, r3
   13d78:	46bd      	mov	sp, r7
   13d7a:	b004      	add	sp, #16
   13d7c:	bd80      	pop	{r7, pc}
   13d7e:	46c0      	nop			; (mov r8, r8)
   13d80:	00037060 	.word	0x00037060
   13d84:	00035949 	.word	0x00035949

00013d88 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13d88:	b590      	push	{r4, r7, lr}
   13d8a:	b099      	sub	sp, #100	; 0x64
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	60f8      	str	r0, [r7, #12]
   13d90:	60b9      	str	r1, [r7, #8]
   13d92:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   13d94:	235f      	movs	r3, #95	; 0x5f
   13d96:	18fc      	adds	r4, r7, r3
   13d98:	4b36      	ldr	r3, [pc, #216]	; (13e74 <CLI_NeotrellProcessButtonBuffer+0xec>)
   13d9a:	4798      	blx	r3
   13d9c:	0003      	movs	r3, r0
   13d9e:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   13da0:	235f      	movs	r3, #95	; 0x5f
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d05d      	beq.n	13e66 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   13daa:	2310      	movs	r3, #16
   13dac:	18fb      	adds	r3, r7, r3
   13dae:	2101      	movs	r1, #1
   13db0:	0018      	movs	r0, r3
   13db2:	4b31      	ldr	r3, [pc, #196]	; (13e78 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13db4:	4798      	blx	r3
   13db6:	0003      	movs	r3, r0
   13db8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d150      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13dc0:	2310      	movs	r3, #16
   13dc2:	18fb      	adds	r3, r7, r3
   13dc4:	781a      	ldrb	r2, [r3, #0]
   13dc6:	2357      	movs	r3, #87	; 0x57
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	2103      	movs	r1, #3
   13dcc:	400a      	ands	r2, r1
   13dce:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13dd0:	2310      	movs	r3, #16
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	781a      	ldrb	r2, [r3, #0]
   13dd6:	2356      	movs	r3, #86	; 0x56
   13dd8:	18fb      	adds	r3, r7, r3
   13dda:	0892      	lsrs	r2, r2, #2
   13ddc:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13dde:	2356      	movs	r3, #86	; 0x56
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	08db      	lsrs	r3, r3, #3
   13de6:	b2db      	uxtb	r3, r3
   13de8:	009a      	lsls	r2, r3, #2
   13dea:	2356      	movs	r3, #86	; 0x56
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	2107      	movs	r1, #7
   13df2:	400b      	ands	r3, r1
   13df4:	18d3      	adds	r3, r2, r3
   13df6:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13df8:	2357      	movs	r3, #87	; 0x57
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	781b      	ldrb	r3, [r3, #0]
   13dfe:	2b02      	cmp	r3, #2
   13e00:	d115      	bne.n	13e2e <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e04:	2b00      	cmp	r3, #0
   13e06:	da00      	bge.n	13e0a <CLI_NeotrellProcessButtonBuffer+0x82>
   13e08:	3307      	adds	r3, #7
   13e0a:	10db      	asrs	r3, r3, #3
   13e0c:	009a      	lsls	r2, r3, #2
   13e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e10:	491a      	ldr	r1, [pc, #104]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e12:	400b      	ands	r3, r1
   13e14:	d504      	bpl.n	13e20 <CLI_NeotrellProcessButtonBuffer+0x98>
   13e16:	3b01      	subs	r3, #1
   13e18:	2108      	movs	r1, #8
   13e1a:	4249      	negs	r1, r1
   13e1c:	430b      	orrs	r3, r1
   13e1e:	3301      	adds	r3, #1
   13e20:	18d3      	adds	r3, r2, r3
   13e22:	4a17      	ldr	r2, [pc, #92]	; (13e80 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13e24:	68b9      	ldr	r1, [r7, #8]
   13e26:	68f8      	ldr	r0, [r7, #12]
   13e28:	4c16      	ldr	r4, [pc, #88]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e2a:	47a0      	blx	r4
   13e2c:	e019      	b.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13e2e:	2357      	movs	r3, #87	; 0x57
   13e30:	18fb      	adds	r3, r7, r3
   13e32:	781b      	ldrb	r3, [r3, #0]
   13e34:	2b03      	cmp	r3, #3
   13e36:	d114      	bne.n	13e62 <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e3a:	2b00      	cmp	r3, #0
   13e3c:	da00      	bge.n	13e40 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13e3e:	3307      	adds	r3, #7
   13e40:	10db      	asrs	r3, r3, #3
   13e42:	009a      	lsls	r2, r3, #2
   13e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13e46:	490d      	ldr	r1, [pc, #52]	; (13e7c <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13e48:	400b      	ands	r3, r1
   13e4a:	d504      	bpl.n	13e56 <CLI_NeotrellProcessButtonBuffer+0xce>
   13e4c:	3b01      	subs	r3, #1
   13e4e:	2108      	movs	r1, #8
   13e50:	4249      	negs	r1, r1
   13e52:	430b      	orrs	r3, r1
   13e54:	3301      	adds	r3, #1
   13e56:	18d3      	adds	r3, r2, r3
   13e58:	4a0b      	ldr	r2, [pc, #44]	; (13e88 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13e5a:	68b9      	ldr	r1, [r7, #8]
   13e5c:	68f8      	ldr	r0, [r7, #12]
   13e5e:	4c09      	ldr	r4, [pc, #36]	; (13e84 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13e60:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   13e62:	2301      	movs	r3, #1
   13e64:	e002      	b.n	13e6c <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   13e66:	2300      	movs	r3, #0
   13e68:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   13e6a:	2300      	movs	r3, #0
    }
}
   13e6c:	0018      	movs	r0, r3
   13e6e:	46bd      	mov	sp, r7
   13e70:	b019      	add	sp, #100	; 0x64
   13e72:	bd90      	pop	{r4, r7, pc}
   13e74:	00015f8d 	.word	0x00015f8d
   13e78:	00015ff5 	.word	0x00015ff5
   13e7c:	80000007 	.word	0x80000007
   13e80:	00037078 	.word	0x00037078
   13e84:	00035949 	.word	0x00035949
   13e88:	00037094 	.word	0x00037094

00013e8c <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e8c:	b590      	push	{r4, r7, lr}
   13e8e:	b087      	sub	sp, #28
   13e90:	af00      	add	r7, sp, #0
   13e92:	60f8      	str	r0, [r7, #12]
   13e94:	60b9      	str	r1, [r7, #8]
   13e96:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   13e98:	2312      	movs	r3, #18
   13e9a:	18fb      	adds	r3, r7, r3
   13e9c:	2200      	movs	r2, #0
   13e9e:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   13ea0:	2312      	movs	r3, #18
   13ea2:	18fb      	adds	r3, r7, r3
   13ea4:	2164      	movs	r1, #100	; 0x64
   13ea6:	0018      	movs	r0, r3
   13ea8:	4b19      	ldr	r3, [pc, #100]	; (13f10 <CLI_DistanceSensorGetDistance+0x84>)
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   13eb0:	697b      	ldr	r3, [r7, #20]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d006      	beq.n	13ec4 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   13eb6:	697b      	ldr	r3, [r7, #20]
   13eb8:	4a16      	ldr	r2, [pc, #88]	; (13f14 <CLI_DistanceSensorGetDistance+0x88>)
   13eba:	68b9      	ldr	r1, [r7, #8]
   13ebc:	68f8      	ldr	r0, [r7, #12]
   13ebe:	4c16      	ldr	r4, [pc, #88]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ec0:	47a0      	blx	r4
   13ec2:	e007      	b.n	13ed4 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   13ec4:	2312      	movs	r3, #18
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	881b      	ldrh	r3, [r3, #0]
   13eca:	4a14      	ldr	r2, [pc, #80]	; (13f1c <CLI_DistanceSensorGetDistance+0x90>)
   13ecc:	68b9      	ldr	r1, [r7, #8]
   13ece:	68f8      	ldr	r0, [r7, #12]
   13ed0:	4c11      	ldr	r4, [pc, #68]	; (13f18 <CLI_DistanceSensorGetDistance+0x8c>)
   13ed2:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   13ed4:	2312      	movs	r3, #18
   13ed6:	18fb      	adds	r3, r7, r3
   13ed8:	0018      	movs	r0, r3
   13eda:	4b11      	ldr	r3, [pc, #68]	; (13f20 <CLI_DistanceSensorGetDistance+0x94>)
   13edc:	4798      	blx	r3
   13ede:	0003      	movs	r3, r0
   13ee0:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   13ee2:	697b      	ldr	r3, [r7, #20]
   13ee4:	2b01      	cmp	r3, #1
   13ee6:	d10e      	bne.n	13f06 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   13ee8:	68fb      	ldr	r3, [r7, #12]
   13eea:	0018      	movs	r0, r3
   13eec:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <CLI_DistanceSensorGetDistance+0x98>)
   13eee:	4798      	blx	r3
   13ef0:	0003      	movs	r3, r0
   13ef2:	001a      	movs	r2, r3
   13ef4:	68fb      	ldr	r3, [r7, #12]
   13ef6:	189a      	adds	r2, r3, r2
   13ef8:	4b0b      	ldr	r3, [pc, #44]	; (13f28 <CLI_DistanceSensorGetDistance+0x9c>)
   13efa:	0010      	movs	r0, r2
   13efc:	0019      	movs	r1, r3
   13efe:	231a      	movs	r3, #26
   13f00:	001a      	movs	r2, r3
   13f02:	4b0a      	ldr	r3, [pc, #40]	; (13f2c <CLI_DistanceSensorGetDistance+0xa0>)
   13f04:	4798      	blx	r3
    }
    return pdFALSE;
   13f06:	2300      	movs	r3, #0
}
   13f08:	0018      	movs	r0, r3
   13f0a:	46bd      	mov	sp, r7
   13f0c:	b007      	add	sp, #28
   13f0e:	bd90      	pop	{r4, r7, pc}
   13f10:	00014379 	.word	0x00014379
   13f14:	000370ac 	.word	0x000370ac
   13f18:	00035949 	.word	0x00035949
   13f1c:	000370c0 	.word	0x000370c0
   13f20:	00017fe1 	.word	0x00017fe1
   13f24:	00035aa7 	.word	0x00035aa7
   13f28:	000370d4 	.word	0x000370d4
   13f2c:	000356b9 	.word	0x000356b9

00013f30 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f30:	b580      	push	{r7, lr}
   13f32:	b08a      	sub	sp, #40	; 0x28
   13f34:	af00      	add	r7, sp, #0
   13f36:	60f8      	str	r0, [r7, #12]
   13f38:	60b9      	str	r1, [r7, #8]
   13f3a:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   13f3c:	2310      	movs	r3, #16
   13f3e:	18fb      	adds	r3, r7, r3
   13f40:	2200      	movs	r2, #0
   13f42:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   13f44:	2310      	movs	r3, #16
   13f46:	18fb      	adds	r3, r7, r3
   13f48:	2201      	movs	r2, #1
   13f4a:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   13f4c:	2310      	movs	r3, #16
   13f4e:	18fb      	adds	r3, r7, r3
   13f50:	2202      	movs	r2, #2
   13f52:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   13f54:	2310      	movs	r3, #16
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	2203      	movs	r2, #3
   13f5a:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   13f5c:	2310      	movs	r3, #16
   13f5e:	18fb      	adds	r3, r7, r3
   13f60:	2204      	movs	r2, #4
   13f62:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   13f64:	2310      	movs	r3, #16
   13f66:	18fb      	adds	r3, r7, r3
   13f68:	2205      	movs	r2, #5
   13f6a:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   13f6c:	2310      	movs	r3, #16
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	2206      	movs	r2, #6
   13f72:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   13f74:	2310      	movs	r3, #16
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	2207      	movs	r2, #7
   13f7a:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   13f7c:	2310      	movs	r3, #16
   13f7e:	18fb      	adds	r3, r7, r3
   13f80:	2208      	movs	r2, #8
   13f82:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   13f84:	2310      	movs	r3, #16
   13f86:	18fb      	adds	r3, r7, r3
   13f88:	2209      	movs	r2, #9
   13f8a:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   13f8c:	2310      	movs	r3, #16
   13f8e:	18fb      	adds	r3, r7, r3
   13f90:	22ff      	movs	r2, #255	; 0xff
   13f92:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   13f94:	2310      	movs	r3, #16
   13f96:	18fb      	adds	r3, r7, r3
   13f98:	0018      	movs	r0, r3
   13f9a:	4b09      	ldr	r3, [pc, #36]	; (13fc0 <CLI_SendDummyGameData+0x90>)
   13f9c:	4798      	blx	r3
   13f9e:	0003      	movs	r3, r0
   13fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   13fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fa4:	2b01      	cmp	r3, #1
   13fa6:	d105      	bne.n	13fb4 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13fa8:	4a06      	ldr	r2, [pc, #24]	; (13fc4 <CLI_SendDummyGameData+0x94>)
   13faa:	68b9      	ldr	r1, [r7, #8]
   13fac:	68fb      	ldr	r3, [r7, #12]
   13fae:	0018      	movs	r0, r3
   13fb0:	4b05      	ldr	r3, [pc, #20]	; (13fc8 <CLI_SendDummyGameData+0x98>)
   13fb2:	4798      	blx	r3
    }
    return pdFALSE;
   13fb4:	2300      	movs	r3, #0
}
   13fb6:	0018      	movs	r0, r3
   13fb8:	46bd      	mov	sp, r7
   13fba:	b00a      	add	sp, #40	; 0x28
   13fbc:	bd80      	pop	{r7, pc}
   13fbe:	46c0      	nop			; (mov r8, r8)
   13fc0:	0001800d 	.word	0x0001800d
   13fc4:	000370f0 	.word	0x000370f0
   13fc8:	00035949 	.word	0x00035949

00013fcc <CLI_SendTestData>:

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fcc:	b580      	push	{r7, lr}
   13fce:	b086      	sub	sp, #24
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	60f8      	str	r0, [r7, #12]
   13fd4:	60b9      	str	r1, [r7, #8]
   13fd6:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13fd8:	2310      	movs	r3, #16
   13fda:	18fb      	adds	r3, r7, r3
   13fdc:	2206      	movs	r2, #6
   13fde:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13fe0:	2310      	movs	r3, #16
   13fe2:	18fb      	adds	r3, r7, r3
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b09      	ldr	r3, [pc, #36]	; (1400c <CLI_SendTestData+0x40>)
   13fe8:	4798      	blx	r3
   13fea:	0003      	movs	r3, r0
   13fec:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13fee:	697b      	ldr	r3, [r7, #20]
   13ff0:	2b01      	cmp	r3, #1
   13ff2:	d105      	bne.n	14000 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13ff4:	4a06      	ldr	r2, [pc, #24]	; (14010 <CLI_SendTestData+0x44>)
   13ff6:	68b9      	ldr	r1, [r7, #8]
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b05      	ldr	r3, [pc, #20]	; (14014 <CLI_SendTestData+0x48>)
   13ffe:	4798      	blx	r3
	}
	return pdFALSE;
   14000:	2300      	movs	r3, #0
}
   14002:	0018      	movs	r0, r3
   14004:	46bd      	mov	sp, r7
   14006:	b006      	add	sp, #24
   14008:	bd80      	pop	{r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	00018039 	.word	0x00018039
   14010:	0003710c 	.word	0x0003710c
   14014:	00035949 	.word	0x00035949

00014018 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b084      	sub	sp, #16
   1401c:	af00      	add	r7, sp, #0
   1401e:	60f8      	str	r0, [r7, #12]
   14020:	60b9      	str	r1, [r7, #8]
   14022:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   14024:	2002      	movs	r0, #2
   14026:	4b03      	ldr	r3, [pc, #12]	; (14034 <CLI_ServoOpen+0x1c>)
   14028:	4798      	blx	r3
	return pdFALSE;
   1402a:	2300      	movs	r3, #0
}
   1402c:	0018      	movs	r0, r3
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	00016421 	.word	0x00016421

00014038 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	60f8      	str	r0, [r7, #12]
   14040:	60b9      	str	r1, [r7, #8]
   14042:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   14044:	2003      	movs	r0, #3
   14046:	4b03      	ldr	r3, [pc, #12]	; (14054 <CLI_ServoClose+0x1c>)
   14048:	4798      	blx	r3
	return pdFALSE;
   1404a:	2300      	movs	r3, #0
}
   1404c:	0018      	movs	r0, r3
   1404e:	46bd      	mov	sp, r7
   14050:	b004      	add	sp, #16
   14052:	bd80      	pop	{r7, pc}
   14054:	00016421 	.word	0x00016421

00014058 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14058:	b590      	push	{r4, r7, lr}
   1405a:	b099      	sub	sp, #100	; 0x64
   1405c:	af00      	add	r7, sp, #0
   1405e:	60f8      	str	r0, [r7, #12]
   14060:	60b9      	str	r1, [r7, #8]
   14062:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	//SerialConsoleWriteString( "hello  NAU7802!\r\n");
	I2cInitializeDriver();
   14064:	4b1e      	ldr	r3, [pc, #120]	; (140e0 <CLI_SendWeightData+0x88>)
   14066:	4798      	blx	r3
	//SerialConsoleWriteString( "I2C Initial!\r\n");
	ADCchip_Init();
   14068:	4b1e      	ldr	r3, [pc, #120]	; (140e4 <CLI_SendWeightData+0x8c>)
   1406a:	4798      	blx	r3
	//SerialConsoleWriteString( "ADC Initial!\r\n");
	ADC_StartConversion();
   1406c:	4b1e      	ldr	r3, [pc, #120]	; (140e8 <CLI_SendWeightData+0x90>)
   1406e:	4798      	blx	r3
	//SerialConsoleWriteString( "ADC Conver!\r\n");
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14070:	46c0      	nop			; (mov r8, r8)
   14072:	2000      	movs	r0, #0
   14074:	4b1d      	ldr	r3, [pc, #116]	; (140ec <CLI_SendWeightData+0x94>)
   14076:	4798      	blx	r3
   14078:	0003      	movs	r3, r0
   1407a:	001a      	movs	r2, r3
   1407c:	2320      	movs	r3, #32
   1407e:	4013      	ands	r3, r2
   14080:	2b20      	cmp	r3, #32
   14082:	d1f6      	bne.n	14072 <CLI_SendWeightData+0x1a>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   14084:	4b1a      	ldr	r3, [pc, #104]	; (140f0 <CLI_SendWeightData+0x98>)
   14086:	4798      	blx	r3
   14088:	0003      	movs	r3, r0
   1408a:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	int i32ConversionData = (int)(ADC_value << 8);
   1408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1408e:	021b      	lsls	r3, r3, #8
   14090:	65bb      	str	r3, [r7, #88]	; 0x58
	/* Shift the number back right to recover its intended magnitude */
	i32ConversionData = (i32ConversionData >> 8);
   14092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14094:	121b      	asrs	r3, r3, #8
   14096:	65bb      	str	r3, [r7, #88]	; 0x58
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_value);
   14098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1409a:	4a16      	ldr	r2, [pc, #88]	; (140f4 <CLI_SendWeightData+0x9c>)
   1409c:	2110      	movs	r1, #16
   1409e:	1878      	adds	r0, r7, r1
   140a0:	2140      	movs	r1, #64	; 0x40
   140a2:	4c15      	ldr	r4, [pc, #84]	; (140f8 <CLI_SendWeightData+0xa0>)
   140a4:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   140a6:	2310      	movs	r3, #16
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	0018      	movs	r0, r3
   140ac:	4b13      	ldr	r3, [pc, #76]	; (140fc <CLI_SendWeightData+0xa4>)
   140ae:	4798      	blx	r3
	nauvar.nau = ADC_value;
   140b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   140b2:	653b      	str	r3, [r7, #80]	; 0x50
	
	int error = WifiAddNauDataToQueue(&nauvar);
   140b4:	2350      	movs	r3, #80	; 0x50
   140b6:	18fb      	adds	r3, r7, r3
   140b8:	0018      	movs	r0, r3
   140ba:	4b11      	ldr	r3, [pc, #68]	; (14100 <CLI_SendWeightData+0xa8>)
   140bc:	4798      	blx	r3
   140be:	0003      	movs	r3, r0
   140c0:	657b      	str	r3, [r7, #84]	; 0x54
	if (error == pdTRUE) {
   140c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   140c4:	2b01      	cmp	r3, #1
   140c6:	d105      	bne.n	140d4 <CLI_SendWeightData+0x7c>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   140c8:	4a0e      	ldr	r2, [pc, #56]	; (14104 <CLI_SendWeightData+0xac>)
   140ca:	68b9      	ldr	r1, [r7, #8]
   140cc:	68fb      	ldr	r3, [r7, #12]
   140ce:	0018      	movs	r0, r3
   140d0:	4b09      	ldr	r3, [pc, #36]	; (140f8 <CLI_SendWeightData+0xa0>)
   140d2:	4798      	blx	r3
	}
	return pdFALSE;
   140d4:	2300      	movs	r3, #0
}
   140d6:	0018      	movs	r0, r3
   140d8:	46bd      	mov	sp, r7
   140da:	b019      	add	sp, #100	; 0x64
   140dc:	bd90      	pop	{r4, r7, pc}
   140de:	46c0      	nop			; (mov r8, r8)
   140e0:	00014881 	.word	0x00014881
   140e4:	00015ce9 	.word	0x00015ce9
   140e8:	00015d85 	.word	0x00015d85
   140ec:	00015bd1 	.word	0x00015bd1
   140f0:	00015e41 	.word	0x00015e41
   140f4:	00037124 	.word	0x00037124
   140f8:	00035949 	.word	0x00035949
   140fc:	0001e915 	.word	0x0001e915
   14100:	00018065 	.word	0x00018065
   14104:	00037148 	.word	0x00037148

00014108 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14108:	b590      	push	{r4, r7, lr}
   1410a:	b08f      	sub	sp, #60	; 0x3c
   1410c:	af00      	add	r7, sp, #0
   1410e:	60f8      	str	r0, [r7, #12]
   14110:	60b9      	str	r1, [r7, #8]
   14112:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   14114:	2318      	movs	r3, #24
   14116:	18fb      	adds	r3, r7, r3
   14118:	2200      	movs	r2, #0
   1411a:	701a      	strb	r2, [r3, #0]
   1411c:	2318      	movs	r3, #24
   1411e:	18fb      	adds	r3, r7, r3
   14120:	2200      	movs	r2, #0
   14122:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   14124:	2318      	movs	r3, #24
   14126:	18fb      	adds	r3, r7, r3
   14128:	2200      	movs	r2, #0
   1412a:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   1412c:	2318      	movs	r3, #24
   1412e:	18fb      	adds	r3, r7, r3
   14130:	2200      	movs	r2, #0
   14132:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   14134:	231c      	movs	r3, #28
   14136:	18fb      	adds	r3, r7, r3
   14138:	2200      	movs	r2, #0
   1413a:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   1413c:	231c      	movs	r3, #28
   1413e:	18fb      	adds	r3, r7, r3
   14140:	2214      	movs	r2, #20
   14142:	18ba      	adds	r2, r7, r2
   14144:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   14146:	231c      	movs	r3, #28
   14148:	18fb      	adds	r3, r7, r3
   1414a:	2201      	movs	r2, #1
   1414c:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1414e:	231c      	movs	r3, #28
   14150:	18fb      	adds	r3, r7, r3
   14152:	2218      	movs	r2, #24
   14154:	18ba      	adds	r2, r7, r2
   14156:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   14158:	231c      	movs	r3, #28
   1415a:	18fb      	adds	r3, r7, r3
   1415c:	2201      	movs	r2, #1
   1415e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   14160:	4b2c      	ldr	r3, [pc, #176]	; (14214 <CLI_i2cScan+0x10c>)
   14162:	0018      	movs	r0, r3
   14164:	4b2c      	ldr	r3, [pc, #176]	; (14218 <CLI_i2cScan+0x110>)
   14166:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14168:	2300      	movs	r3, #0
   1416a:	637b      	str	r3, [r7, #52]	; 0x34
   1416c:	e046      	b.n	141fc <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14170:	4a2a      	ldr	r2, [pc, #168]	; (1421c <CLI_i2cScan+0x114>)
   14172:	482b      	ldr	r0, [pc, #172]	; (14220 <CLI_i2cScan+0x118>)
   14174:	210f      	movs	r1, #15
   14176:	4c2b      	ldr	r4, [pc, #172]	; (14224 <CLI_i2cScan+0x11c>)
   14178:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1417a:	4b29      	ldr	r3, [pc, #164]	; (14220 <CLI_i2cScan+0x118>)
   1417c:	0018      	movs	r0, r3
   1417e:	4b26      	ldr	r3, [pc, #152]	; (14218 <CLI_i2cScan+0x110>)
   14180:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   14182:	2300      	movs	r3, #0
   14184:	633b      	str	r3, [r7, #48]	; 0x30
   14186:	e02f      	b.n	141e8 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   14188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1418a:	b2da      	uxtb	r2, r3
   1418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1418e:	b2db      	uxtb	r3, r3
   14190:	18d3      	adds	r3, r2, r3
   14192:	b2db      	uxtb	r3, r3
   14194:	18db      	adds	r3, r3, r3
   14196:	b2da      	uxtb	r2, r3
   14198:	231c      	movs	r3, #28
   1419a:	18fb      	adds	r3, r7, r3
   1419c:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   1419e:	231c      	movs	r3, #28
   141a0:	18fb      	adds	r3, r7, r3
   141a2:	2164      	movs	r1, #100	; 0x64
   141a4:	0018      	movs	r0, r3
   141a6:	4b20      	ldr	r3, [pc, #128]	; (14228 <CLI_i2cScan+0x120>)
   141a8:	4798      	blx	r3
   141aa:	0003      	movs	r3, r0
   141ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   141ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   141b0:	2b00      	cmp	r3, #0
   141b2:	d10c      	bne.n	141ce <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   141b4:	231c      	movs	r3, #28
   141b6:	18fb      	adds	r3, r7, r3
   141b8:	781b      	ldrb	r3, [r3, #0]
   141ba:	4a18      	ldr	r2, [pc, #96]	; (1421c <CLI_i2cScan+0x114>)
   141bc:	4818      	ldr	r0, [pc, #96]	; (14220 <CLI_i2cScan+0x118>)
   141be:	210f      	movs	r1, #15
   141c0:	4c18      	ldr	r4, [pc, #96]	; (14224 <CLI_i2cScan+0x11c>)
   141c2:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   141c4:	4b16      	ldr	r3, [pc, #88]	; (14220 <CLI_i2cScan+0x118>)
   141c6:	0018      	movs	r0, r3
   141c8:	4b13      	ldr	r3, [pc, #76]	; (14218 <CLI_i2cScan+0x110>)
   141ca:	4798      	blx	r3
   141cc:	e009      	b.n	141e2 <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   141ce:	4b14      	ldr	r3, [pc, #80]	; (14220 <CLI_i2cScan+0x118>)
   141d0:	4a16      	ldr	r2, [pc, #88]	; (1422c <CLI_i2cScan+0x124>)
   141d2:	8811      	ldrh	r1, [r2, #0]
   141d4:	8019      	strh	r1, [r3, #0]
   141d6:	7892      	ldrb	r2, [r2, #2]
   141d8:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   141da:	4b11      	ldr	r3, [pc, #68]	; (14220 <CLI_i2cScan+0x118>)
   141dc:	0018      	movs	r0, r3
   141de:	4b0e      	ldr	r3, [pc, #56]	; (14218 <CLI_i2cScan+0x110>)
   141e0:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   141e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141e4:	3301      	adds	r3, #1
   141e6:	633b      	str	r3, [r7, #48]	; 0x30
   141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   141ea:	2b0f      	cmp	r3, #15
   141ec:	ddcc      	ble.n	14188 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   141ee:	4b10      	ldr	r3, [pc, #64]	; (14230 <CLI_i2cScan+0x128>)
   141f0:	0018      	movs	r0, r3
   141f2:	4b09      	ldr	r3, [pc, #36]	; (14218 <CLI_i2cScan+0x110>)
   141f4:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   141f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141f8:	3310      	adds	r3, #16
   141fa:	637b      	str	r3, [r7, #52]	; 0x34
   141fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   141fe:	2b7f      	cmp	r3, #127	; 0x7f
   14200:	ddb5      	ble.n	1416e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   14202:	4b0b      	ldr	r3, [pc, #44]	; (14230 <CLI_i2cScan+0x128>)
   14204:	0018      	movs	r0, r3
   14206:	4b04      	ldr	r3, [pc, #16]	; (14218 <CLI_i2cScan+0x110>)
   14208:	4798      	blx	r3
			return pdFALSE;
   1420a:	2300      	movs	r3, #0

}
   1420c:	0018      	movs	r0, r3
   1420e:	46bd      	mov	sp, r7
   14210:	b00f      	add	sp, #60	; 0x3c
   14212:	bd90      	pop	{r4, r7, pc}
   14214:	00037160 	.word	0x00037160
   14218:	0001e915 	.word	0x0001e915
   1421c:	00037194 	.word	0x00037194
   14220:	20000504 	.word	0x20000504
   14224:	00035949 	.word	0x00035949
   14228:	00014aad 	.word	0x00014aad
   1422c:	0003719c 	.word	0x0003719c
   14230:	0003700c 	.word	0x0003700c

00014234 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   14234:	b580      	push	{r7, lr}
   14236:	b088      	sub	sp, #32
   14238:	af00      	add	r7, sp, #0
   1423a:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   1423c:	4b33      	ldr	r3, [pc, #204]	; (1430c <vControlHandlerTask+0xd8>)
   1423e:	0018      	movs	r0, r3
   14240:	4b33      	ldr	r3, [pc, #204]	; (14310 <vControlHandlerTask+0xdc>)
   14242:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   14244:	2200      	movs	r2, #0
   14246:	2114      	movs	r1, #20
   14248:	2002      	movs	r0, #2
   1424a:	4b32      	ldr	r3, [pc, #200]	; (14314 <vControlHandlerTask+0xe0>)
   1424c:	4798      	blx	r3
   1424e:	0002      	movs	r2, r0
   14250:	4b31      	ldr	r3, [pc, #196]	; (14318 <vControlHandlerTask+0xe4>)
   14252:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   14254:	2200      	movs	r2, #0
   14256:	2103      	movs	r1, #3
   14258:	2002      	movs	r0, #2
   1425a:	4b2e      	ldr	r3, [pc, #184]	; (14314 <vControlHandlerTask+0xe0>)
   1425c:	4798      	blx	r3
   1425e:	0002      	movs	r2, r0
   14260:	4b2e      	ldr	r3, [pc, #184]	; (1431c <vControlHandlerTask+0xe8>)
   14262:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   14264:	4b2c      	ldr	r3, [pc, #176]	; (14318 <vControlHandlerTask+0xe4>)
   14266:	681b      	ldr	r3, [r3, #0]
   14268:	2b00      	cmp	r3, #0
   1426a:	d003      	beq.n	14274 <vControlHandlerTask+0x40>
   1426c:	4b2b      	ldr	r3, [pc, #172]	; (1431c <vControlHandlerTask+0xe8>)
   1426e:	681b      	ldr	r3, [r3, #0]
   14270:	2b00      	cmp	r3, #0
   14272:	d103      	bne.n	1427c <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   14274:	4b2a      	ldr	r3, [pc, #168]	; (14320 <vControlHandlerTask+0xec>)
   14276:	0018      	movs	r0, r3
   14278:	4b25      	ldr	r3, [pc, #148]	; (14310 <vControlHandlerTask+0xdc>)
   1427a:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   1427c:	4b29      	ldr	r3, [pc, #164]	; (14324 <vControlHandlerTask+0xf0>)
   1427e:	2200      	movs	r2, #0
   14280:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   14282:	4b28      	ldr	r3, [pc, #160]	; (14324 <vControlHandlerTask+0xf0>)
   14284:	781b      	ldrb	r3, [r3, #0]
   14286:	2b01      	cmp	r3, #1
   14288:	d01d      	beq.n	142c6 <vControlHandlerTask+0x92>
   1428a:	2b02      	cmp	r3, #2
   1428c:	d035      	beq.n	142fa <vControlHandlerTask+0xc6>
   1428e:	2b00      	cmp	r3, #0
   14290:	d12f      	bne.n	142f2 <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   14292:	4b21      	ldr	r3, [pc, #132]	; (14318 <vControlHandlerTask+0xe4>)
   14294:	681b      	ldr	r3, [r3, #0]
   14296:	220c      	movs	r2, #12
   14298:	18b9      	adds	r1, r7, r2
   1429a:	2200      	movs	r2, #0
   1429c:	0018      	movs	r0, r3
   1429e:	4b22      	ldr	r3, [pc, #136]	; (14328 <vControlHandlerTask+0xf4>)
   142a0:	4798      	blx	r3
   142a2:	0003      	movs	r3, r0
   142a4:	2b01      	cmp	r3, #1
   142a6:	d12a      	bne.n	142fe <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   142a8:	4b20      	ldr	r3, [pc, #128]	; (1432c <vControlHandlerTask+0xf8>)
   142aa:	0019      	movs	r1, r3
   142ac:	2001      	movs	r0, #1
   142ae:	4b20      	ldr	r3, [pc, #128]	; (14330 <vControlHandlerTask+0xfc>)
   142b0:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   142b2:	230c      	movs	r3, #12
   142b4:	18fb      	adds	r3, r7, r3
   142b6:	0018      	movs	r0, r3
   142b8:	4b1e      	ldr	r3, [pc, #120]	; (14334 <vControlHandlerTask+0x100>)
   142ba:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   142bc:	4b19      	ldr	r3, [pc, #100]	; (14324 <vControlHandlerTask+0xf0>)
   142be:	2201      	movs	r2, #1
   142c0:	701a      	strb	r2, [r3, #0]
                }

                break;
   142c2:	46c0      	nop			; (mov r8, r8)
   142c4:	e01b      	b.n	142fe <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   142c6:	4b1c      	ldr	r3, [pc, #112]	; (14338 <vControlHandlerTask+0x104>)
   142c8:	4798      	blx	r3
   142ca:	1e03      	subs	r3, r0, #0
   142cc:	d019      	beq.n	14302 <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   142ce:	4b1b      	ldr	r3, [pc, #108]	; (1433c <vControlHandlerTask+0x108>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	0018      	movs	r0, r3
   142d6:	4b1a      	ldr	r3, [pc, #104]	; (14340 <vControlHandlerTask+0x10c>)
   142d8:	4798      	blx	r3
   142da:	0003      	movs	r3, r0
   142dc:	2b01      	cmp	r3, #1
   142de:	d004      	beq.n	142ea <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   142e0:	4b18      	ldr	r3, [pc, #96]	; (14344 <vControlHandlerTask+0x110>)
   142e2:	0019      	movs	r1, r3
   142e4:	2001      	movs	r0, #1
   142e6:	4b12      	ldr	r3, [pc, #72]	; (14330 <vControlHandlerTask+0xfc>)
   142e8:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   142ea:	4b0e      	ldr	r3, [pc, #56]	; (14324 <vControlHandlerTask+0xf0>)
   142ec:	2200      	movs	r2, #0
   142ee:	701a      	strb	r2, [r3, #0]
                }

                break;
   142f0:	e007      	b.n	14302 <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   142f2:	4b0c      	ldr	r3, [pc, #48]	; (14324 <vControlHandlerTask+0xf0>)
   142f4:	2200      	movs	r2, #0
   142f6:	701a      	strb	r2, [r3, #0]
                break;
   142f8:	e004      	b.n	14304 <vControlHandlerTask+0xd0>
                break;
   142fa:	46c0      	nop			; (mov r8, r8)
   142fc:	e002      	b.n	14304 <vControlHandlerTask+0xd0>
                break;
   142fe:	46c0      	nop			; (mov r8, r8)
   14300:	e000      	b.n	14304 <vControlHandlerTask+0xd0>
                break;
   14302:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   14304:	2028      	movs	r0, #40	; 0x28
   14306:	4b10      	ldr	r3, [pc, #64]	; (14348 <vControlHandlerTask+0x114>)
   14308:	4798      	blx	r3
        switch (controlState) {
   1430a:	e7ba      	b.n	14282 <vControlHandlerTask+0x4e>
   1430c:	00037270 	.word	0x00037270
   14310:	0001e915 	.word	0x0001e915
   14314:	0001afb5 	.word	0x0001afb5
   14318:	20000600 	.word	0x20000600
   1431c:	20000604 	.word	0x20000604
   14320:	00037290 	.word	0x00037290
   14324:	200047e4 	.word	0x200047e4
   14328:	0001bb15 	.word	0x0001bb15
   1432c:	000372bc 	.word	0x000372bc
   14330:	0001ea01 	.word	0x0001ea01
   14334:	000164d9 	.word	0x000164d9
   14338:	00016515 	.word	0x00016515
   1433c:	00016529 	.word	0x00016529
   14340:	0001800d 	.word	0x0001800d
   14344:	000372e4 	.word	0x000372e4
   14348:	0001ccc1 	.word	0x0001ccc1

0001434c <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   1434c:	b590      	push	{r4, r7, lr}
   1434e:	b085      	sub	sp, #20
   14350:	af00      	add	r7, sp, #0
   14352:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   14354:	4b06      	ldr	r3, [pc, #24]	; (14370 <ControlAddGameData+0x24>)
   14356:	6818      	ldr	r0, [r3, #0]
   14358:	6879      	ldr	r1, [r7, #4]
   1435a:	2300      	movs	r3, #0
   1435c:	220a      	movs	r2, #10
   1435e:	4c05      	ldr	r4, [pc, #20]	; (14374 <ControlAddGameData+0x28>)
   14360:	47a0      	blx	r4
   14362:	0003      	movs	r3, r0
   14364:	60fb      	str	r3, [r7, #12]
    return error;
   14366:	68fb      	ldr	r3, [r7, #12]
}
   14368:	0018      	movs	r0, r3
   1436a:	46bd      	mov	sp, r7
   1436c:	b005      	add	sp, #20
   1436e:	bd90      	pop	{r4, r7, pc}
   14370:	20000600 	.word	0x20000600
   14374:	0001b25d 	.word	0x0001b25d

00014378 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14378:	b580      	push	{r7, lr}
   1437a:	b084      	sub	sp, #16
   1437c:	af00      	add	r7, sp, #0
   1437e:	6078      	str	r0, [r7, #4]
   14380:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14382:	2300      	movs	r3, #0
   14384:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14386:	2396      	movs	r3, #150	; 0x96
   14388:	005b      	lsls	r3, r3, #1
   1438a:	0018      	movs	r0, r3
   1438c:	4b25      	ldr	r3, [pc, #148]	; (14424 <DistanceSensorGetDistance+0xac>)
   1438e:	4798      	blx	r3
   14390:	0003      	movs	r3, r0
   14392:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14394:	68fb      	ldr	r3, [r7, #12]
   14396:	2b00      	cmp	r3, #0
   14398:	d139      	bne.n	1440e <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   1439a:	4b23      	ldr	r3, [pc, #140]	; (14428 <DistanceSensorGetDistance+0xb0>)
   1439c:	2255      	movs	r2, #85	; 0x55
   1439e:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   143a0:	4921      	ldr	r1, [pc, #132]	; (14428 <DistanceSensorGetDistance+0xb0>)
   143a2:	4b22      	ldr	r3, [pc, #136]	; (1442c <DistanceSensorGetDistance+0xb4>)
   143a4:	2201      	movs	r2, #1
   143a6:	0018      	movs	r0, r3
   143a8:	4b21      	ldr	r3, [pc, #132]	; (14430 <DistanceSensorGetDistance+0xb8>)
   143aa:	4798      	blx	r3
   143ac:	1e03      	subs	r3, r0, #0
   143ae:	d130      	bne.n	14412 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   143b0:	4b20      	ldr	r3, [pc, #128]	; (14434 <DistanceSensorGetDistance+0xbc>)
   143b2:	681b      	ldr	r3, [r3, #0]
   143b4:	683a      	ldr	r2, [r7, #0]
   143b6:	0011      	movs	r1, r2
   143b8:	0018      	movs	r0, r3
   143ba:	4b1f      	ldr	r3, [pc, #124]	; (14438 <DistanceSensorGetDistance+0xc0>)
   143bc:	4798      	blx	r3
   143be:	0003      	movs	r3, r0
   143c0:	2b01      	cmp	r3, #1
   143c2:	d003      	beq.n	143cc <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   143c4:	2303      	movs	r3, #3
   143c6:	425b      	negs	r3, r3
   143c8:	60fb      	str	r3, [r7, #12]
        goto exitf;
   143ca:	e023      	b.n	14414 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   143cc:	491b      	ldr	r1, [pc, #108]	; (1443c <DistanceSensorGetDistance+0xc4>)
   143ce:	4b17      	ldr	r3, [pc, #92]	; (1442c <DistanceSensorGetDistance+0xb4>)
   143d0:	2202      	movs	r2, #2
   143d2:	0018      	movs	r0, r3
   143d4:	4b1a      	ldr	r3, [pc, #104]	; (14440 <DistanceSensorGetDistance+0xc8>)
   143d6:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   143d8:	4b16      	ldr	r3, [pc, #88]	; (14434 <DistanceSensorGetDistance+0xbc>)
   143da:	681b      	ldr	r3, [r3, #0]
   143dc:	683a      	ldr	r2, [r7, #0]
   143de:	0011      	movs	r1, r2
   143e0:	0018      	movs	r0, r3
   143e2:	4b15      	ldr	r3, [pc, #84]	; (14438 <DistanceSensorGetDistance+0xc0>)
   143e4:	4798      	blx	r3
   143e6:	0003      	movs	r3, r0
   143e8:	2b01      	cmp	r3, #1
   143ea:	d10c      	bne.n	14406 <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   143ec:	4b13      	ldr	r3, [pc, #76]	; (1443c <DistanceSensorGetDistance+0xc4>)
   143ee:	781b      	ldrb	r3, [r3, #0]
   143f0:	b29b      	uxth	r3, r3
   143f2:	021b      	lsls	r3, r3, #8
   143f4:	b29a      	uxth	r2, r3
   143f6:	4b11      	ldr	r3, [pc, #68]	; (1443c <DistanceSensorGetDistance+0xc4>)
   143f8:	785b      	ldrb	r3, [r3, #1]
   143fa:	b29b      	uxth	r3, r3
   143fc:	18d3      	adds	r3, r2, r3
   143fe:	b29a      	uxth	r2, r3
   14400:	687b      	ldr	r3, [r7, #4]
   14402:	801a      	strh	r2, [r3, #0]
   14404:	e006      	b.n	14414 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14406:	2303      	movs	r3, #3
   14408:	425b      	negs	r3, r3
   1440a:	60fb      	str	r3, [r7, #12]
        goto exitf;
   1440c:	e002      	b.n	14414 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   1440e:	46c0      	nop			; (mov r8, r8)
   14410:	e000      	b.n	14414 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14412:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14414:	4b0b      	ldr	r3, [pc, #44]	; (14444 <DistanceSensorGetDistance+0xcc>)
   14416:	4798      	blx	r3

    return error;
   14418:	68fb      	ldr	r3, [r7, #12]
}
   1441a:	0018      	movs	r0, r3
   1441c:	46bd      	mov	sp, r7
   1441e:	b004      	add	sp, #16
   14420:	bd80      	pop	{r7, pc}
   14422:	46c0      	nop			; (mov r8, r8)
   14424:	00014481 	.word	0x00014481
   14428:	200047ea 	.word	0x200047ea
   1442c:	200047f4 	.word	0x200047f4
   14430:	00029aed 	.word	0x00029aed
   14434:	200047ec 	.word	0x200047ec
   14438:	0001bf6d 	.word	0x0001bf6d
   1443c:	200047e8 	.word	0x200047e8
   14440:	00029b35 	.word	0x00029b35
   14444:	00014449 	.word	0x00014449

00014448 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14448:	b590      	push	{r4, r7, lr}
   1444a:	b083      	sub	sp, #12
   1444c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1444e:	2300      	movs	r3, #0
   14450:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14452:	4b09      	ldr	r3, [pc, #36]	; (14478 <DistanceSensorFreeMutex+0x30>)
   14454:	6818      	ldr	r0, [r3, #0]
   14456:	2300      	movs	r3, #0
   14458:	2200      	movs	r2, #0
   1445a:	2100      	movs	r1, #0
   1445c:	4c07      	ldr	r4, [pc, #28]	; (1447c <DistanceSensorFreeMutex+0x34>)
   1445e:	47a0      	blx	r4
   14460:	0003      	movs	r3, r0
   14462:	2b01      	cmp	r3, #1
   14464:	d002      	beq.n	1446c <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14466:	2314      	movs	r3, #20
   14468:	425b      	negs	r3, r3
   1446a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1446c:	687b      	ldr	r3, [r7, #4]
}
   1446e:	0018      	movs	r0, r3
   14470:	46bd      	mov	sp, r7
   14472:	b003      	add	sp, #12
   14474:	bd90      	pop	{r4, r7, pc}
   14476:	46c0      	nop			; (mov r8, r8)
   14478:	200047f0 	.word	0x200047f0
   1447c:	0001b25d 	.word	0x0001b25d

00014480 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14480:	b580      	push	{r7, lr}
   14482:	b084      	sub	sp, #16
   14484:	af00      	add	r7, sp, #0
   14486:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14488:	2300      	movs	r3, #0
   1448a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   1448c:	4b08      	ldr	r3, [pc, #32]	; (144b0 <DistanceSensorGetMutex+0x30>)
   1448e:	681b      	ldr	r3, [r3, #0]
   14490:	687a      	ldr	r2, [r7, #4]
   14492:	0011      	movs	r1, r2
   14494:	0018      	movs	r0, r3
   14496:	4b07      	ldr	r3, [pc, #28]	; (144b4 <DistanceSensorGetMutex+0x34>)
   14498:	4798      	blx	r3
   1449a:	0003      	movs	r3, r0
   1449c:	2b01      	cmp	r3, #1
   1449e:	d002      	beq.n	144a6 <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   144a0:	231d      	movs	r3, #29
   144a2:	425b      	negs	r3, r3
   144a4:	60fb      	str	r3, [r7, #12]
    }
    return error;
   144a6:	68fb      	ldr	r3, [r7, #12]
   144a8:	0018      	movs	r0, r3
   144aa:	46bd      	mov	sp, r7
   144ac:	b004      	add	sp, #16
   144ae:	bd80      	pop	{r7, pc}
   144b0:	200047f0 	.word	0x200047f0
   144b4:	0001bf6d 	.word	0x0001bf6d

000144b8 <system_interrupt_enable>:
{
   144b8:	b580      	push	{r7, lr}
   144ba:	b082      	sub	sp, #8
   144bc:	af00      	add	r7, sp, #0
   144be:	0002      	movs	r2, r0
   144c0:	1dfb      	adds	r3, r7, #7
   144c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   144c4:	4b06      	ldr	r3, [pc, #24]	; (144e0 <system_interrupt_enable+0x28>)
   144c6:	1dfa      	adds	r2, r7, #7
   144c8:	7812      	ldrb	r2, [r2, #0]
   144ca:	0011      	movs	r1, r2
   144cc:	221f      	movs	r2, #31
   144ce:	400a      	ands	r2, r1
   144d0:	2101      	movs	r1, #1
   144d2:	4091      	lsls	r1, r2
   144d4:	000a      	movs	r2, r1
   144d6:	601a      	str	r2, [r3, #0]
}
   144d8:	46c0      	nop			; (mov r8, r8)
   144da:	46bd      	mov	sp, r7
   144dc:	b002      	add	sp, #8
   144de:	bd80      	pop	{r7, pc}
   144e0:	e000e100 	.word	0xe000e100

000144e4 <i2c_master_is_syncing>:
{
   144e4:	b580      	push	{r7, lr}
   144e6:	b084      	sub	sp, #16
   144e8:	af00      	add	r7, sp, #0
   144ea:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	681b      	ldr	r3, [r3, #0]
   144f0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   144f2:	68fb      	ldr	r3, [r7, #12]
   144f4:	69db      	ldr	r3, [r3, #28]
   144f6:	2207      	movs	r2, #7
   144f8:	4013      	ands	r3, r2
   144fa:	1e5a      	subs	r2, r3, #1
   144fc:	4193      	sbcs	r3, r2
   144fe:	b2db      	uxtb	r3, r3
}
   14500:	0018      	movs	r0, r3
   14502:	46bd      	mov	sp, r7
   14504:	b004      	add	sp, #16
   14506:	bd80      	pop	{r7, pc}

00014508 <_i2c_master_wait_for_sync>:
{
   14508:	b580      	push	{r7, lr}
   1450a:	b082      	sub	sp, #8
   1450c:	af00      	add	r7, sp, #0
   1450e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14510:	46c0      	nop			; (mov r8, r8)
   14512:	687b      	ldr	r3, [r7, #4]
   14514:	0018      	movs	r0, r3
   14516:	4b04      	ldr	r3, [pc, #16]	; (14528 <_i2c_master_wait_for_sync+0x20>)
   14518:	4798      	blx	r3
   1451a:	1e03      	subs	r3, r0, #0
   1451c:	d1f9      	bne.n	14512 <_i2c_master_wait_for_sync+0xa>
}
   1451e:	46c0      	nop			; (mov r8, r8)
   14520:	46bd      	mov	sp, r7
   14522:	b002      	add	sp, #8
   14524:	bd80      	pop	{r7, pc}
   14526:	46c0      	nop			; (mov r8, r8)
   14528:	000144e5 	.word	0x000144e5

0001452c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b082      	sub	sp, #8
   14530:	af00      	add	r7, sp, #0
   14532:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14534:	687b      	ldr	r3, [r7, #4]
   14536:	2264      	movs	r2, #100	; 0x64
   14538:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1453a:	687b      	ldr	r3, [r7, #4]
   1453c:	4a1b      	ldr	r2, [pc, #108]	; (145ac <i2c_master_get_config_defaults+0x80>)
   1453e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14540:	687b      	ldr	r3, [r7, #4]
   14542:	2200      	movs	r2, #0
   14544:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14546:	687b      	ldr	r3, [r7, #4]
   14548:	2200      	movs	r2, #0
   1454a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	2200      	movs	r2, #0
   14550:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14552:	687b      	ldr	r3, [r7, #4]
   14554:	2280      	movs	r2, #128	; 0x80
   14556:	0392      	lsls	r2, r2, #14
   14558:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1455a:	687b      	ldr	r3, [r7, #4]
   1455c:	2201      	movs	r2, #1
   1455e:	4252      	negs	r2, r2
   14560:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14562:	687b      	ldr	r3, [r7, #4]
   14564:	2201      	movs	r2, #1
   14566:	4252      	negs	r2, r2
   14568:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1456a:	687b      	ldr	r3, [r7, #4]
   1456c:	2200      	movs	r2, #0
   1456e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	2200      	movs	r2, #0
   14574:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14576:	687b      	ldr	r3, [r7, #4]
   14578:	2224      	movs	r2, #36	; 0x24
   1457a:	2100      	movs	r1, #0
   1457c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1457e:	687b      	ldr	r3, [r7, #4]
   14580:	2200      	movs	r2, #0
   14582:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14584:	687b      	ldr	r3, [r7, #4]
   14586:	222c      	movs	r2, #44	; 0x2c
   14588:	2100      	movs	r1, #0
   1458a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   1458c:	687b      	ldr	r3, [r7, #4]
   1458e:	222d      	movs	r2, #45	; 0x2d
   14590:	2100      	movs	r1, #0
   14592:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14594:	687b      	ldr	r3, [r7, #4]
   14596:	222e      	movs	r2, #46	; 0x2e
   14598:	2100      	movs	r1, #0
   1459a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   1459c:	687b      	ldr	r3, [r7, #4]
   1459e:	22d7      	movs	r2, #215	; 0xd7
   145a0:	861a      	strh	r2, [r3, #48]	; 0x30
}
   145a2:	46c0      	nop			; (mov r8, r8)
   145a4:	46bd      	mov	sp, r7
   145a6:	b002      	add	sp, #8
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00000d48 	.word	0x00000d48

000145b0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   145b0:	b580      	push	{r7, lr}
   145b2:	b084      	sub	sp, #16
   145b4:	af00      	add	r7, sp, #0
   145b6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   145b8:	687b      	ldr	r3, [r7, #4]
   145ba:	681b      	ldr	r3, [r3, #0]
   145bc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   145be:	2300      	movs	r3, #0
   145c0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   145c2:	687b      	ldr	r3, [r7, #4]
   145c4:	0018      	movs	r0, r3
   145c6:	4b14      	ldr	r3, [pc, #80]	; (14618 <i2c_master_enable+0x68>)
   145c8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   145ca:	68bb      	ldr	r3, [r7, #8]
   145cc:	681b      	ldr	r3, [r3, #0]
   145ce:	2202      	movs	r2, #2
   145d0:	431a      	orrs	r2, r3
   145d2:	68bb      	ldr	r3, [r7, #8]
   145d4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   145d6:	687b      	ldr	r3, [r7, #4]
   145d8:	681b      	ldr	r3, [r3, #0]
   145da:	0018      	movs	r0, r3
   145dc:	4b0f      	ldr	r3, [pc, #60]	; (1461c <i2c_master_enable+0x6c>)
   145de:	4798      	blx	r3
   145e0:	0003      	movs	r3, r0
   145e2:	0018      	movs	r0, r3
   145e4:	4b0e      	ldr	r3, [pc, #56]	; (14620 <i2c_master_enable+0x70>)
   145e6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   145e8:	e00c      	b.n	14604 <i2c_master_enable+0x54>
		timeout_counter++;
   145ea:	68fb      	ldr	r3, [r7, #12]
   145ec:	3301      	adds	r3, #1
   145ee:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   145f0:	687b      	ldr	r3, [r7, #4]
   145f2:	88db      	ldrh	r3, [r3, #6]
   145f4:	001a      	movs	r2, r3
   145f6:	68fb      	ldr	r3, [r7, #12]
   145f8:	429a      	cmp	r2, r3
   145fa:	d803      	bhi.n	14604 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   145fc:	68bb      	ldr	r3, [r7, #8]
   145fe:	2210      	movs	r2, #16
   14600:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14602:	e006      	b.n	14612 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14604:	68bb      	ldr	r3, [r7, #8]
   14606:	8b5b      	ldrh	r3, [r3, #26]
   14608:	b29b      	uxth	r3, r3
   1460a:	001a      	movs	r2, r3
   1460c:	2310      	movs	r3, #16
   1460e:	4013      	ands	r3, r2
   14610:	d0eb      	beq.n	145ea <i2c_master_enable+0x3a>
		}
	}
}
   14612:	46bd      	mov	sp, r7
   14614:	b004      	add	sp, #16
   14616:	bd80      	pop	{r7, pc}
   14618:	00014509 	.word	0x00014509
   1461c:	0002828d 	.word	0x0002828d
   14620:	000144b9 	.word	0x000144b9

00014624 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14624:	b580      	push	{r7, lr}
   14626:	b082      	sub	sp, #8
   14628:	af00      	add	r7, sp, #0
   1462a:	6078      	str	r0, [r7, #4]
   1462c:	000a      	movs	r2, r1
   1462e:	1cfb      	adds	r3, r7, #3
   14630:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14632:	687b      	ldr	r3, [r7, #4]
   14634:	7e5b      	ldrb	r3, [r3, #25]
   14636:	b2db      	uxtb	r3, r3
   14638:	b25a      	sxtb	r2, r3
   1463a:	1cfb      	adds	r3, r7, #3
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	2101      	movs	r1, #1
   14640:	4099      	lsls	r1, r3
   14642:	000b      	movs	r3, r1
   14644:	b25b      	sxtb	r3, r3
   14646:	4313      	orrs	r3, r2
   14648:	b25b      	sxtb	r3, r3
   1464a:	b2da      	uxtb	r2, r3
   1464c:	687b      	ldr	r3, [r7, #4]
   1464e:	765a      	strb	r2, [r3, #25]
}
   14650:	46c0      	nop			; (mov r8, r8)
   14652:	46bd      	mov	sp, r7
   14654:	b002      	add	sp, #8
   14656:	bd80      	pop	{r7, pc}

00014658 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14658:	b590      	push	{r4, r7, lr}
   1465a:	b091      	sub	sp, #68	; 0x44
   1465c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1465e:	2300      	movs	r3, #0
   14660:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14662:	233a      	movs	r3, #58	; 0x3a
   14664:	18fb      	adds	r3, r7, r3
   14666:	2200      	movs	r2, #0
   14668:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1466a:	1d3b      	adds	r3, r7, #4
   1466c:	0018      	movs	r0, r3
   1466e:	4b21      	ldr	r3, [pc, #132]	; (146f4 <I2cDriverConfigureSensorBus+0x9c>)
   14670:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14672:	1d3b      	adds	r3, r7, #4
   14674:	4a20      	ldr	r2, [pc, #128]	; (146f8 <I2cDriverConfigureSensorBus+0xa0>)
   14676:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14678:	1d3b      	adds	r3, r7, #4
   1467a:	4a20      	ldr	r2, [pc, #128]	; (146fc <I2cDriverConfigureSensorBus+0xa4>)
   1467c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1467e:	1d3b      	adds	r3, r7, #4
   14680:	22fa      	movs	r2, #250	; 0xfa
   14682:	0092      	lsls	r2, r2, #2
   14684:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14686:	233b      	movs	r3, #59	; 0x3b
   14688:	18fb      	adds	r3, r7, r3
   1468a:	2203      	movs	r2, #3
   1468c:	701a      	strb	r2, [r3, #0]
   1468e:	e01e      	b.n	146ce <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14690:	233a      	movs	r3, #58	; 0x3a
   14692:	18fc      	adds	r4, r7, r3
   14694:	1d3a      	adds	r2, r7, #4
   14696:	491a      	ldr	r1, [pc, #104]	; (14700 <I2cDriverConfigureSensorBus+0xa8>)
   14698:	4b1a      	ldr	r3, [pc, #104]	; (14704 <I2cDriverConfigureSensorBus+0xac>)
   1469a:	0018      	movs	r0, r3
   1469c:	4b1a      	ldr	r3, [pc, #104]	; (14708 <I2cDriverConfigureSensorBus+0xb0>)
   1469e:	4798      	blx	r3
   146a0:	0003      	movs	r3, r0
   146a2:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   146a4:	233a      	movs	r3, #58	; 0x3a
   146a6:	18fb      	adds	r3, r7, r3
   146a8:	781b      	ldrb	r3, [r3, #0]
   146aa:	2b00      	cmp	r3, #0
   146ac:	d104      	bne.n	146b8 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   146ae:	233a      	movs	r3, #58	; 0x3a
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   146b6:	e00f      	b.n	146d8 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   146b8:	4b12      	ldr	r3, [pc, #72]	; (14704 <I2cDriverConfigureSensorBus+0xac>)
   146ba:	0018      	movs	r0, r3
   146bc:	4b13      	ldr	r3, [pc, #76]	; (1470c <I2cDriverConfigureSensorBus+0xb4>)
   146be:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   146c0:	233b      	movs	r3, #59	; 0x3b
   146c2:	18fb      	adds	r3, r7, r3
   146c4:	781a      	ldrb	r2, [r3, #0]
   146c6:	233b      	movs	r3, #59	; 0x3b
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	3a01      	subs	r2, #1
   146cc:	701a      	strb	r2, [r3, #0]
   146ce:	233b      	movs	r3, #59	; 0x3b
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	781b      	ldrb	r3, [r3, #0]
   146d4:	2b00      	cmp	r3, #0
   146d6:	d1db      	bne.n	14690 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   146d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   146da:	2b00      	cmp	r3, #0
   146dc:	d104      	bne.n	146e8 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   146de:	4b09      	ldr	r3, [pc, #36]	; (14704 <I2cDriverConfigureSensorBus+0xac>)
   146e0:	0018      	movs	r0, r3
   146e2:	4b0b      	ldr	r3, [pc, #44]	; (14710 <I2cDriverConfigureSensorBus+0xb8>)
   146e4:	4798      	blx	r3
   146e6:	e000      	b.n	146ea <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   146e8:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   146ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   146ec:	0018      	movs	r0, r3
   146ee:	46bd      	mov	sp, r7
   146f0:	b011      	add	sp, #68	; 0x44
   146f2:	bd90      	pop	{r4, r7, pc}
   146f4:	0001452d 	.word	0x0001452d
   146f8:	00080002 	.word	0x00080002
   146fc:	00090002 	.word	0x00090002
   14700:	42000800 	.word	0x42000800
   14704:	2000482c 	.word	0x2000482c
   14708:	00018655 	.word	0x00018655
   1470c:	00018789 	.word	0x00018789
   14710:	000145b1 	.word	0x000145b1

00014714 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14714:	b580      	push	{r7, lr}
   14716:	b084      	sub	sp, #16
   14718:	af00      	add	r7, sp, #0
   1471a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1471c:	4b0e      	ldr	r3, [pc, #56]	; (14758 <I2cSensorsTxComplete+0x44>)
   1471e:	2200      	movs	r2, #0
   14720:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14722:	4b0d      	ldr	r3, [pc, #52]	; (14758 <I2cSensorsTxComplete+0x44>)
   14724:	2201      	movs	r2, #1
   14726:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14728:	2300      	movs	r3, #0
   1472a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1472c:	4b0b      	ldr	r3, [pc, #44]	; (1475c <I2cSensorsTxComplete+0x48>)
   1472e:	681b      	ldr	r3, [r3, #0]
   14730:	220c      	movs	r2, #12
   14732:	18ba      	adds	r2, r7, r2
   14734:	0011      	movs	r1, r2
   14736:	0018      	movs	r0, r3
   14738:	4b09      	ldr	r3, [pc, #36]	; (14760 <I2cSensorsTxComplete+0x4c>)
   1473a:	4798      	blx	r3
    sensorTransmitError = false;
   1473c:	4b09      	ldr	r3, [pc, #36]	; (14764 <I2cSensorsTxComplete+0x50>)
   1473e:	2200      	movs	r2, #0
   14740:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14742:	68fb      	ldr	r3, [r7, #12]
   14744:	2b00      	cmp	r3, #0
   14746:	d003      	beq.n	14750 <I2cSensorsTxComplete+0x3c>
   14748:	4b07      	ldr	r3, [pc, #28]	; (14768 <I2cSensorsTxComplete+0x54>)
   1474a:	2280      	movs	r2, #128	; 0x80
   1474c:	0552      	lsls	r2, r2, #21
   1474e:	601a      	str	r2, [r3, #0]
}
   14750:	46c0      	nop			; (mov r8, r8)
   14752:	46bd      	mov	sp, r7
   14754:	b004      	add	sp, #16
   14756:	bd80      	pop	{r7, pc}
   14758:	2000060c 	.word	0x2000060c
   1475c:	20004854 	.word	0x20004854
   14760:	0001b8e5 	.word	0x0001b8e5
   14764:	20000608 	.word	0x20000608
   14768:	e000ed04 	.word	0xe000ed04

0001476c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   1476c:	b580      	push	{r7, lr}
   1476e:	b084      	sub	sp, #16
   14770:	af00      	add	r7, sp, #0
   14772:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14774:	4b0e      	ldr	r3, [pc, #56]	; (147b0 <I2cSensorsRxComplete+0x44>)
   14776:	2200      	movs	r2, #0
   14778:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1477a:	4b0d      	ldr	r3, [pc, #52]	; (147b0 <I2cSensorsRxComplete+0x44>)
   1477c:	2201      	movs	r2, #1
   1477e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14780:	2300      	movs	r3, #0
   14782:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14784:	4b0b      	ldr	r3, [pc, #44]	; (147b4 <I2cSensorsRxComplete+0x48>)
   14786:	681b      	ldr	r3, [r3, #0]
   14788:	220c      	movs	r2, #12
   1478a:	18ba      	adds	r2, r7, r2
   1478c:	0011      	movs	r1, r2
   1478e:	0018      	movs	r0, r3
   14790:	4b09      	ldr	r3, [pc, #36]	; (147b8 <I2cSensorsRxComplete+0x4c>)
   14792:	4798      	blx	r3
    sensorTransmitError = false;
   14794:	4b09      	ldr	r3, [pc, #36]	; (147bc <I2cSensorsRxComplete+0x50>)
   14796:	2200      	movs	r2, #0
   14798:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1479a:	68fb      	ldr	r3, [r7, #12]
   1479c:	2b00      	cmp	r3, #0
   1479e:	d003      	beq.n	147a8 <I2cSensorsRxComplete+0x3c>
   147a0:	4b07      	ldr	r3, [pc, #28]	; (147c0 <I2cSensorsRxComplete+0x54>)
   147a2:	2280      	movs	r2, #128	; 0x80
   147a4:	0552      	lsls	r2, r2, #21
   147a6:	601a      	str	r2, [r3, #0]
}
   147a8:	46c0      	nop			; (mov r8, r8)
   147aa:	46bd      	mov	sp, r7
   147ac:	b004      	add	sp, #16
   147ae:	bd80      	pop	{r7, pc}
   147b0:	2000060c 	.word	0x2000060c
   147b4:	20004854 	.word	0x20004854
   147b8:	0001b8e5 	.word	0x0001b8e5
   147bc:	20000608 	.word	0x20000608
   147c0:	e000ed04 	.word	0xe000ed04

000147c4 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   147c4:	b580      	push	{r7, lr}
   147c6:	b084      	sub	sp, #16
   147c8:	af00      	add	r7, sp, #0
   147ca:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   147cc:	4b0e      	ldr	r3, [pc, #56]	; (14808 <I2cSensorsError+0x44>)
   147ce:	2200      	movs	r2, #0
   147d0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   147d2:	4b0d      	ldr	r3, [pc, #52]	; (14808 <I2cSensorsError+0x44>)
   147d4:	2201      	movs	r2, #1
   147d6:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   147d8:	2300      	movs	r3, #0
   147da:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   147dc:	4b0b      	ldr	r3, [pc, #44]	; (1480c <I2cSensorsError+0x48>)
   147de:	681b      	ldr	r3, [r3, #0]
   147e0:	220c      	movs	r2, #12
   147e2:	18ba      	adds	r2, r7, r2
   147e4:	0011      	movs	r1, r2
   147e6:	0018      	movs	r0, r3
   147e8:	4b09      	ldr	r3, [pc, #36]	; (14810 <I2cSensorsError+0x4c>)
   147ea:	4798      	blx	r3
    sensorTransmitError = true;
   147ec:	4b09      	ldr	r3, [pc, #36]	; (14814 <I2cSensorsError+0x50>)
   147ee:	2201      	movs	r2, #1
   147f0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   147f2:	68fb      	ldr	r3, [r7, #12]
   147f4:	2b00      	cmp	r3, #0
   147f6:	d003      	beq.n	14800 <I2cSensorsError+0x3c>
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <I2cSensorsError+0x54>)
   147fa:	2280      	movs	r2, #128	; 0x80
   147fc:	0552      	lsls	r2, r2, #21
   147fe:	601a      	str	r2, [r3, #0]
}
   14800:	46c0      	nop			; (mov r8, r8)
   14802:	46bd      	mov	sp, r7
   14804:	b004      	add	sp, #16
   14806:	bd80      	pop	{r7, pc}
   14808:	2000060c 	.word	0x2000060c
   1480c:	20004854 	.word	0x20004854
   14810:	0001b8e5 	.word	0x0001b8e5
   14814:	20000608 	.word	0x20000608
   14818:	e000ed04 	.word	0xe000ed04

0001481c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   1481c:	b580      	push	{r7, lr}
   1481e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14820:	4911      	ldr	r1, [pc, #68]	; (14868 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14822:	4b12      	ldr	r3, [pc, #72]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14824:	2200      	movs	r2, #0
   14826:	0018      	movs	r0, r3
   14828:	4b11      	ldr	r3, [pc, #68]	; (14870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1482a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1482c:	4b0f      	ldr	r3, [pc, #60]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1482e:	2100      	movs	r1, #0
   14830:	0018      	movs	r0, r3
   14832:	4b10      	ldr	r3, [pc, #64]	; (14874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14834:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14836:	4910      	ldr	r1, [pc, #64]	; (14878 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14838:	4b0c      	ldr	r3, [pc, #48]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1483a:	2201      	movs	r2, #1
   1483c:	0018      	movs	r0, r3
   1483e:	4b0c      	ldr	r3, [pc, #48]	; (14870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14840:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14842:	4b0a      	ldr	r3, [pc, #40]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14844:	2101      	movs	r1, #1
   14846:	0018      	movs	r0, r3
   14848:	4b0a      	ldr	r3, [pc, #40]	; (14874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1484a:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   1484c:	490b      	ldr	r1, [pc, #44]	; (1487c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   1484e:	4b07      	ldr	r3, [pc, #28]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14850:	2202      	movs	r2, #2
   14852:	0018      	movs	r0, r3
   14854:	4b06      	ldr	r3, [pc, #24]	; (14870 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14856:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14858:	4b04      	ldr	r3, [pc, #16]	; (1486c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1485a:	2102      	movs	r1, #2
   1485c:	0018      	movs	r0, r3
   1485e:	4b05      	ldr	r3, [pc, #20]	; (14874 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14860:	4798      	blx	r3
}
   14862:	46c0      	nop			; (mov r8, r8)
   14864:	46bd      	mov	sp, r7
   14866:	bd80      	pop	{r7, pc}
   14868:	00014715 	.word	0x00014715
   1486c:	2000482c 	.word	0x2000482c
   14870:	000132b1 	.word	0x000132b1
   14874:	00014625 	.word	0x00014625
   14878:	0001476d 	.word	0x0001476d
   1487c:	000147c5 	.word	0x000147c5

00014880 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14880:	b580      	push	{r7, lr}
   14882:	b082      	sub	sp, #8
   14884:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14886:	2300      	movs	r3, #0
   14888:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1488a:	4b14      	ldr	r3, [pc, #80]	; (148dc <I2cInitializeDriver+0x5c>)
   1488c:	4798      	blx	r3
   1488e:	0003      	movs	r3, r0
   14890:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14892:	687b      	ldr	r3, [r7, #4]
   14894:	2b00      	cmp	r3, #0
   14896:	d11a      	bne.n	148ce <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14898:	4b11      	ldr	r3, [pc, #68]	; (148e0 <I2cInitializeDriver+0x60>)
   1489a:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   1489c:	2001      	movs	r0, #1
   1489e:	4b11      	ldr	r3, [pc, #68]	; (148e4 <I2cInitializeDriver+0x64>)
   148a0:	4798      	blx	r3
   148a2:	0002      	movs	r2, r0
   148a4:	4b10      	ldr	r3, [pc, #64]	; (148e8 <I2cInitializeDriver+0x68>)
   148a6:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   148a8:	2203      	movs	r2, #3
   148aa:	2100      	movs	r1, #0
   148ac:	2001      	movs	r0, #1
   148ae:	4b0f      	ldr	r3, [pc, #60]	; (148ec <I2cInitializeDriver+0x6c>)
   148b0:	4798      	blx	r3
   148b2:	0002      	movs	r2, r0
   148b4:	4b0e      	ldr	r3, [pc, #56]	; (148f0 <I2cInitializeDriver+0x70>)
   148b6:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   148b8:	4b0b      	ldr	r3, [pc, #44]	; (148e8 <I2cInitializeDriver+0x68>)
   148ba:	681b      	ldr	r3, [r3, #0]
   148bc:	2b00      	cmp	r3, #0
   148be:	d003      	beq.n	148c8 <I2cInitializeDriver+0x48>
   148c0:	4b0b      	ldr	r3, [pc, #44]	; (148f0 <I2cInitializeDriver+0x70>)
   148c2:	681b      	ldr	r3, [r3, #0]
   148c4:	2b00      	cmp	r3, #0
   148c6:	d103      	bne.n	148d0 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   148c8:	2306      	movs	r3, #6
   148ca:	607b      	str	r3, [r7, #4]
        goto exit;
   148cc:	e000      	b.n	148d0 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   148ce:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   148d0:	687b      	ldr	r3, [r7, #4]
}
   148d2:	0018      	movs	r0, r3
   148d4:	46bd      	mov	sp, r7
   148d6:	b002      	add	sp, #8
   148d8:	bd80      	pop	{r7, pc}
   148da:	46c0      	nop			; (mov r8, r8)
   148dc:	00014659 	.word	0x00014659
   148e0:	0001481d 	.word	0x0001481d
   148e4:	0001b21d 	.word	0x0001b21d
   148e8:	20004828 	.word	0x20004828
   148ec:	0001afb5 	.word	0x0001afb5
   148f0:	20004854 	.word	0x20004854

000148f4 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   148f4:	b590      	push	{r4, r7, lr}
   148f6:	b085      	sub	sp, #20
   148f8:	af00      	add	r7, sp, #0
   148fa:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   148fc:	2300      	movs	r3, #0
   148fe:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14900:	687b      	ldr	r3, [r7, #4]
   14902:	2b00      	cmp	r3, #0
   14904:	d003      	beq.n	1490e <I2cWriteData+0x1a>
   14906:	687b      	ldr	r3, [r7, #4]
   14908:	685b      	ldr	r3, [r3, #4]
   1490a:	2b00      	cmp	r3, #0
   1490c:	d103      	bne.n	14916 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1490e:	2308      	movs	r3, #8
   14910:	425b      	negs	r3, r3
   14912:	60fb      	str	r3, [r7, #12]
        goto exit;
   14914:	e01f      	b.n	14956 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14916:	687b      	ldr	r3, [r7, #4]
   14918:	781b      	ldrb	r3, [r3, #0]
   1491a:	b29a      	uxth	r2, r3
   1491c:	4b10      	ldr	r3, [pc, #64]	; (14960 <I2cWriteData+0x6c>)
   1491e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14920:	687b      	ldr	r3, [r7, #4]
   14922:	685a      	ldr	r2, [r3, #4]
   14924:	4b0e      	ldr	r3, [pc, #56]	; (14960 <I2cWriteData+0x6c>)
   14926:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14928:	687b      	ldr	r3, [r7, #4]
   1492a:	89da      	ldrh	r2, [r3, #14]
   1492c:	4b0c      	ldr	r3, [pc, #48]	; (14960 <I2cWriteData+0x6c>)
   1492e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14930:	230b      	movs	r3, #11
   14932:	18fc      	adds	r4, r7, r3
   14934:	4a0a      	ldr	r2, [pc, #40]	; (14960 <I2cWriteData+0x6c>)
   14936:	4b0b      	ldr	r3, [pc, #44]	; (14964 <I2cWriteData+0x70>)
   14938:	0011      	movs	r1, r2
   1493a:	0018      	movs	r0, r3
   1493c:	4b0a      	ldr	r3, [pc, #40]	; (14968 <I2cWriteData+0x74>)
   1493e:	4798      	blx	r3
   14940:	0003      	movs	r3, r0
   14942:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14944:	230b      	movs	r3, #11
   14946:	18fb      	adds	r3, r7, r3
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	2b00      	cmp	r3, #0
   1494c:	d003      	beq.n	14956 <I2cWriteData+0x62>
        error = ERROR_IO;
   1494e:	2306      	movs	r3, #6
   14950:	425b      	negs	r3, r3
   14952:	60fb      	str	r3, [r7, #12]
        goto exit;
   14954:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14956:	68fb      	ldr	r3, [r7, #12]
}
   14958:	0018      	movs	r0, r3
   1495a:	46bd      	mov	sp, r7
   1495c:	b005      	add	sp, #20
   1495e:	bd90      	pop	{r4, r7, pc}
   14960:	20004858 	.word	0x20004858
   14964:	2000482c 	.word	0x2000482c
   14968:	00013535 	.word	0x00013535

0001496c <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   1496c:	b590      	push	{r4, r7, lr}
   1496e:	b085      	sub	sp, #20
   14970:	af00      	add	r7, sp, #0
   14972:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14974:	2300      	movs	r3, #0
   14976:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14978:	687b      	ldr	r3, [r7, #4]
   1497a:	2b00      	cmp	r3, #0
   1497c:	d003      	beq.n	14986 <I2cReadData+0x1a>
   1497e:	687b      	ldr	r3, [r7, #4]
   14980:	685b      	ldr	r3, [r3, #4]
   14982:	2b00      	cmp	r3, #0
   14984:	d103      	bne.n	1498e <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14986:	2308      	movs	r3, #8
   14988:	425b      	negs	r3, r3
   1498a:	60fb      	str	r3, [r7, #12]
        goto exit;
   1498c:	e01f      	b.n	149ce <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1498e:	687b      	ldr	r3, [r7, #4]
   14990:	781b      	ldrb	r3, [r3, #0]
   14992:	b29a      	uxth	r2, r3
   14994:	4b10      	ldr	r3, [pc, #64]	; (149d8 <I2cReadData+0x6c>)
   14996:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	689a      	ldr	r2, [r3, #8]
   1499c:	4b0e      	ldr	r3, [pc, #56]	; (149d8 <I2cReadData+0x6c>)
   1499e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   149a0:	687b      	ldr	r3, [r7, #4]
   149a2:	899a      	ldrh	r2, [r3, #12]
   149a4:	4b0c      	ldr	r3, [pc, #48]	; (149d8 <I2cReadData+0x6c>)
   149a6:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   149a8:	230b      	movs	r3, #11
   149aa:	18fc      	adds	r4, r7, r3
   149ac:	4a0a      	ldr	r2, [pc, #40]	; (149d8 <I2cReadData+0x6c>)
   149ae:	4b0b      	ldr	r3, [pc, #44]	; (149dc <I2cReadData+0x70>)
   149b0:	0011      	movs	r1, r2
   149b2:	0018      	movs	r0, r3
   149b4:	4b0a      	ldr	r3, [pc, #40]	; (149e0 <I2cReadData+0x74>)
   149b6:	4798      	blx	r3
   149b8:	0003      	movs	r3, r0
   149ba:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   149bc:	230b      	movs	r3, #11
   149be:	18fb      	adds	r3, r7, r3
   149c0:	781b      	ldrb	r3, [r3, #0]
   149c2:	2b00      	cmp	r3, #0
   149c4:	d003      	beq.n	149ce <I2cReadData+0x62>
        error = ERROR_IO;
   149c6:	2306      	movs	r3, #6
   149c8:	425b      	negs	r3, r3
   149ca:	60fb      	str	r3, [r7, #12]
        goto exit;
   149cc:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   149ce:	68fb      	ldr	r3, [r7, #12]
}
   149d0:	0018      	movs	r0, r3
   149d2:	46bd      	mov	sp, r7
   149d4:	b005      	add	sp, #20
   149d6:	bd90      	pop	{r4, r7, pc}
   149d8:	20004858 	.word	0x20004858
   149dc:	2000482c 	.word	0x2000482c
   149e0:	00013451 	.word	0x00013451

000149e4 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   149e4:	b590      	push	{r4, r7, lr}
   149e6:	b083      	sub	sp, #12
   149e8:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   149ea:	2300      	movs	r3, #0
   149ec:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   149ee:	4b09      	ldr	r3, [pc, #36]	; (14a14 <I2cFreeMutex+0x30>)
   149f0:	6818      	ldr	r0, [r3, #0]
   149f2:	2300      	movs	r3, #0
   149f4:	2200      	movs	r2, #0
   149f6:	2100      	movs	r1, #0
   149f8:	4c07      	ldr	r4, [pc, #28]	; (14a18 <I2cFreeMutex+0x34>)
   149fa:	47a0      	blx	r4
   149fc:	0003      	movs	r3, r0
   149fe:	2b01      	cmp	r3, #1
   14a00:	d002      	beq.n	14a08 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14a02:	2314      	movs	r3, #20
   14a04:	425b      	negs	r3, r3
   14a06:	607b      	str	r3, [r7, #4]
    }
    return error;
   14a08:	687b      	ldr	r3, [r7, #4]
}
   14a0a:	0018      	movs	r0, r3
   14a0c:	46bd      	mov	sp, r7
   14a0e:	b003      	add	sp, #12
   14a10:	bd90      	pop	{r4, r7, pc}
   14a12:	46c0      	nop			; (mov r8, r8)
   14a14:	20004828 	.word	0x20004828
   14a18:	0001b25d 	.word	0x0001b25d

00014a1c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14a1c:	b580      	push	{r7, lr}
   14a1e:	b084      	sub	sp, #16
   14a20:	af00      	add	r7, sp, #0
   14a22:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14a24:	2300      	movs	r3, #0
   14a26:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14a28:	4b08      	ldr	r3, [pc, #32]	; (14a4c <I2cGetMutex+0x30>)
   14a2a:	681b      	ldr	r3, [r3, #0]
   14a2c:	687a      	ldr	r2, [r7, #4]
   14a2e:	0011      	movs	r1, r2
   14a30:	0018      	movs	r0, r3
   14a32:	4b07      	ldr	r3, [pc, #28]	; (14a50 <I2cGetMutex+0x34>)
   14a34:	4798      	blx	r3
   14a36:	0003      	movs	r3, r0
   14a38:	2b01      	cmp	r3, #1
   14a3a:	d002      	beq.n	14a42 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14a3c:	231d      	movs	r3, #29
   14a3e:	425b      	negs	r3, r3
   14a40:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14a42:	68fb      	ldr	r3, [r7, #12]
}
   14a44:	0018      	movs	r0, r3
   14a46:	46bd      	mov	sp, r7
   14a48:	b004      	add	sp, #16
   14a4a:	bd80      	pop	{r7, pc}
   14a4c:	20004828 	.word	0x20004828
   14a50:	0001bf6d 	.word	0x0001bf6d

00014a54 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14a54:	b580      	push	{r7, lr}
   14a56:	b084      	sub	sp, #16
   14a58:	af00      	add	r7, sp, #0
   14a5a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14a5c:	2300      	movs	r3, #0
   14a5e:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14a60:	4b04      	ldr	r3, [pc, #16]	; (14a74 <I2cGetSemaphoreHandle+0x20>)
   14a62:	681a      	ldr	r2, [r3, #0]
   14a64:	687b      	ldr	r3, [r7, #4]
   14a66:	601a      	str	r2, [r3, #0]
    return error;
   14a68:	68fb      	ldr	r3, [r7, #12]
}
   14a6a:	0018      	movs	r0, r3
   14a6c:	46bd      	mov	sp, r7
   14a6e:	b004      	add	sp, #16
   14a70:	bd80      	pop	{r7, pc}
   14a72:	46c0      	nop			; (mov r8, r8)
   14a74:	20004854 	.word	0x20004854

00014a78 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14a78:	b580      	push	{r7, lr}
   14a7a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14a7c:	4b02      	ldr	r3, [pc, #8]	; (14a88 <I2cGetTaskErrorStatus+0x10>)
   14a7e:	781b      	ldrb	r3, [r3, #0]
}
   14a80:	0018      	movs	r0, r3
   14a82:	46bd      	mov	sp, r7
   14a84:	bd80      	pop	{r7, pc}
   14a86:	46c0      	nop			; (mov r8, r8)
   14a88:	20000608 	.word	0x20000608

00014a8c <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14a8c:	b580      	push	{r7, lr}
   14a8e:	b082      	sub	sp, #8
   14a90:	af00      	add	r7, sp, #0
   14a92:	0002      	movs	r2, r0
   14a94:	1dfb      	adds	r3, r7, #7
   14a96:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14a98:	4b03      	ldr	r3, [pc, #12]	; (14aa8 <I2cSetTaskErrorStatus+0x1c>)
   14a9a:	1dfa      	adds	r2, r7, #7
   14a9c:	7812      	ldrb	r2, [r2, #0]
   14a9e:	701a      	strb	r2, [r3, #0]
}
   14aa0:	46c0      	nop			; (mov r8, r8)
   14aa2:	46bd      	mov	sp, r7
   14aa4:	b002      	add	sp, #8
   14aa6:	bd80      	pop	{r7, pc}
   14aa8:	20000608 	.word	0x20000608

00014aac <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14aac:	b580      	push	{r7, lr}
   14aae:	b084      	sub	sp, #16
   14ab0:	af00      	add	r7, sp, #0
   14ab2:	6078      	str	r0, [r7, #4]
   14ab4:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14ab6:	2300      	movs	r3, #0
   14ab8:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14aba:	2300      	movs	r3, #0
   14abc:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14abe:	2396      	movs	r3, #150	; 0x96
   14ac0:	005b      	lsls	r3, r3, #1
   14ac2:	0018      	movs	r0, r3
   14ac4:	4b28      	ldr	r3, [pc, #160]	; (14b68 <I2cWriteDataWait+0xbc>)
   14ac6:	4798      	blx	r3
   14ac8:	0003      	movs	r3, r0
   14aca:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14acc:	68fb      	ldr	r3, [r7, #12]
   14ace:	2b00      	cmp	r3, #0
   14ad0:	d138      	bne.n	14b44 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14ad2:	2308      	movs	r3, #8
   14ad4:	18fb      	adds	r3, r7, r3
   14ad6:	0018      	movs	r0, r3
   14ad8:	4b24      	ldr	r3, [pc, #144]	; (14b6c <I2cWriteDataWait+0xc0>)
   14ada:	4798      	blx	r3
   14adc:	0003      	movs	r3, r0
   14ade:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14ae0:	68fb      	ldr	r3, [r7, #12]
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	d130      	bne.n	14b48 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14ae6:	687b      	ldr	r3, [r7, #4]
   14ae8:	0018      	movs	r0, r3
   14aea:	4b21      	ldr	r3, [pc, #132]	; (14b70 <I2cWriteDataWait+0xc4>)
   14aec:	4798      	blx	r3
   14aee:	0003      	movs	r3, r0
   14af0:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14af2:	68fb      	ldr	r3, [r7, #12]
   14af4:	2b00      	cmp	r3, #0
   14af6:	d12a      	bne.n	14b4e <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14af8:	68bb      	ldr	r3, [r7, #8]
   14afa:	683a      	ldr	r2, [r7, #0]
   14afc:	0011      	movs	r1, r2
   14afe:	0018      	movs	r0, r3
   14b00:	4b1c      	ldr	r3, [pc, #112]	; (14b74 <I2cWriteDataWait+0xc8>)
   14b02:	4798      	blx	r3
   14b04:	0003      	movs	r3, r0
   14b06:	2b01      	cmp	r3, #1
   14b08:	d111      	bne.n	14b2e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14b0a:	4b1b      	ldr	r3, [pc, #108]	; (14b78 <I2cWriteDataWait+0xcc>)
   14b0c:	4798      	blx	r3
   14b0e:	1e03      	subs	r3, r0, #0
   14b10:	d011      	beq.n	14b36 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14b12:	2000      	movs	r0, #0
   14b14:	4b19      	ldr	r3, [pc, #100]	; (14b7c <I2cWriteDataWait+0xd0>)
   14b16:	4798      	blx	r3
            if (error != ERROR_NONE) {
   14b18:	68fb      	ldr	r3, [r7, #12]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d003      	beq.n	14b26 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14b1e:	2321      	movs	r3, #33	; 0x21
   14b20:	425b      	negs	r3, r3
   14b22:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14b24:	e014      	b.n	14b50 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   14b26:	2303      	movs	r3, #3
   14b28:	425b      	negs	r3, r3
   14b2a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14b2c:	e010      	b.n	14b50 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14b2e:	2303      	movs	r3, #3
   14b30:	425b      	negs	r3, r3
   14b32:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14b34:	e00c      	b.n	14b50 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   14b36:	4b12      	ldr	r3, [pc, #72]	; (14b80 <I2cWriteDataWait+0xd4>)
   14b38:	4798      	blx	r3
   14b3a:	0002      	movs	r2, r0
   14b3c:	68fb      	ldr	r3, [r7, #12]
   14b3e:	4313      	orrs	r3, r2
   14b40:	60fb      	str	r3, [r7, #12]
   14b42:	e002      	b.n	14b4a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14b44:	46c0      	nop			; (mov r8, r8)
   14b46:	e000      	b.n	14b4a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14b48:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14b4a:	68fb      	ldr	r3, [r7, #12]
   14b4c:	e007      	b.n	14b5e <I2cWriteDataWait+0xb2>
        goto exitError0;
   14b4e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14b50:	4b0b      	ldr	r3, [pc, #44]	; (14b80 <I2cWriteDataWait+0xd4>)
   14b52:	4798      	blx	r3
   14b54:	0002      	movs	r2, r0
   14b56:	68fb      	ldr	r3, [r7, #12]
   14b58:	4313      	orrs	r3, r2
   14b5a:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14b5c:	68fb      	ldr	r3, [r7, #12]
}
   14b5e:	0018      	movs	r0, r3
   14b60:	46bd      	mov	sp, r7
   14b62:	b004      	add	sp, #16
   14b64:	bd80      	pop	{r7, pc}
   14b66:	46c0      	nop			; (mov r8, r8)
   14b68:	00014a1d 	.word	0x00014a1d
   14b6c:	00014a55 	.word	0x00014a55
   14b70:	000148f5 	.word	0x000148f5
   14b74:	0001bf6d 	.word	0x0001bf6d
   14b78:	00014a79 	.word	0x00014a79
   14b7c:	00014a8d 	.word	0x00014a8d
   14b80:	000149e5 	.word	0x000149e5

00014b84 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14b84:	b580      	push	{r7, lr}
   14b86:	b086      	sub	sp, #24
   14b88:	af00      	add	r7, sp, #0
   14b8a:	60f8      	str	r0, [r7, #12]
   14b8c:	60b9      	str	r1, [r7, #8]
   14b8e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14b90:	2300      	movs	r3, #0
   14b92:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14b94:	2300      	movs	r3, #0
   14b96:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14b98:	2396      	movs	r3, #150	; 0x96
   14b9a:	005b      	lsls	r3, r3, #1
   14b9c:	0018      	movs	r0, r3
   14b9e:	4b35      	ldr	r3, [pc, #212]	; (14c74 <I2cReadDataWait+0xf0>)
   14ba0:	4798      	blx	r3
   14ba2:	0003      	movs	r3, r0
   14ba4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14ba6:	697b      	ldr	r3, [r7, #20]
   14ba8:	2b00      	cmp	r3, #0
   14baa:	d155      	bne.n	14c58 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14bac:	2310      	movs	r3, #16
   14bae:	18fb      	adds	r3, r7, r3
   14bb0:	0018      	movs	r0, r3
   14bb2:	4b31      	ldr	r3, [pc, #196]	; (14c78 <I2cReadDataWait+0xf4>)
   14bb4:	4798      	blx	r3
   14bb6:	0003      	movs	r3, r0
   14bb8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14bba:	697b      	ldr	r3, [r7, #20]
   14bbc:	2b00      	cmp	r3, #0
   14bbe:	d14d      	bne.n	14c5c <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14bc0:	68fb      	ldr	r3, [r7, #12]
   14bc2:	0018      	movs	r0, r3
   14bc4:	4b2d      	ldr	r3, [pc, #180]	; (14c7c <I2cReadDataWait+0xf8>)
   14bc6:	4798      	blx	r3
   14bc8:	0003      	movs	r3, r0
   14bca:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14bcc:	697b      	ldr	r3, [r7, #20]
   14bce:	2b00      	cmp	r3, #0
   14bd0:	d147      	bne.n	14c62 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14bd2:	693b      	ldr	r3, [r7, #16]
   14bd4:	687a      	ldr	r2, [r7, #4]
   14bd6:	0011      	movs	r1, r2
   14bd8:	0018      	movs	r0, r3
   14bda:	4b29      	ldr	r3, [pc, #164]	; (14c80 <I2cReadDataWait+0xfc>)
   14bdc:	4798      	blx	r3
   14bde:	0003      	movs	r3, r0
   14be0:	2b01      	cmp	r3, #1
   14be2:	d118      	bne.n	14c16 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14be4:	4b27      	ldr	r3, [pc, #156]	; (14c84 <I2cReadDataWait+0x100>)
   14be6:	4798      	blx	r3
   14be8:	1e03      	subs	r3, r0, #0
   14bea:	d006      	beq.n	14bfa <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14bec:	2000      	movs	r0, #0
   14bee:	4b26      	ldr	r3, [pc, #152]	; (14c88 <I2cReadDataWait+0x104>)
   14bf0:	4798      	blx	r3
            error = ERROR_ABORTED;
   14bf2:	2303      	movs	r3, #3
   14bf4:	425b      	negs	r3, r3
   14bf6:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14bf8:	e034      	b.n	14c64 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   14bfa:	68bb      	ldr	r3, [r7, #8]
   14bfc:	0018      	movs	r0, r3
   14bfe:	4b23      	ldr	r3, [pc, #140]	; (14c8c <I2cReadDataWait+0x108>)
   14c00:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14c02:	68fb      	ldr	r3, [r7, #12]
   14c04:	0018      	movs	r0, r3
   14c06:	4b22      	ldr	r3, [pc, #136]	; (14c90 <I2cReadDataWait+0x10c>)
   14c08:	4798      	blx	r3
   14c0a:	0003      	movs	r3, r0
   14c0c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14c0e:	697b      	ldr	r3, [r7, #20]
   14c10:	2b00      	cmp	r3, #0
   14c12:	d004      	beq.n	14c1e <I2cReadDataWait+0x9a>
        goto exitError0;
   14c14:	e026      	b.n	14c64 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   14c16:	2303      	movs	r3, #3
   14c18:	425b      	negs	r3, r3
   14c1a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14c1c:	e022      	b.n	14c64 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14c1e:	693b      	ldr	r3, [r7, #16]
   14c20:	687a      	ldr	r2, [r7, #4]
   14c22:	0011      	movs	r1, r2
   14c24:	0018      	movs	r0, r3
   14c26:	4b16      	ldr	r3, [pc, #88]	; (14c80 <I2cReadDataWait+0xfc>)
   14c28:	4798      	blx	r3
   14c2a:	0003      	movs	r3, r0
   14c2c:	2b01      	cmp	r3, #1
   14c2e:	d10a      	bne.n	14c46 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14c30:	4b14      	ldr	r3, [pc, #80]	; (14c84 <I2cReadDataWait+0x100>)
   14c32:	4798      	blx	r3
   14c34:	1e03      	subs	r3, r0, #0
   14c36:	d00a      	beq.n	14c4e <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14c38:	2000      	movs	r0, #0
   14c3a:	4b13      	ldr	r3, [pc, #76]	; (14c88 <I2cReadDataWait+0x104>)
   14c3c:	4798      	blx	r3
            error = ERROR_ABORTED;
   14c3e:	2303      	movs	r3, #3
   14c40:	425b      	negs	r3, r3
   14c42:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14c44:	e00e      	b.n	14c64 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14c46:	2303      	movs	r3, #3
   14c48:	425b      	negs	r3, r3
   14c4a:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14c4c:	e00a      	b.n	14c64 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14c4e:	4b11      	ldr	r3, [pc, #68]	; (14c94 <I2cReadDataWait+0x110>)
   14c50:	4798      	blx	r3
   14c52:	0003      	movs	r3, r0
   14c54:	617b      	str	r3, [r7, #20]
   14c56:	e002      	b.n	14c5e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14c58:	46c0      	nop			; (mov r8, r8)
   14c5a:	e000      	b.n	14c5e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14c5c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14c5e:	697b      	ldr	r3, [r7, #20]
   14c60:	e003      	b.n	14c6a <I2cReadDataWait+0xe6>
        goto exitError0;
   14c62:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14c64:	4b0b      	ldr	r3, [pc, #44]	; (14c94 <I2cReadDataWait+0x110>)
   14c66:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14c68:	697b      	ldr	r3, [r7, #20]
}
   14c6a:	0018      	movs	r0, r3
   14c6c:	46bd      	mov	sp, r7
   14c6e:	b006      	add	sp, #24
   14c70:	bd80      	pop	{r7, pc}
   14c72:	46c0      	nop			; (mov r8, r8)
   14c74:	00014a1d 	.word	0x00014a1d
   14c78:	00014a55 	.word	0x00014a55
   14c7c:	000148f5 	.word	0x000148f5
   14c80:	0001bf6d 	.word	0x0001bf6d
   14c84:	00014a79 	.word	0x00014a79
   14c88:	00014a8d 	.word	0x00014a8d
   14c8c:	0001ccc1 	.word	0x0001ccc1
   14c90:	0001496d 	.word	0x0001496d
   14c94:	000149e5 	.word	0x000149e5

00014c98 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14c98:	b5b0      	push	{r4, r5, r7, lr}
   14c9a:	b086      	sub	sp, #24
   14c9c:	af00      	add	r7, sp, #0
   14c9e:	60f8      	str	r0, [r7, #12]
   14ca0:	0008      	movs	r0, r1
   14ca2:	607a      	str	r2, [r7, #4]
   14ca4:	0019      	movs	r1, r3
   14ca6:	230b      	movs	r3, #11
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	1c02      	adds	r2, r0, #0
   14cac:	701a      	strb	r2, [r3, #0]
   14cae:	2308      	movs	r3, #8
   14cb0:	18fb      	adds	r3, r7, r3
   14cb2:	1c0a      	adds	r2, r1, #0
   14cb4:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   14cb6:	68fb      	ldr	r3, [r7, #12]
   14cb8:	685c      	ldr	r4, [r3, #4]
   14cba:	68fb      	ldr	r3, [r7, #12]
   14cbc:	6898      	ldr	r0, [r3, #8]
   14cbe:	2308      	movs	r3, #8
   14cc0:	18fb      	adds	r3, r7, r3
   14cc2:	881d      	ldrh	r5, [r3, #0]
   14cc4:	687a      	ldr	r2, [r7, #4]
   14cc6:	230b      	movs	r3, #11
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	7819      	ldrb	r1, [r3, #0]
   14ccc:	002b      	movs	r3, r5
   14cce:	47a0      	blx	r4
   14cd0:	0003      	movs	r3, r0
   14cd2:	617b      	str	r3, [r7, #20]

  return ret;
   14cd4:	697b      	ldr	r3, [r7, #20]
}
   14cd6:	0018      	movs	r0, r3
   14cd8:	46bd      	mov	sp, r7
   14cda:	b006      	add	sp, #24
   14cdc:	bdb0      	pop	{r4, r5, r7, pc}

00014cde <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14cde:	b5b0      	push	{r4, r5, r7, lr}
   14ce0:	b086      	sub	sp, #24
   14ce2:	af00      	add	r7, sp, #0
   14ce4:	60f8      	str	r0, [r7, #12]
   14ce6:	0008      	movs	r0, r1
   14ce8:	607a      	str	r2, [r7, #4]
   14cea:	0019      	movs	r1, r3
   14cec:	230b      	movs	r3, #11
   14cee:	18fb      	adds	r3, r7, r3
   14cf0:	1c02      	adds	r2, r0, #0
   14cf2:	701a      	strb	r2, [r3, #0]
   14cf4:	2308      	movs	r3, #8
   14cf6:	18fb      	adds	r3, r7, r3
   14cf8:	1c0a      	adds	r2, r1, #0
   14cfa:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   14cfc:	68fb      	ldr	r3, [r7, #12]
   14cfe:	681c      	ldr	r4, [r3, #0]
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	6898      	ldr	r0, [r3, #8]
   14d04:	2308      	movs	r3, #8
   14d06:	18fb      	adds	r3, r7, r3
   14d08:	881d      	ldrh	r5, [r3, #0]
   14d0a:	687a      	ldr	r2, [r7, #4]
   14d0c:	230b      	movs	r3, #11
   14d0e:	18fb      	adds	r3, r7, r3
   14d10:	7819      	ldrb	r1, [r3, #0]
   14d12:	002b      	movs	r3, r5
   14d14:	47a0      	blx	r4
   14d16:	0003      	movs	r3, r0
   14d18:	617b      	str	r3, [r7, #20]

  return ret;
   14d1a:	697b      	ldr	r3, [r7, #20]
}
   14d1c:	0018      	movs	r0, r3
   14d1e:	46bd      	mov	sp, r7
   14d20:	b006      	add	sp, #24
   14d22:	bdb0      	pop	{r4, r5, r7, pc}

00014d24 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14d24:	b580      	push	{r7, lr}
   14d26:	b082      	sub	sp, #8
   14d28:	af00      	add	r7, sp, #0
   14d2a:	0002      	movs	r2, r0
   14d2c:	1dbb      	adds	r3, r7, #6
   14d2e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   14d30:	1dbb      	adds	r3, r7, #6
   14d32:	2200      	movs	r2, #0
   14d34:	5e9a      	ldrsh	r2, [r3, r2]
   14d36:	4b06      	ldr	r3, [pc, #24]	; (14d50 <lsm6dso_from_fs2_to_mg+0x2c>)
   14d38:	0010      	movs	r0, r2
   14d3a:	4798      	blx	r3
   14d3c:	1c02      	adds	r2, r0, #0
   14d3e:	4b05      	ldr	r3, [pc, #20]	; (14d54 <lsm6dso_from_fs2_to_mg+0x30>)
   14d40:	4905      	ldr	r1, [pc, #20]	; (14d58 <lsm6dso_from_fs2_to_mg+0x34>)
   14d42:	1c10      	adds	r0, r2, #0
   14d44:	4798      	blx	r3
   14d46:	1c03      	adds	r3, r0, #0
}
   14d48:	1c18      	adds	r0, r3, #0
   14d4a:	46bd      	mov	sp, r7
   14d4c:	b002      	add	sp, #8
   14d4e:	bd80      	pop	{r7, pc}
   14d50:	00033cd5 	.word	0x00033cd5
   14d54:	00033a55 	.word	0x00033a55
   14d58:	3d79db23 	.word	0x3d79db23

00014d5c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14d5c:	b590      	push	{r4, r7, lr}
   14d5e:	b085      	sub	sp, #20
   14d60:	af00      	add	r7, sp, #0
   14d62:	6078      	str	r0, [r7, #4]
   14d64:	000a      	movs	r2, r1
   14d66:	1cfb      	adds	r3, r7, #3
   14d68:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14d6a:	2308      	movs	r3, #8
   14d6c:	18fa      	adds	r2, r7, r3
   14d6e:	6878      	ldr	r0, [r7, #4]
   14d70:	2301      	movs	r3, #1
   14d72:	2110      	movs	r1, #16
   14d74:	4c12      	ldr	r4, [pc, #72]	; (14dc0 <lsm6dso_xl_full_scale_set+0x64>)
   14d76:	47a0      	blx	r4
   14d78:	0003      	movs	r3, r0
   14d7a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14d7c:	68fb      	ldr	r3, [r7, #12]
   14d7e:	2b00      	cmp	r3, #0
   14d80:	d119      	bne.n	14db6 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   14d82:	1cfb      	adds	r3, r7, #3
   14d84:	781b      	ldrb	r3, [r3, #0]
   14d86:	2203      	movs	r2, #3
   14d88:	4013      	ands	r3, r2
   14d8a:	b2da      	uxtb	r2, r3
   14d8c:	2308      	movs	r3, #8
   14d8e:	18fb      	adds	r3, r7, r3
   14d90:	2103      	movs	r1, #3
   14d92:	400a      	ands	r2, r1
   14d94:	0090      	lsls	r0, r2, #2
   14d96:	781a      	ldrb	r2, [r3, #0]
   14d98:	210c      	movs	r1, #12
   14d9a:	438a      	bics	r2, r1
   14d9c:	1c11      	adds	r1, r2, #0
   14d9e:	1c02      	adds	r2, r0, #0
   14da0:	430a      	orrs	r2, r1
   14da2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14da4:	2308      	movs	r3, #8
   14da6:	18fa      	adds	r2, r7, r3
   14da8:	6878      	ldr	r0, [r7, #4]
   14daa:	2301      	movs	r3, #1
   14dac:	2110      	movs	r1, #16
   14dae:	4c05      	ldr	r4, [pc, #20]	; (14dc4 <lsm6dso_xl_full_scale_set+0x68>)
   14db0:	47a0      	blx	r4
   14db2:	0003      	movs	r3, r0
   14db4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14db6:	68fb      	ldr	r3, [r7, #12]
}
   14db8:	0018      	movs	r0, r3
   14dba:	46bd      	mov	sp, r7
   14dbc:	b005      	add	sp, #20
   14dbe:	bd90      	pop	{r4, r7, pc}
   14dc0:	00014c99 	.word	0x00014c99
   14dc4:	00014cdf 	.word	0x00014cdf

00014dc8 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   14dc8:	b590      	push	{r4, r7, lr}
   14dca:	b087      	sub	sp, #28
   14dcc:	af00      	add	r7, sp, #0
   14dce:	6078      	str	r0, [r7, #4]
   14dd0:	000a      	movs	r2, r1
   14dd2:	1cfb      	adds	r3, r7, #3
   14dd4:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   14dd6:	2317      	movs	r3, #23
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	1cfa      	adds	r2, r7, #3
   14ddc:	7812      	ldrb	r2, [r2, #0]
   14dde:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   14de0:	230c      	movs	r3, #12
   14de2:	18fa      	adds	r2, r7, r3
   14de4:	687b      	ldr	r3, [r7, #4]
   14de6:	0011      	movs	r1, r2
   14de8:	0018      	movs	r0, r3
   14dea:	4ba4      	ldr	r3, [pc, #656]	; (1507c <lsm6dso_xl_data_rate_set+0x2b4>)
   14dec:	4798      	blx	r3
   14dee:	0003      	movs	r3, r0
   14df0:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   14df2:	693b      	ldr	r3, [r7, #16]
   14df4:	2b00      	cmp	r3, #0
   14df6:	d000      	beq.n	14dfa <lsm6dso_xl_data_rate_set+0x32>
   14df8:	e113      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14dfa:	230c      	movs	r3, #12
   14dfc:	18fb      	adds	r3, r7, r3
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	07db      	lsls	r3, r3, #31
   14e02:	0fdb      	lsrs	r3, r3, #31
   14e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14e06:	230c      	movs	r3, #12
   14e08:	18fb      	adds	r3, r7, r3
   14e0a:	781b      	ldrb	r3, [r3, #0]
   14e0c:	079b      	lsls	r3, r3, #30
   14e0e:	0fdb      	lsrs	r3, r3, #31
   14e10:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14e12:	4313      	orrs	r3, r2
   14e14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14e16:	230c      	movs	r3, #12
   14e18:	18fb      	adds	r3, r7, r3
   14e1a:	781b      	ldrb	r3, [r3, #0]
   14e1c:	075b      	lsls	r3, r3, #29
   14e1e:	0fdb      	lsrs	r3, r3, #31
   14e20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14e22:	4313      	orrs	r3, r2
   14e24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14e26:	230c      	movs	r3, #12
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	781b      	ldrb	r3, [r3, #0]
   14e2c:	071b      	lsls	r3, r3, #28
   14e2e:	0fdb      	lsrs	r3, r3, #31
   14e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14e32:	4313      	orrs	r3, r2
   14e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14e36:	230c      	movs	r3, #12
   14e38:	18fb      	adds	r3, r7, r3
   14e3a:	781b      	ldrb	r3, [r3, #0]
   14e3c:	06db      	lsls	r3, r3, #27
   14e3e:	0fdb      	lsrs	r3, r3, #31
   14e40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14e42:	4313      	orrs	r3, r2
   14e44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14e46:	230c      	movs	r3, #12
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	781b      	ldrb	r3, [r3, #0]
   14e4c:	069b      	lsls	r3, r3, #26
   14e4e:	0fdb      	lsrs	r3, r3, #31
   14e50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14e52:	4313      	orrs	r3, r2
   14e54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14e56:	230c      	movs	r3, #12
   14e58:	18fb      	adds	r3, r7, r3
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	065b      	lsls	r3, r3, #25
   14e5e:	0fdb      	lsrs	r3, r3, #31
   14e60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14e62:	4313      	orrs	r3, r2
   14e64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14e66:	230c      	movs	r3, #12
   14e68:	18fb      	adds	r3, r7, r3
   14e6a:	781b      	ldrb	r3, [r3, #0]
   14e6c:	061b      	lsls	r3, r3, #24
   14e6e:	0fdb      	lsrs	r3, r3, #31
   14e70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14e72:	4313      	orrs	r3, r2
   14e74:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14e76:	230c      	movs	r3, #12
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	785b      	ldrb	r3, [r3, #1]
   14e7c:	07db      	lsls	r3, r3, #31
   14e7e:	0fdb      	lsrs	r3, r3, #31
   14e80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14e82:	4313      	orrs	r3, r2
   14e84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14e86:	230c      	movs	r3, #12
   14e88:	18fb      	adds	r3, r7, r3
   14e8a:	785b      	ldrb	r3, [r3, #1]
   14e8c:	079b      	lsls	r3, r3, #30
   14e8e:	0fdb      	lsrs	r3, r3, #31
   14e90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14e92:	4313      	orrs	r3, r2
   14e94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14e96:	230c      	movs	r3, #12
   14e98:	18fb      	adds	r3, r7, r3
   14e9a:	785b      	ldrb	r3, [r3, #1]
   14e9c:	075b      	lsls	r3, r3, #29
   14e9e:	0fdb      	lsrs	r3, r3, #31
   14ea0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14ea2:	4313      	orrs	r3, r2
   14ea4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14ea6:	230c      	movs	r3, #12
   14ea8:	18fb      	adds	r3, r7, r3
   14eaa:	785b      	ldrb	r3, [r3, #1]
   14eac:	071b      	lsls	r3, r3, #28
   14eae:	0fdb      	lsrs	r3, r3, #31
   14eb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14eb2:	4313      	orrs	r3, r2
   14eb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14eb6:	230c      	movs	r3, #12
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	785b      	ldrb	r3, [r3, #1]
   14ebc:	06db      	lsls	r3, r3, #27
   14ebe:	0fdb      	lsrs	r3, r3, #31
   14ec0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14ec2:	4313      	orrs	r3, r2
   14ec4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14ec6:	230c      	movs	r3, #12
   14ec8:	18fb      	adds	r3, r7, r3
   14eca:	785b      	ldrb	r3, [r3, #1]
   14ecc:	069b      	lsls	r3, r3, #26
   14ece:	0fdb      	lsrs	r3, r3, #31
   14ed0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   14ed2:	4313      	orrs	r3, r2
   14ed4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14ed6:	230c      	movs	r3, #12
   14ed8:	18fb      	adds	r3, r7, r3
   14eda:	785b      	ldrb	r3, [r3, #1]
   14edc:	065b      	lsls	r3, r3, #25
   14ede:	0fdb      	lsrs	r3, r3, #31
   14ee0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   14ee2:	4313      	orrs	r3, r2
   14ee4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14ee6:	230c      	movs	r3, #12
   14ee8:	18fb      	adds	r3, r7, r3
   14eea:	785b      	ldrb	r3, [r3, #1]
   14eec:	061b      	lsls	r3, r3, #24
   14eee:	0fdb      	lsrs	r3, r3, #31
   14ef0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   14ef2:	4313      	orrs	r3, r2
   14ef4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14ef6:	2b01      	cmp	r3, #1
   14ef8:	d000      	beq.n	14efc <lsm6dso_xl_data_rate_set+0x134>
   14efa:	e092      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14efc:	230b      	movs	r3, #11
   14efe:	18fa      	adds	r2, r7, r3
   14f00:	687b      	ldr	r3, [r7, #4]
   14f02:	0011      	movs	r1, r2
   14f04:	0018      	movs	r0, r3
   14f06:	4b5e      	ldr	r3, [pc, #376]	; (15080 <lsm6dso_xl_data_rate_set+0x2b8>)
   14f08:	4798      	blx	r3
   14f0a:	0003      	movs	r3, r0
   14f0c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   14f0e:	693b      	ldr	r3, [r7, #16]
   14f10:	2b00      	cmp	r3, #0
   14f12:	d000      	beq.n	14f16 <lsm6dso_xl_data_rate_set+0x14e>
   14f14:	e085      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14f16:	230b      	movs	r3, #11
   14f18:	18fb      	adds	r3, r7, r3
   14f1a:	781b      	ldrb	r3, [r3, #0]
   14f1c:	2b01      	cmp	r3, #1
   14f1e:	d017      	beq.n	14f50 <lsm6dso_xl_data_rate_set+0x188>
   14f20:	dc02      	bgt.n	14f28 <lsm6dso_xl_data_rate_set+0x160>
   14f22:	2b00      	cmp	r3, #0
   14f24:	d005      	beq.n	14f32 <lsm6dso_xl_data_rate_set+0x16a>
   14f26:	e076      	b.n	15016 <lsm6dso_xl_data_rate_set+0x24e>
   14f28:	2b02      	cmp	r3, #2
   14f2a:	d029      	beq.n	14f80 <lsm6dso_xl_data_rate_set+0x1b8>
   14f2c:	2b03      	cmp	r3, #3
   14f2e:	d048      	beq.n	14fc2 <lsm6dso_xl_data_rate_set+0x1fa>
   14f30:	e071      	b.n	15016 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f32:	1cfb      	adds	r3, r7, #3
   14f34:	781b      	ldrb	r3, [r3, #0]
   14f36:	2b00      	cmp	r3, #0
   14f38:	d104      	bne.n	14f44 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14f3a:	2317      	movs	r3, #23
   14f3c:	18fb      	adds	r3, r7, r3
   14f3e:	2201      	movs	r2, #1
   14f40:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f42:	e06e      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f44:	2317      	movs	r3, #23
   14f46:	18fb      	adds	r3, r7, r3
   14f48:	1cfa      	adds	r2, r7, #3
   14f4a:	7812      	ldrb	r2, [r2, #0]
   14f4c:	701a      	strb	r2, [r3, #0]
            break;
   14f4e:	e068      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f50:	1cfb      	adds	r3, r7, #3
   14f52:	781b      	ldrb	r3, [r3, #0]
   14f54:	2b00      	cmp	r3, #0
   14f56:	d104      	bne.n	14f62 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14f58:	2317      	movs	r3, #23
   14f5a:	18fb      	adds	r3, r7, r3
   14f5c:	2202      	movs	r2, #2
   14f5e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f60:	e05f      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f62:	1cfb      	adds	r3, r7, #3
   14f64:	781b      	ldrb	r3, [r3, #0]
   14f66:	2b01      	cmp	r3, #1
   14f68:	d104      	bne.n	14f74 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14f6a:	2317      	movs	r3, #23
   14f6c:	18fb      	adds	r3, r7, r3
   14f6e:	2202      	movs	r2, #2
   14f70:	701a      	strb	r2, [r3, #0]
            break;
   14f72:	e056      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14f74:	2317      	movs	r3, #23
   14f76:	18fb      	adds	r3, r7, r3
   14f78:	1cfa      	adds	r2, r7, #3
   14f7a:	7812      	ldrb	r2, [r2, #0]
   14f7c:	701a      	strb	r2, [r3, #0]
            break;
   14f7e:	e050      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14f80:	1cfb      	adds	r3, r7, #3
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	2b00      	cmp	r3, #0
   14f86:	d104      	bne.n	14f92 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f88:	2317      	movs	r3, #23
   14f8a:	18fb      	adds	r3, r7, r3
   14f8c:	2203      	movs	r2, #3
   14f8e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14f90:	e047      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14f92:	1cfb      	adds	r3, r7, #3
   14f94:	781b      	ldrb	r3, [r3, #0]
   14f96:	2b01      	cmp	r3, #1
   14f98:	d104      	bne.n	14fa4 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14f9a:	2317      	movs	r3, #23
   14f9c:	18fb      	adds	r3, r7, r3
   14f9e:	2203      	movs	r2, #3
   14fa0:	701a      	strb	r2, [r3, #0]
            break;
   14fa2:	e03e      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14fa4:	1cfb      	adds	r3, r7, #3
   14fa6:	781b      	ldrb	r3, [r3, #0]
   14fa8:	2b02      	cmp	r3, #2
   14faa:	d104      	bne.n	14fb6 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14fac:	2317      	movs	r3, #23
   14fae:	18fb      	adds	r3, r7, r3
   14fb0:	2203      	movs	r2, #3
   14fb2:	701a      	strb	r2, [r3, #0]
            break;
   14fb4:	e035      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14fb6:	2317      	movs	r3, #23
   14fb8:	18fb      	adds	r3, r7, r3
   14fba:	1cfa      	adds	r2, r7, #3
   14fbc:	7812      	ldrb	r2, [r2, #0]
   14fbe:	701a      	strb	r2, [r3, #0]
            break;
   14fc0:	e02f      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   14fc2:	1cfb      	adds	r3, r7, #3
   14fc4:	781b      	ldrb	r3, [r3, #0]
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	d104      	bne.n	14fd4 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fca:	2317      	movs	r3, #23
   14fcc:	18fb      	adds	r3, r7, r3
   14fce:	2204      	movs	r2, #4
   14fd0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   14fd2:	e026      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   14fd4:	1cfb      	adds	r3, r7, #3
   14fd6:	781b      	ldrb	r3, [r3, #0]
   14fd8:	2b01      	cmp	r3, #1
   14fda:	d104      	bne.n	14fe6 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fdc:	2317      	movs	r3, #23
   14fde:	18fb      	adds	r3, r7, r3
   14fe0:	2204      	movs	r2, #4
   14fe2:	701a      	strb	r2, [r3, #0]
            break;
   14fe4:	e01d      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14fe6:	1cfb      	adds	r3, r7, #3
   14fe8:	781b      	ldrb	r3, [r3, #0]
   14fea:	2b02      	cmp	r3, #2
   14fec:	d104      	bne.n	14ff8 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   14fee:	2317      	movs	r3, #23
   14ff0:	18fb      	adds	r3, r7, r3
   14ff2:	2204      	movs	r2, #4
   14ff4:	701a      	strb	r2, [r3, #0]
            break;
   14ff6:	e014      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   14ff8:	1cfb      	adds	r3, r7, #3
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	2b03      	cmp	r3, #3
   14ffe:	d104      	bne.n	1500a <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15000:	2317      	movs	r3, #23
   15002:	18fb      	adds	r3, r7, r3
   15004:	2204      	movs	r2, #4
   15006:	701a      	strb	r2, [r3, #0]
            break;
   15008:	e00b      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1500a:	2317      	movs	r3, #23
   1500c:	18fb      	adds	r3, r7, r3
   1500e:	1cfa      	adds	r2, r7, #3
   15010:	7812      	ldrb	r2, [r2, #0]
   15012:	701a      	strb	r2, [r3, #0]
            break;
   15014:	e005      	b.n	15022 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   15016:	2317      	movs	r3, #23
   15018:	18fb      	adds	r3, r7, r3
   1501a:	1cfa      	adds	r2, r7, #3
   1501c:	7812      	ldrb	r2, [r2, #0]
   1501e:	701a      	strb	r2, [r3, #0]
            break;
   15020:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15022:	693b      	ldr	r3, [r7, #16]
   15024:	2b00      	cmp	r3, #0
   15026:	d108      	bne.n	1503a <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15028:	2308      	movs	r3, #8
   1502a:	18fa      	adds	r2, r7, r3
   1502c:	6878      	ldr	r0, [r7, #4]
   1502e:	2301      	movs	r3, #1
   15030:	2110      	movs	r1, #16
   15032:	4c14      	ldr	r4, [pc, #80]	; (15084 <lsm6dso_xl_data_rate_set+0x2bc>)
   15034:	47a0      	blx	r4
   15036:	0003      	movs	r3, r0
   15038:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1503a:	693b      	ldr	r3, [r7, #16]
   1503c:	2b00      	cmp	r3, #0
   1503e:	d118      	bne.n	15072 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   15040:	2317      	movs	r3, #23
   15042:	18fb      	adds	r3, r7, r3
   15044:	781b      	ldrb	r3, [r3, #0]
   15046:	220f      	movs	r2, #15
   15048:	4013      	ands	r3, r2
   1504a:	b2da      	uxtb	r2, r3
   1504c:	2308      	movs	r3, #8
   1504e:	18fb      	adds	r3, r7, r3
   15050:	0110      	lsls	r0, r2, #4
   15052:	781a      	ldrb	r2, [r3, #0]
   15054:	210f      	movs	r1, #15
   15056:	400a      	ands	r2, r1
   15058:	1c11      	adds	r1, r2, #0
   1505a:	1c02      	adds	r2, r0, #0
   1505c:	430a      	orrs	r2, r1
   1505e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15060:	2308      	movs	r3, #8
   15062:	18fa      	adds	r2, r7, r3
   15064:	6878      	ldr	r0, [r7, #4]
   15066:	2301      	movs	r3, #1
   15068:	2110      	movs	r1, #16
   1506a:	4c07      	ldr	r4, [pc, #28]	; (15088 <lsm6dso_xl_data_rate_set+0x2c0>)
   1506c:	47a0      	blx	r4
   1506e:	0003      	movs	r3, r0
   15070:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15072:	693b      	ldr	r3, [r7, #16]
}
   15074:	0018      	movs	r0, r3
   15076:	46bd      	mov	sp, r7
   15078:	b007      	add	sp, #28
   1507a:	bd90      	pop	{r4, r7, pc}
   1507c:	000158a5 	.word	0x000158a5
   15080:	000158f9 	.word	0x000158f9
   15084:	00014c99 	.word	0x00014c99
   15088:	00014cdf 	.word	0x00014cdf

0001508c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   1508c:	b590      	push	{r4, r7, lr}
   1508e:	b085      	sub	sp, #20
   15090:	af00      	add	r7, sp, #0
   15092:	6078      	str	r0, [r7, #4]
   15094:	000a      	movs	r2, r1
   15096:	1cfb      	adds	r3, r7, #3
   15098:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1509a:	2308      	movs	r3, #8
   1509c:	18fa      	adds	r2, r7, r3
   1509e:	6878      	ldr	r0, [r7, #4]
   150a0:	2301      	movs	r3, #1
   150a2:	2111      	movs	r1, #17
   150a4:	4c12      	ldr	r4, [pc, #72]	; (150f0 <lsm6dso_gy_full_scale_set+0x64>)
   150a6:	47a0      	blx	r4
   150a8:	0003      	movs	r3, r0
   150aa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   150ac:	68fb      	ldr	r3, [r7, #12]
   150ae:	2b00      	cmp	r3, #0
   150b0:	d119      	bne.n	150e6 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   150b2:	1cfb      	adds	r3, r7, #3
   150b4:	781b      	ldrb	r3, [r3, #0]
   150b6:	2207      	movs	r2, #7
   150b8:	4013      	ands	r3, r2
   150ba:	b2da      	uxtb	r2, r3
   150bc:	2308      	movs	r3, #8
   150be:	18fb      	adds	r3, r7, r3
   150c0:	2107      	movs	r1, #7
   150c2:	400a      	ands	r2, r1
   150c4:	1890      	adds	r0, r2, r2
   150c6:	781a      	ldrb	r2, [r3, #0]
   150c8:	210e      	movs	r1, #14
   150ca:	438a      	bics	r2, r1
   150cc:	1c11      	adds	r1, r2, #0
   150ce:	1c02      	adds	r2, r0, #0
   150d0:	430a      	orrs	r2, r1
   150d2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   150d4:	2308      	movs	r3, #8
   150d6:	18fa      	adds	r2, r7, r3
   150d8:	6878      	ldr	r0, [r7, #4]
   150da:	2301      	movs	r3, #1
   150dc:	2111      	movs	r1, #17
   150de:	4c05      	ldr	r4, [pc, #20]	; (150f4 <lsm6dso_gy_full_scale_set+0x68>)
   150e0:	47a0      	blx	r4
   150e2:	0003      	movs	r3, r0
   150e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   150e6:	68fb      	ldr	r3, [r7, #12]
}
   150e8:	0018      	movs	r0, r3
   150ea:	46bd      	mov	sp, r7
   150ec:	b005      	add	sp, #20
   150ee:	bd90      	pop	{r4, r7, pc}
   150f0:	00014c99 	.word	0x00014c99
   150f4:	00014cdf 	.word	0x00014cdf

000150f8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   150f8:	b590      	push	{r4, r7, lr}
   150fa:	b087      	sub	sp, #28
   150fc:	af00      	add	r7, sp, #0
   150fe:	6078      	str	r0, [r7, #4]
   15100:	000a      	movs	r2, r1
   15102:	1cfb      	adds	r3, r7, #3
   15104:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15106:	2317      	movs	r3, #23
   15108:	18fb      	adds	r3, r7, r3
   1510a:	1cfa      	adds	r2, r7, #3
   1510c:	7812      	ldrb	r2, [r2, #0]
   1510e:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15110:	230c      	movs	r3, #12
   15112:	18fa      	adds	r2, r7, r3
   15114:	687b      	ldr	r3, [r7, #4]
   15116:	0011      	movs	r1, r2
   15118:	0018      	movs	r0, r3
   1511a:	4ba4      	ldr	r3, [pc, #656]	; (153ac <lsm6dso_gy_data_rate_set+0x2b4>)
   1511c:	4798      	blx	r3
   1511e:	0003      	movs	r3, r0
   15120:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15122:	693b      	ldr	r3, [r7, #16]
   15124:	2b00      	cmp	r3, #0
   15126:	d000      	beq.n	1512a <lsm6dso_gy_data_rate_set+0x32>
   15128:	e113      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1512a:	230c      	movs	r3, #12
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	781b      	ldrb	r3, [r3, #0]
   15130:	07db      	lsls	r3, r3, #31
   15132:	0fdb      	lsrs	r3, r3, #31
   15134:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15136:	230c      	movs	r3, #12
   15138:	18fb      	adds	r3, r7, r3
   1513a:	781b      	ldrb	r3, [r3, #0]
   1513c:	079b      	lsls	r3, r3, #30
   1513e:	0fdb      	lsrs	r3, r3, #31
   15140:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15142:	4313      	orrs	r3, r2
   15144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15146:	230c      	movs	r3, #12
   15148:	18fb      	adds	r3, r7, r3
   1514a:	781b      	ldrb	r3, [r3, #0]
   1514c:	075b      	lsls	r3, r3, #29
   1514e:	0fdb      	lsrs	r3, r3, #31
   15150:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15152:	4313      	orrs	r3, r2
   15154:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15156:	230c      	movs	r3, #12
   15158:	18fb      	adds	r3, r7, r3
   1515a:	781b      	ldrb	r3, [r3, #0]
   1515c:	071b      	lsls	r3, r3, #28
   1515e:	0fdb      	lsrs	r3, r3, #31
   15160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15162:	4313      	orrs	r3, r2
   15164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15166:	230c      	movs	r3, #12
   15168:	18fb      	adds	r3, r7, r3
   1516a:	781b      	ldrb	r3, [r3, #0]
   1516c:	06db      	lsls	r3, r3, #27
   1516e:	0fdb      	lsrs	r3, r3, #31
   15170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15172:	4313      	orrs	r3, r2
   15174:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15176:	230c      	movs	r3, #12
   15178:	18fb      	adds	r3, r7, r3
   1517a:	781b      	ldrb	r3, [r3, #0]
   1517c:	069b      	lsls	r3, r3, #26
   1517e:	0fdb      	lsrs	r3, r3, #31
   15180:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15182:	4313      	orrs	r3, r2
   15184:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15186:	230c      	movs	r3, #12
   15188:	18fb      	adds	r3, r7, r3
   1518a:	781b      	ldrb	r3, [r3, #0]
   1518c:	065b      	lsls	r3, r3, #25
   1518e:	0fdb      	lsrs	r3, r3, #31
   15190:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15192:	4313      	orrs	r3, r2
   15194:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15196:	230c      	movs	r3, #12
   15198:	18fb      	adds	r3, r7, r3
   1519a:	781b      	ldrb	r3, [r3, #0]
   1519c:	061b      	lsls	r3, r3, #24
   1519e:	0fdb      	lsrs	r3, r3, #31
   151a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   151a2:	4313      	orrs	r3, r2
   151a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   151a6:	230c      	movs	r3, #12
   151a8:	18fb      	adds	r3, r7, r3
   151aa:	785b      	ldrb	r3, [r3, #1]
   151ac:	07db      	lsls	r3, r3, #31
   151ae:	0fdb      	lsrs	r3, r3, #31
   151b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   151b2:	4313      	orrs	r3, r2
   151b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   151b6:	230c      	movs	r3, #12
   151b8:	18fb      	adds	r3, r7, r3
   151ba:	785b      	ldrb	r3, [r3, #1]
   151bc:	079b      	lsls	r3, r3, #30
   151be:	0fdb      	lsrs	r3, r3, #31
   151c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   151c2:	4313      	orrs	r3, r2
   151c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   151c6:	230c      	movs	r3, #12
   151c8:	18fb      	adds	r3, r7, r3
   151ca:	785b      	ldrb	r3, [r3, #1]
   151cc:	075b      	lsls	r3, r3, #29
   151ce:	0fdb      	lsrs	r3, r3, #31
   151d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   151d2:	4313      	orrs	r3, r2
   151d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   151d6:	230c      	movs	r3, #12
   151d8:	18fb      	adds	r3, r7, r3
   151da:	785b      	ldrb	r3, [r3, #1]
   151dc:	071b      	lsls	r3, r3, #28
   151de:	0fdb      	lsrs	r3, r3, #31
   151e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   151e2:	4313      	orrs	r3, r2
   151e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   151e6:	230c      	movs	r3, #12
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	785b      	ldrb	r3, [r3, #1]
   151ec:	06db      	lsls	r3, r3, #27
   151ee:	0fdb      	lsrs	r3, r3, #31
   151f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   151f2:	4313      	orrs	r3, r2
   151f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   151f6:	230c      	movs	r3, #12
   151f8:	18fb      	adds	r3, r7, r3
   151fa:	785b      	ldrb	r3, [r3, #1]
   151fc:	069b      	lsls	r3, r3, #26
   151fe:	0fdb      	lsrs	r3, r3, #31
   15200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15202:	4313      	orrs	r3, r2
   15204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15206:	230c      	movs	r3, #12
   15208:	18fb      	adds	r3, r7, r3
   1520a:	785b      	ldrb	r3, [r3, #1]
   1520c:	065b      	lsls	r3, r3, #25
   1520e:	0fdb      	lsrs	r3, r3, #31
   15210:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15212:	4313      	orrs	r3, r2
   15214:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15216:	230c      	movs	r3, #12
   15218:	18fb      	adds	r3, r7, r3
   1521a:	785b      	ldrb	r3, [r3, #1]
   1521c:	061b      	lsls	r3, r3, #24
   1521e:	0fdb      	lsrs	r3, r3, #31
   15220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15222:	4313      	orrs	r3, r2
   15224:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15226:	2b01      	cmp	r3, #1
   15228:	d000      	beq.n	1522c <lsm6dso_gy_data_rate_set+0x134>
   1522a:	e092      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   1522c:	230b      	movs	r3, #11
   1522e:	18fa      	adds	r2, r7, r3
   15230:	687b      	ldr	r3, [r7, #4]
   15232:	0011      	movs	r1, r2
   15234:	0018      	movs	r0, r3
   15236:	4b5e      	ldr	r3, [pc, #376]	; (153b0 <lsm6dso_gy_data_rate_set+0x2b8>)
   15238:	4798      	blx	r3
   1523a:	0003      	movs	r3, r0
   1523c:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1523e:	693b      	ldr	r3, [r7, #16]
   15240:	2b00      	cmp	r3, #0
   15242:	d000      	beq.n	15246 <lsm6dso_gy_data_rate_set+0x14e>
   15244:	e085      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15246:	230b      	movs	r3, #11
   15248:	18fb      	adds	r3, r7, r3
   1524a:	781b      	ldrb	r3, [r3, #0]
   1524c:	2b01      	cmp	r3, #1
   1524e:	d017      	beq.n	15280 <lsm6dso_gy_data_rate_set+0x188>
   15250:	dc02      	bgt.n	15258 <lsm6dso_gy_data_rate_set+0x160>
   15252:	2b00      	cmp	r3, #0
   15254:	d005      	beq.n	15262 <lsm6dso_gy_data_rate_set+0x16a>
   15256:	e076      	b.n	15346 <lsm6dso_gy_data_rate_set+0x24e>
   15258:	2b02      	cmp	r3, #2
   1525a:	d029      	beq.n	152b0 <lsm6dso_gy_data_rate_set+0x1b8>
   1525c:	2b03      	cmp	r3, #3
   1525e:	d048      	beq.n	152f2 <lsm6dso_gy_data_rate_set+0x1fa>
   15260:	e071      	b.n	15346 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15262:	1cfb      	adds	r3, r7, #3
   15264:	781b      	ldrb	r3, [r3, #0]
   15266:	2b00      	cmp	r3, #0
   15268:	d104      	bne.n	15274 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   1526a:	2317      	movs	r3, #23
   1526c:	18fb      	adds	r3, r7, r3
   1526e:	2201      	movs	r2, #1
   15270:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15272:	e06e      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15274:	2317      	movs	r3, #23
   15276:	18fb      	adds	r3, r7, r3
   15278:	1cfa      	adds	r2, r7, #3
   1527a:	7812      	ldrb	r2, [r2, #0]
   1527c:	701a      	strb	r2, [r3, #0]
            break;
   1527e:	e068      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15280:	1cfb      	adds	r3, r7, #3
   15282:	781b      	ldrb	r3, [r3, #0]
   15284:	2b00      	cmp	r3, #0
   15286:	d104      	bne.n	15292 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15288:	2317      	movs	r3, #23
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	2202      	movs	r2, #2
   1528e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15290:	e05f      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15292:	1cfb      	adds	r3, r7, #3
   15294:	781b      	ldrb	r3, [r3, #0]
   15296:	2b01      	cmp	r3, #1
   15298:	d104      	bne.n	152a4 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   1529a:	2317      	movs	r3, #23
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	2202      	movs	r2, #2
   152a0:	701a      	strb	r2, [r3, #0]
            break;
   152a2:	e056      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   152a4:	2317      	movs	r3, #23
   152a6:	18fb      	adds	r3, r7, r3
   152a8:	1cfa      	adds	r2, r7, #3
   152aa:	7812      	ldrb	r2, [r2, #0]
   152ac:	701a      	strb	r2, [r3, #0]
            break;
   152ae:	e050      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   152b0:	1cfb      	adds	r3, r7, #3
   152b2:	781b      	ldrb	r3, [r3, #0]
   152b4:	2b00      	cmp	r3, #0
   152b6:	d104      	bne.n	152c2 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   152b8:	2317      	movs	r3, #23
   152ba:	18fb      	adds	r3, r7, r3
   152bc:	2203      	movs	r2, #3
   152be:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   152c0:	e047      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   152c2:	1cfb      	adds	r3, r7, #3
   152c4:	781b      	ldrb	r3, [r3, #0]
   152c6:	2b01      	cmp	r3, #1
   152c8:	d104      	bne.n	152d4 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   152ca:	2317      	movs	r3, #23
   152cc:	18fb      	adds	r3, r7, r3
   152ce:	2203      	movs	r2, #3
   152d0:	701a      	strb	r2, [r3, #0]
            break;
   152d2:	e03e      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   152d4:	1cfb      	adds	r3, r7, #3
   152d6:	781b      	ldrb	r3, [r3, #0]
   152d8:	2b02      	cmp	r3, #2
   152da:	d104      	bne.n	152e6 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   152dc:	2317      	movs	r3, #23
   152de:	18fb      	adds	r3, r7, r3
   152e0:	2203      	movs	r2, #3
   152e2:	701a      	strb	r2, [r3, #0]
            break;
   152e4:	e035      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   152e6:	2317      	movs	r3, #23
   152e8:	18fb      	adds	r3, r7, r3
   152ea:	1cfa      	adds	r2, r7, #3
   152ec:	7812      	ldrb	r2, [r2, #0]
   152ee:	701a      	strb	r2, [r3, #0]
            break;
   152f0:	e02f      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   152f2:	1cfb      	adds	r3, r7, #3
   152f4:	781b      	ldrb	r3, [r3, #0]
   152f6:	2b00      	cmp	r3, #0
   152f8:	d104      	bne.n	15304 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   152fa:	2317      	movs	r3, #23
   152fc:	18fb      	adds	r3, r7, r3
   152fe:	2204      	movs	r2, #4
   15300:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15302:	e026      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15304:	1cfb      	adds	r3, r7, #3
   15306:	781b      	ldrb	r3, [r3, #0]
   15308:	2b01      	cmp	r3, #1
   1530a:	d104      	bne.n	15316 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1530c:	2317      	movs	r3, #23
   1530e:	18fb      	adds	r3, r7, r3
   15310:	2204      	movs	r2, #4
   15312:	701a      	strb	r2, [r3, #0]
            break;
   15314:	e01d      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15316:	1cfb      	adds	r3, r7, #3
   15318:	781b      	ldrb	r3, [r3, #0]
   1531a:	2b02      	cmp	r3, #2
   1531c:	d104      	bne.n	15328 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1531e:	2317      	movs	r3, #23
   15320:	18fb      	adds	r3, r7, r3
   15322:	2204      	movs	r2, #4
   15324:	701a      	strb	r2, [r3, #0]
            break;
   15326:	e014      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15328:	1cfb      	adds	r3, r7, #3
   1532a:	781b      	ldrb	r3, [r3, #0]
   1532c:	2b03      	cmp	r3, #3
   1532e:	d104      	bne.n	1533a <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15330:	2317      	movs	r3, #23
   15332:	18fb      	adds	r3, r7, r3
   15334:	2204      	movs	r2, #4
   15336:	701a      	strb	r2, [r3, #0]
            break;
   15338:	e00b      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1533a:	2317      	movs	r3, #23
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	1cfa      	adds	r2, r7, #3
   15340:	7812      	ldrb	r2, [r2, #0]
   15342:	701a      	strb	r2, [r3, #0]
            break;
   15344:	e005      	b.n	15352 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15346:	2317      	movs	r3, #23
   15348:	18fb      	adds	r3, r7, r3
   1534a:	1cfa      	adds	r2, r7, #3
   1534c:	7812      	ldrb	r2, [r2, #0]
   1534e:	701a      	strb	r2, [r3, #0]
            break;
   15350:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15352:	693b      	ldr	r3, [r7, #16]
   15354:	2b00      	cmp	r3, #0
   15356:	d108      	bne.n	1536a <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15358:	2308      	movs	r3, #8
   1535a:	18fa      	adds	r2, r7, r3
   1535c:	6878      	ldr	r0, [r7, #4]
   1535e:	2301      	movs	r3, #1
   15360:	2111      	movs	r1, #17
   15362:	4c14      	ldr	r4, [pc, #80]	; (153b4 <lsm6dso_gy_data_rate_set+0x2bc>)
   15364:	47a0      	blx	r4
   15366:	0003      	movs	r3, r0
   15368:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1536a:	693b      	ldr	r3, [r7, #16]
   1536c:	2b00      	cmp	r3, #0
   1536e:	d118      	bne.n	153a2 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15370:	2317      	movs	r3, #23
   15372:	18fb      	adds	r3, r7, r3
   15374:	781b      	ldrb	r3, [r3, #0]
   15376:	220f      	movs	r2, #15
   15378:	4013      	ands	r3, r2
   1537a:	b2da      	uxtb	r2, r3
   1537c:	2308      	movs	r3, #8
   1537e:	18fb      	adds	r3, r7, r3
   15380:	0110      	lsls	r0, r2, #4
   15382:	781a      	ldrb	r2, [r3, #0]
   15384:	210f      	movs	r1, #15
   15386:	400a      	ands	r2, r1
   15388:	1c11      	adds	r1, r2, #0
   1538a:	1c02      	adds	r2, r0, #0
   1538c:	430a      	orrs	r2, r1
   1538e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15390:	2308      	movs	r3, #8
   15392:	18fa      	adds	r2, r7, r3
   15394:	6878      	ldr	r0, [r7, #4]
   15396:	2301      	movs	r3, #1
   15398:	2111      	movs	r1, #17
   1539a:	4c07      	ldr	r4, [pc, #28]	; (153b8 <lsm6dso_gy_data_rate_set+0x2c0>)
   1539c:	47a0      	blx	r4
   1539e:	0003      	movs	r3, r0
   153a0:	613b      	str	r3, [r7, #16]
  }

  return ret;
   153a2:	693b      	ldr	r3, [r7, #16]
}
   153a4:	0018      	movs	r0, r3
   153a6:	46bd      	mov	sp, r7
   153a8:	b007      	add	sp, #28
   153aa:	bd90      	pop	{r4, r7, pc}
   153ac:	000158a5 	.word	0x000158a5
   153b0:	000158f9 	.word	0x000158f9
   153b4:	00014c99 	.word	0x00014c99
   153b8:	00014cdf 	.word	0x00014cdf

000153bc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   153bc:	b590      	push	{r4, r7, lr}
   153be:	b085      	sub	sp, #20
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
   153c4:	000a      	movs	r2, r1
   153c6:	1cfb      	adds	r3, r7, #3
   153c8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   153ca:	2308      	movs	r3, #8
   153cc:	18fa      	adds	r2, r7, r3
   153ce:	6878      	ldr	r0, [r7, #4]
   153d0:	2301      	movs	r3, #1
   153d2:	2112      	movs	r1, #18
   153d4:	4c12      	ldr	r4, [pc, #72]	; (15420 <lsm6dso_block_data_update_set+0x64>)
   153d6:	47a0      	blx	r4
   153d8:	0003      	movs	r3, r0
   153da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   153dc:	68fb      	ldr	r3, [r7, #12]
   153de:	2b00      	cmp	r3, #0
   153e0:	d119      	bne.n	15416 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   153e2:	1cfb      	adds	r3, r7, #3
   153e4:	781b      	ldrb	r3, [r3, #0]
   153e6:	2201      	movs	r2, #1
   153e8:	4013      	ands	r3, r2
   153ea:	b2da      	uxtb	r2, r3
   153ec:	2308      	movs	r3, #8
   153ee:	18fb      	adds	r3, r7, r3
   153f0:	2101      	movs	r1, #1
   153f2:	400a      	ands	r2, r1
   153f4:	0190      	lsls	r0, r2, #6
   153f6:	781a      	ldrb	r2, [r3, #0]
   153f8:	2140      	movs	r1, #64	; 0x40
   153fa:	438a      	bics	r2, r1
   153fc:	1c11      	adds	r1, r2, #0
   153fe:	1c02      	adds	r2, r0, #0
   15400:	430a      	orrs	r2, r1
   15402:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15404:	2308      	movs	r3, #8
   15406:	18fa      	adds	r2, r7, r3
   15408:	6878      	ldr	r0, [r7, #4]
   1540a:	2301      	movs	r3, #1
   1540c:	2112      	movs	r1, #18
   1540e:	4c05      	ldr	r4, [pc, #20]	; (15424 <lsm6dso_block_data_update_set+0x68>)
   15410:	47a0      	blx	r4
   15412:	0003      	movs	r3, r0
   15414:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15416:	68fb      	ldr	r3, [r7, #12]
}
   15418:	0018      	movs	r0, r3
   1541a:	46bd      	mov	sp, r7
   1541c:	b005      	add	sp, #20
   1541e:	bd90      	pop	{r4, r7, pc}
   15420:	00014c99 	.word	0x00014c99
   15424:	00014cdf 	.word	0x00014cdf

00015428 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15428:	b590      	push	{r4, r7, lr}
   1542a:	b085      	sub	sp, #20
   1542c:	af00      	add	r7, sp, #0
   1542e:	6078      	str	r0, [r7, #4]
   15430:	000a      	movs	r2, r1
   15432:	1cfb      	adds	r3, r7, #3
   15434:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15436:	2308      	movs	r3, #8
   15438:	18fa      	adds	r2, r7, r3
   1543a:	6878      	ldr	r0, [r7, #4]
   1543c:	2301      	movs	r3, #1
   1543e:	2115      	movs	r1, #21
   15440:	4c12      	ldr	r4, [pc, #72]	; (1548c <lsm6dso_xl_offset_weight_set+0x64>)
   15442:	47a0      	blx	r4
   15444:	0003      	movs	r3, r0
   15446:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15448:	68fb      	ldr	r3, [r7, #12]
   1544a:	2b00      	cmp	r3, #0
   1544c:	d119      	bne.n	15482 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1544e:	1cfb      	adds	r3, r7, #3
   15450:	781b      	ldrb	r3, [r3, #0]
   15452:	2201      	movs	r2, #1
   15454:	4013      	ands	r3, r2
   15456:	b2da      	uxtb	r2, r3
   15458:	2308      	movs	r3, #8
   1545a:	18fb      	adds	r3, r7, r3
   1545c:	2101      	movs	r1, #1
   1545e:	400a      	ands	r2, r1
   15460:	00d0      	lsls	r0, r2, #3
   15462:	781a      	ldrb	r2, [r3, #0]
   15464:	2108      	movs	r1, #8
   15466:	438a      	bics	r2, r1
   15468:	1c11      	adds	r1, r2, #0
   1546a:	1c02      	adds	r2, r0, #0
   1546c:	430a      	orrs	r2, r1
   1546e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15470:	2308      	movs	r3, #8
   15472:	18fa      	adds	r2, r7, r3
   15474:	6878      	ldr	r0, [r7, #4]
   15476:	2301      	movs	r3, #1
   15478:	2115      	movs	r1, #21
   1547a:	4c05      	ldr	r4, [pc, #20]	; (15490 <lsm6dso_xl_offset_weight_set+0x68>)
   1547c:	47a0      	blx	r4
   1547e:	0003      	movs	r3, r0
   15480:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15482:	68fb      	ldr	r3, [r7, #12]
}
   15484:	0018      	movs	r0, r3
   15486:	46bd      	mov	sp, r7
   15488:	b005      	add	sp, #20
   1548a:	bd90      	pop	{r4, r7, pc}
   1548c:	00014c99 	.word	0x00014c99
   15490:	00014cdf 	.word	0x00014cdf

00015494 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15494:	b590      	push	{r4, r7, lr}
   15496:	b085      	sub	sp, #20
   15498:	af00      	add	r7, sp, #0
   1549a:	6078      	str	r0, [r7, #4]
   1549c:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1549e:	2308      	movs	r3, #8
   154a0:	18fa      	adds	r2, r7, r3
   154a2:	6878      	ldr	r0, [r7, #4]
   154a4:	2301      	movs	r3, #1
   154a6:	211e      	movs	r1, #30
   154a8:	4c08      	ldr	r4, [pc, #32]	; (154cc <lsm6dso_xl_flag_data_ready_get+0x38>)
   154aa:	47a0      	blx	r4
   154ac:	0003      	movs	r3, r0
   154ae:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   154b0:	2308      	movs	r3, #8
   154b2:	18fb      	adds	r3, r7, r3
   154b4:	781b      	ldrb	r3, [r3, #0]
   154b6:	07db      	lsls	r3, r3, #31
   154b8:	0fdb      	lsrs	r3, r3, #31
   154ba:	b2db      	uxtb	r3, r3
   154bc:	001a      	movs	r2, r3
   154be:	683b      	ldr	r3, [r7, #0]
   154c0:	701a      	strb	r2, [r3, #0]

  return ret;
   154c2:	68fb      	ldr	r3, [r7, #12]
}
   154c4:	0018      	movs	r0, r3
   154c6:	46bd      	mov	sp, r7
   154c8:	b005      	add	sp, #20
   154ca:	bd90      	pop	{r4, r7, pc}
   154cc:	00014c99 	.word	0x00014c99

000154d0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   154d0:	b590      	push	{r4, r7, lr}
   154d2:	b087      	sub	sp, #28
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
   154d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   154da:	230c      	movs	r3, #12
   154dc:	18fa      	adds	r2, r7, r3
   154de:	6878      	ldr	r0, [r7, #4]
   154e0:	2306      	movs	r3, #6
   154e2:	2128      	movs	r1, #40	; 0x28
   154e4:	4c26      	ldr	r4, [pc, #152]	; (15580 <lsm6dso_acceleration_raw_get+0xb0>)
   154e6:	47a0      	blx	r4
   154e8:	0003      	movs	r3, r0
   154ea:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   154ec:	230c      	movs	r3, #12
   154ee:	18fb      	adds	r3, r7, r3
   154f0:	785b      	ldrb	r3, [r3, #1]
   154f2:	b21a      	sxth	r2, r3
   154f4:	683b      	ldr	r3, [r7, #0]
   154f6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   154f8:	683b      	ldr	r3, [r7, #0]
   154fa:	2200      	movs	r2, #0
   154fc:	5e9b      	ldrsh	r3, [r3, r2]
   154fe:	b29b      	uxth	r3, r3
   15500:	021b      	lsls	r3, r3, #8
   15502:	b29a      	uxth	r2, r3
   15504:	230c      	movs	r3, #12
   15506:	18fb      	adds	r3, r7, r3
   15508:	781b      	ldrb	r3, [r3, #0]
   1550a:	b29b      	uxth	r3, r3
   1550c:	18d3      	adds	r3, r2, r3
   1550e:	b29b      	uxth	r3, r3
   15510:	b21a      	sxth	r2, r3
   15512:	683b      	ldr	r3, [r7, #0]
   15514:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15516:	683b      	ldr	r3, [r7, #0]
   15518:	3302      	adds	r3, #2
   1551a:	220c      	movs	r2, #12
   1551c:	18ba      	adds	r2, r7, r2
   1551e:	78d2      	ldrb	r2, [r2, #3]
   15520:	b212      	sxth	r2, r2
   15522:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15524:	683b      	ldr	r3, [r7, #0]
   15526:	3302      	adds	r3, #2
   15528:	683a      	ldr	r2, [r7, #0]
   1552a:	3202      	adds	r2, #2
   1552c:	2100      	movs	r1, #0
   1552e:	5e52      	ldrsh	r2, [r2, r1]
   15530:	b292      	uxth	r2, r2
   15532:	0212      	lsls	r2, r2, #8
   15534:	b291      	uxth	r1, r2
   15536:	220c      	movs	r2, #12
   15538:	18ba      	adds	r2, r7, r2
   1553a:	7892      	ldrb	r2, [r2, #2]
   1553c:	b292      	uxth	r2, r2
   1553e:	188a      	adds	r2, r1, r2
   15540:	b292      	uxth	r2, r2
   15542:	b212      	sxth	r2, r2
   15544:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15546:	683b      	ldr	r3, [r7, #0]
   15548:	3304      	adds	r3, #4
   1554a:	220c      	movs	r2, #12
   1554c:	18ba      	adds	r2, r7, r2
   1554e:	7952      	ldrb	r2, [r2, #5]
   15550:	b212      	sxth	r2, r2
   15552:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15554:	683b      	ldr	r3, [r7, #0]
   15556:	3304      	adds	r3, #4
   15558:	683a      	ldr	r2, [r7, #0]
   1555a:	3204      	adds	r2, #4
   1555c:	2100      	movs	r1, #0
   1555e:	5e52      	ldrsh	r2, [r2, r1]
   15560:	b292      	uxth	r2, r2
   15562:	0212      	lsls	r2, r2, #8
   15564:	b291      	uxth	r1, r2
   15566:	220c      	movs	r2, #12
   15568:	18ba      	adds	r2, r7, r2
   1556a:	7912      	ldrb	r2, [r2, #4]
   1556c:	b292      	uxth	r2, r2
   1556e:	188a      	adds	r2, r1, r2
   15570:	b292      	uxth	r2, r2
   15572:	b212      	sxth	r2, r2
   15574:	801a      	strh	r2, [r3, #0]

  return ret;
   15576:	697b      	ldr	r3, [r7, #20]
}
   15578:	0018      	movs	r0, r3
   1557a:	46bd      	mov	sp, r7
   1557c:	b007      	add	sp, #28
   1557e:	bd90      	pop	{r4, r7, pc}
   15580:	00014c99 	.word	0x00014c99

00015584 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15584:	b590      	push	{r4, r7, lr}
   15586:	b085      	sub	sp, #20
   15588:	af00      	add	r7, sp, #0
   1558a:	6078      	str	r0, [r7, #4]
   1558c:	000a      	movs	r2, r1
   1558e:	1cfb      	adds	r3, r7, #3
   15590:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15592:	2308      	movs	r3, #8
   15594:	18fa      	adds	r2, r7, r3
   15596:	6878      	ldr	r0, [r7, #4]
   15598:	2301      	movs	r3, #1
   1559a:	2101      	movs	r1, #1
   1559c:	4c11      	ldr	r4, [pc, #68]	; (155e4 <lsm6dso_mem_bank_set+0x60>)
   1559e:	47a0      	blx	r4
   155a0:	0003      	movs	r3, r0
   155a2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155a4:	68fb      	ldr	r3, [r7, #12]
   155a6:	2b00      	cmp	r3, #0
   155a8:	d117      	bne.n	155da <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   155aa:	1cfb      	adds	r3, r7, #3
   155ac:	781b      	ldrb	r3, [r3, #0]
   155ae:	2203      	movs	r2, #3
   155b0:	4013      	ands	r3, r2
   155b2:	b2da      	uxtb	r2, r3
   155b4:	2308      	movs	r3, #8
   155b6:	18fb      	adds	r3, r7, r3
   155b8:	0190      	lsls	r0, r2, #6
   155ba:	781a      	ldrb	r2, [r3, #0]
   155bc:	213f      	movs	r1, #63	; 0x3f
   155be:	400a      	ands	r2, r1
   155c0:	1c11      	adds	r1, r2, #0
   155c2:	1c02      	adds	r2, r0, #0
   155c4:	430a      	orrs	r2, r1
   155c6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   155c8:	2308      	movs	r3, #8
   155ca:	18fa      	adds	r2, r7, r3
   155cc:	6878      	ldr	r0, [r7, #4]
   155ce:	2301      	movs	r3, #1
   155d0:	2101      	movs	r1, #1
   155d2:	4c05      	ldr	r4, [pc, #20]	; (155e8 <lsm6dso_mem_bank_set+0x64>)
   155d4:	47a0      	blx	r4
   155d6:	0003      	movs	r3, r0
   155d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155da:	68fb      	ldr	r3, [r7, #12]
}
   155dc:	0018      	movs	r0, r3
   155de:	46bd      	mov	sp, r7
   155e0:	b005      	add	sp, #20
   155e2:	bd90      	pop	{r4, r7, pc}
   155e4:	00014c99 	.word	0x00014c99
   155e8:	00014cdf 	.word	0x00014cdf

000155ec <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   155ec:	b590      	push	{r4, r7, lr}
   155ee:	b085      	sub	sp, #20
   155f0:	af00      	add	r7, sp, #0
   155f2:	6078      	str	r0, [r7, #4]
   155f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   155f6:	683a      	ldr	r2, [r7, #0]
   155f8:	6878      	ldr	r0, [r7, #4]
   155fa:	2301      	movs	r3, #1
   155fc:	210f      	movs	r1, #15
   155fe:	4c04      	ldr	r4, [pc, #16]	; (15610 <lsm6dso_device_id_get+0x24>)
   15600:	47a0      	blx	r4
   15602:	0003      	movs	r3, r0
   15604:	60fb      	str	r3, [r7, #12]

  return ret;
   15606:	68fb      	ldr	r3, [r7, #12]
}
   15608:	0018      	movs	r0, r3
   1560a:	46bd      	mov	sp, r7
   1560c:	b005      	add	sp, #20
   1560e:	bd90      	pop	{r4, r7, pc}
   15610:	00014c99 	.word	0x00014c99

00015614 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15614:	b590      	push	{r4, r7, lr}
   15616:	b085      	sub	sp, #20
   15618:	af00      	add	r7, sp, #0
   1561a:	6078      	str	r0, [r7, #4]
   1561c:	000a      	movs	r2, r1
   1561e:	1cfb      	adds	r3, r7, #3
   15620:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15622:	2308      	movs	r3, #8
   15624:	18fa      	adds	r2, r7, r3
   15626:	6878      	ldr	r0, [r7, #4]
   15628:	2301      	movs	r3, #1
   1562a:	2112      	movs	r1, #18
   1562c:	4c12      	ldr	r4, [pc, #72]	; (15678 <lsm6dso_reset_set+0x64>)
   1562e:	47a0      	blx	r4
   15630:	0003      	movs	r3, r0
   15632:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15634:	68fb      	ldr	r3, [r7, #12]
   15636:	2b00      	cmp	r3, #0
   15638:	d119      	bne.n	1566e <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   1563a:	1cfb      	adds	r3, r7, #3
   1563c:	781b      	ldrb	r3, [r3, #0]
   1563e:	2201      	movs	r2, #1
   15640:	4013      	ands	r3, r2
   15642:	b2da      	uxtb	r2, r3
   15644:	2308      	movs	r3, #8
   15646:	18fb      	adds	r3, r7, r3
   15648:	2101      	movs	r1, #1
   1564a:	400a      	ands	r2, r1
   1564c:	0010      	movs	r0, r2
   1564e:	781a      	ldrb	r2, [r3, #0]
   15650:	2101      	movs	r1, #1
   15652:	438a      	bics	r2, r1
   15654:	1c11      	adds	r1, r2, #0
   15656:	1c02      	adds	r2, r0, #0
   15658:	430a      	orrs	r2, r1
   1565a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1565c:	2308      	movs	r3, #8
   1565e:	18fa      	adds	r2, r7, r3
   15660:	6878      	ldr	r0, [r7, #4]
   15662:	2301      	movs	r3, #1
   15664:	2112      	movs	r1, #18
   15666:	4c05      	ldr	r4, [pc, #20]	; (1567c <lsm6dso_reset_set+0x68>)
   15668:	47a0      	blx	r4
   1566a:	0003      	movs	r3, r0
   1566c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1566e:	68fb      	ldr	r3, [r7, #12]
}
   15670:	0018      	movs	r0, r3
   15672:	46bd      	mov	sp, r7
   15674:	b005      	add	sp, #20
   15676:	bd90      	pop	{r4, r7, pc}
   15678:	00014c99 	.word	0x00014c99
   1567c:	00014cdf 	.word	0x00014cdf

00015680 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15680:	b590      	push	{r4, r7, lr}
   15682:	b085      	sub	sp, #20
   15684:	af00      	add	r7, sp, #0
   15686:	6078      	str	r0, [r7, #4]
   15688:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1568a:	2308      	movs	r3, #8
   1568c:	18fa      	adds	r2, r7, r3
   1568e:	6878      	ldr	r0, [r7, #4]
   15690:	2301      	movs	r3, #1
   15692:	2112      	movs	r1, #18
   15694:	4c08      	ldr	r4, [pc, #32]	; (156b8 <lsm6dso_reset_get+0x38>)
   15696:	47a0      	blx	r4
   15698:	0003      	movs	r3, r0
   1569a:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   1569c:	2308      	movs	r3, #8
   1569e:	18fb      	adds	r3, r7, r3
   156a0:	781b      	ldrb	r3, [r3, #0]
   156a2:	07db      	lsls	r3, r3, #31
   156a4:	0fdb      	lsrs	r3, r3, #31
   156a6:	b2db      	uxtb	r3, r3
   156a8:	001a      	movs	r2, r3
   156aa:	683b      	ldr	r3, [r7, #0]
   156ac:	701a      	strb	r2, [r3, #0]

  return ret;
   156ae:	68fb      	ldr	r3, [r7, #12]
}
   156b0:	0018      	movs	r0, r3
   156b2:	46bd      	mov	sp, r7
   156b4:	b005      	add	sp, #20
   156b6:	bd90      	pop	{r4, r7, pc}
   156b8:	00014c99 	.word	0x00014c99

000156bc <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   156bc:	b590      	push	{r4, r7, lr}
   156be:	b085      	sub	sp, #20
   156c0:	af00      	add	r7, sp, #0
   156c2:	6078      	str	r0, [r7, #4]
   156c4:	000a      	movs	r2, r1
   156c6:	1cfb      	adds	r3, r7, #3
   156c8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   156ca:	2308      	movs	r3, #8
   156cc:	18fa      	adds	r2, r7, r3
   156ce:	6878      	ldr	r0, [r7, #4]
   156d0:	2301      	movs	r3, #1
   156d2:	2110      	movs	r1, #16
   156d4:	4c12      	ldr	r4, [pc, #72]	; (15720 <lsm6dso_xl_filter_lp2_set+0x64>)
   156d6:	47a0      	blx	r4
   156d8:	0003      	movs	r3, r0
   156da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   156dc:	68fb      	ldr	r3, [r7, #12]
   156de:	2b00      	cmp	r3, #0
   156e0:	d119      	bne.n	15716 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   156e2:	1cfb      	adds	r3, r7, #3
   156e4:	781b      	ldrb	r3, [r3, #0]
   156e6:	2201      	movs	r2, #1
   156e8:	4013      	ands	r3, r2
   156ea:	b2da      	uxtb	r2, r3
   156ec:	2308      	movs	r3, #8
   156ee:	18fb      	adds	r3, r7, r3
   156f0:	2101      	movs	r1, #1
   156f2:	400a      	ands	r2, r1
   156f4:	1890      	adds	r0, r2, r2
   156f6:	781a      	ldrb	r2, [r3, #0]
   156f8:	2102      	movs	r1, #2
   156fa:	438a      	bics	r2, r1
   156fc:	1c11      	adds	r1, r2, #0
   156fe:	1c02      	adds	r2, r0, #0
   15700:	430a      	orrs	r2, r1
   15702:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15704:	2308      	movs	r3, #8
   15706:	18fa      	adds	r2, r7, r3
   15708:	6878      	ldr	r0, [r7, #4]
   1570a:	2301      	movs	r3, #1
   1570c:	2110      	movs	r1, #16
   1570e:	4c05      	ldr	r4, [pc, #20]	; (15724 <lsm6dso_xl_filter_lp2_set+0x68>)
   15710:	47a0      	blx	r4
   15712:	0003      	movs	r3, r0
   15714:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15716:	68fb      	ldr	r3, [r7, #12]
}
   15718:	0018      	movs	r0, r3
   1571a:	46bd      	mov	sp, r7
   1571c:	b005      	add	sp, #20
   1571e:	bd90      	pop	{r4, r7, pc}
   15720:	00014c99 	.word	0x00014c99
   15724:	00014cdf 	.word	0x00014cdf

00015728 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15728:	b590      	push	{r4, r7, lr}
   1572a:	b085      	sub	sp, #20
   1572c:	af00      	add	r7, sp, #0
   1572e:	6078      	str	r0, [r7, #4]
   15730:	000a      	movs	r2, r1
   15732:	1cfb      	adds	r3, r7, #3
   15734:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15736:	2308      	movs	r3, #8
   15738:	18fa      	adds	r2, r7, r3
   1573a:	6878      	ldr	r0, [r7, #4]
   1573c:	2301      	movs	r3, #1
   1573e:	2117      	movs	r1, #23
   15740:	4c25      	ldr	r4, [pc, #148]	; (157d8 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15742:	47a0      	blx	r4
   15744:	0003      	movs	r3, r0
   15746:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15748:	68fb      	ldr	r3, [r7, #12]
   1574a:	2b00      	cmp	r3, #0
   1574c:	d13f      	bne.n	157ce <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   1574e:	1cfb      	adds	r3, r7, #3
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	091b      	lsrs	r3, r3, #4
   15754:	b2db      	uxtb	r3, r3
   15756:	1c1a      	adds	r2, r3, #0
   15758:	2301      	movs	r3, #1
   1575a:	4013      	ands	r3, r2
   1575c:	b2da      	uxtb	r2, r3
   1575e:	2308      	movs	r3, #8
   15760:	18fb      	adds	r3, r7, r3
   15762:	2101      	movs	r1, #1
   15764:	400a      	ands	r2, r1
   15766:	0090      	lsls	r0, r2, #2
   15768:	781a      	ldrb	r2, [r3, #0]
   1576a:	2104      	movs	r1, #4
   1576c:	438a      	bics	r2, r1
   1576e:	1c11      	adds	r1, r2, #0
   15770:	1c02      	adds	r2, r0, #0
   15772:	430a      	orrs	r2, r1
   15774:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15776:	1cfb      	adds	r3, r7, #3
   15778:	781b      	ldrb	r3, [r3, #0]
   1577a:	095b      	lsrs	r3, r3, #5
   1577c:	b2db      	uxtb	r3, r3
   1577e:	1c1a      	adds	r2, r3, #0
   15780:	2301      	movs	r3, #1
   15782:	4013      	ands	r3, r2
   15784:	b2da      	uxtb	r2, r3
   15786:	2308      	movs	r3, #8
   15788:	18fb      	adds	r3, r7, r3
   1578a:	2101      	movs	r1, #1
   1578c:	400a      	ands	r2, r1
   1578e:	0110      	lsls	r0, r2, #4
   15790:	781a      	ldrb	r2, [r3, #0]
   15792:	2110      	movs	r1, #16
   15794:	438a      	bics	r2, r1
   15796:	1c11      	adds	r1, r2, #0
   15798:	1c02      	adds	r2, r0, #0
   1579a:	430a      	orrs	r2, r1
   1579c:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   1579e:	1cfb      	adds	r3, r7, #3
   157a0:	781b      	ldrb	r3, [r3, #0]
   157a2:	2207      	movs	r2, #7
   157a4:	4013      	ands	r3, r2
   157a6:	b2da      	uxtb	r2, r3
   157a8:	2308      	movs	r3, #8
   157aa:	18fb      	adds	r3, r7, r3
   157ac:	0150      	lsls	r0, r2, #5
   157ae:	781a      	ldrb	r2, [r3, #0]
   157b0:	211f      	movs	r1, #31
   157b2:	400a      	ands	r2, r1
   157b4:	1c11      	adds	r1, r2, #0
   157b6:	1c02      	adds	r2, r0, #0
   157b8:	430a      	orrs	r2, r1
   157ba:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   157bc:	2308      	movs	r3, #8
   157be:	18fa      	adds	r2, r7, r3
   157c0:	6878      	ldr	r0, [r7, #4]
   157c2:	2301      	movs	r3, #1
   157c4:	2117      	movs	r1, #23
   157c6:	4c05      	ldr	r4, [pc, #20]	; (157dc <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   157c8:	47a0      	blx	r4
   157ca:	0003      	movs	r3, r0
   157cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   157ce:	68fb      	ldr	r3, [r7, #12]
}
   157d0:	0018      	movs	r0, r3
   157d2:	46bd      	mov	sp, r7
   157d4:	b005      	add	sp, #20
   157d6:	bd90      	pop	{r4, r7, pc}
   157d8:	00014c99 	.word	0x00014c99
   157dc:	00014cdf 	.word	0x00014cdf

000157e0 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   157e0:	b590      	push	{r4, r7, lr}
   157e2:	b087      	sub	sp, #28
   157e4:	af00      	add	r7, sp, #0
   157e6:	6078      	str	r0, [r7, #4]
   157e8:	000a      	movs	r2, r1
   157ea:	1cfb      	adds	r3, r7, #3
   157ec:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   157ee:	230c      	movs	r3, #12
   157f0:	18fa      	adds	r2, r7, r3
   157f2:	6878      	ldr	r0, [r7, #4]
   157f4:	2301      	movs	r3, #1
   157f6:	2118      	movs	r1, #24
   157f8:	4c28      	ldr	r4, [pc, #160]	; (1589c <lsm6dso_i3c_disable_set+0xbc>)
   157fa:	47a0      	blx	r4
   157fc:	0003      	movs	r3, r0
   157fe:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15800:	697b      	ldr	r3, [r7, #20]
   15802:	2b00      	cmp	r3, #0
   15804:	d11c      	bne.n	15840 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15806:	1cfb      	adds	r3, r7, #3
   15808:	781b      	ldrb	r3, [r3, #0]
   1580a:	09db      	lsrs	r3, r3, #7
   1580c:	b2db      	uxtb	r3, r3
   1580e:	1c1a      	adds	r2, r3, #0
   15810:	2301      	movs	r3, #1
   15812:	4013      	ands	r3, r2
   15814:	b2da      	uxtb	r2, r3
   15816:	230c      	movs	r3, #12
   15818:	18fb      	adds	r3, r7, r3
   1581a:	2101      	movs	r1, #1
   1581c:	400a      	ands	r2, r1
   1581e:	1890      	adds	r0, r2, r2
   15820:	781a      	ldrb	r2, [r3, #0]
   15822:	2102      	movs	r1, #2
   15824:	438a      	bics	r2, r1
   15826:	1c11      	adds	r1, r2, #0
   15828:	1c02      	adds	r2, r0, #0
   1582a:	430a      	orrs	r2, r1
   1582c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   1582e:	230c      	movs	r3, #12
   15830:	18fa      	adds	r2, r7, r3
   15832:	6878      	ldr	r0, [r7, #4]
   15834:	2301      	movs	r3, #1
   15836:	2118      	movs	r1, #24
   15838:	4c19      	ldr	r4, [pc, #100]	; (158a0 <lsm6dso_i3c_disable_set+0xc0>)
   1583a:	47a0      	blx	r4
   1583c:	0003      	movs	r3, r0
   1583e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15840:	697b      	ldr	r3, [r7, #20]
   15842:	2b00      	cmp	r3, #0
   15844:	d108      	bne.n	15858 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15846:	2310      	movs	r3, #16
   15848:	18fa      	adds	r2, r7, r3
   1584a:	6878      	ldr	r0, [r7, #4]
   1584c:	2301      	movs	r3, #1
   1584e:	2162      	movs	r1, #98	; 0x62
   15850:	4c12      	ldr	r4, [pc, #72]	; (1589c <lsm6dso_i3c_disable_set+0xbc>)
   15852:	47a0      	blx	r4
   15854:	0003      	movs	r3, r0
   15856:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15858:	697b      	ldr	r3, [r7, #20]
   1585a:	2b00      	cmp	r3, #0
   1585c:	d119      	bne.n	15892 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   1585e:	1cfb      	adds	r3, r7, #3
   15860:	781b      	ldrb	r3, [r3, #0]
   15862:	2203      	movs	r2, #3
   15864:	4013      	ands	r3, r2
   15866:	b2da      	uxtb	r2, r3
   15868:	2310      	movs	r3, #16
   1586a:	18fb      	adds	r3, r7, r3
   1586c:	2103      	movs	r1, #3
   1586e:	400a      	ands	r2, r1
   15870:	00d0      	lsls	r0, r2, #3
   15872:	781a      	ldrb	r2, [r3, #0]
   15874:	2118      	movs	r1, #24
   15876:	438a      	bics	r2, r1
   15878:	1c11      	adds	r1, r2, #0
   1587a:	1c02      	adds	r2, r0, #0
   1587c:	430a      	orrs	r2, r1
   1587e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15880:	2310      	movs	r3, #16
   15882:	18fa      	adds	r2, r7, r3
   15884:	6878      	ldr	r0, [r7, #4]
   15886:	2301      	movs	r3, #1
   15888:	2162      	movs	r1, #98	; 0x62
   1588a:	4c05      	ldr	r4, [pc, #20]	; (158a0 <lsm6dso_i3c_disable_set+0xc0>)
   1588c:	47a0      	blx	r4
   1588e:	0003      	movs	r3, r0
   15890:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15892:	697b      	ldr	r3, [r7, #20]
}
   15894:	0018      	movs	r0, r3
   15896:	46bd      	mov	sp, r7
   15898:	b007      	add	sp, #28
   1589a:	bd90      	pop	{r4, r7, pc}
   1589c:	00014c99 	.word	0x00014c99
   158a0:	00014cdf 	.word	0x00014cdf

000158a4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   158a4:	b590      	push	{r4, r7, lr}
   158a6:	b085      	sub	sp, #20
   158a8:	af00      	add	r7, sp, #0
   158aa:	6078      	str	r0, [r7, #4]
   158ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   158ae:	687b      	ldr	r3, [r7, #4]
   158b0:	2102      	movs	r1, #2
   158b2:	0018      	movs	r0, r3
   158b4:	4b0e      	ldr	r3, [pc, #56]	; (158f0 <lsm6dso_fsm_enable_get+0x4c>)
   158b6:	4798      	blx	r3
   158b8:	0003      	movs	r3, r0
   158ba:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158bc:	68fb      	ldr	r3, [r7, #12]
   158be:	2b00      	cmp	r3, #0
   158c0:	d107      	bne.n	158d2 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   158c2:	683a      	ldr	r2, [r7, #0]
   158c4:	6878      	ldr	r0, [r7, #4]
   158c6:	2302      	movs	r3, #2
   158c8:	2146      	movs	r1, #70	; 0x46
   158ca:	4c0a      	ldr	r4, [pc, #40]	; (158f4 <lsm6dso_fsm_enable_get+0x50>)
   158cc:	47a0      	blx	r4
   158ce:	0003      	movs	r3, r0
   158d0:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   158d2:	68fb      	ldr	r3, [r7, #12]
   158d4:	2b00      	cmp	r3, #0
   158d6:	d106      	bne.n	158e6 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   158d8:	687b      	ldr	r3, [r7, #4]
   158da:	2100      	movs	r1, #0
   158dc:	0018      	movs	r0, r3
   158de:	4b04      	ldr	r3, [pc, #16]	; (158f0 <lsm6dso_fsm_enable_get+0x4c>)
   158e0:	4798      	blx	r3
   158e2:	0003      	movs	r3, r0
   158e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   158e6:	68fb      	ldr	r3, [r7, #12]
}
   158e8:	0018      	movs	r0, r3
   158ea:	46bd      	mov	sp, r7
   158ec:	b005      	add	sp, #20
   158ee:	bd90      	pop	{r4, r7, pc}
   158f0:	00015585 	.word	0x00015585
   158f4:	00014c99 	.word	0x00014c99

000158f8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   158f8:	b590      	push	{r4, r7, lr}
   158fa:	b085      	sub	sp, #20
   158fc:	af00      	add	r7, sp, #0
   158fe:	6078      	str	r0, [r7, #4]
   15900:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15902:	687b      	ldr	r3, [r7, #4]
   15904:	2102      	movs	r1, #2
   15906:	0018      	movs	r0, r3
   15908:	4b21      	ldr	r3, [pc, #132]	; (15990 <lsm6dso_fsm_data_rate_get+0x98>)
   1590a:	4798      	blx	r3
   1590c:	0003      	movs	r3, r0
   1590e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15910:	68fb      	ldr	r3, [r7, #12]
   15912:	2b00      	cmp	r3, #0
   15914:	d108      	bne.n	15928 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15916:	2308      	movs	r3, #8
   15918:	18fa      	adds	r2, r7, r3
   1591a:	6878      	ldr	r0, [r7, #4]
   1591c:	2301      	movs	r3, #1
   1591e:	215f      	movs	r1, #95	; 0x5f
   15920:	4c1c      	ldr	r4, [pc, #112]	; (15994 <lsm6dso_fsm_data_rate_get+0x9c>)
   15922:	47a0      	blx	r4
   15924:	0003      	movs	r3, r0
   15926:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15928:	68fb      	ldr	r3, [r7, #12]
   1592a:	2b00      	cmp	r3, #0
   1592c:	d12b      	bne.n	15986 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   1592e:	2308      	movs	r3, #8
   15930:	18fb      	adds	r3, r7, r3
   15932:	781b      	ldrb	r3, [r3, #0]
   15934:	06db      	lsls	r3, r3, #27
   15936:	0f9b      	lsrs	r3, r3, #30
   15938:	b2db      	uxtb	r3, r3
   1593a:	2b01      	cmp	r3, #1
   1593c:	d00c      	beq.n	15958 <lsm6dso_fsm_data_rate_get+0x60>
   1593e:	dc02      	bgt.n	15946 <lsm6dso_fsm_data_rate_get+0x4e>
   15940:	2b00      	cmp	r3, #0
   15942:	d005      	beq.n	15950 <lsm6dso_fsm_data_rate_get+0x58>
   15944:	e014      	b.n	15970 <lsm6dso_fsm_data_rate_get+0x78>
   15946:	2b02      	cmp	r3, #2
   15948:	d00a      	beq.n	15960 <lsm6dso_fsm_data_rate_get+0x68>
   1594a:	2b03      	cmp	r3, #3
   1594c:	d00c      	beq.n	15968 <lsm6dso_fsm_data_rate_get+0x70>
   1594e:	e00f      	b.n	15970 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15950:	683b      	ldr	r3, [r7, #0]
   15952:	2200      	movs	r2, #0
   15954:	701a      	strb	r2, [r3, #0]
        break;
   15956:	e00f      	b.n	15978 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15958:	683b      	ldr	r3, [r7, #0]
   1595a:	2201      	movs	r2, #1
   1595c:	701a      	strb	r2, [r3, #0]
        break;
   1595e:	e00b      	b.n	15978 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15960:	683b      	ldr	r3, [r7, #0]
   15962:	2202      	movs	r2, #2
   15964:	701a      	strb	r2, [r3, #0]
        break;
   15966:	e007      	b.n	15978 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15968:	683b      	ldr	r3, [r7, #0]
   1596a:	2203      	movs	r2, #3
   1596c:	701a      	strb	r2, [r3, #0]
        break;
   1596e:	e003      	b.n	15978 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15970:	683b      	ldr	r3, [r7, #0]
   15972:	2200      	movs	r2, #0
   15974:	701a      	strb	r2, [r3, #0]
        break;
   15976:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15978:	687b      	ldr	r3, [r7, #4]
   1597a:	2100      	movs	r1, #0
   1597c:	0018      	movs	r0, r3
   1597e:	4b04      	ldr	r3, [pc, #16]	; (15990 <lsm6dso_fsm_data_rate_get+0x98>)
   15980:	4798      	blx	r3
   15982:	0003      	movs	r3, r0
   15984:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15986:	68fb      	ldr	r3, [r7, #12]
}
   15988:	0018      	movs	r0, r3
   1598a:	46bd      	mov	sp, r7
   1598c:	b005      	add	sp, #20
   1598e:	bd90      	pop	{r4, r7, pc}
   15990:	00015585 	.word	0x00015585
   15994:	00014c99 	.word	0x00014c99

00015998 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15998:	b580      	push	{r7, lr}
   1599a:	b084      	sub	sp, #16
   1599c:	af00      	add	r7, sp, #0
   1599e:	60f8      	str	r0, [r7, #12]
   159a0:	0008      	movs	r0, r1
   159a2:	607a      	str	r2, [r7, #4]
   159a4:	0019      	movs	r1, r3
   159a6:	230b      	movs	r3, #11
   159a8:	18fb      	adds	r3, r7, r3
   159aa:	1c02      	adds	r2, r0, #0
   159ac:	701a      	strb	r2, [r3, #0]
   159ae:	2308      	movs	r3, #8
   159b0:	18fb      	adds	r3, r7, r3
   159b2:	1c0a      	adds	r2, r1, #0
   159b4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   159b6:	2300      	movs	r3, #0

}
   159b8:	0018      	movs	r0, r3
   159ba:	46bd      	mov	sp, r7
   159bc:	b004      	add	sp, #16
   159be:	bd80      	pop	{r7, pc}

000159c0 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   159c0:	b580      	push	{r7, lr}
   159c2:	b084      	sub	sp, #16
   159c4:	af00      	add	r7, sp, #0
   159c6:	60f8      	str	r0, [r7, #12]
   159c8:	0008      	movs	r0, r1
   159ca:	607a      	str	r2, [r7, #4]
   159cc:	0019      	movs	r1, r3
   159ce:	230b      	movs	r3, #11
   159d0:	18fb      	adds	r3, r7, r3
   159d2:	1c02      	adds	r2, r0, #0
   159d4:	701a      	strb	r2, [r3, #0]
   159d6:	2308      	movs	r3, #8
   159d8:	18fb      	adds	r3, r7, r3
   159da:	1c0a      	adds	r2, r1, #0
   159dc:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   159de:	2300      	movs	r3, #0


}
   159e0:	0018      	movs	r0, r3
   159e2:	46bd      	mov	sp, r7
   159e4:	b004      	add	sp, #16
   159e6:	bd80      	pop	{r7, pc}

000159e8 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   159e8:	b580      	push	{r7, lr}
   159ea:	af00      	add	r7, sp, #0
return &dev_ctx;
   159ec:	4b01      	ldr	r3, [pc, #4]	; (159f4 <GetImuStruct+0xc>)
}
   159ee:	0018      	movs	r0, r3
   159f0:	46bd      	mov	sp, r7
   159f2:	bd80      	pop	{r7, pc}
   159f4:	20000020 	.word	0x20000020

000159f8 <InitImu>:



int32_t InitImu(void)
{
   159f8:	b580      	push	{r7, lr}
   159fa:	b082      	sub	sp, #8
   159fc:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   159fe:	2300      	movs	r3, #0
   15a00:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15a02:	4b23      	ldr	r3, [pc, #140]	; (15a90 <InitImu+0x98>)
   15a04:	2101      	movs	r1, #1
   15a06:	0018      	movs	r0, r3
   15a08:	4b22      	ldr	r3, [pc, #136]	; (15a94 <InitImu+0x9c>)
   15a0a:	4798      	blx	r3
   15a0c:	0003      	movs	r3, r0
   15a0e:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15a10:	1cfa      	adds	r2, r7, #3
   15a12:	4b1f      	ldr	r3, [pc, #124]	; (15a90 <InitImu+0x98>)
   15a14:	0011      	movs	r1, r2
   15a16:	0018      	movs	r0, r3
   15a18:	4b1f      	ldr	r3, [pc, #124]	; (15a98 <InitImu+0xa0>)
   15a1a:	4798      	blx	r3
   15a1c:	0002      	movs	r2, r0
   15a1e:	687b      	ldr	r3, [r7, #4]
   15a20:	4313      	orrs	r3, r2
   15a22:	607b      	str	r3, [r7, #4]
  } while (rst);
   15a24:	1cfb      	adds	r3, r7, #3
   15a26:	781b      	ldrb	r3, [r3, #0]
   15a28:	2b00      	cmp	r3, #0
   15a2a:	d1f1      	bne.n	15a10 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15a2c:	4b18      	ldr	r3, [pc, #96]	; (15a90 <InitImu+0x98>)
   15a2e:	2180      	movs	r1, #128	; 0x80
   15a30:	0018      	movs	r0, r3
   15a32:	4b1a      	ldr	r3, [pc, #104]	; (15a9c <InitImu+0xa4>)
   15a34:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15a36:	4b16      	ldr	r3, [pc, #88]	; (15a90 <InitImu+0x98>)
   15a38:	2101      	movs	r1, #1
   15a3a:	0018      	movs	r0, r3
   15a3c:	4b18      	ldr	r3, [pc, #96]	; (15aa0 <InitImu+0xa8>)
   15a3e:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15a40:	4b13      	ldr	r3, [pc, #76]	; (15a90 <InitImu+0x98>)
   15a42:	2100      	movs	r1, #0
   15a44:	0018      	movs	r0, r3
   15a46:	4b17      	ldr	r3, [pc, #92]	; (15aa4 <InitImu+0xac>)
   15a48:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15a4a:	4b11      	ldr	r3, [pc, #68]	; (15a90 <InitImu+0x98>)
   15a4c:	2101      	movs	r1, #1
   15a4e:	0018      	movs	r0, r3
   15a50:	4b15      	ldr	r3, [pc, #84]	; (15aa8 <InitImu+0xb0>)
   15a52:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15a54:	4b0e      	ldr	r3, [pc, #56]	; (15a90 <InitImu+0x98>)
   15a56:	2101      	movs	r1, #1
   15a58:	0018      	movs	r0, r3
   15a5a:	4b14      	ldr	r3, [pc, #80]	; (15aac <InitImu+0xb4>)
   15a5c:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15a5e:	4b0c      	ldr	r3, [pc, #48]	; (15a90 <InitImu+0x98>)
   15a60:	2100      	movs	r1, #0
   15a62:	0018      	movs	r0, r3
   15a64:	4b12      	ldr	r3, [pc, #72]	; (15ab0 <InitImu+0xb8>)
   15a66:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15a68:	4b09      	ldr	r3, [pc, #36]	; (15a90 <InitImu+0x98>)
   15a6a:	2106      	movs	r1, #6
   15a6c:	0018      	movs	r0, r3
   15a6e:	4b11      	ldr	r3, [pc, #68]	; (15ab4 <InitImu+0xbc>)
   15a70:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15a72:	4b07      	ldr	r3, [pc, #28]	; (15a90 <InitImu+0x98>)
   15a74:	2104      	movs	r1, #4
   15a76:	0018      	movs	r0, r3
   15a78:	4b0f      	ldr	r3, [pc, #60]	; (15ab8 <InitImu+0xc0>)
   15a7a:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15a7c:	4b04      	ldr	r3, [pc, #16]	; (15a90 <InitImu+0x98>)
   15a7e:	2101      	movs	r1, #1
   15a80:	0018      	movs	r0, r3
   15a82:	4b0e      	ldr	r3, [pc, #56]	; (15abc <InitImu+0xc4>)
   15a84:	4798      	blx	r3

  return error;
   15a86:	687b      	ldr	r3, [r7, #4]
}
   15a88:	0018      	movs	r0, r3
   15a8a:	46bd      	mov	sp, r7
   15a8c:	b002      	add	sp, #8
   15a8e:	bd80      	pop	{r7, pc}
   15a90:	20000020 	.word	0x20000020
   15a94:	00015615 	.word	0x00015615
   15a98:	00015681 	.word	0x00015681
   15a9c:	000157e1 	.word	0x000157e1
   15aa0:	000153bd 	.word	0x000153bd
   15aa4:	00015429 	.word	0x00015429
   15aa8:	00014dc9 	.word	0x00014dc9
   15aac:	000150f9 	.word	0x000150f9
   15ab0:	00014d5d 	.word	0x00014d5d
   15ab4:	0001508d 	.word	0x0001508d
   15ab8:	00015729 	.word	0x00015729
   15abc:	000156bd 	.word	0x000156bd

00015ac0 <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15ac0:	b580      	push	{r7, lr}
   15ac2:	b096      	sub	sp, #88	; 0x58
   15ac4:	af00      	add	r7, sp, #0
   15ac6:	60f8      	str	r0, [r7, #12]
   15ac8:	0008      	movs	r0, r1
   15aca:	607a      	str	r2, [r7, #4]
   15acc:	0019      	movs	r1, r3
   15ace:	230b      	movs	r3, #11
   15ad0:	18fb      	adds	r3, r7, r3
   15ad2:	1c02      	adds	r2, r0, #0
   15ad4:	701a      	strb	r2, [r3, #0]
   15ad6:	2308      	movs	r3, #8
   15ad8:	18fb      	adds	r3, r7, r3
   15ada:	1c0a      	adds	r2, r1, #0
   15adc:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   15ade:	2300      	movs	r3, #0
   15ae0:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   15ae2:	4b19      	ldr	r3, [pc, #100]	; (15b48 <reg_write+0x88>)
   15ae4:	220b      	movs	r2, #11
   15ae6:	18ba      	adds	r2, r7, r2
   15ae8:	7812      	ldrb	r2, [r2, #0]
   15aea:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   15aec:	2300      	movs	r3, #0
   15aee:	657b      	str	r3, [r7, #84]	; 0x54
   15af0:	e00a      	b.n	15b08 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   15af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15af4:	3301      	adds	r3, #1
   15af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15af8:	6879      	ldr	r1, [r7, #4]
   15afa:	188a      	adds	r2, r1, r2
   15afc:	7811      	ldrb	r1, [r2, #0]
   15afe:	4a12      	ldr	r2, [pc, #72]	; (15b48 <reg_write+0x88>)
   15b00:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   15b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15b04:	3301      	adds	r3, #1
   15b06:	657b      	str	r3, [r7, #84]	; 0x54
   15b08:	2308      	movs	r3, #8
   15b0a:	18fb      	adds	r3, r7, r3
   15b0c:	881a      	ldrh	r2, [r3, #0]
   15b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15b10:	429a      	cmp	r2, r3
   15b12:	dcee      	bgt.n	15af2 <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15b14:	4b0d      	ldr	r3, [pc, #52]	; (15b4c <reg_write+0x8c>)
   15b16:	222a      	movs	r2, #42	; 0x2a
   15b18:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   15b1a:	4b0c      	ldr	r3, [pc, #48]	; (15b4c <reg_write+0x8c>)
   15b1c:	4a0a      	ldr	r2, [pc, #40]	; (15b48 <reg_write+0x88>)
   15b1e:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   15b20:	2308      	movs	r3, #8
   15b22:	18fb      	adds	r3, r7, r3
   15b24:	881b      	ldrh	r3, [r3, #0]
   15b26:	3301      	adds	r3, #1
   15b28:	b29a      	uxth	r2, r3
   15b2a:	4b08      	ldr	r3, [pc, #32]	; (15b4c <reg_write+0x8c>)
   15b2c:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   15b2e:	4b07      	ldr	r3, [pc, #28]	; (15b4c <reg_write+0x8c>)
   15b30:	2164      	movs	r1, #100	; 0x64
   15b32:	0018      	movs	r0, r3
   15b34:	4b06      	ldr	r3, [pc, #24]	; (15b50 <reg_write+0x90>)
   15b36:	4798      	blx	r3
   15b38:	0003      	movs	r3, r0
   15b3a:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   15b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   15b3e:	0018      	movs	r0, r3
   15b40:	46bd      	mov	sp, r7
   15b42:	b016      	add	sp, #88	; 0x58
   15b44:	bd80      	pop	{r7, pc}
   15b46:	46c0      	nop			; (mov r8, r8)
   15b48:	20004868 	.word	0x20004868
   15b4c:	200048a8 	.word	0x200048a8
   15b50:	00014aad 	.word	0x00014aad

00015b54 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15b54:	b580      	push	{r7, lr}
   15b56:	b096      	sub	sp, #88	; 0x58
   15b58:	af00      	add	r7, sp, #0
   15b5a:	60f8      	str	r0, [r7, #12]
   15b5c:	0008      	movs	r0, r1
   15b5e:	607a      	str	r2, [r7, #4]
   15b60:	0019      	movs	r1, r3
   15b62:	230b      	movs	r3, #11
   15b64:	18fb      	adds	r3, r7, r3
   15b66:	1c02      	adds	r2, r0, #0
   15b68:	701a      	strb	r2, [r3, #0]
   15b6a:	2308      	movs	r3, #8
   15b6c:	18fb      	adds	r3, r7, r3
   15b6e:	1c0a      	adds	r2, r1, #0
   15b70:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   15b72:	2300      	movs	r3, #0
   15b74:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   15b76:	4b13      	ldr	r3, [pc, #76]	; (15bc4 <reg_read+0x70>)
   15b78:	222a      	movs	r2, #42	; 0x2a
   15b7a:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   15b7c:	4b11      	ldr	r3, [pc, #68]	; (15bc4 <reg_read+0x70>)
   15b7e:	2208      	movs	r2, #8
   15b80:	18ba      	adds	r2, r7, r2
   15b82:	8812      	ldrh	r2, [r2, #0]
   15b84:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   15b86:	4b0f      	ldr	r3, [pc, #60]	; (15bc4 <reg_read+0x70>)
   15b88:	687a      	ldr	r2, [r7, #4]
   15b8a:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   15b8c:	4b0e      	ldr	r3, [pc, #56]	; (15bc8 <reg_read+0x74>)
   15b8e:	220b      	movs	r2, #11
   15b90:	18ba      	adds	r2, r7, r2
   15b92:	7812      	ldrb	r2, [r2, #0]
   15b94:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   15b96:	4b0c      	ldr	r3, [pc, #48]	; (15bc8 <reg_read+0x74>)
   15b98:	2200      	movs	r2, #0
   15b9a:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   15b9c:	4b09      	ldr	r3, [pc, #36]	; (15bc4 <reg_read+0x70>)
   15b9e:	4a0a      	ldr	r2, [pc, #40]	; (15bc8 <reg_read+0x74>)
   15ba0:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   15ba2:	4b08      	ldr	r3, [pc, #32]	; (15bc4 <reg_read+0x70>)
   15ba4:	2201      	movs	r2, #1
   15ba6:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   15ba8:	4b06      	ldr	r3, [pc, #24]	; (15bc4 <reg_read+0x70>)
   15baa:	2264      	movs	r2, #100	; 0x64
   15bac:	2105      	movs	r1, #5
   15bae:	0018      	movs	r0, r3
   15bb0:	4b06      	ldr	r3, [pc, #24]	; (15bcc <reg_read+0x78>)
   15bb2:	4798      	blx	r3
   15bb4:	0003      	movs	r3, r0
   15bb6:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   15bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   15bba:	0018      	movs	r0, r3
   15bbc:	46bd      	mov	sp, r7
   15bbe:	b016      	add	sp, #88	; 0x58
   15bc0:	bd80      	pop	{r7, pc}
   15bc2:	46c0      	nop			; (mov r8, r8)
   15bc4:	200048a8 	.word	0x200048a8
   15bc8:	20004868 	.word	0x20004868
   15bcc:	00014b85 	.word	0x00014b85

00015bd0 <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   15bd0:	b590      	push	{r4, r7, lr}
   15bd2:	b085      	sub	sp, #20
   15bd4:	af00      	add	r7, sp, #0
   15bd6:	0002      	movs	r2, r0
   15bd8:	1dfb      	adds	r3, r7, #7
   15bda:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   15bdc:	4b07      	ldr	r3, [pc, #28]	; (15bfc <ADC_ReadReg+0x2c>)
   15bde:	6818      	ldr	r0, [r3, #0]
   15be0:	4a07      	ldr	r2, [pc, #28]	; (15c00 <ADC_ReadReg+0x30>)
   15be2:	1dfb      	adds	r3, r7, #7
   15be4:	7819      	ldrb	r1, [r3, #0]
   15be6:	2301      	movs	r3, #1
   15be8:	4c06      	ldr	r4, [pc, #24]	; (15c04 <ADC_ReadReg+0x34>)
   15bea:	47a0      	blx	r4
   15bec:	0003      	movs	r3, r0
   15bee:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   15bf0:	4b03      	ldr	r3, [pc, #12]	; (15c00 <ADC_ReadReg+0x30>)
   15bf2:	781b      	ldrb	r3, [r3, #0]
	
}
   15bf4:	0018      	movs	r0, r3
   15bf6:	46bd      	mov	sp, r7
   15bf8:	b005      	add	sp, #20
   15bfa:	bd90      	pop	{r4, r7, pc}
   15bfc:	20004864 	.word	0x20004864
   15c00:	20000620 	.word	0x20000620
   15c04:	00015b55 	.word	0x00015b55

00015c08 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   15c08:	b590      	push	{r4, r7, lr}
   15c0a:	b085      	sub	sp, #20
   15c0c:	af00      	add	r7, sp, #0
   15c0e:	0002      	movs	r2, r0
   15c10:	1dfb      	adds	r3, r7, #7
   15c12:	701a      	strb	r2, [r3, #0]
   15c14:	1dbb      	adds	r3, r7, #6
   15c16:	1c0a      	adds	r2, r1, #0
   15c18:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   15c1a:	4b08      	ldr	r3, [pc, #32]	; (15c3c <ADC_WriteReg+0x34>)
   15c1c:	6818      	ldr	r0, [r3, #0]
   15c1e:	1dba      	adds	r2, r7, #6
   15c20:	1dfb      	adds	r3, r7, #7
   15c22:	7819      	ldrb	r1, [r3, #0]
   15c24:	2301      	movs	r3, #1
   15c26:	4c06      	ldr	r4, [pc, #24]	; (15c40 <ADC_WriteReg+0x38>)
   15c28:	47a0      	blx	r4
   15c2a:	0003      	movs	r3, r0
   15c2c:	60fb      	str	r3, [r7, #12]
	return err;
   15c2e:	68fb      	ldr	r3, [r7, #12]
   15c30:	b2db      	uxtb	r3, r3
}
   15c32:	0018      	movs	r0, r3
   15c34:	46bd      	mov	sp, r7
   15c36:	b005      	add	sp, #20
   15c38:	bd90      	pop	{r4, r7, pc}
   15c3a:	46c0      	nop			; (mov r8, r8)
   15c3c:	20004864 	.word	0x20004864
   15c40:	00015ac1 	.word	0x00015ac1

00015c44 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   15c44:	b590      	push	{r4, r7, lr}
   15c46:	b083      	sub	sp, #12
   15c48:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15c4a:	1dfb      	adds	r3, r7, #7
   15c4c:	2200      	movs	r2, #0
   15c4e:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   15c50:	1dfc      	adds	r4, r7, #7
   15c52:	2002      	movs	r0, #2
   15c54:	4b21      	ldr	r3, [pc, #132]	; (15cdc <ADC_Calibration+0x98>)
   15c56:	4798      	blx	r3
   15c58:	0003      	movs	r3, r0
   15c5a:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   15c5c:	1dfb      	adds	r3, r7, #7
   15c5e:	1dfa      	adds	r2, r7, #7
   15c60:	7812      	ldrb	r2, [r2, #0]
   15c62:	2107      	movs	r1, #7
   15c64:	438a      	bics	r2, r1
   15c66:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   15c68:	1dfb      	adds	r3, r7, #7
   15c6a:	1dfa      	adds	r2, r7, #7
   15c6c:	7812      	ldrb	r2, [r2, #0]
   15c6e:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15c70:	1dfb      	adds	r3, r7, #7
   15c72:	781b      	ldrb	r3, [r3, #0]
   15c74:	0019      	movs	r1, r3
   15c76:	2002      	movs	r0, #2
   15c78:	4b19      	ldr	r3, [pc, #100]	; (15ce0 <ADC_Calibration+0x9c>)
   15c7a:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   15c7c:	1dfb      	adds	r3, r7, #7
   15c7e:	1dfa      	adds	r2, r7, #7
   15c80:	7812      	ldrb	r2, [r2, #0]
   15c82:	2104      	movs	r1, #4
   15c84:	430a      	orrs	r2, r1
   15c86:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   15c88:	1dfb      	adds	r3, r7, #7
   15c8a:	781b      	ldrb	r3, [r3, #0]
   15c8c:	0019      	movs	r1, r3
   15c8e:	2002      	movs	r0, #2
   15c90:	4b13      	ldr	r3, [pc, #76]	; (15ce0 <ADC_Calibration+0x9c>)
   15c92:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   15c94:	2032      	movs	r0, #50	; 0x32
   15c96:	4b13      	ldr	r3, [pc, #76]	; (15ce4 <ADC_Calibration+0xa0>)
   15c98:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   15c9a:	1dfc      	adds	r4, r7, #7
   15c9c:	2002      	movs	r0, #2
   15c9e:	4b0f      	ldr	r3, [pc, #60]	; (15cdc <ADC_Calibration+0x98>)
   15ca0:	4798      	blx	r3
   15ca2:	0003      	movs	r3, r0
   15ca4:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   15ca6:	1dfb      	adds	r3, r7, #7
   15ca8:	781b      	ldrb	r3, [r3, #0]
   15caa:	2204      	movs	r2, #4
   15cac:	4013      	ands	r3, r2
   15cae:	d000      	beq.n	15cb2 <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   15cb0:	e7f0      	b.n	15c94 <ADC_Calibration+0x50>
			break;
   15cb2:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   15cb4:	1dfb      	adds	r3, r7, #7
   15cb6:	1dfa      	adds	r2, r7, #7
   15cb8:	7812      	ldrb	r2, [r2, #0]
   15cba:	2108      	movs	r1, #8
   15cbc:	400a      	ands	r2, r1
   15cbe:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   15cc0:	1dfb      	adds	r3, r7, #7
   15cc2:	781b      	ldrb	r3, [r3, #0]
   15cc4:	2208      	movs	r2, #8
   15cc6:	4013      	ands	r3, r2
   15cc8:	d000      	beq.n	15ccc <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   15cca:	e7c1      	b.n	15c50 <ADC_Calibration+0xc>
		break;
   15ccc:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   15cce:	2001      	movs	r0, #1
   15cd0:	4b04      	ldr	r3, [pc, #16]	; (15ce4 <ADC_Calibration+0xa0>)
   15cd2:	4798      	blx	r3

}
   15cd4:	46c0      	nop			; (mov r8, r8)
   15cd6:	46bd      	mov	sp, r7
   15cd8:	b003      	add	sp, #12
   15cda:	bd90      	pop	{r4, r7, pc}
   15cdc:	00015bd1 	.word	0x00015bd1
   15ce0:	00015c09 	.word	0x00015c09
   15ce4:	00020ccd 	.word	0x00020ccd

00015ce8 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   15ce8:	b580      	push	{r7, lr}
   15cea:	b082      	sub	sp, #8
   15cec:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15cee:	1dfb      	adds	r3, r7, #7
   15cf0:	2200      	movs	r2, #0
   15cf2:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   15cf4:	1dfb      	adds	r3, r7, #7
   15cf6:	2201      	movs	r2, #1
   15cf8:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15cfa:	1dfb      	adds	r3, r7, #7
   15cfc:	781b      	ldrb	r3, [r3, #0]
   15cfe:	0019      	movs	r1, r3
   15d00:	2000      	movs	r0, #0
   15d02:	4b1d      	ldr	r3, [pc, #116]	; (15d78 <ADCchip_Init+0x90>)
   15d04:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   15d06:	2001      	movs	r0, #1
   15d08:	4b1c      	ldr	r3, [pc, #112]	; (15d7c <ADCchip_Init+0x94>)
   15d0a:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   15d0c:	1dfb      	adds	r3, r7, #7
   15d0e:	2202      	movs	r2, #2
   15d10:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d12:	1dfb      	adds	r3, r7, #7
   15d14:	781b      	ldrb	r3, [r3, #0]
   15d16:	0019      	movs	r1, r3
   15d18:	2000      	movs	r0, #0
   15d1a:	4b17      	ldr	r3, [pc, #92]	; (15d78 <ADCchip_Init+0x90>)
   15d1c:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   15d1e:	2032      	movs	r0, #50	; 0x32
   15d20:	4b16      	ldr	r3, [pc, #88]	; (15d7c <ADCchip_Init+0x94>)
   15d22:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   15d24:	1dfb      	adds	r3, r7, #7
   15d26:	2227      	movs	r2, #39	; 0x27
   15d28:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   15d2a:	1dfb      	adds	r3, r7, #7
   15d2c:	781b      	ldrb	r3, [r3, #0]
   15d2e:	0019      	movs	r1, r3
   15d30:	2001      	movs	r0, #1
   15d32:	4b11      	ldr	r3, [pc, #68]	; (15d78 <ADCchip_Init+0x90>)
   15d34:	4798      	blx	r3
	delay_ms(1);
   15d36:	2001      	movs	r0, #1
   15d38:	4b10      	ldr	r3, [pc, #64]	; (15d7c <ADCchip_Init+0x94>)
   15d3a:	4798      	blx	r3
	
	reg=0x86;
   15d3c:	1dfb      	adds	r3, r7, #7
   15d3e:	2286      	movs	r2, #134	; 0x86
   15d40:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15d42:	1dfb      	adds	r3, r7, #7
   15d44:	781b      	ldrb	r3, [r3, #0]
   15d46:	0019      	movs	r1, r3
   15d48:	2000      	movs	r0, #0
   15d4a:	4b0b      	ldr	r3, [pc, #44]	; (15d78 <ADCchip_Init+0x90>)
   15d4c:	4798      	blx	r3
	delay_ms(1);
   15d4e:	2001      	movs	r0, #1
   15d50:	4b0a      	ldr	r3, [pc, #40]	; (15d7c <ADCchip_Init+0x94>)
   15d52:	4798      	blx	r3
	
	reg=0x30;
   15d54:	1dfb      	adds	r3, r7, #7
   15d56:	2230      	movs	r2, #48	; 0x30
   15d58:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   15d5a:	1dfb      	adds	r3, r7, #7
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	0019      	movs	r1, r3
   15d60:	2015      	movs	r0, #21
   15d62:	4b05      	ldr	r3, [pc, #20]	; (15d78 <ADCchip_Init+0x90>)
   15d64:	4798      	blx	r3
	delay_ms(1);
   15d66:	2001      	movs	r0, #1
   15d68:	4b04      	ldr	r3, [pc, #16]	; (15d7c <ADCchip_Init+0x94>)
   15d6a:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   15d6c:	4b04      	ldr	r3, [pc, #16]	; (15d80 <ADCchip_Init+0x98>)
   15d6e:	4798      	blx	r3
}
   15d70:	46c0      	nop			; (mov r8, r8)
   15d72:	46bd      	mov	sp, r7
   15d74:	b002      	add	sp, #8
   15d76:	bd80      	pop	{r7, pc}
   15d78:	00015c09 	.word	0x00015c09
   15d7c:	00020ccd 	.word	0x00020ccd
   15d80:	00015c45 	.word	0x00015c45

00015d84 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   15d84:	b590      	push	{r4, r7, lr}
   15d86:	b083      	sub	sp, #12
   15d88:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   15d8a:	1dfb      	adds	r3, r7, #7
   15d8c:	2200      	movs	r2, #0
   15d8e:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   15d90:	1dfc      	adds	r4, r7, #7
   15d92:	2000      	movs	r0, #0
   15d94:	4b09      	ldr	r3, [pc, #36]	; (15dbc <ADC_StartConversion+0x38>)
   15d96:	4798      	blx	r3
   15d98:	0003      	movs	r3, r0
   15d9a:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   15d9c:	1dfb      	adds	r3, r7, #7
   15d9e:	1dfa      	adds	r2, r7, #7
   15da0:	7812      	ldrb	r2, [r2, #0]
   15da2:	2110      	movs	r1, #16
   15da4:	430a      	orrs	r2, r1
   15da6:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   15da8:	1dfb      	adds	r3, r7, #7
   15daa:	781b      	ldrb	r3, [r3, #0]
   15dac:	0019      	movs	r1, r3
   15dae:	2000      	movs	r0, #0
   15db0:	4b03      	ldr	r3, [pc, #12]	; (15dc0 <ADC_StartConversion+0x3c>)
   15db2:	4798      	blx	r3
}
   15db4:	46c0      	nop			; (mov r8, r8)
   15db6:	46bd      	mov	sp, r7
   15db8:	b003      	add	sp, #12
   15dba:	bd90      	pop	{r4, r7, pc}
   15dbc:	00015bd1 	.word	0x00015bd1
   15dc0:	00015c09 	.word	0x00015c09

00015dc4 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b088      	sub	sp, #32
   15dc8:	af00      	add	r7, sp, #0
   15dca:	60ba      	str	r2, [r7, #8]
   15dcc:	607b      	str	r3, [r7, #4]
   15dce:	230f      	movs	r3, #15
   15dd0:	18fb      	adds	r3, r7, r3
   15dd2:	1c02      	adds	r2, r0, #0
   15dd4:	701a      	strb	r2, [r3, #0]
   15dd6:	230e      	movs	r3, #14
   15dd8:	18fb      	adds	r3, r7, r3
   15dda:	1c0a      	adds	r2, r1, #0
   15ddc:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   15dde:	2002      	movs	r0, #2
   15de0:	4b14      	ldr	r3, [pc, #80]	; (15e34 <I2C_ReadMultiBytesOneReg+0x70>)
   15de2:	4798      	blx	r3
   15de4:	0003      	movs	r3, r0
   15de6:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   15de8:	69fb      	ldr	r3, [r7, #28]
   15dea:	b2db      	uxtb	r3, r3
   15dec:	0019      	movs	r1, r3
   15dee:	2002      	movs	r0, #2
   15df0:	4b11      	ldr	r3, [pc, #68]	; (15e38 <I2C_ReadMultiBytesOneReg+0x74>)
   15df2:	4798      	blx	r3
	delay_ms(1);
   15df4:	2001      	movs	r0, #1
   15df6:	4b11      	ldr	r3, [pc, #68]	; (15e3c <I2C_ReadMultiBytesOneReg+0x78>)
   15df8:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   15dfa:	2012      	movs	r0, #18
   15dfc:	4b0d      	ldr	r3, [pc, #52]	; (15e34 <I2C_ReadMultiBytesOneReg+0x70>)
   15dfe:	4798      	blx	r3
   15e00:	0003      	movs	r3, r0
   15e02:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   15e04:	2013      	movs	r0, #19
   15e06:	4b0b      	ldr	r3, [pc, #44]	; (15e34 <I2C_ReadMultiBytesOneReg+0x70>)
   15e08:	4798      	blx	r3
   15e0a:	0003      	movs	r3, r0
   15e0c:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   15e0e:	2014      	movs	r0, #20
   15e10:	4b08      	ldr	r3, [pc, #32]	; (15e34 <I2C_ReadMultiBytesOneReg+0x70>)
   15e12:	4798      	blx	r3
   15e14:	0003      	movs	r3, r0
   15e16:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   15e18:	69fb      	ldr	r3, [r7, #28]
   15e1a:	041a      	lsls	r2, r3, #16
   15e1c:	69bb      	ldr	r3, [r7, #24]
   15e1e:	021b      	lsls	r3, r3, #8
   15e20:	431a      	orrs	r2, r3
   15e22:	697b      	ldr	r3, [r7, #20]
   15e24:	4313      	orrs	r3, r2
   15e26:	613b      	str	r3, [r7, #16]
	return x;
   15e28:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   15e2a:	0018      	movs	r0, r3
   15e2c:	46bd      	mov	sp, r7
   15e2e:	b008      	add	sp, #32
   15e30:	bd80      	pop	{r7, pc}
   15e32:	46c0      	nop			; (mov r8, r8)
   15e34:	00015bd1 	.word	0x00015bd1
   15e38:	00015c09 	.word	0x00015c09
   15e3c:	00020ccd 	.word	0x00020ccd

00015e40 <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   15e40:	b590      	push	{r4, r7, lr}
   15e42:	b083      	sub	sp, #12
   15e44:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   15e46:	003a      	movs	r2, r7
   15e48:	2303      	movs	r3, #3
   15e4a:	2112      	movs	r1, #18
   15e4c:	202a      	movs	r0, #42	; 0x2a
   15e4e:	4c04      	ldr	r4, [pc, #16]	; (15e60 <ADC_Read_Conversion_Data+0x20>)
   15e50:	47a0      	blx	r4
   15e52:	0003      	movs	r3, r0
   15e54:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   15e56:	687b      	ldr	r3, [r7, #4]
}
   15e58:	0018      	movs	r0, r3
   15e5a:	46bd      	mov	sp, r7
   15e5c:	b003      	add	sp, #12
   15e5e:	bd90      	pop	{r4, r7, pc}
   15e60:	00015dc5 	.word	0x00015dc5

00015e64 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15e64:	b580      	push	{r7, lr}
   15e66:	b082      	sub	sp, #8
   15e68:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15e6a:	4b38      	ldr	r3, [pc, #224]	; (15f4c <InitializeSeesaw+0xe8>)
   15e6c:	222e      	movs	r2, #46	; 0x2e
   15e6e:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15e70:	4b36      	ldr	r3, [pc, #216]	; (15f4c <InitializeSeesaw+0xe8>)
   15e72:	4a37      	ldr	r2, [pc, #220]	; (15f50 <InitializeSeesaw+0xec>)
   15e74:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   15e76:	4b35      	ldr	r3, [pc, #212]	; (15f4c <InitializeSeesaw+0xe8>)
   15e78:	2202      	movs	r2, #2
   15e7a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15e7c:	4b33      	ldr	r3, [pc, #204]	; (15f4c <InitializeSeesaw+0xe8>)
   15e7e:	003a      	movs	r2, r7
   15e80:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15e82:	4b32      	ldr	r3, [pc, #200]	; (15f4c <InitializeSeesaw+0xe8>)
   15e84:	2201      	movs	r2, #1
   15e86:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15e88:	4b30      	ldr	r3, [pc, #192]	; (15f4c <InitializeSeesaw+0xe8>)
   15e8a:	2264      	movs	r2, #100	; 0x64
   15e8c:	2100      	movs	r1, #0
   15e8e:	0018      	movs	r0, r3
   15e90:	4b30      	ldr	r3, [pc, #192]	; (15f54 <InitializeSeesaw+0xf0>)
   15e92:	4798      	blx	r3
   15e94:	0003      	movs	r3, r0
   15e96:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15e98:	687b      	ldr	r3, [r7, #4]
   15e9a:	2b00      	cmp	r3, #0
   15e9c:	d004      	beq.n	15ea8 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15e9e:	4b2e      	ldr	r3, [pc, #184]	; (15f58 <InitializeSeesaw+0xf4>)
   15ea0:	0018      	movs	r0, r3
   15ea2:	4b2e      	ldr	r3, [pc, #184]	; (15f5c <InitializeSeesaw+0xf8>)
   15ea4:	4798      	blx	r3
   15ea6:	e00c      	b.n	15ec2 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15ea8:	003b      	movs	r3, r7
   15eaa:	781b      	ldrb	r3, [r3, #0]
   15eac:	2b55      	cmp	r3, #85	; 0x55
   15eae:	d004      	beq.n	15eba <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   15eb0:	4b2b      	ldr	r3, [pc, #172]	; (15f60 <InitializeSeesaw+0xfc>)
   15eb2:	0018      	movs	r0, r3
   15eb4:	4b29      	ldr	r3, [pc, #164]	; (15f5c <InitializeSeesaw+0xf8>)
   15eb6:	4798      	blx	r3
   15eb8:	e003      	b.n	15ec2 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   15eba:	4b2a      	ldr	r3, [pc, #168]	; (15f64 <InitializeSeesaw+0x100>)
   15ebc:	0018      	movs	r0, r3
   15ebe:	4b27      	ldr	r3, [pc, #156]	; (15f5c <InitializeSeesaw+0xf8>)
   15ec0:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15ec2:	4b22      	ldr	r3, [pc, #136]	; (15f4c <InitializeSeesaw+0xe8>)
   15ec4:	4a28      	ldr	r2, [pc, #160]	; (15f68 <InitializeSeesaw+0x104>)
   15ec6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15ec8:	4b20      	ldr	r3, [pc, #128]	; (15f4c <InitializeSeesaw+0xe8>)
   15eca:	2203      	movs	r2, #3
   15ecc:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ece:	4b1f      	ldr	r3, [pc, #124]	; (15f4c <InitializeSeesaw+0xe8>)
   15ed0:	2164      	movs	r1, #100	; 0x64
   15ed2:	0018      	movs	r0, r3
   15ed4:	4b25      	ldr	r3, [pc, #148]	; (15f6c <InitializeSeesaw+0x108>)
   15ed6:	4798      	blx	r3
   15ed8:	0003      	movs	r3, r0
   15eda:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15edc:	687b      	ldr	r3, [r7, #4]
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d003      	beq.n	15eea <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15ee2:	4b23      	ldr	r3, [pc, #140]	; (15f70 <InitializeSeesaw+0x10c>)
   15ee4:	0018      	movs	r0, r3
   15ee6:	4b1d      	ldr	r3, [pc, #116]	; (15f5c <InitializeSeesaw+0xf8>)
   15ee8:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   15eea:	4b18      	ldr	r3, [pc, #96]	; (15f4c <InitializeSeesaw+0xe8>)
   15eec:	4a21      	ldr	r2, [pc, #132]	; (15f74 <InitializeSeesaw+0x110>)
   15eee:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15ef0:	4b16      	ldr	r3, [pc, #88]	; (15f4c <InitializeSeesaw+0xe8>)
   15ef2:	2203      	movs	r2, #3
   15ef4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15ef6:	4b15      	ldr	r3, [pc, #84]	; (15f4c <InitializeSeesaw+0xe8>)
   15ef8:	2164      	movs	r1, #100	; 0x64
   15efa:	0018      	movs	r0, r3
   15efc:	4b1b      	ldr	r3, [pc, #108]	; (15f6c <InitializeSeesaw+0x108>)
   15efe:	4798      	blx	r3
   15f00:	0003      	movs	r3, r0
   15f02:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15f04:	687b      	ldr	r3, [r7, #4]
   15f06:	2b00      	cmp	r3, #0
   15f08:	d003      	beq.n	15f12 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15f0a:	4b1b      	ldr	r3, [pc, #108]	; (15f78 <InitializeSeesaw+0x114>)
   15f0c:	0018      	movs	r0, r3
   15f0e:	4b13      	ldr	r3, [pc, #76]	; (15f5c <InitializeSeesaw+0xf8>)
   15f10:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   15f12:	4b0e      	ldr	r3, [pc, #56]	; (15f4c <InitializeSeesaw+0xe8>)
   15f14:	4a19      	ldr	r2, [pc, #100]	; (15f7c <InitializeSeesaw+0x118>)
   15f16:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15f18:	4b0c      	ldr	r3, [pc, #48]	; (15f4c <InitializeSeesaw+0xe8>)
   15f1a:	2204      	movs	r2, #4
   15f1c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15f1e:	4b0b      	ldr	r3, [pc, #44]	; (15f4c <InitializeSeesaw+0xe8>)
   15f20:	2164      	movs	r1, #100	; 0x64
   15f22:	0018      	movs	r0, r3
   15f24:	4b11      	ldr	r3, [pc, #68]	; (15f6c <InitializeSeesaw+0x108>)
   15f26:	4798      	blx	r3
   15f28:	0003      	movs	r3, r0
   15f2a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15f2c:	687b      	ldr	r3, [r7, #4]
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d003      	beq.n	15f3a <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   15f32:	4b13      	ldr	r3, [pc, #76]	; (15f80 <InitializeSeesaw+0x11c>)
   15f34:	0018      	movs	r0, r3
   15f36:	4b09      	ldr	r3, [pc, #36]	; (15f5c <InitializeSeesaw+0xf8>)
   15f38:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   15f3a:	4b12      	ldr	r3, [pc, #72]	; (15f84 <InitializeSeesaw+0x120>)
   15f3c:	4798      	blx	r3

    SeesawInitializeKeypad();
   15f3e:	4b12      	ldr	r3, [pc, #72]	; (15f88 <InitializeSeesaw+0x124>)
   15f40:	4798      	blx	r3
    return error;
   15f42:	687b      	ldr	r3, [r7, #4]
}
   15f44:	0018      	movs	r0, r3
   15f46:	46bd      	mov	sp, r7
   15f48:	b002      	add	sp, #8
   15f4a:	bd80      	pop	{r7, pc}
   15f4c:	200048b8 	.word	0x200048b8
   15f50:	00037314 	.word	0x00037314
   15f54:	00014b85 	.word	0x00014b85
   15f58:	0003732c 	.word	0x0003732c
   15f5c:	0001e915 	.word	0x0001e915
   15f60:	0003734c 	.word	0x0003734c
   15f64:	00037358 	.word	0x00037358
   15f68:	00037318 	.word	0x00037318
   15f6c:	00014aad 	.word	0x00014aad
   15f70:	0003736c 	.word	0x0003736c
   15f74:	0003731c 	.word	0x0003731c
   15f78:	0003738c 	.word	0x0003738c
   15f7c:	00037320 	.word	0x00037320
   15f80:	000373b8 	.word	0x000373b8
   15f84:	00016339 	.word	0x00016339
   15f88:	00016249 	.word	0x00016249

00015f8c <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15f8c:	b580      	push	{r7, lr}
   15f8e:	b082      	sub	sp, #8
   15f90:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   15f92:	1cfb      	adds	r3, r7, #3
   15f94:	2200      	movs	r2, #0
   15f96:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15f98:	4b11      	ldr	r3, [pc, #68]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15f9a:	222e      	movs	r2, #46	; 0x2e
   15f9c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15f9e:	4b10      	ldr	r3, [pc, #64]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15fa0:	4a10      	ldr	r2, [pc, #64]	; (15fe4 <SeesawGetKeypadCount+0x58>)
   15fa2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   15fa4:	4b0e      	ldr	r3, [pc, #56]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15fa6:	2202      	movs	r2, #2
   15fa8:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15faa:	4b0d      	ldr	r3, [pc, #52]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15fac:	1cfa      	adds	r2, r7, #3
   15fae:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15fb0:	4b0b      	ldr	r3, [pc, #44]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15fb2:	2201      	movs	r2, #1
   15fb4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15fb6:	4b0a      	ldr	r3, [pc, #40]	; (15fe0 <SeesawGetKeypadCount+0x54>)
   15fb8:	2264      	movs	r2, #100	; 0x64
   15fba:	2100      	movs	r1, #0
   15fbc:	0018      	movs	r0, r3
   15fbe:	4b0a      	ldr	r3, [pc, #40]	; (15fe8 <SeesawGetKeypadCount+0x5c>)
   15fc0:	4798      	blx	r3
   15fc2:	0003      	movs	r3, r0
   15fc4:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15fc6:	687b      	ldr	r3, [r7, #4]
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d003      	beq.n	15fd4 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15fcc:	4b07      	ldr	r3, [pc, #28]	; (15fec <SeesawGetKeypadCount+0x60>)
   15fce:	0018      	movs	r0, r3
   15fd0:	4b07      	ldr	r3, [pc, #28]	; (15ff0 <SeesawGetKeypadCount+0x64>)
   15fd2:	4798      	blx	r3
    }
    return count;
   15fd4:	1cfb      	adds	r3, r7, #3
   15fd6:	781b      	ldrb	r3, [r3, #0]
}
   15fd8:	0018      	movs	r0, r3
   15fda:	46bd      	mov	sp, r7
   15fdc:	b002      	add	sp, #8
   15fde:	bd80      	pop	{r7, pc}
   15fe0:	200048b8 	.word	0x200048b8
   15fe4:	00037328 	.word	0x00037328
   15fe8:	00014b85 	.word	0x00014b85
   15fec:	000373ec 	.word	0x000373ec
   15ff0:	0001e915 	.word	0x0001e915

00015ff4 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   15ff4:	b580      	push	{r7, lr}
   15ff6:	b084      	sub	sp, #16
   15ff8:	af00      	add	r7, sp, #0
   15ffa:	6078      	str	r0, [r7, #4]
   15ffc:	000a      	movs	r2, r1
   15ffe:	1cfb      	adds	r3, r7, #3
   16000:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16002:	1cfb      	adds	r3, r7, #3
   16004:	781b      	ldrb	r3, [r3, #0]
   16006:	2b00      	cmp	r3, #0
   16008:	d101      	bne.n	1600e <SeesawReadKeypad+0x1a>
   1600a:	2300      	movs	r3, #0
   1600c:	e026      	b.n	1605c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   1600e:	2308      	movs	r3, #8
   16010:	18fb      	adds	r3, r7, r3
   16012:	4a14      	ldr	r2, [pc, #80]	; (16064 <SeesawReadKeypad+0x70>)
   16014:	8812      	ldrh	r2, [r2, #0]
   16016:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16018:	4b13      	ldr	r3, [pc, #76]	; (16068 <SeesawReadKeypad+0x74>)
   1601a:	222e      	movs	r2, #46	; 0x2e
   1601c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   1601e:	4b12      	ldr	r3, [pc, #72]	; (16068 <SeesawReadKeypad+0x74>)
   16020:	2208      	movs	r2, #8
   16022:	18ba      	adds	r2, r7, r2
   16024:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16026:	4b10      	ldr	r3, [pc, #64]	; (16068 <SeesawReadKeypad+0x74>)
   16028:	2202      	movs	r2, #2
   1602a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   1602c:	4b0e      	ldr	r3, [pc, #56]	; (16068 <SeesawReadKeypad+0x74>)
   1602e:	687a      	ldr	r2, [r7, #4]
   16030:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16032:	1cfb      	adds	r3, r7, #3
   16034:	781b      	ldrb	r3, [r3, #0]
   16036:	b29a      	uxth	r2, r3
   16038:	4b0b      	ldr	r3, [pc, #44]	; (16068 <SeesawReadKeypad+0x74>)
   1603a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1603c:	4b0a      	ldr	r3, [pc, #40]	; (16068 <SeesawReadKeypad+0x74>)
   1603e:	2264      	movs	r2, #100	; 0x64
   16040:	2100      	movs	r1, #0
   16042:	0018      	movs	r0, r3
   16044:	4b09      	ldr	r3, [pc, #36]	; (1606c <SeesawReadKeypad+0x78>)
   16046:	4798      	blx	r3
   16048:	0003      	movs	r3, r0
   1604a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   1604c:	68fb      	ldr	r3, [r7, #12]
   1604e:	2b00      	cmp	r3, #0
   16050:	d003      	beq.n	1605a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16052:	4b07      	ldr	r3, [pc, #28]	; (16070 <SeesawReadKeypad+0x7c>)
   16054:	0018      	movs	r0, r3
   16056:	4b07      	ldr	r3, [pc, #28]	; (16074 <SeesawReadKeypad+0x80>)
   16058:	4798      	blx	r3
    }
    return error;
   1605a:	68fb      	ldr	r3, [r7, #12]
}
   1605c:	0018      	movs	r0, r3
   1605e:	46bd      	mov	sp, r7
   16060:	b004      	add	sp, #16
   16062:	bd80      	pop	{r7, pc}
   16064:	00037410 	.word	0x00037410
   16068:	200048b8 	.word	0x200048b8
   1606c:	00014b85 	.word	0x00014b85
   16070:	000373ec 	.word	0x000373ec
   16074:	0001e915 	.word	0x0001e915

00016078 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   16078:	b590      	push	{r4, r7, lr}
   1607a:	b087      	sub	sp, #28
   1607c:	af00      	add	r7, sp, #0
   1607e:	0004      	movs	r4, r0
   16080:	0008      	movs	r0, r1
   16082:	0011      	movs	r1, r2
   16084:	1dfb      	adds	r3, r7, #7
   16086:	1c22      	adds	r2, r4, #0
   16088:	701a      	strb	r2, [r3, #0]
   1608a:	1dbb      	adds	r3, r7, #6
   1608c:	1c02      	adds	r2, r0, #0
   1608e:	701a      	strb	r2, [r3, #0]
   16090:	1d7b      	adds	r3, r7, #5
   16092:	1c0a      	adds	r2, r1, #0
   16094:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   16096:	2310      	movs	r3, #16
   16098:	18fb      	adds	r3, r7, r3
   1609a:	1d7a      	adds	r2, r7, #5
   1609c:	7812      	ldrb	r2, [r2, #0]
   1609e:	2101      	movs	r1, #1
   160a0:	0010      	movs	r0, r2
   160a2:	4008      	ands	r0, r1
   160a4:	781a      	ldrb	r2, [r3, #0]
   160a6:	2101      	movs	r1, #1
   160a8:	438a      	bics	r2, r1
   160aa:	1c11      	adds	r1, r2, #0
   160ac:	1c02      	adds	r2, r0, #0
   160ae:	430a      	orrs	r2, r1
   160b0:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   160b2:	1dbb      	adds	r3, r7, #6
   160b4:	781b      	ldrb	r3, [r3, #0]
   160b6:	2201      	movs	r2, #1
   160b8:	409a      	lsls	r2, r3
   160ba:	0013      	movs	r3, r2
   160bc:	b2db      	uxtb	r3, r3
   160be:	1c1a      	adds	r2, r3, #0
   160c0:	230f      	movs	r3, #15
   160c2:	4013      	ands	r3, r2
   160c4:	b2da      	uxtb	r2, r3
   160c6:	2310      	movs	r3, #16
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	210f      	movs	r1, #15
   160cc:	400a      	ands	r2, r1
   160ce:	1890      	adds	r0, r2, r2
   160d0:	781a      	ldrb	r2, [r3, #0]
   160d2:	211e      	movs	r1, #30
   160d4:	438a      	bics	r2, r1
   160d6:	1c11      	adds	r1, r2, #0
   160d8:	1c02      	adds	r2, r0, #0
   160da:	430a      	orrs	r2, r1
   160dc:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   160de:	230c      	movs	r3, #12
   160e0:	18fb      	adds	r3, r7, r3
   160e2:	2210      	movs	r2, #16
   160e4:	701a      	strb	r2, [r3, #0]
   160e6:	230c      	movs	r3, #12
   160e8:	18fb      	adds	r3, r7, r3
   160ea:	2201      	movs	r2, #1
   160ec:	705a      	strb	r2, [r3, #1]
   160ee:	230c      	movs	r3, #12
   160f0:	18fb      	adds	r3, r7, r3
   160f2:	1dfa      	adds	r2, r7, #7
   160f4:	7812      	ldrb	r2, [r2, #0]
   160f6:	709a      	strb	r2, [r3, #2]
   160f8:	2310      	movs	r3, #16
   160fa:	18fb      	adds	r3, r7, r3
   160fc:	781a      	ldrb	r2, [r3, #0]
   160fe:	230c      	movs	r3, #12
   16100:	18fb      	adds	r3, r7, r3
   16102:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   16104:	4b0c      	ldr	r3, [pc, #48]	; (16138 <SeesawActivateKey+0xc0>)
   16106:	222e      	movs	r2, #46	; 0x2e
   16108:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   1610a:	4b0b      	ldr	r3, [pc, #44]	; (16138 <SeesawActivateKey+0xc0>)
   1610c:	220c      	movs	r2, #12
   1610e:	18ba      	adds	r2, r7, r2
   16110:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16112:	4b09      	ldr	r3, [pc, #36]	; (16138 <SeesawActivateKey+0xc0>)
   16114:	2204      	movs	r2, #4
   16116:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16118:	4b07      	ldr	r3, [pc, #28]	; (16138 <SeesawActivateKey+0xc0>)
   1611a:	2200      	movs	r2, #0
   1611c:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1611e:	4b06      	ldr	r3, [pc, #24]	; (16138 <SeesawActivateKey+0xc0>)
   16120:	2164      	movs	r1, #100	; 0x64
   16122:	0018      	movs	r0, r3
   16124:	4b05      	ldr	r3, [pc, #20]	; (1613c <SeesawActivateKey+0xc4>)
   16126:	4798      	blx	r3
   16128:	0003      	movs	r3, r0
   1612a:	617b      	str	r3, [r7, #20]
    return error;
   1612c:	697b      	ldr	r3, [r7, #20]
}
   1612e:	0018      	movs	r0, r3
   16130:	46bd      	mov	sp, r7
   16132:	b007      	add	sp, #28
   16134:	bd90      	pop	{r4, r7, pc}
   16136:	46c0      	nop			; (mov r8, r8)
   16138:	200048b8 	.word	0x200048b8
   1613c:	00014aad 	.word	0x00014aad

00016140 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16140:	b5b0      	push	{r4, r5, r7, lr}
   16142:	b086      	sub	sp, #24
   16144:	af00      	add	r7, sp, #0
   16146:	0005      	movs	r5, r0
   16148:	000c      	movs	r4, r1
   1614a:	0010      	movs	r0, r2
   1614c:	0019      	movs	r1, r3
   1614e:	1dfb      	adds	r3, r7, #7
   16150:	1c2a      	adds	r2, r5, #0
   16152:	701a      	strb	r2, [r3, #0]
   16154:	1dbb      	adds	r3, r7, #6
   16156:	1c22      	adds	r2, r4, #0
   16158:	701a      	strb	r2, [r3, #0]
   1615a:	1d7b      	adds	r3, r7, #5
   1615c:	1c02      	adds	r2, r0, #0
   1615e:	701a      	strb	r2, [r3, #0]
   16160:	1d3b      	adds	r3, r7, #4
   16162:	1c0a      	adds	r2, r1, #0
   16164:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16166:	2308      	movs	r3, #8
   16168:	18fb      	adds	r3, r7, r3
   1616a:	220e      	movs	r2, #14
   1616c:	701a      	strb	r2, [r3, #0]
   1616e:	2308      	movs	r3, #8
   16170:	18fb      	adds	r3, r7, r3
   16172:	2204      	movs	r2, #4
   16174:	705a      	strb	r2, [r3, #1]
   16176:	2308      	movs	r3, #8
   16178:	18fb      	adds	r3, r7, r3
   1617a:	2200      	movs	r2, #0
   1617c:	709a      	strb	r2, [r3, #2]
   1617e:	2308      	movs	r3, #8
   16180:	18fb      	adds	r3, r7, r3
   16182:	2200      	movs	r2, #0
   16184:	70da      	strb	r2, [r3, #3]
   16186:	2308      	movs	r3, #8
   16188:	18fb      	adds	r3, r7, r3
   1618a:	1d7a      	adds	r2, r7, #5
   1618c:	7812      	ldrb	r2, [r2, #0]
   1618e:	711a      	strb	r2, [r3, #4]
   16190:	2308      	movs	r3, #8
   16192:	18fb      	adds	r3, r7, r3
   16194:	1dba      	adds	r2, r7, #6
   16196:	7812      	ldrb	r2, [r2, #0]
   16198:	715a      	strb	r2, [r3, #5]
   1619a:	2308      	movs	r3, #8
   1619c:	18fb      	adds	r3, r7, r3
   1619e:	1d3a      	adds	r2, r7, #4
   161a0:	7812      	ldrb	r2, [r2, #0]
   161a2:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   161a4:	1dfb      	adds	r3, r7, #7
   161a6:	781b      	ldrb	r3, [r3, #0]
   161a8:	b29b      	uxth	r3, r3
   161aa:	2216      	movs	r2, #22
   161ac:	18ba      	adds	r2, r7, r2
   161ae:	1c19      	adds	r1, r3, #0
   161b0:	1c0b      	adds	r3, r1, #0
   161b2:	18db      	adds	r3, r3, r3
   161b4:	185b      	adds	r3, r3, r1
   161b6:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   161b8:	2316      	movs	r3, #22
   161ba:	18fb      	adds	r3, r7, r3
   161bc:	881b      	ldrh	r3, [r3, #0]
   161be:	0a1b      	lsrs	r3, r3, #8
   161c0:	b29b      	uxth	r3, r3
   161c2:	b2da      	uxtb	r2, r3
   161c4:	2308      	movs	r3, #8
   161c6:	18fb      	adds	r3, r7, r3
   161c8:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   161ca:	2316      	movs	r3, #22
   161cc:	18fb      	adds	r3, r7, r3
   161ce:	881b      	ldrh	r3, [r3, #0]
   161d0:	b2da      	uxtb	r2, r3
   161d2:	2308      	movs	r3, #8
   161d4:	18fb      	adds	r3, r7, r3
   161d6:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   161d8:	4b09      	ldr	r3, [pc, #36]	; (16200 <SeesawSetLed+0xc0>)
   161da:	2208      	movs	r2, #8
   161dc:	18ba      	adds	r2, r7, r2
   161de:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   161e0:	4b07      	ldr	r3, [pc, #28]	; (16200 <SeesawSetLed+0xc0>)
   161e2:	2207      	movs	r2, #7
   161e4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   161e6:	4b06      	ldr	r3, [pc, #24]	; (16200 <SeesawSetLed+0xc0>)
   161e8:	2164      	movs	r1, #100	; 0x64
   161ea:	0018      	movs	r0, r3
   161ec:	4b05      	ldr	r3, [pc, #20]	; (16204 <SeesawSetLed+0xc4>)
   161ee:	4798      	blx	r3
   161f0:	0003      	movs	r3, r0
   161f2:	613b      	str	r3, [r7, #16]
    return error;
   161f4:	693b      	ldr	r3, [r7, #16]
}
   161f6:	0018      	movs	r0, r3
   161f8:	46bd      	mov	sp, r7
   161fa:	b006      	add	sp, #24
   161fc:	bdb0      	pop	{r4, r5, r7, pc}
   161fe:	46c0      	nop			; (mov r8, r8)
   16200:	200048b8 	.word	0x200048b8
   16204:	00014aad 	.word	0x00014aad

00016208 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16208:	b580      	push	{r7, lr}
   1620a:	b082      	sub	sp, #8
   1620c:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1620e:	003b      	movs	r3, r7
   16210:	4a0a      	ldr	r2, [pc, #40]	; (1623c <SeesawOrderLedUpdate+0x34>)
   16212:	8812      	ldrh	r2, [r2, #0]
   16214:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16216:	4b0a      	ldr	r3, [pc, #40]	; (16240 <SeesawOrderLedUpdate+0x38>)
   16218:	003a      	movs	r2, r7
   1621a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   1621c:	4b08      	ldr	r3, [pc, #32]	; (16240 <SeesawOrderLedUpdate+0x38>)
   1621e:	2202      	movs	r2, #2
   16220:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16222:	4b07      	ldr	r3, [pc, #28]	; (16240 <SeesawOrderLedUpdate+0x38>)
   16224:	2164      	movs	r1, #100	; 0x64
   16226:	0018      	movs	r0, r3
   16228:	4b06      	ldr	r3, [pc, #24]	; (16244 <SeesawOrderLedUpdate+0x3c>)
   1622a:	4798      	blx	r3
   1622c:	0003      	movs	r3, r0
   1622e:	607b      	str	r3, [r7, #4]
    return error;
   16230:	687b      	ldr	r3, [r7, #4]
}
   16232:	0018      	movs	r0, r3
   16234:	46bd      	mov	sp, r7
   16236:	b002      	add	sp, #8
   16238:	bd80      	pop	{r7, pc}
   1623a:	46c0      	nop			; (mov r8, r8)
   1623c:	00037414 	.word	0x00037414
   16240:	200048b8 	.word	0x200048b8
   16244:	00014aad 	.word	0x00014aad

00016248 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   16248:	b580      	push	{r7, lr}
   1624a:	b082      	sub	sp, #8
   1624c:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   1624e:	4b33      	ldr	r3, [pc, #204]	; (1631c <SeesawInitializeKeypad+0xd4>)
   16250:	222e      	movs	r2, #46	; 0x2e
   16252:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   16254:	4b31      	ldr	r3, [pc, #196]	; (1631c <SeesawInitializeKeypad+0xd4>)
   16256:	4a32      	ldr	r2, [pc, #200]	; (16320 <SeesawInitializeKeypad+0xd8>)
   16258:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1625a:	4b30      	ldr	r3, [pc, #192]	; (1631c <SeesawInitializeKeypad+0xd4>)
   1625c:	2203      	movs	r2, #3
   1625e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16260:	4b2e      	ldr	r3, [pc, #184]	; (1631c <SeesawInitializeKeypad+0xd4>)
   16262:	2200      	movs	r2, #0
   16264:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16266:	4b2d      	ldr	r3, [pc, #180]	; (1631c <SeesawInitializeKeypad+0xd4>)
   16268:	2164      	movs	r1, #100	; 0x64
   1626a:	0018      	movs	r0, r3
   1626c:	4b2d      	ldr	r3, [pc, #180]	; (16324 <SeesawInitializeKeypad+0xdc>)
   1626e:	4798      	blx	r3
   16270:	0003      	movs	r3, r0
   16272:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   16274:	683b      	ldr	r3, [r7, #0]
   16276:	2b00      	cmp	r3, #0
   16278:	d003      	beq.n	16282 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1627a:	4b2b      	ldr	r3, [pc, #172]	; (16328 <SeesawInitializeKeypad+0xe0>)
   1627c:	0018      	movs	r0, r3
   1627e:	4b2b      	ldr	r3, [pc, #172]	; (1632c <SeesawInitializeKeypad+0xe4>)
   16280:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   16282:	2300      	movs	r3, #0
   16284:	607b      	str	r3, [r7, #4]
   16286:	e041      	b.n	1630c <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   16288:	687b      	ldr	r3, [r7, #4]
   1628a:	2b00      	cmp	r3, #0
   1628c:	da00      	bge.n	16290 <SeesawInitializeKeypad+0x48>
   1628e:	3303      	adds	r3, #3
   16290:	109b      	asrs	r3, r3, #2
   16292:	b2db      	uxtb	r3, r3
   16294:	00db      	lsls	r3, r3, #3
   16296:	b2da      	uxtb	r2, r3
   16298:	687b      	ldr	r3, [r7, #4]
   1629a:	4925      	ldr	r1, [pc, #148]	; (16330 <SeesawInitializeKeypad+0xe8>)
   1629c:	400b      	ands	r3, r1
   1629e:	d504      	bpl.n	162aa <SeesawInitializeKeypad+0x62>
   162a0:	3b01      	subs	r3, #1
   162a2:	2104      	movs	r1, #4
   162a4:	4249      	negs	r1, r1
   162a6:	430b      	orrs	r3, r1
   162a8:	3301      	adds	r3, #1
   162aa:	b2db      	uxtb	r3, r3
   162ac:	18d3      	adds	r3, r2, r3
   162ae:	b2db      	uxtb	r3, r3
   162b0:	2201      	movs	r2, #1
   162b2:	2103      	movs	r1, #3
   162b4:	0018      	movs	r0, r3
   162b6:	4b1f      	ldr	r3, [pc, #124]	; (16334 <SeesawInitializeKeypad+0xec>)
   162b8:	4798      	blx	r3
   162ba:	0003      	movs	r3, r0
   162bc:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   162be:	687b      	ldr	r3, [r7, #4]
   162c0:	2b00      	cmp	r3, #0
   162c2:	da00      	bge.n	162c6 <SeesawInitializeKeypad+0x7e>
   162c4:	3303      	adds	r3, #3
   162c6:	109b      	asrs	r3, r3, #2
   162c8:	b2db      	uxtb	r3, r3
   162ca:	00db      	lsls	r3, r3, #3
   162cc:	b2da      	uxtb	r2, r3
   162ce:	687b      	ldr	r3, [r7, #4]
   162d0:	4917      	ldr	r1, [pc, #92]	; (16330 <SeesawInitializeKeypad+0xe8>)
   162d2:	400b      	ands	r3, r1
   162d4:	d504      	bpl.n	162e0 <SeesawInitializeKeypad+0x98>
   162d6:	3b01      	subs	r3, #1
   162d8:	2104      	movs	r1, #4
   162da:	4249      	negs	r1, r1
   162dc:	430b      	orrs	r3, r1
   162de:	3301      	adds	r3, #1
   162e0:	b2db      	uxtb	r3, r3
   162e2:	18d3      	adds	r3, r2, r3
   162e4:	b2db      	uxtb	r3, r3
   162e6:	2201      	movs	r2, #1
   162e8:	2102      	movs	r1, #2
   162ea:	0018      	movs	r0, r3
   162ec:	4b11      	ldr	r3, [pc, #68]	; (16334 <SeesawInitializeKeypad+0xec>)
   162ee:	4798      	blx	r3
   162f0:	0002      	movs	r2, r0
   162f2:	683b      	ldr	r3, [r7, #0]
   162f4:	4313      	orrs	r3, r2
   162f6:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   162f8:	683b      	ldr	r3, [r7, #0]
   162fa:	2b00      	cmp	r3, #0
   162fc:	d003      	beq.n	16306 <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   162fe:	4b0a      	ldr	r3, [pc, #40]	; (16328 <SeesawInitializeKeypad+0xe0>)
   16300:	0018      	movs	r0, r3
   16302:	4b0a      	ldr	r3, [pc, #40]	; (1632c <SeesawInitializeKeypad+0xe4>)
   16304:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   16306:	687b      	ldr	r3, [r7, #4]
   16308:	3301      	adds	r3, #1
   1630a:	607b      	str	r3, [r7, #4]
   1630c:	687b      	ldr	r3, [r7, #4]
   1630e:	2b0f      	cmp	r3, #15
   16310:	ddba      	ble.n	16288 <SeesawInitializeKeypad+0x40>
        }
    }
}
   16312:	46c0      	nop			; (mov r8, r8)
   16314:	46bd      	mov	sp, r7
   16316:	b002      	add	sp, #8
   16318:	bd80      	pop	{r7, pc}
   1631a:	46c0      	nop			; (mov r8, r8)
   1631c:	200048b8 	.word	0x200048b8
   16320:	00037324 	.word	0x00037324
   16324:	00014aad 	.word	0x00014aad
   16328:	00037418 	.word	0x00037418
   1632c:	0001e915 	.word	0x0001e915
   16330:	80000003 	.word	0x80000003
   16334:	00016079 	.word	0x00016079

00016338 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   16338:	b5b0      	push	{r4, r5, r7, lr}
   1633a:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   1633c:	23ff      	movs	r3, #255	; 0xff
   1633e:	22ff      	movs	r2, #255	; 0xff
   16340:	21ff      	movs	r1, #255	; 0xff
   16342:	200f      	movs	r0, #15
   16344:	4c09      	ldr	r4, [pc, #36]	; (1636c <SeesawTurnOnLedTest+0x34>)
   16346:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16348:	4b09      	ldr	r3, [pc, #36]	; (16370 <SeesawTurnOnLedTest+0x38>)
   1634a:	4798      	blx	r3
    vTaskDelay(400);
   1634c:	23c8      	movs	r3, #200	; 0xc8
   1634e:	005b      	lsls	r3, r3, #1
   16350:	0018      	movs	r0, r3
   16352:	4b08      	ldr	r3, [pc, #32]	; (16374 <SeesawTurnOnLedTest+0x3c>)
   16354:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   16356:	2300      	movs	r3, #0
   16358:	2200      	movs	r2, #0
   1635a:	2100      	movs	r1, #0
   1635c:	200f      	movs	r0, #15
   1635e:	4c03      	ldr	r4, [pc, #12]	; (1636c <SeesawTurnOnLedTest+0x34>)
   16360:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   16362:	4b03      	ldr	r3, [pc, #12]	; (16370 <SeesawTurnOnLedTest+0x38>)
   16364:	4798      	blx	r3
   16366:	46c0      	nop			; (mov r8, r8)
   16368:	46bd      	mov	sp, r7
   1636a:	bdb0      	pop	{r4, r5, r7, pc}
   1636c:	00016141 	.word	0x00016141
   16370:	00016209 	.word	0x00016209
   16374:	0001ccc1 	.word	0x0001ccc1

00016378 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   16378:	b580      	push	{r7, lr}
   1637a:	b084      	sub	sp, #16
   1637c:	af00      	add	r7, sp, #0
   1637e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   16380:	687b      	ldr	r3, [r7, #4]
   16382:	681b      	ldr	r3, [r3, #0]
   16384:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   16386:	46c0      	nop			; (mov r8, r8)
   16388:	68fb      	ldr	r3, [r7, #12]
   1638a:	689b      	ldr	r3, [r3, #8]
   1638c:	2202      	movs	r2, #2
   1638e:	4013      	ands	r3, r2
   16390:	d1fa      	bne.n	16388 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   16392:	68fb      	ldr	r3, [r7, #12]
   16394:	681b      	ldr	r3, [r3, #0]
   16396:	2202      	movs	r2, #2
   16398:	431a      	orrs	r2, r3
   1639a:	68fb      	ldr	r3, [r7, #12]
   1639c:	601a      	str	r2, [r3, #0]
}
   1639e:	46c0      	nop			; (mov r8, r8)
   163a0:	46bd      	mov	sp, r7
   163a2:	b004      	add	sp, #16
   163a4:	bd80      	pop	{r7, pc}
	...

000163a8 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   163a8:	b580      	push	{r7, lr}
   163aa:	b0aa      	sub	sp, #168	; 0xa8
   163ac:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   163ae:	4a15      	ldr	r2, [pc, #84]	; (16404 <configure_tcc+0x5c>)
   163b0:	1d3b      	adds	r3, r7, #4
   163b2:	0011      	movs	r1, r2
   163b4:	0018      	movs	r0, r3
   163b6:	4b14      	ldr	r3, [pc, #80]	; (16408 <configure_tcc+0x60>)
   163b8:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   163ba:	1d3b      	adds	r3, r7, #4
   163bc:	2202      	movs	r2, #2
   163be:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   163c0:	1d3b      	adds	r3, r7, #4
   163c2:	4a12      	ldr	r2, [pc, #72]	; (1640c <configure_tcc+0x64>)
   163c4:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   163c6:	1d3b      	adds	r3, r7, #4
   163c8:	2202      	movs	r2, #2
   163ca:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   163cc:	1d3b      	adds	r3, r7, #4
   163ce:	4a10      	ldr	r2, [pc, #64]	; (16410 <configure_tcc+0x68>)
   163d0:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   163d2:	1d3b      	adds	r3, r7, #4
   163d4:	229a      	movs	r2, #154	; 0x9a
   163d6:	2101      	movs	r1, #1
   163d8:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   163da:	1d3b      	adds	r3, r7, #4
   163dc:	220a      	movs	r2, #10
   163de:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   163e0:	1d3b      	adds	r3, r7, #4
   163e2:	2280      	movs	r2, #128	; 0x80
   163e4:	2105      	movs	r1, #5
   163e6:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   163e8:	1d3a      	adds	r2, r7, #4
   163ea:	4906      	ldr	r1, [pc, #24]	; (16404 <configure_tcc+0x5c>)
   163ec:	4b09      	ldr	r3, [pc, #36]	; (16414 <configure_tcc+0x6c>)
   163ee:	0018      	movs	r0, r3
   163f0:	4b09      	ldr	r3, [pc, #36]	; (16418 <configure_tcc+0x70>)
   163f2:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   163f4:	4b07      	ldr	r3, [pc, #28]	; (16414 <configure_tcc+0x6c>)
   163f6:	0018      	movs	r0, r3
   163f8:	4b08      	ldr	r3, [pc, #32]	; (1641c <configure_tcc+0x74>)
   163fa:	4798      	blx	r3
}
   163fc:	46c0      	nop			; (mov r8, r8)
   163fe:	46bd      	mov	sp, r7
   16400:	b02a      	add	sp, #168	; 0xa8
   16402:	bd80      	pop	{r7, pc}
   16404:	42002000 	.word	0x42002000
   16408:	0002af0d 	.word	0x0002af0d
   1640c:	0000ba2e 	.word	0x0000ba2e
   16410:	00005d17 	.word	0x00005d17
   16414:	200048c8 	.word	0x200048c8
   16418:	0002b569 	.word	0x0002b569
   1641c:	00016379 	.word	0x00016379

00016420 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   16420:	b580      	push	{r7, lr}
   16422:	b084      	sub	sp, #16
   16424:	af00      	add	r7, sp, #0
   16426:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   16428:	4b07      	ldr	r3, [pc, #28]	; (16448 <servo_setDuty+0x28>)
   1642a:	6879      	ldr	r1, [r7, #4]
   1642c:	4807      	ldr	r0, [pc, #28]	; (1644c <servo_setDuty+0x2c>)
   1642e:	4798      	blx	r3
   16430:	0003      	movs	r3, r0
   16432:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   16434:	68fa      	ldr	r2, [r7, #12]
   16436:	4b06      	ldr	r3, [pc, #24]	; (16450 <servo_setDuty+0x30>)
   16438:	2102      	movs	r1, #2
   1643a:	0018      	movs	r0, r3
   1643c:	4b05      	ldr	r3, [pc, #20]	; (16454 <servo_setDuty+0x34>)
   1643e:	4798      	blx	r3
   16440:	46c0      	nop			; (mov r8, r8)
   16442:	46bd      	mov	sp, r7
   16444:	b004      	add	sp, #16
   16446:	bd80      	pop	{r7, pc}
   16448:	00033829 	.word	0x00033829
   1644c:	0000ba2e 	.word	0x0000ba2e
   16450:	200048c8 	.word	0x200048c8
   16454:	0002ba29 	.word	0x0002ba29

00016458 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16458:	b590      	push	{r4, r7, lr}
   1645a:	b085      	sub	sp, #20
   1645c:	af00      	add	r7, sp, #0
   1645e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   16460:	4b12      	ldr	r3, [pc, #72]	; (164ac <vUiHandlerTask+0x54>)
   16462:	0018      	movs	r0, r3
   16464:	4b12      	ldr	r3, [pc, #72]	; (164b0 <vUiHandlerTask+0x58>)
   16466:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16468:	4b12      	ldr	r3, [pc, #72]	; (164b4 <vUiHandlerTask+0x5c>)
   1646a:	2201      	movs	r2, #1
   1646c:	701a      	strb	r2, [r3, #0]
	configure_tcc();
   1646e:	4b12      	ldr	r3, [pc, #72]	; (164b8 <vUiHandlerTask+0x60>)
   16470:	4798      	blx	r3
	servo_setDuty(2);
   16472:	2002      	movs	r0, #2
   16474:	4b11      	ldr	r3, [pc, #68]	; (164bc <vUiHandlerTask+0x64>)
   16476:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   16478:	4b11      	ldr	r3, [pc, #68]	; (164c0 <vUiHandlerTask+0x68>)
   1647a:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   1647c:	4b11      	ldr	r3, [pc, #68]	; (164c4 <vUiHandlerTask+0x6c>)
   1647e:	4812      	ldr	r0, [pc, #72]	; (164c8 <vUiHandlerTask+0x70>)
   16480:	2208      	movs	r2, #8
   16482:	2100      	movs	r1, #0
   16484:	4c11      	ldr	r4, [pc, #68]	; (164cc <vUiHandlerTask+0x74>)
   16486:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   16488:	4b0e      	ldr	r3, [pc, #56]	; (164c4 <vUiHandlerTask+0x6c>)
   1648a:	4811      	ldr	r0, [pc, #68]	; (164d0 <vUiHandlerTask+0x78>)
   1648c:	2212      	movs	r2, #18
   1648e:	2100      	movs	r1, #0
   16490:	4c0e      	ldr	r4, [pc, #56]	; (164cc <vUiHandlerTask+0x74>)
   16492:	47a0      	blx	r4
	uint8_t count = 0;
   16494:	230f      	movs	r3, #15
   16496:	18fb      	adds	r3, r7, r3
   16498:	2200      	movs	r2, #0
   1649a:	701a      	strb	r2, [r3, #0]
	bool servo_flag = false;
   1649c:	230e      	movs	r3, #14
   1649e:	18fb      	adds	r3, r7, r3
   164a0:	2200      	movs	r2, #0
   164a2:	701a      	strb	r2, [r3, #0]
                //uiState = UI_STATE_HANDLE_BUTTONS;
                //break;
        //}
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   164a4:	2032      	movs	r0, #50	; 0x32
   164a6:	4b0b      	ldr	r3, [pc, #44]	; (164d4 <vUiHandlerTask+0x7c>)
   164a8:	4798      	blx	r3
   164aa:	e7fb      	b.n	164a4 <vUiHandlerTask+0x4c>
   164ac:	0003743c 	.word	0x0003743c
   164b0:	0001e915 	.word	0x0001e915
   164b4:	20004940 	.word	0x20004940
   164b8:	000163a9 	.word	0x000163a9
   164bc:	00016421 	.word	0x00016421
   164c0:	0001287d 	.word	0x0001287d
   164c4:	20000000 	.word	0x20000000
   164c8:	00037450 	.word	0x00037450
   164cc:	00012721 	.word	0x00012721
   164d0:	00037458 	.word	0x00037458
   164d4:	0001ccc1 	.word	0x0001ccc1

000164d8 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   164d8:	b580      	push	{r7, lr}
   164da:	b082      	sub	sp, #8
   164dc:	af00      	add	r7, sp, #0
   164de:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   164e0:	4a08      	ldr	r2, [pc, #32]	; (16504 <UiOrderShowMoves+0x2c>)
   164e2:	687b      	ldr	r3, [r7, #4]
   164e4:	0010      	movs	r0, r2
   164e6:	0019      	movs	r1, r3
   164e8:	2314      	movs	r3, #20
   164ea:	001a      	movs	r2, r3
   164ec:	4b06      	ldr	r3, [pc, #24]	; (16508 <UiOrderShowMoves+0x30>)
   164ee:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   164f0:	4b06      	ldr	r3, [pc, #24]	; (1650c <UiOrderShowMoves+0x34>)
   164f2:	2202      	movs	r2, #2
   164f4:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   164f6:	4b06      	ldr	r3, [pc, #24]	; (16510 <UiOrderShowMoves+0x38>)
   164f8:	2200      	movs	r2, #0
   164fa:	701a      	strb	r2, [r3, #0]
}
   164fc:	46c0      	nop			; (mov r8, r8)
   164fe:	46bd      	mov	sp, r7
   16500:	b002      	add	sp, #8
   16502:	bd80      	pop	{r7, pc}
   16504:	2000491c 	.word	0x2000491c
   16508:	000356b9 	.word	0x000356b9
   1650c:	20004940 	.word	0x20004940
   16510:	20000622 	.word	0x20000622

00016514 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   16514:	b580      	push	{r7, lr}
   16516:	af00      	add	r7, sp, #0
    return playIsDone;
   16518:	4b02      	ldr	r3, [pc, #8]	; (16524 <UiPlayIsDone+0x10>)
   1651a:	781b      	ldrb	r3, [r3, #0]
}
   1651c:	0018      	movs	r0, r3
   1651e:	46bd      	mov	sp, r7
   16520:	bd80      	pop	{r7, pc}
   16522:	46c0      	nop			; (mov r8, r8)
   16524:	20000622 	.word	0x20000622

00016528 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   16528:	b580      	push	{r7, lr}
   1652a:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   1652c:	4b01      	ldr	r3, [pc, #4]	; (16534 <UiGetGamePacketOut+0xc>)
}
   1652e:	0018      	movs	r0, r3
   16530:	46bd      	mov	sp, r7
   16532:	bd80      	pop	{r7, pc}
   16534:	20004908 	.word	0x20004908

00016538 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   16538:	b590      	push	{r4, r7, lr}
   1653a:	b083      	sub	sp, #12
   1653c:	af00      	add	r7, sp, #0
   1653e:	0004      	movs	r4, r0
   16540:	0008      	movs	r0, r1
   16542:	0011      	movs	r1, r2
   16544:	1dfb      	adds	r3, r7, #7
   16546:	1c22      	adds	r2, r4, #0
   16548:	701a      	strb	r2, [r3, #0]
   1654a:	1dbb      	adds	r3, r7, #6
   1654c:	1c02      	adds	r2, r0, #0
   1654e:	701a      	strb	r2, [r3, #0]
   16550:	1d7b      	adds	r3, r7, #5
   16552:	1c0a      	adds	r2, r1, #0
   16554:	701a      	strb	r2, [r3, #0]
    red = r;
   16556:	4b08      	ldr	r3, [pc, #32]	; (16578 <UIChangeColors+0x40>)
   16558:	1dfa      	adds	r2, r7, #7
   1655a:	7812      	ldrb	r2, [r2, #0]
   1655c:	701a      	strb	r2, [r3, #0]
    green = g;
   1655e:	4b07      	ldr	r3, [pc, #28]	; (1657c <UIChangeColors+0x44>)
   16560:	1dba      	adds	r2, r7, #6
   16562:	7812      	ldrb	r2, [r2, #0]
   16564:	701a      	strb	r2, [r3, #0]
    blue = b;
   16566:	4b06      	ldr	r3, [pc, #24]	; (16580 <UIChangeColors+0x48>)
   16568:	1d7a      	adds	r2, r7, #5
   1656a:	7812      	ldrb	r2, [r2, #0]
   1656c:	701a      	strb	r2, [r3, #0]
}
   1656e:	46c0      	nop			; (mov r8, r8)
   16570:	46bd      	mov	sp, r7
   16572:	b003      	add	sp, #12
   16574:	bd90      	pop	{r4, r7, pc}
   16576:	46c0      	nop			; (mov r8, r8)
   16578:	20000621 	.word	0x20000621
   1657c:	2000002c 	.word	0x2000002c
   16580:	2000002d 	.word	0x2000002d

00016584 <NVIC_SystemReset>:
{
   16584:	b580      	push	{r7, lr}
   16586:	af00      	add	r7, sp, #0
   16588:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1658c:	4b02      	ldr	r3, [pc, #8]	; (16598 <NVIC_SystemReset+0x14>)
   1658e:	4a03      	ldr	r2, [pc, #12]	; (1659c <NVIC_SystemReset+0x18>)
   16590:	60da      	str	r2, [r3, #12]
   16592:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   16596:	e7fe      	b.n	16596 <NVIC_SystemReset+0x12>
   16598:	e000ed00 	.word	0xe000ed00
   1659c:	05fa0004 	.word	0x05fa0004

000165a0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   165a0:	b580      	push	{r7, lr}
   165a2:	b084      	sub	sp, #16
   165a4:	af00      	add	r7, sp, #0
   165a6:	0002      	movs	r2, r0
   165a8:	1dfb      	adds	r3, r7, #7
   165aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   165ac:	230f      	movs	r3, #15
   165ae:	18fb      	adds	r3, r7, r3
   165b0:	1dfa      	adds	r2, r7, #7
   165b2:	7812      	ldrb	r2, [r2, #0]
   165b4:	09d2      	lsrs	r2, r2, #7
   165b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   165b8:	230e      	movs	r3, #14
   165ba:	18fb      	adds	r3, r7, r3
   165bc:	1dfa      	adds	r2, r7, #7
   165be:	7812      	ldrb	r2, [r2, #0]
   165c0:	0952      	lsrs	r2, r2, #5
   165c2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   165c4:	4b0d      	ldr	r3, [pc, #52]	; (165fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   165c6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   165c8:	230f      	movs	r3, #15
   165ca:	18fb      	adds	r3, r7, r3
   165cc:	781b      	ldrb	r3, [r3, #0]
   165ce:	2b00      	cmp	r3, #0
   165d0:	d10f      	bne.n	165f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   165d2:	230f      	movs	r3, #15
   165d4:	18fb      	adds	r3, r7, r3
   165d6:	781b      	ldrb	r3, [r3, #0]
   165d8:	009b      	lsls	r3, r3, #2
   165da:	2210      	movs	r2, #16
   165dc:	4694      	mov	ip, r2
   165de:	44bc      	add	ip, r7
   165e0:	4463      	add	r3, ip
   165e2:	3b08      	subs	r3, #8
   165e4:	681a      	ldr	r2, [r3, #0]
   165e6:	230e      	movs	r3, #14
   165e8:	18fb      	adds	r3, r7, r3
   165ea:	781b      	ldrb	r3, [r3, #0]
   165ec:	01db      	lsls	r3, r3, #7
   165ee:	18d3      	adds	r3, r2, r3
   165f0:	e000      	b.n	165f4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   165f2:	2300      	movs	r3, #0
	}
}
   165f4:	0018      	movs	r0, r3
   165f6:	46bd      	mov	sp, r7
   165f8:	b004      	add	sp, #16
   165fa:	bd80      	pop	{r7, pc}
   165fc:	41004400 	.word	0x41004400

00016600 <system_reset>:
{
   16600:	b580      	push	{r7, lr}
   16602:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   16604:	4b02      	ldr	r3, [pc, #8]	; (16610 <system_reset+0x10>)
   16606:	4798      	blx	r3
}
   16608:	46c0      	nop			; (mov r8, r8)
   1660a:	46bd      	mov	sp, r7
   1660c:	bd80      	pop	{r7, pc}
   1660e:	46c0      	nop			; (mov r8, r8)
   16610:	00016585 	.word	0x00016585

00016614 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16614:	b580      	push	{r7, lr}
   16616:	b082      	sub	sp, #8
   16618:	af00      	add	r7, sp, #0
   1661a:	0002      	movs	r2, r0
   1661c:	1dfb      	adds	r3, r7, #7
   1661e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16620:	1dfb      	adds	r3, r7, #7
   16622:	781b      	ldrb	r3, [r3, #0]
   16624:	0018      	movs	r0, r3
   16626:	4b03      	ldr	r3, [pc, #12]	; (16634 <port_get_group_from_gpio_pin+0x20>)
   16628:	4798      	blx	r3
   1662a:	0003      	movs	r3, r0
}
   1662c:	0018      	movs	r0, r3
   1662e:	46bd      	mov	sp, r7
   16630:	b002      	add	sp, #8
   16632:	bd80      	pop	{r7, pc}
   16634:	000165a1 	.word	0x000165a1

00016638 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16638:	b580      	push	{r7, lr}
   1663a:	b084      	sub	sp, #16
   1663c:	af00      	add	r7, sp, #0
   1663e:	0002      	movs	r2, r0
   16640:	1dfb      	adds	r3, r7, #7
   16642:	701a      	strb	r2, [r3, #0]
   16644:	1dbb      	adds	r3, r7, #6
   16646:	1c0a      	adds	r2, r1, #0
   16648:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1664a:	1dfb      	adds	r3, r7, #7
   1664c:	781b      	ldrb	r3, [r3, #0]
   1664e:	0018      	movs	r0, r3
   16650:	4b0d      	ldr	r3, [pc, #52]	; (16688 <port_pin_set_output_level+0x50>)
   16652:	4798      	blx	r3
   16654:	0003      	movs	r3, r0
   16656:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16658:	1dfb      	adds	r3, r7, #7
   1665a:	781b      	ldrb	r3, [r3, #0]
   1665c:	221f      	movs	r2, #31
   1665e:	4013      	ands	r3, r2
   16660:	2201      	movs	r2, #1
   16662:	409a      	lsls	r2, r3
   16664:	0013      	movs	r3, r2
   16666:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16668:	1dbb      	adds	r3, r7, #6
   1666a:	781b      	ldrb	r3, [r3, #0]
   1666c:	2b00      	cmp	r3, #0
   1666e:	d003      	beq.n	16678 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16670:	68fb      	ldr	r3, [r7, #12]
   16672:	68ba      	ldr	r2, [r7, #8]
   16674:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16676:	e002      	b.n	1667e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16678:	68fb      	ldr	r3, [r7, #12]
   1667a:	68ba      	ldr	r2, [r7, #8]
   1667c:	615a      	str	r2, [r3, #20]
}
   1667e:	46c0      	nop			; (mov r8, r8)
   16680:	46bd      	mov	sp, r7
   16682:	b004      	add	sp, #16
   16684:	bd80      	pop	{r7, pc}
   16686:	46c0      	nop			; (mov r8, r8)
   16688:	00016615 	.word	0x00016615

0001668c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1668c:	b580      	push	{r7, lr}
   1668e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16690:	4b02      	ldr	r3, [pc, #8]	; (1669c <init_state+0x10>)
   16692:	2200      	movs	r2, #0
   16694:	701a      	strb	r2, [r3, #0]
}
   16696:	46c0      	nop			; (mov r8, r8)
   16698:	46bd      	mov	sp, r7
   1669a:	bd80      	pop	{r7, pc}
   1669c:	2000063d 	.word	0x2000063d

000166a0 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   166a0:	b580      	push	{r7, lr}
   166a2:	b082      	sub	sp, #8
   166a4:	af00      	add	r7, sp, #0
   166a6:	0002      	movs	r2, r0
   166a8:	1dfb      	adds	r3, r7, #7
   166aa:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   166ac:	1dfb      	adds	r3, r7, #7
   166ae:	781b      	ldrb	r3, [r3, #0]
   166b0:	b25b      	sxtb	r3, r3
   166b2:	43db      	mvns	r3, r3
   166b4:	b25b      	sxtb	r3, r3
   166b6:	4a06      	ldr	r2, [pc, #24]	; (166d0 <clear_state+0x30>)
   166b8:	7812      	ldrb	r2, [r2, #0]
   166ba:	b252      	sxtb	r2, r2
   166bc:	4013      	ands	r3, r2
   166be:	b25b      	sxtb	r3, r3
   166c0:	b2da      	uxtb	r2, r3
   166c2:	4b03      	ldr	r3, [pc, #12]	; (166d0 <clear_state+0x30>)
   166c4:	701a      	strb	r2, [r3, #0]
}
   166c6:	46c0      	nop			; (mov r8, r8)
   166c8:	46bd      	mov	sp, r7
   166ca:	b002      	add	sp, #8
   166cc:	bd80      	pop	{r7, pc}
   166ce:	46c0      	nop			; (mov r8, r8)
   166d0:	2000063d 	.word	0x2000063d

000166d4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   166d4:	b580      	push	{r7, lr}
   166d6:	b082      	sub	sp, #8
   166d8:	af00      	add	r7, sp, #0
   166da:	0002      	movs	r2, r0
   166dc:	1dfb      	adds	r3, r7, #7
   166de:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   166e0:	4b05      	ldr	r3, [pc, #20]	; (166f8 <add_state+0x24>)
   166e2:	781a      	ldrb	r2, [r3, #0]
   166e4:	1dfb      	adds	r3, r7, #7
   166e6:	781b      	ldrb	r3, [r3, #0]
   166e8:	4313      	orrs	r3, r2
   166ea:	b2da      	uxtb	r2, r3
   166ec:	4b02      	ldr	r3, [pc, #8]	; (166f8 <add_state+0x24>)
   166ee:	701a      	strb	r2, [r3, #0]
}
   166f0:	46c0      	nop			; (mov r8, r8)
   166f2:	46bd      	mov	sp, r7
   166f4:	b002      	add	sp, #8
   166f6:	bd80      	pop	{r7, pc}
   166f8:	2000063d 	.word	0x2000063d

000166fc <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   166fc:	b580      	push	{r7, lr}
   166fe:	b082      	sub	sp, #8
   16700:	af00      	add	r7, sp, #0
   16702:	0002      	movs	r2, r0
   16704:	1dfb      	adds	r3, r7, #7
   16706:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16708:	4b06      	ldr	r3, [pc, #24]	; (16724 <is_state_set+0x28>)
   1670a:	781b      	ldrb	r3, [r3, #0]
   1670c:	1dfa      	adds	r2, r7, #7
   1670e:	7812      	ldrb	r2, [r2, #0]
   16710:	4013      	ands	r3, r2
   16712:	b2db      	uxtb	r3, r3
   16714:	1e5a      	subs	r2, r3, #1
   16716:	4193      	sbcs	r3, r2
   16718:	b2db      	uxtb	r3, r3
}
   1671a:	0018      	movs	r0, r3
   1671c:	46bd      	mov	sp, r7
   1671e:	b002      	add	sp, #8
   16720:	bd80      	pop	{r7, pc}
   16722:	46c0      	nop			; (mov r8, r8)
   16724:	2000063d 	.word	0x2000063d

00016728 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16728:	b590      	push	{r4, r7, lr}
   1672a:	b085      	sub	sp, #20
   1672c:	af00      	add	r7, sp, #0
   1672e:	6078      	str	r0, [r7, #4]
   16730:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16732:	687b      	ldr	r3, [r7, #4]
   16734:	2b00      	cmp	r3, #0
   16736:	d002      	beq.n	1673e <is_exist_file+0x16>
   16738:	683b      	ldr	r3, [r7, #0]
   1673a:	2b00      	cmp	r3, #0
   1673c:	d101      	bne.n	16742 <is_exist_file+0x1a>
        return false;
   1673e:	2300      	movs	r3, #0
   16740:	e013      	b.n	1676a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16742:	230f      	movs	r3, #15
   16744:	18fc      	adds	r4, r7, r3
   16746:	6839      	ldr	r1, [r7, #0]
   16748:	4b0a      	ldr	r3, [pc, #40]	; (16774 <is_exist_file+0x4c>)
   1674a:	2200      	movs	r2, #0
   1674c:	0018      	movs	r0, r3
   1674e:	4b0a      	ldr	r3, [pc, #40]	; (16778 <is_exist_file+0x50>)
   16750:	4798      	blx	r3
   16752:	0003      	movs	r3, r0
   16754:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16756:	4b07      	ldr	r3, [pc, #28]	; (16774 <is_exist_file+0x4c>)
   16758:	0018      	movs	r0, r3
   1675a:	4b08      	ldr	r3, [pc, #32]	; (1677c <is_exist_file+0x54>)
   1675c:	4798      	blx	r3
    return (ret == FR_OK);
   1675e:	230f      	movs	r3, #15
   16760:	18fb      	adds	r3, r7, r3
   16762:	781b      	ldrb	r3, [r3, #0]
   16764:	425a      	negs	r2, r3
   16766:	4153      	adcs	r3, r2
   16768:	b2db      	uxtb	r3, r3
}
   1676a:	0018      	movs	r0, r3
   1676c:	46bd      	mov	sp, r7
   1676e:	b005      	add	sp, #20
   16770:	bd90      	pop	{r4, r7, pc}
   16772:	46c0      	nop			; (mov r8, r8)
   16774:	20000870 	.word	0x20000870
   16778:	0002e63d 	.word	0x0002e63d
   1677c:	0002f03d 	.word	0x0002f03d

00016780 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16780:	b580      	push	{r7, lr}
   16782:	b09e      	sub	sp, #120	; 0x78
   16784:	af00      	add	r7, sp, #0
   16786:	60f8      	str	r0, [r7, #12]
   16788:	60b9      	str	r1, [r7, #8]
   1678a:	1dfb      	adds	r3, r7, #7
   1678c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1678e:	2376      	movs	r3, #118	; 0x76
   16790:	18fb      	adds	r3, r7, r3
   16792:	2201      	movs	r2, #1
   16794:	801a      	strh	r2, [r3, #0]
   16796:	2374      	movs	r3, #116	; 0x74
   16798:	18fb      	adds	r3, r7, r3
   1679a:	2200      	movs	r2, #0
   1679c:	801a      	strh	r2, [r3, #0]
   1679e:	236e      	movs	r3, #110	; 0x6e
   167a0:	18fb      	adds	r3, r7, r3
   167a2:	2200      	movs	r2, #0
   167a4:	801a      	strh	r2, [r3, #0]
   167a6:	2372      	movs	r3, #114	; 0x72
   167a8:	18fb      	adds	r3, r7, r3
   167aa:	2200      	movs	r2, #0
   167ac:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   167ae:	2324      	movs	r3, #36	; 0x24
   167b0:	18fb      	adds	r3, r7, r3
   167b2:	0018      	movs	r0, r3
   167b4:	2341      	movs	r3, #65	; 0x41
   167b6:	001a      	movs	r2, r3
   167b8:	2100      	movs	r1, #0
   167ba:	4b92      	ldr	r3, [pc, #584]	; (16a04 <rename_to_unique+0x284>)
   167bc:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   167be:	2318      	movs	r3, #24
   167c0:	18fb      	adds	r3, r7, r3
   167c2:	0018      	movs	r0, r3
   167c4:	2309      	movs	r3, #9
   167c6:	001a      	movs	r2, r3
   167c8:	2100      	movs	r1, #0
   167ca:	4b8e      	ldr	r3, [pc, #568]	; (16a04 <rename_to_unique+0x284>)
   167cc:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   167ce:	2314      	movs	r3, #20
   167d0:	18fb      	adds	r3, r7, r3
   167d2:	2200      	movs	r2, #0
   167d4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   167d6:	2300      	movs	r3, #0
   167d8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   167da:	2371      	movs	r3, #113	; 0x71
   167dc:	18fb      	adds	r3, r7, r3
   167de:	2200      	movs	r2, #0
   167e0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   167e2:	68bb      	ldr	r3, [r7, #8]
   167e4:	2b00      	cmp	r3, #0
   167e6:	d101      	bne.n	167ec <rename_to_unique+0x6c>
        return false;
   167e8:	2300      	movs	r3, #0
   167ea:	e106      	b.n	169fa <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   167ec:	68ba      	ldr	r2, [r7, #8]
   167ee:	68fb      	ldr	r3, [r7, #12]
   167f0:	0011      	movs	r1, r2
   167f2:	0018      	movs	r0, r3
   167f4:	4b84      	ldr	r3, [pc, #528]	; (16a08 <rename_to_unique+0x288>)
   167f6:	4798      	blx	r3
   167f8:	0003      	movs	r3, r0
   167fa:	001a      	movs	r2, r3
   167fc:	2301      	movs	r3, #1
   167fe:	4053      	eors	r3, r2
   16800:	b2db      	uxtb	r3, r3
   16802:	2b00      	cmp	r3, #0
   16804:	d001      	beq.n	1680a <rename_to_unique+0x8a>
        return true;
   16806:	2301      	movs	r3, #1
   16808:	e0f7      	b.n	169fa <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1680a:	68bb      	ldr	r3, [r7, #8]
   1680c:	0018      	movs	r0, r3
   1680e:	4b7f      	ldr	r3, [pc, #508]	; (16a0c <rename_to_unique+0x28c>)
   16810:	4798      	blx	r3
   16812:	0003      	movs	r3, r0
   16814:	2b40      	cmp	r3, #64	; 0x40
   16816:	d901      	bls.n	1681c <rename_to_unique+0x9c>
        return false;
   16818:	2300      	movs	r3, #0
   1681a:	e0ee      	b.n	169fa <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1681c:	68bb      	ldr	r3, [r7, #8]
   1681e:	212e      	movs	r1, #46	; 0x2e
   16820:	0018      	movs	r0, r3
   16822:	4b7b      	ldr	r3, [pc, #492]	; (16a10 <rename_to_unique+0x290>)
   16824:	4798      	blx	r3
   16826:	0003      	movs	r3, r0
   16828:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1682a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1682c:	2b00      	cmp	r3, #0
   1682e:	d052      	beq.n	168d6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16832:	0018      	movs	r0, r3
   16834:	4b75      	ldr	r3, [pc, #468]	; (16a0c <rename_to_unique+0x28c>)
   16836:	4798      	blx	r3
   16838:	0002      	movs	r2, r0
   1683a:	236e      	movs	r3, #110	; 0x6e
   1683c:	18fb      	adds	r3, r7, r3
   1683e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16840:	236e      	movs	r3, #110	; 0x6e
   16842:	18fb      	adds	r3, r7, r3
   16844:	881b      	ldrh	r3, [r3, #0]
   16846:	2b07      	cmp	r3, #7
   16848:	d837      	bhi.n	168ba <rename_to_unique+0x13a>
            valid_ext = true;
   1684a:	2371      	movs	r3, #113	; 0x71
   1684c:	18fb      	adds	r3, r7, r3
   1684e:	2201      	movs	r2, #1
   16850:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16852:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16854:	2318      	movs	r3, #24
   16856:	18fb      	adds	r3, r7, r3
   16858:	0011      	movs	r1, r2
   1685a:	0018      	movs	r0, r3
   1685c:	4b6d      	ldr	r3, [pc, #436]	; (16a14 <rename_to_unique+0x294>)
   1685e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16860:	68bb      	ldr	r3, [r7, #8]
   16862:	0018      	movs	r0, r3
   16864:	4b69      	ldr	r3, [pc, #420]	; (16a0c <rename_to_unique+0x28c>)
   16866:	4798      	blx	r3
   16868:	0002      	movs	r2, r0
   1686a:	236e      	movs	r3, #110	; 0x6e
   1686c:	18fb      	adds	r3, r7, r3
   1686e:	881b      	ldrh	r3, [r3, #0]
   16870:	1ad3      	subs	r3, r2, r3
   16872:	2b3c      	cmp	r3, #60	; 0x3c
   16874:	d911      	bls.n	1689a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16876:	2374      	movs	r3, #116	; 0x74
   16878:	18fb      	adds	r3, r7, r3
   1687a:	226e      	movs	r2, #110	; 0x6e
   1687c:	18ba      	adds	r2, r7, r2
   1687e:	8812      	ldrh	r2, [r2, #0]
   16880:	213c      	movs	r1, #60	; 0x3c
   16882:	1a8a      	subs	r2, r1, r2
   16884:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16886:	2374      	movs	r3, #116	; 0x74
   16888:	18fb      	adds	r3, r7, r3
   1688a:	881a      	ldrh	r2, [r3, #0]
   1688c:	68b9      	ldr	r1, [r7, #8]
   1688e:	2324      	movs	r3, #36	; 0x24
   16890:	18fb      	adds	r3, r7, r3
   16892:	0018      	movs	r0, r3
   16894:	4b60      	ldr	r3, [pc, #384]	; (16a18 <rename_to_unique+0x298>)
   16896:	4798      	blx	r3
   16898:	e02a      	b.n	168f0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1689a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1689c:	68bb      	ldr	r3, [r7, #8]
   1689e:	1ad2      	subs	r2, r2, r3
   168a0:	2374      	movs	r3, #116	; 0x74
   168a2:	18fb      	adds	r3, r7, r3
   168a4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   168a6:	2374      	movs	r3, #116	; 0x74
   168a8:	18fb      	adds	r3, r7, r3
   168aa:	881a      	ldrh	r2, [r3, #0]
   168ac:	68b9      	ldr	r1, [r7, #8]
   168ae:	2324      	movs	r3, #36	; 0x24
   168b0:	18fb      	adds	r3, r7, r3
   168b2:	0018      	movs	r0, r3
   168b4:	4b58      	ldr	r3, [pc, #352]	; (16a18 <rename_to_unique+0x298>)
   168b6:	4798      	blx	r3
   168b8:	e01a      	b.n	168f0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   168ba:	2374      	movs	r3, #116	; 0x74
   168bc:	18fb      	adds	r3, r7, r3
   168be:	223c      	movs	r2, #60	; 0x3c
   168c0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   168c2:	2374      	movs	r3, #116	; 0x74
   168c4:	18fb      	adds	r3, r7, r3
   168c6:	881a      	ldrh	r2, [r3, #0]
   168c8:	68b9      	ldr	r1, [r7, #8]
   168ca:	2324      	movs	r3, #36	; 0x24
   168cc:	18fb      	adds	r3, r7, r3
   168ce:	0018      	movs	r0, r3
   168d0:	4b51      	ldr	r3, [pc, #324]	; (16a18 <rename_to_unique+0x298>)
   168d2:	4798      	blx	r3
   168d4:	e00c      	b.n	168f0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   168d6:	2374      	movs	r3, #116	; 0x74
   168d8:	18fb      	adds	r3, r7, r3
   168da:	223c      	movs	r2, #60	; 0x3c
   168dc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   168de:	2374      	movs	r3, #116	; 0x74
   168e0:	18fb      	adds	r3, r7, r3
   168e2:	881a      	ldrh	r2, [r3, #0]
   168e4:	68b9      	ldr	r1, [r7, #8]
   168e6:	2324      	movs	r3, #36	; 0x24
   168e8:	18fb      	adds	r3, r7, r3
   168ea:	0018      	movs	r0, r3
   168ec:	4b4a      	ldr	r3, [pc, #296]	; (16a18 <rename_to_unique+0x298>)
   168ee:	4798      	blx	r3
    }

    name[name_len++] = '-';
   168f0:	2374      	movs	r3, #116	; 0x74
   168f2:	18fb      	adds	r3, r7, r3
   168f4:	881b      	ldrh	r3, [r3, #0]
   168f6:	2274      	movs	r2, #116	; 0x74
   168f8:	18ba      	adds	r2, r7, r2
   168fa:	1c59      	adds	r1, r3, #1
   168fc:	8011      	strh	r1, [r2, #0]
   168fe:	001a      	movs	r2, r3
   16900:	2324      	movs	r3, #36	; 0x24
   16902:	18fb      	adds	r3, r7, r3
   16904:	212d      	movs	r1, #45	; 0x2d
   16906:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16908:	2376      	movs	r3, #118	; 0x76
   1690a:	18fb      	adds	r3, r7, r3
   1690c:	2200      	movs	r2, #0
   1690e:	801a      	strh	r2, [r3, #0]
   16910:	2372      	movs	r3, #114	; 0x72
   16912:	18fb      	adds	r3, r7, r3
   16914:	2201      	movs	r2, #1
   16916:	801a      	strh	r2, [r3, #0]
   16918:	e010      	b.n	1693c <rename_to_unique+0x1bc>
        count *= 10;
   1691a:	2372      	movs	r3, #114	; 0x72
   1691c:	18fa      	adds	r2, r7, r3
   1691e:	2372      	movs	r3, #114	; 0x72
   16920:	18fb      	adds	r3, r7, r3
   16922:	881b      	ldrh	r3, [r3, #0]
   16924:	1c19      	adds	r1, r3, #0
   16926:	0089      	lsls	r1, r1, #2
   16928:	18cb      	adds	r3, r1, r3
   1692a:	18db      	adds	r3, r3, r3
   1692c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1692e:	2376      	movs	r3, #118	; 0x76
   16930:	18fb      	adds	r3, r7, r3
   16932:	881a      	ldrh	r2, [r3, #0]
   16934:	2376      	movs	r3, #118	; 0x76
   16936:	18fb      	adds	r3, r7, r3
   16938:	3201      	adds	r2, #1
   1693a:	801a      	strh	r2, [r3, #0]
   1693c:	2376      	movs	r3, #118	; 0x76
   1693e:	18fb      	adds	r3, r7, r3
   16940:	881b      	ldrh	r3, [r3, #0]
   16942:	2b02      	cmp	r3, #2
   16944:	d9e9      	bls.n	1691a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16946:	2376      	movs	r3, #118	; 0x76
   16948:	18fb      	adds	r3, r7, r3
   1694a:	2201      	movs	r2, #1
   1694c:	801a      	strh	r2, [r3, #0]
   1694e:	e04b      	b.n	169e8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16950:	2376      	movs	r3, #118	; 0x76
   16952:	18fb      	adds	r3, r7, r3
   16954:	881a      	ldrh	r2, [r3, #0]
   16956:	4931      	ldr	r1, [pc, #196]	; (16a1c <rename_to_unique+0x29c>)
   16958:	2314      	movs	r3, #20
   1695a:	18fb      	adds	r3, r7, r3
   1695c:	0018      	movs	r0, r3
   1695e:	4b30      	ldr	r3, [pc, #192]	; (16a20 <rename_to_unique+0x2a0>)
   16960:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16962:	2374      	movs	r3, #116	; 0x74
   16964:	18fb      	adds	r3, r7, r3
   16966:	881b      	ldrh	r3, [r3, #0]
   16968:	2224      	movs	r2, #36	; 0x24
   1696a:	18ba      	adds	r2, r7, r2
   1696c:	18d3      	adds	r3, r2, r3
   1696e:	2214      	movs	r2, #20
   16970:	18b9      	adds	r1, r7, r2
   16972:	2203      	movs	r2, #3
   16974:	0018      	movs	r0, r3
   16976:	4b28      	ldr	r3, [pc, #160]	; (16a18 <rename_to_unique+0x298>)
   16978:	4798      	blx	r3
        if (valid_ext) {
   1697a:	2371      	movs	r3, #113	; 0x71
   1697c:	18fb      	adds	r3, r7, r3
   1697e:	781b      	ldrb	r3, [r3, #0]
   16980:	2b00      	cmp	r3, #0
   16982:	d00c      	beq.n	1699e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16984:	2374      	movs	r3, #116	; 0x74
   16986:	18fb      	adds	r3, r7, r3
   16988:	881b      	ldrh	r3, [r3, #0]
   1698a:	3303      	adds	r3, #3
   1698c:	2224      	movs	r2, #36	; 0x24
   1698e:	18ba      	adds	r2, r7, r2
   16990:	18d3      	adds	r3, r2, r3
   16992:	2218      	movs	r2, #24
   16994:	18ba      	adds	r2, r7, r2
   16996:	0011      	movs	r1, r2
   16998:	0018      	movs	r0, r3
   1699a:	4b1e      	ldr	r3, [pc, #120]	; (16a14 <rename_to_unique+0x294>)
   1699c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1699e:	2324      	movs	r3, #36	; 0x24
   169a0:	18fa      	adds	r2, r7, r3
   169a2:	68fb      	ldr	r3, [r7, #12]
   169a4:	0011      	movs	r1, r2
   169a6:	0018      	movs	r0, r3
   169a8:	4b17      	ldr	r3, [pc, #92]	; (16a08 <rename_to_unique+0x288>)
   169aa:	4798      	blx	r3
   169ac:	0003      	movs	r3, r0
   169ae:	001a      	movs	r2, r3
   169b0:	2301      	movs	r3, #1
   169b2:	4053      	eors	r3, r2
   169b4:	b2db      	uxtb	r3, r3
   169b6:	2b00      	cmp	r3, #0
   169b8:	d00f      	beq.n	169da <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   169ba:	1dfb      	adds	r3, r7, #7
   169bc:	781a      	ldrb	r2, [r3, #0]
   169be:	68bb      	ldr	r3, [r7, #8]
   169c0:	2100      	movs	r1, #0
   169c2:	0018      	movs	r0, r3
   169c4:	4b0f      	ldr	r3, [pc, #60]	; (16a04 <rename_to_unique+0x284>)
   169c6:	4798      	blx	r3
            strcpy(file_path_name, name);
   169c8:	2324      	movs	r3, #36	; 0x24
   169ca:	18fa      	adds	r2, r7, r3
   169cc:	68bb      	ldr	r3, [r7, #8]
   169ce:	0011      	movs	r1, r2
   169d0:	0018      	movs	r0, r3
   169d2:	4b10      	ldr	r3, [pc, #64]	; (16a14 <rename_to_unique+0x294>)
   169d4:	4798      	blx	r3
            return true;
   169d6:	2301      	movs	r3, #1
   169d8:	e00f      	b.n	169fa <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   169da:	2376      	movs	r3, #118	; 0x76
   169dc:	18fb      	adds	r3, r7, r3
   169de:	881a      	ldrh	r2, [r3, #0]
   169e0:	2376      	movs	r3, #118	; 0x76
   169e2:	18fb      	adds	r3, r7, r3
   169e4:	3201      	adds	r2, #1
   169e6:	801a      	strh	r2, [r3, #0]
   169e8:	2376      	movs	r3, #118	; 0x76
   169ea:	18fa      	adds	r2, r7, r3
   169ec:	2372      	movs	r3, #114	; 0x72
   169ee:	18fb      	adds	r3, r7, r3
   169f0:	8812      	ldrh	r2, [r2, #0]
   169f2:	881b      	ldrh	r3, [r3, #0]
   169f4:	429a      	cmp	r2, r3
   169f6:	d3ab      	bcc.n	16950 <rename_to_unique+0x1d0>
        }
    }
    return false;
   169f8:	2300      	movs	r3, #0
}
   169fa:	0018      	movs	r0, r3
   169fc:	46bd      	mov	sp, r7
   169fe:	b01e      	add	sp, #120	; 0x78
   16a00:	bd80      	pop	{r7, pc}
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	000356ef 	.word	0x000356ef
   16a08:	00016729 	.word	0x00016729
   16a0c:	00035aa7 	.word	0x00035aa7
   16a10:	00035b01 	.word	0x00035b01
   16a14:	00035a5b 	.word	0x00035a5b
   16a18:	00035ad7 	.word	0x00035ad7
   16a1c:	00037474 	.word	0x00037474
   16a20:	000359ad 	.word	0x000359ad

00016a24 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16a24:	b590      	push	{r4, r7, lr}
   16a26:	b083      	sub	sp, #12
   16a28:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16a2a:	2001      	movs	r0, #1
   16a2c:	4b22      	ldr	r3, [pc, #136]	; (16ab8 <start_download+0x94>)
   16a2e:	4798      	blx	r3
   16a30:	0003      	movs	r3, r0
   16a32:	001a      	movs	r2, r3
   16a34:	2301      	movs	r3, #1
   16a36:	4053      	eors	r3, r2
   16a38:	b2db      	uxtb	r3, r3
   16a3a:	2b00      	cmp	r3, #0
   16a3c:	d005      	beq.n	16a4a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16a3e:	4b1f      	ldr	r3, [pc, #124]	; (16abc <start_download+0x98>)
   16a40:	0019      	movs	r1, r3
   16a42:	2001      	movs	r0, #1
   16a44:	4b1e      	ldr	r3, [pc, #120]	; (16ac0 <start_download+0x9c>)
   16a46:	4798      	blx	r3
        return;
   16a48:	e032      	b.n	16ab0 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16a4a:	2002      	movs	r0, #2
   16a4c:	4b1a      	ldr	r3, [pc, #104]	; (16ab8 <start_download+0x94>)
   16a4e:	4798      	blx	r3
   16a50:	0003      	movs	r3, r0
   16a52:	001a      	movs	r2, r3
   16a54:	2301      	movs	r3, #1
   16a56:	4053      	eors	r3, r2
   16a58:	b2db      	uxtb	r3, r3
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d005      	beq.n	16a6a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16a5e:	4b19      	ldr	r3, [pc, #100]	; (16ac4 <start_download+0xa0>)
   16a60:	0019      	movs	r1, r3
   16a62:	2001      	movs	r0, #1
   16a64:	4b16      	ldr	r3, [pc, #88]	; (16ac0 <start_download+0x9c>)
   16a66:	4798      	blx	r3
        return;
   16a68:	e022      	b.n	16ab0 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16a6a:	2004      	movs	r0, #4
   16a6c:	4b12      	ldr	r3, [pc, #72]	; (16ab8 <start_download+0x94>)
   16a6e:	4798      	blx	r3
   16a70:	1e03      	subs	r3, r0, #0
   16a72:	d005      	beq.n	16a80 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16a74:	4b14      	ldr	r3, [pc, #80]	; (16ac8 <start_download+0xa4>)
   16a76:	0019      	movs	r1, r3
   16a78:	2001      	movs	r0, #1
   16a7a:	4b11      	ldr	r3, [pc, #68]	; (16ac0 <start_download+0x9c>)
   16a7c:	4798      	blx	r3
        return;
   16a7e:	e017      	b.n	16ab0 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16a80:	2008      	movs	r0, #8
   16a82:	4b0d      	ldr	r3, [pc, #52]	; (16ab8 <start_download+0x94>)
   16a84:	4798      	blx	r3
   16a86:	1e03      	subs	r3, r0, #0
   16a88:	d005      	beq.n	16a96 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16a8a:	4b10      	ldr	r3, [pc, #64]	; (16acc <start_download+0xa8>)
   16a8c:	0019      	movs	r1, r3
   16a8e:	2001      	movs	r0, #1
   16a90:	4b0b      	ldr	r3, [pc, #44]	; (16ac0 <start_download+0x9c>)
   16a92:	4798      	blx	r3
        return;
   16a94:	e00c      	b.n	16ab0 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16a96:	4b0e      	ldr	r3, [pc, #56]	; (16ad0 <start_download+0xac>)
   16a98:	0019      	movs	r1, r3
   16a9a:	2001      	movs	r0, #1
   16a9c:	4b08      	ldr	r3, [pc, #32]	; (16ac0 <start_download+0x9c>)
   16a9e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16aa0:	490c      	ldr	r1, [pc, #48]	; (16ad4 <start_download+0xb0>)
   16aa2:	480d      	ldr	r0, [pc, #52]	; (16ad8 <start_download+0xb4>)
   16aa4:	2300      	movs	r3, #0
   16aa6:	9300      	str	r3, [sp, #0]
   16aa8:	2300      	movs	r3, #0
   16aaa:	2201      	movs	r2, #1
   16aac:	4c0b      	ldr	r4, [pc, #44]	; (16adc <start_download+0xb8>)
   16aae:	47a0      	blx	r4
}
   16ab0:	46bd      	mov	sp, r7
   16ab2:	b001      	add	sp, #4
   16ab4:	bd90      	pop	{r4, r7, pc}
   16ab6:	46c0      	nop			; (mov r8, r8)
   16ab8:	000166fd 	.word	0x000166fd
   16abc:	0003747c 	.word	0x0003747c
   16ac0:	0001ea01 	.word	0x0001ea01
   16ac4:	000374a8 	.word	0x000374a8
   16ac8:	000374d4 	.word	0x000374d4
   16acc:	00037500 	.word	0x00037500
   16ad0:	0003752c 	.word	0x0003752c
   16ad4:	00037558 	.word	0x00037558
   16ad8:	2000499c 	.word	0x2000499c
   16adc:	00031c91 	.word	0x00031c91

00016ae0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16ae0:	b5b0      	push	{r4, r5, r7, lr}
   16ae2:	b086      	sub	sp, #24
   16ae4:	af00      	add	r7, sp, #0
   16ae6:	6078      	str	r0, [r7, #4]
   16ae8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16aea:	687b      	ldr	r3, [r7, #4]
   16aec:	2b00      	cmp	r3, #0
   16aee:	d002      	beq.n	16af6 <store_file_packet+0x16>
   16af0:	683b      	ldr	r3, [r7, #0]
   16af2:	2b00      	cmp	r3, #0
   16af4:	d105      	bne.n	16b02 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16af6:	4b58      	ldr	r3, [pc, #352]	; (16c58 <store_file_packet+0x178>)
   16af8:	0019      	movs	r1, r3
   16afa:	2001      	movs	r0, #1
   16afc:	4b57      	ldr	r3, [pc, #348]	; (16c5c <store_file_packet+0x17c>)
   16afe:	4798      	blx	r3
        return;
   16b00:	e0a6      	b.n	16c50 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16b02:	2008      	movs	r0, #8
   16b04:	4b56      	ldr	r3, [pc, #344]	; (16c60 <store_file_packet+0x180>)
   16b06:	4798      	blx	r3
   16b08:	0003      	movs	r3, r0
   16b0a:	001a      	movs	r2, r3
   16b0c:	2301      	movs	r3, #1
   16b0e:	4053      	eors	r3, r2
   16b10:	b2db      	uxtb	r3, r3
   16b12:	2b00      	cmp	r3, #0
   16b14:	d055      	beq.n	16bc2 <store_file_packet+0xe2>
        char *cp = NULL;
   16b16:	2300      	movs	r3, #0
   16b18:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16b1a:	4b52      	ldr	r3, [pc, #328]	; (16c64 <store_file_packet+0x184>)
   16b1c:	2230      	movs	r2, #48	; 0x30
   16b1e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16b20:	4b50      	ldr	r3, [pc, #320]	; (16c64 <store_file_packet+0x184>)
   16b22:	223a      	movs	r2, #58	; 0x3a
   16b24:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16b26:	4b50      	ldr	r3, [pc, #320]	; (16c68 <store_file_packet+0x188>)
   16b28:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16b2a:	e002      	b.n	16b32 <store_file_packet+0x52>
            cp--;
   16b2c:	697b      	ldr	r3, [r7, #20]
   16b2e:	3b01      	subs	r3, #1
   16b30:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16b32:	697b      	ldr	r3, [r7, #20]
   16b34:	781b      	ldrb	r3, [r3, #0]
   16b36:	2b2f      	cmp	r3, #47	; 0x2f
   16b38:	d1f8      	bne.n	16b2c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16b3a:	697b      	ldr	r3, [r7, #20]
   16b3c:	0018      	movs	r0, r3
   16b3e:	4b4b      	ldr	r3, [pc, #300]	; (16c6c <store_file_packet+0x18c>)
   16b40:	4798      	blx	r3
   16b42:	0003      	movs	r3, r0
   16b44:	2b01      	cmp	r3, #1
   16b46:	d924      	bls.n	16b92 <store_file_packet+0xb2>
            cp++;
   16b48:	697b      	ldr	r3, [r7, #20]
   16b4a:	3301      	adds	r3, #1
   16b4c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16b4e:	697a      	ldr	r2, [r7, #20]
   16b50:	4b47      	ldr	r3, [pc, #284]	; (16c70 <store_file_packet+0x190>)
   16b52:	0011      	movs	r1, r2
   16b54:	0018      	movs	r0, r3
   16b56:	4b47      	ldr	r3, [pc, #284]	; (16c74 <store_file_packet+0x194>)
   16b58:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16b5a:	4942      	ldr	r1, [pc, #264]	; (16c64 <store_file_packet+0x184>)
   16b5c:	4b46      	ldr	r3, [pc, #280]	; (16c78 <store_file_packet+0x198>)
   16b5e:	2240      	movs	r2, #64	; 0x40
   16b60:	0018      	movs	r0, r3
   16b62:	4b46      	ldr	r3, [pc, #280]	; (16c7c <store_file_packet+0x19c>)
   16b64:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16b66:	4a3f      	ldr	r2, [pc, #252]	; (16c64 <store_file_packet+0x184>)
   16b68:	4b45      	ldr	r3, [pc, #276]	; (16c80 <store_file_packet+0x1a0>)
   16b6a:	0019      	movs	r1, r3
   16b6c:	2001      	movs	r0, #1
   16b6e:	4b3b      	ldr	r3, [pc, #236]	; (16c5c <store_file_packet+0x17c>)
   16b70:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16b72:	2313      	movs	r3, #19
   16b74:	18fc      	adds	r4, r7, r3
   16b76:	493b      	ldr	r1, [pc, #236]	; (16c64 <store_file_packet+0x184>)
   16b78:	4b3f      	ldr	r3, [pc, #252]	; (16c78 <store_file_packet+0x198>)
   16b7a:	220a      	movs	r2, #10
   16b7c:	0018      	movs	r0, r3
   16b7e:	4b41      	ldr	r3, [pc, #260]	; (16c84 <store_file_packet+0x1a4>)
   16b80:	4798      	blx	r3
   16b82:	0003      	movs	r3, r0
   16b84:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16b86:	2313      	movs	r3, #19
   16b88:	18fb      	adds	r3, r7, r3
   16b8a:	781b      	ldrb	r3, [r3, #0]
   16b8c:	2b00      	cmp	r3, #0
   16b8e:	d012      	beq.n	16bb6 <store_file_packet+0xd6>
   16b90:	e008      	b.n	16ba4 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16b92:	4b3d      	ldr	r3, [pc, #244]	; (16c88 <store_file_packet+0x1a8>)
   16b94:	0019      	movs	r1, r3
   16b96:	2001      	movs	r0, #1
   16b98:	4b30      	ldr	r3, [pc, #192]	; (16c5c <store_file_packet+0x17c>)
   16b9a:	4798      	blx	r3
            add_state(CANCELED);
   16b9c:	2020      	movs	r0, #32
   16b9e:	4b3b      	ldr	r3, [pc, #236]	; (16c8c <store_file_packet+0x1ac>)
   16ba0:	4798      	blx	r3
            return;
   16ba2:	e055      	b.n	16c50 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16ba4:	2313      	movs	r3, #19
   16ba6:	18fb      	adds	r3, r7, r3
   16ba8:	781a      	ldrb	r2, [r3, #0]
   16baa:	4b39      	ldr	r3, [pc, #228]	; (16c90 <store_file_packet+0x1b0>)
   16bac:	0019      	movs	r1, r3
   16bae:	2001      	movs	r0, #1
   16bb0:	4b2a      	ldr	r3, [pc, #168]	; (16c5c <store_file_packet+0x17c>)
   16bb2:	4798      	blx	r3
            return;
   16bb4:	e04c      	b.n	16c50 <store_file_packet+0x170>
        }

        received_file_size = 0;
   16bb6:	4b37      	ldr	r3, [pc, #220]	; (16c94 <store_file_packet+0x1b4>)
   16bb8:	2200      	movs	r2, #0
   16bba:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16bbc:	2008      	movs	r0, #8
   16bbe:	4b33      	ldr	r3, [pc, #204]	; (16c8c <store_file_packet+0x1ac>)
   16bc0:	4798      	blx	r3
    }

    if (data != NULL) {
   16bc2:	687b      	ldr	r3, [r7, #4]
   16bc4:	2b00      	cmp	r3, #0
   16bc6:	d043      	beq.n	16c50 <store_file_packet+0x170>
        UINT wsize = 0;
   16bc8:	2300      	movs	r3, #0
   16bca:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16bcc:	2313      	movs	r3, #19
   16bce:	18fc      	adds	r4, r7, r3
   16bd0:	230c      	movs	r3, #12
   16bd2:	18fb      	adds	r3, r7, r3
   16bd4:	683a      	ldr	r2, [r7, #0]
   16bd6:	6879      	ldr	r1, [r7, #4]
   16bd8:	4827      	ldr	r0, [pc, #156]	; (16c78 <store_file_packet+0x198>)
   16bda:	4d2f      	ldr	r5, [pc, #188]	; (16c98 <store_file_packet+0x1b8>)
   16bdc:	47a8      	blx	r5
   16bde:	0003      	movs	r3, r0
   16be0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16be2:	2313      	movs	r3, #19
   16be4:	18fb      	adds	r3, r7, r3
   16be6:	781b      	ldrb	r3, [r3, #0]
   16be8:	2b00      	cmp	r3, #0
   16bea:	d00c      	beq.n	16c06 <store_file_packet+0x126>
            f_close(&file_object);
   16bec:	4b22      	ldr	r3, [pc, #136]	; (16c78 <store_file_packet+0x198>)
   16bee:	0018      	movs	r0, r3
   16bf0:	4b2a      	ldr	r3, [pc, #168]	; (16c9c <store_file_packet+0x1bc>)
   16bf2:	4798      	blx	r3
            add_state(CANCELED);
   16bf4:	2020      	movs	r0, #32
   16bf6:	4b25      	ldr	r3, [pc, #148]	; (16c8c <store_file_packet+0x1ac>)
   16bf8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16bfa:	4b29      	ldr	r3, [pc, #164]	; (16ca0 <store_file_packet+0x1c0>)
   16bfc:	0019      	movs	r1, r3
   16bfe:	2001      	movs	r0, #1
   16c00:	4b16      	ldr	r3, [pc, #88]	; (16c5c <store_file_packet+0x17c>)
   16c02:	4798      	blx	r3
            return;
   16c04:	e024      	b.n	16c50 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16c06:	4b23      	ldr	r3, [pc, #140]	; (16c94 <store_file_packet+0x1b4>)
   16c08:	681a      	ldr	r2, [r3, #0]
   16c0a:	68fb      	ldr	r3, [r7, #12]
   16c0c:	18d2      	adds	r2, r2, r3
   16c0e:	4b21      	ldr	r3, [pc, #132]	; (16c94 <store_file_packet+0x1b4>)
   16c10:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16c12:	4b20      	ldr	r3, [pc, #128]	; (16c94 <store_file_packet+0x1b4>)
   16c14:	681a      	ldr	r2, [r3, #0]
   16c16:	4b23      	ldr	r3, [pc, #140]	; (16ca4 <store_file_packet+0x1c4>)
   16c18:	681b      	ldr	r3, [r3, #0]
   16c1a:	4923      	ldr	r1, [pc, #140]	; (16ca8 <store_file_packet+0x1c8>)
   16c1c:	2001      	movs	r0, #1
   16c1e:	4c0f      	ldr	r4, [pc, #60]	; (16c5c <store_file_packet+0x17c>)
   16c20:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16c22:	4b1c      	ldr	r3, [pc, #112]	; (16c94 <store_file_packet+0x1b4>)
   16c24:	681a      	ldr	r2, [r3, #0]
   16c26:	4b1f      	ldr	r3, [pc, #124]	; (16ca4 <store_file_packet+0x1c4>)
   16c28:	681b      	ldr	r3, [r3, #0]
   16c2a:	429a      	cmp	r2, r3
   16c2c:	d310      	bcc.n	16c50 <store_file_packet+0x170>
            f_close(&file_object);
   16c2e:	4b12      	ldr	r3, [pc, #72]	; (16c78 <store_file_packet+0x198>)
   16c30:	0018      	movs	r0, r3
   16c32:	4b1a      	ldr	r3, [pc, #104]	; (16c9c <store_file_packet+0x1bc>)
   16c34:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16c36:	4b1d      	ldr	r3, [pc, #116]	; (16cac <store_file_packet+0x1cc>)
   16c38:	0019      	movs	r1, r3
   16c3a:	2001      	movs	r0, #1
   16c3c:	4b07      	ldr	r3, [pc, #28]	; (16c5c <store_file_packet+0x17c>)
   16c3e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16c40:	2100      	movs	r1, #0
   16c42:	2017      	movs	r0, #23
   16c44:	4b1a      	ldr	r3, [pc, #104]	; (16cb0 <store_file_packet+0x1d0>)
   16c46:	4798      	blx	r3
            add_state(COMPLETED);
   16c48:	2010      	movs	r0, #16
   16c4a:	4b10      	ldr	r3, [pc, #64]	; (16c8c <store_file_packet+0x1ac>)
   16c4c:	4798      	blx	r3
            return;
   16c4e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16c50:	46bd      	mov	sp, r7
   16c52:	b006      	add	sp, #24
   16c54:	bdb0      	pop	{r4, r5, r7, pc}
   16c56:	46c0      	nop			; (mov r8, r8)
   16c58:	00037578 	.word	0x00037578
   16c5c:	0001ea01 	.word	0x0001ea01
   16c60:	000166fd 	.word	0x000166fd
   16c64:	200000b4 	.word	0x200000b4
   16c68:	00037577 	.word	0x00037577
   16c6c:	00035aa7 	.word	0x00035aa7
   16c70:	200000b6 	.word	0x200000b6
   16c74:	00035a5b 	.word	0x00035a5b
   16c78:	20000870 	.word	0x20000870
   16c7c:	00016781 	.word	0x00016781
   16c80:	000375dc 	.word	0x000375dc
   16c84:	0002e63d 	.word	0x0002e63d
   16c88:	0003759c 	.word	0x0003759c
   16c8c:	000166d5 	.word	0x000166d5
   16c90:	00037604 	.word	0x00037604
   16c94:	20000898 	.word	0x20000898
   16c98:	0002eb6d 	.word	0x0002eb6d
   16c9c:	0002f03d 	.word	0x0002f03d
   16ca0:	00037638 	.word	0x00037638
   16ca4:	20000894 	.word	0x20000894
   16ca8:	00037674 	.word	0x00037674
   16cac:	000376a8 	.word	0x000376a8
   16cb0:	00016639 	.word	0x00016639

00016cb4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16cb4:	b590      	push	{r4, r7, lr}
   16cb6:	b085      	sub	sp, #20
   16cb8:	af00      	add	r7, sp, #0
   16cba:	60f8      	str	r0, [r7, #12]
   16cbc:	60b9      	str	r1, [r7, #8]
   16cbe:	607a      	str	r2, [r7, #4]
    switch (type) {
   16cc0:	68bb      	ldr	r3, [r7, #8]
   16cc2:	2b04      	cmp	r3, #4
   16cc4:	d900      	bls.n	16cc8 <http_client_callback+0x14>
   16cc6:	e077      	b.n	16db8 <http_client_callback+0x104>
   16cc8:	68bb      	ldr	r3, [r7, #8]
   16cca:	009a      	lsls	r2, r3, #2
   16ccc:	4b3c      	ldr	r3, [pc, #240]	; (16dc0 <http_client_callback+0x10c>)
   16cce:	18d3      	adds	r3, r2, r3
   16cd0:	681b      	ldr	r3, [r3, #0]
   16cd2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16cd4:	4b3b      	ldr	r3, [pc, #236]	; (16dc4 <http_client_callback+0x110>)
   16cd6:	0019      	movs	r1, r3
   16cd8:	2001      	movs	r0, #1
   16cda:	4b3b      	ldr	r3, [pc, #236]	; (16dc8 <http_client_callback+0x114>)
   16cdc:	4798      	blx	r3
            break;
   16cde:	e06b      	b.n	16db8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16ce0:	4b3a      	ldr	r3, [pc, #232]	; (16dcc <http_client_callback+0x118>)
   16ce2:	0019      	movs	r1, r3
   16ce4:	2001      	movs	r0, #1
   16ce6:	4b38      	ldr	r3, [pc, #224]	; (16dc8 <http_client_callback+0x114>)
   16ce8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16cea:	2004      	movs	r0, #4
   16cec:	4b38      	ldr	r3, [pc, #224]	; (16dd0 <http_client_callback+0x11c>)
   16cee:	4798      	blx	r3
            break;
   16cf0:	e062      	b.n	16db8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   16cf2:	687b      	ldr	r3, [r7, #4]
   16cf4:	881b      	ldrh	r3, [r3, #0]
   16cf6:	001a      	movs	r2, r3
   16cf8:	687b      	ldr	r3, [r7, #4]
   16cfa:	685b      	ldr	r3, [r3, #4]
   16cfc:	4935      	ldr	r1, [pc, #212]	; (16dd4 <http_client_callback+0x120>)
   16cfe:	2001      	movs	r0, #1
   16d00:	4c31      	ldr	r4, [pc, #196]	; (16dc8 <http_client_callback+0x114>)
   16d02:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16d04:	687b      	ldr	r3, [r7, #4]
   16d06:	881b      	ldrh	r3, [r3, #0]
   16d08:	2bc8      	cmp	r3, #200	; 0xc8
   16d0a:	d10d      	bne.n	16d28 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16d0c:	687b      	ldr	r3, [r7, #4]
   16d0e:	685a      	ldr	r2, [r3, #4]
   16d10:	4b31      	ldr	r3, [pc, #196]	; (16dd8 <http_client_callback+0x124>)
   16d12:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16d14:	4b31      	ldr	r3, [pc, #196]	; (16ddc <http_client_callback+0x128>)
   16d16:	2200      	movs	r2, #0
   16d18:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16d1a:	687b      	ldr	r3, [r7, #4]
   16d1c:	685a      	ldr	r2, [r3, #4]
   16d1e:	2380      	movs	r3, #128	; 0x80
   16d20:	009b      	lsls	r3, r3, #2
   16d22:	429a      	cmp	r2, r3
   16d24:	d843      	bhi.n	16dae <http_client_callback+0xfa>
   16d26:	e003      	b.n	16d30 <http_client_callback+0x7c>
                add_state(CANCELED);
   16d28:	2020      	movs	r0, #32
   16d2a:	4b29      	ldr	r3, [pc, #164]	; (16dd0 <http_client_callback+0x11c>)
   16d2c:	4798      	blx	r3
                return;
   16d2e:	e043      	b.n	16db8 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16d30:	687b      	ldr	r3, [r7, #4]
   16d32:	689a      	ldr	r2, [r3, #8]
   16d34:	687b      	ldr	r3, [r7, #4]
   16d36:	685b      	ldr	r3, [r3, #4]
   16d38:	0019      	movs	r1, r3
   16d3a:	0010      	movs	r0, r2
   16d3c:	4b28      	ldr	r3, [pc, #160]	; (16de0 <http_client_callback+0x12c>)
   16d3e:	4798      	blx	r3
                add_state(COMPLETED);
   16d40:	2010      	movs	r0, #16
   16d42:	4b23      	ldr	r3, [pc, #140]	; (16dd0 <http_client_callback+0x11c>)
   16d44:	4798      	blx	r3
            }
            break;
   16d46:	e032      	b.n	16dae <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16d48:	687b      	ldr	r3, [r7, #4]
   16d4a:	685a      	ldr	r2, [r3, #4]
   16d4c:	687b      	ldr	r3, [r7, #4]
   16d4e:	681b      	ldr	r3, [r3, #0]
   16d50:	0019      	movs	r1, r3
   16d52:	0010      	movs	r0, r2
   16d54:	4b22      	ldr	r3, [pc, #136]	; (16de0 <http_client_callback+0x12c>)
   16d56:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   16d58:	687b      	ldr	r3, [r7, #4]
   16d5a:	7a1b      	ldrb	r3, [r3, #8]
   16d5c:	2b00      	cmp	r3, #0
   16d5e:	d028      	beq.n	16db2 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16d60:	2010      	movs	r0, #16
   16d62:	4b1b      	ldr	r3, [pc, #108]	; (16dd0 <http_client_callback+0x11c>)
   16d64:	4798      	blx	r3
            }

            break;
   16d66:	e024      	b.n	16db2 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16d68:	687b      	ldr	r3, [r7, #4]
   16d6a:	681a      	ldr	r2, [r3, #0]
   16d6c:	4b1d      	ldr	r3, [pc, #116]	; (16de4 <http_client_callback+0x130>)
   16d6e:	0019      	movs	r1, r3
   16d70:	2001      	movs	r0, #1
   16d72:	4b15      	ldr	r3, [pc, #84]	; (16dc8 <http_client_callback+0x114>)
   16d74:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16d76:	687b      	ldr	r3, [r7, #4]
   16d78:	681b      	ldr	r3, [r3, #0]
   16d7a:	330b      	adds	r3, #11
   16d7c:	d11b      	bne.n	16db6 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16d7e:	2008      	movs	r0, #8
   16d80:	4b19      	ldr	r3, [pc, #100]	; (16de8 <http_client_callback+0x134>)
   16d82:	4798      	blx	r3
   16d84:	1e03      	subs	r3, r0, #0
   16d86:	d006      	beq.n	16d96 <http_client_callback+0xe2>
                    f_close(&file_object);
   16d88:	4b18      	ldr	r3, [pc, #96]	; (16dec <http_client_callback+0x138>)
   16d8a:	0018      	movs	r0, r3
   16d8c:	4b18      	ldr	r3, [pc, #96]	; (16df0 <http_client_callback+0x13c>)
   16d8e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16d90:	2008      	movs	r0, #8
   16d92:	4b18      	ldr	r3, [pc, #96]	; (16df4 <http_client_callback+0x140>)
   16d94:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16d96:	2004      	movs	r0, #4
   16d98:	4b13      	ldr	r3, [pc, #76]	; (16de8 <http_client_callback+0x134>)
   16d9a:	4798      	blx	r3
   16d9c:	1e03      	subs	r3, r0, #0
   16d9e:	d002      	beq.n	16da6 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16da0:	2004      	movs	r0, #4
   16da2:	4b14      	ldr	r3, [pc, #80]	; (16df4 <http_client_callback+0x140>)
   16da4:	4798      	blx	r3
                }

                start_download();
   16da6:	4b14      	ldr	r3, [pc, #80]	; (16df8 <http_client_callback+0x144>)
   16da8:	4798      	blx	r3
            }

            break;
   16daa:	46c0      	nop			; (mov r8, r8)
   16dac:	e003      	b.n	16db6 <http_client_callback+0x102>
            break;
   16dae:	46c0      	nop			; (mov r8, r8)
   16db0:	e002      	b.n	16db8 <http_client_callback+0x104>
            break;
   16db2:	46c0      	nop			; (mov r8, r8)
   16db4:	e000      	b.n	16db8 <http_client_callback+0x104>
            break;
   16db6:	46c0      	nop			; (mov r8, r8)
    }
}
   16db8:	46bd      	mov	sp, r7
   16dba:	b005      	add	sp, #20
   16dbc:	bd90      	pop	{r4, r7, pc}
   16dbe:	46c0      	nop			; (mov r8, r8)
   16dc0:	00037df0 	.word	0x00037df0
   16dc4:	000376dc 	.word	0x000376dc
   16dc8:	0001ea01 	.word	0x0001ea01
   16dcc:	00037714 	.word	0x00037714
   16dd0:	000166d5 	.word	0x000166d5
   16dd4:	00037740 	.word	0x00037740
   16dd8:	20000894 	.word	0x20000894
   16ddc:	20000898 	.word	0x20000898
   16de0:	00016ae1 	.word	0x00016ae1
   16de4:	0003777c 	.word	0x0003777c
   16de8:	000166fd 	.word	0x000166fd
   16dec:	20000870 	.word	0x20000870
   16df0:	0002f03d 	.word	0x0002f03d
   16df4:	000166a1 	.word	0x000166a1
   16df8:	00016a25 	.word	0x00016a25

00016dfc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16dfc:	b580      	push	{r7, lr}
   16dfe:	b082      	sub	sp, #8
   16e00:	af00      	add	r7, sp, #0
   16e02:	603a      	str	r2, [r7, #0]
   16e04:	1dfb      	adds	r3, r7, #7
   16e06:	1c02      	adds	r2, r0, #0
   16e08:	701a      	strb	r2, [r3, #0]
   16e0a:	1dbb      	adds	r3, r7, #6
   16e0c:	1c0a      	adds	r2, r1, #0
   16e0e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16e10:	683a      	ldr	r2, [r7, #0]
   16e12:	1dbb      	adds	r3, r7, #6
   16e14:	7819      	ldrb	r1, [r3, #0]
   16e16:	1dfb      	adds	r3, r7, #7
   16e18:	781b      	ldrb	r3, [r3, #0]
   16e1a:	b25b      	sxtb	r3, r3
   16e1c:	0018      	movs	r0, r3
   16e1e:	4b03      	ldr	r3, [pc, #12]	; (16e2c <socket_cb+0x30>)
   16e20:	4798      	blx	r3
}
   16e22:	46c0      	nop			; (mov r8, r8)
   16e24:	46bd      	mov	sp, r7
   16e26:	b002      	add	sp, #8
   16e28:	bd80      	pop	{r7, pc}
   16e2a:	46c0      	nop			; (mov r8, r8)
   16e2c:	000319a1 	.word	0x000319a1

00016e30 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16e30:	b5b0      	push	{r4, r5, r7, lr}
   16e32:	b086      	sub	sp, #24
   16e34:	af04      	add	r7, sp, #16
   16e36:	6078      	str	r0, [r7, #4]
   16e38:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16e3a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16e3c:	22ff      	movs	r2, #255	; 0xff
   16e3e:	4013      	ands	r3, r2
   16e40:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16e42:	683b      	ldr	r3, [r7, #0]
   16e44:	0a1b      	lsrs	r3, r3, #8
   16e46:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16e48:	23ff      	movs	r3, #255	; 0xff
   16e4a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16e4c:	683a      	ldr	r2, [r7, #0]
   16e4e:	0c12      	lsrs	r2, r2, #16
   16e50:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16e52:	22ff      	movs	r2, #255	; 0xff
   16e54:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16e56:	6839      	ldr	r1, [r7, #0]
   16e58:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16e5a:	000d      	movs	r5, r1
   16e5c:	6878      	ldr	r0, [r7, #4]
   16e5e:	4909      	ldr	r1, [pc, #36]	; (16e84 <resolve_cb+0x54>)
   16e60:	9502      	str	r5, [sp, #8]
   16e62:	9201      	str	r2, [sp, #4]
   16e64:	9300      	str	r3, [sp, #0]
   16e66:	0023      	movs	r3, r4
   16e68:	0002      	movs	r2, r0
   16e6a:	2001      	movs	r0, #1
   16e6c:	4c06      	ldr	r4, [pc, #24]	; (16e88 <resolve_cb+0x58>)
   16e6e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16e70:	683a      	ldr	r2, [r7, #0]
   16e72:	687b      	ldr	r3, [r7, #4]
   16e74:	0011      	movs	r1, r2
   16e76:	0018      	movs	r0, r3
   16e78:	4b04      	ldr	r3, [pc, #16]	; (16e8c <resolve_cb+0x5c>)
   16e7a:	4798      	blx	r3
}
   16e7c:	46c0      	nop			; (mov r8, r8)
   16e7e:	46bd      	mov	sp, r7
   16e80:	b002      	add	sp, #8
   16e82:	bdb0      	pop	{r4, r5, r7, pc}
   16e84:	000377ac 	.word	0x000377ac
   16e88:	0001ea01 	.word	0x0001ea01
   16e8c:	00031b05 	.word	0x00031b05

00016e90 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16e90:	b590      	push	{r4, r7, lr}
   16e92:	b087      	sub	sp, #28
   16e94:	af02      	add	r7, sp, #8
   16e96:	0002      	movs	r2, r0
   16e98:	6039      	str	r1, [r7, #0]
   16e9a:	1dfb      	adds	r3, r7, #7
   16e9c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16e9e:	1dfb      	adds	r3, r7, #7
   16ea0:	781b      	ldrb	r3, [r3, #0]
   16ea2:	2b2c      	cmp	r3, #44	; 0x2c
   16ea4:	d002      	beq.n	16eac <wifi_cb+0x1c>
   16ea6:	2b32      	cmp	r3, #50	; 0x32
   16ea8:	d03d      	beq.n	16f26 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16eaa:	e06f      	b.n	16f8c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16eac:	683b      	ldr	r3, [r7, #0]
   16eae:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16eb0:	68fb      	ldr	r3, [r7, #12]
   16eb2:	781b      	ldrb	r3, [r3, #0]
   16eb4:	2b01      	cmp	r3, #1
   16eb6:	d107      	bne.n	16ec8 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16eb8:	4b36      	ldr	r3, [pc, #216]	; (16f94 <wifi_cb+0x104>)
   16eba:	0019      	movs	r1, r3
   16ebc:	2001      	movs	r0, #1
   16ebe:	4b36      	ldr	r3, [pc, #216]	; (16f98 <wifi_cb+0x108>)
   16ec0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   16ec2:	4b36      	ldr	r3, [pc, #216]	; (16f9c <wifi_cb+0x10c>)
   16ec4:	4798      	blx	r3
            break;
   16ec6:	e05e      	b.n	16f86 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16ec8:	68fb      	ldr	r3, [r7, #12]
   16eca:	781b      	ldrb	r3, [r3, #0]
   16ecc:	2b00      	cmp	r3, #0
   16ece:	d15a      	bne.n	16f86 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16ed0:	4b33      	ldr	r3, [pc, #204]	; (16fa0 <wifi_cb+0x110>)
   16ed2:	0019      	movs	r1, r3
   16ed4:	2001      	movs	r0, #1
   16ed6:	4b30      	ldr	r3, [pc, #192]	; (16f98 <wifi_cb+0x108>)
   16ed8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16eda:	2002      	movs	r0, #2
   16edc:	4b31      	ldr	r3, [pc, #196]	; (16fa4 <wifi_cb+0x114>)
   16ede:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16ee0:	2008      	movs	r0, #8
   16ee2:	4b31      	ldr	r3, [pc, #196]	; (16fa8 <wifi_cb+0x118>)
   16ee4:	4798      	blx	r3
   16ee6:	1e03      	subs	r3, r0, #0
   16ee8:	d006      	beq.n	16ef8 <wifi_cb+0x68>
                    f_close(&file_object);
   16eea:	4b30      	ldr	r3, [pc, #192]	; (16fac <wifi_cb+0x11c>)
   16eec:	0018      	movs	r0, r3
   16eee:	4b30      	ldr	r3, [pc, #192]	; (16fb0 <wifi_cb+0x120>)
   16ef0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16ef2:	2008      	movs	r0, #8
   16ef4:	4b2b      	ldr	r3, [pc, #172]	; (16fa4 <wifi_cb+0x114>)
   16ef6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16ef8:	2004      	movs	r0, #4
   16efa:	4b2b      	ldr	r3, [pc, #172]	; (16fa8 <wifi_cb+0x118>)
   16efc:	4798      	blx	r3
   16efe:	1e03      	subs	r3, r0, #0
   16f00:	d002      	beq.n	16f08 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   16f02:	2004      	movs	r0, #4
   16f04:	4b27      	ldr	r3, [pc, #156]	; (16fa4 <wifi_cb+0x114>)
   16f06:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16f08:	4b2a      	ldr	r3, [pc, #168]	; (16fb4 <wifi_cb+0x124>)
   16f0a:	2101      	movs	r1, #1
   16f0c:	0018      	movs	r0, r3
   16f0e:	4b2a      	ldr	r3, [pc, #168]	; (16fb8 <wifi_cb+0x128>)
   16f10:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16f12:	4a2a      	ldr	r2, [pc, #168]	; (16fbc <wifi_cb+0x12c>)
   16f14:	482a      	ldr	r0, [pc, #168]	; (16fc0 <wifi_cb+0x130>)
   16f16:	23ff      	movs	r3, #255	; 0xff
   16f18:	9300      	str	r3, [sp, #0]
   16f1a:	0013      	movs	r3, r2
   16f1c:	2202      	movs	r2, #2
   16f1e:	2102      	movs	r1, #2
   16f20:	4c28      	ldr	r4, [pc, #160]	; (16fc4 <wifi_cb+0x134>)
   16f22:	47a0      	blx	r4
            break;
   16f24:	e02f      	b.n	16f86 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16f26:	683b      	ldr	r3, [r7, #0]
   16f28:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16f2a:	68bb      	ldr	r3, [r7, #8]
   16f2c:	781b      	ldrb	r3, [r3, #0]
   16f2e:	0018      	movs	r0, r3
   16f30:	68bb      	ldr	r3, [r7, #8]
   16f32:	3301      	adds	r3, #1
   16f34:	781b      	ldrb	r3, [r3, #0]
   16f36:	001c      	movs	r4, r3
   16f38:	68bb      	ldr	r3, [r7, #8]
   16f3a:	3302      	adds	r3, #2
   16f3c:	781b      	ldrb	r3, [r3, #0]
   16f3e:	001a      	movs	r2, r3
   16f40:	68bb      	ldr	r3, [r7, #8]
   16f42:	3303      	adds	r3, #3
   16f44:	781b      	ldrb	r3, [r3, #0]
   16f46:	4920      	ldr	r1, [pc, #128]	; (16fc8 <wifi_cb+0x138>)
   16f48:	9301      	str	r3, [sp, #4]
   16f4a:	9200      	str	r2, [sp, #0]
   16f4c:	0023      	movs	r3, r4
   16f4e:	0002      	movs	r2, r0
   16f50:	2001      	movs	r0, #1
   16f52:	4c11      	ldr	r4, [pc, #68]	; (16f98 <wifi_cb+0x108>)
   16f54:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16f56:	2002      	movs	r0, #2
   16f58:	4b1c      	ldr	r3, [pc, #112]	; (16fcc <wifi_cb+0x13c>)
   16f5a:	4798      	blx	r3
            if (do_download_flag == 1) {
   16f5c:	4b1c      	ldr	r3, [pc, #112]	; (16fd0 <wifi_cb+0x140>)
   16f5e:	781b      	ldrb	r3, [r3, #0]
   16f60:	2b01      	cmp	r3, #1
   16f62:	d102      	bne.n	16f6a <wifi_cb+0xda>
                start_download();
   16f64:	4b1b      	ldr	r3, [pc, #108]	; (16fd4 <wifi_cb+0x144>)
   16f66:	4798      	blx	r3
        } break;
   16f68:	e00f      	b.n	16f8a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16f6a:	4a1b      	ldr	r2, [pc, #108]	; (16fd8 <wifi_cb+0x148>)
   16f6c:	4b11      	ldr	r3, [pc, #68]	; (16fb4 <wifi_cb+0x124>)
   16f6e:	0011      	movs	r1, r2
   16f70:	0018      	movs	r0, r3
   16f72:	4b1a      	ldr	r3, [pc, #104]	; (16fdc <wifi_cb+0x14c>)
   16f74:	4798      	blx	r3
   16f76:	1e03      	subs	r3, r0, #0
   16f78:	d007      	beq.n	16f8a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16f7a:	4b19      	ldr	r3, [pc, #100]	; (16fe0 <wifi_cb+0x150>)
   16f7c:	0019      	movs	r1, r3
   16f7e:	2001      	movs	r0, #1
   16f80:	4b05      	ldr	r3, [pc, #20]	; (16f98 <wifi_cb+0x108>)
   16f82:	4798      	blx	r3
        } break;
   16f84:	e001      	b.n	16f8a <wifi_cb+0xfa>
            break;
   16f86:	46c0      	nop			; (mov r8, r8)
   16f88:	e000      	b.n	16f8c <wifi_cb+0xfc>
        } break;
   16f8a:	46c0      	nop			; (mov r8, r8)
    }
}
   16f8c:	46c0      	nop			; (mov r8, r8)
   16f8e:	46bd      	mov	sp, r7
   16f90:	b005      	add	sp, #20
   16f92:	bd90      	pop	{r4, r7, pc}
   16f94:	000377dc 	.word	0x000377dc
   16f98:	0001ea01 	.word	0x0001ea01
   16f9c:	00023045 	.word	0x00023045
   16fa0:	000377fc 	.word	0x000377fc
   16fa4:	000166a1 	.word	0x000166a1
   16fa8:	000166fd 	.word	0x000166fd
   16fac:	20000870 	.word	0x20000870
   16fb0:	0002f03d 	.word	0x0002f03d
   16fb4:	2000089c 	.word	0x2000089c
   16fb8:	0003064d 	.word	0x0003064d
   16fbc:	00037820 	.word	0x00037820
   16fc0:	0003782c 	.word	0x0003782c
   16fc4:	00022b71 	.word	0x00022b71
   16fc8:	00037830 	.word	0x00037830
   16fcc:	000166d5 	.word	0x000166d5
   16fd0:	2000063c 	.word	0x2000063c
   16fd4:	00016a25 	.word	0x00016a25
   16fd8:	00037460 	.word	0x00037460
   16fdc:	00030519 	.word	0x00030519
   16fe0:	00037858 	.word	0x00037858

00016fe4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   16fe4:	b590      	push	{r4, r7, lr}
   16fe6:	b083      	sub	sp, #12
   16fe8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   16fea:	4b29      	ldr	r3, [pc, #164]	; (17090 <init_storage+0xac>)
   16fec:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   16fee:	4b29      	ldr	r3, [pc, #164]	; (17094 <init_storage+0xb0>)
   16ff0:	0019      	movs	r1, r3
   16ff2:	2001      	movs	r0, #1
   16ff4:	4b28      	ldr	r3, [pc, #160]	; (17098 <init_storage+0xb4>)
   16ff6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   16ff8:	1dfc      	adds	r4, r7, #7
   16ffa:	2000      	movs	r0, #0
   16ffc:	4b27      	ldr	r3, [pc, #156]	; (1709c <init_storage+0xb8>)
   16ffe:	4798      	blx	r3
   17000:	0003      	movs	r3, r0
   17002:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   17004:	1dfb      	adds	r3, r7, #7
   17006:	781b      	ldrb	r3, [r3, #0]
   17008:	2b01      	cmp	r3, #1
   1700a:	d110      	bne.n	1702e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   1700c:	4b24      	ldr	r3, [pc, #144]	; (170a0 <init_storage+0xbc>)
   1700e:	0019      	movs	r1, r3
   17010:	2001      	movs	r0, #1
   17012:	4b21      	ldr	r3, [pc, #132]	; (17098 <init_storage+0xb4>)
   17014:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   17016:	4b23      	ldr	r3, [pc, #140]	; (170a4 <init_storage+0xc0>)
   17018:	0019      	movs	r1, r3
   1701a:	2001      	movs	r0, #1
   1701c:	4b1e      	ldr	r3, [pc, #120]	; (17098 <init_storage+0xb4>)
   1701e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   17020:	46c0      	nop			; (mov r8, r8)
   17022:	2000      	movs	r0, #0
   17024:	4b20      	ldr	r3, [pc, #128]	; (170a8 <init_storage+0xc4>)
   17026:	4798      	blx	r3
   17028:	0003      	movs	r3, r0
   1702a:	2b02      	cmp	r3, #2
   1702c:	d1f9      	bne.n	17022 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1702e:	1dfb      	adds	r3, r7, #7
   17030:	781b      	ldrb	r3, [r3, #0]
   17032:	2b00      	cmp	r3, #0
   17034:	d1e0      	bne.n	16ff8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   17036:	4b1d      	ldr	r3, [pc, #116]	; (170ac <init_storage+0xc8>)
   17038:	0019      	movs	r1, r3
   1703a:	2001      	movs	r0, #1
   1703c:	4b16      	ldr	r3, [pc, #88]	; (17098 <init_storage+0xb4>)
   1703e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   17040:	238c      	movs	r3, #140	; 0x8c
   17042:	009a      	lsls	r2, r3, #2
   17044:	4b1a      	ldr	r3, [pc, #104]	; (170b0 <init_storage+0xcc>)
   17046:	2100      	movs	r1, #0
   17048:	0018      	movs	r0, r3
   1704a:	4b1a      	ldr	r3, [pc, #104]	; (170b4 <init_storage+0xd0>)
   1704c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1704e:	1dbc      	adds	r4, r7, #6
   17050:	4b17      	ldr	r3, [pc, #92]	; (170b0 <init_storage+0xcc>)
   17052:	0019      	movs	r1, r3
   17054:	2000      	movs	r0, #0
   17056:	4b18      	ldr	r3, [pc, #96]	; (170b8 <init_storage+0xd4>)
   17058:	4798      	blx	r3
   1705a:	0003      	movs	r3, r0
   1705c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1705e:	1dbb      	adds	r3, r7, #6
   17060:	781b      	ldrb	r3, [r3, #0]
   17062:	2b0b      	cmp	r3, #11
   17064:	d107      	bne.n	17076 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   17066:	1dbb      	adds	r3, r7, #6
   17068:	781a      	ldrb	r2, [r3, #0]
   1706a:	4b14      	ldr	r3, [pc, #80]	; (170bc <init_storage+0xd8>)
   1706c:	0019      	movs	r1, r3
   1706e:	2001      	movs	r0, #1
   17070:	4b09      	ldr	r3, [pc, #36]	; (17098 <init_storage+0xb4>)
   17072:	4798      	blx	r3
            return;
   17074:	e008      	b.n	17088 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   17076:	4b12      	ldr	r3, [pc, #72]	; (170c0 <init_storage+0xdc>)
   17078:	0019      	movs	r1, r3
   1707a:	2001      	movs	r0, #1
   1707c:	4b06      	ldr	r3, [pc, #24]	; (17098 <init_storage+0xb4>)
   1707e:	4798      	blx	r3
        add_state(STORAGE_READY);
   17080:	2001      	movs	r0, #1
   17082:	4b10      	ldr	r3, [pc, #64]	; (170c4 <init_storage+0xe0>)
   17084:	4798      	blx	r3
        return;
   17086:	46c0      	nop			; (mov r8, r8)
    }
}
   17088:	46bd      	mov	sp, r7
   1708a:	b003      	add	sp, #12
   1708c:	bd90      	pop	{r4, r7, pc}
   1708e:	46c0      	nop			; (mov r8, r8)
   17090:	0001f819 	.word	0x0001f819
   17094:	0003787c 	.word	0x0003787c
   17098:	0001ea01 	.word	0x0001ea01
   1709c:	0001fcf5 	.word	0x0001fcf5
   170a0:	000378b4 	.word	0x000378b4
   170a4:	000378dc 	.word	0x000378dc
   170a8:	0001f869 	.word	0x0001f869
   170ac:	00037910 	.word	0x00037910
   170b0:	20000640 	.word	0x20000640
   170b4:	000356ef 	.word	0x000356ef
   170b8:	0002e5e5 	.word	0x0002e5e5
   170bc:	00037934 	.word	0x00037934
   170c0:	00037964 	.word	0x00037964
   170c4:	000166d5 	.word	0x000166d5

000170c8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   170c8:	b580      	push	{r7, lr}
   170ca:	b082      	sub	sp, #8
   170cc:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   170ce:	1d3b      	adds	r3, r7, #4
   170d0:	0018      	movs	r0, r3
   170d2:	4b08      	ldr	r3, [pc, #32]	; (170f4 <configure_timer+0x2c>)
   170d4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   170d6:	1d3a      	adds	r2, r7, #4
   170d8:	4b07      	ldr	r3, [pc, #28]	; (170f8 <configure_timer+0x30>)
   170da:	0011      	movs	r1, r2
   170dc:	0018      	movs	r0, r3
   170de:	4b07      	ldr	r3, [pc, #28]	; (170fc <configure_timer+0x34>)
   170e0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   170e2:	4b05      	ldr	r3, [pc, #20]	; (170f8 <configure_timer+0x30>)
   170e4:	0018      	movs	r0, r3
   170e6:	4b06      	ldr	r3, [pc, #24]	; (17100 <configure_timer+0x38>)
   170e8:	4798      	blx	r3
}
   170ea:	46c0      	nop			; (mov r8, r8)
   170ec:	46bd      	mov	sp, r7
   170ee:	b002      	add	sp, #8
   170f0:	bd80      	pop	{r7, pc}
   170f2:	46c0      	nop			; (mov r8, r8)
   170f4:	00033135 	.word	0x00033135
   170f8:	20004944 	.word	0x20004944
   170fc:	00033159 	.word	0x00033159
   17100:	00033245 	.word	0x00033245

00017104 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   17104:	b580      	push	{r7, lr}
   17106:	b088      	sub	sp, #32
   17108:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   1710a:	003b      	movs	r3, r7
   1710c:	0018      	movs	r0, r3
   1710e:	4b12      	ldr	r3, [pc, #72]	; (17158 <configure_http_client+0x54>)
   17110:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   17112:	003b      	movs	r3, r7
   17114:	2280      	movs	r2, #128	; 0x80
   17116:	0092      	lsls	r2, r2, #2
   17118:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   1711a:	003b      	movs	r3, r7
   1711c:	4a0f      	ldr	r2, [pc, #60]	; (1715c <configure_http_client+0x58>)
   1711e:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   17120:	003a      	movs	r2, r7
   17122:	4b0f      	ldr	r3, [pc, #60]	; (17160 <configure_http_client+0x5c>)
   17124:	0011      	movs	r1, r2
   17126:	0018      	movs	r0, r3
   17128:	4b0e      	ldr	r3, [pc, #56]	; (17164 <configure_http_client+0x60>)
   1712a:	4798      	blx	r3
   1712c:	0003      	movs	r3, r0
   1712e:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   17130:	69fb      	ldr	r3, [r7, #28]
   17132:	2b00      	cmp	r3, #0
   17134:	da06      	bge.n	17144 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   17136:	69fa      	ldr	r2, [r7, #28]
   17138:	4b0b      	ldr	r3, [pc, #44]	; (17168 <configure_http_client+0x64>)
   1713a:	0019      	movs	r1, r3
   1713c:	2001      	movs	r0, #1
   1713e:	4b0b      	ldr	r3, [pc, #44]	; (1716c <configure_http_client+0x68>)
   17140:	4798      	blx	r3
        while (1) {
   17142:	e7fe      	b.n	17142 <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   17144:	4a0a      	ldr	r2, [pc, #40]	; (17170 <configure_http_client+0x6c>)
   17146:	4b06      	ldr	r3, [pc, #24]	; (17160 <configure_http_client+0x5c>)
   17148:	0011      	movs	r1, r2
   1714a:	0018      	movs	r0, r3
   1714c:	4b09      	ldr	r3, [pc, #36]	; (17174 <configure_http_client+0x70>)
   1714e:	4798      	blx	r3
}
   17150:	46c0      	nop			; (mov r8, r8)
   17152:	46bd      	mov	sp, r7
   17154:	b008      	add	sp, #32
   17156:	bd80      	pop	{r7, pc}
   17158:	000317c9 	.word	0x000317c9
   1715c:	20004944 	.word	0x20004944
   17160:	2000499c 	.word	0x2000499c
   17164:	00031815 	.word	0x00031815
   17168:	00037988 	.word	0x00037988
   1716c:	0001ea01 	.word	0x0001ea01
   17170:	00016cb5 	.word	0x00016cb5
   17174:	00031901 	.word	0x00031901

00017178 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   17178:	b580      	push	{r7, lr}
   1717a:	b082      	sub	sp, #8
   1717c:	af00      	add	r7, sp, #0
   1717e:	603a      	str	r2, [r7, #0]
   17180:	1dfb      	adds	r3, r7, #7
   17182:	1c02      	adds	r2, r0, #0
   17184:	701a      	strb	r2, [r3, #0]
   17186:	1dbb      	adds	r3, r7, #6
   17188:	1c0a      	adds	r2, r1, #0
   1718a:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   1718c:	683a      	ldr	r2, [r7, #0]
   1718e:	1dbb      	adds	r3, r7, #6
   17190:	7819      	ldrb	r1, [r3, #0]
   17192:	1dfb      	adds	r3, r7, #7
   17194:	781b      	ldrb	r3, [r3, #0]
   17196:	b25b      	sxtb	r3, r3
   17198:	0018      	movs	r0, r3
   1719a:	4b03      	ldr	r3, [pc, #12]	; (171a8 <socket_event_handler+0x30>)
   1719c:	4798      	blx	r3
}
   1719e:	46c0      	nop			; (mov r8, r8)
   171a0:	46bd      	mov	sp, r7
   171a2:	b002      	add	sp, #8
   171a4:	bd80      	pop	{r7, pc}
   171a6:	46c0      	nop			; (mov r8, r8)
   171a8:	000304c1 	.word	0x000304c1

000171ac <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   171ac:	b580      	push	{r7, lr}
   171ae:	b082      	sub	sp, #8
   171b0:	af00      	add	r7, sp, #0
   171b2:	6078      	str	r0, [r7, #4]
   171b4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   171b6:	683a      	ldr	r2, [r7, #0]
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	0011      	movs	r1, r2
   171bc:	0018      	movs	r0, r3
   171be:	4b03      	ldr	r3, [pc, #12]	; (171cc <socket_resolve_handler+0x20>)
   171c0:	4798      	blx	r3
}
   171c2:	46c0      	nop			; (mov r8, r8)
   171c4:	46bd      	mov	sp, r7
   171c6:	b002      	add	sp, #8
   171c8:	bd80      	pop	{r7, pc}
   171ca:	46c0      	nop			; (mov r8, r8)
   171cc:	000304f5 	.word	0x000304f5

000171d0 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   171d0:	b590      	push	{r4, r7, lr}
   171d2:	b089      	sub	sp, #36	; 0x24
   171d4:	af02      	add	r7, sp, #8
   171d6:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   171d8:	2310      	movs	r3, #16
   171da:	18fb      	adds	r3, r7, r3
   171dc:	2200      	movs	r2, #0
   171de:	701a      	strb	r2, [r3, #0]
   171e0:	2310      	movs	r3, #16
   171e2:	18fb      	adds	r3, r7, r3
   171e4:	2200      	movs	r2, #0
   171e6:	705a      	strb	r2, [r3, #1]
   171e8:	2310      	movs	r3, #16
   171ea:	18fb      	adds	r3, r7, r3
   171ec:	2200      	movs	r2, #0
   171ee:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   171f0:	687b      	ldr	r3, [r7, #4]
   171f2:	685b      	ldr	r3, [r3, #4]
   171f4:	685a      	ldr	r2, [r3, #4]
   171f6:	687b      	ldr	r3, [r7, #4]
   171f8:	685b      	ldr	r3, [r3, #4]
   171fa:	689b      	ldr	r3, [r3, #8]
   171fc:	492a      	ldr	r1, [pc, #168]	; (172a8 <SubscribeHandlerLedTopic+0xd8>)
   171fe:	2001      	movs	r0, #1
   17200:	4c2a      	ldr	r4, [pc, #168]	; (172ac <SubscribeHandlerLedTopic+0xdc>)
   17202:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   17204:	687b      	ldr	r3, [r7, #4]
   17206:	681b      	ldr	r3, [r3, #0]
   17208:	689b      	ldr	r3, [r3, #8]
   1720a:	4929      	ldr	r1, [pc, #164]	; (172b0 <SubscribeHandlerLedTopic+0xe0>)
   1720c:	2204      	movs	r2, #4
   1720e:	0018      	movs	r0, r3
   17210:	4b28      	ldr	r3, [pc, #160]	; (172b4 <SubscribeHandlerLedTopic+0xe4>)
   17212:	4798      	blx	r3
   17214:	1e03      	subs	r3, r0, #0
   17216:	d143      	bne.n	172a0 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   17218:	687b      	ldr	r3, [r7, #4]
   1721a:	681b      	ldr	r3, [r3, #0]
   1721c:	689b      	ldr	r3, [r3, #8]
   1721e:	3304      	adds	r3, #4
   17220:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   17222:	2300      	movs	r3, #0
   17224:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   17226:	e015      	b.n	17254 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   17228:	697c      	ldr	r4, [r7, #20]
   1722a:	1c63      	adds	r3, r4, #1
   1722c:	617b      	str	r3, [r7, #20]
   1722e:	68fb      	ldr	r3, [r7, #12]
   17230:	220c      	movs	r2, #12
   17232:	18b9      	adds	r1, r7, r2
   17234:	220a      	movs	r2, #10
   17236:	0018      	movs	r0, r3
   17238:	4b1f      	ldr	r3, [pc, #124]	; (172b8 <SubscribeHandlerLedTopic+0xe8>)
   1723a:	4798      	blx	r3
   1723c:	0003      	movs	r3, r0
   1723e:	b2da      	uxtb	r2, r3
   17240:	2310      	movs	r3, #16
   17242:	18fb      	adds	r3, r7, r3
   17244:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   17246:	68fb      	ldr	r3, [r7, #12]
   17248:	781b      	ldrb	r3, [r3, #0]
   1724a:	2b2c      	cmp	r3, #44	; 0x2c
   1724c:	d10a      	bne.n	17264 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1724e:	68fb      	ldr	r3, [r7, #12]
   17250:	3301      	adds	r3, #1
   17252:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17254:	697b      	ldr	r3, [r7, #20]
   17256:	2b02      	cmp	r3, #2
   17258:	dc05      	bgt.n	17266 <SubscribeHandlerLedTopic+0x96>
   1725a:	68fb      	ldr	r3, [r7, #12]
   1725c:	781b      	ldrb	r3, [r3, #0]
   1725e:	2b00      	cmp	r3, #0
   17260:	d1e2      	bne.n	17228 <SubscribeHandlerLedTopic+0x58>
   17262:	e000      	b.n	17266 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17264:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   17266:	2310      	movs	r3, #16
   17268:	18fb      	adds	r3, r7, r3
   1726a:	781b      	ldrb	r3, [r3, #0]
   1726c:	001a      	movs	r2, r3
   1726e:	2310      	movs	r3, #16
   17270:	18fb      	adds	r3, r7, r3
   17272:	785b      	ldrb	r3, [r3, #1]
   17274:	0018      	movs	r0, r3
   17276:	2310      	movs	r3, #16
   17278:	18fb      	adds	r3, r7, r3
   1727a:	789b      	ldrb	r3, [r3, #2]
   1727c:	490f      	ldr	r1, [pc, #60]	; (172bc <SubscribeHandlerLedTopic+0xec>)
   1727e:	9300      	str	r3, [sp, #0]
   17280:	0003      	movs	r3, r0
   17282:	2001      	movs	r0, #1
   17284:	4c09      	ldr	r4, [pc, #36]	; (172ac <SubscribeHandlerLedTopic+0xdc>)
   17286:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   17288:	2310      	movs	r3, #16
   1728a:	18fb      	adds	r3, r7, r3
   1728c:	7818      	ldrb	r0, [r3, #0]
   1728e:	2310      	movs	r3, #16
   17290:	18fb      	adds	r3, r7, r3
   17292:	7859      	ldrb	r1, [r3, #1]
   17294:	2310      	movs	r3, #16
   17296:	18fb      	adds	r3, r7, r3
   17298:	789b      	ldrb	r3, [r3, #2]
   1729a:	001a      	movs	r2, r3
   1729c:	4b08      	ldr	r3, [pc, #32]	; (172c0 <SubscribeHandlerLedTopic+0xf0>)
   1729e:	4798      	blx	r3
    }
}
   172a0:	46c0      	nop			; (mov r8, r8)
   172a2:	46bd      	mov	sp, r7
   172a4:	b007      	add	sp, #28
   172a6:	bd90      	pop	{r4, r7, pc}
   172a8:	000379d0 	.word	0x000379d0
   172ac:	0001ea01 	.word	0x0001ea01
   172b0:	000379d8 	.word	0x000379d8
   172b4:	00035ab5 	.word	0x00035ab5
   172b8:	00035c61 	.word	0x00035c61
   172bc:	000379e0 	.word	0x000379e0
   172c0:	00016539 	.word	0x00016539

000172c4 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   172c4:	b590      	push	{r4, r7, lr}
   172c6:	b08b      	sub	sp, #44	; 0x2c
   172c8:	af00      	add	r7, sp, #0
   172ca:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   172cc:	230c      	movs	r3, #12
   172ce:	18fb      	adds	r3, r7, r3
   172d0:	2214      	movs	r2, #20
   172d2:	21ff      	movs	r1, #255	; 0xff
   172d4:	0018      	movs	r0, r3
   172d6:	4b48      	ldr	r3, [pc, #288]	; (173f8 <SubscribeHandlerGameTopic+0x134>)
   172d8:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   172da:	687b      	ldr	r3, [r7, #4]
   172dc:	681b      	ldr	r3, [r3, #0]
   172de:	689b      	ldr	r3, [r3, #8]
   172e0:	4946      	ldr	r1, [pc, #280]	; (173fc <SubscribeHandlerGameTopic+0x138>)
   172e2:	2209      	movs	r2, #9
   172e4:	0018      	movs	r0, r3
   172e6:	4b46      	ldr	r3, [pc, #280]	; (17400 <SubscribeHandlerGameTopic+0x13c>)
   172e8:	4798      	blx	r3
   172ea:	1e03      	subs	r3, r0, #0
   172ec:	d166      	bne.n	173bc <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   172ee:	4b45      	ldr	r3, [pc, #276]	; (17404 <SubscribeHandlerGameTopic+0x140>)
   172f0:	0019      	movs	r1, r3
   172f2:	2001      	movs	r0, #1
   172f4:	4b44      	ldr	r3, [pc, #272]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   172f6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   172f8:	687b      	ldr	r3, [r7, #4]
   172fa:	685b      	ldr	r3, [r3, #4]
   172fc:	685a      	ldr	r2, [r3, #4]
   172fe:	687b      	ldr	r3, [r7, #4]
   17300:	685b      	ldr	r3, [r3, #4]
   17302:	689b      	ldr	r3, [r3, #8]
   17304:	4941      	ldr	r1, [pc, #260]	; (1740c <SubscribeHandlerGameTopic+0x148>)
   17306:	2001      	movs	r0, #1
   17308:	4c3f      	ldr	r4, [pc, #252]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   1730a:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	681b      	ldr	r3, [r3, #0]
   17310:	68da      	ldr	r2, [r3, #12]
   17312:	687b      	ldr	r3, [r7, #4]
   17314:	681b      	ldr	r3, [r3, #0]
   17316:	689b      	ldr	r3, [r3, #8]
   17318:	493d      	ldr	r1, [pc, #244]	; (17410 <SubscribeHandlerGameTopic+0x14c>)
   1731a:	2001      	movs	r0, #1
   1731c:	4c3a      	ldr	r4, [pc, #232]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   1731e:	47a0      	blx	r4

        int nb = 0;
   17320:	2300      	movs	r3, #0
   17322:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	681b      	ldr	r3, [r3, #0]
   17328:	689b      	ldr	r3, [r3, #8]
   1732a:	3309      	adds	r3, #9
   1732c:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1732e:	e015      	b.n	1735c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   17330:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   17332:	1c63      	adds	r3, r4, #1
   17334:	627b      	str	r3, [r7, #36]	; 0x24
   17336:	68bb      	ldr	r3, [r7, #8]
   17338:	2208      	movs	r2, #8
   1733a:	18b9      	adds	r1, r7, r2
   1733c:	220a      	movs	r2, #10
   1733e:	0018      	movs	r0, r3
   17340:	4b34      	ldr	r3, [pc, #208]	; (17414 <SubscribeHandlerGameTopic+0x150>)
   17342:	4798      	blx	r3
   17344:	0003      	movs	r3, r0
   17346:	b2da      	uxtb	r2, r3
   17348:	230c      	movs	r3, #12
   1734a:	18fb      	adds	r3, r7, r3
   1734c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1734e:	68bb      	ldr	r3, [r7, #8]
   17350:	781b      	ldrb	r3, [r3, #0]
   17352:	2b2c      	cmp	r3, #44	; 0x2c
   17354:	d10a      	bne.n	1736c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17356:	68bb      	ldr	r3, [r7, #8]
   17358:	3301      	adds	r3, #1
   1735a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1735e:	2b13      	cmp	r3, #19
   17360:	dc05      	bgt.n	1736e <SubscribeHandlerGameTopic+0xaa>
   17362:	68bb      	ldr	r3, [r7, #8]
   17364:	781b      	ldrb	r3, [r3, #0]
   17366:	2b00      	cmp	r3, #0
   17368:	d1e2      	bne.n	17330 <SubscribeHandlerGameTopic+0x6c>
   1736a:	e000      	b.n	1736e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1736c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1736e:	4b2a      	ldr	r3, [pc, #168]	; (17418 <SubscribeHandlerGameTopic+0x154>)
   17370:	0019      	movs	r1, r3
   17372:	2001      	movs	r0, #1
   17374:	4b24      	ldr	r3, [pc, #144]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   17376:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17378:	2300      	movs	r3, #0
   1737a:	623b      	str	r3, [r7, #32]
   1737c:	e00d      	b.n	1739a <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1737e:	230c      	movs	r3, #12
   17380:	18fa      	adds	r2, r7, r3
   17382:	6a3b      	ldr	r3, [r7, #32]
   17384:	18d3      	adds	r3, r2, r3
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	001a      	movs	r2, r3
   1738a:	4b24      	ldr	r3, [pc, #144]	; (1741c <SubscribeHandlerGameTopic+0x158>)
   1738c:	0019      	movs	r1, r3
   1738e:	2001      	movs	r0, #1
   17390:	4b1d      	ldr	r3, [pc, #116]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   17392:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17394:	6a3b      	ldr	r3, [r7, #32]
   17396:	3301      	adds	r3, #1
   17398:	623b      	str	r3, [r7, #32]
   1739a:	6a3b      	ldr	r3, [r7, #32]
   1739c:	2b13      	cmp	r3, #19
   1739e:	ddee      	ble.n	1737e <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   173a0:	230c      	movs	r3, #12
   173a2:	18fb      	adds	r3, r7, r3
   173a4:	0018      	movs	r0, r3
   173a6:	4b1e      	ldr	r3, [pc, #120]	; (17420 <SubscribeHandlerGameTopic+0x15c>)
   173a8:	4798      	blx	r3
   173aa:	0003      	movs	r3, r0
   173ac:	2b01      	cmp	r3, #1
   173ae:	d11e      	bne.n	173ee <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   173b0:	4b1c      	ldr	r3, [pc, #112]	; (17424 <SubscribeHandlerGameTopic+0x160>)
   173b2:	0019      	movs	r1, r3
   173b4:	2001      	movs	r0, #1
   173b6:	4b14      	ldr	r3, [pc, #80]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   173b8:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   173ba:	e018      	b.n	173ee <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   173bc:	4b1a      	ldr	r3, [pc, #104]	; (17428 <SubscribeHandlerGameTopic+0x164>)
   173be:	0019      	movs	r1, r3
   173c0:	2001      	movs	r0, #1
   173c2:	4b11      	ldr	r3, [pc, #68]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   173c4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   173c6:	687b      	ldr	r3, [r7, #4]
   173c8:	685b      	ldr	r3, [r3, #4]
   173ca:	685a      	ldr	r2, [r3, #4]
   173cc:	687b      	ldr	r3, [r7, #4]
   173ce:	685b      	ldr	r3, [r3, #4]
   173d0:	689b      	ldr	r3, [r3, #8]
   173d2:	490e      	ldr	r1, [pc, #56]	; (1740c <SubscribeHandlerGameTopic+0x148>)
   173d4:	2001      	movs	r0, #1
   173d6:	4c0c      	ldr	r4, [pc, #48]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   173d8:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   173da:	687b      	ldr	r3, [r7, #4]
   173dc:	681b      	ldr	r3, [r3, #0]
   173de:	68da      	ldr	r2, [r3, #12]
   173e0:	687b      	ldr	r3, [r7, #4]
   173e2:	681b      	ldr	r3, [r3, #0]
   173e4:	689b      	ldr	r3, [r3, #8]
   173e6:	490a      	ldr	r1, [pc, #40]	; (17410 <SubscribeHandlerGameTopic+0x14c>)
   173e8:	2001      	movs	r0, #1
   173ea:	4c07      	ldr	r4, [pc, #28]	; (17408 <SubscribeHandlerGameTopic+0x144>)
   173ec:	47a0      	blx	r4
}
   173ee:	46c0      	nop			; (mov r8, r8)
   173f0:	46bd      	mov	sp, r7
   173f2:	b00b      	add	sp, #44	; 0x2c
   173f4:	bd90      	pop	{r4, r7, pc}
   173f6:	46c0      	nop			; (mov r8, r8)
   173f8:	000356ef 	.word	0x000356ef
   173fc:	000379f4 	.word	0x000379f4
   17400:	00035ab5 	.word	0x00035ab5
   17404:	00037a00 	.word	0x00037a00
   17408:	0001ea01 	.word	0x0001ea01
   1740c:	000379d0 	.word	0x000379d0
   17410:	00037a1c 	.word	0x00037a1c
   17414:	00035c61 	.word	0x00035c61
   17418:	00037a24 	.word	0x00037a24
   1741c:	00037a38 	.word	0x00037a38
   17420:	0001434d 	.word	0x0001434d
   17424:	00037a3c 	.word	0x00037a3c
   17428:	00037a58 	.word	0x00037a58

0001742c <SubscribeHandler>:
{
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandler(MessageData *msgData)
{
   1742c:	b590      	push	{r4, r7, lr}
   1742e:	b083      	sub	sp, #12
   17430:	af00      	add	r7, sp, #0
   17432:	6078      	str	r0, [r7, #4]
    /* You received publish message which you had subscribed. */
    /* Print Topic and message */
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17434:	687b      	ldr	r3, [r7, #4]
   17436:	685b      	ldr	r3, [r3, #4]
   17438:	685a      	ldr	r2, [r3, #4]
   1743a:	687b      	ldr	r3, [r7, #4]
   1743c:	685b      	ldr	r3, [r3, #4]
   1743e:	689b      	ldr	r3, [r3, #8]
   17440:	4921      	ldr	r1, [pc, #132]	; (174c8 <SubscribeHandler+0x9c>)
   17442:	2001      	movs	r0, #1
   17444:	4c21      	ldr	r4, [pc, #132]	; (174cc <SubscribeHandler+0xa0>)
   17446:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, " >> ");
   17448:	4b21      	ldr	r3, [pc, #132]	; (174d0 <SubscribeHandler+0xa4>)
   1744a:	0019      	movs	r1, r3
   1744c:	2001      	movs	r0, #1
   1744e:	4b1f      	ldr	r3, [pc, #124]	; (174cc <SubscribeHandler+0xa0>)
   17450:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17452:	687b      	ldr	r3, [r7, #4]
   17454:	681b      	ldr	r3, [r3, #0]
   17456:	68da      	ldr	r2, [r3, #12]
   17458:	687b      	ldr	r3, [r7, #4]
   1745a:	681b      	ldr	r3, [r3, #0]
   1745c:	689b      	ldr	r3, [r3, #8]
   1745e:	491d      	ldr	r1, [pc, #116]	; (174d4 <SubscribeHandler+0xa8>)
   17460:	2001      	movs	r0, #1
   17462:	4c1a      	ldr	r4, [pc, #104]	; (174cc <SubscribeHandler+0xa0>)
   17464:	47a0      	blx	r4

    // Handle LedData message
    if (strncmp((char *)msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0) {
   17466:	687b      	ldr	r3, [r7, #4]
   17468:	685b      	ldr	r3, [r3, #4]
   1746a:	6898      	ldr	r0, [r3, #8]
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	681b      	ldr	r3, [r3, #0]
   17470:	68da      	ldr	r2, [r3, #12]
   17472:	4b19      	ldr	r3, [pc, #100]	; (174d8 <SubscribeHandler+0xac>)
   17474:	0019      	movs	r1, r3
   17476:	4b19      	ldr	r3, [pc, #100]	; (174dc <SubscribeHandler+0xb0>)
   17478:	4798      	blx	r3
   1747a:	1e03      	subs	r3, r0, #0
   1747c:	d120      	bne.n	174c0 <SubscribeHandler+0x94>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   1747e:	687b      	ldr	r3, [r7, #4]
   17480:	681b      	ldr	r3, [r3, #0]
   17482:	6898      	ldr	r0, [r3, #8]
   17484:	687b      	ldr	r3, [r7, #4]
   17486:	681b      	ldr	r3, [r3, #0]
   17488:	68da      	ldr	r2, [r3, #12]
   1748a:	4b15      	ldr	r3, [pc, #84]	; (174e0 <SubscribeHandler+0xb4>)
   1748c:	0019      	movs	r1, r3
   1748e:	4b13      	ldr	r3, [pc, #76]	; (174dc <SubscribeHandler+0xb0>)
   17490:	4798      	blx	r3
   17492:	1e03      	subs	r3, r0, #0
   17494:	d104      	bne.n	174a0 <SubscribeHandler+0x74>
            port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   17496:	2101      	movs	r1, #1
   17498:	2017      	movs	r0, #23
   1749a:	4b12      	ldr	r3, [pc, #72]	; (174e4 <SubscribeHandler+0xb8>)
   1749c:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
        }
    }
}
   1749e:	e00f      	b.n	174c0 <SubscribeHandler+0x94>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   174a0:	687b      	ldr	r3, [r7, #4]
   174a2:	681b      	ldr	r3, [r3, #0]
   174a4:	6898      	ldr	r0, [r3, #8]
   174a6:	687b      	ldr	r3, [r7, #4]
   174a8:	681b      	ldr	r3, [r3, #0]
   174aa:	68da      	ldr	r2, [r3, #12]
   174ac:	4b0e      	ldr	r3, [pc, #56]	; (174e8 <SubscribeHandler+0xbc>)
   174ae:	0019      	movs	r1, r3
   174b0:	4b0a      	ldr	r3, [pc, #40]	; (174dc <SubscribeHandler+0xb0>)
   174b2:	4798      	blx	r3
   174b4:	1e03      	subs	r3, r0, #0
   174b6:	d103      	bne.n	174c0 <SubscribeHandler+0x94>
            port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
   174b8:	2100      	movs	r1, #0
   174ba:	2017      	movs	r0, #23
   174bc:	4b09      	ldr	r3, [pc, #36]	; (174e4 <SubscribeHandler+0xb8>)
   174be:	4798      	blx	r3
}
   174c0:	46c0      	nop			; (mov r8, r8)
   174c2:	46bd      	mov	sp, r7
   174c4:	b003      	add	sp, #12
   174c6:	bd90      	pop	{r4, r7, pc}
   174c8:	000379d0 	.word	0x000379d0
   174cc:	0001ea01 	.word	0x0001ea01
   174d0:	00037a88 	.word	0x00037a88
   174d4:	00037a1c 	.word	0x00037a1c
   174d8:	00037a90 	.word	0x00037a90
   174dc:	00035ab5 	.word	0x00035ab5
   174e0:	00037aa4 	.word	0x00037aa4
   174e4:	00016639 	.word	0x00016639
   174e8:	00037aac 	.word	0x00037aac

000174ec <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   174ec:	b590      	push	{r4, r7, lr}
   174ee:	b08b      	sub	sp, #44	; 0x2c
   174f0:	af06      	add	r7, sp, #24
   174f2:	60f8      	str	r0, [r7, #12]
   174f4:	60b9      	str	r1, [r7, #8]
   174f6:	607a      	str	r2, [r7, #4]
    switch (type) {
   174f8:	68bb      	ldr	r3, [r7, #8]
   174fa:	2b01      	cmp	r3, #1
   174fc:	d03b      	beq.n	17576 <mqtt_callback+0x8a>
   174fe:	2b05      	cmp	r3, #5
   17500:	d05e      	beq.n	175c0 <mqtt_callback+0xd4>
   17502:	2b00      	cmp	r3, #0
   17504:	d000      	beq.n	17508 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   17506:	e061      	b.n	175cc <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   17508:	687b      	ldr	r3, [r7, #4]
   1750a:	681b      	ldr	r3, [r3, #0]
   1750c:	2b00      	cmp	r3, #0
   1750e:	db25      	blt.n	1755c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   17510:	4b30      	ldr	r3, [pc, #192]	; (175d4 <mqtt_callback+0xe8>)
   17512:	0019      	movs	r1, r3
   17514:	2001      	movs	r0, #1
   17516:	4b30      	ldr	r3, [pc, #192]	; (175d8 <mqtt_callback+0xec>)
   17518:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   1751a:	4930      	ldr	r1, [pc, #192]	; (175dc <mqtt_callback+0xf0>)
   1751c:	4a30      	ldr	r2, [pc, #192]	; (175e0 <mqtt_callback+0xf4>)
   1751e:	68f8      	ldr	r0, [r7, #12]
   17520:	2300      	movs	r3, #0
   17522:	9305      	str	r3, [sp, #20]
   17524:	2300      	movs	r3, #0
   17526:	9304      	str	r3, [sp, #16]
   17528:	2300      	movs	r3, #0
   1752a:	9303      	str	r3, [sp, #12]
   1752c:	2300      	movs	r3, #0
   1752e:	9302      	str	r3, [sp, #8]
   17530:	2300      	movs	r3, #0
   17532:	9301      	str	r3, [sp, #4]
   17534:	4b2a      	ldr	r3, [pc, #168]	; (175e0 <mqtt_callback+0xf4>)
   17536:	9300      	str	r3, [sp, #0]
   17538:	000b      	movs	r3, r1
   1753a:	2101      	movs	r1, #1
   1753c:	4c29      	ldr	r4, [pc, #164]	; (175e4 <mqtt_callback+0xf8>)
   1753e:	47a0      	blx	r4
   17540:	1e03      	subs	r3, r0, #0
   17542:	d005      	beq.n	17550 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   17544:	4b28      	ldr	r3, [pc, #160]	; (175e8 <mqtt_callback+0xfc>)
   17546:	0019      	movs	r1, r3
   17548:	2001      	movs	r0, #1
   1754a:	4b23      	ldr	r3, [pc, #140]	; (175d8 <mqtt_callback+0xec>)
   1754c:	4798      	blx	r3
        } break;
   1754e:	e03d      	b.n	175cc <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   17550:	4b26      	ldr	r3, [pc, #152]	; (175ec <mqtt_callback+0x100>)
   17552:	0019      	movs	r1, r3
   17554:	2001      	movs	r0, #1
   17556:	4b20      	ldr	r3, [pc, #128]	; (175d8 <mqtt_callback+0xec>)
   17558:	4798      	blx	r3
        } break;
   1755a:	e037      	b.n	175cc <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1755c:	4a24      	ldr	r2, [pc, #144]	; (175f0 <mqtt_callback+0x104>)
   1755e:	4b25      	ldr	r3, [pc, #148]	; (175f4 <mqtt_callback+0x108>)
   17560:	0019      	movs	r1, r3
   17562:	2001      	movs	r0, #1
   17564:	4b1c      	ldr	r3, [pc, #112]	; (175d8 <mqtt_callback+0xec>)
   17566:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   17568:	4a21      	ldr	r2, [pc, #132]	; (175f0 <mqtt_callback+0x104>)
   1756a:	68fb      	ldr	r3, [r7, #12]
   1756c:	0011      	movs	r1, r2
   1756e:	0018      	movs	r0, r3
   17570:	4b21      	ldr	r3, [pc, #132]	; (175f8 <mqtt_callback+0x10c>)
   17572:	4798      	blx	r3
        } break;
   17574:	e02a      	b.n	175cc <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   17576:	687b      	ldr	r3, [r7, #4]
   17578:	781b      	ldrb	r3, [r3, #0]
   1757a:	2b00      	cmp	r3, #0
   1757c:	d117      	bne.n	175ae <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   1757e:	4b1f      	ldr	r3, [pc, #124]	; (175fc <mqtt_callback+0x110>)
   17580:	491f      	ldr	r1, [pc, #124]	; (17600 <mqtt_callback+0x114>)
   17582:	68f8      	ldr	r0, [r7, #12]
   17584:	2202      	movs	r2, #2
   17586:	4c1f      	ldr	r4, [pc, #124]	; (17604 <mqtt_callback+0x118>)
   17588:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   1758a:	4b1f      	ldr	r3, [pc, #124]	; (17608 <mqtt_callback+0x11c>)
   1758c:	491f      	ldr	r1, [pc, #124]	; (1760c <mqtt_callback+0x120>)
   1758e:	68f8      	ldr	r0, [r7, #12]
   17590:	2202      	movs	r2, #2
   17592:	4c1c      	ldr	r4, [pc, #112]	; (17604 <mqtt_callback+0x118>)
   17594:	47a0      	blx	r4
				mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
   17596:	4b1e      	ldr	r3, [pc, #120]	; (17610 <mqtt_callback+0x124>)
   17598:	491c      	ldr	r1, [pc, #112]	; (1760c <mqtt_callback+0x120>)
   1759a:	68f8      	ldr	r0, [r7, #12]
   1759c:	2202      	movs	r2, #2
   1759e:	4c19      	ldr	r4, [pc, #100]	; (17604 <mqtt_callback+0x118>)
   175a0:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   175a2:	4b1c      	ldr	r3, [pc, #112]	; (17614 <mqtt_callback+0x128>)
   175a4:	0019      	movs	r1, r3
   175a6:	2001      	movs	r0, #1
   175a8:	4b0b      	ldr	r3, [pc, #44]	; (175d8 <mqtt_callback+0xec>)
   175aa:	4798      	blx	r3
            break;
   175ac:	e00e      	b.n	175cc <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   175ae:	687b      	ldr	r3, [r7, #4]
   175b0:	781b      	ldrb	r3, [r3, #0]
   175b2:	001a      	movs	r2, r3
   175b4:	4b18      	ldr	r3, [pc, #96]	; (17618 <mqtt_callback+0x12c>)
   175b6:	0019      	movs	r1, r3
   175b8:	2001      	movs	r0, #1
   175ba:	4b07      	ldr	r3, [pc, #28]	; (175d8 <mqtt_callback+0xec>)
   175bc:	4798      	blx	r3
            break;
   175be:	e005      	b.n	175cc <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   175c0:	4b16      	ldr	r3, [pc, #88]	; (1761c <mqtt_callback+0x130>)
   175c2:	0019      	movs	r1, r3
   175c4:	2001      	movs	r0, #1
   175c6:	4b04      	ldr	r3, [pc, #16]	; (175d8 <mqtt_callback+0xec>)
   175c8:	4798      	blx	r3
            break;
   175ca:	46c0      	nop			; (mov r8, r8)
}
   175cc:	46c0      	nop			; (mov r8, r8)
   175ce:	46bd      	mov	sp, r7
   175d0:	b005      	add	sp, #20
   175d2:	bd90      	pop	{r4, r7, pc}
   175d4:	00037ab4 	.word	0x00037ab4
   175d8:	0001ea01 	.word	0x0001ea01
   175dc:	00037ad0 	.word	0x00037ad0
   175e0:	00037ae0 	.word	0x00037ae0
   175e4:	00030561 	.word	0x00030561
   175e8:	00037aec 	.word	0x00037aec
   175ec:	00037b14 	.word	0x00037b14
   175f0:	00037460 	.word	0x00037460
   175f4:	00037b30 	.word	0x00037b30
   175f8:	00030519 	.word	0x00030519
   175fc:	000172c5 	.word	0x000172c5
   17600:	00037b68 	.word	0x00037b68
   17604:	00030701 	.word	0x00030701
   17608:	000171d1 	.word	0x000171d1
   1760c:	00037a90 	.word	0x00037a90
   17610:	0001742d 	.word	0x0001742d
   17614:	00037b7c 	.word	0x00037b7c
   17618:	00037b90 	.word	0x00037b90
   1761c:	00037bc4 	.word	0x00037bc4

00017620 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17620:	b580      	push	{r7, lr}
   17622:	b088      	sub	sp, #32
   17624:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17626:	1d3b      	adds	r3, r7, #4
   17628:	0018      	movs	r0, r3
   1762a:	4b1f      	ldr	r3, [pc, #124]	; (176a8 <configure_mqtt+0x88>)
   1762c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1762e:	1d3b      	adds	r3, r7, #4
   17630:	4a1e      	ldr	r2, [pc, #120]	; (176ac <configure_mqtt+0x8c>)
   17632:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17634:	1d3b      	adds	r3, r7, #4
   17636:	2280      	movs	r2, #128	; 0x80
   17638:	0092      	lsls	r2, r2, #2
   1763a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   1763c:	1d3b      	adds	r3, r7, #4
   1763e:	4a1c      	ldr	r2, [pc, #112]	; (176b0 <configure_mqtt+0x90>)
   17640:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17642:	1d3b      	adds	r3, r7, #4
   17644:	2280      	movs	r2, #128	; 0x80
   17646:	0092      	lsls	r2, r2, #2
   17648:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   1764a:	1d3b      	adds	r3, r7, #4
   1764c:	4a19      	ldr	r2, [pc, #100]	; (176b4 <configure_mqtt+0x94>)
   1764e:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   17650:	1d3b      	adds	r3, r7, #4
   17652:	4a19      	ldr	r2, [pc, #100]	; (176b8 <configure_mqtt+0x98>)
   17654:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17656:	1d3a      	adds	r2, r7, #4
   17658:	4b18      	ldr	r3, [pc, #96]	; (176bc <configure_mqtt+0x9c>)
   1765a:	0011      	movs	r1, r2
   1765c:	0018      	movs	r0, r3
   1765e:	4b18      	ldr	r3, [pc, #96]	; (176c0 <configure_mqtt+0xa0>)
   17660:	4798      	blx	r3
   17662:	0003      	movs	r3, r0
   17664:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17666:	69fb      	ldr	r3, [r7, #28]
   17668:	2b00      	cmp	r3, #0
   1766a:	da06      	bge.n	1767a <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   1766c:	69fa      	ldr	r2, [r7, #28]
   1766e:	4b15      	ldr	r3, [pc, #84]	; (176c4 <configure_mqtt+0xa4>)
   17670:	0019      	movs	r1, r3
   17672:	2001      	movs	r0, #1
   17674:	4b14      	ldr	r3, [pc, #80]	; (176c8 <configure_mqtt+0xa8>)
   17676:	4798      	blx	r3
        while (1) {
   17678:	e7fe      	b.n	17678 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1767a:	4a14      	ldr	r2, [pc, #80]	; (176cc <configure_mqtt+0xac>)
   1767c:	4b0f      	ldr	r3, [pc, #60]	; (176bc <configure_mqtt+0x9c>)
   1767e:	0011      	movs	r1, r2
   17680:	0018      	movs	r0, r3
   17682:	4b13      	ldr	r3, [pc, #76]	; (176d0 <configure_mqtt+0xb0>)
   17684:	4798      	blx	r3
   17686:	0003      	movs	r3, r0
   17688:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1768a:	69fb      	ldr	r3, [r7, #28]
   1768c:	2b00      	cmp	r3, #0
   1768e:	da06      	bge.n	1769e <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17690:	69fa      	ldr	r2, [r7, #28]
   17692:	4b10      	ldr	r3, [pc, #64]	; (176d4 <configure_mqtt+0xb4>)
   17694:	0019      	movs	r1, r3
   17696:	2001      	movs	r0, #1
   17698:	4b0b      	ldr	r3, [pc, #44]	; (176c8 <configure_mqtt+0xa8>)
   1769a:	4798      	blx	r3
        while (1) {
   1769c:	e7fe      	b.n	1769c <configure_mqtt+0x7c>
        }
    }
}
   1769e:	46c0      	nop			; (mov r8, r8)
   176a0:	46bd      	mov	sp, r7
   176a2:	b008      	add	sp, #32
   176a4:	bd80      	pop	{r7, pc}
   176a6:	46c0      	nop			; (mov r8, r8)
   176a8:	00030459 	.word	0x00030459
   176ac:	200008d4 	.word	0x200008d4
   176b0:	20000ad4 	.word	0x20000ad4
   176b4:	0000075b 	.word	0x0000075b
   176b8:	00001770 	.word	0x00001770
   176bc:	2000089c 	.word	0x2000089c
   176c0:	000303a9 	.word	0x000303a9
   176c4:	00037bd8 	.word	0x00037bd8
   176c8:	0001ea01 	.word	0x0001ea01
   176cc:	000174ed 	.word	0x000174ed
   176d0:	00030499 	.word	0x00030499
   176d4:	00037c0c 	.word	0x00037c0c

000176d8 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   176d8:	b580      	push	{r7, lr}
   176da:	b084      	sub	sp, #16
   176dc:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   176de:	1d3b      	adds	r3, r7, #4
   176e0:	0018      	movs	r0, r3
   176e2:	4b0b      	ldr	r3, [pc, #44]	; (17710 <configure_extint_channel+0x38>)
   176e4:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   176e6:	1d3b      	adds	r3, r7, #4
   176e8:	2237      	movs	r2, #55	; 0x37
   176ea:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   176ec:	1d3b      	adds	r3, r7, #4
   176ee:	2200      	movs	r2, #0
   176f0:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   176f2:	1d3b      	adds	r3, r7, #4
   176f4:	2201      	movs	r2, #1
   176f6:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   176f8:	1d3b      	adds	r3, r7, #4
   176fa:	2202      	movs	r2, #2
   176fc:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   176fe:	1d3b      	adds	r3, r7, #4
   17700:	0019      	movs	r1, r3
   17702:	2007      	movs	r0, #7
   17704:	4b03      	ldr	r3, [pc, #12]	; (17714 <configure_extint_channel+0x3c>)
   17706:	4798      	blx	r3
}
   17708:	46c0      	nop			; (mov r8, r8)
   1770a:	46bd      	mov	sp, r7
   1770c:	b004      	add	sp, #16
   1770e:	bd80      	pop	{r7, pc}
   17710:	00027465 	.word	0x00027465
   17714:	00027499 	.word	0x00027499

00017718 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17718:	b580      	push	{r7, lr}
   1771a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1771c:	4b06      	ldr	r3, [pc, #24]	; (17738 <configure_extint_callbacks+0x20>)
   1771e:	2200      	movs	r2, #0
   17720:	2107      	movs	r1, #7
   17722:	0018      	movs	r0, r3
   17724:	4b05      	ldr	r3, [pc, #20]	; (1773c <configure_extint_callbacks+0x24>)
   17726:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17728:	2100      	movs	r1, #0
   1772a:	2007      	movs	r0, #7
   1772c:	4b04      	ldr	r3, [pc, #16]	; (17740 <configure_extint_callbacks+0x28>)
   1772e:	4798      	blx	r3
}
   17730:	46c0      	nop			; (mov r8, r8)
   17732:	46bd      	mov	sp, r7
   17734:	bd80      	pop	{r7, pc}
   17736:	46c0      	nop			; (mov r8, r8)
   17738:	00017745 	.word	0x00017745
   1773c:	00027065 	.word	0x00027065
   17740:	000270c9 	.word	0x000270c9

00017744 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17744:	b5b0      	push	{r4, r5, r7, lr}
   17746:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17748:	4b0c      	ldr	r3, [pc, #48]	; (1777c <extint_detection_callback+0x38>)
   1774a:	681b      	ldr	r3, [r3, #0]
   1774c:	1c5a      	adds	r2, r3, #1
   1774e:	4b0b      	ldr	r3, [pc, #44]	; (1777c <extint_detection_callback+0x38>)
   17750:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17752:	4b0a      	ldr	r3, [pc, #40]	; (1777c <extint_detection_callback+0x38>)
   17754:	681b      	ldr	r3, [r3, #0]
   17756:	2b28      	cmp	r3, #40	; 0x28
   17758:	d902      	bls.n	17760 <extint_detection_callback+0x1c>
   1775a:	4b08      	ldr	r3, [pc, #32]	; (1777c <extint_detection_callback+0x38>)
   1775c:	2201      	movs	r2, #1
   1775e:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17760:	4b06      	ldr	r3, [pc, #24]	; (1777c <extint_detection_callback+0x38>)
   17762:	681b      	ldr	r3, [r3, #0]
   17764:	4a06      	ldr	r2, [pc, #24]	; (17780 <extint_detection_callback+0x3c>)
   17766:	4807      	ldr	r0, [pc, #28]	; (17784 <extint_detection_callback+0x40>)
   17768:	213f      	movs	r1, #63	; 0x3f
   1776a:	4c07      	ldr	r4, [pc, #28]	; (17788 <extint_detection_callback+0x44>)
   1776c:	47a0      	blx	r4
    isPressed = true;
   1776e:	4b07      	ldr	r3, [pc, #28]	; (1778c <extint_detection_callback+0x48>)
   17770:	2201      	movs	r2, #1
   17772:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17774:	46c0      	nop			; (mov r8, r8)
   17776:	46bd      	mov	sp, r7
   17778:	bdb0      	pop	{r4, r5, r7, pc}
   1777a:	46c0      	nop			; (mov r8, r8)
   1777c:	200000b0 	.word	0x200000b0
   17780:	00037c40 	.word	0x00037c40
   17784:	20000070 	.word	0x20000070
   17788:	00035949 	.word	0x00035949
   1778c:	20000cd4 	.word	0x20000cd4

00017790 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17790:	b580      	push	{r7, lr}
   17792:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17794:	4a15      	ldr	r2, [pc, #84]	; (177ec <HTTP_DownloadFileInit+0x5c>)
   17796:	4b16      	ldr	r3, [pc, #88]	; (177f0 <HTTP_DownloadFileInit+0x60>)
   17798:	0011      	movs	r1, r2
   1779a:	0018      	movs	r0, r3
   1779c:	4b15      	ldr	r3, [pc, #84]	; (177f4 <HTTP_DownloadFileInit+0x64>)
   1779e:	4798      	blx	r3
   177a0:	1e03      	subs	r3, r0, #0
   177a2:	d008      	beq.n	177b6 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   177a4:	4b14      	ldr	r3, [pc, #80]	; (177f8 <HTTP_DownloadFileInit+0x68>)
   177a6:	0019      	movs	r1, r3
   177a8:	2001      	movs	r0, #1
   177aa:	4b14      	ldr	r3, [pc, #80]	; (177fc <HTTP_DownloadFileInit+0x6c>)
   177ac:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   177ae:	e002      	b.n	177b6 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   177b0:	2000      	movs	r0, #0
   177b2:	4b13      	ldr	r3, [pc, #76]	; (17800 <HTTP_DownloadFileInit+0x70>)
   177b4:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   177b6:	4b0e      	ldr	r3, [pc, #56]	; (177f0 <HTTP_DownloadFileInit+0x60>)
   177b8:	2234      	movs	r2, #52	; 0x34
   177ba:	5c9b      	ldrb	r3, [r3, r2]
   177bc:	2b00      	cmp	r3, #0
   177be:	d1f7      	bne.n	177b0 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   177c0:	4b10      	ldr	r3, [pc, #64]	; (17804 <HTTP_DownloadFileInit+0x74>)
   177c2:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   177c4:	4b10      	ldr	r3, [pc, #64]	; (17808 <HTTP_DownloadFileInit+0x78>)
   177c6:	2201      	movs	r2, #1
   177c8:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   177ca:	4a10      	ldr	r2, [pc, #64]	; (1780c <HTTP_DownloadFileInit+0x7c>)
   177cc:	4b10      	ldr	r3, [pc, #64]	; (17810 <HTTP_DownloadFileInit+0x80>)
   177ce:	0011      	movs	r1, r2
   177d0:	0018      	movs	r0, r3
   177d2:	4b10      	ldr	r3, [pc, #64]	; (17814 <HTTP_DownloadFileInit+0x84>)
   177d4:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   177d6:	4b10      	ldr	r3, [pc, #64]	; (17818 <HTTP_DownloadFileInit+0x88>)
   177d8:	4798      	blx	r3

    start_download();
   177da:	4b10      	ldr	r3, [pc, #64]	; (1781c <HTTP_DownloadFileInit+0x8c>)
   177dc:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   177de:	4b10      	ldr	r3, [pc, #64]	; (17820 <HTTP_DownloadFileInit+0x90>)
   177e0:	2203      	movs	r2, #3
   177e2:	701a      	strb	r2, [r3, #0]
}
   177e4:	46c0      	nop			; (mov r8, r8)
   177e6:	46bd      	mov	sp, r7
   177e8:	bd80      	pop	{r7, pc}
   177ea:	46c0      	nop			; (mov r8, r8)
   177ec:	00037460 	.word	0x00037460
   177f0:	2000089c 	.word	0x2000089c
   177f4:	0003064d 	.word	0x0003064d
   177f8:	00037858 	.word	0x00037858
   177fc:	0001ea01 	.word	0x0001ea01
   17800:	00022b55 	.word	0x00022b55
   17804:	00026111 	.word	0x00026111
   17808:	2000063c 	.word	0x2000063c
   1780c:	00016e31 	.word	0x00016e31
   17810:	00016dfd 	.word	0x00016dfd
   17814:	00026159 	.word	0x00026159
   17818:	000260c1 	.word	0x000260c1
   1781c:	00016a25 	.word	0x00016a25
   17820:	20000623 	.word	0x20000623

00017824 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17824:	b590      	push	{r4, r7, lr}
   17826:	b085      	sub	sp, #20
   17828:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1782a:	e009      	b.n	17840 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1782c:	2000      	movs	r0, #0
   1782e:	4b30      	ldr	r3, [pc, #192]	; (178f0 <HTTP_DownloadFileTransaction+0xcc>)
   17830:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17832:	4b30      	ldr	r3, [pc, #192]	; (178f4 <HTTP_DownloadFileTransaction+0xd0>)
   17834:	0018      	movs	r0, r3
   17836:	4b30      	ldr	r3, [pc, #192]	; (178f8 <HTTP_DownloadFileTransaction+0xd4>)
   17838:	4798      	blx	r3
        vTaskDelay(5);
   1783a:	2005      	movs	r0, #5
   1783c:	4b2f      	ldr	r3, [pc, #188]	; (178fc <HTTP_DownloadFileTransaction+0xd8>)
   1783e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17840:	2010      	movs	r0, #16
   17842:	4b2f      	ldr	r3, [pc, #188]	; (17900 <HTTP_DownloadFileTransaction+0xdc>)
   17844:	4798      	blx	r3
   17846:	0003      	movs	r3, r0
   17848:	001a      	movs	r2, r3
   1784a:	2301      	movs	r3, #1
   1784c:	4053      	eors	r3, r2
   1784e:	b2db      	uxtb	r3, r3
   17850:	2b00      	cmp	r3, #0
   17852:	d009      	beq.n	17868 <HTTP_DownloadFileTransaction+0x44>
   17854:	2020      	movs	r0, #32
   17856:	4b2a      	ldr	r3, [pc, #168]	; (17900 <HTTP_DownloadFileTransaction+0xdc>)
   17858:	4798      	blx	r3
   1785a:	0003      	movs	r3, r0
   1785c:	001a      	movs	r2, r3
   1785e:	2301      	movs	r3, #1
   17860:	4053      	eors	r3, r2
   17862:	b2db      	uxtb	r3, r3
   17864:	2b00      	cmp	r3, #0
   17866:	d1e1      	bne.n	1782c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17868:	4b26      	ldr	r3, [pc, #152]	; (17904 <HTTP_DownloadFileTransaction+0xe0>)
   1786a:	4798      	blx	r3
    vTaskDelay(1000);
   1786c:	23fa      	movs	r3, #250	; 0xfa
   1786e:	009b      	lsls	r3, r3, #2
   17870:	0018      	movs	r0, r3
   17872:	4b22      	ldr	r3, [pc, #136]	; (178fc <HTTP_DownloadFileTransaction+0xd8>)
   17874:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17876:	4b24      	ldr	r3, [pc, #144]	; (17908 <HTTP_DownloadFileTransaction+0xe4>)
   17878:	2200      	movs	r2, #0
   1787a:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   1787c:	003b      	movs	r3, r7
   1787e:	4a23      	ldr	r2, [pc, #140]	; (1790c <HTTP_DownloadFileTransaction+0xe8>)
   17880:	ca13      	ldmia	r2!, {r0, r1, r4}
   17882:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17884:	003b      	movs	r3, r7
   17886:	2230      	movs	r2, #48	; 0x30
   17888:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1788a:	230f      	movs	r3, #15
   1788c:	18fc      	adds	r4, r7, r3
   1788e:	0039      	movs	r1, r7
   17890:	4b1f      	ldr	r3, [pc, #124]	; (17910 <HTTP_DownloadFileTransaction+0xec>)
   17892:	220a      	movs	r2, #10
   17894:	0018      	movs	r0, r3
   17896:	4b1f      	ldr	r3, [pc, #124]	; (17914 <HTTP_DownloadFileTransaction+0xf0>)
   17898:	4798      	blx	r3
   1789a:	0003      	movs	r3, r0
   1789c:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1789e:	230f      	movs	r3, #15
   178a0:	18fc      	adds	r4, r7, r3
   178a2:	0039      	movs	r1, r7
   178a4:	4b1a      	ldr	r3, [pc, #104]	; (17910 <HTTP_DownloadFileTransaction+0xec>)
   178a6:	220a      	movs	r2, #10
   178a8:	0018      	movs	r0, r3
   178aa:	4b1a      	ldr	r3, [pc, #104]	; (17914 <HTTP_DownloadFileTransaction+0xf0>)
   178ac:	4798      	blx	r3
   178ae:	0003      	movs	r3, r0
   178b0:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   178b2:	230f      	movs	r3, #15
   178b4:	18fb      	adds	r3, r7, r3
   178b6:	781b      	ldrb	r3, [r3, #0]
   178b8:	2b00      	cmp	r3, #0
   178ba:	d008      	beq.n	178ce <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   178bc:	230f      	movs	r3, #15
   178be:	18fb      	adds	r3, r7, r3
   178c0:	781a      	ldrb	r2, [r3, #0]
   178c2:	4b15      	ldr	r3, [pc, #84]	; (17918 <HTTP_DownloadFileTransaction+0xf4>)
   178c4:	0019      	movs	r1, r3
   178c6:	2000      	movs	r0, #0
   178c8:	4b14      	ldr	r3, [pc, #80]	; (1791c <HTTP_DownloadFileTransaction+0xf8>)
   178ca:	4798      	blx	r3
   178cc:	e003      	b.n	178d6 <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   178ce:	4b14      	ldr	r3, [pc, #80]	; (17920 <HTTP_DownloadFileTransaction+0xfc>)
   178d0:	0018      	movs	r0, r3
   178d2:	4b14      	ldr	r3, [pc, #80]	; (17924 <HTTP_DownloadFileTransaction+0x100>)
   178d4:	4798      	blx	r3
    }
    delay_ms(100);
   178d6:	2064      	movs	r0, #100	; 0x64
   178d8:	4b13      	ldr	r3, [pc, #76]	; (17928 <HTTP_DownloadFileTransaction+0x104>)
   178da:	4798      	blx	r3
    system_reset();
   178dc:	4b13      	ldr	r3, [pc, #76]	; (1792c <HTTP_DownloadFileTransaction+0x108>)
   178de:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   178e0:	4b13      	ldr	r3, [pc, #76]	; (17930 <HTTP_DownloadFileTransaction+0x10c>)
   178e2:	2200      	movs	r2, #0
   178e4:	701a      	strb	r2, [r3, #0]
}
   178e6:	46c0      	nop			; (mov r8, r8)
   178e8:	46bd      	mov	sp, r7
   178ea:	b005      	add	sp, #20
   178ec:	bd90      	pop	{r4, r7, pc}
   178ee:	46c0      	nop			; (mov r8, r8)
   178f0:	00022b55 	.word	0x00022b55
   178f4:	20004944 	.word	0x20004944
   178f8:	00033375 	.word	0x00033375
   178fc:	0001ccc1 	.word	0x0001ccc1
   17900:	000166fd 	.word	0x000166fd
   17904:	00026111 	.word	0x00026111
   17908:	2000063c 	.word	0x2000063c
   1790c:	00037c78 	.word	0x00037c78
   17910:	20000870 	.word	0x20000870
   17914:	0002e63d 	.word	0x0002e63d
   17918:	00037c54 	.word	0x00037c54
   1791c:	0001ea01 	.word	0x0001ea01
   17920:	00037c64 	.word	0x00037c64
   17924:	0001e915 	.word	0x0001e915
   17928:	00020ccd 	.word	0x00020ccd
   1792c:	00016601 	.word	0x00016601
   17930:	20000623 	.word	0x20000623

00017934 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17934:	b580      	push	{r7, lr}
   17936:	af00      	add	r7, sp, #0
    socketDeinit();
   17938:	4b18      	ldr	r3, [pc, #96]	; (1799c <MQTT_InitRoutine+0x68>)
   1793a:	4798      	blx	r3
    configure_mqtt();
   1793c:	4b18      	ldr	r3, [pc, #96]	; (179a0 <MQTT_InitRoutine+0x6c>)
   1793e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17940:	4a18      	ldr	r2, [pc, #96]	; (179a4 <MQTT_InitRoutine+0x70>)
   17942:	4b19      	ldr	r3, [pc, #100]	; (179a8 <MQTT_InitRoutine+0x74>)
   17944:	0011      	movs	r1, r2
   17946:	0018      	movs	r0, r3
   17948:	4b18      	ldr	r3, [pc, #96]	; (179ac <MQTT_InitRoutine+0x78>)
   1794a:	4798      	blx	r3
    socketInit();
   1794c:	4b18      	ldr	r3, [pc, #96]	; (179b0 <MQTT_InitRoutine+0x7c>)
   1794e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17950:	4b18      	ldr	r3, [pc, #96]	; (179b4 <MQTT_InitRoutine+0x80>)
   17952:	2234      	movs	r2, #52	; 0x34
   17954:	5c9b      	ldrb	r3, [r3, r2]
   17956:	2201      	movs	r2, #1
   17958:	4053      	eors	r3, r2
   1795a:	b2db      	uxtb	r3, r3
   1795c:	2b00      	cmp	r3, #0
   1795e:	d00c      	beq.n	1797a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17960:	4a15      	ldr	r2, [pc, #84]	; (179b8 <MQTT_InitRoutine+0x84>)
   17962:	4b14      	ldr	r3, [pc, #80]	; (179b4 <MQTT_InitRoutine+0x80>)
   17964:	0011      	movs	r1, r2
   17966:	0018      	movs	r0, r3
   17968:	4b14      	ldr	r3, [pc, #80]	; (179bc <MQTT_InitRoutine+0x88>)
   1796a:	4798      	blx	r3
   1796c:	1e03      	subs	r3, r0, #0
   1796e:	d004      	beq.n	1797a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17970:	4b13      	ldr	r3, [pc, #76]	; (179c0 <MQTT_InitRoutine+0x8c>)
   17972:	0019      	movs	r1, r3
   17974:	2001      	movs	r0, #1
   17976:	4b13      	ldr	r3, [pc, #76]	; (179c4 <MQTT_InitRoutine+0x90>)
   17978:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1797a:	4b0e      	ldr	r3, [pc, #56]	; (179b4 <MQTT_InitRoutine+0x80>)
   1797c:	2234      	movs	r2, #52	; 0x34
   1797e:	5c9b      	ldrb	r3, [r3, r2]
   17980:	2b00      	cmp	r3, #0
   17982:	d004      	beq.n	1798e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17984:	4b10      	ldr	r3, [pc, #64]	; (179c8 <MQTT_InitRoutine+0x94>)
   17986:	0019      	movs	r1, r3
   17988:	2001      	movs	r0, #1
   1798a:	4b0e      	ldr	r3, [pc, #56]	; (179c4 <MQTT_InitRoutine+0x90>)
   1798c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1798e:	4b0f      	ldr	r3, [pc, #60]	; (179cc <MQTT_InitRoutine+0x98>)
   17990:	2201      	movs	r2, #1
   17992:	701a      	strb	r2, [r3, #0]
}
   17994:	46c0      	nop			; (mov r8, r8)
   17996:	46bd      	mov	sp, r7
   17998:	bd80      	pop	{r7, pc}
   1799a:	46c0      	nop			; (mov r8, r8)
   1799c:	00026111 	.word	0x00026111
   179a0:	00017621 	.word	0x00017621
   179a4:	000171ad 	.word	0x000171ad
   179a8:	00017179 	.word	0x00017179
   179ac:	00026159 	.word	0x00026159
   179b0:	000260c1 	.word	0x000260c1
   179b4:	2000089c 	.word	0x2000089c
   179b8:	00037460 	.word	0x00037460
   179bc:	00030519 	.word	0x00030519
   179c0:	00037858 	.word	0x00037858
   179c4:	0001ea01 	.word	0x0001ea01
   179c8:	00037c84 	.word	0x00037c84
   179cc:	20000623 	.word	0x20000623

000179d0 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   179d0:	b580      	push	{r7, lr}
   179d2:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   179d4:	2000      	movs	r0, #0
   179d6:	4b0d      	ldr	r3, [pc, #52]	; (17a0c <MQTT_HandleTransactions+0x3c>)
   179d8:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   179da:	4b0d      	ldr	r3, [pc, #52]	; (17a10 <MQTT_HandleTransactions+0x40>)
   179dc:	0018      	movs	r0, r3
   179de:	4b0d      	ldr	r3, [pc, #52]	; (17a14 <MQTT_HandleTransactions+0x44>)
   179e0:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   179e2:	4b0d      	ldr	r3, [pc, #52]	; (17a18 <MQTT_HandleTransactions+0x48>)
   179e4:	4798      	blx	r3
    MQTT_HandleImuMessages();
   179e6:	4b0d      	ldr	r3, [pc, #52]	; (17a1c <MQTT_HandleTransactions+0x4c>)
   179e8:	4798      	blx	r3
	MQTT_HandleTestMessages();
   179ea:	4b0d      	ldr	r3, [pc, #52]	; (17a20 <MQTT_HandleTransactions+0x50>)
   179ec:	4798      	blx	r3
	MQTT_HandleNauMessages();
   179ee:	4b0d      	ldr	r3, [pc, #52]	; (17a24 <MQTT_HandleTransactions+0x54>)
   179f0:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   179f2:	4b0d      	ldr	r3, [pc, #52]	; (17a28 <MQTT_HandleTransactions+0x58>)
   179f4:	2234      	movs	r2, #52	; 0x34
   179f6:	5c9b      	ldrb	r3, [r3, r2]
   179f8:	2b00      	cmp	r3, #0
   179fa:	d004      	beq.n	17a06 <MQTT_HandleTransactions+0x36>
   179fc:	4b0a      	ldr	r3, [pc, #40]	; (17a28 <MQTT_HandleTransactions+0x58>)
   179fe:	2164      	movs	r1, #100	; 0x64
   17a00:	0018      	movs	r0, r3
   17a02:	4b0a      	ldr	r3, [pc, #40]	; (17a2c <MQTT_HandleTransactions+0x5c>)
   17a04:	4798      	blx	r3
}
   17a06:	46c0      	nop			; (mov r8, r8)
   17a08:	46bd      	mov	sp, r7
   17a0a:	bd80      	pop	{r7, pc}
   17a0c:	00022b55 	.word	0x00022b55
   17a10:	20004944 	.word	0x20004944
   17a14:	00033375 	.word	0x00033375
   17a18:	00017ba1 	.word	0x00017ba1
   17a1c:	00017a31 	.word	0x00017a31
   17a20:	00017abd 	.word	0x00017abd
   17a24:	00017b31 	.word	0x00017b31
   17a28:	2000089c 	.word	0x2000089c
   17a2c:	00030749 	.word	0x00030749

00017a30 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17a30:	b590      	push	{r4, r7, lr}
   17a32:	b085      	sub	sp, #20
   17a34:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17a36:	4b18      	ldr	r3, [pc, #96]	; (17a98 <MQTT_HandleImuMessages+0x68>)
   17a38:	681b      	ldr	r3, [r3, #0]
   17a3a:	0039      	movs	r1, r7
   17a3c:	2200      	movs	r2, #0
   17a3e:	0018      	movs	r0, r3
   17a40:	4b16      	ldr	r3, [pc, #88]	; (17a9c <MQTT_HandleImuMessages+0x6c>)
   17a42:	4798      	blx	r3
   17a44:	0003      	movs	r3, r0
   17a46:	2b01      	cmp	r3, #1
   17a48:	d121      	bne.n	17a8e <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17a4a:	003b      	movs	r3, r7
   17a4c:	2200      	movs	r2, #0
   17a4e:	5e9b      	ldrsh	r3, [r3, r2]
   17a50:	001c      	movs	r4, r3
   17a52:	003b      	movs	r3, r7
   17a54:	2202      	movs	r2, #2
   17a56:	5e9b      	ldrsh	r3, [r3, r2]
   17a58:	0019      	movs	r1, r3
   17a5a:	003b      	movs	r3, r7
   17a5c:	2204      	movs	r2, #4
   17a5e:	5e9b      	ldrsh	r3, [r3, r2]
   17a60:	4a0f      	ldr	r2, [pc, #60]	; (17aa0 <MQTT_HandleImuMessages+0x70>)
   17a62:	4810      	ldr	r0, [pc, #64]	; (17aa4 <MQTT_HandleImuMessages+0x74>)
   17a64:	9301      	str	r3, [sp, #4]
   17a66:	9100      	str	r1, [sp, #0]
   17a68:	0023      	movs	r3, r4
   17a6a:	213f      	movs	r1, #63	; 0x3f
   17a6c:	4c0e      	ldr	r4, [pc, #56]	; (17aa8 <MQTT_HandleImuMessages+0x78>)
   17a6e:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17a70:	4b0c      	ldr	r3, [pc, #48]	; (17aa4 <MQTT_HandleImuMessages+0x74>)
   17a72:	0018      	movs	r0, r3
   17a74:	4b0d      	ldr	r3, [pc, #52]	; (17aac <MQTT_HandleImuMessages+0x7c>)
   17a76:	4798      	blx	r3
   17a78:	0004      	movs	r4, r0
   17a7a:	4a0a      	ldr	r2, [pc, #40]	; (17aa4 <MQTT_HandleImuMessages+0x74>)
   17a7c:	490c      	ldr	r1, [pc, #48]	; (17ab0 <MQTT_HandleImuMessages+0x80>)
   17a7e:	480d      	ldr	r0, [pc, #52]	; (17ab4 <MQTT_HandleImuMessages+0x84>)
   17a80:	2300      	movs	r3, #0
   17a82:	9301      	str	r3, [sp, #4]
   17a84:	2301      	movs	r3, #1
   17a86:	9300      	str	r3, [sp, #0]
   17a88:	0023      	movs	r3, r4
   17a8a:	4c0b      	ldr	r4, [pc, #44]	; (17ab8 <MQTT_HandleImuMessages+0x88>)
   17a8c:	47a0      	blx	r4
    }
}
   17a8e:	46c0      	nop			; (mov r8, r8)
   17a90:	46bd      	mov	sp, r7
   17a92:	b003      	add	sp, #12
   17a94:	bd90      	pop	{r4, r7, pc}
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	2000062c 	.word	0x2000062c
   17a9c:	0001bb15 	.word	0x0001bb15
   17aa0:	00037ca0 	.word	0x00037ca0
   17aa4:	20000030 	.word	0x20000030
   17aa8:	00035949 	.word	0x00035949
   17aac:	00035aa7 	.word	0x00035aa7
   17ab0:	00037cc4 	.word	0x00037cc4
   17ab4:	2000089c 	.word	0x2000089c
   17ab8:	00030695 	.word	0x00030695

00017abc <MQTT_HandleTestMessages>:

static void MQTT_HandleTestMessages(void)
{
   17abc:	b590      	push	{r4, r7, lr}
   17abe:	b085      	sub	sp, #20
   17ac0:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   17ac2:	4b12      	ldr	r3, [pc, #72]	; (17b0c <MQTT_HandleTestMessages+0x50>)
   17ac4:	681b      	ldr	r3, [r3, #0]
   17ac6:	1d39      	adds	r1, r7, #4
   17ac8:	2200      	movs	r2, #0
   17aca:	0018      	movs	r0, r3
   17acc:	4b10      	ldr	r3, [pc, #64]	; (17b10 <MQTT_HandleTestMessages+0x54>)
   17ace:	4798      	blx	r3
   17ad0:	0003      	movs	r3, r0
   17ad2:	2b01      	cmp	r3, #1
   17ad4:	d115      	bne.n	17b02 <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   17ad6:	1d3b      	adds	r3, r7, #4
   17ad8:	781b      	ldrb	r3, [r3, #0]
   17ada:	4a0e      	ldr	r2, [pc, #56]	; (17b14 <MQTT_HandleTestMessages+0x58>)
   17adc:	480e      	ldr	r0, [pc, #56]	; (17b18 <MQTT_HandleTestMessages+0x5c>)
   17ade:	213f      	movs	r1, #63	; 0x3f
   17ae0:	4c0e      	ldr	r4, [pc, #56]	; (17b1c <MQTT_HandleTestMessages+0x60>)
   17ae2:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17ae4:	4b0c      	ldr	r3, [pc, #48]	; (17b18 <MQTT_HandleTestMessages+0x5c>)
   17ae6:	0018      	movs	r0, r3
   17ae8:	4b0d      	ldr	r3, [pc, #52]	; (17b20 <MQTT_HandleTestMessages+0x64>)
   17aea:	4798      	blx	r3
   17aec:	0004      	movs	r4, r0
   17aee:	4a0a      	ldr	r2, [pc, #40]	; (17b18 <MQTT_HandleTestMessages+0x5c>)
   17af0:	490c      	ldr	r1, [pc, #48]	; (17b24 <MQTT_HandleTestMessages+0x68>)
   17af2:	480d      	ldr	r0, [pc, #52]	; (17b28 <MQTT_HandleTestMessages+0x6c>)
   17af4:	2300      	movs	r3, #0
   17af6:	9301      	str	r3, [sp, #4]
   17af8:	2301      	movs	r3, #1
   17afa:	9300      	str	r3, [sp, #0]
   17afc:	0023      	movs	r3, r4
   17afe:	4c0b      	ldr	r4, [pc, #44]	; (17b2c <MQTT_HandleTestMessages+0x70>)
   17b00:	47a0      	blx	r4
	}
}
   17b02:	46c0      	nop			; (mov r8, r8)
   17b04:	46bd      	mov	sp, r7
   17b06:	b003      	add	sp, #12
   17b08:	bd90      	pop	{r4, r7, pc}
   17b0a:	46c0      	nop			; (mov r8, r8)
   17b0c:	20000634 	.word	0x20000634
   17b10:	0001bb15 	.word	0x0001bb15
   17b14:	00037cd8 	.word	0x00037cd8
   17b18:	20000030 	.word	0x20000030
   17b1c:	00035949 	.word	0x00035949
   17b20:	00035aa7 	.word	0x00035aa7
   17b24:	00037ce8 	.word	0x00037ce8
   17b28:	2000089c 	.word	0x2000089c
   17b2c:	00030695 	.word	0x00030695

00017b30 <MQTT_HandleNauMessages>:

static void MQTT_HandleNauMessages(void)
{
   17b30:	b590      	push	{r4, r7, lr}
   17b32:	b085      	sub	sp, #20
   17b34:	af02      	add	r7, sp, #8
	struct NauPacket NauDataVar;
	if (pdPASS == xQueueReceive(xQueueNauBuffer, &NauDataVar, 0)) {
   17b36:	4b11      	ldr	r3, [pc, #68]	; (17b7c <MQTT_HandleNauMessages+0x4c>)
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	1d39      	adds	r1, r7, #4
   17b3c:	2200      	movs	r2, #0
   17b3e:	0018      	movs	r0, r3
   17b40:	4b0f      	ldr	r3, [pc, #60]	; (17b80 <MQTT_HandleNauMessages+0x50>)
   17b42:	4798      	blx	r3
   17b44:	0003      	movs	r3, r0
   17b46:	2b01      	cmp	r3, #1
   17b48:	d114      	bne.n	17b74 <MQTT_HandleNauMessages+0x44>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", NauDataVar.nau);
   17b4a:	687b      	ldr	r3, [r7, #4]
   17b4c:	4a0d      	ldr	r2, [pc, #52]	; (17b84 <MQTT_HandleNauMessages+0x54>)
   17b4e:	480e      	ldr	r0, [pc, #56]	; (17b88 <MQTT_HandleNauMessages+0x58>)
   17b50:	213f      	movs	r1, #63	; 0x3f
   17b52:	4c0e      	ldr	r4, [pc, #56]	; (17b8c <MQTT_HandleNauMessages+0x5c>)
   17b54:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, NAU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17b56:	4b0c      	ldr	r3, [pc, #48]	; (17b88 <MQTT_HandleNauMessages+0x58>)
   17b58:	0018      	movs	r0, r3
   17b5a:	4b0d      	ldr	r3, [pc, #52]	; (17b90 <MQTT_HandleNauMessages+0x60>)
   17b5c:	4798      	blx	r3
   17b5e:	0004      	movs	r4, r0
   17b60:	4a09      	ldr	r2, [pc, #36]	; (17b88 <MQTT_HandleNauMessages+0x58>)
   17b62:	490c      	ldr	r1, [pc, #48]	; (17b94 <MQTT_HandleNauMessages+0x64>)
   17b64:	480c      	ldr	r0, [pc, #48]	; (17b98 <MQTT_HandleNauMessages+0x68>)
   17b66:	2300      	movs	r3, #0
   17b68:	9301      	str	r3, [sp, #4]
   17b6a:	2301      	movs	r3, #1
   17b6c:	9300      	str	r3, [sp, #0]
   17b6e:	0023      	movs	r3, r4
   17b70:	4c0a      	ldr	r4, [pc, #40]	; (17b9c <MQTT_HandleNauMessages+0x6c>)
   17b72:	47a0      	blx	r4
	}
}
   17b74:	46c0      	nop			; (mov r8, r8)
   17b76:	46bd      	mov	sp, r7
   17b78:	b003      	add	sp, #12
   17b7a:	bd90      	pop	{r4, r7, pc}
   17b7c:	20000638 	.word	0x20000638
   17b80:	0001bb15 	.word	0x0001bb15
   17b84:	00037cd8 	.word	0x00037cd8
   17b88:	20000030 	.word	0x20000030
   17b8c:	00035949 	.word	0x00035949
   17b90:	00035aa7 	.word	0x00035aa7
   17b94:	00037cfc 	.word	0x00037cfc
   17b98:	2000089c 	.word	0x2000089c
   17b9c:	00030695 	.word	0x00030695

00017ba0 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17ba0:	b590      	push	{r4, r7, lr}
   17ba2:	b08b      	sub	sp, #44	; 0x2c
   17ba4:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17ba6:	4b39      	ldr	r3, [pc, #228]	; (17c8c <MQTT_HandleGameMessages+0xec>)
   17ba8:	681b      	ldr	r3, [r3, #0]
   17baa:	2208      	movs	r2, #8
   17bac:	18b9      	adds	r1, r7, r2
   17bae:	2200      	movs	r2, #0
   17bb0:	0018      	movs	r0, r3
   17bb2:	4b37      	ldr	r3, [pc, #220]	; (17c90 <MQTT_HandleGameMessages+0xf0>)
   17bb4:	4798      	blx	r3
   17bb6:	0003      	movs	r3, r0
   17bb8:	2b01      	cmp	r3, #1
   17bba:	d163      	bne.n	17c84 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17bbc:	4b35      	ldr	r3, [pc, #212]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17bbe:	4a36      	ldr	r2, [pc, #216]	; (17c98 <MQTT_HandleGameMessages+0xf8>)
   17bc0:	ca03      	ldmia	r2!, {r0, r1}
   17bc2:	c303      	stmia	r3!, {r0, r1}
   17bc4:	8812      	ldrh	r2, [r2, #0]
   17bc6:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17bc8:	2300      	movs	r3, #0
   17bca:	61fb      	str	r3, [r7, #28]
   17bcc:	e02d      	b.n	17c2a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17bce:	2308      	movs	r3, #8
   17bd0:	18fa      	adds	r2, r7, r3
   17bd2:	69fb      	ldr	r3, [r7, #28]
   17bd4:	18d3      	adds	r3, r2, r3
   17bd6:	781b      	ldrb	r3, [r3, #0]
   17bd8:	2bff      	cmp	r3, #255	; 0xff
   17bda:	d02a      	beq.n	17c32 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17bdc:	2308      	movs	r3, #8
   17bde:	18fa      	adds	r2, r7, r3
   17be0:	69fb      	ldr	r3, [r7, #28]
   17be2:	18d3      	adds	r3, r2, r3
   17be4:	781b      	ldrb	r3, [r3, #0]
   17be6:	4a2d      	ldr	r2, [pc, #180]	; (17c9c <MQTT_HandleGameMessages+0xfc>)
   17be8:	0038      	movs	r0, r7
   17bea:	2103      	movs	r1, #3
   17bec:	4c2c      	ldr	r4, [pc, #176]	; (17ca0 <MQTT_HandleGameMessages+0x100>)
   17bee:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17bf0:	003a      	movs	r2, r7
   17bf2:	4b28      	ldr	r3, [pc, #160]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17bf4:	0011      	movs	r1, r2
   17bf6:	0018      	movs	r0, r3
   17bf8:	4b2a      	ldr	r3, [pc, #168]	; (17ca4 <MQTT_HandleGameMessages+0x104>)
   17bfa:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17bfc:	69fb      	ldr	r3, [r7, #28]
   17bfe:	3301      	adds	r3, #1
   17c00:	2208      	movs	r2, #8
   17c02:	18ba      	adds	r2, r7, r2
   17c04:	5cd3      	ldrb	r3, [r2, r3]
   17c06:	2bff      	cmp	r3, #255	; 0xff
   17c08:	d00c      	beq.n	17c24 <MQTT_HandleGameMessages+0x84>
   17c0a:	69fb      	ldr	r3, [r7, #28]
   17c0c:	3301      	adds	r3, #1
   17c0e:	2b13      	cmp	r3, #19
   17c10:	dc08      	bgt.n	17c24 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17c12:	003b      	movs	r3, r7
   17c14:	222c      	movs	r2, #44	; 0x2c
   17c16:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17c18:	003a      	movs	r2, r7
   17c1a:	4b1e      	ldr	r3, [pc, #120]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c1c:	0011      	movs	r1, r2
   17c1e:	0018      	movs	r0, r3
   17c20:	4b20      	ldr	r3, [pc, #128]	; (17ca4 <MQTT_HandleGameMessages+0x104>)
   17c22:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17c24:	69fb      	ldr	r3, [r7, #28]
   17c26:	3301      	adds	r3, #1
   17c28:	61fb      	str	r3, [r7, #28]
   17c2a:	69fb      	ldr	r3, [r7, #28]
   17c2c:	2b13      	cmp	r3, #19
   17c2e:	ddce      	ble.n	17bce <MQTT_HandleGameMessages+0x2e>
   17c30:	e000      	b.n	17c34 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17c32:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17c34:	4b17      	ldr	r3, [pc, #92]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c36:	0018      	movs	r0, r3
   17c38:	4b1b      	ldr	r3, [pc, #108]	; (17ca8 <MQTT_HandleGameMessages+0x108>)
   17c3a:	4798      	blx	r3
   17c3c:	0003      	movs	r3, r0
   17c3e:	001a      	movs	r2, r3
   17c40:	4b14      	ldr	r3, [pc, #80]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c42:	18d2      	adds	r2, r2, r3
   17c44:	4b19      	ldr	r3, [pc, #100]	; (17cac <MQTT_HandleGameMessages+0x10c>)
   17c46:	0010      	movs	r0, r2
   17c48:	0019      	movs	r1, r3
   17c4a:	2303      	movs	r3, #3
   17c4c:	001a      	movs	r2, r3
   17c4e:	4b18      	ldr	r3, [pc, #96]	; (17cb0 <MQTT_HandleGameMessages+0x110>)
   17c50:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17c52:	4b10      	ldr	r3, [pc, #64]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c54:	0019      	movs	r1, r3
   17c56:	2001      	movs	r0, #1
   17c58:	4b16      	ldr	r3, [pc, #88]	; (17cb4 <MQTT_HandleGameMessages+0x114>)
   17c5a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17c5c:	4b16      	ldr	r3, [pc, #88]	; (17cb8 <MQTT_HandleGameMessages+0x118>)
   17c5e:	0019      	movs	r1, r3
   17c60:	2001      	movs	r0, #1
   17c62:	4b14      	ldr	r3, [pc, #80]	; (17cb4 <MQTT_HandleGameMessages+0x114>)
   17c64:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17c66:	4b0b      	ldr	r3, [pc, #44]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c68:	0018      	movs	r0, r3
   17c6a:	4b0f      	ldr	r3, [pc, #60]	; (17ca8 <MQTT_HandleGameMessages+0x108>)
   17c6c:	4798      	blx	r3
   17c6e:	0004      	movs	r4, r0
   17c70:	4a08      	ldr	r2, [pc, #32]	; (17c94 <MQTT_HandleGameMessages+0xf4>)
   17c72:	4912      	ldr	r1, [pc, #72]	; (17cbc <MQTT_HandleGameMessages+0x11c>)
   17c74:	4812      	ldr	r0, [pc, #72]	; (17cc0 <MQTT_HandleGameMessages+0x120>)
   17c76:	2300      	movs	r3, #0
   17c78:	9301      	str	r3, [sp, #4]
   17c7a:	2301      	movs	r3, #1
   17c7c:	9300      	str	r3, [sp, #0]
   17c7e:	0023      	movs	r3, r4
   17c80:	4c10      	ldr	r4, [pc, #64]	; (17cc4 <MQTT_HandleGameMessages+0x124>)
   17c82:	47a0      	blx	r4
    }
}
   17c84:	46c0      	nop			; (mov r8, r8)
   17c86:	46bd      	mov	sp, r7
   17c88:	b009      	add	sp, #36	; 0x24
   17c8a:	bd90      	pop	{r4, r7, pc}
   17c8c:	20000628 	.word	0x20000628
   17c90:	0001bb15 	.word	0x0001bb15
   17c94:	20000030 	.word	0x20000030
   17c98:	000379f4 	.word	0x000379f4
   17c9c:	00037d10 	.word	0x00037d10
   17ca0:	00035949 	.word	0x00035949
   17ca4:	00035a2d 	.word	0x00035a2d
   17ca8:	00035aa7 	.word	0x00035aa7
   17cac:	00037d14 	.word	0x00037d14
   17cb0:	000356b9 	.word	0x000356b9
   17cb4:	0001ea01 	.word	0x0001ea01
   17cb8:	00037d18 	.word	0x00037d18
   17cbc:	00037d1c 	.word	0x00037d1c
   17cc0:	2000089c 	.word	0x2000089c
   17cc4:	00030695 	.word	0x00030695

00017cc8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17cc8:	b590      	push	{r4, r7, lr}
   17cca:	b08d      	sub	sp, #52	; 0x34
   17ccc:	af02      	add	r7, sp, #8
   17cce:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17cd0:	2064      	movs	r0, #100	; 0x64
   17cd2:	4b85      	ldr	r3, [pc, #532]	; (17ee8 <vWifiTask+0x220>)
   17cd4:	4798      	blx	r3
    init_state();
   17cd6:	4b85      	ldr	r3, [pc, #532]	; (17eec <vWifiTask+0x224>)
   17cd8:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17cda:	2200      	movs	r2, #0
   17cdc:	2104      	movs	r1, #4
   17cde:	2005      	movs	r0, #5
   17ce0:	4b83      	ldr	r3, [pc, #524]	; (17ef0 <vWifiTask+0x228>)
   17ce2:	4798      	blx	r3
   17ce4:	0002      	movs	r2, r0
   17ce6:	4b83      	ldr	r3, [pc, #524]	; (17ef4 <vWifiTask+0x22c>)
   17ce8:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17cea:	2200      	movs	r2, #0
   17cec:	2106      	movs	r1, #6
   17cee:	2005      	movs	r0, #5
   17cf0:	4b7f      	ldr	r3, [pc, #508]	; (17ef0 <vWifiTask+0x228>)
   17cf2:	4798      	blx	r3
   17cf4:	0002      	movs	r2, r0
   17cf6:	4b80      	ldr	r3, [pc, #512]	; (17ef8 <vWifiTask+0x230>)
   17cf8:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17cfa:	2200      	movs	r2, #0
   17cfc:	2114      	movs	r1, #20
   17cfe:	2002      	movs	r0, #2
   17d00:	4b7b      	ldr	r3, [pc, #492]	; (17ef0 <vWifiTask+0x228>)
   17d02:	4798      	blx	r3
   17d04:	0002      	movs	r2, r0
   17d06:	4b7d      	ldr	r3, [pc, #500]	; (17efc <vWifiTask+0x234>)
   17d08:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   17d0a:	2200      	movs	r2, #0
   17d0c:	2101      	movs	r1, #1
   17d0e:	2005      	movs	r0, #5
   17d10:	4b77      	ldr	r3, [pc, #476]	; (17ef0 <vWifiTask+0x228>)
   17d12:	4798      	blx	r3
   17d14:	0002      	movs	r2, r0
   17d16:	4b7a      	ldr	r3, [pc, #488]	; (17f00 <vWifiTask+0x238>)
   17d18:	601a      	str	r2, [r3, #0]
	xQueueNauBuffer = xQueueCreate(5, sizeof(struct NauPacket));
   17d1a:	2200      	movs	r2, #0
   17d1c:	2104      	movs	r1, #4
   17d1e:	2005      	movs	r0, #5
   17d20:	4b73      	ldr	r3, [pc, #460]	; (17ef0 <vWifiTask+0x228>)
   17d22:	4798      	blx	r3
   17d24:	0002      	movs	r2, r0
   17d26:	4b77      	ldr	r3, [pc, #476]	; (17f04 <vWifiTask+0x23c>)
   17d28:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17d2a:	2200      	movs	r2, #0
   17d2c:	2102      	movs	r1, #2
   17d2e:	2005      	movs	r0, #5
   17d30:	4b6f      	ldr	r3, [pc, #444]	; (17ef0 <vWifiTask+0x228>)
   17d32:	4798      	blx	r3
   17d34:	0002      	movs	r2, r0
   17d36:	4b74      	ldr	r3, [pc, #464]	; (17f08 <vWifiTask+0x240>)
   17d38:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueTestBuffer == NULL || xQueueNauBuffer) {
   17d3a:	4b6e      	ldr	r3, [pc, #440]	; (17ef4 <vWifiTask+0x22c>)
   17d3c:	681b      	ldr	r3, [r3, #0]
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d013      	beq.n	17d6a <vWifiTask+0xa2>
   17d42:	4b6d      	ldr	r3, [pc, #436]	; (17ef8 <vWifiTask+0x230>)
   17d44:	681b      	ldr	r3, [r3, #0]
   17d46:	2b00      	cmp	r3, #0
   17d48:	d00f      	beq.n	17d6a <vWifiTask+0xa2>
   17d4a:	4b6c      	ldr	r3, [pc, #432]	; (17efc <vWifiTask+0x234>)
   17d4c:	681b      	ldr	r3, [r3, #0]
   17d4e:	2b00      	cmp	r3, #0
   17d50:	d00b      	beq.n	17d6a <vWifiTask+0xa2>
   17d52:	4b6d      	ldr	r3, [pc, #436]	; (17f08 <vWifiTask+0x240>)
   17d54:	681b      	ldr	r3, [r3, #0]
   17d56:	2b00      	cmp	r3, #0
   17d58:	d007      	beq.n	17d6a <vWifiTask+0xa2>
   17d5a:	4b69      	ldr	r3, [pc, #420]	; (17f00 <vWifiTask+0x238>)
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	2b00      	cmp	r3, #0
   17d60:	d003      	beq.n	17d6a <vWifiTask+0xa2>
   17d62:	4b68      	ldr	r3, [pc, #416]	; (17f04 <vWifiTask+0x23c>)
   17d64:	681b      	ldr	r3, [r3, #0]
   17d66:	2b00      	cmp	r3, #0
   17d68:	d003      	beq.n	17d72 <vWifiTask+0xaa>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17d6a:	4b68      	ldr	r3, [pc, #416]	; (17f0c <vWifiTask+0x244>)
   17d6c:	0018      	movs	r0, r3
   17d6e:	4b68      	ldr	r3, [pc, #416]	; (17f10 <vWifiTask+0x248>)
   17d70:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   17d72:	4b68      	ldr	r3, [pc, #416]	; (17f14 <vWifiTask+0x24c>)
   17d74:	0018      	movs	r0, r3
   17d76:	4b66      	ldr	r3, [pc, #408]	; (17f10 <vWifiTask+0x248>)
   17d78:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17d7a:	4b67      	ldr	r3, [pc, #412]	; (17f18 <vWifiTask+0x250>)
   17d7c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17d7e:	4b67      	ldr	r3, [pc, #412]	; (17f1c <vWifiTask+0x254>)
   17d80:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   17d82:	4b67      	ldr	r3, [pc, #412]	; (17f20 <vWifiTask+0x258>)
   17d84:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17d86:	4b67      	ldr	r3, [pc, #412]	; (17f24 <vWifiTask+0x25c>)
   17d88:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17d8a:	4b67      	ldr	r3, [pc, #412]	; (17f28 <vWifiTask+0x260>)
   17d8c:	4798      	blx	r3
    configure_extint_callbacks();
   17d8e:	4b67      	ldr	r3, [pc, #412]	; (17f2c <vWifiTask+0x264>)
   17d90:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17d92:	230c      	movs	r3, #12
   17d94:	18fb      	adds	r3, r7, r3
   17d96:	2218      	movs	r2, #24
   17d98:	2100      	movs	r1, #0
   17d9a:	0018      	movs	r0, r3
   17d9c:	4b64      	ldr	r3, [pc, #400]	; (17f30 <vWifiTask+0x268>)
   17d9e:	4798      	blx	r3

    nm_bsp_init();
   17da0:	4b64      	ldr	r3, [pc, #400]	; (17f34 <vWifiTask+0x26c>)
   17da2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17da4:	230c      	movs	r3, #12
   17da6:	18fb      	adds	r3, r7, r3
   17da8:	4a63      	ldr	r2, [pc, #396]	; (17f38 <vWifiTask+0x270>)
   17daa:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17dac:	2327      	movs	r3, #39	; 0x27
   17dae:	18fc      	adds	r4, r7, r3
   17db0:	230c      	movs	r3, #12
   17db2:	18fb      	adds	r3, r7, r3
   17db4:	0018      	movs	r0, r3
   17db6:	4b61      	ldr	r3, [pc, #388]	; (17f3c <vWifiTask+0x274>)
   17db8:	4798      	blx	r3
   17dba:	0003      	movs	r3, r0
   17dbc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17dbe:	2327      	movs	r3, #39	; 0x27
   17dc0:	18fb      	adds	r3, r7, r3
   17dc2:	781b      	ldrb	r3, [r3, #0]
   17dc4:	b25b      	sxtb	r3, r3
   17dc6:	2b00      	cmp	r3, #0
   17dc8:	d009      	beq.n	17dde <vWifiTask+0x116>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17dca:	2327      	movs	r3, #39	; 0x27
   17dcc:	18fb      	adds	r3, r7, r3
   17dce:	2200      	movs	r2, #0
   17dd0:	569a      	ldrsb	r2, [r3, r2]
   17dd2:	4b5b      	ldr	r3, [pc, #364]	; (17f40 <vWifiTask+0x278>)
   17dd4:	0019      	movs	r1, r3
   17dd6:	2001      	movs	r0, #1
   17dd8:	4b5a      	ldr	r3, [pc, #360]	; (17f44 <vWifiTask+0x27c>)
   17dda:	4798      	blx	r3
        while (1) {
   17ddc:	e7fe      	b.n	17ddc <vWifiTask+0x114>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17dde:	4a5a      	ldr	r2, [pc, #360]	; (17f48 <vWifiTask+0x280>)
   17de0:	4b5a      	ldr	r3, [pc, #360]	; (17f4c <vWifiTask+0x284>)
   17de2:	0019      	movs	r1, r3
   17de4:	2001      	movs	r0, #1
   17de6:	4b57      	ldr	r3, [pc, #348]	; (17f44 <vWifiTask+0x27c>)
   17de8:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17dea:	4b59      	ldr	r3, [pc, #356]	; (17f50 <vWifiTask+0x288>)
   17dec:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17dee:	4a59      	ldr	r2, [pc, #356]	; (17f54 <vWifiTask+0x28c>)
   17df0:	4b59      	ldr	r3, [pc, #356]	; (17f58 <vWifiTask+0x290>)
   17df2:	0011      	movs	r1, r2
   17df4:	0018      	movs	r0, r3
   17df6:	4b59      	ldr	r3, [pc, #356]	; (17f5c <vWifiTask+0x294>)
   17df8:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17dfa:	4a59      	ldr	r2, [pc, #356]	; (17f60 <vWifiTask+0x298>)
   17dfc:	4852      	ldr	r0, [pc, #328]	; (17f48 <vWifiTask+0x280>)
   17dfe:	23ff      	movs	r3, #255	; 0xff
   17e00:	9300      	str	r3, [sp, #0]
   17e02:	0013      	movs	r3, r2
   17e04:	2202      	movs	r2, #2
   17e06:	2102      	movs	r1, #2
   17e08:	4c56      	ldr	r4, [pc, #344]	; (17f64 <vWifiTask+0x29c>)
   17e0a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17e0c:	e006      	b.n	17e1c <vWifiTask+0x154>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17e0e:	2000      	movs	r0, #0
   17e10:	4b55      	ldr	r3, [pc, #340]	; (17f68 <vWifiTask+0x2a0>)
   17e12:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17e14:	4b55      	ldr	r3, [pc, #340]	; (17f6c <vWifiTask+0x2a4>)
   17e16:	0018      	movs	r0, r3
   17e18:	4b55      	ldr	r3, [pc, #340]	; (17f70 <vWifiTask+0x2a8>)
   17e1a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17e1c:	2002      	movs	r0, #2
   17e1e:	4b55      	ldr	r3, [pc, #340]	; (17f74 <vWifiTask+0x2ac>)
   17e20:	4798      	blx	r3
   17e22:	0003      	movs	r3, r0
   17e24:	001a      	movs	r2, r3
   17e26:	2301      	movs	r3, #1
   17e28:	4053      	eors	r3, r2
   17e2a:	b2db      	uxtb	r3, r3
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	d1ee      	bne.n	17e0e <vWifiTask+0x146>
    }

    vTaskDelay(1000);
   17e30:	23fa      	movs	r3, #250	; 0xfa
   17e32:	009b      	lsls	r3, r3, #2
   17e34:	0018      	movs	r0, r3
   17e36:	4b2c      	ldr	r3, [pc, #176]	; (17ee8 <vWifiTask+0x220>)
   17e38:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17e3a:	4b4f      	ldr	r3, [pc, #316]	; (17f78 <vWifiTask+0x2b0>)
   17e3c:	2201      	movs	r2, #1
   17e3e:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17e40:	4b4d      	ldr	r3, [pc, #308]	; (17f78 <vWifiTask+0x2b0>)
   17e42:	781b      	ldrb	r3, [r3, #0]
   17e44:	b25b      	sxtb	r3, r3
   17e46:	2b01      	cmp	r3, #1
   17e48:	d00b      	beq.n	17e62 <vWifiTask+0x19a>
   17e4a:	dc02      	bgt.n	17e52 <vWifiTask+0x18a>
   17e4c:	2b00      	cmp	r3, #0
   17e4e:	d005      	beq.n	17e5c <vWifiTask+0x194>
   17e50:	e010      	b.n	17e74 <vWifiTask+0x1ac>
   17e52:	2b02      	cmp	r3, #2
   17e54:	d008      	beq.n	17e68 <vWifiTask+0x1a0>
   17e56:	2b03      	cmp	r3, #3
   17e58:	d009      	beq.n	17e6e <vWifiTask+0x1a6>
   17e5a:	e00b      	b.n	17e74 <vWifiTask+0x1ac>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17e5c:	4b47      	ldr	r3, [pc, #284]	; (17f7c <vWifiTask+0x2b4>)
   17e5e:	4798      	blx	r3

                break;
   17e60:	e00c      	b.n	17e7c <vWifiTask+0x1b4>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17e62:	4b47      	ldr	r3, [pc, #284]	; (17f80 <vWifiTask+0x2b8>)
   17e64:	4798      	blx	r3
                break;
   17e66:	e009      	b.n	17e7c <vWifiTask+0x1b4>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17e68:	4b46      	ldr	r3, [pc, #280]	; (17f84 <vWifiTask+0x2bc>)
   17e6a:	4798      	blx	r3
                break;
   17e6c:	e006      	b.n	17e7c <vWifiTask+0x1b4>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17e6e:	4b46      	ldr	r3, [pc, #280]	; (17f88 <vWifiTask+0x2c0>)
   17e70:	4798      	blx	r3
                break;
   17e72:	e003      	b.n	17e7c <vWifiTask+0x1b4>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17e74:	4b40      	ldr	r3, [pc, #256]	; (17f78 <vWifiTask+0x2b0>)
   17e76:	2200      	movs	r2, #0
   17e78:	701a      	strb	r2, [r3, #0]
                break;
   17e7a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17e7c:	230b      	movs	r3, #11
   17e7e:	18fb      	adds	r3, r7, r3
   17e80:	2200      	movs	r2, #0
   17e82:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17e84:	4b1b      	ldr	r3, [pc, #108]	; (17ef4 <vWifiTask+0x22c>)
   17e86:	681b      	ldr	r3, [r3, #0]
   17e88:	220b      	movs	r2, #11
   17e8a:	18b9      	adds	r1, r7, r2
   17e8c:	2200      	movs	r2, #0
   17e8e:	0018      	movs	r0, r3
   17e90:	4b3e      	ldr	r3, [pc, #248]	; (17f8c <vWifiTask+0x2c4>)
   17e92:	4798      	blx	r3
   17e94:	0003      	movs	r3, r0
   17e96:	2b01      	cmp	r3, #1
   17e98:	d105      	bne.n	17ea6 <vWifiTask+0x1de>
            wifiStateMachine = DataToReceive;  // Update new state
   17e9a:	230b      	movs	r3, #11
   17e9c:	18fb      	adds	r3, r7, r3
   17e9e:	781b      	ldrb	r3, [r3, #0]
   17ea0:	b25a      	sxtb	r2, r3
   17ea2:	4b35      	ldr	r3, [pc, #212]	; (17f78 <vWifiTask+0x2b0>)
   17ea4:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17ea6:	4b3a      	ldr	r3, [pc, #232]	; (17f90 <vWifiTask+0x2c8>)
   17ea8:	781b      	ldrb	r3, [r3, #0]
   17eaa:	b2db      	uxtb	r3, r3
   17eac:	2b00      	cmp	r3, #0
   17eae:	d017      	beq.n	17ee0 <vWifiTask+0x218>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17eb0:	4b38      	ldr	r3, [pc, #224]	; (17f94 <vWifiTask+0x2cc>)
   17eb2:	0018      	movs	r0, r3
   17eb4:	4b38      	ldr	r3, [pc, #224]	; (17f98 <vWifiTask+0x2d0>)
   17eb6:	4798      	blx	r3
   17eb8:	0004      	movs	r4, r0
   17eba:	4a36      	ldr	r2, [pc, #216]	; (17f94 <vWifiTask+0x2cc>)
   17ebc:	4937      	ldr	r1, [pc, #220]	; (17f9c <vWifiTask+0x2d4>)
   17ebe:	4838      	ldr	r0, [pc, #224]	; (17fa0 <vWifiTask+0x2d8>)
   17ec0:	2300      	movs	r3, #0
   17ec2:	9301      	str	r3, [sp, #4]
   17ec4:	2301      	movs	r3, #1
   17ec6:	9300      	str	r3, [sp, #0]
   17ec8:	0023      	movs	r3, r4
   17eca:	4c36      	ldr	r4, [pc, #216]	; (17fa4 <vWifiTask+0x2dc>)
   17ecc:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   17ece:	4a31      	ldr	r2, [pc, #196]	; (17f94 <vWifiTask+0x2cc>)
   17ed0:	4b35      	ldr	r3, [pc, #212]	; (17fa8 <vWifiTask+0x2e0>)
   17ed2:	0019      	movs	r1, r3
   17ed4:	2001      	movs	r0, #1
   17ed6:	4b1b      	ldr	r3, [pc, #108]	; (17f44 <vWifiTask+0x27c>)
   17ed8:	4798      	blx	r3
            isPressed = false;
   17eda:	4b2d      	ldr	r3, [pc, #180]	; (17f90 <vWifiTask+0x2c8>)
   17edc:	2200      	movs	r2, #0
   17ede:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   17ee0:	2064      	movs	r0, #100	; 0x64
   17ee2:	4b01      	ldr	r3, [pc, #4]	; (17ee8 <vWifiTask+0x220>)
   17ee4:	4798      	blx	r3
    while (1) {
   17ee6:	e7ab      	b.n	17e40 <vWifiTask+0x178>
   17ee8:	0001ccc1 	.word	0x0001ccc1
   17eec:	0001668d 	.word	0x0001668d
   17ef0:	0001afb5 	.word	0x0001afb5
   17ef4:	20000624 	.word	0x20000624
   17ef8:	2000062c 	.word	0x2000062c
   17efc:	20000628 	.word	0x20000628
   17f00:	20000634 	.word	0x20000634
   17f04:	20000638 	.word	0x20000638
   17f08:	20000630 	.word	0x20000630
   17f0c:	00037d30 	.word	0x00037d30
   17f10:	0001e915 	.word	0x0001e915
   17f14:	00037d58 	.word	0x00037d58
   17f18:	000170c9 	.word	0x000170c9
   17f1c:	00017105 	.word	0x00017105
   17f20:	00017621 	.word	0x00017621
   17f24:	00016fe5 	.word	0x00016fe5
   17f28:	000176d9 	.word	0x000176d9
   17f2c:	00017719 	.word	0x00017719
   17f30:	000356ef 	.word	0x000356ef
   17f34:	00020e89 	.word	0x00020e89
   17f38:	00016e91 	.word	0x00016e91
   17f3c:	00022961 	.word	0x00022961
   17f40:	00037d74 	.word	0x00037d74
   17f44:	0001ea01 	.word	0x0001ea01
   17f48:	0003782c 	.word	0x0003782c
   17f4c:	00037da0 	.word	0x00037da0
   17f50:	000260c1 	.word	0x000260c1
   17f54:	000171ad 	.word	0x000171ad
   17f58:	00017179 	.word	0x00017179
   17f5c:	00026159 	.word	0x00026159
   17f60:	00037820 	.word	0x00037820
   17f64:	00022b71 	.word	0x00022b71
   17f68:	00022b55 	.word	0x00022b55
   17f6c:	20004944 	.word	0x20004944
   17f70:	00033375 	.word	0x00033375
   17f74:	000166fd 	.word	0x000166fd
   17f78:	20000623 	.word	0x20000623
   17f7c:	00017935 	.word	0x00017935
   17f80:	000179d1 	.word	0x000179d1
   17f84:	00017791 	.word	0x00017791
   17f88:	00017825 	.word	0x00017825
   17f8c:	0001bb15 	.word	0x0001bb15
   17f90:	20000cd4 	.word	0x20000cd4
   17f94:	20000070 	.word	0x20000070
   17f98:	00035aa7 	.word	0x00035aa7
   17f9c:	00037dc4 	.word	0x00037dc4
   17fa0:	2000089c 	.word	0x2000089c
   17fa4:	00030695 	.word	0x00030695
   17fa8:	00037de0 	.word	0x00037de0

00017fac <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   17fac:	b590      	push	{r4, r7, lr}
   17fae:	b083      	sub	sp, #12
   17fb0:	af00      	add	r7, sp, #0
   17fb2:	0002      	movs	r2, r0
   17fb4:	1dfb      	adds	r3, r7, #7
   17fb6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   17fb8:	1dfb      	adds	r3, r7, #7
   17fba:	781b      	ldrb	r3, [r3, #0]
   17fbc:	2b03      	cmp	r3, #3
   17fbe:	d806      	bhi.n	17fce <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   17fc0:	4b05      	ldr	r3, [pc, #20]	; (17fd8 <WifiHandlerSetState+0x2c>)
   17fc2:	6818      	ldr	r0, [r3, #0]
   17fc4:	1df9      	adds	r1, r7, #7
   17fc6:	2300      	movs	r3, #0
   17fc8:	220a      	movs	r2, #10
   17fca:	4c04      	ldr	r4, [pc, #16]	; (17fdc <WifiHandlerSetState+0x30>)
   17fcc:	47a0      	blx	r4
    }
}
   17fce:	46c0      	nop			; (mov r8, r8)
   17fd0:	46bd      	mov	sp, r7
   17fd2:	b003      	add	sp, #12
   17fd4:	bd90      	pop	{r4, r7, pc}
   17fd6:	46c0      	nop			; (mov r8, r8)
   17fd8:	20000624 	.word	0x20000624
   17fdc:	0001b25d 	.word	0x0001b25d

00017fe0 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   17fe0:	b590      	push	{r4, r7, lr}
   17fe2:	b085      	sub	sp, #20
   17fe4:	af00      	add	r7, sp, #0
   17fe6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   17fe8:	4b06      	ldr	r3, [pc, #24]	; (18004 <WifiAddDistanceDataToQueue+0x24>)
   17fea:	6818      	ldr	r0, [r3, #0]
   17fec:	6879      	ldr	r1, [r7, #4]
   17fee:	2300      	movs	r3, #0
   17ff0:	220a      	movs	r2, #10
   17ff2:	4c05      	ldr	r4, [pc, #20]	; (18008 <WifiAddDistanceDataToQueue+0x28>)
   17ff4:	47a0      	blx	r4
   17ff6:	0003      	movs	r3, r0
   17ff8:	60fb      	str	r3, [r7, #12]
    return error;
   17ffa:	68fb      	ldr	r3, [r7, #12]
}
   17ffc:	0018      	movs	r0, r3
   17ffe:	46bd      	mov	sp, r7
   18000:	b005      	add	sp, #20
   18002:	bd90      	pop	{r4, r7, pc}
   18004:	20000630 	.word	0x20000630
   18008:	0001b25d 	.word	0x0001b25d

0001800c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   1800c:	b590      	push	{r4, r7, lr}
   1800e:	b085      	sub	sp, #20
   18010:	af00      	add	r7, sp, #0
   18012:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   18014:	4b06      	ldr	r3, [pc, #24]	; (18030 <WifiAddGameDataToQueue+0x24>)
   18016:	6818      	ldr	r0, [r3, #0]
   18018:	6879      	ldr	r1, [r7, #4]
   1801a:	2300      	movs	r3, #0
   1801c:	220a      	movs	r2, #10
   1801e:	4c05      	ldr	r4, [pc, #20]	; (18034 <WifiAddGameDataToQueue+0x28>)
   18020:	47a0      	blx	r4
   18022:	0003      	movs	r3, r0
   18024:	60fb      	str	r3, [r7, #12]
    return error;
   18026:	68fb      	ldr	r3, [r7, #12]
}
   18028:	0018      	movs	r0, r3
   1802a:	46bd      	mov	sp, r7
   1802c:	b005      	add	sp, #20
   1802e:	bd90      	pop	{r4, r7, pc}
   18030:	20000628 	.word	0x20000628
   18034:	0001b25d 	.word	0x0001b25d

00018038 <WifiAddTestDataToQueue>:

int WifiAddTestDataToQueue(struct TestPacket *test)
{
   18038:	b590      	push	{r4, r7, lr}
   1803a:	b085      	sub	sp, #20
   1803c:	af00      	add	r7, sp, #0
   1803e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   18040:	4b06      	ldr	r3, [pc, #24]	; (1805c <WifiAddTestDataToQueue+0x24>)
   18042:	6818      	ldr	r0, [r3, #0]
   18044:	6879      	ldr	r1, [r7, #4]
   18046:	2300      	movs	r3, #0
   18048:	220a      	movs	r2, #10
   1804a:	4c05      	ldr	r4, [pc, #20]	; (18060 <WifiAddTestDataToQueue+0x28>)
   1804c:	47a0      	blx	r4
   1804e:	0003      	movs	r3, r0
   18050:	60fb      	str	r3, [r7, #12]
	return error;
   18052:	68fb      	ldr	r3, [r7, #12]
}
   18054:	0018      	movs	r0, r3
   18056:	46bd      	mov	sp, r7
   18058:	b005      	add	sp, #20
   1805a:	bd90      	pop	{r4, r7, pc}
   1805c:	20000634 	.word	0x20000634
   18060:	0001b25d 	.word	0x0001b25d

00018064 <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *test)
{
   18064:	b590      	push	{r4, r7, lr}
   18066:	b085      	sub	sp, #20
   18068:	af00      	add	r7, sp, #0
   1806a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, test, (TickType_t)10);
   1806c:	4b06      	ldr	r3, [pc, #24]	; (18088 <WifiAddNauDataToQueue+0x24>)
   1806e:	6818      	ldr	r0, [r3, #0]
   18070:	6879      	ldr	r1, [r7, #4]
   18072:	2300      	movs	r3, #0
   18074:	220a      	movs	r2, #10
   18076:	4c05      	ldr	r4, [pc, #20]	; (1808c <WifiAddNauDataToQueue+0x28>)
   18078:	47a0      	blx	r4
   1807a:	0003      	movs	r3, r0
   1807c:	60fb      	str	r3, [r7, #12]
	return error;
   1807e:	68fb      	ldr	r3, [r7, #12]
   18080:	0018      	movs	r0, r3
   18082:	46bd      	mov	sp, r7
   18084:	b005      	add	sp, #20
   18086:	bd90      	pop	{r4, r7, pc}
   18088:	20000638 	.word	0x20000638
   1808c:	0001b25d 	.word	0x0001b25d

00018090 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   18090:	b580      	push	{r7, lr}
   18092:	b082      	sub	sp, #8
   18094:	af00      	add	r7, sp, #0
   18096:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18098:	687b      	ldr	r3, [r7, #4]
   1809a:	2200      	movs	r2, #0
   1809c:	701a      	strb	r2, [r3, #0]
}
   1809e:	46c0      	nop			; (mov r8, r8)
   180a0:	46bd      	mov	sp, r7
   180a2:	b002      	add	sp, #8
   180a4:	bd80      	pop	{r7, pc}
	...

000180a8 <system_apb_clock_set_mask>:
{
   180a8:	b580      	push	{r7, lr}
   180aa:	b082      	sub	sp, #8
   180ac:	af00      	add	r7, sp, #0
   180ae:	0002      	movs	r2, r0
   180b0:	6039      	str	r1, [r7, #0]
   180b2:	1dfb      	adds	r3, r7, #7
   180b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   180b6:	1dfb      	adds	r3, r7, #7
   180b8:	781b      	ldrb	r3, [r3, #0]
   180ba:	2b01      	cmp	r3, #1
   180bc:	d00a      	beq.n	180d4 <system_apb_clock_set_mask+0x2c>
   180be:	2b02      	cmp	r3, #2
   180c0:	d00f      	beq.n	180e2 <system_apb_clock_set_mask+0x3a>
   180c2:	2b00      	cmp	r3, #0
   180c4:	d114      	bne.n	180f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   180c6:	4b0e      	ldr	r3, [pc, #56]	; (18100 <system_apb_clock_set_mask+0x58>)
   180c8:	4a0d      	ldr	r2, [pc, #52]	; (18100 <system_apb_clock_set_mask+0x58>)
   180ca:	6991      	ldr	r1, [r2, #24]
   180cc:	683a      	ldr	r2, [r7, #0]
   180ce:	430a      	orrs	r2, r1
   180d0:	619a      	str	r2, [r3, #24]
			break;
   180d2:	e00f      	b.n	180f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   180d4:	4b0a      	ldr	r3, [pc, #40]	; (18100 <system_apb_clock_set_mask+0x58>)
   180d6:	4a0a      	ldr	r2, [pc, #40]	; (18100 <system_apb_clock_set_mask+0x58>)
   180d8:	69d1      	ldr	r1, [r2, #28]
   180da:	683a      	ldr	r2, [r7, #0]
   180dc:	430a      	orrs	r2, r1
   180de:	61da      	str	r2, [r3, #28]
			break;
   180e0:	e008      	b.n	180f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   180e2:	4b07      	ldr	r3, [pc, #28]	; (18100 <system_apb_clock_set_mask+0x58>)
   180e4:	4a06      	ldr	r2, [pc, #24]	; (18100 <system_apb_clock_set_mask+0x58>)
   180e6:	6a11      	ldr	r1, [r2, #32]
   180e8:	683a      	ldr	r2, [r7, #0]
   180ea:	430a      	orrs	r2, r1
   180ec:	621a      	str	r2, [r3, #32]
			break;
   180ee:	e001      	b.n	180f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   180f0:	2317      	movs	r3, #23
   180f2:	e000      	b.n	180f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   180f4:	2300      	movs	r3, #0
}
   180f6:	0018      	movs	r0, r3
   180f8:	46bd      	mov	sp, r7
   180fa:	b002      	add	sp, #8
   180fc:	bd80      	pop	{r7, pc}
   180fe:	46c0      	nop			; (mov r8, r8)
   18100:	40000400 	.word	0x40000400

00018104 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   18104:	b580      	push	{r7, lr}
   18106:	b082      	sub	sp, #8
   18108:	af00      	add	r7, sp, #0
   1810a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	2280      	movs	r2, #128	; 0x80
   18110:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   18112:	687b      	ldr	r3, [r7, #4]
   18114:	2200      	movs	r2, #0
   18116:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   18118:	687b      	ldr	r3, [r7, #4]
   1811a:	2201      	movs	r2, #1
   1811c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1811e:	687b      	ldr	r3, [r7, #4]
   18120:	2200      	movs	r2, #0
   18122:	70da      	strb	r2, [r3, #3]
}
   18124:	46c0      	nop			; (mov r8, r8)
   18126:	46bd      	mov	sp, r7
   18128:	b002      	add	sp, #8
   1812a:	bd80      	pop	{r7, pc}

0001812c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1812c:	b580      	push	{r7, lr}
   1812e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18130:	4b05      	ldr	r3, [pc, #20]	; (18148 <system_is_debugger_present+0x1c>)
   18132:	789b      	ldrb	r3, [r3, #2]
   18134:	b2db      	uxtb	r3, r3
   18136:	001a      	movs	r2, r3
   18138:	2302      	movs	r3, #2
   1813a:	4013      	ands	r3, r2
   1813c:	1e5a      	subs	r2, r3, #1
   1813e:	4193      	sbcs	r3, r2
   18140:	b2db      	uxtb	r3, r3
}
   18142:	0018      	movs	r0, r3
   18144:	46bd      	mov	sp, r7
   18146:	bd80      	pop	{r7, pc}
   18148:	41002000 	.word	0x41002000

0001814c <system_interrupt_enter_critical_section>:
{
   1814c:	b580      	push	{r7, lr}
   1814e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18150:	4b02      	ldr	r3, [pc, #8]	; (1815c <system_interrupt_enter_critical_section+0x10>)
   18152:	4798      	blx	r3
}
   18154:	46c0      	nop			; (mov r8, r8)
   18156:	46bd      	mov	sp, r7
   18158:	bd80      	pop	{r7, pc}
   1815a:	46c0      	nop			; (mov r8, r8)
   1815c:	00026db9 	.word	0x00026db9

00018160 <system_interrupt_leave_critical_section>:
{
   18160:	b580      	push	{r7, lr}
   18162:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18164:	4b02      	ldr	r3, [pc, #8]	; (18170 <system_interrupt_leave_critical_section+0x10>)
   18166:	4798      	blx	r3
}
   18168:	46c0      	nop			; (mov r8, r8)
   1816a:	46bd      	mov	sp, r7
   1816c:	bd80      	pop	{r7, pc}
   1816e:	46c0      	nop			; (mov r8, r8)
   18170:	00026e0d 	.word	0x00026e0d

00018174 <system_interrupt_disable>:
{
   18174:	b580      	push	{r7, lr}
   18176:	b082      	sub	sp, #8
   18178:	af00      	add	r7, sp, #0
   1817a:	0002      	movs	r2, r0
   1817c:	1dfb      	adds	r3, r7, #7
   1817e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18180:	4a07      	ldr	r2, [pc, #28]	; (181a0 <system_interrupt_disable+0x2c>)
   18182:	1dfb      	adds	r3, r7, #7
   18184:	781b      	ldrb	r3, [r3, #0]
   18186:	0019      	movs	r1, r3
   18188:	231f      	movs	r3, #31
   1818a:	400b      	ands	r3, r1
   1818c:	2101      	movs	r1, #1
   1818e:	4099      	lsls	r1, r3
   18190:	000b      	movs	r3, r1
   18192:	0019      	movs	r1, r3
   18194:	2380      	movs	r3, #128	; 0x80
   18196:	50d1      	str	r1, [r2, r3]
}
   18198:	46c0      	nop			; (mov r8, r8)
   1819a:	46bd      	mov	sp, r7
   1819c:	b002      	add	sp, #8
   1819e:	bd80      	pop	{r7, pc}
   181a0:	e000e100 	.word	0xe000e100

000181a4 <i2c_master_is_syncing>:
{
   181a4:	b580      	push	{r7, lr}
   181a6:	b084      	sub	sp, #16
   181a8:	af00      	add	r7, sp, #0
   181aa:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   181ac:	687b      	ldr	r3, [r7, #4]
   181ae:	681b      	ldr	r3, [r3, #0]
   181b0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   181b2:	68fb      	ldr	r3, [r7, #12]
   181b4:	69db      	ldr	r3, [r3, #28]
   181b6:	2207      	movs	r2, #7
   181b8:	4013      	ands	r3, r2
   181ba:	1e5a      	subs	r2, r3, #1
   181bc:	4193      	sbcs	r3, r2
   181be:	b2db      	uxtb	r3, r3
}
   181c0:	0018      	movs	r0, r3
   181c2:	46bd      	mov	sp, r7
   181c4:	b004      	add	sp, #16
   181c6:	bd80      	pop	{r7, pc}

000181c8 <_i2c_master_wait_for_sync>:
{
   181c8:	b580      	push	{r7, lr}
   181ca:	b082      	sub	sp, #8
   181cc:	af00      	add	r7, sp, #0
   181ce:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   181d0:	46c0      	nop			; (mov r8, r8)
   181d2:	687b      	ldr	r3, [r7, #4]
   181d4:	0018      	movs	r0, r3
   181d6:	4b04      	ldr	r3, [pc, #16]	; (181e8 <_i2c_master_wait_for_sync+0x20>)
   181d8:	4798      	blx	r3
   181da:	1e03      	subs	r3, r0, #0
   181dc:	d1f9      	bne.n	181d2 <_i2c_master_wait_for_sync+0xa>
}
   181de:	46c0      	nop			; (mov r8, r8)
   181e0:	46bd      	mov	sp, r7
   181e2:	b002      	add	sp, #8
   181e4:	bd80      	pop	{r7, pc}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	000181a5 	.word	0x000181a5

000181ec <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   181ec:	b580      	push	{r7, lr}
   181ee:	b084      	sub	sp, #16
   181f0:	af00      	add	r7, sp, #0
   181f2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181f4:	687b      	ldr	r3, [r7, #4]
   181f6:	681b      	ldr	r3, [r3, #0]
   181f8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   181fa:	687b      	ldr	r3, [r7, #4]
   181fc:	681b      	ldr	r3, [r3, #0]
   181fe:	0018      	movs	r0, r3
   18200:	4b0d      	ldr	r3, [pc, #52]	; (18238 <i2c_master_disable+0x4c>)
   18202:	4798      	blx	r3
   18204:	0003      	movs	r3, r0
   18206:	0018      	movs	r0, r3
   18208:	4b0c      	ldr	r3, [pc, #48]	; (1823c <i2c_master_disable+0x50>)
   1820a:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1820c:	687b      	ldr	r3, [r7, #4]
   1820e:	0018      	movs	r0, r3
   18210:	4b0b      	ldr	r3, [pc, #44]	; (18240 <i2c_master_disable+0x54>)
   18212:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   18214:	68fb      	ldr	r3, [r7, #12]
   18216:	2283      	movs	r2, #131	; 0x83
   18218:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1821a:	68fb      	ldr	r3, [r7, #12]
   1821c:	2283      	movs	r2, #131	; 0x83
   1821e:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   18220:	68fb      	ldr	r3, [r7, #12]
   18222:	681b      	ldr	r3, [r3, #0]
   18224:	2202      	movs	r2, #2
   18226:	4393      	bics	r3, r2
   18228:	001a      	movs	r2, r3
   1822a:	68fb      	ldr	r3, [r7, #12]
   1822c:	601a      	str	r2, [r3, #0]

}
   1822e:	46c0      	nop			; (mov r8, r8)
   18230:	46bd      	mov	sp, r7
   18232:	b004      	add	sp, #16
   18234:	bd80      	pop	{r7, pc}
   18236:	46c0      	nop			; (mov r8, r8)
   18238:	0002828d 	.word	0x0002828d
   1823c:	00018175 	.word	0x00018175
   18240:	000181c9 	.word	0x000181c9

00018244 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   18244:	b5f0      	push	{r4, r5, r6, r7, lr}
   18246:	b097      	sub	sp, #92	; 0x5c
   18248:	af00      	add	r7, sp, #0
   1824a:	6178      	str	r0, [r7, #20]
   1824c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1824e:	2300      	movs	r3, #0
   18250:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   18252:	2300      	movs	r3, #0
   18254:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   18256:	2300      	movs	r3, #0
   18258:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1825a:	233b      	movs	r3, #59	; 0x3b
   1825c:	2210      	movs	r2, #16
   1825e:	4694      	mov	ip, r2
   18260:	44bc      	add	ip, r7
   18262:	4463      	add	r3, ip
   18264:	2200      	movs	r2, #0
   18266:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18268:	697b      	ldr	r3, [r7, #20]
   1826a:	681b      	ldr	r3, [r3, #0]
   1826c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1826e:	697b      	ldr	r3, [r7, #20]
   18270:	681b      	ldr	r3, [r3, #0]
   18272:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   18274:	2323      	movs	r3, #35	; 0x23
   18276:	2210      	movs	r2, #16
   18278:	18ba      	adds	r2, r7, r2
   1827a:	18d4      	adds	r4, r2, r3
   1827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1827e:	0018      	movs	r0, r3
   18280:	4bc0      	ldr	r3, [pc, #768]	; (18584 <_i2c_master_set_config+0x340>)
   18282:	4798      	blx	r3
   18284:	0003      	movs	r3, r0
   18286:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18288:	230c      	movs	r3, #12
   1828a:	2210      	movs	r2, #16
   1828c:	4694      	mov	ip, r2
   1828e:	44bc      	add	ip, r7
   18290:	4463      	add	r3, ip
   18292:	0018      	movs	r0, r3
   18294:	4bbc      	ldr	r3, [pc, #752]	; (18588 <_i2c_master_set_config+0x344>)
   18296:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18298:	693b      	ldr	r3, [r7, #16]
   1829a:	69db      	ldr	r3, [r3, #28]
   1829c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1829e:	693b      	ldr	r3, [r7, #16]
   182a0:	6a1b      	ldr	r3, [r3, #32]
   182a2:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   182a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   182a6:	2b00      	cmp	r3, #0
   182a8:	d106      	bne.n	182b8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   182aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   182ac:	2100      	movs	r1, #0
   182ae:	0018      	movs	r0, r3
   182b0:	4bb6      	ldr	r3, [pc, #728]	; (1858c <_i2c_master_set_config+0x348>)
   182b2:	4798      	blx	r3
   182b4:	0003      	movs	r3, r0
   182b6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   182b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   182ba:	b2da      	uxtb	r2, r3
   182bc:	230c      	movs	r3, #12
   182be:	2110      	movs	r1, #16
   182c0:	468c      	mov	ip, r1
   182c2:	44bc      	add	ip, r7
   182c4:	4463      	add	r3, ip
   182c6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   182c8:	230c      	movs	r3, #12
   182ca:	2210      	movs	r2, #16
   182cc:	4694      	mov	ip, r2
   182ce:	44bc      	add	ip, r7
   182d0:	4463      	add	r3, ip
   182d2:	2202      	movs	r2, #2
   182d4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   182d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   182d8:	0c1b      	lsrs	r3, r3, #16
   182da:	b2db      	uxtb	r3, r3
   182dc:	220c      	movs	r2, #12
   182de:	2110      	movs	r1, #16
   182e0:	468c      	mov	ip, r1
   182e2:	44bc      	add	ip, r7
   182e4:	4462      	add	r2, ip
   182e6:	0011      	movs	r1, r2
   182e8:	0018      	movs	r0, r3
   182ea:	4ba9      	ldr	r3, [pc, #676]	; (18590 <_i2c_master_set_config+0x34c>)
   182ec:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   182ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182f0:	2b00      	cmp	r3, #0
   182f2:	d106      	bne.n	18302 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   182f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   182f6:	2101      	movs	r1, #1
   182f8:	0018      	movs	r0, r3
   182fa:	4ba4      	ldr	r3, [pc, #656]	; (1858c <_i2c_master_set_config+0x348>)
   182fc:	4798      	blx	r3
   182fe:	0003      	movs	r3, r0
   18300:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   18302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18304:	b2da      	uxtb	r2, r3
   18306:	230c      	movs	r3, #12
   18308:	2110      	movs	r1, #16
   1830a:	468c      	mov	ip, r1
   1830c:	44bc      	add	ip, r7
   1830e:	4463      	add	r3, ip
   18310:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18312:	230c      	movs	r3, #12
   18314:	2210      	movs	r2, #16
   18316:	4694      	mov	ip, r2
   18318:	44bc      	add	ip, r7
   1831a:	4463      	add	r3, ip
   1831c:	2202      	movs	r2, #2
   1831e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18322:	0c1b      	lsrs	r3, r3, #16
   18324:	b2db      	uxtb	r3, r3
   18326:	220c      	movs	r2, #12
   18328:	2110      	movs	r1, #16
   1832a:	468c      	mov	ip, r1
   1832c:	44bc      	add	ip, r7
   1832e:	4462      	add	r2, ip
   18330:	0011      	movs	r1, r2
   18332:	0018      	movs	r0, r3
   18334:	4b96      	ldr	r3, [pc, #600]	; (18590 <_i2c_master_set_config+0x34c>)
   18336:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   18338:	693b      	ldr	r3, [r7, #16]
   1833a:	8a9a      	ldrh	r2, [r3, #20]
   1833c:	697b      	ldr	r3, [r7, #20]
   1833e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   18340:	693b      	ldr	r3, [r7, #16]
   18342:	8ada      	ldrh	r2, [r3, #22]
   18344:	697b      	ldr	r3, [r7, #20]
   18346:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18348:	693b      	ldr	r3, [r7, #16]
   1834a:	7e1b      	ldrb	r3, [r3, #24]
   1834c:	2b00      	cmp	r3, #0
   1834e:	d103      	bne.n	18358 <_i2c_master_set_config+0x114>
   18350:	4b90      	ldr	r3, [pc, #576]	; (18594 <_i2c_master_set_config+0x350>)
   18352:	4798      	blx	r3
   18354:	1e03      	subs	r3, r0, #0
   18356:	d002      	beq.n	1835e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18358:	2380      	movs	r3, #128	; 0x80
   1835a:	657b      	str	r3, [r7, #84]	; 0x54
   1835c:	e001      	b.n	18362 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1835e:	2300      	movs	r3, #0
   18360:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   18362:	693b      	ldr	r3, [r7, #16]
   18364:	691b      	ldr	r3, [r3, #16]
   18366:	2b00      	cmp	r3, #0
   18368:	d004      	beq.n	18374 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1836a:	693b      	ldr	r3, [r7, #16]
   1836c:	691b      	ldr	r3, [r3, #16]
   1836e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18370:	4313      	orrs	r3, r2
   18372:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   18374:	693b      	ldr	r3, [r7, #16]
   18376:	689b      	ldr	r3, [r3, #8]
   18378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1837a:	4313      	orrs	r3, r2
   1837c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1837e:	693b      	ldr	r3, [r7, #16]
   18380:	2224      	movs	r2, #36	; 0x24
   18382:	5c9b      	ldrb	r3, [r3, r2]
   18384:	2b00      	cmp	r3, #0
   18386:	d004      	beq.n	18392 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1838a:	2280      	movs	r2, #128	; 0x80
   1838c:	05d2      	lsls	r2, r2, #23
   1838e:	4313      	orrs	r3, r2
   18390:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   18392:	693b      	ldr	r3, [r7, #16]
   18394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18396:	2b00      	cmp	r3, #0
   18398:	d004      	beq.n	183a4 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1839a:	693b      	ldr	r3, [r7, #16]
   1839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1839e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   183a0:	4313      	orrs	r3, r2
   183a2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   183a4:	693b      	ldr	r3, [r7, #16]
   183a6:	222c      	movs	r2, #44	; 0x2c
   183a8:	5c9b      	ldrb	r3, [r3, r2]
   183aa:	2b00      	cmp	r3, #0
   183ac:	d105      	bne.n	183ba <_i2c_master_set_config+0x176>
   183ae:	693b      	ldr	r3, [r7, #16]
   183b0:	689a      	ldr	r2, [r3, #8]
   183b2:	2380      	movs	r3, #128	; 0x80
   183b4:	049b      	lsls	r3, r3, #18
   183b6:	429a      	cmp	r2, r3
   183b8:	d104      	bne.n	183c4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   183ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   183bc:	2280      	movs	r2, #128	; 0x80
   183be:	0512      	lsls	r2, r2, #20
   183c0:	4313      	orrs	r3, r2
   183c2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   183c4:	693b      	ldr	r3, [r7, #16]
   183c6:	222d      	movs	r2, #45	; 0x2d
   183c8:	5c9b      	ldrb	r3, [r3, r2]
   183ca:	2b00      	cmp	r3, #0
   183cc:	d004      	beq.n	183d8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   183ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   183d0:	2280      	movs	r2, #128	; 0x80
   183d2:	0412      	lsls	r2, r2, #16
   183d4:	4313      	orrs	r3, r2
   183d6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   183d8:	693b      	ldr	r3, [r7, #16]
   183da:	222e      	movs	r2, #46	; 0x2e
   183dc:	5c9b      	ldrb	r3, [r3, r2]
   183de:	2b00      	cmp	r3, #0
   183e0:	d004      	beq.n	183ec <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   183e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   183e4:	2280      	movs	r2, #128	; 0x80
   183e6:	03d2      	lsls	r2, r2, #15
   183e8:	4313      	orrs	r3, r2
   183ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   183ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183ee:	681a      	ldr	r2, [r3, #0]
   183f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   183f2:	431a      	orrs	r2, r3
   183f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183f6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   183f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   183fa:	2280      	movs	r2, #128	; 0x80
   183fc:	0052      	lsls	r2, r2, #1
   183fe:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18400:	2323      	movs	r3, #35	; 0x23
   18402:	2210      	movs	r2, #16
   18404:	4694      	mov	ip, r2
   18406:	44bc      	add	ip, r7
   18408:	4463      	add	r3, ip
   1840a:	781b      	ldrb	r3, [r3, #0]
   1840c:	3314      	adds	r3, #20
   1840e:	b2db      	uxtb	r3, r3
   18410:	0018      	movs	r0, r3
   18412:	4b61      	ldr	r3, [pc, #388]	; (18598 <_i2c_master_set_config+0x354>)
   18414:	4798      	blx	r3
   18416:	0003      	movs	r3, r0
   18418:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1841a:	693b      	ldr	r3, [r7, #16]
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	22fa      	movs	r2, #250	; 0xfa
   18420:	0092      	lsls	r2, r2, #2
   18422:	4353      	muls	r3, r2
   18424:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   18426:	693b      	ldr	r3, [r7, #16]
   18428:	685b      	ldr	r3, [r3, #4]
   1842a:	22fa      	movs	r2, #250	; 0xfa
   1842c:	0092      	lsls	r2, r2, #2
   1842e:	4353      	muls	r3, r2
   18430:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   18432:	693b      	ldr	r3, [r7, #16]
   18434:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   18436:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   18438:	4b58      	ldr	r3, [pc, #352]	; (1859c <_i2c_master_set_config+0x358>)
   1843a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1843c:	4798      	blx	r3
   1843e:	0005      	movs	r5, r0
   18440:	000e      	movs	r6, r1
   18442:	4b56      	ldr	r3, [pc, #344]	; (1859c <_i2c_master_set_config+0x358>)
   18444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   18446:	4798      	blx	r3
   18448:	60b8      	str	r0, [r7, #8]
   1844a:	60f9      	str	r1, [r7, #12]
   1844c:	4b53      	ldr	r3, [pc, #332]	; (1859c <_i2c_master_set_config+0x358>)
   1844e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18450:	4798      	blx	r3
   18452:	4c53      	ldr	r4, [pc, #332]	; (185a0 <_i2c_master_set_config+0x35c>)
   18454:	4a53      	ldr	r2, [pc, #332]	; (185a4 <_i2c_master_set_config+0x360>)
   18456:	4b54      	ldr	r3, [pc, #336]	; (185a8 <_i2c_master_set_config+0x364>)
   18458:	47a0      	blx	r4
   1845a:	0003      	movs	r3, r0
   1845c:	000c      	movs	r4, r1
   1845e:	603b      	str	r3, [r7, #0]
   18460:	607c      	str	r4, [r7, #4]
   18462:	4b4e      	ldr	r3, [pc, #312]	; (1859c <_i2c_master_set_config+0x358>)
   18464:	6a38      	ldr	r0, [r7, #32]
   18466:	4798      	blx	r3
   18468:	0002      	movs	r2, r0
   1846a:	000b      	movs	r3, r1
   1846c:	4c4c      	ldr	r4, [pc, #304]	; (185a0 <_i2c_master_set_config+0x35c>)
   1846e:	6838      	ldr	r0, [r7, #0]
   18470:	6879      	ldr	r1, [r7, #4]
   18472:	47a0      	blx	r4
   18474:	0003      	movs	r3, r0
   18476:	000c      	movs	r4, r1
   18478:	0018      	movs	r0, r3
   1847a:	0021      	movs	r1, r4
   1847c:	4c4b      	ldr	r4, [pc, #300]	; (185ac <_i2c_master_set_config+0x368>)
   1847e:	2200      	movs	r2, #0
   18480:	4b4b      	ldr	r3, [pc, #300]	; (185b0 <_i2c_master_set_config+0x36c>)
   18482:	47a0      	blx	r4
   18484:	0003      	movs	r3, r0
   18486:	000c      	movs	r4, r1
   18488:	001a      	movs	r2, r3
   1848a:	0023      	movs	r3, r4
   1848c:	4c44      	ldr	r4, [pc, #272]	; (185a0 <_i2c_master_set_config+0x35c>)
   1848e:	68b8      	ldr	r0, [r7, #8]
   18490:	68f9      	ldr	r1, [r7, #12]
   18492:	47a0      	blx	r4
   18494:	0003      	movs	r3, r0
   18496:	000c      	movs	r4, r1
   18498:	001a      	movs	r2, r3
   1849a:	0023      	movs	r3, r4
   1849c:	4c45      	ldr	r4, [pc, #276]	; (185b4 <_i2c_master_set_config+0x370>)
   1849e:	0028      	movs	r0, r5
   184a0:	0031      	movs	r1, r6
   184a2:	47a0      	blx	r4
   184a4:	0003      	movs	r3, r0
   184a6:	000c      	movs	r4, r1
   184a8:	001d      	movs	r5, r3
   184aa:	0026      	movs	r6, r4
   184ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   184ae:	005a      	lsls	r2, r3, #1
   184b0:	4b3a      	ldr	r3, [pc, #232]	; (1859c <_i2c_master_set_config+0x358>)
   184b2:	0010      	movs	r0, r2
   184b4:	4798      	blx	r3
   184b6:	0002      	movs	r2, r0
   184b8:	000b      	movs	r3, r1
   184ba:	4c3c      	ldr	r4, [pc, #240]	; (185ac <_i2c_master_set_config+0x368>)
   184bc:	0028      	movs	r0, r5
   184be:	0031      	movs	r1, r6
   184c0:	47a0      	blx	r4
   184c2:	0003      	movs	r3, r0
   184c4:	000c      	movs	r4, r1
   184c6:	0018      	movs	r0, r3
   184c8:	0021      	movs	r1, r4
   184ca:	4c3a      	ldr	r4, [pc, #232]	; (185b4 <_i2c_master_set_config+0x370>)
   184cc:	2200      	movs	r2, #0
   184ce:	4b3a      	ldr	r3, [pc, #232]	; (185b8 <_i2c_master_set_config+0x374>)
   184d0:	47a0      	blx	r4
   184d2:	0003      	movs	r3, r0
   184d4:	000c      	movs	r4, r1
   184d6:	001d      	movs	r5, r3
   184d8:	0026      	movs	r6, r4
   184da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   184dc:	005a      	lsls	r2, r3, #1
   184de:	4b2f      	ldr	r3, [pc, #188]	; (1859c <_i2c_master_set_config+0x358>)
   184e0:	0010      	movs	r0, r2
   184e2:	4798      	blx	r3
   184e4:	0002      	movs	r2, r0
   184e6:	000b      	movs	r3, r1
   184e8:	4c34      	ldr	r4, [pc, #208]	; (185bc <_i2c_master_set_config+0x378>)
   184ea:	0028      	movs	r0, r5
   184ec:	0031      	movs	r1, r6
   184ee:	47a0      	blx	r4
   184f0:	0003      	movs	r3, r0
   184f2:	000c      	movs	r4, r1
   184f4:	0019      	movs	r1, r3
   184f6:	0022      	movs	r2, r4
   184f8:	4b31      	ldr	r3, [pc, #196]	; (185c0 <_i2c_master_set_config+0x37c>)
   184fa:	0008      	movs	r0, r1
   184fc:	0011      	movs	r1, r2
   184fe:	4798      	blx	r3
   18500:	0003      	movs	r3, r0
   18502:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   18504:	693b      	ldr	r3, [r7, #16]
   18506:	689a      	ldr	r2, [r3, #8]
   18508:	2380      	movs	r3, #128	; 0x80
   1850a:	049b      	lsls	r3, r3, #18
   1850c:	429a      	cmp	r2, r3
   1850e:	d16a      	bne.n	185e6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18510:	4b22      	ldr	r3, [pc, #136]	; (1859c <_i2c_master_set_config+0x358>)
   18512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18514:	4798      	blx	r3
   18516:	4c25      	ldr	r4, [pc, #148]	; (185ac <_i2c_master_set_config+0x368>)
   18518:	0002      	movs	r2, r0
   1851a:	000b      	movs	r3, r1
   1851c:	47a0      	blx	r4
   1851e:	0003      	movs	r3, r0
   18520:	000c      	movs	r4, r1
   18522:	001d      	movs	r5, r3
   18524:	0026      	movs	r6, r4
   18526:	4b1d      	ldr	r3, [pc, #116]	; (1859c <_i2c_master_set_config+0x358>)
   18528:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1852a:	4798      	blx	r3
   1852c:	4c1c      	ldr	r4, [pc, #112]	; (185a0 <_i2c_master_set_config+0x35c>)
   1852e:	2200      	movs	r2, #0
   18530:	4b24      	ldr	r3, [pc, #144]	; (185c4 <_i2c_master_set_config+0x380>)
   18532:	47a0      	blx	r4
   18534:	0003      	movs	r3, r0
   18536:	000c      	movs	r4, r1
   18538:	001a      	movs	r2, r3
   1853a:	0023      	movs	r3, r4
   1853c:	4c1f      	ldr	r4, [pc, #124]	; (185bc <_i2c_master_set_config+0x378>)
   1853e:	0028      	movs	r0, r5
   18540:	0031      	movs	r1, r6
   18542:	47a0      	blx	r4
   18544:	0003      	movs	r3, r0
   18546:	000c      	movs	r4, r1
   18548:	0018      	movs	r0, r3
   1854a:	0021      	movs	r1, r4
   1854c:	4c19      	ldr	r4, [pc, #100]	; (185b4 <_i2c_master_set_config+0x370>)
   1854e:	2200      	movs	r2, #0
   18550:	4b19      	ldr	r3, [pc, #100]	; (185b8 <_i2c_master_set_config+0x374>)
   18552:	47a0      	blx	r4
   18554:	0003      	movs	r3, r0
   18556:	000c      	movs	r4, r1
   18558:	0019      	movs	r1, r3
   1855a:	0022      	movs	r2, r4
   1855c:	4b18      	ldr	r3, [pc, #96]	; (185c0 <_i2c_master_set_config+0x37c>)
   1855e:	0008      	movs	r0, r1
   18560:	0011      	movs	r1, r2
   18562:	4798      	blx	r3
   18564:	0003      	movs	r3, r0
   18566:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1856a:	2b00      	cmp	r3, #0
   1856c:	d02e      	beq.n	185cc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1856e:	4b16      	ldr	r3, [pc, #88]	; (185c8 <_i2c_master_set_config+0x384>)
   18570:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18574:	4798      	blx	r3
   18576:	0003      	movs	r3, r0
   18578:	1e9a      	subs	r2, r3, #2
   1857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1857c:	1ad3      	subs	r3, r2, r3
   1857e:	653b      	str	r3, [r7, #80]	; 0x50
   18580:	e031      	b.n	185e6 <_i2c_master_set_config+0x3a2>
   18582:	46c0      	nop			; (mov r8, r8)
   18584:	000281bd 	.word	0x000281bd
   18588:	00018105 	.word	0x00018105
   1858c:	00028001 	.word	0x00028001
   18590:	0002adad 	.word	0x0002adad
   18594:	0001812d 	.word	0x0001812d
   18598:	0002ab71 	.word	0x0002ab71
   1859c:	00035591 	.word	0x00035591
   185a0:	000349fd 	.word	0x000349fd
   185a4:	e826d695 	.word	0xe826d695
   185a8:	3e112e0b 	.word	0x3e112e0b
   185ac:	00033d75 	.word	0x00033d75
   185b0:	40240000 	.word	0x40240000
   185b4:	00034efd 	.word	0x00034efd
   185b8:	3ff00000 	.word	0x3ff00000
   185bc:	00034395 	.word	0x00034395
   185c0:	00035529 	.word	0x00035529
   185c4:	40080000 	.word	0x40080000
   185c8:	00033715 	.word	0x00033715
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   185cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185ce:	005a      	lsls	r2, r3, #1
   185d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   185d2:	18d3      	adds	r3, r2, r3
   185d4:	1e5a      	subs	r2, r3, #1
   185d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   185d8:	0059      	lsls	r1, r3, #1
   185da:	4b1d      	ldr	r3, [pc, #116]	; (18650 <_i2c_master_set_config+0x40c>)
   185dc:	0010      	movs	r0, r2
   185de:	4798      	blx	r3
   185e0:	0003      	movs	r3, r0
   185e2:	3b01      	subs	r3, #1
   185e4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   185e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185e8:	2bff      	cmp	r3, #255	; 0xff
   185ea:	dc08      	bgt.n	185fe <_i2c_master_set_config+0x3ba>
   185ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185ee:	2b00      	cmp	r3, #0
   185f0:	db05      	blt.n	185fe <_i2c_master_set_config+0x3ba>
   185f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185f4:	2bff      	cmp	r3, #255	; 0xff
   185f6:	dc02      	bgt.n	185fe <_i2c_master_set_config+0x3ba>
   185f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   185fa:	2b00      	cmp	r3, #0
   185fc:	da06      	bge.n	1860c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   185fe:	233b      	movs	r3, #59	; 0x3b
   18600:	2210      	movs	r2, #16
   18602:	4694      	mov	ip, r2
   18604:	44bc      	add	ip, r7
   18606:	4463      	add	r3, ip
   18608:	2240      	movs	r2, #64	; 0x40
   1860a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   1860c:	233b      	movs	r3, #59	; 0x3b
   1860e:	2210      	movs	r2, #16
   18610:	4694      	mov	ip, r2
   18612:	44bc      	add	ip, r7
   18614:	4463      	add	r3, ip
   18616:	781b      	ldrb	r3, [r3, #0]
   18618:	2b40      	cmp	r3, #64	; 0x40
   1861a:	d00e      	beq.n	1863a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1861e:	22ff      	movs	r2, #255	; 0xff
   18620:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18624:	041b      	lsls	r3, r3, #16
   18626:	0019      	movs	r1, r3
   18628:	23ff      	movs	r3, #255	; 0xff
   1862a:	041b      	lsls	r3, r3, #16
   1862c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1862e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18632:	0612      	lsls	r2, r2, #24
   18634:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18638:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1863a:	233b      	movs	r3, #59	; 0x3b
   1863c:	2210      	movs	r2, #16
   1863e:	4694      	mov	ip, r2
   18640:	44bc      	add	ip, r7
   18642:	4463      	add	r3, ip
   18644:	781b      	ldrb	r3, [r3, #0]
}
   18646:	0018      	movs	r0, r3
   18648:	46bd      	mov	sp, r7
   1864a:	b017      	add	sp, #92	; 0x5c
   1864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1864e:	46c0      	nop			; (mov r8, r8)
   18650:	00033715 	.word	0x00033715

00018654 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18654:	b590      	push	{r4, r7, lr}
   18656:	b08b      	sub	sp, #44	; 0x2c
   18658:	af00      	add	r7, sp, #0
   1865a:	60f8      	str	r0, [r7, #12]
   1865c:	60b9      	str	r1, [r7, #8]
   1865e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18660:	68fb      	ldr	r3, [r7, #12]
   18662:	68ba      	ldr	r2, [r7, #8]
   18664:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18666:	68fb      	ldr	r3, [r7, #12]
   18668:	681b      	ldr	r3, [r3, #0]
   1866a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1866c:	68fb      	ldr	r3, [r7, #12]
   1866e:	681b      	ldr	r3, [r3, #0]
   18670:	0018      	movs	r0, r3
   18672:	4b3b      	ldr	r3, [pc, #236]	; (18760 <i2c_master_init+0x10c>)
   18674:	4798      	blx	r3
   18676:	0003      	movs	r3, r0
   18678:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1867a:	6a3b      	ldr	r3, [r7, #32]
   1867c:	3302      	adds	r3, #2
   1867e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18680:	6a3b      	ldr	r3, [r7, #32]
   18682:	3314      	adds	r3, #20
   18684:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   18686:	2201      	movs	r2, #1
   18688:	69fb      	ldr	r3, [r7, #28]
   1868a:	409a      	lsls	r2, r3
   1868c:	0013      	movs	r3, r2
   1868e:	0019      	movs	r1, r3
   18690:	2002      	movs	r0, #2
   18692:	4b34      	ldr	r3, [pc, #208]	; (18764 <i2c_master_init+0x110>)
   18694:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   18696:	2314      	movs	r3, #20
   18698:	18fb      	adds	r3, r7, r3
   1869a:	0018      	movs	r0, r3
   1869c:	4b32      	ldr	r3, [pc, #200]	; (18768 <i2c_master_init+0x114>)
   1869e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   186a0:	687b      	ldr	r3, [r7, #4]
   186a2:	7b1a      	ldrb	r2, [r3, #12]
   186a4:	2314      	movs	r3, #20
   186a6:	18fb      	adds	r3, r7, r3
   186a8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   186aa:	69bb      	ldr	r3, [r7, #24]
   186ac:	b2db      	uxtb	r3, r3
   186ae:	2214      	movs	r2, #20
   186b0:	18ba      	adds	r2, r7, r2
   186b2:	0011      	movs	r1, r2
   186b4:	0018      	movs	r0, r3
   186b6:	4b2d      	ldr	r3, [pc, #180]	; (1876c <i2c_master_init+0x118>)
   186b8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   186ba:	69bb      	ldr	r3, [r7, #24]
   186bc:	b2db      	uxtb	r3, r3
   186be:	0018      	movs	r0, r3
   186c0:	4b2b      	ldr	r3, [pc, #172]	; (18770 <i2c_master_init+0x11c>)
   186c2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   186c4:	687b      	ldr	r3, [r7, #4]
   186c6:	7b1b      	ldrb	r3, [r3, #12]
   186c8:	2100      	movs	r1, #0
   186ca:	0018      	movs	r0, r3
   186cc:	4b29      	ldr	r3, [pc, #164]	; (18774 <i2c_master_init+0x120>)
   186ce:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   186d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186d2:	681b      	ldr	r3, [r3, #0]
   186d4:	2202      	movs	r2, #2
   186d6:	4013      	ands	r3, r2
   186d8:	d001      	beq.n	186de <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   186da:	231c      	movs	r3, #28
   186dc:	e03b      	b.n	18756 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   186de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186e0:	681b      	ldr	r3, [r3, #0]
   186e2:	2201      	movs	r2, #1
   186e4:	4013      	ands	r3, r2
   186e6:	d001      	beq.n	186ec <i2c_master_init+0x98>
		return STATUS_BUSY;
   186e8:	2305      	movs	r3, #5
   186ea:	e034      	b.n	18756 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   186ec:	68fb      	ldr	r3, [r7, #12]
   186ee:	681b      	ldr	r3, [r3, #0]
   186f0:	2217      	movs	r2, #23
   186f2:	18bc      	adds	r4, r7, r2
   186f4:	0018      	movs	r0, r3
   186f6:	4b1a      	ldr	r3, [pc, #104]	; (18760 <i2c_master_init+0x10c>)
   186f8:	4798      	blx	r3
   186fa:	0003      	movs	r3, r0
   186fc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   186fe:	4a1e      	ldr	r2, [pc, #120]	; (18778 <i2c_master_init+0x124>)
   18700:	2317      	movs	r3, #23
   18702:	18fb      	adds	r3, r7, r3
   18704:	781b      	ldrb	r3, [r3, #0]
   18706:	0011      	movs	r1, r2
   18708:	0018      	movs	r0, r3
   1870a:	4b1c      	ldr	r3, [pc, #112]	; (1877c <i2c_master_init+0x128>)
   1870c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1870e:	2317      	movs	r3, #23
   18710:	18fb      	adds	r3, r7, r3
   18712:	781a      	ldrb	r2, [r3, #0]
   18714:	4b1a      	ldr	r3, [pc, #104]	; (18780 <i2c_master_init+0x12c>)
   18716:	0092      	lsls	r2, r2, #2
   18718:	68f9      	ldr	r1, [r7, #12]
   1871a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1871c:	68fb      	ldr	r3, [r7, #12]
   1871e:	2200      	movs	r2, #0
   18720:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   18722:	68fb      	ldr	r3, [r7, #12]
   18724:	2200      	movs	r2, #0
   18726:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18728:	68fb      	ldr	r3, [r7, #12]
   1872a:	2200      	movs	r2, #0
   1872c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1872e:	68fb      	ldr	r3, [r7, #12]
   18730:	2200      	movs	r2, #0
   18732:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18734:	68fb      	ldr	r3, [r7, #12]
   18736:	2225      	movs	r2, #37	; 0x25
   18738:	2100      	movs	r1, #0
   1873a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1873c:	68fb      	ldr	r3, [r7, #12]
   1873e:	2200      	movs	r2, #0
   18740:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18744:	2214      	movs	r2, #20
   18746:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18748:	687a      	ldr	r2, [r7, #4]
   1874a:	68fb      	ldr	r3, [r7, #12]
   1874c:	0011      	movs	r1, r2
   1874e:	0018      	movs	r0, r3
   18750:	4b0c      	ldr	r3, [pc, #48]	; (18784 <i2c_master_init+0x130>)
   18752:	4798      	blx	r3
   18754:	0003      	movs	r3, r0
}
   18756:	0018      	movs	r0, r3
   18758:	46bd      	mov	sp, r7
   1875a:	b00b      	add	sp, #44	; 0x2c
   1875c:	bd90      	pop	{r4, r7, pc}
   1875e:	46c0      	nop			; (mov r8, r8)
   18760:	000281bd 	.word	0x000281bd
   18764:	000180a9 	.word	0x000180a9
   18768:	00018091 	.word	0x00018091
   1876c:	0002aa4d 	.word	0x0002aa4d
   18770:	0002aa91 	.word	0x0002aa91
   18774:	00027f75 	.word	0x00027f75
   18778:	00013575 	.word	0x00013575
   1877c:	00028221 	.word	0x00028221
   18780:	20005c9c 	.word	0x20005c9c
   18784:	00018245 	.word	0x00018245

00018788 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18788:	b580      	push	{r7, lr}
   1878a:	b084      	sub	sp, #16
   1878c:	af00      	add	r7, sp, #0
   1878e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18790:	687b      	ldr	r3, [r7, #4]
   18792:	681b      	ldr	r3, [r3, #0]
   18794:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18796:	687b      	ldr	r3, [r7, #4]
   18798:	0018      	movs	r0, r3
   1879a:	4b0f      	ldr	r3, [pc, #60]	; (187d8 <i2c_master_reset+0x50>)
   1879c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1879e:	687b      	ldr	r3, [r7, #4]
   187a0:	0018      	movs	r0, r3
   187a2:	4b0e      	ldr	r3, [pc, #56]	; (187dc <i2c_master_reset+0x54>)
   187a4:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   187a6:	4b0e      	ldr	r3, [pc, #56]	; (187e0 <i2c_master_reset+0x58>)
   187a8:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   187aa:	687b      	ldr	r3, [r7, #4]
   187ac:	681b      	ldr	r3, [r3, #0]
   187ae:	0018      	movs	r0, r3
   187b0:	4b0c      	ldr	r3, [pc, #48]	; (187e4 <i2c_master_reset+0x5c>)
   187b2:	4798      	blx	r3
   187b4:	0003      	movs	r3, r0
   187b6:	0018      	movs	r0, r3
   187b8:	4b0b      	ldr	r3, [pc, #44]	; (187e8 <i2c_master_reset+0x60>)
   187ba:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   187bc:	4b0b      	ldr	r3, [pc, #44]	; (187ec <i2c_master_reset+0x64>)
   187be:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   187c0:	687b      	ldr	r3, [r7, #4]
   187c2:	0018      	movs	r0, r3
   187c4:	4b04      	ldr	r3, [pc, #16]	; (187d8 <i2c_master_reset+0x50>)
   187c6:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   187c8:	68fb      	ldr	r3, [r7, #12]
   187ca:	2201      	movs	r2, #1
   187cc:	601a      	str	r2, [r3, #0]
}
   187ce:	46c0      	nop			; (mov r8, r8)
   187d0:	46bd      	mov	sp, r7
   187d2:	b004      	add	sp, #16
   187d4:	bd80      	pop	{r7, pc}
   187d6:	46c0      	nop			; (mov r8, r8)
   187d8:	000181c9 	.word	0x000181c9
   187dc:	000181ed 	.word	0x000181ed
   187e0:	0001814d 	.word	0x0001814d
   187e4:	0002828d 	.word	0x0002828d
   187e8:	0002abc9 	.word	0x0002abc9
   187ec:	00018161 	.word	0x00018161

000187f0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   187f0:	b580      	push	{r7, lr}
   187f2:	b084      	sub	sp, #16
   187f4:	af00      	add	r7, sp, #0
   187f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187f8:	687b      	ldr	r3, [r7, #4]
   187fa:	681b      	ldr	r3, [r3, #0]
   187fc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   187fe:	68fb      	ldr	r3, [r7, #12]
   18800:	7e1b      	ldrb	r3, [r3, #24]
   18802:	b2db      	uxtb	r3, r3
   18804:	001a      	movs	r2, r3
   18806:	2302      	movs	r3, #2
   18808:	4013      	ands	r3, r2
   1880a:	d00b      	beq.n	18824 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1880c:	68fb      	ldr	r3, [r7, #12]
   1880e:	2202      	movs	r2, #2
   18810:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18812:	68fb      	ldr	r3, [r7, #12]
   18814:	8b5b      	ldrh	r3, [r3, #26]
   18816:	b29b      	uxth	r3, r3
   18818:	001a      	movs	r2, r3
   1881a:	2302      	movs	r3, #2
   1881c:	4013      	ands	r3, r2
   1881e:	d011      	beq.n	18844 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18820:	2341      	movs	r3, #65	; 0x41
   18822:	e010      	b.n	18846 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18824:	68fb      	ldr	r3, [r7, #12]
   18826:	8b5b      	ldrh	r3, [r3, #26]
   18828:	b29b      	uxth	r3, r3
   1882a:	001a      	movs	r2, r3
   1882c:	2304      	movs	r3, #4
   1882e:	4013      	ands	r3, r2
   18830:	d008      	beq.n	18844 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18832:	68fb      	ldr	r3, [r7, #12]
   18834:	685b      	ldr	r3, [r3, #4]
   18836:	22c0      	movs	r2, #192	; 0xc0
   18838:	0292      	lsls	r2, r2, #10
   1883a:	431a      	orrs	r2, r3
   1883c:	68fb      	ldr	r3, [r7, #12]
   1883e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18840:	2318      	movs	r3, #24
   18842:	e000      	b.n	18846 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18844:	2300      	movs	r3, #0
}
   18846:	0018      	movs	r0, r3
   18848:	46bd      	mov	sp, r7
   1884a:	b004      	add	sp, #16
   1884c:	bd80      	pop	{r7, pc}

0001884e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1884e:	b580      	push	{r7, lr}
   18850:	b084      	sub	sp, #16
   18852:	af00      	add	r7, sp, #0
   18854:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18856:	687b      	ldr	r3, [r7, #4]
   18858:	681b      	ldr	r3, [r3, #0]
   1885a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1885c:	230e      	movs	r3, #14
   1885e:	18fb      	adds	r3, r7, r3
   18860:	2200      	movs	r2, #0
   18862:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18864:	e00f      	b.n	18886 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18866:	230e      	movs	r3, #14
   18868:	18fb      	adds	r3, r7, r3
   1886a:	220e      	movs	r2, #14
   1886c:	18ba      	adds	r2, r7, r2
   1886e:	8812      	ldrh	r2, [r2, #0]
   18870:	3201      	adds	r2, #1
   18872:	801a      	strh	r2, [r3, #0]
   18874:	687b      	ldr	r3, [r7, #4]
   18876:	891b      	ldrh	r3, [r3, #8]
   18878:	220e      	movs	r2, #14
   1887a:	18ba      	adds	r2, r7, r2
   1887c:	8812      	ldrh	r2, [r2, #0]
   1887e:	429a      	cmp	r2, r3
   18880:	d301      	bcc.n	18886 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18882:	2312      	movs	r3, #18
   18884:	e00e      	b.n	188a4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18886:	68bb      	ldr	r3, [r7, #8]
   18888:	7e1b      	ldrb	r3, [r3, #24]
   1888a:	b2db      	uxtb	r3, r3
   1888c:	001a      	movs	r2, r3
   1888e:	2301      	movs	r3, #1
   18890:	4013      	ands	r3, r2
   18892:	d106      	bne.n	188a2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18894:	68bb      	ldr	r3, [r7, #8]
   18896:	7e1b      	ldrb	r3, [r3, #24]
   18898:	b2db      	uxtb	r3, r3
   1889a:	001a      	movs	r2, r3
   1889c:	2302      	movs	r3, #2
   1889e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   188a0:	d0e1      	beq.n	18866 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   188a2:	2300      	movs	r3, #0
}
   188a4:	0018      	movs	r0, r3
   188a6:	46bd      	mov	sp, r7
   188a8:	b004      	add	sp, #16
   188aa:	bd80      	pop	{r7, pc}

000188ac <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   188ac:	b590      	push	{r4, r7, lr}
   188ae:	b085      	sub	sp, #20
   188b0:	af00      	add	r7, sp, #0
   188b2:	6078      	str	r0, [r7, #4]
   188b4:	000a      	movs	r2, r1
   188b6:	1cfb      	adds	r3, r7, #3
   188b8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	681b      	ldr	r3, [r3, #0]
   188be:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   188c0:	68fb      	ldr	r3, [r7, #12]
   188c2:	685b      	ldr	r3, [r3, #4]
   188c4:	2280      	movs	r2, #128	; 0x80
   188c6:	02d2      	lsls	r2, r2, #11
   188c8:	431a      	orrs	r2, r3
   188ca:	68fb      	ldr	r3, [r7, #12]
   188cc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   188ce:	1cfb      	adds	r3, r7, #3
   188d0:	781a      	ldrb	r2, [r3, #0]
   188d2:	68fb      	ldr	r3, [r7, #12]
   188d4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   188d6:	230b      	movs	r3, #11
   188d8:	18fc      	adds	r4, r7, r3
   188da:	687b      	ldr	r3, [r7, #4]
   188dc:	0018      	movs	r0, r3
   188de:	4b07      	ldr	r3, [pc, #28]	; (188fc <_i2c_master_send_hs_master_code+0x50>)
   188e0:	4798      	blx	r3
   188e2:	0003      	movs	r3, r0
   188e4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   188e6:	68fb      	ldr	r3, [r7, #12]
   188e8:	2201      	movs	r2, #1
   188ea:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   188ec:	230b      	movs	r3, #11
   188ee:	18fb      	adds	r3, r7, r3
   188f0:	781b      	ldrb	r3, [r3, #0]
}
   188f2:	0018      	movs	r0, r3
   188f4:	46bd      	mov	sp, r7
   188f6:	b005      	add	sp, #20
   188f8:	bd90      	pop	{r4, r7, pc}
   188fa:	46c0      	nop			; (mov r8, r8)
   188fc:	0001884f 	.word	0x0001884f

00018900 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18900:	b580      	push	{r7, lr}
   18902:	af00      	add	r7, sp, #0
   18904:	2000      	movs	r0, #0
   18906:	4b02      	ldr	r3, [pc, #8]	; (18910 <TC3_Handler+0x10>)
   18908:	4798      	blx	r3
   1890a:	46c0      	nop			; (mov r8, r8)
   1890c:	46bd      	mov	sp, r7
   1890e:	bd80      	pop	{r7, pc}
   18910:	0001893d 	.word	0x0001893d

00018914 <TC4_Handler>:
   18914:	b580      	push	{r7, lr}
   18916:	af00      	add	r7, sp, #0
   18918:	2001      	movs	r0, #1
   1891a:	4b02      	ldr	r3, [pc, #8]	; (18924 <TC4_Handler+0x10>)
   1891c:	4798      	blx	r3
   1891e:	46c0      	nop			; (mov r8, r8)
   18920:	46bd      	mov	sp, r7
   18922:	bd80      	pop	{r7, pc}
   18924:	0001893d 	.word	0x0001893d

00018928 <TC5_Handler>:
   18928:	b580      	push	{r7, lr}
   1892a:	af00      	add	r7, sp, #0
   1892c:	2002      	movs	r0, #2
   1892e:	4b02      	ldr	r3, [pc, #8]	; (18938 <TC5_Handler+0x10>)
   18930:	4798      	blx	r3
   18932:	46c0      	nop			; (mov r8, r8)
   18934:	46bd      	mov	sp, r7
   18936:	bd80      	pop	{r7, pc}
   18938:	0001893d 	.word	0x0001893d

0001893c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1893c:	b580      	push	{r7, lr}
   1893e:	b084      	sub	sp, #16
   18940:	af00      	add	r7, sp, #0
   18942:	0002      	movs	r2, r0
   18944:	1dfb      	adds	r3, r7, #7
   18946:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18948:	1dfb      	adds	r3, r7, #7
   1894a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1894c:	4b28      	ldr	r3, [pc, #160]	; (189f0 <_tc_interrupt_handler+0xb4>)
   1894e:	0092      	lsls	r2, r2, #2
   18950:	58d3      	ldr	r3, [r2, r3]
   18952:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18954:	68fb      	ldr	r3, [r7, #12]
   18956:	681b      	ldr	r3, [r3, #0]
   18958:	7b9b      	ldrb	r3, [r3, #14]
   1895a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1895c:	68fa      	ldr	r2, [r7, #12]
   1895e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18960:	4013      	ands	r3, r2
   18962:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18964:	68fb      	ldr	r3, [r7, #12]
   18966:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18968:	230b      	movs	r3, #11
   1896a:	18fb      	adds	r3, r7, r3
   1896c:	400a      	ands	r2, r1
   1896e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18970:	230b      	movs	r3, #11
   18972:	18fb      	adds	r3, r7, r3
   18974:	781b      	ldrb	r3, [r3, #0]
   18976:	2201      	movs	r2, #1
   18978:	4013      	ands	r3, r2
   1897a:	d008      	beq.n	1898e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1897c:	68fb      	ldr	r3, [r7, #12]
   1897e:	689b      	ldr	r3, [r3, #8]
   18980:	68fa      	ldr	r2, [r7, #12]
   18982:	0010      	movs	r0, r2
   18984:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18986:	68fb      	ldr	r3, [r7, #12]
   18988:	681b      	ldr	r3, [r3, #0]
   1898a:	2201      	movs	r2, #1
   1898c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1898e:	230b      	movs	r3, #11
   18990:	18fb      	adds	r3, r7, r3
   18992:	781b      	ldrb	r3, [r3, #0]
   18994:	2202      	movs	r2, #2
   18996:	4013      	ands	r3, r2
   18998:	d008      	beq.n	189ac <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1899a:	68fb      	ldr	r3, [r7, #12]
   1899c:	68db      	ldr	r3, [r3, #12]
   1899e:	68fa      	ldr	r2, [r7, #12]
   189a0:	0010      	movs	r0, r2
   189a2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   189a4:	68fb      	ldr	r3, [r7, #12]
   189a6:	681b      	ldr	r3, [r3, #0]
   189a8:	2202      	movs	r2, #2
   189aa:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   189ac:	230b      	movs	r3, #11
   189ae:	18fb      	adds	r3, r7, r3
   189b0:	781b      	ldrb	r3, [r3, #0]
   189b2:	2210      	movs	r2, #16
   189b4:	4013      	ands	r3, r2
   189b6:	d008      	beq.n	189ca <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   189b8:	68fb      	ldr	r3, [r7, #12]
   189ba:	691b      	ldr	r3, [r3, #16]
   189bc:	68fa      	ldr	r2, [r7, #12]
   189be:	0010      	movs	r0, r2
   189c0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   189c2:	68fb      	ldr	r3, [r7, #12]
   189c4:	681b      	ldr	r3, [r3, #0]
   189c6:	2210      	movs	r2, #16
   189c8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   189ca:	230b      	movs	r3, #11
   189cc:	18fb      	adds	r3, r7, r3
   189ce:	781b      	ldrb	r3, [r3, #0]
   189d0:	2220      	movs	r2, #32
   189d2:	4013      	ands	r3, r2
   189d4:	d008      	beq.n	189e8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   189d6:	68fb      	ldr	r3, [r7, #12]
   189d8:	695b      	ldr	r3, [r3, #20]
   189da:	68fa      	ldr	r2, [r7, #12]
   189dc:	0010      	movs	r0, r2
   189de:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   189e0:	68fb      	ldr	r3, [r7, #12]
   189e2:	681b      	ldr	r3, [r3, #0]
   189e4:	2220      	movs	r2, #32
   189e6:	739a      	strb	r2, [r3, #14]
	}
}
   189e8:	46c0      	nop			; (mov r8, r8)
   189ea:	46bd      	mov	sp, r7
   189ec:	b004      	add	sp, #16
   189ee:	bd80      	pop	{r7, pc}
   189f0:	20004a84 	.word	0x20004a84

000189f4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   189f4:	b580      	push	{r7, lr}
   189f6:	b084      	sub	sp, #16
   189f8:	af00      	add	r7, sp, #0
   189fa:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   189fc:	2300      	movs	r3, #0
   189fe:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18a00:	687b      	ldr	r3, [r7, #4]
   18a02:	2b00      	cmp	r3, #0
   18a04:	d101      	bne.n	18a0a <FreeRTOS_CLIRegisterCommand+0x16>
   18a06:	b672      	cpsid	i
   18a08:	e7fe      	b.n	18a08 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18a0a:	2008      	movs	r0, #8
   18a0c:	4b11      	ldr	r3, [pc, #68]	; (18a54 <FreeRTOS_CLIRegisterCommand+0x60>)
   18a0e:	4798      	blx	r3
   18a10:	0003      	movs	r3, r0
   18a12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18a14:	68bb      	ldr	r3, [r7, #8]
   18a16:	2b00      	cmp	r3, #0
   18a18:	d101      	bne.n	18a1e <FreeRTOS_CLIRegisterCommand+0x2a>
   18a1a:	b672      	cpsid	i
   18a1c:	e7fe      	b.n	18a1c <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18a1e:	68bb      	ldr	r3, [r7, #8]
   18a20:	2b00      	cmp	r3, #0
   18a22:	d012      	beq.n	18a4a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18a24:	4b0c      	ldr	r3, [pc, #48]	; (18a58 <FreeRTOS_CLIRegisterCommand+0x64>)
   18a26:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18a28:	68bb      	ldr	r3, [r7, #8]
   18a2a:	687a      	ldr	r2, [r7, #4]
   18a2c:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18a2e:	68bb      	ldr	r3, [r7, #8]
   18a30:	2200      	movs	r2, #0
   18a32:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18a34:	4b09      	ldr	r3, [pc, #36]	; (18a5c <FreeRTOS_CLIRegisterCommand+0x68>)
   18a36:	681b      	ldr	r3, [r3, #0]
   18a38:	68ba      	ldr	r2, [r7, #8]
   18a3a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18a3c:	4b07      	ldr	r3, [pc, #28]	; (18a5c <FreeRTOS_CLIRegisterCommand+0x68>)
   18a3e:	68ba      	ldr	r2, [r7, #8]
   18a40:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18a42:	4b07      	ldr	r3, [pc, #28]	; (18a60 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18a44:	4798      	blx	r3

		xReturn = pdPASS;
   18a46:	2301      	movs	r3, #1
   18a48:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18a4a:	68fb      	ldr	r3, [r7, #12]
}
   18a4c:	0018      	movs	r0, r3
   18a4e:	46bd      	mov	sp, r7
   18a50:	b004      	add	sp, #16
   18a52:	bd80      	pop	{r7, pc}
   18a54:	0001ae01 	.word	0x0001ae01
   18a58:	0001acc9 	.word	0x0001acc9
   18a5c:	20000100 	.word	0x20000100
   18a60:	0001aced 	.word	0x0001aced

00018a64 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18a64:	b580      	push	{r7, lr}
   18a66:	b088      	sub	sp, #32
   18a68:	af00      	add	r7, sp, #0
   18a6a:	60f8      	str	r0, [r7, #12]
   18a6c:	60b9      	str	r1, [r7, #8]
   18a6e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18a70:	2301      	movs	r3, #1
   18a72:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18a74:	4b3d      	ldr	r3, [pc, #244]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18a76:	681b      	ldr	r3, [r3, #0]
   18a78:	2b00      	cmp	r3, #0
   18a7a:	d144      	bne.n	18b06 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18a7c:	4b3b      	ldr	r3, [pc, #236]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18a7e:	4a3c      	ldr	r2, [pc, #240]	; (18b70 <FreeRTOS_CLIProcessCommand+0x10c>)
   18a80:	601a      	str	r2, [r3, #0]
   18a82:	e03a      	b.n	18afa <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18a84:	4b39      	ldr	r3, [pc, #228]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	681b      	ldr	r3, [r3, #0]
   18a8a:	681b      	ldr	r3, [r3, #0]
   18a8c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18a8e:	69bb      	ldr	r3, [r7, #24]
   18a90:	0018      	movs	r0, r3
   18a92:	4b38      	ldr	r3, [pc, #224]	; (18b74 <FreeRTOS_CLIProcessCommand+0x110>)
   18a94:	4798      	blx	r3
   18a96:	0003      	movs	r3, r0
   18a98:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18a9a:	68fa      	ldr	r2, [r7, #12]
   18a9c:	697b      	ldr	r3, [r7, #20]
   18a9e:	18d3      	adds	r3, r2, r3
   18aa0:	781b      	ldrb	r3, [r3, #0]
   18aa2:	2b20      	cmp	r3, #32
   18aa4:	d005      	beq.n	18ab2 <FreeRTOS_CLIProcessCommand+0x4e>
   18aa6:	68fa      	ldr	r2, [r7, #12]
   18aa8:	697b      	ldr	r3, [r7, #20]
   18aaa:	18d3      	adds	r3, r2, r3
   18aac:	781b      	ldrb	r3, [r3, #0]
   18aae:	2b00      	cmp	r3, #0
   18ab0:	d11e      	bne.n	18af0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18ab2:	697a      	ldr	r2, [r7, #20]
   18ab4:	69b9      	ldr	r1, [r7, #24]
   18ab6:	68fb      	ldr	r3, [r7, #12]
   18ab8:	0018      	movs	r0, r3
   18aba:	4b2f      	ldr	r3, [pc, #188]	; (18b78 <FreeRTOS_CLIProcessCommand+0x114>)
   18abc:	4798      	blx	r3
   18abe:	1e03      	subs	r3, r0, #0
   18ac0:	d116      	bne.n	18af0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18ac2:	4b2a      	ldr	r3, [pc, #168]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18ac4:	681b      	ldr	r3, [r3, #0]
   18ac6:	681b      	ldr	r3, [r3, #0]
   18ac8:	7b1b      	ldrb	r3, [r3, #12]
   18aca:	b25b      	sxtb	r3, r3
   18acc:	2b00      	cmp	r3, #0
   18ace:	db19      	blt.n	18b04 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18ad0:	68fb      	ldr	r3, [r7, #12]
   18ad2:	0018      	movs	r0, r3
   18ad4:	4b29      	ldr	r3, [pc, #164]	; (18b7c <FreeRTOS_CLIProcessCommand+0x118>)
   18ad6:	4798      	blx	r3
   18ad8:	0003      	movs	r3, r0
   18ada:	001a      	movs	r2, r3
   18adc:	4b23      	ldr	r3, [pc, #140]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18ade:	681b      	ldr	r3, [r3, #0]
   18ae0:	681b      	ldr	r3, [r3, #0]
   18ae2:	7b1b      	ldrb	r3, [r3, #12]
   18ae4:	b25b      	sxtb	r3, r3
   18ae6:	429a      	cmp	r2, r3
   18ae8:	d00c      	beq.n	18b04 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18aea:	2300      	movs	r3, #0
   18aec:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18aee:	e009      	b.n	18b04 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18af0:	4b1e      	ldr	r3, [pc, #120]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	685a      	ldr	r2, [r3, #4]
   18af6:	4b1d      	ldr	r3, [pc, #116]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18af8:	601a      	str	r2, [r3, #0]
   18afa:	4b1c      	ldr	r3, [pc, #112]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18afc:	681b      	ldr	r3, [r3, #0]
   18afe:	2b00      	cmp	r3, #0
   18b00:	d1c0      	bne.n	18a84 <FreeRTOS_CLIProcessCommand+0x20>
   18b02:	e000      	b.n	18b06 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18b04:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18b06:	4b19      	ldr	r3, [pc, #100]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18b08:	681b      	ldr	r3, [r3, #0]
   18b0a:	2b00      	cmp	r3, #0
   18b0c:	d00c      	beq.n	18b28 <FreeRTOS_CLIProcessCommand+0xc4>
   18b0e:	69fb      	ldr	r3, [r7, #28]
   18b10:	2b00      	cmp	r3, #0
   18b12:	d109      	bne.n	18b28 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18b14:	687a      	ldr	r2, [r7, #4]
   18b16:	491a      	ldr	r1, [pc, #104]	; (18b80 <FreeRTOS_CLIProcessCommand+0x11c>)
   18b18:	68bb      	ldr	r3, [r7, #8]
   18b1a:	0018      	movs	r0, r3
   18b1c:	4b19      	ldr	r3, [pc, #100]	; (18b84 <FreeRTOS_CLIProcessCommand+0x120>)
   18b1e:	4798      	blx	r3
		pxCommand = NULL;
   18b20:	4b12      	ldr	r3, [pc, #72]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18b22:	2200      	movs	r2, #0
   18b24:	601a      	str	r2, [r3, #0]
   18b26:	e01c      	b.n	18b62 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18b28:	4b10      	ldr	r3, [pc, #64]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18b2a:	681b      	ldr	r3, [r3, #0]
   18b2c:	2b00      	cmp	r3, #0
   18b2e:	d010      	beq.n	18b52 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18b30:	4b0e      	ldr	r3, [pc, #56]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18b32:	681b      	ldr	r3, [r3, #0]
   18b34:	681b      	ldr	r3, [r3, #0]
   18b36:	689b      	ldr	r3, [r3, #8]
   18b38:	68fa      	ldr	r2, [r7, #12]
   18b3a:	6879      	ldr	r1, [r7, #4]
   18b3c:	68b8      	ldr	r0, [r7, #8]
   18b3e:	4798      	blx	r3
   18b40:	0003      	movs	r3, r0
   18b42:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18b44:	69fb      	ldr	r3, [r7, #28]
   18b46:	2b00      	cmp	r3, #0
   18b48:	d10b      	bne.n	18b62 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18b4a:	4b08      	ldr	r3, [pc, #32]	; (18b6c <FreeRTOS_CLIProcessCommand+0x108>)
   18b4c:	2200      	movs	r2, #0
   18b4e:	601a      	str	r2, [r3, #0]
   18b50:	e007      	b.n	18b62 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18b52:	687a      	ldr	r2, [r7, #4]
   18b54:	490c      	ldr	r1, [pc, #48]	; (18b88 <FreeRTOS_CLIProcessCommand+0x124>)
   18b56:	68bb      	ldr	r3, [r7, #8]
   18b58:	0018      	movs	r0, r3
   18b5a:	4b0a      	ldr	r3, [pc, #40]	; (18b84 <FreeRTOS_CLIProcessCommand+0x120>)
   18b5c:	4798      	blx	r3
		xReturn = pdFALSE;
   18b5e:	2300      	movs	r3, #0
   18b60:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18b62:	69fb      	ldr	r3, [r7, #28]
}
   18b64:	0018      	movs	r0, r3
   18b66:	46bd      	mov	sp, r7
   18b68:	b008      	add	sp, #32
   18b6a:	bd80      	pop	{r7, pc}
   18b6c:	20000cd8 	.word	0x20000cd8
   18b70:	200000f8 	.word	0x200000f8
   18b74:	00035aa7 	.word	0x00035aa7
   18b78:	00035ab5 	.word	0x00035ab5
   18b7c:	00018bed 	.word	0x00018bed
   18b80:	00037e3c 	.word	0x00037e3c
   18b84:	00035ad7 	.word	0x00035ad7
   18b88:	00037e94 	.word	0x00037e94

00018b8c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18b8c:	b580      	push	{r7, lr}
   18b8e:	b086      	sub	sp, #24
   18b90:	af00      	add	r7, sp, #0
   18b92:	60f8      	str	r0, [r7, #12]
   18b94:	60b9      	str	r1, [r7, #8]
   18b96:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18b98:	4b11      	ldr	r3, [pc, #68]	; (18be0 <prvHelpCommand+0x54>)
   18b9a:	681b      	ldr	r3, [r3, #0]
   18b9c:	2b00      	cmp	r3, #0
   18b9e:	d102      	bne.n	18ba6 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18ba0:	4b0f      	ldr	r3, [pc, #60]	; (18be0 <prvHelpCommand+0x54>)
   18ba2:	4a10      	ldr	r2, [pc, #64]	; (18be4 <prvHelpCommand+0x58>)
   18ba4:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18ba6:	4b0e      	ldr	r3, [pc, #56]	; (18be0 <prvHelpCommand+0x54>)
   18ba8:	681b      	ldr	r3, [r3, #0]
   18baa:	681b      	ldr	r3, [r3, #0]
   18bac:	6859      	ldr	r1, [r3, #4]
   18bae:	68ba      	ldr	r2, [r7, #8]
   18bb0:	68fb      	ldr	r3, [r7, #12]
   18bb2:	0018      	movs	r0, r3
   18bb4:	4b0c      	ldr	r3, [pc, #48]	; (18be8 <prvHelpCommand+0x5c>)
   18bb6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18bb8:	4b09      	ldr	r3, [pc, #36]	; (18be0 <prvHelpCommand+0x54>)
   18bba:	681b      	ldr	r3, [r3, #0]
   18bbc:	685a      	ldr	r2, [r3, #4]
   18bbe:	4b08      	ldr	r3, [pc, #32]	; (18be0 <prvHelpCommand+0x54>)
   18bc0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18bc2:	4b07      	ldr	r3, [pc, #28]	; (18be0 <prvHelpCommand+0x54>)
   18bc4:	681b      	ldr	r3, [r3, #0]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	d102      	bne.n	18bd0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18bca:	2300      	movs	r3, #0
   18bcc:	617b      	str	r3, [r7, #20]
   18bce:	e001      	b.n	18bd4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18bd0:	2301      	movs	r3, #1
   18bd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18bd4:	697b      	ldr	r3, [r7, #20]
}
   18bd6:	0018      	movs	r0, r3
   18bd8:	46bd      	mov	sp, r7
   18bda:	b006      	add	sp, #24
   18bdc:	bd80      	pop	{r7, pc}
   18bde:	46c0      	nop			; (mov r8, r8)
   18be0:	20000cdc 	.word	0x20000cdc
   18be4:	200000f8 	.word	0x200000f8
   18be8:	00035ad7 	.word	0x00035ad7

00018bec <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18bec:	b580      	push	{r7, lr}
   18bee:	b084      	sub	sp, #16
   18bf0:	af00      	add	r7, sp, #0
   18bf2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18bf4:	230f      	movs	r3, #15
   18bf6:	18fb      	adds	r3, r7, r3
   18bf8:	2200      	movs	r2, #0
   18bfa:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18bfc:	2300      	movs	r3, #0
   18bfe:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18c00:	e018      	b.n	18c34 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18c02:	687b      	ldr	r3, [r7, #4]
   18c04:	781b      	ldrb	r3, [r3, #0]
   18c06:	2b20      	cmp	r3, #32
   18c08:	d10f      	bne.n	18c2a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18c0a:	68bb      	ldr	r3, [r7, #8]
   18c0c:	2b01      	cmp	r3, #1
   18c0e:	d00e      	beq.n	18c2e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18c10:	230f      	movs	r3, #15
   18c12:	18fb      	adds	r3, r7, r3
   18c14:	781b      	ldrb	r3, [r3, #0]
   18c16:	b25b      	sxtb	r3, r3
   18c18:	b2db      	uxtb	r3, r3
   18c1a:	3301      	adds	r3, #1
   18c1c:	b2da      	uxtb	r2, r3
   18c1e:	230f      	movs	r3, #15
   18c20:	18fb      	adds	r3, r7, r3
   18c22:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18c24:	2301      	movs	r3, #1
   18c26:	60bb      	str	r3, [r7, #8]
   18c28:	e001      	b.n	18c2e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18c2a:	2300      	movs	r3, #0
   18c2c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18c2e:	687b      	ldr	r3, [r7, #4]
   18c30:	3301      	adds	r3, #1
   18c32:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18c34:	687b      	ldr	r3, [r7, #4]
   18c36:	781b      	ldrb	r3, [r3, #0]
   18c38:	2b00      	cmp	r3, #0
   18c3a:	d1e2      	bne.n	18c02 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18c3c:	68bb      	ldr	r3, [r7, #8]
   18c3e:	2b01      	cmp	r3, #1
   18c40:	d109      	bne.n	18c56 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18c42:	230f      	movs	r3, #15
   18c44:	18fb      	adds	r3, r7, r3
   18c46:	781b      	ldrb	r3, [r3, #0]
   18c48:	b25b      	sxtb	r3, r3
   18c4a:	b2db      	uxtb	r3, r3
   18c4c:	3b01      	subs	r3, #1
   18c4e:	b2da      	uxtb	r2, r3
   18c50:	230f      	movs	r3, #15
   18c52:	18fb      	adds	r3, r7, r3
   18c54:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18c56:	230f      	movs	r3, #15
   18c58:	18fb      	adds	r3, r7, r3
   18c5a:	781b      	ldrb	r3, [r3, #0]
   18c5c:	b25b      	sxtb	r3, r3
}
   18c5e:	0018      	movs	r0, r3
   18c60:	46bd      	mov	sp, r7
   18c62:	b004      	add	sp, #16
   18c64:	bd80      	pop	{r7, pc}
	...

00018c68 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18c68:	b580      	push	{r7, lr}
   18c6a:	b082      	sub	sp, #8
   18c6c:	af00      	add	r7, sp, #0
   18c6e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18c70:	687b      	ldr	r3, [r7, #4]
   18c72:	0018      	movs	r0, r3
   18c74:	4b03      	ldr	r3, [pc, #12]	; (18c84 <prvTraceGetQueueNumber+0x1c>)
   18c76:	4798      	blx	r3
   18c78:	0003      	movs	r3, r0
}
   18c7a:	0018      	movs	r0, r3
   18c7c:	46bd      	mov	sp, r7
   18c7e:	b002      	add	sp, #8
   18c80:	bd80      	pop	{r7, pc}
   18c82:	46c0      	nop			; (mov r8, r8)
   18c84:	0001c425 	.word	0x0001c425

00018c88 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18c88:	b580      	push	{r7, lr}
   18c8a:	b082      	sub	sp, #8
   18c8c:	af00      	add	r7, sp, #0
   18c8e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18c90:	687b      	ldr	r3, [r7, #4]
   18c92:	0018      	movs	r0, r3
   18c94:	4b03      	ldr	r3, [pc, #12]	; (18ca4 <prvTraceGetQueueType+0x1c>)
   18c96:	4798      	blx	r3
   18c98:	0003      	movs	r3, r0
}
   18c9a:	0018      	movs	r0, r3
   18c9c:	46bd      	mov	sp, r7
   18c9e:	b002      	add	sp, #8
   18ca0:	bd80      	pop	{r7, pc}
   18ca2:	46c0      	nop			; (mov r8, r8)
   18ca4:	0001c451 	.word	0x0001c451

00018ca8 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18ca8:	b580      	push	{r7, lr}
   18caa:	b082      	sub	sp, #8
   18cac:	af00      	add	r7, sp, #0
   18cae:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18cb0:	687b      	ldr	r3, [r7, #4]
   18cb2:	0018      	movs	r0, r3
   18cb4:	4b03      	ldr	r3, [pc, #12]	; (18cc4 <prvTraceGetTaskNumberLow16+0x1c>)
   18cb6:	4798      	blx	r3
   18cb8:	0003      	movs	r3, r0
   18cba:	b29b      	uxth	r3, r3
}
   18cbc:	0018      	movs	r0, r3
   18cbe:	46bd      	mov	sp, r7
   18cc0:	b002      	add	sp, #8
   18cc2:	bd80      	pop	{r7, pc}
   18cc4:	0001d781 	.word	0x0001d781

00018cc8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18cc8:	b580      	push	{r7, lr}
   18cca:	b082      	sub	sp, #8
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18cd0:	687b      	ldr	r3, [r7, #4]
   18cd2:	0018      	movs	r0, r3
   18cd4:	4b04      	ldr	r3, [pc, #16]	; (18ce8 <prvTraceGetTaskNumberHigh16+0x20>)
   18cd6:	4798      	blx	r3
   18cd8:	0003      	movs	r3, r0
   18cda:	0c1b      	lsrs	r3, r3, #16
   18cdc:	b29b      	uxth	r3, r3
}
   18cde:	0018      	movs	r0, r3
   18ce0:	46bd      	mov	sp, r7
   18ce2:	b002      	add	sp, #8
   18ce4:	bd80      	pop	{r7, pc}
   18ce6:	46c0      	nop			; (mov r8, r8)
   18ce8:	0001d781 	.word	0x0001d781

00018cec <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18cec:	b580      	push	{r7, lr}
   18cee:	b082      	sub	sp, #8
   18cf0:	af00      	add	r7, sp, #0
   18cf2:	6078      	str	r0, [r7, #4]
   18cf4:	000a      	movs	r2, r1
   18cf6:	1cbb      	adds	r3, r7, #2
   18cf8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18cfa:	687b      	ldr	r3, [r7, #4]
   18cfc:	0018      	movs	r0, r3
   18cfe:	4b08      	ldr	r3, [pc, #32]	; (18d20 <prvTraceSetTaskNumberLow16+0x34>)
   18d00:	4798      	blx	r3
   18d02:	0003      	movs	r3, r0
   18d04:	0c1b      	lsrs	r3, r3, #16
   18d06:	041a      	lsls	r2, r3, #16
   18d08:	1cbb      	adds	r3, r7, #2
   18d0a:	881b      	ldrh	r3, [r3, #0]
   18d0c:	431a      	orrs	r2, r3
   18d0e:	687b      	ldr	r3, [r7, #4]
   18d10:	0011      	movs	r1, r2
   18d12:	0018      	movs	r0, r3
   18d14:	4b03      	ldr	r3, [pc, #12]	; (18d24 <prvTraceSetTaskNumberLow16+0x38>)
   18d16:	4798      	blx	r3
}
   18d18:	46c0      	nop			; (mov r8, r8)
   18d1a:	46bd      	mov	sp, r7
   18d1c:	b002      	add	sp, #8
   18d1e:	bd80      	pop	{r7, pc}
   18d20:	0001d781 	.word	0x0001d781
   18d24:	0001d7a9 	.word	0x0001d7a9

00018d28 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18d28:	b580      	push	{r7, lr}
   18d2a:	b082      	sub	sp, #8
   18d2c:	af00      	add	r7, sp, #0
   18d2e:	6078      	str	r0, [r7, #4]
   18d30:	000a      	movs	r2, r1
   18d32:	1cbb      	adds	r3, r7, #2
   18d34:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18d36:	687b      	ldr	r3, [r7, #4]
   18d38:	0018      	movs	r0, r3
   18d3a:	4b09      	ldr	r3, [pc, #36]	; (18d60 <prvTraceSetTaskNumberHigh16+0x38>)
   18d3c:	4798      	blx	r3
   18d3e:	0003      	movs	r3, r0
   18d40:	041b      	lsls	r3, r3, #16
   18d42:	0c1a      	lsrs	r2, r3, #16
   18d44:	1cbb      	adds	r3, r7, #2
   18d46:	881b      	ldrh	r3, [r3, #0]
   18d48:	041b      	lsls	r3, r3, #16
   18d4a:	431a      	orrs	r2, r3
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	0011      	movs	r1, r2
   18d50:	0018      	movs	r0, r3
   18d52:	4b04      	ldr	r3, [pc, #16]	; (18d64 <prvTraceSetTaskNumberHigh16+0x3c>)
   18d54:	4798      	blx	r3
}
   18d56:	46c0      	nop			; (mov r8, r8)
   18d58:	46bd      	mov	sp, r7
   18d5a:	b002      	add	sp, #8
   18d5c:	bd80      	pop	{r7, pc}
   18d5e:	46c0      	nop			; (mov r8, r8)
   18d60:	0001d781 	.word	0x0001d781
   18d64:	0001d7a9 	.word	0x0001d7a9

00018d68 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18d68:	b580      	push	{r7, lr}
   18d6a:	b082      	sub	sp, #8
   18d6c:	af00      	add	r7, sp, #0
   18d6e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18d70:	687b      	ldr	r3, [r7, #4]
   18d72:	0018      	movs	r0, r3
   18d74:	4b03      	ldr	r3, [pc, #12]	; (18d84 <prvTraceGetQueueNumberLow16+0x1c>)
   18d76:	4798      	blx	r3
   18d78:	0003      	movs	r3, r0
   18d7a:	b29b      	uxth	r3, r3
}
   18d7c:	0018      	movs	r0, r3
   18d7e:	46bd      	mov	sp, r7
   18d80:	b002      	add	sp, #8
   18d82:	bd80      	pop	{r7, pc}
   18d84:	00018c69 	.word	0x00018c69

00018d88 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18d88:	b580      	push	{r7, lr}
   18d8a:	b082      	sub	sp, #8
   18d8c:	af00      	add	r7, sp, #0
   18d8e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18d90:	687b      	ldr	r3, [r7, #4]
   18d92:	0018      	movs	r0, r3
   18d94:	4b04      	ldr	r3, [pc, #16]	; (18da8 <prvTraceGetQueueNumberHigh16+0x20>)
   18d96:	4798      	blx	r3
   18d98:	0003      	movs	r3, r0
   18d9a:	0c1b      	lsrs	r3, r3, #16
   18d9c:	b29b      	uxth	r3, r3
}
   18d9e:	0018      	movs	r0, r3
   18da0:	46bd      	mov	sp, r7
   18da2:	b002      	add	sp, #8
   18da4:	bd80      	pop	{r7, pc}
   18da6:	46c0      	nop			; (mov r8, r8)
   18da8:	00018c69 	.word	0x00018c69

00018dac <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18dac:	b580      	push	{r7, lr}
   18dae:	b082      	sub	sp, #8
   18db0:	af00      	add	r7, sp, #0
   18db2:	6078      	str	r0, [r7, #4]
   18db4:	000a      	movs	r2, r1
   18db6:	1cbb      	adds	r3, r7, #2
   18db8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18dba:	687b      	ldr	r3, [r7, #4]
   18dbc:	0018      	movs	r0, r3
   18dbe:	4b08      	ldr	r3, [pc, #32]	; (18de0 <prvTraceSetQueueNumberLow16+0x34>)
   18dc0:	4798      	blx	r3
   18dc2:	0003      	movs	r3, r0
   18dc4:	0c1b      	lsrs	r3, r3, #16
   18dc6:	041a      	lsls	r2, r3, #16
   18dc8:	1cbb      	adds	r3, r7, #2
   18dca:	881b      	ldrh	r3, [r3, #0]
   18dcc:	431a      	orrs	r2, r3
   18dce:	687b      	ldr	r3, [r7, #4]
   18dd0:	0011      	movs	r1, r2
   18dd2:	0018      	movs	r0, r3
   18dd4:	4b03      	ldr	r3, [pc, #12]	; (18de4 <prvTraceSetQueueNumberLow16+0x38>)
   18dd6:	4798      	blx	r3
}
   18dd8:	46c0      	nop			; (mov r8, r8)
   18dda:	46bd      	mov	sp, r7
   18ddc:	b002      	add	sp, #8
   18dde:	bd80      	pop	{r7, pc}
   18de0:	00018c69 	.word	0x00018c69
   18de4:	0001c439 	.word	0x0001c439

00018de8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18de8:	b580      	push	{r7, lr}
   18dea:	b082      	sub	sp, #8
   18dec:	af00      	add	r7, sp, #0
   18dee:	6078      	str	r0, [r7, #4]
   18df0:	000a      	movs	r2, r1
   18df2:	1cbb      	adds	r3, r7, #2
   18df4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18df6:	687b      	ldr	r3, [r7, #4]
   18df8:	0018      	movs	r0, r3
   18dfa:	4b09      	ldr	r3, [pc, #36]	; (18e20 <prvTraceSetQueueNumberHigh16+0x38>)
   18dfc:	4798      	blx	r3
   18dfe:	0003      	movs	r3, r0
   18e00:	041b      	lsls	r3, r3, #16
   18e02:	0c1a      	lsrs	r2, r3, #16
   18e04:	1cbb      	adds	r3, r7, #2
   18e06:	881b      	ldrh	r3, [r3, #0]
   18e08:	041b      	lsls	r3, r3, #16
   18e0a:	431a      	orrs	r2, r3
   18e0c:	687b      	ldr	r3, [r7, #4]
   18e0e:	0011      	movs	r1, r2
   18e10:	0018      	movs	r0, r3
   18e12:	4b04      	ldr	r3, [pc, #16]	; (18e24 <prvTraceSetQueueNumberHigh16+0x3c>)
   18e14:	4798      	blx	r3
}
   18e16:	46c0      	nop			; (mov r8, r8)
   18e18:	46bd      	mov	sp, r7
   18e1a:	b002      	add	sp, #8
   18e1c:	bd80      	pop	{r7, pc}
   18e1e:	46c0      	nop			; (mov r8, r8)
   18e20:	00018c69 	.word	0x00018c69
   18e24:	0001c439 	.word	0x0001c439

00018e28 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18e28:	b580      	push	{r7, lr}
   18e2a:	b084      	sub	sp, #16
   18e2c:	af00      	add	r7, sp, #0
   18e2e:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18e30:	2300      	movs	r3, #0
   18e32:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18e34:	2300      	movs	r3, #0
   18e36:	60bb      	str	r3, [r7, #8]
   18e38:	e018      	b.n	18e6c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18e3a:	4b14      	ldr	r3, [pc, #80]	; (18e8c <prvAddTaskToStackMonitor+0x64>)
   18e3c:	68ba      	ldr	r2, [r7, #8]
   18e3e:	00d2      	lsls	r2, r2, #3
   18e40:	58d3      	ldr	r3, [r2, r3]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d10f      	bne.n	18e66 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18e46:	4b11      	ldr	r3, [pc, #68]	; (18e8c <prvAddTaskToStackMonitor+0x64>)
   18e48:	68ba      	ldr	r2, [r7, #8]
   18e4a:	00d2      	lsls	r2, r2, #3
   18e4c:	6879      	ldr	r1, [r7, #4]
   18e4e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18e50:	4a0e      	ldr	r2, [pc, #56]	; (18e8c <prvAddTaskToStackMonitor+0x64>)
   18e52:	68bb      	ldr	r3, [r7, #8]
   18e54:	00db      	lsls	r3, r3, #3
   18e56:	18d3      	adds	r3, r2, r3
   18e58:	3304      	adds	r3, #4
   18e5a:	2201      	movs	r2, #1
   18e5c:	4252      	negs	r2, r2
   18e5e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18e60:	2301      	movs	r3, #1
   18e62:	60fb      	str	r3, [r7, #12]
			break;
   18e64:	e005      	b.n	18e72 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18e66:	68bb      	ldr	r3, [r7, #8]
   18e68:	3301      	adds	r3, #1
   18e6a:	60bb      	str	r3, [r7, #8]
   18e6c:	68bb      	ldr	r3, [r7, #8]
   18e6e:	2b09      	cmp	r3, #9
   18e70:	dde3      	ble.n	18e3a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18e72:	68fb      	ldr	r3, [r7, #12]
   18e74:	2b00      	cmp	r3, #0
   18e76:	d104      	bne.n	18e82 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18e78:	4b05      	ldr	r3, [pc, #20]	; (18e90 <prvAddTaskToStackMonitor+0x68>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	1c5a      	adds	r2, r3, #1
   18e7e:	4b04      	ldr	r3, [pc, #16]	; (18e90 <prvAddTaskToStackMonitor+0x68>)
   18e80:	601a      	str	r2, [r3, #0]
	}
}
   18e82:	46c0      	nop			; (mov r8, r8)
   18e84:	46bd      	mov	sp, r7
   18e86:	b004      	add	sp, #16
   18e88:	bd80      	pop	{r7, pc}
   18e8a:	46c0      	nop			; (mov r8, r8)
   18e8c:	20000ce4 	.word	0x20000ce4
   18e90:	20000d34 	.word	0x20000d34

00018e94 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18e94:	b590      	push	{r4, r7, lr}
   18e96:	b085      	sub	sp, #20
   18e98:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18e9a:	2300      	movs	r3, #0
   18e9c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   18e9e:	4b2b      	ldr	r3, [pc, #172]	; (18f4c <prvReportStackUsage+0xb8>)
   18ea0:	681b      	ldr	r3, [r3, #0]
   18ea2:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18ea4:	4b29      	ldr	r3, [pc, #164]	; (18f4c <prvReportStackUsage+0xb8>)
   18ea6:	681a      	ldr	r2, [r3, #0]
   18ea8:	4b29      	ldr	r3, [pc, #164]	; (18f50 <prvReportStackUsage+0xbc>)
   18eaa:	00d2      	lsls	r2, r2, #3
   18eac:	58d3      	ldr	r3, [r2, r3]
   18eae:	2b00      	cmp	r3, #0
   18eb0:	d035      	beq.n	18f1e <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   18eb2:	4b26      	ldr	r3, [pc, #152]	; (18f4c <prvReportStackUsage+0xb8>)
   18eb4:	681a      	ldr	r2, [r3, #0]
   18eb6:	4b26      	ldr	r3, [pc, #152]	; (18f50 <prvReportStackUsage+0xbc>)
   18eb8:	00d2      	lsls	r2, r2, #3
   18eba:	58d3      	ldr	r3, [r2, r3]
   18ebc:	0018      	movs	r0, r3
   18ebe:	4b25      	ldr	r3, [pc, #148]	; (18f54 <prvReportStackUsage+0xc0>)
   18ec0:	4798      	blx	r3
   18ec2:	0003      	movs	r3, r0
   18ec4:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18ec6:	4b21      	ldr	r3, [pc, #132]	; (18f4c <prvReportStackUsage+0xb8>)
   18ec8:	681b      	ldr	r3, [r3, #0]
   18eca:	4a21      	ldr	r2, [pc, #132]	; (18f50 <prvReportStackUsage+0xbc>)
   18ecc:	00db      	lsls	r3, r3, #3
   18ece:	18d3      	adds	r3, r2, r3
   18ed0:	3304      	adds	r3, #4
   18ed2:	681a      	ldr	r2, [r3, #0]
   18ed4:	687b      	ldr	r3, [r7, #4]
   18ed6:	429a      	cmp	r2, r3
   18ed8:	d907      	bls.n	18eea <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18eda:	4b1c      	ldr	r3, [pc, #112]	; (18f4c <prvReportStackUsage+0xb8>)
   18edc:	681b      	ldr	r3, [r3, #0]
   18ede:	4a1c      	ldr	r2, [pc, #112]	; (18f50 <prvReportStackUsage+0xbc>)
   18ee0:	00db      	lsls	r3, r3, #3
   18ee2:	18d3      	adds	r3, r2, r3
   18ee4:	3304      	adds	r3, #4
   18ee6:	687a      	ldr	r2, [r7, #4]
   18ee8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18eea:	4b18      	ldr	r3, [pc, #96]	; (18f4c <prvReportStackUsage+0xb8>)
   18eec:	681a      	ldr	r2, [r3, #0]
   18eee:	4b18      	ldr	r3, [pc, #96]	; (18f50 <prvReportStackUsage+0xbc>)
   18ef0:	00d2      	lsls	r2, r2, #3
   18ef2:	58d3      	ldr	r3, [r2, r3]
   18ef4:	0018      	movs	r0, r3
   18ef6:	4b18      	ldr	r3, [pc, #96]	; (18f58 <prvReportStackUsage+0xc4>)
   18ef8:	4798      	blx	r3
   18efa:	0003      	movs	r3, r0
   18efc:	b2db      	uxtb	r3, r3
   18efe:	0019      	movs	r1, r3
   18f00:	4b12      	ldr	r3, [pc, #72]	; (18f4c <prvReportStackUsage+0xb8>)
   18f02:	681b      	ldr	r3, [r3, #0]
   18f04:	4a12      	ldr	r2, [pc, #72]	; (18f50 <prvReportStackUsage+0xbc>)
   18f06:	00db      	lsls	r3, r3, #3
   18f08:	18d3      	adds	r3, r2, r3
   18f0a:	3304      	adds	r3, #4
   18f0c:	681b      	ldr	r3, [r3, #0]
   18f0e:	000a      	movs	r2, r1
   18f10:	2103      	movs	r1, #3
   18f12:	20ea      	movs	r0, #234	; 0xea
   18f14:	4c11      	ldr	r4, [pc, #68]	; (18f5c <prvReportStackUsage+0xc8>)
   18f16:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18f18:	68fb      	ldr	r3, [r7, #12]
   18f1a:	3301      	adds	r3, #1
   18f1c:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18f1e:	4b0b      	ldr	r3, [pc, #44]	; (18f4c <prvReportStackUsage+0xb8>)
   18f20:	681b      	ldr	r3, [r3, #0]
   18f22:	1c5a      	adds	r2, r3, #1
   18f24:	4b0e      	ldr	r3, [pc, #56]	; (18f60 <prvReportStackUsage+0xcc>)
   18f26:	210a      	movs	r1, #10
   18f28:	0010      	movs	r0, r2
   18f2a:	4798      	blx	r3
   18f2c:	000b      	movs	r3, r1
   18f2e:	001a      	movs	r2, r3
   18f30:	4b06      	ldr	r3, [pc, #24]	; (18f4c <prvReportStackUsage+0xb8>)
   18f32:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18f34:	68fb      	ldr	r3, [r7, #12]
   18f36:	2b00      	cmp	r3, #0
   18f38:	dc04      	bgt.n	18f44 <prvReportStackUsage+0xb0>
   18f3a:	4b04      	ldr	r3, [pc, #16]	; (18f4c <prvReportStackUsage+0xb8>)
   18f3c:	681a      	ldr	r2, [r3, #0]
   18f3e:	68bb      	ldr	r3, [r7, #8]
   18f40:	429a      	cmp	r2, r3
   18f42:	d1af      	bne.n	18ea4 <prvReportStackUsage+0x10>
}
   18f44:	46c0      	nop			; (mov r8, r8)
   18f46:	46bd      	mov	sp, r7
   18f48:	b005      	add	sp, #20
   18f4a:	bd90      	pop	{r4, r7, pc}
   18f4c:	20000d38 	.word	0x20000d38
   18f50:	20000ce4 	.word	0x20000ce4
   18f54:	0001d921 	.word	0x0001d921
   18f58:	00018ca9 	.word	0x00018ca9
   18f5c:	000197f1 	.word	0x000197f1
   18f60:	000339f5 	.word	0x000339f5

00018f64 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18f64:	b580      	push	{r7, lr}
   18f66:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18f68:	4b02      	ldr	r3, [pc, #8]	; (18f74 <prvTraceGetCurrentTaskHandle+0x10>)
   18f6a:	4798      	blx	r3
   18f6c:	0003      	movs	r3, r0
}
   18f6e:	0018      	movs	r0, r3
   18f70:	46bd      	mov	sp, r7
   18f72:	bd80      	pop	{r7, pc}
   18f74:	0001d9cd 	.word	0x0001d9cd

00018f78 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18f78:	b590      	push	{r4, r7, lr}
   18f7a:	b085      	sub	sp, #20
   18f7c:	af02      	add	r7, sp, #8
   18f7e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18f80:	4b14      	ldr	r3, [pc, #80]	; (18fd4 <vTraceEnable+0x5c>)
   18f82:	4798      	blx	r3

	if (startOption == TRC_START)
   18f84:	687b      	ldr	r3, [r7, #4]
   18f86:	2b01      	cmp	r3, #1
   18f88:	d102      	bne.n	18f90 <vTraceEnable+0x18>
	{
		vTraceStart();
   18f8a:	4b13      	ldr	r3, [pc, #76]	; (18fd8 <vTraceEnable+0x60>)
   18f8c:	4798      	blx	r3
   18f8e:	e00e      	b.n	18fae <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18f90:	687b      	ldr	r3, [r7, #4]
   18f92:	2b02      	cmp	r3, #2
   18f94:	d104      	bne.n	18fa0 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18f96:	4b11      	ldr	r3, [pc, #68]	; (18fdc <vTraceEnable+0x64>)
   18f98:	0018      	movs	r0, r3
   18f9a:	4b11      	ldr	r3, [pc, #68]	; (18fe0 <vTraceEnable+0x68>)
   18f9c:	4798      	blx	r3
   18f9e:	e006      	b.n	18fae <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18fa0:	687b      	ldr	r3, [r7, #4]
   18fa2:	2b00      	cmp	r3, #0
   18fa4:	d003      	beq.n	18fae <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18fa6:	4b0f      	ldr	r3, [pc, #60]	; (18fe4 <vTraceEnable+0x6c>)
   18fa8:	0018      	movs	r0, r3
   18faa:	4b0d      	ldr	r3, [pc, #52]	; (18fe0 <vTraceEnable+0x68>)
   18fac:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18fae:	4b0e      	ldr	r3, [pc, #56]	; (18fe8 <vTraceEnable+0x70>)
   18fb0:	681b      	ldr	r3, [r3, #0]
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d10a      	bne.n	18fcc <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18fb6:	2396      	movs	r3, #150	; 0x96
   18fb8:	005a      	lsls	r2, r3, #1
   18fba:	490c      	ldr	r1, [pc, #48]	; (18fec <vTraceEnable+0x74>)
   18fbc:	480c      	ldr	r0, [pc, #48]	; (18ff0 <vTraceEnable+0x78>)
   18fbe:	4b0a      	ldr	r3, [pc, #40]	; (18fe8 <vTraceEnable+0x70>)
   18fc0:	9301      	str	r3, [sp, #4]
   18fc2:	2304      	movs	r3, #4
   18fc4:	9300      	str	r3, [sp, #0]
   18fc6:	2300      	movs	r3, #0
   18fc8:	4c0a      	ldr	r4, [pc, #40]	; (18ff4 <vTraceEnable+0x7c>)
   18fca:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18fcc:	46c0      	nop			; (mov r8, r8)
   18fce:	46bd      	mov	sp, r7
   18fd0:	b003      	add	sp, #12
   18fd2:	bd90      	pop	{r4, r7, pc}
   18fd4:	00019ebd 	.word	0x00019ebd
   18fd8:	00019415 	.word	0x00019415
   18fdc:	00037ef4 	.word	0x00037ef4
   18fe0:	0001a565 	.word	0x0001a565
   18fe4:	00037f34 	.word	0x00037f34
   18fe8:	20000ce0 	.word	0x20000ce0
   18fec:	00037f68 	.word	0x00037f68
   18ff0:	00018ff9 	.word	0x00018ff9
   18ff4:	0001c925 	.word	0x0001c925

00018ff8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18ff8:	b580      	push	{r7, lr}
   18ffa:	b082      	sub	sp, #8
   18ffc:	af00      	add	r7, sp, #0
   18ffe:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   19000:	4b04      	ldr	r3, [pc, #16]	; (19014 <TzCtrl+0x1c>)
   19002:	4798      	blx	r3
   19004:	1e03      	subs	r3, r0, #0
   19006:	d001      	beq.n	1900c <TzCtrl+0x14>
		{
			prvReportStackUsage();
   19008:	4b03      	ldr	r3, [pc, #12]	; (19018 <TzCtrl+0x20>)
   1900a:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1900c:	2004      	movs	r0, #4
   1900e:	4b03      	ldr	r3, [pc, #12]	; (1901c <TzCtrl+0x24>)
   19010:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   19012:	e7f5      	b.n	19000 <TzCtrl+0x8>
   19014:	00019459 	.word	0x00019459
   19018:	00018e95 	.word	0x00018e95
   1901c:	0001ccc1 	.word	0x0001ccc1

00019020 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   19020:	b580      	push	{r7, lr}
   19022:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   19024:	4b60      	ldr	r3, [pc, #384]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19026:	681b      	ldr	r3, [r3, #0]
   19028:	2209      	movs	r2, #9
   1902a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1902c:	4b5e      	ldr	r3, [pc, #376]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1902e:	681b      	ldr	r3, [r3, #0]
   19030:	2264      	movs	r2, #100	; 0x64
   19032:	210a      	movs	r1, #10
   19034:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   19036:	4b5c      	ldr	r3, [pc, #368]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19038:	681b      	ldr	r3, [r3, #0]
   1903a:	2265      	movs	r2, #101	; 0x65
   1903c:	210a      	movs	r1, #10
   1903e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   19040:	4b59      	ldr	r3, [pc, #356]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19042:	681b      	ldr	r3, [r3, #0]
   19044:	2266      	movs	r2, #102	; 0x66
   19046:	210a      	movs	r1, #10
   19048:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1904a:	4b57      	ldr	r3, [pc, #348]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1904c:	681b      	ldr	r3, [r3, #0]
   1904e:	2267      	movs	r2, #103	; 0x67
   19050:	210f      	movs	r1, #15
   19052:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   19054:	4b54      	ldr	r3, [pc, #336]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19056:	681b      	ldr	r3, [r3, #0]
   19058:	2268      	movs	r2, #104	; 0x68
   1905a:	2105      	movs	r1, #5
   1905c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1905e:	4b52      	ldr	r3, [pc, #328]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19060:	681b      	ldr	r3, [r3, #0]
   19062:	2269      	movs	r2, #105	; 0x69
   19064:	2105      	movs	r1, #5
   19066:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   19068:	4b4f      	ldr	r3, [pc, #316]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1906a:	681b      	ldr	r3, [r3, #0]
   1906c:	226a      	movs	r2, #106	; 0x6a
   1906e:	2105      	movs	r1, #5
   19070:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   19072:	4b4d      	ldr	r3, [pc, #308]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19074:	681b      	ldr	r3, [r3, #0]
   19076:	226b      	movs	r2, #107	; 0x6b
   19078:	2105      	movs	r1, #5
   1907a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1907c:	4b4a      	ldr	r3, [pc, #296]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1907e:	681b      	ldr	r3, [r3, #0]
   19080:	226c      	movs	r2, #108	; 0x6c
   19082:	2105      	movs	r1, #5
   19084:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   19086:	4b48      	ldr	r3, [pc, #288]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19088:	681b      	ldr	r3, [r3, #0]
   1908a:	2270      	movs	r2, #112	; 0x70
   1908c:	210f      	movs	r1, #15
   1908e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   19090:	4b45      	ldr	r3, [pc, #276]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	2271      	movs	r2, #113	; 0x71
   19096:	210f      	movs	r1, #15
   19098:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1909a:	4b43      	ldr	r3, [pc, #268]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1909c:	681b      	ldr	r3, [r3, #0]
   1909e:	2272      	movs	r2, #114	; 0x72
   190a0:	210f      	movs	r1, #15
   190a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   190a4:	4b40      	ldr	r3, [pc, #256]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	2273      	movs	r2, #115	; 0x73
   190aa:	210f      	movs	r1, #15
   190ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   190ae:	4b3e      	ldr	r3, [pc, #248]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190b0:	681b      	ldr	r3, [r3, #0]
   190b2:	2274      	movs	r2, #116	; 0x74
   190b4:	210f      	movs	r1, #15
   190b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   190b8:	4b3b      	ldr	r3, [pc, #236]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190ba:	681b      	ldr	r3, [r3, #0]
   190bc:	2275      	movs	r2, #117	; 0x75
   190be:	210f      	movs	r1, #15
   190c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   190c2:	4b39      	ldr	r3, [pc, #228]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190c4:	681b      	ldr	r3, [r3, #0]
   190c6:	2276      	movs	r2, #118	; 0x76
   190c8:	210f      	movs	r1, #15
   190ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   190cc:	4b36      	ldr	r3, [pc, #216]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190ce:	681b      	ldr	r3, [r3, #0]
   190d0:	2277      	movs	r2, #119	; 0x77
   190d2:	210f      	movs	r1, #15
   190d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   190d6:	4b34      	ldr	r3, [pc, #208]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190d8:	681b      	ldr	r3, [r3, #0]
   190da:	2278      	movs	r2, #120	; 0x78
   190dc:	210f      	movs	r1, #15
   190de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   190e0:	4b31      	ldr	r3, [pc, #196]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190e2:	681b      	ldr	r3, [r3, #0]
   190e4:	227c      	movs	r2, #124	; 0x7c
   190e6:	2110      	movs	r1, #16
   190e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   190ea:	4b2f      	ldr	r3, [pc, #188]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190ec:	681b      	ldr	r3, [r3, #0]
   190ee:	227d      	movs	r2, #125	; 0x7d
   190f0:	2110      	movs	r1, #16
   190f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   190f4:	4b2c      	ldr	r3, [pc, #176]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   190f6:	681b      	ldr	r3, [r3, #0]
   190f8:	227e      	movs	r2, #126	; 0x7e
   190fa:	2110      	movs	r1, #16
   190fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   190fe:	4b2a      	ldr	r3, [pc, #168]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19100:	681b      	ldr	r3, [r3, #0]
   19102:	227f      	movs	r2, #127	; 0x7f
   19104:	2113      	movs	r1, #19
   19106:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   19108:	4b27      	ldr	r3, [pc, #156]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1910a:	681b      	ldr	r3, [r3, #0]
   1910c:	2280      	movs	r2, #128	; 0x80
   1910e:	2111      	movs	r1, #17
   19110:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   19112:	4b25      	ldr	r3, [pc, #148]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19114:	681b      	ldr	r3, [r3, #0]
   19116:	2281      	movs	r2, #129	; 0x81
   19118:	2110      	movs	r1, #16
   1911a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1911c:	4b22      	ldr	r3, [pc, #136]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1911e:	681b      	ldr	r3, [r3, #0]
   19120:	2282      	movs	r2, #130	; 0x82
   19122:	2113      	movs	r1, #19
   19124:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   19126:	4b20      	ldr	r3, [pc, #128]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19128:	681b      	ldr	r3, [r3, #0]
   1912a:	2283      	movs	r2, #131	; 0x83
   1912c:	2113      	movs	r1, #19
   1912e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   19130:	4b1d      	ldr	r3, [pc, #116]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19132:	681b      	ldr	r3, [r3, #0]
   19134:	2284      	movs	r2, #132	; 0x84
   19136:	2113      	movs	r1, #19
   19138:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1913a:	4b1b      	ldr	r3, [pc, #108]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1913c:	681b      	ldr	r3, [r3, #0]
   1913e:	2288      	movs	r2, #136	; 0x88
   19140:	2100      	movs	r1, #0
   19142:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   19144:	4b18      	ldr	r3, [pc, #96]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	228a      	movs	r2, #138	; 0x8a
   1914a:	21a0      	movs	r1, #160	; 0xa0
   1914c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1914e:	4b16      	ldr	r3, [pc, #88]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19150:	681b      	ldr	r3, [r3, #0]
   19152:	228c      	movs	r2, #140	; 0x8c
   19154:	21a0      	movs	r1, #160	; 0xa0
   19156:	0049      	lsls	r1, r1, #1
   19158:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1915a:	4b13      	ldr	r3, [pc, #76]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1915c:	681b      	ldr	r3, [r3, #0]
   1915e:	228e      	movs	r2, #142	; 0x8e
   19160:	21f0      	movs	r1, #240	; 0xf0
   19162:	0049      	lsls	r1, r1, #1
   19164:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   19166:	4b10      	ldr	r3, [pc, #64]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19168:	681b      	ldr	r3, [r3, #0]
   1916a:	2290      	movs	r2, #144	; 0x90
   1916c:	490f      	ldr	r1, [pc, #60]	; (191ac <vTraceInitObjectPropertyTable+0x18c>)
   1916e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   19170:	4b0d      	ldr	r3, [pc, #52]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19172:	681b      	ldr	r3, [r3, #0]
   19174:	2292      	movs	r2, #146	; 0x92
   19176:	490e      	ldr	r1, [pc, #56]	; (191b0 <vTraceInitObjectPropertyTable+0x190>)
   19178:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1917a:	4b0b      	ldr	r3, [pc, #44]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1917c:	681b      	ldr	r3, [r3, #0]
   1917e:	2294      	movs	r2, #148	; 0x94
   19180:	490c      	ldr	r1, [pc, #48]	; (191b4 <vTraceInitObjectPropertyTable+0x194>)
   19182:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   19184:	4b08      	ldr	r3, [pc, #32]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	2296      	movs	r2, #150	; 0x96
   1918a:	490b      	ldr	r1, [pc, #44]	; (191b8 <vTraceInitObjectPropertyTable+0x198>)
   1918c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1918e:	4b06      	ldr	r3, [pc, #24]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   19190:	681b      	ldr	r3, [r3, #0]
   19192:	2298      	movs	r2, #152	; 0x98
   19194:	218c      	movs	r1, #140	; 0x8c
   19196:	00c9      	lsls	r1, r1, #3
   19198:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1919a:	4b03      	ldr	r3, [pc, #12]	; (191a8 <vTraceInitObjectPropertyTable+0x188>)
   1919c:	681b      	ldr	r3, [r3, #0]
   1919e:	4a07      	ldr	r2, [pc, #28]	; (191bc <vTraceInitObjectPropertyTable+0x19c>)
   191a0:	661a      	str	r2, [r3, #96]	; 0x60
}
   191a2:	46c0      	nop			; (mov r8, r8)
   191a4:	46bd      	mov	sp, r7
   191a6:	bd80      	pop	{r7, pc}
   191a8:	20000df8 	.word	0x20000df8
   191ac:	000002fd 	.word	0x000002fd
   191b0:	00000352 	.word	0x00000352
   191b4:	000003a2 	.word	0x000003a2
   191b8:	00000401 	.word	0x00000401
   191bc:	000004bf 	.word	0x000004bf

000191c0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   191c0:	b580      	push	{r7, lr}
   191c2:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   191c4:	4b2e      	ldr	r3, [pc, #184]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191c6:	2200      	movs	r2, #0
   191c8:	825a      	strh	r2, [r3, #18]
   191ca:	4b2d      	ldr	r3, [pc, #180]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191cc:	8a5a      	ldrh	r2, [r3, #18]
   191ce:	4b2c      	ldr	r3, [pc, #176]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191d0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   191d2:	4b2b      	ldr	r3, [pc, #172]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191d4:	220a      	movs	r2, #10
   191d6:	829a      	strh	r2, [r3, #20]
   191d8:	4b29      	ldr	r3, [pc, #164]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191da:	8a9a      	ldrh	r2, [r3, #20]
   191dc:	4b28      	ldr	r3, [pc, #160]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191de:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   191e0:	4b27      	ldr	r3, [pc, #156]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191e2:	2214      	movs	r2, #20
   191e4:	82da      	strh	r2, [r3, #22]
   191e6:	4b26      	ldr	r3, [pc, #152]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191e8:	8ada      	ldrh	r2, [r3, #22]
   191ea:	4b25      	ldr	r3, [pc, #148]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191ec:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   191ee:	4b24      	ldr	r3, [pc, #144]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191f0:	221e      	movs	r2, #30
   191f2:	831a      	strh	r2, [r3, #24]
   191f4:	4b22      	ldr	r3, [pc, #136]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191f6:	8b1a      	ldrh	r2, [r3, #24]
   191f8:	4b21      	ldr	r3, [pc, #132]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191fa:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   191fc:	4b20      	ldr	r3, [pc, #128]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   191fe:	222d      	movs	r2, #45	; 0x2d
   19200:	835a      	strh	r2, [r3, #26]
   19202:	4b1f      	ldr	r3, [pc, #124]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19204:	8b5a      	ldrh	r2, [r3, #26]
   19206:	4b1e      	ldr	r3, [pc, #120]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19208:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1920a:	4b1d      	ldr	r3, [pc, #116]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1920c:	2232      	movs	r2, #50	; 0x32
   1920e:	839a      	strh	r2, [r3, #28]
   19210:	4b1b      	ldr	r3, [pc, #108]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19212:	8b9a      	ldrh	r2, [r3, #28]
   19214:	4b1a      	ldr	r3, [pc, #104]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19216:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   19218:	4b19      	ldr	r3, [pc, #100]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1921a:	2237      	movs	r2, #55	; 0x37
   1921c:	83da      	strh	r2, [r3, #30]
   1921e:	4b18      	ldr	r3, [pc, #96]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19220:	8bda      	ldrh	r2, [r3, #30]
   19222:	4b17      	ldr	r3, [pc, #92]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19224:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   19226:	4b16      	ldr	r3, [pc, #88]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19228:	223c      	movs	r2, #60	; 0x3c
   1922a:	841a      	strh	r2, [r3, #32]
   1922c:	4b14      	ldr	r3, [pc, #80]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1922e:	8c1a      	ldrh	r2, [r3, #32]
   19230:	4b13      	ldr	r3, [pc, #76]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19232:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   19234:	4b12      	ldr	r3, [pc, #72]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19236:	2241      	movs	r2, #65	; 0x41
   19238:	845a      	strh	r2, [r3, #34]	; 0x22
   1923a:	4b11      	ldr	r3, [pc, #68]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1923c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1923e:	4b10      	ldr	r3, [pc, #64]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19240:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   19242:	4b0f      	ldr	r3, [pc, #60]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19244:	2209      	movs	r2, #9
   19246:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   19248:	4b0d      	ldr	r3, [pc, #52]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1924a:	2213      	movs	r2, #19
   1924c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1924e:	4b0c      	ldr	r3, [pc, #48]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19250:	221d      	movs	r2, #29
   19252:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   19254:	4b0a      	ldr	r3, [pc, #40]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19256:	222c      	movs	r2, #44	; 0x2c
   19258:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1925a:	4b09      	ldr	r3, [pc, #36]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1925c:	2231      	movs	r2, #49	; 0x31
   1925e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   19260:	4b07      	ldr	r3, [pc, #28]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19262:	2236      	movs	r2, #54	; 0x36
   19264:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   19266:	4b06      	ldr	r3, [pc, #24]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19268:	223b      	movs	r2, #59	; 0x3b
   1926a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1926c:	4b04      	ldr	r3, [pc, #16]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   1926e:	2240      	movs	r2, #64	; 0x40
   19270:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   19272:	4b03      	ldr	r3, [pc, #12]	; (19280 <vTraceInitObjectHandleStack+0xc0>)
   19274:	2245      	movs	r2, #69	; 0x45
   19276:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19278:	46c0      	nop			; (mov r8, r8)
   1927a:	46bd      	mov	sp, r7
   1927c:	bd80      	pop	{r7, pc}
   1927e:	46c0      	nop			; (mov r8, r8)
   19280:	20000d68 	.word	0x20000d68

00019284 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   19284:	b580      	push	{r7, lr}
   19286:	b082      	sub	sp, #8
   19288:	af00      	add	r7, sp, #0
   1928a:	0002      	movs	r2, r0
   1928c:	1dfb      	adds	r3, r7, #7
   1928e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   19290:	1dfb      	adds	r3, r7, #7
   19292:	781b      	ldrb	r3, [r3, #0]
   19294:	2b08      	cmp	r3, #8
   19296:	d816      	bhi.n	192c6 <pszTraceGetErrorNotEnoughHandles+0x42>
   19298:	009a      	lsls	r2, r3, #2
   1929a:	4b0d      	ldr	r3, [pc, #52]	; (192d0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1929c:	18d3      	adds	r3, r2, r3
   1929e:	681b      	ldr	r3, [r3, #0]
   192a0:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   192a2:	4b0c      	ldr	r3, [pc, #48]	; (192d4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   192a4:	e010      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   192a6:	4b0c      	ldr	r3, [pc, #48]	; (192d8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   192a8:	e00e      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   192aa:	4b0c      	ldr	r3, [pc, #48]	; (192dc <pszTraceGetErrorNotEnoughHandles+0x58>)
   192ac:	e00c      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   192ae:	4b0c      	ldr	r3, [pc, #48]	; (192e0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   192b0:	e00a      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   192b2:	4b0c      	ldr	r3, [pc, #48]	; (192e4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   192b4:	e008      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   192b6:	4b0c      	ldr	r3, [pc, #48]	; (192e8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   192b8:	e006      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   192ba:	4b0c      	ldr	r3, [pc, #48]	; (192ec <pszTraceGetErrorNotEnoughHandles+0x68>)
   192bc:	e004      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   192be:	4b0c      	ldr	r3, [pc, #48]	; (192f0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   192c0:	e002      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   192c2:	4b0c      	ldr	r3, [pc, #48]	; (192f4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   192c4:	e000      	b.n	192c8 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   192c6:	4b0c      	ldr	r3, [pc, #48]	; (192f8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   192c8:	0018      	movs	r0, r3
   192ca:	46bd      	mov	sp, r7
   192cc:	b002      	add	sp, #8
   192ce:	bd80      	pop	{r7, pc}
   192d0:	00038270 	.word	0x00038270
   192d4:	00037f70 	.word	0x00037f70
   192d8:	00037fb8 	.word	0x00037fb8
   192dc:	00038000 	.word	0x00038000
   192e0:	00038054 	.word	0x00038054
   192e4:	000380a0 	.word	0x000380a0
   192e8:	000380ec 	.word	0x000380ec
   192ec:	00038138 	.word	0x00038138
   192f0:	0003818c 	.word	0x0003818c
   192f4:	000381e4 	.word	0x000381e4
   192f8:	00038240 	.word	0x00038240

000192fc <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   192fc:	b590      	push	{r4, r7, lr}
   192fe:	b087      	sub	sp, #28
   19300:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   19302:	2317      	movs	r3, #23
   19304:	18fb      	adds	r3, r7, r3
   19306:	2200      	movs	r2, #0
   19308:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1930a:	4b36      	ldr	r3, [pc, #216]	; (193e4 <uiTraceStart+0xe8>)
   1930c:	681b      	ldr	r3, [r3, #0]
   1930e:	2b00      	cmp	r3, #0
   19310:	d10b      	bne.n	1932a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   19312:	4b34      	ldr	r3, [pc, #208]	; (193e4 <uiTraceStart+0xe8>)
   19314:	681b      	ldr	r3, [r3, #0]
   19316:	2b00      	cmp	r3, #0
   19318:	d105      	bne.n	19326 <uiTraceStart+0x2a>
   1931a:	4b33      	ldr	r3, [pc, #204]	; (193e8 <uiTraceStart+0xec>)
   1931c:	0018      	movs	r0, r3
   1931e:	4b33      	ldr	r3, [pc, #204]	; (193ec <uiTraceStart+0xf0>)
   19320:	4798      	blx	r3
   19322:	2300      	movs	r3, #0
   19324:	e059      	b.n	193da <uiTraceStart+0xde>
		return 0;
   19326:	2300      	movs	r3, #0
   19328:	e057      	b.n	193da <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1932a:	4b2e      	ldr	r3, [pc, #184]	; (193e4 <uiTraceStart+0xe8>)
   1932c:	681b      	ldr	r3, [r3, #0]
   1932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19330:	2b01      	cmp	r3, #1
   19332:	d101      	bne.n	19338 <uiTraceStart+0x3c>
		return 1; /* Already running */
   19334:	2301      	movs	r3, #1
   19336:	e050      	b.n	193da <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   19338:	4b2d      	ldr	r3, [pc, #180]	; (193f0 <uiTraceStart+0xf4>)
   1933a:	681b      	ldr	r3, [r3, #0]
   1933c:	2b00      	cmp	r3, #0
   1933e:	d149      	bne.n	193d4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19340:	f3ef 8310 	mrs	r3, PRIMASK
   19344:	60bb      	str	r3, [r7, #8]
  return(result);
   19346:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   19348:	613b      	str	r3, [r7, #16]
   1934a:	2301      	movs	r3, #1
   1934c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1934e:	68fb      	ldr	r3, [r7, #12]
   19350:	f383 8810 	msr	PRIMASK, r3
   19354:	4b27      	ldr	r3, [pc, #156]	; (193f4 <uiTraceStart+0xf8>)
   19356:	681b      	ldr	r3, [r3, #0]
   19358:	1c5a      	adds	r2, r3, #1
   1935a:	4b26      	ldr	r3, [pc, #152]	; (193f4 <uiTraceStart+0xf8>)
   1935c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1935e:	4b21      	ldr	r3, [pc, #132]	; (193e4 <uiTraceStart+0xe8>)
   19360:	681b      	ldr	r3, [r3, #0]
   19362:	2201      	movs	r2, #1
   19364:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   19366:	4b24      	ldr	r3, [pc, #144]	; (193f8 <uiTraceStart+0xfc>)
   19368:	4798      	blx	r3
   1936a:	0003      	movs	r3, r0
   1936c:	0018      	movs	r0, r3
   1936e:	4b23      	ldr	r3, [pc, #140]	; (193fc <uiTraceStart+0x100>)
   19370:	4798      	blx	r3
   19372:	0003      	movs	r3, r0
   19374:	001a      	movs	r2, r3
   19376:	2317      	movs	r3, #23
   19378:	18fb      	adds	r3, r7, r3
   1937a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1937c:	2317      	movs	r3, #23
   1937e:	18fb      	adds	r3, r7, r3
   19380:	781b      	ldrb	r3, [r3, #0]
   19382:	2b00      	cmp	r3, #0
   19384:	d116      	bne.n	193b4 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   19386:	2317      	movs	r3, #23
   19388:	18fc      	adds	r4, r7, r3
   1938a:	2003      	movs	r0, #3
   1938c:	4b1c      	ldr	r3, [pc, #112]	; (19400 <uiTraceStart+0x104>)
   1938e:	4798      	blx	r3
   19390:	0003      	movs	r3, r0
   19392:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   19394:	4a1b      	ldr	r2, [pc, #108]	; (19404 <uiTraceStart+0x108>)
   19396:	2317      	movs	r3, #23
   19398:	18fb      	adds	r3, r7, r3
   1939a:	781b      	ldrb	r3, [r3, #0]
   1939c:	0019      	movs	r1, r3
   1939e:	2003      	movs	r0, #3
   193a0:	4b19      	ldr	r3, [pc, #100]	; (19408 <uiTraceStart+0x10c>)
   193a2:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   193a4:	2317      	movs	r3, #23
   193a6:	18fb      	adds	r3, r7, r3
   193a8:	781b      	ldrb	r3, [r3, #0]
   193aa:	2200      	movs	r2, #0
   193ac:	0019      	movs	r1, r3
   193ae:	2003      	movs	r0, #3
   193b0:	4b16      	ldr	r3, [pc, #88]	; (1940c <uiTraceStart+0x110>)
   193b2:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   193b4:	2317      	movs	r3, #23
   193b6:	18fb      	adds	r3, r7, r3
   193b8:	781b      	ldrb	r3, [r3, #0]
   193ba:	0018      	movs	r0, r3
   193bc:	4b14      	ldr	r3, [pc, #80]	; (19410 <uiTraceStart+0x114>)
   193be:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   193c0:	4b0c      	ldr	r3, [pc, #48]	; (193f4 <uiTraceStart+0xf8>)
   193c2:	681b      	ldr	r3, [r3, #0]
   193c4:	1e5a      	subs	r2, r3, #1
   193c6:	4b0b      	ldr	r3, [pc, #44]	; (193f4 <uiTraceStart+0xf8>)
   193c8:	601a      	str	r2, [r3, #0]
   193ca:	693b      	ldr	r3, [r7, #16]
   193cc:	607b      	str	r3, [r7, #4]
   193ce:	687b      	ldr	r3, [r7, #4]
   193d0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   193d4:	4b03      	ldr	r3, [pc, #12]	; (193e4 <uiTraceStart+0xe8>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   193da:	0018      	movs	r0, r3
   193dc:	46bd      	mov	sp, r7
   193de:	b007      	add	sp, #28
   193e0:	bd90      	pop	{r4, r7, pc}
   193e2:	46c0      	nop			; (mov r8, r8)
   193e4:	20000df8 	.word	0x20000df8
   193e8:	00038294 	.word	0x00038294
   193ec:	0001a565 	.word	0x0001a565
   193f0:	20000d58 	.word	0x20000d58
   193f4:	20000d50 	.word	0x20000d50
   193f8:	00018f65 	.word	0x00018f65
   193fc:	00018ca9 	.word	0x00018ca9
   19400:	0001a249 	.word	0x0001a249
   19404:	000382d8 	.word	0x000382d8
   19408:	0001a479 	.word	0x0001a479
   1940c:	00019bdd 	.word	0x00019bdd
   19410:	00019ac5 	.word	0x00019ac5

00019414 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   19414:	b580      	push	{r7, lr}
   19416:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   19418:	4b02      	ldr	r3, [pc, #8]	; (19424 <vTraceStart+0x10>)
   1941a:	4798      	blx	r3
}
   1941c:	46c0      	nop			; (mov r8, r8)
   1941e:	46bd      	mov	sp, r7
   19420:	bd80      	pop	{r7, pc}
   19422:	46c0      	nop			; (mov r8, r8)
   19424:	000192fd 	.word	0x000192fd

00019428 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   19428:	b580      	push	{r7, lr}
   1942a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1942c:	4b08      	ldr	r3, [pc, #32]	; (19450 <vTraceStop+0x28>)
   1942e:	681b      	ldr	r3, [r3, #0]
   19430:	2b00      	cmp	r3, #0
   19432:	d003      	beq.n	1943c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   19434:	4b06      	ldr	r3, [pc, #24]	; (19450 <vTraceStop+0x28>)
   19436:	681b      	ldr	r3, [r3, #0]
   19438:	2200      	movs	r2, #0
   1943a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1943c:	4b05      	ldr	r3, [pc, #20]	; (19454 <vTraceStop+0x2c>)
   1943e:	681b      	ldr	r3, [r3, #0]
   19440:	2b00      	cmp	r3, #0
   19442:	d002      	beq.n	1944a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   19444:	4b03      	ldr	r3, [pc, #12]	; (19454 <vTraceStop+0x2c>)
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	4798      	blx	r3
	}
}
   1944a:	46c0      	nop			; (mov r8, r8)
   1944c:	46bd      	mov	sp, r7
   1944e:	bd80      	pop	{r7, pc}
   19450:	20000df8 	.word	0x20000df8
   19454:	20000d60 	.word	0x20000d60

00019458 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19458:	b580      	push	{r7, lr}
   1945a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1945c:	4b05      	ldr	r3, [pc, #20]	; (19474 <xTraceIsRecordingEnabled+0x1c>)
   1945e:	681b      	ldr	r3, [r3, #0]
   19460:	2b00      	cmp	r3, #0
   19462:	d003      	beq.n	1946c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   19464:	4b03      	ldr	r3, [pc, #12]	; (19474 <xTraceIsRecordingEnabled+0x1c>)
   19466:	681b      	ldr	r3, [r3, #0]
   19468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1946a:	e000      	b.n	1946e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1946c:	2300      	movs	r3, #0
	}
}
   1946e:	0018      	movs	r0, r3
   19470:	46bd      	mov	sp, r7
   19472:	bd80      	pop	{r7, pc}
   19474:	20000df8 	.word	0x20000df8

00019478 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19478:	b590      	push	{r4, r7, lr}
   1947a:	b089      	sub	sp, #36	; 0x24
   1947c:	af00      	add	r7, sp, #0
   1947e:	0002      	movs	r2, r0
   19480:	1dfb      	adds	r3, r7, #7
   19482:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   19484:	1dfb      	adds	r3, r7, #7
   19486:	781b      	ldrb	r3, [r3, #0]
   19488:	2b00      	cmp	r3, #0
   1948a:	d057      	beq.n	1953c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1948c:	4b2e      	ldr	r3, [pc, #184]	; (19548 <prvTraceStoreTaskReady+0xd0>)
   1948e:	681b      	ldr	r3, [r3, #0]
   19490:	2b00      	cmp	r3, #0
   19492:	d055      	beq.n	19540 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   19494:	1dfb      	adds	r3, r7, #7
   19496:	781b      	ldrb	r3, [r3, #0]
   19498:	2b0f      	cmp	r3, #15
   1949a:	d904      	bls.n	194a6 <prvTraceStoreTaskReady+0x2e>
   1949c:	4b2b      	ldr	r3, [pc, #172]	; (1954c <prvTraceStoreTaskReady+0xd4>)
   1949e:	0018      	movs	r0, r3
   194a0:	4b2b      	ldr	r3, [pc, #172]	; (19550 <prvTraceStoreTaskReady+0xd8>)
   194a2:	4798      	blx	r3
   194a4:	e04d      	b.n	19542 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   194a6:	4b2b      	ldr	r3, [pc, #172]	; (19554 <prvTraceStoreTaskReady+0xdc>)
   194a8:	681b      	ldr	r3, [r3, #0]
   194aa:	2b00      	cmp	r3, #0
   194ac:	d004      	beq.n	194b8 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   194ae:	4b2a      	ldr	r3, [pc, #168]	; (19558 <prvTraceStoreTaskReady+0xe0>)
   194b0:	0018      	movs	r0, r3
   194b2:	4b27      	ldr	r3, [pc, #156]	; (19550 <prvTraceStoreTaskReady+0xd8>)
   194b4:	4798      	blx	r3
		return;
   194b6:	e044      	b.n	19542 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   194b8:	f3ef 8310 	mrs	r3, PRIMASK
   194bc:	60fb      	str	r3, [r7, #12]
  return(result);
   194be:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   194c0:	61fb      	str	r3, [r7, #28]
   194c2:	2301      	movs	r3, #1
   194c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   194c6:	693b      	ldr	r3, [r7, #16]
   194c8:	f383 8810 	msr	PRIMASK, r3
   194cc:	4b21      	ldr	r3, [pc, #132]	; (19554 <prvTraceStoreTaskReady+0xdc>)
   194ce:	681b      	ldr	r3, [r3, #0]
   194d0:	1c5a      	adds	r2, r3, #1
   194d2:	4b20      	ldr	r3, [pc, #128]	; (19554 <prvTraceStoreTaskReady+0xdc>)
   194d4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   194d6:	4b21      	ldr	r3, [pc, #132]	; (1955c <prvTraceStoreTaskReady+0xe4>)
   194d8:	681b      	ldr	r3, [r3, #0]
   194da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194dc:	2b00      	cmp	r3, #0
   194de:	d022      	beq.n	19526 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   194e0:	231a      	movs	r3, #26
   194e2:	18fc      	adds	r4, r7, r3
   194e4:	4b1e      	ldr	r3, [pc, #120]	; (19560 <prvTraceStoreTaskReady+0xe8>)
   194e6:	0018      	movs	r0, r3
   194e8:	4b1e      	ldr	r3, [pc, #120]	; (19564 <prvTraceStoreTaskReady+0xec>)
   194ea:	4798      	blx	r3
   194ec:	0003      	movs	r3, r0
   194ee:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   194f0:	2319      	movs	r3, #25
   194f2:	18fb      	adds	r3, r7, r3
   194f4:	1dfa      	adds	r2, r7, #7
   194f6:	7812      	ldrb	r2, [r2, #0]
   194f8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   194fa:	4b1b      	ldr	r3, [pc, #108]	; (19568 <prvTraceStoreTaskReady+0xf0>)
   194fc:	4798      	blx	r3
   194fe:	0003      	movs	r3, r0
   19500:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   19502:	697b      	ldr	r3, [r7, #20]
   19504:	2b00      	cmp	r3, #0
   19506:	d00e      	beq.n	19526 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   19508:	697b      	ldr	r3, [r7, #20]
   1950a:	2202      	movs	r2, #2
   1950c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1950e:	697b      	ldr	r3, [r7, #20]
   19510:	221a      	movs	r2, #26
   19512:	18ba      	adds	r2, r7, r2
   19514:	8812      	ldrh	r2, [r2, #0]
   19516:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   19518:	697b      	ldr	r3, [r7, #20]
   1951a:	2219      	movs	r2, #25
   1951c:	18ba      	adds	r2, r7, r2
   1951e:	7812      	ldrb	r2, [r2, #0]
   19520:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19522:	4b12      	ldr	r3, [pc, #72]	; (1956c <prvTraceStoreTaskReady+0xf4>)
   19524:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19526:	4b0b      	ldr	r3, [pc, #44]	; (19554 <prvTraceStoreTaskReady+0xdc>)
   19528:	681b      	ldr	r3, [r3, #0]
   1952a:	1e5a      	subs	r2, r3, #1
   1952c:	4b09      	ldr	r3, [pc, #36]	; (19554 <prvTraceStoreTaskReady+0xdc>)
   1952e:	601a      	str	r2, [r3, #0]
   19530:	69fb      	ldr	r3, [r7, #28]
   19532:	60bb      	str	r3, [r7, #8]
   19534:	68bb      	ldr	r3, [r7, #8]
   19536:	f383 8810 	msr	PRIMASK, r3
   1953a:	e002      	b.n	19542 <prvTraceStoreTaskReady+0xca>
		return;
   1953c:	46c0      	nop			; (mov r8, r8)
   1953e:	e000      	b.n	19542 <prvTraceStoreTaskReady+0xca>
		return;
   19540:	46c0      	nop			; (mov r8, r8)
}
   19542:	46bd      	mov	sp, r7
   19544:	b009      	add	sp, #36	; 0x24
   19546:	bd90      	pop	{r4, r7, pc}
   19548:	2000010c 	.word	0x2000010c
   1954c:	00038640 	.word	0x00038640
   19550:	0001a565 	.word	0x0001a565
   19554:	20000d50 	.word	0x20000d50
   19558:	00038680 	.word	0x00038680
   1955c:	20000df8 	.word	0x20000df8
   19560:	0000ffff 	.word	0x0000ffff
   19564:	0001a779 	.word	0x0001a779
   19568:	0001a11d 	.word	0x0001a11d
   1956c:	0001a721 	.word	0x0001a721

00019570 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19570:	b580      	push	{r7, lr}
   19572:	b08e      	sub	sp, #56	; 0x38
   19574:	af00      	add	r7, sp, #0
   19576:	60f8      	str	r0, [r7, #12]
   19578:	60b9      	str	r1, [r7, #8]
   1957a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1957c:	4b48      	ldr	r3, [pc, #288]	; (196a0 <vTraceStoreMemMangEvent+0x130>)
   1957e:	681b      	ldr	r3, [r3, #0]
   19580:	2b00      	cmp	r3, #0
   19582:	d100      	bne.n	19586 <vTraceStoreMemMangEvent+0x16>
   19584:	e088      	b.n	19698 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   19586:	687b      	ldr	r3, [r7, #4]
   19588:	2b00      	cmp	r3, #0
   1958a:	da03      	bge.n	19594 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1958c:	687b      	ldr	r3, [r7, #4]
   1958e:	425b      	negs	r3, r3
   19590:	637b      	str	r3, [r7, #52]	; 0x34
   19592:	e001      	b.n	19598 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   19594:	687b      	ldr	r3, [r7, #4]
   19596:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19598:	f3ef 8310 	mrs	r3, PRIMASK
   1959c:	61bb      	str	r3, [r7, #24]
  return(result);
   1959e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   195a0:	633b      	str	r3, [r7, #48]	; 0x30
   195a2:	2301      	movs	r3, #1
   195a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   195a6:	69fb      	ldr	r3, [r7, #28]
   195a8:	f383 8810 	msr	PRIMASK, r3
   195ac:	4b3d      	ldr	r3, [pc, #244]	; (196a4 <vTraceStoreMemMangEvent+0x134>)
   195ae:	681b      	ldr	r3, [r3, #0]
   195b0:	1c5a      	adds	r2, r3, #1
   195b2:	4b3c      	ldr	r3, [pc, #240]	; (196a4 <vTraceStoreMemMangEvent+0x134>)
   195b4:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   195b6:	68bb      	ldr	r3, [r7, #8]
   195b8:	2b00      	cmp	r3, #0
   195ba:	d005      	beq.n	195c8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   195bc:	4b3a      	ldr	r3, [pc, #232]	; (196a8 <vTraceStoreMemMangEvent+0x138>)
   195be:	681a      	ldr	r2, [r3, #0]
   195c0:	687b      	ldr	r3, [r7, #4]
   195c2:	18d2      	adds	r2, r2, r3
   195c4:	4b38      	ldr	r3, [pc, #224]	; (196a8 <vTraceStoreMemMangEvent+0x138>)
   195c6:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   195c8:	4b35      	ldr	r3, [pc, #212]	; (196a0 <vTraceStoreMemMangEvent+0x130>)
   195ca:	681b      	ldr	r3, [r3, #0]
   195cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   195ce:	2b00      	cmp	r3, #0
   195d0:	d057      	beq.n	19682 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   195d2:	20ff      	movs	r0, #255	; 0xff
   195d4:	4b35      	ldr	r3, [pc, #212]	; (196ac <vTraceStoreMemMangEvent+0x13c>)
   195d6:	4798      	blx	r3
   195d8:	0003      	movs	r3, r0
   195da:	001a      	movs	r2, r3
   195dc:	232f      	movs	r3, #47	; 0x2f
   195de:	18fb      	adds	r3, r7, r3
   195e0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   195e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   195e4:	4a32      	ldr	r2, [pc, #200]	; (196b0 <vTraceStoreMemMangEvent+0x140>)
   195e6:	0019      	movs	r1, r3
   195e8:	0010      	movs	r0, r2
   195ea:	4b32      	ldr	r3, [pc, #200]	; (196b4 <vTraceStoreMemMangEvent+0x144>)
   195ec:	4798      	blx	r3
   195ee:	0002      	movs	r2, r0
   195f0:	232c      	movs	r3, #44	; 0x2c
   195f2:	18fb      	adds	r3, r7, r3
   195f4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   195f6:	4b30      	ldr	r3, [pc, #192]	; (196b8 <vTraceStoreMemMangEvent+0x148>)
   195f8:	4798      	blx	r3
   195fa:	0003      	movs	r3, r0
   195fc:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   195fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19600:	2b00      	cmp	r3, #0
   19602:	d03e      	beq.n	19682 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   19604:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19606:	222f      	movs	r2, #47	; 0x2f
   19608:	18ba      	adds	r2, r7, r2
   1960a:	7812      	ldrb	r2, [r2, #0]
   1960c:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19610:	2200      	movs	r2, #0
   19612:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   19614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19616:	222c      	movs	r2, #44	; 0x2c
   19618:	18ba      	adds	r2, r7, r2
   1961a:	8812      	ldrh	r2, [r2, #0]
   1961c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1961e:	4b27      	ldr	r3, [pc, #156]	; (196bc <vTraceStoreMemMangEvent+0x14c>)
   19620:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   19622:	68bb      	ldr	r3, [r7, #8]
   19624:	4a22      	ldr	r2, [pc, #136]	; (196b0 <vTraceStoreMemMangEvent+0x140>)
   19626:	0019      	movs	r1, r3
   19628:	0010      	movs	r0, r2
   1962a:	4b22      	ldr	r3, [pc, #136]	; (196b4 <vTraceStoreMemMangEvent+0x144>)
   1962c:	4798      	blx	r3
   1962e:	0002      	movs	r2, r0
   19630:	2326      	movs	r3, #38	; 0x26
   19632:	18fb      	adds	r3, r7, r3
   19634:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   19636:	2325      	movs	r3, #37	; 0x25
   19638:	18fb      	adds	r3, r7, r3
   1963a:	2200      	movs	r2, #0
   1963c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1963e:	4b1e      	ldr	r3, [pc, #120]	; (196b8 <vTraceStoreMemMangEvent+0x148>)
   19640:	4798      	blx	r3
   19642:	0003      	movs	r3, r0
   19644:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   19646:	6a3b      	ldr	r3, [r7, #32]
   19648:	2b00      	cmp	r3, #0
   1964a:	d01a      	beq.n	19682 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1964c:	6a3b      	ldr	r3, [r7, #32]
   1964e:	2226      	movs	r2, #38	; 0x26
   19650:	18ba      	adds	r2, r7, r2
   19652:	8812      	ldrh	r2, [r2, #0]
   19654:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   19656:	6a3b      	ldr	r3, [r7, #32]
   19658:	2225      	movs	r2, #37	; 0x25
   1965a:	18ba      	adds	r2, r7, r2
   1965c:	7812      	ldrb	r2, [r2, #0]
   1965e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19660:	68fb      	ldr	r3, [r7, #12]
   19662:	b2db      	uxtb	r3, r3
   19664:	3301      	adds	r3, #1
   19666:	b2da      	uxtb	r2, r3
   19668:	6a3b      	ldr	r3, [r7, #32]
   1966a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1966c:	68fb      	ldr	r3, [r7, #12]
   1966e:	b2da      	uxtb	r2, r3
   19670:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19672:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19674:	4b11      	ldr	r3, [pc, #68]	; (196bc <vTraceStoreMemMangEvent+0x14c>)
   19676:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19678:	4b09      	ldr	r3, [pc, #36]	; (196a0 <vTraceStoreMemMangEvent+0x130>)
   1967a:	681b      	ldr	r3, [r3, #0]
   1967c:	4a0a      	ldr	r2, [pc, #40]	; (196a8 <vTraceStoreMemMangEvent+0x138>)
   1967e:	6812      	ldr	r2, [r2, #0]
   19680:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   19682:	4b08      	ldr	r3, [pc, #32]	; (196a4 <vTraceStoreMemMangEvent+0x134>)
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	1e5a      	subs	r2, r3, #1
   19688:	4b06      	ldr	r3, [pc, #24]	; (196a4 <vTraceStoreMemMangEvent+0x134>)
   1968a:	601a      	str	r2, [r3, #0]
   1968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1968e:	617b      	str	r3, [r7, #20]
   19690:	697b      	ldr	r3, [r7, #20]
   19692:	f383 8810 	msr	PRIMASK, r3
   19696:	e000      	b.n	1969a <vTraceStoreMemMangEvent+0x12a>
		return;
   19698:	46c0      	nop			; (mov r8, r8)
}
   1969a:	46bd      	mov	sp, r7
   1969c:	b00e      	add	sp, #56	; 0x38
   1969e:	bd80      	pop	{r7, pc}
   196a0:	20000df8 	.word	0x20000df8
   196a4:	20000d50 	.word	0x20000d50
   196a8:	20000d64 	.word	0x20000d64
   196ac:	0001a779 	.word	0x0001a779
   196b0:	0000ffff 	.word	0x0000ffff
   196b4:	0001993d 	.word	0x0001993d
   196b8:	0001a11d 	.word	0x0001a11d
   196bc:	0001a721 	.word	0x0001a721

000196c0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   196c0:	b590      	push	{r4, r7, lr}
   196c2:	b08b      	sub	sp, #44	; 0x2c
   196c4:	af00      	add	r7, sp, #0
   196c6:	60f8      	str	r0, [r7, #12]
   196c8:	607a      	str	r2, [r7, #4]
   196ca:	230b      	movs	r3, #11
   196cc:	18fb      	adds	r3, r7, r3
   196ce:	1c0a      	adds	r2, r1, #0
   196d0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   196d2:	68fb      	ldr	r3, [r7, #12]
   196d4:	2bfe      	cmp	r3, #254	; 0xfe
   196d6:	d904      	bls.n	196e2 <prvTraceStoreKernelCall+0x22>
   196d8:	4b39      	ldr	r3, [pc, #228]	; (197c0 <prvTraceStoreKernelCall+0x100>)
   196da:	0018      	movs	r0, r3
   196dc:	4b39      	ldr	r3, [pc, #228]	; (197c4 <prvTraceStoreKernelCall+0x104>)
   196de:	4798      	blx	r3
   196e0:	e06b      	b.n	197ba <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   196e2:	230b      	movs	r3, #11
   196e4:	18fb      	adds	r3, r7, r3
   196e6:	781b      	ldrb	r3, [r3, #0]
   196e8:	2b08      	cmp	r3, #8
   196ea:	d904      	bls.n	196f6 <prvTraceStoreKernelCall+0x36>
   196ec:	4b36      	ldr	r3, [pc, #216]	; (197c8 <prvTraceStoreKernelCall+0x108>)
   196ee:	0018      	movs	r0, r3
   196f0:	4b34      	ldr	r3, [pc, #208]	; (197c4 <prvTraceStoreKernelCall+0x104>)
   196f2:	4798      	blx	r3
   196f4:	e061      	b.n	197ba <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   196f6:	4b35      	ldr	r3, [pc, #212]	; (197cc <prvTraceStoreKernelCall+0x10c>)
   196f8:	681a      	ldr	r2, [r3, #0]
   196fa:	230b      	movs	r3, #11
   196fc:	18fb      	adds	r3, r7, r3
   196fe:	781b      	ldrb	r3, [r3, #0]
   19700:	2164      	movs	r1, #100	; 0x64
   19702:	18d3      	adds	r3, r2, r3
   19704:	185b      	adds	r3, r3, r1
   19706:	781b      	ldrb	r3, [r3, #0]
   19708:	001a      	movs	r2, r3
   1970a:	687b      	ldr	r3, [r7, #4]
   1970c:	429a      	cmp	r2, r3
   1970e:	d204      	bcs.n	1971a <prvTraceStoreKernelCall+0x5a>
   19710:	4b2f      	ldr	r3, [pc, #188]	; (197d0 <prvTraceStoreKernelCall+0x110>)
   19712:	0018      	movs	r0, r3
   19714:	4b2b      	ldr	r3, [pc, #172]	; (197c4 <prvTraceStoreKernelCall+0x104>)
   19716:	4798      	blx	r3
   19718:	e04f      	b.n	197ba <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1971a:	4b2e      	ldr	r3, [pc, #184]	; (197d4 <prvTraceStoreKernelCall+0x114>)
   1971c:	681b      	ldr	r3, [r3, #0]
   1971e:	2b00      	cmp	r3, #0
   19720:	d004      	beq.n	1972c <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   19722:	4b2d      	ldr	r3, [pc, #180]	; (197d8 <prvTraceStoreKernelCall+0x118>)
   19724:	0018      	movs	r0, r3
   19726:	4b27      	ldr	r3, [pc, #156]	; (197c4 <prvTraceStoreKernelCall+0x104>)
   19728:	4798      	blx	r3
		return;
   1972a:	e046      	b.n	197ba <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1972c:	4b2b      	ldr	r3, [pc, #172]	; (197dc <prvTraceStoreKernelCall+0x11c>)
   1972e:	781b      	ldrb	r3, [r3, #0]
   19730:	2b00      	cmp	r3, #0
   19732:	d041      	beq.n	197b8 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19734:	f3ef 8310 	mrs	r3, PRIMASK
   19738:	617b      	str	r3, [r7, #20]
  return(result);
   1973a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1973c:	627b      	str	r3, [r7, #36]	; 0x24
   1973e:	2301      	movs	r3, #1
   19740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19742:	69bb      	ldr	r3, [r7, #24]
   19744:	f383 8810 	msr	PRIMASK, r3
   19748:	4b22      	ldr	r3, [pc, #136]	; (197d4 <prvTraceStoreKernelCall+0x114>)
   1974a:	681b      	ldr	r3, [r3, #0]
   1974c:	1c5a      	adds	r2, r3, #1
   1974e:	4b21      	ldr	r3, [pc, #132]	; (197d4 <prvTraceStoreKernelCall+0x114>)
   19750:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19752:	4b1e      	ldr	r3, [pc, #120]	; (197cc <prvTraceStoreKernelCall+0x10c>)
   19754:	681b      	ldr	r3, [r3, #0]
   19756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19758:	2b00      	cmp	r3, #0
   1975a:	d022      	beq.n	197a2 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1975c:	2322      	movs	r3, #34	; 0x22
   1975e:	18fc      	adds	r4, r7, r3
   19760:	4b1f      	ldr	r3, [pc, #124]	; (197e0 <prvTraceStoreKernelCall+0x120>)
   19762:	0018      	movs	r0, r3
   19764:	4b1f      	ldr	r3, [pc, #124]	; (197e4 <prvTraceStoreKernelCall+0x124>)
   19766:	4798      	blx	r3
   19768:	0003      	movs	r3, r0
   1976a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1976c:	2321      	movs	r3, #33	; 0x21
   1976e:	18fb      	adds	r3, r7, r3
   19770:	687a      	ldr	r2, [r7, #4]
   19772:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19774:	4b1c      	ldr	r3, [pc, #112]	; (197e8 <prvTraceStoreKernelCall+0x128>)
   19776:	4798      	blx	r3
   19778:	0003      	movs	r3, r0
   1977a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1977c:	69fb      	ldr	r3, [r7, #28]
   1977e:	2b00      	cmp	r3, #0
   19780:	d00f      	beq.n	197a2 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19782:	69fb      	ldr	r3, [r7, #28]
   19784:	2222      	movs	r2, #34	; 0x22
   19786:	18ba      	adds	r2, r7, r2
   19788:	8812      	ldrh	r2, [r2, #0]
   1978a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1978c:	68fb      	ldr	r3, [r7, #12]
   1978e:	b2da      	uxtb	r2, r3
   19790:	69fb      	ldr	r3, [r7, #28]
   19792:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19794:	69fb      	ldr	r3, [r7, #28]
   19796:	2221      	movs	r2, #33	; 0x21
   19798:	18ba      	adds	r2, r7, r2
   1979a:	7812      	ldrb	r2, [r2, #0]
   1979c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1979e:	4b13      	ldr	r3, [pc, #76]	; (197ec <prvTraceStoreKernelCall+0x12c>)
   197a0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   197a2:	4b0c      	ldr	r3, [pc, #48]	; (197d4 <prvTraceStoreKernelCall+0x114>)
   197a4:	681b      	ldr	r3, [r3, #0]
   197a6:	1e5a      	subs	r2, r3, #1
   197a8:	4b0a      	ldr	r3, [pc, #40]	; (197d4 <prvTraceStoreKernelCall+0x114>)
   197aa:	601a      	str	r2, [r3, #0]
   197ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   197ae:	613b      	str	r3, [r7, #16]
   197b0:	693b      	ldr	r3, [r7, #16]
   197b2:	f383 8810 	msr	PRIMASK, r3
   197b6:	e000      	b.n	197ba <prvTraceStoreKernelCall+0xfa>
		return;
   197b8:	46c0      	nop			; (mov r8, r8)
}
   197ba:	46bd      	mov	sp, r7
   197bc:	b00b      	add	sp, #44	; 0x2c
   197be:	bd90      	pop	{r4, r7, pc}
   197c0:	000386f0 	.word	0x000386f0
   197c4:	0001a565 	.word	0x0001a565
   197c8:	00038728 	.word	0x00038728
   197cc:	20000df8 	.word	0x20000df8
   197d0:	00038770 	.word	0x00038770
   197d4:	20000d50 	.word	0x20000d50
   197d8:	000387b8 	.word	0x000387b8
   197dc:	20000d5c 	.word	0x20000d5c
   197e0:	0000ffff 	.word	0x0000ffff
   197e4:	0001a779 	.word	0x0001a779
   197e8:	0001a11d 	.word	0x0001a11d
   197ec:	0001a721 	.word	0x0001a721

000197f0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   197f0:	b580      	push	{r7, lr}
   197f2:	b08a      	sub	sp, #40	; 0x28
   197f4:	af00      	add	r7, sp, #0
   197f6:	60f8      	str	r0, [r7, #12]
   197f8:	607a      	str	r2, [r7, #4]
   197fa:	603b      	str	r3, [r7, #0]
   197fc:	230b      	movs	r3, #11
   197fe:	18fb      	adds	r3, r7, r3
   19800:	1c0a      	adds	r2, r1, #0
   19802:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19804:	68fb      	ldr	r3, [r7, #12]
   19806:	2bfe      	cmp	r3, #254	; 0xfe
   19808:	d904      	bls.n	19814 <prvTraceStoreKernelCallWithParam+0x24>
   1980a:	4b40      	ldr	r3, [pc, #256]	; (1990c <prvTraceStoreKernelCallWithParam+0x11c>)
   1980c:	0018      	movs	r0, r3
   1980e:	4b40      	ldr	r3, [pc, #256]	; (19910 <prvTraceStoreKernelCallWithParam+0x120>)
   19810:	4798      	blx	r3
   19812:	e077      	b.n	19904 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19814:	230b      	movs	r3, #11
   19816:	18fb      	adds	r3, r7, r3
   19818:	781b      	ldrb	r3, [r3, #0]
   1981a:	2b08      	cmp	r3, #8
   1981c:	d904      	bls.n	19828 <prvTraceStoreKernelCallWithParam+0x38>
   1981e:	4b3d      	ldr	r3, [pc, #244]	; (19914 <prvTraceStoreKernelCallWithParam+0x124>)
   19820:	0018      	movs	r0, r3
   19822:	4b3b      	ldr	r3, [pc, #236]	; (19910 <prvTraceStoreKernelCallWithParam+0x120>)
   19824:	4798      	blx	r3
   19826:	e06d      	b.n	19904 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19828:	4b3b      	ldr	r3, [pc, #236]	; (19918 <prvTraceStoreKernelCallWithParam+0x128>)
   1982a:	681a      	ldr	r2, [r3, #0]
   1982c:	230b      	movs	r3, #11
   1982e:	18fb      	adds	r3, r7, r3
   19830:	781b      	ldrb	r3, [r3, #0]
   19832:	2164      	movs	r1, #100	; 0x64
   19834:	18d3      	adds	r3, r2, r3
   19836:	185b      	adds	r3, r3, r1
   19838:	781b      	ldrb	r3, [r3, #0]
   1983a:	001a      	movs	r2, r3
   1983c:	687b      	ldr	r3, [r7, #4]
   1983e:	429a      	cmp	r2, r3
   19840:	d204      	bcs.n	1984c <prvTraceStoreKernelCallWithParam+0x5c>
   19842:	4b36      	ldr	r3, [pc, #216]	; (1991c <prvTraceStoreKernelCallWithParam+0x12c>)
   19844:	0018      	movs	r0, r3
   19846:	4b32      	ldr	r3, [pc, #200]	; (19910 <prvTraceStoreKernelCallWithParam+0x120>)
   19848:	4798      	blx	r3
   1984a:	e05b      	b.n	19904 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1984c:	4b34      	ldr	r3, [pc, #208]	; (19920 <prvTraceStoreKernelCallWithParam+0x130>)
   1984e:	681b      	ldr	r3, [r3, #0]
   19850:	2b00      	cmp	r3, #0
   19852:	d004      	beq.n	1985e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19854:	4b33      	ldr	r3, [pc, #204]	; (19924 <prvTraceStoreKernelCallWithParam+0x134>)
   19856:	0018      	movs	r0, r3
   19858:	4b2d      	ldr	r3, [pc, #180]	; (19910 <prvTraceStoreKernelCallWithParam+0x120>)
   1985a:	4798      	blx	r3
		return;
   1985c:	e052      	b.n	19904 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1985e:	f3ef 8310 	mrs	r3, PRIMASK
   19862:	617b      	str	r3, [r7, #20]
  return(result);
   19864:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19866:	627b      	str	r3, [r7, #36]	; 0x24
   19868:	2301      	movs	r3, #1
   1986a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1986c:	69bb      	ldr	r3, [r7, #24]
   1986e:	f383 8810 	msr	PRIMASK, r3
   19872:	4b2b      	ldr	r3, [pc, #172]	; (19920 <prvTraceStoreKernelCallWithParam+0x130>)
   19874:	681b      	ldr	r3, [r3, #0]
   19876:	1c5a      	adds	r2, r3, #1
   19878:	4b29      	ldr	r3, [pc, #164]	; (19920 <prvTraceStoreKernelCallWithParam+0x130>)
   1987a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1987c:	4b26      	ldr	r3, [pc, #152]	; (19918 <prvTraceStoreKernelCallWithParam+0x128>)
   1987e:	681b      	ldr	r3, [r3, #0]
   19880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19882:	2b00      	cmp	r3, #0
   19884:	d034      	beq.n	198f0 <prvTraceStoreKernelCallWithParam+0x100>
   19886:	4b28      	ldr	r3, [pc, #160]	; (19928 <prvTraceStoreKernelCallWithParam+0x138>)
   19888:	781b      	ldrb	r3, [r3, #0]
   1988a:	2b00      	cmp	r3, #0
   1988c:	d030      	beq.n	198f0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1988e:	20ff      	movs	r0, #255	; 0xff
   19890:	4b26      	ldr	r3, [pc, #152]	; (1992c <prvTraceStoreKernelCallWithParam+0x13c>)
   19892:	4798      	blx	r3
   19894:	0003      	movs	r3, r0
   19896:	001a      	movs	r2, r3
   19898:	2323      	movs	r3, #35	; 0x23
   1989a:	18fb      	adds	r3, r7, r3
   1989c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1989e:	683b      	ldr	r3, [r7, #0]
   198a0:	0019      	movs	r1, r3
   198a2:	20ff      	movs	r0, #255	; 0xff
   198a4:	4b22      	ldr	r3, [pc, #136]	; (19930 <prvTraceStoreKernelCallWithParam+0x140>)
   198a6:	4798      	blx	r3
   198a8:	0002      	movs	r2, r0
   198aa:	2322      	movs	r3, #34	; 0x22
   198ac:	18fb      	adds	r3, r7, r3
   198ae:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   198b0:	2321      	movs	r3, #33	; 0x21
   198b2:	18fb      	adds	r3, r7, r3
   198b4:	687a      	ldr	r2, [r7, #4]
   198b6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   198b8:	4b1e      	ldr	r3, [pc, #120]	; (19934 <prvTraceStoreKernelCallWithParam+0x144>)
   198ba:	4798      	blx	r3
   198bc:	0003      	movs	r3, r0
   198be:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   198c0:	69fb      	ldr	r3, [r7, #28]
   198c2:	2b00      	cmp	r3, #0
   198c4:	d014      	beq.n	198f0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   198c6:	69fb      	ldr	r3, [r7, #28]
   198c8:	2223      	movs	r2, #35	; 0x23
   198ca:	18ba      	adds	r2, r7, r2
   198cc:	7812      	ldrb	r2, [r2, #0]
   198ce:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   198d0:	68fb      	ldr	r3, [r7, #12]
   198d2:	b2da      	uxtb	r2, r3
   198d4:	69fb      	ldr	r3, [r7, #28]
   198d6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   198d8:	69fb      	ldr	r3, [r7, #28]
   198da:	2221      	movs	r2, #33	; 0x21
   198dc:	18ba      	adds	r2, r7, r2
   198de:	7812      	ldrb	r2, [r2, #0]
   198e0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   198e2:	69fb      	ldr	r3, [r7, #28]
   198e4:	2222      	movs	r2, #34	; 0x22
   198e6:	18ba      	adds	r2, r7, r2
   198e8:	7812      	ldrb	r2, [r2, #0]
   198ea:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   198ec:	4b12      	ldr	r3, [pc, #72]	; (19938 <prvTraceStoreKernelCallWithParam+0x148>)
   198ee:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   198f0:	4b0b      	ldr	r3, [pc, #44]	; (19920 <prvTraceStoreKernelCallWithParam+0x130>)
   198f2:	681b      	ldr	r3, [r3, #0]
   198f4:	1e5a      	subs	r2, r3, #1
   198f6:	4b0a      	ldr	r3, [pc, #40]	; (19920 <prvTraceStoreKernelCallWithParam+0x130>)
   198f8:	601a      	str	r2, [r3, #0]
   198fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   198fc:	613b      	str	r3, [r7, #16]
   198fe:	693b      	ldr	r3, [r7, #16]
   19900:	f383 8810 	msr	PRIMASK, r3
}
   19904:	46bd      	mov	sp, r7
   19906:	b00a      	add	sp, #40	; 0x28
   19908:	bd80      	pop	{r7, pc}
   1990a:	46c0      	nop			; (mov r8, r8)
   1990c:	000387f0 	.word	0x000387f0
   19910:	0001a565 	.word	0x0001a565
   19914:	00038830 	.word	0x00038830
   19918:	20000df8 	.word	0x20000df8
   1991c:	00038880 	.word	0x00038880
   19920:	20000d50 	.word	0x20000d50
   19924:	000388d0 	.word	0x000388d0
   19928:	20000d5c 	.word	0x20000d5c
   1992c:	0001a779 	.word	0x0001a779
   19930:	0001993d 	.word	0x0001993d
   19934:	0001a11d 	.word	0x0001a11d
   19938:	0001a721 	.word	0x0001a721

0001993c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1993c:	b580      	push	{r7, lr}
   1993e:	b084      	sub	sp, #16
   19940:	af00      	add	r7, sp, #0
   19942:	6078      	str	r0, [r7, #4]
   19944:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19946:	687b      	ldr	r3, [r7, #4]
   19948:	2bff      	cmp	r3, #255	; 0xff
   1994a:	d009      	beq.n	19960 <prvTraceGetParam+0x24>
   1994c:	687b      	ldr	r3, [r7, #4]
   1994e:	4a19      	ldr	r2, [pc, #100]	; (199b4 <prvTraceGetParam+0x78>)
   19950:	4293      	cmp	r3, r2
   19952:	d005      	beq.n	19960 <prvTraceGetParam+0x24>
   19954:	4b18      	ldr	r3, [pc, #96]	; (199b8 <prvTraceGetParam+0x7c>)
   19956:	0018      	movs	r0, r3
   19958:	4b18      	ldr	r3, [pc, #96]	; (199bc <prvTraceGetParam+0x80>)
   1995a:	4798      	blx	r3
   1995c:	683b      	ldr	r3, [r7, #0]
   1995e:	e024      	b.n	199aa <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19960:	683a      	ldr	r2, [r7, #0]
   19962:	687b      	ldr	r3, [r7, #4]
   19964:	429a      	cmp	r2, r3
   19966:	d801      	bhi.n	1996c <prvTraceGetParam+0x30>
	{
		return param;
   19968:	683b      	ldr	r3, [r7, #0]
   1996a:	e01e      	b.n	199aa <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1996c:	4b14      	ldr	r3, [pc, #80]	; (199c0 <prvTraceGetParam+0x84>)
   1996e:	4798      	blx	r3
   19970:	0003      	movs	r3, r0
   19972:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19974:	68fb      	ldr	r3, [r7, #12]
   19976:	2b00      	cmp	r3, #0
   19978:	d014      	beq.n	199a4 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1997a:	68fb      	ldr	r3, [r7, #12]
   1997c:	2201      	movs	r2, #1
   1997e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19980:	687b      	ldr	r3, [r7, #4]
   19982:	43db      	mvns	r3, r3
   19984:	683a      	ldr	r2, [r7, #0]
   19986:	4013      	ands	r3, r2
   19988:	0a1b      	lsrs	r3, r3, #8
   1998a:	b2da      	uxtb	r2, r3
   1998c:	68fb      	ldr	r3, [r7, #12]
   1998e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19990:	687b      	ldr	r3, [r7, #4]
   19992:	43db      	mvns	r3, r3
   19994:	683a      	ldr	r2, [r7, #0]
   19996:	4013      	ands	r3, r2
   19998:	0c1b      	lsrs	r3, r3, #16
   1999a:	b29a      	uxth	r2, r3
   1999c:	68fb      	ldr	r3, [r7, #12]
   1999e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   199a0:	4b08      	ldr	r3, [pc, #32]	; (199c4 <prvTraceGetParam+0x88>)
   199a2:	4798      	blx	r3
		}

		return param & param_max;
   199a4:	683b      	ldr	r3, [r7, #0]
   199a6:	687a      	ldr	r2, [r7, #4]
   199a8:	4013      	ands	r3, r2
	}
}
   199aa:	0018      	movs	r0, r3
   199ac:	46bd      	mov	sp, r7
   199ae:	b004      	add	sp, #16
   199b0:	bd80      	pop	{r7, pc}
   199b2:	46c0      	nop			; (mov r8, r8)
   199b4:	0000ffff 	.word	0x0000ffff
   199b8:	00038908 	.word	0x00038908
   199bc:	0001a565 	.word	0x0001a565
   199c0:	0001a11d 	.word	0x0001a11d
   199c4:	0001a721 	.word	0x0001a721

000199c8 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   199c8:	b580      	push	{r7, lr}
   199ca:	b08a      	sub	sp, #40	; 0x28
   199cc:	af00      	add	r7, sp, #0
   199ce:	6078      	str	r0, [r7, #4]
   199d0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   199d2:	2326      	movs	r3, #38	; 0x26
   199d4:	18fb      	adds	r3, r7, r3
   199d6:	2200      	movs	r2, #0
   199d8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   199da:	687b      	ldr	r3, [r7, #4]
   199dc:	2bfe      	cmp	r3, #254	; 0xfe
   199de:	d904      	bls.n	199ea <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   199e0:	4b2d      	ldr	r3, [pc, #180]	; (19a98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   199e2:	0018      	movs	r0, r3
   199e4:	4b2d      	ldr	r3, [pc, #180]	; (19a9c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   199e6:	4798      	blx	r3
   199e8:	e053      	b.n	19a92 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   199ea:	4b2d      	ldr	r3, [pc, #180]	; (19aa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   199ec:	681b      	ldr	r3, [r3, #0]
   199ee:	2b00      	cmp	r3, #0
   199f0:	d004      	beq.n	199fc <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   199f2:	4b2c      	ldr	r3, [pc, #176]	; (19aa4 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   199f4:	0018      	movs	r0, r3
   199f6:	4b29      	ldr	r3, [pc, #164]	; (19a9c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   199f8:	4798      	blx	r3
		return;
   199fa:	e04a      	b.n	19a92 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   199fc:	f3ef 8310 	mrs	r3, PRIMASK
   19a00:	613b      	str	r3, [r7, #16]
  return(result);
   19a02:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19a04:	623b      	str	r3, [r7, #32]
   19a06:	2301      	movs	r3, #1
   19a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19a0a:	697b      	ldr	r3, [r7, #20]
   19a0c:	f383 8810 	msr	PRIMASK, r3
   19a10:	4b23      	ldr	r3, [pc, #140]	; (19aa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a12:	681b      	ldr	r3, [r3, #0]
   19a14:	1c5a      	adds	r2, r3, #1
   19a16:	4b22      	ldr	r3, [pc, #136]	; (19aa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a18:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19a1a:	4b23      	ldr	r3, [pc, #140]	; (19aa8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19a1c:	681b      	ldr	r3, [r3, #0]
   19a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a20:	2b00      	cmp	r3, #0
   19a22:	d02c      	beq.n	19a7e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19a24:	4b21      	ldr	r3, [pc, #132]	; (19aac <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19a26:	781b      	ldrb	r3, [r3, #0]
   19a28:	2b00      	cmp	r3, #0
   19a2a:	d028      	beq.n	19a7e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19a2c:	20ff      	movs	r0, #255	; 0xff
   19a2e:	4b20      	ldr	r3, [pc, #128]	; (19ab0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19a30:	4798      	blx	r3
   19a32:	0003      	movs	r3, r0
   19a34:	001a      	movs	r2, r3
   19a36:	231f      	movs	r3, #31
   19a38:	18fb      	adds	r3, r7, r3
   19a3a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19a3c:	683b      	ldr	r3, [r7, #0]
   19a3e:	4a1d      	ldr	r2, [pc, #116]	; (19ab4 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19a40:	0019      	movs	r1, r3
   19a42:	0010      	movs	r0, r2
   19a44:	4b1c      	ldr	r3, [pc, #112]	; (19ab8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19a46:	4798      	blx	r3
   19a48:	0002      	movs	r2, r0
   19a4a:	2326      	movs	r3, #38	; 0x26
   19a4c:	18fb      	adds	r3, r7, r3
   19a4e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19a50:	4b1a      	ldr	r3, [pc, #104]	; (19abc <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19a52:	4798      	blx	r3
   19a54:	0003      	movs	r3, r0
   19a56:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19a58:	69bb      	ldr	r3, [r7, #24]
   19a5a:	2b00      	cmp	r3, #0
   19a5c:	d00f      	beq.n	19a7e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19a5e:	69bb      	ldr	r3, [r7, #24]
   19a60:	221f      	movs	r2, #31
   19a62:	18ba      	adds	r2, r7, r2
   19a64:	7812      	ldrb	r2, [r2, #0]
   19a66:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19a68:	687b      	ldr	r3, [r7, #4]
   19a6a:	b2da      	uxtb	r2, r3
   19a6c:	69bb      	ldr	r3, [r7, #24]
   19a6e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19a70:	69bb      	ldr	r3, [r7, #24]
   19a72:	2226      	movs	r2, #38	; 0x26
   19a74:	18ba      	adds	r2, r7, r2
   19a76:	8812      	ldrh	r2, [r2, #0]
   19a78:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19a7a:	4b11      	ldr	r3, [pc, #68]	; (19ac0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19a7c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a7e:	4b08      	ldr	r3, [pc, #32]	; (19aa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a80:	681b      	ldr	r3, [r3, #0]
   19a82:	1e5a      	subs	r2, r3, #1
   19a84:	4b06      	ldr	r3, [pc, #24]	; (19aa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19a86:	601a      	str	r2, [r3, #0]
   19a88:	6a3b      	ldr	r3, [r7, #32]
   19a8a:	60fb      	str	r3, [r7, #12]
   19a8c:	68fb      	ldr	r3, [r7, #12]
   19a8e:	f383 8810 	msr	PRIMASK, r3
}
   19a92:	46bd      	mov	sp, r7
   19a94:	b00a      	add	sp, #40	; 0x28
   19a96:	bd80      	pop	{r7, pc}
   19a98:	00038944 	.word	0x00038944
   19a9c:	0001a565 	.word	0x0001a565
   19aa0:	20000d50 	.word	0x20000d50
   19aa4:	0003899c 	.word	0x0003899c
   19aa8:	20000df8 	.word	0x20000df8
   19aac:	20000d5c 	.word	0x20000d5c
   19ab0:	0001a779 	.word	0x0001a779
   19ab4:	0000ffff 	.word	0x0000ffff
   19ab8:	0001993d 	.word	0x0001993d
   19abc:	0001a11d 	.word	0x0001a11d
   19ac0:	0001a721 	.word	0x0001a721

00019ac4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19ac4:	b590      	push	{r4, r7, lr}
   19ac6:	b089      	sub	sp, #36	; 0x24
   19ac8:	af00      	add	r7, sp, #0
   19aca:	0002      	movs	r2, r0
   19acc:	1dfb      	adds	r3, r7, #7
   19ace:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19ad0:	1dfb      	adds	r3, r7, #7
   19ad2:	781b      	ldrb	r3, [r3, #0]
   19ad4:	2b0f      	cmp	r3, #15
   19ad6:	d904      	bls.n	19ae2 <prvTraceStoreTaskswitch+0x1e>
   19ad8:	4b34      	ldr	r3, [pc, #208]	; (19bac <prvTraceStoreTaskswitch+0xe8>)
   19ada:	0018      	movs	r0, r3
   19adc:	4b34      	ldr	r3, [pc, #208]	; (19bb0 <prvTraceStoreTaskswitch+0xec>)
   19ade:	4798      	blx	r3
   19ae0:	e061      	b.n	19ba6 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19ae2:	f3ef 8310 	mrs	r3, PRIMASK
   19ae6:	60fb      	str	r3, [r7, #12]
  return(result);
   19ae8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19aea:	61fb      	str	r3, [r7, #28]
   19aec:	2301      	movs	r3, #1
   19aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19af0:	693b      	ldr	r3, [r7, #16]
   19af2:	f383 8810 	msr	PRIMASK, r3
   19af6:	4b2f      	ldr	r3, [pc, #188]	; (19bb4 <prvTraceStoreTaskswitch+0xf0>)
   19af8:	681b      	ldr	r3, [r3, #0]
   19afa:	1c5a      	adds	r2, r3, #1
   19afc:	4b2d      	ldr	r3, [pc, #180]	; (19bb4 <prvTraceStoreTaskswitch+0xf0>)
   19afe:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19b00:	4b2d      	ldr	r3, [pc, #180]	; (19bb8 <prvTraceStoreTaskswitch+0xf4>)
   19b02:	781b      	ldrb	r3, [r3, #0]
   19b04:	1dfa      	adds	r2, r7, #7
   19b06:	7812      	ldrb	r2, [r2, #0]
   19b08:	429a      	cmp	r2, r3
   19b0a:	d042      	beq.n	19b92 <prvTraceStoreTaskswitch+0xce>
   19b0c:	4b2b      	ldr	r3, [pc, #172]	; (19bbc <prvTraceStoreTaskswitch+0xf8>)
   19b0e:	681b      	ldr	r3, [r3, #0]
   19b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b12:	2b00      	cmp	r3, #0
   19b14:	d03d      	beq.n	19b92 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19b16:	4b2a      	ldr	r3, [pc, #168]	; (19bc0 <prvTraceStoreTaskswitch+0xfc>)
   19b18:	2200      	movs	r2, #0
   19b1a:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19b1c:	231a      	movs	r3, #26
   19b1e:	18fc      	adds	r4, r7, r3
   19b20:	4b28      	ldr	r3, [pc, #160]	; (19bc4 <prvTraceStoreTaskswitch+0x100>)
   19b22:	0018      	movs	r0, r3
   19b24:	4b28      	ldr	r3, [pc, #160]	; (19bc8 <prvTraceStoreTaskswitch+0x104>)
   19b26:	4798      	blx	r3
   19b28:	0003      	movs	r3, r0
   19b2a:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19b2c:	4b22      	ldr	r3, [pc, #136]	; (19bb8 <prvTraceStoreTaskswitch+0xf4>)
   19b2e:	1dfa      	adds	r2, r7, #7
   19b30:	7812      	ldrb	r2, [r2, #0]
   19b32:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19b34:	2319      	movs	r3, #25
   19b36:	18fb      	adds	r3, r7, r3
   19b38:	4a1f      	ldr	r2, [pc, #124]	; (19bb8 <prvTraceStoreTaskswitch+0xf4>)
   19b3a:	7812      	ldrb	r2, [r2, #0]
   19b3c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19b3e:	4b23      	ldr	r3, [pc, #140]	; (19bcc <prvTraceStoreTaskswitch+0x108>)
   19b40:	4798      	blx	r3
   19b42:	0003      	movs	r3, r0
   19b44:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19b46:	697b      	ldr	r3, [r7, #20]
   19b48:	2b00      	cmp	r3, #0
   19b4a:	d022      	beq.n	19b92 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19b4c:	4b1a      	ldr	r3, [pc, #104]	; (19bb8 <prvTraceStoreTaskswitch+0xf4>)
   19b4e:	781b      	ldrb	r3, [r3, #0]
   19b50:	0019      	movs	r1, r3
   19b52:	2003      	movs	r0, #3
   19b54:	4b1e      	ldr	r3, [pc, #120]	; (19bd0 <prvTraceStoreTaskswitch+0x10c>)
   19b56:	4798      	blx	r3
   19b58:	0003      	movs	r3, r0
   19b5a:	2b01      	cmp	r3, #1
   19b5c:	d103      	bne.n	19b66 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19b5e:	697b      	ldr	r3, [r7, #20]
   19b60:	2207      	movs	r2, #7
   19b62:	701a      	strb	r2, [r3, #0]
   19b64:	e002      	b.n	19b6c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19b66:	697b      	ldr	r3, [r7, #20]
   19b68:	2206      	movs	r2, #6
   19b6a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19b6c:	697b      	ldr	r3, [r7, #20]
   19b6e:	221a      	movs	r2, #26
   19b70:	18ba      	adds	r2, r7, r2
   19b72:	8812      	ldrh	r2, [r2, #0]
   19b74:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19b76:	697b      	ldr	r3, [r7, #20]
   19b78:	2219      	movs	r2, #25
   19b7a:	18ba      	adds	r2, r7, r2
   19b7c:	7812      	ldrb	r2, [r2, #0]
   19b7e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19b80:	4b0d      	ldr	r3, [pc, #52]	; (19bb8 <prvTraceStoreTaskswitch+0xf4>)
   19b82:	781b      	ldrb	r3, [r3, #0]
   19b84:	2201      	movs	r2, #1
   19b86:	0019      	movs	r1, r3
   19b88:	2003      	movs	r0, #3
   19b8a:	4b12      	ldr	r3, [pc, #72]	; (19bd4 <prvTraceStoreTaskswitch+0x110>)
   19b8c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19b8e:	4b12      	ldr	r3, [pc, #72]	; (19bd8 <prvTraceStoreTaskswitch+0x114>)
   19b90:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19b92:	4b08      	ldr	r3, [pc, #32]	; (19bb4 <prvTraceStoreTaskswitch+0xf0>)
   19b94:	681b      	ldr	r3, [r3, #0]
   19b96:	1e5a      	subs	r2, r3, #1
   19b98:	4b06      	ldr	r3, [pc, #24]	; (19bb4 <prvTraceStoreTaskswitch+0xf0>)
   19b9a:	601a      	str	r2, [r3, #0]
   19b9c:	69fb      	ldr	r3, [r7, #28]
   19b9e:	60bb      	str	r3, [r7, #8]
   19ba0:	68bb      	ldr	r3, [r7, #8]
   19ba2:	f383 8810 	msr	PRIMASK, r3
}
   19ba6:	46bd      	mov	sp, r7
   19ba8:	b009      	add	sp, #36	; 0x24
   19baa:	bd90      	pop	{r4, r7, pc}
   19bac:	000389d4 	.word	0x000389d4
   19bb0:	0001a565 	.word	0x0001a565
   19bb4:	20000d50 	.word	0x20000d50
   19bb8:	20000d5c 	.word	0x20000d5c
   19bbc:	20000df8 	.word	0x20000df8
   19bc0:	20000d3c 	.word	0x20000d3c
   19bc4:	0000ffff 	.word	0x0000ffff
   19bc8:	0001a779 	.word	0x0001a779
   19bcc:	0001a11d 	.word	0x0001a11d
   19bd0:	00019dc1 	.word	0x00019dc1
   19bd4:	00019d1d 	.word	0x00019d1d
   19bd8:	0001a721 	.word	0x0001a721

00019bdc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19bdc:	b590      	push	{r4, r7, lr}
   19bde:	b083      	sub	sp, #12
   19be0:	af00      	add	r7, sp, #0
   19be2:	0004      	movs	r4, r0
   19be4:	0008      	movs	r0, r1
   19be6:	0011      	movs	r1, r2
   19be8:	1dfb      	adds	r3, r7, #7
   19bea:	1c22      	adds	r2, r4, #0
   19bec:	701a      	strb	r2, [r3, #0]
   19bee:	1dbb      	adds	r3, r7, #6
   19bf0:	1c02      	adds	r2, r0, #0
   19bf2:	701a      	strb	r2, [r3, #0]
   19bf4:	1d7b      	adds	r3, r7, #5
   19bf6:	1c0a      	adds	r2, r1, #0
   19bf8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19bfa:	1dfb      	adds	r3, r7, #7
   19bfc:	781b      	ldrb	r3, [r3, #0]
   19bfe:	2b08      	cmp	r3, #8
   19c00:	d904      	bls.n	19c0c <prvTraceSetPriorityProperty+0x30>
   19c02:	4b1a      	ldr	r3, [pc, #104]	; (19c6c <prvTraceSetPriorityProperty+0x90>)
   19c04:	0018      	movs	r0, r3
   19c06:	4b1a      	ldr	r3, [pc, #104]	; (19c70 <prvTraceSetPriorityProperty+0x94>)
   19c08:	4798      	blx	r3
   19c0a:	e02c      	b.n	19c66 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19c0c:	4b19      	ldr	r3, [pc, #100]	; (19c74 <prvTraceSetPriorityProperty+0x98>)
   19c0e:	681a      	ldr	r2, [r3, #0]
   19c10:	1dfb      	adds	r3, r7, #7
   19c12:	781b      	ldrb	r3, [r3, #0]
   19c14:	2164      	movs	r1, #100	; 0x64
   19c16:	18d3      	adds	r3, r2, r3
   19c18:	185b      	adds	r3, r3, r1
   19c1a:	781b      	ldrb	r3, [r3, #0]
   19c1c:	1dba      	adds	r2, r7, #6
   19c1e:	7812      	ldrb	r2, [r2, #0]
   19c20:	429a      	cmp	r2, r3
   19c22:	d904      	bls.n	19c2e <prvTraceSetPriorityProperty+0x52>
   19c24:	4b14      	ldr	r3, [pc, #80]	; (19c78 <prvTraceSetPriorityProperty+0x9c>)
   19c26:	0018      	movs	r0, r3
   19c28:	4b11      	ldr	r3, [pc, #68]	; (19c70 <prvTraceSetPriorityProperty+0x94>)
   19c2a:	4798      	blx	r3
   19c2c:	e01b      	b.n	19c66 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19c2e:	4b11      	ldr	r3, [pc, #68]	; (19c74 <prvTraceSetPriorityProperty+0x98>)
   19c30:	681c      	ldr	r4, [r3, #0]
   19c32:	1dfb      	adds	r3, r7, #7
   19c34:	781a      	ldrb	r2, [r3, #0]
   19c36:	1dbb      	adds	r3, r7, #6
   19c38:	781b      	ldrb	r3, [r3, #0]
   19c3a:	0011      	movs	r1, r2
   19c3c:	0018      	movs	r0, r3
   19c3e:	4b0f      	ldr	r3, [pc, #60]	; (19c7c <prvTraceSetPriorityProperty+0xa0>)
   19c40:	4798      	blx	r3
   19c42:	0003      	movs	r3, r0
   19c44:	0018      	movs	r0, r3
   19c46:	4b0b      	ldr	r3, [pc, #44]	; (19c74 <prvTraceSetPriorityProperty+0x98>)
   19c48:	681a      	ldr	r2, [r3, #0]
   19c4a:	1dfb      	adds	r3, r7, #7
   19c4c:	781b      	ldrb	r3, [r3, #0]
   19c4e:	2170      	movs	r1, #112	; 0x70
   19c50:	18d3      	adds	r3, r2, r3
   19c52:	185b      	adds	r3, r3, r1
   19c54:	781b      	ldrb	r3, [r3, #0]
   19c56:	18c3      	adds	r3, r0, r3
   19c58:	3301      	adds	r3, #1
   19c5a:	229c      	movs	r2, #156	; 0x9c
   19c5c:	18e3      	adds	r3, r4, r3
   19c5e:	189b      	adds	r3, r3, r2
   19c60:	1d7a      	adds	r2, r7, #5
   19c62:	7812      	ldrb	r2, [r2, #0]
   19c64:	701a      	strb	r2, [r3, #0]
}
   19c66:	46bd      	mov	sp, r7
   19c68:	b003      	add	sp, #12
   19c6a:	bd90      	pop	{r4, r7, pc}
   19c6c:	00038b68 	.word	0x00038b68
   19c70:	0001a565 	.word	0x0001a565
   19c74:	20000df8 	.word	0x20000df8
   19c78:	00038bb4 	.word	0x00038bb4
   19c7c:	0001a171 	.word	0x0001a171

00019c80 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19c80:	b590      	push	{r4, r7, lr}
   19c82:	b083      	sub	sp, #12
   19c84:	af00      	add	r7, sp, #0
   19c86:	0002      	movs	r2, r0
   19c88:	1dfb      	adds	r3, r7, #7
   19c8a:	701a      	strb	r2, [r3, #0]
   19c8c:	1dbb      	adds	r3, r7, #6
   19c8e:	1c0a      	adds	r2, r1, #0
   19c90:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19c92:	1dfb      	adds	r3, r7, #7
   19c94:	781b      	ldrb	r3, [r3, #0]
   19c96:	2b08      	cmp	r3, #8
   19c98:	d905      	bls.n	19ca6 <prvTraceGetPriorityProperty+0x26>
   19c9a:	4b1b      	ldr	r3, [pc, #108]	; (19d08 <prvTraceGetPriorityProperty+0x88>)
   19c9c:	0018      	movs	r0, r3
   19c9e:	4b1b      	ldr	r3, [pc, #108]	; (19d0c <prvTraceGetPriorityProperty+0x8c>)
   19ca0:	4798      	blx	r3
   19ca2:	2300      	movs	r3, #0
   19ca4:	e02b      	b.n	19cfe <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19ca6:	4b1a      	ldr	r3, [pc, #104]	; (19d10 <prvTraceGetPriorityProperty+0x90>)
   19ca8:	681a      	ldr	r2, [r3, #0]
   19caa:	1dfb      	adds	r3, r7, #7
   19cac:	781b      	ldrb	r3, [r3, #0]
   19cae:	2164      	movs	r1, #100	; 0x64
   19cb0:	18d3      	adds	r3, r2, r3
   19cb2:	185b      	adds	r3, r3, r1
   19cb4:	781b      	ldrb	r3, [r3, #0]
   19cb6:	1dba      	adds	r2, r7, #6
   19cb8:	7812      	ldrb	r2, [r2, #0]
   19cba:	429a      	cmp	r2, r3
   19cbc:	d905      	bls.n	19cca <prvTraceGetPriorityProperty+0x4a>
   19cbe:	4b15      	ldr	r3, [pc, #84]	; (19d14 <prvTraceGetPriorityProperty+0x94>)
   19cc0:	0018      	movs	r0, r3
   19cc2:	4b12      	ldr	r3, [pc, #72]	; (19d0c <prvTraceGetPriorityProperty+0x8c>)
   19cc4:	4798      	blx	r3
   19cc6:	2300      	movs	r3, #0
   19cc8:	e019      	b.n	19cfe <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19cca:	4b11      	ldr	r3, [pc, #68]	; (19d10 <prvTraceGetPriorityProperty+0x90>)
   19ccc:	681c      	ldr	r4, [r3, #0]
   19cce:	1dfb      	adds	r3, r7, #7
   19cd0:	781a      	ldrb	r2, [r3, #0]
   19cd2:	1dbb      	adds	r3, r7, #6
   19cd4:	781b      	ldrb	r3, [r3, #0]
   19cd6:	0011      	movs	r1, r2
   19cd8:	0018      	movs	r0, r3
   19cda:	4b0f      	ldr	r3, [pc, #60]	; (19d18 <prvTraceGetPriorityProperty+0x98>)
   19cdc:	4798      	blx	r3
   19cde:	0003      	movs	r3, r0
   19ce0:	0018      	movs	r0, r3
   19ce2:	4b0b      	ldr	r3, [pc, #44]	; (19d10 <prvTraceGetPriorityProperty+0x90>)
   19ce4:	681a      	ldr	r2, [r3, #0]
   19ce6:	1dfb      	adds	r3, r7, #7
   19ce8:	781b      	ldrb	r3, [r3, #0]
   19cea:	2170      	movs	r1, #112	; 0x70
   19cec:	18d3      	adds	r3, r2, r3
   19cee:	185b      	adds	r3, r3, r1
   19cf0:	781b      	ldrb	r3, [r3, #0]
   19cf2:	18c3      	adds	r3, r0, r3
   19cf4:	3301      	adds	r3, #1
   19cf6:	229c      	movs	r2, #156	; 0x9c
   19cf8:	18e3      	adds	r3, r4, r3
   19cfa:	189b      	adds	r3, r3, r2
   19cfc:	781b      	ldrb	r3, [r3, #0]
}
   19cfe:	0018      	movs	r0, r3
   19d00:	46bd      	mov	sp, r7
   19d02:	b003      	add	sp, #12
   19d04:	bd90      	pop	{r4, r7, pc}
   19d06:	46c0      	nop			; (mov r8, r8)
   19d08:	00038bf4 	.word	0x00038bf4
   19d0c:	0001a565 	.word	0x0001a565
   19d10:	20000df8 	.word	0x20000df8
   19d14:	00038c40 	.word	0x00038c40
   19d18:	0001a171 	.word	0x0001a171

00019d1c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19d1c:	b590      	push	{r4, r7, lr}
   19d1e:	b083      	sub	sp, #12
   19d20:	af00      	add	r7, sp, #0
   19d22:	0004      	movs	r4, r0
   19d24:	0008      	movs	r0, r1
   19d26:	0011      	movs	r1, r2
   19d28:	1dfb      	adds	r3, r7, #7
   19d2a:	1c22      	adds	r2, r4, #0
   19d2c:	701a      	strb	r2, [r3, #0]
   19d2e:	1dbb      	adds	r3, r7, #6
   19d30:	1c02      	adds	r2, r0, #0
   19d32:	701a      	strb	r2, [r3, #0]
   19d34:	1d7b      	adds	r3, r7, #5
   19d36:	1c0a      	adds	r2, r1, #0
   19d38:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19d3a:	1dfb      	adds	r3, r7, #7
   19d3c:	781b      	ldrb	r3, [r3, #0]
   19d3e:	2b08      	cmp	r3, #8
   19d40:	d904      	bls.n	19d4c <prvTraceSetObjectState+0x30>
   19d42:	4b1a      	ldr	r3, [pc, #104]	; (19dac <prvTraceSetObjectState+0x90>)
   19d44:	0018      	movs	r0, r3
   19d46:	4b1a      	ldr	r3, [pc, #104]	; (19db0 <prvTraceSetObjectState+0x94>)
   19d48:	4798      	blx	r3
   19d4a:	e02b      	b.n	19da4 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19d4c:	4b19      	ldr	r3, [pc, #100]	; (19db4 <prvTraceSetObjectState+0x98>)
   19d4e:	681a      	ldr	r2, [r3, #0]
   19d50:	1dfb      	adds	r3, r7, #7
   19d52:	781b      	ldrb	r3, [r3, #0]
   19d54:	2164      	movs	r1, #100	; 0x64
   19d56:	18d3      	adds	r3, r2, r3
   19d58:	185b      	adds	r3, r3, r1
   19d5a:	781b      	ldrb	r3, [r3, #0]
   19d5c:	1dba      	adds	r2, r7, #6
   19d5e:	7812      	ldrb	r2, [r2, #0]
   19d60:	429a      	cmp	r2, r3
   19d62:	d904      	bls.n	19d6e <prvTraceSetObjectState+0x52>
   19d64:	4b14      	ldr	r3, [pc, #80]	; (19db8 <prvTraceSetObjectState+0x9c>)
   19d66:	0018      	movs	r0, r3
   19d68:	4b11      	ldr	r3, [pc, #68]	; (19db0 <prvTraceSetObjectState+0x94>)
   19d6a:	4798      	blx	r3
   19d6c:	e01a      	b.n	19da4 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19d6e:	4b11      	ldr	r3, [pc, #68]	; (19db4 <prvTraceSetObjectState+0x98>)
   19d70:	681c      	ldr	r4, [r3, #0]
   19d72:	1dfb      	adds	r3, r7, #7
   19d74:	781a      	ldrb	r2, [r3, #0]
   19d76:	1dbb      	adds	r3, r7, #6
   19d78:	781b      	ldrb	r3, [r3, #0]
   19d7a:	0011      	movs	r1, r2
   19d7c:	0018      	movs	r0, r3
   19d7e:	4b0f      	ldr	r3, [pc, #60]	; (19dbc <prvTraceSetObjectState+0xa0>)
   19d80:	4798      	blx	r3
   19d82:	0003      	movs	r3, r0
   19d84:	0018      	movs	r0, r3
   19d86:	4b0b      	ldr	r3, [pc, #44]	; (19db4 <prvTraceSetObjectState+0x98>)
   19d88:	681a      	ldr	r2, [r3, #0]
   19d8a:	1dfb      	adds	r3, r7, #7
   19d8c:	781b      	ldrb	r3, [r3, #0]
   19d8e:	2170      	movs	r1, #112	; 0x70
   19d90:	18d3      	adds	r3, r2, r3
   19d92:	185b      	adds	r3, r3, r1
   19d94:	781b      	ldrb	r3, [r3, #0]
   19d96:	18c3      	adds	r3, r0, r3
   19d98:	229c      	movs	r2, #156	; 0x9c
   19d9a:	18e3      	adds	r3, r4, r3
   19d9c:	189b      	adds	r3, r3, r2
   19d9e:	1d7a      	adds	r2, r7, #5
   19da0:	7812      	ldrb	r2, [r2, #0]
   19da2:	701a      	strb	r2, [r3, #0]
}
   19da4:	46bd      	mov	sp, r7
   19da6:	b003      	add	sp, #12
   19da8:	bd90      	pop	{r4, r7, pc}
   19daa:	46c0      	nop			; (mov r8, r8)
   19dac:	00038c80 	.word	0x00038c80
   19db0:	0001a565 	.word	0x0001a565
   19db4:	20000df8 	.word	0x20000df8
   19db8:	00038cc4 	.word	0x00038cc4
   19dbc:	0001a171 	.word	0x0001a171

00019dc0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19dc0:	b590      	push	{r4, r7, lr}
   19dc2:	b083      	sub	sp, #12
   19dc4:	af00      	add	r7, sp, #0
   19dc6:	0002      	movs	r2, r0
   19dc8:	1dfb      	adds	r3, r7, #7
   19dca:	701a      	strb	r2, [r3, #0]
   19dcc:	1dbb      	adds	r3, r7, #6
   19dce:	1c0a      	adds	r2, r1, #0
   19dd0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19dd2:	1dfb      	adds	r3, r7, #7
   19dd4:	781b      	ldrb	r3, [r3, #0]
   19dd6:	2b08      	cmp	r3, #8
   19dd8:	d905      	bls.n	19de6 <prvTraceGetObjectState+0x26>
   19dda:	4b1a      	ldr	r3, [pc, #104]	; (19e44 <prvTraceGetObjectState+0x84>)
   19ddc:	0018      	movs	r0, r3
   19dde:	4b1a      	ldr	r3, [pc, #104]	; (19e48 <prvTraceGetObjectState+0x88>)
   19de0:	4798      	blx	r3
   19de2:	2300      	movs	r3, #0
   19de4:	e02a      	b.n	19e3c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19de6:	4b19      	ldr	r3, [pc, #100]	; (19e4c <prvTraceGetObjectState+0x8c>)
   19de8:	681a      	ldr	r2, [r3, #0]
   19dea:	1dfb      	adds	r3, r7, #7
   19dec:	781b      	ldrb	r3, [r3, #0]
   19dee:	2164      	movs	r1, #100	; 0x64
   19df0:	18d3      	adds	r3, r2, r3
   19df2:	185b      	adds	r3, r3, r1
   19df4:	781b      	ldrb	r3, [r3, #0]
   19df6:	1dba      	adds	r2, r7, #6
   19df8:	7812      	ldrb	r2, [r2, #0]
   19dfa:	429a      	cmp	r2, r3
   19dfc:	d905      	bls.n	19e0a <prvTraceGetObjectState+0x4a>
   19dfe:	4b14      	ldr	r3, [pc, #80]	; (19e50 <prvTraceGetObjectState+0x90>)
   19e00:	0018      	movs	r0, r3
   19e02:	4b11      	ldr	r3, [pc, #68]	; (19e48 <prvTraceGetObjectState+0x88>)
   19e04:	4798      	blx	r3
   19e06:	2300      	movs	r3, #0
   19e08:	e018      	b.n	19e3c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19e0a:	4b10      	ldr	r3, [pc, #64]	; (19e4c <prvTraceGetObjectState+0x8c>)
   19e0c:	681c      	ldr	r4, [r3, #0]
   19e0e:	1dfb      	adds	r3, r7, #7
   19e10:	781a      	ldrb	r2, [r3, #0]
   19e12:	1dbb      	adds	r3, r7, #6
   19e14:	781b      	ldrb	r3, [r3, #0]
   19e16:	0011      	movs	r1, r2
   19e18:	0018      	movs	r0, r3
   19e1a:	4b0e      	ldr	r3, [pc, #56]	; (19e54 <prvTraceGetObjectState+0x94>)
   19e1c:	4798      	blx	r3
   19e1e:	0003      	movs	r3, r0
   19e20:	0018      	movs	r0, r3
   19e22:	4b0a      	ldr	r3, [pc, #40]	; (19e4c <prvTraceGetObjectState+0x8c>)
   19e24:	681a      	ldr	r2, [r3, #0]
   19e26:	1dfb      	adds	r3, r7, #7
   19e28:	781b      	ldrb	r3, [r3, #0]
   19e2a:	2170      	movs	r1, #112	; 0x70
   19e2c:	18d3      	adds	r3, r2, r3
   19e2e:	185b      	adds	r3, r3, r1
   19e30:	781b      	ldrb	r3, [r3, #0]
   19e32:	18c3      	adds	r3, r0, r3
   19e34:	229c      	movs	r2, #156	; 0x9c
   19e36:	18e3      	adds	r3, r4, r3
   19e38:	189b      	adds	r3, r3, r2
   19e3a:	781b      	ldrb	r3, [r3, #0]
}
   19e3c:	0018      	movs	r0, r3
   19e3e:	46bd      	mov	sp, r7
   19e40:	b003      	add	sp, #12
   19e42:	bd90      	pop	{r4, r7, pc}
   19e44:	00038d00 	.word	0x00038d00
   19e48:	0001a565 	.word	0x0001a565
   19e4c:	20000df8 	.word	0x20000df8
   19e50:	00038d44 	.word	0x00038d44
   19e54:	0001a171 	.word	0x0001a171

00019e58 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19e58:	b590      	push	{r4, r7, lr}
   19e5a:	b083      	sub	sp, #12
   19e5c:	af00      	add	r7, sp, #0
   19e5e:	0002      	movs	r2, r0
   19e60:	1dfb      	adds	r3, r7, #7
   19e62:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19e64:	4b11      	ldr	r3, [pc, #68]	; (19eac <prvTraceSetTaskInstanceFinished+0x54>)
   19e66:	681b      	ldr	r3, [r3, #0]
   19e68:	2267      	movs	r2, #103	; 0x67
   19e6a:	5c9b      	ldrb	r3, [r3, r2]
   19e6c:	1dfa      	adds	r2, r7, #7
   19e6e:	7812      	ldrb	r2, [r2, #0]
   19e70:	429a      	cmp	r2, r3
   19e72:	d904      	bls.n	19e7e <prvTraceSetTaskInstanceFinished+0x26>
   19e74:	4b0e      	ldr	r3, [pc, #56]	; (19eb0 <prvTraceSetTaskInstanceFinished+0x58>)
   19e76:	0018      	movs	r0, r3
   19e78:	4b0e      	ldr	r3, [pc, #56]	; (19eb4 <prvTraceSetTaskInstanceFinished+0x5c>)
   19e7a:	4798      	blx	r3
   19e7c:	e013      	b.n	19ea6 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19e7e:	4b0b      	ldr	r3, [pc, #44]	; (19eac <prvTraceSetTaskInstanceFinished+0x54>)
   19e80:	681c      	ldr	r4, [r3, #0]
   19e82:	1dfb      	adds	r3, r7, #7
   19e84:	781b      	ldrb	r3, [r3, #0]
   19e86:	2103      	movs	r1, #3
   19e88:	0018      	movs	r0, r3
   19e8a:	4b0b      	ldr	r3, [pc, #44]	; (19eb8 <prvTraceSetTaskInstanceFinished+0x60>)
   19e8c:	4798      	blx	r3
   19e8e:	0003      	movs	r3, r0
   19e90:	0019      	movs	r1, r3
   19e92:	4b06      	ldr	r3, [pc, #24]	; (19eac <prvTraceSetTaskInstanceFinished+0x54>)
   19e94:	681b      	ldr	r3, [r3, #0]
   19e96:	2273      	movs	r2, #115	; 0x73
   19e98:	5c9b      	ldrb	r3, [r3, r2]
   19e9a:	18cb      	adds	r3, r1, r3
   19e9c:	229c      	movs	r2, #156	; 0x9c
   19e9e:	18e3      	adds	r3, r4, r3
   19ea0:	189b      	adds	r3, r3, r2
   19ea2:	2200      	movs	r2, #0
   19ea4:	701a      	strb	r2, [r3, #0]
#endif
}
   19ea6:	46bd      	mov	sp, r7
   19ea8:	b003      	add	sp, #12
   19eaa:	bd90      	pop	{r4, r7, pc}
   19eac:	20000df8 	.word	0x20000df8
   19eb0:	00038d80 	.word	0x00038d80
   19eb4:	0001a565 	.word	0x0001a565
   19eb8:	0001a171 	.word	0x0001a171

00019ebc <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19ebc:	b580      	push	{r7, lr}
   19ebe:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   19ec0:	4b75      	ldr	r3, [pc, #468]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19ec2:	681b      	ldr	r3, [r3, #0]
   19ec4:	2b00      	cmp	r3, #0
   19ec6:	d103      	bne.n	19ed0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19ec8:	4b73      	ldr	r3, [pc, #460]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19eca:	4a74      	ldr	r2, [pc, #464]	; (1a09c <prvTraceInitTraceData+0x1e0>)
   19ecc:	601a      	str	r2, [r3, #0]
   19ece:	e006      	b.n	19ede <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19ed0:	4b71      	ldr	r3, [pc, #452]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19ed2:	681b      	ldr	r3, [r3, #0]
   19ed4:	781b      	ldrb	r3, [r3, #0]
   19ed6:	b2db      	uxtb	r3, r3
   19ed8:	2b01      	cmp	r3, #1
   19eda:	d100      	bne.n	19ede <prvTraceInitTraceData+0x22>
   19edc:	e0d8      	b.n	1a090 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19ede:	4b70      	ldr	r3, [pc, #448]	; (1a0a0 <prvTraceInitTraceData+0x1e4>)
   19ee0:	681a      	ldr	r2, [r3, #0]
   19ee2:	4b70      	ldr	r3, [pc, #448]	; (1a0a4 <prvTraceInitTraceData+0x1e8>)
   19ee4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   19ee6:	4b6c      	ldr	r3, [pc, #432]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19ee8:	6818      	ldr	r0, [r3, #0]
   19eea:	23bd      	movs	r3, #189	; 0xbd
   19eec:	011b      	lsls	r3, r3, #4
   19eee:	001a      	movs	r2, r3
   19ef0:	2100      	movs	r1, #0
   19ef2:	4b6d      	ldr	r3, [pc, #436]	; (1a0a8 <prvTraceInitTraceData+0x1ec>)
   19ef4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   19ef6:	4b68      	ldr	r3, [pc, #416]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19ef8:	681b      	ldr	r3, [r3, #0]
   19efa:	4a6c      	ldr	r2, [pc, #432]	; (1a0ac <prvTraceInitTraceData+0x1f0>)
   19efc:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19efe:	4b66      	ldr	r3, [pc, #408]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f00:	681b      	ldr	r3, [r3, #0]
   19f02:	2205      	movs	r2, #5
   19f04:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   19f06:	4b64      	ldr	r3, [pc, #400]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f08:	681b      	ldr	r3, [r3, #0]
   19f0a:	2200      	movs	r2, #0
   19f0c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19f0e:	4b62      	ldr	r3, [pc, #392]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f10:	681b      	ldr	r3, [r3, #0]
   19f12:	22bd      	movs	r2, #189	; 0xbd
   19f14:	0112      	lsls	r2, r2, #4
   19f16:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19f18:	4b5f      	ldr	r3, [pc, #380]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f1a:	681b      	ldr	r3, [r3, #0]
   19f1c:	2296      	movs	r2, #150	; 0x96
   19f1e:	0052      	lsls	r2, r2, #1
   19f20:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   19f22:	4b5d      	ldr	r3, [pc, #372]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f24:	681b      	ldr	r3, [r3, #0]
   19f26:	4a62      	ldr	r2, [pc, #392]	; (1a0b0 <prvTraceInitTraceData+0x1f4>)
   19f28:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19f2a:	4b5b      	ldr	r3, [pc, #364]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f2c:	681b      	ldr	r3, [r3, #0]
   19f2e:	2200      	movs	r2, #0
   19f30:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   19f32:	4b59      	ldr	r3, [pc, #356]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f34:	681b      	ldr	r3, [r3, #0]
   19f36:	2200      	movs	r2, #0
   19f38:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19f3a:	4b5e      	ldr	r3, [pc, #376]	; (1a0b4 <prvTraceInitTraceData+0x1f8>)
   19f3c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19f3e:	4b56      	ldr	r3, [pc, #344]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f40:	681b      	ldr	r3, [r3, #0]
   19f42:	4a5d      	ldr	r2, [pc, #372]	; (1a0b8 <prvTraceInitTraceData+0x1fc>)
   19f44:	495d      	ldr	r1, [pc, #372]	; (1a0bc <prvTraceInitTraceData+0x200>)
   19f46:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19f48:	4b53      	ldr	r3, [pc, #332]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f4a:	681a      	ldr	r2, [r3, #0]
   19f4c:	23ac      	movs	r3, #172	; 0xac
   19f4e:	00db      	lsls	r3, r3, #3
   19f50:	21c8      	movs	r1, #200	; 0xc8
   19f52:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19f54:	4b50      	ldr	r3, [pc, #320]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f56:	681b      	ldr	r3, [r3, #0]
   19f58:	4a59      	ldr	r2, [pc, #356]	; (1a0c0 <prvTraceInitTraceData+0x204>)
   19f5a:	2101      	movs	r1, #1
   19f5c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19f5e:	4b4e      	ldr	r3, [pc, #312]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f60:	681a      	ldr	r2, [r3, #0]
   19f62:	23d7      	movs	r3, #215	; 0xd7
   19f64:	00db      	lsls	r3, r3, #3
   19f66:	4957      	ldr	r1, [pc, #348]	; (1a0c4 <prvTraceInitTraceData+0x208>)
   19f68:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19f6a:	4b4b      	ldr	r3, [pc, #300]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f6c:	681b      	ldr	r3, [r3, #0]
   19f6e:	4a56      	ldr	r2, [pc, #344]	; (1a0c8 <prvTraceInitTraceData+0x20c>)
   19f70:	4694      	mov	ip, r2
   19f72:	4463      	add	r3, ip
   19f74:	4955      	ldr	r1, [pc, #340]	; (1a0cc <prvTraceInitTraceData+0x210>)
   19f76:	2250      	movs	r2, #80	; 0x50
   19f78:	0018      	movs	r0, r3
   19f7a:	4b55      	ldr	r3, [pc, #340]	; (1a0d0 <prvTraceInitTraceData+0x214>)
   19f7c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19f7e:	4b46      	ldr	r3, [pc, #280]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f80:	681b      	ldr	r3, [r3, #0]
   19f82:	4a54      	ldr	r2, [pc, #336]	; (1a0d4 <prvTraceInitTraceData+0x218>)
   19f84:	4954      	ldr	r1, [pc, #336]	; (1a0d8 <prvTraceInitTraceData+0x21c>)
   19f86:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19f88:	4b43      	ldr	r3, [pc, #268]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f8a:	681b      	ldr	r3, [r3, #0]
   19f8c:	4a53      	ldr	r2, [pc, #332]	; (1a0dc <prvTraceInitTraceData+0x220>)
   19f8e:	210a      	movs	r1, #10
   19f90:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19f92:	4b41      	ldr	r3, [pc, #260]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f94:	681b      	ldr	r3, [r3, #0]
   19f96:	4a52      	ldr	r2, [pc, #328]	; (1a0e0 <prvTraceInitTraceData+0x224>)
   19f98:	210b      	movs	r1, #11
   19f9a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19f9c:	4b3e      	ldr	r3, [pc, #248]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19f9e:	681b      	ldr	r3, [r3, #0]
   19fa0:	4a50      	ldr	r2, [pc, #320]	; (1a0e4 <prvTraceInitTraceData+0x228>)
   19fa2:	210c      	movs	r1, #12
   19fa4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19fa6:	4b3c      	ldr	r3, [pc, #240]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fa8:	681b      	ldr	r3, [r3, #0]
   19faa:	4a4f      	ldr	r2, [pc, #316]	; (1a0e8 <prvTraceInitTraceData+0x22c>)
   19fac:	210d      	movs	r1, #13
   19fae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19fb0:	4b39      	ldr	r3, [pc, #228]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fb2:	681b      	ldr	r3, [r3, #0]
   19fb4:	4a4d      	ldr	r2, [pc, #308]	; (1a0ec <prvTraceInitTraceData+0x230>)
   19fb6:	2171      	movs	r1, #113	; 0x71
   19fb8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19fba:	4b37      	ldr	r3, [pc, #220]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fbc:	681b      	ldr	r3, [r3, #0]
   19fbe:	4a4c      	ldr	r2, [pc, #304]	; (1a0f0 <prvTraceInitTraceData+0x234>)
   19fc0:	2172      	movs	r1, #114	; 0x72
   19fc2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19fc4:	4b34      	ldr	r3, [pc, #208]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fc6:	681b      	ldr	r3, [r3, #0]
   19fc8:	4a4a      	ldr	r2, [pc, #296]	; (1a0f4 <prvTraceInitTraceData+0x238>)
   19fca:	2173      	movs	r1, #115	; 0x73
   19fcc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19fce:	4b32      	ldr	r3, [pc, #200]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fd0:	681b      	ldr	r3, [r3, #0]
   19fd2:	4a49      	ldr	r2, [pc, #292]	; (1a0f8 <prvTraceInitTraceData+0x23c>)
   19fd4:	2174      	movs	r1, #116	; 0x74
   19fd6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19fd8:	4b2f      	ldr	r3, [pc, #188]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fda:	681b      	ldr	r3, [r3, #0]
   19fdc:	4a47      	ldr	r2, [pc, #284]	; (1a0fc <prvTraceInitTraceData+0x240>)
   19fde:	21f1      	movs	r1, #241	; 0xf1
   19fe0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19fe2:	4b2d      	ldr	r3, [pc, #180]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fe4:	681b      	ldr	r3, [r3, #0]
   19fe6:	4a46      	ldr	r2, [pc, #280]	; (1a100 <prvTraceInitTraceData+0x244>)
   19fe8:	21f2      	movs	r1, #242	; 0xf2
   19fea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19fec:	4b2a      	ldr	r3, [pc, #168]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	4a44      	ldr	r2, [pc, #272]	; (1a104 <prvTraceInitTraceData+0x248>)
   19ff2:	21f3      	movs	r1, #243	; 0xf3
   19ff4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19ff6:	4b28      	ldr	r3, [pc, #160]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   19ff8:	681b      	ldr	r3, [r3, #0]
   19ffa:	4a43      	ldr	r2, [pc, #268]	; (1a108 <prvTraceInitTraceData+0x24c>)
   19ffc:	21f4      	movs	r1, #244	; 0xf4
   19ffe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1a000:	4b42      	ldr	r3, [pc, #264]	; (1a10c <prvTraceInitTraceData+0x250>)
   1a002:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1a004:	4b24      	ldr	r3, [pc, #144]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a006:	681b      	ldr	r3, [r3, #0]
   1a008:	22f4      	movs	r2, #244	; 0xf4
   1a00a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1a00c:	4b22      	ldr	r3, [pc, #136]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a00e:	681b      	ldr	r3, [r3, #0]
   1a010:	22f3      	movs	r2, #243	; 0xf3
   1a012:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1a014:	4b20      	ldr	r3, [pc, #128]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a016:	681b      	ldr	r3, [r3, #0]
   1a018:	22f2      	movs	r2, #242	; 0xf2
   1a01a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1a01c:	4b1e      	ldr	r3, [pc, #120]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a01e:	681b      	ldr	r3, [r3, #0]
   1a020:	22f1      	movs	r2, #241	; 0xf1
   1a022:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1a024:	4b1c      	ldr	r3, [pc, #112]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a026:	681b      	ldr	r3, [r3, #0]
   1a028:	2274      	movs	r2, #116	; 0x74
   1a02a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1a02c:	4b1a      	ldr	r3, [pc, #104]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a02e:	681b      	ldr	r3, [r3, #0]
   1a030:	2273      	movs	r2, #115	; 0x73
   1a032:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1a034:	4b18      	ldr	r3, [pc, #96]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a036:	681b      	ldr	r3, [r3, #0]
   1a038:	2272      	movs	r2, #114	; 0x72
   1a03a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1a03c:	4b16      	ldr	r3, [pc, #88]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a03e:	681b      	ldr	r3, [r3, #0]
   1a040:	2271      	movs	r2, #113	; 0x71
   1a042:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1a044:	4b14      	ldr	r3, [pc, #80]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	2204      	movs	r2, #4
   1a04a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a04c:	4b12      	ldr	r3, [pc, #72]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a04e:	681b      	ldr	r3, [r3, #0]
   1a050:	2203      	movs	r2, #3
   1a052:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a054:	4b10      	ldr	r3, [pc, #64]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a056:	681b      	ldr	r3, [r3, #0]
   1a058:	2202      	movs	r2, #2
   1a05a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a05c:	4b0e      	ldr	r3, [pc, #56]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a05e:	681b      	ldr	r3, [r3, #0]
   1a060:	2201      	movs	r2, #1
   1a062:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a064:	4b2a      	ldr	r3, [pc, #168]	; (1a110 <prvTraceInitTraceData+0x254>)
   1a066:	681b      	ldr	r3, [r3, #0]
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d012      	beq.n	1a092 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a06c:	4b0a      	ldr	r3, [pc, #40]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a06e:	681b      	ldr	r3, [r3, #0]
   1a070:	4a15      	ldr	r2, [pc, #84]	; (1a0c8 <prvTraceInitTraceData+0x20c>)
   1a072:	1898      	adds	r0, r3, r2
   1a074:	4b26      	ldr	r3, [pc, #152]	; (1a110 <prvTraceInitTraceData+0x254>)
   1a076:	681b      	ldr	r3, [r3, #0]
   1a078:	2250      	movs	r2, #80	; 0x50
   1a07a:	0019      	movs	r1, r3
   1a07c:	4b14      	ldr	r3, [pc, #80]	; (1a0d0 <prvTraceInitTraceData+0x214>)
   1a07e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a080:	4b05      	ldr	r3, [pc, #20]	; (1a098 <prvTraceInitTraceData+0x1dc>)
   1a082:	681b      	ldr	r3, [r3, #0]
   1a084:	4a23      	ldr	r2, [pc, #140]	; (1a114 <prvTraceInitTraceData+0x258>)
   1a086:	2101      	movs	r1, #1
   1a088:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a08a:	4b23      	ldr	r3, [pc, #140]	; (1a118 <prvTraceInitTraceData+0x25c>)
   1a08c:	4798      	blx	r3
   1a08e:	e000      	b.n	1a092 <prvTraceInitTraceData+0x1d6>
			return;
   1a090:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a092:	46bd      	mov	sp, r7
   1a094:	bd80      	pop	{r7, pc}
   1a096:	46c0      	nop			; (mov r8, r8)
   1a098:	20000df8 	.word	0x20000df8
   1a09c:	20004a90 	.word	0x20004a90
   1a0a0:	e000e018 	.word	0xe000e018
   1a0a4:	20005660 	.word	0x20005660
   1a0a8:	000356ef 	.word	0x000356ef
   1a0ac:	00001aa1 	.word	0x00001aa1
   1a0b0:	f0f0f0f0 	.word	0xf0f0f0f0
   1a0b4:	00019021 	.word	0x00019021
   1a0b8:	0000055c 	.word	0x0000055c
   1a0bc:	f1f1f1f1 	.word	0xf1f1f1f1
   1a0c0:	00000564 	.word	0x00000564
   1a0c4:	f2f2f2f2 	.word	0xf2f2f2f2
   1a0c8:	000006bc 	.word	0x000006bc
   1a0cc:	00038dc8 	.word	0x00038dc8
   1a0d0:	0001a431 	.word	0x0001a431
   1a0d4:	0000070c 	.word	0x0000070c
   1a0d8:	f3f3f3f3 	.word	0xf3f3f3f3
   1a0dc:	00000bc4 	.word	0x00000bc4
   1a0e0:	00000bc5 	.word	0x00000bc5
   1a0e4:	00000bc6 	.word	0x00000bc6
   1a0e8:	00000bc7 	.word	0x00000bc7
   1a0ec:	00000bc8 	.word	0x00000bc8
   1a0f0:	00000bc9 	.word	0x00000bc9
   1a0f4:	00000bca 	.word	0x00000bca
   1a0f8:	00000bcb 	.word	0x00000bcb
   1a0fc:	00000bcc 	.word	0x00000bcc
   1a100:	00000bcd 	.word	0x00000bcd
   1a104:	00000bce 	.word	0x00000bce
   1a108:	00000bcf 	.word	0x00000bcf
   1a10c:	000191c1 	.word	0x000191c1
   1a110:	20000d58 	.word	0x20000d58
   1a114:	000006b4 	.word	0x000006b4
   1a118:	00019429 	.word	0x00019429

0001a11c <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a11c:	b580      	push	{r7, lr}
   1a11e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a120:	4b10      	ldr	r3, [pc, #64]	; (1a164 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a122:	681b      	ldr	r3, [r3, #0]
   1a124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a126:	2b00      	cmp	r3, #0
   1a128:	d101      	bne.n	1a12e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a12a:	2300      	movs	r3, #0
   1a12c:	e017      	b.n	1a15e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a12e:	4b0d      	ldr	r3, [pc, #52]	; (1a164 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a130:	681b      	ldr	r3, [r3, #0]
   1a132:	69da      	ldr	r2, [r3, #28]
   1a134:	232c      	movs	r3, #44	; 0x2c
   1a136:	33ff      	adds	r3, #255	; 0xff
   1a138:	429a      	cmp	r2, r3
   1a13a:	d905      	bls.n	1a148 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a13c:	4b0a      	ldr	r3, [pc, #40]	; (1a168 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a13e:	0018      	movs	r0, r3
   1a140:	4b0a      	ldr	r3, [pc, #40]	; (1a16c <prvTraceNextFreeEventBufferSlot+0x50>)
   1a142:	4798      	blx	r3
		return NULL;
   1a144:	2300      	movs	r3, #0
   1a146:	e00a      	b.n	1a15e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a148:	4b06      	ldr	r3, [pc, #24]	; (1a164 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a14a:	681a      	ldr	r2, [r3, #0]
   1a14c:	4b05      	ldr	r3, [pc, #20]	; (1a164 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a14e:	681b      	ldr	r3, [r3, #0]
   1a150:	69db      	ldr	r3, [r3, #28]
   1a152:	009b      	lsls	r3, r3, #2
   1a154:	21e2      	movs	r1, #226	; 0xe2
   1a156:	00c9      	lsls	r1, r1, #3
   1a158:	468c      	mov	ip, r1
   1a15a:	4463      	add	r3, ip
   1a15c:	18d3      	adds	r3, r2, r3
}
   1a15e:	0018      	movs	r0, r3
   1a160:	46bd      	mov	sp, r7
   1a162:	bd80      	pop	{r7, pc}
   1a164:	20000df8 	.word	0x20000df8
   1a168:	00038ddc 	.word	0x00038ddc
   1a16c:	0001a565 	.word	0x0001a565

0001a170 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a170:	b580      	push	{r7, lr}
   1a172:	b082      	sub	sp, #8
   1a174:	af00      	add	r7, sp, #0
   1a176:	0002      	movs	r2, r0
   1a178:	1dfb      	adds	r3, r7, #7
   1a17a:	701a      	strb	r2, [r3, #0]
   1a17c:	1dbb      	adds	r3, r7, #6
   1a17e:	1c0a      	adds	r2, r1, #0
   1a180:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a182:	1dbb      	adds	r3, r7, #6
   1a184:	781b      	ldrb	r3, [r3, #0]
   1a186:	2b08      	cmp	r3, #8
   1a188:	d905      	bls.n	1a196 <uiIndexOfObject+0x26>
   1a18a:	4b2a      	ldr	r3, [pc, #168]	; (1a234 <uiIndexOfObject+0xc4>)
   1a18c:	0018      	movs	r0, r3
   1a18e:	4b2a      	ldr	r3, [pc, #168]	; (1a238 <uiIndexOfObject+0xc8>)
   1a190:	4798      	blx	r3
   1a192:	2300      	movs	r3, #0
   1a194:	e049      	b.n	1a22a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a196:	1dfb      	adds	r3, r7, #7
   1a198:	781b      	ldrb	r3, [r3, #0]
   1a19a:	2b00      	cmp	r3, #0
   1a19c:	d00b      	beq.n	1a1b6 <uiIndexOfObject+0x46>
   1a19e:	4b27      	ldr	r3, [pc, #156]	; (1a23c <uiIndexOfObject+0xcc>)
   1a1a0:	681a      	ldr	r2, [r3, #0]
   1a1a2:	1dbb      	adds	r3, r7, #6
   1a1a4:	781b      	ldrb	r3, [r3, #0]
   1a1a6:	2164      	movs	r1, #100	; 0x64
   1a1a8:	18d3      	adds	r3, r2, r3
   1a1aa:	185b      	adds	r3, r3, r1
   1a1ac:	781b      	ldrb	r3, [r3, #0]
   1a1ae:	1dfa      	adds	r2, r7, #7
   1a1b0:	7812      	ldrb	r2, [r2, #0]
   1a1b2:	429a      	cmp	r2, r3
   1a1b4:	d905      	bls.n	1a1c2 <uiIndexOfObject+0x52>
   1a1b6:	4b22      	ldr	r3, [pc, #136]	; (1a240 <uiIndexOfObject+0xd0>)
   1a1b8:	0018      	movs	r0, r3
   1a1ba:	4b1f      	ldr	r3, [pc, #124]	; (1a238 <uiIndexOfObject+0xc8>)
   1a1bc:	4798      	blx	r3
   1a1be:	2300      	movs	r3, #0
   1a1c0:	e033      	b.n	1a22a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a1c2:	1dbb      	adds	r3, r7, #6
   1a1c4:	781b      	ldrb	r3, [r3, #0]
   1a1c6:	2b08      	cmp	r3, #8
   1a1c8:	d82a      	bhi.n	1a220 <uiIndexOfObject+0xb0>
   1a1ca:	1dfb      	adds	r3, r7, #7
   1a1cc:	781b      	ldrb	r3, [r3, #0]
   1a1ce:	2b00      	cmp	r3, #0
   1a1d0:	d026      	beq.n	1a220 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a1d2:	4b1a      	ldr	r3, [pc, #104]	; (1a23c <uiIndexOfObject+0xcc>)
   1a1d4:	681a      	ldr	r2, [r3, #0]
   1a1d6:	1dbb      	adds	r3, r7, #6
   1a1d8:	781b      	ldrb	r3, [r3, #0]
   1a1da:	2164      	movs	r1, #100	; 0x64
   1a1dc:	18d3      	adds	r3, r2, r3
   1a1de:	185b      	adds	r3, r3, r1
   1a1e0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a1e2:	1dfa      	adds	r2, r7, #7
   1a1e4:	7812      	ldrb	r2, [r2, #0]
   1a1e6:	429a      	cmp	r2, r3
   1a1e8:	d81a      	bhi.n	1a220 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a1ea:	4b14      	ldr	r3, [pc, #80]	; (1a23c <uiIndexOfObject+0xcc>)
   1a1ec:	681a      	ldr	r2, [r3, #0]
   1a1ee:	1dbb      	adds	r3, r7, #6
   1a1f0:	781b      	ldrb	r3, [r3, #0]
   1a1f2:	3340      	adds	r3, #64	; 0x40
   1a1f4:	005b      	lsls	r3, r3, #1
   1a1f6:	18d3      	adds	r3, r2, r3
   1a1f8:	3308      	adds	r3, #8
   1a1fa:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a1fc:	4b0f      	ldr	r3, [pc, #60]	; (1a23c <uiIndexOfObject+0xcc>)
   1a1fe:	6819      	ldr	r1, [r3, #0]
   1a200:	1dbb      	adds	r3, r7, #6
   1a202:	781b      	ldrb	r3, [r3, #0]
   1a204:	207c      	movs	r0, #124	; 0x7c
   1a206:	18cb      	adds	r3, r1, r3
   1a208:	181b      	adds	r3, r3, r0
   1a20a:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a20c:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a20e:	1df9      	adds	r1, r7, #7
   1a210:	7809      	ldrb	r1, [r1, #0]
   1a212:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a214:	b289      	uxth	r1, r1
   1a216:	434b      	muls	r3, r1
   1a218:	b29b      	uxth	r3, r3
   1a21a:	18d3      	adds	r3, r2, r3
   1a21c:	b29b      	uxth	r3, r3
   1a21e:	e004      	b.n	1a22a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a220:	4b08      	ldr	r3, [pc, #32]	; (1a244 <uiIndexOfObject+0xd4>)
   1a222:	0018      	movs	r0, r3
   1a224:	4b04      	ldr	r3, [pc, #16]	; (1a238 <uiIndexOfObject+0xc8>)
   1a226:	4798      	blx	r3
	return 0;
   1a228:	2300      	movs	r3, #0
}
   1a22a:	0018      	movs	r0, r3
   1a22c:	46bd      	mov	sp, r7
   1a22e:	b002      	add	sp, #8
   1a230:	bd80      	pop	{r7, pc}
   1a232:	46c0      	nop			; (mov r8, r8)
   1a234:	00038e04 	.word	0x00038e04
   1a238:	0001a565 	.word	0x0001a565
   1a23c:	20000df8 	.word	0x20000df8
   1a240:	00038e44 	.word	0x00038e44
   1a244:	00038e84 	.word	0x00038e84

0001a248 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a248:	b580      	push	{r7, lr}
   1a24a:	b088      	sub	sp, #32
   1a24c:	af00      	add	r7, sp, #0
   1a24e:	0002      	movs	r2, r0
   1a250:	1dfb      	adds	r3, r7, #7
   1a252:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a254:	4b5a      	ldr	r3, [pc, #360]	; (1a3c0 <prvTraceGetObjectHandle+0x178>)
   1a256:	681b      	ldr	r3, [r3, #0]
   1a258:	2b00      	cmp	r3, #0
   1a25a:	d105      	bne.n	1a268 <prvTraceGetObjectHandle+0x20>
   1a25c:	4b59      	ldr	r3, [pc, #356]	; (1a3c4 <prvTraceGetObjectHandle+0x17c>)
   1a25e:	0018      	movs	r0, r3
   1a260:	4b59      	ldr	r3, [pc, #356]	; (1a3c8 <prvTraceGetObjectHandle+0x180>)
   1a262:	4798      	blx	r3
   1a264:	2300      	movs	r3, #0
   1a266:	e0a7      	b.n	1a3b8 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a268:	1dfb      	adds	r3, r7, #7
   1a26a:	781b      	ldrb	r3, [r3, #0]
   1a26c:	2b08      	cmp	r3, #8
   1a26e:	d905      	bls.n	1a27c <prvTraceGetObjectHandle+0x34>
   1a270:	4b56      	ldr	r3, [pc, #344]	; (1a3cc <prvTraceGetObjectHandle+0x184>)
   1a272:	0018      	movs	r0, r3
   1a274:	4b54      	ldr	r3, [pc, #336]	; (1a3c8 <prvTraceGetObjectHandle+0x180>)
   1a276:	4798      	blx	r3
   1a278:	2300      	movs	r3, #0
   1a27a:	e09d      	b.n	1a3b8 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a27c:	f3ef 8310 	mrs	r3, PRIMASK
   1a280:	60fb      	str	r3, [r7, #12]
  return(result);
   1a282:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a284:	61bb      	str	r3, [r7, #24]
   1a286:	2301      	movs	r3, #1
   1a288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a28a:	693b      	ldr	r3, [r7, #16]
   1a28c:	f383 8810 	msr	PRIMASK, r3
   1a290:	4b4f      	ldr	r3, [pc, #316]	; (1a3d0 <prvTraceGetObjectHandle+0x188>)
   1a292:	681b      	ldr	r3, [r3, #0]
   1a294:	1c5a      	adds	r2, r3, #1
   1a296:	4b4e      	ldr	r3, [pc, #312]	; (1a3d0 <prvTraceGetObjectHandle+0x188>)
   1a298:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a29a:	1dfb      	adds	r3, r7, #7
   1a29c:	781a      	ldrb	r2, [r3, #0]
   1a29e:	4b4d      	ldr	r3, [pc, #308]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a2a0:	0052      	lsls	r2, r2, #1
   1a2a2:	5ad3      	ldrh	r3, [r2, r3]
   1a2a4:	001a      	movs	r2, r3
   1a2a6:	4b4c      	ldr	r3, [pc, #304]	; (1a3d8 <prvTraceGetObjectHandle+0x190>)
   1a2a8:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a2aa:	4b4b      	ldr	r3, [pc, #300]	; (1a3d8 <prvTraceGetObjectHandle+0x190>)
   1a2ac:	681b      	ldr	r3, [r3, #0]
   1a2ae:	4a49      	ldr	r2, [pc, #292]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a2b0:	2148      	movs	r1, #72	; 0x48
   1a2b2:	18d3      	adds	r3, r2, r3
   1a2b4:	185b      	adds	r3, r3, r1
   1a2b6:	781b      	ldrb	r3, [r3, #0]
   1a2b8:	2b00      	cmp	r3, #0
   1a2ba:	d117      	bne.n	1a2ec <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a2bc:	4b46      	ldr	r3, [pc, #280]	; (1a3d8 <prvTraceGetObjectHandle+0x190>)
   1a2be:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a2c0:	4b45      	ldr	r3, [pc, #276]	; (1a3d8 <prvTraceGetObjectHandle+0x190>)
   1a2c2:	681b      	ldr	r3, [r3, #0]
   1a2c4:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a2c6:	1dfb      	adds	r3, r7, #7
   1a2c8:	781b      	ldrb	r3, [r3, #0]
   1a2ca:	4842      	ldr	r0, [pc, #264]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a2cc:	3308      	adds	r3, #8
   1a2ce:	005b      	lsls	r3, r3, #1
   1a2d0:	18c3      	adds	r3, r0, r3
   1a2d2:	3302      	adds	r3, #2
   1a2d4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a2d6:	b2db      	uxtb	r3, r3
   1a2d8:	1acb      	subs	r3, r1, r3
   1a2da:	b2db      	uxtb	r3, r3
   1a2dc:	3301      	adds	r3, #1
   1a2de:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a2e0:	4b3c      	ldr	r3, [pc, #240]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a2e2:	2148      	movs	r1, #72	; 0x48
   1a2e4:	189b      	adds	r3, r3, r2
   1a2e6:	185b      	adds	r3, r3, r1
   1a2e8:	1c02      	adds	r2, r0, #0
   1a2ea:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a2ec:	4b3a      	ldr	r3, [pc, #232]	; (1a3d8 <prvTraceGetObjectHandle+0x190>)
   1a2ee:	681a      	ldr	r2, [r3, #0]
   1a2f0:	231f      	movs	r3, #31
   1a2f2:	18fb      	adds	r3, r7, r3
   1a2f4:	4937      	ldr	r1, [pc, #220]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a2f6:	2048      	movs	r0, #72	; 0x48
   1a2f8:	188a      	adds	r2, r1, r2
   1a2fa:	1812      	adds	r2, r2, r0
   1a2fc:	7812      	ldrb	r2, [r2, #0]
   1a2fe:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a300:	1dfb      	adds	r3, r7, #7
   1a302:	781a      	ldrb	r2, [r3, #0]
   1a304:	4b33      	ldr	r3, [pc, #204]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a306:	0052      	lsls	r2, r2, #1
   1a308:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a30a:	1dfb      	adds	r3, r7, #7
   1a30c:	781b      	ldrb	r3, [r3, #0]
   1a30e:	4931      	ldr	r1, [pc, #196]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a310:	3310      	adds	r3, #16
   1a312:	005b      	lsls	r3, r3, #1
   1a314:	18cb      	adds	r3, r1, r3
   1a316:	3304      	adds	r3, #4
   1a318:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a31a:	429a      	cmp	r2, r3
   1a31c:	d90d      	bls.n	1a33a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a31e:	1dfb      	adds	r3, r7, #7
   1a320:	781b      	ldrb	r3, [r3, #0]
   1a322:	0018      	movs	r0, r3
   1a324:	4b2d      	ldr	r3, [pc, #180]	; (1a3dc <prvTraceGetObjectHandle+0x194>)
   1a326:	4798      	blx	r3
   1a328:	0003      	movs	r3, r0
   1a32a:	0018      	movs	r0, r3
   1a32c:	4b26      	ldr	r3, [pc, #152]	; (1a3c8 <prvTraceGetObjectHandle+0x180>)
   1a32e:	4798      	blx	r3
		handle = 0;
   1a330:	231f      	movs	r3, #31
   1a332:	18fb      	adds	r3, r7, r3
   1a334:	2200      	movs	r2, #0
   1a336:	701a      	strb	r2, [r3, #0]
   1a338:	e031      	b.n	1a39e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a33a:	1dfb      	adds	r3, r7, #7
   1a33c:	781b      	ldrb	r3, [r3, #0]
   1a33e:	4a25      	ldr	r2, [pc, #148]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a340:	0059      	lsls	r1, r3, #1
   1a342:	5a8a      	ldrh	r2, [r1, r2]
   1a344:	3201      	adds	r2, #1
   1a346:	b291      	uxth	r1, r2
   1a348:	4a22      	ldr	r2, [pc, #136]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a34a:	005b      	lsls	r3, r3, #1
   1a34c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a34e:	1dfb      	adds	r3, r7, #7
   1a350:	781a      	ldrb	r2, [r3, #0]
   1a352:	4b20      	ldr	r3, [pc, #128]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a354:	0052      	lsls	r2, r2, #1
   1a356:	5ad3      	ldrh	r3, [r2, r3]
   1a358:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a35a:	1dfb      	adds	r3, r7, #7
   1a35c:	781b      	ldrb	r3, [r3, #0]
   1a35e:	4a1d      	ldr	r2, [pc, #116]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a360:	3308      	adds	r3, #8
   1a362:	005b      	lsls	r3, r3, #1
   1a364:	18d3      	adds	r3, r2, r3
   1a366:	3302      	adds	r3, #2
   1a368:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a36a:	1acb      	subs	r3, r1, r3
   1a36c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a36e:	1dfb      	adds	r3, r7, #7
   1a370:	781b      	ldrb	r3, [r3, #0]
   1a372:	4a18      	ldr	r2, [pc, #96]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a374:	3318      	adds	r3, #24
   1a376:	005b      	lsls	r3, r3, #1
   1a378:	18d3      	adds	r3, r2, r3
   1a37a:	3306      	adds	r3, #6
   1a37c:	881b      	ldrh	r3, [r3, #0]
   1a37e:	001a      	movs	r2, r3
		if (hndCount >
   1a380:	697b      	ldr	r3, [r7, #20]
   1a382:	429a      	cmp	r2, r3
   1a384:	da0b      	bge.n	1a39e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a386:	1dfb      	adds	r3, r7, #7
   1a388:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a38a:	697a      	ldr	r2, [r7, #20]
   1a38c:	b2d2      	uxtb	r2, r2
   1a38e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a390:	4a10      	ldr	r2, [pc, #64]	; (1a3d4 <prvTraceGetObjectHandle+0x18c>)
   1a392:	3318      	adds	r3, #24
   1a394:	005b      	lsls	r3, r3, #1
   1a396:	18d3      	adds	r3, r2, r3
   1a398:	3306      	adds	r3, #6
   1a39a:	1c0a      	adds	r2, r1, #0
   1a39c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a39e:	4b0c      	ldr	r3, [pc, #48]	; (1a3d0 <prvTraceGetObjectHandle+0x188>)
   1a3a0:	681b      	ldr	r3, [r3, #0]
   1a3a2:	1e5a      	subs	r2, r3, #1
   1a3a4:	4b0a      	ldr	r3, [pc, #40]	; (1a3d0 <prvTraceGetObjectHandle+0x188>)
   1a3a6:	601a      	str	r2, [r3, #0]
   1a3a8:	69bb      	ldr	r3, [r7, #24]
   1a3aa:	60bb      	str	r3, [r7, #8]
   1a3ac:	68bb      	ldr	r3, [r7, #8]
   1a3ae:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a3b2:	231f      	movs	r3, #31
   1a3b4:	18fb      	adds	r3, r7, r3
   1a3b6:	781b      	ldrb	r3, [r3, #0]
}
   1a3b8:	0018      	movs	r0, r3
   1a3ba:	46bd      	mov	sp, r7
   1a3bc:	b008      	add	sp, #32
   1a3be:	bd80      	pop	{r7, pc}
   1a3c0:	20000df8 	.word	0x20000df8
   1a3c4:	000382e4 	.word	0x000382e4
   1a3c8:	0001a565 	.word	0x0001a565
   1a3cc:	00038ec4 	.word	0x00038ec4
   1a3d0:	20000d50 	.word	0x20000d50
   1a3d4:	20000d68 	.word	0x20000d68
   1a3d8:	20000dfc 	.word	0x20000dfc
   1a3dc:	00019285 	.word	0x00019285

0001a3e0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a3e0:	b590      	push	{r4, r7, lr}
   1a3e2:	b085      	sub	sp, #20
   1a3e4:	af00      	add	r7, sp, #0
   1a3e6:	0002      	movs	r2, r0
   1a3e8:	1dfb      	adds	r3, r7, #7
   1a3ea:	701a      	strb	r2, [r3, #0]
   1a3ec:	1dbb      	adds	r3, r7, #6
   1a3ee:	1c0a      	adds	r2, r1, #0
   1a3f0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a3f2:	230e      	movs	r3, #14
   1a3f4:	18fc      	adds	r4, r7, r3
   1a3f6:	1dfb      	adds	r3, r7, #7
   1a3f8:	781a      	ldrb	r2, [r3, #0]
   1a3fa:	1dbb      	adds	r3, r7, #6
   1a3fc:	781b      	ldrb	r3, [r3, #0]
   1a3fe:	0011      	movs	r1, r2
   1a400:	0018      	movs	r0, r3
   1a402:	4b09      	ldr	r3, [pc, #36]	; (1a428 <prvMarkObjectAsUsed+0x48>)
   1a404:	4798      	blx	r3
   1a406:	0003      	movs	r3, r0
   1a408:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a40a:	4b08      	ldr	r3, [pc, #32]	; (1a42c <prvMarkObjectAsUsed+0x4c>)
   1a40c:	681a      	ldr	r2, [r3, #0]
   1a40e:	230e      	movs	r3, #14
   1a410:	18fb      	adds	r3, r7, r3
   1a412:	881b      	ldrh	r3, [r3, #0]
   1a414:	219c      	movs	r1, #156	; 0x9c
   1a416:	18d3      	adds	r3, r2, r3
   1a418:	185b      	adds	r3, r3, r1
   1a41a:	2201      	movs	r2, #1
   1a41c:	701a      	strb	r2, [r3, #0]
}
   1a41e:	46c0      	nop			; (mov r8, r8)
   1a420:	46bd      	mov	sp, r7
   1a422:	b005      	add	sp, #20
   1a424:	bd90      	pop	{r4, r7, pc}
   1a426:	46c0      	nop			; (mov r8, r8)
   1a428:	0001a171 	.word	0x0001a171
   1a42c:	20000df8 	.word	0x20000df8

0001a430 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a430:	b580      	push	{r7, lr}
   1a432:	b086      	sub	sp, #24
   1a434:	af00      	add	r7, sp, #0
   1a436:	60f8      	str	r0, [r7, #12]
   1a438:	60b9      	str	r1, [r7, #8]
   1a43a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a43c:	2300      	movs	r3, #0
   1a43e:	617b      	str	r3, [r7, #20]
   1a440:	e010      	b.n	1a464 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a442:	68fa      	ldr	r2, [r7, #12]
   1a444:	697b      	ldr	r3, [r7, #20]
   1a446:	18d3      	adds	r3, r2, r3
   1a448:	68b9      	ldr	r1, [r7, #8]
   1a44a:	697a      	ldr	r2, [r7, #20]
   1a44c:	188a      	adds	r2, r1, r2
   1a44e:	7812      	ldrb	r2, [r2, #0]
   1a450:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a452:	68ba      	ldr	r2, [r7, #8]
   1a454:	697b      	ldr	r3, [r7, #20]
   1a456:	18d3      	adds	r3, r2, r3
   1a458:	781b      	ldrb	r3, [r3, #0]
   1a45a:	2b00      	cmp	r3, #0
   1a45c:	d007      	beq.n	1a46e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a45e:	697b      	ldr	r3, [r7, #20]
   1a460:	3301      	adds	r3, #1
   1a462:	617b      	str	r3, [r7, #20]
   1a464:	697a      	ldr	r2, [r7, #20]
   1a466:	687b      	ldr	r3, [r7, #4]
   1a468:	429a      	cmp	r2, r3
   1a46a:	d3ea      	bcc.n	1a442 <prvStrncpy+0x12>
			break;
	}
}
   1a46c:	e000      	b.n	1a470 <prvStrncpy+0x40>
			break;
   1a46e:	46c0      	nop			; (mov r8, r8)
}
   1a470:	46c0      	nop			; (mov r8, r8)
   1a472:	46bd      	mov	sp, r7
   1a474:	b006      	add	sp, #24
   1a476:	bd80      	pop	{r7, pc}

0001a478 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a478:	b580      	push	{r7, lr}
   1a47a:	b082      	sub	sp, #8
   1a47c:	af00      	add	r7, sp, #0
   1a47e:	603a      	str	r2, [r7, #0]
   1a480:	1dfb      	adds	r3, r7, #7
   1a482:	1c02      	adds	r2, r0, #0
   1a484:	701a      	strb	r2, [r3, #0]
   1a486:	1dbb      	adds	r3, r7, #6
   1a488:	1c0a      	adds	r2, r1, #0
   1a48a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a48c:	683b      	ldr	r3, [r7, #0]
   1a48e:	2b00      	cmp	r3, #0
   1a490:	d104      	bne.n	1a49c <prvTraceSetObjectName+0x24>
   1a492:	4b2a      	ldr	r3, [pc, #168]	; (1a53c <prvTraceSetObjectName+0xc4>)
   1a494:	0018      	movs	r0, r3
   1a496:	4b2a      	ldr	r3, [pc, #168]	; (1a540 <prvTraceSetObjectName+0xc8>)
   1a498:	4798      	blx	r3
   1a49a:	e04b      	b.n	1a534 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a49c:	1dfb      	adds	r3, r7, #7
   1a49e:	781b      	ldrb	r3, [r3, #0]
   1a4a0:	2b08      	cmp	r3, #8
   1a4a2:	d904      	bls.n	1a4ae <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a4a4:	4b27      	ldr	r3, [pc, #156]	; (1a544 <prvTraceSetObjectName+0xcc>)
   1a4a6:	0018      	movs	r0, r3
   1a4a8:	4b25      	ldr	r3, [pc, #148]	; (1a540 <prvTraceSetObjectName+0xc8>)
   1a4aa:	4798      	blx	r3
		return;
   1a4ac:	e042      	b.n	1a534 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a4ae:	1dbb      	adds	r3, r7, #6
   1a4b0:	781b      	ldrb	r3, [r3, #0]
   1a4b2:	2b00      	cmp	r3, #0
   1a4b4:	d104      	bne.n	1a4c0 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a4b6:	4b24      	ldr	r3, [pc, #144]	; (1a548 <prvTraceSetObjectName+0xd0>)
   1a4b8:	0018      	movs	r0, r3
   1a4ba:	4b21      	ldr	r3, [pc, #132]	; (1a540 <prvTraceSetObjectName+0xc8>)
   1a4bc:	4798      	blx	r3
		return;
   1a4be:	e039      	b.n	1a534 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a4c0:	4b22      	ldr	r3, [pc, #136]	; (1a54c <prvTraceSetObjectName+0xd4>)
   1a4c2:	681a      	ldr	r2, [r3, #0]
   1a4c4:	1dfb      	adds	r3, r7, #7
   1a4c6:	781b      	ldrb	r3, [r3, #0]
   1a4c8:	2164      	movs	r1, #100	; 0x64
   1a4ca:	18d3      	adds	r3, r2, r3
   1a4cc:	185b      	adds	r3, r3, r1
   1a4ce:	781b      	ldrb	r3, [r3, #0]
   1a4d0:	1dba      	adds	r2, r7, #6
   1a4d2:	7812      	ldrb	r2, [r2, #0]
   1a4d4:	429a      	cmp	r2, r3
   1a4d6:	d909      	bls.n	1a4ec <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a4d8:	1dfb      	adds	r3, r7, #7
   1a4da:	781b      	ldrb	r3, [r3, #0]
   1a4dc:	0018      	movs	r0, r3
   1a4de:	4b1c      	ldr	r3, [pc, #112]	; (1a550 <prvTraceSetObjectName+0xd8>)
   1a4e0:	4798      	blx	r3
   1a4e2:	0003      	movs	r3, r0
   1a4e4:	0018      	movs	r0, r3
   1a4e6:	4b16      	ldr	r3, [pc, #88]	; (1a540 <prvTraceSetObjectName+0xc8>)
   1a4e8:	4798      	blx	r3
   1a4ea:	e023      	b.n	1a534 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a4ec:	1dfb      	adds	r3, r7, #7
   1a4ee:	781a      	ldrb	r2, [r3, #0]
   1a4f0:	1dbb      	adds	r3, r7, #6
   1a4f2:	781b      	ldrb	r3, [r3, #0]
   1a4f4:	0011      	movs	r1, r2
   1a4f6:	0018      	movs	r0, r3
   1a4f8:	4b16      	ldr	r3, [pc, #88]	; (1a554 <prvTraceSetObjectName+0xdc>)
   1a4fa:	4798      	blx	r3
   1a4fc:	0003      	movs	r3, r0
   1a4fe:	001a      	movs	r2, r3
   1a500:	4b15      	ldr	r3, [pc, #84]	; (1a558 <prvTraceSetObjectName+0xe0>)
   1a502:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a504:	4b15      	ldr	r3, [pc, #84]	; (1a55c <prvTraceSetObjectName+0xe4>)
   1a506:	681b      	ldr	r3, [r3, #0]
   1a508:	2b00      	cmp	r3, #0
   1a50a:	d113      	bne.n	1a534 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a50c:	4b0f      	ldr	r3, [pc, #60]	; (1a54c <prvTraceSetObjectName+0xd4>)
   1a50e:	681a      	ldr	r2, [r3, #0]
   1a510:	4b11      	ldr	r3, [pc, #68]	; (1a558 <prvTraceSetObjectName+0xe0>)
   1a512:	881b      	ldrh	r3, [r3, #0]
   1a514:	3398      	adds	r3, #152	; 0x98
   1a516:	18d3      	adds	r3, r2, r3
   1a518:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a51a:	4b0c      	ldr	r3, [pc, #48]	; (1a54c <prvTraceSetObjectName+0xd4>)
   1a51c:	681a      	ldr	r2, [r3, #0]
   1a51e:	1dfb      	adds	r3, r7, #7
   1a520:	781b      	ldrb	r3, [r3, #0]
   1a522:	2170      	movs	r1, #112	; 0x70
   1a524:	18d3      	adds	r3, r2, r3
   1a526:	185b      	adds	r3, r3, r1
   1a528:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a52a:	001a      	movs	r2, r3
   1a52c:	683b      	ldr	r3, [r7, #0]
   1a52e:	0019      	movs	r1, r3
   1a530:	4b0b      	ldr	r3, [pc, #44]	; (1a560 <prvTraceSetObjectName+0xe8>)
   1a532:	4798      	blx	r3
		}
	}
}
   1a534:	46bd      	mov	sp, r7
   1a536:	b002      	add	sp, #8
   1a538:	bd80      	pop	{r7, pc}
   1a53a:	46c0      	nop			; (mov r8, r8)
   1a53c:	00038fc8 	.word	0x00038fc8
   1a540:	0001a565 	.word	0x0001a565
   1a544:	00038ffc 	.word	0x00038ffc
   1a548:	0003902c 	.word	0x0003902c
   1a54c:	20000df8 	.word	0x20000df8
   1a550:	00019285 	.word	0x00019285
   1a554:	0001a171 	.word	0x0001a171
   1a558:	20000e00 	.word	0x20000e00
   1a55c:	20000d58 	.word	0x20000d58
   1a560:	0001a431 	.word	0x0001a431

0001a564 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a564:	b580      	push	{r7, lr}
   1a566:	b082      	sub	sp, #8
   1a568:	af00      	add	r7, sp, #0
   1a56a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a56c:	4b11      	ldr	r3, [pc, #68]	; (1a5b4 <prvTraceError+0x50>)
   1a56e:	681b      	ldr	r3, [r3, #0]
   1a570:	2b00      	cmp	r3, #0
   1a572:	d001      	beq.n	1a578 <prvTraceError+0x14>
	{
		vTraceStop();
   1a574:	4b10      	ldr	r3, [pc, #64]	; (1a5b8 <prvTraceError+0x54>)
   1a576:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a578:	4b10      	ldr	r3, [pc, #64]	; (1a5bc <prvTraceError+0x58>)
   1a57a:	681b      	ldr	r3, [r3, #0]
   1a57c:	2b00      	cmp	r3, #0
   1a57e:	d115      	bne.n	1a5ac <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a580:	4b0e      	ldr	r3, [pc, #56]	; (1a5bc <prvTraceError+0x58>)
   1a582:	687a      	ldr	r2, [r7, #4]
   1a584:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a586:	4b0b      	ldr	r3, [pc, #44]	; (1a5b4 <prvTraceError+0x50>)
   1a588:	681b      	ldr	r3, [r3, #0]
   1a58a:	2b00      	cmp	r3, #0
   1a58c:	d00e      	beq.n	1a5ac <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a58e:	4b09      	ldr	r3, [pc, #36]	; (1a5b4 <prvTraceError+0x50>)
   1a590:	681b      	ldr	r3, [r3, #0]
   1a592:	4a0b      	ldr	r2, [pc, #44]	; (1a5c0 <prvTraceError+0x5c>)
   1a594:	1898      	adds	r0, r3, r2
   1a596:	4b09      	ldr	r3, [pc, #36]	; (1a5bc <prvTraceError+0x58>)
   1a598:	681b      	ldr	r3, [r3, #0]
   1a59a:	2250      	movs	r2, #80	; 0x50
   1a59c:	0019      	movs	r1, r3
   1a59e:	4b09      	ldr	r3, [pc, #36]	; (1a5c4 <prvTraceError+0x60>)
   1a5a0:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a5a2:	4b04      	ldr	r3, [pc, #16]	; (1a5b4 <prvTraceError+0x50>)
   1a5a4:	681b      	ldr	r3, [r3, #0]
   1a5a6:	4a08      	ldr	r2, [pc, #32]	; (1a5c8 <prvTraceError+0x64>)
   1a5a8:	2101      	movs	r1, #1
   1a5aa:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a5ac:	46c0      	nop			; (mov r8, r8)
   1a5ae:	46bd      	mov	sp, r7
   1a5b0:	b002      	add	sp, #8
   1a5b2:	bd80      	pop	{r7, pc}
   1a5b4:	20000df8 	.word	0x20000df8
   1a5b8:	00019429 	.word	0x00019429
   1a5bc:	20000d58 	.word	0x20000d58
   1a5c0:	000006bc 	.word	0x000006bc
   1a5c4:	0001a431 	.word	0x0001a431
   1a5c8:	000006b4 	.word	0x000006b4

0001a5cc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a5cc:	b580      	push	{r7, lr}
   1a5ce:	b086      	sub	sp, #24
   1a5d0:	af00      	add	r7, sp, #0
   1a5d2:	0002      	movs	r2, r0
   1a5d4:	1dfb      	adds	r3, r7, #7
   1a5d6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a5d8:	2300      	movs	r3, #0
   1a5da:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a5dc:	2300      	movs	r3, #0
   1a5de:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a5e0:	1dfb      	adds	r3, r7, #7
   1a5e2:	781b      	ldrb	r3, [r3, #0]
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d000      	beq.n	1a5ea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a5e8:	e089      	b.n	1a6fe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a5ea:	4b49      	ldr	r3, [pc, #292]	; (1a710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a5ec:	0018      	movs	r0, r3
   1a5ee:	4b49      	ldr	r3, [pc, #292]	; (1a714 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a5f0:	4798      	blx	r3
   1a5f2:	e08a      	b.n	1a70a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a5f4:	4b48      	ldr	r3, [pc, #288]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a5f6:	681b      	ldr	r3, [r3, #0]
   1a5f8:	69da      	ldr	r2, [r3, #28]
   1a5fa:	697b      	ldr	r3, [r7, #20]
   1a5fc:	18d3      	adds	r3, r2, r3
   1a5fe:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a600:	4b45      	ldr	r3, [pc, #276]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a602:	6819      	ldr	r1, [r3, #0]
   1a604:	693b      	ldr	r3, [r7, #16]
   1a606:	009a      	lsls	r2, r3, #2
   1a608:	23e2      	movs	r3, #226	; 0xe2
   1a60a:	00db      	lsls	r3, r3, #3
   1a60c:	188a      	adds	r2, r1, r2
   1a60e:	18d3      	adds	r3, r2, r3
   1a610:	781b      	ldrb	r3, [r3, #0]
   1a612:	2b98      	cmp	r3, #152	; 0x98
   1a614:	d934      	bls.n	1a680 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a616:	4b40      	ldr	r3, [pc, #256]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a618:	6819      	ldr	r1, [r3, #0]
   1a61a:	693b      	ldr	r3, [r7, #16]
   1a61c:	009a      	lsls	r2, r3, #2
   1a61e:	23e2      	movs	r3, #226	; 0xe2
   1a620:	00db      	lsls	r3, r3, #3
   1a622:	188a      	adds	r2, r1, r2
   1a624:	18d3      	adds	r3, r2, r3
   1a626:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a628:	2ba7      	cmp	r3, #167	; 0xa7
   1a62a:	d829      	bhi.n	1a680 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a62c:	4b3a      	ldr	r3, [pc, #232]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a62e:	6819      	ldr	r1, [r3, #0]
   1a630:	693b      	ldr	r3, [r7, #16]
   1a632:	009a      	lsls	r2, r3, #2
   1a634:	23e2      	movs	r3, #226	; 0xe2
   1a636:	00db      	lsls	r3, r3, #3
   1a638:	188a      	adds	r2, r1, r2
   1a63a:	18d3      	adds	r3, r2, r3
   1a63c:	781a      	ldrb	r2, [r3, #0]
   1a63e:	230f      	movs	r3, #15
   1a640:	18fb      	adds	r3, r7, r3
   1a642:	3268      	adds	r2, #104	; 0x68
   1a644:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a646:	230f      	movs	r3, #15
   1a648:	18fb      	adds	r3, r7, r3
   1a64a:	781a      	ldrb	r2, [r3, #0]
   1a64c:	693b      	ldr	r3, [r7, #16]
   1a64e:	18d2      	adds	r2, r2, r3
   1a650:	4b31      	ldr	r3, [pc, #196]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a652:	681b      	ldr	r3, [r3, #0]
   1a654:	699b      	ldr	r3, [r3, #24]
   1a656:	429a      	cmp	r2, r3
   1a658:	d24d      	bcs.n	1a6f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a65a:	4b2f      	ldr	r3, [pc, #188]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a65c:	681a      	ldr	r2, [r3, #0]
   1a65e:	693b      	ldr	r3, [r7, #16]
   1a660:	009b      	lsls	r3, r3, #2
   1a662:	21e2      	movs	r1, #226	; 0xe2
   1a664:	00c9      	lsls	r1, r1, #3
   1a666:	468c      	mov	ip, r1
   1a668:	4463      	add	r3, ip
   1a66a:	18d0      	adds	r0, r2, r3
   1a66c:	230f      	movs	r3, #15
   1a66e:	18fb      	adds	r3, r7, r3
   1a670:	781b      	ldrb	r3, [r3, #0]
   1a672:	3301      	adds	r3, #1
   1a674:	009b      	lsls	r3, r3, #2
   1a676:	001a      	movs	r2, r3
   1a678:	2100      	movs	r1, #0
   1a67a:	4b28      	ldr	r3, [pc, #160]	; (1a71c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a67c:	4798      	blx	r3
		{
   1a67e:	e03a      	b.n	1a6f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a680:	4b25      	ldr	r3, [pc, #148]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a682:	6819      	ldr	r1, [r3, #0]
   1a684:	693b      	ldr	r3, [r7, #16]
   1a686:	009a      	lsls	r2, r3, #2
   1a688:	23e2      	movs	r3, #226	; 0xe2
   1a68a:	00db      	lsls	r3, r3, #3
   1a68c:	188a      	adds	r2, r1, r2
   1a68e:	18d3      	adds	r3, r2, r3
   1a690:	781b      	ldrb	r3, [r3, #0]
   1a692:	2b01      	cmp	r3, #1
   1a694:	d130      	bne.n	1a6f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a696:	693b      	ldr	r3, [r7, #16]
   1a698:	1c5a      	adds	r2, r3, #1
   1a69a:	4b1f      	ldr	r3, [pc, #124]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a69c:	681b      	ldr	r3, [r3, #0]
   1a69e:	699b      	ldr	r3, [r3, #24]
   1a6a0:	429a      	cmp	r2, r3
   1a6a2:	d20e      	bcs.n	1a6c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a6a4:	4b1c      	ldr	r3, [pc, #112]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a6a6:	681a      	ldr	r2, [r3, #0]
   1a6a8:	693b      	ldr	r3, [r7, #16]
   1a6aa:	009b      	lsls	r3, r3, #2
   1a6ac:	21e2      	movs	r1, #226	; 0xe2
   1a6ae:	00c9      	lsls	r1, r1, #3
   1a6b0:	468c      	mov	ip, r1
   1a6b2:	4463      	add	r3, ip
   1a6b4:	18d3      	adds	r3, r2, r3
   1a6b6:	2208      	movs	r2, #8
   1a6b8:	2100      	movs	r1, #0
   1a6ba:	0018      	movs	r0, r3
   1a6bc:	4b17      	ldr	r3, [pc, #92]	; (1a71c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a6be:	4798      	blx	r3
   1a6c0:	e01a      	b.n	1a6f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a6c2:	4b15      	ldr	r3, [pc, #84]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a6c4:	681b      	ldr	r3, [r3, #0]
   1a6c6:	22e2      	movs	r2, #226	; 0xe2
   1a6c8:	00d2      	lsls	r2, r2, #3
   1a6ca:	4694      	mov	ip, r2
   1a6cc:	4463      	add	r3, ip
   1a6ce:	2204      	movs	r2, #4
   1a6d0:	2100      	movs	r1, #0
   1a6d2:	0018      	movs	r0, r3
   1a6d4:	4b11      	ldr	r3, [pc, #68]	; (1a71c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a6d6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a6d8:	4b0f      	ldr	r3, [pc, #60]	; (1a718 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a6da:	681a      	ldr	r2, [r3, #0]
   1a6dc:	693b      	ldr	r3, [r7, #16]
   1a6de:	009b      	lsls	r3, r3, #2
   1a6e0:	21e2      	movs	r1, #226	; 0xe2
   1a6e2:	00c9      	lsls	r1, r1, #3
   1a6e4:	468c      	mov	ip, r1
   1a6e6:	4463      	add	r3, ip
   1a6e8:	18d3      	adds	r3, r2, r3
   1a6ea:	2204      	movs	r2, #4
   1a6ec:	2100      	movs	r1, #0
   1a6ee:	0018      	movs	r0, r3
   1a6f0:	4b0a      	ldr	r3, [pc, #40]	; (1a71c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a6f2:	4798      	blx	r3
   1a6f4:	e000      	b.n	1a6f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a6f6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a6f8:	697b      	ldr	r3, [r7, #20]
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a6fe:	1dfb      	adds	r3, r7, #7
   1a700:	781a      	ldrb	r2, [r3, #0]
   1a702:	697b      	ldr	r3, [r7, #20]
   1a704:	429a      	cmp	r2, r3
   1a706:	d900      	bls.n	1a70a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a708:	e774      	b.n	1a5f4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a70a:	46bd      	mov	sp, r7
   1a70c:	b006      	add	sp, #24
   1a70e:	bd80      	pop	{r7, pc}
   1a710:	0003908c 	.word	0x0003908c
   1a714:	0001a565 	.word	0x0001a565
   1a718:	20000df8 	.word	0x20000df8
   1a71c:	000356ef 	.word	0x000356ef

0001a720 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a720:	b580      	push	{r7, lr}
   1a722:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a724:	4b12      	ldr	r3, [pc, #72]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a726:	681b      	ldr	r3, [r3, #0]
   1a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	d01c      	beq.n	1a768 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a72e:	4b10      	ldr	r3, [pc, #64]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a730:	681b      	ldr	r3, [r3, #0]
   1a732:	695a      	ldr	r2, [r3, #20]
   1a734:	3201      	adds	r2, #1
   1a736:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a738:	4b0d      	ldr	r3, [pc, #52]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a73a:	681b      	ldr	r3, [r3, #0]
   1a73c:	69da      	ldr	r2, [r3, #28]
   1a73e:	3201      	adds	r2, #1
   1a740:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a742:	4b0b      	ldr	r3, [pc, #44]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a744:	681b      	ldr	r3, [r3, #0]
   1a746:	69da      	ldr	r2, [r3, #28]
   1a748:	232c      	movs	r3, #44	; 0x2c
   1a74a:	33ff      	adds	r3, #255	; 0xff
   1a74c:	429a      	cmp	r2, r3
   1a74e:	d907      	bls.n	1a760 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a750:	4b07      	ldr	r3, [pc, #28]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a752:	681b      	ldr	r3, [r3, #0]
   1a754:	2201      	movs	r2, #1
   1a756:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a758:	4b05      	ldr	r3, [pc, #20]	; (1a770 <prvTraceUpdateCounters+0x50>)
   1a75a:	681b      	ldr	r3, [r3, #0]
   1a75c:	2200      	movs	r2, #0
   1a75e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a760:	2001      	movs	r0, #1
   1a762:	4b04      	ldr	r3, [pc, #16]	; (1a774 <prvTraceUpdateCounters+0x54>)
   1a764:	4798      	blx	r3
   1a766:	e000      	b.n	1a76a <prvTraceUpdateCounters+0x4a>
		return;
   1a768:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a76a:	46bd      	mov	sp, r7
   1a76c:	bd80      	pop	{r7, pc}
   1a76e:	46c0      	nop			; (mov r8, r8)
   1a770:	20000df8 	.word	0x20000df8
   1a774:	0001a5cd 	.word	0x0001a5cd

0001a778 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a778:	b5b0      	push	{r4, r5, r7, lr}
   1a77a:	b086      	sub	sp, #24
   1a77c:	af00      	add	r7, sp, #0
   1a77e:	0002      	movs	r2, r0
   1a780:	1dbb      	adds	r3, r7, #6
   1a782:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a784:	2300      	movs	r3, #0
   1a786:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a788:	2300      	movs	r3, #0
   1a78a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a78c:	2300      	movs	r3, #0
   1a78e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a790:	1dbb      	adds	r3, r7, #6
   1a792:	881b      	ldrh	r3, [r3, #0]
   1a794:	2bff      	cmp	r3, #255	; 0xff
   1a796:	d00a      	beq.n	1a7ae <prvTraceGetDTS+0x36>
   1a798:	1dbb      	adds	r3, r7, #6
   1a79a:	881b      	ldrh	r3, [r3, #0]
   1a79c:	4a60      	ldr	r2, [pc, #384]	; (1a920 <prvTraceGetDTS+0x1a8>)
   1a79e:	4293      	cmp	r3, r2
   1a7a0:	d005      	beq.n	1a7ae <prvTraceGetDTS+0x36>
   1a7a2:	4b60      	ldr	r3, [pc, #384]	; (1a924 <prvTraceGetDTS+0x1ac>)
   1a7a4:	0018      	movs	r0, r3
   1a7a6:	4b60      	ldr	r3, [pc, #384]	; (1a928 <prvTraceGetDTS+0x1b0>)
   1a7a8:	4798      	blx	r3
   1a7aa:	2300      	movs	r3, #0
   1a7ac:	e0b3      	b.n	1a916 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a7ae:	4b5f      	ldr	r3, [pc, #380]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a7b0:	681b      	ldr	r3, [r3, #0]
   1a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a7b4:	2b00      	cmp	r3, #0
   1a7b6:	d118      	bne.n	1a7ea <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a7b8:	4b5d      	ldr	r3, [pc, #372]	; (1a930 <prvTraceGetDTS+0x1b8>)
   1a7ba:	681b      	ldr	r3, [r3, #0]
   1a7bc:	2b00      	cmp	r3, #0
   1a7be:	d006      	beq.n	1a7ce <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a7c0:	4b5a      	ldr	r3, [pc, #360]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a7c2:	681b      	ldr	r3, [r3, #0]
   1a7c4:	4a5a      	ldr	r2, [pc, #360]	; (1a930 <prvTraceGetDTS+0x1b8>)
   1a7c6:	6812      	ldr	r2, [r2, #0]
   1a7c8:	0892      	lsrs	r2, r2, #2
   1a7ca:	625a      	str	r2, [r3, #36]	; 0x24
   1a7cc:	e00d      	b.n	1a7ea <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a7ce:	4b59      	ldr	r3, [pc, #356]	; (1a934 <prvTraceGetDTS+0x1bc>)
   1a7d0:	681a      	ldr	r2, [r3, #0]
   1a7d2:	4b59      	ldr	r3, [pc, #356]	; (1a938 <prvTraceGetDTS+0x1c0>)
   1a7d4:	681b      	ldr	r3, [r3, #0]
   1a7d6:	429a      	cmp	r2, r3
   1a7d8:	d007      	beq.n	1a7ea <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a7da:	4b54      	ldr	r3, [pc, #336]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a7dc:	681c      	ldr	r4, [r3, #0]
   1a7de:	2000      	movs	r0, #0
   1a7e0:	4b56      	ldr	r3, [pc, #344]	; (1a93c <prvTraceGetDTS+0x1c4>)
   1a7e2:	4798      	blx	r3
   1a7e4:	0003      	movs	r3, r0
   1a7e6:	089b      	lsrs	r3, r3, #2
   1a7e8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a7ea:	230c      	movs	r3, #12
   1a7ec:	18fb      	adds	r3, r7, r3
   1a7ee:	0018      	movs	r0, r3
   1a7f0:	4b53      	ldr	r3, [pc, #332]	; (1a940 <prvTraceGetDTS+0x1c8>)
   1a7f2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a7f4:	68fa      	ldr	r2, [r7, #12]
   1a7f6:	4b53      	ldr	r3, [pc, #332]	; (1a944 <prvTraceGetDTS+0x1cc>)
   1a7f8:	681b      	ldr	r3, [r3, #0]
   1a7fa:	1ad3      	subs	r3, r2, r3
   1a7fc:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a7fe:	68fa      	ldr	r2, [r7, #12]
   1a800:	4b50      	ldr	r3, [pc, #320]	; (1a944 <prvTraceGetDTS+0x1cc>)
   1a802:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a804:	4b49      	ldr	r3, [pc, #292]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a806:	681b      	ldr	r3, [r3, #0]
   1a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a80a:	2b00      	cmp	r3, #0
   1a80c:	d044      	beq.n	1a898 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a80e:	4b47      	ldr	r3, [pc, #284]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a810:	681b      	ldr	r3, [r3, #0]
   1a812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a814:	693b      	ldr	r3, [r7, #16]
   1a816:	429a      	cmp	r2, r3
   1a818:	d21e      	bcs.n	1a858 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a81a:	4b44      	ldr	r3, [pc, #272]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a81c:	681c      	ldr	r4, [r3, #0]
   1a81e:	4b43      	ldr	r3, [pc, #268]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a820:	681b      	ldr	r3, [r3, #0]
   1a822:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a824:	4b41      	ldr	r3, [pc, #260]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a826:	681b      	ldr	r3, [r3, #0]
   1a828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a82a:	4b47      	ldr	r3, [pc, #284]	; (1a948 <prvTraceGetDTS+0x1d0>)
   1a82c:	0011      	movs	r1, r2
   1a82e:	6938      	ldr	r0, [r7, #16]
   1a830:	4798      	blx	r3
   1a832:	0003      	movs	r3, r0
   1a834:	18eb      	adds	r3, r5, r3
   1a836:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a838:	4b3c      	ldr	r3, [pc, #240]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a83a:	681c      	ldr	r4, [r3, #0]
   1a83c:	4b3b      	ldr	r3, [pc, #236]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a83e:	681b      	ldr	r3, [r3, #0]
   1a840:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a842:	4b3a      	ldr	r3, [pc, #232]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a844:	681b      	ldr	r3, [r3, #0]
   1a846:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a848:	693a      	ldr	r2, [r7, #16]
   1a84a:	4b40      	ldr	r3, [pc, #256]	; (1a94c <prvTraceGetDTS+0x1d4>)
   1a84c:	0010      	movs	r0, r2
   1a84e:	4798      	blx	r3
   1a850:	000b      	movs	r3, r1
   1a852:	18eb      	adds	r3, r5, r3
   1a854:	62a3      	str	r3, [r4, #40]	; 0x28
   1a856:	e007      	b.n	1a868 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a858:	4b34      	ldr	r3, [pc, #208]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a85a:	681b      	ldr	r3, [r3, #0]
   1a85c:	4a33      	ldr	r2, [pc, #204]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a85e:	6812      	ldr	r2, [r2, #0]
   1a860:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a862:	693a      	ldr	r2, [r7, #16]
   1a864:	188a      	adds	r2, r1, r2
   1a866:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a868:	4b30      	ldr	r3, [pc, #192]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a86a:	681b      	ldr	r3, [r3, #0]
   1a86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a86e:	4b2f      	ldr	r3, [pc, #188]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a870:	681b      	ldr	r3, [r3, #0]
   1a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a874:	429a      	cmp	r2, r3
   1a876:	d313      	bcc.n	1a8a0 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a878:	4b2c      	ldr	r3, [pc, #176]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a87a:	681b      	ldr	r3, [r3, #0]
   1a87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a87e:	3201      	adds	r2, #1
   1a880:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a882:	4b2a      	ldr	r3, [pc, #168]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a884:	681b      	ldr	r3, [r3, #0]
   1a886:	4a29      	ldr	r2, [pc, #164]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a888:	6812      	ldr	r2, [r2, #0]
   1a88a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a88c:	4a27      	ldr	r2, [pc, #156]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a88e:	6812      	ldr	r2, [r2, #0]
   1a890:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a892:	1a8a      	subs	r2, r1, r2
   1a894:	629a      	str	r2, [r3, #40]	; 0x28
   1a896:	e003      	b.n	1a8a0 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a898:	4b24      	ldr	r3, [pc, #144]	; (1a92c <prvTraceGetDTS+0x1b4>)
   1a89a:	681b      	ldr	r3, [r3, #0]
   1a89c:	68fa      	ldr	r2, [r7, #12]
   1a89e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a8a0:	1dbb      	adds	r3, r7, #6
   1a8a2:	881a      	ldrh	r2, [r3, #0]
   1a8a4:	693b      	ldr	r3, [r7, #16]
   1a8a6:	429a      	cmp	r2, r3
   1a8a8:	d22f      	bcs.n	1a90a <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a8aa:	4b29      	ldr	r3, [pc, #164]	; (1a950 <prvTraceGetDTS+0x1d8>)
   1a8ac:	4798      	blx	r3
   1a8ae:	0003      	movs	r3, r0
   1a8b0:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a8b2:	697b      	ldr	r3, [r7, #20]
   1a8b4:	2b00      	cmp	r3, #0
   1a8b6:	d028      	beq.n	1a90a <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a8b8:	1dbb      	adds	r3, r7, #6
   1a8ba:	881b      	ldrh	r3, [r3, #0]
   1a8bc:	4a18      	ldr	r2, [pc, #96]	; (1a920 <prvTraceGetDTS+0x1a8>)
   1a8be:	4293      	cmp	r3, r2
   1a8c0:	d10b      	bne.n	1a8da <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a8c2:	697b      	ldr	r3, [r7, #20]
   1a8c4:	22a9      	movs	r2, #169	; 0xa9
   1a8c6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a8c8:	693b      	ldr	r3, [r7, #16]
   1a8ca:	0c1b      	lsrs	r3, r3, #16
   1a8cc:	b29a      	uxth	r2, r3
   1a8ce:	697b      	ldr	r3, [r7, #20]
   1a8d0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a8d2:	697b      	ldr	r3, [r7, #20]
   1a8d4:	2200      	movs	r2, #0
   1a8d6:	705a      	strb	r2, [r3, #1]
   1a8d8:	e015      	b.n	1a906 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a8da:	1dbb      	adds	r3, r7, #6
   1a8dc:	881b      	ldrh	r3, [r3, #0]
   1a8de:	2bff      	cmp	r3, #255	; 0xff
   1a8e0:	d10d      	bne.n	1a8fe <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a8e2:	697b      	ldr	r3, [r7, #20]
   1a8e4:	22a8      	movs	r2, #168	; 0xa8
   1a8e6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a8e8:	693b      	ldr	r3, [r7, #16]
   1a8ea:	0a1b      	lsrs	r3, r3, #8
   1a8ec:	b29a      	uxth	r2, r3
   1a8ee:	697b      	ldr	r3, [r7, #20]
   1a8f0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a8f2:	693b      	ldr	r3, [r7, #16]
   1a8f4:	0e1b      	lsrs	r3, r3, #24
   1a8f6:	b2da      	uxtb	r2, r3
   1a8f8:	697b      	ldr	r3, [r7, #20]
   1a8fa:	705a      	strb	r2, [r3, #1]
   1a8fc:	e003      	b.n	1a906 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a8fe:	4b15      	ldr	r3, [pc, #84]	; (1a954 <prvTraceGetDTS+0x1dc>)
   1a900:	0018      	movs	r0, r3
   1a902:	4b09      	ldr	r3, [pc, #36]	; (1a928 <prvTraceGetDTS+0x1b0>)
   1a904:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a906:	4b14      	ldr	r3, [pc, #80]	; (1a958 <prvTraceGetDTS+0x1e0>)
   1a908:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a90a:	693b      	ldr	r3, [r7, #16]
   1a90c:	b29b      	uxth	r3, r3
   1a90e:	1dba      	adds	r2, r7, #6
   1a910:	8812      	ldrh	r2, [r2, #0]
   1a912:	4013      	ands	r3, r2
   1a914:	b29b      	uxth	r3, r3
}
   1a916:	0018      	movs	r0, r3
   1a918:	46bd      	mov	sp, r7
   1a91a:	b006      	add	sp, #24
   1a91c:	bdb0      	pop	{r4, r5, r7, pc}
   1a91e:	46c0      	nop			; (mov r8, r8)
   1a920:	0000ffff 	.word	0x0000ffff
   1a924:	000390e4 	.word	0x000390e4
   1a928:	0001a565 	.word	0x0001a565
   1a92c:	20000df8 	.word	0x20000df8
   1a930:	20000d54 	.word	0x20000d54
   1a934:	e000e018 	.word	0xe000e018
   1a938:	20005660 	.word	0x20005660
   1a93c:	0002a975 	.word	0x0002a975
   1a940:	0001a95d 	.word	0x0001a95d
   1a944:	20000e04 	.word	0x20000e04
   1a948:	00033715 	.word	0x00033715
   1a94c:	00033821 	.word	0x00033821
   1a950:	0001a11d 	.word	0x0001a11d
   1a954:	00039124 	.word	0x00039124
   1a958:	0001a721 	.word	0x0001a721

0001a95c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a95c:	b580      	push	{r7, lr}
   1a95e:	b084      	sub	sp, #16
   1a960:	af00      	add	r7, sp, #0
   1a962:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a964:	2300      	movs	r3, #0
   1a966:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a968:	2300      	movs	r3, #0
   1a96a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a96c:	4b2d      	ldr	r3, [pc, #180]	; (1aa24 <prvTracePortGetTimeStamp+0xc8>)
   1a96e:	681b      	ldr	r3, [r3, #0]
   1a970:	2b01      	cmp	r3, #1
   1a972:	d107      	bne.n	1a984 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a974:	687b      	ldr	r3, [r7, #4]
   1a976:	2b00      	cmp	r3, #0
   1a978:	d04f      	beq.n	1aa1a <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a97a:	4b2b      	ldr	r3, [pc, #172]	; (1aa28 <prvTracePortGetTimeStamp+0xcc>)
   1a97c:	681a      	ldr	r2, [r3, #0]
   1a97e:	687b      	ldr	r3, [r7, #4]
   1a980:	601a      	str	r2, [r3, #0]
		return;
   1a982:	e04a      	b.n	1aa1a <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a984:	4b29      	ldr	r3, [pc, #164]	; (1aa2c <prvTracePortGetTimeStamp+0xd0>)
   1a986:	681a      	ldr	r2, [r3, #0]
   1a988:	4b29      	ldr	r3, [pc, #164]	; (1aa30 <prvTracePortGetTimeStamp+0xd4>)
   1a98a:	681b      	ldr	r3, [r3, #0]
   1a98c:	1ad3      	subs	r3, r2, r3
   1a98e:	3301      	adds	r3, #1
   1a990:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a992:	4b28      	ldr	r3, [pc, #160]	; (1aa34 <prvTracePortGetTimeStamp+0xd8>)
   1a994:	681a      	ldr	r2, [r3, #0]
   1a996:	4b28      	ldr	r3, [pc, #160]	; (1aa38 <prvTracePortGetTimeStamp+0xdc>)
   1a998:	681b      	ldr	r3, [r3, #0]
   1a99a:	1ad3      	subs	r3, r2, r3
   1a99c:	3b01      	subs	r3, #1
   1a99e:	2b00      	cmp	r3, #0
   1a9a0:	db03      	blt.n	1a9aa <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a9a2:	4b24      	ldr	r3, [pc, #144]	; (1aa34 <prvTracePortGetTimeStamp+0xd8>)
   1a9a4:	681b      	ldr	r3, [r3, #0]
   1a9a6:	60fb      	str	r3, [r7, #12]
   1a9a8:	e002      	b.n	1a9b0 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a9aa:	4b23      	ldr	r3, [pc, #140]	; (1aa38 <prvTracePortGetTimeStamp+0xdc>)
   1a9ac:	681b      	ldr	r3, [r3, #0]
   1a9ae:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a9b0:	4b20      	ldr	r3, [pc, #128]	; (1aa34 <prvTracePortGetTimeStamp+0xd8>)
   1a9b2:	681b      	ldr	r3, [r3, #0]
   1a9b4:	68fa      	ldr	r2, [r7, #12]
   1a9b6:	429a      	cmp	r2, r3
   1a9b8:	d107      	bne.n	1a9ca <prvTracePortGetTimeStamp+0x6e>
   1a9ba:	4b20      	ldr	r3, [pc, #128]	; (1aa3c <prvTracePortGetTimeStamp+0xe0>)
   1a9bc:	681b      	ldr	r3, [r3, #0]
   1a9be:	68ba      	ldr	r2, [r7, #8]
   1a9c0:	429a      	cmp	r2, r3
   1a9c2:	d202      	bcs.n	1a9ca <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a9c4:	68fb      	ldr	r3, [r7, #12]
   1a9c6:	3301      	adds	r3, #1
   1a9c8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a9ca:	687b      	ldr	r3, [r7, #4]
   1a9cc:	2b00      	cmp	r3, #0
   1a9ce:	d016      	beq.n	1a9fe <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a9d0:	4b16      	ldr	r3, [pc, #88]	; (1aa2c <prvTracePortGetTimeStamp+0xd0>)
   1a9d2:	681b      	ldr	r3, [r3, #0]
   1a9d4:	3301      	adds	r3, #1
   1a9d6:	089b      	lsrs	r3, r3, #2
   1a9d8:	68fa      	ldr	r2, [r7, #12]
   1a9da:	435a      	muls	r2, r3
   1a9dc:	4b12      	ldr	r3, [pc, #72]	; (1aa28 <prvTracePortGetTimeStamp+0xcc>)
   1a9de:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a9e0:	4b12      	ldr	r3, [pc, #72]	; (1aa2c <prvTracePortGetTimeStamp+0xd0>)
   1a9e2:	681b      	ldr	r3, [r3, #0]
   1a9e4:	3301      	adds	r3, #1
   1a9e6:	2203      	movs	r2, #3
   1a9e8:	4013      	ands	r3, r2
   1a9ea:	68fa      	ldr	r2, [r7, #12]
   1a9ec:	435a      	muls	r2, r3
   1a9ee:	68bb      	ldr	r3, [r7, #8]
   1a9f0:	18d3      	adds	r3, r2, r3
   1a9f2:	089a      	lsrs	r2, r3, #2
   1a9f4:	4b0c      	ldr	r3, [pc, #48]	; (1aa28 <prvTracePortGetTimeStamp+0xcc>)
   1a9f6:	681b      	ldr	r3, [r3, #0]
   1a9f8:	18d2      	adds	r2, r2, r3
   1a9fa:	4b0b      	ldr	r3, [pc, #44]	; (1aa28 <prvTracePortGetTimeStamp+0xcc>)
   1a9fc:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a9fe:	4b0d      	ldr	r3, [pc, #52]	; (1aa34 <prvTracePortGetTimeStamp+0xd8>)
   1aa00:	68fa      	ldr	r2, [r7, #12]
   1aa02:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1aa04:	687b      	ldr	r3, [r7, #4]
   1aa06:	2b00      	cmp	r3, #0
   1aa08:	d003      	beq.n	1aa12 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1aa0a:	4b07      	ldr	r3, [pc, #28]	; (1aa28 <prvTracePortGetTimeStamp+0xcc>)
   1aa0c:	681a      	ldr	r2, [r3, #0]
   1aa0e:	687b      	ldr	r3, [r7, #4]
   1aa10:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1aa12:	4b0a      	ldr	r3, [pc, #40]	; (1aa3c <prvTracePortGetTimeStamp+0xe0>)
   1aa14:	68ba      	ldr	r2, [r7, #8]
   1aa16:	601a      	str	r2, [r3, #0]
   1aa18:	e000      	b.n	1aa1c <prvTracePortGetTimeStamp+0xc0>
		return;
   1aa1a:	46c0      	nop			; (mov r8, r8)
}
   1aa1c:	46bd      	mov	sp, r7
   1aa1e:	b004      	add	sp, #16
   1aa20:	bd80      	pop	{r7, pc}
   1aa22:	46c0      	nop			; (mov r8, r8)
   1aa24:	20000d44 	.word	0x20000d44
   1aa28:	20000d48 	.word	0x20000d48
   1aa2c:	e000e014 	.word	0xe000e014
   1aa30:	e000e018 	.word	0xe000e018
   1aa34:	20000e08 	.word	0x20000e08
   1aa38:	20000d40 	.word	0x20000d40
   1aa3c:	20000e0c 	.word	0x20000e0c

0001aa40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1aa40:	b580      	push	{r7, lr}
   1aa42:	b082      	sub	sp, #8
   1aa44:	af00      	add	r7, sp, #0
   1aa46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa48:	687b      	ldr	r3, [r7, #4]
   1aa4a:	3308      	adds	r3, #8
   1aa4c:	001a      	movs	r2, r3
   1aa4e:	687b      	ldr	r3, [r7, #4]
   1aa50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1aa52:	687b      	ldr	r3, [r7, #4]
   1aa54:	2201      	movs	r2, #1
   1aa56:	4252      	negs	r2, r2
   1aa58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa5a:	687b      	ldr	r3, [r7, #4]
   1aa5c:	3308      	adds	r3, #8
   1aa5e:	001a      	movs	r2, r3
   1aa60:	687b      	ldr	r3, [r7, #4]
   1aa62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aa64:	687b      	ldr	r3, [r7, #4]
   1aa66:	3308      	adds	r3, #8
   1aa68:	001a      	movs	r2, r3
   1aa6a:	687b      	ldr	r3, [r7, #4]
   1aa6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1aa6e:	687b      	ldr	r3, [r7, #4]
   1aa70:	2200      	movs	r2, #0
   1aa72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1aa74:	46c0      	nop			; (mov r8, r8)
   1aa76:	46bd      	mov	sp, r7
   1aa78:	b002      	add	sp, #8
   1aa7a:	bd80      	pop	{r7, pc}

0001aa7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1aa7c:	b580      	push	{r7, lr}
   1aa7e:	b082      	sub	sp, #8
   1aa80:	af00      	add	r7, sp, #0
   1aa82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1aa84:	687b      	ldr	r3, [r7, #4]
   1aa86:	2200      	movs	r2, #0
   1aa88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1aa8a:	46c0      	nop			; (mov r8, r8)
   1aa8c:	46bd      	mov	sp, r7
   1aa8e:	b002      	add	sp, #8
   1aa90:	bd80      	pop	{r7, pc}

0001aa92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aa92:	b580      	push	{r7, lr}
   1aa94:	b084      	sub	sp, #16
   1aa96:	af00      	add	r7, sp, #0
   1aa98:	6078      	str	r0, [r7, #4]
   1aa9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1aa9c:	687b      	ldr	r3, [r7, #4]
   1aa9e:	685b      	ldr	r3, [r3, #4]
   1aaa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1aaa2:	683b      	ldr	r3, [r7, #0]
   1aaa4:	68fa      	ldr	r2, [r7, #12]
   1aaa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1aaa8:	68fb      	ldr	r3, [r7, #12]
   1aaaa:	689a      	ldr	r2, [r3, #8]
   1aaac:	683b      	ldr	r3, [r7, #0]
   1aaae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1aab0:	68fb      	ldr	r3, [r7, #12]
   1aab2:	689b      	ldr	r3, [r3, #8]
   1aab4:	683a      	ldr	r2, [r7, #0]
   1aab6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1aab8:	68fb      	ldr	r3, [r7, #12]
   1aaba:	683a      	ldr	r2, [r7, #0]
   1aabc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1aabe:	683b      	ldr	r3, [r7, #0]
   1aac0:	687a      	ldr	r2, [r7, #4]
   1aac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	681b      	ldr	r3, [r3, #0]
   1aac8:	1c5a      	adds	r2, r3, #1
   1aaca:	687b      	ldr	r3, [r7, #4]
   1aacc:	601a      	str	r2, [r3, #0]
}
   1aace:	46c0      	nop			; (mov r8, r8)
   1aad0:	46bd      	mov	sp, r7
   1aad2:	b004      	add	sp, #16
   1aad4:	bd80      	pop	{r7, pc}

0001aad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1aad6:	b580      	push	{r7, lr}
   1aad8:	b084      	sub	sp, #16
   1aada:	af00      	add	r7, sp, #0
   1aadc:	6078      	str	r0, [r7, #4]
   1aade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1aae0:	683b      	ldr	r3, [r7, #0]
   1aae2:	681b      	ldr	r3, [r3, #0]
   1aae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1aae6:	68bb      	ldr	r3, [r7, #8]
   1aae8:	3301      	adds	r3, #1
   1aaea:	d103      	bne.n	1aaf4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1aaec:	687b      	ldr	r3, [r7, #4]
   1aaee:	691b      	ldr	r3, [r3, #16]
   1aaf0:	60fb      	str	r3, [r7, #12]
   1aaf2:	e00c      	b.n	1ab0e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1aaf4:	687b      	ldr	r3, [r7, #4]
   1aaf6:	3308      	adds	r3, #8
   1aaf8:	60fb      	str	r3, [r7, #12]
   1aafa:	e002      	b.n	1ab02 <vListInsert+0x2c>
   1aafc:	68fb      	ldr	r3, [r7, #12]
   1aafe:	685b      	ldr	r3, [r3, #4]
   1ab00:	60fb      	str	r3, [r7, #12]
   1ab02:	68fb      	ldr	r3, [r7, #12]
   1ab04:	685b      	ldr	r3, [r3, #4]
   1ab06:	681a      	ldr	r2, [r3, #0]
   1ab08:	68bb      	ldr	r3, [r7, #8]
   1ab0a:	429a      	cmp	r2, r3
   1ab0c:	d9f6      	bls.n	1aafc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1ab0e:	68fb      	ldr	r3, [r7, #12]
   1ab10:	685a      	ldr	r2, [r3, #4]
   1ab12:	683b      	ldr	r3, [r7, #0]
   1ab14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ab16:	683b      	ldr	r3, [r7, #0]
   1ab18:	685b      	ldr	r3, [r3, #4]
   1ab1a:	683a      	ldr	r2, [r7, #0]
   1ab1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ab1e:	683b      	ldr	r3, [r7, #0]
   1ab20:	68fa      	ldr	r2, [r7, #12]
   1ab22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ab24:	68fb      	ldr	r3, [r7, #12]
   1ab26:	683a      	ldr	r2, [r7, #0]
   1ab28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ab2a:	683b      	ldr	r3, [r7, #0]
   1ab2c:	687a      	ldr	r2, [r7, #4]
   1ab2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ab30:	687b      	ldr	r3, [r7, #4]
   1ab32:	681b      	ldr	r3, [r3, #0]
   1ab34:	1c5a      	adds	r2, r3, #1
   1ab36:	687b      	ldr	r3, [r7, #4]
   1ab38:	601a      	str	r2, [r3, #0]
}
   1ab3a:	46c0      	nop			; (mov r8, r8)
   1ab3c:	46bd      	mov	sp, r7
   1ab3e:	b004      	add	sp, #16
   1ab40:	bd80      	pop	{r7, pc}

0001ab42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ab42:	b580      	push	{r7, lr}
   1ab44:	b084      	sub	sp, #16
   1ab46:	af00      	add	r7, sp, #0
   1ab48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ab4a:	687b      	ldr	r3, [r7, #4]
   1ab4c:	691b      	ldr	r3, [r3, #16]
   1ab4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ab50:	687b      	ldr	r3, [r7, #4]
   1ab52:	685b      	ldr	r3, [r3, #4]
   1ab54:	687a      	ldr	r2, [r7, #4]
   1ab56:	6892      	ldr	r2, [r2, #8]
   1ab58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ab5a:	687b      	ldr	r3, [r7, #4]
   1ab5c:	689b      	ldr	r3, [r3, #8]
   1ab5e:	687a      	ldr	r2, [r7, #4]
   1ab60:	6852      	ldr	r2, [r2, #4]
   1ab62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ab64:	68fb      	ldr	r3, [r7, #12]
   1ab66:	685a      	ldr	r2, [r3, #4]
   1ab68:	687b      	ldr	r3, [r7, #4]
   1ab6a:	429a      	cmp	r2, r3
   1ab6c:	d103      	bne.n	1ab76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ab6e:	687b      	ldr	r3, [r7, #4]
   1ab70:	689a      	ldr	r2, [r3, #8]
   1ab72:	68fb      	ldr	r3, [r7, #12]
   1ab74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	2200      	movs	r2, #0
   1ab7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ab7c:	68fb      	ldr	r3, [r7, #12]
   1ab7e:	681b      	ldr	r3, [r3, #0]
   1ab80:	1e5a      	subs	r2, r3, #1
   1ab82:	68fb      	ldr	r3, [r7, #12]
   1ab84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ab86:	68fb      	ldr	r3, [r7, #12]
   1ab88:	681b      	ldr	r3, [r3, #0]
}
   1ab8a:	0018      	movs	r0, r3
   1ab8c:	46bd      	mov	sp, r7
   1ab8e:	b004      	add	sp, #16
   1ab90:	bd80      	pop	{r7, pc}
	...

0001ab94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ab94:	b580      	push	{r7, lr}
   1ab96:	b084      	sub	sp, #16
   1ab98:	af00      	add	r7, sp, #0
   1ab9a:	60f8      	str	r0, [r7, #12]
   1ab9c:	60b9      	str	r1, [r7, #8]
   1ab9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1aba0:	68fb      	ldr	r3, [r7, #12]
   1aba2:	3b04      	subs	r3, #4
   1aba4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1aba6:	68fb      	ldr	r3, [r7, #12]
   1aba8:	2280      	movs	r2, #128	; 0x80
   1abaa:	0452      	lsls	r2, r2, #17
   1abac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1abae:	68fb      	ldr	r3, [r7, #12]
   1abb0:	3b04      	subs	r3, #4
   1abb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1abb4:	68ba      	ldr	r2, [r7, #8]
   1abb6:	68fb      	ldr	r3, [r7, #12]
   1abb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1abba:	68fb      	ldr	r3, [r7, #12]
   1abbc:	3b04      	subs	r3, #4
   1abbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1abc0:	4a08      	ldr	r2, [pc, #32]	; (1abe4 <pxPortInitialiseStack+0x50>)
   1abc2:	68fb      	ldr	r3, [r7, #12]
   1abc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1abc6:	68fb      	ldr	r3, [r7, #12]
   1abc8:	3b14      	subs	r3, #20
   1abca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1abcc:	687a      	ldr	r2, [r7, #4]
   1abce:	68fb      	ldr	r3, [r7, #12]
   1abd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1abd2:	68fb      	ldr	r3, [r7, #12]
   1abd4:	3b20      	subs	r3, #32
   1abd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1abd8:	68fb      	ldr	r3, [r7, #12]
}
   1abda:	0018      	movs	r0, r3
   1abdc:	46bd      	mov	sp, r7
   1abde:	b004      	add	sp, #16
   1abe0:	bd80      	pop	{r7, pc}
   1abe2:	46c0      	nop			; (mov r8, r8)
   1abe4:	0001abe9 	.word	0x0001abe9

0001abe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1abe8:	b580      	push	{r7, lr}
   1abea:	b082      	sub	sp, #8
   1abec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1abee:	2300      	movs	r3, #0
   1abf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1abf2:	4b07      	ldr	r3, [pc, #28]	; (1ac10 <prvTaskExitError+0x28>)
   1abf4:	681b      	ldr	r3, [r3, #0]
   1abf6:	3301      	adds	r3, #1
   1abf8:	d001      	beq.n	1abfe <prvTaskExitError+0x16>
   1abfa:	b672      	cpsid	i
   1abfc:	e7fe      	b.n	1abfc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1abfe:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ac00:	46c0      	nop			; (mov r8, r8)
   1ac02:	687b      	ldr	r3, [r7, #4]
   1ac04:	2b00      	cmp	r3, #0
   1ac06:	d0fc      	beq.n	1ac02 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ac08:	46c0      	nop			; (mov r8, r8)
   1ac0a:	46bd      	mov	sp, r7
   1ac0c:	b002      	add	sp, #8
   1ac0e:	bd80      	pop	{r7, pc}
   1ac10:	20000114 	.word	0x20000114

0001ac14 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ac14:	b580      	push	{r7, lr}
   1ac16:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ac18:	46c0      	nop			; (mov r8, r8)
   1ac1a:	46bd      	mov	sp, r7
   1ac1c:	bd80      	pop	{r7, pc}
	...

0001ac20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ac20:	4a0b      	ldr	r2, [pc, #44]	; (1ac50 <pxCurrentTCBConst2>)
   1ac22:	6813      	ldr	r3, [r2, #0]
   1ac24:	6818      	ldr	r0, [r3, #0]
   1ac26:	3020      	adds	r0, #32
   1ac28:	f380 8809 	msr	PSP, r0
   1ac2c:	2002      	movs	r0, #2
   1ac2e:	f380 8814 	msr	CONTROL, r0
   1ac32:	f3bf 8f6f 	isb	sy
   1ac36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ac38:	46ae      	mov	lr, r5
   1ac3a:	bc08      	pop	{r3}
   1ac3c:	bc04      	pop	{r2}
   1ac3e:	b662      	cpsie	i
   1ac40:	4718      	bx	r3
   1ac42:	46c0      	nop			; (mov r8, r8)
   1ac44:	46c0      	nop			; (mov r8, r8)
   1ac46:	46c0      	nop			; (mov r8, r8)
   1ac48:	46c0      	nop			; (mov r8, r8)
   1ac4a:	46c0      	nop			; (mov r8, r8)
   1ac4c:	46c0      	nop			; (mov r8, r8)
   1ac4e:	46c0      	nop			; (mov r8, r8)

0001ac50 <pxCurrentTCBConst2>:
   1ac50:	200040e0 	.word	0x200040e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1ac54:	46c0      	nop			; (mov r8, r8)
   1ac56:	46c0      	nop			; (mov r8, r8)

0001ac58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ac58:	b580      	push	{r7, lr}
   1ac5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1ac5c:	4b0e      	ldr	r3, [pc, #56]	; (1ac98 <xPortStartScheduler+0x40>)
   1ac5e:	4a0e      	ldr	r2, [pc, #56]	; (1ac98 <xPortStartScheduler+0x40>)
   1ac60:	6812      	ldr	r2, [r2, #0]
   1ac62:	21ff      	movs	r1, #255	; 0xff
   1ac64:	0409      	lsls	r1, r1, #16
   1ac66:	430a      	orrs	r2, r1
   1ac68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1ac6a:	4b0b      	ldr	r3, [pc, #44]	; (1ac98 <xPortStartScheduler+0x40>)
   1ac6c:	4a0a      	ldr	r2, [pc, #40]	; (1ac98 <xPortStartScheduler+0x40>)
   1ac6e:	6812      	ldr	r2, [r2, #0]
   1ac70:	21ff      	movs	r1, #255	; 0xff
   1ac72:	0609      	lsls	r1, r1, #24
   1ac74:	430a      	orrs	r2, r1
   1ac76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ac78:	4b08      	ldr	r3, [pc, #32]	; (1ac9c <xPortStartScheduler+0x44>)
   1ac7a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1ac7c:	4b08      	ldr	r3, [pc, #32]	; (1aca0 <xPortStartScheduler+0x48>)
   1ac7e:	2200      	movs	r2, #0
   1ac80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1ac82:	4b08      	ldr	r3, [pc, #32]	; (1aca4 <xPortStartScheduler+0x4c>)
   1ac84:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1ac86:	4b08      	ldr	r3, [pc, #32]	; (1aca8 <xPortStartScheduler+0x50>)
   1ac88:	4798      	blx	r3
	prvTaskExitError();
   1ac8a:	4b08      	ldr	r3, [pc, #32]	; (1acac <xPortStartScheduler+0x54>)
   1ac8c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1ac8e:	2300      	movs	r3, #0
}
   1ac90:	0018      	movs	r0, r3
   1ac92:	46bd      	mov	sp, r7
   1ac94:	bd80      	pop	{r7, pc}
   1ac96:	46c0      	nop			; (mov r8, r8)
   1ac98:	e000ed20 	.word	0xe000ed20
   1ac9c:	0001adb9 	.word	0x0001adb9
   1aca0:	20000114 	.word	0x20000114
   1aca4:	0001ac21 	.word	0x0001ac21
   1aca8:	0001d315 	.word	0x0001d315
   1acac:	0001abe9 	.word	0x0001abe9

0001acb0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1acb0:	b580      	push	{r7, lr}
   1acb2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1acb4:	4b03      	ldr	r3, [pc, #12]	; (1acc4 <vPortYield+0x14>)
   1acb6:	2280      	movs	r2, #128	; 0x80
   1acb8:	0552      	lsls	r2, r2, #21
   1acba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1acbc:	46c0      	nop			; (mov r8, r8)
   1acbe:	46bd      	mov	sp, r7
   1acc0:	bd80      	pop	{r7, pc}
   1acc2:	46c0      	nop			; (mov r8, r8)
   1acc4:	e000ed04 	.word	0xe000ed04

0001acc8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1acc8:	b580      	push	{r7, lr}
   1acca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1accc:	b672      	cpsid	i
    uxCriticalNesting++;
   1acce:	4b06      	ldr	r3, [pc, #24]	; (1ace8 <vPortEnterCritical+0x20>)
   1acd0:	681b      	ldr	r3, [r3, #0]
   1acd2:	1c5a      	adds	r2, r3, #1
   1acd4:	4b04      	ldr	r3, [pc, #16]	; (1ace8 <vPortEnterCritical+0x20>)
   1acd6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1acd8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1acdc:	f3bf 8f6f 	isb	sy
}
   1ace0:	46c0      	nop			; (mov r8, r8)
   1ace2:	46bd      	mov	sp, r7
   1ace4:	bd80      	pop	{r7, pc}
   1ace6:	46c0      	nop			; (mov r8, r8)
   1ace8:	20000114 	.word	0x20000114

0001acec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1acec:	b580      	push	{r7, lr}
   1acee:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1acf0:	4b09      	ldr	r3, [pc, #36]	; (1ad18 <vPortExitCritical+0x2c>)
   1acf2:	681b      	ldr	r3, [r3, #0]
   1acf4:	2b00      	cmp	r3, #0
   1acf6:	d101      	bne.n	1acfc <vPortExitCritical+0x10>
   1acf8:	b672      	cpsid	i
   1acfa:	e7fe      	b.n	1acfa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1acfc:	4b06      	ldr	r3, [pc, #24]	; (1ad18 <vPortExitCritical+0x2c>)
   1acfe:	681b      	ldr	r3, [r3, #0]
   1ad00:	1e5a      	subs	r2, r3, #1
   1ad02:	4b05      	ldr	r3, [pc, #20]	; (1ad18 <vPortExitCritical+0x2c>)
   1ad04:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ad06:	4b04      	ldr	r3, [pc, #16]	; (1ad18 <vPortExitCritical+0x2c>)
   1ad08:	681b      	ldr	r3, [r3, #0]
   1ad0a:	2b00      	cmp	r3, #0
   1ad0c:	d100      	bne.n	1ad10 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ad0e:	b662      	cpsie	i
    }
}
   1ad10:	46c0      	nop			; (mov r8, r8)
   1ad12:	46bd      	mov	sp, r7
   1ad14:	bd80      	pop	{r7, pc}
   1ad16:	46c0      	nop			; (mov r8, r8)
   1ad18:	20000114 	.word	0x20000114

0001ad1c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ad1c:	f3ef 8010 	mrs	r0, PRIMASK
   1ad20:	b672      	cpsid	i
   1ad22:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ad24:	46c0      	nop			; (mov r8, r8)
   1ad26:	0018      	movs	r0, r3

0001ad28 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ad28:	f380 8810 	msr	PRIMASK, r0
   1ad2c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ad2e:	46c0      	nop			; (mov r8, r8)

0001ad30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1ad30:	f3ef 8009 	mrs	r0, PSP
   1ad34:	4b0e      	ldr	r3, [pc, #56]	; (1ad70 <pxCurrentTCBConst>)
   1ad36:	681a      	ldr	r2, [r3, #0]
   1ad38:	3820      	subs	r0, #32
   1ad3a:	6010      	str	r0, [r2, #0]
   1ad3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ad3e:	4644      	mov	r4, r8
   1ad40:	464d      	mov	r5, r9
   1ad42:	4656      	mov	r6, sl
   1ad44:	465f      	mov	r7, fp
   1ad46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ad48:	b508      	push	{r3, lr}
   1ad4a:	b672      	cpsid	i
   1ad4c:	f002 fae2 	bl	1d314 <vTaskSwitchContext>
   1ad50:	b662      	cpsie	i
   1ad52:	bc0c      	pop	{r2, r3}
   1ad54:	6811      	ldr	r1, [r2, #0]
   1ad56:	6808      	ldr	r0, [r1, #0]
   1ad58:	3010      	adds	r0, #16
   1ad5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ad5c:	46a0      	mov	r8, r4
   1ad5e:	46a9      	mov	r9, r5
   1ad60:	46b2      	mov	sl, r6
   1ad62:	46bb      	mov	fp, r7
   1ad64:	f380 8809 	msr	PSP, r0
   1ad68:	3820      	subs	r0, #32
   1ad6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ad6c:	4718      	bx	r3
   1ad6e:	46c0      	nop			; (mov r8, r8)

0001ad70 <pxCurrentTCBConst>:
   1ad70:	200040e0 	.word	0x200040e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1ad74:	46c0      	nop			; (mov r8, r8)
   1ad76:	46c0      	nop			; (mov r8, r8)

0001ad78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1ad78:	b580      	push	{r7, lr}
   1ad7a:	b082      	sub	sp, #8
   1ad7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1ad7e:	4b0a      	ldr	r3, [pc, #40]	; (1ada8 <SysTick_Handler+0x30>)
   1ad80:	4798      	blx	r3
   1ad82:	0003      	movs	r3, r0
   1ad84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1ad86:	4b09      	ldr	r3, [pc, #36]	; (1adac <SysTick_Handler+0x34>)
   1ad88:	4798      	blx	r3
   1ad8a:	1e03      	subs	r3, r0, #0
   1ad8c:	d003      	beq.n	1ad96 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1ad8e:	4b08      	ldr	r3, [pc, #32]	; (1adb0 <SysTick_Handler+0x38>)
   1ad90:	2280      	movs	r2, #128	; 0x80
   1ad92:	0552      	lsls	r2, r2, #21
   1ad94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1ad96:	687b      	ldr	r3, [r7, #4]
   1ad98:	0018      	movs	r0, r3
   1ad9a:	4b06      	ldr	r3, [pc, #24]	; (1adb4 <SysTick_Handler+0x3c>)
   1ad9c:	4798      	blx	r3
}
   1ad9e:	46c0      	nop			; (mov r8, r8)
   1ada0:	46bd      	mov	sp, r7
   1ada2:	b002      	add	sp, #8
   1ada4:	bd80      	pop	{r7, pc}
   1ada6:	46c0      	nop			; (mov r8, r8)
   1ada8:	0001ad1d 	.word	0x0001ad1d
   1adac:	0001d125 	.word	0x0001d125
   1adb0:	e000ed04 	.word	0xe000ed04
   1adb4:	0001ad29 	.word	0x0001ad29

0001adb8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1adb8:	b5b0      	push	{r4, r5, r7, lr}
   1adba:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1adbc:	4b0b      	ldr	r3, [pc, #44]	; (1adec <prvSetupTimerInterrupt+0x34>)
   1adbe:	2200      	movs	r2, #0
   1adc0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1adc2:	4b0b      	ldr	r3, [pc, #44]	; (1adf0 <prvSetupTimerInterrupt+0x38>)
   1adc4:	2200      	movs	r2, #0
   1adc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1adc8:	4c0a      	ldr	r4, [pc, #40]	; (1adf4 <prvSetupTimerInterrupt+0x3c>)
   1adca:	2000      	movs	r0, #0
   1adcc:	4b0a      	ldr	r3, [pc, #40]	; (1adf8 <prvSetupTimerInterrupt+0x40>)
   1adce:	4798      	blx	r3
   1add0:	4b0a      	ldr	r3, [pc, #40]	; (1adfc <prvSetupTimerInterrupt+0x44>)
   1add2:	22fa      	movs	r2, #250	; 0xfa
   1add4:	0091      	lsls	r1, r2, #2
   1add6:	4798      	blx	r3
   1add8:	0003      	movs	r3, r0
   1adda:	3b01      	subs	r3, #1
   1addc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1adde:	4b03      	ldr	r3, [pc, #12]	; (1adec <prvSetupTimerInterrupt+0x34>)
   1ade0:	2207      	movs	r2, #7
   1ade2:	601a      	str	r2, [r3, #0]
}
   1ade4:	46c0      	nop			; (mov r8, r8)
   1ade6:	46bd      	mov	sp, r7
   1ade8:	bdb0      	pop	{r4, r5, r7, pc}
   1adea:	46c0      	nop			; (mov r8, r8)
   1adec:	e000e010 	.word	0xe000e010
   1adf0:	e000e018 	.word	0xe000e018
   1adf4:	e000e014 	.word	0xe000e014
   1adf8:	0002a975 	.word	0x0002a975
   1adfc:	00033715 	.word	0x00033715

0001ae00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1ae00:	b580      	push	{r7, lr}
   1ae02:	b084      	sub	sp, #16
   1ae04:	af00      	add	r7, sp, #0
   1ae06:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1ae08:	2300      	movs	r3, #0
   1ae0a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1ae0c:	687b      	ldr	r3, [r7, #4]
   1ae0e:	2207      	movs	r2, #7
   1ae10:	4013      	ands	r3, r2
   1ae12:	d004      	beq.n	1ae1e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1ae14:	687b      	ldr	r3, [r7, #4]
   1ae16:	2207      	movs	r2, #7
   1ae18:	4393      	bics	r3, r2
   1ae1a:	3308      	adds	r3, #8
   1ae1c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1ae1e:	4b21      	ldr	r3, [pc, #132]	; (1aea4 <pvPortMalloc+0xa4>)
   1ae20:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1ae22:	4b21      	ldr	r3, [pc, #132]	; (1aea8 <pvPortMalloc+0xa8>)
   1ae24:	681b      	ldr	r3, [r3, #0]
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d105      	bne.n	1ae36 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1ae2a:	4b20      	ldr	r3, [pc, #128]	; (1aeac <pvPortMalloc+0xac>)
   1ae2c:	2207      	movs	r2, #7
   1ae2e:	4393      	bics	r3, r2
   1ae30:	001a      	movs	r2, r3
   1ae32:	4b1d      	ldr	r3, [pc, #116]	; (1aea8 <pvPortMalloc+0xa8>)
   1ae34:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ae36:	4b1e      	ldr	r3, [pc, #120]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae38:	681a      	ldr	r2, [r3, #0]
   1ae3a:	687b      	ldr	r3, [r7, #4]
   1ae3c:	18d3      	adds	r3, r2, r3
   1ae3e:	4a1d      	ldr	r2, [pc, #116]	; (1aeb4 <pvPortMalloc+0xb4>)
   1ae40:	4293      	cmp	r3, r2
   1ae42:	d813      	bhi.n	1ae6c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1ae44:	4b1a      	ldr	r3, [pc, #104]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae46:	681a      	ldr	r2, [r3, #0]
   1ae48:	687b      	ldr	r3, [r7, #4]
   1ae4a:	18d2      	adds	r2, r2, r3
   1ae4c:	4b18      	ldr	r3, [pc, #96]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae4e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1ae50:	429a      	cmp	r2, r3
   1ae52:	d90b      	bls.n	1ae6c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1ae54:	4b14      	ldr	r3, [pc, #80]	; (1aea8 <pvPortMalloc+0xa8>)
   1ae56:	681a      	ldr	r2, [r3, #0]
   1ae58:	4b15      	ldr	r3, [pc, #84]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae5a:	681b      	ldr	r3, [r3, #0]
   1ae5c:	18d3      	adds	r3, r2, r3
   1ae5e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1ae60:	4b13      	ldr	r3, [pc, #76]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae62:	681a      	ldr	r2, [r3, #0]
   1ae64:	687b      	ldr	r3, [r7, #4]
   1ae66:	18d2      	adds	r2, r2, r3
   1ae68:	4b11      	ldr	r3, [pc, #68]	; (1aeb0 <pvPortMalloc+0xb0>)
   1ae6a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1ae6c:	68fb      	ldr	r3, [r7, #12]
   1ae6e:	2b00      	cmp	r3, #0
   1ae70:	d006      	beq.n	1ae80 <pvPortMalloc+0x80>
   1ae72:	68fb      	ldr	r3, [r7, #12]
   1ae74:	687a      	ldr	r2, [r7, #4]
   1ae76:	0019      	movs	r1, r3
   1ae78:	2094      	movs	r0, #148	; 0x94
   1ae7a:	4b0f      	ldr	r3, [pc, #60]	; (1aeb8 <pvPortMalloc+0xb8>)
   1ae7c:	4798      	blx	r3
   1ae7e:	e005      	b.n	1ae8c <pvPortMalloc+0x8c>
   1ae80:	68fb      	ldr	r3, [r7, #12]
   1ae82:	687a      	ldr	r2, [r7, #4]
   1ae84:	0019      	movs	r1, r3
   1ae86:	20e8      	movs	r0, #232	; 0xe8
   1ae88:	4b0b      	ldr	r3, [pc, #44]	; (1aeb8 <pvPortMalloc+0xb8>)
   1ae8a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1ae8c:	4b0b      	ldr	r3, [pc, #44]	; (1aebc <pvPortMalloc+0xbc>)
   1ae8e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1ae90:	68fb      	ldr	r3, [r7, #12]
   1ae92:	2b00      	cmp	r3, #0
   1ae94:	d101      	bne.n	1ae9a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1ae96:	4b0a      	ldr	r3, [pc, #40]	; (1aec0 <pvPortMalloc+0xc0>)
   1ae98:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1ae9a:	68fb      	ldr	r3, [r7, #12]
}
   1ae9c:	0018      	movs	r0, r3
   1ae9e:	46bd      	mov	sp, r7
   1aea0:	b004      	add	sp, #16
   1aea2:	bd80      	pop	{r7, pc}
   1aea4:	0001cf81 	.word	0x0001cf81
   1aea8:	200040dc 	.word	0x200040dc
   1aeac:	20000e18 	.word	0x20000e18
   1aeb0:	200040d8 	.word	0x200040d8
   1aeb4:	000032bf 	.word	0x000032bf
   1aeb8:	00019571 	.word	0x00019571
   1aebc:	0001cf99 	.word	0x0001cf99
   1aec0:	000336e5 	.word	0x000336e5

0001aec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1aec4:	b580      	push	{r7, lr}
   1aec6:	b082      	sub	sp, #8
   1aec8:	af00      	add	r7, sp, #0
   1aeca:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1aecc:	687b      	ldr	r3, [r7, #4]
   1aece:	2b00      	cmp	r3, #0
   1aed0:	d001      	beq.n	1aed6 <vPortFree+0x12>
   1aed2:	b672      	cpsid	i
   1aed4:	e7fe      	b.n	1aed4 <vPortFree+0x10>
}
   1aed6:	46c0      	nop			; (mov r8, r8)
   1aed8:	46bd      	mov	sp, r7
   1aeda:	b002      	add	sp, #8
   1aedc:	bd80      	pop	{r7, pc}
	...

0001aee0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1aee0:	b580      	push	{r7, lr}
   1aee2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1aee4:	4b03      	ldr	r3, [pc, #12]	; (1aef4 <xPortGetFreeHeapSize+0x14>)
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	22cb      	movs	r2, #203	; 0xcb
   1aeea:	0192      	lsls	r2, r2, #6
   1aeec:	1ad3      	subs	r3, r2, r3
}
   1aeee:	0018      	movs	r0, r3
   1aef0:	46bd      	mov	sp, r7
   1aef2:	bd80      	pop	{r7, pc}
   1aef4:	200040d8 	.word	0x200040d8

0001aef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1aef8:	b580      	push	{r7, lr}
   1aefa:	b084      	sub	sp, #16
   1aefc:	af00      	add	r7, sp, #0
   1aefe:	6078      	str	r0, [r7, #4]
   1af00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1af02:	687b      	ldr	r3, [r7, #4]
   1af04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1af06:	68fb      	ldr	r3, [r7, #12]
   1af08:	2b00      	cmp	r3, #0
   1af0a:	d101      	bne.n	1af10 <xQueueGenericReset+0x18>
   1af0c:	b672      	cpsid	i
   1af0e:	e7fe      	b.n	1af0e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1af10:	4b23      	ldr	r3, [pc, #140]	; (1afa0 <xQueueGenericReset+0xa8>)
   1af12:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1af14:	68fb      	ldr	r3, [r7, #12]
   1af16:	681a      	ldr	r2, [r3, #0]
   1af18:	68fb      	ldr	r3, [r7, #12]
   1af1a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1af1c:	68fb      	ldr	r3, [r7, #12]
   1af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af20:	434b      	muls	r3, r1
   1af22:	18d2      	adds	r2, r2, r3
   1af24:	68fb      	ldr	r3, [r7, #12]
   1af26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1af28:	68fb      	ldr	r3, [r7, #12]
   1af2a:	2200      	movs	r2, #0
   1af2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1af2e:	68fb      	ldr	r3, [r7, #12]
   1af30:	681a      	ldr	r2, [r3, #0]
   1af32:	68fb      	ldr	r3, [r7, #12]
   1af34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1af36:	68fb      	ldr	r3, [r7, #12]
   1af38:	681a      	ldr	r2, [r3, #0]
   1af3a:	68fb      	ldr	r3, [r7, #12]
   1af3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1af3e:	1e59      	subs	r1, r3, #1
   1af40:	68fb      	ldr	r3, [r7, #12]
   1af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af44:	434b      	muls	r3, r1
   1af46:	18d2      	adds	r2, r2, r3
   1af48:	68fb      	ldr	r3, [r7, #12]
   1af4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1af4c:	68fb      	ldr	r3, [r7, #12]
   1af4e:	2244      	movs	r2, #68	; 0x44
   1af50:	21ff      	movs	r1, #255	; 0xff
   1af52:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1af54:	68fb      	ldr	r3, [r7, #12]
   1af56:	2245      	movs	r2, #69	; 0x45
   1af58:	21ff      	movs	r1, #255	; 0xff
   1af5a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1af5c:	683b      	ldr	r3, [r7, #0]
   1af5e:	2b00      	cmp	r3, #0
   1af60:	d10d      	bne.n	1af7e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1af62:	68fb      	ldr	r3, [r7, #12]
   1af64:	691b      	ldr	r3, [r3, #16]
   1af66:	2b00      	cmp	r3, #0
   1af68:	d013      	beq.n	1af92 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1af6a:	68fb      	ldr	r3, [r7, #12]
   1af6c:	3310      	adds	r3, #16
   1af6e:	0018      	movs	r0, r3
   1af70:	4b0c      	ldr	r3, [pc, #48]	; (1afa4 <xQueueGenericReset+0xac>)
   1af72:	4798      	blx	r3
   1af74:	1e03      	subs	r3, r0, #0
   1af76:	d00c      	beq.n	1af92 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1af78:	4b0b      	ldr	r3, [pc, #44]	; (1afa8 <xQueueGenericReset+0xb0>)
   1af7a:	4798      	blx	r3
   1af7c:	e009      	b.n	1af92 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1af7e:	68fb      	ldr	r3, [r7, #12]
   1af80:	3310      	adds	r3, #16
   1af82:	0018      	movs	r0, r3
   1af84:	4b09      	ldr	r3, [pc, #36]	; (1afac <xQueueGenericReset+0xb4>)
   1af86:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1af88:	68fb      	ldr	r3, [r7, #12]
   1af8a:	3324      	adds	r3, #36	; 0x24
   1af8c:	0018      	movs	r0, r3
   1af8e:	4b07      	ldr	r3, [pc, #28]	; (1afac <xQueueGenericReset+0xb4>)
   1af90:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1af92:	4b07      	ldr	r3, [pc, #28]	; (1afb0 <xQueueGenericReset+0xb8>)
   1af94:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1af96:	2301      	movs	r3, #1
}
   1af98:	0018      	movs	r0, r3
   1af9a:	46bd      	mov	sp, r7
   1af9c:	b004      	add	sp, #16
   1af9e:	bd80      	pop	{r7, pc}
   1afa0:	0001acc9 	.word	0x0001acc9
   1afa4:	0001d559 	.word	0x0001d559
   1afa8:	0001acb1 	.word	0x0001acb1
   1afac:	0001aa41 	.word	0x0001aa41
   1afb0:	0001aced 	.word	0x0001aced

0001afb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1afb4:	b590      	push	{r4, r7, lr}
   1afb6:	b08b      	sub	sp, #44	; 0x2c
   1afb8:	af02      	add	r7, sp, #8
   1afba:	60f8      	str	r0, [r7, #12]
   1afbc:	60b9      	str	r1, [r7, #8]
   1afbe:	1dfb      	adds	r3, r7, #7
   1afc0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1afc2:	68fb      	ldr	r3, [r7, #12]
   1afc4:	2b00      	cmp	r3, #0
   1afc6:	d101      	bne.n	1afcc <xQueueGenericCreate+0x18>
   1afc8:	b672      	cpsid	i
   1afca:	e7fe      	b.n	1afca <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1afcc:	68bb      	ldr	r3, [r7, #8]
   1afce:	2b00      	cmp	r3, #0
   1afd0:	d102      	bne.n	1afd8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1afd2:	2300      	movs	r3, #0
   1afd4:	61fb      	str	r3, [r7, #28]
   1afd6:	e003      	b.n	1afe0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1afd8:	68fb      	ldr	r3, [r7, #12]
   1afda:	68ba      	ldr	r2, [r7, #8]
   1afdc:	4353      	muls	r3, r2
   1afde:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1afe0:	69fb      	ldr	r3, [r7, #28]
   1afe2:	3354      	adds	r3, #84	; 0x54
   1afe4:	0018      	movs	r0, r3
   1afe6:	4b19      	ldr	r3, [pc, #100]	; (1b04c <xQueueGenericCreate+0x98>)
   1afe8:	4798      	blx	r3
   1afea:	0003      	movs	r3, r0
   1afec:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1afee:	69bb      	ldr	r3, [r7, #24]
   1aff0:	2b00      	cmp	r3, #0
   1aff2:	d00d      	beq.n	1b010 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1aff4:	69bb      	ldr	r3, [r7, #24]
   1aff6:	3354      	adds	r3, #84	; 0x54
   1aff8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1affa:	1dfb      	adds	r3, r7, #7
   1affc:	781c      	ldrb	r4, [r3, #0]
   1affe:	697a      	ldr	r2, [r7, #20]
   1b000:	68b9      	ldr	r1, [r7, #8]
   1b002:	68f8      	ldr	r0, [r7, #12]
   1b004:	69bb      	ldr	r3, [r7, #24]
   1b006:	9300      	str	r3, [sp, #0]
   1b008:	0023      	movs	r3, r4
   1b00a:	4c11      	ldr	r4, [pc, #68]	; (1b050 <xQueueGenericCreate+0x9c>)
   1b00c:	47a0      	blx	r4
   1b00e:	e017      	b.n	1b040 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1b010:	4b10      	ldr	r3, [pc, #64]	; (1b054 <xQueueGenericCreate+0xa0>)
   1b012:	4798      	blx	r3
   1b014:	0003      	movs	r3, r0
   1b016:	0018      	movs	r0, r3
   1b018:	4b0f      	ldr	r3, [pc, #60]	; (1b058 <xQueueGenericCreate+0xa4>)
   1b01a:	4798      	blx	r3
   1b01c:	0003      	movs	r3, r0
   1b01e:	001a      	movs	r2, r3
   1b020:	4b0e      	ldr	r3, [pc, #56]	; (1b05c <xQueueGenericCreate+0xa8>)
   1b022:	881b      	ldrh	r3, [r3, #0]
   1b024:	4013      	ands	r3, r2
   1b026:	b29b      	uxth	r3, r3
   1b028:	2b00      	cmp	r3, #0
   1b02a:	d009      	beq.n	1b040 <xQueueGenericCreate+0x8c>
   1b02c:	1dfb      	adds	r3, r7, #7
   1b02e:	781b      	ldrb	r3, [r3, #0]
   1b030:	4a0b      	ldr	r2, [pc, #44]	; (1b060 <xQueueGenericCreate+0xac>)
   1b032:	5cd3      	ldrb	r3, [r2, r3]
   1b034:	3340      	adds	r3, #64	; 0x40
   1b036:	b2db      	uxtb	r3, r3
   1b038:	2100      	movs	r1, #0
   1b03a:	0018      	movs	r0, r3
   1b03c:	4b09      	ldr	r3, [pc, #36]	; (1b064 <xQueueGenericCreate+0xb0>)
   1b03e:	4798      	blx	r3
		}

		return pxNewQueue;
   1b040:	69bb      	ldr	r3, [r7, #24]
	}
   1b042:	0018      	movs	r0, r3
   1b044:	46bd      	mov	sp, r7
   1b046:	b009      	add	sp, #36	; 0x24
   1b048:	bd90      	pop	{r4, r7, pc}
   1b04a:	46c0      	nop			; (mov r8, r8)
   1b04c:	0001ae01 	.word	0x0001ae01
   1b050:	0001b069 	.word	0x0001b069
   1b054:	00018f65 	.word	0x00018f65
   1b058:	00018cc9 	.word	0x00018cc9
   1b05c:	20000110 	.word	0x20000110
   1b060:	20000104 	.word	0x20000104
   1b064:	000199c9 	.word	0x000199c9

0001b068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b068:	b5b0      	push	{r4, r5, r7, lr}
   1b06a:	b084      	sub	sp, #16
   1b06c:	af00      	add	r7, sp, #0
   1b06e:	60f8      	str	r0, [r7, #12]
   1b070:	60b9      	str	r1, [r7, #8]
   1b072:	607a      	str	r2, [r7, #4]
   1b074:	001a      	movs	r2, r3
   1b076:	1cfb      	adds	r3, r7, #3
   1b078:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b07a:	68bb      	ldr	r3, [r7, #8]
   1b07c:	2b00      	cmp	r3, #0
   1b07e:	d103      	bne.n	1b088 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b080:	6a3b      	ldr	r3, [r7, #32]
   1b082:	6a3a      	ldr	r2, [r7, #32]
   1b084:	601a      	str	r2, [r3, #0]
   1b086:	e002      	b.n	1b08e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b088:	6a3b      	ldr	r3, [r7, #32]
   1b08a:	687a      	ldr	r2, [r7, #4]
   1b08c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b08e:	6a3b      	ldr	r3, [r7, #32]
   1b090:	68fa      	ldr	r2, [r7, #12]
   1b092:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b094:	6a3b      	ldr	r3, [r7, #32]
   1b096:	68ba      	ldr	r2, [r7, #8]
   1b098:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b09a:	6a3b      	ldr	r3, [r7, #32]
   1b09c:	2101      	movs	r1, #1
   1b09e:	0018      	movs	r0, r3
   1b0a0:	4b41      	ldr	r3, [pc, #260]	; (1b1a8 <prvInitialiseNewQueue+0x140>)
   1b0a2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b0a4:	6a3b      	ldr	r3, [r7, #32]
   1b0a6:	1cfa      	adds	r2, r7, #3
   1b0a8:	2150      	movs	r1, #80	; 0x50
   1b0aa:	7812      	ldrb	r2, [r2, #0]
   1b0ac:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b0ae:	6a3b      	ldr	r3, [r7, #32]
   1b0b0:	2200      	movs	r2, #0
   1b0b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b0b4:	6a3b      	ldr	r3, [r7, #32]
   1b0b6:	0018      	movs	r0, r3
   1b0b8:	4b3c      	ldr	r3, [pc, #240]	; (1b1ac <prvInitialiseNewQueue+0x144>)
   1b0ba:	4798      	blx	r3
   1b0bc:	0003      	movs	r3, r0
   1b0be:	001a      	movs	r2, r3
   1b0c0:	4b3b      	ldr	r3, [pc, #236]	; (1b1b0 <prvInitialiseNewQueue+0x148>)
   1b0c2:	5c9b      	ldrb	r3, [r3, r2]
   1b0c4:	0018      	movs	r0, r3
   1b0c6:	4b3b      	ldr	r3, [pc, #236]	; (1b1b4 <prvInitialiseNewQueue+0x14c>)
   1b0c8:	4798      	blx	r3
   1b0ca:	0003      	movs	r3, r0
   1b0cc:	b29a      	uxth	r2, r3
   1b0ce:	6a3b      	ldr	r3, [r7, #32]
   1b0d0:	0011      	movs	r1, r2
   1b0d2:	0018      	movs	r0, r3
   1b0d4:	4b38      	ldr	r3, [pc, #224]	; (1b1b8 <prvInitialiseNewQueue+0x150>)
   1b0d6:	4798      	blx	r3
   1b0d8:	4b38      	ldr	r3, [pc, #224]	; (1b1bc <prvInitialiseNewQueue+0x154>)
   1b0da:	881a      	ldrh	r2, [r3, #0]
   1b0dc:	6a3b      	ldr	r3, [r7, #32]
   1b0de:	0011      	movs	r1, r2
   1b0e0:	0018      	movs	r0, r3
   1b0e2:	4b37      	ldr	r3, [pc, #220]	; (1b1c0 <prvInitialiseNewQueue+0x158>)
   1b0e4:	4798      	blx	r3
   1b0e6:	6a3b      	ldr	r3, [r7, #32]
   1b0e8:	0018      	movs	r0, r3
   1b0ea:	4b30      	ldr	r3, [pc, #192]	; (1b1ac <prvInitialiseNewQueue+0x144>)
   1b0ec:	4798      	blx	r3
   1b0ee:	0003      	movs	r3, r0
   1b0f0:	001a      	movs	r2, r3
   1b0f2:	4b2f      	ldr	r3, [pc, #188]	; (1b1b0 <prvInitialiseNewQueue+0x148>)
   1b0f4:	5c9c      	ldrb	r4, [r3, r2]
   1b0f6:	6a3b      	ldr	r3, [r7, #32]
   1b0f8:	0018      	movs	r0, r3
   1b0fa:	4b32      	ldr	r3, [pc, #200]	; (1b1c4 <prvInitialiseNewQueue+0x15c>)
   1b0fc:	4798      	blx	r3
   1b0fe:	0003      	movs	r3, r0
   1b100:	b2db      	uxtb	r3, r3
   1b102:	0019      	movs	r1, r3
   1b104:	0020      	movs	r0, r4
   1b106:	4b30      	ldr	r3, [pc, #192]	; (1b1c8 <prvInitialiseNewQueue+0x160>)
   1b108:	4798      	blx	r3
   1b10a:	4b30      	ldr	r3, [pc, #192]	; (1b1cc <prvInitialiseNewQueue+0x164>)
   1b10c:	4798      	blx	r3
   1b10e:	0003      	movs	r3, r0
   1b110:	0018      	movs	r0, r3
   1b112:	4b2f      	ldr	r3, [pc, #188]	; (1b1d0 <prvInitialiseNewQueue+0x168>)
   1b114:	4798      	blx	r3
   1b116:	0003      	movs	r3, r0
   1b118:	001a      	movs	r2, r3
   1b11a:	4b2e      	ldr	r3, [pc, #184]	; (1b1d4 <prvInitialiseNewQueue+0x16c>)
   1b11c:	881b      	ldrh	r3, [r3, #0]
   1b11e:	4013      	ands	r3, r2
   1b120:	b29b      	uxth	r3, r3
   1b122:	2b00      	cmp	r3, #0
   1b124:	d029      	beq.n	1b17a <prvInitialiseNewQueue+0x112>
   1b126:	6a3b      	ldr	r3, [r7, #32]
   1b128:	0018      	movs	r0, r3
   1b12a:	4b2b      	ldr	r3, [pc, #172]	; (1b1d8 <prvInitialiseNewQueue+0x170>)
   1b12c:	4798      	blx	r3
   1b12e:	0003      	movs	r3, r0
   1b130:	001a      	movs	r2, r3
   1b132:	4b28      	ldr	r3, [pc, #160]	; (1b1d4 <prvInitialiseNewQueue+0x16c>)
   1b134:	881b      	ldrh	r3, [r3, #0]
   1b136:	4013      	ands	r3, r2
   1b138:	b29b      	uxth	r3, r3
   1b13a:	2b00      	cmp	r3, #0
   1b13c:	d01d      	beq.n	1b17a <prvInitialiseNewQueue+0x112>
   1b13e:	6a3b      	ldr	r3, [r7, #32]
   1b140:	0018      	movs	r0, r3
   1b142:	4b1a      	ldr	r3, [pc, #104]	; (1b1ac <prvInitialiseNewQueue+0x144>)
   1b144:	4798      	blx	r3
   1b146:	0003      	movs	r3, r0
   1b148:	001a      	movs	r2, r3
   1b14a:	4b19      	ldr	r3, [pc, #100]	; (1b1b0 <prvInitialiseNewQueue+0x148>)
   1b14c:	5c9b      	ldrb	r3, [r3, r2]
   1b14e:	3318      	adds	r3, #24
   1b150:	b2db      	uxtb	r3, r3
   1b152:	001d      	movs	r5, r3
   1b154:	6a3b      	ldr	r3, [r7, #32]
   1b156:	0018      	movs	r0, r3
   1b158:	4b14      	ldr	r3, [pc, #80]	; (1b1ac <prvInitialiseNewQueue+0x144>)
   1b15a:	4798      	blx	r3
   1b15c:	0003      	movs	r3, r0
   1b15e:	001a      	movs	r2, r3
   1b160:	4b13      	ldr	r3, [pc, #76]	; (1b1b0 <prvInitialiseNewQueue+0x148>)
   1b162:	5c9c      	ldrb	r4, [r3, r2]
   1b164:	6a3b      	ldr	r3, [r7, #32]
   1b166:	0018      	movs	r0, r3
   1b168:	4b16      	ldr	r3, [pc, #88]	; (1b1c4 <prvInitialiseNewQueue+0x15c>)
   1b16a:	4798      	blx	r3
   1b16c:	0003      	movs	r3, r0
   1b16e:	b2db      	uxtb	r3, r3
   1b170:	001a      	movs	r2, r3
   1b172:	0021      	movs	r1, r4
   1b174:	0028      	movs	r0, r5
   1b176:	4b19      	ldr	r3, [pc, #100]	; (1b1dc <prvInitialiseNewQueue+0x174>)
   1b178:	4798      	blx	r3
   1b17a:	6a3b      	ldr	r3, [r7, #32]
   1b17c:	0018      	movs	r0, r3
   1b17e:	4b0b      	ldr	r3, [pc, #44]	; (1b1ac <prvInitialiseNewQueue+0x144>)
   1b180:	4798      	blx	r3
   1b182:	0003      	movs	r3, r0
   1b184:	001a      	movs	r2, r3
   1b186:	4b0a      	ldr	r3, [pc, #40]	; (1b1b0 <prvInitialiseNewQueue+0x148>)
   1b188:	5c9c      	ldrb	r4, [r3, r2]
   1b18a:	6a3b      	ldr	r3, [r7, #32]
   1b18c:	0018      	movs	r0, r3
   1b18e:	4b0d      	ldr	r3, [pc, #52]	; (1b1c4 <prvInitialiseNewQueue+0x15c>)
   1b190:	4798      	blx	r3
   1b192:	0003      	movs	r3, r0
   1b194:	b2db      	uxtb	r3, r3
   1b196:	2200      	movs	r2, #0
   1b198:	0019      	movs	r1, r3
   1b19a:	0020      	movs	r0, r4
   1b19c:	4b10      	ldr	r3, [pc, #64]	; (1b1e0 <prvInitialiseNewQueue+0x178>)
   1b19e:	4798      	blx	r3
}
   1b1a0:	46c0      	nop			; (mov r8, r8)
   1b1a2:	46bd      	mov	sp, r7
   1b1a4:	b004      	add	sp, #16
   1b1a6:	bdb0      	pop	{r4, r5, r7, pc}
   1b1a8:	0001aef9 	.word	0x0001aef9
   1b1ac:	00018c89 	.word	0x00018c89
   1b1b0:	20000104 	.word	0x20000104
   1b1b4:	0001a249 	.word	0x0001a249
   1b1b8:	00018dad 	.word	0x00018dad
   1b1bc:	20000112 	.word	0x20000112
   1b1c0:	00018de9 	.word	0x00018de9
   1b1c4:	00018d69 	.word	0x00018d69
   1b1c8:	0001a3e1 	.word	0x0001a3e1
   1b1cc:	00018f65 	.word	0x00018f65
   1b1d0:	00018cc9 	.word	0x00018cc9
   1b1d4:	20000110 	.word	0x20000110
   1b1d8:	00018d89 	.word	0x00018d89
   1b1dc:	000196c1 	.word	0x000196c1
   1b1e0:	00019d1d 	.word	0x00019d1d

0001b1e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b1e4:	b590      	push	{r4, r7, lr}
   1b1e6:	b083      	sub	sp, #12
   1b1e8:	af00      	add	r7, sp, #0
   1b1ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b1ec:	687b      	ldr	r3, [r7, #4]
   1b1ee:	2b00      	cmp	r3, #0
   1b1f0:	d00e      	beq.n	1b210 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b1f2:	687b      	ldr	r3, [r7, #4]
   1b1f4:	2200      	movs	r2, #0
   1b1f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b1f8:	687b      	ldr	r3, [r7, #4]
   1b1fa:	2200      	movs	r2, #0
   1b1fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b1fe:	687b      	ldr	r3, [r7, #4]
   1b200:	2200      	movs	r2, #0
   1b202:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b204:	6878      	ldr	r0, [r7, #4]
   1b206:	2300      	movs	r3, #0
   1b208:	2200      	movs	r2, #0
   1b20a:	2100      	movs	r1, #0
   1b20c:	4c02      	ldr	r4, [pc, #8]	; (1b218 <prvInitialiseMutex+0x34>)
   1b20e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b210:	46c0      	nop			; (mov r8, r8)
   1b212:	46bd      	mov	sp, r7
   1b214:	b003      	add	sp, #12
   1b216:	bd90      	pop	{r4, r7, pc}
   1b218:	0001b25d 	.word	0x0001b25d

0001b21c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b21c:	b580      	push	{r7, lr}
   1b21e:	b086      	sub	sp, #24
   1b220:	af00      	add	r7, sp, #0
   1b222:	0002      	movs	r2, r0
   1b224:	1dfb      	adds	r3, r7, #7
   1b226:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b228:	2301      	movs	r3, #1
   1b22a:	617b      	str	r3, [r7, #20]
   1b22c:	2300      	movs	r3, #0
   1b22e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b230:	1dfb      	adds	r3, r7, #7
   1b232:	781a      	ldrb	r2, [r3, #0]
   1b234:	6939      	ldr	r1, [r7, #16]
   1b236:	697b      	ldr	r3, [r7, #20]
   1b238:	0018      	movs	r0, r3
   1b23a:	4b06      	ldr	r3, [pc, #24]	; (1b254 <xQueueCreateMutex+0x38>)
   1b23c:	4798      	blx	r3
   1b23e:	0003      	movs	r3, r0
   1b240:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b242:	68fb      	ldr	r3, [r7, #12]
   1b244:	0018      	movs	r0, r3
   1b246:	4b04      	ldr	r3, [pc, #16]	; (1b258 <xQueueCreateMutex+0x3c>)
   1b248:	4798      	blx	r3

		return pxNewQueue;
   1b24a:	68fb      	ldr	r3, [r7, #12]
	}
   1b24c:	0018      	movs	r0, r3
   1b24e:	46bd      	mov	sp, r7
   1b250:	b006      	add	sp, #24
   1b252:	bd80      	pop	{r7, pc}
   1b254:	0001afb5 	.word	0x0001afb5
   1b258:	0001b1e5 	.word	0x0001b1e5

0001b25c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b25c:	b5b0      	push	{r4, r5, r7, lr}
   1b25e:	b08a      	sub	sp, #40	; 0x28
   1b260:	af00      	add	r7, sp, #0
   1b262:	60f8      	str	r0, [r7, #12]
   1b264:	60b9      	str	r1, [r7, #8]
   1b266:	607a      	str	r2, [r7, #4]
   1b268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b26a:	2300      	movs	r3, #0
   1b26c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b26e:	68fb      	ldr	r3, [r7, #12]
   1b270:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b272:	6a3b      	ldr	r3, [r7, #32]
   1b274:	2b00      	cmp	r3, #0
   1b276:	d101      	bne.n	1b27c <xQueueGenericSend+0x20>
   1b278:	b672      	cpsid	i
   1b27a:	e7fe      	b.n	1b27a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b27c:	68bb      	ldr	r3, [r7, #8]
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d103      	bne.n	1b28a <xQueueGenericSend+0x2e>
   1b282:	6a3b      	ldr	r3, [r7, #32]
   1b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b286:	2b00      	cmp	r3, #0
   1b288:	d101      	bne.n	1b28e <xQueueGenericSend+0x32>
   1b28a:	2301      	movs	r3, #1
   1b28c:	e000      	b.n	1b290 <xQueueGenericSend+0x34>
   1b28e:	2300      	movs	r3, #0
   1b290:	2b00      	cmp	r3, #0
   1b292:	d101      	bne.n	1b298 <xQueueGenericSend+0x3c>
   1b294:	b672      	cpsid	i
   1b296:	e7fe      	b.n	1b296 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b298:	683b      	ldr	r3, [r7, #0]
   1b29a:	2b02      	cmp	r3, #2
   1b29c:	d103      	bne.n	1b2a6 <xQueueGenericSend+0x4a>
   1b29e:	6a3b      	ldr	r3, [r7, #32]
   1b2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b2a2:	2b01      	cmp	r3, #1
   1b2a4:	d101      	bne.n	1b2aa <xQueueGenericSend+0x4e>
   1b2a6:	2301      	movs	r3, #1
   1b2a8:	e000      	b.n	1b2ac <xQueueGenericSend+0x50>
   1b2aa:	2300      	movs	r3, #0
   1b2ac:	2b00      	cmp	r3, #0
   1b2ae:	d101      	bne.n	1b2b4 <xQueueGenericSend+0x58>
   1b2b0:	b672      	cpsid	i
   1b2b2:	e7fe      	b.n	1b2b2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b2b4:	4bbc      	ldr	r3, [pc, #752]	; (1b5a8 <xQueueGenericSend+0x34c>)
   1b2b6:	4798      	blx	r3
   1b2b8:	1e03      	subs	r3, r0, #0
   1b2ba:	d102      	bne.n	1b2c2 <xQueueGenericSend+0x66>
   1b2bc:	687b      	ldr	r3, [r7, #4]
   1b2be:	2b00      	cmp	r3, #0
   1b2c0:	d101      	bne.n	1b2c6 <xQueueGenericSend+0x6a>
   1b2c2:	2301      	movs	r3, #1
   1b2c4:	e000      	b.n	1b2c8 <xQueueGenericSend+0x6c>
   1b2c6:	2300      	movs	r3, #0
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d101      	bne.n	1b2d0 <xQueueGenericSend+0x74>
   1b2cc:	b672      	cpsid	i
   1b2ce:	e7fe      	b.n	1b2ce <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b2d0:	4bb6      	ldr	r3, [pc, #728]	; (1b5ac <xQueueGenericSend+0x350>)
   1b2d2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b2d4:	6a3b      	ldr	r3, [r7, #32]
   1b2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b2d8:	6a3b      	ldr	r3, [r7, #32]
   1b2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b2dc:	429a      	cmp	r2, r3
   1b2de:	d303      	bcc.n	1b2e8 <xQueueGenericSend+0x8c>
   1b2e0:	683b      	ldr	r3, [r7, #0]
   1b2e2:	2b02      	cmp	r3, #2
   1b2e4:	d000      	beq.n	1b2e8 <xQueueGenericSend+0x8c>
   1b2e6:	e08e      	b.n	1b406 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b2e8:	4bb1      	ldr	r3, [pc, #708]	; (1b5b0 <xQueueGenericSend+0x354>)
   1b2ea:	4798      	blx	r3
   1b2ec:	0003      	movs	r3, r0
   1b2ee:	0018      	movs	r0, r3
   1b2f0:	4bb0      	ldr	r3, [pc, #704]	; (1b5b4 <xQueueGenericSend+0x358>)
   1b2f2:	4798      	blx	r3
   1b2f4:	0003      	movs	r3, r0
   1b2f6:	001a      	movs	r2, r3
   1b2f8:	4baf      	ldr	r3, [pc, #700]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b2fa:	881b      	ldrh	r3, [r3, #0]
   1b2fc:	4013      	ands	r3, r2
   1b2fe:	b29b      	uxth	r3, r3
   1b300:	2b00      	cmp	r3, #0
   1b302:	d02e      	beq.n	1b362 <xQueueGenericSend+0x106>
   1b304:	6a3b      	ldr	r3, [r7, #32]
   1b306:	0018      	movs	r0, r3
   1b308:	4bac      	ldr	r3, [pc, #688]	; (1b5bc <xQueueGenericSend+0x360>)
   1b30a:	4798      	blx	r3
   1b30c:	0003      	movs	r3, r0
   1b30e:	001a      	movs	r2, r3
   1b310:	4ba9      	ldr	r3, [pc, #676]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b312:	881b      	ldrh	r3, [r3, #0]
   1b314:	4013      	ands	r3, r2
   1b316:	b29b      	uxth	r3, r3
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d022      	beq.n	1b362 <xQueueGenericSend+0x106>
   1b31c:	683b      	ldr	r3, [r7, #0]
   1b31e:	2b00      	cmp	r3, #0
   1b320:	d10b      	bne.n	1b33a <xQueueGenericSend+0xde>
   1b322:	6a3b      	ldr	r3, [r7, #32]
   1b324:	0018      	movs	r0, r3
   1b326:	4ba6      	ldr	r3, [pc, #664]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b328:	4798      	blx	r3
   1b32a:	0003      	movs	r3, r0
   1b32c:	001a      	movs	r2, r3
   1b32e:	4ba5      	ldr	r3, [pc, #660]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b330:	5c9b      	ldrb	r3, [r3, r2]
   1b332:	3320      	adds	r3, #32
   1b334:	b2db      	uxtb	r3, r3
   1b336:	001d      	movs	r5, r3
   1b338:	e000      	b.n	1b33c <xQueueGenericSend+0xe0>
   1b33a:	2525      	movs	r5, #37	; 0x25
   1b33c:	6a3b      	ldr	r3, [r7, #32]
   1b33e:	0018      	movs	r0, r3
   1b340:	4b9f      	ldr	r3, [pc, #636]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b342:	4798      	blx	r3
   1b344:	0003      	movs	r3, r0
   1b346:	001a      	movs	r2, r3
   1b348:	4b9e      	ldr	r3, [pc, #632]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b34a:	5c9c      	ldrb	r4, [r3, r2]
   1b34c:	6a3b      	ldr	r3, [r7, #32]
   1b34e:	0018      	movs	r0, r3
   1b350:	4b9d      	ldr	r3, [pc, #628]	; (1b5c8 <xQueueGenericSend+0x36c>)
   1b352:	4798      	blx	r3
   1b354:	0003      	movs	r3, r0
   1b356:	b2db      	uxtb	r3, r3
   1b358:	001a      	movs	r2, r3
   1b35a:	0021      	movs	r1, r4
   1b35c:	0028      	movs	r0, r5
   1b35e:	4b9b      	ldr	r3, [pc, #620]	; (1b5cc <xQueueGenericSend+0x370>)
   1b360:	4798      	blx	r3
   1b362:	6a3b      	ldr	r3, [r7, #32]
   1b364:	0018      	movs	r0, r3
   1b366:	4b96      	ldr	r3, [pc, #600]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b368:	4798      	blx	r3
   1b36a:	0003      	movs	r3, r0
   1b36c:	001a      	movs	r2, r3
   1b36e:	4b95      	ldr	r3, [pc, #596]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b370:	5c9c      	ldrb	r4, [r3, r2]
   1b372:	6a3b      	ldr	r3, [r7, #32]
   1b374:	0018      	movs	r0, r3
   1b376:	4b94      	ldr	r3, [pc, #592]	; (1b5c8 <xQueueGenericSend+0x36c>)
   1b378:	4798      	blx	r3
   1b37a:	0003      	movs	r3, r0
   1b37c:	b2dd      	uxtb	r5, r3
   1b37e:	6a3b      	ldr	r3, [r7, #32]
   1b380:	0018      	movs	r0, r3
   1b382:	4b8f      	ldr	r3, [pc, #572]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b384:	4798      	blx	r3
   1b386:	0003      	movs	r3, r0
   1b388:	001a      	movs	r2, r3
   1b38a:	4b8e      	ldr	r3, [pc, #568]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b38c:	5c9b      	ldrb	r3, [r3, r2]
   1b38e:	2b02      	cmp	r3, #2
   1b390:	d005      	beq.n	1b39e <xQueueGenericSend+0x142>
   1b392:	6a3b      	ldr	r3, [r7, #32]
   1b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b396:	b2db      	uxtb	r3, r3
   1b398:	3301      	adds	r3, #1
   1b39a:	b2db      	uxtb	r3, r3
   1b39c:	e000      	b.n	1b3a0 <xQueueGenericSend+0x144>
   1b39e:	2300      	movs	r3, #0
   1b3a0:	001a      	movs	r2, r3
   1b3a2:	0029      	movs	r1, r5
   1b3a4:	0020      	movs	r0, r4
   1b3a6:	4b8a      	ldr	r3, [pc, #552]	; (1b5d0 <xQueueGenericSend+0x374>)
   1b3a8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b3aa:	683a      	ldr	r2, [r7, #0]
   1b3ac:	68b9      	ldr	r1, [r7, #8]
   1b3ae:	6a3b      	ldr	r3, [r7, #32]
   1b3b0:	0018      	movs	r0, r3
   1b3b2:	4b88      	ldr	r3, [pc, #544]	; (1b5d4 <xQueueGenericSend+0x378>)
   1b3b4:	4798      	blx	r3
   1b3b6:	0003      	movs	r3, r0
   1b3b8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b3ba:	6a3b      	ldr	r3, [r7, #32]
   1b3bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b3be:	2b00      	cmp	r3, #0
   1b3c0:	d00a      	beq.n	1b3d8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b3c2:	683a      	ldr	r2, [r7, #0]
   1b3c4:	6a3b      	ldr	r3, [r7, #32]
   1b3c6:	0011      	movs	r1, r2
   1b3c8:	0018      	movs	r0, r3
   1b3ca:	4b83      	ldr	r3, [pc, #524]	; (1b5d8 <xQueueGenericSend+0x37c>)
   1b3cc:	4798      	blx	r3
   1b3ce:	1e03      	subs	r3, r0, #0
   1b3d0:	d015      	beq.n	1b3fe <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b3d2:	4b82      	ldr	r3, [pc, #520]	; (1b5dc <xQueueGenericSend+0x380>)
   1b3d4:	4798      	blx	r3
   1b3d6:	e012      	b.n	1b3fe <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b3d8:	6a3b      	ldr	r3, [r7, #32]
   1b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3dc:	2b00      	cmp	r3, #0
   1b3de:	d009      	beq.n	1b3f4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b3e0:	6a3b      	ldr	r3, [r7, #32]
   1b3e2:	3324      	adds	r3, #36	; 0x24
   1b3e4:	0018      	movs	r0, r3
   1b3e6:	4b7e      	ldr	r3, [pc, #504]	; (1b5e0 <xQueueGenericSend+0x384>)
   1b3e8:	4798      	blx	r3
   1b3ea:	1e03      	subs	r3, r0, #0
   1b3ec:	d007      	beq.n	1b3fe <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b3ee:	4b7b      	ldr	r3, [pc, #492]	; (1b5dc <xQueueGenericSend+0x380>)
   1b3f0:	4798      	blx	r3
   1b3f2:	e004      	b.n	1b3fe <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b3f4:	69fb      	ldr	r3, [r7, #28]
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	d001      	beq.n	1b3fe <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b3fa:	4b78      	ldr	r3, [pc, #480]	; (1b5dc <xQueueGenericSend+0x380>)
   1b3fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b3fe:	4b79      	ldr	r3, [pc, #484]	; (1b5e4 <xQueueGenericSend+0x388>)
   1b400:	4798      	blx	r3
				return pdPASS;
   1b402:	2301      	movs	r3, #1
   1b404:	e142      	b.n	1b68c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b406:	687b      	ldr	r3, [r7, #4]
   1b408:	2b00      	cmp	r3, #0
   1b40a:	d140      	bne.n	1b48e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b40c:	4b75      	ldr	r3, [pc, #468]	; (1b5e4 <xQueueGenericSend+0x388>)
   1b40e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b410:	4b67      	ldr	r3, [pc, #412]	; (1b5b0 <xQueueGenericSend+0x354>)
   1b412:	4798      	blx	r3
   1b414:	0003      	movs	r3, r0
   1b416:	0018      	movs	r0, r3
   1b418:	4b66      	ldr	r3, [pc, #408]	; (1b5b4 <xQueueGenericSend+0x358>)
   1b41a:	4798      	blx	r3
   1b41c:	0003      	movs	r3, r0
   1b41e:	001a      	movs	r2, r3
   1b420:	4b65      	ldr	r3, [pc, #404]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b422:	881b      	ldrh	r3, [r3, #0]
   1b424:	4013      	ands	r3, r2
   1b426:	b29b      	uxth	r3, r3
   1b428:	2b00      	cmp	r3, #0
   1b42a:	d02e      	beq.n	1b48a <xQueueGenericSend+0x22e>
   1b42c:	6a3b      	ldr	r3, [r7, #32]
   1b42e:	0018      	movs	r0, r3
   1b430:	4b62      	ldr	r3, [pc, #392]	; (1b5bc <xQueueGenericSend+0x360>)
   1b432:	4798      	blx	r3
   1b434:	0003      	movs	r3, r0
   1b436:	001a      	movs	r2, r3
   1b438:	4b5f      	ldr	r3, [pc, #380]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b43a:	881b      	ldrh	r3, [r3, #0]
   1b43c:	4013      	ands	r3, r2
   1b43e:	b29b      	uxth	r3, r3
   1b440:	2b00      	cmp	r3, #0
   1b442:	d022      	beq.n	1b48a <xQueueGenericSend+0x22e>
   1b444:	683b      	ldr	r3, [r7, #0]
   1b446:	2b00      	cmp	r3, #0
   1b448:	d10b      	bne.n	1b462 <xQueueGenericSend+0x206>
   1b44a:	6a3b      	ldr	r3, [r7, #32]
   1b44c:	0018      	movs	r0, r3
   1b44e:	4b5c      	ldr	r3, [pc, #368]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b450:	4798      	blx	r3
   1b452:	0003      	movs	r3, r0
   1b454:	001a      	movs	r2, r3
   1b456:	4b5b      	ldr	r3, [pc, #364]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b458:	5c9b      	ldrb	r3, [r3, r2]
   1b45a:	3348      	adds	r3, #72	; 0x48
   1b45c:	b2db      	uxtb	r3, r3
   1b45e:	001d      	movs	r5, r3
   1b460:	e000      	b.n	1b464 <xQueueGenericSend+0x208>
   1b462:	254d      	movs	r5, #77	; 0x4d
   1b464:	6a3b      	ldr	r3, [r7, #32]
   1b466:	0018      	movs	r0, r3
   1b468:	4b55      	ldr	r3, [pc, #340]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b46a:	4798      	blx	r3
   1b46c:	0003      	movs	r3, r0
   1b46e:	001a      	movs	r2, r3
   1b470:	4b54      	ldr	r3, [pc, #336]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b472:	5c9c      	ldrb	r4, [r3, r2]
   1b474:	6a3b      	ldr	r3, [r7, #32]
   1b476:	0018      	movs	r0, r3
   1b478:	4b53      	ldr	r3, [pc, #332]	; (1b5c8 <xQueueGenericSend+0x36c>)
   1b47a:	4798      	blx	r3
   1b47c:	0003      	movs	r3, r0
   1b47e:	b2db      	uxtb	r3, r3
   1b480:	001a      	movs	r2, r3
   1b482:	0021      	movs	r1, r4
   1b484:	0028      	movs	r0, r5
   1b486:	4b51      	ldr	r3, [pc, #324]	; (1b5cc <xQueueGenericSend+0x370>)
   1b488:	4798      	blx	r3
					return errQUEUE_FULL;
   1b48a:	2300      	movs	r3, #0
   1b48c:	e0fe      	b.n	1b68c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b490:	2b00      	cmp	r3, #0
   1b492:	d106      	bne.n	1b4a2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b494:	2314      	movs	r3, #20
   1b496:	18fb      	adds	r3, r7, r3
   1b498:	0018      	movs	r0, r3
   1b49a:	4b53      	ldr	r3, [pc, #332]	; (1b5e8 <xQueueGenericSend+0x38c>)
   1b49c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b49e:	2301      	movs	r3, #1
   1b4a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b4a2:	4b50      	ldr	r3, [pc, #320]	; (1b5e4 <xQueueGenericSend+0x388>)
   1b4a4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b4a6:	4b51      	ldr	r3, [pc, #324]	; (1b5ec <xQueueGenericSend+0x390>)
   1b4a8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b4aa:	4b40      	ldr	r3, [pc, #256]	; (1b5ac <xQueueGenericSend+0x350>)
   1b4ac:	4798      	blx	r3
   1b4ae:	6a3b      	ldr	r3, [r7, #32]
   1b4b0:	2244      	movs	r2, #68	; 0x44
   1b4b2:	5c9b      	ldrb	r3, [r3, r2]
   1b4b4:	b25b      	sxtb	r3, r3
   1b4b6:	3301      	adds	r3, #1
   1b4b8:	d103      	bne.n	1b4c2 <xQueueGenericSend+0x266>
   1b4ba:	6a3b      	ldr	r3, [r7, #32]
   1b4bc:	2244      	movs	r2, #68	; 0x44
   1b4be:	2100      	movs	r1, #0
   1b4c0:	5499      	strb	r1, [r3, r2]
   1b4c2:	6a3b      	ldr	r3, [r7, #32]
   1b4c4:	2245      	movs	r2, #69	; 0x45
   1b4c6:	5c9b      	ldrb	r3, [r3, r2]
   1b4c8:	b25b      	sxtb	r3, r3
   1b4ca:	3301      	adds	r3, #1
   1b4cc:	d103      	bne.n	1b4d6 <xQueueGenericSend+0x27a>
   1b4ce:	6a3b      	ldr	r3, [r7, #32]
   1b4d0:	2245      	movs	r2, #69	; 0x45
   1b4d2:	2100      	movs	r1, #0
   1b4d4:	5499      	strb	r1, [r3, r2]
   1b4d6:	4b43      	ldr	r3, [pc, #268]	; (1b5e4 <xQueueGenericSend+0x388>)
   1b4d8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b4da:	1d3a      	adds	r2, r7, #4
   1b4dc:	2314      	movs	r3, #20
   1b4de:	18fb      	adds	r3, r7, r3
   1b4e0:	0011      	movs	r1, r2
   1b4e2:	0018      	movs	r0, r3
   1b4e4:	4b42      	ldr	r3, [pc, #264]	; (1b5f0 <xQueueGenericSend+0x394>)
   1b4e6:	4798      	blx	r3
   1b4e8:	1e03      	subs	r3, r0, #0
   1b4ea:	d000      	beq.n	1b4ee <xQueueGenericSend+0x292>
   1b4ec:	e08a      	b.n	1b604 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b4ee:	6a3b      	ldr	r3, [r7, #32]
   1b4f0:	0018      	movs	r0, r3
   1b4f2:	4b40      	ldr	r3, [pc, #256]	; (1b5f4 <xQueueGenericSend+0x398>)
   1b4f4:	4798      	blx	r3
   1b4f6:	1e03      	subs	r3, r0, #0
   1b4f8:	d04f      	beq.n	1b59a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b4fa:	4b2d      	ldr	r3, [pc, #180]	; (1b5b0 <xQueueGenericSend+0x354>)
   1b4fc:	4798      	blx	r3
   1b4fe:	0003      	movs	r3, r0
   1b500:	0018      	movs	r0, r3
   1b502:	4b2c      	ldr	r3, [pc, #176]	; (1b5b4 <xQueueGenericSend+0x358>)
   1b504:	4798      	blx	r3
   1b506:	0003      	movs	r3, r0
   1b508:	001a      	movs	r2, r3
   1b50a:	4b2b      	ldr	r3, [pc, #172]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b50c:	881b      	ldrh	r3, [r3, #0]
   1b50e:	4013      	ands	r3, r2
   1b510:	b29b      	uxth	r3, r3
   1b512:	2b00      	cmp	r3, #0
   1b514:	d02e      	beq.n	1b574 <xQueueGenericSend+0x318>
   1b516:	6a3b      	ldr	r3, [r7, #32]
   1b518:	0018      	movs	r0, r3
   1b51a:	4b28      	ldr	r3, [pc, #160]	; (1b5bc <xQueueGenericSend+0x360>)
   1b51c:	4798      	blx	r3
   1b51e:	0003      	movs	r3, r0
   1b520:	001a      	movs	r2, r3
   1b522:	4b25      	ldr	r3, [pc, #148]	; (1b5b8 <xQueueGenericSend+0x35c>)
   1b524:	881b      	ldrh	r3, [r3, #0]
   1b526:	4013      	ands	r3, r2
   1b528:	b29b      	uxth	r3, r3
   1b52a:	2b00      	cmp	r3, #0
   1b52c:	d022      	beq.n	1b574 <xQueueGenericSend+0x318>
   1b52e:	683b      	ldr	r3, [r7, #0]
   1b530:	2b00      	cmp	r3, #0
   1b532:	d10b      	bne.n	1b54c <xQueueGenericSend+0x2f0>
   1b534:	6a3b      	ldr	r3, [r7, #32]
   1b536:	0018      	movs	r0, r3
   1b538:	4b21      	ldr	r3, [pc, #132]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b53a:	4798      	blx	r3
   1b53c:	0003      	movs	r3, r0
   1b53e:	001a      	movs	r2, r3
   1b540:	4b20      	ldr	r3, [pc, #128]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b542:	5c9b      	ldrb	r3, [r3, r2]
   1b544:	3370      	adds	r3, #112	; 0x70
   1b546:	b2db      	uxtb	r3, r3
   1b548:	001d      	movs	r5, r3
   1b54a:	e000      	b.n	1b54e <xQueueGenericSend+0x2f2>
   1b54c:	2575      	movs	r5, #117	; 0x75
   1b54e:	6a3b      	ldr	r3, [r7, #32]
   1b550:	0018      	movs	r0, r3
   1b552:	4b1b      	ldr	r3, [pc, #108]	; (1b5c0 <xQueueGenericSend+0x364>)
   1b554:	4798      	blx	r3
   1b556:	0003      	movs	r3, r0
   1b558:	001a      	movs	r2, r3
   1b55a:	4b1a      	ldr	r3, [pc, #104]	; (1b5c4 <xQueueGenericSend+0x368>)
   1b55c:	5c9c      	ldrb	r4, [r3, r2]
   1b55e:	6a3b      	ldr	r3, [r7, #32]
   1b560:	0018      	movs	r0, r3
   1b562:	4b19      	ldr	r3, [pc, #100]	; (1b5c8 <xQueueGenericSend+0x36c>)
   1b564:	4798      	blx	r3
   1b566:	0003      	movs	r3, r0
   1b568:	b2db      	uxtb	r3, r3
   1b56a:	001a      	movs	r2, r3
   1b56c:	0021      	movs	r1, r4
   1b56e:	0028      	movs	r0, r5
   1b570:	4b16      	ldr	r3, [pc, #88]	; (1b5cc <xQueueGenericSend+0x370>)
   1b572:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b574:	6a3b      	ldr	r3, [r7, #32]
   1b576:	3310      	adds	r3, #16
   1b578:	687a      	ldr	r2, [r7, #4]
   1b57a:	0011      	movs	r1, r2
   1b57c:	0018      	movs	r0, r3
   1b57e:	4b1e      	ldr	r3, [pc, #120]	; (1b5f8 <xQueueGenericSend+0x39c>)
   1b580:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b582:	6a3b      	ldr	r3, [r7, #32]
   1b584:	0018      	movs	r0, r3
   1b586:	4b1d      	ldr	r3, [pc, #116]	; (1b5fc <xQueueGenericSend+0x3a0>)
   1b588:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b58a:	4b1d      	ldr	r3, [pc, #116]	; (1b600 <xQueueGenericSend+0x3a4>)
   1b58c:	4798      	blx	r3
   1b58e:	1e03      	subs	r3, r0, #0
   1b590:	d000      	beq.n	1b594 <xQueueGenericSend+0x338>
   1b592:	e69d      	b.n	1b2d0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b594:	4b11      	ldr	r3, [pc, #68]	; (1b5dc <xQueueGenericSend+0x380>)
   1b596:	4798      	blx	r3
   1b598:	e69a      	b.n	1b2d0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b59a:	6a3b      	ldr	r3, [r7, #32]
   1b59c:	0018      	movs	r0, r3
   1b59e:	4b17      	ldr	r3, [pc, #92]	; (1b5fc <xQueueGenericSend+0x3a0>)
   1b5a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b5a2:	4b17      	ldr	r3, [pc, #92]	; (1b600 <xQueueGenericSend+0x3a4>)
   1b5a4:	4798      	blx	r3
   1b5a6:	e693      	b.n	1b2d0 <xQueueGenericSend+0x74>
   1b5a8:	0001d9e9 	.word	0x0001d9e9
   1b5ac:	0001acc9 	.word	0x0001acc9
   1b5b0:	00018f65 	.word	0x00018f65
   1b5b4:	00018cc9 	.word	0x00018cc9
   1b5b8:	20000110 	.word	0x20000110
   1b5bc:	00018d89 	.word	0x00018d89
   1b5c0:	00018c89 	.word	0x00018c89
   1b5c4:	20000104 	.word	0x20000104
   1b5c8:	00018d69 	.word	0x00018d69
   1b5cc:	000196c1 	.word	0x000196c1
   1b5d0:	00019d1d 	.word	0x00019d1d
   1b5d4:	0001c495 	.word	0x0001c495
   1b5d8:	0001c799 	.word	0x0001c799
   1b5dc:	0001acb1 	.word	0x0001acb1
   1b5e0:	0001d559 	.word	0x0001d559
   1b5e4:	0001aced 	.word	0x0001aced
   1b5e8:	0001d699 	.word	0x0001d699
   1b5ec:	0001cf81 	.word	0x0001cf81
   1b5f0:	0001d6c1 	.word	0x0001d6c1
   1b5f4:	0001c6e9 	.word	0x0001c6e9
   1b5f8:	0001d435 	.word	0x0001d435
   1b5fc:	0001c5c5 	.word	0x0001c5c5
   1b600:	0001cf99 	.word	0x0001cf99
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b604:	6a3b      	ldr	r3, [r7, #32]
   1b606:	0018      	movs	r0, r3
   1b608:	4b22      	ldr	r3, [pc, #136]	; (1b694 <xQueueGenericSend+0x438>)
   1b60a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b60c:	4b22      	ldr	r3, [pc, #136]	; (1b698 <xQueueGenericSend+0x43c>)
   1b60e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b610:	4b22      	ldr	r3, [pc, #136]	; (1b69c <xQueueGenericSend+0x440>)
   1b612:	4798      	blx	r3
   1b614:	0003      	movs	r3, r0
   1b616:	0018      	movs	r0, r3
   1b618:	4b21      	ldr	r3, [pc, #132]	; (1b6a0 <xQueueGenericSend+0x444>)
   1b61a:	4798      	blx	r3
   1b61c:	0003      	movs	r3, r0
   1b61e:	001a      	movs	r2, r3
   1b620:	4b20      	ldr	r3, [pc, #128]	; (1b6a4 <xQueueGenericSend+0x448>)
   1b622:	881b      	ldrh	r3, [r3, #0]
   1b624:	4013      	ands	r3, r2
   1b626:	b29b      	uxth	r3, r3
   1b628:	2b00      	cmp	r3, #0
   1b62a:	d02e      	beq.n	1b68a <xQueueGenericSend+0x42e>
   1b62c:	6a3b      	ldr	r3, [r7, #32]
   1b62e:	0018      	movs	r0, r3
   1b630:	4b1d      	ldr	r3, [pc, #116]	; (1b6a8 <xQueueGenericSend+0x44c>)
   1b632:	4798      	blx	r3
   1b634:	0003      	movs	r3, r0
   1b636:	001a      	movs	r2, r3
   1b638:	4b1a      	ldr	r3, [pc, #104]	; (1b6a4 <xQueueGenericSend+0x448>)
   1b63a:	881b      	ldrh	r3, [r3, #0]
   1b63c:	4013      	ands	r3, r2
   1b63e:	b29b      	uxth	r3, r3
   1b640:	2b00      	cmp	r3, #0
   1b642:	d022      	beq.n	1b68a <xQueueGenericSend+0x42e>
   1b644:	683b      	ldr	r3, [r7, #0]
   1b646:	2b00      	cmp	r3, #0
   1b648:	d10b      	bne.n	1b662 <xQueueGenericSend+0x406>
   1b64a:	6a3b      	ldr	r3, [r7, #32]
   1b64c:	0018      	movs	r0, r3
   1b64e:	4b17      	ldr	r3, [pc, #92]	; (1b6ac <xQueueGenericSend+0x450>)
   1b650:	4798      	blx	r3
   1b652:	0003      	movs	r3, r0
   1b654:	001a      	movs	r2, r3
   1b656:	4b16      	ldr	r3, [pc, #88]	; (1b6b0 <xQueueGenericSend+0x454>)
   1b658:	5c9b      	ldrb	r3, [r3, r2]
   1b65a:	3348      	adds	r3, #72	; 0x48
   1b65c:	b2db      	uxtb	r3, r3
   1b65e:	001d      	movs	r5, r3
   1b660:	e000      	b.n	1b664 <xQueueGenericSend+0x408>
   1b662:	254d      	movs	r5, #77	; 0x4d
   1b664:	6a3b      	ldr	r3, [r7, #32]
   1b666:	0018      	movs	r0, r3
   1b668:	4b10      	ldr	r3, [pc, #64]	; (1b6ac <xQueueGenericSend+0x450>)
   1b66a:	4798      	blx	r3
   1b66c:	0003      	movs	r3, r0
   1b66e:	001a      	movs	r2, r3
   1b670:	4b0f      	ldr	r3, [pc, #60]	; (1b6b0 <xQueueGenericSend+0x454>)
   1b672:	5c9c      	ldrb	r4, [r3, r2]
   1b674:	6a3b      	ldr	r3, [r7, #32]
   1b676:	0018      	movs	r0, r3
   1b678:	4b0e      	ldr	r3, [pc, #56]	; (1b6b4 <xQueueGenericSend+0x458>)
   1b67a:	4798      	blx	r3
   1b67c:	0003      	movs	r3, r0
   1b67e:	b2db      	uxtb	r3, r3
   1b680:	001a      	movs	r2, r3
   1b682:	0021      	movs	r1, r4
   1b684:	0028      	movs	r0, r5
   1b686:	4b0c      	ldr	r3, [pc, #48]	; (1b6b8 <xQueueGenericSend+0x45c>)
   1b688:	4798      	blx	r3
			return errQUEUE_FULL;
   1b68a:	2300      	movs	r3, #0
		}
	}
}
   1b68c:	0018      	movs	r0, r3
   1b68e:	46bd      	mov	sp, r7
   1b690:	b00a      	add	sp, #40	; 0x28
   1b692:	bdb0      	pop	{r4, r5, r7, pc}
   1b694:	0001c5c5 	.word	0x0001c5c5
   1b698:	0001cf99 	.word	0x0001cf99
   1b69c:	00018f65 	.word	0x00018f65
   1b6a0:	00018cc9 	.word	0x00018cc9
   1b6a4:	20000110 	.word	0x20000110
   1b6a8:	00018d89 	.word	0x00018d89
   1b6ac:	00018c89 	.word	0x00018c89
   1b6b0:	20000104 	.word	0x20000104
   1b6b4:	00018d69 	.word	0x00018d69
   1b6b8:	000196c1 	.word	0x000196c1

0001b6bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b6bc:	b5b0      	push	{r4, r5, r7, lr}
   1b6be:	b088      	sub	sp, #32
   1b6c0:	af00      	add	r7, sp, #0
   1b6c2:	60f8      	str	r0, [r7, #12]
   1b6c4:	60b9      	str	r1, [r7, #8]
   1b6c6:	607a      	str	r2, [r7, #4]
   1b6c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b6ca:	68fb      	ldr	r3, [r7, #12]
   1b6cc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b6ce:	69bb      	ldr	r3, [r7, #24]
   1b6d0:	2b00      	cmp	r3, #0
   1b6d2:	d101      	bne.n	1b6d8 <xQueueGenericSendFromISR+0x1c>
   1b6d4:	b672      	cpsid	i
   1b6d6:	e7fe      	b.n	1b6d6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b6d8:	68bb      	ldr	r3, [r7, #8]
   1b6da:	2b00      	cmp	r3, #0
   1b6dc:	d103      	bne.n	1b6e6 <xQueueGenericSendFromISR+0x2a>
   1b6de:	69bb      	ldr	r3, [r7, #24]
   1b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6e2:	2b00      	cmp	r3, #0
   1b6e4:	d101      	bne.n	1b6ea <xQueueGenericSendFromISR+0x2e>
   1b6e6:	2301      	movs	r3, #1
   1b6e8:	e000      	b.n	1b6ec <xQueueGenericSendFromISR+0x30>
   1b6ea:	2300      	movs	r3, #0
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	d101      	bne.n	1b6f4 <xQueueGenericSendFromISR+0x38>
   1b6f0:	b672      	cpsid	i
   1b6f2:	e7fe      	b.n	1b6f2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b6f4:	683b      	ldr	r3, [r7, #0]
   1b6f6:	2b02      	cmp	r3, #2
   1b6f8:	d103      	bne.n	1b702 <xQueueGenericSendFromISR+0x46>
   1b6fa:	69bb      	ldr	r3, [r7, #24]
   1b6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b6fe:	2b01      	cmp	r3, #1
   1b700:	d101      	bne.n	1b706 <xQueueGenericSendFromISR+0x4a>
   1b702:	2301      	movs	r3, #1
   1b704:	e000      	b.n	1b708 <xQueueGenericSendFromISR+0x4c>
   1b706:	2300      	movs	r3, #0
   1b708:	2b00      	cmp	r3, #0
   1b70a:	d101      	bne.n	1b710 <xQueueGenericSendFromISR+0x54>
   1b70c:	b672      	cpsid	i
   1b70e:	e7fe      	b.n	1b70e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b710:	4b68      	ldr	r3, [pc, #416]	; (1b8b4 <xQueueGenericSendFromISR+0x1f8>)
   1b712:	4798      	blx	r3
   1b714:	0003      	movs	r3, r0
   1b716:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b718:	69bb      	ldr	r3, [r7, #24]
   1b71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b71c:	69bb      	ldr	r3, [r7, #24]
   1b71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b720:	429a      	cmp	r2, r3
   1b722:	d303      	bcc.n	1b72c <xQueueGenericSendFromISR+0x70>
   1b724:	683b      	ldr	r3, [r7, #0]
   1b726:	2b02      	cmp	r3, #2
   1b728:	d000      	beq.n	1b72c <xQueueGenericSendFromISR+0x70>
   1b72a:	e088      	b.n	1b83e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b72c:	2313      	movs	r3, #19
   1b72e:	18fb      	adds	r3, r7, r3
   1b730:	69ba      	ldr	r2, [r7, #24]
   1b732:	2145      	movs	r1, #69	; 0x45
   1b734:	5c52      	ldrb	r2, [r2, r1]
   1b736:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b738:	69bb      	ldr	r3, [r7, #24]
   1b73a:	0018      	movs	r0, r3
   1b73c:	4b5e      	ldr	r3, [pc, #376]	; (1b8b8 <xQueueGenericSendFromISR+0x1fc>)
   1b73e:	4798      	blx	r3
   1b740:	0003      	movs	r3, r0
   1b742:	001a      	movs	r2, r3
   1b744:	4b5d      	ldr	r3, [pc, #372]	; (1b8bc <xQueueGenericSendFromISR+0x200>)
   1b746:	881b      	ldrh	r3, [r3, #0]
   1b748:	4013      	ands	r3, r2
   1b74a:	b29b      	uxth	r3, r3
   1b74c:	2b00      	cmp	r3, #0
   1b74e:	d022      	beq.n	1b796 <xQueueGenericSendFromISR+0xda>
   1b750:	683b      	ldr	r3, [r7, #0]
   1b752:	2b00      	cmp	r3, #0
   1b754:	d10b      	bne.n	1b76e <xQueueGenericSendFromISR+0xb2>
   1b756:	69bb      	ldr	r3, [r7, #24]
   1b758:	0018      	movs	r0, r3
   1b75a:	4b59      	ldr	r3, [pc, #356]	; (1b8c0 <xQueueGenericSendFromISR+0x204>)
   1b75c:	4798      	blx	r3
   1b75e:	0003      	movs	r3, r0
   1b760:	001a      	movs	r2, r3
   1b762:	4b58      	ldr	r3, [pc, #352]	; (1b8c4 <xQueueGenericSendFromISR+0x208>)
   1b764:	5c9b      	ldrb	r3, [r3, r2]
   1b766:	3330      	adds	r3, #48	; 0x30
   1b768:	b2db      	uxtb	r3, r3
   1b76a:	001d      	movs	r5, r3
   1b76c:	e000      	b.n	1b770 <xQueueGenericSendFromISR+0xb4>
   1b76e:	2535      	movs	r5, #53	; 0x35
   1b770:	69bb      	ldr	r3, [r7, #24]
   1b772:	0018      	movs	r0, r3
   1b774:	4b52      	ldr	r3, [pc, #328]	; (1b8c0 <xQueueGenericSendFromISR+0x204>)
   1b776:	4798      	blx	r3
   1b778:	0003      	movs	r3, r0
   1b77a:	001a      	movs	r2, r3
   1b77c:	4b51      	ldr	r3, [pc, #324]	; (1b8c4 <xQueueGenericSendFromISR+0x208>)
   1b77e:	5c9c      	ldrb	r4, [r3, r2]
   1b780:	69bb      	ldr	r3, [r7, #24]
   1b782:	0018      	movs	r0, r3
   1b784:	4b50      	ldr	r3, [pc, #320]	; (1b8c8 <xQueueGenericSendFromISR+0x20c>)
   1b786:	4798      	blx	r3
   1b788:	0003      	movs	r3, r0
   1b78a:	b2db      	uxtb	r3, r3
   1b78c:	001a      	movs	r2, r3
   1b78e:	0021      	movs	r1, r4
   1b790:	0028      	movs	r0, r5
   1b792:	4b4e      	ldr	r3, [pc, #312]	; (1b8cc <xQueueGenericSendFromISR+0x210>)
   1b794:	4798      	blx	r3
   1b796:	69bb      	ldr	r3, [r7, #24]
   1b798:	0018      	movs	r0, r3
   1b79a:	4b49      	ldr	r3, [pc, #292]	; (1b8c0 <xQueueGenericSendFromISR+0x204>)
   1b79c:	4798      	blx	r3
   1b79e:	0003      	movs	r3, r0
   1b7a0:	001a      	movs	r2, r3
   1b7a2:	4b48      	ldr	r3, [pc, #288]	; (1b8c4 <xQueueGenericSendFromISR+0x208>)
   1b7a4:	5c9c      	ldrb	r4, [r3, r2]
   1b7a6:	69bb      	ldr	r3, [r7, #24]
   1b7a8:	0018      	movs	r0, r3
   1b7aa:	4b47      	ldr	r3, [pc, #284]	; (1b8c8 <xQueueGenericSendFromISR+0x20c>)
   1b7ac:	4798      	blx	r3
   1b7ae:	0003      	movs	r3, r0
   1b7b0:	b2d9      	uxtb	r1, r3
   1b7b2:	69bb      	ldr	r3, [r7, #24]
   1b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b7b6:	b2db      	uxtb	r3, r3
   1b7b8:	3301      	adds	r3, #1
   1b7ba:	b2db      	uxtb	r3, r3
   1b7bc:	001a      	movs	r2, r3
   1b7be:	0020      	movs	r0, r4
   1b7c0:	4b43      	ldr	r3, [pc, #268]	; (1b8d0 <xQueueGenericSendFromISR+0x214>)
   1b7c2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b7c4:	683a      	ldr	r2, [r7, #0]
   1b7c6:	68b9      	ldr	r1, [r7, #8]
   1b7c8:	69bb      	ldr	r3, [r7, #24]
   1b7ca:	0018      	movs	r0, r3
   1b7cc:	4b41      	ldr	r3, [pc, #260]	; (1b8d4 <xQueueGenericSendFromISR+0x218>)
   1b7ce:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b7d0:	2313      	movs	r3, #19
   1b7d2:	18fb      	adds	r3, r7, r3
   1b7d4:	781b      	ldrb	r3, [r3, #0]
   1b7d6:	b25b      	sxtb	r3, r3
   1b7d8:	3301      	adds	r3, #1
   1b7da:	d124      	bne.n	1b826 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b7dc:	69bb      	ldr	r3, [r7, #24]
   1b7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b7e0:	2b00      	cmp	r3, #0
   1b7e2:	d00e      	beq.n	1b802 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b7e4:	683a      	ldr	r2, [r7, #0]
   1b7e6:	69bb      	ldr	r3, [r7, #24]
   1b7e8:	0011      	movs	r1, r2
   1b7ea:	0018      	movs	r0, r3
   1b7ec:	4b3a      	ldr	r3, [pc, #232]	; (1b8d8 <xQueueGenericSendFromISR+0x21c>)
   1b7ee:	4798      	blx	r3
   1b7f0:	1e03      	subs	r3, r0, #0
   1b7f2:	d021      	beq.n	1b838 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b7f4:	687b      	ldr	r3, [r7, #4]
   1b7f6:	2b00      	cmp	r3, #0
   1b7f8:	d01e      	beq.n	1b838 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b7fa:	687b      	ldr	r3, [r7, #4]
   1b7fc:	2201      	movs	r2, #1
   1b7fe:	601a      	str	r2, [r3, #0]
   1b800:	e01a      	b.n	1b838 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b802:	69bb      	ldr	r3, [r7, #24]
   1b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b806:	2b00      	cmp	r3, #0
   1b808:	d016      	beq.n	1b838 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b80a:	69bb      	ldr	r3, [r7, #24]
   1b80c:	3324      	adds	r3, #36	; 0x24
   1b80e:	0018      	movs	r0, r3
   1b810:	4b32      	ldr	r3, [pc, #200]	; (1b8dc <xQueueGenericSendFromISR+0x220>)
   1b812:	4798      	blx	r3
   1b814:	1e03      	subs	r3, r0, #0
   1b816:	d00f      	beq.n	1b838 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b818:	687b      	ldr	r3, [r7, #4]
   1b81a:	2b00      	cmp	r3, #0
   1b81c:	d00c      	beq.n	1b838 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b81e:	687b      	ldr	r3, [r7, #4]
   1b820:	2201      	movs	r2, #1
   1b822:	601a      	str	r2, [r3, #0]
   1b824:	e008      	b.n	1b838 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b826:	2313      	movs	r3, #19
   1b828:	18fb      	adds	r3, r7, r3
   1b82a:	781b      	ldrb	r3, [r3, #0]
   1b82c:	3301      	adds	r3, #1
   1b82e:	b2db      	uxtb	r3, r3
   1b830:	b259      	sxtb	r1, r3
   1b832:	69bb      	ldr	r3, [r7, #24]
   1b834:	2245      	movs	r2, #69	; 0x45
   1b836:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b838:	2301      	movs	r3, #1
   1b83a:	61fb      	str	r3, [r7, #28]
		{
   1b83c:	e030      	b.n	1b8a0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b83e:	69bb      	ldr	r3, [r7, #24]
   1b840:	0018      	movs	r0, r3
   1b842:	4b1d      	ldr	r3, [pc, #116]	; (1b8b8 <xQueueGenericSendFromISR+0x1fc>)
   1b844:	4798      	blx	r3
   1b846:	0003      	movs	r3, r0
   1b848:	001a      	movs	r2, r3
   1b84a:	4b1c      	ldr	r3, [pc, #112]	; (1b8bc <xQueueGenericSendFromISR+0x200>)
   1b84c:	881b      	ldrh	r3, [r3, #0]
   1b84e:	4013      	ands	r3, r2
   1b850:	b29b      	uxth	r3, r3
   1b852:	2b00      	cmp	r3, #0
   1b854:	d022      	beq.n	1b89c <xQueueGenericSendFromISR+0x1e0>
   1b856:	683b      	ldr	r3, [r7, #0]
   1b858:	2b00      	cmp	r3, #0
   1b85a:	d10b      	bne.n	1b874 <xQueueGenericSendFromISR+0x1b8>
   1b85c:	69bb      	ldr	r3, [r7, #24]
   1b85e:	0018      	movs	r0, r3
   1b860:	4b17      	ldr	r3, [pc, #92]	; (1b8c0 <xQueueGenericSendFromISR+0x204>)
   1b862:	4798      	blx	r3
   1b864:	0003      	movs	r3, r0
   1b866:	001a      	movs	r2, r3
   1b868:	4b16      	ldr	r3, [pc, #88]	; (1b8c4 <xQueueGenericSendFromISR+0x208>)
   1b86a:	5c9b      	ldrb	r3, [r3, r2]
   1b86c:	3358      	adds	r3, #88	; 0x58
   1b86e:	b2db      	uxtb	r3, r3
   1b870:	001d      	movs	r5, r3
   1b872:	e000      	b.n	1b876 <xQueueGenericSendFromISR+0x1ba>
   1b874:	255d      	movs	r5, #93	; 0x5d
   1b876:	69bb      	ldr	r3, [r7, #24]
   1b878:	0018      	movs	r0, r3
   1b87a:	4b11      	ldr	r3, [pc, #68]	; (1b8c0 <xQueueGenericSendFromISR+0x204>)
   1b87c:	4798      	blx	r3
   1b87e:	0003      	movs	r3, r0
   1b880:	001a      	movs	r2, r3
   1b882:	4b10      	ldr	r3, [pc, #64]	; (1b8c4 <xQueueGenericSendFromISR+0x208>)
   1b884:	5c9c      	ldrb	r4, [r3, r2]
   1b886:	69bb      	ldr	r3, [r7, #24]
   1b888:	0018      	movs	r0, r3
   1b88a:	4b0f      	ldr	r3, [pc, #60]	; (1b8c8 <xQueueGenericSendFromISR+0x20c>)
   1b88c:	4798      	blx	r3
   1b88e:	0003      	movs	r3, r0
   1b890:	b2db      	uxtb	r3, r3
   1b892:	001a      	movs	r2, r3
   1b894:	0021      	movs	r1, r4
   1b896:	0028      	movs	r0, r5
   1b898:	4b0c      	ldr	r3, [pc, #48]	; (1b8cc <xQueueGenericSendFromISR+0x210>)
   1b89a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b89c:	2300      	movs	r3, #0
   1b89e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b8a0:	697b      	ldr	r3, [r7, #20]
   1b8a2:	0018      	movs	r0, r3
   1b8a4:	4b0e      	ldr	r3, [pc, #56]	; (1b8e0 <xQueueGenericSendFromISR+0x224>)
   1b8a6:	4798      	blx	r3

	return xReturn;
   1b8a8:	69fb      	ldr	r3, [r7, #28]
}
   1b8aa:	0018      	movs	r0, r3
   1b8ac:	46bd      	mov	sp, r7
   1b8ae:	b008      	add	sp, #32
   1b8b0:	bdb0      	pop	{r4, r5, r7, pc}
   1b8b2:	46c0      	nop			; (mov r8, r8)
   1b8b4:	0001ad1d 	.word	0x0001ad1d
   1b8b8:	00018d89 	.word	0x00018d89
   1b8bc:	20000110 	.word	0x20000110
   1b8c0:	00018c89 	.word	0x00018c89
   1b8c4:	20000104 	.word	0x20000104
   1b8c8:	00018d69 	.word	0x00018d69
   1b8cc:	000196c1 	.word	0x000196c1
   1b8d0:	00019d1d 	.word	0x00019d1d
   1b8d4:	0001c495 	.word	0x0001c495
   1b8d8:	0001c799 	.word	0x0001c799
   1b8dc:	0001d559 	.word	0x0001d559
   1b8e0:	0001ad29 	.word	0x0001ad29

0001b8e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b8e4:	b580      	push	{r7, lr}
   1b8e6:	b082      	sub	sp, #8
   1b8e8:	af00      	add	r7, sp, #0
   1b8ea:	6078      	str	r0, [r7, #4]
   1b8ec:	6039      	str	r1, [r7, #0]
   1b8ee:	6839      	ldr	r1, [r7, #0]
   1b8f0:	687b      	ldr	r3, [r7, #4]
   1b8f2:	2200      	movs	r2, #0
   1b8f4:	0018      	movs	r0, r3
   1b8f6:	4b03      	ldr	r3, [pc, #12]	; (1b904 <xQueueGiveFromISR+0x20>)
   1b8f8:	4798      	blx	r3
   1b8fa:	0003      	movs	r3, r0
   1b8fc:	0018      	movs	r0, r3
   1b8fe:	46bd      	mov	sp, r7
   1b900:	b002      	add	sp, #8
   1b902:	bd80      	pop	{r7, pc}
   1b904:	0001b909 	.word	0x0001b909

0001b908 <MyWrapper>:
{
   1b908:	b5b0      	push	{r4, r5, r7, lr}
   1b90a:	b08a      	sub	sp, #40	; 0x28
   1b90c:	af00      	add	r7, sp, #0
   1b90e:	60f8      	str	r0, [r7, #12]
   1b910:	60b9      	str	r1, [r7, #8]
   1b912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b914:	68fb      	ldr	r3, [r7, #12]
   1b916:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b918:	6a3b      	ldr	r3, [r7, #32]
   1b91a:	2b00      	cmp	r3, #0
   1b91c:	d101      	bne.n	1b922 <MyWrapper+0x1a>
   1b91e:	b672      	cpsid	i
   1b920:	e7fe      	b.n	1b920 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b922:	6a3b      	ldr	r3, [r7, #32]
   1b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b926:	2b00      	cmp	r3, #0
   1b928:	d001      	beq.n	1b92e <MyWrapper+0x26>
   1b92a:	b672      	cpsid	i
   1b92c:	e7fe      	b.n	1b92c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b92e:	6a3b      	ldr	r3, [r7, #32]
   1b930:	681b      	ldr	r3, [r3, #0]
   1b932:	2b00      	cmp	r3, #0
   1b934:	d103      	bne.n	1b93e <MyWrapper+0x36>
   1b936:	6a3b      	ldr	r3, [r7, #32]
   1b938:	685b      	ldr	r3, [r3, #4]
   1b93a:	2b00      	cmp	r3, #0
   1b93c:	d101      	bne.n	1b942 <MyWrapper+0x3a>
   1b93e:	2301      	movs	r3, #1
   1b940:	e000      	b.n	1b944 <MyWrapper+0x3c>
   1b942:	2300      	movs	r3, #0
   1b944:	2b00      	cmp	r3, #0
   1b946:	d101      	bne.n	1b94c <MyWrapper+0x44>
   1b948:	b672      	cpsid	i
   1b94a:	e7fe      	b.n	1b94a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b94c:	4b66      	ldr	r3, [pc, #408]	; (1bae8 <MyWrapper+0x1e0>)
   1b94e:	4798      	blx	r3
   1b950:	0003      	movs	r3, r0
   1b952:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b954:	6a3b      	ldr	r3, [r7, #32]
   1b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b958:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b95a:	6a3b      	ldr	r3, [r7, #32]
   1b95c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b95e:	69bb      	ldr	r3, [r7, #24]
   1b960:	429a      	cmp	r2, r3
   1b962:	d800      	bhi.n	1b966 <MyWrapper+0x5e>
   1b964:	e085      	b.n	1ba72 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b966:	2317      	movs	r3, #23
   1b968:	18fb      	adds	r3, r7, r3
   1b96a:	6a3a      	ldr	r2, [r7, #32]
   1b96c:	2145      	movs	r1, #69	; 0x45
   1b96e:	5c52      	ldrb	r2, [r2, r1]
   1b970:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b972:	6a3b      	ldr	r3, [r7, #32]
   1b974:	0018      	movs	r0, r3
   1b976:	4b5d      	ldr	r3, [pc, #372]	; (1baec <MyWrapper+0x1e4>)
   1b978:	4798      	blx	r3
   1b97a:	0003      	movs	r3, r0
   1b97c:	001a      	movs	r2, r3
   1b97e:	4b5c      	ldr	r3, [pc, #368]	; (1baf0 <MyWrapper+0x1e8>)
   1b980:	881b      	ldrh	r3, [r3, #0]
   1b982:	4013      	ands	r3, r2
   1b984:	b29b      	uxth	r3, r3
   1b986:	2b00      	cmp	r3, #0
   1b988:	d022      	beq.n	1b9d0 <MyWrapper+0xc8>
   1b98a:	687b      	ldr	r3, [r7, #4]
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	d10b      	bne.n	1b9a8 <MyWrapper+0xa0>
   1b990:	6a3b      	ldr	r3, [r7, #32]
   1b992:	0018      	movs	r0, r3
   1b994:	4b57      	ldr	r3, [pc, #348]	; (1baf4 <MyWrapper+0x1ec>)
   1b996:	4798      	blx	r3
   1b998:	0003      	movs	r3, r0
   1b99a:	001a      	movs	r2, r3
   1b99c:	4b56      	ldr	r3, [pc, #344]	; (1baf8 <MyWrapper+0x1f0>)
   1b99e:	5c9b      	ldrb	r3, [r3, r2]
   1b9a0:	3330      	adds	r3, #48	; 0x30
   1b9a2:	b2db      	uxtb	r3, r3
   1b9a4:	001d      	movs	r5, r3
   1b9a6:	e000      	b.n	1b9aa <MyWrapper+0xa2>
   1b9a8:	2535      	movs	r5, #53	; 0x35
   1b9aa:	6a3b      	ldr	r3, [r7, #32]
   1b9ac:	0018      	movs	r0, r3
   1b9ae:	4b51      	ldr	r3, [pc, #324]	; (1baf4 <MyWrapper+0x1ec>)
   1b9b0:	4798      	blx	r3
   1b9b2:	0003      	movs	r3, r0
   1b9b4:	001a      	movs	r2, r3
   1b9b6:	4b50      	ldr	r3, [pc, #320]	; (1baf8 <MyWrapper+0x1f0>)
   1b9b8:	5c9c      	ldrb	r4, [r3, r2]
   1b9ba:	6a3b      	ldr	r3, [r7, #32]
   1b9bc:	0018      	movs	r0, r3
   1b9be:	4b4f      	ldr	r3, [pc, #316]	; (1bafc <MyWrapper+0x1f4>)
   1b9c0:	4798      	blx	r3
   1b9c2:	0003      	movs	r3, r0
   1b9c4:	b2db      	uxtb	r3, r3
   1b9c6:	001a      	movs	r2, r3
   1b9c8:	0021      	movs	r1, r4
   1b9ca:	0028      	movs	r0, r5
   1b9cc:	4b4c      	ldr	r3, [pc, #304]	; (1bb00 <MyWrapper+0x1f8>)
   1b9ce:	4798      	blx	r3
   1b9d0:	6a3b      	ldr	r3, [r7, #32]
   1b9d2:	0018      	movs	r0, r3
   1b9d4:	4b47      	ldr	r3, [pc, #284]	; (1baf4 <MyWrapper+0x1ec>)
   1b9d6:	4798      	blx	r3
   1b9d8:	0003      	movs	r3, r0
   1b9da:	001a      	movs	r2, r3
   1b9dc:	4b46      	ldr	r3, [pc, #280]	; (1baf8 <MyWrapper+0x1f0>)
   1b9de:	5c9c      	ldrb	r4, [r3, r2]
   1b9e0:	6a3b      	ldr	r3, [r7, #32]
   1b9e2:	0018      	movs	r0, r3
   1b9e4:	4b45      	ldr	r3, [pc, #276]	; (1bafc <MyWrapper+0x1f4>)
   1b9e6:	4798      	blx	r3
   1b9e8:	0003      	movs	r3, r0
   1b9ea:	b2d9      	uxtb	r1, r3
   1b9ec:	6a3b      	ldr	r3, [r7, #32]
   1b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9f0:	b2db      	uxtb	r3, r3
   1b9f2:	3301      	adds	r3, #1
   1b9f4:	b2db      	uxtb	r3, r3
   1b9f6:	001a      	movs	r2, r3
   1b9f8:	0020      	movs	r0, r4
   1b9fa:	4b42      	ldr	r3, [pc, #264]	; (1bb04 <MyWrapper+0x1fc>)
   1b9fc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b9fe:	69bb      	ldr	r3, [r7, #24]
   1ba00:	1c5a      	adds	r2, r3, #1
   1ba02:	6a3b      	ldr	r3, [r7, #32]
   1ba04:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ba06:	2317      	movs	r3, #23
   1ba08:	18fb      	adds	r3, r7, r3
   1ba0a:	781b      	ldrb	r3, [r3, #0]
   1ba0c:	b25b      	sxtb	r3, r3
   1ba0e:	3301      	adds	r3, #1
   1ba10:	d123      	bne.n	1ba5a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ba12:	6a3b      	ldr	r3, [r7, #32]
   1ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ba16:	2b00      	cmp	r3, #0
   1ba18:	d00d      	beq.n	1ba36 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ba1a:	6a3b      	ldr	r3, [r7, #32]
   1ba1c:	2100      	movs	r1, #0
   1ba1e:	0018      	movs	r0, r3
   1ba20:	4b39      	ldr	r3, [pc, #228]	; (1bb08 <MyWrapper+0x200>)
   1ba22:	4798      	blx	r3
   1ba24:	1e03      	subs	r3, r0, #0
   1ba26:	d021      	beq.n	1ba6c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1ba28:	68bb      	ldr	r3, [r7, #8]
   1ba2a:	2b00      	cmp	r3, #0
   1ba2c:	d01e      	beq.n	1ba6c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1ba2e:	68bb      	ldr	r3, [r7, #8]
   1ba30:	2201      	movs	r2, #1
   1ba32:	601a      	str	r2, [r3, #0]
   1ba34:	e01a      	b.n	1ba6c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ba36:	6a3b      	ldr	r3, [r7, #32]
   1ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ba3a:	2b00      	cmp	r3, #0
   1ba3c:	d016      	beq.n	1ba6c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ba3e:	6a3b      	ldr	r3, [r7, #32]
   1ba40:	3324      	adds	r3, #36	; 0x24
   1ba42:	0018      	movs	r0, r3
   1ba44:	4b31      	ldr	r3, [pc, #196]	; (1bb0c <MyWrapper+0x204>)
   1ba46:	4798      	blx	r3
   1ba48:	1e03      	subs	r3, r0, #0
   1ba4a:	d00f      	beq.n	1ba6c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ba4c:	68bb      	ldr	r3, [r7, #8]
   1ba4e:	2b00      	cmp	r3, #0
   1ba50:	d00c      	beq.n	1ba6c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ba52:	68bb      	ldr	r3, [r7, #8]
   1ba54:	2201      	movs	r2, #1
   1ba56:	601a      	str	r2, [r3, #0]
   1ba58:	e008      	b.n	1ba6c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ba5a:	2317      	movs	r3, #23
   1ba5c:	18fb      	adds	r3, r7, r3
   1ba5e:	781b      	ldrb	r3, [r3, #0]
   1ba60:	3301      	adds	r3, #1
   1ba62:	b2db      	uxtb	r3, r3
   1ba64:	b259      	sxtb	r1, r3
   1ba66:	6a3b      	ldr	r3, [r7, #32]
   1ba68:	2245      	movs	r2, #69	; 0x45
   1ba6a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ba6c:	2301      	movs	r3, #1
   1ba6e:	627b      	str	r3, [r7, #36]	; 0x24
   1ba70:	e030      	b.n	1bad4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ba72:	6a3b      	ldr	r3, [r7, #32]
   1ba74:	0018      	movs	r0, r3
   1ba76:	4b1d      	ldr	r3, [pc, #116]	; (1baec <MyWrapper+0x1e4>)
   1ba78:	4798      	blx	r3
   1ba7a:	0003      	movs	r3, r0
   1ba7c:	001a      	movs	r2, r3
   1ba7e:	4b1c      	ldr	r3, [pc, #112]	; (1baf0 <MyWrapper+0x1e8>)
   1ba80:	881b      	ldrh	r3, [r3, #0]
   1ba82:	4013      	ands	r3, r2
   1ba84:	b29b      	uxth	r3, r3
   1ba86:	2b00      	cmp	r3, #0
   1ba88:	d022      	beq.n	1bad0 <MyWrapper+0x1c8>
   1ba8a:	687b      	ldr	r3, [r7, #4]
   1ba8c:	2b00      	cmp	r3, #0
   1ba8e:	d10b      	bne.n	1baa8 <MyWrapper+0x1a0>
   1ba90:	6a3b      	ldr	r3, [r7, #32]
   1ba92:	0018      	movs	r0, r3
   1ba94:	4b17      	ldr	r3, [pc, #92]	; (1baf4 <MyWrapper+0x1ec>)
   1ba96:	4798      	blx	r3
   1ba98:	0003      	movs	r3, r0
   1ba9a:	001a      	movs	r2, r3
   1ba9c:	4b16      	ldr	r3, [pc, #88]	; (1baf8 <MyWrapper+0x1f0>)
   1ba9e:	5c9b      	ldrb	r3, [r3, r2]
   1baa0:	3358      	adds	r3, #88	; 0x58
   1baa2:	b2db      	uxtb	r3, r3
   1baa4:	001d      	movs	r5, r3
   1baa6:	e000      	b.n	1baaa <MyWrapper+0x1a2>
   1baa8:	255d      	movs	r5, #93	; 0x5d
   1baaa:	6a3b      	ldr	r3, [r7, #32]
   1baac:	0018      	movs	r0, r3
   1baae:	4b11      	ldr	r3, [pc, #68]	; (1baf4 <MyWrapper+0x1ec>)
   1bab0:	4798      	blx	r3
   1bab2:	0003      	movs	r3, r0
   1bab4:	001a      	movs	r2, r3
   1bab6:	4b10      	ldr	r3, [pc, #64]	; (1baf8 <MyWrapper+0x1f0>)
   1bab8:	5c9c      	ldrb	r4, [r3, r2]
   1baba:	6a3b      	ldr	r3, [r7, #32]
   1babc:	0018      	movs	r0, r3
   1babe:	4b0f      	ldr	r3, [pc, #60]	; (1bafc <MyWrapper+0x1f4>)
   1bac0:	4798      	blx	r3
   1bac2:	0003      	movs	r3, r0
   1bac4:	b2db      	uxtb	r3, r3
   1bac6:	001a      	movs	r2, r3
   1bac8:	0021      	movs	r1, r4
   1baca:	0028      	movs	r0, r5
   1bacc:	4b0c      	ldr	r3, [pc, #48]	; (1bb00 <MyWrapper+0x1f8>)
   1bace:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bad0:	2300      	movs	r3, #0
   1bad2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bad4:	69fb      	ldr	r3, [r7, #28]
   1bad6:	0018      	movs	r0, r3
   1bad8:	4b0d      	ldr	r3, [pc, #52]	; (1bb10 <MyWrapper+0x208>)
   1bada:	4798      	blx	r3

	return xReturn;
   1badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bade:	0018      	movs	r0, r3
   1bae0:	46bd      	mov	sp, r7
   1bae2:	b00a      	add	sp, #40	; 0x28
   1bae4:	bdb0      	pop	{r4, r5, r7, pc}
   1bae6:	46c0      	nop			; (mov r8, r8)
   1bae8:	0001ad1d 	.word	0x0001ad1d
   1baec:	00018d89 	.word	0x00018d89
   1baf0:	20000110 	.word	0x20000110
   1baf4:	00018c89 	.word	0x00018c89
   1baf8:	20000104 	.word	0x20000104
   1bafc:	00018d69 	.word	0x00018d69
   1bb00:	000196c1 	.word	0x000196c1
   1bb04:	00019d1d 	.word	0x00019d1d
   1bb08:	0001c799 	.word	0x0001c799
   1bb0c:	0001d559 	.word	0x0001d559
   1bb10:	0001ad29 	.word	0x0001ad29

0001bb14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1bb14:	b5b0      	push	{r4, r5, r7, lr}
   1bb16:	b08a      	sub	sp, #40	; 0x28
   1bb18:	af00      	add	r7, sp, #0
   1bb1a:	60f8      	str	r0, [r7, #12]
   1bb1c:	60b9      	str	r1, [r7, #8]
   1bb1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bb20:	2300      	movs	r3, #0
   1bb22:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bb24:	68fb      	ldr	r3, [r7, #12]
   1bb26:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bb28:	6a3b      	ldr	r3, [r7, #32]
   1bb2a:	2b00      	cmp	r3, #0
   1bb2c:	d101      	bne.n	1bb32 <xQueueReceive+0x1e>
   1bb2e:	b672      	cpsid	i
   1bb30:	e7fe      	b.n	1bb30 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bb32:	68bb      	ldr	r3, [r7, #8]
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d103      	bne.n	1bb40 <xQueueReceive+0x2c>
   1bb38:	6a3b      	ldr	r3, [r7, #32]
   1bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d101      	bne.n	1bb44 <xQueueReceive+0x30>
   1bb40:	2301      	movs	r3, #1
   1bb42:	e000      	b.n	1bb46 <xQueueReceive+0x32>
   1bb44:	2300      	movs	r3, #0
   1bb46:	2b00      	cmp	r3, #0
   1bb48:	d101      	bne.n	1bb4e <xQueueReceive+0x3a>
   1bb4a:	b672      	cpsid	i
   1bb4c:	e7fe      	b.n	1bb4c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bb4e:	4bbf      	ldr	r3, [pc, #764]	; (1be4c <xQueueReceive+0x338>)
   1bb50:	4798      	blx	r3
   1bb52:	1e03      	subs	r3, r0, #0
   1bb54:	d102      	bne.n	1bb5c <xQueueReceive+0x48>
   1bb56:	687b      	ldr	r3, [r7, #4]
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d101      	bne.n	1bb60 <xQueueReceive+0x4c>
   1bb5c:	2301      	movs	r3, #1
   1bb5e:	e000      	b.n	1bb62 <xQueueReceive+0x4e>
   1bb60:	2300      	movs	r3, #0
   1bb62:	2b00      	cmp	r3, #0
   1bb64:	d101      	bne.n	1bb6a <xQueueReceive+0x56>
   1bb66:	b672      	cpsid	i
   1bb68:	e7fe      	b.n	1bb68 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bb6a:	4bb9      	ldr	r3, [pc, #740]	; (1be50 <xQueueReceive+0x33c>)
   1bb6c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bb6e:	6a3b      	ldr	r3, [r7, #32]
   1bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb72:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bb74:	69fb      	ldr	r3, [r7, #28]
   1bb76:	2b00      	cmp	r3, #0
   1bb78:	d100      	bne.n	1bb7c <xQueueReceive+0x68>
   1bb7a:	e07d      	b.n	1bc78 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1bb7c:	68ba      	ldr	r2, [r7, #8]
   1bb7e:	6a3b      	ldr	r3, [r7, #32]
   1bb80:	0011      	movs	r1, r2
   1bb82:	0018      	movs	r0, r3
   1bb84:	4bb3      	ldr	r3, [pc, #716]	; (1be54 <xQueueReceive+0x340>)
   1bb86:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1bb88:	4bb3      	ldr	r3, [pc, #716]	; (1be58 <xQueueReceive+0x344>)
   1bb8a:	4798      	blx	r3
   1bb8c:	0003      	movs	r3, r0
   1bb8e:	0018      	movs	r0, r3
   1bb90:	4bb2      	ldr	r3, [pc, #712]	; (1be5c <xQueueReceive+0x348>)
   1bb92:	4798      	blx	r3
   1bb94:	0003      	movs	r3, r0
   1bb96:	001a      	movs	r2, r3
   1bb98:	4bb1      	ldr	r3, [pc, #708]	; (1be60 <xQueueReceive+0x34c>)
   1bb9a:	881b      	ldrh	r3, [r3, #0]
   1bb9c:	4013      	ands	r3, r2
   1bb9e:	b29b      	uxth	r3, r3
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d029      	beq.n	1bbf8 <xQueueReceive+0xe4>
   1bba4:	6a3b      	ldr	r3, [r7, #32]
   1bba6:	0018      	movs	r0, r3
   1bba8:	4bae      	ldr	r3, [pc, #696]	; (1be64 <xQueueReceive+0x350>)
   1bbaa:	4798      	blx	r3
   1bbac:	0003      	movs	r3, r0
   1bbae:	001a      	movs	r2, r3
   1bbb0:	4bab      	ldr	r3, [pc, #684]	; (1be60 <xQueueReceive+0x34c>)
   1bbb2:	881b      	ldrh	r3, [r3, #0]
   1bbb4:	4013      	ands	r3, r2
   1bbb6:	b29b      	uxth	r3, r3
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d01d      	beq.n	1bbf8 <xQueueReceive+0xe4>
   1bbbc:	6a3b      	ldr	r3, [r7, #32]
   1bbbe:	0018      	movs	r0, r3
   1bbc0:	4ba9      	ldr	r3, [pc, #676]	; (1be68 <xQueueReceive+0x354>)
   1bbc2:	4798      	blx	r3
   1bbc4:	0003      	movs	r3, r0
   1bbc6:	001a      	movs	r2, r3
   1bbc8:	4ba8      	ldr	r3, [pc, #672]	; (1be6c <xQueueReceive+0x358>)
   1bbca:	5c9b      	ldrb	r3, [r3, r2]
   1bbcc:	3328      	adds	r3, #40	; 0x28
   1bbce:	b2db      	uxtb	r3, r3
   1bbd0:	001d      	movs	r5, r3
   1bbd2:	6a3b      	ldr	r3, [r7, #32]
   1bbd4:	0018      	movs	r0, r3
   1bbd6:	4ba4      	ldr	r3, [pc, #656]	; (1be68 <xQueueReceive+0x354>)
   1bbd8:	4798      	blx	r3
   1bbda:	0003      	movs	r3, r0
   1bbdc:	001a      	movs	r2, r3
   1bbde:	4ba3      	ldr	r3, [pc, #652]	; (1be6c <xQueueReceive+0x358>)
   1bbe0:	5c9c      	ldrb	r4, [r3, r2]
   1bbe2:	6a3b      	ldr	r3, [r7, #32]
   1bbe4:	0018      	movs	r0, r3
   1bbe6:	4ba2      	ldr	r3, [pc, #648]	; (1be70 <xQueueReceive+0x35c>)
   1bbe8:	4798      	blx	r3
   1bbea:	0003      	movs	r3, r0
   1bbec:	b2db      	uxtb	r3, r3
   1bbee:	001a      	movs	r2, r3
   1bbf0:	0021      	movs	r1, r4
   1bbf2:	0028      	movs	r0, r5
   1bbf4:	4b9f      	ldr	r3, [pc, #636]	; (1be74 <xQueueReceive+0x360>)
   1bbf6:	4798      	blx	r3
   1bbf8:	6a3b      	ldr	r3, [r7, #32]
   1bbfa:	0018      	movs	r0, r3
   1bbfc:	4b9a      	ldr	r3, [pc, #616]	; (1be68 <xQueueReceive+0x354>)
   1bbfe:	4798      	blx	r3
   1bc00:	0003      	movs	r3, r0
   1bc02:	001a      	movs	r2, r3
   1bc04:	4b99      	ldr	r3, [pc, #612]	; (1be6c <xQueueReceive+0x358>)
   1bc06:	5c9c      	ldrb	r4, [r3, r2]
   1bc08:	6a3b      	ldr	r3, [r7, #32]
   1bc0a:	0018      	movs	r0, r3
   1bc0c:	4b98      	ldr	r3, [pc, #608]	; (1be70 <xQueueReceive+0x35c>)
   1bc0e:	4798      	blx	r3
   1bc10:	0003      	movs	r3, r0
   1bc12:	b2dd      	uxtb	r5, r3
   1bc14:	6a3b      	ldr	r3, [r7, #32]
   1bc16:	0018      	movs	r0, r3
   1bc18:	4b93      	ldr	r3, [pc, #588]	; (1be68 <xQueueReceive+0x354>)
   1bc1a:	4798      	blx	r3
   1bc1c:	0003      	movs	r3, r0
   1bc1e:	001a      	movs	r2, r3
   1bc20:	4b92      	ldr	r3, [pc, #584]	; (1be6c <xQueueReceive+0x358>)
   1bc22:	5c9b      	ldrb	r3, [r3, r2]
   1bc24:	2b02      	cmp	r3, #2
   1bc26:	d108      	bne.n	1bc3a <xQueueReceive+0x126>
   1bc28:	4b8b      	ldr	r3, [pc, #556]	; (1be58 <xQueueReceive+0x344>)
   1bc2a:	4798      	blx	r3
   1bc2c:	0003      	movs	r3, r0
   1bc2e:	0018      	movs	r0, r3
   1bc30:	4b91      	ldr	r3, [pc, #580]	; (1be78 <xQueueReceive+0x364>)
   1bc32:	4798      	blx	r3
   1bc34:	0003      	movs	r3, r0
   1bc36:	b2db      	uxtb	r3, r3
   1bc38:	e004      	b.n	1bc44 <xQueueReceive+0x130>
   1bc3a:	6a3b      	ldr	r3, [r7, #32]
   1bc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc3e:	b2db      	uxtb	r3, r3
   1bc40:	3b01      	subs	r3, #1
   1bc42:	b2db      	uxtb	r3, r3
   1bc44:	001a      	movs	r2, r3
   1bc46:	0029      	movs	r1, r5
   1bc48:	0020      	movs	r0, r4
   1bc4a:	4b8c      	ldr	r3, [pc, #560]	; (1be7c <xQueueReceive+0x368>)
   1bc4c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bc4e:	69fb      	ldr	r3, [r7, #28]
   1bc50:	1e5a      	subs	r2, r3, #1
   1bc52:	6a3b      	ldr	r3, [r7, #32]
   1bc54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bc56:	6a3b      	ldr	r3, [r7, #32]
   1bc58:	691b      	ldr	r3, [r3, #16]
   1bc5a:	2b00      	cmp	r3, #0
   1bc5c:	d008      	beq.n	1bc70 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bc5e:	6a3b      	ldr	r3, [r7, #32]
   1bc60:	3310      	adds	r3, #16
   1bc62:	0018      	movs	r0, r3
   1bc64:	4b86      	ldr	r3, [pc, #536]	; (1be80 <xQueueReceive+0x36c>)
   1bc66:	4798      	blx	r3
   1bc68:	1e03      	subs	r3, r0, #0
   1bc6a:	d001      	beq.n	1bc70 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bc6c:	4b85      	ldr	r3, [pc, #532]	; (1be84 <xQueueReceive+0x370>)
   1bc6e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bc70:	4b85      	ldr	r3, [pc, #532]	; (1be88 <xQueueReceive+0x374>)
   1bc72:	4798      	blx	r3
				return pdPASS;
   1bc74:	2301      	movs	r3, #1
   1bc76:	e15f      	b.n	1bf38 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bc78:	687b      	ldr	r3, [r7, #4]
   1bc7a:	2b00      	cmp	r3, #0
   1bc7c:	d13b      	bne.n	1bcf6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bc7e:	4b82      	ldr	r3, [pc, #520]	; (1be88 <xQueueReceive+0x374>)
   1bc80:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bc82:	4b75      	ldr	r3, [pc, #468]	; (1be58 <xQueueReceive+0x344>)
   1bc84:	4798      	blx	r3
   1bc86:	0003      	movs	r3, r0
   1bc88:	0018      	movs	r0, r3
   1bc8a:	4b74      	ldr	r3, [pc, #464]	; (1be5c <xQueueReceive+0x348>)
   1bc8c:	4798      	blx	r3
   1bc8e:	0003      	movs	r3, r0
   1bc90:	001a      	movs	r2, r3
   1bc92:	4b73      	ldr	r3, [pc, #460]	; (1be60 <xQueueReceive+0x34c>)
   1bc94:	881b      	ldrh	r3, [r3, #0]
   1bc96:	4013      	ands	r3, r2
   1bc98:	b29b      	uxth	r3, r3
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d029      	beq.n	1bcf2 <xQueueReceive+0x1de>
   1bc9e:	6a3b      	ldr	r3, [r7, #32]
   1bca0:	0018      	movs	r0, r3
   1bca2:	4b70      	ldr	r3, [pc, #448]	; (1be64 <xQueueReceive+0x350>)
   1bca4:	4798      	blx	r3
   1bca6:	0003      	movs	r3, r0
   1bca8:	001a      	movs	r2, r3
   1bcaa:	4b6d      	ldr	r3, [pc, #436]	; (1be60 <xQueueReceive+0x34c>)
   1bcac:	881b      	ldrh	r3, [r3, #0]
   1bcae:	4013      	ands	r3, r2
   1bcb0:	b29b      	uxth	r3, r3
   1bcb2:	2b00      	cmp	r3, #0
   1bcb4:	d01d      	beq.n	1bcf2 <xQueueReceive+0x1de>
   1bcb6:	6a3b      	ldr	r3, [r7, #32]
   1bcb8:	0018      	movs	r0, r3
   1bcba:	4b6b      	ldr	r3, [pc, #428]	; (1be68 <xQueueReceive+0x354>)
   1bcbc:	4798      	blx	r3
   1bcbe:	0003      	movs	r3, r0
   1bcc0:	001a      	movs	r2, r3
   1bcc2:	4b6a      	ldr	r3, [pc, #424]	; (1be6c <xQueueReceive+0x358>)
   1bcc4:	5c9b      	ldrb	r3, [r3, r2]
   1bcc6:	3350      	adds	r3, #80	; 0x50
   1bcc8:	b2db      	uxtb	r3, r3
   1bcca:	001d      	movs	r5, r3
   1bccc:	6a3b      	ldr	r3, [r7, #32]
   1bcce:	0018      	movs	r0, r3
   1bcd0:	4b65      	ldr	r3, [pc, #404]	; (1be68 <xQueueReceive+0x354>)
   1bcd2:	4798      	blx	r3
   1bcd4:	0003      	movs	r3, r0
   1bcd6:	001a      	movs	r2, r3
   1bcd8:	4b64      	ldr	r3, [pc, #400]	; (1be6c <xQueueReceive+0x358>)
   1bcda:	5c9c      	ldrb	r4, [r3, r2]
   1bcdc:	6a3b      	ldr	r3, [r7, #32]
   1bcde:	0018      	movs	r0, r3
   1bce0:	4b63      	ldr	r3, [pc, #396]	; (1be70 <xQueueReceive+0x35c>)
   1bce2:	4798      	blx	r3
   1bce4:	0003      	movs	r3, r0
   1bce6:	b2db      	uxtb	r3, r3
   1bce8:	001a      	movs	r2, r3
   1bcea:	0021      	movs	r1, r4
   1bcec:	0028      	movs	r0, r5
   1bcee:	4b61      	ldr	r3, [pc, #388]	; (1be74 <xQueueReceive+0x360>)
   1bcf0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bcf2:	2300      	movs	r3, #0
   1bcf4:	e120      	b.n	1bf38 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcf8:	2b00      	cmp	r3, #0
   1bcfa:	d106      	bne.n	1bd0a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bcfc:	2314      	movs	r3, #20
   1bcfe:	18fb      	adds	r3, r7, r3
   1bd00:	0018      	movs	r0, r3
   1bd02:	4b62      	ldr	r3, [pc, #392]	; (1be8c <xQueueReceive+0x378>)
   1bd04:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bd06:	2301      	movs	r3, #1
   1bd08:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bd0a:	4b5f      	ldr	r3, [pc, #380]	; (1be88 <xQueueReceive+0x374>)
   1bd0c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bd0e:	4b60      	ldr	r3, [pc, #384]	; (1be90 <xQueueReceive+0x37c>)
   1bd10:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bd12:	4b4f      	ldr	r3, [pc, #316]	; (1be50 <xQueueReceive+0x33c>)
   1bd14:	4798      	blx	r3
   1bd16:	6a3b      	ldr	r3, [r7, #32]
   1bd18:	2244      	movs	r2, #68	; 0x44
   1bd1a:	5c9b      	ldrb	r3, [r3, r2]
   1bd1c:	b25b      	sxtb	r3, r3
   1bd1e:	3301      	adds	r3, #1
   1bd20:	d103      	bne.n	1bd2a <xQueueReceive+0x216>
   1bd22:	6a3b      	ldr	r3, [r7, #32]
   1bd24:	2244      	movs	r2, #68	; 0x44
   1bd26:	2100      	movs	r1, #0
   1bd28:	5499      	strb	r1, [r3, r2]
   1bd2a:	6a3b      	ldr	r3, [r7, #32]
   1bd2c:	2245      	movs	r2, #69	; 0x45
   1bd2e:	5c9b      	ldrb	r3, [r3, r2]
   1bd30:	b25b      	sxtb	r3, r3
   1bd32:	3301      	adds	r3, #1
   1bd34:	d103      	bne.n	1bd3e <xQueueReceive+0x22a>
   1bd36:	6a3b      	ldr	r3, [r7, #32]
   1bd38:	2245      	movs	r2, #69	; 0x45
   1bd3a:	2100      	movs	r1, #0
   1bd3c:	5499      	strb	r1, [r3, r2]
   1bd3e:	4b52      	ldr	r3, [pc, #328]	; (1be88 <xQueueReceive+0x374>)
   1bd40:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bd42:	1d3a      	adds	r2, r7, #4
   1bd44:	2314      	movs	r3, #20
   1bd46:	18fb      	adds	r3, r7, r3
   1bd48:	0011      	movs	r1, r2
   1bd4a:	0018      	movs	r0, r3
   1bd4c:	4b51      	ldr	r3, [pc, #324]	; (1be94 <xQueueReceive+0x380>)
   1bd4e:	4798      	blx	r3
   1bd50:	1e03      	subs	r3, r0, #0
   1bd52:	d000      	beq.n	1bd56 <xQueueReceive+0x242>
   1bd54:	e0aa      	b.n	1beac <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bd56:	6a3b      	ldr	r3, [r7, #32]
   1bd58:	0018      	movs	r0, r3
   1bd5a:	4b4f      	ldr	r3, [pc, #316]	; (1be98 <xQueueReceive+0x384>)
   1bd5c:	4798      	blx	r3
   1bd5e:	1e03      	subs	r3, r0, #0
   1bd60:	d06d      	beq.n	1be3e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bd62:	4b3d      	ldr	r3, [pc, #244]	; (1be58 <xQueueReceive+0x344>)
   1bd64:	4798      	blx	r3
   1bd66:	0003      	movs	r3, r0
   1bd68:	0018      	movs	r0, r3
   1bd6a:	4b3c      	ldr	r3, [pc, #240]	; (1be5c <xQueueReceive+0x348>)
   1bd6c:	4798      	blx	r3
   1bd6e:	0003      	movs	r3, r0
   1bd70:	001a      	movs	r2, r3
   1bd72:	4b3b      	ldr	r3, [pc, #236]	; (1be60 <xQueueReceive+0x34c>)
   1bd74:	881b      	ldrh	r3, [r3, #0]
   1bd76:	4013      	ands	r3, r2
   1bd78:	b29b      	uxth	r3, r3
   1bd7a:	2b00      	cmp	r3, #0
   1bd7c:	d029      	beq.n	1bdd2 <xQueueReceive+0x2be>
   1bd7e:	6a3b      	ldr	r3, [r7, #32]
   1bd80:	0018      	movs	r0, r3
   1bd82:	4b38      	ldr	r3, [pc, #224]	; (1be64 <xQueueReceive+0x350>)
   1bd84:	4798      	blx	r3
   1bd86:	0003      	movs	r3, r0
   1bd88:	001a      	movs	r2, r3
   1bd8a:	4b35      	ldr	r3, [pc, #212]	; (1be60 <xQueueReceive+0x34c>)
   1bd8c:	881b      	ldrh	r3, [r3, #0]
   1bd8e:	4013      	ands	r3, r2
   1bd90:	b29b      	uxth	r3, r3
   1bd92:	2b00      	cmp	r3, #0
   1bd94:	d01d      	beq.n	1bdd2 <xQueueReceive+0x2be>
   1bd96:	6a3b      	ldr	r3, [r7, #32]
   1bd98:	0018      	movs	r0, r3
   1bd9a:	4b33      	ldr	r3, [pc, #204]	; (1be68 <xQueueReceive+0x354>)
   1bd9c:	4798      	blx	r3
   1bd9e:	0003      	movs	r3, r0
   1bda0:	001a      	movs	r2, r3
   1bda2:	4b32      	ldr	r3, [pc, #200]	; (1be6c <xQueueReceive+0x358>)
   1bda4:	5c9b      	ldrb	r3, [r3, r2]
   1bda6:	3368      	adds	r3, #104	; 0x68
   1bda8:	b2db      	uxtb	r3, r3
   1bdaa:	001d      	movs	r5, r3
   1bdac:	6a3b      	ldr	r3, [r7, #32]
   1bdae:	0018      	movs	r0, r3
   1bdb0:	4b2d      	ldr	r3, [pc, #180]	; (1be68 <xQueueReceive+0x354>)
   1bdb2:	4798      	blx	r3
   1bdb4:	0003      	movs	r3, r0
   1bdb6:	001a      	movs	r2, r3
   1bdb8:	4b2c      	ldr	r3, [pc, #176]	; (1be6c <xQueueReceive+0x358>)
   1bdba:	5c9c      	ldrb	r4, [r3, r2]
   1bdbc:	6a3b      	ldr	r3, [r7, #32]
   1bdbe:	0018      	movs	r0, r3
   1bdc0:	4b2b      	ldr	r3, [pc, #172]	; (1be70 <xQueueReceive+0x35c>)
   1bdc2:	4798      	blx	r3
   1bdc4:	0003      	movs	r3, r0
   1bdc6:	b2db      	uxtb	r3, r3
   1bdc8:	001a      	movs	r2, r3
   1bdca:	0021      	movs	r1, r4
   1bdcc:	0028      	movs	r0, r5
   1bdce:	4b29      	ldr	r3, [pc, #164]	; (1be74 <xQueueReceive+0x360>)
   1bdd0:	4798      	blx	r3
   1bdd2:	6a3b      	ldr	r3, [r7, #32]
   1bdd4:	0018      	movs	r0, r3
   1bdd6:	4b24      	ldr	r3, [pc, #144]	; (1be68 <xQueueReceive+0x354>)
   1bdd8:	4798      	blx	r3
   1bdda:	0003      	movs	r3, r0
   1bddc:	001a      	movs	r2, r3
   1bdde:	4b23      	ldr	r3, [pc, #140]	; (1be6c <xQueueReceive+0x358>)
   1bde0:	5c9b      	ldrb	r3, [r3, r2]
   1bde2:	2b02      	cmp	r3, #2
   1bde4:	d018      	beq.n	1be18 <xQueueReceive+0x304>
   1bde6:	4b1c      	ldr	r3, [pc, #112]	; (1be58 <xQueueReceive+0x344>)
   1bde8:	4798      	blx	r3
   1bdea:	0003      	movs	r3, r0
   1bdec:	0018      	movs	r0, r3
   1bdee:	4b1b      	ldr	r3, [pc, #108]	; (1be5c <xQueueReceive+0x348>)
   1bdf0:	4798      	blx	r3
   1bdf2:	0003      	movs	r3, r0
   1bdf4:	001a      	movs	r2, r3
   1bdf6:	4b1a      	ldr	r3, [pc, #104]	; (1be60 <xQueueReceive+0x34c>)
   1bdf8:	881b      	ldrh	r3, [r3, #0]
   1bdfa:	4013      	ands	r3, r2
   1bdfc:	b29b      	uxth	r3, r3
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d00a      	beq.n	1be18 <xQueueReceive+0x304>
   1be02:	4b15      	ldr	r3, [pc, #84]	; (1be58 <xQueueReceive+0x344>)
   1be04:	4798      	blx	r3
   1be06:	0003      	movs	r3, r0
   1be08:	0018      	movs	r0, r3
   1be0a:	4b1b      	ldr	r3, [pc, #108]	; (1be78 <xQueueReceive+0x364>)
   1be0c:	4798      	blx	r3
   1be0e:	0003      	movs	r3, r0
   1be10:	b2db      	uxtb	r3, r3
   1be12:	0018      	movs	r0, r3
   1be14:	4b21      	ldr	r3, [pc, #132]	; (1be9c <xQueueReceive+0x388>)
   1be16:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1be18:	6a3b      	ldr	r3, [r7, #32]
   1be1a:	3324      	adds	r3, #36	; 0x24
   1be1c:	687a      	ldr	r2, [r7, #4]
   1be1e:	0011      	movs	r1, r2
   1be20:	0018      	movs	r0, r3
   1be22:	4b1f      	ldr	r3, [pc, #124]	; (1bea0 <xQueueReceive+0x38c>)
   1be24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1be26:	6a3b      	ldr	r3, [r7, #32]
   1be28:	0018      	movs	r0, r3
   1be2a:	4b1e      	ldr	r3, [pc, #120]	; (1bea4 <xQueueReceive+0x390>)
   1be2c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1be2e:	4b1e      	ldr	r3, [pc, #120]	; (1bea8 <xQueueReceive+0x394>)
   1be30:	4798      	blx	r3
   1be32:	1e03      	subs	r3, r0, #0
   1be34:	d000      	beq.n	1be38 <xQueueReceive+0x324>
   1be36:	e698      	b.n	1bb6a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1be38:	4b12      	ldr	r3, [pc, #72]	; (1be84 <xQueueReceive+0x370>)
   1be3a:	4798      	blx	r3
   1be3c:	e695      	b.n	1bb6a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1be3e:	6a3b      	ldr	r3, [r7, #32]
   1be40:	0018      	movs	r0, r3
   1be42:	4b18      	ldr	r3, [pc, #96]	; (1bea4 <xQueueReceive+0x390>)
   1be44:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1be46:	4b18      	ldr	r3, [pc, #96]	; (1bea8 <xQueueReceive+0x394>)
   1be48:	4798      	blx	r3
   1be4a:	e68e      	b.n	1bb6a <xQueueReceive+0x56>
   1be4c:	0001d9e9 	.word	0x0001d9e9
   1be50:	0001acc9 	.word	0x0001acc9
   1be54:	0001c575 	.word	0x0001c575
   1be58:	00018f65 	.word	0x00018f65
   1be5c:	00018cc9 	.word	0x00018cc9
   1be60:	20000110 	.word	0x20000110
   1be64:	00018d89 	.word	0x00018d89
   1be68:	00018c89 	.word	0x00018c89
   1be6c:	20000104 	.word	0x20000104
   1be70:	00018d69 	.word	0x00018d69
   1be74:	000196c1 	.word	0x000196c1
   1be78:	00018ca9 	.word	0x00018ca9
   1be7c:	00019d1d 	.word	0x00019d1d
   1be80:	0001d559 	.word	0x0001d559
   1be84:	0001acb1 	.word	0x0001acb1
   1be88:	0001aced 	.word	0x0001aced
   1be8c:	0001d699 	.word	0x0001d699
   1be90:	0001cf81 	.word	0x0001cf81
   1be94:	0001d6c1 	.word	0x0001d6c1
   1be98:	0001c6b5 	.word	0x0001c6b5
   1be9c:	00019e59 	.word	0x00019e59
   1bea0:	0001d435 	.word	0x0001d435
   1bea4:	0001c5c5 	.word	0x0001c5c5
   1bea8:	0001cf99 	.word	0x0001cf99
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1beac:	6a3b      	ldr	r3, [r7, #32]
   1beae:	0018      	movs	r0, r3
   1beb0:	4b23      	ldr	r3, [pc, #140]	; (1bf40 <xQueueReceive+0x42c>)
   1beb2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1beb4:	4b23      	ldr	r3, [pc, #140]	; (1bf44 <xQueueReceive+0x430>)
   1beb6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1beb8:	6a3b      	ldr	r3, [r7, #32]
   1beba:	0018      	movs	r0, r3
   1bebc:	4b22      	ldr	r3, [pc, #136]	; (1bf48 <xQueueReceive+0x434>)
   1bebe:	4798      	blx	r3
   1bec0:	1e03      	subs	r3, r0, #0
   1bec2:	d100      	bne.n	1bec6 <xQueueReceive+0x3b2>
   1bec4:	e651      	b.n	1bb6a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bec6:	4b21      	ldr	r3, [pc, #132]	; (1bf4c <xQueueReceive+0x438>)
   1bec8:	4798      	blx	r3
   1beca:	0003      	movs	r3, r0
   1becc:	0018      	movs	r0, r3
   1bece:	4b20      	ldr	r3, [pc, #128]	; (1bf50 <xQueueReceive+0x43c>)
   1bed0:	4798      	blx	r3
   1bed2:	0003      	movs	r3, r0
   1bed4:	001a      	movs	r2, r3
   1bed6:	4b1f      	ldr	r3, [pc, #124]	; (1bf54 <xQueueReceive+0x440>)
   1bed8:	881b      	ldrh	r3, [r3, #0]
   1beda:	4013      	ands	r3, r2
   1bedc:	b29b      	uxth	r3, r3
   1bede:	2b00      	cmp	r3, #0
   1bee0:	d029      	beq.n	1bf36 <xQueueReceive+0x422>
   1bee2:	6a3b      	ldr	r3, [r7, #32]
   1bee4:	0018      	movs	r0, r3
   1bee6:	4b1c      	ldr	r3, [pc, #112]	; (1bf58 <xQueueReceive+0x444>)
   1bee8:	4798      	blx	r3
   1beea:	0003      	movs	r3, r0
   1beec:	001a      	movs	r2, r3
   1beee:	4b19      	ldr	r3, [pc, #100]	; (1bf54 <xQueueReceive+0x440>)
   1bef0:	881b      	ldrh	r3, [r3, #0]
   1bef2:	4013      	ands	r3, r2
   1bef4:	b29b      	uxth	r3, r3
   1bef6:	2b00      	cmp	r3, #0
   1bef8:	d01d      	beq.n	1bf36 <xQueueReceive+0x422>
   1befa:	6a3b      	ldr	r3, [r7, #32]
   1befc:	0018      	movs	r0, r3
   1befe:	4b17      	ldr	r3, [pc, #92]	; (1bf5c <xQueueReceive+0x448>)
   1bf00:	4798      	blx	r3
   1bf02:	0003      	movs	r3, r0
   1bf04:	001a      	movs	r2, r3
   1bf06:	4b16      	ldr	r3, [pc, #88]	; (1bf60 <xQueueReceive+0x44c>)
   1bf08:	5c9b      	ldrb	r3, [r3, r2]
   1bf0a:	3350      	adds	r3, #80	; 0x50
   1bf0c:	b2db      	uxtb	r3, r3
   1bf0e:	001d      	movs	r5, r3
   1bf10:	6a3b      	ldr	r3, [r7, #32]
   1bf12:	0018      	movs	r0, r3
   1bf14:	4b11      	ldr	r3, [pc, #68]	; (1bf5c <xQueueReceive+0x448>)
   1bf16:	4798      	blx	r3
   1bf18:	0003      	movs	r3, r0
   1bf1a:	001a      	movs	r2, r3
   1bf1c:	4b10      	ldr	r3, [pc, #64]	; (1bf60 <xQueueReceive+0x44c>)
   1bf1e:	5c9c      	ldrb	r4, [r3, r2]
   1bf20:	6a3b      	ldr	r3, [r7, #32]
   1bf22:	0018      	movs	r0, r3
   1bf24:	4b0f      	ldr	r3, [pc, #60]	; (1bf64 <xQueueReceive+0x450>)
   1bf26:	4798      	blx	r3
   1bf28:	0003      	movs	r3, r0
   1bf2a:	b2db      	uxtb	r3, r3
   1bf2c:	001a      	movs	r2, r3
   1bf2e:	0021      	movs	r1, r4
   1bf30:	0028      	movs	r0, r5
   1bf32:	4b0d      	ldr	r3, [pc, #52]	; (1bf68 <xQueueReceive+0x454>)
   1bf34:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1bf36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1bf38:	0018      	movs	r0, r3
   1bf3a:	46bd      	mov	sp, r7
   1bf3c:	b00a      	add	sp, #40	; 0x28
   1bf3e:	bdb0      	pop	{r4, r5, r7, pc}
   1bf40:	0001c5c5 	.word	0x0001c5c5
   1bf44:	0001cf99 	.word	0x0001cf99
   1bf48:	0001c6b5 	.word	0x0001c6b5
   1bf4c:	00018f65 	.word	0x00018f65
   1bf50:	00018cc9 	.word	0x00018cc9
   1bf54:	20000110 	.word	0x20000110
   1bf58:	00018d89 	.word	0x00018d89
   1bf5c:	00018c89 	.word	0x00018c89
   1bf60:	20000104 	.word	0x20000104
   1bf64:	00018d69 	.word	0x00018d69
   1bf68:	000196c1 	.word	0x000196c1

0001bf6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1bf6c:	b5b0      	push	{r4, r5, r7, lr}
   1bf6e:	b08a      	sub	sp, #40	; 0x28
   1bf70:	af00      	add	r7, sp, #0
   1bf72:	6078      	str	r0, [r7, #4]
   1bf74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1bf76:	2300      	movs	r3, #0
   1bf78:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bf7a:	687b      	ldr	r3, [r7, #4]
   1bf7c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1bf7e:	2300      	movs	r3, #0
   1bf80:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bf82:	69fb      	ldr	r3, [r7, #28]
   1bf84:	2b00      	cmp	r3, #0
   1bf86:	d101      	bne.n	1bf8c <xQueueSemaphoreTake+0x20>
   1bf88:	b672      	cpsid	i
   1bf8a:	e7fe      	b.n	1bf8a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bf8c:	69fb      	ldr	r3, [r7, #28]
   1bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d001      	beq.n	1bf98 <xQueueSemaphoreTake+0x2c>
   1bf94:	b672      	cpsid	i
   1bf96:	e7fe      	b.n	1bf96 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf98:	4bcb      	ldr	r3, [pc, #812]	; (1c2c8 <xQueueSemaphoreTake+0x35c>)
   1bf9a:	4798      	blx	r3
   1bf9c:	1e03      	subs	r3, r0, #0
   1bf9e:	d102      	bne.n	1bfa6 <xQueueSemaphoreTake+0x3a>
   1bfa0:	683b      	ldr	r3, [r7, #0]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d101      	bne.n	1bfaa <xQueueSemaphoreTake+0x3e>
   1bfa6:	2301      	movs	r3, #1
   1bfa8:	e000      	b.n	1bfac <xQueueSemaphoreTake+0x40>
   1bfaa:	2300      	movs	r3, #0
   1bfac:	2b00      	cmp	r3, #0
   1bfae:	d101      	bne.n	1bfb4 <xQueueSemaphoreTake+0x48>
   1bfb0:	b672      	cpsid	i
   1bfb2:	e7fe      	b.n	1bfb2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bfb4:	4bc5      	ldr	r3, [pc, #788]	; (1c2cc <xQueueSemaphoreTake+0x360>)
   1bfb6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1bfb8:	69fb      	ldr	r3, [r7, #28]
   1bfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bfbc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1bfbe:	69bb      	ldr	r3, [r7, #24]
   1bfc0:	2b00      	cmp	r3, #0
   1bfc2:	d100      	bne.n	1bfc6 <xQueueSemaphoreTake+0x5a>
   1bfc4:	e080      	b.n	1c0c8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1bfc6:	4bc2      	ldr	r3, [pc, #776]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1bfc8:	4798      	blx	r3
   1bfca:	0003      	movs	r3, r0
   1bfcc:	0018      	movs	r0, r3
   1bfce:	4bc1      	ldr	r3, [pc, #772]	; (1c2d4 <xQueueSemaphoreTake+0x368>)
   1bfd0:	4798      	blx	r3
   1bfd2:	0003      	movs	r3, r0
   1bfd4:	001a      	movs	r2, r3
   1bfd6:	4bc0      	ldr	r3, [pc, #768]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1bfd8:	881b      	ldrh	r3, [r3, #0]
   1bfda:	4013      	ands	r3, r2
   1bfdc:	b29b      	uxth	r3, r3
   1bfde:	2b00      	cmp	r3, #0
   1bfe0:	d029      	beq.n	1c036 <xQueueSemaphoreTake+0xca>
   1bfe2:	69fb      	ldr	r3, [r7, #28]
   1bfe4:	0018      	movs	r0, r3
   1bfe6:	4bbd      	ldr	r3, [pc, #756]	; (1c2dc <xQueueSemaphoreTake+0x370>)
   1bfe8:	4798      	blx	r3
   1bfea:	0003      	movs	r3, r0
   1bfec:	001a      	movs	r2, r3
   1bfee:	4bba      	ldr	r3, [pc, #744]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1bff0:	881b      	ldrh	r3, [r3, #0]
   1bff2:	4013      	ands	r3, r2
   1bff4:	b29b      	uxth	r3, r3
   1bff6:	2b00      	cmp	r3, #0
   1bff8:	d01d      	beq.n	1c036 <xQueueSemaphoreTake+0xca>
   1bffa:	69fb      	ldr	r3, [r7, #28]
   1bffc:	0018      	movs	r0, r3
   1bffe:	4bb8      	ldr	r3, [pc, #736]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c000:	4798      	blx	r3
   1c002:	0003      	movs	r3, r0
   1c004:	001a      	movs	r2, r3
   1c006:	4bb7      	ldr	r3, [pc, #732]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c008:	5c9b      	ldrb	r3, [r3, r2]
   1c00a:	3328      	adds	r3, #40	; 0x28
   1c00c:	b2db      	uxtb	r3, r3
   1c00e:	001d      	movs	r5, r3
   1c010:	69fb      	ldr	r3, [r7, #28]
   1c012:	0018      	movs	r0, r3
   1c014:	4bb2      	ldr	r3, [pc, #712]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c016:	4798      	blx	r3
   1c018:	0003      	movs	r3, r0
   1c01a:	001a      	movs	r2, r3
   1c01c:	4bb1      	ldr	r3, [pc, #708]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c01e:	5c9c      	ldrb	r4, [r3, r2]
   1c020:	69fb      	ldr	r3, [r7, #28]
   1c022:	0018      	movs	r0, r3
   1c024:	4bb0      	ldr	r3, [pc, #704]	; (1c2e8 <xQueueSemaphoreTake+0x37c>)
   1c026:	4798      	blx	r3
   1c028:	0003      	movs	r3, r0
   1c02a:	b2db      	uxtb	r3, r3
   1c02c:	001a      	movs	r2, r3
   1c02e:	0021      	movs	r1, r4
   1c030:	0028      	movs	r0, r5
   1c032:	4bae      	ldr	r3, [pc, #696]	; (1c2ec <xQueueSemaphoreTake+0x380>)
   1c034:	4798      	blx	r3
   1c036:	69fb      	ldr	r3, [r7, #28]
   1c038:	0018      	movs	r0, r3
   1c03a:	4ba9      	ldr	r3, [pc, #676]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c03c:	4798      	blx	r3
   1c03e:	0003      	movs	r3, r0
   1c040:	001a      	movs	r2, r3
   1c042:	4ba8      	ldr	r3, [pc, #672]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c044:	5c9c      	ldrb	r4, [r3, r2]
   1c046:	69fb      	ldr	r3, [r7, #28]
   1c048:	0018      	movs	r0, r3
   1c04a:	4ba7      	ldr	r3, [pc, #668]	; (1c2e8 <xQueueSemaphoreTake+0x37c>)
   1c04c:	4798      	blx	r3
   1c04e:	0003      	movs	r3, r0
   1c050:	b2dd      	uxtb	r5, r3
   1c052:	69fb      	ldr	r3, [r7, #28]
   1c054:	0018      	movs	r0, r3
   1c056:	4ba2      	ldr	r3, [pc, #648]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c058:	4798      	blx	r3
   1c05a:	0003      	movs	r3, r0
   1c05c:	001a      	movs	r2, r3
   1c05e:	4ba1      	ldr	r3, [pc, #644]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c060:	5c9b      	ldrb	r3, [r3, r2]
   1c062:	2b02      	cmp	r3, #2
   1c064:	d108      	bne.n	1c078 <xQueueSemaphoreTake+0x10c>
   1c066:	4b9a      	ldr	r3, [pc, #616]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1c068:	4798      	blx	r3
   1c06a:	0003      	movs	r3, r0
   1c06c:	0018      	movs	r0, r3
   1c06e:	4ba0      	ldr	r3, [pc, #640]	; (1c2f0 <xQueueSemaphoreTake+0x384>)
   1c070:	4798      	blx	r3
   1c072:	0003      	movs	r3, r0
   1c074:	b2db      	uxtb	r3, r3
   1c076:	e004      	b.n	1c082 <xQueueSemaphoreTake+0x116>
   1c078:	69fb      	ldr	r3, [r7, #28]
   1c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c07c:	b2db      	uxtb	r3, r3
   1c07e:	3b01      	subs	r3, #1
   1c080:	b2db      	uxtb	r3, r3
   1c082:	001a      	movs	r2, r3
   1c084:	0029      	movs	r1, r5
   1c086:	0020      	movs	r0, r4
   1c088:	4b9a      	ldr	r3, [pc, #616]	; (1c2f4 <xQueueSemaphoreTake+0x388>)
   1c08a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c08c:	69bb      	ldr	r3, [r7, #24]
   1c08e:	1e5a      	subs	r2, r3, #1
   1c090:	69fb      	ldr	r3, [r7, #28]
   1c092:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c094:	69fb      	ldr	r3, [r7, #28]
   1c096:	681b      	ldr	r3, [r3, #0]
   1c098:	2b00      	cmp	r3, #0
   1c09a:	d104      	bne.n	1c0a6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c09c:	4b96      	ldr	r3, [pc, #600]	; (1c2f8 <xQueueSemaphoreTake+0x38c>)
   1c09e:	4798      	blx	r3
   1c0a0:	0002      	movs	r2, r0
   1c0a2:	69fb      	ldr	r3, [r7, #28]
   1c0a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c0a6:	69fb      	ldr	r3, [r7, #28]
   1c0a8:	691b      	ldr	r3, [r3, #16]
   1c0aa:	2b00      	cmp	r3, #0
   1c0ac:	d008      	beq.n	1c0c0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c0ae:	69fb      	ldr	r3, [r7, #28]
   1c0b0:	3310      	adds	r3, #16
   1c0b2:	0018      	movs	r0, r3
   1c0b4:	4b91      	ldr	r3, [pc, #580]	; (1c2fc <xQueueSemaphoreTake+0x390>)
   1c0b6:	4798      	blx	r3
   1c0b8:	1e03      	subs	r3, r0, #0
   1c0ba:	d001      	beq.n	1c0c0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c0bc:	4b90      	ldr	r3, [pc, #576]	; (1c300 <xQueueSemaphoreTake+0x394>)
   1c0be:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c0c0:	4b90      	ldr	r3, [pc, #576]	; (1c304 <xQueueSemaphoreTake+0x398>)
   1c0c2:	4798      	blx	r3
				return pdPASS;
   1c0c4:	2301      	movs	r3, #1
   1c0c6:	e18b      	b.n	1c3e0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c0c8:	683b      	ldr	r3, [r7, #0]
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d140      	bne.n	1c150 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c0ce:	6a3b      	ldr	r3, [r7, #32]
   1c0d0:	2b00      	cmp	r3, #0
   1c0d2:	d001      	beq.n	1c0d8 <xQueueSemaphoreTake+0x16c>
   1c0d4:	b672      	cpsid	i
   1c0d6:	e7fe      	b.n	1c0d6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c0d8:	4b8a      	ldr	r3, [pc, #552]	; (1c304 <xQueueSemaphoreTake+0x398>)
   1c0da:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c0dc:	4b7c      	ldr	r3, [pc, #496]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1c0de:	4798      	blx	r3
   1c0e0:	0003      	movs	r3, r0
   1c0e2:	0018      	movs	r0, r3
   1c0e4:	4b7b      	ldr	r3, [pc, #492]	; (1c2d4 <xQueueSemaphoreTake+0x368>)
   1c0e6:	4798      	blx	r3
   1c0e8:	0003      	movs	r3, r0
   1c0ea:	001a      	movs	r2, r3
   1c0ec:	4b7a      	ldr	r3, [pc, #488]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1c0ee:	881b      	ldrh	r3, [r3, #0]
   1c0f0:	4013      	ands	r3, r2
   1c0f2:	b29b      	uxth	r3, r3
   1c0f4:	2b00      	cmp	r3, #0
   1c0f6:	d029      	beq.n	1c14c <xQueueSemaphoreTake+0x1e0>
   1c0f8:	69fb      	ldr	r3, [r7, #28]
   1c0fa:	0018      	movs	r0, r3
   1c0fc:	4b77      	ldr	r3, [pc, #476]	; (1c2dc <xQueueSemaphoreTake+0x370>)
   1c0fe:	4798      	blx	r3
   1c100:	0003      	movs	r3, r0
   1c102:	001a      	movs	r2, r3
   1c104:	4b74      	ldr	r3, [pc, #464]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1c106:	881b      	ldrh	r3, [r3, #0]
   1c108:	4013      	ands	r3, r2
   1c10a:	b29b      	uxth	r3, r3
   1c10c:	2b00      	cmp	r3, #0
   1c10e:	d01d      	beq.n	1c14c <xQueueSemaphoreTake+0x1e0>
   1c110:	69fb      	ldr	r3, [r7, #28]
   1c112:	0018      	movs	r0, r3
   1c114:	4b72      	ldr	r3, [pc, #456]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c116:	4798      	blx	r3
   1c118:	0003      	movs	r3, r0
   1c11a:	001a      	movs	r2, r3
   1c11c:	4b71      	ldr	r3, [pc, #452]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c11e:	5c9b      	ldrb	r3, [r3, r2]
   1c120:	3350      	adds	r3, #80	; 0x50
   1c122:	b2db      	uxtb	r3, r3
   1c124:	001d      	movs	r5, r3
   1c126:	69fb      	ldr	r3, [r7, #28]
   1c128:	0018      	movs	r0, r3
   1c12a:	4b6d      	ldr	r3, [pc, #436]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c12c:	4798      	blx	r3
   1c12e:	0003      	movs	r3, r0
   1c130:	001a      	movs	r2, r3
   1c132:	4b6c      	ldr	r3, [pc, #432]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c134:	5c9c      	ldrb	r4, [r3, r2]
   1c136:	69fb      	ldr	r3, [r7, #28]
   1c138:	0018      	movs	r0, r3
   1c13a:	4b6b      	ldr	r3, [pc, #428]	; (1c2e8 <xQueueSemaphoreTake+0x37c>)
   1c13c:	4798      	blx	r3
   1c13e:	0003      	movs	r3, r0
   1c140:	b2db      	uxtb	r3, r3
   1c142:	001a      	movs	r2, r3
   1c144:	0021      	movs	r1, r4
   1c146:	0028      	movs	r0, r5
   1c148:	4b68      	ldr	r3, [pc, #416]	; (1c2ec <xQueueSemaphoreTake+0x380>)
   1c14a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c14c:	2300      	movs	r3, #0
   1c14e:	e147      	b.n	1c3e0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c152:	2b00      	cmp	r3, #0
   1c154:	d106      	bne.n	1c164 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c156:	230c      	movs	r3, #12
   1c158:	18fb      	adds	r3, r7, r3
   1c15a:	0018      	movs	r0, r3
   1c15c:	4b6a      	ldr	r3, [pc, #424]	; (1c308 <xQueueSemaphoreTake+0x39c>)
   1c15e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c160:	2301      	movs	r3, #1
   1c162:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c164:	4b67      	ldr	r3, [pc, #412]	; (1c304 <xQueueSemaphoreTake+0x398>)
   1c166:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c168:	4b68      	ldr	r3, [pc, #416]	; (1c30c <xQueueSemaphoreTake+0x3a0>)
   1c16a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c16c:	4b57      	ldr	r3, [pc, #348]	; (1c2cc <xQueueSemaphoreTake+0x360>)
   1c16e:	4798      	blx	r3
   1c170:	69fb      	ldr	r3, [r7, #28]
   1c172:	2244      	movs	r2, #68	; 0x44
   1c174:	5c9b      	ldrb	r3, [r3, r2]
   1c176:	b25b      	sxtb	r3, r3
   1c178:	3301      	adds	r3, #1
   1c17a:	d103      	bne.n	1c184 <xQueueSemaphoreTake+0x218>
   1c17c:	69fb      	ldr	r3, [r7, #28]
   1c17e:	2244      	movs	r2, #68	; 0x44
   1c180:	2100      	movs	r1, #0
   1c182:	5499      	strb	r1, [r3, r2]
   1c184:	69fb      	ldr	r3, [r7, #28]
   1c186:	2245      	movs	r2, #69	; 0x45
   1c188:	5c9b      	ldrb	r3, [r3, r2]
   1c18a:	b25b      	sxtb	r3, r3
   1c18c:	3301      	adds	r3, #1
   1c18e:	d103      	bne.n	1c198 <xQueueSemaphoreTake+0x22c>
   1c190:	69fb      	ldr	r3, [r7, #28]
   1c192:	2245      	movs	r2, #69	; 0x45
   1c194:	2100      	movs	r1, #0
   1c196:	5499      	strb	r1, [r3, r2]
   1c198:	4b5a      	ldr	r3, [pc, #360]	; (1c304 <xQueueSemaphoreTake+0x398>)
   1c19a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c19c:	003a      	movs	r2, r7
   1c19e:	230c      	movs	r3, #12
   1c1a0:	18fb      	adds	r3, r7, r3
   1c1a2:	0011      	movs	r1, r2
   1c1a4:	0018      	movs	r0, r3
   1c1a6:	4b5a      	ldr	r3, [pc, #360]	; (1c310 <xQueueSemaphoreTake+0x3a4>)
   1c1a8:	4798      	blx	r3
   1c1aa:	1e03      	subs	r3, r0, #0
   1c1ac:	d000      	beq.n	1c1b0 <xQueueSemaphoreTake+0x244>
   1c1ae:	e0bd      	b.n	1c32c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c1b0:	69fb      	ldr	r3, [r7, #28]
   1c1b2:	0018      	movs	r0, r3
   1c1b4:	4b57      	ldr	r3, [pc, #348]	; (1c314 <xQueueSemaphoreTake+0x3a8>)
   1c1b6:	4798      	blx	r3
   1c1b8:	1e03      	subs	r3, r0, #0
   1c1ba:	d100      	bne.n	1c1be <xQueueSemaphoreTake+0x252>
   1c1bc:	e07c      	b.n	1c2b8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c1be:	4b44      	ldr	r3, [pc, #272]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1c1c0:	4798      	blx	r3
   1c1c2:	0003      	movs	r3, r0
   1c1c4:	0018      	movs	r0, r3
   1c1c6:	4b43      	ldr	r3, [pc, #268]	; (1c2d4 <xQueueSemaphoreTake+0x368>)
   1c1c8:	4798      	blx	r3
   1c1ca:	0003      	movs	r3, r0
   1c1cc:	001a      	movs	r2, r3
   1c1ce:	4b42      	ldr	r3, [pc, #264]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1c1d0:	881b      	ldrh	r3, [r3, #0]
   1c1d2:	4013      	ands	r3, r2
   1c1d4:	b29b      	uxth	r3, r3
   1c1d6:	2b00      	cmp	r3, #0
   1c1d8:	d029      	beq.n	1c22e <xQueueSemaphoreTake+0x2c2>
   1c1da:	69fb      	ldr	r3, [r7, #28]
   1c1dc:	0018      	movs	r0, r3
   1c1de:	4b3f      	ldr	r3, [pc, #252]	; (1c2dc <xQueueSemaphoreTake+0x370>)
   1c1e0:	4798      	blx	r3
   1c1e2:	0003      	movs	r3, r0
   1c1e4:	001a      	movs	r2, r3
   1c1e6:	4b3c      	ldr	r3, [pc, #240]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1c1e8:	881b      	ldrh	r3, [r3, #0]
   1c1ea:	4013      	ands	r3, r2
   1c1ec:	b29b      	uxth	r3, r3
   1c1ee:	2b00      	cmp	r3, #0
   1c1f0:	d01d      	beq.n	1c22e <xQueueSemaphoreTake+0x2c2>
   1c1f2:	69fb      	ldr	r3, [r7, #28]
   1c1f4:	0018      	movs	r0, r3
   1c1f6:	4b3a      	ldr	r3, [pc, #232]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c1f8:	4798      	blx	r3
   1c1fa:	0003      	movs	r3, r0
   1c1fc:	001a      	movs	r2, r3
   1c1fe:	4b39      	ldr	r3, [pc, #228]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c200:	5c9b      	ldrb	r3, [r3, r2]
   1c202:	3368      	adds	r3, #104	; 0x68
   1c204:	b2db      	uxtb	r3, r3
   1c206:	001d      	movs	r5, r3
   1c208:	69fb      	ldr	r3, [r7, #28]
   1c20a:	0018      	movs	r0, r3
   1c20c:	4b34      	ldr	r3, [pc, #208]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c20e:	4798      	blx	r3
   1c210:	0003      	movs	r3, r0
   1c212:	001a      	movs	r2, r3
   1c214:	4b33      	ldr	r3, [pc, #204]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c216:	5c9c      	ldrb	r4, [r3, r2]
   1c218:	69fb      	ldr	r3, [r7, #28]
   1c21a:	0018      	movs	r0, r3
   1c21c:	4b32      	ldr	r3, [pc, #200]	; (1c2e8 <xQueueSemaphoreTake+0x37c>)
   1c21e:	4798      	blx	r3
   1c220:	0003      	movs	r3, r0
   1c222:	b2db      	uxtb	r3, r3
   1c224:	001a      	movs	r2, r3
   1c226:	0021      	movs	r1, r4
   1c228:	0028      	movs	r0, r5
   1c22a:	4b30      	ldr	r3, [pc, #192]	; (1c2ec <xQueueSemaphoreTake+0x380>)
   1c22c:	4798      	blx	r3
   1c22e:	69fb      	ldr	r3, [r7, #28]
   1c230:	0018      	movs	r0, r3
   1c232:	4b2b      	ldr	r3, [pc, #172]	; (1c2e0 <xQueueSemaphoreTake+0x374>)
   1c234:	4798      	blx	r3
   1c236:	0003      	movs	r3, r0
   1c238:	001a      	movs	r2, r3
   1c23a:	4b2a      	ldr	r3, [pc, #168]	; (1c2e4 <xQueueSemaphoreTake+0x378>)
   1c23c:	5c9b      	ldrb	r3, [r3, r2]
   1c23e:	2b02      	cmp	r3, #2
   1c240:	d018      	beq.n	1c274 <xQueueSemaphoreTake+0x308>
   1c242:	4b23      	ldr	r3, [pc, #140]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1c244:	4798      	blx	r3
   1c246:	0003      	movs	r3, r0
   1c248:	0018      	movs	r0, r3
   1c24a:	4b22      	ldr	r3, [pc, #136]	; (1c2d4 <xQueueSemaphoreTake+0x368>)
   1c24c:	4798      	blx	r3
   1c24e:	0003      	movs	r3, r0
   1c250:	001a      	movs	r2, r3
   1c252:	4b21      	ldr	r3, [pc, #132]	; (1c2d8 <xQueueSemaphoreTake+0x36c>)
   1c254:	881b      	ldrh	r3, [r3, #0]
   1c256:	4013      	ands	r3, r2
   1c258:	b29b      	uxth	r3, r3
   1c25a:	2b00      	cmp	r3, #0
   1c25c:	d00a      	beq.n	1c274 <xQueueSemaphoreTake+0x308>
   1c25e:	4b1c      	ldr	r3, [pc, #112]	; (1c2d0 <xQueueSemaphoreTake+0x364>)
   1c260:	4798      	blx	r3
   1c262:	0003      	movs	r3, r0
   1c264:	0018      	movs	r0, r3
   1c266:	4b22      	ldr	r3, [pc, #136]	; (1c2f0 <xQueueSemaphoreTake+0x384>)
   1c268:	4798      	blx	r3
   1c26a:	0003      	movs	r3, r0
   1c26c:	b2db      	uxtb	r3, r3
   1c26e:	0018      	movs	r0, r3
   1c270:	4b29      	ldr	r3, [pc, #164]	; (1c318 <xQueueSemaphoreTake+0x3ac>)
   1c272:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c274:	69fb      	ldr	r3, [r7, #28]
   1c276:	681b      	ldr	r3, [r3, #0]
   1c278:	2b00      	cmp	r3, #0
   1c27a:	d10a      	bne.n	1c292 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c27c:	4b13      	ldr	r3, [pc, #76]	; (1c2cc <xQueueSemaphoreTake+0x360>)
   1c27e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c280:	69fb      	ldr	r3, [r7, #28]
   1c282:	685b      	ldr	r3, [r3, #4]
   1c284:	0018      	movs	r0, r3
   1c286:	4b25      	ldr	r3, [pc, #148]	; (1c31c <xQueueSemaphoreTake+0x3b0>)
   1c288:	4798      	blx	r3
   1c28a:	0003      	movs	r3, r0
   1c28c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c28e:	4b1d      	ldr	r3, [pc, #116]	; (1c304 <xQueueSemaphoreTake+0x398>)
   1c290:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c292:	69fb      	ldr	r3, [r7, #28]
   1c294:	3324      	adds	r3, #36	; 0x24
   1c296:	683a      	ldr	r2, [r7, #0]
   1c298:	0011      	movs	r1, r2
   1c29a:	0018      	movs	r0, r3
   1c29c:	4b20      	ldr	r3, [pc, #128]	; (1c320 <xQueueSemaphoreTake+0x3b4>)
   1c29e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c2a0:	69fb      	ldr	r3, [r7, #28]
   1c2a2:	0018      	movs	r0, r3
   1c2a4:	4b1f      	ldr	r3, [pc, #124]	; (1c324 <xQueueSemaphoreTake+0x3b8>)
   1c2a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c2a8:	4b1f      	ldr	r3, [pc, #124]	; (1c328 <xQueueSemaphoreTake+0x3bc>)
   1c2aa:	4798      	blx	r3
   1c2ac:	1e03      	subs	r3, r0, #0
   1c2ae:	d000      	beq.n	1c2b2 <xQueueSemaphoreTake+0x346>
   1c2b0:	e680      	b.n	1bfb4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c2b2:	4b13      	ldr	r3, [pc, #76]	; (1c300 <xQueueSemaphoreTake+0x394>)
   1c2b4:	4798      	blx	r3
   1c2b6:	e67d      	b.n	1bfb4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c2b8:	69fb      	ldr	r3, [r7, #28]
   1c2ba:	0018      	movs	r0, r3
   1c2bc:	4b19      	ldr	r3, [pc, #100]	; (1c324 <xQueueSemaphoreTake+0x3b8>)
   1c2be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c2c0:	4b19      	ldr	r3, [pc, #100]	; (1c328 <xQueueSemaphoreTake+0x3bc>)
   1c2c2:	4798      	blx	r3
   1c2c4:	e676      	b.n	1bfb4 <xQueueSemaphoreTake+0x48>
   1c2c6:	46c0      	nop			; (mov r8, r8)
   1c2c8:	0001d9e9 	.word	0x0001d9e9
   1c2cc:	0001acc9 	.word	0x0001acc9
   1c2d0:	00018f65 	.word	0x00018f65
   1c2d4:	00018cc9 	.word	0x00018cc9
   1c2d8:	20000110 	.word	0x20000110
   1c2dc:	00018d89 	.word	0x00018d89
   1c2e0:	00018c89 	.word	0x00018c89
   1c2e4:	20000104 	.word	0x20000104
   1c2e8:	00018d69 	.word	0x00018d69
   1c2ec:	000196c1 	.word	0x000196c1
   1c2f0:	00018ca9 	.word	0x00018ca9
   1c2f4:	00019d1d 	.word	0x00019d1d
   1c2f8:	0001deb5 	.word	0x0001deb5
   1c2fc:	0001d559 	.word	0x0001d559
   1c300:	0001acb1 	.word	0x0001acb1
   1c304:	0001aced 	.word	0x0001aced
   1c308:	0001d699 	.word	0x0001d699
   1c30c:	0001cf81 	.word	0x0001cf81
   1c310:	0001d6c1 	.word	0x0001d6c1
   1c314:	0001c6b5 	.word	0x0001c6b5
   1c318:	00019e59 	.word	0x00019e59
   1c31c:	0001da21 	.word	0x0001da21
   1c320:	0001d435 	.word	0x0001d435
   1c324:	0001c5c5 	.word	0x0001c5c5
   1c328:	0001cf99 	.word	0x0001cf99
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c32c:	69fb      	ldr	r3, [r7, #28]
   1c32e:	0018      	movs	r0, r3
   1c330:	4b2d      	ldr	r3, [pc, #180]	; (1c3e8 <xQueueSemaphoreTake+0x47c>)
   1c332:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c334:	4b2d      	ldr	r3, [pc, #180]	; (1c3ec <xQueueSemaphoreTake+0x480>)
   1c336:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c338:	69fb      	ldr	r3, [r7, #28]
   1c33a:	0018      	movs	r0, r3
   1c33c:	4b2c      	ldr	r3, [pc, #176]	; (1c3f0 <xQueueSemaphoreTake+0x484>)
   1c33e:	4798      	blx	r3
   1c340:	1e03      	subs	r3, r0, #0
   1c342:	d100      	bne.n	1c346 <xQueueSemaphoreTake+0x3da>
   1c344:	e636      	b.n	1bfb4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c346:	6a3b      	ldr	r3, [r7, #32]
   1c348:	2b00      	cmp	r3, #0
   1c34a:	d010      	beq.n	1c36e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c34c:	4b29      	ldr	r3, [pc, #164]	; (1c3f4 <xQueueSemaphoreTake+0x488>)
   1c34e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c350:	69fb      	ldr	r3, [r7, #28]
   1c352:	0018      	movs	r0, r3
   1c354:	4b28      	ldr	r3, [pc, #160]	; (1c3f8 <xQueueSemaphoreTake+0x48c>)
   1c356:	4798      	blx	r3
   1c358:	0003      	movs	r3, r0
   1c35a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c35c:	69fb      	ldr	r3, [r7, #28]
   1c35e:	685b      	ldr	r3, [r3, #4]
   1c360:	697a      	ldr	r2, [r7, #20]
   1c362:	0011      	movs	r1, r2
   1c364:	0018      	movs	r0, r3
   1c366:	4b25      	ldr	r3, [pc, #148]	; (1c3fc <xQueueSemaphoreTake+0x490>)
   1c368:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c36a:	4b25      	ldr	r3, [pc, #148]	; (1c400 <xQueueSemaphoreTake+0x494>)
   1c36c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c36e:	4b25      	ldr	r3, [pc, #148]	; (1c404 <xQueueSemaphoreTake+0x498>)
   1c370:	4798      	blx	r3
   1c372:	0003      	movs	r3, r0
   1c374:	0018      	movs	r0, r3
   1c376:	4b24      	ldr	r3, [pc, #144]	; (1c408 <xQueueSemaphoreTake+0x49c>)
   1c378:	4798      	blx	r3
   1c37a:	0003      	movs	r3, r0
   1c37c:	001a      	movs	r2, r3
   1c37e:	4b23      	ldr	r3, [pc, #140]	; (1c40c <xQueueSemaphoreTake+0x4a0>)
   1c380:	881b      	ldrh	r3, [r3, #0]
   1c382:	4013      	ands	r3, r2
   1c384:	b29b      	uxth	r3, r3
   1c386:	2b00      	cmp	r3, #0
   1c388:	d029      	beq.n	1c3de <xQueueSemaphoreTake+0x472>
   1c38a:	69fb      	ldr	r3, [r7, #28]
   1c38c:	0018      	movs	r0, r3
   1c38e:	4b20      	ldr	r3, [pc, #128]	; (1c410 <xQueueSemaphoreTake+0x4a4>)
   1c390:	4798      	blx	r3
   1c392:	0003      	movs	r3, r0
   1c394:	001a      	movs	r2, r3
   1c396:	4b1d      	ldr	r3, [pc, #116]	; (1c40c <xQueueSemaphoreTake+0x4a0>)
   1c398:	881b      	ldrh	r3, [r3, #0]
   1c39a:	4013      	ands	r3, r2
   1c39c:	b29b      	uxth	r3, r3
   1c39e:	2b00      	cmp	r3, #0
   1c3a0:	d01d      	beq.n	1c3de <xQueueSemaphoreTake+0x472>
   1c3a2:	69fb      	ldr	r3, [r7, #28]
   1c3a4:	0018      	movs	r0, r3
   1c3a6:	4b1b      	ldr	r3, [pc, #108]	; (1c414 <xQueueSemaphoreTake+0x4a8>)
   1c3a8:	4798      	blx	r3
   1c3aa:	0003      	movs	r3, r0
   1c3ac:	001a      	movs	r2, r3
   1c3ae:	4b1a      	ldr	r3, [pc, #104]	; (1c418 <xQueueSemaphoreTake+0x4ac>)
   1c3b0:	5c9b      	ldrb	r3, [r3, r2]
   1c3b2:	3350      	adds	r3, #80	; 0x50
   1c3b4:	b2db      	uxtb	r3, r3
   1c3b6:	001d      	movs	r5, r3
   1c3b8:	69fb      	ldr	r3, [r7, #28]
   1c3ba:	0018      	movs	r0, r3
   1c3bc:	4b15      	ldr	r3, [pc, #84]	; (1c414 <xQueueSemaphoreTake+0x4a8>)
   1c3be:	4798      	blx	r3
   1c3c0:	0003      	movs	r3, r0
   1c3c2:	001a      	movs	r2, r3
   1c3c4:	4b14      	ldr	r3, [pc, #80]	; (1c418 <xQueueSemaphoreTake+0x4ac>)
   1c3c6:	5c9c      	ldrb	r4, [r3, r2]
   1c3c8:	69fb      	ldr	r3, [r7, #28]
   1c3ca:	0018      	movs	r0, r3
   1c3cc:	4b13      	ldr	r3, [pc, #76]	; (1c41c <xQueueSemaphoreTake+0x4b0>)
   1c3ce:	4798      	blx	r3
   1c3d0:	0003      	movs	r3, r0
   1c3d2:	b2db      	uxtb	r3, r3
   1c3d4:	001a      	movs	r2, r3
   1c3d6:	0021      	movs	r1, r4
   1c3d8:	0028      	movs	r0, r5
   1c3da:	4b11      	ldr	r3, [pc, #68]	; (1c420 <xQueueSemaphoreTake+0x4b4>)
   1c3dc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c3de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c3e0:	0018      	movs	r0, r3
   1c3e2:	46bd      	mov	sp, r7
   1c3e4:	b00a      	add	sp, #40	; 0x28
   1c3e6:	bdb0      	pop	{r4, r5, r7, pc}
   1c3e8:	0001c5c5 	.word	0x0001c5c5
   1c3ec:	0001cf99 	.word	0x0001cf99
   1c3f0:	0001c6b5 	.word	0x0001c6b5
   1c3f4:	0001acc9 	.word	0x0001acc9
   1c3f8:	0001c467 	.word	0x0001c467
   1c3fc:	0001dd19 	.word	0x0001dd19
   1c400:	0001aced 	.word	0x0001aced
   1c404:	00018f65 	.word	0x00018f65
   1c408:	00018cc9 	.word	0x00018cc9
   1c40c:	20000110 	.word	0x20000110
   1c410:	00018d89 	.word	0x00018d89
   1c414:	00018c89 	.word	0x00018c89
   1c418:	20000104 	.word	0x20000104
   1c41c:	00018d69 	.word	0x00018d69
   1c420:	000196c1 	.word	0x000196c1

0001c424 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c424:	b580      	push	{r7, lr}
   1c426:	b082      	sub	sp, #8
   1c428:	af00      	add	r7, sp, #0
   1c42a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c42c:	687b      	ldr	r3, [r7, #4]
   1c42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c430:	0018      	movs	r0, r3
   1c432:	46bd      	mov	sp, r7
   1c434:	b002      	add	sp, #8
   1c436:	bd80      	pop	{r7, pc}

0001c438 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c438:	b580      	push	{r7, lr}
   1c43a:	b082      	sub	sp, #8
   1c43c:	af00      	add	r7, sp, #0
   1c43e:	6078      	str	r0, [r7, #4]
   1c440:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c442:	687b      	ldr	r3, [r7, #4]
   1c444:	683a      	ldr	r2, [r7, #0]
   1c446:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c448:	46c0      	nop			; (mov r8, r8)
   1c44a:	46bd      	mov	sp, r7
   1c44c:	b002      	add	sp, #8
   1c44e:	bd80      	pop	{r7, pc}

0001c450 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c450:	b580      	push	{r7, lr}
   1c452:	b082      	sub	sp, #8
   1c454:	af00      	add	r7, sp, #0
   1c456:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c458:	687b      	ldr	r3, [r7, #4]
   1c45a:	2250      	movs	r2, #80	; 0x50
   1c45c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c45e:	0018      	movs	r0, r3
   1c460:	46bd      	mov	sp, r7
   1c462:	b002      	add	sp, #8
   1c464:	bd80      	pop	{r7, pc}

0001c466 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c466:	b580      	push	{r7, lr}
   1c468:	b084      	sub	sp, #16
   1c46a:	af00      	add	r7, sp, #0
   1c46c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c46e:	687b      	ldr	r3, [r7, #4]
   1c470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c472:	2b00      	cmp	r3, #0
   1c474:	d006      	beq.n	1c484 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c476:	687b      	ldr	r3, [r7, #4]
   1c478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c47a:	681b      	ldr	r3, [r3, #0]
   1c47c:	2205      	movs	r2, #5
   1c47e:	1ad3      	subs	r3, r2, r3
   1c480:	60fb      	str	r3, [r7, #12]
   1c482:	e001      	b.n	1c488 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c484:	2300      	movs	r3, #0
   1c486:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c488:	68fb      	ldr	r3, [r7, #12]
	}
   1c48a:	0018      	movs	r0, r3
   1c48c:	46bd      	mov	sp, r7
   1c48e:	b004      	add	sp, #16
   1c490:	bd80      	pop	{r7, pc}
	...

0001c494 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c494:	b580      	push	{r7, lr}
   1c496:	b086      	sub	sp, #24
   1c498:	af00      	add	r7, sp, #0
   1c49a:	60f8      	str	r0, [r7, #12]
   1c49c:	60b9      	str	r1, [r7, #8]
   1c49e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c4a0:	2300      	movs	r3, #0
   1c4a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c4a4:	68fb      	ldr	r3, [r7, #12]
   1c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c4a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c4aa:	68fb      	ldr	r3, [r7, #12]
   1c4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4ae:	2b00      	cmp	r3, #0
   1c4b0:	d10e      	bne.n	1c4d0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c4b2:	68fb      	ldr	r3, [r7, #12]
   1c4b4:	681b      	ldr	r3, [r3, #0]
   1c4b6:	2b00      	cmp	r3, #0
   1c4b8:	d14e      	bne.n	1c558 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c4ba:	68fb      	ldr	r3, [r7, #12]
   1c4bc:	685b      	ldr	r3, [r3, #4]
   1c4be:	0018      	movs	r0, r3
   1c4c0:	4b2a      	ldr	r3, [pc, #168]	; (1c56c <prvCopyDataToQueue+0xd8>)
   1c4c2:	4798      	blx	r3
   1c4c4:	0003      	movs	r3, r0
   1c4c6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c4c8:	68fb      	ldr	r3, [r7, #12]
   1c4ca:	2200      	movs	r2, #0
   1c4cc:	605a      	str	r2, [r3, #4]
   1c4ce:	e043      	b.n	1c558 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c4d0:	687b      	ldr	r3, [r7, #4]
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	d119      	bne.n	1c50a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c4d6:	68fb      	ldr	r3, [r7, #12]
   1c4d8:	6898      	ldr	r0, [r3, #8]
   1c4da:	68fb      	ldr	r3, [r7, #12]
   1c4dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c4de:	68bb      	ldr	r3, [r7, #8]
   1c4e0:	0019      	movs	r1, r3
   1c4e2:	4b23      	ldr	r3, [pc, #140]	; (1c570 <prvCopyDataToQueue+0xdc>)
   1c4e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c4e6:	68fb      	ldr	r3, [r7, #12]
   1c4e8:	689a      	ldr	r2, [r3, #8]
   1c4ea:	68fb      	ldr	r3, [r7, #12]
   1c4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c4ee:	18d2      	adds	r2, r2, r3
   1c4f0:	68fb      	ldr	r3, [r7, #12]
   1c4f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c4f4:	68fb      	ldr	r3, [r7, #12]
   1c4f6:	689a      	ldr	r2, [r3, #8]
   1c4f8:	68fb      	ldr	r3, [r7, #12]
   1c4fa:	685b      	ldr	r3, [r3, #4]
   1c4fc:	429a      	cmp	r2, r3
   1c4fe:	d32b      	bcc.n	1c558 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c500:	68fb      	ldr	r3, [r7, #12]
   1c502:	681a      	ldr	r2, [r3, #0]
   1c504:	68fb      	ldr	r3, [r7, #12]
   1c506:	609a      	str	r2, [r3, #8]
   1c508:	e026      	b.n	1c558 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c50a:	68fb      	ldr	r3, [r7, #12]
   1c50c:	68d8      	ldr	r0, [r3, #12]
   1c50e:	68fb      	ldr	r3, [r7, #12]
   1c510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c512:	68bb      	ldr	r3, [r7, #8]
   1c514:	0019      	movs	r1, r3
   1c516:	4b16      	ldr	r3, [pc, #88]	; (1c570 <prvCopyDataToQueue+0xdc>)
   1c518:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c51a:	68fb      	ldr	r3, [r7, #12]
   1c51c:	68da      	ldr	r2, [r3, #12]
   1c51e:	68fb      	ldr	r3, [r7, #12]
   1c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c522:	425b      	negs	r3, r3
   1c524:	18d2      	adds	r2, r2, r3
   1c526:	68fb      	ldr	r3, [r7, #12]
   1c528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c52a:	68fb      	ldr	r3, [r7, #12]
   1c52c:	68da      	ldr	r2, [r3, #12]
   1c52e:	68fb      	ldr	r3, [r7, #12]
   1c530:	681b      	ldr	r3, [r3, #0]
   1c532:	429a      	cmp	r2, r3
   1c534:	d207      	bcs.n	1c546 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c536:	68fb      	ldr	r3, [r7, #12]
   1c538:	685a      	ldr	r2, [r3, #4]
   1c53a:	68fb      	ldr	r3, [r7, #12]
   1c53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c53e:	425b      	negs	r3, r3
   1c540:	18d2      	adds	r2, r2, r3
   1c542:	68fb      	ldr	r3, [r7, #12]
   1c544:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c546:	687b      	ldr	r3, [r7, #4]
   1c548:	2b02      	cmp	r3, #2
   1c54a:	d105      	bne.n	1c558 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c54c:	693b      	ldr	r3, [r7, #16]
   1c54e:	2b00      	cmp	r3, #0
   1c550:	d002      	beq.n	1c558 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c552:	693b      	ldr	r3, [r7, #16]
   1c554:	3b01      	subs	r3, #1
   1c556:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c558:	693b      	ldr	r3, [r7, #16]
   1c55a:	1c5a      	adds	r2, r3, #1
   1c55c:	68fb      	ldr	r3, [r7, #12]
   1c55e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c560:	697b      	ldr	r3, [r7, #20]
}
   1c562:	0018      	movs	r0, r3
   1c564:	46bd      	mov	sp, r7
   1c566:	b006      	add	sp, #24
   1c568:	bd80      	pop	{r7, pc}
   1c56a:	46c0      	nop			; (mov r8, r8)
   1c56c:	0001dbb1 	.word	0x0001dbb1
   1c570:	000356b9 	.word	0x000356b9

0001c574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c574:	b580      	push	{r7, lr}
   1c576:	b082      	sub	sp, #8
   1c578:	af00      	add	r7, sp, #0
   1c57a:	6078      	str	r0, [r7, #4]
   1c57c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c57e:	687b      	ldr	r3, [r7, #4]
   1c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c582:	2b00      	cmp	r3, #0
   1c584:	d018      	beq.n	1c5b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c586:	687b      	ldr	r3, [r7, #4]
   1c588:	68da      	ldr	r2, [r3, #12]
   1c58a:	687b      	ldr	r3, [r7, #4]
   1c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c58e:	18d2      	adds	r2, r2, r3
   1c590:	687b      	ldr	r3, [r7, #4]
   1c592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c594:	687b      	ldr	r3, [r7, #4]
   1c596:	68da      	ldr	r2, [r3, #12]
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	685b      	ldr	r3, [r3, #4]
   1c59c:	429a      	cmp	r2, r3
   1c59e:	d303      	bcc.n	1c5a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c5a0:	687b      	ldr	r3, [r7, #4]
   1c5a2:	681a      	ldr	r2, [r3, #0]
   1c5a4:	687b      	ldr	r3, [r7, #4]
   1c5a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c5a8:	687b      	ldr	r3, [r7, #4]
   1c5aa:	68d9      	ldr	r1, [r3, #12]
   1c5ac:	687b      	ldr	r3, [r7, #4]
   1c5ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c5b0:	683b      	ldr	r3, [r7, #0]
   1c5b2:	0018      	movs	r0, r3
   1c5b4:	4b02      	ldr	r3, [pc, #8]	; (1c5c0 <prvCopyDataFromQueue+0x4c>)
   1c5b6:	4798      	blx	r3
	}
}
   1c5b8:	46c0      	nop			; (mov r8, r8)
   1c5ba:	46bd      	mov	sp, r7
   1c5bc:	b002      	add	sp, #8
   1c5be:	bd80      	pop	{r7, pc}
   1c5c0:	000356b9 	.word	0x000356b9

0001c5c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c5c4:	b580      	push	{r7, lr}
   1c5c6:	b084      	sub	sp, #16
   1c5c8:	af00      	add	r7, sp, #0
   1c5ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c5cc:	4b34      	ldr	r3, [pc, #208]	; (1c6a0 <prvUnlockQueue+0xdc>)
   1c5ce:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c5d0:	230f      	movs	r3, #15
   1c5d2:	18fb      	adds	r3, r7, r3
   1c5d4:	687a      	ldr	r2, [r7, #4]
   1c5d6:	2145      	movs	r1, #69	; 0x45
   1c5d8:	5c52      	ldrb	r2, [r2, r1]
   1c5da:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c5dc:	e022      	b.n	1c624 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d009      	beq.n	1c5fa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c5e6:	687b      	ldr	r3, [r7, #4]
   1c5e8:	2100      	movs	r1, #0
   1c5ea:	0018      	movs	r0, r3
   1c5ec:	4b2d      	ldr	r3, [pc, #180]	; (1c6a4 <prvUnlockQueue+0xe0>)
   1c5ee:	4798      	blx	r3
   1c5f0:	1e03      	subs	r3, r0, #0
   1c5f2:	d00f      	beq.n	1c614 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c5f4:	4b2c      	ldr	r3, [pc, #176]	; (1c6a8 <prvUnlockQueue+0xe4>)
   1c5f6:	4798      	blx	r3
   1c5f8:	e00c      	b.n	1c614 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c5fa:	687b      	ldr	r3, [r7, #4]
   1c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5fe:	2b00      	cmp	r3, #0
   1c600:	d017      	beq.n	1c632 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c602:	687b      	ldr	r3, [r7, #4]
   1c604:	3324      	adds	r3, #36	; 0x24
   1c606:	0018      	movs	r0, r3
   1c608:	4b28      	ldr	r3, [pc, #160]	; (1c6ac <prvUnlockQueue+0xe8>)
   1c60a:	4798      	blx	r3
   1c60c:	1e03      	subs	r3, r0, #0
   1c60e:	d001      	beq.n	1c614 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c610:	4b25      	ldr	r3, [pc, #148]	; (1c6a8 <prvUnlockQueue+0xe4>)
   1c612:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c614:	230f      	movs	r3, #15
   1c616:	18fb      	adds	r3, r7, r3
   1c618:	781b      	ldrb	r3, [r3, #0]
   1c61a:	3b01      	subs	r3, #1
   1c61c:	b2da      	uxtb	r2, r3
   1c61e:	230f      	movs	r3, #15
   1c620:	18fb      	adds	r3, r7, r3
   1c622:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c624:	230f      	movs	r3, #15
   1c626:	18fb      	adds	r3, r7, r3
   1c628:	781b      	ldrb	r3, [r3, #0]
   1c62a:	b25b      	sxtb	r3, r3
   1c62c:	2b00      	cmp	r3, #0
   1c62e:	dcd6      	bgt.n	1c5de <prvUnlockQueue+0x1a>
   1c630:	e000      	b.n	1c634 <prvUnlockQueue+0x70>
						break;
   1c632:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c634:	687b      	ldr	r3, [r7, #4]
   1c636:	2245      	movs	r2, #69	; 0x45
   1c638:	21ff      	movs	r1, #255	; 0xff
   1c63a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c63c:	4b1c      	ldr	r3, [pc, #112]	; (1c6b0 <prvUnlockQueue+0xec>)
   1c63e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c640:	4b17      	ldr	r3, [pc, #92]	; (1c6a0 <prvUnlockQueue+0xdc>)
   1c642:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c644:	230e      	movs	r3, #14
   1c646:	18fb      	adds	r3, r7, r3
   1c648:	687a      	ldr	r2, [r7, #4]
   1c64a:	2144      	movs	r1, #68	; 0x44
   1c64c:	5c52      	ldrb	r2, [r2, r1]
   1c64e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c650:	e014      	b.n	1c67c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c652:	687b      	ldr	r3, [r7, #4]
   1c654:	691b      	ldr	r3, [r3, #16]
   1c656:	2b00      	cmp	r3, #0
   1c658:	d017      	beq.n	1c68a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c65a:	687b      	ldr	r3, [r7, #4]
   1c65c:	3310      	adds	r3, #16
   1c65e:	0018      	movs	r0, r3
   1c660:	4b12      	ldr	r3, [pc, #72]	; (1c6ac <prvUnlockQueue+0xe8>)
   1c662:	4798      	blx	r3
   1c664:	1e03      	subs	r3, r0, #0
   1c666:	d001      	beq.n	1c66c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c668:	4b0f      	ldr	r3, [pc, #60]	; (1c6a8 <prvUnlockQueue+0xe4>)
   1c66a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c66c:	230e      	movs	r3, #14
   1c66e:	18fb      	adds	r3, r7, r3
   1c670:	781b      	ldrb	r3, [r3, #0]
   1c672:	3b01      	subs	r3, #1
   1c674:	b2da      	uxtb	r2, r3
   1c676:	230e      	movs	r3, #14
   1c678:	18fb      	adds	r3, r7, r3
   1c67a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c67c:	230e      	movs	r3, #14
   1c67e:	18fb      	adds	r3, r7, r3
   1c680:	781b      	ldrb	r3, [r3, #0]
   1c682:	b25b      	sxtb	r3, r3
   1c684:	2b00      	cmp	r3, #0
   1c686:	dce4      	bgt.n	1c652 <prvUnlockQueue+0x8e>
   1c688:	e000      	b.n	1c68c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c68a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c68c:	687b      	ldr	r3, [r7, #4]
   1c68e:	2244      	movs	r2, #68	; 0x44
   1c690:	21ff      	movs	r1, #255	; 0xff
   1c692:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c694:	4b06      	ldr	r3, [pc, #24]	; (1c6b0 <prvUnlockQueue+0xec>)
   1c696:	4798      	blx	r3
}
   1c698:	46c0      	nop			; (mov r8, r8)
   1c69a:	46bd      	mov	sp, r7
   1c69c:	b004      	add	sp, #16
   1c69e:	bd80      	pop	{r7, pc}
   1c6a0:	0001acc9 	.word	0x0001acc9
   1c6a4:	0001c799 	.word	0x0001c799
   1c6a8:	0001d76d 	.word	0x0001d76d
   1c6ac:	0001d559 	.word	0x0001d559
   1c6b0:	0001aced 	.word	0x0001aced

0001c6b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c6b4:	b580      	push	{r7, lr}
   1c6b6:	b084      	sub	sp, #16
   1c6b8:	af00      	add	r7, sp, #0
   1c6ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c6bc:	4b08      	ldr	r3, [pc, #32]	; (1c6e0 <prvIsQueueEmpty+0x2c>)
   1c6be:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c6c0:	687b      	ldr	r3, [r7, #4]
   1c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c6c4:	2b00      	cmp	r3, #0
   1c6c6:	d102      	bne.n	1c6ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c6c8:	2301      	movs	r3, #1
   1c6ca:	60fb      	str	r3, [r7, #12]
   1c6cc:	e001      	b.n	1c6d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c6ce:	2300      	movs	r3, #0
   1c6d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c6d2:	4b04      	ldr	r3, [pc, #16]	; (1c6e4 <prvIsQueueEmpty+0x30>)
   1c6d4:	4798      	blx	r3

	return xReturn;
   1c6d6:	68fb      	ldr	r3, [r7, #12]
}
   1c6d8:	0018      	movs	r0, r3
   1c6da:	46bd      	mov	sp, r7
   1c6dc:	b004      	add	sp, #16
   1c6de:	bd80      	pop	{r7, pc}
   1c6e0:	0001acc9 	.word	0x0001acc9
   1c6e4:	0001aced 	.word	0x0001aced

0001c6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c6e8:	b580      	push	{r7, lr}
   1c6ea:	b084      	sub	sp, #16
   1c6ec:	af00      	add	r7, sp, #0
   1c6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c6f0:	4b09      	ldr	r3, [pc, #36]	; (1c718 <prvIsQueueFull+0x30>)
   1c6f2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c6f4:	687b      	ldr	r3, [r7, #4]
   1c6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c6f8:	687b      	ldr	r3, [r7, #4]
   1c6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c6fc:	429a      	cmp	r2, r3
   1c6fe:	d102      	bne.n	1c706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c700:	2301      	movs	r3, #1
   1c702:	60fb      	str	r3, [r7, #12]
   1c704:	e001      	b.n	1c70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c706:	2300      	movs	r3, #0
   1c708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c70a:	4b04      	ldr	r3, [pc, #16]	; (1c71c <prvIsQueueFull+0x34>)
   1c70c:	4798      	blx	r3

	return xReturn;
   1c70e:	68fb      	ldr	r3, [r7, #12]
}
   1c710:	0018      	movs	r0, r3
   1c712:	46bd      	mov	sp, r7
   1c714:	b004      	add	sp, #16
   1c716:	bd80      	pop	{r7, pc}
   1c718:	0001acc9 	.word	0x0001acc9
   1c71c:	0001aced 	.word	0x0001aced

0001c720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c720:	b580      	push	{r7, lr}
   1c722:	b086      	sub	sp, #24
   1c724:	af00      	add	r7, sp, #0
   1c726:	60f8      	str	r0, [r7, #12]
   1c728:	60b9      	str	r1, [r7, #8]
   1c72a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c72c:	68fb      	ldr	r3, [r7, #12]
   1c72e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c730:	4b15      	ldr	r3, [pc, #84]	; (1c788 <vQueueWaitForMessageRestricted+0x68>)
   1c732:	4798      	blx	r3
   1c734:	697b      	ldr	r3, [r7, #20]
   1c736:	2244      	movs	r2, #68	; 0x44
   1c738:	5c9b      	ldrb	r3, [r3, r2]
   1c73a:	b25b      	sxtb	r3, r3
   1c73c:	3301      	adds	r3, #1
   1c73e:	d103      	bne.n	1c748 <vQueueWaitForMessageRestricted+0x28>
   1c740:	697b      	ldr	r3, [r7, #20]
   1c742:	2244      	movs	r2, #68	; 0x44
   1c744:	2100      	movs	r1, #0
   1c746:	5499      	strb	r1, [r3, r2]
   1c748:	697b      	ldr	r3, [r7, #20]
   1c74a:	2245      	movs	r2, #69	; 0x45
   1c74c:	5c9b      	ldrb	r3, [r3, r2]
   1c74e:	b25b      	sxtb	r3, r3
   1c750:	3301      	adds	r3, #1
   1c752:	d103      	bne.n	1c75c <vQueueWaitForMessageRestricted+0x3c>
   1c754:	697b      	ldr	r3, [r7, #20]
   1c756:	2245      	movs	r2, #69	; 0x45
   1c758:	2100      	movs	r1, #0
   1c75a:	5499      	strb	r1, [r3, r2]
   1c75c:	4b0b      	ldr	r3, [pc, #44]	; (1c78c <vQueueWaitForMessageRestricted+0x6c>)
   1c75e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c760:	697b      	ldr	r3, [r7, #20]
   1c762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c764:	2b00      	cmp	r3, #0
   1c766:	d106      	bne.n	1c776 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c768:	697b      	ldr	r3, [r7, #20]
   1c76a:	3324      	adds	r3, #36	; 0x24
   1c76c:	687a      	ldr	r2, [r7, #4]
   1c76e:	68b9      	ldr	r1, [r7, #8]
   1c770:	0018      	movs	r0, r3
   1c772:	4b07      	ldr	r3, [pc, #28]	; (1c790 <vQueueWaitForMessageRestricted+0x70>)
   1c774:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c776:	697b      	ldr	r3, [r7, #20]
   1c778:	0018      	movs	r0, r3
   1c77a:	4b06      	ldr	r3, [pc, #24]	; (1c794 <vQueueWaitForMessageRestricted+0x74>)
   1c77c:	4798      	blx	r3
	}
   1c77e:	46c0      	nop			; (mov r8, r8)
   1c780:	46bd      	mov	sp, r7
   1c782:	b006      	add	sp, #24
   1c784:	bd80      	pop	{r7, pc}
   1c786:	46c0      	nop			; (mov r8, r8)
   1c788:	0001acc9 	.word	0x0001acc9
   1c78c:	0001aced 	.word	0x0001aced
   1c790:	0001d479 	.word	0x0001d479
   1c794:	0001c5c5 	.word	0x0001c5c5

0001c798 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c798:	b5b0      	push	{r4, r5, r7, lr}
   1c79a:	b086      	sub	sp, #24
   1c79c:	af00      	add	r7, sp, #0
   1c79e:	6078      	str	r0, [r7, #4]
   1c7a0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c7a2:	687b      	ldr	r3, [r7, #4]
   1c7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c7a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c7a8:	2300      	movs	r3, #0
   1c7aa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c7ac:	693b      	ldr	r3, [r7, #16]
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d101      	bne.n	1c7b6 <prvNotifyQueueSetContainer+0x1e>
   1c7b2:	b672      	cpsid	i
   1c7b4:	e7fe      	b.n	1c7b4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c7b6:	693b      	ldr	r3, [r7, #16]
   1c7b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c7ba:	693b      	ldr	r3, [r7, #16]
   1c7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c7be:	429a      	cmp	r2, r3
   1c7c0:	d301      	bcc.n	1c7c6 <prvNotifyQueueSetContainer+0x2e>
   1c7c2:	b672      	cpsid	i
   1c7c4:	e7fe      	b.n	1c7c4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c7c6:	693b      	ldr	r3, [r7, #16]
   1c7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c7ca:	693b      	ldr	r3, [r7, #16]
   1c7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c7ce:	429a      	cmp	r2, r3
   1c7d0:	d300      	bcc.n	1c7d4 <prvNotifyQueueSetContainer+0x3c>
   1c7d2:	e08b      	b.n	1c8ec <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c7d4:	230f      	movs	r3, #15
   1c7d6:	18fb      	adds	r3, r7, r3
   1c7d8:	693a      	ldr	r2, [r7, #16]
   1c7da:	2145      	movs	r1, #69	; 0x45
   1c7dc:	5c52      	ldrb	r2, [r2, r1]
   1c7de:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c7e0:	4b45      	ldr	r3, [pc, #276]	; (1c8f8 <prvNotifyQueueSetContainer+0x160>)
   1c7e2:	4798      	blx	r3
   1c7e4:	0003      	movs	r3, r0
   1c7e6:	0018      	movs	r0, r3
   1c7e8:	4b44      	ldr	r3, [pc, #272]	; (1c8fc <prvNotifyQueueSetContainer+0x164>)
   1c7ea:	4798      	blx	r3
   1c7ec:	0003      	movs	r3, r0
   1c7ee:	001a      	movs	r2, r3
   1c7f0:	4b43      	ldr	r3, [pc, #268]	; (1c900 <prvNotifyQueueSetContainer+0x168>)
   1c7f2:	881b      	ldrh	r3, [r3, #0]
   1c7f4:	4013      	ands	r3, r2
   1c7f6:	b29b      	uxth	r3, r3
   1c7f8:	2b00      	cmp	r3, #0
   1c7fa:	d02e      	beq.n	1c85a <prvNotifyQueueSetContainer+0xc2>
   1c7fc:	693b      	ldr	r3, [r7, #16]
   1c7fe:	0018      	movs	r0, r3
   1c800:	4b40      	ldr	r3, [pc, #256]	; (1c904 <prvNotifyQueueSetContainer+0x16c>)
   1c802:	4798      	blx	r3
   1c804:	0003      	movs	r3, r0
   1c806:	001a      	movs	r2, r3
   1c808:	4b3d      	ldr	r3, [pc, #244]	; (1c900 <prvNotifyQueueSetContainer+0x168>)
   1c80a:	881b      	ldrh	r3, [r3, #0]
   1c80c:	4013      	ands	r3, r2
   1c80e:	b29b      	uxth	r3, r3
   1c810:	2b00      	cmp	r3, #0
   1c812:	d022      	beq.n	1c85a <prvNotifyQueueSetContainer+0xc2>
   1c814:	683b      	ldr	r3, [r7, #0]
   1c816:	2b00      	cmp	r3, #0
   1c818:	d10b      	bne.n	1c832 <prvNotifyQueueSetContainer+0x9a>
   1c81a:	693b      	ldr	r3, [r7, #16]
   1c81c:	0018      	movs	r0, r3
   1c81e:	4b3a      	ldr	r3, [pc, #232]	; (1c908 <prvNotifyQueueSetContainer+0x170>)
   1c820:	4798      	blx	r3
   1c822:	0003      	movs	r3, r0
   1c824:	001a      	movs	r2, r3
   1c826:	4b39      	ldr	r3, [pc, #228]	; (1c90c <prvNotifyQueueSetContainer+0x174>)
   1c828:	5c9b      	ldrb	r3, [r3, r2]
   1c82a:	3320      	adds	r3, #32
   1c82c:	b2db      	uxtb	r3, r3
   1c82e:	001d      	movs	r5, r3
   1c830:	e000      	b.n	1c834 <prvNotifyQueueSetContainer+0x9c>
   1c832:	2525      	movs	r5, #37	; 0x25
   1c834:	693b      	ldr	r3, [r7, #16]
   1c836:	0018      	movs	r0, r3
   1c838:	4b33      	ldr	r3, [pc, #204]	; (1c908 <prvNotifyQueueSetContainer+0x170>)
   1c83a:	4798      	blx	r3
   1c83c:	0003      	movs	r3, r0
   1c83e:	001a      	movs	r2, r3
   1c840:	4b32      	ldr	r3, [pc, #200]	; (1c90c <prvNotifyQueueSetContainer+0x174>)
   1c842:	5c9c      	ldrb	r4, [r3, r2]
   1c844:	693b      	ldr	r3, [r7, #16]
   1c846:	0018      	movs	r0, r3
   1c848:	4b31      	ldr	r3, [pc, #196]	; (1c910 <prvNotifyQueueSetContainer+0x178>)
   1c84a:	4798      	blx	r3
   1c84c:	0003      	movs	r3, r0
   1c84e:	b2db      	uxtb	r3, r3
   1c850:	001a      	movs	r2, r3
   1c852:	0021      	movs	r1, r4
   1c854:	0028      	movs	r0, r5
   1c856:	4b2f      	ldr	r3, [pc, #188]	; (1c914 <prvNotifyQueueSetContainer+0x17c>)
   1c858:	4798      	blx	r3
   1c85a:	693b      	ldr	r3, [r7, #16]
   1c85c:	0018      	movs	r0, r3
   1c85e:	4b2a      	ldr	r3, [pc, #168]	; (1c908 <prvNotifyQueueSetContainer+0x170>)
   1c860:	4798      	blx	r3
   1c862:	0003      	movs	r3, r0
   1c864:	001a      	movs	r2, r3
   1c866:	4b29      	ldr	r3, [pc, #164]	; (1c90c <prvNotifyQueueSetContainer+0x174>)
   1c868:	5c9c      	ldrb	r4, [r3, r2]
   1c86a:	693b      	ldr	r3, [r7, #16]
   1c86c:	0018      	movs	r0, r3
   1c86e:	4b28      	ldr	r3, [pc, #160]	; (1c910 <prvNotifyQueueSetContainer+0x178>)
   1c870:	4798      	blx	r3
   1c872:	0003      	movs	r3, r0
   1c874:	b2dd      	uxtb	r5, r3
   1c876:	693b      	ldr	r3, [r7, #16]
   1c878:	0018      	movs	r0, r3
   1c87a:	4b23      	ldr	r3, [pc, #140]	; (1c908 <prvNotifyQueueSetContainer+0x170>)
   1c87c:	4798      	blx	r3
   1c87e:	0003      	movs	r3, r0
   1c880:	001a      	movs	r2, r3
   1c882:	4b22      	ldr	r3, [pc, #136]	; (1c90c <prvNotifyQueueSetContainer+0x174>)
   1c884:	5c9b      	ldrb	r3, [r3, r2]
   1c886:	2b02      	cmp	r3, #2
   1c888:	d005      	beq.n	1c896 <prvNotifyQueueSetContainer+0xfe>
   1c88a:	693b      	ldr	r3, [r7, #16]
   1c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c88e:	b2db      	uxtb	r3, r3
   1c890:	3301      	adds	r3, #1
   1c892:	b2db      	uxtb	r3, r3
   1c894:	e000      	b.n	1c898 <prvNotifyQueueSetContainer+0x100>
   1c896:	2300      	movs	r3, #0
   1c898:	001a      	movs	r2, r3
   1c89a:	0029      	movs	r1, r5
   1c89c:	0020      	movs	r0, r4
   1c89e:	4b1e      	ldr	r3, [pc, #120]	; (1c918 <prvNotifyQueueSetContainer+0x180>)
   1c8a0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c8a2:	683a      	ldr	r2, [r7, #0]
   1c8a4:	1d39      	adds	r1, r7, #4
   1c8a6:	693b      	ldr	r3, [r7, #16]
   1c8a8:	0018      	movs	r0, r3
   1c8aa:	4b1c      	ldr	r3, [pc, #112]	; (1c91c <prvNotifyQueueSetContainer+0x184>)
   1c8ac:	4798      	blx	r3
   1c8ae:	0003      	movs	r3, r0
   1c8b0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c8b2:	230f      	movs	r3, #15
   1c8b4:	18fb      	adds	r3, r7, r3
   1c8b6:	781b      	ldrb	r3, [r3, #0]
   1c8b8:	b25b      	sxtb	r3, r3
   1c8ba:	3301      	adds	r3, #1
   1c8bc:	d10d      	bne.n	1c8da <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c8be:	693b      	ldr	r3, [r7, #16]
   1c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c8c2:	2b00      	cmp	r3, #0
   1c8c4:	d012      	beq.n	1c8ec <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c8c6:	693b      	ldr	r3, [r7, #16]
   1c8c8:	3324      	adds	r3, #36	; 0x24
   1c8ca:	0018      	movs	r0, r3
   1c8cc:	4b14      	ldr	r3, [pc, #80]	; (1c920 <prvNotifyQueueSetContainer+0x188>)
   1c8ce:	4798      	blx	r3
   1c8d0:	1e03      	subs	r3, r0, #0
   1c8d2:	d00b      	beq.n	1c8ec <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c8d4:	2301      	movs	r3, #1
   1c8d6:	617b      	str	r3, [r7, #20]
   1c8d8:	e008      	b.n	1c8ec <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c8da:	230f      	movs	r3, #15
   1c8dc:	18fb      	adds	r3, r7, r3
   1c8de:	781b      	ldrb	r3, [r3, #0]
   1c8e0:	3301      	adds	r3, #1
   1c8e2:	b2db      	uxtb	r3, r3
   1c8e4:	b259      	sxtb	r1, r3
   1c8e6:	693b      	ldr	r3, [r7, #16]
   1c8e8:	2245      	movs	r2, #69	; 0x45
   1c8ea:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c8ec:	697b      	ldr	r3, [r7, #20]
	}
   1c8ee:	0018      	movs	r0, r3
   1c8f0:	46bd      	mov	sp, r7
   1c8f2:	b006      	add	sp, #24
   1c8f4:	bdb0      	pop	{r4, r5, r7, pc}
   1c8f6:	46c0      	nop			; (mov r8, r8)
   1c8f8:	00018f65 	.word	0x00018f65
   1c8fc:	00018cc9 	.word	0x00018cc9
   1c900:	20000110 	.word	0x20000110
   1c904:	00018d89 	.word	0x00018d89
   1c908:	00018c89 	.word	0x00018c89
   1c90c:	20000104 	.word	0x20000104
   1c910:	00018d69 	.word	0x00018d69
   1c914:	000196c1 	.word	0x000196c1
   1c918:	00019d1d 	.word	0x00019d1d
   1c91c:	0001c495 	.word	0x0001c495
   1c920:	0001d559 	.word	0x0001d559

0001c924 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c924:	b590      	push	{r4, r7, lr}
   1c926:	b08d      	sub	sp, #52	; 0x34
   1c928:	af04      	add	r7, sp, #16
   1c92a:	60f8      	str	r0, [r7, #12]
   1c92c:	60b9      	str	r1, [r7, #8]
   1c92e:	603b      	str	r3, [r7, #0]
   1c930:	1dbb      	adds	r3, r7, #6
   1c932:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c934:	1dbb      	adds	r3, r7, #6
   1c936:	881b      	ldrh	r3, [r3, #0]
   1c938:	009b      	lsls	r3, r3, #2
   1c93a:	0018      	movs	r0, r3
   1c93c:	4b1d      	ldr	r3, [pc, #116]	; (1c9b4 <xTaskCreate+0x90>)
   1c93e:	4798      	blx	r3
   1c940:	0003      	movs	r3, r0
   1c942:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c944:	697b      	ldr	r3, [r7, #20]
   1c946:	2b00      	cmp	r3, #0
   1c948:	d010      	beq.n	1c96c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c94a:	2054      	movs	r0, #84	; 0x54
   1c94c:	4b19      	ldr	r3, [pc, #100]	; (1c9b4 <xTaskCreate+0x90>)
   1c94e:	4798      	blx	r3
   1c950:	0003      	movs	r3, r0
   1c952:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c954:	69fb      	ldr	r3, [r7, #28]
   1c956:	2b00      	cmp	r3, #0
   1c958:	d003      	beq.n	1c962 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c95a:	69fb      	ldr	r3, [r7, #28]
   1c95c:	697a      	ldr	r2, [r7, #20]
   1c95e:	631a      	str	r2, [r3, #48]	; 0x30
   1c960:	e006      	b.n	1c970 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c962:	697b      	ldr	r3, [r7, #20]
   1c964:	0018      	movs	r0, r3
   1c966:	4b14      	ldr	r3, [pc, #80]	; (1c9b8 <xTaskCreate+0x94>)
   1c968:	4798      	blx	r3
   1c96a:	e001      	b.n	1c970 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c96c:	2300      	movs	r3, #0
   1c96e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c970:	69fb      	ldr	r3, [r7, #28]
   1c972:	2b00      	cmp	r3, #0
   1c974:	d016      	beq.n	1c9a4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c976:	1dbb      	adds	r3, r7, #6
   1c978:	881a      	ldrh	r2, [r3, #0]
   1c97a:	683c      	ldr	r4, [r7, #0]
   1c97c:	68b9      	ldr	r1, [r7, #8]
   1c97e:	68f8      	ldr	r0, [r7, #12]
   1c980:	2300      	movs	r3, #0
   1c982:	9303      	str	r3, [sp, #12]
   1c984:	69fb      	ldr	r3, [r7, #28]
   1c986:	9302      	str	r3, [sp, #8]
   1c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c98a:	9301      	str	r3, [sp, #4]
   1c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c98e:	9300      	str	r3, [sp, #0]
   1c990:	0023      	movs	r3, r4
   1c992:	4c0a      	ldr	r4, [pc, #40]	; (1c9bc <xTaskCreate+0x98>)
   1c994:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c996:	69fb      	ldr	r3, [r7, #28]
   1c998:	0018      	movs	r0, r3
   1c99a:	4b09      	ldr	r3, [pc, #36]	; (1c9c0 <xTaskCreate+0x9c>)
   1c99c:	4798      	blx	r3
			xReturn = pdPASS;
   1c99e:	2301      	movs	r3, #1
   1c9a0:	61bb      	str	r3, [r7, #24]
   1c9a2:	e002      	b.n	1c9aa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c9a4:	2301      	movs	r3, #1
   1c9a6:	425b      	negs	r3, r3
   1c9a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c9aa:	69bb      	ldr	r3, [r7, #24]
	}
   1c9ac:	0018      	movs	r0, r3
   1c9ae:	46bd      	mov	sp, r7
   1c9b0:	b009      	add	sp, #36	; 0x24
   1c9b2:	bd90      	pop	{r4, r7, pc}
   1c9b4:	0001ae01 	.word	0x0001ae01
   1c9b8:	0001aec5 	.word	0x0001aec5
   1c9bc:	0001c9c5 	.word	0x0001c9c5
   1c9c0:	0001cad5 	.word	0x0001cad5

0001c9c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c9c4:	b580      	push	{r7, lr}
   1c9c6:	b086      	sub	sp, #24
   1c9c8:	af00      	add	r7, sp, #0
   1c9ca:	60f8      	str	r0, [r7, #12]
   1c9cc:	60b9      	str	r1, [r7, #8]
   1c9ce:	607a      	str	r2, [r7, #4]
   1c9d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c9d6:	687b      	ldr	r3, [r7, #4]
   1c9d8:	009b      	lsls	r3, r3, #2
   1c9da:	001a      	movs	r2, r3
   1c9dc:	21a5      	movs	r1, #165	; 0xa5
   1c9de:	4b39      	ldr	r3, [pc, #228]	; (1cac4 <prvInitialiseNewTask+0x100>)
   1c9e0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c9e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c9e6:	687b      	ldr	r3, [r7, #4]
   1c9e8:	4937      	ldr	r1, [pc, #220]	; (1cac8 <prvInitialiseNewTask+0x104>)
   1c9ea:	468c      	mov	ip, r1
   1c9ec:	4463      	add	r3, ip
   1c9ee:	009b      	lsls	r3, r3, #2
   1c9f0:	18d3      	adds	r3, r2, r3
   1c9f2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c9f4:	693b      	ldr	r3, [r7, #16]
   1c9f6:	2207      	movs	r2, #7
   1c9f8:	4393      	bics	r3, r2
   1c9fa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c9fc:	693b      	ldr	r3, [r7, #16]
   1c9fe:	2207      	movs	r2, #7
   1ca00:	4013      	ands	r3, r2
   1ca02:	d001      	beq.n	1ca08 <prvInitialiseNewTask+0x44>
   1ca04:	b672      	cpsid	i
   1ca06:	e7fe      	b.n	1ca06 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ca08:	2300      	movs	r3, #0
   1ca0a:	617b      	str	r3, [r7, #20]
   1ca0c:	e013      	b.n	1ca36 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ca0e:	68ba      	ldr	r2, [r7, #8]
   1ca10:	697b      	ldr	r3, [r7, #20]
   1ca12:	18d3      	adds	r3, r2, r3
   1ca14:	7818      	ldrb	r0, [r3, #0]
   1ca16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca18:	2134      	movs	r1, #52	; 0x34
   1ca1a:	697b      	ldr	r3, [r7, #20]
   1ca1c:	18d3      	adds	r3, r2, r3
   1ca1e:	185b      	adds	r3, r3, r1
   1ca20:	1c02      	adds	r2, r0, #0
   1ca22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1ca24:	68ba      	ldr	r2, [r7, #8]
   1ca26:	697b      	ldr	r3, [r7, #20]
   1ca28:	18d3      	adds	r3, r2, r3
   1ca2a:	781b      	ldrb	r3, [r3, #0]
   1ca2c:	2b00      	cmp	r3, #0
   1ca2e:	d006      	beq.n	1ca3e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ca30:	697b      	ldr	r3, [r7, #20]
   1ca32:	3301      	adds	r3, #1
   1ca34:	617b      	str	r3, [r7, #20]
   1ca36:	697b      	ldr	r3, [r7, #20]
   1ca38:	2b07      	cmp	r3, #7
   1ca3a:	d9e8      	bls.n	1ca0e <prvInitialiseNewTask+0x4a>
   1ca3c:	e000      	b.n	1ca40 <prvInitialiseNewTask+0x7c>
		{
			break;
   1ca3e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca42:	223b      	movs	r2, #59	; 0x3b
   1ca44:	2100      	movs	r1, #0
   1ca46:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ca48:	6a3b      	ldr	r3, [r7, #32]
   1ca4a:	2b04      	cmp	r3, #4
   1ca4c:	d901      	bls.n	1ca52 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ca4e:	2304      	movs	r3, #4
   1ca50:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca54:	6a3a      	ldr	r2, [r7, #32]
   1ca56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca5a:	6a3a      	ldr	r2, [r7, #32]
   1ca5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca60:	2200      	movs	r2, #0
   1ca62:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca66:	3304      	adds	r3, #4
   1ca68:	0018      	movs	r0, r3
   1ca6a:	4b18      	ldr	r3, [pc, #96]	; (1cacc <prvInitialiseNewTask+0x108>)
   1ca6c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca70:	3318      	adds	r3, #24
   1ca72:	0018      	movs	r0, r3
   1ca74:	4b15      	ldr	r3, [pc, #84]	; (1cacc <prvInitialiseNewTask+0x108>)
   1ca76:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ca7e:	6a3b      	ldr	r3, [r7, #32]
   1ca80:	2205      	movs	r2, #5
   1ca82:	1ad2      	subs	r2, r2, r3
   1ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ca8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca90:	2200      	movs	r2, #0
   1ca92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ca96:	2250      	movs	r2, #80	; 0x50
   1ca98:	2100      	movs	r1, #0
   1ca9a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ca9c:	683a      	ldr	r2, [r7, #0]
   1ca9e:	68f9      	ldr	r1, [r7, #12]
   1caa0:	693b      	ldr	r3, [r7, #16]
   1caa2:	0018      	movs	r0, r3
   1caa4:	4b0a      	ldr	r3, [pc, #40]	; (1cad0 <prvInitialiseNewTask+0x10c>)
   1caa6:	4798      	blx	r3
   1caa8:	0002      	movs	r2, r0
   1caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1caac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cab0:	2b00      	cmp	r3, #0
   1cab2:	d002      	beq.n	1caba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1caba:	46c0      	nop			; (mov r8, r8)
   1cabc:	46bd      	mov	sp, r7
   1cabe:	b006      	add	sp, #24
   1cac0:	bd80      	pop	{r7, pc}
   1cac2:	46c0      	nop			; (mov r8, r8)
   1cac4:	000356ef 	.word	0x000356ef
   1cac8:	3fffffff 	.word	0x3fffffff
   1cacc:	0001aa7d 	.word	0x0001aa7d
   1cad0:	0001ab95 	.word	0x0001ab95

0001cad4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1cad4:	b580      	push	{r7, lr}
   1cad6:	b082      	sub	sp, #8
   1cad8:	af00      	add	r7, sp, #0
   1cada:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1cadc:	4b60      	ldr	r3, [pc, #384]	; (1cc60 <prvAddNewTaskToReadyList+0x18c>)
   1cade:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1cae0:	4b60      	ldr	r3, [pc, #384]	; (1cc64 <prvAddNewTaskToReadyList+0x190>)
   1cae2:	681b      	ldr	r3, [r3, #0]
   1cae4:	1c5a      	adds	r2, r3, #1
   1cae6:	4b5f      	ldr	r3, [pc, #380]	; (1cc64 <prvAddNewTaskToReadyList+0x190>)
   1cae8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1caea:	4b5f      	ldr	r3, [pc, #380]	; (1cc68 <prvAddNewTaskToReadyList+0x194>)
   1caec:	681b      	ldr	r3, [r3, #0]
   1caee:	2b00      	cmp	r3, #0
   1caf0:	d109      	bne.n	1cb06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1caf2:	4b5d      	ldr	r3, [pc, #372]	; (1cc68 <prvAddNewTaskToReadyList+0x194>)
   1caf4:	687a      	ldr	r2, [r7, #4]
   1caf6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1caf8:	4b5a      	ldr	r3, [pc, #360]	; (1cc64 <prvAddNewTaskToReadyList+0x190>)
   1cafa:	681b      	ldr	r3, [r3, #0]
   1cafc:	2b01      	cmp	r3, #1
   1cafe:	d110      	bne.n	1cb22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1cb00:	4b5a      	ldr	r3, [pc, #360]	; (1cc6c <prvAddNewTaskToReadyList+0x198>)
   1cb02:	4798      	blx	r3
   1cb04:	e00d      	b.n	1cb22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1cb06:	4b5a      	ldr	r3, [pc, #360]	; (1cc70 <prvAddNewTaskToReadyList+0x19c>)
   1cb08:	681b      	ldr	r3, [r3, #0]
   1cb0a:	2b00      	cmp	r3, #0
   1cb0c:	d109      	bne.n	1cb22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1cb0e:	4b56      	ldr	r3, [pc, #344]	; (1cc68 <prvAddNewTaskToReadyList+0x194>)
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb14:	687b      	ldr	r3, [r7, #4]
   1cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb18:	429a      	cmp	r2, r3
   1cb1a:	d802      	bhi.n	1cb22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1cb1c:	4b52      	ldr	r3, [pc, #328]	; (1cc68 <prvAddNewTaskToReadyList+0x194>)
   1cb1e:	687a      	ldr	r2, [r7, #4]
   1cb20:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cb22:	4b54      	ldr	r3, [pc, #336]	; (1cc74 <prvAddNewTaskToReadyList+0x1a0>)
   1cb24:	681b      	ldr	r3, [r3, #0]
   1cb26:	1c5a      	adds	r2, r3, #1
   1cb28:	4b52      	ldr	r3, [pc, #328]	; (1cc74 <prvAddNewTaskToReadyList+0x1a0>)
   1cb2a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1cb2c:	4b51      	ldr	r3, [pc, #324]	; (1cc74 <prvAddNewTaskToReadyList+0x1a0>)
   1cb2e:	681a      	ldr	r2, [r3, #0]
   1cb30:	687b      	ldr	r3, [r7, #4]
   1cb32:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1cb34:	687b      	ldr	r3, [r7, #4]
   1cb36:	2b00      	cmp	r3, #0
   1cb38:	d052      	beq.n	1cbe0 <prvAddNewTaskToReadyList+0x10c>
   1cb3a:	2003      	movs	r0, #3
   1cb3c:	4b4e      	ldr	r3, [pc, #312]	; (1cc78 <prvAddNewTaskToReadyList+0x1a4>)
   1cb3e:	4798      	blx	r3
   1cb40:	0003      	movs	r3, r0
   1cb42:	b29a      	uxth	r2, r3
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	0011      	movs	r1, r2
   1cb48:	0018      	movs	r0, r3
   1cb4a:	4b4c      	ldr	r3, [pc, #304]	; (1cc7c <prvAddNewTaskToReadyList+0x1a8>)
   1cb4c:	4798      	blx	r3
   1cb4e:	4b4c      	ldr	r3, [pc, #304]	; (1cc80 <prvAddNewTaskToReadyList+0x1ac>)
   1cb50:	881a      	ldrh	r2, [r3, #0]
   1cb52:	687b      	ldr	r3, [r7, #4]
   1cb54:	0011      	movs	r1, r2
   1cb56:	0018      	movs	r0, r3
   1cb58:	4b4a      	ldr	r3, [pc, #296]	; (1cc84 <prvAddNewTaskToReadyList+0x1b0>)
   1cb5a:	4798      	blx	r3
   1cb5c:	687b      	ldr	r3, [r7, #4]
   1cb5e:	0018      	movs	r0, r3
   1cb60:	4b49      	ldr	r3, [pc, #292]	; (1cc88 <prvAddNewTaskToReadyList+0x1b4>)
   1cb62:	4798      	blx	r3
   1cb64:	0003      	movs	r3, r0
   1cb66:	b2d9      	uxtb	r1, r3
   1cb68:	687b      	ldr	r3, [r7, #4]
   1cb6a:	3334      	adds	r3, #52	; 0x34
   1cb6c:	001a      	movs	r2, r3
   1cb6e:	2003      	movs	r0, #3
   1cb70:	4b46      	ldr	r3, [pc, #280]	; (1cc8c <prvAddNewTaskToReadyList+0x1b8>)
   1cb72:	4798      	blx	r3
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	0018      	movs	r0, r3
   1cb78:	4b43      	ldr	r3, [pc, #268]	; (1cc88 <prvAddNewTaskToReadyList+0x1b4>)
   1cb7a:	4798      	blx	r3
   1cb7c:	0003      	movs	r3, r0
   1cb7e:	b2d9      	uxtb	r1, r3
   1cb80:	687b      	ldr	r3, [r7, #4]
   1cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb84:	b2db      	uxtb	r3, r3
   1cb86:	001a      	movs	r2, r3
   1cb88:	2003      	movs	r0, #3
   1cb8a:	4b41      	ldr	r3, [pc, #260]	; (1cc90 <prvAddNewTaskToReadyList+0x1bc>)
   1cb8c:	4798      	blx	r3
   1cb8e:	4b41      	ldr	r3, [pc, #260]	; (1cc94 <prvAddNewTaskToReadyList+0x1c0>)
   1cb90:	4798      	blx	r3
   1cb92:	0003      	movs	r3, r0
   1cb94:	0018      	movs	r0, r3
   1cb96:	4b40      	ldr	r3, [pc, #256]	; (1cc98 <prvAddNewTaskToReadyList+0x1c4>)
   1cb98:	4798      	blx	r3
   1cb9a:	0003      	movs	r3, r0
   1cb9c:	001a      	movs	r2, r3
   1cb9e:	4b3f      	ldr	r3, [pc, #252]	; (1cc9c <prvAddNewTaskToReadyList+0x1c8>)
   1cba0:	881b      	ldrh	r3, [r3, #0]
   1cba2:	4013      	ands	r3, r2
   1cba4:	b29b      	uxth	r3, r3
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	d016      	beq.n	1cbd8 <prvAddNewTaskToReadyList+0x104>
   1cbaa:	687b      	ldr	r3, [r7, #4]
   1cbac:	0018      	movs	r0, r3
   1cbae:	4b3a      	ldr	r3, [pc, #232]	; (1cc98 <prvAddNewTaskToReadyList+0x1c4>)
   1cbb0:	4798      	blx	r3
   1cbb2:	0003      	movs	r3, r0
   1cbb4:	001a      	movs	r2, r3
   1cbb6:	4b39      	ldr	r3, [pc, #228]	; (1cc9c <prvAddNewTaskToReadyList+0x1c8>)
   1cbb8:	881b      	ldrh	r3, [r3, #0]
   1cbba:	4013      	ands	r3, r2
   1cbbc:	b29b      	uxth	r3, r3
   1cbbe:	2b00      	cmp	r3, #0
   1cbc0:	d00a      	beq.n	1cbd8 <prvAddNewTaskToReadyList+0x104>
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	0018      	movs	r0, r3
   1cbc6:	4b30      	ldr	r3, [pc, #192]	; (1cc88 <prvAddNewTaskToReadyList+0x1b4>)
   1cbc8:	4798      	blx	r3
   1cbca:	0003      	movs	r3, r0
   1cbcc:	b2db      	uxtb	r3, r3
   1cbce:	001a      	movs	r2, r3
   1cbd0:	2103      	movs	r1, #3
   1cbd2:	201b      	movs	r0, #27
   1cbd4:	4b32      	ldr	r3, [pc, #200]	; (1cca0 <prvAddNewTaskToReadyList+0x1cc>)
   1cbd6:	4798      	blx	r3
   1cbd8:	687b      	ldr	r3, [r7, #4]
   1cbda:	0018      	movs	r0, r3
   1cbdc:	4b31      	ldr	r3, [pc, #196]	; (1cca4 <prvAddNewTaskToReadyList+0x1d0>)
   1cbde:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cbe0:	687b      	ldr	r3, [r7, #4]
   1cbe2:	0018      	movs	r0, r3
   1cbe4:	4b2c      	ldr	r3, [pc, #176]	; (1cc98 <prvAddNewTaskToReadyList+0x1c4>)
   1cbe6:	4798      	blx	r3
   1cbe8:	0003      	movs	r3, r0
   1cbea:	001a      	movs	r2, r3
   1cbec:	4b2b      	ldr	r3, [pc, #172]	; (1cc9c <prvAddNewTaskToReadyList+0x1c8>)
   1cbee:	881b      	ldrh	r3, [r3, #0]
   1cbf0:	4013      	ands	r3, r2
   1cbf2:	b29b      	uxth	r3, r3
   1cbf4:	2b00      	cmp	r3, #0
   1cbf6:	d008      	beq.n	1cc0a <prvAddNewTaskToReadyList+0x136>
   1cbf8:	687b      	ldr	r3, [r7, #4]
   1cbfa:	0018      	movs	r0, r3
   1cbfc:	4b22      	ldr	r3, [pc, #136]	; (1cc88 <prvAddNewTaskToReadyList+0x1b4>)
   1cbfe:	4798      	blx	r3
   1cc00:	0003      	movs	r3, r0
   1cc02:	b2db      	uxtb	r3, r3
   1cc04:	0018      	movs	r0, r3
   1cc06:	4b28      	ldr	r3, [pc, #160]	; (1cca8 <prvAddNewTaskToReadyList+0x1d4>)
   1cc08:	4798      	blx	r3
   1cc0a:	687b      	ldr	r3, [r7, #4]
   1cc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc0e:	4b27      	ldr	r3, [pc, #156]	; (1ccac <prvAddNewTaskToReadyList+0x1d8>)
   1cc10:	681b      	ldr	r3, [r3, #0]
   1cc12:	429a      	cmp	r2, r3
   1cc14:	d903      	bls.n	1cc1e <prvAddNewTaskToReadyList+0x14a>
   1cc16:	687b      	ldr	r3, [r7, #4]
   1cc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc1a:	4b24      	ldr	r3, [pc, #144]	; (1ccac <prvAddNewTaskToReadyList+0x1d8>)
   1cc1c:	601a      	str	r2, [r3, #0]
   1cc1e:	687b      	ldr	r3, [r7, #4]
   1cc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc22:	0013      	movs	r3, r2
   1cc24:	009b      	lsls	r3, r3, #2
   1cc26:	189b      	adds	r3, r3, r2
   1cc28:	009b      	lsls	r3, r3, #2
   1cc2a:	4a21      	ldr	r2, [pc, #132]	; (1ccb0 <prvAddNewTaskToReadyList+0x1dc>)
   1cc2c:	189a      	adds	r2, r3, r2
   1cc2e:	687b      	ldr	r3, [r7, #4]
   1cc30:	3304      	adds	r3, #4
   1cc32:	0019      	movs	r1, r3
   1cc34:	0010      	movs	r0, r2
   1cc36:	4b1f      	ldr	r3, [pc, #124]	; (1ccb4 <prvAddNewTaskToReadyList+0x1e0>)
   1cc38:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cc3a:	4b1f      	ldr	r3, [pc, #124]	; (1ccb8 <prvAddNewTaskToReadyList+0x1e4>)
   1cc3c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cc3e:	4b0c      	ldr	r3, [pc, #48]	; (1cc70 <prvAddNewTaskToReadyList+0x19c>)
   1cc40:	681b      	ldr	r3, [r3, #0]
   1cc42:	2b00      	cmp	r3, #0
   1cc44:	d008      	beq.n	1cc58 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cc46:	4b08      	ldr	r3, [pc, #32]	; (1cc68 <prvAddNewTaskToReadyList+0x194>)
   1cc48:	681b      	ldr	r3, [r3, #0]
   1cc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc4c:	687b      	ldr	r3, [r7, #4]
   1cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc50:	429a      	cmp	r2, r3
   1cc52:	d201      	bcs.n	1cc58 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cc54:	4b19      	ldr	r3, [pc, #100]	; (1ccbc <prvAddNewTaskToReadyList+0x1e8>)
   1cc56:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cc58:	46c0      	nop			; (mov r8, r8)
   1cc5a:	46bd      	mov	sp, r7
   1cc5c:	b002      	add	sp, #8
   1cc5e:	bd80      	pop	{r7, pc}
   1cc60:	0001acc9 	.word	0x0001acc9
   1cc64:	200041b8 	.word	0x200041b8
   1cc68:	200040e0 	.word	0x200040e0
   1cc6c:	0001d7f5 	.word	0x0001d7f5
   1cc70:	200041c4 	.word	0x200041c4
   1cc74:	200041d4 	.word	0x200041d4
   1cc78:	0001a249 	.word	0x0001a249
   1cc7c:	00018ced 	.word	0x00018ced
   1cc80:	20000112 	.word	0x20000112
   1cc84:	00018d29 	.word	0x00018d29
   1cc88:	00018ca9 	.word	0x00018ca9
   1cc8c:	0001a479 	.word	0x0001a479
   1cc90:	00019bdd 	.word	0x00019bdd
   1cc94:	00018f65 	.word	0x00018f65
   1cc98:	00018cc9 	.word	0x00018cc9
   1cc9c:	20000110 	.word	0x20000110
   1cca0:	000196c1 	.word	0x000196c1
   1cca4:	00018e29 	.word	0x00018e29
   1cca8:	00019479 	.word	0x00019479
   1ccac:	200041c0 	.word	0x200041c0
   1ccb0:	200040e4 	.word	0x200040e4
   1ccb4:	0001aa93 	.word	0x0001aa93
   1ccb8:	0001aced 	.word	0x0001aced
   1ccbc:	0001acb1 	.word	0x0001acb1

0001ccc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ccc0:	b580      	push	{r7, lr}
   1ccc2:	b084      	sub	sp, #16
   1ccc4:	af00      	add	r7, sp, #0
   1ccc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1ccc8:	2300      	movs	r3, #0
   1ccca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cccc:	687b      	ldr	r3, [r7, #4]
   1ccce:	2b00      	cmp	r3, #0
   1ccd0:	d045      	beq.n	1cd5e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1ccd2:	4b27      	ldr	r3, [pc, #156]	; (1cd70 <vTaskDelay+0xb0>)
   1ccd4:	681b      	ldr	r3, [r3, #0]
   1ccd6:	2b00      	cmp	r3, #0
   1ccd8:	d001      	beq.n	1ccde <vTaskDelay+0x1e>
   1ccda:	b672      	cpsid	i
   1ccdc:	e7fe      	b.n	1ccdc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ccde:	4b25      	ldr	r3, [pc, #148]	; (1cd74 <vTaskDelay+0xb4>)
   1cce0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cce2:	4b25      	ldr	r3, [pc, #148]	; (1cd78 <vTaskDelay+0xb8>)
   1cce4:	681b      	ldr	r3, [r3, #0]
   1cce6:	0018      	movs	r0, r3
   1cce8:	4b24      	ldr	r3, [pc, #144]	; (1cd7c <vTaskDelay+0xbc>)
   1ccea:	4798      	blx	r3
   1ccec:	0003      	movs	r3, r0
   1ccee:	001a      	movs	r2, r3
   1ccf0:	4b23      	ldr	r3, [pc, #140]	; (1cd80 <vTaskDelay+0xc0>)
   1ccf2:	881b      	ldrh	r3, [r3, #0]
   1ccf4:	4013      	ands	r3, r2
   1ccf6:	b29b      	uxth	r3, r3
   1ccf8:	2b00      	cmp	r3, #0
   1ccfa:	d00e      	beq.n	1cd1a <vTaskDelay+0x5a>
   1ccfc:	687b      	ldr	r3, [r7, #4]
   1ccfe:	0019      	movs	r1, r3
   1cd00:	2089      	movs	r0, #137	; 0x89
   1cd02:	4b20      	ldr	r3, [pc, #128]	; (1cd84 <vTaskDelay+0xc4>)
   1cd04:	4798      	blx	r3
   1cd06:	4b1c      	ldr	r3, [pc, #112]	; (1cd78 <vTaskDelay+0xb8>)
   1cd08:	681b      	ldr	r3, [r3, #0]
   1cd0a:	0018      	movs	r0, r3
   1cd0c:	4b1e      	ldr	r3, [pc, #120]	; (1cd88 <vTaskDelay+0xc8>)
   1cd0e:	4798      	blx	r3
   1cd10:	0003      	movs	r3, r0
   1cd12:	b2db      	uxtb	r3, r3
   1cd14:	0018      	movs	r0, r3
   1cd16:	4b1d      	ldr	r3, [pc, #116]	; (1cd8c <vTaskDelay+0xcc>)
   1cd18:	4798      	blx	r3
   1cd1a:	4b1d      	ldr	r3, [pc, #116]	; (1cd90 <vTaskDelay+0xd0>)
   1cd1c:	4798      	blx	r3
   1cd1e:	0003      	movs	r3, r0
   1cd20:	0018      	movs	r0, r3
   1cd22:	4b16      	ldr	r3, [pc, #88]	; (1cd7c <vTaskDelay+0xbc>)
   1cd24:	4798      	blx	r3
   1cd26:	0003      	movs	r3, r0
   1cd28:	001a      	movs	r2, r3
   1cd2a:	4b15      	ldr	r3, [pc, #84]	; (1cd80 <vTaskDelay+0xc0>)
   1cd2c:	881b      	ldrh	r3, [r3, #0]
   1cd2e:	4013      	ands	r3, r2
   1cd30:	b29b      	uxth	r3, r3
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d00a      	beq.n	1cd4c <vTaskDelay+0x8c>
   1cd36:	4b16      	ldr	r3, [pc, #88]	; (1cd90 <vTaskDelay+0xd0>)
   1cd38:	4798      	blx	r3
   1cd3a:	0003      	movs	r3, r0
   1cd3c:	0018      	movs	r0, r3
   1cd3e:	4b12      	ldr	r3, [pc, #72]	; (1cd88 <vTaskDelay+0xc8>)
   1cd40:	4798      	blx	r3
   1cd42:	0003      	movs	r3, r0
   1cd44:	b2db      	uxtb	r3, r3
   1cd46:	0018      	movs	r0, r3
   1cd48:	4b10      	ldr	r3, [pc, #64]	; (1cd8c <vTaskDelay+0xcc>)
   1cd4a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1cd4c:	687b      	ldr	r3, [r7, #4]
   1cd4e:	2100      	movs	r1, #0
   1cd50:	0018      	movs	r0, r3
   1cd52:	4b10      	ldr	r3, [pc, #64]	; (1cd94 <vTaskDelay+0xd4>)
   1cd54:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1cd56:	4b10      	ldr	r3, [pc, #64]	; (1cd98 <vTaskDelay+0xd8>)
   1cd58:	4798      	blx	r3
   1cd5a:	0003      	movs	r3, r0
   1cd5c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1cd5e:	68fb      	ldr	r3, [r7, #12]
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d101      	bne.n	1cd68 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1cd64:	4b0d      	ldr	r3, [pc, #52]	; (1cd9c <vTaskDelay+0xdc>)
   1cd66:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1cd68:	46c0      	nop			; (mov r8, r8)
   1cd6a:	46bd      	mov	sp, r7
   1cd6c:	b004      	add	sp, #16
   1cd6e:	bd80      	pop	{r7, pc}
   1cd70:	200041e0 	.word	0x200041e0
   1cd74:	0001cf81 	.word	0x0001cf81
   1cd78:	200040e0 	.word	0x200040e0
   1cd7c:	00018cc9 	.word	0x00018cc9
   1cd80:	20000110 	.word	0x20000110
   1cd84:	000199c9 	.word	0x000199c9
   1cd88:	00018ca9 	.word	0x00018ca9
   1cd8c:	00019e59 	.word	0x00019e59
   1cd90:	00018f65 	.word	0x00018f65
   1cd94:	0001ded9 	.word	0x0001ded9
   1cd98:	0001cf99 	.word	0x0001cf99
   1cd9c:	0001acb1 	.word	0x0001acb1

0001cda0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1cda0:	b580      	push	{r7, lr}
   1cda2:	b084      	sub	sp, #16
   1cda4:	af00      	add	r7, sp, #0
   1cda6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1cda8:	4b42      	ldr	r3, [pc, #264]	; (1ceb4 <vTaskSuspend+0x114>)
   1cdaa:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1cdac:	687b      	ldr	r3, [r7, #4]
   1cdae:	2b00      	cmp	r3, #0
   1cdb0:	d102      	bne.n	1cdb8 <vTaskSuspend+0x18>
   1cdb2:	4b41      	ldr	r3, [pc, #260]	; (1ceb8 <vTaskSuspend+0x118>)
   1cdb4:	681b      	ldr	r3, [r3, #0]
   1cdb6:	e000      	b.n	1cdba <vTaskSuspend+0x1a>
   1cdb8:	687b      	ldr	r3, [r7, #4]
   1cdba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1cdbc:	4b3f      	ldr	r3, [pc, #252]	; (1cebc <vTaskSuspend+0x11c>)
   1cdbe:	4798      	blx	r3
   1cdc0:	0003      	movs	r3, r0
   1cdc2:	0018      	movs	r0, r3
   1cdc4:	4b3e      	ldr	r3, [pc, #248]	; (1cec0 <vTaskSuspend+0x120>)
   1cdc6:	4798      	blx	r3
   1cdc8:	0003      	movs	r3, r0
   1cdca:	001a      	movs	r2, r3
   1cdcc:	4b3d      	ldr	r3, [pc, #244]	; (1cec4 <vTaskSuspend+0x124>)
   1cdce:	881b      	ldrh	r3, [r3, #0]
   1cdd0:	4013      	ands	r3, r2
   1cdd2:	b29b      	uxth	r3, r3
   1cdd4:	2b00      	cmp	r3, #0
   1cdd6:	d016      	beq.n	1ce06 <vTaskSuspend+0x66>
   1cdd8:	68fb      	ldr	r3, [r7, #12]
   1cdda:	0018      	movs	r0, r3
   1cddc:	4b38      	ldr	r3, [pc, #224]	; (1cec0 <vTaskSuspend+0x120>)
   1cdde:	4798      	blx	r3
   1cde0:	0003      	movs	r3, r0
   1cde2:	001a      	movs	r2, r3
   1cde4:	4b37      	ldr	r3, [pc, #220]	; (1cec4 <vTaskSuspend+0x124>)
   1cde6:	881b      	ldrh	r3, [r3, #0]
   1cde8:	4013      	ands	r3, r2
   1cdea:	b29b      	uxth	r3, r3
   1cdec:	2b00      	cmp	r3, #0
   1cdee:	d00a      	beq.n	1ce06 <vTaskSuspend+0x66>
   1cdf0:	68fb      	ldr	r3, [r7, #12]
   1cdf2:	0018      	movs	r0, r3
   1cdf4:	4b34      	ldr	r3, [pc, #208]	; (1cec8 <vTaskSuspend+0x128>)
   1cdf6:	4798      	blx	r3
   1cdf8:	0003      	movs	r3, r0
   1cdfa:	b2db      	uxtb	r3, r3
   1cdfc:	001a      	movs	r2, r3
   1cdfe:	2103      	movs	r1, #3
   1ce00:	208a      	movs	r0, #138	; 0x8a
   1ce02:	4b32      	ldr	r3, [pc, #200]	; (1cecc <vTaskSuspend+0x12c>)
   1ce04:	4798      	blx	r3
   1ce06:	68fb      	ldr	r3, [r7, #12]
   1ce08:	0018      	movs	r0, r3
   1ce0a:	4b2f      	ldr	r3, [pc, #188]	; (1cec8 <vTaskSuspend+0x128>)
   1ce0c:	4798      	blx	r3
   1ce0e:	0003      	movs	r3, r0
   1ce10:	b2db      	uxtb	r3, r3
   1ce12:	0018      	movs	r0, r3
   1ce14:	4b2e      	ldr	r3, [pc, #184]	; (1ced0 <vTaskSuspend+0x130>)
   1ce16:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ce18:	68fb      	ldr	r3, [r7, #12]
   1ce1a:	3304      	adds	r3, #4
   1ce1c:	0018      	movs	r0, r3
   1ce1e:	4b2d      	ldr	r3, [pc, #180]	; (1ced4 <vTaskSuspend+0x134>)
   1ce20:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ce22:	68fb      	ldr	r3, [r7, #12]
   1ce24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ce26:	2b00      	cmp	r3, #0
   1ce28:	d004      	beq.n	1ce34 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ce2a:	68fb      	ldr	r3, [r7, #12]
   1ce2c:	3318      	adds	r3, #24
   1ce2e:	0018      	movs	r0, r3
   1ce30:	4b28      	ldr	r3, [pc, #160]	; (1ced4 <vTaskSuspend+0x134>)
   1ce32:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ce34:	68fb      	ldr	r3, [r7, #12]
   1ce36:	1d1a      	adds	r2, r3, #4
   1ce38:	4b27      	ldr	r3, [pc, #156]	; (1ced8 <vTaskSuspend+0x138>)
   1ce3a:	0011      	movs	r1, r2
   1ce3c:	0018      	movs	r0, r3
   1ce3e:	4b27      	ldr	r3, [pc, #156]	; (1cedc <vTaskSuspend+0x13c>)
   1ce40:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1ce42:	68fb      	ldr	r3, [r7, #12]
   1ce44:	2250      	movs	r2, #80	; 0x50
   1ce46:	5c9b      	ldrb	r3, [r3, r2]
   1ce48:	b2db      	uxtb	r3, r3
   1ce4a:	2b01      	cmp	r3, #1
   1ce4c:	d103      	bne.n	1ce56 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ce4e:	68fb      	ldr	r3, [r7, #12]
   1ce50:	2250      	movs	r2, #80	; 0x50
   1ce52:	2100      	movs	r1, #0
   1ce54:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1ce56:	4b22      	ldr	r3, [pc, #136]	; (1cee0 <vTaskSuspend+0x140>)
   1ce58:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1ce5a:	4b22      	ldr	r3, [pc, #136]	; (1cee4 <vTaskSuspend+0x144>)
   1ce5c:	681b      	ldr	r3, [r3, #0]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d005      	beq.n	1ce6e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1ce62:	4b14      	ldr	r3, [pc, #80]	; (1ceb4 <vTaskSuspend+0x114>)
   1ce64:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1ce66:	4b20      	ldr	r3, [pc, #128]	; (1cee8 <vTaskSuspend+0x148>)
   1ce68:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1ce6a:	4b1d      	ldr	r3, [pc, #116]	; (1cee0 <vTaskSuspend+0x140>)
   1ce6c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1ce6e:	4b12      	ldr	r3, [pc, #72]	; (1ceb8 <vTaskSuspend+0x118>)
   1ce70:	681b      	ldr	r3, [r3, #0]
   1ce72:	68fa      	ldr	r2, [r7, #12]
   1ce74:	429a      	cmp	r2, r3
   1ce76:	d118      	bne.n	1ceaa <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1ce78:	4b1a      	ldr	r3, [pc, #104]	; (1cee4 <vTaskSuspend+0x144>)
   1ce7a:	681b      	ldr	r3, [r3, #0]
   1ce7c:	2b00      	cmp	r3, #0
   1ce7e:	d008      	beq.n	1ce92 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ce80:	4b1a      	ldr	r3, [pc, #104]	; (1ceec <vTaskSuspend+0x14c>)
   1ce82:	681b      	ldr	r3, [r3, #0]
   1ce84:	2b00      	cmp	r3, #0
   1ce86:	d001      	beq.n	1ce8c <vTaskSuspend+0xec>
   1ce88:	b672      	cpsid	i
   1ce8a:	e7fe      	b.n	1ce8a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ce8c:	4b18      	ldr	r3, [pc, #96]	; (1cef0 <vTaskSuspend+0x150>)
   1ce8e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ce90:	e00b      	b.n	1ceaa <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ce92:	4b11      	ldr	r3, [pc, #68]	; (1ced8 <vTaskSuspend+0x138>)
   1ce94:	681a      	ldr	r2, [r3, #0]
   1ce96:	4b17      	ldr	r3, [pc, #92]	; (1cef4 <vTaskSuspend+0x154>)
   1ce98:	681b      	ldr	r3, [r3, #0]
   1ce9a:	429a      	cmp	r2, r3
   1ce9c:	d103      	bne.n	1cea6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ce9e:	4b06      	ldr	r3, [pc, #24]	; (1ceb8 <vTaskSuspend+0x118>)
   1cea0:	2200      	movs	r2, #0
   1cea2:	601a      	str	r2, [r3, #0]
	}
   1cea4:	e001      	b.n	1ceaa <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1cea6:	4b14      	ldr	r3, [pc, #80]	; (1cef8 <vTaskSuspend+0x158>)
   1cea8:	4798      	blx	r3
	}
   1ceaa:	46c0      	nop			; (mov r8, r8)
   1ceac:	46bd      	mov	sp, r7
   1ceae:	b004      	add	sp, #16
   1ceb0:	bd80      	pop	{r7, pc}
   1ceb2:	46c0      	nop			; (mov r8, r8)
   1ceb4:	0001acc9 	.word	0x0001acc9
   1ceb8:	200040e0 	.word	0x200040e0
   1cebc:	00018f65 	.word	0x00018f65
   1cec0:	00018cc9 	.word	0x00018cc9
   1cec4:	20000110 	.word	0x20000110
   1cec8:	00018ca9 	.word	0x00018ca9
   1cecc:	000196c1 	.word	0x000196c1
   1ced0:	00019e59 	.word	0x00019e59
   1ced4:	0001ab43 	.word	0x0001ab43
   1ced8:	200041a4 	.word	0x200041a4
   1cedc:	0001aa93 	.word	0x0001aa93
   1cee0:	0001aced 	.word	0x0001aced
   1cee4:	200041c4 	.word	0x200041c4
   1cee8:	0001d985 	.word	0x0001d985
   1ceec:	200041e0 	.word	0x200041e0
   1cef0:	0001acb1 	.word	0x0001acb1
   1cef4:	200041b8 	.word	0x200041b8
   1cef8:	0001d315 	.word	0x0001d315

0001cefc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1cefc:	b590      	push	{r4, r7, lr}
   1cefe:	b085      	sub	sp, #20
   1cf00:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1cf02:	4916      	ldr	r1, [pc, #88]	; (1cf5c <vTaskStartScheduler+0x60>)
   1cf04:	4816      	ldr	r0, [pc, #88]	; (1cf60 <vTaskStartScheduler+0x64>)
   1cf06:	4b17      	ldr	r3, [pc, #92]	; (1cf64 <vTaskStartScheduler+0x68>)
   1cf08:	9301      	str	r3, [sp, #4]
   1cf0a:	2300      	movs	r3, #0
   1cf0c:	9300      	str	r3, [sp, #0]
   1cf0e:	2300      	movs	r3, #0
   1cf10:	2296      	movs	r2, #150	; 0x96
   1cf12:	4c15      	ldr	r4, [pc, #84]	; (1cf68 <vTaskStartScheduler+0x6c>)
   1cf14:	47a0      	blx	r4
   1cf16:	0003      	movs	r3, r0
   1cf18:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1cf1a:	687b      	ldr	r3, [r7, #4]
   1cf1c:	2b01      	cmp	r3, #1
   1cf1e:	d103      	bne.n	1cf28 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1cf20:	4b12      	ldr	r3, [pc, #72]	; (1cf6c <vTaskStartScheduler+0x70>)
   1cf22:	4798      	blx	r3
   1cf24:	0003      	movs	r3, r0
   1cf26:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1cf28:	687b      	ldr	r3, [r7, #4]
   1cf2a:	2b01      	cmp	r3, #1
   1cf2c:	d10d      	bne.n	1cf4a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1cf2e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1cf30:	4b0f      	ldr	r3, [pc, #60]	; (1cf70 <vTaskStartScheduler+0x74>)
   1cf32:	2201      	movs	r2, #1
   1cf34:	4252      	negs	r2, r2
   1cf36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1cf38:	4b0e      	ldr	r3, [pc, #56]	; (1cf74 <vTaskStartScheduler+0x78>)
   1cf3a:	2201      	movs	r2, #1
   1cf3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1cf3e:	4b0e      	ldr	r3, [pc, #56]	; (1cf78 <vTaskStartScheduler+0x7c>)
   1cf40:	2200      	movs	r2, #0
   1cf42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1cf44:	4b0d      	ldr	r3, [pc, #52]	; (1cf7c <vTaskStartScheduler+0x80>)
   1cf46:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1cf48:	e004      	b.n	1cf54 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1cf4a:	687b      	ldr	r3, [r7, #4]
   1cf4c:	3301      	adds	r3, #1
   1cf4e:	d101      	bne.n	1cf54 <vTaskStartScheduler+0x58>
   1cf50:	b672      	cpsid	i
   1cf52:	e7fe      	b.n	1cf52 <vTaskStartScheduler+0x56>
}
   1cf54:	46c0      	nop			; (mov r8, r8)
   1cf56:	46bd      	mov	sp, r7
   1cf58:	b003      	add	sp, #12
   1cf5a:	bd90      	pop	{r4, r7, pc}
   1cf5c:	00039310 	.word	0x00039310
   1cf60:	0001d7cd 	.word	0x0001d7cd
   1cf64:	200041dc 	.word	0x200041dc
   1cf68:	0001c925 	.word	0x0001c925
   1cf6c:	0001df8d 	.word	0x0001df8d
   1cf70:	200041d8 	.word	0x200041d8
   1cf74:	200041c4 	.word	0x200041c4
   1cf78:	200041bc 	.word	0x200041bc
   1cf7c:	0001ac59 	.word	0x0001ac59

0001cf80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1cf80:	b580      	push	{r7, lr}
   1cf82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1cf84:	4b03      	ldr	r3, [pc, #12]	; (1cf94 <vTaskSuspendAll+0x14>)
   1cf86:	681b      	ldr	r3, [r3, #0]
   1cf88:	1c5a      	adds	r2, r3, #1
   1cf8a:	4b02      	ldr	r3, [pc, #8]	; (1cf94 <vTaskSuspendAll+0x14>)
   1cf8c:	601a      	str	r2, [r3, #0]
}
   1cf8e:	46c0      	nop			; (mov r8, r8)
   1cf90:	46bd      	mov	sp, r7
   1cf92:	bd80      	pop	{r7, pc}
   1cf94:	200041e0 	.word	0x200041e0

0001cf98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1cf98:	b580      	push	{r7, lr}
   1cf9a:	b084      	sub	sp, #16
   1cf9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1cf9e:	2300      	movs	r3, #0
   1cfa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1cfa2:	2300      	movs	r3, #0
   1cfa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1cfa6:	4b45      	ldr	r3, [pc, #276]	; (1d0bc <xTaskResumeAll+0x124>)
   1cfa8:	681b      	ldr	r3, [r3, #0]
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d101      	bne.n	1cfb2 <xTaskResumeAll+0x1a>
   1cfae:	b672      	cpsid	i
   1cfb0:	e7fe      	b.n	1cfb0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1cfb2:	4b43      	ldr	r3, [pc, #268]	; (1d0c0 <xTaskResumeAll+0x128>)
   1cfb4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1cfb6:	4b41      	ldr	r3, [pc, #260]	; (1d0bc <xTaskResumeAll+0x124>)
   1cfb8:	681b      	ldr	r3, [r3, #0]
   1cfba:	1e5a      	subs	r2, r3, #1
   1cfbc:	4b3f      	ldr	r3, [pc, #252]	; (1d0bc <xTaskResumeAll+0x124>)
   1cfbe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cfc0:	4b3e      	ldr	r3, [pc, #248]	; (1d0bc <xTaskResumeAll+0x124>)
   1cfc2:	681b      	ldr	r3, [r3, #0]
   1cfc4:	2b00      	cmp	r3, #0
   1cfc6:	d000      	beq.n	1cfca <xTaskResumeAll+0x32>
   1cfc8:	e071      	b.n	1d0ae <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1cfca:	4b3e      	ldr	r3, [pc, #248]	; (1d0c4 <xTaskResumeAll+0x12c>)
   1cfcc:	681b      	ldr	r3, [r3, #0]
   1cfce:	2b00      	cmp	r3, #0
   1cfd0:	d100      	bne.n	1cfd4 <xTaskResumeAll+0x3c>
   1cfd2:	e06c      	b.n	1d0ae <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cfd4:	e044      	b.n	1d060 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1cfd6:	4b3c      	ldr	r3, [pc, #240]	; (1d0c8 <xTaskResumeAll+0x130>)
   1cfd8:	68db      	ldr	r3, [r3, #12]
   1cfda:	68db      	ldr	r3, [r3, #12]
   1cfdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cfde:	68fb      	ldr	r3, [r7, #12]
   1cfe0:	3318      	adds	r3, #24
   1cfe2:	0018      	movs	r0, r3
   1cfe4:	4b39      	ldr	r3, [pc, #228]	; (1d0cc <xTaskResumeAll+0x134>)
   1cfe6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cfe8:	68fb      	ldr	r3, [r7, #12]
   1cfea:	3304      	adds	r3, #4
   1cfec:	0018      	movs	r0, r3
   1cfee:	4b37      	ldr	r3, [pc, #220]	; (1d0cc <xTaskResumeAll+0x134>)
   1cff0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cff2:	68fb      	ldr	r3, [r7, #12]
   1cff4:	0018      	movs	r0, r3
   1cff6:	4b36      	ldr	r3, [pc, #216]	; (1d0d0 <xTaskResumeAll+0x138>)
   1cff8:	4798      	blx	r3
   1cffa:	0003      	movs	r3, r0
   1cffc:	001a      	movs	r2, r3
   1cffe:	4b35      	ldr	r3, [pc, #212]	; (1d0d4 <xTaskResumeAll+0x13c>)
   1d000:	881b      	ldrh	r3, [r3, #0]
   1d002:	4013      	ands	r3, r2
   1d004:	b29b      	uxth	r3, r3
   1d006:	2b00      	cmp	r3, #0
   1d008:	d008      	beq.n	1d01c <xTaskResumeAll+0x84>
   1d00a:	68fb      	ldr	r3, [r7, #12]
   1d00c:	0018      	movs	r0, r3
   1d00e:	4b32      	ldr	r3, [pc, #200]	; (1d0d8 <xTaskResumeAll+0x140>)
   1d010:	4798      	blx	r3
   1d012:	0003      	movs	r3, r0
   1d014:	b2db      	uxtb	r3, r3
   1d016:	0018      	movs	r0, r3
   1d018:	4b30      	ldr	r3, [pc, #192]	; (1d0dc <xTaskResumeAll+0x144>)
   1d01a:	4798      	blx	r3
   1d01c:	68fb      	ldr	r3, [r7, #12]
   1d01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d020:	4b2f      	ldr	r3, [pc, #188]	; (1d0e0 <xTaskResumeAll+0x148>)
   1d022:	681b      	ldr	r3, [r3, #0]
   1d024:	429a      	cmp	r2, r3
   1d026:	d903      	bls.n	1d030 <xTaskResumeAll+0x98>
   1d028:	68fb      	ldr	r3, [r7, #12]
   1d02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d02c:	4b2c      	ldr	r3, [pc, #176]	; (1d0e0 <xTaskResumeAll+0x148>)
   1d02e:	601a      	str	r2, [r3, #0]
   1d030:	68fb      	ldr	r3, [r7, #12]
   1d032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d034:	0013      	movs	r3, r2
   1d036:	009b      	lsls	r3, r3, #2
   1d038:	189b      	adds	r3, r3, r2
   1d03a:	009b      	lsls	r3, r3, #2
   1d03c:	4a29      	ldr	r2, [pc, #164]	; (1d0e4 <xTaskResumeAll+0x14c>)
   1d03e:	189a      	adds	r2, r3, r2
   1d040:	68fb      	ldr	r3, [r7, #12]
   1d042:	3304      	adds	r3, #4
   1d044:	0019      	movs	r1, r3
   1d046:	0010      	movs	r0, r2
   1d048:	4b27      	ldr	r3, [pc, #156]	; (1d0e8 <xTaskResumeAll+0x150>)
   1d04a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d04c:	68fb      	ldr	r3, [r7, #12]
   1d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d050:	4b26      	ldr	r3, [pc, #152]	; (1d0ec <xTaskResumeAll+0x154>)
   1d052:	681b      	ldr	r3, [r3, #0]
   1d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d056:	429a      	cmp	r2, r3
   1d058:	d302      	bcc.n	1d060 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d05a:	4b25      	ldr	r3, [pc, #148]	; (1d0f0 <xTaskResumeAll+0x158>)
   1d05c:	2201      	movs	r2, #1
   1d05e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d060:	4b19      	ldr	r3, [pc, #100]	; (1d0c8 <xTaskResumeAll+0x130>)
   1d062:	681b      	ldr	r3, [r3, #0]
   1d064:	2b00      	cmp	r3, #0
   1d066:	d1b6      	bne.n	1cfd6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d068:	68fb      	ldr	r3, [r7, #12]
   1d06a:	2b00      	cmp	r3, #0
   1d06c:	d001      	beq.n	1d072 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d06e:	4b21      	ldr	r3, [pc, #132]	; (1d0f4 <xTaskResumeAll+0x15c>)
   1d070:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d072:	4b21      	ldr	r3, [pc, #132]	; (1d0f8 <xTaskResumeAll+0x160>)
   1d074:	681b      	ldr	r3, [r3, #0]
   1d076:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d078:	687b      	ldr	r3, [r7, #4]
   1d07a:	2b00      	cmp	r3, #0
   1d07c:	d00f      	beq.n	1d09e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d07e:	4b1f      	ldr	r3, [pc, #124]	; (1d0fc <xTaskResumeAll+0x164>)
   1d080:	4798      	blx	r3
   1d082:	1e03      	subs	r3, r0, #0
   1d084:	d002      	beq.n	1d08c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d086:	4b1a      	ldr	r3, [pc, #104]	; (1d0f0 <xTaskResumeAll+0x158>)
   1d088:	2201      	movs	r2, #1
   1d08a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d08c:	687b      	ldr	r3, [r7, #4]
   1d08e:	3b01      	subs	r3, #1
   1d090:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d092:	687b      	ldr	r3, [r7, #4]
   1d094:	2b00      	cmp	r3, #0
   1d096:	d1f2      	bne.n	1d07e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d098:	4b17      	ldr	r3, [pc, #92]	; (1d0f8 <xTaskResumeAll+0x160>)
   1d09a:	2200      	movs	r2, #0
   1d09c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d09e:	4b14      	ldr	r3, [pc, #80]	; (1d0f0 <xTaskResumeAll+0x158>)
   1d0a0:	681b      	ldr	r3, [r3, #0]
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d003      	beq.n	1d0ae <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d0a6:	2301      	movs	r3, #1
   1d0a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d0aa:	4b15      	ldr	r3, [pc, #84]	; (1d100 <xTaskResumeAll+0x168>)
   1d0ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d0ae:	4b15      	ldr	r3, [pc, #84]	; (1d104 <xTaskResumeAll+0x16c>)
   1d0b0:	4798      	blx	r3

	return xAlreadyYielded;
   1d0b2:	68bb      	ldr	r3, [r7, #8]
}
   1d0b4:	0018      	movs	r0, r3
   1d0b6:	46bd      	mov	sp, r7
   1d0b8:	b004      	add	sp, #16
   1d0ba:	bd80      	pop	{r7, pc}
   1d0bc:	200041e0 	.word	0x200041e0
   1d0c0:	0001acc9 	.word	0x0001acc9
   1d0c4:	200041b8 	.word	0x200041b8
   1d0c8:	20004178 	.word	0x20004178
   1d0cc:	0001ab43 	.word	0x0001ab43
   1d0d0:	00018cc9 	.word	0x00018cc9
   1d0d4:	20000110 	.word	0x20000110
   1d0d8:	00018ca9 	.word	0x00018ca9
   1d0dc:	00019479 	.word	0x00019479
   1d0e0:	200041c0 	.word	0x200041c0
   1d0e4:	200040e4 	.word	0x200040e4
   1d0e8:	0001aa93 	.word	0x0001aa93
   1d0ec:	200040e0 	.word	0x200040e0
   1d0f0:	200041cc 	.word	0x200041cc
   1d0f4:	0001d985 	.word	0x0001d985
   1d0f8:	200041c8 	.word	0x200041c8
   1d0fc:	0001d125 	.word	0x0001d125
   1d100:	0001acb1 	.word	0x0001acb1
   1d104:	0001aced 	.word	0x0001aced

0001d108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d108:	b580      	push	{r7, lr}
   1d10a:	b082      	sub	sp, #8
   1d10c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d10e:	4b04      	ldr	r3, [pc, #16]	; (1d120 <xTaskGetTickCount+0x18>)
   1d110:	681b      	ldr	r3, [r3, #0]
   1d112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d114:	687b      	ldr	r3, [r7, #4]
}
   1d116:	0018      	movs	r0, r3
   1d118:	46bd      	mov	sp, r7
   1d11a:	b002      	add	sp, #8
   1d11c:	bd80      	pop	{r7, pc}
   1d11e:	46c0      	nop			; (mov r8, r8)
   1d120:	200041bc 	.word	0x200041bc

0001d124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d124:	b580      	push	{r7, lr}
   1d126:	b086      	sub	sp, #24
   1d128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d12a:	2300      	movs	r3, #0
   1d12c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d12e:	4b64      	ldr	r3, [pc, #400]	; (1d2c0 <xTaskIncrementTick+0x19c>)
   1d130:	681b      	ldr	r3, [r3, #0]
   1d132:	2b01      	cmp	r3, #1
   1d134:	d003      	beq.n	1d13e <xTaskIncrementTick+0x1a>
   1d136:	4b63      	ldr	r3, [pc, #396]	; (1d2c4 <xTaskIncrementTick+0x1a0>)
   1d138:	681b      	ldr	r3, [r3, #0]
   1d13a:	2b00      	cmp	r3, #0
   1d13c:	d107      	bne.n	1d14e <xTaskIncrementTick+0x2a>
   1d13e:	4b62      	ldr	r3, [pc, #392]	; (1d2c8 <xTaskIncrementTick+0x1a4>)
   1d140:	681b      	ldr	r3, [r3, #0]
   1d142:	1c5a      	adds	r2, r3, #1
   1d144:	4b60      	ldr	r3, [pc, #384]	; (1d2c8 <xTaskIncrementTick+0x1a4>)
   1d146:	601a      	str	r2, [r3, #0]
   1d148:	2000      	movs	r0, #0
   1d14a:	4b60      	ldr	r3, [pc, #384]	; (1d2cc <xTaskIncrementTick+0x1a8>)
   1d14c:	4798      	blx	r3
   1d14e:	4b5c      	ldr	r3, [pc, #368]	; (1d2c0 <xTaskIncrementTick+0x19c>)
   1d150:	681b      	ldr	r3, [r3, #0]
   1d152:	2b00      	cmp	r3, #0
   1d154:	d106      	bne.n	1d164 <xTaskIncrementTick+0x40>
   1d156:	4b5e      	ldr	r3, [pc, #376]	; (1d2d0 <xTaskIncrementTick+0x1ac>)
   1d158:	681b      	ldr	r3, [r3, #0]
   1d15a:	3301      	adds	r3, #1
   1d15c:	0019      	movs	r1, r3
   1d15e:	2003      	movs	r0, #3
   1d160:	4b5c      	ldr	r3, [pc, #368]	; (1d2d4 <xTaskIncrementTick+0x1b0>)
   1d162:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d164:	4b56      	ldr	r3, [pc, #344]	; (1d2c0 <xTaskIncrementTick+0x19c>)
   1d166:	681b      	ldr	r3, [r3, #0]
   1d168:	2b00      	cmp	r3, #0
   1d16a:	d000      	beq.n	1d16e <xTaskIncrementTick+0x4a>
   1d16c:	e098      	b.n	1d2a0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d16e:	4b58      	ldr	r3, [pc, #352]	; (1d2d0 <xTaskIncrementTick+0x1ac>)
   1d170:	681b      	ldr	r3, [r3, #0]
   1d172:	3301      	adds	r3, #1
   1d174:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d176:	4b56      	ldr	r3, [pc, #344]	; (1d2d0 <xTaskIncrementTick+0x1ac>)
   1d178:	693a      	ldr	r2, [r7, #16]
   1d17a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d17c:	693b      	ldr	r3, [r7, #16]
   1d17e:	2b00      	cmp	r3, #0
   1d180:	d117      	bne.n	1d1b2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d182:	4b55      	ldr	r3, [pc, #340]	; (1d2d8 <xTaskIncrementTick+0x1b4>)
   1d184:	681b      	ldr	r3, [r3, #0]
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	2b00      	cmp	r3, #0
   1d18a:	d001      	beq.n	1d190 <xTaskIncrementTick+0x6c>
   1d18c:	b672      	cpsid	i
   1d18e:	e7fe      	b.n	1d18e <xTaskIncrementTick+0x6a>
   1d190:	4b51      	ldr	r3, [pc, #324]	; (1d2d8 <xTaskIncrementTick+0x1b4>)
   1d192:	681b      	ldr	r3, [r3, #0]
   1d194:	60fb      	str	r3, [r7, #12]
   1d196:	4b51      	ldr	r3, [pc, #324]	; (1d2dc <xTaskIncrementTick+0x1b8>)
   1d198:	681a      	ldr	r2, [r3, #0]
   1d19a:	4b4f      	ldr	r3, [pc, #316]	; (1d2d8 <xTaskIncrementTick+0x1b4>)
   1d19c:	601a      	str	r2, [r3, #0]
   1d19e:	4b4f      	ldr	r3, [pc, #316]	; (1d2dc <xTaskIncrementTick+0x1b8>)
   1d1a0:	68fa      	ldr	r2, [r7, #12]
   1d1a2:	601a      	str	r2, [r3, #0]
   1d1a4:	4b4e      	ldr	r3, [pc, #312]	; (1d2e0 <xTaskIncrementTick+0x1bc>)
   1d1a6:	681b      	ldr	r3, [r3, #0]
   1d1a8:	1c5a      	adds	r2, r3, #1
   1d1aa:	4b4d      	ldr	r3, [pc, #308]	; (1d2e0 <xTaskIncrementTick+0x1bc>)
   1d1ac:	601a      	str	r2, [r3, #0]
   1d1ae:	4b4d      	ldr	r3, [pc, #308]	; (1d2e4 <xTaskIncrementTick+0x1c0>)
   1d1b0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d1b2:	4b4d      	ldr	r3, [pc, #308]	; (1d2e8 <xTaskIncrementTick+0x1c4>)
   1d1b4:	681b      	ldr	r3, [r3, #0]
   1d1b6:	693a      	ldr	r2, [r7, #16]
   1d1b8:	429a      	cmp	r2, r3
   1d1ba:	d363      	bcc.n	1d284 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d1bc:	4b46      	ldr	r3, [pc, #280]	; (1d2d8 <xTaskIncrementTick+0x1b4>)
   1d1be:	681b      	ldr	r3, [r3, #0]
   1d1c0:	681b      	ldr	r3, [r3, #0]
   1d1c2:	2b00      	cmp	r3, #0
   1d1c4:	d101      	bne.n	1d1ca <xTaskIncrementTick+0xa6>
   1d1c6:	2301      	movs	r3, #1
   1d1c8:	e000      	b.n	1d1cc <xTaskIncrementTick+0xa8>
   1d1ca:	2300      	movs	r3, #0
   1d1cc:	2b00      	cmp	r3, #0
   1d1ce:	d004      	beq.n	1d1da <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d1d0:	4b45      	ldr	r3, [pc, #276]	; (1d2e8 <xTaskIncrementTick+0x1c4>)
   1d1d2:	2201      	movs	r2, #1
   1d1d4:	4252      	negs	r2, r2
   1d1d6:	601a      	str	r2, [r3, #0]
					break;
   1d1d8:	e054      	b.n	1d284 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d1da:	4b3f      	ldr	r3, [pc, #252]	; (1d2d8 <xTaskIncrementTick+0x1b4>)
   1d1dc:	681b      	ldr	r3, [r3, #0]
   1d1de:	68db      	ldr	r3, [r3, #12]
   1d1e0:	68db      	ldr	r3, [r3, #12]
   1d1e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d1e4:	68bb      	ldr	r3, [r7, #8]
   1d1e6:	685b      	ldr	r3, [r3, #4]
   1d1e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d1ea:	693a      	ldr	r2, [r7, #16]
   1d1ec:	687b      	ldr	r3, [r7, #4]
   1d1ee:	429a      	cmp	r2, r3
   1d1f0:	d203      	bcs.n	1d1fa <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d1f2:	4b3d      	ldr	r3, [pc, #244]	; (1d2e8 <xTaskIncrementTick+0x1c4>)
   1d1f4:	687a      	ldr	r2, [r7, #4]
   1d1f6:	601a      	str	r2, [r3, #0]
						break;
   1d1f8:	e044      	b.n	1d284 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d1fa:	68bb      	ldr	r3, [r7, #8]
   1d1fc:	3304      	adds	r3, #4
   1d1fe:	0018      	movs	r0, r3
   1d200:	4b3a      	ldr	r3, [pc, #232]	; (1d2ec <xTaskIncrementTick+0x1c8>)
   1d202:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d204:	68bb      	ldr	r3, [r7, #8]
   1d206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d208:	2b00      	cmp	r3, #0
   1d20a:	d004      	beq.n	1d216 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d20c:	68bb      	ldr	r3, [r7, #8]
   1d20e:	3318      	adds	r3, #24
   1d210:	0018      	movs	r0, r3
   1d212:	4b36      	ldr	r3, [pc, #216]	; (1d2ec <xTaskIncrementTick+0x1c8>)
   1d214:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d216:	68bb      	ldr	r3, [r7, #8]
   1d218:	0018      	movs	r0, r3
   1d21a:	4b35      	ldr	r3, [pc, #212]	; (1d2f0 <xTaskIncrementTick+0x1cc>)
   1d21c:	4798      	blx	r3
   1d21e:	0003      	movs	r3, r0
   1d220:	001a      	movs	r2, r3
   1d222:	4b34      	ldr	r3, [pc, #208]	; (1d2f4 <xTaskIncrementTick+0x1d0>)
   1d224:	881b      	ldrh	r3, [r3, #0]
   1d226:	4013      	ands	r3, r2
   1d228:	b29b      	uxth	r3, r3
   1d22a:	2b00      	cmp	r3, #0
   1d22c:	d008      	beq.n	1d240 <xTaskIncrementTick+0x11c>
   1d22e:	68bb      	ldr	r3, [r7, #8]
   1d230:	0018      	movs	r0, r3
   1d232:	4b31      	ldr	r3, [pc, #196]	; (1d2f8 <xTaskIncrementTick+0x1d4>)
   1d234:	4798      	blx	r3
   1d236:	0003      	movs	r3, r0
   1d238:	b2db      	uxtb	r3, r3
   1d23a:	0018      	movs	r0, r3
   1d23c:	4b2f      	ldr	r3, [pc, #188]	; (1d2fc <xTaskIncrementTick+0x1d8>)
   1d23e:	4798      	blx	r3
   1d240:	68bb      	ldr	r3, [r7, #8]
   1d242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d244:	4b2e      	ldr	r3, [pc, #184]	; (1d300 <xTaskIncrementTick+0x1dc>)
   1d246:	681b      	ldr	r3, [r3, #0]
   1d248:	429a      	cmp	r2, r3
   1d24a:	d903      	bls.n	1d254 <xTaskIncrementTick+0x130>
   1d24c:	68bb      	ldr	r3, [r7, #8]
   1d24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d250:	4b2b      	ldr	r3, [pc, #172]	; (1d300 <xTaskIncrementTick+0x1dc>)
   1d252:	601a      	str	r2, [r3, #0]
   1d254:	68bb      	ldr	r3, [r7, #8]
   1d256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d258:	0013      	movs	r3, r2
   1d25a:	009b      	lsls	r3, r3, #2
   1d25c:	189b      	adds	r3, r3, r2
   1d25e:	009b      	lsls	r3, r3, #2
   1d260:	4a28      	ldr	r2, [pc, #160]	; (1d304 <xTaskIncrementTick+0x1e0>)
   1d262:	189a      	adds	r2, r3, r2
   1d264:	68bb      	ldr	r3, [r7, #8]
   1d266:	3304      	adds	r3, #4
   1d268:	0019      	movs	r1, r3
   1d26a:	0010      	movs	r0, r2
   1d26c:	4b26      	ldr	r3, [pc, #152]	; (1d308 <xTaskIncrementTick+0x1e4>)
   1d26e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d270:	68bb      	ldr	r3, [r7, #8]
   1d272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d274:	4b25      	ldr	r3, [pc, #148]	; (1d30c <xTaskIncrementTick+0x1e8>)
   1d276:	681b      	ldr	r3, [r3, #0]
   1d278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d27a:	429a      	cmp	r2, r3
   1d27c:	d39e      	bcc.n	1d1bc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d27e:	2301      	movs	r3, #1
   1d280:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d282:	e79b      	b.n	1d1bc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d284:	4b21      	ldr	r3, [pc, #132]	; (1d30c <xTaskIncrementTick+0x1e8>)
   1d286:	681b      	ldr	r3, [r3, #0]
   1d288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d28a:	491e      	ldr	r1, [pc, #120]	; (1d304 <xTaskIncrementTick+0x1e0>)
   1d28c:	0013      	movs	r3, r2
   1d28e:	009b      	lsls	r3, r3, #2
   1d290:	189b      	adds	r3, r3, r2
   1d292:	009b      	lsls	r3, r3, #2
   1d294:	585b      	ldr	r3, [r3, r1]
   1d296:	2b01      	cmp	r3, #1
   1d298:	d907      	bls.n	1d2aa <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d29a:	2301      	movs	r3, #1
   1d29c:	617b      	str	r3, [r7, #20]
   1d29e:	e004      	b.n	1d2aa <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d2a0:	4b08      	ldr	r3, [pc, #32]	; (1d2c4 <xTaskIncrementTick+0x1a0>)
   1d2a2:	681b      	ldr	r3, [r3, #0]
   1d2a4:	1c5a      	adds	r2, r3, #1
   1d2a6:	4b07      	ldr	r3, [pc, #28]	; (1d2c4 <xTaskIncrementTick+0x1a0>)
   1d2a8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d2aa:	4b19      	ldr	r3, [pc, #100]	; (1d310 <xTaskIncrementTick+0x1ec>)
   1d2ac:	681b      	ldr	r3, [r3, #0]
   1d2ae:	2b00      	cmp	r3, #0
   1d2b0:	d001      	beq.n	1d2b6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d2b2:	2301      	movs	r3, #1
   1d2b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d2b6:	697b      	ldr	r3, [r7, #20]
}
   1d2b8:	0018      	movs	r0, r3
   1d2ba:	46bd      	mov	sp, r7
   1d2bc:	b006      	add	sp, #24
   1d2be:	bd80      	pop	{r7, pc}
   1d2c0:	200041e0 	.word	0x200041e0
   1d2c4:	200041c8 	.word	0x200041c8
   1d2c8:	20000d40 	.word	0x20000d40
   1d2cc:	0001a95d 	.word	0x0001a95d
   1d2d0:	200041bc 	.word	0x200041bc
   1d2d4:	000199c9 	.word	0x000199c9
   1d2d8:	20004170 	.word	0x20004170
   1d2dc:	20004174 	.word	0x20004174
   1d2e0:	200041d0 	.word	0x200041d0
   1d2e4:	0001d985 	.word	0x0001d985
   1d2e8:	200041d8 	.word	0x200041d8
   1d2ec:	0001ab43 	.word	0x0001ab43
   1d2f0:	00018cc9 	.word	0x00018cc9
   1d2f4:	20000110 	.word	0x20000110
   1d2f8:	00018ca9 	.word	0x00018ca9
   1d2fc:	00019479 	.word	0x00019479
   1d300:	200041c0 	.word	0x200041c0
   1d304:	200040e4 	.word	0x200040e4
   1d308:	0001aa93 	.word	0x0001aa93
   1d30c:	200040e0 	.word	0x200040e0
   1d310:	200041cc 	.word	0x200041cc

0001d314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d314:	b580      	push	{r7, lr}
   1d316:	b082      	sub	sp, #8
   1d318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d31a:	4b3a      	ldr	r3, [pc, #232]	; (1d404 <vTaskSwitchContext+0xf0>)
   1d31c:	681b      	ldr	r3, [r3, #0]
   1d31e:	2b00      	cmp	r3, #0
   1d320:	d003      	beq.n	1d32a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d322:	4b39      	ldr	r3, [pc, #228]	; (1d408 <vTaskSwitchContext+0xf4>)
   1d324:	2201      	movs	r2, #1
   1d326:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d328:	e067      	b.n	1d3fa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d32a:	4b37      	ldr	r3, [pc, #220]	; (1d408 <vTaskSwitchContext+0xf4>)
   1d32c:	2200      	movs	r2, #0
   1d32e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d330:	4b36      	ldr	r3, [pc, #216]	; (1d40c <vTaskSwitchContext+0xf8>)
   1d332:	681b      	ldr	r3, [r3, #0]
   1d334:	681a      	ldr	r2, [r3, #0]
   1d336:	4b35      	ldr	r3, [pc, #212]	; (1d40c <vTaskSwitchContext+0xf8>)
   1d338:	681b      	ldr	r3, [r3, #0]
   1d33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d33c:	429a      	cmp	r2, r3
   1d33e:	d808      	bhi.n	1d352 <vTaskSwitchContext+0x3e>
   1d340:	4b32      	ldr	r3, [pc, #200]	; (1d40c <vTaskSwitchContext+0xf8>)
   1d342:	681a      	ldr	r2, [r3, #0]
   1d344:	4b31      	ldr	r3, [pc, #196]	; (1d40c <vTaskSwitchContext+0xf8>)
   1d346:	681b      	ldr	r3, [r3, #0]
   1d348:	3334      	adds	r3, #52	; 0x34
   1d34a:	0019      	movs	r1, r3
   1d34c:	0010      	movs	r0, r2
   1d34e:	4b30      	ldr	r3, [pc, #192]	; (1d410 <vTaskSwitchContext+0xfc>)
   1d350:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d352:	4b30      	ldr	r3, [pc, #192]	; (1d414 <vTaskSwitchContext+0x100>)
   1d354:	681b      	ldr	r3, [r3, #0]
   1d356:	607b      	str	r3, [r7, #4]
   1d358:	e007      	b.n	1d36a <vTaskSwitchContext+0x56>
   1d35a:	687b      	ldr	r3, [r7, #4]
   1d35c:	2b00      	cmp	r3, #0
   1d35e:	d101      	bne.n	1d364 <vTaskSwitchContext+0x50>
   1d360:	b672      	cpsid	i
   1d362:	e7fe      	b.n	1d362 <vTaskSwitchContext+0x4e>
   1d364:	687b      	ldr	r3, [r7, #4]
   1d366:	3b01      	subs	r3, #1
   1d368:	607b      	str	r3, [r7, #4]
   1d36a:	492b      	ldr	r1, [pc, #172]	; (1d418 <vTaskSwitchContext+0x104>)
   1d36c:	687a      	ldr	r2, [r7, #4]
   1d36e:	0013      	movs	r3, r2
   1d370:	009b      	lsls	r3, r3, #2
   1d372:	189b      	adds	r3, r3, r2
   1d374:	009b      	lsls	r3, r3, #2
   1d376:	585b      	ldr	r3, [r3, r1]
   1d378:	2b00      	cmp	r3, #0
   1d37a:	d0ee      	beq.n	1d35a <vTaskSwitchContext+0x46>
   1d37c:	687a      	ldr	r2, [r7, #4]
   1d37e:	0013      	movs	r3, r2
   1d380:	009b      	lsls	r3, r3, #2
   1d382:	189b      	adds	r3, r3, r2
   1d384:	009b      	lsls	r3, r3, #2
   1d386:	4a24      	ldr	r2, [pc, #144]	; (1d418 <vTaskSwitchContext+0x104>)
   1d388:	189b      	adds	r3, r3, r2
   1d38a:	603b      	str	r3, [r7, #0]
   1d38c:	683b      	ldr	r3, [r7, #0]
   1d38e:	685b      	ldr	r3, [r3, #4]
   1d390:	685a      	ldr	r2, [r3, #4]
   1d392:	683b      	ldr	r3, [r7, #0]
   1d394:	605a      	str	r2, [r3, #4]
   1d396:	683b      	ldr	r3, [r7, #0]
   1d398:	685a      	ldr	r2, [r3, #4]
   1d39a:	683b      	ldr	r3, [r7, #0]
   1d39c:	3308      	adds	r3, #8
   1d39e:	429a      	cmp	r2, r3
   1d3a0:	d104      	bne.n	1d3ac <vTaskSwitchContext+0x98>
   1d3a2:	683b      	ldr	r3, [r7, #0]
   1d3a4:	685b      	ldr	r3, [r3, #4]
   1d3a6:	685a      	ldr	r2, [r3, #4]
   1d3a8:	683b      	ldr	r3, [r7, #0]
   1d3aa:	605a      	str	r2, [r3, #4]
   1d3ac:	683b      	ldr	r3, [r7, #0]
   1d3ae:	685b      	ldr	r3, [r3, #4]
   1d3b0:	68da      	ldr	r2, [r3, #12]
   1d3b2:	4b16      	ldr	r3, [pc, #88]	; (1d40c <vTaskSwitchContext+0xf8>)
   1d3b4:	601a      	str	r2, [r3, #0]
   1d3b6:	4b17      	ldr	r3, [pc, #92]	; (1d414 <vTaskSwitchContext+0x100>)
   1d3b8:	687a      	ldr	r2, [r7, #4]
   1d3ba:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d3bc:	4b17      	ldr	r3, [pc, #92]	; (1d41c <vTaskSwitchContext+0x108>)
   1d3be:	2201      	movs	r2, #1
   1d3c0:	601a      	str	r2, [r3, #0]
   1d3c2:	4b17      	ldr	r3, [pc, #92]	; (1d420 <vTaskSwitchContext+0x10c>)
   1d3c4:	4798      	blx	r3
   1d3c6:	0003      	movs	r3, r0
   1d3c8:	0018      	movs	r0, r3
   1d3ca:	4b16      	ldr	r3, [pc, #88]	; (1d424 <vTaskSwitchContext+0x110>)
   1d3cc:	4798      	blx	r3
   1d3ce:	0003      	movs	r3, r0
   1d3d0:	001a      	movs	r2, r3
   1d3d2:	4b15      	ldr	r3, [pc, #84]	; (1d428 <vTaskSwitchContext+0x114>)
   1d3d4:	881b      	ldrh	r3, [r3, #0]
   1d3d6:	4013      	ands	r3, r2
   1d3d8:	b29b      	uxth	r3, r3
   1d3da:	2b00      	cmp	r3, #0
   1d3dc:	d00a      	beq.n	1d3f4 <vTaskSwitchContext+0xe0>
   1d3de:	4b10      	ldr	r3, [pc, #64]	; (1d420 <vTaskSwitchContext+0x10c>)
   1d3e0:	4798      	blx	r3
   1d3e2:	0003      	movs	r3, r0
   1d3e4:	0018      	movs	r0, r3
   1d3e6:	4b11      	ldr	r3, [pc, #68]	; (1d42c <vTaskSwitchContext+0x118>)
   1d3e8:	4798      	blx	r3
   1d3ea:	0003      	movs	r3, r0
   1d3ec:	b2db      	uxtb	r3, r3
   1d3ee:	0018      	movs	r0, r3
   1d3f0:	4b0f      	ldr	r3, [pc, #60]	; (1d430 <vTaskSwitchContext+0x11c>)
   1d3f2:	4798      	blx	r3
   1d3f4:	4b09      	ldr	r3, [pc, #36]	; (1d41c <vTaskSwitchContext+0x108>)
   1d3f6:	2202      	movs	r2, #2
   1d3f8:	601a      	str	r2, [r3, #0]
}
   1d3fa:	46c0      	nop			; (mov r8, r8)
   1d3fc:	46bd      	mov	sp, r7
   1d3fe:	b002      	add	sp, #8
   1d400:	bd80      	pop	{r7, pc}
   1d402:	46c0      	nop			; (mov r8, r8)
   1d404:	200041e0 	.word	0x200041e0
   1d408:	200041cc 	.word	0x200041cc
   1d40c:	200040e0 	.word	0x200040e0
   1d410:	000336fd 	.word	0x000336fd
   1d414:	200041c0 	.word	0x200041c0
   1d418:	200040e4 	.word	0x200040e4
   1d41c:	20000d4c 	.word	0x20000d4c
   1d420:	00018f65 	.word	0x00018f65
   1d424:	00018cc9 	.word	0x00018cc9
   1d428:	20000110 	.word	0x20000110
   1d42c:	00018ca9 	.word	0x00018ca9
   1d430:	00019ac5 	.word	0x00019ac5

0001d434 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d434:	b580      	push	{r7, lr}
   1d436:	b082      	sub	sp, #8
   1d438:	af00      	add	r7, sp, #0
   1d43a:	6078      	str	r0, [r7, #4]
   1d43c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d43e:	687b      	ldr	r3, [r7, #4]
   1d440:	2b00      	cmp	r3, #0
   1d442:	d101      	bne.n	1d448 <vTaskPlaceOnEventList+0x14>
   1d444:	b672      	cpsid	i
   1d446:	e7fe      	b.n	1d446 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d448:	4b08      	ldr	r3, [pc, #32]	; (1d46c <vTaskPlaceOnEventList+0x38>)
   1d44a:	681b      	ldr	r3, [r3, #0]
   1d44c:	3318      	adds	r3, #24
   1d44e:	001a      	movs	r2, r3
   1d450:	687b      	ldr	r3, [r7, #4]
   1d452:	0011      	movs	r1, r2
   1d454:	0018      	movs	r0, r3
   1d456:	4b06      	ldr	r3, [pc, #24]	; (1d470 <vTaskPlaceOnEventList+0x3c>)
   1d458:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d45a:	683b      	ldr	r3, [r7, #0]
   1d45c:	2101      	movs	r1, #1
   1d45e:	0018      	movs	r0, r3
   1d460:	4b04      	ldr	r3, [pc, #16]	; (1d474 <vTaskPlaceOnEventList+0x40>)
   1d462:	4798      	blx	r3
}
   1d464:	46c0      	nop			; (mov r8, r8)
   1d466:	46bd      	mov	sp, r7
   1d468:	b002      	add	sp, #8
   1d46a:	bd80      	pop	{r7, pc}
   1d46c:	200040e0 	.word	0x200040e0
   1d470:	0001aad7 	.word	0x0001aad7
   1d474:	0001ded9 	.word	0x0001ded9

0001d478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d478:	b580      	push	{r7, lr}
   1d47a:	b084      	sub	sp, #16
   1d47c:	af00      	add	r7, sp, #0
   1d47e:	60f8      	str	r0, [r7, #12]
   1d480:	60b9      	str	r1, [r7, #8]
   1d482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d484:	68fb      	ldr	r3, [r7, #12]
   1d486:	2b00      	cmp	r3, #0
   1d488:	d101      	bne.n	1d48e <vTaskPlaceOnEventListRestricted+0x16>
   1d48a:	b672      	cpsid	i
   1d48c:	e7fe      	b.n	1d48c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d48e:	4b28      	ldr	r3, [pc, #160]	; (1d530 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d490:	681b      	ldr	r3, [r3, #0]
   1d492:	3318      	adds	r3, #24
   1d494:	001a      	movs	r2, r3
   1d496:	68fb      	ldr	r3, [r7, #12]
   1d498:	0011      	movs	r1, r2
   1d49a:	0018      	movs	r0, r3
   1d49c:	4b25      	ldr	r3, [pc, #148]	; (1d534 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d49e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d4a0:	687b      	ldr	r3, [r7, #4]
   1d4a2:	2b00      	cmp	r3, #0
   1d4a4:	d002      	beq.n	1d4ac <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d4a6:	2301      	movs	r3, #1
   1d4a8:	425b      	negs	r3, r3
   1d4aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d4ac:	4b20      	ldr	r3, [pc, #128]	; (1d530 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d4ae:	681b      	ldr	r3, [r3, #0]
   1d4b0:	0018      	movs	r0, r3
   1d4b2:	4b21      	ldr	r3, [pc, #132]	; (1d538 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d4b4:	4798      	blx	r3
   1d4b6:	0003      	movs	r3, r0
   1d4b8:	001a      	movs	r2, r3
   1d4ba:	4b20      	ldr	r3, [pc, #128]	; (1d53c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d4bc:	881b      	ldrh	r3, [r3, #0]
   1d4be:	4013      	ands	r3, r2
   1d4c0:	b29b      	uxth	r3, r3
   1d4c2:	2b00      	cmp	r3, #0
   1d4c4:	d011      	beq.n	1d4ea <vTaskPlaceOnEventListRestricted+0x72>
   1d4c6:	4b1e      	ldr	r3, [pc, #120]	; (1d540 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d4c8:	681a      	ldr	r2, [r3, #0]
   1d4ca:	68bb      	ldr	r3, [r7, #8]
   1d4cc:	18d3      	adds	r3, r2, r3
   1d4ce:	0019      	movs	r1, r3
   1d4d0:	2088      	movs	r0, #136	; 0x88
   1d4d2:	4b1c      	ldr	r3, [pc, #112]	; (1d544 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d4d4:	4798      	blx	r3
   1d4d6:	4b16      	ldr	r3, [pc, #88]	; (1d530 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d4d8:	681b      	ldr	r3, [r3, #0]
   1d4da:	0018      	movs	r0, r3
   1d4dc:	4b1a      	ldr	r3, [pc, #104]	; (1d548 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d4de:	4798      	blx	r3
   1d4e0:	0003      	movs	r3, r0
   1d4e2:	b2db      	uxtb	r3, r3
   1d4e4:	0018      	movs	r0, r3
   1d4e6:	4b19      	ldr	r3, [pc, #100]	; (1d54c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d4e8:	4798      	blx	r3
   1d4ea:	4b19      	ldr	r3, [pc, #100]	; (1d550 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d4ec:	4798      	blx	r3
   1d4ee:	0003      	movs	r3, r0
   1d4f0:	0018      	movs	r0, r3
   1d4f2:	4b11      	ldr	r3, [pc, #68]	; (1d538 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d4f4:	4798      	blx	r3
   1d4f6:	0003      	movs	r3, r0
   1d4f8:	001a      	movs	r2, r3
   1d4fa:	4b10      	ldr	r3, [pc, #64]	; (1d53c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d4fc:	881b      	ldrh	r3, [r3, #0]
   1d4fe:	4013      	ands	r3, r2
   1d500:	b29b      	uxth	r3, r3
   1d502:	2b00      	cmp	r3, #0
   1d504:	d00a      	beq.n	1d51c <vTaskPlaceOnEventListRestricted+0xa4>
   1d506:	4b12      	ldr	r3, [pc, #72]	; (1d550 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d508:	4798      	blx	r3
   1d50a:	0003      	movs	r3, r0
   1d50c:	0018      	movs	r0, r3
   1d50e:	4b0e      	ldr	r3, [pc, #56]	; (1d548 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d510:	4798      	blx	r3
   1d512:	0003      	movs	r3, r0
   1d514:	b2db      	uxtb	r3, r3
   1d516:	0018      	movs	r0, r3
   1d518:	4b0c      	ldr	r3, [pc, #48]	; (1d54c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d51a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d51c:	687a      	ldr	r2, [r7, #4]
   1d51e:	68bb      	ldr	r3, [r7, #8]
   1d520:	0011      	movs	r1, r2
   1d522:	0018      	movs	r0, r3
   1d524:	4b0b      	ldr	r3, [pc, #44]	; (1d554 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d526:	4798      	blx	r3
	}
   1d528:	46c0      	nop			; (mov r8, r8)
   1d52a:	46bd      	mov	sp, r7
   1d52c:	b004      	add	sp, #16
   1d52e:	bd80      	pop	{r7, pc}
   1d530:	200040e0 	.word	0x200040e0
   1d534:	0001aa93 	.word	0x0001aa93
   1d538:	00018cc9 	.word	0x00018cc9
   1d53c:	20000110 	.word	0x20000110
   1d540:	200041bc 	.word	0x200041bc
   1d544:	000199c9 	.word	0x000199c9
   1d548:	00018ca9 	.word	0x00018ca9
   1d54c:	00019e59 	.word	0x00019e59
   1d550:	00018f65 	.word	0x00018f65
   1d554:	0001ded9 	.word	0x0001ded9

0001d558 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d558:	b580      	push	{r7, lr}
   1d55a:	b084      	sub	sp, #16
   1d55c:	af00      	add	r7, sp, #0
   1d55e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d560:	687b      	ldr	r3, [r7, #4]
   1d562:	68db      	ldr	r3, [r3, #12]
   1d564:	68db      	ldr	r3, [r3, #12]
   1d566:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d568:	68bb      	ldr	r3, [r7, #8]
   1d56a:	2b00      	cmp	r3, #0
   1d56c:	d101      	bne.n	1d572 <xTaskRemoveFromEventList+0x1a>
   1d56e:	b672      	cpsid	i
   1d570:	e7fe      	b.n	1d570 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d572:	68bb      	ldr	r3, [r7, #8]
   1d574:	3318      	adds	r3, #24
   1d576:	0018      	movs	r0, r3
   1d578:	4b2a      	ldr	r3, [pc, #168]	; (1d624 <xTaskRemoveFromEventList+0xcc>)
   1d57a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d57c:	4b2a      	ldr	r3, [pc, #168]	; (1d628 <xTaskRemoveFromEventList+0xd0>)
   1d57e:	681b      	ldr	r3, [r3, #0]
   1d580:	2b00      	cmp	r3, #0
   1d582:	d132      	bne.n	1d5ea <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d584:	68bb      	ldr	r3, [r7, #8]
   1d586:	3304      	adds	r3, #4
   1d588:	0018      	movs	r0, r3
   1d58a:	4b26      	ldr	r3, [pc, #152]	; (1d624 <xTaskRemoveFromEventList+0xcc>)
   1d58c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d58e:	68bb      	ldr	r3, [r7, #8]
   1d590:	0018      	movs	r0, r3
   1d592:	4b26      	ldr	r3, [pc, #152]	; (1d62c <xTaskRemoveFromEventList+0xd4>)
   1d594:	4798      	blx	r3
   1d596:	0003      	movs	r3, r0
   1d598:	001a      	movs	r2, r3
   1d59a:	4b25      	ldr	r3, [pc, #148]	; (1d630 <xTaskRemoveFromEventList+0xd8>)
   1d59c:	881b      	ldrh	r3, [r3, #0]
   1d59e:	4013      	ands	r3, r2
   1d5a0:	b29b      	uxth	r3, r3
   1d5a2:	2b00      	cmp	r3, #0
   1d5a4:	d008      	beq.n	1d5b8 <xTaskRemoveFromEventList+0x60>
   1d5a6:	68bb      	ldr	r3, [r7, #8]
   1d5a8:	0018      	movs	r0, r3
   1d5aa:	4b22      	ldr	r3, [pc, #136]	; (1d634 <xTaskRemoveFromEventList+0xdc>)
   1d5ac:	4798      	blx	r3
   1d5ae:	0003      	movs	r3, r0
   1d5b0:	b2db      	uxtb	r3, r3
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	4b20      	ldr	r3, [pc, #128]	; (1d638 <xTaskRemoveFromEventList+0xe0>)
   1d5b6:	4798      	blx	r3
   1d5b8:	68bb      	ldr	r3, [r7, #8]
   1d5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5bc:	4b1f      	ldr	r3, [pc, #124]	; (1d63c <xTaskRemoveFromEventList+0xe4>)
   1d5be:	681b      	ldr	r3, [r3, #0]
   1d5c0:	429a      	cmp	r2, r3
   1d5c2:	d903      	bls.n	1d5cc <xTaskRemoveFromEventList+0x74>
   1d5c4:	68bb      	ldr	r3, [r7, #8]
   1d5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5c8:	4b1c      	ldr	r3, [pc, #112]	; (1d63c <xTaskRemoveFromEventList+0xe4>)
   1d5ca:	601a      	str	r2, [r3, #0]
   1d5cc:	68bb      	ldr	r3, [r7, #8]
   1d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5d0:	0013      	movs	r3, r2
   1d5d2:	009b      	lsls	r3, r3, #2
   1d5d4:	189b      	adds	r3, r3, r2
   1d5d6:	009b      	lsls	r3, r3, #2
   1d5d8:	4a19      	ldr	r2, [pc, #100]	; (1d640 <xTaskRemoveFromEventList+0xe8>)
   1d5da:	189a      	adds	r2, r3, r2
   1d5dc:	68bb      	ldr	r3, [r7, #8]
   1d5de:	3304      	adds	r3, #4
   1d5e0:	0019      	movs	r1, r3
   1d5e2:	0010      	movs	r0, r2
   1d5e4:	4b17      	ldr	r3, [pc, #92]	; (1d644 <xTaskRemoveFromEventList+0xec>)
   1d5e6:	4798      	blx	r3
   1d5e8:	e007      	b.n	1d5fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d5ea:	68bb      	ldr	r3, [r7, #8]
   1d5ec:	3318      	adds	r3, #24
   1d5ee:	001a      	movs	r2, r3
   1d5f0:	4b15      	ldr	r3, [pc, #84]	; (1d648 <xTaskRemoveFromEventList+0xf0>)
   1d5f2:	0011      	movs	r1, r2
   1d5f4:	0018      	movs	r0, r3
   1d5f6:	4b13      	ldr	r3, [pc, #76]	; (1d644 <xTaskRemoveFromEventList+0xec>)
   1d5f8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d5fa:	68bb      	ldr	r3, [r7, #8]
   1d5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5fe:	4b13      	ldr	r3, [pc, #76]	; (1d64c <xTaskRemoveFromEventList+0xf4>)
   1d600:	681b      	ldr	r3, [r3, #0]
   1d602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d604:	429a      	cmp	r2, r3
   1d606:	d905      	bls.n	1d614 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d608:	2301      	movs	r3, #1
   1d60a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d60c:	4b10      	ldr	r3, [pc, #64]	; (1d650 <xTaskRemoveFromEventList+0xf8>)
   1d60e:	2201      	movs	r2, #1
   1d610:	601a      	str	r2, [r3, #0]
   1d612:	e001      	b.n	1d618 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d614:	2300      	movs	r3, #0
   1d616:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d618:	68fb      	ldr	r3, [r7, #12]
}
   1d61a:	0018      	movs	r0, r3
   1d61c:	46bd      	mov	sp, r7
   1d61e:	b004      	add	sp, #16
   1d620:	bd80      	pop	{r7, pc}
   1d622:	46c0      	nop			; (mov r8, r8)
   1d624:	0001ab43 	.word	0x0001ab43
   1d628:	200041e0 	.word	0x200041e0
   1d62c:	00018cc9 	.word	0x00018cc9
   1d630:	20000110 	.word	0x20000110
   1d634:	00018ca9 	.word	0x00018ca9
   1d638:	00019479 	.word	0x00019479
   1d63c:	200041c0 	.word	0x200041c0
   1d640:	200040e4 	.word	0x200040e4
   1d644:	0001aa93 	.word	0x0001aa93
   1d648:	20004178 	.word	0x20004178
   1d64c:	200040e0 	.word	0x200040e0
   1d650:	200041cc 	.word	0x200041cc

0001d654 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d654:	b580      	push	{r7, lr}
   1d656:	b082      	sub	sp, #8
   1d658:	af00      	add	r7, sp, #0
   1d65a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d65c:	687b      	ldr	r3, [r7, #4]
   1d65e:	2b00      	cmp	r3, #0
   1d660:	d101      	bne.n	1d666 <vTaskSetTimeOutState+0x12>
   1d662:	b672      	cpsid	i
   1d664:	e7fe      	b.n	1d664 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d666:	4b08      	ldr	r3, [pc, #32]	; (1d688 <vTaskSetTimeOutState+0x34>)
   1d668:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d66a:	4b08      	ldr	r3, [pc, #32]	; (1d68c <vTaskSetTimeOutState+0x38>)
   1d66c:	681a      	ldr	r2, [r3, #0]
   1d66e:	687b      	ldr	r3, [r7, #4]
   1d670:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d672:	4b07      	ldr	r3, [pc, #28]	; (1d690 <vTaskSetTimeOutState+0x3c>)
   1d674:	681a      	ldr	r2, [r3, #0]
   1d676:	687b      	ldr	r3, [r7, #4]
   1d678:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d67a:	4b06      	ldr	r3, [pc, #24]	; (1d694 <vTaskSetTimeOutState+0x40>)
   1d67c:	4798      	blx	r3
}
   1d67e:	46c0      	nop			; (mov r8, r8)
   1d680:	46bd      	mov	sp, r7
   1d682:	b002      	add	sp, #8
   1d684:	bd80      	pop	{r7, pc}
   1d686:	46c0      	nop			; (mov r8, r8)
   1d688:	0001acc9 	.word	0x0001acc9
   1d68c:	200041d0 	.word	0x200041d0
   1d690:	200041bc 	.word	0x200041bc
   1d694:	0001aced 	.word	0x0001aced

0001d698 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d698:	b580      	push	{r7, lr}
   1d69a:	b082      	sub	sp, #8
   1d69c:	af00      	add	r7, sp, #0
   1d69e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d6a0:	4b05      	ldr	r3, [pc, #20]	; (1d6b8 <vTaskInternalSetTimeOutState+0x20>)
   1d6a2:	681a      	ldr	r2, [r3, #0]
   1d6a4:	687b      	ldr	r3, [r7, #4]
   1d6a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d6a8:	4b04      	ldr	r3, [pc, #16]	; (1d6bc <vTaskInternalSetTimeOutState+0x24>)
   1d6aa:	681a      	ldr	r2, [r3, #0]
   1d6ac:	687b      	ldr	r3, [r7, #4]
   1d6ae:	605a      	str	r2, [r3, #4]
}
   1d6b0:	46c0      	nop			; (mov r8, r8)
   1d6b2:	46bd      	mov	sp, r7
   1d6b4:	b002      	add	sp, #8
   1d6b6:	bd80      	pop	{r7, pc}
   1d6b8:	200041d0 	.word	0x200041d0
   1d6bc:	200041bc 	.word	0x200041bc

0001d6c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d6c0:	b580      	push	{r7, lr}
   1d6c2:	b086      	sub	sp, #24
   1d6c4:	af00      	add	r7, sp, #0
   1d6c6:	6078      	str	r0, [r7, #4]
   1d6c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	2b00      	cmp	r3, #0
   1d6ce:	d101      	bne.n	1d6d4 <xTaskCheckForTimeOut+0x14>
   1d6d0:	b672      	cpsid	i
   1d6d2:	e7fe      	b.n	1d6d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d6d4:	683b      	ldr	r3, [r7, #0]
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	d101      	bne.n	1d6de <xTaskCheckForTimeOut+0x1e>
   1d6da:	b672      	cpsid	i
   1d6dc:	e7fe      	b.n	1d6dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d6de:	4b1e      	ldr	r3, [pc, #120]	; (1d758 <xTaskCheckForTimeOut+0x98>)
   1d6e0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d6e2:	4b1e      	ldr	r3, [pc, #120]	; (1d75c <xTaskCheckForTimeOut+0x9c>)
   1d6e4:	681b      	ldr	r3, [r3, #0]
   1d6e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d6e8:	687b      	ldr	r3, [r7, #4]
   1d6ea:	685b      	ldr	r3, [r3, #4]
   1d6ec:	693a      	ldr	r2, [r7, #16]
   1d6ee:	1ad3      	subs	r3, r2, r3
   1d6f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d6f2:	683b      	ldr	r3, [r7, #0]
   1d6f4:	681b      	ldr	r3, [r3, #0]
   1d6f6:	3301      	adds	r3, #1
   1d6f8:	d102      	bne.n	1d700 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d6fa:	2300      	movs	r3, #0
   1d6fc:	617b      	str	r3, [r7, #20]
   1d6fe:	e024      	b.n	1d74a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d700:	687b      	ldr	r3, [r7, #4]
   1d702:	681a      	ldr	r2, [r3, #0]
   1d704:	4b16      	ldr	r3, [pc, #88]	; (1d760 <xTaskCheckForTimeOut+0xa0>)
   1d706:	681b      	ldr	r3, [r3, #0]
   1d708:	429a      	cmp	r2, r3
   1d70a:	d007      	beq.n	1d71c <xTaskCheckForTimeOut+0x5c>
   1d70c:	687b      	ldr	r3, [r7, #4]
   1d70e:	685a      	ldr	r2, [r3, #4]
   1d710:	693b      	ldr	r3, [r7, #16]
   1d712:	429a      	cmp	r2, r3
   1d714:	d802      	bhi.n	1d71c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d716:	2301      	movs	r3, #1
   1d718:	617b      	str	r3, [r7, #20]
   1d71a:	e016      	b.n	1d74a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d71c:	683b      	ldr	r3, [r7, #0]
   1d71e:	681a      	ldr	r2, [r3, #0]
   1d720:	68fb      	ldr	r3, [r7, #12]
   1d722:	429a      	cmp	r2, r3
   1d724:	d90c      	bls.n	1d740 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d726:	683b      	ldr	r3, [r7, #0]
   1d728:	681a      	ldr	r2, [r3, #0]
   1d72a:	68fb      	ldr	r3, [r7, #12]
   1d72c:	1ad2      	subs	r2, r2, r3
   1d72e:	683b      	ldr	r3, [r7, #0]
   1d730:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d732:	687b      	ldr	r3, [r7, #4]
   1d734:	0018      	movs	r0, r3
   1d736:	4b0b      	ldr	r3, [pc, #44]	; (1d764 <xTaskCheckForTimeOut+0xa4>)
   1d738:	4798      	blx	r3
			xReturn = pdFALSE;
   1d73a:	2300      	movs	r3, #0
   1d73c:	617b      	str	r3, [r7, #20]
   1d73e:	e004      	b.n	1d74a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d740:	683b      	ldr	r3, [r7, #0]
   1d742:	2200      	movs	r2, #0
   1d744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d746:	2301      	movs	r3, #1
   1d748:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d74a:	4b07      	ldr	r3, [pc, #28]	; (1d768 <xTaskCheckForTimeOut+0xa8>)
   1d74c:	4798      	blx	r3

	return xReturn;
   1d74e:	697b      	ldr	r3, [r7, #20]
}
   1d750:	0018      	movs	r0, r3
   1d752:	46bd      	mov	sp, r7
   1d754:	b006      	add	sp, #24
   1d756:	bd80      	pop	{r7, pc}
   1d758:	0001acc9 	.word	0x0001acc9
   1d75c:	200041bc 	.word	0x200041bc
   1d760:	200041d0 	.word	0x200041d0
   1d764:	0001d699 	.word	0x0001d699
   1d768:	0001aced 	.word	0x0001aced

0001d76c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d76c:	b580      	push	{r7, lr}
   1d76e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d770:	4b02      	ldr	r3, [pc, #8]	; (1d77c <vTaskMissedYield+0x10>)
   1d772:	2201      	movs	r2, #1
   1d774:	601a      	str	r2, [r3, #0]
}
   1d776:	46c0      	nop			; (mov r8, r8)
   1d778:	46bd      	mov	sp, r7
   1d77a:	bd80      	pop	{r7, pc}
   1d77c:	200041cc 	.word	0x200041cc

0001d780 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d780:	b580      	push	{r7, lr}
   1d782:	b084      	sub	sp, #16
   1d784:	af00      	add	r7, sp, #0
   1d786:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d788:	687b      	ldr	r3, [r7, #4]
   1d78a:	2b00      	cmp	r3, #0
   1d78c:	d005      	beq.n	1d79a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d78e:	687b      	ldr	r3, [r7, #4]
   1d790:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d792:	68bb      	ldr	r3, [r7, #8]
   1d794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d796:	60fb      	str	r3, [r7, #12]
   1d798:	e001      	b.n	1d79e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d79a:	2300      	movs	r3, #0
   1d79c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d79e:	68fb      	ldr	r3, [r7, #12]
	}
   1d7a0:	0018      	movs	r0, r3
   1d7a2:	46bd      	mov	sp, r7
   1d7a4:	b004      	add	sp, #16
   1d7a6:	bd80      	pop	{r7, pc}

0001d7a8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d7a8:	b580      	push	{r7, lr}
   1d7aa:	b084      	sub	sp, #16
   1d7ac:	af00      	add	r7, sp, #0
   1d7ae:	6078      	str	r0, [r7, #4]
   1d7b0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d7b2:	687b      	ldr	r3, [r7, #4]
   1d7b4:	2b00      	cmp	r3, #0
   1d7b6:	d004      	beq.n	1d7c2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d7b8:	687b      	ldr	r3, [r7, #4]
   1d7ba:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d7bc:	68fb      	ldr	r3, [r7, #12]
   1d7be:	683a      	ldr	r2, [r7, #0]
   1d7c0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d7c2:	46c0      	nop			; (mov r8, r8)
   1d7c4:	46bd      	mov	sp, r7
   1d7c6:	b004      	add	sp, #16
   1d7c8:	bd80      	pop	{r7, pc}
	...

0001d7cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d7cc:	b580      	push	{r7, lr}
   1d7ce:	b082      	sub	sp, #8
   1d7d0:	af00      	add	r7, sp, #0
   1d7d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d7d4:	4b04      	ldr	r3, [pc, #16]	; (1d7e8 <prvIdleTask+0x1c>)
   1d7d6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d7d8:	4b04      	ldr	r3, [pc, #16]	; (1d7ec <prvIdleTask+0x20>)
   1d7da:	681b      	ldr	r3, [r3, #0]
   1d7dc:	2b01      	cmp	r3, #1
   1d7de:	d9f9      	bls.n	1d7d4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d7e0:	4b03      	ldr	r3, [pc, #12]	; (1d7f0 <prvIdleTask+0x24>)
   1d7e2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d7e4:	e7f6      	b.n	1d7d4 <prvIdleTask+0x8>
   1d7e6:	46c0      	nop			; (mov r8, r8)
   1d7e8:	0001d881 	.word	0x0001d881
   1d7ec:	200040e4 	.word	0x200040e4
   1d7f0:	0001acb1 	.word	0x0001acb1

0001d7f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d7f4:	b580      	push	{r7, lr}
   1d7f6:	b082      	sub	sp, #8
   1d7f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	607b      	str	r3, [r7, #4]
   1d7fe:	e00c      	b.n	1d81a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d800:	687a      	ldr	r2, [r7, #4]
   1d802:	0013      	movs	r3, r2
   1d804:	009b      	lsls	r3, r3, #2
   1d806:	189b      	adds	r3, r3, r2
   1d808:	009b      	lsls	r3, r3, #2
   1d80a:	4a14      	ldr	r2, [pc, #80]	; (1d85c <prvInitialiseTaskLists+0x68>)
   1d80c:	189b      	adds	r3, r3, r2
   1d80e:	0018      	movs	r0, r3
   1d810:	4b13      	ldr	r3, [pc, #76]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d812:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d814:	687b      	ldr	r3, [r7, #4]
   1d816:	3301      	adds	r3, #1
   1d818:	607b      	str	r3, [r7, #4]
   1d81a:	687b      	ldr	r3, [r7, #4]
   1d81c:	2b04      	cmp	r3, #4
   1d81e:	d9ef      	bls.n	1d800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d820:	4b10      	ldr	r3, [pc, #64]	; (1d864 <prvInitialiseTaskLists+0x70>)
   1d822:	0018      	movs	r0, r3
   1d824:	4b0e      	ldr	r3, [pc, #56]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d826:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d828:	4b0f      	ldr	r3, [pc, #60]	; (1d868 <prvInitialiseTaskLists+0x74>)
   1d82a:	0018      	movs	r0, r3
   1d82c:	4b0c      	ldr	r3, [pc, #48]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d82e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d830:	4b0e      	ldr	r3, [pc, #56]	; (1d86c <prvInitialiseTaskLists+0x78>)
   1d832:	0018      	movs	r0, r3
   1d834:	4b0a      	ldr	r3, [pc, #40]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d836:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d838:	4b0d      	ldr	r3, [pc, #52]	; (1d870 <prvInitialiseTaskLists+0x7c>)
   1d83a:	0018      	movs	r0, r3
   1d83c:	4b08      	ldr	r3, [pc, #32]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d83e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d840:	4b0c      	ldr	r3, [pc, #48]	; (1d874 <prvInitialiseTaskLists+0x80>)
   1d842:	0018      	movs	r0, r3
   1d844:	4b06      	ldr	r3, [pc, #24]	; (1d860 <prvInitialiseTaskLists+0x6c>)
   1d846:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d848:	4b0b      	ldr	r3, [pc, #44]	; (1d878 <prvInitialiseTaskLists+0x84>)
   1d84a:	4a06      	ldr	r2, [pc, #24]	; (1d864 <prvInitialiseTaskLists+0x70>)
   1d84c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d84e:	4b0b      	ldr	r3, [pc, #44]	; (1d87c <prvInitialiseTaskLists+0x88>)
   1d850:	4a05      	ldr	r2, [pc, #20]	; (1d868 <prvInitialiseTaskLists+0x74>)
   1d852:	601a      	str	r2, [r3, #0]
}
   1d854:	46c0      	nop			; (mov r8, r8)
   1d856:	46bd      	mov	sp, r7
   1d858:	b002      	add	sp, #8
   1d85a:	bd80      	pop	{r7, pc}
   1d85c:	200040e4 	.word	0x200040e4
   1d860:	0001aa41 	.word	0x0001aa41
   1d864:	20004148 	.word	0x20004148
   1d868:	2000415c 	.word	0x2000415c
   1d86c:	20004178 	.word	0x20004178
   1d870:	2000418c 	.word	0x2000418c
   1d874:	200041a4 	.word	0x200041a4
   1d878:	20004170 	.word	0x20004170
   1d87c:	20004174 	.word	0x20004174

0001d880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d880:	b580      	push	{r7, lr}
   1d882:	b082      	sub	sp, #8
   1d884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d886:	e01a      	b.n	1d8be <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d888:	4b11      	ldr	r3, [pc, #68]	; (1d8d0 <prvCheckTasksWaitingTermination+0x50>)
   1d88a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d88c:	4b11      	ldr	r3, [pc, #68]	; (1d8d4 <prvCheckTasksWaitingTermination+0x54>)
   1d88e:	68db      	ldr	r3, [r3, #12]
   1d890:	68db      	ldr	r3, [r3, #12]
   1d892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d894:	687b      	ldr	r3, [r7, #4]
   1d896:	3304      	adds	r3, #4
   1d898:	0018      	movs	r0, r3
   1d89a:	4b0f      	ldr	r3, [pc, #60]	; (1d8d8 <prvCheckTasksWaitingTermination+0x58>)
   1d89c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d89e:	4b0f      	ldr	r3, [pc, #60]	; (1d8dc <prvCheckTasksWaitingTermination+0x5c>)
   1d8a0:	681b      	ldr	r3, [r3, #0]
   1d8a2:	1e5a      	subs	r2, r3, #1
   1d8a4:	4b0d      	ldr	r3, [pc, #52]	; (1d8dc <prvCheckTasksWaitingTermination+0x5c>)
   1d8a6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d8a8:	4b0d      	ldr	r3, [pc, #52]	; (1d8e0 <prvCheckTasksWaitingTermination+0x60>)
   1d8aa:	681b      	ldr	r3, [r3, #0]
   1d8ac:	1e5a      	subs	r2, r3, #1
   1d8ae:	4b0c      	ldr	r3, [pc, #48]	; (1d8e0 <prvCheckTasksWaitingTermination+0x60>)
   1d8b0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d8b2:	4b0c      	ldr	r3, [pc, #48]	; (1d8e4 <prvCheckTasksWaitingTermination+0x64>)
   1d8b4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d8b6:	687b      	ldr	r3, [r7, #4]
   1d8b8:	0018      	movs	r0, r3
   1d8ba:	4b0b      	ldr	r3, [pc, #44]	; (1d8e8 <prvCheckTasksWaitingTermination+0x68>)
   1d8bc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d8be:	4b08      	ldr	r3, [pc, #32]	; (1d8e0 <prvCheckTasksWaitingTermination+0x60>)
   1d8c0:	681b      	ldr	r3, [r3, #0]
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	d1e0      	bne.n	1d888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d8c6:	46c0      	nop			; (mov r8, r8)
   1d8c8:	46bd      	mov	sp, r7
   1d8ca:	b002      	add	sp, #8
   1d8cc:	bd80      	pop	{r7, pc}
   1d8ce:	46c0      	nop			; (mov r8, r8)
   1d8d0:	0001acc9 	.word	0x0001acc9
   1d8d4:	2000418c 	.word	0x2000418c
   1d8d8:	0001ab43 	.word	0x0001ab43
   1d8dc:	200041b8 	.word	0x200041b8
   1d8e0:	200041a0 	.word	0x200041a0
   1d8e4:	0001aced 	.word	0x0001aced
   1d8e8:	0001d95d 	.word	0x0001d95d

0001d8ec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d8ec:	b580      	push	{r7, lr}
   1d8ee:	b084      	sub	sp, #16
   1d8f0:	af00      	add	r7, sp, #0
   1d8f2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d8f4:	2300      	movs	r3, #0
   1d8f6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d8f8:	e005      	b.n	1d906 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d8fa:	687b      	ldr	r3, [r7, #4]
   1d8fc:	3301      	adds	r3, #1
   1d8fe:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d900:	68fb      	ldr	r3, [r7, #12]
   1d902:	3301      	adds	r3, #1
   1d904:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d906:	687b      	ldr	r3, [r7, #4]
   1d908:	781b      	ldrb	r3, [r3, #0]
   1d90a:	2ba5      	cmp	r3, #165	; 0xa5
   1d90c:	d0f5      	beq.n	1d8fa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d90e:	68fb      	ldr	r3, [r7, #12]
   1d910:	089b      	lsrs	r3, r3, #2
   1d912:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d914:	68fb      	ldr	r3, [r7, #12]
   1d916:	b29b      	uxth	r3, r3
	}
   1d918:	0018      	movs	r0, r3
   1d91a:	46bd      	mov	sp, r7
   1d91c:	b004      	add	sp, #16
   1d91e:	bd80      	pop	{r7, pc}

0001d920 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d920:	b580      	push	{r7, lr}
   1d922:	b086      	sub	sp, #24
   1d924:	af00      	add	r7, sp, #0
   1d926:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d928:	687b      	ldr	r3, [r7, #4]
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	d102      	bne.n	1d934 <uxTaskGetStackHighWaterMark+0x14>
   1d92e:	4b09      	ldr	r3, [pc, #36]	; (1d954 <uxTaskGetStackHighWaterMark+0x34>)
   1d930:	681b      	ldr	r3, [r3, #0]
   1d932:	e000      	b.n	1d936 <uxTaskGetStackHighWaterMark+0x16>
   1d934:	687b      	ldr	r3, [r7, #4]
   1d936:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d938:	697b      	ldr	r3, [r7, #20]
   1d93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d93c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d93e:	693b      	ldr	r3, [r7, #16]
   1d940:	0018      	movs	r0, r3
   1d942:	4b05      	ldr	r3, [pc, #20]	; (1d958 <uxTaskGetStackHighWaterMark+0x38>)
   1d944:	4798      	blx	r3
   1d946:	0003      	movs	r3, r0
   1d948:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d94a:	68fb      	ldr	r3, [r7, #12]
	}
   1d94c:	0018      	movs	r0, r3
   1d94e:	46bd      	mov	sp, r7
   1d950:	b006      	add	sp, #24
   1d952:	bd80      	pop	{r7, pc}
   1d954:	200040e0 	.word	0x200040e0
   1d958:	0001d8ed 	.word	0x0001d8ed

0001d95c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d95c:	b580      	push	{r7, lr}
   1d95e:	b082      	sub	sp, #8
   1d960:	af00      	add	r7, sp, #0
   1d962:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d964:	687b      	ldr	r3, [r7, #4]
   1d966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d968:	0018      	movs	r0, r3
   1d96a:	4b05      	ldr	r3, [pc, #20]	; (1d980 <prvDeleteTCB+0x24>)
   1d96c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d96e:	687b      	ldr	r3, [r7, #4]
   1d970:	0018      	movs	r0, r3
   1d972:	4b03      	ldr	r3, [pc, #12]	; (1d980 <prvDeleteTCB+0x24>)
   1d974:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d976:	46c0      	nop			; (mov r8, r8)
   1d978:	46bd      	mov	sp, r7
   1d97a:	b002      	add	sp, #8
   1d97c:	bd80      	pop	{r7, pc}
   1d97e:	46c0      	nop			; (mov r8, r8)
   1d980:	0001aec5 	.word	0x0001aec5

0001d984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d984:	b580      	push	{r7, lr}
   1d986:	b082      	sub	sp, #8
   1d988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d98a:	4b0e      	ldr	r3, [pc, #56]	; (1d9c4 <prvResetNextTaskUnblockTime+0x40>)
   1d98c:	681b      	ldr	r3, [r3, #0]
   1d98e:	681b      	ldr	r3, [r3, #0]
   1d990:	2b00      	cmp	r3, #0
   1d992:	d101      	bne.n	1d998 <prvResetNextTaskUnblockTime+0x14>
   1d994:	2301      	movs	r3, #1
   1d996:	e000      	b.n	1d99a <prvResetNextTaskUnblockTime+0x16>
   1d998:	2300      	movs	r3, #0
   1d99a:	2b00      	cmp	r3, #0
   1d99c:	d004      	beq.n	1d9a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d99e:	4b0a      	ldr	r3, [pc, #40]	; (1d9c8 <prvResetNextTaskUnblockTime+0x44>)
   1d9a0:	2201      	movs	r2, #1
   1d9a2:	4252      	negs	r2, r2
   1d9a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d9a6:	e008      	b.n	1d9ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d9a8:	4b06      	ldr	r3, [pc, #24]	; (1d9c4 <prvResetNextTaskUnblockTime+0x40>)
   1d9aa:	681b      	ldr	r3, [r3, #0]
   1d9ac:	68db      	ldr	r3, [r3, #12]
   1d9ae:	68db      	ldr	r3, [r3, #12]
   1d9b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d9b2:	687b      	ldr	r3, [r7, #4]
   1d9b4:	685a      	ldr	r2, [r3, #4]
   1d9b6:	4b04      	ldr	r3, [pc, #16]	; (1d9c8 <prvResetNextTaskUnblockTime+0x44>)
   1d9b8:	601a      	str	r2, [r3, #0]
}
   1d9ba:	46c0      	nop			; (mov r8, r8)
   1d9bc:	46bd      	mov	sp, r7
   1d9be:	b002      	add	sp, #8
   1d9c0:	bd80      	pop	{r7, pc}
   1d9c2:	46c0      	nop			; (mov r8, r8)
   1d9c4:	20004170 	.word	0x20004170
   1d9c8:	200041d8 	.word	0x200041d8

0001d9cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d9cc:	b580      	push	{r7, lr}
   1d9ce:	b082      	sub	sp, #8
   1d9d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d9d2:	4b04      	ldr	r3, [pc, #16]	; (1d9e4 <xTaskGetCurrentTaskHandle+0x18>)
   1d9d4:	681b      	ldr	r3, [r3, #0]
   1d9d6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d9d8:	687b      	ldr	r3, [r7, #4]
	}
   1d9da:	0018      	movs	r0, r3
   1d9dc:	46bd      	mov	sp, r7
   1d9de:	b002      	add	sp, #8
   1d9e0:	bd80      	pop	{r7, pc}
   1d9e2:	46c0      	nop			; (mov r8, r8)
   1d9e4:	200040e0 	.word	0x200040e0

0001d9e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d9e8:	b580      	push	{r7, lr}
   1d9ea:	b082      	sub	sp, #8
   1d9ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d9ee:	4b0a      	ldr	r3, [pc, #40]	; (1da18 <xTaskGetSchedulerState+0x30>)
   1d9f0:	681b      	ldr	r3, [r3, #0]
   1d9f2:	2b00      	cmp	r3, #0
   1d9f4:	d102      	bne.n	1d9fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d9f6:	2301      	movs	r3, #1
   1d9f8:	607b      	str	r3, [r7, #4]
   1d9fa:	e008      	b.n	1da0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d9fc:	4b07      	ldr	r3, [pc, #28]	; (1da1c <xTaskGetSchedulerState+0x34>)
   1d9fe:	681b      	ldr	r3, [r3, #0]
   1da00:	2b00      	cmp	r3, #0
   1da02:	d102      	bne.n	1da0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1da04:	2302      	movs	r3, #2
   1da06:	607b      	str	r3, [r7, #4]
   1da08:	e001      	b.n	1da0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1da0a:	2300      	movs	r3, #0
   1da0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1da0e:	687b      	ldr	r3, [r7, #4]
	}
   1da10:	0018      	movs	r0, r3
   1da12:	46bd      	mov	sp, r7
   1da14:	b002      	add	sp, #8
   1da16:	bd80      	pop	{r7, pc}
   1da18:	200041c4 	.word	0x200041c4
   1da1c:	200041e0 	.word	0x200041e0

0001da20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1da20:	b590      	push	{r4, r7, lr}
   1da22:	b085      	sub	sp, #20
   1da24:	af00      	add	r7, sp, #0
   1da26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1da28:	687b      	ldr	r3, [r7, #4]
   1da2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1da2c:	2300      	movs	r3, #0
   1da2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1da30:	687b      	ldr	r3, [r7, #4]
   1da32:	2b00      	cmp	r3, #0
   1da34:	d100      	bne.n	1da38 <xTaskPriorityInherit+0x18>
   1da36:	e09d      	b.n	1db74 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1da38:	68bb      	ldr	r3, [r7, #8]
   1da3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da3c:	4b50      	ldr	r3, [pc, #320]	; (1db80 <xTaskPriorityInherit+0x160>)
   1da3e:	681b      	ldr	r3, [r3, #0]
   1da40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da42:	429a      	cmp	r2, r3
   1da44:	d300      	bcc.n	1da48 <xTaskPriorityInherit+0x28>
   1da46:	e08c      	b.n	1db62 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1da48:	68bb      	ldr	r3, [r7, #8]
   1da4a:	699b      	ldr	r3, [r3, #24]
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	db06      	blt.n	1da5e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1da50:	4b4b      	ldr	r3, [pc, #300]	; (1db80 <xTaskPriorityInherit+0x160>)
   1da52:	681b      	ldr	r3, [r3, #0]
   1da54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1da56:	2205      	movs	r2, #5
   1da58:	1ad2      	subs	r2, r2, r3
   1da5a:	68bb      	ldr	r3, [r7, #8]
   1da5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1da5e:	68bb      	ldr	r3, [r7, #8]
   1da60:	6959      	ldr	r1, [r3, #20]
   1da62:	68bb      	ldr	r3, [r7, #8]
   1da64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da66:	0013      	movs	r3, r2
   1da68:	009b      	lsls	r3, r3, #2
   1da6a:	189b      	adds	r3, r3, r2
   1da6c:	009b      	lsls	r3, r3, #2
   1da6e:	4a45      	ldr	r2, [pc, #276]	; (1db84 <xTaskPriorityInherit+0x164>)
   1da70:	189b      	adds	r3, r3, r2
   1da72:	4299      	cmp	r1, r3
   1da74:	d101      	bne.n	1da7a <xTaskPriorityInherit+0x5a>
   1da76:	2301      	movs	r3, #1
   1da78:	e000      	b.n	1da7c <xTaskPriorityInherit+0x5c>
   1da7a:	2300      	movs	r3, #0
   1da7c:	2b00      	cmp	r3, #0
   1da7e:	d037      	beq.n	1daf0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1da80:	68bb      	ldr	r3, [r7, #8]
   1da82:	3304      	adds	r3, #4
   1da84:	0018      	movs	r0, r3
   1da86:	4b40      	ldr	r3, [pc, #256]	; (1db88 <xTaskPriorityInherit+0x168>)
   1da88:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1da8a:	4b3d      	ldr	r3, [pc, #244]	; (1db80 <xTaskPriorityInherit+0x160>)
   1da8c:	681b      	ldr	r3, [r3, #0]
   1da8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1da90:	68bb      	ldr	r3, [r7, #8]
   1da92:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1da94:	68bb      	ldr	r3, [r7, #8]
   1da96:	0018      	movs	r0, r3
   1da98:	4b3c      	ldr	r3, [pc, #240]	; (1db8c <xTaskPriorityInherit+0x16c>)
   1da9a:	4798      	blx	r3
   1da9c:	0003      	movs	r3, r0
   1da9e:	001a      	movs	r2, r3
   1daa0:	4b3b      	ldr	r3, [pc, #236]	; (1db90 <xTaskPriorityInherit+0x170>)
   1daa2:	881b      	ldrh	r3, [r3, #0]
   1daa4:	4013      	ands	r3, r2
   1daa6:	b29b      	uxth	r3, r3
   1daa8:	2b00      	cmp	r3, #0
   1daaa:	d008      	beq.n	1dabe <xTaskPriorityInherit+0x9e>
   1daac:	68bb      	ldr	r3, [r7, #8]
   1daae:	0018      	movs	r0, r3
   1dab0:	4b38      	ldr	r3, [pc, #224]	; (1db94 <xTaskPriorityInherit+0x174>)
   1dab2:	4798      	blx	r3
   1dab4:	0003      	movs	r3, r0
   1dab6:	b2db      	uxtb	r3, r3
   1dab8:	0018      	movs	r0, r3
   1daba:	4b37      	ldr	r3, [pc, #220]	; (1db98 <xTaskPriorityInherit+0x178>)
   1dabc:	4798      	blx	r3
   1dabe:	68bb      	ldr	r3, [r7, #8]
   1dac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dac2:	4b36      	ldr	r3, [pc, #216]	; (1db9c <xTaskPriorityInherit+0x17c>)
   1dac4:	681b      	ldr	r3, [r3, #0]
   1dac6:	429a      	cmp	r2, r3
   1dac8:	d903      	bls.n	1dad2 <xTaskPriorityInherit+0xb2>
   1daca:	68bb      	ldr	r3, [r7, #8]
   1dacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dace:	4b33      	ldr	r3, [pc, #204]	; (1db9c <xTaskPriorityInherit+0x17c>)
   1dad0:	601a      	str	r2, [r3, #0]
   1dad2:	68bb      	ldr	r3, [r7, #8]
   1dad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dad6:	0013      	movs	r3, r2
   1dad8:	009b      	lsls	r3, r3, #2
   1dada:	189b      	adds	r3, r3, r2
   1dadc:	009b      	lsls	r3, r3, #2
   1dade:	4a29      	ldr	r2, [pc, #164]	; (1db84 <xTaskPriorityInherit+0x164>)
   1dae0:	189a      	adds	r2, r3, r2
   1dae2:	68bb      	ldr	r3, [r7, #8]
   1dae4:	3304      	adds	r3, #4
   1dae6:	0019      	movs	r1, r3
   1dae8:	0010      	movs	r0, r2
   1daea:	4b2d      	ldr	r3, [pc, #180]	; (1dba0 <xTaskPriorityInherit+0x180>)
   1daec:	4798      	blx	r3
   1daee:	e004      	b.n	1dafa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1daf0:	4b23      	ldr	r3, [pc, #140]	; (1db80 <xTaskPriorityInherit+0x160>)
   1daf2:	681b      	ldr	r3, [r3, #0]
   1daf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1daf6:	68bb      	ldr	r3, [r7, #8]
   1daf8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1dafa:	68bb      	ldr	r3, [r7, #8]
   1dafc:	0018      	movs	r0, r3
   1dafe:	4b23      	ldr	r3, [pc, #140]	; (1db8c <xTaskPriorityInherit+0x16c>)
   1db00:	4798      	blx	r3
   1db02:	0003      	movs	r3, r0
   1db04:	001a      	movs	r2, r3
   1db06:	4b22      	ldr	r3, [pc, #136]	; (1db90 <xTaskPriorityInherit+0x170>)
   1db08:	881b      	ldrh	r3, [r3, #0]
   1db0a:	4013      	ands	r3, r2
   1db0c:	b29b      	uxth	r3, r3
   1db0e:	2b00      	cmp	r3, #0
   1db10:	d024      	beq.n	1db5c <xTaskPriorityInherit+0x13c>
   1db12:	68bb      	ldr	r3, [r7, #8]
   1db14:	0018      	movs	r0, r3
   1db16:	4b1f      	ldr	r3, [pc, #124]	; (1db94 <xTaskPriorityInherit+0x174>)
   1db18:	4798      	blx	r3
   1db1a:	0003      	movs	r3, r0
   1db1c:	b2db      	uxtb	r3, r3
   1db1e:	001c      	movs	r4, r3
   1db20:	68bb      	ldr	r3, [r7, #8]
   1db22:	0018      	movs	r0, r3
   1db24:	4b1b      	ldr	r3, [pc, #108]	; (1db94 <xTaskPriorityInherit+0x174>)
   1db26:	4798      	blx	r3
   1db28:	0003      	movs	r3, r0
   1db2a:	b2db      	uxtb	r3, r3
   1db2c:	0019      	movs	r1, r3
   1db2e:	2003      	movs	r0, #3
   1db30:	4b1c      	ldr	r3, [pc, #112]	; (1dba4 <xTaskPriorityInherit+0x184>)
   1db32:	4798      	blx	r3
   1db34:	0003      	movs	r3, r0
   1db36:	0022      	movs	r2, r4
   1db38:	2103      	movs	r1, #3
   1db3a:	208e      	movs	r0, #142	; 0x8e
   1db3c:	4c1a      	ldr	r4, [pc, #104]	; (1dba8 <xTaskPriorityInherit+0x188>)
   1db3e:	47a0      	blx	r4
   1db40:	68bb      	ldr	r3, [r7, #8]
   1db42:	0018      	movs	r0, r3
   1db44:	4b13      	ldr	r3, [pc, #76]	; (1db94 <xTaskPriorityInherit+0x174>)
   1db46:	4798      	blx	r3
   1db48:	0003      	movs	r3, r0
   1db4a:	b2d9      	uxtb	r1, r3
   1db4c:	4b0c      	ldr	r3, [pc, #48]	; (1db80 <xTaskPriorityInherit+0x160>)
   1db4e:	681b      	ldr	r3, [r3, #0]
   1db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db52:	b2db      	uxtb	r3, r3
   1db54:	001a      	movs	r2, r3
   1db56:	2003      	movs	r0, #3
   1db58:	4b14      	ldr	r3, [pc, #80]	; (1dbac <xTaskPriorityInherit+0x18c>)
   1db5a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1db5c:	2301      	movs	r3, #1
   1db5e:	60fb      	str	r3, [r7, #12]
   1db60:	e008      	b.n	1db74 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1db62:	68bb      	ldr	r3, [r7, #8]
   1db64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1db66:	4b06      	ldr	r3, [pc, #24]	; (1db80 <xTaskPriorityInherit+0x160>)
   1db68:	681b      	ldr	r3, [r3, #0]
   1db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db6c:	429a      	cmp	r2, r3
   1db6e:	d201      	bcs.n	1db74 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1db70:	2301      	movs	r3, #1
   1db72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1db74:	68fb      	ldr	r3, [r7, #12]
	}
   1db76:	0018      	movs	r0, r3
   1db78:	46bd      	mov	sp, r7
   1db7a:	b005      	add	sp, #20
   1db7c:	bd90      	pop	{r4, r7, pc}
   1db7e:	46c0      	nop			; (mov r8, r8)
   1db80:	200040e0 	.word	0x200040e0
   1db84:	200040e4 	.word	0x200040e4
   1db88:	0001ab43 	.word	0x0001ab43
   1db8c:	00018cc9 	.word	0x00018cc9
   1db90:	20000110 	.word	0x20000110
   1db94:	00018ca9 	.word	0x00018ca9
   1db98:	00019479 	.word	0x00019479
   1db9c:	200041c0 	.word	0x200041c0
   1dba0:	0001aa93 	.word	0x0001aa93
   1dba4:	00019c81 	.word	0x00019c81
   1dba8:	000197f1 	.word	0x000197f1
   1dbac:	00019bdd 	.word	0x00019bdd

0001dbb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1dbb0:	b590      	push	{r4, r7, lr}
   1dbb2:	b085      	sub	sp, #20
   1dbb4:	af00      	add	r7, sp, #0
   1dbb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dbb8:	687b      	ldr	r3, [r7, #4]
   1dbba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1dbbc:	2300      	movs	r3, #0
   1dbbe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dbc0:	687b      	ldr	r3, [r7, #4]
   1dbc2:	2b00      	cmp	r3, #0
   1dbc4:	d100      	bne.n	1dbc8 <xTaskPriorityDisinherit+0x18>
   1dbc6:	e089      	b.n	1dcdc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1dbc8:	4b47      	ldr	r3, [pc, #284]	; (1dce8 <xTaskPriorityDisinherit+0x138>)
   1dbca:	681b      	ldr	r3, [r3, #0]
   1dbcc:	68ba      	ldr	r2, [r7, #8]
   1dbce:	429a      	cmp	r2, r3
   1dbd0:	d001      	beq.n	1dbd6 <xTaskPriorityDisinherit+0x26>
   1dbd2:	b672      	cpsid	i
   1dbd4:	e7fe      	b.n	1dbd4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1dbd6:	68bb      	ldr	r3, [r7, #8]
   1dbd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbda:	2b00      	cmp	r3, #0
   1dbdc:	d101      	bne.n	1dbe2 <xTaskPriorityDisinherit+0x32>
   1dbde:	b672      	cpsid	i
   1dbe0:	e7fe      	b.n	1dbe0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1dbe2:	68bb      	ldr	r3, [r7, #8]
   1dbe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbe6:	1e5a      	subs	r2, r3, #1
   1dbe8:	68bb      	ldr	r3, [r7, #8]
   1dbea:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1dbec:	68bb      	ldr	r3, [r7, #8]
   1dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbf0:	68bb      	ldr	r3, [r7, #8]
   1dbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dbf4:	429a      	cmp	r2, r3
   1dbf6:	d071      	beq.n	1dcdc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1dbf8:	68bb      	ldr	r3, [r7, #8]
   1dbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbfc:	2b00      	cmp	r3, #0
   1dbfe:	d16d      	bne.n	1dcdc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dc00:	68bb      	ldr	r3, [r7, #8]
   1dc02:	3304      	adds	r3, #4
   1dc04:	0018      	movs	r0, r3
   1dc06:	4b39      	ldr	r3, [pc, #228]	; (1dcec <xTaskPriorityDisinherit+0x13c>)
   1dc08:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dc0a:	68bb      	ldr	r3, [r7, #8]
   1dc0c:	0018      	movs	r0, r3
   1dc0e:	4b38      	ldr	r3, [pc, #224]	; (1dcf0 <xTaskPriorityDisinherit+0x140>)
   1dc10:	4798      	blx	r3
   1dc12:	0003      	movs	r3, r0
   1dc14:	001a      	movs	r2, r3
   1dc16:	4b37      	ldr	r3, [pc, #220]	; (1dcf4 <xTaskPriorityDisinherit+0x144>)
   1dc18:	881b      	ldrh	r3, [r3, #0]
   1dc1a:	4013      	ands	r3, r2
   1dc1c:	b29b      	uxth	r3, r3
   1dc1e:	2b00      	cmp	r3, #0
   1dc20:	d023      	beq.n	1dc6a <xTaskPriorityDisinherit+0xba>
   1dc22:	68bb      	ldr	r3, [r7, #8]
   1dc24:	0018      	movs	r0, r3
   1dc26:	4b34      	ldr	r3, [pc, #208]	; (1dcf8 <xTaskPriorityDisinherit+0x148>)
   1dc28:	4798      	blx	r3
   1dc2a:	0003      	movs	r3, r0
   1dc2c:	b2db      	uxtb	r3, r3
   1dc2e:	001c      	movs	r4, r3
   1dc30:	68bb      	ldr	r3, [r7, #8]
   1dc32:	0018      	movs	r0, r3
   1dc34:	4b30      	ldr	r3, [pc, #192]	; (1dcf8 <xTaskPriorityDisinherit+0x148>)
   1dc36:	4798      	blx	r3
   1dc38:	0003      	movs	r3, r0
   1dc3a:	b2db      	uxtb	r3, r3
   1dc3c:	0019      	movs	r1, r3
   1dc3e:	2003      	movs	r0, #3
   1dc40:	4b2e      	ldr	r3, [pc, #184]	; (1dcfc <xTaskPriorityDisinherit+0x14c>)
   1dc42:	4798      	blx	r3
   1dc44:	0003      	movs	r3, r0
   1dc46:	0022      	movs	r2, r4
   1dc48:	2103      	movs	r1, #3
   1dc4a:	208f      	movs	r0, #143	; 0x8f
   1dc4c:	4c2c      	ldr	r4, [pc, #176]	; (1dd00 <xTaskPriorityDisinherit+0x150>)
   1dc4e:	47a0      	blx	r4
   1dc50:	68bb      	ldr	r3, [r7, #8]
   1dc52:	0018      	movs	r0, r3
   1dc54:	4b28      	ldr	r3, [pc, #160]	; (1dcf8 <xTaskPriorityDisinherit+0x148>)
   1dc56:	4798      	blx	r3
   1dc58:	0003      	movs	r3, r0
   1dc5a:	b2d9      	uxtb	r1, r3
   1dc5c:	68bb      	ldr	r3, [r7, #8]
   1dc5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dc60:	b2db      	uxtb	r3, r3
   1dc62:	001a      	movs	r2, r3
   1dc64:	2003      	movs	r0, #3
   1dc66:	4b27      	ldr	r3, [pc, #156]	; (1dd04 <xTaskPriorityDisinherit+0x154>)
   1dc68:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1dc6a:	68bb      	ldr	r3, [r7, #8]
   1dc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dc6e:	68bb      	ldr	r3, [r7, #8]
   1dc70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dc72:	68bb      	ldr	r3, [r7, #8]
   1dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dc76:	2205      	movs	r2, #5
   1dc78:	1ad2      	subs	r2, r2, r3
   1dc7a:	68bb      	ldr	r3, [r7, #8]
   1dc7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1dc7e:	68bb      	ldr	r3, [r7, #8]
   1dc80:	0018      	movs	r0, r3
   1dc82:	4b1b      	ldr	r3, [pc, #108]	; (1dcf0 <xTaskPriorityDisinherit+0x140>)
   1dc84:	4798      	blx	r3
   1dc86:	0003      	movs	r3, r0
   1dc88:	001a      	movs	r2, r3
   1dc8a:	4b1a      	ldr	r3, [pc, #104]	; (1dcf4 <xTaskPriorityDisinherit+0x144>)
   1dc8c:	881b      	ldrh	r3, [r3, #0]
   1dc8e:	4013      	ands	r3, r2
   1dc90:	b29b      	uxth	r3, r3
   1dc92:	2b00      	cmp	r3, #0
   1dc94:	d008      	beq.n	1dca8 <xTaskPriorityDisinherit+0xf8>
   1dc96:	68bb      	ldr	r3, [r7, #8]
   1dc98:	0018      	movs	r0, r3
   1dc9a:	4b17      	ldr	r3, [pc, #92]	; (1dcf8 <xTaskPriorityDisinherit+0x148>)
   1dc9c:	4798      	blx	r3
   1dc9e:	0003      	movs	r3, r0
   1dca0:	b2db      	uxtb	r3, r3
   1dca2:	0018      	movs	r0, r3
   1dca4:	4b18      	ldr	r3, [pc, #96]	; (1dd08 <xTaskPriorityDisinherit+0x158>)
   1dca6:	4798      	blx	r3
   1dca8:	68bb      	ldr	r3, [r7, #8]
   1dcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dcac:	4b17      	ldr	r3, [pc, #92]	; (1dd0c <xTaskPriorityDisinherit+0x15c>)
   1dcae:	681b      	ldr	r3, [r3, #0]
   1dcb0:	429a      	cmp	r2, r3
   1dcb2:	d903      	bls.n	1dcbc <xTaskPriorityDisinherit+0x10c>
   1dcb4:	68bb      	ldr	r3, [r7, #8]
   1dcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dcb8:	4b14      	ldr	r3, [pc, #80]	; (1dd0c <xTaskPriorityDisinherit+0x15c>)
   1dcba:	601a      	str	r2, [r3, #0]
   1dcbc:	68bb      	ldr	r3, [r7, #8]
   1dcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dcc0:	0013      	movs	r3, r2
   1dcc2:	009b      	lsls	r3, r3, #2
   1dcc4:	189b      	adds	r3, r3, r2
   1dcc6:	009b      	lsls	r3, r3, #2
   1dcc8:	4a11      	ldr	r2, [pc, #68]	; (1dd10 <xTaskPriorityDisinherit+0x160>)
   1dcca:	189a      	adds	r2, r3, r2
   1dccc:	68bb      	ldr	r3, [r7, #8]
   1dcce:	3304      	adds	r3, #4
   1dcd0:	0019      	movs	r1, r3
   1dcd2:	0010      	movs	r0, r2
   1dcd4:	4b0f      	ldr	r3, [pc, #60]	; (1dd14 <xTaskPriorityDisinherit+0x164>)
   1dcd6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dcd8:	2301      	movs	r3, #1
   1dcda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dcdc:	68fb      	ldr	r3, [r7, #12]
	}
   1dcde:	0018      	movs	r0, r3
   1dce0:	46bd      	mov	sp, r7
   1dce2:	b005      	add	sp, #20
   1dce4:	bd90      	pop	{r4, r7, pc}
   1dce6:	46c0      	nop			; (mov r8, r8)
   1dce8:	200040e0 	.word	0x200040e0
   1dcec:	0001ab43 	.word	0x0001ab43
   1dcf0:	00018cc9 	.word	0x00018cc9
   1dcf4:	20000110 	.word	0x20000110
   1dcf8:	00018ca9 	.word	0x00018ca9
   1dcfc:	00019c81 	.word	0x00019c81
   1dd00:	000197f1 	.word	0x000197f1
   1dd04:	00019bdd 	.word	0x00019bdd
   1dd08:	00019479 	.word	0x00019479
   1dd0c:	200041c0 	.word	0x200041c0
   1dd10:	200040e4 	.word	0x200040e4
   1dd14:	0001aa93 	.word	0x0001aa93

0001dd18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1dd18:	b590      	push	{r4, r7, lr}
   1dd1a:	b087      	sub	sp, #28
   1dd1c:	af00      	add	r7, sp, #0
   1dd1e:	6078      	str	r0, [r7, #4]
   1dd20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dd22:	687b      	ldr	r3, [r7, #4]
   1dd24:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1dd26:	2301      	movs	r3, #1
   1dd28:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dd2a:	687b      	ldr	r3, [r7, #4]
   1dd2c:	2b00      	cmp	r3, #0
   1dd2e:	d100      	bne.n	1dd32 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1dd30:	e0a4      	b.n	1de7c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1dd32:	693b      	ldr	r3, [r7, #16]
   1dd34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd36:	2b00      	cmp	r3, #0
   1dd38:	d101      	bne.n	1dd3e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1dd3a:	b672      	cpsid	i
   1dd3c:	e7fe      	b.n	1dd3c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1dd3e:	693b      	ldr	r3, [r7, #16]
   1dd40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dd42:	683b      	ldr	r3, [r7, #0]
   1dd44:	429a      	cmp	r2, r3
   1dd46:	d202      	bcs.n	1dd4e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1dd48:	683b      	ldr	r3, [r7, #0]
   1dd4a:	617b      	str	r3, [r7, #20]
   1dd4c:	e002      	b.n	1dd54 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1dd4e:	693b      	ldr	r3, [r7, #16]
   1dd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd52:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1dd54:	693b      	ldr	r3, [r7, #16]
   1dd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd58:	697b      	ldr	r3, [r7, #20]
   1dd5a:	429a      	cmp	r2, r3
   1dd5c:	d100      	bne.n	1dd60 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1dd5e:	e08d      	b.n	1de7c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1dd60:	693b      	ldr	r3, [r7, #16]
   1dd62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dd64:	68fb      	ldr	r3, [r7, #12]
   1dd66:	429a      	cmp	r2, r3
   1dd68:	d000      	beq.n	1dd6c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1dd6a:	e087      	b.n	1de7c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1dd6c:	4b45      	ldr	r3, [pc, #276]	; (1de84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1dd6e:	681b      	ldr	r3, [r3, #0]
   1dd70:	693a      	ldr	r2, [r7, #16]
   1dd72:	429a      	cmp	r2, r3
   1dd74:	d101      	bne.n	1dd7a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1dd76:	b672      	cpsid	i
   1dd78:	e7fe      	b.n	1dd78 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dd7a:	693b      	ldr	r3, [r7, #16]
   1dd7c:	0018      	movs	r0, r3
   1dd7e:	4b42      	ldr	r3, [pc, #264]	; (1de88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dd80:	4798      	blx	r3
   1dd82:	0003      	movs	r3, r0
   1dd84:	001a      	movs	r2, r3
   1dd86:	4b41      	ldr	r3, [pc, #260]	; (1de8c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dd88:	881b      	ldrh	r3, [r3, #0]
   1dd8a:	4013      	ands	r3, r2
   1dd8c:	b29b      	uxth	r3, r3
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	d023      	beq.n	1ddda <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1dd92:	693b      	ldr	r3, [r7, #16]
   1dd94:	0018      	movs	r0, r3
   1dd96:	4b3e      	ldr	r3, [pc, #248]	; (1de90 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dd98:	4798      	blx	r3
   1dd9a:	0003      	movs	r3, r0
   1dd9c:	b2db      	uxtb	r3, r3
   1dd9e:	001c      	movs	r4, r3
   1dda0:	693b      	ldr	r3, [r7, #16]
   1dda2:	0018      	movs	r0, r3
   1dda4:	4b3a      	ldr	r3, [pc, #232]	; (1de90 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dda6:	4798      	blx	r3
   1dda8:	0003      	movs	r3, r0
   1ddaa:	b2db      	uxtb	r3, r3
   1ddac:	0019      	movs	r1, r3
   1ddae:	2003      	movs	r0, #3
   1ddb0:	4b38      	ldr	r3, [pc, #224]	; (1de94 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ddb2:	4798      	blx	r3
   1ddb4:	0003      	movs	r3, r0
   1ddb6:	0022      	movs	r2, r4
   1ddb8:	2103      	movs	r1, #3
   1ddba:	208f      	movs	r0, #143	; 0x8f
   1ddbc:	4c36      	ldr	r4, [pc, #216]	; (1de98 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1ddbe:	47a0      	blx	r4
   1ddc0:	693b      	ldr	r3, [r7, #16]
   1ddc2:	0018      	movs	r0, r3
   1ddc4:	4b32      	ldr	r3, [pc, #200]	; (1de90 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ddc6:	4798      	blx	r3
   1ddc8:	0003      	movs	r3, r0
   1ddca:	b2d9      	uxtb	r1, r3
   1ddcc:	693b      	ldr	r3, [r7, #16]
   1ddce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ddd0:	b2db      	uxtb	r3, r3
   1ddd2:	001a      	movs	r2, r3
   1ddd4:	2003      	movs	r0, #3
   1ddd6:	4b31      	ldr	r3, [pc, #196]	; (1de9c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1ddd8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1ddda:	693b      	ldr	r3, [r7, #16]
   1dddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ddde:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1dde0:	693b      	ldr	r3, [r7, #16]
   1dde2:	697a      	ldr	r2, [r7, #20]
   1dde4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dde6:	693b      	ldr	r3, [r7, #16]
   1dde8:	699b      	ldr	r3, [r3, #24]
   1ddea:	2b00      	cmp	r3, #0
   1ddec:	db04      	blt.n	1ddf8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ddee:	697b      	ldr	r3, [r7, #20]
   1ddf0:	2205      	movs	r2, #5
   1ddf2:	1ad2      	subs	r2, r2, r3
   1ddf4:	693b      	ldr	r3, [r7, #16]
   1ddf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1ddf8:	693b      	ldr	r3, [r7, #16]
   1ddfa:	6959      	ldr	r1, [r3, #20]
   1ddfc:	68ba      	ldr	r2, [r7, #8]
   1ddfe:	0013      	movs	r3, r2
   1de00:	009b      	lsls	r3, r3, #2
   1de02:	189b      	adds	r3, r3, r2
   1de04:	009b      	lsls	r3, r3, #2
   1de06:	4a26      	ldr	r2, [pc, #152]	; (1dea0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1de08:	189b      	adds	r3, r3, r2
   1de0a:	4299      	cmp	r1, r3
   1de0c:	d101      	bne.n	1de12 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1de0e:	2301      	movs	r3, #1
   1de10:	e000      	b.n	1de14 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1de12:	2300      	movs	r3, #0
   1de14:	2b00      	cmp	r3, #0
   1de16:	d031      	beq.n	1de7c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1de18:	693b      	ldr	r3, [r7, #16]
   1de1a:	3304      	adds	r3, #4
   1de1c:	0018      	movs	r0, r3
   1de1e:	4b21      	ldr	r3, [pc, #132]	; (1dea4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1de20:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1de22:	693b      	ldr	r3, [r7, #16]
   1de24:	0018      	movs	r0, r3
   1de26:	4b18      	ldr	r3, [pc, #96]	; (1de88 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1de28:	4798      	blx	r3
   1de2a:	0003      	movs	r3, r0
   1de2c:	001a      	movs	r2, r3
   1de2e:	4b17      	ldr	r3, [pc, #92]	; (1de8c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1de30:	881b      	ldrh	r3, [r3, #0]
   1de32:	4013      	ands	r3, r2
   1de34:	b29b      	uxth	r3, r3
   1de36:	2b00      	cmp	r3, #0
   1de38:	d008      	beq.n	1de4c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1de3a:	693b      	ldr	r3, [r7, #16]
   1de3c:	0018      	movs	r0, r3
   1de3e:	4b14      	ldr	r3, [pc, #80]	; (1de90 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1de40:	4798      	blx	r3
   1de42:	0003      	movs	r3, r0
   1de44:	b2db      	uxtb	r3, r3
   1de46:	0018      	movs	r0, r3
   1de48:	4b17      	ldr	r3, [pc, #92]	; (1dea8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1de4a:	4798      	blx	r3
   1de4c:	693b      	ldr	r3, [r7, #16]
   1de4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de50:	4b16      	ldr	r3, [pc, #88]	; (1deac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1de52:	681b      	ldr	r3, [r3, #0]
   1de54:	429a      	cmp	r2, r3
   1de56:	d903      	bls.n	1de60 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1de58:	693b      	ldr	r3, [r7, #16]
   1de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de5c:	4b13      	ldr	r3, [pc, #76]	; (1deac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1de5e:	601a      	str	r2, [r3, #0]
   1de60:	693b      	ldr	r3, [r7, #16]
   1de62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de64:	0013      	movs	r3, r2
   1de66:	009b      	lsls	r3, r3, #2
   1de68:	189b      	adds	r3, r3, r2
   1de6a:	009b      	lsls	r3, r3, #2
   1de6c:	4a0c      	ldr	r2, [pc, #48]	; (1dea0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1de6e:	189a      	adds	r2, r3, r2
   1de70:	693b      	ldr	r3, [r7, #16]
   1de72:	3304      	adds	r3, #4
   1de74:	0019      	movs	r1, r3
   1de76:	0010      	movs	r0, r2
   1de78:	4b0d      	ldr	r3, [pc, #52]	; (1deb0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1de7a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1de7c:	46c0      	nop			; (mov r8, r8)
   1de7e:	46bd      	mov	sp, r7
   1de80:	b007      	add	sp, #28
   1de82:	bd90      	pop	{r4, r7, pc}
   1de84:	200040e0 	.word	0x200040e0
   1de88:	00018cc9 	.word	0x00018cc9
   1de8c:	20000110 	.word	0x20000110
   1de90:	00018ca9 	.word	0x00018ca9
   1de94:	00019c81 	.word	0x00019c81
   1de98:	000197f1 	.word	0x000197f1
   1de9c:	00019bdd 	.word	0x00019bdd
   1dea0:	200040e4 	.word	0x200040e4
   1dea4:	0001ab43 	.word	0x0001ab43
   1dea8:	00019479 	.word	0x00019479
   1deac:	200041c0 	.word	0x200041c0
   1deb0:	0001aa93 	.word	0x0001aa93

0001deb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1deb4:	b580      	push	{r7, lr}
   1deb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1deb8:	4b06      	ldr	r3, [pc, #24]	; (1ded4 <pvTaskIncrementMutexHeldCount+0x20>)
   1deba:	681b      	ldr	r3, [r3, #0]
   1debc:	2b00      	cmp	r3, #0
   1debe:	d004      	beq.n	1deca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1dec0:	4b04      	ldr	r3, [pc, #16]	; (1ded4 <pvTaskIncrementMutexHeldCount+0x20>)
   1dec2:	681b      	ldr	r3, [r3, #0]
   1dec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dec6:	3201      	adds	r2, #1
   1dec8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1deca:	4b02      	ldr	r3, [pc, #8]	; (1ded4 <pvTaskIncrementMutexHeldCount+0x20>)
   1decc:	681b      	ldr	r3, [r3, #0]
	}
   1dece:	0018      	movs	r0, r3
   1ded0:	46bd      	mov	sp, r7
   1ded2:	bd80      	pop	{r7, pc}
   1ded4:	200040e0 	.word	0x200040e0

0001ded8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1ded8:	b580      	push	{r7, lr}
   1deda:	b084      	sub	sp, #16
   1dedc:	af00      	add	r7, sp, #0
   1dede:	6078      	str	r0, [r7, #4]
   1dee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1dee2:	4b21      	ldr	r3, [pc, #132]	; (1df68 <prvAddCurrentTaskToDelayedList+0x90>)
   1dee4:	681b      	ldr	r3, [r3, #0]
   1dee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dee8:	4b20      	ldr	r3, [pc, #128]	; (1df6c <prvAddCurrentTaskToDelayedList+0x94>)
   1deea:	681b      	ldr	r3, [r3, #0]
   1deec:	3304      	adds	r3, #4
   1deee:	0018      	movs	r0, r3
   1def0:	4b1f      	ldr	r3, [pc, #124]	; (1df70 <prvAddCurrentTaskToDelayedList+0x98>)
   1def2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1def4:	687b      	ldr	r3, [r7, #4]
   1def6:	3301      	adds	r3, #1
   1def8:	d10b      	bne.n	1df12 <prvAddCurrentTaskToDelayedList+0x3a>
   1defa:	683b      	ldr	r3, [r7, #0]
   1defc:	2b00      	cmp	r3, #0
   1defe:	d008      	beq.n	1df12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1df00:	4b1a      	ldr	r3, [pc, #104]	; (1df6c <prvAddCurrentTaskToDelayedList+0x94>)
   1df02:	681b      	ldr	r3, [r3, #0]
   1df04:	1d1a      	adds	r2, r3, #4
   1df06:	4b1b      	ldr	r3, [pc, #108]	; (1df74 <prvAddCurrentTaskToDelayedList+0x9c>)
   1df08:	0011      	movs	r1, r2
   1df0a:	0018      	movs	r0, r3
   1df0c:	4b1a      	ldr	r3, [pc, #104]	; (1df78 <prvAddCurrentTaskToDelayedList+0xa0>)
   1df0e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1df10:	e026      	b.n	1df60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1df12:	68fa      	ldr	r2, [r7, #12]
   1df14:	687b      	ldr	r3, [r7, #4]
   1df16:	18d3      	adds	r3, r2, r3
   1df18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1df1a:	4b14      	ldr	r3, [pc, #80]	; (1df6c <prvAddCurrentTaskToDelayedList+0x94>)
   1df1c:	681b      	ldr	r3, [r3, #0]
   1df1e:	68ba      	ldr	r2, [r7, #8]
   1df20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1df22:	68ba      	ldr	r2, [r7, #8]
   1df24:	68fb      	ldr	r3, [r7, #12]
   1df26:	429a      	cmp	r2, r3
   1df28:	d209      	bcs.n	1df3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1df2a:	4b14      	ldr	r3, [pc, #80]	; (1df7c <prvAddCurrentTaskToDelayedList+0xa4>)
   1df2c:	681a      	ldr	r2, [r3, #0]
   1df2e:	4b0f      	ldr	r3, [pc, #60]	; (1df6c <prvAddCurrentTaskToDelayedList+0x94>)
   1df30:	681b      	ldr	r3, [r3, #0]
   1df32:	3304      	adds	r3, #4
   1df34:	0019      	movs	r1, r3
   1df36:	0010      	movs	r0, r2
   1df38:	4b11      	ldr	r3, [pc, #68]	; (1df80 <prvAddCurrentTaskToDelayedList+0xa8>)
   1df3a:	4798      	blx	r3
}
   1df3c:	e010      	b.n	1df60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1df3e:	4b11      	ldr	r3, [pc, #68]	; (1df84 <prvAddCurrentTaskToDelayedList+0xac>)
   1df40:	681a      	ldr	r2, [r3, #0]
   1df42:	4b0a      	ldr	r3, [pc, #40]	; (1df6c <prvAddCurrentTaskToDelayedList+0x94>)
   1df44:	681b      	ldr	r3, [r3, #0]
   1df46:	3304      	adds	r3, #4
   1df48:	0019      	movs	r1, r3
   1df4a:	0010      	movs	r0, r2
   1df4c:	4b0c      	ldr	r3, [pc, #48]	; (1df80 <prvAddCurrentTaskToDelayedList+0xa8>)
   1df4e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1df50:	4b0d      	ldr	r3, [pc, #52]	; (1df88 <prvAddCurrentTaskToDelayedList+0xb0>)
   1df52:	681b      	ldr	r3, [r3, #0]
   1df54:	68ba      	ldr	r2, [r7, #8]
   1df56:	429a      	cmp	r2, r3
   1df58:	d202      	bcs.n	1df60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1df5a:	4b0b      	ldr	r3, [pc, #44]	; (1df88 <prvAddCurrentTaskToDelayedList+0xb0>)
   1df5c:	68ba      	ldr	r2, [r7, #8]
   1df5e:	601a      	str	r2, [r3, #0]
}
   1df60:	46c0      	nop			; (mov r8, r8)
   1df62:	46bd      	mov	sp, r7
   1df64:	b004      	add	sp, #16
   1df66:	bd80      	pop	{r7, pc}
   1df68:	200041bc 	.word	0x200041bc
   1df6c:	200040e0 	.word	0x200040e0
   1df70:	0001ab43 	.word	0x0001ab43
   1df74:	200041a4 	.word	0x200041a4
   1df78:	0001aa93 	.word	0x0001aa93
   1df7c:	20004174 	.word	0x20004174
   1df80:	0001aad7 	.word	0x0001aad7
   1df84:	20004170 	.word	0x20004170
   1df88:	200041d8 	.word	0x200041d8

0001df8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1df8c:	b590      	push	{r4, r7, lr}
   1df8e:	b085      	sub	sp, #20
   1df90:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1df92:	2300      	movs	r3, #0
   1df94:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1df96:	4b0e      	ldr	r3, [pc, #56]	; (1dfd0 <xTimerCreateTimerTask+0x44>)
   1df98:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1df9a:	4b0e      	ldr	r3, [pc, #56]	; (1dfd4 <xTimerCreateTimerTask+0x48>)
   1df9c:	681b      	ldr	r3, [r3, #0]
   1df9e:	2b00      	cmp	r3, #0
   1dfa0:	d00b      	beq.n	1dfba <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1dfa2:	490d      	ldr	r1, [pc, #52]	; (1dfd8 <xTimerCreateTimerTask+0x4c>)
   1dfa4:	480d      	ldr	r0, [pc, #52]	; (1dfdc <xTimerCreateTimerTask+0x50>)
   1dfa6:	4b0e      	ldr	r3, [pc, #56]	; (1dfe0 <xTimerCreateTimerTask+0x54>)
   1dfa8:	9301      	str	r3, [sp, #4]
   1dfaa:	2302      	movs	r3, #2
   1dfac:	9300      	str	r3, [sp, #0]
   1dfae:	2300      	movs	r3, #0
   1dfb0:	2280      	movs	r2, #128	; 0x80
   1dfb2:	4c0c      	ldr	r4, [pc, #48]	; (1dfe4 <xTimerCreateTimerTask+0x58>)
   1dfb4:	47a0      	blx	r4
   1dfb6:	0003      	movs	r3, r0
   1dfb8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1dfba:	687b      	ldr	r3, [r7, #4]
   1dfbc:	2b00      	cmp	r3, #0
   1dfbe:	d101      	bne.n	1dfc4 <xTimerCreateTimerTask+0x38>
   1dfc0:	b672      	cpsid	i
   1dfc2:	e7fe      	b.n	1dfc2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1dfc4:	687b      	ldr	r3, [r7, #4]
}
   1dfc6:	0018      	movs	r0, r3
   1dfc8:	46bd      	mov	sp, r7
   1dfca:	b003      	add	sp, #12
   1dfcc:	bd90      	pop	{r4, r7, pc}
   1dfce:	46c0      	nop			; (mov r8, r8)
   1dfd0:	0001e4d5 	.word	0x0001e4d5
   1dfd4:	20004214 	.word	0x20004214
   1dfd8:	00039318 	.word	0x00039318
   1dfdc:	0001e10d 	.word	0x0001e10d
   1dfe0:	20004218 	.word	0x20004218
   1dfe4:	0001c925 	.word	0x0001c925

0001dfe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1dfe8:	b590      	push	{r4, r7, lr}
   1dfea:	b089      	sub	sp, #36	; 0x24
   1dfec:	af00      	add	r7, sp, #0
   1dfee:	60f8      	str	r0, [r7, #12]
   1dff0:	60b9      	str	r1, [r7, #8]
   1dff2:	607a      	str	r2, [r7, #4]
   1dff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1dff6:	2300      	movs	r3, #0
   1dff8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1dffa:	68fb      	ldr	r3, [r7, #12]
   1dffc:	2b00      	cmp	r3, #0
   1dffe:	d101      	bne.n	1e004 <xTimerGenericCommand+0x1c>
   1e000:	b672      	cpsid	i
   1e002:	e7fe      	b.n	1e002 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1e004:	4b1e      	ldr	r3, [pc, #120]	; (1e080 <xTimerGenericCommand+0x98>)
   1e006:	681b      	ldr	r3, [r3, #0]
   1e008:	2b00      	cmp	r3, #0
   1e00a:	d033      	beq.n	1e074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1e00c:	2310      	movs	r3, #16
   1e00e:	18fb      	adds	r3, r7, r3
   1e010:	68ba      	ldr	r2, [r7, #8]
   1e012:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1e014:	2310      	movs	r3, #16
   1e016:	18fb      	adds	r3, r7, r3
   1e018:	687a      	ldr	r2, [r7, #4]
   1e01a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1e01c:	2310      	movs	r3, #16
   1e01e:	18fb      	adds	r3, r7, r3
   1e020:	68fa      	ldr	r2, [r7, #12]
   1e022:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1e024:	68bb      	ldr	r3, [r7, #8]
   1e026:	2b05      	cmp	r3, #5
   1e028:	dc1a      	bgt.n	1e060 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1e02a:	4b16      	ldr	r3, [pc, #88]	; (1e084 <xTimerGenericCommand+0x9c>)
   1e02c:	4798      	blx	r3
   1e02e:	0003      	movs	r3, r0
   1e030:	2b02      	cmp	r3, #2
   1e032:	d10a      	bne.n	1e04a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1e034:	4b12      	ldr	r3, [pc, #72]	; (1e080 <xTimerGenericCommand+0x98>)
   1e036:	6818      	ldr	r0, [r3, #0]
   1e038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e03a:	2310      	movs	r3, #16
   1e03c:	18f9      	adds	r1, r7, r3
   1e03e:	2300      	movs	r3, #0
   1e040:	4c11      	ldr	r4, [pc, #68]	; (1e088 <xTimerGenericCommand+0xa0>)
   1e042:	47a0      	blx	r4
   1e044:	0003      	movs	r3, r0
   1e046:	61fb      	str	r3, [r7, #28]
   1e048:	e014      	b.n	1e074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e04a:	4b0d      	ldr	r3, [pc, #52]	; (1e080 <xTimerGenericCommand+0x98>)
   1e04c:	6818      	ldr	r0, [r3, #0]
   1e04e:	2310      	movs	r3, #16
   1e050:	18f9      	adds	r1, r7, r3
   1e052:	2300      	movs	r3, #0
   1e054:	2200      	movs	r2, #0
   1e056:	4c0c      	ldr	r4, [pc, #48]	; (1e088 <xTimerGenericCommand+0xa0>)
   1e058:	47a0      	blx	r4
   1e05a:	0003      	movs	r3, r0
   1e05c:	61fb      	str	r3, [r7, #28]
   1e05e:	e009      	b.n	1e074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e060:	4b07      	ldr	r3, [pc, #28]	; (1e080 <xTimerGenericCommand+0x98>)
   1e062:	6818      	ldr	r0, [r3, #0]
   1e064:	683a      	ldr	r2, [r7, #0]
   1e066:	2310      	movs	r3, #16
   1e068:	18f9      	adds	r1, r7, r3
   1e06a:	2300      	movs	r3, #0
   1e06c:	4c07      	ldr	r4, [pc, #28]	; (1e08c <xTimerGenericCommand+0xa4>)
   1e06e:	47a0      	blx	r4
   1e070:	0003      	movs	r3, r0
   1e072:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e074:	69fb      	ldr	r3, [r7, #28]
}
   1e076:	0018      	movs	r0, r3
   1e078:	46bd      	mov	sp, r7
   1e07a:	b009      	add	sp, #36	; 0x24
   1e07c:	bd90      	pop	{r4, r7, pc}
   1e07e:	46c0      	nop			; (mov r8, r8)
   1e080:	20004214 	.word	0x20004214
   1e084:	0001d9e9 	.word	0x0001d9e9
   1e088:	0001b25d 	.word	0x0001b25d
   1e08c:	0001b6bd 	.word	0x0001b6bd

0001e090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e090:	b590      	push	{r4, r7, lr}
   1e092:	b087      	sub	sp, #28
   1e094:	af02      	add	r7, sp, #8
   1e096:	6078      	str	r0, [r7, #4]
   1e098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e09a:	4b18      	ldr	r3, [pc, #96]	; (1e0fc <prvProcessExpiredTimer+0x6c>)
   1e09c:	681b      	ldr	r3, [r3, #0]
   1e09e:	68db      	ldr	r3, [r3, #12]
   1e0a0:	68db      	ldr	r3, [r3, #12]
   1e0a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e0a4:	68fb      	ldr	r3, [r7, #12]
   1e0a6:	3304      	adds	r3, #4
   1e0a8:	0018      	movs	r0, r3
   1e0aa:	4b15      	ldr	r3, [pc, #84]	; (1e100 <prvProcessExpiredTimer+0x70>)
   1e0ac:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e0ae:	68fb      	ldr	r3, [r7, #12]
   1e0b0:	69db      	ldr	r3, [r3, #28]
   1e0b2:	2b01      	cmp	r3, #1
   1e0b4:	d119      	bne.n	1e0ea <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e0b6:	68fb      	ldr	r3, [r7, #12]
   1e0b8:	699a      	ldr	r2, [r3, #24]
   1e0ba:	687b      	ldr	r3, [r7, #4]
   1e0bc:	18d1      	adds	r1, r2, r3
   1e0be:	687b      	ldr	r3, [r7, #4]
   1e0c0:	683a      	ldr	r2, [r7, #0]
   1e0c2:	68f8      	ldr	r0, [r7, #12]
   1e0c4:	4c0f      	ldr	r4, [pc, #60]	; (1e104 <prvProcessExpiredTimer+0x74>)
   1e0c6:	47a0      	blx	r4
   1e0c8:	1e03      	subs	r3, r0, #0
   1e0ca:	d00e      	beq.n	1e0ea <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e0cc:	687a      	ldr	r2, [r7, #4]
   1e0ce:	68f8      	ldr	r0, [r7, #12]
   1e0d0:	2300      	movs	r3, #0
   1e0d2:	9300      	str	r3, [sp, #0]
   1e0d4:	2300      	movs	r3, #0
   1e0d6:	2100      	movs	r1, #0
   1e0d8:	4c0b      	ldr	r4, [pc, #44]	; (1e108 <prvProcessExpiredTimer+0x78>)
   1e0da:	47a0      	blx	r4
   1e0dc:	0003      	movs	r3, r0
   1e0de:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e0e0:	68bb      	ldr	r3, [r7, #8]
   1e0e2:	2b00      	cmp	r3, #0
   1e0e4:	d101      	bne.n	1e0ea <prvProcessExpiredTimer+0x5a>
   1e0e6:	b672      	cpsid	i
   1e0e8:	e7fe      	b.n	1e0e8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e0ea:	68fb      	ldr	r3, [r7, #12]
   1e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e0ee:	68fa      	ldr	r2, [r7, #12]
   1e0f0:	0010      	movs	r0, r2
   1e0f2:	4798      	blx	r3
}
   1e0f4:	46c0      	nop			; (mov r8, r8)
   1e0f6:	46bd      	mov	sp, r7
   1e0f8:	b005      	add	sp, #20
   1e0fa:	bd90      	pop	{r4, r7, pc}
   1e0fc:	2000420c 	.word	0x2000420c
   1e100:	0001ab43 	.word	0x0001ab43
   1e104:	0001e275 	.word	0x0001e275
   1e108:	0001dfe9 	.word	0x0001dfe9

0001e10c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e10c:	b580      	push	{r7, lr}
   1e10e:	b084      	sub	sp, #16
   1e110:	af00      	add	r7, sp, #0
   1e112:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e114:	4b08      	ldr	r3, [pc, #32]	; (1e138 <prvTimerTask+0x2c>)
   1e116:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e118:	2308      	movs	r3, #8
   1e11a:	18fb      	adds	r3, r7, r3
   1e11c:	0018      	movs	r0, r3
   1e11e:	4b07      	ldr	r3, [pc, #28]	; (1e13c <prvTimerTask+0x30>)
   1e120:	4798      	blx	r3
   1e122:	0003      	movs	r3, r0
   1e124:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e126:	68ba      	ldr	r2, [r7, #8]
   1e128:	68fb      	ldr	r3, [r7, #12]
   1e12a:	0011      	movs	r1, r2
   1e12c:	0018      	movs	r0, r3
   1e12e:	4b04      	ldr	r3, [pc, #16]	; (1e140 <prvTimerTask+0x34>)
   1e130:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e132:	4b04      	ldr	r3, [pc, #16]	; (1e144 <prvTimerTask+0x38>)
   1e134:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e136:	e7ef      	b.n	1e118 <prvTimerTask+0xc>
   1e138:	0003346d 	.word	0x0003346d
   1e13c:	0001e1ed 	.word	0x0001e1ed
   1e140:	0001e149 	.word	0x0001e149
   1e144:	0001e2fd 	.word	0x0001e2fd

0001e148 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e148:	b580      	push	{r7, lr}
   1e14a:	b084      	sub	sp, #16
   1e14c:	af00      	add	r7, sp, #0
   1e14e:	6078      	str	r0, [r7, #4]
   1e150:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e152:	4b1e      	ldr	r3, [pc, #120]	; (1e1cc <prvProcessTimerOrBlockTask+0x84>)
   1e154:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e156:	2308      	movs	r3, #8
   1e158:	18fb      	adds	r3, r7, r3
   1e15a:	0018      	movs	r0, r3
   1e15c:	4b1c      	ldr	r3, [pc, #112]	; (1e1d0 <prvProcessTimerOrBlockTask+0x88>)
   1e15e:	4798      	blx	r3
   1e160:	0003      	movs	r3, r0
   1e162:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e164:	68bb      	ldr	r3, [r7, #8]
   1e166:	2b00      	cmp	r3, #0
   1e168:	d129      	bne.n	1e1be <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e16a:	683b      	ldr	r3, [r7, #0]
   1e16c:	2b00      	cmp	r3, #0
   1e16e:	d10c      	bne.n	1e18a <prvProcessTimerOrBlockTask+0x42>
   1e170:	687a      	ldr	r2, [r7, #4]
   1e172:	68fb      	ldr	r3, [r7, #12]
   1e174:	429a      	cmp	r2, r3
   1e176:	d808      	bhi.n	1e18a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e178:	4b16      	ldr	r3, [pc, #88]	; (1e1d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e17a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e17c:	68fa      	ldr	r2, [r7, #12]
   1e17e:	687b      	ldr	r3, [r7, #4]
   1e180:	0011      	movs	r1, r2
   1e182:	0018      	movs	r0, r3
   1e184:	4b14      	ldr	r3, [pc, #80]	; (1e1d8 <prvProcessTimerOrBlockTask+0x90>)
   1e186:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e188:	e01b      	b.n	1e1c2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e18a:	683b      	ldr	r3, [r7, #0]
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d006      	beq.n	1e19e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e190:	4b12      	ldr	r3, [pc, #72]	; (1e1dc <prvProcessTimerOrBlockTask+0x94>)
   1e192:	681b      	ldr	r3, [r3, #0]
   1e194:	681b      	ldr	r3, [r3, #0]
   1e196:	425a      	negs	r2, r3
   1e198:	4153      	adcs	r3, r2
   1e19a:	b2db      	uxtb	r3, r3
   1e19c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e19e:	4b10      	ldr	r3, [pc, #64]	; (1e1e0 <prvProcessTimerOrBlockTask+0x98>)
   1e1a0:	6818      	ldr	r0, [r3, #0]
   1e1a2:	687a      	ldr	r2, [r7, #4]
   1e1a4:	68fb      	ldr	r3, [r7, #12]
   1e1a6:	1ad3      	subs	r3, r2, r3
   1e1a8:	683a      	ldr	r2, [r7, #0]
   1e1aa:	0019      	movs	r1, r3
   1e1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e1e4 <prvProcessTimerOrBlockTask+0x9c>)
   1e1ae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e1b0:	4b08      	ldr	r3, [pc, #32]	; (1e1d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e1b2:	4798      	blx	r3
   1e1b4:	1e03      	subs	r3, r0, #0
   1e1b6:	d104      	bne.n	1e1c2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e1b8:	4b0b      	ldr	r3, [pc, #44]	; (1e1e8 <prvProcessTimerOrBlockTask+0xa0>)
   1e1ba:	4798      	blx	r3
}
   1e1bc:	e001      	b.n	1e1c2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e1be:	4b05      	ldr	r3, [pc, #20]	; (1e1d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e1c0:	4798      	blx	r3
}
   1e1c2:	46c0      	nop			; (mov r8, r8)
   1e1c4:	46bd      	mov	sp, r7
   1e1c6:	b004      	add	sp, #16
   1e1c8:	bd80      	pop	{r7, pc}
   1e1ca:	46c0      	nop			; (mov r8, r8)
   1e1cc:	0001cf81 	.word	0x0001cf81
   1e1d0:	0001e22d 	.word	0x0001e22d
   1e1d4:	0001cf99 	.word	0x0001cf99
   1e1d8:	0001e091 	.word	0x0001e091
   1e1dc:	20004210 	.word	0x20004210
   1e1e0:	20004214 	.word	0x20004214
   1e1e4:	0001c721 	.word	0x0001c721
   1e1e8:	0001acb1 	.word	0x0001acb1

0001e1ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e1ec:	b580      	push	{r7, lr}
   1e1ee:	b084      	sub	sp, #16
   1e1f0:	af00      	add	r7, sp, #0
   1e1f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e1f4:	4b0c      	ldr	r3, [pc, #48]	; (1e228 <prvGetNextExpireTime+0x3c>)
   1e1f6:	681b      	ldr	r3, [r3, #0]
   1e1f8:	681b      	ldr	r3, [r3, #0]
   1e1fa:	425a      	negs	r2, r3
   1e1fc:	4153      	adcs	r3, r2
   1e1fe:	b2db      	uxtb	r3, r3
   1e200:	001a      	movs	r2, r3
   1e202:	687b      	ldr	r3, [r7, #4]
   1e204:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e206:	687b      	ldr	r3, [r7, #4]
   1e208:	681b      	ldr	r3, [r3, #0]
   1e20a:	2b00      	cmp	r3, #0
   1e20c:	d105      	bne.n	1e21a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e20e:	4b06      	ldr	r3, [pc, #24]	; (1e228 <prvGetNextExpireTime+0x3c>)
   1e210:	681b      	ldr	r3, [r3, #0]
   1e212:	68db      	ldr	r3, [r3, #12]
   1e214:	681b      	ldr	r3, [r3, #0]
   1e216:	60fb      	str	r3, [r7, #12]
   1e218:	e001      	b.n	1e21e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e21a:	2300      	movs	r3, #0
   1e21c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e21e:	68fb      	ldr	r3, [r7, #12]
}
   1e220:	0018      	movs	r0, r3
   1e222:	46bd      	mov	sp, r7
   1e224:	b004      	add	sp, #16
   1e226:	bd80      	pop	{r7, pc}
   1e228:	2000420c 	.word	0x2000420c

0001e22c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e22c:	b580      	push	{r7, lr}
   1e22e:	b084      	sub	sp, #16
   1e230:	af00      	add	r7, sp, #0
   1e232:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e234:	4b0c      	ldr	r3, [pc, #48]	; (1e268 <prvSampleTimeNow+0x3c>)
   1e236:	4798      	blx	r3
   1e238:	0003      	movs	r3, r0
   1e23a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e23c:	4b0b      	ldr	r3, [pc, #44]	; (1e26c <prvSampleTimeNow+0x40>)
   1e23e:	681b      	ldr	r3, [r3, #0]
   1e240:	68fa      	ldr	r2, [r7, #12]
   1e242:	429a      	cmp	r2, r3
   1e244:	d205      	bcs.n	1e252 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e246:	4b0a      	ldr	r3, [pc, #40]	; (1e270 <prvSampleTimeNow+0x44>)
   1e248:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e24a:	687b      	ldr	r3, [r7, #4]
   1e24c:	2201      	movs	r2, #1
   1e24e:	601a      	str	r2, [r3, #0]
   1e250:	e002      	b.n	1e258 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e252:	687b      	ldr	r3, [r7, #4]
   1e254:	2200      	movs	r2, #0
   1e256:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e258:	4b04      	ldr	r3, [pc, #16]	; (1e26c <prvSampleTimeNow+0x40>)
   1e25a:	68fa      	ldr	r2, [r7, #12]
   1e25c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e25e:	68fb      	ldr	r3, [r7, #12]
}
   1e260:	0018      	movs	r0, r3
   1e262:	46bd      	mov	sp, r7
   1e264:	b004      	add	sp, #16
   1e266:	bd80      	pop	{r7, pc}
   1e268:	0001d109 	.word	0x0001d109
   1e26c:	2000421c 	.word	0x2000421c
   1e270:	0001e415 	.word	0x0001e415

0001e274 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e274:	b580      	push	{r7, lr}
   1e276:	b086      	sub	sp, #24
   1e278:	af00      	add	r7, sp, #0
   1e27a:	60f8      	str	r0, [r7, #12]
   1e27c:	60b9      	str	r1, [r7, #8]
   1e27e:	607a      	str	r2, [r7, #4]
   1e280:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e282:	2300      	movs	r3, #0
   1e284:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e286:	68fb      	ldr	r3, [r7, #12]
   1e288:	68ba      	ldr	r2, [r7, #8]
   1e28a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e28c:	68fb      	ldr	r3, [r7, #12]
   1e28e:	68fa      	ldr	r2, [r7, #12]
   1e290:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e292:	68ba      	ldr	r2, [r7, #8]
   1e294:	687b      	ldr	r3, [r7, #4]
   1e296:	429a      	cmp	r2, r3
   1e298:	d812      	bhi.n	1e2c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e29a:	687a      	ldr	r2, [r7, #4]
   1e29c:	683b      	ldr	r3, [r7, #0]
   1e29e:	1ad2      	subs	r2, r2, r3
   1e2a0:	68fb      	ldr	r3, [r7, #12]
   1e2a2:	699b      	ldr	r3, [r3, #24]
   1e2a4:	429a      	cmp	r2, r3
   1e2a6:	d302      	bcc.n	1e2ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e2a8:	2301      	movs	r3, #1
   1e2aa:	617b      	str	r3, [r7, #20]
   1e2ac:	e01b      	b.n	1e2e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e2ae:	4b10      	ldr	r3, [pc, #64]	; (1e2f0 <prvInsertTimerInActiveList+0x7c>)
   1e2b0:	681a      	ldr	r2, [r3, #0]
   1e2b2:	68fb      	ldr	r3, [r7, #12]
   1e2b4:	3304      	adds	r3, #4
   1e2b6:	0019      	movs	r1, r3
   1e2b8:	0010      	movs	r0, r2
   1e2ba:	4b0e      	ldr	r3, [pc, #56]	; (1e2f4 <prvInsertTimerInActiveList+0x80>)
   1e2bc:	4798      	blx	r3
   1e2be:	e012      	b.n	1e2e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e2c0:	687a      	ldr	r2, [r7, #4]
   1e2c2:	683b      	ldr	r3, [r7, #0]
   1e2c4:	429a      	cmp	r2, r3
   1e2c6:	d206      	bcs.n	1e2d6 <prvInsertTimerInActiveList+0x62>
   1e2c8:	68ba      	ldr	r2, [r7, #8]
   1e2ca:	683b      	ldr	r3, [r7, #0]
   1e2cc:	429a      	cmp	r2, r3
   1e2ce:	d302      	bcc.n	1e2d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e2d0:	2301      	movs	r3, #1
   1e2d2:	617b      	str	r3, [r7, #20]
   1e2d4:	e007      	b.n	1e2e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e2d6:	4b08      	ldr	r3, [pc, #32]	; (1e2f8 <prvInsertTimerInActiveList+0x84>)
   1e2d8:	681a      	ldr	r2, [r3, #0]
   1e2da:	68fb      	ldr	r3, [r7, #12]
   1e2dc:	3304      	adds	r3, #4
   1e2de:	0019      	movs	r1, r3
   1e2e0:	0010      	movs	r0, r2
   1e2e2:	4b04      	ldr	r3, [pc, #16]	; (1e2f4 <prvInsertTimerInActiveList+0x80>)
   1e2e4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e2e6:	697b      	ldr	r3, [r7, #20]
}
   1e2e8:	0018      	movs	r0, r3
   1e2ea:	46bd      	mov	sp, r7
   1e2ec:	b006      	add	sp, #24
   1e2ee:	bd80      	pop	{r7, pc}
   1e2f0:	20004210 	.word	0x20004210
   1e2f4:	0001aad7 	.word	0x0001aad7
   1e2f8:	2000420c 	.word	0x2000420c

0001e2fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e2fc:	b590      	push	{r4, r7, lr}
   1e2fe:	b08b      	sub	sp, #44	; 0x2c
   1e300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e302:	e068      	b.n	1e3d6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e304:	2308      	movs	r3, #8
   1e306:	18fb      	adds	r3, r7, r3
   1e308:	681b      	ldr	r3, [r3, #0]
   1e30a:	2b00      	cmp	r3, #0
   1e30c:	db63      	blt.n	1e3d6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e30e:	2308      	movs	r3, #8
   1e310:	18fb      	adds	r3, r7, r3
   1e312:	689b      	ldr	r3, [r3, #8]
   1e314:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e316:	69fb      	ldr	r3, [r7, #28]
   1e318:	695b      	ldr	r3, [r3, #20]
   1e31a:	2b00      	cmp	r3, #0
   1e31c:	d004      	beq.n	1e328 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e31e:	69fb      	ldr	r3, [r7, #28]
   1e320:	3304      	adds	r3, #4
   1e322:	0018      	movs	r0, r3
   1e324:	4b33      	ldr	r3, [pc, #204]	; (1e3f4 <prvProcessReceivedCommands+0xf8>)
   1e326:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e328:	1d3b      	adds	r3, r7, #4
   1e32a:	0018      	movs	r0, r3
   1e32c:	4b32      	ldr	r3, [pc, #200]	; (1e3f8 <prvProcessReceivedCommands+0xfc>)
   1e32e:	4798      	blx	r3
   1e330:	0003      	movs	r3, r0
   1e332:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e334:	2308      	movs	r3, #8
   1e336:	18fb      	adds	r3, r7, r3
   1e338:	681b      	ldr	r3, [r3, #0]
   1e33a:	2b09      	cmp	r3, #9
   1e33c:	d84a      	bhi.n	1e3d4 <prvProcessReceivedCommands+0xd8>
   1e33e:	009a      	lsls	r2, r3, #2
   1e340:	4b2e      	ldr	r3, [pc, #184]	; (1e3fc <prvProcessReceivedCommands+0x100>)
   1e342:	18d3      	adds	r3, r2, r3
   1e344:	681b      	ldr	r3, [r3, #0]
   1e346:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e348:	2308      	movs	r3, #8
   1e34a:	18fb      	adds	r3, r7, r3
   1e34c:	685a      	ldr	r2, [r3, #4]
   1e34e:	69fb      	ldr	r3, [r7, #28]
   1e350:	699b      	ldr	r3, [r3, #24]
   1e352:	18d1      	adds	r1, r2, r3
   1e354:	2308      	movs	r3, #8
   1e356:	18fb      	adds	r3, r7, r3
   1e358:	685b      	ldr	r3, [r3, #4]
   1e35a:	69ba      	ldr	r2, [r7, #24]
   1e35c:	69f8      	ldr	r0, [r7, #28]
   1e35e:	4c28      	ldr	r4, [pc, #160]	; (1e400 <prvProcessReceivedCommands+0x104>)
   1e360:	47a0      	blx	r4
   1e362:	1e03      	subs	r3, r0, #0
   1e364:	d037      	beq.n	1e3d6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e366:	69fb      	ldr	r3, [r7, #28]
   1e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e36a:	69fa      	ldr	r2, [r7, #28]
   1e36c:	0010      	movs	r0, r2
   1e36e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e370:	69fb      	ldr	r3, [r7, #28]
   1e372:	69db      	ldr	r3, [r3, #28]
   1e374:	2b01      	cmp	r3, #1
   1e376:	d12e      	bne.n	1e3d6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e378:	2308      	movs	r3, #8
   1e37a:	18fb      	adds	r3, r7, r3
   1e37c:	685a      	ldr	r2, [r3, #4]
   1e37e:	69fb      	ldr	r3, [r7, #28]
   1e380:	699b      	ldr	r3, [r3, #24]
   1e382:	18d2      	adds	r2, r2, r3
   1e384:	69f8      	ldr	r0, [r7, #28]
   1e386:	2300      	movs	r3, #0
   1e388:	9300      	str	r3, [sp, #0]
   1e38a:	2300      	movs	r3, #0
   1e38c:	2100      	movs	r1, #0
   1e38e:	4c1d      	ldr	r4, [pc, #116]	; (1e404 <prvProcessReceivedCommands+0x108>)
   1e390:	47a0      	blx	r4
   1e392:	0003      	movs	r3, r0
   1e394:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e396:	697b      	ldr	r3, [r7, #20]
   1e398:	2b00      	cmp	r3, #0
   1e39a:	d11c      	bne.n	1e3d6 <prvProcessReceivedCommands+0xda>
   1e39c:	b672      	cpsid	i
   1e39e:	e7fe      	b.n	1e39e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e3a0:	2308      	movs	r3, #8
   1e3a2:	18fb      	adds	r3, r7, r3
   1e3a4:	685a      	ldr	r2, [r3, #4]
   1e3a6:	69fb      	ldr	r3, [r7, #28]
   1e3a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e3aa:	69fb      	ldr	r3, [r7, #28]
   1e3ac:	699b      	ldr	r3, [r3, #24]
   1e3ae:	2b00      	cmp	r3, #0
   1e3b0:	d101      	bne.n	1e3b6 <prvProcessReceivedCommands+0xba>
   1e3b2:	b672      	cpsid	i
   1e3b4:	e7fe      	b.n	1e3b4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e3b6:	69fb      	ldr	r3, [r7, #28]
   1e3b8:	699a      	ldr	r2, [r3, #24]
   1e3ba:	69bb      	ldr	r3, [r7, #24]
   1e3bc:	18d1      	adds	r1, r2, r3
   1e3be:	69bb      	ldr	r3, [r7, #24]
   1e3c0:	69ba      	ldr	r2, [r7, #24]
   1e3c2:	69f8      	ldr	r0, [r7, #28]
   1e3c4:	4c0e      	ldr	r4, [pc, #56]	; (1e400 <prvProcessReceivedCommands+0x104>)
   1e3c6:	47a0      	blx	r4
					break;
   1e3c8:	e005      	b.n	1e3d6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e3ca:	69fb      	ldr	r3, [r7, #28]
   1e3cc:	0018      	movs	r0, r3
   1e3ce:	4b0e      	ldr	r3, [pc, #56]	; (1e408 <prvProcessReceivedCommands+0x10c>)
   1e3d0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e3d2:	e000      	b.n	1e3d6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e3d4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e3d6:	4b0d      	ldr	r3, [pc, #52]	; (1e40c <prvProcessReceivedCommands+0x110>)
   1e3d8:	681b      	ldr	r3, [r3, #0]
   1e3da:	2208      	movs	r2, #8
   1e3dc:	18b9      	adds	r1, r7, r2
   1e3de:	2200      	movs	r2, #0
   1e3e0:	0018      	movs	r0, r3
   1e3e2:	4b0b      	ldr	r3, [pc, #44]	; (1e410 <prvProcessReceivedCommands+0x114>)
   1e3e4:	4798      	blx	r3
   1e3e6:	1e03      	subs	r3, r0, #0
   1e3e8:	d18c      	bne.n	1e304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e3ea:	46c0      	nop			; (mov r8, r8)
   1e3ec:	46bd      	mov	sp, r7
   1e3ee:	b009      	add	sp, #36	; 0x24
   1e3f0:	bd90      	pop	{r4, r7, pc}
   1e3f2:	46c0      	nop			; (mov r8, r8)
   1e3f4:	0001ab43 	.word	0x0001ab43
   1e3f8:	0001e22d 	.word	0x0001e22d
   1e3fc:	00039320 	.word	0x00039320
   1e400:	0001e275 	.word	0x0001e275
   1e404:	0001dfe9 	.word	0x0001dfe9
   1e408:	0001aec5 	.word	0x0001aec5
   1e40c:	20004214 	.word	0x20004214
   1e410:	0001bb15 	.word	0x0001bb15

0001e414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e414:	b590      	push	{r4, r7, lr}
   1e416:	b089      	sub	sp, #36	; 0x24
   1e418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e41a:	e03e      	b.n	1e49a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e41c:	4b28      	ldr	r3, [pc, #160]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e41e:	681b      	ldr	r3, [r3, #0]
   1e420:	68db      	ldr	r3, [r3, #12]
   1e422:	681b      	ldr	r3, [r3, #0]
   1e424:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e426:	4b26      	ldr	r3, [pc, #152]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e428:	681b      	ldr	r3, [r3, #0]
   1e42a:	68db      	ldr	r3, [r3, #12]
   1e42c:	68db      	ldr	r3, [r3, #12]
   1e42e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e430:	693b      	ldr	r3, [r7, #16]
   1e432:	3304      	adds	r3, #4
   1e434:	0018      	movs	r0, r3
   1e436:	4b23      	ldr	r3, [pc, #140]	; (1e4c4 <prvSwitchTimerLists+0xb0>)
   1e438:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e43a:	693b      	ldr	r3, [r7, #16]
   1e43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e43e:	693a      	ldr	r2, [r7, #16]
   1e440:	0010      	movs	r0, r2
   1e442:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e444:	693b      	ldr	r3, [r7, #16]
   1e446:	69db      	ldr	r3, [r3, #28]
   1e448:	2b01      	cmp	r3, #1
   1e44a:	d126      	bne.n	1e49a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e44c:	693b      	ldr	r3, [r7, #16]
   1e44e:	699a      	ldr	r2, [r3, #24]
   1e450:	697b      	ldr	r3, [r7, #20]
   1e452:	18d3      	adds	r3, r2, r3
   1e454:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e456:	68fa      	ldr	r2, [r7, #12]
   1e458:	697b      	ldr	r3, [r7, #20]
   1e45a:	429a      	cmp	r2, r3
   1e45c:	d90e      	bls.n	1e47c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e45e:	693b      	ldr	r3, [r7, #16]
   1e460:	68fa      	ldr	r2, [r7, #12]
   1e462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e464:	693b      	ldr	r3, [r7, #16]
   1e466:	693a      	ldr	r2, [r7, #16]
   1e468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e46a:	4b15      	ldr	r3, [pc, #84]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e46c:	681a      	ldr	r2, [r3, #0]
   1e46e:	693b      	ldr	r3, [r7, #16]
   1e470:	3304      	adds	r3, #4
   1e472:	0019      	movs	r1, r3
   1e474:	0010      	movs	r0, r2
   1e476:	4b14      	ldr	r3, [pc, #80]	; (1e4c8 <prvSwitchTimerLists+0xb4>)
   1e478:	4798      	blx	r3
   1e47a:	e00e      	b.n	1e49a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e47c:	697a      	ldr	r2, [r7, #20]
   1e47e:	6938      	ldr	r0, [r7, #16]
   1e480:	2300      	movs	r3, #0
   1e482:	9300      	str	r3, [sp, #0]
   1e484:	2300      	movs	r3, #0
   1e486:	2100      	movs	r1, #0
   1e488:	4c10      	ldr	r4, [pc, #64]	; (1e4cc <prvSwitchTimerLists+0xb8>)
   1e48a:	47a0      	blx	r4
   1e48c:	0003      	movs	r3, r0
   1e48e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e490:	68bb      	ldr	r3, [r7, #8]
   1e492:	2b00      	cmp	r3, #0
   1e494:	d101      	bne.n	1e49a <prvSwitchTimerLists+0x86>
   1e496:	b672      	cpsid	i
   1e498:	e7fe      	b.n	1e498 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e49a:	4b09      	ldr	r3, [pc, #36]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e49c:	681b      	ldr	r3, [r3, #0]
   1e49e:	681b      	ldr	r3, [r3, #0]
   1e4a0:	2b00      	cmp	r3, #0
   1e4a2:	d1bb      	bne.n	1e41c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e4a4:	4b06      	ldr	r3, [pc, #24]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e4a6:	681b      	ldr	r3, [r3, #0]
   1e4a8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e4aa:	4b09      	ldr	r3, [pc, #36]	; (1e4d0 <prvSwitchTimerLists+0xbc>)
   1e4ac:	681a      	ldr	r2, [r3, #0]
   1e4ae:	4b04      	ldr	r3, [pc, #16]	; (1e4c0 <prvSwitchTimerLists+0xac>)
   1e4b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e4b2:	4b07      	ldr	r3, [pc, #28]	; (1e4d0 <prvSwitchTimerLists+0xbc>)
   1e4b4:	687a      	ldr	r2, [r7, #4]
   1e4b6:	601a      	str	r2, [r3, #0]
}
   1e4b8:	46c0      	nop			; (mov r8, r8)
   1e4ba:	46bd      	mov	sp, r7
   1e4bc:	b007      	add	sp, #28
   1e4be:	bd90      	pop	{r4, r7, pc}
   1e4c0:	2000420c 	.word	0x2000420c
   1e4c4:	0001ab43 	.word	0x0001ab43
   1e4c8:	0001aad7 	.word	0x0001aad7
   1e4cc:	0001dfe9 	.word	0x0001dfe9
   1e4d0:	20004210 	.word	0x20004210

0001e4d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e4d4:	b580      	push	{r7, lr}
   1e4d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e4d8:	4b10      	ldr	r3, [pc, #64]	; (1e51c <prvCheckForValidListAndQueue+0x48>)
   1e4da:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e4dc:	4b10      	ldr	r3, [pc, #64]	; (1e520 <prvCheckForValidListAndQueue+0x4c>)
   1e4de:	681b      	ldr	r3, [r3, #0]
   1e4e0:	2b00      	cmp	r3, #0
   1e4e2:	d115      	bne.n	1e510 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e4e4:	4b0f      	ldr	r3, [pc, #60]	; (1e524 <prvCheckForValidListAndQueue+0x50>)
   1e4e6:	0018      	movs	r0, r3
   1e4e8:	4b0f      	ldr	r3, [pc, #60]	; (1e528 <prvCheckForValidListAndQueue+0x54>)
   1e4ea:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e4ec:	4b0f      	ldr	r3, [pc, #60]	; (1e52c <prvCheckForValidListAndQueue+0x58>)
   1e4ee:	0018      	movs	r0, r3
   1e4f0:	4b0d      	ldr	r3, [pc, #52]	; (1e528 <prvCheckForValidListAndQueue+0x54>)
   1e4f2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e4f4:	4b0e      	ldr	r3, [pc, #56]	; (1e530 <prvCheckForValidListAndQueue+0x5c>)
   1e4f6:	4a0b      	ldr	r2, [pc, #44]	; (1e524 <prvCheckForValidListAndQueue+0x50>)
   1e4f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e4fa:	4b0e      	ldr	r3, [pc, #56]	; (1e534 <prvCheckForValidListAndQueue+0x60>)
   1e4fc:	4a0b      	ldr	r2, [pc, #44]	; (1e52c <prvCheckForValidListAndQueue+0x58>)
   1e4fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e500:	2200      	movs	r2, #0
   1e502:	210c      	movs	r1, #12
   1e504:	2005      	movs	r0, #5
   1e506:	4b0c      	ldr	r3, [pc, #48]	; (1e538 <prvCheckForValidListAndQueue+0x64>)
   1e508:	4798      	blx	r3
   1e50a:	0002      	movs	r2, r0
   1e50c:	4b04      	ldr	r3, [pc, #16]	; (1e520 <prvCheckForValidListAndQueue+0x4c>)
   1e50e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e510:	4b0a      	ldr	r3, [pc, #40]	; (1e53c <prvCheckForValidListAndQueue+0x68>)
   1e512:	4798      	blx	r3
}
   1e514:	46c0      	nop			; (mov r8, r8)
   1e516:	46bd      	mov	sp, r7
   1e518:	bd80      	pop	{r7, pc}
   1e51a:	46c0      	nop			; (mov r8, r8)
   1e51c:	0001acc9 	.word	0x0001acc9
   1e520:	20004214 	.word	0x20004214
   1e524:	200041e4 	.word	0x200041e4
   1e528:	0001aa41 	.word	0x0001aa41
   1e52c:	200041f8 	.word	0x200041f8
   1e530:	2000420c 	.word	0x2000420c
   1e534:	20004210 	.word	0x20004210
   1e538:	0001afb5 	.word	0x0001afb5
   1e53c:	0001aced 	.word	0x0001aced

0001e540 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e540:	b580      	push	{r7, lr}
   1e542:	b082      	sub	sp, #8
   1e544:	af00      	add	r7, sp, #0
   1e546:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e548:	687b      	ldr	r3, [r7, #4]
   1e54a:	7c1b      	ldrb	r3, [r3, #16]
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d00b      	beq.n	1e568 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e550:	687b      	ldr	r3, [r7, #4]
   1e552:	689b      	ldr	r3, [r3, #8]
   1e554:	1c5a      	adds	r2, r3, #1
   1e556:	687b      	ldr	r3, [r7, #4]
   1e558:	68d9      	ldr	r1, [r3, #12]
   1e55a:	4b10      	ldr	r3, [pc, #64]	; (1e59c <advance_pointer+0x5c>)
   1e55c:	0010      	movs	r0, r2
   1e55e:	4798      	blx	r3
   1e560:	000b      	movs	r3, r1
   1e562:	001a      	movs	r2, r3
   1e564:	687b      	ldr	r3, [r7, #4]
   1e566:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e568:	687b      	ldr	r3, [r7, #4]
   1e56a:	685b      	ldr	r3, [r3, #4]
   1e56c:	1c5a      	adds	r2, r3, #1
   1e56e:	687b      	ldr	r3, [r7, #4]
   1e570:	68d9      	ldr	r1, [r3, #12]
   1e572:	4b0a      	ldr	r3, [pc, #40]	; (1e59c <advance_pointer+0x5c>)
   1e574:	0010      	movs	r0, r2
   1e576:	4798      	blx	r3
   1e578:	000b      	movs	r3, r1
   1e57a:	001a      	movs	r2, r3
   1e57c:	687b      	ldr	r3, [r7, #4]
   1e57e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e580:	687b      	ldr	r3, [r7, #4]
   1e582:	685a      	ldr	r2, [r3, #4]
   1e584:	687b      	ldr	r3, [r7, #4]
   1e586:	689b      	ldr	r3, [r3, #8]
   1e588:	1ad3      	subs	r3, r2, r3
   1e58a:	425a      	negs	r2, r3
   1e58c:	4153      	adcs	r3, r2
   1e58e:	b2da      	uxtb	r2, r3
   1e590:	687b      	ldr	r3, [r7, #4]
   1e592:	741a      	strb	r2, [r3, #16]
 }
   1e594:	46c0      	nop			; (mov r8, r8)
   1e596:	46bd      	mov	sp, r7
   1e598:	b002      	add	sp, #8
   1e59a:	bd80      	pop	{r7, pc}
   1e59c:	00033821 	.word	0x00033821

0001e5a0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e5a0:	b580      	push	{r7, lr}
   1e5a2:	b082      	sub	sp, #8
   1e5a4:	af00      	add	r7, sp, #0
   1e5a6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e5a8:	687b      	ldr	r3, [r7, #4]
   1e5aa:	2200      	movs	r2, #0
   1e5ac:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e5ae:	687b      	ldr	r3, [r7, #4]
   1e5b0:	689b      	ldr	r3, [r3, #8]
   1e5b2:	1c5a      	adds	r2, r3, #1
   1e5b4:	687b      	ldr	r3, [r7, #4]
   1e5b6:	68d9      	ldr	r1, [r3, #12]
   1e5b8:	4b05      	ldr	r3, [pc, #20]	; (1e5d0 <retreat_pointer+0x30>)
   1e5ba:	0010      	movs	r0, r2
   1e5bc:	4798      	blx	r3
   1e5be:	000b      	movs	r3, r1
   1e5c0:	001a      	movs	r2, r3
   1e5c2:	687b      	ldr	r3, [r7, #4]
   1e5c4:	609a      	str	r2, [r3, #8]
 }
   1e5c6:	46c0      	nop			; (mov r8, r8)
   1e5c8:	46bd      	mov	sp, r7
   1e5ca:	b002      	add	sp, #8
   1e5cc:	bd80      	pop	{r7, pc}
   1e5ce:	46c0      	nop			; (mov r8, r8)
   1e5d0:	00033821 	.word	0x00033821

0001e5d4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e5d4:	b580      	push	{r7, lr}
   1e5d6:	b084      	sub	sp, #16
   1e5d8:	af00      	add	r7, sp, #0
   1e5da:	6078      	str	r0, [r7, #4]
   1e5dc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e5de:	2014      	movs	r0, #20
   1e5e0:	4b09      	ldr	r3, [pc, #36]	; (1e608 <circular_buf_init+0x34>)
   1e5e2:	4798      	blx	r3
   1e5e4:	0003      	movs	r3, r0
   1e5e6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e5e8:	68fb      	ldr	r3, [r7, #12]
   1e5ea:	687a      	ldr	r2, [r7, #4]
   1e5ec:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e5ee:	68fb      	ldr	r3, [r7, #12]
   1e5f0:	683a      	ldr	r2, [r7, #0]
   1e5f2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e5f4:	68fb      	ldr	r3, [r7, #12]
   1e5f6:	0018      	movs	r0, r3
   1e5f8:	4b04      	ldr	r3, [pc, #16]	; (1e60c <circular_buf_init+0x38>)
   1e5fa:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e5fc:	68fb      	ldr	r3, [r7, #12]
 }
   1e5fe:	0018      	movs	r0, r3
   1e600:	46bd      	mov	sp, r7
   1e602:	b004      	add	sp, #16
   1e604:	bd80      	pop	{r7, pc}
   1e606:	46c0      	nop			; (mov r8, r8)
   1e608:	00035691 	.word	0x00035691
   1e60c:	0001e611 	.word	0x0001e611

0001e610 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e610:	b580      	push	{r7, lr}
   1e612:	b082      	sub	sp, #8
   1e614:	af00      	add	r7, sp, #0
   1e616:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e618:	687b      	ldr	r3, [r7, #4]
   1e61a:	2200      	movs	r2, #0
   1e61c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e61e:	687b      	ldr	r3, [r7, #4]
   1e620:	2200      	movs	r2, #0
   1e622:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e624:	687b      	ldr	r3, [r7, #4]
   1e626:	2200      	movs	r2, #0
   1e628:	741a      	strb	r2, [r3, #16]
 }
   1e62a:	46c0      	nop			; (mov r8, r8)
   1e62c:	46bd      	mov	sp, r7
   1e62e:	b002      	add	sp, #8
   1e630:	bd80      	pop	{r7, pc}
	...

0001e634 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e634:	b580      	push	{r7, lr}
   1e636:	b082      	sub	sp, #8
   1e638:	af00      	add	r7, sp, #0
   1e63a:	6078      	str	r0, [r7, #4]
   1e63c:	000a      	movs	r2, r1
   1e63e:	1cfb      	adds	r3, r7, #3
   1e640:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e642:	687b      	ldr	r3, [r7, #4]
   1e644:	681a      	ldr	r2, [r3, #0]
   1e646:	687b      	ldr	r3, [r7, #4]
   1e648:	685b      	ldr	r3, [r3, #4]
   1e64a:	18d3      	adds	r3, r2, r3
   1e64c:	1cfa      	adds	r2, r7, #3
   1e64e:	7812      	ldrb	r2, [r2, #0]
   1e650:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	0018      	movs	r0, r3
   1e656:	4b03      	ldr	r3, [pc, #12]	; (1e664 <circular_buf_put+0x30>)
   1e658:	4798      	blx	r3
 }
   1e65a:	46c0      	nop			; (mov r8, r8)
   1e65c:	46bd      	mov	sp, r7
   1e65e:	b002      	add	sp, #8
   1e660:	bd80      	pop	{r7, pc}
   1e662:	46c0      	nop			; (mov r8, r8)
   1e664:	0001e541 	.word	0x0001e541

0001e668 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e668:	b580      	push	{r7, lr}
   1e66a:	b084      	sub	sp, #16
   1e66c:	af00      	add	r7, sp, #0
   1e66e:	6078      	str	r0, [r7, #4]
   1e670:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e672:	2301      	movs	r3, #1
   1e674:	425b      	negs	r3, r3
   1e676:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e678:	687b      	ldr	r3, [r7, #4]
   1e67a:	0018      	movs	r0, r3
   1e67c:	4b0d      	ldr	r3, [pc, #52]	; (1e6b4 <circular_buf_get+0x4c>)
   1e67e:	4798      	blx	r3
   1e680:	0003      	movs	r3, r0
   1e682:	001a      	movs	r2, r3
   1e684:	2301      	movs	r3, #1
   1e686:	4053      	eors	r3, r2
   1e688:	b2db      	uxtb	r3, r3
   1e68a:	2b00      	cmp	r3, #0
   1e68c:	d00d      	beq.n	1e6aa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e68e:	687b      	ldr	r3, [r7, #4]
   1e690:	681a      	ldr	r2, [r3, #0]
   1e692:	687b      	ldr	r3, [r7, #4]
   1e694:	689b      	ldr	r3, [r3, #8]
   1e696:	18d3      	adds	r3, r2, r3
   1e698:	781a      	ldrb	r2, [r3, #0]
   1e69a:	683b      	ldr	r3, [r7, #0]
   1e69c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e69e:	687b      	ldr	r3, [r7, #4]
   1e6a0:	0018      	movs	r0, r3
   1e6a2:	4b05      	ldr	r3, [pc, #20]	; (1e6b8 <circular_buf_get+0x50>)
   1e6a4:	4798      	blx	r3

		 r = 0;
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e6aa:	68fb      	ldr	r3, [r7, #12]
 }
   1e6ac:	0018      	movs	r0, r3
   1e6ae:	46bd      	mov	sp, r7
   1e6b0:	b004      	add	sp, #16
   1e6b2:	bd80      	pop	{r7, pc}
   1e6b4:	0001e6bd 	.word	0x0001e6bd
   1e6b8:	0001e5a1 	.word	0x0001e5a1

0001e6bc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e6bc:	b580      	push	{r7, lr}
   1e6be:	b082      	sub	sp, #8
   1e6c0:	af00      	add	r7, sp, #0
   1e6c2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e6c4:	687b      	ldr	r3, [r7, #4]
   1e6c6:	7c1b      	ldrb	r3, [r3, #16]
   1e6c8:	2201      	movs	r2, #1
   1e6ca:	4053      	eors	r3, r2
   1e6cc:	b2db      	uxtb	r3, r3
   1e6ce:	2b00      	cmp	r3, #0
   1e6d0:	d007      	beq.n	1e6e2 <circular_buf_empty+0x26>
   1e6d2:	687b      	ldr	r3, [r7, #4]
   1e6d4:	685a      	ldr	r2, [r3, #4]
   1e6d6:	687b      	ldr	r3, [r7, #4]
   1e6d8:	689b      	ldr	r3, [r3, #8]
   1e6da:	429a      	cmp	r2, r3
   1e6dc:	d101      	bne.n	1e6e2 <circular_buf_empty+0x26>
   1e6de:	2301      	movs	r3, #1
   1e6e0:	e000      	b.n	1e6e4 <circular_buf_empty+0x28>
   1e6e2:	2300      	movs	r3, #0
   1e6e4:	1c1a      	adds	r2, r3, #0
   1e6e6:	2301      	movs	r3, #1
   1e6e8:	4013      	ands	r3, r2
   1e6ea:	b2db      	uxtb	r3, r3
 }
   1e6ec:	0018      	movs	r0, r3
   1e6ee:	46bd      	mov	sp, r7
   1e6f0:	b002      	add	sp, #8
   1e6f2:	bd80      	pop	{r7, pc}

0001e6f4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1e6f4:	b580      	push	{r7, lr}
   1e6f6:	b082      	sub	sp, #8
   1e6f8:	af00      	add	r7, sp, #0
   1e6fa:	0002      	movs	r2, r0
   1e6fc:	1dfb      	adds	r3, r7, #7
   1e6fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e700:	4b06      	ldr	r3, [pc, #24]	; (1e71c <system_interrupt_enable+0x28>)
   1e702:	1dfa      	adds	r2, r7, #7
   1e704:	7812      	ldrb	r2, [r2, #0]
   1e706:	0011      	movs	r1, r2
   1e708:	221f      	movs	r2, #31
   1e70a:	400a      	ands	r2, r1
   1e70c:	2101      	movs	r1, #1
   1e70e:	4091      	lsls	r1, r2
   1e710:	000a      	movs	r2, r1
   1e712:	601a      	str	r2, [r3, #0]
}
   1e714:	46c0      	nop			; (mov r8, r8)
   1e716:	46bd      	mov	sp, r7
   1e718:	b002      	add	sp, #8
   1e71a:	bd80      	pop	{r7, pc}
   1e71c:	e000e100 	.word	0xe000e100

0001e720 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e720:	b580      	push	{r7, lr}
   1e722:	b084      	sub	sp, #16
   1e724:	af00      	add	r7, sp, #0
   1e726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e728:	687b      	ldr	r3, [r7, #4]
   1e72a:	681b      	ldr	r3, [r3, #0]
   1e72c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e72e:	68fb      	ldr	r3, [r7, #12]
   1e730:	69db      	ldr	r3, [r3, #28]
   1e732:	1e5a      	subs	r2, r3, #1
   1e734:	4193      	sbcs	r3, r2
   1e736:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1e738:	0018      	movs	r0, r3
   1e73a:	46bd      	mov	sp, r7
   1e73c:	b004      	add	sp, #16
   1e73e:	bd80      	pop	{r7, pc}

0001e740 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1e740:	b580      	push	{r7, lr}
   1e742:	b082      	sub	sp, #8
   1e744:	af00      	add	r7, sp, #0
   1e746:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e748:	46c0      	nop			; (mov r8, r8)
   1e74a:	687b      	ldr	r3, [r7, #4]
   1e74c:	0018      	movs	r0, r3
   1e74e:	4b04      	ldr	r3, [pc, #16]	; (1e760 <_usart_wait_for_sync+0x20>)
   1e750:	4798      	blx	r3
   1e752:	1e03      	subs	r3, r0, #0
   1e754:	d1f9      	bne.n	1e74a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1e756:	46c0      	nop			; (mov r8, r8)
   1e758:	46bd      	mov	sp, r7
   1e75a:	b002      	add	sp, #8
   1e75c:	bd80      	pop	{r7, pc}
   1e75e:	46c0      	nop			; (mov r8, r8)
   1e760:	0001e721 	.word	0x0001e721

0001e764 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1e764:	b580      	push	{r7, lr}
   1e766:	b082      	sub	sp, #8
   1e768:	af00      	add	r7, sp, #0
   1e76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1e76c:	687b      	ldr	r3, [r7, #4]
   1e76e:	2280      	movs	r2, #128	; 0x80
   1e770:	05d2      	lsls	r2, r2, #23
   1e772:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e774:	687b      	ldr	r3, [r7, #4]
   1e776:	2200      	movs	r2, #0
   1e778:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e77a:	687b      	ldr	r3, [r7, #4]
   1e77c:	22ff      	movs	r2, #255	; 0xff
   1e77e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e780:	687b      	ldr	r3, [r7, #4]
   1e782:	2200      	movs	r2, #0
   1e784:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e786:	687b      	ldr	r3, [r7, #4]
   1e788:	2200      	movs	r2, #0
   1e78a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e78c:	687b      	ldr	r3, [r7, #4]
   1e78e:	2296      	movs	r2, #150	; 0x96
   1e790:	0192      	lsls	r2, r2, #6
   1e792:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e794:	687b      	ldr	r3, [r7, #4]
   1e796:	2224      	movs	r2, #36	; 0x24
   1e798:	2101      	movs	r1, #1
   1e79a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	2225      	movs	r2, #37	; 0x25
   1e7a0:	2101      	movs	r1, #1
   1e7a2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e7a4:	687b      	ldr	r3, [r7, #4]
   1e7a6:	2226      	movs	r2, #38	; 0x26
   1e7a8:	2100      	movs	r1, #0
   1e7aa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e7ac:	687b      	ldr	r3, [r7, #4]
   1e7ae:	2227      	movs	r2, #39	; 0x27
   1e7b0:	2100      	movs	r1, #0
   1e7b2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e7b4:	687b      	ldr	r3, [r7, #4]
   1e7b6:	2200      	movs	r2, #0
   1e7b8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e7ba:	687b      	ldr	r3, [r7, #4]
   1e7bc:	2288      	movs	r2, #136	; 0x88
   1e7be:	0352      	lsls	r2, r2, #13
   1e7c0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e7c2:	687b      	ldr	r3, [r7, #4]
   1e7c4:	222c      	movs	r2, #44	; 0x2c
   1e7c6:	2100      	movs	r1, #0
   1e7c8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e7ca:	687b      	ldr	r3, [r7, #4]
   1e7cc:	222d      	movs	r2, #45	; 0x2d
   1e7ce:	2100      	movs	r1, #0
   1e7d0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e7d2:	687b      	ldr	r3, [r7, #4]
   1e7d4:	2200      	movs	r2, #0
   1e7d6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e7d8:	687b      	ldr	r3, [r7, #4]
   1e7da:	2200      	movs	r2, #0
   1e7dc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e7de:	687b      	ldr	r3, [r7, #4]
   1e7e0:	2200      	movs	r2, #0
   1e7e2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e7e4:	687b      	ldr	r3, [r7, #4]
   1e7e6:	2200      	movs	r2, #0
   1e7e8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e7ea:	687b      	ldr	r3, [r7, #4]
   1e7ec:	2200      	movs	r2, #0
   1e7ee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e7f0:	687b      	ldr	r3, [r7, #4]
   1e7f2:	2200      	movs	r2, #0
   1e7f4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1e7f6:	687b      	ldr	r3, [r7, #4]
   1e7f8:	2200      	movs	r2, #0
   1e7fa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1e7fc:	687b      	ldr	r3, [r7, #4]
   1e7fe:	2200      	movs	r2, #0
   1e800:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1e802:	687b      	ldr	r3, [r7, #4]
   1e804:	2200      	movs	r2, #0
   1e806:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1e808:	687b      	ldr	r3, [r7, #4]
   1e80a:	2200      	movs	r2, #0
   1e80c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e80e:	687b      	ldr	r3, [r7, #4]
   1e810:	2213      	movs	r2, #19
   1e812:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1e814:	687b      	ldr	r3, [r7, #4]
   1e816:	2200      	movs	r2, #0
   1e818:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1e81a:	46c0      	nop			; (mov r8, r8)
   1e81c:	46bd      	mov	sp, r7
   1e81e:	b002      	add	sp, #8
   1e820:	bd80      	pop	{r7, pc}
	...

0001e824 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1e824:	b580      	push	{r7, lr}
   1e826:	b084      	sub	sp, #16
   1e828:	af00      	add	r7, sp, #0
   1e82a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e82c:	687b      	ldr	r3, [r7, #4]
   1e82e:	681b      	ldr	r3, [r3, #0]
   1e830:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e832:	687b      	ldr	r3, [r7, #4]
   1e834:	681b      	ldr	r3, [r3, #0]
   1e836:	0018      	movs	r0, r3
   1e838:	4b09      	ldr	r3, [pc, #36]	; (1e860 <usart_enable+0x3c>)
   1e83a:	4798      	blx	r3
   1e83c:	0003      	movs	r3, r0
   1e83e:	0018      	movs	r0, r3
   1e840:	4b08      	ldr	r3, [pc, #32]	; (1e864 <usart_enable+0x40>)
   1e842:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1e844:	687b      	ldr	r3, [r7, #4]
   1e846:	0018      	movs	r0, r3
   1e848:	4b07      	ldr	r3, [pc, #28]	; (1e868 <usart_enable+0x44>)
   1e84a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e84c:	68fb      	ldr	r3, [r7, #12]
   1e84e:	681b      	ldr	r3, [r3, #0]
   1e850:	2202      	movs	r2, #2
   1e852:	431a      	orrs	r2, r3
   1e854:	68fb      	ldr	r3, [r7, #12]
   1e856:	601a      	str	r2, [r3, #0]
}
   1e858:	46c0      	nop			; (mov r8, r8)
   1e85a:	46bd      	mov	sp, r7
   1e85c:	b004      	add	sp, #16
   1e85e:	bd80      	pop	{r7, pc}
   1e860:	0002828d 	.word	0x0002828d
   1e864:	0001e6f5 	.word	0x0001e6f5
   1e868:	0001e741 	.word	0x0001e741

0001e86c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1e86c:	b580      	push	{r7, lr}
   1e86e:	b082      	sub	sp, #8
   1e870:	af00      	add	r7, sp, #0
   1e872:	6078      	str	r0, [r7, #4]
   1e874:	000a      	movs	r2, r1
   1e876:	1cfb      	adds	r3, r7, #3
   1e878:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1e87a:	687b      	ldr	r3, [r7, #4]
   1e87c:	2231      	movs	r2, #49	; 0x31
   1e87e:	5c9b      	ldrb	r3, [r3, r2]
   1e880:	b25a      	sxtb	r2, r3
   1e882:	1cfb      	adds	r3, r7, #3
   1e884:	781b      	ldrb	r3, [r3, #0]
   1e886:	2101      	movs	r1, #1
   1e888:	4099      	lsls	r1, r3
   1e88a:	000b      	movs	r3, r1
   1e88c:	b25b      	sxtb	r3, r3
   1e88e:	4313      	orrs	r3, r2
   1e890:	b25b      	sxtb	r3, r3
   1e892:	b2d9      	uxtb	r1, r3
   1e894:	687b      	ldr	r3, [r7, #4]
   1e896:	2231      	movs	r2, #49	; 0x31
   1e898:	5499      	strb	r1, [r3, r2]

}
   1e89a:	46c0      	nop			; (mov r8, r8)
   1e89c:	46bd      	mov	sp, r7
   1e89e:	b002      	add	sp, #8
   1e8a0:	bd80      	pop	{r7, pc}
	...

0001e8a4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e8a4:	b580      	push	{r7, lr}
   1e8a6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e8a8:	2380      	movs	r3, #128	; 0x80
   1e8aa:	009a      	lsls	r2, r3, #2
   1e8ac:	4b0f      	ldr	r3, [pc, #60]	; (1e8ec <InitializeSerialConsole+0x48>)
   1e8ae:	0011      	movs	r1, r2
   1e8b0:	0018      	movs	r0, r3
   1e8b2:	4b0f      	ldr	r3, [pc, #60]	; (1e8f0 <InitializeSerialConsole+0x4c>)
   1e8b4:	4798      	blx	r3
   1e8b6:	0002      	movs	r2, r0
   1e8b8:	4b0e      	ldr	r3, [pc, #56]	; (1e8f4 <InitializeSerialConsole+0x50>)
   1e8ba:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e8bc:	2380      	movs	r3, #128	; 0x80
   1e8be:	009a      	lsls	r2, r3, #2
   1e8c0:	4b0d      	ldr	r3, [pc, #52]	; (1e8f8 <InitializeSerialConsole+0x54>)
   1e8c2:	0011      	movs	r1, r2
   1e8c4:	0018      	movs	r0, r3
   1e8c6:	4b0a      	ldr	r3, [pc, #40]	; (1e8f0 <InitializeSerialConsole+0x4c>)
   1e8c8:	4798      	blx	r3
   1e8ca:	0002      	movs	r2, r0
   1e8cc:	4b0b      	ldr	r3, [pc, #44]	; (1e8fc <InitializeSerialConsole+0x58>)
   1e8ce:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e8d0:	4b0b      	ldr	r3, [pc, #44]	; (1e900 <InitializeSerialConsole+0x5c>)
   1e8d2:	4798      	blx	r3
    configure_usart_callbacks();
   1e8d4:	4b0b      	ldr	r3, [pc, #44]	; (1e904 <InitializeSerialConsole+0x60>)
   1e8d6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e8d8:	490b      	ldr	r1, [pc, #44]	; (1e908 <InitializeSerialConsole+0x64>)
   1e8da:	4b0c      	ldr	r3, [pc, #48]	; (1e90c <InitializeSerialConsole+0x68>)
   1e8dc:	2201      	movs	r2, #1
   1e8de:	0018      	movs	r0, r3
   1e8e0:	4b0b      	ldr	r3, [pc, #44]	; (1e910 <InitializeSerialConsole+0x6c>)
   1e8e2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e8e4:	46c0      	nop			; (mov r8, r8)
   1e8e6:	46bd      	mov	sp, r7
   1e8e8:	bd80      	pop	{r7, pc}
   1e8ea:	46c0      	nop			; (mov r8, r8)
   1e8ec:	20005920 	.word	0x20005920
   1e8f0:	0001e5d5 	.word	0x0001e5d5
   1e8f4:	20005718 	.word	0x20005718
   1e8f8:	20005720 	.word	0x20005720
   1e8fc:	20005b24 	.word	0x20005b24
   1e900:	0001ea79 	.word	0x0001ea79
   1e904:	0001eaf1 	.word	0x0001eaf1
   1e908:	2000571c 	.word	0x2000571c
   1e90c:	200056e4 	.word	0x200056e4
   1e910:	00029b35 	.word	0x00029b35

0001e914 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e914:	b580      	push	{r7, lr}
   1e916:	b084      	sub	sp, #16
   1e918:	af00      	add	r7, sp, #0
   1e91a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e91c:	4b1a      	ldr	r3, [pc, #104]	; (1e988 <SerialConsoleWriteString+0x74>)
   1e91e:	4798      	blx	r3
    if (string != NULL) {
   1e920:	687b      	ldr	r3, [r7, #4]
   1e922:	2b00      	cmp	r3, #0
   1e924:	d02a      	beq.n	1e97c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e926:	2300      	movs	r3, #0
   1e928:	60fb      	str	r3, [r7, #12]
   1e92a:	e00b      	b.n	1e944 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e92c:	4b17      	ldr	r3, [pc, #92]	; (1e98c <SerialConsoleWriteString+0x78>)
   1e92e:	6818      	ldr	r0, [r3, #0]
   1e930:	687a      	ldr	r2, [r7, #4]
   1e932:	68fb      	ldr	r3, [r7, #12]
   1e934:	18d3      	adds	r3, r2, r3
   1e936:	781b      	ldrb	r3, [r3, #0]
   1e938:	0019      	movs	r1, r3
   1e93a:	4b15      	ldr	r3, [pc, #84]	; (1e990 <SerialConsoleWriteString+0x7c>)
   1e93c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e93e:	68fb      	ldr	r3, [r7, #12]
   1e940:	3301      	adds	r3, #1
   1e942:	60fb      	str	r3, [r7, #12]
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	0018      	movs	r0, r3
   1e948:	4b12      	ldr	r3, [pc, #72]	; (1e994 <SerialConsoleWriteString+0x80>)
   1e94a:	4798      	blx	r3
   1e94c:	0002      	movs	r2, r0
   1e94e:	68fb      	ldr	r3, [r7, #12]
   1e950:	429a      	cmp	r2, r3
   1e952:	d8eb      	bhi.n	1e92c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e954:	4b10      	ldr	r3, [pc, #64]	; (1e998 <SerialConsoleWriteString+0x84>)
   1e956:	2101      	movs	r1, #1
   1e958:	0018      	movs	r0, r3
   1e95a:	4b10      	ldr	r3, [pc, #64]	; (1e99c <SerialConsoleWriteString+0x88>)
   1e95c:	4798      	blx	r3
   1e95e:	1e03      	subs	r3, r0, #0
   1e960:	d10c      	bne.n	1e97c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e962:	4b0a      	ldr	r3, [pc, #40]	; (1e98c <SerialConsoleWriteString+0x78>)
   1e964:	681b      	ldr	r3, [r3, #0]
   1e966:	4a0e      	ldr	r2, [pc, #56]	; (1e9a0 <SerialConsoleWriteString+0x8c>)
   1e968:	0011      	movs	r1, r2
   1e96a:	0018      	movs	r0, r3
   1e96c:	4b0d      	ldr	r3, [pc, #52]	; (1e9a4 <SerialConsoleWriteString+0x90>)
   1e96e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e970:	490b      	ldr	r1, [pc, #44]	; (1e9a0 <SerialConsoleWriteString+0x8c>)
   1e972:	4b09      	ldr	r3, [pc, #36]	; (1e998 <SerialConsoleWriteString+0x84>)
   1e974:	2201      	movs	r2, #1
   1e976:	0018      	movs	r0, r3
   1e978:	4b0b      	ldr	r3, [pc, #44]	; (1e9a8 <SerialConsoleWriteString+0x94>)
   1e97a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e97c:	4b0b      	ldr	r3, [pc, #44]	; (1e9ac <SerialConsoleWriteString+0x98>)
   1e97e:	4798      	blx	r3
}
   1e980:	46c0      	nop			; (mov r8, r8)
   1e982:	46bd      	mov	sp, r7
   1e984:	b004      	add	sp, #16
   1e986:	bd80      	pop	{r7, pc}
   1e988:	0001cf81 	.word	0x0001cf81
   1e98c:	20005b24 	.word	0x20005b24
   1e990:	0001e635 	.word	0x0001e635
   1e994:	00035aa7 	.word	0x00035aa7
   1e998:	200056e4 	.word	0x200056e4
   1e99c:	00029b7d 	.word	0x00029b7d
   1e9a0:	20005b20 	.word	0x20005b20
   1e9a4:	0001e669 	.word	0x0001e669
   1e9a8:	00029aed 	.word	0x00029aed
   1e9ac:	0001cf99 	.word	0x0001cf99

0001e9b0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e9b0:	b580      	push	{r7, lr}
   1e9b2:	b084      	sub	sp, #16
   1e9b4:	af00      	add	r7, sp, #0
   1e9b6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e9b8:	4b08      	ldr	r3, [pc, #32]	; (1e9dc <SerialConsoleReadCharacter+0x2c>)
   1e9ba:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e9bc:	4b08      	ldr	r3, [pc, #32]	; (1e9e0 <SerialConsoleReadCharacter+0x30>)
   1e9be:	681b      	ldr	r3, [r3, #0]
   1e9c0:	687a      	ldr	r2, [r7, #4]
   1e9c2:	0011      	movs	r1, r2
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b07      	ldr	r3, [pc, #28]	; (1e9e4 <SerialConsoleReadCharacter+0x34>)
   1e9c8:	4798      	blx	r3
   1e9ca:	0003      	movs	r3, r0
   1e9cc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e9ce:	4b06      	ldr	r3, [pc, #24]	; (1e9e8 <SerialConsoleReadCharacter+0x38>)
   1e9d0:	4798      	blx	r3
    return a;
   1e9d2:	68fb      	ldr	r3, [r7, #12]
}
   1e9d4:	0018      	movs	r0, r3
   1e9d6:	46bd      	mov	sp, r7
   1e9d8:	b004      	add	sp, #16
   1e9da:	bd80      	pop	{r7, pc}
   1e9dc:	0001cf81 	.word	0x0001cf81
   1e9e0:	20005718 	.word	0x20005718
   1e9e4:	0001e669 	.word	0x0001e669
   1e9e8:	0001cf99 	.word	0x0001cf99

0001e9ec <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e9ec:	b580      	push	{r7, lr}
   1e9ee:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e9f0:	4b02      	ldr	r3, [pc, #8]	; (1e9fc <getLogLevel+0x10>)
   1e9f2:	781b      	ldrb	r3, [r3, #0]
}
   1e9f4:	0018      	movs	r0, r3
   1e9f6:	46bd      	mov	sp, r7
   1e9f8:	bd80      	pop	{r7, pc}
   1e9fa:	46c0      	nop			; (mov r8, r8)
   1e9fc:	20004220 	.word	0x20004220

0001ea00 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ea00:	b40e      	push	{r1, r2, r3}
   1ea02:	b590      	push	{r4, r7, lr}
   1ea04:	b084      	sub	sp, #16
   1ea06:	af00      	add	r7, sp, #0
   1ea08:	0002      	movs	r2, r0
   1ea0a:	1dfb      	adds	r3, r7, #7
   1ea0c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ea0e:	4b0e      	ldr	r3, [pc, #56]	; (1ea48 <LogMessage+0x48>)
   1ea10:	4798      	blx	r3
   1ea12:	0003      	movs	r3, r0
   1ea14:	001a      	movs	r2, r3
   1ea16:	1dfb      	adds	r3, r7, #7
   1ea18:	781b      	ldrb	r3, [r3, #0]
   1ea1a:	4293      	cmp	r3, r2
   1ea1c:	d30c      	bcc.n	1ea38 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1ea1e:	2320      	movs	r3, #32
   1ea20:	18fb      	adds	r3, r7, r3
   1ea22:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ea24:	68fb      	ldr	r3, [r7, #12]
   1ea26:	69fa      	ldr	r2, [r7, #28]
   1ea28:	4808      	ldr	r0, [pc, #32]	; (1ea4c <LogMessage+0x4c>)
   1ea2a:	217f      	movs	r1, #127	; 0x7f
   1ea2c:	4c08      	ldr	r4, [pc, #32]	; (1ea50 <LogMessage+0x50>)
   1ea2e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1ea30:	4b06      	ldr	r3, [pc, #24]	; (1ea4c <LogMessage+0x4c>)
   1ea32:	0018      	movs	r0, r3
   1ea34:	4b07      	ldr	r3, [pc, #28]	; (1ea54 <LogMessage+0x54>)
   1ea36:	4798      	blx	r3
        va_end(ap);
    }
};
   1ea38:	46c0      	nop			; (mov r8, r8)
   1ea3a:	46bd      	mov	sp, r7
   1ea3c:	b004      	add	sp, #16
   1ea3e:	bc90      	pop	{r4, r7}
   1ea40:	bc08      	pop	{r3}
   1ea42:	b003      	add	sp, #12
   1ea44:	4718      	bx	r3
   1ea46:	46c0      	nop			; (mov r8, r8)
   1ea48:	0001e9ed 	.word	0x0001e9ed
   1ea4c:	20005664 	.word	0x20005664
   1ea50:	00035ce1 	.word	0x00035ce1
   1ea54:	0001e915 	.word	0x0001e915

0001ea58 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ea58:	b40f      	push	{r0, r1, r2, r3}
   1ea5a:	b580      	push	{r7, lr}
   1ea5c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ea5e:	68bb      	ldr	r3, [r7, #8]
   1ea60:	0019      	movs	r1, r3
   1ea62:	2001      	movs	r0, #1
   1ea64:	4b03      	ldr	r3, [pc, #12]	; (1ea74 <LogMessageDebug+0x1c>)
   1ea66:	4798      	blx	r3
};
   1ea68:	46c0      	nop			; (mov r8, r8)
   1ea6a:	46bd      	mov	sp, r7
   1ea6c:	bc80      	pop	{r7}
   1ea6e:	bc08      	pop	{r3}
   1ea70:	b004      	add	sp, #16
   1ea72:	4718      	bx	r3
   1ea74:	0001ea01 	.word	0x0001ea01

0001ea78 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ea78:	b580      	push	{r7, lr}
   1ea7a:	b090      	sub	sp, #64	; 0x40
   1ea7c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ea7e:	003b      	movs	r3, r7
   1ea80:	0018      	movs	r0, r3
   1ea82:	4b14      	ldr	r3, [pc, #80]	; (1ead4 <configure_usart+0x5c>)
   1ea84:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ea86:	003b      	movs	r3, r7
   1ea88:	22e1      	movs	r2, #225	; 0xe1
   1ea8a:	0252      	lsls	r2, r2, #9
   1ea8c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ea8e:	003b      	movs	r3, r7
   1ea90:	22c4      	movs	r2, #196	; 0xc4
   1ea92:	0392      	lsls	r2, r2, #14
   1ea94:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ea96:	003b      	movs	r3, r7
   1ea98:	2201      	movs	r2, #1
   1ea9a:	4252      	negs	r2, r2
   1ea9c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ea9e:	003b      	movs	r3, r7
   1eaa0:	2201      	movs	r2, #1
   1eaa2:	4252      	negs	r2, r2
   1eaa4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1eaa6:	003b      	movs	r3, r7
   1eaa8:	4a0b      	ldr	r2, [pc, #44]	; (1ead8 <configure_usart+0x60>)
   1eaaa:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1eaac:	003b      	movs	r3, r7
   1eaae:	4a0b      	ldr	r2, [pc, #44]	; (1eadc <configure_usart+0x64>)
   1eab0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1eab2:	46c0      	nop			; (mov r8, r8)
   1eab4:	003a      	movs	r2, r7
   1eab6:	490a      	ldr	r1, [pc, #40]	; (1eae0 <configure_usart+0x68>)
   1eab8:	4b0a      	ldr	r3, [pc, #40]	; (1eae4 <configure_usart+0x6c>)
   1eaba:	0018      	movs	r0, r3
   1eabc:	4b0a      	ldr	r3, [pc, #40]	; (1eae8 <configure_usart+0x70>)
   1eabe:	4798      	blx	r3
   1eac0:	1e03      	subs	r3, r0, #0
   1eac2:	d1f7      	bne.n	1eab4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1eac4:	4b07      	ldr	r3, [pc, #28]	; (1eae4 <configure_usart+0x6c>)
   1eac6:	0018      	movs	r0, r3
   1eac8:	4b08      	ldr	r3, [pc, #32]	; (1eaec <configure_usart+0x74>)
   1eaca:	4798      	blx	r3
}
   1eacc:	46c0      	nop			; (mov r8, r8)
   1eace:	46bd      	mov	sp, r7
   1ead0:	b010      	add	sp, #64	; 0x40
   1ead2:	bd80      	pop	{r7, pc}
   1ead4:	0001e765 	.word	0x0001e765
   1ead8:	002a0003 	.word	0x002a0003
   1eadc:	002b0003 	.word	0x002b0003
   1eae0:	42001800 	.word	0x42001800
   1eae4:	200056e4 	.word	0x200056e4
   1eae8:	000296f1 	.word	0x000296f1
   1eaec:	0001e825 	.word	0x0001e825

0001eaf0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1eaf0:	b580      	push	{r7, lr}
   1eaf2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eaf4:	490c      	ldr	r1, [pc, #48]	; (1eb28 <configure_usart_callbacks+0x38>)
   1eaf6:	4b0d      	ldr	r3, [pc, #52]	; (1eb2c <configure_usart_callbacks+0x3c>)
   1eaf8:	2200      	movs	r2, #0
   1eafa:	0018      	movs	r0, r3
   1eafc:	4b0c      	ldr	r3, [pc, #48]	; (1eb30 <configure_usart_callbacks+0x40>)
   1eafe:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1eb00:	490c      	ldr	r1, [pc, #48]	; (1eb34 <configure_usart_callbacks+0x44>)
   1eb02:	4b0a      	ldr	r3, [pc, #40]	; (1eb2c <configure_usart_callbacks+0x3c>)
   1eb04:	2201      	movs	r2, #1
   1eb06:	0018      	movs	r0, r3
   1eb08:	4b09      	ldr	r3, [pc, #36]	; (1eb30 <configure_usart_callbacks+0x40>)
   1eb0a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eb0c:	4b07      	ldr	r3, [pc, #28]	; (1eb2c <configure_usart_callbacks+0x3c>)
   1eb0e:	2100      	movs	r1, #0
   1eb10:	0018      	movs	r0, r3
   1eb12:	4b09      	ldr	r3, [pc, #36]	; (1eb38 <configure_usart_callbacks+0x48>)
   1eb14:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1eb16:	4b05      	ldr	r3, [pc, #20]	; (1eb2c <configure_usart_callbacks+0x3c>)
   1eb18:	2101      	movs	r1, #1
   1eb1a:	0018      	movs	r0, r3
   1eb1c:	4b06      	ldr	r3, [pc, #24]	; (1eb38 <configure_usart_callbacks+0x48>)
   1eb1e:	4798      	blx	r3
}
   1eb20:	46c0      	nop			; (mov r8, r8)
   1eb22:	46bd      	mov	sp, r7
   1eb24:	bd80      	pop	{r7, pc}
   1eb26:	46c0      	nop			; (mov r8, r8)
   1eb28:	0001eb85 	.word	0x0001eb85
   1eb2c:	200056e4 	.word	0x200056e4
   1eb30:	00029aa5 	.word	0x00029aa5
   1eb34:	0001eb3d 	.word	0x0001eb3d
   1eb38:	0001e86d 	.word	0x0001e86d

0001eb3c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1eb3c:	b580      	push	{r7, lr}
   1eb3e:	b082      	sub	sp, #8
   1eb40:	af00      	add	r7, sp, #0
   1eb42:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1eb44:	4b09      	ldr	r3, [pc, #36]	; (1eb6c <usart_read_callback+0x30>)
   1eb46:	681a      	ldr	r2, [r3, #0]
   1eb48:	4b09      	ldr	r3, [pc, #36]	; (1eb70 <usart_read_callback+0x34>)
   1eb4a:	781b      	ldrb	r3, [r3, #0]
   1eb4c:	0019      	movs	r1, r3
   1eb4e:	0010      	movs	r0, r2
   1eb50:	4b08      	ldr	r3, [pc, #32]	; (1eb74 <usart_read_callback+0x38>)
   1eb52:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1eb54:	4906      	ldr	r1, [pc, #24]	; (1eb70 <usart_read_callback+0x34>)
   1eb56:	4b08      	ldr	r3, [pc, #32]	; (1eb78 <usart_read_callback+0x3c>)
   1eb58:	2201      	movs	r2, #1
   1eb5a:	0018      	movs	r0, r3
   1eb5c:	4b07      	ldr	r3, [pc, #28]	; (1eb7c <usart_read_callback+0x40>)
   1eb5e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1eb60:	4b07      	ldr	r3, [pc, #28]	; (1eb80 <usart_read_callback+0x44>)
   1eb62:	4798      	blx	r3
}
   1eb64:	46c0      	nop			; (mov r8, r8)
   1eb66:	46bd      	mov	sp, r7
   1eb68:	b002      	add	sp, #8
   1eb6a:	bd80      	pop	{r7, pc}
   1eb6c:	20005718 	.word	0x20005718
   1eb70:	2000571c 	.word	0x2000571c
   1eb74:	0001e635 	.word	0x0001e635
   1eb78:	200056e4 	.word	0x200056e4
   1eb7c:	00029b35 	.word	0x00029b35
   1eb80:	00013ba1 	.word	0x00013ba1

0001eb84 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1eb84:	b580      	push	{r7, lr}
   1eb86:	b082      	sub	sp, #8
   1eb88:	af00      	add	r7, sp, #0
   1eb8a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1eb8c:	4b09      	ldr	r3, [pc, #36]	; (1ebb4 <usart_write_callback+0x30>)
   1eb8e:	681b      	ldr	r3, [r3, #0]
   1eb90:	4a09      	ldr	r2, [pc, #36]	; (1ebb8 <usart_write_callback+0x34>)
   1eb92:	0011      	movs	r1, r2
   1eb94:	0018      	movs	r0, r3
   1eb96:	4b09      	ldr	r3, [pc, #36]	; (1ebbc <usart_write_callback+0x38>)
   1eb98:	4798      	blx	r3
   1eb9a:	0003      	movs	r3, r0
   1eb9c:	3301      	adds	r3, #1
   1eb9e:	d005      	beq.n	1ebac <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eba0:	4905      	ldr	r1, [pc, #20]	; (1ebb8 <usart_write_callback+0x34>)
   1eba2:	4b07      	ldr	r3, [pc, #28]	; (1ebc0 <usart_write_callback+0x3c>)
   1eba4:	2201      	movs	r2, #1
   1eba6:	0018      	movs	r0, r3
   1eba8:	4b06      	ldr	r3, [pc, #24]	; (1ebc4 <usart_write_callback+0x40>)
   1ebaa:	4798      	blx	r3
    }
}
   1ebac:	46c0      	nop			; (mov r8, r8)
   1ebae:	46bd      	mov	sp, r7
   1ebb0:	b002      	add	sp, #8
   1ebb2:	bd80      	pop	{r7, pc}
   1ebb4:	20005b24 	.word	0x20005b24
   1ebb8:	20005b20 	.word	0x20005b20
   1ebbc:	0001e669 	.word	0x0001e669
   1ebc0:	200056e4 	.word	0x200056e4
   1ebc4:	00029aed 	.word	0x00029aed

0001ebc8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ebc8:	b590      	push	{r4, r7, lr}
   1ebca:	b087      	sub	sp, #28
   1ebcc:	af00      	add	r7, sp, #0
   1ebce:	60f8      	str	r0, [r7, #12]
   1ebd0:	000c      	movs	r4, r1
   1ebd2:	0010      	movs	r0, r2
   1ebd4:	0019      	movs	r1, r3
   1ebd6:	230a      	movs	r3, #10
   1ebd8:	18fb      	adds	r3, r7, r3
   1ebda:	1c22      	adds	r2, r4, #0
   1ebdc:	801a      	strh	r2, [r3, #0]
   1ebde:	2308      	movs	r3, #8
   1ebe0:	18fb      	adds	r3, r7, r3
   1ebe2:	1c02      	adds	r2, r0, #0
   1ebe4:	801a      	strh	r2, [r3, #0]
   1ebe6:	1dfb      	adds	r3, r7, #7
   1ebe8:	1c0a      	adds	r2, r1, #0
   1ebea:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1ebec:	230a      	movs	r3, #10
   1ebee:	18fb      	adds	r3, r7, r3
   1ebf0:	881a      	ldrh	r2, [r3, #0]
   1ebf2:	2308      	movs	r3, #8
   1ebf4:	18fb      	adds	r3, r7, r3
   1ebf6:	881b      	ldrh	r3, [r3, #0]
   1ebf8:	1ad3      	subs	r3, r2, r3
   1ebfa:	3307      	adds	r3, #7
   1ebfc:	2b00      	cmp	r3, #0
   1ebfe:	da00      	bge.n	1ec02 <SDMMC_UNSTUFF_BITS+0x3a>
   1ec00:	3307      	adds	r3, #7
   1ec02:	10db      	asrs	r3, r3, #3
   1ec04:	3b01      	subs	r3, #1
   1ec06:	68fa      	ldr	r2, [r7, #12]
   1ec08:	18d3      	adds	r3, r2, r3
   1ec0a:	781b      	ldrb	r3, [r3, #0]
   1ec0c:	0019      	movs	r1, r3
   1ec0e:	2308      	movs	r3, #8
   1ec10:	18fb      	adds	r3, r7, r3
   1ec12:	881b      	ldrh	r3, [r3, #0]
   1ec14:	2207      	movs	r2, #7
   1ec16:	4013      	ands	r3, r2
   1ec18:	4119      	asrs	r1, r3
   1ec1a:	000b      	movs	r3, r1
   1ec1c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ec1e:	2308      	movs	r3, #8
   1ec20:	18fb      	adds	r3, r7, r3
   1ec22:	881b      	ldrh	r3, [r3, #0]
   1ec24:	2207      	movs	r2, #7
   1ec26:	401a      	ands	r2, r3
   1ec28:	1dfb      	adds	r3, r7, #7
   1ec2a:	781b      	ldrb	r3, [r3, #0]
   1ec2c:	18d3      	adds	r3, r2, r3
   1ec2e:	2b08      	cmp	r3, #8
   1ec30:	dd1c      	ble.n	1ec6c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ec32:	230a      	movs	r3, #10
   1ec34:	18fb      	adds	r3, r7, r3
   1ec36:	881a      	ldrh	r2, [r3, #0]
   1ec38:	2308      	movs	r3, #8
   1ec3a:	18fb      	adds	r3, r7, r3
   1ec3c:	881b      	ldrh	r3, [r3, #0]
   1ec3e:	1ad3      	subs	r3, r2, r3
   1ec40:	3307      	adds	r3, #7
   1ec42:	2b00      	cmp	r3, #0
   1ec44:	da00      	bge.n	1ec48 <SDMMC_UNSTUFF_BITS+0x80>
   1ec46:	3307      	adds	r3, #7
   1ec48:	10db      	asrs	r3, r3, #3
   1ec4a:	3b02      	subs	r3, #2
   1ec4c:	68fa      	ldr	r2, [r7, #12]
   1ec4e:	18d3      	adds	r3, r2, r3
   1ec50:	781b      	ldrb	r3, [r3, #0]
   1ec52:	0019      	movs	r1, r3
   1ec54:	2308      	movs	r3, #8
   1ec56:	18fb      	adds	r3, r7, r3
   1ec58:	881b      	ldrh	r3, [r3, #0]
   1ec5a:	2207      	movs	r2, #7
   1ec5c:	4013      	ands	r3, r2
   1ec5e:	2208      	movs	r2, #8
   1ec60:	1ad3      	subs	r3, r2, r3
   1ec62:	4099      	lsls	r1, r3
   1ec64:	000b      	movs	r3, r1
   1ec66:	697a      	ldr	r2, [r7, #20]
   1ec68:	4313      	orrs	r3, r2
   1ec6a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ec6c:	2308      	movs	r3, #8
   1ec6e:	18fb      	adds	r3, r7, r3
   1ec70:	881b      	ldrh	r3, [r3, #0]
   1ec72:	2207      	movs	r2, #7
   1ec74:	401a      	ands	r2, r3
   1ec76:	1dfb      	adds	r3, r7, #7
   1ec78:	781b      	ldrb	r3, [r3, #0]
   1ec7a:	18d3      	adds	r3, r2, r3
   1ec7c:	2b10      	cmp	r3, #16
   1ec7e:	dd1c      	ble.n	1ecba <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ec80:	230a      	movs	r3, #10
   1ec82:	18fb      	adds	r3, r7, r3
   1ec84:	881a      	ldrh	r2, [r3, #0]
   1ec86:	2308      	movs	r3, #8
   1ec88:	18fb      	adds	r3, r7, r3
   1ec8a:	881b      	ldrh	r3, [r3, #0]
   1ec8c:	1ad3      	subs	r3, r2, r3
   1ec8e:	3307      	adds	r3, #7
   1ec90:	2b00      	cmp	r3, #0
   1ec92:	da00      	bge.n	1ec96 <SDMMC_UNSTUFF_BITS+0xce>
   1ec94:	3307      	adds	r3, #7
   1ec96:	10db      	asrs	r3, r3, #3
   1ec98:	3b03      	subs	r3, #3
   1ec9a:	68fa      	ldr	r2, [r7, #12]
   1ec9c:	18d3      	adds	r3, r2, r3
   1ec9e:	781b      	ldrb	r3, [r3, #0]
   1eca0:	0019      	movs	r1, r3
   1eca2:	2308      	movs	r3, #8
   1eca4:	18fb      	adds	r3, r7, r3
   1eca6:	881b      	ldrh	r3, [r3, #0]
   1eca8:	2207      	movs	r2, #7
   1ecaa:	4013      	ands	r3, r2
   1ecac:	2210      	movs	r2, #16
   1ecae:	1ad3      	subs	r3, r2, r3
   1ecb0:	4099      	lsls	r1, r3
   1ecb2:	000b      	movs	r3, r1
   1ecb4:	697a      	ldr	r2, [r7, #20]
   1ecb6:	4313      	orrs	r3, r2
   1ecb8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ecba:	2308      	movs	r3, #8
   1ecbc:	18fb      	adds	r3, r7, r3
   1ecbe:	881b      	ldrh	r3, [r3, #0]
   1ecc0:	2207      	movs	r2, #7
   1ecc2:	401a      	ands	r2, r3
   1ecc4:	1dfb      	adds	r3, r7, #7
   1ecc6:	781b      	ldrb	r3, [r3, #0]
   1ecc8:	18d3      	adds	r3, r2, r3
   1ecca:	2b10      	cmp	r3, #16
   1eccc:	dd1c      	ble.n	1ed08 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ecce:	230a      	movs	r3, #10
   1ecd0:	18fb      	adds	r3, r7, r3
   1ecd2:	881a      	ldrh	r2, [r3, #0]
   1ecd4:	2308      	movs	r3, #8
   1ecd6:	18fb      	adds	r3, r7, r3
   1ecd8:	881b      	ldrh	r3, [r3, #0]
   1ecda:	1ad3      	subs	r3, r2, r3
   1ecdc:	3307      	adds	r3, #7
   1ecde:	2b00      	cmp	r3, #0
   1ece0:	da00      	bge.n	1ece4 <SDMMC_UNSTUFF_BITS+0x11c>
   1ece2:	3307      	adds	r3, #7
   1ece4:	10db      	asrs	r3, r3, #3
   1ece6:	3b03      	subs	r3, #3
   1ece8:	68fa      	ldr	r2, [r7, #12]
   1ecea:	18d3      	adds	r3, r2, r3
   1ecec:	781b      	ldrb	r3, [r3, #0]
   1ecee:	0019      	movs	r1, r3
   1ecf0:	2308      	movs	r3, #8
   1ecf2:	18fb      	adds	r3, r7, r3
   1ecf4:	881b      	ldrh	r3, [r3, #0]
   1ecf6:	2207      	movs	r2, #7
   1ecf8:	4013      	ands	r3, r2
   1ecfa:	2210      	movs	r2, #16
   1ecfc:	1ad3      	subs	r3, r2, r3
   1ecfe:	4099      	lsls	r1, r3
   1ed00:	000b      	movs	r3, r1
   1ed02:	697a      	ldr	r2, [r7, #20]
   1ed04:	4313      	orrs	r3, r2
   1ed06:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ed08:	1dfb      	adds	r3, r7, #7
   1ed0a:	781b      	ldrb	r3, [r3, #0]
   1ed0c:	2201      	movs	r2, #1
   1ed0e:	409a      	lsls	r2, r3
   1ed10:	0013      	movs	r3, r2
   1ed12:	1e5a      	subs	r2, r3, #1
   1ed14:	697b      	ldr	r3, [r7, #20]
   1ed16:	4013      	ands	r3, r2
   1ed18:	617b      	str	r3, [r7, #20]
	return value;
   1ed1a:	697b      	ldr	r3, [r7, #20]
}
   1ed1c:	0018      	movs	r0, r3
   1ed1e:	46bd      	mov	sp, r7
   1ed20:	b007      	add	sp, #28
   1ed22:	bd90      	pop	{r4, r7, pc}

0001ed24 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ed24:	b580      	push	{r7, lr}
   1ed26:	b082      	sub	sp, #8
   1ed28:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ed2a:	4b23      	ldr	r3, [pc, #140]	; (1edb8 <mmc_spi_op_cond+0x94>)
   1ed2c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ed2e:	4b23      	ldr	r3, [pc, #140]	; (1edbc <mmc_spi_op_cond+0x98>)
   1ed30:	2100      	movs	r1, #0
   1ed32:	0018      	movs	r0, r3
   1ed34:	4b22      	ldr	r3, [pc, #136]	; (1edc0 <mmc_spi_op_cond+0x9c>)
   1ed36:	4798      	blx	r3
   1ed38:	0003      	movs	r3, r0
   1ed3a:	001a      	movs	r2, r3
   1ed3c:	2301      	movs	r3, #1
   1ed3e:	4053      	eors	r3, r2
   1ed40:	b2db      	uxtb	r3, r3
   1ed42:	2b00      	cmp	r3, #0
   1ed44:	d001      	beq.n	1ed4a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1ed46:	2300      	movs	r3, #0
   1ed48:	e031      	b.n	1edae <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1ed4a:	4b1e      	ldr	r3, [pc, #120]	; (1edc4 <mmc_spi_op_cond+0xa0>)
   1ed4c:	4798      	blx	r3
   1ed4e:	0003      	movs	r3, r0
   1ed50:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ed52:	683b      	ldr	r3, [r7, #0]
   1ed54:	2201      	movs	r2, #1
   1ed56:	4013      	ands	r3, r2
   1ed58:	d006      	beq.n	1ed68 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1ed5a:	687b      	ldr	r3, [r7, #4]
   1ed5c:	1e5a      	subs	r2, r3, #1
   1ed5e:	607a      	str	r2, [r7, #4]
   1ed60:	2b00      	cmp	r3, #0
   1ed62:	d1e4      	bne.n	1ed2e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ed64:	2300      	movs	r3, #0
   1ed66:	e022      	b.n	1edae <mmc_spi_op_cond+0x8a>
			break;
   1ed68:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ed6a:	4b17      	ldr	r3, [pc, #92]	; (1edc8 <mmc_spi_op_cond+0xa4>)
   1ed6c:	2100      	movs	r1, #0
   1ed6e:	0018      	movs	r0, r3
   1ed70:	4b13      	ldr	r3, [pc, #76]	; (1edc0 <mmc_spi_op_cond+0x9c>)
   1ed72:	4798      	blx	r3
   1ed74:	0003      	movs	r3, r0
   1ed76:	001a      	movs	r2, r3
   1ed78:	2301      	movs	r3, #1
   1ed7a:	4053      	eors	r3, r2
   1ed7c:	b2db      	uxtb	r3, r3
   1ed7e:	2b00      	cmp	r3, #0
   1ed80:	d001      	beq.n	1ed86 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ed82:	2300      	movs	r3, #0
   1ed84:	e013      	b.n	1edae <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1ed86:	4b0f      	ldr	r3, [pc, #60]	; (1edc4 <mmc_spi_op_cond+0xa0>)
   1ed88:	4798      	blx	r3
   1ed8a:	0002      	movs	r2, r0
   1ed8c:	23c0      	movs	r3, #192	; 0xc0
   1ed8e:	05db      	lsls	r3, r3, #23
   1ed90:	401a      	ands	r2, r3
   1ed92:	2380      	movs	r3, #128	; 0x80
   1ed94:	05db      	lsls	r3, r3, #23
   1ed96:	429a      	cmp	r2, r3
   1ed98:	d108      	bne.n	1edac <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ed9a:	4b0c      	ldr	r3, [pc, #48]	; (1edcc <mmc_spi_op_cond+0xa8>)
   1ed9c:	681a      	ldr	r2, [r3, #0]
   1ed9e:	4b0b      	ldr	r3, [pc, #44]	; (1edcc <mmc_spi_op_cond+0xa8>)
   1eda0:	681b      	ldr	r3, [r3, #0]
   1eda2:	7adb      	ldrb	r3, [r3, #11]
   1eda4:	2108      	movs	r1, #8
   1eda6:	430b      	orrs	r3, r1
   1eda8:	b2db      	uxtb	r3, r3
   1edaa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1edac:	2301      	movs	r3, #1
}
   1edae:	0018      	movs	r0, r3
   1edb0:	46bd      	mov	sp, r7
   1edb2:	b002      	add	sp, #8
   1edb4:	bd80      	pop	{r7, pc}
   1edb6:	46c0      	nop			; (mov r8, r8)
   1edb8:	00001bee 	.word	0x00001bee
   1edbc:	00001101 	.word	0x00001101
   1edc0:	000207a1 	.word	0x000207a1
   1edc4:	000209e1 	.word	0x000209e1
   1edc8:	0000053a 	.word	0x0000053a
   1edcc:	20004248 	.word	0x20004248

0001edd0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1edd0:	b580      	push	{r7, lr}
   1edd2:	b086      	sub	sp, #24
   1edd4:	af00      	add	r7, sp, #0
   1edd6:	0002      	movs	r2, r0
   1edd8:	1dfb      	adds	r3, r7, #7
   1edda:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1eddc:	4b2e      	ldr	r3, [pc, #184]	; (1ee98 <sd_spi_op_cond+0xc8>)
   1edde:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ede0:	4b2e      	ldr	r3, [pc, #184]	; (1ee9c <sd_spi_op_cond+0xcc>)
   1ede2:	2100      	movs	r1, #0
   1ede4:	0018      	movs	r0, r3
   1ede6:	4b2e      	ldr	r3, [pc, #184]	; (1eea0 <sd_spi_op_cond+0xd0>)
   1ede8:	4798      	blx	r3
   1edea:	0003      	movs	r3, r0
   1edec:	001a      	movs	r2, r3
   1edee:	2301      	movs	r3, #1
   1edf0:	4053      	eors	r3, r2
   1edf2:	b2db      	uxtb	r3, r3
   1edf4:	2b00      	cmp	r3, #0
   1edf6:	d001      	beq.n	1edfc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1edf8:	2300      	movs	r3, #0
   1edfa:	e048      	b.n	1ee8e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1edfc:	2300      	movs	r3, #0
   1edfe:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ee00:	1dfb      	adds	r3, r7, #7
   1ee02:	781b      	ldrb	r3, [r3, #0]
   1ee04:	2b00      	cmp	r3, #0
   1ee06:	d004      	beq.n	1ee12 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ee08:	697b      	ldr	r3, [r7, #20]
   1ee0a:	2280      	movs	r2, #128	; 0x80
   1ee0c:	05d2      	lsls	r2, r2, #23
   1ee0e:	4313      	orrs	r3, r2
   1ee10:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1ee12:	697b      	ldr	r3, [r7, #20]
   1ee14:	4a23      	ldr	r2, [pc, #140]	; (1eea4 <sd_spi_op_cond+0xd4>)
   1ee16:	0019      	movs	r1, r3
   1ee18:	0010      	movs	r0, r2
   1ee1a:	4b21      	ldr	r3, [pc, #132]	; (1eea0 <sd_spi_op_cond+0xd0>)
   1ee1c:	4798      	blx	r3
   1ee1e:	0003      	movs	r3, r0
   1ee20:	001a      	movs	r2, r3
   1ee22:	2301      	movs	r3, #1
   1ee24:	4053      	eors	r3, r2
   1ee26:	b2db      	uxtb	r3, r3
   1ee28:	2b00      	cmp	r3, #0
   1ee2a:	d001      	beq.n	1ee30 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ee2c:	2300      	movs	r3, #0
   1ee2e:	e02e      	b.n	1ee8e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1ee30:	4b1d      	ldr	r3, [pc, #116]	; (1eea8 <sd_spi_op_cond+0xd8>)
   1ee32:	4798      	blx	r3
   1ee34:	0003      	movs	r3, r0
   1ee36:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1ee38:	68fb      	ldr	r3, [r7, #12]
   1ee3a:	2201      	movs	r2, #1
   1ee3c:	4013      	ands	r3, r2
   1ee3e:	d006      	beq.n	1ee4e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ee40:	693b      	ldr	r3, [r7, #16]
   1ee42:	1e5a      	subs	r2, r3, #1
   1ee44:	613a      	str	r2, [r7, #16]
   1ee46:	2b00      	cmp	r3, #0
   1ee48:	d1ca      	bne.n	1ede0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ee4a:	2300      	movs	r3, #0
   1ee4c:	e01f      	b.n	1ee8e <sd_spi_op_cond+0xbe>
			break;
   1ee4e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ee50:	4b16      	ldr	r3, [pc, #88]	; (1eeac <sd_spi_op_cond+0xdc>)
   1ee52:	2100      	movs	r1, #0
   1ee54:	0018      	movs	r0, r3
   1ee56:	4b12      	ldr	r3, [pc, #72]	; (1eea0 <sd_spi_op_cond+0xd0>)
   1ee58:	4798      	blx	r3
   1ee5a:	0003      	movs	r3, r0
   1ee5c:	001a      	movs	r2, r3
   1ee5e:	2301      	movs	r3, #1
   1ee60:	4053      	eors	r3, r2
   1ee62:	b2db      	uxtb	r3, r3
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d001      	beq.n	1ee6c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ee68:	2300      	movs	r3, #0
   1ee6a:	e010      	b.n	1ee8e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ee6c:	4b0e      	ldr	r3, [pc, #56]	; (1eea8 <sd_spi_op_cond+0xd8>)
   1ee6e:	4798      	blx	r3
   1ee70:	0002      	movs	r2, r0
   1ee72:	2380      	movs	r3, #128	; 0x80
   1ee74:	05db      	lsls	r3, r3, #23
   1ee76:	4013      	ands	r3, r2
   1ee78:	d008      	beq.n	1ee8c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ee7a:	4b0d      	ldr	r3, [pc, #52]	; (1eeb0 <sd_spi_op_cond+0xe0>)
   1ee7c:	681a      	ldr	r2, [r3, #0]
   1ee7e:	4b0c      	ldr	r3, [pc, #48]	; (1eeb0 <sd_spi_op_cond+0xe0>)
   1ee80:	681b      	ldr	r3, [r3, #0]
   1ee82:	7adb      	ldrb	r3, [r3, #11]
   1ee84:	2108      	movs	r1, #8
   1ee86:	430b      	orrs	r3, r1
   1ee88:	b2db      	uxtb	r3, r3
   1ee8a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ee8c:	2301      	movs	r3, #1
}
   1ee8e:	0018      	movs	r0, r3
   1ee90:	46bd      	mov	sp, r7
   1ee92:	b006      	add	sp, #24
   1ee94:	bd80      	pop	{r7, pc}
   1ee96:	46c0      	nop			; (mov r8, r8)
   1ee98:	00001bee 	.word	0x00001bee
   1ee9c:	00001137 	.word	0x00001137
   1eea0:	000207a1 	.word	0x000207a1
   1eea4:	00001129 	.word	0x00001129
   1eea8:	000209e1 	.word	0x000209e1
   1eeac:	0000053a 	.word	0x0000053a
   1eeb0:	20004248 	.word	0x20004248

0001eeb4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1eeb4:	b580      	push	{r7, lr}
   1eeb6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1eeb8:	2301      	movs	r3, #1
}
   1eeba:	0018      	movs	r0, r3
   1eebc:	46bd      	mov	sp, r7
   1eebe:	bd80      	pop	{r7, pc}

0001eec0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1eec0:	b580      	push	{r7, lr}
   1eec2:	b084      	sub	sp, #16
   1eec4:	af00      	add	r7, sp, #0
   1eec6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1eec8:	687b      	ldr	r3, [r7, #4]
   1eeca:	2200      	movs	r2, #0
   1eecc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1eece:	23d5      	movs	r3, #213	; 0xd5
   1eed0:	005b      	lsls	r3, r3, #1
   1eed2:	4a14      	ldr	r2, [pc, #80]	; (1ef24 <sd_cmd8+0x64>)
   1eed4:	0019      	movs	r1, r3
   1eed6:	0010      	movs	r0, r2
   1eed8:	4b13      	ldr	r3, [pc, #76]	; (1ef28 <sd_cmd8+0x68>)
   1eeda:	4798      	blx	r3
   1eedc:	0003      	movs	r3, r0
   1eede:	001a      	movs	r2, r3
   1eee0:	2301      	movs	r3, #1
   1eee2:	4053      	eors	r3, r2
   1eee4:	b2db      	uxtb	r3, r3
   1eee6:	2b00      	cmp	r3, #0
   1eee8:	d001      	beq.n	1eeee <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1eeea:	2301      	movs	r3, #1
   1eeec:	e015      	b.n	1ef1a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1eeee:	4b0f      	ldr	r3, [pc, #60]	; (1ef2c <sd_cmd8+0x6c>)
   1eef0:	4798      	blx	r3
   1eef2:	0003      	movs	r3, r0
   1eef4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1eef6:	68fb      	ldr	r3, [r7, #12]
   1eef8:	3301      	adds	r3, #1
   1eefa:	d101      	bne.n	1ef00 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1eefc:	2301      	movs	r3, #1
   1eefe:	e00c      	b.n	1ef1a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1ef00:	68fb      	ldr	r3, [r7, #12]
   1ef02:	051b      	lsls	r3, r3, #20
   1ef04:	0d1a      	lsrs	r2, r3, #20
   1ef06:	23d5      	movs	r3, #213	; 0xd5
   1ef08:	005b      	lsls	r3, r3, #1
   1ef0a:	429a      	cmp	r2, r3
   1ef0c:	d001      	beq.n	1ef12 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1ef0e:	2300      	movs	r3, #0
   1ef10:	e003      	b.n	1ef1a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1ef12:	687b      	ldr	r3, [r7, #4]
   1ef14:	2201      	movs	r2, #1
   1ef16:	701a      	strb	r2, [r3, #0]
	return true;
   1ef18:	2301      	movs	r3, #1
}
   1ef1a:	0018      	movs	r0, r3
   1ef1c:	46bd      	mov	sp, r7
   1ef1e:	b004      	add	sp, #16
   1ef20:	bd80      	pop	{r7, pc}
   1ef22:	46c0      	nop			; (mov r8, r8)
   1ef24:	00005508 	.word	0x00005508
   1ef28:	000207a1 	.word	0x000207a1
   1ef2c:	000209e1 	.word	0x000209e1

0001ef30 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1ef30:	b590      	push	{r4, r7, lr}
   1ef32:	b089      	sub	sp, #36	; 0x24
   1ef34:	af02      	add	r7, sp, #8
   1ef36:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1ef38:	2380      	movs	r3, #128	; 0x80
   1ef3a:	009a      	lsls	r2, r3, #2
   1ef3c:	4841      	ldr	r0, [pc, #260]	; (1f044 <mmc_cmd8+0x114>)
   1ef3e:	2300      	movs	r3, #0
   1ef40:	9300      	str	r3, [sp, #0]
   1ef42:	2301      	movs	r3, #1
   1ef44:	2100      	movs	r1, #0
   1ef46:	4c40      	ldr	r4, [pc, #256]	; (1f048 <mmc_cmd8+0x118>)
   1ef48:	47a0      	blx	r4
   1ef4a:	0003      	movs	r3, r0
   1ef4c:	001a      	movs	r2, r3
   1ef4e:	2301      	movs	r3, #1
   1ef50:	4053      	eors	r3, r2
   1ef52:	b2db      	uxtb	r3, r3
   1ef54:	2b00      	cmp	r3, #0
   1ef56:	d001      	beq.n	1ef5c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1ef58:	2300      	movs	r3, #0
   1ef5a:	e06e      	b.n	1f03a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ef5c:	2316      	movs	r3, #22
   1ef5e:	18fb      	adds	r3, r7, r3
   1ef60:	2200      	movs	r2, #0
   1ef62:	801a      	strh	r2, [r3, #0]
   1ef64:	e014      	b.n	1ef90 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ef66:	2310      	movs	r3, #16
   1ef68:	18fb      	adds	r3, r7, r3
   1ef6a:	0018      	movs	r0, r3
   1ef6c:	4b37      	ldr	r3, [pc, #220]	; (1f04c <mmc_cmd8+0x11c>)
   1ef6e:	4798      	blx	r3
   1ef70:	0003      	movs	r3, r0
   1ef72:	001a      	movs	r2, r3
   1ef74:	2301      	movs	r3, #1
   1ef76:	4053      	eors	r3, r2
   1ef78:	b2db      	uxtb	r3, r3
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d001      	beq.n	1ef82 <mmc_cmd8+0x52>
			return false;
   1ef7e:	2300      	movs	r3, #0
   1ef80:	e05b      	b.n	1f03a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ef82:	2316      	movs	r3, #22
   1ef84:	18fb      	adds	r3, r7, r3
   1ef86:	881a      	ldrh	r2, [r3, #0]
   1ef88:	2316      	movs	r3, #22
   1ef8a:	18fb      	adds	r3, r7, r3
   1ef8c:	3201      	adds	r2, #1
   1ef8e:	801a      	strh	r2, [r3, #0]
   1ef90:	2316      	movs	r3, #22
   1ef92:	18fb      	adds	r3, r7, r3
   1ef94:	881b      	ldrh	r3, [r3, #0]
   1ef96:	2b31      	cmp	r3, #49	; 0x31
   1ef98:	d9e5      	bls.n	1ef66 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ef9a:	693b      	ldr	r3, [r7, #16]
   1ef9c:	b2db      	uxtb	r3, r3
   1ef9e:	2202      	movs	r2, #2
   1efa0:	4013      	ands	r3, r2
   1efa2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1efa4:	687b      	ldr	r3, [r7, #4]
   1efa6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1efa8:	4b29      	ldr	r3, [pc, #164]	; (1f050 <mmc_cmd8+0x120>)
   1efaa:	681b      	ldr	r3, [r3, #0]
   1efac:	330e      	adds	r3, #14
   1efae:	0018      	movs	r0, r3
   1efb0:	230c      	movs	r3, #12
   1efb2:	223e      	movs	r2, #62	; 0x3e
   1efb4:	2180      	movs	r1, #128	; 0x80
   1efb6:	4c27      	ldr	r4, [pc, #156]	; (1f054 <mmc_cmd8+0x124>)
   1efb8:	47a0      	blx	r4
   1efba:	0002      	movs	r2, r0
   1efbc:	4b26      	ldr	r3, [pc, #152]	; (1f058 <mmc_cmd8+0x128>)
   1efbe:	429a      	cmp	r2, r3
   1efc0:	d135      	bne.n	1f02e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1efc2:	e014      	b.n	1efee <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1efc4:	230c      	movs	r3, #12
   1efc6:	18fb      	adds	r3, r7, r3
   1efc8:	0018      	movs	r0, r3
   1efca:	4b20      	ldr	r3, [pc, #128]	; (1f04c <mmc_cmd8+0x11c>)
   1efcc:	4798      	blx	r3
   1efce:	0003      	movs	r3, r0
   1efd0:	001a      	movs	r2, r3
   1efd2:	2301      	movs	r3, #1
   1efd4:	4053      	eors	r3, r2
   1efd6:	b2db      	uxtb	r3, r3
   1efd8:	2b00      	cmp	r3, #0
   1efda:	d001      	beq.n	1efe0 <mmc_cmd8+0xb0>
				return false;
   1efdc:	2300      	movs	r3, #0
   1efde:	e02c      	b.n	1f03a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1efe0:	2316      	movs	r3, #22
   1efe2:	18fb      	adds	r3, r7, r3
   1efe4:	881a      	ldrh	r2, [r3, #0]
   1efe6:	2316      	movs	r3, #22
   1efe8:	18fb      	adds	r3, r7, r3
   1efea:	3201      	adds	r2, #1
   1efec:	801a      	strh	r2, [r3, #0]
   1efee:	2316      	movs	r3, #22
   1eff0:	18fb      	adds	r3, r7, r3
   1eff2:	881b      	ldrh	r3, [r3, #0]
   1eff4:	2b35      	cmp	r3, #53	; 0x35
   1eff6:	d9e5      	bls.n	1efc4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1eff8:	4b15      	ldr	r3, [pc, #84]	; (1f050 <mmc_cmd8+0x120>)
   1effa:	681b      	ldr	r3, [r3, #0]
   1effc:	68fa      	ldr	r2, [r7, #12]
   1effe:	0852      	lsrs	r2, r2, #1
   1f000:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f002:	e014      	b.n	1f02e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f004:	230c      	movs	r3, #12
   1f006:	18fb      	adds	r3, r7, r3
   1f008:	0018      	movs	r0, r3
   1f00a:	4b10      	ldr	r3, [pc, #64]	; (1f04c <mmc_cmd8+0x11c>)
   1f00c:	4798      	blx	r3
   1f00e:	0003      	movs	r3, r0
   1f010:	001a      	movs	r2, r3
   1f012:	2301      	movs	r3, #1
   1f014:	4053      	eors	r3, r2
   1f016:	b2db      	uxtb	r3, r3
   1f018:	2b00      	cmp	r3, #0
   1f01a:	d001      	beq.n	1f020 <mmc_cmd8+0xf0>
			return false;
   1f01c:	2300      	movs	r3, #0
   1f01e:	e00c      	b.n	1f03a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f020:	2316      	movs	r3, #22
   1f022:	18fb      	adds	r3, r7, r3
   1f024:	881a      	ldrh	r2, [r3, #0]
   1f026:	2316      	movs	r3, #22
   1f028:	18fb      	adds	r3, r7, r3
   1f02a:	3201      	adds	r2, #1
   1f02c:	801a      	strh	r2, [r3, #0]
   1f02e:	2316      	movs	r3, #22
   1f030:	18fb      	adds	r3, r7, r3
   1f032:	881b      	ldrh	r3, [r3, #0]
   1f034:	2b7f      	cmp	r3, #127	; 0x7f
   1f036:	d9e5      	bls.n	1f004 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f038:	2301      	movs	r3, #1
}
   1f03a:	0018      	movs	r0, r3
   1f03c:	46bd      	mov	sp, r7
   1f03e:	b007      	add	sp, #28
   1f040:	bd90      	pop	{r4, r7, pc}
   1f042:	46c0      	nop			; (mov r8, r8)
   1f044:	00081108 	.word	0x00081108
   1f048:	000207c9 	.word	0x000207c9
   1f04c:	000209f5 	.word	0x000209f5
   1f050:	20004248 	.word	0x20004248
   1f054:	0001ebc9 	.word	0x0001ebc9
   1f058:	00000fff 	.word	0x00000fff

0001f05c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f05c:	b590      	push	{r4, r7, lr}
   1f05e:	b083      	sub	sp, #12
   1f060:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f062:	4b15      	ldr	r3, [pc, #84]	; (1f0b8 <sd_mmc_cmd9_spi+0x5c>)
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	891b      	ldrh	r3, [r3, #8]
   1f068:	0419      	lsls	r1, r3, #16
   1f06a:	4814      	ldr	r0, [pc, #80]	; (1f0bc <sd_mmc_cmd9_spi+0x60>)
   1f06c:	2301      	movs	r3, #1
   1f06e:	9300      	str	r3, [sp, #0]
   1f070:	2301      	movs	r3, #1
   1f072:	2210      	movs	r2, #16
   1f074:	4c12      	ldr	r4, [pc, #72]	; (1f0c0 <sd_mmc_cmd9_spi+0x64>)
   1f076:	47a0      	blx	r4
   1f078:	0003      	movs	r3, r0
   1f07a:	001a      	movs	r2, r3
   1f07c:	2301      	movs	r3, #1
   1f07e:	4053      	eors	r3, r2
   1f080:	b2db      	uxtb	r3, r3
   1f082:	2b00      	cmp	r3, #0
   1f084:	d001      	beq.n	1f08a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f086:	2300      	movs	r3, #0
   1f088:	e012      	b.n	1f0b0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f08a:	4b0b      	ldr	r3, [pc, #44]	; (1f0b8 <sd_mmc_cmd9_spi+0x5c>)
   1f08c:	681b      	ldr	r3, [r3, #0]
   1f08e:	330e      	adds	r3, #14
   1f090:	2101      	movs	r1, #1
   1f092:	0018      	movs	r0, r3
   1f094:	4b0b      	ldr	r3, [pc, #44]	; (1f0c4 <sd_mmc_cmd9_spi+0x68>)
   1f096:	4798      	blx	r3
   1f098:	0003      	movs	r3, r0
   1f09a:	001a      	movs	r2, r3
   1f09c:	2301      	movs	r3, #1
   1f09e:	4053      	eors	r3, r2
   1f0a0:	b2db      	uxtb	r3, r3
   1f0a2:	2b00      	cmp	r3, #0
   1f0a4:	d001      	beq.n	1f0aa <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f0a6:	2300      	movs	r3, #0
   1f0a8:	e002      	b.n	1f0b0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f0aa:	4b07      	ldr	r3, [pc, #28]	; (1f0c8 <sd_mmc_cmd9_spi+0x6c>)
   1f0ac:	4798      	blx	r3
   1f0ae:	0003      	movs	r3, r0
}
   1f0b0:	0018      	movs	r0, r3
   1f0b2:	46bd      	mov	sp, r7
   1f0b4:	b001      	add	sp, #4
   1f0b6:	bd90      	pop	{r4, r7, pc}
   1f0b8:	20004248 	.word	0x20004248
   1f0bc:	00081109 	.word	0x00081109
   1f0c0:	000207c9 	.word	0x000207c9
   1f0c4:	00020a99 	.word	0x00020a99
   1f0c8:	00020b3d 	.word	0x00020b3d

0001f0cc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f0cc:	b5b0      	push	{r4, r5, r7, lr}
   1f0ce:	b084      	sub	sp, #16
   1f0d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f0d2:	4b45      	ldr	r3, [pc, #276]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f0d4:	681b      	ldr	r3, [r3, #0]
   1f0d6:	330e      	adds	r3, #14
   1f0d8:	0018      	movs	r0, r3
   1f0da:	2304      	movs	r3, #4
   1f0dc:	227a      	movs	r2, #122	; 0x7a
   1f0de:	2180      	movs	r1, #128	; 0x80
   1f0e0:	4c42      	ldr	r4, [pc, #264]	; (1f1ec <mmc_decode_csd+0x120>)
   1f0e2:	47a0      	blx	r4
   1f0e4:	0003      	movs	r3, r0
   1f0e6:	2b02      	cmp	r3, #2
   1f0e8:	d011      	beq.n	1f10e <mmc_decode_csd+0x42>
   1f0ea:	d802      	bhi.n	1f0f2 <mmc_decode_csd+0x26>
   1f0ec:	2b01      	cmp	r3, #1
   1f0ee:	d009      	beq.n	1f104 <mmc_decode_csd+0x38>
   1f0f0:	e003      	b.n	1f0fa <mmc_decode_csd+0x2e>
   1f0f2:	2b03      	cmp	r3, #3
   1f0f4:	d010      	beq.n	1f118 <mmc_decode_csd+0x4c>
   1f0f6:	2b04      	cmp	r3, #4
   1f0f8:	d013      	beq.n	1f122 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f0fa:	4b3b      	ldr	r3, [pc, #236]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f0fc:	681b      	ldr	r3, [r3, #0]
   1f0fe:	2212      	movs	r2, #18
   1f100:	731a      	strb	r2, [r3, #12]
		break;
   1f102:	e013      	b.n	1f12c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f104:	4b38      	ldr	r3, [pc, #224]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f106:	681b      	ldr	r3, [r3, #0]
   1f108:	2214      	movs	r2, #20
   1f10a:	731a      	strb	r2, [r3, #12]
		break;
   1f10c:	e00e      	b.n	1f12c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f10e:	4b36      	ldr	r3, [pc, #216]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f110:	681b      	ldr	r3, [r3, #0]
   1f112:	2222      	movs	r2, #34	; 0x22
   1f114:	731a      	strb	r2, [r3, #12]
		break;
   1f116:	e009      	b.n	1f12c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f118:	4b33      	ldr	r3, [pc, #204]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f11a:	681b      	ldr	r3, [r3, #0]
   1f11c:	2230      	movs	r2, #48	; 0x30
   1f11e:	731a      	strb	r2, [r3, #12]
		break;
   1f120:	e004      	b.n	1f12c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f122:	4b31      	ldr	r3, [pc, #196]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f124:	681b      	ldr	r3, [r3, #0]
   1f126:	2240      	movs	r2, #64	; 0x40
   1f128:	731a      	strb	r2, [r3, #12]
		break;
   1f12a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f12c:	4b2e      	ldr	r3, [pc, #184]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f12e:	681b      	ldr	r3, [r3, #0]
   1f130:	330e      	adds	r3, #14
   1f132:	0018      	movs	r0, r3
   1f134:	2308      	movs	r3, #8
   1f136:	2260      	movs	r2, #96	; 0x60
   1f138:	2180      	movs	r1, #128	; 0x80
   1f13a:	4c2c      	ldr	r4, [pc, #176]	; (1f1ec <mmc_decode_csd+0x120>)
   1f13c:	47a0      	blx	r4
   1f13e:	0003      	movs	r3, r0
   1f140:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f142:	68fb      	ldr	r3, [r7, #12]
   1f144:	2207      	movs	r2, #7
   1f146:	401a      	ands	r2, r3
   1f148:	4b29      	ldr	r3, [pc, #164]	; (1f1f0 <mmc_decode_csd+0x124>)
   1f14a:	0092      	lsls	r2, r2, #2
   1f14c:	58d3      	ldr	r3, [r2, r3]
   1f14e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f150:	68fb      	ldr	r3, [r7, #12]
   1f152:	08db      	lsrs	r3, r3, #3
   1f154:	220f      	movs	r2, #15
   1f156:	401a      	ands	r2, r3
   1f158:	4b26      	ldr	r3, [pc, #152]	; (1f1f4 <mmc_decode_csd+0x128>)
   1f15a:	0092      	lsls	r2, r2, #2
   1f15c:	58d3      	ldr	r3, [r2, r3]
   1f15e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f160:	4b21      	ldr	r3, [pc, #132]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f162:	681b      	ldr	r3, [r3, #0]
   1f164:	68ba      	ldr	r2, [r7, #8]
   1f166:	6879      	ldr	r1, [r7, #4]
   1f168:	434a      	muls	r2, r1
   1f16a:	21fa      	movs	r1, #250	; 0xfa
   1f16c:	0089      	lsls	r1, r1, #2
   1f16e:	434a      	muls	r2, r1
   1f170:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f172:	4b1d      	ldr	r3, [pc, #116]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f174:	681b      	ldr	r3, [r3, #0]
   1f176:	330e      	adds	r3, #14
   1f178:	0018      	movs	r0, r3
   1f17a:	230c      	movs	r3, #12
   1f17c:	223e      	movs	r2, #62	; 0x3e
   1f17e:	2180      	movs	r1, #128	; 0x80
   1f180:	4c1a      	ldr	r4, [pc, #104]	; (1f1ec <mmc_decode_csd+0x120>)
   1f182:	47a0      	blx	r4
   1f184:	0002      	movs	r2, r0
   1f186:	4b1c      	ldr	r3, [pc, #112]	; (1f1f8 <mmc_decode_csd+0x12c>)
   1f188:	429a      	cmp	r2, r3
   1f18a:	d028      	beq.n	1f1de <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f18c:	4b16      	ldr	r3, [pc, #88]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f18e:	681b      	ldr	r3, [r3, #0]
   1f190:	330e      	adds	r3, #14
   1f192:	0018      	movs	r0, r3
   1f194:	230c      	movs	r3, #12
   1f196:	223e      	movs	r2, #62	; 0x3e
   1f198:	2180      	movs	r1, #128	; 0x80
   1f19a:	4c14      	ldr	r4, [pc, #80]	; (1f1ec <mmc_decode_csd+0x120>)
   1f19c:	47a0      	blx	r4
   1f19e:	0003      	movs	r3, r0
   1f1a0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f1a2:	4b11      	ldr	r3, [pc, #68]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f1a4:	681b      	ldr	r3, [r3, #0]
   1f1a6:	330e      	adds	r3, #14
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	2303      	movs	r3, #3
   1f1ac:	222f      	movs	r2, #47	; 0x2f
   1f1ae:	2180      	movs	r1, #128	; 0x80
   1f1b0:	4d0e      	ldr	r5, [pc, #56]	; (1f1ec <mmc_decode_csd+0x120>)
   1f1b2:	47a8      	blx	r5
   1f1b4:	0003      	movs	r3, r0
   1f1b6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f1b8:	409c      	lsls	r4, r3
   1f1ba:	0023      	movs	r3, r4
   1f1bc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f1be:	4b0a      	ldr	r3, [pc, #40]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f1c0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f1c2:	4b09      	ldr	r3, [pc, #36]	; (1f1e8 <mmc_decode_csd+0x11c>)
   1f1c4:	681b      	ldr	r3, [r3, #0]
   1f1c6:	330e      	adds	r3, #14
   1f1c8:	0018      	movs	r0, r3
   1f1ca:	2304      	movs	r3, #4
   1f1cc:	2250      	movs	r2, #80	; 0x50
   1f1ce:	2180      	movs	r1, #128	; 0x80
   1f1d0:	4d06      	ldr	r5, [pc, #24]	; (1f1ec <mmc_decode_csd+0x120>)
   1f1d2:	47a8      	blx	r5
   1f1d4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f1d6:	683b      	ldr	r3, [r7, #0]
   1f1d8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f1da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f1dc:	6063      	str	r3, [r4, #4]
	}
}
   1f1de:	46c0      	nop			; (mov r8, r8)
   1f1e0:	46bd      	mov	sp, r7
   1f1e2:	b004      	add	sp, #16
   1f1e4:	bdb0      	pop	{r4, r5, r7, pc}
   1f1e6:	46c0      	nop			; (mov r8, r8)
   1f1e8:	20004248 	.word	0x20004248
   1f1ec:	0001ebc9 	.word	0x0001ebc9
   1f1f0:	00039348 	.word	0x00039348
   1f1f4:	000393a4 	.word	0x000393a4
   1f1f8:	00000fff 	.word	0x00000fff

0001f1fc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f1fc:	b5b0      	push	{r4, r5, r7, lr}
   1f1fe:	b084      	sub	sp, #16
   1f200:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f202:	4b35      	ldr	r3, [pc, #212]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f204:	681b      	ldr	r3, [r3, #0]
   1f206:	330e      	adds	r3, #14
   1f208:	0018      	movs	r0, r3
   1f20a:	2308      	movs	r3, #8
   1f20c:	2260      	movs	r2, #96	; 0x60
   1f20e:	2180      	movs	r1, #128	; 0x80
   1f210:	4c32      	ldr	r4, [pc, #200]	; (1f2dc <sd_decode_csd+0xe0>)
   1f212:	47a0      	blx	r4
   1f214:	0003      	movs	r3, r0
   1f216:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f218:	68fb      	ldr	r3, [r7, #12]
   1f21a:	2207      	movs	r2, #7
   1f21c:	401a      	ands	r2, r3
   1f21e:	4b30      	ldr	r3, [pc, #192]	; (1f2e0 <sd_decode_csd+0xe4>)
   1f220:	0092      	lsls	r2, r2, #2
   1f222:	58d3      	ldr	r3, [r2, r3]
   1f224:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f226:	68fb      	ldr	r3, [r7, #12]
   1f228:	08db      	lsrs	r3, r3, #3
   1f22a:	220f      	movs	r2, #15
   1f22c:	401a      	ands	r2, r3
   1f22e:	4b2d      	ldr	r3, [pc, #180]	; (1f2e4 <sd_decode_csd+0xe8>)
   1f230:	0092      	lsls	r2, r2, #2
   1f232:	58d3      	ldr	r3, [r2, r3]
   1f234:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f236:	4b28      	ldr	r3, [pc, #160]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f238:	681b      	ldr	r3, [r3, #0]
   1f23a:	68ba      	ldr	r2, [r7, #8]
   1f23c:	6879      	ldr	r1, [r7, #4]
   1f23e:	434a      	muls	r2, r1
   1f240:	21fa      	movs	r1, #250	; 0xfa
   1f242:	0089      	lsls	r1, r1, #2
   1f244:	434a      	muls	r2, r1
   1f246:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f248:	4b23      	ldr	r3, [pc, #140]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f24a:	681b      	ldr	r3, [r3, #0]
   1f24c:	330e      	adds	r3, #14
   1f24e:	0018      	movs	r0, r3
   1f250:	2302      	movs	r3, #2
   1f252:	227e      	movs	r2, #126	; 0x7e
   1f254:	2180      	movs	r1, #128	; 0x80
   1f256:	4c21      	ldr	r4, [pc, #132]	; (1f2dc <sd_decode_csd+0xe0>)
   1f258:	47a0      	blx	r4
   1f25a:	1e03      	subs	r3, r0, #0
   1f25c:	d00f      	beq.n	1f27e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f25e:	4b1e      	ldr	r3, [pc, #120]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f260:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f262:	4b1d      	ldr	r3, [pc, #116]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f264:	681b      	ldr	r3, [r3, #0]
   1f266:	330e      	adds	r3, #14
   1f268:	0018      	movs	r0, r3
   1f26a:	2316      	movs	r3, #22
   1f26c:	2230      	movs	r2, #48	; 0x30
   1f26e:	2180      	movs	r1, #128	; 0x80
   1f270:	4d1a      	ldr	r5, [pc, #104]	; (1f2dc <sd_decode_csd+0xe0>)
   1f272:	47a8      	blx	r5
   1f274:	0003      	movs	r3, r0
				* 512;
   1f276:	3301      	adds	r3, #1
   1f278:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f27a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f27c:	e028      	b.n	1f2d0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f27e:	4b16      	ldr	r3, [pc, #88]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f280:	681b      	ldr	r3, [r3, #0]
   1f282:	330e      	adds	r3, #14
   1f284:	0018      	movs	r0, r3
   1f286:	230c      	movs	r3, #12
   1f288:	223e      	movs	r2, #62	; 0x3e
   1f28a:	2180      	movs	r1, #128	; 0x80
   1f28c:	4c13      	ldr	r4, [pc, #76]	; (1f2dc <sd_decode_csd+0xe0>)
   1f28e:	47a0      	blx	r4
   1f290:	0003      	movs	r3, r0
   1f292:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f294:	4b10      	ldr	r3, [pc, #64]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f296:	681b      	ldr	r3, [r3, #0]
   1f298:	330e      	adds	r3, #14
   1f29a:	0018      	movs	r0, r3
   1f29c:	2303      	movs	r3, #3
   1f29e:	222f      	movs	r2, #47	; 0x2f
   1f2a0:	2180      	movs	r1, #128	; 0x80
   1f2a2:	4d0e      	ldr	r5, [pc, #56]	; (1f2dc <sd_decode_csd+0xe0>)
   1f2a4:	47a8      	blx	r5
   1f2a6:	0003      	movs	r3, r0
   1f2a8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f2aa:	409c      	lsls	r4, r3
   1f2ac:	0023      	movs	r3, r4
   1f2ae:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f2b0:	4b09      	ldr	r3, [pc, #36]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f2b2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f2b4:	4b08      	ldr	r3, [pc, #32]	; (1f2d8 <sd_decode_csd+0xdc>)
   1f2b6:	681b      	ldr	r3, [r3, #0]
   1f2b8:	330e      	adds	r3, #14
   1f2ba:	0018      	movs	r0, r3
   1f2bc:	2304      	movs	r3, #4
   1f2be:	2250      	movs	r2, #80	; 0x50
   1f2c0:	2180      	movs	r1, #128	; 0x80
   1f2c2:	4d06      	ldr	r5, [pc, #24]	; (1f2dc <sd_decode_csd+0xe0>)
   1f2c4:	47a8      	blx	r5
   1f2c6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f2c8:	683b      	ldr	r3, [r7, #0]
   1f2ca:	4093      	lsls	r3, r2
				/ 1024;
   1f2cc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f2ce:	6063      	str	r3, [r4, #4]
}
   1f2d0:	46c0      	nop			; (mov r8, r8)
   1f2d2:	46bd      	mov	sp, r7
   1f2d4:	b004      	add	sp, #16
   1f2d6:	bdb0      	pop	{r4, r5, r7, pc}
   1f2d8:	20004248 	.word	0x20004248
   1f2dc:	0001ebc9 	.word	0x0001ebc9
   1f2e0:	00039348 	.word	0x00039348
   1f2e4:	00039364 	.word	0x00039364

0001f2e8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f2e8:	b580      	push	{r7, lr}
   1f2ea:	b082      	sub	sp, #8
   1f2ec:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f2ee:	4b11      	ldr	r3, [pc, #68]	; (1f334 <sd_mmc_cmd13+0x4c>)
   1f2f0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f2f2:	4b11      	ldr	r3, [pc, #68]	; (1f338 <sd_mmc_cmd13+0x50>)
   1f2f4:	2100      	movs	r1, #0
   1f2f6:	0018      	movs	r0, r3
   1f2f8:	4b10      	ldr	r3, [pc, #64]	; (1f33c <sd_mmc_cmd13+0x54>)
   1f2fa:	4798      	blx	r3
   1f2fc:	0003      	movs	r3, r0
   1f2fe:	001a      	movs	r2, r3
   1f300:	2301      	movs	r3, #1
   1f302:	4053      	eors	r3, r2
   1f304:	b2db      	uxtb	r3, r3
   1f306:	2b00      	cmp	r3, #0
   1f308:	d001      	beq.n	1f30e <sd_mmc_cmd13+0x26>
				return false;
   1f30a:	2300      	movs	r3, #0
   1f30c:	e00e      	b.n	1f32c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f30e:	4b0c      	ldr	r3, [pc, #48]	; (1f340 <sd_mmc_cmd13+0x58>)
   1f310:	4798      	blx	r3
   1f312:	0002      	movs	r2, r0
   1f314:	23ff      	movs	r3, #255	; 0xff
   1f316:	4013      	ands	r3, r2
   1f318:	d006      	beq.n	1f328 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f31a:	687b      	ldr	r3, [r7, #4]
   1f31c:	1e5a      	subs	r2, r3, #1
   1f31e:	607a      	str	r2, [r7, #4]
   1f320:	2b00      	cmp	r3, #0
   1f322:	d1e6      	bne.n	1f2f2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f324:	2300      	movs	r3, #0
   1f326:	e001      	b.n	1f32c <sd_mmc_cmd13+0x44>
				break;
   1f328:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f32a:	2301      	movs	r3, #1
}
   1f32c:	0018      	movs	r0, r3
   1f32e:	46bd      	mov	sp, r7
   1f330:	b002      	add	sp, #8
   1f332:	bd80      	pop	{r7, pc}
   1f334:	00030d40 	.word	0x00030d40
   1f338:	00001b0d 	.word	0x00001b0d
   1f33c:	000207a1 	.word	0x000207a1
   1f340:	000209e1 	.word	0x000209e1

0001f344 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f344:	b590      	push	{r4, r7, lr}
   1f346:	b085      	sub	sp, #20
   1f348:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f34a:	4b38      	ldr	r3, [pc, #224]	; (1f42c <sd_acmd51+0xe8>)
   1f34c:	681b      	ldr	r3, [r3, #0]
   1f34e:	891b      	ldrh	r3, [r3, #8]
   1f350:	041b      	lsls	r3, r3, #16
   1f352:	4a37      	ldr	r2, [pc, #220]	; (1f430 <sd_acmd51+0xec>)
   1f354:	0019      	movs	r1, r3
   1f356:	0010      	movs	r0, r2
   1f358:	4b36      	ldr	r3, [pc, #216]	; (1f434 <sd_acmd51+0xf0>)
   1f35a:	4798      	blx	r3
   1f35c:	0003      	movs	r3, r0
   1f35e:	001a      	movs	r2, r3
   1f360:	2301      	movs	r3, #1
   1f362:	4053      	eors	r3, r2
   1f364:	b2db      	uxtb	r3, r3
   1f366:	2b00      	cmp	r3, #0
   1f368:	d001      	beq.n	1f36e <sd_acmd51+0x2a>
		return false;
   1f36a:	2300      	movs	r3, #0
   1f36c:	e059      	b.n	1f422 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f36e:	4832      	ldr	r0, [pc, #200]	; (1f438 <sd_acmd51+0xf4>)
   1f370:	2301      	movs	r3, #1
   1f372:	9300      	str	r3, [sp, #0]
   1f374:	2301      	movs	r3, #1
   1f376:	2208      	movs	r2, #8
   1f378:	2100      	movs	r1, #0
   1f37a:	4c30      	ldr	r4, [pc, #192]	; (1f43c <sd_acmd51+0xf8>)
   1f37c:	47a0      	blx	r4
   1f37e:	0003      	movs	r3, r0
   1f380:	001a      	movs	r2, r3
   1f382:	2301      	movs	r3, #1
   1f384:	4053      	eors	r3, r2
   1f386:	b2db      	uxtb	r3, r3
   1f388:	2b00      	cmp	r3, #0
   1f38a:	d001      	beq.n	1f390 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f38c:	2300      	movs	r3, #0
   1f38e:	e048      	b.n	1f422 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f390:	003b      	movs	r3, r7
   1f392:	2101      	movs	r1, #1
   1f394:	0018      	movs	r0, r3
   1f396:	4b2a      	ldr	r3, [pc, #168]	; (1f440 <sd_acmd51+0xfc>)
   1f398:	4798      	blx	r3
   1f39a:	0003      	movs	r3, r0
   1f39c:	001a      	movs	r2, r3
   1f39e:	2301      	movs	r3, #1
   1f3a0:	4053      	eors	r3, r2
   1f3a2:	b2db      	uxtb	r3, r3
   1f3a4:	2b00      	cmp	r3, #0
   1f3a6:	d001      	beq.n	1f3ac <sd_acmd51+0x68>
		return false;
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	e03a      	b.n	1f422 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f3ac:	4b25      	ldr	r3, [pc, #148]	; (1f444 <sd_acmd51+0x100>)
   1f3ae:	4798      	blx	r3
   1f3b0:	0003      	movs	r3, r0
   1f3b2:	001a      	movs	r2, r3
   1f3b4:	2301      	movs	r3, #1
   1f3b6:	4053      	eors	r3, r2
   1f3b8:	b2db      	uxtb	r3, r3
   1f3ba:	2b00      	cmp	r3, #0
   1f3bc:	d001      	beq.n	1f3c2 <sd_acmd51+0x7e>
		return false;
   1f3be:	2300      	movs	r3, #0
   1f3c0:	e02f      	b.n	1f422 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f3c2:	0038      	movs	r0, r7
   1f3c4:	2304      	movs	r3, #4
   1f3c6:	2238      	movs	r2, #56	; 0x38
   1f3c8:	2140      	movs	r1, #64	; 0x40
   1f3ca:	4c1f      	ldr	r4, [pc, #124]	; (1f448 <sd_acmd51+0x104>)
   1f3cc:	47a0      	blx	r4
   1f3ce:	0003      	movs	r3, r0
   1f3d0:	2b01      	cmp	r3, #1
   1f3d2:	d008      	beq.n	1f3e6 <sd_acmd51+0xa2>
   1f3d4:	d302      	bcc.n	1f3dc <sd_acmd51+0x98>
   1f3d6:	2b02      	cmp	r3, #2
   1f3d8:	d00a      	beq.n	1f3f0 <sd_acmd51+0xac>
   1f3da:	e01c      	b.n	1f416 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f3dc:	4b13      	ldr	r3, [pc, #76]	; (1f42c <sd_acmd51+0xe8>)
   1f3de:	681b      	ldr	r3, [r3, #0]
   1f3e0:	2210      	movs	r2, #16
   1f3e2:	731a      	strb	r2, [r3, #12]
		break;
   1f3e4:	e01c      	b.n	1f420 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f3e6:	4b11      	ldr	r3, [pc, #68]	; (1f42c <sd_acmd51+0xe8>)
   1f3e8:	681b      	ldr	r3, [r3, #0]
   1f3ea:	221a      	movs	r2, #26
   1f3ec:	731a      	strb	r2, [r3, #12]
		break;
   1f3ee:	e017      	b.n	1f420 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f3f0:	0038      	movs	r0, r7
   1f3f2:	2301      	movs	r3, #1
   1f3f4:	222f      	movs	r2, #47	; 0x2f
   1f3f6:	2140      	movs	r1, #64	; 0x40
   1f3f8:	4c13      	ldr	r4, [pc, #76]	; (1f448 <sd_acmd51+0x104>)
   1f3fa:	47a0      	blx	r4
   1f3fc:	0003      	movs	r3, r0
   1f3fe:	2b01      	cmp	r3, #1
   1f400:	d104      	bne.n	1f40c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f402:	4b0a      	ldr	r3, [pc, #40]	; (1f42c <sd_acmd51+0xe8>)
   1f404:	681b      	ldr	r3, [r3, #0]
   1f406:	2230      	movs	r2, #48	; 0x30
   1f408:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f40a:	e009      	b.n	1f420 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f40c:	4b07      	ldr	r3, [pc, #28]	; (1f42c <sd_acmd51+0xe8>)
   1f40e:	681b      	ldr	r3, [r3, #0]
   1f410:	2220      	movs	r2, #32
   1f412:	731a      	strb	r2, [r3, #12]
		break;
   1f414:	e004      	b.n	1f420 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f416:	4b05      	ldr	r3, [pc, #20]	; (1f42c <sd_acmd51+0xe8>)
   1f418:	681b      	ldr	r3, [r3, #0]
   1f41a:	2210      	movs	r2, #16
   1f41c:	731a      	strb	r2, [r3, #12]
		break;
   1f41e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f420:	2301      	movs	r3, #1
}
   1f422:	0018      	movs	r0, r3
   1f424:	46bd      	mov	sp, r7
   1f426:	b003      	add	sp, #12
   1f428:	bd90      	pop	{r4, r7, pc}
   1f42a:	46c0      	nop			; (mov r8, r8)
   1f42c:	20004248 	.word	0x20004248
   1f430:	00001137 	.word	0x00001137
   1f434:	000207a1 	.word	0x000207a1
   1f438:	00081133 	.word	0x00081133
   1f43c:	000207c9 	.word	0x000207c9
   1f440:	00020a99 	.word	0x00020a99
   1f444:	00020b3d 	.word	0x00020b3d
   1f448:	0001ebc9 	.word	0x0001ebc9

0001f44c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f44c:	b580      	push	{r7, lr}
   1f44e:	b082      	sub	sp, #8
   1f450:	af00      	add	r7, sp, #0
   1f452:	0002      	movs	r2, r0
   1f454:	1dfb      	adds	r3, r7, #7
   1f456:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f458:	1dfb      	adds	r3, r7, #7
   1f45a:	781b      	ldrb	r3, [r3, #0]
   1f45c:	2b00      	cmp	r3, #0
   1f45e:	d001      	beq.n	1f464 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f460:	2304      	movs	r3, #4
   1f462:	e047      	b.n	1f4f4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f464:	1dfb      	adds	r3, r7, #7
   1f466:	781b      	ldrb	r3, [r3, #0]
   1f468:	4a24      	ldr	r2, [pc, #144]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f46a:	015b      	lsls	r3, r3, #5
   1f46c:	18d3      	adds	r3, r2, r3
   1f46e:	330a      	adds	r3, #10
   1f470:	781b      	ldrb	r3, [r3, #0]
   1f472:	2b04      	cmp	r3, #4
   1f474:	d008      	beq.n	1f488 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f476:	1dfb      	adds	r3, r7, #7
   1f478:	781b      	ldrb	r3, [r3, #0]
   1f47a:	4a20      	ldr	r2, [pc, #128]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f47c:	015b      	lsls	r3, r3, #5
   1f47e:	18d3      	adds	r3, r2, r3
   1f480:	330a      	adds	r3, #10
   1f482:	781b      	ldrb	r3, [r3, #0]
   1f484:	2b03      	cmp	r3, #3
   1f486:	d11d      	bne.n	1f4c4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f488:	1dfb      	adds	r3, r7, #7
   1f48a:	781b      	ldrb	r3, [r3, #0]
   1f48c:	4a1b      	ldr	r2, [pc, #108]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f48e:	015b      	lsls	r3, r3, #5
   1f490:	18d3      	adds	r3, r2, r3
   1f492:	330a      	adds	r3, #10
   1f494:	2202      	movs	r2, #2
   1f496:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f498:	1dfb      	adds	r3, r7, #7
   1f49a:	781a      	ldrb	r2, [r3, #0]
   1f49c:	4b17      	ldr	r3, [pc, #92]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f49e:	0152      	lsls	r2, r2, #5
   1f4a0:	4917      	ldr	r1, [pc, #92]	; (1f500 <sd_mmc_select_slot+0xb4>)
   1f4a2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f4a4:	1dfb      	adds	r3, r7, #7
   1f4a6:	781b      	ldrb	r3, [r3, #0]
   1f4a8:	4a14      	ldr	r2, [pc, #80]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f4aa:	015b      	lsls	r3, r3, #5
   1f4ac:	18d3      	adds	r3, r2, r3
   1f4ae:	330d      	adds	r3, #13
   1f4b0:	2201      	movs	r2, #1
   1f4b2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f4b4:	1dfb      	adds	r3, r7, #7
   1f4b6:	781b      	ldrb	r3, [r3, #0]
   1f4b8:	4a10      	ldr	r2, [pc, #64]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f4ba:	015b      	lsls	r3, r3, #5
   1f4bc:	18d3      	adds	r3, r2, r3
   1f4be:	331e      	adds	r3, #30
   1f4c0:	2200      	movs	r2, #0
   1f4c2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f4c4:	4b0f      	ldr	r3, [pc, #60]	; (1f504 <sd_mmc_select_slot+0xb8>)
   1f4c6:	1dfa      	adds	r2, r7, #7
   1f4c8:	7812      	ldrb	r2, [r2, #0]
   1f4ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f4cc:	1dfb      	adds	r3, r7, #7
   1f4ce:	781b      	ldrb	r3, [r3, #0]
   1f4d0:	015a      	lsls	r2, r3, #5
   1f4d2:	4b0a      	ldr	r3, [pc, #40]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f4d4:	18d2      	adds	r2, r2, r3
   1f4d6:	4b0c      	ldr	r3, [pc, #48]	; (1f508 <sd_mmc_select_slot+0xbc>)
   1f4d8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f4da:	4b0c      	ldr	r3, [pc, #48]	; (1f50c <sd_mmc_select_slot+0xc0>)
   1f4dc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f4de:	1dfb      	adds	r3, r7, #7
   1f4e0:	781b      	ldrb	r3, [r3, #0]
   1f4e2:	4a06      	ldr	r2, [pc, #24]	; (1f4fc <sd_mmc_select_slot+0xb0>)
   1f4e4:	015b      	lsls	r3, r3, #5
   1f4e6:	18d3      	adds	r3, r2, r3
   1f4e8:	330a      	adds	r3, #10
   1f4ea:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f4ec:	3b02      	subs	r3, #2
   1f4ee:	425a      	negs	r2, r3
   1f4f0:	4153      	adcs	r3, r2
   1f4f2:	b2db      	uxtb	r3, r3
}
   1f4f4:	0018      	movs	r0, r3
   1f4f6:	46bd      	mov	sp, r7
   1f4f8:	b002      	add	sp, #8
   1f4fa:	bd80      	pop	{r7, pc}
   1f4fc:	20004224 	.word	0x20004224
   1f500:	00061a80 	.word	0x00061a80
   1f504:	20004244 	.word	0x20004244
   1f508:	20004248 	.word	0x20004248
   1f50c:	0001f511 	.word	0x0001f511

0001f510 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f510:	b5b0      	push	{r4, r5, r7, lr}
   1f512:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f514:	4b09      	ldr	r3, [pc, #36]	; (1f53c <sd_mmc_configure_slot+0x2c>)
   1f516:	7818      	ldrb	r0, [r3, #0]
   1f518:	4b09      	ldr	r3, [pc, #36]	; (1f540 <sd_mmc_configure_slot+0x30>)
   1f51a:	681b      	ldr	r3, [r3, #0]
   1f51c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f51e:	4b08      	ldr	r3, [pc, #32]	; (1f540 <sd_mmc_configure_slot+0x30>)
   1f520:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f522:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f524:	4b06      	ldr	r3, [pc, #24]	; (1f540 <sd_mmc_configure_slot+0x30>)
   1f526:	681b      	ldr	r3, [r3, #0]
   1f528:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f52a:	1e5c      	subs	r4, r3, #1
   1f52c:	41a3      	sbcs	r3, r4
   1f52e:	b2db      	uxtb	r3, r3
   1f530:	4c04      	ldr	r4, [pc, #16]	; (1f544 <sd_mmc_configure_slot+0x34>)
   1f532:	47a0      	blx	r4
}
   1f534:	46c0      	nop			; (mov r8, r8)
   1f536:	46bd      	mov	sp, r7
   1f538:	bdb0      	pop	{r4, r5, r7, pc}
   1f53a:	46c0      	nop			; (mov r8, r8)
   1f53c:	20004244 	.word	0x20004244
   1f540:	20004248 	.word	0x20004248
   1f544:	00020689 	.word	0x00020689

0001f548 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f548:	b580      	push	{r7, lr}
   1f54a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f54c:	4b05      	ldr	r3, [pc, #20]	; (1f564 <sd_mmc_deselect_slot+0x1c>)
   1f54e:	781b      	ldrb	r3, [r3, #0]
   1f550:	2b00      	cmp	r3, #0
   1f552:	d104      	bne.n	1f55e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f554:	4b03      	ldr	r3, [pc, #12]	; (1f564 <sd_mmc_deselect_slot+0x1c>)
   1f556:	781b      	ldrb	r3, [r3, #0]
   1f558:	0018      	movs	r0, r3
   1f55a:	4b03      	ldr	r3, [pc, #12]	; (1f568 <sd_mmc_deselect_slot+0x20>)
   1f55c:	4798      	blx	r3
	}
}
   1f55e:	46c0      	nop			; (mov r8, r8)
   1f560:	46bd      	mov	sp, r7
   1f562:	bd80      	pop	{r7, pc}
   1f564:	20004244 	.word	0x20004244
   1f568:	00020711 	.word	0x00020711

0001f56c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f56c:	b580      	push	{r7, lr}
   1f56e:	b082      	sub	sp, #8
   1f570:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f572:	1dfb      	adds	r3, r7, #7
   1f574:	2200      	movs	r2, #0
   1f576:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f578:	4b59      	ldr	r3, [pc, #356]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f57a:	681b      	ldr	r3, [r3, #0]
   1f57c:	2201      	movs	r2, #1
   1f57e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f580:	4b57      	ldr	r3, [pc, #348]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f582:	681b      	ldr	r3, [r3, #0]
   1f584:	2200      	movs	r2, #0
   1f586:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f588:	4b55      	ldr	r3, [pc, #340]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f58a:	681b      	ldr	r3, [r3, #0]
   1f58c:	2200      	movs	r2, #0
   1f58e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f590:	4b54      	ldr	r3, [pc, #336]	; (1f6e4 <sd_mmc_spi_card_init+0x178>)
   1f592:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f594:	2388      	movs	r3, #136	; 0x88
   1f596:	015b      	lsls	r3, r3, #5
   1f598:	2100      	movs	r1, #0
   1f59a:	0018      	movs	r0, r3
   1f59c:	4b52      	ldr	r3, [pc, #328]	; (1f6e8 <sd_mmc_spi_card_init+0x17c>)
   1f59e:	4798      	blx	r3
   1f5a0:	0003      	movs	r3, r0
   1f5a2:	001a      	movs	r2, r3
   1f5a4:	2301      	movs	r3, #1
   1f5a6:	4053      	eors	r3, r2
   1f5a8:	b2db      	uxtb	r3, r3
   1f5aa:	2b00      	cmp	r3, #0
   1f5ac:	d001      	beq.n	1f5b2 <sd_mmc_spi_card_init+0x46>
		return false;
   1f5ae:	2300      	movs	r3, #0
   1f5b0:	e092      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f5b2:	1dfb      	adds	r3, r7, #7
   1f5b4:	0018      	movs	r0, r3
   1f5b6:	4b4d      	ldr	r3, [pc, #308]	; (1f6ec <sd_mmc_spi_card_init+0x180>)
   1f5b8:	4798      	blx	r3
   1f5ba:	0003      	movs	r3, r0
   1f5bc:	001a      	movs	r2, r3
   1f5be:	2301      	movs	r3, #1
   1f5c0:	4053      	eors	r3, r2
   1f5c2:	b2db      	uxtb	r3, r3
   1f5c4:	2b00      	cmp	r3, #0
   1f5c6:	d001      	beq.n	1f5cc <sd_mmc_spi_card_init+0x60>
		return false;
   1f5c8:	2300      	movs	r3, #0
   1f5ca:	e085      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f5cc:	4b48      	ldr	r3, [pc, #288]	; (1f6f0 <sd_mmc_spi_card_init+0x184>)
   1f5ce:	4798      	blx	r3
   1f5d0:	0003      	movs	r3, r0
   1f5d2:	001a      	movs	r2, r3
   1f5d4:	2301      	movs	r3, #1
   1f5d6:	4053      	eors	r3, r2
   1f5d8:	b2db      	uxtb	r3, r3
   1f5da:	2b00      	cmp	r3, #0
   1f5dc:	d001      	beq.n	1f5e2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f5de:	2300      	movs	r3, #0
   1f5e0:	e07a      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f5e2:	4b3f      	ldr	r3, [pc, #252]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f5e4:	681b      	ldr	r3, [r3, #0]
   1f5e6:	7adb      	ldrb	r3, [r3, #11]
   1f5e8:	001a      	movs	r2, r3
   1f5ea:	2301      	movs	r3, #1
   1f5ec:	4013      	ands	r3, r2
   1f5ee:	d021      	beq.n	1f634 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f5f0:	1dfb      	adds	r3, r7, #7
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	0018      	movs	r0, r3
   1f5f6:	4b3f      	ldr	r3, [pc, #252]	; (1f6f4 <sd_mmc_spi_card_init+0x188>)
   1f5f8:	4798      	blx	r3
   1f5fa:	0003      	movs	r3, r0
   1f5fc:	001a      	movs	r2, r3
   1f5fe:	2301      	movs	r3, #1
   1f600:	4053      	eors	r3, r2
   1f602:	b2db      	uxtb	r3, r3
   1f604:	2b00      	cmp	r3, #0
   1f606:	d007      	beq.n	1f618 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f608:	4b35      	ldr	r3, [pc, #212]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f60a:	681b      	ldr	r3, [r3, #0]
   1f60c:	2202      	movs	r2, #2
   1f60e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f610:	4b39      	ldr	r3, [pc, #228]	; (1f6f8 <sd_mmc_spi_card_init+0x18c>)
   1f612:	4798      	blx	r3
   1f614:	0003      	movs	r3, r0
   1f616:	e05f      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f618:	4b38      	ldr	r3, [pc, #224]	; (1f6fc <sd_mmc_spi_card_init+0x190>)
   1f61a:	2100      	movs	r1, #0
   1f61c:	0018      	movs	r0, r3
   1f61e:	4b32      	ldr	r3, [pc, #200]	; (1f6e8 <sd_mmc_spi_card_init+0x17c>)
   1f620:	4798      	blx	r3
   1f622:	0003      	movs	r3, r0
   1f624:	001a      	movs	r2, r3
   1f626:	2301      	movs	r3, #1
   1f628:	4053      	eors	r3, r2
   1f62a:	b2db      	uxtb	r3, r3
   1f62c:	2b00      	cmp	r3, #0
   1f62e:	d001      	beq.n	1f634 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f630:	2300      	movs	r3, #0
   1f632:	e051      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f634:	4b2a      	ldr	r3, [pc, #168]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f636:	681b      	ldr	r3, [r3, #0]
   1f638:	7adb      	ldrb	r3, [r3, #11]
   1f63a:	001a      	movs	r2, r3
   1f63c:	2301      	movs	r3, #1
   1f63e:	4013      	ands	r3, r2
   1f640:	d017      	beq.n	1f672 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f642:	4b2f      	ldr	r3, [pc, #188]	; (1f700 <sd_mmc_spi_card_init+0x194>)
   1f644:	4798      	blx	r3
   1f646:	0003      	movs	r3, r0
   1f648:	001a      	movs	r2, r3
   1f64a:	2301      	movs	r3, #1
   1f64c:	4053      	eors	r3, r2
   1f64e:	b2db      	uxtb	r3, r3
   1f650:	2b00      	cmp	r3, #0
   1f652:	d001      	beq.n	1f658 <sd_mmc_spi_card_init+0xec>
			return false;
   1f654:	2300      	movs	r3, #0
   1f656:	e03f      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f658:	4b2a      	ldr	r3, [pc, #168]	; (1f704 <sd_mmc_spi_card_init+0x198>)
   1f65a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f65c:	4b2a      	ldr	r3, [pc, #168]	; (1f708 <sd_mmc_spi_card_init+0x19c>)
   1f65e:	4798      	blx	r3
   1f660:	0003      	movs	r3, r0
   1f662:	001a      	movs	r2, r3
   1f664:	2301      	movs	r3, #1
   1f666:	4053      	eors	r3, r2
   1f668:	b2db      	uxtb	r3, r3
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	d001      	beq.n	1f672 <sd_mmc_spi_card_init+0x106>
			return false;
   1f66e:	2300      	movs	r3, #0
   1f670:	e032      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f672:	4b1b      	ldr	r3, [pc, #108]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f674:	681b      	ldr	r3, [r3, #0]
   1f676:	7adb      	ldrb	r3, [r3, #11]
   1f678:	001a      	movs	r2, r3
   1f67a:	2301      	movs	r3, #1
   1f67c:	4013      	ands	r3, r2
   1f67e:	d016      	beq.n	1f6ae <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f680:	4b17      	ldr	r3, [pc, #92]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f682:	681b      	ldr	r3, [r3, #0]
   1f684:	7adb      	ldrb	r3, [r3, #11]
   1f686:	001a      	movs	r2, r3
   1f688:	2308      	movs	r3, #8
   1f68a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f68c:	d10f      	bne.n	1f6ae <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f68e:	2380      	movs	r3, #128	; 0x80
   1f690:	009b      	lsls	r3, r3, #2
   1f692:	4a1e      	ldr	r2, [pc, #120]	; (1f70c <sd_mmc_spi_card_init+0x1a0>)
   1f694:	0019      	movs	r1, r3
   1f696:	0010      	movs	r0, r2
   1f698:	4b13      	ldr	r3, [pc, #76]	; (1f6e8 <sd_mmc_spi_card_init+0x17c>)
   1f69a:	4798      	blx	r3
   1f69c:	0003      	movs	r3, r0
   1f69e:	001a      	movs	r2, r3
   1f6a0:	2301      	movs	r3, #1
   1f6a2:	4053      	eors	r3, r2
   1f6a4:	b2db      	uxtb	r3, r3
   1f6a6:	2b00      	cmp	r3, #0
   1f6a8:	d001      	beq.n	1f6ae <sd_mmc_spi_card_init+0x142>
			return false;
   1f6aa:	2300      	movs	r3, #0
   1f6ac:	e014      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f6ae:	4b0c      	ldr	r3, [pc, #48]	; (1f6e0 <sd_mmc_spi_card_init+0x174>)
   1f6b0:	681b      	ldr	r3, [r3, #0]
   1f6b2:	7adb      	ldrb	r3, [r3, #11]
   1f6b4:	001a      	movs	r2, r3
   1f6b6:	2301      	movs	r3, #1
   1f6b8:	4013      	ands	r3, r2
   1f6ba:	d00a      	beq.n	1f6d2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f6bc:	4b14      	ldr	r3, [pc, #80]	; (1f710 <sd_mmc_spi_card_init+0x1a4>)
   1f6be:	4798      	blx	r3
   1f6c0:	0003      	movs	r3, r0
   1f6c2:	001a      	movs	r2, r3
   1f6c4:	2301      	movs	r3, #1
   1f6c6:	4053      	eors	r3, r2
   1f6c8:	b2db      	uxtb	r3, r3
   1f6ca:	2b00      	cmp	r3, #0
   1f6cc:	d001      	beq.n	1f6d2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f6ce:	2300      	movs	r3, #0
   1f6d0:	e002      	b.n	1f6d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f6d2:	4b10      	ldr	r3, [pc, #64]	; (1f714 <sd_mmc_spi_card_init+0x1a8>)
   1f6d4:	4798      	blx	r3
	return true;
   1f6d6:	2301      	movs	r3, #1
}
   1f6d8:	0018      	movs	r0, r3
   1f6da:	46bd      	mov	sp, r7
   1f6dc:	b002      	add	sp, #8
   1f6de:	bd80      	pop	{r7, pc}
   1f6e0:	20004248 	.word	0x20004248
   1f6e4:	00020755 	.word	0x00020755
   1f6e8:	000207a1 	.word	0x000207a1
   1f6ec:	0001eec1 	.word	0x0001eec1
   1f6f0:	0001eeb5 	.word	0x0001eeb5
   1f6f4:	0001edd1 	.word	0x0001edd1
   1f6f8:	0001f719 	.word	0x0001f719
   1f6fc:	0000113b 	.word	0x0000113b
   1f700:	0001f05d 	.word	0x0001f05d
   1f704:	0001f1fd 	.word	0x0001f1fd
   1f708:	0001f345 	.word	0x0001f345
   1f70c:	00001110 	.word	0x00001110
   1f710:	0001f2e9 	.word	0x0001f2e9
   1f714:	0001f511 	.word	0x0001f511

0001f718 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f718:	b580      	push	{r7, lr}
   1f71a:	b082      	sub	sp, #8
   1f71c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f71e:	2388      	movs	r3, #136	; 0x88
   1f720:	015b      	lsls	r3, r3, #5
   1f722:	2100      	movs	r1, #0
   1f724:	0018      	movs	r0, r3
   1f726:	4b32      	ldr	r3, [pc, #200]	; (1f7f0 <sd_mmc_spi_install_mmc+0xd8>)
   1f728:	4798      	blx	r3
   1f72a:	0003      	movs	r3, r0
   1f72c:	001a      	movs	r2, r3
   1f72e:	2301      	movs	r3, #1
   1f730:	4053      	eors	r3, r2
   1f732:	b2db      	uxtb	r3, r3
   1f734:	2b00      	cmp	r3, #0
   1f736:	d001      	beq.n	1f73c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f738:	2300      	movs	r3, #0
   1f73a:	e055      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f73c:	4b2d      	ldr	r3, [pc, #180]	; (1f7f4 <sd_mmc_spi_install_mmc+0xdc>)
   1f73e:	4798      	blx	r3
   1f740:	0003      	movs	r3, r0
   1f742:	001a      	movs	r2, r3
   1f744:	2301      	movs	r3, #1
   1f746:	4053      	eors	r3, r2
   1f748:	b2db      	uxtb	r3, r3
   1f74a:	2b00      	cmp	r3, #0
   1f74c:	d001      	beq.n	1f752 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f74e:	2300      	movs	r3, #0
   1f750:	e04a      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f752:	4b29      	ldr	r3, [pc, #164]	; (1f7f8 <sd_mmc_spi_install_mmc+0xe0>)
   1f754:	2100      	movs	r1, #0
   1f756:	0018      	movs	r0, r3
   1f758:	4b25      	ldr	r3, [pc, #148]	; (1f7f0 <sd_mmc_spi_install_mmc+0xd8>)
   1f75a:	4798      	blx	r3
   1f75c:	0003      	movs	r3, r0
   1f75e:	001a      	movs	r2, r3
   1f760:	2301      	movs	r3, #1
   1f762:	4053      	eors	r3, r2
   1f764:	b2db      	uxtb	r3, r3
   1f766:	2b00      	cmp	r3, #0
   1f768:	d001      	beq.n	1f76e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f76a:	2300      	movs	r3, #0
   1f76c:	e03c      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f76e:	4b23      	ldr	r3, [pc, #140]	; (1f7fc <sd_mmc_spi_install_mmc+0xe4>)
   1f770:	4798      	blx	r3
   1f772:	0003      	movs	r3, r0
   1f774:	001a      	movs	r2, r3
   1f776:	2301      	movs	r3, #1
   1f778:	4053      	eors	r3, r2
   1f77a:	b2db      	uxtb	r3, r3
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d001      	beq.n	1f784 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f780:	2300      	movs	r3, #0
   1f782:	e031      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f784:	4b1e      	ldr	r3, [pc, #120]	; (1f800 <sd_mmc_spi_install_mmc+0xe8>)
   1f786:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f788:	4b1e      	ldr	r3, [pc, #120]	; (1f804 <sd_mmc_spi_install_mmc+0xec>)
   1f78a:	681b      	ldr	r3, [r3, #0]
   1f78c:	7b1b      	ldrb	r3, [r3, #12]
   1f78e:	2b3f      	cmp	r3, #63	; 0x3f
   1f790:	d90c      	bls.n	1f7ac <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f792:	1dfb      	adds	r3, r7, #7
   1f794:	0018      	movs	r0, r3
   1f796:	4b1c      	ldr	r3, [pc, #112]	; (1f808 <sd_mmc_spi_install_mmc+0xf0>)
   1f798:	4798      	blx	r3
   1f79a:	0003      	movs	r3, r0
   1f79c:	001a      	movs	r2, r3
   1f79e:	2301      	movs	r3, #1
   1f7a0:	4053      	eors	r3, r2
   1f7a2:	b2db      	uxtb	r3, r3
   1f7a4:	2b00      	cmp	r3, #0
   1f7a6:	d001      	beq.n	1f7ac <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f7a8:	2300      	movs	r3, #0
   1f7aa:	e01d      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f7ac:	2380      	movs	r3, #128	; 0x80
   1f7ae:	009b      	lsls	r3, r3, #2
   1f7b0:	4a16      	ldr	r2, [pc, #88]	; (1f80c <sd_mmc_spi_install_mmc+0xf4>)
   1f7b2:	0019      	movs	r1, r3
   1f7b4:	0010      	movs	r0, r2
   1f7b6:	4b0e      	ldr	r3, [pc, #56]	; (1f7f0 <sd_mmc_spi_install_mmc+0xd8>)
   1f7b8:	4798      	blx	r3
   1f7ba:	0003      	movs	r3, r0
   1f7bc:	001a      	movs	r2, r3
   1f7be:	2301      	movs	r3, #1
   1f7c0:	4053      	eors	r3, r2
   1f7c2:	b2db      	uxtb	r3, r3
   1f7c4:	2b00      	cmp	r3, #0
   1f7c6:	d001      	beq.n	1f7cc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	e00d      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f7cc:	4b10      	ldr	r3, [pc, #64]	; (1f810 <sd_mmc_spi_install_mmc+0xf8>)
   1f7ce:	4798      	blx	r3
   1f7d0:	0003      	movs	r3, r0
   1f7d2:	001a      	movs	r2, r3
   1f7d4:	2301      	movs	r3, #1
   1f7d6:	4053      	eors	r3, r2
   1f7d8:	b2db      	uxtb	r3, r3
   1f7da:	2b00      	cmp	r3, #0
   1f7dc:	d001      	beq.n	1f7e2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f7de:	2300      	movs	r3, #0
   1f7e0:	e002      	b.n	1f7e8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f7e2:	4b0c      	ldr	r3, [pc, #48]	; (1f814 <sd_mmc_spi_install_mmc+0xfc>)
   1f7e4:	4798      	blx	r3
	return true;
   1f7e6:	2301      	movs	r3, #1
}
   1f7e8:	0018      	movs	r0, r3
   1f7ea:	46bd      	mov	sp, r7
   1f7ec:	b002      	add	sp, #8
   1f7ee:	bd80      	pop	{r7, pc}
   1f7f0:	000207a1 	.word	0x000207a1
   1f7f4:	0001ed25 	.word	0x0001ed25
   1f7f8:	0000113b 	.word	0x0000113b
   1f7fc:	0001f05d 	.word	0x0001f05d
   1f800:	0001f0cd 	.word	0x0001f0cd
   1f804:	20004248 	.word	0x20004248
   1f808:	0001ef31 	.word	0x0001ef31
   1f80c:	00001110 	.word	0x00001110
   1f810:	0001f2e9 	.word	0x0001f2e9
   1f814:	0001f511 	.word	0x0001f511

0001f818 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f818:	b580      	push	{r7, lr}
   1f81a:	b082      	sub	sp, #8
   1f81c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f81e:	1dfb      	adds	r3, r7, #7
   1f820:	2200      	movs	r2, #0
   1f822:	701a      	strb	r2, [r3, #0]
   1f824:	e00c      	b.n	1f840 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f826:	1dfb      	adds	r3, r7, #7
   1f828:	781b      	ldrb	r3, [r3, #0]
   1f82a:	4a0c      	ldr	r2, [pc, #48]	; (1f85c <sd_mmc_init+0x44>)
   1f82c:	015b      	lsls	r3, r3, #5
   1f82e:	18d3      	adds	r3, r2, r3
   1f830:	330a      	adds	r3, #10
   1f832:	2204      	movs	r2, #4
   1f834:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f836:	1dfb      	adds	r3, r7, #7
   1f838:	781a      	ldrb	r2, [r3, #0]
   1f83a:	1dfb      	adds	r3, r7, #7
   1f83c:	3201      	adds	r2, #1
   1f83e:	701a      	strb	r2, [r3, #0]
   1f840:	1dfb      	adds	r3, r7, #7
   1f842:	781b      	ldrb	r3, [r3, #0]
   1f844:	2b00      	cmp	r3, #0
   1f846:	d0ee      	beq.n	1f826 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f848:	4b05      	ldr	r3, [pc, #20]	; (1f860 <sd_mmc_init+0x48>)
   1f84a:	22ff      	movs	r2, #255	; 0xff
   1f84c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f84e:	4b05      	ldr	r3, [pc, #20]	; (1f864 <sd_mmc_init+0x4c>)
   1f850:	4798      	blx	r3
}
   1f852:	46c0      	nop			; (mov r8, r8)
   1f854:	46bd      	mov	sp, r7
   1f856:	b002      	add	sp, #8
   1f858:	bd80      	pop	{r7, pc}
   1f85a:	46c0      	nop			; (mov r8, r8)
   1f85c:	20004224 	.word	0x20004224
   1f860:	20004244 	.word	0x20004244
   1f864:	000205c1 	.word	0x000205c1

0001f868 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f868:	b590      	push	{r4, r7, lr}
   1f86a:	b085      	sub	sp, #20
   1f86c:	af00      	add	r7, sp, #0
   1f86e:	0002      	movs	r2, r0
   1f870:	1dfb      	adds	r3, r7, #7
   1f872:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f874:	230f      	movs	r3, #15
   1f876:	18fc      	adds	r4, r7, r3
   1f878:	1dfb      	adds	r3, r7, #7
   1f87a:	781b      	ldrb	r3, [r3, #0]
   1f87c:	0018      	movs	r0, r3
   1f87e:	4b13      	ldr	r3, [pc, #76]	; (1f8cc <sd_mmc_check+0x64>)
   1f880:	4798      	blx	r3
   1f882:	0003      	movs	r3, r0
   1f884:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f886:	230f      	movs	r3, #15
   1f888:	18fb      	adds	r3, r7, r3
   1f88a:	781b      	ldrb	r3, [r3, #0]
   1f88c:	2b01      	cmp	r3, #1
   1f88e:	d005      	beq.n	1f89c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f890:	4b0f      	ldr	r3, [pc, #60]	; (1f8d0 <sd_mmc_check+0x68>)
   1f892:	4798      	blx	r3
		return sd_mmc_err;
   1f894:	230f      	movs	r3, #15
   1f896:	18fb      	adds	r3, r7, r3
   1f898:	781b      	ldrb	r3, [r3, #0]
   1f89a:	e012      	b.n	1f8c2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f89c:	4b0d      	ldr	r3, [pc, #52]	; (1f8d4 <sd_mmc_check+0x6c>)
   1f89e:	4798      	blx	r3
   1f8a0:	1e03      	subs	r3, r0, #0
   1f8a2:	d007      	beq.n	1f8b4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f8a4:	4b0c      	ldr	r3, [pc, #48]	; (1f8d8 <sd_mmc_check+0x70>)
   1f8a6:	681b      	ldr	r3, [r3, #0]
   1f8a8:	2200      	movs	r2, #0
   1f8aa:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f8ac:	4b08      	ldr	r3, [pc, #32]	; (1f8d0 <sd_mmc_check+0x68>)
   1f8ae:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f8b0:	2301      	movs	r3, #1
   1f8b2:	e006      	b.n	1f8c2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f8b4:	4b08      	ldr	r3, [pc, #32]	; (1f8d8 <sd_mmc_check+0x70>)
   1f8b6:	681b      	ldr	r3, [r3, #0]
   1f8b8:	2203      	movs	r2, #3
   1f8ba:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f8bc:	4b04      	ldr	r3, [pc, #16]	; (1f8d0 <sd_mmc_check+0x68>)
   1f8be:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f8c0:	2303      	movs	r3, #3
}
   1f8c2:	0018      	movs	r0, r3
   1f8c4:	46bd      	mov	sp, r7
   1f8c6:	b005      	add	sp, #20
   1f8c8:	bd90      	pop	{r4, r7, pc}
   1f8ca:	46c0      	nop			; (mov r8, r8)
   1f8cc:	0001f44d 	.word	0x0001f44d
   1f8d0:	0001f549 	.word	0x0001f549
   1f8d4:	0001f56d 	.word	0x0001f56d
   1f8d8:	20004248 	.word	0x20004248

0001f8dc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f8dc:	b580      	push	{r7, lr}
   1f8de:	b082      	sub	sp, #8
   1f8e0:	af00      	add	r7, sp, #0
   1f8e2:	0002      	movs	r2, r0
   1f8e4:	1dfb      	adds	r3, r7, #7
   1f8e6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f8e8:	1dfb      	adds	r3, r7, #7
   1f8ea:	781b      	ldrb	r3, [r3, #0]
   1f8ec:	0018      	movs	r0, r3
   1f8ee:	4b07      	ldr	r3, [pc, #28]	; (1f90c <sd_mmc_get_type+0x30>)
   1f8f0:	4798      	blx	r3
   1f8f2:	1e03      	subs	r3, r0, #0
   1f8f4:	d001      	beq.n	1f8fa <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f8f6:	2300      	movs	r3, #0
   1f8f8:	e004      	b.n	1f904 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f8fa:	4b05      	ldr	r3, [pc, #20]	; (1f910 <sd_mmc_get_type+0x34>)
   1f8fc:	4798      	blx	r3
	return sd_mmc_card->type;
   1f8fe:	4b05      	ldr	r3, [pc, #20]	; (1f914 <sd_mmc_get_type+0x38>)
   1f900:	681b      	ldr	r3, [r3, #0]
   1f902:	7adb      	ldrb	r3, [r3, #11]
}
   1f904:	0018      	movs	r0, r3
   1f906:	46bd      	mov	sp, r7
   1f908:	b002      	add	sp, #8
   1f90a:	bd80      	pop	{r7, pc}
   1f90c:	0001f44d 	.word	0x0001f44d
   1f910:	0001f549 	.word	0x0001f549
   1f914:	20004248 	.word	0x20004248

0001f918 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f918:	b580      	push	{r7, lr}
   1f91a:	b082      	sub	sp, #8
   1f91c:	af00      	add	r7, sp, #0
   1f91e:	0002      	movs	r2, r0
   1f920:	1dfb      	adds	r3, r7, #7
   1f922:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f924:	1dfb      	adds	r3, r7, #7
   1f926:	781b      	ldrb	r3, [r3, #0]
   1f928:	0018      	movs	r0, r3
   1f92a:	4b07      	ldr	r3, [pc, #28]	; (1f948 <sd_mmc_get_capacity+0x30>)
   1f92c:	4798      	blx	r3
   1f92e:	1e03      	subs	r3, r0, #0
   1f930:	d001      	beq.n	1f936 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f932:	2300      	movs	r3, #0
   1f934:	e004      	b.n	1f940 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f936:	4b05      	ldr	r3, [pc, #20]	; (1f94c <sd_mmc_get_capacity+0x34>)
   1f938:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f93a:	4b05      	ldr	r3, [pc, #20]	; (1f950 <sd_mmc_get_capacity+0x38>)
   1f93c:	681b      	ldr	r3, [r3, #0]
   1f93e:	685b      	ldr	r3, [r3, #4]
}
   1f940:	0018      	movs	r0, r3
   1f942:	46bd      	mov	sp, r7
   1f944:	b002      	add	sp, #8
   1f946:	bd80      	pop	{r7, pc}
   1f948:	0001f44d 	.word	0x0001f44d
   1f94c:	0001f549 	.word	0x0001f549
   1f950:	20004248 	.word	0x20004248

0001f954 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f954:	b580      	push	{r7, lr}
   1f956:	b082      	sub	sp, #8
   1f958:	af00      	add	r7, sp, #0
   1f95a:	0002      	movs	r2, r0
   1f95c:	1dfb      	adds	r3, r7, #7
   1f95e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f960:	2300      	movs	r3, #0
}
   1f962:	0018      	movs	r0, r3
   1f964:	46bd      	mov	sp, r7
   1f966:	b002      	add	sp, #8
   1f968:	bd80      	pop	{r7, pc}
	...

0001f96c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f96c:	b590      	push	{r4, r7, lr}
   1f96e:	b089      	sub	sp, #36	; 0x24
   1f970:	af02      	add	r7, sp, #8
   1f972:	6039      	str	r1, [r7, #0]
   1f974:	0011      	movs	r1, r2
   1f976:	1dfb      	adds	r3, r7, #7
   1f978:	1c02      	adds	r2, r0, #0
   1f97a:	701a      	strb	r2, [r3, #0]
   1f97c:	1d3b      	adds	r3, r7, #4
   1f97e:	1c0a      	adds	r2, r1, #0
   1f980:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f982:	230f      	movs	r3, #15
   1f984:	18fc      	adds	r4, r7, r3
   1f986:	1dfb      	adds	r3, r7, #7
   1f988:	781b      	ldrb	r3, [r3, #0]
   1f98a:	0018      	movs	r0, r3
   1f98c:	4b29      	ldr	r3, [pc, #164]	; (1fa34 <sd_mmc_init_read_blocks+0xc8>)
   1f98e:	4798      	blx	r3
   1f990:	0003      	movs	r3, r0
   1f992:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f994:	230f      	movs	r3, #15
   1f996:	18fb      	adds	r3, r7, r3
   1f998:	781b      	ldrb	r3, [r3, #0]
   1f99a:	2b00      	cmp	r3, #0
   1f99c:	d003      	beq.n	1f9a6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f99e:	230f      	movs	r3, #15
   1f9a0:	18fb      	adds	r3, r7, r3
   1f9a2:	781b      	ldrb	r3, [r3, #0]
   1f9a4:	e041      	b.n	1fa2a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f9a6:	4b24      	ldr	r3, [pc, #144]	; (1fa38 <sd_mmc_init_read_blocks+0xcc>)
   1f9a8:	4798      	blx	r3
   1f9aa:	0003      	movs	r3, r0
   1f9ac:	001a      	movs	r2, r3
   1f9ae:	2301      	movs	r3, #1
   1f9b0:	4053      	eors	r3, r2
   1f9b2:	b2db      	uxtb	r3, r3
   1f9b4:	2b00      	cmp	r3, #0
   1f9b6:	d003      	beq.n	1f9c0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f9b8:	4b20      	ldr	r3, [pc, #128]	; (1fa3c <sd_mmc_init_read_blocks+0xd0>)
   1f9ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f9bc:	2305      	movs	r3, #5
   1f9be:	e034      	b.n	1fa2a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f9c0:	1d3b      	adds	r3, r7, #4
   1f9c2:	881b      	ldrh	r3, [r3, #0]
   1f9c4:	2b01      	cmp	r3, #1
   1f9c6:	d902      	bls.n	1f9ce <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f9c8:	4b1d      	ldr	r3, [pc, #116]	; (1fa40 <sd_mmc_init_read_blocks+0xd4>)
   1f9ca:	617b      	str	r3, [r7, #20]
   1f9cc:	e001      	b.n	1f9d2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f9ce:	4b1d      	ldr	r3, [pc, #116]	; (1fa44 <sd_mmc_init_read_blocks+0xd8>)
   1f9d0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f9d2:	4b1d      	ldr	r3, [pc, #116]	; (1fa48 <sd_mmc_init_read_blocks+0xdc>)
   1f9d4:	681b      	ldr	r3, [r3, #0]
   1f9d6:	7adb      	ldrb	r3, [r3, #11]
   1f9d8:	001a      	movs	r2, r3
   1f9da:	2308      	movs	r3, #8
   1f9dc:	4013      	ands	r3, r2
   1f9de:	d002      	beq.n	1f9e6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f9e0:	683b      	ldr	r3, [r7, #0]
   1f9e2:	613b      	str	r3, [r7, #16]
   1f9e4:	e002      	b.n	1f9ec <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f9e6:	683b      	ldr	r3, [r7, #0]
   1f9e8:	025b      	lsls	r3, r3, #9
   1f9ea:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f9ec:	1d3b      	adds	r3, r7, #4
   1f9ee:	881c      	ldrh	r4, [r3, #0]
   1f9f0:	2380      	movs	r3, #128	; 0x80
   1f9f2:	009a      	lsls	r2, r3, #2
   1f9f4:	6939      	ldr	r1, [r7, #16]
   1f9f6:	6978      	ldr	r0, [r7, #20]
   1f9f8:	2301      	movs	r3, #1
   1f9fa:	9300      	str	r3, [sp, #0]
   1f9fc:	0023      	movs	r3, r4
   1f9fe:	4c13      	ldr	r4, [pc, #76]	; (1fa4c <sd_mmc_init_read_blocks+0xe0>)
   1fa00:	47a0      	blx	r4
   1fa02:	0003      	movs	r3, r0
   1fa04:	001a      	movs	r2, r3
   1fa06:	2301      	movs	r3, #1
   1fa08:	4053      	eors	r3, r2
   1fa0a:	b2db      	uxtb	r3, r3
   1fa0c:	2b00      	cmp	r3, #0
   1fa0e:	d003      	beq.n	1fa18 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fa10:	4b0a      	ldr	r3, [pc, #40]	; (1fa3c <sd_mmc_init_read_blocks+0xd0>)
   1fa12:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fa14:	2305      	movs	r3, #5
   1fa16:	e008      	b.n	1fa2a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fa18:	4b0d      	ldr	r3, [pc, #52]	; (1fa50 <sd_mmc_init_read_blocks+0xe4>)
   1fa1a:	1d3a      	adds	r2, r7, #4
   1fa1c:	8812      	ldrh	r2, [r2, #0]
   1fa1e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fa20:	4b0c      	ldr	r3, [pc, #48]	; (1fa54 <sd_mmc_init_read_blocks+0xe8>)
   1fa22:	1d3a      	adds	r2, r7, #4
   1fa24:	8812      	ldrh	r2, [r2, #0]
   1fa26:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fa28:	2300      	movs	r3, #0
}
   1fa2a:	0018      	movs	r0, r3
   1fa2c:	46bd      	mov	sp, r7
   1fa2e:	b007      	add	sp, #28
   1fa30:	bd90      	pop	{r4, r7, pc}
   1fa32:	46c0      	nop			; (mov r8, r8)
   1fa34:	0001f44d 	.word	0x0001f44d
   1fa38:	0001f2e9 	.word	0x0001f2e9
   1fa3c:	0001f549 	.word	0x0001f549
   1fa40:	00101112 	.word	0x00101112
   1fa44:	00081111 	.word	0x00081111
   1fa48:	20004248 	.word	0x20004248
   1fa4c:	000207c9 	.word	0x000207c9
   1fa50:	2000424e 	.word	0x2000424e
   1fa54:	2000424c 	.word	0x2000424c

0001fa58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fa58:	b580      	push	{r7, lr}
   1fa5a:	b082      	sub	sp, #8
   1fa5c:	af00      	add	r7, sp, #0
   1fa5e:	6078      	str	r0, [r7, #4]
   1fa60:	000a      	movs	r2, r1
   1fa62:	1cbb      	adds	r3, r7, #2
   1fa64:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fa66:	1cbb      	adds	r3, r7, #2
   1fa68:	881a      	ldrh	r2, [r3, #0]
   1fa6a:	687b      	ldr	r3, [r7, #4]
   1fa6c:	0011      	movs	r1, r2
   1fa6e:	0018      	movs	r0, r3
   1fa70:	4b0d      	ldr	r3, [pc, #52]	; (1faa8 <sd_mmc_start_read_blocks+0x50>)
   1fa72:	4798      	blx	r3
   1fa74:	0003      	movs	r3, r0
   1fa76:	001a      	movs	r2, r3
   1fa78:	2301      	movs	r3, #1
   1fa7a:	4053      	eors	r3, r2
   1fa7c:	b2db      	uxtb	r3, r3
   1fa7e:	2b00      	cmp	r3, #0
   1fa80:	d004      	beq.n	1fa8c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fa82:	4b0a      	ldr	r3, [pc, #40]	; (1faac <sd_mmc_start_read_blocks+0x54>)
   1fa84:	2200      	movs	r2, #0
   1fa86:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fa88:	2305      	movs	r3, #5
   1fa8a:	e008      	b.n	1fa9e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fa8c:	4b07      	ldr	r3, [pc, #28]	; (1faac <sd_mmc_start_read_blocks+0x54>)
   1fa8e:	881a      	ldrh	r2, [r3, #0]
   1fa90:	1cbb      	adds	r3, r7, #2
   1fa92:	881b      	ldrh	r3, [r3, #0]
   1fa94:	1ad3      	subs	r3, r2, r3
   1fa96:	b29a      	uxth	r2, r3
   1fa98:	4b04      	ldr	r3, [pc, #16]	; (1faac <sd_mmc_start_read_blocks+0x54>)
   1fa9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fa9c:	2300      	movs	r3, #0
}
   1fa9e:	0018      	movs	r0, r3
   1faa0:	46bd      	mov	sp, r7
   1faa2:	b002      	add	sp, #8
   1faa4:	bd80      	pop	{r7, pc}
   1faa6:	46c0      	nop			; (mov r8, r8)
   1faa8:	00020a99 	.word	0x00020a99
   1faac:	2000424e 	.word	0x2000424e

0001fab0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fab0:	b580      	push	{r7, lr}
   1fab2:	b082      	sub	sp, #8
   1fab4:	af00      	add	r7, sp, #0
   1fab6:	0002      	movs	r2, r0
   1fab8:	1dfb      	adds	r3, r7, #7
   1faba:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fabc:	4b1c      	ldr	r3, [pc, #112]	; (1fb30 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fabe:	4798      	blx	r3
   1fac0:	0003      	movs	r3, r0
   1fac2:	001a      	movs	r2, r3
   1fac4:	2301      	movs	r3, #1
   1fac6:	4053      	eors	r3, r2
   1fac8:	b2db      	uxtb	r3, r3
   1faca:	2b00      	cmp	r3, #0
   1facc:	d001      	beq.n	1fad2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1face:	2305      	movs	r3, #5
   1fad0:	e029      	b.n	1fb26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fad2:	1dfb      	adds	r3, r7, #7
   1fad4:	781b      	ldrb	r3, [r3, #0]
   1fad6:	2b00      	cmp	r3, #0
   1fad8:	d003      	beq.n	1fae2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fada:	4b16      	ldr	r3, [pc, #88]	; (1fb34 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fadc:	2200      	movs	r2, #0
   1fade:	801a      	strh	r2, [r3, #0]
   1fae0:	e005      	b.n	1faee <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fae2:	4b14      	ldr	r3, [pc, #80]	; (1fb34 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fae4:	881b      	ldrh	r3, [r3, #0]
   1fae6:	2b00      	cmp	r3, #0
   1fae8:	d001      	beq.n	1faee <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1faea:	2300      	movs	r3, #0
   1faec:	e01b      	b.n	1fb26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1faee:	4b12      	ldr	r3, [pc, #72]	; (1fb38 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1faf0:	881b      	ldrh	r3, [r3, #0]
   1faf2:	2b01      	cmp	r3, #1
   1faf4:	d103      	bne.n	1fafe <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1faf6:	4b11      	ldr	r3, [pc, #68]	; (1fb3c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1faf8:	4798      	blx	r3
		return SD_MMC_OK;
   1fafa:	2300      	movs	r3, #0
   1fafc:	e013      	b.n	1fb26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fafe:	4b10      	ldr	r3, [pc, #64]	; (1fb40 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fb00:	2100      	movs	r1, #0
   1fb02:	0018      	movs	r0, r3
   1fb04:	4b0f      	ldr	r3, [pc, #60]	; (1fb44 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fb06:	4798      	blx	r3
   1fb08:	0003      	movs	r3, r0
   1fb0a:	001a      	movs	r2, r3
   1fb0c:	2301      	movs	r3, #1
   1fb0e:	4053      	eors	r3, r2
   1fb10:	b2db      	uxtb	r3, r3
   1fb12:	2b00      	cmp	r3, #0
   1fb14:	d004      	beq.n	1fb20 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fb16:	4b0a      	ldr	r3, [pc, #40]	; (1fb40 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fb18:	2100      	movs	r1, #0
   1fb1a:	0018      	movs	r0, r3
   1fb1c:	4b09      	ldr	r3, [pc, #36]	; (1fb44 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fb1e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fb20:	4b06      	ldr	r3, [pc, #24]	; (1fb3c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fb22:	4798      	blx	r3
	return SD_MMC_OK;
   1fb24:	2300      	movs	r3, #0
}
   1fb26:	0018      	movs	r0, r3
   1fb28:	46bd      	mov	sp, r7
   1fb2a:	b002      	add	sp, #8
   1fb2c:	bd80      	pop	{r7, pc}
   1fb2e:	46c0      	nop			; (mov r8, r8)
   1fb30:	00020b3d 	.word	0x00020b3d
   1fb34:	2000424e 	.word	0x2000424e
   1fb38:	2000424c 	.word	0x2000424c
   1fb3c:	0001f549 	.word	0x0001f549
   1fb40:	0000310c 	.word	0x0000310c
   1fb44:	000207a1 	.word	0x000207a1

0001fb48 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fb48:	b590      	push	{r4, r7, lr}
   1fb4a:	b089      	sub	sp, #36	; 0x24
   1fb4c:	af02      	add	r7, sp, #8
   1fb4e:	6039      	str	r1, [r7, #0]
   1fb50:	0011      	movs	r1, r2
   1fb52:	1dfb      	adds	r3, r7, #7
   1fb54:	1c02      	adds	r2, r0, #0
   1fb56:	701a      	strb	r2, [r3, #0]
   1fb58:	1d3b      	adds	r3, r7, #4
   1fb5a:	1c0a      	adds	r2, r1, #0
   1fb5c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fb5e:	230f      	movs	r3, #15
   1fb60:	18fc      	adds	r4, r7, r3
   1fb62:	1dfb      	adds	r3, r7, #7
   1fb64:	781b      	ldrb	r3, [r3, #0]
   1fb66:	0018      	movs	r0, r3
   1fb68:	4b28      	ldr	r3, [pc, #160]	; (1fc0c <sd_mmc_init_write_blocks+0xc4>)
   1fb6a:	4798      	blx	r3
   1fb6c:	0003      	movs	r3, r0
   1fb6e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fb70:	230f      	movs	r3, #15
   1fb72:	18fb      	adds	r3, r7, r3
   1fb74:	781b      	ldrb	r3, [r3, #0]
   1fb76:	2b00      	cmp	r3, #0
   1fb78:	d003      	beq.n	1fb82 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fb7a:	230f      	movs	r3, #15
   1fb7c:	18fb      	adds	r3, r7, r3
   1fb7e:	781b      	ldrb	r3, [r3, #0]
   1fb80:	e03f      	b.n	1fc02 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fb82:	1dfb      	adds	r3, r7, #7
   1fb84:	781b      	ldrb	r3, [r3, #0]
   1fb86:	0018      	movs	r0, r3
   1fb88:	4b21      	ldr	r3, [pc, #132]	; (1fc10 <sd_mmc_init_write_blocks+0xc8>)
   1fb8a:	4798      	blx	r3
   1fb8c:	1e03      	subs	r3, r0, #0
   1fb8e:	d003      	beq.n	1fb98 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fb90:	4b20      	ldr	r3, [pc, #128]	; (1fc14 <sd_mmc_init_write_blocks+0xcc>)
   1fb92:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fb94:	2307      	movs	r3, #7
   1fb96:	e034      	b.n	1fc02 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fb98:	1d3b      	adds	r3, r7, #4
   1fb9a:	881b      	ldrh	r3, [r3, #0]
   1fb9c:	2b01      	cmp	r3, #1
   1fb9e:	d902      	bls.n	1fba6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fba0:	4b1d      	ldr	r3, [pc, #116]	; (1fc18 <sd_mmc_init_write_blocks+0xd0>)
   1fba2:	617b      	str	r3, [r7, #20]
   1fba4:	e001      	b.n	1fbaa <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fba6:	4b1d      	ldr	r3, [pc, #116]	; (1fc1c <sd_mmc_init_write_blocks+0xd4>)
   1fba8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fbaa:	4b1d      	ldr	r3, [pc, #116]	; (1fc20 <sd_mmc_init_write_blocks+0xd8>)
   1fbac:	681b      	ldr	r3, [r3, #0]
   1fbae:	7adb      	ldrb	r3, [r3, #11]
   1fbb0:	001a      	movs	r2, r3
   1fbb2:	2308      	movs	r3, #8
   1fbb4:	4013      	ands	r3, r2
   1fbb6:	d002      	beq.n	1fbbe <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fbb8:	683b      	ldr	r3, [r7, #0]
   1fbba:	613b      	str	r3, [r7, #16]
   1fbbc:	e002      	b.n	1fbc4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fbbe:	683b      	ldr	r3, [r7, #0]
   1fbc0:	025b      	lsls	r3, r3, #9
   1fbc2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fbc4:	1d3b      	adds	r3, r7, #4
   1fbc6:	881c      	ldrh	r4, [r3, #0]
   1fbc8:	2380      	movs	r3, #128	; 0x80
   1fbca:	009a      	lsls	r2, r3, #2
   1fbcc:	6939      	ldr	r1, [r7, #16]
   1fbce:	6978      	ldr	r0, [r7, #20]
   1fbd0:	2301      	movs	r3, #1
   1fbd2:	9300      	str	r3, [sp, #0]
   1fbd4:	0023      	movs	r3, r4
   1fbd6:	4c13      	ldr	r4, [pc, #76]	; (1fc24 <sd_mmc_init_write_blocks+0xdc>)
   1fbd8:	47a0      	blx	r4
   1fbda:	0003      	movs	r3, r0
   1fbdc:	001a      	movs	r2, r3
   1fbde:	2301      	movs	r3, #1
   1fbe0:	4053      	eors	r3, r2
   1fbe2:	b2db      	uxtb	r3, r3
   1fbe4:	2b00      	cmp	r3, #0
   1fbe6:	d003      	beq.n	1fbf0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fbe8:	4b0a      	ldr	r3, [pc, #40]	; (1fc14 <sd_mmc_init_write_blocks+0xcc>)
   1fbea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fbec:	2305      	movs	r3, #5
   1fbee:	e008      	b.n	1fc02 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fbf0:	4b0d      	ldr	r3, [pc, #52]	; (1fc28 <sd_mmc_init_write_blocks+0xe0>)
   1fbf2:	1d3a      	adds	r2, r7, #4
   1fbf4:	8812      	ldrh	r2, [r2, #0]
   1fbf6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fbf8:	4b0c      	ldr	r3, [pc, #48]	; (1fc2c <sd_mmc_init_write_blocks+0xe4>)
   1fbfa:	1d3a      	adds	r2, r7, #4
   1fbfc:	8812      	ldrh	r2, [r2, #0]
   1fbfe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fc00:	2300      	movs	r3, #0
}
   1fc02:	0018      	movs	r0, r3
   1fc04:	46bd      	mov	sp, r7
   1fc06:	b007      	add	sp, #28
   1fc08:	bd90      	pop	{r4, r7, pc}
   1fc0a:	46c0      	nop			; (mov r8, r8)
   1fc0c:	0001f44d 	.word	0x0001f44d
   1fc10:	0001f955 	.word	0x0001f955
   1fc14:	0001f549 	.word	0x0001f549
   1fc18:	00109119 	.word	0x00109119
   1fc1c:	00089118 	.word	0x00089118
   1fc20:	20004248 	.word	0x20004248
   1fc24:	000207c9 	.word	0x000207c9
   1fc28:	2000424e 	.word	0x2000424e
   1fc2c:	2000424c 	.word	0x2000424c

0001fc30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fc30:	b580      	push	{r7, lr}
   1fc32:	b082      	sub	sp, #8
   1fc34:	af00      	add	r7, sp, #0
   1fc36:	6078      	str	r0, [r7, #4]
   1fc38:	000a      	movs	r2, r1
   1fc3a:	1cbb      	adds	r3, r7, #2
   1fc3c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fc3e:	1cbb      	adds	r3, r7, #2
   1fc40:	881a      	ldrh	r2, [r3, #0]
   1fc42:	687b      	ldr	r3, [r7, #4]
   1fc44:	0011      	movs	r1, r2
   1fc46:	0018      	movs	r0, r3
   1fc48:	4b0d      	ldr	r3, [pc, #52]	; (1fc80 <sd_mmc_start_write_blocks+0x50>)
   1fc4a:	4798      	blx	r3
   1fc4c:	0003      	movs	r3, r0
   1fc4e:	001a      	movs	r2, r3
   1fc50:	2301      	movs	r3, #1
   1fc52:	4053      	eors	r3, r2
   1fc54:	b2db      	uxtb	r3, r3
   1fc56:	2b00      	cmp	r3, #0
   1fc58:	d004      	beq.n	1fc64 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fc5a:	4b0a      	ldr	r3, [pc, #40]	; (1fc84 <sd_mmc_start_write_blocks+0x54>)
   1fc5c:	2200      	movs	r2, #0
   1fc5e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fc60:	2305      	movs	r3, #5
   1fc62:	e008      	b.n	1fc76 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fc64:	4b07      	ldr	r3, [pc, #28]	; (1fc84 <sd_mmc_start_write_blocks+0x54>)
   1fc66:	881a      	ldrh	r2, [r3, #0]
   1fc68:	1cbb      	adds	r3, r7, #2
   1fc6a:	881b      	ldrh	r3, [r3, #0]
   1fc6c:	1ad3      	subs	r3, r2, r3
   1fc6e:	b29a      	uxth	r2, r3
   1fc70:	4b04      	ldr	r3, [pc, #16]	; (1fc84 <sd_mmc_start_write_blocks+0x54>)
   1fc72:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fc74:	2300      	movs	r3, #0
}
   1fc76:	0018      	movs	r0, r3
   1fc78:	46bd      	mov	sp, r7
   1fc7a:	b002      	add	sp, #8
   1fc7c:	bd80      	pop	{r7, pc}
   1fc7e:	46c0      	nop			; (mov r8, r8)
   1fc80:	00020b49 	.word	0x00020b49
   1fc84:	2000424e 	.word	0x2000424e

0001fc88 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fc88:	b580      	push	{r7, lr}
   1fc8a:	b082      	sub	sp, #8
   1fc8c:	af00      	add	r7, sp, #0
   1fc8e:	0002      	movs	r2, r0
   1fc90:	1dfb      	adds	r3, r7, #7
   1fc92:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fc94:	4b13      	ldr	r3, [pc, #76]	; (1fce4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fc96:	4798      	blx	r3
   1fc98:	0003      	movs	r3, r0
   1fc9a:	001a      	movs	r2, r3
   1fc9c:	2301      	movs	r3, #1
   1fc9e:	4053      	eors	r3, r2
   1fca0:	b2db      	uxtb	r3, r3
   1fca2:	2b00      	cmp	r3, #0
   1fca4:	d001      	beq.n	1fcaa <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fca6:	2305      	movs	r3, #5
   1fca8:	e018      	b.n	1fcdc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fcaa:	1dfb      	adds	r3, r7, #7
   1fcac:	781b      	ldrb	r3, [r3, #0]
   1fcae:	2b00      	cmp	r3, #0
   1fcb0:	d003      	beq.n	1fcba <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fcb2:	4b0d      	ldr	r3, [pc, #52]	; (1fce8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fcb4:	2200      	movs	r2, #0
   1fcb6:	801a      	strh	r2, [r3, #0]
   1fcb8:	e005      	b.n	1fcc6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fcba:	4b0b      	ldr	r3, [pc, #44]	; (1fce8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fcbc:	881b      	ldrh	r3, [r3, #0]
   1fcbe:	2b00      	cmp	r3, #0
   1fcc0:	d001      	beq.n	1fcc6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fcc2:	2300      	movs	r3, #0
   1fcc4:	e00a      	b.n	1fcdc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fcc6:	4b09      	ldr	r3, [pc, #36]	; (1fcec <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fcc8:	881b      	ldrh	r3, [r3, #0]
   1fcca:	2b01      	cmp	r3, #1
   1fccc:	d103      	bne.n	1fcd6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fcce:	4b08      	ldr	r3, [pc, #32]	; (1fcf0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fcd0:	4798      	blx	r3
		return SD_MMC_OK;
   1fcd2:	2300      	movs	r3, #0
   1fcd4:	e002      	b.n	1fcdc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fcd6:	4b06      	ldr	r3, [pc, #24]	; (1fcf0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fcd8:	4798      	blx	r3
	return SD_MMC_OK;
   1fcda:	2300      	movs	r3, #0
}
   1fcdc:	0018      	movs	r0, r3
   1fcde:	46bd      	mov	sp, r7
   1fce0:	b002      	add	sp, #8
   1fce2:	bd80      	pop	{r7, pc}
   1fce4:	00020c09 	.word	0x00020c09
   1fce8:	2000424e 	.word	0x2000424e
   1fcec:	2000424c 	.word	0x2000424c
   1fcf0:	0001f549 	.word	0x0001f549

0001fcf4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fcf4:	b580      	push	{r7, lr}
   1fcf6:	b082      	sub	sp, #8
   1fcf8:	af00      	add	r7, sp, #0
   1fcfa:	0002      	movs	r2, r0
   1fcfc:	1dfb      	adds	r3, r7, #7
   1fcfe:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1fd00:	1dfb      	adds	r3, r7, #7
   1fd02:	781b      	ldrb	r3, [r3, #0]
   1fd04:	0018      	movs	r0, r3
   1fd06:	4b16      	ldr	r3, [pc, #88]	; (1fd60 <sd_mmc_test_unit_ready+0x6c>)
   1fd08:	4798      	blx	r3
   1fd0a:	0003      	movs	r3, r0
   1fd0c:	2b01      	cmp	r3, #1
   1fd0e:	d019      	beq.n	1fd44 <sd_mmc_test_unit_ready+0x50>
   1fd10:	2b02      	cmp	r3, #2
   1fd12:	d019      	beq.n	1fd48 <sd_mmc_test_unit_ready+0x54>
   1fd14:	2b00      	cmp	r3, #0
   1fd16:	d11e      	bne.n	1fd56 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1fd18:	1dfb      	adds	r3, r7, #7
   1fd1a:	781b      	ldrb	r3, [r3, #0]
   1fd1c:	4a11      	ldr	r2, [pc, #68]	; (1fd64 <sd_mmc_test_unit_ready+0x70>)
   1fd1e:	5cd3      	ldrb	r3, [r2, r3]
   1fd20:	2b00      	cmp	r3, #0
   1fd22:	d001      	beq.n	1fd28 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fd24:	2302      	movs	r3, #2
   1fd26:	e017      	b.n	1fd58 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fd28:	1dfb      	adds	r3, r7, #7
   1fd2a:	781b      	ldrb	r3, [r3, #0]
   1fd2c:	0018      	movs	r0, r3
   1fd2e:	4b0e      	ldr	r3, [pc, #56]	; (1fd68 <sd_mmc_test_unit_ready+0x74>)
   1fd30:	4798      	blx	r3
   1fd32:	0003      	movs	r3, r0
   1fd34:	001a      	movs	r2, r3
   1fd36:	2303      	movs	r3, #3
   1fd38:	4013      	ands	r3, r2
   1fd3a:	d001      	beq.n	1fd40 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1fd3c:	2300      	movs	r3, #0
   1fd3e:	e00b      	b.n	1fd58 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1fd40:	2302      	movs	r3, #2
   1fd42:	e009      	b.n	1fd58 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1fd44:	2303      	movs	r3, #3
   1fd46:	e007      	b.n	1fd58 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1fd48:	1dfb      	adds	r3, r7, #7
   1fd4a:	781b      	ldrb	r3, [r3, #0]
   1fd4c:	4a05      	ldr	r2, [pc, #20]	; (1fd64 <sd_mmc_test_unit_ready+0x70>)
   1fd4e:	2100      	movs	r1, #0
   1fd50:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1fd52:	2302      	movs	r3, #2
   1fd54:	e000      	b.n	1fd58 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1fd56:	2301      	movs	r3, #1
	}
}
   1fd58:	0018      	movs	r0, r3
   1fd5a:	46bd      	mov	sp, r7
   1fd5c:	b002      	add	sp, #8
   1fd5e:	bd80      	pop	{r7, pc}
   1fd60:	0001f869 	.word	0x0001f869
   1fd64:	20004250 	.word	0x20004250
   1fd68:	0001f8dd 	.word	0x0001f8dd

0001fd6c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1fd6c:	b580      	push	{r7, lr}
   1fd6e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1fd70:	2000      	movs	r0, #0
   1fd72:	4b03      	ldr	r3, [pc, #12]	; (1fd80 <sd_mmc_test_unit_ready_0+0x14>)
   1fd74:	4798      	blx	r3
   1fd76:	0003      	movs	r3, r0
}
   1fd78:	0018      	movs	r0, r3
   1fd7a:	46bd      	mov	sp, r7
   1fd7c:	bd80      	pop	{r7, pc}
   1fd7e:	46c0      	nop			; (mov r8, r8)
   1fd80:	0001fcf5 	.word	0x0001fcf5

0001fd84 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1fd84:	b580      	push	{r7, lr}
   1fd86:	b082      	sub	sp, #8
   1fd88:	af00      	add	r7, sp, #0
   1fd8a:	0002      	movs	r2, r0
   1fd8c:	6039      	str	r1, [r7, #0]
   1fd8e:	1dfb      	adds	r3, r7, #7
   1fd90:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1fd92:	1dfb      	adds	r3, r7, #7
   1fd94:	781b      	ldrb	r3, [r3, #0]
   1fd96:	0018      	movs	r0, r3
   1fd98:	4b08      	ldr	r3, [pc, #32]	; (1fdbc <sd_mmc_read_capacity+0x38>)
   1fd9a:	4798      	blx	r3
   1fd9c:	0003      	movs	r3, r0
   1fd9e:	005b      	lsls	r3, r3, #1
   1fda0:	1e5a      	subs	r2, r3, #1
   1fda2:	683b      	ldr	r3, [r7, #0]
   1fda4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1fda6:	1dfb      	adds	r3, r7, #7
   1fda8:	781b      	ldrb	r3, [r3, #0]
   1fdaa:	0018      	movs	r0, r3
   1fdac:	4b04      	ldr	r3, [pc, #16]	; (1fdc0 <sd_mmc_read_capacity+0x3c>)
   1fdae:	4798      	blx	r3
   1fdb0:	0003      	movs	r3, r0
}
   1fdb2:	0018      	movs	r0, r3
   1fdb4:	46bd      	mov	sp, r7
   1fdb6:	b002      	add	sp, #8
   1fdb8:	bd80      	pop	{r7, pc}
   1fdba:	46c0      	nop			; (mov r8, r8)
   1fdbc:	0001f919 	.word	0x0001f919
   1fdc0:	0001fcf5 	.word	0x0001fcf5

0001fdc4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1fdc4:	b580      	push	{r7, lr}
   1fdc6:	b082      	sub	sp, #8
   1fdc8:	af00      	add	r7, sp, #0
   1fdca:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1fdcc:	687b      	ldr	r3, [r7, #4]
   1fdce:	0019      	movs	r1, r3
   1fdd0:	2000      	movs	r0, #0
   1fdd2:	4b03      	ldr	r3, [pc, #12]	; (1fde0 <sd_mmc_read_capacity_0+0x1c>)
   1fdd4:	4798      	blx	r3
   1fdd6:	0003      	movs	r3, r0
}
   1fdd8:	0018      	movs	r0, r3
   1fdda:	46bd      	mov	sp, r7
   1fddc:	b002      	add	sp, #8
   1fdde:	bd80      	pop	{r7, pc}
   1fde0:	0001fd85 	.word	0x0001fd85

0001fde4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1fde4:	b580      	push	{r7, lr}
   1fde6:	b082      	sub	sp, #8
   1fde8:	af00      	add	r7, sp, #0
   1fdea:	0002      	movs	r2, r0
   1fdec:	1dfb      	adds	r3, r7, #7
   1fdee:	701a      	strb	r2, [r3, #0]
   1fdf0:	1dbb      	adds	r3, r7, #6
   1fdf2:	1c0a      	adds	r2, r1, #0
   1fdf4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1fdf6:	1dfb      	adds	r3, r7, #7
   1fdf8:	781b      	ldrb	r3, [r3, #0]
   1fdfa:	4a04      	ldr	r2, [pc, #16]	; (1fe0c <sd_mmc_unload+0x28>)
   1fdfc:	1db9      	adds	r1, r7, #6
   1fdfe:	7809      	ldrb	r1, [r1, #0]
   1fe00:	54d1      	strb	r1, [r2, r3]
	return true;
   1fe02:	2301      	movs	r3, #1
}
   1fe04:	0018      	movs	r0, r3
   1fe06:	46bd      	mov	sp, r7
   1fe08:	b002      	add	sp, #8
   1fe0a:	bd80      	pop	{r7, pc}
   1fe0c:	20004250 	.word	0x20004250

0001fe10 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1fe10:	b580      	push	{r7, lr}
   1fe12:	b082      	sub	sp, #8
   1fe14:	af00      	add	r7, sp, #0
   1fe16:	0002      	movs	r2, r0
   1fe18:	1dfb      	adds	r3, r7, #7
   1fe1a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1fe1c:	1dfb      	adds	r3, r7, #7
   1fe1e:	781b      	ldrb	r3, [r3, #0]
   1fe20:	0019      	movs	r1, r3
   1fe22:	2000      	movs	r0, #0
   1fe24:	4b03      	ldr	r3, [pc, #12]	; (1fe34 <sd_mmc_unload_0+0x24>)
   1fe26:	4798      	blx	r3
   1fe28:	0003      	movs	r3, r0
}
   1fe2a:	0018      	movs	r0, r3
   1fe2c:	46bd      	mov	sp, r7
   1fe2e:	b002      	add	sp, #8
   1fe30:	bd80      	pop	{r7, pc}
   1fe32:	46c0      	nop			; (mov r8, r8)
   1fe34:	0001fde5 	.word	0x0001fde5

0001fe38 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1fe38:	b580      	push	{r7, lr}
   1fe3a:	b082      	sub	sp, #8
   1fe3c:	af00      	add	r7, sp, #0
   1fe3e:	0002      	movs	r2, r0
   1fe40:	1dfb      	adds	r3, r7, #7
   1fe42:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1fe44:	1dfb      	adds	r3, r7, #7
   1fe46:	781b      	ldrb	r3, [r3, #0]
   1fe48:	0018      	movs	r0, r3
   1fe4a:	4b03      	ldr	r3, [pc, #12]	; (1fe58 <sd_mmc_wr_protect+0x20>)
   1fe4c:	4798      	blx	r3
   1fe4e:	0003      	movs	r3, r0
}
   1fe50:	0018      	movs	r0, r3
   1fe52:	46bd      	mov	sp, r7
   1fe54:	b002      	add	sp, #8
   1fe56:	bd80      	pop	{r7, pc}
   1fe58:	0001f955 	.word	0x0001f955

0001fe5c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1fe5c:	b580      	push	{r7, lr}
   1fe5e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1fe60:	2000      	movs	r0, #0
   1fe62:	4b03      	ldr	r3, [pc, #12]	; (1fe70 <sd_mmc_wr_protect_0+0x14>)
   1fe64:	4798      	blx	r3
   1fe66:	0003      	movs	r3, r0
}
   1fe68:	0018      	movs	r0, r3
   1fe6a:	46bd      	mov	sp, r7
   1fe6c:	bd80      	pop	{r7, pc}
   1fe6e:	46c0      	nop			; (mov r8, r8)
   1fe70:	0001fe39 	.word	0x0001fe39

0001fe74 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1fe74:	b580      	push	{r7, lr}
   1fe76:	b082      	sub	sp, #8
   1fe78:	af00      	add	r7, sp, #0
   1fe7a:	0002      	movs	r2, r0
   1fe7c:	1dfb      	adds	r3, r7, #7
   1fe7e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fe80:	2301      	movs	r3, #1
}
   1fe82:	0018      	movs	r0, r3
   1fe84:	46bd      	mov	sp, r7
   1fe86:	b002      	add	sp, #8
   1fe88:	bd80      	pop	{r7, pc}
	...

0001fe8c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fe8c:	b580      	push	{r7, lr}
   1fe8e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1fe90:	2000      	movs	r0, #0
   1fe92:	4b03      	ldr	r3, [pc, #12]	; (1fea0 <sd_mmc_removal_0+0x14>)
   1fe94:	4798      	blx	r3
   1fe96:	0003      	movs	r3, r0
}
   1fe98:	0018      	movs	r0, r3
   1fe9a:	46bd      	mov	sp, r7
   1fe9c:	bd80      	pop	{r7, pc}
   1fe9e:	46c0      	nop			; (mov r8, r8)
   1fea0:	0001fe75 	.word	0x0001fe75

0001fea4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1fea4:	b580      	push	{r7, lr}
   1fea6:	b084      	sub	sp, #16
   1fea8:	af00      	add	r7, sp, #0
   1feaa:	60b9      	str	r1, [r7, #8]
   1feac:	607a      	str	r2, [r7, #4]
   1feae:	230f      	movs	r3, #15
   1feb0:	18fb      	adds	r3, r7, r3
   1feb2:	1c02      	adds	r2, r0, #0
   1feb4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1feb6:	68b9      	ldr	r1, [r7, #8]
   1feb8:	230f      	movs	r3, #15
   1feba:	18fb      	adds	r3, r7, r3
   1febc:	781b      	ldrb	r3, [r3, #0]
   1febe:	2201      	movs	r2, #1
   1fec0:	0018      	movs	r0, r3
   1fec2:	4b10      	ldr	r3, [pc, #64]	; (1ff04 <sd_mmc_mem_2_ram+0x60>)
   1fec4:	4798      	blx	r3
   1fec6:	1e03      	subs	r3, r0, #0
   1fec8:	d005      	beq.n	1fed6 <sd_mmc_mem_2_ram+0x32>
   1feca:	2b02      	cmp	r3, #2
   1fecc:	d101      	bne.n	1fed2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1fece:	2302      	movs	r3, #2
   1fed0:	e013      	b.n	1fefa <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1fed2:	2301      	movs	r3, #1
   1fed4:	e011      	b.n	1fefa <sd_mmc_mem_2_ram+0x56>
		break;
   1fed6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1fed8:	687b      	ldr	r3, [r7, #4]
   1feda:	2101      	movs	r1, #1
   1fedc:	0018      	movs	r0, r3
   1fede:	4b0a      	ldr	r3, [pc, #40]	; (1ff08 <sd_mmc_mem_2_ram+0x64>)
   1fee0:	4798      	blx	r3
   1fee2:	1e03      	subs	r3, r0, #0
   1fee4:	d001      	beq.n	1feea <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1fee6:	2301      	movs	r3, #1
   1fee8:	e007      	b.n	1fefa <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1feea:	2000      	movs	r0, #0
   1feec:	4b07      	ldr	r3, [pc, #28]	; (1ff0c <sd_mmc_mem_2_ram+0x68>)
   1feee:	4798      	blx	r3
   1fef0:	1e03      	subs	r3, r0, #0
   1fef2:	d001      	beq.n	1fef8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1fef4:	2301      	movs	r3, #1
   1fef6:	e000      	b.n	1fefa <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1fef8:	2300      	movs	r3, #0
}
   1fefa:	0018      	movs	r0, r3
   1fefc:	46bd      	mov	sp, r7
   1fefe:	b004      	add	sp, #16
   1ff00:	bd80      	pop	{r7, pc}
   1ff02:	46c0      	nop			; (mov r8, r8)
   1ff04:	0001f96d 	.word	0x0001f96d
   1ff08:	0001fa59 	.word	0x0001fa59
   1ff0c:	0001fab1 	.word	0x0001fab1

0001ff10 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1ff10:	b580      	push	{r7, lr}
   1ff12:	b082      	sub	sp, #8
   1ff14:	af00      	add	r7, sp, #0
   1ff16:	6078      	str	r0, [r7, #4]
   1ff18:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1ff1a:	683a      	ldr	r2, [r7, #0]
   1ff1c:	687b      	ldr	r3, [r7, #4]
   1ff1e:	0019      	movs	r1, r3
   1ff20:	2000      	movs	r0, #0
   1ff22:	4b03      	ldr	r3, [pc, #12]	; (1ff30 <sd_mmc_mem_2_ram_0+0x20>)
   1ff24:	4798      	blx	r3
   1ff26:	0003      	movs	r3, r0
}
   1ff28:	0018      	movs	r0, r3
   1ff2a:	46bd      	mov	sp, r7
   1ff2c:	b002      	add	sp, #8
   1ff2e:	bd80      	pop	{r7, pc}
   1ff30:	0001fea5 	.word	0x0001fea5

0001ff34 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1ff34:	b580      	push	{r7, lr}
   1ff36:	b084      	sub	sp, #16
   1ff38:	af00      	add	r7, sp, #0
   1ff3a:	60b9      	str	r1, [r7, #8]
   1ff3c:	607a      	str	r2, [r7, #4]
   1ff3e:	230f      	movs	r3, #15
   1ff40:	18fb      	adds	r3, r7, r3
   1ff42:	1c02      	adds	r2, r0, #0
   1ff44:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1ff46:	68b9      	ldr	r1, [r7, #8]
   1ff48:	230f      	movs	r3, #15
   1ff4a:	18fb      	adds	r3, r7, r3
   1ff4c:	781b      	ldrb	r3, [r3, #0]
   1ff4e:	2201      	movs	r2, #1
   1ff50:	0018      	movs	r0, r3
   1ff52:	4b10      	ldr	r3, [pc, #64]	; (1ff94 <sd_mmc_ram_2_mem+0x60>)
   1ff54:	4798      	blx	r3
   1ff56:	1e03      	subs	r3, r0, #0
   1ff58:	d005      	beq.n	1ff66 <sd_mmc_ram_2_mem+0x32>
   1ff5a:	2b02      	cmp	r3, #2
   1ff5c:	d101      	bne.n	1ff62 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1ff5e:	2302      	movs	r3, #2
   1ff60:	e013      	b.n	1ff8a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1ff62:	2301      	movs	r3, #1
   1ff64:	e011      	b.n	1ff8a <sd_mmc_ram_2_mem+0x56>
		break;
   1ff66:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1ff68:	687b      	ldr	r3, [r7, #4]
   1ff6a:	2101      	movs	r1, #1
   1ff6c:	0018      	movs	r0, r3
   1ff6e:	4b0a      	ldr	r3, [pc, #40]	; (1ff98 <sd_mmc_ram_2_mem+0x64>)
   1ff70:	4798      	blx	r3
   1ff72:	1e03      	subs	r3, r0, #0
   1ff74:	d001      	beq.n	1ff7a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1ff76:	2301      	movs	r3, #1
   1ff78:	e007      	b.n	1ff8a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1ff7a:	2000      	movs	r0, #0
   1ff7c:	4b07      	ldr	r3, [pc, #28]	; (1ff9c <sd_mmc_ram_2_mem+0x68>)
   1ff7e:	4798      	blx	r3
   1ff80:	1e03      	subs	r3, r0, #0
   1ff82:	d001      	beq.n	1ff88 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1ff84:	2301      	movs	r3, #1
   1ff86:	e000      	b.n	1ff8a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1ff88:	2300      	movs	r3, #0
}
   1ff8a:	0018      	movs	r0, r3
   1ff8c:	46bd      	mov	sp, r7
   1ff8e:	b004      	add	sp, #16
   1ff90:	bd80      	pop	{r7, pc}
   1ff92:	46c0      	nop			; (mov r8, r8)
   1ff94:	0001fb49 	.word	0x0001fb49
   1ff98:	0001fc31 	.word	0x0001fc31
   1ff9c:	0001fc89 	.word	0x0001fc89

0001ffa0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1ffa0:	b580      	push	{r7, lr}
   1ffa2:	b082      	sub	sp, #8
   1ffa4:	af00      	add	r7, sp, #0
   1ffa6:	6078      	str	r0, [r7, #4]
   1ffa8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1ffaa:	683a      	ldr	r2, [r7, #0]
   1ffac:	687b      	ldr	r3, [r7, #4]
   1ffae:	0019      	movs	r1, r3
   1ffb0:	2000      	movs	r0, #0
   1ffb2:	4b03      	ldr	r3, [pc, #12]	; (1ffc0 <sd_mmc_ram_2_mem_0+0x20>)
   1ffb4:	4798      	blx	r3
   1ffb6:	0003      	movs	r3, r0
}
   1ffb8:	0018      	movs	r0, r3
   1ffba:	46bd      	mov	sp, r7
   1ffbc:	b002      	add	sp, #8
   1ffbe:	bd80      	pop	{r7, pc}
   1ffc0:	0001ff35 	.word	0x0001ff35

0001ffc4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b084      	sub	sp, #16
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	0002      	movs	r2, r0
   1ffcc:	1dfb      	adds	r3, r7, #7
   1ffce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ffd0:	230f      	movs	r3, #15
   1ffd2:	18fb      	adds	r3, r7, r3
   1ffd4:	1dfa      	adds	r2, r7, #7
   1ffd6:	7812      	ldrb	r2, [r2, #0]
   1ffd8:	09d2      	lsrs	r2, r2, #7
   1ffda:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ffdc:	230e      	movs	r3, #14
   1ffde:	18fb      	adds	r3, r7, r3
   1ffe0:	1dfa      	adds	r2, r7, #7
   1ffe2:	7812      	ldrb	r2, [r2, #0]
   1ffe4:	0952      	lsrs	r2, r2, #5
   1ffe6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ffe8:	4b0d      	ldr	r3, [pc, #52]	; (20020 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ffea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1ffec:	230f      	movs	r3, #15
   1ffee:	18fb      	adds	r3, r7, r3
   1fff0:	781b      	ldrb	r3, [r3, #0]
   1fff2:	2b00      	cmp	r3, #0
   1fff4:	d10f      	bne.n	20016 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fff6:	230f      	movs	r3, #15
   1fff8:	18fb      	adds	r3, r7, r3
   1fffa:	781b      	ldrb	r3, [r3, #0]
   1fffc:	009b      	lsls	r3, r3, #2
   1fffe:	2210      	movs	r2, #16
   20000:	4694      	mov	ip, r2
   20002:	44bc      	add	ip, r7
   20004:	4463      	add	r3, ip
   20006:	3b08      	subs	r3, #8
   20008:	681a      	ldr	r2, [r3, #0]
   2000a:	230e      	movs	r3, #14
   2000c:	18fb      	adds	r3, r7, r3
   2000e:	781b      	ldrb	r3, [r3, #0]
   20010:	01db      	lsls	r3, r3, #7
   20012:	18d3      	adds	r3, r2, r3
   20014:	e000      	b.n	20018 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   20016:	2300      	movs	r3, #0
	}
}
   20018:	0018      	movs	r0, r3
   2001a:	46bd      	mov	sp, r7
   2001c:	b004      	add	sp, #16
   2001e:	bd80      	pop	{r7, pc}
   20020:	41004400 	.word	0x41004400

00020024 <system_interrupt_enable>:
{
   20024:	b580      	push	{r7, lr}
   20026:	b082      	sub	sp, #8
   20028:	af00      	add	r7, sp, #0
   2002a:	0002      	movs	r2, r0
   2002c:	1dfb      	adds	r3, r7, #7
   2002e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20030:	4b06      	ldr	r3, [pc, #24]	; (2004c <system_interrupt_enable+0x28>)
   20032:	1dfa      	adds	r2, r7, #7
   20034:	7812      	ldrb	r2, [r2, #0]
   20036:	0011      	movs	r1, r2
   20038:	221f      	movs	r2, #31
   2003a:	400a      	ands	r2, r1
   2003c:	2101      	movs	r1, #1
   2003e:	4091      	lsls	r1, r2
   20040:	000a      	movs	r2, r1
   20042:	601a      	str	r2, [r3, #0]
}
   20044:	46c0      	nop			; (mov r8, r8)
   20046:	46bd      	mov	sp, r7
   20048:	b002      	add	sp, #8
   2004a:	bd80      	pop	{r7, pc}
   2004c:	e000e100 	.word	0xe000e100

00020050 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   20050:	b580      	push	{r7, lr}
   20052:	b082      	sub	sp, #8
   20054:	af00      	add	r7, sp, #0
   20056:	0002      	movs	r2, r0
   20058:	1dfb      	adds	r3, r7, #7
   2005a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2005c:	1dfb      	adds	r3, r7, #7
   2005e:	781b      	ldrb	r3, [r3, #0]
   20060:	0018      	movs	r0, r3
   20062:	4b03      	ldr	r3, [pc, #12]	; (20070 <port_get_group_from_gpio_pin+0x20>)
   20064:	4798      	blx	r3
   20066:	0003      	movs	r3, r0
}
   20068:	0018      	movs	r0, r3
   2006a:	46bd      	mov	sp, r7
   2006c:	b002      	add	sp, #8
   2006e:	bd80      	pop	{r7, pc}
   20070:	0001ffc5 	.word	0x0001ffc5

00020074 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   20074:	b580      	push	{r7, lr}
   20076:	b082      	sub	sp, #8
   20078:	af00      	add	r7, sp, #0
   2007a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   2007c:	687b      	ldr	r3, [r7, #4]
   2007e:	2200      	movs	r2, #0
   20080:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20082:	687b      	ldr	r3, [r7, #4]
   20084:	2201      	movs	r2, #1
   20086:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20088:	687b      	ldr	r3, [r7, #4]
   2008a:	2200      	movs	r2, #0
   2008c:	709a      	strb	r2, [r3, #2]
}
   2008e:	46c0      	nop			; (mov r8, r8)
   20090:	46bd      	mov	sp, r7
   20092:	b002      	add	sp, #8
   20094:	bd80      	pop	{r7, pc}
	...

00020098 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   20098:	b580      	push	{r7, lr}
   2009a:	b084      	sub	sp, #16
   2009c:	af00      	add	r7, sp, #0
   2009e:	0002      	movs	r2, r0
   200a0:	1dfb      	adds	r3, r7, #7
   200a2:	701a      	strb	r2, [r3, #0]
   200a4:	1dbb      	adds	r3, r7, #6
   200a6:	1c0a      	adds	r2, r1, #0
   200a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   200aa:	1dfb      	adds	r3, r7, #7
   200ac:	781b      	ldrb	r3, [r3, #0]
   200ae:	0018      	movs	r0, r3
   200b0:	4b0d      	ldr	r3, [pc, #52]	; (200e8 <port_pin_set_output_level+0x50>)
   200b2:	4798      	blx	r3
   200b4:	0003      	movs	r3, r0
   200b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   200b8:	1dfb      	adds	r3, r7, #7
   200ba:	781b      	ldrb	r3, [r3, #0]
   200bc:	221f      	movs	r2, #31
   200be:	4013      	ands	r3, r2
   200c0:	2201      	movs	r2, #1
   200c2:	409a      	lsls	r2, r3
   200c4:	0013      	movs	r3, r2
   200c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   200c8:	1dbb      	adds	r3, r7, #6
   200ca:	781b      	ldrb	r3, [r3, #0]
   200cc:	2b00      	cmp	r3, #0
   200ce:	d003      	beq.n	200d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   200d0:	68fb      	ldr	r3, [r7, #12]
   200d2:	68ba      	ldr	r2, [r7, #8]
   200d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   200d6:	e002      	b.n	200de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   200d8:	68fb      	ldr	r3, [r7, #12]
   200da:	68ba      	ldr	r2, [r7, #8]
   200dc:	615a      	str	r2, [r3, #20]
}
   200de:	46c0      	nop			; (mov r8, r8)
   200e0:	46bd      	mov	sp, r7
   200e2:	b004      	add	sp, #16
   200e4:	bd80      	pop	{r7, pc}
   200e6:	46c0      	nop			; (mov r8, r8)
   200e8:	00020051 	.word	0x00020051

000200ec <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   200ec:	b580      	push	{r7, lr}
   200ee:	b084      	sub	sp, #16
   200f0:	af00      	add	r7, sp, #0
   200f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200f4:	687b      	ldr	r3, [r7, #4]
   200f6:	681b      	ldr	r3, [r3, #0]
   200f8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   200fa:	68fb      	ldr	r3, [r7, #12]
   200fc:	69db      	ldr	r3, [r3, #28]
   200fe:	1e5a      	subs	r2, r3, #1
   20100:	4193      	sbcs	r3, r2
   20102:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20104:	0018      	movs	r0, r3
   20106:	46bd      	mov	sp, r7
   20108:	b004      	add	sp, #16
   2010a:	bd80      	pop	{r7, pc}

0002010c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2010c:	b580      	push	{r7, lr}
   2010e:	b082      	sub	sp, #8
   20110:	af00      	add	r7, sp, #0
   20112:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   20114:	687b      	ldr	r3, [r7, #4]
   20116:	2201      	movs	r2, #1
   20118:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2011a:	687b      	ldr	r3, [r7, #4]
   2011c:	2200      	movs	r2, #0
   2011e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20120:	687b      	ldr	r3, [r7, #4]
   20122:	2200      	movs	r2, #0
   20124:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20126:	687b      	ldr	r3, [r7, #4]
   20128:	22c0      	movs	r2, #192	; 0xc0
   2012a:	0392      	lsls	r2, r2, #14
   2012c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2012e:	687b      	ldr	r3, [r7, #4]
   20130:	2200      	movs	r2, #0
   20132:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20134:	687b      	ldr	r3, [r7, #4]
   20136:	2200      	movs	r2, #0
   20138:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2013a:	687b      	ldr	r3, [r7, #4]
   2013c:	2201      	movs	r2, #1
   2013e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20140:	687b      	ldr	r3, [r7, #4]
   20142:	2201      	movs	r2, #1
   20144:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   20146:	687b      	ldr	r3, [r7, #4]
   20148:	2200      	movs	r2, #0
   2014a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2014c:	687b      	ldr	r3, [r7, #4]
   2014e:	2224      	movs	r2, #36	; 0x24
   20150:	2100      	movs	r1, #0
   20152:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20154:	687b      	ldr	r3, [r7, #4]
   20156:	3318      	adds	r3, #24
   20158:	220c      	movs	r2, #12
   2015a:	2100      	movs	r1, #0
   2015c:	0018      	movs	r0, r3
   2015e:	4b0a      	ldr	r3, [pc, #40]	; (20188 <spi_get_config_defaults+0x7c>)
   20160:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20162:	687b      	ldr	r3, [r7, #4]
   20164:	4a09      	ldr	r2, [pc, #36]	; (2018c <spi_get_config_defaults+0x80>)
   20166:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20168:	687b      	ldr	r3, [r7, #4]
   2016a:	2200      	movs	r2, #0
   2016c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2016e:	687b      	ldr	r3, [r7, #4]
   20170:	2200      	movs	r2, #0
   20172:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20174:	687b      	ldr	r3, [r7, #4]
   20176:	2200      	movs	r2, #0
   20178:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2017a:	687b      	ldr	r3, [r7, #4]
   2017c:	2200      	movs	r2, #0
   2017e:	635a      	str	r2, [r3, #52]	; 0x34

};
   20180:	46c0      	nop			; (mov r8, r8)
   20182:	46bd      	mov	sp, r7
   20184:	b002      	add	sp, #8
   20186:	bd80      	pop	{r7, pc}
   20188:	000356ef 	.word	0x000356ef
   2018c:	000186a0 	.word	0x000186a0

00020190 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20190:	b580      	push	{r7, lr}
   20192:	b082      	sub	sp, #8
   20194:	af00      	add	r7, sp, #0
   20196:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20198:	687b      	ldr	r3, [r7, #4]
   2019a:	220a      	movs	r2, #10
   2019c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2019e:	687b      	ldr	r3, [r7, #4]
   201a0:	2200      	movs	r2, #0
   201a2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   201a4:	687b      	ldr	r3, [r7, #4]
   201a6:	2200      	movs	r2, #0
   201a8:	709a      	strb	r2, [r3, #2]
}
   201aa:	46c0      	nop			; (mov r8, r8)
   201ac:	46bd      	mov	sp, r7
   201ae:	b002      	add	sp, #8
   201b0:	bd80      	pop	{r7, pc}
	...

000201b4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   201b4:	b580      	push	{r7, lr}
   201b6:	b084      	sub	sp, #16
   201b8:	af00      	add	r7, sp, #0
   201ba:	6078      	str	r0, [r7, #4]
   201bc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   201be:	683b      	ldr	r3, [r7, #0]
   201c0:	781a      	ldrb	r2, [r3, #0]
   201c2:	687b      	ldr	r3, [r7, #4]
   201c4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   201c6:	683b      	ldr	r3, [r7, #0]
   201c8:	785a      	ldrb	r2, [r3, #1]
   201ca:	687b      	ldr	r3, [r7, #4]
   201cc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   201ce:	683b      	ldr	r3, [r7, #0]
   201d0:	789a      	ldrb	r2, [r3, #2]
   201d2:	687b      	ldr	r3, [r7, #4]
   201d4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   201d6:	230c      	movs	r3, #12
   201d8:	18fb      	adds	r3, r7, r3
   201da:	0018      	movs	r0, r3
   201dc:	4b0b      	ldr	r3, [pc, #44]	; (2020c <spi_attach_slave+0x58>)
   201de:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   201e0:	230c      	movs	r3, #12
   201e2:	18fb      	adds	r3, r7, r3
   201e4:	2201      	movs	r2, #1
   201e6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   201e8:	687b      	ldr	r3, [r7, #4]
   201ea:	781b      	ldrb	r3, [r3, #0]
   201ec:	220c      	movs	r2, #12
   201ee:	18ba      	adds	r2, r7, r2
   201f0:	0011      	movs	r1, r2
   201f2:	0018      	movs	r0, r3
   201f4:	4b06      	ldr	r3, [pc, #24]	; (20210 <spi_attach_slave+0x5c>)
   201f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   201f8:	687b      	ldr	r3, [r7, #4]
   201fa:	781b      	ldrb	r3, [r3, #0]
   201fc:	2101      	movs	r1, #1
   201fe:	0018      	movs	r0, r3
   20200:	4b04      	ldr	r3, [pc, #16]	; (20214 <spi_attach_slave+0x60>)
   20202:	4798      	blx	r3
}
   20204:	46c0      	nop			; (mov r8, r8)
   20206:	46bd      	mov	sp, r7
   20208:	b004      	add	sp, #16
   2020a:	bd80      	pop	{r7, pc}
   2020c:	00020075 	.word	0x00020075
   20210:	000275bd 	.word	0x000275bd
   20214:	00020099 	.word	0x00020099

00020218 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20218:	b580      	push	{r7, lr}
   2021a:	b084      	sub	sp, #16
   2021c:	af00      	add	r7, sp, #0
   2021e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20220:	687b      	ldr	r3, [r7, #4]
   20222:	681b      	ldr	r3, [r3, #0]
   20224:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20226:	687b      	ldr	r3, [r7, #4]
   20228:	681b      	ldr	r3, [r3, #0]
   2022a:	0018      	movs	r0, r3
   2022c:	4b0b      	ldr	r3, [pc, #44]	; (2025c <spi_enable+0x44>)
   2022e:	4798      	blx	r3
   20230:	0003      	movs	r3, r0
   20232:	0018      	movs	r0, r3
   20234:	4b0a      	ldr	r3, [pc, #40]	; (20260 <spi_enable+0x48>)
   20236:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20238:	46c0      	nop			; (mov r8, r8)
   2023a:	687b      	ldr	r3, [r7, #4]
   2023c:	0018      	movs	r0, r3
   2023e:	4b09      	ldr	r3, [pc, #36]	; (20264 <spi_enable+0x4c>)
   20240:	4798      	blx	r3
   20242:	1e03      	subs	r3, r0, #0
   20244:	d1f9      	bne.n	2023a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20246:	68fb      	ldr	r3, [r7, #12]
   20248:	681b      	ldr	r3, [r3, #0]
   2024a:	2202      	movs	r2, #2
   2024c:	431a      	orrs	r2, r3
   2024e:	68fb      	ldr	r3, [r7, #12]
   20250:	601a      	str	r2, [r3, #0]
}
   20252:	46c0      	nop			; (mov r8, r8)
   20254:	46bd      	mov	sp, r7
   20256:	b004      	add	sp, #16
   20258:	bd80      	pop	{r7, pc}
   2025a:	46c0      	nop			; (mov r8, r8)
   2025c:	0002828d 	.word	0x0002828d
   20260:	00020025 	.word	0x00020025
   20264:	000200ed 	.word	0x000200ed

00020268 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   20268:	b580      	push	{r7, lr}
   2026a:	b084      	sub	sp, #16
   2026c:	af00      	add	r7, sp, #0
   2026e:	6078      	str	r0, [r7, #4]
   20270:	000a      	movs	r2, r1
   20272:	1cfb      	adds	r3, r7, #3
   20274:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20276:	230f      	movs	r3, #15
   20278:	18fb      	adds	r3, r7, r3
   2027a:	2200      	movs	r2, #0
   2027c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2027e:	e038      	b.n	202f2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20280:	687b      	ldr	r3, [r7, #4]
   20282:	1c5a      	adds	r2, r3, #1
   20284:	607a      	str	r2, [r7, #4]
   20286:	220e      	movs	r2, #14
   20288:	18ba      	adds	r2, r7, r2
   2028a:	781b      	ldrb	r3, [r3, #0]
   2028c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2028e:	230d      	movs	r3, #13
   20290:	18fb      	adds	r3, r7, r3
   20292:	2200      	movs	r2, #0
   20294:	701a      	strb	r2, [r3, #0]
   20296:	e027      	b.n	202e8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20298:	230f      	movs	r3, #15
   2029a:	18fa      	adds	r2, r7, r3
   2029c:	230f      	movs	r3, #15
   2029e:	18fb      	adds	r3, r7, r3
   202a0:	781b      	ldrb	r3, [r3, #0]
   202a2:	18db      	adds	r3, r3, r3
   202a4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   202a6:	230e      	movs	r3, #14
   202a8:	18fa      	adds	r2, r7, r3
   202aa:	230f      	movs	r3, #15
   202ac:	18fb      	adds	r3, r7, r3
   202ae:	7812      	ldrb	r2, [r2, #0]
   202b0:	781b      	ldrb	r3, [r3, #0]
   202b2:	4053      	eors	r3, r2
   202b4:	b2db      	uxtb	r3, r3
   202b6:	b25b      	sxtb	r3, r3
   202b8:	2b00      	cmp	r3, #0
   202ba:	da07      	bge.n	202cc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   202bc:	230f      	movs	r3, #15
   202be:	18fb      	adds	r3, r7, r3
   202c0:	220f      	movs	r2, #15
   202c2:	18ba      	adds	r2, r7, r2
   202c4:	7812      	ldrb	r2, [r2, #0]
   202c6:	2109      	movs	r1, #9
   202c8:	404a      	eors	r2, r1
   202ca:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   202cc:	230e      	movs	r3, #14
   202ce:	18fa      	adds	r2, r7, r3
   202d0:	230e      	movs	r3, #14
   202d2:	18fb      	adds	r3, r7, r3
   202d4:	781b      	ldrb	r3, [r3, #0]
   202d6:	18db      	adds	r3, r3, r3
   202d8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   202da:	230d      	movs	r3, #13
   202dc:	18fb      	adds	r3, r7, r3
   202de:	781a      	ldrb	r2, [r3, #0]
   202e0:	230d      	movs	r3, #13
   202e2:	18fb      	adds	r3, r7, r3
   202e4:	3201      	adds	r2, #1
   202e6:	701a      	strb	r2, [r3, #0]
   202e8:	230d      	movs	r3, #13
   202ea:	18fb      	adds	r3, r7, r3
   202ec:	781b      	ldrb	r3, [r3, #0]
   202ee:	2b07      	cmp	r3, #7
   202f0:	d9d2      	bls.n	20298 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   202f2:	1cfb      	adds	r3, r7, #3
   202f4:	781b      	ldrb	r3, [r3, #0]
   202f6:	1cfa      	adds	r2, r7, #3
   202f8:	1e59      	subs	r1, r3, #1
   202fa:	7011      	strb	r1, [r2, #0]
   202fc:	2b00      	cmp	r3, #0
   202fe:	d1bf      	bne.n	20280 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20300:	230f      	movs	r3, #15
   20302:	18fb      	adds	r3, r7, r3
   20304:	781b      	ldrb	r3, [r3, #0]
   20306:	005b      	lsls	r3, r3, #1
   20308:	b25b      	sxtb	r3, r3
   2030a:	2201      	movs	r2, #1
   2030c:	4313      	orrs	r3, r2
   2030e:	b25a      	sxtb	r2, r3
   20310:	230f      	movs	r3, #15
   20312:	18fb      	adds	r3, r7, r3
   20314:	701a      	strb	r2, [r3, #0]
	return crc;
   20316:	230f      	movs	r3, #15
   20318:	18fb      	adds	r3, r7, r3
   2031a:	781b      	ldrb	r3, [r3, #0]
}
   2031c:	0018      	movs	r0, r3
   2031e:	46bd      	mov	sp, r7
   20320:	b004      	add	sp, #16
   20322:	bd80      	pop	{r7, pc}

00020324 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   20324:	b590      	push	{r4, r7, lr}
   20326:	b083      	sub	sp, #12
   20328:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2032a:	1c7b      	adds	r3, r7, #1
   2032c:	22ff      	movs	r2, #255	; 0xff
   2032e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   20330:	1cbb      	adds	r3, r7, #2
   20332:	22ff      	movs	r2, #255	; 0xff
   20334:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20336:	1cbb      	adds	r3, r7, #2
   20338:	881b      	ldrh	r3, [r3, #0]
   2033a:	1c79      	adds	r1, r7, #1
   2033c:	4811      	ldr	r0, [pc, #68]	; (20384 <sd_mmc_spi_wait_busy+0x60>)
   2033e:	2201      	movs	r2, #1
   20340:	4c11      	ldr	r4, [pc, #68]	; (20388 <sd_mmc_spi_wait_busy+0x64>)
   20342:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20344:	4b11      	ldr	r3, [pc, #68]	; (2038c <sd_mmc_spi_wait_busy+0x68>)
   20346:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20348:	1cbb      	adds	r3, r7, #2
   2034a:	881b      	ldrh	r3, [r3, #0]
   2034c:	1c79      	adds	r1, r7, #1
   2034e:	480d      	ldr	r0, [pc, #52]	; (20384 <sd_mmc_spi_wait_busy+0x60>)
   20350:	2201      	movs	r2, #1
   20352:	4c0d      	ldr	r4, [pc, #52]	; (20388 <sd_mmc_spi_wait_busy+0x64>)
   20354:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20356:	1cbb      	adds	r3, r7, #2
   20358:	881b      	ldrh	r3, [r3, #0]
   2035a:	1c79      	adds	r1, r7, #1
   2035c:	4809      	ldr	r0, [pc, #36]	; (20384 <sd_mmc_spi_wait_busy+0x60>)
   2035e:	2201      	movs	r2, #1
   20360:	4c09      	ldr	r4, [pc, #36]	; (20388 <sd_mmc_spi_wait_busy+0x64>)
   20362:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20364:	687b      	ldr	r3, [r7, #4]
   20366:	1e5a      	subs	r2, r3, #1
   20368:	607a      	str	r2, [r7, #4]
   2036a:	2b00      	cmp	r3, #0
   2036c:	d101      	bne.n	20372 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2036e:	2300      	movs	r3, #0
   20370:	e004      	b.n	2037c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20372:	1c7b      	adds	r3, r7, #1
   20374:	781b      	ldrb	r3, [r3, #0]
   20376:	2bff      	cmp	r3, #255	; 0xff
   20378:	d1ed      	bne.n	20356 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2037a:	2301      	movs	r3, #1
}
   2037c:	0018      	movs	r0, r3
   2037e:	46bd      	mov	sp, r7
   20380:	b003      	add	sp, #12
   20382:	bd90      	pop	{r4, r7, pc}
   20384:	20004254 	.word	0x20004254
   20388:	00028bcd 	.word	0x00028bcd
   2038c:	00030d40 	.word	0x00030d40

00020390 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20390:	b590      	push	{r4, r7, lr}
   20392:	b083      	sub	sp, #12
   20394:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20396:	1cbb      	adds	r3, r7, #2
   20398:	22ff      	movs	r2, #255	; 0xff
   2039a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2039c:	1c7b      	adds	r3, r7, #1
   2039e:	2200      	movs	r2, #0
   203a0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   203a2:	4b18      	ldr	r3, [pc, #96]	; (20404 <sd_mmc_spi_start_read_block+0x74>)
   203a4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   203a6:	687b      	ldr	r3, [r7, #4]
   203a8:	1e5a      	subs	r2, r3, #1
   203aa:	607a      	str	r2, [r7, #4]
   203ac:	2b00      	cmp	r3, #0
   203ae:	d104      	bne.n	203ba <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   203b0:	4b15      	ldr	r3, [pc, #84]	; (20408 <sd_mmc_spi_start_read_block+0x78>)
   203b2:	2204      	movs	r2, #4
   203b4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   203b6:	2300      	movs	r3, #0
   203b8:	e020      	b.n	203fc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   203ba:	1cbb      	adds	r3, r7, #2
   203bc:	881b      	ldrh	r3, [r3, #0]
   203be:	1c79      	adds	r1, r7, #1
   203c0:	4812      	ldr	r0, [pc, #72]	; (2040c <sd_mmc_spi_start_read_block+0x7c>)
   203c2:	2201      	movs	r2, #1
   203c4:	4c12      	ldr	r4, [pc, #72]	; (20410 <sd_mmc_spi_start_read_block+0x80>)
   203c6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   203c8:	1c7b      	adds	r3, r7, #1
   203ca:	781b      	ldrb	r3, [r3, #0]
   203cc:	001a      	movs	r2, r3
   203ce:	23f0      	movs	r3, #240	; 0xf0
   203d0:	4013      	ands	r3, r2
   203d2:	d10e      	bne.n	203f2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   203d4:	1c7b      	adds	r3, r7, #1
   203d6:	781b      	ldrb	r3, [r3, #0]
   203d8:	001a      	movs	r2, r3
   203da:	2307      	movs	r3, #7
   203dc:	4013      	ands	r3, r2
   203de:	d003      	beq.n	203e8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   203e0:	4b09      	ldr	r3, [pc, #36]	; (20408 <sd_mmc_spi_start_read_block+0x78>)
   203e2:	2207      	movs	r2, #7
   203e4:	701a      	strb	r2, [r3, #0]
   203e6:	e002      	b.n	203ee <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   203e8:	4b07      	ldr	r3, [pc, #28]	; (20408 <sd_mmc_spi_start_read_block+0x78>)
   203ea:	220b      	movs	r2, #11
   203ec:	701a      	strb	r2, [r3, #0]
			}
			return false;
   203ee:	2300      	movs	r3, #0
   203f0:	e004      	b.n	203fc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   203f2:	1c7b      	adds	r3, r7, #1
   203f4:	781b      	ldrb	r3, [r3, #0]
   203f6:	2bfe      	cmp	r3, #254	; 0xfe
   203f8:	d1d5      	bne.n	203a6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   203fa:	2301      	movs	r3, #1
}
   203fc:	0018      	movs	r0, r3
   203fe:	46bd      	mov	sp, r7
   20400:	b003      	add	sp, #12
   20402:	bd90      	pop	{r4, r7, pc}
   20404:	0007a120 	.word	0x0007a120
   20408:	20004297 	.word	0x20004297
   2040c:	20004254 	.word	0x20004254
   20410:	00028bcd 	.word	0x00028bcd

00020414 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   20414:	b590      	push	{r4, r7, lr}
   20416:	b083      	sub	sp, #12
   20418:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2041a:	1dbb      	adds	r3, r7, #6
   2041c:	22ff      	movs	r2, #255	; 0xff
   2041e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20420:	1dbb      	adds	r3, r7, #6
   20422:	881b      	ldrh	r3, [r3, #0]
   20424:	1d39      	adds	r1, r7, #4
   20426:	4804      	ldr	r0, [pc, #16]	; (20438 <sd_mmc_spi_stop_read_block+0x24>)
   20428:	2202      	movs	r2, #2
   2042a:	4c04      	ldr	r4, [pc, #16]	; (2043c <sd_mmc_spi_stop_read_block+0x28>)
   2042c:	47a0      	blx	r4
			dummy);
}
   2042e:	46c0      	nop			; (mov r8, r8)
   20430:	46bd      	mov	sp, r7
   20432:	b003      	add	sp, #12
   20434:	bd90      	pop	{r4, r7, pc}
   20436:	46c0      	nop			; (mov r8, r8)
   20438:	20004254 	.word	0x20004254
   2043c:	00028bcd 	.word	0x00028bcd

00020440 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20440:	b580      	push	{r7, lr}
   20442:	b082      	sub	sp, #8
   20444:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20446:	1dfb      	adds	r3, r7, #7
   20448:	22ff      	movs	r2, #255	; 0xff
   2044a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2044c:	1df9      	adds	r1, r7, #7
   2044e:	4b0d      	ldr	r3, [pc, #52]	; (20484 <sd_mmc_spi_start_write_block+0x44>)
   20450:	2201      	movs	r2, #1
   20452:	0018      	movs	r0, r3
   20454:	4b0c      	ldr	r3, [pc, #48]	; (20488 <sd_mmc_spi_start_write_block+0x48>)
   20456:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20458:	4b0c      	ldr	r3, [pc, #48]	; (2048c <sd_mmc_spi_start_write_block+0x4c>)
   2045a:	881b      	ldrh	r3, [r3, #0]
   2045c:	2b01      	cmp	r3, #1
   2045e:	d103      	bne.n	20468 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20460:	1dbb      	adds	r3, r7, #6
   20462:	22fe      	movs	r2, #254	; 0xfe
   20464:	701a      	strb	r2, [r3, #0]
   20466:	e002      	b.n	2046e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20468:	1dbb      	adds	r3, r7, #6
   2046a:	22fc      	movs	r2, #252	; 0xfc
   2046c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2046e:	1db9      	adds	r1, r7, #6
   20470:	4b04      	ldr	r3, [pc, #16]	; (20484 <sd_mmc_spi_start_write_block+0x44>)
   20472:	2201      	movs	r2, #1
   20474:	0018      	movs	r0, r3
   20476:	4b04      	ldr	r3, [pc, #16]	; (20488 <sd_mmc_spi_start_write_block+0x48>)
   20478:	4798      	blx	r3
}
   2047a:	46c0      	nop			; (mov r8, r8)
   2047c:	46bd      	mov	sp, r7
   2047e:	b002      	add	sp, #8
   20480:	bd80      	pop	{r7, pc}
   20482:	46c0      	nop			; (mov r8, r8)
   20484:	20004254 	.word	0x20004254
   20488:	00028df1 	.word	0x00028df1
   2048c:	200042a2 	.word	0x200042a2

00020490 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20490:	b590      	push	{r4, r7, lr}
   20492:	b083      	sub	sp, #12
   20494:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20496:	1dbb      	adds	r3, r7, #6
   20498:	22ff      	movs	r2, #255	; 0xff
   2049a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2049c:	1cbb      	adds	r3, r7, #2
   2049e:	2201      	movs	r2, #1
   204a0:	4252      	negs	r2, r2
   204a2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   204a4:	1cb9      	adds	r1, r7, #2
   204a6:	4b1b      	ldr	r3, [pc, #108]	; (20514 <sd_mmc_spi_stop_write_block+0x84>)
   204a8:	2202      	movs	r2, #2
   204aa:	0018      	movs	r0, r3
   204ac:	4b1a      	ldr	r3, [pc, #104]	; (20518 <sd_mmc_spi_stop_write_block+0x88>)
   204ae:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   204b0:	1dbb      	adds	r3, r7, #6
   204b2:	881b      	ldrh	r3, [r3, #0]
   204b4:	1d79      	adds	r1, r7, #5
   204b6:	4817      	ldr	r0, [pc, #92]	; (20514 <sd_mmc_spi_stop_write_block+0x84>)
   204b8:	2201      	movs	r2, #1
   204ba:	4c18      	ldr	r4, [pc, #96]	; (2051c <sd_mmc_spi_stop_write_block+0x8c>)
   204bc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   204be:	1d7b      	adds	r3, r7, #5
   204c0:	781b      	ldrb	r3, [r3, #0]
   204c2:	001a      	movs	r2, r3
   204c4:	2310      	movs	r3, #16
   204c6:	4013      	ands	r3, r2
   204c8:	d105      	bne.n	204d6 <sd_mmc_spi_stop_write_block+0x46>
   204ca:	1d7b      	adds	r3, r7, #5
   204cc:	781b      	ldrb	r3, [r3, #0]
   204ce:	001a      	movs	r2, r3
   204d0:	2301      	movs	r3, #1
   204d2:	4013      	ands	r3, r2
   204d4:	d104      	bne.n	204e0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   204d6:	4b12      	ldr	r3, [pc, #72]	; (20520 <sd_mmc_spi_stop_write_block+0x90>)
   204d8:	2201      	movs	r2, #1
   204da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   204dc:	2300      	movs	r3, #0
   204de:	e014      	b.n	2050a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   204e0:	1d7b      	adds	r3, r7, #5
   204e2:	781b      	ldrb	r3, [r3, #0]
   204e4:	001a      	movs	r2, r3
   204e6:	231e      	movs	r3, #30
   204e8:	4013      	ands	r3, r2
   204ea:	2b04      	cmp	r3, #4
   204ec:	d00b      	beq.n	20506 <sd_mmc_spi_stop_write_block+0x76>
   204ee:	2b0a      	cmp	r3, #10
   204f0:	d104      	bne.n	204fc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   204f2:	4b0b      	ldr	r3, [pc, #44]	; (20520 <sd_mmc_spi_stop_write_block+0x90>)
   204f4:	2208      	movs	r2, #8
   204f6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   204f8:	2300      	movs	r3, #0
   204fa:	e006      	b.n	2050a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   204fc:	4b08      	ldr	r3, [pc, #32]	; (20520 <sd_mmc_spi_stop_write_block+0x90>)
   204fe:	220a      	movs	r2, #10
   20500:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20502:	2300      	movs	r3, #0
   20504:	e001      	b.n	2050a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   20506:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20508:	2301      	movs	r3, #1
}
   2050a:	0018      	movs	r0, r3
   2050c:	46bd      	mov	sp, r7
   2050e:	b003      	add	sp, #12
   20510:	bd90      	pop	{r4, r7, pc}
   20512:	46c0      	nop			; (mov r8, r8)
   20514:	20004254 	.word	0x20004254
   20518:	00028df1 	.word	0x00028df1
   2051c:	00028bcd 	.word	0x00028bcd
   20520:	20004297 	.word	0x20004297

00020524 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20524:	b590      	push	{r4, r7, lr}
   20526:	b083      	sub	sp, #12
   20528:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2052a:	4b1d      	ldr	r3, [pc, #116]	; (205a0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2052c:	881b      	ldrh	r3, [r3, #0]
   2052e:	2b01      	cmp	r3, #1
   20530:	d101      	bne.n	20536 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20532:	2301      	movs	r3, #1
   20534:	e030      	b.n	20598 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   20536:	4b1a      	ldr	r3, [pc, #104]	; (205a0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20538:	881b      	ldrh	r3, [r3, #0]
   2053a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2053c:	4b19      	ldr	r3, [pc, #100]	; (205a4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2053e:	681a      	ldr	r2, [r3, #0]
   20540:	4b19      	ldr	r3, [pc, #100]	; (205a8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20542:	881b      	ldrh	r3, [r3, #0]
   20544:	0019      	movs	r1, r3
   20546:	4b19      	ldr	r3, [pc, #100]	; (205ac <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20548:	0010      	movs	r0, r2
   2054a:	4798      	blx	r3
   2054c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2054e:	429c      	cmp	r4, r3
   20550:	d901      	bls.n	20556 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20552:	2301      	movs	r3, #1
   20554:	e020      	b.n	20598 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20556:	1dfb      	adds	r3, r7, #7
   20558:	22ff      	movs	r2, #255	; 0xff
   2055a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2055c:	1df9      	adds	r1, r7, #7
   2055e:	4b14      	ldr	r3, [pc, #80]	; (205b0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20560:	2201      	movs	r2, #1
   20562:	0018      	movs	r0, r3
   20564:	4b13      	ldr	r3, [pc, #76]	; (205b4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20566:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20568:	1dfb      	adds	r3, r7, #7
   2056a:	22fd      	movs	r2, #253	; 0xfd
   2056c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2056e:	1df9      	adds	r1, r7, #7
   20570:	4b0f      	ldr	r3, [pc, #60]	; (205b0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20572:	2201      	movs	r2, #1
   20574:	0018      	movs	r0, r3
   20576:	4b0f      	ldr	r3, [pc, #60]	; (205b4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20578:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2057a:	4b0f      	ldr	r3, [pc, #60]	; (205b8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2057c:	4798      	blx	r3
   2057e:	0003      	movs	r3, r0
   20580:	001a      	movs	r2, r3
   20582:	2301      	movs	r3, #1
   20584:	4053      	eors	r3, r2
   20586:	b2db      	uxtb	r3, r3
   20588:	2b00      	cmp	r3, #0
   2058a:	d004      	beq.n	20596 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2058c:	4b0b      	ldr	r3, [pc, #44]	; (205bc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2058e:	2205      	movs	r2, #5
   20590:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20592:	2300      	movs	r3, #0
   20594:	e000      	b.n	20598 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20596:	2301      	movs	r3, #1
}
   20598:	0018      	movs	r0, r3
   2059a:	46bd      	mov	sp, r7
   2059c:	b003      	add	sp, #12
   2059e:	bd90      	pop	{r4, r7, pc}
   205a0:	200042a2 	.word	0x200042a2
   205a4:	2000429c 	.word	0x2000429c
   205a8:	200042a0 	.word	0x200042a0
   205ac:	00033715 	.word	0x00033715
   205b0:	20004254 	.word	0x20004254
   205b4:	00028df1 	.word	0x00028df1
   205b8:	00020325 	.word	0x00020325
   205bc:	20004297 	.word	0x20004297

000205c0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   205c0:	b580      	push	{r7, lr}
   205c2:	b090      	sub	sp, #64	; 0x40
   205c4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   205c6:	4b1f      	ldr	r3, [pc, #124]	; (20644 <sd_mmc_spi_init+0x84>)
   205c8:	2200      	movs	r2, #0
   205ca:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   205cc:	233c      	movs	r3, #60	; 0x3c
   205ce:	18fb      	adds	r3, r7, r3
   205d0:	0018      	movs	r0, r3
   205d2:	4b1d      	ldr	r3, [pc, #116]	; (20648 <sd_mmc_spi_init+0x88>)
   205d4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   205d6:	1d3b      	adds	r3, r7, #4
   205d8:	0018      	movs	r0, r3
   205da:	4b1c      	ldr	r3, [pc, #112]	; (2064c <sd_mmc_spi_init+0x8c>)
   205dc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   205de:	1d3b      	adds	r3, r7, #4
   205e0:	2280      	movs	r2, #128	; 0x80
   205e2:	0252      	lsls	r2, r2, #9
   205e4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   205e6:	1d3b      	adds	r3, r7, #4
   205e8:	4a19      	ldr	r2, [pc, #100]	; (20650 <sd_mmc_spi_init+0x90>)
   205ea:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   205ec:	1d3b      	adds	r3, r7, #4
   205ee:	4a19      	ldr	r2, [pc, #100]	; (20654 <sd_mmc_spi_init+0x94>)
   205f0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   205f2:	1d3b      	adds	r3, r7, #4
   205f4:	4a18      	ldr	r2, [pc, #96]	; (20658 <sd_mmc_spi_init+0x98>)
   205f6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   205f8:	1d3b      	adds	r3, r7, #4
   205fa:	4a18      	ldr	r2, [pc, #96]	; (2065c <sd_mmc_spi_init+0x9c>)
   205fc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   205fe:	1d3b      	adds	r3, r7, #4
   20600:	2224      	movs	r2, #36	; 0x24
   20602:	2100      	movs	r1, #0
   20604:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   20606:	1d3b      	adds	r3, r7, #4
   20608:	4a15      	ldr	r2, [pc, #84]	; (20660 <sd_mmc_spi_init+0xa0>)
   2060a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2060c:	1d3a      	adds	r2, r7, #4
   2060e:	4915      	ldr	r1, [pc, #84]	; (20664 <sd_mmc_spi_init+0xa4>)
   20610:	4b15      	ldr	r3, [pc, #84]	; (20668 <sd_mmc_spi_init+0xa8>)
   20612:	0018      	movs	r0, r3
   20614:	4b15      	ldr	r3, [pc, #84]	; (2066c <sd_mmc_spi_init+0xac>)
   20616:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   20618:	4b13      	ldr	r3, [pc, #76]	; (20668 <sd_mmc_spi_init+0xa8>)
   2061a:	0018      	movs	r0, r3
   2061c:	4b14      	ldr	r3, [pc, #80]	; (20670 <sd_mmc_spi_init+0xb0>)
   2061e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20620:	4b14      	ldr	r3, [pc, #80]	; (20674 <sd_mmc_spi_init+0xb4>)
   20622:	0018      	movs	r0, r3
   20624:	4b14      	ldr	r3, [pc, #80]	; (20678 <sd_mmc_spi_init+0xb8>)
   20626:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   20628:	4b14      	ldr	r3, [pc, #80]	; (2067c <sd_mmc_spi_init+0xbc>)
   2062a:	781a      	ldrb	r2, [r3, #0]
   2062c:	4b11      	ldr	r3, [pc, #68]	; (20674 <sd_mmc_spi_init+0xb4>)
   2062e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20630:	4a10      	ldr	r2, [pc, #64]	; (20674 <sd_mmc_spi_init+0xb4>)
   20632:	4b13      	ldr	r3, [pc, #76]	; (20680 <sd_mmc_spi_init+0xc0>)
   20634:	0011      	movs	r1, r2
   20636:	0018      	movs	r0, r3
   20638:	4b12      	ldr	r3, [pc, #72]	; (20684 <sd_mmc_spi_init+0xc4>)
   2063a:	4798      	blx	r3
}
   2063c:	46c0      	nop			; (mov r8, r8)
   2063e:	46bd      	mov	sp, r7
   20640:	b010      	add	sp, #64	; 0x40
   20642:	bd80      	pop	{r7, pc}
   20644:	20004297 	.word	0x20004297
   20648:	00020075 	.word	0x00020075
   2064c:	0002010d 	.word	0x0002010d
   20650:	00100002 	.word	0x00100002
   20654:	00110002 	.word	0x00110002
   20658:	00120002 	.word	0x00120002
   2065c:	00130002 	.word	0x00130002
   20660:	00061a80 	.word	0x00061a80
   20664:	42000c00 	.word	0x42000c00
   20668:	20004254 	.word	0x20004254
   2066c:	00028a3d 	.word	0x00028a3d
   20670:	00020219 	.word	0x00020219
   20674:	20004294 	.word	0x20004294
   20678:	00020191 	.word	0x00020191
   2067c:	20000118 	.word	0x20000118
   20680:	20004290 	.word	0x20004290
   20684:	000201b5 	.word	0x000201b5

00020688 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20688:	b590      	push	{r4, r7, lr}
   2068a:	b083      	sub	sp, #12
   2068c:	af00      	add	r7, sp, #0
   2068e:	0004      	movs	r4, r0
   20690:	6039      	str	r1, [r7, #0]
   20692:	0010      	movs	r0, r2
   20694:	0019      	movs	r1, r3
   20696:	1dfb      	adds	r3, r7, #7
   20698:	1c22      	adds	r2, r4, #0
   2069a:	701a      	strb	r2, [r3, #0]
   2069c:	1dbb      	adds	r3, r7, #6
   2069e:	1c02      	adds	r2, r0, #0
   206a0:	701a      	strb	r2, [r3, #0]
   206a2:	1d7b      	adds	r3, r7, #5
   206a4:	1c0a      	adds	r2, r1, #0
   206a6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   206a8:	4b13      	ldr	r3, [pc, #76]	; (206f8 <sd_mmc_spi_select_device+0x70>)
   206aa:	2200      	movs	r2, #0
   206ac:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   206ae:	683b      	ldr	r3, [r7, #0]
   206b0:	4a12      	ldr	r2, [pc, #72]	; (206fc <sd_mmc_spi_select_device+0x74>)
   206b2:	4293      	cmp	r3, r2
   206b4:	d907      	bls.n	206c6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   206b6:	4b11      	ldr	r3, [pc, #68]	; (206fc <sd_mmc_spi_select_device+0x74>)
   206b8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   206ba:	e004      	b.n	206c6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   206bc:	683b      	ldr	r3, [r7, #0]
   206be:	08db      	lsrs	r3, r3, #3
   206c0:	683a      	ldr	r2, [r7, #0]
   206c2:	1ad3      	subs	r3, r2, r3
   206c4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   206c6:	683a      	ldr	r2, [r7, #0]
   206c8:	4b0d      	ldr	r3, [pc, #52]	; (20700 <sd_mmc_spi_select_device+0x78>)
   206ca:	0011      	movs	r1, r2
   206cc:	0018      	movs	r0, r3
   206ce:	4b0d      	ldr	r3, [pc, #52]	; (20704 <sd_mmc_spi_select_device+0x7c>)
   206d0:	4798      	blx	r3
   206d2:	0003      	movs	r3, r0
   206d4:	2b17      	cmp	r3, #23
   206d6:	d0f1      	beq.n	206bc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   206d8:	1dfb      	adds	r3, r7, #7
   206da:	781a      	ldrb	r2, [r3, #0]
   206dc:	0013      	movs	r3, r2
   206de:	005b      	lsls	r3, r3, #1
   206e0:	189b      	adds	r3, r3, r2
   206e2:	4a09      	ldr	r2, [pc, #36]	; (20708 <sd_mmc_spi_select_device+0x80>)
   206e4:	1899      	adds	r1, r3, r2
   206e6:	4b06      	ldr	r3, [pc, #24]	; (20700 <sd_mmc_spi_select_device+0x78>)
   206e8:	2201      	movs	r2, #1
   206ea:	0018      	movs	r0, r3
   206ec:	4b07      	ldr	r3, [pc, #28]	; (2070c <sd_mmc_spi_select_device+0x84>)
   206ee:	4798      	blx	r3
}
   206f0:	46c0      	nop			; (mov r8, r8)
   206f2:	46bd      	mov	sp, r7
   206f4:	b003      	add	sp, #12
   206f6:	bd90      	pop	{r4, r7, pc}
   206f8:	20004297 	.word	0x20004297
   206fc:	00989680 	.word	0x00989680
   20700:	20004254 	.word	0x20004254
   20704:	00028765 	.word	0x00028765
   20708:	20004290 	.word	0x20004290
   2070c:	00028d01 	.word	0x00028d01

00020710 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20710:	b580      	push	{r7, lr}
   20712:	b082      	sub	sp, #8
   20714:	af00      	add	r7, sp, #0
   20716:	0002      	movs	r2, r0
   20718:	1dfb      	adds	r3, r7, #7
   2071a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2071c:	4b09      	ldr	r3, [pc, #36]	; (20744 <sd_mmc_spi_deselect_device+0x34>)
   2071e:	2200      	movs	r2, #0
   20720:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20722:	1dfb      	adds	r3, r7, #7
   20724:	781a      	ldrb	r2, [r3, #0]
   20726:	0013      	movs	r3, r2
   20728:	005b      	lsls	r3, r3, #1
   2072a:	189b      	adds	r3, r3, r2
   2072c:	4a06      	ldr	r2, [pc, #24]	; (20748 <sd_mmc_spi_deselect_device+0x38>)
   2072e:	1899      	adds	r1, r3, r2
   20730:	4b06      	ldr	r3, [pc, #24]	; (2074c <sd_mmc_spi_deselect_device+0x3c>)
   20732:	2200      	movs	r2, #0
   20734:	0018      	movs	r0, r3
   20736:	4b06      	ldr	r3, [pc, #24]	; (20750 <sd_mmc_spi_deselect_device+0x40>)
   20738:	4798      	blx	r3
}
   2073a:	46c0      	nop			; (mov r8, r8)
   2073c:	46bd      	mov	sp, r7
   2073e:	b002      	add	sp, #8
   20740:	bd80      	pop	{r7, pc}
   20742:	46c0      	nop			; (mov r8, r8)
   20744:	20004297 	.word	0x20004297
   20748:	20004290 	.word	0x20004290
   2074c:	20004254 	.word	0x20004254
   20750:	00028d01 	.word	0x00028d01

00020754 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20754:	b580      	push	{r7, lr}
   20756:	b082      	sub	sp, #8
   20758:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2075a:	1dbb      	adds	r3, r7, #6
   2075c:	22ff      	movs	r2, #255	; 0xff
   2075e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20760:	4b0c      	ldr	r3, [pc, #48]	; (20794 <sd_mmc_spi_send_clock+0x40>)
   20762:	2200      	movs	r2, #0
   20764:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20766:	1dfb      	adds	r3, r7, #7
   20768:	2200      	movs	r2, #0
   2076a:	701a      	strb	r2, [r3, #0]
   2076c:	e00a      	b.n	20784 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   2076e:	1db9      	adds	r1, r7, #6
   20770:	4b09      	ldr	r3, [pc, #36]	; (20798 <sd_mmc_spi_send_clock+0x44>)
   20772:	2201      	movs	r2, #1
   20774:	0018      	movs	r0, r3
   20776:	4b09      	ldr	r3, [pc, #36]	; (2079c <sd_mmc_spi_send_clock+0x48>)
   20778:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2077a:	1dfb      	adds	r3, r7, #7
   2077c:	781a      	ldrb	r2, [r3, #0]
   2077e:	1dfb      	adds	r3, r7, #7
   20780:	3201      	adds	r2, #1
   20782:	701a      	strb	r2, [r3, #0]
   20784:	1dfb      	adds	r3, r7, #7
   20786:	781b      	ldrb	r3, [r3, #0]
   20788:	2b09      	cmp	r3, #9
   2078a:	d9f0      	bls.n	2076e <sd_mmc_spi_send_clock+0x1a>
	}
}
   2078c:	46c0      	nop			; (mov r8, r8)
   2078e:	46bd      	mov	sp, r7
   20790:	b002      	add	sp, #8
   20792:	bd80      	pop	{r7, pc}
   20794:	20004297 	.word	0x20004297
   20798:	20004254 	.word	0x20004254
   2079c:	00028df1 	.word	0x00028df1

000207a0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   207a0:	b590      	push	{r4, r7, lr}
   207a2:	b085      	sub	sp, #20
   207a4:	af02      	add	r7, sp, #8
   207a6:	6078      	str	r0, [r7, #4]
   207a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   207aa:	6839      	ldr	r1, [r7, #0]
   207ac:	6878      	ldr	r0, [r7, #4]
   207ae:	2300      	movs	r3, #0
   207b0:	9300      	str	r3, [sp, #0]
   207b2:	2300      	movs	r3, #0
   207b4:	2200      	movs	r2, #0
   207b6:	4c03      	ldr	r4, [pc, #12]	; (207c4 <sd_mmc_spi_send_cmd+0x24>)
   207b8:	47a0      	blx	r4
   207ba:	0003      	movs	r3, r0
}
   207bc:	0018      	movs	r0, r3
   207be:	46bd      	mov	sp, r7
   207c0:	b003      	add	sp, #12
   207c2:	bd90      	pop	{r4, r7, pc}
   207c4:	000207c9 	.word	0x000207c9

000207c8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   207c8:	b590      	push	{r4, r7, lr}
   207ca:	b089      	sub	sp, #36	; 0x24
   207cc:	af00      	add	r7, sp, #0
   207ce:	60f8      	str	r0, [r7, #12]
   207d0:	60b9      	str	r1, [r7, #8]
   207d2:	0019      	movs	r1, r3
   207d4:	1dbb      	adds	r3, r7, #6
   207d6:	801a      	strh	r2, [r3, #0]
   207d8:	1d3b      	adds	r3, r7, #4
   207da:	1c0a      	adds	r2, r1, #0
   207dc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   207de:	231b      	movs	r3, #27
   207e0:	18fb      	adds	r3, r7, r3
   207e2:	22ff      	movs	r2, #255	; 0xff
   207e4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   207e6:	231c      	movs	r3, #28
   207e8:	18fb      	adds	r3, r7, r3
   207ea:	22ff      	movs	r2, #255	; 0xff
   207ec:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   207ee:	4b72      	ldr	r3, [pc, #456]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   207f0:	2200      	movs	r2, #0
   207f2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   207f4:	68fb      	ldr	r3, [r7, #12]
   207f6:	b2db      	uxtb	r3, r3
   207f8:	223f      	movs	r2, #63	; 0x3f
   207fa:	4013      	ands	r3, r2
   207fc:	b2db      	uxtb	r3, r3
   207fe:	2240      	movs	r2, #64	; 0x40
   20800:	4313      	orrs	r3, r2
   20802:	b2da      	uxtb	r2, r3
   20804:	2314      	movs	r3, #20
   20806:	18fb      	adds	r3, r7, r3
   20808:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2080a:	68bb      	ldr	r3, [r7, #8]
   2080c:	0e1b      	lsrs	r3, r3, #24
   2080e:	b2da      	uxtb	r2, r3
   20810:	2314      	movs	r3, #20
   20812:	18fb      	adds	r3, r7, r3
   20814:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20816:	68bb      	ldr	r3, [r7, #8]
   20818:	0c1b      	lsrs	r3, r3, #16
   2081a:	b2da      	uxtb	r2, r3
   2081c:	2314      	movs	r3, #20
   2081e:	18fb      	adds	r3, r7, r3
   20820:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20822:	68bb      	ldr	r3, [r7, #8]
   20824:	0a1b      	lsrs	r3, r3, #8
   20826:	b2da      	uxtb	r2, r3
   20828:	2314      	movs	r3, #20
   2082a:	18fb      	adds	r3, r7, r3
   2082c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2082e:	68bb      	ldr	r3, [r7, #8]
   20830:	b2da      	uxtb	r2, r3
   20832:	2314      	movs	r3, #20
   20834:	18fb      	adds	r3, r7, r3
   20836:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20838:	2314      	movs	r3, #20
   2083a:	18fb      	adds	r3, r7, r3
   2083c:	2105      	movs	r1, #5
   2083e:	0018      	movs	r0, r3
   20840:	4b5e      	ldr	r3, [pc, #376]	; (209bc <sd_mmc_spi_adtc_start+0x1f4>)
   20842:	4798      	blx	r3
   20844:	0003      	movs	r3, r0
   20846:	001a      	movs	r2, r3
   20848:	2314      	movs	r3, #20
   2084a:	18fb      	adds	r3, r7, r3
   2084c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   2084e:	231b      	movs	r3, #27
   20850:	18f9      	adds	r1, r7, r3
   20852:	4b5b      	ldr	r3, [pc, #364]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   20854:	2201      	movs	r2, #1
   20856:	0018      	movs	r0, r3
   20858:	4b5a      	ldr	r3, [pc, #360]	; (209c4 <sd_mmc_spi_adtc_start+0x1fc>)
   2085a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   2085c:	2314      	movs	r3, #20
   2085e:	18f9      	adds	r1, r7, r3
   20860:	4b57      	ldr	r3, [pc, #348]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   20862:	2206      	movs	r2, #6
   20864:	0018      	movs	r0, r3
   20866:	4b57      	ldr	r3, [pc, #348]	; (209c4 <sd_mmc_spi_adtc_start+0x1fc>)
   20868:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2086a:	2313      	movs	r3, #19
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	22ff      	movs	r2, #255	; 0xff
   20870:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20872:	231c      	movs	r3, #28
   20874:	18fb      	adds	r3, r7, r3
   20876:	881b      	ldrh	r3, [r3, #0]
   20878:	2213      	movs	r2, #19
   2087a:	18b9      	adds	r1, r7, r2
   2087c:	4850      	ldr	r0, [pc, #320]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   2087e:	2201      	movs	r2, #1
   20880:	4c51      	ldr	r4, [pc, #324]	; (209c8 <sd_mmc_spi_adtc_start+0x200>)
   20882:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20884:	231f      	movs	r3, #31
   20886:	18fb      	adds	r3, r7, r3
   20888:	2207      	movs	r2, #7
   2088a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   2088c:	231c      	movs	r3, #28
   2088e:	18fb      	adds	r3, r7, r3
   20890:	881b      	ldrh	r3, [r3, #0]
   20892:	2213      	movs	r2, #19
   20894:	18b9      	adds	r1, r7, r2
   20896:	484a      	ldr	r0, [pc, #296]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   20898:	2201      	movs	r2, #1
   2089a:	4c4b      	ldr	r4, [pc, #300]	; (209c8 <sd_mmc_spi_adtc_start+0x200>)
   2089c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   2089e:	2313      	movs	r3, #19
   208a0:	18fb      	adds	r3, r7, r3
   208a2:	781b      	ldrb	r3, [r3, #0]
   208a4:	b25b      	sxtb	r3, r3
   208a6:	2b00      	cmp	r3, #0
   208a8:	da10      	bge.n	208cc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   208aa:	231f      	movs	r3, #31
   208ac:	18fb      	adds	r3, r7, r3
   208ae:	221f      	movs	r2, #31
   208b0:	18ba      	adds	r2, r7, r2
   208b2:	7812      	ldrb	r2, [r2, #0]
   208b4:	3a01      	subs	r2, #1
   208b6:	701a      	strb	r2, [r3, #0]
   208b8:	231f      	movs	r3, #31
   208ba:	18fb      	adds	r3, r7, r3
   208bc:	781b      	ldrb	r3, [r3, #0]
   208be:	2b00      	cmp	r3, #0
   208c0:	d1e4      	bne.n	2088c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   208c2:	4b3d      	ldr	r3, [pc, #244]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   208c4:	2202      	movs	r2, #2
   208c6:	701a      	strb	r2, [r3, #0]
			return false;
   208c8:	2300      	movs	r3, #0
   208ca:	e070      	b.n	209ae <sd_mmc_spi_adtc_start+0x1e6>
			break;
   208cc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   208ce:	2313      	movs	r3, #19
   208d0:	18fb      	adds	r3, r7, r3
   208d2:	781b      	ldrb	r3, [r3, #0]
   208d4:	001a      	movs	r2, r3
   208d6:	4b3d      	ldr	r3, [pc, #244]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   208d8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   208da:	2313      	movs	r3, #19
   208dc:	18fb      	adds	r3, r7, r3
   208de:	781b      	ldrb	r3, [r3, #0]
   208e0:	001a      	movs	r2, r3
   208e2:	2308      	movs	r3, #8
   208e4:	4013      	ands	r3, r2
   208e6:	d004      	beq.n	208f2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   208e8:	4b33      	ldr	r3, [pc, #204]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   208ea:	2206      	movs	r2, #6
   208ec:	701a      	strb	r2, [r3, #0]
		return false;
   208ee:	2300      	movs	r3, #0
   208f0:	e05d      	b.n	209ae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   208f2:	2313      	movs	r3, #19
   208f4:	18fb      	adds	r3, r7, r3
   208f6:	781b      	ldrb	r3, [r3, #0]
   208f8:	001a      	movs	r2, r3
   208fa:	2304      	movs	r3, #4
   208fc:	4013      	ands	r3, r2
   208fe:	d004      	beq.n	2090a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20900:	4b2d      	ldr	r3, [pc, #180]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   20902:	2209      	movs	r2, #9
   20904:	701a      	strb	r2, [r3, #0]
		return false;
   20906:	2300      	movs	r3, #0
   20908:	e051      	b.n	209ae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2090a:	2313      	movs	r3, #19
   2090c:	18fb      	adds	r3, r7, r3
   2090e:	781b      	ldrb	r3, [r3, #0]
   20910:	001a      	movs	r2, r3
   20912:	2301      	movs	r3, #1
   20914:	439a      	bics	r2, r3
   20916:	1e13      	subs	r3, r2, #0
   20918:	d004      	beq.n	20924 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2091a:	4b27      	ldr	r3, [pc, #156]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   2091c:	2201      	movs	r2, #1
   2091e:	701a      	strb	r2, [r3, #0]
		return false;
   20920:	2300      	movs	r3, #0
   20922:	e044      	b.n	209ae <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20924:	68fa      	ldr	r2, [r7, #12]
   20926:	2380      	movs	r3, #128	; 0x80
   20928:	019b      	lsls	r3, r3, #6
   2092a:	4013      	ands	r3, r2
   2092c:	d00d      	beq.n	2094a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   2092e:	4b28      	ldr	r3, [pc, #160]	; (209d0 <sd_mmc_spi_adtc_start+0x208>)
   20930:	4798      	blx	r3
   20932:	0003      	movs	r3, r0
   20934:	001a      	movs	r2, r3
   20936:	2301      	movs	r3, #1
   20938:	4053      	eors	r3, r2
   2093a:	b2db      	uxtb	r3, r3
   2093c:	2b00      	cmp	r3, #0
   2093e:	d004      	beq.n	2094a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20940:	4b1d      	ldr	r3, [pc, #116]	; (209b8 <sd_mmc_spi_adtc_start+0x1f0>)
   20942:	2203      	movs	r2, #3
   20944:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20946:	2300      	movs	r3, #0
   20948:	e031      	b.n	209ae <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2094a:	68fa      	ldr	r2, [r7, #12]
   2094c:	2380      	movs	r3, #128	; 0x80
   2094e:	009b      	lsls	r3, r3, #2
   20950:	4013      	ands	r3, r2
   20952:	d00e      	beq.n	20972 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20954:	4b1d      	ldr	r3, [pc, #116]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   20956:	2200      	movs	r2, #0
   20958:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2095a:	231c      	movs	r3, #28
   2095c:	18fb      	adds	r3, r7, r3
   2095e:	881b      	ldrh	r3, [r3, #0]
   20960:	491a      	ldr	r1, [pc, #104]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   20962:	4817      	ldr	r0, [pc, #92]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   20964:	2201      	movs	r2, #1
   20966:	4c18      	ldr	r4, [pc, #96]	; (209c8 <sd_mmc_spi_adtc_start+0x200>)
   20968:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2096a:	4b18      	ldr	r3, [pc, #96]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   2096c:	681a      	ldr	r2, [r3, #0]
   2096e:	4b17      	ldr	r3, [pc, #92]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   20970:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20972:	68fa      	ldr	r2, [r7, #12]
   20974:	2380      	movs	r3, #128	; 0x80
   20976:	00db      	lsls	r3, r3, #3
   20978:	4013      	ands	r3, r2
   2097a:	d00c      	beq.n	20996 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   2097c:	231c      	movs	r3, #28
   2097e:	18fb      	adds	r3, r7, r3
   20980:	881b      	ldrh	r3, [r3, #0]
   20982:	4912      	ldr	r1, [pc, #72]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   20984:	480e      	ldr	r0, [pc, #56]	; (209c0 <sd_mmc_spi_adtc_start+0x1f8>)
   20986:	2204      	movs	r2, #4
   20988:	4c0f      	ldr	r4, [pc, #60]	; (209c8 <sd_mmc_spi_adtc_start+0x200>)
   2098a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   2098c:	4b0f      	ldr	r3, [pc, #60]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   2098e:	681b      	ldr	r3, [r3, #0]
   20990:	ba1a      	rev	r2, r3
   20992:	4b0e      	ldr	r3, [pc, #56]	; (209cc <sd_mmc_spi_adtc_start+0x204>)
   20994:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20996:	4b0f      	ldr	r3, [pc, #60]	; (209d4 <sd_mmc_spi_adtc_start+0x20c>)
   20998:	1dba      	adds	r2, r7, #6
   2099a:	8812      	ldrh	r2, [r2, #0]
   2099c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   2099e:	4b0e      	ldr	r3, [pc, #56]	; (209d8 <sd_mmc_spi_adtc_start+0x210>)
   209a0:	1d3a      	adds	r2, r7, #4
   209a2:	8812      	ldrh	r2, [r2, #0]
   209a4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   209a6:	4b0d      	ldr	r3, [pc, #52]	; (209dc <sd_mmc_spi_adtc_start+0x214>)
   209a8:	2200      	movs	r2, #0
   209aa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   209ac:	2301      	movs	r3, #1
}
   209ae:	0018      	movs	r0, r3
   209b0:	46bd      	mov	sp, r7
   209b2:	b009      	add	sp, #36	; 0x24
   209b4:	bd90      	pop	{r4, r7, pc}
   209b6:	46c0      	nop			; (mov r8, r8)
   209b8:	20004297 	.word	0x20004297
   209bc:	00020269 	.word	0x00020269
   209c0:	20004254 	.word	0x20004254
   209c4:	00028df1 	.word	0x00028df1
   209c8:	00028bcd 	.word	0x00028bcd
   209cc:	20004298 	.word	0x20004298
   209d0:	00020325 	.word	0x00020325
   209d4:	200042a0 	.word	0x200042a0
   209d8:	200042a2 	.word	0x200042a2
   209dc:	2000429c 	.word	0x2000429c

000209e0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   209e0:	b580      	push	{r7, lr}
   209e2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   209e4:	4b02      	ldr	r3, [pc, #8]	; (209f0 <sd_mmc_spi_get_response+0x10>)
   209e6:	681b      	ldr	r3, [r3, #0]
}
   209e8:	0018      	movs	r0, r3
   209ea:	46bd      	mov	sp, r7
   209ec:	bd80      	pop	{r7, pc}
   209ee:	46c0      	nop			; (mov r8, r8)
   209f0:	20004298 	.word	0x20004298

000209f4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   209f4:	b590      	push	{r4, r7, lr}
   209f6:	b085      	sub	sp, #20
   209f8:	af00      	add	r7, sp, #0
   209fa:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   209fc:	230e      	movs	r3, #14
   209fe:	18fb      	adds	r3, r7, r3
   20a00:	22ff      	movs	r2, #255	; 0xff
   20a02:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a04:	4b1c      	ldr	r3, [pc, #112]	; (20a78 <sd_mmc_spi_read_word+0x84>)
   20a06:	2200      	movs	r2, #0
   20a08:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20a0a:	4b1c      	ldr	r3, [pc, #112]	; (20a7c <sd_mmc_spi_read_word+0x88>)
   20a0c:	681a      	ldr	r2, [r3, #0]
   20a0e:	4b1c      	ldr	r3, [pc, #112]	; (20a80 <sd_mmc_spi_read_word+0x8c>)
   20a10:	881b      	ldrh	r3, [r3, #0]
   20a12:	0019      	movs	r1, r3
   20a14:	4b1b      	ldr	r3, [pc, #108]	; (20a84 <sd_mmc_spi_read_word+0x90>)
   20a16:	0010      	movs	r0, r2
   20a18:	4798      	blx	r3
   20a1a:	1e0b      	subs	r3, r1, #0
   20a1c:	d10a      	bne.n	20a34 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20a1e:	4b1a      	ldr	r3, [pc, #104]	; (20a88 <sd_mmc_spi_read_word+0x94>)
   20a20:	4798      	blx	r3
   20a22:	0003      	movs	r3, r0
   20a24:	001a      	movs	r2, r3
   20a26:	2301      	movs	r3, #1
   20a28:	4053      	eors	r3, r2
   20a2a:	b2db      	uxtb	r3, r3
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	d001      	beq.n	20a34 <sd_mmc_spi_read_word+0x40>
			return false;
   20a30:	2300      	movs	r3, #0
   20a32:	e01d      	b.n	20a70 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20a34:	230e      	movs	r3, #14
   20a36:	18fb      	adds	r3, r7, r3
   20a38:	881b      	ldrh	r3, [r3, #0]
   20a3a:	1d39      	adds	r1, r7, #4
   20a3c:	4813      	ldr	r0, [pc, #76]	; (20a8c <sd_mmc_spi_read_word+0x98>)
   20a3e:	2204      	movs	r2, #4
   20a40:	4c13      	ldr	r4, [pc, #76]	; (20a90 <sd_mmc_spi_read_word+0x9c>)
   20a42:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20a44:	687b      	ldr	r3, [r7, #4]
   20a46:	687a      	ldr	r2, [r7, #4]
   20a48:	6812      	ldr	r2, [r2, #0]
   20a4a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20a4c:	4b0b      	ldr	r3, [pc, #44]	; (20a7c <sd_mmc_spi_read_word+0x88>)
   20a4e:	681b      	ldr	r3, [r3, #0]
   20a50:	1d1a      	adds	r2, r3, #4
   20a52:	4b0a      	ldr	r3, [pc, #40]	; (20a7c <sd_mmc_spi_read_word+0x88>)
   20a54:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20a56:	4b09      	ldr	r3, [pc, #36]	; (20a7c <sd_mmc_spi_read_word+0x88>)
   20a58:	681a      	ldr	r2, [r3, #0]
   20a5a:	4b09      	ldr	r3, [pc, #36]	; (20a80 <sd_mmc_spi_read_word+0x8c>)
   20a5c:	881b      	ldrh	r3, [r3, #0]
   20a5e:	0019      	movs	r1, r3
   20a60:	4b08      	ldr	r3, [pc, #32]	; (20a84 <sd_mmc_spi_read_word+0x90>)
   20a62:	0010      	movs	r0, r2
   20a64:	4798      	blx	r3
   20a66:	1e0b      	subs	r3, r1, #0
   20a68:	d101      	bne.n	20a6e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20a6a:	4b0a      	ldr	r3, [pc, #40]	; (20a94 <sd_mmc_spi_read_word+0xa0>)
   20a6c:	4798      	blx	r3
	}
	return true;
   20a6e:	2301      	movs	r3, #1
}
   20a70:	0018      	movs	r0, r3
   20a72:	46bd      	mov	sp, r7
   20a74:	b005      	add	sp, #20
   20a76:	bd90      	pop	{r4, r7, pc}
   20a78:	20004297 	.word	0x20004297
   20a7c:	2000429c 	.word	0x2000429c
   20a80:	200042a0 	.word	0x200042a0
   20a84:	00033821 	.word	0x00033821
   20a88:	00020391 	.word	0x00020391
   20a8c:	20004254 	.word	0x20004254
   20a90:	00028bcd 	.word	0x00028bcd
   20a94:	00020415 	.word	0x00020415

00020a98 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20a98:	b590      	push	{r4, r7, lr}
   20a9a:	b085      	sub	sp, #20
   20a9c:	af00      	add	r7, sp, #0
   20a9e:	6078      	str	r0, [r7, #4]
   20aa0:	000a      	movs	r2, r1
   20aa2:	1cbb      	adds	r3, r7, #2
   20aa4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20aa6:	230a      	movs	r3, #10
   20aa8:	18fb      	adds	r3, r7, r3
   20aaa:	22ff      	movs	r2, #255	; 0xff
   20aac:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20aae:	4b1c      	ldr	r3, [pc, #112]	; (20b20 <sd_mmc_spi_start_read_blocks+0x88>)
   20ab0:	2200      	movs	r2, #0
   20ab2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20ab4:	2300      	movs	r3, #0
   20ab6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20ab8:	e025      	b.n	20b06 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20aba:	4b1a      	ldr	r3, [pc, #104]	; (20b24 <sd_mmc_spi_start_read_blocks+0x8c>)
   20abc:	4798      	blx	r3
   20abe:	0003      	movs	r3, r0
   20ac0:	001a      	movs	r2, r3
   20ac2:	2301      	movs	r3, #1
   20ac4:	4053      	eors	r3, r2
   20ac6:	b2db      	uxtb	r3, r3
   20ac8:	2b00      	cmp	r3, #0
   20aca:	d001      	beq.n	20ad0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20acc:	2300      	movs	r3, #0
   20ace:	e022      	b.n	20b16 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20ad0:	687a      	ldr	r2, [r7, #4]
   20ad2:	68fb      	ldr	r3, [r7, #12]
   20ad4:	18d1      	adds	r1, r2, r3
   20ad6:	4b14      	ldr	r3, [pc, #80]	; (20b28 <sd_mmc_spi_start_read_blocks+0x90>)
   20ad8:	881a      	ldrh	r2, [r3, #0]
   20ada:	230a      	movs	r3, #10
   20adc:	18fb      	adds	r3, r7, r3
   20ade:	881b      	ldrh	r3, [r3, #0]
   20ae0:	4812      	ldr	r0, [pc, #72]	; (20b2c <sd_mmc_spi_start_read_blocks+0x94>)
   20ae2:	4c13      	ldr	r4, [pc, #76]	; (20b30 <sd_mmc_spi_start_read_blocks+0x98>)
   20ae4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20ae6:	4b10      	ldr	r3, [pc, #64]	; (20b28 <sd_mmc_spi_start_read_blocks+0x90>)
   20ae8:	881b      	ldrh	r3, [r3, #0]
   20aea:	001a      	movs	r2, r3
   20aec:	68fb      	ldr	r3, [r7, #12]
   20aee:	189b      	adds	r3, r3, r2
   20af0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20af2:	4b0d      	ldr	r3, [pc, #52]	; (20b28 <sd_mmc_spi_start_read_blocks+0x90>)
   20af4:	881b      	ldrh	r3, [r3, #0]
   20af6:	001a      	movs	r2, r3
   20af8:	4b0e      	ldr	r3, [pc, #56]	; (20b34 <sd_mmc_spi_start_read_blocks+0x9c>)
   20afa:	681b      	ldr	r3, [r3, #0]
   20afc:	18d2      	adds	r2, r2, r3
   20afe:	4b0d      	ldr	r3, [pc, #52]	; (20b34 <sd_mmc_spi_start_read_blocks+0x9c>)
   20b00:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20b02:	4b0d      	ldr	r3, [pc, #52]	; (20b38 <sd_mmc_spi_start_read_blocks+0xa0>)
   20b04:	4798      	blx	r3
	while (nb_block--) {
   20b06:	1cbb      	adds	r3, r7, #2
   20b08:	881b      	ldrh	r3, [r3, #0]
   20b0a:	1cba      	adds	r2, r7, #2
   20b0c:	1e59      	subs	r1, r3, #1
   20b0e:	8011      	strh	r1, [r2, #0]
   20b10:	2b00      	cmp	r3, #0
   20b12:	d1d2      	bne.n	20aba <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20b14:	2301      	movs	r3, #1
}
   20b16:	0018      	movs	r0, r3
   20b18:	46bd      	mov	sp, r7
   20b1a:	b005      	add	sp, #20
   20b1c:	bd90      	pop	{r4, r7, pc}
   20b1e:	46c0      	nop			; (mov r8, r8)
   20b20:	20004297 	.word	0x20004297
   20b24:	00020391 	.word	0x00020391
   20b28:	200042a0 	.word	0x200042a0
   20b2c:	20004254 	.word	0x20004254
   20b30:	00028bcd 	.word	0x00028bcd
   20b34:	2000429c 	.word	0x2000429c
   20b38:	00020415 	.word	0x00020415

00020b3c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20b3c:	b580      	push	{r7, lr}
   20b3e:	af00      	add	r7, sp, #0
	return true;
   20b40:	2301      	movs	r3, #1
}
   20b42:	0018      	movs	r0, r3
   20b44:	46bd      	mov	sp, r7
   20b46:	bd80      	pop	{r7, pc}

00020b48 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20b48:	b580      	push	{r7, lr}
   20b4a:	b084      	sub	sp, #16
   20b4c:	af00      	add	r7, sp, #0
   20b4e:	6078      	str	r0, [r7, #4]
   20b50:	000a      	movs	r2, r1
   20b52:	1cbb      	adds	r3, r7, #2
   20b54:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20b56:	4b24      	ldr	r3, [pc, #144]	; (20be8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20b58:	2200      	movs	r2, #0
   20b5a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20b5c:	2300      	movs	r3, #0
   20b5e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20b60:	e035      	b.n	20bce <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20b62:	4b22      	ldr	r3, [pc, #136]	; (20bec <sd_mmc_spi_start_write_blocks+0xa4>)
   20b64:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20b66:	687a      	ldr	r2, [r7, #4]
   20b68:	68fb      	ldr	r3, [r7, #12]
   20b6a:	18d1      	adds	r1, r2, r3
   20b6c:	4b20      	ldr	r3, [pc, #128]	; (20bf0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b6e:	881a      	ldrh	r2, [r3, #0]
   20b70:	4b20      	ldr	r3, [pc, #128]	; (20bf4 <sd_mmc_spi_start_write_blocks+0xac>)
   20b72:	0018      	movs	r0, r3
   20b74:	4b20      	ldr	r3, [pc, #128]	; (20bf8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20b76:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20b78:	4b1d      	ldr	r3, [pc, #116]	; (20bf0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b7a:	881b      	ldrh	r3, [r3, #0]
   20b7c:	001a      	movs	r2, r3
   20b7e:	68fb      	ldr	r3, [r7, #12]
   20b80:	189b      	adds	r3, r3, r2
   20b82:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20b84:	4b1a      	ldr	r3, [pc, #104]	; (20bf0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20b86:	881b      	ldrh	r3, [r3, #0]
   20b88:	001a      	movs	r2, r3
   20b8a:	4b1c      	ldr	r3, [pc, #112]	; (20bfc <sd_mmc_spi_start_write_blocks+0xb4>)
   20b8c:	681b      	ldr	r3, [r3, #0]
   20b8e:	18d2      	adds	r2, r2, r3
   20b90:	4b1a      	ldr	r3, [pc, #104]	; (20bfc <sd_mmc_spi_start_write_blocks+0xb4>)
   20b92:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20b94:	4b1a      	ldr	r3, [pc, #104]	; (20c00 <sd_mmc_spi_start_write_blocks+0xb8>)
   20b96:	4798      	blx	r3
   20b98:	0003      	movs	r3, r0
   20b9a:	001a      	movs	r2, r3
   20b9c:	2301      	movs	r3, #1
   20b9e:	4053      	eors	r3, r2
   20ba0:	b2db      	uxtb	r3, r3
   20ba2:	2b00      	cmp	r3, #0
   20ba4:	d001      	beq.n	20baa <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20ba6:	2300      	movs	r3, #0
   20ba8:	e019      	b.n	20bde <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20baa:	1cbb      	adds	r3, r7, #2
   20bac:	881b      	ldrh	r3, [r3, #0]
   20bae:	2b00      	cmp	r3, #0
   20bb0:	d00d      	beq.n	20bce <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20bb2:	4b14      	ldr	r3, [pc, #80]	; (20c04 <sd_mmc_spi_start_write_blocks+0xbc>)
   20bb4:	4798      	blx	r3
   20bb6:	0003      	movs	r3, r0
   20bb8:	001a      	movs	r2, r3
   20bba:	2301      	movs	r3, #1
   20bbc:	4053      	eors	r3, r2
   20bbe:	b2db      	uxtb	r3, r3
   20bc0:	2b00      	cmp	r3, #0
   20bc2:	d004      	beq.n	20bce <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20bc4:	4b08      	ldr	r3, [pc, #32]	; (20be8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20bc6:	2205      	movs	r2, #5
   20bc8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20bca:	2300      	movs	r3, #0
   20bcc:	e007      	b.n	20bde <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20bce:	1cbb      	adds	r3, r7, #2
   20bd0:	881b      	ldrh	r3, [r3, #0]
   20bd2:	1cba      	adds	r2, r7, #2
   20bd4:	1e59      	subs	r1, r3, #1
   20bd6:	8011      	strh	r1, [r2, #0]
   20bd8:	2b00      	cmp	r3, #0
   20bda:	d1c2      	bne.n	20b62 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20bdc:	2301      	movs	r3, #1
}
   20bde:	0018      	movs	r0, r3
   20be0:	46bd      	mov	sp, r7
   20be2:	b004      	add	sp, #16
   20be4:	bd80      	pop	{r7, pc}
   20be6:	46c0      	nop			; (mov r8, r8)
   20be8:	20004297 	.word	0x20004297
   20bec:	00020441 	.word	0x00020441
   20bf0:	200042a0 	.word	0x200042a0
   20bf4:	20004254 	.word	0x20004254
   20bf8:	00028df1 	.word	0x00028df1
   20bfc:	2000429c 	.word	0x2000429c
   20c00:	00020491 	.word	0x00020491
   20c04:	00020325 	.word	0x00020325

00020c08 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20c08:	b580      	push	{r7, lr}
   20c0a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20c0c:	4b09      	ldr	r3, [pc, #36]	; (20c34 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20c0e:	4798      	blx	r3
   20c10:	0003      	movs	r3, r0
   20c12:	001a      	movs	r2, r3
   20c14:	2301      	movs	r3, #1
   20c16:	4053      	eors	r3, r2
   20c18:	b2db      	uxtb	r3, r3
   20c1a:	2b00      	cmp	r3, #0
   20c1c:	d004      	beq.n	20c28 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20c1e:	4b06      	ldr	r3, [pc, #24]	; (20c38 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20c20:	2205      	movs	r2, #5
   20c22:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20c24:	2300      	movs	r3, #0
   20c26:	e002      	b.n	20c2e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20c28:	4b04      	ldr	r3, [pc, #16]	; (20c3c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20c2a:	4798      	blx	r3
   20c2c:	0003      	movs	r3, r0
}
   20c2e:	0018      	movs	r0, r3
   20c30:	46bd      	mov	sp, r7
   20c32:	bd80      	pop	{r7, pc}
   20c34:	00020325 	.word	0x00020325
   20c38:	20004297 	.word	0x20004297
   20c3c:	00020525 	.word	0x00020525

00020c40 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   20c40:	b580      	push	{r7, lr}
   20c42:	b082      	sub	sp, #8
   20c44:	af00      	add	r7, sp, #0
   20c46:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   20c48:	687b      	ldr	r3, [r7, #4]
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d00c      	beq.n	20c68 <delay_cycles+0x28>
		SysTick->LOAD = n;
   20c4e:	4b08      	ldr	r3, [pc, #32]	; (20c70 <delay_cycles+0x30>)
   20c50:	687a      	ldr	r2, [r7, #4]
   20c52:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   20c54:	4b06      	ldr	r3, [pc, #24]	; (20c70 <delay_cycles+0x30>)
   20c56:	2200      	movs	r2, #0
   20c58:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   20c5a:	46c0      	nop			; (mov r8, r8)
   20c5c:	4b04      	ldr	r3, [pc, #16]	; (20c70 <delay_cycles+0x30>)
   20c5e:	681a      	ldr	r2, [r3, #0]
   20c60:	2380      	movs	r3, #128	; 0x80
   20c62:	025b      	lsls	r3, r3, #9
   20c64:	4013      	ands	r3, r2
   20c66:	d0f9      	beq.n	20c5c <delay_cycles+0x1c>
		};
	}
}
   20c68:	46c0      	nop			; (mov r8, r8)
   20c6a:	46bd      	mov	sp, r7
   20c6c:	b002      	add	sp, #8
   20c6e:	bd80      	pop	{r7, pc}
   20c70:	e000e010 	.word	0xe000e010

00020c74 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20c74:	b580      	push	{r7, lr}
   20c76:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20c78:	2000      	movs	r0, #0
   20c7a:	4b0f      	ldr	r3, [pc, #60]	; (20cb8 <delay_init+0x44>)
   20c7c:	4798      	blx	r3
   20c7e:	0002      	movs	r2, r0
   20c80:	4b0e      	ldr	r3, [pc, #56]	; (20cbc <delay_init+0x48>)
   20c82:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20c84:	4b0d      	ldr	r3, [pc, #52]	; (20cbc <delay_init+0x48>)
   20c86:	6818      	ldr	r0, [r3, #0]
   20c88:	4b0d      	ldr	r3, [pc, #52]	; (20cc0 <delay_init+0x4c>)
   20c8a:	22fa      	movs	r2, #250	; 0xfa
   20c8c:	0091      	lsls	r1, r2, #2
   20c8e:	4798      	blx	r3
   20c90:	0003      	movs	r3, r0
   20c92:	001a      	movs	r2, r3
   20c94:	4b09      	ldr	r3, [pc, #36]	; (20cbc <delay_init+0x48>)
   20c96:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20c98:	4b08      	ldr	r3, [pc, #32]	; (20cbc <delay_init+0x48>)
   20c9a:	6818      	ldr	r0, [r3, #0]
   20c9c:	4b08      	ldr	r3, [pc, #32]	; (20cc0 <delay_init+0x4c>)
   20c9e:	22fa      	movs	r2, #250	; 0xfa
   20ca0:	0091      	lsls	r1, r2, #2
   20ca2:	4798      	blx	r3
   20ca4:	0003      	movs	r3, r0
   20ca6:	001a      	movs	r2, r3
   20ca8:	4b06      	ldr	r3, [pc, #24]	; (20cc4 <delay_init+0x50>)
   20caa:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20cac:	4b06      	ldr	r3, [pc, #24]	; (20cc8 <delay_init+0x54>)
   20cae:	2205      	movs	r2, #5
   20cb0:	601a      	str	r2, [r3, #0]
}
   20cb2:	46c0      	nop			; (mov r8, r8)
   20cb4:	46bd      	mov	sp, r7
   20cb6:	bd80      	pop	{r7, pc}
   20cb8:	0002a975 	.word	0x0002a975
   20cbc:	2000011c 	.word	0x2000011c
   20cc0:	00033715 	.word	0x00033715
   20cc4:	20000120 	.word	0x20000120
   20cc8:	e000e010 	.word	0xe000e010

00020ccc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   20ccc:	b580      	push	{r7, lr}
   20cce:	b082      	sub	sp, #8
   20cd0:	af00      	add	r7, sp, #0
   20cd2:	6078      	str	r0, [r7, #4]
	while (n--) {
   20cd4:	e004      	b.n	20ce0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   20cd6:	4b07      	ldr	r3, [pc, #28]	; (20cf4 <delay_cycles_ms+0x28>)
   20cd8:	681b      	ldr	r3, [r3, #0]
   20cda:	0018      	movs	r0, r3
   20cdc:	4b06      	ldr	r3, [pc, #24]	; (20cf8 <delay_cycles_ms+0x2c>)
   20cde:	4798      	blx	r3
	while (n--) {
   20ce0:	687b      	ldr	r3, [r7, #4]
   20ce2:	1e5a      	subs	r2, r3, #1
   20ce4:	607a      	str	r2, [r7, #4]
   20ce6:	2b00      	cmp	r3, #0
   20ce8:	d1f5      	bne.n	20cd6 <delay_cycles_ms+0xa>
	}
}
   20cea:	46c0      	nop			; (mov r8, r8)
   20cec:	46bd      	mov	sp, r7
   20cee:	b002      	add	sp, #8
   20cf0:	bd80      	pop	{r7, pc}
   20cf2:	46c0      	nop			; (mov r8, r8)
   20cf4:	2000011c 	.word	0x2000011c
   20cf8:	00020c41 	.word	0x00020c41

00020cfc <system_pinmux_get_group_from_gpio_pin>:
{
   20cfc:	b580      	push	{r7, lr}
   20cfe:	b084      	sub	sp, #16
   20d00:	af00      	add	r7, sp, #0
   20d02:	0002      	movs	r2, r0
   20d04:	1dfb      	adds	r3, r7, #7
   20d06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20d08:	230f      	movs	r3, #15
   20d0a:	18fb      	adds	r3, r7, r3
   20d0c:	1dfa      	adds	r2, r7, #7
   20d0e:	7812      	ldrb	r2, [r2, #0]
   20d10:	09d2      	lsrs	r2, r2, #7
   20d12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20d14:	230e      	movs	r3, #14
   20d16:	18fb      	adds	r3, r7, r3
   20d18:	1dfa      	adds	r2, r7, #7
   20d1a:	7812      	ldrb	r2, [r2, #0]
   20d1c:	0952      	lsrs	r2, r2, #5
   20d1e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20d20:	4b0d      	ldr	r3, [pc, #52]	; (20d58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20d22:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20d24:	230f      	movs	r3, #15
   20d26:	18fb      	adds	r3, r7, r3
   20d28:	781b      	ldrb	r3, [r3, #0]
   20d2a:	2b00      	cmp	r3, #0
   20d2c:	d10f      	bne.n	20d4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20d2e:	230f      	movs	r3, #15
   20d30:	18fb      	adds	r3, r7, r3
   20d32:	781b      	ldrb	r3, [r3, #0]
   20d34:	009b      	lsls	r3, r3, #2
   20d36:	2210      	movs	r2, #16
   20d38:	4694      	mov	ip, r2
   20d3a:	44bc      	add	ip, r7
   20d3c:	4463      	add	r3, ip
   20d3e:	3b08      	subs	r3, #8
   20d40:	681a      	ldr	r2, [r3, #0]
   20d42:	230e      	movs	r3, #14
   20d44:	18fb      	adds	r3, r7, r3
   20d46:	781b      	ldrb	r3, [r3, #0]
   20d48:	01db      	lsls	r3, r3, #7
   20d4a:	18d3      	adds	r3, r2, r3
   20d4c:	e000      	b.n	20d50 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20d4e:	2300      	movs	r3, #0
}
   20d50:	0018      	movs	r0, r3
   20d52:	46bd      	mov	sp, r7
   20d54:	b004      	add	sp, #16
   20d56:	bd80      	pop	{r7, pc}
   20d58:	41004400 	.word	0x41004400

00020d5c <system_interrupt_enable_global>:
{
   20d5c:	b580      	push	{r7, lr}
   20d5e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20d60:	4b04      	ldr	r3, [pc, #16]	; (20d74 <system_interrupt_enable_global+0x18>)
   20d62:	2201      	movs	r2, #1
   20d64:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20d66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20d6a:	b662      	cpsie	i
}
   20d6c:	46c0      	nop			; (mov r8, r8)
   20d6e:	46bd      	mov	sp, r7
   20d70:	bd80      	pop	{r7, pc}
   20d72:	46c0      	nop			; (mov r8, r8)
   20d74:	20000126 	.word	0x20000126

00020d78 <port_get_group_from_gpio_pin>:
{
   20d78:	b580      	push	{r7, lr}
   20d7a:	b082      	sub	sp, #8
   20d7c:	af00      	add	r7, sp, #0
   20d7e:	0002      	movs	r2, r0
   20d80:	1dfb      	adds	r3, r7, #7
   20d82:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20d84:	1dfb      	adds	r3, r7, #7
   20d86:	781b      	ldrb	r3, [r3, #0]
   20d88:	0018      	movs	r0, r3
   20d8a:	4b03      	ldr	r3, [pc, #12]	; (20d98 <port_get_group_from_gpio_pin+0x20>)
   20d8c:	4798      	blx	r3
   20d8e:	0003      	movs	r3, r0
}
   20d90:	0018      	movs	r0, r3
   20d92:	46bd      	mov	sp, r7
   20d94:	b002      	add	sp, #8
   20d96:	bd80      	pop	{r7, pc}
   20d98:	00020cfd 	.word	0x00020cfd

00020d9c <port_get_config_defaults>:
{
   20d9c:	b580      	push	{r7, lr}
   20d9e:	b082      	sub	sp, #8
   20da0:	af00      	add	r7, sp, #0
   20da2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20da4:	687b      	ldr	r3, [r7, #4]
   20da6:	2200      	movs	r2, #0
   20da8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20daa:	687b      	ldr	r3, [r7, #4]
   20dac:	2201      	movs	r2, #1
   20dae:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20db0:	687b      	ldr	r3, [r7, #4]
   20db2:	2200      	movs	r2, #0
   20db4:	709a      	strb	r2, [r3, #2]
}
   20db6:	46c0      	nop			; (mov r8, r8)
   20db8:	46bd      	mov	sp, r7
   20dba:	b002      	add	sp, #8
   20dbc:	bd80      	pop	{r7, pc}
	...

00020dc0 <port_pin_set_output_level>:
{
   20dc0:	b580      	push	{r7, lr}
   20dc2:	b084      	sub	sp, #16
   20dc4:	af00      	add	r7, sp, #0
   20dc6:	0002      	movs	r2, r0
   20dc8:	1dfb      	adds	r3, r7, #7
   20dca:	701a      	strb	r2, [r3, #0]
   20dcc:	1dbb      	adds	r3, r7, #6
   20dce:	1c0a      	adds	r2, r1, #0
   20dd0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20dd2:	1dfb      	adds	r3, r7, #7
   20dd4:	781b      	ldrb	r3, [r3, #0]
   20dd6:	0018      	movs	r0, r3
   20dd8:	4b0d      	ldr	r3, [pc, #52]	; (20e10 <port_pin_set_output_level+0x50>)
   20dda:	4798      	blx	r3
   20ddc:	0003      	movs	r3, r0
   20dde:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20de0:	1dfb      	adds	r3, r7, #7
   20de2:	781b      	ldrb	r3, [r3, #0]
   20de4:	221f      	movs	r2, #31
   20de6:	4013      	ands	r3, r2
   20de8:	2201      	movs	r2, #1
   20dea:	409a      	lsls	r2, r3
   20dec:	0013      	movs	r3, r2
   20dee:	60bb      	str	r3, [r7, #8]
	if (level) {
   20df0:	1dbb      	adds	r3, r7, #6
   20df2:	781b      	ldrb	r3, [r3, #0]
   20df4:	2b00      	cmp	r3, #0
   20df6:	d003      	beq.n	20e00 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20df8:	68fb      	ldr	r3, [r7, #12]
   20dfa:	68ba      	ldr	r2, [r7, #8]
   20dfc:	619a      	str	r2, [r3, #24]
}
   20dfe:	e002      	b.n	20e06 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20e00:	68fb      	ldr	r3, [r7, #12]
   20e02:	68ba      	ldr	r2, [r7, #8]
   20e04:	615a      	str	r2, [r3, #20]
}
   20e06:	46c0      	nop			; (mov r8, r8)
   20e08:	46bd      	mov	sp, r7
   20e0a:	b004      	add	sp, #16
   20e0c:	bd80      	pop	{r7, pc}
   20e0e:	46c0      	nop			; (mov r8, r8)
   20e10:	00020d79 	.word	0x00020d79

00020e14 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20e14:	b580      	push	{r7, lr}
   20e16:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20e18:	4b04      	ldr	r3, [pc, #16]	; (20e2c <chip_isr+0x18>)
   20e1a:	681b      	ldr	r3, [r3, #0]
   20e1c:	2b00      	cmp	r3, #0
   20e1e:	d002      	beq.n	20e26 <chip_isr+0x12>
		gpfIsr();
   20e20:	4b02      	ldr	r3, [pc, #8]	; (20e2c <chip_isr+0x18>)
   20e22:	681b      	ldr	r3, [r3, #0]
   20e24:	4798      	blx	r3
	}
}
   20e26:	46c0      	nop			; (mov r8, r8)
   20e28:	46bd      	mov	sp, r7
   20e2a:	bd80      	pop	{r7, pc}
   20e2c:	200042a4 	.word	0x200042a4

00020e30 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20e30:	b580      	push	{r7, lr}
   20e32:	b082      	sub	sp, #8
   20e34:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20e36:	1d3b      	adds	r3, r7, #4
   20e38:	0018      	movs	r0, r3
   20e3a:	4b10      	ldr	r3, [pc, #64]	; (20e7c <init_chip_pins+0x4c>)
   20e3c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20e3e:	1d3b      	adds	r3, r7, #4
   20e40:	2201      	movs	r2, #1
   20e42:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20e44:	1d3b      	adds	r3, r7, #4
   20e46:	0019      	movs	r1, r3
   20e48:	201b      	movs	r0, #27
   20e4a:	4b0d      	ldr	r3, [pc, #52]	; (20e80 <init_chip_pins+0x50>)
   20e4c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20e4e:	1d3b      	adds	r3, r7, #4
   20e50:	0019      	movs	r1, r3
   20e52:	201c      	movs	r0, #28
   20e54:	4b0a      	ldr	r3, [pc, #40]	; (20e80 <init_chip_pins+0x50>)
   20e56:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20e58:	1d3b      	adds	r3, r7, #4
   20e5a:	0019      	movs	r1, r3
   20e5c:	2028      	movs	r0, #40	; 0x28
   20e5e:	4b08      	ldr	r3, [pc, #32]	; (20e80 <init_chip_pins+0x50>)
   20e60:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20e62:	2100      	movs	r1, #0
   20e64:	201c      	movs	r0, #28
   20e66:	4b07      	ldr	r3, [pc, #28]	; (20e84 <init_chip_pins+0x54>)
   20e68:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20e6a:	2100      	movs	r1, #0
   20e6c:	201b      	movs	r0, #27
   20e6e:	4b05      	ldr	r3, [pc, #20]	; (20e84 <init_chip_pins+0x54>)
   20e70:	4798      	blx	r3
}
   20e72:	46c0      	nop			; (mov r8, r8)
   20e74:	46bd      	mov	sp, r7
   20e76:	b002      	add	sp, #8
   20e78:	bd80      	pop	{r7, pc}
   20e7a:	46c0      	nop			; (mov r8, r8)
   20e7c:	00020d9d 	.word	0x00020d9d
   20e80:	000275bd 	.word	0x000275bd
   20e84:	00020dc1 	.word	0x00020dc1

00020e88 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20e88:	b580      	push	{r7, lr}
   20e8a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20e8c:	4b0b      	ldr	r3, [pc, #44]	; (20ebc <nm_bsp_init+0x34>)
   20e8e:	2200      	movs	r2, #0
   20e90:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20e92:	4b0b      	ldr	r3, [pc, #44]	; (20ec0 <nm_bsp_init+0x38>)
   20e94:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20e96:	4b0b      	ldr	r3, [pc, #44]	; (20ec4 <nm_bsp_init+0x3c>)
   20e98:	681b      	ldr	r3, [r3, #0]
   20e9a:	2201      	movs	r2, #1
   20e9c:	4013      	ands	r3, r2
   20e9e:	d004      	beq.n	20eaa <nm_bsp_init+0x22>
   20ea0:	4b08      	ldr	r3, [pc, #32]	; (20ec4 <nm_bsp_init+0x3c>)
   20ea2:	681b      	ldr	r3, [r3, #0]
   20ea4:	2202      	movs	r2, #2
   20ea6:	4013      	ands	r3, r2
   20ea8:	d101      	bne.n	20eae <nm_bsp_init+0x26>
	    delay_init();
   20eaa:	4b07      	ldr	r3, [pc, #28]	; (20ec8 <nm_bsp_init+0x40>)
   20eac:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20eae:	4b07      	ldr	r3, [pc, #28]	; (20ecc <nm_bsp_init+0x44>)
   20eb0:	4798      	blx	r3

	return M2M_SUCCESS;
   20eb2:	2300      	movs	r3, #0
}
   20eb4:	0018      	movs	r0, r3
   20eb6:	46bd      	mov	sp, r7
   20eb8:	bd80      	pop	{r7, pc}
   20eba:	46c0      	nop			; (mov r8, r8)
   20ebc:	200042a4 	.word	0x200042a4
   20ec0:	00020e31 	.word	0x00020e31
   20ec4:	e000e010 	.word	0xe000e010
   20ec8:	00020c75 	.word	0x00020c75
   20ecc:	00020d5d 	.word	0x00020d5d

00020ed0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20ed0:	b580      	push	{r7, lr}
   20ed2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20ed4:	2100      	movs	r1, #0
   20ed6:	201c      	movs	r0, #28
   20ed8:	4b0b      	ldr	r3, [pc, #44]	; (20f08 <nm_bsp_reset+0x38>)
   20eda:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20edc:	2100      	movs	r1, #0
   20ede:	201b      	movs	r0, #27
   20ee0:	4b09      	ldr	r3, [pc, #36]	; (20f08 <nm_bsp_reset+0x38>)
   20ee2:	4798      	blx	r3
	nm_bsp_sleep(1);
   20ee4:	2001      	movs	r0, #1
   20ee6:	4b09      	ldr	r3, [pc, #36]	; (20f0c <nm_bsp_reset+0x3c>)
   20ee8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20eea:	2101      	movs	r1, #1
   20eec:	201c      	movs	r0, #28
   20eee:	4b06      	ldr	r3, [pc, #24]	; (20f08 <nm_bsp_reset+0x38>)
   20ef0:	4798      	blx	r3
	nm_bsp_sleep(10);
   20ef2:	200a      	movs	r0, #10
   20ef4:	4b05      	ldr	r3, [pc, #20]	; (20f0c <nm_bsp_reset+0x3c>)
   20ef6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   20ef8:	2101      	movs	r1, #1
   20efa:	201b      	movs	r0, #27
   20efc:	4b02      	ldr	r3, [pc, #8]	; (20f08 <nm_bsp_reset+0x38>)
   20efe:	4798      	blx	r3
}
   20f00:	46c0      	nop			; (mov r8, r8)
   20f02:	46bd      	mov	sp, r7
   20f04:	bd80      	pop	{r7, pc}
   20f06:	46c0      	nop			; (mov r8, r8)
   20f08:	00020dc1 	.word	0x00020dc1
   20f0c:	00020f11 	.word	0x00020f11

00020f10 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   20f10:	b580      	push	{r7, lr}
   20f12:	b082      	sub	sp, #8
   20f14:	af00      	add	r7, sp, #0
   20f16:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   20f18:	687b      	ldr	r3, [r7, #4]
   20f1a:	0018      	movs	r0, r3
   20f1c:	4b02      	ldr	r3, [pc, #8]	; (20f28 <nm_bsp_sleep+0x18>)
   20f1e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   20f20:	46c0      	nop			; (mov r8, r8)
   20f22:	46bd      	mov	sp, r7
   20f24:	b002      	add	sp, #8
   20f26:	bd80      	pop	{r7, pc}
   20f28:	0001ccc1 	.word	0x0001ccc1

00020f2c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   20f2c:	b580      	push	{r7, lr}
   20f2e:	b086      	sub	sp, #24
   20f30:	af00      	add	r7, sp, #0
   20f32:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   20f34:	4b15      	ldr	r3, [pc, #84]	; (20f8c <nm_bsp_register_isr+0x60>)
   20f36:	687a      	ldr	r2, [r7, #4]
   20f38:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   20f3a:	230c      	movs	r3, #12
   20f3c:	18fb      	adds	r3, r7, r3
   20f3e:	0018      	movs	r0, r3
   20f40:	4b13      	ldr	r3, [pc, #76]	; (20f90 <nm_bsp_register_isr+0x64>)
   20f42:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   20f44:	230c      	movs	r3, #12
   20f46:	18fb      	adds	r3, r7, r3
   20f48:	2229      	movs	r2, #41	; 0x29
   20f4a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   20f4c:	230c      	movs	r3, #12
   20f4e:	18fb      	adds	r3, r7, r3
   20f50:	2200      	movs	r2, #0
   20f52:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20f54:	230c      	movs	r3, #12
   20f56:	18fb      	adds	r3, r7, r3
   20f58:	2201      	movs	r2, #1
   20f5a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   20f5c:	230c      	movs	r3, #12
   20f5e:	18fb      	adds	r3, r7, r3
   20f60:	2202      	movs	r2, #2
   20f62:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20f64:	230c      	movs	r3, #12
   20f66:	18fb      	adds	r3, r7, r3
   20f68:	0019      	movs	r1, r3
   20f6a:	2009      	movs	r0, #9
   20f6c:	4b09      	ldr	r3, [pc, #36]	; (20f94 <nm_bsp_register_isr+0x68>)
   20f6e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20f70:	4b09      	ldr	r3, [pc, #36]	; (20f98 <nm_bsp_register_isr+0x6c>)
   20f72:	2200      	movs	r2, #0
   20f74:	2109      	movs	r1, #9
   20f76:	0018      	movs	r0, r3
   20f78:	4b08      	ldr	r3, [pc, #32]	; (20f9c <nm_bsp_register_isr+0x70>)
   20f7a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20f7c:	2100      	movs	r1, #0
   20f7e:	2009      	movs	r0, #9
   20f80:	4b07      	ldr	r3, [pc, #28]	; (20fa0 <nm_bsp_register_isr+0x74>)
   20f82:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20f84:	46c0      	nop			; (mov r8, r8)
   20f86:	46bd      	mov	sp, r7
   20f88:	b006      	add	sp, #24
   20f8a:	bd80      	pop	{r7, pc}
   20f8c:	200042a4 	.word	0x200042a4
   20f90:	00027465 	.word	0x00027465
   20f94:	00027499 	.word	0x00027499
   20f98:	00020e15 	.word	0x00020e15
   20f9c:	00027065 	.word	0x00027065
   20fa0:	000270c9 	.word	0x000270c9

00020fa4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20fa4:	b580      	push	{r7, lr}
   20fa6:	b082      	sub	sp, #8
   20fa8:	af00      	add	r7, sp, #0
   20faa:	0002      	movs	r2, r0
   20fac:	1dfb      	adds	r3, r7, #7
   20fae:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20fb0:	1dfb      	adds	r3, r7, #7
   20fb2:	781b      	ldrb	r3, [r3, #0]
   20fb4:	2b00      	cmp	r3, #0
   20fb6:	d004      	beq.n	20fc2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20fb8:	2100      	movs	r1, #0
   20fba:	2009      	movs	r0, #9
   20fbc:	4b05      	ldr	r3, [pc, #20]	; (20fd4 <nm_bsp_interrupt_ctrl+0x30>)
   20fbe:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20fc0:	e003      	b.n	20fca <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20fc2:	2100      	movs	r1, #0
   20fc4:	2009      	movs	r0, #9
   20fc6:	4b04      	ldr	r3, [pc, #16]	; (20fd8 <nm_bsp_interrupt_ctrl+0x34>)
   20fc8:	4798      	blx	r3
}
   20fca:	46c0      	nop			; (mov r8, r8)
   20fcc:	46bd      	mov	sp, r7
   20fce:	b002      	add	sp, #8
   20fd0:	bd80      	pop	{r7, pc}
   20fd2:	46c0      	nop			; (mov r8, r8)
   20fd4:	000270c9 	.word	0x000270c9
   20fd8:	00027111 	.word	0x00027111

00020fdc <system_pinmux_get_group_from_gpio_pin>:
{
   20fdc:	b580      	push	{r7, lr}
   20fde:	b084      	sub	sp, #16
   20fe0:	af00      	add	r7, sp, #0
   20fe2:	0002      	movs	r2, r0
   20fe4:	1dfb      	adds	r3, r7, #7
   20fe6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20fe8:	230f      	movs	r3, #15
   20fea:	18fb      	adds	r3, r7, r3
   20fec:	1dfa      	adds	r2, r7, #7
   20fee:	7812      	ldrb	r2, [r2, #0]
   20ff0:	09d2      	lsrs	r2, r2, #7
   20ff2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20ff4:	230e      	movs	r3, #14
   20ff6:	18fb      	adds	r3, r7, r3
   20ff8:	1dfa      	adds	r2, r7, #7
   20ffa:	7812      	ldrb	r2, [r2, #0]
   20ffc:	0952      	lsrs	r2, r2, #5
   20ffe:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   21000:	4b0d      	ldr	r3, [pc, #52]	; (21038 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   21002:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21004:	230f      	movs	r3, #15
   21006:	18fb      	adds	r3, r7, r3
   21008:	781b      	ldrb	r3, [r3, #0]
   2100a:	2b00      	cmp	r3, #0
   2100c:	d10f      	bne.n	2102e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2100e:	230f      	movs	r3, #15
   21010:	18fb      	adds	r3, r7, r3
   21012:	781b      	ldrb	r3, [r3, #0]
   21014:	009b      	lsls	r3, r3, #2
   21016:	2210      	movs	r2, #16
   21018:	4694      	mov	ip, r2
   2101a:	44bc      	add	ip, r7
   2101c:	4463      	add	r3, ip
   2101e:	3b08      	subs	r3, #8
   21020:	681a      	ldr	r2, [r3, #0]
   21022:	230e      	movs	r3, #14
   21024:	18fb      	adds	r3, r7, r3
   21026:	781b      	ldrb	r3, [r3, #0]
   21028:	01db      	lsls	r3, r3, #7
   2102a:	18d3      	adds	r3, r2, r3
   2102c:	e000      	b.n	21030 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2102e:	2300      	movs	r3, #0
}
   21030:	0018      	movs	r0, r3
   21032:	46bd      	mov	sp, r7
   21034:	b004      	add	sp, #16
   21036:	bd80      	pop	{r7, pc}
   21038:	41004400 	.word	0x41004400

0002103c <system_interrupt_enable>:
{
   2103c:	b580      	push	{r7, lr}
   2103e:	b082      	sub	sp, #8
   21040:	af00      	add	r7, sp, #0
   21042:	0002      	movs	r2, r0
   21044:	1dfb      	adds	r3, r7, #7
   21046:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21048:	4b06      	ldr	r3, [pc, #24]	; (21064 <system_interrupt_enable+0x28>)
   2104a:	1dfa      	adds	r2, r7, #7
   2104c:	7812      	ldrb	r2, [r2, #0]
   2104e:	0011      	movs	r1, r2
   21050:	221f      	movs	r2, #31
   21052:	400a      	ands	r2, r1
   21054:	2101      	movs	r1, #1
   21056:	4091      	lsls	r1, r2
   21058:	000a      	movs	r2, r1
   2105a:	601a      	str	r2, [r3, #0]
}
   2105c:	46c0      	nop			; (mov r8, r8)
   2105e:	46bd      	mov	sp, r7
   21060:	b002      	add	sp, #8
   21062:	bd80      	pop	{r7, pc}
   21064:	e000e100 	.word	0xe000e100

00021068 <system_interrupt_disable>:
{
   21068:	b580      	push	{r7, lr}
   2106a:	b082      	sub	sp, #8
   2106c:	af00      	add	r7, sp, #0
   2106e:	0002      	movs	r2, r0
   21070:	1dfb      	adds	r3, r7, #7
   21072:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21074:	4a07      	ldr	r2, [pc, #28]	; (21094 <system_interrupt_disable+0x2c>)
   21076:	1dfb      	adds	r3, r7, #7
   21078:	781b      	ldrb	r3, [r3, #0]
   2107a:	0019      	movs	r1, r3
   2107c:	231f      	movs	r3, #31
   2107e:	400b      	ands	r3, r1
   21080:	2101      	movs	r1, #1
   21082:	4099      	lsls	r1, r3
   21084:	000b      	movs	r3, r1
   21086:	0019      	movs	r1, r3
   21088:	2380      	movs	r3, #128	; 0x80
   2108a:	50d1      	str	r1, [r2, r3]
}
   2108c:	46c0      	nop			; (mov r8, r8)
   2108e:	46bd      	mov	sp, r7
   21090:	b002      	add	sp, #8
   21092:	bd80      	pop	{r7, pc}
   21094:	e000e100 	.word	0xe000e100

00021098 <port_get_group_from_gpio_pin>:
{
   21098:	b580      	push	{r7, lr}
   2109a:	b082      	sub	sp, #8
   2109c:	af00      	add	r7, sp, #0
   2109e:	0002      	movs	r2, r0
   210a0:	1dfb      	adds	r3, r7, #7
   210a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   210a4:	1dfb      	adds	r3, r7, #7
   210a6:	781b      	ldrb	r3, [r3, #0]
   210a8:	0018      	movs	r0, r3
   210aa:	4b03      	ldr	r3, [pc, #12]	; (210b8 <port_get_group_from_gpio_pin+0x20>)
   210ac:	4798      	blx	r3
   210ae:	0003      	movs	r3, r0
}
   210b0:	0018      	movs	r0, r3
   210b2:	46bd      	mov	sp, r7
   210b4:	b002      	add	sp, #8
   210b6:	bd80      	pop	{r7, pc}
   210b8:	00020fdd 	.word	0x00020fdd

000210bc <port_get_config_defaults>:
{
   210bc:	b580      	push	{r7, lr}
   210be:	b082      	sub	sp, #8
   210c0:	af00      	add	r7, sp, #0
   210c2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   210c4:	687b      	ldr	r3, [r7, #4]
   210c6:	2200      	movs	r2, #0
   210c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   210ca:	687b      	ldr	r3, [r7, #4]
   210cc:	2201      	movs	r2, #1
   210ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   210d0:	687b      	ldr	r3, [r7, #4]
   210d2:	2200      	movs	r2, #0
   210d4:	709a      	strb	r2, [r3, #2]
}
   210d6:	46c0      	nop			; (mov r8, r8)
   210d8:	46bd      	mov	sp, r7
   210da:	b002      	add	sp, #8
   210dc:	bd80      	pop	{r7, pc}
	...

000210e0 <port_pin_set_output_level>:
{
   210e0:	b580      	push	{r7, lr}
   210e2:	b084      	sub	sp, #16
   210e4:	af00      	add	r7, sp, #0
   210e6:	0002      	movs	r2, r0
   210e8:	1dfb      	adds	r3, r7, #7
   210ea:	701a      	strb	r2, [r3, #0]
   210ec:	1dbb      	adds	r3, r7, #6
   210ee:	1c0a      	adds	r2, r1, #0
   210f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   210f2:	1dfb      	adds	r3, r7, #7
   210f4:	781b      	ldrb	r3, [r3, #0]
   210f6:	0018      	movs	r0, r3
   210f8:	4b0d      	ldr	r3, [pc, #52]	; (21130 <port_pin_set_output_level+0x50>)
   210fa:	4798      	blx	r3
   210fc:	0003      	movs	r3, r0
   210fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21100:	1dfb      	adds	r3, r7, #7
   21102:	781b      	ldrb	r3, [r3, #0]
   21104:	221f      	movs	r2, #31
   21106:	4013      	ands	r3, r2
   21108:	2201      	movs	r2, #1
   2110a:	409a      	lsls	r2, r3
   2110c:	0013      	movs	r3, r2
   2110e:	60bb      	str	r3, [r7, #8]
	if (level) {
   21110:	1dbb      	adds	r3, r7, #6
   21112:	781b      	ldrb	r3, [r3, #0]
   21114:	2b00      	cmp	r3, #0
   21116:	d003      	beq.n	21120 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21118:	68fb      	ldr	r3, [r7, #12]
   2111a:	68ba      	ldr	r2, [r7, #8]
   2111c:	619a      	str	r2, [r3, #24]
}
   2111e:	e002      	b.n	21126 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   21120:	68fb      	ldr	r3, [r7, #12]
   21122:	68ba      	ldr	r2, [r7, #8]
   21124:	615a      	str	r2, [r3, #20]
}
   21126:	46c0      	nop			; (mov r8, r8)
   21128:	46bd      	mov	sp, r7
   2112a:	b004      	add	sp, #16
   2112c:	bd80      	pop	{r7, pc}
   2112e:	46c0      	nop			; (mov r8, r8)
   21130:	00021099 	.word	0x00021099

00021134 <spi_is_syncing>:
{
   21134:	b580      	push	{r7, lr}
   21136:	b084      	sub	sp, #16
   21138:	af00      	add	r7, sp, #0
   2113a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2113c:	687b      	ldr	r3, [r7, #4]
   2113e:	681b      	ldr	r3, [r3, #0]
   21140:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   21142:	68fb      	ldr	r3, [r7, #12]
   21144:	69db      	ldr	r3, [r3, #28]
   21146:	1e5a      	subs	r2, r3, #1
   21148:	4193      	sbcs	r3, r2
   2114a:	b2db      	uxtb	r3, r3
}
   2114c:	0018      	movs	r0, r3
   2114e:	46bd      	mov	sp, r7
   21150:	b004      	add	sp, #16
   21152:	bd80      	pop	{r7, pc}

00021154 <spi_get_config_defaults>:
{
   21154:	b580      	push	{r7, lr}
   21156:	b082      	sub	sp, #8
   21158:	af00      	add	r7, sp, #0
   2115a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   2115c:	687b      	ldr	r3, [r7, #4]
   2115e:	2201      	movs	r2, #1
   21160:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   21162:	687b      	ldr	r3, [r7, #4]
   21164:	2200      	movs	r2, #0
   21166:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21168:	687b      	ldr	r3, [r7, #4]
   2116a:	2200      	movs	r2, #0
   2116c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2116e:	687b      	ldr	r3, [r7, #4]
   21170:	22c0      	movs	r2, #192	; 0xc0
   21172:	0392      	lsls	r2, r2, #14
   21174:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21176:	687b      	ldr	r3, [r7, #4]
   21178:	2200      	movs	r2, #0
   2117a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2117c:	687b      	ldr	r3, [r7, #4]
   2117e:	2200      	movs	r2, #0
   21180:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   21182:	687b      	ldr	r3, [r7, #4]
   21184:	2201      	movs	r2, #1
   21186:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   21188:	687b      	ldr	r3, [r7, #4]
   2118a:	2201      	movs	r2, #1
   2118c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2118e:	687b      	ldr	r3, [r7, #4]
   21190:	2200      	movs	r2, #0
   21192:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   21194:	687b      	ldr	r3, [r7, #4]
   21196:	2224      	movs	r2, #36	; 0x24
   21198:	2100      	movs	r1, #0
   2119a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   2119c:	687b      	ldr	r3, [r7, #4]
   2119e:	3318      	adds	r3, #24
   211a0:	220c      	movs	r2, #12
   211a2:	2100      	movs	r1, #0
   211a4:	0018      	movs	r0, r3
   211a6:	4b0a      	ldr	r3, [pc, #40]	; (211d0 <spi_get_config_defaults+0x7c>)
   211a8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   211aa:	687b      	ldr	r3, [r7, #4]
   211ac:	4a09      	ldr	r2, [pc, #36]	; (211d4 <spi_get_config_defaults+0x80>)
   211ae:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   211b0:	687b      	ldr	r3, [r7, #4]
   211b2:	2200      	movs	r2, #0
   211b4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   211b6:	687b      	ldr	r3, [r7, #4]
   211b8:	2200      	movs	r2, #0
   211ba:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   211bc:	687b      	ldr	r3, [r7, #4]
   211be:	2200      	movs	r2, #0
   211c0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   211c2:	687b      	ldr	r3, [r7, #4]
   211c4:	2200      	movs	r2, #0
   211c6:	635a      	str	r2, [r3, #52]	; 0x34
};
   211c8:	46c0      	nop			; (mov r8, r8)
   211ca:	46bd      	mov	sp, r7
   211cc:	b002      	add	sp, #8
   211ce:	bd80      	pop	{r7, pc}
   211d0:	000356ef 	.word	0x000356ef
   211d4:	000186a0 	.word	0x000186a0

000211d8 <spi_slave_inst_get_config_defaults>:
{
   211d8:	b580      	push	{r7, lr}
   211da:	b082      	sub	sp, #8
   211dc:	af00      	add	r7, sp, #0
   211de:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   211e0:	687b      	ldr	r3, [r7, #4]
   211e2:	220a      	movs	r2, #10
   211e4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   211e6:	687b      	ldr	r3, [r7, #4]
   211e8:	2200      	movs	r2, #0
   211ea:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   211ec:	687b      	ldr	r3, [r7, #4]
   211ee:	2200      	movs	r2, #0
   211f0:	709a      	strb	r2, [r3, #2]
}
   211f2:	46c0      	nop			; (mov r8, r8)
   211f4:	46bd      	mov	sp, r7
   211f6:	b002      	add	sp, #8
   211f8:	bd80      	pop	{r7, pc}
	...

000211fc <spi_attach_slave>:
{
   211fc:	b580      	push	{r7, lr}
   211fe:	b084      	sub	sp, #16
   21200:	af00      	add	r7, sp, #0
   21202:	6078      	str	r0, [r7, #4]
   21204:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21206:	683b      	ldr	r3, [r7, #0]
   21208:	781a      	ldrb	r2, [r3, #0]
   2120a:	687b      	ldr	r3, [r7, #4]
   2120c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2120e:	683b      	ldr	r3, [r7, #0]
   21210:	785a      	ldrb	r2, [r3, #1]
   21212:	687b      	ldr	r3, [r7, #4]
   21214:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21216:	683b      	ldr	r3, [r7, #0]
   21218:	789a      	ldrb	r2, [r3, #2]
   2121a:	687b      	ldr	r3, [r7, #4]
   2121c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2121e:	230c      	movs	r3, #12
   21220:	18fb      	adds	r3, r7, r3
   21222:	0018      	movs	r0, r3
   21224:	4b0b      	ldr	r3, [pc, #44]	; (21254 <spi_attach_slave+0x58>)
   21226:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21228:	230c      	movs	r3, #12
   2122a:	18fb      	adds	r3, r7, r3
   2122c:	2201      	movs	r2, #1
   2122e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21230:	687b      	ldr	r3, [r7, #4]
   21232:	781b      	ldrb	r3, [r3, #0]
   21234:	220c      	movs	r2, #12
   21236:	18ba      	adds	r2, r7, r2
   21238:	0011      	movs	r1, r2
   2123a:	0018      	movs	r0, r3
   2123c:	4b06      	ldr	r3, [pc, #24]	; (21258 <spi_attach_slave+0x5c>)
   2123e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21240:	687b      	ldr	r3, [r7, #4]
   21242:	781b      	ldrb	r3, [r3, #0]
   21244:	2101      	movs	r1, #1
   21246:	0018      	movs	r0, r3
   21248:	4b04      	ldr	r3, [pc, #16]	; (2125c <spi_attach_slave+0x60>)
   2124a:	4798      	blx	r3
}
   2124c:	46c0      	nop			; (mov r8, r8)
   2124e:	46bd      	mov	sp, r7
   21250:	b004      	add	sp, #16
   21252:	bd80      	pop	{r7, pc}
   21254:	000210bd 	.word	0x000210bd
   21258:	000275bd 	.word	0x000275bd
   2125c:	000210e1 	.word	0x000210e1

00021260 <spi_enable>:
{
   21260:	b580      	push	{r7, lr}
   21262:	b084      	sub	sp, #16
   21264:	af00      	add	r7, sp, #0
   21266:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21268:	687b      	ldr	r3, [r7, #4]
   2126a:	681b      	ldr	r3, [r3, #0]
   2126c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2126e:	687b      	ldr	r3, [r7, #4]
   21270:	681b      	ldr	r3, [r3, #0]
   21272:	0018      	movs	r0, r3
   21274:	4b0b      	ldr	r3, [pc, #44]	; (212a4 <spi_enable+0x44>)
   21276:	4798      	blx	r3
   21278:	0003      	movs	r3, r0
   2127a:	0018      	movs	r0, r3
   2127c:	4b0a      	ldr	r3, [pc, #40]	; (212a8 <spi_enable+0x48>)
   2127e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   21280:	46c0      	nop			; (mov r8, r8)
   21282:	687b      	ldr	r3, [r7, #4]
   21284:	0018      	movs	r0, r3
   21286:	4b09      	ldr	r3, [pc, #36]	; (212ac <spi_enable+0x4c>)
   21288:	4798      	blx	r3
   2128a:	1e03      	subs	r3, r0, #0
   2128c:	d1f9      	bne.n	21282 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2128e:	68fb      	ldr	r3, [r7, #12]
   21290:	681b      	ldr	r3, [r3, #0]
   21292:	2202      	movs	r2, #2
   21294:	431a      	orrs	r2, r3
   21296:	68fb      	ldr	r3, [r7, #12]
   21298:	601a      	str	r2, [r3, #0]
}
   2129a:	46c0      	nop			; (mov r8, r8)
   2129c:	46bd      	mov	sp, r7
   2129e:	b004      	add	sp, #16
   212a0:	bd80      	pop	{r7, pc}
   212a2:	46c0      	nop			; (mov r8, r8)
   212a4:	0002828d 	.word	0x0002828d
   212a8:	0002103d 	.word	0x0002103d
   212ac:	00021135 	.word	0x00021135

000212b0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   212b0:	b580      	push	{r7, lr}
   212b2:	b084      	sub	sp, #16
   212b4:	af00      	add	r7, sp, #0
   212b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   212b8:	687b      	ldr	r3, [r7, #4]
   212ba:	681b      	ldr	r3, [r3, #0]
   212bc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   212be:	687b      	ldr	r3, [r7, #4]
   212c0:	681b      	ldr	r3, [r3, #0]
   212c2:	0018      	movs	r0, r3
   212c4:	4b0e      	ldr	r3, [pc, #56]	; (21300 <spi_disable+0x50>)
   212c6:	4798      	blx	r3
   212c8:	0003      	movs	r3, r0
   212ca:	0018      	movs	r0, r3
   212cc:	4b0d      	ldr	r3, [pc, #52]	; (21304 <spi_disable+0x54>)
   212ce:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   212d0:	46c0      	nop			; (mov r8, r8)
   212d2:	687b      	ldr	r3, [r7, #4]
   212d4:	0018      	movs	r0, r3
   212d6:	4b0c      	ldr	r3, [pc, #48]	; (21308 <spi_disable+0x58>)
   212d8:	4798      	blx	r3
   212da:	1e03      	subs	r3, r0, #0
   212dc:	d1f9      	bne.n	212d2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   212de:	68fb      	ldr	r3, [r7, #12]
   212e0:	228f      	movs	r2, #143	; 0x8f
   212e2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   212e4:	68fb      	ldr	r3, [r7, #12]
   212e6:	228f      	movs	r2, #143	; 0x8f
   212e8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   212ea:	68fb      	ldr	r3, [r7, #12]
   212ec:	681b      	ldr	r3, [r3, #0]
   212ee:	2202      	movs	r2, #2
   212f0:	4393      	bics	r3, r2
   212f2:	001a      	movs	r2, r3
   212f4:	68fb      	ldr	r3, [r7, #12]
   212f6:	601a      	str	r2, [r3, #0]
}
   212f8:	46c0      	nop			; (mov r8, r8)
   212fa:	46bd      	mov	sp, r7
   212fc:	b004      	add	sp, #16
   212fe:	bd80      	pop	{r7, pc}
   21300:	0002828d 	.word	0x0002828d
   21304:	00021069 	.word	0x00021069
   21308:	00021135 	.word	0x00021135

0002130c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2130c:	b580      	push	{r7, lr}
   2130e:	b084      	sub	sp, #16
   21310:	af00      	add	r7, sp, #0
   21312:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21314:	687b      	ldr	r3, [r7, #4]
   21316:	681b      	ldr	r3, [r3, #0]
   21318:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2131a:	68fb      	ldr	r3, [r7, #12]
   2131c:	7e1b      	ldrb	r3, [r3, #24]
   2131e:	b2db      	uxtb	r3, r3
   21320:	001a      	movs	r2, r3
   21322:	2302      	movs	r3, #2
   21324:	4013      	ands	r3, r2
   21326:	1e5a      	subs	r2, r3, #1
   21328:	4193      	sbcs	r3, r2
   2132a:	b2db      	uxtb	r3, r3
}
   2132c:	0018      	movs	r0, r3
   2132e:	46bd      	mov	sp, r7
   21330:	b004      	add	sp, #16
   21332:	bd80      	pop	{r7, pc}

00021334 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   21334:	b580      	push	{r7, lr}
   21336:	b084      	sub	sp, #16
   21338:	af00      	add	r7, sp, #0
   2133a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	681b      	ldr	r3, [r3, #0]
   21340:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   21342:	68fb      	ldr	r3, [r7, #12]
   21344:	7e1b      	ldrb	r3, [r3, #24]
   21346:	b2db      	uxtb	r3, r3
   21348:	001a      	movs	r2, r3
   2134a:	2301      	movs	r3, #1
   2134c:	4013      	ands	r3, r2
   2134e:	1e5a      	subs	r2, r3, #1
   21350:	4193      	sbcs	r3, r2
   21352:	b2db      	uxtb	r3, r3
}
   21354:	0018      	movs	r0, r3
   21356:	46bd      	mov	sp, r7
   21358:	b004      	add	sp, #16
   2135a:	bd80      	pop	{r7, pc}

0002135c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2135c:	b580      	push	{r7, lr}
   2135e:	b084      	sub	sp, #16
   21360:	af00      	add	r7, sp, #0
   21362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21364:	687b      	ldr	r3, [r7, #4]
   21366:	681b      	ldr	r3, [r3, #0]
   21368:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2136a:	68fb      	ldr	r3, [r7, #12]
   2136c:	7e1b      	ldrb	r3, [r3, #24]
   2136e:	b2db      	uxtb	r3, r3
   21370:	001a      	movs	r2, r3
   21372:	2304      	movs	r3, #4
   21374:	4013      	ands	r3, r2
   21376:	1e5a      	subs	r2, r3, #1
   21378:	4193      	sbcs	r3, r2
   2137a:	b2db      	uxtb	r3, r3
}
   2137c:	0018      	movs	r0, r3
   2137e:	46bd      	mov	sp, r7
   21380:	b004      	add	sp, #16
   21382:	bd80      	pop	{r7, pc}

00021384 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   21384:	b580      	push	{r7, lr}
   21386:	b084      	sub	sp, #16
   21388:	af00      	add	r7, sp, #0
   2138a:	6078      	str	r0, [r7, #4]
   2138c:	000a      	movs	r2, r1
   2138e:	1cbb      	adds	r3, r7, #2
   21390:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21392:	687b      	ldr	r3, [r7, #4]
   21394:	681b      	ldr	r3, [r3, #0]
   21396:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   21398:	687b      	ldr	r3, [r7, #4]
   2139a:	0018      	movs	r0, r3
   2139c:	4b0a      	ldr	r3, [pc, #40]	; (213c8 <spi_write+0x44>)
   2139e:	4798      	blx	r3
   213a0:	0003      	movs	r3, r0
   213a2:	001a      	movs	r2, r3
   213a4:	2301      	movs	r3, #1
   213a6:	4053      	eors	r3, r2
   213a8:	b2db      	uxtb	r3, r3
   213aa:	2b00      	cmp	r3, #0
   213ac:	d001      	beq.n	213b2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   213ae:	2305      	movs	r3, #5
   213b0:	e006      	b.n	213c0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   213b2:	1cbb      	adds	r3, r7, #2
   213b4:	881b      	ldrh	r3, [r3, #0]
   213b6:	05db      	lsls	r3, r3, #23
   213b8:	0dda      	lsrs	r2, r3, #23
   213ba:	68fb      	ldr	r3, [r7, #12]
   213bc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   213be:	2300      	movs	r3, #0
}
   213c0:	0018      	movs	r0, r3
   213c2:	46bd      	mov	sp, r7
   213c4:	b004      	add	sp, #16
   213c6:	bd80      	pop	{r7, pc}
   213c8:	00021335 	.word	0x00021335

000213cc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   213cc:	b580      	push	{r7, lr}
   213ce:	b084      	sub	sp, #16
   213d0:	af00      	add	r7, sp, #0
   213d2:	6078      	str	r0, [r7, #4]
   213d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   213d6:	687b      	ldr	r3, [r7, #4]
   213d8:	681b      	ldr	r3, [r3, #0]
   213da:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   213dc:	687b      	ldr	r3, [r7, #4]
   213de:	0018      	movs	r0, r3
   213e0:	4b1b      	ldr	r3, [pc, #108]	; (21450 <spi_read+0x84>)
   213e2:	4798      	blx	r3
   213e4:	0003      	movs	r3, r0
   213e6:	001a      	movs	r2, r3
   213e8:	2301      	movs	r3, #1
   213ea:	4053      	eors	r3, r2
   213ec:	b2db      	uxtb	r3, r3
   213ee:	2b00      	cmp	r3, #0
   213f0:	d001      	beq.n	213f6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   213f2:	2310      	movs	r3, #16
   213f4:	e027      	b.n	21446 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   213f6:	230f      	movs	r3, #15
   213f8:	18fb      	adds	r3, r7, r3
   213fa:	2200      	movs	r2, #0
   213fc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   213fe:	68bb      	ldr	r3, [r7, #8]
   21400:	8b5b      	ldrh	r3, [r3, #26]
   21402:	b29b      	uxth	r3, r3
   21404:	001a      	movs	r2, r3
   21406:	2304      	movs	r3, #4
   21408:	4013      	ands	r3, r2
   2140a:	d006      	beq.n	2141a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2140c:	230f      	movs	r3, #15
   2140e:	18fb      	adds	r3, r7, r3
   21410:	221e      	movs	r2, #30
   21412:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21414:	68bb      	ldr	r3, [r7, #8]
   21416:	2204      	movs	r2, #4
   21418:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2141a:	687b      	ldr	r3, [r7, #4]
   2141c:	799b      	ldrb	r3, [r3, #6]
   2141e:	2b01      	cmp	r3, #1
   21420:	d108      	bne.n	21434 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   21422:	68bb      	ldr	r3, [r7, #8]
   21424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21426:	b29b      	uxth	r3, r3
   21428:	05db      	lsls	r3, r3, #23
   2142a:	0ddb      	lsrs	r3, r3, #23
   2142c:	b29a      	uxth	r2, r3
   2142e:	683b      	ldr	r3, [r7, #0]
   21430:	801a      	strh	r2, [r3, #0]
   21432:	e005      	b.n	21440 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   21434:	68bb      	ldr	r3, [r7, #8]
   21436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21438:	b2db      	uxtb	r3, r3
   2143a:	b29a      	uxth	r2, r3
   2143c:	683b      	ldr	r3, [r7, #0]
   2143e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   21440:	230f      	movs	r3, #15
   21442:	18fb      	adds	r3, r7, r3
   21444:	781b      	ldrb	r3, [r3, #0]
}
   21446:	0018      	movs	r0, r3
   21448:	46bd      	mov	sp, r7
   2144a:	b004      	add	sp, #16
   2144c:	bd80      	pop	{r7, pc}
   2144e:	46c0      	nop			; (mov r8, r8)
   21450:	0002135d 	.word	0x0002135d

00021454 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   21454:	b580      	push	{r7, lr}
   21456:	b086      	sub	sp, #24
   21458:	af00      	add	r7, sp, #0
   2145a:	60f8      	str	r0, [r7, #12]
   2145c:	60b9      	str	r1, [r7, #8]
   2145e:	1dbb      	adds	r3, r7, #6
   21460:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   21462:	2313      	movs	r3, #19
   21464:	18fb      	adds	r3, r7, r3
   21466:	22ff      	movs	r2, #255	; 0xff
   21468:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2146a:	2317      	movs	r3, #23
   2146c:	18fb      	adds	r3, r7, r3
   2146e:	2200      	movs	r2, #0
   21470:	701a      	strb	r2, [r3, #0]
   21472:	2316      	movs	r3, #22
   21474:	18fb      	adds	r3, r7, r3
   21476:	2200      	movs	r2, #0
   21478:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2147a:	2314      	movs	r3, #20
   2147c:	18fb      	adds	r3, r7, r3
   2147e:	2200      	movs	r2, #0
   21480:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   21482:	2310      	movs	r3, #16
   21484:	18fb      	adds	r3, r7, r3
   21486:	2200      	movs	r2, #0
   21488:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2148a:	68bb      	ldr	r3, [r7, #8]
   2148c:	2b00      	cmp	r3, #0
   2148e:	d102      	bne.n	21496 <spi_rw+0x42>
   21490:	68fb      	ldr	r3, [r7, #12]
   21492:	2b00      	cmp	r3, #0
   21494:	d003      	beq.n	2149e <spi_rw+0x4a>
   21496:	1dbb      	adds	r3, r7, #6
   21498:	881b      	ldrh	r3, [r3, #0]
   2149a:	2b00      	cmp	r3, #0
   2149c:	d102      	bne.n	214a4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2149e:	230f      	movs	r3, #15
   214a0:	425b      	negs	r3, r3
   214a2:	e07e      	b.n	215a2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   214a4:	68fb      	ldr	r3, [r7, #12]
   214a6:	2b00      	cmp	r3, #0
   214a8:	d106      	bne.n	214b8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   214aa:	2313      	movs	r3, #19
   214ac:	18fb      	adds	r3, r7, r3
   214ae:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   214b0:	2317      	movs	r3, #23
   214b2:	18fb      	adds	r3, r7, r3
   214b4:	2201      	movs	r2, #1
   214b6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   214b8:	68bb      	ldr	r3, [r7, #8]
   214ba:	2b00      	cmp	r3, #0
   214bc:	d106      	bne.n	214cc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   214be:	2313      	movs	r3, #19
   214c0:	18fb      	adds	r3, r7, r3
   214c2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   214c4:	2316      	movs	r3, #22
   214c6:	18fb      	adds	r3, r7, r3
   214c8:	2201      	movs	r2, #1
   214ca:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   214cc:	4937      	ldr	r1, [pc, #220]	; (215ac <spi_rw+0x158>)
   214ce:	4b38      	ldr	r3, [pc, #224]	; (215b0 <spi_rw+0x15c>)
   214d0:	2201      	movs	r2, #1
   214d2:	0018      	movs	r0, r3
   214d4:	4b37      	ldr	r3, [pc, #220]	; (215b4 <spi_rw+0x160>)
   214d6:	4798      	blx	r3

	while (u16Sz) {
   214d8:	e04c      	b.n	21574 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   214da:	68fb      	ldr	r3, [r7, #12]
   214dc:	781a      	ldrb	r2, [r3, #0]
   214de:	2314      	movs	r3, #20
   214e0:	18fb      	adds	r3, r7, r3
   214e2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   214e4:	46c0      	nop			; (mov r8, r8)
   214e6:	4b32      	ldr	r3, [pc, #200]	; (215b0 <spi_rw+0x15c>)
   214e8:	0018      	movs	r0, r3
   214ea:	4b33      	ldr	r3, [pc, #204]	; (215b8 <spi_rw+0x164>)
   214ec:	4798      	blx	r3
   214ee:	0003      	movs	r3, r0
   214f0:	001a      	movs	r2, r3
   214f2:	2301      	movs	r3, #1
   214f4:	4053      	eors	r3, r2
   214f6:	b2db      	uxtb	r3, r3
   214f8:	2b00      	cmp	r3, #0
   214fa:	d1f4      	bne.n	214e6 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   214fc:	46c0      	nop			; (mov r8, r8)
   214fe:	2314      	movs	r3, #20
   21500:	18fb      	adds	r3, r7, r3
   21502:	881a      	ldrh	r2, [r3, #0]
   21504:	4b2a      	ldr	r3, [pc, #168]	; (215b0 <spi_rw+0x15c>)
   21506:	0011      	movs	r1, r2
   21508:	0018      	movs	r0, r3
   2150a:	4b2c      	ldr	r3, [pc, #176]	; (215bc <spi_rw+0x168>)
   2150c:	4798      	blx	r3
   2150e:	1e03      	subs	r3, r0, #0
   21510:	d1f5      	bne.n	214fe <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   21512:	46c0      	nop			; (mov r8, r8)
   21514:	4b26      	ldr	r3, [pc, #152]	; (215b0 <spi_rw+0x15c>)
   21516:	0018      	movs	r0, r3
   21518:	4b29      	ldr	r3, [pc, #164]	; (215c0 <spi_rw+0x16c>)
   2151a:	4798      	blx	r3
   2151c:	0003      	movs	r3, r0
   2151e:	001a      	movs	r2, r3
   21520:	2301      	movs	r3, #1
   21522:	4053      	eors	r3, r2
   21524:	b2db      	uxtb	r3, r3
   21526:	2b00      	cmp	r3, #0
   21528:	d1f4      	bne.n	21514 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2152a:	46c0      	nop			; (mov r8, r8)
   2152c:	2310      	movs	r3, #16
   2152e:	18fa      	adds	r2, r7, r3
   21530:	4b1f      	ldr	r3, [pc, #124]	; (215b0 <spi_rw+0x15c>)
   21532:	0011      	movs	r1, r2
   21534:	0018      	movs	r0, r3
   21536:	4b23      	ldr	r3, [pc, #140]	; (215c4 <spi_rw+0x170>)
   21538:	4798      	blx	r3
   2153a:	1e03      	subs	r3, r0, #0
   2153c:	d1f6      	bne.n	2152c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2153e:	2310      	movs	r3, #16
   21540:	18fb      	adds	r3, r7, r3
   21542:	881b      	ldrh	r3, [r3, #0]
   21544:	b2da      	uxtb	r2, r3
   21546:	68bb      	ldr	r3, [r7, #8]
   21548:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2154a:	1dbb      	adds	r3, r7, #6
   2154c:	881a      	ldrh	r2, [r3, #0]
   2154e:	1dbb      	adds	r3, r7, #6
   21550:	3a01      	subs	r2, #1
   21552:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   21554:	2316      	movs	r3, #22
   21556:	18fb      	adds	r3, r7, r3
   21558:	781b      	ldrb	r3, [r3, #0]
   2155a:	2b00      	cmp	r3, #0
   2155c:	d102      	bne.n	21564 <spi_rw+0x110>
			pu8Miso++;
   2155e:	68bb      	ldr	r3, [r7, #8]
   21560:	3301      	adds	r3, #1
   21562:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21564:	2317      	movs	r3, #23
   21566:	18fb      	adds	r3, r7, r3
   21568:	781b      	ldrb	r3, [r3, #0]
   2156a:	2b00      	cmp	r3, #0
   2156c:	d102      	bne.n	21574 <spi_rw+0x120>
			pu8Mosi++;
   2156e:	68fb      	ldr	r3, [r7, #12]
   21570:	3301      	adds	r3, #1
   21572:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21574:	1dbb      	adds	r3, r7, #6
   21576:	881b      	ldrh	r3, [r3, #0]
   21578:	2b00      	cmp	r3, #0
   2157a:	d1ae      	bne.n	214da <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2157c:	46c0      	nop			; (mov r8, r8)
   2157e:	4b0c      	ldr	r3, [pc, #48]	; (215b0 <spi_rw+0x15c>)
   21580:	0018      	movs	r0, r3
   21582:	4b11      	ldr	r3, [pc, #68]	; (215c8 <spi_rw+0x174>)
   21584:	4798      	blx	r3
   21586:	0003      	movs	r3, r0
   21588:	001a      	movs	r2, r3
   2158a:	2301      	movs	r3, #1
   2158c:	4053      	eors	r3, r2
   2158e:	b2db      	uxtb	r3, r3
   21590:	2b00      	cmp	r3, #0
   21592:	d1f4      	bne.n	2157e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21594:	4905      	ldr	r1, [pc, #20]	; (215ac <spi_rw+0x158>)
   21596:	4b06      	ldr	r3, [pc, #24]	; (215b0 <spi_rw+0x15c>)
   21598:	2200      	movs	r2, #0
   2159a:	0018      	movs	r0, r3
   2159c:	4b05      	ldr	r3, [pc, #20]	; (215b4 <spi_rw+0x160>)
   2159e:	4798      	blx	r3

	return M2M_SUCCESS;
   215a0:	2300      	movs	r3, #0
}
   215a2:	0018      	movs	r0, r3
   215a4:	46bd      	mov	sp, r7
   215a6:	b006      	add	sp, #24
   215a8:	bd80      	pop	{r7, pc}
   215aa:	46c0      	nop			; (mov r8, r8)
   215ac:	20005b28 	.word	0x20005b28
   215b0:	20005b2c 	.word	0x20005b2c
   215b4:	00028d01 	.word	0x00028d01
   215b8:	00021335 	.word	0x00021335
   215bc:	00021385 	.word	0x00021385
   215c0:	0002135d 	.word	0x0002135d
   215c4:	000213cd 	.word	0x000213cd
   215c8:	0002130d 	.word	0x0002130d

000215cc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   215cc:	b580      	push	{r7, lr}
   215ce:	b092      	sub	sp, #72	; 0x48
   215d0:	af00      	add	r7, sp, #0
   215d2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   215d4:	2347      	movs	r3, #71	; 0x47
   215d6:	18fb      	adds	r3, r7, r3
   215d8:	2200      	movs	r2, #0
   215da:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   215dc:	2308      	movs	r3, #8
   215de:	18fb      	adds	r3, r7, r3
   215e0:	0018      	movs	r0, r3
   215e2:	4b26      	ldr	r3, [pc, #152]	; (2167c <nm_bus_init+0xb0>)
   215e4:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   215e6:	2308      	movs	r3, #8
   215e8:	18fb      	adds	r3, r7, r3
   215ea:	220e      	movs	r2, #14
   215ec:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   215ee:	2308      	movs	r3, #8
   215f0:	18fa      	adds	r2, r7, r3
   215f2:	4b23      	ldr	r3, [pc, #140]	; (21680 <nm_bus_init+0xb4>)
   215f4:	0011      	movs	r1, r2
   215f6:	0018      	movs	r0, r3
   215f8:	4b22      	ldr	r3, [pc, #136]	; (21684 <nm_bus_init+0xb8>)
   215fa:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   215fc:	230c      	movs	r3, #12
   215fe:	18fb      	adds	r3, r7, r3
   21600:	0018      	movs	r0, r3
   21602:	4b21      	ldr	r3, [pc, #132]	; (21688 <nm_bus_init+0xbc>)
   21604:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21606:	230c      	movs	r3, #12
   21608:	18fb      	adds	r3, r7, r3
   2160a:	22c0      	movs	r2, #192	; 0xc0
   2160c:	0392      	lsls	r2, r2, #14
   2160e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   21610:	230c      	movs	r3, #12
   21612:	18fb      	adds	r3, r7, r3
   21614:	4a1d      	ldr	r2, [pc, #116]	; (2168c <nm_bus_init+0xc0>)
   21616:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21618:	230c      	movs	r3, #12
   2161a:	18fb      	adds	r3, r7, r3
   2161c:	4a1c      	ldr	r2, [pc, #112]	; (21690 <nm_bus_init+0xc4>)
   2161e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   21620:	230c      	movs	r3, #12
   21622:	18fb      	adds	r3, r7, r3
   21624:	2201      	movs	r2, #1
   21626:	4252      	negs	r2, r2
   21628:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2162a:	230c      	movs	r3, #12
   2162c:	18fb      	adds	r3, r7, r3
   2162e:	4a19      	ldr	r2, [pc, #100]	; (21694 <nm_bus_init+0xc8>)
   21630:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   21632:	230c      	movs	r3, #12
   21634:	18fb      	adds	r3, r7, r3
   21636:	2200      	movs	r2, #0
   21638:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2163a:	230c      	movs	r3, #12
   2163c:	18fb      	adds	r3, r7, r3
   2163e:	4a16      	ldr	r2, [pc, #88]	; (21698 <nm_bus_init+0xcc>)
   21640:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   21642:	230c      	movs	r3, #12
   21644:	18fa      	adds	r2, r7, r3
   21646:	4915      	ldr	r1, [pc, #84]	; (2169c <nm_bus_init+0xd0>)
   21648:	4b15      	ldr	r3, [pc, #84]	; (216a0 <nm_bus_init+0xd4>)
   2164a:	0018      	movs	r0, r3
   2164c:	4b15      	ldr	r3, [pc, #84]	; (216a4 <nm_bus_init+0xd8>)
   2164e:	4798      	blx	r3
   21650:	1e03      	subs	r3, r0, #0
   21652:	d002      	beq.n	2165a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   21654:	2306      	movs	r3, #6
   21656:	425b      	negs	r3, r3
   21658:	e00c      	b.n	21674 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2165a:	4b11      	ldr	r3, [pc, #68]	; (216a0 <nm_bus_init+0xd4>)
   2165c:	0018      	movs	r0, r3
   2165e:	4b12      	ldr	r3, [pc, #72]	; (216a8 <nm_bus_init+0xdc>)
   21660:	4798      	blx	r3

	nm_bsp_reset();
   21662:	4b12      	ldr	r3, [pc, #72]	; (216ac <nm_bus_init+0xe0>)
   21664:	4798      	blx	r3
	nm_bsp_sleep(1);
   21666:	2001      	movs	r0, #1
   21668:	4b11      	ldr	r3, [pc, #68]	; (216b0 <nm_bus_init+0xe4>)
   2166a:	4798      	blx	r3
#endif
	return result;
   2166c:	2347      	movs	r3, #71	; 0x47
   2166e:	18fb      	adds	r3, r7, r3
   21670:	781b      	ldrb	r3, [r3, #0]
   21672:	b25b      	sxtb	r3, r3
}
   21674:	0018      	movs	r0, r3
   21676:	46bd      	mov	sp, r7
   21678:	b012      	add	sp, #72	; 0x48
   2167a:	bd80      	pop	{r7, pc}
   2167c:	000211d9 	.word	0x000211d9
   21680:	20005b28 	.word	0x20005b28
   21684:	000211fd 	.word	0x000211fd
   21688:	00021155 	.word	0x00021155
   2168c:	000c0002 	.word	0x000c0002
   21690:	000d0002 	.word	0x000d0002
   21694:	000f0002 	.word	0x000f0002
   21698:	00124f80 	.word	0x00124f80
   2169c:	42001000 	.word	0x42001000
   216a0:	20005b2c 	.word	0x20005b2c
   216a4:	00028a3d 	.word	0x00028a3d
   216a8:	00021261 	.word	0x00021261
   216ac:	00020ed1 	.word	0x00020ed1
   216b0:	00020f11 	.word	0x00020f11

000216b4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   216b4:	b590      	push	{r4, r7, lr}
   216b6:	b085      	sub	sp, #20
   216b8:	af00      	add	r7, sp, #0
   216ba:	0002      	movs	r2, r0
   216bc:	6039      	str	r1, [r7, #0]
   216be:	1dfb      	adds	r3, r7, #7
   216c0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   216c2:	230f      	movs	r3, #15
   216c4:	18fb      	adds	r3, r7, r3
   216c6:	2200      	movs	r2, #0
   216c8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   216ca:	1dfb      	adds	r3, r7, #7
   216cc:	781b      	ldrb	r3, [r3, #0]
   216ce:	2b03      	cmp	r3, #3
   216d0:	d10f      	bne.n	216f2 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   216d2:	683b      	ldr	r3, [r7, #0]
   216d4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   216d6:	68bb      	ldr	r3, [r7, #8]
   216d8:	6818      	ldr	r0, [r3, #0]
   216da:	68bb      	ldr	r3, [r7, #8]
   216dc:	6859      	ldr	r1, [r3, #4]
   216de:	68bb      	ldr	r3, [r7, #8]
   216e0:	891b      	ldrh	r3, [r3, #8]
   216e2:	220f      	movs	r2, #15
   216e4:	18bc      	adds	r4, r7, r2
   216e6:	001a      	movs	r2, r3
   216e8:	4b10      	ldr	r3, [pc, #64]	; (2172c <nm_bus_ioctl+0x78>)
   216ea:	4798      	blx	r3
   216ec:	0003      	movs	r3, r0
   216ee:	7023      	strb	r3, [r4, #0]
		}
		break;
   216f0:	e013      	b.n	2171a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   216f2:	230f      	movs	r3, #15
   216f4:	18fb      	adds	r3, r7, r3
   216f6:	22ff      	movs	r2, #255	; 0xff
   216f8:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   216fa:	2383      	movs	r3, #131	; 0x83
   216fc:	005a      	lsls	r2, r3, #1
   216fe:	490c      	ldr	r1, [pc, #48]	; (21730 <nm_bus_ioctl+0x7c>)
   21700:	4b0c      	ldr	r3, [pc, #48]	; (21734 <nm_bus_ioctl+0x80>)
   21702:	0018      	movs	r0, r3
   21704:	4b0c      	ldr	r3, [pc, #48]	; (21738 <nm_bus_ioctl+0x84>)
   21706:	4798      	blx	r3
   21708:	4b0c      	ldr	r3, [pc, #48]	; (2173c <nm_bus_ioctl+0x88>)
   2170a:	0018      	movs	r0, r3
   2170c:	4b0a      	ldr	r3, [pc, #40]	; (21738 <nm_bus_ioctl+0x84>)
   2170e:	4798      	blx	r3
   21710:	4b0b      	ldr	r3, [pc, #44]	; (21740 <nm_bus_ioctl+0x8c>)
   21712:	0018      	movs	r0, r3
   21714:	4b08      	ldr	r3, [pc, #32]	; (21738 <nm_bus_ioctl+0x84>)
   21716:	4798      	blx	r3
			break;
   21718:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2171a:	230f      	movs	r3, #15
   2171c:	18fb      	adds	r3, r7, r3
   2171e:	781b      	ldrb	r3, [r3, #0]
   21720:	b25b      	sxtb	r3, r3
}
   21722:	0018      	movs	r0, r3
   21724:	46bd      	mov	sp, r7
   21726:	b005      	add	sp, #20
   21728:	bd90      	pop	{r4, r7, pc}
   2172a:	46c0      	nop			; (mov r8, r8)
   2172c:	00021455 	.word	0x00021455
   21730:	00039410 	.word	0x00039410
   21734:	000393e4 	.word	0x000393e4
   21738:	0001ea59 	.word	0x0001ea59
   2173c:	000393f8 	.word	0x000393f8
   21740:	0003940c 	.word	0x0003940c

00021744 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21744:	b580      	push	{r7, lr}
   21746:	b082      	sub	sp, #8
   21748:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   2174a:	1dfb      	adds	r3, r7, #7
   2174c:	2200      	movs	r2, #0
   2174e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   21750:	1d3b      	adds	r3, r7, #4
   21752:	0018      	movs	r0, r3
   21754:	4b13      	ldr	r3, [pc, #76]	; (217a4 <nm_bus_deinit+0x60>)
   21756:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   21758:	1d3b      	adds	r3, r7, #4
   2175a:	2200      	movs	r2, #0
   2175c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2175e:	1d3b      	adds	r3, r7, #4
   21760:	2200      	movs	r2, #0
   21762:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21764:	4b10      	ldr	r3, [pc, #64]	; (217a8 <nm_bus_deinit+0x64>)
   21766:	0018      	movs	r0, r3
   21768:	4b10      	ldr	r3, [pc, #64]	; (217ac <nm_bus_deinit+0x68>)
   2176a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   2176c:	1d3b      	adds	r3, r7, #4
   2176e:	0019      	movs	r1, r3
   21770:	200c      	movs	r0, #12
   21772:	4b0f      	ldr	r3, [pc, #60]	; (217b0 <nm_bus_deinit+0x6c>)
   21774:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21776:	1d3b      	adds	r3, r7, #4
   21778:	0019      	movs	r1, r3
   2177a:	200f      	movs	r0, #15
   2177c:	4b0c      	ldr	r3, [pc, #48]	; (217b0 <nm_bus_deinit+0x6c>)
   2177e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   21780:	1d3b      	adds	r3, r7, #4
   21782:	0019      	movs	r1, r3
   21784:	200d      	movs	r0, #13
   21786:	4b0a      	ldr	r3, [pc, #40]	; (217b0 <nm_bus_deinit+0x6c>)
   21788:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   2178a:	1d3b      	adds	r3, r7, #4
   2178c:	0019      	movs	r1, r3
   2178e:	200e      	movs	r0, #14
   21790:	4b07      	ldr	r3, [pc, #28]	; (217b0 <nm_bus_deinit+0x6c>)
   21792:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21794:	1dfb      	adds	r3, r7, #7
   21796:	781b      	ldrb	r3, [r3, #0]
   21798:	b25b      	sxtb	r3, r3
}
   2179a:	0018      	movs	r0, r3
   2179c:	46bd      	mov	sp, r7
   2179e:	b002      	add	sp, #8
   217a0:	bd80      	pop	{r7, pc}
   217a2:	46c0      	nop			; (mov r8, r8)
   217a4:	000210bd 	.word	0x000210bd
   217a8:	20005b2c 	.word	0x20005b2c
   217ac:	000212b1 	.word	0x000212b1
   217b0:	000275bd 	.word	0x000275bd

000217b4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   217b4:	b580      	push	{r7, lr}
   217b6:	b084      	sub	sp, #16
   217b8:	af00      	add	r7, sp, #0
   217ba:	60f8      	str	r0, [r7, #12]
   217bc:	60b9      	str	r1, [r7, #8]
   217be:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   217c0:	687b      	ldr	r3, [r7, #4]
   217c2:	2b00      	cmp	r3, #0
   217c4:	d010      	beq.n	217e8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   217c6:	68bb      	ldr	r3, [r7, #8]
   217c8:	781a      	ldrb	r2, [r3, #0]
   217ca:	68fb      	ldr	r3, [r7, #12]
   217cc:	701a      	strb	r2, [r3, #0]
		pDst++;
   217ce:	68fb      	ldr	r3, [r7, #12]
   217d0:	3301      	adds	r3, #1
   217d2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   217d4:	68bb      	ldr	r3, [r7, #8]
   217d6:	3301      	adds	r3, #1
   217d8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   217da:	687b      	ldr	r3, [r7, #4]
   217dc:	3b01      	subs	r3, #1
   217de:	607b      	str	r3, [r7, #4]
   217e0:	687b      	ldr	r3, [r7, #4]
   217e2:	2b00      	cmp	r3, #0
   217e4:	d1ef      	bne.n	217c6 <m2m_memcpy+0x12>
   217e6:	e000      	b.n	217ea <m2m_memcpy+0x36>
	if(sz == 0) return;
   217e8:	46c0      	nop			; (mov r8, r8)
}
   217ea:	46bd      	mov	sp, r7
   217ec:	b004      	add	sp, #16
   217ee:	bd80      	pop	{r7, pc}

000217f0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   217f0:	b580      	push	{r7, lr}
   217f2:	b084      	sub	sp, #16
   217f4:	af00      	add	r7, sp, #0
   217f6:	60f8      	str	r0, [r7, #12]
   217f8:	607a      	str	r2, [r7, #4]
   217fa:	230b      	movs	r3, #11
   217fc:	18fb      	adds	r3, r7, r3
   217fe:	1c0a      	adds	r2, r1, #0
   21800:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21802:	687b      	ldr	r3, [r7, #4]
   21804:	2b00      	cmp	r3, #0
   21806:	d00e      	beq.n	21826 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21808:	68fb      	ldr	r3, [r7, #12]
   2180a:	220b      	movs	r2, #11
   2180c:	18ba      	adds	r2, r7, r2
   2180e:	7812      	ldrb	r2, [r2, #0]
   21810:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21812:	68fb      	ldr	r3, [r7, #12]
   21814:	3301      	adds	r3, #1
   21816:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21818:	687b      	ldr	r3, [r7, #4]
   2181a:	3b01      	subs	r3, #1
   2181c:	607b      	str	r3, [r7, #4]
   2181e:	687b      	ldr	r3, [r7, #4]
   21820:	2b00      	cmp	r3, #0
   21822:	d1f1      	bne.n	21808 <m2m_memset+0x18>
   21824:	e000      	b.n	21828 <m2m_memset+0x38>
	if(sz == 0) return;
   21826:	46c0      	nop			; (mov r8, r8)
}
   21828:	46bd      	mov	sp, r7
   2182a:	b004      	add	sp, #16
   2182c:	bd80      	pop	{r7, pc}

0002182e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2182e:	b580      	push	{r7, lr}
   21830:	b084      	sub	sp, #16
   21832:	af00      	add	r7, sp, #0
   21834:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21836:	230e      	movs	r3, #14
   21838:	18fb      	adds	r3, r7, r3
   2183a:	2200      	movs	r2, #0
   2183c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2183e:	e009      	b.n	21854 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21840:	230e      	movs	r3, #14
   21842:	18fb      	adds	r3, r7, r3
   21844:	881a      	ldrh	r2, [r3, #0]
   21846:	230e      	movs	r3, #14
   21848:	18fb      	adds	r3, r7, r3
   2184a:	3201      	adds	r2, #1
   2184c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2184e:	687b      	ldr	r3, [r7, #4]
   21850:	3301      	adds	r3, #1
   21852:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21854:	687b      	ldr	r3, [r7, #4]
   21856:	781b      	ldrb	r3, [r3, #0]
   21858:	2b00      	cmp	r3, #0
   2185a:	d1f1      	bne.n	21840 <m2m_strlen+0x12>
	}
	return u16StrLen;
   2185c:	230e      	movs	r3, #14
   2185e:	18fb      	adds	r3, r7, r3
   21860:	881b      	ldrh	r3, [r3, #0]
}
   21862:	0018      	movs	r0, r3
   21864:	46bd      	mov	sp, r7
   21866:	b004      	add	sp, #16
   21868:	bd80      	pop	{r7, pc}
	...

0002186c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   2186c:	b580      	push	{r7, lr}
   2186e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21870:	4b04      	ldr	r3, [pc, #16]	; (21884 <isr+0x18>)
   21872:	78db      	ldrb	r3, [r3, #3]
   21874:	b2db      	uxtb	r3, r3
   21876:	3301      	adds	r3, #1
   21878:	b2da      	uxtb	r2, r3
   2187a:	4b02      	ldr	r3, [pc, #8]	; (21884 <isr+0x18>)
   2187c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2187e:	46c0      	nop			; (mov r8, r8)
   21880:	46bd      	mov	sp, r7
   21882:	bd80      	pop	{r7, pc}
   21884:	20005b68 	.word	0x20005b68

00021888 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21888:	b590      	push	{r4, r7, lr}
   2188a:	b083      	sub	sp, #12
   2188c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2188e:	1dfb      	adds	r3, r7, #7
   21890:	2200      	movs	r2, #0
   21892:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21894:	4b14      	ldr	r3, [pc, #80]	; (218e8 <hif_set_rx_done+0x60>)
   21896:	2200      	movs	r2, #0
   21898:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   2189a:	2001      	movs	r0, #1
   2189c:	4b13      	ldr	r3, [pc, #76]	; (218ec <hif_set_rx_done+0x64>)
   2189e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   218a0:	1dfc      	adds	r4, r7, #7
   218a2:	003b      	movs	r3, r7
   218a4:	4a12      	ldr	r2, [pc, #72]	; (218f0 <hif_set_rx_done+0x68>)
   218a6:	0019      	movs	r1, r3
   218a8:	0010      	movs	r0, r2
   218aa:	4b12      	ldr	r3, [pc, #72]	; (218f4 <hif_set_rx_done+0x6c>)
   218ac:	4798      	blx	r3
   218ae:	0003      	movs	r3, r0
   218b0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   218b2:	1dfb      	adds	r3, r7, #7
   218b4:	781b      	ldrb	r3, [r3, #0]
   218b6:	b25b      	sxtb	r3, r3
   218b8:	2b00      	cmp	r3, #0
   218ba:	d10d      	bne.n	218d8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   218bc:	683b      	ldr	r3, [r7, #0]
   218be:	2202      	movs	r2, #2
   218c0:	4313      	orrs	r3, r2
   218c2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   218c4:	683b      	ldr	r3, [r7, #0]
   218c6:	1dfc      	adds	r4, r7, #7
   218c8:	4a09      	ldr	r2, [pc, #36]	; (218f0 <hif_set_rx_done+0x68>)
   218ca:	0019      	movs	r1, r3
   218cc:	0010      	movs	r0, r2
   218ce:	4b0a      	ldr	r3, [pc, #40]	; (218f8 <hif_set_rx_done+0x70>)
   218d0:	4798      	blx	r3
   218d2:	0003      	movs	r3, r0
   218d4:	7023      	strb	r3, [r4, #0]
   218d6:	e000      	b.n	218da <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   218d8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   218da:	1dfb      	adds	r3, r7, #7
   218dc:	781b      	ldrb	r3, [r3, #0]
   218de:	b25b      	sxtb	r3, r3

}
   218e0:	0018      	movs	r0, r3
   218e2:	46bd      	mov	sp, r7
   218e4:	b003      	add	sp, #12
   218e6:	bd90      	pop	{r4, r7, pc}
   218e8:	20005b68 	.word	0x20005b68
   218ec:	00020fa5 	.word	0x00020fa5
   218f0:	00001070 	.word	0x00001070
   218f4:	00023881 	.word	0x00023881
   218f8:	000238a5 	.word	0x000238a5

000218fc <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   218fc:	b580      	push	{r7, lr}
   218fe:	b082      	sub	sp, #8
   21900:	af00      	add	r7, sp, #0
   21902:	603a      	str	r2, [r7, #0]
   21904:	1dfb      	adds	r3, r7, #7
   21906:	1c02      	adds	r2, r0, #0
   21908:	701a      	strb	r2, [r3, #0]
   2190a:	1d3b      	adds	r3, r7, #4
   2190c:	1c0a      	adds	r2, r1, #0
   2190e:	801a      	strh	r2, [r3, #0]


}
   21910:	46c0      	nop			; (mov r8, r8)
   21912:	46bd      	mov	sp, r7
   21914:	b002      	add	sp, #8
   21916:	bd80      	pop	{r7, pc}

00021918 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21918:	b590      	push	{r4, r7, lr}
   2191a:	b083      	sub	sp, #12
   2191c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2191e:	1dfb      	adds	r3, r7, #7
   21920:	2200      	movs	r2, #0
   21922:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21924:	4b16      	ldr	r3, [pc, #88]	; (21980 <hif_chip_wake+0x68>)
   21926:	789b      	ldrb	r3, [r3, #2]
   21928:	b2db      	uxtb	r3, r3
   2192a:	2b00      	cmp	r3, #0
   2192c:	d003      	beq.n	21936 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2192e:	1dfb      	adds	r3, r7, #7
   21930:	781b      	ldrb	r3, [r3, #0]
   21932:	b25b      	sxtb	r3, r3
   21934:	e01f      	b.n	21976 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21936:	4b12      	ldr	r3, [pc, #72]	; (21980 <hif_chip_wake+0x68>)
   21938:	785b      	ldrb	r3, [r3, #1]
   2193a:	b2db      	uxtb	r3, r3
   2193c:	2b00      	cmp	r3, #0
   2193e:	d10e      	bne.n	2195e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21940:	4b0f      	ldr	r3, [pc, #60]	; (21980 <hif_chip_wake+0x68>)
   21942:	781b      	ldrb	r3, [r3, #0]
   21944:	b2db      	uxtb	r3, r3
   21946:	2b00      	cmp	r3, #0
   21948:	d009      	beq.n	2195e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   2194a:	1dfc      	adds	r4, r7, #7
   2194c:	4b0d      	ldr	r3, [pc, #52]	; (21984 <hif_chip_wake+0x6c>)
   2194e:	4798      	blx	r3
   21950:	0003      	movs	r3, r0
   21952:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21954:	1dfb      	adds	r3, r7, #7
   21956:	781b      	ldrb	r3, [r3, #0]
   21958:	b25b      	sxtb	r3, r3
   2195a:	2b00      	cmp	r3, #0
   2195c:	d107      	bne.n	2196e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2195e:	4b08      	ldr	r3, [pc, #32]	; (21980 <hif_chip_wake+0x68>)
   21960:	785b      	ldrb	r3, [r3, #1]
   21962:	b2db      	uxtb	r3, r3
   21964:	3301      	adds	r3, #1
   21966:	b2da      	uxtb	r2, r3
   21968:	4b05      	ldr	r3, [pc, #20]	; (21980 <hif_chip_wake+0x68>)
   2196a:	705a      	strb	r2, [r3, #1]
   2196c:	e000      	b.n	21970 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2196e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21970:	1dfb      	adds	r3, r7, #7
   21972:	781b      	ldrb	r3, [r3, #0]
   21974:	b25b      	sxtb	r3, r3
}
   21976:	0018      	movs	r0, r3
   21978:	46bd      	mov	sp, r7
   2197a:	b003      	add	sp, #12
   2197c:	bd90      	pop	{r4, r7, pc}
   2197e:	46c0      	nop			; (mov r8, r8)
   21980:	20005b68 	.word	0x20005b68
   21984:	00023351 	.word	0x00023351

00021988 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21988:	b580      	push	{r7, lr}
   2198a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   2198c:	4b07      	ldr	r3, [pc, #28]	; (219ac <hif_chip_sleep_sc+0x24>)
   2198e:	785b      	ldrb	r3, [r3, #1]
   21990:	b2db      	uxtb	r3, r3
   21992:	2b00      	cmp	r3, #0
   21994:	d006      	beq.n	219a4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21996:	4b05      	ldr	r3, [pc, #20]	; (219ac <hif_chip_sleep_sc+0x24>)
   21998:	785b      	ldrb	r3, [r3, #1]
   2199a:	b2db      	uxtb	r3, r3
   2199c:	3b01      	subs	r3, #1
   2199e:	b2da      	uxtb	r2, r3
   219a0:	4b02      	ldr	r3, [pc, #8]	; (219ac <hif_chip_sleep_sc+0x24>)
   219a2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   219a4:	2300      	movs	r3, #0
}
   219a6:	0018      	movs	r0, r3
   219a8:	46bd      	mov	sp, r7
   219aa:	bd80      	pop	{r7, pc}
   219ac:	20005b68 	.word	0x20005b68

000219b0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   219b0:	b590      	push	{r4, r7, lr}
   219b2:	b083      	sub	sp, #12
   219b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   219b6:	1dfb      	adds	r3, r7, #7
   219b8:	2200      	movs	r2, #0
   219ba:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   219bc:	4b10      	ldr	r3, [pc, #64]	; (21a00 <hif_chip_sleep+0x50>)
   219be:	785b      	ldrb	r3, [r3, #1]
   219c0:	b2db      	uxtb	r3, r3
   219c2:	2b00      	cmp	r3, #0
   219c4:	d006      	beq.n	219d4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   219c6:	4b0e      	ldr	r3, [pc, #56]	; (21a00 <hif_chip_sleep+0x50>)
   219c8:	785b      	ldrb	r3, [r3, #1]
   219ca:	b2db      	uxtb	r3, r3
   219cc:	3b01      	subs	r3, #1
   219ce:	b2da      	uxtb	r2, r3
   219d0:	4b0b      	ldr	r3, [pc, #44]	; (21a00 <hif_chip_sleep+0x50>)
   219d2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   219d4:	4b0a      	ldr	r3, [pc, #40]	; (21a00 <hif_chip_sleep+0x50>)
   219d6:	785b      	ldrb	r3, [r3, #1]
   219d8:	b2db      	uxtb	r3, r3
   219da:	2b00      	cmp	r3, #0
   219dc:	d109      	bne.n	219f2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   219de:	4b08      	ldr	r3, [pc, #32]	; (21a00 <hif_chip_sleep+0x50>)
   219e0:	781b      	ldrb	r3, [r3, #0]
   219e2:	b2db      	uxtb	r3, r3
   219e4:	2b00      	cmp	r3, #0
   219e6:	d004      	beq.n	219f2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   219e8:	1dfc      	adds	r4, r7, #7
   219ea:	4b06      	ldr	r3, [pc, #24]	; (21a04 <hif_chip_sleep+0x54>)
   219ec:	4798      	blx	r3
   219ee:	0003      	movs	r3, r0
   219f0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   219f2:	1dfb      	adds	r3, r7, #7
   219f4:	781b      	ldrb	r3, [r3, #0]
   219f6:	b25b      	sxtb	r3, r3
}
   219f8:	0018      	movs	r0, r3
   219fa:	46bd      	mov	sp, r7
   219fc:	b003      	add	sp, #12
   219fe:	bd90      	pop	{r4, r7, pc}
   21a00:	20005b68 	.word	0x20005b68
   21a04:	00023279 	.word	0x00023279

00021a08 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21a08:	b580      	push	{r7, lr}
   21a0a:	b082      	sub	sp, #8
   21a0c:	af00      	add	r7, sp, #0
   21a0e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21a10:	4b09      	ldr	r3, [pc, #36]	; (21a38 <hif_init+0x30>)
   21a12:	222c      	movs	r2, #44	; 0x2c
   21a14:	2100      	movs	r1, #0
   21a16:	0018      	movs	r0, r3
   21a18:	4b08      	ldr	r3, [pc, #32]	; (21a3c <hif_init+0x34>)
   21a1a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21a1c:	4b08      	ldr	r3, [pc, #32]	; (21a40 <hif_init+0x38>)
   21a1e:	0018      	movs	r0, r3
   21a20:	4b08      	ldr	r3, [pc, #32]	; (21a44 <hif_init+0x3c>)
   21a22:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21a24:	4b08      	ldr	r3, [pc, #32]	; (21a48 <hif_init+0x40>)
   21a26:	0019      	movs	r1, r3
   21a28:	2003      	movs	r0, #3
   21a2a:	4b08      	ldr	r3, [pc, #32]	; (21a4c <hif_init+0x44>)
   21a2c:	4798      	blx	r3
	return M2M_SUCCESS;
   21a2e:	2300      	movs	r3, #0
}
   21a30:	0018      	movs	r0, r3
   21a32:	46bd      	mov	sp, r7
   21a34:	b002      	add	sp, #8
   21a36:	bd80      	pop	{r7, pc}
   21a38:	20005b68 	.word	0x20005b68
   21a3c:	000217f1 	.word	0x000217f1
   21a40:	0002186d 	.word	0x0002186d
   21a44:	00020f2d 	.word	0x00020f2d
   21a48:	000218fd 	.word	0x000218fd
   21a4c:	000224ed 	.word	0x000224ed

00021a50 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21a50:	b590      	push	{r4, r7, lr}
   21a52:	b089      	sub	sp, #36	; 0x24
   21a54:	af00      	add	r7, sp, #0
   21a56:	0004      	movs	r4, r0
   21a58:	0008      	movs	r0, r1
   21a5a:	603a      	str	r2, [r7, #0]
   21a5c:	0019      	movs	r1, r3
   21a5e:	1dfb      	adds	r3, r7, #7
   21a60:	1c22      	adds	r2, r4, #0
   21a62:	701a      	strb	r2, [r3, #0]
   21a64:	1dbb      	adds	r3, r7, #6
   21a66:	1c02      	adds	r2, r0, #0
   21a68:	701a      	strb	r2, [r3, #0]
   21a6a:	1d3b      	adds	r3, r7, #4
   21a6c:	1c0a      	adds	r2, r1, #0
   21a6e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21a70:	231f      	movs	r3, #31
   21a72:	18fb      	adds	r3, r7, r3
   21a74:	22ff      	movs	r2, #255	; 0xff
   21a76:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21a78:	1dbb      	adds	r3, r7, #6
   21a7a:	781b      	ldrb	r3, [r3, #0]
   21a7c:	227f      	movs	r2, #127	; 0x7f
   21a7e:	4013      	ands	r3, r2
   21a80:	b2da      	uxtb	r2, r3
   21a82:	2318      	movs	r3, #24
   21a84:	18fb      	adds	r3, r7, r3
   21a86:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21a88:	2318      	movs	r3, #24
   21a8a:	18fb      	adds	r3, r7, r3
   21a8c:	1dfa      	adds	r2, r7, #7
   21a8e:	7812      	ldrb	r2, [r2, #0]
   21a90:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21a92:	2318      	movs	r3, #24
   21a94:	18fb      	adds	r3, r7, r3
   21a96:	2208      	movs	r2, #8
   21a98:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a9c:	2b00      	cmp	r3, #0
   21a9e:	d011      	beq.n	21ac4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21aa0:	2318      	movs	r3, #24
   21aa2:	18fb      	adds	r3, r7, r3
   21aa4:	885b      	ldrh	r3, [r3, #2]
   21aa6:	b29a      	uxth	r2, r3
   21aa8:	2338      	movs	r3, #56	; 0x38
   21aaa:	18f9      	adds	r1, r7, r3
   21aac:	2334      	movs	r3, #52	; 0x34
   21aae:	18fb      	adds	r3, r7, r3
   21ab0:	8809      	ldrh	r1, [r1, #0]
   21ab2:	881b      	ldrh	r3, [r3, #0]
   21ab4:	18cb      	adds	r3, r1, r3
   21ab6:	b29b      	uxth	r3, r3
   21ab8:	18d3      	adds	r3, r2, r3
   21aba:	b29a      	uxth	r2, r3
   21abc:	2318      	movs	r3, #24
   21abe:	18fb      	adds	r3, r7, r3
   21ac0:	805a      	strh	r2, [r3, #2]
   21ac2:	e00a      	b.n	21ada <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21ac4:	2318      	movs	r3, #24
   21ac6:	18fb      	adds	r3, r7, r3
   21ac8:	885b      	ldrh	r3, [r3, #2]
   21aca:	b29a      	uxth	r2, r3
   21acc:	1d3b      	adds	r3, r7, #4
   21ace:	881b      	ldrh	r3, [r3, #0]
   21ad0:	18d3      	adds	r3, r2, r3
   21ad2:	b29a      	uxth	r2, r3
   21ad4:	2318      	movs	r3, #24
   21ad6:	18fb      	adds	r3, r7, r3
   21ad8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21ada:	231f      	movs	r3, #31
   21adc:	18fc      	adds	r4, r7, r3
   21ade:	4bb2      	ldr	r3, [pc, #712]	; (21da8 <hif_send+0x358>)
   21ae0:	4798      	blx	r3
   21ae2:	0003      	movs	r3, r0
   21ae4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21ae6:	231f      	movs	r3, #31
   21ae8:	18fb      	adds	r3, r7, r3
   21aea:	781b      	ldrb	r3, [r3, #0]
   21aec:	b25b      	sxtb	r3, r3
   21aee:	2b00      	cmp	r3, #0
   21af0:	d000      	beq.n	21af4 <hif_send+0xa4>
   21af2:	e129      	b.n	21d48 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21af4:	2300      	movs	r3, #0
   21af6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21af8:	230e      	movs	r3, #14
   21afa:	18fb      	adds	r3, r7, r3
   21afc:	2200      	movs	r2, #0
   21afe:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21b00:	2300      	movs	r3, #0
   21b02:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21b04:	1dfb      	adds	r3, r7, #7
   21b06:	781a      	ldrb	r2, [r3, #0]
   21b08:	697b      	ldr	r3, [r7, #20]
   21b0a:	4313      	orrs	r3, r2
   21b0c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21b0e:	1dbb      	adds	r3, r7, #6
   21b10:	781b      	ldrb	r3, [r3, #0]
   21b12:	021a      	lsls	r2, r3, #8
   21b14:	697b      	ldr	r3, [r7, #20]
   21b16:	4313      	orrs	r3, r2
   21b18:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21b1a:	2318      	movs	r3, #24
   21b1c:	18fb      	adds	r3, r7, r3
   21b1e:	885b      	ldrh	r3, [r3, #2]
   21b20:	b29b      	uxth	r3, r3
   21b22:	041a      	lsls	r2, r3, #16
   21b24:	697b      	ldr	r3, [r7, #20]
   21b26:	4313      	orrs	r3, r2
   21b28:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21b2a:	697b      	ldr	r3, [r7, #20]
   21b2c:	221f      	movs	r2, #31
   21b2e:	18bc      	adds	r4, r7, r2
   21b30:	4a9e      	ldr	r2, [pc, #632]	; (21dac <hif_send+0x35c>)
   21b32:	0019      	movs	r1, r3
   21b34:	0010      	movs	r0, r2
   21b36:	4b9e      	ldr	r3, [pc, #632]	; (21db0 <hif_send+0x360>)
   21b38:	4798      	blx	r3
   21b3a:	0003      	movs	r3, r0
   21b3c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21b3e:	231f      	movs	r3, #31
   21b40:	18fb      	adds	r3, r7, r3
   21b42:	781b      	ldrb	r3, [r3, #0]
   21b44:	b25b      	sxtb	r3, r3
   21b46:	2b00      	cmp	r3, #0
   21b48:	d000      	beq.n	21b4c <hif_send+0xfc>
   21b4a:	e119      	b.n	21d80 <hif_send+0x330>

		reg = 0UL;
   21b4c:	2300      	movs	r3, #0
   21b4e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21b50:	697b      	ldr	r3, [r7, #20]
   21b52:	2202      	movs	r2, #2
   21b54:	4313      	orrs	r3, r2
   21b56:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21b58:	697b      	ldr	r3, [r7, #20]
   21b5a:	221f      	movs	r2, #31
   21b5c:	18bc      	adds	r4, r7, r2
   21b5e:	4a95      	ldr	r2, [pc, #596]	; (21db4 <hif_send+0x364>)
   21b60:	0019      	movs	r1, r3
   21b62:	0010      	movs	r0, r2
   21b64:	4b92      	ldr	r3, [pc, #584]	; (21db0 <hif_send+0x360>)
   21b66:	4798      	blx	r3
   21b68:	0003      	movs	r3, r0
   21b6a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21b6c:	231f      	movs	r3, #31
   21b6e:	18fb      	adds	r3, r7, r3
   21b70:	781b      	ldrb	r3, [r3, #0]
   21b72:	b25b      	sxtb	r3, r3
   21b74:	2b00      	cmp	r3, #0
   21b76:	d000      	beq.n	21b7a <hif_send+0x12a>
   21b78:	e104      	b.n	21d84 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21b7a:	2300      	movs	r3, #0
   21b7c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21b7e:	230e      	movs	r3, #14
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	2200      	movs	r2, #0
   21b84:	801a      	strh	r2, [r3, #0]
   21b86:	e050      	b.n	21c2a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21b88:	231f      	movs	r3, #31
   21b8a:	18fc      	adds	r4, r7, r3
   21b8c:	2314      	movs	r3, #20
   21b8e:	18fb      	adds	r3, r7, r3
   21b90:	4a88      	ldr	r2, [pc, #544]	; (21db4 <hif_send+0x364>)
   21b92:	0019      	movs	r1, r3
   21b94:	0010      	movs	r0, r2
   21b96:	4b88      	ldr	r3, [pc, #544]	; (21db8 <hif_send+0x368>)
   21b98:	4798      	blx	r3
   21b9a:	0003      	movs	r3, r0
   21b9c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21b9e:	231f      	movs	r3, #31
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	781b      	ldrb	r3, [r3, #0]
   21ba4:	b25b      	sxtb	r3, r3
   21ba6:	2b00      	cmp	r3, #0
   21ba8:	d147      	bne.n	21c3a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21baa:	230e      	movs	r3, #14
   21bac:	18fb      	adds	r3, r7, r3
   21bae:	881b      	ldrh	r3, [r3, #0]
   21bb0:	b29a      	uxth	r2, r3
   21bb2:	23f4      	movs	r3, #244	; 0xf4
   21bb4:	33ff      	adds	r3, #255	; 0xff
   21bb6:	429a      	cmp	r2, r3
   21bb8:	d916      	bls.n	21be8 <hif_send+0x198>
				if(cnt < 501) {
   21bba:	230e      	movs	r3, #14
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	881b      	ldrh	r3, [r3, #0]
   21bc0:	b29a      	uxth	r2, r3
   21bc2:	23fa      	movs	r3, #250	; 0xfa
   21bc4:	005b      	lsls	r3, r3, #1
   21bc6:	429a      	cmp	r2, r3
   21bc8:	d80b      	bhi.n	21be2 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21bca:	4b7c      	ldr	r3, [pc, #496]	; (21dbc <hif_send+0x36c>)
   21bcc:	0018      	movs	r0, r3
   21bce:	4b7c      	ldr	r3, [pc, #496]	; (21dc0 <hif_send+0x370>)
   21bd0:	4798      	blx	r3
   21bd2:	4b7c      	ldr	r3, [pc, #496]	; (21dc4 <hif_send+0x374>)
   21bd4:	0018      	movs	r0, r3
   21bd6:	4b7a      	ldr	r3, [pc, #488]	; (21dc0 <hif_send+0x370>)
   21bd8:	4798      	blx	r3
   21bda:	4b7b      	ldr	r3, [pc, #492]	; (21dc8 <hif_send+0x378>)
   21bdc:	0018      	movs	r0, r3
   21bde:	4b78      	ldr	r3, [pc, #480]	; (21dc0 <hif_send+0x370>)
   21be0:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21be2:	2001      	movs	r0, #1
   21be4:	4b79      	ldr	r3, [pc, #484]	; (21dcc <hif_send+0x37c>)
   21be6:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21be8:	697b      	ldr	r3, [r7, #20]
   21bea:	2202      	movs	r2, #2
   21bec:	4013      	ands	r3, r2
   21bee:	d113      	bne.n	21c18 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21bf0:	231f      	movs	r3, #31
   21bf2:	18fc      	adds	r4, r7, r3
   21bf4:	2310      	movs	r3, #16
   21bf6:	18fb      	adds	r3, r7, r3
   21bf8:	4a75      	ldr	r2, [pc, #468]	; (21dd0 <hif_send+0x380>)
   21bfa:	0019      	movs	r1, r3
   21bfc:	0010      	movs	r0, r2
   21bfe:	4b6e      	ldr	r3, [pc, #440]	; (21db8 <hif_send+0x368>)
   21c00:	4798      	blx	r3
   21c02:	0003      	movs	r3, r0
   21c04:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21c06:	231f      	movs	r3, #31
   21c08:	18fb      	adds	r3, r7, r3
   21c0a:	781b      	ldrb	r3, [r3, #0]
   21c0c:	b25b      	sxtb	r3, r3
   21c0e:	2b00      	cmp	r3, #0
   21c10:	d015      	beq.n	21c3e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21c12:	2300      	movs	r3, #0
   21c14:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21c16:	e0bc      	b.n	21d92 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21c18:	230e      	movs	r3, #14
   21c1a:	18fb      	adds	r3, r7, r3
   21c1c:	881b      	ldrh	r3, [r3, #0]
   21c1e:	b29b      	uxth	r3, r3
   21c20:	3301      	adds	r3, #1
   21c22:	b29a      	uxth	r2, r3
   21c24:	230e      	movs	r3, #14
   21c26:	18fb      	adds	r3, r7, r3
   21c28:	801a      	strh	r2, [r3, #0]
   21c2a:	230e      	movs	r3, #14
   21c2c:	18fb      	adds	r3, r7, r3
   21c2e:	881b      	ldrh	r3, [r3, #0]
   21c30:	b29b      	uxth	r3, r3
   21c32:	4a68      	ldr	r2, [pc, #416]	; (21dd4 <hif_send+0x384>)
   21c34:	4293      	cmp	r3, r2
   21c36:	d9a7      	bls.n	21b88 <hif_send+0x138>
   21c38:	e002      	b.n	21c40 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21c3a:	46c0      	nop			; (mov r8, r8)
   21c3c:	e000      	b.n	21c40 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21c3e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21c40:	693b      	ldr	r3, [r7, #16]
   21c42:	2b00      	cmp	r3, #0
   21c44:	d100      	bne.n	21c48 <hif_send+0x1f8>
   21c46:	e074      	b.n	21d32 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21c48:	693b      	ldr	r3, [r7, #16]
   21c4a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21c4c:	2318      	movs	r3, #24
   21c4e:	18fb      	adds	r3, r7, r3
   21c50:	885b      	ldrh	r3, [r3, #2]
   21c52:	b29a      	uxth	r2, r3
   21c54:	2318      	movs	r3, #24
   21c56:	18fb      	adds	r3, r7, r3
   21c58:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21c5a:	68bb      	ldr	r3, [r7, #8]
   21c5c:	221f      	movs	r2, #31
   21c5e:	18bc      	adds	r4, r7, r2
   21c60:	2218      	movs	r2, #24
   21c62:	18b9      	adds	r1, r7, r2
   21c64:	2208      	movs	r2, #8
   21c66:	0018      	movs	r0, r3
   21c68:	4b5b      	ldr	r3, [pc, #364]	; (21dd8 <hif_send+0x388>)
   21c6a:	4798      	blx	r3
   21c6c:	0003      	movs	r3, r0
   21c6e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21c70:	231f      	movs	r3, #31
   21c72:	18fb      	adds	r3, r7, r3
   21c74:	781b      	ldrb	r3, [r3, #0]
   21c76:	b25b      	sxtb	r3, r3
   21c78:	2b00      	cmp	r3, #0
   21c7a:	d000      	beq.n	21c7e <hif_send+0x22e>
   21c7c:	e084      	b.n	21d88 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21c7e:	68bb      	ldr	r3, [r7, #8]
   21c80:	3308      	adds	r3, #8
   21c82:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21c84:	683b      	ldr	r3, [r7, #0]
   21c86:	2b00      	cmp	r3, #0
   21c88:	d016      	beq.n	21cb8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21c8a:	68b8      	ldr	r0, [r7, #8]
   21c8c:	1d3b      	adds	r3, r7, #4
   21c8e:	881a      	ldrh	r2, [r3, #0]
   21c90:	231f      	movs	r3, #31
   21c92:	18fc      	adds	r4, r7, r3
   21c94:	683b      	ldr	r3, [r7, #0]
   21c96:	0019      	movs	r1, r3
   21c98:	4b4f      	ldr	r3, [pc, #316]	; (21dd8 <hif_send+0x388>)
   21c9a:	4798      	blx	r3
   21c9c:	0003      	movs	r3, r0
   21c9e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21ca0:	231f      	movs	r3, #31
   21ca2:	18fb      	adds	r3, r7, r3
   21ca4:	781b      	ldrb	r3, [r3, #0]
   21ca6:	b25b      	sxtb	r3, r3
   21ca8:	2b00      	cmp	r3, #0
   21caa:	d000      	beq.n	21cae <hif_send+0x25e>
   21cac:	e06e      	b.n	21d8c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21cae:	1d3b      	adds	r3, r7, #4
   21cb0:	881a      	ldrh	r2, [r3, #0]
   21cb2:	68bb      	ldr	r3, [r7, #8]
   21cb4:	18d3      	adds	r3, r2, r3
   21cb6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21cba:	2b00      	cmp	r3, #0
   21cbc:	d021      	beq.n	21d02 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21cbe:	2338      	movs	r3, #56	; 0x38
   21cc0:	18fb      	adds	r3, r7, r3
   21cc2:	881a      	ldrh	r2, [r3, #0]
   21cc4:	1d3b      	adds	r3, r7, #4
   21cc6:	881b      	ldrh	r3, [r3, #0]
   21cc8:	1ad3      	subs	r3, r2, r3
   21cca:	001a      	movs	r2, r3
   21ccc:	68bb      	ldr	r3, [r7, #8]
   21cce:	18d3      	adds	r3, r2, r3
   21cd0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21cd2:	68b8      	ldr	r0, [r7, #8]
   21cd4:	2334      	movs	r3, #52	; 0x34
   21cd6:	18fb      	adds	r3, r7, r3
   21cd8:	881a      	ldrh	r2, [r3, #0]
   21cda:	231f      	movs	r3, #31
   21cdc:	18fc      	adds	r4, r7, r3
   21cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21ce0:	0019      	movs	r1, r3
   21ce2:	4b3d      	ldr	r3, [pc, #244]	; (21dd8 <hif_send+0x388>)
   21ce4:	4798      	blx	r3
   21ce6:	0003      	movs	r3, r0
   21ce8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21cea:	231f      	movs	r3, #31
   21cec:	18fb      	adds	r3, r7, r3
   21cee:	781b      	ldrb	r3, [r3, #0]
   21cf0:	b25b      	sxtb	r3, r3
   21cf2:	2b00      	cmp	r3, #0
   21cf4:	d14c      	bne.n	21d90 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21cf6:	2334      	movs	r3, #52	; 0x34
   21cf8:	18fb      	adds	r3, r7, r3
   21cfa:	881a      	ldrh	r2, [r3, #0]
   21cfc:	68bb      	ldr	r3, [r7, #8]
   21cfe:	18d3      	adds	r3, r2, r3
   21d00:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21d02:	693b      	ldr	r3, [r7, #16]
   21d04:	009b      	lsls	r3, r3, #2
   21d06:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21d08:	697b      	ldr	r3, [r7, #20]
   21d0a:	2202      	movs	r2, #2
   21d0c:	4313      	orrs	r3, r2
   21d0e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21d10:	697b      	ldr	r3, [r7, #20]
   21d12:	221f      	movs	r2, #31
   21d14:	18bc      	adds	r4, r7, r2
   21d16:	4a31      	ldr	r2, [pc, #196]	; (21ddc <hif_send+0x38c>)
   21d18:	0019      	movs	r1, r3
   21d1a:	0010      	movs	r0, r2
   21d1c:	4b24      	ldr	r3, [pc, #144]	; (21db0 <hif_send+0x360>)
   21d1e:	4798      	blx	r3
   21d20:	0003      	movs	r3, r0
   21d22:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21d24:	231f      	movs	r3, #31
   21d26:	18fb      	adds	r3, r7, r3
   21d28:	781b      	ldrb	r3, [r3, #0]
   21d2a:	b25b      	sxtb	r3, r3
   21d2c:	2b00      	cmp	r3, #0
   21d2e:	d01c      	beq.n	21d6a <hif_send+0x31a>
   21d30:	e02f      	b.n	21d92 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21d32:	231f      	movs	r3, #31
   21d34:	18fc      	adds	r4, r7, r3
   21d36:	4b2a      	ldr	r3, [pc, #168]	; (21de0 <hif_send+0x390>)
   21d38:	4798      	blx	r3
   21d3a:	0003      	movs	r3, r0
   21d3c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21d3e:	231f      	movs	r3, #31
   21d40:	18fb      	adds	r3, r7, r3
   21d42:	22fd      	movs	r2, #253	; 0xfd
   21d44:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21d46:	e026      	b.n	21d96 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21d48:	2398      	movs	r3, #152	; 0x98
   21d4a:	33ff      	adds	r3, #255	; 0xff
   21d4c:	001a      	movs	r2, r3
   21d4e:	4925      	ldr	r1, [pc, #148]	; (21de4 <hif_send+0x394>)
   21d50:	4b25      	ldr	r3, [pc, #148]	; (21de8 <hif_send+0x398>)
   21d52:	0018      	movs	r0, r3
   21d54:	4b1a      	ldr	r3, [pc, #104]	; (21dc0 <hif_send+0x370>)
   21d56:	4798      	blx	r3
   21d58:	4b24      	ldr	r3, [pc, #144]	; (21dec <hif_send+0x39c>)
   21d5a:	0018      	movs	r0, r3
   21d5c:	4b18      	ldr	r3, [pc, #96]	; (21dc0 <hif_send+0x370>)
   21d5e:	4798      	blx	r3
   21d60:	4b19      	ldr	r3, [pc, #100]	; (21dc8 <hif_send+0x378>)
   21d62:	0018      	movs	r0, r3
   21d64:	4b16      	ldr	r3, [pc, #88]	; (21dc0 <hif_send+0x370>)
   21d66:	4798      	blx	r3
		goto ERR2;
   21d68:	e015      	b.n	21d96 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21d6a:	231f      	movs	r3, #31
   21d6c:	18fc      	adds	r4, r7, r3
   21d6e:	4b1c      	ldr	r3, [pc, #112]	; (21de0 <hif_send+0x390>)
   21d70:	4798      	blx	r3
   21d72:	0003      	movs	r3, r0
   21d74:	7023      	strb	r3, [r4, #0]
	return ret;
   21d76:	231f      	movs	r3, #31
   21d78:	18fb      	adds	r3, r7, r3
   21d7a:	781b      	ldrb	r3, [r3, #0]
   21d7c:	b25b      	sxtb	r3, r3
   21d7e:	e00e      	b.n	21d9e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21d80:	46c0      	nop			; (mov r8, r8)
   21d82:	e006      	b.n	21d92 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21d84:	46c0      	nop			; (mov r8, r8)
   21d86:	e004      	b.n	21d92 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21d88:	46c0      	nop			; (mov r8, r8)
   21d8a:	e002      	b.n	21d92 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21d8c:	46c0      	nop			; (mov r8, r8)
   21d8e:	e000      	b.n	21d92 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21d90:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21d92:	4b17      	ldr	r3, [pc, #92]	; (21df0 <hif_send+0x3a0>)
   21d94:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21d96:	231f      	movs	r3, #31
   21d98:	18fb      	adds	r3, r7, r3
   21d9a:	781b      	ldrb	r3, [r3, #0]
   21d9c:	b25b      	sxtb	r3, r3
}
   21d9e:	0018      	movs	r0, r3
   21da0:	46bd      	mov	sp, r7
   21da2:	b009      	add	sp, #36	; 0x24
   21da4:	bd90      	pop	{r4, r7, pc}
   21da6:	46c0      	nop			; (mov r8, r8)
   21da8:	00021919 	.word	0x00021919
   21dac:	0000108c 	.word	0x0000108c
   21db0:	000238a5 	.word	0x000238a5
   21db4:	00001078 	.word	0x00001078
   21db8:	00023881 	.word	0x00023881
   21dbc:	00039420 	.word	0x00039420
   21dc0:	0001ea59 	.word	0x0001ea59
   21dc4:	0003942c 	.word	0x0003942c
   21dc8:	00039440 	.word	0x00039440
   21dcc:	00020f11 	.word	0x00020f11
   21dd0:	00150400 	.word	0x00150400
   21dd4:	000003e7 	.word	0x000003e7
   21dd8:	000239ed 	.word	0x000239ed
   21ddc:	0000106c 	.word	0x0000106c
   21de0:	000219b1 	.word	0x000219b1
   21de4:	00039748 	.word	0x00039748
   21de8:	00039444 	.word	0x00039444
   21dec:	00039458 	.word	0x00039458
   21df0:	00021989 	.word	0x00021989

00021df4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21df4:	b590      	push	{r4, r7, lr}
   21df6:	b087      	sub	sp, #28
   21df8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21dfa:	230f      	movs	r3, #15
   21dfc:	18fb      	adds	r3, r7, r3
   21dfe:	2200      	movs	r2, #0
   21e00:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21e02:	230f      	movs	r3, #15
   21e04:	18fc      	adds	r4, r7, r3
   21e06:	2308      	movs	r3, #8
   21e08:	18fb      	adds	r3, r7, r3
   21e0a:	4adc      	ldr	r2, [pc, #880]	; (2217c <hif_isr+0x388>)
   21e0c:	0019      	movs	r1, r3
   21e0e:	0010      	movs	r0, r2
   21e10:	4bdb      	ldr	r3, [pc, #876]	; (22180 <hif_isr+0x38c>)
   21e12:	4798      	blx	r3
   21e14:	0003      	movs	r3, r0
   21e16:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21e18:	230f      	movs	r3, #15
   21e1a:	18fb      	adds	r3, r7, r3
   21e1c:	781b      	ldrb	r3, [r3, #0]
   21e1e:	b25b      	sxtb	r3, r3
   21e20:	2b00      	cmp	r3, #0
   21e22:	d000      	beq.n	21e26 <hif_isr+0x32>
   21e24:	e21e      	b.n	22264 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21e26:	68bb      	ldr	r3, [r7, #8]
   21e28:	2201      	movs	r2, #1
   21e2a:	4013      	ands	r3, r2
   21e2c:	d100      	bne.n	21e30 <hif_isr+0x3c>
   21e2e:	e204      	b.n	2223a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21e30:	2000      	movs	r0, #0
   21e32:	4bd4      	ldr	r3, [pc, #848]	; (22184 <hif_isr+0x390>)
   21e34:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21e36:	68bb      	ldr	r3, [r7, #8]
   21e38:	2201      	movs	r2, #1
   21e3a:	4393      	bics	r3, r2
   21e3c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21e3e:	68bb      	ldr	r3, [r7, #8]
   21e40:	220f      	movs	r2, #15
   21e42:	18bc      	adds	r4, r7, r2
   21e44:	4acd      	ldr	r2, [pc, #820]	; (2217c <hif_isr+0x388>)
   21e46:	0019      	movs	r1, r3
   21e48:	0010      	movs	r0, r2
   21e4a:	4bcf      	ldr	r3, [pc, #828]	; (22188 <hif_isr+0x394>)
   21e4c:	4798      	blx	r3
   21e4e:	0003      	movs	r3, r0
   21e50:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21e52:	230f      	movs	r3, #15
   21e54:	18fb      	adds	r3, r7, r3
   21e56:	781b      	ldrb	r3, [r3, #0]
   21e58:	b25b      	sxtb	r3, r3
   21e5a:	2b00      	cmp	r3, #0
   21e5c:	d000      	beq.n	21e60 <hif_isr+0x6c>
   21e5e:	e210      	b.n	22282 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21e60:	4bca      	ldr	r3, [pc, #808]	; (2218c <hif_isr+0x398>)
   21e62:	2201      	movs	r2, #1
   21e64:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21e66:	68bb      	ldr	r3, [r7, #8]
   21e68:	089b      	lsrs	r3, r3, #2
   21e6a:	b29a      	uxth	r2, r3
   21e6c:	230c      	movs	r3, #12
   21e6e:	18fb      	adds	r3, r7, r3
   21e70:	0512      	lsls	r2, r2, #20
   21e72:	0d12      	lsrs	r2, r2, #20
   21e74:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21e76:	230c      	movs	r3, #12
   21e78:	18fb      	adds	r3, r7, r3
   21e7a:	881b      	ldrh	r3, [r3, #0]
   21e7c:	2b00      	cmp	r3, #0
   21e7e:	d100      	bne.n	21e82 <hif_isr+0x8e>
   21e80:	e1c8      	b.n	22214 <hif_isr+0x420>
				uint32 address = 0;
   21e82:	2300      	movs	r3, #0
   21e84:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21e86:	230f      	movs	r3, #15
   21e88:	18fc      	adds	r4, r7, r3
   21e8a:	003b      	movs	r3, r7
   21e8c:	4ac0      	ldr	r2, [pc, #768]	; (22190 <hif_isr+0x39c>)
   21e8e:	0019      	movs	r1, r3
   21e90:	0010      	movs	r0, r2
   21e92:	4bbb      	ldr	r3, [pc, #748]	; (22180 <hif_isr+0x38c>)
   21e94:	4798      	blx	r3
   21e96:	0003      	movs	r3, r0
   21e98:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21e9a:	230f      	movs	r3, #15
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	781b      	ldrb	r3, [r3, #0]
   21ea0:	b25b      	sxtb	r3, r3
   21ea2:	2b00      	cmp	r3, #0
   21ea4:	d012      	beq.n	21ecc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21ea6:	23e4      	movs	r3, #228	; 0xe4
   21ea8:	005a      	lsls	r2, r3, #1
   21eaa:	49ba      	ldr	r1, [pc, #744]	; (22194 <hif_isr+0x3a0>)
   21eac:	4bba      	ldr	r3, [pc, #744]	; (22198 <hif_isr+0x3a4>)
   21eae:	0018      	movs	r0, r3
   21eb0:	4bba      	ldr	r3, [pc, #744]	; (2219c <hif_isr+0x3a8>)
   21eb2:	4798      	blx	r3
   21eb4:	4bba      	ldr	r3, [pc, #744]	; (221a0 <hif_isr+0x3ac>)
   21eb6:	0018      	movs	r0, r3
   21eb8:	4bb8      	ldr	r3, [pc, #736]	; (2219c <hif_isr+0x3a8>)
   21eba:	4798      	blx	r3
   21ebc:	4bb9      	ldr	r3, [pc, #740]	; (221a4 <hif_isr+0x3b0>)
   21ebe:	0018      	movs	r0, r3
   21ec0:	4bb6      	ldr	r3, [pc, #728]	; (2219c <hif_isr+0x3a8>)
   21ec2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21ec4:	2001      	movs	r0, #1
   21ec6:	4baf      	ldr	r3, [pc, #700]	; (22184 <hif_isr+0x390>)
   21ec8:	4798      	blx	r3
					goto ERR1;
   21eca:	e1db      	b.n	22284 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21ecc:	683a      	ldr	r2, [r7, #0]
   21ece:	4baf      	ldr	r3, [pc, #700]	; (2218c <hif_isr+0x398>)
   21ed0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21ed2:	230c      	movs	r3, #12
   21ed4:	18fb      	adds	r3, r7, r3
   21ed6:	881a      	ldrh	r2, [r3, #0]
   21ed8:	4bac      	ldr	r3, [pc, #688]	; (2218c <hif_isr+0x398>)
   21eda:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21edc:	683b      	ldr	r3, [r7, #0]
   21ede:	220f      	movs	r2, #15
   21ee0:	18bc      	adds	r4, r7, r2
   21ee2:	1d39      	adds	r1, r7, #4
   21ee4:	2204      	movs	r2, #4
   21ee6:	0018      	movs	r0, r3
   21ee8:	4baf      	ldr	r3, [pc, #700]	; (221a8 <hif_isr+0x3b4>)
   21eea:	4798      	blx	r3
   21eec:	0003      	movs	r3, r0
   21eee:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21ef0:	1d3b      	adds	r3, r7, #4
   21ef2:	885b      	ldrh	r3, [r3, #2]
   21ef4:	b29a      	uxth	r2, r3
   21ef6:	1d3b      	adds	r3, r7, #4
   21ef8:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   21efa:	230f      	movs	r3, #15
   21efc:	18fb      	adds	r3, r7, r3
   21efe:	781b      	ldrb	r3, [r3, #0]
   21f00:	b25b      	sxtb	r3, r3
   21f02:	2b00      	cmp	r3, #0
   21f04:	d012      	beq.n	21f2c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   21f06:	23e9      	movs	r3, #233	; 0xe9
   21f08:	005a      	lsls	r2, r3, #1
   21f0a:	49a2      	ldr	r1, [pc, #648]	; (22194 <hif_isr+0x3a0>)
   21f0c:	4ba2      	ldr	r3, [pc, #648]	; (22198 <hif_isr+0x3a4>)
   21f0e:	0018      	movs	r0, r3
   21f10:	4ba2      	ldr	r3, [pc, #648]	; (2219c <hif_isr+0x3a8>)
   21f12:	4798      	blx	r3
   21f14:	4ba5      	ldr	r3, [pc, #660]	; (221ac <hif_isr+0x3b8>)
   21f16:	0018      	movs	r0, r3
   21f18:	4ba0      	ldr	r3, [pc, #640]	; (2219c <hif_isr+0x3a8>)
   21f1a:	4798      	blx	r3
   21f1c:	4ba1      	ldr	r3, [pc, #644]	; (221a4 <hif_isr+0x3b0>)
   21f1e:	0018      	movs	r0, r3
   21f20:	4b9e      	ldr	r3, [pc, #632]	; (2219c <hif_isr+0x3a8>)
   21f22:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21f24:	2001      	movs	r0, #1
   21f26:	4b97      	ldr	r3, [pc, #604]	; (22184 <hif_isr+0x390>)
   21f28:	4798      	blx	r3
					goto ERR1;
   21f2a:	e1ab      	b.n	22284 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   21f2c:	1d3b      	adds	r3, r7, #4
   21f2e:	885b      	ldrh	r3, [r3, #2]
   21f30:	b29b      	uxth	r3, r3
   21f32:	220c      	movs	r2, #12
   21f34:	18ba      	adds	r2, r7, r2
   21f36:	8812      	ldrh	r2, [r2, #0]
   21f38:	429a      	cmp	r2, r3
   21f3a:	d02f      	beq.n	21f9c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   21f3c:	230c      	movs	r3, #12
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	881b      	ldrh	r3, [r3, #0]
   21f42:	1d3a      	adds	r2, r7, #4
   21f44:	8852      	ldrh	r2, [r2, #2]
   21f46:	b292      	uxth	r2, r2
   21f48:	1a9b      	subs	r3, r3, r2
   21f4a:	2b04      	cmp	r3, #4
   21f4c:	dd26      	ble.n	21f9c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   21f4e:	23dc      	movs	r3, #220	; 0xdc
   21f50:	33ff      	adds	r3, #255	; 0xff
   21f52:	001a      	movs	r2, r3
   21f54:	498f      	ldr	r1, [pc, #572]	; (22194 <hif_isr+0x3a0>)
   21f56:	4b90      	ldr	r3, [pc, #576]	; (22198 <hif_isr+0x3a4>)
   21f58:	0018      	movs	r0, r3
   21f5a:	4b90      	ldr	r3, [pc, #576]	; (2219c <hif_isr+0x3a8>)
   21f5c:	4798      	blx	r3
   21f5e:	230c      	movs	r3, #12
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	8819      	ldrh	r1, [r3, #0]
   21f64:	1d3b      	adds	r3, r7, #4
   21f66:	885b      	ldrh	r3, [r3, #2]
   21f68:	b29b      	uxth	r3, r3
   21f6a:	001a      	movs	r2, r3
   21f6c:	1d3b      	adds	r3, r7, #4
   21f6e:	781b      	ldrb	r3, [r3, #0]
   21f70:	b2db      	uxtb	r3, r3
   21f72:	001c      	movs	r4, r3
   21f74:	1d3b      	adds	r3, r7, #4
   21f76:	785b      	ldrb	r3, [r3, #1]
   21f78:	b2db      	uxtb	r3, r3
   21f7a:	488d      	ldr	r0, [pc, #564]	; (221b0 <hif_isr+0x3bc>)
   21f7c:	9300      	str	r3, [sp, #0]
   21f7e:	0023      	movs	r3, r4
   21f80:	4c86      	ldr	r4, [pc, #536]	; (2219c <hif_isr+0x3a8>)
   21f82:	47a0      	blx	r4
   21f84:	4b87      	ldr	r3, [pc, #540]	; (221a4 <hif_isr+0x3b0>)
   21f86:	0018      	movs	r0, r3
   21f88:	4b84      	ldr	r3, [pc, #528]	; (2219c <hif_isr+0x3a8>)
   21f8a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   21f8c:	2001      	movs	r0, #1
   21f8e:	4b7d      	ldr	r3, [pc, #500]	; (22184 <hif_isr+0x390>)
   21f90:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21f92:	230f      	movs	r3, #15
   21f94:	18fb      	adds	r3, r7, r3
   21f96:	22fa      	movs	r2, #250	; 0xfa
   21f98:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   21f9a:	e173      	b.n	22284 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   21f9c:	1d3b      	adds	r3, r7, #4
   21f9e:	781b      	ldrb	r3, [r3, #0]
   21fa0:	b2db      	uxtb	r3, r3
   21fa2:	2b01      	cmp	r3, #1
   21fa4:	d122      	bne.n	21fec <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21fa6:	4b79      	ldr	r3, [pc, #484]	; (2218c <hif_isr+0x398>)
   21fa8:	691b      	ldr	r3, [r3, #16]
   21faa:	2b00      	cmp	r3, #0
   21fac:	d00d      	beq.n	21fca <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21fae:	4b77      	ldr	r3, [pc, #476]	; (2218c <hif_isr+0x398>)
   21fb0:	691b      	ldr	r3, [r3, #16]
   21fb2:	1d3a      	adds	r2, r7, #4
   21fb4:	7852      	ldrb	r2, [r2, #1]
   21fb6:	b2d0      	uxtb	r0, r2
   21fb8:	1d3a      	adds	r2, r7, #4
   21fba:	8852      	ldrh	r2, [r2, #2]
   21fbc:	b292      	uxth	r2, r2
   21fbe:	3a08      	subs	r2, #8
   21fc0:	b291      	uxth	r1, r2
   21fc2:	683a      	ldr	r2, [r7, #0]
   21fc4:	3208      	adds	r2, #8
   21fc6:	4798      	blx	r3
   21fc8:	e102      	b.n	221d0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   21fca:	23e8      	movs	r3, #232	; 0xe8
   21fcc:	33ff      	adds	r3, #255	; 0xff
   21fce:	001a      	movs	r2, r3
   21fd0:	4970      	ldr	r1, [pc, #448]	; (22194 <hif_isr+0x3a0>)
   21fd2:	4b71      	ldr	r3, [pc, #452]	; (22198 <hif_isr+0x3a4>)
   21fd4:	0018      	movs	r0, r3
   21fd6:	4b71      	ldr	r3, [pc, #452]	; (2219c <hif_isr+0x3a8>)
   21fd8:	4798      	blx	r3
   21fda:	4b76      	ldr	r3, [pc, #472]	; (221b4 <hif_isr+0x3c0>)
   21fdc:	0018      	movs	r0, r3
   21fde:	4b6f      	ldr	r3, [pc, #444]	; (2219c <hif_isr+0x3a8>)
   21fe0:	4798      	blx	r3
   21fe2:	4b70      	ldr	r3, [pc, #448]	; (221a4 <hif_isr+0x3b0>)
   21fe4:	0018      	movs	r0, r3
   21fe6:	4b6d      	ldr	r3, [pc, #436]	; (2219c <hif_isr+0x3a8>)
   21fe8:	4798      	blx	r3
   21fea:	e0f1      	b.n	221d0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   21fec:	1d3b      	adds	r3, r7, #4
   21fee:	781b      	ldrb	r3, [r3, #0]
   21ff0:	b2db      	uxtb	r3, r3
   21ff2:	2b02      	cmp	r3, #2
   21ff4:	d122      	bne.n	2203c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   21ff6:	4b65      	ldr	r3, [pc, #404]	; (2218c <hif_isr+0x398>)
   21ff8:	695b      	ldr	r3, [r3, #20]
   21ffa:	2b00      	cmp	r3, #0
   21ffc:	d00d      	beq.n	2201a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   21ffe:	4b63      	ldr	r3, [pc, #396]	; (2218c <hif_isr+0x398>)
   22000:	695b      	ldr	r3, [r3, #20]
   22002:	1d3a      	adds	r2, r7, #4
   22004:	7852      	ldrb	r2, [r2, #1]
   22006:	b2d0      	uxtb	r0, r2
   22008:	1d3a      	adds	r2, r7, #4
   2200a:	8852      	ldrh	r2, [r2, #2]
   2200c:	b292      	uxth	r2, r2
   2200e:	3a08      	subs	r2, #8
   22010:	b291      	uxth	r1, r2
   22012:	683a      	ldr	r2, [r7, #0]
   22014:	3208      	adds	r2, #8
   22016:	4798      	blx	r3
   22018:	e0da      	b.n	221d0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   2201a:	23f0      	movs	r3, #240	; 0xf0
   2201c:	33ff      	adds	r3, #255	; 0xff
   2201e:	001a      	movs	r2, r3
   22020:	495c      	ldr	r1, [pc, #368]	; (22194 <hif_isr+0x3a0>)
   22022:	4b5d      	ldr	r3, [pc, #372]	; (22198 <hif_isr+0x3a4>)
   22024:	0018      	movs	r0, r3
   22026:	4b5d      	ldr	r3, [pc, #372]	; (2219c <hif_isr+0x3a8>)
   22028:	4798      	blx	r3
   2202a:	4b63      	ldr	r3, [pc, #396]	; (221b8 <hif_isr+0x3c4>)
   2202c:	0018      	movs	r0, r3
   2202e:	4b5b      	ldr	r3, [pc, #364]	; (2219c <hif_isr+0x3a8>)
   22030:	4798      	blx	r3
   22032:	4b5c      	ldr	r3, [pc, #368]	; (221a4 <hif_isr+0x3b0>)
   22034:	0018      	movs	r0, r3
   22036:	4b59      	ldr	r3, [pc, #356]	; (2219c <hif_isr+0x3a8>)
   22038:	4798      	blx	r3
   2203a:	e0c9      	b.n	221d0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   2203c:	1d3b      	adds	r3, r7, #4
   2203e:	781b      	ldrb	r3, [r3, #0]
   22040:	b2db      	uxtb	r3, r3
   22042:	2b04      	cmp	r3, #4
   22044:	d122      	bne.n	2208c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   22046:	4b51      	ldr	r3, [pc, #324]	; (2218c <hif_isr+0x398>)
   22048:	699b      	ldr	r3, [r3, #24]
   2204a:	2b00      	cmp	r3, #0
   2204c:	d00d      	beq.n	2206a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2204e:	4b4f      	ldr	r3, [pc, #316]	; (2218c <hif_isr+0x398>)
   22050:	699b      	ldr	r3, [r3, #24]
   22052:	1d3a      	adds	r2, r7, #4
   22054:	7852      	ldrb	r2, [r2, #1]
   22056:	b2d0      	uxtb	r0, r2
   22058:	1d3a      	adds	r2, r7, #4
   2205a:	8852      	ldrh	r2, [r2, #2]
   2205c:	b292      	uxth	r2, r2
   2205e:	3a08      	subs	r2, #8
   22060:	b291      	uxth	r1, r2
   22062:	683a      	ldr	r2, [r7, #0]
   22064:	3208      	adds	r2, #8
   22066:	4798      	blx	r3
   22068:	e0b2      	b.n	221d0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2206a:	23f8      	movs	r3, #248	; 0xf8
   2206c:	33ff      	adds	r3, #255	; 0xff
   2206e:	001a      	movs	r2, r3
   22070:	4948      	ldr	r1, [pc, #288]	; (22194 <hif_isr+0x3a0>)
   22072:	4b49      	ldr	r3, [pc, #292]	; (22198 <hif_isr+0x3a4>)
   22074:	0018      	movs	r0, r3
   22076:	4b49      	ldr	r3, [pc, #292]	; (2219c <hif_isr+0x3a8>)
   22078:	4798      	blx	r3
   2207a:	4b50      	ldr	r3, [pc, #320]	; (221bc <hif_isr+0x3c8>)
   2207c:	0018      	movs	r0, r3
   2207e:	4b47      	ldr	r3, [pc, #284]	; (2219c <hif_isr+0x3a8>)
   22080:	4798      	blx	r3
   22082:	4b48      	ldr	r3, [pc, #288]	; (221a4 <hif_isr+0x3b0>)
   22084:	0018      	movs	r0, r3
   22086:	4b45      	ldr	r3, [pc, #276]	; (2219c <hif_isr+0x3a8>)
   22088:	4798      	blx	r3
   2208a:	e0a1      	b.n	221d0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2208c:	1d3b      	adds	r3, r7, #4
   2208e:	781b      	ldrb	r3, [r3, #0]
   22090:	b2db      	uxtb	r3, r3
   22092:	2b06      	cmp	r3, #6
   22094:	d121      	bne.n	220da <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   22096:	4b3d      	ldr	r3, [pc, #244]	; (2218c <hif_isr+0x398>)
   22098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2209a:	2b00      	cmp	r3, #0
   2209c:	d00d      	beq.n	220ba <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2209e:	4b3b      	ldr	r3, [pc, #236]	; (2218c <hif_isr+0x398>)
   220a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   220a2:	1d3a      	adds	r2, r7, #4
   220a4:	7852      	ldrb	r2, [r2, #1]
   220a6:	b2d0      	uxtb	r0, r2
   220a8:	1d3a      	adds	r2, r7, #4
   220aa:	8852      	ldrh	r2, [r2, #2]
   220ac:	b292      	uxth	r2, r2
   220ae:	3a08      	subs	r2, #8
   220b0:	b291      	uxth	r1, r2
   220b2:	683a      	ldr	r2, [r7, #0]
   220b4:	3208      	adds	r2, #8
   220b6:	4798      	blx	r3
   220b8:	e08a      	b.n	221d0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   220ba:	2380      	movs	r3, #128	; 0x80
   220bc:	009a      	lsls	r2, r3, #2
   220be:	4935      	ldr	r1, [pc, #212]	; (22194 <hif_isr+0x3a0>)
   220c0:	4b35      	ldr	r3, [pc, #212]	; (22198 <hif_isr+0x3a4>)
   220c2:	0018      	movs	r0, r3
   220c4:	4b35      	ldr	r3, [pc, #212]	; (2219c <hif_isr+0x3a8>)
   220c6:	4798      	blx	r3
   220c8:	4b3d      	ldr	r3, [pc, #244]	; (221c0 <hif_isr+0x3cc>)
   220ca:	0018      	movs	r0, r3
   220cc:	4b33      	ldr	r3, [pc, #204]	; (2219c <hif_isr+0x3a8>)
   220ce:	4798      	blx	r3
   220d0:	4b34      	ldr	r3, [pc, #208]	; (221a4 <hif_isr+0x3b0>)
   220d2:	0018      	movs	r0, r3
   220d4:	4b31      	ldr	r3, [pc, #196]	; (2219c <hif_isr+0x3a8>)
   220d6:	4798      	blx	r3
   220d8:	e07a      	b.n	221d0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   220da:	1d3b      	adds	r3, r7, #4
   220dc:	781b      	ldrb	r3, [r3, #0]
   220de:	b2db      	uxtb	r3, r3
   220e0:	2b07      	cmp	r3, #7
   220e2:	d120      	bne.n	22126 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   220e4:	4b29      	ldr	r3, [pc, #164]	; (2218c <hif_isr+0x398>)
   220e6:	69db      	ldr	r3, [r3, #28]
   220e8:	2b00      	cmp	r3, #0
   220ea:	d00d      	beq.n	22108 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   220ec:	4b27      	ldr	r3, [pc, #156]	; (2218c <hif_isr+0x398>)
   220ee:	69db      	ldr	r3, [r3, #28]
   220f0:	1d3a      	adds	r2, r7, #4
   220f2:	7852      	ldrb	r2, [r2, #1]
   220f4:	b2d0      	uxtb	r0, r2
   220f6:	1d3a      	adds	r2, r7, #4
   220f8:	8852      	ldrh	r2, [r2, #2]
   220fa:	b292      	uxth	r2, r2
   220fc:	3a08      	subs	r2, #8
   220fe:	b291      	uxth	r1, r2
   22100:	683a      	ldr	r2, [r7, #0]
   22102:	3208      	adds	r2, #8
   22104:	4798      	blx	r3
   22106:	e063      	b.n	221d0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22108:	4a2e      	ldr	r2, [pc, #184]	; (221c4 <hif_isr+0x3d0>)
   2210a:	4922      	ldr	r1, [pc, #136]	; (22194 <hif_isr+0x3a0>)
   2210c:	4b22      	ldr	r3, [pc, #136]	; (22198 <hif_isr+0x3a4>)
   2210e:	0018      	movs	r0, r3
   22110:	4b22      	ldr	r3, [pc, #136]	; (2219c <hif_isr+0x3a8>)
   22112:	4798      	blx	r3
   22114:	4b2c      	ldr	r3, [pc, #176]	; (221c8 <hif_isr+0x3d4>)
   22116:	0018      	movs	r0, r3
   22118:	4b20      	ldr	r3, [pc, #128]	; (2219c <hif_isr+0x3a8>)
   2211a:	4798      	blx	r3
   2211c:	4b21      	ldr	r3, [pc, #132]	; (221a4 <hif_isr+0x3b0>)
   2211e:	0018      	movs	r0, r3
   22120:	4b1e      	ldr	r3, [pc, #120]	; (2219c <hif_isr+0x3a8>)
   22122:	4798      	blx	r3
   22124:	e054      	b.n	221d0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   22126:	1d3b      	adds	r3, r7, #4
   22128:	781b      	ldrb	r3, [r3, #0]
   2212a:	b2db      	uxtb	r3, r3
   2212c:	2b05      	cmp	r3, #5
   2212e:	d111      	bne.n	22154 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   22130:	4b16      	ldr	r3, [pc, #88]	; (2218c <hif_isr+0x398>)
   22132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22134:	2b00      	cmp	r3, #0
   22136:	d04b      	beq.n	221d0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22138:	4b14      	ldr	r3, [pc, #80]	; (2218c <hif_isr+0x398>)
   2213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2213c:	1d3a      	adds	r2, r7, #4
   2213e:	7852      	ldrb	r2, [r2, #1]
   22140:	b2d0      	uxtb	r0, r2
   22142:	1d3a      	adds	r2, r7, #4
   22144:	8852      	ldrh	r2, [r2, #2]
   22146:	b292      	uxth	r2, r2
   22148:	3a08      	subs	r2, #8
   2214a:	b291      	uxth	r1, r2
   2214c:	683a      	ldr	r2, [r7, #0]
   2214e:	3208      	adds	r2, #8
   22150:	4798      	blx	r3
   22152:	e03d      	b.n	221d0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   22154:	2384      	movs	r3, #132	; 0x84
   22156:	009a      	lsls	r2, r3, #2
   22158:	490e      	ldr	r1, [pc, #56]	; (22194 <hif_isr+0x3a0>)
   2215a:	4b0f      	ldr	r3, [pc, #60]	; (22198 <hif_isr+0x3a4>)
   2215c:	0018      	movs	r0, r3
   2215e:	4b0f      	ldr	r3, [pc, #60]	; (2219c <hif_isr+0x3a8>)
   22160:	4798      	blx	r3
   22162:	4b1a      	ldr	r3, [pc, #104]	; (221cc <hif_isr+0x3d8>)
   22164:	0018      	movs	r0, r3
   22166:	4b0d      	ldr	r3, [pc, #52]	; (2219c <hif_isr+0x3a8>)
   22168:	4798      	blx	r3
   2216a:	4b0e      	ldr	r3, [pc, #56]	; (221a4 <hif_isr+0x3b0>)
   2216c:	0018      	movs	r0, r3
   2216e:	4b0b      	ldr	r3, [pc, #44]	; (2219c <hif_isr+0x3a8>)
   22170:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   22172:	230f      	movs	r3, #15
   22174:	18fb      	adds	r3, r7, r3
   22176:	22fa      	movs	r2, #250	; 0xfa
   22178:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2217a:	e083      	b.n	22284 <hif_isr+0x490>
   2217c:	00001070 	.word	0x00001070
   22180:	00023881 	.word	0x00023881
   22184:	00020fa5 	.word	0x00020fa5
   22188:	000238a5 	.word	0x000238a5
   2218c:	20005b68 	.word	0x20005b68
   22190:	00001084 	.word	0x00001084
   22194:	00039754 	.word	0x00039754
   22198:	00039444 	.word	0x00039444
   2219c:	0001ea59 	.word	0x0001ea59
   221a0:	00039478 	.word	0x00039478
   221a4:	00039440 	.word	0x00039440
   221a8:	000238f5 	.word	0x000238f5
   221ac:	000394a0 	.word	0x000394a0
   221b0:	000394b8 	.word	0x000394b8
   221b4:	000394f8 	.word	0x000394f8
   221b8:	0003951c 	.word	0x0003951c
   221bc:	00039540 	.word	0x00039540
   221c0:	00039560 	.word	0x00039560
   221c4:	00000207 	.word	0x00000207
   221c8:	00039584 	.word	0x00039584
   221cc:	000395a8 	.word	0x000395a8
				}
				if(gstrHifCxt.u8HifRXDone)
   221d0:	4b30      	ldr	r3, [pc, #192]	; (22294 <hif_isr+0x4a0>)
   221d2:	789b      	ldrb	r3, [r3, #2]
   221d4:	b2db      	uxtb	r3, r3
   221d6:	2b00      	cmp	r3, #0
   221d8:	d054      	beq.n	22284 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   221da:	4a2f      	ldr	r2, [pc, #188]	; (22298 <hif_isr+0x4a4>)
   221dc:	492f      	ldr	r1, [pc, #188]	; (2229c <hif_isr+0x4a8>)
   221de:	4b30      	ldr	r3, [pc, #192]	; (222a0 <hif_isr+0x4ac>)
   221e0:	0018      	movs	r0, r3
   221e2:	4b30      	ldr	r3, [pc, #192]	; (222a4 <hif_isr+0x4b0>)
   221e4:	4798      	blx	r3
   221e6:	1d3b      	adds	r3, r7, #4
   221e8:	781b      	ldrb	r3, [r3, #0]
   221ea:	b2db      	uxtb	r3, r3
   221ec:	0019      	movs	r1, r3
   221ee:	1d3b      	adds	r3, r7, #4
   221f0:	785b      	ldrb	r3, [r3, #1]
   221f2:	b2db      	uxtb	r3, r3
   221f4:	001a      	movs	r2, r3
   221f6:	4b2c      	ldr	r3, [pc, #176]	; (222a8 <hif_isr+0x4b4>)
   221f8:	0018      	movs	r0, r3
   221fa:	4b2a      	ldr	r3, [pc, #168]	; (222a4 <hif_isr+0x4b0>)
   221fc:	4798      	blx	r3
   221fe:	4b2b      	ldr	r3, [pc, #172]	; (222ac <hif_isr+0x4b8>)
   22200:	0018      	movs	r0, r3
   22202:	4b28      	ldr	r3, [pc, #160]	; (222a4 <hif_isr+0x4b0>)
   22204:	4798      	blx	r3
					ret = hif_set_rx_done();
   22206:	230f      	movs	r3, #15
   22208:	18fc      	adds	r4, r7, r3
   2220a:	4b29      	ldr	r3, [pc, #164]	; (222b0 <hif_isr+0x4bc>)
   2220c:	4798      	blx	r3
   2220e:	0003      	movs	r3, r0
   22210:	7023      	strb	r3, [r4, #0]
   22212:	e037      	b.n	22284 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22214:	4a27      	ldr	r2, [pc, #156]	; (222b4 <hif_isr+0x4c0>)
   22216:	4921      	ldr	r1, [pc, #132]	; (2229c <hif_isr+0x4a8>)
   22218:	4b21      	ldr	r3, [pc, #132]	; (222a0 <hif_isr+0x4ac>)
   2221a:	0018      	movs	r0, r3
   2221c:	4b21      	ldr	r3, [pc, #132]	; (222a4 <hif_isr+0x4b0>)
   2221e:	4798      	blx	r3
   22220:	4b25      	ldr	r3, [pc, #148]	; (222b8 <hif_isr+0x4c4>)
   22222:	0018      	movs	r0, r3
   22224:	4b1f      	ldr	r3, [pc, #124]	; (222a4 <hif_isr+0x4b0>)
   22226:	4798      	blx	r3
   22228:	4b20      	ldr	r3, [pc, #128]	; (222ac <hif_isr+0x4b8>)
   2222a:	0018      	movs	r0, r3
   2222c:	4b1d      	ldr	r3, [pc, #116]	; (222a4 <hif_isr+0x4b0>)
   2222e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   22230:	230f      	movs	r3, #15
   22232:	18fb      	adds	r3, r7, r3
   22234:	22fe      	movs	r2, #254	; 0xfe
   22236:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   22238:	e024      	b.n	22284 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2223a:	4a20      	ldr	r2, [pc, #128]	; (222bc <hif_isr+0x4c8>)
   2223c:	4917      	ldr	r1, [pc, #92]	; (2229c <hif_isr+0x4a8>)
   2223e:	4b18      	ldr	r3, [pc, #96]	; (222a0 <hif_isr+0x4ac>)
   22240:	0018      	movs	r0, r3
   22242:	4b18      	ldr	r3, [pc, #96]	; (222a4 <hif_isr+0x4b0>)
   22244:	4798      	blx	r3
   22246:	68ba      	ldr	r2, [r7, #8]
   22248:	4b1d      	ldr	r3, [pc, #116]	; (222c0 <hif_isr+0x4cc>)
   2224a:	0011      	movs	r1, r2
   2224c:	0018      	movs	r0, r3
   2224e:	4b15      	ldr	r3, [pc, #84]	; (222a4 <hif_isr+0x4b0>)
   22250:	4798      	blx	r3
   22252:	4b16      	ldr	r3, [pc, #88]	; (222ac <hif_isr+0x4b8>)
   22254:	0018      	movs	r0, r3
   22256:	4b13      	ldr	r3, [pc, #76]	; (222a4 <hif_isr+0x4b0>)
   22258:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2225a:	230f      	movs	r3, #15
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	22f4      	movs	r2, #244	; 0xf4
   22260:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22262:	e00f      	b.n	22284 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22264:	4a17      	ldr	r2, [pc, #92]	; (222c4 <hif_isr+0x4d0>)
   22266:	490d      	ldr	r1, [pc, #52]	; (2229c <hif_isr+0x4a8>)
   22268:	4b0d      	ldr	r3, [pc, #52]	; (222a0 <hif_isr+0x4ac>)
   2226a:	0018      	movs	r0, r3
   2226c:	4b0d      	ldr	r3, [pc, #52]	; (222a4 <hif_isr+0x4b0>)
   2226e:	4798      	blx	r3
   22270:	4b15      	ldr	r3, [pc, #84]	; (222c8 <hif_isr+0x4d4>)
   22272:	0018      	movs	r0, r3
   22274:	4b0b      	ldr	r3, [pc, #44]	; (222a4 <hif_isr+0x4b0>)
   22276:	4798      	blx	r3
   22278:	4b0c      	ldr	r3, [pc, #48]	; (222ac <hif_isr+0x4b8>)
   2227a:	0018      	movs	r0, r3
   2227c:	4b09      	ldr	r3, [pc, #36]	; (222a4 <hif_isr+0x4b0>)
   2227e:	4798      	blx	r3
		goto ERR1;
   22280:	e000      	b.n	22284 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   22282:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22284:	230f      	movs	r3, #15
   22286:	18fb      	adds	r3, r7, r3
   22288:	781b      	ldrb	r3, [r3, #0]
   2228a:	b25b      	sxtb	r3, r3
}
   2228c:	0018      	movs	r0, r3
   2228e:	46bd      	mov	sp, r7
   22290:	b005      	add	sp, #20
   22292:	bd90      	pop	{r4, r7, pc}
   22294:	20005b68 	.word	0x20005b68
   22298:	00000216 	.word	0x00000216
   2229c:	00039754 	.word	0x00039754
   222a0:	00039444 	.word	0x00039444
   222a4:	0001ea59 	.word	0x0001ea59
   222a8:	000395c0 	.word	0x000395c0
   222ac:	00039440 	.word	0x00039440
   222b0:	00021889 	.word	0x00021889
   222b4:	0000021d 	.word	0x0000021d
   222b8:	000395ec 	.word	0x000395ec
   222bc:	00000225 	.word	0x00000225
   222c0:	00039600 	.word	0x00039600
   222c4:	0000022e 	.word	0x0000022e
   222c8:	0003961c 	.word	0x0003961c

000222cc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   222cc:	b590      	push	{r4, r7, lr}
   222ce:	b083      	sub	sp, #12
   222d0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   222d2:	1dfb      	adds	r3, r7, #7
   222d4:	2200      	movs	r2, #0
   222d6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   222d8:	4b1c      	ldr	r3, [pc, #112]	; (2234c <hif_handle_isr+0x80>)
   222da:	2200      	movs	r2, #0
   222dc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   222de:	e024      	b.n	2232a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   222e0:	4b1a      	ldr	r3, [pc, #104]	; (2234c <hif_handle_isr+0x80>)
   222e2:	78db      	ldrb	r3, [r3, #3]
   222e4:	b2db      	uxtb	r3, r3
   222e6:	3b01      	subs	r3, #1
   222e8:	b2da      	uxtb	r2, r3
   222ea:	4b18      	ldr	r3, [pc, #96]	; (2234c <hif_handle_isr+0x80>)
   222ec:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   222ee:	1dfc      	adds	r4, r7, #7
   222f0:	4b17      	ldr	r3, [pc, #92]	; (22350 <hif_handle_isr+0x84>)
   222f2:	4798      	blx	r3
   222f4:	0003      	movs	r3, r0
   222f6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   222f8:	1dfb      	adds	r3, r7, #7
   222fa:	781b      	ldrb	r3, [r3, #0]
   222fc:	b25b      	sxtb	r3, r3
   222fe:	2b00      	cmp	r3, #0
   22300:	d100      	bne.n	22304 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   22302:	e012      	b.n	2232a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22304:	4a13      	ldr	r2, [pc, #76]	; (22354 <hif_handle_isr+0x88>)
   22306:	4914      	ldr	r1, [pc, #80]	; (22358 <hif_handle_isr+0x8c>)
   22308:	4b14      	ldr	r3, [pc, #80]	; (2235c <hif_handle_isr+0x90>)
   2230a:	0018      	movs	r0, r3
   2230c:	4b14      	ldr	r3, [pc, #80]	; (22360 <hif_handle_isr+0x94>)
   2230e:	4798      	blx	r3
   22310:	1dfb      	adds	r3, r7, #7
   22312:	2200      	movs	r2, #0
   22314:	569a      	ldrsb	r2, [r3, r2]
   22316:	4b13      	ldr	r3, [pc, #76]	; (22364 <hif_handle_isr+0x98>)
   22318:	0011      	movs	r1, r2
   2231a:	0018      	movs	r0, r3
   2231c:	4b10      	ldr	r3, [pc, #64]	; (22360 <hif_handle_isr+0x94>)
   2231e:	4798      	blx	r3
   22320:	4b11      	ldr	r3, [pc, #68]	; (22368 <hif_handle_isr+0x9c>)
   22322:	0018      	movs	r0, r3
   22324:	4b0e      	ldr	r3, [pc, #56]	; (22360 <hif_handle_isr+0x94>)
   22326:	4798      	blx	r3
			ret = hif_isr();
   22328:	e7e1      	b.n	222ee <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2232a:	4b08      	ldr	r3, [pc, #32]	; (2234c <hif_handle_isr+0x80>)
   2232c:	78db      	ldrb	r3, [r3, #3]
   2232e:	b2db      	uxtb	r3, r3
   22330:	2b00      	cmp	r3, #0
   22332:	d004      	beq.n	2233e <hif_handle_isr+0x72>
   22334:	4b05      	ldr	r3, [pc, #20]	; (2234c <hif_handle_isr+0x80>)
   22336:	791b      	ldrb	r3, [r3, #4]
   22338:	b2db      	uxtb	r3, r3
   2233a:	2b00      	cmp	r3, #0
   2233c:	d0d0      	beq.n	222e0 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2233e:	1dfb      	adds	r3, r7, #7
   22340:	781b      	ldrb	r3, [r3, #0]
   22342:	b25b      	sxtb	r3, r3
}
   22344:	0018      	movs	r0, r3
   22346:	46bd      	mov	sp, r7
   22348:	b003      	add	sp, #12
   2234a:	bd90      	pop	{r4, r7, pc}
   2234c:	20005b68 	.word	0x20005b68
   22350:	00021df5 	.word	0x00021df5
   22354:	00000257 	.word	0x00000257
   22358:	0003975c 	.word	0x0003975c
   2235c:	00039444 	.word	0x00039444
   22360:	0001ea59 	.word	0x0001ea59
   22364:	00039640 	.word	0x00039640
   22368:	00039440 	.word	0x00039440

0002236c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2236c:	b590      	push	{r4, r7, lr}
   2236e:	b087      	sub	sp, #28
   22370:	af00      	add	r7, sp, #0
   22372:	60f8      	str	r0, [r7, #12]
   22374:	60b9      	str	r1, [r7, #8]
   22376:	0019      	movs	r1, r3
   22378:	1dbb      	adds	r3, r7, #6
   2237a:	801a      	strh	r2, [r3, #0]
   2237c:	1d7b      	adds	r3, r7, #5
   2237e:	1c0a      	adds	r2, r1, #0
   22380:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22382:	2317      	movs	r3, #23
   22384:	18fb      	adds	r3, r7, r3
   22386:	2200      	movs	r2, #0
   22388:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2238a:	68fb      	ldr	r3, [r7, #12]
   2238c:	2b00      	cmp	r3, #0
   2238e:	d006      	beq.n	2239e <hif_receive+0x32>
   22390:	68bb      	ldr	r3, [r7, #8]
   22392:	2b00      	cmp	r3, #0
   22394:	d003      	beq.n	2239e <hif_receive+0x32>
   22396:	1dbb      	adds	r3, r7, #6
   22398:	881b      	ldrh	r3, [r3, #0]
   2239a:	2b00      	cmp	r3, #0
   2239c:	d11e      	bne.n	223dc <hif_receive+0x70>
	{
		if(isDone)
   2239e:	1d7b      	adds	r3, r7, #5
   223a0:	781b      	ldrb	r3, [r3, #0]
   223a2:	2b00      	cmp	r3, #0
   223a4:	d006      	beq.n	223b4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   223a6:	2317      	movs	r3, #23
   223a8:	18fc      	adds	r4, r7, r3
   223aa:	4b45      	ldr	r3, [pc, #276]	; (224c0 <hif_receive+0x154>)
   223ac:	4798      	blx	r3
   223ae:	0003      	movs	r3, r0
   223b0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   223b2:	e07c      	b.n	224ae <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   223b4:	2317      	movs	r3, #23
   223b6:	18fb      	adds	r3, r7, r3
   223b8:	22f4      	movs	r2, #244	; 0xf4
   223ba:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   223bc:	239e      	movs	r3, #158	; 0x9e
   223be:	009a      	lsls	r2, r3, #2
   223c0:	4940      	ldr	r1, [pc, #256]	; (224c4 <hif_receive+0x158>)
   223c2:	4b41      	ldr	r3, [pc, #260]	; (224c8 <hif_receive+0x15c>)
   223c4:	0018      	movs	r0, r3
   223c6:	4b41      	ldr	r3, [pc, #260]	; (224cc <hif_receive+0x160>)
   223c8:	4798      	blx	r3
   223ca:	4b41      	ldr	r3, [pc, #260]	; (224d0 <hif_receive+0x164>)
   223cc:	0018      	movs	r0, r3
   223ce:	4b3f      	ldr	r3, [pc, #252]	; (224cc <hif_receive+0x160>)
   223d0:	4798      	blx	r3
   223d2:	4b40      	ldr	r3, [pc, #256]	; (224d4 <hif_receive+0x168>)
   223d4:	0018      	movs	r0, r3
   223d6:	4b3d      	ldr	r3, [pc, #244]	; (224cc <hif_receive+0x160>)
   223d8:	4798      	blx	r3
		goto ERR1;
   223da:	e068      	b.n	224ae <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   223dc:	1dbb      	adds	r3, r7, #6
   223de:	881a      	ldrh	r2, [r3, #0]
   223e0:	4b3d      	ldr	r3, [pc, #244]	; (224d8 <hif_receive+0x16c>)
   223e2:	68db      	ldr	r3, [r3, #12]
   223e4:	429a      	cmp	r2, r3
   223e6:	d917      	bls.n	22418 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   223e8:	2317      	movs	r3, #23
   223ea:	18fb      	adds	r3, r7, r3
   223ec:	22f4      	movs	r2, #244	; 0xf4
   223ee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   223f0:	23a0      	movs	r3, #160	; 0xa0
   223f2:	009a      	lsls	r2, r3, #2
   223f4:	4933      	ldr	r1, [pc, #204]	; (224c4 <hif_receive+0x158>)
   223f6:	4b34      	ldr	r3, [pc, #208]	; (224c8 <hif_receive+0x15c>)
   223f8:	0018      	movs	r0, r3
   223fa:	4b34      	ldr	r3, [pc, #208]	; (224cc <hif_receive+0x160>)
   223fc:	4798      	blx	r3
   223fe:	1dbb      	adds	r3, r7, #6
   22400:	8819      	ldrh	r1, [r3, #0]
   22402:	4b35      	ldr	r3, [pc, #212]	; (224d8 <hif_receive+0x16c>)
   22404:	68da      	ldr	r2, [r3, #12]
   22406:	4b35      	ldr	r3, [pc, #212]	; (224dc <hif_receive+0x170>)
   22408:	0018      	movs	r0, r3
   2240a:	4b30      	ldr	r3, [pc, #192]	; (224cc <hif_receive+0x160>)
   2240c:	4798      	blx	r3
   2240e:	4b31      	ldr	r3, [pc, #196]	; (224d4 <hif_receive+0x168>)
   22410:	0018      	movs	r0, r3
   22412:	4b2e      	ldr	r3, [pc, #184]	; (224cc <hif_receive+0x160>)
   22414:	4798      	blx	r3
		goto ERR1;
   22416:	e04a      	b.n	224ae <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   22418:	4b2f      	ldr	r3, [pc, #188]	; (224d8 <hif_receive+0x16c>)
   2241a:	689a      	ldr	r2, [r3, #8]
   2241c:	68fb      	ldr	r3, [r7, #12]
   2241e:	429a      	cmp	r2, r3
   22420:	d80a      	bhi.n	22438 <hif_receive+0xcc>
   22422:	1dbb      	adds	r3, r7, #6
   22424:	881a      	ldrh	r2, [r3, #0]
   22426:	68fb      	ldr	r3, [r7, #12]
   22428:	18d2      	adds	r2, r2, r3
   2242a:	4b2b      	ldr	r3, [pc, #172]	; (224d8 <hif_receive+0x16c>)
   2242c:	6899      	ldr	r1, [r3, #8]
   2242e:	4b2a      	ldr	r3, [pc, #168]	; (224d8 <hif_receive+0x16c>)
   22430:	68db      	ldr	r3, [r3, #12]
   22432:	18cb      	adds	r3, r1, r3
   22434:	429a      	cmp	r2, r3
   22436:	d912      	bls.n	2245e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   22438:	2317      	movs	r3, #23
   2243a:	18fb      	adds	r3, r7, r3
   2243c:	22f4      	movs	r2, #244	; 0xf4
   2243e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   22440:	4a27      	ldr	r2, [pc, #156]	; (224e0 <hif_receive+0x174>)
   22442:	4920      	ldr	r1, [pc, #128]	; (224c4 <hif_receive+0x158>)
   22444:	4b20      	ldr	r3, [pc, #128]	; (224c8 <hif_receive+0x15c>)
   22446:	0018      	movs	r0, r3
   22448:	4b20      	ldr	r3, [pc, #128]	; (224cc <hif_receive+0x160>)
   2244a:	4798      	blx	r3
   2244c:	4b25      	ldr	r3, [pc, #148]	; (224e4 <hif_receive+0x178>)
   2244e:	0018      	movs	r0, r3
   22450:	4b1e      	ldr	r3, [pc, #120]	; (224cc <hif_receive+0x160>)
   22452:	4798      	blx	r3
   22454:	4b1f      	ldr	r3, [pc, #124]	; (224d4 <hif_receive+0x168>)
   22456:	0018      	movs	r0, r3
   22458:	4b1c      	ldr	r3, [pc, #112]	; (224cc <hif_receive+0x160>)
   2245a:	4798      	blx	r3
		goto ERR1;
   2245c:	e027      	b.n	224ae <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2245e:	1dbb      	adds	r3, r7, #6
   22460:	881a      	ldrh	r2, [r3, #0]
   22462:	2317      	movs	r3, #23
   22464:	18fc      	adds	r4, r7, r3
   22466:	68b9      	ldr	r1, [r7, #8]
   22468:	68fb      	ldr	r3, [r7, #12]
   2246a:	0018      	movs	r0, r3
   2246c:	4b1e      	ldr	r3, [pc, #120]	; (224e8 <hif_receive+0x17c>)
   2246e:	4798      	blx	r3
   22470:	0003      	movs	r3, r0
   22472:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22474:	2317      	movs	r3, #23
   22476:	18fb      	adds	r3, r7, r3
   22478:	781b      	ldrb	r3, [r3, #0]
   2247a:	b25b      	sxtb	r3, r3
   2247c:	2b00      	cmp	r3, #0
   2247e:	d115      	bne.n	224ac <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   22480:	4b15      	ldr	r3, [pc, #84]	; (224d8 <hif_receive+0x16c>)
   22482:	689a      	ldr	r2, [r3, #8]
   22484:	4b14      	ldr	r3, [pc, #80]	; (224d8 <hif_receive+0x16c>)
   22486:	68db      	ldr	r3, [r3, #12]
   22488:	18d2      	adds	r2, r2, r3
   2248a:	1dbb      	adds	r3, r7, #6
   2248c:	8819      	ldrh	r1, [r3, #0]
   2248e:	68fb      	ldr	r3, [r7, #12]
   22490:	18cb      	adds	r3, r1, r3
   22492:	429a      	cmp	r2, r3
   22494:	d003      	beq.n	2249e <hif_receive+0x132>
   22496:	1d7b      	adds	r3, r7, #5
   22498:	781b      	ldrb	r3, [r3, #0]
   2249a:	2b00      	cmp	r3, #0
   2249c:	d007      	beq.n	224ae <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2249e:	2317      	movs	r3, #23
   224a0:	18fc      	adds	r4, r7, r3
   224a2:	4b07      	ldr	r3, [pc, #28]	; (224c0 <hif_receive+0x154>)
   224a4:	4798      	blx	r3
   224a6:	0003      	movs	r3, r0
   224a8:	7023      	strb	r3, [r4, #0]
   224aa:	e000      	b.n	224ae <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   224ac:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   224ae:	2317      	movs	r3, #23
   224b0:	18fb      	adds	r3, r7, r3
   224b2:	781b      	ldrb	r3, [r3, #0]
   224b4:	b25b      	sxtb	r3, r3
}
   224b6:	0018      	movs	r0, r3
   224b8:	46bd      	mov	sp, r7
   224ba:	b007      	add	sp, #28
   224bc:	bd90      	pop	{r4, r7, pc}
   224be:	46c0      	nop			; (mov r8, r8)
   224c0:	00021889 	.word	0x00021889
   224c4:	0003976c 	.word	0x0003976c
   224c8:	00039444 	.word	0x00039444
   224cc:	0001ea59 	.word	0x0001ea59
   224d0:	00039670 	.word	0x00039670
   224d4:	00039440 	.word	0x00039440
   224d8:	20005b68 	.word	0x20005b68
   224dc:	00039690 	.word	0x00039690
   224e0:	00000286 	.word	0x00000286
   224e4:	000396d8 	.word	0x000396d8
   224e8:	000238f5 	.word	0x000238f5

000224ec <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   224ec:	b580      	push	{r7, lr}
   224ee:	b084      	sub	sp, #16
   224f0:	af00      	add	r7, sp, #0
   224f2:	0002      	movs	r2, r0
   224f4:	6039      	str	r1, [r7, #0]
   224f6:	1dfb      	adds	r3, r7, #7
   224f8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   224fa:	230f      	movs	r3, #15
   224fc:	18fb      	adds	r3, r7, r3
   224fe:	2200      	movs	r2, #0
   22500:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   22502:	1dfb      	adds	r3, r7, #7
   22504:	781b      	ldrb	r3, [r3, #0]
   22506:	2b07      	cmp	r3, #7
   22508:	d820      	bhi.n	2254c <hif_register_cb+0x60>
   2250a:	009a      	lsls	r2, r3, #2
   2250c:	4b1e      	ldr	r3, [pc, #120]	; (22588 <hif_register_cb+0x9c>)
   2250e:	18d3      	adds	r3, r2, r3
   22510:	681b      	ldr	r3, [r3, #0]
   22512:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22514:	4b1d      	ldr	r3, [pc, #116]	; (2258c <hif_register_cb+0xa0>)
   22516:	683a      	ldr	r2, [r7, #0]
   22518:	615a      	str	r2, [r3, #20]
			break;
   2251a:	e02d      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2251c:	4b1b      	ldr	r3, [pc, #108]	; (2258c <hif_register_cb+0xa0>)
   2251e:	683a      	ldr	r2, [r7, #0]
   22520:	611a      	str	r2, [r3, #16]
			break;
   22522:	e029      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22524:	4b19      	ldr	r3, [pc, #100]	; (2258c <hif_register_cb+0xa0>)
   22526:	683a      	ldr	r2, [r7, #0]
   22528:	619a      	str	r2, [r3, #24]
			break;
   2252a:	e025      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2252c:	4b17      	ldr	r3, [pc, #92]	; (2258c <hif_register_cb+0xa0>)
   2252e:	683a      	ldr	r2, [r7, #0]
   22530:	621a      	str	r2, [r3, #32]
			break;
   22532:	e021      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   22534:	4b15      	ldr	r3, [pc, #84]	; (2258c <hif_register_cb+0xa0>)
   22536:	683a      	ldr	r2, [r7, #0]
   22538:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2253a:	e01d      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2253c:	4b13      	ldr	r3, [pc, #76]	; (2258c <hif_register_cb+0xa0>)
   2253e:	683a      	ldr	r2, [r7, #0]
   22540:	61da      	str	r2, [r3, #28]
			break;
   22542:	e019      	b.n	22578 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   22544:	4b11      	ldr	r3, [pc, #68]	; (2258c <hif_register_cb+0xa0>)
   22546:	683a      	ldr	r2, [r7, #0]
   22548:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2254a:	e015      	b.n	22578 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2254c:	4a10      	ldr	r2, [pc, #64]	; (22590 <hif_register_cb+0xa4>)
   2254e:	4911      	ldr	r1, [pc, #68]	; (22594 <hif_register_cb+0xa8>)
   22550:	4b11      	ldr	r3, [pc, #68]	; (22598 <hif_register_cb+0xac>)
   22552:	0018      	movs	r0, r3
   22554:	4b11      	ldr	r3, [pc, #68]	; (2259c <hif_register_cb+0xb0>)
   22556:	4798      	blx	r3
   22558:	1dfb      	adds	r3, r7, #7
   2255a:	781a      	ldrb	r2, [r3, #0]
   2255c:	4b10      	ldr	r3, [pc, #64]	; (225a0 <hif_register_cb+0xb4>)
   2255e:	0011      	movs	r1, r2
   22560:	0018      	movs	r0, r3
   22562:	4b0e      	ldr	r3, [pc, #56]	; (2259c <hif_register_cb+0xb0>)
   22564:	4798      	blx	r3
   22566:	4b0f      	ldr	r3, [pc, #60]	; (225a4 <hif_register_cb+0xb8>)
   22568:	0018      	movs	r0, r3
   2256a:	4b0c      	ldr	r3, [pc, #48]	; (2259c <hif_register_cb+0xb0>)
   2256c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2256e:	230f      	movs	r3, #15
   22570:	18fb      	adds	r3, r7, r3
   22572:	22f4      	movs	r2, #244	; 0xf4
   22574:	701a      	strb	r2, [r3, #0]
			break;
   22576:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22578:	230f      	movs	r3, #15
   2257a:	18fb      	adds	r3, r7, r3
   2257c:	781b      	ldrb	r3, [r3, #0]
   2257e:	b25b      	sxtb	r3, r3
}
   22580:	0018      	movs	r0, r3
   22582:	46bd      	mov	sp, r7
   22584:	b004      	add	sp, #16
   22586:	bd80      	pop	{r7, pc}
   22588:	00039728 	.word	0x00039728
   2258c:	20005b68 	.word	0x20005b68
   22590:	000002be 	.word	0x000002be
   22594:	00039778 	.word	0x00039778
   22598:	00039444 	.word	0x00039444
   2259c:	0001ea59 	.word	0x0001ea59
   225a0:	0003971c 	.word	0x0003971c
   225a4:	00039440 	.word	0x00039440

000225a8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   225a8:	b590      	push	{r4, r7, lr}
   225aa:	b0af      	sub	sp, #188	; 0xbc
   225ac:	af02      	add	r7, sp, #8
   225ae:	603a      	str	r2, [r7, #0]
   225b0:	1dfb      	adds	r3, r7, #7
   225b2:	1c02      	adds	r2, r0, #0
   225b4:	701a      	strb	r2, [r3, #0]
   225b6:	1d3b      	adds	r3, r7, #4
   225b8:	1c0a      	adds	r2, r1, #0
   225ba:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   225bc:	1dfb      	adds	r3, r7, #7
   225be:	781b      	ldrb	r3, [r3, #0]
   225c0:	2b2c      	cmp	r3, #44	; 0x2c
   225c2:	d116      	bne.n	225f2 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   225c4:	23a4      	movs	r3, #164	; 0xa4
   225c6:	18f9      	adds	r1, r7, r3
   225c8:	6838      	ldr	r0, [r7, #0]
   225ca:	2300      	movs	r3, #0
   225cc:	2204      	movs	r2, #4
   225ce:	4cca      	ldr	r4, [pc, #808]	; (228f8 <m2m_wifi_cb+0x350>)
   225d0:	47a0      	blx	r4
   225d2:	1e03      	subs	r3, r0, #0
   225d4:	d000      	beq.n	225d8 <m2m_wifi_cb+0x30>
   225d6:	e1b4      	b.n	22942 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   225d8:	4bc8      	ldr	r3, [pc, #800]	; (228fc <m2m_wifi_cb+0x354>)
   225da:	681b      	ldr	r3, [r3, #0]
   225dc:	2b00      	cmp	r3, #0
   225de:	d100      	bne.n	225e2 <m2m_wifi_cb+0x3a>
   225e0:	e1af      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   225e2:	4bc6      	ldr	r3, [pc, #792]	; (228fc <m2m_wifi_cb+0x354>)
   225e4:	681b      	ldr	r3, [r3, #0]
   225e6:	22a4      	movs	r2, #164	; 0xa4
   225e8:	18ba      	adds	r2, r7, r2
   225ea:	0011      	movs	r1, r2
   225ec:	202c      	movs	r0, #44	; 0x2c
   225ee:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   225f0:	e1a7      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   225f2:	1dfb      	adds	r3, r7, #7
   225f4:	781b      	ldrb	r3, [r3, #0]
   225f6:	2b1b      	cmp	r3, #27
   225f8:	d116      	bne.n	22628 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   225fa:	239c      	movs	r3, #156	; 0x9c
   225fc:	18f9      	adds	r1, r7, r3
   225fe:	6838      	ldr	r0, [r7, #0]
   22600:	2300      	movs	r3, #0
   22602:	2208      	movs	r2, #8
   22604:	4cbc      	ldr	r4, [pc, #752]	; (228f8 <m2m_wifi_cb+0x350>)
   22606:	47a0      	blx	r4
   22608:	1e03      	subs	r3, r0, #0
   2260a:	d000      	beq.n	2260e <m2m_wifi_cb+0x66>
   2260c:	e199      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2260e:	4bbb      	ldr	r3, [pc, #748]	; (228fc <m2m_wifi_cb+0x354>)
   22610:	681b      	ldr	r3, [r3, #0]
   22612:	2b00      	cmp	r3, #0
   22614:	d100      	bne.n	22618 <m2m_wifi_cb+0x70>
   22616:	e194      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22618:	4bb8      	ldr	r3, [pc, #736]	; (228fc <m2m_wifi_cb+0x354>)
   2261a:	681b      	ldr	r3, [r3, #0]
   2261c:	229c      	movs	r2, #156	; 0x9c
   2261e:	18ba      	adds	r2, r7, r2
   22620:	0011      	movs	r1, r2
   22622:	201b      	movs	r0, #27
   22624:	4798      	blx	r3
}
   22626:	e18c      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   22628:	1dfb      	adds	r3, r7, #7
   2262a:	781b      	ldrb	r3, [r3, #0]
   2262c:	2b06      	cmp	r3, #6
   2262e:	d116      	bne.n	2265e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   22630:	230c      	movs	r3, #12
   22632:	18f9      	adds	r1, r7, r3
   22634:	6838      	ldr	r0, [r7, #0]
   22636:	2301      	movs	r3, #1
   22638:	2230      	movs	r2, #48	; 0x30
   2263a:	4caf      	ldr	r4, [pc, #700]	; (228f8 <m2m_wifi_cb+0x350>)
   2263c:	47a0      	blx	r4
   2263e:	1e03      	subs	r3, r0, #0
   22640:	d000      	beq.n	22644 <m2m_wifi_cb+0x9c>
   22642:	e17e      	b.n	22942 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22644:	4bad      	ldr	r3, [pc, #692]	; (228fc <m2m_wifi_cb+0x354>)
   22646:	681b      	ldr	r3, [r3, #0]
   22648:	2b00      	cmp	r3, #0
   2264a:	d100      	bne.n	2264e <m2m_wifi_cb+0xa6>
   2264c:	e179      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2264e:	4bab      	ldr	r3, [pc, #684]	; (228fc <m2m_wifi_cb+0x354>)
   22650:	681b      	ldr	r3, [r3, #0]
   22652:	220c      	movs	r2, #12
   22654:	18ba      	adds	r2, r7, r2
   22656:	0011      	movs	r1, r2
   22658:	2006      	movs	r0, #6
   2265a:	4798      	blx	r3
}
   2265c:	e171      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2265e:	1dfb      	adds	r3, r7, #7
   22660:	781b      	ldrb	r3, [r3, #0]
   22662:	2b0e      	cmp	r3, #14
   22664:	d100      	bne.n	22668 <m2m_wifi_cb+0xc0>
   22666:	e16c      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22668:	1dfb      	adds	r3, r7, #7
   2266a:	781b      	ldrb	r3, [r3, #0]
   2266c:	2b32      	cmp	r3, #50	; 0x32
   2266e:	d116      	bne.n	2269e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22670:	2384      	movs	r3, #132	; 0x84
   22672:	18f9      	adds	r1, r7, r3
   22674:	6838      	ldr	r0, [r7, #0]
   22676:	2300      	movs	r3, #0
   22678:	2218      	movs	r2, #24
   2267a:	4c9f      	ldr	r4, [pc, #636]	; (228f8 <m2m_wifi_cb+0x350>)
   2267c:	47a0      	blx	r4
   2267e:	1e03      	subs	r3, r0, #0
   22680:	d000      	beq.n	22684 <m2m_wifi_cb+0xdc>
   22682:	e15e      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22684:	4b9d      	ldr	r3, [pc, #628]	; (228fc <m2m_wifi_cb+0x354>)
   22686:	681b      	ldr	r3, [r3, #0]
   22688:	2b00      	cmp	r3, #0
   2268a:	d100      	bne.n	2268e <m2m_wifi_cb+0xe6>
   2268c:	e159      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2268e:	4b9b      	ldr	r3, [pc, #620]	; (228fc <m2m_wifi_cb+0x354>)
   22690:	681b      	ldr	r3, [r3, #0]
   22692:	2284      	movs	r2, #132	; 0x84
   22694:	18ba      	adds	r2, r7, r2
   22696:	0011      	movs	r1, r2
   22698:	2032      	movs	r0, #50	; 0x32
   2269a:	4798      	blx	r3
}
   2269c:	e151      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2269e:	1dfb      	adds	r3, r7, #7
   226a0:	781b      	ldrb	r3, [r3, #0]
   226a2:	2b2f      	cmp	r3, #47	; 0x2f
   226a4:	d11d      	bne.n	226e2 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   226a6:	230c      	movs	r3, #12
   226a8:	18fb      	adds	r3, r7, r3
   226aa:	2264      	movs	r2, #100	; 0x64
   226ac:	2100      	movs	r1, #0
   226ae:	0018      	movs	r0, r3
   226b0:	4b93      	ldr	r3, [pc, #588]	; (22900 <m2m_wifi_cb+0x358>)
   226b2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   226b4:	230c      	movs	r3, #12
   226b6:	18f9      	adds	r1, r7, r3
   226b8:	6838      	ldr	r0, [r7, #0]
   226ba:	2300      	movs	r3, #0
   226bc:	2264      	movs	r2, #100	; 0x64
   226be:	4c8e      	ldr	r4, [pc, #568]	; (228f8 <m2m_wifi_cb+0x350>)
   226c0:	47a0      	blx	r4
   226c2:	1e03      	subs	r3, r0, #0
   226c4:	d000      	beq.n	226c8 <m2m_wifi_cb+0x120>
   226c6:	e13c      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   226c8:	4b8c      	ldr	r3, [pc, #560]	; (228fc <m2m_wifi_cb+0x354>)
   226ca:	681b      	ldr	r3, [r3, #0]
   226cc:	2b00      	cmp	r3, #0
   226ce:	d100      	bne.n	226d2 <m2m_wifi_cb+0x12a>
   226d0:	e137      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   226d2:	4b8a      	ldr	r3, [pc, #552]	; (228fc <m2m_wifi_cb+0x354>)
   226d4:	681b      	ldr	r3, [r3, #0]
   226d6:	220c      	movs	r2, #12
   226d8:	18ba      	adds	r2, r7, r2
   226da:	0011      	movs	r1, r2
   226dc:	202f      	movs	r0, #47	; 0x2f
   226de:	4798      	blx	r3
}
   226e0:	e12f      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   226e2:	1dfb      	adds	r3, r7, #7
   226e4:	781b      	ldrb	r3, [r3, #0]
   226e6:	2b34      	cmp	r3, #52	; 0x34
   226e8:	d137      	bne.n	2275a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   226ea:	2380      	movs	r3, #128	; 0x80
   226ec:	18f9      	adds	r1, r7, r3
   226ee:	6838      	ldr	r0, [r7, #0]
   226f0:	2300      	movs	r3, #0
   226f2:	2204      	movs	r2, #4
   226f4:	4c80      	ldr	r4, [pc, #512]	; (228f8 <m2m_wifi_cb+0x350>)
   226f6:	47a0      	blx	r4
   226f8:	1e03      	subs	r3, r0, #0
   226fa:	d000      	beq.n	226fe <m2m_wifi_cb+0x156>
   226fc:	e121      	b.n	22942 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   226fe:	4b81      	ldr	r3, [pc, #516]	; (22904 <m2m_wifi_cb+0x35c>)
   22700:	0018      	movs	r0, r3
   22702:	4b81      	ldr	r3, [pc, #516]	; (22908 <m2m_wifi_cb+0x360>)
   22704:	4798      	blx	r3
   22706:	2380      	movs	r3, #128	; 0x80
   22708:	18fb      	adds	r3, r7, r3
   2270a:	681b      	ldr	r3, [r3, #0]
   2270c:	0e1b      	lsrs	r3, r3, #24
   2270e:	b2db      	uxtb	r3, r3
   22710:	0019      	movs	r1, r3
   22712:	2380      	movs	r3, #128	; 0x80
   22714:	18fb      	adds	r3, r7, r3
   22716:	681b      	ldr	r3, [r3, #0]
   22718:	0c1b      	lsrs	r3, r3, #16
   2271a:	b2db      	uxtb	r3, r3
   2271c:	001a      	movs	r2, r3
   2271e:	2380      	movs	r3, #128	; 0x80
   22720:	18fb      	adds	r3, r7, r3
   22722:	681b      	ldr	r3, [r3, #0]
   22724:	0a1b      	lsrs	r3, r3, #8
   22726:	b2db      	uxtb	r3, r3
   22728:	001c      	movs	r4, r3
   2272a:	2380      	movs	r3, #128	; 0x80
   2272c:	18fb      	adds	r3, r7, r3
   2272e:	681b      	ldr	r3, [r3, #0]
   22730:	b2db      	uxtb	r3, r3
   22732:	4876      	ldr	r0, [pc, #472]	; (2290c <m2m_wifi_cb+0x364>)
   22734:	9300      	str	r3, [sp, #0]
   22736:	0023      	movs	r3, r4
   22738:	4c73      	ldr	r4, [pc, #460]	; (22908 <m2m_wifi_cb+0x360>)
   2273a:	47a0      	blx	r4
   2273c:	4b74      	ldr	r3, [pc, #464]	; (22910 <m2m_wifi_cb+0x368>)
   2273e:	0018      	movs	r0, r3
   22740:	4b71      	ldr	r3, [pc, #452]	; (22908 <m2m_wifi_cb+0x360>)
   22742:	4798      	blx	r3
			if (gpfAppWifiCb)
   22744:	4b6d      	ldr	r3, [pc, #436]	; (228fc <m2m_wifi_cb+0x354>)
   22746:	681b      	ldr	r3, [r3, #0]
   22748:	2b00      	cmp	r3, #0
   2274a:	d100      	bne.n	2274e <m2m_wifi_cb+0x1a6>
   2274c:	e0f9      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2274e:	4b6b      	ldr	r3, [pc, #428]	; (228fc <m2m_wifi_cb+0x354>)
   22750:	681b      	ldr	r3, [r3, #0]
   22752:	2100      	movs	r1, #0
   22754:	2034      	movs	r0, #52	; 0x34
   22756:	4798      	blx	r3
}
   22758:	e0f3      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2275a:	1dfb      	adds	r3, r7, #7
   2275c:	781b      	ldrb	r3, [r3, #0]
   2275e:	2b11      	cmp	r3, #17
   22760:	d11e      	bne.n	227a0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   22762:	4b6c      	ldr	r3, [pc, #432]	; (22914 <m2m_wifi_cb+0x36c>)
   22764:	2200      	movs	r2, #0
   22766:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22768:	237c      	movs	r3, #124	; 0x7c
   2276a:	18f9      	adds	r1, r7, r3
   2276c:	6838      	ldr	r0, [r7, #0]
   2276e:	2300      	movs	r3, #0
   22770:	2204      	movs	r2, #4
   22772:	4c61      	ldr	r4, [pc, #388]	; (228f8 <m2m_wifi_cb+0x350>)
   22774:	47a0      	blx	r4
   22776:	1e03      	subs	r3, r0, #0
   22778:	d000      	beq.n	2277c <m2m_wifi_cb+0x1d4>
   2277a:	e0e2      	b.n	22942 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   2277c:	237c      	movs	r3, #124	; 0x7c
   2277e:	18fb      	adds	r3, r7, r3
   22780:	781a      	ldrb	r2, [r3, #0]
   22782:	4b65      	ldr	r3, [pc, #404]	; (22918 <m2m_wifi_cb+0x370>)
   22784:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22786:	4b5d      	ldr	r3, [pc, #372]	; (228fc <m2m_wifi_cb+0x354>)
   22788:	681b      	ldr	r3, [r3, #0]
   2278a:	2b00      	cmp	r3, #0
   2278c:	d100      	bne.n	22790 <m2m_wifi_cb+0x1e8>
   2278e:	e0d8      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   22790:	4b5a      	ldr	r3, [pc, #360]	; (228fc <m2m_wifi_cb+0x354>)
   22792:	681b      	ldr	r3, [r3, #0]
   22794:	227c      	movs	r2, #124	; 0x7c
   22796:	18ba      	adds	r2, r7, r2
   22798:	0011      	movs	r1, r2
   2279a:	2011      	movs	r0, #17
   2279c:	4798      	blx	r3
}
   2279e:	e0d0      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   227a0:	1dfb      	adds	r3, r7, #7
   227a2:	781b      	ldrb	r3, [r3, #0]
   227a4:	2b13      	cmp	r3, #19
   227a6:	d116      	bne.n	227d6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   227a8:	230c      	movs	r3, #12
   227aa:	18f9      	adds	r1, r7, r3
   227ac:	6838      	ldr	r0, [r7, #0]
   227ae:	2300      	movs	r3, #0
   227b0:	222c      	movs	r2, #44	; 0x2c
   227b2:	4c51      	ldr	r4, [pc, #324]	; (228f8 <m2m_wifi_cb+0x350>)
   227b4:	47a0      	blx	r4
   227b6:	1e03      	subs	r3, r0, #0
   227b8:	d000      	beq.n	227bc <m2m_wifi_cb+0x214>
   227ba:	e0c2      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227bc:	4b4f      	ldr	r3, [pc, #316]	; (228fc <m2m_wifi_cb+0x354>)
   227be:	681b      	ldr	r3, [r3, #0]
   227c0:	2b00      	cmp	r3, #0
   227c2:	d100      	bne.n	227c6 <m2m_wifi_cb+0x21e>
   227c4:	e0bd      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   227c6:	4b4d      	ldr	r3, [pc, #308]	; (228fc <m2m_wifi_cb+0x354>)
   227c8:	681b      	ldr	r3, [r3, #0]
   227ca:	220c      	movs	r2, #12
   227cc:	18ba      	adds	r2, r7, r2
   227ce:	0011      	movs	r1, r2
   227d0:	2013      	movs	r0, #19
   227d2:	4798      	blx	r3
}
   227d4:	e0b5      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   227d6:	1dfb      	adds	r3, r7, #7
   227d8:	781b      	ldrb	r3, [r3, #0]
   227da:	2b04      	cmp	r3, #4
   227dc:	d116      	bne.n	2280c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   227de:	23a8      	movs	r3, #168	; 0xa8
   227e0:	18f9      	adds	r1, r7, r3
   227e2:	6838      	ldr	r0, [r7, #0]
   227e4:	2300      	movs	r3, #0
   227e6:	2204      	movs	r2, #4
   227e8:	4c43      	ldr	r4, [pc, #268]	; (228f8 <m2m_wifi_cb+0x350>)
   227ea:	47a0      	blx	r4
   227ec:	1e03      	subs	r3, r0, #0
   227ee:	d000      	beq.n	227f2 <m2m_wifi_cb+0x24a>
   227f0:	e0a7      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227f2:	4b42      	ldr	r3, [pc, #264]	; (228fc <m2m_wifi_cb+0x354>)
   227f4:	681b      	ldr	r3, [r3, #0]
   227f6:	2b00      	cmp	r3, #0
   227f8:	d100      	bne.n	227fc <m2m_wifi_cb+0x254>
   227fa:	e0a2      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   227fc:	4b3f      	ldr	r3, [pc, #252]	; (228fc <m2m_wifi_cb+0x354>)
   227fe:	681b      	ldr	r3, [r3, #0]
   22800:	22a8      	movs	r2, #168	; 0xa8
   22802:	18ba      	adds	r2, r7, r2
   22804:	0011      	movs	r1, r2
   22806:	2004      	movs	r0, #4
   22808:	4798      	blx	r3
}
   2280a:	e09a      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2280c:	1dfb      	adds	r3, r7, #7
   2280e:	781b      	ldrb	r3, [r3, #0]
   22810:	2b65      	cmp	r3, #101	; 0x65
   22812:	d116      	bne.n	22842 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22814:	23a8      	movs	r3, #168	; 0xa8
   22816:	18f9      	adds	r1, r7, r3
   22818:	6838      	ldr	r0, [r7, #0]
   2281a:	2300      	movs	r3, #0
   2281c:	2204      	movs	r2, #4
   2281e:	4c36      	ldr	r4, [pc, #216]	; (228f8 <m2m_wifi_cb+0x350>)
   22820:	47a0      	blx	r4
   22822:	1e03      	subs	r3, r0, #0
   22824:	d000      	beq.n	22828 <m2m_wifi_cb+0x280>
   22826:	e08c      	b.n	22942 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22828:	4b34      	ldr	r3, [pc, #208]	; (228fc <m2m_wifi_cb+0x354>)
   2282a:	681b      	ldr	r3, [r3, #0]
   2282c:	2b00      	cmp	r3, #0
   2282e:	d100      	bne.n	22832 <m2m_wifi_cb+0x28a>
   22830:	e087      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22832:	4b32      	ldr	r3, [pc, #200]	; (228fc <m2m_wifi_cb+0x354>)
   22834:	681b      	ldr	r3, [r3, #0]
   22836:	22a8      	movs	r2, #168	; 0xa8
   22838:	18ba      	adds	r2, r7, r2
   2283a:	0011      	movs	r1, r2
   2283c:	2065      	movs	r0, #101	; 0x65
   2283e:	4798      	blx	r3
}
   22840:	e07f      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22842:	1dfb      	adds	r3, r7, #7
   22844:	781b      	ldrb	r3, [r3, #0]
   22846:	2b09      	cmp	r3, #9
   22848:	d116      	bne.n	22878 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2284a:	230c      	movs	r3, #12
   2284c:	18f9      	adds	r1, r7, r3
   2284e:	6838      	ldr	r0, [r7, #0]
   22850:	2301      	movs	r3, #1
   22852:	2264      	movs	r2, #100	; 0x64
   22854:	4c28      	ldr	r4, [pc, #160]	; (228f8 <m2m_wifi_cb+0x350>)
   22856:	47a0      	blx	r4
   22858:	1e03      	subs	r3, r0, #0
   2285a:	d000      	beq.n	2285e <m2m_wifi_cb+0x2b6>
   2285c:	e071      	b.n	22942 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2285e:	4b27      	ldr	r3, [pc, #156]	; (228fc <m2m_wifi_cb+0x354>)
   22860:	681b      	ldr	r3, [r3, #0]
   22862:	2b00      	cmp	r3, #0
   22864:	d100      	bne.n	22868 <m2m_wifi_cb+0x2c0>
   22866:	e06c      	b.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22868:	4b24      	ldr	r3, [pc, #144]	; (228fc <m2m_wifi_cb+0x354>)
   2286a:	681b      	ldr	r3, [r3, #0]
   2286c:	220c      	movs	r2, #12
   2286e:	18ba      	adds	r2, r7, r2
   22870:	0011      	movs	r1, r2
   22872:	2009      	movs	r0, #9
   22874:	4798      	blx	r3
}
   22876:	e064      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22878:	1dfb      	adds	r3, r7, #7
   2287a:	781b      	ldrb	r3, [r3, #0]
   2287c:	2b2a      	cmp	r3, #42	; 0x2a
   2287e:	d114      	bne.n	228aa <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22880:	2378      	movs	r3, #120	; 0x78
   22882:	18f9      	adds	r1, r7, r3
   22884:	6838      	ldr	r0, [r7, #0]
   22886:	2301      	movs	r3, #1
   22888:	2204      	movs	r2, #4
   2288a:	4c1b      	ldr	r4, [pc, #108]	; (228f8 <m2m_wifi_cb+0x350>)
   2288c:	47a0      	blx	r4
   2288e:	1e03      	subs	r3, r0, #0
   22890:	d157      	bne.n	22942 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22892:	4b1a      	ldr	r3, [pc, #104]	; (228fc <m2m_wifi_cb+0x354>)
   22894:	681b      	ldr	r3, [r3, #0]
   22896:	2b00      	cmp	r3, #0
   22898:	d053      	beq.n	22942 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   2289a:	4b18      	ldr	r3, [pc, #96]	; (228fc <m2m_wifi_cb+0x354>)
   2289c:	681b      	ldr	r3, [r3, #0]
   2289e:	2278      	movs	r2, #120	; 0x78
   228a0:	18ba      	adds	r2, r7, r2
   228a2:	0011      	movs	r1, r2
   228a4:	202a      	movs	r0, #42	; 0x2a
   228a6:	4798      	blx	r3
}
   228a8:	e04b      	b.n	22942 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   228aa:	1dfb      	adds	r3, r7, #7
   228ac:	781b      	ldrb	r3, [r3, #0]
   228ae:	2b20      	cmp	r3, #32
   228b0:	d134      	bne.n	2291c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   228b2:	2370      	movs	r3, #112	; 0x70
   228b4:	18f9      	adds	r1, r7, r3
   228b6:	6838      	ldr	r0, [r7, #0]
   228b8:	2300      	movs	r3, #0
   228ba:	2208      	movs	r2, #8
   228bc:	4c0e      	ldr	r4, [pc, #56]	; (228f8 <m2m_wifi_cb+0x350>)
   228be:	47a0      	blx	r4
   228c0:	1e03      	subs	r3, r0, #0
   228c2:	d13e      	bne.n	22942 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   228c4:	683b      	ldr	r3, [r7, #0]
   228c6:	3308      	adds	r3, #8
   228c8:	0018      	movs	r0, r3
   228ca:	2370      	movs	r3, #112	; 0x70
   228cc:	18fb      	adds	r3, r7, r3
   228ce:	6819      	ldr	r1, [r3, #0]
   228d0:	2370      	movs	r3, #112	; 0x70
   228d2:	18fb      	adds	r3, r7, r3
   228d4:	889a      	ldrh	r2, [r3, #4]
   228d6:	2301      	movs	r3, #1
   228d8:	4c07      	ldr	r4, [pc, #28]	; (228f8 <m2m_wifi_cb+0x350>)
   228da:	47a0      	blx	r4
   228dc:	1e03      	subs	r3, r0, #0
   228de:	d130      	bne.n	22942 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   228e0:	4b06      	ldr	r3, [pc, #24]	; (228fc <m2m_wifi_cb+0x354>)
   228e2:	681b      	ldr	r3, [r3, #0]
   228e4:	2b00      	cmp	r3, #0
   228e6:	d02c      	beq.n	22942 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   228e8:	4b04      	ldr	r3, [pc, #16]	; (228fc <m2m_wifi_cb+0x354>)
   228ea:	681b      	ldr	r3, [r3, #0]
   228ec:	2270      	movs	r2, #112	; 0x70
   228ee:	18ba      	adds	r2, r7, r2
   228f0:	0011      	movs	r1, r2
   228f2:	2020      	movs	r0, #32
   228f4:	4798      	blx	r3
}
   228f6:	e024      	b.n	22942 <m2m_wifi_cb+0x39a>
   228f8:	0002236d 	.word	0x0002236d
   228fc:	200042ac 	.word	0x200042ac
   22900:	000217f1 	.word	0x000217f1
   22904:	00039788 	.word	0x00039788
   22908:	0001ea59 	.word	0x0001ea59
   2290c:	00039794 	.word	0x00039794
   22910:	000397b4 	.word	0x000397b4
   22914:	200042a9 	.word	0x200042a9
   22918:	200042a8 	.word	0x200042a8
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2291c:	2324      	movs	r3, #36	; 0x24
   2291e:	33ff      	adds	r3, #255	; 0xff
   22920:	001a      	movs	r2, r3
   22922:	490a      	ldr	r1, [pc, #40]	; (2294c <m2m_wifi_cb+0x3a4>)
   22924:	4b0a      	ldr	r3, [pc, #40]	; (22950 <m2m_wifi_cb+0x3a8>)
   22926:	0018      	movs	r0, r3
   22928:	4b0a      	ldr	r3, [pc, #40]	; (22954 <m2m_wifi_cb+0x3ac>)
   2292a:	4798      	blx	r3
   2292c:	1dfb      	adds	r3, r7, #7
   2292e:	781a      	ldrb	r2, [r3, #0]
   22930:	4b09      	ldr	r3, [pc, #36]	; (22958 <m2m_wifi_cb+0x3b0>)
   22932:	0011      	movs	r1, r2
   22934:	0018      	movs	r0, r3
   22936:	4b07      	ldr	r3, [pc, #28]	; (22954 <m2m_wifi_cb+0x3ac>)
   22938:	4798      	blx	r3
   2293a:	4b08      	ldr	r3, [pc, #32]	; (2295c <m2m_wifi_cb+0x3b4>)
   2293c:	0018      	movs	r0, r3
   2293e:	4b05      	ldr	r3, [pc, #20]	; (22954 <m2m_wifi_cb+0x3ac>)
   22940:	4798      	blx	r3
}
   22942:	46c0      	nop			; (mov r8, r8)
   22944:	46bd      	mov	sp, r7
   22946:	b02d      	add	sp, #180	; 0xb4
   22948:	bd90      	pop	{r4, r7, pc}
   2294a:	46c0      	nop			; (mov r8, r8)
   2294c:	00039b54 	.word	0x00039b54
   22950:	000397b8 	.word	0x000397b8
   22954:	0001ea59 	.word	0x0001ea59
   22958:	000397cc 	.word	0x000397cc
   2295c:	000397b4 	.word	0x000397b4

00022960 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22960:	b590      	push	{r4, r7, lr}
   22962:	b091      	sub	sp, #68	; 0x44
   22964:	af02      	add	r7, sp, #8
   22966:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22968:	2337      	movs	r3, #55	; 0x37
   2296a:	18fb      	adds	r3, r7, r3
   2296c:	2200      	movs	r2, #0
   2296e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22970:	230b      	movs	r3, #11
   22972:	18fb      	adds	r3, r7, r3
   22974:	2201      	movs	r2, #1
   22976:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22978:	687b      	ldr	r3, [r7, #4]
   2297a:	2b00      	cmp	r3, #0
   2297c:	d104      	bne.n	22988 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2297e:	2337      	movs	r3, #55	; 0x37
   22980:	18fb      	adds	r3, r7, r3
   22982:	22f4      	movs	r2, #244	; 0xf4
   22984:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22986:	e0b3      	b.n	22af0 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22988:	687b      	ldr	r3, [r7, #4]
   2298a:	681a      	ldr	r2, [r3, #0]
   2298c:	4b5c      	ldr	r3, [pc, #368]	; (22b00 <m2m_wifi_init+0x1a0>)
   2298e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22990:	4b5c      	ldr	r3, [pc, #368]	; (22b04 <m2m_wifi_init+0x1a4>)
   22992:	2200      	movs	r2, #0
   22994:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22996:	2337      	movs	r3, #55	; 0x37
   22998:	18fc      	adds	r4, r7, r3
   2299a:	230b      	movs	r3, #11
   2299c:	18fb      	adds	r3, r7, r3
   2299e:	0018      	movs	r0, r3
   229a0:	4b59      	ldr	r3, [pc, #356]	; (22b08 <m2m_wifi_init+0x1a8>)
   229a2:	4798      	blx	r3
   229a4:	0003      	movs	r3, r0
   229a6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   229a8:	2337      	movs	r3, #55	; 0x37
   229aa:	18fb      	adds	r3, r7, r3
   229ac:	781b      	ldrb	r3, [r3, #0]
   229ae:	b25b      	sxtb	r3, r3
   229b0:	2b00      	cmp	r3, #0
   229b2:	d000      	beq.n	229b6 <m2m_wifi_init+0x56>
   229b4:	e099      	b.n	22aea <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   229b6:	2337      	movs	r3, #55	; 0x37
   229b8:	18fc      	adds	r4, r7, r3
   229ba:	2000      	movs	r0, #0
   229bc:	4b53      	ldr	r3, [pc, #332]	; (22b0c <m2m_wifi_init+0x1ac>)
   229be:	4798      	blx	r3
   229c0:	0003      	movs	r3, r0
   229c2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   229c4:	2337      	movs	r3, #55	; 0x37
   229c6:	18fb      	adds	r3, r7, r3
   229c8:	781b      	ldrb	r3, [r3, #0]
   229ca:	b25b      	sxtb	r3, r3
   229cc:	2b00      	cmp	r3, #0
   229ce:	d000      	beq.n	229d2 <m2m_wifi_init+0x72>
   229d0:	e086      	b.n	22ae0 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   229d2:	4b4f      	ldr	r3, [pc, #316]	; (22b10 <m2m_wifi_init+0x1b0>)
   229d4:	0019      	movs	r1, r3
   229d6:	2001      	movs	r0, #1
   229d8:	4b4e      	ldr	r3, [pc, #312]	; (22b14 <m2m_wifi_init+0x1b4>)
   229da:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   229dc:	2337      	movs	r3, #55	; 0x37
   229de:	18fc      	adds	r4, r7, r3
   229e0:	230c      	movs	r3, #12
   229e2:	18fb      	adds	r3, r7, r3
   229e4:	0018      	movs	r0, r3
   229e6:	4b4c      	ldr	r3, [pc, #304]	; (22b18 <m2m_wifi_init+0x1b8>)
   229e8:	4798      	blx	r3
   229ea:	0003      	movs	r3, r0
   229ec:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   229ee:	4b4b      	ldr	r3, [pc, #300]	; (22b1c <m2m_wifi_init+0x1bc>)
   229f0:	0018      	movs	r0, r3
   229f2:	4b4b      	ldr	r3, [pc, #300]	; (22b20 <m2m_wifi_init+0x1c0>)
   229f4:	4798      	blx	r3
   229f6:	230c      	movs	r3, #12
   229f8:	18fb      	adds	r3, r7, r3
   229fa:	791b      	ldrb	r3, [r3, #4]
   229fc:	0019      	movs	r1, r3
   229fe:	230c      	movs	r3, #12
   22a00:	18fb      	adds	r3, r7, r3
   22a02:	795b      	ldrb	r3, [r3, #5]
   22a04:	001a      	movs	r2, r3
   22a06:	230c      	movs	r3, #12
   22a08:	18fb      	adds	r3, r7, r3
   22a0a:	799b      	ldrb	r3, [r3, #6]
   22a0c:	001c      	movs	r4, r3
   22a0e:	230c      	movs	r3, #12
   22a10:	18fb      	adds	r3, r7, r3
   22a12:	8c1b      	ldrh	r3, [r3, #32]
   22a14:	4843      	ldr	r0, [pc, #268]	; (22b24 <m2m_wifi_init+0x1c4>)
   22a16:	9300      	str	r3, [sp, #0]
   22a18:	0023      	movs	r3, r4
   22a1a:	4c41      	ldr	r4, [pc, #260]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a1c:	47a0      	blx	r4
   22a1e:	4b42      	ldr	r3, [pc, #264]	; (22b28 <m2m_wifi_init+0x1c8>)
   22a20:	0018      	movs	r0, r3
   22a22:	4b3f      	ldr	r3, [pc, #252]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a24:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22a26:	4b3d      	ldr	r3, [pc, #244]	; (22b1c <m2m_wifi_init+0x1bc>)
   22a28:	0018      	movs	r0, r3
   22a2a:	4b3d      	ldr	r3, [pc, #244]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a2c:	4798      	blx	r3
   22a2e:	230c      	movs	r3, #12
   22a30:	18fb      	adds	r3, r7, r3
   22a32:	3316      	adds	r3, #22
   22a34:	001a      	movs	r2, r3
   22a36:	230c      	movs	r3, #12
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	330a      	adds	r3, #10
   22a3c:	0019      	movs	r1, r3
   22a3e:	4b3b      	ldr	r3, [pc, #236]	; (22b2c <m2m_wifi_init+0x1cc>)
   22a40:	0018      	movs	r0, r3
   22a42:	4b37      	ldr	r3, [pc, #220]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a44:	4798      	blx	r3
   22a46:	4b38      	ldr	r3, [pc, #224]	; (22b28 <m2m_wifi_init+0x1c8>)
   22a48:	0018      	movs	r0, r3
   22a4a:	4b35      	ldr	r3, [pc, #212]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a4c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   22a4e:	4b33      	ldr	r3, [pc, #204]	; (22b1c <m2m_wifi_init+0x1bc>)
   22a50:	0018      	movs	r0, r3
   22a52:	4b33      	ldr	r3, [pc, #204]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a54:	4798      	blx	r3
   22a56:	230c      	movs	r3, #12
   22a58:	18fb      	adds	r3, r7, r3
   22a5a:	79db      	ldrb	r3, [r3, #7]
   22a5c:	0019      	movs	r1, r3
   22a5e:	230c      	movs	r3, #12
   22a60:	18fb      	adds	r3, r7, r3
   22a62:	7a1b      	ldrb	r3, [r3, #8]
   22a64:	001a      	movs	r2, r3
   22a66:	230c      	movs	r3, #12
   22a68:	18fb      	adds	r3, r7, r3
   22a6a:	7a5b      	ldrb	r3, [r3, #9]
   22a6c:	4830      	ldr	r0, [pc, #192]	; (22b30 <m2m_wifi_init+0x1d0>)
   22a6e:	4c2c      	ldr	r4, [pc, #176]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a70:	47a0      	blx	r4
   22a72:	4b2d      	ldr	r3, [pc, #180]	; (22b28 <m2m_wifi_init+0x1c8>)
   22a74:	0018      	movs	r0, r3
   22a76:	4b2a      	ldr	r3, [pc, #168]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a78:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22a7a:	4b28      	ldr	r3, [pc, #160]	; (22b1c <m2m_wifi_init+0x1bc>)
   22a7c:	0018      	movs	r0, r3
   22a7e:	4b28      	ldr	r3, [pc, #160]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a80:	4798      	blx	r3
   22a82:	482c      	ldr	r0, [pc, #176]	; (22b34 <m2m_wifi_init+0x1d4>)
   22a84:	2304      	movs	r3, #4
   22a86:	2205      	movs	r2, #5
   22a88:	2113      	movs	r1, #19
   22a8a:	4c25      	ldr	r4, [pc, #148]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a8c:	47a0      	blx	r4
   22a8e:	4b26      	ldr	r3, [pc, #152]	; (22b28 <m2m_wifi_init+0x1c8>)
   22a90:	0018      	movs	r0, r3
   22a92:	4b23      	ldr	r3, [pc, #140]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a94:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22a96:	4b21      	ldr	r3, [pc, #132]	; (22b1c <m2m_wifi_init+0x1bc>)
   22a98:	0018      	movs	r0, r3
   22a9a:	4b21      	ldr	r3, [pc, #132]	; (22b20 <m2m_wifi_init+0x1c0>)
   22a9c:	4798      	blx	r3
   22a9e:	4a26      	ldr	r2, [pc, #152]	; (22b38 <m2m_wifi_init+0x1d8>)
   22aa0:	4926      	ldr	r1, [pc, #152]	; (22b3c <m2m_wifi_init+0x1dc>)
   22aa2:	4b27      	ldr	r3, [pc, #156]	; (22b40 <m2m_wifi_init+0x1e0>)
   22aa4:	0018      	movs	r0, r3
   22aa6:	4b1e      	ldr	r3, [pc, #120]	; (22b20 <m2m_wifi_init+0x1c0>)
   22aa8:	4798      	blx	r3
   22aaa:	4b1f      	ldr	r3, [pc, #124]	; (22b28 <m2m_wifi_init+0x1c8>)
   22aac:	0018      	movs	r0, r3
   22aae:	4b1c      	ldr	r3, [pc, #112]	; (22b20 <m2m_wifi_init+0x1c0>)
   22ab0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22ab2:	2337      	movs	r3, #55	; 0x37
   22ab4:	18fb      	adds	r3, r7, r3
   22ab6:	781b      	ldrb	r3, [r3, #0]
   22ab8:	b25b      	sxtb	r3, r3
   22aba:	330d      	adds	r3, #13
   22abc:	d117      	bne.n	22aee <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22abe:	23e8      	movs	r3, #232	; 0xe8
   22ac0:	33ff      	adds	r3, #255	; 0xff
   22ac2:	001a      	movs	r2, r3
   22ac4:	491f      	ldr	r1, [pc, #124]	; (22b44 <m2m_wifi_init+0x1e4>)
   22ac6:	4b20      	ldr	r3, [pc, #128]	; (22b48 <m2m_wifi_init+0x1e8>)
   22ac8:	0018      	movs	r0, r3
   22aca:	4b15      	ldr	r3, [pc, #84]	; (22b20 <m2m_wifi_init+0x1c0>)
   22acc:	4798      	blx	r3
   22ace:	4b1f      	ldr	r3, [pc, #124]	; (22b4c <m2m_wifi_init+0x1ec>)
   22ad0:	0018      	movs	r0, r3
   22ad2:	4b13      	ldr	r3, [pc, #76]	; (22b20 <m2m_wifi_init+0x1c0>)
   22ad4:	4798      	blx	r3
   22ad6:	4b14      	ldr	r3, [pc, #80]	; (22b28 <m2m_wifi_init+0x1c8>)
   22ad8:	0018      	movs	r0, r3
   22ada:	4b11      	ldr	r3, [pc, #68]	; (22b20 <m2m_wifi_init+0x1c0>)
   22adc:	4798      	blx	r3
	}

	goto _EXIT0;
   22ade:	e006      	b.n	22aee <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22ae0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22ae2:	2000      	movs	r0, #0
   22ae4:	4b1a      	ldr	r3, [pc, #104]	; (22b50 <m2m_wifi_init+0x1f0>)
   22ae6:	4798      	blx	r3
   22ae8:	e002      	b.n	22af0 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22aea:	46c0      	nop			; (mov r8, r8)
   22aec:	e000      	b.n	22af0 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22aee:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22af0:	2337      	movs	r3, #55	; 0x37
   22af2:	18fb      	adds	r3, r7, r3
   22af4:	781b      	ldrb	r3, [r3, #0]
   22af6:	b25b      	sxtb	r3, r3
}
   22af8:	0018      	movs	r0, r3
   22afa:	46bd      	mov	sp, r7
   22afc:	b00f      	add	sp, #60	; 0x3c
   22afe:	bd90      	pop	{r4, r7, pc}
   22b00:	200042ac 	.word	0x200042ac
   22b04:	200042a9 	.word	0x200042a9
   22b08:	00023c85 	.word	0x00023c85
   22b0c:	00021a09 	.word	0x00021a09
   22b10:	000225a9 	.word	0x000225a9
   22b14:	000224ed 	.word	0x000224ed
   22b18:	00023ab9 	.word	0x00023ab9
   22b1c:	00039788 	.word	0x00039788
   22b20:	0001ea59 	.word	0x0001ea59
   22b24:	0003992c 	.word	0x0003992c
   22b28:	000397b4 	.word	0x000397b4
   22b2c:	00039954 	.word	0x00039954
   22b30:	00039970 	.word	0x00039970
   22b34:	00039994 	.word	0x00039994
   22b38:	000399ac 	.word	0x000399ac
   22b3c:	000399b8 	.word	0x000399b8
   22b40:	000399c4 	.word	0x000399c4
   22b44:	00039b60 	.word	0x00039b60
   22b48:	000397b8 	.word	0x000397b8
   22b4c:	000399dc 	.word	0x000399dc
   22b50:	00023e15 	.word	0x00023e15

00022b54 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22b54:	b580      	push	{r7, lr}
   22b56:	b082      	sub	sp, #8
   22b58:	af00      	add	r7, sp, #0
   22b5a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22b5c:	4b03      	ldr	r3, [pc, #12]	; (22b6c <m2m_wifi_handle_events+0x18>)
   22b5e:	4798      	blx	r3
   22b60:	0003      	movs	r3, r0
}
   22b62:	0018      	movs	r0, r3
   22b64:	46bd      	mov	sp, r7
   22b66:	b002      	add	sp, #8
   22b68:	bd80      	pop	{r7, pc}
   22b6a:	46c0      	nop			; (mov r8, r8)
   22b6c:	000222cd 	.word	0x000222cd

00022b70 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22b70:	b590      	push	{r4, r7, lr}
   22b72:	b087      	sub	sp, #28
   22b74:	af02      	add	r7, sp, #8
   22b76:	60f8      	str	r0, [r7, #12]
   22b78:	0008      	movs	r0, r1
   22b7a:	0011      	movs	r1, r2
   22b7c:	607b      	str	r3, [r7, #4]
   22b7e:	230b      	movs	r3, #11
   22b80:	18fb      	adds	r3, r7, r3
   22b82:	1c02      	adds	r2, r0, #0
   22b84:	701a      	strb	r2, [r3, #0]
   22b86:	230a      	movs	r3, #10
   22b88:	18fb      	adds	r3, r7, r3
   22b8a:	1c0a      	adds	r2, r1, #0
   22b8c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22b8e:	687c      	ldr	r4, [r7, #4]
   22b90:	230a      	movs	r3, #10
   22b92:	18fb      	adds	r3, r7, r3
   22b94:	781a      	ldrb	r2, [r3, #0]
   22b96:	230b      	movs	r3, #11
   22b98:	18fb      	adds	r3, r7, r3
   22b9a:	7819      	ldrb	r1, [r3, #0]
   22b9c:	68f8      	ldr	r0, [r7, #12]
   22b9e:	2300      	movs	r3, #0
   22ba0:	9301      	str	r3, [sp, #4]
   22ba2:	2320      	movs	r3, #32
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	881b      	ldrh	r3, [r3, #0]
   22ba8:	9300      	str	r3, [sp, #0]
   22baa:	0023      	movs	r3, r4
   22bac:	4c03      	ldr	r4, [pc, #12]	; (22bbc <m2m_wifi_connect+0x4c>)
   22bae:	47a0      	blx	r4
   22bb0:	0003      	movs	r3, r0
}
   22bb2:	0018      	movs	r0, r3
   22bb4:	46bd      	mov	sp, r7
   22bb6:	b005      	add	sp, #20
   22bb8:	bd90      	pop	{r4, r7, pc}
   22bba:	46c0      	nop			; (mov r8, r8)
   22bbc:	00022bc1 	.word	0x00022bc1

00022bc0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22bc0:	b5b0      	push	{r4, r5, r7, lr}
   22bc2:	b0aa      	sub	sp, #168	; 0xa8
   22bc4:	af04      	add	r7, sp, #16
   22bc6:	60f8      	str	r0, [r7, #12]
   22bc8:	0008      	movs	r0, r1
   22bca:	0011      	movs	r1, r2
   22bcc:	607b      	str	r3, [r7, #4]
   22bce:	230b      	movs	r3, #11
   22bd0:	18fb      	adds	r3, r7, r3
   22bd2:	1c02      	adds	r2, r0, #0
   22bd4:	701a      	strb	r2, [r3, #0]
   22bd6:	230a      	movs	r3, #10
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	1c0a      	adds	r2, r1, #0
   22bdc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22bde:	2397      	movs	r3, #151	; 0x97
   22be0:	18fb      	adds	r3, r7, r3
   22be2:	2200      	movs	r2, #0
   22be4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22be6:	230a      	movs	r3, #10
   22be8:	18fb      	adds	r3, r7, r3
   22bea:	781b      	ldrb	r3, [r3, #0]
   22bec:	2b01      	cmp	r3, #1
   22bee:	d100      	bne.n	22bf2 <m2m_wifi_connect_sc+0x32>
   22bf0:	e085      	b.n	22cfe <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22bf2:	687b      	ldr	r3, [r7, #4]
   22bf4:	2b00      	cmp	r3, #0
   22bf6:	d112      	bne.n	22c1e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22bf8:	4ad8      	ldr	r2, [pc, #864]	; (22f5c <m2m_wifi_connect_sc+0x39c>)
   22bfa:	49d9      	ldr	r1, [pc, #868]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22bfc:	4bd9      	ldr	r3, [pc, #868]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22bfe:	0018      	movs	r0, r3
   22c00:	4bd9      	ldr	r3, [pc, #868]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22c02:	4798      	blx	r3
   22c04:	4bd9      	ldr	r3, [pc, #868]	; (22f6c <m2m_wifi_connect_sc+0x3ac>)
   22c06:	0018      	movs	r0, r3
   22c08:	4bd7      	ldr	r3, [pc, #860]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22c0a:	4798      	blx	r3
   22c0c:	4bd8      	ldr	r3, [pc, #864]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22c0e:	0018      	movs	r0, r3
   22c10:	4bd5      	ldr	r3, [pc, #852]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22c12:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22c14:	2397      	movs	r3, #151	; 0x97
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	22f4      	movs	r2, #244	; 0xf4
   22c1a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22c1c:	e1f9      	b.n	23012 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22c1e:	230a      	movs	r3, #10
   22c20:	18fb      	adds	r3, r7, r3
   22c22:	781b      	ldrb	r3, [r3, #0]
   22c24:	2b02      	cmp	r3, #2
   22c26:	d16a      	bne.n	22cfe <m2m_wifi_connect_sc+0x13e>
   22c28:	687b      	ldr	r3, [r7, #4]
   22c2a:	0018      	movs	r0, r3
   22c2c:	4bd1      	ldr	r3, [pc, #836]	; (22f74 <m2m_wifi_connect_sc+0x3b4>)
   22c2e:	4798      	blx	r3
   22c30:	0003      	movs	r3, r0
   22c32:	2b40      	cmp	r3, #64	; 0x40
   22c34:	d163      	bne.n	22cfe <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22c36:	2396      	movs	r3, #150	; 0x96
   22c38:	18fb      	adds	r3, r7, r3
   22c3a:	2200      	movs	r2, #0
   22c3c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22c3e:	687b      	ldr	r3, [r7, #4]
   22c40:	2290      	movs	r2, #144	; 0x90
   22c42:	18ba      	adds	r2, r7, r2
   22c44:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22c46:	e055      	b.n	22cf4 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22c48:	2396      	movs	r3, #150	; 0x96
   22c4a:	18fb      	adds	r3, r7, r3
   22c4c:	781b      	ldrb	r3, [r3, #0]
   22c4e:	2290      	movs	r2, #144	; 0x90
   22c50:	18ba      	adds	r2, r7, r2
   22c52:	6812      	ldr	r2, [r2, #0]
   22c54:	18d3      	adds	r3, r2, r3
   22c56:	781b      	ldrb	r3, [r3, #0]
   22c58:	2b2f      	cmp	r3, #47	; 0x2f
   22c5a:	d931      	bls.n	22cc0 <m2m_wifi_connect_sc+0x100>
   22c5c:	2396      	movs	r3, #150	; 0x96
   22c5e:	18fb      	adds	r3, r7, r3
   22c60:	781b      	ldrb	r3, [r3, #0]
   22c62:	2290      	movs	r2, #144	; 0x90
   22c64:	18ba      	adds	r2, r7, r2
   22c66:	6812      	ldr	r2, [r2, #0]
   22c68:	18d3      	adds	r3, r2, r3
   22c6a:	781b      	ldrb	r3, [r3, #0]
   22c6c:	2b39      	cmp	r3, #57	; 0x39
   22c6e:	d909      	bls.n	22c84 <m2m_wifi_connect_sc+0xc4>
   22c70:	2396      	movs	r3, #150	; 0x96
   22c72:	18fb      	adds	r3, r7, r3
   22c74:	781b      	ldrb	r3, [r3, #0]
   22c76:	2290      	movs	r2, #144	; 0x90
   22c78:	18ba      	adds	r2, r7, r2
   22c7a:	6812      	ldr	r2, [r2, #0]
   22c7c:	18d3      	adds	r3, r2, r3
   22c7e:	781b      	ldrb	r3, [r3, #0]
   22c80:	2b40      	cmp	r3, #64	; 0x40
   22c82:	d91d      	bls.n	22cc0 <m2m_wifi_connect_sc+0x100>
   22c84:	2396      	movs	r3, #150	; 0x96
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	781b      	ldrb	r3, [r3, #0]
   22c8a:	2290      	movs	r2, #144	; 0x90
   22c8c:	18ba      	adds	r2, r7, r2
   22c8e:	6812      	ldr	r2, [r2, #0]
   22c90:	18d3      	adds	r3, r2, r3
   22c92:	781b      	ldrb	r3, [r3, #0]
   22c94:	2b46      	cmp	r3, #70	; 0x46
   22c96:	d909      	bls.n	22cac <m2m_wifi_connect_sc+0xec>
   22c98:	2396      	movs	r3, #150	; 0x96
   22c9a:	18fb      	adds	r3, r7, r3
   22c9c:	781b      	ldrb	r3, [r3, #0]
   22c9e:	2290      	movs	r2, #144	; 0x90
   22ca0:	18ba      	adds	r2, r7, r2
   22ca2:	6812      	ldr	r2, [r2, #0]
   22ca4:	18d3      	adds	r3, r2, r3
   22ca6:	781b      	ldrb	r3, [r3, #0]
   22ca8:	2b60      	cmp	r3, #96	; 0x60
   22caa:	d909      	bls.n	22cc0 <m2m_wifi_connect_sc+0x100>
   22cac:	2396      	movs	r3, #150	; 0x96
   22cae:	18fb      	adds	r3, r7, r3
   22cb0:	781b      	ldrb	r3, [r3, #0]
   22cb2:	2290      	movs	r2, #144	; 0x90
   22cb4:	18ba      	adds	r2, r7, r2
   22cb6:	6812      	ldr	r2, [r2, #0]
   22cb8:	18d3      	adds	r3, r2, r3
   22cba:	781b      	ldrb	r3, [r3, #0]
   22cbc:	2b66      	cmp	r3, #102	; 0x66
   22cbe:	d912      	bls.n	22ce6 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22cc0:	4aad      	ldr	r2, [pc, #692]	; (22f78 <m2m_wifi_connect_sc+0x3b8>)
   22cc2:	49a7      	ldr	r1, [pc, #668]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22cc4:	4ba7      	ldr	r3, [pc, #668]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22cc6:	0018      	movs	r0, r3
   22cc8:	4ba7      	ldr	r3, [pc, #668]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22cca:	4798      	blx	r3
   22ccc:	4bab      	ldr	r3, [pc, #684]	; (22f7c <m2m_wifi_connect_sc+0x3bc>)
   22cce:	0018      	movs	r0, r3
   22cd0:	4ba5      	ldr	r3, [pc, #660]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22cd2:	4798      	blx	r3
   22cd4:	4ba6      	ldr	r3, [pc, #664]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22cd6:	0018      	movs	r0, r3
   22cd8:	4ba3      	ldr	r3, [pc, #652]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22cda:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22cdc:	2397      	movs	r3, #151	; 0x97
   22cde:	18fb      	adds	r3, r7, r3
   22ce0:	22f4      	movs	r2, #244	; 0xf4
   22ce2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22ce4:	e195      	b.n	23012 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22ce6:	2396      	movs	r3, #150	; 0x96
   22ce8:	18fb      	adds	r3, r7, r3
   22cea:	781a      	ldrb	r2, [r3, #0]
   22cec:	2396      	movs	r3, #150	; 0x96
   22cee:	18fb      	adds	r3, r7, r3
   22cf0:	3201      	adds	r2, #1
   22cf2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22cf4:	2396      	movs	r3, #150	; 0x96
   22cf6:	18fb      	adds	r3, r7, r3
   22cf8:	781b      	ldrb	r3, [r3, #0]
   22cfa:	2b3f      	cmp	r3, #63	; 0x3f
   22cfc:	d9a4      	bls.n	22c48 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22cfe:	230b      	movs	r3, #11
   22d00:	18fb      	adds	r3, r7, r3
   22d02:	781b      	ldrb	r3, [r3, #0]
   22d04:	2b00      	cmp	r3, #0
   22d06:	d004      	beq.n	22d12 <m2m_wifi_connect_sc+0x152>
   22d08:	230b      	movs	r3, #11
   22d0a:	18fb      	adds	r3, r7, r3
   22d0c:	781b      	ldrb	r3, [r3, #0]
   22d0e:	2b20      	cmp	r3, #32
   22d10:	d913      	bls.n	22d3a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22d12:	238c      	movs	r3, #140	; 0x8c
   22d14:	009a      	lsls	r2, r3, #2
   22d16:	4992      	ldr	r1, [pc, #584]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22d18:	4b92      	ldr	r3, [pc, #584]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22d1a:	0018      	movs	r0, r3
   22d1c:	4b92      	ldr	r3, [pc, #584]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d1e:	4798      	blx	r3
   22d20:	4b97      	ldr	r3, [pc, #604]	; (22f80 <m2m_wifi_connect_sc+0x3c0>)
   22d22:	0018      	movs	r0, r3
   22d24:	4b90      	ldr	r3, [pc, #576]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d26:	4798      	blx	r3
   22d28:	4b91      	ldr	r3, [pc, #580]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22d2a:	0018      	movs	r0, r3
   22d2c:	4b8e      	ldr	r3, [pc, #568]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d2e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22d30:	2397      	movs	r3, #151	; 0x97
   22d32:	18fb      	adds	r3, r7, r3
   22d34:	22f4      	movs	r2, #244	; 0xf4
   22d36:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22d38:	e16b      	b.n	23012 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22d3a:	23a8      	movs	r3, #168	; 0xa8
   22d3c:	18fb      	adds	r3, r7, r3
   22d3e:	881b      	ldrh	r3, [r3, #0]
   22d40:	2b00      	cmp	r3, #0
   22d42:	d004      	beq.n	22d4e <m2m_wifi_connect_sc+0x18e>
   22d44:	23a8      	movs	r3, #168	; 0xa8
   22d46:	18fb      	adds	r3, r7, r3
   22d48:	881b      	ldrh	r3, [r3, #0]
   22d4a:	2b0e      	cmp	r3, #14
   22d4c:	d917      	bls.n	22d7e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22d4e:	23a8      	movs	r3, #168	; 0xa8
   22d50:	18fb      	adds	r3, r7, r3
   22d52:	881b      	ldrh	r3, [r3, #0]
   22d54:	2bff      	cmp	r3, #255	; 0xff
   22d56:	d012      	beq.n	22d7e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22d58:	4a8a      	ldr	r2, [pc, #552]	; (22f84 <m2m_wifi_connect_sc+0x3c4>)
   22d5a:	4981      	ldr	r1, [pc, #516]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22d5c:	4b81      	ldr	r3, [pc, #516]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22d5e:	0018      	movs	r0, r3
   22d60:	4b81      	ldr	r3, [pc, #516]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d62:	4798      	blx	r3
   22d64:	4b88      	ldr	r3, [pc, #544]	; (22f88 <m2m_wifi_connect_sc+0x3c8>)
   22d66:	0018      	movs	r0, r3
   22d68:	4b7f      	ldr	r3, [pc, #508]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d6a:	4798      	blx	r3
   22d6c:	4b80      	ldr	r3, [pc, #512]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22d6e:	0018      	movs	r0, r3
   22d70:	4b7d      	ldr	r3, [pc, #500]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22d72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22d74:	2397      	movs	r3, #151	; 0x97
   22d76:	18fb      	adds	r3, r7, r3
   22d78:	22f4      	movs	r2, #244	; 0xf4
   22d7a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22d7c:	e149      	b.n	23012 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22d7e:	230b      	movs	r3, #11
   22d80:	18fb      	adds	r3, r7, r3
   22d82:	781a      	ldrb	r2, [r3, #0]
   22d84:	68f9      	ldr	r1, [r7, #12]
   22d86:	2314      	movs	r3, #20
   22d88:	18fb      	adds	r3, r7, r3
   22d8a:	3346      	adds	r3, #70	; 0x46
   22d8c:	0018      	movs	r0, r3
   22d8e:	4b7f      	ldr	r3, [pc, #508]	; (22f8c <m2m_wifi_connect_sc+0x3cc>)
   22d90:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22d92:	230b      	movs	r3, #11
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	781b      	ldrb	r3, [r3, #0]
   22d98:	2214      	movs	r2, #20
   22d9a:	18ba      	adds	r2, r7, r2
   22d9c:	2146      	movs	r1, #70	; 0x46
   22d9e:	18d3      	adds	r3, r2, r3
   22da0:	185b      	adds	r3, r3, r1
   22da2:	2200      	movs	r2, #0
   22da4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22da6:	2314      	movs	r3, #20
   22da8:	18fb      	adds	r3, r7, r3
   22daa:	22a8      	movs	r2, #168	; 0xa8
   22dac:	18ba      	adds	r2, r7, r2
   22dae:	2144      	movs	r1, #68	; 0x44
   22db0:	8812      	ldrh	r2, [r2, #0]
   22db2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22db4:	23ac      	movs	r3, #172	; 0xac
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	781b      	ldrb	r3, [r3, #0]
   22dba:	1e5a      	subs	r2, r3, #1
   22dbc:	4193      	sbcs	r3, r2
   22dbe:	b2db      	uxtb	r3, r3
   22dc0:	0019      	movs	r1, r3
   22dc2:	2314      	movs	r3, #20
   22dc4:	18fb      	adds	r3, r7, r3
   22dc6:	2267      	movs	r2, #103	; 0x67
   22dc8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22dca:	2314      	movs	r3, #20
   22dcc:	18fb      	adds	r3, r7, r3
   22dce:	228c      	movs	r2, #140	; 0x8c
   22dd0:	18ba      	adds	r2, r7, r2
   22dd2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22dd4:	238c      	movs	r3, #140	; 0x8c
   22dd6:	18fb      	adds	r3, r7, r3
   22dd8:	681b      	ldr	r3, [r3, #0]
   22dda:	220a      	movs	r2, #10
   22ddc:	18ba      	adds	r2, r7, r2
   22dde:	2141      	movs	r1, #65	; 0x41
   22de0:	7812      	ldrb	r2, [r2, #0]
   22de2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22de4:	230a      	movs	r3, #10
   22de6:	18fb      	adds	r3, r7, r3
   22de8:	781b      	ldrb	r3, [r3, #0]
   22dea:	2b03      	cmp	r3, #3
   22dec:	d000      	beq.n	22df0 <m2m_wifi_connect_sc+0x230>
   22dee:	e07d      	b.n	22eec <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22df0:	687b      	ldr	r3, [r7, #4]
   22df2:	2288      	movs	r2, #136	; 0x88
   22df4:	18ba      	adds	r2, r7, r2
   22df6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22df8:	238c      	movs	r3, #140	; 0x8c
   22dfa:	18fb      	adds	r3, r7, r3
   22dfc:	681b      	ldr	r3, [r3, #0]
   22dfe:	2284      	movs	r2, #132	; 0x84
   22e00:	18ba      	adds	r2, r7, r2
   22e02:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22e04:	2388      	movs	r3, #136	; 0x88
   22e06:	18fb      	adds	r3, r7, r3
   22e08:	681b      	ldr	r3, [r3, #0]
   22e0a:	781b      	ldrb	r3, [r3, #0]
   22e0c:	3b01      	subs	r3, #1
   22e0e:	b2da      	uxtb	r2, r3
   22e10:	2384      	movs	r3, #132	; 0x84
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	681b      	ldr	r3, [r3, #0]
   22e16:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22e18:	2384      	movs	r3, #132	; 0x84
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	681b      	ldr	r3, [r3, #0]
   22e1e:	781b      	ldrb	r3, [r3, #0]
   22e20:	2b03      	cmp	r3, #3
   22e22:	d919      	bls.n	22e58 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22e24:	2394      	movs	r3, #148	; 0x94
   22e26:	009a      	lsls	r2, r3, #2
   22e28:	494d      	ldr	r1, [pc, #308]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22e2a:	4b4e      	ldr	r3, [pc, #312]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22e2c:	0018      	movs	r0, r3
   22e2e:	4b4e      	ldr	r3, [pc, #312]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22e30:	4798      	blx	r3
   22e32:	2384      	movs	r3, #132	; 0x84
   22e34:	18fb      	adds	r3, r7, r3
   22e36:	681b      	ldr	r3, [r3, #0]
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	001a      	movs	r2, r3
   22e3c:	4b54      	ldr	r3, [pc, #336]	; (22f90 <m2m_wifi_connect_sc+0x3d0>)
   22e3e:	0011      	movs	r1, r2
   22e40:	0018      	movs	r0, r3
   22e42:	4b49      	ldr	r3, [pc, #292]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22e44:	4798      	blx	r3
   22e46:	4b4a      	ldr	r3, [pc, #296]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22e48:	0018      	movs	r0, r3
   22e4a:	4b47      	ldr	r3, [pc, #284]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22e4c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e4e:	2397      	movs	r3, #151	; 0x97
   22e50:	18fb      	adds	r3, r7, r3
   22e52:	22f4      	movs	r2, #244	; 0xf4
   22e54:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e56:	e0dc      	b.n	23012 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22e58:	2388      	movs	r3, #136	; 0x88
   22e5a:	18fb      	adds	r3, r7, r3
   22e5c:	681b      	ldr	r3, [r3, #0]
   22e5e:	785b      	ldrb	r3, [r3, #1]
   22e60:	3b01      	subs	r3, #1
   22e62:	b2da      	uxtb	r2, r3
   22e64:	2384      	movs	r3, #132	; 0x84
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	681b      	ldr	r3, [r3, #0]
   22e6a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22e6c:	2384      	movs	r3, #132	; 0x84
   22e6e:	18fb      	adds	r3, r7, r3
   22e70:	681b      	ldr	r3, [r3, #0]
   22e72:	785b      	ldrb	r3, [r3, #1]
   22e74:	2b0a      	cmp	r3, #10
   22e76:	d01e      	beq.n	22eb6 <m2m_wifi_connect_sc+0x2f6>
   22e78:	2384      	movs	r3, #132	; 0x84
   22e7a:	18fb      	adds	r3, r7, r3
   22e7c:	681b      	ldr	r3, [r3, #0]
   22e7e:	785b      	ldrb	r3, [r3, #1]
   22e80:	2b1a      	cmp	r3, #26
   22e82:	d018      	beq.n	22eb6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22e84:	4a43      	ldr	r2, [pc, #268]	; (22f94 <m2m_wifi_connect_sc+0x3d4>)
   22e86:	4936      	ldr	r1, [pc, #216]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22e88:	4b36      	ldr	r3, [pc, #216]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22e8a:	0018      	movs	r0, r3
   22e8c:	4b36      	ldr	r3, [pc, #216]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22e8e:	4798      	blx	r3
   22e90:	2384      	movs	r3, #132	; 0x84
   22e92:	18fb      	adds	r3, r7, r3
   22e94:	681b      	ldr	r3, [r3, #0]
   22e96:	785b      	ldrb	r3, [r3, #1]
   22e98:	001a      	movs	r2, r3
   22e9a:	4b3f      	ldr	r3, [pc, #252]	; (22f98 <m2m_wifi_connect_sc+0x3d8>)
   22e9c:	0011      	movs	r1, r2
   22e9e:	0018      	movs	r0, r3
   22ea0:	4b31      	ldr	r3, [pc, #196]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22ea2:	4798      	blx	r3
   22ea4:	4b32      	ldr	r3, [pc, #200]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22ea6:	0018      	movs	r0, r3
   22ea8:	4b2f      	ldr	r3, [pc, #188]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22eaa:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22eac:	2397      	movs	r3, #151	; 0x97
   22eae:	18fb      	adds	r3, r7, r3
   22eb0:	22f4      	movs	r2, #244	; 0xf4
   22eb2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22eb4:	e0ad      	b.n	23012 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22eb6:	2384      	movs	r3, #132	; 0x84
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	681b      	ldr	r3, [r3, #0]
   22ebc:	1c98      	adds	r0, r3, #2
   22ebe:	2388      	movs	r3, #136	; 0x88
   22ec0:	18fb      	adds	r3, r7, r3
   22ec2:	681b      	ldr	r3, [r3, #0]
   22ec4:	1c99      	adds	r1, r3, #2
   22ec6:	2388      	movs	r3, #136	; 0x88
   22ec8:	18fb      	adds	r3, r7, r3
   22eca:	681b      	ldr	r3, [r3, #0]
   22ecc:	785b      	ldrb	r3, [r3, #1]
   22ece:	001a      	movs	r2, r3
   22ed0:	4b2e      	ldr	r3, [pc, #184]	; (22f8c <m2m_wifi_connect_sc+0x3cc>)
   22ed2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22ed4:	2388      	movs	r3, #136	; 0x88
   22ed6:	18fb      	adds	r3, r7, r3
   22ed8:	681b      	ldr	r3, [r3, #0]
   22eda:	785b      	ldrb	r3, [r3, #1]
   22edc:	001a      	movs	r2, r3
   22ede:	2384      	movs	r3, #132	; 0x84
   22ee0:	18fb      	adds	r3, r7, r3
   22ee2:	681b      	ldr	r3, [r3, #0]
   22ee4:	189b      	adds	r3, r3, r2
   22ee6:	2200      	movs	r2, #0
   22ee8:	709a      	strb	r2, [r3, #2]
   22eea:	e081      	b.n	22ff0 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22eec:	230a      	movs	r3, #10
   22eee:	18fb      	adds	r3, r7, r3
   22ef0:	781b      	ldrb	r3, [r3, #0]
   22ef2:	2b02      	cmp	r3, #2
   22ef4:	d156      	bne.n	22fa4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22ef6:	2382      	movs	r3, #130	; 0x82
   22ef8:	18fc      	adds	r4, r7, r3
   22efa:	687b      	ldr	r3, [r7, #4]
   22efc:	0018      	movs	r0, r3
   22efe:	4b1d      	ldr	r3, [pc, #116]	; (22f74 <m2m_wifi_connect_sc+0x3b4>)
   22f00:	4798      	blx	r3
   22f02:	0003      	movs	r3, r0
   22f04:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22f06:	2382      	movs	r3, #130	; 0x82
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	881b      	ldrh	r3, [r3, #0]
   22f0c:	2b00      	cmp	r3, #0
   22f0e:	d004      	beq.n	22f1a <m2m_wifi_connect_sc+0x35a>
   22f10:	2382      	movs	r3, #130	; 0x82
   22f12:	18fb      	adds	r3, r7, r3
   22f14:	881b      	ldrh	r3, [r3, #0]
   22f16:	2b40      	cmp	r3, #64	; 0x40
   22f18:	d912      	bls.n	22f40 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22f1a:	4a20      	ldr	r2, [pc, #128]	; (22f9c <m2m_wifi_connect_sc+0x3dc>)
   22f1c:	4910      	ldr	r1, [pc, #64]	; (22f60 <m2m_wifi_connect_sc+0x3a0>)
   22f1e:	4b11      	ldr	r3, [pc, #68]	; (22f64 <m2m_wifi_connect_sc+0x3a4>)
   22f20:	0018      	movs	r0, r3
   22f22:	4b11      	ldr	r3, [pc, #68]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22f24:	4798      	blx	r3
   22f26:	4b1e      	ldr	r3, [pc, #120]	; (22fa0 <m2m_wifi_connect_sc+0x3e0>)
   22f28:	0018      	movs	r0, r3
   22f2a:	4b0f      	ldr	r3, [pc, #60]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22f2c:	4798      	blx	r3
   22f2e:	4b10      	ldr	r3, [pc, #64]	; (22f70 <m2m_wifi_connect_sc+0x3b0>)
   22f30:	0018      	movs	r0, r3
   22f32:	4b0d      	ldr	r3, [pc, #52]	; (22f68 <m2m_wifi_connect_sc+0x3a8>)
   22f34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22f36:	2397      	movs	r3, #151	; 0x97
   22f38:	18fb      	adds	r3, r7, r3
   22f3a:	22f4      	movs	r2, #244	; 0xf4
   22f3c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22f3e:	e068      	b.n	23012 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22f40:	238c      	movs	r3, #140	; 0x8c
   22f42:	18fb      	adds	r3, r7, r3
   22f44:	6818      	ldr	r0, [r3, #0]
   22f46:	2382      	movs	r3, #130	; 0x82
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	881b      	ldrh	r3, [r3, #0]
   22f4c:	3301      	adds	r3, #1
   22f4e:	001a      	movs	r2, r3
   22f50:	687b      	ldr	r3, [r7, #4]
   22f52:	0019      	movs	r1, r3
   22f54:	4b0d      	ldr	r3, [pc, #52]	; (22f8c <m2m_wifi_connect_sc+0x3cc>)
   22f56:	4798      	blx	r3
   22f58:	e04a      	b.n	22ff0 <m2m_wifi_connect_sc+0x430>
   22f5a:	46c0      	nop			; (mov r8, r8)
   22f5c:	0000021a 	.word	0x0000021a
   22f60:	00039b70 	.word	0x00039b70
   22f64:	000397b8 	.word	0x000397b8
   22f68:	0001ea59 	.word	0x0001ea59
   22f6c:	000399f8 	.word	0x000399f8
   22f70:	000397b4 	.word	0x000397b4
   22f74:	0002182f 	.word	0x0002182f
   22f78:	00000226 	.word	0x00000226
   22f7c:	00039a0c 	.word	0x00039a0c
   22f80:	00039a1c 	.word	0x00039a1c
   22f84:	00000239 	.word	0x00000239
   22f88:	00039a30 	.word	0x00039a30
   22f8c:	000217b5 	.word	0x000217b5
   22f90:	00039a3c 	.word	0x00039a3c
   22f94:	00000257 	.word	0x00000257
   22f98:	00039a58 	.word	0x00039a58
   22f9c:	00000266 	.word	0x00000266
   22fa0:	00039a74 	.word	0x00039a74
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22fa4:	230a      	movs	r3, #10
   22fa6:	18fb      	adds	r3, r7, r3
   22fa8:	781b      	ldrb	r3, [r3, #0]
   22faa:	2b04      	cmp	r3, #4
   22fac:	d108      	bne.n	22fc0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22fae:	238c      	movs	r3, #140	; 0x8c
   22fb0:	18fb      	adds	r3, r7, r3
   22fb2:	681b      	ldr	r3, [r3, #0]
   22fb4:	6879      	ldr	r1, [r7, #4]
   22fb6:	223e      	movs	r2, #62	; 0x3e
   22fb8:	0018      	movs	r0, r3
   22fba:	4b1a      	ldr	r3, [pc, #104]	; (23024 <m2m_wifi_connect_sc+0x464>)
   22fbc:	4798      	blx	r3
   22fbe:	e017      	b.n	22ff0 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22fc0:	230a      	movs	r3, #10
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	781b      	ldrb	r3, [r3, #0]
   22fc6:	2b01      	cmp	r3, #1
   22fc8:	d012      	beq.n	22ff0 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22fca:	4a17      	ldr	r2, [pc, #92]	; (23028 <m2m_wifi_connect_sc+0x468>)
   22fcc:	4917      	ldr	r1, [pc, #92]	; (2302c <m2m_wifi_connect_sc+0x46c>)
   22fce:	4b18      	ldr	r3, [pc, #96]	; (23030 <m2m_wifi_connect_sc+0x470>)
   22fd0:	0018      	movs	r0, r3
   22fd2:	4b18      	ldr	r3, [pc, #96]	; (23034 <m2m_wifi_connect_sc+0x474>)
   22fd4:	4798      	blx	r3
   22fd6:	4b18      	ldr	r3, [pc, #96]	; (23038 <m2m_wifi_connect_sc+0x478>)
   22fd8:	0018      	movs	r0, r3
   22fda:	4b16      	ldr	r3, [pc, #88]	; (23034 <m2m_wifi_connect_sc+0x474>)
   22fdc:	4798      	blx	r3
   22fde:	4b17      	ldr	r3, [pc, #92]	; (2303c <m2m_wifi_connect_sc+0x47c>)
   22fe0:	0018      	movs	r0, r3
   22fe2:	4b14      	ldr	r3, [pc, #80]	; (23034 <m2m_wifi_connect_sc+0x474>)
   22fe4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22fe6:	2397      	movs	r3, #151	; 0x97
   22fe8:	18fb      	adds	r3, r7, r3
   22fea:	22f4      	movs	r2, #244	; 0xf4
   22fec:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22fee:	e010      	b.n	23012 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   22ff0:	2397      	movs	r3, #151	; 0x97
   22ff2:	18fc      	adds	r4, r7, r3
   22ff4:	2314      	movs	r3, #20
   22ff6:	18fa      	adds	r2, r7, r3
   22ff8:	2300      	movs	r3, #0
   22ffa:	9302      	str	r3, [sp, #8]
   22ffc:	2300      	movs	r3, #0
   22ffe:	9301      	str	r3, [sp, #4]
   23000:	2300      	movs	r3, #0
   23002:	9300      	str	r3, [sp, #0]
   23004:	236c      	movs	r3, #108	; 0x6c
   23006:	2128      	movs	r1, #40	; 0x28
   23008:	2001      	movs	r0, #1
   2300a:	4d0d      	ldr	r5, [pc, #52]	; (23040 <m2m_wifi_connect_sc+0x480>)
   2300c:	47a8      	blx	r5
   2300e:	0003      	movs	r3, r0
   23010:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   23012:	2397      	movs	r3, #151	; 0x97
   23014:	18fb      	adds	r3, r7, r3
   23016:	781b      	ldrb	r3, [r3, #0]
   23018:	b25b      	sxtb	r3, r3
}
   2301a:	0018      	movs	r0, r3
   2301c:	46bd      	mov	sp, r7
   2301e:	b026      	add	sp, #152	; 0x98
   23020:	bdb0      	pop	{r4, r5, r7, pc}
   23022:	46c0      	nop			; (mov r8, r8)
   23024:	000217b5 	.word	0x000217b5
   23028:	00000276 	.word	0x00000276
   2302c:	00039b70 	.word	0x00039b70
   23030:	000397b8 	.word	0x000397b8
   23034:	0001ea59 	.word	0x0001ea59
   23038:	00039a90 	.word	0x00039a90
   2303c:	000397b4 	.word	0x000397b4
   23040:	00021a51 	.word	0x00021a51

00023044 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   23044:	b580      	push	{r7, lr}
   23046:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   23048:	2300      	movs	r3, #0
}
   2304a:	0018      	movs	r0, r3
   2304c:	46bd      	mov	sp, r7
   2304e:	bd80      	pop	{r7, pc}

00023050 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   23050:	b590      	push	{r4, r7, lr}
   23052:	b087      	sub	sp, #28
   23054:	af00      	add	r7, sp, #0
   23056:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23058:	2317      	movs	r3, #23
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	2200      	movs	r2, #0
   2305e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   23060:	687b      	ldr	r3, [r7, #4]
   23062:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   23064:	693b      	ldr	r3, [r7, #16]
   23066:	2280      	movs	r2, #128	; 0x80
   23068:	0052      	lsls	r2, r2, #1
   2306a:	4313      	orrs	r3, r2
   2306c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2306e:	693a      	ldr	r2, [r7, #16]
   23070:	23a5      	movs	r3, #165	; 0xa5
   23072:	015b      	lsls	r3, r3, #5
   23074:	0011      	movs	r1, r2
   23076:	0018      	movs	r0, r3
   23078:	4b12      	ldr	r3, [pc, #72]	; (230c4 <chip_apply_conf+0x74>)
   2307a:	4798      	blx	r3
		if(val32 != 0) {		
   2307c:	693b      	ldr	r3, [r7, #16]
   2307e:	2b00      	cmp	r3, #0
   23080:	d018      	beq.n	230b4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   23082:	2300      	movs	r3, #0
   23084:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   23086:	2317      	movs	r3, #23
   23088:	18fc      	adds	r4, r7, r3
   2308a:	230c      	movs	r3, #12
   2308c:	18fa      	adds	r2, r7, r3
   2308e:	23a5      	movs	r3, #165	; 0xa5
   23090:	015b      	lsls	r3, r3, #5
   23092:	0011      	movs	r1, r2
   23094:	0018      	movs	r0, r3
   23096:	4b0c      	ldr	r3, [pc, #48]	; (230c8 <chip_apply_conf+0x78>)
   23098:	4798      	blx	r3
   2309a:	0003      	movs	r3, r0
   2309c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2309e:	2317      	movs	r3, #23
   230a0:	18fb      	adds	r3, r7, r3
   230a2:	781b      	ldrb	r3, [r3, #0]
   230a4:	b25b      	sxtb	r3, r3
   230a6:	2b00      	cmp	r3, #0
   230a8:	d1e1      	bne.n	2306e <chip_apply_conf+0x1e>
				if(reg == val32)
   230aa:	68fa      	ldr	r2, [r7, #12]
   230ac:	693b      	ldr	r3, [r7, #16]
   230ae:	429a      	cmp	r2, r3
   230b0:	d002      	beq.n	230b8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   230b2:	e7dc      	b.n	2306e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   230b4:	46c0      	nop			; (mov r8, r8)
   230b6:	e000      	b.n	230ba <chip_apply_conf+0x6a>
					break;
   230b8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   230ba:	2300      	movs	r3, #0
}
   230bc:	0018      	movs	r0, r3
   230be:	46bd      	mov	sp, r7
   230c0:	b007      	add	sp, #28
   230c2:	bd90      	pop	{r4, r7, pc}
   230c4:	000238a5 	.word	0x000238a5
   230c8:	00023881 	.word	0x00023881

000230cc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   230cc:	b590      	push	{r4, r7, lr}
   230ce:	b083      	sub	sp, #12
   230d0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   230d2:	2300      	movs	r3, #0
   230d4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   230d6:	1dfb      	adds	r3, r7, #7
   230d8:	2200      	movs	r2, #0
   230da:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   230dc:	1dfc      	adds	r4, r7, #7
   230de:	003b      	movs	r3, r7
   230e0:	4a24      	ldr	r2, [pc, #144]	; (23174 <enable_interrupts+0xa8>)
   230e2:	0019      	movs	r1, r3
   230e4:	0010      	movs	r0, r2
   230e6:	4b24      	ldr	r3, [pc, #144]	; (23178 <enable_interrupts+0xac>)
   230e8:	4798      	blx	r3
   230ea:	0003      	movs	r3, r0
   230ec:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   230ee:	1dfb      	adds	r3, r7, #7
   230f0:	781b      	ldrb	r3, [r3, #0]
   230f2:	b25b      	sxtb	r3, r3
   230f4:	2b00      	cmp	r3, #0
   230f6:	d131      	bne.n	2315c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   230f8:	683b      	ldr	r3, [r7, #0]
   230fa:	2280      	movs	r2, #128	; 0x80
   230fc:	0052      	lsls	r2, r2, #1
   230fe:	4313      	orrs	r3, r2
   23100:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23102:	683b      	ldr	r3, [r7, #0]
   23104:	1dfc      	adds	r4, r7, #7
   23106:	4a1b      	ldr	r2, [pc, #108]	; (23174 <enable_interrupts+0xa8>)
   23108:	0019      	movs	r1, r3
   2310a:	0010      	movs	r0, r2
   2310c:	4b1b      	ldr	r3, [pc, #108]	; (2317c <enable_interrupts+0xb0>)
   2310e:	4798      	blx	r3
   23110:	0003      	movs	r3, r0
   23112:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23114:	1dfb      	adds	r3, r7, #7
   23116:	781b      	ldrb	r3, [r3, #0]
   23118:	b25b      	sxtb	r3, r3
   2311a:	2b00      	cmp	r3, #0
   2311c:	d120      	bne.n	23160 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2311e:	1dfc      	adds	r4, r7, #7
   23120:	003a      	movs	r2, r7
   23122:	23d0      	movs	r3, #208	; 0xd0
   23124:	015b      	lsls	r3, r3, #5
   23126:	0011      	movs	r1, r2
   23128:	0018      	movs	r0, r3
   2312a:	4b13      	ldr	r3, [pc, #76]	; (23178 <enable_interrupts+0xac>)
   2312c:	4798      	blx	r3
   2312e:	0003      	movs	r3, r0
   23130:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23132:	1dfb      	adds	r3, r7, #7
   23134:	781b      	ldrb	r3, [r3, #0]
   23136:	b25b      	sxtb	r3, r3
   23138:	2b00      	cmp	r3, #0
   2313a:	d113      	bne.n	23164 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2313c:	683b      	ldr	r3, [r7, #0]
   2313e:	2280      	movs	r2, #128	; 0x80
   23140:	0252      	lsls	r2, r2, #9
   23142:	4313      	orrs	r3, r2
   23144:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   23146:	683a      	ldr	r2, [r7, #0]
   23148:	1dfc      	adds	r4, r7, #7
   2314a:	23d0      	movs	r3, #208	; 0xd0
   2314c:	015b      	lsls	r3, r3, #5
   2314e:	0011      	movs	r1, r2
   23150:	0018      	movs	r0, r3
   23152:	4b0a      	ldr	r3, [pc, #40]	; (2317c <enable_interrupts+0xb0>)
   23154:	4798      	blx	r3
   23156:	0003      	movs	r3, r0
   23158:	7023      	strb	r3, [r4, #0]
   2315a:	e004      	b.n	23166 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2315c:	46c0      	nop			; (mov r8, r8)
   2315e:	e002      	b.n	23166 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23160:	46c0      	nop			; (mov r8, r8)
   23162:	e000      	b.n	23166 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23164:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   23166:	1dfb      	adds	r3, r7, #7
   23168:	781b      	ldrb	r3, [r3, #0]
   2316a:	b25b      	sxtb	r3, r3
}
   2316c:	0018      	movs	r0, r3
   2316e:	46bd      	mov	sp, r7
   23170:	b003      	add	sp, #12
   23172:	bd90      	pop	{r4, r7, pc}
   23174:	00001408 	.word	0x00001408
   23178:	00023881 	.word	0x00023881
   2317c:	000238a5 	.word	0x000238a5

00023180 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   23180:	b580      	push	{r7, lr}
   23182:	b082      	sub	sp, #8
   23184:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   23186:	4b32      	ldr	r3, [pc, #200]	; (23250 <nmi_get_chipid+0xd0>)
   23188:	681b      	ldr	r3, [r3, #0]
   2318a:	2b00      	cmp	r3, #0
   2318c:	d159      	bne.n	23242 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2318e:	4a30      	ldr	r2, [pc, #192]	; (23250 <nmi_get_chipid+0xd0>)
   23190:	2380      	movs	r3, #128	; 0x80
   23192:	015b      	lsls	r3, r3, #5
   23194:	0011      	movs	r1, r2
   23196:	0018      	movs	r0, r3
   23198:	4b2e      	ldr	r3, [pc, #184]	; (23254 <nmi_get_chipid+0xd4>)
   2319a:	4798      	blx	r3
   2319c:	1e03      	subs	r3, r0, #0
   2319e:	d004      	beq.n	231aa <nmi_get_chipid+0x2a>
			chipid = 0;
   231a0:	4b2b      	ldr	r3, [pc, #172]	; (23250 <nmi_get_chipid+0xd0>)
   231a2:	2200      	movs	r2, #0
   231a4:	601a      	str	r2, [r3, #0]
			return 0;
   231a6:	2300      	movs	r3, #0
   231a8:	e04d      	b.n	23246 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   231aa:	1d3b      	adds	r3, r7, #4
   231ac:	4a2a      	ldr	r2, [pc, #168]	; (23258 <nmi_get_chipid+0xd8>)
   231ae:	0019      	movs	r1, r3
   231b0:	0010      	movs	r0, r2
   231b2:	4b28      	ldr	r3, [pc, #160]	; (23254 <nmi_get_chipid+0xd4>)
   231b4:	4798      	blx	r3
   231b6:	1e03      	subs	r3, r0, #0
   231b8:	d004      	beq.n	231c4 <nmi_get_chipid+0x44>
			chipid = 0;
   231ba:	4b25      	ldr	r3, [pc, #148]	; (23250 <nmi_get_chipid+0xd0>)
   231bc:	2200      	movs	r2, #0
   231be:	601a      	str	r2, [r3, #0]
			return 0;
   231c0:	2300      	movs	r3, #0
   231c2:	e040      	b.n	23246 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   231c4:	4b22      	ldr	r3, [pc, #136]	; (23250 <nmi_get_chipid+0xd0>)
   231c6:	681b      	ldr	r3, [r3, #0]
   231c8:	4a24      	ldr	r2, [pc, #144]	; (2325c <nmi_get_chipid+0xdc>)
   231ca:	4293      	cmp	r3, r2
   231cc:	d106      	bne.n	231dc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   231ce:	687b      	ldr	r3, [r7, #4]
   231d0:	2b01      	cmp	r3, #1
   231d2:	d029      	beq.n	23228 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   231d4:	4b1e      	ldr	r3, [pc, #120]	; (23250 <nmi_get_chipid+0xd0>)
   231d6:	4a22      	ldr	r2, [pc, #136]	; (23260 <nmi_get_chipid+0xe0>)
   231d8:	601a      	str	r2, [r3, #0]
   231da:	e025      	b.n	23228 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   231dc:	4b1c      	ldr	r3, [pc, #112]	; (23250 <nmi_get_chipid+0xd0>)
   231de:	681b      	ldr	r3, [r3, #0]
   231e0:	4a20      	ldr	r2, [pc, #128]	; (23264 <nmi_get_chipid+0xe4>)
   231e2:	4293      	cmp	r3, r2
   231e4:	d10d      	bne.n	23202 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   231e6:	687b      	ldr	r3, [r7, #4]
   231e8:	2b03      	cmp	r3, #3
   231ea:	d01d      	beq.n	23228 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   231ec:	687b      	ldr	r3, [r7, #4]
   231ee:	2b04      	cmp	r3, #4
   231f0:	d103      	bne.n	231fa <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   231f2:	4b17      	ldr	r3, [pc, #92]	; (23250 <nmi_get_chipid+0xd0>)
   231f4:	4a1c      	ldr	r2, [pc, #112]	; (23268 <nmi_get_chipid+0xe8>)
   231f6:	601a      	str	r2, [r3, #0]
   231f8:	e016      	b.n	23228 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   231fa:	4b15      	ldr	r3, [pc, #84]	; (23250 <nmi_get_chipid+0xd0>)
   231fc:	4a1b      	ldr	r2, [pc, #108]	; (2326c <nmi_get_chipid+0xec>)
   231fe:	601a      	str	r2, [r3, #0]
   23200:	e012      	b.n	23228 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23202:	4b13      	ldr	r3, [pc, #76]	; (23250 <nmi_get_chipid+0xd0>)
   23204:	681b      	ldr	r3, [r3, #0]
   23206:	4a1a      	ldr	r2, [pc, #104]	; (23270 <nmi_get_chipid+0xf0>)
   23208:	4293      	cmp	r3, r2
   2320a:	d10d      	bne.n	23228 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2320c:	4a10      	ldr	r2, [pc, #64]	; (23250 <nmi_get_chipid+0xd0>)
   2320e:	23ec      	movs	r3, #236	; 0xec
   23210:	039b      	lsls	r3, r3, #14
   23212:	0011      	movs	r1, r2
   23214:	0018      	movs	r0, r3
   23216:	4b0f      	ldr	r3, [pc, #60]	; (23254 <nmi_get_chipid+0xd4>)
   23218:	4798      	blx	r3
   2321a:	1e03      	subs	r3, r0, #0
   2321c:	d004      	beq.n	23228 <nmi_get_chipid+0xa8>
			chipid = 0;
   2321e:	4b0c      	ldr	r3, [pc, #48]	; (23250 <nmi_get_chipid+0xd0>)
   23220:	2200      	movs	r2, #0
   23222:	601a      	str	r2, [r3, #0]
			return 0;
   23224:	2300      	movs	r3, #0
   23226:	e00e      	b.n	23246 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   23228:	4b09      	ldr	r3, [pc, #36]	; (23250 <nmi_get_chipid+0xd0>)
   2322a:	681b      	ldr	r3, [r3, #0]
   2322c:	4a11      	ldr	r2, [pc, #68]	; (23274 <nmi_get_chipid+0xf4>)
   2322e:	401a      	ands	r2, r3
   23230:	4b07      	ldr	r3, [pc, #28]	; (23250 <nmi_get_chipid+0xd0>)
   23232:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   23234:	4b06      	ldr	r3, [pc, #24]	; (23250 <nmi_get_chipid+0xd0>)
   23236:	681b      	ldr	r3, [r3, #0]
   23238:	22a0      	movs	r2, #160	; 0xa0
   2323a:	02d2      	lsls	r2, r2, #11
   2323c:	431a      	orrs	r2, r3
   2323e:	4b04      	ldr	r3, [pc, #16]	; (23250 <nmi_get_chipid+0xd0>)
   23240:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23242:	4b03      	ldr	r3, [pc, #12]	; (23250 <nmi_get_chipid+0xd0>)
   23244:	681b      	ldr	r3, [r3, #0]
}
   23246:	0018      	movs	r0, r3
   23248:	46bd      	mov	sp, r7
   2324a:	b002      	add	sp, #8
   2324c:	bd80      	pop	{r7, pc}
   2324e:	46c0      	nop			; (mov r8, r8)
   23250:	200042b0 	.word	0x200042b0
   23254:	00023881 	.word	0x00023881
   23258:	000013f4 	.word	0x000013f4
   2325c:	001002a0 	.word	0x001002a0
   23260:	001002a1 	.word	0x001002a1
   23264:	001002b0 	.word	0x001002b0
   23268:	001002b1 	.word	0x001002b1
   2326c:	001002b2 	.word	0x001002b2
   23270:	001000f0 	.word	0x001000f0
   23274:	fff0ffff 	.word	0xfff0ffff

00023278 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   23278:	b590      	push	{r4, r7, lr}
   2327a:	b083      	sub	sp, #12
   2327c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2327e:	1dfb      	adds	r3, r7, #7
   23280:	2200      	movs	r2, #0
   23282:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23284:	1dfc      	adds	r4, r7, #7
   23286:	003b      	movs	r3, r7
   23288:	0019      	movs	r1, r3
   2328a:	2010      	movs	r0, #16
   2328c:	4b2e      	ldr	r3, [pc, #184]	; (23348 <chip_sleep+0xd0>)
   2328e:	4798      	blx	r3
   23290:	0003      	movs	r3, r0
   23292:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   23294:	1dfb      	adds	r3, r7, #7
   23296:	781b      	ldrb	r3, [r3, #0]
   23298:	b25b      	sxtb	r3, r3
   2329a:	2b00      	cmp	r3, #0
   2329c:	d145      	bne.n	2332a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2329e:	683b      	ldr	r3, [r7, #0]
   232a0:	2201      	movs	r2, #1
   232a2:	4013      	ands	r3, r2
   232a4:	d000      	beq.n	232a8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   232a6:	e7ed      	b.n	23284 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   232a8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   232aa:	1dfc      	adds	r4, r7, #7
   232ac:	003b      	movs	r3, r7
   232ae:	0019      	movs	r1, r3
   232b0:	2001      	movs	r0, #1
   232b2:	4b25      	ldr	r3, [pc, #148]	; (23348 <chip_sleep+0xd0>)
   232b4:	4798      	blx	r3
   232b6:	0003      	movs	r3, r0
   232b8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   232ba:	1dfb      	adds	r3, r7, #7
   232bc:	781b      	ldrb	r3, [r3, #0]
   232be:	b25b      	sxtb	r3, r3
   232c0:	2b00      	cmp	r3, #0
   232c2:	d134      	bne.n	2332e <chip_sleep+0xb6>
	if(reg & NBIT1)
   232c4:	683b      	ldr	r3, [r7, #0]
   232c6:	2202      	movs	r2, #2
   232c8:	4013      	ands	r3, r2
   232ca:	d010      	beq.n	232ee <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   232cc:	683b      	ldr	r3, [r7, #0]
   232ce:	2202      	movs	r2, #2
   232d0:	4393      	bics	r3, r2
   232d2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   232d4:	683b      	ldr	r3, [r7, #0]
   232d6:	1dfc      	adds	r4, r7, #7
   232d8:	0019      	movs	r1, r3
   232da:	2001      	movs	r0, #1
   232dc:	4b1b      	ldr	r3, [pc, #108]	; (2334c <chip_sleep+0xd4>)
   232de:	4798      	blx	r3
   232e0:	0003      	movs	r3, r0
   232e2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   232e4:	1dfb      	adds	r3, r7, #7
   232e6:	781b      	ldrb	r3, [r3, #0]
   232e8:	b25b      	sxtb	r3, r3
   232ea:	2b00      	cmp	r3, #0
   232ec:	d121      	bne.n	23332 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   232ee:	1dfc      	adds	r4, r7, #7
   232f0:	003b      	movs	r3, r7
   232f2:	0019      	movs	r1, r3
   232f4:	200b      	movs	r0, #11
   232f6:	4b14      	ldr	r3, [pc, #80]	; (23348 <chip_sleep+0xd0>)
   232f8:	4798      	blx	r3
   232fa:	0003      	movs	r3, r0
   232fc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   232fe:	1dfb      	adds	r3, r7, #7
   23300:	781b      	ldrb	r3, [r3, #0]
   23302:	b25b      	sxtb	r3, r3
   23304:	2b00      	cmp	r3, #0
   23306:	d116      	bne.n	23336 <chip_sleep+0xbe>
	if(reg & NBIT0)
   23308:	683b      	ldr	r3, [r7, #0]
   2330a:	2201      	movs	r2, #1
   2330c:	4013      	ands	r3, r2
   2330e:	d013      	beq.n	23338 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   23310:	683b      	ldr	r3, [r7, #0]
   23312:	2201      	movs	r2, #1
   23314:	4393      	bics	r3, r2
   23316:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   23318:	683b      	ldr	r3, [r7, #0]
   2331a:	1dfc      	adds	r4, r7, #7
   2331c:	0019      	movs	r1, r3
   2331e:	200b      	movs	r0, #11
   23320:	4b0a      	ldr	r3, [pc, #40]	; (2334c <chip_sleep+0xd4>)
   23322:	4798      	blx	r3
   23324:	0003      	movs	r3, r0
   23326:	7023      	strb	r3, [r4, #0]
   23328:	e006      	b.n	23338 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2332a:	46c0      	nop			; (mov r8, r8)
   2332c:	e004      	b.n	23338 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2332e:	46c0      	nop			; (mov r8, r8)
   23330:	e002      	b.n	23338 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   23332:	46c0      	nop			; (mov r8, r8)
   23334:	e000      	b.n	23338 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   23336:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   23338:	1dfb      	adds	r3, r7, #7
   2333a:	781b      	ldrb	r3, [r3, #0]
   2333c:	b25b      	sxtb	r3, r3
}
   2333e:	0018      	movs	r0, r3
   23340:	46bd      	mov	sp, r7
   23342:	b003      	add	sp, #12
   23344:	bd90      	pop	{r4, r7, pc}
   23346:	46c0      	nop			; (mov r8, r8)
   23348:	00023881 	.word	0x00023881
   2334c:	000238a5 	.word	0x000238a5

00023350 <chip_wake>:
sint8 chip_wake(void)
{
   23350:	b590      	push	{r4, r7, lr}
   23352:	b085      	sub	sp, #20
   23354:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23356:	230f      	movs	r3, #15
   23358:	18fb      	adds	r3, r7, r3
   2335a:	2200      	movs	r2, #0
   2335c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2335e:	2300      	movs	r3, #0
   23360:	607b      	str	r3, [r7, #4]
   23362:	2300      	movs	r3, #0
   23364:	603b      	str	r3, [r7, #0]
   23366:	2300      	movs	r3, #0
   23368:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2336a:	230f      	movs	r3, #15
   2336c:	18fc      	adds	r4, r7, r3
   2336e:	1d3b      	adds	r3, r7, #4
   23370:	0019      	movs	r1, r3
   23372:	200b      	movs	r0, #11
   23374:	4b4e      	ldr	r3, [pc, #312]	; (234b0 <chip_wake+0x160>)
   23376:	4798      	blx	r3
   23378:	0003      	movs	r3, r0
   2337a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2337c:	230f      	movs	r3, #15
   2337e:	18fb      	adds	r3, r7, r3
   23380:	781b      	ldrb	r3, [r3, #0]
   23382:	b25b      	sxtb	r3, r3
   23384:	2b00      	cmp	r3, #0
   23386:	d000      	beq.n	2338a <chip_wake+0x3a>
   23388:	e082      	b.n	23490 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2338a:	687b      	ldr	r3, [r7, #4]
   2338c:	2201      	movs	r2, #1
   2338e:	4013      	ands	r3, r2
   23390:	d111      	bne.n	233b6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   23392:	687b      	ldr	r3, [r7, #4]
   23394:	2201      	movs	r2, #1
   23396:	4313      	orrs	r3, r2
   23398:	220f      	movs	r2, #15
   2339a:	18bc      	adds	r4, r7, r2
   2339c:	0019      	movs	r1, r3
   2339e:	200b      	movs	r0, #11
   233a0:	4b44      	ldr	r3, [pc, #272]	; (234b4 <chip_wake+0x164>)
   233a2:	4798      	blx	r3
   233a4:	0003      	movs	r3, r0
   233a6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233a8:	230f      	movs	r3, #15
   233aa:	18fb      	adds	r3, r7, r3
   233ac:	781b      	ldrb	r3, [r3, #0]
   233ae:	b25b      	sxtb	r3, r3
   233b0:	2b00      	cmp	r3, #0
   233b2:	d000      	beq.n	233b6 <chip_wake+0x66>
   233b4:	e06e      	b.n	23494 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   233b6:	230f      	movs	r3, #15
   233b8:	18fc      	adds	r4, r7, r3
   233ba:	1d3b      	adds	r3, r7, #4
   233bc:	0019      	movs	r1, r3
   233be:	2001      	movs	r0, #1
   233c0:	4b3b      	ldr	r3, [pc, #236]	; (234b0 <chip_wake+0x160>)
   233c2:	4798      	blx	r3
   233c4:	0003      	movs	r3, r0
   233c6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233c8:	230f      	movs	r3, #15
   233ca:	18fb      	adds	r3, r7, r3
   233cc:	781b      	ldrb	r3, [r3, #0]
   233ce:	b25b      	sxtb	r3, r3
   233d0:	2b00      	cmp	r3, #0
   233d2:	d161      	bne.n	23498 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   233d4:	687b      	ldr	r3, [r7, #4]
   233d6:	2202      	movs	r2, #2
   233d8:	4013      	ands	r3, r2
   233da:	d110      	bne.n	233fe <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   233dc:	687b      	ldr	r3, [r7, #4]
   233de:	2202      	movs	r2, #2
   233e0:	4313      	orrs	r3, r2
   233e2:	220f      	movs	r2, #15
   233e4:	18bc      	adds	r4, r7, r2
   233e6:	0019      	movs	r1, r3
   233e8:	2001      	movs	r0, #1
   233ea:	4b32      	ldr	r3, [pc, #200]	; (234b4 <chip_wake+0x164>)
   233ec:	4798      	blx	r3
   233ee:	0003      	movs	r3, r0
   233f0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   233f2:	230f      	movs	r3, #15
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	781b      	ldrb	r3, [r3, #0]
   233f8:	b25b      	sxtb	r3, r3
   233fa:	2b00      	cmp	r3, #0
   233fc:	d14e      	bne.n	2349c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   233fe:	230f      	movs	r3, #15
   23400:	18fc      	adds	r4, r7, r3
   23402:	003b      	movs	r3, r7
   23404:	0019      	movs	r1, r3
   23406:	200f      	movs	r0, #15
   23408:	4b29      	ldr	r3, [pc, #164]	; (234b0 <chip_wake+0x160>)
   2340a:	4798      	blx	r3
   2340c:	0003      	movs	r3, r0
   2340e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   23410:	230f      	movs	r3, #15
   23412:	18fb      	adds	r3, r7, r3
   23414:	781b      	ldrb	r3, [r3, #0]
   23416:	b25b      	sxtb	r3, r3
   23418:	2b00      	cmp	r3, #0
   2341a:	d014      	beq.n	23446 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2341c:	23a8      	movs	r3, #168	; 0xa8
   2341e:	005a      	lsls	r2, r3, #1
   23420:	4925      	ldr	r1, [pc, #148]	; (234b8 <chip_wake+0x168>)
   23422:	4b26      	ldr	r3, [pc, #152]	; (234bc <chip_wake+0x16c>)
   23424:	0018      	movs	r0, r3
   23426:	4b26      	ldr	r3, [pc, #152]	; (234c0 <chip_wake+0x170>)
   23428:	4798      	blx	r3
   2342a:	230f      	movs	r3, #15
   2342c:	18fb      	adds	r3, r7, r3
   2342e:	2100      	movs	r1, #0
   23430:	5659      	ldrsb	r1, [r3, r1]
   23432:	683a      	ldr	r2, [r7, #0]
   23434:	4b23      	ldr	r3, [pc, #140]	; (234c4 <chip_wake+0x174>)
   23436:	0018      	movs	r0, r3
   23438:	4b21      	ldr	r3, [pc, #132]	; (234c0 <chip_wake+0x170>)
   2343a:	4798      	blx	r3
   2343c:	4b22      	ldr	r3, [pc, #136]	; (234c8 <chip_wake+0x178>)
   2343e:	0018      	movs	r0, r3
   23440:	4b1f      	ldr	r3, [pc, #124]	; (234c0 <chip_wake+0x170>)
   23442:	4798      	blx	r3
			goto _WAKE_EXIT;
   23444:	e02b      	b.n	2349e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   23446:	683b      	ldr	r3, [r7, #0]
   23448:	2204      	movs	r2, #4
   2344a:	4013      	ands	r3, r2
   2344c:	d11c      	bne.n	23488 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2344e:	2002      	movs	r0, #2
   23450:	4b1e      	ldr	r3, [pc, #120]	; (234cc <chip_wake+0x17c>)
   23452:	4798      	blx	r3
		trials++;
   23454:	68bb      	ldr	r3, [r7, #8]
   23456:	3301      	adds	r3, #1
   23458:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2345a:	68bb      	ldr	r3, [r7, #8]
   2345c:	2b04      	cmp	r3, #4
   2345e:	d9ce      	bls.n	233fe <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23460:	23ad      	movs	r3, #173	; 0xad
   23462:	005a      	lsls	r2, r3, #1
   23464:	4914      	ldr	r1, [pc, #80]	; (234b8 <chip_wake+0x168>)
   23466:	4b15      	ldr	r3, [pc, #84]	; (234bc <chip_wake+0x16c>)
   23468:	0018      	movs	r0, r3
   2346a:	4b15      	ldr	r3, [pc, #84]	; (234c0 <chip_wake+0x170>)
   2346c:	4798      	blx	r3
   2346e:	4b18      	ldr	r3, [pc, #96]	; (234d0 <chip_wake+0x180>)
   23470:	0018      	movs	r0, r3
   23472:	4b13      	ldr	r3, [pc, #76]	; (234c0 <chip_wake+0x170>)
   23474:	4798      	blx	r3
   23476:	4b14      	ldr	r3, [pc, #80]	; (234c8 <chip_wake+0x178>)
   23478:	0018      	movs	r0, r3
   2347a:	4b11      	ldr	r3, [pc, #68]	; (234c0 <chip_wake+0x170>)
   2347c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2347e:	230f      	movs	r3, #15
   23480:	18fb      	adds	r3, r7, r3
   23482:	22fc      	movs	r2, #252	; 0xfc
   23484:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   23486:	e00a      	b.n	2349e <chip_wake+0x14e>
			break;
   23488:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2348a:	4b12      	ldr	r3, [pc, #72]	; (234d4 <chip_wake+0x184>)
   2348c:	4798      	blx	r3
   2348e:	e006      	b.n	2349e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23490:	46c0      	nop			; (mov r8, r8)
   23492:	e004      	b.n	2349e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23494:	46c0      	nop			; (mov r8, r8)
   23496:	e002      	b.n	2349e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23498:	46c0      	nop			; (mov r8, r8)
   2349a:	e000      	b.n	2349e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2349c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2349e:	230f      	movs	r3, #15
   234a0:	18fb      	adds	r3, r7, r3
   234a2:	781b      	ldrb	r3, [r3, #0]
   234a4:	b25b      	sxtb	r3, r3
}
   234a6:	0018      	movs	r0, r3
   234a8:	46bd      	mov	sp, r7
   234aa:	b005      	add	sp, #20
   234ac:	bd90      	pop	{r4, r7, pc}
   234ae:	46c0      	nop			; (mov r8, r8)
   234b0:	00023881 	.word	0x00023881
   234b4:	000238a5 	.word	0x000238a5
   234b8:	00039c10 	.word	0x00039c10
   234bc:	00039b84 	.word	0x00039b84
   234c0:	0001ea59 	.word	0x0001ea59
   234c4:	00039b98 	.word	0x00039b98
   234c8:	00039bb0 	.word	0x00039bb0
   234cc:	00020f11 	.word	0x00020f11
   234d0:	00039bb4 	.word	0x00039bb4
   234d4:	00023841 	.word	0x00023841

000234d8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   234d8:	b580      	push	{r7, lr}
   234da:	b088      	sub	sp, #32
   234dc:	af00      	add	r7, sp, #0
   234de:	0002      	movs	r2, r0
   234e0:	1dfb      	adds	r3, r7, #7
   234e2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   234e4:	2313      	movs	r3, #19
   234e6:	18fb      	adds	r3, r7, r3
   234e8:	2200      	movs	r2, #0
   234ea:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   234ec:	2300      	movs	r3, #0
   234ee:	61fb      	str	r3, [r7, #28]
   234f0:	2300      	movs	r3, #0
   234f2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   234f4:	2300      	movs	r3, #0
   234f6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   234f8:	4b4a      	ldr	r3, [pc, #296]	; (23624 <wait_for_bootrom+0x14c>)
   234fa:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   234fc:	2300      	movs	r3, #0
   234fe:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23500:	4b49      	ldr	r3, [pc, #292]	; (23628 <wait_for_bootrom+0x150>)
   23502:	0018      	movs	r0, r3
   23504:	4b49      	ldr	r3, [pc, #292]	; (2362c <wait_for_bootrom+0x154>)
   23506:	4798      	blx	r3
   23508:	0003      	movs	r3, r0
   2350a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2350c:	69fb      	ldr	r3, [r7, #28]
   2350e:	2b00      	cmp	r3, #0
   23510:	db03      	blt.n	2351a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   23512:	2001      	movs	r0, #1
   23514:	4b46      	ldr	r3, [pc, #280]	; (23630 <wait_for_bootrom+0x158>)
   23516:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23518:	e7f2      	b.n	23500 <wait_for_bootrom+0x28>
			break;
   2351a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2351c:	4b45      	ldr	r3, [pc, #276]	; (23634 <wait_for_bootrom+0x15c>)
   2351e:	0018      	movs	r0, r3
   23520:	4b42      	ldr	r3, [pc, #264]	; (2362c <wait_for_bootrom+0x154>)
   23522:	4798      	blx	r3
   23524:	0003      	movs	r3, r0
   23526:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   23528:	69fb      	ldr	r3, [r7, #28]
   2352a:	2201      	movs	r2, #1
   2352c:	4013      	ands	r3, r2
   2352e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   23530:	69fb      	ldr	r3, [r7, #28]
   23532:	2b00      	cmp	r3, #0
   23534:	d112      	bne.n	2355c <wait_for_bootrom+0x84>
	{
		reg = 0;
   23536:	2300      	movs	r3, #0
   23538:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2353a:	e00b      	b.n	23554 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2353c:	2001      	movs	r0, #1
   2353e:	4b3c      	ldr	r3, [pc, #240]	; (23630 <wait_for_bootrom+0x158>)
   23540:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23542:	4b3d      	ldr	r3, [pc, #244]	; (23638 <wait_for_bootrom+0x160>)
   23544:	0018      	movs	r0, r3
   23546:	4b39      	ldr	r3, [pc, #228]	; (2362c <wait_for_bootrom+0x154>)
   23548:	4798      	blx	r3
   2354a:	0003      	movs	r3, r0
   2354c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2354e:	69bb      	ldr	r3, [r7, #24]
   23550:	3301      	adds	r3, #1
   23552:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23554:	69fb      	ldr	r3, [r7, #28]
   23556:	4a39      	ldr	r2, [pc, #228]	; (2363c <wait_for_bootrom+0x164>)
   23558:	4293      	cmp	r3, r2
   2355a:	d1ef      	bne.n	2353c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2355c:	1dfb      	adds	r3, r7, #7
   2355e:	781b      	ldrb	r3, [r3, #0]
   23560:	2b02      	cmp	r3, #2
   23562:	d10d      	bne.n	23580 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23564:	4a36      	ldr	r2, [pc, #216]	; (23640 <wait_for_bootrom+0x168>)
   23566:	4b37      	ldr	r3, [pc, #220]	; (23644 <wait_for_bootrom+0x16c>)
   23568:	0011      	movs	r1, r2
   2356a:	0018      	movs	r0, r3
   2356c:	4b36      	ldr	r3, [pc, #216]	; (23648 <wait_for_bootrom+0x170>)
   2356e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23570:	2380      	movs	r3, #128	; 0x80
   23572:	035b      	lsls	r3, r3, #13
   23574:	4a35      	ldr	r2, [pc, #212]	; (2364c <wait_for_bootrom+0x174>)
   23576:	0019      	movs	r1, r3
   23578:	0010      	movs	r0, r2
   2357a:	4b33      	ldr	r3, [pc, #204]	; (23648 <wait_for_bootrom+0x170>)
   2357c:	4798      	blx	r3
   2357e:	e022      	b.n	235c6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   23580:	1dfb      	adds	r3, r7, #7
   23582:	781b      	ldrb	r3, [r3, #0]
   23584:	2b03      	cmp	r3, #3
   23586:	d10b      	bne.n	235a0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23588:	4a2d      	ldr	r2, [pc, #180]	; (23640 <wait_for_bootrom+0x168>)
   2358a:	4b2e      	ldr	r3, [pc, #184]	; (23644 <wait_for_bootrom+0x16c>)
   2358c:	0011      	movs	r1, r2
   2358e:	0018      	movs	r0, r3
   23590:	4b2d      	ldr	r3, [pc, #180]	; (23648 <wait_for_bootrom+0x170>)
   23592:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23594:	4b2d      	ldr	r3, [pc, #180]	; (2364c <wait_for_bootrom+0x174>)
   23596:	2100      	movs	r1, #0
   23598:	0018      	movs	r0, r3
   2359a:	4b2b      	ldr	r3, [pc, #172]	; (23648 <wait_for_bootrom+0x170>)
   2359c:	4798      	blx	r3
   2359e:	e012      	b.n	235c6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   235a0:	1dfb      	adds	r3, r7, #7
   235a2:	781b      	ldrb	r3, [r3, #0]
   235a4:	2b04      	cmp	r3, #4
   235a6:	d108      	bne.n	235ba <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   235a8:	2380      	movs	r3, #128	; 0x80
   235aa:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   235ac:	68fb      	ldr	r3, [r7, #12]
   235ae:	4a27      	ldr	r2, [pc, #156]	; (2364c <wait_for_bootrom+0x174>)
   235b0:	0019      	movs	r1, r3
   235b2:	0010      	movs	r0, r2
   235b4:	4b24      	ldr	r3, [pc, #144]	; (23648 <wait_for_bootrom+0x170>)
   235b6:	4798      	blx	r3
   235b8:	e005      	b.n	235c6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   235ba:	68fb      	ldr	r3, [r7, #12]
   235bc:	4a23      	ldr	r2, [pc, #140]	; (2364c <wait_for_bootrom+0x174>)
   235be:	0019      	movs	r1, r3
   235c0:	0010      	movs	r0, r2
   235c2:	4b21      	ldr	r3, [pc, #132]	; (23648 <wait_for_bootrom+0x170>)
   235c4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   235c6:	4b22      	ldr	r3, [pc, #136]	; (23650 <wait_for_bootrom+0x178>)
   235c8:	4798      	blx	r3
   235ca:	0003      	movs	r3, r0
   235cc:	051b      	lsls	r3, r3, #20
   235ce:	0d1b      	lsrs	r3, r3, #20
   235d0:	4a20      	ldr	r2, [pc, #128]	; (23654 <wait_for_bootrom+0x17c>)
   235d2:	4293      	cmp	r3, r2
   235d4:	d906      	bls.n	235e4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   235d6:	697b      	ldr	r3, [r7, #20]
   235d8:	2202      	movs	r2, #2
   235da:	4313      	orrs	r3, r2
   235dc:	0018      	movs	r0, r3
   235de:	4b1e      	ldr	r3, [pc, #120]	; (23658 <wait_for_bootrom+0x180>)
   235e0:	4798      	blx	r3
   235e2:	e003      	b.n	235ec <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   235e4:	697b      	ldr	r3, [r7, #20]
   235e6:	0018      	movs	r0, r3
   235e8:	4b1b      	ldr	r3, [pc, #108]	; (23658 <wait_for_bootrom+0x180>)
   235ea:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   235ec:	4b1b      	ldr	r3, [pc, #108]	; (2365c <wait_for_bootrom+0x184>)
   235ee:	0018      	movs	r0, r3
   235f0:	4b1b      	ldr	r3, [pc, #108]	; (23660 <wait_for_bootrom+0x188>)
   235f2:	4798      	blx	r3
   235f4:	68fa      	ldr	r2, [r7, #12]
   235f6:	4b1b      	ldr	r3, [pc, #108]	; (23664 <wait_for_bootrom+0x18c>)
   235f8:	0011      	movs	r1, r2
   235fa:	0018      	movs	r0, r3
   235fc:	4b18      	ldr	r3, [pc, #96]	; (23660 <wait_for_bootrom+0x188>)
   235fe:	4798      	blx	r3
   23600:	4b19      	ldr	r3, [pc, #100]	; (23668 <wait_for_bootrom+0x190>)
   23602:	0018      	movs	r0, r3
   23604:	4b16      	ldr	r3, [pc, #88]	; (23660 <wait_for_bootrom+0x188>)
   23606:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   23608:	4a18      	ldr	r2, [pc, #96]	; (2366c <wait_for_bootrom+0x194>)
   2360a:	4b0b      	ldr	r3, [pc, #44]	; (23638 <wait_for_bootrom+0x160>)
   2360c:	0011      	movs	r1, r2
   2360e:	0018      	movs	r0, r3
   23610:	4b0d      	ldr	r3, [pc, #52]	; (23648 <wait_for_bootrom+0x170>)
   23612:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23614:	2313      	movs	r3, #19
   23616:	18fb      	adds	r3, r7, r3
   23618:	781b      	ldrb	r3, [r3, #0]
   2361a:	b25b      	sxtb	r3, r3
}
   2361c:	0018      	movs	r0, r3
   2361e:	46bd      	mov	sp, r7
   23620:	b008      	add	sp, #32
   23622:	bd80      	pop	{r7, pc}
   23624:	13301354 	.word	0x13301354
   23628:	00001014 	.word	0x00001014
   2362c:	00023861 	.word	0x00023861
   23630:	00020f11 	.word	0x00020f11
   23634:	000207bc 	.word	0x000207bc
   23638:	000c000c 	.word	0x000c000c
   2363c:	10add09e 	.word	0x10add09e
   23640:	3c1cd57d 	.word	0x3c1cd57d
   23644:	000207ac 	.word	0x000207ac
   23648:	000238a5 	.word	0x000238a5
   2364c:	0000108c 	.word	0x0000108c
   23650:	00023181 	.word	0x00023181
   23654:	0000039f 	.word	0x0000039f
   23658:	00023051 	.word	0x00023051
   2365c:	00039bd0 	.word	0x00039bd0
   23660:	0001ea59 	.word	0x0001ea59
   23664:	00039bdc 	.word	0x00039bdc
   23668:	00039bb0 	.word	0x00039bb0
   2366c:	ef522f61 	.word	0xef522f61

00023670 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23670:	b580      	push	{r7, lr}
   23672:	b088      	sub	sp, #32
   23674:	af00      	add	r7, sp, #0
   23676:	0002      	movs	r2, r0
   23678:	1dfb      	adds	r3, r7, #7
   2367a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2367c:	231f      	movs	r3, #31
   2367e:	18fb      	adds	r3, r7, r3
   23680:	2200      	movs	r2, #0
   23682:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23684:	2300      	movs	r3, #0
   23686:	61bb      	str	r3, [r7, #24]
   23688:	2300      	movs	r3, #0
   2368a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   2368c:	2301      	movs	r3, #1
   2368e:	425b      	negs	r3, r3
   23690:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23692:	4b1d      	ldr	r3, [pc, #116]	; (23708 <wait_for_firmware_start+0x98>)
   23694:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   23696:	4b1d      	ldr	r3, [pc, #116]	; (2370c <wait_for_firmware_start+0x9c>)
   23698:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2369a:	1dfb      	adds	r3, r7, #7
   2369c:	781b      	ldrb	r3, [r3, #0]
   2369e:	2b02      	cmp	r3, #2
   236a0:	d003      	beq.n	236aa <wait_for_firmware_start+0x3a>
   236a2:	1dfb      	adds	r3, r7, #7
   236a4:	781b      	ldrb	r3, [r3, #0]
   236a6:	2b03      	cmp	r3, #3
   236a8:	d119      	bne.n	236de <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   236aa:	4b19      	ldr	r3, [pc, #100]	; (23710 <wait_for_firmware_start+0xa0>)
   236ac:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   236ae:	4b19      	ldr	r3, [pc, #100]	; (23714 <wait_for_firmware_start+0xa4>)
   236b0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   236b2:	e014      	b.n	236de <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   236b4:	2002      	movs	r0, #2
   236b6:	4b18      	ldr	r3, [pc, #96]	; (23718 <wait_for_firmware_start+0xa8>)
   236b8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   236ba:	68fb      	ldr	r3, [r7, #12]
   236bc:	0018      	movs	r0, r3
   236be:	4b17      	ldr	r3, [pc, #92]	; (2371c <wait_for_firmware_start+0xac>)
   236c0:	4798      	blx	r3
   236c2:	0003      	movs	r3, r0
   236c4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   236c6:	697b      	ldr	r3, [r7, #20]
   236c8:	3301      	adds	r3, #1
   236ca:	617b      	str	r3, [r7, #20]
   236cc:	697a      	ldr	r2, [r7, #20]
   236ce:	693b      	ldr	r3, [r7, #16]
   236d0:	429a      	cmp	r2, r3
   236d2:	d304      	bcc.n	236de <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   236d4:	231f      	movs	r3, #31
   236d6:	18fb      	adds	r3, r7, r3
   236d8:	22fb      	movs	r2, #251	; 0xfb
   236da:	701a      	strb	r2, [r3, #0]
			goto ERR;
   236dc:	e00c      	b.n	236f8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   236de:	68ba      	ldr	r2, [r7, #8]
   236e0:	69bb      	ldr	r3, [r7, #24]
   236e2:	429a      	cmp	r2, r3
   236e4:	d1e6      	bne.n	236b4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   236e6:	68bb      	ldr	r3, [r7, #8]
   236e8:	4a08      	ldr	r2, [pc, #32]	; (2370c <wait_for_firmware_start+0x9c>)
   236ea:	4293      	cmp	r3, r2
   236ec:	d104      	bne.n	236f8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   236ee:	4b06      	ldr	r3, [pc, #24]	; (23708 <wait_for_firmware_start+0x98>)
   236f0:	2100      	movs	r1, #0
   236f2:	0018      	movs	r0, r3
   236f4:	4b0a      	ldr	r3, [pc, #40]	; (23720 <wait_for_firmware_start+0xb0>)
   236f6:	4798      	blx	r3
	}
ERR:
	return ret;
   236f8:	231f      	movs	r3, #31
   236fa:	18fb      	adds	r3, r7, r3
   236fc:	781b      	ldrb	r3, [r3, #0]
   236fe:	b25b      	sxtb	r3, r3
}
   23700:	0018      	movs	r0, r3
   23702:	46bd      	mov	sp, r7
   23704:	b008      	add	sp, #32
   23706:	bd80      	pop	{r7, pc}
   23708:	0000108c 	.word	0x0000108c
   2370c:	02532636 	.word	0x02532636
   23710:	000207ac 	.word	0x000207ac
   23714:	d75dc1c3 	.word	0xd75dc1c3
   23718:	00020f11 	.word	0x00020f11
   2371c:	00023861 	.word	0x00023861
   23720:	000238a5 	.word	0x000238a5

00023724 <chip_deinit>:

sint8 chip_deinit(void)
{
   23724:	b590      	push	{r4, r7, lr}
   23726:	b083      	sub	sp, #12
   23728:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2372a:	2300      	movs	r3, #0
   2372c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2372e:	1dfc      	adds	r4, r7, #7
   23730:	003a      	movs	r2, r7
   23732:	23a0      	movs	r3, #160	; 0xa0
   23734:	015b      	lsls	r3, r3, #5
   23736:	0011      	movs	r1, r2
   23738:	0018      	movs	r0, r3
   2373a:	4b20      	ldr	r3, [pc, #128]	; (237bc <chip_deinit+0x98>)
   2373c:	4798      	blx	r3
   2373e:	0003      	movs	r3, r0
   23740:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23742:	1dfb      	adds	r3, r7, #7
   23744:	781b      	ldrb	r3, [r3, #0]
   23746:	b25b      	sxtb	r3, r3
   23748:	2b00      	cmp	r3, #0
   2374a:	d00e      	beq.n	2376a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2374c:	4a1c      	ldr	r2, [pc, #112]	; (237c0 <chip_deinit+0x9c>)
   2374e:	491d      	ldr	r1, [pc, #116]	; (237c4 <chip_deinit+0xa0>)
   23750:	4b1d      	ldr	r3, [pc, #116]	; (237c8 <chip_deinit+0xa4>)
   23752:	0018      	movs	r0, r3
   23754:	4b1d      	ldr	r3, [pc, #116]	; (237cc <chip_deinit+0xa8>)
   23756:	4798      	blx	r3
   23758:	4b1d      	ldr	r3, [pc, #116]	; (237d0 <chip_deinit+0xac>)
   2375a:	0018      	movs	r0, r3
   2375c:	4b1b      	ldr	r3, [pc, #108]	; (237cc <chip_deinit+0xa8>)
   2375e:	4798      	blx	r3
   23760:	4b1c      	ldr	r3, [pc, #112]	; (237d4 <chip_deinit+0xb0>)
   23762:	0018      	movs	r0, r3
   23764:	4b19      	ldr	r3, [pc, #100]	; (237cc <chip_deinit+0xa8>)
   23766:	4798      	blx	r3
		goto ERR1;
   23768:	e021      	b.n	237ae <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2376a:	683b      	ldr	r3, [r7, #0]
   2376c:	4a1a      	ldr	r2, [pc, #104]	; (237d8 <chip_deinit+0xb4>)
   2376e:	4013      	ands	r3, r2
   23770:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23772:	683a      	ldr	r2, [r7, #0]
   23774:	1dfc      	adds	r4, r7, #7
   23776:	23a0      	movs	r3, #160	; 0xa0
   23778:	015b      	lsls	r3, r3, #5
   2377a:	0011      	movs	r1, r2
   2377c:	0018      	movs	r0, r3
   2377e:	4b17      	ldr	r3, [pc, #92]	; (237dc <chip_deinit+0xb8>)
   23780:	4798      	blx	r3
   23782:	0003      	movs	r3, r0
   23784:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23786:	1dfb      	adds	r3, r7, #7
   23788:	781b      	ldrb	r3, [r3, #0]
   2378a:	b25b      	sxtb	r3, r3
   2378c:	2b00      	cmp	r3, #0
   2378e:	d00e      	beq.n	237ae <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23790:	4a13      	ldr	r2, [pc, #76]	; (237e0 <chip_deinit+0xbc>)
   23792:	490c      	ldr	r1, [pc, #48]	; (237c4 <chip_deinit+0xa0>)
   23794:	4b0c      	ldr	r3, [pc, #48]	; (237c8 <chip_deinit+0xa4>)
   23796:	0018      	movs	r0, r3
   23798:	4b0c      	ldr	r3, [pc, #48]	; (237cc <chip_deinit+0xa8>)
   2379a:	4798      	blx	r3
   2379c:	4b0c      	ldr	r3, [pc, #48]	; (237d0 <chip_deinit+0xac>)
   2379e:	0018      	movs	r0, r3
   237a0:	4b0a      	ldr	r3, [pc, #40]	; (237cc <chip_deinit+0xa8>)
   237a2:	4798      	blx	r3
   237a4:	4b0b      	ldr	r3, [pc, #44]	; (237d4 <chip_deinit+0xb0>)
   237a6:	0018      	movs	r0, r3
   237a8:	4b08      	ldr	r3, [pc, #32]	; (237cc <chip_deinit+0xa8>)
   237aa:	4798      	blx	r3
		goto ERR1;
   237ac:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   237ae:	1dfb      	adds	r3, r7, #7
   237b0:	781b      	ldrb	r3, [r3, #0]
   237b2:	b25b      	sxtb	r3, r3
}
   237b4:	0018      	movs	r0, r3
   237b6:	46bd      	mov	sp, r7
   237b8:	b003      	add	sp, #12
   237ba:	bd90      	pop	{r4, r7, pc}
   237bc:	00023881 	.word	0x00023881
   237c0:	00000201 	.word	0x00000201
   237c4:	00039c1c 	.word	0x00039c1c
   237c8:	00039b84 	.word	0x00039b84
   237cc:	0001ea59 	.word	0x0001ea59
   237d0:	00039bf4 	.word	0x00039bf4
   237d4:	00039bb0 	.word	0x00039bb0
   237d8:	fffffbff 	.word	0xfffffbff
   237dc:	000238a5 	.word	0x000238a5
   237e0:	00000207 	.word	0x00000207

000237e4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   237e4:	b590      	push	{r4, r7, lr}
   237e6:	b085      	sub	sp, #20
   237e8:	af00      	add	r7, sp, #0
   237ea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   237ec:	230f      	movs	r3, #15
   237ee:	18fb      	adds	r3, r7, r3
   237f0:	2200      	movs	r2, #0
   237f2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   237f4:	230f      	movs	r3, #15
   237f6:	18fc      	adds	r4, r7, r3
   237f8:	687b      	ldr	r3, [r7, #4]
   237fa:	0018      	movs	r0, r3
   237fc:	4b05      	ldr	r3, [pc, #20]	; (23814 <nm_bus_iface_init+0x30>)
   237fe:	4798      	blx	r3
   23800:	0003      	movs	r3, r0
   23802:	7023      	strb	r3, [r4, #0]
	return ret;
   23804:	230f      	movs	r3, #15
   23806:	18fb      	adds	r3, r7, r3
   23808:	781b      	ldrb	r3, [r3, #0]
   2380a:	b25b      	sxtb	r3, r3
}
   2380c:	0018      	movs	r0, r3
   2380e:	46bd      	mov	sp, r7
   23810:	b005      	add	sp, #20
   23812:	bd90      	pop	{r4, r7, pc}
   23814:	000215cd 	.word	0x000215cd

00023818 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   23818:	b590      	push	{r4, r7, lr}
   2381a:	b083      	sub	sp, #12
   2381c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2381e:	1dfb      	adds	r3, r7, #7
   23820:	2200      	movs	r2, #0
   23822:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23824:	1dfc      	adds	r4, r7, #7
   23826:	4b05      	ldr	r3, [pc, #20]	; (2383c <nm_bus_iface_deinit+0x24>)
   23828:	4798      	blx	r3
   2382a:	0003      	movs	r3, r0
   2382c:	7023      	strb	r3, [r4, #0]

	return ret;
   2382e:	1dfb      	adds	r3, r7, #7
   23830:	781b      	ldrb	r3, [r3, #0]
   23832:	b25b      	sxtb	r3, r3
}
   23834:	0018      	movs	r0, r3
   23836:	46bd      	mov	sp, r7
   23838:	b003      	add	sp, #12
   2383a:	bd90      	pop	{r4, r7, pc}
   2383c:	00021745 	.word	0x00021745

00023840 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23840:	b580      	push	{r7, lr}
   23842:	b082      	sub	sp, #8
   23844:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23846:	1dfb      	adds	r3, r7, #7
   23848:	2200      	movs	r2, #0
   2384a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2384c:	4b03      	ldr	r3, [pc, #12]	; (2385c <nm_bus_reset+0x1c>)
   2384e:	4798      	blx	r3
   23850:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23852:	0018      	movs	r0, r3
   23854:	46bd      	mov	sp, r7
   23856:	b002      	add	sp, #8
   23858:	bd80      	pop	{r7, pc}
   2385a:	46c0      	nop			; (mov r8, r8)
   2385c:	0002566d 	.word	0x0002566d

00023860 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23860:	b580      	push	{r7, lr}
   23862:	b082      	sub	sp, #8
   23864:	af00      	add	r7, sp, #0
   23866:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23868:	687b      	ldr	r3, [r7, #4]
   2386a:	0018      	movs	r0, r3
   2386c:	4b03      	ldr	r3, [pc, #12]	; (2387c <nm_read_reg+0x1c>)
   2386e:	4798      	blx	r3
   23870:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23872:	0018      	movs	r0, r3
   23874:	46bd      	mov	sp, r7
   23876:	b002      	add	sp, #8
   23878:	bd80      	pop	{r7, pc}
   2387a:	46c0      	nop			; (mov r8, r8)
   2387c:	00025801 	.word	0x00025801

00023880 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23880:	b580      	push	{r7, lr}
   23882:	b082      	sub	sp, #8
   23884:	af00      	add	r7, sp, #0
   23886:	6078      	str	r0, [r7, #4]
   23888:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2388a:	683a      	ldr	r2, [r7, #0]
   2388c:	687b      	ldr	r3, [r7, #4]
   2388e:	0011      	movs	r1, r2
   23890:	0018      	movs	r0, r3
   23892:	4b03      	ldr	r3, [pc, #12]	; (238a0 <nm_read_reg_with_ret+0x20>)
   23894:	4798      	blx	r3
   23896:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23898:	0018      	movs	r0, r3
   2389a:	46bd      	mov	sp, r7
   2389c:	b002      	add	sp, #8
   2389e:	bd80      	pop	{r7, pc}
   238a0:	00025825 	.word	0x00025825

000238a4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   238a4:	b580      	push	{r7, lr}
   238a6:	b082      	sub	sp, #8
   238a8:	af00      	add	r7, sp, #0
   238aa:	6078      	str	r0, [r7, #4]
   238ac:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   238ae:	683a      	ldr	r2, [r7, #0]
   238b0:	687b      	ldr	r3, [r7, #4]
   238b2:	0011      	movs	r1, r2
   238b4:	0018      	movs	r0, r3
   238b6:	4b03      	ldr	r3, [pc, #12]	; (238c4 <nm_write_reg+0x20>)
   238b8:	4798      	blx	r3
   238ba:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   238bc:	0018      	movs	r0, r3
   238be:	46bd      	mov	sp, r7
   238c0:	b002      	add	sp, #8
   238c2:	bd80      	pop	{r7, pc}
   238c4:	00025875 	.word	0x00025875

000238c8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   238c8:	b580      	push	{r7, lr}
   238ca:	b084      	sub	sp, #16
   238cc:	af00      	add	r7, sp, #0
   238ce:	60f8      	str	r0, [r7, #12]
   238d0:	60b9      	str	r1, [r7, #8]
   238d2:	1dbb      	adds	r3, r7, #6
   238d4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   238d6:	1dbb      	adds	r3, r7, #6
   238d8:	881a      	ldrh	r2, [r3, #0]
   238da:	68b9      	ldr	r1, [r7, #8]
   238dc:	68fb      	ldr	r3, [r7, #12]
   238de:	0018      	movs	r0, r3
   238e0:	4b03      	ldr	r3, [pc, #12]	; (238f0 <p_nm_read_block+0x28>)
   238e2:	4798      	blx	r3
   238e4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   238e6:	0018      	movs	r0, r3
   238e8:	46bd      	mov	sp, r7
   238ea:	b004      	add	sp, #16
   238ec:	bd80      	pop	{r7, pc}
   238ee:	46c0      	nop			; (mov r8, r8)
   238f0:	000258c5 	.word	0x000258c5

000238f4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   238f4:	b580      	push	{r7, lr}
   238f6:	b086      	sub	sp, #24
   238f8:	af00      	add	r7, sp, #0
   238fa:	60f8      	str	r0, [r7, #12]
   238fc:	60b9      	str	r1, [r7, #8]
   238fe:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23900:	4b2d      	ldr	r3, [pc, #180]	; (239b8 <nm_read_block+0xc4>)
   23902:	881a      	ldrh	r2, [r3, #0]
   23904:	2310      	movs	r3, #16
   23906:	18fb      	adds	r3, r7, r3
   23908:	3a08      	subs	r2, #8
   2390a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2390c:	2300      	movs	r3, #0
   2390e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23910:	2313      	movs	r3, #19
   23912:	18fb      	adds	r3, r7, r3
   23914:	2200      	movs	r2, #0
   23916:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23918:	2310      	movs	r3, #16
   2391a:	18fb      	adds	r3, r7, r3
   2391c:	881a      	ldrh	r2, [r3, #0]
   2391e:	687b      	ldr	r3, [r7, #4]
   23920:	429a      	cmp	r2, r3
   23922:	d313      	bcc.n	2394c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23924:	68ba      	ldr	r2, [r7, #8]
   23926:	697b      	ldr	r3, [r7, #20]
   23928:	18d1      	adds	r1, r2, r3
   2392a:	687b      	ldr	r3, [r7, #4]
   2392c:	b29a      	uxth	r2, r3
   2392e:	68fb      	ldr	r3, [r7, #12]
   23930:	0018      	movs	r0, r3
   23932:	4b22      	ldr	r3, [pc, #136]	; (239bc <nm_read_block+0xc8>)
   23934:	4798      	blx	r3
   23936:	0003      	movs	r3, r0
   23938:	b2da      	uxtb	r2, r3
   2393a:	2313      	movs	r3, #19
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	781b      	ldrb	r3, [r3, #0]
   23940:	18d3      	adds	r3, r2, r3
   23942:	b2da      	uxtb	r2, r3
   23944:	2313      	movs	r3, #19
   23946:	18fb      	adds	r3, r7, r3
   23948:	701a      	strb	r2, [r3, #0]
			break;
   2394a:	e02d      	b.n	239a8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2394c:	68ba      	ldr	r2, [r7, #8]
   2394e:	697b      	ldr	r3, [r7, #20]
   23950:	18d1      	adds	r1, r2, r3
   23952:	2310      	movs	r3, #16
   23954:	18fb      	adds	r3, r7, r3
   23956:	881a      	ldrh	r2, [r3, #0]
   23958:	68fb      	ldr	r3, [r7, #12]
   2395a:	0018      	movs	r0, r3
   2395c:	4b17      	ldr	r3, [pc, #92]	; (239bc <nm_read_block+0xc8>)
   2395e:	4798      	blx	r3
   23960:	0003      	movs	r3, r0
   23962:	b2da      	uxtb	r2, r3
   23964:	2313      	movs	r3, #19
   23966:	18fb      	adds	r3, r7, r3
   23968:	781b      	ldrb	r3, [r3, #0]
   2396a:	18d3      	adds	r3, r2, r3
   2396c:	b2da      	uxtb	r2, r3
   2396e:	2313      	movs	r3, #19
   23970:	18fb      	adds	r3, r7, r3
   23972:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23974:	2313      	movs	r3, #19
   23976:	18fb      	adds	r3, r7, r3
   23978:	781b      	ldrb	r3, [r3, #0]
   2397a:	b25b      	sxtb	r3, r3
   2397c:	2b00      	cmp	r3, #0
   2397e:	d112      	bne.n	239a6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23980:	2310      	movs	r3, #16
   23982:	18fb      	adds	r3, r7, r3
   23984:	881b      	ldrh	r3, [r3, #0]
   23986:	687a      	ldr	r2, [r7, #4]
   23988:	1ad3      	subs	r3, r2, r3
   2398a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2398c:	2310      	movs	r3, #16
   2398e:	18fb      	adds	r3, r7, r3
   23990:	881b      	ldrh	r3, [r3, #0]
   23992:	697a      	ldr	r2, [r7, #20]
   23994:	18d3      	adds	r3, r2, r3
   23996:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23998:	2310      	movs	r3, #16
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	881b      	ldrh	r3, [r3, #0]
   2399e:	68fa      	ldr	r2, [r7, #12]
   239a0:	18d3      	adds	r3, r2, r3
   239a2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   239a4:	e7b8      	b.n	23918 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   239a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   239a8:	2313      	movs	r3, #19
   239aa:	18fb      	adds	r3, r7, r3
   239ac:	781b      	ldrb	r3, [r3, #0]
   239ae:	b25b      	sxtb	r3, r3
}
   239b0:	0018      	movs	r0, r3
   239b2:	46bd      	mov	sp, r7
   239b4:	b006      	add	sp, #24
   239b6:	bd80      	pop	{r7, pc}
   239b8:	20000124 	.word	0x20000124
   239bc:	000238c9 	.word	0x000238c9

000239c0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   239c0:	b580      	push	{r7, lr}
   239c2:	b084      	sub	sp, #16
   239c4:	af00      	add	r7, sp, #0
   239c6:	60f8      	str	r0, [r7, #12]
   239c8:	60b9      	str	r1, [r7, #8]
   239ca:	1dbb      	adds	r3, r7, #6
   239cc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   239ce:	1dbb      	adds	r3, r7, #6
   239d0:	881a      	ldrh	r2, [r3, #0]
   239d2:	68b9      	ldr	r1, [r7, #8]
   239d4:	68fb      	ldr	r3, [r7, #12]
   239d6:	0018      	movs	r0, r3
   239d8:	4b03      	ldr	r3, [pc, #12]	; (239e8 <p_nm_write_block+0x28>)
   239da:	4798      	blx	r3
   239dc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   239de:	0018      	movs	r0, r3
   239e0:	46bd      	mov	sp, r7
   239e2:	b004      	add	sp, #16
   239e4:	bd80      	pop	{r7, pc}
   239e6:	46c0      	nop			; (mov r8, r8)
   239e8:	0002591d 	.word	0x0002591d

000239ec <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   239ec:	b580      	push	{r7, lr}
   239ee:	b086      	sub	sp, #24
   239f0:	af00      	add	r7, sp, #0
   239f2:	60f8      	str	r0, [r7, #12]
   239f4:	60b9      	str	r1, [r7, #8]
   239f6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   239f8:	4b2d      	ldr	r3, [pc, #180]	; (23ab0 <nm_write_block+0xc4>)
   239fa:	881a      	ldrh	r2, [r3, #0]
   239fc:	2310      	movs	r3, #16
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	3a08      	subs	r2, #8
   23a02:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23a04:	2300      	movs	r3, #0
   23a06:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23a08:	2313      	movs	r3, #19
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	2200      	movs	r2, #0
   23a0e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23a10:	2310      	movs	r3, #16
   23a12:	18fb      	adds	r3, r7, r3
   23a14:	881a      	ldrh	r2, [r3, #0]
   23a16:	687b      	ldr	r3, [r7, #4]
   23a18:	429a      	cmp	r2, r3
   23a1a:	d313      	bcc.n	23a44 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23a1c:	68ba      	ldr	r2, [r7, #8]
   23a1e:	697b      	ldr	r3, [r7, #20]
   23a20:	18d1      	adds	r1, r2, r3
   23a22:	687b      	ldr	r3, [r7, #4]
   23a24:	b29a      	uxth	r2, r3
   23a26:	68fb      	ldr	r3, [r7, #12]
   23a28:	0018      	movs	r0, r3
   23a2a:	4b22      	ldr	r3, [pc, #136]	; (23ab4 <nm_write_block+0xc8>)
   23a2c:	4798      	blx	r3
   23a2e:	0003      	movs	r3, r0
   23a30:	b2da      	uxtb	r2, r3
   23a32:	2313      	movs	r3, #19
   23a34:	18fb      	adds	r3, r7, r3
   23a36:	781b      	ldrb	r3, [r3, #0]
   23a38:	18d3      	adds	r3, r2, r3
   23a3a:	b2da      	uxtb	r2, r3
   23a3c:	2313      	movs	r3, #19
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	701a      	strb	r2, [r3, #0]
			break;
   23a42:	e02d      	b.n	23aa0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23a44:	68ba      	ldr	r2, [r7, #8]
   23a46:	697b      	ldr	r3, [r7, #20]
   23a48:	18d1      	adds	r1, r2, r3
   23a4a:	2310      	movs	r3, #16
   23a4c:	18fb      	adds	r3, r7, r3
   23a4e:	881a      	ldrh	r2, [r3, #0]
   23a50:	68fb      	ldr	r3, [r7, #12]
   23a52:	0018      	movs	r0, r3
   23a54:	4b17      	ldr	r3, [pc, #92]	; (23ab4 <nm_write_block+0xc8>)
   23a56:	4798      	blx	r3
   23a58:	0003      	movs	r3, r0
   23a5a:	b2da      	uxtb	r2, r3
   23a5c:	2313      	movs	r3, #19
   23a5e:	18fb      	adds	r3, r7, r3
   23a60:	781b      	ldrb	r3, [r3, #0]
   23a62:	18d3      	adds	r3, r2, r3
   23a64:	b2da      	uxtb	r2, r3
   23a66:	2313      	movs	r3, #19
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23a6c:	2313      	movs	r3, #19
   23a6e:	18fb      	adds	r3, r7, r3
   23a70:	781b      	ldrb	r3, [r3, #0]
   23a72:	b25b      	sxtb	r3, r3
   23a74:	2b00      	cmp	r3, #0
   23a76:	d112      	bne.n	23a9e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23a78:	2310      	movs	r3, #16
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	881b      	ldrh	r3, [r3, #0]
   23a7e:	687a      	ldr	r2, [r7, #4]
   23a80:	1ad3      	subs	r3, r2, r3
   23a82:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23a84:	2310      	movs	r3, #16
   23a86:	18fb      	adds	r3, r7, r3
   23a88:	881b      	ldrh	r3, [r3, #0]
   23a8a:	697a      	ldr	r2, [r7, #20]
   23a8c:	18d3      	adds	r3, r2, r3
   23a8e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23a90:	2310      	movs	r3, #16
   23a92:	18fb      	adds	r3, r7, r3
   23a94:	881b      	ldrh	r3, [r3, #0]
   23a96:	68fa      	ldr	r2, [r7, #12]
   23a98:	18d3      	adds	r3, r2, r3
   23a9a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23a9c:	e7b8      	b.n	23a10 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23a9e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23aa0:	2313      	movs	r3, #19
   23aa2:	18fb      	adds	r3, r7, r3
   23aa4:	781b      	ldrb	r3, [r3, #0]
   23aa6:	b25b      	sxtb	r3, r3
}
   23aa8:	0018      	movs	r0, r3
   23aaa:	46bd      	mov	sp, r7
   23aac:	b006      	add	sp, #24
   23aae:	bd80      	pop	{r7, pc}
   23ab0:	20000124 	.word	0x20000124
   23ab4:	000239c1 	.word	0x000239c1

00023ab8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23ab8:	b590      	push	{r4, r7, lr}
   23aba:	b089      	sub	sp, #36	; 0x24
   23abc:	af00      	add	r7, sp, #0
   23abe:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23ac0:	2300      	movs	r3, #0
   23ac2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23ac4:	231f      	movs	r3, #31
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	2200      	movs	r2, #0
   23aca:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23acc:	230c      	movs	r3, #12
   23ace:	18fb      	adds	r3, r7, r3
   23ad0:	0018      	movs	r0, r3
   23ad2:	2308      	movs	r3, #8
   23ad4:	001a      	movs	r2, r3
   23ad6:	2100      	movs	r1, #0
   23ad8:	4b64      	ldr	r3, [pc, #400]	; (23c6c <nm_get_firmware_full_info+0x1b4>)
   23ada:	4798      	blx	r3
	if (pstrRev != NULL)
   23adc:	687b      	ldr	r3, [r7, #4]
   23ade:	2b00      	cmp	r3, #0
   23ae0:	d100      	bne.n	23ae4 <nm_get_firmware_full_info+0x2c>
   23ae2:	e0ba      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23ae4:	687b      	ldr	r3, [r7, #4]
   23ae6:	2228      	movs	r2, #40	; 0x28
   23ae8:	2100      	movs	r1, #0
   23aea:	0018      	movs	r0, r3
   23aec:	4b60      	ldr	r3, [pc, #384]	; (23c70 <nm_get_firmware_full_info+0x1b8>)
   23aee:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23af0:	231f      	movs	r3, #31
   23af2:	18fc      	adds	r4, r7, r3
   23af4:	2314      	movs	r3, #20
   23af6:	18fb      	adds	r3, r7, r3
   23af8:	4a5e      	ldr	r2, [pc, #376]	; (23c74 <nm_get_firmware_full_info+0x1bc>)
   23afa:	0019      	movs	r1, r3
   23afc:	0010      	movs	r0, r2
   23afe:	4b5e      	ldr	r3, [pc, #376]	; (23c78 <nm_get_firmware_full_info+0x1c0>)
   23b00:	4798      	blx	r3
   23b02:	0003      	movs	r3, r0
   23b04:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23b06:	231f      	movs	r3, #31
   23b08:	18fb      	adds	r3, r7, r3
   23b0a:	781b      	ldrb	r3, [r3, #0]
   23b0c:	b25b      	sxtb	r3, r3
   23b0e:	2b00      	cmp	r3, #0
   23b10:	d000      	beq.n	23b14 <nm_get_firmware_full_info+0x5c>
   23b12:	e0a2      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23b14:	697b      	ldr	r3, [r7, #20]
   23b16:	2b00      	cmp	r3, #0
   23b18:	d100      	bne.n	23b1c <nm_get_firmware_full_info+0x64>
   23b1a:	e09a      	b.n	23c52 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23b1c:	697b      	ldr	r3, [r7, #20]
   23b1e:	22c0      	movs	r2, #192	; 0xc0
   23b20:	0292      	lsls	r2, r2, #10
   23b22:	4313      	orrs	r3, r2
   23b24:	221f      	movs	r2, #31
   23b26:	18bc      	adds	r4, r7, r2
   23b28:	220c      	movs	r2, #12
   23b2a:	18b9      	adds	r1, r7, r2
   23b2c:	2208      	movs	r2, #8
   23b2e:	0018      	movs	r0, r3
   23b30:	4b52      	ldr	r3, [pc, #328]	; (23c7c <nm_get_firmware_full_info+0x1c4>)
   23b32:	4798      	blx	r3
   23b34:	0003      	movs	r3, r0
   23b36:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23b38:	231f      	movs	r3, #31
   23b3a:	18fb      	adds	r3, r7, r3
   23b3c:	781b      	ldrb	r3, [r3, #0]
   23b3e:	b25b      	sxtb	r3, r3
   23b40:	2b00      	cmp	r3, #0
   23b42:	d000      	beq.n	23b46 <nm_get_firmware_full_info+0x8e>
   23b44:	e089      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23b46:	230c      	movs	r3, #12
   23b48:	18fb      	adds	r3, r7, r3
   23b4a:	685b      	ldr	r3, [r3, #4]
   23b4c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23b4e:	697b      	ldr	r3, [r7, #20]
   23b50:	041b      	lsls	r3, r3, #16
   23b52:	0c1b      	lsrs	r3, r3, #16
   23b54:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23b56:	697b      	ldr	r3, [r7, #20]
   23b58:	2b00      	cmp	r3, #0
   23b5a:	d100      	bne.n	23b5e <nm_get_firmware_full_info+0xa6>
   23b5c:	e074      	b.n	23c48 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23b5e:	697b      	ldr	r3, [r7, #20]
   23b60:	22c0      	movs	r2, #192	; 0xc0
   23b62:	0292      	lsls	r2, r2, #10
   23b64:	4313      	orrs	r3, r2
   23b66:	221f      	movs	r2, #31
   23b68:	18bc      	adds	r4, r7, r2
   23b6a:	6879      	ldr	r1, [r7, #4]
   23b6c:	2228      	movs	r2, #40	; 0x28
   23b6e:	0018      	movs	r0, r3
   23b70:	4b42      	ldr	r3, [pc, #264]	; (23c7c <nm_get_firmware_full_info+0x1c4>)
   23b72:	4798      	blx	r3
   23b74:	0003      	movs	r3, r0
   23b76:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23b78:	231f      	movs	r3, #31
   23b7a:	18fb      	adds	r3, r7, r3
   23b7c:	781b      	ldrb	r3, [r3, #0]
   23b7e:	b25b      	sxtb	r3, r3
   23b80:	2b00      	cmp	r3, #0
   23b82:	d16a      	bne.n	23c5a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23b84:	687b      	ldr	r3, [r7, #4]
   23b86:	791b      	ldrb	r3, [r3, #4]
   23b88:	021b      	lsls	r3, r3, #8
   23b8a:	b21a      	sxth	r2, r3
   23b8c:	687b      	ldr	r3, [r7, #4]
   23b8e:	795b      	ldrb	r3, [r3, #5]
   23b90:	011b      	lsls	r3, r3, #4
   23b92:	b21b      	sxth	r3, r3
   23b94:	21ff      	movs	r1, #255	; 0xff
   23b96:	400b      	ands	r3, r1
   23b98:	b21b      	sxth	r3, r3
   23b9a:	4313      	orrs	r3, r2
   23b9c:	b21a      	sxth	r2, r3
   23b9e:	687b      	ldr	r3, [r7, #4]
   23ba0:	799b      	ldrb	r3, [r3, #6]
   23ba2:	b21b      	sxth	r3, r3
   23ba4:	210f      	movs	r1, #15
   23ba6:	400b      	ands	r3, r1
   23ba8:	b21b      	sxth	r3, r3
   23baa:	4313      	orrs	r3, r2
   23bac:	b21a      	sxth	r2, r3
   23bae:	231c      	movs	r3, #28
   23bb0:	18fb      	adds	r3, r7, r3
   23bb2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23bb4:	231a      	movs	r3, #26
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	4a31      	ldr	r2, [pc, #196]	; (23c80 <nm_get_firmware_full_info+0x1c8>)
   23bba:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23bbc:	687b      	ldr	r3, [r7, #4]
   23bbe:	79db      	ldrb	r3, [r3, #7]
   23bc0:	021b      	lsls	r3, r3, #8
   23bc2:	b21a      	sxth	r2, r3
   23bc4:	687b      	ldr	r3, [r7, #4]
   23bc6:	7a1b      	ldrb	r3, [r3, #8]
   23bc8:	011b      	lsls	r3, r3, #4
   23bca:	b21b      	sxth	r3, r3
   23bcc:	21ff      	movs	r1, #255	; 0xff
   23bce:	400b      	ands	r3, r1
   23bd0:	b21b      	sxth	r3, r3
   23bd2:	4313      	orrs	r3, r2
   23bd4:	b21a      	sxth	r2, r3
   23bd6:	687b      	ldr	r3, [r7, #4]
   23bd8:	7a5b      	ldrb	r3, [r3, #9]
   23bda:	b21b      	sxth	r3, r3
   23bdc:	210f      	movs	r1, #15
   23bde:	400b      	ands	r3, r1
   23be0:	b21b      	sxth	r3, r3
   23be2:	4313      	orrs	r3, r2
   23be4:	b21a      	sxth	r2, r3
   23be6:	2318      	movs	r3, #24
   23be8:	18fb      	adds	r3, r7, r3
   23bea:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23bec:	231c      	movs	r3, #28
   23bee:	18fb      	adds	r3, r7, r3
   23bf0:	881b      	ldrh	r3, [r3, #0]
   23bf2:	2b00      	cmp	r3, #0
   23bf4:	d009      	beq.n	23c0a <nm_get_firmware_full_info+0x152>
   23bf6:	2318      	movs	r3, #24
   23bf8:	18fb      	adds	r3, r7, r3
   23bfa:	881b      	ldrh	r3, [r3, #0]
   23bfc:	2b00      	cmp	r3, #0
   23bfe:	d004      	beq.n	23c0a <nm_get_firmware_full_info+0x152>
   23c00:	2318      	movs	r3, #24
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	881b      	ldrh	r3, [r3, #0]
   23c06:	2b00      	cmp	r3, #0
   23c08:	d104      	bne.n	23c14 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23c0a:	231f      	movs	r3, #31
   23c0c:	18fb      	adds	r3, r7, r3
   23c0e:	22f4      	movs	r2, #244	; 0xf4
   23c10:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c12:	e022      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23c14:	231a      	movs	r3, #26
   23c16:	18fa      	adds	r2, r7, r3
   23c18:	2318      	movs	r3, #24
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	8812      	ldrh	r2, [r2, #0]
   23c1e:	881b      	ldrh	r3, [r3, #0]
   23c20:	429a      	cmp	r2, r3
   23c22:	d204      	bcs.n	23c2e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23c24:	231f      	movs	r3, #31
   23c26:	18fb      	adds	r3, r7, r3
   23c28:	22f3      	movs	r2, #243	; 0xf3
   23c2a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c2c:	e015      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23c2e:	231a      	movs	r3, #26
   23c30:	18fa      	adds	r2, r7, r3
   23c32:	231c      	movs	r3, #28
   23c34:	18fb      	adds	r3, r7, r3
   23c36:	8812      	ldrh	r2, [r2, #0]
   23c38:	881b      	ldrh	r3, [r3, #0]
   23c3a:	429a      	cmp	r2, r3
   23c3c:	d90d      	bls.n	23c5a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23c3e:	231f      	movs	r3, #31
   23c40:	18fb      	adds	r3, r7, r3
   23c42:	22f3      	movs	r2, #243	; 0xf3
   23c44:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c46:	e008      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23c48:	231f      	movs	r3, #31
   23c4a:	18fb      	adds	r3, r7, r3
   23c4c:	22f4      	movs	r2, #244	; 0xf4
   23c4e:	701a      	strb	r2, [r3, #0]
   23c50:	e003      	b.n	23c5a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23c52:	231f      	movs	r3, #31
   23c54:	18fb      	adds	r3, r7, r3
   23c56:	22f4      	movs	r2, #244	; 0xf4
   23c58:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23c5a:	231f      	movs	r3, #31
   23c5c:	18fb      	adds	r3, r7, r3
   23c5e:	781b      	ldrb	r3, [r3, #0]
   23c60:	b25b      	sxtb	r3, r3
}
   23c62:	0018      	movs	r0, r3
   23c64:	46bd      	mov	sp, r7
   23c66:	b009      	add	sp, #36	; 0x24
   23c68:	bd90      	pop	{r4, r7, pc}
   23c6a:	46c0      	nop			; (mov r8, r8)
   23c6c:	000356ef 	.word	0x000356ef
   23c70:	000217f1 	.word	0x000217f1
   23c74:	000c0008 	.word	0x000c0008
   23c78:	00023881 	.word	0x00023881
   23c7c:	000238f5 	.word	0x000238f5
   23c80:	00001354 	.word	0x00001354

00023c84 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23c84:	b590      	push	{r4, r7, lr}
   23c86:	b085      	sub	sp, #20
   23c88:	af00      	add	r7, sp, #0
   23c8a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23c8c:	230f      	movs	r3, #15
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	2200      	movs	r2, #0
   23c92:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23c94:	687b      	ldr	r3, [r7, #4]
   23c96:	2b00      	cmp	r3, #0
   23c98:	d013      	beq.n	23cc2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23c9a:	230e      	movs	r3, #14
   23c9c:	18fb      	adds	r3, r7, r3
   23c9e:	687a      	ldr	r2, [r7, #4]
   23ca0:	7812      	ldrb	r2, [r2, #0]
   23ca2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23ca4:	230e      	movs	r3, #14
   23ca6:	18fb      	adds	r3, r7, r3
   23ca8:	781b      	ldrb	r3, [r3, #0]
   23caa:	2b00      	cmp	r3, #0
   23cac:	d004      	beq.n	23cb8 <nm_drv_init+0x34>
   23cae:	230e      	movs	r3, #14
   23cb0:	18fb      	adds	r3, r7, r3
   23cb2:	781b      	ldrb	r3, [r3, #0]
   23cb4:	2b04      	cmp	r3, #4
   23cb6:	d908      	bls.n	23cca <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23cb8:	230e      	movs	r3, #14
   23cba:	18fb      	adds	r3, r7, r3
   23cbc:	2201      	movs	r2, #1
   23cbe:	701a      	strb	r2, [r3, #0]
   23cc0:	e003      	b.n	23cca <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23cc2:	230e      	movs	r3, #14
   23cc4:	18fb      	adds	r3, r7, r3
   23cc6:	2201      	movs	r2, #1
   23cc8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23cca:	230f      	movs	r3, #15
   23ccc:	18fc      	adds	r4, r7, r3
   23cce:	2000      	movs	r0, #0
   23cd0:	4b41      	ldr	r3, [pc, #260]	; (23dd8 <nm_drv_init+0x154>)
   23cd2:	4798      	blx	r3
   23cd4:	0003      	movs	r3, r0
   23cd6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23cd8:	230f      	movs	r3, #15
   23cda:	18fb      	adds	r3, r7, r3
   23cdc:	781b      	ldrb	r3, [r3, #0]
   23cde:	b25b      	sxtb	r3, r3
   23ce0:	2b00      	cmp	r3, #0
   23ce2:	d00f      	beq.n	23d04 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23ce4:	2390      	movs	r3, #144	; 0x90
   23ce6:	005a      	lsls	r2, r3, #1
   23ce8:	493c      	ldr	r1, [pc, #240]	; (23ddc <nm_drv_init+0x158>)
   23cea:	4b3d      	ldr	r3, [pc, #244]	; (23de0 <nm_drv_init+0x15c>)
   23cec:	0018      	movs	r0, r3
   23cee:	4b3d      	ldr	r3, [pc, #244]	; (23de4 <nm_drv_init+0x160>)
   23cf0:	4798      	blx	r3
   23cf2:	4b3d      	ldr	r3, [pc, #244]	; (23de8 <nm_drv_init+0x164>)
   23cf4:	0018      	movs	r0, r3
   23cf6:	4b3b      	ldr	r3, [pc, #236]	; (23de4 <nm_drv_init+0x160>)
   23cf8:	4798      	blx	r3
   23cfa:	4b3c      	ldr	r3, [pc, #240]	; (23dec <nm_drv_init+0x168>)
   23cfc:	0018      	movs	r0, r3
   23cfe:	4b39      	ldr	r3, [pc, #228]	; (23de4 <nm_drv_init+0x160>)
   23d00:	4798      	blx	r3
		goto ERR1;
   23d02:	e061      	b.n	23dc8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23d04:	4b3a      	ldr	r3, [pc, #232]	; (23df0 <nm_drv_init+0x16c>)
   23d06:	0018      	movs	r0, r3
   23d08:	4b36      	ldr	r3, [pc, #216]	; (23de4 <nm_drv_init+0x160>)
   23d0a:	4798      	blx	r3
   23d0c:	4b39      	ldr	r3, [pc, #228]	; (23df4 <nm_drv_init+0x170>)
   23d0e:	4798      	blx	r3
   23d10:	0002      	movs	r2, r0
   23d12:	4b39      	ldr	r3, [pc, #228]	; (23df8 <nm_drv_init+0x174>)
   23d14:	0011      	movs	r1, r2
   23d16:	0018      	movs	r0, r3
   23d18:	4b32      	ldr	r3, [pc, #200]	; (23de4 <nm_drv_init+0x160>)
   23d1a:	4798      	blx	r3
   23d1c:	4b33      	ldr	r3, [pc, #204]	; (23dec <nm_drv_init+0x168>)
   23d1e:	0018      	movs	r0, r3
   23d20:	4b30      	ldr	r3, [pc, #192]	; (23de4 <nm_drv_init+0x160>)
   23d22:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23d24:	4b35      	ldr	r3, [pc, #212]	; (23dfc <nm_drv_init+0x178>)
   23d26:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23d28:	230f      	movs	r3, #15
   23d2a:	18fc      	adds	r4, r7, r3
   23d2c:	230e      	movs	r3, #14
   23d2e:	18fb      	adds	r3, r7, r3
   23d30:	781b      	ldrb	r3, [r3, #0]
   23d32:	0018      	movs	r0, r3
   23d34:	4b32      	ldr	r3, [pc, #200]	; (23e00 <nm_drv_init+0x17c>)
   23d36:	4798      	blx	r3
   23d38:	0003      	movs	r3, r0
   23d3a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d3c:	230f      	movs	r3, #15
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	781b      	ldrb	r3, [r3, #0]
   23d42:	b25b      	sxtb	r3, r3
   23d44:	2b00      	cmp	r3, #0
   23d46:	d13a      	bne.n	23dbe <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23d48:	230f      	movs	r3, #15
   23d4a:	18fc      	adds	r4, r7, r3
   23d4c:	230e      	movs	r3, #14
   23d4e:	18fb      	adds	r3, r7, r3
   23d50:	781b      	ldrb	r3, [r3, #0]
   23d52:	0018      	movs	r0, r3
   23d54:	4b2b      	ldr	r3, [pc, #172]	; (23e04 <nm_drv_init+0x180>)
   23d56:	4798      	blx	r3
   23d58:	0003      	movs	r3, r0
   23d5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d5c:	230f      	movs	r3, #15
   23d5e:	18fb      	adds	r3, r7, r3
   23d60:	781b      	ldrb	r3, [r3, #0]
   23d62:	b25b      	sxtb	r3, r3
   23d64:	2b00      	cmp	r3, #0
   23d66:	d12c      	bne.n	23dc2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23d68:	230e      	movs	r3, #14
   23d6a:	18fb      	adds	r3, r7, r3
   23d6c:	781b      	ldrb	r3, [r3, #0]
   23d6e:	2b02      	cmp	r3, #2
   23d70:	d02a      	beq.n	23dc8 <nm_drv_init+0x144>
   23d72:	230e      	movs	r3, #14
   23d74:	18fb      	adds	r3, r7, r3
   23d76:	781b      	ldrb	r3, [r3, #0]
   23d78:	2b03      	cmp	r3, #3
   23d7a:	d025      	beq.n	23dc8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23d7c:	230f      	movs	r3, #15
   23d7e:	18fc      	adds	r4, r7, r3
   23d80:	4b21      	ldr	r3, [pc, #132]	; (23e08 <nm_drv_init+0x184>)
   23d82:	4798      	blx	r3
   23d84:	0003      	movs	r3, r0
   23d86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d88:	230f      	movs	r3, #15
   23d8a:	18fb      	adds	r3, r7, r3
   23d8c:	781b      	ldrb	r3, [r3, #0]
   23d8e:	b25b      	sxtb	r3, r3
   23d90:	2b00      	cmp	r3, #0
   23d92:	d00f      	beq.n	23db4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23d94:	23a7      	movs	r3, #167	; 0xa7
   23d96:	005a      	lsls	r2, r3, #1
   23d98:	4910      	ldr	r1, [pc, #64]	; (23ddc <nm_drv_init+0x158>)
   23d9a:	4b11      	ldr	r3, [pc, #68]	; (23de0 <nm_drv_init+0x15c>)
   23d9c:	0018      	movs	r0, r3
   23d9e:	4b11      	ldr	r3, [pc, #68]	; (23de4 <nm_drv_init+0x160>)
   23da0:	4798      	blx	r3
   23da2:	4b1a      	ldr	r3, [pc, #104]	; (23e0c <nm_drv_init+0x188>)
   23da4:	0018      	movs	r0, r3
   23da6:	4b0f      	ldr	r3, [pc, #60]	; (23de4 <nm_drv_init+0x160>)
   23da8:	4798      	blx	r3
   23daa:	4b10      	ldr	r3, [pc, #64]	; (23dec <nm_drv_init+0x168>)
   23dac:	0018      	movs	r0, r3
   23dae:	4b0d      	ldr	r3, [pc, #52]	; (23de4 <nm_drv_init+0x160>)
   23db0:	4798      	blx	r3
		goto ERR2;
   23db2:	e007      	b.n	23dc4 <nm_drv_init+0x140>
	}
	return ret;
   23db4:	230f      	movs	r3, #15
   23db6:	18fb      	adds	r3, r7, r3
   23db8:	781b      	ldrb	r3, [r3, #0]
   23dba:	b25b      	sxtb	r3, r3
   23dbc:	e008      	b.n	23dd0 <nm_drv_init+0x14c>
		goto ERR2;
   23dbe:	46c0      	nop			; (mov r8, r8)
   23dc0:	e000      	b.n	23dc4 <nm_drv_init+0x140>
		goto ERR2;
   23dc2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23dc4:	4b12      	ldr	r3, [pc, #72]	; (23e10 <nm_drv_init+0x18c>)
   23dc6:	4798      	blx	r3
ERR1:
	return ret;
   23dc8:	230f      	movs	r3, #15
   23dca:	18fb      	adds	r3, r7, r3
   23dcc:	781b      	ldrb	r3, [r3, #0]
   23dce:	b25b      	sxtb	r3, r3
}
   23dd0:	0018      	movs	r0, r3
   23dd2:	46bd      	mov	sp, r7
   23dd4:	b005      	add	sp, #20
   23dd6:	bd90      	pop	{r4, r7, pc}
   23dd8:	000237e5 	.word	0x000237e5
   23ddc:	00039cf8 	.word	0x00039cf8
   23de0:	00039c28 	.word	0x00039c28
   23de4:	0001ea59 	.word	0x0001ea59
   23de8:	00039c3c 	.word	0x00039c3c
   23dec:	00039c58 	.word	0x00039c58
   23df0:	00039c5c 	.word	0x00039c5c
   23df4:	00023181 	.word	0x00023181
   23df8:	00039c68 	.word	0x00039c68
   23dfc:	0002569d 	.word	0x0002569d
   23e00:	000234d9 	.word	0x000234d9
   23e04:	00023671 	.word	0x00023671
   23e08:	000230cd 	.word	0x000230cd
   23e0c:	00039c78 	.word	0x00039c78
   23e10:	00023819 	.word	0x00023819

00023e14 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23e14:	b590      	push	{r4, r7, lr}
   23e16:	b085      	sub	sp, #20
   23e18:	af00      	add	r7, sp, #0
   23e1a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23e1c:	230f      	movs	r3, #15
   23e1e:	18fc      	adds	r4, r7, r3
   23e20:	4b2e      	ldr	r3, [pc, #184]	; (23edc <nm_drv_deinit+0xc8>)
   23e22:	4798      	blx	r3
   23e24:	0003      	movs	r3, r0
   23e26:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e28:	230f      	movs	r3, #15
   23e2a:	18fb      	adds	r3, r7, r3
   23e2c:	781b      	ldrb	r3, [r3, #0]
   23e2e:	b25b      	sxtb	r3, r3
   23e30:	2b00      	cmp	r3, #0
   23e32:	d010      	beq.n	23e56 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23e34:	2366      	movs	r3, #102	; 0x66
   23e36:	33ff      	adds	r3, #255	; 0xff
   23e38:	001a      	movs	r2, r3
   23e3a:	4929      	ldr	r1, [pc, #164]	; (23ee0 <nm_drv_deinit+0xcc>)
   23e3c:	4b29      	ldr	r3, [pc, #164]	; (23ee4 <nm_drv_deinit+0xd0>)
   23e3e:	0018      	movs	r0, r3
   23e40:	4b29      	ldr	r3, [pc, #164]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e42:	4798      	blx	r3
   23e44:	4b29      	ldr	r3, [pc, #164]	; (23eec <nm_drv_deinit+0xd8>)
   23e46:	0018      	movs	r0, r3
   23e48:	4b27      	ldr	r3, [pc, #156]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e4a:	4798      	blx	r3
   23e4c:	4b28      	ldr	r3, [pc, #160]	; (23ef0 <nm_drv_deinit+0xdc>)
   23e4e:	0018      	movs	r0, r3
   23e50:	4b25      	ldr	r3, [pc, #148]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e52:	4798      	blx	r3
		goto ERR1;
   23e54:	e03a      	b.n	23ecc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23e56:	230f      	movs	r3, #15
   23e58:	18fc      	adds	r4, r7, r3
   23e5a:	2000      	movs	r0, #0
   23e5c:	4b25      	ldr	r3, [pc, #148]	; (23ef4 <nm_drv_deinit+0xe0>)
   23e5e:	4798      	blx	r3
   23e60:	0003      	movs	r3, r0
   23e62:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e64:	230f      	movs	r3, #15
   23e66:	18fb      	adds	r3, r7, r3
   23e68:	781b      	ldrb	r3, [r3, #0]
   23e6a:	b25b      	sxtb	r3, r3
   23e6c:	2b00      	cmp	r3, #0
   23e6e:	d00f      	beq.n	23e90 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23e70:	23b6      	movs	r3, #182	; 0xb6
   23e72:	005a      	lsls	r2, r3, #1
   23e74:	491a      	ldr	r1, [pc, #104]	; (23ee0 <nm_drv_deinit+0xcc>)
   23e76:	4b1b      	ldr	r3, [pc, #108]	; (23ee4 <nm_drv_deinit+0xd0>)
   23e78:	0018      	movs	r0, r3
   23e7a:	4b1b      	ldr	r3, [pc, #108]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e7c:	4798      	blx	r3
   23e7e:	4b1e      	ldr	r3, [pc, #120]	; (23ef8 <nm_drv_deinit+0xe4>)
   23e80:	0018      	movs	r0, r3
   23e82:	4b19      	ldr	r3, [pc, #100]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e84:	4798      	blx	r3
   23e86:	4b1a      	ldr	r3, [pc, #104]	; (23ef0 <nm_drv_deinit+0xdc>)
   23e88:	0018      	movs	r0, r3
   23e8a:	4b17      	ldr	r3, [pc, #92]	; (23ee8 <nm_drv_deinit+0xd4>)
   23e8c:	4798      	blx	r3
		goto ERR1;
   23e8e:	e01d      	b.n	23ecc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23e90:	230f      	movs	r3, #15
   23e92:	18fc      	adds	r4, r7, r3
   23e94:	4b19      	ldr	r3, [pc, #100]	; (23efc <nm_drv_deinit+0xe8>)
   23e96:	4798      	blx	r3
   23e98:	0003      	movs	r3, r0
   23e9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e9c:	230f      	movs	r3, #15
   23e9e:	18fb      	adds	r3, r7, r3
   23ea0:	781b      	ldrb	r3, [r3, #0]
   23ea2:	b25b      	sxtb	r3, r3
   23ea4:	2b00      	cmp	r3, #0
   23ea6:	d00f      	beq.n	23ec8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23ea8:	23b9      	movs	r3, #185	; 0xb9
   23eaa:	005a      	lsls	r2, r3, #1
   23eac:	490c      	ldr	r1, [pc, #48]	; (23ee0 <nm_drv_deinit+0xcc>)
   23eae:	4b0d      	ldr	r3, [pc, #52]	; (23ee4 <nm_drv_deinit+0xd0>)
   23eb0:	0018      	movs	r0, r3
   23eb2:	4b0d      	ldr	r3, [pc, #52]	; (23ee8 <nm_drv_deinit+0xd4>)
   23eb4:	4798      	blx	r3
   23eb6:	4b12      	ldr	r3, [pc, #72]	; (23f00 <nm_drv_deinit+0xec>)
   23eb8:	0018      	movs	r0, r3
   23eba:	4b0b      	ldr	r3, [pc, #44]	; (23ee8 <nm_drv_deinit+0xd4>)
   23ebc:	4798      	blx	r3
   23ebe:	4b0c      	ldr	r3, [pc, #48]	; (23ef0 <nm_drv_deinit+0xdc>)
   23ec0:	0018      	movs	r0, r3
   23ec2:	4b09      	ldr	r3, [pc, #36]	; (23ee8 <nm_drv_deinit+0xd4>)
   23ec4:	4798      	blx	r3
		goto ERR1;
   23ec6:	e001      	b.n	23ecc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23ec8:	4b0e      	ldr	r3, [pc, #56]	; (23f04 <nm_drv_deinit+0xf0>)
   23eca:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23ecc:	230f      	movs	r3, #15
   23ece:	18fb      	adds	r3, r7, r3
   23ed0:	781b      	ldrb	r3, [r3, #0]
   23ed2:	b25b      	sxtb	r3, r3
}
   23ed4:	0018      	movs	r0, r3
   23ed6:	46bd      	mov	sp, r7
   23ed8:	b005      	add	sp, #20
   23eda:	bd90      	pop	{r4, r7, pc}
   23edc:	00023725 	.word	0x00023725
   23ee0:	00039d04 	.word	0x00039d04
   23ee4:	00039c28 	.word	0x00039c28
   23ee8:	0001ea59 	.word	0x0001ea59
   23eec:	00039c98 	.word	0x00039c98
   23ef0:	00039c58 	.word	0x00039c58
   23ef4:	00026b45 	.word	0x00026b45
   23ef8:	00039cb8 	.word	0x00039cb8
   23efc:	00023819 	.word	0x00023819
   23f00:	00039cdc 	.word	0x00039cdc
   23f04:	000257e9 	.word	0x000257e9

00023f08 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23f08:	b580      	push	{r7, lr}
   23f0a:	b086      	sub	sp, #24
   23f0c:	af00      	add	r7, sp, #0
   23f0e:	6078      	str	r0, [r7, #4]
   23f10:	000a      	movs	r2, r1
   23f12:	1cbb      	adds	r3, r7, #2
   23f14:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23f16:	230c      	movs	r3, #12
   23f18:	18fb      	adds	r3, r7, r3
   23f1a:	2200      	movs	r2, #0
   23f1c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23f1e:	230c      	movs	r3, #12
   23f20:	18fb      	adds	r3, r7, r3
   23f22:	687a      	ldr	r2, [r7, #4]
   23f24:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f26:	230c      	movs	r3, #12
   23f28:	18fb      	adds	r3, r7, r3
   23f2a:	1cba      	adds	r2, r7, #2
   23f2c:	8812      	ldrh	r2, [r2, #0]
   23f2e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23f30:	230c      	movs	r3, #12
   23f32:	18fb      	adds	r3, r7, r3
   23f34:	0019      	movs	r1, r3
   23f36:	2003      	movs	r0, #3
   23f38:	4b03      	ldr	r3, [pc, #12]	; (23f48 <nmi_spi_read+0x40>)
   23f3a:	4798      	blx	r3
   23f3c:	0003      	movs	r3, r0
}
   23f3e:	0018      	movs	r0, r3
   23f40:	46bd      	mov	sp, r7
   23f42:	b006      	add	sp, #24
   23f44:	bd80      	pop	{r7, pc}
   23f46:	46c0      	nop			; (mov r8, r8)
   23f48:	000216b5 	.word	0x000216b5

00023f4c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23f4c:	b580      	push	{r7, lr}
   23f4e:	b086      	sub	sp, #24
   23f50:	af00      	add	r7, sp, #0
   23f52:	6078      	str	r0, [r7, #4]
   23f54:	000a      	movs	r2, r1
   23f56:	1cbb      	adds	r3, r7, #2
   23f58:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23f5a:	230c      	movs	r3, #12
   23f5c:	18fb      	adds	r3, r7, r3
   23f5e:	687a      	ldr	r2, [r7, #4]
   23f60:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23f62:	230c      	movs	r3, #12
   23f64:	18fb      	adds	r3, r7, r3
   23f66:	2200      	movs	r2, #0
   23f68:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f6a:	230c      	movs	r3, #12
   23f6c:	18fb      	adds	r3, r7, r3
   23f6e:	1cba      	adds	r2, r7, #2
   23f70:	8812      	ldrh	r2, [r2, #0]
   23f72:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23f74:	230c      	movs	r3, #12
   23f76:	18fb      	adds	r3, r7, r3
   23f78:	0019      	movs	r1, r3
   23f7a:	2003      	movs	r0, #3
   23f7c:	4b03      	ldr	r3, [pc, #12]	; (23f8c <nmi_spi_write+0x40>)
   23f7e:	4798      	blx	r3
   23f80:	0003      	movs	r3, r0
}
   23f82:	0018      	movs	r0, r3
   23f84:	46bd      	mov	sp, r7
   23f86:	b006      	add	sp, #24
   23f88:	bd80      	pop	{r7, pc}
   23f8a:	46c0      	nop			; (mov r8, r8)
   23f8c:	000216b5 	.word	0x000216b5

00023f90 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23f90:	b580      	push	{r7, lr}
   23f92:	b088      	sub	sp, #32
   23f94:	af00      	add	r7, sp, #0
   23f96:	60f8      	str	r0, [r7, #12]
   23f98:	60b9      	str	r1, [r7, #8]
   23f9a:	1dbb      	adds	r3, r7, #6
   23f9c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23f9e:	2314      	movs	r3, #20
   23fa0:	18fb      	adds	r3, r7, r3
   23fa2:	68fa      	ldr	r2, [r7, #12]
   23fa4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23fa6:	2314      	movs	r3, #20
   23fa8:	18fb      	adds	r3, r7, r3
   23faa:	68ba      	ldr	r2, [r7, #8]
   23fac:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23fae:	2314      	movs	r3, #20
   23fb0:	18fb      	adds	r3, r7, r3
   23fb2:	1dba      	adds	r2, r7, #6
   23fb4:	8812      	ldrh	r2, [r2, #0]
   23fb6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23fb8:	2314      	movs	r3, #20
   23fba:	18fb      	adds	r3, r7, r3
   23fbc:	0019      	movs	r1, r3
   23fbe:	2003      	movs	r0, #3
   23fc0:	4b03      	ldr	r3, [pc, #12]	; (23fd0 <nmi_spi_rw+0x40>)
   23fc2:	4798      	blx	r3
   23fc4:	0003      	movs	r3, r0
}
   23fc6:	0018      	movs	r0, r3
   23fc8:	46bd      	mov	sp, r7
   23fca:	b008      	add	sp, #32
   23fcc:	bd80      	pop	{r7, pc}
   23fce:	46c0      	nop			; (mov r8, r8)
   23fd0:	000216b5 	.word	0x000216b5

00023fd4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23fd4:	b580      	push	{r7, lr}
   23fd6:	b082      	sub	sp, #8
   23fd8:	af00      	add	r7, sp, #0
   23fda:	0002      	movs	r2, r0
   23fdc:	1dfb      	adds	r3, r7, #7
   23fde:	701a      	strb	r2, [r3, #0]
   23fe0:	1dbb      	adds	r3, r7, #6
   23fe2:	1c0a      	adds	r2, r1, #0
   23fe4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23fe6:	1dfb      	adds	r3, r7, #7
   23fe8:	781b      	ldrb	r3, [r3, #0]
   23fea:	005a      	lsls	r2, r3, #1
   23fec:	1dbb      	adds	r3, r7, #6
   23fee:	781b      	ldrb	r3, [r3, #0]
   23ff0:	4053      	eors	r3, r2
   23ff2:	4a03      	ldr	r2, [pc, #12]	; (24000 <crc7_byte+0x2c>)
   23ff4:	5cd3      	ldrb	r3, [r2, r3]
}
   23ff6:	0018      	movs	r0, r3
   23ff8:	46bd      	mov	sp, r7
   23ffa:	b002      	add	sp, #8
   23ffc:	bd80      	pop	{r7, pc}
   23ffe:	46c0      	nop			; (mov r8, r8)
   24000:	00039d14 	.word	0x00039d14

00024004 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   24004:	b590      	push	{r4, r7, lr}
   24006:	b085      	sub	sp, #20
   24008:	af00      	add	r7, sp, #0
   2400a:	60b9      	str	r1, [r7, #8]
   2400c:	607a      	str	r2, [r7, #4]
   2400e:	230f      	movs	r3, #15
   24010:	18fb      	adds	r3, r7, r3
   24012:	1c02      	adds	r2, r0, #0
   24014:	701a      	strb	r2, [r3, #0]
	while (len--)
   24016:	e00e      	b.n	24036 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   24018:	68bb      	ldr	r3, [r7, #8]
   2401a:	1c5a      	adds	r2, r3, #1
   2401c:	60ba      	str	r2, [r7, #8]
   2401e:	781a      	ldrb	r2, [r3, #0]
   24020:	230f      	movs	r3, #15
   24022:	18fc      	adds	r4, r7, r3
   24024:	230f      	movs	r3, #15
   24026:	18fb      	adds	r3, r7, r3
   24028:	781b      	ldrb	r3, [r3, #0]
   2402a:	0011      	movs	r1, r2
   2402c:	0018      	movs	r0, r3
   2402e:	4b08      	ldr	r3, [pc, #32]	; (24050 <crc7+0x4c>)
   24030:	4798      	blx	r3
   24032:	0003      	movs	r3, r0
   24034:	7023      	strb	r3, [r4, #0]
	while (len--)
   24036:	687b      	ldr	r3, [r7, #4]
   24038:	1e5a      	subs	r2, r3, #1
   2403a:	607a      	str	r2, [r7, #4]
   2403c:	2b00      	cmp	r3, #0
   2403e:	d1eb      	bne.n	24018 <crc7+0x14>
	return crc;
   24040:	230f      	movs	r3, #15
   24042:	18fb      	adds	r3, r7, r3
   24044:	781b      	ldrb	r3, [r3, #0]
}
   24046:	0018      	movs	r0, r3
   24048:	46bd      	mov	sp, r7
   2404a:	b005      	add	sp, #20
   2404c:	bd90      	pop	{r4, r7, pc}
   2404e:	46c0      	nop			; (mov r8, r8)
   24050:	00023fd5 	.word	0x00023fd5

00024054 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   24054:	b590      	push	{r4, r7, lr}
   24056:	b089      	sub	sp, #36	; 0x24
   24058:	af00      	add	r7, sp, #0
   2405a:	60b9      	str	r1, [r7, #8]
   2405c:	607a      	str	r2, [r7, #4]
   2405e:	603b      	str	r3, [r7, #0]
   24060:	230f      	movs	r3, #15
   24062:	18fb      	adds	r3, r7, r3
   24064:	1c02      	adds	r2, r0, #0
   24066:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   24068:	231f      	movs	r3, #31
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	2205      	movs	r2, #5
   2406e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24070:	231e      	movs	r3, #30
   24072:	18fb      	adds	r3, r7, r3
   24074:	2201      	movs	r2, #1
   24076:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   24078:	2314      	movs	r3, #20
   2407a:	18fb      	adds	r3, r7, r3
   2407c:	220f      	movs	r2, #15
   2407e:	18ba      	adds	r2, r7, r2
   24080:	7812      	ldrb	r2, [r2, #0]
   24082:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24084:	230f      	movs	r3, #15
   24086:	18fb      	adds	r3, r7, r3
   24088:	781b      	ldrb	r3, [r3, #0]
   2408a:	3bc1      	subs	r3, #193	; 0xc1
   2408c:	2b0e      	cmp	r3, #14
   2408e:	d900      	bls.n	24092 <spi_cmd+0x3e>
   24090:	e11b      	b.n	242ca <spi_cmd+0x276>
   24092:	009a      	lsls	r2, r3, #2
   24094:	4bb6      	ldr	r3, [pc, #728]	; (24370 <spi_cmd+0x31c>)
   24096:	18d3      	adds	r3, r2, r3
   24098:	681b      	ldr	r3, [r3, #0]
   2409a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2409c:	68bb      	ldr	r3, [r7, #8]
   2409e:	0c1b      	lsrs	r3, r3, #16
   240a0:	b2da      	uxtb	r2, r3
   240a2:	2314      	movs	r3, #20
   240a4:	18fb      	adds	r3, r7, r3
   240a6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   240a8:	68bb      	ldr	r3, [r7, #8]
   240aa:	0a1b      	lsrs	r3, r3, #8
   240ac:	b2da      	uxtb	r2, r3
   240ae:	2314      	movs	r3, #20
   240b0:	18fb      	adds	r3, r7, r3
   240b2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   240b4:	68bb      	ldr	r3, [r7, #8]
   240b6:	b2da      	uxtb	r2, r3
   240b8:	2314      	movs	r3, #20
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	70da      	strb	r2, [r3, #3]
		len = 5;
   240be:	231f      	movs	r3, #31
   240c0:	18fb      	adds	r3, r7, r3
   240c2:	2205      	movs	r2, #5
   240c4:	701a      	strb	r2, [r3, #0]
		break;
   240c6:	e105      	b.n	242d4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   240c8:	68bb      	ldr	r3, [r7, #8]
   240ca:	0a1b      	lsrs	r3, r3, #8
   240cc:	b2da      	uxtb	r2, r3
   240ce:	2314      	movs	r3, #20
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   240d4:	2330      	movs	r3, #48	; 0x30
   240d6:	18fb      	adds	r3, r7, r3
   240d8:	781b      	ldrb	r3, [r3, #0]
   240da:	2b00      	cmp	r3, #0
   240dc:	d009      	beq.n	240f2 <spi_cmd+0x9e>
   240de:	2314      	movs	r3, #20
   240e0:	18fb      	adds	r3, r7, r3
   240e2:	785b      	ldrb	r3, [r3, #1]
   240e4:	2280      	movs	r2, #128	; 0x80
   240e6:	4252      	negs	r2, r2
   240e8:	4313      	orrs	r3, r2
   240ea:	b2da      	uxtb	r2, r3
   240ec:	2314      	movs	r3, #20
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   240f2:	68bb      	ldr	r3, [r7, #8]
   240f4:	b2da      	uxtb	r2, r3
   240f6:	2314      	movs	r3, #20
   240f8:	18fb      	adds	r3, r7, r3
   240fa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   240fc:	2314      	movs	r3, #20
   240fe:	18fb      	adds	r3, r7, r3
   24100:	2200      	movs	r2, #0
   24102:	70da      	strb	r2, [r3, #3]
		len = 5;
   24104:	231f      	movs	r3, #31
   24106:	18fb      	adds	r3, r7, r3
   24108:	2205      	movs	r2, #5
   2410a:	701a      	strb	r2, [r3, #0]
		break;
   2410c:	e0e2      	b.n	242d4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2410e:	2314      	movs	r3, #20
   24110:	18fb      	adds	r3, r7, r3
   24112:	2200      	movs	r2, #0
   24114:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24116:	2314      	movs	r3, #20
   24118:	18fb      	adds	r3, r7, r3
   2411a:	2200      	movs	r2, #0
   2411c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2411e:	2314      	movs	r3, #20
   24120:	18fb      	adds	r3, r7, r3
   24122:	2200      	movs	r2, #0
   24124:	70da      	strb	r2, [r3, #3]
		len = 5;
   24126:	231f      	movs	r3, #31
   24128:	18fb      	adds	r3, r7, r3
   2412a:	2205      	movs	r2, #5
   2412c:	701a      	strb	r2, [r3, #0]
		break;
   2412e:	e0d1      	b.n	242d4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   24130:	2314      	movs	r3, #20
   24132:	18fb      	adds	r3, r7, r3
   24134:	2200      	movs	r2, #0
   24136:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24138:	2314      	movs	r3, #20
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	2200      	movs	r2, #0
   2413e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24140:	2314      	movs	r3, #20
   24142:	18fb      	adds	r3, r7, r3
   24144:	2200      	movs	r2, #0
   24146:	70da      	strb	r2, [r3, #3]
		len = 5;
   24148:	231f      	movs	r3, #31
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	2205      	movs	r2, #5
   2414e:	701a      	strb	r2, [r3, #0]
		break;
   24150:	e0c0      	b.n	242d4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24152:	2314      	movs	r3, #20
   24154:	18fb      	adds	r3, r7, r3
   24156:	22ff      	movs	r2, #255	; 0xff
   24158:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2415a:	2314      	movs	r3, #20
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	22ff      	movs	r2, #255	; 0xff
   24160:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24162:	2314      	movs	r3, #20
   24164:	18fb      	adds	r3, r7, r3
   24166:	22ff      	movs	r2, #255	; 0xff
   24168:	70da      	strb	r2, [r3, #3]
		len = 5;
   2416a:	231f      	movs	r3, #31
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	2205      	movs	r2, #5
   24170:	701a      	strb	r2, [r3, #0]
		break;
   24172:	e0af      	b.n	242d4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24174:	68bb      	ldr	r3, [r7, #8]
   24176:	0c1b      	lsrs	r3, r3, #16
   24178:	b2da      	uxtb	r2, r3
   2417a:	2314      	movs	r3, #20
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24180:	68bb      	ldr	r3, [r7, #8]
   24182:	0a1b      	lsrs	r3, r3, #8
   24184:	b2da      	uxtb	r2, r3
   24186:	2314      	movs	r3, #20
   24188:	18fb      	adds	r3, r7, r3
   2418a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2418c:	68bb      	ldr	r3, [r7, #8]
   2418e:	b2da      	uxtb	r2, r3
   24190:	2314      	movs	r3, #20
   24192:	18fb      	adds	r3, r7, r3
   24194:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   24196:	683b      	ldr	r3, [r7, #0]
   24198:	0a1b      	lsrs	r3, r3, #8
   2419a:	b2da      	uxtb	r2, r3
   2419c:	2314      	movs	r3, #20
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   241a2:	683b      	ldr	r3, [r7, #0]
   241a4:	b2da      	uxtb	r2, r3
   241a6:	2314      	movs	r3, #20
   241a8:	18fb      	adds	r3, r7, r3
   241aa:	715a      	strb	r2, [r3, #5]
		len = 7;
   241ac:	231f      	movs	r3, #31
   241ae:	18fb      	adds	r3, r7, r3
   241b0:	2207      	movs	r2, #7
   241b2:	701a      	strb	r2, [r3, #0]
		break;
   241b4:	e08e      	b.n	242d4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   241b6:	68bb      	ldr	r3, [r7, #8]
   241b8:	0c1b      	lsrs	r3, r3, #16
   241ba:	b2da      	uxtb	r2, r3
   241bc:	2314      	movs	r3, #20
   241be:	18fb      	adds	r3, r7, r3
   241c0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   241c2:	68bb      	ldr	r3, [r7, #8]
   241c4:	0a1b      	lsrs	r3, r3, #8
   241c6:	b2da      	uxtb	r2, r3
   241c8:	2314      	movs	r3, #20
   241ca:	18fb      	adds	r3, r7, r3
   241cc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   241ce:	68bb      	ldr	r3, [r7, #8]
   241d0:	b2da      	uxtb	r2, r3
   241d2:	2314      	movs	r3, #20
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   241d8:	683b      	ldr	r3, [r7, #0]
   241da:	0c1b      	lsrs	r3, r3, #16
   241dc:	b2da      	uxtb	r2, r3
   241de:	2314      	movs	r3, #20
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   241e4:	683b      	ldr	r3, [r7, #0]
   241e6:	0a1b      	lsrs	r3, r3, #8
   241e8:	b2da      	uxtb	r2, r3
   241ea:	2314      	movs	r3, #20
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   241f0:	683b      	ldr	r3, [r7, #0]
   241f2:	b2da      	uxtb	r2, r3
   241f4:	2314      	movs	r3, #20
   241f6:	18fb      	adds	r3, r7, r3
   241f8:	719a      	strb	r2, [r3, #6]
		len = 8;
   241fa:	231f      	movs	r3, #31
   241fc:	18fb      	adds	r3, r7, r3
   241fe:	2208      	movs	r2, #8
   24200:	701a      	strb	r2, [r3, #0]
		break;
   24202:	e067      	b.n	242d4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24204:	68bb      	ldr	r3, [r7, #8]
   24206:	0a1b      	lsrs	r3, r3, #8
   24208:	b2da      	uxtb	r2, r3
   2420a:	2314      	movs	r3, #20
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24210:	2330      	movs	r3, #48	; 0x30
   24212:	18fb      	adds	r3, r7, r3
   24214:	781b      	ldrb	r3, [r3, #0]
   24216:	2b00      	cmp	r3, #0
   24218:	d009      	beq.n	2422e <spi_cmd+0x1da>
   2421a:	2314      	movs	r3, #20
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	785b      	ldrb	r3, [r3, #1]
   24220:	2280      	movs	r2, #128	; 0x80
   24222:	4252      	negs	r2, r2
   24224:	4313      	orrs	r3, r2
   24226:	b2da      	uxtb	r2, r3
   24228:	2314      	movs	r3, #20
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2422e:	68bb      	ldr	r3, [r7, #8]
   24230:	b2da      	uxtb	r2, r3
   24232:	2314      	movs	r3, #20
   24234:	18fb      	adds	r3, r7, r3
   24236:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   24238:	687b      	ldr	r3, [r7, #4]
   2423a:	0e1b      	lsrs	r3, r3, #24
   2423c:	b2da      	uxtb	r2, r3
   2423e:	2314      	movs	r3, #20
   24240:	18fb      	adds	r3, r7, r3
   24242:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24244:	687b      	ldr	r3, [r7, #4]
   24246:	0c1b      	lsrs	r3, r3, #16
   24248:	b2da      	uxtb	r2, r3
   2424a:	2314      	movs	r3, #20
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24250:	687b      	ldr	r3, [r7, #4]
   24252:	0a1b      	lsrs	r3, r3, #8
   24254:	b2da      	uxtb	r2, r3
   24256:	2314      	movs	r3, #20
   24258:	18fb      	adds	r3, r7, r3
   2425a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2425c:	687b      	ldr	r3, [r7, #4]
   2425e:	b2da      	uxtb	r2, r3
   24260:	2314      	movs	r3, #20
   24262:	18fb      	adds	r3, r7, r3
   24264:	719a      	strb	r2, [r3, #6]
		len = 8;
   24266:	231f      	movs	r3, #31
   24268:	18fb      	adds	r3, r7, r3
   2426a:	2208      	movs	r2, #8
   2426c:	701a      	strb	r2, [r3, #0]
		break;
   2426e:	e031      	b.n	242d4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24270:	68bb      	ldr	r3, [r7, #8]
   24272:	0c1b      	lsrs	r3, r3, #16
   24274:	b2da      	uxtb	r2, r3
   24276:	2314      	movs	r3, #20
   24278:	18fb      	adds	r3, r7, r3
   2427a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2427c:	68bb      	ldr	r3, [r7, #8]
   2427e:	0a1b      	lsrs	r3, r3, #8
   24280:	b2da      	uxtb	r2, r3
   24282:	2314      	movs	r3, #20
   24284:	18fb      	adds	r3, r7, r3
   24286:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   24288:	68bb      	ldr	r3, [r7, #8]
   2428a:	b2da      	uxtb	r2, r3
   2428c:	2314      	movs	r3, #20
   2428e:	18fb      	adds	r3, r7, r3
   24290:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   24292:	687b      	ldr	r3, [r7, #4]
   24294:	0e1b      	lsrs	r3, r3, #24
   24296:	b2da      	uxtb	r2, r3
   24298:	2314      	movs	r3, #20
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2429e:	687b      	ldr	r3, [r7, #4]
   242a0:	0c1b      	lsrs	r3, r3, #16
   242a2:	b2da      	uxtb	r2, r3
   242a4:	2314      	movs	r3, #20
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   242aa:	687b      	ldr	r3, [r7, #4]
   242ac:	0a1b      	lsrs	r3, r3, #8
   242ae:	b2da      	uxtb	r2, r3
   242b0:	2314      	movs	r3, #20
   242b2:	18fb      	adds	r3, r7, r3
   242b4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   242b6:	687b      	ldr	r3, [r7, #4]
   242b8:	b2da      	uxtb	r2, r3
   242ba:	2314      	movs	r3, #20
   242bc:	18fb      	adds	r3, r7, r3
   242be:	71da      	strb	r2, [r3, #7]
		len = 9;
   242c0:	231f      	movs	r3, #31
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	2209      	movs	r2, #9
   242c6:	701a      	strb	r2, [r3, #0]
		break;
   242c8:	e004      	b.n	242d4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   242ca:	231e      	movs	r3, #30
   242cc:	18fb      	adds	r3, r7, r3
   242ce:	2200      	movs	r2, #0
   242d0:	701a      	strb	r2, [r3, #0]
		break;
   242d2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   242d4:	231e      	movs	r3, #30
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	781b      	ldrb	r3, [r3, #0]
   242da:	b25b      	sxtb	r3, r3
   242dc:	2b00      	cmp	r3, #0
   242de:	d03f      	beq.n	24360 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   242e0:	4b24      	ldr	r3, [pc, #144]	; (24374 <spi_cmd+0x320>)
   242e2:	781b      	ldrb	r3, [r3, #0]
   242e4:	2b00      	cmp	r3, #0
   242e6:	d115      	bne.n	24314 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   242e8:	231f      	movs	r3, #31
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	781b      	ldrb	r3, [r3, #0]
   242ee:	1e5c      	subs	r4, r3, #1
   242f0:	231f      	movs	r3, #31
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	781b      	ldrb	r3, [r3, #0]
   242f6:	3b01      	subs	r3, #1
   242f8:	001a      	movs	r2, r3
   242fa:	2314      	movs	r3, #20
   242fc:	18fb      	adds	r3, r7, r3
   242fe:	0019      	movs	r1, r3
   24300:	207f      	movs	r0, #127	; 0x7f
   24302:	4b1d      	ldr	r3, [pc, #116]	; (24378 <spi_cmd+0x324>)
   24304:	4798      	blx	r3
   24306:	0003      	movs	r3, r0
   24308:	18db      	adds	r3, r3, r3
   2430a:	b2da      	uxtb	r2, r3
   2430c:	2314      	movs	r3, #20
   2430e:	18fb      	adds	r3, r7, r3
   24310:	551a      	strb	r2, [r3, r4]
   24312:	e006      	b.n	24322 <spi_cmd+0x2ce>
		else
			len-=1;
   24314:	231f      	movs	r3, #31
   24316:	18fb      	adds	r3, r7, r3
   24318:	221f      	movs	r2, #31
   2431a:	18ba      	adds	r2, r7, r2
   2431c:	7812      	ldrb	r2, [r2, #0]
   2431e:	3a01      	subs	r2, #1
   24320:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   24322:	231f      	movs	r3, #31
   24324:	18fb      	adds	r3, r7, r3
   24326:	781b      	ldrb	r3, [r3, #0]
   24328:	b29a      	uxth	r2, r3
   2432a:	2314      	movs	r3, #20
   2432c:	18fb      	adds	r3, r7, r3
   2432e:	0011      	movs	r1, r2
   24330:	0018      	movs	r0, r3
   24332:	4b12      	ldr	r3, [pc, #72]	; (2437c <spi_cmd+0x328>)
   24334:	4798      	blx	r3
   24336:	1e03      	subs	r3, r0, #0
   24338:	d012      	beq.n	24360 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2433a:	2390      	movs	r3, #144	; 0x90
   2433c:	005a      	lsls	r2, r3, #1
   2433e:	4910      	ldr	r1, [pc, #64]	; (24380 <spi_cmd+0x32c>)
   24340:	4b10      	ldr	r3, [pc, #64]	; (24384 <spi_cmd+0x330>)
   24342:	0018      	movs	r0, r3
   24344:	4b10      	ldr	r3, [pc, #64]	; (24388 <spi_cmd+0x334>)
   24346:	4798      	blx	r3
   24348:	4b10      	ldr	r3, [pc, #64]	; (2438c <spi_cmd+0x338>)
   2434a:	0018      	movs	r0, r3
   2434c:	4b0e      	ldr	r3, [pc, #56]	; (24388 <spi_cmd+0x334>)
   2434e:	4798      	blx	r3
   24350:	4b0f      	ldr	r3, [pc, #60]	; (24390 <spi_cmd+0x33c>)
   24352:	0018      	movs	r0, r3
   24354:	4b0c      	ldr	r3, [pc, #48]	; (24388 <spi_cmd+0x334>)
   24356:	4798      	blx	r3
			result = N_FAIL;
   24358:	231e      	movs	r3, #30
   2435a:	18fb      	adds	r3, r7, r3
   2435c:	2200      	movs	r2, #0
   2435e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24360:	231e      	movs	r3, #30
   24362:	18fb      	adds	r3, r7, r3
   24364:	781b      	ldrb	r3, [r3, #0]
   24366:	b25b      	sxtb	r3, r3
}
   24368:	0018      	movs	r0, r3
   2436a:	46bd      	mov	sp, r7
   2436c:	b009      	add	sp, #36	; 0x24
   2436e:	bd90      	pop	{r4, r7, pc}
   24370:	0003a38c 	.word	0x0003a38c
   24374:	200042b4 	.word	0x200042b4
   24378:	00024005 	.word	0x00024005
   2437c:	00023f4d 	.word	0x00023f4d
   24380:	0003a404 	.word	0x0003a404
   24384:	00039e14 	.word	0x00039e14
   24388:	0001ea59 	.word	0x0001ea59
   2438c:	00039e28 	.word	0x00039e28
   24390:	00039e54 	.word	0x00039e54

00024394 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   24394:	b590      	push	{r4, r7, lr}
   24396:	b085      	sub	sp, #20
   24398:	af00      	add	r7, sp, #0
   2439a:	0002      	movs	r2, r0
   2439c:	1dfb      	adds	r3, r7, #7
   2439e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   243a0:	230e      	movs	r3, #14
   243a2:	18fb      	adds	r3, r7, r3
   243a4:	2201      	movs	r2, #1
   243a6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   243a8:	4b32      	ldr	r3, [pc, #200]	; (24474 <spi_data_rsp+0xe0>)
   243aa:	781b      	ldrb	r3, [r3, #0]
   243ac:	2b00      	cmp	r3, #0
   243ae:	d104      	bne.n	243ba <spi_data_rsp+0x26>
		len = 2;
   243b0:	230f      	movs	r3, #15
   243b2:	18fb      	adds	r3, r7, r3
   243b4:	2202      	movs	r2, #2
   243b6:	701a      	strb	r2, [r3, #0]
   243b8:	e003      	b.n	243c2 <spi_data_rsp+0x2e>
	else
		len = 3;
   243ba:	230f      	movs	r3, #15
   243bc:	18fb      	adds	r3, r7, r3
   243be:	2203      	movs	r2, #3
   243c0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   243c2:	230f      	movs	r3, #15
   243c4:	18fb      	adds	r3, r7, r3
   243c6:	781b      	ldrb	r3, [r3, #0]
   243c8:	b29a      	uxth	r2, r3
   243ca:	2308      	movs	r3, #8
   243cc:	18fb      	adds	r3, r7, r3
   243ce:	0011      	movs	r1, r2
   243d0:	0018      	movs	r0, r3
   243d2:	4b29      	ldr	r3, [pc, #164]	; (24478 <spi_data_rsp+0xe4>)
   243d4:	4798      	blx	r3
   243d6:	1e03      	subs	r3, r0, #0
   243d8:	d013      	beq.n	24402 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   243da:	239a      	movs	r3, #154	; 0x9a
   243dc:	005a      	lsls	r2, r3, #1
   243de:	4927      	ldr	r1, [pc, #156]	; (2447c <spi_data_rsp+0xe8>)
   243e0:	4b27      	ldr	r3, [pc, #156]	; (24480 <spi_data_rsp+0xec>)
   243e2:	0018      	movs	r0, r3
   243e4:	4b27      	ldr	r3, [pc, #156]	; (24484 <spi_data_rsp+0xf0>)
   243e6:	4798      	blx	r3
   243e8:	4b27      	ldr	r3, [pc, #156]	; (24488 <spi_data_rsp+0xf4>)
   243ea:	0018      	movs	r0, r3
   243ec:	4b25      	ldr	r3, [pc, #148]	; (24484 <spi_data_rsp+0xf0>)
   243ee:	4798      	blx	r3
   243f0:	4b26      	ldr	r3, [pc, #152]	; (2448c <spi_data_rsp+0xf8>)
   243f2:	0018      	movs	r0, r3
   243f4:	4b23      	ldr	r3, [pc, #140]	; (24484 <spi_data_rsp+0xf0>)
   243f6:	4798      	blx	r3
		result = N_FAIL;
   243f8:	230e      	movs	r3, #14
   243fa:	18fb      	adds	r3, r7, r3
   243fc:	2200      	movs	r2, #0
   243fe:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24400:	e030      	b.n	24464 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24402:	230f      	movs	r3, #15
   24404:	18fb      	adds	r3, r7, r3
   24406:	781b      	ldrb	r3, [r3, #0]
   24408:	3b01      	subs	r3, #1
   2440a:	2208      	movs	r2, #8
   2440c:	18ba      	adds	r2, r7, r2
   2440e:	5cd3      	ldrb	r3, [r2, r3]
   24410:	2b00      	cmp	r3, #0
   24412:	d108      	bne.n	24426 <spi_data_rsp+0x92>
   24414:	230f      	movs	r3, #15
   24416:	18fb      	adds	r3, r7, r3
   24418:	781b      	ldrb	r3, [r3, #0]
   2441a:	3b02      	subs	r3, #2
   2441c:	2208      	movs	r2, #8
   2441e:	18ba      	adds	r2, r7, r2
   24420:	5cd3      	ldrb	r3, [r2, r3]
   24422:	2bc3      	cmp	r3, #195	; 0xc3
   24424:	d01e      	beq.n	24464 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   24426:	233c      	movs	r3, #60	; 0x3c
   24428:	33ff      	adds	r3, #255	; 0xff
   2442a:	001a      	movs	r2, r3
   2442c:	4913      	ldr	r1, [pc, #76]	; (2447c <spi_data_rsp+0xe8>)
   2442e:	4b14      	ldr	r3, [pc, #80]	; (24480 <spi_data_rsp+0xec>)
   24430:	0018      	movs	r0, r3
   24432:	4b14      	ldr	r3, [pc, #80]	; (24484 <spi_data_rsp+0xf0>)
   24434:	4798      	blx	r3
   24436:	2308      	movs	r3, #8
   24438:	18fb      	adds	r3, r7, r3
   2443a:	781b      	ldrb	r3, [r3, #0]
   2443c:	0019      	movs	r1, r3
   2443e:	2308      	movs	r3, #8
   24440:	18fb      	adds	r3, r7, r3
   24442:	785b      	ldrb	r3, [r3, #1]
   24444:	001a      	movs	r2, r3
   24446:	2308      	movs	r3, #8
   24448:	18fb      	adds	r3, r7, r3
   2444a:	789b      	ldrb	r3, [r3, #2]
   2444c:	4810      	ldr	r0, [pc, #64]	; (24490 <spi_data_rsp+0xfc>)
   2444e:	4c0d      	ldr	r4, [pc, #52]	; (24484 <spi_data_rsp+0xf0>)
   24450:	47a0      	blx	r4
   24452:	4b0e      	ldr	r3, [pc, #56]	; (2448c <spi_data_rsp+0xf8>)
   24454:	0018      	movs	r0, r3
   24456:	4b0b      	ldr	r3, [pc, #44]	; (24484 <spi_data_rsp+0xf0>)
   24458:	4798      	blx	r3
		result = N_FAIL;
   2445a:	230e      	movs	r3, #14
   2445c:	18fb      	adds	r3, r7, r3
   2445e:	2200      	movs	r2, #0
   24460:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24462:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24464:	230e      	movs	r3, #14
   24466:	18fb      	adds	r3, r7, r3
   24468:	781b      	ldrb	r3, [r3, #0]
   2446a:	b25b      	sxtb	r3, r3
}
   2446c:	0018      	movs	r0, r3
   2446e:	46bd      	mov	sp, r7
   24470:	b005      	add	sp, #20
   24472:	bd90      	pop	{r4, r7, pc}
   24474:	200042b4 	.word	0x200042b4
   24478:	00023f09 	.word	0x00023f09
   2447c:	0003a40c 	.word	0x0003a40c
   24480:	00039e14 	.word	0x00039e14
   24484:	0001ea59 	.word	0x0001ea59
   24488:	00039e58 	.word	0x00039e58
   2448c:	00039e54 	.word	0x00039e54
   24490:	00039e78 	.word	0x00039e78

00024494 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   24494:	b580      	push	{r7, lr}
   24496:	b084      	sub	sp, #16
   24498:	af00      	add	r7, sp, #0
   2449a:	0002      	movs	r2, r0
   2449c:	1dfb      	adds	r3, r7, #7
   2449e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   244a0:	230f      	movs	r3, #15
   244a2:	18fb      	adds	r3, r7, r3
   244a4:	2201      	movs	r2, #1
   244a6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   244a8:	1dfb      	adds	r3, r7, #7
   244aa:	781b      	ldrb	r3, [r3, #0]
   244ac:	2bcf      	cmp	r3, #207	; 0xcf
   244ae:	d007      	beq.n	244c0 <spi_cmd_rsp+0x2c>
   244b0:	1dfb      	adds	r3, r7, #7
   244b2:	781b      	ldrb	r3, [r3, #0]
   244b4:	2bc5      	cmp	r3, #197	; 0xc5
   244b6:	d003      	beq.n	244c0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   244b8:	1dfb      	adds	r3, r7, #7
   244ba:	781b      	ldrb	r3, [r3, #0]
   244bc:	2bc6      	cmp	r3, #198	; 0xc6
   244be:	d10c      	bne.n	244da <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   244c0:	230d      	movs	r3, #13
   244c2:	18fb      	adds	r3, r7, r3
   244c4:	2101      	movs	r1, #1
   244c6:	0018      	movs	r0, r3
   244c8:	4b3b      	ldr	r3, [pc, #236]	; (245b8 <spi_cmd_rsp+0x124>)
   244ca:	4798      	blx	r3
   244cc:	1e03      	subs	r3, r0, #0
   244ce:	d004      	beq.n	244da <spi_cmd_rsp+0x46>
			result = N_FAIL;
   244d0:	230f      	movs	r3, #15
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	2200      	movs	r2, #0
   244d6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   244d8:	e065      	b.n	245a6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   244da:	230e      	movs	r3, #14
   244dc:	18fb      	adds	r3, r7, r3
   244de:	220a      	movs	r2, #10
   244e0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   244e2:	230d      	movs	r3, #13
   244e4:	18fb      	adds	r3, r7, r3
   244e6:	2101      	movs	r1, #1
   244e8:	0018      	movs	r0, r3
   244ea:	4b33      	ldr	r3, [pc, #204]	; (245b8 <spi_cmd_rsp+0x124>)
   244ec:	4798      	blx	r3
   244ee:	1e03      	subs	r3, r0, #0
   244f0:	d014      	beq.n	2451c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   244f2:	235c      	movs	r3, #92	; 0x5c
   244f4:	33ff      	adds	r3, #255	; 0xff
   244f6:	001a      	movs	r2, r3
   244f8:	4930      	ldr	r1, [pc, #192]	; (245bc <spi_cmd_rsp+0x128>)
   244fa:	4b31      	ldr	r3, [pc, #196]	; (245c0 <spi_cmd_rsp+0x12c>)
   244fc:	0018      	movs	r0, r3
   244fe:	4b31      	ldr	r3, [pc, #196]	; (245c4 <spi_cmd_rsp+0x130>)
   24500:	4798      	blx	r3
   24502:	4b31      	ldr	r3, [pc, #196]	; (245c8 <spi_cmd_rsp+0x134>)
   24504:	0018      	movs	r0, r3
   24506:	4b2f      	ldr	r3, [pc, #188]	; (245c4 <spi_cmd_rsp+0x130>)
   24508:	4798      	blx	r3
   2450a:	4b30      	ldr	r3, [pc, #192]	; (245cc <spi_cmd_rsp+0x138>)
   2450c:	0018      	movs	r0, r3
   2450e:	4b2d      	ldr	r3, [pc, #180]	; (245c4 <spi_cmd_rsp+0x130>)
   24510:	4798      	blx	r3
			result = N_FAIL;
   24512:	230f      	movs	r3, #15
   24514:	18fb      	adds	r3, r7, r3
   24516:	2200      	movs	r2, #0
   24518:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2451a:	e044      	b.n	245a6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2451c:	230d      	movs	r3, #13
   2451e:	18fb      	adds	r3, r7, r3
   24520:	781b      	ldrb	r3, [r3, #0]
   24522:	1dfa      	adds	r2, r7, #7
   24524:	7812      	ldrb	r2, [r2, #0]
   24526:	429a      	cmp	r2, r3
   24528:	d00b      	beq.n	24542 <spi_cmd_rsp+0xae>
   2452a:	230e      	movs	r3, #14
   2452c:	18fb      	adds	r3, r7, r3
   2452e:	781b      	ldrb	r3, [r3, #0]
   24530:	b25b      	sxtb	r3, r3
   24532:	b2da      	uxtb	r2, r3
   24534:	3a01      	subs	r2, #1
   24536:	b2d1      	uxtb	r1, r2
   24538:	220e      	movs	r2, #14
   2453a:	18ba      	adds	r2, r7, r2
   2453c:	7011      	strb	r1, [r2, #0]
   2453e:	2b00      	cmp	r3, #0
   24540:	dccf      	bgt.n	244e2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24542:	230e      	movs	r3, #14
   24544:	18fb      	adds	r3, r7, r3
   24546:	220a      	movs	r2, #10
   24548:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2454a:	230d      	movs	r3, #13
   2454c:	18fb      	adds	r3, r7, r3
   2454e:	2101      	movs	r1, #1
   24550:	0018      	movs	r0, r3
   24552:	4b19      	ldr	r3, [pc, #100]	; (245b8 <spi_cmd_rsp+0x124>)
   24554:	4798      	blx	r3
   24556:	1e03      	subs	r3, r0, #0
   24558:	d014      	beq.n	24584 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2455a:	236a      	movs	r3, #106	; 0x6a
   2455c:	33ff      	adds	r3, #255	; 0xff
   2455e:	001a      	movs	r2, r3
   24560:	4916      	ldr	r1, [pc, #88]	; (245bc <spi_cmd_rsp+0x128>)
   24562:	4b17      	ldr	r3, [pc, #92]	; (245c0 <spi_cmd_rsp+0x12c>)
   24564:	0018      	movs	r0, r3
   24566:	4b17      	ldr	r3, [pc, #92]	; (245c4 <spi_cmd_rsp+0x130>)
   24568:	4798      	blx	r3
   2456a:	4b17      	ldr	r3, [pc, #92]	; (245c8 <spi_cmd_rsp+0x134>)
   2456c:	0018      	movs	r0, r3
   2456e:	4b15      	ldr	r3, [pc, #84]	; (245c4 <spi_cmd_rsp+0x130>)
   24570:	4798      	blx	r3
   24572:	4b16      	ldr	r3, [pc, #88]	; (245cc <spi_cmd_rsp+0x138>)
   24574:	0018      	movs	r0, r3
   24576:	4b13      	ldr	r3, [pc, #76]	; (245c4 <spi_cmd_rsp+0x130>)
   24578:	4798      	blx	r3
			result = N_FAIL;
   2457a:	230f      	movs	r3, #15
   2457c:	18fb      	adds	r3, r7, r3
   2457e:	2200      	movs	r2, #0
   24580:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24582:	e010      	b.n	245a6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   24584:	230d      	movs	r3, #13
   24586:	18fb      	adds	r3, r7, r3
   24588:	781b      	ldrb	r3, [r3, #0]
   2458a:	2b00      	cmp	r3, #0
   2458c:	d00b      	beq.n	245a6 <spi_cmd_rsp+0x112>
   2458e:	230e      	movs	r3, #14
   24590:	18fb      	adds	r3, r7, r3
   24592:	781b      	ldrb	r3, [r3, #0]
   24594:	b25b      	sxtb	r3, r3
   24596:	b2da      	uxtb	r2, r3
   24598:	3a01      	subs	r2, #1
   2459a:	b2d1      	uxtb	r1, r2
   2459c:	220e      	movs	r2, #14
   2459e:	18ba      	adds	r2, r7, r2
   245a0:	7011      	strb	r1, [r2, #0]
   245a2:	2b00      	cmp	r3, #0
   245a4:	dcd1      	bgt.n	2454a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   245a6:	230f      	movs	r3, #15
   245a8:	18fb      	adds	r3, r7, r3
   245aa:	781b      	ldrb	r3, [r3, #0]
   245ac:	b25b      	sxtb	r3, r3
}
   245ae:	0018      	movs	r0, r3
   245b0:	46bd      	mov	sp, r7
   245b2:	b004      	add	sp, #16
   245b4:	bd80      	pop	{r7, pc}
   245b6:	46c0      	nop			; (mov r8, r8)
   245b8:	00023f09 	.word	0x00023f09
   245bc:	0003a41c 	.word	0x0003a41c
   245c0:	00039e14 	.word	0x00039e14
   245c4:	0001ea59 	.word	0x0001ea59
   245c8:	00039ea8 	.word	0x00039ea8
   245cc:	00039e54 	.word	0x00039e54

000245d0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   245d0:	b590      	push	{r4, r7, lr}
   245d2:	b09f      	sub	sp, #124	; 0x7c
   245d4:	af00      	add	r7, sp, #0
   245d6:	60b9      	str	r1, [r7, #8]
   245d8:	607a      	str	r2, [r7, #4]
   245da:	603b      	str	r3, [r7, #0]
   245dc:	230f      	movs	r3, #15
   245de:	18fb      	adds	r3, r7, r3
   245e0:	1c02      	adds	r2, r0, #0
   245e2:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   245e4:	2300      	movs	r3, #0
   245e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   245e8:	2301      	movs	r3, #1
   245ea:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   245ec:	2338      	movs	r3, #56	; 0x38
   245ee:	18fb      	adds	r3, r7, r3
   245f0:	220f      	movs	r2, #15
   245f2:	18ba      	adds	r2, r7, r2
   245f4:	7812      	ldrb	r2, [r2, #0]
   245f6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   245f8:	230f      	movs	r3, #15
   245fa:	18fb      	adds	r3, r7, r3
   245fc:	781b      	ldrb	r3, [r3, #0]
   245fe:	3bc1      	subs	r3, #193	; 0xc1
   24600:	2b0e      	cmp	r3, #14
   24602:	d900      	bls.n	24606 <spi_cmd_complete+0x36>
   24604:	e103      	b.n	2480e <spi_cmd_complete+0x23e>
   24606:	009a      	lsls	r2, r3, #2
   24608:	4bd1      	ldr	r3, [pc, #836]	; (24950 <spi_cmd_complete+0x380>)
   2460a:	18d3      	adds	r3, r2, r3
   2460c:	681b      	ldr	r3, [r3, #0]
   2460e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   24610:	68bb      	ldr	r3, [r7, #8]
   24612:	0c1b      	lsrs	r3, r3, #16
   24614:	b2da      	uxtb	r2, r3
   24616:	2338      	movs	r3, #56	; 0x38
   24618:	18fb      	adds	r3, r7, r3
   2461a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2461c:	68bb      	ldr	r3, [r7, #8]
   2461e:	0a1b      	lsrs	r3, r3, #8
   24620:	b2da      	uxtb	r2, r3
   24622:	2338      	movs	r3, #56	; 0x38
   24624:	18fb      	adds	r3, r7, r3
   24626:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24628:	68bb      	ldr	r3, [r7, #8]
   2462a:	b2da      	uxtb	r2, r3
   2462c:	2338      	movs	r3, #56	; 0x38
   2462e:	18fb      	adds	r3, r7, r3
   24630:	70da      	strb	r2, [r3, #3]
		len = 5;
   24632:	2305      	movs	r3, #5
   24634:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   24636:	e0ed      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   24638:	68bb      	ldr	r3, [r7, #8]
   2463a:	0a1b      	lsrs	r3, r3, #8
   2463c:	b2da      	uxtb	r2, r3
   2463e:	2338      	movs	r3, #56	; 0x38
   24640:	18fb      	adds	r3, r7, r3
   24642:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24644:	2388      	movs	r3, #136	; 0x88
   24646:	18fb      	adds	r3, r7, r3
   24648:	781b      	ldrb	r3, [r3, #0]
   2464a:	2b01      	cmp	r3, #1
   2464c:	d109      	bne.n	24662 <spi_cmd_complete+0x92>
   2464e:	2338      	movs	r3, #56	; 0x38
   24650:	18fb      	adds	r3, r7, r3
   24652:	785b      	ldrb	r3, [r3, #1]
   24654:	2280      	movs	r2, #128	; 0x80
   24656:	4252      	negs	r2, r2
   24658:	4313      	orrs	r3, r2
   2465a:	b2da      	uxtb	r2, r3
   2465c:	2338      	movs	r3, #56	; 0x38
   2465e:	18fb      	adds	r3, r7, r3
   24660:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24662:	68bb      	ldr	r3, [r7, #8]
   24664:	b2da      	uxtb	r2, r3
   24666:	2338      	movs	r3, #56	; 0x38
   24668:	18fb      	adds	r3, r7, r3
   2466a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2466c:	2338      	movs	r3, #56	; 0x38
   2466e:	18fb      	adds	r3, r7, r3
   24670:	2200      	movs	r2, #0
   24672:	70da      	strb	r2, [r3, #3]
		len = 5;
   24674:	2305      	movs	r3, #5
   24676:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24678:	e0cc      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2467a:	2338      	movs	r3, #56	; 0x38
   2467c:	18fb      	adds	r3, r7, r3
   2467e:	2200      	movs	r2, #0
   24680:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24682:	2338      	movs	r3, #56	; 0x38
   24684:	18fb      	adds	r3, r7, r3
   24686:	2200      	movs	r2, #0
   24688:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2468a:	2338      	movs	r3, #56	; 0x38
   2468c:	18fb      	adds	r3, r7, r3
   2468e:	2200      	movs	r2, #0
   24690:	70da      	strb	r2, [r3, #3]
		len = 5;
   24692:	2305      	movs	r3, #5
   24694:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24696:	e0bd      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   24698:	2338      	movs	r3, #56	; 0x38
   2469a:	18fb      	adds	r3, r7, r3
   2469c:	2200      	movs	r2, #0
   2469e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   246a0:	2338      	movs	r3, #56	; 0x38
   246a2:	18fb      	adds	r3, r7, r3
   246a4:	2200      	movs	r2, #0
   246a6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   246a8:	2338      	movs	r3, #56	; 0x38
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	2200      	movs	r2, #0
   246ae:	70da      	strb	r2, [r3, #3]
		len = 5;
   246b0:	2305      	movs	r3, #5
   246b2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246b4:	e0ae      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   246b6:	2338      	movs	r3, #56	; 0x38
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	22ff      	movs	r2, #255	; 0xff
   246bc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   246be:	2338      	movs	r3, #56	; 0x38
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	22ff      	movs	r2, #255	; 0xff
   246c4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   246c6:	2338      	movs	r3, #56	; 0x38
   246c8:	18fb      	adds	r3, r7, r3
   246ca:	22ff      	movs	r2, #255	; 0xff
   246cc:	70da      	strb	r2, [r3, #3]
		len = 5;
   246ce:	2305      	movs	r3, #5
   246d0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246d2:	e09f      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   246d4:	68bb      	ldr	r3, [r7, #8]
   246d6:	0c1b      	lsrs	r3, r3, #16
   246d8:	b2da      	uxtb	r2, r3
   246da:	2338      	movs	r3, #56	; 0x38
   246dc:	18fb      	adds	r3, r7, r3
   246de:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   246e0:	68bb      	ldr	r3, [r7, #8]
   246e2:	0a1b      	lsrs	r3, r3, #8
   246e4:	b2da      	uxtb	r2, r3
   246e6:	2338      	movs	r3, #56	; 0x38
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   246ec:	68bb      	ldr	r3, [r7, #8]
   246ee:	b2da      	uxtb	r2, r3
   246f0:	2338      	movs	r3, #56	; 0x38
   246f2:	18fb      	adds	r3, r7, r3
   246f4:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   246f6:	683b      	ldr	r3, [r7, #0]
   246f8:	0a1b      	lsrs	r3, r3, #8
   246fa:	b2da      	uxtb	r2, r3
   246fc:	2338      	movs	r3, #56	; 0x38
   246fe:	18fb      	adds	r3, r7, r3
   24700:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24702:	683b      	ldr	r3, [r7, #0]
   24704:	b2da      	uxtb	r2, r3
   24706:	2338      	movs	r3, #56	; 0x38
   24708:	18fb      	adds	r3, r7, r3
   2470a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2470c:	2307      	movs	r3, #7
   2470e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24710:	e080      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24712:	68bb      	ldr	r3, [r7, #8]
   24714:	0c1b      	lsrs	r3, r3, #16
   24716:	b2da      	uxtb	r2, r3
   24718:	2338      	movs	r3, #56	; 0x38
   2471a:	18fb      	adds	r3, r7, r3
   2471c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2471e:	68bb      	ldr	r3, [r7, #8]
   24720:	0a1b      	lsrs	r3, r3, #8
   24722:	b2da      	uxtb	r2, r3
   24724:	2338      	movs	r3, #56	; 0x38
   24726:	18fb      	adds	r3, r7, r3
   24728:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2472a:	68bb      	ldr	r3, [r7, #8]
   2472c:	b2da      	uxtb	r2, r3
   2472e:	2338      	movs	r3, #56	; 0x38
   24730:	18fb      	adds	r3, r7, r3
   24732:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24734:	683b      	ldr	r3, [r7, #0]
   24736:	0c1b      	lsrs	r3, r3, #16
   24738:	b2da      	uxtb	r2, r3
   2473a:	2338      	movs	r3, #56	; 0x38
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24740:	683b      	ldr	r3, [r7, #0]
   24742:	0a1b      	lsrs	r3, r3, #8
   24744:	b2da      	uxtb	r2, r3
   24746:	2338      	movs	r3, #56	; 0x38
   24748:	18fb      	adds	r3, r7, r3
   2474a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2474c:	683b      	ldr	r3, [r7, #0]
   2474e:	b2da      	uxtb	r2, r3
   24750:	2338      	movs	r3, #56	; 0x38
   24752:	18fb      	adds	r3, r7, r3
   24754:	719a      	strb	r2, [r3, #6]
		len = 8;
   24756:	2308      	movs	r3, #8
   24758:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2475a:	e05b      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2475c:	68bb      	ldr	r3, [r7, #8]
   2475e:	0a1b      	lsrs	r3, r3, #8
   24760:	b2da      	uxtb	r2, r3
   24762:	2338      	movs	r3, #56	; 0x38
   24764:	18fb      	adds	r3, r7, r3
   24766:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24768:	2388      	movs	r3, #136	; 0x88
   2476a:	18fb      	adds	r3, r7, r3
   2476c:	781b      	ldrb	r3, [r3, #0]
   2476e:	2b01      	cmp	r3, #1
   24770:	d109      	bne.n	24786 <spi_cmd_complete+0x1b6>
   24772:	2338      	movs	r3, #56	; 0x38
   24774:	18fb      	adds	r3, r7, r3
   24776:	785b      	ldrb	r3, [r3, #1]
   24778:	2280      	movs	r2, #128	; 0x80
   2477a:	4252      	negs	r2, r2
   2477c:	4313      	orrs	r3, r2
   2477e:	b2da      	uxtb	r2, r3
   24780:	2338      	movs	r3, #56	; 0x38
   24782:	18fb      	adds	r3, r7, r3
   24784:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   24786:	68bb      	ldr	r3, [r7, #8]
   24788:	b2da      	uxtb	r2, r3
   2478a:	2338      	movs	r3, #56	; 0x38
   2478c:	18fb      	adds	r3, r7, r3
   2478e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24790:	687b      	ldr	r3, [r7, #4]
   24792:	78da      	ldrb	r2, [r3, #3]
   24794:	2338      	movs	r3, #56	; 0x38
   24796:	18fb      	adds	r3, r7, r3
   24798:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2479a:	687b      	ldr	r3, [r7, #4]
   2479c:	789a      	ldrb	r2, [r3, #2]
   2479e:	2338      	movs	r3, #56	; 0x38
   247a0:	18fb      	adds	r3, r7, r3
   247a2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   247a4:	687b      	ldr	r3, [r7, #4]
   247a6:	785a      	ldrb	r2, [r3, #1]
   247a8:	2338      	movs	r3, #56	; 0x38
   247aa:	18fb      	adds	r3, r7, r3
   247ac:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   247ae:	687b      	ldr	r3, [r7, #4]
   247b0:	781a      	ldrb	r2, [r3, #0]
   247b2:	2338      	movs	r3, #56	; 0x38
   247b4:	18fb      	adds	r3, r7, r3
   247b6:	719a      	strb	r2, [r3, #6]
		len = 8;
   247b8:	2308      	movs	r3, #8
   247ba:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   247bc:	e02a      	b.n	24814 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   247be:	68bb      	ldr	r3, [r7, #8]
   247c0:	0c1b      	lsrs	r3, r3, #16
   247c2:	b2da      	uxtb	r2, r3
   247c4:	2338      	movs	r3, #56	; 0x38
   247c6:	18fb      	adds	r3, r7, r3
   247c8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   247ca:	68bb      	ldr	r3, [r7, #8]
   247cc:	0a1b      	lsrs	r3, r3, #8
   247ce:	b2da      	uxtb	r2, r3
   247d0:	2338      	movs	r3, #56	; 0x38
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   247d6:	68bb      	ldr	r3, [r7, #8]
   247d8:	b2da      	uxtb	r2, r3
   247da:	2338      	movs	r3, #56	; 0x38
   247dc:	18fb      	adds	r3, r7, r3
   247de:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   247e0:	687b      	ldr	r3, [r7, #4]
   247e2:	78da      	ldrb	r2, [r3, #3]
   247e4:	2338      	movs	r3, #56	; 0x38
   247e6:	18fb      	adds	r3, r7, r3
   247e8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   247ea:	687b      	ldr	r3, [r7, #4]
   247ec:	789a      	ldrb	r2, [r3, #2]
   247ee:	2338      	movs	r3, #56	; 0x38
   247f0:	18fb      	adds	r3, r7, r3
   247f2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   247f4:	687b      	ldr	r3, [r7, #4]
   247f6:	785a      	ldrb	r2, [r3, #1]
   247f8:	2338      	movs	r3, #56	; 0x38
   247fa:	18fb      	adds	r3, r7, r3
   247fc:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   247fe:	687b      	ldr	r3, [r7, #4]
   24800:	781a      	ldrb	r2, [r3, #0]
   24802:	2338      	movs	r3, #56	; 0x38
   24804:	18fb      	adds	r3, r7, r3
   24806:	71da      	strb	r2, [r3, #7]
		len = 9;
   24808:	2309      	movs	r3, #9
   2480a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2480c:	e002      	b.n	24814 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2480e:	2300      	movs	r3, #0
   24810:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24812:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24816:	2b01      	cmp	r3, #1
   24818:	d001      	beq.n	2481e <spi_cmd_complete+0x24e>
		return result;
   2481a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2481c:	e33a      	b.n	24e94 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2481e:	4b4d      	ldr	r3, [pc, #308]	; (24954 <spi_cmd_complete+0x384>)
   24820:	781b      	ldrb	r3, [r3, #0]
   24822:	2b00      	cmp	r3, #0
   24824:	d111      	bne.n	2484a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   24826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24828:	1e5c      	subs	r4, r3, #1
   2482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2482c:	3b01      	subs	r3, #1
   2482e:	001a      	movs	r2, r3
   24830:	2338      	movs	r3, #56	; 0x38
   24832:	18fb      	adds	r3, r7, r3
   24834:	0019      	movs	r1, r3
   24836:	207f      	movs	r0, #127	; 0x7f
   24838:	4b47      	ldr	r3, [pc, #284]	; (24958 <spi_cmd_complete+0x388>)
   2483a:	4798      	blx	r3
   2483c:	0003      	movs	r3, r0
   2483e:	18db      	adds	r3, r3, r3
   24840:	b2da      	uxtb	r2, r3
   24842:	2338      	movs	r3, #56	; 0x38
   24844:	18fb      	adds	r3, r7, r3
   24846:	551a      	strb	r2, [r3, r4]
   24848:	e002      	b.n	24850 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2484c:	3b01      	subs	r3, #1
   2484e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24850:	230f      	movs	r3, #15
   24852:	18fb      	adds	r3, r7, r3
   24854:	781b      	ldrb	r3, [r3, #0]
   24856:	2bcf      	cmp	r3, #207	; 0xcf
   24858:	d009      	beq.n	2486e <spi_cmd_complete+0x29e>
   2485a:	230f      	movs	r3, #15
   2485c:	18fb      	adds	r3, r7, r3
   2485e:	781b      	ldrb	r3, [r3, #0]
   24860:	2bc5      	cmp	r3, #197	; 0xc5
   24862:	d004      	beq.n	2486e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24864:	230f      	movs	r3, #15
   24866:	18fb      	adds	r3, r7, r3
   24868:	781b      	ldrb	r3, [r3, #0]
   2486a:	2bc6      	cmp	r3, #198	; 0xc6
   2486c:	d103      	bne.n	24876 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24870:	3306      	adds	r3, #6
   24872:	673b      	str	r3, [r7, #112]	; 0x70
   24874:	e018      	b.n	248a8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24876:	230f      	movs	r3, #15
   24878:	18fb      	adds	r3, r7, r3
   2487a:	781b      	ldrb	r3, [r3, #0]
   2487c:	2bc4      	cmp	r3, #196	; 0xc4
   2487e:	d004      	beq.n	2488a <spi_cmd_complete+0x2ba>
   24880:	230f      	movs	r3, #15
   24882:	18fb      	adds	r3, r7, r3
   24884:	781b      	ldrb	r3, [r3, #0]
   24886:	2bca      	cmp	r3, #202	; 0xca
   24888:	d10b      	bne.n	248a2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2488a:	4b32      	ldr	r3, [pc, #200]	; (24954 <spi_cmd_complete+0x384>)
   2488c:	781b      	ldrb	r3, [r3, #0]
   2488e:	2b00      	cmp	r3, #0
   24890:	d103      	bne.n	2489a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24894:	330c      	adds	r3, #12
   24896:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24898:	e006      	b.n	248a8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2489c:	330a      	adds	r3, #10
   2489e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   248a0:	e002      	b.n	248a8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   248a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   248a4:	3305      	adds	r3, #5
   248a6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   248a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   248aa:	2b20      	cmp	r3, #32
   248ac:	d914      	bls.n	248d8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   248ae:	23f7      	movs	r3, #247	; 0xf7
   248b0:	005a      	lsls	r2, r3, #1
   248b2:	492a      	ldr	r1, [pc, #168]	; (2495c <spi_cmd_complete+0x38c>)
   248b4:	4b2a      	ldr	r3, [pc, #168]	; (24960 <spi_cmd_complete+0x390>)
   248b6:	0018      	movs	r0, r3
   248b8:	4b2a      	ldr	r3, [pc, #168]	; (24964 <spi_cmd_complete+0x394>)
   248ba:	4798      	blx	r3
   248bc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   248be:	4b2a      	ldr	r3, [pc, #168]	; (24968 <spi_cmd_complete+0x398>)
   248c0:	2220      	movs	r2, #32
   248c2:	0018      	movs	r0, r3
   248c4:	4b27      	ldr	r3, [pc, #156]	; (24964 <spi_cmd_complete+0x394>)
   248c6:	4798      	blx	r3
   248c8:	4b28      	ldr	r3, [pc, #160]	; (2496c <spi_cmd_complete+0x39c>)
   248ca:	0018      	movs	r0, r3
   248cc:	4b25      	ldr	r3, [pc, #148]	; (24964 <spi_cmd_complete+0x394>)
   248ce:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   248d0:	2300      	movs	r3, #0
   248d2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   248d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   248d6:	e2dd      	b.n	24e94 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   248d8:	2377      	movs	r3, #119	; 0x77
   248da:	18fb      	adds	r3, r7, r3
   248dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   248de:	701a      	strb	r2, [r3, #0]
   248e0:	e00d      	b.n	248fe <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   248e2:	2377      	movs	r3, #119	; 0x77
   248e4:	18fb      	adds	r3, r7, r3
   248e6:	781b      	ldrb	r3, [r3, #0]
   248e8:	2238      	movs	r2, #56	; 0x38
   248ea:	18ba      	adds	r2, r7, r2
   248ec:	2100      	movs	r1, #0
   248ee:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   248f0:	2377      	movs	r3, #119	; 0x77
   248f2:	18fb      	adds	r3, r7, r3
   248f4:	781a      	ldrb	r2, [r3, #0]
   248f6:	2377      	movs	r3, #119	; 0x77
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	3201      	adds	r2, #1
   248fc:	701a      	strb	r2, [r3, #0]
   248fe:	2377      	movs	r3, #119	; 0x77
   24900:	18fb      	adds	r3, r7, r3
   24902:	781a      	ldrb	r2, [r3, #0]
   24904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24906:	429a      	cmp	r2, r3
   24908:	d3eb      	bcc.n	248e2 <spi_cmd_complete+0x312>
	}
	rix = len;
   2490a:	2376      	movs	r3, #118	; 0x76
   2490c:	18fb      	adds	r3, r7, r3
   2490e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24910:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24914:	b29a      	uxth	r2, r3
   24916:	2318      	movs	r3, #24
   24918:	18f9      	adds	r1, r7, r3
   2491a:	2338      	movs	r3, #56	; 0x38
   2491c:	18fb      	adds	r3, r7, r3
   2491e:	0018      	movs	r0, r3
   24920:	4b13      	ldr	r3, [pc, #76]	; (24970 <spi_cmd_complete+0x3a0>)
   24922:	4798      	blx	r3
   24924:	1e03      	subs	r3, r0, #0
   24926:	d027      	beq.n	24978 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24928:	23fa      	movs	r3, #250	; 0xfa
   2492a:	33ff      	adds	r3, #255	; 0xff
   2492c:	001a      	movs	r2, r3
   2492e:	490b      	ldr	r1, [pc, #44]	; (2495c <spi_cmd_complete+0x38c>)
   24930:	4b0b      	ldr	r3, [pc, #44]	; (24960 <spi_cmd_complete+0x390>)
   24932:	0018      	movs	r0, r3
   24934:	4b0b      	ldr	r3, [pc, #44]	; (24964 <spi_cmd_complete+0x394>)
   24936:	4798      	blx	r3
   24938:	4b0e      	ldr	r3, [pc, #56]	; (24974 <spi_cmd_complete+0x3a4>)
   2493a:	0018      	movs	r0, r3
   2493c:	4b09      	ldr	r3, [pc, #36]	; (24964 <spi_cmd_complete+0x394>)
   2493e:	4798      	blx	r3
   24940:	4b0a      	ldr	r3, [pc, #40]	; (2496c <spi_cmd_complete+0x39c>)
   24942:	0018      	movs	r0, r3
   24944:	4b07      	ldr	r3, [pc, #28]	; (24964 <spi_cmd_complete+0x394>)
   24946:	4798      	blx	r3
		result = N_FAIL;
   24948:	2300      	movs	r3, #0
   2494a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2494c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2494e:	e2a1      	b.n	24e94 <spi_cmd_complete+0x8c4>
   24950:	0003a3c8 	.word	0x0003a3c8
   24954:	200042b4 	.word	0x200042b4
   24958:	00024005 	.word	0x00024005
   2495c:	0003a428 	.word	0x0003a428
   24960:	00039e14 	.word	0x00039e14
   24964:	0001ea59 	.word	0x0001ea59
   24968:	00039edc 	.word	0x00039edc
   2496c:	00039e54 	.word	0x00039e54
   24970:	00023f91 	.word	0x00023f91
   24974:	00039e28 	.word	0x00039e28
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24978:	230f      	movs	r3, #15
   2497a:	18fb      	adds	r3, r7, r3
   2497c:	781b      	ldrb	r3, [r3, #0]
   2497e:	2bcf      	cmp	r3, #207	; 0xcf
   24980:	d009      	beq.n	24996 <spi_cmd_complete+0x3c6>
   24982:	230f      	movs	r3, #15
   24984:	18fb      	adds	r3, r7, r3
   24986:	781b      	ldrb	r3, [r3, #0]
   24988:	2bc5      	cmp	r3, #197	; 0xc5
   2498a:	d004      	beq.n	24996 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   2498c:	230f      	movs	r3, #15
   2498e:	18fb      	adds	r3, r7, r3
   24990:	781b      	ldrb	r3, [r3, #0]
   24992:	2bc6      	cmp	r3, #198	; 0xc6
   24994:	d106      	bne.n	249a4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24996:	2376      	movs	r3, #118	; 0x76
   24998:	18fb      	adds	r3, r7, r3
   2499a:	781a      	ldrb	r2, [r3, #0]
   2499c:	2376      	movs	r3, #118	; 0x76
   2499e:	18fb      	adds	r3, r7, r3
   249a0:	3201      	adds	r2, #1
   249a2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   249a4:	2376      	movs	r3, #118	; 0x76
   249a6:	18fb      	adds	r3, r7, r3
   249a8:	781b      	ldrb	r3, [r3, #0]
   249aa:	2276      	movs	r2, #118	; 0x76
   249ac:	18ba      	adds	r2, r7, r2
   249ae:	1c59      	adds	r1, r3, #1
   249b0:	7011      	strb	r1, [r2, #0]
   249b2:	001a      	movs	r2, r3
   249b4:	2318      	movs	r3, #24
   249b6:	18fb      	adds	r3, r7, r3
   249b8:	5c9a      	ldrb	r2, [r3, r2]
   249ba:	2317      	movs	r3, #23
   249bc:	18fb      	adds	r3, r7, r3
   249be:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   249c0:	2317      	movs	r3, #23
   249c2:	18fb      	adds	r3, r7, r3
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	220f      	movs	r2, #15
   249c8:	18ba      	adds	r2, r7, r2
   249ca:	7812      	ldrb	r2, [r2, #0]
   249cc:	429a      	cmp	r2, r3
   249ce:	d018      	beq.n	24a02 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   249d0:	4add      	ldr	r2, [pc, #884]	; (24d48 <spi_cmd_complete+0x778>)
   249d2:	49de      	ldr	r1, [pc, #888]	; (24d4c <spi_cmd_complete+0x77c>)
   249d4:	4bde      	ldr	r3, [pc, #888]	; (24d50 <spi_cmd_complete+0x780>)
   249d6:	0018      	movs	r0, r3
   249d8:	4bde      	ldr	r3, [pc, #888]	; (24d54 <spi_cmd_complete+0x784>)
   249da:	4798      	blx	r3
   249dc:	230f      	movs	r3, #15
   249de:	18fb      	adds	r3, r7, r3
   249e0:	7819      	ldrb	r1, [r3, #0]
   249e2:	2317      	movs	r3, #23
   249e4:	18fb      	adds	r3, r7, r3
   249e6:	781b      	ldrb	r3, [r3, #0]
   249e8:	001a      	movs	r2, r3
   249ea:	4bdb      	ldr	r3, [pc, #876]	; (24d58 <spi_cmd_complete+0x788>)
   249ec:	0018      	movs	r0, r3
   249ee:	4bd9      	ldr	r3, [pc, #868]	; (24d54 <spi_cmd_complete+0x784>)
   249f0:	4798      	blx	r3
   249f2:	4bda      	ldr	r3, [pc, #872]	; (24d5c <spi_cmd_complete+0x78c>)
   249f4:	0018      	movs	r0, r3
   249f6:	4bd7      	ldr	r3, [pc, #860]	; (24d54 <spi_cmd_complete+0x784>)
   249f8:	4798      	blx	r3
		result = N_FAIL;
   249fa:	2300      	movs	r3, #0
   249fc:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   249fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a00:	e248      	b.n	24e94 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24a02:	2376      	movs	r3, #118	; 0x76
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	781b      	ldrb	r3, [r3, #0]
   24a08:	2276      	movs	r2, #118	; 0x76
   24a0a:	18ba      	adds	r2, r7, r2
   24a0c:	1c59      	adds	r1, r3, #1
   24a0e:	7011      	strb	r1, [r2, #0]
   24a10:	001a      	movs	r2, r3
   24a12:	2318      	movs	r3, #24
   24a14:	18fb      	adds	r3, r7, r3
   24a16:	5c9a      	ldrb	r2, [r3, r2]
   24a18:	2317      	movs	r3, #23
   24a1a:	18fb      	adds	r3, r7, r3
   24a1c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24a1e:	2317      	movs	r3, #23
   24a20:	18fb      	adds	r3, r7, r3
   24a22:	781b      	ldrb	r3, [r3, #0]
   24a24:	2b00      	cmp	r3, #0
   24a26:	d016      	beq.n	24a56 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24a28:	4acd      	ldr	r2, [pc, #820]	; (24d60 <spi_cmd_complete+0x790>)
   24a2a:	49c8      	ldr	r1, [pc, #800]	; (24d4c <spi_cmd_complete+0x77c>)
   24a2c:	4bc8      	ldr	r3, [pc, #800]	; (24d50 <spi_cmd_complete+0x780>)
   24a2e:	0018      	movs	r0, r3
   24a30:	4bc8      	ldr	r3, [pc, #800]	; (24d54 <spi_cmd_complete+0x784>)
   24a32:	4798      	blx	r3
   24a34:	2317      	movs	r3, #23
   24a36:	18fb      	adds	r3, r7, r3
   24a38:	781b      	ldrb	r3, [r3, #0]
   24a3a:	001a      	movs	r2, r3
   24a3c:	4bc9      	ldr	r3, [pc, #804]	; (24d64 <spi_cmd_complete+0x794>)
   24a3e:	0011      	movs	r1, r2
   24a40:	0018      	movs	r0, r3
   24a42:	4bc4      	ldr	r3, [pc, #784]	; (24d54 <spi_cmd_complete+0x784>)
   24a44:	4798      	blx	r3
   24a46:	4bc5      	ldr	r3, [pc, #788]	; (24d5c <spi_cmd_complete+0x78c>)
   24a48:	0018      	movs	r0, r3
   24a4a:	4bc2      	ldr	r3, [pc, #776]	; (24d54 <spi_cmd_complete+0x784>)
   24a4c:	4798      	blx	r3
		result = N_FAIL;
   24a4e:	2300      	movs	r3, #0
   24a50:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a54:	e21e      	b.n	24e94 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24a56:	230f      	movs	r3, #15
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	781b      	ldrb	r3, [r3, #0]
   24a5c:	2bc4      	cmp	r3, #196	; 0xc4
   24a5e:	d00f      	beq.n	24a80 <spi_cmd_complete+0x4b0>
   24a60:	230f      	movs	r3, #15
   24a62:	18fb      	adds	r3, r7, r3
   24a64:	781b      	ldrb	r3, [r3, #0]
   24a66:	2bca      	cmp	r3, #202	; 0xca
   24a68:	d00a      	beq.n	24a80 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24a6a:	230f      	movs	r3, #15
   24a6c:	18fb      	adds	r3, r7, r3
   24a6e:	781b      	ldrb	r3, [r3, #0]
   24a70:	2bc2      	cmp	r3, #194	; 0xc2
   24a72:	d005      	beq.n	24a80 <spi_cmd_complete+0x4b0>
   24a74:	230f      	movs	r3, #15
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	2bc8      	cmp	r3, #200	; 0xc8
   24a7c:	d000      	beq.n	24a80 <spi_cmd_complete+0x4b0>
   24a7e:	e208      	b.n	24e92 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24a80:	230a      	movs	r3, #10
   24a82:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24a84:	2376      	movs	r3, #118	; 0x76
   24a86:	18fb      	adds	r3, r7, r3
   24a88:	781a      	ldrb	r2, [r3, #0]
   24a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a8c:	429a      	cmp	r2, r3
   24a8e:	d218      	bcs.n	24ac2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24a90:	2376      	movs	r3, #118	; 0x76
   24a92:	18fb      	adds	r3, r7, r3
   24a94:	781b      	ldrb	r3, [r3, #0]
   24a96:	2276      	movs	r2, #118	; 0x76
   24a98:	18ba      	adds	r2, r7, r2
   24a9a:	1c59      	adds	r1, r3, #1
   24a9c:	7011      	strb	r1, [r2, #0]
   24a9e:	001a      	movs	r2, r3
   24aa0:	2318      	movs	r3, #24
   24aa2:	18fb      	adds	r3, r7, r3
   24aa4:	5c9a      	ldrb	r2, [r3, r2]
   24aa6:	2317      	movs	r3, #23
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24aac:	2317      	movs	r3, #23
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	781b      	ldrb	r3, [r3, #0]
   24ab2:	091b      	lsrs	r3, r3, #4
   24ab4:	b2db      	uxtb	r3, r3
   24ab6:	001a      	movs	r2, r3
   24ab8:	230f      	movs	r3, #15
   24aba:	4013      	ands	r3, r2
   24abc:	2b0f      	cmp	r3, #15
   24abe:	d103      	bne.n	24ac8 <spi_cmd_complete+0x4f8>
					break;
   24ac0:	e007      	b.n	24ad2 <spi_cmd_complete+0x502>
					retry = 0;
   24ac2:	2300      	movs	r3, #0
   24ac4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24ac6:	e004      	b.n	24ad2 <spi_cmd_complete+0x502>
			} while (retry--);
   24ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24aca:	1e5a      	subs	r2, r3, #1
   24acc:	667a      	str	r2, [r7, #100]	; 0x64
   24ace:	2b00      	cmp	r3, #0
   24ad0:	d1d8      	bne.n	24a84 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24ad4:	2b00      	cmp	r3, #0
   24ad6:	dc18      	bgt.n	24b0a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24ad8:	2395      	movs	r3, #149	; 0x95
   24ada:	009a      	lsls	r2, r3, #2
   24adc:	499b      	ldr	r1, [pc, #620]	; (24d4c <spi_cmd_complete+0x77c>)
   24ade:	4b9c      	ldr	r3, [pc, #624]	; (24d50 <spi_cmd_complete+0x780>)
   24ae0:	0018      	movs	r0, r3
   24ae2:	4b9c      	ldr	r3, [pc, #624]	; (24d54 <spi_cmd_complete+0x784>)
   24ae4:	4798      	blx	r3
   24ae6:	2317      	movs	r3, #23
   24ae8:	18fb      	adds	r3, r7, r3
   24aea:	781b      	ldrb	r3, [r3, #0]
   24aec:	001a      	movs	r2, r3
   24aee:	4b9e      	ldr	r3, [pc, #632]	; (24d68 <spi_cmd_complete+0x798>)
   24af0:	0011      	movs	r1, r2
   24af2:	0018      	movs	r0, r3
   24af4:	4b97      	ldr	r3, [pc, #604]	; (24d54 <spi_cmd_complete+0x784>)
   24af6:	4798      	blx	r3
   24af8:	4b98      	ldr	r3, [pc, #608]	; (24d5c <spi_cmd_complete+0x78c>)
   24afa:	0018      	movs	r0, r3
   24afc:	4b95      	ldr	r3, [pc, #596]	; (24d54 <spi_cmd_complete+0x784>)
   24afe:	4798      	blx	r3
				result = N_RESET;
   24b00:	2301      	movs	r3, #1
   24b02:	425b      	negs	r3, r3
   24b04:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b08:	e1c4      	b.n	24e94 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24b0a:	230f      	movs	r3, #15
   24b0c:	18fb      	adds	r3, r7, r3
   24b0e:	781b      	ldrb	r3, [r3, #0]
   24b10:	2bc4      	cmp	r3, #196	; 0xc4
   24b12:	d005      	beq.n	24b20 <spi_cmd_complete+0x550>
   24b14:	230f      	movs	r3, #15
   24b16:	18fb      	adds	r3, r7, r3
   24b18:	781b      	ldrb	r3, [r3, #0]
   24b1a:	2bca      	cmp	r3, #202	; 0xca
   24b1c:	d000      	beq.n	24b20 <spi_cmd_complete+0x550>
   24b1e:	e08e      	b.n	24c3e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24b20:	2376      	movs	r3, #118	; 0x76
   24b22:	18fb      	adds	r3, r7, r3
   24b24:	781b      	ldrb	r3, [r3, #0]
   24b26:	3303      	adds	r3, #3
   24b28:	001a      	movs	r2, r3
   24b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b2c:	429a      	cmp	r2, r3
   24b2e:	d23c      	bcs.n	24baa <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24b30:	2376      	movs	r3, #118	; 0x76
   24b32:	18fb      	adds	r3, r7, r3
   24b34:	781b      	ldrb	r3, [r3, #0]
   24b36:	2276      	movs	r2, #118	; 0x76
   24b38:	18ba      	adds	r2, r7, r2
   24b3a:	1c59      	adds	r1, r3, #1
   24b3c:	7011      	strb	r1, [r2, #0]
   24b3e:	001a      	movs	r2, r3
   24b40:	2318      	movs	r3, #24
   24b42:	18fb      	adds	r3, r7, r3
   24b44:	5c9a      	ldrb	r2, [r3, r2]
   24b46:	687b      	ldr	r3, [r7, #4]
   24b48:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24b4a:	687b      	ldr	r3, [r7, #4]
   24b4c:	1c5a      	adds	r2, r3, #1
   24b4e:	2376      	movs	r3, #118	; 0x76
   24b50:	18fb      	adds	r3, r7, r3
   24b52:	781b      	ldrb	r3, [r3, #0]
   24b54:	2176      	movs	r1, #118	; 0x76
   24b56:	1879      	adds	r1, r7, r1
   24b58:	1c58      	adds	r0, r3, #1
   24b5a:	7008      	strb	r0, [r1, #0]
   24b5c:	0019      	movs	r1, r3
   24b5e:	2318      	movs	r3, #24
   24b60:	18fb      	adds	r3, r7, r3
   24b62:	5c5b      	ldrb	r3, [r3, r1]
   24b64:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24b66:	687b      	ldr	r3, [r7, #4]
   24b68:	1c9a      	adds	r2, r3, #2
   24b6a:	2376      	movs	r3, #118	; 0x76
   24b6c:	18fb      	adds	r3, r7, r3
   24b6e:	781b      	ldrb	r3, [r3, #0]
   24b70:	2176      	movs	r1, #118	; 0x76
   24b72:	1879      	adds	r1, r7, r1
   24b74:	1c58      	adds	r0, r3, #1
   24b76:	7008      	strb	r0, [r1, #0]
   24b78:	0019      	movs	r1, r3
   24b7a:	2318      	movs	r3, #24
   24b7c:	18fb      	adds	r3, r7, r3
   24b7e:	5c5b      	ldrb	r3, [r3, r1]
   24b80:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24b82:	687b      	ldr	r3, [r7, #4]
   24b84:	1cda      	adds	r2, r3, #3
   24b86:	2376      	movs	r3, #118	; 0x76
   24b88:	18fb      	adds	r3, r7, r3
   24b8a:	781b      	ldrb	r3, [r3, #0]
   24b8c:	2176      	movs	r1, #118	; 0x76
   24b8e:	1879      	adds	r1, r7, r1
   24b90:	1c58      	adds	r0, r3, #1
   24b92:	7008      	strb	r0, [r1, #0]
   24b94:	0019      	movs	r1, r3
   24b96:	2318      	movs	r3, #24
   24b98:	18fb      	adds	r3, r7, r3
   24b9a:	5c5b      	ldrb	r3, [r3, r1]
   24b9c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24b9e:	4b73      	ldr	r3, [pc, #460]	; (24d6c <spi_cmd_complete+0x79c>)
   24ba0:	781b      	ldrb	r3, [r3, #0]
   24ba2:	2b00      	cmp	r3, #0
   24ba4:	d000      	beq.n	24ba8 <spi_cmd_complete+0x5d8>
   24ba6:	e174      	b.n	24e92 <spi_cmd_complete+0x8c2>
   24ba8:	e011      	b.n	24bce <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24baa:	4a71      	ldr	r2, [pc, #452]	; (24d70 <spi_cmd_complete+0x7a0>)
   24bac:	4967      	ldr	r1, [pc, #412]	; (24d4c <spi_cmd_complete+0x77c>)
   24bae:	4b68      	ldr	r3, [pc, #416]	; (24d50 <spi_cmd_complete+0x780>)
   24bb0:	0018      	movs	r0, r3
   24bb2:	4b68      	ldr	r3, [pc, #416]	; (24d54 <spi_cmd_complete+0x784>)
   24bb4:	4798      	blx	r3
   24bb6:	4b6f      	ldr	r3, [pc, #444]	; (24d74 <spi_cmd_complete+0x7a4>)
   24bb8:	0018      	movs	r0, r3
   24bba:	4b66      	ldr	r3, [pc, #408]	; (24d54 <spi_cmd_complete+0x784>)
   24bbc:	4798      	blx	r3
   24bbe:	4b67      	ldr	r3, [pc, #412]	; (24d5c <spi_cmd_complete+0x78c>)
   24bc0:	0018      	movs	r0, r3
   24bc2:	4b64      	ldr	r3, [pc, #400]	; (24d54 <spi_cmd_complete+0x784>)
   24bc4:	4798      	blx	r3
					result = N_FAIL;
   24bc6:	2300      	movs	r3, #0
   24bc8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bcc:	e162      	b.n	24e94 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24bce:	2376      	movs	r3, #118	; 0x76
   24bd0:	18fb      	adds	r3, r7, r3
   24bd2:	781b      	ldrb	r3, [r3, #0]
   24bd4:	3301      	adds	r3, #1
   24bd6:	001a      	movs	r2, r3
   24bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24bda:	429a      	cmp	r2, r3
   24bdc:	d21c      	bcs.n	24c18 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24bde:	2376      	movs	r3, #118	; 0x76
   24be0:	18fb      	adds	r3, r7, r3
   24be2:	781b      	ldrb	r3, [r3, #0]
   24be4:	2276      	movs	r2, #118	; 0x76
   24be6:	18ba      	adds	r2, r7, r2
   24be8:	1c59      	adds	r1, r3, #1
   24bea:	7011      	strb	r1, [r2, #0]
   24bec:	001a      	movs	r2, r3
   24bee:	2318      	movs	r3, #24
   24bf0:	18fb      	adds	r3, r7, r3
   24bf2:	5c9a      	ldrb	r2, [r3, r2]
   24bf4:	2314      	movs	r3, #20
   24bf6:	18fb      	adds	r3, r7, r3
   24bf8:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24bfa:	2376      	movs	r3, #118	; 0x76
   24bfc:	18fb      	adds	r3, r7, r3
   24bfe:	781b      	ldrb	r3, [r3, #0]
   24c00:	2276      	movs	r2, #118	; 0x76
   24c02:	18ba      	adds	r2, r7, r2
   24c04:	1c59      	adds	r1, r3, #1
   24c06:	7011      	strb	r1, [r2, #0]
   24c08:	001a      	movs	r2, r3
   24c0a:	2318      	movs	r3, #24
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	5c9a      	ldrb	r2, [r3, r2]
   24c10:	2314      	movs	r3, #20
   24c12:	18fb      	adds	r3, r7, r3
   24c14:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24c16:	e13c      	b.n	24e92 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24c18:	239c      	movs	r3, #156	; 0x9c
   24c1a:	009a      	lsls	r2, r3, #2
   24c1c:	494b      	ldr	r1, [pc, #300]	; (24d4c <spi_cmd_complete+0x77c>)
   24c1e:	4b4c      	ldr	r3, [pc, #304]	; (24d50 <spi_cmd_complete+0x780>)
   24c20:	0018      	movs	r0, r3
   24c22:	4b4c      	ldr	r3, [pc, #304]	; (24d54 <spi_cmd_complete+0x784>)
   24c24:	4798      	blx	r3
   24c26:	4b54      	ldr	r3, [pc, #336]	; (24d78 <spi_cmd_complete+0x7a8>)
   24c28:	0018      	movs	r0, r3
   24c2a:	4b4a      	ldr	r3, [pc, #296]	; (24d54 <spi_cmd_complete+0x784>)
   24c2c:	4798      	blx	r3
   24c2e:	4b4b      	ldr	r3, [pc, #300]	; (24d5c <spi_cmd_complete+0x78c>)
   24c30:	0018      	movs	r0, r3
   24c32:	4b48      	ldr	r3, [pc, #288]	; (24d54 <spi_cmd_complete+0x784>)
   24c34:	4798      	blx	r3
						result = N_FAIL;
   24c36:	2300      	movs	r3, #0
   24c38:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c3c:	e12a      	b.n	24e94 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24c3e:	230f      	movs	r3, #15
   24c40:	18fb      	adds	r3, r7, r3
   24c42:	781b      	ldrb	r3, [r3, #0]
   24c44:	2bc2      	cmp	r3, #194	; 0xc2
   24c46:	d005      	beq.n	24c54 <spi_cmd_complete+0x684>
   24c48:	230f      	movs	r3, #15
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	781b      	ldrb	r3, [r3, #0]
   24c4e:	2bc8      	cmp	r3, #200	; 0xc8
   24c50:	d000      	beq.n	24c54 <spi_cmd_complete+0x684>
   24c52:	e11e      	b.n	24e92 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24c54:	2300      	movs	r3, #0
   24c56:	663b      	str	r3, [r7, #96]	; 0x60
   24c58:	e011      	b.n	24c7e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c5c:	1c5a      	adds	r2, r3, #1
   24c5e:	663a      	str	r2, [r7, #96]	; 0x60
   24c60:	001a      	movs	r2, r3
   24c62:	687b      	ldr	r3, [r7, #4]
   24c64:	189a      	adds	r2, r3, r2
   24c66:	2376      	movs	r3, #118	; 0x76
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	781b      	ldrb	r3, [r3, #0]
   24c6c:	2176      	movs	r1, #118	; 0x76
   24c6e:	1879      	adds	r1, r7, r1
   24c70:	1c58      	adds	r0, r3, #1
   24c72:	7008      	strb	r0, [r1, #0]
   24c74:	0019      	movs	r1, r3
   24c76:	2318      	movs	r3, #24
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	5c5b      	ldrb	r3, [r3, r1]
   24c7c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24c7e:	2376      	movs	r3, #118	; 0x76
   24c80:	18fb      	adds	r3, r7, r3
   24c82:	781a      	ldrb	r2, [r3, #0]
   24c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c86:	429a      	cmp	r2, r3
   24c88:	d203      	bcs.n	24c92 <spi_cmd_complete+0x6c2>
   24c8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24c8c:	683b      	ldr	r3, [r7, #0]
   24c8e:	429a      	cmp	r2, r3
   24c90:	d3e3      	bcc.n	24c5a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c94:	683a      	ldr	r2, [r7, #0]
   24c96:	1ad3      	subs	r3, r2, r3
   24c98:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24c9a:	683b      	ldr	r3, [r7, #0]
   24c9c:	2b00      	cmp	r3, #0
   24c9e:	d100      	bne.n	24ca2 <spi_cmd_complete+0x6d2>
   24ca0:	e0f1      	b.n	24e86 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24ca4:	2280      	movs	r2, #128	; 0x80
   24ca6:	0192      	lsls	r2, r2, #6
   24ca8:	1ad3      	subs	r3, r2, r3
   24caa:	001a      	movs	r2, r3
   24cac:	683b      	ldr	r3, [r7, #0]
   24cae:	429a      	cmp	r2, r3
   24cb0:	d302      	bcc.n	24cb8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24cb2:	683b      	ldr	r3, [r7, #0]
   24cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   24cb6:	e004      	b.n	24cc2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cba:	2280      	movs	r2, #128	; 0x80
   24cbc:	0192      	lsls	r2, r2, #6
   24cbe:	1ad3      	subs	r3, r2, r3
   24cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cc4:	687a      	ldr	r2, [r7, #4]
   24cc6:	18d3      	adds	r3, r2, r3
   24cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24cca:	b292      	uxth	r2, r2
   24ccc:	0011      	movs	r1, r2
   24cce:	0018      	movs	r0, r3
   24cd0:	4b2a      	ldr	r3, [pc, #168]	; (24d7c <spi_cmd_complete+0x7ac>)
   24cd2:	4798      	blx	r3
   24cd4:	1e03      	subs	r3, r0, #0
   24cd6:	d010      	beq.n	24cfa <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24cd8:	4a29      	ldr	r2, [pc, #164]	; (24d80 <spi_cmd_complete+0x7b0>)
   24cda:	491c      	ldr	r1, [pc, #112]	; (24d4c <spi_cmd_complete+0x77c>)
   24cdc:	4b1c      	ldr	r3, [pc, #112]	; (24d50 <spi_cmd_complete+0x780>)
   24cde:	0018      	movs	r0, r3
   24ce0:	4b1c      	ldr	r3, [pc, #112]	; (24d54 <spi_cmd_complete+0x784>)
   24ce2:	4798      	blx	r3
   24ce4:	4b27      	ldr	r3, [pc, #156]	; (24d84 <spi_cmd_complete+0x7b4>)
   24ce6:	0018      	movs	r0, r3
   24ce8:	4b1a      	ldr	r3, [pc, #104]	; (24d54 <spi_cmd_complete+0x784>)
   24cea:	4798      	blx	r3
   24cec:	4b1b      	ldr	r3, [pc, #108]	; (24d5c <spi_cmd_complete+0x78c>)
   24cee:	0018      	movs	r0, r3
   24cf0:	4b18      	ldr	r3, [pc, #96]	; (24d54 <spi_cmd_complete+0x784>)
   24cf2:	4798      	blx	r3
						result = N_FAIL;
   24cf4:	2300      	movs	r3, #0
   24cf6:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24cf8:	e0cb      	b.n	24e92 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24cfa:	4b1c      	ldr	r3, [pc, #112]	; (24d6c <spi_cmd_complete+0x79c>)
   24cfc:	781b      	ldrb	r3, [r3, #0]
   24cfe:	2b00      	cmp	r3, #0
   24d00:	d119      	bne.n	24d36 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24d02:	2314      	movs	r3, #20
   24d04:	18fb      	adds	r3, r7, r3
   24d06:	2102      	movs	r1, #2
   24d08:	0018      	movs	r0, r3
   24d0a:	4b1c      	ldr	r3, [pc, #112]	; (24d7c <spi_cmd_complete+0x7ac>)
   24d0c:	4798      	blx	r3
   24d0e:	1e03      	subs	r3, r0, #0
   24d10:	d011      	beq.n	24d36 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24d12:	23a6      	movs	r3, #166	; 0xa6
   24d14:	009a      	lsls	r2, r3, #2
   24d16:	490d      	ldr	r1, [pc, #52]	; (24d4c <spi_cmd_complete+0x77c>)
   24d18:	4b0d      	ldr	r3, [pc, #52]	; (24d50 <spi_cmd_complete+0x780>)
   24d1a:	0018      	movs	r0, r3
   24d1c:	4b0d      	ldr	r3, [pc, #52]	; (24d54 <spi_cmd_complete+0x784>)
   24d1e:	4798      	blx	r3
   24d20:	4b19      	ldr	r3, [pc, #100]	; (24d88 <spi_cmd_complete+0x7b8>)
   24d22:	0018      	movs	r0, r3
   24d24:	4b0b      	ldr	r3, [pc, #44]	; (24d54 <spi_cmd_complete+0x784>)
   24d26:	4798      	blx	r3
   24d28:	4b0c      	ldr	r3, [pc, #48]	; (24d5c <spi_cmd_complete+0x78c>)
   24d2a:	0018      	movs	r0, r3
   24d2c:	4b09      	ldr	r3, [pc, #36]	; (24d54 <spi_cmd_complete+0x784>)
   24d2e:	4798      	blx	r3
							result = N_FAIL;
   24d30:	2300      	movs	r3, #0
   24d32:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24d34:	e0ad      	b.n	24e92 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24d36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24d3a:	18d3      	adds	r3, r2, r3
   24d3c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24d40:	683a      	ldr	r2, [r7, #0]
   24d42:	1ad3      	subs	r3, r2, r3
   24d44:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24d46:	e09e      	b.n	24e86 <spi_cmd_complete+0x8b6>
   24d48:	0000022f 	.word	0x0000022f
   24d4c:	0003a428 	.word	0x0003a428
   24d50:	00039e14 	.word	0x00039e14
   24d54:	0001ea59 	.word	0x0001ea59
   24d58:	00039f0c 	.word	0x00039f0c
   24d5c:	00039e54 	.word	0x00039e54
   24d60:	00000239 	.word	0x00000239
   24d64:	00039f48 	.word	0x00039f48
   24d68:	00039f7c 	.word	0x00039f7c
   24d6c:	200042b4 	.word	0x200042b4
   24d70:	00000263 	.word	0x00000263
   24d74:	00039fac 	.word	0x00039fac
   24d78:	00039fdc 	.word	0x00039fdc
   24d7c:	00023f09 	.word	0x00023f09
   24d80:	0000028e 	.word	0x0000028e
   24d84:	0003a00c 	.word	0x0003a00c
   24d88:	0003a040 	.word	0x0003a040
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24d8c:	683a      	ldr	r2, [r7, #0]
   24d8e:	2380      	movs	r3, #128	; 0x80
   24d90:	019b      	lsls	r3, r3, #6
   24d92:	429a      	cmp	r2, r3
   24d94:	d802      	bhi.n	24d9c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24d96:	683b      	ldr	r3, [r7, #0]
   24d98:	65bb      	str	r3, [r7, #88]	; 0x58
   24d9a:	e002      	b.n	24da2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24d9c:	2380      	movs	r3, #128	; 0x80
   24d9e:	019b      	lsls	r3, r3, #6
   24da0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24da2:	230a      	movs	r3, #10
   24da4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24da6:	2317      	movs	r3, #23
   24da8:	18fb      	adds	r3, r7, r3
   24daa:	2101      	movs	r1, #1
   24dac:	0018      	movs	r0, r3
   24dae:	4b3b      	ldr	r3, [pc, #236]	; (24e9c <spi_cmd_complete+0x8cc>)
   24db0:	4798      	blx	r3
   24db2:	1e03      	subs	r3, r0, #0
   24db4:	d011      	beq.n	24dda <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24db6:	23ae      	movs	r3, #174	; 0xae
   24db8:	009a      	lsls	r2, r3, #2
   24dba:	4939      	ldr	r1, [pc, #228]	; (24ea0 <spi_cmd_complete+0x8d0>)
   24dbc:	4b39      	ldr	r3, [pc, #228]	; (24ea4 <spi_cmd_complete+0x8d4>)
   24dbe:	0018      	movs	r0, r3
   24dc0:	4b39      	ldr	r3, [pc, #228]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24dc2:	4798      	blx	r3
   24dc4:	4b39      	ldr	r3, [pc, #228]	; (24eac <spi_cmd_complete+0x8dc>)
   24dc6:	0018      	movs	r0, r3
   24dc8:	4b37      	ldr	r3, [pc, #220]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24dca:	4798      	blx	r3
   24dcc:	4b38      	ldr	r3, [pc, #224]	; (24eb0 <spi_cmd_complete+0x8e0>)
   24dce:	0018      	movs	r0, r3
   24dd0:	4b35      	ldr	r3, [pc, #212]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24dd2:	4798      	blx	r3
							result = N_FAIL;
   24dd4:	2300      	movs	r3, #0
   24dd6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24dd8:	e010      	b.n	24dfc <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24dda:	2317      	movs	r3, #23
   24ddc:	18fb      	adds	r3, r7, r3
   24dde:	781b      	ldrb	r3, [r3, #0]
   24de0:	091b      	lsrs	r3, r3, #4
   24de2:	b2db      	uxtb	r3, r3
   24de4:	001a      	movs	r2, r3
   24de6:	230f      	movs	r3, #15
   24de8:	4013      	ands	r3, r2
   24dea:	2b0f      	cmp	r3, #15
   24dec:	d005      	beq.n	24dfa <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24df0:	1e5a      	subs	r2, r3, #1
   24df2:	667a      	str	r2, [r7, #100]	; 0x64
   24df4:	2b00      	cmp	r3, #0
   24df6:	d1d6      	bne.n	24da6 <spi_cmd_complete+0x7d6>
   24df8:	e000      	b.n	24dfc <spi_cmd_complete+0x82c>
							break;
   24dfa:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24dfe:	2b00      	cmp	r3, #0
   24e00:	d046      	beq.n	24e90 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e04:	687a      	ldr	r2, [r7, #4]
   24e06:	18d3      	adds	r3, r2, r3
   24e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24e0a:	b292      	uxth	r2, r2
   24e0c:	0011      	movs	r1, r2
   24e0e:	0018      	movs	r0, r3
   24e10:	4b22      	ldr	r3, [pc, #136]	; (24e9c <spi_cmd_complete+0x8cc>)
   24e12:	4798      	blx	r3
   24e14:	1e03      	subs	r3, r0, #0
   24e16:	d011      	beq.n	24e3c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24e18:	23b2      	movs	r3, #178	; 0xb2
   24e1a:	009a      	lsls	r2, r3, #2
   24e1c:	4920      	ldr	r1, [pc, #128]	; (24ea0 <spi_cmd_complete+0x8d0>)
   24e1e:	4b21      	ldr	r3, [pc, #132]	; (24ea4 <spi_cmd_complete+0x8d4>)
   24e20:	0018      	movs	r0, r3
   24e22:	4b21      	ldr	r3, [pc, #132]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e24:	4798      	blx	r3
   24e26:	4b23      	ldr	r3, [pc, #140]	; (24eb4 <spi_cmd_complete+0x8e4>)
   24e28:	0018      	movs	r0, r3
   24e2a:	4b1f      	ldr	r3, [pc, #124]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e2c:	4798      	blx	r3
   24e2e:	4b20      	ldr	r3, [pc, #128]	; (24eb0 <spi_cmd_complete+0x8e0>)
   24e30:	0018      	movs	r0, r3
   24e32:	4b1d      	ldr	r3, [pc, #116]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e34:	4798      	blx	r3
						result = N_FAIL;
   24e36:	2300      	movs	r3, #0
   24e38:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24e3a:	e02a      	b.n	24e92 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24e3c:	4b1e      	ldr	r3, [pc, #120]	; (24eb8 <spi_cmd_complete+0x8e8>)
   24e3e:	781b      	ldrb	r3, [r3, #0]
   24e40:	2b00      	cmp	r3, #0
   24e42:	d118      	bne.n	24e76 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24e44:	2314      	movs	r3, #20
   24e46:	18fb      	adds	r3, r7, r3
   24e48:	2102      	movs	r1, #2
   24e4a:	0018      	movs	r0, r3
   24e4c:	4b13      	ldr	r3, [pc, #76]	; (24e9c <spi_cmd_complete+0x8cc>)
   24e4e:	4798      	blx	r3
   24e50:	1e03      	subs	r3, r0, #0
   24e52:	d010      	beq.n	24e76 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24e54:	4a19      	ldr	r2, [pc, #100]	; (24ebc <spi_cmd_complete+0x8ec>)
   24e56:	4912      	ldr	r1, [pc, #72]	; (24ea0 <spi_cmd_complete+0x8d0>)
   24e58:	4b12      	ldr	r3, [pc, #72]	; (24ea4 <spi_cmd_complete+0x8d4>)
   24e5a:	0018      	movs	r0, r3
   24e5c:	4b12      	ldr	r3, [pc, #72]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e5e:	4798      	blx	r3
   24e60:	4b17      	ldr	r3, [pc, #92]	; (24ec0 <spi_cmd_complete+0x8f0>)
   24e62:	0018      	movs	r0, r3
   24e64:	4b10      	ldr	r3, [pc, #64]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e66:	4798      	blx	r3
   24e68:	4b11      	ldr	r3, [pc, #68]	; (24eb0 <spi_cmd_complete+0x8e0>)
   24e6a:	0018      	movs	r0, r3
   24e6c:	4b0e      	ldr	r3, [pc, #56]	; (24ea8 <spi_cmd_complete+0x8d8>)
   24e6e:	4798      	blx	r3
							result = N_FAIL;
   24e70:	2300      	movs	r3, #0
   24e72:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24e74:	e00d      	b.n	24e92 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24e76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24e7a:	18d3      	adds	r3, r2, r3
   24e7c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24e80:	683a      	ldr	r2, [r7, #0]
   24e82:	1ad3      	subs	r3, r2, r3
   24e84:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24e86:	683b      	ldr	r3, [r7, #0]
   24e88:	2b00      	cmp	r3, #0
   24e8a:	d000      	beq.n	24e8e <spi_cmd_complete+0x8be>
   24e8c:	e77e      	b.n	24d8c <spi_cmd_complete+0x7bc>
   24e8e:	e000      	b.n	24e92 <spi_cmd_complete+0x8c2>
						break;
   24e90:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24e94:	0018      	movs	r0, r3
   24e96:	46bd      	mov	sp, r7
   24e98:	b01f      	add	sp, #124	; 0x7c
   24e9a:	bd90      	pop	{r4, r7, pc}
   24e9c:	00023f09 	.word	0x00023f09
   24ea0:	0003a428 	.word	0x0003a428
   24ea4:	00039e14 	.word	0x00039e14
   24ea8:	0001ea59 	.word	0x0001ea59
   24eac:	0003a078 	.word	0x0003a078
   24eb0:	00039e54 	.word	0x00039e54
   24eb4:	0003a00c 	.word	0x0003a00c
   24eb8:	200042b4 	.word	0x200042b4
   24ebc:	000002d2 	.word	0x000002d2
   24ec0:	0003a040 	.word	0x0003a040

00024ec4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24ec4:	b580      	push	{r7, lr}
   24ec6:	b086      	sub	sp, #24
   24ec8:	af00      	add	r7, sp, #0
   24eca:	6078      	str	r0, [r7, #4]
   24ecc:	000a      	movs	r2, r1
   24ece:	1cbb      	adds	r3, r7, #2
   24ed0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24ed2:	2313      	movs	r3, #19
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	2201      	movs	r2, #1
   24ed8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24eda:	230c      	movs	r3, #12
   24edc:	18fb      	adds	r3, r7, r3
   24ede:	2200      	movs	r2, #0
   24ee0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24ee2:	2316      	movs	r3, #22
   24ee4:	18fb      	adds	r3, r7, r3
   24ee6:	2200      	movs	r2, #0
   24ee8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24eea:	1cbb      	adds	r3, r7, #2
   24eec:	881a      	ldrh	r2, [r3, #0]
   24eee:	2380      	movs	r3, #128	; 0x80
   24ef0:	019b      	lsls	r3, r3, #6
   24ef2:	429a      	cmp	r2, r3
   24ef4:	d805      	bhi.n	24f02 <spi_data_write+0x3e>
			nbytes = sz;
   24ef6:	2314      	movs	r3, #20
   24ef8:	18fb      	adds	r3, r7, r3
   24efa:	1cba      	adds	r2, r7, #2
   24efc:	8812      	ldrh	r2, [r2, #0]
   24efe:	801a      	strh	r2, [r3, #0]
   24f00:	e004      	b.n	24f0c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24f02:	2314      	movs	r3, #20
   24f04:	18fb      	adds	r3, r7, r3
   24f06:	2280      	movs	r2, #128	; 0x80
   24f08:	0192      	lsls	r2, r2, #6
   24f0a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24f0c:	2311      	movs	r3, #17
   24f0e:	18fb      	adds	r3, r7, r3
   24f10:	22f0      	movs	r2, #240	; 0xf0
   24f12:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24f14:	2316      	movs	r3, #22
   24f16:	18fb      	adds	r3, r7, r3
   24f18:	2200      	movs	r2, #0
   24f1a:	5e9b      	ldrsh	r3, [r3, r2]
   24f1c:	2b00      	cmp	r3, #0
   24f1e:	d10f      	bne.n	24f40 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24f20:	1cbb      	adds	r3, r7, #2
   24f22:	881a      	ldrh	r2, [r3, #0]
   24f24:	2380      	movs	r3, #128	; 0x80
   24f26:	019b      	lsls	r3, r3, #6
   24f28:	429a      	cmp	r2, r3
   24f2a:	d804      	bhi.n	24f36 <spi_data_write+0x72>
				order = 0x3;
   24f2c:	2312      	movs	r3, #18
   24f2e:	18fb      	adds	r3, r7, r3
   24f30:	2203      	movs	r2, #3
   24f32:	701a      	strb	r2, [r3, #0]
   24f34:	e013      	b.n	24f5e <spi_data_write+0x9a>
			else
				order = 0x1;
   24f36:	2312      	movs	r3, #18
   24f38:	18fb      	adds	r3, r7, r3
   24f3a:	2201      	movs	r2, #1
   24f3c:	701a      	strb	r2, [r3, #0]
   24f3e:	e00e      	b.n	24f5e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24f40:	1cbb      	adds	r3, r7, #2
   24f42:	881a      	ldrh	r2, [r3, #0]
   24f44:	2380      	movs	r3, #128	; 0x80
   24f46:	019b      	lsls	r3, r3, #6
   24f48:	429a      	cmp	r2, r3
   24f4a:	d804      	bhi.n	24f56 <spi_data_write+0x92>
				order = 0x3;
   24f4c:	2312      	movs	r3, #18
   24f4e:	18fb      	adds	r3, r7, r3
   24f50:	2203      	movs	r2, #3
   24f52:	701a      	strb	r2, [r3, #0]
   24f54:	e003      	b.n	24f5e <spi_data_write+0x9a>
			else
				order = 0x2;
   24f56:	2312      	movs	r3, #18
   24f58:	18fb      	adds	r3, r7, r3
   24f5a:	2202      	movs	r2, #2
   24f5c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24f5e:	2311      	movs	r3, #17
   24f60:	18fb      	adds	r3, r7, r3
   24f62:	781a      	ldrb	r2, [r3, #0]
   24f64:	2312      	movs	r3, #18
   24f66:	18fb      	adds	r3, r7, r3
   24f68:	781b      	ldrb	r3, [r3, #0]
   24f6a:	4313      	orrs	r3, r2
   24f6c:	b2da      	uxtb	r2, r3
   24f6e:	2311      	movs	r3, #17
   24f70:	18fb      	adds	r3, r7, r3
   24f72:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24f74:	2311      	movs	r3, #17
   24f76:	18fb      	adds	r3, r7, r3
   24f78:	2101      	movs	r1, #1
   24f7a:	0018      	movs	r0, r3
   24f7c:	4b3c      	ldr	r3, [pc, #240]	; (25070 <spi_data_write+0x1ac>)
   24f7e:	4798      	blx	r3
   24f80:	1e03      	subs	r3, r0, #0
   24f82:	d012      	beq.n	24faa <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24f84:	4a3b      	ldr	r2, [pc, #236]	; (25074 <spi_data_write+0x1b0>)
   24f86:	493c      	ldr	r1, [pc, #240]	; (25078 <spi_data_write+0x1b4>)
   24f88:	4b3c      	ldr	r3, [pc, #240]	; (2507c <spi_data_write+0x1b8>)
   24f8a:	0018      	movs	r0, r3
   24f8c:	4b3c      	ldr	r3, [pc, #240]	; (25080 <spi_data_write+0x1bc>)
   24f8e:	4798      	blx	r3
   24f90:	4b3c      	ldr	r3, [pc, #240]	; (25084 <spi_data_write+0x1c0>)
   24f92:	0018      	movs	r0, r3
   24f94:	4b3a      	ldr	r3, [pc, #232]	; (25080 <spi_data_write+0x1bc>)
   24f96:	4798      	blx	r3
   24f98:	4b3b      	ldr	r3, [pc, #236]	; (25088 <spi_data_write+0x1c4>)
   24f9a:	0018      	movs	r0, r3
   24f9c:	4b38      	ldr	r3, [pc, #224]	; (25080 <spi_data_write+0x1bc>)
   24f9e:	4798      	blx	r3
			result = N_FAIL;
   24fa0:	2313      	movs	r3, #19
   24fa2:	18fb      	adds	r3, r7, r3
   24fa4:	2200      	movs	r2, #0
   24fa6:	701a      	strb	r2, [r3, #0]
			break;
   24fa8:	e059      	b.n	2505e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24faa:	2316      	movs	r3, #22
   24fac:	18fb      	adds	r3, r7, r3
   24fae:	2200      	movs	r2, #0
   24fb0:	5e9b      	ldrsh	r3, [r3, r2]
   24fb2:	687a      	ldr	r2, [r7, #4]
   24fb4:	18d2      	adds	r2, r2, r3
   24fb6:	2314      	movs	r3, #20
   24fb8:	18fb      	adds	r3, r7, r3
   24fba:	881b      	ldrh	r3, [r3, #0]
   24fbc:	0019      	movs	r1, r3
   24fbe:	0010      	movs	r0, r2
   24fc0:	4b2b      	ldr	r3, [pc, #172]	; (25070 <spi_data_write+0x1ac>)
   24fc2:	4798      	blx	r3
   24fc4:	1e03      	subs	r3, r0, #0
   24fc6:	d012      	beq.n	24fee <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24fc8:	4a30      	ldr	r2, [pc, #192]	; (2508c <spi_data_write+0x1c8>)
   24fca:	492b      	ldr	r1, [pc, #172]	; (25078 <spi_data_write+0x1b4>)
   24fcc:	4b2b      	ldr	r3, [pc, #172]	; (2507c <spi_data_write+0x1b8>)
   24fce:	0018      	movs	r0, r3
   24fd0:	4b2b      	ldr	r3, [pc, #172]	; (25080 <spi_data_write+0x1bc>)
   24fd2:	4798      	blx	r3
   24fd4:	4b2e      	ldr	r3, [pc, #184]	; (25090 <spi_data_write+0x1cc>)
   24fd6:	0018      	movs	r0, r3
   24fd8:	4b29      	ldr	r3, [pc, #164]	; (25080 <spi_data_write+0x1bc>)
   24fda:	4798      	blx	r3
   24fdc:	4b2a      	ldr	r3, [pc, #168]	; (25088 <spi_data_write+0x1c4>)
   24fde:	0018      	movs	r0, r3
   24fe0:	4b27      	ldr	r3, [pc, #156]	; (25080 <spi_data_write+0x1bc>)
   24fe2:	4798      	blx	r3
			result = N_FAIL;
   24fe4:	2313      	movs	r3, #19
   24fe6:	18fb      	adds	r3, r7, r3
   24fe8:	2200      	movs	r2, #0
   24fea:	701a      	strb	r2, [r3, #0]
			break;
   24fec:	e037      	b.n	2505e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   24fee:	4b29      	ldr	r3, [pc, #164]	; (25094 <spi_data_write+0x1d0>)
   24ff0:	781b      	ldrb	r3, [r3, #0]
   24ff2:	2b00      	cmp	r3, #0
   24ff4:	d11b      	bne.n	2502e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   24ff6:	230c      	movs	r3, #12
   24ff8:	18fb      	adds	r3, r7, r3
   24ffa:	2102      	movs	r1, #2
   24ffc:	0018      	movs	r0, r3
   24ffe:	4b1c      	ldr	r3, [pc, #112]	; (25070 <spi_data_write+0x1ac>)
   25000:	4798      	blx	r3
   25002:	1e03      	subs	r3, r0, #0
   25004:	d013      	beq.n	2502e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   25006:	23d7      	movs	r3, #215	; 0xd7
   25008:	009a      	lsls	r2, r3, #2
   2500a:	491b      	ldr	r1, [pc, #108]	; (25078 <spi_data_write+0x1b4>)
   2500c:	4b1b      	ldr	r3, [pc, #108]	; (2507c <spi_data_write+0x1b8>)
   2500e:	0018      	movs	r0, r3
   25010:	4b1b      	ldr	r3, [pc, #108]	; (25080 <spi_data_write+0x1bc>)
   25012:	4798      	blx	r3
   25014:	4b20      	ldr	r3, [pc, #128]	; (25098 <spi_data_write+0x1d4>)
   25016:	0018      	movs	r0, r3
   25018:	4b19      	ldr	r3, [pc, #100]	; (25080 <spi_data_write+0x1bc>)
   2501a:	4798      	blx	r3
   2501c:	4b1a      	ldr	r3, [pc, #104]	; (25088 <spi_data_write+0x1c4>)
   2501e:	0018      	movs	r0, r3
   25020:	4b17      	ldr	r3, [pc, #92]	; (25080 <spi_data_write+0x1bc>)
   25022:	4798      	blx	r3
				result = N_FAIL;
   25024:	2313      	movs	r3, #19
   25026:	18fb      	adds	r3, r7, r3
   25028:	2200      	movs	r2, #0
   2502a:	701a      	strb	r2, [r3, #0]
				break;
   2502c:	e017      	b.n	2505e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2502e:	2316      	movs	r3, #22
   25030:	18fb      	adds	r3, r7, r3
   25032:	881a      	ldrh	r2, [r3, #0]
   25034:	2314      	movs	r3, #20
   25036:	18fb      	adds	r3, r7, r3
   25038:	881b      	ldrh	r3, [r3, #0]
   2503a:	18d3      	adds	r3, r2, r3
   2503c:	b29a      	uxth	r2, r3
   2503e:	2316      	movs	r3, #22
   25040:	18fb      	adds	r3, r7, r3
   25042:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   25044:	1cbb      	adds	r3, r7, #2
   25046:	1cb9      	adds	r1, r7, #2
   25048:	2214      	movs	r2, #20
   2504a:	18ba      	adds	r2, r7, r2
   2504c:	8809      	ldrh	r1, [r1, #0]
   2504e:	8812      	ldrh	r2, [r2, #0]
   25050:	1a8a      	subs	r2, r1, r2
   25052:	801a      	strh	r2, [r3, #0]
	} while (sz);
   25054:	1cbb      	adds	r3, r7, #2
   25056:	881b      	ldrh	r3, [r3, #0]
   25058:	2b00      	cmp	r3, #0
   2505a:	d000      	beq.n	2505e <spi_data_write+0x19a>
   2505c:	e745      	b.n	24eea <spi_data_write+0x26>


	return result;
   2505e:	2313      	movs	r3, #19
   25060:	18fb      	adds	r3, r7, r3
   25062:	781b      	ldrb	r3, [r3, #0]
   25064:	b25b      	sxtb	r3, r3
}
   25066:	0018      	movs	r0, r3
   25068:	46bd      	mov	sp, r7
   2506a:	b006      	add	sp, #24
   2506c:	bd80      	pop	{r7, pc}
   2506e:	46c0      	nop			; (mov r8, r8)
   25070:	00023f4d 	.word	0x00023f4d
   25074:	00000349 	.word	0x00000349
   25078:	0003a43c 	.word	0x0003a43c
   2507c:	00039e14 	.word	0x00039e14
   25080:	0001ea59 	.word	0x0001ea59
   25084:	0003a0dc 	.word	0x0003a0dc
   25088:	00039e54 	.word	0x00039e54
   2508c:	00000352 	.word	0x00000352
   25090:	0003a114 	.word	0x0003a114
   25094:	200042b4 	.word	0x200042b4
   25098:	0003a148 	.word	0x0003a148

0002509c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2509c:	b590      	push	{r4, r7, lr}
   2509e:	b087      	sub	sp, #28
   250a0:	af02      	add	r7, sp, #8
   250a2:	6078      	str	r0, [r7, #4]
   250a4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   250a6:	230f      	movs	r3, #15
   250a8:	18fb      	adds	r3, r7, r3
   250aa:	220a      	movs	r2, #10
   250ac:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   250ae:	230c      	movs	r3, #12
   250b0:	18fb      	adds	r3, r7, r3
   250b2:	2201      	movs	r2, #1
   250b4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   250b6:	230e      	movs	r3, #14
   250b8:	18fb      	adds	r3, r7, r3
   250ba:	22c9      	movs	r2, #201	; 0xc9
   250bc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   250be:	230d      	movs	r3, #13
   250c0:	18fb      	adds	r3, r7, r3
   250c2:	2200      	movs	r2, #0
   250c4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   250c6:	687b      	ldr	r3, [r7, #4]
   250c8:	2b30      	cmp	r3, #48	; 0x30
   250ca:	d808      	bhi.n	250de <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   250cc:	230e      	movs	r3, #14
   250ce:	18fb      	adds	r3, r7, r3
   250d0:	22c3      	movs	r2, #195	; 0xc3
   250d2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   250d4:	230d      	movs	r3, #13
   250d6:	18fb      	adds	r3, r7, r3
   250d8:	2201      	movs	r2, #1
   250da:	701a      	strb	r2, [r3, #0]
   250dc:	e007      	b.n	250ee <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   250de:	230e      	movs	r3, #14
   250e0:	18fb      	adds	r3, r7, r3
   250e2:	22c9      	movs	r2, #201	; 0xc9
   250e4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   250e6:	230d      	movs	r3, #13
   250e8:	18fb      	adds	r3, r7, r3
   250ea:	2200      	movs	r2, #0
   250ec:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   250ee:	003a      	movs	r2, r7
   250f0:	6879      	ldr	r1, [r7, #4]
   250f2:	230e      	movs	r3, #14
   250f4:	18fb      	adds	r3, r7, r3
   250f6:	7818      	ldrb	r0, [r3, #0]
   250f8:	230d      	movs	r3, #13
   250fa:	18fb      	adds	r3, r7, r3
   250fc:	781b      	ldrb	r3, [r3, #0]
   250fe:	9300      	str	r3, [sp, #0]
   25100:	2304      	movs	r3, #4
   25102:	4c2e      	ldr	r4, [pc, #184]	; (251bc <spi_write_reg+0x120>)
   25104:	47a0      	blx	r4
   25106:	0002      	movs	r2, r0
   25108:	230c      	movs	r3, #12
   2510a:	18fb      	adds	r3, r7, r3
   2510c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2510e:	230c      	movs	r3, #12
   25110:	18fb      	adds	r3, r7, r3
   25112:	781b      	ldrb	r3, [r3, #0]
   25114:	b25b      	sxtb	r3, r3
   25116:	2b01      	cmp	r3, #1
   25118:	d010      	beq.n	2513c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2511a:	4a29      	ldr	r2, [pc, #164]	; (251c0 <spi_write_reg+0x124>)
   2511c:	4929      	ldr	r1, [pc, #164]	; (251c4 <spi_write_reg+0x128>)
   2511e:	4b2a      	ldr	r3, [pc, #168]	; (251c8 <spi_write_reg+0x12c>)
   25120:	0018      	movs	r0, r3
   25122:	4b2a      	ldr	r3, [pc, #168]	; (251cc <spi_write_reg+0x130>)
   25124:	4798      	blx	r3
   25126:	687a      	ldr	r2, [r7, #4]
   25128:	4b29      	ldr	r3, [pc, #164]	; (251d0 <spi_write_reg+0x134>)
   2512a:	0011      	movs	r1, r2
   2512c:	0018      	movs	r0, r3
   2512e:	4b27      	ldr	r3, [pc, #156]	; (251cc <spi_write_reg+0x130>)
   25130:	4798      	blx	r3
   25132:	4b28      	ldr	r3, [pc, #160]	; (251d4 <spi_write_reg+0x138>)
   25134:	0018      	movs	r0, r3
   25136:	4b25      	ldr	r3, [pc, #148]	; (251cc <spi_write_reg+0x130>)
   25138:	4798      	blx	r3
		goto _FAIL_;
   2513a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2513c:	230c      	movs	r3, #12
   2513e:	18fb      	adds	r3, r7, r3
   25140:	781b      	ldrb	r3, [r3, #0]
   25142:	b25b      	sxtb	r3, r3
   25144:	2b01      	cmp	r3, #1
   25146:	d030      	beq.n	251aa <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   25148:	2001      	movs	r0, #1
   2514a:	4b23      	ldr	r3, [pc, #140]	; (251d8 <spi_write_reg+0x13c>)
   2514c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2514e:	2300      	movs	r3, #0
   25150:	9300      	str	r3, [sp, #0]
   25152:	2300      	movs	r3, #0
   25154:	2200      	movs	r2, #0
   25156:	2100      	movs	r1, #0
   25158:	20cf      	movs	r0, #207	; 0xcf
   2515a:	4c20      	ldr	r4, [pc, #128]	; (251dc <spi_write_reg+0x140>)
   2515c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2515e:	20cf      	movs	r0, #207	; 0xcf
   25160:	4b1f      	ldr	r3, [pc, #124]	; (251e0 <spi_write_reg+0x144>)
   25162:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25164:	23ea      	movs	r3, #234	; 0xea
   25166:	009a      	lsls	r2, r3, #2
   25168:	4916      	ldr	r1, [pc, #88]	; (251c4 <spi_write_reg+0x128>)
   2516a:	4b17      	ldr	r3, [pc, #92]	; (251c8 <spi_write_reg+0x12c>)
   2516c:	0018      	movs	r0, r3
   2516e:	4b17      	ldr	r3, [pc, #92]	; (251cc <spi_write_reg+0x130>)
   25170:	4798      	blx	r3
   25172:	230f      	movs	r3, #15
   25174:	18fb      	adds	r3, r7, r3
   25176:	7819      	ldrb	r1, [r3, #0]
   25178:	683b      	ldr	r3, [r7, #0]
   2517a:	687a      	ldr	r2, [r7, #4]
   2517c:	4819      	ldr	r0, [pc, #100]	; (251e4 <spi_write_reg+0x148>)
   2517e:	4c13      	ldr	r4, [pc, #76]	; (251cc <spi_write_reg+0x130>)
   25180:	47a0      	blx	r4
   25182:	4b14      	ldr	r3, [pc, #80]	; (251d4 <spi_write_reg+0x138>)
   25184:	0018      	movs	r0, r3
   25186:	4b11      	ldr	r3, [pc, #68]	; (251cc <spi_write_reg+0x130>)
   25188:	4798      	blx	r3
		nm_bsp_sleep(1);
   2518a:	2001      	movs	r0, #1
   2518c:	4b12      	ldr	r3, [pc, #72]	; (251d8 <spi_write_reg+0x13c>)
   2518e:	4798      	blx	r3
		retry--;
   25190:	230f      	movs	r3, #15
   25192:	18fb      	adds	r3, r7, r3
   25194:	781a      	ldrb	r2, [r3, #0]
   25196:	230f      	movs	r3, #15
   25198:	18fb      	adds	r3, r7, r3
   2519a:	3a01      	subs	r2, #1
   2519c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2519e:	230f      	movs	r3, #15
   251a0:	18fb      	adds	r3, r7, r3
   251a2:	781b      	ldrb	r3, [r3, #0]
   251a4:	2b00      	cmp	r3, #0
   251a6:	d000      	beq.n	251aa <spi_write_reg+0x10e>
   251a8:	e78d      	b.n	250c6 <spi_write_reg+0x2a>
	}

	return result;
   251aa:	230c      	movs	r3, #12
   251ac:	18fb      	adds	r3, r7, r3
   251ae:	781b      	ldrb	r3, [r3, #0]
   251b0:	b25b      	sxtb	r3, r3
}
   251b2:	0018      	movs	r0, r3
   251b4:	46bd      	mov	sp, r7
   251b6:	b005      	add	sp, #20
   251b8:	bd90      	pop	{r4, r7, pc}
   251ba:	46c0      	nop			; (mov r8, r8)
   251bc:	000245d1 	.word	0x000245d1
   251c0:	0000039d 	.word	0x0000039d
   251c4:	0003a44c 	.word	0x0003a44c
   251c8:	00039e14 	.word	0x00039e14
   251cc:	0001ea59 	.word	0x0001ea59
   251d0:	0003a180 	.word	0x0003a180
   251d4:	00039e54 	.word	0x00039e54
   251d8:	00020f11 	.word	0x00020f11
   251dc:	00024055 	.word	0x00024055
   251e0:	00024495 	.word	0x00024495
   251e4:	0003a1ac 	.word	0x0003a1ac

000251e8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   251e8:	b590      	push	{r4, r7, lr}
   251ea:	b089      	sub	sp, #36	; 0x24
   251ec:	af02      	add	r7, sp, #8
   251ee:	60f8      	str	r0, [r7, #12]
   251f0:	60b9      	str	r1, [r7, #8]
   251f2:	1dbb      	adds	r3, r7, #6
   251f4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   251f6:	2316      	movs	r3, #22
   251f8:	18fb      	adds	r3, r7, r3
   251fa:	220a      	movs	r2, #10
   251fc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   251fe:	2315      	movs	r3, #21
   25200:	18fb      	adds	r3, r7, r3
   25202:	22c7      	movs	r2, #199	; 0xc7
   25204:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   25206:	1dbb      	adds	r3, r7, #6
   25208:	881a      	ldrh	r2, [r3, #0]
   2520a:	68f9      	ldr	r1, [r7, #12]
   2520c:	2315      	movs	r3, #21
   2520e:	18fb      	adds	r3, r7, r3
   25210:	7818      	ldrb	r0, [r3, #0]
   25212:	2300      	movs	r3, #0
   25214:	9300      	str	r3, [sp, #0]
   25216:	0013      	movs	r3, r2
   25218:	2200      	movs	r2, #0
   2521a:	4c4d      	ldr	r4, [pc, #308]	; (25350 <nm_spi_write+0x168>)
   2521c:	47a0      	blx	r4
   2521e:	0002      	movs	r2, r0
   25220:	2317      	movs	r3, #23
   25222:	18fb      	adds	r3, r7, r3
   25224:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25226:	2317      	movs	r3, #23
   25228:	18fb      	adds	r3, r7, r3
   2522a:	781b      	ldrb	r3, [r3, #0]
   2522c:	b25b      	sxtb	r3, r3
   2522e:	2b01      	cmp	r3, #1
   25230:	d010      	beq.n	25254 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   25232:	4a48      	ldr	r2, [pc, #288]	; (25354 <nm_spi_write+0x16c>)
   25234:	4948      	ldr	r1, [pc, #288]	; (25358 <nm_spi_write+0x170>)
   25236:	4b49      	ldr	r3, [pc, #292]	; (2535c <nm_spi_write+0x174>)
   25238:	0018      	movs	r0, r3
   2523a:	4b49      	ldr	r3, [pc, #292]	; (25360 <nm_spi_write+0x178>)
   2523c:	4798      	blx	r3
   2523e:	68fa      	ldr	r2, [r7, #12]
   25240:	4b48      	ldr	r3, [pc, #288]	; (25364 <nm_spi_write+0x17c>)
   25242:	0011      	movs	r1, r2
   25244:	0018      	movs	r0, r3
   25246:	4b46      	ldr	r3, [pc, #280]	; (25360 <nm_spi_write+0x178>)
   25248:	4798      	blx	r3
   2524a:	4b47      	ldr	r3, [pc, #284]	; (25368 <nm_spi_write+0x180>)
   2524c:	0018      	movs	r0, r3
   2524e:	4b44      	ldr	r3, [pc, #272]	; (25360 <nm_spi_write+0x178>)
   25250:	4798      	blx	r3
		goto _FAIL_;
   25252:	e03e      	b.n	252d2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25254:	2317      	movs	r3, #23
   25256:	18fc      	adds	r4, r7, r3
   25258:	1dbb      	adds	r3, r7, #6
   2525a:	881a      	ldrh	r2, [r3, #0]
   2525c:	68bb      	ldr	r3, [r7, #8]
   2525e:	0011      	movs	r1, r2
   25260:	0018      	movs	r0, r3
   25262:	4b42      	ldr	r3, [pc, #264]	; (2536c <nm_spi_write+0x184>)
   25264:	4798      	blx	r3
   25266:	0003      	movs	r3, r0
   25268:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2526a:	2317      	movs	r3, #23
   2526c:	18fb      	adds	r3, r7, r3
   2526e:	781b      	ldrb	r3, [r3, #0]
   25270:	b25b      	sxtb	r3, r3
   25272:	2b01      	cmp	r3, #1
   25274:	d00e      	beq.n	25294 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25276:	4a3e      	ldr	r2, [pc, #248]	; (25370 <nm_spi_write+0x188>)
   25278:	4937      	ldr	r1, [pc, #220]	; (25358 <nm_spi_write+0x170>)
   2527a:	4b38      	ldr	r3, [pc, #224]	; (2535c <nm_spi_write+0x174>)
   2527c:	0018      	movs	r0, r3
   2527e:	4b38      	ldr	r3, [pc, #224]	; (25360 <nm_spi_write+0x178>)
   25280:	4798      	blx	r3
   25282:	4b3c      	ldr	r3, [pc, #240]	; (25374 <nm_spi_write+0x18c>)
   25284:	0018      	movs	r0, r3
   25286:	4b36      	ldr	r3, [pc, #216]	; (25360 <nm_spi_write+0x178>)
   25288:	4798      	blx	r3
   2528a:	4b37      	ldr	r3, [pc, #220]	; (25368 <nm_spi_write+0x180>)
   2528c:	0018      	movs	r0, r3
   2528e:	4b34      	ldr	r3, [pc, #208]	; (25360 <nm_spi_write+0x178>)
   25290:	4798      	blx	r3
		goto _FAIL_;
   25292:	e01e      	b.n	252d2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   25294:	2317      	movs	r3, #23
   25296:	18fc      	adds	r4, r7, r3
   25298:	2315      	movs	r3, #21
   2529a:	18fb      	adds	r3, r7, r3
   2529c:	781b      	ldrb	r3, [r3, #0]
   2529e:	0018      	movs	r0, r3
   252a0:	4b35      	ldr	r3, [pc, #212]	; (25378 <nm_spi_write+0x190>)
   252a2:	4798      	blx	r3
   252a4:	0003      	movs	r3, r0
   252a6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   252a8:	2317      	movs	r3, #23
   252aa:	18fb      	adds	r3, r7, r3
   252ac:	781b      	ldrb	r3, [r3, #0]
   252ae:	b25b      	sxtb	r3, r3
   252b0:	2b01      	cmp	r3, #1
   252b2:	d00e      	beq.n	252d2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   252b4:	4a31      	ldr	r2, [pc, #196]	; (2537c <nm_spi_write+0x194>)
   252b6:	4928      	ldr	r1, [pc, #160]	; (25358 <nm_spi_write+0x170>)
   252b8:	4b28      	ldr	r3, [pc, #160]	; (2535c <nm_spi_write+0x174>)
   252ba:	0018      	movs	r0, r3
   252bc:	4b28      	ldr	r3, [pc, #160]	; (25360 <nm_spi_write+0x178>)
   252be:	4798      	blx	r3
   252c0:	4b2c      	ldr	r3, [pc, #176]	; (25374 <nm_spi_write+0x18c>)
   252c2:	0018      	movs	r0, r3
   252c4:	4b26      	ldr	r3, [pc, #152]	; (25360 <nm_spi_write+0x178>)
   252c6:	4798      	blx	r3
   252c8:	4b27      	ldr	r3, [pc, #156]	; (25368 <nm_spi_write+0x180>)
   252ca:	0018      	movs	r0, r3
   252cc:	4b24      	ldr	r3, [pc, #144]	; (25360 <nm_spi_write+0x178>)
   252ce:	4798      	blx	r3
		goto _FAIL_;
   252d0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   252d2:	2317      	movs	r3, #23
   252d4:	18fb      	adds	r3, r7, r3
   252d6:	781b      	ldrb	r3, [r3, #0]
   252d8:	b25b      	sxtb	r3, r3
   252da:	2b01      	cmp	r3, #1
   252dc:	d030      	beq.n	25340 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   252de:	2001      	movs	r0, #1
   252e0:	4b27      	ldr	r3, [pc, #156]	; (25380 <nm_spi_write+0x198>)
   252e2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   252e4:	2300      	movs	r3, #0
   252e6:	9300      	str	r3, [sp, #0]
   252e8:	2300      	movs	r3, #0
   252ea:	2200      	movs	r2, #0
   252ec:	2100      	movs	r1, #0
   252ee:	20cf      	movs	r0, #207	; 0xcf
   252f0:	4c24      	ldr	r4, [pc, #144]	; (25384 <nm_spi_write+0x19c>)
   252f2:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   252f4:	20cf      	movs	r0, #207	; 0xcf
   252f6:	4b24      	ldr	r3, [pc, #144]	; (25388 <nm_spi_write+0x1a0>)
   252f8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   252fa:	4a24      	ldr	r2, [pc, #144]	; (2538c <nm_spi_write+0x1a4>)
   252fc:	4916      	ldr	r1, [pc, #88]	; (25358 <nm_spi_write+0x170>)
   252fe:	4b17      	ldr	r3, [pc, #92]	; (2535c <nm_spi_write+0x174>)
   25300:	0018      	movs	r0, r3
   25302:	4b17      	ldr	r3, [pc, #92]	; (25360 <nm_spi_write+0x178>)
   25304:	4798      	blx	r3
   25306:	2316      	movs	r3, #22
   25308:	18fb      	adds	r3, r7, r3
   2530a:	7819      	ldrb	r1, [r3, #0]
   2530c:	1dbb      	adds	r3, r7, #6
   2530e:	881b      	ldrh	r3, [r3, #0]
   25310:	68fa      	ldr	r2, [r7, #12]
   25312:	481f      	ldr	r0, [pc, #124]	; (25390 <nm_spi_write+0x1a8>)
   25314:	4c12      	ldr	r4, [pc, #72]	; (25360 <nm_spi_write+0x178>)
   25316:	47a0      	blx	r4
   25318:	4b13      	ldr	r3, [pc, #76]	; (25368 <nm_spi_write+0x180>)
   2531a:	0018      	movs	r0, r3
   2531c:	4b10      	ldr	r3, [pc, #64]	; (25360 <nm_spi_write+0x178>)
   2531e:	4798      	blx	r3
		nm_bsp_sleep(1);
   25320:	2001      	movs	r0, #1
   25322:	4b17      	ldr	r3, [pc, #92]	; (25380 <nm_spi_write+0x198>)
   25324:	4798      	blx	r3
		retry--;
   25326:	2316      	movs	r3, #22
   25328:	18fb      	adds	r3, r7, r3
   2532a:	781a      	ldrb	r2, [r3, #0]
   2532c:	2316      	movs	r3, #22
   2532e:	18fb      	adds	r3, r7, r3
   25330:	3a01      	subs	r2, #1
   25332:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25334:	2316      	movs	r3, #22
   25336:	18fb      	adds	r3, r7, r3
   25338:	781b      	ldrb	r3, [r3, #0]
   2533a:	2b00      	cmp	r3, #0
   2533c:	d000      	beq.n	25340 <nm_spi_write+0x158>
   2533e:	e762      	b.n	25206 <nm_spi_write+0x1e>
	}


	return result;
   25340:	2317      	movs	r3, #23
   25342:	18fb      	adds	r3, r7, r3
   25344:	781b      	ldrb	r3, [r3, #0]
   25346:	b25b      	sxtb	r3, r3
}
   25348:	0018      	movs	r0, r3
   2534a:	46bd      	mov	sp, r7
   2534c:	b007      	add	sp, #28
   2534e:	bd90      	pop	{r4, r7, pc}
   25350:	000245d1 	.word	0x000245d1
   25354:	000003cf 	.word	0x000003cf
   25358:	0003a45c 	.word	0x0003a45c
   2535c:	00039e14 	.word	0x00039e14
   25360:	0001ea59 	.word	0x0001ea59
   25364:	0003a1c8 	.word	0x0003a1c8
   25368:	00039e54 	.word	0x00039e54
   2536c:	00024ec5 	.word	0x00024ec5
   25370:	000003d9 	.word	0x000003d9
   25374:	0003a1f8 	.word	0x0003a1f8
   25378:	00024395 	.word	0x00024395
   2537c:	000003e1 	.word	0x000003e1
   25380:	00020f11 	.word	0x00020f11
   25384:	00024055 	.word	0x00024055
   25388:	00024495 	.word	0x00024495
   2538c:	000003eb 	.word	0x000003eb
   25390:	0003a220 	.word	0x0003a220

00025394 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   25394:	b590      	push	{r4, r7, lr}
   25396:	b087      	sub	sp, #28
   25398:	af02      	add	r7, sp, #8
   2539a:	6078      	str	r0, [r7, #4]
   2539c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2539e:	230f      	movs	r3, #15
   253a0:	18fb      	adds	r3, r7, r3
   253a2:	220a      	movs	r2, #10
   253a4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   253a6:	230c      	movs	r3, #12
   253a8:	18fb      	adds	r3, r7, r3
   253aa:	2201      	movs	r2, #1
   253ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   253ae:	230e      	movs	r3, #14
   253b0:	18fb      	adds	r3, r7, r3
   253b2:	22ca      	movs	r2, #202	; 0xca
   253b4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   253b6:	230d      	movs	r3, #13
   253b8:	18fb      	adds	r3, r7, r3
   253ba:	2200      	movs	r2, #0
   253bc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   253be:	687b      	ldr	r3, [r7, #4]
   253c0:	2bff      	cmp	r3, #255	; 0xff
   253c2:	d808      	bhi.n	253d6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   253c4:	230e      	movs	r3, #14
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	22c4      	movs	r2, #196	; 0xc4
   253ca:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   253cc:	230d      	movs	r3, #13
   253ce:	18fb      	adds	r3, r7, r3
   253d0:	2201      	movs	r2, #1
   253d2:	701a      	strb	r2, [r3, #0]
   253d4:	e007      	b.n	253e6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   253d6:	230e      	movs	r3, #14
   253d8:	18fb      	adds	r3, r7, r3
   253da:	22ca      	movs	r2, #202	; 0xca
   253dc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   253de:	230d      	movs	r3, #13
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	2200      	movs	r2, #0
   253e4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   253e6:	2308      	movs	r3, #8
   253e8:	18fa      	adds	r2, r7, r3
   253ea:	6879      	ldr	r1, [r7, #4]
   253ec:	230e      	movs	r3, #14
   253ee:	18fb      	adds	r3, r7, r3
   253f0:	7818      	ldrb	r0, [r3, #0]
   253f2:	230d      	movs	r3, #13
   253f4:	18fb      	adds	r3, r7, r3
   253f6:	781b      	ldrb	r3, [r3, #0]
   253f8:	9300      	str	r3, [sp, #0]
   253fa:	2304      	movs	r3, #4
   253fc:	4c37      	ldr	r4, [pc, #220]	; (254dc <spi_read_reg+0x148>)
   253fe:	47a0      	blx	r4
   25400:	0002      	movs	r2, r0
   25402:	230c      	movs	r3, #12
   25404:	18fb      	adds	r3, r7, r3
   25406:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25408:	230c      	movs	r3, #12
   2540a:	18fb      	adds	r3, r7, r3
   2540c:	781b      	ldrb	r3, [r3, #0]
   2540e:	b25b      	sxtb	r3, r3
   25410:	2b01      	cmp	r3, #1
   25412:	d010      	beq.n	25436 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25414:	4a32      	ldr	r2, [pc, #200]	; (254e0 <spi_read_reg+0x14c>)
   25416:	4933      	ldr	r1, [pc, #204]	; (254e4 <spi_read_reg+0x150>)
   25418:	4b33      	ldr	r3, [pc, #204]	; (254e8 <spi_read_reg+0x154>)
   2541a:	0018      	movs	r0, r3
   2541c:	4b33      	ldr	r3, [pc, #204]	; (254ec <spi_read_reg+0x158>)
   2541e:	4798      	blx	r3
   25420:	687a      	ldr	r2, [r7, #4]
   25422:	4b33      	ldr	r3, [pc, #204]	; (254f0 <spi_read_reg+0x15c>)
   25424:	0011      	movs	r1, r2
   25426:	0018      	movs	r0, r3
   25428:	4b30      	ldr	r3, [pc, #192]	; (254ec <spi_read_reg+0x158>)
   2542a:	4798      	blx	r3
   2542c:	4b31      	ldr	r3, [pc, #196]	; (254f4 <spi_read_reg+0x160>)
   2542e:	0018      	movs	r0, r3
   25430:	4b2e      	ldr	r3, [pc, #184]	; (254ec <spi_read_reg+0x158>)
   25432:	4798      	blx	r3
		goto _FAIL_;
   25434:	e014      	b.n	25460 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   25436:	2308      	movs	r3, #8
   25438:	18fb      	adds	r3, r7, r3
   2543a:	781b      	ldrb	r3, [r3, #0]
   2543c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2543e:	2308      	movs	r3, #8
   25440:	18fb      	adds	r3, r7, r3
   25442:	785b      	ldrb	r3, [r3, #1]
   25444:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   25446:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   25448:	2308      	movs	r3, #8
   2544a:	18fb      	adds	r3, r7, r3
   2544c:	789b      	ldrb	r3, [r3, #2]
   2544e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25450:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25452:	2308      	movs	r3, #8
   25454:	18fb      	adds	r3, r7, r3
   25456:	78db      	ldrb	r3, [r3, #3]
   25458:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2545a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2545c:	683b      	ldr	r3, [r7, #0]
   2545e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25460:	230c      	movs	r3, #12
   25462:	18fb      	adds	r3, r7, r3
   25464:	781b      	ldrb	r3, [r3, #0]
   25466:	b25b      	sxtb	r3, r3
   25468:	2b01      	cmp	r3, #1
   2546a:	d02f      	beq.n	254cc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2546c:	2001      	movs	r0, #1
   2546e:	4b22      	ldr	r3, [pc, #136]	; (254f8 <spi_read_reg+0x164>)
   25470:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25472:	2300      	movs	r3, #0
   25474:	9300      	str	r3, [sp, #0]
   25476:	2300      	movs	r3, #0
   25478:	2200      	movs	r2, #0
   2547a:	2100      	movs	r1, #0
   2547c:	20cf      	movs	r0, #207	; 0xcf
   2547e:	4c1f      	ldr	r4, [pc, #124]	; (254fc <spi_read_reg+0x168>)
   25480:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25482:	20cf      	movs	r0, #207	; 0xcf
   25484:	4b1e      	ldr	r3, [pc, #120]	; (25500 <spi_read_reg+0x16c>)
   25486:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   25488:	4a1e      	ldr	r2, [pc, #120]	; (25504 <spi_read_reg+0x170>)
   2548a:	4916      	ldr	r1, [pc, #88]	; (254e4 <spi_read_reg+0x150>)
   2548c:	4b16      	ldr	r3, [pc, #88]	; (254e8 <spi_read_reg+0x154>)
   2548e:	0018      	movs	r0, r3
   25490:	4b16      	ldr	r3, [pc, #88]	; (254ec <spi_read_reg+0x158>)
   25492:	4798      	blx	r3
   25494:	230f      	movs	r3, #15
   25496:	18fb      	adds	r3, r7, r3
   25498:	7819      	ldrb	r1, [r3, #0]
   2549a:	687a      	ldr	r2, [r7, #4]
   2549c:	4b1a      	ldr	r3, [pc, #104]	; (25508 <spi_read_reg+0x174>)
   2549e:	0018      	movs	r0, r3
   254a0:	4b12      	ldr	r3, [pc, #72]	; (254ec <spi_read_reg+0x158>)
   254a2:	4798      	blx	r3
   254a4:	4b13      	ldr	r3, [pc, #76]	; (254f4 <spi_read_reg+0x160>)
   254a6:	0018      	movs	r0, r3
   254a8:	4b10      	ldr	r3, [pc, #64]	; (254ec <spi_read_reg+0x158>)
   254aa:	4798      	blx	r3
		nm_bsp_sleep(1);
   254ac:	2001      	movs	r0, #1
   254ae:	4b12      	ldr	r3, [pc, #72]	; (254f8 <spi_read_reg+0x164>)
   254b0:	4798      	blx	r3
		retry--;
   254b2:	230f      	movs	r3, #15
   254b4:	18fb      	adds	r3, r7, r3
   254b6:	781a      	ldrb	r2, [r3, #0]
   254b8:	230f      	movs	r3, #15
   254ba:	18fb      	adds	r3, r7, r3
   254bc:	3a01      	subs	r2, #1
   254be:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   254c0:	230f      	movs	r3, #15
   254c2:	18fb      	adds	r3, r7, r3
   254c4:	781b      	ldrb	r3, [r3, #0]
   254c6:	2b00      	cmp	r3, #0
   254c8:	d000      	beq.n	254cc <spi_read_reg+0x138>
   254ca:	e778      	b.n	253be <spi_read_reg+0x2a>
	}
		
	return result;
   254cc:	230c      	movs	r3, #12
   254ce:	18fb      	adds	r3, r7, r3
   254d0:	781b      	ldrb	r3, [r3, #0]
   254d2:	b25b      	sxtb	r3, r3
}
   254d4:	0018      	movs	r0, r3
   254d6:	46bd      	mov	sp, r7
   254d8:	b005      	add	sp, #20
   254da:	bd90      	pop	{r4, r7, pc}
   254dc:	000245d1 	.word	0x000245d1
   254e0:	00000423 	.word	0x00000423
   254e4:	0003a46c 	.word	0x0003a46c
   254e8:	00039e14 	.word	0x00039e14
   254ec:	0001ea59 	.word	0x0001ea59
   254f0:	0003a23c 	.word	0x0003a23c
   254f4:	00039e54 	.word	0x00039e54
   254f8:	00020f11 	.word	0x00020f11
   254fc:	00024055 	.word	0x00024055
   25500:	00024495 	.word	0x00024495
   25504:	00000435 	.word	0x00000435
   25508:	0003a268 	.word	0x0003a268

0002550c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2550c:	b590      	push	{r4, r7, lr}
   2550e:	b089      	sub	sp, #36	; 0x24
   25510:	af02      	add	r7, sp, #8
   25512:	60f8      	str	r0, [r7, #12]
   25514:	60b9      	str	r1, [r7, #8]
   25516:	1dbb      	adds	r3, r7, #6
   25518:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2551a:	2316      	movs	r3, #22
   2551c:	18fb      	adds	r3, r7, r3
   2551e:	22c8      	movs	r2, #200	; 0xc8
   25520:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25522:	2317      	movs	r3, #23
   25524:	18fb      	adds	r3, r7, r3
   25526:	220a      	movs	r2, #10
   25528:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2552a:	1dbb      	adds	r3, r7, #6
   2552c:	881c      	ldrh	r4, [r3, #0]
   2552e:	68ba      	ldr	r2, [r7, #8]
   25530:	68f9      	ldr	r1, [r7, #12]
   25532:	2316      	movs	r3, #22
   25534:	18fb      	adds	r3, r7, r3
   25536:	7818      	ldrb	r0, [r3, #0]
   25538:	2300      	movs	r3, #0
   2553a:	9300      	str	r3, [sp, #0]
   2553c:	0023      	movs	r3, r4
   2553e:	4c2e      	ldr	r4, [pc, #184]	; (255f8 <nm_spi_read+0xec>)
   25540:	47a0      	blx	r4
   25542:	0002      	movs	r2, r0
   25544:	2315      	movs	r3, #21
   25546:	18fb      	adds	r3, r7, r3
   25548:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2554a:	2315      	movs	r3, #21
   2554c:	18fb      	adds	r3, r7, r3
   2554e:	781b      	ldrb	r3, [r3, #0]
   25550:	b25b      	sxtb	r3, r3
   25552:	2b01      	cmp	r3, #1
   25554:	d010      	beq.n	25578 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   25556:	4a29      	ldr	r2, [pc, #164]	; (255fc <nm_spi_read+0xf0>)
   25558:	4929      	ldr	r1, [pc, #164]	; (25600 <nm_spi_read+0xf4>)
   2555a:	4b2a      	ldr	r3, [pc, #168]	; (25604 <nm_spi_read+0xf8>)
   2555c:	0018      	movs	r0, r3
   2555e:	4b2a      	ldr	r3, [pc, #168]	; (25608 <nm_spi_read+0xfc>)
   25560:	4798      	blx	r3
   25562:	68fa      	ldr	r2, [r7, #12]
   25564:	4b29      	ldr	r3, [pc, #164]	; (2560c <nm_spi_read+0x100>)
   25566:	0011      	movs	r1, r2
   25568:	0018      	movs	r0, r3
   2556a:	4b27      	ldr	r3, [pc, #156]	; (25608 <nm_spi_read+0xfc>)
   2556c:	4798      	blx	r3
   2556e:	4b28      	ldr	r3, [pc, #160]	; (25610 <nm_spi_read+0x104>)
   25570:	0018      	movs	r0, r3
   25572:	4b25      	ldr	r3, [pc, #148]	; (25608 <nm_spi_read+0xfc>)
   25574:	4798      	blx	r3
		goto _FAIL_;
   25576:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   25578:	2315      	movs	r3, #21
   2557a:	18fb      	adds	r3, r7, r3
   2557c:	781b      	ldrb	r3, [r3, #0]
   2557e:	b25b      	sxtb	r3, r3
   25580:	2b01      	cmp	r3, #1
   25582:	d030      	beq.n	255e6 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   25584:	2001      	movs	r0, #1
   25586:	4b23      	ldr	r3, [pc, #140]	; (25614 <nm_spi_read+0x108>)
   25588:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2558a:	2300      	movs	r3, #0
   2558c:	9300      	str	r3, [sp, #0]
   2558e:	2300      	movs	r3, #0
   25590:	2200      	movs	r2, #0
   25592:	2100      	movs	r1, #0
   25594:	20cf      	movs	r0, #207	; 0xcf
   25596:	4c20      	ldr	r4, [pc, #128]	; (25618 <nm_spi_read+0x10c>)
   25598:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2559a:	20cf      	movs	r0, #207	; 0xcf
   2559c:	4b1f      	ldr	r3, [pc, #124]	; (2561c <nm_spi_read+0x110>)
   2559e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   255a0:	4a1f      	ldr	r2, [pc, #124]	; (25620 <nm_spi_read+0x114>)
   255a2:	4917      	ldr	r1, [pc, #92]	; (25600 <nm_spi_read+0xf4>)
   255a4:	4b17      	ldr	r3, [pc, #92]	; (25604 <nm_spi_read+0xf8>)
   255a6:	0018      	movs	r0, r3
   255a8:	4b17      	ldr	r3, [pc, #92]	; (25608 <nm_spi_read+0xfc>)
   255aa:	4798      	blx	r3
   255ac:	2317      	movs	r3, #23
   255ae:	18fb      	adds	r3, r7, r3
   255b0:	7819      	ldrb	r1, [r3, #0]
   255b2:	1dbb      	adds	r3, r7, #6
   255b4:	881b      	ldrh	r3, [r3, #0]
   255b6:	68fa      	ldr	r2, [r7, #12]
   255b8:	481a      	ldr	r0, [pc, #104]	; (25624 <nm_spi_read+0x118>)
   255ba:	4c13      	ldr	r4, [pc, #76]	; (25608 <nm_spi_read+0xfc>)
   255bc:	47a0      	blx	r4
   255be:	4b14      	ldr	r3, [pc, #80]	; (25610 <nm_spi_read+0x104>)
   255c0:	0018      	movs	r0, r3
   255c2:	4b11      	ldr	r3, [pc, #68]	; (25608 <nm_spi_read+0xfc>)
   255c4:	4798      	blx	r3
		nm_bsp_sleep(1);
   255c6:	2001      	movs	r0, #1
   255c8:	4b12      	ldr	r3, [pc, #72]	; (25614 <nm_spi_read+0x108>)
   255ca:	4798      	blx	r3
		retry--;
   255cc:	2317      	movs	r3, #23
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	781a      	ldrb	r2, [r3, #0]
   255d2:	2317      	movs	r3, #23
   255d4:	18fb      	adds	r3, r7, r3
   255d6:	3a01      	subs	r2, #1
   255d8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   255da:	2317      	movs	r3, #23
   255dc:	18fb      	adds	r3, r7, r3
   255de:	781b      	ldrb	r3, [r3, #0]
   255e0:	2b00      	cmp	r3, #0
   255e2:	d000      	beq.n	255e6 <nm_spi_read+0xda>
   255e4:	e7a1      	b.n	2552a <nm_spi_read+0x1e>
	}

	return result;
   255e6:	2315      	movs	r3, #21
   255e8:	18fb      	adds	r3, r7, r3
   255ea:	781b      	ldrb	r3, [r3, #0]
   255ec:	b25b      	sxtb	r3, r3
}
   255ee:	0018      	movs	r0, r3
   255f0:	46bd      	mov	sp, r7
   255f2:	b007      	add	sp, #28
   255f4:	bd90      	pop	{r4, r7, pc}
   255f6:	46c0      	nop			; (mov r8, r8)
   255f8:	000245d1 	.word	0x000245d1
   255fc:	00000472 	.word	0x00000472
   25600:	0003a47c 	.word	0x0003a47c
   25604:	00039e14 	.word	0x00039e14
   25608:	0001ea59 	.word	0x0001ea59
   2560c:	0003a280 	.word	0x0003a280
   25610:	00039e54 	.word	0x00039e54
   25614:	00020f11 	.word	0x00020f11
   25618:	00024055 	.word	0x00024055
   2561c:	00024495 	.word	0x00024495
   25620:	0000047d 	.word	0x0000047d
   25624:	0003a220 	.word	0x0003a220

00025628 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   25628:	b580      	push	{r7, lr}
   2562a:	b082      	sub	sp, #8
   2562c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2562e:	4b0c      	ldr	r3, [pc, #48]	; (25660 <spi_init_pkt_sz+0x38>)
   25630:	0018      	movs	r0, r3
   25632:	4b0c      	ldr	r3, [pc, #48]	; (25664 <spi_init_pkt_sz+0x3c>)
   25634:	4798      	blx	r3
   25636:	0003      	movs	r3, r0
   25638:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2563a:	687b      	ldr	r3, [r7, #4]
   2563c:	2270      	movs	r2, #112	; 0x70
   2563e:	4393      	bics	r3, r2
   25640:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25642:	687b      	ldr	r3, [r7, #4]
   25644:	2250      	movs	r2, #80	; 0x50
   25646:	4313      	orrs	r3, r2
   25648:	607b      	str	r3, [r7, #4]
   2564a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2564c:	687b      	ldr	r3, [r7, #4]
   2564e:	4a04      	ldr	r2, [pc, #16]	; (25660 <spi_init_pkt_sz+0x38>)
   25650:	0019      	movs	r1, r3
   25652:	0010      	movs	r0, r2
   25654:	4b04      	ldr	r3, [pc, #16]	; (25668 <spi_init_pkt_sz+0x40>)
   25656:	4798      	blx	r3
}
   25658:	46c0      	nop			; (mov r8, r8)
   2565a:	46bd      	mov	sp, r7
   2565c:	b002      	add	sp, #8
   2565e:	bd80      	pop	{r7, pc}
   25660:	0000e824 	.word	0x0000e824
   25664:	00025801 	.word	0x00025801
   25668:	00025875 	.word	0x00025875

0002566c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2566c:	b590      	push	{r4, r7, lr}
   2566e:	b083      	sub	sp, #12
   25670:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25672:	2300      	movs	r3, #0
   25674:	9300      	str	r3, [sp, #0]
   25676:	2300      	movs	r3, #0
   25678:	2200      	movs	r2, #0
   2567a:	2100      	movs	r1, #0
   2567c:	20cf      	movs	r0, #207	; 0xcf
   2567e:	4c05      	ldr	r4, [pc, #20]	; (25694 <nm_spi_reset+0x28>)
   25680:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25682:	20cf      	movs	r0, #207	; 0xcf
   25684:	4b04      	ldr	r3, [pc, #16]	; (25698 <nm_spi_reset+0x2c>)
   25686:	4798      	blx	r3
	return M2M_SUCCESS;
   25688:	2300      	movs	r3, #0
}
   2568a:	0018      	movs	r0, r3
   2568c:	46bd      	mov	sp, r7
   2568e:	b001      	add	sp, #4
   25690:	bd90      	pop	{r4, r7, pc}
   25692:	46c0      	nop			; (mov r8, r8)
   25694:	00024055 	.word	0x00024055
   25698:	00024495 	.word	0x00024495

0002569c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   2569c:	b580      	push	{r7, lr}
   2569e:	b082      	sub	sp, #8
   256a0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   256a2:	2300      	movs	r3, #0
   256a4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   256a6:	4b40      	ldr	r3, [pc, #256]	; (257a8 <nm_spi_init+0x10c>)
   256a8:	2200      	movs	r2, #0
   256aa:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   256ac:	003b      	movs	r3, r7
   256ae:	4a3f      	ldr	r2, [pc, #252]	; (257ac <nm_spi_init+0x110>)
   256b0:	0019      	movs	r1, r3
   256b2:	0010      	movs	r0, r2
   256b4:	4b3e      	ldr	r3, [pc, #248]	; (257b0 <nm_spi_init+0x114>)
   256b6:	4798      	blx	r3
   256b8:	1e03      	subs	r3, r0, #0
   256ba:	d129      	bne.n	25710 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   256bc:	4b3a      	ldr	r3, [pc, #232]	; (257a8 <nm_spi_init+0x10c>)
   256be:	2201      	movs	r2, #1
   256c0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   256c2:	2398      	movs	r3, #152	; 0x98
   256c4:	00da      	lsls	r2, r3, #3
   256c6:	493b      	ldr	r1, [pc, #236]	; (257b4 <nm_spi_init+0x118>)
   256c8:	4b3b      	ldr	r3, [pc, #236]	; (257b8 <nm_spi_init+0x11c>)
   256ca:	0018      	movs	r0, r3
   256cc:	4b3b      	ldr	r3, [pc, #236]	; (257bc <nm_spi_init+0x120>)
   256ce:	4798      	blx	r3
   256d0:	4b3b      	ldr	r3, [pc, #236]	; (257c0 <nm_spi_init+0x124>)
   256d2:	0018      	movs	r0, r3
   256d4:	4b39      	ldr	r3, [pc, #228]	; (257bc <nm_spi_init+0x120>)
   256d6:	4798      	blx	r3
   256d8:	4b3a      	ldr	r3, [pc, #232]	; (257c4 <nm_spi_init+0x128>)
   256da:	0018      	movs	r0, r3
   256dc:	4b37      	ldr	r3, [pc, #220]	; (257bc <nm_spi_init+0x120>)
   256de:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   256e0:	003b      	movs	r3, r7
   256e2:	4a32      	ldr	r2, [pc, #200]	; (257ac <nm_spi_init+0x110>)
   256e4:	0019      	movs	r1, r3
   256e6:	0010      	movs	r0, r2
   256e8:	4b31      	ldr	r3, [pc, #196]	; (257b0 <nm_spi_init+0x114>)
   256ea:	4798      	blx	r3
   256ec:	1e03      	subs	r3, r0, #0
   256ee:	d10f      	bne.n	25710 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   256f0:	4a35      	ldr	r2, [pc, #212]	; (257c8 <nm_spi_init+0x12c>)
   256f2:	4930      	ldr	r1, [pc, #192]	; (257b4 <nm_spi_init+0x118>)
   256f4:	4b30      	ldr	r3, [pc, #192]	; (257b8 <nm_spi_init+0x11c>)
   256f6:	0018      	movs	r0, r3
   256f8:	4b30      	ldr	r3, [pc, #192]	; (257bc <nm_spi_init+0x120>)
   256fa:	4798      	blx	r3
   256fc:	4b33      	ldr	r3, [pc, #204]	; (257cc <nm_spi_init+0x130>)
   256fe:	0018      	movs	r0, r3
   25700:	4b2e      	ldr	r3, [pc, #184]	; (257bc <nm_spi_init+0x120>)
   25702:	4798      	blx	r3
   25704:	4b2f      	ldr	r3, [pc, #188]	; (257c4 <nm_spi_init+0x128>)
   25706:	0018      	movs	r0, r3
   25708:	4b2c      	ldr	r3, [pc, #176]	; (257bc <nm_spi_init+0x120>)
   2570a:	4798      	blx	r3
			return 0;
   2570c:	2300      	movs	r3, #0
   2570e:	e047      	b.n	257a0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25710:	4b25      	ldr	r3, [pc, #148]	; (257a8 <nm_spi_init+0x10c>)
   25712:	781b      	ldrb	r3, [r3, #0]
   25714:	2b00      	cmp	r3, #0
   25716:	d126      	bne.n	25766 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   25718:	683b      	ldr	r3, [r7, #0]
   2571a:	220c      	movs	r2, #12
   2571c:	4393      	bics	r3, r2
   2571e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25720:	683b      	ldr	r3, [r7, #0]
   25722:	2270      	movs	r2, #112	; 0x70
   25724:	4393      	bics	r3, r2
   25726:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   25728:	683b      	ldr	r3, [r7, #0]
   2572a:	2250      	movs	r2, #80	; 0x50
   2572c:	4313      	orrs	r3, r2
   2572e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25730:	683b      	ldr	r3, [r7, #0]
   25732:	4a1e      	ldr	r2, [pc, #120]	; (257ac <nm_spi_init+0x110>)
   25734:	0019      	movs	r1, r3
   25736:	0010      	movs	r0, r2
   25738:	4b25      	ldr	r3, [pc, #148]	; (257d0 <nm_spi_init+0x134>)
   2573a:	4798      	blx	r3
   2573c:	1e03      	subs	r3, r0, #0
   2573e:	d10f      	bne.n	25760 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25740:	4a24      	ldr	r2, [pc, #144]	; (257d4 <nm_spi_init+0x138>)
   25742:	491c      	ldr	r1, [pc, #112]	; (257b4 <nm_spi_init+0x118>)
   25744:	4b1c      	ldr	r3, [pc, #112]	; (257b8 <nm_spi_init+0x11c>)
   25746:	0018      	movs	r0, r3
   25748:	4b1c      	ldr	r3, [pc, #112]	; (257bc <nm_spi_init+0x120>)
   2574a:	4798      	blx	r3
   2574c:	4b22      	ldr	r3, [pc, #136]	; (257d8 <nm_spi_init+0x13c>)
   2574e:	0018      	movs	r0, r3
   25750:	4b1a      	ldr	r3, [pc, #104]	; (257bc <nm_spi_init+0x120>)
   25752:	4798      	blx	r3
   25754:	4b1b      	ldr	r3, [pc, #108]	; (257c4 <nm_spi_init+0x128>)
   25756:	0018      	movs	r0, r3
   25758:	4b18      	ldr	r3, [pc, #96]	; (257bc <nm_spi_init+0x120>)
   2575a:	4798      	blx	r3
			return 0;
   2575c:	2300      	movs	r3, #0
   2575e:	e01f      	b.n	257a0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25760:	4b11      	ldr	r3, [pc, #68]	; (257a8 <nm_spi_init+0x10c>)
   25762:	2201      	movs	r2, #1
   25764:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   25766:	1d3a      	adds	r2, r7, #4
   25768:	2380      	movs	r3, #128	; 0x80
   2576a:	015b      	lsls	r3, r3, #5
   2576c:	0011      	movs	r1, r2
   2576e:	0018      	movs	r0, r3
   25770:	4b0f      	ldr	r3, [pc, #60]	; (257b0 <nm_spi_init+0x114>)
   25772:	4798      	blx	r3
   25774:	1e03      	subs	r3, r0, #0
   25776:	d110      	bne.n	2579a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   25778:	4a18      	ldr	r2, [pc, #96]	; (257dc <nm_spi_init+0x140>)
   2577a:	490e      	ldr	r1, [pc, #56]	; (257b4 <nm_spi_init+0x118>)
   2577c:	4b0e      	ldr	r3, [pc, #56]	; (257b8 <nm_spi_init+0x11c>)
   2577e:	0018      	movs	r0, r3
   25780:	4b0e      	ldr	r3, [pc, #56]	; (257bc <nm_spi_init+0x120>)
   25782:	4798      	blx	r3
   25784:	4b16      	ldr	r3, [pc, #88]	; (257e0 <nm_spi_init+0x144>)
   25786:	0018      	movs	r0, r3
   25788:	4b0c      	ldr	r3, [pc, #48]	; (257bc <nm_spi_init+0x120>)
   2578a:	4798      	blx	r3
   2578c:	4b0d      	ldr	r3, [pc, #52]	; (257c4 <nm_spi_init+0x128>)
   2578e:	0018      	movs	r0, r3
   25790:	4b0a      	ldr	r3, [pc, #40]	; (257bc <nm_spi_init+0x120>)
   25792:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25794:	2306      	movs	r3, #6
   25796:	425b      	negs	r3, r3
   25798:	e002      	b.n	257a0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2579a:	4b12      	ldr	r3, [pc, #72]	; (257e4 <nm_spi_init+0x148>)
   2579c:	4798      	blx	r3


	return M2M_SUCCESS;
   2579e:	2300      	movs	r3, #0
}
   257a0:	0018      	movs	r0, r3
   257a2:	46bd      	mov	sp, r7
   257a4:	b002      	add	sp, #8
   257a6:	bd80      	pop	{r7, pc}
   257a8:	200042b4 	.word	0x200042b4
   257ac:	0000e824 	.word	0x0000e824
   257b0:	00025395 	.word	0x00025395
   257b4:	0003a488 	.word	0x0003a488
   257b8:	00039e14 	.word	0x00039e14
   257bc:	0001ea59 	.word	0x0001ea59
   257c0:	0003a2b0 	.word	0x0003a2b0
   257c4:	00039e54 	.word	0x00039e54
   257c8:	000004c3 	.word	0x000004c3
   257cc:	0003a300 	.word	0x0003a300
   257d0:	0002509d 	.word	0x0002509d
   257d4:	000004cd 	.word	0x000004cd
   257d8:	0003a330 	.word	0x0003a330
   257dc:	000004d7 	.word	0x000004d7
   257e0:	0003a364 	.word	0x0003a364
   257e4:	00025629 	.word	0x00025629

000257e8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   257e8:	b580      	push	{r7, lr}
   257ea:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   257ec:	4b03      	ldr	r3, [pc, #12]	; (257fc <nm_spi_deinit+0x14>)
   257ee:	2200      	movs	r2, #0
   257f0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   257f2:	2300      	movs	r3, #0
}
   257f4:	0018      	movs	r0, r3
   257f6:	46bd      	mov	sp, r7
   257f8:	bd80      	pop	{r7, pc}
   257fa:	46c0      	nop			; (mov r8, r8)
   257fc:	200042b4 	.word	0x200042b4

00025800 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25800:	b580      	push	{r7, lr}
   25802:	b084      	sub	sp, #16
   25804:	af00      	add	r7, sp, #0
   25806:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25808:	230c      	movs	r3, #12
   2580a:	18fa      	adds	r2, r7, r3
   2580c:	687b      	ldr	r3, [r7, #4]
   2580e:	0011      	movs	r1, r2
   25810:	0018      	movs	r0, r3
   25812:	4b03      	ldr	r3, [pc, #12]	; (25820 <nm_spi_read_reg+0x20>)
   25814:	4798      	blx	r3

	return u32Val;
   25816:	68fb      	ldr	r3, [r7, #12]
}
   25818:	0018      	movs	r0, r3
   2581a:	46bd      	mov	sp, r7
   2581c:	b004      	add	sp, #16
   2581e:	bd80      	pop	{r7, pc}
   25820:	00025395 	.word	0x00025395

00025824 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25824:	b590      	push	{r4, r7, lr}
   25826:	b085      	sub	sp, #20
   25828:	af00      	add	r7, sp, #0
   2582a:	6078      	str	r0, [r7, #4]
   2582c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2582e:	230f      	movs	r3, #15
   25830:	18fc      	adds	r4, r7, r3
   25832:	683a      	ldr	r2, [r7, #0]
   25834:	687b      	ldr	r3, [r7, #4]
   25836:	0011      	movs	r1, r2
   25838:	0018      	movs	r0, r3
   2583a:	4b0d      	ldr	r3, [pc, #52]	; (25870 <nm_spi_read_reg_with_ret+0x4c>)
   2583c:	4798      	blx	r3
   2583e:	0003      	movs	r3, r0
   25840:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25842:	230f      	movs	r3, #15
   25844:	18fb      	adds	r3, r7, r3
   25846:	781b      	ldrb	r3, [r3, #0]
   25848:	b25b      	sxtb	r3, r3
   2584a:	2b01      	cmp	r3, #1
   2584c:	d104      	bne.n	25858 <nm_spi_read_reg_with_ret+0x34>
   2584e:	230f      	movs	r3, #15
   25850:	18fb      	adds	r3, r7, r3
   25852:	2200      	movs	r2, #0
   25854:	701a      	strb	r2, [r3, #0]
   25856:	e003      	b.n	25860 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25858:	230f      	movs	r3, #15
   2585a:	18fb      	adds	r3, r7, r3
   2585c:	22fa      	movs	r2, #250	; 0xfa
   2585e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25860:	230f      	movs	r3, #15
   25862:	18fb      	adds	r3, r7, r3
   25864:	781b      	ldrb	r3, [r3, #0]
   25866:	b25b      	sxtb	r3, r3
}
   25868:	0018      	movs	r0, r3
   2586a:	46bd      	mov	sp, r7
   2586c:	b005      	add	sp, #20
   2586e:	bd90      	pop	{r4, r7, pc}
   25870:	00025395 	.word	0x00025395

00025874 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25874:	b590      	push	{r4, r7, lr}
   25876:	b085      	sub	sp, #20
   25878:	af00      	add	r7, sp, #0
   2587a:	6078      	str	r0, [r7, #4]
   2587c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2587e:	230f      	movs	r3, #15
   25880:	18fc      	adds	r4, r7, r3
   25882:	683a      	ldr	r2, [r7, #0]
   25884:	687b      	ldr	r3, [r7, #4]
   25886:	0011      	movs	r1, r2
   25888:	0018      	movs	r0, r3
   2588a:	4b0d      	ldr	r3, [pc, #52]	; (258c0 <nm_spi_write_reg+0x4c>)
   2588c:	4798      	blx	r3
   2588e:	0003      	movs	r3, r0
   25890:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25892:	230f      	movs	r3, #15
   25894:	18fb      	adds	r3, r7, r3
   25896:	781b      	ldrb	r3, [r3, #0]
   25898:	b25b      	sxtb	r3, r3
   2589a:	2b01      	cmp	r3, #1
   2589c:	d104      	bne.n	258a8 <nm_spi_write_reg+0x34>
   2589e:	230f      	movs	r3, #15
   258a0:	18fb      	adds	r3, r7, r3
   258a2:	2200      	movs	r2, #0
   258a4:	701a      	strb	r2, [r3, #0]
   258a6:	e003      	b.n	258b0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   258a8:	230f      	movs	r3, #15
   258aa:	18fb      	adds	r3, r7, r3
   258ac:	22fa      	movs	r2, #250	; 0xfa
   258ae:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   258b0:	230f      	movs	r3, #15
   258b2:	18fb      	adds	r3, r7, r3
   258b4:	781b      	ldrb	r3, [r3, #0]
   258b6:	b25b      	sxtb	r3, r3
}
   258b8:	0018      	movs	r0, r3
   258ba:	46bd      	mov	sp, r7
   258bc:	b005      	add	sp, #20
   258be:	bd90      	pop	{r4, r7, pc}
   258c0:	0002509d 	.word	0x0002509d

000258c4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   258c4:	b590      	push	{r4, r7, lr}
   258c6:	b087      	sub	sp, #28
   258c8:	af00      	add	r7, sp, #0
   258ca:	60f8      	str	r0, [r7, #12]
   258cc:	60b9      	str	r1, [r7, #8]
   258ce:	1dbb      	adds	r3, r7, #6
   258d0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   258d2:	2317      	movs	r3, #23
   258d4:	18fc      	adds	r4, r7, r3
   258d6:	1dbb      	adds	r3, r7, #6
   258d8:	881a      	ldrh	r2, [r3, #0]
   258da:	68b9      	ldr	r1, [r7, #8]
   258dc:	68fb      	ldr	r3, [r7, #12]
   258de:	0018      	movs	r0, r3
   258e0:	4b0d      	ldr	r3, [pc, #52]	; (25918 <nm_spi_read_block+0x54>)
   258e2:	4798      	blx	r3
   258e4:	0003      	movs	r3, r0
   258e6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   258e8:	2317      	movs	r3, #23
   258ea:	18fb      	adds	r3, r7, r3
   258ec:	781b      	ldrb	r3, [r3, #0]
   258ee:	b25b      	sxtb	r3, r3
   258f0:	2b01      	cmp	r3, #1
   258f2:	d104      	bne.n	258fe <nm_spi_read_block+0x3a>
   258f4:	2317      	movs	r3, #23
   258f6:	18fb      	adds	r3, r7, r3
   258f8:	2200      	movs	r2, #0
   258fa:	701a      	strb	r2, [r3, #0]
   258fc:	e003      	b.n	25906 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   258fe:	2317      	movs	r3, #23
   25900:	18fb      	adds	r3, r7, r3
   25902:	22fa      	movs	r2, #250	; 0xfa
   25904:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25906:	2317      	movs	r3, #23
   25908:	18fb      	adds	r3, r7, r3
   2590a:	781b      	ldrb	r3, [r3, #0]
   2590c:	b25b      	sxtb	r3, r3
}
   2590e:	0018      	movs	r0, r3
   25910:	46bd      	mov	sp, r7
   25912:	b007      	add	sp, #28
   25914:	bd90      	pop	{r4, r7, pc}
   25916:	46c0      	nop			; (mov r8, r8)
   25918:	0002550d 	.word	0x0002550d

0002591c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2591c:	b590      	push	{r4, r7, lr}
   2591e:	b087      	sub	sp, #28
   25920:	af00      	add	r7, sp, #0
   25922:	60f8      	str	r0, [r7, #12]
   25924:	60b9      	str	r1, [r7, #8]
   25926:	1dbb      	adds	r3, r7, #6
   25928:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2592a:	2317      	movs	r3, #23
   2592c:	18fc      	adds	r4, r7, r3
   2592e:	1dbb      	adds	r3, r7, #6
   25930:	881a      	ldrh	r2, [r3, #0]
   25932:	68b9      	ldr	r1, [r7, #8]
   25934:	68fb      	ldr	r3, [r7, #12]
   25936:	0018      	movs	r0, r3
   25938:	4b0d      	ldr	r3, [pc, #52]	; (25970 <nm_spi_write_block+0x54>)
   2593a:	4798      	blx	r3
   2593c:	0003      	movs	r3, r0
   2593e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25940:	2317      	movs	r3, #23
   25942:	18fb      	adds	r3, r7, r3
   25944:	781b      	ldrb	r3, [r3, #0]
   25946:	b25b      	sxtb	r3, r3
   25948:	2b01      	cmp	r3, #1
   2594a:	d104      	bne.n	25956 <nm_spi_write_block+0x3a>
   2594c:	2317      	movs	r3, #23
   2594e:	18fb      	adds	r3, r7, r3
   25950:	2200      	movs	r2, #0
   25952:	701a      	strb	r2, [r3, #0]
   25954:	e003      	b.n	2595e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25956:	2317      	movs	r3, #23
   25958:	18fb      	adds	r3, r7, r3
   2595a:	22fa      	movs	r2, #250	; 0xfa
   2595c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2595e:	2317      	movs	r3, #23
   25960:	18fb      	adds	r3, r7, r3
   25962:	781b      	ldrb	r3, [r3, #0]
   25964:	b25b      	sxtb	r3, r3
}
   25966:	0018      	movs	r0, r3
   25968:	46bd      	mov	sp, r7
   2596a:	b007      	add	sp, #28
   2596c:	bd90      	pop	{r4, r7, pc}
   2596e:	46c0      	nop			; (mov r8, r8)
   25970:	000251e9 	.word	0x000251e9

00025974 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25974:	b590      	push	{r4, r7, lr}
   25976:	b089      	sub	sp, #36	; 0x24
   25978:	af00      	add	r7, sp, #0
   2597a:	60b9      	str	r1, [r7, #8]
   2597c:	0011      	movs	r1, r2
   2597e:	607b      	str	r3, [r7, #4]
   25980:	230f      	movs	r3, #15
   25982:	18fb      	adds	r3, r7, r3
   25984:	1c02      	adds	r2, r0, #0
   25986:	701a      	strb	r2, [r3, #0]
   25988:	230e      	movs	r3, #14
   2598a:	18fb      	adds	r3, r7, r3
   2598c:	1c0a      	adds	r2, r1, #0
   2598e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25990:	2330      	movs	r3, #48	; 0x30
   25992:	18fb      	adds	r3, r7, r3
   25994:	881b      	ldrh	r3, [r3, #0]
   25996:	2b00      	cmp	r3, #0
   25998:	d100      	bne.n	2599c <Socket_ReadSocketData+0x28>
   2599a:	e0d7      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
   2599c:	230f      	movs	r3, #15
   2599e:	18fb      	adds	r3, r7, r3
   259a0:	2200      	movs	r2, #0
   259a2:	569a      	ldrsb	r2, [r3, r2]
   259a4:	4b6b      	ldr	r3, [pc, #428]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   259a6:	0112      	lsls	r2, r2, #4
   259a8:	58d3      	ldr	r3, [r2, r3]
   259aa:	2b00      	cmp	r3, #0
   259ac:	d100      	bne.n	259b0 <Socket_ReadSocketData+0x3c>
   259ae:	e0cd      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
   259b0:	230f      	movs	r3, #15
   259b2:	18fb      	adds	r3, r7, r3
   259b4:	781b      	ldrb	r3, [r3, #0]
   259b6:	b25b      	sxtb	r3, r3
   259b8:	4a66      	ldr	r2, [pc, #408]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   259ba:	011b      	lsls	r3, r3, #4
   259bc:	18d3      	adds	r3, r2, r3
   259be:	3304      	adds	r3, #4
   259c0:	881b      	ldrh	r3, [r3, #0]
   259c2:	b29b      	uxth	r3, r3
   259c4:	2b00      	cmp	r3, #0
   259c6:	d100      	bne.n	259ca <Socket_ReadSocketData+0x56>
   259c8:	e0c0      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
   259ca:	230f      	movs	r3, #15
   259cc:	18fb      	adds	r3, r7, r3
   259ce:	781b      	ldrb	r3, [r3, #0]
   259d0:	b25b      	sxtb	r3, r3
   259d2:	4a60      	ldr	r2, [pc, #384]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   259d4:	011b      	lsls	r3, r3, #4
   259d6:	18d3      	adds	r3, r2, r3
   259d8:	330a      	adds	r3, #10
   259da:	781b      	ldrb	r3, [r3, #0]
   259dc:	b2db      	uxtb	r3, r3
   259de:	2b01      	cmp	r3, #1
   259e0:	d000      	beq.n	259e4 <Socket_ReadSocketData+0x70>
   259e2:	e0b3      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   259e4:	687b      	ldr	r3, [r7, #4]
   259e6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   259e8:	68bb      	ldr	r3, [r7, #8]
   259ea:	2230      	movs	r2, #48	; 0x30
   259ec:	18ba      	adds	r2, r7, r2
   259ee:	8812      	ldrh	r2, [r2, #0]
   259f0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   259f2:	2319      	movs	r3, #25
   259f4:	18fb      	adds	r3, r7, r3
   259f6:	2201      	movs	r2, #1
   259f8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   259fa:	231a      	movs	r3, #26
   259fc:	18fb      	adds	r3, r7, r3
   259fe:	2230      	movs	r2, #48	; 0x30
   25a00:	18ba      	adds	r2, r7, r2
   25a02:	8812      	ldrh	r2, [r2, #0]
   25a04:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25a06:	230f      	movs	r3, #15
   25a08:	18fb      	adds	r3, r7, r3
   25a0a:	781b      	ldrb	r3, [r3, #0]
   25a0c:	b25b      	sxtb	r3, r3
   25a0e:	4a51      	ldr	r2, [pc, #324]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   25a10:	011b      	lsls	r3, r3, #4
   25a12:	18d3      	adds	r3, r2, r3
   25a14:	3304      	adds	r3, #4
   25a16:	881b      	ldrh	r3, [r3, #0]
   25a18:	b29b      	uxth	r3, r3
   25a1a:	221a      	movs	r2, #26
   25a1c:	18ba      	adds	r2, r7, r2
   25a1e:	8812      	ldrh	r2, [r2, #0]
   25a20:	1ad3      	subs	r3, r2, r3
   25a22:	b29a      	uxth	r2, r3
   25a24:	2316      	movs	r3, #22
   25a26:	18fb      	adds	r3, r7, r3
   25a28:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25a2a:	2316      	movs	r3, #22
   25a2c:	18fb      	adds	r3, r7, r3
   25a2e:	2200      	movs	r2, #0
   25a30:	5e9b      	ldrsh	r3, [r3, r2]
   25a32:	2b00      	cmp	r3, #0
   25a34:	dd0f      	ble.n	25a56 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25a36:	2319      	movs	r3, #25
   25a38:	18fb      	adds	r3, r7, r3
   25a3a:	2200      	movs	r2, #0
   25a3c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25a3e:	230f      	movs	r3, #15
   25a40:	18fb      	adds	r3, r7, r3
   25a42:	2200      	movs	r2, #0
   25a44:	569a      	ldrsb	r2, [r3, r2]
   25a46:	231a      	movs	r3, #26
   25a48:	18fb      	adds	r3, r7, r3
   25a4a:	4942      	ldr	r1, [pc, #264]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   25a4c:	0112      	lsls	r2, r2, #4
   25a4e:	188a      	adds	r2, r1, r2
   25a50:	3204      	adds	r2, #4
   25a52:	8812      	ldrh	r2, [r2, #0]
   25a54:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25a56:	230f      	movs	r3, #15
   25a58:	18fb      	adds	r3, r7, r3
   25a5a:	2200      	movs	r2, #0
   25a5c:	569a      	ldrsb	r2, [r3, r2]
   25a5e:	4b3d      	ldr	r3, [pc, #244]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   25a60:	0112      	lsls	r2, r2, #4
   25a62:	58d1      	ldr	r1, [r2, r3]
   25a64:	2319      	movs	r3, #25
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	781c      	ldrb	r4, [r3, #0]
   25a6a:	231a      	movs	r3, #26
   25a6c:	18fb      	adds	r3, r7, r3
   25a6e:	881a      	ldrh	r2, [r3, #0]
   25a70:	69f8      	ldr	r0, [r7, #28]
   25a72:	0023      	movs	r3, r4
   25a74:	4c38      	ldr	r4, [pc, #224]	; (25b58 <Socket_ReadSocketData+0x1e4>)
   25a76:	47a0      	blx	r4
   25a78:	1e03      	subs	r3, r0, #0
   25a7a:	d14f      	bne.n	25b1c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25a7c:	230f      	movs	r3, #15
   25a7e:	18fb      	adds	r3, r7, r3
   25a80:	2200      	movs	r2, #0
   25a82:	569a      	ldrsb	r2, [r3, r2]
   25a84:	4b33      	ldr	r3, [pc, #204]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   25a86:	0112      	lsls	r2, r2, #4
   25a88:	58d2      	ldr	r2, [r2, r3]
   25a8a:	68bb      	ldr	r3, [r7, #8]
   25a8c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25a8e:	231a      	movs	r3, #26
   25a90:	18fb      	adds	r3, r7, r3
   25a92:	2200      	movs	r2, #0
   25a94:	5e9a      	ldrsh	r2, [r3, r2]
   25a96:	68bb      	ldr	r3, [r7, #8]
   25a98:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25a9a:	68bb      	ldr	r3, [r7, #8]
   25a9c:	88da      	ldrh	r2, [r3, #6]
   25a9e:	231a      	movs	r3, #26
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	881b      	ldrh	r3, [r3, #0]
   25aa4:	1ad3      	subs	r3, r2, r3
   25aa6:	b29a      	uxth	r2, r3
   25aa8:	68bb      	ldr	r3, [r7, #8]
   25aaa:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25aac:	4b2b      	ldr	r3, [pc, #172]	; (25b5c <Socket_ReadSocketData+0x1e8>)
   25aae:	681b      	ldr	r3, [r3, #0]
   25ab0:	2b00      	cmp	r3, #0
   25ab2:	d00b      	beq.n	25acc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25ab4:	4b29      	ldr	r3, [pc, #164]	; (25b5c <Socket_ReadSocketData+0x1e8>)
   25ab6:	681b      	ldr	r3, [r3, #0]
   25ab8:	68bc      	ldr	r4, [r7, #8]
   25aba:	220e      	movs	r2, #14
   25abc:	18ba      	adds	r2, r7, r2
   25abe:	7811      	ldrb	r1, [r2, #0]
   25ac0:	220f      	movs	r2, #15
   25ac2:	18ba      	adds	r2, r7, r2
   25ac4:	2000      	movs	r0, #0
   25ac6:	5610      	ldrsb	r0, [r2, r0]
   25ac8:	0022      	movs	r2, r4
   25aca:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25acc:	2330      	movs	r3, #48	; 0x30
   25ace:	18f9      	adds	r1, r7, r3
   25ad0:	2330      	movs	r3, #48	; 0x30
   25ad2:	18fa      	adds	r2, r7, r3
   25ad4:	231a      	movs	r3, #26
   25ad6:	18fb      	adds	r3, r7, r3
   25ad8:	8812      	ldrh	r2, [r2, #0]
   25ada:	881b      	ldrh	r3, [r3, #0]
   25adc:	1ad3      	subs	r3, r2, r3
   25ade:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25ae0:	231a      	movs	r3, #26
   25ae2:	18fb      	adds	r3, r7, r3
   25ae4:	881b      	ldrh	r3, [r3, #0]
   25ae6:	69fa      	ldr	r2, [r7, #28]
   25ae8:	18d3      	adds	r3, r2, r3
   25aea:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25aec:	230f      	movs	r3, #15
   25aee:	18fb      	adds	r3, r7, r3
   25af0:	781b      	ldrb	r3, [r3, #0]
   25af2:	b25b      	sxtb	r3, r3
   25af4:	4a17      	ldr	r2, [pc, #92]	; (25b54 <Socket_ReadSocketData+0x1e0>)
   25af6:	011b      	lsls	r3, r3, #4
   25af8:	18d3      	adds	r3, r2, r3
   25afa:	330a      	adds	r3, #10
   25afc:	781b      	ldrb	r3, [r3, #0]
   25afe:	b2db      	uxtb	r3, r3
   25b00:	2b00      	cmp	r3, #0
   25b02:	d11c      	bne.n	25b3e <Socket_ReadSocketData+0x1ca>
   25b04:	2330      	movs	r3, #48	; 0x30
   25b06:	18fb      	adds	r3, r7, r3
   25b08:	881b      	ldrh	r3, [r3, #0]
   25b0a:	2b00      	cmp	r3, #0
   25b0c:	d017      	beq.n	25b3e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25b0e:	2301      	movs	r3, #1
   25b10:	2200      	movs	r2, #0
   25b12:	2100      	movs	r1, #0
   25b14:	2000      	movs	r0, #0
   25b16:	4c10      	ldr	r4, [pc, #64]	; (25b58 <Socket_ReadSocketData+0x1e4>)
   25b18:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25b1a:	e017      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25b1c:	4b10      	ldr	r3, [pc, #64]	; (25b60 <Socket_ReadSocketData+0x1ec>)
   25b1e:	0018      	movs	r0, r3
   25b20:	4b10      	ldr	r3, [pc, #64]	; (25b64 <Socket_ReadSocketData+0x1f0>)
   25b22:	4798      	blx	r3
   25b24:	2330      	movs	r3, #48	; 0x30
   25b26:	18fb      	adds	r3, r7, r3
   25b28:	881a      	ldrh	r2, [r3, #0]
   25b2a:	4b0f      	ldr	r3, [pc, #60]	; (25b68 <Socket_ReadSocketData+0x1f4>)
   25b2c:	0011      	movs	r1, r2
   25b2e:	0018      	movs	r0, r3
   25b30:	4b0c      	ldr	r3, [pc, #48]	; (25b64 <Socket_ReadSocketData+0x1f0>)
   25b32:	4798      	blx	r3
   25b34:	4b0d      	ldr	r3, [pc, #52]	; (25b6c <Socket_ReadSocketData+0x1f8>)
   25b36:	0018      	movs	r0, r3
   25b38:	4b0a      	ldr	r3, [pc, #40]	; (25b64 <Socket_ReadSocketData+0x1f0>)
   25b3a:	4798      	blx	r3
				break;
   25b3c:	e006      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25b3e:	2330      	movs	r3, #48	; 0x30
   25b40:	18fb      	adds	r3, r7, r3
   25b42:	881b      	ldrh	r3, [r3, #0]
   25b44:	2b00      	cmp	r3, #0
   25b46:	d000      	beq.n	25b4a <Socket_ReadSocketData+0x1d6>
   25b48:	e753      	b.n	259f2 <Socket_ReadSocketData+0x7e>
	}
}
   25b4a:	e7ff      	b.n	25b4c <Socket_ReadSocketData+0x1d8>
   25b4c:	46c0      	nop			; (mov r8, r8)
   25b4e:	46bd      	mov	sp, r7
   25b50:	b009      	add	sp, #36	; 0x24
   25b52:	bd90      	pop	{r4, r7, pc}
   25b54:	20005b98 	.word	0x20005b98
   25b58:	0002236d 	.word	0x0002236d
   25b5c:	20005c48 	.word	0x20005c48
   25b60:	0003a494 	.word	0x0003a494
   25b64:	0001ea59 	.word	0x0001ea59
   25b68:	0003a4a0 	.word	0x0003a4a0
   25b6c:	0003a4b4 	.word	0x0003a4b4

00025b70 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25b70:	b590      	push	{r4, r7, lr}
   25b72:	b0bb      	sub	sp, #236	; 0xec
   25b74:	af02      	add	r7, sp, #8
   25b76:	603a      	str	r2, [r7, #0]
   25b78:	1dfb      	adds	r3, r7, #7
   25b7a:	1c02      	adds	r2, r0, #0
   25b7c:	701a      	strb	r2, [r3, #0]
   25b7e:	1d3b      	adds	r3, r7, #4
   25b80:	1c0a      	adds	r2, r1, #0
   25b82:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25b84:	1dfb      	adds	r3, r7, #7
   25b86:	781b      	ldrb	r3, [r3, #0]
   25b88:	2b41      	cmp	r3, #65	; 0x41
   25b8a:	d003      	beq.n	25b94 <m2m_ip_cb+0x24>
   25b8c:	1dfb      	adds	r3, r7, #7
   25b8e:	781b      	ldrb	r3, [r3, #0]
   25b90:	2b54      	cmp	r3, #84	; 0x54
   25b92:	d120      	bne.n	25bd6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25b94:	23cc      	movs	r3, #204	; 0xcc
   25b96:	18f9      	adds	r1, r7, r3
   25b98:	6838      	ldr	r0, [r7, #0]
   25b9a:	2300      	movs	r3, #0
   25b9c:	2204      	movs	r2, #4
   25b9e:	4c98      	ldr	r4, [pc, #608]	; (25e00 <m2m_ip_cb+0x290>)
   25ba0:	47a0      	blx	r4
   25ba2:	1e03      	subs	r3, r0, #0
   25ba4:	d000      	beq.n	25ba8 <m2m_ip_cb+0x38>
   25ba6:	e275      	b.n	26094 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25ba8:	23cc      	movs	r3, #204	; 0xcc
   25baa:	18fb      	adds	r3, r7, r3
   25bac:	2201      	movs	r2, #1
   25bae:	569a      	ldrsb	r2, [r3, r2]
   25bb0:	23c8      	movs	r3, #200	; 0xc8
   25bb2:	18fb      	adds	r3, r7, r3
   25bb4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25bb6:	4b93      	ldr	r3, [pc, #588]	; (25e04 <m2m_ip_cb+0x294>)
   25bb8:	681b      	ldr	r3, [r3, #0]
   25bba:	2b00      	cmp	r3, #0
   25bbc:	d100      	bne.n	25bc0 <m2m_ip_cb+0x50>
   25bbe:	e269      	b.n	26094 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25bc0:	4b90      	ldr	r3, [pc, #576]	; (25e04 <m2m_ip_cb+0x294>)
   25bc2:	681b      	ldr	r3, [r3, #0]
   25bc4:	22cc      	movs	r2, #204	; 0xcc
   25bc6:	18ba      	adds	r2, r7, r2
   25bc8:	2000      	movs	r0, #0
   25bca:	5610      	ldrsb	r0, [r2, r0]
   25bcc:	22c8      	movs	r2, #200	; 0xc8
   25bce:	18ba      	adds	r2, r7, r2
   25bd0:	2101      	movs	r1, #1
   25bd2:	4798      	blx	r3
	{
   25bd4:	e25e      	b.n	26094 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25bd6:	1dfb      	adds	r3, r7, #7
   25bd8:	781b      	ldrb	r3, [r3, #0]
   25bda:	2b42      	cmp	r3, #66	; 0x42
   25bdc:	d120      	bne.n	25c20 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25bde:	23c4      	movs	r3, #196	; 0xc4
   25be0:	18f9      	adds	r1, r7, r3
   25be2:	6838      	ldr	r0, [r7, #0]
   25be4:	2300      	movs	r3, #0
   25be6:	2204      	movs	r2, #4
   25be8:	4c85      	ldr	r4, [pc, #532]	; (25e00 <m2m_ip_cb+0x290>)
   25bea:	47a0      	blx	r4
   25bec:	1e03      	subs	r3, r0, #0
   25bee:	d000      	beq.n	25bf2 <m2m_ip_cb+0x82>
   25bf0:	e257      	b.n	260a2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25bf2:	23c4      	movs	r3, #196	; 0xc4
   25bf4:	18fb      	adds	r3, r7, r3
   25bf6:	2201      	movs	r2, #1
   25bf8:	569a      	ldrsb	r2, [r3, r2]
   25bfa:	23c0      	movs	r3, #192	; 0xc0
   25bfc:	18fb      	adds	r3, r7, r3
   25bfe:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25c00:	4b80      	ldr	r3, [pc, #512]	; (25e04 <m2m_ip_cb+0x294>)
   25c02:	681b      	ldr	r3, [r3, #0]
   25c04:	2b00      	cmp	r3, #0
   25c06:	d100      	bne.n	25c0a <m2m_ip_cb+0x9a>
   25c08:	e24b      	b.n	260a2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25c0a:	4b7e      	ldr	r3, [pc, #504]	; (25e04 <m2m_ip_cb+0x294>)
   25c0c:	681b      	ldr	r3, [r3, #0]
   25c0e:	22c4      	movs	r2, #196	; 0xc4
   25c10:	18ba      	adds	r2, r7, r2
   25c12:	2000      	movs	r0, #0
   25c14:	5610      	ldrsb	r0, [r2, r0]
   25c16:	22c0      	movs	r2, #192	; 0xc0
   25c18:	18ba      	adds	r2, r7, r2
   25c1a:	2102      	movs	r1, #2
   25c1c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25c1e:	e240      	b.n	260a2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25c20:	1dfb      	adds	r3, r7, #7
   25c22:	781b      	ldrb	r3, [r3, #0]
   25c24:	2b43      	cmp	r3, #67	; 0x43
   25c26:	d000      	beq.n	25c2a <m2m_ip_cb+0xba>
   25c28:	e086      	b.n	25d38 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25c2a:	23b4      	movs	r3, #180	; 0xb4
   25c2c:	18f9      	adds	r1, r7, r3
   25c2e:	6838      	ldr	r0, [r7, #0]
   25c30:	2300      	movs	r3, #0
   25c32:	220c      	movs	r2, #12
   25c34:	4c72      	ldr	r4, [pc, #456]	; (25e00 <m2m_ip_cb+0x290>)
   25c36:	47a0      	blx	r4
   25c38:	1e03      	subs	r3, r0, #0
   25c3a:	d000      	beq.n	25c3e <m2m_ip_cb+0xce>
   25c3c:	e231      	b.n	260a2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25c3e:	23b4      	movs	r3, #180	; 0xb4
   25c40:	18fb      	adds	r3, r7, r3
   25c42:	7a5b      	ldrb	r3, [r3, #9]
   25c44:	b25b      	sxtb	r3, r3
   25c46:	2b00      	cmp	r3, #0
   25c48:	db4f      	blt.n	25cea <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25c4a:	23b4      	movs	r3, #180	; 0xb4
   25c4c:	18fb      	adds	r3, r7, r3
   25c4e:	7a5b      	ldrb	r3, [r3, #9]
   25c50:	b25b      	sxtb	r3, r3
   25c52:	0018      	movs	r0, r3
   25c54:	23b4      	movs	r3, #180	; 0xb4
   25c56:	18fb      	adds	r3, r7, r3
   25c58:	7a1b      	ldrb	r3, [r3, #8]
   25c5a:	b25b      	sxtb	r3, r3
   25c5c:	4a6a      	ldr	r2, [pc, #424]	; (25e08 <m2m_ip_cb+0x298>)
   25c5e:	011b      	lsls	r3, r3, #4
   25c60:	18d3      	adds	r3, r2, r3
   25c62:	330b      	adds	r3, #11
   25c64:	781b      	ldrb	r3, [r3, #0]
   25c66:	b2d9      	uxtb	r1, r3
   25c68:	4a67      	ldr	r2, [pc, #412]	; (25e08 <m2m_ip_cb+0x298>)
   25c6a:	0103      	lsls	r3, r0, #4
   25c6c:	18d3      	adds	r3, r2, r3
   25c6e:	330b      	adds	r3, #11
   25c70:	1c0a      	adds	r2, r1, #0
   25c72:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25c74:	23b4      	movs	r3, #180	; 0xb4
   25c76:	18fb      	adds	r3, r7, r3
   25c78:	7a5b      	ldrb	r3, [r3, #9]
   25c7a:	b25b      	sxtb	r3, r3
   25c7c:	4a62      	ldr	r2, [pc, #392]	; (25e08 <m2m_ip_cb+0x298>)
   25c7e:	011b      	lsls	r3, r3, #4
   25c80:	18d3      	adds	r3, r2, r3
   25c82:	330a      	adds	r3, #10
   25c84:	2201      	movs	r2, #1
   25c86:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25c88:	23b4      	movs	r3, #180	; 0xb4
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	7a5b      	ldrb	r3, [r3, #9]
   25c8e:	b25b      	sxtb	r3, r3
   25c90:	0018      	movs	r0, r3
   25c92:	23b4      	movs	r3, #180	; 0xb4
   25c94:	18fb      	adds	r3, r7, r3
   25c96:	895b      	ldrh	r3, [r3, #10]
   25c98:	3b08      	subs	r3, #8
   25c9a:	b299      	uxth	r1, r3
   25c9c:	4a5a      	ldr	r2, [pc, #360]	; (25e08 <m2m_ip_cb+0x298>)
   25c9e:	0103      	lsls	r3, r0, #4
   25ca0:	18d3      	adds	r3, r2, r3
   25ca2:	3308      	adds	r3, #8
   25ca4:	1c0a      	adds	r2, r1, #0
   25ca6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25ca8:	4b58      	ldr	r3, [pc, #352]	; (25e0c <m2m_ip_cb+0x29c>)
   25caa:	881b      	ldrh	r3, [r3, #0]
   25cac:	b29b      	uxth	r3, r3
   25cae:	3301      	adds	r3, #1
   25cb0:	b29a      	uxth	r2, r3
   25cb2:	4b56      	ldr	r3, [pc, #344]	; (25e0c <m2m_ip_cb+0x29c>)
   25cb4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25cb6:	4b55      	ldr	r3, [pc, #340]	; (25e0c <m2m_ip_cb+0x29c>)
   25cb8:	881b      	ldrh	r3, [r3, #0]
   25cba:	b29b      	uxth	r3, r3
   25cbc:	2b00      	cmp	r3, #0
   25cbe:	d106      	bne.n	25cce <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25cc0:	4b52      	ldr	r3, [pc, #328]	; (25e0c <m2m_ip_cb+0x29c>)
   25cc2:	881b      	ldrh	r3, [r3, #0]
   25cc4:	b29b      	uxth	r3, r3
   25cc6:	3301      	adds	r3, #1
   25cc8:	b29a      	uxth	r2, r3
   25cca:	4b50      	ldr	r3, [pc, #320]	; (25e0c <m2m_ip_cb+0x29c>)
   25ccc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25cce:	23b4      	movs	r3, #180	; 0xb4
   25cd0:	18fb      	adds	r3, r7, r3
   25cd2:	7a5b      	ldrb	r3, [r3, #9]
   25cd4:	b25b      	sxtb	r3, r3
   25cd6:	0018      	movs	r0, r3
   25cd8:	4b4c      	ldr	r3, [pc, #304]	; (25e0c <m2m_ip_cb+0x29c>)
   25cda:	881b      	ldrh	r3, [r3, #0]
   25cdc:	b299      	uxth	r1, r3
   25cde:	4a4a      	ldr	r2, [pc, #296]	; (25e08 <m2m_ip_cb+0x298>)
   25ce0:	0103      	lsls	r3, r0, #4
   25ce2:	18d3      	adds	r3, r2, r3
   25ce4:	3306      	adds	r3, #6
   25ce6:	1c0a      	adds	r2, r1, #0
   25ce8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25cea:	23b4      	movs	r3, #180	; 0xb4
   25cec:	18fb      	adds	r3, r7, r3
   25cee:	2209      	movs	r2, #9
   25cf0:	569a      	ldrsb	r2, [r3, r2]
   25cf2:	23a0      	movs	r3, #160	; 0xa0
   25cf4:	18fb      	adds	r3, r7, r3
   25cf6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25cf8:	23a0      	movs	r3, #160	; 0xa0
   25cfa:	18fb      	adds	r3, r7, r3
   25cfc:	2202      	movs	r2, #2
   25cfe:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25d00:	23b4      	movs	r3, #180	; 0xb4
   25d02:	18fb      	adds	r3, r7, r3
   25d04:	885a      	ldrh	r2, [r3, #2]
   25d06:	23a0      	movs	r3, #160	; 0xa0
   25d08:	18fb      	adds	r3, r7, r3
   25d0a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25d0c:	23b4      	movs	r3, #180	; 0xb4
   25d0e:	18fb      	adds	r3, r7, r3
   25d10:	685a      	ldr	r2, [r3, #4]
   25d12:	23a0      	movs	r3, #160	; 0xa0
   25d14:	18fb      	adds	r3, r7, r3
   25d16:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25d18:	4b3a      	ldr	r3, [pc, #232]	; (25e04 <m2m_ip_cb+0x294>)
   25d1a:	681b      	ldr	r3, [r3, #0]
   25d1c:	2b00      	cmp	r3, #0
   25d1e:	d100      	bne.n	25d22 <m2m_ip_cb+0x1b2>
   25d20:	e1bf      	b.n	260a2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25d22:	4b38      	ldr	r3, [pc, #224]	; (25e04 <m2m_ip_cb+0x294>)
   25d24:	681b      	ldr	r3, [r3, #0]
   25d26:	22b4      	movs	r2, #180	; 0xb4
   25d28:	18ba      	adds	r2, r7, r2
   25d2a:	2008      	movs	r0, #8
   25d2c:	5610      	ldrsb	r0, [r2, r0]
   25d2e:	22a0      	movs	r2, #160	; 0xa0
   25d30:	18ba      	adds	r2, r7, r2
   25d32:	2104      	movs	r1, #4
   25d34:	4798      	blx	r3
}
   25d36:	e1b4      	b.n	260a2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25d38:	1dfb      	adds	r3, r7, #7
   25d3a:	781b      	ldrb	r3, [r3, #0]
   25d3c:	2b44      	cmp	r3, #68	; 0x44
   25d3e:	d003      	beq.n	25d48 <m2m_ip_cb+0x1d8>
   25d40:	1dfb      	adds	r3, r7, #7
   25d42:	781b      	ldrb	r3, [r3, #0]
   25d44:	2b4b      	cmp	r3, #75	; 0x4b
   25d46:	d13d      	bne.n	25dc4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25d48:	239c      	movs	r3, #156	; 0x9c
   25d4a:	18f9      	adds	r1, r7, r3
   25d4c:	6838      	ldr	r0, [r7, #0]
   25d4e:	2300      	movs	r3, #0
   25d50:	2204      	movs	r2, #4
   25d52:	4c2b      	ldr	r4, [pc, #172]	; (25e00 <m2m_ip_cb+0x290>)
   25d54:	47a0      	blx	r4
   25d56:	1e03      	subs	r3, r0, #0
   25d58:	d000      	beq.n	25d5c <m2m_ip_cb+0x1ec>
   25d5a:	e19d      	b.n	26098 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25d5c:	239c      	movs	r3, #156	; 0x9c
   25d5e:	18fb      	adds	r3, r7, r3
   25d60:	2200      	movs	r2, #0
   25d62:	569a      	ldrsb	r2, [r3, r2]
   25d64:	2398      	movs	r3, #152	; 0x98
   25d66:	18fb      	adds	r3, r7, r3
   25d68:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25d6a:	239c      	movs	r3, #156	; 0x9c
   25d6c:	18fb      	adds	r3, r7, r3
   25d6e:	2201      	movs	r2, #1
   25d70:	569a      	ldrsb	r2, [r3, r2]
   25d72:	2398      	movs	r3, #152	; 0x98
   25d74:	18fb      	adds	r3, r7, r3
   25d76:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25d78:	239c      	movs	r3, #156	; 0x9c
   25d7a:	18fb      	adds	r3, r7, r3
   25d7c:	785b      	ldrb	r3, [r3, #1]
   25d7e:	b25b      	sxtb	r3, r3
   25d80:	2b00      	cmp	r3, #0
   25d82:	d10f      	bne.n	25da4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25d84:	239c      	movs	r3, #156	; 0x9c
   25d86:	18fb      	adds	r3, r7, r3
   25d88:	781b      	ldrb	r3, [r3, #0]
   25d8a:	b25b      	sxtb	r3, r3
   25d8c:	0018      	movs	r0, r3
   25d8e:	239c      	movs	r3, #156	; 0x9c
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	885b      	ldrh	r3, [r3, #2]
   25d94:	3b08      	subs	r3, #8
   25d96:	b299      	uxth	r1, r3
   25d98:	4a1b      	ldr	r2, [pc, #108]	; (25e08 <m2m_ip_cb+0x298>)
   25d9a:	0103      	lsls	r3, r0, #4
   25d9c:	18d3      	adds	r3, r2, r3
   25d9e:	3308      	adds	r3, #8
   25da0:	1c0a      	adds	r2, r1, #0
   25da2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25da4:	4b17      	ldr	r3, [pc, #92]	; (25e04 <m2m_ip_cb+0x294>)
   25da6:	681b      	ldr	r3, [r3, #0]
   25da8:	2b00      	cmp	r3, #0
   25daa:	d100      	bne.n	25dae <m2m_ip_cb+0x23e>
   25dac:	e174      	b.n	26098 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25dae:	4b15      	ldr	r3, [pc, #84]	; (25e04 <m2m_ip_cb+0x294>)
   25db0:	681b      	ldr	r3, [r3, #0]
   25db2:	229c      	movs	r2, #156	; 0x9c
   25db4:	18ba      	adds	r2, r7, r2
   25db6:	2000      	movs	r0, #0
   25db8:	5610      	ldrsb	r0, [r2, r0]
   25dba:	2298      	movs	r2, #152	; 0x98
   25dbc:	18ba      	adds	r2, r7, r2
   25dbe:	2105      	movs	r1, #5
   25dc0:	4798      	blx	r3
	{
   25dc2:	e169      	b.n	26098 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25dc4:	1dfb      	adds	r3, r7, #7
   25dc6:	781b      	ldrb	r3, [r3, #0]
   25dc8:	2b4a      	cmp	r3, #74	; 0x4a
   25dca:	d123      	bne.n	25e14 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25dcc:	230c      	movs	r3, #12
   25dce:	18f9      	adds	r1, r7, r3
   25dd0:	6838      	ldr	r0, [r7, #0]
   25dd2:	2300      	movs	r3, #0
   25dd4:	2244      	movs	r2, #68	; 0x44
   25dd6:	4c0a      	ldr	r4, [pc, #40]	; (25e00 <m2m_ip_cb+0x290>)
   25dd8:	47a0      	blx	r4
   25dda:	1e03      	subs	r3, r0, #0
   25ddc:	d000      	beq.n	25de0 <m2m_ip_cb+0x270>
   25dde:	e160      	b.n	260a2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25de0:	4b0b      	ldr	r3, [pc, #44]	; (25e10 <m2m_ip_cb+0x2a0>)
   25de2:	681b      	ldr	r3, [r3, #0]
   25de4:	2b00      	cmp	r3, #0
   25de6:	d100      	bne.n	25dea <m2m_ip_cb+0x27a>
   25de8:	e15b      	b.n	260a2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25dea:	4b09      	ldr	r3, [pc, #36]	; (25e10 <m2m_ip_cb+0x2a0>)
   25dec:	681a      	ldr	r2, [r3, #0]
   25dee:	230c      	movs	r3, #12
   25df0:	18fb      	adds	r3, r7, r3
   25df2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25df4:	230c      	movs	r3, #12
   25df6:	18fb      	adds	r3, r7, r3
   25df8:	0018      	movs	r0, r3
   25dfa:	4790      	blx	r2
}
   25dfc:	e151      	b.n	260a2 <m2m_ip_cb+0x532>
   25dfe:	46c0      	nop			; (mov r8, r8)
   25e00:	0002236d 	.word	0x0002236d
   25e04:	20005c48 	.word	0x20005c48
   25e08:	20005b98 	.word	0x20005b98
   25e0c:	200042b6 	.word	0x200042b6
   25e10:	20005c50 	.word	0x20005c50
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25e14:	1dfb      	adds	r3, r7, #7
   25e16:	781b      	ldrb	r3, [r3, #0]
   25e18:	2b46      	cmp	r3, #70	; 0x46
   25e1a:	d008      	beq.n	25e2e <m2m_ip_cb+0x2be>
   25e1c:	1dfb      	adds	r3, r7, #7
   25e1e:	781b      	ldrb	r3, [r3, #0]
   25e20:	2b48      	cmp	r3, #72	; 0x48
   25e22:	d004      	beq.n	25e2e <m2m_ip_cb+0x2be>
   25e24:	1dfb      	adds	r3, r7, #7
   25e26:	781b      	ldrb	r3, [r3, #0]
   25e28:	2b4d      	cmp	r3, #77	; 0x4d
   25e2a:	d000      	beq.n	25e2e <m2m_ip_cb+0x2be>
   25e2c:	e0b4      	b.n	25f98 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25e2e:	23df      	movs	r3, #223	; 0xdf
   25e30:	18fb      	adds	r3, r7, r3
   25e32:	2206      	movs	r2, #6
   25e34:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25e36:	1dfb      	adds	r3, r7, #7
   25e38:	781b      	ldrb	r3, [r3, #0]
   25e3a:	2b48      	cmp	r3, #72	; 0x48
   25e3c:	d103      	bne.n	25e46 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25e3e:	23df      	movs	r3, #223	; 0xdf
   25e40:	18fb      	adds	r3, r7, r3
   25e42:	2209      	movs	r2, #9
   25e44:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25e46:	23d8      	movs	r3, #216	; 0xd8
   25e48:	18fb      	adds	r3, r7, r3
   25e4a:	2210      	movs	r2, #16
   25e4c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25e4e:	23d8      	movs	r3, #216	; 0xd8
   25e50:	18fb      	adds	r3, r7, r3
   25e52:	881a      	ldrh	r2, [r3, #0]
   25e54:	2388      	movs	r3, #136	; 0x88
   25e56:	18f9      	adds	r1, r7, r3
   25e58:	6838      	ldr	r0, [r7, #0]
   25e5a:	2300      	movs	r3, #0
   25e5c:	4c93      	ldr	r4, [pc, #588]	; (260ac <m2m_ip_cb+0x53c>)
   25e5e:	47a0      	blx	r4
   25e60:	1e03      	subs	r3, r0, #0
   25e62:	d000      	beq.n	25e66 <m2m_ip_cb+0x2f6>
   25e64:	e11a      	b.n	2609c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25e66:	23d6      	movs	r3, #214	; 0xd6
   25e68:	18fb      	adds	r3, r7, r3
   25e6a:	2200      	movs	r2, #0
   25e6c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25e6e:	23d5      	movs	r3, #213	; 0xd5
   25e70:	18fb      	adds	r3, r7, r3
   25e72:	2288      	movs	r2, #136	; 0x88
   25e74:	18ba      	adds	r2, r7, r2
   25e76:	7b12      	ldrb	r2, [r2, #12]
   25e78:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25e7a:	23d6      	movs	r3, #214	; 0xd6
   25e7c:	18fb      	adds	r3, r7, r3
   25e7e:	2288      	movs	r2, #136	; 0x88
   25e80:	18ba      	adds	r2, r7, r2
   25e82:	89d2      	ldrh	r2, [r2, #14]
   25e84:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25e86:	23d5      	movs	r3, #213	; 0xd5
   25e88:	18fb      	adds	r3, r7, r3
   25e8a:	781b      	ldrb	r3, [r3, #0]
   25e8c:	b25b      	sxtb	r3, r3
   25e8e:	4a88      	ldr	r2, [pc, #544]	; (260b0 <m2m_ip_cb+0x540>)
   25e90:	011b      	lsls	r3, r3, #4
   25e92:	18d3      	adds	r3, r2, r3
   25e94:	330c      	adds	r3, #12
   25e96:	2200      	movs	r2, #0
   25e98:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25e9a:	23d2      	movs	r3, #210	; 0xd2
   25e9c:	18fb      	adds	r3, r7, r3
   25e9e:	2288      	movs	r2, #136	; 0x88
   25ea0:	18ba      	adds	r2, r7, r2
   25ea2:	8912      	ldrh	r2, [r2, #8]
   25ea4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25ea6:	23d0      	movs	r3, #208	; 0xd0
   25ea8:	18fb      	adds	r3, r7, r3
   25eaa:	2288      	movs	r2, #136	; 0x88
   25eac:	18ba      	adds	r2, r7, r2
   25eae:	8952      	ldrh	r2, [r2, #10]
   25eb0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25eb2:	2388      	movs	r3, #136	; 0x88
   25eb4:	18fb      	adds	r3, r7, r3
   25eb6:	885a      	ldrh	r2, [r3, #2]
   25eb8:	2370      	movs	r3, #112	; 0x70
   25eba:	18fb      	adds	r3, r7, r3
   25ebc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25ebe:	2388      	movs	r3, #136	; 0x88
   25ec0:	18fb      	adds	r3, r7, r3
   25ec2:	685a      	ldr	r2, [r3, #4]
   25ec4:	2370      	movs	r3, #112	; 0x70
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25eca:	23d5      	movs	r3, #213	; 0xd5
   25ecc:	18fb      	adds	r3, r7, r3
   25ece:	781b      	ldrb	r3, [r3, #0]
   25ed0:	b25b      	sxtb	r3, r3
   25ed2:	4a77      	ldr	r2, [pc, #476]	; (260b0 <m2m_ip_cb+0x540>)
   25ed4:	011b      	lsls	r3, r3, #4
   25ed6:	18d3      	adds	r3, r2, r3
   25ed8:	3306      	adds	r3, #6
   25eda:	881b      	ldrh	r3, [r3, #0]
   25edc:	b29b      	uxth	r3, r3
   25ede:	22d6      	movs	r2, #214	; 0xd6
   25ee0:	18ba      	adds	r2, r7, r2
   25ee2:	8812      	ldrh	r2, [r2, #0]
   25ee4:	429a      	cmp	r2, r3
   25ee6:	d148      	bne.n	25f7a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25ee8:	23d2      	movs	r3, #210	; 0xd2
   25eea:	18fb      	adds	r3, r7, r3
   25eec:	2200      	movs	r2, #0
   25eee:	5e9b      	ldrsh	r3, [r3, r2]
   25ef0:	2b00      	cmp	r3, #0
   25ef2:	dd25      	ble.n	25f40 <m2m_ip_cb+0x3d0>
   25ef4:	23d2      	movs	r3, #210	; 0xd2
   25ef6:	18fb      	adds	r3, r7, r3
   25ef8:	2200      	movs	r2, #0
   25efa:	5e9a      	ldrsh	r2, [r3, r2]
   25efc:	1d3b      	adds	r3, r7, #4
   25efe:	881b      	ldrh	r3, [r3, #0]
   25f00:	429a      	cmp	r2, r3
   25f02:	da1d      	bge.n	25f40 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25f04:	23d0      	movs	r3, #208	; 0xd0
   25f06:	18fb      	adds	r3, r7, r3
   25f08:	881b      	ldrh	r3, [r3, #0]
   25f0a:	683a      	ldr	r2, [r7, #0]
   25f0c:	18d3      	adds	r3, r2, r3
   25f0e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25f10:	23d8      	movs	r3, #216	; 0xd8
   25f12:	18fb      	adds	r3, r7, r3
   25f14:	22d2      	movs	r2, #210	; 0xd2
   25f16:	18ba      	adds	r2, r7, r2
   25f18:	8812      	ldrh	r2, [r2, #0]
   25f1a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25f1c:	683c      	ldr	r4, [r7, #0]
   25f1e:	23df      	movs	r3, #223	; 0xdf
   25f20:	18fb      	adds	r3, r7, r3
   25f22:	781a      	ldrb	r2, [r3, #0]
   25f24:	2370      	movs	r3, #112	; 0x70
   25f26:	18f9      	adds	r1, r7, r3
   25f28:	23d5      	movs	r3, #213	; 0xd5
   25f2a:	18fb      	adds	r3, r7, r3
   25f2c:	2000      	movs	r0, #0
   25f2e:	5618      	ldrsb	r0, [r3, r0]
   25f30:	23d8      	movs	r3, #216	; 0xd8
   25f32:	18fb      	adds	r3, r7, r3
   25f34:	881b      	ldrh	r3, [r3, #0]
   25f36:	9300      	str	r3, [sp, #0]
   25f38:	0023      	movs	r3, r4
   25f3a:	4c5e      	ldr	r4, [pc, #376]	; (260b4 <m2m_ip_cb+0x544>)
   25f3c:	47a0      	blx	r4
	{
   25f3e:	e0ad      	b.n	2609c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25f40:	2370      	movs	r3, #112	; 0x70
   25f42:	18fb      	adds	r3, r7, r3
   25f44:	22d2      	movs	r2, #210	; 0xd2
   25f46:	18ba      	adds	r2, r7, r2
   25f48:	8812      	ldrh	r2, [r2, #0]
   25f4a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25f4c:	2370      	movs	r3, #112	; 0x70
   25f4e:	18fb      	adds	r3, r7, r3
   25f50:	2200      	movs	r2, #0
   25f52:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25f54:	4b58      	ldr	r3, [pc, #352]	; (260b8 <m2m_ip_cb+0x548>)
   25f56:	681b      	ldr	r3, [r3, #0]
   25f58:	2b00      	cmp	r3, #0
   25f5a:	d100      	bne.n	25f5e <m2m_ip_cb+0x3ee>
   25f5c:	e09e      	b.n	2609c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25f5e:	4b56      	ldr	r3, [pc, #344]	; (260b8 <m2m_ip_cb+0x548>)
   25f60:	681b      	ldr	r3, [r3, #0]
   25f62:	2270      	movs	r2, #112	; 0x70
   25f64:	18bc      	adds	r4, r7, r2
   25f66:	22df      	movs	r2, #223	; 0xdf
   25f68:	18ba      	adds	r2, r7, r2
   25f6a:	7811      	ldrb	r1, [r2, #0]
   25f6c:	22d5      	movs	r2, #213	; 0xd5
   25f6e:	18ba      	adds	r2, r7, r2
   25f70:	2000      	movs	r0, #0
   25f72:	5610      	ldrsb	r0, [r2, r0]
   25f74:	0022      	movs	r2, r4
   25f76:	4798      	blx	r3
	{
   25f78:	e090      	b.n	2609c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25f7a:	23d8      	movs	r3, #216	; 0xd8
   25f7c:	18fa      	adds	r2, r7, r3
   25f7e:	1d3b      	adds	r3, r7, #4
   25f80:	8812      	ldrh	r2, [r2, #0]
   25f82:	881b      	ldrh	r3, [r3, #0]
   25f84:	429a      	cmp	r2, r3
   25f86:	d300      	bcc.n	25f8a <m2m_ip_cb+0x41a>
   25f88:	e088      	b.n	2609c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25f8a:	2301      	movs	r3, #1
   25f8c:	2200      	movs	r2, #0
   25f8e:	2100      	movs	r1, #0
   25f90:	2000      	movs	r0, #0
   25f92:	4c46      	ldr	r4, [pc, #280]	; (260ac <m2m_ip_cb+0x53c>)
   25f94:	47a0      	blx	r4
	{
   25f96:	e081      	b.n	2609c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25f98:	1dfb      	adds	r3, r7, #7
   25f9a:	781b      	ldrb	r3, [r3, #0]
   25f9c:	2b45      	cmp	r3, #69	; 0x45
   25f9e:	d007      	beq.n	25fb0 <m2m_ip_cb+0x440>
   25fa0:	1dfb      	adds	r3, r7, #7
   25fa2:	781b      	ldrb	r3, [r3, #0]
   25fa4:	2b47      	cmp	r3, #71	; 0x47
   25fa6:	d003      	beq.n	25fb0 <m2m_ip_cb+0x440>
   25fa8:	1dfb      	adds	r3, r7, #7
   25faa:	781b      	ldrb	r3, [r3, #0]
   25fac:	2b4c      	cmp	r3, #76	; 0x4c
   25fae:	d14c      	bne.n	2604a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25fb0:	23de      	movs	r3, #222	; 0xde
   25fb2:	18fb      	adds	r3, r7, r3
   25fb4:	2207      	movs	r2, #7
   25fb6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25fb8:	1dfb      	adds	r3, r7, #7
   25fba:	781b      	ldrb	r3, [r3, #0]
   25fbc:	2b47      	cmp	r3, #71	; 0x47
   25fbe:	d103      	bne.n	25fc8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25fc0:	23de      	movs	r3, #222	; 0xde
   25fc2:	18fb      	adds	r3, r7, r3
   25fc4:	2208      	movs	r2, #8
   25fc6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25fc8:	2364      	movs	r3, #100	; 0x64
   25fca:	18f9      	adds	r1, r7, r3
   25fcc:	6838      	ldr	r0, [r7, #0]
   25fce:	2300      	movs	r3, #0
   25fd0:	2208      	movs	r2, #8
   25fd2:	4c36      	ldr	r4, [pc, #216]	; (260ac <m2m_ip_cb+0x53c>)
   25fd4:	47a0      	blx	r4
   25fd6:	1e03      	subs	r3, r0, #0
   25fd8:	d162      	bne.n	260a0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   25fda:	23dc      	movs	r3, #220	; 0xdc
   25fdc:	18fb      	adds	r3, r7, r3
   25fde:	2200      	movs	r2, #0
   25fe0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25fe2:	23db      	movs	r3, #219	; 0xdb
   25fe4:	18fb      	adds	r3, r7, r3
   25fe6:	2264      	movs	r2, #100	; 0x64
   25fe8:	18ba      	adds	r2, r7, r2
   25fea:	7812      	ldrb	r2, [r2, #0]
   25fec:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   25fee:	23dc      	movs	r3, #220	; 0xdc
   25ff0:	18fb      	adds	r3, r7, r3
   25ff2:	2264      	movs	r2, #100	; 0x64
   25ff4:	18ba      	adds	r2, r7, r2
   25ff6:	8892      	ldrh	r2, [r2, #4]
   25ff8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   25ffa:	2364      	movs	r3, #100	; 0x64
   25ffc:	18fb      	adds	r3, r7, r3
   25ffe:	2202      	movs	r2, #2
   26000:	5e9a      	ldrsh	r2, [r3, r2]
   26002:	236e      	movs	r3, #110	; 0x6e
   26004:	18fb      	adds	r3, r7, r3
   26006:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   26008:	23db      	movs	r3, #219	; 0xdb
   2600a:	18fb      	adds	r3, r7, r3
   2600c:	781b      	ldrb	r3, [r3, #0]
   2600e:	b25b      	sxtb	r3, r3
   26010:	4a27      	ldr	r2, [pc, #156]	; (260b0 <m2m_ip_cb+0x540>)
   26012:	011b      	lsls	r3, r3, #4
   26014:	18d3      	adds	r3, r2, r3
   26016:	3306      	adds	r3, #6
   26018:	881b      	ldrh	r3, [r3, #0]
   2601a:	b29b      	uxth	r3, r3
   2601c:	22dc      	movs	r2, #220	; 0xdc
   2601e:	18ba      	adds	r2, r7, r2
   26020:	8812      	ldrh	r2, [r2, #0]
   26022:	429a      	cmp	r2, r3
   26024:	d13c      	bne.n	260a0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   26026:	4b24      	ldr	r3, [pc, #144]	; (260b8 <m2m_ip_cb+0x548>)
   26028:	681b      	ldr	r3, [r3, #0]
   2602a:	2b00      	cmp	r3, #0
   2602c:	d038      	beq.n	260a0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2602e:	4b22      	ldr	r3, [pc, #136]	; (260b8 <m2m_ip_cb+0x548>)
   26030:	681b      	ldr	r3, [r3, #0]
   26032:	226e      	movs	r2, #110	; 0x6e
   26034:	18bc      	adds	r4, r7, r2
   26036:	22de      	movs	r2, #222	; 0xde
   26038:	18ba      	adds	r2, r7, r2
   2603a:	7811      	ldrb	r1, [r2, #0]
   2603c:	22db      	movs	r2, #219	; 0xdb
   2603e:	18ba      	adds	r2, r7, r2
   26040:	2000      	movs	r0, #0
   26042:	5610      	ldrsb	r0, [r2, r0]
   26044:	0022      	movs	r2, r4
   26046:	4798      	blx	r3
	{
   26048:	e02a      	b.n	260a0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2604a:	1dfb      	adds	r3, r7, #7
   2604c:	781b      	ldrb	r3, [r3, #0]
   2604e:	2b52      	cmp	r3, #82	; 0x52
   26050:	d127      	bne.n	260a2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   26052:	2350      	movs	r3, #80	; 0x50
   26054:	18f9      	adds	r1, r7, r3
   26056:	6838      	ldr	r0, [r7, #0]
   26058:	2301      	movs	r3, #1
   2605a:	2214      	movs	r2, #20
   2605c:	4c13      	ldr	r4, [pc, #76]	; (260ac <m2m_ip_cb+0x53c>)
   2605e:	47a0      	blx	r4
   26060:	1e03      	subs	r3, r0, #0
   26062:	d11e      	bne.n	260a2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   26064:	2350      	movs	r3, #80	; 0x50
   26066:	18fb      	adds	r3, r7, r3
   26068:	685b      	ldr	r3, [r3, #4]
   2606a:	001a      	movs	r2, r3
   2606c:	4b13      	ldr	r3, [pc, #76]	; (260bc <m2m_ip_cb+0x54c>)
   2606e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   26070:	4b12      	ldr	r3, [pc, #72]	; (260bc <m2m_ip_cb+0x54c>)
   26072:	681b      	ldr	r3, [r3, #0]
   26074:	2b00      	cmp	r3, #0
   26076:	d014      	beq.n	260a2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   26078:	4b10      	ldr	r3, [pc, #64]	; (260bc <m2m_ip_cb+0x54c>)
   2607a:	681c      	ldr	r4, [r3, #0]
   2607c:	2350      	movs	r3, #80	; 0x50
   2607e:	18fb      	adds	r3, r7, r3
   26080:	6818      	ldr	r0, [r3, #0]
   26082:	2350      	movs	r3, #80	; 0x50
   26084:	18fb      	adds	r3, r7, r3
   26086:	6899      	ldr	r1, [r3, #8]
   26088:	2350      	movs	r3, #80	; 0x50
   2608a:	18fb      	adds	r3, r7, r3
   2608c:	7c1b      	ldrb	r3, [r3, #16]
   2608e:	001a      	movs	r2, r3
   26090:	47a0      	blx	r4
}
   26092:	e006      	b.n	260a2 <m2m_ip_cb+0x532>
	{
   26094:	46c0      	nop			; (mov r8, r8)
   26096:	e004      	b.n	260a2 <m2m_ip_cb+0x532>
	{
   26098:	46c0      	nop			; (mov r8, r8)
   2609a:	e002      	b.n	260a2 <m2m_ip_cb+0x532>
	{
   2609c:	46c0      	nop			; (mov r8, r8)
   2609e:	e000      	b.n	260a2 <m2m_ip_cb+0x532>
	{
   260a0:	46c0      	nop			; (mov r8, r8)
}
   260a2:	46c0      	nop			; (mov r8, r8)
   260a4:	46bd      	mov	sp, r7
   260a6:	b039      	add	sp, #228	; 0xe4
   260a8:	bd90      	pop	{r4, r7, pc}
   260aa:	46c0      	nop			; (mov r8, r8)
   260ac:	0002236d 	.word	0x0002236d
   260b0:	20005b98 	.word	0x20005b98
   260b4:	00025975 	.word	0x00025975
   260b8:	20005c48 	.word	0x20005c48
   260bc:	20005c4c 	.word	0x20005c4c

000260c0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   260c0:	b580      	push	{r7, lr}
   260c2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   260c4:	4b0c      	ldr	r3, [pc, #48]	; (260f8 <socketInit+0x38>)
   260c6:	781b      	ldrb	r3, [r3, #0]
   260c8:	b2db      	uxtb	r3, r3
   260ca:	2b00      	cmp	r3, #0
   260cc:	d110      	bne.n	260f0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   260ce:	4b0b      	ldr	r3, [pc, #44]	; (260fc <socketInit+0x3c>)
   260d0:	22b0      	movs	r2, #176	; 0xb0
   260d2:	2100      	movs	r1, #0
   260d4:	0018      	movs	r0, r3
   260d6:	4b0a      	ldr	r3, [pc, #40]	; (26100 <socketInit+0x40>)
   260d8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   260da:	4b0a      	ldr	r3, [pc, #40]	; (26104 <socketInit+0x44>)
   260dc:	0019      	movs	r1, r3
   260de:	2002      	movs	r0, #2
   260e0:	4b09      	ldr	r3, [pc, #36]	; (26108 <socketInit+0x48>)
   260e2:	4798      	blx	r3
		gbSocketInit	= 1;
   260e4:	4b04      	ldr	r3, [pc, #16]	; (260f8 <socketInit+0x38>)
   260e6:	2201      	movs	r2, #1
   260e8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   260ea:	4b08      	ldr	r3, [pc, #32]	; (2610c <socketInit+0x4c>)
   260ec:	2200      	movs	r2, #0
   260ee:	801a      	strh	r2, [r3, #0]
	}
}
   260f0:	46c0      	nop			; (mov r8, r8)
   260f2:	46bd      	mov	sp, r7
   260f4:	bd80      	pop	{r7, pc}
   260f6:	46c0      	nop			; (mov r8, r8)
   260f8:	200042b8 	.word	0x200042b8
   260fc:	20005b98 	.word	0x20005b98
   26100:	000217f1 	.word	0x000217f1
   26104:	00025b71 	.word	0x00025b71
   26108:	000224ed 	.word	0x000224ed
   2610c:	200042b6 	.word	0x200042b6

00026110 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   26110:	b580      	push	{r7, lr}
   26112:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26114:	4b0a      	ldr	r3, [pc, #40]	; (26140 <socketDeinit+0x30>)
   26116:	22b0      	movs	r2, #176	; 0xb0
   26118:	2100      	movs	r1, #0
   2611a:	0018      	movs	r0, r3
   2611c:	4b09      	ldr	r3, [pc, #36]	; (26144 <socketDeinit+0x34>)
   2611e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   26120:	2100      	movs	r1, #0
   26122:	2002      	movs	r0, #2
   26124:	4b08      	ldr	r3, [pc, #32]	; (26148 <socketDeinit+0x38>)
   26126:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   26128:	4b08      	ldr	r3, [pc, #32]	; (2614c <socketDeinit+0x3c>)
   2612a:	2200      	movs	r2, #0
   2612c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2612e:	4b08      	ldr	r3, [pc, #32]	; (26150 <socketDeinit+0x40>)
   26130:	2200      	movs	r2, #0
   26132:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   26134:	4b07      	ldr	r3, [pc, #28]	; (26154 <socketDeinit+0x44>)
   26136:	2200      	movs	r2, #0
   26138:	701a      	strb	r2, [r3, #0]
}
   2613a:	46c0      	nop			; (mov r8, r8)
   2613c:	46bd      	mov	sp, r7
   2613e:	bd80      	pop	{r7, pc}
   26140:	20005b98 	.word	0x20005b98
   26144:	000217f1 	.word	0x000217f1
   26148:	000224ed 	.word	0x000224ed
   2614c:	20005c48 	.word	0x20005c48
   26150:	20005c50 	.word	0x20005c50
   26154:	200042b8 	.word	0x200042b8

00026158 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   26158:	b580      	push	{r7, lr}
   2615a:	b082      	sub	sp, #8
   2615c:	af00      	add	r7, sp, #0
   2615e:	6078      	str	r0, [r7, #4]
   26160:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26162:	4b05      	ldr	r3, [pc, #20]	; (26178 <registerSocketCallback+0x20>)
   26164:	687a      	ldr	r2, [r7, #4]
   26166:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   26168:	4b04      	ldr	r3, [pc, #16]	; (2617c <registerSocketCallback+0x24>)
   2616a:	683a      	ldr	r2, [r7, #0]
   2616c:	601a      	str	r2, [r3, #0]
}
   2616e:	46c0      	nop			; (mov r8, r8)
   26170:	46bd      	mov	sp, r7
   26172:	b002      	add	sp, #8
   26174:	bd80      	pop	{r7, pc}
   26176:	46c0      	nop			; (mov r8, r8)
   26178:	20005c48 	.word	0x20005c48
   2617c:	20005c50 	.word	0x20005c50

00026180 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   26180:	b590      	push	{r4, r7, lr}
   26182:	b08d      	sub	sp, #52	; 0x34
   26184:	af04      	add	r7, sp, #16
   26186:	0004      	movs	r4, r0
   26188:	0008      	movs	r0, r1
   2618a:	0011      	movs	r1, r2
   2618c:	1dbb      	adds	r3, r7, #6
   2618e:	1c22      	adds	r2, r4, #0
   26190:	801a      	strh	r2, [r3, #0]
   26192:	1d7b      	adds	r3, r7, #5
   26194:	1c02      	adds	r2, r0, #0
   26196:	701a      	strb	r2, [r3, #0]
   26198:	1d3b      	adds	r3, r7, #4
   2619a:	1c0a      	adds	r2, r1, #0
   2619c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2619e:	231f      	movs	r3, #31
   261a0:	18fb      	adds	r3, r7, r3
   261a2:	22ff      	movs	r2, #255	; 0xff
   261a4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   261a6:	1dbb      	adds	r3, r7, #6
   261a8:	881b      	ldrh	r3, [r3, #0]
   261aa:	2b02      	cmp	r3, #2
   261ac:	d000      	beq.n	261b0 <socket+0x30>
   261ae:	e0ce      	b.n	2634e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   261b0:	1d7b      	adds	r3, r7, #5
   261b2:	781b      	ldrb	r3, [r3, #0]
   261b4:	2b01      	cmp	r3, #1
   261b6:	d135      	bne.n	26224 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   261b8:	231e      	movs	r3, #30
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	2200      	movs	r2, #0
   261be:	701a      	strb	r2, [r3, #0]
   261c0:	e02a      	b.n	26218 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   261c2:	2317      	movs	r3, #23
   261c4:	18fb      	adds	r3, r7, r3
   261c6:	4a66      	ldr	r2, [pc, #408]	; (26360 <socket+0x1e0>)
   261c8:	7812      	ldrb	r2, [r2, #0]
   261ca:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   261cc:	4b64      	ldr	r3, [pc, #400]	; (26360 <socket+0x1e0>)
   261ce:	781b      	ldrb	r3, [r3, #0]
   261d0:	b2db      	uxtb	r3, r3
   261d2:	011a      	lsls	r2, r3, #4
   261d4:	4b63      	ldr	r3, [pc, #396]	; (26364 <socket+0x1e4>)
   261d6:	18d3      	adds	r3, r2, r3
   261d8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   261da:	4b61      	ldr	r3, [pc, #388]	; (26360 <socket+0x1e0>)
   261dc:	781b      	ldrb	r3, [r3, #0]
   261de:	b2db      	uxtb	r3, r3
   261e0:	1c5a      	adds	r2, r3, #1
   261e2:	4b61      	ldr	r3, [pc, #388]	; (26368 <socket+0x1e8>)
   261e4:	2107      	movs	r1, #7
   261e6:	0010      	movs	r0, r2
   261e8:	4798      	blx	r3
   261ea:	000b      	movs	r3, r1
   261ec:	b2da      	uxtb	r2, r3
   261ee:	4b5c      	ldr	r3, [pc, #368]	; (26360 <socket+0x1e0>)
   261f0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   261f2:	69bb      	ldr	r3, [r7, #24]
   261f4:	7a9b      	ldrb	r3, [r3, #10]
   261f6:	b2db      	uxtb	r3, r3
   261f8:	2b00      	cmp	r3, #0
   261fa:	d106      	bne.n	2620a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   261fc:	231f      	movs	r3, #31
   261fe:	18fb      	adds	r3, r7, r3
   26200:	2217      	movs	r2, #23
   26202:	18ba      	adds	r2, r7, r2
   26204:	7812      	ldrb	r2, [r2, #0]
   26206:	701a      	strb	r2, [r3, #0]
					break;
   26208:	e04c      	b.n	262a4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2620a:	231e      	movs	r3, #30
   2620c:	18fb      	adds	r3, r7, r3
   2620e:	781a      	ldrb	r2, [r3, #0]
   26210:	231e      	movs	r3, #30
   26212:	18fb      	adds	r3, r7, r3
   26214:	3201      	adds	r2, #1
   26216:	701a      	strb	r2, [r3, #0]
   26218:	231e      	movs	r3, #30
   2621a:	18fb      	adds	r3, r7, r3
   2621c:	781b      	ldrb	r3, [r3, #0]
   2621e:	2b06      	cmp	r3, #6
   26220:	d9cf      	bls.n	261c2 <socket+0x42>
   26222:	e03f      	b.n	262a4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26224:	1d7b      	adds	r3, r7, #5
   26226:	781b      	ldrb	r3, [r3, #0]
   26228:	2b02      	cmp	r3, #2
   2622a:	d13b      	bne.n	262a4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2622c:	4b4f      	ldr	r3, [pc, #316]	; (2636c <socket+0x1ec>)
   2622e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26230:	231e      	movs	r3, #30
   26232:	18fb      	adds	r3, r7, r3
   26234:	2200      	movs	r2, #0
   26236:	701a      	strb	r2, [r3, #0]
   26238:	e02f      	b.n	2629a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2623a:	2317      	movs	r3, #23
   2623c:	18fb      	adds	r3, r7, r3
   2623e:	4a4c      	ldr	r2, [pc, #304]	; (26370 <socket+0x1f0>)
   26240:	7812      	ldrb	r2, [r2, #0]
   26242:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26244:	4b4a      	ldr	r3, [pc, #296]	; (26370 <socket+0x1f0>)
   26246:	781b      	ldrb	r3, [r3, #0]
   26248:	b2db      	uxtb	r3, r3
   2624a:	011b      	lsls	r3, r3, #4
   2624c:	693a      	ldr	r2, [r7, #16]
   2624e:	18d3      	adds	r3, r2, r3
   26250:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26252:	4b47      	ldr	r3, [pc, #284]	; (26370 <socket+0x1f0>)
   26254:	781b      	ldrb	r3, [r3, #0]
   26256:	b2db      	uxtb	r3, r3
   26258:	3301      	adds	r3, #1
   2625a:	4a46      	ldr	r2, [pc, #280]	; (26374 <socket+0x1f4>)
   2625c:	4013      	ands	r3, r2
   2625e:	d504      	bpl.n	2626a <socket+0xea>
   26260:	3b01      	subs	r3, #1
   26262:	2204      	movs	r2, #4
   26264:	4252      	negs	r2, r2
   26266:	4313      	orrs	r3, r2
   26268:	3301      	adds	r3, #1
   2626a:	b2da      	uxtb	r2, r3
   2626c:	4b40      	ldr	r3, [pc, #256]	; (26370 <socket+0x1f0>)
   2626e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26270:	69bb      	ldr	r3, [r7, #24]
   26272:	7a9b      	ldrb	r3, [r3, #10]
   26274:	b2db      	uxtb	r3, r3
   26276:	2b00      	cmp	r3, #0
   26278:	d108      	bne.n	2628c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2627a:	2317      	movs	r3, #23
   2627c:	18fb      	adds	r3, r7, r3
   2627e:	781b      	ldrb	r3, [r3, #0]
   26280:	3307      	adds	r3, #7
   26282:	b2da      	uxtb	r2, r3
   26284:	231f      	movs	r3, #31
   26286:	18fb      	adds	r3, r7, r3
   26288:	701a      	strb	r2, [r3, #0]
					break;
   2628a:	e00b      	b.n	262a4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2628c:	231e      	movs	r3, #30
   2628e:	18fb      	adds	r3, r7, r3
   26290:	781a      	ldrb	r2, [r3, #0]
   26292:	231e      	movs	r3, #30
   26294:	18fb      	adds	r3, r7, r3
   26296:	3201      	adds	r2, #1
   26298:	701a      	strb	r2, [r3, #0]
   2629a:	231e      	movs	r3, #30
   2629c:	18fb      	adds	r3, r7, r3
   2629e:	781b      	ldrb	r3, [r3, #0]
   262a0:	2b03      	cmp	r3, #3
   262a2:	d9ca      	bls.n	2623a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   262a4:	231f      	movs	r3, #31
   262a6:	18fb      	adds	r3, r7, r3
   262a8:	781b      	ldrb	r3, [r3, #0]
   262aa:	2b7f      	cmp	r3, #127	; 0x7f
   262ac:	d84f      	bhi.n	2634e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   262ae:	69bb      	ldr	r3, [r7, #24]
   262b0:	2210      	movs	r2, #16
   262b2:	2100      	movs	r1, #0
   262b4:	0018      	movs	r0, r3
   262b6:	4b30      	ldr	r3, [pc, #192]	; (26378 <socket+0x1f8>)
   262b8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   262ba:	69bb      	ldr	r3, [r7, #24]
   262bc:	2201      	movs	r2, #1
   262be:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   262c0:	4b2e      	ldr	r3, [pc, #184]	; (2637c <socket+0x1fc>)
   262c2:	881b      	ldrh	r3, [r3, #0]
   262c4:	b29b      	uxth	r3, r3
   262c6:	3301      	adds	r3, #1
   262c8:	b29a      	uxth	r2, r3
   262ca:	4b2c      	ldr	r3, [pc, #176]	; (2637c <socket+0x1fc>)
   262cc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   262ce:	4b2b      	ldr	r3, [pc, #172]	; (2637c <socket+0x1fc>)
   262d0:	881b      	ldrh	r3, [r3, #0]
   262d2:	b29b      	uxth	r3, r3
   262d4:	2b00      	cmp	r3, #0
   262d6:	d106      	bne.n	262e6 <socket+0x166>
				++gu16SessionID;
   262d8:	4b28      	ldr	r3, [pc, #160]	; (2637c <socket+0x1fc>)
   262da:	881b      	ldrh	r3, [r3, #0]
   262dc:	b29b      	uxth	r3, r3
   262de:	3301      	adds	r3, #1
   262e0:	b29a      	uxth	r2, r3
   262e2:	4b26      	ldr	r3, [pc, #152]	; (2637c <socket+0x1fc>)
   262e4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   262e6:	4b25      	ldr	r3, [pc, #148]	; (2637c <socket+0x1fc>)
   262e8:	881b      	ldrh	r3, [r3, #0]
   262ea:	b29a      	uxth	r2, r3
   262ec:	69bb      	ldr	r3, [r7, #24]
   262ee:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   262f0:	4b23      	ldr	r3, [pc, #140]	; (26380 <socket+0x200>)
   262f2:	0018      	movs	r0, r3
   262f4:	4b23      	ldr	r3, [pc, #140]	; (26384 <socket+0x204>)
   262f6:	4798      	blx	r3
   262f8:	231f      	movs	r3, #31
   262fa:	18fb      	adds	r3, r7, r3
   262fc:	2100      	movs	r1, #0
   262fe:	5659      	ldrsb	r1, [r3, r1]
   26300:	4b1e      	ldr	r3, [pc, #120]	; (2637c <socket+0x1fc>)
   26302:	881b      	ldrh	r3, [r3, #0]
   26304:	b29b      	uxth	r3, r3
   26306:	001a      	movs	r2, r3
   26308:	4b1f      	ldr	r3, [pc, #124]	; (26388 <socket+0x208>)
   2630a:	0018      	movs	r0, r3
   2630c:	4b1d      	ldr	r3, [pc, #116]	; (26384 <socket+0x204>)
   2630e:	4798      	blx	r3
   26310:	4b1e      	ldr	r3, [pc, #120]	; (2638c <socket+0x20c>)
   26312:	0018      	movs	r0, r3
   26314:	4b1b      	ldr	r3, [pc, #108]	; (26384 <socket+0x204>)
   26316:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   26318:	1d3b      	adds	r3, r7, #4
   2631a:	781b      	ldrb	r3, [r3, #0]
   2631c:	2201      	movs	r2, #1
   2631e:	4013      	ands	r3, r2
   26320:	d015      	beq.n	2634e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   26322:	230c      	movs	r3, #12
   26324:	18fb      	adds	r3, r7, r3
   26326:	221f      	movs	r2, #31
   26328:	18ba      	adds	r2, r7, r2
   2632a:	7812      	ldrb	r2, [r2, #0]
   2632c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2632e:	69bb      	ldr	r3, [r7, #24]
   26330:	2221      	movs	r2, #33	; 0x21
   26332:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   26334:	230c      	movs	r3, #12
   26336:	18fa      	adds	r2, r7, r3
   26338:	2300      	movs	r3, #0
   2633a:	9302      	str	r3, [sp, #8]
   2633c:	2300      	movs	r3, #0
   2633e:	9301      	str	r3, [sp, #4]
   26340:	2300      	movs	r3, #0
   26342:	9300      	str	r3, [sp, #0]
   26344:	2304      	movs	r3, #4
   26346:	2150      	movs	r1, #80	; 0x50
   26348:	2002      	movs	r0, #2
   2634a:	4c11      	ldr	r4, [pc, #68]	; (26390 <socket+0x210>)
   2634c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2634e:	231f      	movs	r3, #31
   26350:	18fb      	adds	r3, r7, r3
   26352:	781b      	ldrb	r3, [r3, #0]
   26354:	b25b      	sxtb	r3, r3
}
   26356:	0018      	movs	r0, r3
   26358:	46bd      	mov	sp, r7
   2635a:	b009      	add	sp, #36	; 0x24
   2635c:	bd90      	pop	{r4, r7, pc}
   2635e:	46c0      	nop			; (mov r8, r8)
   26360:	200042b9 	.word	0x200042b9
   26364:	20005b98 	.word	0x20005b98
   26368:	000339f5 	.word	0x000339f5
   2636c:	20005c08 	.word	0x20005c08
   26370:	200042ba 	.word	0x200042ba
   26374:	80000003 	.word	0x80000003
   26378:	000217f1 	.word	0x000217f1
   2637c:	200042b6 	.word	0x200042b6
   26380:	0003a494 	.word	0x0003a494
   26384:	0001ea59 	.word	0x0001ea59
   26388:	0003a4b8 	.word	0x0003a4b8
   2638c:	0003a4b4 	.word	0x0003a4b4
   26390:	00021a51 	.word	0x00021a51

00026394 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   26394:	b5b0      	push	{r4, r5, r7, lr}
   26396:	b08a      	sub	sp, #40	; 0x28
   26398:	af04      	add	r7, sp, #16
   2639a:	6039      	str	r1, [r7, #0]
   2639c:	0011      	movs	r1, r2
   2639e:	1dfb      	adds	r3, r7, #7
   263a0:	1c02      	adds	r2, r0, #0
   263a2:	701a      	strb	r2, [r3, #0]
   263a4:	1dbb      	adds	r3, r7, #6
   263a6:	1c0a      	adds	r2, r1, #0
   263a8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   263aa:	2317      	movs	r3, #23
   263ac:	18fb      	adds	r3, r7, r3
   263ae:	22fa      	movs	r2, #250	; 0xfa
   263b0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   263b2:	1dfb      	adds	r3, r7, #7
   263b4:	781b      	ldrb	r3, [r3, #0]
   263b6:	2b7f      	cmp	r3, #127	; 0x7f
   263b8:	d867      	bhi.n	2648a <connect+0xf6>
   263ba:	683b      	ldr	r3, [r7, #0]
   263bc:	2b00      	cmp	r3, #0
   263be:	d064      	beq.n	2648a <connect+0xf6>
   263c0:	1dfb      	adds	r3, r7, #7
   263c2:	781b      	ldrb	r3, [r3, #0]
   263c4:	b25b      	sxtb	r3, r3
   263c6:	4a35      	ldr	r2, [pc, #212]	; (2649c <connect+0x108>)
   263c8:	011b      	lsls	r3, r3, #4
   263ca:	18d3      	adds	r3, r2, r3
   263cc:	330a      	adds	r3, #10
   263ce:	781b      	ldrb	r3, [r3, #0]
   263d0:	b2db      	uxtb	r3, r3
   263d2:	2b01      	cmp	r3, #1
   263d4:	d159      	bne.n	2648a <connect+0xf6>
   263d6:	1dbb      	adds	r3, r7, #6
   263d8:	781b      	ldrb	r3, [r3, #0]
   263da:	2b00      	cmp	r3, #0
   263dc:	d055      	beq.n	2648a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   263de:	2316      	movs	r3, #22
   263e0:	18fb      	adds	r3, r7, r3
   263e2:	2244      	movs	r2, #68	; 0x44
   263e4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   263e6:	1dfb      	adds	r3, r7, #7
   263e8:	781b      	ldrb	r3, [r3, #0]
   263ea:	b25b      	sxtb	r3, r3
   263ec:	4a2b      	ldr	r2, [pc, #172]	; (2649c <connect+0x108>)
   263ee:	011b      	lsls	r3, r3, #4
   263f0:	18d3      	adds	r3, r2, r3
   263f2:	330b      	adds	r3, #11
   263f4:	781b      	ldrb	r3, [r3, #0]
   263f6:	b2db      	uxtb	r3, r3
   263f8:	001a      	movs	r2, r3
   263fa:	2301      	movs	r3, #1
   263fc:	4013      	ands	r3, r2
   263fe:	d00f      	beq.n	26420 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26400:	2316      	movs	r3, #22
   26402:	18fb      	adds	r3, r7, r3
   26404:	224b      	movs	r2, #75	; 0x4b
   26406:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   26408:	1dfb      	adds	r3, r7, #7
   2640a:	781b      	ldrb	r3, [r3, #0]
   2640c:	b25b      	sxtb	r3, r3
   2640e:	4a23      	ldr	r2, [pc, #140]	; (2649c <connect+0x108>)
   26410:	011b      	lsls	r3, r3, #4
   26412:	18d3      	adds	r3, r2, r3
   26414:	330b      	adds	r3, #11
   26416:	781b      	ldrb	r3, [r3, #0]
   26418:	b2da      	uxtb	r2, r3
   2641a:	2308      	movs	r3, #8
   2641c:	18fb      	adds	r3, r7, r3
   2641e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   26420:	2308      	movs	r3, #8
   26422:	18fb      	adds	r3, r7, r3
   26424:	1dfa      	adds	r2, r7, #7
   26426:	7812      	ldrb	r2, [r2, #0]
   26428:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2642a:	6839      	ldr	r1, [r7, #0]
   2642c:	2308      	movs	r3, #8
   2642e:	18fb      	adds	r3, r7, r3
   26430:	2208      	movs	r2, #8
   26432:	0018      	movs	r0, r3
   26434:	4b1a      	ldr	r3, [pc, #104]	; (264a0 <connect+0x10c>)
   26436:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   26438:	1dfb      	adds	r3, r7, #7
   2643a:	781b      	ldrb	r3, [r3, #0]
   2643c:	b25b      	sxtb	r3, r3
   2643e:	4a17      	ldr	r2, [pc, #92]	; (2649c <connect+0x108>)
   26440:	011b      	lsls	r3, r3, #4
   26442:	18d3      	adds	r3, r2, r3
   26444:	3306      	adds	r3, #6
   26446:	881b      	ldrh	r3, [r3, #0]
   26448:	b29a      	uxth	r2, r3
   2644a:	2308      	movs	r3, #8
   2644c:	18fb      	adds	r3, r7, r3
   2644e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26450:	2317      	movs	r3, #23
   26452:	18fc      	adds	r4, r7, r3
   26454:	2308      	movs	r3, #8
   26456:	18fa      	adds	r2, r7, r3
   26458:	2316      	movs	r3, #22
   2645a:	18fb      	adds	r3, r7, r3
   2645c:	7819      	ldrb	r1, [r3, #0]
   2645e:	2300      	movs	r3, #0
   26460:	9302      	str	r3, [sp, #8]
   26462:	2300      	movs	r3, #0
   26464:	9301      	str	r3, [sp, #4]
   26466:	2300      	movs	r3, #0
   26468:	9300      	str	r3, [sp, #0]
   2646a:	230c      	movs	r3, #12
   2646c:	2002      	movs	r0, #2
   2646e:	4d0d      	ldr	r5, [pc, #52]	; (264a4 <connect+0x110>)
   26470:	47a8      	blx	r5
   26472:	0003      	movs	r3, r0
   26474:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26476:	2317      	movs	r3, #23
   26478:	18fb      	adds	r3, r7, r3
   2647a:	781b      	ldrb	r3, [r3, #0]
   2647c:	b25b      	sxtb	r3, r3
   2647e:	2b00      	cmp	r3, #0
   26480:	d003      	beq.n	2648a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   26482:	2317      	movs	r3, #23
   26484:	18fb      	adds	r3, r7, r3
   26486:	22f7      	movs	r2, #247	; 0xf7
   26488:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2648a:	2317      	movs	r3, #23
   2648c:	18fb      	adds	r3, r7, r3
   2648e:	781b      	ldrb	r3, [r3, #0]
   26490:	b25b      	sxtb	r3, r3
}
   26492:	0018      	movs	r0, r3
   26494:	46bd      	mov	sp, r7
   26496:	b006      	add	sp, #24
   26498:	bdb0      	pop	{r4, r5, r7, pc}
   2649a:	46c0      	nop			; (mov r8, r8)
   2649c:	20005b98 	.word	0x20005b98
   264a0:	000217b5 	.word	0x000217b5
   264a4:	00021a51 	.word	0x00021a51

000264a8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   264a8:	b590      	push	{r4, r7, lr}
   264aa:	b08f      	sub	sp, #60	; 0x3c
   264ac:	af04      	add	r7, sp, #16
   264ae:	0004      	movs	r4, r0
   264b0:	60b9      	str	r1, [r7, #8]
   264b2:	0010      	movs	r0, r2
   264b4:	0019      	movs	r1, r3
   264b6:	230f      	movs	r3, #15
   264b8:	18fb      	adds	r3, r7, r3
   264ba:	1c22      	adds	r2, r4, #0
   264bc:	701a      	strb	r2, [r3, #0]
   264be:	230c      	movs	r3, #12
   264c0:	18fb      	adds	r3, r7, r3
   264c2:	1c02      	adds	r2, r0, #0
   264c4:	801a      	strh	r2, [r3, #0]
   264c6:	1dbb      	adds	r3, r7, #6
   264c8:	1c0a      	adds	r2, r1, #0
   264ca:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   264cc:	2326      	movs	r3, #38	; 0x26
   264ce:	18fb      	adds	r3, r7, r3
   264d0:	2206      	movs	r2, #6
   264d2:	4252      	negs	r2, r2
   264d4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   264d6:	230f      	movs	r3, #15
   264d8:	18fb      	adds	r3, r7, r3
   264da:	781b      	ldrb	r3, [r3, #0]
   264dc:	2b7f      	cmp	r3, #127	; 0x7f
   264de:	d900      	bls.n	264e2 <send+0x3a>
   264e0:	e087      	b.n	265f2 <send+0x14a>
   264e2:	68bb      	ldr	r3, [r7, #8]
   264e4:	2b00      	cmp	r3, #0
   264e6:	d100      	bne.n	264ea <send+0x42>
   264e8:	e083      	b.n	265f2 <send+0x14a>
   264ea:	230c      	movs	r3, #12
   264ec:	18fb      	adds	r3, r7, r3
   264ee:	881a      	ldrh	r2, [r3, #0]
   264f0:	23af      	movs	r3, #175	; 0xaf
   264f2:	00db      	lsls	r3, r3, #3
   264f4:	429a      	cmp	r2, r3
   264f6:	d900      	bls.n	264fa <send+0x52>
   264f8:	e07b      	b.n	265f2 <send+0x14a>
   264fa:	230f      	movs	r3, #15
   264fc:	18fb      	adds	r3, r7, r3
   264fe:	781b      	ldrb	r3, [r3, #0]
   26500:	b25b      	sxtb	r3, r3
   26502:	4a40      	ldr	r2, [pc, #256]	; (26604 <send+0x15c>)
   26504:	011b      	lsls	r3, r3, #4
   26506:	18d3      	adds	r3, r2, r3
   26508:	330a      	adds	r3, #10
   2650a:	781b      	ldrb	r3, [r3, #0]
   2650c:	b2db      	uxtb	r3, r3
   2650e:	2b01      	cmp	r3, #1
   26510:	d16f      	bne.n	265f2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   26512:	2323      	movs	r3, #35	; 0x23
   26514:	18fb      	adds	r3, r7, r3
   26516:	2245      	movs	r2, #69	; 0x45
   26518:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2651a:	2324      	movs	r3, #36	; 0x24
   2651c:	18fb      	adds	r3, r7, r3
   2651e:	2250      	movs	r2, #80	; 0x50
   26520:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   26522:	2310      	movs	r3, #16
   26524:	18fb      	adds	r3, r7, r3
   26526:	220f      	movs	r2, #15
   26528:	18ba      	adds	r2, r7, r2
   2652a:	7812      	ldrb	r2, [r2, #0]
   2652c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2652e:	2310      	movs	r3, #16
   26530:	18fb      	adds	r3, r7, r3
   26532:	220c      	movs	r2, #12
   26534:	18ba      	adds	r2, r7, r2
   26536:	8812      	ldrh	r2, [r2, #0]
   26538:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2653a:	230f      	movs	r3, #15
   2653c:	18fb      	adds	r3, r7, r3
   2653e:	781b      	ldrb	r3, [r3, #0]
   26540:	b25b      	sxtb	r3, r3
   26542:	4a30      	ldr	r2, [pc, #192]	; (26604 <send+0x15c>)
   26544:	011b      	lsls	r3, r3, #4
   26546:	18d3      	adds	r3, r2, r3
   26548:	3306      	adds	r3, #6
   2654a:	881b      	ldrh	r3, [r3, #0]
   2654c:	b29a      	uxth	r2, r3
   2654e:	2310      	movs	r3, #16
   26550:	18fb      	adds	r3, r7, r3
   26552:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26554:	230f      	movs	r3, #15
   26556:	18fb      	adds	r3, r7, r3
   26558:	781b      	ldrb	r3, [r3, #0]
   2655a:	b25b      	sxtb	r3, r3
   2655c:	2b06      	cmp	r3, #6
   2655e:	dd03      	ble.n	26568 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26560:	2324      	movs	r3, #36	; 0x24
   26562:	18fb      	adds	r3, r7, r3
   26564:	2244      	movs	r2, #68	; 0x44
   26566:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26568:	230f      	movs	r3, #15
   2656a:	18fb      	adds	r3, r7, r3
   2656c:	781b      	ldrb	r3, [r3, #0]
   2656e:	b25b      	sxtb	r3, r3
   26570:	4a24      	ldr	r2, [pc, #144]	; (26604 <send+0x15c>)
   26572:	011b      	lsls	r3, r3, #4
   26574:	18d3      	adds	r3, r2, r3
   26576:	330b      	adds	r3, #11
   26578:	781b      	ldrb	r3, [r3, #0]
   2657a:	b2db      	uxtb	r3, r3
   2657c:	001a      	movs	r2, r3
   2657e:	2301      	movs	r3, #1
   26580:	4013      	ands	r3, r2
   26582:	d00f      	beq.n	265a4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   26584:	2323      	movs	r3, #35	; 0x23
   26586:	18fb      	adds	r3, r7, r3
   26588:	224c      	movs	r2, #76	; 0x4c
   2658a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   2658c:	230f      	movs	r3, #15
   2658e:	18fb      	adds	r3, r7, r3
   26590:	2200      	movs	r2, #0
   26592:	569a      	ldrsb	r2, [r3, r2]
   26594:	2324      	movs	r3, #36	; 0x24
   26596:	18fb      	adds	r3, r7, r3
   26598:	491a      	ldr	r1, [pc, #104]	; (26604 <send+0x15c>)
   2659a:	0112      	lsls	r2, r2, #4
   2659c:	188a      	adds	r2, r1, r2
   2659e:	3208      	adds	r2, #8
   265a0:	8812      	ldrh	r2, [r2, #0]
   265a2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   265a4:	2323      	movs	r3, #35	; 0x23
   265a6:	18fb      	adds	r3, r7, r3
   265a8:	781b      	ldrb	r3, [r3, #0]
   265aa:	2280      	movs	r2, #128	; 0x80
   265ac:	4252      	negs	r2, r2
   265ae:	4313      	orrs	r3, r2
   265b0:	b2d9      	uxtb	r1, r3
   265b2:	2310      	movs	r3, #16
   265b4:	18fa      	adds	r2, r7, r3
   265b6:	2324      	movs	r3, #36	; 0x24
   265b8:	18fb      	adds	r3, r7, r3
   265ba:	881b      	ldrh	r3, [r3, #0]
   265bc:	9302      	str	r3, [sp, #8]
   265be:	230c      	movs	r3, #12
   265c0:	18fb      	adds	r3, r7, r3
   265c2:	881b      	ldrh	r3, [r3, #0]
   265c4:	9301      	str	r3, [sp, #4]
   265c6:	68bb      	ldr	r3, [r7, #8]
   265c8:	9300      	str	r3, [sp, #0]
   265ca:	2310      	movs	r3, #16
   265cc:	2002      	movs	r0, #2
   265ce:	4c0e      	ldr	r4, [pc, #56]	; (26608 <send+0x160>)
   265d0:	47a0      	blx	r4
   265d2:	0003      	movs	r3, r0
   265d4:	001a      	movs	r2, r3
   265d6:	2326      	movs	r3, #38	; 0x26
   265d8:	18fb      	adds	r3, r7, r3
   265da:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   265dc:	2326      	movs	r3, #38	; 0x26
   265de:	18fb      	adds	r3, r7, r3
   265e0:	2200      	movs	r2, #0
   265e2:	5e9b      	ldrsh	r3, [r3, r2]
   265e4:	2b00      	cmp	r3, #0
   265e6:	d004      	beq.n	265f2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   265e8:	2326      	movs	r3, #38	; 0x26
   265ea:	18fb      	adds	r3, r7, r3
   265ec:	220e      	movs	r2, #14
   265ee:	4252      	negs	r2, r2
   265f0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   265f2:	2326      	movs	r3, #38	; 0x26
   265f4:	18fb      	adds	r3, r7, r3
   265f6:	2200      	movs	r2, #0
   265f8:	5e9b      	ldrsh	r3, [r3, r2]
}
   265fa:	0018      	movs	r0, r3
   265fc:	46bd      	mov	sp, r7
   265fe:	b00b      	add	sp, #44	; 0x2c
   26600:	bd90      	pop	{r4, r7, pc}
   26602:	46c0      	nop			; (mov r8, r8)
   26604:	20005b98 	.word	0x20005b98
   26608:	00021a51 	.word	0x00021a51

0002660c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2660c:	b590      	push	{r4, r7, lr}
   2660e:	b08d      	sub	sp, #52	; 0x34
   26610:	af04      	add	r7, sp, #16
   26612:	60b9      	str	r1, [r7, #8]
   26614:	0011      	movs	r1, r2
   26616:	607b      	str	r3, [r7, #4]
   26618:	230f      	movs	r3, #15
   2661a:	18fb      	adds	r3, r7, r3
   2661c:	1c02      	adds	r2, r0, #0
   2661e:	701a      	strb	r2, [r3, #0]
   26620:	230c      	movs	r3, #12
   26622:	18fb      	adds	r3, r7, r3
   26624:	1c0a      	adds	r2, r1, #0
   26626:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26628:	231e      	movs	r3, #30
   2662a:	18fb      	adds	r3, r7, r3
   2662c:	2206      	movs	r2, #6
   2662e:	4252      	negs	r2, r2
   26630:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   26632:	230f      	movs	r3, #15
   26634:	18fb      	adds	r3, r7, r3
   26636:	781b      	ldrb	r3, [r3, #0]
   26638:	2b7f      	cmp	r3, #127	; 0x7f
   2663a:	d900      	bls.n	2663e <recv+0x32>
   2663c:	e099      	b.n	26772 <recv+0x166>
   2663e:	68bb      	ldr	r3, [r7, #8]
   26640:	2b00      	cmp	r3, #0
   26642:	d100      	bne.n	26646 <recv+0x3a>
   26644:	e095      	b.n	26772 <recv+0x166>
   26646:	230c      	movs	r3, #12
   26648:	18fb      	adds	r3, r7, r3
   2664a:	881b      	ldrh	r3, [r3, #0]
   2664c:	2b00      	cmp	r3, #0
   2664e:	d100      	bne.n	26652 <recv+0x46>
   26650:	e08f      	b.n	26772 <recv+0x166>
   26652:	230f      	movs	r3, #15
   26654:	18fb      	adds	r3, r7, r3
   26656:	781b      	ldrb	r3, [r3, #0]
   26658:	b25b      	sxtb	r3, r3
   2665a:	4a4a      	ldr	r2, [pc, #296]	; (26784 <recv+0x178>)
   2665c:	011b      	lsls	r3, r3, #4
   2665e:	18d3      	adds	r3, r2, r3
   26660:	330a      	adds	r3, #10
   26662:	781b      	ldrb	r3, [r3, #0]
   26664:	b2db      	uxtb	r3, r3
   26666:	2b01      	cmp	r3, #1
   26668:	d000      	beq.n	2666c <recv+0x60>
   2666a:	e082      	b.n	26772 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2666c:	231e      	movs	r3, #30
   2666e:	18fb      	adds	r3, r7, r3
   26670:	2200      	movs	r2, #0
   26672:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26674:	230f      	movs	r3, #15
   26676:	18fb      	adds	r3, r7, r3
   26678:	2200      	movs	r2, #0
   2667a:	569a      	ldrsb	r2, [r3, r2]
   2667c:	4b41      	ldr	r3, [pc, #260]	; (26784 <recv+0x178>)
   2667e:	0112      	lsls	r2, r2, #4
   26680:	68b9      	ldr	r1, [r7, #8]
   26682:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26684:	230f      	movs	r3, #15
   26686:	18fb      	adds	r3, r7, r3
   26688:	781b      	ldrb	r3, [r3, #0]
   2668a:	b25b      	sxtb	r3, r3
   2668c:	4a3d      	ldr	r2, [pc, #244]	; (26784 <recv+0x178>)
   2668e:	011b      	lsls	r3, r3, #4
   26690:	18d3      	adds	r3, r2, r3
   26692:	3304      	adds	r3, #4
   26694:	220c      	movs	r2, #12
   26696:	18ba      	adds	r2, r7, r2
   26698:	8812      	ldrh	r2, [r2, #0]
   2669a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   2669c:	230f      	movs	r3, #15
   2669e:	18fb      	adds	r3, r7, r3
   266a0:	781b      	ldrb	r3, [r3, #0]
   266a2:	b25b      	sxtb	r3, r3
   266a4:	4a37      	ldr	r2, [pc, #220]	; (26784 <recv+0x178>)
   266a6:	011b      	lsls	r3, r3, #4
   266a8:	18d3      	adds	r3, r2, r3
   266aa:	330c      	adds	r3, #12
   266ac:	781b      	ldrb	r3, [r3, #0]
   266ae:	b2db      	uxtb	r3, r3
   266b0:	2b00      	cmp	r3, #0
   266b2:	d15e      	bne.n	26772 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   266b4:	231d      	movs	r3, #29
   266b6:	18fb      	adds	r3, r7, r3
   266b8:	2246      	movs	r2, #70	; 0x46
   266ba:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   266bc:	230f      	movs	r3, #15
   266be:	18fb      	adds	r3, r7, r3
   266c0:	781b      	ldrb	r3, [r3, #0]
   266c2:	b25b      	sxtb	r3, r3
   266c4:	4a2f      	ldr	r2, [pc, #188]	; (26784 <recv+0x178>)
   266c6:	011b      	lsls	r3, r3, #4
   266c8:	18d3      	adds	r3, r2, r3
   266ca:	330c      	adds	r3, #12
   266cc:	2201      	movs	r2, #1
   266ce:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   266d0:	230f      	movs	r3, #15
   266d2:	18fb      	adds	r3, r7, r3
   266d4:	781b      	ldrb	r3, [r3, #0]
   266d6:	b25b      	sxtb	r3, r3
   266d8:	4a2a      	ldr	r2, [pc, #168]	; (26784 <recv+0x178>)
   266da:	011b      	lsls	r3, r3, #4
   266dc:	18d3      	adds	r3, r2, r3
   266de:	330b      	adds	r3, #11
   266e0:	781b      	ldrb	r3, [r3, #0]
   266e2:	b2db      	uxtb	r3, r3
   266e4:	001a      	movs	r2, r3
   266e6:	2301      	movs	r3, #1
   266e8:	4013      	ands	r3, r2
   266ea:	d003      	beq.n	266f4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   266ec:	231d      	movs	r3, #29
   266ee:	18fb      	adds	r3, r7, r3
   266f0:	224d      	movs	r2, #77	; 0x4d
   266f2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   266f4:	687b      	ldr	r3, [r7, #4]
   266f6:	2b00      	cmp	r3, #0
   266f8:	d105      	bne.n	26706 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   266fa:	2314      	movs	r3, #20
   266fc:	18fb      	adds	r3, r7, r3
   266fe:	2201      	movs	r2, #1
   26700:	4252      	negs	r2, r2
   26702:	601a      	str	r2, [r3, #0]
   26704:	e003      	b.n	2670e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26706:	2314      	movs	r3, #20
   26708:	18fb      	adds	r3, r7, r3
   2670a:	687a      	ldr	r2, [r7, #4]
   2670c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2670e:	2314      	movs	r3, #20
   26710:	18fb      	adds	r3, r7, r3
   26712:	220f      	movs	r2, #15
   26714:	18ba      	adds	r2, r7, r2
   26716:	7812      	ldrb	r2, [r2, #0]
   26718:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2671a:	230f      	movs	r3, #15
   2671c:	18fb      	adds	r3, r7, r3
   2671e:	781b      	ldrb	r3, [r3, #0]
   26720:	b25b      	sxtb	r3, r3
   26722:	4a18      	ldr	r2, [pc, #96]	; (26784 <recv+0x178>)
   26724:	011b      	lsls	r3, r3, #4
   26726:	18d3      	adds	r3, r2, r3
   26728:	3306      	adds	r3, #6
   2672a:	881b      	ldrh	r3, [r3, #0]
   2672c:	b29a      	uxth	r2, r3
   2672e:	2314      	movs	r3, #20
   26730:	18fb      	adds	r3, r7, r3
   26732:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26734:	2314      	movs	r3, #20
   26736:	18fa      	adds	r2, r7, r3
   26738:	231d      	movs	r3, #29
   2673a:	18fb      	adds	r3, r7, r3
   2673c:	7819      	ldrb	r1, [r3, #0]
   2673e:	2300      	movs	r3, #0
   26740:	9302      	str	r3, [sp, #8]
   26742:	2300      	movs	r3, #0
   26744:	9301      	str	r3, [sp, #4]
   26746:	2300      	movs	r3, #0
   26748:	9300      	str	r3, [sp, #0]
   2674a:	2308      	movs	r3, #8
   2674c:	2002      	movs	r0, #2
   2674e:	4c0e      	ldr	r4, [pc, #56]	; (26788 <recv+0x17c>)
   26750:	47a0      	blx	r4
   26752:	0003      	movs	r3, r0
   26754:	001a      	movs	r2, r3
   26756:	231e      	movs	r3, #30
   26758:	18fb      	adds	r3, r7, r3
   2675a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2675c:	231e      	movs	r3, #30
   2675e:	18fb      	adds	r3, r7, r3
   26760:	2200      	movs	r2, #0
   26762:	5e9b      	ldrsh	r3, [r3, r2]
   26764:	2b00      	cmp	r3, #0
   26766:	d004      	beq.n	26772 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   26768:	231e      	movs	r3, #30
   2676a:	18fb      	adds	r3, r7, r3
   2676c:	220e      	movs	r2, #14
   2676e:	4252      	negs	r2, r2
   26770:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26772:	231e      	movs	r3, #30
   26774:	18fb      	adds	r3, r7, r3
   26776:	2200      	movs	r2, #0
   26778:	5e9b      	ldrsh	r3, [r3, r2]
}
   2677a:	0018      	movs	r0, r3
   2677c:	46bd      	mov	sp, r7
   2677e:	b009      	add	sp, #36	; 0x24
   26780:	bd90      	pop	{r4, r7, pc}
   26782:	46c0      	nop			; (mov r8, r8)
   26784:	20005b98 	.word	0x20005b98
   26788:	00021a51 	.word	0x00021a51

0002678c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   2678c:	b5b0      	push	{r4, r5, r7, lr}
   2678e:	b088      	sub	sp, #32
   26790:	af04      	add	r7, sp, #16
   26792:	0002      	movs	r2, r0
   26794:	1dfb      	adds	r3, r7, #7
   26796:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26798:	230f      	movs	r3, #15
   2679a:	18fb      	adds	r3, r7, r3
   2679c:	22fa      	movs	r2, #250	; 0xfa
   2679e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   267a0:	4b43      	ldr	r3, [pc, #268]	; (268b0 <close+0x124>)
   267a2:	0018      	movs	r0, r3
   267a4:	4b43      	ldr	r3, [pc, #268]	; (268b4 <close+0x128>)
   267a6:	4798      	blx	r3
   267a8:	1dfb      	adds	r3, r7, #7
   267aa:	2200      	movs	r2, #0
   267ac:	569a      	ldrsb	r2, [r3, r2]
   267ae:	4b42      	ldr	r3, [pc, #264]	; (268b8 <close+0x12c>)
   267b0:	0011      	movs	r1, r2
   267b2:	0018      	movs	r0, r3
   267b4:	4b3f      	ldr	r3, [pc, #252]	; (268b4 <close+0x128>)
   267b6:	4798      	blx	r3
   267b8:	4b40      	ldr	r3, [pc, #256]	; (268bc <close+0x130>)
   267ba:	0018      	movs	r0, r3
   267bc:	4b3d      	ldr	r3, [pc, #244]	; (268b4 <close+0x128>)
   267be:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   267c0:	1dfb      	adds	r3, r7, #7
   267c2:	781b      	ldrb	r3, [r3, #0]
   267c4:	2b7f      	cmp	r3, #127	; 0x7f
   267c6:	d86a      	bhi.n	2689e <close+0x112>
   267c8:	1dfb      	adds	r3, r7, #7
   267ca:	781b      	ldrb	r3, [r3, #0]
   267cc:	b25b      	sxtb	r3, r3
   267ce:	4a3c      	ldr	r2, [pc, #240]	; (268c0 <close+0x134>)
   267d0:	011b      	lsls	r3, r3, #4
   267d2:	18d3      	adds	r3, r2, r3
   267d4:	330a      	adds	r3, #10
   267d6:	781b      	ldrb	r3, [r3, #0]
   267d8:	b2db      	uxtb	r3, r3
   267da:	2b01      	cmp	r3, #1
   267dc:	d15f      	bne.n	2689e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   267de:	230e      	movs	r3, #14
   267e0:	18fb      	adds	r3, r7, r3
   267e2:	2249      	movs	r2, #73	; 0x49
   267e4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   267e6:	2308      	movs	r3, #8
   267e8:	18fb      	adds	r3, r7, r3
   267ea:	1dfa      	adds	r2, r7, #7
   267ec:	7812      	ldrb	r2, [r2, #0]
   267ee:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   267f0:	1dfb      	adds	r3, r7, #7
   267f2:	781b      	ldrb	r3, [r3, #0]
   267f4:	b25b      	sxtb	r3, r3
   267f6:	4a32      	ldr	r2, [pc, #200]	; (268c0 <close+0x134>)
   267f8:	011b      	lsls	r3, r3, #4
   267fa:	18d3      	adds	r3, r2, r3
   267fc:	3306      	adds	r3, #6
   267fe:	881b      	ldrh	r3, [r3, #0]
   26800:	b29a      	uxth	r2, r3
   26802:	2308      	movs	r3, #8
   26804:	18fb      	adds	r3, r7, r3
   26806:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26808:	1dfb      	adds	r3, r7, #7
   2680a:	781b      	ldrb	r3, [r3, #0]
   2680c:	b25b      	sxtb	r3, r3
   2680e:	4a2c      	ldr	r2, [pc, #176]	; (268c0 <close+0x134>)
   26810:	011b      	lsls	r3, r3, #4
   26812:	18d3      	adds	r3, r2, r3
   26814:	330a      	adds	r3, #10
   26816:	2200      	movs	r2, #0
   26818:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2681a:	1dfb      	adds	r3, r7, #7
   2681c:	781b      	ldrb	r3, [r3, #0]
   2681e:	b25b      	sxtb	r3, r3
   26820:	4a27      	ldr	r2, [pc, #156]	; (268c0 <close+0x134>)
   26822:	011b      	lsls	r3, r3, #4
   26824:	18d3      	adds	r3, r2, r3
   26826:	3306      	adds	r3, #6
   26828:	2200      	movs	r2, #0
   2682a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2682c:	1dfb      	adds	r3, r7, #7
   2682e:	781b      	ldrb	r3, [r3, #0]
   26830:	b25b      	sxtb	r3, r3
   26832:	4a23      	ldr	r2, [pc, #140]	; (268c0 <close+0x134>)
   26834:	011b      	lsls	r3, r3, #4
   26836:	18d3      	adds	r3, r2, r3
   26838:	330b      	adds	r3, #11
   2683a:	781b      	ldrb	r3, [r3, #0]
   2683c:	b2db      	uxtb	r3, r3
   2683e:	001a      	movs	r2, r3
   26840:	2301      	movs	r3, #1
   26842:	4013      	ands	r3, r2
   26844:	d003      	beq.n	2684e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   26846:	230e      	movs	r3, #14
   26848:	18fb      	adds	r3, r7, r3
   2684a:	224e      	movs	r2, #78	; 0x4e
   2684c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2684e:	230f      	movs	r3, #15
   26850:	18fc      	adds	r4, r7, r3
   26852:	2308      	movs	r3, #8
   26854:	18fa      	adds	r2, r7, r3
   26856:	230e      	movs	r3, #14
   26858:	18fb      	adds	r3, r7, r3
   2685a:	7819      	ldrb	r1, [r3, #0]
   2685c:	2300      	movs	r3, #0
   2685e:	9302      	str	r3, [sp, #8]
   26860:	2300      	movs	r3, #0
   26862:	9301      	str	r3, [sp, #4]
   26864:	2300      	movs	r3, #0
   26866:	9300      	str	r3, [sp, #0]
   26868:	2304      	movs	r3, #4
   2686a:	2002      	movs	r0, #2
   2686c:	4d15      	ldr	r5, [pc, #84]	; (268c4 <close+0x138>)
   2686e:	47a8      	blx	r5
   26870:	0003      	movs	r3, r0
   26872:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26874:	230f      	movs	r3, #15
   26876:	18fb      	adds	r3, r7, r3
   26878:	781b      	ldrb	r3, [r3, #0]
   2687a:	b25b      	sxtb	r3, r3
   2687c:	2b00      	cmp	r3, #0
   2687e:	d003      	beq.n	26888 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26880:	230f      	movs	r3, #15
   26882:	18fb      	adds	r3, r7, r3
   26884:	22f7      	movs	r2, #247	; 0xf7
   26886:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26888:	1dfb      	adds	r3, r7, #7
   2688a:	781b      	ldrb	r3, [r3, #0]
   2688c:	b25b      	sxtb	r3, r3
   2688e:	011a      	lsls	r2, r3, #4
   26890:	4b0b      	ldr	r3, [pc, #44]	; (268c0 <close+0x134>)
   26892:	18d3      	adds	r3, r2, r3
   26894:	2210      	movs	r2, #16
   26896:	2100      	movs	r1, #0
   26898:	0018      	movs	r0, r3
   2689a:	4b0b      	ldr	r3, [pc, #44]	; (268c8 <close+0x13c>)
   2689c:	4798      	blx	r3
	}
	return s8Ret;
   2689e:	230f      	movs	r3, #15
   268a0:	18fb      	adds	r3, r7, r3
   268a2:	781b      	ldrb	r3, [r3, #0]
   268a4:	b25b      	sxtb	r3, r3
}
   268a6:	0018      	movs	r0, r3
   268a8:	46bd      	mov	sp, r7
   268aa:	b004      	add	sp, #16
   268ac:	bdb0      	pop	{r4, r5, r7, pc}
   268ae:	46c0      	nop			; (mov r8, r8)
   268b0:	0003a494 	.word	0x0003a494
   268b4:	0001ea59 	.word	0x0001ea59
   268b8:	0003a4d4 	.word	0x0003a4d4
   268bc:	0003a4b4 	.word	0x0003a4b4
   268c0:	20005b98 	.word	0x20005b98
   268c4:	00021a51 	.word	0x00021a51
   268c8:	000217f1 	.word	0x000217f1

000268cc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   268cc:	b580      	push	{r7, lr}
   268ce:	b086      	sub	sp, #24
   268d0:	af00      	add	r7, sp, #0
   268d2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   268d4:	2300      	movs	r3, #0
   268d6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   268d8:	2317      	movs	r3, #23
   268da:	18fb      	adds	r3, r7, r3
   268dc:	2200      	movs	r2, #0
   268de:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   268e0:	2316      	movs	r3, #22
   268e2:	18fb      	adds	r3, r7, r3
   268e4:	2200      	movs	r2, #0
   268e6:	701a      	strb	r2, [r3, #0]
   268e8:	e060      	b.n	269ac <nmi_inet_addr+0xe0>
	{
		j = 0;
   268ea:	2315      	movs	r3, #21
   268ec:	18fb      	adds	r3, r7, r3
   268ee:	2200      	movs	r2, #0
   268f0:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   268f2:	2314      	movs	r3, #20
   268f4:	18fb      	adds	r3, r7, r3
   268f6:	687a      	ldr	r2, [r7, #4]
   268f8:	7812      	ldrb	r2, [r2, #0]
   268fa:	701a      	strb	r2, [r3, #0]
			++j;
   268fc:	2315      	movs	r3, #21
   268fe:	18fb      	adds	r3, r7, r3
   26900:	2215      	movs	r2, #21
   26902:	18ba      	adds	r2, r7, r2
   26904:	7812      	ldrb	r2, [r2, #0]
   26906:	3201      	adds	r2, #1
   26908:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2690a:	2315      	movs	r3, #21
   2690c:	18fb      	adds	r3, r7, r3
   2690e:	781b      	ldrb	r3, [r3, #0]
   26910:	2b04      	cmp	r3, #4
   26912:	d901      	bls.n	26918 <nmi_inet_addr+0x4c>
			{
				return 0;
   26914:	2300      	movs	r3, #0
   26916:	e057      	b.n	269c8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26918:	2314      	movs	r3, #20
   2691a:	18fb      	adds	r3, r7, r3
   2691c:	781b      	ldrb	r3, [r3, #0]
   2691e:	2b2e      	cmp	r3, #46	; 0x2e
   26920:	d004      	beq.n	2692c <nmi_inet_addr+0x60>
   26922:	2314      	movs	r3, #20
   26924:	18fb      	adds	r3, r7, r3
   26926:	781b      	ldrb	r3, [r3, #0]
   26928:	2b00      	cmp	r3, #0
   2692a:	d10d      	bne.n	26948 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2692c:	2316      	movs	r3, #22
   2692e:	18fb      	adds	r3, r7, r3
   26930:	781b      	ldrb	r3, [r3, #0]
   26932:	220c      	movs	r2, #12
   26934:	18ba      	adds	r2, r7, r2
   26936:	2117      	movs	r1, #23
   26938:	1879      	adds	r1, r7, r1
   2693a:	7809      	ldrb	r1, [r1, #0]
   2693c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2693e:	2317      	movs	r3, #23
   26940:	18fb      	adds	r3, r7, r3
   26942:	2200      	movs	r2, #0
   26944:	701a      	strb	r2, [r3, #0]
   26946:	e01d      	b.n	26984 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26948:	2314      	movs	r3, #20
   2694a:	18fb      	adds	r3, r7, r3
   2694c:	781b      	ldrb	r3, [r3, #0]
   2694e:	2b2f      	cmp	r3, #47	; 0x2f
   26950:	d916      	bls.n	26980 <nmi_inet_addr+0xb4>
   26952:	2314      	movs	r3, #20
   26954:	18fb      	adds	r3, r7, r3
   26956:	781b      	ldrb	r3, [r3, #0]
   26958:	2b39      	cmp	r3, #57	; 0x39
   2695a:	d811      	bhi.n	26980 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2695c:	2317      	movs	r3, #23
   2695e:	18fb      	adds	r3, r7, r3
   26960:	781b      	ldrb	r3, [r3, #0]
   26962:	1c1a      	adds	r2, r3, #0
   26964:	0092      	lsls	r2, r2, #2
   26966:	18d3      	adds	r3, r2, r3
   26968:	18db      	adds	r3, r3, r3
   2696a:	b2da      	uxtb	r2, r3
   2696c:	2314      	movs	r3, #20
   2696e:	18fb      	adds	r3, r7, r3
   26970:	781b      	ldrb	r3, [r3, #0]
   26972:	18d3      	adds	r3, r2, r3
   26974:	b2da      	uxtb	r2, r3
   26976:	2317      	movs	r3, #23
   26978:	18fb      	adds	r3, r7, r3
   2697a:	3a30      	subs	r2, #48	; 0x30
   2697c:	701a      	strb	r2, [r3, #0]
   2697e:	e001      	b.n	26984 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26980:	2300      	movs	r3, #0
   26982:	e021      	b.n	269c8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26984:	687b      	ldr	r3, [r7, #4]
   26986:	3301      	adds	r3, #1
   26988:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2698a:	2314      	movs	r3, #20
   2698c:	18fb      	adds	r3, r7, r3
   2698e:	781b      	ldrb	r3, [r3, #0]
   26990:	2b2e      	cmp	r3, #46	; 0x2e
   26992:	d004      	beq.n	2699e <nmi_inet_addr+0xd2>
   26994:	2314      	movs	r3, #20
   26996:	18fb      	adds	r3, r7, r3
   26998:	781b      	ldrb	r3, [r3, #0]
   2699a:	2b00      	cmp	r3, #0
   2699c:	d1a9      	bne.n	268f2 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2699e:	2316      	movs	r3, #22
   269a0:	18fb      	adds	r3, r7, r3
   269a2:	2216      	movs	r2, #22
   269a4:	18ba      	adds	r2, r7, r2
   269a6:	7812      	ldrb	r2, [r2, #0]
   269a8:	3201      	adds	r2, #1
   269aa:	701a      	strb	r2, [r3, #0]
   269ac:	2316      	movs	r3, #22
   269ae:	18fb      	adds	r3, r7, r3
   269b0:	781b      	ldrb	r3, [r3, #0]
   269b2:	2b03      	cmp	r3, #3
   269b4:	d999      	bls.n	268ea <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   269b6:	230c      	movs	r3, #12
   269b8:	18f9      	adds	r1, r7, r3
   269ba:	2310      	movs	r3, #16
   269bc:	18fb      	adds	r3, r7, r3
   269be:	2204      	movs	r2, #4
   269c0:	0018      	movs	r0, r3
   269c2:	4b03      	ldr	r3, [pc, #12]	; (269d0 <nmi_inet_addr+0x104>)
   269c4:	4798      	blx	r3
	return u32IP;
   269c6:	693b      	ldr	r3, [r7, #16]
}
   269c8:	0018      	movs	r0, r3
   269ca:	46bd      	mov	sp, r7
   269cc:	b006      	add	sp, #24
   269ce:	bd80      	pop	{r7, pc}
   269d0:	000217b5 	.word	0x000217b5

000269d4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   269d4:	b5b0      	push	{r4, r5, r7, lr}
   269d6:	b088      	sub	sp, #32
   269d8:	af04      	add	r7, sp, #16
   269da:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   269dc:	230f      	movs	r3, #15
   269de:	18fb      	adds	r3, r7, r3
   269e0:	22fa      	movs	r2, #250	; 0xfa
   269e2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   269e4:	687b      	ldr	r3, [r7, #4]
   269e6:	0018      	movs	r0, r3
   269e8:	4b14      	ldr	r3, [pc, #80]	; (26a3c <gethostbyname+0x68>)
   269ea:	4798      	blx	r3
   269ec:	0003      	movs	r3, r0
   269ee:	001a      	movs	r2, r3
   269f0:	230e      	movs	r3, #14
   269f2:	18fb      	adds	r3, r7, r3
   269f4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   269f6:	230e      	movs	r3, #14
   269f8:	18fb      	adds	r3, r7, r3
   269fa:	781b      	ldrb	r3, [r3, #0]
   269fc:	2b40      	cmp	r3, #64	; 0x40
   269fe:	d815      	bhi.n	26a2c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26a00:	230e      	movs	r3, #14
   26a02:	18fb      	adds	r3, r7, r3
   26a04:	781b      	ldrb	r3, [r3, #0]
   26a06:	b29b      	uxth	r3, r3
   26a08:	3301      	adds	r3, #1
   26a0a:	b299      	uxth	r1, r3
   26a0c:	230f      	movs	r3, #15
   26a0e:	18fc      	adds	r4, r7, r3
   26a10:	687a      	ldr	r2, [r7, #4]
   26a12:	2300      	movs	r3, #0
   26a14:	9302      	str	r3, [sp, #8]
   26a16:	2300      	movs	r3, #0
   26a18:	9301      	str	r3, [sp, #4]
   26a1a:	2300      	movs	r3, #0
   26a1c:	9300      	str	r3, [sp, #0]
   26a1e:	000b      	movs	r3, r1
   26a20:	214a      	movs	r1, #74	; 0x4a
   26a22:	2002      	movs	r0, #2
   26a24:	4d06      	ldr	r5, [pc, #24]	; (26a40 <gethostbyname+0x6c>)
   26a26:	47a8      	blx	r5
   26a28:	0003      	movs	r3, r0
   26a2a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26a2c:	230f      	movs	r3, #15
   26a2e:	18fb      	adds	r3, r7, r3
   26a30:	781b      	ldrb	r3, [r3, #0]
   26a32:	b25b      	sxtb	r3, r3
}
   26a34:	0018      	movs	r0, r3
   26a36:	46bd      	mov	sp, r7
   26a38:	b004      	add	sp, #16
   26a3a:	bdb0      	pop	{r4, r5, r7, pc}
   26a3c:	0002182f 	.word	0x0002182f
   26a40:	00021a51 	.word	0x00021a51

00026a44 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26a44:	b580      	push	{r7, lr}
   26a46:	b082      	sub	sp, #8
   26a48:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26a4a:	003b      	movs	r3, r7
   26a4c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26a4e:	687b      	ldr	r3, [r7, #4]
   26a50:	22b9      	movs	r2, #185	; 0xb9
   26a52:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26a54:	4b13      	ldr	r3, [pc, #76]	; (26aa4 <spi_flash_enter_low_power_mode+0x60>)
   26a56:	2100      	movs	r1, #0
   26a58:	0018      	movs	r0, r3
   26a5a:	4b13      	ldr	r3, [pc, #76]	; (26aa8 <spi_flash_enter_low_power_mode+0x64>)
   26a5c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26a5e:	687b      	ldr	r3, [r7, #4]
   26a60:	781b      	ldrb	r3, [r3, #0]
   26a62:	001a      	movs	r2, r3
   26a64:	4b11      	ldr	r3, [pc, #68]	; (26aac <spi_flash_enter_low_power_mode+0x68>)
   26a66:	0011      	movs	r1, r2
   26a68:	0018      	movs	r0, r3
   26a6a:	4b0f      	ldr	r3, [pc, #60]	; (26aa8 <spi_flash_enter_low_power_mode+0x64>)
   26a6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26a6e:	4b10      	ldr	r3, [pc, #64]	; (26ab0 <spi_flash_enter_low_power_mode+0x6c>)
   26a70:	2101      	movs	r1, #1
   26a72:	0018      	movs	r0, r3
   26a74:	4b0c      	ldr	r3, [pc, #48]	; (26aa8 <spi_flash_enter_low_power_mode+0x64>)
   26a76:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26a78:	4b0e      	ldr	r3, [pc, #56]	; (26ab4 <spi_flash_enter_low_power_mode+0x70>)
   26a7a:	2100      	movs	r1, #0
   26a7c:	0018      	movs	r0, r3
   26a7e:	4b0a      	ldr	r3, [pc, #40]	; (26aa8 <spi_flash_enter_low_power_mode+0x64>)
   26a80:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26a82:	4b0d      	ldr	r3, [pc, #52]	; (26ab8 <spi_flash_enter_low_power_mode+0x74>)
   26a84:	2181      	movs	r1, #129	; 0x81
   26a86:	0018      	movs	r0, r3
   26a88:	4b07      	ldr	r3, [pc, #28]	; (26aa8 <spi_flash_enter_low_power_mode+0x64>)
   26a8a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26a8c:	46c0      	nop			; (mov r8, r8)
   26a8e:	4b0b      	ldr	r3, [pc, #44]	; (26abc <spi_flash_enter_low_power_mode+0x78>)
   26a90:	0018      	movs	r0, r3
   26a92:	4b0b      	ldr	r3, [pc, #44]	; (26ac0 <spi_flash_enter_low_power_mode+0x7c>)
   26a94:	4798      	blx	r3
   26a96:	0003      	movs	r3, r0
   26a98:	2b01      	cmp	r3, #1
   26a9a:	d1f8      	bne.n	26a8e <spi_flash_enter_low_power_mode+0x4a>
}
   26a9c:	46c0      	nop			; (mov r8, r8)
   26a9e:	46bd      	mov	sp, r7
   26aa0:	b002      	add	sp, #8
   26aa2:	bd80      	pop	{r7, pc}
   26aa4:	00010208 	.word	0x00010208
   26aa8:	000238a5 	.word	0x000238a5
   26aac:	0001020c 	.word	0x0001020c
   26ab0:	00010214 	.word	0x00010214
   26ab4:	0001021c 	.word	0x0001021c
   26ab8:	00010204 	.word	0x00010204
   26abc:	00010218 	.word	0x00010218
   26ac0:	00023861 	.word	0x00023861

00026ac4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26ac4:	b580      	push	{r7, lr}
   26ac6:	b082      	sub	sp, #8
   26ac8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26aca:	003b      	movs	r3, r7
   26acc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26ace:	687b      	ldr	r3, [r7, #4]
   26ad0:	22ab      	movs	r2, #171	; 0xab
   26ad2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26ad4:	4b13      	ldr	r3, [pc, #76]	; (26b24 <spi_flash_leave_low_power_mode+0x60>)
   26ad6:	2100      	movs	r1, #0
   26ad8:	0018      	movs	r0, r3
   26ada:	4b13      	ldr	r3, [pc, #76]	; (26b28 <spi_flash_leave_low_power_mode+0x64>)
   26adc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26ade:	687b      	ldr	r3, [r7, #4]
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	001a      	movs	r2, r3
   26ae4:	4b11      	ldr	r3, [pc, #68]	; (26b2c <spi_flash_leave_low_power_mode+0x68>)
   26ae6:	0011      	movs	r1, r2
   26ae8:	0018      	movs	r0, r3
   26aea:	4b0f      	ldr	r3, [pc, #60]	; (26b28 <spi_flash_leave_low_power_mode+0x64>)
   26aec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26aee:	4b10      	ldr	r3, [pc, #64]	; (26b30 <spi_flash_leave_low_power_mode+0x6c>)
   26af0:	2101      	movs	r1, #1
   26af2:	0018      	movs	r0, r3
   26af4:	4b0c      	ldr	r3, [pc, #48]	; (26b28 <spi_flash_leave_low_power_mode+0x64>)
   26af6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26af8:	4b0e      	ldr	r3, [pc, #56]	; (26b34 <spi_flash_leave_low_power_mode+0x70>)
   26afa:	2100      	movs	r1, #0
   26afc:	0018      	movs	r0, r3
   26afe:	4b0a      	ldr	r3, [pc, #40]	; (26b28 <spi_flash_leave_low_power_mode+0x64>)
   26b00:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26b02:	4b0d      	ldr	r3, [pc, #52]	; (26b38 <spi_flash_leave_low_power_mode+0x74>)
   26b04:	2181      	movs	r1, #129	; 0x81
   26b06:	0018      	movs	r0, r3
   26b08:	4b07      	ldr	r3, [pc, #28]	; (26b28 <spi_flash_leave_low_power_mode+0x64>)
   26b0a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26b0c:	46c0      	nop			; (mov r8, r8)
   26b0e:	4b0b      	ldr	r3, [pc, #44]	; (26b3c <spi_flash_leave_low_power_mode+0x78>)
   26b10:	0018      	movs	r0, r3
   26b12:	4b0b      	ldr	r3, [pc, #44]	; (26b40 <spi_flash_leave_low_power_mode+0x7c>)
   26b14:	4798      	blx	r3
   26b16:	0003      	movs	r3, r0
   26b18:	2b01      	cmp	r3, #1
   26b1a:	d1f8      	bne.n	26b0e <spi_flash_leave_low_power_mode+0x4a>
}
   26b1c:	46c0      	nop			; (mov r8, r8)
   26b1e:	46bd      	mov	sp, r7
   26b20:	b002      	add	sp, #8
   26b22:	bd80      	pop	{r7, pc}
   26b24:	00010208 	.word	0x00010208
   26b28:	000238a5 	.word	0x000238a5
   26b2c:	0001020c 	.word	0x0001020c
   26b30:	00010214 	.word	0x00010214
   26b34:	0001021c 	.word	0x0001021c
   26b38:	00010204 	.word	0x00010204
   26b3c:	00010218 	.word	0x00010218
   26b40:	00023861 	.word	0x00023861

00026b44 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26b44:	b590      	push	{r4, r7, lr}
   26b46:	b085      	sub	sp, #20
   26b48:	af00      	add	r7, sp, #0
   26b4a:	0002      	movs	r2, r0
   26b4c:	1dfb      	adds	r3, r7, #7
   26b4e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26b50:	230f      	movs	r3, #15
   26b52:	18fb      	adds	r3, r7, r3
   26b54:	2200      	movs	r2, #0
   26b56:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26b58:	4b24      	ldr	r3, [pc, #144]	; (26bec <spi_flash_enable+0xa8>)
   26b5a:	4798      	blx	r3
   26b5c:	0003      	movs	r3, r0
   26b5e:	051b      	lsls	r3, r3, #20
   26b60:	0d1b      	lsrs	r3, r3, #20
   26b62:	4a23      	ldr	r2, [pc, #140]	; (26bf0 <spi_flash_enable+0xac>)
   26b64:	4293      	cmp	r3, r2
   26b66:	d938      	bls.n	26bda <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26b68:	230f      	movs	r3, #15
   26b6a:	18fc      	adds	r4, r7, r3
   26b6c:	2308      	movs	r3, #8
   26b6e:	18fb      	adds	r3, r7, r3
   26b70:	4a20      	ldr	r2, [pc, #128]	; (26bf4 <spi_flash_enable+0xb0>)
   26b72:	0019      	movs	r1, r3
   26b74:	0010      	movs	r0, r2
   26b76:	4b20      	ldr	r3, [pc, #128]	; (26bf8 <spi_flash_enable+0xb4>)
   26b78:	4798      	blx	r3
   26b7a:	0003      	movs	r3, r0
   26b7c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26b7e:	230f      	movs	r3, #15
   26b80:	18fb      	adds	r3, r7, r3
   26b82:	781b      	ldrb	r3, [r3, #0]
   26b84:	b25b      	sxtb	r3, r3
   26b86:	2b00      	cmp	r3, #0
   26b88:	d126      	bne.n	26bd8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26b8a:	68bb      	ldr	r3, [r7, #8]
   26b8c:	4a1b      	ldr	r2, [pc, #108]	; (26bfc <spi_flash_enable+0xb8>)
   26b8e:	4013      	ands	r3, r2
   26b90:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26b92:	68bb      	ldr	r3, [r7, #8]
   26b94:	4a1a      	ldr	r2, [pc, #104]	; (26c00 <spi_flash_enable+0xbc>)
   26b96:	4313      	orrs	r3, r2
   26b98:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26b9a:	68bb      	ldr	r3, [r7, #8]
   26b9c:	4a15      	ldr	r2, [pc, #84]	; (26bf4 <spi_flash_enable+0xb0>)
   26b9e:	0019      	movs	r1, r3
   26ba0:	0010      	movs	r0, r2
   26ba2:	4b18      	ldr	r3, [pc, #96]	; (26c04 <spi_flash_enable+0xc0>)
   26ba4:	4798      	blx	r3
		if(enable) {
   26ba6:	1dfb      	adds	r3, r7, #7
   26ba8:	781b      	ldrb	r3, [r3, #0]
   26baa:	2b00      	cmp	r3, #0
   26bac:	d002      	beq.n	26bb4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26bae:	4b16      	ldr	r3, [pc, #88]	; (26c08 <spi_flash_enable+0xc4>)
   26bb0:	4798      	blx	r3
   26bb2:	e001      	b.n	26bb8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26bb4:	4b15      	ldr	r3, [pc, #84]	; (26c0c <spi_flash_enable+0xc8>)
   26bb6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26bb8:	68bb      	ldr	r3, [r7, #8]
   26bba:	4a10      	ldr	r2, [pc, #64]	; (26bfc <spi_flash_enable+0xb8>)
   26bbc:	4013      	ands	r3, r2
   26bbe:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26bc0:	68bb      	ldr	r3, [r7, #8]
   26bc2:	2280      	movs	r2, #128	; 0x80
   26bc4:	0252      	lsls	r2, r2, #9
   26bc6:	4313      	orrs	r3, r2
   26bc8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26bca:	68bb      	ldr	r3, [r7, #8]
   26bcc:	4a09      	ldr	r2, [pc, #36]	; (26bf4 <spi_flash_enable+0xb0>)
   26bce:	0019      	movs	r1, r3
   26bd0:	0010      	movs	r0, r2
   26bd2:	4b0c      	ldr	r3, [pc, #48]	; (26c04 <spi_flash_enable+0xc0>)
   26bd4:	4798      	blx	r3
   26bd6:	e000      	b.n	26bda <spi_flash_enable+0x96>
			goto ERR1;
   26bd8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26bda:	230f      	movs	r3, #15
   26bdc:	18fb      	adds	r3, r7, r3
   26bde:	781b      	ldrb	r3, [r3, #0]
   26be0:	b25b      	sxtb	r3, r3
}
   26be2:	0018      	movs	r0, r3
   26be4:	46bd      	mov	sp, r7
   26be6:	b005      	add	sp, #20
   26be8:	bd90      	pop	{r4, r7, pc}
   26bea:	46c0      	nop			; (mov r8, r8)
   26bec:	00023181 	.word	0x00023181
   26bf0:	0000039f 	.word	0x0000039f
   26bf4:	00001410 	.word	0x00001410
   26bf8:	00023881 	.word	0x00023881
   26bfc:	f8888fff 	.word	0xf8888fff
   26c00:	01111000 	.word	0x01111000
   26c04:	000238a5 	.word	0x000238a5
   26c08:	00026ac5 	.word	0x00026ac5
   26c0c:	00026a45 	.word	0x00026a45

00026c10 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26c10:	b580      	push	{r7, lr}
   26c12:	b084      	sub	sp, #16
   26c14:	af00      	add	r7, sp, #0
   26c16:	0002      	movs	r2, r0
   26c18:	1dfb      	adds	r3, r7, #7
   26c1a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26c1c:	1dfb      	adds	r3, r7, #7
   26c1e:	781b      	ldrb	r3, [r3, #0]
   26c20:	2b00      	cmp	r3, #0
   26c22:	d108      	bne.n	26c36 <mem_test_unit_ready+0x26>
   26c24:	1dfb      	adds	r3, r7, #7
   26c26:	781a      	ldrb	r2, [r3, #0]
   26c28:	4b08      	ldr	r3, [pc, #32]	; (26c4c <mem_test_unit_ready+0x3c>)
   26c2a:	0152      	lsls	r2, r2, #5
   26c2c:	58d3      	ldr	r3, [r2, r3]
   26c2e:	4798      	blx	r3
   26c30:	0003      	movs	r3, r0
   26c32:	001a      	movs	r2, r3
   26c34:	e000      	b.n	26c38 <mem_test_unit_ready+0x28>
   26c36:	2201      	movs	r2, #1
  status =
   26c38:	230f      	movs	r3, #15
   26c3a:	18fb      	adds	r3, r7, r3
   26c3c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26c3e:	230f      	movs	r3, #15
   26c40:	18fb      	adds	r3, r7, r3
   26c42:	781b      	ldrb	r3, [r3, #0]
}
   26c44:	0018      	movs	r0, r3
   26c46:	46bd      	mov	sp, r7
   26c48:	b004      	add	sp, #16
   26c4a:	bd80      	pop	{r7, pc}
   26c4c:	0003a560 	.word	0x0003a560

00026c50 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26c50:	b580      	push	{r7, lr}
   26c52:	b084      	sub	sp, #16
   26c54:	af00      	add	r7, sp, #0
   26c56:	0002      	movs	r2, r0
   26c58:	6039      	str	r1, [r7, #0]
   26c5a:	1dfb      	adds	r3, r7, #7
   26c5c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26c5e:	1dfb      	adds	r3, r7, #7
   26c60:	781b      	ldrb	r3, [r3, #0]
   26c62:	2b00      	cmp	r3, #0
   26c64:	d10c      	bne.n	26c80 <mem_read_capacity+0x30>
   26c66:	1dfb      	adds	r3, r7, #7
   26c68:	781b      	ldrb	r3, [r3, #0]
   26c6a:	4a0b      	ldr	r2, [pc, #44]	; (26c98 <mem_read_capacity+0x48>)
   26c6c:	015b      	lsls	r3, r3, #5
   26c6e:	18d3      	adds	r3, r2, r3
   26c70:	3304      	adds	r3, #4
   26c72:	681b      	ldr	r3, [r3, #0]
   26c74:	683a      	ldr	r2, [r7, #0]
   26c76:	0010      	movs	r0, r2
   26c78:	4798      	blx	r3
   26c7a:	0003      	movs	r3, r0
   26c7c:	001a      	movs	r2, r3
   26c7e:	e000      	b.n	26c82 <mem_read_capacity+0x32>
   26c80:	2201      	movs	r2, #1
  status =
   26c82:	230f      	movs	r3, #15
   26c84:	18fb      	adds	r3, r7, r3
   26c86:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26c88:	230f      	movs	r3, #15
   26c8a:	18fb      	adds	r3, r7, r3
   26c8c:	781b      	ldrb	r3, [r3, #0]
}
   26c8e:	0018      	movs	r0, r3
   26c90:	46bd      	mov	sp, r7
   26c92:	b004      	add	sp, #16
   26c94:	bd80      	pop	{r7, pc}
   26c96:	46c0      	nop			; (mov r8, r8)
   26c98:	0003a560 	.word	0x0003a560

00026c9c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26c9c:	b580      	push	{r7, lr}
   26c9e:	b084      	sub	sp, #16
   26ca0:	af00      	add	r7, sp, #0
   26ca2:	0002      	movs	r2, r0
   26ca4:	1dfb      	adds	r3, r7, #7
   26ca6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26ca8:	1dfb      	adds	r3, r7, #7
   26caa:	781b      	ldrb	r3, [r3, #0]
   26cac:	425a      	negs	r2, r3
   26cae:	4153      	adcs	r3, r2
   26cb0:	b2da      	uxtb	r2, r3
  sector_size =
   26cb2:	230f      	movs	r3, #15
   26cb4:	18fb      	adds	r3, r7, r3
   26cb6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26cb8:	230f      	movs	r3, #15
   26cba:	18fb      	adds	r3, r7, r3
   26cbc:	781b      	ldrb	r3, [r3, #0]
}
   26cbe:	0018      	movs	r0, r3
   26cc0:	46bd      	mov	sp, r7
   26cc2:	b004      	add	sp, #16
   26cc4:	bd80      	pop	{r7, pc}
	...

00026cc8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26cc8:	b580      	push	{r7, lr}
   26cca:	b084      	sub	sp, #16
   26ccc:	af00      	add	r7, sp, #0
   26cce:	0002      	movs	r2, r0
   26cd0:	1dfb      	adds	r3, r7, #7
   26cd2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26cd4:	1dfb      	adds	r3, r7, #7
   26cd6:	781b      	ldrb	r3, [r3, #0]
   26cd8:	2b00      	cmp	r3, #0
   26cda:	d109      	bne.n	26cf0 <mem_wr_protect+0x28>
   26cdc:	1dfb      	adds	r3, r7, #7
   26cde:	781b      	ldrb	r3, [r3, #0]
   26ce0:	4a0a      	ldr	r2, [pc, #40]	; (26d0c <mem_wr_protect+0x44>)
   26ce2:	015b      	lsls	r3, r3, #5
   26ce4:	18d3      	adds	r3, r2, r3
   26ce6:	330c      	adds	r3, #12
   26ce8:	681b      	ldr	r3, [r3, #0]
   26cea:	4798      	blx	r3
   26cec:	1e03      	subs	r3, r0, #0
   26cee:	d001      	beq.n	26cf4 <mem_wr_protect+0x2c>
   26cf0:	2201      	movs	r2, #1
   26cf2:	e000      	b.n	26cf6 <mem_wr_protect+0x2e>
   26cf4:	2200      	movs	r2, #0
  wr_protect =
   26cf6:	230f      	movs	r3, #15
   26cf8:	18fb      	adds	r3, r7, r3
   26cfa:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26cfc:	230f      	movs	r3, #15
   26cfe:	18fb      	adds	r3, r7, r3
   26d00:	781b      	ldrb	r3, [r3, #0]
}
   26d02:	0018      	movs	r0, r3
   26d04:	46bd      	mov	sp, r7
   26d06:	b004      	add	sp, #16
   26d08:	bd80      	pop	{r7, pc}
   26d0a:	46c0      	nop			; (mov r8, r8)
   26d0c:	0003a560 	.word	0x0003a560

00026d10 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26d10:	b580      	push	{r7, lr}
   26d12:	b086      	sub	sp, #24
   26d14:	af00      	add	r7, sp, #0
   26d16:	60b9      	str	r1, [r7, #8]
   26d18:	607a      	str	r2, [r7, #4]
   26d1a:	230f      	movs	r3, #15
   26d1c:	18fb      	adds	r3, r7, r3
   26d1e:	1c02      	adds	r2, r0, #0
   26d20:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26d22:	230f      	movs	r3, #15
   26d24:	18fb      	adds	r3, r7, r3
   26d26:	781b      	ldrb	r3, [r3, #0]
   26d28:	2b00      	cmp	r3, #0
   26d2a:	d10e      	bne.n	26d4a <memory_2_ram+0x3a>
   26d2c:	230f      	movs	r3, #15
   26d2e:	18fb      	adds	r3, r7, r3
   26d30:	781b      	ldrb	r3, [r3, #0]
   26d32:	4a0b      	ldr	r2, [pc, #44]	; (26d60 <memory_2_ram+0x50>)
   26d34:	015b      	lsls	r3, r3, #5
   26d36:	18d3      	adds	r3, r2, r3
   26d38:	3314      	adds	r3, #20
   26d3a:	681b      	ldr	r3, [r3, #0]
   26d3c:	6879      	ldr	r1, [r7, #4]
   26d3e:	68ba      	ldr	r2, [r7, #8]
   26d40:	0010      	movs	r0, r2
   26d42:	4798      	blx	r3
   26d44:	0003      	movs	r3, r0
   26d46:	001a      	movs	r2, r3
   26d48:	e000      	b.n	26d4c <memory_2_ram+0x3c>
   26d4a:	2201      	movs	r2, #1
  status =
   26d4c:	2317      	movs	r3, #23
   26d4e:	18fb      	adds	r3, r7, r3
   26d50:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26d52:	2317      	movs	r3, #23
   26d54:	18fb      	adds	r3, r7, r3
   26d56:	781b      	ldrb	r3, [r3, #0]
}
   26d58:	0018      	movs	r0, r3
   26d5a:	46bd      	mov	sp, r7
   26d5c:	b006      	add	sp, #24
   26d5e:	bd80      	pop	{r7, pc}
   26d60:	0003a560 	.word	0x0003a560

00026d64 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26d64:	b580      	push	{r7, lr}
   26d66:	b086      	sub	sp, #24
   26d68:	af00      	add	r7, sp, #0
   26d6a:	60b9      	str	r1, [r7, #8]
   26d6c:	607a      	str	r2, [r7, #4]
   26d6e:	230f      	movs	r3, #15
   26d70:	18fb      	adds	r3, r7, r3
   26d72:	1c02      	adds	r2, r0, #0
   26d74:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26d76:	230f      	movs	r3, #15
   26d78:	18fb      	adds	r3, r7, r3
   26d7a:	781b      	ldrb	r3, [r3, #0]
   26d7c:	2b00      	cmp	r3, #0
   26d7e:	d10e      	bne.n	26d9e <ram_2_memory+0x3a>
   26d80:	230f      	movs	r3, #15
   26d82:	18fb      	adds	r3, r7, r3
   26d84:	781b      	ldrb	r3, [r3, #0]
   26d86:	4a0b      	ldr	r2, [pc, #44]	; (26db4 <ram_2_memory+0x50>)
   26d88:	015b      	lsls	r3, r3, #5
   26d8a:	18d3      	adds	r3, r2, r3
   26d8c:	3318      	adds	r3, #24
   26d8e:	681b      	ldr	r3, [r3, #0]
   26d90:	6879      	ldr	r1, [r7, #4]
   26d92:	68ba      	ldr	r2, [r7, #8]
   26d94:	0010      	movs	r0, r2
   26d96:	4798      	blx	r3
   26d98:	0003      	movs	r3, r0
   26d9a:	001a      	movs	r2, r3
   26d9c:	e000      	b.n	26da0 <ram_2_memory+0x3c>
   26d9e:	2201      	movs	r2, #1
  status =
   26da0:	2317      	movs	r3, #23
   26da2:	18fb      	adds	r3, r7, r3
   26da4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26da6:	2317      	movs	r3, #23
   26da8:	18fb      	adds	r3, r7, r3
   26daa:	781b      	ldrb	r3, [r3, #0]
}
   26dac:	0018      	movs	r0, r3
   26dae:	46bd      	mov	sp, r7
   26db0:	b006      	add	sp, #24
   26db2:	bd80      	pop	{r7, pc}
   26db4:	0003a560 	.word	0x0003a560

00026db8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26db8:	b580      	push	{r7, lr}
   26dba:	b082      	sub	sp, #8
   26dbc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26dbe:	4b10      	ldr	r3, [pc, #64]	; (26e00 <cpu_irq_enter_critical+0x48>)
   26dc0:	681b      	ldr	r3, [r3, #0]
   26dc2:	2b00      	cmp	r3, #0
   26dc4:	d112      	bne.n	26dec <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26dc6:	f3ef 8310 	mrs	r3, PRIMASK
   26dca:	607b      	str	r3, [r7, #4]
  return(result);
   26dcc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26dce:	2b00      	cmp	r3, #0
   26dd0:	d109      	bne.n	26de6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26dd2:	b672      	cpsid	i
   26dd4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26dd8:	4b0a      	ldr	r3, [pc, #40]	; (26e04 <cpu_irq_enter_critical+0x4c>)
   26dda:	2200      	movs	r2, #0
   26ddc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26dde:	4b0a      	ldr	r3, [pc, #40]	; (26e08 <cpu_irq_enter_critical+0x50>)
   26de0:	2201      	movs	r2, #1
   26de2:	701a      	strb	r2, [r3, #0]
   26de4:	e002      	b.n	26dec <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26de6:	4b08      	ldr	r3, [pc, #32]	; (26e08 <cpu_irq_enter_critical+0x50>)
   26de8:	2200      	movs	r2, #0
   26dea:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26dec:	4b04      	ldr	r3, [pc, #16]	; (26e00 <cpu_irq_enter_critical+0x48>)
   26dee:	681b      	ldr	r3, [r3, #0]
   26df0:	1c5a      	adds	r2, r3, #1
   26df2:	4b03      	ldr	r3, [pc, #12]	; (26e00 <cpu_irq_enter_critical+0x48>)
   26df4:	601a      	str	r2, [r3, #0]
}
   26df6:	46c0      	nop			; (mov r8, r8)
   26df8:	46bd      	mov	sp, r7
   26dfa:	b002      	add	sp, #8
   26dfc:	bd80      	pop	{r7, pc}
   26dfe:	46c0      	nop			; (mov r8, r8)
   26e00:	200042bc 	.word	0x200042bc
   26e04:	20000126 	.word	0x20000126
   26e08:	200042c0 	.word	0x200042c0

00026e0c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26e0c:	b580      	push	{r7, lr}
   26e0e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26e10:	4b0b      	ldr	r3, [pc, #44]	; (26e40 <cpu_irq_leave_critical+0x34>)
   26e12:	681b      	ldr	r3, [r3, #0]
   26e14:	1e5a      	subs	r2, r3, #1
   26e16:	4b0a      	ldr	r3, [pc, #40]	; (26e40 <cpu_irq_leave_critical+0x34>)
   26e18:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26e1a:	4b09      	ldr	r3, [pc, #36]	; (26e40 <cpu_irq_leave_critical+0x34>)
   26e1c:	681b      	ldr	r3, [r3, #0]
   26e1e:	2b00      	cmp	r3, #0
   26e20:	d10a      	bne.n	26e38 <cpu_irq_leave_critical+0x2c>
   26e22:	4b08      	ldr	r3, [pc, #32]	; (26e44 <cpu_irq_leave_critical+0x38>)
   26e24:	781b      	ldrb	r3, [r3, #0]
   26e26:	b2db      	uxtb	r3, r3
   26e28:	2b00      	cmp	r3, #0
   26e2a:	d005      	beq.n	26e38 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26e2c:	4b06      	ldr	r3, [pc, #24]	; (26e48 <cpu_irq_leave_critical+0x3c>)
   26e2e:	2201      	movs	r2, #1
   26e30:	701a      	strb	r2, [r3, #0]
   26e32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26e36:	b662      	cpsie	i
	}
}
   26e38:	46c0      	nop			; (mov r8, r8)
   26e3a:	46bd      	mov	sp, r7
   26e3c:	bd80      	pop	{r7, pc}
   26e3e:	46c0      	nop			; (mov r8, r8)
   26e40:	200042bc 	.word	0x200042bc
   26e44:	200042c0 	.word	0x200042c0
   26e48:	20000126 	.word	0x20000126

00026e4c <system_pinmux_get_group_from_gpio_pin>:
{
   26e4c:	b580      	push	{r7, lr}
   26e4e:	b084      	sub	sp, #16
   26e50:	af00      	add	r7, sp, #0
   26e52:	0002      	movs	r2, r0
   26e54:	1dfb      	adds	r3, r7, #7
   26e56:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26e58:	230f      	movs	r3, #15
   26e5a:	18fb      	adds	r3, r7, r3
   26e5c:	1dfa      	adds	r2, r7, #7
   26e5e:	7812      	ldrb	r2, [r2, #0]
   26e60:	09d2      	lsrs	r2, r2, #7
   26e62:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26e64:	230e      	movs	r3, #14
   26e66:	18fb      	adds	r3, r7, r3
   26e68:	1dfa      	adds	r2, r7, #7
   26e6a:	7812      	ldrb	r2, [r2, #0]
   26e6c:	0952      	lsrs	r2, r2, #5
   26e6e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26e70:	4b0d      	ldr	r3, [pc, #52]	; (26ea8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26e72:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26e74:	230f      	movs	r3, #15
   26e76:	18fb      	adds	r3, r7, r3
   26e78:	781b      	ldrb	r3, [r3, #0]
   26e7a:	2b00      	cmp	r3, #0
   26e7c:	d10f      	bne.n	26e9e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26e7e:	230f      	movs	r3, #15
   26e80:	18fb      	adds	r3, r7, r3
   26e82:	781b      	ldrb	r3, [r3, #0]
   26e84:	009b      	lsls	r3, r3, #2
   26e86:	2210      	movs	r2, #16
   26e88:	4694      	mov	ip, r2
   26e8a:	44bc      	add	ip, r7
   26e8c:	4463      	add	r3, ip
   26e8e:	3b08      	subs	r3, #8
   26e90:	681a      	ldr	r2, [r3, #0]
   26e92:	230e      	movs	r3, #14
   26e94:	18fb      	adds	r3, r7, r3
   26e96:	781b      	ldrb	r3, [r3, #0]
   26e98:	01db      	lsls	r3, r3, #7
   26e9a:	18d3      	adds	r3, r2, r3
   26e9c:	e000      	b.n	26ea0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26e9e:	2300      	movs	r3, #0
}
   26ea0:	0018      	movs	r0, r3
   26ea2:	46bd      	mov	sp, r7
   26ea4:	b004      	add	sp, #16
   26ea6:	bd80      	pop	{r7, pc}
   26ea8:	41004400 	.word	0x41004400

00026eac <port_get_group_from_gpio_pin>:
{
   26eac:	b580      	push	{r7, lr}
   26eae:	b082      	sub	sp, #8
   26eb0:	af00      	add	r7, sp, #0
   26eb2:	0002      	movs	r2, r0
   26eb4:	1dfb      	adds	r3, r7, #7
   26eb6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26eb8:	1dfb      	adds	r3, r7, #7
   26eba:	781b      	ldrb	r3, [r3, #0]
   26ebc:	0018      	movs	r0, r3
   26ebe:	4b03      	ldr	r3, [pc, #12]	; (26ecc <port_get_group_from_gpio_pin+0x20>)
   26ec0:	4798      	blx	r3
   26ec2:	0003      	movs	r3, r0
}
   26ec4:	0018      	movs	r0, r3
   26ec6:	46bd      	mov	sp, r7
   26ec8:	b002      	add	sp, #8
   26eca:	bd80      	pop	{r7, pc}
   26ecc:	00026e4d 	.word	0x00026e4d

00026ed0 <port_get_config_defaults>:
{
   26ed0:	b580      	push	{r7, lr}
   26ed2:	b082      	sub	sp, #8
   26ed4:	af00      	add	r7, sp, #0
   26ed6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26ed8:	687b      	ldr	r3, [r7, #4]
   26eda:	2200      	movs	r2, #0
   26edc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26ede:	687b      	ldr	r3, [r7, #4]
   26ee0:	2201      	movs	r2, #1
   26ee2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26ee4:	687b      	ldr	r3, [r7, #4]
   26ee6:	2200      	movs	r2, #0
   26ee8:	709a      	strb	r2, [r3, #2]
}
   26eea:	46c0      	nop			; (mov r8, r8)
   26eec:	46bd      	mov	sp, r7
   26eee:	b002      	add	sp, #8
   26ef0:	bd80      	pop	{r7, pc}
	...

00026ef4 <port_pin_set_output_level>:
{
   26ef4:	b580      	push	{r7, lr}
   26ef6:	b084      	sub	sp, #16
   26ef8:	af00      	add	r7, sp, #0
   26efa:	0002      	movs	r2, r0
   26efc:	1dfb      	adds	r3, r7, #7
   26efe:	701a      	strb	r2, [r3, #0]
   26f00:	1dbb      	adds	r3, r7, #6
   26f02:	1c0a      	adds	r2, r1, #0
   26f04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26f06:	1dfb      	adds	r3, r7, #7
   26f08:	781b      	ldrb	r3, [r3, #0]
   26f0a:	0018      	movs	r0, r3
   26f0c:	4b0d      	ldr	r3, [pc, #52]	; (26f44 <port_pin_set_output_level+0x50>)
   26f0e:	4798      	blx	r3
   26f10:	0003      	movs	r3, r0
   26f12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26f14:	1dfb      	adds	r3, r7, #7
   26f16:	781b      	ldrb	r3, [r3, #0]
   26f18:	221f      	movs	r2, #31
   26f1a:	4013      	ands	r3, r2
   26f1c:	2201      	movs	r2, #1
   26f1e:	409a      	lsls	r2, r3
   26f20:	0013      	movs	r3, r2
   26f22:	60bb      	str	r3, [r7, #8]
	if (level) {
   26f24:	1dbb      	adds	r3, r7, #6
   26f26:	781b      	ldrb	r3, [r3, #0]
   26f28:	2b00      	cmp	r3, #0
   26f2a:	d003      	beq.n	26f34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26f2c:	68fb      	ldr	r3, [r7, #12]
   26f2e:	68ba      	ldr	r2, [r7, #8]
   26f30:	619a      	str	r2, [r3, #24]
}
   26f32:	e002      	b.n	26f3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26f34:	68fb      	ldr	r3, [r7, #12]
   26f36:	68ba      	ldr	r2, [r7, #8]
   26f38:	615a      	str	r2, [r3, #20]
}
   26f3a:	46c0      	nop			; (mov r8, r8)
   26f3c:	46bd      	mov	sp, r7
   26f3e:	b004      	add	sp, #16
   26f40:	bd80      	pop	{r7, pc}
   26f42:	46c0      	nop			; (mov r8, r8)
   26f44:	00026ead 	.word	0x00026ead

00026f48 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26f48:	b580      	push	{r7, lr}
   26f4a:	b082      	sub	sp, #8
   26f4c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26f4e:	1d3b      	adds	r3, r7, #4
   26f50:	0018      	movs	r0, r3
   26f52:	4b0e      	ldr	r3, [pc, #56]	; (26f8c <system_board_init+0x44>)
   26f54:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26f56:	1d3b      	adds	r3, r7, #4
   26f58:	2201      	movs	r2, #1
   26f5a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26f5c:	1d3b      	adds	r3, r7, #4
   26f5e:	0019      	movs	r1, r3
   26f60:	2017      	movs	r0, #23
   26f62:	4b0b      	ldr	r3, [pc, #44]	; (26f90 <system_board_init+0x48>)
   26f64:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26f66:	2101      	movs	r1, #1
   26f68:	2017      	movs	r0, #23
   26f6a:	4b0a      	ldr	r3, [pc, #40]	; (26f94 <system_board_init+0x4c>)
   26f6c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26f6e:	1d3b      	adds	r3, r7, #4
   26f70:	2200      	movs	r2, #0
   26f72:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26f74:	1d3b      	adds	r3, r7, #4
   26f76:	2201      	movs	r2, #1
   26f78:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26f7a:	1d3b      	adds	r3, r7, #4
   26f7c:	0019      	movs	r1, r3
   26f7e:	2037      	movs	r0, #55	; 0x37
   26f80:	4b03      	ldr	r3, [pc, #12]	; (26f90 <system_board_init+0x48>)
   26f82:	4798      	blx	r3
}
   26f84:	46c0      	nop			; (mov r8, r8)
   26f86:	46bd      	mov	sp, r7
   26f88:	b002      	add	sp, #8
   26f8a:	bd80      	pop	{r7, pc}
   26f8c:	00026ed1 	.word	0x00026ed1
   26f90:	000275bd 	.word	0x000275bd
   26f94:	00026ef5 	.word	0x00026ef5

00026f98 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26f98:	b580      	push	{r7, lr}
   26f9a:	b084      	sub	sp, #16
   26f9c:	af00      	add	r7, sp, #0
   26f9e:	0002      	movs	r2, r0
   26fa0:	1dfb      	adds	r3, r7, #7
   26fa2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26fa4:	230f      	movs	r3, #15
   26fa6:	18fb      	adds	r3, r7, r3
   26fa8:	1dfa      	adds	r2, r7, #7
   26faa:	7812      	ldrb	r2, [r2, #0]
   26fac:	0952      	lsrs	r2, r2, #5
   26fae:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26fb0:	230f      	movs	r3, #15
   26fb2:	18fb      	adds	r3, r7, r3
   26fb4:	781b      	ldrb	r3, [r3, #0]
   26fb6:	2b00      	cmp	r3, #0
   26fb8:	d10c      	bne.n	26fd4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26fba:	4b09      	ldr	r3, [pc, #36]	; (26fe0 <_extint_get_eic_from_channel+0x48>)
   26fbc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26fbe:	230f      	movs	r3, #15
   26fc0:	18fb      	adds	r3, r7, r3
   26fc2:	781b      	ldrb	r3, [r3, #0]
   26fc4:	009b      	lsls	r3, r3, #2
   26fc6:	2210      	movs	r2, #16
   26fc8:	4694      	mov	ip, r2
   26fca:	44bc      	add	ip, r7
   26fcc:	4463      	add	r3, ip
   26fce:	3b08      	subs	r3, #8
   26fd0:	681b      	ldr	r3, [r3, #0]
   26fd2:	e000      	b.n	26fd6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26fd4:	2300      	movs	r3, #0
	}
}
   26fd6:	0018      	movs	r0, r3
   26fd8:	46bd      	mov	sp, r7
   26fda:	b004      	add	sp, #16
   26fdc:	bd80      	pop	{r7, pc}
   26fde:	46c0      	nop			; (mov r8, r8)
   26fe0:	40001800 	.word	0x40001800

00026fe4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26fe4:	b580      	push	{r7, lr}
   26fe6:	b084      	sub	sp, #16
   26fe8:	af00      	add	r7, sp, #0
   26fea:	0002      	movs	r2, r0
   26fec:	1dfb      	adds	r3, r7, #7
   26fee:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   26ff0:	1dfb      	adds	r3, r7, #7
   26ff2:	781b      	ldrb	r3, [r3, #0]
   26ff4:	0018      	movs	r0, r3
   26ff6:	4b0b      	ldr	r3, [pc, #44]	; (27024 <extint_chan_is_detected+0x40>)
   26ff8:	4798      	blx	r3
   26ffa:	0003      	movs	r3, r0
   26ffc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   26ffe:	1dfb      	adds	r3, r7, #7
   27000:	781b      	ldrb	r3, [r3, #0]
   27002:	221f      	movs	r2, #31
   27004:	4013      	ands	r3, r2
   27006:	2201      	movs	r2, #1
   27008:	409a      	lsls	r2, r3
   2700a:	0013      	movs	r3, r2
   2700c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2700e:	68fb      	ldr	r3, [r7, #12]
   27010:	691b      	ldr	r3, [r3, #16]
   27012:	68ba      	ldr	r2, [r7, #8]
   27014:	4013      	ands	r3, r2
   27016:	1e5a      	subs	r2, r3, #1
   27018:	4193      	sbcs	r3, r2
   2701a:	b2db      	uxtb	r3, r3
}
   2701c:	0018      	movs	r0, r3
   2701e:	46bd      	mov	sp, r7
   27020:	b004      	add	sp, #16
   27022:	bd80      	pop	{r7, pc}
   27024:	00026f99 	.word	0x00026f99

00027028 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   27028:	b580      	push	{r7, lr}
   2702a:	b084      	sub	sp, #16
   2702c:	af00      	add	r7, sp, #0
   2702e:	0002      	movs	r2, r0
   27030:	1dfb      	adds	r3, r7, #7
   27032:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   27034:	1dfb      	adds	r3, r7, #7
   27036:	781b      	ldrb	r3, [r3, #0]
   27038:	0018      	movs	r0, r3
   2703a:	4b09      	ldr	r3, [pc, #36]	; (27060 <extint_chan_clear_detected+0x38>)
   2703c:	4798      	blx	r3
   2703e:	0003      	movs	r3, r0
   27040:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   27042:	1dfb      	adds	r3, r7, #7
   27044:	781b      	ldrb	r3, [r3, #0]
   27046:	221f      	movs	r2, #31
   27048:	4013      	ands	r3, r2
   2704a:	2201      	movs	r2, #1
   2704c:	409a      	lsls	r2, r3
   2704e:	0013      	movs	r3, r2
   27050:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   27052:	68fb      	ldr	r3, [r7, #12]
   27054:	68ba      	ldr	r2, [r7, #8]
   27056:	611a      	str	r2, [r3, #16]
}
   27058:	46c0      	nop			; (mov r8, r8)
   2705a:	46bd      	mov	sp, r7
   2705c:	b004      	add	sp, #16
   2705e:	bd80      	pop	{r7, pc}
   27060:	00026f99 	.word	0x00026f99

00027064 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27064:	b580      	push	{r7, lr}
   27066:	b082      	sub	sp, #8
   27068:	af00      	add	r7, sp, #0
   2706a:	6078      	str	r0, [r7, #4]
   2706c:	0008      	movs	r0, r1
   2706e:	0011      	movs	r1, r2
   27070:	1cfb      	adds	r3, r7, #3
   27072:	1c02      	adds	r2, r0, #0
   27074:	701a      	strb	r2, [r3, #0]
   27076:	1cbb      	adds	r3, r7, #2
   27078:	1c0a      	adds	r2, r1, #0
   2707a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2707c:	1cbb      	adds	r3, r7, #2
   2707e:	781b      	ldrb	r3, [r3, #0]
   27080:	2b00      	cmp	r3, #0
   27082:	d001      	beq.n	27088 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   27084:	2317      	movs	r3, #23
   27086:	e019      	b.n	270bc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   27088:	1cfb      	adds	r3, r7, #3
   2708a:	781a      	ldrb	r2, [r3, #0]
   2708c:	4b0d      	ldr	r3, [pc, #52]	; (270c4 <extint_register_callback+0x60>)
   2708e:	0092      	lsls	r2, r2, #2
   27090:	58d3      	ldr	r3, [r2, r3]
   27092:	2b00      	cmp	r3, #0
   27094:	d107      	bne.n	270a6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   27096:	1cfb      	adds	r3, r7, #3
   27098:	781a      	ldrb	r2, [r3, #0]
   2709a:	4b0a      	ldr	r3, [pc, #40]	; (270c4 <extint_register_callback+0x60>)
   2709c:	0092      	lsls	r2, r2, #2
   2709e:	6879      	ldr	r1, [r7, #4]
   270a0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   270a2:	2300      	movs	r3, #0
   270a4:	e00a      	b.n	270bc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   270a6:	1cfb      	adds	r3, r7, #3
   270a8:	781a      	ldrb	r2, [r3, #0]
   270aa:	4b06      	ldr	r3, [pc, #24]	; (270c4 <extint_register_callback+0x60>)
   270ac:	0092      	lsls	r2, r2, #2
   270ae:	58d2      	ldr	r2, [r2, r3]
   270b0:	687b      	ldr	r3, [r7, #4]
   270b2:	429a      	cmp	r2, r3
   270b4:	d101      	bne.n	270ba <extint_register_callback+0x56>
		return STATUS_OK;
   270b6:	2300      	movs	r3, #0
   270b8:	e000      	b.n	270bc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   270ba:	231d      	movs	r3, #29
}
   270bc:	0018      	movs	r0, r3
   270be:	46bd      	mov	sp, r7
   270c0:	b002      	add	sp, #8
   270c2:	bd80      	pop	{r7, pc}
   270c4:	20005c58 	.word	0x20005c58

000270c8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   270c8:	b580      	push	{r7, lr}
   270ca:	b084      	sub	sp, #16
   270cc:	af00      	add	r7, sp, #0
   270ce:	0002      	movs	r2, r0
   270d0:	1dfb      	adds	r3, r7, #7
   270d2:	701a      	strb	r2, [r3, #0]
   270d4:	1dbb      	adds	r3, r7, #6
   270d6:	1c0a      	adds	r2, r1, #0
   270d8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   270da:	1dbb      	adds	r3, r7, #6
   270dc:	781b      	ldrb	r3, [r3, #0]
   270de:	2b00      	cmp	r3, #0
   270e0:	d10e      	bne.n	27100 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   270e2:	1dfb      	adds	r3, r7, #7
   270e4:	781b      	ldrb	r3, [r3, #0]
   270e6:	0018      	movs	r0, r3
   270e8:	4b08      	ldr	r3, [pc, #32]	; (2710c <extint_chan_enable_callback+0x44>)
   270ea:	4798      	blx	r3
   270ec:	0003      	movs	r3, r0
   270ee:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   270f0:	1dfb      	adds	r3, r7, #7
   270f2:	781b      	ldrb	r3, [r3, #0]
   270f4:	2201      	movs	r2, #1
   270f6:	409a      	lsls	r2, r3
   270f8:	68fb      	ldr	r3, [r7, #12]
   270fa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   270fc:	2300      	movs	r3, #0
   270fe:	e000      	b.n	27102 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27100:	2317      	movs	r3, #23
}
   27102:	0018      	movs	r0, r3
   27104:	46bd      	mov	sp, r7
   27106:	b004      	add	sp, #16
   27108:	bd80      	pop	{r7, pc}
   2710a:	46c0      	nop			; (mov r8, r8)
   2710c:	00026f99 	.word	0x00026f99

00027110 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27110:	b580      	push	{r7, lr}
   27112:	b084      	sub	sp, #16
   27114:	af00      	add	r7, sp, #0
   27116:	0002      	movs	r2, r0
   27118:	1dfb      	adds	r3, r7, #7
   2711a:	701a      	strb	r2, [r3, #0]
   2711c:	1dbb      	adds	r3, r7, #6
   2711e:	1c0a      	adds	r2, r1, #0
   27120:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   27122:	1dbb      	adds	r3, r7, #6
   27124:	781b      	ldrb	r3, [r3, #0]
   27126:	2b00      	cmp	r3, #0
   27128:	d10e      	bne.n	27148 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2712a:	1dfb      	adds	r3, r7, #7
   2712c:	781b      	ldrb	r3, [r3, #0]
   2712e:	0018      	movs	r0, r3
   27130:	4b08      	ldr	r3, [pc, #32]	; (27154 <extint_chan_disable_callback+0x44>)
   27132:	4798      	blx	r3
   27134:	0003      	movs	r3, r0
   27136:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   27138:	1dfb      	adds	r3, r7, #7
   2713a:	781b      	ldrb	r3, [r3, #0]
   2713c:	2201      	movs	r2, #1
   2713e:	409a      	lsls	r2, r3
   27140:	68fb      	ldr	r3, [r7, #12]
   27142:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27144:	2300      	movs	r3, #0
   27146:	e000      	b.n	2714a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27148:	2317      	movs	r3, #23
}
   2714a:	0018      	movs	r0, r3
   2714c:	46bd      	mov	sp, r7
   2714e:	b004      	add	sp, #16
   27150:	bd80      	pop	{r7, pc}
   27152:	46c0      	nop			; (mov r8, r8)
   27154:	00026f99 	.word	0x00026f99

00027158 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   27158:	b580      	push	{r7, lr}
   2715a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2715c:	4b15      	ldr	r3, [pc, #84]	; (271b4 <EIC_Handler+0x5c>)
   2715e:	2200      	movs	r2, #0
   27160:	701a      	strb	r2, [r3, #0]
   27162:	e020      	b.n	271a6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   27164:	4b13      	ldr	r3, [pc, #76]	; (271b4 <EIC_Handler+0x5c>)
   27166:	781b      	ldrb	r3, [r3, #0]
   27168:	0018      	movs	r0, r3
   2716a:	4b13      	ldr	r3, [pc, #76]	; (271b8 <EIC_Handler+0x60>)
   2716c:	4798      	blx	r3
   2716e:	1e03      	subs	r3, r0, #0
   27170:	d013      	beq.n	2719a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   27172:	4b10      	ldr	r3, [pc, #64]	; (271b4 <EIC_Handler+0x5c>)
   27174:	781b      	ldrb	r3, [r3, #0]
   27176:	0018      	movs	r0, r3
   27178:	4b10      	ldr	r3, [pc, #64]	; (271bc <EIC_Handler+0x64>)
   2717a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2717c:	4b0d      	ldr	r3, [pc, #52]	; (271b4 <EIC_Handler+0x5c>)
   2717e:	781b      	ldrb	r3, [r3, #0]
   27180:	001a      	movs	r2, r3
   27182:	4b0f      	ldr	r3, [pc, #60]	; (271c0 <EIC_Handler+0x68>)
   27184:	0092      	lsls	r2, r2, #2
   27186:	58d3      	ldr	r3, [r2, r3]
   27188:	2b00      	cmp	r3, #0
   2718a:	d006      	beq.n	2719a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2718c:	4b09      	ldr	r3, [pc, #36]	; (271b4 <EIC_Handler+0x5c>)
   2718e:	781b      	ldrb	r3, [r3, #0]
   27190:	001a      	movs	r2, r3
   27192:	4b0b      	ldr	r3, [pc, #44]	; (271c0 <EIC_Handler+0x68>)
   27194:	0092      	lsls	r2, r2, #2
   27196:	58d3      	ldr	r3, [r2, r3]
   27198:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2719a:	4b06      	ldr	r3, [pc, #24]	; (271b4 <EIC_Handler+0x5c>)
   2719c:	781b      	ldrb	r3, [r3, #0]
   2719e:	3301      	adds	r3, #1
   271a0:	b2da      	uxtb	r2, r3
   271a2:	4b04      	ldr	r3, [pc, #16]	; (271b4 <EIC_Handler+0x5c>)
   271a4:	701a      	strb	r2, [r3, #0]
   271a6:	4b03      	ldr	r3, [pc, #12]	; (271b4 <EIC_Handler+0x5c>)
   271a8:	781b      	ldrb	r3, [r3, #0]
   271aa:	2b0f      	cmp	r3, #15
   271ac:	d9da      	bls.n	27164 <EIC_Handler+0xc>
			}
		}
	}
}
   271ae:	46c0      	nop			; (mov r8, r8)
   271b0:	46bd      	mov	sp, r7
   271b2:	bd80      	pop	{r7, pc}
   271b4:	20005c54 	.word	0x20005c54
   271b8:	00026fe5 	.word	0x00026fe5
   271bc:	00027029 	.word	0x00027029
   271c0:	20005c58 	.word	0x20005c58

000271c4 <system_gclk_chan_get_config_defaults>:
{
   271c4:	b580      	push	{r7, lr}
   271c6:	b082      	sub	sp, #8
   271c8:	af00      	add	r7, sp, #0
   271ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   271cc:	687b      	ldr	r3, [r7, #4]
   271ce:	2200      	movs	r2, #0
   271d0:	701a      	strb	r2, [r3, #0]
}
   271d2:	46c0      	nop			; (mov r8, r8)
   271d4:	46bd      	mov	sp, r7
   271d6:	b002      	add	sp, #8
   271d8:	bd80      	pop	{r7, pc}
	...

000271dc <system_apb_clock_set_mask>:
{
   271dc:	b580      	push	{r7, lr}
   271de:	b082      	sub	sp, #8
   271e0:	af00      	add	r7, sp, #0
   271e2:	0002      	movs	r2, r0
   271e4:	6039      	str	r1, [r7, #0]
   271e6:	1dfb      	adds	r3, r7, #7
   271e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   271ea:	1dfb      	adds	r3, r7, #7
   271ec:	781b      	ldrb	r3, [r3, #0]
   271ee:	2b01      	cmp	r3, #1
   271f0:	d00a      	beq.n	27208 <system_apb_clock_set_mask+0x2c>
   271f2:	2b02      	cmp	r3, #2
   271f4:	d00f      	beq.n	27216 <system_apb_clock_set_mask+0x3a>
   271f6:	2b00      	cmp	r3, #0
   271f8:	d114      	bne.n	27224 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   271fa:	4b0e      	ldr	r3, [pc, #56]	; (27234 <system_apb_clock_set_mask+0x58>)
   271fc:	4a0d      	ldr	r2, [pc, #52]	; (27234 <system_apb_clock_set_mask+0x58>)
   271fe:	6991      	ldr	r1, [r2, #24]
   27200:	683a      	ldr	r2, [r7, #0]
   27202:	430a      	orrs	r2, r1
   27204:	619a      	str	r2, [r3, #24]
			break;
   27206:	e00f      	b.n	27228 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27208:	4b0a      	ldr	r3, [pc, #40]	; (27234 <system_apb_clock_set_mask+0x58>)
   2720a:	4a0a      	ldr	r2, [pc, #40]	; (27234 <system_apb_clock_set_mask+0x58>)
   2720c:	69d1      	ldr	r1, [r2, #28]
   2720e:	683a      	ldr	r2, [r7, #0]
   27210:	430a      	orrs	r2, r1
   27212:	61da      	str	r2, [r3, #28]
			break;
   27214:	e008      	b.n	27228 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27216:	4b07      	ldr	r3, [pc, #28]	; (27234 <system_apb_clock_set_mask+0x58>)
   27218:	4a06      	ldr	r2, [pc, #24]	; (27234 <system_apb_clock_set_mask+0x58>)
   2721a:	6a11      	ldr	r1, [r2, #32]
   2721c:	683a      	ldr	r2, [r7, #0]
   2721e:	430a      	orrs	r2, r1
   27220:	621a      	str	r2, [r3, #32]
			break;
   27222:	e001      	b.n	27228 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27224:	2317      	movs	r3, #23
   27226:	e000      	b.n	2722a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27228:	2300      	movs	r3, #0
}
   2722a:	0018      	movs	r0, r3
   2722c:	46bd      	mov	sp, r7
   2722e:	b002      	add	sp, #8
   27230:	bd80      	pop	{r7, pc}
   27232:	46c0      	nop			; (mov r8, r8)
   27234:	40000400 	.word	0x40000400

00027238 <system_pinmux_get_config_defaults>:
{
   27238:	b580      	push	{r7, lr}
   2723a:	b082      	sub	sp, #8
   2723c:	af00      	add	r7, sp, #0
   2723e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27240:	687b      	ldr	r3, [r7, #4]
   27242:	2280      	movs	r2, #128	; 0x80
   27244:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27246:	687b      	ldr	r3, [r7, #4]
   27248:	2200      	movs	r2, #0
   2724a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2724c:	687b      	ldr	r3, [r7, #4]
   2724e:	2201      	movs	r2, #1
   27250:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27252:	687b      	ldr	r3, [r7, #4]
   27254:	2200      	movs	r2, #0
   27256:	70da      	strb	r2, [r3, #3]
}
   27258:	46c0      	nop			; (mov r8, r8)
   2725a:	46bd      	mov	sp, r7
   2725c:	b002      	add	sp, #8
   2725e:	bd80      	pop	{r7, pc}

00027260 <system_interrupt_enable>:
{
   27260:	b580      	push	{r7, lr}
   27262:	b082      	sub	sp, #8
   27264:	af00      	add	r7, sp, #0
   27266:	0002      	movs	r2, r0
   27268:	1dfb      	adds	r3, r7, #7
   2726a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2726c:	4b06      	ldr	r3, [pc, #24]	; (27288 <system_interrupt_enable+0x28>)
   2726e:	1dfa      	adds	r2, r7, #7
   27270:	7812      	ldrb	r2, [r2, #0]
   27272:	0011      	movs	r1, r2
   27274:	221f      	movs	r2, #31
   27276:	400a      	ands	r2, r1
   27278:	2101      	movs	r1, #1
   2727a:	4091      	lsls	r1, r2
   2727c:	000a      	movs	r2, r1
   2727e:	601a      	str	r2, [r3, #0]
}
   27280:	46c0      	nop			; (mov r8, r8)
   27282:	46bd      	mov	sp, r7
   27284:	b002      	add	sp, #8
   27286:	bd80      	pop	{r7, pc}
   27288:	e000e100 	.word	0xe000e100

0002728c <_extint_get_eic_from_channel>:
{
   2728c:	b580      	push	{r7, lr}
   2728e:	b084      	sub	sp, #16
   27290:	af00      	add	r7, sp, #0
   27292:	0002      	movs	r2, r0
   27294:	1dfb      	adds	r3, r7, #7
   27296:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27298:	230f      	movs	r3, #15
   2729a:	18fb      	adds	r3, r7, r3
   2729c:	1dfa      	adds	r2, r7, #7
   2729e:	7812      	ldrb	r2, [r2, #0]
   272a0:	0952      	lsrs	r2, r2, #5
   272a2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   272a4:	230f      	movs	r3, #15
   272a6:	18fb      	adds	r3, r7, r3
   272a8:	781b      	ldrb	r3, [r3, #0]
   272aa:	2b00      	cmp	r3, #0
   272ac:	d10c      	bne.n	272c8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   272ae:	4b09      	ldr	r3, [pc, #36]	; (272d4 <_extint_get_eic_from_channel+0x48>)
   272b0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   272b2:	230f      	movs	r3, #15
   272b4:	18fb      	adds	r3, r7, r3
   272b6:	781b      	ldrb	r3, [r3, #0]
   272b8:	009b      	lsls	r3, r3, #2
   272ba:	2210      	movs	r2, #16
   272bc:	4694      	mov	ip, r2
   272be:	44bc      	add	ip, r7
   272c0:	4463      	add	r3, ip
   272c2:	3b08      	subs	r3, #8
   272c4:	681b      	ldr	r3, [r3, #0]
   272c6:	e000      	b.n	272ca <_extint_get_eic_from_channel+0x3e>
		return NULL;
   272c8:	2300      	movs	r3, #0
}
   272ca:	0018      	movs	r0, r3
   272cc:	46bd      	mov	sp, r7
   272ce:	b004      	add	sp, #16
   272d0:	bd80      	pop	{r7, pc}
   272d2:	46c0      	nop			; (mov r8, r8)
   272d4:	40001800 	.word	0x40001800

000272d8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   272d8:	b580      	push	{r7, lr}
   272da:	b082      	sub	sp, #8
   272dc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   272de:	4b0f      	ldr	r3, [pc, #60]	; (2731c <extint_is_syncing+0x44>)
   272e0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   272e2:	2300      	movs	r3, #0
   272e4:	607b      	str	r3, [r7, #4]
   272e6:	e011      	b.n	2730c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   272e8:	687b      	ldr	r3, [r7, #4]
   272ea:	009b      	lsls	r3, r3, #2
   272ec:	2208      	movs	r2, #8
   272ee:	4694      	mov	ip, r2
   272f0:	44bc      	add	ip, r7
   272f2:	4463      	add	r3, ip
   272f4:	3b08      	subs	r3, #8
   272f6:	681b      	ldr	r3, [r3, #0]
   272f8:	785b      	ldrb	r3, [r3, #1]
   272fa:	b2db      	uxtb	r3, r3
   272fc:	b25b      	sxtb	r3, r3
   272fe:	2b00      	cmp	r3, #0
   27300:	da01      	bge.n	27306 <extint_is_syncing+0x2e>
			return true;
   27302:	2301      	movs	r3, #1
   27304:	e006      	b.n	27314 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27306:	687b      	ldr	r3, [r7, #4]
   27308:	3301      	adds	r3, #1
   2730a:	607b      	str	r3, [r7, #4]
   2730c:	687b      	ldr	r3, [r7, #4]
   2730e:	2b00      	cmp	r3, #0
   27310:	d0ea      	beq.n	272e8 <extint_is_syncing+0x10>
		}
	}
	return false;
   27312:	2300      	movs	r3, #0
}
   27314:	0018      	movs	r0, r3
   27316:	46bd      	mov	sp, r7
   27318:	b002      	add	sp, #8
   2731a:	bd80      	pop	{r7, pc}
   2731c:	40001800 	.word	0x40001800

00027320 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   27320:	b580      	push	{r7, lr}
   27322:	b084      	sub	sp, #16
   27324:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27326:	4b2d      	ldr	r3, [pc, #180]	; (273dc <_system_extint_init+0xbc>)
   27328:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2732a:	2140      	movs	r1, #64	; 0x40
   2732c:	2000      	movs	r0, #0
   2732e:	4b2c      	ldr	r3, [pc, #176]	; (273e0 <_system_extint_init+0xc0>)
   27330:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27332:	003b      	movs	r3, r7
   27334:	0018      	movs	r0, r3
   27336:	4b2b      	ldr	r3, [pc, #172]	; (273e4 <_system_extint_init+0xc4>)
   27338:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2733a:	003b      	movs	r3, r7
   2733c:	2200      	movs	r2, #0
   2733e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   27340:	003b      	movs	r3, r7
   27342:	0019      	movs	r1, r3
   27344:	2005      	movs	r0, #5
   27346:	4b28      	ldr	r3, [pc, #160]	; (273e8 <_system_extint_init+0xc8>)
   27348:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2734a:	2005      	movs	r0, #5
   2734c:	4b27      	ldr	r3, [pc, #156]	; (273ec <_system_extint_init+0xcc>)
   2734e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27350:	2300      	movs	r3, #0
   27352:	60fb      	str	r3, [r7, #12]
   27354:	e018      	b.n	27388 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   27356:	68fb      	ldr	r3, [r7, #12]
   27358:	009b      	lsls	r3, r3, #2
   2735a:	2210      	movs	r2, #16
   2735c:	4694      	mov	ip, r2
   2735e:	44bc      	add	ip, r7
   27360:	4463      	add	r3, ip
   27362:	3b0c      	subs	r3, #12
   27364:	681a      	ldr	r2, [r3, #0]
   27366:	68fb      	ldr	r3, [r7, #12]
   27368:	009b      	lsls	r3, r3, #2
   2736a:	2110      	movs	r1, #16
   2736c:	468c      	mov	ip, r1
   2736e:	44bc      	add	ip, r7
   27370:	4463      	add	r3, ip
   27372:	3b0c      	subs	r3, #12
   27374:	681b      	ldr	r3, [r3, #0]
   27376:	781b      	ldrb	r3, [r3, #0]
   27378:	b2db      	uxtb	r3, r3
   2737a:	2101      	movs	r1, #1
   2737c:	430b      	orrs	r3, r1
   2737e:	b2db      	uxtb	r3, r3
   27380:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27382:	68fb      	ldr	r3, [r7, #12]
   27384:	3301      	adds	r3, #1
   27386:	60fb      	str	r3, [r7, #12]
   27388:	68fb      	ldr	r3, [r7, #12]
   2738a:	2b00      	cmp	r3, #0
   2738c:	d0e3      	beq.n	27356 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2738e:	46c0      	nop			; (mov r8, r8)
   27390:	4b17      	ldr	r3, [pc, #92]	; (273f0 <_system_extint_init+0xd0>)
   27392:	4798      	blx	r3
   27394:	1e03      	subs	r3, r0, #0
   27396:	d1fb      	bne.n	27390 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27398:	230b      	movs	r3, #11
   2739a:	18fb      	adds	r3, r7, r3
   2739c:	2200      	movs	r2, #0
   2739e:	701a      	strb	r2, [r3, #0]
   273a0:	e00d      	b.n	273be <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   273a2:	230b      	movs	r3, #11
   273a4:	18fb      	adds	r3, r7, r3
   273a6:	781a      	ldrb	r2, [r3, #0]
   273a8:	4b12      	ldr	r3, [pc, #72]	; (273f4 <_system_extint_init+0xd4>)
   273aa:	0092      	lsls	r2, r2, #2
   273ac:	2100      	movs	r1, #0
   273ae:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   273b0:	230b      	movs	r3, #11
   273b2:	18fb      	adds	r3, r7, r3
   273b4:	781a      	ldrb	r2, [r3, #0]
   273b6:	230b      	movs	r3, #11
   273b8:	18fb      	adds	r3, r7, r3
   273ba:	3201      	adds	r2, #1
   273bc:	701a      	strb	r2, [r3, #0]
   273be:	230b      	movs	r3, #11
   273c0:	18fb      	adds	r3, r7, r3
   273c2:	781b      	ldrb	r3, [r3, #0]
   273c4:	2b0f      	cmp	r3, #15
   273c6:	d9ec      	bls.n	273a2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   273c8:	2004      	movs	r0, #4
   273ca:	4b0b      	ldr	r3, [pc, #44]	; (273f8 <_system_extint_init+0xd8>)
   273cc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   273ce:	4b0b      	ldr	r3, [pc, #44]	; (273fc <_system_extint_init+0xdc>)
   273d0:	4798      	blx	r3
}
   273d2:	46c0      	nop			; (mov r8, r8)
   273d4:	46bd      	mov	sp, r7
   273d6:	b004      	add	sp, #16
   273d8:	bd80      	pop	{r7, pc}
   273da:	46c0      	nop			; (mov r8, r8)
   273dc:	40001800 	.word	0x40001800
   273e0:	000271dd 	.word	0x000271dd
   273e4:	000271c5 	.word	0x000271c5
   273e8:	0002aa4d 	.word	0x0002aa4d
   273ec:	0002aa91 	.word	0x0002aa91
   273f0:	000272d9 	.word	0x000272d9
   273f4:	20005c58 	.word	0x20005c58
   273f8:	00027261 	.word	0x00027261
   273fc:	00027401 	.word	0x00027401

00027400 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   27400:	b580      	push	{r7, lr}
   27402:	b082      	sub	sp, #8
   27404:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27406:	4b15      	ldr	r3, [pc, #84]	; (2745c <_extint_enable+0x5c>)
   27408:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2740a:	2300      	movs	r3, #0
   2740c:	607b      	str	r3, [r7, #4]
   2740e:	e018      	b.n	27442 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   27410:	687b      	ldr	r3, [r7, #4]
   27412:	009b      	lsls	r3, r3, #2
   27414:	2208      	movs	r2, #8
   27416:	4694      	mov	ip, r2
   27418:	44bc      	add	ip, r7
   2741a:	4463      	add	r3, ip
   2741c:	3b08      	subs	r3, #8
   2741e:	681a      	ldr	r2, [r3, #0]
   27420:	687b      	ldr	r3, [r7, #4]
   27422:	009b      	lsls	r3, r3, #2
   27424:	2108      	movs	r1, #8
   27426:	468c      	mov	ip, r1
   27428:	44bc      	add	ip, r7
   2742a:	4463      	add	r3, ip
   2742c:	3b08      	subs	r3, #8
   2742e:	681b      	ldr	r3, [r3, #0]
   27430:	781b      	ldrb	r3, [r3, #0]
   27432:	b2db      	uxtb	r3, r3
   27434:	2102      	movs	r1, #2
   27436:	430b      	orrs	r3, r1
   27438:	b2db      	uxtb	r3, r3
   2743a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2743c:	687b      	ldr	r3, [r7, #4]
   2743e:	3301      	adds	r3, #1
   27440:	607b      	str	r3, [r7, #4]
   27442:	687b      	ldr	r3, [r7, #4]
   27444:	2b00      	cmp	r3, #0
   27446:	d0e3      	beq.n	27410 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   27448:	46c0      	nop			; (mov r8, r8)
   2744a:	4b05      	ldr	r3, [pc, #20]	; (27460 <_extint_enable+0x60>)
   2744c:	4798      	blx	r3
   2744e:	1e03      	subs	r3, r0, #0
   27450:	d1fb      	bne.n	2744a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   27452:	46c0      	nop			; (mov r8, r8)
   27454:	46bd      	mov	sp, r7
   27456:	b002      	add	sp, #8
   27458:	bd80      	pop	{r7, pc}
   2745a:	46c0      	nop			; (mov r8, r8)
   2745c:	40001800 	.word	0x40001800
   27460:	000272d9 	.word	0x000272d9

00027464 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   27464:	b580      	push	{r7, lr}
   27466:	b082      	sub	sp, #8
   27468:	af00      	add	r7, sp, #0
   2746a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2746c:	687b      	ldr	r3, [r7, #4]
   2746e:	2200      	movs	r2, #0
   27470:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   27472:	687b      	ldr	r3, [r7, #4]
   27474:	2200      	movs	r2, #0
   27476:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   27478:	687b      	ldr	r3, [r7, #4]
   2747a:	2201      	movs	r2, #1
   2747c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2747e:	687b      	ldr	r3, [r7, #4]
   27480:	2201      	movs	r2, #1
   27482:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   27484:	687b      	ldr	r3, [r7, #4]
   27486:	2200      	movs	r2, #0
   27488:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2748a:	687b      	ldr	r3, [r7, #4]
   2748c:	2202      	movs	r2, #2
   2748e:	72da      	strb	r2, [r3, #11]
}
   27490:	46c0      	nop			; (mov r8, r8)
   27492:	46bd      	mov	sp, r7
   27494:	b002      	add	sp, #8
   27496:	bd80      	pop	{r7, pc}

00027498 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   27498:	b580      	push	{r7, lr}
   2749a:	b086      	sub	sp, #24
   2749c:	af00      	add	r7, sp, #0
   2749e:	0002      	movs	r2, r0
   274a0:	6039      	str	r1, [r7, #0]
   274a2:	1dfb      	adds	r3, r7, #7
   274a4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   274a6:	2308      	movs	r3, #8
   274a8:	18fb      	adds	r3, r7, r3
   274aa:	0018      	movs	r0, r3
   274ac:	4b36      	ldr	r3, [pc, #216]	; (27588 <extint_chan_set_config+0xf0>)
   274ae:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   274b0:	683b      	ldr	r3, [r7, #0]
   274b2:	685b      	ldr	r3, [r3, #4]
   274b4:	b2da      	uxtb	r2, r3
   274b6:	2308      	movs	r3, #8
   274b8:	18fb      	adds	r3, r7, r3
   274ba:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   274bc:	2308      	movs	r3, #8
   274be:	18fb      	adds	r3, r7, r3
   274c0:	2200      	movs	r2, #0
   274c2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   274c4:	683b      	ldr	r3, [r7, #0]
   274c6:	7a1a      	ldrb	r2, [r3, #8]
   274c8:	2308      	movs	r3, #8
   274ca:	18fb      	adds	r3, r7, r3
   274cc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   274ce:	683b      	ldr	r3, [r7, #0]
   274d0:	681b      	ldr	r3, [r3, #0]
   274d2:	b2db      	uxtb	r3, r3
   274d4:	2208      	movs	r2, #8
   274d6:	18ba      	adds	r2, r7, r2
   274d8:	0011      	movs	r1, r2
   274da:	0018      	movs	r0, r3
   274dc:	4b2b      	ldr	r3, [pc, #172]	; (2758c <extint_chan_set_config+0xf4>)
   274de:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   274e0:	1dfb      	adds	r3, r7, #7
   274e2:	781b      	ldrb	r3, [r3, #0]
   274e4:	0018      	movs	r0, r3
   274e6:	4b2a      	ldr	r3, [pc, #168]	; (27590 <extint_chan_set_config+0xf8>)
   274e8:	4798      	blx	r3
   274ea:	0003      	movs	r3, r0
   274ec:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   274ee:	1dfb      	adds	r3, r7, #7
   274f0:	781b      	ldrb	r3, [r3, #0]
   274f2:	2207      	movs	r2, #7
   274f4:	4013      	ands	r3, r2
   274f6:	009b      	lsls	r3, r3, #2
   274f8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   274fa:	683b      	ldr	r3, [r7, #0]
   274fc:	7adb      	ldrb	r3, [r3, #11]
   274fe:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   27500:	683b      	ldr	r3, [r7, #0]
   27502:	7a9b      	ldrb	r3, [r3, #10]
   27504:	2b00      	cmp	r3, #0
   27506:	d003      	beq.n	27510 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   27508:	697b      	ldr	r3, [r7, #20]
   2750a:	2208      	movs	r2, #8
   2750c:	4313      	orrs	r3, r2
   2750e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   27510:	1dfb      	adds	r3, r7, #7
   27512:	781b      	ldrb	r3, [r3, #0]
   27514:	08db      	lsrs	r3, r3, #3
   27516:	b2db      	uxtb	r3, r3
   27518:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2751a:	1dfb      	adds	r3, r7, #7
   2751c:	781b      	ldrb	r3, [r3, #0]
   2751e:	08db      	lsrs	r3, r3, #3
   27520:	b2db      	uxtb	r3, r3
   27522:	001a      	movs	r2, r3
   27524:	693b      	ldr	r3, [r7, #16]
   27526:	3206      	adds	r2, #6
   27528:	0092      	lsls	r2, r2, #2
   2752a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2752c:	210f      	movs	r1, #15
   2752e:	68fa      	ldr	r2, [r7, #12]
   27530:	4091      	lsls	r1, r2
   27532:	000a      	movs	r2, r1
   27534:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27536:	401a      	ands	r2, r3
			(new_config << config_pos);
   27538:	6979      	ldr	r1, [r7, #20]
   2753a:	68fb      	ldr	r3, [r7, #12]
   2753c:	4099      	lsls	r1, r3
   2753e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27540:	431a      	orrs	r2, r3
   27542:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27544:	693b      	ldr	r3, [r7, #16]
   27546:	1d82      	adds	r2, r0, #6
   27548:	0092      	lsls	r2, r2, #2
   2754a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2754c:	683b      	ldr	r3, [r7, #0]
   2754e:	7a5b      	ldrb	r3, [r3, #9]
   27550:	2b00      	cmp	r3, #0
   27552:	d00a      	beq.n	2756a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   27554:	693b      	ldr	r3, [r7, #16]
   27556:	695a      	ldr	r2, [r3, #20]
   27558:	1dfb      	adds	r3, r7, #7
   2755a:	781b      	ldrb	r3, [r3, #0]
   2755c:	2101      	movs	r1, #1
   2755e:	4099      	lsls	r1, r3
   27560:	000b      	movs	r3, r1
   27562:	431a      	orrs	r2, r3
   27564:	693b      	ldr	r3, [r7, #16]
   27566:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   27568:	e00a      	b.n	27580 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2756a:	693b      	ldr	r3, [r7, #16]
   2756c:	695b      	ldr	r3, [r3, #20]
   2756e:	1dfa      	adds	r2, r7, #7
   27570:	7812      	ldrb	r2, [r2, #0]
   27572:	2101      	movs	r1, #1
   27574:	4091      	lsls	r1, r2
   27576:	000a      	movs	r2, r1
   27578:	43d2      	mvns	r2, r2
   2757a:	401a      	ands	r2, r3
   2757c:	693b      	ldr	r3, [r7, #16]
   2757e:	615a      	str	r2, [r3, #20]
}
   27580:	46c0      	nop			; (mov r8, r8)
   27582:	46bd      	mov	sp, r7
   27584:	b006      	add	sp, #24
   27586:	bd80      	pop	{r7, pc}
   27588:	00027239 	.word	0x00027239
   2758c:	0002adad 	.word	0x0002adad
   27590:	0002728d 	.word	0x0002728d

00027594 <system_pinmux_get_config_defaults>:
{
   27594:	b580      	push	{r7, lr}
   27596:	b082      	sub	sp, #8
   27598:	af00      	add	r7, sp, #0
   2759a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2759c:	687b      	ldr	r3, [r7, #4]
   2759e:	2280      	movs	r2, #128	; 0x80
   275a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   275a2:	687b      	ldr	r3, [r7, #4]
   275a4:	2200      	movs	r2, #0
   275a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   275a8:	687b      	ldr	r3, [r7, #4]
   275aa:	2201      	movs	r2, #1
   275ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   275ae:	687b      	ldr	r3, [r7, #4]
   275b0:	2200      	movs	r2, #0
   275b2:	70da      	strb	r2, [r3, #3]
}
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	46bd      	mov	sp, r7
   275b8:	b002      	add	sp, #8
   275ba:	bd80      	pop	{r7, pc}

000275bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   275bc:	b580      	push	{r7, lr}
   275be:	b084      	sub	sp, #16
   275c0:	af00      	add	r7, sp, #0
   275c2:	0002      	movs	r2, r0
   275c4:	6039      	str	r1, [r7, #0]
   275c6:	1dfb      	adds	r3, r7, #7
   275c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   275ca:	230c      	movs	r3, #12
   275cc:	18fb      	adds	r3, r7, r3
   275ce:	0018      	movs	r0, r3
   275d0:	4b10      	ldr	r3, [pc, #64]	; (27614 <port_pin_set_config+0x58>)
   275d2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   275d4:	230c      	movs	r3, #12
   275d6:	18fb      	adds	r3, r7, r3
   275d8:	2280      	movs	r2, #128	; 0x80
   275da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   275dc:	683b      	ldr	r3, [r7, #0]
   275de:	781a      	ldrb	r2, [r3, #0]
   275e0:	230c      	movs	r3, #12
   275e2:	18fb      	adds	r3, r7, r3
   275e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   275e6:	683b      	ldr	r3, [r7, #0]
   275e8:	785a      	ldrb	r2, [r3, #1]
   275ea:	230c      	movs	r3, #12
   275ec:	18fb      	adds	r3, r7, r3
   275ee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   275f0:	683b      	ldr	r3, [r7, #0]
   275f2:	789a      	ldrb	r2, [r3, #2]
   275f4:	230c      	movs	r3, #12
   275f6:	18fb      	adds	r3, r7, r3
   275f8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   275fa:	230c      	movs	r3, #12
   275fc:	18fa      	adds	r2, r7, r3
   275fe:	1dfb      	adds	r3, r7, #7
   27600:	781b      	ldrb	r3, [r3, #0]
   27602:	0011      	movs	r1, r2
   27604:	0018      	movs	r0, r3
   27606:	4b04      	ldr	r3, [pc, #16]	; (27618 <port_pin_set_config+0x5c>)
   27608:	4798      	blx	r3
}
   2760a:	46c0      	nop			; (mov r8, r8)
   2760c:	46bd      	mov	sp, r7
   2760e:	b004      	add	sp, #16
   27610:	bd80      	pop	{r7, pc}
   27612:	46c0      	nop			; (mov r8, r8)
   27614:	00027595 	.word	0x00027595
   27618:	0002adad 	.word	0x0002adad

0002761c <system_gclk_chan_get_config_defaults>:
{
   2761c:	b580      	push	{r7, lr}
   2761e:	b082      	sub	sp, #8
   27620:	af00      	add	r7, sp, #0
   27622:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27624:	687b      	ldr	r3, [r7, #4]
   27626:	2200      	movs	r2, #0
   27628:	701a      	strb	r2, [r3, #0]
}
   2762a:	46c0      	nop			; (mov r8, r8)
   2762c:	46bd      	mov	sp, r7
   2762e:	b002      	add	sp, #8
   27630:	bd80      	pop	{r7, pc}
	...

00027634 <system_apb_clock_set_mask>:
{
   27634:	b580      	push	{r7, lr}
   27636:	b082      	sub	sp, #8
   27638:	af00      	add	r7, sp, #0
   2763a:	0002      	movs	r2, r0
   2763c:	6039      	str	r1, [r7, #0]
   2763e:	1dfb      	adds	r3, r7, #7
   27640:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27642:	1dfb      	adds	r3, r7, #7
   27644:	781b      	ldrb	r3, [r3, #0]
   27646:	2b01      	cmp	r3, #1
   27648:	d00a      	beq.n	27660 <system_apb_clock_set_mask+0x2c>
   2764a:	2b02      	cmp	r3, #2
   2764c:	d00f      	beq.n	2766e <system_apb_clock_set_mask+0x3a>
   2764e:	2b00      	cmp	r3, #0
   27650:	d114      	bne.n	2767c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27652:	4b0e      	ldr	r3, [pc, #56]	; (2768c <system_apb_clock_set_mask+0x58>)
   27654:	4a0d      	ldr	r2, [pc, #52]	; (2768c <system_apb_clock_set_mask+0x58>)
   27656:	6991      	ldr	r1, [r2, #24]
   27658:	683a      	ldr	r2, [r7, #0]
   2765a:	430a      	orrs	r2, r1
   2765c:	619a      	str	r2, [r3, #24]
			break;
   2765e:	e00f      	b.n	27680 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27660:	4b0a      	ldr	r3, [pc, #40]	; (2768c <system_apb_clock_set_mask+0x58>)
   27662:	4a0a      	ldr	r2, [pc, #40]	; (2768c <system_apb_clock_set_mask+0x58>)
   27664:	69d1      	ldr	r1, [r2, #28]
   27666:	683a      	ldr	r2, [r7, #0]
   27668:	430a      	orrs	r2, r1
   2766a:	61da      	str	r2, [r3, #28]
			break;
   2766c:	e008      	b.n	27680 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2766e:	4b07      	ldr	r3, [pc, #28]	; (2768c <system_apb_clock_set_mask+0x58>)
   27670:	4a06      	ldr	r2, [pc, #24]	; (2768c <system_apb_clock_set_mask+0x58>)
   27672:	6a11      	ldr	r1, [r2, #32]
   27674:	683a      	ldr	r2, [r7, #0]
   27676:	430a      	orrs	r2, r1
   27678:	621a      	str	r2, [r3, #32]
			break;
   2767a:	e001      	b.n	27680 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2767c:	2317      	movs	r3, #23
   2767e:	e000      	b.n	27682 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27680:	2300      	movs	r3, #0
}
   27682:	0018      	movs	r0, r3
   27684:	46bd      	mov	sp, r7
   27686:	b002      	add	sp, #8
   27688:	bd80      	pop	{r7, pc}
   2768a:	46c0      	nop			; (mov r8, r8)
   2768c:	40000400 	.word	0x40000400

00027690 <system_interrupt_enable>:
{
   27690:	b580      	push	{r7, lr}
   27692:	b082      	sub	sp, #8
   27694:	af00      	add	r7, sp, #0
   27696:	0002      	movs	r2, r0
   27698:	1dfb      	adds	r3, r7, #7
   2769a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2769c:	4b06      	ldr	r3, [pc, #24]	; (276b8 <system_interrupt_enable+0x28>)
   2769e:	1dfa      	adds	r2, r7, #7
   276a0:	7812      	ldrb	r2, [r2, #0]
   276a2:	0011      	movs	r1, r2
   276a4:	221f      	movs	r2, #31
   276a6:	400a      	ands	r2, r1
   276a8:	2101      	movs	r1, #1
   276aa:	4091      	lsls	r1, r2
   276ac:	000a      	movs	r2, r1
   276ae:	601a      	str	r2, [r3, #0]
}
   276b0:	46c0      	nop			; (mov r8, r8)
   276b2:	46bd      	mov	sp, r7
   276b4:	b002      	add	sp, #8
   276b6:	bd80      	pop	{r7, pc}
   276b8:	e000e100 	.word	0xe000e100

000276bc <system_interrupt_disable>:
{
   276bc:	b580      	push	{r7, lr}
   276be:	b082      	sub	sp, #8
   276c0:	af00      	add	r7, sp, #0
   276c2:	0002      	movs	r2, r0
   276c4:	1dfb      	adds	r3, r7, #7
   276c6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   276c8:	4a07      	ldr	r2, [pc, #28]	; (276e8 <system_interrupt_disable+0x2c>)
   276ca:	1dfb      	adds	r3, r7, #7
   276cc:	781b      	ldrb	r3, [r3, #0]
   276ce:	0019      	movs	r1, r3
   276d0:	231f      	movs	r3, #31
   276d2:	400b      	ands	r3, r1
   276d4:	2101      	movs	r1, #1
   276d6:	4099      	lsls	r1, r3
   276d8:	000b      	movs	r3, r1
   276da:	0019      	movs	r1, r3
   276dc:	2380      	movs	r3, #128	; 0x80
   276de:	50d1      	str	r1, [r2, r3]
}
   276e0:	46c0      	nop			; (mov r8, r8)
   276e2:	46bd      	mov	sp, r7
   276e4:	b002      	add	sp, #8
   276e6:	bd80      	pop	{r7, pc}
   276e8:	e000e100 	.word	0xe000e100

000276ec <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   276ec:	b580      	push	{r7, lr}
   276ee:	b084      	sub	sp, #16
   276f0:	af00      	add	r7, sp, #0
   276f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   276f4:	687b      	ldr	r3, [r7, #4]
   276f6:	681b      	ldr	r3, [r3, #0]
   276f8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   276fa:	68fb      	ldr	r3, [r7, #12]
   276fc:	7a9b      	ldrb	r3, [r3, #10]
   276fe:	b2db      	uxtb	r3, r3
   27700:	b25b      	sxtb	r3, r3
   27702:	2b00      	cmp	r3, #0
   27704:	da01      	bge.n	2770a <rtc_calendar_is_syncing+0x1e>
                return true;
   27706:	2301      	movs	r3, #1
   27708:	e000      	b.n	2770c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2770a:	2300      	movs	r3, #0
}
   2770c:	0018      	movs	r0, r3
   2770e:	46bd      	mov	sp, r7
   27710:	b004      	add	sp, #16
   27712:	bd80      	pop	{r7, pc}

00027714 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27714:	b580      	push	{r7, lr}
   27716:	b084      	sub	sp, #16
   27718:	af00      	add	r7, sp, #0
   2771a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2771c:	687b      	ldr	r3, [r7, #4]
   2771e:	681b      	ldr	r3, [r3, #0]
   27720:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   27722:	2003      	movs	r0, #3
   27724:	4b0a      	ldr	r3, [pc, #40]	; (27750 <rtc_calendar_enable+0x3c>)
   27726:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27728:	46c0      	nop			; (mov r8, r8)
   2772a:	687b      	ldr	r3, [r7, #4]
   2772c:	0018      	movs	r0, r3
   2772e:	4b09      	ldr	r3, [pc, #36]	; (27754 <rtc_calendar_enable+0x40>)
   27730:	4798      	blx	r3
   27732:	1e03      	subs	r3, r0, #0
   27734:	d1f9      	bne.n	2772a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   27736:	68fb      	ldr	r3, [r7, #12]
   27738:	881b      	ldrh	r3, [r3, #0]
   2773a:	b29b      	uxth	r3, r3
   2773c:	2202      	movs	r2, #2
   2773e:	4313      	orrs	r3, r2
   27740:	b29a      	uxth	r2, r3
   27742:	68fb      	ldr	r3, [r7, #12]
   27744:	801a      	strh	r2, [r3, #0]
}
   27746:	46c0      	nop			; (mov r8, r8)
   27748:	46bd      	mov	sp, r7
   2774a:	b004      	add	sp, #16
   2774c:	bd80      	pop	{r7, pc}
   2774e:	46c0      	nop			; (mov r8, r8)
   27750:	00027691 	.word	0x00027691
   27754:	000276ed 	.word	0x000276ed

00027758 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   27758:	b580      	push	{r7, lr}
   2775a:	b084      	sub	sp, #16
   2775c:	af00      	add	r7, sp, #0
   2775e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27760:	687b      	ldr	r3, [r7, #4]
   27762:	681b      	ldr	r3, [r3, #0]
   27764:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   27766:	2003      	movs	r0, #3
   27768:	4b0d      	ldr	r3, [pc, #52]	; (277a0 <rtc_calendar_disable+0x48>)
   2776a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2776c:	46c0      	nop			; (mov r8, r8)
   2776e:	687b      	ldr	r3, [r7, #4]
   27770:	0018      	movs	r0, r3
   27772:	4b0c      	ldr	r3, [pc, #48]	; (277a4 <rtc_calendar_disable+0x4c>)
   27774:	4798      	blx	r3
   27776:	1e03      	subs	r3, r0, #0
   27778:	d1f9      	bne.n	2776e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2777a:	68fb      	ldr	r3, [r7, #12]
   2777c:	22c1      	movs	r2, #193	; 0xc1
   2777e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27780:	68fb      	ldr	r3, [r7, #12]
   27782:	22c1      	movs	r2, #193	; 0xc1
   27784:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   27786:	68fb      	ldr	r3, [r7, #12]
   27788:	881b      	ldrh	r3, [r3, #0]
   2778a:	b29b      	uxth	r3, r3
   2778c:	2202      	movs	r2, #2
   2778e:	4393      	bics	r3, r2
   27790:	b29a      	uxth	r2, r3
   27792:	68fb      	ldr	r3, [r7, #12]
   27794:	801a      	strh	r2, [r3, #0]
}
   27796:	46c0      	nop			; (mov r8, r8)
   27798:	46bd      	mov	sp, r7
   2779a:	b004      	add	sp, #16
   2779c:	bd80      	pop	{r7, pc}
   2779e:	46c0      	nop			; (mov r8, r8)
   277a0:	000276bd 	.word	0x000276bd
   277a4:	000276ed 	.word	0x000276ed

000277a8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   277a8:	b580      	push	{r7, lr}
   277aa:	b084      	sub	sp, #16
   277ac:	af00      	add	r7, sp, #0
   277ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   277b0:	687b      	ldr	r3, [r7, #4]
   277b2:	681b      	ldr	r3, [r3, #0]
   277b4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   277b6:	687b      	ldr	r3, [r7, #4]
   277b8:	0018      	movs	r0, r3
   277ba:	4b0d      	ldr	r3, [pc, #52]	; (277f0 <rtc_calendar_reset+0x48>)
   277bc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   277be:	687b      	ldr	r3, [r7, #4]
   277c0:	2200      	movs	r2, #0
   277c2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   277c4:	687b      	ldr	r3, [r7, #4]
   277c6:	2200      	movs	r2, #0
   277c8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   277ca:	46c0      	nop			; (mov r8, r8)
   277cc:	687b      	ldr	r3, [r7, #4]
   277ce:	0018      	movs	r0, r3
   277d0:	4b08      	ldr	r3, [pc, #32]	; (277f4 <rtc_calendar_reset+0x4c>)
   277d2:	4798      	blx	r3
   277d4:	1e03      	subs	r3, r0, #0
   277d6:	d1f9      	bne.n	277cc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   277d8:	68fb      	ldr	r3, [r7, #12]
   277da:	881b      	ldrh	r3, [r3, #0]
   277dc:	b29b      	uxth	r3, r3
   277de:	2201      	movs	r2, #1
   277e0:	4313      	orrs	r3, r2
   277e2:	b29a      	uxth	r2, r3
   277e4:	68fb      	ldr	r3, [r7, #12]
   277e6:	801a      	strh	r2, [r3, #0]
}
   277e8:	46c0      	nop			; (mov r8, r8)
   277ea:	46bd      	mov	sp, r7
   277ec:	b004      	add	sp, #16
   277ee:	bd80      	pop	{r7, pc}
   277f0:	00027759 	.word	0x00027759
   277f4:	000276ed 	.word	0x000276ed

000277f8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   277f8:	b580      	push	{r7, lr}
   277fa:	b084      	sub	sp, #16
   277fc:	af00      	add	r7, sp, #0
   277fe:	6078      	str	r0, [r7, #4]
   27800:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27802:	683b      	ldr	r3, [r7, #0]
   27804:	88db      	ldrh	r3, [r3, #6]
   27806:	001a      	movs	r2, r3
   27808:	687b      	ldr	r3, [r7, #4]
   2780a:	88db      	ldrh	r3, [r3, #6]
   2780c:	1ad3      	subs	r3, r2, r3
   2780e:	069b      	lsls	r3, r3, #26
   27810:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27812:	683b      	ldr	r3, [r7, #0]
   27814:	795b      	ldrb	r3, [r3, #5]
   27816:	059b      	lsls	r3, r3, #22
   27818:	001a      	movs	r2, r3
   2781a:	68fb      	ldr	r3, [r7, #12]
   2781c:	4313      	orrs	r3, r2
   2781e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27820:	683b      	ldr	r3, [r7, #0]
   27822:	791b      	ldrb	r3, [r3, #4]
   27824:	045b      	lsls	r3, r3, #17
   27826:	001a      	movs	r2, r3
   27828:	68fb      	ldr	r3, [r7, #12]
   2782a:	4313      	orrs	r3, r2
   2782c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2782e:	683b      	ldr	r3, [r7, #0]
   27830:	789b      	ldrb	r3, [r3, #2]
   27832:	031b      	lsls	r3, r3, #12
   27834:	001a      	movs	r2, r3
   27836:	68fb      	ldr	r3, [r7, #12]
   27838:	4313      	orrs	r3, r2
   2783a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2783c:	687b      	ldr	r3, [r7, #4]
   2783e:	791b      	ldrb	r3, [r3, #4]
   27840:	2201      	movs	r2, #1
   27842:	4053      	eors	r3, r2
   27844:	b2db      	uxtb	r3, r3
   27846:	2b00      	cmp	r3, #0
   27848:	d008      	beq.n	2785c <rtc_calendar_time_to_register_value+0x64>
   2784a:	683b      	ldr	r3, [r7, #0]
   2784c:	78db      	ldrb	r3, [r3, #3]
   2784e:	2b00      	cmp	r3, #0
   27850:	d004      	beq.n	2785c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27852:	68fb      	ldr	r3, [r7, #12]
   27854:	2280      	movs	r2, #128	; 0x80
   27856:	0252      	lsls	r2, r2, #9
   27858:	4313      	orrs	r3, r2
   2785a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   2785c:	683b      	ldr	r3, [r7, #0]
   2785e:	785b      	ldrb	r3, [r3, #1]
   27860:	019b      	lsls	r3, r3, #6
   27862:	001a      	movs	r2, r3
   27864:	68fb      	ldr	r3, [r7, #12]
   27866:	4313      	orrs	r3, r2
   27868:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2786a:	683b      	ldr	r3, [r7, #0]
   2786c:	781b      	ldrb	r3, [r3, #0]
   2786e:	001a      	movs	r2, r3
   27870:	68fb      	ldr	r3, [r7, #12]
   27872:	4313      	orrs	r3, r2
   27874:	60fb      	str	r3, [r7, #12]

	return register_value;
   27876:	68fb      	ldr	r3, [r7, #12]
}
   27878:	0018      	movs	r0, r3
   2787a:	46bd      	mov	sp, r7
   2787c:	b004      	add	sp, #16
   2787e:	bd80      	pop	{r7, pc}

00027880 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27880:	b580      	push	{r7, lr}
   27882:	b084      	sub	sp, #16
   27884:	af00      	add	r7, sp, #0
   27886:	60f8      	str	r0, [r7, #12]
   27888:	60b9      	str	r1, [r7, #8]
   2788a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2788c:	68bb      	ldr	r3, [r7, #8]
   2788e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27890:	b29a      	uxth	r2, r3
   27892:	68fb      	ldr	r3, [r7, #12]
   27894:	88db      	ldrh	r3, [r3, #6]
   27896:	18d3      	adds	r3, r2, r3
   27898:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2789a:	687b      	ldr	r3, [r7, #4]
   2789c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2789e:	68bb      	ldr	r3, [r7, #8]
   278a0:	0d9b      	lsrs	r3, r3, #22
   278a2:	b2db      	uxtb	r3, r3
   278a4:	220f      	movs	r2, #15
   278a6:	4013      	ands	r3, r2
   278a8:	b2da      	uxtb	r2, r3
   278aa:	687b      	ldr	r3, [r7, #4]
   278ac:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   278ae:	68bb      	ldr	r3, [r7, #8]
   278b0:	0c5b      	lsrs	r3, r3, #17
   278b2:	b2db      	uxtb	r3, r3
   278b4:	221f      	movs	r2, #31
   278b6:	4013      	ands	r3, r2
   278b8:	b2da      	uxtb	r2, r3
   278ba:	687b      	ldr	r3, [r7, #4]
   278bc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   278be:	68fb      	ldr	r3, [r7, #12]
   278c0:	791b      	ldrb	r3, [r3, #4]
   278c2:	2b00      	cmp	r3, #0
   278c4:	d008      	beq.n	278d8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   278c6:	68bb      	ldr	r3, [r7, #8]
   278c8:	0b1b      	lsrs	r3, r3, #12
   278ca:	b2db      	uxtb	r3, r3
   278cc:	221f      	movs	r2, #31
   278ce:	4013      	ands	r3, r2
   278d0:	b2da      	uxtb	r2, r3
   278d2:	687b      	ldr	r3, [r7, #4]
   278d4:	709a      	strb	r2, [r3, #2]
   278d6:	e010      	b.n	278fa <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   278d8:	68bb      	ldr	r3, [r7, #8]
   278da:	0b1b      	lsrs	r3, r3, #12
   278dc:	b2db      	uxtb	r3, r3
   278de:	220f      	movs	r2, #15
   278e0:	4013      	ands	r3, r2
   278e2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   278e4:	687b      	ldr	r3, [r7, #4]
   278e6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   278e8:	68ba      	ldr	r2, [r7, #8]
   278ea:	2380      	movs	r3, #128	; 0x80
   278ec:	025b      	lsls	r3, r3, #9
   278ee:	4013      	ands	r3, r2
   278f0:	1e5a      	subs	r2, r3, #1
   278f2:	4193      	sbcs	r3, r2
   278f4:	b2da      	uxtb	r2, r3
   278f6:	687b      	ldr	r3, [r7, #4]
   278f8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   278fa:	68bb      	ldr	r3, [r7, #8]
   278fc:	099b      	lsrs	r3, r3, #6
   278fe:	b2db      	uxtb	r3, r3
   27900:	223f      	movs	r2, #63	; 0x3f
   27902:	4013      	ands	r3, r2
   27904:	b2da      	uxtb	r2, r3
   27906:	687b      	ldr	r3, [r7, #4]
   27908:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2790a:	68bb      	ldr	r3, [r7, #8]
   2790c:	b2db      	uxtb	r3, r3
   2790e:	223f      	movs	r2, #63	; 0x3f
   27910:	4013      	ands	r3, r2
   27912:	b2da      	uxtb	r2, r3
   27914:	687b      	ldr	r3, [r7, #4]
   27916:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27918:	46c0      	nop			; (mov r8, r8)
   2791a:	46bd      	mov	sp, r7
   2791c:	b004      	add	sp, #16
   2791e:	bd80      	pop	{r7, pc}

00027920 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27920:	b580      	push	{r7, lr}
   27922:	b084      	sub	sp, #16
   27924:	af00      	add	r7, sp, #0
   27926:	6078      	str	r0, [r7, #4]
   27928:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2792a:	687b      	ldr	r3, [r7, #4]
   2792c:	681b      	ldr	r3, [r3, #0]
   2792e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27930:	683b      	ldr	r3, [r7, #0]
   27932:	881a      	ldrh	r2, [r3, #0]
   27934:	230e      	movs	r3, #14
   27936:	18fb      	adds	r3, r7, r3
   27938:	2108      	movs	r1, #8
   2793a:	430a      	orrs	r2, r1
   2793c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2793e:	683b      	ldr	r3, [r7, #0]
   27940:	791b      	ldrb	r3, [r3, #4]
   27942:	2201      	movs	r2, #1
   27944:	4053      	eors	r3, r2
   27946:	b2db      	uxtb	r3, r3
   27948:	2b00      	cmp	r3, #0
   2794a:	d007      	beq.n	2795c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   2794c:	230e      	movs	r3, #14
   2794e:	18fb      	adds	r3, r7, r3
   27950:	220e      	movs	r2, #14
   27952:	18ba      	adds	r2, r7, r2
   27954:	8812      	ldrh	r2, [r2, #0]
   27956:	2140      	movs	r1, #64	; 0x40
   27958:	430a      	orrs	r2, r1
   2795a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2795c:	683b      	ldr	r3, [r7, #0]
   2795e:	789b      	ldrb	r3, [r3, #2]
   27960:	2b00      	cmp	r3, #0
   27962:	d007      	beq.n	27974 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27964:	230e      	movs	r3, #14
   27966:	18fb      	adds	r3, r7, r3
   27968:	220e      	movs	r2, #14
   2796a:	18ba      	adds	r2, r7, r2
   2796c:	8812      	ldrh	r2, [r2, #0]
   2796e:	2180      	movs	r1, #128	; 0x80
   27970:	430a      	orrs	r2, r1
   27972:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27974:	68bb      	ldr	r3, [r7, #8]
   27976:	220e      	movs	r2, #14
   27978:	18ba      	adds	r2, r7, r2
   2797a:	8812      	ldrh	r2, [r2, #0]
   2797c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2797e:	683b      	ldr	r3, [r7, #0]
   27980:	78db      	ldrb	r3, [r3, #3]
   27982:	2b00      	cmp	r3, #0
   27984:	d008      	beq.n	27998 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27986:	68bb      	ldr	r3, [r7, #8]
   27988:	885b      	ldrh	r3, [r3, #2]
   2798a:	b29b      	uxth	r3, r3
   2798c:	2280      	movs	r2, #128	; 0x80
   2798e:	01d2      	lsls	r2, r2, #7
   27990:	4313      	orrs	r3, r2
   27992:	b29a      	uxth	r2, r3
   27994:	68bb      	ldr	r3, [r7, #8]
   27996:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27998:	230d      	movs	r3, #13
   2799a:	18fb      	adds	r3, r7, r3
   2799c:	2200      	movs	r2, #0
   2799e:	701a      	strb	r2, [r3, #0]
   279a0:	e017      	b.n	279d2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   279a2:	230d      	movs	r3, #13
   279a4:	18fb      	adds	r3, r7, r3
   279a6:	781a      	ldrb	r2, [r3, #0]
   279a8:	0013      	movs	r3, r2
   279aa:	009b      	lsls	r3, r3, #2
   279ac:	189b      	adds	r3, r3, r2
   279ae:	005b      	lsls	r3, r3, #1
   279b0:	3308      	adds	r3, #8
   279b2:	683a      	ldr	r2, [r7, #0]
   279b4:	18d1      	adds	r1, r2, r3
   279b6:	230d      	movs	r3, #13
   279b8:	18fb      	adds	r3, r7, r3
   279ba:	781a      	ldrb	r2, [r3, #0]
   279bc:	687b      	ldr	r3, [r7, #4]
   279be:	0018      	movs	r0, r3
   279c0:	4b08      	ldr	r3, [pc, #32]	; (279e4 <_rtc_calendar_set_config+0xc4>)
   279c2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   279c4:	230d      	movs	r3, #13
   279c6:	18fb      	adds	r3, r7, r3
   279c8:	781a      	ldrb	r2, [r3, #0]
   279ca:	230d      	movs	r3, #13
   279cc:	18fb      	adds	r3, r7, r3
   279ce:	3201      	adds	r2, #1
   279d0:	701a      	strb	r2, [r3, #0]
   279d2:	230d      	movs	r3, #13
   279d4:	18fb      	adds	r3, r7, r3
   279d6:	781b      	ldrb	r3, [r3, #0]
   279d8:	2b00      	cmp	r3, #0
   279da:	d0e2      	beq.n	279a2 <_rtc_calendar_set_config+0x82>
	}
}
   279dc:	46c0      	nop			; (mov r8, r8)
   279de:	46bd      	mov	sp, r7
   279e0:	b004      	add	sp, #16
   279e2:	bd80      	pop	{r7, pc}
   279e4:	00027b09 	.word	0x00027b09

000279e8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   279e8:	b580      	push	{r7, lr}
   279ea:	b086      	sub	sp, #24
   279ec:	af00      	add	r7, sp, #0
   279ee:	60f8      	str	r0, [r7, #12]
   279f0:	60b9      	str	r1, [r7, #8]
   279f2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   279f4:	68fb      	ldr	r3, [r7, #12]
   279f6:	68ba      	ldr	r2, [r7, #8]
   279f8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   279fa:	2120      	movs	r1, #32
   279fc:	2000      	movs	r0, #0
   279fe:	4b18      	ldr	r3, [pc, #96]	; (27a60 <rtc_calendar_init+0x78>)
   27a00:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27a02:	2314      	movs	r3, #20
   27a04:	18fb      	adds	r3, r7, r3
   27a06:	0018      	movs	r0, r3
   27a08:	4b16      	ldr	r3, [pc, #88]	; (27a64 <rtc_calendar_init+0x7c>)
   27a0a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27a0c:	2314      	movs	r3, #20
   27a0e:	18fb      	adds	r3, r7, r3
   27a10:	2202      	movs	r2, #2
   27a12:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27a14:	2314      	movs	r3, #20
   27a16:	18fb      	adds	r3, r7, r3
   27a18:	0019      	movs	r1, r3
   27a1a:	2004      	movs	r0, #4
   27a1c:	4b12      	ldr	r3, [pc, #72]	; (27a68 <rtc_calendar_init+0x80>)
   27a1e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27a20:	2004      	movs	r0, #4
   27a22:	4b12      	ldr	r3, [pc, #72]	; (27a6c <rtc_calendar_init+0x84>)
   27a24:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27a26:	68fb      	ldr	r3, [r7, #12]
   27a28:	0018      	movs	r0, r3
   27a2a:	4b11      	ldr	r3, [pc, #68]	; (27a70 <rtc_calendar_init+0x88>)
   27a2c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27a2e:	687b      	ldr	r3, [r7, #4]
   27a30:	791a      	ldrb	r2, [r3, #4]
   27a32:	68fb      	ldr	r3, [r7, #12]
   27a34:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27a36:	687b      	ldr	r3, [r7, #4]
   27a38:	78da      	ldrb	r2, [r3, #3]
   27a3a:	68fb      	ldr	r3, [r7, #12]
   27a3c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27a3e:	687b      	ldr	r3, [r7, #4]
   27a40:	88da      	ldrh	r2, [r3, #6]
   27a42:	68fb      	ldr	r3, [r7, #12]
   27a44:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27a46:	4b0b      	ldr	r3, [pc, #44]	; (27a74 <rtc_calendar_init+0x8c>)
   27a48:	68fa      	ldr	r2, [r7, #12]
   27a4a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27a4c:	687a      	ldr	r2, [r7, #4]
   27a4e:	68fb      	ldr	r3, [r7, #12]
   27a50:	0011      	movs	r1, r2
   27a52:	0018      	movs	r0, r3
   27a54:	4b08      	ldr	r3, [pc, #32]	; (27a78 <rtc_calendar_init+0x90>)
   27a56:	4798      	blx	r3
}
   27a58:	46c0      	nop			; (mov r8, r8)
   27a5a:	46bd      	mov	sp, r7
   27a5c:	b006      	add	sp, #24
   27a5e:	bd80      	pop	{r7, pc}
   27a60:	00027635 	.word	0x00027635
   27a64:	0002761d 	.word	0x0002761d
   27a68:	0002aa4d 	.word	0x0002aa4d
   27a6c:	0002aa91 	.word	0x0002aa91
   27a70:	000277a9 	.word	0x000277a9
   27a74:	20005c98 	.word	0x20005c98
   27a78:	00027921 	.word	0x00027921

00027a7c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27a7c:	b580      	push	{r7, lr}
   27a7e:	b084      	sub	sp, #16
   27a80:	af00      	add	r7, sp, #0
   27a82:	6078      	str	r0, [r7, #4]
   27a84:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27a86:	687b      	ldr	r3, [r7, #4]
   27a88:	681b      	ldr	r3, [r3, #0]
   27a8a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27a8c:	687b      	ldr	r3, [r7, #4]
   27a8e:	795b      	ldrb	r3, [r3, #5]
   27a90:	2201      	movs	r2, #1
   27a92:	4053      	eors	r3, r2
   27a94:	b2db      	uxtb	r3, r3
   27a96:	2b00      	cmp	r3, #0
   27a98:	d00a      	beq.n	27ab0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27a9a:	68fb      	ldr	r3, [r7, #12]
   27a9c:	4a16      	ldr	r2, [pc, #88]	; (27af8 <rtc_calendar_get_time+0x7c>)
   27a9e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27aa0:	46c0      	nop			; (mov r8, r8)
   27aa2:	687b      	ldr	r3, [r7, #4]
   27aa4:	0018      	movs	r0, r3
   27aa6:	4b15      	ldr	r3, [pc, #84]	; (27afc <rtc_calendar_get_time+0x80>)
   27aa8:	4798      	blx	r3
   27aaa:	1e03      	subs	r3, r0, #0
   27aac:	d1f9      	bne.n	27aa2 <rtc_calendar_get_time+0x26>
   27aae:	e016      	b.n	27ade <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27ab0:	68fb      	ldr	r3, [r7, #12]
   27ab2:	885b      	ldrh	r3, [r3, #2]
   27ab4:	b29b      	uxth	r3, r3
   27ab6:	001a      	movs	r2, r3
   27ab8:	2380      	movs	r3, #128	; 0x80
   27aba:	01db      	lsls	r3, r3, #7
   27abc:	4013      	ands	r3, r2
   27abe:	d10e      	bne.n	27ade <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27ac0:	68fb      	ldr	r3, [r7, #12]
   27ac2:	885b      	ldrh	r3, [r3, #2]
   27ac4:	b29b      	uxth	r3, r3
   27ac6:	4a0e      	ldr	r2, [pc, #56]	; (27b00 <rtc_calendar_get_time+0x84>)
   27ac8:	4313      	orrs	r3, r2
   27aca:	b29a      	uxth	r2, r3
   27acc:	68fb      	ldr	r3, [r7, #12]
   27ace:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27ad0:	46c0      	nop			; (mov r8, r8)
   27ad2:	687b      	ldr	r3, [r7, #4]
   27ad4:	0018      	movs	r0, r3
   27ad6:	4b09      	ldr	r3, [pc, #36]	; (27afc <rtc_calendar_get_time+0x80>)
   27ad8:	4798      	blx	r3
   27ada:	1e03      	subs	r3, r0, #0
   27adc:	d1f9      	bne.n	27ad2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27ade:	68fb      	ldr	r3, [r7, #12]
   27ae0:	691b      	ldr	r3, [r3, #16]
   27ae2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27ae4:	683a      	ldr	r2, [r7, #0]
   27ae6:	68b9      	ldr	r1, [r7, #8]
   27ae8:	687b      	ldr	r3, [r7, #4]
   27aea:	0018      	movs	r0, r3
   27aec:	4b05      	ldr	r3, [pc, #20]	; (27b04 <rtc_calendar_get_time+0x88>)
   27aee:	4798      	blx	r3
}
   27af0:	46c0      	nop			; (mov r8, r8)
   27af2:	46bd      	mov	sp, r7
   27af4:	b004      	add	sp, #16
   27af6:	bd80      	pop	{r7, pc}
   27af8:	ffff8000 	.word	0xffff8000
   27afc:	000276ed 	.word	0x000276ed
   27b00:	ffffc000 	.word	0xffffc000
   27b04:	00027881 	.word	0x00027881

00027b08 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27b08:	b580      	push	{r7, lr}
   27b0a:	b086      	sub	sp, #24
   27b0c:	af00      	add	r7, sp, #0
   27b0e:	60f8      	str	r0, [r7, #12]
   27b10:	60b9      	str	r1, [r7, #8]
   27b12:	1dfb      	adds	r3, r7, #7
   27b14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27b16:	68fb      	ldr	r3, [r7, #12]
   27b18:	681b      	ldr	r3, [r3, #0]
   27b1a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27b1c:	1dfb      	adds	r3, r7, #7
   27b1e:	781b      	ldrb	r3, [r3, #0]
   27b20:	2b01      	cmp	r3, #1
   27b22:	d901      	bls.n	27b28 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27b24:	2317      	movs	r3, #23
   27b26:	e021      	b.n	27b6c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27b28:	68ba      	ldr	r2, [r7, #8]
   27b2a:	68fb      	ldr	r3, [r7, #12]
   27b2c:	0011      	movs	r1, r2
   27b2e:	0018      	movs	r0, r3
   27b30:	4b10      	ldr	r3, [pc, #64]	; (27b74 <rtc_calendar_set_alarm+0x6c>)
   27b32:	4798      	blx	r3
   27b34:	0003      	movs	r3, r0
   27b36:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27b38:	46c0      	nop			; (mov r8, r8)
   27b3a:	68fb      	ldr	r3, [r7, #12]
   27b3c:	0018      	movs	r0, r3
   27b3e:	4b0e      	ldr	r3, [pc, #56]	; (27b78 <rtc_calendar_set_alarm+0x70>)
   27b40:	4798      	blx	r3
   27b42:	1e03      	subs	r3, r0, #0
   27b44:	d1f9      	bne.n	27b3a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27b46:	1dfb      	adds	r3, r7, #7
   27b48:	781a      	ldrb	r2, [r3, #0]
   27b4a:	697b      	ldr	r3, [r7, #20]
   27b4c:	3203      	adds	r2, #3
   27b4e:	00d2      	lsls	r2, r2, #3
   27b50:	6939      	ldr	r1, [r7, #16]
   27b52:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27b54:	1dfb      	adds	r3, r7, #7
   27b56:	781b      	ldrb	r3, [r3, #0]
   27b58:	68ba      	ldr	r2, [r7, #8]
   27b5a:	7a11      	ldrb	r1, [r2, #8]
   27b5c:	697a      	ldr	r2, [r7, #20]
   27b5e:	3303      	adds	r3, #3
   27b60:	00db      	lsls	r3, r3, #3
   27b62:	18d3      	adds	r3, r2, r3
   27b64:	3304      	adds	r3, #4
   27b66:	1c0a      	adds	r2, r1, #0
   27b68:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27b6a:	2300      	movs	r3, #0
}
   27b6c:	0018      	movs	r0, r3
   27b6e:	46bd      	mov	sp, r7
   27b70:	b006      	add	sp, #24
   27b72:	bd80      	pop	{r7, pc}
   27b74:	000277f9 	.word	0x000277f9
   27b78:	000276ed 	.word	0x000276ed

00027b7c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27b7c:	b580      	push	{r7, lr}
   27b7e:	b086      	sub	sp, #24
   27b80:	af00      	add	r7, sp, #0
   27b82:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27b84:	4b28      	ldr	r3, [pc, #160]	; (27c28 <_rtc_interrupt_handler+0xac>)
   27b86:	687a      	ldr	r2, [r7, #4]
   27b88:	0092      	lsls	r2, r2, #2
   27b8a:	58d3      	ldr	r3, [r2, r3]
   27b8c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27b8e:	697b      	ldr	r3, [r7, #20]
   27b90:	681b      	ldr	r3, [r3, #0]
   27b92:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27b94:	230e      	movs	r3, #14
   27b96:	18fb      	adds	r3, r7, r3
   27b98:	697a      	ldr	r2, [r7, #20]
   27b9a:	8a52      	ldrh	r2, [r2, #18]
   27b9c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27b9e:	697b      	ldr	r3, [r7, #20]
   27ba0:	8a1b      	ldrh	r3, [r3, #16]
   27ba2:	b29a      	uxth	r2, r3
   27ba4:	230e      	movs	r3, #14
   27ba6:	18fb      	adds	r3, r7, r3
   27ba8:	210e      	movs	r1, #14
   27baa:	1879      	adds	r1, r7, r1
   27bac:	8809      	ldrh	r1, [r1, #0]
   27bae:	400a      	ands	r2, r1
   27bb0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27bb2:	693b      	ldr	r3, [r7, #16]
   27bb4:	7a1b      	ldrb	r3, [r3, #8]
   27bb6:	b2da      	uxtb	r2, r3
   27bb8:	230c      	movs	r3, #12
   27bba:	18fb      	adds	r3, r7, r3
   27bbc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27bbe:	693b      	ldr	r3, [r7, #16]
   27bc0:	79db      	ldrb	r3, [r3, #7]
   27bc2:	b2db      	uxtb	r3, r3
   27bc4:	b29a      	uxth	r2, r3
   27bc6:	230c      	movs	r3, #12
   27bc8:	18fb      	adds	r3, r7, r3
   27bca:	210c      	movs	r1, #12
   27bcc:	1879      	adds	r1, r7, r1
   27bce:	8809      	ldrh	r1, [r1, #0]
   27bd0:	400a      	ands	r2, r1
   27bd2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27bd4:	230c      	movs	r3, #12
   27bd6:	18fb      	adds	r3, r7, r3
   27bd8:	881b      	ldrh	r3, [r3, #0]
   27bda:	2280      	movs	r2, #128	; 0x80
   27bdc:	4013      	ands	r3, r2
   27bde:	d00c      	beq.n	27bfa <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27be0:	230e      	movs	r3, #14
   27be2:	18fb      	adds	r3, r7, r3
   27be4:	881b      	ldrh	r3, [r3, #0]
   27be6:	2202      	movs	r2, #2
   27be8:	4013      	ands	r3, r2
   27bea:	d002      	beq.n	27bf2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27bec:	697b      	ldr	r3, [r7, #20]
   27bee:	68db      	ldr	r3, [r3, #12]
   27bf0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27bf2:	693b      	ldr	r3, [r7, #16]
   27bf4:	2280      	movs	r2, #128	; 0x80
   27bf6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27bf8:	e011      	b.n	27c1e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27bfa:	230c      	movs	r3, #12
   27bfc:	18fb      	adds	r3, r7, r3
   27bfe:	881b      	ldrh	r3, [r3, #0]
   27c00:	2201      	movs	r2, #1
   27c02:	4013      	ands	r3, r2
   27c04:	d00b      	beq.n	27c1e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27c06:	230e      	movs	r3, #14
   27c08:	18fb      	adds	r3, r7, r3
   27c0a:	881b      	ldrh	r3, [r3, #0]
   27c0c:	2201      	movs	r2, #1
   27c0e:	4013      	ands	r3, r2
   27c10:	d002      	beq.n	27c18 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27c12:	697b      	ldr	r3, [r7, #20]
   27c14:	689b      	ldr	r3, [r3, #8]
   27c16:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27c18:	693b      	ldr	r3, [r7, #16]
   27c1a:	2201      	movs	r2, #1
   27c1c:	721a      	strb	r2, [r3, #8]
}
   27c1e:	46c0      	nop			; (mov r8, r8)
   27c20:	46bd      	mov	sp, r7
   27c22:	b006      	add	sp, #24
   27c24:	bd80      	pop	{r7, pc}
   27c26:	46c0      	nop			; (mov r8, r8)
   27c28:	20005c98 	.word	0x20005c98

00027c2c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27c2c:	b580      	push	{r7, lr}
   27c2e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27c30:	2000      	movs	r0, #0
   27c32:	4b02      	ldr	r3, [pc, #8]	; (27c3c <RTC_Handler+0x10>)
   27c34:	4798      	blx	r3
}
   27c36:	46c0      	nop			; (mov r8, r8)
   27c38:	46bd      	mov	sp, r7
   27c3a:	bd80      	pop	{r7, pc}
   27c3c:	00027b7d 	.word	0x00027b7d

00027c40 <system_gclk_chan_get_config_defaults>:
{
   27c40:	b580      	push	{r7, lr}
   27c42:	b082      	sub	sp, #8
   27c44:	af00      	add	r7, sp, #0
   27c46:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27c48:	687b      	ldr	r3, [r7, #4]
   27c4a:	2200      	movs	r2, #0
   27c4c:	701a      	strb	r2, [r3, #0]
}
   27c4e:	46c0      	nop			; (mov r8, r8)
   27c50:	46bd      	mov	sp, r7
   27c52:	b002      	add	sp, #8
   27c54:	bd80      	pop	{r7, pc}

00027c56 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27c56:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c58:	b08d      	sub	sp, #52	; 0x34
   27c5a:	af00      	add	r7, sp, #0
   27c5c:	60b8      	str	r0, [r7, #8]
   27c5e:	60f9      	str	r1, [r7, #12]
   27c60:	603a      	str	r2, [r7, #0]
   27c62:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27c64:	2300      	movs	r3, #0
   27c66:	2400      	movs	r4, #0
   27c68:	623b      	str	r3, [r7, #32]
   27c6a:	627c      	str	r4, [r7, #36]	; 0x24
   27c6c:	2300      	movs	r3, #0
   27c6e:	2400      	movs	r4, #0
   27c70:	61bb      	str	r3, [r7, #24]
   27c72:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27c74:	233f      	movs	r3, #63	; 0x3f
   27c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   27c78:	e053      	b.n	27d22 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c7c:	3b20      	subs	r3, #32
   27c7e:	2b00      	cmp	r3, #0
   27c80:	db04      	blt.n	27c8c <long_division+0x36>
   27c82:	2201      	movs	r2, #1
   27c84:	409a      	lsls	r2, r3
   27c86:	0013      	movs	r3, r2
   27c88:	617b      	str	r3, [r7, #20]
   27c8a:	e00b      	b.n	27ca4 <long_division+0x4e>
   27c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c8e:	2220      	movs	r2, #32
   27c90:	1ad3      	subs	r3, r2, r3
   27c92:	2201      	movs	r2, #1
   27c94:	40da      	lsrs	r2, r3
   27c96:	0013      	movs	r3, r2
   27c98:	2100      	movs	r1, #0
   27c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27c9c:	4091      	lsls	r1, r2
   27c9e:	000a      	movs	r2, r1
   27ca0:	4313      	orrs	r3, r2
   27ca2:	617b      	str	r3, [r7, #20]
   27ca4:	2201      	movs	r2, #1
   27ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ca8:	409a      	lsls	r2, r3
   27caa:	0013      	movs	r3, r2
   27cac:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27cae:	69bb      	ldr	r3, [r7, #24]
   27cb0:	69fc      	ldr	r4, [r7, #28]
   27cb2:	18db      	adds	r3, r3, r3
   27cb4:	4164      	adcs	r4, r4
   27cb6:	61bb      	str	r3, [r7, #24]
   27cb8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27cba:	68bb      	ldr	r3, [r7, #8]
   27cbc:	693a      	ldr	r2, [r7, #16]
   27cbe:	401a      	ands	r2, r3
   27cc0:	0015      	movs	r5, r2
   27cc2:	68fb      	ldr	r3, [r7, #12]
   27cc4:	697a      	ldr	r2, [r7, #20]
   27cc6:	401a      	ands	r2, r3
   27cc8:	0016      	movs	r6, r2
   27cca:	002b      	movs	r3, r5
   27ccc:	4333      	orrs	r3, r6
   27cce:	d007      	beq.n	27ce0 <long_division+0x8a>
			r |= 0x01;
   27cd0:	69bb      	ldr	r3, [r7, #24]
   27cd2:	2201      	movs	r2, #1
   27cd4:	4313      	orrs	r3, r2
   27cd6:	61bb      	str	r3, [r7, #24]
   27cd8:	69fb      	ldr	r3, [r7, #28]
   27cda:	2200      	movs	r2, #0
   27cdc:	4313      	orrs	r3, r2
   27cde:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27ce0:	687a      	ldr	r2, [r7, #4]
   27ce2:	69fb      	ldr	r3, [r7, #28]
   27ce4:	429a      	cmp	r2, r3
   27ce6:	d819      	bhi.n	27d1c <long_division+0xc6>
   27ce8:	687a      	ldr	r2, [r7, #4]
   27cea:	69fb      	ldr	r3, [r7, #28]
   27cec:	429a      	cmp	r2, r3
   27cee:	d103      	bne.n	27cf8 <long_division+0xa2>
   27cf0:	683a      	ldr	r2, [r7, #0]
   27cf2:	69bb      	ldr	r3, [r7, #24]
   27cf4:	429a      	cmp	r2, r3
   27cf6:	d811      	bhi.n	27d1c <long_division+0xc6>
			r = r - d;
   27cf8:	69b9      	ldr	r1, [r7, #24]
   27cfa:	69fa      	ldr	r2, [r7, #28]
   27cfc:	683b      	ldr	r3, [r7, #0]
   27cfe:	687c      	ldr	r4, [r7, #4]
   27d00:	1ac9      	subs	r1, r1, r3
   27d02:	41a2      	sbcs	r2, r4
   27d04:	000b      	movs	r3, r1
   27d06:	0014      	movs	r4, r2
   27d08:	61bb      	str	r3, [r7, #24]
   27d0a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27d0c:	6a3a      	ldr	r2, [r7, #32]
   27d0e:	693b      	ldr	r3, [r7, #16]
   27d10:	4313      	orrs	r3, r2
   27d12:	623b      	str	r3, [r7, #32]
   27d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27d16:	697b      	ldr	r3, [r7, #20]
   27d18:	4313      	orrs	r3, r2
   27d1a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27d1e:	3b01      	subs	r3, #1
   27d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   27d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27d24:	2b00      	cmp	r3, #0
   27d26:	daa8      	bge.n	27c7a <long_division+0x24>
		}
	}

	return q;
   27d28:	6a3b      	ldr	r3, [r7, #32]
   27d2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27d2c:	0018      	movs	r0, r3
   27d2e:	0021      	movs	r1, r4
   27d30:	46bd      	mov	sp, r7
   27d32:	b00d      	add	sp, #52	; 0x34
   27d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027d36 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27d36:	b580      	push	{r7, lr}
   27d38:	b086      	sub	sp, #24
   27d3a:	af00      	add	r7, sp, #0
   27d3c:	60f8      	str	r0, [r7, #12]
   27d3e:	60b9      	str	r1, [r7, #8]
   27d40:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27d42:	2316      	movs	r3, #22
   27d44:	18fb      	adds	r3, r7, r3
   27d46:	2200      	movs	r2, #0
   27d48:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27d4a:	68bb      	ldr	r3, [r7, #8]
   27d4c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27d4e:	68bb      	ldr	r3, [r7, #8]
   27d50:	085a      	lsrs	r2, r3, #1
   27d52:	68fb      	ldr	r3, [r7, #12]
   27d54:	429a      	cmp	r2, r3
   27d56:	d201      	bcs.n	27d5c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d58:	2340      	movs	r3, #64	; 0x40
   27d5a:	e026      	b.n	27daa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27d5c:	68bb      	ldr	r3, [r7, #8]
   27d5e:	085b      	lsrs	r3, r3, #1
   27d60:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27d62:	e00a      	b.n	27d7a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27d64:	693a      	ldr	r2, [r7, #16]
   27d66:	68fb      	ldr	r3, [r7, #12]
   27d68:	1ad3      	subs	r3, r2, r3
   27d6a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27d6c:	2316      	movs	r3, #22
   27d6e:	18fb      	adds	r3, r7, r3
   27d70:	881a      	ldrh	r2, [r3, #0]
   27d72:	2316      	movs	r3, #22
   27d74:	18fb      	adds	r3, r7, r3
   27d76:	3201      	adds	r2, #1
   27d78:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27d7a:	693a      	ldr	r2, [r7, #16]
   27d7c:	68fb      	ldr	r3, [r7, #12]
   27d7e:	429a      	cmp	r2, r3
   27d80:	d2f0      	bcs.n	27d64 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27d82:	2316      	movs	r3, #22
   27d84:	18fb      	adds	r3, r7, r3
   27d86:	2216      	movs	r2, #22
   27d88:	18ba      	adds	r2, r7, r2
   27d8a:	8812      	ldrh	r2, [r2, #0]
   27d8c:	3a01      	subs	r2, #1
   27d8e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27d90:	2316      	movs	r3, #22
   27d92:	18fb      	adds	r3, r7, r3
   27d94:	881b      	ldrh	r3, [r3, #0]
   27d96:	2bff      	cmp	r3, #255	; 0xff
   27d98:	d901      	bls.n	27d9e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d9a:	2340      	movs	r3, #64	; 0x40
   27d9c:	e005      	b.n	27daa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27d9e:	687b      	ldr	r3, [r7, #4]
   27da0:	2216      	movs	r2, #22
   27da2:	18ba      	adds	r2, r7, r2
   27da4:	8812      	ldrh	r2, [r2, #0]
   27da6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27da8:	2300      	movs	r3, #0
	}
}
   27daa:	0018      	movs	r0, r3
   27dac:	46bd      	mov	sp, r7
   27dae:	b006      	add	sp, #24
   27db0:	bd80      	pop	{r7, pc}
	...

00027db4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27db6:	b0a1      	sub	sp, #132	; 0x84
   27db8:	af00      	add	r7, sp, #0
   27dba:	64f8      	str	r0, [r7, #76]	; 0x4c
   27dbc:	64b9      	str	r1, [r7, #72]	; 0x48
   27dbe:	647a      	str	r2, [r7, #68]	; 0x44
   27dc0:	2243      	movs	r2, #67	; 0x43
   27dc2:	18ba      	adds	r2, r7, r2
   27dc4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27dc6:	2300      	movs	r3, #0
   27dc8:	2400      	movs	r4, #0
   27dca:	673b      	str	r3, [r7, #112]	; 0x70
   27dcc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27dce:	2300      	movs	r3, #0
   27dd0:	2400      	movs	r4, #0
   27dd2:	66bb      	str	r3, [r7, #104]	; 0x68
   27dd4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27dd6:	2300      	movs	r3, #0
   27dd8:	2400      	movs	r4, #0
   27dda:	67bb      	str	r3, [r7, #120]	; 0x78
   27ddc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27dde:	2300      	movs	r3, #0
   27de0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27de2:	2358      	movs	r3, #88	; 0x58
   27de4:	2240      	movs	r2, #64	; 0x40
   27de6:	4694      	mov	ip, r2
   27de8:	44bc      	add	ip, r7
   27dea:	4463      	add	r3, ip
   27dec:	781a      	ldrb	r2, [r3, #0]
   27dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27df0:	435a      	muls	r2, r3
   27df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27df4:	429a      	cmp	r2, r3
   27df6:	d901      	bls.n	27dfc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27df8:	2340      	movs	r3, #64	; 0x40
   27dfa:	e0b3      	b.n	27f64 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27dfc:	2343      	movs	r3, #67	; 0x43
   27dfe:	18fb      	adds	r3, r7, r3
   27e00:	781b      	ldrb	r3, [r3, #0]
   27e02:	2b00      	cmp	r3, #0
   27e04:	d13d      	bne.n	27e82 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27e06:	2358      	movs	r3, #88	; 0x58
   27e08:	2240      	movs	r2, #64	; 0x40
   27e0a:	4694      	mov	ip, r2
   27e0c:	44bc      	add	ip, r7
   27e0e:	4463      	add	r3, ip
   27e10:	781b      	ldrb	r3, [r3, #0]
   27e12:	b2db      	uxtb	r3, r3
   27e14:	613b      	str	r3, [r7, #16]
   27e16:	2300      	movs	r3, #0
   27e18:	617b      	str	r3, [r7, #20]
   27e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27e1c:	60bb      	str	r3, [r7, #8]
   27e1e:	2300      	movs	r3, #0
   27e20:	60fb      	str	r3, [r7, #12]
   27e22:	4c52      	ldr	r4, [pc, #328]	; (27f6c <_sercom_get_async_baud_val+0x1b8>)
   27e24:	68ba      	ldr	r2, [r7, #8]
   27e26:	68fb      	ldr	r3, [r7, #12]
   27e28:	6938      	ldr	r0, [r7, #16]
   27e2a:	6979      	ldr	r1, [r7, #20]
   27e2c:	47a0      	blx	r4
   27e2e:	0003      	movs	r3, r0
   27e30:	000c      	movs	r4, r1
   27e32:	001b      	movs	r3, r3
   27e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   27e36:	2300      	movs	r3, #0
   27e38:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e3c:	603b      	str	r3, [r7, #0]
   27e3e:	2300      	movs	r3, #0
   27e40:	607b      	str	r3, [r7, #4]
   27e42:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27e44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27e46:	683a      	ldr	r2, [r7, #0]
   27e48:	687b      	ldr	r3, [r7, #4]
   27e4a:	4c49      	ldr	r4, [pc, #292]	; (27f70 <_sercom_get_async_baud_val+0x1bc>)
   27e4c:	47a0      	blx	r4
   27e4e:	0003      	movs	r3, r0
   27e50:	000c      	movs	r4, r1
   27e52:	673b      	str	r3, [r7, #112]	; 0x70
   27e54:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27e56:	2100      	movs	r1, #0
   27e58:	2201      	movs	r2, #1
   27e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27e5c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27e5e:	1ac9      	subs	r1, r1, r3
   27e60:	41a2      	sbcs	r2, r4
   27e62:	000b      	movs	r3, r1
   27e64:	0014      	movs	r4, r2
   27e66:	66bb      	str	r3, [r7, #104]	; 0x68
   27e68:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27e6c:	0c1b      	lsrs	r3, r3, #16
   27e6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27e70:	0416      	lsls	r6, r2, #16
   27e72:	431e      	orrs	r6, r3
   27e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27e76:	041d      	lsls	r5, r3, #16
   27e78:	0033      	movs	r3, r6
   27e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   27e7c:	2300      	movs	r3, #0
   27e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27e80:	e06a      	b.n	27f58 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27e82:	2343      	movs	r3, #67	; 0x43
   27e84:	18fb      	adds	r3, r7, r3
   27e86:	781b      	ldrb	r3, [r3, #0]
   27e88:	2b01      	cmp	r3, #1
   27e8a:	d165      	bne.n	27f58 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27e8e:	633b      	str	r3, [r7, #48]	; 0x30
   27e90:	2300      	movs	r3, #0
   27e92:	637b      	str	r3, [r7, #52]	; 0x34
   27e94:	2358      	movs	r3, #88	; 0x58
   27e96:	2240      	movs	r2, #64	; 0x40
   27e98:	4694      	mov	ip, r2
   27e9a:	44bc      	add	ip, r7
   27e9c:	4463      	add	r3, ip
   27e9e:	781b      	ldrb	r3, [r3, #0]
   27ea0:	b2db      	uxtb	r3, r3
   27ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   27ea4:	2300      	movs	r3, #0
   27ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ea8:	4c30      	ldr	r4, [pc, #192]	; (27f6c <_sercom_get_async_baud_val+0x1b8>)
   27eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27eb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27eb2:	47a0      	blx	r4
   27eb4:	0003      	movs	r3, r0
   27eb6:	000c      	movs	r4, r1
   27eb8:	65bb      	str	r3, [r7, #88]	; 0x58
   27eba:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27ebe:	623b      	str	r3, [r7, #32]
   27ec0:	2300      	movs	r3, #0
   27ec2:	627b      	str	r3, [r7, #36]	; 0x24
   27ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27ec6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27ec8:	001a      	movs	r2, r3
   27eca:	0023      	movs	r3, r4
   27ecc:	6a38      	ldr	r0, [r7, #32]
   27ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27ed0:	4c27      	ldr	r4, [pc, #156]	; (27f70 <_sercom_get_async_baud_val+0x1bc>)
   27ed2:	47a0      	blx	r4
   27ed4:	0003      	movs	r3, r0
   27ed6:	000c      	movs	r4, r1
   27ed8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27eda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27edc:	2380      	movs	r3, #128	; 0x80
   27ede:	019b      	lsls	r3, r3, #6
   27ee0:	429a      	cmp	r2, r3
   27ee2:	d901      	bls.n	27ee8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27ee4:	2340      	movs	r3, #64	; 0x40
   27ee6:	e03d      	b.n	27f64 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27eea:	61bb      	str	r3, [r7, #24]
   27eec:	2300      	movs	r3, #0
   27eee:	61fb      	str	r3, [r7, #28]
   27ef0:	69b9      	ldr	r1, [r7, #24]
   27ef2:	69fa      	ldr	r2, [r7, #28]
   27ef4:	000b      	movs	r3, r1
   27ef6:	0f5b      	lsrs	r3, r3, #29
   27ef8:	0010      	movs	r0, r2
   27efa:	00c0      	lsls	r0, r0, #3
   27efc:	63f8      	str	r0, [r7, #60]	; 0x3c
   27efe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27f00:	4318      	orrs	r0, r3
   27f02:	63f8      	str	r0, [r7, #60]	; 0x3c
   27f04:	000b      	movs	r3, r1
   27f06:	00db      	lsls	r3, r3, #3
   27f08:	63bb      	str	r3, [r7, #56]	; 0x38
   27f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27f0c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27f0e:	001a      	movs	r2, r3
   27f10:	0023      	movs	r3, r4
   27f12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27f16:	4c16      	ldr	r4, [pc, #88]	; (27f70 <_sercom_get_async_baud_val+0x1bc>)
   27f18:	47a0      	blx	r4
   27f1a:	0003      	movs	r3, r0
   27f1c:	000c      	movs	r4, r1
   27f1e:	65bb      	str	r3, [r7, #88]	; 0x58
   27f20:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27f24:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27f26:	b2d9      	uxtb	r1, r3
   27f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27f2a:	b2db      	uxtb	r3, r3
   27f2c:	00db      	lsls	r3, r3, #3
   27f2e:	b2da      	uxtb	r2, r3
   27f30:	2317      	movs	r3, #23
   27f32:	2040      	movs	r0, #64	; 0x40
   27f34:	4684      	mov	ip, r0
   27f36:	44bc      	add	ip, r7
   27f38:	4463      	add	r3, ip
   27f3a:	1a8a      	subs	r2, r1, r2
   27f3c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27f3e:	2317      	movs	r3, #23
   27f40:	2240      	movs	r2, #64	; 0x40
   27f42:	4694      	mov	ip, r2
   27f44:	44bc      	add	ip, r7
   27f46:	4463      	add	r3, ip
   27f48:	781b      	ldrb	r3, [r3, #0]
   27f4a:	035b      	lsls	r3, r3, #13
   27f4c:	001a      	movs	r2, r3
   27f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27f50:	4313      	orrs	r3, r2
   27f52:	67bb      	str	r3, [r7, #120]	; 0x78
   27f54:	2300      	movs	r3, #0
   27f56:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27f5a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27f5c:	b29a      	uxth	r2, r3
   27f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27f60:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27f62:	2300      	movs	r3, #0
}
   27f64:	0018      	movs	r0, r3
   27f66:	46bd      	mov	sp, r7
   27f68:	b021      	add	sp, #132	; 0x84
   27f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27f6c:	00033a01 	.word	0x00033a01
   27f70:	00027c57 	.word	0x00027c57

00027f74 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27f74:	b580      	push	{r7, lr}
   27f76:	b084      	sub	sp, #16
   27f78:	af00      	add	r7, sp, #0
   27f7a:	0002      	movs	r2, r0
   27f7c:	1dfb      	adds	r3, r7, #7
   27f7e:	701a      	strb	r2, [r3, #0]
   27f80:	1dbb      	adds	r3, r7, #6
   27f82:	1c0a      	adds	r2, r1, #0
   27f84:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27f86:	4b1a      	ldr	r3, [pc, #104]	; (27ff0 <sercom_set_gclk_generator+0x7c>)
   27f88:	781b      	ldrb	r3, [r3, #0]
   27f8a:	2201      	movs	r2, #1
   27f8c:	4053      	eors	r3, r2
   27f8e:	b2db      	uxtb	r3, r3
   27f90:	2b00      	cmp	r3, #0
   27f92:	d103      	bne.n	27f9c <sercom_set_gclk_generator+0x28>
   27f94:	1dbb      	adds	r3, r7, #6
   27f96:	781b      	ldrb	r3, [r3, #0]
   27f98:	2b00      	cmp	r3, #0
   27f9a:	d01b      	beq.n	27fd4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27f9c:	230c      	movs	r3, #12
   27f9e:	18fb      	adds	r3, r7, r3
   27fa0:	0018      	movs	r0, r3
   27fa2:	4b14      	ldr	r3, [pc, #80]	; (27ff4 <sercom_set_gclk_generator+0x80>)
   27fa4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27fa6:	230c      	movs	r3, #12
   27fa8:	18fb      	adds	r3, r7, r3
   27faa:	1dfa      	adds	r2, r7, #7
   27fac:	7812      	ldrb	r2, [r2, #0]
   27fae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27fb0:	230c      	movs	r3, #12
   27fb2:	18fb      	adds	r3, r7, r3
   27fb4:	0019      	movs	r1, r3
   27fb6:	2013      	movs	r0, #19
   27fb8:	4b0f      	ldr	r3, [pc, #60]	; (27ff8 <sercom_set_gclk_generator+0x84>)
   27fba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27fbc:	2013      	movs	r0, #19
   27fbe:	4b0f      	ldr	r3, [pc, #60]	; (27ffc <sercom_set_gclk_generator+0x88>)
   27fc0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27fc2:	4b0b      	ldr	r3, [pc, #44]	; (27ff0 <sercom_set_gclk_generator+0x7c>)
   27fc4:	1dfa      	adds	r2, r7, #7
   27fc6:	7812      	ldrb	r2, [r2, #0]
   27fc8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27fca:	4b09      	ldr	r3, [pc, #36]	; (27ff0 <sercom_set_gclk_generator+0x7c>)
   27fcc:	2201      	movs	r2, #1
   27fce:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27fd0:	2300      	movs	r3, #0
   27fd2:	e008      	b.n	27fe6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27fd4:	4b06      	ldr	r3, [pc, #24]	; (27ff0 <sercom_set_gclk_generator+0x7c>)
   27fd6:	785b      	ldrb	r3, [r3, #1]
   27fd8:	1dfa      	adds	r2, r7, #7
   27fda:	7812      	ldrb	r2, [r2, #0]
   27fdc:	429a      	cmp	r2, r3
   27fde:	d101      	bne.n	27fe4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27fe0:	2300      	movs	r3, #0
   27fe2:	e000      	b.n	27fe6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27fe4:	231d      	movs	r3, #29
}
   27fe6:	0018      	movs	r0, r3
   27fe8:	46bd      	mov	sp, r7
   27fea:	b004      	add	sp, #16
   27fec:	bd80      	pop	{r7, pc}
   27fee:	46c0      	nop			; (mov r8, r8)
   27ff0:	200042c4 	.word	0x200042c4
   27ff4:	00027c41 	.word	0x00027c41
   27ff8:	0002aa4d 	.word	0x0002aa4d
   27ffc:	0002aa91 	.word	0x0002aa91

00028000 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   28000:	b580      	push	{r7, lr}
   28002:	b082      	sub	sp, #8
   28004:	af00      	add	r7, sp, #0
   28006:	6078      	str	r0, [r7, #4]
   28008:	000a      	movs	r2, r1
   2800a:	1cfb      	adds	r3, r7, #3
   2800c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2800e:	687b      	ldr	r3, [r7, #4]
   28010:	4a4d      	ldr	r2, [pc, #308]	; (28148 <_sercom_get_default_pad+0x148>)
   28012:	4293      	cmp	r3, r2
   28014:	d03f      	beq.n	28096 <_sercom_get_default_pad+0x96>
   28016:	4a4c      	ldr	r2, [pc, #304]	; (28148 <_sercom_get_default_pad+0x148>)
   28018:	4293      	cmp	r3, r2
   2801a:	d806      	bhi.n	2802a <_sercom_get_default_pad+0x2a>
   2801c:	4a4b      	ldr	r2, [pc, #300]	; (2814c <_sercom_get_default_pad+0x14c>)
   2801e:	4293      	cmp	r3, r2
   28020:	d00f      	beq.n	28042 <_sercom_get_default_pad+0x42>
   28022:	4a4b      	ldr	r2, [pc, #300]	; (28150 <_sercom_get_default_pad+0x150>)
   28024:	4293      	cmp	r3, r2
   28026:	d021      	beq.n	2806c <_sercom_get_default_pad+0x6c>
   28028:	e089      	b.n	2813e <_sercom_get_default_pad+0x13e>
   2802a:	4a4a      	ldr	r2, [pc, #296]	; (28154 <_sercom_get_default_pad+0x154>)
   2802c:	4293      	cmp	r3, r2
   2802e:	d100      	bne.n	28032 <_sercom_get_default_pad+0x32>
   28030:	e05b      	b.n	280ea <_sercom_get_default_pad+0xea>
   28032:	4a49      	ldr	r2, [pc, #292]	; (28158 <_sercom_get_default_pad+0x158>)
   28034:	4293      	cmp	r3, r2
   28036:	d100      	bne.n	2803a <_sercom_get_default_pad+0x3a>
   28038:	e06c      	b.n	28114 <_sercom_get_default_pad+0x114>
   2803a:	4a48      	ldr	r2, [pc, #288]	; (2815c <_sercom_get_default_pad+0x15c>)
   2803c:	4293      	cmp	r3, r2
   2803e:	d03f      	beq.n	280c0 <_sercom_get_default_pad+0xc0>
   28040:	e07d      	b.n	2813e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   28042:	1cfb      	adds	r3, r7, #3
   28044:	781b      	ldrb	r3, [r3, #0]
   28046:	2b01      	cmp	r3, #1
   28048:	d00a      	beq.n	28060 <_sercom_get_default_pad+0x60>
   2804a:	dc02      	bgt.n	28052 <_sercom_get_default_pad+0x52>
   2804c:	2b00      	cmp	r3, #0
   2804e:	d005      	beq.n	2805c <_sercom_get_default_pad+0x5c>
   28050:	e075      	b.n	2813e <_sercom_get_default_pad+0x13e>
   28052:	2b02      	cmp	r3, #2
   28054:	d006      	beq.n	28064 <_sercom_get_default_pad+0x64>
   28056:	2b03      	cmp	r3, #3
   28058:	d006      	beq.n	28068 <_sercom_get_default_pad+0x68>
   2805a:	e070      	b.n	2813e <_sercom_get_default_pad+0x13e>
   2805c:	4b40      	ldr	r3, [pc, #256]	; (28160 <_sercom_get_default_pad+0x160>)
   2805e:	e06f      	b.n	28140 <_sercom_get_default_pad+0x140>
   28060:	4b40      	ldr	r3, [pc, #256]	; (28164 <_sercom_get_default_pad+0x164>)
   28062:	e06d      	b.n	28140 <_sercom_get_default_pad+0x140>
   28064:	4b40      	ldr	r3, [pc, #256]	; (28168 <_sercom_get_default_pad+0x168>)
   28066:	e06b      	b.n	28140 <_sercom_get_default_pad+0x140>
   28068:	4b40      	ldr	r3, [pc, #256]	; (2816c <_sercom_get_default_pad+0x16c>)
   2806a:	e069      	b.n	28140 <_sercom_get_default_pad+0x140>
   2806c:	1cfb      	adds	r3, r7, #3
   2806e:	781b      	ldrb	r3, [r3, #0]
   28070:	2b01      	cmp	r3, #1
   28072:	d00a      	beq.n	2808a <_sercom_get_default_pad+0x8a>
   28074:	dc02      	bgt.n	2807c <_sercom_get_default_pad+0x7c>
   28076:	2b00      	cmp	r3, #0
   28078:	d005      	beq.n	28086 <_sercom_get_default_pad+0x86>
   2807a:	e060      	b.n	2813e <_sercom_get_default_pad+0x13e>
   2807c:	2b02      	cmp	r3, #2
   2807e:	d006      	beq.n	2808e <_sercom_get_default_pad+0x8e>
   28080:	2b03      	cmp	r3, #3
   28082:	d006      	beq.n	28092 <_sercom_get_default_pad+0x92>
   28084:	e05b      	b.n	2813e <_sercom_get_default_pad+0x13e>
   28086:	2303      	movs	r3, #3
   28088:	e05a      	b.n	28140 <_sercom_get_default_pad+0x140>
   2808a:	4b39      	ldr	r3, [pc, #228]	; (28170 <_sercom_get_default_pad+0x170>)
   2808c:	e058      	b.n	28140 <_sercom_get_default_pad+0x140>
   2808e:	4b39      	ldr	r3, [pc, #228]	; (28174 <_sercom_get_default_pad+0x174>)
   28090:	e056      	b.n	28140 <_sercom_get_default_pad+0x140>
   28092:	4b39      	ldr	r3, [pc, #228]	; (28178 <_sercom_get_default_pad+0x178>)
   28094:	e054      	b.n	28140 <_sercom_get_default_pad+0x140>
   28096:	1cfb      	adds	r3, r7, #3
   28098:	781b      	ldrb	r3, [r3, #0]
   2809a:	2b01      	cmp	r3, #1
   2809c:	d00a      	beq.n	280b4 <_sercom_get_default_pad+0xb4>
   2809e:	dc02      	bgt.n	280a6 <_sercom_get_default_pad+0xa6>
   280a0:	2b00      	cmp	r3, #0
   280a2:	d005      	beq.n	280b0 <_sercom_get_default_pad+0xb0>
   280a4:	e04b      	b.n	2813e <_sercom_get_default_pad+0x13e>
   280a6:	2b02      	cmp	r3, #2
   280a8:	d006      	beq.n	280b8 <_sercom_get_default_pad+0xb8>
   280aa:	2b03      	cmp	r3, #3
   280ac:	d006      	beq.n	280bc <_sercom_get_default_pad+0xbc>
   280ae:	e046      	b.n	2813e <_sercom_get_default_pad+0x13e>
   280b0:	4b32      	ldr	r3, [pc, #200]	; (2817c <_sercom_get_default_pad+0x17c>)
   280b2:	e045      	b.n	28140 <_sercom_get_default_pad+0x140>
   280b4:	4b32      	ldr	r3, [pc, #200]	; (28180 <_sercom_get_default_pad+0x180>)
   280b6:	e043      	b.n	28140 <_sercom_get_default_pad+0x140>
   280b8:	4b32      	ldr	r3, [pc, #200]	; (28184 <_sercom_get_default_pad+0x184>)
   280ba:	e041      	b.n	28140 <_sercom_get_default_pad+0x140>
   280bc:	4b32      	ldr	r3, [pc, #200]	; (28188 <_sercom_get_default_pad+0x188>)
   280be:	e03f      	b.n	28140 <_sercom_get_default_pad+0x140>
   280c0:	1cfb      	adds	r3, r7, #3
   280c2:	781b      	ldrb	r3, [r3, #0]
   280c4:	2b01      	cmp	r3, #1
   280c6:	d00a      	beq.n	280de <_sercom_get_default_pad+0xde>
   280c8:	dc02      	bgt.n	280d0 <_sercom_get_default_pad+0xd0>
   280ca:	2b00      	cmp	r3, #0
   280cc:	d005      	beq.n	280da <_sercom_get_default_pad+0xda>
   280ce:	e036      	b.n	2813e <_sercom_get_default_pad+0x13e>
   280d0:	2b02      	cmp	r3, #2
   280d2:	d006      	beq.n	280e2 <_sercom_get_default_pad+0xe2>
   280d4:	2b03      	cmp	r3, #3
   280d6:	d006      	beq.n	280e6 <_sercom_get_default_pad+0xe6>
   280d8:	e031      	b.n	2813e <_sercom_get_default_pad+0x13e>
   280da:	4b2c      	ldr	r3, [pc, #176]	; (2818c <_sercom_get_default_pad+0x18c>)
   280dc:	e030      	b.n	28140 <_sercom_get_default_pad+0x140>
   280de:	4b2c      	ldr	r3, [pc, #176]	; (28190 <_sercom_get_default_pad+0x190>)
   280e0:	e02e      	b.n	28140 <_sercom_get_default_pad+0x140>
   280e2:	4b2c      	ldr	r3, [pc, #176]	; (28194 <_sercom_get_default_pad+0x194>)
   280e4:	e02c      	b.n	28140 <_sercom_get_default_pad+0x140>
   280e6:	4b2c      	ldr	r3, [pc, #176]	; (28198 <_sercom_get_default_pad+0x198>)
   280e8:	e02a      	b.n	28140 <_sercom_get_default_pad+0x140>
   280ea:	1cfb      	adds	r3, r7, #3
   280ec:	781b      	ldrb	r3, [r3, #0]
   280ee:	2b01      	cmp	r3, #1
   280f0:	d00a      	beq.n	28108 <_sercom_get_default_pad+0x108>
   280f2:	dc02      	bgt.n	280fa <_sercom_get_default_pad+0xfa>
   280f4:	2b00      	cmp	r3, #0
   280f6:	d005      	beq.n	28104 <_sercom_get_default_pad+0x104>
   280f8:	e021      	b.n	2813e <_sercom_get_default_pad+0x13e>
   280fa:	2b02      	cmp	r3, #2
   280fc:	d006      	beq.n	2810c <_sercom_get_default_pad+0x10c>
   280fe:	2b03      	cmp	r3, #3
   28100:	d006      	beq.n	28110 <_sercom_get_default_pad+0x110>
   28102:	e01c      	b.n	2813e <_sercom_get_default_pad+0x13e>
   28104:	4b25      	ldr	r3, [pc, #148]	; (2819c <_sercom_get_default_pad+0x19c>)
   28106:	e01b      	b.n	28140 <_sercom_get_default_pad+0x140>
   28108:	4b25      	ldr	r3, [pc, #148]	; (281a0 <_sercom_get_default_pad+0x1a0>)
   2810a:	e019      	b.n	28140 <_sercom_get_default_pad+0x140>
   2810c:	4b25      	ldr	r3, [pc, #148]	; (281a4 <_sercom_get_default_pad+0x1a4>)
   2810e:	e017      	b.n	28140 <_sercom_get_default_pad+0x140>
   28110:	4b25      	ldr	r3, [pc, #148]	; (281a8 <_sercom_get_default_pad+0x1a8>)
   28112:	e015      	b.n	28140 <_sercom_get_default_pad+0x140>
   28114:	1cfb      	adds	r3, r7, #3
   28116:	781b      	ldrb	r3, [r3, #0]
   28118:	2b01      	cmp	r3, #1
   2811a:	d00a      	beq.n	28132 <_sercom_get_default_pad+0x132>
   2811c:	dc02      	bgt.n	28124 <_sercom_get_default_pad+0x124>
   2811e:	2b00      	cmp	r3, #0
   28120:	d005      	beq.n	2812e <_sercom_get_default_pad+0x12e>
   28122:	e00c      	b.n	2813e <_sercom_get_default_pad+0x13e>
   28124:	2b02      	cmp	r3, #2
   28126:	d006      	beq.n	28136 <_sercom_get_default_pad+0x136>
   28128:	2b03      	cmp	r3, #3
   2812a:	d006      	beq.n	2813a <_sercom_get_default_pad+0x13a>
   2812c:	e007      	b.n	2813e <_sercom_get_default_pad+0x13e>
   2812e:	4b1f      	ldr	r3, [pc, #124]	; (281ac <_sercom_get_default_pad+0x1ac>)
   28130:	e006      	b.n	28140 <_sercom_get_default_pad+0x140>
   28132:	4b1f      	ldr	r3, [pc, #124]	; (281b0 <_sercom_get_default_pad+0x1b0>)
   28134:	e004      	b.n	28140 <_sercom_get_default_pad+0x140>
   28136:	4b1f      	ldr	r3, [pc, #124]	; (281b4 <_sercom_get_default_pad+0x1b4>)
   28138:	e002      	b.n	28140 <_sercom_get_default_pad+0x140>
   2813a:	4b1f      	ldr	r3, [pc, #124]	; (281b8 <_sercom_get_default_pad+0x1b8>)
   2813c:	e000      	b.n	28140 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2813e:	2300      	movs	r3, #0
}
   28140:	0018      	movs	r0, r3
   28142:	46bd      	mov	sp, r7
   28144:	b002      	add	sp, #8
   28146:	bd80      	pop	{r7, pc}
   28148:	42001000 	.word	0x42001000
   2814c:	42000800 	.word	0x42000800
   28150:	42000c00 	.word	0x42000c00
   28154:	42001800 	.word	0x42001800
   28158:	42001c00 	.word	0x42001c00
   2815c:	42001400 	.word	0x42001400
   28160:	00040003 	.word	0x00040003
   28164:	00050003 	.word	0x00050003
   28168:	00060003 	.word	0x00060003
   2816c:	00070003 	.word	0x00070003
   28170:	00010003 	.word	0x00010003
   28174:	001e0003 	.word	0x001e0003
   28178:	001f0003 	.word	0x001f0003
   2817c:	00080003 	.word	0x00080003
   28180:	00090003 	.word	0x00090003
   28184:	000a0003 	.word	0x000a0003
   28188:	000b0003 	.word	0x000b0003
   2818c:	00100003 	.word	0x00100003
   28190:	00110003 	.word	0x00110003
   28194:	00120003 	.word	0x00120003
   28198:	00130003 	.word	0x00130003
   2819c:	000c0003 	.word	0x000c0003
   281a0:	000d0003 	.word	0x000d0003
   281a4:	000e0003 	.word	0x000e0003
   281a8:	000f0003 	.word	0x000f0003
   281ac:	00160003 	.word	0x00160003
   281b0:	00170003 	.word	0x00170003
   281b4:	00180003 	.word	0x00180003
   281b8:	00190003 	.word	0x00190003

000281bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   281bc:	b590      	push	{r4, r7, lr}
   281be:	b08b      	sub	sp, #44	; 0x2c
   281c0:	af00      	add	r7, sp, #0
   281c2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   281c4:	230c      	movs	r3, #12
   281c6:	18fb      	adds	r3, r7, r3
   281c8:	4a0f      	ldr	r2, [pc, #60]	; (28208 <_sercom_get_sercom_inst_index+0x4c>)
   281ca:	ca13      	ldmia	r2!, {r0, r1, r4}
   281cc:	c313      	stmia	r3!, {r0, r1, r4}
   281ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   281d0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   281d2:	2300      	movs	r3, #0
   281d4:	627b      	str	r3, [r7, #36]	; 0x24
   281d6:	e00e      	b.n	281f6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   281d8:	230c      	movs	r3, #12
   281da:	18fb      	adds	r3, r7, r3
   281dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   281de:	0092      	lsls	r2, r2, #2
   281e0:	58d3      	ldr	r3, [r2, r3]
   281e2:	001a      	movs	r2, r3
   281e4:	687b      	ldr	r3, [r7, #4]
   281e6:	429a      	cmp	r2, r3
   281e8:	d102      	bne.n	281f0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   281ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   281ec:	b2db      	uxtb	r3, r3
   281ee:	e006      	b.n	281fe <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   281f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   281f2:	3301      	adds	r3, #1
   281f4:	627b      	str	r3, [r7, #36]	; 0x24
   281f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   281f8:	2b05      	cmp	r3, #5
   281fa:	d9ed      	bls.n	281d8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   281fc:	2300      	movs	r3, #0
}
   281fe:	0018      	movs	r0, r3
   28200:	46bd      	mov	sp, r7
   28202:	b00b      	add	sp, #44	; 0x2c
   28204:	bd90      	pop	{r4, r7, pc}
   28206:	46c0      	nop			; (mov r8, r8)
   28208:	0003a580 	.word	0x0003a580

0002820c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2820c:	b580      	push	{r7, lr}
   2820e:	b082      	sub	sp, #8
   28210:	af00      	add	r7, sp, #0
   28212:	0002      	movs	r2, r0
   28214:	1dfb      	adds	r3, r7, #7
   28216:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   28218:	46c0      	nop			; (mov r8, r8)
   2821a:	46bd      	mov	sp, r7
   2821c:	b002      	add	sp, #8
   2821e:	bd80      	pop	{r7, pc}

00028220 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   28220:	b580      	push	{r7, lr}
   28222:	b084      	sub	sp, #16
   28224:	af00      	add	r7, sp, #0
   28226:	0002      	movs	r2, r0
   28228:	6039      	str	r1, [r7, #0]
   2822a:	1dfb      	adds	r3, r7, #7
   2822c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2822e:	4b13      	ldr	r3, [pc, #76]	; (2827c <_sercom_set_handler+0x5c>)
   28230:	781b      	ldrb	r3, [r3, #0]
   28232:	2201      	movs	r2, #1
   28234:	4053      	eors	r3, r2
   28236:	b2db      	uxtb	r3, r3
   28238:	2b00      	cmp	r3, #0
   2823a:	d015      	beq.n	28268 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2823c:	2300      	movs	r3, #0
   2823e:	60fb      	str	r3, [r7, #12]
   28240:	e00c      	b.n	2825c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   28242:	4b0f      	ldr	r3, [pc, #60]	; (28280 <_sercom_set_handler+0x60>)
   28244:	68fa      	ldr	r2, [r7, #12]
   28246:	0092      	lsls	r2, r2, #2
   28248:	490e      	ldr	r1, [pc, #56]	; (28284 <_sercom_set_handler+0x64>)
   2824a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2824c:	4b0e      	ldr	r3, [pc, #56]	; (28288 <_sercom_set_handler+0x68>)
   2824e:	68fa      	ldr	r2, [r7, #12]
   28250:	0092      	lsls	r2, r2, #2
   28252:	2100      	movs	r1, #0
   28254:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28256:	68fb      	ldr	r3, [r7, #12]
   28258:	3301      	adds	r3, #1
   2825a:	60fb      	str	r3, [r7, #12]
   2825c:	68fb      	ldr	r3, [r7, #12]
   2825e:	2b05      	cmp	r3, #5
   28260:	d9ef      	bls.n	28242 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   28262:	4b06      	ldr	r3, [pc, #24]	; (2827c <_sercom_set_handler+0x5c>)
   28264:	2201      	movs	r2, #1
   28266:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   28268:	1dfb      	adds	r3, r7, #7
   2826a:	781a      	ldrb	r2, [r3, #0]
   2826c:	4b04      	ldr	r3, [pc, #16]	; (28280 <_sercom_set_handler+0x60>)
   2826e:	0092      	lsls	r2, r2, #2
   28270:	6839      	ldr	r1, [r7, #0]
   28272:	50d1      	str	r1, [r2, r3]
}
   28274:	46c0      	nop			; (mov r8, r8)
   28276:	46bd      	mov	sp, r7
   28278:	b004      	add	sp, #16
   2827a:	bd80      	pop	{r7, pc}
   2827c:	200042c6 	.word	0x200042c6
   28280:	200042c8 	.word	0x200042c8
   28284:	0002820d 	.word	0x0002820d
   28288:	20005c9c 	.word	0x20005c9c

0002828c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2828c:	b590      	push	{r4, r7, lr}
   2828e:	b085      	sub	sp, #20
   28290:	af00      	add	r7, sp, #0
   28292:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   28294:	2308      	movs	r3, #8
   28296:	18fb      	adds	r3, r7, r3
   28298:	4a0b      	ldr	r2, [pc, #44]	; (282c8 <_sercom_get_interrupt_vector+0x3c>)
   2829a:	6811      	ldr	r1, [r2, #0]
   2829c:	6019      	str	r1, [r3, #0]
   2829e:	8892      	ldrh	r2, [r2, #4]
   282a0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   282a2:	230f      	movs	r3, #15
   282a4:	18fc      	adds	r4, r7, r3
   282a6:	687b      	ldr	r3, [r7, #4]
   282a8:	0018      	movs	r0, r3
   282aa:	4b08      	ldr	r3, [pc, #32]	; (282cc <_sercom_get_interrupt_vector+0x40>)
   282ac:	4798      	blx	r3
   282ae:	0003      	movs	r3, r0
   282b0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   282b2:	230f      	movs	r3, #15
   282b4:	18fb      	adds	r3, r7, r3
   282b6:	781b      	ldrb	r3, [r3, #0]
   282b8:	2208      	movs	r2, #8
   282ba:	18ba      	adds	r2, r7, r2
   282bc:	5cd3      	ldrb	r3, [r2, r3]
   282be:	b25b      	sxtb	r3, r3
}
   282c0:	0018      	movs	r0, r3
   282c2:	46bd      	mov	sp, r7
   282c4:	b005      	add	sp, #20
   282c6:	bd90      	pop	{r4, r7, pc}
   282c8:	0003a598 	.word	0x0003a598
   282cc:	000281bd 	.word	0x000281bd

000282d0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   282d0:	b580      	push	{r7, lr}
   282d2:	af00      	add	r7, sp, #0
   282d4:	4b03      	ldr	r3, [pc, #12]	; (282e4 <SERCOM0_Handler+0x14>)
   282d6:	681b      	ldr	r3, [r3, #0]
   282d8:	2000      	movs	r0, #0
   282da:	4798      	blx	r3
   282dc:	46c0      	nop			; (mov r8, r8)
   282de:	46bd      	mov	sp, r7
   282e0:	bd80      	pop	{r7, pc}
   282e2:	46c0      	nop			; (mov r8, r8)
   282e4:	200042c8 	.word	0x200042c8

000282e8 <SERCOM1_Handler>:
   282e8:	b580      	push	{r7, lr}
   282ea:	af00      	add	r7, sp, #0
   282ec:	4b03      	ldr	r3, [pc, #12]	; (282fc <SERCOM1_Handler+0x14>)
   282ee:	685b      	ldr	r3, [r3, #4]
   282f0:	2001      	movs	r0, #1
   282f2:	4798      	blx	r3
   282f4:	46c0      	nop			; (mov r8, r8)
   282f6:	46bd      	mov	sp, r7
   282f8:	bd80      	pop	{r7, pc}
   282fa:	46c0      	nop			; (mov r8, r8)
   282fc:	200042c8 	.word	0x200042c8

00028300 <SERCOM2_Handler>:
   28300:	b580      	push	{r7, lr}
   28302:	af00      	add	r7, sp, #0
   28304:	4b03      	ldr	r3, [pc, #12]	; (28314 <SERCOM2_Handler+0x14>)
   28306:	689b      	ldr	r3, [r3, #8]
   28308:	2002      	movs	r0, #2
   2830a:	4798      	blx	r3
   2830c:	46c0      	nop			; (mov r8, r8)
   2830e:	46bd      	mov	sp, r7
   28310:	bd80      	pop	{r7, pc}
   28312:	46c0      	nop			; (mov r8, r8)
   28314:	200042c8 	.word	0x200042c8

00028318 <SERCOM3_Handler>:
   28318:	b580      	push	{r7, lr}
   2831a:	af00      	add	r7, sp, #0
   2831c:	4b03      	ldr	r3, [pc, #12]	; (2832c <SERCOM3_Handler+0x14>)
   2831e:	68db      	ldr	r3, [r3, #12]
   28320:	2003      	movs	r0, #3
   28322:	4798      	blx	r3
   28324:	46c0      	nop			; (mov r8, r8)
   28326:	46bd      	mov	sp, r7
   28328:	bd80      	pop	{r7, pc}
   2832a:	46c0      	nop			; (mov r8, r8)
   2832c:	200042c8 	.word	0x200042c8

00028330 <SERCOM4_Handler>:
   28330:	b580      	push	{r7, lr}
   28332:	af00      	add	r7, sp, #0
   28334:	4b03      	ldr	r3, [pc, #12]	; (28344 <SERCOM4_Handler+0x14>)
   28336:	691b      	ldr	r3, [r3, #16]
   28338:	2004      	movs	r0, #4
   2833a:	4798      	blx	r3
   2833c:	46c0      	nop			; (mov r8, r8)
   2833e:	46bd      	mov	sp, r7
   28340:	bd80      	pop	{r7, pc}
   28342:	46c0      	nop			; (mov r8, r8)
   28344:	200042c8 	.word	0x200042c8

00028348 <SERCOM5_Handler>:
   28348:	b580      	push	{r7, lr}
   2834a:	af00      	add	r7, sp, #0
   2834c:	4b03      	ldr	r3, [pc, #12]	; (2835c <SERCOM5_Handler+0x14>)
   2834e:	695b      	ldr	r3, [r3, #20]
   28350:	2005      	movs	r0, #5
   28352:	4798      	blx	r3
   28354:	46c0      	nop			; (mov r8, r8)
   28356:	46bd      	mov	sp, r7
   28358:	bd80      	pop	{r7, pc}
   2835a:	46c0      	nop			; (mov r8, r8)
   2835c:	200042c8 	.word	0x200042c8

00028360 <system_pinmux_get_config_defaults>:
{
   28360:	b580      	push	{r7, lr}
   28362:	b082      	sub	sp, #8
   28364:	af00      	add	r7, sp, #0
   28366:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28368:	687b      	ldr	r3, [r7, #4]
   2836a:	2280      	movs	r2, #128	; 0x80
   2836c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2836e:	687b      	ldr	r3, [r7, #4]
   28370:	2200      	movs	r2, #0
   28372:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28374:	687b      	ldr	r3, [r7, #4]
   28376:	2201      	movs	r2, #1
   28378:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2837a:	687b      	ldr	r3, [r7, #4]
   2837c:	2200      	movs	r2, #0
   2837e:	70da      	strb	r2, [r3, #3]
}
   28380:	46c0      	nop			; (mov r8, r8)
   28382:	46bd      	mov	sp, r7
   28384:	b002      	add	sp, #8
   28386:	bd80      	pop	{r7, pc}

00028388 <system_pinmux_get_group_from_gpio_pin>:
{
   28388:	b580      	push	{r7, lr}
   2838a:	b084      	sub	sp, #16
   2838c:	af00      	add	r7, sp, #0
   2838e:	0002      	movs	r2, r0
   28390:	1dfb      	adds	r3, r7, #7
   28392:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28394:	230f      	movs	r3, #15
   28396:	18fb      	adds	r3, r7, r3
   28398:	1dfa      	adds	r2, r7, #7
   2839a:	7812      	ldrb	r2, [r2, #0]
   2839c:	09d2      	lsrs	r2, r2, #7
   2839e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   283a0:	230e      	movs	r3, #14
   283a2:	18fb      	adds	r3, r7, r3
   283a4:	1dfa      	adds	r2, r7, #7
   283a6:	7812      	ldrb	r2, [r2, #0]
   283a8:	0952      	lsrs	r2, r2, #5
   283aa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   283ac:	4b0d      	ldr	r3, [pc, #52]	; (283e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   283ae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   283b0:	230f      	movs	r3, #15
   283b2:	18fb      	adds	r3, r7, r3
   283b4:	781b      	ldrb	r3, [r3, #0]
   283b6:	2b00      	cmp	r3, #0
   283b8:	d10f      	bne.n	283da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   283ba:	230f      	movs	r3, #15
   283bc:	18fb      	adds	r3, r7, r3
   283be:	781b      	ldrb	r3, [r3, #0]
   283c0:	009b      	lsls	r3, r3, #2
   283c2:	2210      	movs	r2, #16
   283c4:	4694      	mov	ip, r2
   283c6:	44bc      	add	ip, r7
   283c8:	4463      	add	r3, ip
   283ca:	3b08      	subs	r3, #8
   283cc:	681a      	ldr	r2, [r3, #0]
   283ce:	230e      	movs	r3, #14
   283d0:	18fb      	adds	r3, r7, r3
   283d2:	781b      	ldrb	r3, [r3, #0]
   283d4:	01db      	lsls	r3, r3, #7
   283d6:	18d3      	adds	r3, r2, r3
   283d8:	e000      	b.n	283dc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   283da:	2300      	movs	r3, #0
}
   283dc:	0018      	movs	r0, r3
   283de:	46bd      	mov	sp, r7
   283e0:	b004      	add	sp, #16
   283e2:	bd80      	pop	{r7, pc}
   283e4:	41004400 	.word	0x41004400

000283e8 <port_get_group_from_gpio_pin>:
{
   283e8:	b580      	push	{r7, lr}
   283ea:	b082      	sub	sp, #8
   283ec:	af00      	add	r7, sp, #0
   283ee:	0002      	movs	r2, r0
   283f0:	1dfb      	adds	r3, r7, #7
   283f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   283f4:	1dfb      	adds	r3, r7, #7
   283f6:	781b      	ldrb	r3, [r3, #0]
   283f8:	0018      	movs	r0, r3
   283fa:	4b03      	ldr	r3, [pc, #12]	; (28408 <port_get_group_from_gpio_pin+0x20>)
   283fc:	4798      	blx	r3
   283fe:	0003      	movs	r3, r0
}
   28400:	0018      	movs	r0, r3
   28402:	46bd      	mov	sp, r7
   28404:	b002      	add	sp, #8
   28406:	bd80      	pop	{r7, pc}
   28408:	00028389 	.word	0x00028389

0002840c <port_pin_set_output_level>:
{
   2840c:	b580      	push	{r7, lr}
   2840e:	b084      	sub	sp, #16
   28410:	af00      	add	r7, sp, #0
   28412:	0002      	movs	r2, r0
   28414:	1dfb      	adds	r3, r7, #7
   28416:	701a      	strb	r2, [r3, #0]
   28418:	1dbb      	adds	r3, r7, #6
   2841a:	1c0a      	adds	r2, r1, #0
   2841c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2841e:	1dfb      	adds	r3, r7, #7
   28420:	781b      	ldrb	r3, [r3, #0]
   28422:	0018      	movs	r0, r3
   28424:	4b0d      	ldr	r3, [pc, #52]	; (2845c <port_pin_set_output_level+0x50>)
   28426:	4798      	blx	r3
   28428:	0003      	movs	r3, r0
   2842a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2842c:	1dfb      	adds	r3, r7, #7
   2842e:	781b      	ldrb	r3, [r3, #0]
   28430:	221f      	movs	r2, #31
   28432:	4013      	ands	r3, r2
   28434:	2201      	movs	r2, #1
   28436:	409a      	lsls	r2, r3
   28438:	0013      	movs	r3, r2
   2843a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2843c:	1dbb      	adds	r3, r7, #6
   2843e:	781b      	ldrb	r3, [r3, #0]
   28440:	2b00      	cmp	r3, #0
   28442:	d003      	beq.n	2844c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28444:	68fb      	ldr	r3, [r7, #12]
   28446:	68ba      	ldr	r2, [r7, #8]
   28448:	619a      	str	r2, [r3, #24]
}
   2844a:	e002      	b.n	28452 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2844c:	68fb      	ldr	r3, [r7, #12]
   2844e:	68ba      	ldr	r2, [r7, #8]
   28450:	615a      	str	r2, [r3, #20]
}
   28452:	46c0      	nop			; (mov r8, r8)
   28454:	46bd      	mov	sp, r7
   28456:	b004      	add	sp, #16
   28458:	bd80      	pop	{r7, pc}
   2845a:	46c0      	nop			; (mov r8, r8)
   2845c:	000283e9 	.word	0x000283e9

00028460 <system_gclk_chan_get_config_defaults>:
{
   28460:	b580      	push	{r7, lr}
   28462:	b082      	sub	sp, #8
   28464:	af00      	add	r7, sp, #0
   28466:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28468:	687b      	ldr	r3, [r7, #4]
   2846a:	2200      	movs	r2, #0
   2846c:	701a      	strb	r2, [r3, #0]
}
   2846e:	46c0      	nop			; (mov r8, r8)
   28470:	46bd      	mov	sp, r7
   28472:	b002      	add	sp, #8
   28474:	bd80      	pop	{r7, pc}
	...

00028478 <system_apb_clock_set_mask>:
{
   28478:	b580      	push	{r7, lr}
   2847a:	b082      	sub	sp, #8
   2847c:	af00      	add	r7, sp, #0
   2847e:	0002      	movs	r2, r0
   28480:	6039      	str	r1, [r7, #0]
   28482:	1dfb      	adds	r3, r7, #7
   28484:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28486:	1dfb      	adds	r3, r7, #7
   28488:	781b      	ldrb	r3, [r3, #0]
   2848a:	2b01      	cmp	r3, #1
   2848c:	d00a      	beq.n	284a4 <system_apb_clock_set_mask+0x2c>
   2848e:	2b02      	cmp	r3, #2
   28490:	d00f      	beq.n	284b2 <system_apb_clock_set_mask+0x3a>
   28492:	2b00      	cmp	r3, #0
   28494:	d114      	bne.n	284c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28496:	4b0e      	ldr	r3, [pc, #56]	; (284d0 <system_apb_clock_set_mask+0x58>)
   28498:	4a0d      	ldr	r2, [pc, #52]	; (284d0 <system_apb_clock_set_mask+0x58>)
   2849a:	6991      	ldr	r1, [r2, #24]
   2849c:	683a      	ldr	r2, [r7, #0]
   2849e:	430a      	orrs	r2, r1
   284a0:	619a      	str	r2, [r3, #24]
			break;
   284a2:	e00f      	b.n	284c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   284a4:	4b0a      	ldr	r3, [pc, #40]	; (284d0 <system_apb_clock_set_mask+0x58>)
   284a6:	4a0a      	ldr	r2, [pc, #40]	; (284d0 <system_apb_clock_set_mask+0x58>)
   284a8:	69d1      	ldr	r1, [r2, #28]
   284aa:	683a      	ldr	r2, [r7, #0]
   284ac:	430a      	orrs	r2, r1
   284ae:	61da      	str	r2, [r3, #28]
			break;
   284b0:	e008      	b.n	284c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   284b2:	4b07      	ldr	r3, [pc, #28]	; (284d0 <system_apb_clock_set_mask+0x58>)
   284b4:	4a06      	ldr	r2, [pc, #24]	; (284d0 <system_apb_clock_set_mask+0x58>)
   284b6:	6a11      	ldr	r1, [r2, #32]
   284b8:	683a      	ldr	r2, [r7, #0]
   284ba:	430a      	orrs	r2, r1
   284bc:	621a      	str	r2, [r3, #32]
			break;
   284be:	e001      	b.n	284c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   284c0:	2317      	movs	r3, #23
   284c2:	e000      	b.n	284c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   284c4:	2300      	movs	r3, #0
}
   284c6:	0018      	movs	r0, r3
   284c8:	46bd      	mov	sp, r7
   284ca:	b002      	add	sp, #8
   284cc:	bd80      	pop	{r7, pc}
   284ce:	46c0      	nop			; (mov r8, r8)
   284d0:	40000400 	.word	0x40000400

000284d4 <system_is_debugger_present>:
{
   284d4:	b580      	push	{r7, lr}
   284d6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   284d8:	4b05      	ldr	r3, [pc, #20]	; (284f0 <system_is_debugger_present+0x1c>)
   284da:	789b      	ldrb	r3, [r3, #2]
   284dc:	b2db      	uxtb	r3, r3
   284de:	001a      	movs	r2, r3
   284e0:	2302      	movs	r3, #2
   284e2:	4013      	ands	r3, r2
   284e4:	1e5a      	subs	r2, r3, #1
   284e6:	4193      	sbcs	r3, r2
   284e8:	b2db      	uxtb	r3, r3
}
   284ea:	0018      	movs	r0, r3
   284ec:	46bd      	mov	sp, r7
   284ee:	bd80      	pop	{r7, pc}
   284f0:	41002000 	.word	0x41002000

000284f4 <system_interrupt_enable>:
{
   284f4:	b580      	push	{r7, lr}
   284f6:	b082      	sub	sp, #8
   284f8:	af00      	add	r7, sp, #0
   284fa:	0002      	movs	r2, r0
   284fc:	1dfb      	adds	r3, r7, #7
   284fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28500:	4b06      	ldr	r3, [pc, #24]	; (2851c <system_interrupt_enable+0x28>)
   28502:	1dfa      	adds	r2, r7, #7
   28504:	7812      	ldrb	r2, [r2, #0]
   28506:	0011      	movs	r1, r2
   28508:	221f      	movs	r2, #31
   2850a:	400a      	ands	r2, r1
   2850c:	2101      	movs	r1, #1
   2850e:	4091      	lsls	r1, r2
   28510:	000a      	movs	r2, r1
   28512:	601a      	str	r2, [r3, #0]
}
   28514:	46c0      	nop			; (mov r8, r8)
   28516:	46bd      	mov	sp, r7
   28518:	b002      	add	sp, #8
   2851a:	bd80      	pop	{r7, pc}
   2851c:	e000e100 	.word	0xe000e100

00028520 <system_interrupt_disable>:
{
   28520:	b580      	push	{r7, lr}
   28522:	b082      	sub	sp, #8
   28524:	af00      	add	r7, sp, #0
   28526:	0002      	movs	r2, r0
   28528:	1dfb      	adds	r3, r7, #7
   2852a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2852c:	4a07      	ldr	r2, [pc, #28]	; (2854c <system_interrupt_disable+0x2c>)
   2852e:	1dfb      	adds	r3, r7, #7
   28530:	781b      	ldrb	r3, [r3, #0]
   28532:	0019      	movs	r1, r3
   28534:	231f      	movs	r3, #31
   28536:	400b      	ands	r3, r1
   28538:	2101      	movs	r1, #1
   2853a:	4099      	lsls	r1, r3
   2853c:	000b      	movs	r3, r1
   2853e:	0019      	movs	r1, r3
   28540:	2380      	movs	r3, #128	; 0x80
   28542:	50d1      	str	r1, [r2, r3]
}
   28544:	46c0      	nop			; (mov r8, r8)
   28546:	46bd      	mov	sp, r7
   28548:	b002      	add	sp, #8
   2854a:	bd80      	pop	{r7, pc}
   2854c:	e000e100 	.word	0xe000e100

00028550 <spi_is_syncing>:
{
   28550:	b580      	push	{r7, lr}
   28552:	b084      	sub	sp, #16
   28554:	af00      	add	r7, sp, #0
   28556:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28558:	687b      	ldr	r3, [r7, #4]
   2855a:	681b      	ldr	r3, [r3, #0]
   2855c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2855e:	68fb      	ldr	r3, [r7, #12]
   28560:	69db      	ldr	r3, [r3, #28]
   28562:	1e5a      	subs	r2, r3, #1
   28564:	4193      	sbcs	r3, r2
   28566:	b2db      	uxtb	r3, r3
}
   28568:	0018      	movs	r0, r3
   2856a:	46bd      	mov	sp, r7
   2856c:	b004      	add	sp, #16
   2856e:	bd80      	pop	{r7, pc}

00028570 <spi_enable>:
{
   28570:	b580      	push	{r7, lr}
   28572:	b084      	sub	sp, #16
   28574:	af00      	add	r7, sp, #0
   28576:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28578:	687b      	ldr	r3, [r7, #4]
   2857a:	681b      	ldr	r3, [r3, #0]
   2857c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2857e:	687b      	ldr	r3, [r7, #4]
   28580:	681b      	ldr	r3, [r3, #0]
   28582:	0018      	movs	r0, r3
   28584:	4b0b      	ldr	r3, [pc, #44]	; (285b4 <spi_enable+0x44>)
   28586:	4798      	blx	r3
   28588:	0003      	movs	r3, r0
   2858a:	0018      	movs	r0, r3
   2858c:	4b0a      	ldr	r3, [pc, #40]	; (285b8 <spi_enable+0x48>)
   2858e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28590:	46c0      	nop			; (mov r8, r8)
   28592:	687b      	ldr	r3, [r7, #4]
   28594:	0018      	movs	r0, r3
   28596:	4b09      	ldr	r3, [pc, #36]	; (285bc <spi_enable+0x4c>)
   28598:	4798      	blx	r3
   2859a:	1e03      	subs	r3, r0, #0
   2859c:	d1f9      	bne.n	28592 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2859e:	68fb      	ldr	r3, [r7, #12]
   285a0:	681b      	ldr	r3, [r3, #0]
   285a2:	2202      	movs	r2, #2
   285a4:	431a      	orrs	r2, r3
   285a6:	68fb      	ldr	r3, [r7, #12]
   285a8:	601a      	str	r2, [r3, #0]
}
   285aa:	46c0      	nop			; (mov r8, r8)
   285ac:	46bd      	mov	sp, r7
   285ae:	b004      	add	sp, #16
   285b0:	bd80      	pop	{r7, pc}
   285b2:	46c0      	nop			; (mov r8, r8)
   285b4:	0002828d 	.word	0x0002828d
   285b8:	000284f5 	.word	0x000284f5
   285bc:	00028551 	.word	0x00028551

000285c0 <spi_disable>:
{
   285c0:	b580      	push	{r7, lr}
   285c2:	b084      	sub	sp, #16
   285c4:	af00      	add	r7, sp, #0
   285c6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285c8:	687b      	ldr	r3, [r7, #4]
   285ca:	681b      	ldr	r3, [r3, #0]
   285cc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   285ce:	687b      	ldr	r3, [r7, #4]
   285d0:	681b      	ldr	r3, [r3, #0]
   285d2:	0018      	movs	r0, r3
   285d4:	4b0e      	ldr	r3, [pc, #56]	; (28610 <spi_disable+0x50>)
   285d6:	4798      	blx	r3
   285d8:	0003      	movs	r3, r0
   285da:	0018      	movs	r0, r3
   285dc:	4b0d      	ldr	r3, [pc, #52]	; (28614 <spi_disable+0x54>)
   285de:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   285e0:	46c0      	nop			; (mov r8, r8)
   285e2:	687b      	ldr	r3, [r7, #4]
   285e4:	0018      	movs	r0, r3
   285e6:	4b0c      	ldr	r3, [pc, #48]	; (28618 <spi_disable+0x58>)
   285e8:	4798      	blx	r3
   285ea:	1e03      	subs	r3, r0, #0
   285ec:	d1f9      	bne.n	285e2 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   285ee:	68fb      	ldr	r3, [r7, #12]
   285f0:	228f      	movs	r2, #143	; 0x8f
   285f2:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   285f4:	68fb      	ldr	r3, [r7, #12]
   285f6:	228f      	movs	r2, #143	; 0x8f
   285f8:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   285fa:	68fb      	ldr	r3, [r7, #12]
   285fc:	681b      	ldr	r3, [r3, #0]
   285fe:	2202      	movs	r2, #2
   28600:	4393      	bics	r3, r2
   28602:	001a      	movs	r2, r3
   28604:	68fb      	ldr	r3, [r7, #12]
   28606:	601a      	str	r2, [r3, #0]
}
   28608:	46c0      	nop			; (mov r8, r8)
   2860a:	46bd      	mov	sp, r7
   2860c:	b004      	add	sp, #16
   2860e:	bd80      	pop	{r7, pc}
   28610:	0002828d 	.word	0x0002828d
   28614:	00028521 	.word	0x00028521
   28618:	00028551 	.word	0x00028551

0002861c <spi_is_write_complete>:
{
   2861c:	b580      	push	{r7, lr}
   2861e:	b084      	sub	sp, #16
   28620:	af00      	add	r7, sp, #0
   28622:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28624:	687b      	ldr	r3, [r7, #4]
   28626:	681b      	ldr	r3, [r3, #0]
   28628:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2862a:	68fb      	ldr	r3, [r7, #12]
   2862c:	7e1b      	ldrb	r3, [r3, #24]
   2862e:	b2db      	uxtb	r3, r3
   28630:	001a      	movs	r2, r3
   28632:	2302      	movs	r3, #2
   28634:	4013      	ands	r3, r2
   28636:	1e5a      	subs	r2, r3, #1
   28638:	4193      	sbcs	r3, r2
   2863a:	b2db      	uxtb	r3, r3
}
   2863c:	0018      	movs	r0, r3
   2863e:	46bd      	mov	sp, r7
   28640:	b004      	add	sp, #16
   28642:	bd80      	pop	{r7, pc}

00028644 <spi_is_ready_to_write>:
{
   28644:	b580      	push	{r7, lr}
   28646:	b084      	sub	sp, #16
   28648:	af00      	add	r7, sp, #0
   2864a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2864c:	687b      	ldr	r3, [r7, #4]
   2864e:	681b      	ldr	r3, [r3, #0]
   28650:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   28652:	68fb      	ldr	r3, [r7, #12]
   28654:	7e1b      	ldrb	r3, [r3, #24]
   28656:	b2db      	uxtb	r3, r3
   28658:	001a      	movs	r2, r3
   2865a:	2301      	movs	r3, #1
   2865c:	4013      	ands	r3, r2
   2865e:	1e5a      	subs	r2, r3, #1
   28660:	4193      	sbcs	r3, r2
   28662:	b2db      	uxtb	r3, r3
}
   28664:	0018      	movs	r0, r3
   28666:	46bd      	mov	sp, r7
   28668:	b004      	add	sp, #16
   2866a:	bd80      	pop	{r7, pc}

0002866c <spi_is_ready_to_read>:
{
   2866c:	b580      	push	{r7, lr}
   2866e:	b084      	sub	sp, #16
   28670:	af00      	add	r7, sp, #0
   28672:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28674:	687b      	ldr	r3, [r7, #4]
   28676:	681b      	ldr	r3, [r3, #0]
   28678:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2867a:	68fb      	ldr	r3, [r7, #12]
   2867c:	7e1b      	ldrb	r3, [r3, #24]
   2867e:	b2db      	uxtb	r3, r3
   28680:	001a      	movs	r2, r3
   28682:	2304      	movs	r3, #4
   28684:	4013      	ands	r3, r2
   28686:	1e5a      	subs	r2, r3, #1
   28688:	4193      	sbcs	r3, r2
   2868a:	b2db      	uxtb	r3, r3
}
   2868c:	0018      	movs	r0, r3
   2868e:	46bd      	mov	sp, r7
   28690:	b004      	add	sp, #16
   28692:	bd80      	pop	{r7, pc}

00028694 <spi_write>:
{
   28694:	b580      	push	{r7, lr}
   28696:	b084      	sub	sp, #16
   28698:	af00      	add	r7, sp, #0
   2869a:	6078      	str	r0, [r7, #4]
   2869c:	000a      	movs	r2, r1
   2869e:	1cbb      	adds	r3, r7, #2
   286a0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   286a2:	687b      	ldr	r3, [r7, #4]
   286a4:	681b      	ldr	r3, [r3, #0]
   286a6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   286a8:	687b      	ldr	r3, [r7, #4]
   286aa:	0018      	movs	r0, r3
   286ac:	4b0a      	ldr	r3, [pc, #40]	; (286d8 <spi_write+0x44>)
   286ae:	4798      	blx	r3
   286b0:	0003      	movs	r3, r0
   286b2:	001a      	movs	r2, r3
   286b4:	2301      	movs	r3, #1
   286b6:	4053      	eors	r3, r2
   286b8:	b2db      	uxtb	r3, r3
   286ba:	2b00      	cmp	r3, #0
   286bc:	d001      	beq.n	286c2 <spi_write+0x2e>
		return STATUS_BUSY;
   286be:	2305      	movs	r3, #5
   286c0:	e006      	b.n	286d0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   286c2:	1cbb      	adds	r3, r7, #2
   286c4:	881b      	ldrh	r3, [r3, #0]
   286c6:	05db      	lsls	r3, r3, #23
   286c8:	0dda      	lsrs	r2, r3, #23
   286ca:	68fb      	ldr	r3, [r7, #12]
   286cc:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   286ce:	2300      	movs	r3, #0
}
   286d0:	0018      	movs	r0, r3
   286d2:	46bd      	mov	sp, r7
   286d4:	b004      	add	sp, #16
   286d6:	bd80      	pop	{r7, pc}
   286d8:	00028645 	.word	0x00028645

000286dc <spi_read>:
{
   286dc:	b580      	push	{r7, lr}
   286de:	b084      	sub	sp, #16
   286e0:	af00      	add	r7, sp, #0
   286e2:	6078      	str	r0, [r7, #4]
   286e4:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   286e6:	687b      	ldr	r3, [r7, #4]
   286e8:	681b      	ldr	r3, [r3, #0]
   286ea:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   286ec:	687b      	ldr	r3, [r7, #4]
   286ee:	0018      	movs	r0, r3
   286f0:	4b1b      	ldr	r3, [pc, #108]	; (28760 <spi_read+0x84>)
   286f2:	4798      	blx	r3
   286f4:	0003      	movs	r3, r0
   286f6:	001a      	movs	r2, r3
   286f8:	2301      	movs	r3, #1
   286fa:	4053      	eors	r3, r2
   286fc:	b2db      	uxtb	r3, r3
   286fe:	2b00      	cmp	r3, #0
   28700:	d001      	beq.n	28706 <spi_read+0x2a>
		return STATUS_ERR_IO;
   28702:	2310      	movs	r3, #16
   28704:	e027      	b.n	28756 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28706:	230f      	movs	r3, #15
   28708:	18fb      	adds	r3, r7, r3
   2870a:	2200      	movs	r2, #0
   2870c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2870e:	68bb      	ldr	r3, [r7, #8]
   28710:	8b5b      	ldrh	r3, [r3, #26]
   28712:	b29b      	uxth	r3, r3
   28714:	001a      	movs	r2, r3
   28716:	2304      	movs	r3, #4
   28718:	4013      	ands	r3, r2
   2871a:	d006      	beq.n	2872a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2871c:	230f      	movs	r3, #15
   2871e:	18fb      	adds	r3, r7, r3
   28720:	221e      	movs	r2, #30
   28722:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28724:	68bb      	ldr	r3, [r7, #8]
   28726:	2204      	movs	r2, #4
   28728:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2872a:	687b      	ldr	r3, [r7, #4]
   2872c:	799b      	ldrb	r3, [r3, #6]
   2872e:	2b01      	cmp	r3, #1
   28730:	d108      	bne.n	28744 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   28732:	68bb      	ldr	r3, [r7, #8]
   28734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28736:	b29b      	uxth	r3, r3
   28738:	05db      	lsls	r3, r3, #23
   2873a:	0ddb      	lsrs	r3, r3, #23
   2873c:	b29a      	uxth	r2, r3
   2873e:	683b      	ldr	r3, [r7, #0]
   28740:	801a      	strh	r2, [r3, #0]
   28742:	e005      	b.n	28750 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   28744:	68bb      	ldr	r3, [r7, #8]
   28746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28748:	b2db      	uxtb	r3, r3
   2874a:	b29a      	uxth	r2, r3
   2874c:	683b      	ldr	r3, [r7, #0]
   2874e:	801a      	strh	r2, [r3, #0]
	return retval;
   28750:	230f      	movs	r3, #15
   28752:	18fb      	adds	r3, r7, r3
   28754:	781b      	ldrb	r3, [r3, #0]
}
   28756:	0018      	movs	r0, r3
   28758:	46bd      	mov	sp, r7
   2875a:	b004      	add	sp, #16
   2875c:	bd80      	pop	{r7, pc}
   2875e:	46c0      	nop			; (mov r8, r8)
   28760:	0002866d 	.word	0x0002866d

00028764 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28764:	b590      	push	{r4, r7, lr}
   28766:	b089      	sub	sp, #36	; 0x24
   28768:	af00      	add	r7, sp, #0
   2876a:	6078      	str	r0, [r7, #4]
   2876c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2876e:	230c      	movs	r3, #12
   28770:	18fb      	adds	r3, r7, r3
   28772:	2200      	movs	r2, #0
   28774:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28776:	687b      	ldr	r3, [r7, #4]
   28778:	681b      	ldr	r3, [r3, #0]
   2877a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2877c:	687b      	ldr	r3, [r7, #4]
   2877e:	0018      	movs	r0, r3
   28780:	4b24      	ldr	r3, [pc, #144]	; (28814 <spi_set_baudrate+0xb0>)
   28782:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28784:	46c0      	nop			; (mov r8, r8)
   28786:	687b      	ldr	r3, [r7, #4]
   28788:	0018      	movs	r0, r3
   2878a:	4b23      	ldr	r3, [pc, #140]	; (28818 <spi_set_baudrate+0xb4>)
   2878c:	4798      	blx	r3
   2878e:	1e03      	subs	r3, r0, #0
   28790:	d1f9      	bne.n	28786 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28792:	687b      	ldr	r3, [r7, #4]
   28794:	681b      	ldr	r3, [r3, #0]
   28796:	0018      	movs	r0, r3
   28798:	4b20      	ldr	r3, [pc, #128]	; (2881c <spi_set_baudrate+0xb8>)
   2879a:	4798      	blx	r3
   2879c:	0003      	movs	r3, r0
   2879e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   287a0:	69bb      	ldr	r3, [r7, #24]
   287a2:	3314      	adds	r3, #20
   287a4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   287a6:	697b      	ldr	r3, [r7, #20]
   287a8:	b2db      	uxtb	r3, r3
   287aa:	0018      	movs	r0, r3
   287ac:	4b1c      	ldr	r3, [pc, #112]	; (28820 <spi_set_baudrate+0xbc>)
   287ae:	4798      	blx	r3
   287b0:	0003      	movs	r3, r0
   287b2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   287b4:	230f      	movs	r3, #15
   287b6:	18fc      	adds	r4, r7, r3
   287b8:	230c      	movs	r3, #12
   287ba:	18fa      	adds	r2, r7, r3
   287bc:	6939      	ldr	r1, [r7, #16]
   287be:	683b      	ldr	r3, [r7, #0]
   287c0:	0018      	movs	r0, r3
   287c2:	4b18      	ldr	r3, [pc, #96]	; (28824 <spi_set_baudrate+0xc0>)
   287c4:	4798      	blx	r3
   287c6:	0003      	movs	r3, r0
   287c8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   287ca:	230f      	movs	r3, #15
   287cc:	18fb      	adds	r3, r7, r3
   287ce:	781b      	ldrb	r3, [r3, #0]
   287d0:	2b00      	cmp	r3, #0
   287d2:	d001      	beq.n	287d8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   287d4:	2317      	movs	r3, #23
   287d6:	e018      	b.n	2880a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   287d8:	230c      	movs	r3, #12
   287da:	18fb      	adds	r3, r7, r3
   287dc:	881b      	ldrh	r3, [r3, #0]
   287de:	b2da      	uxtb	r2, r3
   287e0:	69fb      	ldr	r3, [r7, #28]
   287e2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   287e4:	46c0      	nop			; (mov r8, r8)
   287e6:	687b      	ldr	r3, [r7, #4]
   287e8:	0018      	movs	r0, r3
   287ea:	4b0b      	ldr	r3, [pc, #44]	; (28818 <spi_set_baudrate+0xb4>)
   287ec:	4798      	blx	r3
   287ee:	1e03      	subs	r3, r0, #0
   287f0:	d1f9      	bne.n	287e6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   287f2:	687b      	ldr	r3, [r7, #4]
   287f4:	0018      	movs	r0, r3
   287f6:	4b0c      	ldr	r3, [pc, #48]	; (28828 <spi_set_baudrate+0xc4>)
   287f8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   287fa:	46c0      	nop			; (mov r8, r8)
   287fc:	687b      	ldr	r3, [r7, #4]
   287fe:	0018      	movs	r0, r3
   28800:	4b05      	ldr	r3, [pc, #20]	; (28818 <spi_set_baudrate+0xb4>)
   28802:	4798      	blx	r3
   28804:	1e03      	subs	r3, r0, #0
   28806:	d1f9      	bne.n	287fc <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28808:	2300      	movs	r3, #0
}
   2880a:	0018      	movs	r0, r3
   2880c:	46bd      	mov	sp, r7
   2880e:	b009      	add	sp, #36	; 0x24
   28810:	bd90      	pop	{r4, r7, pc}
   28812:	46c0      	nop			; (mov r8, r8)
   28814:	000285c1 	.word	0x000285c1
   28818:	00028551 	.word	0x00028551
   2881c:	000281bd 	.word	0x000281bd
   28820:	0002ab71 	.word	0x0002ab71
   28824:	00027d37 	.word	0x00027d37
   28828:	00028571 	.word	0x00028571

0002882c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2882c:	b590      	push	{r4, r7, lr}
   2882e:	b093      	sub	sp, #76	; 0x4c
   28830:	af00      	add	r7, sp, #0
   28832:	6078      	str	r0, [r7, #4]
   28834:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   28836:	687b      	ldr	r3, [r7, #4]
   28838:	681b      	ldr	r3, [r3, #0]
   2883a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2883c:	687b      	ldr	r3, [r7, #4]
   2883e:	681b      	ldr	r3, [r3, #0]
   28840:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28842:	231c      	movs	r3, #28
   28844:	18fb      	adds	r3, r7, r3
   28846:	0018      	movs	r0, r3
   28848:	4b75      	ldr	r3, [pc, #468]	; (28a20 <_spi_set_config+0x1f4>)
   2884a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2884c:	231c      	movs	r3, #28
   2884e:	18fb      	adds	r3, r7, r3
   28850:	2200      	movs	r2, #0
   28852:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28854:	683b      	ldr	r3, [r7, #0]
   28856:	781b      	ldrb	r3, [r3, #0]
   28858:	2b00      	cmp	r3, #0
   2885a:	d103      	bne.n	28864 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2885c:	231c      	movs	r3, #28
   2885e:	18fb      	adds	r3, r7, r3
   28860:	2200      	movs	r2, #0
   28862:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28864:	683b      	ldr	r3, [r7, #0]
   28866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28868:	230c      	movs	r3, #12
   2886a:	18fb      	adds	r3, r7, r3
   2886c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2886e:	683b      	ldr	r3, [r7, #0]
   28870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28872:	230c      	movs	r3, #12
   28874:	18fb      	adds	r3, r7, r3
   28876:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28878:	683b      	ldr	r3, [r7, #0]
   2887a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2887c:	230c      	movs	r3, #12
   2887e:	18fb      	adds	r3, r7, r3
   28880:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28882:	683b      	ldr	r3, [r7, #0]
   28884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28886:	230c      	movs	r3, #12
   28888:	18fb      	adds	r3, r7, r3
   2888a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2888c:	2347      	movs	r3, #71	; 0x47
   2888e:	18fb      	adds	r3, r7, r3
   28890:	2200      	movs	r2, #0
   28892:	701a      	strb	r2, [r3, #0]
   28894:	e02c      	b.n	288f0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28896:	2347      	movs	r3, #71	; 0x47
   28898:	18fb      	adds	r3, r7, r3
   2889a:	781a      	ldrb	r2, [r3, #0]
   2889c:	230c      	movs	r3, #12
   2889e:	18fb      	adds	r3, r7, r3
   288a0:	0092      	lsls	r2, r2, #2
   288a2:	58d3      	ldr	r3, [r2, r3]
   288a4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   288a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288a8:	2b00      	cmp	r3, #0
   288aa:	d109      	bne.n	288c0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   288ac:	2347      	movs	r3, #71	; 0x47
   288ae:	18fb      	adds	r3, r7, r3
   288b0:	781a      	ldrb	r2, [r3, #0]
   288b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   288b4:	0011      	movs	r1, r2
   288b6:	0018      	movs	r0, r3
   288b8:	4b5a      	ldr	r3, [pc, #360]	; (28a24 <_spi_set_config+0x1f8>)
   288ba:	4798      	blx	r3
   288bc:	0003      	movs	r3, r0
   288be:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   288c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288c2:	3301      	adds	r3, #1
   288c4:	d00d      	beq.n	288e2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   288c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288c8:	b2da      	uxtb	r2, r3
   288ca:	231c      	movs	r3, #28
   288cc:	18fb      	adds	r3, r7, r3
   288ce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   288d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288d2:	0c1b      	lsrs	r3, r3, #16
   288d4:	b2db      	uxtb	r3, r3
   288d6:	221c      	movs	r2, #28
   288d8:	18ba      	adds	r2, r7, r2
   288da:	0011      	movs	r1, r2
   288dc:	0018      	movs	r0, r3
   288de:	4b52      	ldr	r3, [pc, #328]	; (28a28 <_spi_set_config+0x1fc>)
   288e0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   288e2:	2347      	movs	r3, #71	; 0x47
   288e4:	18fb      	adds	r3, r7, r3
   288e6:	781a      	ldrb	r2, [r3, #0]
   288e8:	2347      	movs	r3, #71	; 0x47
   288ea:	18fb      	adds	r3, r7, r3
   288ec:	3201      	adds	r2, #1
   288ee:	701a      	strb	r2, [r3, #0]
   288f0:	2347      	movs	r3, #71	; 0x47
   288f2:	18fb      	adds	r3, r7, r3
   288f4:	781b      	ldrb	r3, [r3, #0]
   288f6:	2b03      	cmp	r3, #3
   288f8:	d9cd      	bls.n	28896 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   288fa:	683b      	ldr	r3, [r7, #0]
   288fc:	781a      	ldrb	r2, [r3, #0]
   288fe:	687b      	ldr	r3, [r7, #4]
   28900:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28902:	683b      	ldr	r3, [r7, #0]
   28904:	7c1a      	ldrb	r2, [r3, #16]
   28906:	687b      	ldr	r3, [r7, #4]
   28908:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2890a:	683b      	ldr	r3, [r7, #0]
   2890c:	7c9a      	ldrb	r2, [r3, #18]
   2890e:	687b      	ldr	r3, [r7, #4]
   28910:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28912:	683b      	ldr	r3, [r7, #0]
   28914:	7d1a      	ldrb	r2, [r3, #20]
   28916:	687b      	ldr	r3, [r7, #4]
   28918:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2891a:	230a      	movs	r3, #10
   2891c:	18fb      	adds	r3, r7, r3
   2891e:	2200      	movs	r2, #0
   28920:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28922:	2300      	movs	r3, #0
   28924:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28926:	2300      	movs	r3, #0
   28928:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2892a:	683b      	ldr	r3, [r7, #0]
   2892c:	781b      	ldrb	r3, [r3, #0]
   2892e:	2b01      	cmp	r3, #1
   28930:	d129      	bne.n	28986 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28932:	687b      	ldr	r3, [r7, #4]
   28934:	681b      	ldr	r3, [r3, #0]
   28936:	0018      	movs	r0, r3
   28938:	4b3c      	ldr	r3, [pc, #240]	; (28a2c <_spi_set_config+0x200>)
   2893a:	4798      	blx	r3
   2893c:	0003      	movs	r3, r0
   2893e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28942:	3314      	adds	r3, #20
   28944:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28946:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28948:	b2db      	uxtb	r3, r3
   2894a:	0018      	movs	r0, r3
   2894c:	4b38      	ldr	r3, [pc, #224]	; (28a30 <_spi_set_config+0x204>)
   2894e:	4798      	blx	r3
   28950:	0003      	movs	r3, r0
   28952:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28954:	683b      	ldr	r3, [r7, #0]
   28956:	699b      	ldr	r3, [r3, #24]
   28958:	2223      	movs	r2, #35	; 0x23
   2895a:	18bc      	adds	r4, r7, r2
   2895c:	220a      	movs	r2, #10
   2895e:	18ba      	adds	r2, r7, r2
   28960:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28962:	0018      	movs	r0, r3
   28964:	4b33      	ldr	r3, [pc, #204]	; (28a34 <_spi_set_config+0x208>)
   28966:	4798      	blx	r3
   28968:	0003      	movs	r3, r0
   2896a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2896c:	2323      	movs	r3, #35	; 0x23
   2896e:	18fb      	adds	r3, r7, r3
   28970:	781b      	ldrb	r3, [r3, #0]
   28972:	2b00      	cmp	r3, #0
   28974:	d001      	beq.n	2897a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28976:	2317      	movs	r3, #23
   28978:	e04e      	b.n	28a18 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2897a:	230a      	movs	r3, #10
   2897c:	18fb      	adds	r3, r7, r3
   2897e:	881b      	ldrh	r3, [r3, #0]
   28980:	b2da      	uxtb	r2, r3
   28982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28984:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28986:	683b      	ldr	r3, [r7, #0]
   28988:	685b      	ldr	r3, [r3, #4]
   2898a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2898c:	4313      	orrs	r3, r2
   2898e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28990:	683b      	ldr	r3, [r7, #0]
   28992:	689b      	ldr	r3, [r3, #8]
   28994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28996:	4313      	orrs	r3, r2
   28998:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2899a:	683b      	ldr	r3, [r7, #0]
   2899c:	68db      	ldr	r3, [r3, #12]
   2899e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   289a0:	4313      	orrs	r3, r2
   289a2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   289a4:	683b      	ldr	r3, [r7, #0]
   289a6:	7c1b      	ldrb	r3, [r3, #16]
   289a8:	001a      	movs	r2, r3
   289aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289ac:	4313      	orrs	r3, r2
   289ae:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   289b0:	683b      	ldr	r3, [r7, #0]
   289b2:	7c5b      	ldrb	r3, [r3, #17]
   289b4:	2b00      	cmp	r3, #0
   289b6:	d103      	bne.n	289c0 <_spi_set_config+0x194>
   289b8:	4b1f      	ldr	r3, [pc, #124]	; (28a38 <_spi_set_config+0x20c>)
   289ba:	4798      	blx	r3
   289bc:	1e03      	subs	r3, r0, #0
   289be:	d003      	beq.n	289c8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   289c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   289c2:	2280      	movs	r2, #128	; 0x80
   289c4:	4313      	orrs	r3, r2
   289c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   289c8:	683b      	ldr	r3, [r7, #0]
   289ca:	7c9b      	ldrb	r3, [r3, #18]
   289cc:	2b00      	cmp	r3, #0
   289ce:	d004      	beq.n	289da <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   289d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289d2:	2280      	movs	r2, #128	; 0x80
   289d4:	0292      	lsls	r2, r2, #10
   289d6:	4313      	orrs	r3, r2
   289d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   289da:	683b      	ldr	r3, [r7, #0]
   289dc:	7cdb      	ldrb	r3, [r3, #19]
   289de:	2b00      	cmp	r3, #0
   289e0:	d004      	beq.n	289ec <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   289e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289e4:	2280      	movs	r2, #128	; 0x80
   289e6:	0092      	lsls	r2, r2, #2
   289e8:	4313      	orrs	r3, r2
   289ea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   289ec:	683b      	ldr	r3, [r7, #0]
   289ee:	7d1b      	ldrb	r3, [r3, #20]
   289f0:	2b00      	cmp	r3, #0
   289f2:	d004      	beq.n	289fe <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   289f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289f6:	2280      	movs	r2, #128	; 0x80
   289f8:	0192      	lsls	r2, r2, #6
   289fa:	4313      	orrs	r3, r2
   289fc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   289fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a00:	681a      	ldr	r2, [r3, #0]
   28a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28a04:	431a      	orrs	r2, r3
   28a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a08:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   28a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a0c:	685a      	ldr	r2, [r3, #4]
   28a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a10:	431a      	orrs	r2, r3
   28a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a14:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28a16:	2300      	movs	r3, #0
}
   28a18:	0018      	movs	r0, r3
   28a1a:	46bd      	mov	sp, r7
   28a1c:	b013      	add	sp, #76	; 0x4c
   28a1e:	bd90      	pop	{r4, r7, pc}
   28a20:	00028361 	.word	0x00028361
   28a24:	00028001 	.word	0x00028001
   28a28:	0002adad 	.word	0x0002adad
   28a2c:	000281bd 	.word	0x000281bd
   28a30:	0002ab71 	.word	0x0002ab71
   28a34:	00027d37 	.word	0x00027d37
   28a38:	000284d5 	.word	0x000284d5

00028a3c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28a3c:	b590      	push	{r4, r7, lr}
   28a3e:	b08b      	sub	sp, #44	; 0x2c
   28a40:	af00      	add	r7, sp, #0
   28a42:	60f8      	str	r0, [r7, #12]
   28a44:	60b9      	str	r1, [r7, #8]
   28a46:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28a48:	68fb      	ldr	r3, [r7, #12]
   28a4a:	68ba      	ldr	r2, [r7, #8]
   28a4c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28a4e:	68fb      	ldr	r3, [r7, #12]
   28a50:	681b      	ldr	r3, [r3, #0]
   28a52:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28a54:	6a3b      	ldr	r3, [r7, #32]
   28a56:	681b      	ldr	r3, [r3, #0]
   28a58:	2202      	movs	r2, #2
   28a5a:	4013      	ands	r3, r2
   28a5c:	d001      	beq.n	28a62 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28a5e:	231c      	movs	r3, #28
   28a60:	e09c      	b.n	28b9c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28a62:	6a3b      	ldr	r3, [r7, #32]
   28a64:	681b      	ldr	r3, [r3, #0]
   28a66:	2201      	movs	r2, #1
   28a68:	4013      	ands	r3, r2
   28a6a:	d001      	beq.n	28a70 <spi_init+0x34>
		return STATUS_BUSY;
   28a6c:	2305      	movs	r3, #5
   28a6e:	e095      	b.n	28b9c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28a70:	68fb      	ldr	r3, [r7, #12]
   28a72:	681b      	ldr	r3, [r3, #0]
   28a74:	0018      	movs	r0, r3
   28a76:	4b4b      	ldr	r3, [pc, #300]	; (28ba4 <spi_init+0x168>)
   28a78:	4798      	blx	r3
   28a7a:	0003      	movs	r3, r0
   28a7c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28a7e:	69fb      	ldr	r3, [r7, #28]
   28a80:	3302      	adds	r3, #2
   28a82:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28a84:	69fb      	ldr	r3, [r7, #28]
   28a86:	3314      	adds	r3, #20
   28a88:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28a8a:	2201      	movs	r2, #1
   28a8c:	69bb      	ldr	r3, [r7, #24]
   28a8e:	409a      	lsls	r2, r3
   28a90:	0013      	movs	r3, r2
   28a92:	0019      	movs	r1, r3
   28a94:	2002      	movs	r0, #2
   28a96:	4b44      	ldr	r3, [pc, #272]	; (28ba8 <spi_init+0x16c>)
   28a98:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28a9a:	2310      	movs	r3, #16
   28a9c:	18fb      	adds	r3, r7, r3
   28a9e:	0018      	movs	r0, r3
   28aa0:	4b42      	ldr	r3, [pc, #264]	; (28bac <spi_init+0x170>)
   28aa2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28aa4:	687b      	ldr	r3, [r7, #4]
   28aa6:	2224      	movs	r2, #36	; 0x24
   28aa8:	5c9a      	ldrb	r2, [r3, r2]
   28aaa:	2310      	movs	r3, #16
   28aac:	18fb      	adds	r3, r7, r3
   28aae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28ab0:	697b      	ldr	r3, [r7, #20]
   28ab2:	b2db      	uxtb	r3, r3
   28ab4:	2210      	movs	r2, #16
   28ab6:	18ba      	adds	r2, r7, r2
   28ab8:	0011      	movs	r1, r2
   28aba:	0018      	movs	r0, r3
   28abc:	4b3c      	ldr	r3, [pc, #240]	; (28bb0 <spi_init+0x174>)
   28abe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28ac0:	697b      	ldr	r3, [r7, #20]
   28ac2:	b2db      	uxtb	r3, r3
   28ac4:	0018      	movs	r0, r3
   28ac6:	4b3b      	ldr	r3, [pc, #236]	; (28bb4 <spi_init+0x178>)
   28ac8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28aca:	687b      	ldr	r3, [r7, #4]
   28acc:	2224      	movs	r2, #36	; 0x24
   28ace:	5c9b      	ldrb	r3, [r3, r2]
   28ad0:	2100      	movs	r1, #0
   28ad2:	0018      	movs	r0, r3
   28ad4:	4b38      	ldr	r3, [pc, #224]	; (28bb8 <spi_init+0x17c>)
   28ad6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28ad8:	687b      	ldr	r3, [r7, #4]
   28ada:	781b      	ldrb	r3, [r3, #0]
   28adc:	2b01      	cmp	r3, #1
   28ade:	d105      	bne.n	28aec <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28ae0:	6a3b      	ldr	r3, [r7, #32]
   28ae2:	681b      	ldr	r3, [r3, #0]
   28ae4:	220c      	movs	r2, #12
   28ae6:	431a      	orrs	r2, r3
   28ae8:	6a3b      	ldr	r3, [r7, #32]
   28aea:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28aec:	2327      	movs	r3, #39	; 0x27
   28aee:	18fb      	adds	r3, r7, r3
   28af0:	2200      	movs	r2, #0
   28af2:	701a      	strb	r2, [r3, #0]
   28af4:	e010      	b.n	28b18 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28af6:	2327      	movs	r3, #39	; 0x27
   28af8:	18fb      	adds	r3, r7, r3
   28afa:	781b      	ldrb	r3, [r3, #0]
   28afc:	68fa      	ldr	r2, [r7, #12]
   28afe:	3302      	adds	r3, #2
   28b00:	009b      	lsls	r3, r3, #2
   28b02:	18d3      	adds	r3, r2, r3
   28b04:	3304      	adds	r3, #4
   28b06:	2200      	movs	r2, #0
   28b08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28b0a:	2327      	movs	r3, #39	; 0x27
   28b0c:	18fb      	adds	r3, r7, r3
   28b0e:	781a      	ldrb	r2, [r3, #0]
   28b10:	2327      	movs	r3, #39	; 0x27
   28b12:	18fb      	adds	r3, r7, r3
   28b14:	3201      	adds	r2, #1
   28b16:	701a      	strb	r2, [r3, #0]
   28b18:	2327      	movs	r3, #39	; 0x27
   28b1a:	18fb      	adds	r3, r7, r3
   28b1c:	781b      	ldrb	r3, [r3, #0]
   28b1e:	2b06      	cmp	r3, #6
   28b20:	d9e9      	bls.n	28af6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28b22:	68fb      	ldr	r3, [r7, #12]
   28b24:	2200      	movs	r2, #0
   28b26:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28b28:	68fb      	ldr	r3, [r7, #12]
   28b2a:	2200      	movs	r2, #0
   28b2c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28b2e:	68fb      	ldr	r3, [r7, #12]
   28b30:	2200      	movs	r2, #0
   28b32:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28b34:	68fb      	ldr	r3, [r7, #12]
   28b36:	2200      	movs	r2, #0
   28b38:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28b3a:	68fb      	ldr	r3, [r7, #12]
   28b3c:	2236      	movs	r2, #54	; 0x36
   28b3e:	2100      	movs	r1, #0
   28b40:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28b42:	68fb      	ldr	r3, [r7, #12]
   28b44:	2237      	movs	r2, #55	; 0x37
   28b46:	2100      	movs	r1, #0
   28b48:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28b4a:	68fb      	ldr	r3, [r7, #12]
   28b4c:	2238      	movs	r2, #56	; 0x38
   28b4e:	2100      	movs	r1, #0
   28b50:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28b52:	68fb      	ldr	r3, [r7, #12]
   28b54:	2203      	movs	r2, #3
   28b56:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28b58:	68fb      	ldr	r3, [r7, #12]
   28b5a:	2200      	movs	r2, #0
   28b5c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	681b      	ldr	r3, [r3, #0]
   28b62:	2213      	movs	r2, #19
   28b64:	18bc      	adds	r4, r7, r2
   28b66:	0018      	movs	r0, r3
   28b68:	4b0e      	ldr	r3, [pc, #56]	; (28ba4 <spi_init+0x168>)
   28b6a:	4798      	blx	r3
   28b6c:	0003      	movs	r3, r0
   28b6e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28b70:	4a12      	ldr	r2, [pc, #72]	; (28bbc <spi_init+0x180>)
   28b72:	2313      	movs	r3, #19
   28b74:	18fb      	adds	r3, r7, r3
   28b76:	781b      	ldrb	r3, [r3, #0]
   28b78:	0011      	movs	r1, r2
   28b7a:	0018      	movs	r0, r3
   28b7c:	4b10      	ldr	r3, [pc, #64]	; (28bc0 <spi_init+0x184>)
   28b7e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28b80:	2313      	movs	r3, #19
   28b82:	18fb      	adds	r3, r7, r3
   28b84:	781a      	ldrb	r2, [r3, #0]
   28b86:	4b0f      	ldr	r3, [pc, #60]	; (28bc4 <spi_init+0x188>)
   28b88:	0092      	lsls	r2, r2, #2
   28b8a:	68f9      	ldr	r1, [r7, #12]
   28b8c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28b8e:	687a      	ldr	r2, [r7, #4]
   28b90:	68fb      	ldr	r3, [r7, #12]
   28b92:	0011      	movs	r1, r2
   28b94:	0018      	movs	r0, r3
   28b96:	4b0c      	ldr	r3, [pc, #48]	; (28bc8 <spi_init+0x18c>)
   28b98:	4798      	blx	r3
   28b9a:	0003      	movs	r3, r0
}
   28b9c:	0018      	movs	r0, r3
   28b9e:	46bd      	mov	sp, r7
   28ba0:	b00b      	add	sp, #44	; 0x2c
   28ba2:	bd90      	pop	{r4, r7, pc}
   28ba4:	000281bd 	.word	0x000281bd
   28ba8:	00028479 	.word	0x00028479
   28bac:	00028461 	.word	0x00028461
   28bb0:	0002aa4d 	.word	0x0002aa4d
   28bb4:	0002aa91 	.word	0x0002aa91
   28bb8:	00027f75 	.word	0x00027f75
   28bbc:	00029095 	.word	0x00029095
   28bc0:	00028221 	.word	0x00028221
   28bc4:	20005c9c 	.word	0x20005c9c
   28bc8:	0002882d 	.word	0x0002882d

00028bcc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28bcc:	b590      	push	{r4, r7, lr}
   28bce:	b087      	sub	sp, #28
   28bd0:	af00      	add	r7, sp, #0
   28bd2:	60f8      	str	r0, [r7, #12]
   28bd4:	60b9      	str	r1, [r7, #8]
   28bd6:	0019      	movs	r1, r3
   28bd8:	1dbb      	adds	r3, r7, #6
   28bda:	801a      	strh	r2, [r3, #0]
   28bdc:	1d3b      	adds	r3, r7, #4
   28bde:	1c0a      	adds	r2, r1, #0
   28be0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28be2:	68fb      	ldr	r3, [r7, #12]
   28be4:	2238      	movs	r2, #56	; 0x38
   28be6:	5c9b      	ldrb	r3, [r3, r2]
   28be8:	b2db      	uxtb	r3, r3
   28bea:	2b05      	cmp	r3, #5
   28bec:	d101      	bne.n	28bf2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28bee:	2305      	movs	r3, #5
   28bf0:	e07a      	b.n	28ce8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28bf2:	1dbb      	adds	r3, r7, #6
   28bf4:	881b      	ldrh	r3, [r3, #0]
   28bf6:	2b00      	cmp	r3, #0
   28bf8:	d101      	bne.n	28bfe <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28bfa:	2317      	movs	r3, #23
   28bfc:	e074      	b.n	28ce8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28bfe:	68fb      	ldr	r3, [r7, #12]
   28c00:	79db      	ldrb	r3, [r3, #7]
   28c02:	2201      	movs	r2, #1
   28c04:	4053      	eors	r3, r2
   28c06:	b2db      	uxtb	r3, r3
   28c08:	2b00      	cmp	r3, #0
   28c0a:	d001      	beq.n	28c10 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28c0c:	231c      	movs	r3, #28
   28c0e:	e06b      	b.n	28ce8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28c10:	2316      	movs	r3, #22
   28c12:	18fb      	adds	r3, r7, r3
   28c14:	2200      	movs	r2, #0
   28c16:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28c18:	e05e      	b.n	28cd8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28c1a:	68fb      	ldr	r3, [r7, #12]
   28c1c:	795b      	ldrb	r3, [r3, #5]
   28c1e:	2b01      	cmp	r3, #1
   28c20:	d112      	bne.n	28c48 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28c22:	46c0      	nop			; (mov r8, r8)
   28c24:	68fb      	ldr	r3, [r7, #12]
   28c26:	0018      	movs	r0, r3
   28c28:	4b31      	ldr	r3, [pc, #196]	; (28cf0 <spi_read_buffer_wait+0x124>)
   28c2a:	4798      	blx	r3
   28c2c:	0003      	movs	r3, r0
   28c2e:	001a      	movs	r2, r3
   28c30:	2301      	movs	r3, #1
   28c32:	4053      	eors	r3, r2
   28c34:	b2db      	uxtb	r3, r3
   28c36:	2b00      	cmp	r3, #0
   28c38:	d1f4      	bne.n	28c24 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28c3a:	1d3b      	adds	r3, r7, #4
   28c3c:	881a      	ldrh	r2, [r3, #0]
   28c3e:	68fb      	ldr	r3, [r7, #12]
   28c40:	0011      	movs	r1, r2
   28c42:	0018      	movs	r0, r3
   28c44:	4b2b      	ldr	r3, [pc, #172]	; (28cf4 <spi_read_buffer_wait+0x128>)
   28c46:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28c48:	46c0      	nop			; (mov r8, r8)
   28c4a:	68fb      	ldr	r3, [r7, #12]
   28c4c:	0018      	movs	r0, r3
   28c4e:	4b2a      	ldr	r3, [pc, #168]	; (28cf8 <spi_read_buffer_wait+0x12c>)
   28c50:	4798      	blx	r3
   28c52:	0003      	movs	r3, r0
   28c54:	001a      	movs	r2, r3
   28c56:	2301      	movs	r3, #1
   28c58:	4053      	eors	r3, r2
   28c5a:	b2db      	uxtb	r3, r3
   28c5c:	2b00      	cmp	r3, #0
   28c5e:	d1f4      	bne.n	28c4a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28c60:	2312      	movs	r3, #18
   28c62:	18fb      	adds	r3, r7, r3
   28c64:	2200      	movs	r2, #0
   28c66:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28c68:	2315      	movs	r3, #21
   28c6a:	18fc      	adds	r4, r7, r3
   28c6c:	2312      	movs	r3, #18
   28c6e:	18fa      	adds	r2, r7, r3
   28c70:	68fb      	ldr	r3, [r7, #12]
   28c72:	0011      	movs	r1, r2
   28c74:	0018      	movs	r0, r3
   28c76:	4b21      	ldr	r3, [pc, #132]	; (28cfc <spi_read_buffer_wait+0x130>)
   28c78:	4798      	blx	r3
   28c7a:	0003      	movs	r3, r0
   28c7c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28c7e:	2315      	movs	r3, #21
   28c80:	18fb      	adds	r3, r7, r3
   28c82:	781b      	ldrb	r3, [r3, #0]
   28c84:	2b00      	cmp	r3, #0
   28c86:	d003      	beq.n	28c90 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28c88:	2315      	movs	r3, #21
   28c8a:	18fb      	adds	r3, r7, r3
   28c8c:	781b      	ldrb	r3, [r3, #0]
   28c8e:	e02b      	b.n	28ce8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28c90:	2316      	movs	r3, #22
   28c92:	18fb      	adds	r3, r7, r3
   28c94:	881b      	ldrh	r3, [r3, #0]
   28c96:	2216      	movs	r2, #22
   28c98:	18ba      	adds	r2, r7, r2
   28c9a:	1c59      	adds	r1, r3, #1
   28c9c:	8011      	strh	r1, [r2, #0]
   28c9e:	001a      	movs	r2, r3
   28ca0:	68bb      	ldr	r3, [r7, #8]
   28ca2:	189b      	adds	r3, r3, r2
   28ca4:	2212      	movs	r2, #18
   28ca6:	18ba      	adds	r2, r7, r2
   28ca8:	8812      	ldrh	r2, [r2, #0]
   28caa:	b2d2      	uxtb	r2, r2
   28cac:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28cae:	68fb      	ldr	r3, [r7, #12]
   28cb0:	799b      	ldrb	r3, [r3, #6]
   28cb2:	2b01      	cmp	r3, #1
   28cb4:	d110      	bne.n	28cd8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28cb6:	2316      	movs	r3, #22
   28cb8:	18fb      	adds	r3, r7, r3
   28cba:	881b      	ldrh	r3, [r3, #0]
   28cbc:	2216      	movs	r2, #22
   28cbe:	18ba      	adds	r2, r7, r2
   28cc0:	1c59      	adds	r1, r3, #1
   28cc2:	8011      	strh	r1, [r2, #0]
   28cc4:	001a      	movs	r2, r3
   28cc6:	68bb      	ldr	r3, [r7, #8]
   28cc8:	189b      	adds	r3, r3, r2
   28cca:	2212      	movs	r2, #18
   28ccc:	18ba      	adds	r2, r7, r2
   28cce:	8812      	ldrh	r2, [r2, #0]
   28cd0:	0a12      	lsrs	r2, r2, #8
   28cd2:	b292      	uxth	r2, r2
   28cd4:	b2d2      	uxtb	r2, r2
   28cd6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28cd8:	1dbb      	adds	r3, r7, #6
   28cda:	881b      	ldrh	r3, [r3, #0]
   28cdc:	1dba      	adds	r2, r7, #6
   28cde:	1e59      	subs	r1, r3, #1
   28ce0:	8011      	strh	r1, [r2, #0]
   28ce2:	2b00      	cmp	r3, #0
   28ce4:	d199      	bne.n	28c1a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28ce6:	2300      	movs	r3, #0
}
   28ce8:	0018      	movs	r0, r3
   28cea:	46bd      	mov	sp, r7
   28cec:	b007      	add	sp, #28
   28cee:	bd90      	pop	{r4, r7, pc}
   28cf0:	00028645 	.word	0x00028645
   28cf4:	00028695 	.word	0x00028695
   28cf8:	0002866d 	.word	0x0002866d
   28cfc:	000286dd 	.word	0x000286dd

00028d00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28d00:	b580      	push	{r7, lr}
   28d02:	b086      	sub	sp, #24
   28d04:	af00      	add	r7, sp, #0
   28d06:	60f8      	str	r0, [r7, #12]
   28d08:	60b9      	str	r1, [r7, #8]
   28d0a:	1dfb      	adds	r3, r7, #7
   28d0c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28d0e:	68fb      	ldr	r3, [r7, #12]
   28d10:	795b      	ldrb	r3, [r3, #5]
   28d12:	2b01      	cmp	r3, #1
   28d14:	d001      	beq.n	28d1a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28d16:	2315      	movs	r3, #21
   28d18:	e05c      	b.n	28dd4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28d1a:	68fb      	ldr	r3, [r7, #12]
   28d1c:	7a1b      	ldrb	r3, [r3, #8]
   28d1e:	2201      	movs	r2, #1
   28d20:	4053      	eors	r3, r2
   28d22:	b2db      	uxtb	r3, r3
   28d24:	2b00      	cmp	r3, #0
   28d26:	d054      	beq.n	28dd2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28d28:	1dfb      	adds	r3, r7, #7
   28d2a:	781b      	ldrb	r3, [r3, #0]
   28d2c:	2b00      	cmp	r3, #0
   28d2e:	d04a      	beq.n	28dc6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28d30:	68bb      	ldr	r3, [r7, #8]
   28d32:	785b      	ldrb	r3, [r3, #1]
   28d34:	2b00      	cmp	r3, #0
   28d36:	d03f      	beq.n	28db8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28d38:	68fb      	ldr	r3, [r7, #12]
   28d3a:	0018      	movs	r0, r3
   28d3c:	4b27      	ldr	r3, [pc, #156]	; (28ddc <spi_select_slave+0xdc>)
   28d3e:	4798      	blx	r3
   28d40:	0003      	movs	r3, r0
   28d42:	001a      	movs	r2, r3
   28d44:	2301      	movs	r3, #1
   28d46:	4053      	eors	r3, r2
   28d48:	b2db      	uxtb	r3, r3
   28d4a:	2b00      	cmp	r3, #0
   28d4c:	d007      	beq.n	28d5e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28d4e:	68bb      	ldr	r3, [r7, #8]
   28d50:	781b      	ldrb	r3, [r3, #0]
   28d52:	2101      	movs	r1, #1
   28d54:	0018      	movs	r0, r3
   28d56:	4b22      	ldr	r3, [pc, #136]	; (28de0 <spi_select_slave+0xe0>)
   28d58:	4798      	blx	r3
					return STATUS_BUSY;
   28d5a:	2305      	movs	r3, #5
   28d5c:	e03a      	b.n	28dd4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28d5e:	68bb      	ldr	r3, [r7, #8]
   28d60:	781b      	ldrb	r3, [r3, #0]
   28d62:	2100      	movs	r1, #0
   28d64:	0018      	movs	r0, r3
   28d66:	4b1e      	ldr	r3, [pc, #120]	; (28de0 <spi_select_slave+0xe0>)
   28d68:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28d6a:	68bb      	ldr	r3, [r7, #8]
   28d6c:	789b      	ldrb	r3, [r3, #2]
   28d6e:	b29a      	uxth	r2, r3
   28d70:	68fb      	ldr	r3, [r7, #12]
   28d72:	0011      	movs	r1, r2
   28d74:	0018      	movs	r0, r3
   28d76:	4b1b      	ldr	r3, [pc, #108]	; (28de4 <spi_select_slave+0xe4>)
   28d78:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28d7a:	68fb      	ldr	r3, [r7, #12]
   28d7c:	79db      	ldrb	r3, [r3, #7]
   28d7e:	2201      	movs	r2, #1
   28d80:	4053      	eors	r3, r2
   28d82:	b2db      	uxtb	r3, r3
   28d84:	2b00      	cmp	r3, #0
   28d86:	d024      	beq.n	28dd2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28d88:	46c0      	nop			; (mov r8, r8)
   28d8a:	68fb      	ldr	r3, [r7, #12]
   28d8c:	0018      	movs	r0, r3
   28d8e:	4b16      	ldr	r3, [pc, #88]	; (28de8 <spi_select_slave+0xe8>)
   28d90:	4798      	blx	r3
   28d92:	0003      	movs	r3, r0
   28d94:	001a      	movs	r2, r3
   28d96:	2301      	movs	r3, #1
   28d98:	4053      	eors	r3, r2
   28d9a:	b2db      	uxtb	r3, r3
   28d9c:	2b00      	cmp	r3, #0
   28d9e:	d1f4      	bne.n	28d8a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28da0:	2316      	movs	r3, #22
   28da2:	18fb      	adds	r3, r7, r3
   28da4:	2200      	movs	r2, #0
   28da6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28da8:	2316      	movs	r3, #22
   28daa:	18fa      	adds	r2, r7, r3
   28dac:	68fb      	ldr	r3, [r7, #12]
   28dae:	0011      	movs	r1, r2
   28db0:	0018      	movs	r0, r3
   28db2:	4b0e      	ldr	r3, [pc, #56]	; (28dec <spi_select_slave+0xec>)
   28db4:	4798      	blx	r3
   28db6:	e00c      	b.n	28dd2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28db8:	68bb      	ldr	r3, [r7, #8]
   28dba:	781b      	ldrb	r3, [r3, #0]
   28dbc:	2100      	movs	r1, #0
   28dbe:	0018      	movs	r0, r3
   28dc0:	4b07      	ldr	r3, [pc, #28]	; (28de0 <spi_select_slave+0xe0>)
   28dc2:	4798      	blx	r3
   28dc4:	e005      	b.n	28dd2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28dc6:	68bb      	ldr	r3, [r7, #8]
   28dc8:	781b      	ldrb	r3, [r3, #0]
   28dca:	2101      	movs	r1, #1
   28dcc:	0018      	movs	r0, r3
   28dce:	4b04      	ldr	r3, [pc, #16]	; (28de0 <spi_select_slave+0xe0>)
   28dd0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28dd2:	2300      	movs	r3, #0
}
   28dd4:	0018      	movs	r0, r3
   28dd6:	46bd      	mov	sp, r7
   28dd8:	b006      	add	sp, #24
   28dda:	bd80      	pop	{r7, pc}
   28ddc:	00028645 	.word	0x00028645
   28de0:	0002840d 	.word	0x0002840d
   28de4:	00028695 	.word	0x00028695
   28de8:	0002866d 	.word	0x0002866d
   28dec:	000286dd 	.word	0x000286dd

00028df0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28df0:	b580      	push	{r7, lr}
   28df2:	b086      	sub	sp, #24
   28df4:	af00      	add	r7, sp, #0
   28df6:	60f8      	str	r0, [r7, #12]
   28df8:	60b9      	str	r1, [r7, #8]
   28dfa:	1dbb      	adds	r3, r7, #6
   28dfc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28dfe:	68fb      	ldr	r3, [r7, #12]
   28e00:	2238      	movs	r2, #56	; 0x38
   28e02:	5c9b      	ldrb	r3, [r3, r2]
   28e04:	b2db      	uxtb	r3, r3
   28e06:	2b05      	cmp	r3, #5
   28e08:	d101      	bne.n	28e0e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28e0a:	2305      	movs	r3, #5
   28e0c:	e087      	b.n	28f1e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28e0e:	1dbb      	adds	r3, r7, #6
   28e10:	881b      	ldrh	r3, [r3, #0]
   28e12:	2b00      	cmp	r3, #0
   28e14:	d101      	bne.n	28e1a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28e16:	2317      	movs	r3, #23
   28e18:	e081      	b.n	28f1e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28e1a:	2316      	movs	r3, #22
   28e1c:	18fb      	adds	r3, r7, r3
   28e1e:	2200      	movs	r2, #0
   28e20:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28e22:	2314      	movs	r3, #20
   28e24:	18fb      	adds	r3, r7, r3
   28e26:	1dba      	adds	r2, r7, #6
   28e28:	8812      	ldrh	r2, [r2, #0]
   28e2a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28e2c:	e05f      	b.n	28eee <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28e2e:	46c0      	nop			; (mov r8, r8)
   28e30:	68fb      	ldr	r3, [r7, #12]
   28e32:	0018      	movs	r0, r3
   28e34:	4b3c      	ldr	r3, [pc, #240]	; (28f28 <spi_write_buffer_wait+0x138>)
   28e36:	4798      	blx	r3
   28e38:	0003      	movs	r3, r0
   28e3a:	001a      	movs	r2, r3
   28e3c:	2301      	movs	r3, #1
   28e3e:	4053      	eors	r3, r2
   28e40:	b2db      	uxtb	r3, r3
   28e42:	2b00      	cmp	r3, #0
   28e44:	d1f4      	bne.n	28e30 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28e46:	2316      	movs	r3, #22
   28e48:	18fb      	adds	r3, r7, r3
   28e4a:	881b      	ldrh	r3, [r3, #0]
   28e4c:	2216      	movs	r2, #22
   28e4e:	18ba      	adds	r2, r7, r2
   28e50:	1c59      	adds	r1, r3, #1
   28e52:	8011      	strh	r1, [r2, #0]
   28e54:	001a      	movs	r2, r3
   28e56:	68bb      	ldr	r3, [r7, #8]
   28e58:	189b      	adds	r3, r3, r2
   28e5a:	781a      	ldrb	r2, [r3, #0]
   28e5c:	2312      	movs	r3, #18
   28e5e:	18fb      	adds	r3, r7, r3
   28e60:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28e62:	68fb      	ldr	r3, [r7, #12]
   28e64:	799b      	ldrb	r3, [r3, #6]
   28e66:	2b01      	cmp	r3, #1
   28e68:	d115      	bne.n	28e96 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28e6a:	2316      	movs	r3, #22
   28e6c:	18fb      	adds	r3, r7, r3
   28e6e:	881b      	ldrh	r3, [r3, #0]
   28e70:	2216      	movs	r2, #22
   28e72:	18ba      	adds	r2, r7, r2
   28e74:	1c59      	adds	r1, r3, #1
   28e76:	8011      	strh	r1, [r2, #0]
   28e78:	001a      	movs	r2, r3
   28e7a:	68bb      	ldr	r3, [r7, #8]
   28e7c:	189b      	adds	r3, r3, r2
   28e7e:	781b      	ldrb	r3, [r3, #0]
   28e80:	021b      	lsls	r3, r3, #8
   28e82:	b21a      	sxth	r2, r3
   28e84:	2312      	movs	r3, #18
   28e86:	18fb      	adds	r3, r7, r3
   28e88:	2100      	movs	r1, #0
   28e8a:	5e5b      	ldrsh	r3, [r3, r1]
   28e8c:	4313      	orrs	r3, r2
   28e8e:	b21a      	sxth	r2, r3
   28e90:	2312      	movs	r3, #18
   28e92:	18fb      	adds	r3, r7, r3
   28e94:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28e96:	2312      	movs	r3, #18
   28e98:	18fb      	adds	r3, r7, r3
   28e9a:	881a      	ldrh	r2, [r3, #0]
   28e9c:	68fb      	ldr	r3, [r7, #12]
   28e9e:	0011      	movs	r1, r2
   28ea0:	0018      	movs	r0, r3
   28ea2:	4b22      	ldr	r3, [pc, #136]	; (28f2c <spi_write_buffer_wait+0x13c>)
   28ea4:	4798      	blx	r3

		if (module->receiver_enabled) {
   28ea6:	68fb      	ldr	r3, [r7, #12]
   28ea8:	79db      	ldrb	r3, [r3, #7]
   28eaa:	2214      	movs	r2, #20
   28eac:	18ba      	adds	r2, r7, r2
   28eae:	2114      	movs	r1, #20
   28eb0:	1879      	adds	r1, r7, r1
   28eb2:	8809      	ldrh	r1, [r1, #0]
   28eb4:	8011      	strh	r1, [r2, #0]
   28eb6:	2b00      	cmp	r3, #0
   28eb8:	d019      	beq.n	28eee <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28eba:	46c0      	nop			; (mov r8, r8)
   28ebc:	68fb      	ldr	r3, [r7, #12]
   28ebe:	0018      	movs	r0, r3
   28ec0:	4b1b      	ldr	r3, [pc, #108]	; (28f30 <spi_write_buffer_wait+0x140>)
   28ec2:	4798      	blx	r3
   28ec4:	0003      	movs	r3, r0
   28ec6:	001a      	movs	r2, r3
   28ec8:	2301      	movs	r3, #1
   28eca:	4053      	eors	r3, r2
   28ecc:	b2db      	uxtb	r3, r3
   28ece:	2b00      	cmp	r3, #0
   28ed0:	d1f4      	bne.n	28ebc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28ed2:	2310      	movs	r3, #16
   28ed4:	18fa      	adds	r2, r7, r3
   28ed6:	68fb      	ldr	r3, [r7, #12]
   28ed8:	0011      	movs	r1, r2
   28eda:	0018      	movs	r0, r3
   28edc:	4b15      	ldr	r3, [pc, #84]	; (28f34 <spi_write_buffer_wait+0x144>)
   28ede:	4798      	blx	r3
			flush_length--;
   28ee0:	2314      	movs	r3, #20
   28ee2:	18fb      	adds	r3, r7, r3
   28ee4:	881a      	ldrh	r2, [r3, #0]
   28ee6:	2314      	movs	r3, #20
   28ee8:	18fb      	adds	r3, r7, r3
   28eea:	3a01      	subs	r2, #1
   28eec:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28eee:	1dbb      	adds	r3, r7, #6
   28ef0:	881b      	ldrh	r3, [r3, #0]
   28ef2:	1dba      	adds	r2, r7, #6
   28ef4:	1e59      	subs	r1, r3, #1
   28ef6:	8011      	strh	r1, [r2, #0]
   28ef8:	2b00      	cmp	r3, #0
   28efa:	d198      	bne.n	28e2e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28efc:	68fb      	ldr	r3, [r7, #12]
   28efe:	795b      	ldrb	r3, [r3, #5]
   28f00:	2b01      	cmp	r3, #1
   28f02:	d10b      	bne.n	28f1c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28f04:	46c0      	nop			; (mov r8, r8)
   28f06:	68fb      	ldr	r3, [r7, #12]
   28f08:	0018      	movs	r0, r3
   28f0a:	4b0b      	ldr	r3, [pc, #44]	; (28f38 <spi_write_buffer_wait+0x148>)
   28f0c:	4798      	blx	r3
   28f0e:	0003      	movs	r3, r0
   28f10:	001a      	movs	r2, r3
   28f12:	2301      	movs	r3, #1
   28f14:	4053      	eors	r3, r2
   28f16:	b2db      	uxtb	r3, r3
   28f18:	2b00      	cmp	r3, #0
   28f1a:	d1f4      	bne.n	28f06 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28f1c:	2300      	movs	r3, #0
}
   28f1e:	0018      	movs	r0, r3
   28f20:	46bd      	mov	sp, r7
   28f22:	b006      	add	sp, #24
   28f24:	bd80      	pop	{r7, pc}
   28f26:	46c0      	nop			; (mov r8, r8)
   28f28:	00028645 	.word	0x00028645
   28f2c:	00028695 	.word	0x00028695
   28f30:	0002866d 	.word	0x0002866d
   28f34:	000286dd 	.word	0x000286dd
   28f38:	0002861d 	.word	0x0002861d

00028f3c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28f3c:	b580      	push	{r7, lr}
   28f3e:	b084      	sub	sp, #16
   28f40:	af00      	add	r7, sp, #0
   28f42:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f44:	687b      	ldr	r3, [r7, #4]
   28f46:	681b      	ldr	r3, [r3, #0]
   28f48:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28f4a:	687b      	ldr	r3, [r7, #4]
   28f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f4e:	781b      	ldrb	r3, [r3, #0]
   28f50:	b2da      	uxtb	r2, r3
   28f52:	230e      	movs	r3, #14
   28f54:	18fb      	adds	r3, r7, r3
   28f56:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28f58:	687b      	ldr	r3, [r7, #4]
   28f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f5c:	1c5a      	adds	r2, r3, #1
   28f5e:	687b      	ldr	r3, [r7, #4]
   28f60:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28f62:	687b      	ldr	r3, [r7, #4]
   28f64:	799b      	ldrb	r3, [r3, #6]
   28f66:	2b01      	cmp	r3, #1
   28f68:	d113      	bne.n	28f92 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28f6a:	687b      	ldr	r3, [r7, #4]
   28f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f6e:	781b      	ldrb	r3, [r3, #0]
   28f70:	b2db      	uxtb	r3, r3
   28f72:	021b      	lsls	r3, r3, #8
   28f74:	b21a      	sxth	r2, r3
   28f76:	230e      	movs	r3, #14
   28f78:	18fb      	adds	r3, r7, r3
   28f7a:	2100      	movs	r1, #0
   28f7c:	5e5b      	ldrsh	r3, [r3, r1]
   28f7e:	4313      	orrs	r3, r2
   28f80:	b21a      	sxth	r2, r3
   28f82:	230e      	movs	r3, #14
   28f84:	18fb      	adds	r3, r7, r3
   28f86:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28f88:	687b      	ldr	r3, [r7, #4]
   28f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f8c:	1c5a      	adds	r2, r3, #1
   28f8e:	687b      	ldr	r3, [r7, #4]
   28f90:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28f92:	230e      	movs	r3, #14
   28f94:	18fb      	adds	r3, r7, r3
   28f96:	881b      	ldrh	r3, [r3, #0]
   28f98:	05db      	lsls	r3, r3, #23
   28f9a:	0dda      	lsrs	r2, r3, #23
   28f9c:	68bb      	ldr	r3, [r7, #8]
   28f9e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28fa0:	687b      	ldr	r3, [r7, #4]
   28fa2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28fa4:	b29b      	uxth	r3, r3
   28fa6:	3b01      	subs	r3, #1
   28fa8:	b29a      	uxth	r2, r3
   28faa:	687b      	ldr	r3, [r7, #4]
   28fac:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28fae:	46c0      	nop			; (mov r8, r8)
   28fb0:	46bd      	mov	sp, r7
   28fb2:	b004      	add	sp, #16
   28fb4:	bd80      	pop	{r7, pc}
	...

00028fb8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28fb8:	b580      	push	{r7, lr}
   28fba:	b084      	sub	sp, #16
   28fbc:	af00      	add	r7, sp, #0
   28fbe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28fc0:	687b      	ldr	r3, [r7, #4]
   28fc2:	681b      	ldr	r3, [r3, #0]
   28fc4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28fc6:	4b08      	ldr	r3, [pc, #32]	; (28fe8 <_spi_write_dummy+0x30>)
   28fc8:	881b      	ldrh	r3, [r3, #0]
   28fca:	001a      	movs	r2, r3
   28fcc:	68fb      	ldr	r3, [r7, #12]
   28fce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28fd0:	687b      	ldr	r3, [r7, #4]
   28fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28fd4:	b29b      	uxth	r3, r3
   28fd6:	3b01      	subs	r3, #1
   28fd8:	b29a      	uxth	r2, r3
   28fda:	687b      	ldr	r3, [r7, #4]
   28fdc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   28fde:	46c0      	nop			; (mov r8, r8)
   28fe0:	46bd      	mov	sp, r7
   28fe2:	b004      	add	sp, #16
   28fe4:	bd80      	pop	{r7, pc}
   28fe6:	46c0      	nop			; (mov r8, r8)
   28fe8:	20005cb4 	.word	0x20005cb4

00028fec <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   28fec:	b580      	push	{r7, lr}
   28fee:	b084      	sub	sp, #16
   28ff0:	af00      	add	r7, sp, #0
   28ff2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ff4:	687b      	ldr	r3, [r7, #4]
   28ff6:	681b      	ldr	r3, [r3, #0]
   28ff8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   28ffa:	230a      	movs	r3, #10
   28ffc:	18fb      	adds	r3, r7, r3
   28ffe:	2200      	movs	r2, #0
   29000:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   29002:	68fb      	ldr	r3, [r7, #12]
   29004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29006:	230a      	movs	r3, #10
   29008:	18fb      	adds	r3, r7, r3
   2900a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2900c:	687b      	ldr	r3, [r7, #4]
   2900e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29010:	b29b      	uxth	r3, r3
   29012:	3b01      	subs	r3, #1
   29014:	b29a      	uxth	r2, r3
   29016:	687b      	ldr	r3, [r7, #4]
   29018:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2901a:	46c0      	nop			; (mov r8, r8)
   2901c:	46bd      	mov	sp, r7
   2901e:	b004      	add	sp, #16
   29020:	bd80      	pop	{r7, pc}

00029022 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   29022:	b580      	push	{r7, lr}
   29024:	b084      	sub	sp, #16
   29026:	af00      	add	r7, sp, #0
   29028:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2902a:	687b      	ldr	r3, [r7, #4]
   2902c:	681b      	ldr	r3, [r3, #0]
   2902e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   29030:	68fb      	ldr	r3, [r7, #12]
   29032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29034:	b29a      	uxth	r2, r3
   29036:	230a      	movs	r3, #10
   29038:	18fb      	adds	r3, r7, r3
   2903a:	05d2      	lsls	r2, r2, #23
   2903c:	0dd2      	lsrs	r2, r2, #23
   2903e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   29040:	687b      	ldr	r3, [r7, #4]
   29042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29044:	220a      	movs	r2, #10
   29046:	18ba      	adds	r2, r7, r2
   29048:	8812      	ldrh	r2, [r2, #0]
   2904a:	b2d2      	uxtb	r2, r2
   2904c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2904e:	687b      	ldr	r3, [r7, #4]
   29050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29052:	1c5a      	adds	r2, r3, #1
   29054:	687b      	ldr	r3, [r7, #4]
   29056:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29058:	687b      	ldr	r3, [r7, #4]
   2905a:	799b      	ldrb	r3, [r3, #6]
   2905c:	2b01      	cmp	r3, #1
   2905e:	d10d      	bne.n	2907c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   29060:	687b      	ldr	r3, [r7, #4]
   29062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29064:	220a      	movs	r2, #10
   29066:	18ba      	adds	r2, r7, r2
   29068:	8812      	ldrh	r2, [r2, #0]
   2906a:	0a12      	lsrs	r2, r2, #8
   2906c:	b292      	uxth	r2, r2
   2906e:	b2d2      	uxtb	r2, r2
   29070:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   29072:	687b      	ldr	r3, [r7, #4]
   29074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29076:	1c5a      	adds	r2, r3, #1
   29078:	687b      	ldr	r3, [r7, #4]
   2907a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2907c:	687b      	ldr	r3, [r7, #4]
   2907e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29080:	b29b      	uxth	r3, r3
   29082:	3b01      	subs	r3, #1
   29084:	b29a      	uxth	r2, r3
   29086:	687b      	ldr	r3, [r7, #4]
   29088:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2908a:	46c0      	nop			; (mov r8, r8)
   2908c:	46bd      	mov	sp, r7
   2908e:	b004      	add	sp, #16
   29090:	bd80      	pop	{r7, pc}
	...

00029094 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   29094:	b580      	push	{r7, lr}
   29096:	b086      	sub	sp, #24
   29098:	af00      	add	r7, sp, #0
   2909a:	0002      	movs	r2, r0
   2909c:	1dfb      	adds	r3, r7, #7
   2909e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   290a0:	1dfb      	adds	r3, r7, #7
   290a2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   290a4:	4b96      	ldr	r3, [pc, #600]	; (29300 <_spi_interrupt_handler+0x26c>)
   290a6:	0092      	lsls	r2, r2, #2
   290a8:	58d3      	ldr	r3, [r2, r3]
   290aa:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   290ac:	697b      	ldr	r3, [r7, #20]
   290ae:	681b      	ldr	r3, [r3, #0]
   290b0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   290b2:	697b      	ldr	r3, [r7, #20]
   290b4:	2237      	movs	r2, #55	; 0x37
   290b6:	5c9a      	ldrb	r2, [r3, r2]
   290b8:	697b      	ldr	r3, [r7, #20]
   290ba:	2136      	movs	r1, #54	; 0x36
   290bc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   290be:	230f      	movs	r3, #15
   290c0:	18fb      	adds	r3, r7, r3
   290c2:	400a      	ands	r2, r1
   290c4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   290c6:	693b      	ldr	r3, [r7, #16]
   290c8:	7e1b      	ldrb	r3, [r3, #24]
   290ca:	b2da      	uxtb	r2, r3
   290cc:	230c      	movs	r3, #12
   290ce:	18fb      	adds	r3, r7, r3
   290d0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   290d2:	693b      	ldr	r3, [r7, #16]
   290d4:	7d9b      	ldrb	r3, [r3, #22]
   290d6:	b2db      	uxtb	r3, r3
   290d8:	b29a      	uxth	r2, r3
   290da:	230c      	movs	r3, #12
   290dc:	18fb      	adds	r3, r7, r3
   290de:	210c      	movs	r1, #12
   290e0:	1879      	adds	r1, r7, r1
   290e2:	8809      	ldrh	r1, [r1, #0]
   290e4:	400a      	ands	r2, r1
   290e6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   290e8:	230c      	movs	r3, #12
   290ea:	18fb      	adds	r3, r7, r3
   290ec:	881b      	ldrh	r3, [r3, #0]
   290ee:	2201      	movs	r2, #1
   290f0:	4013      	ands	r3, r2
   290f2:	d038      	beq.n	29166 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   290f4:	697b      	ldr	r3, [r7, #20]
   290f6:	795b      	ldrb	r3, [r3, #5]
   290f8:	2b01      	cmp	r3, #1
   290fa:	d110      	bne.n	2911e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   290fc:	697b      	ldr	r3, [r7, #20]
   290fe:	7a5b      	ldrb	r3, [r3, #9]
   29100:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29102:	2b00      	cmp	r3, #0
   29104:	d10b      	bne.n	2911e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   29106:	697b      	ldr	r3, [r7, #20]
   29108:	0018      	movs	r0, r3
   2910a:	4b7e      	ldr	r3, [pc, #504]	; (29304 <_spi_interrupt_handler+0x270>)
   2910c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2910e:	697b      	ldr	r3, [r7, #20]
   29110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29112:	b29b      	uxth	r3, r3
   29114:	2b00      	cmp	r3, #0
   29116:	d102      	bne.n	2911e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29118:	693b      	ldr	r3, [r7, #16]
   2911a:	2201      	movs	r2, #1
   2911c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2911e:	697b      	ldr	r3, [r7, #20]
   29120:	795b      	ldrb	r3, [r3, #5]
		if (0
   29122:	2b01      	cmp	r3, #1
   29124:	d11f      	bne.n	29166 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   29126:	697b      	ldr	r3, [r7, #20]
   29128:	7a5b      	ldrb	r3, [r3, #9]
   2912a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2912c:	2b00      	cmp	r3, #0
   2912e:	d01a      	beq.n	29166 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   29130:	697b      	ldr	r3, [r7, #20]
   29132:	0018      	movs	r0, r3
   29134:	4b74      	ldr	r3, [pc, #464]	; (29308 <_spi_interrupt_handler+0x274>)
   29136:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   29138:	697b      	ldr	r3, [r7, #20]
   2913a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2913c:	b29b      	uxth	r3, r3
   2913e:	2b00      	cmp	r3, #0
   29140:	d111      	bne.n	29166 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29142:	693b      	ldr	r3, [r7, #16]
   29144:	2201      	movs	r2, #1
   29146:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   29148:	697b      	ldr	r3, [r7, #20]
   2914a:	7a5b      	ldrb	r3, [r3, #9]
   2914c:	b2db      	uxtb	r3, r3
   2914e:	2b01      	cmp	r3, #1
   29150:	d109      	bne.n	29166 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   29152:	697b      	ldr	r3, [r7, #20]
   29154:	79db      	ldrb	r3, [r3, #7]
   29156:	2201      	movs	r2, #1
   29158:	4053      	eors	r3, r2
   2915a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2915c:	2b00      	cmp	r3, #0
   2915e:	d002      	beq.n	29166 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29160:	693b      	ldr	r3, [r7, #16]
   29162:	2202      	movs	r2, #2
   29164:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   29166:	230c      	movs	r3, #12
   29168:	18fb      	adds	r3, r7, r3
   2916a:	881b      	ldrh	r3, [r3, #0]
   2916c:	2204      	movs	r2, #4
   2916e:	4013      	ands	r3, r2
   29170:	d100      	bne.n	29174 <_spi_interrupt_handler+0xe0>
   29172:	e07e      	b.n	29272 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29174:	693b      	ldr	r3, [r7, #16]
   29176:	8b5b      	ldrh	r3, [r3, #26]
   29178:	b29b      	uxth	r3, r3
   2917a:	001a      	movs	r2, r3
   2917c:	2304      	movs	r3, #4
   2917e:	4013      	ands	r3, r2
   29180:	d022      	beq.n	291c8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   29182:	697b      	ldr	r3, [r7, #20]
   29184:	7a5b      	ldrb	r3, [r3, #9]
   29186:	b2db      	uxtb	r3, r3
   29188:	2b01      	cmp	r3, #1
   2918a:	d014      	beq.n	291b6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2918c:	697b      	ldr	r3, [r7, #20]
   2918e:	2238      	movs	r2, #56	; 0x38
   29190:	211e      	movs	r1, #30
   29192:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   29194:	697b      	ldr	r3, [r7, #20]
   29196:	2203      	movs	r2, #3
   29198:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2919a:	693b      	ldr	r3, [r7, #16]
   2919c:	2205      	movs	r2, #5
   2919e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   291a0:	230f      	movs	r3, #15
   291a2:	18fb      	adds	r3, r7, r3
   291a4:	781b      	ldrb	r3, [r3, #0]
   291a6:	2208      	movs	r2, #8
   291a8:	4013      	ands	r3, r2
   291aa:	d004      	beq.n	291b6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   291ac:	697b      	ldr	r3, [r7, #20]
   291ae:	699b      	ldr	r3, [r3, #24]
   291b0:	697a      	ldr	r2, [r7, #20]
   291b2:	0010      	movs	r0, r2
   291b4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   291b6:	693b      	ldr	r3, [r7, #16]
   291b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   291ba:	230a      	movs	r3, #10
   291bc:	18fb      	adds	r3, r7, r3
   291be:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   291c0:	693b      	ldr	r3, [r7, #16]
   291c2:	2204      	movs	r2, #4
   291c4:	835a      	strh	r2, [r3, #26]
   291c6:	e054      	b.n	29272 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   291c8:	697b      	ldr	r3, [r7, #20]
   291ca:	7a5b      	ldrb	r3, [r3, #9]
   291cc:	b2db      	uxtb	r3, r3
   291ce:	2b01      	cmp	r3, #1
   291d0:	d11e      	bne.n	29210 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   291d2:	697b      	ldr	r3, [r7, #20]
   291d4:	0018      	movs	r0, r3
   291d6:	4b4d      	ldr	r3, [pc, #308]	; (2930c <_spi_interrupt_handler+0x278>)
   291d8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   291da:	697b      	ldr	r3, [r7, #20]
   291dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   291de:	b29b      	uxth	r3, r3
   291e0:	2b00      	cmp	r3, #0
   291e2:	d146      	bne.n	29272 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   291e4:	693b      	ldr	r3, [r7, #16]
   291e6:	2204      	movs	r2, #4
   291e8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   291ea:	697b      	ldr	r3, [r7, #20]
   291ec:	2238      	movs	r2, #56	; 0x38
   291ee:	2100      	movs	r1, #0
   291f0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   291f2:	697b      	ldr	r3, [r7, #20]
   291f4:	2203      	movs	r2, #3
   291f6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   291f8:	230f      	movs	r3, #15
   291fa:	18fb      	adds	r3, r7, r3
   291fc:	781b      	ldrb	r3, [r3, #0]
   291fe:	2201      	movs	r2, #1
   29200:	4013      	ands	r3, r2
   29202:	d036      	beq.n	29272 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29204:	697b      	ldr	r3, [r7, #20]
   29206:	68db      	ldr	r3, [r3, #12]
   29208:	697a      	ldr	r2, [r7, #20]
   2920a:	0010      	movs	r0, r2
   2920c:	4798      	blx	r3
   2920e:	e030      	b.n	29272 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   29210:	697b      	ldr	r3, [r7, #20]
   29212:	0018      	movs	r0, r3
   29214:	4b3e      	ldr	r3, [pc, #248]	; (29310 <_spi_interrupt_handler+0x27c>)
   29216:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   29218:	697b      	ldr	r3, [r7, #20]
   2921a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2921c:	b29b      	uxth	r3, r3
   2921e:	2b00      	cmp	r3, #0
   29220:	d127      	bne.n	29272 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   29222:	697b      	ldr	r3, [r7, #20]
   29224:	2238      	movs	r2, #56	; 0x38
   29226:	2100      	movs	r1, #0
   29228:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2922a:	693b      	ldr	r3, [r7, #16]
   2922c:	2204      	movs	r2, #4
   2922e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   29230:	697b      	ldr	r3, [r7, #20]
   29232:	7a5b      	ldrb	r3, [r3, #9]
   29234:	b2db      	uxtb	r3, r3
   29236:	2b02      	cmp	r3, #2
   29238:	d10b      	bne.n	29252 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2923a:	230f      	movs	r3, #15
   2923c:	18fb      	adds	r3, r7, r3
   2923e:	781b      	ldrb	r3, [r3, #0]
   29240:	2204      	movs	r2, #4
   29242:	4013      	ands	r3, r2
   29244:	d015      	beq.n	29272 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   29246:	697b      	ldr	r3, [r7, #20]
   29248:	695b      	ldr	r3, [r3, #20]
   2924a:	697a      	ldr	r2, [r7, #20]
   2924c:	0010      	movs	r0, r2
   2924e:	4798      	blx	r3
   29250:	e00f      	b.n	29272 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   29252:	697b      	ldr	r3, [r7, #20]
   29254:	7a5b      	ldrb	r3, [r3, #9]
   29256:	b2db      	uxtb	r3, r3
   29258:	2b00      	cmp	r3, #0
   2925a:	d10a      	bne.n	29272 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2925c:	230f      	movs	r3, #15
   2925e:	18fb      	adds	r3, r7, r3
   29260:	781b      	ldrb	r3, [r3, #0]
   29262:	2202      	movs	r2, #2
   29264:	4013      	ands	r3, r2
   29266:	d004      	beq.n	29272 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   29268:	697b      	ldr	r3, [r7, #20]
   2926a:	691b      	ldr	r3, [r3, #16]
   2926c:	697a      	ldr	r2, [r7, #20]
   2926e:	0010      	movs	r0, r2
   29270:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   29272:	230c      	movs	r3, #12
   29274:	18fb      	adds	r3, r7, r3
   29276:	881b      	ldrh	r3, [r3, #0]
   29278:	2202      	movs	r2, #2
   2927a:	4013      	ands	r3, r2
   2927c:	d024      	beq.n	292c8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2927e:	697b      	ldr	r3, [r7, #20]
   29280:	795b      	ldrb	r3, [r3, #5]
   29282:	2b01      	cmp	r3, #1
   29284:	d120      	bne.n	292c8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29286:	697b      	ldr	r3, [r7, #20]
   29288:	7a5b      	ldrb	r3, [r3, #9]
   2928a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2928c:	2b01      	cmp	r3, #1
   2928e:	d11b      	bne.n	292c8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29290:	697b      	ldr	r3, [r7, #20]
   29292:	79db      	ldrb	r3, [r3, #7]
   29294:	2201      	movs	r2, #1
   29296:	4053      	eors	r3, r2
   29298:	b2db      	uxtb	r3, r3
   2929a:	2b00      	cmp	r3, #0
   2929c:	d014      	beq.n	292c8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2929e:	693b      	ldr	r3, [r7, #16]
   292a0:	2202      	movs	r2, #2
   292a2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   292a4:	697b      	ldr	r3, [r7, #20]
   292a6:	2203      	movs	r2, #3
   292a8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   292aa:	697b      	ldr	r3, [r7, #20]
   292ac:	2238      	movs	r2, #56	; 0x38
   292ae:	2100      	movs	r1, #0
   292b0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   292b2:	230f      	movs	r3, #15
   292b4:	18fb      	adds	r3, r7, r3
   292b6:	781b      	ldrb	r3, [r3, #0]
   292b8:	2201      	movs	r2, #1
   292ba:	4013      	ands	r3, r2
   292bc:	d004      	beq.n	292c8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   292be:	697b      	ldr	r3, [r7, #20]
   292c0:	68db      	ldr	r3, [r3, #12]
   292c2:	697a      	ldr	r2, [r7, #20]
   292c4:	0010      	movs	r0, r2
   292c6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   292c8:	230c      	movs	r3, #12
   292ca:	18fb      	adds	r3, r7, r3
   292cc:	881b      	ldrh	r3, [r3, #0]
   292ce:	2280      	movs	r2, #128	; 0x80
   292d0:	4013      	ands	r3, r2
   292d2:	d010      	beq.n	292f6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   292d4:	693b      	ldr	r3, [r7, #16]
   292d6:	2280      	movs	r2, #128	; 0x80
   292d8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   292da:	693b      	ldr	r3, [r7, #16]
   292dc:	2280      	movs	r2, #128	; 0x80
   292de:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   292e0:	230f      	movs	r3, #15
   292e2:	18fb      	adds	r3, r7, r3
   292e4:	781b      	ldrb	r3, [r3, #0]
   292e6:	2240      	movs	r2, #64	; 0x40
   292e8:	4013      	ands	r3, r2
   292ea:	d004      	beq.n	292f6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   292ec:	697b      	ldr	r3, [r7, #20]
   292ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   292f0:	697a      	ldr	r2, [r7, #20]
   292f2:	0010      	movs	r0, r2
   292f4:	4798      	blx	r3
		}
	}
#  endif
}
   292f6:	46c0      	nop			; (mov r8, r8)
   292f8:	46bd      	mov	sp, r7
   292fa:	b006      	add	sp, #24
   292fc:	bd80      	pop	{r7, pc}
   292fe:	46c0      	nop			; (mov r8, r8)
   29300:	20005c9c 	.word	0x20005c9c
   29304:	00028fb9 	.word	0x00028fb9
   29308:	00028f3d 	.word	0x00028f3d
   2930c:	00028fed 	.word	0x00028fed
   29310:	00029023 	.word	0x00029023

00029314 <system_gclk_chan_get_config_defaults>:
{
   29314:	b580      	push	{r7, lr}
   29316:	b082      	sub	sp, #8
   29318:	af00      	add	r7, sp, #0
   2931a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2931c:	687b      	ldr	r3, [r7, #4]
   2931e:	2200      	movs	r2, #0
   29320:	701a      	strb	r2, [r3, #0]
}
   29322:	46c0      	nop			; (mov r8, r8)
   29324:	46bd      	mov	sp, r7
   29326:	b002      	add	sp, #8
   29328:	bd80      	pop	{r7, pc}
	...

0002932c <system_apb_clock_set_mask>:
{
   2932c:	b580      	push	{r7, lr}
   2932e:	b082      	sub	sp, #8
   29330:	af00      	add	r7, sp, #0
   29332:	0002      	movs	r2, r0
   29334:	6039      	str	r1, [r7, #0]
   29336:	1dfb      	adds	r3, r7, #7
   29338:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2933a:	1dfb      	adds	r3, r7, #7
   2933c:	781b      	ldrb	r3, [r3, #0]
   2933e:	2b01      	cmp	r3, #1
   29340:	d00a      	beq.n	29358 <system_apb_clock_set_mask+0x2c>
   29342:	2b02      	cmp	r3, #2
   29344:	d00f      	beq.n	29366 <system_apb_clock_set_mask+0x3a>
   29346:	2b00      	cmp	r3, #0
   29348:	d114      	bne.n	29374 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2934a:	4b0e      	ldr	r3, [pc, #56]	; (29384 <system_apb_clock_set_mask+0x58>)
   2934c:	4a0d      	ldr	r2, [pc, #52]	; (29384 <system_apb_clock_set_mask+0x58>)
   2934e:	6991      	ldr	r1, [r2, #24]
   29350:	683a      	ldr	r2, [r7, #0]
   29352:	430a      	orrs	r2, r1
   29354:	619a      	str	r2, [r3, #24]
			break;
   29356:	e00f      	b.n	29378 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29358:	4b0a      	ldr	r3, [pc, #40]	; (29384 <system_apb_clock_set_mask+0x58>)
   2935a:	4a0a      	ldr	r2, [pc, #40]	; (29384 <system_apb_clock_set_mask+0x58>)
   2935c:	69d1      	ldr	r1, [r2, #28]
   2935e:	683a      	ldr	r2, [r7, #0]
   29360:	430a      	orrs	r2, r1
   29362:	61da      	str	r2, [r3, #28]
			break;
   29364:	e008      	b.n	29378 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29366:	4b07      	ldr	r3, [pc, #28]	; (29384 <system_apb_clock_set_mask+0x58>)
   29368:	4a06      	ldr	r2, [pc, #24]	; (29384 <system_apb_clock_set_mask+0x58>)
   2936a:	6a11      	ldr	r1, [r2, #32]
   2936c:	683a      	ldr	r2, [r7, #0]
   2936e:	430a      	orrs	r2, r1
   29370:	621a      	str	r2, [r3, #32]
			break;
   29372:	e001      	b.n	29378 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29374:	2317      	movs	r3, #23
   29376:	e000      	b.n	2937a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29378:	2300      	movs	r3, #0
}
   2937a:	0018      	movs	r0, r3
   2937c:	46bd      	mov	sp, r7
   2937e:	b002      	add	sp, #8
   29380:	bd80      	pop	{r7, pc}
   29382:	46c0      	nop			; (mov r8, r8)
   29384:	40000400 	.word	0x40000400

00029388 <system_pinmux_get_config_defaults>:
{
   29388:	b580      	push	{r7, lr}
   2938a:	b082      	sub	sp, #8
   2938c:	af00      	add	r7, sp, #0
   2938e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29390:	687b      	ldr	r3, [r7, #4]
   29392:	2280      	movs	r2, #128	; 0x80
   29394:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29396:	687b      	ldr	r3, [r7, #4]
   29398:	2200      	movs	r2, #0
   2939a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2939c:	687b      	ldr	r3, [r7, #4]
   2939e:	2201      	movs	r2, #1
   293a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   293a2:	687b      	ldr	r3, [r7, #4]
   293a4:	2200      	movs	r2, #0
   293a6:	70da      	strb	r2, [r3, #3]
}
   293a8:	46c0      	nop			; (mov r8, r8)
   293aa:	46bd      	mov	sp, r7
   293ac:	b002      	add	sp, #8
   293ae:	bd80      	pop	{r7, pc}

000293b0 <system_is_debugger_present>:
{
   293b0:	b580      	push	{r7, lr}
   293b2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   293b4:	4b05      	ldr	r3, [pc, #20]	; (293cc <system_is_debugger_present+0x1c>)
   293b6:	789b      	ldrb	r3, [r3, #2]
   293b8:	b2db      	uxtb	r3, r3
   293ba:	001a      	movs	r2, r3
   293bc:	2302      	movs	r3, #2
   293be:	4013      	ands	r3, r2
   293c0:	1e5a      	subs	r2, r3, #1
   293c2:	4193      	sbcs	r3, r2
   293c4:	b2db      	uxtb	r3, r3
}
   293c6:	0018      	movs	r0, r3
   293c8:	46bd      	mov	sp, r7
   293ca:	bd80      	pop	{r7, pc}
   293cc:	41002000 	.word	0x41002000

000293d0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   293d0:	b580      	push	{r7, lr}
   293d2:	b084      	sub	sp, #16
   293d4:	af00      	add	r7, sp, #0
   293d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   293d8:	687b      	ldr	r3, [r7, #4]
   293da:	681b      	ldr	r3, [r3, #0]
   293dc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   293de:	68fb      	ldr	r3, [r7, #12]
   293e0:	69db      	ldr	r3, [r3, #28]
   293e2:	1e5a      	subs	r2, r3, #1
   293e4:	4193      	sbcs	r3, r2
   293e6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   293e8:	0018      	movs	r0, r3
   293ea:	46bd      	mov	sp, r7
   293ec:	b004      	add	sp, #16
   293ee:	bd80      	pop	{r7, pc}

000293f0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   293f0:	b580      	push	{r7, lr}
   293f2:	b082      	sub	sp, #8
   293f4:	af00      	add	r7, sp, #0
   293f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   293f8:	46c0      	nop			; (mov r8, r8)
   293fa:	687b      	ldr	r3, [r7, #4]
   293fc:	0018      	movs	r0, r3
   293fe:	4b04      	ldr	r3, [pc, #16]	; (29410 <_usart_wait_for_sync+0x20>)
   29400:	4798      	blx	r3
   29402:	1e03      	subs	r3, r0, #0
   29404:	d1f9      	bne.n	293fa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   29406:	46c0      	nop			; (mov r8, r8)
   29408:	46bd      	mov	sp, r7
   2940a:	b002      	add	sp, #8
   2940c:	bd80      	pop	{r7, pc}
   2940e:	46c0      	nop			; (mov r8, r8)
   29410:	000293d1 	.word	0x000293d1

00029414 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   29414:	b5b0      	push	{r4, r5, r7, lr}
   29416:	b08c      	sub	sp, #48	; 0x30
   29418:	af02      	add	r7, sp, #8
   2941a:	6078      	str	r0, [r7, #4]
   2941c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2941e:	687b      	ldr	r3, [r7, #4]
   29420:	681b      	ldr	r3, [r3, #0]
   29422:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29424:	687b      	ldr	r3, [r7, #4]
   29426:	681b      	ldr	r3, [r3, #0]
   29428:	0018      	movs	r0, r3
   2942a:	4bab      	ldr	r3, [pc, #684]	; (296d8 <_usart_set_config+0x2c4>)
   2942c:	4798      	blx	r3
   2942e:	0003      	movs	r3, r0
   29430:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29432:	697b      	ldr	r3, [r7, #20]
   29434:	3314      	adds	r3, #20
   29436:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   29438:	2300      	movs	r3, #0
   2943a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2943c:	2300      	movs	r3, #0
   2943e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   29440:	230a      	movs	r3, #10
   29442:	18fb      	adds	r3, r7, r3
   29444:	2200      	movs	r2, #0
   29446:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29448:	231f      	movs	r3, #31
   2944a:	18fb      	adds	r3, r7, r3
   2944c:	2200      	movs	r2, #0
   2944e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29450:	231e      	movs	r3, #30
   29452:	18fb      	adds	r3, r7, r3
   29454:	2210      	movs	r2, #16
   29456:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   29458:	683b      	ldr	r3, [r7, #0]
   2945a:	8a1b      	ldrh	r3, [r3, #16]
   2945c:	2280      	movs	r2, #128	; 0x80
   2945e:	01d2      	lsls	r2, r2, #7
   29460:	4293      	cmp	r3, r2
   29462:	d01c      	beq.n	2949e <_usart_set_config+0x8a>
   29464:	2280      	movs	r2, #128	; 0x80
   29466:	01d2      	lsls	r2, r2, #7
   29468:	4293      	cmp	r3, r2
   2946a:	dc06      	bgt.n	2947a <_usart_set_config+0x66>
   2946c:	2b00      	cmp	r3, #0
   2946e:	d00d      	beq.n	2948c <_usart_set_config+0x78>
   29470:	2280      	movs	r2, #128	; 0x80
   29472:	0192      	lsls	r2, r2, #6
   29474:	4293      	cmp	r3, r2
   29476:	d024      	beq.n	294c2 <_usart_set_config+0xae>
   29478:	e035      	b.n	294e6 <_usart_set_config+0xd2>
   2947a:	22c0      	movs	r2, #192	; 0xc0
   2947c:	01d2      	lsls	r2, r2, #7
   2947e:	4293      	cmp	r3, r2
   29480:	d028      	beq.n	294d4 <_usart_set_config+0xc0>
   29482:	2280      	movs	r2, #128	; 0x80
   29484:	0212      	lsls	r2, r2, #8
   29486:	4293      	cmp	r3, r2
   29488:	d012      	beq.n	294b0 <_usart_set_config+0x9c>
   2948a:	e02c      	b.n	294e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2948c:	231f      	movs	r3, #31
   2948e:	18fb      	adds	r3, r7, r3
   29490:	2200      	movs	r2, #0
   29492:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29494:	231e      	movs	r3, #30
   29496:	18fb      	adds	r3, r7, r3
   29498:	2210      	movs	r2, #16
   2949a:	701a      	strb	r2, [r3, #0]
			break;
   2949c:	e023      	b.n	294e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2949e:	231f      	movs	r3, #31
   294a0:	18fb      	adds	r3, r7, r3
   294a2:	2200      	movs	r2, #0
   294a4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   294a6:	231e      	movs	r3, #30
   294a8:	18fb      	adds	r3, r7, r3
   294aa:	2208      	movs	r2, #8
   294ac:	701a      	strb	r2, [r3, #0]
			break;
   294ae:	e01a      	b.n	294e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   294b0:	231f      	movs	r3, #31
   294b2:	18fb      	adds	r3, r7, r3
   294b4:	2200      	movs	r2, #0
   294b6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   294b8:	231e      	movs	r3, #30
   294ba:	18fb      	adds	r3, r7, r3
   294bc:	2203      	movs	r2, #3
   294be:	701a      	strb	r2, [r3, #0]
			break;
   294c0:	e011      	b.n	294e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   294c2:	231f      	movs	r3, #31
   294c4:	18fb      	adds	r3, r7, r3
   294c6:	2201      	movs	r2, #1
   294c8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   294ca:	231e      	movs	r3, #30
   294cc:	18fb      	adds	r3, r7, r3
   294ce:	2210      	movs	r2, #16
   294d0:	701a      	strb	r2, [r3, #0]
			break;
   294d2:	e008      	b.n	294e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   294d4:	231f      	movs	r3, #31
   294d6:	18fb      	adds	r3, r7, r3
   294d8:	2201      	movs	r2, #1
   294da:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   294dc:	231e      	movs	r3, #30
   294de:	18fb      	adds	r3, r7, r3
   294e0:	2208      	movs	r2, #8
   294e2:	701a      	strb	r2, [r3, #0]
			break;
   294e4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   294e6:	683b      	ldr	r3, [r7, #0]
   294e8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   294ea:	683b      	ldr	r3, [r7, #0]
   294ec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   294ee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   294f0:	683b      	ldr	r3, [r7, #0]
   294f2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   294f4:	4313      	orrs	r3, r2
		config->sample_rate |
   294f6:	683a      	ldr	r2, [r7, #0]
   294f8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   294fa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   294fc:	683a      	ldr	r2, [r7, #0]
   294fe:	7e12      	ldrb	r2, [r2, #24]
   29500:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   29502:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29504:	683a      	ldr	r2, [r7, #0]
   29506:	2126      	movs	r1, #38	; 0x26
   29508:	5c52      	ldrb	r2, [r2, r1]
   2950a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2950c:	4313      	orrs	r3, r2
   2950e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   29510:	231d      	movs	r3, #29
   29512:	18fb      	adds	r3, r7, r3
   29514:	2200      	movs	r2, #0
   29516:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   29518:	683b      	ldr	r3, [r7, #0]
   2951a:	685b      	ldr	r3, [r3, #4]
   2951c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2951e:	68fb      	ldr	r3, [r7, #12]
   29520:	2b00      	cmp	r3, #0
   29522:	d01e      	beq.n	29562 <_usart_set_config+0x14e>
   29524:	2280      	movs	r2, #128	; 0x80
   29526:	0552      	lsls	r2, r2, #21
   29528:	4293      	cmp	r3, r2
   2952a:	d14f      	bne.n	295cc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2952c:	683b      	ldr	r3, [r7, #0]
   2952e:	2227      	movs	r2, #39	; 0x27
   29530:	5c9b      	ldrb	r3, [r3, r2]
   29532:	2201      	movs	r2, #1
   29534:	4053      	eors	r3, r2
   29536:	b2db      	uxtb	r3, r3
   29538:	2b00      	cmp	r3, #0
   2953a:	d046      	beq.n	295ca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2953c:	683b      	ldr	r3, [r7, #0]
   2953e:	6a1d      	ldr	r5, [r3, #32]
   29540:	693b      	ldr	r3, [r7, #16]
   29542:	b2db      	uxtb	r3, r3
   29544:	0018      	movs	r0, r3
   29546:	4b65      	ldr	r3, [pc, #404]	; (296dc <_usart_set_config+0x2c8>)
   29548:	4798      	blx	r3
   2954a:	0001      	movs	r1, r0
   2954c:	231d      	movs	r3, #29
   2954e:	18fc      	adds	r4, r7, r3
   29550:	230a      	movs	r3, #10
   29552:	18fb      	adds	r3, r7, r3
   29554:	001a      	movs	r2, r3
   29556:	0028      	movs	r0, r5
   29558:	4b61      	ldr	r3, [pc, #388]	; (296e0 <_usart_set_config+0x2cc>)
   2955a:	4798      	blx	r3
   2955c:	0003      	movs	r3, r0
   2955e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29560:	e033      	b.n	295ca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29562:	683b      	ldr	r3, [r7, #0]
   29564:	2227      	movs	r2, #39	; 0x27
   29566:	5c9b      	ldrb	r3, [r3, r2]
   29568:	2b00      	cmp	r3, #0
   2956a:	d014      	beq.n	29596 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2956c:	683b      	ldr	r3, [r7, #0]
   2956e:	6a18      	ldr	r0, [r3, #32]
   29570:	683b      	ldr	r3, [r7, #0]
   29572:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29574:	231d      	movs	r3, #29
   29576:	18fc      	adds	r4, r7, r3
   29578:	231f      	movs	r3, #31
   2957a:	18fb      	adds	r3, r7, r3
   2957c:	781d      	ldrb	r5, [r3, #0]
   2957e:	230a      	movs	r3, #10
   29580:	18fa      	adds	r2, r7, r3
   29582:	231e      	movs	r3, #30
   29584:	18fb      	adds	r3, r7, r3
   29586:	781b      	ldrb	r3, [r3, #0]
   29588:	9300      	str	r3, [sp, #0]
   2958a:	002b      	movs	r3, r5
   2958c:	4d55      	ldr	r5, [pc, #340]	; (296e4 <_usart_set_config+0x2d0>)
   2958e:	47a8      	blx	r5
   29590:	0003      	movs	r3, r0
   29592:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29594:	e01a      	b.n	295cc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   29596:	683b      	ldr	r3, [r7, #0]
   29598:	6a1d      	ldr	r5, [r3, #32]
   2959a:	693b      	ldr	r3, [r7, #16]
   2959c:	b2db      	uxtb	r3, r3
   2959e:	0018      	movs	r0, r3
   295a0:	4b4e      	ldr	r3, [pc, #312]	; (296dc <_usart_set_config+0x2c8>)
   295a2:	4798      	blx	r3
				status_code =
   295a4:	231d      	movs	r3, #29
   295a6:	18fc      	adds	r4, r7, r3
   295a8:	231f      	movs	r3, #31
   295aa:	18fb      	adds	r3, r7, r3
   295ac:	7819      	ldrb	r1, [r3, #0]
   295ae:	230a      	movs	r3, #10
   295b0:	18fa      	adds	r2, r7, r3
   295b2:	231e      	movs	r3, #30
   295b4:	18fb      	adds	r3, r7, r3
   295b6:	781b      	ldrb	r3, [r3, #0]
   295b8:	9300      	str	r3, [sp, #0]
   295ba:	000b      	movs	r3, r1
   295bc:	0001      	movs	r1, r0
   295be:	0028      	movs	r0, r5
   295c0:	4d48      	ldr	r5, [pc, #288]	; (296e4 <_usart_set_config+0x2d0>)
   295c2:	47a8      	blx	r5
   295c4:	0003      	movs	r3, r0
   295c6:	7023      	strb	r3, [r4, #0]
			break;
   295c8:	e000      	b.n	295cc <_usart_set_config+0x1b8>
			break;
   295ca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   295cc:	231d      	movs	r3, #29
   295ce:	18fb      	adds	r3, r7, r3
   295d0:	781b      	ldrb	r3, [r3, #0]
   295d2:	2b00      	cmp	r3, #0
   295d4:	d003      	beq.n	295de <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   295d6:	231d      	movs	r3, #29
   295d8:	18fb      	adds	r3, r7, r3
   295da:	781b      	ldrb	r3, [r3, #0]
   295dc:	e077      	b.n	296ce <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   295de:	683b      	ldr	r3, [r7, #0]
   295e0:	7e5b      	ldrb	r3, [r3, #25]
   295e2:	2b00      	cmp	r3, #0
   295e4:	d003      	beq.n	295ee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   295e6:	683b      	ldr	r3, [r7, #0]
   295e8:	7e9a      	ldrb	r2, [r3, #26]
   295ea:	69bb      	ldr	r3, [r7, #24]
   295ec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   295ee:	687b      	ldr	r3, [r7, #4]
   295f0:	0018      	movs	r0, r3
   295f2:	4b3d      	ldr	r3, [pc, #244]	; (296e8 <_usart_set_config+0x2d4>)
   295f4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   295f6:	230a      	movs	r3, #10
   295f8:	18fb      	adds	r3, r7, r3
   295fa:	881a      	ldrh	r2, [r3, #0]
   295fc:	69bb      	ldr	r3, [r7, #24]
   295fe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   29600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29602:	68fb      	ldr	r3, [r7, #12]
   29604:	4313      	orrs	r3, r2
   29606:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   29608:	683b      	ldr	r3, [r7, #0]
   2960a:	2227      	movs	r2, #39	; 0x27
   2960c:	5c9b      	ldrb	r3, [r3, r2]
   2960e:	2201      	movs	r2, #1
   29610:	4053      	eors	r3, r2
   29612:	b2db      	uxtb	r3, r3
   29614:	2b00      	cmp	r3, #0
   29616:	d003      	beq.n	29620 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   29618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2961a:	2204      	movs	r2, #4
   2961c:	4313      	orrs	r3, r2
   2961e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29620:	683b      	ldr	r3, [r7, #0]
   29622:	7e5b      	ldrb	r3, [r3, #25]
   29624:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29626:	683b      	ldr	r3, [r7, #0]
   29628:	7f1b      	ldrb	r3, [r3, #28]
   2962a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2962c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2962e:	683b      	ldr	r3, [r7, #0]
   29630:	7f5b      	ldrb	r3, [r3, #29]
   29632:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29634:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29636:	683b      	ldr	r3, [r7, #0]
   29638:	2124      	movs	r1, #36	; 0x24
   2963a:	5c5b      	ldrb	r3, [r3, r1]
   2963c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2963e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   29640:	683b      	ldr	r3, [r7, #0]
   29642:	2125      	movs	r1, #37	; 0x25
   29644:	5c5b      	ldrb	r3, [r3, r1]
   29646:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   29648:	4313      	orrs	r3, r2
	ctrlb =  
   2964a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2964c:	683b      	ldr	r3, [r7, #0]
   2964e:	7a9b      	ldrb	r3, [r3, #10]
   29650:	001a      	movs	r2, r3
   29652:	6a3b      	ldr	r3, [r7, #32]
   29654:	4313      	orrs	r3, r2
   29656:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   29658:	683b      	ldr	r3, [r7, #0]
   2965a:	7adb      	ldrb	r3, [r3, #11]
   2965c:	001a      	movs	r2, r3
   2965e:	6a3b      	ldr	r3, [r7, #32]
   29660:	4313      	orrs	r3, r2
   29662:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29664:	683b      	ldr	r3, [r7, #0]
   29666:	891b      	ldrh	r3, [r3, #8]
   29668:	2bff      	cmp	r3, #255	; 0xff
   2966a:	d00b      	beq.n	29684 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2966e:	2280      	movs	r2, #128	; 0x80
   29670:	0452      	lsls	r2, r2, #17
   29672:	4313      	orrs	r3, r2
   29674:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   29676:	683b      	ldr	r3, [r7, #0]
   29678:	891b      	ldrh	r3, [r3, #8]
   2967a:	001a      	movs	r2, r3
   2967c:	6a3b      	ldr	r3, [r7, #32]
   2967e:	4313      	orrs	r3, r2
   29680:	623b      	str	r3, [r7, #32]
   29682:	e008      	b.n	29696 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29684:	683b      	ldr	r3, [r7, #0]
   29686:	7edb      	ldrb	r3, [r3, #27]
   29688:	2b00      	cmp	r3, #0
   2968a:	d004      	beq.n	29696 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2968e:	2280      	movs	r2, #128	; 0x80
   29690:	04d2      	lsls	r2, r2, #19
   29692:	4313      	orrs	r3, r2
   29694:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29696:	683b      	ldr	r3, [r7, #0]
   29698:	222c      	movs	r2, #44	; 0x2c
   2969a:	5c9b      	ldrb	r3, [r3, r2]
   2969c:	2b00      	cmp	r3, #0
   2969e:	d103      	bne.n	296a8 <_usart_set_config+0x294>
   296a0:	4b12      	ldr	r3, [pc, #72]	; (296ec <_usart_set_config+0x2d8>)
   296a2:	4798      	blx	r3
   296a4:	1e03      	subs	r3, r0, #0
   296a6:	d003      	beq.n	296b0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   296a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   296aa:	2280      	movs	r2, #128	; 0x80
   296ac:	4313      	orrs	r3, r2
   296ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   296b0:	687b      	ldr	r3, [r7, #4]
   296b2:	0018      	movs	r0, r3
   296b4:	4b0c      	ldr	r3, [pc, #48]	; (296e8 <_usart_set_config+0x2d4>)
   296b6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   296b8:	69bb      	ldr	r3, [r7, #24]
   296ba:	6a3a      	ldr	r2, [r7, #32]
   296bc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   296be:	687b      	ldr	r3, [r7, #4]
   296c0:	0018      	movs	r0, r3
   296c2:	4b09      	ldr	r3, [pc, #36]	; (296e8 <_usart_set_config+0x2d4>)
   296c4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   296c6:	69bb      	ldr	r3, [r7, #24]
   296c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   296ca:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   296cc:	2300      	movs	r3, #0
}
   296ce:	0018      	movs	r0, r3
   296d0:	46bd      	mov	sp, r7
   296d2:	b00a      	add	sp, #40	; 0x28
   296d4:	bdb0      	pop	{r4, r5, r7, pc}
   296d6:	46c0      	nop			; (mov r8, r8)
   296d8:	000281bd 	.word	0x000281bd
   296dc:	0002ab71 	.word	0x0002ab71
   296e0:	00027d37 	.word	0x00027d37
   296e4:	00027db5 	.word	0x00027db5
   296e8:	000293f1 	.word	0x000293f1
   296ec:	000293b1 	.word	0x000293b1

000296f0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   296f0:	b590      	push	{r4, r7, lr}
   296f2:	b093      	sub	sp, #76	; 0x4c
   296f4:	af00      	add	r7, sp, #0
   296f6:	60f8      	str	r0, [r7, #12]
   296f8:	60b9      	str	r1, [r7, #8]
   296fa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   296fc:	233b      	movs	r3, #59	; 0x3b
   296fe:	18fb      	adds	r3, r7, r3
   29700:	2200      	movs	r2, #0
   29702:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29704:	68fb      	ldr	r3, [r7, #12]
   29706:	68ba      	ldr	r2, [r7, #8]
   29708:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2970a:	68fb      	ldr	r3, [r7, #12]
   2970c:	681b      	ldr	r3, [r3, #0]
   2970e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29710:	68fb      	ldr	r3, [r7, #12]
   29712:	681b      	ldr	r3, [r3, #0]
   29714:	0018      	movs	r0, r3
   29716:	4b86      	ldr	r3, [pc, #536]	; (29930 <usart_init+0x240>)
   29718:	4798      	blx	r3
   2971a:	0003      	movs	r3, r0
   2971c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29720:	3302      	adds	r3, #2
   29722:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29726:	3314      	adds	r3, #20
   29728:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2972c:	681b      	ldr	r3, [r3, #0]
   2972e:	2201      	movs	r2, #1
   29730:	4013      	ands	r3, r2
   29732:	d001      	beq.n	29738 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   29734:	2305      	movs	r3, #5
   29736:	e0f6      	b.n	29926 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   29738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2973a:	681b      	ldr	r3, [r3, #0]
   2973c:	2202      	movs	r2, #2
   2973e:	4013      	ands	r3, r2
   29740:	d001      	beq.n	29746 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   29742:	231c      	movs	r3, #28
   29744:	e0ef      	b.n	29926 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   29746:	2201      	movs	r2, #1
   29748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2974a:	409a      	lsls	r2, r3
   2974c:	0013      	movs	r3, r2
   2974e:	0019      	movs	r1, r3
   29750:	2002      	movs	r0, #2
   29752:	4b78      	ldr	r3, [pc, #480]	; (29934 <usart_init+0x244>)
   29754:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29756:	2324      	movs	r3, #36	; 0x24
   29758:	18fb      	adds	r3, r7, r3
   2975a:	0018      	movs	r0, r3
   2975c:	4b76      	ldr	r3, [pc, #472]	; (29938 <usart_init+0x248>)
   2975e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29760:	687b      	ldr	r3, [r7, #4]
   29762:	222d      	movs	r2, #45	; 0x2d
   29764:	5c9a      	ldrb	r2, [r3, r2]
   29766:	2324      	movs	r3, #36	; 0x24
   29768:	18fb      	adds	r3, r7, r3
   2976a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2976e:	b2db      	uxtb	r3, r3
   29770:	2224      	movs	r2, #36	; 0x24
   29772:	18ba      	adds	r2, r7, r2
   29774:	0011      	movs	r1, r2
   29776:	0018      	movs	r0, r3
   29778:	4b70      	ldr	r3, [pc, #448]	; (2993c <usart_init+0x24c>)
   2977a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2977e:	b2db      	uxtb	r3, r3
   29780:	0018      	movs	r0, r3
   29782:	4b6f      	ldr	r3, [pc, #444]	; (29940 <usart_init+0x250>)
   29784:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   29786:	687b      	ldr	r3, [r7, #4]
   29788:	222d      	movs	r2, #45	; 0x2d
   2978a:	5c9b      	ldrb	r3, [r3, r2]
   2978c:	2100      	movs	r1, #0
   2978e:	0018      	movs	r0, r3
   29790:	4b6c      	ldr	r3, [pc, #432]	; (29944 <usart_init+0x254>)
   29792:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29794:	687b      	ldr	r3, [r7, #4]
   29796:	7ada      	ldrb	r2, [r3, #11]
   29798:	68fb      	ldr	r3, [r7, #12]
   2979a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2979c:	687b      	ldr	r3, [r7, #4]
   2979e:	2224      	movs	r2, #36	; 0x24
   297a0:	5c9a      	ldrb	r2, [r3, r2]
   297a2:	68fb      	ldr	r3, [r7, #12]
   297a4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   297a6:	687b      	ldr	r3, [r7, #4]
   297a8:	2225      	movs	r2, #37	; 0x25
   297aa:	5c9a      	ldrb	r2, [r3, r2]
   297ac:	68fb      	ldr	r3, [r7, #12]
   297ae:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   297b0:	687b      	ldr	r3, [r7, #4]
   297b2:	7eda      	ldrb	r2, [r3, #27]
   297b4:	68fb      	ldr	r3, [r7, #12]
   297b6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   297b8:	687b      	ldr	r3, [r7, #4]
   297ba:	7f1a      	ldrb	r2, [r3, #28]
   297bc:	68fb      	ldr	r3, [r7, #12]
   297be:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   297c0:	233b      	movs	r3, #59	; 0x3b
   297c2:	18fc      	adds	r4, r7, r3
   297c4:	687a      	ldr	r2, [r7, #4]
   297c6:	68fb      	ldr	r3, [r7, #12]
   297c8:	0011      	movs	r1, r2
   297ca:	0018      	movs	r0, r3
   297cc:	4b5e      	ldr	r3, [pc, #376]	; (29948 <usart_init+0x258>)
   297ce:	4798      	blx	r3
   297d0:	0003      	movs	r3, r0
   297d2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   297d4:	233b      	movs	r3, #59	; 0x3b
   297d6:	18fb      	adds	r3, r7, r3
   297d8:	781b      	ldrb	r3, [r3, #0]
   297da:	2b00      	cmp	r3, #0
   297dc:	d003      	beq.n	297e6 <usart_init+0xf6>
		return status_code;
   297de:	233b      	movs	r3, #59	; 0x3b
   297e0:	18fb      	adds	r3, r7, r3
   297e2:	781b      	ldrb	r3, [r3, #0]
   297e4:	e09f      	b.n	29926 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   297e6:	2320      	movs	r3, #32
   297e8:	18fb      	adds	r3, r7, r3
   297ea:	0018      	movs	r0, r3
   297ec:	4b57      	ldr	r3, [pc, #348]	; (2994c <usart_init+0x25c>)
   297ee:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   297f0:	2320      	movs	r3, #32
   297f2:	18fb      	adds	r3, r7, r3
   297f4:	2200      	movs	r2, #0
   297f6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   297f8:	2320      	movs	r3, #32
   297fa:	18fb      	adds	r3, r7, r3
   297fc:	2200      	movs	r2, #0
   297fe:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29800:	687b      	ldr	r3, [r7, #4]
   29802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29804:	2310      	movs	r3, #16
   29806:	18fb      	adds	r3, r7, r3
   29808:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2980a:	687b      	ldr	r3, [r7, #4]
   2980c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2980e:	2310      	movs	r3, #16
   29810:	18fb      	adds	r3, r7, r3
   29812:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29814:	687b      	ldr	r3, [r7, #4]
   29816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   29818:	2310      	movs	r3, #16
   2981a:	18fb      	adds	r3, r7, r3
   2981c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2981e:	687b      	ldr	r3, [r7, #4]
   29820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29822:	2310      	movs	r3, #16
   29824:	18fb      	adds	r3, r7, r3
   29826:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29828:	2347      	movs	r3, #71	; 0x47
   2982a:	18fb      	adds	r3, r7, r3
   2982c:	2200      	movs	r2, #0
   2982e:	701a      	strb	r2, [r3, #0]
   29830:	e02c      	b.n	2988c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29832:	2347      	movs	r3, #71	; 0x47
   29834:	18fb      	adds	r3, r7, r3
   29836:	781a      	ldrb	r2, [r3, #0]
   29838:	2310      	movs	r3, #16
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	0092      	lsls	r2, r2, #2
   2983e:	58d3      	ldr	r3, [r2, r3]
   29840:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29844:	2b00      	cmp	r3, #0
   29846:	d109      	bne.n	2985c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29848:	2347      	movs	r3, #71	; 0x47
   2984a:	18fb      	adds	r3, r7, r3
   2984c:	781a      	ldrb	r2, [r3, #0]
   2984e:	68bb      	ldr	r3, [r7, #8]
   29850:	0011      	movs	r1, r2
   29852:	0018      	movs	r0, r3
   29854:	4b3e      	ldr	r3, [pc, #248]	; (29950 <usart_init+0x260>)
   29856:	4798      	blx	r3
   29858:	0003      	movs	r3, r0
   2985a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2985c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2985e:	3301      	adds	r3, #1
   29860:	d00d      	beq.n	2987e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29864:	b2da      	uxtb	r2, r3
   29866:	2320      	movs	r3, #32
   29868:	18fb      	adds	r3, r7, r3
   2986a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2986c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2986e:	0c1b      	lsrs	r3, r3, #16
   29870:	b2db      	uxtb	r3, r3
   29872:	2220      	movs	r2, #32
   29874:	18ba      	adds	r2, r7, r2
   29876:	0011      	movs	r1, r2
   29878:	0018      	movs	r0, r3
   2987a:	4b36      	ldr	r3, [pc, #216]	; (29954 <usart_init+0x264>)
   2987c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2987e:	2347      	movs	r3, #71	; 0x47
   29880:	18fb      	adds	r3, r7, r3
   29882:	781a      	ldrb	r2, [r3, #0]
   29884:	2347      	movs	r3, #71	; 0x47
   29886:	18fb      	adds	r3, r7, r3
   29888:	3201      	adds	r2, #1
   2988a:	701a      	strb	r2, [r3, #0]
   2988c:	2347      	movs	r3, #71	; 0x47
   2988e:	18fb      	adds	r3, r7, r3
   29890:	781b      	ldrb	r3, [r3, #0]
   29892:	2b03      	cmp	r3, #3
   29894:	d9cd      	bls.n	29832 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29896:	2300      	movs	r3, #0
   29898:	63fb      	str	r3, [r7, #60]	; 0x3c
   2989a:	e00a      	b.n	298b2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2989c:	68fa      	ldr	r2, [r7, #12]
   2989e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298a0:	3302      	adds	r3, #2
   298a2:	009b      	lsls	r3, r3, #2
   298a4:	18d3      	adds	r3, r2, r3
   298a6:	3304      	adds	r3, #4
   298a8:	2200      	movs	r2, #0
   298aa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   298ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298ae:	3301      	adds	r3, #1
   298b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   298b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298b4:	2b05      	cmp	r3, #5
   298b6:	d9f1      	bls.n	2989c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   298b8:	68fb      	ldr	r3, [r7, #12]
   298ba:	2200      	movs	r2, #0
   298bc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   298be:	68fb      	ldr	r3, [r7, #12]
   298c0:	2200      	movs	r2, #0
   298c2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   298c4:	68fb      	ldr	r3, [r7, #12]
   298c6:	2200      	movs	r2, #0
   298c8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   298ca:	68fb      	ldr	r3, [r7, #12]
   298cc:	2200      	movs	r2, #0
   298ce:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   298d0:	68fb      	ldr	r3, [r7, #12]
   298d2:	2230      	movs	r2, #48	; 0x30
   298d4:	2100      	movs	r1, #0
   298d6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   298d8:	68fb      	ldr	r3, [r7, #12]
   298da:	2231      	movs	r2, #49	; 0x31
   298dc:	2100      	movs	r1, #0
   298de:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   298e0:	68fb      	ldr	r3, [r7, #12]
   298e2:	2232      	movs	r2, #50	; 0x32
   298e4:	2100      	movs	r1, #0
   298e6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   298e8:	68fb      	ldr	r3, [r7, #12]
   298ea:	2233      	movs	r2, #51	; 0x33
   298ec:	2100      	movs	r1, #0
   298ee:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   298f0:	68fb      	ldr	r3, [r7, #12]
   298f2:	681b      	ldr	r3, [r3, #0]
   298f4:	2227      	movs	r2, #39	; 0x27
   298f6:	18bc      	adds	r4, r7, r2
   298f8:	0018      	movs	r0, r3
   298fa:	4b0d      	ldr	r3, [pc, #52]	; (29930 <usart_init+0x240>)
   298fc:	4798      	blx	r3
   298fe:	0003      	movs	r3, r0
   29900:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29902:	4a15      	ldr	r2, [pc, #84]	; (29958 <usart_init+0x268>)
   29904:	2327      	movs	r3, #39	; 0x27
   29906:	18fb      	adds	r3, r7, r3
   29908:	781b      	ldrb	r3, [r3, #0]
   2990a:	0011      	movs	r1, r2
   2990c:	0018      	movs	r0, r3
   2990e:	4b13      	ldr	r3, [pc, #76]	; (2995c <usart_init+0x26c>)
   29910:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29912:	2327      	movs	r3, #39	; 0x27
   29914:	18fb      	adds	r3, r7, r3
   29916:	781a      	ldrb	r2, [r3, #0]
   29918:	4b11      	ldr	r3, [pc, #68]	; (29960 <usart_init+0x270>)
   2991a:	0092      	lsls	r2, r2, #2
   2991c:	68f9      	ldr	r1, [r7, #12]
   2991e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29920:	233b      	movs	r3, #59	; 0x3b
   29922:	18fb      	adds	r3, r7, r3
   29924:	781b      	ldrb	r3, [r3, #0]
}
   29926:	0018      	movs	r0, r3
   29928:	46bd      	mov	sp, r7
   2992a:	b013      	add	sp, #76	; 0x4c
   2992c:	bd90      	pop	{r4, r7, pc}
   2992e:	46c0      	nop			; (mov r8, r8)
   29930:	000281bd 	.word	0x000281bd
   29934:	0002932d 	.word	0x0002932d
   29938:	00029315 	.word	0x00029315
   2993c:	0002aa4d 	.word	0x0002aa4d
   29940:	0002aa91 	.word	0x0002aa91
   29944:	00027f75 	.word	0x00027f75
   29948:	00029415 	.word	0x00029415
   2994c:	00029389 	.word	0x00029389
   29950:	00028001 	.word	0x00028001
   29954:	0002adad 	.word	0x0002adad
   29958:	00029bcd 	.word	0x00029bcd
   2995c:	00028221 	.word	0x00028221
   29960:	20005c9c 	.word	0x20005c9c

00029964 <system_interrupt_enter_critical_section>:
{
   29964:	b580      	push	{r7, lr}
   29966:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29968:	4b02      	ldr	r3, [pc, #8]	; (29974 <system_interrupt_enter_critical_section+0x10>)
   2996a:	4798      	blx	r3
}
   2996c:	46c0      	nop			; (mov r8, r8)
   2996e:	46bd      	mov	sp, r7
   29970:	bd80      	pop	{r7, pc}
   29972:	46c0      	nop			; (mov r8, r8)
   29974:	00026db9 	.word	0x00026db9

00029978 <system_interrupt_leave_critical_section>:
{
   29978:	b580      	push	{r7, lr}
   2997a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2997c:	4b02      	ldr	r3, [pc, #8]	; (29988 <system_interrupt_leave_critical_section+0x10>)
   2997e:	4798      	blx	r3
}
   29980:	46c0      	nop			; (mov r8, r8)
   29982:	46bd      	mov	sp, r7
   29984:	bd80      	pop	{r7, pc}
   29986:	46c0      	nop			; (mov r8, r8)
   29988:	00026e0d 	.word	0x00026e0d

0002998c <usart_is_syncing>:
{
   2998c:	b580      	push	{r7, lr}
   2998e:	b084      	sub	sp, #16
   29990:	af00      	add	r7, sp, #0
   29992:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29994:	687b      	ldr	r3, [r7, #4]
   29996:	681b      	ldr	r3, [r3, #0]
   29998:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2999a:	68fb      	ldr	r3, [r7, #12]
   2999c:	69db      	ldr	r3, [r3, #28]
   2999e:	1e5a      	subs	r2, r3, #1
   299a0:	4193      	sbcs	r3, r2
   299a2:	b2db      	uxtb	r3, r3
}
   299a4:	0018      	movs	r0, r3
   299a6:	46bd      	mov	sp, r7
   299a8:	b004      	add	sp, #16
   299aa:	bd80      	pop	{r7, pc}

000299ac <_usart_wait_for_sync>:
{
   299ac:	b580      	push	{r7, lr}
   299ae:	b082      	sub	sp, #8
   299b0:	af00      	add	r7, sp, #0
   299b2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   299b4:	46c0      	nop			; (mov r8, r8)
   299b6:	687b      	ldr	r3, [r7, #4]
   299b8:	0018      	movs	r0, r3
   299ba:	4b04      	ldr	r3, [pc, #16]	; (299cc <_usart_wait_for_sync+0x20>)
   299bc:	4798      	blx	r3
   299be:	1e03      	subs	r3, r0, #0
   299c0:	d1f9      	bne.n	299b6 <_usart_wait_for_sync+0xa>
}
   299c2:	46c0      	nop			; (mov r8, r8)
   299c4:	46bd      	mov	sp, r7
   299c6:	b002      	add	sp, #8
   299c8:	bd80      	pop	{r7, pc}
   299ca:	46c0      	nop			; (mov r8, r8)
   299cc:	0002998d 	.word	0x0002998d

000299d0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   299d0:	b580      	push	{r7, lr}
   299d2:	b086      	sub	sp, #24
   299d4:	af00      	add	r7, sp, #0
   299d6:	60f8      	str	r0, [r7, #12]
   299d8:	60b9      	str	r1, [r7, #8]
   299da:	1dbb      	adds	r3, r7, #6
   299dc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   299de:	68fb      	ldr	r3, [r7, #12]
   299e0:	681b      	ldr	r3, [r3, #0]
   299e2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   299e4:	4b0f      	ldr	r3, [pc, #60]	; (29a24 <_usart_write_buffer+0x54>)
   299e6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   299e8:	68fb      	ldr	r3, [r7, #12]
   299ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   299ec:	b29b      	uxth	r3, r3
   299ee:	2b00      	cmp	r3, #0
   299f0:	d003      	beq.n	299fa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   299f2:	4b0d      	ldr	r3, [pc, #52]	; (29a28 <_usart_write_buffer+0x58>)
   299f4:	4798      	blx	r3
		return STATUS_BUSY;
   299f6:	2305      	movs	r3, #5
   299f8:	e010      	b.n	29a1c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   299fa:	68fb      	ldr	r3, [r7, #12]
   299fc:	1dba      	adds	r2, r7, #6
   299fe:	8812      	ldrh	r2, [r2, #0]
   29a00:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29a02:	4b09      	ldr	r3, [pc, #36]	; (29a28 <_usart_write_buffer+0x58>)
   29a04:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29a06:	68fb      	ldr	r3, [r7, #12]
   29a08:	68ba      	ldr	r2, [r7, #8]
   29a0a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29a0c:	68fb      	ldr	r3, [r7, #12]
   29a0e:	2233      	movs	r2, #51	; 0x33
   29a10:	2105      	movs	r1, #5
   29a12:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29a14:	697b      	ldr	r3, [r7, #20]
   29a16:	2201      	movs	r2, #1
   29a18:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   29a1a:	2300      	movs	r3, #0
}
   29a1c:	0018      	movs	r0, r3
   29a1e:	46bd      	mov	sp, r7
   29a20:	b006      	add	sp, #24
   29a22:	bd80      	pop	{r7, pc}
   29a24:	00029965 	.word	0x00029965
   29a28:	00029979 	.word	0x00029979

00029a2c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29a2c:	b580      	push	{r7, lr}
   29a2e:	b086      	sub	sp, #24
   29a30:	af00      	add	r7, sp, #0
   29a32:	60f8      	str	r0, [r7, #12]
   29a34:	60b9      	str	r1, [r7, #8]
   29a36:	1dbb      	adds	r3, r7, #6
   29a38:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29a3a:	68fb      	ldr	r3, [r7, #12]
   29a3c:	681b      	ldr	r3, [r3, #0]
   29a3e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29a40:	4b16      	ldr	r3, [pc, #88]	; (29a9c <_usart_read_buffer+0x70>)
   29a42:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29a44:	68fb      	ldr	r3, [r7, #12]
   29a46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29a48:	b29b      	uxth	r3, r3
   29a4a:	2b00      	cmp	r3, #0
   29a4c:	d003      	beq.n	29a56 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29a4e:	4b14      	ldr	r3, [pc, #80]	; (29aa0 <_usart_read_buffer+0x74>)
   29a50:	4798      	blx	r3
		return STATUS_BUSY;
   29a52:	2305      	movs	r3, #5
   29a54:	e01e      	b.n	29a94 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29a56:	68fb      	ldr	r3, [r7, #12]
   29a58:	1dba      	adds	r2, r7, #6
   29a5a:	8812      	ldrh	r2, [r2, #0]
   29a5c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29a5e:	4b10      	ldr	r3, [pc, #64]	; (29aa0 <_usart_read_buffer+0x74>)
   29a60:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29a62:	68fb      	ldr	r3, [r7, #12]
   29a64:	68ba      	ldr	r2, [r7, #8]
   29a66:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29a68:	68fb      	ldr	r3, [r7, #12]
   29a6a:	2232      	movs	r2, #50	; 0x32
   29a6c:	2105      	movs	r1, #5
   29a6e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29a70:	697b      	ldr	r3, [r7, #20]
   29a72:	2204      	movs	r2, #4
   29a74:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29a76:	68fb      	ldr	r3, [r7, #12]
   29a78:	7a1b      	ldrb	r3, [r3, #8]
   29a7a:	2b00      	cmp	r3, #0
   29a7c:	d002      	beq.n	29a84 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29a7e:	697b      	ldr	r3, [r7, #20]
   29a80:	2220      	movs	r2, #32
   29a82:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29a84:	68fb      	ldr	r3, [r7, #12]
   29a86:	7a5b      	ldrb	r3, [r3, #9]
   29a88:	2b00      	cmp	r3, #0
   29a8a:	d002      	beq.n	29a92 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29a8c:	697b      	ldr	r3, [r7, #20]
   29a8e:	2208      	movs	r2, #8
   29a90:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29a92:	2300      	movs	r3, #0
}
   29a94:	0018      	movs	r0, r3
   29a96:	46bd      	mov	sp, r7
   29a98:	b006      	add	sp, #24
   29a9a:	bd80      	pop	{r7, pc}
   29a9c:	00029965 	.word	0x00029965
   29aa0:	00029979 	.word	0x00029979

00029aa4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29aa4:	b580      	push	{r7, lr}
   29aa6:	b084      	sub	sp, #16
   29aa8:	af00      	add	r7, sp, #0
   29aaa:	60f8      	str	r0, [r7, #12]
   29aac:	60b9      	str	r1, [r7, #8]
   29aae:	1dfb      	adds	r3, r7, #7
   29ab0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29ab2:	1dfb      	adds	r3, r7, #7
   29ab4:	781b      	ldrb	r3, [r3, #0]
   29ab6:	68fa      	ldr	r2, [r7, #12]
   29ab8:	3302      	adds	r3, #2
   29aba:	009b      	lsls	r3, r3, #2
   29abc:	18d3      	adds	r3, r2, r3
   29abe:	3304      	adds	r3, #4
   29ac0:	68ba      	ldr	r2, [r7, #8]
   29ac2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29ac4:	68fb      	ldr	r3, [r7, #12]
   29ac6:	2230      	movs	r2, #48	; 0x30
   29ac8:	5c9b      	ldrb	r3, [r3, r2]
   29aca:	b25a      	sxtb	r2, r3
   29acc:	1dfb      	adds	r3, r7, #7
   29ace:	781b      	ldrb	r3, [r3, #0]
   29ad0:	2101      	movs	r1, #1
   29ad2:	4099      	lsls	r1, r3
   29ad4:	000b      	movs	r3, r1
   29ad6:	b25b      	sxtb	r3, r3
   29ad8:	4313      	orrs	r3, r2
   29ada:	b25b      	sxtb	r3, r3
   29adc:	b2d9      	uxtb	r1, r3
   29ade:	68fb      	ldr	r3, [r7, #12]
   29ae0:	2230      	movs	r2, #48	; 0x30
   29ae2:	5499      	strb	r1, [r3, r2]
}
   29ae4:	46c0      	nop			; (mov r8, r8)
   29ae6:	46bd      	mov	sp, r7
   29ae8:	b004      	add	sp, #16
   29aea:	bd80      	pop	{r7, pc}

00029aec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29aec:	b580      	push	{r7, lr}
   29aee:	b084      	sub	sp, #16
   29af0:	af00      	add	r7, sp, #0
   29af2:	60f8      	str	r0, [r7, #12]
   29af4:	60b9      	str	r1, [r7, #8]
   29af6:	1dbb      	adds	r3, r7, #6
   29af8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29afa:	1dbb      	adds	r3, r7, #6
   29afc:	881b      	ldrh	r3, [r3, #0]
   29afe:	2b00      	cmp	r3, #0
   29b00:	d101      	bne.n	29b06 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29b02:	2317      	movs	r3, #23
   29b04:	e010      	b.n	29b28 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29b06:	68fb      	ldr	r3, [r7, #12]
   29b08:	79db      	ldrb	r3, [r3, #7]
   29b0a:	2201      	movs	r2, #1
   29b0c:	4053      	eors	r3, r2
   29b0e:	b2db      	uxtb	r3, r3
   29b10:	2b00      	cmp	r3, #0
   29b12:	d001      	beq.n	29b18 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29b14:	231c      	movs	r3, #28
   29b16:	e007      	b.n	29b28 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29b18:	1dbb      	adds	r3, r7, #6
   29b1a:	881a      	ldrh	r2, [r3, #0]
   29b1c:	68b9      	ldr	r1, [r7, #8]
   29b1e:	68fb      	ldr	r3, [r7, #12]
   29b20:	0018      	movs	r0, r3
   29b22:	4b03      	ldr	r3, [pc, #12]	; (29b30 <usart_write_buffer_job+0x44>)
   29b24:	4798      	blx	r3
   29b26:	0003      	movs	r3, r0
}
   29b28:	0018      	movs	r0, r3
   29b2a:	46bd      	mov	sp, r7
   29b2c:	b004      	add	sp, #16
   29b2e:	bd80      	pop	{r7, pc}
   29b30:	000299d1 	.word	0x000299d1

00029b34 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29b34:	b580      	push	{r7, lr}
   29b36:	b084      	sub	sp, #16
   29b38:	af00      	add	r7, sp, #0
   29b3a:	60f8      	str	r0, [r7, #12]
   29b3c:	60b9      	str	r1, [r7, #8]
   29b3e:	1dbb      	adds	r3, r7, #6
   29b40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29b42:	1dbb      	adds	r3, r7, #6
   29b44:	881b      	ldrh	r3, [r3, #0]
   29b46:	2b00      	cmp	r3, #0
   29b48:	d101      	bne.n	29b4e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29b4a:	2317      	movs	r3, #23
   29b4c:	e010      	b.n	29b70 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29b4e:	68fb      	ldr	r3, [r7, #12]
   29b50:	799b      	ldrb	r3, [r3, #6]
   29b52:	2201      	movs	r2, #1
   29b54:	4053      	eors	r3, r2
   29b56:	b2db      	uxtb	r3, r3
   29b58:	2b00      	cmp	r3, #0
   29b5a:	d001      	beq.n	29b60 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29b5c:	231c      	movs	r3, #28
   29b5e:	e007      	b.n	29b70 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29b60:	1dbb      	adds	r3, r7, #6
   29b62:	881a      	ldrh	r2, [r3, #0]
   29b64:	68b9      	ldr	r1, [r7, #8]
   29b66:	68fb      	ldr	r3, [r7, #12]
   29b68:	0018      	movs	r0, r3
   29b6a:	4b03      	ldr	r3, [pc, #12]	; (29b78 <usart_read_buffer_job+0x44>)
   29b6c:	4798      	blx	r3
   29b6e:	0003      	movs	r3, r0
}
   29b70:	0018      	movs	r0, r3
   29b72:	46bd      	mov	sp, r7
   29b74:	b004      	add	sp, #16
   29b76:	bd80      	pop	{r7, pc}
   29b78:	00029a2d 	.word	0x00029a2d

00029b7c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29b7c:	b580      	push	{r7, lr}
   29b7e:	b084      	sub	sp, #16
   29b80:	af00      	add	r7, sp, #0
   29b82:	6078      	str	r0, [r7, #4]
   29b84:	000a      	movs	r2, r1
   29b86:	1cfb      	adds	r3, r7, #3
   29b88:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29b8a:	1cfb      	adds	r3, r7, #3
   29b8c:	781b      	ldrb	r3, [r3, #0]
   29b8e:	2b00      	cmp	r3, #0
   29b90:	d002      	beq.n	29b98 <usart_get_job_status+0x1c>
   29b92:	2b01      	cmp	r3, #1
   29b94:	d007      	beq.n	29ba6 <usart_get_job_status+0x2a>
   29b96:	e00d      	b.n	29bb4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29b98:	230f      	movs	r3, #15
   29b9a:	18fb      	adds	r3, r7, r3
   29b9c:	687a      	ldr	r2, [r7, #4]
   29b9e:	2132      	movs	r1, #50	; 0x32
   29ba0:	5c52      	ldrb	r2, [r2, r1]
   29ba2:	701a      	strb	r2, [r3, #0]
			break;
   29ba4:	e00b      	b.n	29bbe <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29ba6:	230f      	movs	r3, #15
   29ba8:	18fb      	adds	r3, r7, r3
   29baa:	687a      	ldr	r2, [r7, #4]
   29bac:	2133      	movs	r1, #51	; 0x33
   29bae:	5c52      	ldrb	r2, [r2, r1]
   29bb0:	701a      	strb	r2, [r3, #0]
			break;
   29bb2:	e004      	b.n	29bbe <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29bb4:	230f      	movs	r3, #15
   29bb6:	18fb      	adds	r3, r7, r3
   29bb8:	2217      	movs	r2, #23
   29bba:	701a      	strb	r2, [r3, #0]
			break;
   29bbc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29bbe:	230f      	movs	r3, #15
   29bc0:	18fb      	adds	r3, r7, r3
   29bc2:	781b      	ldrb	r3, [r3, #0]
}
   29bc4:	0018      	movs	r0, r3
   29bc6:	46bd      	mov	sp, r7
   29bc8:	b004      	add	sp, #16
   29bca:	bd80      	pop	{r7, pc}

00029bcc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29bcc:	b580      	push	{r7, lr}
   29bce:	b088      	sub	sp, #32
   29bd0:	af00      	add	r7, sp, #0
   29bd2:	0002      	movs	r2, r0
   29bd4:	1dfb      	adds	r3, r7, #7
   29bd6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29bd8:	1dfb      	adds	r3, r7, #7
   29bda:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29bdc:	4ba3      	ldr	r3, [pc, #652]	; (29e6c <_usart_interrupt_handler+0x2a0>)
   29bde:	0092      	lsls	r2, r2, #2
   29be0:	58d3      	ldr	r3, [r2, r3]
   29be2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29be4:	69bb      	ldr	r3, [r7, #24]
   29be6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29be8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29bea:	69bb      	ldr	r3, [r7, #24]
   29bec:	0018      	movs	r0, r3
   29bee:	4ba0      	ldr	r3, [pc, #640]	; (29e70 <_usart_interrupt_handler+0x2a4>)
   29bf0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29bf2:	697b      	ldr	r3, [r7, #20]
   29bf4:	7e1b      	ldrb	r3, [r3, #24]
   29bf6:	b2da      	uxtb	r2, r3
   29bf8:	2312      	movs	r3, #18
   29bfa:	18fb      	adds	r3, r7, r3
   29bfc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29bfe:	697b      	ldr	r3, [r7, #20]
   29c00:	7d9b      	ldrb	r3, [r3, #22]
   29c02:	b2db      	uxtb	r3, r3
   29c04:	b29a      	uxth	r2, r3
   29c06:	2312      	movs	r3, #18
   29c08:	18fb      	adds	r3, r7, r3
   29c0a:	2112      	movs	r1, #18
   29c0c:	1879      	adds	r1, r7, r1
   29c0e:	8809      	ldrh	r1, [r1, #0]
   29c10:	400a      	ands	r2, r1
   29c12:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29c14:	69bb      	ldr	r3, [r7, #24]
   29c16:	2230      	movs	r2, #48	; 0x30
   29c18:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29c1a:	69ba      	ldr	r2, [r7, #24]
   29c1c:	2131      	movs	r1, #49	; 0x31
   29c1e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29c20:	4013      	ands	r3, r2
   29c22:	b2da      	uxtb	r2, r3
   29c24:	2310      	movs	r3, #16
   29c26:	18fb      	adds	r3, r7, r3
   29c28:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29c2a:	2312      	movs	r3, #18
   29c2c:	18fb      	adds	r3, r7, r3
   29c2e:	881b      	ldrh	r3, [r3, #0]
   29c30:	2201      	movs	r2, #1
   29c32:	4013      	ands	r3, r2
   29c34:	d044      	beq.n	29cc0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29c36:	69bb      	ldr	r3, [r7, #24]
   29c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29c3a:	b29b      	uxth	r3, r3
   29c3c:	2b00      	cmp	r3, #0
   29c3e:	d03c      	beq.n	29cba <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29c40:	69bb      	ldr	r3, [r7, #24]
   29c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c44:	781b      	ldrb	r3, [r3, #0]
   29c46:	b2da      	uxtb	r2, r3
   29c48:	231c      	movs	r3, #28
   29c4a:	18fb      	adds	r3, r7, r3
   29c4c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29c4e:	69bb      	ldr	r3, [r7, #24]
   29c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c52:	1c5a      	adds	r2, r3, #1
   29c54:	69bb      	ldr	r3, [r7, #24]
   29c56:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29c58:	69bb      	ldr	r3, [r7, #24]
   29c5a:	795b      	ldrb	r3, [r3, #5]
   29c5c:	2b01      	cmp	r3, #1
   29c5e:	d113      	bne.n	29c88 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29c60:	69bb      	ldr	r3, [r7, #24]
   29c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c64:	781b      	ldrb	r3, [r3, #0]
   29c66:	b2db      	uxtb	r3, r3
   29c68:	021b      	lsls	r3, r3, #8
   29c6a:	b21a      	sxth	r2, r3
   29c6c:	231c      	movs	r3, #28
   29c6e:	18fb      	adds	r3, r7, r3
   29c70:	2100      	movs	r1, #0
   29c72:	5e5b      	ldrsh	r3, [r3, r1]
   29c74:	4313      	orrs	r3, r2
   29c76:	b21a      	sxth	r2, r3
   29c78:	231c      	movs	r3, #28
   29c7a:	18fb      	adds	r3, r7, r3
   29c7c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29c7e:	69bb      	ldr	r3, [r7, #24]
   29c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c82:	1c5a      	adds	r2, r3, #1
   29c84:	69bb      	ldr	r3, [r7, #24]
   29c86:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29c88:	231c      	movs	r3, #28
   29c8a:	18fb      	adds	r3, r7, r3
   29c8c:	881b      	ldrh	r3, [r3, #0]
   29c8e:	05db      	lsls	r3, r3, #23
   29c90:	0ddb      	lsrs	r3, r3, #23
   29c92:	b29a      	uxth	r2, r3
   29c94:	697b      	ldr	r3, [r7, #20]
   29c96:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29c98:	69bb      	ldr	r3, [r7, #24]
   29c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29c9c:	b29b      	uxth	r3, r3
   29c9e:	3b01      	subs	r3, #1
   29ca0:	b29b      	uxth	r3, r3
   29ca2:	69ba      	ldr	r2, [r7, #24]
   29ca4:	1c19      	adds	r1, r3, #0
   29ca6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29ca8:	2b00      	cmp	r3, #0
   29caa:	d109      	bne.n	29cc0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29cac:	697b      	ldr	r3, [r7, #20]
   29cae:	2201      	movs	r2, #1
   29cb0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29cb2:	697b      	ldr	r3, [r7, #20]
   29cb4:	2202      	movs	r2, #2
   29cb6:	759a      	strb	r2, [r3, #22]
   29cb8:	e002      	b.n	29cc0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29cba:	697b      	ldr	r3, [r7, #20]
   29cbc:	2201      	movs	r2, #1
   29cbe:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29cc0:	2312      	movs	r3, #18
   29cc2:	18fb      	adds	r3, r7, r3
   29cc4:	881b      	ldrh	r3, [r3, #0]
   29cc6:	2202      	movs	r2, #2
   29cc8:	4013      	ands	r3, r2
   29cca:	d011      	beq.n	29cf0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29ccc:	697b      	ldr	r3, [r7, #20]
   29cce:	2202      	movs	r2, #2
   29cd0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29cd2:	69bb      	ldr	r3, [r7, #24]
   29cd4:	2233      	movs	r2, #51	; 0x33
   29cd6:	2100      	movs	r1, #0
   29cd8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29cda:	2310      	movs	r3, #16
   29cdc:	18fb      	adds	r3, r7, r3
   29cde:	881b      	ldrh	r3, [r3, #0]
   29ce0:	2201      	movs	r2, #1
   29ce2:	4013      	ands	r3, r2
   29ce4:	d004      	beq.n	29cf0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29ce6:	69bb      	ldr	r3, [r7, #24]
   29ce8:	68db      	ldr	r3, [r3, #12]
   29cea:	69ba      	ldr	r2, [r7, #24]
   29cec:	0010      	movs	r0, r2
   29cee:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29cf0:	2312      	movs	r3, #18
   29cf2:	18fb      	adds	r3, r7, r3
   29cf4:	881b      	ldrh	r3, [r3, #0]
   29cf6:	2204      	movs	r2, #4
   29cf8:	4013      	ands	r3, r2
   29cfa:	d100      	bne.n	29cfe <_usart_interrupt_handler+0x132>
   29cfc:	e0bd      	b.n	29e7a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29cfe:	69bb      	ldr	r3, [r7, #24]
   29d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29d02:	b29b      	uxth	r3, r3
   29d04:	2b00      	cmp	r3, #0
   29d06:	d100      	bne.n	29d0a <_usart_interrupt_handler+0x13e>
   29d08:	e0b4      	b.n	29e74 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29d0a:	697b      	ldr	r3, [r7, #20]
   29d0c:	8b5b      	ldrh	r3, [r3, #26]
   29d0e:	b29b      	uxth	r3, r3
   29d10:	b2da      	uxtb	r2, r3
   29d12:	231f      	movs	r3, #31
   29d14:	18fb      	adds	r3, r7, r3
   29d16:	213f      	movs	r1, #63	; 0x3f
   29d18:	400a      	ands	r2, r1
   29d1a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29d1c:	231f      	movs	r3, #31
   29d1e:	18fb      	adds	r3, r7, r3
   29d20:	781b      	ldrb	r3, [r3, #0]
   29d22:	2208      	movs	r2, #8
   29d24:	4013      	ands	r3, r2
   29d26:	d007      	beq.n	29d38 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29d28:	231f      	movs	r3, #31
   29d2a:	18fb      	adds	r3, r7, r3
   29d2c:	221f      	movs	r2, #31
   29d2e:	18ba      	adds	r2, r7, r2
   29d30:	7812      	ldrb	r2, [r2, #0]
   29d32:	2108      	movs	r1, #8
   29d34:	438a      	bics	r2, r1
   29d36:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29d38:	231f      	movs	r3, #31
   29d3a:	18fb      	adds	r3, r7, r3
   29d3c:	781b      	ldrb	r3, [r3, #0]
   29d3e:	2b00      	cmp	r3, #0
   29d40:	d050      	beq.n	29de4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29d42:	231f      	movs	r3, #31
   29d44:	18fb      	adds	r3, r7, r3
   29d46:	781b      	ldrb	r3, [r3, #0]
   29d48:	2202      	movs	r2, #2
   29d4a:	4013      	ands	r3, r2
   29d4c:	d007      	beq.n	29d5e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29d4e:	69bb      	ldr	r3, [r7, #24]
   29d50:	2232      	movs	r2, #50	; 0x32
   29d52:	211a      	movs	r1, #26
   29d54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29d56:	697b      	ldr	r3, [r7, #20]
   29d58:	2202      	movs	r2, #2
   29d5a:	835a      	strh	r2, [r3, #26]
   29d5c:	e036      	b.n	29dcc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29d5e:	231f      	movs	r3, #31
   29d60:	18fb      	adds	r3, r7, r3
   29d62:	781b      	ldrb	r3, [r3, #0]
   29d64:	2204      	movs	r2, #4
   29d66:	4013      	ands	r3, r2
   29d68:	d007      	beq.n	29d7a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29d6a:	69bb      	ldr	r3, [r7, #24]
   29d6c:	2232      	movs	r2, #50	; 0x32
   29d6e:	211e      	movs	r1, #30
   29d70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29d72:	697b      	ldr	r3, [r7, #20]
   29d74:	2204      	movs	r2, #4
   29d76:	835a      	strh	r2, [r3, #26]
   29d78:	e028      	b.n	29dcc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29d7a:	231f      	movs	r3, #31
   29d7c:	18fb      	adds	r3, r7, r3
   29d7e:	781b      	ldrb	r3, [r3, #0]
   29d80:	2201      	movs	r2, #1
   29d82:	4013      	ands	r3, r2
   29d84:	d007      	beq.n	29d96 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29d86:	69bb      	ldr	r3, [r7, #24]
   29d88:	2232      	movs	r2, #50	; 0x32
   29d8a:	2113      	movs	r1, #19
   29d8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29d8e:	697b      	ldr	r3, [r7, #20]
   29d90:	2201      	movs	r2, #1
   29d92:	835a      	strh	r2, [r3, #26]
   29d94:	e01a      	b.n	29dcc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29d96:	231f      	movs	r3, #31
   29d98:	18fb      	adds	r3, r7, r3
   29d9a:	781b      	ldrb	r3, [r3, #0]
   29d9c:	2210      	movs	r2, #16
   29d9e:	4013      	ands	r3, r2
   29da0:	d007      	beq.n	29db2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29da2:	69bb      	ldr	r3, [r7, #24]
   29da4:	2232      	movs	r2, #50	; 0x32
   29da6:	2142      	movs	r1, #66	; 0x42
   29da8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29daa:	697b      	ldr	r3, [r7, #20]
   29dac:	2210      	movs	r2, #16
   29dae:	835a      	strh	r2, [r3, #26]
   29db0:	e00c      	b.n	29dcc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29db2:	231f      	movs	r3, #31
   29db4:	18fb      	adds	r3, r7, r3
   29db6:	781b      	ldrb	r3, [r3, #0]
   29db8:	2220      	movs	r2, #32
   29dba:	4013      	ands	r3, r2
   29dbc:	d006      	beq.n	29dcc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29dbe:	69bb      	ldr	r3, [r7, #24]
   29dc0:	2232      	movs	r2, #50	; 0x32
   29dc2:	2141      	movs	r1, #65	; 0x41
   29dc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29dc6:	697b      	ldr	r3, [r7, #20]
   29dc8:	2220      	movs	r2, #32
   29dca:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29dcc:	2310      	movs	r3, #16
   29dce:	18fb      	adds	r3, r7, r3
   29dd0:	881b      	ldrh	r3, [r3, #0]
   29dd2:	2204      	movs	r2, #4
   29dd4:	4013      	ands	r3, r2
				if (callback_status
   29dd6:	d050      	beq.n	29e7a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29dd8:	69bb      	ldr	r3, [r7, #24]
   29dda:	695b      	ldr	r3, [r3, #20]
   29ddc:	69ba      	ldr	r2, [r7, #24]
   29dde:	0010      	movs	r0, r2
   29de0:	4798      	blx	r3
   29de2:	e04a      	b.n	29e7a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29de4:	697b      	ldr	r3, [r7, #20]
   29de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29de8:	b29a      	uxth	r2, r3
   29dea:	230e      	movs	r3, #14
   29dec:	18fb      	adds	r3, r7, r3
   29dee:	05d2      	lsls	r2, r2, #23
   29df0:	0dd2      	lsrs	r2, r2, #23
   29df2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29df4:	69bb      	ldr	r3, [r7, #24]
   29df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29df8:	220e      	movs	r2, #14
   29dfa:	18ba      	adds	r2, r7, r2
   29dfc:	8812      	ldrh	r2, [r2, #0]
   29dfe:	b2d2      	uxtb	r2, r2
   29e00:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29e02:	69bb      	ldr	r3, [r7, #24]
   29e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e06:	1c5a      	adds	r2, r3, #1
   29e08:	69bb      	ldr	r3, [r7, #24]
   29e0a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29e0c:	69bb      	ldr	r3, [r7, #24]
   29e0e:	795b      	ldrb	r3, [r3, #5]
   29e10:	2b01      	cmp	r3, #1
   29e12:	d10d      	bne.n	29e30 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29e14:	69bb      	ldr	r3, [r7, #24]
   29e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e18:	220e      	movs	r2, #14
   29e1a:	18ba      	adds	r2, r7, r2
   29e1c:	8812      	ldrh	r2, [r2, #0]
   29e1e:	0a12      	lsrs	r2, r2, #8
   29e20:	b292      	uxth	r2, r2
   29e22:	b2d2      	uxtb	r2, r2
   29e24:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29e26:	69bb      	ldr	r3, [r7, #24]
   29e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e2a:	1c5a      	adds	r2, r3, #1
   29e2c:	69bb      	ldr	r3, [r7, #24]
   29e2e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29e30:	69bb      	ldr	r3, [r7, #24]
   29e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29e34:	b29b      	uxth	r3, r3
   29e36:	3b01      	subs	r3, #1
   29e38:	b29b      	uxth	r3, r3
   29e3a:	69ba      	ldr	r2, [r7, #24]
   29e3c:	1c19      	adds	r1, r3, #0
   29e3e:	8591      	strh	r1, [r2, #44]	; 0x2c
   29e40:	2b00      	cmp	r3, #0
   29e42:	d11a      	bne.n	29e7a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29e44:	697b      	ldr	r3, [r7, #20]
   29e46:	2204      	movs	r2, #4
   29e48:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   29e4a:	69bb      	ldr	r3, [r7, #24]
   29e4c:	2232      	movs	r2, #50	; 0x32
   29e4e:	2100      	movs	r1, #0
   29e50:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29e52:	2310      	movs	r3, #16
   29e54:	18fb      	adds	r3, r7, r3
   29e56:	881b      	ldrh	r3, [r3, #0]
   29e58:	2202      	movs	r2, #2
   29e5a:	4013      	ands	r3, r2
					if (callback_status
   29e5c:	d00d      	beq.n	29e7a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29e5e:	69bb      	ldr	r3, [r7, #24]
   29e60:	691b      	ldr	r3, [r3, #16]
   29e62:	69ba      	ldr	r2, [r7, #24]
   29e64:	0010      	movs	r0, r2
   29e66:	4798      	blx	r3
   29e68:	e007      	b.n	29e7a <_usart_interrupt_handler+0x2ae>
   29e6a:	46c0      	nop			; (mov r8, r8)
   29e6c:	20005c9c 	.word	0x20005c9c
   29e70:	000299ad 	.word	0x000299ad
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29e74:	697b      	ldr	r3, [r7, #20]
   29e76:	2204      	movs	r2, #4
   29e78:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29e7a:	2312      	movs	r3, #18
   29e7c:	18fb      	adds	r3, r7, r3
   29e7e:	881b      	ldrh	r3, [r3, #0]
   29e80:	2210      	movs	r2, #16
   29e82:	4013      	ands	r3, r2
   29e84:	d010      	beq.n	29ea8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29e86:	697b      	ldr	r3, [r7, #20]
   29e88:	2210      	movs	r2, #16
   29e8a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29e8c:	697b      	ldr	r3, [r7, #20]
   29e8e:	2210      	movs	r2, #16
   29e90:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29e92:	2310      	movs	r3, #16
   29e94:	18fb      	adds	r3, r7, r3
   29e96:	881b      	ldrh	r3, [r3, #0]
   29e98:	2210      	movs	r2, #16
   29e9a:	4013      	ands	r3, r2
   29e9c:	d004      	beq.n	29ea8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29e9e:	69bb      	ldr	r3, [r7, #24]
   29ea0:	69db      	ldr	r3, [r3, #28]
   29ea2:	69ba      	ldr	r2, [r7, #24]
   29ea4:	0010      	movs	r0, r2
   29ea6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29ea8:	2312      	movs	r3, #18
   29eaa:	18fb      	adds	r3, r7, r3
   29eac:	881b      	ldrh	r3, [r3, #0]
   29eae:	2220      	movs	r2, #32
   29eb0:	4013      	ands	r3, r2
   29eb2:	d010      	beq.n	29ed6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29eb4:	697b      	ldr	r3, [r7, #20]
   29eb6:	2220      	movs	r2, #32
   29eb8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29eba:	697b      	ldr	r3, [r7, #20]
   29ebc:	2220      	movs	r2, #32
   29ebe:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29ec0:	2310      	movs	r3, #16
   29ec2:	18fb      	adds	r3, r7, r3
   29ec4:	881b      	ldrh	r3, [r3, #0]
   29ec6:	2208      	movs	r2, #8
   29ec8:	4013      	ands	r3, r2
   29eca:	d004      	beq.n	29ed6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29ecc:	69bb      	ldr	r3, [r7, #24]
   29ece:	699b      	ldr	r3, [r3, #24]
   29ed0:	69ba      	ldr	r2, [r7, #24]
   29ed2:	0010      	movs	r0, r2
   29ed4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29ed6:	2312      	movs	r3, #18
   29ed8:	18fb      	adds	r3, r7, r3
   29eda:	881b      	ldrh	r3, [r3, #0]
   29edc:	2208      	movs	r2, #8
   29ede:	4013      	ands	r3, r2
   29ee0:	d010      	beq.n	29f04 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29ee2:	697b      	ldr	r3, [r7, #20]
   29ee4:	2208      	movs	r2, #8
   29ee6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29ee8:	697b      	ldr	r3, [r7, #20]
   29eea:	2208      	movs	r2, #8
   29eec:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29eee:	2310      	movs	r3, #16
   29ef0:	18fb      	adds	r3, r7, r3
   29ef2:	881b      	ldrh	r3, [r3, #0]
   29ef4:	2220      	movs	r2, #32
   29ef6:	4013      	ands	r3, r2
   29ef8:	d004      	beq.n	29f04 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29efa:	69bb      	ldr	r3, [r7, #24]
   29efc:	6a1b      	ldr	r3, [r3, #32]
   29efe:	69ba      	ldr	r2, [r7, #24]
   29f00:	0010      	movs	r0, r2
   29f02:	4798      	blx	r3
		}
	}
#endif
}
   29f04:	46c0      	nop			; (mov r8, r8)
   29f06:	46bd      	mov	sp, r7
   29f08:	b008      	add	sp, #32
   29f0a:	bd80      	pop	{r7, pc}

00029f0c <system_gclk_gen_get_config_defaults>:
{
   29f0c:	b580      	push	{r7, lr}
   29f0e:	b082      	sub	sp, #8
   29f10:	af00      	add	r7, sp, #0
   29f12:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29f14:	687b      	ldr	r3, [r7, #4]
   29f16:	2201      	movs	r2, #1
   29f18:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29f1a:	687b      	ldr	r3, [r7, #4]
   29f1c:	2200      	movs	r2, #0
   29f1e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29f20:	687b      	ldr	r3, [r7, #4]
   29f22:	2206      	movs	r2, #6
   29f24:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29f26:	687b      	ldr	r3, [r7, #4]
   29f28:	2200      	movs	r2, #0
   29f2a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29f2c:	687b      	ldr	r3, [r7, #4]
   29f2e:	2200      	movs	r2, #0
   29f30:	725a      	strb	r2, [r3, #9]
}
   29f32:	46c0      	nop			; (mov r8, r8)
   29f34:	46bd      	mov	sp, r7
   29f36:	b002      	add	sp, #8
   29f38:	bd80      	pop	{r7, pc}

00029f3a <system_gclk_chan_get_config_defaults>:
{
   29f3a:	b580      	push	{r7, lr}
   29f3c:	b082      	sub	sp, #8
   29f3e:	af00      	add	r7, sp, #0
   29f40:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29f42:	687b      	ldr	r3, [r7, #4]
   29f44:	2200      	movs	r2, #0
   29f46:	701a      	strb	r2, [r3, #0]
}
   29f48:	46c0      	nop			; (mov r8, r8)
   29f4a:	46bd      	mov	sp, r7
   29f4c:	b002      	add	sp, #8
   29f4e:	bd80      	pop	{r7, pc}

00029f50 <system_clock_source_osc8m_get_config_defaults>:
{
   29f50:	b580      	push	{r7, lr}
   29f52:	b082      	sub	sp, #8
   29f54:	af00      	add	r7, sp, #0
   29f56:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29f58:	687b      	ldr	r3, [r7, #4]
   29f5a:	2203      	movs	r2, #3
   29f5c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29f5e:	687b      	ldr	r3, [r7, #4]
   29f60:	2200      	movs	r2, #0
   29f62:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29f64:	687b      	ldr	r3, [r7, #4]
   29f66:	2201      	movs	r2, #1
   29f68:	709a      	strb	r2, [r3, #2]
}
   29f6a:	46c0      	nop			; (mov r8, r8)
   29f6c:	46bd      	mov	sp, r7
   29f6e:	b002      	add	sp, #8
   29f70:	bd80      	pop	{r7, pc}
	...

00029f74 <system_cpu_clock_set_divider>:
{
   29f74:	b580      	push	{r7, lr}
   29f76:	b082      	sub	sp, #8
   29f78:	af00      	add	r7, sp, #0
   29f7a:	0002      	movs	r2, r0
   29f7c:	1dfb      	adds	r3, r7, #7
   29f7e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29f80:	4a03      	ldr	r2, [pc, #12]	; (29f90 <system_cpu_clock_set_divider+0x1c>)
   29f82:	1dfb      	adds	r3, r7, #7
   29f84:	781b      	ldrb	r3, [r3, #0]
   29f86:	7213      	strb	r3, [r2, #8]
}
   29f88:	46c0      	nop			; (mov r8, r8)
   29f8a:	46bd      	mov	sp, r7
   29f8c:	b002      	add	sp, #8
   29f8e:	bd80      	pop	{r7, pc}
   29f90:	40000400 	.word	0x40000400

00029f94 <system_apb_clock_set_divider>:
{
   29f94:	b580      	push	{r7, lr}
   29f96:	b082      	sub	sp, #8
   29f98:	af00      	add	r7, sp, #0
   29f9a:	0002      	movs	r2, r0
   29f9c:	1dfb      	adds	r3, r7, #7
   29f9e:	701a      	strb	r2, [r3, #0]
   29fa0:	1dbb      	adds	r3, r7, #6
   29fa2:	1c0a      	adds	r2, r1, #0
   29fa4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29fa6:	1dfb      	adds	r3, r7, #7
   29fa8:	781b      	ldrb	r3, [r3, #0]
   29faa:	2b01      	cmp	r3, #1
   29fac:	d008      	beq.n	29fc0 <system_apb_clock_set_divider+0x2c>
   29fae:	2b02      	cmp	r3, #2
   29fb0:	d00b      	beq.n	29fca <system_apb_clock_set_divider+0x36>
   29fb2:	2b00      	cmp	r3, #0
   29fb4:	d10e      	bne.n	29fd4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29fb6:	4a0b      	ldr	r2, [pc, #44]	; (29fe4 <system_apb_clock_set_divider+0x50>)
   29fb8:	1dbb      	adds	r3, r7, #6
   29fba:	781b      	ldrb	r3, [r3, #0]
   29fbc:	7253      	strb	r3, [r2, #9]
			break;
   29fbe:	e00b      	b.n	29fd8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29fc0:	4a08      	ldr	r2, [pc, #32]	; (29fe4 <system_apb_clock_set_divider+0x50>)
   29fc2:	1dbb      	adds	r3, r7, #6
   29fc4:	781b      	ldrb	r3, [r3, #0]
   29fc6:	7293      	strb	r3, [r2, #10]
			break;
   29fc8:	e006      	b.n	29fd8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29fca:	4a06      	ldr	r2, [pc, #24]	; (29fe4 <system_apb_clock_set_divider+0x50>)
   29fcc:	1dbb      	adds	r3, r7, #6
   29fce:	781b      	ldrb	r3, [r3, #0]
   29fd0:	72d3      	strb	r3, [r2, #11]
			break;
   29fd2:	e001      	b.n	29fd8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29fd4:	2317      	movs	r3, #23
   29fd6:	e000      	b.n	29fda <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29fd8:	2300      	movs	r3, #0
}
   29fda:	0018      	movs	r0, r3
   29fdc:	46bd      	mov	sp, r7
   29fde:	b002      	add	sp, #8
   29fe0:	bd80      	pop	{r7, pc}
   29fe2:	46c0      	nop			; (mov r8, r8)
   29fe4:	40000400 	.word	0x40000400

00029fe8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29fe8:	b580      	push	{r7, lr}
   29fea:	b082      	sub	sp, #8
   29fec:	af00      	add	r7, sp, #0
   29fee:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   29ff0:	687b      	ldr	r3, [r7, #4]
   29ff2:	2201      	movs	r2, #1
   29ff4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   29ff6:	687b      	ldr	r3, [r7, #4]
   29ff8:	2200      	movs	r2, #0
   29ffa:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   29ffc:	687b      	ldr	r3, [r7, #4]
   29ffe:	2200      	movs	r2, #0
   2a000:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2a002:	687b      	ldr	r3, [r7, #4]
   2a004:	2200      	movs	r2, #0
   2a006:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2a008:	687b      	ldr	r3, [r7, #4]
   2a00a:	2200      	movs	r2, #0
   2a00c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2a00e:	687b      	ldr	r3, [r7, #4]
   2a010:	4a0a      	ldr	r2, [pc, #40]	; (2a03c <system_clock_source_dpll_get_config_defaults+0x54>)
   2a012:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2a014:	687b      	ldr	r3, [r7, #4]
   2a016:	2280      	movs	r2, #128	; 0x80
   2a018:	0212      	lsls	r2, r2, #8
   2a01a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2a01c:	687b      	ldr	r3, [r7, #4]
   2a01e:	2201      	movs	r2, #1
   2a020:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2a022:	687b      	ldr	r3, [r7, #4]
   2a024:	2200      	movs	r2, #0
   2a026:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2a028:	687b      	ldr	r3, [r7, #4]
   2a02a:	2200      	movs	r2, #0
   2a02c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2a02e:	687b      	ldr	r3, [r7, #4]
   2a030:	2200      	movs	r2, #0
   2a032:	749a      	strb	r2, [r3, #18]
};
   2a034:	46c0      	nop			; (mov r8, r8)
   2a036:	46bd      	mov	sp, r7
   2a038:	b002      	add	sp, #8
   2a03a:	bd80      	pop	{r7, pc}
   2a03c:	02dc6c00 	.word	0x02dc6c00

0002a040 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2a040:	b580      	push	{r7, lr}
   2a042:	b082      	sub	sp, #8
   2a044:	af00      	add	r7, sp, #0
   2a046:	0002      	movs	r2, r0
   2a048:	1dfb      	adds	r3, r7, #7
   2a04a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2a04c:	4a08      	ldr	r2, [pc, #32]	; (2a070 <system_flash_set_waitstates+0x30>)
   2a04e:	1dfb      	adds	r3, r7, #7
   2a050:	781b      	ldrb	r3, [r3, #0]
   2a052:	210f      	movs	r1, #15
   2a054:	400b      	ands	r3, r1
   2a056:	b2d9      	uxtb	r1, r3
   2a058:	6853      	ldr	r3, [r2, #4]
   2a05a:	200f      	movs	r0, #15
   2a05c:	4001      	ands	r1, r0
   2a05e:	0049      	lsls	r1, r1, #1
   2a060:	201e      	movs	r0, #30
   2a062:	4383      	bics	r3, r0
   2a064:	430b      	orrs	r3, r1
   2a066:	6053      	str	r3, [r2, #4]
}
   2a068:	46c0      	nop			; (mov r8, r8)
   2a06a:	46bd      	mov	sp, r7
   2a06c:	b002      	add	sp, #8
   2a06e:	bd80      	pop	{r7, pc}
   2a070:	41004000 	.word	0x41004000

0002a074 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a074:	b580      	push	{r7, lr}
   2a076:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a078:	46c0      	nop			; (mov r8, r8)
   2a07a:	4b04      	ldr	r3, [pc, #16]	; (2a08c <_system_dfll_wait_for_sync+0x18>)
   2a07c:	68db      	ldr	r3, [r3, #12]
   2a07e:	2210      	movs	r2, #16
   2a080:	4013      	ands	r3, r2
   2a082:	d0fa      	beq.n	2a07a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a084:	46c0      	nop			; (mov r8, r8)
   2a086:	46bd      	mov	sp, r7
   2a088:	bd80      	pop	{r7, pc}
   2a08a:	46c0      	nop			; (mov r8, r8)
   2a08c:	40000800 	.word	0x40000800

0002a090 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a090:	b580      	push	{r7, lr}
   2a092:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a094:	4b0c      	ldr	r3, [pc, #48]	; (2a0c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a096:	2202      	movs	r2, #2
   2a098:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a09a:	4b0c      	ldr	r3, [pc, #48]	; (2a0cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a09c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a09e:	4a0a      	ldr	r2, [pc, #40]	; (2a0c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0a0:	4b0b      	ldr	r3, [pc, #44]	; (2a0d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0a2:	689b      	ldr	r3, [r3, #8]
   2a0a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a0a6:	4a08      	ldr	r2, [pc, #32]	; (2a0c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0a8:	4b09      	ldr	r3, [pc, #36]	; (2a0d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0aa:	685b      	ldr	r3, [r3, #4]
   2a0ac:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a0ae:	4b06      	ldr	r3, [pc, #24]	; (2a0c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0b0:	2200      	movs	r2, #0
   2a0b2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a0b4:	4b05      	ldr	r3, [pc, #20]	; (2a0cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a0b6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a0b8:	4a03      	ldr	r2, [pc, #12]	; (2a0c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0ba:	4b05      	ldr	r3, [pc, #20]	; (2a0d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0bc:	681b      	ldr	r3, [r3, #0]
   2a0be:	b29b      	uxth	r3, r3
   2a0c0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a0c2:	46c0      	nop			; (mov r8, r8)
   2a0c4:	46bd      	mov	sp, r7
   2a0c6:	bd80      	pop	{r7, pc}
   2a0c8:	40000800 	.word	0x40000800
   2a0cc:	0002a075 	.word	0x0002a075
   2a0d0:	200042e0 	.word	0x200042e0

0002a0d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a0d4:	b580      	push	{r7, lr}
   2a0d6:	b082      	sub	sp, #8
   2a0d8:	af00      	add	r7, sp, #0
   2a0da:	0002      	movs	r2, r0
   2a0dc:	1dfb      	adds	r3, r7, #7
   2a0de:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a0e0:	1dfb      	adds	r3, r7, #7
   2a0e2:	781b      	ldrb	r3, [r3, #0]
   2a0e4:	2b08      	cmp	r3, #8
   2a0e6:	d841      	bhi.n	2a16c <system_clock_source_get_hz+0x98>
   2a0e8:	009a      	lsls	r2, r3, #2
   2a0ea:	4b23      	ldr	r3, [pc, #140]	; (2a178 <system_clock_source_get_hz+0xa4>)
   2a0ec:	18d3      	adds	r3, r2, r3
   2a0ee:	681b      	ldr	r3, [r3, #0]
   2a0f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a0f2:	4b22      	ldr	r3, [pc, #136]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a0f4:	691b      	ldr	r3, [r3, #16]
   2a0f6:	e03a      	b.n	2a16e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a0f8:	4b21      	ldr	r3, [pc, #132]	; (2a180 <system_clock_source_get_hz+0xac>)
   2a0fa:	6a1b      	ldr	r3, [r3, #32]
   2a0fc:	059b      	lsls	r3, r3, #22
   2a0fe:	0f9b      	lsrs	r3, r3, #30
   2a100:	b2db      	uxtb	r3, r3
   2a102:	001a      	movs	r2, r3
   2a104:	4b1f      	ldr	r3, [pc, #124]	; (2a184 <system_clock_source_get_hz+0xb0>)
   2a106:	40d3      	lsrs	r3, r2
   2a108:	e031      	b.n	2a16e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a10a:	2380      	movs	r3, #128	; 0x80
   2a10c:	021b      	lsls	r3, r3, #8
   2a10e:	e02e      	b.n	2a16e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a110:	2380      	movs	r3, #128	; 0x80
   2a112:	021b      	lsls	r3, r3, #8
   2a114:	e02b      	b.n	2a16e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a116:	4b19      	ldr	r3, [pc, #100]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a118:	695b      	ldr	r3, [r3, #20]
   2a11a:	e028      	b.n	2a16e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a11c:	4b17      	ldr	r3, [pc, #92]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a11e:	681b      	ldr	r3, [r3, #0]
   2a120:	2202      	movs	r2, #2
   2a122:	4013      	ands	r3, r2
   2a124:	d101      	bne.n	2a12a <system_clock_source_get_hz+0x56>
			return 0;
   2a126:	2300      	movs	r3, #0
   2a128:	e021      	b.n	2a16e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a12a:	4b17      	ldr	r3, [pc, #92]	; (2a188 <system_clock_source_get_hz+0xb4>)
   2a12c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a12e:	4b13      	ldr	r3, [pc, #76]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a130:	681b      	ldr	r3, [r3, #0]
   2a132:	2224      	movs	r2, #36	; 0x24
   2a134:	4013      	ands	r3, r2
   2a136:	2b04      	cmp	r3, #4
   2a138:	d109      	bne.n	2a14e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a13a:	2000      	movs	r0, #0
   2a13c:	4b13      	ldr	r3, [pc, #76]	; (2a18c <system_clock_source_get_hz+0xb8>)
   2a13e:	4798      	blx	r3
   2a140:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a142:	4b0e      	ldr	r3, [pc, #56]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a144:	689b      	ldr	r3, [r3, #8]
   2a146:	041b      	lsls	r3, r3, #16
   2a148:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a14a:	4353      	muls	r3, r2
   2a14c:	e00f      	b.n	2a16e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a14e:	4b10      	ldr	r3, [pc, #64]	; (2a190 <system_clock_source_get_hz+0xbc>)
   2a150:	e00d      	b.n	2a16e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a152:	4a0b      	ldr	r2, [pc, #44]	; (2a180 <system_clock_source_get_hz+0xac>)
   2a154:	2350      	movs	r3, #80	; 0x50
   2a156:	5cd3      	ldrb	r3, [r2, r3]
   2a158:	b2db      	uxtb	r3, r3
   2a15a:	001a      	movs	r2, r3
   2a15c:	2304      	movs	r3, #4
   2a15e:	4013      	ands	r3, r2
   2a160:	d101      	bne.n	2a166 <system_clock_source_get_hz+0x92>
			return 0;
   2a162:	2300      	movs	r3, #0
   2a164:	e003      	b.n	2a16e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a166:	4b05      	ldr	r3, [pc, #20]	; (2a17c <system_clock_source_get_hz+0xa8>)
   2a168:	68db      	ldr	r3, [r3, #12]
   2a16a:	e000      	b.n	2a16e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a16c:	2300      	movs	r3, #0
	}
}
   2a16e:	0018      	movs	r0, r3
   2a170:	46bd      	mov	sp, r7
   2a172:	b002      	add	sp, #8
   2a174:	bd80      	pop	{r7, pc}
   2a176:	46c0      	nop			; (mov r8, r8)
   2a178:	0003a5a0 	.word	0x0003a5a0
   2a17c:	200042e0 	.word	0x200042e0
   2a180:	40000800 	.word	0x40000800
   2a184:	007a1200 	.word	0x007a1200
   2a188:	0002a075 	.word	0x0002a075
   2a18c:	0002ab71 	.word	0x0002ab71
   2a190:	02dc6c00 	.word	0x02dc6c00

0002a194 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a194:	b580      	push	{r7, lr}
   2a196:	b084      	sub	sp, #16
   2a198:	af00      	add	r7, sp, #0
   2a19a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a19c:	4b1a      	ldr	r3, [pc, #104]	; (2a208 <system_clock_source_osc8m_set_config+0x74>)
   2a19e:	6a1b      	ldr	r3, [r3, #32]
   2a1a0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a1a2:	687b      	ldr	r3, [r7, #4]
   2a1a4:	781b      	ldrb	r3, [r3, #0]
   2a1a6:	1c1a      	adds	r2, r3, #0
   2a1a8:	2303      	movs	r3, #3
   2a1aa:	4013      	ands	r3, r2
   2a1ac:	b2da      	uxtb	r2, r3
   2a1ae:	230d      	movs	r3, #13
   2a1b0:	18fb      	adds	r3, r7, r3
   2a1b2:	2103      	movs	r1, #3
   2a1b4:	400a      	ands	r2, r1
   2a1b6:	0010      	movs	r0, r2
   2a1b8:	781a      	ldrb	r2, [r3, #0]
   2a1ba:	2103      	movs	r1, #3
   2a1bc:	438a      	bics	r2, r1
   2a1be:	1c11      	adds	r1, r2, #0
   2a1c0:	1c02      	adds	r2, r0, #0
   2a1c2:	430a      	orrs	r2, r1
   2a1c4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a1c6:	687b      	ldr	r3, [r7, #4]
   2a1c8:	789a      	ldrb	r2, [r3, #2]
   2a1ca:	230c      	movs	r3, #12
   2a1cc:	18fb      	adds	r3, r7, r3
   2a1ce:	01d0      	lsls	r0, r2, #7
   2a1d0:	781a      	ldrb	r2, [r3, #0]
   2a1d2:	217f      	movs	r1, #127	; 0x7f
   2a1d4:	400a      	ands	r2, r1
   2a1d6:	1c11      	adds	r1, r2, #0
   2a1d8:	1c02      	adds	r2, r0, #0
   2a1da:	430a      	orrs	r2, r1
   2a1dc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a1de:	687b      	ldr	r3, [r7, #4]
   2a1e0:	785a      	ldrb	r2, [r3, #1]
   2a1e2:	230c      	movs	r3, #12
   2a1e4:	18fb      	adds	r3, r7, r3
   2a1e6:	2101      	movs	r1, #1
   2a1e8:	400a      	ands	r2, r1
   2a1ea:	0190      	lsls	r0, r2, #6
   2a1ec:	781a      	ldrb	r2, [r3, #0]
   2a1ee:	2140      	movs	r1, #64	; 0x40
   2a1f0:	438a      	bics	r2, r1
   2a1f2:	1c11      	adds	r1, r2, #0
   2a1f4:	1c02      	adds	r2, r0, #0
   2a1f6:	430a      	orrs	r2, r1
   2a1f8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a1fa:	4b03      	ldr	r3, [pc, #12]	; (2a208 <system_clock_source_osc8m_set_config+0x74>)
   2a1fc:	68fa      	ldr	r2, [r7, #12]
   2a1fe:	621a      	str	r2, [r3, #32]
}
   2a200:	46c0      	nop			; (mov r8, r8)
   2a202:	46bd      	mov	sp, r7
   2a204:	b004      	add	sp, #16
   2a206:	bd80      	pop	{r7, pc}
   2a208:	40000800 	.word	0x40000800

0002a20c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a20c:	b580      	push	{r7, lr}
   2a20e:	b086      	sub	sp, #24
   2a210:	af00      	add	r7, sp, #0
   2a212:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a214:	687b      	ldr	r3, [r7, #4]
   2a216:	68db      	ldr	r3, [r3, #12]
   2a218:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a21a:	687b      	ldr	r3, [r7, #4]
   2a21c:	7d1b      	ldrb	r3, [r3, #20]
   2a21e:	2b01      	cmp	r3, #1
   2a220:	d10a      	bne.n	2a238 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a222:	687b      	ldr	r3, [r7, #4]
   2a224:	8a1b      	ldrh	r3, [r3, #16]
   2a226:	3301      	adds	r3, #1
   2a228:	005b      	lsls	r3, r3, #1
   2a22a:	001a      	movs	r2, r3
   2a22c:	4b36      	ldr	r3, [pc, #216]	; (2a308 <system_clock_source_dpll_set_config+0xfc>)
   2a22e:	0011      	movs	r1, r2
   2a230:	6978      	ldr	r0, [r7, #20]
   2a232:	4798      	blx	r3
   2a234:	0003      	movs	r3, r0
   2a236:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a238:	687b      	ldr	r3, [r7, #4]
   2a23a:	689b      	ldr	r3, [r3, #8]
   2a23c:	011a      	lsls	r2, r3, #4
   2a23e:	4b32      	ldr	r3, [pc, #200]	; (2a308 <system_clock_source_dpll_set_config+0xfc>)
   2a240:	6979      	ldr	r1, [r7, #20]
   2a242:	0010      	movs	r0, r2
   2a244:	4798      	blx	r3
   2a246:	0003      	movs	r3, r0
   2a248:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a24a:	693b      	ldr	r3, [r7, #16]
   2a24c:	b2da      	uxtb	r2, r3
   2a24e:	230f      	movs	r3, #15
   2a250:	18fb      	adds	r3, r7, r3
   2a252:	210f      	movs	r1, #15
   2a254:	400a      	ands	r2, r1
   2a256:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a258:	693b      	ldr	r3, [r7, #16]
   2a25a:	091b      	lsrs	r3, r3, #4
   2a25c:	3b01      	subs	r3, #1
   2a25e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a260:	492a      	ldr	r1, [pc, #168]	; (2a30c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a262:	687b      	ldr	r3, [r7, #4]
   2a264:	781b      	ldrb	r3, [r3, #0]
   2a266:	01db      	lsls	r3, r3, #7
   2a268:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a26a:	687b      	ldr	r3, [r7, #4]
   2a26c:	785b      	ldrb	r3, [r3, #1]
   2a26e:	019b      	lsls	r3, r3, #6
   2a270:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a272:	4313      	orrs	r3, r2
   2a274:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a276:	2344      	movs	r3, #68	; 0x44
   2a278:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a27a:	4b24      	ldr	r3, [pc, #144]	; (2a30c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a27c:	220f      	movs	r2, #15
   2a27e:	18ba      	adds	r2, r7, r2
   2a280:	7812      	ldrb	r2, [r2, #0]
   2a282:	0412      	lsls	r2, r2, #16
   2a284:	0011      	movs	r1, r2
   2a286:	22f0      	movs	r2, #240	; 0xf0
   2a288:	0312      	lsls	r2, r2, #12
   2a28a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a28c:	693a      	ldr	r2, [r7, #16]
   2a28e:	0512      	lsls	r2, r2, #20
   2a290:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a292:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a294:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a296:	4b1d      	ldr	r3, [pc, #116]	; (2a30c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a298:	687a      	ldr	r2, [r7, #4]
   2a29a:	8a12      	ldrh	r2, [r2, #16]
   2a29c:	0412      	lsls	r2, r2, #16
   2a29e:	0011      	movs	r1, r2
   2a2a0:	4a1b      	ldr	r2, [pc, #108]	; (2a310 <system_clock_source_dpll_set_config+0x104>)
   2a2a2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a2a4:	687a      	ldr	r2, [r7, #4]
   2a2a6:	7892      	ldrb	r2, [r2, #2]
   2a2a8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a2aa:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a2ac:	687a      	ldr	r2, [r7, #4]
   2a2ae:	7cd2      	ldrb	r2, [r2, #19]
   2a2b0:	0212      	lsls	r2, r2, #8
   2a2b2:	0010      	movs	r0, r2
   2a2b4:	22e0      	movs	r2, #224	; 0xe0
   2a2b6:	00d2      	lsls	r2, r2, #3
   2a2b8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a2ba:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a2bc:	687a      	ldr	r2, [r7, #4]
   2a2be:	7d12      	ldrb	r2, [r2, #20]
   2a2c0:	0112      	lsls	r2, r2, #4
   2a2c2:	0010      	movs	r0, r2
   2a2c4:	2230      	movs	r2, #48	; 0x30
   2a2c6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a2c8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a2ca:	687a      	ldr	r2, [r7, #4]
   2a2cc:	78d2      	ldrb	r2, [r2, #3]
   2a2ce:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a2d0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a2d2:	687a      	ldr	r2, [r7, #4]
   2a2d4:	7912      	ldrb	r2, [r2, #4]
   2a2d6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a2d8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a2da:	687a      	ldr	r2, [r7, #4]
   2a2dc:	7c92      	ldrb	r2, [r2, #18]
   2a2de:	0010      	movs	r0, r2
   2a2e0:	2203      	movs	r2, #3
   2a2e2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a2e4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a2e6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a2e8:	693b      	ldr	r3, [r7, #16]
   2a2ea:	3301      	adds	r3, #1
   2a2ec:	011a      	lsls	r2, r3, #4
   2a2ee:	230f      	movs	r3, #15
   2a2f0:	18fb      	adds	r3, r7, r3
   2a2f2:	781b      	ldrb	r3, [r3, #0]
   2a2f4:	18d3      	adds	r3, r2, r3
   2a2f6:	697a      	ldr	r2, [r7, #20]
   2a2f8:	4353      	muls	r3, r2
   2a2fa:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a2fc:	4b05      	ldr	r3, [pc, #20]	; (2a314 <system_clock_source_dpll_set_config+0x108>)
   2a2fe:	60da      	str	r2, [r3, #12]
}
   2a300:	46c0      	nop			; (mov r8, r8)
   2a302:	46bd      	mov	sp, r7
   2a304:	b006      	add	sp, #24
   2a306:	bd80      	pop	{r7, pc}
   2a308:	00033715 	.word	0x00033715
   2a30c:	40000800 	.word	0x40000800
   2a310:	07ff0000 	.word	0x07ff0000
   2a314:	200042e0 	.word	0x200042e0

0002a318 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a318:	b580      	push	{r7, lr}
   2a31a:	b082      	sub	sp, #8
   2a31c:	af00      	add	r7, sp, #0
   2a31e:	0002      	movs	r2, r0
   2a320:	1dfb      	adds	r3, r7, #7
   2a322:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a324:	1dfb      	adds	r3, r7, #7
   2a326:	781b      	ldrb	r3, [r3, #0]
   2a328:	2b08      	cmp	r3, #8
   2a32a:	d83b      	bhi.n	2a3a4 <system_clock_source_enable+0x8c>
   2a32c:	009a      	lsls	r2, r3, #2
   2a32e:	4b21      	ldr	r3, [pc, #132]	; (2a3b4 <system_clock_source_enable+0x9c>)
   2a330:	18d3      	adds	r3, r2, r3
   2a332:	681b      	ldr	r3, [r3, #0]
   2a334:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a336:	4b20      	ldr	r3, [pc, #128]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a338:	4a1f      	ldr	r2, [pc, #124]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a33a:	6a12      	ldr	r2, [r2, #32]
   2a33c:	2102      	movs	r1, #2
   2a33e:	430a      	orrs	r2, r1
   2a340:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a342:	2300      	movs	r3, #0
   2a344:	e031      	b.n	2a3aa <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a346:	4b1c      	ldr	r3, [pc, #112]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a348:	4a1b      	ldr	r2, [pc, #108]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a34a:	6992      	ldr	r2, [r2, #24]
   2a34c:	2102      	movs	r1, #2
   2a34e:	430a      	orrs	r2, r1
   2a350:	619a      	str	r2, [r3, #24]
		break;
   2a352:	e029      	b.n	2a3a8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a354:	4a18      	ldr	r2, [pc, #96]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a356:	4b18      	ldr	r3, [pc, #96]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a358:	8a1b      	ldrh	r3, [r3, #16]
   2a35a:	b29b      	uxth	r3, r3
   2a35c:	2102      	movs	r1, #2
   2a35e:	430b      	orrs	r3, r1
   2a360:	b29b      	uxth	r3, r3
   2a362:	8213      	strh	r3, [r2, #16]
		break;
   2a364:	e020      	b.n	2a3a8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a366:	4a14      	ldr	r2, [pc, #80]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a368:	4b13      	ldr	r3, [pc, #76]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a36a:	8a9b      	ldrh	r3, [r3, #20]
   2a36c:	b29b      	uxth	r3, r3
   2a36e:	2102      	movs	r1, #2
   2a370:	430b      	orrs	r3, r1
   2a372:	b29b      	uxth	r3, r3
   2a374:	8293      	strh	r3, [r2, #20]
		break;
   2a376:	e017      	b.n	2a3a8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a378:	4b10      	ldr	r3, [pc, #64]	; (2a3bc <system_clock_source_enable+0xa4>)
   2a37a:	681b      	ldr	r3, [r3, #0]
   2a37c:	2202      	movs	r2, #2
   2a37e:	431a      	orrs	r2, r3
   2a380:	4b0e      	ldr	r3, [pc, #56]	; (2a3bc <system_clock_source_enable+0xa4>)
   2a382:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a384:	4b0e      	ldr	r3, [pc, #56]	; (2a3c0 <system_clock_source_enable+0xa8>)
   2a386:	4798      	blx	r3
		break;
   2a388:	e00e      	b.n	2a3a8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a38a:	4a0b      	ldr	r2, [pc, #44]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a38c:	490a      	ldr	r1, [pc, #40]	; (2a3b8 <system_clock_source_enable+0xa0>)
   2a38e:	2344      	movs	r3, #68	; 0x44
   2a390:	5ccb      	ldrb	r3, [r1, r3]
   2a392:	b2db      	uxtb	r3, r3
   2a394:	2102      	movs	r1, #2
   2a396:	430b      	orrs	r3, r1
   2a398:	b2d9      	uxtb	r1, r3
   2a39a:	2344      	movs	r3, #68	; 0x44
   2a39c:	54d1      	strb	r1, [r2, r3]
		break;
   2a39e:	e003      	b.n	2a3a8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a3a0:	2300      	movs	r3, #0
   2a3a2:	e002      	b.n	2a3aa <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a3a4:	2317      	movs	r3, #23
   2a3a6:	e000      	b.n	2a3aa <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a3a8:	2300      	movs	r3, #0
}
   2a3aa:	0018      	movs	r0, r3
   2a3ac:	46bd      	mov	sp, r7
   2a3ae:	b002      	add	sp, #8
   2a3b0:	bd80      	pop	{r7, pc}
   2a3b2:	46c0      	nop			; (mov r8, r8)
   2a3b4:	0003a5c4 	.word	0x0003a5c4
   2a3b8:	40000800 	.word	0x40000800
   2a3bc:	200042e0 	.word	0x200042e0
   2a3c0:	0002a091 	.word	0x0002a091

0002a3c4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a3c4:	b580      	push	{r7, lr}
   2a3c6:	b084      	sub	sp, #16
   2a3c8:	af00      	add	r7, sp, #0
   2a3ca:	0002      	movs	r2, r0
   2a3cc:	1dfb      	adds	r3, r7, #7
   2a3ce:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a3d0:	2300      	movs	r3, #0
   2a3d2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a3d4:	1dfb      	adds	r3, r7, #7
   2a3d6:	781b      	ldrb	r3, [r3, #0]
   2a3d8:	2b08      	cmp	r3, #8
   2a3da:	d821      	bhi.n	2a420 <system_clock_source_is_ready+0x5c>
   2a3dc:	009a      	lsls	r2, r3, #2
   2a3de:	4b18      	ldr	r3, [pc, #96]	; (2a440 <system_clock_source_is_ready+0x7c>)
   2a3e0:	18d3      	adds	r3, r2, r3
   2a3e2:	681b      	ldr	r3, [r3, #0]
   2a3e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a3e6:	2308      	movs	r3, #8
   2a3e8:	60fb      	str	r3, [r7, #12]
		break;
   2a3ea:	e01b      	b.n	2a424 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a3ec:	2304      	movs	r3, #4
   2a3ee:	60fb      	str	r3, [r7, #12]
		break;
   2a3f0:	e018      	b.n	2a424 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a3f2:	2301      	movs	r3, #1
   2a3f4:	60fb      	str	r3, [r7, #12]
		break;
   2a3f6:	e015      	b.n	2a424 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a3f8:	2302      	movs	r3, #2
   2a3fa:	60fb      	str	r3, [r7, #12]
		break;
   2a3fc:	e012      	b.n	2a424 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a3fe:	2310      	movs	r3, #16
   2a400:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a402:	e00f      	b.n	2a424 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a404:	4a0f      	ldr	r2, [pc, #60]	; (2a444 <system_clock_source_is_ready+0x80>)
   2a406:	2350      	movs	r3, #80	; 0x50
   2a408:	5cd3      	ldrb	r3, [r2, r3]
   2a40a:	b2db      	uxtb	r3, r3
   2a40c:	001a      	movs	r2, r3
   2a40e:	2303      	movs	r3, #3
   2a410:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a412:	3b03      	subs	r3, #3
   2a414:	425a      	negs	r2, r3
   2a416:	4153      	adcs	r3, r2
   2a418:	b2db      	uxtb	r3, r3
   2a41a:	e00c      	b.n	2a436 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a41c:	2301      	movs	r3, #1
   2a41e:	e00a      	b.n	2a436 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a420:	2300      	movs	r3, #0
   2a422:	e008      	b.n	2a436 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a424:	4b07      	ldr	r3, [pc, #28]	; (2a444 <system_clock_source_is_ready+0x80>)
   2a426:	68db      	ldr	r3, [r3, #12]
   2a428:	68fa      	ldr	r2, [r7, #12]
   2a42a:	401a      	ands	r2, r3
   2a42c:	68fb      	ldr	r3, [r7, #12]
   2a42e:	1ad3      	subs	r3, r2, r3
   2a430:	425a      	negs	r2, r3
   2a432:	4153      	adcs	r3, r2
   2a434:	b2db      	uxtb	r3, r3
}
   2a436:	0018      	movs	r0, r3
   2a438:	46bd      	mov	sp, r7
   2a43a:	b004      	add	sp, #16
   2a43c:	bd80      	pop	{r7, pc}
   2a43e:	46c0      	nop			; (mov r8, r8)
   2a440:	0003a5e8 	.word	0x0003a5e8
   2a444:	40000800 	.word	0x40000800

0002a448 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a448:	b580      	push	{r7, lr}
   2a44a:	b082      	sub	sp, #8
   2a44c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a44e:	003b      	movs	r3, r7
   2a450:	2203      	movs	r2, #3
   2a452:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a454:	2300      	movs	r3, #0
   2a456:	607b      	str	r3, [r7, #4]
   2a458:	e009      	b.n	2a46e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a45a:	687b      	ldr	r3, [r7, #4]
   2a45c:	b2db      	uxtb	r3, r3
   2a45e:	003a      	movs	r2, r7
   2a460:	0011      	movs	r1, r2
   2a462:	0018      	movs	r0, r3
   2a464:	4b05      	ldr	r3, [pc, #20]	; (2a47c <_switch_peripheral_gclk+0x34>)
   2a466:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a468:	687b      	ldr	r3, [r7, #4]
   2a46a:	3301      	adds	r3, #1
   2a46c:	607b      	str	r3, [r7, #4]
   2a46e:	687b      	ldr	r3, [r7, #4]
   2a470:	2b24      	cmp	r3, #36	; 0x24
   2a472:	d9f2      	bls.n	2a45a <_switch_peripheral_gclk+0x12>
	}
}
   2a474:	46c0      	nop			; (mov r8, r8)
   2a476:	46bd      	mov	sp, r7
   2a478:	b002      	add	sp, #8
   2a47a:	bd80      	pop	{r7, pc}
   2a47c:	0002aa4d 	.word	0x0002aa4d

0002a480 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a480:	b580      	push	{r7, lr}
   2a482:	b0a6      	sub	sp, #152	; 0x98
   2a484:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a486:	4b92      	ldr	r3, [pc, #584]	; (2a6d0 <system_clock_init+0x250>)
   2a488:	22c2      	movs	r2, #194	; 0xc2
   2a48a:	00d2      	lsls	r2, r2, #3
   2a48c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a48e:	2003      	movs	r0, #3
   2a490:	4b90      	ldr	r3, [pc, #576]	; (2a6d4 <system_clock_init+0x254>)
   2a492:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a494:	4b90      	ldr	r3, [pc, #576]	; (2a6d8 <system_clock_init+0x258>)
   2a496:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a498:	2394      	movs	r3, #148	; 0x94
   2a49a:	18fb      	adds	r3, r7, r3
   2a49c:	0018      	movs	r0, r3
   2a49e:	4b8f      	ldr	r3, [pc, #572]	; (2a6dc <system_clock_init+0x25c>)
   2a4a0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a4a2:	2394      	movs	r3, #148	; 0x94
   2a4a4:	18fb      	adds	r3, r7, r3
   2a4a6:	2200      	movs	r2, #0
   2a4a8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a4aa:	2394      	movs	r3, #148	; 0x94
   2a4ac:	18fb      	adds	r3, r7, r3
   2a4ae:	2201      	movs	r2, #1
   2a4b0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a4b2:	2394      	movs	r3, #148	; 0x94
   2a4b4:	18fb      	adds	r3, r7, r3
   2a4b6:	2200      	movs	r2, #0
   2a4b8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a4ba:	2394      	movs	r3, #148	; 0x94
   2a4bc:	18fb      	adds	r3, r7, r3
   2a4be:	0018      	movs	r0, r3
   2a4c0:	4b87      	ldr	r3, [pc, #540]	; (2a6e0 <system_clock_init+0x260>)
   2a4c2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a4c4:	2006      	movs	r0, #6
   2a4c6:	4b87      	ldr	r3, [pc, #540]	; (2a6e4 <system_clock_init+0x264>)
   2a4c8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a4ca:	4b87      	ldr	r3, [pc, #540]	; (2a6e8 <system_clock_init+0x268>)
   2a4cc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a4ce:	2360      	movs	r3, #96	; 0x60
   2a4d0:	18fb      	adds	r3, r7, r3
   2a4d2:	0018      	movs	r0, r3
   2a4d4:	4b85      	ldr	r3, [pc, #532]	; (2a6ec <system_clock_init+0x26c>)
   2a4d6:	4798      	blx	r3
   2a4d8:	2360      	movs	r3, #96	; 0x60
   2a4da:	18fb      	adds	r3, r7, r3
   2a4dc:	2206      	movs	r2, #6
   2a4de:	701a      	strb	r2, [r3, #0]
   2a4e0:	2360      	movs	r3, #96	; 0x60
   2a4e2:	18fb      	adds	r3, r7, r3
   2a4e4:	2208      	movs	r2, #8
   2a4e6:	605a      	str	r2, [r3, #4]
   2a4e8:	2360      	movs	r3, #96	; 0x60
   2a4ea:	18fb      	adds	r3, r7, r3
   2a4ec:	2200      	movs	r2, #0
   2a4ee:	721a      	strb	r2, [r3, #8]
   2a4f0:	2360      	movs	r3, #96	; 0x60
   2a4f2:	18fb      	adds	r3, r7, r3
   2a4f4:	2200      	movs	r2, #0
   2a4f6:	725a      	strb	r2, [r3, #9]
   2a4f8:	2360      	movs	r3, #96	; 0x60
   2a4fa:	18fb      	adds	r3, r7, r3
   2a4fc:	0019      	movs	r1, r3
   2a4fe:	2001      	movs	r0, #1
   2a500:	4b7b      	ldr	r3, [pc, #492]	; (2a6f0 <system_clock_init+0x270>)
   2a502:	4798      	blx	r3
   2a504:	2001      	movs	r0, #1
   2a506:	4b7b      	ldr	r3, [pc, #492]	; (2a6f4 <system_clock_init+0x274>)
   2a508:	4798      	blx	r3
   2a50a:	2354      	movs	r3, #84	; 0x54
   2a50c:	18fb      	adds	r3, r7, r3
   2a50e:	0018      	movs	r0, r3
   2a510:	4b76      	ldr	r3, [pc, #472]	; (2a6ec <system_clock_init+0x26c>)
   2a512:	4798      	blx	r3
   2a514:	2354      	movs	r3, #84	; 0x54
   2a516:	18fb      	adds	r3, r7, r3
   2a518:	2203      	movs	r2, #3
   2a51a:	701a      	strb	r2, [r3, #0]
   2a51c:	2354      	movs	r3, #84	; 0x54
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	2201      	movs	r2, #1
   2a522:	605a      	str	r2, [r3, #4]
   2a524:	2354      	movs	r3, #84	; 0x54
   2a526:	18fb      	adds	r3, r7, r3
   2a528:	2201      	movs	r2, #1
   2a52a:	721a      	strb	r2, [r3, #8]
   2a52c:	2354      	movs	r3, #84	; 0x54
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	2200      	movs	r2, #0
   2a532:	725a      	strb	r2, [r3, #9]
   2a534:	2354      	movs	r3, #84	; 0x54
   2a536:	18fb      	adds	r3, r7, r3
   2a538:	0019      	movs	r1, r3
   2a53a:	2002      	movs	r0, #2
   2a53c:	4b6c      	ldr	r3, [pc, #432]	; (2a6f0 <system_clock_init+0x270>)
   2a53e:	4798      	blx	r3
   2a540:	2002      	movs	r0, #2
   2a542:	4b6c      	ldr	r3, [pc, #432]	; (2a6f4 <system_clock_init+0x274>)
   2a544:	4798      	blx	r3
   2a546:	233c      	movs	r3, #60	; 0x3c
   2a548:	18fb      	adds	r3, r7, r3
   2a54a:	0018      	movs	r0, r3
   2a54c:	4b67      	ldr	r3, [pc, #412]	; (2a6ec <system_clock_init+0x26c>)
   2a54e:	4798      	blx	r3
   2a550:	233c      	movs	r3, #60	; 0x3c
   2a552:	18fb      	adds	r3, r7, r3
   2a554:	2203      	movs	r2, #3
   2a556:	701a      	strb	r2, [r3, #0]
   2a558:	233c      	movs	r3, #60	; 0x3c
   2a55a:	18fb      	adds	r3, r7, r3
   2a55c:	2220      	movs	r2, #32
   2a55e:	605a      	str	r2, [r3, #4]
   2a560:	233c      	movs	r3, #60	; 0x3c
   2a562:	18fb      	adds	r3, r7, r3
   2a564:	2200      	movs	r2, #0
   2a566:	721a      	strb	r2, [r3, #8]
   2a568:	233c      	movs	r3, #60	; 0x3c
   2a56a:	18fb      	adds	r3, r7, r3
   2a56c:	2200      	movs	r2, #0
   2a56e:	725a      	strb	r2, [r3, #9]
   2a570:	233c      	movs	r3, #60	; 0x3c
   2a572:	18fb      	adds	r3, r7, r3
   2a574:	0019      	movs	r1, r3
   2a576:	2004      	movs	r0, #4
   2a578:	4b5d      	ldr	r3, [pc, #372]	; (2a6f0 <system_clock_init+0x270>)
   2a57a:	4798      	blx	r3
   2a57c:	2004      	movs	r0, #4
   2a57e:	4b5d      	ldr	r3, [pc, #372]	; (2a6f4 <system_clock_init+0x274>)
   2a580:	4798      	blx	r3
   2a582:	2330      	movs	r3, #48	; 0x30
   2a584:	18fb      	adds	r3, r7, r3
   2a586:	0018      	movs	r0, r3
   2a588:	4b58      	ldr	r3, [pc, #352]	; (2a6ec <system_clock_init+0x26c>)
   2a58a:	4798      	blx	r3
   2a58c:	2330      	movs	r3, #48	; 0x30
   2a58e:	18fb      	adds	r3, r7, r3
   2a590:	2206      	movs	r2, #6
   2a592:	701a      	strb	r2, [r3, #0]
   2a594:	2330      	movs	r3, #48	; 0x30
   2a596:	18fb      	adds	r3, r7, r3
   2a598:	2201      	movs	r2, #1
   2a59a:	605a      	str	r2, [r3, #4]
   2a59c:	2330      	movs	r3, #48	; 0x30
   2a59e:	18fb      	adds	r3, r7, r3
   2a5a0:	2200      	movs	r2, #0
   2a5a2:	721a      	strb	r2, [r3, #8]
   2a5a4:	2330      	movs	r3, #48	; 0x30
   2a5a6:	18fb      	adds	r3, r7, r3
   2a5a8:	2200      	movs	r2, #0
   2a5aa:	725a      	strb	r2, [r3, #9]
   2a5ac:	2330      	movs	r3, #48	; 0x30
   2a5ae:	18fb      	adds	r3, r7, r3
   2a5b0:	0019      	movs	r1, r3
   2a5b2:	2005      	movs	r0, #5
   2a5b4:	4b4e      	ldr	r3, [pc, #312]	; (2a6f0 <system_clock_init+0x270>)
   2a5b6:	4798      	blx	r3
   2a5b8:	2005      	movs	r0, #5
   2a5ba:	4b4e      	ldr	r3, [pc, #312]	; (2a6f4 <system_clock_init+0x274>)
   2a5bc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a5be:	2390      	movs	r3, #144	; 0x90
   2a5c0:	18fb      	adds	r3, r7, r3
   2a5c2:	0018      	movs	r0, r3
   2a5c4:	4b4c      	ldr	r3, [pc, #304]	; (2a6f8 <system_clock_init+0x278>)
   2a5c6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a5c8:	2390      	movs	r3, #144	; 0x90
   2a5ca:	18fb      	adds	r3, r7, r3
   2a5cc:	2201      	movs	r2, #1
   2a5ce:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a5d0:	2390      	movs	r3, #144	; 0x90
   2a5d2:	18fb      	adds	r3, r7, r3
   2a5d4:	0019      	movs	r1, r3
   2a5d6:	2001      	movs	r0, #1
   2a5d8:	4b48      	ldr	r3, [pc, #288]	; (2a6fc <system_clock_init+0x27c>)
   2a5da:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a5dc:	2001      	movs	r0, #1
   2a5de:	4b48      	ldr	r3, [pc, #288]	; (2a700 <system_clock_init+0x280>)
   2a5e0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a5e2:	2378      	movs	r3, #120	; 0x78
   2a5e4:	18fb      	adds	r3, r7, r3
   2a5e6:	0018      	movs	r0, r3
   2a5e8:	4b46      	ldr	r3, [pc, #280]	; (2a704 <system_clock_init+0x284>)
   2a5ea:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a5ec:	2378      	movs	r3, #120	; 0x78
   2a5ee:	18fb      	adds	r3, r7, r3
   2a5f0:	2200      	movs	r2, #0
   2a5f2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a5f4:	2378      	movs	r3, #120	; 0x78
   2a5f6:	18fb      	adds	r3, r7, r3
   2a5f8:	2200      	movs	r2, #0
   2a5fa:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a5fc:	2378      	movs	r3, #120	; 0x78
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	2200      	movs	r2, #0
   2a602:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a604:	2378      	movs	r3, #120	; 0x78
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	2200      	movs	r2, #0
   2a60a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a60c:	2378      	movs	r3, #120	; 0x78
   2a60e:	18fb      	adds	r3, r7, r3
   2a610:	2200      	movs	r2, #0
   2a612:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a614:	2378      	movs	r3, #120	; 0x78
   2a616:	18fb      	adds	r3, r7, r3
   2a618:	2200      	movs	r2, #0
   2a61a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a61c:	2378      	movs	r3, #120	; 0x78
   2a61e:	18fb      	adds	r3, r7, r3
   2a620:	2200      	movs	r2, #0
   2a622:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a624:	2378      	movs	r3, #120	; 0x78
   2a626:	18fb      	adds	r3, r7, r3
   2a628:	2202      	movs	r2, #2
   2a62a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a62c:	2378      	movs	r3, #120	; 0x78
   2a62e:	18fb      	adds	r3, r7, r3
   2a630:	4a35      	ldr	r2, [pc, #212]	; (2a708 <system_clock_init+0x288>)
   2a632:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a634:	2378      	movs	r3, #120	; 0x78
   2a636:	18fb      	adds	r3, r7, r3
   2a638:	2201      	movs	r2, #1
   2a63a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a63c:	2378      	movs	r3, #120	; 0x78
   2a63e:	18fb      	adds	r3, r7, r3
   2a640:	4a32      	ldr	r2, [pc, #200]	; (2a70c <system_clock_init+0x28c>)
   2a642:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a644:	2378      	movs	r3, #120	; 0x78
   2a646:	18fb      	adds	r3, r7, r3
   2a648:	0018      	movs	r0, r3
   2a64a:	4b31      	ldr	r3, [pc, #196]	; (2a710 <system_clock_init+0x290>)
   2a64c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a64e:	2008      	movs	r0, #8
   2a650:	4b24      	ldr	r3, [pc, #144]	; (2a6e4 <system_clock_init+0x264>)
   2a652:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a654:	46c0      	nop			; (mov r8, r8)
   2a656:	2008      	movs	r0, #8
   2a658:	4b2e      	ldr	r3, [pc, #184]	; (2a714 <system_clock_init+0x294>)
   2a65a:	4798      	blx	r3
   2a65c:	0003      	movs	r3, r0
   2a65e:	001a      	movs	r2, r3
   2a660:	2301      	movs	r3, #1
   2a662:	4053      	eors	r3, r2
   2a664:	b2db      	uxtb	r3, r3
   2a666:	2b00      	cmp	r3, #0
   2a668:	d1f5      	bne.n	2a656 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a66a:	4919      	ldr	r1, [pc, #100]	; (2a6d0 <system_clock_init+0x250>)
   2a66c:	2244      	movs	r2, #68	; 0x44
   2a66e:	5c8b      	ldrb	r3, [r1, r2]
   2a670:	2080      	movs	r0, #128	; 0x80
   2a672:	4240      	negs	r0, r0
   2a674:	4303      	orrs	r3, r0
   2a676:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a678:	2000      	movs	r0, #0
   2a67a:	4b27      	ldr	r3, [pc, #156]	; (2a718 <system_clock_init+0x298>)
   2a67c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a67e:	2100      	movs	r1, #0
   2a680:	2000      	movs	r0, #0
   2a682:	4b26      	ldr	r3, [pc, #152]	; (2a71c <system_clock_init+0x29c>)
   2a684:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a686:	2100      	movs	r1, #0
   2a688:	2001      	movs	r0, #1
   2a68a:	4b24      	ldr	r3, [pc, #144]	; (2a71c <system_clock_init+0x29c>)
   2a68c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a68e:	2100      	movs	r1, #0
   2a690:	2002      	movs	r0, #2
   2a692:	4b22      	ldr	r3, [pc, #136]	; (2a71c <system_clock_init+0x29c>)
   2a694:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a696:	003b      	movs	r3, r7
   2a698:	0018      	movs	r0, r3
   2a69a:	4b14      	ldr	r3, [pc, #80]	; (2a6ec <system_clock_init+0x26c>)
   2a69c:	4798      	blx	r3
   2a69e:	003b      	movs	r3, r7
   2a6a0:	2208      	movs	r2, #8
   2a6a2:	701a      	strb	r2, [r3, #0]
   2a6a4:	003b      	movs	r3, r7
   2a6a6:	2201      	movs	r2, #1
   2a6a8:	605a      	str	r2, [r3, #4]
   2a6aa:	003b      	movs	r3, r7
   2a6ac:	2200      	movs	r2, #0
   2a6ae:	721a      	strb	r2, [r3, #8]
   2a6b0:	003b      	movs	r3, r7
   2a6b2:	2201      	movs	r2, #1
   2a6b4:	725a      	strb	r2, [r3, #9]
   2a6b6:	003b      	movs	r3, r7
   2a6b8:	0019      	movs	r1, r3
   2a6ba:	2000      	movs	r0, #0
   2a6bc:	4b0c      	ldr	r3, [pc, #48]	; (2a6f0 <system_clock_init+0x270>)
   2a6be:	4798      	blx	r3
   2a6c0:	2000      	movs	r0, #0
   2a6c2:	4b0c      	ldr	r3, [pc, #48]	; (2a6f4 <system_clock_init+0x274>)
   2a6c4:	4798      	blx	r3
#endif
}
   2a6c6:	46c0      	nop			; (mov r8, r8)
   2a6c8:	46bd      	mov	sp, r7
   2a6ca:	b026      	add	sp, #152	; 0x98
   2a6cc:	bd80      	pop	{r7, pc}
   2a6ce:	46c0      	nop			; (mov r8, r8)
   2a6d0:	40000800 	.word	0x40000800
   2a6d4:	0002a041 	.word	0x0002a041
   2a6d8:	0002a449 	.word	0x0002a449
   2a6dc:	00029f51 	.word	0x00029f51
   2a6e0:	0002a195 	.word	0x0002a195
   2a6e4:	0002a319 	.word	0x0002a319
   2a6e8:	0002a7c5 	.word	0x0002a7c5
   2a6ec:	00029f0d 	.word	0x00029f0d
   2a6f0:	0002a7f5 	.word	0x0002a7f5
   2a6f4:	0002a919 	.word	0x0002a919
   2a6f8:	00029f3b 	.word	0x00029f3b
   2a6fc:	0002aa4d 	.word	0x0002aa4d
   2a700:	0002aa91 	.word	0x0002aa91
   2a704:	00029fe9 	.word	0x00029fe9
   2a708:	000f4240 	.word	0x000f4240
   2a70c:	02dc6c00 	.word	0x02dc6c00
   2a710:	0002a20d 	.word	0x0002a20d
   2a714:	0002a3c5 	.word	0x0002a3c5
   2a718:	00029f75 	.word	0x00029f75
   2a71c:	00029f95 	.word	0x00029f95

0002a720 <system_apb_clock_set_mask>:
{
   2a720:	b580      	push	{r7, lr}
   2a722:	b082      	sub	sp, #8
   2a724:	af00      	add	r7, sp, #0
   2a726:	0002      	movs	r2, r0
   2a728:	6039      	str	r1, [r7, #0]
   2a72a:	1dfb      	adds	r3, r7, #7
   2a72c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a72e:	1dfb      	adds	r3, r7, #7
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	2b01      	cmp	r3, #1
   2a734:	d00a      	beq.n	2a74c <system_apb_clock_set_mask+0x2c>
   2a736:	2b02      	cmp	r3, #2
   2a738:	d00f      	beq.n	2a75a <system_apb_clock_set_mask+0x3a>
   2a73a:	2b00      	cmp	r3, #0
   2a73c:	d114      	bne.n	2a768 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a73e:	4b0e      	ldr	r3, [pc, #56]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a740:	4a0d      	ldr	r2, [pc, #52]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a742:	6991      	ldr	r1, [r2, #24]
   2a744:	683a      	ldr	r2, [r7, #0]
   2a746:	430a      	orrs	r2, r1
   2a748:	619a      	str	r2, [r3, #24]
			break;
   2a74a:	e00f      	b.n	2a76c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a74c:	4b0a      	ldr	r3, [pc, #40]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a74e:	4a0a      	ldr	r2, [pc, #40]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a750:	69d1      	ldr	r1, [r2, #28]
   2a752:	683a      	ldr	r2, [r7, #0]
   2a754:	430a      	orrs	r2, r1
   2a756:	61da      	str	r2, [r3, #28]
			break;
   2a758:	e008      	b.n	2a76c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a75a:	4b07      	ldr	r3, [pc, #28]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a75c:	4a06      	ldr	r2, [pc, #24]	; (2a778 <system_apb_clock_set_mask+0x58>)
   2a75e:	6a11      	ldr	r1, [r2, #32]
   2a760:	683a      	ldr	r2, [r7, #0]
   2a762:	430a      	orrs	r2, r1
   2a764:	621a      	str	r2, [r3, #32]
			break;
   2a766:	e001      	b.n	2a76c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a768:	2317      	movs	r3, #23
   2a76a:	e000      	b.n	2a76e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a76c:	2300      	movs	r3, #0
}
   2a76e:	0018      	movs	r0, r3
   2a770:	46bd      	mov	sp, r7
   2a772:	b002      	add	sp, #8
   2a774:	bd80      	pop	{r7, pc}
   2a776:	46c0      	nop			; (mov r8, r8)
   2a778:	40000400 	.word	0x40000400

0002a77c <system_interrupt_enter_critical_section>:
{
   2a77c:	b580      	push	{r7, lr}
   2a77e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a780:	4b02      	ldr	r3, [pc, #8]	; (2a78c <system_interrupt_enter_critical_section+0x10>)
   2a782:	4798      	blx	r3
}
   2a784:	46c0      	nop			; (mov r8, r8)
   2a786:	46bd      	mov	sp, r7
   2a788:	bd80      	pop	{r7, pc}
   2a78a:	46c0      	nop			; (mov r8, r8)
   2a78c:	00026db9 	.word	0x00026db9

0002a790 <system_interrupt_leave_critical_section>:
{
   2a790:	b580      	push	{r7, lr}
   2a792:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a794:	4b02      	ldr	r3, [pc, #8]	; (2a7a0 <system_interrupt_leave_critical_section+0x10>)
   2a796:	4798      	blx	r3
}
   2a798:	46c0      	nop			; (mov r8, r8)
   2a79a:	46bd      	mov	sp, r7
   2a79c:	bd80      	pop	{r7, pc}
   2a79e:	46c0      	nop			; (mov r8, r8)
   2a7a0:	00026e0d 	.word	0x00026e0d

0002a7a4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a7a4:	b580      	push	{r7, lr}
   2a7a6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a7a8:	4b05      	ldr	r3, [pc, #20]	; (2a7c0 <system_gclk_is_syncing+0x1c>)
   2a7aa:	785b      	ldrb	r3, [r3, #1]
   2a7ac:	b2db      	uxtb	r3, r3
   2a7ae:	b25b      	sxtb	r3, r3
   2a7b0:	2b00      	cmp	r3, #0
   2a7b2:	da01      	bge.n	2a7b8 <system_gclk_is_syncing+0x14>
		return true;
   2a7b4:	2301      	movs	r3, #1
   2a7b6:	e000      	b.n	2a7ba <system_gclk_is_syncing+0x16>
	}

	return false;
   2a7b8:	2300      	movs	r3, #0
}
   2a7ba:	0018      	movs	r0, r3
   2a7bc:	46bd      	mov	sp, r7
   2a7be:	bd80      	pop	{r7, pc}
   2a7c0:	40000c00 	.word	0x40000c00

0002a7c4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a7c4:	b580      	push	{r7, lr}
   2a7c6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a7c8:	2108      	movs	r1, #8
   2a7ca:	2000      	movs	r0, #0
   2a7cc:	4b07      	ldr	r3, [pc, #28]	; (2a7ec <system_gclk_init+0x28>)
   2a7ce:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a7d0:	4b07      	ldr	r3, [pc, #28]	; (2a7f0 <system_gclk_init+0x2c>)
   2a7d2:	2201      	movs	r2, #1
   2a7d4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a7d6:	46c0      	nop			; (mov r8, r8)
   2a7d8:	4b05      	ldr	r3, [pc, #20]	; (2a7f0 <system_gclk_init+0x2c>)
   2a7da:	781b      	ldrb	r3, [r3, #0]
   2a7dc:	b2db      	uxtb	r3, r3
   2a7de:	001a      	movs	r2, r3
   2a7e0:	2301      	movs	r3, #1
   2a7e2:	4013      	ands	r3, r2
   2a7e4:	d1f8      	bne.n	2a7d8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a7e6:	46c0      	nop			; (mov r8, r8)
   2a7e8:	46bd      	mov	sp, r7
   2a7ea:	bd80      	pop	{r7, pc}
   2a7ec:	0002a721 	.word	0x0002a721
   2a7f0:	40000c00 	.word	0x40000c00

0002a7f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a7f4:	b580      	push	{r7, lr}
   2a7f6:	b086      	sub	sp, #24
   2a7f8:	af00      	add	r7, sp, #0
   2a7fa:	0002      	movs	r2, r0
   2a7fc:	6039      	str	r1, [r7, #0]
   2a7fe:	1dfb      	adds	r3, r7, #7
   2a800:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a802:	1dfb      	adds	r3, r7, #7
   2a804:	781b      	ldrb	r3, [r3, #0]
   2a806:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a808:	1dfb      	adds	r3, r7, #7
   2a80a:	781b      	ldrb	r3, [r3, #0]
   2a80c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a80e:	683b      	ldr	r3, [r7, #0]
   2a810:	781b      	ldrb	r3, [r3, #0]
   2a812:	021b      	lsls	r3, r3, #8
   2a814:	001a      	movs	r2, r3
   2a816:	697b      	ldr	r3, [r7, #20]
   2a818:	4313      	orrs	r3, r2
   2a81a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a81c:	683b      	ldr	r3, [r7, #0]
   2a81e:	785b      	ldrb	r3, [r3, #1]
   2a820:	2b00      	cmp	r3, #0
   2a822:	d004      	beq.n	2a82e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a824:	697b      	ldr	r3, [r7, #20]
   2a826:	2280      	movs	r2, #128	; 0x80
   2a828:	02d2      	lsls	r2, r2, #11
   2a82a:	4313      	orrs	r3, r2
   2a82c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a82e:	683b      	ldr	r3, [r7, #0]
   2a830:	7a5b      	ldrb	r3, [r3, #9]
   2a832:	2b00      	cmp	r3, #0
   2a834:	d004      	beq.n	2a840 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a836:	697b      	ldr	r3, [r7, #20]
   2a838:	2280      	movs	r2, #128	; 0x80
   2a83a:	0312      	lsls	r2, r2, #12
   2a83c:	4313      	orrs	r3, r2
   2a83e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a840:	683b      	ldr	r3, [r7, #0]
   2a842:	685b      	ldr	r3, [r3, #4]
   2a844:	2b01      	cmp	r3, #1
   2a846:	d92c      	bls.n	2a8a2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a848:	683b      	ldr	r3, [r7, #0]
   2a84a:	685a      	ldr	r2, [r3, #4]
   2a84c:	683b      	ldr	r3, [r7, #0]
   2a84e:	685b      	ldr	r3, [r3, #4]
   2a850:	3b01      	subs	r3, #1
   2a852:	4013      	ands	r3, r2
   2a854:	d11a      	bne.n	2a88c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a856:	2300      	movs	r3, #0
   2a858:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a85a:	2302      	movs	r3, #2
   2a85c:	60bb      	str	r3, [r7, #8]
   2a85e:	e005      	b.n	2a86c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a860:	68fb      	ldr	r3, [r7, #12]
   2a862:	3301      	adds	r3, #1
   2a864:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a866:	68bb      	ldr	r3, [r7, #8]
   2a868:	005b      	lsls	r3, r3, #1
   2a86a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a86c:	683b      	ldr	r3, [r7, #0]
   2a86e:	685a      	ldr	r2, [r3, #4]
   2a870:	68bb      	ldr	r3, [r7, #8]
   2a872:	429a      	cmp	r2, r3
   2a874:	d8f4      	bhi.n	2a860 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a876:	68fb      	ldr	r3, [r7, #12]
   2a878:	021b      	lsls	r3, r3, #8
   2a87a:	693a      	ldr	r2, [r7, #16]
   2a87c:	4313      	orrs	r3, r2
   2a87e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a880:	697b      	ldr	r3, [r7, #20]
   2a882:	2280      	movs	r2, #128	; 0x80
   2a884:	0352      	lsls	r2, r2, #13
   2a886:	4313      	orrs	r3, r2
   2a888:	617b      	str	r3, [r7, #20]
   2a88a:	e00a      	b.n	2a8a2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a88c:	683b      	ldr	r3, [r7, #0]
   2a88e:	685b      	ldr	r3, [r3, #4]
   2a890:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a892:	693a      	ldr	r2, [r7, #16]
   2a894:	4313      	orrs	r3, r2
   2a896:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a898:	697b      	ldr	r3, [r7, #20]
   2a89a:	2280      	movs	r2, #128	; 0x80
   2a89c:	0292      	lsls	r2, r2, #10
   2a89e:	4313      	orrs	r3, r2
   2a8a0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a8a2:	683b      	ldr	r3, [r7, #0]
   2a8a4:	7a1b      	ldrb	r3, [r3, #8]
   2a8a6:	2b00      	cmp	r3, #0
   2a8a8:	d004      	beq.n	2a8b4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a8aa:	697b      	ldr	r3, [r7, #20]
   2a8ac:	2280      	movs	r2, #128	; 0x80
   2a8ae:	0392      	lsls	r2, r2, #14
   2a8b0:	4313      	orrs	r3, r2
   2a8b2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a8b4:	46c0      	nop			; (mov r8, r8)
   2a8b6:	4b13      	ldr	r3, [pc, #76]	; (2a904 <system_gclk_gen_set_config+0x110>)
   2a8b8:	4798      	blx	r3
   2a8ba:	1e03      	subs	r3, r0, #0
   2a8bc:	d1fb      	bne.n	2a8b6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a8be:	4b12      	ldr	r3, [pc, #72]	; (2a908 <system_gclk_gen_set_config+0x114>)
   2a8c0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a8c2:	4a12      	ldr	r2, [pc, #72]	; (2a90c <system_gclk_gen_set_config+0x118>)
   2a8c4:	1dfb      	adds	r3, r7, #7
   2a8c6:	781b      	ldrb	r3, [r3, #0]
   2a8c8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a8ca:	46c0      	nop			; (mov r8, r8)
   2a8cc:	4b0d      	ldr	r3, [pc, #52]	; (2a904 <system_gclk_gen_set_config+0x110>)
   2a8ce:	4798      	blx	r3
   2a8d0:	1e03      	subs	r3, r0, #0
   2a8d2:	d1fb      	bne.n	2a8cc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a8d4:	4b0e      	ldr	r3, [pc, #56]	; (2a910 <system_gclk_gen_set_config+0x11c>)
   2a8d6:	693a      	ldr	r2, [r7, #16]
   2a8d8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a8da:	46c0      	nop			; (mov r8, r8)
   2a8dc:	4b09      	ldr	r3, [pc, #36]	; (2a904 <system_gclk_gen_set_config+0x110>)
   2a8de:	4798      	blx	r3
   2a8e0:	1e03      	subs	r3, r0, #0
   2a8e2:	d1fb      	bne.n	2a8dc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a8e4:	4b0a      	ldr	r3, [pc, #40]	; (2a910 <system_gclk_gen_set_config+0x11c>)
   2a8e6:	4a0a      	ldr	r2, [pc, #40]	; (2a910 <system_gclk_gen_set_config+0x11c>)
   2a8e8:	6851      	ldr	r1, [r2, #4]
   2a8ea:	2280      	movs	r2, #128	; 0x80
   2a8ec:	0252      	lsls	r2, r2, #9
   2a8ee:	4011      	ands	r1, r2
   2a8f0:	697a      	ldr	r2, [r7, #20]
   2a8f2:	430a      	orrs	r2, r1
   2a8f4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a8f6:	4b07      	ldr	r3, [pc, #28]	; (2a914 <system_gclk_gen_set_config+0x120>)
   2a8f8:	4798      	blx	r3
}
   2a8fa:	46c0      	nop			; (mov r8, r8)
   2a8fc:	46bd      	mov	sp, r7
   2a8fe:	b006      	add	sp, #24
   2a900:	bd80      	pop	{r7, pc}
   2a902:	46c0      	nop			; (mov r8, r8)
   2a904:	0002a7a5 	.word	0x0002a7a5
   2a908:	0002a77d 	.word	0x0002a77d
   2a90c:	40000c08 	.word	0x40000c08
   2a910:	40000c00 	.word	0x40000c00
   2a914:	0002a791 	.word	0x0002a791

0002a918 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a918:	b580      	push	{r7, lr}
   2a91a:	b082      	sub	sp, #8
   2a91c:	af00      	add	r7, sp, #0
   2a91e:	0002      	movs	r2, r0
   2a920:	1dfb      	adds	r3, r7, #7
   2a922:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a924:	46c0      	nop			; (mov r8, r8)
   2a926:	4b0e      	ldr	r3, [pc, #56]	; (2a960 <system_gclk_gen_enable+0x48>)
   2a928:	4798      	blx	r3
   2a92a:	1e03      	subs	r3, r0, #0
   2a92c:	d1fb      	bne.n	2a926 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a92e:	4b0d      	ldr	r3, [pc, #52]	; (2a964 <system_gclk_gen_enable+0x4c>)
   2a930:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a932:	4a0d      	ldr	r2, [pc, #52]	; (2a968 <system_gclk_gen_enable+0x50>)
   2a934:	1dfb      	adds	r3, r7, #7
   2a936:	781b      	ldrb	r3, [r3, #0]
   2a938:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a93a:	46c0      	nop			; (mov r8, r8)
   2a93c:	4b08      	ldr	r3, [pc, #32]	; (2a960 <system_gclk_gen_enable+0x48>)
   2a93e:	4798      	blx	r3
   2a940:	1e03      	subs	r3, r0, #0
   2a942:	d1fb      	bne.n	2a93c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a944:	4b09      	ldr	r3, [pc, #36]	; (2a96c <system_gclk_gen_enable+0x54>)
   2a946:	4a09      	ldr	r2, [pc, #36]	; (2a96c <system_gclk_gen_enable+0x54>)
   2a948:	6852      	ldr	r2, [r2, #4]
   2a94a:	2180      	movs	r1, #128	; 0x80
   2a94c:	0249      	lsls	r1, r1, #9
   2a94e:	430a      	orrs	r2, r1
   2a950:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a952:	4b07      	ldr	r3, [pc, #28]	; (2a970 <system_gclk_gen_enable+0x58>)
   2a954:	4798      	blx	r3
}
   2a956:	46c0      	nop			; (mov r8, r8)
   2a958:	46bd      	mov	sp, r7
   2a95a:	b002      	add	sp, #8
   2a95c:	bd80      	pop	{r7, pc}
   2a95e:	46c0      	nop			; (mov r8, r8)
   2a960:	0002a7a5 	.word	0x0002a7a5
   2a964:	0002a77d 	.word	0x0002a77d
   2a968:	40000c04 	.word	0x40000c04
   2a96c:	40000c00 	.word	0x40000c00
   2a970:	0002a791 	.word	0x0002a791

0002a974 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a974:	b580      	push	{r7, lr}
   2a976:	b086      	sub	sp, #24
   2a978:	af00      	add	r7, sp, #0
   2a97a:	0002      	movs	r2, r0
   2a97c:	1dfb      	adds	r3, r7, #7
   2a97e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a980:	46c0      	nop			; (mov r8, r8)
   2a982:	4b2a      	ldr	r3, [pc, #168]	; (2aa2c <system_gclk_gen_get_hz+0xb8>)
   2a984:	4798      	blx	r3
   2a986:	1e03      	subs	r3, r0, #0
   2a988:	d1fb      	bne.n	2a982 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a98a:	4b29      	ldr	r3, [pc, #164]	; (2aa30 <system_gclk_gen_get_hz+0xbc>)
   2a98c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a98e:	4a29      	ldr	r2, [pc, #164]	; (2aa34 <system_gclk_gen_get_hz+0xc0>)
   2a990:	1dfb      	adds	r3, r7, #7
   2a992:	781b      	ldrb	r3, [r3, #0]
   2a994:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a996:	46c0      	nop			; (mov r8, r8)
   2a998:	4b24      	ldr	r3, [pc, #144]	; (2aa2c <system_gclk_gen_get_hz+0xb8>)
   2a99a:	4798      	blx	r3
   2a99c:	1e03      	subs	r3, r0, #0
   2a99e:	d1fb      	bne.n	2a998 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a9a0:	4b25      	ldr	r3, [pc, #148]	; (2aa38 <system_gclk_gen_get_hz+0xc4>)
   2a9a2:	685b      	ldr	r3, [r3, #4]
   2a9a4:	04db      	lsls	r3, r3, #19
   2a9a6:	0edb      	lsrs	r3, r3, #27
   2a9a8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a9aa:	0018      	movs	r0, r3
   2a9ac:	4b23      	ldr	r3, [pc, #140]	; (2aa3c <system_gclk_gen_get_hz+0xc8>)
   2a9ae:	4798      	blx	r3
   2a9b0:	0003      	movs	r3, r0
   2a9b2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a9b4:	4a1f      	ldr	r2, [pc, #124]	; (2aa34 <system_gclk_gen_get_hz+0xc0>)
   2a9b6:	1dfb      	adds	r3, r7, #7
   2a9b8:	781b      	ldrb	r3, [r3, #0]
   2a9ba:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a9bc:	4b1e      	ldr	r3, [pc, #120]	; (2aa38 <system_gclk_gen_get_hz+0xc4>)
   2a9be:	685b      	ldr	r3, [r3, #4]
   2a9c0:	02db      	lsls	r3, r3, #11
   2a9c2:	0fdb      	lsrs	r3, r3, #31
   2a9c4:	b2da      	uxtb	r2, r3
   2a9c6:	2313      	movs	r3, #19
   2a9c8:	18fb      	adds	r3, r7, r3
   2a9ca:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a9cc:	4a1c      	ldr	r2, [pc, #112]	; (2aa40 <system_gclk_gen_get_hz+0xcc>)
   2a9ce:	1dfb      	adds	r3, r7, #7
   2a9d0:	781b      	ldrb	r3, [r3, #0]
   2a9d2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a9d4:	46c0      	nop			; (mov r8, r8)
   2a9d6:	4b15      	ldr	r3, [pc, #84]	; (2aa2c <system_gclk_gen_get_hz+0xb8>)
   2a9d8:	4798      	blx	r3
   2a9da:	1e03      	subs	r3, r0, #0
   2a9dc:	d1fb      	bne.n	2a9d6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a9de:	4b16      	ldr	r3, [pc, #88]	; (2aa38 <system_gclk_gen_get_hz+0xc4>)
   2a9e0:	689b      	ldr	r3, [r3, #8]
   2a9e2:	021b      	lsls	r3, r3, #8
   2a9e4:	0c1b      	lsrs	r3, r3, #16
   2a9e6:	b29b      	uxth	r3, r3
   2a9e8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a9ea:	4b16      	ldr	r3, [pc, #88]	; (2aa44 <system_gclk_gen_get_hz+0xd0>)
   2a9ec:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a9ee:	2313      	movs	r3, #19
   2a9f0:	18fb      	adds	r3, r7, r3
   2a9f2:	781b      	ldrb	r3, [r3, #0]
   2a9f4:	2b00      	cmp	r3, #0
   2a9f6:	d109      	bne.n	2aa0c <system_gclk_gen_get_hz+0x98>
   2a9f8:	68fb      	ldr	r3, [r7, #12]
   2a9fa:	2b01      	cmp	r3, #1
   2a9fc:	d906      	bls.n	2aa0c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a9fe:	4b12      	ldr	r3, [pc, #72]	; (2aa48 <system_gclk_gen_get_hz+0xd4>)
   2aa00:	68f9      	ldr	r1, [r7, #12]
   2aa02:	6978      	ldr	r0, [r7, #20]
   2aa04:	4798      	blx	r3
   2aa06:	0003      	movs	r3, r0
   2aa08:	617b      	str	r3, [r7, #20]
   2aa0a:	e00a      	b.n	2aa22 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2aa0c:	2313      	movs	r3, #19
   2aa0e:	18fb      	adds	r3, r7, r3
   2aa10:	781b      	ldrb	r3, [r3, #0]
   2aa12:	2b00      	cmp	r3, #0
   2aa14:	d005      	beq.n	2aa22 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2aa16:	68fb      	ldr	r3, [r7, #12]
   2aa18:	3301      	adds	r3, #1
   2aa1a:	697a      	ldr	r2, [r7, #20]
   2aa1c:	40da      	lsrs	r2, r3
   2aa1e:	0013      	movs	r3, r2
   2aa20:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2aa22:	697b      	ldr	r3, [r7, #20]
}
   2aa24:	0018      	movs	r0, r3
   2aa26:	46bd      	mov	sp, r7
   2aa28:	b006      	add	sp, #24
   2aa2a:	bd80      	pop	{r7, pc}
   2aa2c:	0002a7a5 	.word	0x0002a7a5
   2aa30:	0002a77d 	.word	0x0002a77d
   2aa34:	40000c04 	.word	0x40000c04
   2aa38:	40000c00 	.word	0x40000c00
   2aa3c:	0002a0d5 	.word	0x0002a0d5
   2aa40:	40000c08 	.word	0x40000c08
   2aa44:	0002a791 	.word	0x0002a791
   2aa48:	00033715 	.word	0x00033715

0002aa4c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2aa4c:	b580      	push	{r7, lr}
   2aa4e:	b084      	sub	sp, #16
   2aa50:	af00      	add	r7, sp, #0
   2aa52:	0002      	movs	r2, r0
   2aa54:	6039      	str	r1, [r7, #0]
   2aa56:	1dfb      	adds	r3, r7, #7
   2aa58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2aa5a:	1dfb      	adds	r3, r7, #7
   2aa5c:	781b      	ldrb	r3, [r3, #0]
   2aa5e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2aa60:	683b      	ldr	r3, [r7, #0]
   2aa62:	781b      	ldrb	r3, [r3, #0]
   2aa64:	021b      	lsls	r3, r3, #8
   2aa66:	001a      	movs	r2, r3
   2aa68:	68fb      	ldr	r3, [r7, #12]
   2aa6a:	4313      	orrs	r3, r2
   2aa6c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2aa6e:	1dfb      	adds	r3, r7, #7
   2aa70:	781b      	ldrb	r3, [r3, #0]
   2aa72:	0018      	movs	r0, r3
   2aa74:	4b04      	ldr	r3, [pc, #16]	; (2aa88 <system_gclk_chan_set_config+0x3c>)
   2aa76:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2aa78:	4b04      	ldr	r3, [pc, #16]	; (2aa8c <system_gclk_chan_set_config+0x40>)
   2aa7a:	68fa      	ldr	r2, [r7, #12]
   2aa7c:	b292      	uxth	r2, r2
   2aa7e:	805a      	strh	r2, [r3, #2]
}
   2aa80:	46c0      	nop			; (mov r8, r8)
   2aa82:	46bd      	mov	sp, r7
   2aa84:	b004      	add	sp, #16
   2aa86:	bd80      	pop	{r7, pc}
   2aa88:	0002aad9 	.word	0x0002aad9
   2aa8c:	40000c00 	.word	0x40000c00

0002aa90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2aa90:	b580      	push	{r7, lr}
   2aa92:	b082      	sub	sp, #8
   2aa94:	af00      	add	r7, sp, #0
   2aa96:	0002      	movs	r2, r0
   2aa98:	1dfb      	adds	r3, r7, #7
   2aa9a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aa9c:	4b0a      	ldr	r3, [pc, #40]	; (2aac8 <system_gclk_chan_enable+0x38>)
   2aa9e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aaa0:	4a0a      	ldr	r2, [pc, #40]	; (2aacc <system_gclk_chan_enable+0x3c>)
   2aaa2:	1dfb      	adds	r3, r7, #7
   2aaa4:	781b      	ldrb	r3, [r3, #0]
   2aaa6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2aaa8:	4909      	ldr	r1, [pc, #36]	; (2aad0 <system_gclk_chan_enable+0x40>)
   2aaaa:	4b09      	ldr	r3, [pc, #36]	; (2aad0 <system_gclk_chan_enable+0x40>)
   2aaac:	885b      	ldrh	r3, [r3, #2]
   2aaae:	b29b      	uxth	r3, r3
   2aab0:	2280      	movs	r2, #128	; 0x80
   2aab2:	01d2      	lsls	r2, r2, #7
   2aab4:	4313      	orrs	r3, r2
   2aab6:	b29b      	uxth	r3, r3
   2aab8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2aaba:	4b06      	ldr	r3, [pc, #24]	; (2aad4 <system_gclk_chan_enable+0x44>)
   2aabc:	4798      	blx	r3
}
   2aabe:	46c0      	nop			; (mov r8, r8)
   2aac0:	46bd      	mov	sp, r7
   2aac2:	b002      	add	sp, #8
   2aac4:	bd80      	pop	{r7, pc}
   2aac6:	46c0      	nop			; (mov r8, r8)
   2aac8:	0002a77d 	.word	0x0002a77d
   2aacc:	40000c02 	.word	0x40000c02
   2aad0:	40000c00 	.word	0x40000c00
   2aad4:	0002a791 	.word	0x0002a791

0002aad8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2aad8:	b580      	push	{r7, lr}
   2aada:	b084      	sub	sp, #16
   2aadc:	af00      	add	r7, sp, #0
   2aade:	0002      	movs	r2, r0
   2aae0:	1dfb      	adds	r3, r7, #7
   2aae2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aae4:	4b1c      	ldr	r3, [pc, #112]	; (2ab58 <system_gclk_chan_disable+0x80>)
   2aae6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aae8:	4a1c      	ldr	r2, [pc, #112]	; (2ab5c <system_gclk_chan_disable+0x84>)
   2aaea:	1dfb      	adds	r3, r7, #7
   2aaec:	781b      	ldrb	r3, [r3, #0]
   2aaee:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2aaf0:	4b1b      	ldr	r3, [pc, #108]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2aaf2:	885b      	ldrh	r3, [r3, #2]
   2aaf4:	051b      	lsls	r3, r3, #20
   2aaf6:	0f1b      	lsrs	r3, r3, #28
   2aaf8:	b2db      	uxtb	r3, r3
   2aafa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2aafc:	4a18      	ldr	r2, [pc, #96]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2aafe:	8853      	ldrh	r3, [r2, #2]
   2ab00:	4918      	ldr	r1, [pc, #96]	; (2ab64 <system_gclk_chan_disable+0x8c>)
   2ab02:	400b      	ands	r3, r1
   2ab04:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2ab06:	4a16      	ldr	r2, [pc, #88]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2ab08:	4b15      	ldr	r3, [pc, #84]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2ab0a:	885b      	ldrh	r3, [r3, #2]
   2ab0c:	b29b      	uxth	r3, r3
   2ab0e:	4916      	ldr	r1, [pc, #88]	; (2ab68 <system_gclk_chan_disable+0x90>)
   2ab10:	400b      	ands	r3, r1
   2ab12:	b29b      	uxth	r3, r3
   2ab14:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2ab16:	46c0      	nop			; (mov r8, r8)
   2ab18:	4b11      	ldr	r3, [pc, #68]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2ab1a:	885b      	ldrh	r3, [r3, #2]
   2ab1c:	b29b      	uxth	r3, r3
   2ab1e:	001a      	movs	r2, r3
   2ab20:	2380      	movs	r3, #128	; 0x80
   2ab22:	01db      	lsls	r3, r3, #7
   2ab24:	4013      	ands	r3, r2
   2ab26:	d1f7      	bne.n	2ab18 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2ab28:	4a0d      	ldr	r2, [pc, #52]	; (2ab60 <system_gclk_chan_disable+0x88>)
   2ab2a:	68fb      	ldr	r3, [r7, #12]
   2ab2c:	b2db      	uxtb	r3, r3
   2ab2e:	1c19      	adds	r1, r3, #0
   2ab30:	230f      	movs	r3, #15
   2ab32:	400b      	ands	r3, r1
   2ab34:	b2d9      	uxtb	r1, r3
   2ab36:	8853      	ldrh	r3, [r2, #2]
   2ab38:	1c08      	adds	r0, r1, #0
   2ab3a:	210f      	movs	r1, #15
   2ab3c:	4001      	ands	r1, r0
   2ab3e:	0208      	lsls	r0, r1, #8
   2ab40:	4908      	ldr	r1, [pc, #32]	; (2ab64 <system_gclk_chan_disable+0x8c>)
   2ab42:	400b      	ands	r3, r1
   2ab44:	1c19      	adds	r1, r3, #0
   2ab46:	1c03      	adds	r3, r0, #0
   2ab48:	430b      	orrs	r3, r1
   2ab4a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2ab4c:	4b07      	ldr	r3, [pc, #28]	; (2ab6c <system_gclk_chan_disable+0x94>)
   2ab4e:	4798      	blx	r3
}
   2ab50:	46c0      	nop			; (mov r8, r8)
   2ab52:	46bd      	mov	sp, r7
   2ab54:	b004      	add	sp, #16
   2ab56:	bd80      	pop	{r7, pc}
   2ab58:	0002a77d 	.word	0x0002a77d
   2ab5c:	40000c02 	.word	0x40000c02
   2ab60:	40000c00 	.word	0x40000c00
   2ab64:	fffff0ff 	.word	0xfffff0ff
   2ab68:	ffffbfff 	.word	0xffffbfff
   2ab6c:	0002a791 	.word	0x0002a791

0002ab70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2ab70:	b580      	push	{r7, lr}
   2ab72:	b084      	sub	sp, #16
   2ab74:	af00      	add	r7, sp, #0
   2ab76:	0002      	movs	r2, r0
   2ab78:	1dfb      	adds	r3, r7, #7
   2ab7a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2ab7c:	4b0d      	ldr	r3, [pc, #52]	; (2abb4 <system_gclk_chan_get_hz+0x44>)
   2ab7e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ab80:	4a0d      	ldr	r2, [pc, #52]	; (2abb8 <system_gclk_chan_get_hz+0x48>)
   2ab82:	1dfb      	adds	r3, r7, #7
   2ab84:	781b      	ldrb	r3, [r3, #0]
   2ab86:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2ab88:	4b0c      	ldr	r3, [pc, #48]	; (2abbc <system_gclk_chan_get_hz+0x4c>)
   2ab8a:	885b      	ldrh	r3, [r3, #2]
   2ab8c:	051b      	lsls	r3, r3, #20
   2ab8e:	0f1b      	lsrs	r3, r3, #28
   2ab90:	b2da      	uxtb	r2, r3
   2ab92:	230f      	movs	r3, #15
   2ab94:	18fb      	adds	r3, r7, r3
   2ab96:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2ab98:	4b09      	ldr	r3, [pc, #36]	; (2abc0 <system_gclk_chan_get_hz+0x50>)
   2ab9a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2ab9c:	230f      	movs	r3, #15
   2ab9e:	18fb      	adds	r3, r7, r3
   2aba0:	781b      	ldrb	r3, [r3, #0]
   2aba2:	0018      	movs	r0, r3
   2aba4:	4b07      	ldr	r3, [pc, #28]	; (2abc4 <system_gclk_chan_get_hz+0x54>)
   2aba6:	4798      	blx	r3
   2aba8:	0003      	movs	r3, r0
}
   2abaa:	0018      	movs	r0, r3
   2abac:	46bd      	mov	sp, r7
   2abae:	b004      	add	sp, #16
   2abb0:	bd80      	pop	{r7, pc}
   2abb2:	46c0      	nop			; (mov r8, r8)
   2abb4:	0002a77d 	.word	0x0002a77d
   2abb8:	40000c02 	.word	0x40000c02
   2abbc:	40000c00 	.word	0x40000c00
   2abc0:	0002a791 	.word	0x0002a791
   2abc4:	0002a975 	.word	0x0002a975

0002abc8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2abc8:	b580      	push	{r7, lr}
   2abca:	b084      	sub	sp, #16
   2abcc:	af00      	add	r7, sp, #0
   2abce:	0002      	movs	r2, r0
   2abd0:	1dfb      	adds	r3, r7, #7
   2abd2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2abd4:	230f      	movs	r3, #15
   2abd6:	18fb      	adds	r3, r7, r3
   2abd8:	2200      	movs	r2, #0
   2abda:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2abdc:	1dfb      	adds	r3, r7, #7
   2abde:	781b      	ldrb	r3, [r3, #0]
   2abe0:	2b7f      	cmp	r3, #127	; 0x7f
   2abe2:	d80b      	bhi.n	2abfc <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2abe4:	4a13      	ldr	r2, [pc, #76]	; (2ac34 <system_interrupt_clear_pending+0x6c>)
   2abe6:	1dfb      	adds	r3, r7, #7
   2abe8:	781b      	ldrb	r3, [r3, #0]
   2abea:	b25b      	sxtb	r3, r3
   2abec:	2101      	movs	r1, #1
   2abee:	4099      	lsls	r1, r3
   2abf0:	000b      	movs	r3, r1
   2abf2:	0019      	movs	r1, r3
   2abf4:	23c0      	movs	r3, #192	; 0xc0
   2abf6:	005b      	lsls	r3, r3, #1
   2abf8:	50d1      	str	r1, [r2, r3]
   2abfa:	e014      	b.n	2ac26 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2abfc:	1dfb      	adds	r3, r7, #7
   2abfe:	781b      	ldrb	r3, [r3, #0]
   2ac00:	b25b      	sxtb	r3, r3
   2ac02:	330e      	adds	r3, #14
   2ac04:	d101      	bne.n	2ac0a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ac06:	2317      	movs	r3, #23
   2ac08:	e010      	b.n	2ac2c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ac0a:	1dfb      	adds	r3, r7, #7
   2ac0c:	781b      	ldrb	r3, [r3, #0]
   2ac0e:	b25b      	sxtb	r3, r3
   2ac10:	3301      	adds	r3, #1
   2ac12:	d104      	bne.n	2ac1e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ac14:	4b08      	ldr	r3, [pc, #32]	; (2ac38 <system_interrupt_clear_pending+0x70>)
   2ac16:	2280      	movs	r2, #128	; 0x80
   2ac18:	0492      	lsls	r2, r2, #18
   2ac1a:	605a      	str	r2, [r3, #4]
   2ac1c:	e003      	b.n	2ac26 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ac1e:	230f      	movs	r3, #15
   2ac20:	18fb      	adds	r3, r7, r3
   2ac22:	2217      	movs	r2, #23
   2ac24:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ac26:	230f      	movs	r3, #15
   2ac28:	18fb      	adds	r3, r7, r3
   2ac2a:	781b      	ldrb	r3, [r3, #0]
}
   2ac2c:	0018      	movs	r0, r3
   2ac2e:	46bd      	mov	sp, r7
   2ac30:	b004      	add	sp, #16
   2ac32:	bd80      	pop	{r7, pc}
   2ac34:	e000e100 	.word	0xe000e100
   2ac38:	e000ed00 	.word	0xe000ed00

0002ac3c <system_pinmux_get_group_from_gpio_pin>:
{
   2ac3c:	b580      	push	{r7, lr}
   2ac3e:	b084      	sub	sp, #16
   2ac40:	af00      	add	r7, sp, #0
   2ac42:	0002      	movs	r2, r0
   2ac44:	1dfb      	adds	r3, r7, #7
   2ac46:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2ac48:	230f      	movs	r3, #15
   2ac4a:	18fb      	adds	r3, r7, r3
   2ac4c:	1dfa      	adds	r2, r7, #7
   2ac4e:	7812      	ldrb	r2, [r2, #0]
   2ac50:	09d2      	lsrs	r2, r2, #7
   2ac52:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2ac54:	230e      	movs	r3, #14
   2ac56:	18fb      	adds	r3, r7, r3
   2ac58:	1dfa      	adds	r2, r7, #7
   2ac5a:	7812      	ldrb	r2, [r2, #0]
   2ac5c:	0952      	lsrs	r2, r2, #5
   2ac5e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2ac60:	4b0d      	ldr	r3, [pc, #52]	; (2ac98 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2ac62:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2ac64:	230f      	movs	r3, #15
   2ac66:	18fb      	adds	r3, r7, r3
   2ac68:	781b      	ldrb	r3, [r3, #0]
   2ac6a:	2b00      	cmp	r3, #0
   2ac6c:	d10f      	bne.n	2ac8e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2ac6e:	230f      	movs	r3, #15
   2ac70:	18fb      	adds	r3, r7, r3
   2ac72:	781b      	ldrb	r3, [r3, #0]
   2ac74:	009b      	lsls	r3, r3, #2
   2ac76:	2210      	movs	r2, #16
   2ac78:	4694      	mov	ip, r2
   2ac7a:	44bc      	add	ip, r7
   2ac7c:	4463      	add	r3, ip
   2ac7e:	3b08      	subs	r3, #8
   2ac80:	681a      	ldr	r2, [r3, #0]
   2ac82:	230e      	movs	r3, #14
   2ac84:	18fb      	adds	r3, r7, r3
   2ac86:	781b      	ldrb	r3, [r3, #0]
   2ac88:	01db      	lsls	r3, r3, #7
   2ac8a:	18d3      	adds	r3, r2, r3
   2ac8c:	e000      	b.n	2ac90 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2ac8e:	2300      	movs	r3, #0
}
   2ac90:	0018      	movs	r0, r3
   2ac92:	46bd      	mov	sp, r7
   2ac94:	b004      	add	sp, #16
   2ac96:	bd80      	pop	{r7, pc}
   2ac98:	41004400 	.word	0x41004400

0002ac9c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2ac9c:	b580      	push	{r7, lr}
   2ac9e:	b088      	sub	sp, #32
   2aca0:	af00      	add	r7, sp, #0
   2aca2:	60f8      	str	r0, [r7, #12]
   2aca4:	60b9      	str	r1, [r7, #8]
   2aca6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2aca8:	2300      	movs	r3, #0
   2acaa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2acac:	687b      	ldr	r3, [r7, #4]
   2acae:	78db      	ldrb	r3, [r3, #3]
   2acb0:	2201      	movs	r2, #1
   2acb2:	4053      	eors	r3, r2
   2acb4:	b2db      	uxtb	r3, r3
   2acb6:	2b00      	cmp	r3, #0
   2acb8:	d035      	beq.n	2ad26 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2acba:	687b      	ldr	r3, [r7, #4]
   2acbc:	781b      	ldrb	r3, [r3, #0]
   2acbe:	2b80      	cmp	r3, #128	; 0x80
   2acc0:	d00b      	beq.n	2acda <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2acc2:	69fb      	ldr	r3, [r7, #28]
   2acc4:	2280      	movs	r2, #128	; 0x80
   2acc6:	0252      	lsls	r2, r2, #9
   2acc8:	4313      	orrs	r3, r2
   2acca:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2accc:	687b      	ldr	r3, [r7, #4]
   2acce:	781b      	ldrb	r3, [r3, #0]
   2acd0:	061b      	lsls	r3, r3, #24
   2acd2:	001a      	movs	r2, r3
   2acd4:	69fb      	ldr	r3, [r7, #28]
   2acd6:	4313      	orrs	r3, r2
   2acd8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2acda:	687b      	ldr	r3, [r7, #4]
   2acdc:	785b      	ldrb	r3, [r3, #1]
   2acde:	2b00      	cmp	r3, #0
   2ace0:	d003      	beq.n	2acea <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ace2:	687b      	ldr	r3, [r7, #4]
   2ace4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ace6:	2b02      	cmp	r3, #2
   2ace8:	d110      	bne.n	2ad0c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2acea:	69fb      	ldr	r3, [r7, #28]
   2acec:	2280      	movs	r2, #128	; 0x80
   2acee:	0292      	lsls	r2, r2, #10
   2acf0:	4313      	orrs	r3, r2
   2acf2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2acf4:	687b      	ldr	r3, [r7, #4]
   2acf6:	789b      	ldrb	r3, [r3, #2]
   2acf8:	2b00      	cmp	r3, #0
   2acfa:	d004      	beq.n	2ad06 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2acfc:	69fb      	ldr	r3, [r7, #28]
   2acfe:	2280      	movs	r2, #128	; 0x80
   2ad00:	02d2      	lsls	r2, r2, #11
   2ad02:	4313      	orrs	r3, r2
   2ad04:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2ad06:	68fb      	ldr	r3, [r7, #12]
   2ad08:	68ba      	ldr	r2, [r7, #8]
   2ad0a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad0c:	687b      	ldr	r3, [r7, #4]
   2ad0e:	785b      	ldrb	r3, [r3, #1]
   2ad10:	2b01      	cmp	r3, #1
   2ad12:	d003      	beq.n	2ad1c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ad14:	687b      	ldr	r3, [r7, #4]
   2ad16:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad18:	2b02      	cmp	r3, #2
   2ad1a:	d107      	bne.n	2ad2c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2ad1c:	69fb      	ldr	r3, [r7, #28]
   2ad1e:	4a22      	ldr	r2, [pc, #136]	; (2ada8 <_system_pinmux_config+0x10c>)
   2ad20:	4013      	ands	r3, r2
   2ad22:	61fb      	str	r3, [r7, #28]
   2ad24:	e002      	b.n	2ad2c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2ad26:	68fb      	ldr	r3, [r7, #12]
   2ad28:	68ba      	ldr	r2, [r7, #8]
   2ad2a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2ad2c:	68bb      	ldr	r3, [r7, #8]
   2ad2e:	041b      	lsls	r3, r3, #16
   2ad30:	0c1b      	lsrs	r3, r3, #16
   2ad32:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2ad34:	68bb      	ldr	r3, [r7, #8]
   2ad36:	0c1b      	lsrs	r3, r3, #16
   2ad38:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad3a:	69ba      	ldr	r2, [r7, #24]
   2ad3c:	69fb      	ldr	r3, [r7, #28]
   2ad3e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2ad40:	22a0      	movs	r2, #160	; 0xa0
   2ad42:	05d2      	lsls	r2, r2, #23
   2ad44:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad46:	68fb      	ldr	r3, [r7, #12]
   2ad48:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad4a:	697a      	ldr	r2, [r7, #20]
   2ad4c:	69fb      	ldr	r3, [r7, #28]
   2ad4e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2ad50:	22d0      	movs	r2, #208	; 0xd0
   2ad52:	0612      	lsls	r2, r2, #24
   2ad54:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad56:	68fb      	ldr	r3, [r7, #12]
   2ad58:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2ad5a:	687b      	ldr	r3, [r7, #4]
   2ad5c:	78db      	ldrb	r3, [r3, #3]
   2ad5e:	2201      	movs	r2, #1
   2ad60:	4053      	eors	r3, r2
   2ad62:	b2db      	uxtb	r3, r3
   2ad64:	2b00      	cmp	r3, #0
   2ad66:	d01a      	beq.n	2ad9e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2ad68:	69fa      	ldr	r2, [r7, #28]
   2ad6a:	2380      	movs	r3, #128	; 0x80
   2ad6c:	02db      	lsls	r3, r3, #11
   2ad6e:	4013      	ands	r3, r2
   2ad70:	d00a      	beq.n	2ad88 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2ad72:	687b      	ldr	r3, [r7, #4]
   2ad74:	789b      	ldrb	r3, [r3, #2]
   2ad76:	2b01      	cmp	r3, #1
   2ad78:	d103      	bne.n	2ad82 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2ad7a:	68fb      	ldr	r3, [r7, #12]
   2ad7c:	68ba      	ldr	r2, [r7, #8]
   2ad7e:	619a      	str	r2, [r3, #24]
   2ad80:	e002      	b.n	2ad88 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2ad82:	68fb      	ldr	r3, [r7, #12]
   2ad84:	68ba      	ldr	r2, [r7, #8]
   2ad86:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad88:	687b      	ldr	r3, [r7, #4]
   2ad8a:	785b      	ldrb	r3, [r3, #1]
   2ad8c:	2b01      	cmp	r3, #1
   2ad8e:	d003      	beq.n	2ad98 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ad90:	687b      	ldr	r3, [r7, #4]
   2ad92:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad94:	2b02      	cmp	r3, #2
   2ad96:	d102      	bne.n	2ad9e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2ad98:	68fb      	ldr	r3, [r7, #12]
   2ad9a:	68ba      	ldr	r2, [r7, #8]
   2ad9c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2ad9e:	46c0      	nop			; (mov r8, r8)
   2ada0:	46bd      	mov	sp, r7
   2ada2:	b008      	add	sp, #32
   2ada4:	bd80      	pop	{r7, pc}
   2ada6:	46c0      	nop			; (mov r8, r8)
   2ada8:	fffbffff 	.word	0xfffbffff

0002adac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2adac:	b580      	push	{r7, lr}
   2adae:	b084      	sub	sp, #16
   2adb0:	af00      	add	r7, sp, #0
   2adb2:	0002      	movs	r2, r0
   2adb4:	6039      	str	r1, [r7, #0]
   2adb6:	1dfb      	adds	r3, r7, #7
   2adb8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2adba:	1dfb      	adds	r3, r7, #7
   2adbc:	781b      	ldrb	r3, [r3, #0]
   2adbe:	0018      	movs	r0, r3
   2adc0:	4b0a      	ldr	r3, [pc, #40]	; (2adec <system_pinmux_pin_set_config+0x40>)
   2adc2:	4798      	blx	r3
   2adc4:	0003      	movs	r3, r0
   2adc6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2adc8:	1dfb      	adds	r3, r7, #7
   2adca:	781b      	ldrb	r3, [r3, #0]
   2adcc:	221f      	movs	r2, #31
   2adce:	4013      	ands	r3, r2
   2add0:	2201      	movs	r2, #1
   2add2:	409a      	lsls	r2, r3
   2add4:	0013      	movs	r3, r2
   2add6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2add8:	683a      	ldr	r2, [r7, #0]
   2adda:	68b9      	ldr	r1, [r7, #8]
   2addc:	68fb      	ldr	r3, [r7, #12]
   2adde:	0018      	movs	r0, r3
   2ade0:	4b03      	ldr	r3, [pc, #12]	; (2adf0 <system_pinmux_pin_set_config+0x44>)
   2ade2:	4798      	blx	r3
}
   2ade4:	46c0      	nop			; (mov r8, r8)
   2ade6:	46bd      	mov	sp, r7
   2ade8:	b004      	add	sp, #16
   2adea:	bd80      	pop	{r7, pc}
   2adec:	0002ac3d 	.word	0x0002ac3d
   2adf0:	0002ac9d 	.word	0x0002ac9d

0002adf4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2adf4:	b580      	push	{r7, lr}
   2adf6:	af00      	add	r7, sp, #0
	return;
   2adf8:	46c0      	nop			; (mov r8, r8)
}
   2adfa:	46bd      	mov	sp, r7
   2adfc:	bd80      	pop	{r7, pc}
	...

0002ae00 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2ae00:	b580      	push	{r7, lr}
   2ae02:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2ae04:	4b06      	ldr	r3, [pc, #24]	; (2ae20 <system_init+0x20>)
   2ae06:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2ae08:	4b06      	ldr	r3, [pc, #24]	; (2ae24 <system_init+0x24>)
   2ae0a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2ae0c:	4b06      	ldr	r3, [pc, #24]	; (2ae28 <system_init+0x28>)
   2ae0e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2ae10:	4b06      	ldr	r3, [pc, #24]	; (2ae2c <system_init+0x2c>)
   2ae12:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2ae14:	4b06      	ldr	r3, [pc, #24]	; (2ae30 <system_init+0x30>)
   2ae16:	4798      	blx	r3
}
   2ae18:	46c0      	nop			; (mov r8, r8)
   2ae1a:	46bd      	mov	sp, r7
   2ae1c:	bd80      	pop	{r7, pc}
   2ae1e:	46c0      	nop			; (mov r8, r8)
   2ae20:	0002a481 	.word	0x0002a481
   2ae24:	00026f49 	.word	0x00026f49
   2ae28:	00013011 	.word	0x00013011
   2ae2c:	00027321 	.word	0x00027321
   2ae30:	0002adf5 	.word	0x0002adf5

0002ae34 <system_gclk_chan_get_config_defaults>:
{
   2ae34:	b580      	push	{r7, lr}
   2ae36:	b082      	sub	sp, #8
   2ae38:	af00      	add	r7, sp, #0
   2ae3a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ae3c:	687b      	ldr	r3, [r7, #4]
   2ae3e:	2200      	movs	r2, #0
   2ae40:	701a      	strb	r2, [r3, #0]
}
   2ae42:	46c0      	nop			; (mov r8, r8)
   2ae44:	46bd      	mov	sp, r7
   2ae46:	b002      	add	sp, #8
   2ae48:	bd80      	pop	{r7, pc}
	...

0002ae4c <system_apb_clock_set_mask>:
{
   2ae4c:	b580      	push	{r7, lr}
   2ae4e:	b082      	sub	sp, #8
   2ae50:	af00      	add	r7, sp, #0
   2ae52:	0002      	movs	r2, r0
   2ae54:	6039      	str	r1, [r7, #0]
   2ae56:	1dfb      	adds	r3, r7, #7
   2ae58:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2ae5a:	1dfb      	adds	r3, r7, #7
   2ae5c:	781b      	ldrb	r3, [r3, #0]
   2ae5e:	2b01      	cmp	r3, #1
   2ae60:	d00a      	beq.n	2ae78 <system_apb_clock_set_mask+0x2c>
   2ae62:	2b02      	cmp	r3, #2
   2ae64:	d00f      	beq.n	2ae86 <system_apb_clock_set_mask+0x3a>
   2ae66:	2b00      	cmp	r3, #0
   2ae68:	d114      	bne.n	2ae94 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2ae6a:	4b0e      	ldr	r3, [pc, #56]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae6c:	4a0d      	ldr	r2, [pc, #52]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae6e:	6991      	ldr	r1, [r2, #24]
   2ae70:	683a      	ldr	r2, [r7, #0]
   2ae72:	430a      	orrs	r2, r1
   2ae74:	619a      	str	r2, [r3, #24]
			break;
   2ae76:	e00f      	b.n	2ae98 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2ae78:	4b0a      	ldr	r3, [pc, #40]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae7a:	4a0a      	ldr	r2, [pc, #40]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae7c:	69d1      	ldr	r1, [r2, #28]
   2ae7e:	683a      	ldr	r2, [r7, #0]
   2ae80:	430a      	orrs	r2, r1
   2ae82:	61da      	str	r2, [r3, #28]
			break;
   2ae84:	e008      	b.n	2ae98 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2ae86:	4b07      	ldr	r3, [pc, #28]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae88:	4a06      	ldr	r2, [pc, #24]	; (2aea4 <system_apb_clock_set_mask+0x58>)
   2ae8a:	6a11      	ldr	r1, [r2, #32]
   2ae8c:	683a      	ldr	r2, [r7, #0]
   2ae8e:	430a      	orrs	r2, r1
   2ae90:	621a      	str	r2, [r3, #32]
			break;
   2ae92:	e001      	b.n	2ae98 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2ae94:	2317      	movs	r3, #23
   2ae96:	e000      	b.n	2ae9a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2ae98:	2300      	movs	r3, #0
}
   2ae9a:	0018      	movs	r0, r3
   2ae9c:	46bd      	mov	sp, r7
   2ae9e:	b002      	add	sp, #8
   2aea0:	bd80      	pop	{r7, pc}
   2aea2:	46c0      	nop			; (mov r8, r8)
   2aea4:	40000400 	.word	0x40000400

0002aea8 <system_pinmux_get_config_defaults>:
{
   2aea8:	b580      	push	{r7, lr}
   2aeaa:	b082      	sub	sp, #8
   2aeac:	af00      	add	r7, sp, #0
   2aeae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2aeb0:	687b      	ldr	r3, [r7, #4]
   2aeb2:	2280      	movs	r2, #128	; 0x80
   2aeb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2aeb6:	687b      	ldr	r3, [r7, #4]
   2aeb8:	2200      	movs	r2, #0
   2aeba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2aebc:	687b      	ldr	r3, [r7, #4]
   2aebe:	2201      	movs	r2, #1
   2aec0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2aec2:	687b      	ldr	r3, [r7, #4]
   2aec4:	2200      	movs	r2, #0
   2aec6:	70da      	strb	r2, [r3, #3]
}
   2aec8:	46c0      	nop			; (mov r8, r8)
   2aeca:	46bd      	mov	sp, r7
   2aecc:	b002      	add	sp, #8
   2aece:	bd80      	pop	{r7, pc}

0002aed0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2aed0:	b580      	push	{r7, lr}
   2aed2:	b084      	sub	sp, #16
   2aed4:	af00      	add	r7, sp, #0
   2aed6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2aed8:	2300      	movs	r3, #0
   2aeda:	60fb      	str	r3, [r7, #12]
   2aedc:	e00c      	b.n	2aef8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2aede:	4b0a      	ldr	r3, [pc, #40]	; (2af08 <_tcc_get_inst_index+0x38>)
   2aee0:	68fa      	ldr	r2, [r7, #12]
   2aee2:	0092      	lsls	r2, r2, #2
   2aee4:	58d2      	ldr	r2, [r2, r3]
   2aee6:	687b      	ldr	r3, [r7, #4]
   2aee8:	429a      	cmp	r2, r3
   2aeea:	d102      	bne.n	2aef2 <_tcc_get_inst_index+0x22>
			return i;
   2aeec:	68fb      	ldr	r3, [r7, #12]
   2aeee:	b2db      	uxtb	r3, r3
   2aef0:	e006      	b.n	2af00 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2aef2:	68fb      	ldr	r3, [r7, #12]
   2aef4:	3301      	adds	r3, #1
   2aef6:	60fb      	str	r3, [r7, #12]
   2aef8:	68fb      	ldr	r3, [r7, #12]
   2aefa:	2b02      	cmp	r3, #2
   2aefc:	d9ef      	bls.n	2aede <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2aefe:	2300      	movs	r3, #0
}
   2af00:	0018      	movs	r0, r3
   2af02:	46bd      	mov	sp, r7
   2af04:	b004      	add	sp, #16
   2af06:	bd80      	pop	{r7, pc}
   2af08:	0003a60c 	.word	0x0003a60c

0002af0c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2af0c:	b590      	push	{r4, r7, lr}
   2af0e:	b085      	sub	sp, #20
   2af10:	af00      	add	r7, sp, #0
   2af12:	6078      	str	r0, [r7, #4]
   2af14:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2af16:	230f      	movs	r3, #15
   2af18:	18fc      	adds	r4, r7, r3
   2af1a:	683b      	ldr	r3, [r7, #0]
   2af1c:	0018      	movs	r0, r3
   2af1e:	4bad      	ldr	r3, [pc, #692]	; (2b1d4 <tcc_get_config_defaults+0x2c8>)
   2af20:	4798      	blx	r3
   2af22:	0003      	movs	r3, r0
   2af24:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	2200      	movs	r2, #0
   2af2a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2af2c:	230f      	movs	r3, #15
   2af2e:	18fb      	adds	r3, r7, r3
   2af30:	781a      	ldrb	r2, [r3, #0]
   2af32:	4ba9      	ldr	r3, [pc, #676]	; (2b1d8 <tcc_get_config_defaults+0x2cc>)
   2af34:	0092      	lsls	r2, r2, #2
   2af36:	58d2      	ldr	r2, [r2, r3]
   2af38:	687b      	ldr	r3, [r7, #4]
   2af3a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2af3c:	687b      	ldr	r3, [r7, #4]
   2af3e:	2200      	movs	r2, #0
   2af40:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2af42:	687b      	ldr	r3, [r7, #4]
   2af44:	2200      	movs	r2, #0
   2af46:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2af48:	687b      	ldr	r3, [r7, #4]
   2af4a:	2200      	movs	r2, #0
   2af4c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2af4e:	687b      	ldr	r3, [r7, #4]
   2af50:	2200      	movs	r2, #0
   2af52:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2af54:	687b      	ldr	r3, [r7, #4]
   2af56:	2200      	movs	r2, #0
   2af58:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af5a:	687b      	ldr	r3, [r7, #4]
   2af5c:	2200      	movs	r2, #0
   2af5e:	61da      	str	r2, [r3, #28]
   2af60:	687b      	ldr	r3, [r7, #4]
   2af62:	2200      	movs	r2, #0
   2af64:	621a      	str	r2, [r3, #32]
   2af66:	687b      	ldr	r3, [r7, #4]
   2af68:	2200      	movs	r2, #0
   2af6a:	625a      	str	r2, [r3, #36]	; 0x24
   2af6c:	687b      	ldr	r3, [r7, #4]
   2af6e:	2200      	movs	r2, #0
   2af70:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af72:	687b      	ldr	r3, [r7, #4]
   2af74:	2200      	movs	r2, #0
   2af76:	751a      	strb	r2, [r3, #20]
   2af78:	687b      	ldr	r3, [r7, #4]
   2af7a:	2200      	movs	r2, #0
   2af7c:	755a      	strb	r2, [r3, #21]
   2af7e:	687b      	ldr	r3, [r7, #4]
   2af80:	2200      	movs	r2, #0
   2af82:	759a      	strb	r2, [r3, #22]
   2af84:	687b      	ldr	r3, [r7, #4]
   2af86:	2200      	movs	r2, #0
   2af88:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2af8a:	687b      	ldr	r3, [r7, #4]
   2af8c:	2200      	movs	r2, #0
   2af8e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2af90:	687b      	ldr	r3, [r7, #4]
   2af92:	2200      	movs	r2, #0
   2af94:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af96:	687b      	ldr	r3, [r7, #4]
   2af98:	2200      	movs	r2, #0
   2af9a:	741a      	strb	r2, [r3, #16]
   2af9c:	687b      	ldr	r3, [r7, #4]
   2af9e:	2200      	movs	r2, #0
   2afa0:	745a      	strb	r2, [r3, #17]
   2afa2:	687b      	ldr	r3, [r7, #4]
   2afa4:	2200      	movs	r2, #0
   2afa6:	749a      	strb	r2, [r3, #18]
   2afa8:	687b      	ldr	r3, [r7, #4]
   2afaa:	2200      	movs	r2, #0
   2afac:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2afae:	687b      	ldr	r3, [r7, #4]
   2afb0:	222c      	movs	r2, #44	; 0x2c
   2afb2:	2100      	movs	r1, #0
   2afb4:	5499      	strb	r1, [r3, r2]
   2afb6:	687b      	ldr	r3, [r7, #4]
   2afb8:	222d      	movs	r2, #45	; 0x2d
   2afba:	2100      	movs	r1, #0
   2afbc:	5499      	strb	r1, [r3, r2]
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	222e      	movs	r2, #46	; 0x2e
   2afc2:	2100      	movs	r1, #0
   2afc4:	5499      	strb	r1, [r3, r2]
   2afc6:	687b      	ldr	r3, [r7, #4]
   2afc8:	222f      	movs	r2, #47	; 0x2f
   2afca:	2100      	movs	r1, #0
   2afcc:	5499      	strb	r1, [r3, r2]
   2afce:	687b      	ldr	r3, [r7, #4]
   2afd0:	2230      	movs	r2, #48	; 0x30
   2afd2:	2100      	movs	r1, #0
   2afd4:	5499      	strb	r1, [r3, r2]
   2afd6:	687b      	ldr	r3, [r7, #4]
   2afd8:	2231      	movs	r2, #49	; 0x31
   2afda:	2100      	movs	r1, #0
   2afdc:	5499      	strb	r1, [r3, r2]
   2afde:	687b      	ldr	r3, [r7, #4]
   2afe0:	2232      	movs	r2, #50	; 0x32
   2afe2:	2100      	movs	r1, #0
   2afe4:	5499      	strb	r1, [r3, r2]
   2afe6:	687b      	ldr	r3, [r7, #4]
   2afe8:	2233      	movs	r2, #51	; 0x33
   2afea:	2100      	movs	r1, #0
   2afec:	5499      	strb	r1, [r3, r2]
   2afee:	687b      	ldr	r3, [r7, #4]
   2aff0:	2234      	movs	r2, #52	; 0x34
   2aff2:	2100      	movs	r1, #0
   2aff4:	5499      	strb	r1, [r3, r2]
   2aff6:	687b      	ldr	r3, [r7, #4]
   2aff8:	2235      	movs	r2, #53	; 0x35
   2affa:	2100      	movs	r1, #0
   2affc:	5499      	strb	r1, [r3, r2]
   2affe:	687b      	ldr	r3, [r7, #4]
   2b000:	2236      	movs	r2, #54	; 0x36
   2b002:	2100      	movs	r1, #0
   2b004:	5499      	strb	r1, [r3, r2]
   2b006:	687b      	ldr	r3, [r7, #4]
   2b008:	2237      	movs	r2, #55	; 0x37
   2b00a:	2100      	movs	r1, #0
   2b00c:	5499      	strb	r1, [r3, r2]
   2b00e:	687b      	ldr	r3, [r7, #4]
   2b010:	2238      	movs	r2, #56	; 0x38
   2b012:	2100      	movs	r1, #0
   2b014:	5499      	strb	r1, [r3, r2]
   2b016:	687b      	ldr	r3, [r7, #4]
   2b018:	2239      	movs	r2, #57	; 0x39
   2b01a:	2100      	movs	r1, #0
   2b01c:	5499      	strb	r1, [r3, r2]
   2b01e:	687b      	ldr	r3, [r7, #4]
   2b020:	223a      	movs	r2, #58	; 0x3a
   2b022:	2100      	movs	r1, #0
   2b024:	5499      	strb	r1, [r3, r2]
   2b026:	687b      	ldr	r3, [r7, #4]
   2b028:	223b      	movs	r2, #59	; 0x3b
   2b02a:	2100      	movs	r1, #0
   2b02c:	5499      	strb	r1, [r3, r2]
   2b02e:	687b      	ldr	r3, [r7, #4]
   2b030:	223c      	movs	r2, #60	; 0x3c
   2b032:	2100      	movs	r1, #0
   2b034:	5499      	strb	r1, [r3, r2]
   2b036:	687b      	ldr	r3, [r7, #4]
   2b038:	223d      	movs	r2, #61	; 0x3d
   2b03a:	2100      	movs	r1, #0
   2b03c:	5499      	strb	r1, [r3, r2]
   2b03e:	687b      	ldr	r3, [r7, #4]
   2b040:	223e      	movs	r2, #62	; 0x3e
   2b042:	2100      	movs	r1, #0
   2b044:	5499      	strb	r1, [r3, r2]
   2b046:	687b      	ldr	r3, [r7, #4]
   2b048:	223f      	movs	r2, #63	; 0x3f
   2b04a:	2100      	movs	r1, #0
   2b04c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2b04e:	687b      	ldr	r3, [r7, #4]
   2b050:	2240      	movs	r2, #64	; 0x40
   2b052:	2100      	movs	r1, #0
   2b054:	5499      	strb	r1, [r3, r2]
   2b056:	687b      	ldr	r3, [r7, #4]
   2b058:	2241      	movs	r2, #65	; 0x41
   2b05a:	2100      	movs	r1, #0
   2b05c:	5499      	strb	r1, [r3, r2]
   2b05e:	687b      	ldr	r3, [r7, #4]
   2b060:	2242      	movs	r2, #66	; 0x42
   2b062:	2100      	movs	r1, #0
   2b064:	5499      	strb	r1, [r3, r2]
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	2243      	movs	r2, #67	; 0x43
   2b06a:	2100      	movs	r1, #0
   2b06c:	5499      	strb	r1, [r3, r2]
   2b06e:	687b      	ldr	r3, [r7, #4]
   2b070:	2244      	movs	r2, #68	; 0x44
   2b072:	2100      	movs	r1, #0
   2b074:	5499      	strb	r1, [r3, r2]
   2b076:	687b      	ldr	r3, [r7, #4]
   2b078:	2245      	movs	r2, #69	; 0x45
   2b07a:	2100      	movs	r1, #0
   2b07c:	5499      	strb	r1, [r3, r2]
   2b07e:	687b      	ldr	r3, [r7, #4]
   2b080:	2246      	movs	r2, #70	; 0x46
   2b082:	2100      	movs	r1, #0
   2b084:	5499      	strb	r1, [r3, r2]
   2b086:	687b      	ldr	r3, [r7, #4]
   2b088:	2247      	movs	r2, #71	; 0x47
   2b08a:	2100      	movs	r1, #0
   2b08c:	5499      	strb	r1, [r3, r2]
   2b08e:	687b      	ldr	r3, [r7, #4]
   2b090:	2248      	movs	r2, #72	; 0x48
   2b092:	2100      	movs	r1, #0
   2b094:	5499      	strb	r1, [r3, r2]
   2b096:	687b      	ldr	r3, [r7, #4]
   2b098:	2249      	movs	r2, #73	; 0x49
   2b09a:	2100      	movs	r1, #0
   2b09c:	5499      	strb	r1, [r3, r2]
   2b09e:	687b      	ldr	r3, [r7, #4]
   2b0a0:	224a      	movs	r2, #74	; 0x4a
   2b0a2:	2100      	movs	r1, #0
   2b0a4:	5499      	strb	r1, [r3, r2]
   2b0a6:	687b      	ldr	r3, [r7, #4]
   2b0a8:	224b      	movs	r2, #75	; 0x4b
   2b0aa:	2100      	movs	r1, #0
   2b0ac:	5499      	strb	r1, [r3, r2]
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	224c      	movs	r2, #76	; 0x4c
   2b0b2:	2100      	movs	r1, #0
   2b0b4:	5499      	strb	r1, [r3, r2]
   2b0b6:	687b      	ldr	r3, [r7, #4]
   2b0b8:	224d      	movs	r2, #77	; 0x4d
   2b0ba:	2100      	movs	r1, #0
   2b0bc:	5499      	strb	r1, [r3, r2]
   2b0be:	687b      	ldr	r3, [r7, #4]
   2b0c0:	224e      	movs	r2, #78	; 0x4e
   2b0c2:	2100      	movs	r1, #0
   2b0c4:	5499      	strb	r1, [r3, r2]
   2b0c6:	687b      	ldr	r3, [r7, #4]
   2b0c8:	224f      	movs	r2, #79	; 0x4f
   2b0ca:	2100      	movs	r1, #0
   2b0cc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b0ce:	687b      	ldr	r3, [r7, #4]
   2b0d0:	2250      	movs	r2, #80	; 0x50
   2b0d2:	2100      	movs	r1, #0
   2b0d4:	5499      	strb	r1, [r3, r2]
   2b0d6:	687b      	ldr	r3, [r7, #4]
   2b0d8:	2251      	movs	r2, #81	; 0x51
   2b0da:	2100      	movs	r1, #0
   2b0dc:	5499      	strb	r1, [r3, r2]
   2b0de:	687b      	ldr	r3, [r7, #4]
   2b0e0:	2252      	movs	r2, #82	; 0x52
   2b0e2:	2100      	movs	r1, #0
   2b0e4:	5499      	strb	r1, [r3, r2]
   2b0e6:	687b      	ldr	r3, [r7, #4]
   2b0e8:	2253      	movs	r2, #83	; 0x53
   2b0ea:	2100      	movs	r1, #0
   2b0ec:	5499      	strb	r1, [r3, r2]
   2b0ee:	687b      	ldr	r3, [r7, #4]
   2b0f0:	2254      	movs	r2, #84	; 0x54
   2b0f2:	2100      	movs	r1, #0
   2b0f4:	5499      	strb	r1, [r3, r2]
   2b0f6:	687b      	ldr	r3, [r7, #4]
   2b0f8:	2255      	movs	r2, #85	; 0x55
   2b0fa:	2100      	movs	r1, #0
   2b0fc:	5499      	strb	r1, [r3, r2]
   2b0fe:	687b      	ldr	r3, [r7, #4]
   2b100:	2256      	movs	r2, #86	; 0x56
   2b102:	2100      	movs	r1, #0
   2b104:	5499      	strb	r1, [r3, r2]
   2b106:	687b      	ldr	r3, [r7, #4]
   2b108:	2257      	movs	r2, #87	; 0x57
   2b10a:	2100      	movs	r1, #0
   2b10c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b10e:	687b      	ldr	r3, [r7, #4]
   2b110:	2298      	movs	r2, #152	; 0x98
   2b112:	2100      	movs	r1, #0
   2b114:	5499      	strb	r1, [r3, r2]
   2b116:	687b      	ldr	r3, [r7, #4]
   2b118:	2200      	movs	r2, #0
   2b11a:	659a      	str	r2, [r3, #88]	; 0x58
   2b11c:	687b      	ldr	r3, [r7, #4]
   2b11e:	2200      	movs	r2, #0
   2b120:	679a      	str	r2, [r3, #120]	; 0x78
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	2299      	movs	r2, #153	; 0x99
   2b126:	2100      	movs	r1, #0
   2b128:	5499      	strb	r1, [r3, r2]
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	2200      	movs	r2, #0
   2b12e:	65da      	str	r2, [r3, #92]	; 0x5c
   2b130:	687b      	ldr	r3, [r7, #4]
   2b132:	2200      	movs	r2, #0
   2b134:	67da      	str	r2, [r3, #124]	; 0x7c
   2b136:	687b      	ldr	r3, [r7, #4]
   2b138:	229a      	movs	r2, #154	; 0x9a
   2b13a:	2100      	movs	r1, #0
   2b13c:	5499      	strb	r1, [r3, r2]
   2b13e:	687b      	ldr	r3, [r7, #4]
   2b140:	2200      	movs	r2, #0
   2b142:	661a      	str	r2, [r3, #96]	; 0x60
   2b144:	687b      	ldr	r3, [r7, #4]
   2b146:	2280      	movs	r2, #128	; 0x80
   2b148:	2100      	movs	r1, #0
   2b14a:	5099      	str	r1, [r3, r2]
   2b14c:	687b      	ldr	r3, [r7, #4]
   2b14e:	229b      	movs	r2, #155	; 0x9b
   2b150:	2100      	movs	r1, #0
   2b152:	5499      	strb	r1, [r3, r2]
   2b154:	687b      	ldr	r3, [r7, #4]
   2b156:	2200      	movs	r2, #0
   2b158:	665a      	str	r2, [r3, #100]	; 0x64
   2b15a:	687b      	ldr	r3, [r7, #4]
   2b15c:	2284      	movs	r2, #132	; 0x84
   2b15e:	2100      	movs	r1, #0
   2b160:	5099      	str	r1, [r3, r2]
   2b162:	687b      	ldr	r3, [r7, #4]
   2b164:	229c      	movs	r2, #156	; 0x9c
   2b166:	2100      	movs	r1, #0
   2b168:	5499      	strb	r1, [r3, r2]
   2b16a:	687b      	ldr	r3, [r7, #4]
   2b16c:	2200      	movs	r2, #0
   2b16e:	669a      	str	r2, [r3, #104]	; 0x68
   2b170:	687b      	ldr	r3, [r7, #4]
   2b172:	2288      	movs	r2, #136	; 0x88
   2b174:	2100      	movs	r1, #0
   2b176:	5099      	str	r1, [r3, r2]
   2b178:	687b      	ldr	r3, [r7, #4]
   2b17a:	229d      	movs	r2, #157	; 0x9d
   2b17c:	2100      	movs	r1, #0
   2b17e:	5499      	strb	r1, [r3, r2]
   2b180:	687b      	ldr	r3, [r7, #4]
   2b182:	2200      	movs	r2, #0
   2b184:	66da      	str	r2, [r3, #108]	; 0x6c
   2b186:	687b      	ldr	r3, [r7, #4]
   2b188:	228c      	movs	r2, #140	; 0x8c
   2b18a:	2100      	movs	r1, #0
   2b18c:	5099      	str	r1, [r3, r2]
   2b18e:	687b      	ldr	r3, [r7, #4]
   2b190:	229e      	movs	r2, #158	; 0x9e
   2b192:	2100      	movs	r1, #0
   2b194:	5499      	strb	r1, [r3, r2]
   2b196:	687b      	ldr	r3, [r7, #4]
   2b198:	2200      	movs	r2, #0
   2b19a:	671a      	str	r2, [r3, #112]	; 0x70
   2b19c:	687b      	ldr	r3, [r7, #4]
   2b19e:	2290      	movs	r2, #144	; 0x90
   2b1a0:	2100      	movs	r1, #0
   2b1a2:	5099      	str	r1, [r3, r2]
   2b1a4:	687b      	ldr	r3, [r7, #4]
   2b1a6:	229f      	movs	r2, #159	; 0x9f
   2b1a8:	2100      	movs	r1, #0
   2b1aa:	5499      	strb	r1, [r3, r2]
   2b1ac:	687b      	ldr	r3, [r7, #4]
   2b1ae:	2200      	movs	r2, #0
   2b1b0:	675a      	str	r2, [r3, #116]	; 0x74
   2b1b2:	687b      	ldr	r3, [r7, #4]
   2b1b4:	2294      	movs	r2, #148	; 0x94
   2b1b6:	2100      	movs	r1, #0
   2b1b8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	22a0      	movs	r2, #160	; 0xa0
   2b1be:	2101      	movs	r1, #1
   2b1c0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b1c2:	687b      	ldr	r3, [r7, #4]
   2b1c4:	22a1      	movs	r2, #161	; 0xa1
   2b1c6:	2100      	movs	r1, #0
   2b1c8:	5499      	strb	r1, [r3, r2]
}
   2b1ca:	46c0      	nop			; (mov r8, r8)
   2b1cc:	46bd      	mov	sp, r7
   2b1ce:	b005      	add	sp, #20
   2b1d0:	bd90      	pop	{r4, r7, pc}
   2b1d2:	46c0      	nop			; (mov r8, r8)
   2b1d4:	0002aed1 	.word	0x0002aed1
   2b1d8:	0003a628 	.word	0x0003a628

0002b1dc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b1dc:	b580      	push	{r7, lr}
   2b1de:	b086      	sub	sp, #24
   2b1e0:	af00      	add	r7, sp, #0
   2b1e2:	60b9      	str	r1, [r7, #8]
   2b1e4:	607a      	str	r2, [r7, #4]
   2b1e6:	230f      	movs	r3, #15
   2b1e8:	18fb      	adds	r3, r7, r3
   2b1ea:	1c02      	adds	r2, r0, #0
   2b1ec:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b1ee:	2300      	movs	r3, #0
   2b1f0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b1f2:	2300      	movs	r3, #0
   2b1f4:	613b      	str	r3, [r7, #16]
   2b1f6:	e01d      	b.n	2b234 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b1f8:	68ba      	ldr	r2, [r7, #8]
   2b1fa:	693b      	ldr	r3, [r7, #16]
   2b1fc:	18d3      	adds	r3, r2, r3
   2b1fe:	3310      	adds	r3, #16
   2b200:	781b      	ldrb	r3, [r3, #0]
   2b202:	2b01      	cmp	r3, #1
   2b204:	d113      	bne.n	2b22e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b206:	230f      	movs	r3, #15
   2b208:	18fb      	adds	r3, r7, r3
   2b20a:	781b      	ldrb	r3, [r3, #0]
   2b20c:	4a1b      	ldr	r2, [pc, #108]	; (2b27c <_tcc_build_ctrla+0xa0>)
   2b20e:	5cd3      	ldrb	r3, [r2, r3]
   2b210:	001a      	movs	r2, r3
   2b212:	693b      	ldr	r3, [r7, #16]
   2b214:	429a      	cmp	r2, r3
   2b216:	da01      	bge.n	2b21c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b218:	2317      	movs	r3, #23
   2b21a:	e02a      	b.n	2b272 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b21c:	2380      	movs	r3, #128	; 0x80
   2b21e:	045a      	lsls	r2, r3, #17
   2b220:	693b      	ldr	r3, [r7, #16]
   2b222:	409a      	lsls	r2, r3
   2b224:	0013      	movs	r3, r2
   2b226:	001a      	movs	r2, r3
   2b228:	697b      	ldr	r3, [r7, #20]
   2b22a:	4313      	orrs	r3, r2
   2b22c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b22e:	693b      	ldr	r3, [r7, #16]
   2b230:	3301      	adds	r3, #1
   2b232:	613b      	str	r3, [r7, #16]
   2b234:	693b      	ldr	r3, [r7, #16]
   2b236:	2b03      	cmp	r3, #3
   2b238:	ddde      	ble.n	2b1f8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b23a:	68bb      	ldr	r3, [r7, #8]
   2b23c:	22a1      	movs	r2, #161	; 0xa1
   2b23e:	5c9b      	ldrb	r3, [r3, r2]
   2b240:	2b00      	cmp	r3, #0
   2b242:	d004      	beq.n	2b24e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b244:	697b      	ldr	r3, [r7, #20]
   2b246:	2280      	movs	r2, #128	; 0x80
   2b248:	0112      	lsls	r2, r2, #4
   2b24a:	4313      	orrs	r3, r2
   2b24c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b24e:	68bb      	ldr	r3, [r7, #8]
   2b250:	7b1b      	ldrb	r3, [r3, #12]
   2b252:	031b      	lsls	r3, r3, #12
   2b254:	001a      	movs	r2, r3
   2b256:	697b      	ldr	r3, [r7, #20]
   2b258:	4313      	orrs	r3, r2
   2b25a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b25c:	68bb      	ldr	r3, [r7, #8]
   2b25e:	7adb      	ldrb	r3, [r3, #11]
   2b260:	021b      	lsls	r3, r3, #8
   2b262:	001a      	movs	r2, r3
   2b264:	697b      	ldr	r3, [r7, #20]
   2b266:	4313      	orrs	r3, r2
   2b268:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b26a:	687b      	ldr	r3, [r7, #4]
   2b26c:	697a      	ldr	r2, [r7, #20]
   2b26e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b270:	2300      	movs	r3, #0
}
   2b272:	0018      	movs	r0, r3
   2b274:	46bd      	mov	sp, r7
   2b276:	b006      	add	sp, #24
   2b278:	bd80      	pop	{r7, pc}
   2b27a:	46c0      	nop			; (mov r8, r8)
   2b27c:	0003a634 	.word	0x0003a634

0002b280 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b280:	b580      	push	{r7, lr}
   2b282:	b086      	sub	sp, #24
   2b284:	af00      	add	r7, sp, #0
   2b286:	60b9      	str	r1, [r7, #8]
   2b288:	607a      	str	r2, [r7, #4]
   2b28a:	230f      	movs	r3, #15
   2b28c:	18fb      	adds	r3, r7, r3
   2b28e:	1c02      	adds	r2, r0, #0
   2b290:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b292:	2317      	movs	r3, #23
   2b294:	18fb      	adds	r3, r7, r3
   2b296:	2200      	movs	r2, #0
   2b298:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b29a:	68bb      	ldr	r3, [r7, #8]
   2b29c:	7a1b      	ldrb	r3, [r3, #8]
   2b29e:	2b00      	cmp	r3, #0
   2b2a0:	d007      	beq.n	2b2b2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b2a2:	2317      	movs	r3, #23
   2b2a4:	18fb      	adds	r3, r7, r3
   2b2a6:	2217      	movs	r2, #23
   2b2a8:	18ba      	adds	r2, r7, r2
   2b2aa:	7812      	ldrb	r2, [r2, #0]
   2b2ac:	2104      	movs	r1, #4
   2b2ae:	430a      	orrs	r2, r1
   2b2b0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b2b2:	68bb      	ldr	r3, [r7, #8]
   2b2b4:	7a5b      	ldrb	r3, [r3, #9]
   2b2b6:	2b01      	cmp	r3, #1
   2b2b8:	d107      	bne.n	2b2ca <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b2ba:	2317      	movs	r3, #23
   2b2bc:	18fb      	adds	r3, r7, r3
   2b2be:	2217      	movs	r2, #23
   2b2c0:	18ba      	adds	r2, r7, r2
   2b2c2:	7812      	ldrb	r2, [r2, #0]
   2b2c4:	2101      	movs	r1, #1
   2b2c6:	430a      	orrs	r2, r1
   2b2c8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b2ca:	687b      	ldr	r3, [r7, #4]
   2b2cc:	2217      	movs	r2, #23
   2b2ce:	18ba      	adds	r2, r7, r2
   2b2d0:	7812      	ldrb	r2, [r2, #0]
   2b2d2:	701a      	strb	r2, [r3, #0]
}
   2b2d4:	46c0      	nop			; (mov r8, r8)
   2b2d6:	46bd      	mov	sp, r7
   2b2d8:	b006      	add	sp, #24
   2b2da:	bd80      	pop	{r7, pc}

0002b2dc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b2dc:	b580      	push	{r7, lr}
   2b2de:	b088      	sub	sp, #32
   2b2e0:	af00      	add	r7, sp, #0
   2b2e2:	60b9      	str	r1, [r7, #8]
   2b2e4:	607a      	str	r2, [r7, #4]
   2b2e6:	230f      	movs	r3, #15
   2b2e8:	18fb      	adds	r3, r7, r3
   2b2ea:	1c02      	adds	r2, r0, #0
   2b2ec:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b2ee:	230f      	movs	r3, #15
   2b2f0:	18fb      	adds	r3, r7, r3
   2b2f2:	781a      	ldrb	r2, [r3, #0]
   2b2f4:	231b      	movs	r3, #27
   2b2f6:	18fb      	adds	r3, r7, r3
   2b2f8:	493e      	ldr	r1, [pc, #248]	; (2b3f4 <_tcc_build_faults+0x118>)
   2b2fa:	5c8a      	ldrb	r2, [r1, r2]
   2b2fc:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b2fe:	2300      	movs	r3, #0
   2b300:	61fb      	str	r3, [r7, #28]
   2b302:	e06e      	b.n	2b3e2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b304:	69fa      	ldr	r2, [r7, #28]
   2b306:	0013      	movs	r3, r2
   2b308:	009b      	lsls	r3, r3, #2
   2b30a:	189b      	adds	r3, r3, r2
   2b30c:	005b      	lsls	r3, r3, #1
   2b30e:	3328      	adds	r3, #40	; 0x28
   2b310:	68ba      	ldr	r2, [r7, #8]
   2b312:	18d3      	adds	r3, r2, r3
   2b314:	3304      	adds	r3, #4
   2b316:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b318:	697b      	ldr	r3, [r7, #20]
   2b31a:	7a5b      	ldrb	r3, [r3, #9]
   2b31c:	221b      	movs	r2, #27
   2b31e:	18ba      	adds	r2, r7, r2
   2b320:	7812      	ldrb	r2, [r2, #0]
   2b322:	429a      	cmp	r2, r3
   2b324:	d801      	bhi.n	2b32a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b326:	2317      	movs	r3, #23
   2b328:	e05f      	b.n	2b3ea <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b32a:	697b      	ldr	r3, [r7, #20]
   2b32c:	781b      	ldrb	r3, [r3, #0]
   2b32e:	2b0f      	cmp	r3, #15
   2b330:	d901      	bls.n	2b336 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b332:	2317      	movs	r3, #23
   2b334:	e059      	b.n	2b3ea <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b336:	697b      	ldr	r3, [r7, #20]
   2b338:	781b      	ldrb	r3, [r3, #0]
   2b33a:	061b      	lsls	r3, r3, #24
   2b33c:	001a      	movs	r2, r3
   2b33e:	23f0      	movs	r3, #240	; 0xf0
   2b340:	051b      	lsls	r3, r3, #20
   2b342:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b344:	697b      	ldr	r3, [r7, #20]
   2b346:	785b      	ldrb	r3, [r3, #1]
   2b348:	041b      	lsls	r3, r3, #16
   2b34a:	0019      	movs	r1, r3
   2b34c:	23ff      	movs	r3, #255	; 0xff
   2b34e:	041b      	lsls	r3, r3, #16
   2b350:	400b      	ands	r3, r1
   2b352:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b354:	697b      	ldr	r3, [r7, #20]
   2b356:	789b      	ldrb	r3, [r3, #2]
   2b358:	2b00      	cmp	r3, #0
   2b35a:	d001      	beq.n	2b360 <_tcc_build_faults+0x84>
   2b35c:	2380      	movs	r3, #128	; 0x80
   2b35e:	e000      	b.n	2b362 <_tcc_build_faults+0x86>
   2b360:	2300      	movs	r3, #0
   2b362:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b364:	697b      	ldr	r3, [r7, #20]
   2b366:	78db      	ldrb	r3, [r3, #3]
   2b368:	2b00      	cmp	r3, #0
   2b36a:	d001      	beq.n	2b370 <_tcc_build_faults+0x94>
   2b36c:	2308      	movs	r3, #8
   2b36e:	e000      	b.n	2b372 <_tcc_build_faults+0x96>
   2b370:	2300      	movs	r3, #0
   2b372:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b374:	697b      	ldr	r3, [r7, #20]
   2b376:	791b      	ldrb	r3, [r3, #4]
   2b378:	2b00      	cmp	r3, #0
   2b37a:	d001      	beq.n	2b380 <_tcc_build_faults+0xa4>
   2b37c:	2310      	movs	r3, #16
   2b37e:	e000      	b.n	2b382 <_tcc_build_faults+0xa6>
   2b380:	2300      	movs	r3, #0
   2b382:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b384:	697b      	ldr	r3, [r7, #20]
   2b386:	795b      	ldrb	r3, [r3, #5]
   2b388:	0019      	movs	r1, r3
   2b38a:	2303      	movs	r3, #3
   2b38c:	400b      	ands	r3, r1
   2b38e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b390:	697b      	ldr	r3, [r7, #20]
   2b392:	799b      	ldrb	r3, [r3, #6]
   2b394:	015b      	lsls	r3, r3, #5
   2b396:	0019      	movs	r1, r3
   2b398:	2360      	movs	r3, #96	; 0x60
   2b39a:	400b      	ands	r3, r1
   2b39c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b39e:	697b      	ldr	r3, [r7, #20]
   2b3a0:	79db      	ldrb	r3, [r3, #7]
   2b3a2:	021b      	lsls	r3, r3, #8
   2b3a4:	0019      	movs	r1, r3
   2b3a6:	23c0      	movs	r3, #192	; 0xc0
   2b3a8:	009b      	lsls	r3, r3, #2
   2b3aa:	400b      	ands	r3, r1
   2b3ac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b3ae:	697b      	ldr	r3, [r7, #20]
   2b3b0:	7a1b      	ldrb	r3, [r3, #8]
   2b3b2:	031b      	lsls	r3, r3, #12
   2b3b4:	0019      	movs	r1, r3
   2b3b6:	23e0      	movs	r3, #224	; 0xe0
   2b3b8:	01db      	lsls	r3, r3, #7
   2b3ba:	400b      	ands	r3, r1
   2b3bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b3be:	697b      	ldr	r3, [r7, #20]
   2b3c0:	7a5b      	ldrb	r3, [r3, #9]
   2b3c2:	029b      	lsls	r3, r3, #10
   2b3c4:	0019      	movs	r1, r3
   2b3c6:	23c0      	movs	r3, #192	; 0xc0
   2b3c8:	011b      	lsls	r3, r3, #4
   2b3ca:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b3cc:	4313      	orrs	r3, r2
   2b3ce:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b3d0:	69fb      	ldr	r3, [r7, #28]
   2b3d2:	009b      	lsls	r3, r3, #2
   2b3d4:	687a      	ldr	r2, [r7, #4]
   2b3d6:	18d3      	adds	r3, r2, r3
   2b3d8:	693a      	ldr	r2, [r7, #16]
   2b3da:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b3dc:	69fb      	ldr	r3, [r7, #28]
   2b3de:	3301      	adds	r3, #1
   2b3e0:	61fb      	str	r3, [r7, #28]
   2b3e2:	69fb      	ldr	r3, [r7, #28]
   2b3e4:	2b01      	cmp	r3, #1
   2b3e6:	dd8d      	ble.n	2b304 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b3e8:	2300      	movs	r3, #0
}
   2b3ea:	0018      	movs	r0, r3
   2b3ec:	46bd      	mov	sp, r7
   2b3ee:	b008      	add	sp, #32
   2b3f0:	bd80      	pop	{r7, pc}
   2b3f2:	46c0      	nop			; (mov r8, r8)
   2b3f4:	0003a634 	.word	0x0003a634

0002b3f8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b3f8:	b580      	push	{r7, lr}
   2b3fa:	b088      	sub	sp, #32
   2b3fc:	af00      	add	r7, sp, #0
   2b3fe:	60b9      	str	r1, [r7, #8]
   2b400:	607a      	str	r2, [r7, #4]
   2b402:	230f      	movs	r3, #15
   2b404:	18fb      	adds	r3, r7, r3
   2b406:	1c02      	adds	r2, r0, #0
   2b408:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b40a:	230f      	movs	r3, #15
   2b40c:	18fb      	adds	r3, r7, r3
   2b40e:	781a      	ldrb	r2, [r3, #0]
   2b410:	2317      	movs	r3, #23
   2b412:	18fb      	adds	r3, r7, r3
   2b414:	492d      	ldr	r1, [pc, #180]	; (2b4cc <_tcc_build_drvctrl+0xd4>)
   2b416:	5c8a      	ldrb	r2, [r1, r2]
   2b418:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b41a:	2300      	movs	r3, #0
   2b41c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b41e:	2300      	movs	r3, #0
   2b420:	61fb      	str	r3, [r7, #28]
   2b422:	e048      	b.n	2b4b6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b424:	68ba      	ldr	r2, [r7, #8]
   2b426:	2150      	movs	r1, #80	; 0x50
   2b428:	69fb      	ldr	r3, [r7, #28]
   2b42a:	18d3      	adds	r3, r2, r3
   2b42c:	185b      	adds	r3, r3, r1
   2b42e:	781b      	ldrb	r3, [r3, #0]
   2b430:	2b00      	cmp	r3, #0
   2b432:	d010      	beq.n	2b456 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b434:	2317      	movs	r3, #23
   2b436:	18fb      	adds	r3, r7, r3
   2b438:	781a      	ldrb	r2, [r3, #0]
   2b43a:	69fb      	ldr	r3, [r7, #28]
   2b43c:	429a      	cmp	r2, r3
   2b43e:	d801      	bhi.n	2b444 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b440:	2317      	movs	r3, #23
   2b442:	e03f      	b.n	2b4c4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b444:	2380      	movs	r3, #128	; 0x80
   2b446:	025a      	lsls	r2, r3, #9
   2b448:	69fb      	ldr	r3, [r7, #28]
   2b44a:	409a      	lsls	r2, r3
   2b44c:	0013      	movs	r3, r2
   2b44e:	001a      	movs	r2, r3
   2b450:	69bb      	ldr	r3, [r7, #24]
   2b452:	4313      	orrs	r3, r2
   2b454:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b456:	68ba      	ldr	r2, [r7, #8]
   2b458:	69fb      	ldr	r3, [r7, #28]
   2b45a:	331c      	adds	r3, #28
   2b45c:	005b      	lsls	r3, r3, #1
   2b45e:	18d3      	adds	r3, r2, r3
   2b460:	3309      	adds	r3, #9
   2b462:	781b      	ldrb	r3, [r3, #0]
   2b464:	2b00      	cmp	r3, #0
   2b466:	d023      	beq.n	2b4b0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b468:	2317      	movs	r3, #23
   2b46a:	18fb      	adds	r3, r7, r3
   2b46c:	781a      	ldrb	r2, [r3, #0]
   2b46e:	69fb      	ldr	r3, [r7, #28]
   2b470:	429a      	cmp	r2, r3
   2b472:	d801      	bhi.n	2b478 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b474:	2317      	movs	r3, #23
   2b476:	e025      	b.n	2b4c4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b478:	68ba      	ldr	r2, [r7, #8]
   2b47a:	69fb      	ldr	r3, [r7, #28]
   2b47c:	331c      	adds	r3, #28
   2b47e:	005b      	lsls	r3, r3, #1
   2b480:	18d3      	adds	r3, r2, r3
   2b482:	3309      	adds	r3, #9
   2b484:	781b      	ldrb	r3, [r3, #0]
   2b486:	2b02      	cmp	r3, #2
   2b488:	d10a      	bne.n	2b4a0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b48a:	2302      	movs	r3, #2
   2b48c:	33ff      	adds	r3, #255	; 0xff
   2b48e:	001a      	movs	r2, r3
   2b490:	69fb      	ldr	r3, [r7, #28]
   2b492:	409a      	lsls	r2, r3
   2b494:	0013      	movs	r3, r2
   2b496:	001a      	movs	r2, r3
   2b498:	69bb      	ldr	r3, [r7, #24]
   2b49a:	4313      	orrs	r3, r2
   2b49c:	61bb      	str	r3, [r7, #24]
   2b49e:	e007      	b.n	2b4b0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b4a0:	2201      	movs	r2, #1
   2b4a2:	69fb      	ldr	r3, [r7, #28]
   2b4a4:	409a      	lsls	r2, r3
   2b4a6:	0013      	movs	r3, r2
   2b4a8:	001a      	movs	r2, r3
   2b4aa:	69bb      	ldr	r3, [r7, #24]
   2b4ac:	4313      	orrs	r3, r2
   2b4ae:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b4b0:	69fb      	ldr	r3, [r7, #28]
   2b4b2:	3301      	adds	r3, #1
   2b4b4:	61fb      	str	r3, [r7, #28]
   2b4b6:	69fb      	ldr	r3, [r7, #28]
   2b4b8:	2b07      	cmp	r3, #7
   2b4ba:	d9b3      	bls.n	2b424 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b4bc:	687b      	ldr	r3, [r7, #4]
   2b4be:	69ba      	ldr	r2, [r7, #24]
   2b4c0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b4c2:	2300      	movs	r3, #0
}
   2b4c4:	0018      	movs	r0, r3
   2b4c6:	46bd      	mov	sp, r7
   2b4c8:	b008      	add	sp, #32
   2b4ca:	bd80      	pop	{r7, pc}
   2b4cc:	0003a638 	.word	0x0003a638

0002b4d0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b4d0:	b580      	push	{r7, lr}
   2b4d2:	b088      	sub	sp, #32
   2b4d4:	af00      	add	r7, sp, #0
   2b4d6:	60b9      	str	r1, [r7, #8]
   2b4d8:	607a      	str	r2, [r7, #4]
   2b4da:	230f      	movs	r3, #15
   2b4dc:	18fb      	adds	r3, r7, r3
   2b4de:	1c02      	adds	r2, r0, #0
   2b4e0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b4e2:	230f      	movs	r3, #15
   2b4e4:	18fb      	adds	r3, r7, r3
   2b4e6:	781a      	ldrb	r2, [r3, #0]
   2b4e8:	2317      	movs	r3, #23
   2b4ea:	18fb      	adds	r3, r7, r3
   2b4ec:	491d      	ldr	r1, [pc, #116]	; (2b564 <_tcc_build_waves+0x94>)
   2b4ee:	5c8a      	ldrb	r2, [r1, r2]
   2b4f0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b4f2:	68bb      	ldr	r3, [r7, #8]
   2b4f4:	3310      	adds	r3, #16
   2b4f6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b4f8:	693b      	ldr	r3, [r7, #16]
   2b4fa:	7a5b      	ldrb	r3, [r3, #9]
   2b4fc:	011b      	lsls	r3, r3, #4
   2b4fe:	001a      	movs	r2, r3
   2b500:	2330      	movs	r3, #48	; 0x30
   2b502:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b504:	693b      	ldr	r3, [r7, #16]
   2b506:	7a1b      	ldrb	r3, [r3, #8]
   2b508:	0019      	movs	r1, r3
   2b50a:	2307      	movs	r3, #7
   2b50c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b50e:	4313      	orrs	r3, r2
   2b510:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b512:	2300      	movs	r3, #0
   2b514:	61fb      	str	r3, [r7, #28]
   2b516:	e01a      	b.n	2b54e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b518:	693a      	ldr	r2, [r7, #16]
   2b51a:	69fb      	ldr	r3, [r7, #28]
   2b51c:	18d3      	adds	r3, r2, r3
   2b51e:	3304      	adds	r3, #4
   2b520:	781b      	ldrb	r3, [r3, #0]
   2b522:	2b00      	cmp	r3, #0
   2b524:	d010      	beq.n	2b548 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b526:	2317      	movs	r3, #23
   2b528:	18fb      	adds	r3, r7, r3
   2b52a:	781a      	ldrb	r2, [r3, #0]
   2b52c:	69fb      	ldr	r3, [r7, #28]
   2b52e:	429a      	cmp	r2, r3
   2b530:	dc01      	bgt.n	2b536 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b532:	2317      	movs	r3, #23
   2b534:	e012      	b.n	2b55c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b536:	2380      	movs	r3, #128	; 0x80
   2b538:	025a      	lsls	r2, r3, #9
   2b53a:	69fb      	ldr	r3, [r7, #28]
   2b53c:	409a      	lsls	r2, r3
   2b53e:	0013      	movs	r3, r2
   2b540:	001a      	movs	r2, r3
   2b542:	69bb      	ldr	r3, [r7, #24]
   2b544:	4313      	orrs	r3, r2
   2b546:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b548:	69fb      	ldr	r3, [r7, #28]
   2b54a:	3301      	adds	r3, #1
   2b54c:	61fb      	str	r3, [r7, #28]
   2b54e:	69fb      	ldr	r3, [r7, #28]
   2b550:	2b03      	cmp	r3, #3
   2b552:	dde1      	ble.n	2b518 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b554:	687b      	ldr	r3, [r7, #4]
   2b556:	69ba      	ldr	r2, [r7, #24]
   2b558:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b55a:	2300      	movs	r3, #0
}
   2b55c:	0018      	movs	r0, r3
   2b55e:	46bd      	mov	sp, r7
   2b560:	b008      	add	sp, #32
   2b562:	bd80      	pop	{r7, pc}
   2b564:	0003a634 	.word	0x0003a634

0002b568 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b568:	b590      	push	{r4, r7, lr}
   2b56a:	b091      	sub	sp, #68	; 0x44
   2b56c:	af00      	add	r7, sp, #0
   2b56e:	60f8      	str	r0, [r7, #12]
   2b570:	60b9      	str	r1, [r7, #8]
   2b572:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b574:	233b      	movs	r3, #59	; 0x3b
   2b576:	18fc      	adds	r4, r7, r3
   2b578:	68bb      	ldr	r3, [r7, #8]
   2b57a:	0018      	movs	r0, r3
   2b57c:	4bc4      	ldr	r3, [pc, #784]	; (2b890 <tcc_init+0x328>)
   2b57e:	4798      	blx	r3
   2b580:	0003      	movs	r3, r0
   2b582:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b584:	233b      	movs	r3, #59	; 0x3b
   2b586:	18fb      	adds	r3, r7, r3
   2b588:	781a      	ldrb	r2, [r3, #0]
   2b58a:	4bc2      	ldr	r3, [pc, #776]	; (2b894 <tcc_init+0x32c>)
   2b58c:	0092      	lsls	r2, r2, #2
   2b58e:	58d3      	ldr	r3, [r2, r3]
   2b590:	0019      	movs	r1, r3
   2b592:	2002      	movs	r0, #2
   2b594:	4bc0      	ldr	r3, [pc, #768]	; (2b898 <tcc_init+0x330>)
   2b596:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b598:	68bb      	ldr	r3, [r7, #8]
   2b59a:	681b      	ldr	r3, [r3, #0]
   2b59c:	2202      	movs	r2, #2
   2b59e:	4013      	ands	r3, r2
   2b5a0:	d001      	beq.n	2b5a6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b5a2:	231c      	movs	r3, #28
   2b5a4:	e1be      	b.n	2b924 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b5a6:	68bb      	ldr	r3, [r7, #8]
   2b5a8:	681b      	ldr	r3, [r3, #0]
   2b5aa:	2201      	movs	r2, #1
   2b5ac:	4013      	ands	r3, r2
   2b5ae:	d001      	beq.n	2b5b4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b5b0:	231c      	movs	r3, #28
   2b5b2:	e1b7      	b.n	2b924 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b5b4:	233b      	movs	r3, #59	; 0x3b
   2b5b6:	18fb      	adds	r3, r7, r3
   2b5b8:	781a      	ldrb	r2, [r3, #0]
   2b5ba:	4bb8      	ldr	r3, [pc, #736]	; (2b89c <tcc_init+0x334>)
   2b5bc:	0092      	lsls	r2, r2, #2
   2b5be:	58d3      	ldr	r3, [r2, r3]
   2b5c0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b5c2:	687b      	ldr	r3, [r7, #4]
   2b5c4:	681a      	ldr	r2, [r3, #0]
   2b5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b5c8:	429a      	cmp	r2, r3
   2b5ca:	d804      	bhi.n	2b5d6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b5cc:	687b      	ldr	r3, [r7, #4]
   2b5ce:	685a      	ldr	r2, [r3, #4]
   2b5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b5d2:	429a      	cmp	r2, r3
   2b5d4:	d901      	bls.n	2b5da <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b5d6:	2317      	movs	r3, #23
   2b5d8:	e1a4      	b.n	2b924 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b5da:	2300      	movs	r3, #0
   2b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b5de:	e00e      	b.n	2b5fe <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b5e0:	687a      	ldr	r2, [r7, #4]
   2b5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5e4:	3306      	adds	r3, #6
   2b5e6:	009b      	lsls	r3, r3, #2
   2b5e8:	18d3      	adds	r3, r2, r3
   2b5ea:	3304      	adds	r3, #4
   2b5ec:	681a      	ldr	r2, [r3, #0]
   2b5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b5f0:	429a      	cmp	r2, r3
   2b5f2:	d901      	bls.n	2b5f8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b5f4:	2317      	movs	r3, #23
   2b5f6:	e195      	b.n	2b924 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b5fa:	3301      	adds	r3, #1
   2b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b600:	2b03      	cmp	r3, #3
   2b602:	dded      	ble.n	2b5e0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b604:	2300      	movs	r3, #0
   2b606:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b608:	e019      	b.n	2b63e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b60a:	687a      	ldr	r2, [r7, #4]
   2b60c:	2198      	movs	r1, #152	; 0x98
   2b60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b610:	18d3      	adds	r3, r2, r3
   2b612:	185b      	adds	r3, r3, r1
   2b614:	781b      	ldrb	r3, [r3, #0]
   2b616:	2201      	movs	r2, #1
   2b618:	4053      	eors	r3, r2
   2b61a:	b2db      	uxtb	r3, r3
   2b61c:	2b00      	cmp	r3, #0
   2b61e:	d10a      	bne.n	2b636 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b620:	233b      	movs	r3, #59	; 0x3b
   2b622:	18fb      	adds	r3, r7, r3
   2b624:	781b      	ldrb	r3, [r3, #0]
   2b626:	4a9e      	ldr	r2, [pc, #632]	; (2b8a0 <tcc_init+0x338>)
   2b628:	5cd3      	ldrb	r3, [r2, r3]
   2b62a:	001a      	movs	r2, r3
   2b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b62e:	429a      	cmp	r2, r3
   2b630:	dc02      	bgt.n	2b638 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b632:	2317      	movs	r3, #23
   2b634:	e176      	b.n	2b924 <tcc_init+0x3bc>
			continue;
   2b636:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b63a:	3301      	adds	r3, #1
   2b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b640:	2b07      	cmp	r3, #7
   2b642:	dde2      	ble.n	2b60a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b644:	2300      	movs	r3, #0
   2b646:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b648:	2333      	movs	r3, #51	; 0x33
   2b64a:	18fc      	adds	r4, r7, r3
   2b64c:	232c      	movs	r3, #44	; 0x2c
   2b64e:	18fa      	adds	r2, r7, r3
   2b650:	6879      	ldr	r1, [r7, #4]
   2b652:	233b      	movs	r3, #59	; 0x3b
   2b654:	18fb      	adds	r3, r7, r3
   2b656:	781b      	ldrb	r3, [r3, #0]
   2b658:	0018      	movs	r0, r3
   2b65a:	4b92      	ldr	r3, [pc, #584]	; (2b8a4 <tcc_init+0x33c>)
   2b65c:	4798      	blx	r3
   2b65e:	0003      	movs	r3, r0
   2b660:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b662:	2333      	movs	r3, #51	; 0x33
   2b664:	18fb      	adds	r3, r7, r3
   2b666:	781b      	ldrb	r3, [r3, #0]
   2b668:	2b00      	cmp	r3, #0
   2b66a:	d003      	beq.n	2b674 <tcc_init+0x10c>
		return status;
   2b66c:	2333      	movs	r3, #51	; 0x33
   2b66e:	18fb      	adds	r3, r7, r3
   2b670:	781b      	ldrb	r3, [r3, #0]
   2b672:	e157      	b.n	2b924 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b674:	232b      	movs	r3, #43	; 0x2b
   2b676:	18fa      	adds	r2, r7, r3
   2b678:	6879      	ldr	r1, [r7, #4]
   2b67a:	233b      	movs	r3, #59	; 0x3b
   2b67c:	18fb      	adds	r3, r7, r3
   2b67e:	781b      	ldrb	r3, [r3, #0]
   2b680:	0018      	movs	r0, r3
   2b682:	4b89      	ldr	r3, [pc, #548]	; (2b8a8 <tcc_init+0x340>)
   2b684:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b686:	2333      	movs	r3, #51	; 0x33
   2b688:	18fc      	adds	r4, r7, r3
   2b68a:	2320      	movs	r3, #32
   2b68c:	18fa      	adds	r2, r7, r3
   2b68e:	6879      	ldr	r1, [r7, #4]
   2b690:	233b      	movs	r3, #59	; 0x3b
   2b692:	18fb      	adds	r3, r7, r3
   2b694:	781b      	ldrb	r3, [r3, #0]
   2b696:	0018      	movs	r0, r3
   2b698:	4b84      	ldr	r3, [pc, #528]	; (2b8ac <tcc_init+0x344>)
   2b69a:	4798      	blx	r3
   2b69c:	0003      	movs	r3, r0
   2b69e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b6a0:	2333      	movs	r3, #51	; 0x33
   2b6a2:	18fb      	adds	r3, r7, r3
   2b6a4:	781b      	ldrb	r3, [r3, #0]
   2b6a6:	2b00      	cmp	r3, #0
   2b6a8:	d003      	beq.n	2b6b2 <tcc_init+0x14a>
		return status;
   2b6aa:	2333      	movs	r3, #51	; 0x33
   2b6ac:	18fb      	adds	r3, r7, r3
   2b6ae:	781b      	ldrb	r3, [r3, #0]
   2b6b0:	e138      	b.n	2b924 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b6b6:	2333      	movs	r3, #51	; 0x33
   2b6b8:	18fc      	adds	r4, r7, r3
   2b6ba:	231c      	movs	r3, #28
   2b6bc:	18fa      	adds	r2, r7, r3
   2b6be:	6879      	ldr	r1, [r7, #4]
   2b6c0:	233b      	movs	r3, #59	; 0x3b
   2b6c2:	18fb      	adds	r3, r7, r3
   2b6c4:	781b      	ldrb	r3, [r3, #0]
   2b6c6:	0018      	movs	r0, r3
   2b6c8:	4b79      	ldr	r3, [pc, #484]	; (2b8b0 <tcc_init+0x348>)
   2b6ca:	4798      	blx	r3
   2b6cc:	0003      	movs	r3, r0
   2b6ce:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b6d0:	2333      	movs	r3, #51	; 0x33
   2b6d2:	18fb      	adds	r3, r7, r3
   2b6d4:	781b      	ldrb	r3, [r3, #0]
   2b6d6:	2b00      	cmp	r3, #0
   2b6d8:	d003      	beq.n	2b6e2 <tcc_init+0x17a>
		return status;
   2b6da:	2333      	movs	r3, #51	; 0x33
   2b6dc:	18fb      	adds	r3, r7, r3
   2b6de:	781b      	ldrb	r3, [r3, #0]
   2b6e0:	e120      	b.n	2b924 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b6e2:	2333      	movs	r3, #51	; 0x33
   2b6e4:	18fc      	adds	r4, r7, r3
   2b6e6:	2318      	movs	r3, #24
   2b6e8:	18fa      	adds	r2, r7, r3
   2b6ea:	6879      	ldr	r1, [r7, #4]
   2b6ec:	233b      	movs	r3, #59	; 0x3b
   2b6ee:	18fb      	adds	r3, r7, r3
   2b6f0:	781b      	ldrb	r3, [r3, #0]
   2b6f2:	0018      	movs	r0, r3
   2b6f4:	4b6f      	ldr	r3, [pc, #444]	; (2b8b4 <tcc_init+0x34c>)
   2b6f6:	4798      	blx	r3
   2b6f8:	0003      	movs	r3, r0
   2b6fa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b6fc:	2333      	movs	r3, #51	; 0x33
   2b6fe:	18fb      	adds	r3, r7, r3
   2b700:	781b      	ldrb	r3, [r3, #0]
   2b702:	2b00      	cmp	r3, #0
   2b704:	d003      	beq.n	2b70e <tcc_init+0x1a6>
		return status;
   2b706:	2333      	movs	r3, #51	; 0x33
   2b708:	18fb      	adds	r3, r7, r3
   2b70a:	781b      	ldrb	r3, [r3, #0]
   2b70c:	e10a      	b.n	2b924 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b70e:	2300      	movs	r3, #0
   2b710:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b712:	e009      	b.n	2b728 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b714:	68fa      	ldr	r2, [r7, #12]
   2b716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b718:	009b      	lsls	r3, r3, #2
   2b71a:	18d3      	adds	r3, r2, r3
   2b71c:	3304      	adds	r3, #4
   2b71e:	2200      	movs	r2, #0
   2b720:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b724:	3301      	adds	r3, #1
   2b726:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b72a:	2b0b      	cmp	r3, #11
   2b72c:	ddf2      	ble.n	2b714 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b72e:	68fb      	ldr	r3, [r7, #12]
   2b730:	2200      	movs	r2, #0
   2b732:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b734:	68fb      	ldr	r3, [r7, #12]
   2b736:	2200      	movs	r2, #0
   2b738:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b73a:	233b      	movs	r3, #59	; 0x3b
   2b73c:	18fb      	adds	r3, r7, r3
   2b73e:	781a      	ldrb	r2, [r3, #0]
   2b740:	4b5d      	ldr	r3, [pc, #372]	; (2b8b8 <tcc_init+0x350>)
   2b742:	0092      	lsls	r2, r2, #2
   2b744:	68f9      	ldr	r1, [r7, #12]
   2b746:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b748:	68fb      	ldr	r3, [r7, #12]
   2b74a:	68ba      	ldr	r2, [r7, #8]
   2b74c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b74e:	687b      	ldr	r3, [r7, #4]
   2b750:	22a0      	movs	r2, #160	; 0xa0
   2b752:	5c99      	ldrb	r1, [r3, r2]
   2b754:	68fb      	ldr	r3, [r7, #12]
   2b756:	223c      	movs	r2, #60	; 0x3c
   2b758:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b75a:	2314      	movs	r3, #20
   2b75c:	18fb      	adds	r3, r7, r3
   2b75e:	0018      	movs	r0, r3
   2b760:	4b56      	ldr	r3, [pc, #344]	; (2b8bc <tcc_init+0x354>)
   2b762:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b764:	687b      	ldr	r3, [r7, #4]
   2b766:	7a9a      	ldrb	r2, [r3, #10]
   2b768:	2314      	movs	r3, #20
   2b76a:	18fb      	adds	r3, r7, r3
   2b76c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b76e:	233b      	movs	r3, #59	; 0x3b
   2b770:	18fb      	adds	r3, r7, r3
   2b772:	781b      	ldrb	r3, [r3, #0]
   2b774:	4a52      	ldr	r2, [pc, #328]	; (2b8c0 <tcc_init+0x358>)
   2b776:	5cd3      	ldrb	r3, [r2, r3]
   2b778:	2214      	movs	r2, #20
   2b77a:	18ba      	adds	r2, r7, r2
   2b77c:	0011      	movs	r1, r2
   2b77e:	0018      	movs	r0, r3
   2b780:	4b50      	ldr	r3, [pc, #320]	; (2b8c4 <tcc_init+0x35c>)
   2b782:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b784:	233b      	movs	r3, #59	; 0x3b
   2b786:	18fb      	adds	r3, r7, r3
   2b788:	781b      	ldrb	r3, [r3, #0]
   2b78a:	4a4d      	ldr	r2, [pc, #308]	; (2b8c0 <tcc_init+0x358>)
   2b78c:	5cd3      	ldrb	r3, [r2, r3]
   2b78e:	0018      	movs	r0, r3
   2b790:	4b4d      	ldr	r3, [pc, #308]	; (2b8c8 <tcc_init+0x360>)
   2b792:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b794:	2300      	movs	r3, #0
   2b796:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b798:	e02d      	b.n	2b7f6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b79a:	687a      	ldr	r2, [r7, #4]
   2b79c:	2198      	movs	r1, #152	; 0x98
   2b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7a0:	18d3      	adds	r3, r2, r3
   2b7a2:	185b      	adds	r3, r3, r1
   2b7a4:	781b      	ldrb	r3, [r3, #0]
   2b7a6:	2201      	movs	r2, #1
   2b7a8:	4053      	eors	r3, r2
   2b7aa:	b2db      	uxtb	r3, r3
   2b7ac:	2b00      	cmp	r3, #0
   2b7ae:	d11e      	bne.n	2b7ee <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b7b0:	2310      	movs	r3, #16
   2b7b2:	18fb      	adds	r3, r7, r3
   2b7b4:	0018      	movs	r0, r3
   2b7b6:	4b45      	ldr	r3, [pc, #276]	; (2b8cc <tcc_init+0x364>)
   2b7b8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b7ba:	687b      	ldr	r3, [r7, #4]
   2b7bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b7be:	321e      	adds	r2, #30
   2b7c0:	0092      	lsls	r2, r2, #2
   2b7c2:	58d3      	ldr	r3, [r2, r3]
   2b7c4:	b2da      	uxtb	r2, r3
   2b7c6:	2310      	movs	r3, #16
   2b7c8:	18fb      	adds	r3, r7, r3
   2b7ca:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b7cc:	2310      	movs	r3, #16
   2b7ce:	18fb      	adds	r3, r7, r3
   2b7d0:	2201      	movs	r2, #1
   2b7d2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b7d4:	687b      	ldr	r3, [r7, #4]
   2b7d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b7d8:	3216      	adds	r2, #22
   2b7da:	0092      	lsls	r2, r2, #2
   2b7dc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b7de:	b2db      	uxtb	r3, r3
   2b7e0:	2210      	movs	r2, #16
   2b7e2:	18ba      	adds	r2, r7, r2
   2b7e4:	0011      	movs	r1, r2
   2b7e6:	0018      	movs	r0, r3
   2b7e8:	4b39      	ldr	r3, [pc, #228]	; (2b8d0 <tcc_init+0x368>)
   2b7ea:	4798      	blx	r3
   2b7ec:	e000      	b.n	2b7f0 <tcc_init+0x288>
			continue;
   2b7ee:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7f2:	3301      	adds	r3, #1
   2b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7f6:	233b      	movs	r3, #59	; 0x3b
   2b7f8:	18fb      	adds	r3, r7, r3
   2b7fa:	781b      	ldrb	r3, [r3, #0]
   2b7fc:	4a28      	ldr	r2, [pc, #160]	; (2b8a0 <tcc_init+0x338>)
   2b7fe:	5cd3      	ldrb	r3, [r2, r3]
   2b800:	001a      	movs	r2, r3
   2b802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b804:	429a      	cmp	r2, r3
   2b806:	dcc8      	bgt.n	2b79a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b80a:	68bb      	ldr	r3, [r7, #8]
   2b80c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b80e:	46c0      	nop			; (mov r8, r8)
   2b810:	68bb      	ldr	r3, [r7, #8]
   2b812:	689b      	ldr	r3, [r3, #8]
   2b814:	2204      	movs	r2, #4
   2b816:	4013      	ands	r3, r2
   2b818:	d1fa      	bne.n	2b810 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b81a:	68bb      	ldr	r3, [r7, #8]
   2b81c:	22ff      	movs	r2, #255	; 0xff
   2b81e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b820:	46c0      	nop			; (mov r8, r8)
   2b822:	68bb      	ldr	r3, [r7, #8]
   2b824:	689b      	ldr	r3, [r3, #8]
   2b826:	2204      	movs	r2, #4
   2b828:	4013      	ands	r3, r2
   2b82a:	d1fa      	bne.n	2b822 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b82c:	232b      	movs	r3, #43	; 0x2b
   2b82e:	18fb      	adds	r3, r7, r3
   2b830:	781a      	ldrb	r2, [r3, #0]
   2b832:	68bb      	ldr	r3, [r7, #8]
   2b834:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b836:	2320      	movs	r3, #32
   2b838:	18fb      	adds	r3, r7, r3
   2b83a:	681a      	ldr	r2, [r3, #0]
   2b83c:	68bb      	ldr	r3, [r7, #8]
   2b83e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b840:	2320      	movs	r3, #32
   2b842:	18fb      	adds	r3, r7, r3
   2b844:	685a      	ldr	r2, [r3, #4]
   2b846:	68bb      	ldr	r3, [r7, #8]
   2b848:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b84a:	69fa      	ldr	r2, [r7, #28]
   2b84c:	68bb      	ldr	r3, [r7, #8]
   2b84e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b850:	46c0      	nop			; (mov r8, r8)
   2b852:	68bb      	ldr	r3, [r7, #8]
   2b854:	689b      	ldr	r3, [r3, #8]
   2b856:	4a1f      	ldr	r2, [pc, #124]	; (2b8d4 <tcc_init+0x36c>)
   2b858:	4013      	ands	r3, r2
   2b85a:	d1fa      	bne.n	2b852 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b85c:	69ba      	ldr	r2, [r7, #24]
   2b85e:	68bb      	ldr	r3, [r7, #8]
   2b860:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b862:	46c0      	nop			; (mov r8, r8)
   2b864:	68bb      	ldr	r3, [r7, #8]
   2b866:	689b      	ldr	r3, [r3, #8]
   2b868:	2210      	movs	r2, #16
   2b86a:	4013      	ands	r3, r2
   2b86c:	d1fa      	bne.n	2b864 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b86e:	687b      	ldr	r3, [r7, #4]
   2b870:	681a      	ldr	r2, [r3, #0]
   2b872:	68bb      	ldr	r3, [r7, #8]
   2b874:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b876:	46c0      	nop			; (mov r8, r8)
   2b878:	68bb      	ldr	r3, [r7, #8]
   2b87a:	689b      	ldr	r3, [r3, #8]
   2b87c:	4a16      	ldr	r2, [pc, #88]	; (2b8d8 <tcc_init+0x370>)
   2b87e:	4013      	ands	r3, r2
   2b880:	d1fa      	bne.n	2b878 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b882:	687b      	ldr	r3, [r7, #4]
   2b884:	685a      	ldr	r2, [r3, #4]
   2b886:	68bb      	ldr	r3, [r7, #8]
   2b888:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b88a:	2300      	movs	r3, #0
   2b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b88e:	e03f      	b.n	2b910 <tcc_init+0x3a8>
   2b890:	0002aed1 	.word	0x0002aed1
   2b894:	0003a61c 	.word	0x0003a61c
   2b898:	0002ae4d 	.word	0x0002ae4d
   2b89c:	0003a628 	.word	0x0003a628
   2b8a0:	0003a638 	.word	0x0003a638
   2b8a4:	0002b1dd 	.word	0x0002b1dd
   2b8a8:	0002b281 	.word	0x0002b281
   2b8ac:	0002b2dd 	.word	0x0002b2dd
   2b8b0:	0002b3f9 	.word	0x0002b3f9
   2b8b4:	0002b4d1 	.word	0x0002b4d1
   2b8b8:	20005cb8 	.word	0x20005cb8
   2b8bc:	0002ae35 	.word	0x0002ae35
   2b8c0:	0003a618 	.word	0x0003a618
   2b8c4:	0002aa4d 	.word	0x0002aa4d
   2b8c8:	0002aa91 	.word	0x0002aa91
   2b8cc:	0002aea9 	.word	0x0002aea9
   2b8d0:	0002adad 	.word	0x0002adad
   2b8d4:	00020040 	.word	0x00020040
   2b8d8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b8dc:	46c0      	nop			; (mov r8, r8)
   2b8de:	68bb      	ldr	r3, [r7, #8]
   2b8e0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b8e2:	4912      	ldr	r1, [pc, #72]	; (2b92c <tcc_init+0x3c4>)
   2b8e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b8e6:	4091      	lsls	r1, r2
   2b8e8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b8ea:	4013      	ands	r3, r2
   2b8ec:	d1f7      	bne.n	2b8de <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b8ee:	687a      	ldr	r2, [r7, #4]
   2b8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8f2:	3306      	adds	r3, #6
   2b8f4:	009b      	lsls	r3, r3, #2
   2b8f6:	18d3      	adds	r3, r2, r3
   2b8f8:	3304      	adds	r3, #4
   2b8fa:	681a      	ldr	r2, [r3, #0]
   2b8fc:	68b9      	ldr	r1, [r7, #8]
   2b8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b900:	3310      	adds	r3, #16
   2b902:	009b      	lsls	r3, r3, #2
   2b904:	18cb      	adds	r3, r1, r3
   2b906:	3304      	adds	r3, #4
   2b908:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b90c:	3301      	adds	r3, #1
   2b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b910:	233b      	movs	r3, #59	; 0x3b
   2b912:	18fb      	adds	r3, r7, r3
   2b914:	781b      	ldrb	r3, [r3, #0]
   2b916:	4a06      	ldr	r2, [pc, #24]	; (2b930 <tcc_init+0x3c8>)
   2b918:	5cd3      	ldrb	r3, [r2, r3]
   2b91a:	001a      	movs	r2, r3
   2b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b91e:	429a      	cmp	r2, r3
   2b920:	dcdc      	bgt.n	2b8dc <tcc_init+0x374>
	}

	return STATUS_OK;
   2b922:	2300      	movs	r3, #0
}
   2b924:	0018      	movs	r0, r3
   2b926:	46bd      	mov	sp, r7
   2b928:	b011      	add	sp, #68	; 0x44
   2b92a:	bd90      	pop	{r4, r7, pc}
   2b92c:	00080100 	.word	0x00080100
   2b930:	0003a634 	.word	0x0003a634

0002b934 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   2b934:	b590      	push	{r4, r7, lr}
   2b936:	b089      	sub	sp, #36	; 0x24
   2b938:	af00      	add	r7, sp, #0
   2b93a:	60f8      	str	r0, [r7, #12]
   2b93c:	0008      	movs	r0, r1
   2b93e:	607a      	str	r2, [r7, #4]
   2b940:	0019      	movs	r1, r3
   2b942:	230b      	movs	r3, #11
   2b944:	18fb      	adds	r3, r7, r3
   2b946:	1c02      	adds	r2, r0, #0
   2b948:	701a      	strb	r2, [r3, #0]
   2b94a:	230a      	movs	r3, #10
   2b94c:	18fb      	adds	r3, r7, r3
   2b94e:	1c0a      	adds	r2, r1, #0
   2b950:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   2b952:	68fb      	ldr	r3, [r7, #12]
   2b954:	681b      	ldr	r3, [r3, #0]
   2b956:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   2b958:	231b      	movs	r3, #27
   2b95a:	18fc      	adds	r4, r7, r3
   2b95c:	69fb      	ldr	r3, [r7, #28]
   2b95e:	0018      	movs	r0, r3
   2b960:	4b2e      	ldr	r3, [pc, #184]	; (2ba1c <_tcc_set_compare_value+0xe8>)
   2b962:	4798      	blx	r3
   2b964:	0003      	movs	r3, r0
   2b966:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   2b968:	231b      	movs	r3, #27
   2b96a:	18fb      	adds	r3, r7, r3
   2b96c:	781b      	ldrb	r3, [r3, #0]
   2b96e:	4a2c      	ldr	r2, [pc, #176]	; (2ba20 <_tcc_set_compare_value+0xec>)
   2b970:	5cd3      	ldrb	r3, [r2, r3]
   2b972:	220b      	movs	r2, #11
   2b974:	18ba      	adds	r2, r7, r2
   2b976:	7812      	ldrb	r2, [r2, #0]
   2b978:	429a      	cmp	r2, r3
   2b97a:	d301      	bcc.n	2b980 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   2b97c:	2317      	movs	r3, #23
   2b97e:	e049      	b.n	2ba14 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   2b980:	231b      	movs	r3, #27
   2b982:	18fb      	adds	r3, r7, r3
   2b984:	781a      	ldrb	r2, [r3, #0]
   2b986:	4b27      	ldr	r3, [pc, #156]	; (2ba24 <_tcc_set_compare_value+0xf0>)
   2b988:	0092      	lsls	r2, r2, #2
   2b98a:	58d3      	ldr	r3, [r2, r3]
   2b98c:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   2b98e:	687a      	ldr	r2, [r7, #4]
   2b990:	697b      	ldr	r3, [r7, #20]
   2b992:	429a      	cmp	r2, r3
   2b994:	d901      	bls.n	2b99a <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   2b996:	2317      	movs	r3, #23
   2b998:	e03c      	b.n	2ba14 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   2b99a:	230a      	movs	r3, #10
   2b99c:	18fb      	adds	r3, r7, r3
   2b99e:	781b      	ldrb	r3, [r3, #0]
   2b9a0:	2b00      	cmp	r3, #0
   2b9a2:	d020      	beq.n	2b9e6 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   2b9a4:	46c0      	nop			; (mov r8, r8)
   2b9a6:	69fb      	ldr	r3, [r7, #28]
   2b9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   2b9aa:	220b      	movs	r2, #11
   2b9ac:	18ba      	adds	r2, r7, r2
   2b9ae:	7812      	ldrb	r2, [r2, #0]
   2b9b0:	2180      	movs	r1, #128	; 0x80
   2b9b2:	0249      	lsls	r1, r1, #9
   2b9b4:	4091      	lsls	r1, r2
   2b9b6:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   2b9b8:	4013      	ands	r3, r2
   2b9ba:	d1f4      	bne.n	2b9a6 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   2b9bc:	46c0      	nop			; (mov r8, r8)
   2b9be:	69fb      	ldr	r3, [r7, #28]
   2b9c0:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   2b9c2:	220b      	movs	r2, #11
   2b9c4:	18ba      	adds	r2, r7, r2
   2b9c6:	7812      	ldrb	r2, [r2, #0]
   2b9c8:	2180      	movs	r1, #128	; 0x80
   2b9ca:	0309      	lsls	r1, r1, #12
   2b9cc:	4091      	lsls	r1, r2
   2b9ce:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   2b9d0:	4013      	ands	r3, r2
   2b9d2:	d1f4      	bne.n	2b9be <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   2b9d4:	230b      	movs	r3, #11
   2b9d6:	18fb      	adds	r3, r7, r3
   2b9d8:	781a      	ldrb	r2, [r3, #0]
   2b9da:	69fb      	ldr	r3, [r7, #28]
   2b9dc:	321c      	adds	r2, #28
   2b9de:	0092      	lsls	r2, r2, #2
   2b9e0:	6879      	ldr	r1, [r7, #4]
   2b9e2:	50d1      	str	r1, [r2, r3]
   2b9e4:	e015      	b.n	2ba12 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   2b9e6:	46c0      	nop			; (mov r8, r8)
   2b9e8:	69fb      	ldr	r3, [r7, #28]
   2b9ea:	689b      	ldr	r3, [r3, #8]
   2b9ec:	220b      	movs	r2, #11
   2b9ee:	18ba      	adds	r2, r7, r2
   2b9f0:	7812      	ldrb	r2, [r2, #0]
   2b9f2:	2180      	movs	r1, #128	; 0x80
   2b9f4:	0049      	lsls	r1, r1, #1
   2b9f6:	4091      	lsls	r1, r2
   2b9f8:	000a      	movs	r2, r1
   2b9fa:	4013      	ands	r3, r2
   2b9fc:	d1f4      	bne.n	2b9e8 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   2b9fe:	230b      	movs	r3, #11
   2ba00:	18fb      	adds	r3, r7, r3
   2ba02:	781b      	ldrb	r3, [r3, #0]
   2ba04:	69fa      	ldr	r2, [r7, #28]
   2ba06:	3310      	adds	r3, #16
   2ba08:	009b      	lsls	r3, r3, #2
   2ba0a:	18d3      	adds	r3, r2, r3
   2ba0c:	3304      	adds	r3, #4
   2ba0e:	687a      	ldr	r2, [r7, #4]
   2ba10:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   2ba12:	2300      	movs	r3, #0
}
   2ba14:	0018      	movs	r0, r3
   2ba16:	46bd      	mov	sp, r7
   2ba18:	b009      	add	sp, #36	; 0x24
   2ba1a:	bd90      	pop	{r4, r7, pc}
   2ba1c:	0002aed1 	.word	0x0002aed1
   2ba20:	0003a634 	.word	0x0003a634
   2ba24:	0003a628 	.word	0x0003a628

0002ba28 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   2ba28:	b590      	push	{r4, r7, lr}
   2ba2a:	b085      	sub	sp, #20
   2ba2c:	af00      	add	r7, sp, #0
   2ba2e:	60f8      	str	r0, [r7, #12]
   2ba30:	607a      	str	r2, [r7, #4]
   2ba32:	230b      	movs	r3, #11
   2ba34:	18fb      	adds	r3, r7, r3
   2ba36:	1c0a      	adds	r2, r1, #0
   2ba38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   2ba3a:	68fb      	ldr	r3, [r7, #12]
   2ba3c:	223c      	movs	r2, #60	; 0x3c
   2ba3e:	5c9c      	ldrb	r4, [r3, r2]
   2ba40:	687a      	ldr	r2, [r7, #4]
   2ba42:	230b      	movs	r3, #11
   2ba44:	18fb      	adds	r3, r7, r3
   2ba46:	7819      	ldrb	r1, [r3, #0]
   2ba48:	68f8      	ldr	r0, [r7, #12]
   2ba4a:	0023      	movs	r3, r4
   2ba4c:	4c03      	ldr	r4, [pc, #12]	; (2ba5c <tcc_set_compare_value+0x34>)
   2ba4e:	47a0      	blx	r4
   2ba50:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   2ba52:	0018      	movs	r0, r3
   2ba54:	46bd      	mov	sp, r7
   2ba56:	b005      	add	sp, #20
   2ba58:	bd90      	pop	{r4, r7, pc}
   2ba5a:	46c0      	nop			; (mov r8, r8)
   2ba5c:	0002b935 	.word	0x0002b935

0002ba60 <system_interrupt_enable>:
{
   2ba60:	b580      	push	{r7, lr}
   2ba62:	b082      	sub	sp, #8
   2ba64:	af00      	add	r7, sp, #0
   2ba66:	0002      	movs	r2, r0
   2ba68:	1dfb      	adds	r3, r7, #7
   2ba6a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2ba6c:	4b06      	ldr	r3, [pc, #24]	; (2ba88 <system_interrupt_enable+0x28>)
   2ba6e:	1dfa      	adds	r2, r7, #7
   2ba70:	7812      	ldrb	r2, [r2, #0]
   2ba72:	0011      	movs	r1, r2
   2ba74:	221f      	movs	r2, #31
   2ba76:	400a      	ands	r2, r1
   2ba78:	2101      	movs	r1, #1
   2ba7a:	4091      	lsls	r1, r2
   2ba7c:	000a      	movs	r2, r1
   2ba7e:	601a      	str	r2, [r3, #0]
}
   2ba80:	46c0      	nop			; (mov r8, r8)
   2ba82:	46bd      	mov	sp, r7
   2ba84:	b002      	add	sp, #8
   2ba86:	bd80      	pop	{r7, pc}
   2ba88:	e000e100 	.word	0xe000e100

0002ba8c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2ba8c:	b580      	push	{r7, lr}
   2ba8e:	b082      	sub	sp, #8
   2ba90:	af00      	add	r7, sp, #0
   2ba92:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2ba94:	4a04      	ldr	r2, [pc, #16]	; (2baa8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2ba96:	687b      	ldr	r3, [r7, #4]
   2ba98:	18d3      	adds	r3, r2, r3
   2ba9a:	781b      	ldrb	r3, [r3, #0]
   2ba9c:	b25b      	sxtb	r3, r3
}
   2ba9e:	0018      	movs	r0, r3
   2baa0:	46bd      	mov	sp, r7
   2baa2:	b002      	add	sp, #8
   2baa4:	bd80      	pop	{r7, pc}
   2baa6:	46c0      	nop			; (mov r8, r8)
   2baa8:	20000128 	.word	0x20000128

0002baac <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2baac:	b580      	push	{r7, lr}
   2baae:	b084      	sub	sp, #16
   2bab0:	af00      	add	r7, sp, #0
   2bab2:	60f8      	str	r0, [r7, #12]
   2bab4:	60b9      	str	r1, [r7, #8]
   2bab6:	1dfb      	adds	r3, r7, #7
   2bab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2baba:	1dfb      	adds	r3, r7, #7
   2babc:	781b      	ldrb	r3, [r3, #0]
   2babe:	68fa      	ldr	r2, [r7, #12]
   2bac0:	009b      	lsls	r3, r3, #2
   2bac2:	18d3      	adds	r3, r2, r3
   2bac4:	3304      	adds	r3, #4
   2bac6:	68ba      	ldr	r2, [r7, #8]
   2bac8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2baca:	68fb      	ldr	r3, [r7, #12]
   2bacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2bace:	1dfb      	adds	r3, r7, #7
   2bad0:	7819      	ldrb	r1, [r3, #0]
   2bad2:	4b05      	ldr	r3, [pc, #20]	; (2bae8 <tcc_register_callback+0x3c>)
   2bad4:	0089      	lsls	r1, r1, #2
   2bad6:	58cb      	ldr	r3, [r1, r3]
   2bad8:	431a      	orrs	r2, r3
   2bada:	68fb      	ldr	r3, [r7, #12]
   2badc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2bade:	2300      	movs	r3, #0
}
   2bae0:	0018      	movs	r0, r3
   2bae2:	46bd      	mov	sp, r7
   2bae4:	b004      	add	sp, #16
   2bae6:	bd80      	pop	{r7, pc}
   2bae8:	0003a63c 	.word	0x0003a63c

0002baec <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2baec:	b580      	push	{r7, lr}
   2baee:	b082      	sub	sp, #8
   2baf0:	af00      	add	r7, sp, #0
   2baf2:	6078      	str	r0, [r7, #4]
   2baf4:	000a      	movs	r2, r1
   2baf6:	1cfb      	adds	r3, r7, #3
   2baf8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2bafa:	687b      	ldr	r3, [r7, #4]
   2bafc:	681b      	ldr	r3, [r3, #0]
   2bafe:	0018      	movs	r0, r3
   2bb00:	4b0f      	ldr	r3, [pc, #60]	; (2bb40 <tcc_enable_callback+0x54>)
   2bb02:	4798      	blx	r3
   2bb04:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2bb06:	0018      	movs	r0, r3
   2bb08:	4b0e      	ldr	r3, [pc, #56]	; (2bb44 <tcc_enable_callback+0x58>)
   2bb0a:	4798      	blx	r3
   2bb0c:	0003      	movs	r3, r0
   2bb0e:	0018      	movs	r0, r3
   2bb10:	4b0d      	ldr	r3, [pc, #52]	; (2bb48 <tcc_enable_callback+0x5c>)
   2bb12:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2bb14:	687b      	ldr	r3, [r7, #4]
   2bb16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2bb18:	1cfb      	adds	r3, r7, #3
   2bb1a:	7819      	ldrb	r1, [r3, #0]
   2bb1c:	4b0b      	ldr	r3, [pc, #44]	; (2bb4c <tcc_enable_callback+0x60>)
   2bb1e:	0089      	lsls	r1, r1, #2
   2bb20:	58cb      	ldr	r3, [r1, r3]
   2bb22:	431a      	orrs	r2, r3
   2bb24:	687b      	ldr	r3, [r7, #4]
   2bb26:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2bb28:	687b      	ldr	r3, [r7, #4]
   2bb2a:	681b      	ldr	r3, [r3, #0]
   2bb2c:	1cfa      	adds	r2, r7, #3
   2bb2e:	7811      	ldrb	r1, [r2, #0]
   2bb30:	4a06      	ldr	r2, [pc, #24]	; (2bb4c <tcc_enable_callback+0x60>)
   2bb32:	0089      	lsls	r1, r1, #2
   2bb34:	588a      	ldr	r2, [r1, r2]
   2bb36:	629a      	str	r2, [r3, #40]	; 0x28
}
   2bb38:	46c0      	nop			; (mov r8, r8)
   2bb3a:	46bd      	mov	sp, r7
   2bb3c:	b002      	add	sp, #8
   2bb3e:	bd80      	pop	{r7, pc}
   2bb40:	0002aed1 	.word	0x0002aed1
   2bb44:	0002ba8d 	.word	0x0002ba8d
   2bb48:	0002ba61 	.word	0x0002ba61
   2bb4c:	0003a63c 	.word	0x0003a63c

0002bb50 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2bb50:	b580      	push	{r7, lr}
   2bb52:	af00      	add	r7, sp, #0
   2bb54:	2000      	movs	r0, #0
   2bb56:	4b02      	ldr	r3, [pc, #8]	; (2bb60 <TCC0_Handler+0x10>)
   2bb58:	4798      	blx	r3
   2bb5a:	46c0      	nop			; (mov r8, r8)
   2bb5c:	46bd      	mov	sp, r7
   2bb5e:	bd80      	pop	{r7, pc}
   2bb60:	0002bb8d 	.word	0x0002bb8d

0002bb64 <TCC1_Handler>:
   2bb64:	b580      	push	{r7, lr}
   2bb66:	af00      	add	r7, sp, #0
   2bb68:	2001      	movs	r0, #1
   2bb6a:	4b02      	ldr	r3, [pc, #8]	; (2bb74 <TCC1_Handler+0x10>)
   2bb6c:	4798      	blx	r3
   2bb6e:	46c0      	nop			; (mov r8, r8)
   2bb70:	46bd      	mov	sp, r7
   2bb72:	bd80      	pop	{r7, pc}
   2bb74:	0002bb8d 	.word	0x0002bb8d

0002bb78 <TCC2_Handler>:
   2bb78:	b580      	push	{r7, lr}
   2bb7a:	af00      	add	r7, sp, #0
   2bb7c:	2002      	movs	r0, #2
   2bb7e:	4b02      	ldr	r3, [pc, #8]	; (2bb88 <TCC2_Handler+0x10>)
   2bb80:	4798      	blx	r3
   2bb82:	46c0      	nop			; (mov r8, r8)
   2bb84:	46bd      	mov	sp, r7
   2bb86:	bd80      	pop	{r7, pc}
   2bb88:	0002bb8d 	.word	0x0002bb8d

0002bb8c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2bb8c:	b580      	push	{r7, lr}
   2bb8e:	b086      	sub	sp, #24
   2bb90:	af00      	add	r7, sp, #0
   2bb92:	0002      	movs	r2, r0
   2bb94:	1dfb      	adds	r3, r7, #7
   2bb96:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bb98:	1dfb      	adds	r3, r7, #7
   2bb9a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2bb9c:	4b18      	ldr	r3, [pc, #96]	; (2bc00 <_tcc_interrupt_handler+0x74>)
   2bb9e:	0092      	lsls	r2, r2, #2
   2bba0:	58d3      	ldr	r3, [r2, r3]
   2bba2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bba4:	693b      	ldr	r3, [r7, #16]
   2bba6:	681b      	ldr	r3, [r3, #0]
   2bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bbaa:	693b      	ldr	r3, [r7, #16]
   2bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bbae:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bbb0:	693b      	ldr	r3, [r7, #16]
   2bbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bbb4:	4013      	ands	r3, r2
   2bbb6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bbb8:	2300      	movs	r3, #0
   2bbba:	617b      	str	r3, [r7, #20]
   2bbbc:	e019      	b.n	2bbf2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bbbe:	4b11      	ldr	r3, [pc, #68]	; (2bc04 <_tcc_interrupt_handler+0x78>)
   2bbc0:	697a      	ldr	r2, [r7, #20]
   2bbc2:	0092      	lsls	r2, r2, #2
   2bbc4:	58d3      	ldr	r3, [r2, r3]
   2bbc6:	68fa      	ldr	r2, [r7, #12]
   2bbc8:	4013      	ands	r3, r2
   2bbca:	d00f      	beq.n	2bbec <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bbcc:	693a      	ldr	r2, [r7, #16]
   2bbce:	697b      	ldr	r3, [r7, #20]
   2bbd0:	009b      	lsls	r3, r3, #2
   2bbd2:	18d3      	adds	r3, r2, r3
   2bbd4:	3304      	adds	r3, #4
   2bbd6:	681b      	ldr	r3, [r3, #0]
   2bbd8:	693a      	ldr	r2, [r7, #16]
   2bbda:	0010      	movs	r0, r2
   2bbdc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bbde:	693b      	ldr	r3, [r7, #16]
   2bbe0:	681b      	ldr	r3, [r3, #0]
   2bbe2:	4a08      	ldr	r2, [pc, #32]	; (2bc04 <_tcc_interrupt_handler+0x78>)
   2bbe4:	6979      	ldr	r1, [r7, #20]
   2bbe6:	0089      	lsls	r1, r1, #2
   2bbe8:	588a      	ldr	r2, [r1, r2]
   2bbea:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bbec:	697b      	ldr	r3, [r7, #20]
   2bbee:	3301      	adds	r3, #1
   2bbf0:	617b      	str	r3, [r7, #20]
   2bbf2:	697b      	ldr	r3, [r7, #20]
   2bbf4:	2b0b      	cmp	r3, #11
   2bbf6:	dde2      	ble.n	2bbbe <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bbf8:	46c0      	nop			; (mov r8, r8)
   2bbfa:	46bd      	mov	sp, r7
   2bbfc:	b006      	add	sp, #24
   2bbfe:	bd80      	pop	{r7, pc}
   2bc00:	20005cb8 	.word	0x20005cb8
   2bc04:	0003a63c 	.word	0x0003a63c

0002bc08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bc08:	b580      	push	{r7, lr}
   2bc0a:	b082      	sub	sp, #8
   2bc0c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bc0e:	4b2f      	ldr	r3, [pc, #188]	; (2bccc <Reset_Handler+0xc4>)
   2bc10:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bc12:	4b2f      	ldr	r3, [pc, #188]	; (2bcd0 <Reset_Handler+0xc8>)
   2bc14:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bc16:	687a      	ldr	r2, [r7, #4]
   2bc18:	683b      	ldr	r3, [r7, #0]
   2bc1a:	429a      	cmp	r2, r3
   2bc1c:	d00c      	beq.n	2bc38 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bc1e:	e007      	b.n	2bc30 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bc20:	683b      	ldr	r3, [r7, #0]
   2bc22:	1d1a      	adds	r2, r3, #4
   2bc24:	603a      	str	r2, [r7, #0]
   2bc26:	687a      	ldr	r2, [r7, #4]
   2bc28:	1d11      	adds	r1, r2, #4
   2bc2a:	6079      	str	r1, [r7, #4]
   2bc2c:	6812      	ldr	r2, [r2, #0]
   2bc2e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bc30:	683a      	ldr	r2, [r7, #0]
   2bc32:	4b28      	ldr	r3, [pc, #160]	; (2bcd4 <Reset_Handler+0xcc>)
   2bc34:	429a      	cmp	r2, r3
   2bc36:	d3f3      	bcc.n	2bc20 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bc38:	4b27      	ldr	r3, [pc, #156]	; (2bcd8 <Reset_Handler+0xd0>)
   2bc3a:	603b      	str	r3, [r7, #0]
   2bc3c:	e004      	b.n	2bc48 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bc3e:	683b      	ldr	r3, [r7, #0]
   2bc40:	1d1a      	adds	r2, r3, #4
   2bc42:	603a      	str	r2, [r7, #0]
   2bc44:	2200      	movs	r2, #0
   2bc46:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bc48:	683a      	ldr	r2, [r7, #0]
   2bc4a:	4b24      	ldr	r3, [pc, #144]	; (2bcdc <Reset_Handler+0xd4>)
   2bc4c:	429a      	cmp	r2, r3
   2bc4e:	d3f6      	bcc.n	2bc3e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bc50:	4b23      	ldr	r3, [pc, #140]	; (2bce0 <Reset_Handler+0xd8>)
   2bc52:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bc54:	4b23      	ldr	r3, [pc, #140]	; (2bce4 <Reset_Handler+0xdc>)
   2bc56:	687a      	ldr	r2, [r7, #4]
   2bc58:	21ff      	movs	r1, #255	; 0xff
   2bc5a:	438a      	bics	r2, r1
   2bc5c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bc5e:	4a22      	ldr	r2, [pc, #136]	; (2bce8 <Reset_Handler+0xe0>)
   2bc60:	2390      	movs	r3, #144	; 0x90
   2bc62:	005b      	lsls	r3, r3, #1
   2bc64:	2102      	movs	r1, #2
   2bc66:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bc68:	4a20      	ldr	r2, [pc, #128]	; (2bcec <Reset_Handler+0xe4>)
   2bc6a:	78d3      	ldrb	r3, [r2, #3]
   2bc6c:	2103      	movs	r1, #3
   2bc6e:	438b      	bics	r3, r1
   2bc70:	1c19      	adds	r1, r3, #0
   2bc72:	2302      	movs	r3, #2
   2bc74:	430b      	orrs	r3, r1
   2bc76:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bc78:	4a1c      	ldr	r2, [pc, #112]	; (2bcec <Reset_Handler+0xe4>)
   2bc7a:	78d3      	ldrb	r3, [r2, #3]
   2bc7c:	210c      	movs	r1, #12
   2bc7e:	438b      	bics	r3, r1
   2bc80:	1c19      	adds	r1, r3, #0
   2bc82:	2308      	movs	r3, #8
   2bc84:	430b      	orrs	r3, r1
   2bc86:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bc88:	4a19      	ldr	r2, [pc, #100]	; (2bcf0 <Reset_Handler+0xe8>)
   2bc8a:	7b93      	ldrb	r3, [r2, #14]
   2bc8c:	2130      	movs	r1, #48	; 0x30
   2bc8e:	438b      	bics	r3, r1
   2bc90:	1c19      	adds	r1, r3, #0
   2bc92:	2320      	movs	r3, #32
   2bc94:	430b      	orrs	r3, r1
   2bc96:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bc98:	4a15      	ldr	r2, [pc, #84]	; (2bcf0 <Reset_Handler+0xe8>)
   2bc9a:	7b93      	ldrb	r3, [r2, #14]
   2bc9c:	210c      	movs	r1, #12
   2bc9e:	438b      	bics	r3, r1
   2bca0:	1c19      	adds	r1, r3, #0
   2bca2:	2308      	movs	r3, #8
   2bca4:	430b      	orrs	r3, r1
   2bca6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bca8:	4a11      	ldr	r2, [pc, #68]	; (2bcf0 <Reset_Handler+0xe8>)
   2bcaa:	7b93      	ldrb	r3, [r2, #14]
   2bcac:	2103      	movs	r1, #3
   2bcae:	438b      	bics	r3, r1
   2bcb0:	1c19      	adds	r1, r3, #0
   2bcb2:	2302      	movs	r3, #2
   2bcb4:	430b      	orrs	r3, r1
   2bcb6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bcb8:	4a0e      	ldr	r2, [pc, #56]	; (2bcf4 <Reset_Handler+0xec>)
   2bcba:	6853      	ldr	r3, [r2, #4]
   2bcbc:	2180      	movs	r1, #128	; 0x80
   2bcbe:	430b      	orrs	r3, r1
   2bcc0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2bcc2:	4b0d      	ldr	r3, [pc, #52]	; (2bcf8 <Reset_Handler+0xf0>)
   2bcc4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bcc6:	4b0d      	ldr	r3, [pc, #52]	; (2bcfc <Reset_Handler+0xf4>)
   2bcc8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bcca:	e7fe      	b.n	2bcca <Reset_Handler+0xc2>
   2bccc:	0003b3f4 	.word	0x0003b3f4
   2bcd0:	20000000 	.word	0x20000000
   2bcd4:	20000300 	.word	0x20000300
   2bcd8:	20000300 	.word	0x20000300
   2bcdc:	20005d28 	.word	0x20005d28
   2bce0:	00012000 	.word	0x00012000
   2bce4:	e000ed00 	.word	0xe000ed00
   2bce8:	41007000 	.word	0x41007000
   2bcec:	41005000 	.word	0x41005000
   2bcf0:	41004800 	.word	0x41004800
   2bcf4:	41004000 	.word	0x41004000
   2bcf8:	00035649 	.word	0x00035649
   2bcfc:	0003343d 	.word	0x0003343d

0002bd00 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bd00:	b580      	push	{r7, lr}
   2bd02:	af00      	add	r7, sp, #0
  __asm volatile (
   2bd04:	2004      	movs	r0, #4
   2bd06:	4671      	mov	r1, lr
   2bd08:	4208      	tst	r0, r1
   2bd0a:	d002      	beq.n	2bd12 <_MSP>
   2bd0c:	f3ef 8009 	mrs	r0, PSP
   2bd10:	e001      	b.n	2bd16 <_HALT>

0002bd12 <_MSP>:
   2bd12:	f3ef 8008 	mrs	r0, MSP

0002bd16 <_HALT>:
   2bd16:	6941      	ldr	r1, [r0, #20]
   2bd18:	e004      	b.n	2bd24 <HardFault_HandlerC>
   2bd1a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bd1c:	46c0      	nop			; (mov r8, r8)
   2bd1e:	46bd      	mov	sp, r7
   2bd20:	bd80      	pop	{r7, pc}
	...

0002bd24 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bd24:	b580      	push	{r7, lr}
   2bd26:	b090      	sub	sp, #64	; 0x40
   2bd28:	af00      	add	r7, sp, #0
   2bd2a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bd2c:	687b      	ldr	r3, [r7, #4]
   2bd2e:	681b      	ldr	r3, [r3, #0]
   2bd30:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bd32:	687b      	ldr	r3, [r7, #4]
   2bd34:	685b      	ldr	r3, [r3, #4]
   2bd36:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bd38:	687b      	ldr	r3, [r7, #4]
   2bd3a:	689b      	ldr	r3, [r3, #8]
   2bd3c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bd3e:	687b      	ldr	r3, [r7, #4]
   2bd40:	68db      	ldr	r3, [r3, #12]
   2bd42:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bd44:	687b      	ldr	r3, [r7, #4]
   2bd46:	691b      	ldr	r3, [r3, #16]
   2bd48:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bd4a:	687b      	ldr	r3, [r7, #4]
   2bd4c:	695b      	ldr	r3, [r3, #20]
   2bd4e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bd50:	687b      	ldr	r3, [r7, #4]
   2bd52:	699b      	ldr	r3, [r3, #24]
   2bd54:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bd56:	687b      	ldr	r3, [r7, #4]
   2bd58:	69db      	ldr	r3, [r3, #28]
   2bd5a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bd5c:	4b0b      	ldr	r3, [pc, #44]	; (2bd8c <HardFault_HandlerC+0x68>)
   2bd5e:	681b      	ldr	r3, [r3, #0]
   2bd60:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bd62:	4b0b      	ldr	r3, [pc, #44]	; (2bd90 <HardFault_HandlerC+0x6c>)
   2bd64:	681b      	ldr	r3, [r3, #0]
   2bd66:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bd68:	4b0a      	ldr	r3, [pc, #40]	; (2bd94 <HardFault_HandlerC+0x70>)
   2bd6a:	681b      	ldr	r3, [r3, #0]
   2bd6c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2bd6e:	4b0a      	ldr	r3, [pc, #40]	; (2bd98 <HardFault_HandlerC+0x74>)
   2bd70:	681b      	ldr	r3, [r3, #0]
   2bd72:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2bd74:	4b09      	ldr	r3, [pc, #36]	; (2bd9c <HardFault_HandlerC+0x78>)
   2bd76:	681b      	ldr	r3, [r3, #0]
   2bd78:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2bd7a:	4b09      	ldr	r3, [pc, #36]	; (2bda0 <HardFault_HandlerC+0x7c>)
   2bd7c:	681b      	ldr	r3, [r3, #0]
   2bd7e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bd80:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bd82:	46c0      	nop			; (mov r8, r8)
   2bd84:	46bd      	mov	sp, r7
   2bd86:	b010      	add	sp, #64	; 0x40
   2bd88:	bd80      	pop	{r7, pc}
   2bd8a:	46c0      	nop			; (mov r8, r8)
   2bd8c:	e000ed28 	.word	0xe000ed28
   2bd90:	e000ed2c 	.word	0xe000ed2c
   2bd94:	e000ed30 	.word	0xe000ed30
   2bd98:	e000ed3c 	.word	0xe000ed3c
   2bd9c:	e000ed34 	.word	0xe000ed34
   2bda0:	e000ed38 	.word	0xe000ed38

0002bda4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bda4:	b580      	push	{r7, lr}
   2bda6:	b086      	sub	sp, #24
   2bda8:	af00      	add	r7, sp, #0
   2bdaa:	60f8      	str	r0, [r7, #12]
   2bdac:	60b9      	str	r1, [r7, #8]
   2bdae:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bdb0:	2300      	movs	r3, #0
   2bdb2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bdb4:	68fb      	ldr	r3, [r7, #12]
   2bdb6:	2b00      	cmp	r3, #0
   2bdb8:	d012      	beq.n	2bde0 <_read+0x3c>
		return -1;
   2bdba:	2301      	movs	r3, #1
   2bdbc:	425b      	negs	r3, r3
   2bdbe:	e013      	b.n	2bde8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bdc0:	4b0b      	ldr	r3, [pc, #44]	; (2bdf0 <_read+0x4c>)
   2bdc2:	681a      	ldr	r2, [r3, #0]
   2bdc4:	4b0b      	ldr	r3, [pc, #44]	; (2bdf4 <_read+0x50>)
   2bdc6:	681b      	ldr	r3, [r3, #0]
   2bdc8:	68b9      	ldr	r1, [r7, #8]
   2bdca:	0018      	movs	r0, r3
   2bdcc:	4790      	blx	r2
		ptr++;
   2bdce:	68bb      	ldr	r3, [r7, #8]
   2bdd0:	3301      	adds	r3, #1
   2bdd2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bdd4:	697b      	ldr	r3, [r7, #20]
   2bdd6:	3301      	adds	r3, #1
   2bdd8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bdda:	687b      	ldr	r3, [r7, #4]
   2bddc:	3b01      	subs	r3, #1
   2bdde:	607b      	str	r3, [r7, #4]
   2bde0:	687b      	ldr	r3, [r7, #4]
   2bde2:	2b00      	cmp	r3, #0
   2bde4:	dcec      	bgt.n	2bdc0 <_read+0x1c>
	}
	return nChars;
   2bde6:	697b      	ldr	r3, [r7, #20]
}
   2bde8:	0018      	movs	r0, r3
   2bdea:	46bd      	mov	sp, r7
   2bdec:	b006      	add	sp, #24
   2bdee:	bd80      	pop	{r7, pc}
   2bdf0:	20005cc4 	.word	0x20005cc4
   2bdf4:	20005ccc 	.word	0x20005ccc

0002bdf8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bdf8:	b580      	push	{r7, lr}
   2bdfa:	b086      	sub	sp, #24
   2bdfc:	af00      	add	r7, sp, #0
   2bdfe:	60f8      	str	r0, [r7, #12]
   2be00:	60b9      	str	r1, [r7, #8]
   2be02:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2be04:	2300      	movs	r3, #0
   2be06:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2be08:	68fb      	ldr	r3, [r7, #12]
   2be0a:	2b01      	cmp	r3, #1
   2be0c:	d01d      	beq.n	2be4a <_write+0x52>
   2be0e:	68fb      	ldr	r3, [r7, #12]
   2be10:	2b02      	cmp	r3, #2
   2be12:	d01a      	beq.n	2be4a <_write+0x52>
   2be14:	68fb      	ldr	r3, [r7, #12]
   2be16:	2b03      	cmp	r3, #3
   2be18:	d017      	beq.n	2be4a <_write+0x52>
		return -1;
   2be1a:	2301      	movs	r3, #1
   2be1c:	425b      	negs	r3, r3
   2be1e:	e018      	b.n	2be52 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2be20:	4b0e      	ldr	r3, [pc, #56]	; (2be5c <_write+0x64>)
   2be22:	681a      	ldr	r2, [r3, #0]
   2be24:	4b0e      	ldr	r3, [pc, #56]	; (2be60 <_write+0x68>)
   2be26:	6818      	ldr	r0, [r3, #0]
   2be28:	68bb      	ldr	r3, [r7, #8]
   2be2a:	1c59      	adds	r1, r3, #1
   2be2c:	60b9      	str	r1, [r7, #8]
   2be2e:	781b      	ldrb	r3, [r3, #0]
   2be30:	0019      	movs	r1, r3
   2be32:	4790      	blx	r2
   2be34:	1e03      	subs	r3, r0, #0
   2be36:	da02      	bge.n	2be3e <_write+0x46>
			return -1;
   2be38:	2301      	movs	r3, #1
   2be3a:	425b      	negs	r3, r3
   2be3c:	e009      	b.n	2be52 <_write+0x5a>
		}
		++nChars;
   2be3e:	697b      	ldr	r3, [r7, #20]
   2be40:	3301      	adds	r3, #1
   2be42:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2be44:	687b      	ldr	r3, [r7, #4]
   2be46:	3b01      	subs	r3, #1
   2be48:	607b      	str	r3, [r7, #4]
   2be4a:	687b      	ldr	r3, [r7, #4]
   2be4c:	2b00      	cmp	r3, #0
   2be4e:	d1e7      	bne.n	2be20 <_write+0x28>
	}
	return nChars;
   2be50:	697b      	ldr	r3, [r7, #20]
}
   2be52:	0018      	movs	r0, r3
   2be54:	46bd      	mov	sp, r7
   2be56:	b006      	add	sp, #24
   2be58:	bd80      	pop	{r7, pc}
   2be5a:	46c0      	nop			; (mov r8, r8)
   2be5c:	20005cc8 	.word	0x20005cc8
   2be60:	20005ccc 	.word	0x20005ccc

0002be64 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2be64:	b580      	push	{r7, lr}
   2be66:	b084      	sub	sp, #16
   2be68:	af00      	add	r7, sp, #0
   2be6a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2be6c:	4b0a      	ldr	r3, [pc, #40]	; (2be98 <_sbrk+0x34>)
   2be6e:	681b      	ldr	r3, [r3, #0]
   2be70:	2b00      	cmp	r3, #0
   2be72:	d102      	bne.n	2be7a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2be74:	4b08      	ldr	r3, [pc, #32]	; (2be98 <_sbrk+0x34>)
   2be76:	4a09      	ldr	r2, [pc, #36]	; (2be9c <_sbrk+0x38>)
   2be78:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2be7a:	4b07      	ldr	r3, [pc, #28]	; (2be98 <_sbrk+0x34>)
   2be7c:	681b      	ldr	r3, [r3, #0]
   2be7e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2be80:	4b05      	ldr	r3, [pc, #20]	; (2be98 <_sbrk+0x34>)
   2be82:	681a      	ldr	r2, [r3, #0]
   2be84:	687b      	ldr	r3, [r7, #4]
   2be86:	18d2      	adds	r2, r2, r3
   2be88:	4b03      	ldr	r3, [pc, #12]	; (2be98 <_sbrk+0x34>)
   2be8a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2be8c:	68fb      	ldr	r3, [r7, #12]
}
   2be8e:	0018      	movs	r0, r3
   2be90:	46bd      	mov	sp, r7
   2be92:	b004      	add	sp, #16
   2be94:	bd80      	pop	{r7, pc}
   2be96:	46c0      	nop			; (mov r8, r8)
   2be98:	200042f8 	.word	0x200042f8
   2be9c:	20007d28 	.word	0x20007d28

0002bea0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bea0:	b580      	push	{r7, lr}
   2bea2:	b082      	sub	sp, #8
   2bea4:	af00      	add	r7, sp, #0
   2bea6:	6078      	str	r0, [r7, #4]
	return -1;
   2bea8:	2301      	movs	r3, #1
   2beaa:	425b      	negs	r3, r3
}
   2beac:	0018      	movs	r0, r3
   2beae:	46bd      	mov	sp, r7
   2beb0:	b002      	add	sp, #8
   2beb2:	bd80      	pop	{r7, pc}

0002beb4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2beb4:	b580      	push	{r7, lr}
   2beb6:	b082      	sub	sp, #8
   2beb8:	af00      	add	r7, sp, #0
   2beba:	6078      	str	r0, [r7, #4]
   2bebc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bebe:	683b      	ldr	r3, [r7, #0]
   2bec0:	2280      	movs	r2, #128	; 0x80
   2bec2:	0192      	lsls	r2, r2, #6
   2bec4:	605a      	str	r2, [r3, #4]

	return 0;
   2bec6:	2300      	movs	r3, #0
}
   2bec8:	0018      	movs	r0, r3
   2beca:	46bd      	mov	sp, r7
   2becc:	b002      	add	sp, #8
   2bece:	bd80      	pop	{r7, pc}

0002bed0 <_isatty>:

extern int _isatty(int file)
{
   2bed0:	b580      	push	{r7, lr}
   2bed2:	b082      	sub	sp, #8
   2bed4:	af00      	add	r7, sp, #0
   2bed6:	6078      	str	r0, [r7, #4]
	return 1;
   2bed8:	2301      	movs	r3, #1
}
   2beda:	0018      	movs	r0, r3
   2bedc:	46bd      	mov	sp, r7
   2bede:	b002      	add	sp, #8
   2bee0:	bd80      	pop	{r7, pc}

0002bee2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2bee2:	b580      	push	{r7, lr}
   2bee4:	b084      	sub	sp, #16
   2bee6:	af00      	add	r7, sp, #0
   2bee8:	60f8      	str	r0, [r7, #12]
   2beea:	60b9      	str	r1, [r7, #8]
   2beec:	607a      	str	r2, [r7, #4]
	return 0;
   2beee:	2300      	movs	r3, #0
}
   2bef0:	0018      	movs	r0, r3
   2bef2:	46bd      	mov	sp, r7
   2bef4:	b004      	add	sp, #16
   2bef6:	bd80      	pop	{r7, pc}

0002bef8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2bef8:	b580      	push	{r7, lr}
   2befa:	b082      	sub	sp, #8
   2befc:	af00      	add	r7, sp, #0
   2befe:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2bf00:	687b      	ldr	r3, [r7, #4]
   2bf02:	2200      	movs	r2, #0
   2bf04:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2bf06:	687b      	ldr	r3, [r7, #4]
   2bf08:	2200      	movs	r2, #0
   2bf0a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2bf0c:	687b      	ldr	r3, [r7, #4]
   2bf0e:	2200      	movs	r2, #0
   2bf10:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2bf12:	687b      	ldr	r3, [r7, #4]
   2bf14:	2200      	movs	r2, #0
   2bf16:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2bf18:	687b      	ldr	r3, [r7, #4]
   2bf1a:	2201      	movs	r2, #1
   2bf1c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2bf1e:	687b      	ldr	r3, [r7, #4]
   2bf20:	2201      	movs	r2, #1
   2bf22:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2bf24:	687b      	ldr	r3, [r7, #4]
   2bf26:	22fa      	movs	r2, #250	; 0xfa
   2bf28:	00d2      	lsls	r2, r2, #3
   2bf2a:	80da      	strh	r2, [r3, #6]
}
   2bf2c:	46c0      	nop			; (mov r8, r8)
   2bf2e:	46bd      	mov	sp, r7
   2bf30:	b002      	add	sp, #8
   2bf32:	bd80      	pop	{r7, pc}

0002bf34 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2bf34:	b580      	push	{r7, lr}
   2bf36:	b086      	sub	sp, #24
   2bf38:	af00      	add	r7, sp, #0
   2bf3a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2bf3c:	230c      	movs	r3, #12
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	0018      	movs	r0, r3
   2bf42:	4b23      	ldr	r3, [pc, #140]	; (2bfd0 <rtc_calendar_get_config_defaults+0x9c>)
   2bf44:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	22a0      	movs	r2, #160	; 0xa0
   2bf4a:	0112      	lsls	r2, r2, #4
   2bf4c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2bf4e:	687b      	ldr	r3, [r7, #4]
   2bf50:	2200      	movs	r2, #0
   2bf52:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2bf54:	687b      	ldr	r3, [r7, #4]
   2bf56:	2200      	movs	r2, #0
   2bf58:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2bf5a:	687b      	ldr	r3, [r7, #4]
   2bf5c:	2200      	movs	r2, #0
   2bf5e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2bf60:	687b      	ldr	r3, [r7, #4]
   2bf62:	22fa      	movs	r2, #250	; 0xfa
   2bf64:	00d2      	lsls	r2, r2, #3
   2bf66:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bf68:	2317      	movs	r3, #23
   2bf6a:	18fb      	adds	r3, r7, r3
   2bf6c:	2200      	movs	r2, #0
   2bf6e:	701a      	strb	r2, [r3, #0]
   2bf70:	e025      	b.n	2bfbe <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2bf72:	2317      	movs	r3, #23
   2bf74:	18fb      	adds	r3, r7, r3
   2bf76:	781a      	ldrb	r2, [r3, #0]
   2bf78:	6879      	ldr	r1, [r7, #4]
   2bf7a:	2008      	movs	r0, #8
   2bf7c:	0013      	movs	r3, r2
   2bf7e:	009b      	lsls	r3, r3, #2
   2bf80:	189b      	adds	r3, r3, r2
   2bf82:	005b      	lsls	r3, r3, #1
   2bf84:	18cb      	adds	r3, r1, r3
   2bf86:	181a      	adds	r2, r3, r0
   2bf88:	230c      	movs	r3, #12
   2bf8a:	18fb      	adds	r3, r7, r3
   2bf8c:	0010      	movs	r0, r2
   2bf8e:	0019      	movs	r1, r3
   2bf90:	2308      	movs	r3, #8
   2bf92:	001a      	movs	r2, r3
   2bf94:	4b0f      	ldr	r3, [pc, #60]	; (2bfd4 <rtc_calendar_get_config_defaults+0xa0>)
   2bf96:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bf98:	2317      	movs	r3, #23
   2bf9a:	18fb      	adds	r3, r7, r3
   2bf9c:	781a      	ldrb	r2, [r3, #0]
   2bf9e:	6879      	ldr	r1, [r7, #4]
   2bfa0:	0013      	movs	r3, r2
   2bfa2:	009b      	lsls	r3, r3, #2
   2bfa4:	189b      	adds	r3, r3, r2
   2bfa6:	005b      	lsls	r3, r3, #1
   2bfa8:	18cb      	adds	r3, r1, r3
   2bfaa:	3310      	adds	r3, #16
   2bfac:	2206      	movs	r2, #6
   2bfae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2bfb0:	2317      	movs	r3, #23
   2bfb2:	18fb      	adds	r3, r7, r3
   2bfb4:	781a      	ldrb	r2, [r3, #0]
   2bfb6:	2317      	movs	r3, #23
   2bfb8:	18fb      	adds	r3, r7, r3
   2bfba:	3201      	adds	r2, #1
   2bfbc:	701a      	strb	r2, [r3, #0]
   2bfbe:	2317      	movs	r3, #23
   2bfc0:	18fb      	adds	r3, r7, r3
   2bfc2:	781b      	ldrb	r3, [r3, #0]
   2bfc4:	2b00      	cmp	r3, #0
   2bfc6:	d0d4      	beq.n	2bf72 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2bfc8:	46c0      	nop			; (mov r8, r8)
   2bfca:	46bd      	mov	sp, r7
   2bfcc:	b006      	add	sp, #24
   2bfce:	bd80      	pop	{r7, pc}
   2bfd0:	0002bef9 	.word	0x0002bef9
   2bfd4:	000356b9 	.word	0x000356b9

0002bfd8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2bfd8:	b580      	push	{r7, lr}
   2bfda:	b088      	sub	sp, #32
   2bfdc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2bfde:	230c      	movs	r3, #12
   2bfe0:	18fb      	adds	r3, r7, r3
   2bfe2:	0018      	movs	r0, r3
   2bfe4:	4b1a      	ldr	r3, [pc, #104]	; (2c050 <configure_rtc_calendar+0x78>)
   2bfe6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2bfe8:	1d3b      	adds	r3, r7, #4
   2bfea:	0018      	movs	r0, r3
   2bfec:	4b19      	ldr	r3, [pc, #100]	; (2c054 <configure_rtc_calendar+0x7c>)
   2bfee:	4798      	blx	r3
	init_time.year   = 2014;
   2bff0:	1d3b      	adds	r3, r7, #4
   2bff2:	4a19      	ldr	r2, [pc, #100]	; (2c058 <configure_rtc_calendar+0x80>)
   2bff4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2bff6:	1d3b      	adds	r3, r7, #4
   2bff8:	2201      	movs	r2, #1
   2bffa:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2bffc:	1d3b      	adds	r3, r7, #4
   2bffe:	2201      	movs	r2, #1
   2c000:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2c002:	1d3b      	adds	r3, r7, #4
   2c004:	2200      	movs	r2, #0
   2c006:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2c008:	1d3b      	adds	r3, r7, #4
   2c00a:	2200      	movs	r2, #0
   2c00c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2c00e:	1d3b      	adds	r3, r7, #4
   2c010:	2204      	movs	r2, #4
   2c012:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2c014:	230c      	movs	r3, #12
   2c016:	18fb      	adds	r3, r7, r3
   2c018:	2201      	movs	r2, #1
   2c01a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2c01c:	230c      	movs	r3, #12
   2c01e:	18fb      	adds	r3, r7, r3
   2c020:	1d3a      	adds	r2, r7, #4
   2c022:	3308      	adds	r3, #8
   2c024:	ca03      	ldmia	r2!, {r0, r1}
   2c026:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c028:	230c      	movs	r3, #12
   2c02a:	18fb      	adds	r3, r7, r3
   2c02c:	2206      	movs	r2, #6
   2c02e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2c030:	230c      	movs	r3, #12
   2c032:	18fa      	adds	r2, r7, r3
   2c034:	4909      	ldr	r1, [pc, #36]	; (2c05c <configure_rtc_calendar+0x84>)
   2c036:	4b0a      	ldr	r3, [pc, #40]	; (2c060 <configure_rtc_calendar+0x88>)
   2c038:	0018      	movs	r0, r3
   2c03a:	4b0a      	ldr	r3, [pc, #40]	; (2c064 <configure_rtc_calendar+0x8c>)
   2c03c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2c03e:	4b08      	ldr	r3, [pc, #32]	; (2c060 <configure_rtc_calendar+0x88>)
   2c040:	0018      	movs	r0, r3
   2c042:	4b09      	ldr	r3, [pc, #36]	; (2c068 <configure_rtc_calendar+0x90>)
   2c044:	4798      	blx	r3
}
   2c046:	46c0      	nop			; (mov r8, r8)
   2c048:	46bd      	mov	sp, r7
   2c04a:	b008      	add	sp, #32
   2c04c:	bd80      	pop	{r7, pc}
   2c04e:	46c0      	nop			; (mov r8, r8)
   2c050:	0002bf35 	.word	0x0002bf35
   2c054:	0002bef9 	.word	0x0002bef9
   2c058:	000007de 	.word	0x000007de
   2c05c:	40001400 	.word	0x40001400
   2c060:	20005cd0 	.word	0x20005cd0
   2c064:	000279e9 	.word	0x000279e9
   2c068:	00027715 	.word	0x00027715

0002c06c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2c06c:	b590      	push	{r4, r7, lr}
   2c06e:	b085      	sub	sp, #20
   2c070:	af00      	add	r7, sp, #0
   2c072:	0002      	movs	r2, r0
   2c074:	1dfb      	adds	r3, r7, #7
   2c076:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2c078:	4b1a      	ldr	r3, [pc, #104]	; (2c0e4 <disk_initialize+0x78>)
   2c07a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2c07c:	1dfb      	adds	r3, r7, #7
   2c07e:	781b      	ldrb	r3, [r3, #0]
   2c080:	2b01      	cmp	r3, #1
   2c082:	d901      	bls.n	2c088 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2c084:	2301      	movs	r3, #1
   2c086:	e029      	b.n	2c0dc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2c088:	2300      	movs	r3, #0
   2c08a:	60fb      	str	r3, [r7, #12]
   2c08c:	e010      	b.n	2c0b0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2c08e:	230b      	movs	r3, #11
   2c090:	18fc      	adds	r4, r7, r3
   2c092:	1dfb      	adds	r3, r7, #7
   2c094:	781b      	ldrb	r3, [r3, #0]
   2c096:	0018      	movs	r0, r3
   2c098:	4b13      	ldr	r3, [pc, #76]	; (2c0e8 <disk_initialize+0x7c>)
   2c09a:	4798      	blx	r3
   2c09c:	0003      	movs	r3, r0
   2c09e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2c0a0:	230b      	movs	r3, #11
   2c0a2:	18fb      	adds	r3, r7, r3
   2c0a4:	781b      	ldrb	r3, [r3, #0]
   2c0a6:	2b03      	cmp	r3, #3
   2c0a8:	d106      	bne.n	2c0b8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2c0aa:	68fb      	ldr	r3, [r7, #12]
   2c0ac:	3301      	adds	r3, #1
   2c0ae:	60fb      	str	r3, [r7, #12]
   2c0b0:	68fb      	ldr	r3, [r7, #12]
   2c0b2:	2b01      	cmp	r3, #1
   2c0b4:	ddeb      	ble.n	2c08e <disk_initialize+0x22>
   2c0b6:	e000      	b.n	2c0ba <disk_initialize+0x4e>
			break;
   2c0b8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2c0ba:	230b      	movs	r3, #11
   2c0bc:	18fb      	adds	r3, r7, r3
   2c0be:	781b      	ldrb	r3, [r3, #0]
   2c0c0:	2b00      	cmp	r3, #0
   2c0c2:	d001      	beq.n	2c0c8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2c0c4:	2301      	movs	r3, #1
   2c0c6:	e009      	b.n	2c0dc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2c0c8:	1dfb      	adds	r3, r7, #7
   2c0ca:	781b      	ldrb	r3, [r3, #0]
   2c0cc:	0018      	movs	r0, r3
   2c0ce:	4b07      	ldr	r3, [pc, #28]	; (2c0ec <disk_initialize+0x80>)
   2c0d0:	4798      	blx	r3
   2c0d2:	1e03      	subs	r3, r0, #0
   2c0d4:	d001      	beq.n	2c0da <disk_initialize+0x6e>
		return STA_PROTECT;
   2c0d6:	2304      	movs	r3, #4
   2c0d8:	e000      	b.n	2c0dc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2c0da:	2300      	movs	r3, #0
}
   2c0dc:	0018      	movs	r0, r3
   2c0de:	46bd      	mov	sp, r7
   2c0e0:	b005      	add	sp, #20
   2c0e2:	bd90      	pop	{r4, r7, pc}
   2c0e4:	0002bfd9 	.word	0x0002bfd9
   2c0e8:	00026c11 	.word	0x00026c11
   2c0ec:	00026cc9 	.word	0x00026cc9

0002c0f0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c0f0:	b580      	push	{r7, lr}
   2c0f2:	b082      	sub	sp, #8
   2c0f4:	af00      	add	r7, sp, #0
   2c0f6:	0002      	movs	r2, r0
   2c0f8:	1dfb      	adds	r3, r7, #7
   2c0fa:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c0fc:	1dfb      	adds	r3, r7, #7
   2c0fe:	781b      	ldrb	r3, [r3, #0]
   2c100:	0018      	movs	r0, r3
   2c102:	4b08      	ldr	r3, [pc, #32]	; (2c124 <disk_status+0x34>)
   2c104:	4798      	blx	r3
   2c106:	1e03      	subs	r3, r0, #0
   2c108:	d002      	beq.n	2c110 <disk_status+0x20>
   2c10a:	2b02      	cmp	r3, #2
   2c10c:	d002      	beq.n	2c114 <disk_status+0x24>
   2c10e:	e003      	b.n	2c118 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c110:	2300      	movs	r3, #0
   2c112:	e002      	b.n	2c11a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c114:	2303      	movs	r3, #3
   2c116:	e000      	b.n	2c11a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c118:	2301      	movs	r3, #1
	}
}
   2c11a:	0018      	movs	r0, r3
   2c11c:	46bd      	mov	sp, r7
   2c11e:	b002      	add	sp, #8
   2c120:	bd80      	pop	{r7, pc}
   2c122:	46c0      	nop			; (mov r8, r8)
   2c124:	00026c11 	.word	0x00026c11

0002c128 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c128:	b590      	push	{r4, r7, lr}
   2c12a:	b089      	sub	sp, #36	; 0x24
   2c12c:	af00      	add	r7, sp, #0
   2c12e:	60b9      	str	r1, [r7, #8]
   2c130:	607a      	str	r2, [r7, #4]
   2c132:	0019      	movs	r1, r3
   2c134:	230f      	movs	r3, #15
   2c136:	18fb      	adds	r3, r7, r3
   2c138:	1c02      	adds	r2, r0, #0
   2c13a:	701a      	strb	r2, [r3, #0]
   2c13c:	230e      	movs	r3, #14
   2c13e:	18fb      	adds	r3, r7, r3
   2c140:	1c0a      	adds	r2, r1, #0
   2c142:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c144:	231b      	movs	r3, #27
   2c146:	18fc      	adds	r4, r7, r3
   2c148:	230f      	movs	r3, #15
   2c14a:	18fb      	adds	r3, r7, r3
   2c14c:	781b      	ldrb	r3, [r3, #0]
   2c14e:	0018      	movs	r0, r3
   2c150:	4b28      	ldr	r3, [pc, #160]	; (2c1f4 <disk_read+0xcc>)
   2c152:	4798      	blx	r3
   2c154:	0003      	movs	r3, r0
   2c156:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c158:	231b      	movs	r3, #27
   2c15a:	18fb      	adds	r3, r7, r3
   2c15c:	781b      	ldrb	r3, [r3, #0]
   2c15e:	2b00      	cmp	r3, #0
   2c160:	d101      	bne.n	2c166 <disk_read+0x3e>
		return RES_ERROR;
   2c162:	2301      	movs	r3, #1
   2c164:	e042      	b.n	2c1ec <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c166:	2314      	movs	r3, #20
   2c168:	18fa      	adds	r2, r7, r3
   2c16a:	230f      	movs	r3, #15
   2c16c:	18fb      	adds	r3, r7, r3
   2c16e:	781b      	ldrb	r3, [r3, #0]
   2c170:	0011      	movs	r1, r2
   2c172:	0018      	movs	r0, r3
   2c174:	4b20      	ldr	r3, [pc, #128]	; (2c1f8 <disk_read+0xd0>)
   2c176:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c178:	230e      	movs	r3, #14
   2c17a:	18fb      	adds	r3, r7, r3
   2c17c:	781b      	ldrb	r3, [r3, #0]
   2c17e:	221b      	movs	r2, #27
   2c180:	18ba      	adds	r2, r7, r2
   2c182:	7812      	ldrb	r2, [r2, #0]
   2c184:	4353      	muls	r3, r2
   2c186:	001a      	movs	r2, r3
   2c188:	687b      	ldr	r3, [r7, #4]
   2c18a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c18c:	697b      	ldr	r3, [r7, #20]
   2c18e:	3301      	adds	r3, #1
   2c190:	211b      	movs	r1, #27
   2c192:	1879      	adds	r1, r7, r1
   2c194:	7809      	ldrb	r1, [r1, #0]
   2c196:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c198:	429a      	cmp	r2, r3
   2c19a:	d901      	bls.n	2c1a0 <disk_read+0x78>
		return RES_PARERR;
   2c19c:	2304      	movs	r3, #4
   2c19e:	e025      	b.n	2c1ec <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c1a0:	2300      	movs	r3, #0
   2c1a2:	61fb      	str	r3, [r7, #28]
   2c1a4:	e01b      	b.n	2c1de <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c1a6:	231b      	movs	r3, #27
   2c1a8:	18fb      	adds	r3, r7, r3
   2c1aa:	781b      	ldrb	r3, [r3, #0]
   2c1ac:	69fa      	ldr	r2, [r7, #28]
   2c1ae:	435a      	muls	r2, r3
   2c1b0:	687b      	ldr	r3, [r7, #4]
   2c1b2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c1b4:	231b      	movs	r3, #27
   2c1b6:	18fb      	adds	r3, r7, r3
   2c1b8:	781b      	ldrb	r3, [r3, #0]
   2c1ba:	69fa      	ldr	r2, [r7, #28]
   2c1bc:	4353      	muls	r3, r2
   2c1be:	025b      	lsls	r3, r3, #9
   2c1c0:	68ba      	ldr	r2, [r7, #8]
   2c1c2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c1c4:	230f      	movs	r3, #15
   2c1c6:	18fb      	adds	r3, r7, r3
   2c1c8:	781b      	ldrb	r3, [r3, #0]
   2c1ca:	0018      	movs	r0, r3
   2c1cc:	4b0b      	ldr	r3, [pc, #44]	; (2c1fc <disk_read+0xd4>)
   2c1ce:	4798      	blx	r3
   2c1d0:	1e03      	subs	r3, r0, #0
   2c1d2:	d001      	beq.n	2c1d8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c1d4:	2301      	movs	r3, #1
   2c1d6:	e009      	b.n	2c1ec <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c1d8:	69fb      	ldr	r3, [r7, #28]
   2c1da:	3301      	adds	r3, #1
   2c1dc:	61fb      	str	r3, [r7, #28]
   2c1de:	230e      	movs	r3, #14
   2c1e0:	18fb      	adds	r3, r7, r3
   2c1e2:	781a      	ldrb	r2, [r3, #0]
   2c1e4:	69fb      	ldr	r3, [r7, #28]
   2c1e6:	429a      	cmp	r2, r3
   2c1e8:	d8dd      	bhi.n	2c1a6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c1ea:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c1ec:	0018      	movs	r0, r3
   2c1ee:	46bd      	mov	sp, r7
   2c1f0:	b009      	add	sp, #36	; 0x24
   2c1f2:	bd90      	pop	{r4, r7, pc}
   2c1f4:	00026c9d 	.word	0x00026c9d
   2c1f8:	00026c51 	.word	0x00026c51
   2c1fc:	00026d11 	.word	0x00026d11

0002c200 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c200:	b590      	push	{r4, r7, lr}
   2c202:	b089      	sub	sp, #36	; 0x24
   2c204:	af00      	add	r7, sp, #0
   2c206:	60b9      	str	r1, [r7, #8]
   2c208:	607a      	str	r2, [r7, #4]
   2c20a:	0019      	movs	r1, r3
   2c20c:	230f      	movs	r3, #15
   2c20e:	18fb      	adds	r3, r7, r3
   2c210:	1c02      	adds	r2, r0, #0
   2c212:	701a      	strb	r2, [r3, #0]
   2c214:	230e      	movs	r3, #14
   2c216:	18fb      	adds	r3, r7, r3
   2c218:	1c0a      	adds	r2, r1, #0
   2c21a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c21c:	231b      	movs	r3, #27
   2c21e:	18fc      	adds	r4, r7, r3
   2c220:	230f      	movs	r3, #15
   2c222:	18fb      	adds	r3, r7, r3
   2c224:	781b      	ldrb	r3, [r3, #0]
   2c226:	0018      	movs	r0, r3
   2c228:	4b28      	ldr	r3, [pc, #160]	; (2c2cc <disk_write+0xcc>)
   2c22a:	4798      	blx	r3
   2c22c:	0003      	movs	r3, r0
   2c22e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c230:	231b      	movs	r3, #27
   2c232:	18fb      	adds	r3, r7, r3
   2c234:	781b      	ldrb	r3, [r3, #0]
   2c236:	2b00      	cmp	r3, #0
   2c238:	d101      	bne.n	2c23e <disk_write+0x3e>
		return RES_ERROR;
   2c23a:	2301      	movs	r3, #1
   2c23c:	e042      	b.n	2c2c4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c23e:	2314      	movs	r3, #20
   2c240:	18fa      	adds	r2, r7, r3
   2c242:	230f      	movs	r3, #15
   2c244:	18fb      	adds	r3, r7, r3
   2c246:	781b      	ldrb	r3, [r3, #0]
   2c248:	0011      	movs	r1, r2
   2c24a:	0018      	movs	r0, r3
   2c24c:	4b20      	ldr	r3, [pc, #128]	; (2c2d0 <disk_write+0xd0>)
   2c24e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c250:	230e      	movs	r3, #14
   2c252:	18fb      	adds	r3, r7, r3
   2c254:	781b      	ldrb	r3, [r3, #0]
   2c256:	221b      	movs	r2, #27
   2c258:	18ba      	adds	r2, r7, r2
   2c25a:	7812      	ldrb	r2, [r2, #0]
   2c25c:	4353      	muls	r3, r2
   2c25e:	001a      	movs	r2, r3
   2c260:	687b      	ldr	r3, [r7, #4]
   2c262:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c264:	697b      	ldr	r3, [r7, #20]
   2c266:	3301      	adds	r3, #1
   2c268:	211b      	movs	r1, #27
   2c26a:	1879      	adds	r1, r7, r1
   2c26c:	7809      	ldrb	r1, [r1, #0]
   2c26e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c270:	429a      	cmp	r2, r3
   2c272:	d901      	bls.n	2c278 <disk_write+0x78>
		return RES_PARERR;
   2c274:	2304      	movs	r3, #4
   2c276:	e025      	b.n	2c2c4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c278:	2300      	movs	r3, #0
   2c27a:	61fb      	str	r3, [r7, #28]
   2c27c:	e01b      	b.n	2c2b6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c27e:	231b      	movs	r3, #27
   2c280:	18fb      	adds	r3, r7, r3
   2c282:	781b      	ldrb	r3, [r3, #0]
   2c284:	69fa      	ldr	r2, [r7, #28]
   2c286:	435a      	muls	r2, r3
   2c288:	687b      	ldr	r3, [r7, #4]
   2c28a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c28c:	231b      	movs	r3, #27
   2c28e:	18fb      	adds	r3, r7, r3
   2c290:	781b      	ldrb	r3, [r3, #0]
   2c292:	69fa      	ldr	r2, [r7, #28]
   2c294:	4353      	muls	r3, r2
   2c296:	025b      	lsls	r3, r3, #9
   2c298:	68ba      	ldr	r2, [r7, #8]
   2c29a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c29c:	230f      	movs	r3, #15
   2c29e:	18fb      	adds	r3, r7, r3
   2c2a0:	781b      	ldrb	r3, [r3, #0]
   2c2a2:	0018      	movs	r0, r3
   2c2a4:	4b0b      	ldr	r3, [pc, #44]	; (2c2d4 <disk_write+0xd4>)
   2c2a6:	4798      	blx	r3
   2c2a8:	1e03      	subs	r3, r0, #0
   2c2aa:	d001      	beq.n	2c2b0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c2ac:	2301      	movs	r3, #1
   2c2ae:	e009      	b.n	2c2c4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c2b0:	69fb      	ldr	r3, [r7, #28]
   2c2b2:	3301      	adds	r3, #1
   2c2b4:	61fb      	str	r3, [r7, #28]
   2c2b6:	230e      	movs	r3, #14
   2c2b8:	18fb      	adds	r3, r7, r3
   2c2ba:	781a      	ldrb	r2, [r3, #0]
   2c2bc:	69fb      	ldr	r3, [r7, #28]
   2c2be:	429a      	cmp	r2, r3
   2c2c0:	d8dd      	bhi.n	2c27e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c2c2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c2c4:	0018      	movs	r0, r3
   2c2c6:	46bd      	mov	sp, r7
   2c2c8:	b009      	add	sp, #36	; 0x24
   2c2ca:	bd90      	pop	{r4, r7, pc}
   2c2cc:	00026c9d 	.word	0x00026c9d
   2c2d0:	00026c51 	.word	0x00026c51
   2c2d4:	00026d65 	.word	0x00026d65

0002c2d8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c2d8:	b590      	push	{r4, r7, lr}
   2c2da:	b085      	sub	sp, #20
   2c2dc:	af00      	add	r7, sp, #0
   2c2de:	603a      	str	r2, [r7, #0]
   2c2e0:	1dfb      	adds	r3, r7, #7
   2c2e2:	1c02      	adds	r2, r0, #0
   2c2e4:	701a      	strb	r2, [r3, #0]
   2c2e6:	1dbb      	adds	r3, r7, #6
   2c2e8:	1c0a      	adds	r2, r1, #0
   2c2ea:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c2ec:	230f      	movs	r3, #15
   2c2ee:	18fb      	adds	r3, r7, r3
   2c2f0:	2204      	movs	r2, #4
   2c2f2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c2f4:	1dbb      	adds	r3, r7, #6
   2c2f6:	781b      	ldrb	r3, [r3, #0]
   2c2f8:	2b01      	cmp	r3, #1
   2c2fa:	d00f      	beq.n	2c31c <disk_ioctl+0x44>
   2c2fc:	dc02      	bgt.n	2c304 <disk_ioctl+0x2c>
   2c2fe:	2b00      	cmp	r3, #0
   2c300:	d044      	beq.n	2c38c <disk_ioctl+0xb4>
   2c302:	e054      	b.n	2c3ae <disk_ioctl+0xd6>
   2c304:	2b02      	cmp	r3, #2
   2c306:	d01a      	beq.n	2c33e <disk_ioctl+0x66>
   2c308:	2b03      	cmp	r3, #3
   2c30a:	d150      	bne.n	2c3ae <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c30c:	683b      	ldr	r3, [r7, #0]
   2c30e:	2201      	movs	r2, #1
   2c310:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c312:	230f      	movs	r3, #15
   2c314:	18fb      	adds	r3, r7, r3
   2c316:	2200      	movs	r2, #0
   2c318:	701a      	strb	r2, [r3, #0]
		break;
   2c31a:	e04c      	b.n	2c3b6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c31c:	2308      	movs	r3, #8
   2c31e:	18fa      	adds	r2, r7, r3
   2c320:	1dfb      	adds	r3, r7, #7
   2c322:	781b      	ldrb	r3, [r3, #0]
   2c324:	0011      	movs	r1, r2
   2c326:	0018      	movs	r0, r3
   2c328:	4b26      	ldr	r3, [pc, #152]	; (2c3c4 <disk_ioctl+0xec>)
   2c32a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c32c:	68bb      	ldr	r3, [r7, #8]
   2c32e:	1c5a      	adds	r2, r3, #1
   2c330:	683b      	ldr	r3, [r7, #0]
   2c332:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c334:	230f      	movs	r3, #15
   2c336:	18fb      	adds	r3, r7, r3
   2c338:	2200      	movs	r2, #0
   2c33a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c33c:	e03b      	b.n	2c3b6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c33e:	230e      	movs	r3, #14
   2c340:	18fc      	adds	r4, r7, r3
   2c342:	1dfb      	adds	r3, r7, #7
   2c344:	781b      	ldrb	r3, [r3, #0]
   2c346:	0018      	movs	r0, r3
   2c348:	4b1f      	ldr	r3, [pc, #124]	; (2c3c8 <disk_ioctl+0xf0>)
   2c34a:	4798      	blx	r3
   2c34c:	0003      	movs	r3, r0
   2c34e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c350:	230e      	movs	r3, #14
   2c352:	18fb      	adds	r3, r7, r3
   2c354:	781b      	ldrb	r3, [r3, #0]
   2c356:	2b01      	cmp	r3, #1
   2c358:	d010      	beq.n	2c37c <disk_ioctl+0xa4>
   2c35a:	230e      	movs	r3, #14
   2c35c:	18fb      	adds	r3, r7, r3
   2c35e:	781b      	ldrb	r3, [r3, #0]
   2c360:	2b02      	cmp	r3, #2
   2c362:	d00b      	beq.n	2c37c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c364:	230e      	movs	r3, #14
   2c366:	18fb      	adds	r3, r7, r3
   2c368:	781b      	ldrb	r3, [r3, #0]
   2c36a:	2b04      	cmp	r3, #4
   2c36c:	d006      	beq.n	2c37c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c36e:	230e      	movs	r3, #14
   2c370:	18fb      	adds	r3, r7, r3
   2c372:	781b      	ldrb	r3, [r3, #0]
   2c374:	2b08      	cmp	r3, #8
   2c376:	d001      	beq.n	2c37c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c378:	2301      	movs	r3, #1
   2c37a:	e01f      	b.n	2c3bc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c37c:	683b      	ldr	r3, [r7, #0]
   2c37e:	2200      	movs	r2, #0
   2c380:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c382:	230f      	movs	r3, #15
   2c384:	18fb      	adds	r3, r7, r3
   2c386:	2200      	movs	r2, #0
   2c388:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c38a:	e014      	b.n	2c3b6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c38c:	1dfb      	adds	r3, r7, #7
   2c38e:	781b      	ldrb	r3, [r3, #0]
   2c390:	0018      	movs	r0, r3
   2c392:	4b0e      	ldr	r3, [pc, #56]	; (2c3cc <disk_ioctl+0xf4>)
   2c394:	4798      	blx	r3
   2c396:	1e03      	subs	r3, r0, #0
   2c398:	d104      	bne.n	2c3a4 <disk_ioctl+0xcc>
			res = RES_OK;
   2c39a:	230f      	movs	r3, #15
   2c39c:	18fb      	adds	r3, r7, r3
   2c39e:	2200      	movs	r2, #0
   2c3a0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c3a2:	e008      	b.n	2c3b6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c3a4:	230f      	movs	r3, #15
   2c3a6:	18fb      	adds	r3, r7, r3
   2c3a8:	2203      	movs	r2, #3
   2c3aa:	701a      	strb	r2, [r3, #0]
		break;
   2c3ac:	e003      	b.n	2c3b6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c3ae:	230f      	movs	r3, #15
   2c3b0:	18fb      	adds	r3, r7, r3
   2c3b2:	2204      	movs	r2, #4
   2c3b4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c3b6:	230f      	movs	r3, #15
   2c3b8:	18fb      	adds	r3, r7, r3
   2c3ba:	781b      	ldrb	r3, [r3, #0]
}
   2c3bc:	0018      	movs	r0, r3
   2c3be:	46bd      	mov	sp, r7
   2c3c0:	b005      	add	sp, #20
   2c3c2:	bd90      	pop	{r4, r7, pc}
   2c3c4:	00026c51 	.word	0x00026c51
   2c3c8:	00026c9d 	.word	0x00026c9d
   2c3cc:	00026c11 	.word	0x00026c11

0002c3d0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c3d0:	b580      	push	{r7, lr}
   2c3d2:	b084      	sub	sp, #16
   2c3d4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c3d6:	1d3a      	adds	r2, r7, #4
   2c3d8:	4b12      	ldr	r3, [pc, #72]	; (2c424 <get_fattime+0x54>)
   2c3da:	0011      	movs	r1, r2
   2c3dc:	0018      	movs	r0, r3
   2c3de:	4b12      	ldr	r3, [pc, #72]	; (2c428 <get_fattime+0x58>)
   2c3e0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c3e2:	1d3b      	adds	r3, r7, #4
   2c3e4:	88db      	ldrh	r3, [r3, #6]
   2c3e6:	4a11      	ldr	r2, [pc, #68]	; (2c42c <get_fattime+0x5c>)
   2c3e8:	4694      	mov	ip, r2
   2c3ea:	4463      	add	r3, ip
   2c3ec:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c3ee:	1d3b      	adds	r3, r7, #4
   2c3f0:	795b      	ldrb	r3, [r3, #5]
   2c3f2:	055b      	lsls	r3, r3, #21
   2c3f4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c3f6:	1d3b      	adds	r3, r7, #4
   2c3f8:	791b      	ldrb	r3, [r3, #4]
   2c3fa:	041b      	lsls	r3, r3, #16
   2c3fc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c3fe:	1d3b      	adds	r3, r7, #4
   2c400:	789b      	ldrb	r3, [r3, #2]
   2c402:	02db      	lsls	r3, r3, #11
   2c404:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c406:	1d3b      	adds	r3, r7, #4
   2c408:	785b      	ldrb	r3, [r3, #1]
   2c40a:	015b      	lsls	r3, r3, #5
   2c40c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c40e:	1d3a      	adds	r2, r7, #4
   2c410:	7812      	ldrb	r2, [r2, #0]
   2c412:	0852      	lsrs	r2, r2, #1
   2c414:	b2d2      	uxtb	r2, r2
   2c416:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c418:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c41a:	68fb      	ldr	r3, [r7, #12]
}
   2c41c:	0018      	movs	r0, r3
   2c41e:	46bd      	mov	sp, r7
   2c420:	b004      	add	sp, #16
   2c422:	bd80      	pop	{r7, pc}
   2c424:	20005cd0 	.word	0x20005cd0
   2c428:	00027a7d 	.word	0x00027a7d
   2c42c:	fffff844 	.word	0xfffff844

0002c430 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c430:	b580      	push	{r7, lr}
   2c432:	b086      	sub	sp, #24
   2c434:	af00      	add	r7, sp, #0
   2c436:	60f8      	str	r0, [r7, #12]
   2c438:	60b9      	str	r1, [r7, #8]
   2c43a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c43c:	68fb      	ldr	r3, [r7, #12]
   2c43e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c440:	68bb      	ldr	r3, [r7, #8]
   2c442:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c444:	e007      	b.n	2c456 <mem_cpy+0x26>
		*d++ = *s++;
   2c446:	697b      	ldr	r3, [r7, #20]
   2c448:	1c5a      	adds	r2, r3, #1
   2c44a:	617a      	str	r2, [r7, #20]
   2c44c:	693a      	ldr	r2, [r7, #16]
   2c44e:	1c51      	adds	r1, r2, #1
   2c450:	6139      	str	r1, [r7, #16]
   2c452:	7812      	ldrb	r2, [r2, #0]
   2c454:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c456:	687b      	ldr	r3, [r7, #4]
   2c458:	1e5a      	subs	r2, r3, #1
   2c45a:	607a      	str	r2, [r7, #4]
   2c45c:	2b00      	cmp	r3, #0
   2c45e:	d1f2      	bne.n	2c446 <mem_cpy+0x16>
}
   2c460:	46c0      	nop			; (mov r8, r8)
   2c462:	46bd      	mov	sp, r7
   2c464:	b006      	add	sp, #24
   2c466:	bd80      	pop	{r7, pc}

0002c468 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c468:	b580      	push	{r7, lr}
   2c46a:	b086      	sub	sp, #24
   2c46c:	af00      	add	r7, sp, #0
   2c46e:	60f8      	str	r0, [r7, #12]
   2c470:	60b9      	str	r1, [r7, #8]
   2c472:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c474:	68fb      	ldr	r3, [r7, #12]
   2c476:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c478:	e005      	b.n	2c486 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c47a:	697b      	ldr	r3, [r7, #20]
   2c47c:	1c5a      	adds	r2, r3, #1
   2c47e:	617a      	str	r2, [r7, #20]
   2c480:	68ba      	ldr	r2, [r7, #8]
   2c482:	b2d2      	uxtb	r2, r2
   2c484:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c486:	687b      	ldr	r3, [r7, #4]
   2c488:	1e5a      	subs	r2, r3, #1
   2c48a:	607a      	str	r2, [r7, #4]
   2c48c:	2b00      	cmp	r3, #0
   2c48e:	d1f4      	bne.n	2c47a <mem_set+0x12>
}
   2c490:	46c0      	nop			; (mov r8, r8)
   2c492:	46bd      	mov	sp, r7
   2c494:	b006      	add	sp, #24
   2c496:	bd80      	pop	{r7, pc}

0002c498 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c498:	b580      	push	{r7, lr}
   2c49a:	b088      	sub	sp, #32
   2c49c:	af00      	add	r7, sp, #0
   2c49e:	60f8      	str	r0, [r7, #12]
   2c4a0:	60b9      	str	r1, [r7, #8]
   2c4a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c4a4:	68fb      	ldr	r3, [r7, #12]
   2c4a6:	61fb      	str	r3, [r7, #28]
   2c4a8:	68bb      	ldr	r3, [r7, #8]
   2c4aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c4ac:	2300      	movs	r3, #0
   2c4ae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c4b0:	46c0      	nop			; (mov r8, r8)
   2c4b2:	687b      	ldr	r3, [r7, #4]
   2c4b4:	1e5a      	subs	r2, r3, #1
   2c4b6:	607a      	str	r2, [r7, #4]
   2c4b8:	2b00      	cmp	r3, #0
   2c4ba:	d00d      	beq.n	2c4d8 <mem_cmp+0x40>
   2c4bc:	69fb      	ldr	r3, [r7, #28]
   2c4be:	1c5a      	adds	r2, r3, #1
   2c4c0:	61fa      	str	r2, [r7, #28]
   2c4c2:	781b      	ldrb	r3, [r3, #0]
   2c4c4:	0019      	movs	r1, r3
   2c4c6:	69bb      	ldr	r3, [r7, #24]
   2c4c8:	1c5a      	adds	r2, r3, #1
   2c4ca:	61ba      	str	r2, [r7, #24]
   2c4cc:	781b      	ldrb	r3, [r3, #0]
   2c4ce:	1acb      	subs	r3, r1, r3
   2c4d0:	617b      	str	r3, [r7, #20]
   2c4d2:	697b      	ldr	r3, [r7, #20]
   2c4d4:	2b00      	cmp	r3, #0
   2c4d6:	d0ec      	beq.n	2c4b2 <mem_cmp+0x1a>
	return r;
   2c4d8:	697b      	ldr	r3, [r7, #20]
}
   2c4da:	0018      	movs	r0, r3
   2c4dc:	46bd      	mov	sp, r7
   2c4de:	b008      	add	sp, #32
   2c4e0:	bd80      	pop	{r7, pc}

0002c4e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c4e2:	b580      	push	{r7, lr}
   2c4e4:	b082      	sub	sp, #8
   2c4e6:	af00      	add	r7, sp, #0
   2c4e8:	6078      	str	r0, [r7, #4]
   2c4ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c4ec:	e002      	b.n	2c4f4 <chk_chr+0x12>
   2c4ee:	687b      	ldr	r3, [r7, #4]
   2c4f0:	3301      	adds	r3, #1
   2c4f2:	607b      	str	r3, [r7, #4]
   2c4f4:	687b      	ldr	r3, [r7, #4]
   2c4f6:	781b      	ldrb	r3, [r3, #0]
   2c4f8:	2b00      	cmp	r3, #0
   2c4fa:	d005      	beq.n	2c508 <chk_chr+0x26>
   2c4fc:	687b      	ldr	r3, [r7, #4]
   2c4fe:	781b      	ldrb	r3, [r3, #0]
   2c500:	001a      	movs	r2, r3
   2c502:	683b      	ldr	r3, [r7, #0]
   2c504:	429a      	cmp	r2, r3
   2c506:	d1f2      	bne.n	2c4ee <chk_chr+0xc>
	return *str;
   2c508:	687b      	ldr	r3, [r7, #4]
   2c50a:	781b      	ldrb	r3, [r3, #0]
}
   2c50c:	0018      	movs	r0, r3
   2c50e:	46bd      	mov	sp, r7
   2c510:	b002      	add	sp, #8
   2c512:	bd80      	pop	{r7, pc}

0002c514 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c514:	b590      	push	{r4, r7, lr}
   2c516:	b085      	sub	sp, #20
   2c518:	af00      	add	r7, sp, #0
   2c51a:	6078      	str	r0, [r7, #4]
   2c51c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c51e:	687b      	ldr	r3, [r7, #4]
   2c520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c522:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c524:	68fa      	ldr	r2, [r7, #12]
   2c526:	683b      	ldr	r3, [r7, #0]
   2c528:	429a      	cmp	r2, r3
   2c52a:	d04e      	beq.n	2c5ca <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c52c:	687b      	ldr	r3, [r7, #4]
   2c52e:	791b      	ldrb	r3, [r3, #4]
   2c530:	2b00      	cmp	r3, #0
   2c532:	d037      	beq.n	2c5a4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	7858      	ldrb	r0, [r3, #1]
   2c538:	687b      	ldr	r3, [r7, #4]
   2c53a:	3330      	adds	r3, #48	; 0x30
   2c53c:	0019      	movs	r1, r3
   2c53e:	68fa      	ldr	r2, [r7, #12]
   2c540:	2301      	movs	r3, #1
   2c542:	4c24      	ldr	r4, [pc, #144]	; (2c5d4 <move_window+0xc0>)
   2c544:	47a0      	blx	r4
   2c546:	1e03      	subs	r3, r0, #0
   2c548:	d001      	beq.n	2c54e <move_window+0x3a>
				return FR_DISK_ERR;
   2c54a:	2301      	movs	r3, #1
   2c54c:	e03e      	b.n	2c5cc <move_window+0xb8>
			fs->wflag = 0;
   2c54e:	687b      	ldr	r3, [r7, #4]
   2c550:	2200      	movs	r2, #0
   2c552:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	6a1a      	ldr	r2, [r3, #32]
   2c558:	687b      	ldr	r3, [r7, #4]
   2c55a:	69db      	ldr	r3, [r3, #28]
   2c55c:	18d2      	adds	r2, r2, r3
   2c55e:	68fb      	ldr	r3, [r7, #12]
   2c560:	429a      	cmp	r2, r3
   2c562:	d91f      	bls.n	2c5a4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c564:	230b      	movs	r3, #11
   2c566:	18fb      	adds	r3, r7, r3
   2c568:	687a      	ldr	r2, [r7, #4]
   2c56a:	78d2      	ldrb	r2, [r2, #3]
   2c56c:	701a      	strb	r2, [r3, #0]
   2c56e:	e014      	b.n	2c59a <move_window+0x86>
					wsect += fs->fsize;
   2c570:	687b      	ldr	r3, [r7, #4]
   2c572:	69db      	ldr	r3, [r3, #28]
   2c574:	68fa      	ldr	r2, [r7, #12]
   2c576:	18d3      	adds	r3, r2, r3
   2c578:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c57a:	687b      	ldr	r3, [r7, #4]
   2c57c:	7858      	ldrb	r0, [r3, #1]
   2c57e:	687b      	ldr	r3, [r7, #4]
   2c580:	3330      	adds	r3, #48	; 0x30
   2c582:	0019      	movs	r1, r3
   2c584:	68fa      	ldr	r2, [r7, #12]
   2c586:	2301      	movs	r3, #1
   2c588:	4c12      	ldr	r4, [pc, #72]	; (2c5d4 <move_window+0xc0>)
   2c58a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c58c:	230b      	movs	r3, #11
   2c58e:	18fb      	adds	r3, r7, r3
   2c590:	781a      	ldrb	r2, [r3, #0]
   2c592:	230b      	movs	r3, #11
   2c594:	18fb      	adds	r3, r7, r3
   2c596:	3a01      	subs	r2, #1
   2c598:	701a      	strb	r2, [r3, #0]
   2c59a:	230b      	movs	r3, #11
   2c59c:	18fb      	adds	r3, r7, r3
   2c59e:	781b      	ldrb	r3, [r3, #0]
   2c5a0:	2b01      	cmp	r3, #1
   2c5a2:	d8e5      	bhi.n	2c570 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c5a4:	683b      	ldr	r3, [r7, #0]
   2c5a6:	2b00      	cmp	r3, #0
   2c5a8:	d00f      	beq.n	2c5ca <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c5aa:	687b      	ldr	r3, [r7, #4]
   2c5ac:	7858      	ldrb	r0, [r3, #1]
   2c5ae:	687b      	ldr	r3, [r7, #4]
   2c5b0:	3330      	adds	r3, #48	; 0x30
   2c5b2:	0019      	movs	r1, r3
   2c5b4:	683a      	ldr	r2, [r7, #0]
   2c5b6:	2301      	movs	r3, #1
   2c5b8:	4c07      	ldr	r4, [pc, #28]	; (2c5d8 <move_window+0xc4>)
   2c5ba:	47a0      	blx	r4
   2c5bc:	1e03      	subs	r3, r0, #0
   2c5be:	d001      	beq.n	2c5c4 <move_window+0xb0>
				return FR_DISK_ERR;
   2c5c0:	2301      	movs	r3, #1
   2c5c2:	e003      	b.n	2c5cc <move_window+0xb8>
			fs->winsect = sector;
   2c5c4:	687b      	ldr	r3, [r7, #4]
   2c5c6:	683a      	ldr	r2, [r7, #0]
   2c5c8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c5ca:	2300      	movs	r3, #0
}
   2c5cc:	0018      	movs	r0, r3
   2c5ce:	46bd      	mov	sp, r7
   2c5d0:	b005      	add	sp, #20
   2c5d2:	bd90      	pop	{r4, r7, pc}
   2c5d4:	0002c201 	.word	0x0002c201
   2c5d8:	0002c129 	.word	0x0002c129

0002c5dc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c5dc:	b590      	push	{r4, r7, lr}
   2c5de:	b085      	sub	sp, #20
   2c5e0:	af00      	add	r7, sp, #0
   2c5e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c5e4:	230f      	movs	r3, #15
   2c5e6:	18fc      	adds	r4, r7, r3
   2c5e8:	687b      	ldr	r3, [r7, #4]
   2c5ea:	2100      	movs	r1, #0
   2c5ec:	0018      	movs	r0, r3
   2c5ee:	4b52      	ldr	r3, [pc, #328]	; (2c738 <sync+0x15c>)
   2c5f0:	4798      	blx	r3
   2c5f2:	0003      	movs	r3, r0
   2c5f4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c5f6:	230f      	movs	r3, #15
   2c5f8:	18fb      	adds	r3, r7, r3
   2c5fa:	781b      	ldrb	r3, [r3, #0]
   2c5fc:	2b00      	cmp	r3, #0
   2c5fe:	d000      	beq.n	2c602 <sync+0x26>
   2c600:	e093      	b.n	2c72a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c602:	687b      	ldr	r3, [r7, #4]
   2c604:	781b      	ldrb	r3, [r3, #0]
   2c606:	2b03      	cmp	r3, #3
   2c608:	d000      	beq.n	2c60c <sync+0x30>
   2c60a:	e081      	b.n	2c710 <sync+0x134>
   2c60c:	687b      	ldr	r3, [r7, #4]
   2c60e:	795b      	ldrb	r3, [r3, #5]
   2c610:	2b00      	cmp	r3, #0
   2c612:	d07d      	beq.n	2c710 <sync+0x134>
			fs->winsect = 0;
   2c614:	687b      	ldr	r3, [r7, #4]
   2c616:	2200      	movs	r2, #0
   2c618:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c61a:	687b      	ldr	r3, [r7, #4]
   2c61c:	3330      	adds	r3, #48	; 0x30
   2c61e:	0018      	movs	r0, r3
   2c620:	2380      	movs	r3, #128	; 0x80
   2c622:	009b      	lsls	r3, r3, #2
   2c624:	001a      	movs	r2, r3
   2c626:	2100      	movs	r1, #0
   2c628:	4b44      	ldr	r3, [pc, #272]	; (2c73c <sync+0x160>)
   2c62a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c62c:	687b      	ldr	r3, [r7, #4]
   2c62e:	4a44      	ldr	r2, [pc, #272]	; (2c740 <sync+0x164>)
   2c630:	2155      	movs	r1, #85	; 0x55
   2c632:	5499      	strb	r1, [r3, r2]
   2c634:	687b      	ldr	r3, [r7, #4]
   2c636:	4a43      	ldr	r2, [pc, #268]	; (2c744 <sync+0x168>)
   2c638:	21aa      	movs	r1, #170	; 0xaa
   2c63a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c63c:	687b      	ldr	r3, [r7, #4]
   2c63e:	2230      	movs	r2, #48	; 0x30
   2c640:	2152      	movs	r1, #82	; 0x52
   2c642:	5499      	strb	r1, [r3, r2]
   2c644:	687b      	ldr	r3, [r7, #4]
   2c646:	2231      	movs	r2, #49	; 0x31
   2c648:	2152      	movs	r1, #82	; 0x52
   2c64a:	5499      	strb	r1, [r3, r2]
   2c64c:	687b      	ldr	r3, [r7, #4]
   2c64e:	2232      	movs	r2, #50	; 0x32
   2c650:	2161      	movs	r1, #97	; 0x61
   2c652:	5499      	strb	r1, [r3, r2]
   2c654:	687b      	ldr	r3, [r7, #4]
   2c656:	2233      	movs	r2, #51	; 0x33
   2c658:	2141      	movs	r1, #65	; 0x41
   2c65a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c65c:	687a      	ldr	r2, [r7, #4]
   2c65e:	2385      	movs	r3, #133	; 0x85
   2c660:	009b      	lsls	r3, r3, #2
   2c662:	2172      	movs	r1, #114	; 0x72
   2c664:	54d1      	strb	r1, [r2, r3]
   2c666:	687b      	ldr	r3, [r7, #4]
   2c668:	4a37      	ldr	r2, [pc, #220]	; (2c748 <sync+0x16c>)
   2c66a:	2172      	movs	r1, #114	; 0x72
   2c66c:	5499      	strb	r1, [r3, r2]
   2c66e:	687b      	ldr	r3, [r7, #4]
   2c670:	4a36      	ldr	r2, [pc, #216]	; (2c74c <sync+0x170>)
   2c672:	2141      	movs	r1, #65	; 0x41
   2c674:	5499      	strb	r1, [r3, r2]
   2c676:	687b      	ldr	r3, [r7, #4]
   2c678:	4a35      	ldr	r2, [pc, #212]	; (2c750 <sync+0x174>)
   2c67a:	2161      	movs	r1, #97	; 0x61
   2c67c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c67e:	687b      	ldr	r3, [r7, #4]
   2c680:	691b      	ldr	r3, [r3, #16]
   2c682:	b2d9      	uxtb	r1, r3
   2c684:	687a      	ldr	r2, [r7, #4]
   2c686:	2386      	movs	r3, #134	; 0x86
   2c688:	009b      	lsls	r3, r3, #2
   2c68a:	54d1      	strb	r1, [r2, r3]
   2c68c:	687b      	ldr	r3, [r7, #4]
   2c68e:	691b      	ldr	r3, [r3, #16]
   2c690:	b29b      	uxth	r3, r3
   2c692:	0a1b      	lsrs	r3, r3, #8
   2c694:	b29b      	uxth	r3, r3
   2c696:	b2d9      	uxtb	r1, r3
   2c698:	687b      	ldr	r3, [r7, #4]
   2c69a:	4a2e      	ldr	r2, [pc, #184]	; (2c754 <sync+0x178>)
   2c69c:	5499      	strb	r1, [r3, r2]
   2c69e:	687b      	ldr	r3, [r7, #4]
   2c6a0:	691b      	ldr	r3, [r3, #16]
   2c6a2:	0c1b      	lsrs	r3, r3, #16
   2c6a4:	b2d9      	uxtb	r1, r3
   2c6a6:	687b      	ldr	r3, [r7, #4]
   2c6a8:	4a2b      	ldr	r2, [pc, #172]	; (2c758 <sync+0x17c>)
   2c6aa:	5499      	strb	r1, [r3, r2]
   2c6ac:	687b      	ldr	r3, [r7, #4]
   2c6ae:	691b      	ldr	r3, [r3, #16]
   2c6b0:	0e1b      	lsrs	r3, r3, #24
   2c6b2:	b2d9      	uxtb	r1, r3
   2c6b4:	687b      	ldr	r3, [r7, #4]
   2c6b6:	4a29      	ldr	r2, [pc, #164]	; (2c75c <sync+0x180>)
   2c6b8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c6ba:	687b      	ldr	r3, [r7, #4]
   2c6bc:	68db      	ldr	r3, [r3, #12]
   2c6be:	b2d9      	uxtb	r1, r3
   2c6c0:	687a      	ldr	r2, [r7, #4]
   2c6c2:	2387      	movs	r3, #135	; 0x87
   2c6c4:	009b      	lsls	r3, r3, #2
   2c6c6:	54d1      	strb	r1, [r2, r3]
   2c6c8:	687b      	ldr	r3, [r7, #4]
   2c6ca:	68db      	ldr	r3, [r3, #12]
   2c6cc:	b29b      	uxth	r3, r3
   2c6ce:	0a1b      	lsrs	r3, r3, #8
   2c6d0:	b29b      	uxth	r3, r3
   2c6d2:	b2d9      	uxtb	r1, r3
   2c6d4:	687b      	ldr	r3, [r7, #4]
   2c6d6:	4a22      	ldr	r2, [pc, #136]	; (2c760 <sync+0x184>)
   2c6d8:	5499      	strb	r1, [r3, r2]
   2c6da:	687b      	ldr	r3, [r7, #4]
   2c6dc:	68db      	ldr	r3, [r3, #12]
   2c6de:	0c1b      	lsrs	r3, r3, #16
   2c6e0:	b2d9      	uxtb	r1, r3
   2c6e2:	687b      	ldr	r3, [r7, #4]
   2c6e4:	4a1f      	ldr	r2, [pc, #124]	; (2c764 <sync+0x188>)
   2c6e6:	5499      	strb	r1, [r3, r2]
   2c6e8:	687b      	ldr	r3, [r7, #4]
   2c6ea:	68db      	ldr	r3, [r3, #12]
   2c6ec:	0e1b      	lsrs	r3, r3, #24
   2c6ee:	b2d9      	uxtb	r1, r3
   2c6f0:	687b      	ldr	r3, [r7, #4]
   2c6f2:	4a1d      	ldr	r2, [pc, #116]	; (2c768 <sync+0x18c>)
   2c6f4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c6f6:	687b      	ldr	r3, [r7, #4]
   2c6f8:	7858      	ldrb	r0, [r3, #1]
   2c6fa:	687b      	ldr	r3, [r7, #4]
   2c6fc:	3330      	adds	r3, #48	; 0x30
   2c6fe:	0019      	movs	r1, r3
   2c700:	687b      	ldr	r3, [r7, #4]
   2c702:	695a      	ldr	r2, [r3, #20]
   2c704:	2301      	movs	r3, #1
   2c706:	4c19      	ldr	r4, [pc, #100]	; (2c76c <sync+0x190>)
   2c708:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c70a:	687b      	ldr	r3, [r7, #4]
   2c70c:	2200      	movs	r2, #0
   2c70e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c710:	687b      	ldr	r3, [r7, #4]
   2c712:	785b      	ldrb	r3, [r3, #1]
   2c714:	2200      	movs	r2, #0
   2c716:	2100      	movs	r1, #0
   2c718:	0018      	movs	r0, r3
   2c71a:	4b15      	ldr	r3, [pc, #84]	; (2c770 <sync+0x194>)
   2c71c:	4798      	blx	r3
   2c71e:	1e03      	subs	r3, r0, #0
   2c720:	d003      	beq.n	2c72a <sync+0x14e>
			res = FR_DISK_ERR;
   2c722:	230f      	movs	r3, #15
   2c724:	18fb      	adds	r3, r7, r3
   2c726:	2201      	movs	r2, #1
   2c728:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c72a:	230f      	movs	r3, #15
   2c72c:	18fb      	adds	r3, r7, r3
   2c72e:	781b      	ldrb	r3, [r3, #0]
}
   2c730:	0018      	movs	r0, r3
   2c732:	46bd      	mov	sp, r7
   2c734:	b005      	add	sp, #20
   2c736:	bd90      	pop	{r4, r7, pc}
   2c738:	0002c515 	.word	0x0002c515
   2c73c:	0002c469 	.word	0x0002c469
   2c740:	0000022e 	.word	0x0000022e
   2c744:	0000022f 	.word	0x0000022f
   2c748:	00000215 	.word	0x00000215
   2c74c:	00000216 	.word	0x00000216
   2c750:	00000217 	.word	0x00000217
   2c754:	00000219 	.word	0x00000219
   2c758:	0000021a 	.word	0x0000021a
   2c75c:	0000021b 	.word	0x0000021b
   2c760:	0000021d 	.word	0x0000021d
   2c764:	0000021e 	.word	0x0000021e
   2c768:	0000021f 	.word	0x0000021f
   2c76c:	0002c201 	.word	0x0002c201
   2c770:	0002c2d9 	.word	0x0002c2d9

0002c774 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c774:	b580      	push	{r7, lr}
   2c776:	b082      	sub	sp, #8
   2c778:	af00      	add	r7, sp, #0
   2c77a:	6078      	str	r0, [r7, #4]
   2c77c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c77e:	683b      	ldr	r3, [r7, #0]
   2c780:	3b02      	subs	r3, #2
   2c782:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c784:	687b      	ldr	r3, [r7, #4]
   2c786:	699b      	ldr	r3, [r3, #24]
   2c788:	1e9a      	subs	r2, r3, #2
   2c78a:	683b      	ldr	r3, [r7, #0]
   2c78c:	429a      	cmp	r2, r3
   2c78e:	d801      	bhi.n	2c794 <clust2sect+0x20>
   2c790:	2300      	movs	r3, #0
   2c792:	e007      	b.n	2c7a4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c794:	687b      	ldr	r3, [r7, #4]
   2c796:	789b      	ldrb	r3, [r3, #2]
   2c798:	001a      	movs	r2, r3
   2c79a:	683b      	ldr	r3, [r7, #0]
   2c79c:	435a      	muls	r2, r3
   2c79e:	687b      	ldr	r3, [r7, #4]
   2c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c7a2:	18d3      	adds	r3, r2, r3
}
   2c7a4:	0018      	movs	r0, r3
   2c7a6:	46bd      	mov	sp, r7
   2c7a8:	b002      	add	sp, #8
   2c7aa:	bd80      	pop	{r7, pc}

0002c7ac <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c7ac:	b580      	push	{r7, lr}
   2c7ae:	b086      	sub	sp, #24
   2c7b0:	af00      	add	r7, sp, #0
   2c7b2:	6078      	str	r0, [r7, #4]
   2c7b4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c7b6:	683b      	ldr	r3, [r7, #0]
   2c7b8:	2b01      	cmp	r3, #1
   2c7ba:	d904      	bls.n	2c7c6 <get_fat+0x1a>
   2c7bc:	687b      	ldr	r3, [r7, #4]
   2c7be:	699a      	ldr	r2, [r3, #24]
   2c7c0:	683b      	ldr	r3, [r7, #0]
   2c7c2:	429a      	cmp	r2, r3
   2c7c4:	d801      	bhi.n	2c7ca <get_fat+0x1e>
		return 1;
   2c7c6:	2301      	movs	r3, #1
   2c7c8:	e09f      	b.n	2c90a <get_fat+0x15e>

	switch (fs->fs_type) {
   2c7ca:	687b      	ldr	r3, [r7, #4]
   2c7cc:	781b      	ldrb	r3, [r3, #0]
   2c7ce:	2b02      	cmp	r3, #2
   2c7d0:	d048      	beq.n	2c864 <get_fat+0xb8>
   2c7d2:	2b03      	cmp	r3, #3
   2c7d4:	d067      	beq.n	2c8a6 <get_fat+0xfa>
   2c7d6:	2b01      	cmp	r3, #1
   2c7d8:	d000      	beq.n	2c7dc <get_fat+0x30>
   2c7da:	e094      	b.n	2c906 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c7dc:	683b      	ldr	r3, [r7, #0]
   2c7de:	617b      	str	r3, [r7, #20]
   2c7e0:	697b      	ldr	r3, [r7, #20]
   2c7e2:	085b      	lsrs	r3, r3, #1
   2c7e4:	697a      	ldr	r2, [r7, #20]
   2c7e6:	18d3      	adds	r3, r2, r3
   2c7e8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c7ea:	687b      	ldr	r3, [r7, #4]
   2c7ec:	6a1a      	ldr	r2, [r3, #32]
   2c7ee:	697b      	ldr	r3, [r7, #20]
   2c7f0:	0a5b      	lsrs	r3, r3, #9
   2c7f2:	18d2      	adds	r2, r2, r3
   2c7f4:	687b      	ldr	r3, [r7, #4]
   2c7f6:	0011      	movs	r1, r2
   2c7f8:	0018      	movs	r0, r3
   2c7fa:	4b46      	ldr	r3, [pc, #280]	; (2c914 <get_fat+0x168>)
   2c7fc:	4798      	blx	r3
   2c7fe:	1e03      	subs	r3, r0, #0
   2c800:	d000      	beq.n	2c804 <get_fat+0x58>
   2c802:	e079      	b.n	2c8f8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c804:	697b      	ldr	r3, [r7, #20]
   2c806:	05db      	lsls	r3, r3, #23
   2c808:	0ddb      	lsrs	r3, r3, #23
   2c80a:	687a      	ldr	r2, [r7, #4]
   2c80c:	2130      	movs	r1, #48	; 0x30
   2c80e:	18d3      	adds	r3, r2, r3
   2c810:	185b      	adds	r3, r3, r1
   2c812:	781b      	ldrb	r3, [r3, #0]
   2c814:	613b      	str	r3, [r7, #16]
   2c816:	697b      	ldr	r3, [r7, #20]
   2c818:	3301      	adds	r3, #1
   2c81a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c81c:	687b      	ldr	r3, [r7, #4]
   2c81e:	6a1a      	ldr	r2, [r3, #32]
   2c820:	697b      	ldr	r3, [r7, #20]
   2c822:	0a5b      	lsrs	r3, r3, #9
   2c824:	18d2      	adds	r2, r2, r3
   2c826:	687b      	ldr	r3, [r7, #4]
   2c828:	0011      	movs	r1, r2
   2c82a:	0018      	movs	r0, r3
   2c82c:	4b39      	ldr	r3, [pc, #228]	; (2c914 <get_fat+0x168>)
   2c82e:	4798      	blx	r3
   2c830:	1e03      	subs	r3, r0, #0
   2c832:	d163      	bne.n	2c8fc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c834:	697b      	ldr	r3, [r7, #20]
   2c836:	05db      	lsls	r3, r3, #23
   2c838:	0ddb      	lsrs	r3, r3, #23
   2c83a:	687a      	ldr	r2, [r7, #4]
   2c83c:	2130      	movs	r1, #48	; 0x30
   2c83e:	18d3      	adds	r3, r2, r3
   2c840:	185b      	adds	r3, r3, r1
   2c842:	781b      	ldrb	r3, [r3, #0]
   2c844:	021b      	lsls	r3, r3, #8
   2c846:	001a      	movs	r2, r3
   2c848:	693b      	ldr	r3, [r7, #16]
   2c84a:	4313      	orrs	r3, r2
   2c84c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c84e:	683b      	ldr	r3, [r7, #0]
   2c850:	2201      	movs	r2, #1
   2c852:	4013      	ands	r3, r2
   2c854:	d002      	beq.n	2c85c <get_fat+0xb0>
   2c856:	693b      	ldr	r3, [r7, #16]
   2c858:	091b      	lsrs	r3, r3, #4
   2c85a:	e056      	b.n	2c90a <get_fat+0x15e>
   2c85c:	693b      	ldr	r3, [r7, #16]
   2c85e:	051b      	lsls	r3, r3, #20
   2c860:	0d1b      	lsrs	r3, r3, #20
   2c862:	e052      	b.n	2c90a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c864:	687b      	ldr	r3, [r7, #4]
   2c866:	6a1a      	ldr	r2, [r3, #32]
   2c868:	683b      	ldr	r3, [r7, #0]
   2c86a:	0a1b      	lsrs	r3, r3, #8
   2c86c:	18d2      	adds	r2, r2, r3
   2c86e:	687b      	ldr	r3, [r7, #4]
   2c870:	0011      	movs	r1, r2
   2c872:	0018      	movs	r0, r3
   2c874:	4b27      	ldr	r3, [pc, #156]	; (2c914 <get_fat+0x168>)
   2c876:	4798      	blx	r3
   2c878:	1e03      	subs	r3, r0, #0
   2c87a:	d141      	bne.n	2c900 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c87c:	683b      	ldr	r3, [r7, #0]
   2c87e:	005a      	lsls	r2, r3, #1
   2c880:	23ff      	movs	r3, #255	; 0xff
   2c882:	005b      	lsls	r3, r3, #1
   2c884:	4013      	ands	r3, r2
   2c886:	3330      	adds	r3, #48	; 0x30
   2c888:	687a      	ldr	r2, [r7, #4]
   2c88a:	18d3      	adds	r3, r2, r3
   2c88c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c88e:	68fb      	ldr	r3, [r7, #12]
   2c890:	3301      	adds	r3, #1
   2c892:	781b      	ldrb	r3, [r3, #0]
   2c894:	021b      	lsls	r3, r3, #8
   2c896:	b21a      	sxth	r2, r3
   2c898:	68fb      	ldr	r3, [r7, #12]
   2c89a:	781b      	ldrb	r3, [r3, #0]
   2c89c:	b21b      	sxth	r3, r3
   2c89e:	4313      	orrs	r3, r2
   2c8a0:	b21b      	sxth	r3, r3
   2c8a2:	b29b      	uxth	r3, r3
   2c8a4:	e031      	b.n	2c90a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c8a6:	687b      	ldr	r3, [r7, #4]
   2c8a8:	6a1a      	ldr	r2, [r3, #32]
   2c8aa:	683b      	ldr	r3, [r7, #0]
   2c8ac:	09db      	lsrs	r3, r3, #7
   2c8ae:	18d2      	adds	r2, r2, r3
   2c8b0:	687b      	ldr	r3, [r7, #4]
   2c8b2:	0011      	movs	r1, r2
   2c8b4:	0018      	movs	r0, r3
   2c8b6:	4b17      	ldr	r3, [pc, #92]	; (2c914 <get_fat+0x168>)
   2c8b8:	4798      	blx	r3
   2c8ba:	1e03      	subs	r3, r0, #0
   2c8bc:	d122      	bne.n	2c904 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c8be:	683b      	ldr	r3, [r7, #0]
   2c8c0:	009a      	lsls	r2, r3, #2
   2c8c2:	23fe      	movs	r3, #254	; 0xfe
   2c8c4:	005b      	lsls	r3, r3, #1
   2c8c6:	4013      	ands	r3, r2
   2c8c8:	3330      	adds	r3, #48	; 0x30
   2c8ca:	687a      	ldr	r2, [r7, #4]
   2c8cc:	18d3      	adds	r3, r2, r3
   2c8ce:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c8d0:	68fb      	ldr	r3, [r7, #12]
   2c8d2:	3303      	adds	r3, #3
   2c8d4:	781b      	ldrb	r3, [r3, #0]
   2c8d6:	061a      	lsls	r2, r3, #24
   2c8d8:	68fb      	ldr	r3, [r7, #12]
   2c8da:	3302      	adds	r3, #2
   2c8dc:	781b      	ldrb	r3, [r3, #0]
   2c8de:	041b      	lsls	r3, r3, #16
   2c8e0:	4313      	orrs	r3, r2
   2c8e2:	68fa      	ldr	r2, [r7, #12]
   2c8e4:	3201      	adds	r2, #1
   2c8e6:	7812      	ldrb	r2, [r2, #0]
   2c8e8:	0212      	lsls	r2, r2, #8
   2c8ea:	4313      	orrs	r3, r2
   2c8ec:	68fa      	ldr	r2, [r7, #12]
   2c8ee:	7812      	ldrb	r2, [r2, #0]
   2c8f0:	4313      	orrs	r3, r2
   2c8f2:	011b      	lsls	r3, r3, #4
   2c8f4:	091b      	lsrs	r3, r3, #4
   2c8f6:	e008      	b.n	2c90a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c8f8:	46c0      	nop			; (mov r8, r8)
   2c8fa:	e004      	b.n	2c906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c8fc:	46c0      	nop			; (mov r8, r8)
   2c8fe:	e002      	b.n	2c906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c900:	46c0      	nop			; (mov r8, r8)
   2c902:	e000      	b.n	2c906 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c904:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c906:	2301      	movs	r3, #1
   2c908:	425b      	negs	r3, r3
}
   2c90a:	0018      	movs	r0, r3
   2c90c:	46bd      	mov	sp, r7
   2c90e:	b006      	add	sp, #24
   2c910:	bd80      	pop	{r7, pc}
   2c912:	46c0      	nop			; (mov r8, r8)
   2c914:	0002c515 	.word	0x0002c515

0002c918 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c918:	b590      	push	{r4, r7, lr}
   2c91a:	b089      	sub	sp, #36	; 0x24
   2c91c:	af00      	add	r7, sp, #0
   2c91e:	60f8      	str	r0, [r7, #12]
   2c920:	60b9      	str	r1, [r7, #8]
   2c922:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c924:	68bb      	ldr	r3, [r7, #8]
   2c926:	2b01      	cmp	r3, #1
   2c928:	d904      	bls.n	2c934 <put_fat+0x1c>
   2c92a:	68fb      	ldr	r3, [r7, #12]
   2c92c:	699a      	ldr	r2, [r3, #24]
   2c92e:	68bb      	ldr	r3, [r7, #8]
   2c930:	429a      	cmp	r2, r3
   2c932:	d804      	bhi.n	2c93e <put_fat+0x26>
		res = FR_INT_ERR;
   2c934:	231f      	movs	r3, #31
   2c936:	18fb      	adds	r3, r7, r3
   2c938:	2202      	movs	r2, #2
   2c93a:	701a      	strb	r2, [r3, #0]
   2c93c:	e100      	b.n	2cb40 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c93e:	68fb      	ldr	r3, [r7, #12]
   2c940:	781b      	ldrb	r3, [r3, #0]
   2c942:	2b02      	cmp	r3, #2
   2c944:	d100      	bne.n	2c948 <put_fat+0x30>
   2c946:	e078      	b.n	2ca3a <put_fat+0x122>
   2c948:	2b03      	cmp	r3, #3
   2c94a:	d100      	bne.n	2c94e <put_fat+0x36>
   2c94c:	e09e      	b.n	2ca8c <put_fat+0x174>
   2c94e:	2b01      	cmp	r3, #1
   2c950:	d000      	beq.n	2c954 <put_fat+0x3c>
   2c952:	e0e6      	b.n	2cb22 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c954:	68bb      	ldr	r3, [r7, #8]
   2c956:	61bb      	str	r3, [r7, #24]
   2c958:	69bb      	ldr	r3, [r7, #24]
   2c95a:	085b      	lsrs	r3, r3, #1
   2c95c:	69ba      	ldr	r2, [r7, #24]
   2c95e:	18d3      	adds	r3, r2, r3
   2c960:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c962:	68fb      	ldr	r3, [r7, #12]
   2c964:	6a1a      	ldr	r2, [r3, #32]
   2c966:	69bb      	ldr	r3, [r7, #24]
   2c968:	0a5b      	lsrs	r3, r3, #9
   2c96a:	18d2      	adds	r2, r2, r3
   2c96c:	231f      	movs	r3, #31
   2c96e:	18fc      	adds	r4, r7, r3
   2c970:	68fb      	ldr	r3, [r7, #12]
   2c972:	0011      	movs	r1, r2
   2c974:	0018      	movs	r0, r3
   2c976:	4b76      	ldr	r3, [pc, #472]	; (2cb50 <put_fat+0x238>)
   2c978:	4798      	blx	r3
   2c97a:	0003      	movs	r3, r0
   2c97c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c97e:	231f      	movs	r3, #31
   2c980:	18fb      	adds	r3, r7, r3
   2c982:	781b      	ldrb	r3, [r3, #0]
   2c984:	2b00      	cmp	r3, #0
   2c986:	d000      	beq.n	2c98a <put_fat+0x72>
   2c988:	e0d0      	b.n	2cb2c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c98a:	69bb      	ldr	r3, [r7, #24]
   2c98c:	05db      	lsls	r3, r3, #23
   2c98e:	0ddb      	lsrs	r3, r3, #23
   2c990:	3330      	adds	r3, #48	; 0x30
   2c992:	68fa      	ldr	r2, [r7, #12]
   2c994:	18d3      	adds	r3, r2, r3
   2c996:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c998:	68bb      	ldr	r3, [r7, #8]
   2c99a:	2201      	movs	r2, #1
   2c99c:	4013      	ands	r3, r2
   2c99e:	d00d      	beq.n	2c9bc <put_fat+0xa4>
   2c9a0:	697b      	ldr	r3, [r7, #20]
   2c9a2:	781b      	ldrb	r3, [r3, #0]
   2c9a4:	b25b      	sxtb	r3, r3
   2c9a6:	220f      	movs	r2, #15
   2c9a8:	4013      	ands	r3, r2
   2c9aa:	b25a      	sxtb	r2, r3
   2c9ac:	687b      	ldr	r3, [r7, #4]
   2c9ae:	b2db      	uxtb	r3, r3
   2c9b0:	011b      	lsls	r3, r3, #4
   2c9b2:	b25b      	sxtb	r3, r3
   2c9b4:	4313      	orrs	r3, r2
   2c9b6:	b25b      	sxtb	r3, r3
   2c9b8:	b2db      	uxtb	r3, r3
   2c9ba:	e001      	b.n	2c9c0 <put_fat+0xa8>
   2c9bc:	687b      	ldr	r3, [r7, #4]
   2c9be:	b2db      	uxtb	r3, r3
   2c9c0:	697a      	ldr	r2, [r7, #20]
   2c9c2:	7013      	strb	r3, [r2, #0]
			bc++;
   2c9c4:	69bb      	ldr	r3, [r7, #24]
   2c9c6:	3301      	adds	r3, #1
   2c9c8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c9ca:	68fb      	ldr	r3, [r7, #12]
   2c9cc:	2201      	movs	r2, #1
   2c9ce:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c9d0:	68fb      	ldr	r3, [r7, #12]
   2c9d2:	6a1a      	ldr	r2, [r3, #32]
   2c9d4:	69bb      	ldr	r3, [r7, #24]
   2c9d6:	0a5b      	lsrs	r3, r3, #9
   2c9d8:	18d2      	adds	r2, r2, r3
   2c9da:	231f      	movs	r3, #31
   2c9dc:	18fc      	adds	r4, r7, r3
   2c9de:	68fb      	ldr	r3, [r7, #12]
   2c9e0:	0011      	movs	r1, r2
   2c9e2:	0018      	movs	r0, r3
   2c9e4:	4b5a      	ldr	r3, [pc, #360]	; (2cb50 <put_fat+0x238>)
   2c9e6:	4798      	blx	r3
   2c9e8:	0003      	movs	r3, r0
   2c9ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9ec:	231f      	movs	r3, #31
   2c9ee:	18fb      	adds	r3, r7, r3
   2c9f0:	781b      	ldrb	r3, [r3, #0]
   2c9f2:	2b00      	cmp	r3, #0
   2c9f4:	d000      	beq.n	2c9f8 <put_fat+0xe0>
   2c9f6:	e09b      	b.n	2cb30 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c9f8:	69bb      	ldr	r3, [r7, #24]
   2c9fa:	05db      	lsls	r3, r3, #23
   2c9fc:	0ddb      	lsrs	r3, r3, #23
   2c9fe:	3330      	adds	r3, #48	; 0x30
   2ca00:	68fa      	ldr	r2, [r7, #12]
   2ca02:	18d3      	adds	r3, r2, r3
   2ca04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2ca06:	68bb      	ldr	r3, [r7, #8]
   2ca08:	2201      	movs	r2, #1
   2ca0a:	4013      	ands	r3, r2
   2ca0c:	d003      	beq.n	2ca16 <put_fat+0xfe>
   2ca0e:	687b      	ldr	r3, [r7, #4]
   2ca10:	091b      	lsrs	r3, r3, #4
   2ca12:	b2db      	uxtb	r3, r3
   2ca14:	e00e      	b.n	2ca34 <put_fat+0x11c>
   2ca16:	697b      	ldr	r3, [r7, #20]
   2ca18:	781b      	ldrb	r3, [r3, #0]
   2ca1a:	b25b      	sxtb	r3, r3
   2ca1c:	220f      	movs	r2, #15
   2ca1e:	4393      	bics	r3, r2
   2ca20:	b25a      	sxtb	r2, r3
   2ca22:	687b      	ldr	r3, [r7, #4]
   2ca24:	0a1b      	lsrs	r3, r3, #8
   2ca26:	b25b      	sxtb	r3, r3
   2ca28:	210f      	movs	r1, #15
   2ca2a:	400b      	ands	r3, r1
   2ca2c:	b25b      	sxtb	r3, r3
   2ca2e:	4313      	orrs	r3, r2
   2ca30:	b25b      	sxtb	r3, r3
   2ca32:	b2db      	uxtb	r3, r3
   2ca34:	697a      	ldr	r2, [r7, #20]
   2ca36:	7013      	strb	r3, [r2, #0]
			break;
   2ca38:	e07f      	b.n	2cb3a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2ca3a:	68fb      	ldr	r3, [r7, #12]
   2ca3c:	6a1a      	ldr	r2, [r3, #32]
   2ca3e:	68bb      	ldr	r3, [r7, #8]
   2ca40:	0a1b      	lsrs	r3, r3, #8
   2ca42:	18d2      	adds	r2, r2, r3
   2ca44:	231f      	movs	r3, #31
   2ca46:	18fc      	adds	r4, r7, r3
   2ca48:	68fb      	ldr	r3, [r7, #12]
   2ca4a:	0011      	movs	r1, r2
   2ca4c:	0018      	movs	r0, r3
   2ca4e:	4b40      	ldr	r3, [pc, #256]	; (2cb50 <put_fat+0x238>)
   2ca50:	4798      	blx	r3
   2ca52:	0003      	movs	r3, r0
   2ca54:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ca56:	231f      	movs	r3, #31
   2ca58:	18fb      	adds	r3, r7, r3
   2ca5a:	781b      	ldrb	r3, [r3, #0]
   2ca5c:	2b00      	cmp	r3, #0
   2ca5e:	d169      	bne.n	2cb34 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2ca60:	68bb      	ldr	r3, [r7, #8]
   2ca62:	005a      	lsls	r2, r3, #1
   2ca64:	23ff      	movs	r3, #255	; 0xff
   2ca66:	005b      	lsls	r3, r3, #1
   2ca68:	4013      	ands	r3, r2
   2ca6a:	3330      	adds	r3, #48	; 0x30
   2ca6c:	68fa      	ldr	r2, [r7, #12]
   2ca6e:	18d3      	adds	r3, r2, r3
   2ca70:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2ca72:	687b      	ldr	r3, [r7, #4]
   2ca74:	b2da      	uxtb	r2, r3
   2ca76:	697b      	ldr	r3, [r7, #20]
   2ca78:	701a      	strb	r2, [r3, #0]
   2ca7a:	697b      	ldr	r3, [r7, #20]
   2ca7c:	3301      	adds	r3, #1
   2ca7e:	687a      	ldr	r2, [r7, #4]
   2ca80:	b292      	uxth	r2, r2
   2ca82:	0a12      	lsrs	r2, r2, #8
   2ca84:	b292      	uxth	r2, r2
   2ca86:	b2d2      	uxtb	r2, r2
   2ca88:	701a      	strb	r2, [r3, #0]
			break;
   2ca8a:	e056      	b.n	2cb3a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ca8c:	68fb      	ldr	r3, [r7, #12]
   2ca8e:	6a1a      	ldr	r2, [r3, #32]
   2ca90:	68bb      	ldr	r3, [r7, #8]
   2ca92:	09db      	lsrs	r3, r3, #7
   2ca94:	18d2      	adds	r2, r2, r3
   2ca96:	231f      	movs	r3, #31
   2ca98:	18fc      	adds	r4, r7, r3
   2ca9a:	68fb      	ldr	r3, [r7, #12]
   2ca9c:	0011      	movs	r1, r2
   2ca9e:	0018      	movs	r0, r3
   2caa0:	4b2b      	ldr	r3, [pc, #172]	; (2cb50 <put_fat+0x238>)
   2caa2:	4798      	blx	r3
   2caa4:	0003      	movs	r3, r0
   2caa6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2caa8:	231f      	movs	r3, #31
   2caaa:	18fb      	adds	r3, r7, r3
   2caac:	781b      	ldrb	r3, [r3, #0]
   2caae:	2b00      	cmp	r3, #0
   2cab0:	d142      	bne.n	2cb38 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2cab2:	68bb      	ldr	r3, [r7, #8]
   2cab4:	009a      	lsls	r2, r3, #2
   2cab6:	23fe      	movs	r3, #254	; 0xfe
   2cab8:	005b      	lsls	r3, r3, #1
   2caba:	4013      	ands	r3, r2
   2cabc:	3330      	adds	r3, #48	; 0x30
   2cabe:	68fa      	ldr	r2, [r7, #12]
   2cac0:	18d3      	adds	r3, r2, r3
   2cac2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2cac4:	697b      	ldr	r3, [r7, #20]
   2cac6:	3303      	adds	r3, #3
   2cac8:	781b      	ldrb	r3, [r3, #0]
   2caca:	061a      	lsls	r2, r3, #24
   2cacc:	697b      	ldr	r3, [r7, #20]
   2cace:	3302      	adds	r3, #2
   2cad0:	781b      	ldrb	r3, [r3, #0]
   2cad2:	041b      	lsls	r3, r3, #16
   2cad4:	4313      	orrs	r3, r2
   2cad6:	697a      	ldr	r2, [r7, #20]
   2cad8:	3201      	adds	r2, #1
   2cada:	7812      	ldrb	r2, [r2, #0]
   2cadc:	0212      	lsls	r2, r2, #8
   2cade:	4313      	orrs	r3, r2
   2cae0:	697a      	ldr	r2, [r7, #20]
   2cae2:	7812      	ldrb	r2, [r2, #0]
   2cae4:	4313      	orrs	r3, r2
   2cae6:	0f1b      	lsrs	r3, r3, #28
   2cae8:	071b      	lsls	r3, r3, #28
   2caea:	687a      	ldr	r2, [r7, #4]
   2caec:	4313      	orrs	r3, r2
   2caee:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2caf0:	687b      	ldr	r3, [r7, #4]
   2caf2:	b2da      	uxtb	r2, r3
   2caf4:	697b      	ldr	r3, [r7, #20]
   2caf6:	701a      	strb	r2, [r3, #0]
   2caf8:	697b      	ldr	r3, [r7, #20]
   2cafa:	3301      	adds	r3, #1
   2cafc:	687a      	ldr	r2, [r7, #4]
   2cafe:	b292      	uxth	r2, r2
   2cb00:	0a12      	lsrs	r2, r2, #8
   2cb02:	b292      	uxth	r2, r2
   2cb04:	b2d2      	uxtb	r2, r2
   2cb06:	701a      	strb	r2, [r3, #0]
   2cb08:	697b      	ldr	r3, [r7, #20]
   2cb0a:	3302      	adds	r3, #2
   2cb0c:	687a      	ldr	r2, [r7, #4]
   2cb0e:	0c12      	lsrs	r2, r2, #16
   2cb10:	b2d2      	uxtb	r2, r2
   2cb12:	701a      	strb	r2, [r3, #0]
   2cb14:	697b      	ldr	r3, [r7, #20]
   2cb16:	3303      	adds	r3, #3
   2cb18:	687a      	ldr	r2, [r7, #4]
   2cb1a:	0e12      	lsrs	r2, r2, #24
   2cb1c:	b2d2      	uxtb	r2, r2
   2cb1e:	701a      	strb	r2, [r3, #0]
			break;
   2cb20:	e00b      	b.n	2cb3a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2cb22:	231f      	movs	r3, #31
   2cb24:	18fb      	adds	r3, r7, r3
   2cb26:	2202      	movs	r2, #2
   2cb28:	701a      	strb	r2, [r3, #0]
   2cb2a:	e006      	b.n	2cb3a <put_fat+0x222>
			if (res != FR_OK) break;
   2cb2c:	46c0      	nop			; (mov r8, r8)
   2cb2e:	e004      	b.n	2cb3a <put_fat+0x222>
			if (res != FR_OK) break;
   2cb30:	46c0      	nop			; (mov r8, r8)
   2cb32:	e002      	b.n	2cb3a <put_fat+0x222>
			if (res != FR_OK) break;
   2cb34:	46c0      	nop			; (mov r8, r8)
   2cb36:	e000      	b.n	2cb3a <put_fat+0x222>
			if (res != FR_OK) break;
   2cb38:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2cb3a:	68fb      	ldr	r3, [r7, #12]
   2cb3c:	2201      	movs	r2, #1
   2cb3e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2cb40:	231f      	movs	r3, #31
   2cb42:	18fb      	adds	r3, r7, r3
   2cb44:	781b      	ldrb	r3, [r3, #0]
}
   2cb46:	0018      	movs	r0, r3
   2cb48:	46bd      	mov	sp, r7
   2cb4a:	b009      	add	sp, #36	; 0x24
   2cb4c:	bd90      	pop	{r4, r7, pc}
   2cb4e:	46c0      	nop			; (mov r8, r8)
   2cb50:	0002c515 	.word	0x0002c515

0002cb54 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2cb54:	b590      	push	{r4, r7, lr}
   2cb56:	b085      	sub	sp, #20
   2cb58:	af00      	add	r7, sp, #0
   2cb5a:	6078      	str	r0, [r7, #4]
   2cb5c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2cb5e:	683b      	ldr	r3, [r7, #0]
   2cb60:	2b01      	cmp	r3, #1
   2cb62:	d904      	bls.n	2cb6e <remove_chain+0x1a>
   2cb64:	687b      	ldr	r3, [r7, #4]
   2cb66:	699a      	ldr	r2, [r3, #24]
   2cb68:	683b      	ldr	r3, [r7, #0]
   2cb6a:	429a      	cmp	r2, r3
   2cb6c:	d804      	bhi.n	2cb78 <remove_chain+0x24>
		res = FR_INT_ERR;
   2cb6e:	230f      	movs	r3, #15
   2cb70:	18fb      	adds	r3, r7, r3
   2cb72:	2202      	movs	r2, #2
   2cb74:	701a      	strb	r2, [r3, #0]
   2cb76:	e045      	b.n	2cc04 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2cb78:	230f      	movs	r3, #15
   2cb7a:	18fb      	adds	r3, r7, r3
   2cb7c:	2200      	movs	r2, #0
   2cb7e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cb80:	e037      	b.n	2cbf2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2cb82:	683a      	ldr	r2, [r7, #0]
   2cb84:	687b      	ldr	r3, [r7, #4]
   2cb86:	0011      	movs	r1, r2
   2cb88:	0018      	movs	r0, r3
   2cb8a:	4b22      	ldr	r3, [pc, #136]	; (2cc14 <remove_chain+0xc0>)
   2cb8c:	4798      	blx	r3
   2cb8e:	0003      	movs	r3, r0
   2cb90:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2cb92:	68bb      	ldr	r3, [r7, #8]
   2cb94:	2b00      	cmp	r3, #0
   2cb96:	d032      	beq.n	2cbfe <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2cb98:	68bb      	ldr	r3, [r7, #8]
   2cb9a:	2b01      	cmp	r3, #1
   2cb9c:	d104      	bne.n	2cba8 <remove_chain+0x54>
   2cb9e:	230f      	movs	r3, #15
   2cba0:	18fb      	adds	r3, r7, r3
   2cba2:	2202      	movs	r2, #2
   2cba4:	701a      	strb	r2, [r3, #0]
   2cba6:	e02d      	b.n	2cc04 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cba8:	68bb      	ldr	r3, [r7, #8]
   2cbaa:	3301      	adds	r3, #1
   2cbac:	d104      	bne.n	2cbb8 <remove_chain+0x64>
   2cbae:	230f      	movs	r3, #15
   2cbb0:	18fb      	adds	r3, r7, r3
   2cbb2:	2201      	movs	r2, #1
   2cbb4:	701a      	strb	r2, [r3, #0]
   2cbb6:	e025      	b.n	2cc04 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cbb8:	230f      	movs	r3, #15
   2cbba:	18fc      	adds	r4, r7, r3
   2cbbc:	6839      	ldr	r1, [r7, #0]
   2cbbe:	687b      	ldr	r3, [r7, #4]
   2cbc0:	2200      	movs	r2, #0
   2cbc2:	0018      	movs	r0, r3
   2cbc4:	4b14      	ldr	r3, [pc, #80]	; (2cc18 <remove_chain+0xc4>)
   2cbc6:	4798      	blx	r3
   2cbc8:	0003      	movs	r3, r0
   2cbca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cbcc:	230f      	movs	r3, #15
   2cbce:	18fb      	adds	r3, r7, r3
   2cbd0:	781b      	ldrb	r3, [r3, #0]
   2cbd2:	2b00      	cmp	r3, #0
   2cbd4:	d115      	bne.n	2cc02 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cbd6:	687b      	ldr	r3, [r7, #4]
   2cbd8:	691b      	ldr	r3, [r3, #16]
   2cbda:	3301      	adds	r3, #1
   2cbdc:	d007      	beq.n	2cbee <remove_chain+0x9a>
				fs->free_clust++;
   2cbde:	687b      	ldr	r3, [r7, #4]
   2cbe0:	691b      	ldr	r3, [r3, #16]
   2cbe2:	1c5a      	adds	r2, r3, #1
   2cbe4:	687b      	ldr	r3, [r7, #4]
   2cbe6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cbe8:	687b      	ldr	r3, [r7, #4]
   2cbea:	2201      	movs	r2, #1
   2cbec:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cbee:	68bb      	ldr	r3, [r7, #8]
   2cbf0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cbf2:	687b      	ldr	r3, [r7, #4]
   2cbf4:	699a      	ldr	r2, [r3, #24]
   2cbf6:	683b      	ldr	r3, [r7, #0]
   2cbf8:	429a      	cmp	r2, r3
   2cbfa:	d8c2      	bhi.n	2cb82 <remove_chain+0x2e>
   2cbfc:	e002      	b.n	2cc04 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cbfe:	46c0      	nop			; (mov r8, r8)
   2cc00:	e000      	b.n	2cc04 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cc02:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cc04:	230f      	movs	r3, #15
   2cc06:	18fb      	adds	r3, r7, r3
   2cc08:	781b      	ldrb	r3, [r3, #0]
}
   2cc0a:	0018      	movs	r0, r3
   2cc0c:	46bd      	mov	sp, r7
   2cc0e:	b005      	add	sp, #20
   2cc10:	bd90      	pop	{r4, r7, pc}
   2cc12:	46c0      	nop			; (mov r8, r8)
   2cc14:	0002c7ad 	.word	0x0002c7ad
   2cc18:	0002c919 	.word	0x0002c919

0002cc1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cc1c:	b590      	push	{r4, r7, lr}
   2cc1e:	b087      	sub	sp, #28
   2cc20:	af00      	add	r7, sp, #0
   2cc22:	6078      	str	r0, [r7, #4]
   2cc24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cc26:	683b      	ldr	r3, [r7, #0]
   2cc28:	2b00      	cmp	r3, #0
   2cc2a:	d10d      	bne.n	2cc48 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cc2c:	687b      	ldr	r3, [r7, #4]
   2cc2e:	68db      	ldr	r3, [r3, #12]
   2cc30:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cc32:	693b      	ldr	r3, [r7, #16]
   2cc34:	2b00      	cmp	r3, #0
   2cc36:	d004      	beq.n	2cc42 <create_chain+0x26>
   2cc38:	687b      	ldr	r3, [r7, #4]
   2cc3a:	699a      	ldr	r2, [r3, #24]
   2cc3c:	693b      	ldr	r3, [r7, #16]
   2cc3e:	429a      	cmp	r2, r3
   2cc40:	d818      	bhi.n	2cc74 <create_chain+0x58>
   2cc42:	2301      	movs	r3, #1
   2cc44:	613b      	str	r3, [r7, #16]
   2cc46:	e015      	b.n	2cc74 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cc48:	683a      	ldr	r2, [r7, #0]
   2cc4a:	687b      	ldr	r3, [r7, #4]
   2cc4c:	0011      	movs	r1, r2
   2cc4e:	0018      	movs	r0, r3
   2cc50:	4b3e      	ldr	r3, [pc, #248]	; (2cd4c <create_chain+0x130>)
   2cc52:	4798      	blx	r3
   2cc54:	0003      	movs	r3, r0
   2cc56:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2cc58:	68bb      	ldr	r3, [r7, #8]
   2cc5a:	2b01      	cmp	r3, #1
   2cc5c:	d801      	bhi.n	2cc62 <create_chain+0x46>
   2cc5e:	2301      	movs	r3, #1
   2cc60:	e070      	b.n	2cd44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2cc62:	687b      	ldr	r3, [r7, #4]
   2cc64:	699a      	ldr	r2, [r3, #24]
   2cc66:	68bb      	ldr	r3, [r7, #8]
   2cc68:	429a      	cmp	r2, r3
   2cc6a:	d901      	bls.n	2cc70 <create_chain+0x54>
   2cc6c:	68bb      	ldr	r3, [r7, #8]
   2cc6e:	e069      	b.n	2cd44 <create_chain+0x128>
		scl = clst;
   2cc70:	683b      	ldr	r3, [r7, #0]
   2cc72:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cc74:	693b      	ldr	r3, [r7, #16]
   2cc76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cc78:	697b      	ldr	r3, [r7, #20]
   2cc7a:	3301      	adds	r3, #1
   2cc7c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cc7e:	687b      	ldr	r3, [r7, #4]
   2cc80:	699a      	ldr	r2, [r3, #24]
   2cc82:	697b      	ldr	r3, [r7, #20]
   2cc84:	429a      	cmp	r2, r3
   2cc86:	d807      	bhi.n	2cc98 <create_chain+0x7c>
			ncl = 2;
   2cc88:	2302      	movs	r3, #2
   2cc8a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cc8c:	697a      	ldr	r2, [r7, #20]
   2cc8e:	693b      	ldr	r3, [r7, #16]
   2cc90:	429a      	cmp	r2, r3
   2cc92:	d901      	bls.n	2cc98 <create_chain+0x7c>
   2cc94:	2300      	movs	r3, #0
   2cc96:	e055      	b.n	2cd44 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cc98:	697a      	ldr	r2, [r7, #20]
   2cc9a:	687b      	ldr	r3, [r7, #4]
   2cc9c:	0011      	movs	r1, r2
   2cc9e:	0018      	movs	r0, r3
   2cca0:	4b2a      	ldr	r3, [pc, #168]	; (2cd4c <create_chain+0x130>)
   2cca2:	4798      	blx	r3
   2cca4:	0003      	movs	r3, r0
   2cca6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cca8:	68bb      	ldr	r3, [r7, #8]
   2ccaa:	2b00      	cmp	r3, #0
   2ccac:	d00d      	beq.n	2ccca <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2ccae:	68bb      	ldr	r3, [r7, #8]
   2ccb0:	3301      	adds	r3, #1
   2ccb2:	d002      	beq.n	2ccba <create_chain+0x9e>
   2ccb4:	68bb      	ldr	r3, [r7, #8]
   2ccb6:	2b01      	cmp	r3, #1
   2ccb8:	d101      	bne.n	2ccbe <create_chain+0xa2>
			return cs;
   2ccba:	68bb      	ldr	r3, [r7, #8]
   2ccbc:	e042      	b.n	2cd44 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2ccbe:	697a      	ldr	r2, [r7, #20]
   2ccc0:	693b      	ldr	r3, [r7, #16]
   2ccc2:	429a      	cmp	r2, r3
   2ccc4:	d1d8      	bne.n	2cc78 <create_chain+0x5c>
   2ccc6:	2300      	movs	r3, #0
   2ccc8:	e03c      	b.n	2cd44 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2ccca:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cccc:	230f      	movs	r3, #15
   2ccce:	18fc      	adds	r4, r7, r3
   2ccd0:	4a1f      	ldr	r2, [pc, #124]	; (2cd50 <create_chain+0x134>)
   2ccd2:	6979      	ldr	r1, [r7, #20]
   2ccd4:	687b      	ldr	r3, [r7, #4]
   2ccd6:	0018      	movs	r0, r3
   2ccd8:	4b1e      	ldr	r3, [pc, #120]	; (2cd54 <create_chain+0x138>)
   2ccda:	4798      	blx	r3
   2ccdc:	0003      	movs	r3, r0
   2ccde:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cce0:	230f      	movs	r3, #15
   2cce2:	18fb      	adds	r3, r7, r3
   2cce4:	781b      	ldrb	r3, [r3, #0]
   2cce6:	2b00      	cmp	r3, #0
   2cce8:	d10c      	bne.n	2cd04 <create_chain+0xe8>
   2ccea:	683b      	ldr	r3, [r7, #0]
   2ccec:	2b00      	cmp	r3, #0
   2ccee:	d009      	beq.n	2cd04 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2ccf0:	230f      	movs	r3, #15
   2ccf2:	18fc      	adds	r4, r7, r3
   2ccf4:	697a      	ldr	r2, [r7, #20]
   2ccf6:	6839      	ldr	r1, [r7, #0]
   2ccf8:	687b      	ldr	r3, [r7, #4]
   2ccfa:	0018      	movs	r0, r3
   2ccfc:	4b15      	ldr	r3, [pc, #84]	; (2cd54 <create_chain+0x138>)
   2ccfe:	4798      	blx	r3
   2cd00:	0003      	movs	r3, r0
   2cd02:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cd04:	230f      	movs	r3, #15
   2cd06:	18fb      	adds	r3, r7, r3
   2cd08:	781b      	ldrb	r3, [r3, #0]
   2cd0a:	2b00      	cmp	r3, #0
   2cd0c:	d10f      	bne.n	2cd2e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cd0e:	687b      	ldr	r3, [r7, #4]
   2cd10:	697a      	ldr	r2, [r7, #20]
   2cd12:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cd14:	687b      	ldr	r3, [r7, #4]
   2cd16:	691b      	ldr	r3, [r3, #16]
   2cd18:	3301      	adds	r3, #1
   2cd1a:	d012      	beq.n	2cd42 <create_chain+0x126>
			fs->free_clust--;
   2cd1c:	687b      	ldr	r3, [r7, #4]
   2cd1e:	691b      	ldr	r3, [r3, #16]
   2cd20:	1e5a      	subs	r2, r3, #1
   2cd22:	687b      	ldr	r3, [r7, #4]
   2cd24:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2cd26:	687b      	ldr	r3, [r7, #4]
   2cd28:	2201      	movs	r2, #1
   2cd2a:	715a      	strb	r2, [r3, #5]
   2cd2c:	e009      	b.n	2cd42 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2cd2e:	230f      	movs	r3, #15
   2cd30:	18fb      	adds	r3, r7, r3
   2cd32:	781b      	ldrb	r3, [r3, #0]
   2cd34:	2b01      	cmp	r3, #1
   2cd36:	d102      	bne.n	2cd3e <create_chain+0x122>
   2cd38:	2301      	movs	r3, #1
   2cd3a:	425b      	negs	r3, r3
   2cd3c:	e000      	b.n	2cd40 <create_chain+0x124>
   2cd3e:	2301      	movs	r3, #1
   2cd40:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2cd42:	697b      	ldr	r3, [r7, #20]
}
   2cd44:	0018      	movs	r0, r3
   2cd46:	46bd      	mov	sp, r7
   2cd48:	b007      	add	sp, #28
   2cd4a:	bd90      	pop	{r4, r7, pc}
   2cd4c:	0002c7ad 	.word	0x0002c7ad
   2cd50:	0fffffff 	.word	0x0fffffff
   2cd54:	0002c919 	.word	0x0002c919

0002cd58 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cd58:	b580      	push	{r7, lr}
   2cd5a:	b084      	sub	sp, #16
   2cd5c:	af00      	add	r7, sp, #0
   2cd5e:	6078      	str	r0, [r7, #4]
   2cd60:	000a      	movs	r2, r1
   2cd62:	1cbb      	adds	r3, r7, #2
   2cd64:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cd66:	687b      	ldr	r3, [r7, #4]
   2cd68:	1cba      	adds	r2, r7, #2
   2cd6a:	8812      	ldrh	r2, [r2, #0]
   2cd6c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2cd6e:	687b      	ldr	r3, [r7, #4]
   2cd70:	689b      	ldr	r3, [r3, #8]
   2cd72:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2cd74:	68fb      	ldr	r3, [r7, #12]
   2cd76:	2b01      	cmp	r3, #1
   2cd78:	d005      	beq.n	2cd86 <dir_sdi+0x2e>
   2cd7a:	687b      	ldr	r3, [r7, #4]
   2cd7c:	681b      	ldr	r3, [r3, #0]
   2cd7e:	699a      	ldr	r2, [r3, #24]
   2cd80:	68fb      	ldr	r3, [r7, #12]
   2cd82:	429a      	cmp	r2, r3
   2cd84:	d801      	bhi.n	2cd8a <dir_sdi+0x32>
		return FR_INT_ERR;
   2cd86:	2302      	movs	r3, #2
   2cd88:	e075      	b.n	2ce76 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2cd8a:	68fb      	ldr	r3, [r7, #12]
   2cd8c:	2b00      	cmp	r3, #0
   2cd8e:	d108      	bne.n	2cda2 <dir_sdi+0x4a>
   2cd90:	687b      	ldr	r3, [r7, #4]
   2cd92:	681b      	ldr	r3, [r3, #0]
   2cd94:	781b      	ldrb	r3, [r3, #0]
   2cd96:	2b03      	cmp	r3, #3
   2cd98:	d103      	bne.n	2cda2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2cd9a:	687b      	ldr	r3, [r7, #4]
   2cd9c:	681b      	ldr	r3, [r3, #0]
   2cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cda0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2cda2:	68fb      	ldr	r3, [r7, #12]
   2cda4:	2b00      	cmp	r3, #0
   2cda6:	d116      	bne.n	2cdd6 <dir_sdi+0x7e>
		dj->clust = clst;
   2cda8:	687b      	ldr	r3, [r7, #4]
   2cdaa:	68fa      	ldr	r2, [r7, #12]
   2cdac:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2cdae:	687b      	ldr	r3, [r7, #4]
   2cdb0:	681b      	ldr	r3, [r3, #0]
   2cdb2:	891b      	ldrh	r3, [r3, #8]
   2cdb4:	1cba      	adds	r2, r7, #2
   2cdb6:	8812      	ldrh	r2, [r2, #0]
   2cdb8:	429a      	cmp	r2, r3
   2cdba:	d301      	bcc.n	2cdc0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2cdbc:	2302      	movs	r3, #2
   2cdbe:	e05a      	b.n	2ce76 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cdc0:	687b      	ldr	r3, [r7, #4]
   2cdc2:	681b      	ldr	r3, [r3, #0]
   2cdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cdc6:	1cba      	adds	r2, r7, #2
   2cdc8:	8812      	ldrh	r2, [r2, #0]
   2cdca:	0912      	lsrs	r2, r2, #4
   2cdcc:	b292      	uxth	r2, r2
   2cdce:	189a      	adds	r2, r3, r2
   2cdd0:	687b      	ldr	r3, [r7, #4]
   2cdd2:	611a      	str	r2, [r3, #16]
   2cdd4:	e042      	b.n	2ce5c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2cdd6:	687b      	ldr	r3, [r7, #4]
   2cdd8:	681b      	ldr	r3, [r3, #0]
   2cdda:	789b      	ldrb	r3, [r3, #2]
   2cddc:	b29a      	uxth	r2, r3
   2cdde:	230a      	movs	r3, #10
   2cde0:	18fb      	adds	r3, r7, r3
   2cde2:	0112      	lsls	r2, r2, #4
   2cde4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cde6:	e020      	b.n	2ce2a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2cde8:	687b      	ldr	r3, [r7, #4]
   2cdea:	681b      	ldr	r3, [r3, #0]
   2cdec:	68fa      	ldr	r2, [r7, #12]
   2cdee:	0011      	movs	r1, r2
   2cdf0:	0018      	movs	r0, r3
   2cdf2:	4b23      	ldr	r3, [pc, #140]	; (2ce80 <dir_sdi+0x128>)
   2cdf4:	4798      	blx	r3
   2cdf6:	0003      	movs	r3, r0
   2cdf8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cdfa:	68fb      	ldr	r3, [r7, #12]
   2cdfc:	3301      	adds	r3, #1
   2cdfe:	d101      	bne.n	2ce04 <dir_sdi+0xac>
   2ce00:	2301      	movs	r3, #1
   2ce02:	e038      	b.n	2ce76 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2ce04:	68fb      	ldr	r3, [r7, #12]
   2ce06:	2b01      	cmp	r3, #1
   2ce08:	d905      	bls.n	2ce16 <dir_sdi+0xbe>
   2ce0a:	687b      	ldr	r3, [r7, #4]
   2ce0c:	681b      	ldr	r3, [r3, #0]
   2ce0e:	699a      	ldr	r2, [r3, #24]
   2ce10:	68fb      	ldr	r3, [r7, #12]
   2ce12:	429a      	cmp	r2, r3
   2ce14:	d801      	bhi.n	2ce1a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2ce16:	2302      	movs	r3, #2
   2ce18:	e02d      	b.n	2ce76 <dir_sdi+0x11e>
			idx -= ic;
   2ce1a:	1cbb      	adds	r3, r7, #2
   2ce1c:	1cb9      	adds	r1, r7, #2
   2ce1e:	220a      	movs	r2, #10
   2ce20:	18ba      	adds	r2, r7, r2
   2ce22:	8809      	ldrh	r1, [r1, #0]
   2ce24:	8812      	ldrh	r2, [r2, #0]
   2ce26:	1a8a      	subs	r2, r1, r2
   2ce28:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2ce2a:	1cba      	adds	r2, r7, #2
   2ce2c:	230a      	movs	r3, #10
   2ce2e:	18fb      	adds	r3, r7, r3
   2ce30:	8812      	ldrh	r2, [r2, #0]
   2ce32:	881b      	ldrh	r3, [r3, #0]
   2ce34:	429a      	cmp	r2, r3
   2ce36:	d2d7      	bcs.n	2cde8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2ce38:	687b      	ldr	r3, [r7, #4]
   2ce3a:	68fa      	ldr	r2, [r7, #12]
   2ce3c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2ce3e:	687b      	ldr	r3, [r7, #4]
   2ce40:	681b      	ldr	r3, [r3, #0]
   2ce42:	68fa      	ldr	r2, [r7, #12]
   2ce44:	0011      	movs	r1, r2
   2ce46:	0018      	movs	r0, r3
   2ce48:	4b0e      	ldr	r3, [pc, #56]	; (2ce84 <dir_sdi+0x12c>)
   2ce4a:	4798      	blx	r3
   2ce4c:	0002      	movs	r2, r0
   2ce4e:	1cbb      	adds	r3, r7, #2
   2ce50:	881b      	ldrh	r3, [r3, #0]
   2ce52:	091b      	lsrs	r3, r3, #4
   2ce54:	b29b      	uxth	r3, r3
   2ce56:	18d2      	adds	r2, r2, r3
   2ce58:	687b      	ldr	r3, [r7, #4]
   2ce5a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2ce5c:	687b      	ldr	r3, [r7, #4]
   2ce5e:	681b      	ldr	r3, [r3, #0]
   2ce60:	3330      	adds	r3, #48	; 0x30
   2ce62:	001a      	movs	r2, r3
   2ce64:	1cbb      	adds	r3, r7, #2
   2ce66:	881b      	ldrh	r3, [r3, #0]
   2ce68:	210f      	movs	r1, #15
   2ce6a:	400b      	ands	r3, r1
   2ce6c:	015b      	lsls	r3, r3, #5
   2ce6e:	18d2      	adds	r2, r2, r3
   2ce70:	687b      	ldr	r3, [r7, #4]
   2ce72:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2ce74:	2300      	movs	r3, #0
}
   2ce76:	0018      	movs	r0, r3
   2ce78:	46bd      	mov	sp, r7
   2ce7a:	b004      	add	sp, #16
   2ce7c:	bd80      	pop	{r7, pc}
   2ce7e:	46c0      	nop			; (mov r8, r8)
   2ce80:	0002c7ad 	.word	0x0002c7ad
   2ce84:	0002c775 	.word	0x0002c775

0002ce88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2ce88:	b590      	push	{r4, r7, lr}
   2ce8a:	b085      	sub	sp, #20
   2ce8c:	af00      	add	r7, sp, #0
   2ce8e:	6078      	str	r0, [r7, #4]
   2ce90:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2ce92:	687b      	ldr	r3, [r7, #4]
   2ce94:	88da      	ldrh	r2, [r3, #6]
   2ce96:	2308      	movs	r3, #8
   2ce98:	18fb      	adds	r3, r7, r3
   2ce9a:	3201      	adds	r2, #1
   2ce9c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2ce9e:	2308      	movs	r3, #8
   2cea0:	18fb      	adds	r3, r7, r3
   2cea2:	881b      	ldrh	r3, [r3, #0]
   2cea4:	2b00      	cmp	r3, #0
   2cea6:	d003      	beq.n	2ceb0 <dir_next+0x28>
   2cea8:	687b      	ldr	r3, [r7, #4]
   2ceaa:	691b      	ldr	r3, [r3, #16]
   2ceac:	2b00      	cmp	r3, #0
   2ceae:	d101      	bne.n	2ceb4 <dir_next+0x2c>
		return FR_NO_FILE;
   2ceb0:	2304      	movs	r3, #4
   2ceb2:	e0d2      	b.n	2d05a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2ceb4:	2308      	movs	r3, #8
   2ceb6:	18fb      	adds	r3, r7, r3
   2ceb8:	881b      	ldrh	r3, [r3, #0]
   2ceba:	220f      	movs	r2, #15
   2cebc:	4013      	ands	r3, r2
   2cebe:	b29b      	uxth	r3, r3
   2cec0:	2b00      	cmp	r3, #0
   2cec2:	d000      	beq.n	2cec6 <dir_next+0x3e>
   2cec4:	e0b6      	b.n	2d034 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2cec6:	687b      	ldr	r3, [r7, #4]
   2cec8:	691b      	ldr	r3, [r3, #16]
   2ceca:	1c5a      	adds	r2, r3, #1
   2cecc:	687b      	ldr	r3, [r7, #4]
   2cece:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2ced0:	687b      	ldr	r3, [r7, #4]
   2ced2:	68db      	ldr	r3, [r3, #12]
   2ced4:	2b00      	cmp	r3, #0
   2ced6:	d10a      	bne.n	2ceee <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2ced8:	687b      	ldr	r3, [r7, #4]
   2ceda:	681b      	ldr	r3, [r3, #0]
   2cedc:	891b      	ldrh	r3, [r3, #8]
   2cede:	2208      	movs	r2, #8
   2cee0:	18ba      	adds	r2, r7, r2
   2cee2:	8812      	ldrh	r2, [r2, #0]
   2cee4:	429a      	cmp	r2, r3
   2cee6:	d200      	bcs.n	2ceea <dir_next+0x62>
   2cee8:	e0a4      	b.n	2d034 <dir_next+0x1ac>
				return FR_NO_FILE;
   2ceea:	2304      	movs	r3, #4
   2ceec:	e0b5      	b.n	2d05a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2ceee:	2308      	movs	r3, #8
   2cef0:	18fb      	adds	r3, r7, r3
   2cef2:	881b      	ldrh	r3, [r3, #0]
   2cef4:	091b      	lsrs	r3, r3, #4
   2cef6:	b29b      	uxth	r3, r3
   2cef8:	001a      	movs	r2, r3
   2cefa:	687b      	ldr	r3, [r7, #4]
   2cefc:	681b      	ldr	r3, [r3, #0]
   2cefe:	789b      	ldrb	r3, [r3, #2]
   2cf00:	3b01      	subs	r3, #1
   2cf02:	4013      	ands	r3, r2
   2cf04:	d000      	beq.n	2cf08 <dir_next+0x80>
   2cf06:	e095      	b.n	2d034 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2cf08:	687b      	ldr	r3, [r7, #4]
   2cf0a:	681a      	ldr	r2, [r3, #0]
   2cf0c:	687b      	ldr	r3, [r7, #4]
   2cf0e:	68db      	ldr	r3, [r3, #12]
   2cf10:	0019      	movs	r1, r3
   2cf12:	0010      	movs	r0, r2
   2cf14:	4b53      	ldr	r3, [pc, #332]	; (2d064 <dir_next+0x1dc>)
   2cf16:	4798      	blx	r3
   2cf18:	0003      	movs	r3, r0
   2cf1a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2cf1c:	68fb      	ldr	r3, [r7, #12]
   2cf1e:	2b01      	cmp	r3, #1
   2cf20:	d801      	bhi.n	2cf26 <dir_next+0x9e>
   2cf22:	2302      	movs	r3, #2
   2cf24:	e099      	b.n	2d05a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cf26:	68fb      	ldr	r3, [r7, #12]
   2cf28:	3301      	adds	r3, #1
   2cf2a:	d101      	bne.n	2cf30 <dir_next+0xa8>
   2cf2c:	2301      	movs	r3, #1
   2cf2e:	e094      	b.n	2d05a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2cf30:	687b      	ldr	r3, [r7, #4]
   2cf32:	681b      	ldr	r3, [r3, #0]
   2cf34:	699a      	ldr	r2, [r3, #24]
   2cf36:	68fb      	ldr	r3, [r7, #12]
   2cf38:	429a      	cmp	r2, r3
   2cf3a:	d900      	bls.n	2cf3e <dir_next+0xb6>
   2cf3c:	e06d      	b.n	2d01a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2cf3e:	683b      	ldr	r3, [r7, #0]
   2cf40:	2b00      	cmp	r3, #0
   2cf42:	d101      	bne.n	2cf48 <dir_next+0xc0>
   2cf44:	2304      	movs	r3, #4
   2cf46:	e088      	b.n	2d05a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2cf48:	687b      	ldr	r3, [r7, #4]
   2cf4a:	681a      	ldr	r2, [r3, #0]
   2cf4c:	687b      	ldr	r3, [r7, #4]
   2cf4e:	68db      	ldr	r3, [r3, #12]
   2cf50:	0019      	movs	r1, r3
   2cf52:	0010      	movs	r0, r2
   2cf54:	4b44      	ldr	r3, [pc, #272]	; (2d068 <dir_next+0x1e0>)
   2cf56:	4798      	blx	r3
   2cf58:	0003      	movs	r3, r0
   2cf5a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2cf5c:	68fb      	ldr	r3, [r7, #12]
   2cf5e:	2b00      	cmp	r3, #0
   2cf60:	d101      	bne.n	2cf66 <dir_next+0xde>
   2cf62:	2307      	movs	r3, #7
   2cf64:	e079      	b.n	2d05a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2cf66:	68fb      	ldr	r3, [r7, #12]
   2cf68:	2b01      	cmp	r3, #1
   2cf6a:	d101      	bne.n	2cf70 <dir_next+0xe8>
   2cf6c:	2302      	movs	r3, #2
   2cf6e:	e074      	b.n	2d05a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cf70:	68fb      	ldr	r3, [r7, #12]
   2cf72:	3301      	adds	r3, #1
   2cf74:	d101      	bne.n	2cf7a <dir_next+0xf2>
   2cf76:	2301      	movs	r3, #1
   2cf78:	e06f      	b.n	2d05a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2cf7a:	687b      	ldr	r3, [r7, #4]
   2cf7c:	681b      	ldr	r3, [r3, #0]
   2cf7e:	2100      	movs	r1, #0
   2cf80:	0018      	movs	r0, r3
   2cf82:	4b3a      	ldr	r3, [pc, #232]	; (2d06c <dir_next+0x1e4>)
   2cf84:	4798      	blx	r3
   2cf86:	1e03      	subs	r3, r0, #0
   2cf88:	d001      	beq.n	2cf8e <dir_next+0x106>
   2cf8a:	2301      	movs	r3, #1
   2cf8c:	e065      	b.n	2d05a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2cf8e:	687b      	ldr	r3, [r7, #4]
   2cf90:	681b      	ldr	r3, [r3, #0]
   2cf92:	3330      	adds	r3, #48	; 0x30
   2cf94:	0018      	movs	r0, r3
   2cf96:	2380      	movs	r3, #128	; 0x80
   2cf98:	009b      	lsls	r3, r3, #2
   2cf9a:	001a      	movs	r2, r3
   2cf9c:	2100      	movs	r1, #0
   2cf9e:	4b34      	ldr	r3, [pc, #208]	; (2d070 <dir_next+0x1e8>)
   2cfa0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2cfa2:	687b      	ldr	r3, [r7, #4]
   2cfa4:	681c      	ldr	r4, [r3, #0]
   2cfa6:	687b      	ldr	r3, [r7, #4]
   2cfa8:	681b      	ldr	r3, [r3, #0]
   2cfaa:	68fa      	ldr	r2, [r7, #12]
   2cfac:	0011      	movs	r1, r2
   2cfae:	0018      	movs	r0, r3
   2cfb0:	4b30      	ldr	r3, [pc, #192]	; (2d074 <dir_next+0x1ec>)
   2cfb2:	4798      	blx	r3
   2cfb4:	0003      	movs	r3, r0
   2cfb6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cfb8:	230b      	movs	r3, #11
   2cfba:	18fb      	adds	r3, r7, r3
   2cfbc:	2200      	movs	r2, #0
   2cfbe:	701a      	strb	r2, [r3, #0]
   2cfc0:	e019      	b.n	2cff6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2cfc2:	687b      	ldr	r3, [r7, #4]
   2cfc4:	681b      	ldr	r3, [r3, #0]
   2cfc6:	2201      	movs	r2, #1
   2cfc8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2cfca:	687b      	ldr	r3, [r7, #4]
   2cfcc:	681b      	ldr	r3, [r3, #0]
   2cfce:	2100      	movs	r1, #0
   2cfd0:	0018      	movs	r0, r3
   2cfd2:	4b26      	ldr	r3, [pc, #152]	; (2d06c <dir_next+0x1e4>)
   2cfd4:	4798      	blx	r3
   2cfd6:	1e03      	subs	r3, r0, #0
   2cfd8:	d001      	beq.n	2cfde <dir_next+0x156>
   2cfda:	2301      	movs	r3, #1
   2cfdc:	e03d      	b.n	2d05a <dir_next+0x1d2>
						dj->fs->winsect++;
   2cfde:	687b      	ldr	r3, [r7, #4]
   2cfe0:	681b      	ldr	r3, [r3, #0]
   2cfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cfe4:	3201      	adds	r2, #1
   2cfe6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cfe8:	230b      	movs	r3, #11
   2cfea:	18fb      	adds	r3, r7, r3
   2cfec:	781a      	ldrb	r2, [r3, #0]
   2cfee:	230b      	movs	r3, #11
   2cff0:	18fb      	adds	r3, r7, r3
   2cff2:	3201      	adds	r2, #1
   2cff4:	701a      	strb	r2, [r3, #0]
   2cff6:	687b      	ldr	r3, [r7, #4]
   2cff8:	681b      	ldr	r3, [r3, #0]
   2cffa:	789b      	ldrb	r3, [r3, #2]
   2cffc:	220b      	movs	r2, #11
   2cffe:	18ba      	adds	r2, r7, r2
   2d000:	7812      	ldrb	r2, [r2, #0]
   2d002:	429a      	cmp	r2, r3
   2d004:	d3dd      	bcc.n	2cfc2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2d006:	687b      	ldr	r3, [r7, #4]
   2d008:	681b      	ldr	r3, [r3, #0]
   2d00a:	687a      	ldr	r2, [r7, #4]
   2d00c:	6812      	ldr	r2, [r2, #0]
   2d00e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2d010:	220b      	movs	r2, #11
   2d012:	18ba      	adds	r2, r7, r2
   2d014:	7812      	ldrb	r2, [r2, #0]
   2d016:	1a8a      	subs	r2, r1, r2
   2d018:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2d01a:	687b      	ldr	r3, [r7, #4]
   2d01c:	68fa      	ldr	r2, [r7, #12]
   2d01e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2d020:	687b      	ldr	r3, [r7, #4]
   2d022:	681b      	ldr	r3, [r3, #0]
   2d024:	68fa      	ldr	r2, [r7, #12]
   2d026:	0011      	movs	r1, r2
   2d028:	0018      	movs	r0, r3
   2d02a:	4b12      	ldr	r3, [pc, #72]	; (2d074 <dir_next+0x1ec>)
   2d02c:	4798      	blx	r3
   2d02e:	0002      	movs	r2, r0
   2d030:	687b      	ldr	r3, [r7, #4]
   2d032:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2d034:	687b      	ldr	r3, [r7, #4]
   2d036:	2208      	movs	r2, #8
   2d038:	18ba      	adds	r2, r7, r2
   2d03a:	8812      	ldrh	r2, [r2, #0]
   2d03c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2d03e:	687b      	ldr	r3, [r7, #4]
   2d040:	681b      	ldr	r3, [r3, #0]
   2d042:	3330      	adds	r3, #48	; 0x30
   2d044:	001a      	movs	r2, r3
   2d046:	2308      	movs	r3, #8
   2d048:	18fb      	adds	r3, r7, r3
   2d04a:	881b      	ldrh	r3, [r3, #0]
   2d04c:	210f      	movs	r1, #15
   2d04e:	400b      	ands	r3, r1
   2d050:	015b      	lsls	r3, r3, #5
   2d052:	18d2      	adds	r2, r2, r3
   2d054:	687b      	ldr	r3, [r7, #4]
   2d056:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2d058:	2300      	movs	r3, #0
}
   2d05a:	0018      	movs	r0, r3
   2d05c:	46bd      	mov	sp, r7
   2d05e:	b005      	add	sp, #20
   2d060:	bd90      	pop	{r4, r7, pc}
   2d062:	46c0      	nop			; (mov r8, r8)
   2d064:	0002c7ad 	.word	0x0002c7ad
   2d068:	0002cc1d 	.word	0x0002cc1d
   2d06c:	0002c515 	.word	0x0002c515
   2d070:	0002c469 	.word	0x0002c469
   2d074:	0002c775 	.word	0x0002c775

0002d078 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2d078:	b590      	push	{r4, r7, lr}
   2d07a:	b087      	sub	sp, #28
   2d07c:	af00      	add	r7, sp, #0
   2d07e:	6078      	str	r0, [r7, #4]
   2d080:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2d082:	683b      	ldr	r3, [r7, #0]
   2d084:	781b      	ldrb	r3, [r3, #0]
   2d086:	001a      	movs	r2, r3
   2d088:	2340      	movs	r3, #64	; 0x40
   2d08a:	439a      	bics	r2, r3
   2d08c:	0013      	movs	r3, r2
   2d08e:	1e5a      	subs	r2, r3, #1
   2d090:	0013      	movs	r3, r2
   2d092:	005b      	lsls	r3, r3, #1
   2d094:	189b      	adds	r3, r3, r2
   2d096:	009b      	lsls	r3, r3, #2
   2d098:	189b      	adds	r3, r3, r2
   2d09a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2d09c:	2300      	movs	r3, #0
   2d09e:	613b      	str	r3, [r7, #16]
   2d0a0:	230e      	movs	r3, #14
   2d0a2:	18fb      	adds	r3, r7, r3
   2d0a4:	2201      	movs	r2, #1
   2d0a6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2d0a8:	4a31      	ldr	r2, [pc, #196]	; (2d170 <cmp_lfn+0xf8>)
   2d0aa:	693b      	ldr	r3, [r7, #16]
   2d0ac:	18d3      	adds	r3, r2, r3
   2d0ae:	781b      	ldrb	r3, [r3, #0]
   2d0b0:	3301      	adds	r3, #1
   2d0b2:	683a      	ldr	r2, [r7, #0]
   2d0b4:	18d3      	adds	r3, r2, r3
   2d0b6:	781b      	ldrb	r3, [r3, #0]
   2d0b8:	021b      	lsls	r3, r3, #8
   2d0ba:	b21a      	sxth	r2, r3
   2d0bc:	492c      	ldr	r1, [pc, #176]	; (2d170 <cmp_lfn+0xf8>)
   2d0be:	693b      	ldr	r3, [r7, #16]
   2d0c0:	18cb      	adds	r3, r1, r3
   2d0c2:	781b      	ldrb	r3, [r3, #0]
   2d0c4:	0019      	movs	r1, r3
   2d0c6:	683b      	ldr	r3, [r7, #0]
   2d0c8:	185b      	adds	r3, r3, r1
   2d0ca:	781b      	ldrb	r3, [r3, #0]
   2d0cc:	b21b      	sxth	r3, r3
   2d0ce:	4313      	orrs	r3, r2
   2d0d0:	b21a      	sxth	r2, r3
   2d0d2:	230c      	movs	r3, #12
   2d0d4:	18fb      	adds	r3, r7, r3
   2d0d6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2d0d8:	230e      	movs	r3, #14
   2d0da:	18fb      	adds	r3, r7, r3
   2d0dc:	881b      	ldrh	r3, [r3, #0]
   2d0de:	2b00      	cmp	r3, #0
   2d0e0:	d01f      	beq.n	2d122 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d0e2:	230e      	movs	r3, #14
   2d0e4:	18fc      	adds	r4, r7, r3
   2d0e6:	230c      	movs	r3, #12
   2d0e8:	18fb      	adds	r3, r7, r3
   2d0ea:	881b      	ldrh	r3, [r3, #0]
   2d0ec:	0018      	movs	r0, r3
   2d0ee:	4b21      	ldr	r3, [pc, #132]	; (2d174 <cmp_lfn+0xfc>)
   2d0f0:	4798      	blx	r3
   2d0f2:	0003      	movs	r3, r0
   2d0f4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d0f6:	697b      	ldr	r3, [r7, #20]
   2d0f8:	2bfe      	cmp	r3, #254	; 0xfe
   2d0fa:	d810      	bhi.n	2d11e <cmp_lfn+0xa6>
   2d0fc:	697b      	ldr	r3, [r7, #20]
   2d0fe:	1c5a      	adds	r2, r3, #1
   2d100:	617a      	str	r2, [r7, #20]
   2d102:	005b      	lsls	r3, r3, #1
   2d104:	687a      	ldr	r2, [r7, #4]
   2d106:	18d3      	adds	r3, r2, r3
   2d108:	881b      	ldrh	r3, [r3, #0]
   2d10a:	0018      	movs	r0, r3
   2d10c:	4b19      	ldr	r3, [pc, #100]	; (2d174 <cmp_lfn+0xfc>)
   2d10e:	4798      	blx	r3
   2d110:	0003      	movs	r3, r0
   2d112:	001a      	movs	r2, r3
   2d114:	230e      	movs	r3, #14
   2d116:	18fb      	adds	r3, r7, r3
   2d118:	881b      	ldrh	r3, [r3, #0]
   2d11a:	4293      	cmp	r3, r2
   2d11c:	d009      	beq.n	2d132 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d11e:	2300      	movs	r3, #0
   2d120:	e022      	b.n	2d168 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d122:	230c      	movs	r3, #12
   2d124:	18fb      	adds	r3, r7, r3
   2d126:	881b      	ldrh	r3, [r3, #0]
   2d128:	4a13      	ldr	r2, [pc, #76]	; (2d178 <cmp_lfn+0x100>)
   2d12a:	4293      	cmp	r3, r2
   2d12c:	d001      	beq.n	2d132 <cmp_lfn+0xba>
   2d12e:	2300      	movs	r3, #0
   2d130:	e01a      	b.n	2d168 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d132:	693b      	ldr	r3, [r7, #16]
   2d134:	3301      	adds	r3, #1
   2d136:	613b      	str	r3, [r7, #16]
   2d138:	693b      	ldr	r3, [r7, #16]
   2d13a:	2b0c      	cmp	r3, #12
   2d13c:	d9b4      	bls.n	2d0a8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d13e:	683b      	ldr	r3, [r7, #0]
   2d140:	781b      	ldrb	r3, [r3, #0]
   2d142:	001a      	movs	r2, r3
   2d144:	2340      	movs	r3, #64	; 0x40
   2d146:	4013      	ands	r3, r2
   2d148:	d00d      	beq.n	2d166 <cmp_lfn+0xee>
   2d14a:	230e      	movs	r3, #14
   2d14c:	18fb      	adds	r3, r7, r3
   2d14e:	881b      	ldrh	r3, [r3, #0]
   2d150:	2b00      	cmp	r3, #0
   2d152:	d008      	beq.n	2d166 <cmp_lfn+0xee>
   2d154:	697b      	ldr	r3, [r7, #20]
   2d156:	005b      	lsls	r3, r3, #1
   2d158:	687a      	ldr	r2, [r7, #4]
   2d15a:	18d3      	adds	r3, r2, r3
   2d15c:	881b      	ldrh	r3, [r3, #0]
   2d15e:	2b00      	cmp	r3, #0
   2d160:	d001      	beq.n	2d166 <cmp_lfn+0xee>
		return 0;
   2d162:	2300      	movs	r3, #0
   2d164:	e000      	b.n	2d168 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d166:	2301      	movs	r3, #1
}
   2d168:	0018      	movs	r0, r3
   2d16a:	46bd      	mov	sp, r7
   2d16c:	b007      	add	sp, #28
   2d16e:	bd90      	pop	{r4, r7, pc}
   2d170:	0003a66c 	.word	0x0003a66c
   2d174:	0002f125 	.word	0x0002f125
   2d178:	0000ffff 	.word	0x0000ffff

0002d17c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d17c:	b580      	push	{r7, lr}
   2d17e:	b088      	sub	sp, #32
   2d180:	af00      	add	r7, sp, #0
   2d182:	60f8      	str	r0, [r7, #12]
   2d184:	60b9      	str	r1, [r7, #8]
   2d186:	0019      	movs	r1, r3
   2d188:	1dfb      	adds	r3, r7, #7
   2d18a:	701a      	strb	r2, [r3, #0]
   2d18c:	1dbb      	adds	r3, r7, #6
   2d18e:	1c0a      	adds	r2, r1, #0
   2d190:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d192:	68bb      	ldr	r3, [r7, #8]
   2d194:	330d      	adds	r3, #13
   2d196:	1dba      	adds	r2, r7, #6
   2d198:	7812      	ldrb	r2, [r2, #0]
   2d19a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d19c:	68bb      	ldr	r3, [r7, #8]
   2d19e:	330b      	adds	r3, #11
   2d1a0:	220f      	movs	r2, #15
   2d1a2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d1a4:	68bb      	ldr	r3, [r7, #8]
   2d1a6:	330c      	adds	r3, #12
   2d1a8:	2200      	movs	r2, #0
   2d1aa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d1ac:	68bb      	ldr	r3, [r7, #8]
   2d1ae:	331a      	adds	r3, #26
   2d1b0:	2200      	movs	r2, #0
   2d1b2:	701a      	strb	r2, [r3, #0]
   2d1b4:	68bb      	ldr	r3, [r7, #8]
   2d1b6:	331b      	adds	r3, #27
   2d1b8:	2200      	movs	r2, #0
   2d1ba:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d1bc:	1dfb      	adds	r3, r7, #7
   2d1be:	781b      	ldrb	r3, [r3, #0]
   2d1c0:	1e5a      	subs	r2, r3, #1
   2d1c2:	0013      	movs	r3, r2
   2d1c4:	005b      	lsls	r3, r3, #1
   2d1c6:	189b      	adds	r3, r3, r2
   2d1c8:	009b      	lsls	r3, r3, #2
   2d1ca:	189b      	adds	r3, r3, r2
   2d1cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d1ce:	2316      	movs	r3, #22
   2d1d0:	18fb      	adds	r3, r7, r3
   2d1d2:	2200      	movs	r2, #0
   2d1d4:	801a      	strh	r2, [r3, #0]
   2d1d6:	2300      	movs	r3, #0
   2d1d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d1da:	2316      	movs	r3, #22
   2d1dc:	18fb      	adds	r3, r7, r3
   2d1de:	881b      	ldrh	r3, [r3, #0]
   2d1e0:	4a28      	ldr	r2, [pc, #160]	; (2d284 <fit_lfn+0x108>)
   2d1e2:	4293      	cmp	r3, r2
   2d1e4:	d009      	beq.n	2d1fa <fit_lfn+0x7e>
   2d1e6:	69fb      	ldr	r3, [r7, #28]
   2d1e8:	1c5a      	adds	r2, r3, #1
   2d1ea:	61fa      	str	r2, [r7, #28]
   2d1ec:	005b      	lsls	r3, r3, #1
   2d1ee:	68fa      	ldr	r2, [r7, #12]
   2d1f0:	18d2      	adds	r2, r2, r3
   2d1f2:	2316      	movs	r3, #22
   2d1f4:	18fb      	adds	r3, r7, r3
   2d1f6:	8812      	ldrh	r2, [r2, #0]
   2d1f8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d1fa:	4a23      	ldr	r2, [pc, #140]	; (2d288 <fit_lfn+0x10c>)
   2d1fc:	69bb      	ldr	r3, [r7, #24]
   2d1fe:	18d3      	adds	r3, r2, r3
   2d200:	781b      	ldrb	r3, [r3, #0]
   2d202:	001a      	movs	r2, r3
   2d204:	68bb      	ldr	r3, [r7, #8]
   2d206:	189b      	adds	r3, r3, r2
   2d208:	2216      	movs	r2, #22
   2d20a:	18ba      	adds	r2, r7, r2
   2d20c:	8812      	ldrh	r2, [r2, #0]
   2d20e:	b2d2      	uxtb	r2, r2
   2d210:	701a      	strb	r2, [r3, #0]
   2d212:	4a1d      	ldr	r2, [pc, #116]	; (2d288 <fit_lfn+0x10c>)
   2d214:	69bb      	ldr	r3, [r7, #24]
   2d216:	18d3      	adds	r3, r2, r3
   2d218:	781b      	ldrb	r3, [r3, #0]
   2d21a:	3301      	adds	r3, #1
   2d21c:	68ba      	ldr	r2, [r7, #8]
   2d21e:	18d3      	adds	r3, r2, r3
   2d220:	2216      	movs	r2, #22
   2d222:	18ba      	adds	r2, r7, r2
   2d224:	8812      	ldrh	r2, [r2, #0]
   2d226:	0a12      	lsrs	r2, r2, #8
   2d228:	b292      	uxth	r2, r2
   2d22a:	b2d2      	uxtb	r2, r2
   2d22c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d22e:	2316      	movs	r3, #22
   2d230:	18fb      	adds	r3, r7, r3
   2d232:	881b      	ldrh	r3, [r3, #0]
   2d234:	2b00      	cmp	r3, #0
   2d236:	d104      	bne.n	2d242 <fit_lfn+0xc6>
   2d238:	2316      	movs	r3, #22
   2d23a:	18fb      	adds	r3, r7, r3
   2d23c:	2201      	movs	r2, #1
   2d23e:	4252      	negs	r2, r2
   2d240:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d242:	69bb      	ldr	r3, [r7, #24]
   2d244:	3301      	adds	r3, #1
   2d246:	61bb      	str	r3, [r7, #24]
   2d248:	69bb      	ldr	r3, [r7, #24]
   2d24a:	2b0c      	cmp	r3, #12
   2d24c:	d9c5      	bls.n	2d1da <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d24e:	2316      	movs	r3, #22
   2d250:	18fb      	adds	r3, r7, r3
   2d252:	881b      	ldrh	r3, [r3, #0]
   2d254:	4a0b      	ldr	r2, [pc, #44]	; (2d284 <fit_lfn+0x108>)
   2d256:	4293      	cmp	r3, r2
   2d258:	d006      	beq.n	2d268 <fit_lfn+0xec>
   2d25a:	69fb      	ldr	r3, [r7, #28]
   2d25c:	005b      	lsls	r3, r3, #1
   2d25e:	68fa      	ldr	r2, [r7, #12]
   2d260:	18d3      	adds	r3, r2, r3
   2d262:	881b      	ldrh	r3, [r3, #0]
   2d264:	2b00      	cmp	r3, #0
   2d266:	d105      	bne.n	2d274 <fit_lfn+0xf8>
   2d268:	1dfb      	adds	r3, r7, #7
   2d26a:	1dfa      	adds	r2, r7, #7
   2d26c:	7812      	ldrb	r2, [r2, #0]
   2d26e:	2140      	movs	r1, #64	; 0x40
   2d270:	430a      	orrs	r2, r1
   2d272:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d274:	68bb      	ldr	r3, [r7, #8]
   2d276:	1dfa      	adds	r2, r7, #7
   2d278:	7812      	ldrb	r2, [r2, #0]
   2d27a:	701a      	strb	r2, [r3, #0]
}
   2d27c:	46c0      	nop			; (mov r8, r8)
   2d27e:	46bd      	mov	sp, r7
   2d280:	b008      	add	sp, #32
   2d282:	bd80      	pop	{r7, pc}
   2d284:	0000ffff 	.word	0x0000ffff
   2d288:	0003a66c 	.word	0x0003a66c

0002d28c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d28c:	b580      	push	{r7, lr}
   2d28e:	b08a      	sub	sp, #40	; 0x28
   2d290:	af00      	add	r7, sp, #0
   2d292:	60f8      	str	r0, [r7, #12]
   2d294:	60b9      	str	r1, [r7, #8]
   2d296:	607a      	str	r2, [r7, #4]
   2d298:	001a      	movs	r2, r3
   2d29a:	1cbb      	adds	r3, r7, #2
   2d29c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d29e:	68b9      	ldr	r1, [r7, #8]
   2d2a0:	68fb      	ldr	r3, [r7, #12]
   2d2a2:	220b      	movs	r2, #11
   2d2a4:	0018      	movs	r0, r3
   2d2a6:	4b38      	ldr	r3, [pc, #224]	; (2d388 <gen_numname+0xfc>)
   2d2a8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d2aa:	1cbb      	adds	r3, r7, #2
   2d2ac:	881b      	ldrh	r3, [r3, #0]
   2d2ae:	2b05      	cmp	r3, #5
   2d2b0:	d911      	bls.n	2d2d6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d2b2:	1cbb      	adds	r3, r7, #2
   2d2b4:	881b      	ldrh	r3, [r3, #0]
   2d2b6:	b29a      	uxth	r2, r3
   2d2b8:	0852      	lsrs	r2, r2, #1
   2d2ba:	03db      	lsls	r3, r3, #15
   2d2bc:	4313      	orrs	r3, r2
   2d2be:	b299      	uxth	r1, r3
   2d2c0:	687b      	ldr	r3, [r7, #4]
   2d2c2:	1c9a      	adds	r2, r3, #2
   2d2c4:	607a      	str	r2, [r7, #4]
   2d2c6:	881a      	ldrh	r2, [r3, #0]
   2d2c8:	1cbb      	adds	r3, r7, #2
   2d2ca:	188a      	adds	r2, r1, r2
   2d2cc:	801a      	strh	r2, [r3, #0]
   2d2ce:	687b      	ldr	r3, [r7, #4]
   2d2d0:	881b      	ldrh	r3, [r3, #0]
   2d2d2:	2b00      	cmp	r3, #0
   2d2d4:	d1ed      	bne.n	2d2b2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d2d6:	2307      	movs	r3, #7
   2d2d8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d2da:	1cbb      	adds	r3, r7, #2
   2d2dc:	881b      	ldrh	r3, [r3, #0]
   2d2de:	b2db      	uxtb	r3, r3
   2d2e0:	220f      	movs	r2, #15
   2d2e2:	4013      	ands	r3, r2
   2d2e4:	b2da      	uxtb	r2, r3
   2d2e6:	2327      	movs	r3, #39	; 0x27
   2d2e8:	18fb      	adds	r3, r7, r3
   2d2ea:	3230      	adds	r2, #48	; 0x30
   2d2ec:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d2ee:	2327      	movs	r3, #39	; 0x27
   2d2f0:	18fb      	adds	r3, r7, r3
   2d2f2:	781b      	ldrb	r3, [r3, #0]
   2d2f4:	2b39      	cmp	r3, #57	; 0x39
   2d2f6:	d906      	bls.n	2d306 <gen_numname+0x7a>
   2d2f8:	2327      	movs	r3, #39	; 0x27
   2d2fa:	18fb      	adds	r3, r7, r3
   2d2fc:	2227      	movs	r2, #39	; 0x27
   2d2fe:	18ba      	adds	r2, r7, r2
   2d300:	7812      	ldrb	r2, [r2, #0]
   2d302:	3207      	adds	r2, #7
   2d304:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d306:	6a3b      	ldr	r3, [r7, #32]
   2d308:	1e5a      	subs	r2, r3, #1
   2d30a:	623a      	str	r2, [r7, #32]
   2d30c:	2214      	movs	r2, #20
   2d30e:	18ba      	adds	r2, r7, r2
   2d310:	2127      	movs	r1, #39	; 0x27
   2d312:	1879      	adds	r1, r7, r1
   2d314:	7809      	ldrb	r1, [r1, #0]
   2d316:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d318:	1cbb      	adds	r3, r7, #2
   2d31a:	1cba      	adds	r2, r7, #2
   2d31c:	8812      	ldrh	r2, [r2, #0]
   2d31e:	0912      	lsrs	r2, r2, #4
   2d320:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d322:	1cbb      	adds	r3, r7, #2
   2d324:	881b      	ldrh	r3, [r3, #0]
   2d326:	2b00      	cmp	r3, #0
   2d328:	d1d7      	bne.n	2d2da <gen_numname+0x4e>
	ns[i] = '~';
   2d32a:	2314      	movs	r3, #20
   2d32c:	18fa      	adds	r2, r7, r3
   2d32e:	6a3b      	ldr	r3, [r7, #32]
   2d330:	18d3      	adds	r3, r2, r3
   2d332:	227e      	movs	r2, #126	; 0x7e
   2d334:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d336:	2300      	movs	r3, #0
   2d338:	61fb      	str	r3, [r7, #28]
   2d33a:	e002      	b.n	2d342 <gen_numname+0xb6>
   2d33c:	69fb      	ldr	r3, [r7, #28]
   2d33e:	3301      	adds	r3, #1
   2d340:	61fb      	str	r3, [r7, #28]
   2d342:	69fa      	ldr	r2, [r7, #28]
   2d344:	6a3b      	ldr	r3, [r7, #32]
   2d346:	429a      	cmp	r2, r3
   2d348:	d205      	bcs.n	2d356 <gen_numname+0xca>
   2d34a:	68fa      	ldr	r2, [r7, #12]
   2d34c:	69fb      	ldr	r3, [r7, #28]
   2d34e:	18d3      	adds	r3, r2, r3
   2d350:	781b      	ldrb	r3, [r3, #0]
   2d352:	2b20      	cmp	r3, #32
   2d354:	d1f2      	bne.n	2d33c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d356:	69fb      	ldr	r3, [r7, #28]
   2d358:	1c5a      	adds	r2, r3, #1
   2d35a:	61fa      	str	r2, [r7, #28]
   2d35c:	68fa      	ldr	r2, [r7, #12]
   2d35e:	18d2      	adds	r2, r2, r3
   2d360:	6a3b      	ldr	r3, [r7, #32]
   2d362:	2b07      	cmp	r3, #7
   2d364:	d806      	bhi.n	2d374 <gen_numname+0xe8>
   2d366:	6a3b      	ldr	r3, [r7, #32]
   2d368:	1c59      	adds	r1, r3, #1
   2d36a:	6239      	str	r1, [r7, #32]
   2d36c:	2114      	movs	r1, #20
   2d36e:	1879      	adds	r1, r7, r1
   2d370:	5ccb      	ldrb	r3, [r1, r3]
   2d372:	e000      	b.n	2d376 <gen_numname+0xea>
   2d374:	2320      	movs	r3, #32
   2d376:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d378:	69fb      	ldr	r3, [r7, #28]
   2d37a:	2b07      	cmp	r3, #7
   2d37c:	d9eb      	bls.n	2d356 <gen_numname+0xca>
}
   2d37e:	46c0      	nop			; (mov r8, r8)
   2d380:	46bd      	mov	sp, r7
   2d382:	b00a      	add	sp, #40	; 0x28
   2d384:	bd80      	pop	{r7, pc}
   2d386:	46c0      	nop			; (mov r8, r8)
   2d388:	0002c431 	.word	0x0002c431

0002d38c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d38c:	b580      	push	{r7, lr}
   2d38e:	b084      	sub	sp, #16
   2d390:	af00      	add	r7, sp, #0
   2d392:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d394:	230f      	movs	r3, #15
   2d396:	18fb      	adds	r3, r7, r3
   2d398:	2200      	movs	r2, #0
   2d39a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d39c:	230b      	movs	r3, #11
   2d39e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d3a0:	230f      	movs	r3, #15
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	781b      	ldrb	r3, [r3, #0]
   2d3a6:	b2da      	uxtb	r2, r3
   2d3a8:	0852      	lsrs	r2, r2, #1
   2d3aa:	01db      	lsls	r3, r3, #7
   2d3ac:	4313      	orrs	r3, r2
   2d3ae:	b2d9      	uxtb	r1, r3
   2d3b0:	687b      	ldr	r3, [r7, #4]
   2d3b2:	1c5a      	adds	r2, r3, #1
   2d3b4:	607a      	str	r2, [r7, #4]
   2d3b6:	781a      	ldrb	r2, [r3, #0]
   2d3b8:	230f      	movs	r3, #15
   2d3ba:	18fb      	adds	r3, r7, r3
   2d3bc:	188a      	adds	r2, r1, r2
   2d3be:	701a      	strb	r2, [r3, #0]
   2d3c0:	68bb      	ldr	r3, [r7, #8]
   2d3c2:	3b01      	subs	r3, #1
   2d3c4:	60bb      	str	r3, [r7, #8]
   2d3c6:	68bb      	ldr	r3, [r7, #8]
   2d3c8:	2b00      	cmp	r3, #0
   2d3ca:	d1e9      	bne.n	2d3a0 <sum_sfn+0x14>
	return sum;
   2d3cc:	230f      	movs	r3, #15
   2d3ce:	18fb      	adds	r3, r7, r3
   2d3d0:	781b      	ldrb	r3, [r3, #0]
}
   2d3d2:	0018      	movs	r0, r3
   2d3d4:	46bd      	mov	sp, r7
   2d3d6:	b004      	add	sp, #16
   2d3d8:	bd80      	pop	{r7, pc}
	...

0002d3dc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d3dc:	b590      	push	{r4, r7, lr}
   2d3de:	b087      	sub	sp, #28
   2d3e0:	af00      	add	r7, sp, #0
   2d3e2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d3e4:	2317      	movs	r3, #23
   2d3e6:	18fc      	adds	r4, r7, r3
   2d3e8:	687b      	ldr	r3, [r7, #4]
   2d3ea:	2100      	movs	r1, #0
   2d3ec:	0018      	movs	r0, r3
   2d3ee:	4b74      	ldr	r3, [pc, #464]	; (2d5c0 <dir_find+0x1e4>)
   2d3f0:	4798      	blx	r3
   2d3f2:	0003      	movs	r3, r0
   2d3f4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d3f6:	2317      	movs	r3, #23
   2d3f8:	18fb      	adds	r3, r7, r3
   2d3fa:	781b      	ldrb	r3, [r3, #0]
   2d3fc:	2b00      	cmp	r3, #0
   2d3fe:	d003      	beq.n	2d408 <dir_find+0x2c>
   2d400:	2317      	movs	r3, #23
   2d402:	18fb      	adds	r3, r7, r3
   2d404:	781b      	ldrb	r3, [r3, #0]
   2d406:	e0d6      	b.n	2d5b6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d408:	2314      	movs	r3, #20
   2d40a:	18fb      	adds	r3, r7, r3
   2d40c:	22ff      	movs	r2, #255	; 0xff
   2d40e:	701a      	strb	r2, [r3, #0]
   2d410:	2315      	movs	r3, #21
   2d412:	18fb      	adds	r3, r7, r3
   2d414:	2214      	movs	r2, #20
   2d416:	18ba      	adds	r2, r7, r2
   2d418:	7812      	ldrb	r2, [r2, #0]
   2d41a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d41c:	687b      	ldr	r3, [r7, #4]
   2d41e:	681a      	ldr	r2, [r3, #0]
   2d420:	687b      	ldr	r3, [r7, #4]
   2d422:	691b      	ldr	r3, [r3, #16]
   2d424:	2117      	movs	r1, #23
   2d426:	187c      	adds	r4, r7, r1
   2d428:	0019      	movs	r1, r3
   2d42a:	0010      	movs	r0, r2
   2d42c:	4b65      	ldr	r3, [pc, #404]	; (2d5c4 <dir_find+0x1e8>)
   2d42e:	4798      	blx	r3
   2d430:	0003      	movs	r3, r0
   2d432:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d434:	2317      	movs	r3, #23
   2d436:	18fb      	adds	r3, r7, r3
   2d438:	781b      	ldrb	r3, [r3, #0]
   2d43a:	2b00      	cmp	r3, #0
   2d43c:	d000      	beq.n	2d440 <dir_find+0x64>
   2d43e:	e0b2      	b.n	2d5a6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d440:	687b      	ldr	r3, [r7, #4]
   2d442:	695b      	ldr	r3, [r3, #20]
   2d444:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d446:	2316      	movs	r3, #22
   2d448:	18fb      	adds	r3, r7, r3
   2d44a:	693a      	ldr	r2, [r7, #16]
   2d44c:	7812      	ldrb	r2, [r2, #0]
   2d44e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d450:	2316      	movs	r3, #22
   2d452:	18fb      	adds	r3, r7, r3
   2d454:	781b      	ldrb	r3, [r3, #0]
   2d456:	2b00      	cmp	r3, #0
   2d458:	d104      	bne.n	2d464 <dir_find+0x88>
   2d45a:	2317      	movs	r3, #23
   2d45c:	18fb      	adds	r3, r7, r3
   2d45e:	2204      	movs	r2, #4
   2d460:	701a      	strb	r2, [r3, #0]
   2d462:	e0a5      	b.n	2d5b0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d464:	693b      	ldr	r3, [r7, #16]
   2d466:	330b      	adds	r3, #11
   2d468:	781a      	ldrb	r2, [r3, #0]
   2d46a:	230f      	movs	r3, #15
   2d46c:	18fb      	adds	r3, r7, r3
   2d46e:	213f      	movs	r1, #63	; 0x3f
   2d470:	400a      	ands	r2, r1
   2d472:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d474:	2316      	movs	r3, #22
   2d476:	18fb      	adds	r3, r7, r3
   2d478:	781b      	ldrb	r3, [r3, #0]
   2d47a:	2be5      	cmp	r3, #229	; 0xe5
   2d47c:	d00a      	beq.n	2d494 <dir_find+0xb8>
   2d47e:	230f      	movs	r3, #15
   2d480:	18fb      	adds	r3, r7, r3
   2d482:	781b      	ldrb	r3, [r3, #0]
   2d484:	2208      	movs	r2, #8
   2d486:	4013      	ands	r3, r2
   2d488:	d009      	beq.n	2d49e <dir_find+0xc2>
   2d48a:	230f      	movs	r3, #15
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	781b      	ldrb	r3, [r3, #0]
   2d490:	2b0f      	cmp	r3, #15
   2d492:	d004      	beq.n	2d49e <dir_find+0xc2>
			ord = 0xFF;
   2d494:	2315      	movs	r3, #21
   2d496:	18fb      	adds	r3, r7, r3
   2d498:	22ff      	movs	r2, #255	; 0xff
   2d49a:	701a      	strb	r2, [r3, #0]
   2d49c:	e073      	b.n	2d586 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d49e:	230f      	movs	r3, #15
   2d4a0:	18fb      	adds	r3, r7, r3
   2d4a2:	781b      	ldrb	r3, [r3, #0]
   2d4a4:	2b0f      	cmp	r3, #15
   2d4a6:	d145      	bne.n	2d534 <dir_find+0x158>
				if (dj->lfn) {
   2d4a8:	687b      	ldr	r3, [r7, #4]
   2d4aa:	69db      	ldr	r3, [r3, #28]
   2d4ac:	2b00      	cmp	r3, #0
   2d4ae:	d100      	bne.n	2d4b2 <dir_find+0xd6>
   2d4b0:	e069      	b.n	2d586 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d4b2:	2316      	movs	r3, #22
   2d4b4:	18fb      	adds	r3, r7, r3
   2d4b6:	781b      	ldrb	r3, [r3, #0]
   2d4b8:	2240      	movs	r2, #64	; 0x40
   2d4ba:	4013      	ands	r3, r2
   2d4bc:	d016      	beq.n	2d4ec <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d4be:	2314      	movs	r3, #20
   2d4c0:	18fb      	adds	r3, r7, r3
   2d4c2:	693a      	ldr	r2, [r7, #16]
   2d4c4:	7b52      	ldrb	r2, [r2, #13]
   2d4c6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d4c8:	2316      	movs	r3, #22
   2d4ca:	18fb      	adds	r3, r7, r3
   2d4cc:	2216      	movs	r2, #22
   2d4ce:	18ba      	adds	r2, r7, r2
   2d4d0:	7812      	ldrb	r2, [r2, #0]
   2d4d2:	2140      	movs	r1, #64	; 0x40
   2d4d4:	438a      	bics	r2, r1
   2d4d6:	701a      	strb	r2, [r3, #0]
   2d4d8:	2315      	movs	r3, #21
   2d4da:	18fb      	adds	r3, r7, r3
   2d4dc:	2216      	movs	r2, #22
   2d4de:	18ba      	adds	r2, r7, r2
   2d4e0:	7812      	ldrb	r2, [r2, #0]
   2d4e2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d4e4:	687b      	ldr	r3, [r7, #4]
   2d4e6:	88da      	ldrh	r2, [r3, #6]
   2d4e8:	687b      	ldr	r3, [r7, #4]
   2d4ea:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d4ec:	2316      	movs	r3, #22
   2d4ee:	18fa      	adds	r2, r7, r3
   2d4f0:	2315      	movs	r3, #21
   2d4f2:	18fb      	adds	r3, r7, r3
   2d4f4:	7812      	ldrb	r2, [r2, #0]
   2d4f6:	781b      	ldrb	r3, [r3, #0]
   2d4f8:	429a      	cmp	r2, r3
   2d4fa:	d116      	bne.n	2d52a <dir_find+0x14e>
   2d4fc:	693b      	ldr	r3, [r7, #16]
   2d4fe:	330d      	adds	r3, #13
   2d500:	781b      	ldrb	r3, [r3, #0]
   2d502:	2214      	movs	r2, #20
   2d504:	18ba      	adds	r2, r7, r2
   2d506:	7812      	ldrb	r2, [r2, #0]
   2d508:	429a      	cmp	r2, r3
   2d50a:	d10e      	bne.n	2d52a <dir_find+0x14e>
   2d50c:	687b      	ldr	r3, [r7, #4]
   2d50e:	69db      	ldr	r3, [r3, #28]
   2d510:	693a      	ldr	r2, [r7, #16]
   2d512:	0011      	movs	r1, r2
   2d514:	0018      	movs	r0, r3
   2d516:	4b2c      	ldr	r3, [pc, #176]	; (2d5c8 <dir_find+0x1ec>)
   2d518:	4798      	blx	r3
   2d51a:	1e03      	subs	r3, r0, #0
   2d51c:	d005      	beq.n	2d52a <dir_find+0x14e>
   2d51e:	2315      	movs	r3, #21
   2d520:	18fb      	adds	r3, r7, r3
   2d522:	781b      	ldrb	r3, [r3, #0]
   2d524:	3b01      	subs	r3, #1
   2d526:	b2da      	uxtb	r2, r3
   2d528:	e000      	b.n	2d52c <dir_find+0x150>
   2d52a:	22ff      	movs	r2, #255	; 0xff
   2d52c:	2315      	movs	r3, #21
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	701a      	strb	r2, [r3, #0]
   2d532:	e028      	b.n	2d586 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d534:	2315      	movs	r3, #21
   2d536:	18fb      	adds	r3, r7, r3
   2d538:	781b      	ldrb	r3, [r3, #0]
   2d53a:	2b00      	cmp	r3, #0
   2d53c:	d10a      	bne.n	2d554 <dir_find+0x178>
   2d53e:	693b      	ldr	r3, [r7, #16]
   2d540:	0018      	movs	r0, r3
   2d542:	4b22      	ldr	r3, [pc, #136]	; (2d5cc <dir_find+0x1f0>)
   2d544:	4798      	blx	r3
   2d546:	0003      	movs	r3, r0
   2d548:	001a      	movs	r2, r3
   2d54a:	2314      	movs	r3, #20
   2d54c:	18fb      	adds	r3, r7, r3
   2d54e:	781b      	ldrb	r3, [r3, #0]
   2d550:	4293      	cmp	r3, r2
   2d552:	d02a      	beq.n	2d5aa <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d554:	2315      	movs	r3, #21
   2d556:	18fb      	adds	r3, r7, r3
   2d558:	22ff      	movs	r2, #255	; 0xff
   2d55a:	701a      	strb	r2, [r3, #0]
   2d55c:	687b      	ldr	r3, [r7, #4]
   2d55e:	2201      	movs	r2, #1
   2d560:	4252      	negs	r2, r2
   2d562:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d564:	687b      	ldr	r3, [r7, #4]
   2d566:	699b      	ldr	r3, [r3, #24]
   2d568:	330b      	adds	r3, #11
   2d56a:	781b      	ldrb	r3, [r3, #0]
   2d56c:	001a      	movs	r2, r3
   2d56e:	2301      	movs	r3, #1
   2d570:	4013      	ands	r3, r2
   2d572:	d108      	bne.n	2d586 <dir_find+0x1aa>
   2d574:	687b      	ldr	r3, [r7, #4]
   2d576:	6999      	ldr	r1, [r3, #24]
   2d578:	693b      	ldr	r3, [r7, #16]
   2d57a:	220b      	movs	r2, #11
   2d57c:	0018      	movs	r0, r3
   2d57e:	4b14      	ldr	r3, [pc, #80]	; (2d5d0 <dir_find+0x1f4>)
   2d580:	4798      	blx	r3
   2d582:	1e03      	subs	r3, r0, #0
   2d584:	d013      	beq.n	2d5ae <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d586:	2317      	movs	r3, #23
   2d588:	18fc      	adds	r4, r7, r3
   2d58a:	687b      	ldr	r3, [r7, #4]
   2d58c:	2100      	movs	r1, #0
   2d58e:	0018      	movs	r0, r3
   2d590:	4b10      	ldr	r3, [pc, #64]	; (2d5d4 <dir_find+0x1f8>)
   2d592:	4798      	blx	r3
   2d594:	0003      	movs	r3, r0
   2d596:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d598:	2317      	movs	r3, #23
   2d59a:	18fb      	adds	r3, r7, r3
   2d59c:	781b      	ldrb	r3, [r3, #0]
   2d59e:	2b00      	cmp	r3, #0
   2d5a0:	d100      	bne.n	2d5a4 <dir_find+0x1c8>
   2d5a2:	e73b      	b.n	2d41c <dir_find+0x40>
   2d5a4:	e004      	b.n	2d5b0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d5a6:	46c0      	nop			; (mov r8, r8)
   2d5a8:	e002      	b.n	2d5b0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d5aa:	46c0      	nop			; (mov r8, r8)
   2d5ac:	e000      	b.n	2d5b0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d5ae:	46c0      	nop			; (mov r8, r8)

	return res;
   2d5b0:	2317      	movs	r3, #23
   2d5b2:	18fb      	adds	r3, r7, r3
   2d5b4:	781b      	ldrb	r3, [r3, #0]
}
   2d5b6:	0018      	movs	r0, r3
   2d5b8:	46bd      	mov	sp, r7
   2d5ba:	b007      	add	sp, #28
   2d5bc:	bd90      	pop	{r4, r7, pc}
   2d5be:	46c0      	nop			; (mov r8, r8)
   2d5c0:	0002cd59 	.word	0x0002cd59
   2d5c4:	0002c515 	.word	0x0002c515
   2d5c8:	0002d079 	.word	0x0002d079
   2d5cc:	0002d38d 	.word	0x0002d38d
   2d5d0:	0002c499 	.word	0x0002c499
   2d5d4:	0002ce89 	.word	0x0002ce89

0002d5d8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d5d8:	b590      	push	{r4, r7, lr}
   2d5da:	b08d      	sub	sp, #52	; 0x34
   2d5dc:	af00      	add	r7, sp, #0
   2d5de:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d5e0:	687b      	ldr	r3, [r7, #4]
   2d5e2:	699b      	ldr	r3, [r3, #24]
   2d5e4:	627b      	str	r3, [r7, #36]	; 0x24
   2d5e6:	687b      	ldr	r3, [r7, #4]
   2d5e8:	69db      	ldr	r3, [r3, #28]
   2d5ea:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d5ee:	230c      	movs	r3, #12
   2d5f0:	18fb      	adds	r3, r7, r3
   2d5f2:	220c      	movs	r2, #12
   2d5f4:	0018      	movs	r0, r3
   2d5f6:	4bc8      	ldr	r3, [pc, #800]	; (2d918 <dir_register+0x340>)
   2d5f8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d5fa:	230c      	movs	r3, #12
   2d5fc:	18fb      	adds	r3, r7, r3
   2d5fe:	7adb      	ldrb	r3, [r3, #11]
   2d600:	001a      	movs	r2, r3
   2d602:	2301      	movs	r3, #1
   2d604:	4013      	ands	r3, r2
   2d606:	d048      	beq.n	2d69a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d60a:	330b      	adds	r3, #11
   2d60c:	2200      	movs	r2, #0
   2d60e:	701a      	strb	r2, [r3, #0]
   2d610:	687b      	ldr	r3, [r7, #4]
   2d612:	2200      	movs	r2, #0
   2d614:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d616:	232c      	movs	r3, #44	; 0x2c
   2d618:	18fb      	adds	r3, r7, r3
   2d61a:	2201      	movs	r2, #1
   2d61c:	801a      	strh	r2, [r3, #0]
   2d61e:	e01c      	b.n	2d65a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d620:	232c      	movs	r3, #44	; 0x2c
   2d622:	18fb      	adds	r3, r7, r3
   2d624:	881b      	ldrh	r3, [r3, #0]
   2d626:	6a3a      	ldr	r2, [r7, #32]
   2d628:	210c      	movs	r1, #12
   2d62a:	1879      	adds	r1, r7, r1
   2d62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d62e:	4cbb      	ldr	r4, [pc, #748]	; (2d91c <dir_register+0x344>)
   2d630:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d632:	232f      	movs	r3, #47	; 0x2f
   2d634:	18fc      	adds	r4, r7, r3
   2d636:	687b      	ldr	r3, [r7, #4]
   2d638:	0018      	movs	r0, r3
   2d63a:	4bb9      	ldr	r3, [pc, #740]	; (2d920 <dir_register+0x348>)
   2d63c:	4798      	blx	r3
   2d63e:	0003      	movs	r3, r0
   2d640:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d642:	232f      	movs	r3, #47	; 0x2f
   2d644:	18fb      	adds	r3, r7, r3
   2d646:	781b      	ldrb	r3, [r3, #0]
   2d648:	2b00      	cmp	r3, #0
   2d64a:	d10c      	bne.n	2d666 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d64c:	232c      	movs	r3, #44	; 0x2c
   2d64e:	18fb      	adds	r3, r7, r3
   2d650:	881a      	ldrh	r2, [r3, #0]
   2d652:	232c      	movs	r3, #44	; 0x2c
   2d654:	18fb      	adds	r3, r7, r3
   2d656:	3201      	adds	r2, #1
   2d658:	801a      	strh	r2, [r3, #0]
   2d65a:	232c      	movs	r3, #44	; 0x2c
   2d65c:	18fb      	adds	r3, r7, r3
   2d65e:	881b      	ldrh	r3, [r3, #0]
   2d660:	2b63      	cmp	r3, #99	; 0x63
   2d662:	d9dd      	bls.n	2d620 <dir_register+0x48>
   2d664:	e000      	b.n	2d668 <dir_register+0x90>
			if (res != FR_OK) break;
   2d666:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d668:	232c      	movs	r3, #44	; 0x2c
   2d66a:	18fb      	adds	r3, r7, r3
   2d66c:	881b      	ldrh	r3, [r3, #0]
   2d66e:	2b64      	cmp	r3, #100	; 0x64
   2d670:	d101      	bne.n	2d676 <dir_register+0x9e>
   2d672:	2307      	movs	r3, #7
   2d674:	e14c      	b.n	2d910 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d676:	232f      	movs	r3, #47	; 0x2f
   2d678:	18fb      	adds	r3, r7, r3
   2d67a:	781b      	ldrb	r3, [r3, #0]
   2d67c:	2b04      	cmp	r3, #4
   2d67e:	d003      	beq.n	2d688 <dir_register+0xb0>
   2d680:	232f      	movs	r3, #47	; 0x2f
   2d682:	18fb      	adds	r3, r7, r3
   2d684:	781b      	ldrb	r3, [r3, #0]
   2d686:	e143      	b.n	2d910 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d68a:	330b      	adds	r3, #11
   2d68c:	220c      	movs	r2, #12
   2d68e:	18ba      	adds	r2, r7, r2
   2d690:	7ad2      	ldrb	r2, [r2, #11]
   2d692:	701a      	strb	r2, [r3, #0]
   2d694:	687b      	ldr	r3, [r7, #4]
   2d696:	6a3a      	ldr	r2, [r7, #32]
   2d698:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d69a:	230c      	movs	r3, #12
   2d69c:	18fb      	adds	r3, r7, r3
   2d69e:	7adb      	ldrb	r3, [r3, #11]
   2d6a0:	001a      	movs	r2, r3
   2d6a2:	2302      	movs	r3, #2
   2d6a4:	4013      	ands	r3, r2
   2d6a6:	d023      	beq.n	2d6f0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d6a8:	232a      	movs	r3, #42	; 0x2a
   2d6aa:	18fb      	adds	r3, r7, r3
   2d6ac:	2200      	movs	r2, #0
   2d6ae:	801a      	strh	r2, [r3, #0]
   2d6b0:	e006      	b.n	2d6c0 <dir_register+0xe8>
   2d6b2:	232a      	movs	r3, #42	; 0x2a
   2d6b4:	18fb      	adds	r3, r7, r3
   2d6b6:	881a      	ldrh	r2, [r3, #0]
   2d6b8:	232a      	movs	r3, #42	; 0x2a
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	3201      	adds	r2, #1
   2d6be:	801a      	strh	r2, [r3, #0]
   2d6c0:	232a      	movs	r3, #42	; 0x2a
   2d6c2:	18fb      	adds	r3, r7, r3
   2d6c4:	881b      	ldrh	r3, [r3, #0]
   2d6c6:	005b      	lsls	r3, r3, #1
   2d6c8:	6a3a      	ldr	r2, [r7, #32]
   2d6ca:	18d3      	adds	r3, r2, r3
   2d6cc:	881b      	ldrh	r3, [r3, #0]
   2d6ce:	2b00      	cmp	r3, #0
   2d6d0:	d1ef      	bne.n	2d6b2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d6d2:	232a      	movs	r3, #42	; 0x2a
   2d6d4:	18fb      	adds	r3, r7, r3
   2d6d6:	881b      	ldrh	r3, [r3, #0]
   2d6d8:	3319      	adds	r3, #25
   2d6da:	001a      	movs	r2, r3
   2d6dc:	4b91      	ldr	r3, [pc, #580]	; (2d924 <dir_register+0x34c>)
   2d6de:	210d      	movs	r1, #13
   2d6e0:	0010      	movs	r0, r2
   2d6e2:	4798      	blx	r3
   2d6e4:	0003      	movs	r3, r0
   2d6e6:	001a      	movs	r2, r3
   2d6e8:	232a      	movs	r3, #42	; 0x2a
   2d6ea:	18fb      	adds	r3, r7, r3
   2d6ec:	801a      	strh	r2, [r3, #0]
   2d6ee:	e003      	b.n	2d6f8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d6f0:	232a      	movs	r3, #42	; 0x2a
   2d6f2:	18fb      	adds	r3, r7, r3
   2d6f4:	2201      	movs	r2, #1
   2d6f6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d6f8:	232f      	movs	r3, #47	; 0x2f
   2d6fa:	18fc      	adds	r4, r7, r3
   2d6fc:	687b      	ldr	r3, [r7, #4]
   2d6fe:	2100      	movs	r1, #0
   2d700:	0018      	movs	r0, r3
   2d702:	4b89      	ldr	r3, [pc, #548]	; (2d928 <dir_register+0x350>)
   2d704:	4798      	blx	r3
   2d706:	0003      	movs	r3, r0
   2d708:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d70a:	232f      	movs	r3, #47	; 0x2f
   2d70c:	18fb      	adds	r3, r7, r3
   2d70e:	781b      	ldrb	r3, [r3, #0]
   2d710:	2b00      	cmp	r3, #0
   2d712:	d003      	beq.n	2d71c <dir_register+0x144>
   2d714:	232f      	movs	r3, #47	; 0x2f
   2d716:	18fb      	adds	r3, r7, r3
   2d718:	781b      	ldrb	r3, [r3, #0]
   2d71a:	e0f9      	b.n	2d910 <dir_register+0x338>
	n = is = 0;
   2d71c:	2328      	movs	r3, #40	; 0x28
   2d71e:	18fb      	adds	r3, r7, r3
   2d720:	2200      	movs	r2, #0
   2d722:	801a      	strh	r2, [r3, #0]
   2d724:	232c      	movs	r3, #44	; 0x2c
   2d726:	18fb      	adds	r3, r7, r3
   2d728:	2228      	movs	r2, #40	; 0x28
   2d72a:	18ba      	adds	r2, r7, r2
   2d72c:	8812      	ldrh	r2, [r2, #0]
   2d72e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d730:	687b      	ldr	r3, [r7, #4]
   2d732:	681a      	ldr	r2, [r3, #0]
   2d734:	687b      	ldr	r3, [r7, #4]
   2d736:	691b      	ldr	r3, [r3, #16]
   2d738:	212f      	movs	r1, #47	; 0x2f
   2d73a:	187c      	adds	r4, r7, r1
   2d73c:	0019      	movs	r1, r3
   2d73e:	0010      	movs	r0, r2
   2d740:	4b7a      	ldr	r3, [pc, #488]	; (2d92c <dir_register+0x354>)
   2d742:	4798      	blx	r3
   2d744:	0003      	movs	r3, r0
   2d746:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d748:	232f      	movs	r3, #47	; 0x2f
   2d74a:	18fb      	adds	r3, r7, r3
   2d74c:	781b      	ldrb	r3, [r3, #0]
   2d74e:	2b00      	cmp	r3, #0
   2d750:	d13c      	bne.n	2d7cc <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d752:	687b      	ldr	r3, [r7, #4]
   2d754:	695a      	ldr	r2, [r3, #20]
   2d756:	231f      	movs	r3, #31
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	7812      	ldrb	r2, [r2, #0]
   2d75c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d75e:	231f      	movs	r3, #31
   2d760:	18fb      	adds	r3, r7, r3
   2d762:	781b      	ldrb	r3, [r3, #0]
   2d764:	2be5      	cmp	r3, #229	; 0xe5
   2d766:	d004      	beq.n	2d772 <dir_register+0x19a>
   2d768:	231f      	movs	r3, #31
   2d76a:	18fb      	adds	r3, r7, r3
   2d76c:	781b      	ldrb	r3, [r3, #0]
   2d76e:	2b00      	cmp	r3, #0
   2d770:	d119      	bne.n	2d7a6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d772:	232c      	movs	r3, #44	; 0x2c
   2d774:	18fb      	adds	r3, r7, r3
   2d776:	881b      	ldrh	r3, [r3, #0]
   2d778:	2b00      	cmp	r3, #0
   2d77a:	d104      	bne.n	2d786 <dir_register+0x1ae>
   2d77c:	2328      	movs	r3, #40	; 0x28
   2d77e:	18fb      	adds	r3, r7, r3
   2d780:	687a      	ldr	r2, [r7, #4]
   2d782:	88d2      	ldrh	r2, [r2, #6]
   2d784:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d786:	232c      	movs	r3, #44	; 0x2c
   2d788:	18fb      	adds	r3, r7, r3
   2d78a:	222c      	movs	r2, #44	; 0x2c
   2d78c:	18ba      	adds	r2, r7, r2
   2d78e:	8812      	ldrh	r2, [r2, #0]
   2d790:	3201      	adds	r2, #1
   2d792:	801a      	strh	r2, [r3, #0]
   2d794:	232c      	movs	r3, #44	; 0x2c
   2d796:	18fa      	adds	r2, r7, r3
   2d798:	232a      	movs	r3, #42	; 0x2a
   2d79a:	18fb      	adds	r3, r7, r3
   2d79c:	8812      	ldrh	r2, [r2, #0]
   2d79e:	881b      	ldrh	r3, [r3, #0]
   2d7a0:	429a      	cmp	r2, r3
   2d7a2:	d104      	bne.n	2d7ae <dir_register+0x1d6>
   2d7a4:	e013      	b.n	2d7ce <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d7a6:	232c      	movs	r3, #44	; 0x2c
   2d7a8:	18fb      	adds	r3, r7, r3
   2d7aa:	2200      	movs	r2, #0
   2d7ac:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d7ae:	232f      	movs	r3, #47	; 0x2f
   2d7b0:	18fc      	adds	r4, r7, r3
   2d7b2:	687b      	ldr	r3, [r7, #4]
   2d7b4:	2101      	movs	r1, #1
   2d7b6:	0018      	movs	r0, r3
   2d7b8:	4b5d      	ldr	r3, [pc, #372]	; (2d930 <dir_register+0x358>)
   2d7ba:	4798      	blx	r3
   2d7bc:	0003      	movs	r3, r0
   2d7be:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d7c0:	232f      	movs	r3, #47	; 0x2f
   2d7c2:	18fb      	adds	r3, r7, r3
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	2b00      	cmp	r3, #0
   2d7c8:	d0b2      	beq.n	2d730 <dir_register+0x158>
   2d7ca:	e000      	b.n	2d7ce <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d7cc:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d7ce:	232f      	movs	r3, #47	; 0x2f
   2d7d0:	18fb      	adds	r3, r7, r3
   2d7d2:	781b      	ldrb	r3, [r3, #0]
   2d7d4:	2b00      	cmp	r3, #0
   2d7d6:	d163      	bne.n	2d8a0 <dir_register+0x2c8>
   2d7d8:	232a      	movs	r3, #42	; 0x2a
   2d7da:	18fb      	adds	r3, r7, r3
   2d7dc:	881b      	ldrh	r3, [r3, #0]
   2d7de:	2b01      	cmp	r3, #1
   2d7e0:	d95e      	bls.n	2d8a0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d7e2:	232f      	movs	r3, #47	; 0x2f
   2d7e4:	18fc      	adds	r4, r7, r3
   2d7e6:	2328      	movs	r3, #40	; 0x28
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	881a      	ldrh	r2, [r3, #0]
   2d7ec:	687b      	ldr	r3, [r7, #4]
   2d7ee:	0011      	movs	r1, r2
   2d7f0:	0018      	movs	r0, r3
   2d7f2:	4b4d      	ldr	r3, [pc, #308]	; (2d928 <dir_register+0x350>)
   2d7f4:	4798      	blx	r3
   2d7f6:	0003      	movs	r3, r0
   2d7f8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d7fa:	232f      	movs	r3, #47	; 0x2f
   2d7fc:	18fb      	adds	r3, r7, r3
   2d7fe:	781b      	ldrb	r3, [r3, #0]
   2d800:	2b00      	cmp	r3, #0
   2d802:	d14d      	bne.n	2d8a0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d804:	687b      	ldr	r3, [r7, #4]
   2d806:	699b      	ldr	r3, [r3, #24]
   2d808:	221e      	movs	r2, #30
   2d80a:	18bc      	adds	r4, r7, r2
   2d80c:	0018      	movs	r0, r3
   2d80e:	4b49      	ldr	r3, [pc, #292]	; (2d934 <dir_register+0x35c>)
   2d810:	4798      	blx	r3
   2d812:	0003      	movs	r3, r0
   2d814:	7023      	strb	r3, [r4, #0]
			ne--;
   2d816:	232a      	movs	r3, #42	; 0x2a
   2d818:	18fb      	adds	r3, r7, r3
   2d81a:	881a      	ldrh	r2, [r3, #0]
   2d81c:	232a      	movs	r3, #42	; 0x2a
   2d81e:	18fb      	adds	r3, r7, r3
   2d820:	3a01      	subs	r2, #1
   2d822:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d824:	687b      	ldr	r3, [r7, #4]
   2d826:	681a      	ldr	r2, [r3, #0]
   2d828:	687b      	ldr	r3, [r7, #4]
   2d82a:	691b      	ldr	r3, [r3, #16]
   2d82c:	212f      	movs	r1, #47	; 0x2f
   2d82e:	187c      	adds	r4, r7, r1
   2d830:	0019      	movs	r1, r3
   2d832:	0010      	movs	r0, r2
   2d834:	4b3d      	ldr	r3, [pc, #244]	; (2d92c <dir_register+0x354>)
   2d836:	4798      	blx	r3
   2d838:	0003      	movs	r3, r0
   2d83a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d83c:	232f      	movs	r3, #47	; 0x2f
   2d83e:	18fb      	adds	r3, r7, r3
   2d840:	781b      	ldrb	r3, [r3, #0]
   2d842:	2b00      	cmp	r3, #0
   2d844:	d12b      	bne.n	2d89e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d846:	687b      	ldr	r3, [r7, #4]
   2d848:	69d8      	ldr	r0, [r3, #28]
   2d84a:	687b      	ldr	r3, [r7, #4]
   2d84c:	6959      	ldr	r1, [r3, #20]
   2d84e:	232a      	movs	r3, #42	; 0x2a
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	881b      	ldrh	r3, [r3, #0]
   2d854:	b2da      	uxtb	r2, r3
   2d856:	231e      	movs	r3, #30
   2d858:	18fb      	adds	r3, r7, r3
   2d85a:	781b      	ldrb	r3, [r3, #0]
   2d85c:	4c36      	ldr	r4, [pc, #216]	; (2d938 <dir_register+0x360>)
   2d85e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d860:	687b      	ldr	r3, [r7, #4]
   2d862:	681b      	ldr	r3, [r3, #0]
   2d864:	2201      	movs	r2, #1
   2d866:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d868:	232f      	movs	r3, #47	; 0x2f
   2d86a:	18fc      	adds	r4, r7, r3
   2d86c:	687b      	ldr	r3, [r7, #4]
   2d86e:	2100      	movs	r1, #0
   2d870:	0018      	movs	r0, r3
   2d872:	4b2f      	ldr	r3, [pc, #188]	; (2d930 <dir_register+0x358>)
   2d874:	4798      	blx	r3
   2d876:	0003      	movs	r3, r0
   2d878:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d87a:	232f      	movs	r3, #47	; 0x2f
   2d87c:	18fb      	adds	r3, r7, r3
   2d87e:	781b      	ldrb	r3, [r3, #0]
   2d880:	2b00      	cmp	r3, #0
   2d882:	d10d      	bne.n	2d8a0 <dir_register+0x2c8>
   2d884:	232a      	movs	r3, #42	; 0x2a
   2d886:	18fb      	adds	r3, r7, r3
   2d888:	222a      	movs	r2, #42	; 0x2a
   2d88a:	18ba      	adds	r2, r7, r2
   2d88c:	8812      	ldrh	r2, [r2, #0]
   2d88e:	3a01      	subs	r2, #1
   2d890:	801a      	strh	r2, [r3, #0]
   2d892:	232a      	movs	r3, #42	; 0x2a
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	881b      	ldrh	r3, [r3, #0]
   2d898:	2b00      	cmp	r3, #0
   2d89a:	d1c3      	bne.n	2d824 <dir_register+0x24c>
   2d89c:	e000      	b.n	2d8a0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d89e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d8a0:	232f      	movs	r3, #47	; 0x2f
   2d8a2:	18fb      	adds	r3, r7, r3
   2d8a4:	781b      	ldrb	r3, [r3, #0]
   2d8a6:	2b00      	cmp	r3, #0
   2d8a8:	d12f      	bne.n	2d90a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d8aa:	687b      	ldr	r3, [r7, #4]
   2d8ac:	681a      	ldr	r2, [r3, #0]
   2d8ae:	687b      	ldr	r3, [r7, #4]
   2d8b0:	691b      	ldr	r3, [r3, #16]
   2d8b2:	212f      	movs	r1, #47	; 0x2f
   2d8b4:	187c      	adds	r4, r7, r1
   2d8b6:	0019      	movs	r1, r3
   2d8b8:	0010      	movs	r0, r2
   2d8ba:	4b1c      	ldr	r3, [pc, #112]	; (2d92c <dir_register+0x354>)
   2d8bc:	4798      	blx	r3
   2d8be:	0003      	movs	r3, r0
   2d8c0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d8c2:	232f      	movs	r3, #47	; 0x2f
   2d8c4:	18fb      	adds	r3, r7, r3
   2d8c6:	781b      	ldrb	r3, [r3, #0]
   2d8c8:	2b00      	cmp	r3, #0
   2d8ca:	d11e      	bne.n	2d90a <dir_register+0x332>
			dir = dj->dir;
   2d8cc:	687b      	ldr	r3, [r7, #4]
   2d8ce:	695b      	ldr	r3, [r3, #20]
   2d8d0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d8d2:	69bb      	ldr	r3, [r7, #24]
   2d8d4:	2220      	movs	r2, #32
   2d8d6:	2100      	movs	r1, #0
   2d8d8:	0018      	movs	r0, r3
   2d8da:	4b18      	ldr	r3, [pc, #96]	; (2d93c <dir_register+0x364>)
   2d8dc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d8de:	687b      	ldr	r3, [r7, #4]
   2d8e0:	6999      	ldr	r1, [r3, #24]
   2d8e2:	69bb      	ldr	r3, [r7, #24]
   2d8e4:	220b      	movs	r2, #11
   2d8e6:	0018      	movs	r0, r3
   2d8e8:	4b0b      	ldr	r3, [pc, #44]	; (2d918 <dir_register+0x340>)
   2d8ea:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d8ec:	69bb      	ldr	r3, [r7, #24]
   2d8ee:	330c      	adds	r3, #12
   2d8f0:	001a      	movs	r2, r3
   2d8f2:	687b      	ldr	r3, [r7, #4]
   2d8f4:	699b      	ldr	r3, [r3, #24]
   2d8f6:	330b      	adds	r3, #11
   2d8f8:	781b      	ldrb	r3, [r3, #0]
   2d8fa:	2118      	movs	r1, #24
   2d8fc:	400b      	ands	r3, r1
   2d8fe:	b2db      	uxtb	r3, r3
   2d900:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d902:	687b      	ldr	r3, [r7, #4]
   2d904:	681b      	ldr	r3, [r3, #0]
   2d906:	2201      	movs	r2, #1
   2d908:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d90a:	232f      	movs	r3, #47	; 0x2f
   2d90c:	18fb      	adds	r3, r7, r3
   2d90e:	781b      	ldrb	r3, [r3, #0]
}
   2d910:	0018      	movs	r0, r3
   2d912:	46bd      	mov	sp, r7
   2d914:	b00d      	add	sp, #52	; 0x34
   2d916:	bd90      	pop	{r4, r7, pc}
   2d918:	0002c431 	.word	0x0002c431
   2d91c:	0002d28d 	.word	0x0002d28d
   2d920:	0002d3dd 	.word	0x0002d3dd
   2d924:	00033829 	.word	0x00033829
   2d928:	0002cd59 	.word	0x0002cd59
   2d92c:	0002c515 	.word	0x0002c515
   2d930:	0002ce89 	.word	0x0002ce89
   2d934:	0002d38d 	.word	0x0002d38d
   2d938:	0002d17d 	.word	0x0002d17d
   2d93c:	0002c469 	.word	0x0002c469

0002d940 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d940:	b590      	push	{r4, r7, lr}
   2d942:	b08b      	sub	sp, #44	; 0x2c
   2d944:	af00      	add	r7, sp, #0
   2d946:	6078      	str	r0, [r7, #4]
   2d948:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d94a:	683b      	ldr	r3, [r7, #0]
   2d94c:	681b      	ldr	r3, [r3, #0]
   2d94e:	613b      	str	r3, [r7, #16]
   2d950:	e002      	b.n	2d958 <create_name+0x18>
   2d952:	693b      	ldr	r3, [r7, #16]
   2d954:	3301      	adds	r3, #1
   2d956:	613b      	str	r3, [r7, #16]
   2d958:	693b      	ldr	r3, [r7, #16]
   2d95a:	781b      	ldrb	r3, [r3, #0]
   2d95c:	2b2f      	cmp	r3, #47	; 0x2f
   2d95e:	d0f8      	beq.n	2d952 <create_name+0x12>
   2d960:	693b      	ldr	r3, [r7, #16]
   2d962:	781b      	ldrb	r3, [r3, #0]
   2d964:	2b5c      	cmp	r3, #92	; 0x5c
   2d966:	d0f4      	beq.n	2d952 <create_name+0x12>
	lfn = dj->lfn;
   2d968:	687b      	ldr	r3, [r7, #4]
   2d96a:	69db      	ldr	r3, [r3, #28]
   2d96c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d96e:	2300      	movs	r3, #0
   2d970:	617b      	str	r3, [r7, #20]
   2d972:	697b      	ldr	r3, [r7, #20]
   2d974:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d976:	69bb      	ldr	r3, [r7, #24]
   2d978:	1c5a      	adds	r2, r3, #1
   2d97a:	61ba      	str	r2, [r7, #24]
   2d97c:	693a      	ldr	r2, [r7, #16]
   2d97e:	18d3      	adds	r3, r2, r3
   2d980:	781a      	ldrb	r2, [r3, #0]
   2d982:	2324      	movs	r3, #36	; 0x24
   2d984:	18fb      	adds	r3, r7, r3
   2d986:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d988:	2324      	movs	r3, #36	; 0x24
   2d98a:	18fb      	adds	r3, r7, r3
   2d98c:	881b      	ldrh	r3, [r3, #0]
   2d98e:	2b1f      	cmp	r3, #31
   2d990:	d944      	bls.n	2da1c <create_name+0xdc>
   2d992:	2324      	movs	r3, #36	; 0x24
   2d994:	18fb      	adds	r3, r7, r3
   2d996:	881b      	ldrh	r3, [r3, #0]
   2d998:	2b2f      	cmp	r3, #47	; 0x2f
   2d99a:	d03f      	beq.n	2da1c <create_name+0xdc>
   2d99c:	2324      	movs	r3, #36	; 0x24
   2d99e:	18fb      	adds	r3, r7, r3
   2d9a0:	881b      	ldrh	r3, [r3, #0]
   2d9a2:	2b5c      	cmp	r3, #92	; 0x5c
   2d9a4:	d03a      	beq.n	2da1c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d9a6:	697b      	ldr	r3, [r7, #20]
   2d9a8:	2bfe      	cmp	r3, #254	; 0xfe
   2d9aa:	d901      	bls.n	2d9b0 <create_name+0x70>
			return FR_INVALID_NAME;
   2d9ac:	2306      	movs	r3, #6
   2d9ae:	e1e7      	b.n	2dd80 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d9b0:	2324      	movs	r3, #36	; 0x24
   2d9b2:	18fb      	adds	r3, r7, r3
   2d9b4:	2224      	movs	r2, #36	; 0x24
   2d9b6:	18ba      	adds	r2, r7, r2
   2d9b8:	8812      	ldrh	r2, [r2, #0]
   2d9ba:	21ff      	movs	r1, #255	; 0xff
   2d9bc:	400a      	ands	r2, r1
   2d9be:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d9c0:	2324      	movs	r3, #36	; 0x24
   2d9c2:	18fc      	adds	r4, r7, r3
   2d9c4:	2324      	movs	r3, #36	; 0x24
   2d9c6:	18fb      	adds	r3, r7, r3
   2d9c8:	881b      	ldrh	r3, [r3, #0]
   2d9ca:	2101      	movs	r1, #1
   2d9cc:	0018      	movs	r0, r3
   2d9ce:	4bba      	ldr	r3, [pc, #744]	; (2dcb8 <create_name+0x378>)
   2d9d0:	4798      	blx	r3
   2d9d2:	0003      	movs	r3, r0
   2d9d4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d9d6:	2324      	movs	r3, #36	; 0x24
   2d9d8:	18fb      	adds	r3, r7, r3
   2d9da:	881b      	ldrh	r3, [r3, #0]
   2d9dc:	2b00      	cmp	r3, #0
   2d9de:	d101      	bne.n	2d9e4 <create_name+0xa4>
   2d9e0:	2306      	movs	r3, #6
   2d9e2:	e1cd      	b.n	2dd80 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d9e4:	2324      	movs	r3, #36	; 0x24
   2d9e6:	18fb      	adds	r3, r7, r3
   2d9e8:	881b      	ldrh	r3, [r3, #0]
   2d9ea:	2b7f      	cmp	r3, #127	; 0x7f
   2d9ec:	d80b      	bhi.n	2da06 <create_name+0xc6>
   2d9ee:	2324      	movs	r3, #36	; 0x24
   2d9f0:	18fb      	adds	r3, r7, r3
   2d9f2:	881a      	ldrh	r2, [r3, #0]
   2d9f4:	4bb1      	ldr	r3, [pc, #708]	; (2dcbc <create_name+0x37c>)
   2d9f6:	0011      	movs	r1, r2
   2d9f8:	0018      	movs	r0, r3
   2d9fa:	4bb1      	ldr	r3, [pc, #708]	; (2dcc0 <create_name+0x380>)
   2d9fc:	4798      	blx	r3
   2d9fe:	1e03      	subs	r3, r0, #0
   2da00:	d001      	beq.n	2da06 <create_name+0xc6>
			return FR_INVALID_NAME;
   2da02:	2306      	movs	r3, #6
   2da04:	e1bc      	b.n	2dd80 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2da06:	697b      	ldr	r3, [r7, #20]
   2da08:	1c5a      	adds	r2, r3, #1
   2da0a:	617a      	str	r2, [r7, #20]
   2da0c:	005b      	lsls	r3, r3, #1
   2da0e:	68fa      	ldr	r2, [r7, #12]
   2da10:	18d3      	adds	r3, r2, r3
   2da12:	2224      	movs	r2, #36	; 0x24
   2da14:	18ba      	adds	r2, r7, r2
   2da16:	8812      	ldrh	r2, [r2, #0]
   2da18:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2da1a:	e7ac      	b.n	2d976 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2da1c:	693a      	ldr	r2, [r7, #16]
   2da1e:	69bb      	ldr	r3, [r7, #24]
   2da20:	18d2      	adds	r2, r2, r3
   2da22:	683b      	ldr	r3, [r7, #0]
   2da24:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2da26:	2324      	movs	r3, #36	; 0x24
   2da28:	18fb      	adds	r3, r7, r3
   2da2a:	881b      	ldrh	r3, [r3, #0]
   2da2c:	2b1f      	cmp	r3, #31
   2da2e:	d801      	bhi.n	2da34 <create_name+0xf4>
   2da30:	2204      	movs	r2, #4
   2da32:	e000      	b.n	2da36 <create_name+0xf6>
   2da34:	2200      	movs	r2, #0
   2da36:	2326      	movs	r3, #38	; 0x26
   2da38:	18fb      	adds	r3, r7, r3
   2da3a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2da3c:	e017      	b.n	2da6e <create_name+0x12e>
		w = lfn[di-1];
   2da3e:	697b      	ldr	r3, [r7, #20]
   2da40:	4aa0      	ldr	r2, [pc, #640]	; (2dcc4 <create_name+0x384>)
   2da42:	4694      	mov	ip, r2
   2da44:	4463      	add	r3, ip
   2da46:	005b      	lsls	r3, r3, #1
   2da48:	68fa      	ldr	r2, [r7, #12]
   2da4a:	18d2      	adds	r2, r2, r3
   2da4c:	2324      	movs	r3, #36	; 0x24
   2da4e:	18fb      	adds	r3, r7, r3
   2da50:	8812      	ldrh	r2, [r2, #0]
   2da52:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2da54:	2324      	movs	r3, #36	; 0x24
   2da56:	18fb      	adds	r3, r7, r3
   2da58:	881b      	ldrh	r3, [r3, #0]
   2da5a:	2b20      	cmp	r3, #32
   2da5c:	d004      	beq.n	2da68 <create_name+0x128>
   2da5e:	2324      	movs	r3, #36	; 0x24
   2da60:	18fb      	adds	r3, r7, r3
   2da62:	881b      	ldrh	r3, [r3, #0]
   2da64:	2b2e      	cmp	r3, #46	; 0x2e
   2da66:	d106      	bne.n	2da76 <create_name+0x136>
		di--;
   2da68:	697b      	ldr	r3, [r7, #20]
   2da6a:	3b01      	subs	r3, #1
   2da6c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2da6e:	697b      	ldr	r3, [r7, #20]
   2da70:	2b00      	cmp	r3, #0
   2da72:	d1e4      	bne.n	2da3e <create_name+0xfe>
   2da74:	e000      	b.n	2da78 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2da76:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2da78:	697b      	ldr	r3, [r7, #20]
   2da7a:	2b00      	cmp	r3, #0
   2da7c:	d101      	bne.n	2da82 <create_name+0x142>
   2da7e:	2306      	movs	r3, #6
   2da80:	e17e      	b.n	2dd80 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2da82:	697b      	ldr	r3, [r7, #20]
   2da84:	005b      	lsls	r3, r3, #1
   2da86:	68fa      	ldr	r2, [r7, #12]
   2da88:	18d3      	adds	r3, r2, r3
   2da8a:	2200      	movs	r2, #0
   2da8c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2da8e:	687b      	ldr	r3, [r7, #4]
   2da90:	699b      	ldr	r3, [r3, #24]
   2da92:	220b      	movs	r2, #11
   2da94:	2120      	movs	r1, #32
   2da96:	0018      	movs	r0, r3
   2da98:	4b8b      	ldr	r3, [pc, #556]	; (2dcc8 <create_name+0x388>)
   2da9a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2da9c:	2300      	movs	r3, #0
   2da9e:	61bb      	str	r3, [r7, #24]
   2daa0:	e002      	b.n	2daa8 <create_name+0x168>
   2daa2:	69bb      	ldr	r3, [r7, #24]
   2daa4:	3301      	adds	r3, #1
   2daa6:	61bb      	str	r3, [r7, #24]
   2daa8:	69bb      	ldr	r3, [r7, #24]
   2daaa:	005b      	lsls	r3, r3, #1
   2daac:	68fa      	ldr	r2, [r7, #12]
   2daae:	18d3      	adds	r3, r2, r3
   2dab0:	881b      	ldrh	r3, [r3, #0]
   2dab2:	2b20      	cmp	r3, #32
   2dab4:	d0f5      	beq.n	2daa2 <create_name+0x162>
   2dab6:	69bb      	ldr	r3, [r7, #24]
   2dab8:	005b      	lsls	r3, r3, #1
   2daba:	68fa      	ldr	r2, [r7, #12]
   2dabc:	18d3      	adds	r3, r2, r3
   2dabe:	881b      	ldrh	r3, [r3, #0]
   2dac0:	2b2e      	cmp	r3, #46	; 0x2e
   2dac2:	d0ee      	beq.n	2daa2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2dac4:	69bb      	ldr	r3, [r7, #24]
   2dac6:	2b00      	cmp	r3, #0
   2dac8:	d00b      	beq.n	2dae2 <create_name+0x1a2>
   2daca:	2326      	movs	r3, #38	; 0x26
   2dacc:	18fb      	adds	r3, r7, r3
   2dace:	2226      	movs	r2, #38	; 0x26
   2dad0:	18ba      	adds	r2, r7, r2
   2dad2:	7812      	ldrb	r2, [r2, #0]
   2dad4:	2103      	movs	r1, #3
   2dad6:	430a      	orrs	r2, r1
   2dad8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2dada:	e002      	b.n	2dae2 <create_name+0x1a2>
   2dadc:	697b      	ldr	r3, [r7, #20]
   2dade:	3b01      	subs	r3, #1
   2dae0:	617b      	str	r3, [r7, #20]
   2dae2:	697b      	ldr	r3, [r7, #20]
   2dae4:	2b00      	cmp	r3, #0
   2dae6:	d009      	beq.n	2dafc <create_name+0x1bc>
   2dae8:	697b      	ldr	r3, [r7, #20]
   2daea:	4a76      	ldr	r2, [pc, #472]	; (2dcc4 <create_name+0x384>)
   2daec:	4694      	mov	ip, r2
   2daee:	4463      	add	r3, ip
   2daf0:	005b      	lsls	r3, r3, #1
   2daf2:	68fa      	ldr	r2, [r7, #12]
   2daf4:	18d3      	adds	r3, r2, r3
   2daf6:	881b      	ldrh	r3, [r3, #0]
   2daf8:	2b2e      	cmp	r3, #46	; 0x2e
   2dafa:	d1ef      	bne.n	2dadc <create_name+0x19c>

	b = i = 0; ni = 8;
   2dafc:	2300      	movs	r3, #0
   2dafe:	623b      	str	r3, [r7, #32]
   2db00:	2327      	movs	r3, #39	; 0x27
   2db02:	18fb      	adds	r3, r7, r3
   2db04:	2200      	movs	r2, #0
   2db06:	701a      	strb	r2, [r3, #0]
   2db08:	2308      	movs	r3, #8
   2db0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2db0c:	69bb      	ldr	r3, [r7, #24]
   2db0e:	1c5a      	adds	r2, r3, #1
   2db10:	61ba      	str	r2, [r7, #24]
   2db12:	005b      	lsls	r3, r3, #1
   2db14:	68fa      	ldr	r2, [r7, #12]
   2db16:	18d2      	adds	r2, r2, r3
   2db18:	2324      	movs	r3, #36	; 0x24
   2db1a:	18fb      	adds	r3, r7, r3
   2db1c:	8812      	ldrh	r2, [r2, #0]
   2db1e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2db20:	2324      	movs	r3, #36	; 0x24
   2db22:	18fb      	adds	r3, r7, r3
   2db24:	881b      	ldrh	r3, [r3, #0]
   2db26:	2b00      	cmp	r3, #0
   2db28:	d100      	bne.n	2db2c <create_name+0x1ec>
   2db2a:	e0c3      	b.n	2dcb4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2db2c:	2324      	movs	r3, #36	; 0x24
   2db2e:	18fb      	adds	r3, r7, r3
   2db30:	881b      	ldrh	r3, [r3, #0]
   2db32:	2b20      	cmp	r3, #32
   2db34:	d008      	beq.n	2db48 <create_name+0x208>
   2db36:	2324      	movs	r3, #36	; 0x24
   2db38:	18fb      	adds	r3, r7, r3
   2db3a:	881b      	ldrh	r3, [r3, #0]
   2db3c:	2b2e      	cmp	r3, #46	; 0x2e
   2db3e:	d10c      	bne.n	2db5a <create_name+0x21a>
   2db40:	69ba      	ldr	r2, [r7, #24]
   2db42:	697b      	ldr	r3, [r7, #20]
   2db44:	429a      	cmp	r2, r3
   2db46:	d008      	beq.n	2db5a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2db48:	2326      	movs	r3, #38	; 0x26
   2db4a:	18fb      	adds	r3, r7, r3
   2db4c:	2226      	movs	r2, #38	; 0x26
   2db4e:	18ba      	adds	r2, r7, r2
   2db50:	7812      	ldrb	r2, [r2, #0]
   2db52:	2103      	movs	r1, #3
   2db54:	430a      	orrs	r2, r1
   2db56:	701a      	strb	r2, [r3, #0]
   2db58:	e0ab      	b.n	2dcb2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2db5a:	6a3a      	ldr	r2, [r7, #32]
   2db5c:	69fb      	ldr	r3, [r7, #28]
   2db5e:	429a      	cmp	r2, r3
   2db60:	d203      	bcs.n	2db6a <create_name+0x22a>
   2db62:	69ba      	ldr	r2, [r7, #24]
   2db64:	697b      	ldr	r3, [r7, #20]
   2db66:	429a      	cmp	r2, r3
   2db68:	d12a      	bne.n	2dbc0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2db6a:	69fb      	ldr	r3, [r7, #28]
   2db6c:	2b0b      	cmp	r3, #11
   2db6e:	d108      	bne.n	2db82 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2db70:	2326      	movs	r3, #38	; 0x26
   2db72:	18fb      	adds	r3, r7, r3
   2db74:	2226      	movs	r2, #38	; 0x26
   2db76:	18ba      	adds	r2, r7, r2
   2db78:	7812      	ldrb	r2, [r2, #0]
   2db7a:	2103      	movs	r1, #3
   2db7c:	430a      	orrs	r2, r1
   2db7e:	701a      	strb	r2, [r3, #0]
   2db80:	e0a9      	b.n	2dcd6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2db82:	69ba      	ldr	r2, [r7, #24]
   2db84:	697b      	ldr	r3, [r7, #20]
   2db86:	429a      	cmp	r2, r3
   2db88:	d007      	beq.n	2db9a <create_name+0x25a>
   2db8a:	2326      	movs	r3, #38	; 0x26
   2db8c:	18fb      	adds	r3, r7, r3
   2db8e:	2226      	movs	r2, #38	; 0x26
   2db90:	18ba      	adds	r2, r7, r2
   2db92:	7812      	ldrb	r2, [r2, #0]
   2db94:	2103      	movs	r1, #3
   2db96:	430a      	orrs	r2, r1
   2db98:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2db9a:	69ba      	ldr	r2, [r7, #24]
   2db9c:	697b      	ldr	r3, [r7, #20]
   2db9e:	429a      	cmp	r2, r3
   2dba0:	d900      	bls.n	2dba4 <create_name+0x264>
   2dba2:	e097      	b.n	2dcd4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2dba4:	697b      	ldr	r3, [r7, #20]
   2dba6:	61bb      	str	r3, [r7, #24]
   2dba8:	2308      	movs	r3, #8
   2dbaa:	623b      	str	r3, [r7, #32]
   2dbac:	230b      	movs	r3, #11
   2dbae:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2dbb0:	2327      	movs	r3, #39	; 0x27
   2dbb2:	18fb      	adds	r3, r7, r3
   2dbb4:	2227      	movs	r2, #39	; 0x27
   2dbb6:	18ba      	adds	r2, r7, r2
   2dbb8:	7812      	ldrb	r2, [r2, #0]
   2dbba:	0092      	lsls	r2, r2, #2
   2dbbc:	701a      	strb	r2, [r3, #0]
   2dbbe:	e078      	b.n	2dcb2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2dbc0:	2324      	movs	r3, #36	; 0x24
   2dbc2:	18fb      	adds	r3, r7, r3
   2dbc4:	881b      	ldrh	r3, [r3, #0]
   2dbc6:	2b7f      	cmp	r3, #127	; 0x7f
   2dbc8:	d920      	bls.n	2dc0c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2dbca:	2324      	movs	r3, #36	; 0x24
   2dbcc:	18fc      	adds	r4, r7, r3
   2dbce:	2324      	movs	r3, #36	; 0x24
   2dbd0:	18fb      	adds	r3, r7, r3
   2dbd2:	881b      	ldrh	r3, [r3, #0]
   2dbd4:	2100      	movs	r1, #0
   2dbd6:	0018      	movs	r0, r3
   2dbd8:	4b37      	ldr	r3, [pc, #220]	; (2dcb8 <create_name+0x378>)
   2dbda:	4798      	blx	r3
   2dbdc:	0003      	movs	r3, r0
   2dbde:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2dbe0:	2324      	movs	r3, #36	; 0x24
   2dbe2:	18fb      	adds	r3, r7, r3
   2dbe4:	881b      	ldrh	r3, [r3, #0]
   2dbe6:	2b00      	cmp	r3, #0
   2dbe8:	d008      	beq.n	2dbfc <create_name+0x2bc>
   2dbea:	2324      	movs	r3, #36	; 0x24
   2dbec:	18fb      	adds	r3, r7, r3
   2dbee:	881b      	ldrh	r3, [r3, #0]
   2dbf0:	3b80      	subs	r3, #128	; 0x80
   2dbf2:	4a36      	ldr	r2, [pc, #216]	; (2dccc <create_name+0x38c>)
   2dbf4:	5cd2      	ldrb	r2, [r2, r3]
   2dbf6:	2324      	movs	r3, #36	; 0x24
   2dbf8:	18fb      	adds	r3, r7, r3
   2dbfa:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2dbfc:	2326      	movs	r3, #38	; 0x26
   2dbfe:	18fb      	adds	r3, r7, r3
   2dc00:	2226      	movs	r2, #38	; 0x26
   2dc02:	18ba      	adds	r2, r7, r2
   2dc04:	7812      	ldrb	r2, [r2, #0]
   2dc06:	2102      	movs	r1, #2
   2dc08:	430a      	orrs	r2, r1
   2dc0a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2dc0c:	2324      	movs	r3, #36	; 0x24
   2dc0e:	18fb      	adds	r3, r7, r3
   2dc10:	881b      	ldrh	r3, [r3, #0]
   2dc12:	2b00      	cmp	r3, #0
   2dc14:	d009      	beq.n	2dc2a <create_name+0x2ea>
   2dc16:	2324      	movs	r3, #36	; 0x24
   2dc18:	18fb      	adds	r3, r7, r3
   2dc1a:	881a      	ldrh	r2, [r3, #0]
   2dc1c:	4b2c      	ldr	r3, [pc, #176]	; (2dcd0 <create_name+0x390>)
   2dc1e:	0011      	movs	r1, r2
   2dc20:	0018      	movs	r0, r3
   2dc22:	4b27      	ldr	r3, [pc, #156]	; (2dcc0 <create_name+0x380>)
   2dc24:	4798      	blx	r3
   2dc26:	1e03      	subs	r3, r0, #0
   2dc28:	d00c      	beq.n	2dc44 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2dc2a:	2324      	movs	r3, #36	; 0x24
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	225f      	movs	r2, #95	; 0x5f
   2dc30:	801a      	strh	r2, [r3, #0]
   2dc32:	2326      	movs	r3, #38	; 0x26
   2dc34:	18fb      	adds	r3, r7, r3
   2dc36:	2226      	movs	r2, #38	; 0x26
   2dc38:	18ba      	adds	r2, r7, r2
   2dc3a:	7812      	ldrb	r2, [r2, #0]
   2dc3c:	2103      	movs	r1, #3
   2dc3e:	430a      	orrs	r2, r1
   2dc40:	701a      	strb	r2, [r3, #0]
   2dc42:	e02b      	b.n	2dc9c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2dc44:	2324      	movs	r3, #36	; 0x24
   2dc46:	18fb      	adds	r3, r7, r3
   2dc48:	881b      	ldrh	r3, [r3, #0]
   2dc4a:	2b40      	cmp	r3, #64	; 0x40
   2dc4c:	d90d      	bls.n	2dc6a <create_name+0x32a>
   2dc4e:	2324      	movs	r3, #36	; 0x24
   2dc50:	18fb      	adds	r3, r7, r3
   2dc52:	881b      	ldrh	r3, [r3, #0]
   2dc54:	2b5a      	cmp	r3, #90	; 0x5a
   2dc56:	d808      	bhi.n	2dc6a <create_name+0x32a>
					b |= 2;
   2dc58:	2327      	movs	r3, #39	; 0x27
   2dc5a:	18fb      	adds	r3, r7, r3
   2dc5c:	2227      	movs	r2, #39	; 0x27
   2dc5e:	18ba      	adds	r2, r7, r2
   2dc60:	7812      	ldrb	r2, [r2, #0]
   2dc62:	2102      	movs	r1, #2
   2dc64:	430a      	orrs	r2, r1
   2dc66:	701a      	strb	r2, [r3, #0]
   2dc68:	e018      	b.n	2dc9c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2dc6a:	2324      	movs	r3, #36	; 0x24
   2dc6c:	18fb      	adds	r3, r7, r3
   2dc6e:	881b      	ldrh	r3, [r3, #0]
   2dc70:	2b60      	cmp	r3, #96	; 0x60
   2dc72:	d913      	bls.n	2dc9c <create_name+0x35c>
   2dc74:	2324      	movs	r3, #36	; 0x24
   2dc76:	18fb      	adds	r3, r7, r3
   2dc78:	881b      	ldrh	r3, [r3, #0]
   2dc7a:	2b7a      	cmp	r3, #122	; 0x7a
   2dc7c:	d80e      	bhi.n	2dc9c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2dc7e:	2327      	movs	r3, #39	; 0x27
   2dc80:	18fb      	adds	r3, r7, r3
   2dc82:	2227      	movs	r2, #39	; 0x27
   2dc84:	18ba      	adds	r2, r7, r2
   2dc86:	7812      	ldrb	r2, [r2, #0]
   2dc88:	2101      	movs	r1, #1
   2dc8a:	430a      	orrs	r2, r1
   2dc8c:	701a      	strb	r2, [r3, #0]
   2dc8e:	2324      	movs	r3, #36	; 0x24
   2dc90:	18fb      	adds	r3, r7, r3
   2dc92:	2224      	movs	r2, #36	; 0x24
   2dc94:	18ba      	adds	r2, r7, r2
   2dc96:	8812      	ldrh	r2, [r2, #0]
   2dc98:	3a20      	subs	r2, #32
   2dc9a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dc9c:	687b      	ldr	r3, [r7, #4]
   2dc9e:	699a      	ldr	r2, [r3, #24]
   2dca0:	6a3b      	ldr	r3, [r7, #32]
   2dca2:	1c59      	adds	r1, r3, #1
   2dca4:	6239      	str	r1, [r7, #32]
   2dca6:	18d3      	adds	r3, r2, r3
   2dca8:	2224      	movs	r2, #36	; 0x24
   2dcaa:	18ba      	adds	r2, r7, r2
   2dcac:	8812      	ldrh	r2, [r2, #0]
   2dcae:	b2d2      	uxtb	r2, r2
   2dcb0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dcb2:	e72b      	b.n	2db0c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dcb4:	46c0      	nop			; (mov r8, r8)
   2dcb6:	e00e      	b.n	2dcd6 <create_name+0x396>
   2dcb8:	0002f079 	.word	0x0002f079
   2dcbc:	0003a67c 	.word	0x0003a67c
   2dcc0:	0002c4e3 	.word	0x0002c4e3
   2dcc4:	7fffffff 	.word	0x7fffffff
   2dcc8:	0002c469 	.word	0x0002c469
   2dccc:	0003a6c4 	.word	0x0003a6c4
   2dcd0:	0003a688 	.word	0x0003a688
			if (si > di) break;			/* No extension */
   2dcd4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2dcd6:	687b      	ldr	r3, [r7, #4]
   2dcd8:	699b      	ldr	r3, [r3, #24]
   2dcda:	781b      	ldrb	r3, [r3, #0]
   2dcdc:	2be5      	cmp	r3, #229	; 0xe5
   2dcde:	d103      	bne.n	2dce8 <create_name+0x3a8>
   2dce0:	687b      	ldr	r3, [r7, #4]
   2dce2:	699b      	ldr	r3, [r3, #24]
   2dce4:	2205      	movs	r2, #5
   2dce6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2dce8:	69fb      	ldr	r3, [r7, #28]
   2dcea:	2b08      	cmp	r3, #8
   2dcec:	d106      	bne.n	2dcfc <create_name+0x3bc>
   2dcee:	2327      	movs	r3, #39	; 0x27
   2dcf0:	18fb      	adds	r3, r7, r3
   2dcf2:	2227      	movs	r2, #39	; 0x27
   2dcf4:	18ba      	adds	r2, r7, r2
   2dcf6:	7812      	ldrb	r2, [r2, #0]
   2dcf8:	0092      	lsls	r2, r2, #2
   2dcfa:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2dcfc:	2327      	movs	r3, #39	; 0x27
   2dcfe:	18fb      	adds	r3, r7, r3
   2dd00:	781b      	ldrb	r3, [r3, #0]
   2dd02:	220c      	movs	r2, #12
   2dd04:	4013      	ands	r3, r2
   2dd06:	2b0c      	cmp	r3, #12
   2dd08:	d006      	beq.n	2dd18 <create_name+0x3d8>
   2dd0a:	2327      	movs	r3, #39	; 0x27
   2dd0c:	18fb      	adds	r3, r7, r3
   2dd0e:	781b      	ldrb	r3, [r3, #0]
   2dd10:	2203      	movs	r2, #3
   2dd12:	4013      	ands	r3, r2
   2dd14:	2b03      	cmp	r3, #3
   2dd16:	d107      	bne.n	2dd28 <create_name+0x3e8>
		cf |= NS_LFN;
   2dd18:	2326      	movs	r3, #38	; 0x26
   2dd1a:	18fb      	adds	r3, r7, r3
   2dd1c:	2226      	movs	r2, #38	; 0x26
   2dd1e:	18ba      	adds	r2, r7, r2
   2dd20:	7812      	ldrb	r2, [r2, #0]
   2dd22:	2102      	movs	r1, #2
   2dd24:	430a      	orrs	r2, r1
   2dd26:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2dd28:	2326      	movs	r3, #38	; 0x26
   2dd2a:	18fb      	adds	r3, r7, r3
   2dd2c:	781b      	ldrb	r3, [r3, #0]
   2dd2e:	2202      	movs	r2, #2
   2dd30:	4013      	ands	r3, r2
   2dd32:	d11d      	bne.n	2dd70 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2dd34:	2327      	movs	r3, #39	; 0x27
   2dd36:	18fb      	adds	r3, r7, r3
   2dd38:	781b      	ldrb	r3, [r3, #0]
   2dd3a:	2203      	movs	r2, #3
   2dd3c:	4013      	ands	r3, r2
   2dd3e:	2b01      	cmp	r3, #1
   2dd40:	d107      	bne.n	2dd52 <create_name+0x412>
   2dd42:	2326      	movs	r3, #38	; 0x26
   2dd44:	18fb      	adds	r3, r7, r3
   2dd46:	2226      	movs	r2, #38	; 0x26
   2dd48:	18ba      	adds	r2, r7, r2
   2dd4a:	7812      	ldrb	r2, [r2, #0]
   2dd4c:	2110      	movs	r1, #16
   2dd4e:	430a      	orrs	r2, r1
   2dd50:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2dd52:	2327      	movs	r3, #39	; 0x27
   2dd54:	18fb      	adds	r3, r7, r3
   2dd56:	781b      	ldrb	r3, [r3, #0]
   2dd58:	220c      	movs	r2, #12
   2dd5a:	4013      	ands	r3, r2
   2dd5c:	2b04      	cmp	r3, #4
   2dd5e:	d107      	bne.n	2dd70 <create_name+0x430>
   2dd60:	2326      	movs	r3, #38	; 0x26
   2dd62:	18fb      	adds	r3, r7, r3
   2dd64:	2226      	movs	r2, #38	; 0x26
   2dd66:	18ba      	adds	r2, r7, r2
   2dd68:	7812      	ldrb	r2, [r2, #0]
   2dd6a:	2108      	movs	r1, #8
   2dd6c:	430a      	orrs	r2, r1
   2dd6e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2dd70:	687b      	ldr	r3, [r7, #4]
   2dd72:	699b      	ldr	r3, [r3, #24]
   2dd74:	330b      	adds	r3, #11
   2dd76:	2226      	movs	r2, #38	; 0x26
   2dd78:	18ba      	adds	r2, r7, r2
   2dd7a:	7812      	ldrb	r2, [r2, #0]
   2dd7c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2dd7e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dd80:	0018      	movs	r0, r3
   2dd82:	46bd      	mov	sp, r7
   2dd84:	b00b      	add	sp, #44	; 0x2c
   2dd86:	bd90      	pop	{r4, r7, pc}

0002dd88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dd88:	b590      	push	{r4, r7, lr}
   2dd8a:	b085      	sub	sp, #20
   2dd8c:	af00      	add	r7, sp, #0
   2dd8e:	6078      	str	r0, [r7, #4]
   2dd90:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2dd92:	683b      	ldr	r3, [r7, #0]
   2dd94:	781b      	ldrb	r3, [r3, #0]
   2dd96:	2b2f      	cmp	r3, #47	; 0x2f
   2dd98:	d003      	beq.n	2dda2 <follow_path+0x1a>
   2dd9a:	683b      	ldr	r3, [r7, #0]
   2dd9c:	781b      	ldrb	r3, [r3, #0]
   2dd9e:	2b5c      	cmp	r3, #92	; 0x5c
   2dda0:	d102      	bne.n	2dda8 <follow_path+0x20>
		path++;
   2dda2:	683b      	ldr	r3, [r7, #0]
   2dda4:	3301      	adds	r3, #1
   2dda6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dda8:	687b      	ldr	r3, [r7, #4]
   2ddaa:	2200      	movs	r2, #0
   2ddac:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2ddae:	683b      	ldr	r3, [r7, #0]
   2ddb0:	781b      	ldrb	r3, [r3, #0]
   2ddb2:	2b1f      	cmp	r3, #31
   2ddb4:	d80c      	bhi.n	2ddd0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2ddb6:	230f      	movs	r3, #15
   2ddb8:	18fc      	adds	r4, r7, r3
   2ddba:	687b      	ldr	r3, [r7, #4]
   2ddbc:	2100      	movs	r1, #0
   2ddbe:	0018      	movs	r0, r3
   2ddc0:	4b3c      	ldr	r3, [pc, #240]	; (2deb4 <follow_path+0x12c>)
   2ddc2:	4798      	blx	r3
   2ddc4:	0003      	movs	r3, r0
   2ddc6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2ddc8:	687b      	ldr	r3, [r7, #4]
   2ddca:	2200      	movs	r2, #0
   2ddcc:	615a      	str	r2, [r3, #20]
   2ddce:	e06a      	b.n	2dea6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2ddd0:	230f      	movs	r3, #15
   2ddd2:	18fc      	adds	r4, r7, r3
   2ddd4:	003a      	movs	r2, r7
   2ddd6:	687b      	ldr	r3, [r7, #4]
   2ddd8:	0011      	movs	r1, r2
   2ddda:	0018      	movs	r0, r3
   2dddc:	4b36      	ldr	r3, [pc, #216]	; (2deb8 <follow_path+0x130>)
   2ddde:	4798      	blx	r3
   2dde0:	0003      	movs	r3, r0
   2dde2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dde4:	230f      	movs	r3, #15
   2dde6:	18fb      	adds	r3, r7, r3
   2dde8:	781b      	ldrb	r3, [r3, #0]
   2ddea:	2b00      	cmp	r3, #0
   2ddec:	d154      	bne.n	2de98 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2ddee:	230f      	movs	r3, #15
   2ddf0:	18fc      	adds	r4, r7, r3
   2ddf2:	687b      	ldr	r3, [r7, #4]
   2ddf4:	0018      	movs	r0, r3
   2ddf6:	4b31      	ldr	r3, [pc, #196]	; (2debc <follow_path+0x134>)
   2ddf8:	4798      	blx	r3
   2ddfa:	0003      	movs	r3, r0
   2ddfc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2ddfe:	687b      	ldr	r3, [r7, #4]
   2de00:	699a      	ldr	r2, [r3, #24]
   2de02:	230e      	movs	r3, #14
   2de04:	18fb      	adds	r3, r7, r3
   2de06:	7ad2      	ldrb	r2, [r2, #11]
   2de08:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2de0a:	230f      	movs	r3, #15
   2de0c:	18fb      	adds	r3, r7, r3
   2de0e:	781b      	ldrb	r3, [r3, #0]
   2de10:	2b00      	cmp	r3, #0
   2de12:	d00f      	beq.n	2de34 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2de14:	230f      	movs	r3, #15
   2de16:	18fb      	adds	r3, r7, r3
   2de18:	781b      	ldrb	r3, [r3, #0]
   2de1a:	2b04      	cmp	r3, #4
   2de1c:	d13e      	bne.n	2de9c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2de1e:	230e      	movs	r3, #14
   2de20:	18fb      	adds	r3, r7, r3
   2de22:	781b      	ldrb	r3, [r3, #0]
   2de24:	2204      	movs	r2, #4
   2de26:	4013      	ands	r3, r2
   2de28:	d13a      	bne.n	2dea0 <follow_path+0x118>
   2de2a:	230f      	movs	r3, #15
   2de2c:	18fb      	adds	r3, r7, r3
   2de2e:	2205      	movs	r2, #5
   2de30:	701a      	strb	r2, [r3, #0]
				}
				break;
   2de32:	e035      	b.n	2dea0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2de34:	230e      	movs	r3, #14
   2de36:	18fb      	adds	r3, r7, r3
   2de38:	781b      	ldrb	r3, [r3, #0]
   2de3a:	2204      	movs	r2, #4
   2de3c:	4013      	ands	r3, r2
   2de3e:	d131      	bne.n	2dea4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2de40:	687b      	ldr	r3, [r7, #4]
   2de42:	695b      	ldr	r3, [r3, #20]
   2de44:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2de46:	68bb      	ldr	r3, [r7, #8]
   2de48:	330b      	adds	r3, #11
   2de4a:	781b      	ldrb	r3, [r3, #0]
   2de4c:	001a      	movs	r2, r3
   2de4e:	2310      	movs	r3, #16
   2de50:	4013      	ands	r3, r2
   2de52:	d104      	bne.n	2de5e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2de54:	230f      	movs	r3, #15
   2de56:	18fb      	adds	r3, r7, r3
   2de58:	2205      	movs	r2, #5
   2de5a:	701a      	strb	r2, [r3, #0]
   2de5c:	e023      	b.n	2dea6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2de5e:	68bb      	ldr	r3, [r7, #8]
   2de60:	3315      	adds	r3, #21
   2de62:	781b      	ldrb	r3, [r3, #0]
   2de64:	021b      	lsls	r3, r3, #8
   2de66:	b21a      	sxth	r2, r3
   2de68:	68bb      	ldr	r3, [r7, #8]
   2de6a:	3314      	adds	r3, #20
   2de6c:	781b      	ldrb	r3, [r3, #0]
   2de6e:	b21b      	sxth	r3, r3
   2de70:	4313      	orrs	r3, r2
   2de72:	b21b      	sxth	r3, r3
   2de74:	b29b      	uxth	r3, r3
   2de76:	041b      	lsls	r3, r3, #16
   2de78:	68ba      	ldr	r2, [r7, #8]
   2de7a:	321b      	adds	r2, #27
   2de7c:	7812      	ldrb	r2, [r2, #0]
   2de7e:	0212      	lsls	r2, r2, #8
   2de80:	b211      	sxth	r1, r2
   2de82:	68ba      	ldr	r2, [r7, #8]
   2de84:	321a      	adds	r2, #26
   2de86:	7812      	ldrb	r2, [r2, #0]
   2de88:	b212      	sxth	r2, r2
   2de8a:	430a      	orrs	r2, r1
   2de8c:	b212      	sxth	r2, r2
   2de8e:	b292      	uxth	r2, r2
   2de90:	431a      	orrs	r2, r3
   2de92:	687b      	ldr	r3, [r7, #4]
   2de94:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2de96:	e79b      	b.n	2ddd0 <follow_path+0x48>
			if (res != FR_OK) break;
   2de98:	46c0      	nop			; (mov r8, r8)
   2de9a:	e004      	b.n	2dea6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2de9c:	46c0      	nop			; (mov r8, r8)
   2de9e:	e002      	b.n	2dea6 <follow_path+0x11e>
				break;
   2dea0:	46c0      	nop			; (mov r8, r8)
   2dea2:	e000      	b.n	2dea6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dea4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2dea6:	230f      	movs	r3, #15
   2dea8:	18fb      	adds	r3, r7, r3
   2deaa:	781b      	ldrb	r3, [r3, #0]
}
   2deac:	0018      	movs	r0, r3
   2deae:	46bd      	mov	sp, r7
   2deb0:	b005      	add	sp, #20
   2deb2:	bd90      	pop	{r4, r7, pc}
   2deb4:	0002cd59 	.word	0x0002cd59
   2deb8:	0002d941 	.word	0x0002d941
   2debc:	0002d3dd 	.word	0x0002d3dd

0002dec0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2dec0:	b590      	push	{r4, r7, lr}
   2dec2:	b083      	sub	sp, #12
   2dec4:	af00      	add	r7, sp, #0
   2dec6:	6078      	str	r0, [r7, #4]
   2dec8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2deca:	687b      	ldr	r3, [r7, #4]
   2decc:	7858      	ldrb	r0, [r3, #1]
   2dece:	687b      	ldr	r3, [r7, #4]
   2ded0:	3330      	adds	r3, #48	; 0x30
   2ded2:	0019      	movs	r1, r3
   2ded4:	683a      	ldr	r2, [r7, #0]
   2ded6:	2301      	movs	r3, #1
   2ded8:	4c2a      	ldr	r4, [pc, #168]	; (2df84 <check_fs+0xc4>)
   2deda:	47a0      	blx	r4
   2dedc:	1e03      	subs	r3, r0, #0
   2dede:	d001      	beq.n	2dee4 <check_fs+0x24>
		return 3;
   2dee0:	2303      	movs	r3, #3
   2dee2:	e04b      	b.n	2df7c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2dee4:	687b      	ldr	r3, [r7, #4]
   2dee6:	4a28      	ldr	r2, [pc, #160]	; (2df88 <check_fs+0xc8>)
   2dee8:	4694      	mov	ip, r2
   2deea:	4463      	add	r3, ip
   2deec:	3301      	adds	r3, #1
   2deee:	781b      	ldrb	r3, [r3, #0]
   2def0:	021b      	lsls	r3, r3, #8
   2def2:	b21a      	sxth	r2, r3
   2def4:	687b      	ldr	r3, [r7, #4]
   2def6:	4924      	ldr	r1, [pc, #144]	; (2df88 <check_fs+0xc8>)
   2def8:	5c5b      	ldrb	r3, [r3, r1]
   2defa:	b21b      	sxth	r3, r3
   2defc:	4313      	orrs	r3, r2
   2defe:	b21b      	sxth	r3, r3
   2df00:	4a22      	ldr	r2, [pc, #136]	; (2df8c <check_fs+0xcc>)
   2df02:	4293      	cmp	r3, r2
   2df04:	d001      	beq.n	2df0a <check_fs+0x4a>
		return 2;
   2df06:	2302      	movs	r3, #2
   2df08:	e038      	b.n	2df7c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2df0a:	687b      	ldr	r3, [r7, #4]
   2df0c:	3366      	adds	r3, #102	; 0x66
   2df0e:	3303      	adds	r3, #3
   2df10:	781b      	ldrb	r3, [r3, #0]
   2df12:	061a      	lsls	r2, r3, #24
   2df14:	687b      	ldr	r3, [r7, #4]
   2df16:	3366      	adds	r3, #102	; 0x66
   2df18:	3302      	adds	r3, #2
   2df1a:	781b      	ldrb	r3, [r3, #0]
   2df1c:	041b      	lsls	r3, r3, #16
   2df1e:	4313      	orrs	r3, r2
   2df20:	687a      	ldr	r2, [r7, #4]
   2df22:	3266      	adds	r2, #102	; 0x66
   2df24:	3201      	adds	r2, #1
   2df26:	7812      	ldrb	r2, [r2, #0]
   2df28:	0212      	lsls	r2, r2, #8
   2df2a:	4313      	orrs	r3, r2
   2df2c:	687a      	ldr	r2, [r7, #4]
   2df2e:	2166      	movs	r1, #102	; 0x66
   2df30:	5c52      	ldrb	r2, [r2, r1]
   2df32:	4313      	orrs	r3, r2
   2df34:	021b      	lsls	r3, r3, #8
   2df36:	0a1b      	lsrs	r3, r3, #8
   2df38:	4a15      	ldr	r2, [pc, #84]	; (2df90 <check_fs+0xd0>)
   2df3a:	4293      	cmp	r3, r2
   2df3c:	d101      	bne.n	2df42 <check_fs+0x82>
		return 0;
   2df3e:	2300      	movs	r3, #0
   2df40:	e01c      	b.n	2df7c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2df42:	687b      	ldr	r3, [r7, #4]
   2df44:	3382      	adds	r3, #130	; 0x82
   2df46:	3303      	adds	r3, #3
   2df48:	781b      	ldrb	r3, [r3, #0]
   2df4a:	061a      	lsls	r2, r3, #24
   2df4c:	687b      	ldr	r3, [r7, #4]
   2df4e:	3382      	adds	r3, #130	; 0x82
   2df50:	3302      	adds	r3, #2
   2df52:	781b      	ldrb	r3, [r3, #0]
   2df54:	041b      	lsls	r3, r3, #16
   2df56:	4313      	orrs	r3, r2
   2df58:	687a      	ldr	r2, [r7, #4]
   2df5a:	3282      	adds	r2, #130	; 0x82
   2df5c:	3201      	adds	r2, #1
   2df5e:	7812      	ldrb	r2, [r2, #0]
   2df60:	0212      	lsls	r2, r2, #8
   2df62:	4313      	orrs	r3, r2
   2df64:	687a      	ldr	r2, [r7, #4]
   2df66:	2182      	movs	r1, #130	; 0x82
   2df68:	5c52      	ldrb	r2, [r2, r1]
   2df6a:	4313      	orrs	r3, r2
   2df6c:	021b      	lsls	r3, r3, #8
   2df6e:	0a1b      	lsrs	r3, r3, #8
   2df70:	4a07      	ldr	r2, [pc, #28]	; (2df90 <check_fs+0xd0>)
   2df72:	4293      	cmp	r3, r2
   2df74:	d101      	bne.n	2df7a <check_fs+0xba>
		return 0;
   2df76:	2300      	movs	r3, #0
   2df78:	e000      	b.n	2df7c <check_fs+0xbc>

	return 1;
   2df7a:	2301      	movs	r3, #1
}
   2df7c:	0018      	movs	r0, r3
   2df7e:	46bd      	mov	sp, r7
   2df80:	b003      	add	sp, #12
   2df82:	bd90      	pop	{r4, r7, pc}
   2df84:	0002c129 	.word	0x0002c129
   2df88:	0000022e 	.word	0x0000022e
   2df8c:	ffffaa55 	.word	0xffffaa55
   2df90:	00544146 	.word	0x00544146

0002df94 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2df94:	b590      	push	{r4, r7, lr}
   2df96:	b093      	sub	sp, #76	; 0x4c
   2df98:	af00      	add	r7, sp, #0
   2df9a:	60f8      	str	r0, [r7, #12]
   2df9c:	60b9      	str	r1, [r7, #8]
   2df9e:	1dfb      	adds	r3, r7, #7
   2dfa0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2dfa2:	68fb      	ldr	r3, [r7, #12]
   2dfa4:	681b      	ldr	r3, [r3, #0]
   2dfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfaa:	781b      	ldrb	r3, [r3, #0]
   2dfac:	3b30      	subs	r3, #48	; 0x30
   2dfae:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2dfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dfb2:	2b09      	cmp	r3, #9
   2dfb4:	d80b      	bhi.n	2dfce <chk_mounted+0x3a>
   2dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfb8:	3301      	adds	r3, #1
   2dfba:	781b      	ldrb	r3, [r3, #0]
   2dfbc:	2b3a      	cmp	r3, #58	; 0x3a
   2dfbe:	d106      	bne.n	2dfce <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfc2:	3302      	adds	r3, #2
   2dfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2dfc6:	68fb      	ldr	r3, [r7, #12]
   2dfc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2dfca:	601a      	str	r2, [r3, #0]
   2dfcc:	e001      	b.n	2dfd2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2dfce:	2300      	movs	r3, #0
   2dfd0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2dfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dfd4:	2b07      	cmp	r3, #7
   2dfd6:	d901      	bls.n	2dfdc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2dfd8:	230b      	movs	r3, #11
   2dfda:	e2af      	b.n	2e53c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2dfdc:	4bc5      	ldr	r3, [pc, #788]	; (2e2f4 <chk_mounted+0x360>)
   2dfde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2dfe0:	0092      	lsls	r2, r2, #2
   2dfe2:	58d3      	ldr	r3, [r2, r3]
   2dfe4:	62bb      	str	r3, [r7, #40]	; 0x28
   2dfe6:	68bb      	ldr	r3, [r7, #8]
   2dfe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfea:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfee:	2b00      	cmp	r3, #0
   2dff0:	d101      	bne.n	2dff6 <chk_mounted+0x62>
   2dff2:	230c      	movs	r3, #12
   2dff4:	e2a2      	b.n	2e53c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dff8:	781b      	ldrb	r3, [r3, #0]
   2dffa:	2b00      	cmp	r3, #0
   2dffc:	d01c      	beq.n	2e038 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2dffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e000:	785b      	ldrb	r3, [r3, #1]
   2e002:	2227      	movs	r2, #39	; 0x27
   2e004:	18bc      	adds	r4, r7, r2
   2e006:	0018      	movs	r0, r3
   2e008:	4bbb      	ldr	r3, [pc, #748]	; (2e2f8 <chk_mounted+0x364>)
   2e00a:	4798      	blx	r3
   2e00c:	0003      	movs	r3, r0
   2e00e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2e010:	2327      	movs	r3, #39	; 0x27
   2e012:	18fb      	adds	r3, r7, r3
   2e014:	781b      	ldrb	r3, [r3, #0]
   2e016:	2201      	movs	r2, #1
   2e018:	4013      	ands	r3, r2
   2e01a:	d10d      	bne.n	2e038 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2e01c:	1dfb      	adds	r3, r7, #7
   2e01e:	781b      	ldrb	r3, [r3, #0]
   2e020:	2b00      	cmp	r3, #0
   2e022:	d007      	beq.n	2e034 <chk_mounted+0xa0>
   2e024:	2327      	movs	r3, #39	; 0x27
   2e026:	18fb      	adds	r3, r7, r3
   2e028:	781b      	ldrb	r3, [r3, #0]
   2e02a:	2204      	movs	r2, #4
   2e02c:	4013      	ands	r3, r2
   2e02e:	d001      	beq.n	2e034 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2e030:	230a      	movs	r3, #10
   2e032:	e283      	b.n	2e53c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2e034:	2300      	movs	r3, #0
   2e036:	e281      	b.n	2e53c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e03a:	2200      	movs	r2, #0
   2e03c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2e03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e040:	b2da      	uxtb	r2, r3
   2e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e044:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e048:	785b      	ldrb	r3, [r3, #1]
   2e04a:	2227      	movs	r2, #39	; 0x27
   2e04c:	18bc      	adds	r4, r7, r2
   2e04e:	0018      	movs	r0, r3
   2e050:	4baa      	ldr	r3, [pc, #680]	; (2e2fc <chk_mounted+0x368>)
   2e052:	4798      	blx	r3
   2e054:	0003      	movs	r3, r0
   2e056:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2e058:	2327      	movs	r3, #39	; 0x27
   2e05a:	18fb      	adds	r3, r7, r3
   2e05c:	781b      	ldrb	r3, [r3, #0]
   2e05e:	2201      	movs	r2, #1
   2e060:	4013      	ands	r3, r2
   2e062:	d001      	beq.n	2e068 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2e064:	2303      	movs	r3, #3
   2e066:	e269      	b.n	2e53c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2e068:	1dfb      	adds	r3, r7, #7
   2e06a:	781b      	ldrb	r3, [r3, #0]
   2e06c:	2b00      	cmp	r3, #0
   2e06e:	d007      	beq.n	2e080 <chk_mounted+0xec>
   2e070:	2327      	movs	r3, #39	; 0x27
   2e072:	18fb      	adds	r3, r7, r3
   2e074:	781b      	ldrb	r3, [r3, #0]
   2e076:	2204      	movs	r2, #4
   2e078:	4013      	ands	r3, r2
   2e07a:	d001      	beq.n	2e080 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2e07c:	230a      	movs	r3, #10
   2e07e:	e25d      	b.n	2e53c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2e080:	2300      	movs	r3, #0
   2e082:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e084:	2347      	movs	r3, #71	; 0x47
   2e086:	18fc      	adds	r4, r7, r3
   2e088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e08c:	0011      	movs	r1, r2
   2e08e:	0018      	movs	r0, r3
   2e090:	4b9b      	ldr	r3, [pc, #620]	; (2e300 <chk_mounted+0x36c>)
   2e092:	4798      	blx	r3
   2e094:	0003      	movs	r3, r0
   2e096:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2e098:	2347      	movs	r3, #71	; 0x47
   2e09a:	18fb      	adds	r3, r7, r3
   2e09c:	781b      	ldrb	r3, [r3, #0]
   2e09e:	2b01      	cmp	r3, #1
   2e0a0:	d13b      	bne.n	2e11a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2e0a2:	2346      	movs	r3, #70	; 0x46
   2e0a4:	18fb      	adds	r3, r7, r3
   2e0a6:	2200      	movs	r2, #0
   2e0a8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2e0aa:	2346      	movs	r3, #70	; 0x46
   2e0ac:	18fb      	adds	r3, r7, r3
   2e0ae:	781b      	ldrb	r3, [r3, #0]
   2e0b0:	2b00      	cmp	r3, #0
   2e0b2:	d006      	beq.n	2e0c2 <chk_mounted+0x12e>
   2e0b4:	2346      	movs	r3, #70	; 0x46
   2e0b6:	18fb      	adds	r3, r7, r3
   2e0b8:	781a      	ldrb	r2, [r3, #0]
   2e0ba:	2346      	movs	r3, #70	; 0x46
   2e0bc:	18fb      	adds	r3, r7, r3
   2e0be:	3a01      	subs	r2, #1
   2e0c0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2e0c2:	2346      	movs	r3, #70	; 0x46
   2e0c4:	18fb      	adds	r3, r7, r3
   2e0c6:	781b      	ldrb	r3, [r3, #0]
   2e0c8:	011b      	lsls	r3, r3, #4
   2e0ca:	33bf      	adds	r3, #191	; 0xbf
   2e0cc:	33ff      	adds	r3, #255	; 0xff
   2e0ce:	3330      	adds	r3, #48	; 0x30
   2e0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0d2:	18d3      	adds	r3, r2, r3
   2e0d4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2e0d6:	6a3b      	ldr	r3, [r7, #32]
   2e0d8:	3304      	adds	r3, #4
   2e0da:	781b      	ldrb	r3, [r3, #0]
   2e0dc:	2b00      	cmp	r3, #0
   2e0de:	d01c      	beq.n	2e11a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e0e0:	6a3b      	ldr	r3, [r7, #32]
   2e0e2:	330b      	adds	r3, #11
   2e0e4:	781b      	ldrb	r3, [r3, #0]
   2e0e6:	061a      	lsls	r2, r3, #24
   2e0e8:	6a3b      	ldr	r3, [r7, #32]
   2e0ea:	330a      	adds	r3, #10
   2e0ec:	781b      	ldrb	r3, [r3, #0]
   2e0ee:	041b      	lsls	r3, r3, #16
   2e0f0:	4313      	orrs	r3, r2
   2e0f2:	6a3a      	ldr	r2, [r7, #32]
   2e0f4:	3209      	adds	r2, #9
   2e0f6:	7812      	ldrb	r2, [r2, #0]
   2e0f8:	0212      	lsls	r2, r2, #8
   2e0fa:	4313      	orrs	r3, r2
   2e0fc:	6a3a      	ldr	r2, [r7, #32]
   2e0fe:	3208      	adds	r2, #8
   2e100:	7812      	ldrb	r2, [r2, #0]
   2e102:	4313      	orrs	r3, r2
   2e104:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e106:	2347      	movs	r3, #71	; 0x47
   2e108:	18fc      	adds	r4, r7, r3
   2e10a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e10e:	0011      	movs	r1, r2
   2e110:	0018      	movs	r0, r3
   2e112:	4b7b      	ldr	r3, [pc, #492]	; (2e300 <chk_mounted+0x36c>)
   2e114:	4798      	blx	r3
   2e116:	0003      	movs	r3, r0
   2e118:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e11a:	2347      	movs	r3, #71	; 0x47
   2e11c:	18fb      	adds	r3, r7, r3
   2e11e:	781b      	ldrb	r3, [r3, #0]
   2e120:	2b03      	cmp	r3, #3
   2e122:	d101      	bne.n	2e128 <chk_mounted+0x194>
   2e124:	2301      	movs	r3, #1
   2e126:	e209      	b.n	2e53c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e128:	2347      	movs	r3, #71	; 0x47
   2e12a:	18fb      	adds	r3, r7, r3
   2e12c:	781b      	ldrb	r3, [r3, #0]
   2e12e:	2b00      	cmp	r3, #0
   2e130:	d001      	beq.n	2e136 <chk_mounted+0x1a2>
   2e132:	230d      	movs	r3, #13
   2e134:	e202      	b.n	2e53c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e138:	223c      	movs	r2, #60	; 0x3c
   2e13a:	5c9b      	ldrb	r3, [r3, r2]
   2e13c:	021b      	lsls	r3, r3, #8
   2e13e:	b21a      	sxth	r2, r3
   2e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e142:	213b      	movs	r1, #59	; 0x3b
   2e144:	5c5b      	ldrb	r3, [r3, r1]
   2e146:	b21b      	sxth	r3, r3
   2e148:	4313      	orrs	r3, r2
   2e14a:	b21a      	sxth	r2, r3
   2e14c:	2380      	movs	r3, #128	; 0x80
   2e14e:	009b      	lsls	r3, r3, #2
   2e150:	429a      	cmp	r2, r3
   2e152:	d001      	beq.n	2e158 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e154:	230d      	movs	r3, #13
   2e156:	e1f1      	b.n	2e53c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e15a:	2247      	movs	r2, #71	; 0x47
   2e15c:	5c9b      	ldrb	r3, [r3, r2]
   2e15e:	021b      	lsls	r3, r3, #8
   2e160:	b21a      	sxth	r2, r3
   2e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e164:	2146      	movs	r1, #70	; 0x46
   2e166:	5c5b      	ldrb	r3, [r3, r1]
   2e168:	b21b      	sxth	r3, r3
   2e16a:	4313      	orrs	r3, r2
   2e16c:	b21b      	sxth	r3, r3
   2e16e:	b29b      	uxth	r3, r3
   2e170:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e174:	2b00      	cmp	r3, #0
   2e176:	d112      	bne.n	2e19e <chk_mounted+0x20a>
   2e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e17a:	2257      	movs	r2, #87	; 0x57
   2e17c:	5c9b      	ldrb	r3, [r3, r2]
   2e17e:	061a      	lsls	r2, r3, #24
   2e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e182:	2156      	movs	r1, #86	; 0x56
   2e184:	5c5b      	ldrb	r3, [r3, r1]
   2e186:	041b      	lsls	r3, r3, #16
   2e188:	4313      	orrs	r3, r2
   2e18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e18c:	2155      	movs	r1, #85	; 0x55
   2e18e:	5c52      	ldrb	r2, [r2, r1]
   2e190:	0212      	lsls	r2, r2, #8
   2e192:	4313      	orrs	r3, r2
   2e194:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e196:	2154      	movs	r1, #84	; 0x54
   2e198:	5c52      	ldrb	r2, [r2, r1]
   2e19a:	4313      	orrs	r3, r2
   2e19c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e1a2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e1a4:	231f      	movs	r3, #31
   2e1a6:	18fb      	adds	r3, r7, r3
   2e1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1aa:	2140      	movs	r1, #64	; 0x40
   2e1ac:	5c52      	ldrb	r2, [r2, r1]
   2e1ae:	701a      	strb	r2, [r3, #0]
   2e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1b2:	221f      	movs	r2, #31
   2e1b4:	18ba      	adds	r2, r7, r2
   2e1b6:	7812      	ldrb	r2, [r2, #0]
   2e1b8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e1ba:	231f      	movs	r3, #31
   2e1bc:	18fb      	adds	r3, r7, r3
   2e1be:	781b      	ldrb	r3, [r3, #0]
   2e1c0:	2b01      	cmp	r3, #1
   2e1c2:	d006      	beq.n	2e1d2 <chk_mounted+0x23e>
   2e1c4:	231f      	movs	r3, #31
   2e1c6:	18fb      	adds	r3, r7, r3
   2e1c8:	781b      	ldrb	r3, [r3, #0]
   2e1ca:	2b02      	cmp	r3, #2
   2e1cc:	d001      	beq.n	2e1d2 <chk_mounted+0x23e>
   2e1ce:	230d      	movs	r3, #13
   2e1d0:	e1b4      	b.n	2e53c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e1d2:	231f      	movs	r3, #31
   2e1d4:	18fb      	adds	r3, r7, r3
   2e1d6:	781a      	ldrb	r2, [r3, #0]
   2e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e1da:	4353      	muls	r3, r2
   2e1dc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e1de:	231f      	movs	r3, #31
   2e1e0:	18fb      	adds	r3, r7, r3
   2e1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1e4:	213d      	movs	r1, #61	; 0x3d
   2e1e6:	5c52      	ldrb	r2, [r2, r1]
   2e1e8:	701a      	strb	r2, [r3, #0]
   2e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1ec:	221f      	movs	r2, #31
   2e1ee:	18ba      	adds	r2, r7, r2
   2e1f0:	7812      	ldrb	r2, [r2, #0]
   2e1f2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e1f4:	231f      	movs	r3, #31
   2e1f6:	18fb      	adds	r3, r7, r3
   2e1f8:	781b      	ldrb	r3, [r3, #0]
   2e1fa:	2b00      	cmp	r3, #0
   2e1fc:	d008      	beq.n	2e210 <chk_mounted+0x27c>
   2e1fe:	231f      	movs	r3, #31
   2e200:	18fb      	adds	r3, r7, r3
   2e202:	781b      	ldrb	r3, [r3, #0]
   2e204:	221f      	movs	r2, #31
   2e206:	18ba      	adds	r2, r7, r2
   2e208:	7812      	ldrb	r2, [r2, #0]
   2e20a:	3a01      	subs	r2, #1
   2e20c:	4013      	ands	r3, r2
   2e20e:	d001      	beq.n	2e214 <chk_mounted+0x280>
   2e210:	230d      	movs	r3, #13
   2e212:	e193      	b.n	2e53c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e216:	2242      	movs	r2, #66	; 0x42
   2e218:	5c9b      	ldrb	r3, [r3, r2]
   2e21a:	021b      	lsls	r3, r3, #8
   2e21c:	b21a      	sxth	r2, r3
   2e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e220:	2141      	movs	r1, #65	; 0x41
   2e222:	5c5b      	ldrb	r3, [r3, r1]
   2e224:	b21b      	sxth	r3, r3
   2e226:	4313      	orrs	r3, r2
   2e228:	b21b      	sxth	r3, r3
   2e22a:	b29a      	uxth	r2, r3
   2e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e22e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e232:	891b      	ldrh	r3, [r3, #8]
   2e234:	220f      	movs	r2, #15
   2e236:	4013      	ands	r3, r2
   2e238:	b29b      	uxth	r3, r3
   2e23a:	2b00      	cmp	r3, #0
   2e23c:	d001      	beq.n	2e242 <chk_mounted+0x2ae>
   2e23e:	230d      	movs	r3, #13
   2e240:	e17c      	b.n	2e53c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e244:	2244      	movs	r2, #68	; 0x44
   2e246:	5c9b      	ldrb	r3, [r3, r2]
   2e248:	021b      	lsls	r3, r3, #8
   2e24a:	b21a      	sxth	r2, r3
   2e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e24e:	2143      	movs	r1, #67	; 0x43
   2e250:	5c5b      	ldrb	r3, [r3, r1]
   2e252:	b21b      	sxth	r3, r3
   2e254:	4313      	orrs	r3, r2
   2e256:	b21b      	sxth	r3, r3
   2e258:	b29b      	uxth	r3, r3
   2e25a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e25e:	2b00      	cmp	r3, #0
   2e260:	d112      	bne.n	2e288 <chk_mounted+0x2f4>
   2e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e264:	2253      	movs	r2, #83	; 0x53
   2e266:	5c9b      	ldrb	r3, [r3, r2]
   2e268:	061a      	lsls	r2, r3, #24
   2e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e26c:	2152      	movs	r1, #82	; 0x52
   2e26e:	5c5b      	ldrb	r3, [r3, r1]
   2e270:	041b      	lsls	r3, r3, #16
   2e272:	4313      	orrs	r3, r2
   2e274:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e276:	2151      	movs	r1, #81	; 0x51
   2e278:	5c52      	ldrb	r2, [r2, r1]
   2e27a:	0212      	lsls	r2, r2, #8
   2e27c:	4313      	orrs	r3, r2
   2e27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e280:	2150      	movs	r1, #80	; 0x50
   2e282:	5c52      	ldrb	r2, [r2, r1]
   2e284:	4313      	orrs	r3, r2
   2e286:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e28a:	223f      	movs	r2, #63	; 0x3f
   2e28c:	5c9b      	ldrb	r3, [r3, r2]
   2e28e:	021b      	lsls	r3, r3, #8
   2e290:	b21a      	sxth	r2, r3
   2e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e294:	213e      	movs	r1, #62	; 0x3e
   2e296:	5c5b      	ldrb	r3, [r3, r1]
   2e298:	b21b      	sxth	r3, r3
   2e29a:	4313      	orrs	r3, r2
   2e29c:	b21a      	sxth	r2, r3
   2e29e:	231c      	movs	r3, #28
   2e2a0:	18fb      	adds	r3, r7, r3
   2e2a2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e2a4:	231c      	movs	r3, #28
   2e2a6:	18fb      	adds	r3, r7, r3
   2e2a8:	881b      	ldrh	r3, [r3, #0]
   2e2aa:	2b00      	cmp	r3, #0
   2e2ac:	d101      	bne.n	2e2b2 <chk_mounted+0x31e>
   2e2ae:	230d      	movs	r3, #13
   2e2b0:	e144      	b.n	2e53c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e2b2:	231c      	movs	r3, #28
   2e2b4:	18fb      	adds	r3, r7, r3
   2e2b6:	881a      	ldrh	r2, [r3, #0]
   2e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e2ba:	18d3      	adds	r3, r2, r3
   2e2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2be:	8912      	ldrh	r2, [r2, #8]
   2e2c0:	0912      	lsrs	r2, r2, #4
   2e2c2:	b292      	uxth	r2, r2
   2e2c4:	189b      	adds	r3, r3, r2
   2e2c6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e2c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e2ca:	69bb      	ldr	r3, [r7, #24]
   2e2cc:	429a      	cmp	r2, r3
   2e2ce:	d201      	bcs.n	2e2d4 <chk_mounted+0x340>
   2e2d0:	230d      	movs	r3, #13
   2e2d2:	e133      	b.n	2e53c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e2d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e2d6:	69bb      	ldr	r3, [r7, #24]
   2e2d8:	1ad2      	subs	r2, r2, r3
   2e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2dc:	789b      	ldrb	r3, [r3, #2]
   2e2de:	0019      	movs	r1, r3
   2e2e0:	4b08      	ldr	r3, [pc, #32]	; (2e304 <chk_mounted+0x370>)
   2e2e2:	0010      	movs	r0, r2
   2e2e4:	4798      	blx	r3
   2e2e6:	0003      	movs	r3, r0
   2e2e8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e2ea:	697b      	ldr	r3, [r7, #20]
   2e2ec:	2b00      	cmp	r3, #0
   2e2ee:	d10b      	bne.n	2e308 <chk_mounted+0x374>
   2e2f0:	230d      	movs	r3, #13
   2e2f2:	e123      	b.n	2e53c <chk_mounted+0x5a8>
   2e2f4:	200042fc 	.word	0x200042fc
   2e2f8:	0002c0f1 	.word	0x0002c0f1
   2e2fc:	0002c06d 	.word	0x0002c06d
   2e300:	0002dec1 	.word	0x0002dec1
   2e304:	00033715 	.word	0x00033715
	fmt = FS_FAT12;
   2e308:	2347      	movs	r3, #71	; 0x47
   2e30a:	18fb      	adds	r3, r7, r3
   2e30c:	2201      	movs	r2, #1
   2e30e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e310:	697b      	ldr	r3, [r7, #20]
   2e312:	4a8c      	ldr	r2, [pc, #560]	; (2e544 <chk_mounted+0x5b0>)
   2e314:	4293      	cmp	r3, r2
   2e316:	d903      	bls.n	2e320 <chk_mounted+0x38c>
   2e318:	2347      	movs	r3, #71	; 0x47
   2e31a:	18fb      	adds	r3, r7, r3
   2e31c:	2202      	movs	r2, #2
   2e31e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e320:	697b      	ldr	r3, [r7, #20]
   2e322:	4a89      	ldr	r2, [pc, #548]	; (2e548 <chk_mounted+0x5b4>)
   2e324:	4293      	cmp	r3, r2
   2e326:	d903      	bls.n	2e330 <chk_mounted+0x39c>
   2e328:	2347      	movs	r3, #71	; 0x47
   2e32a:	18fb      	adds	r3, r7, r3
   2e32c:	2203      	movs	r2, #3
   2e32e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e330:	697b      	ldr	r3, [r7, #20]
   2e332:	1c9a      	adds	r2, r3, #2
   2e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e336:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e33a:	69bb      	ldr	r3, [r7, #24]
   2e33c:	18d2      	adds	r2, r2, r3
   2e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e340:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e342:	231c      	movs	r3, #28
   2e344:	18fb      	adds	r3, r7, r3
   2e346:	881a      	ldrh	r2, [r3, #0]
   2e348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e34a:	18d2      	adds	r2, r2, r3
   2e34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e34e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e350:	2347      	movs	r3, #71	; 0x47
   2e352:	18fb      	adds	r3, r7, r3
   2e354:	781b      	ldrb	r3, [r3, #0]
   2e356:	2b03      	cmp	r3, #3
   2e358:	d11e      	bne.n	2e398 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e35c:	891b      	ldrh	r3, [r3, #8]
   2e35e:	2b00      	cmp	r3, #0
   2e360:	d001      	beq.n	2e366 <chk_mounted+0x3d2>
   2e362:	230d      	movs	r3, #13
   2e364:	e0ea      	b.n	2e53c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e368:	225f      	movs	r2, #95	; 0x5f
   2e36a:	5c9b      	ldrb	r3, [r3, r2]
   2e36c:	061a      	lsls	r2, r3, #24
   2e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e370:	215e      	movs	r1, #94	; 0x5e
   2e372:	5c5b      	ldrb	r3, [r3, r1]
   2e374:	041b      	lsls	r3, r3, #16
   2e376:	4313      	orrs	r3, r2
   2e378:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e37a:	215d      	movs	r1, #93	; 0x5d
   2e37c:	5c52      	ldrb	r2, [r2, r1]
   2e37e:	0212      	lsls	r2, r2, #8
   2e380:	4313      	orrs	r3, r2
   2e382:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e384:	215c      	movs	r1, #92	; 0x5c
   2e386:	5c52      	ldrb	r2, [r2, r1]
   2e388:	431a      	orrs	r2, r3
   2e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e38c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e390:	699b      	ldr	r3, [r3, #24]
   2e392:	009b      	lsls	r3, r3, #2
   2e394:	633b      	str	r3, [r7, #48]	; 0x30
   2e396:	e020      	b.n	2e3da <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e39a:	891b      	ldrh	r3, [r3, #8]
   2e39c:	2b00      	cmp	r3, #0
   2e39e:	d101      	bne.n	2e3a4 <chk_mounted+0x410>
   2e3a0:	230d      	movs	r3, #13
   2e3a2:	e0cb      	b.n	2e53c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3a6:	6a1a      	ldr	r2, [r3, #32]
   2e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e3aa:	18d2      	adds	r2, r2, r3
   2e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ae:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e3b0:	2347      	movs	r3, #71	; 0x47
   2e3b2:	18fb      	adds	r3, r7, r3
   2e3b4:	781b      	ldrb	r3, [r3, #0]
   2e3b6:	2b02      	cmp	r3, #2
   2e3b8:	d103      	bne.n	2e3c2 <chk_mounted+0x42e>
   2e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3bc:	699b      	ldr	r3, [r3, #24]
   2e3be:	005b      	lsls	r3, r3, #1
   2e3c0:	e00a      	b.n	2e3d8 <chk_mounted+0x444>
   2e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c4:	699a      	ldr	r2, [r3, #24]
   2e3c6:	0013      	movs	r3, r2
   2e3c8:	005b      	lsls	r3, r3, #1
   2e3ca:	189b      	adds	r3, r3, r2
   2e3cc:	085a      	lsrs	r2, r3, #1
   2e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3d0:	699b      	ldr	r3, [r3, #24]
   2e3d2:	2101      	movs	r1, #1
   2e3d4:	400b      	ands	r3, r1
   2e3d6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e3d8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3dc:	69da      	ldr	r2, [r3, #28]
   2e3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3e0:	495a      	ldr	r1, [pc, #360]	; (2e54c <chk_mounted+0x5b8>)
   2e3e2:	468c      	mov	ip, r1
   2e3e4:	4463      	add	r3, ip
   2e3e6:	0a5b      	lsrs	r3, r3, #9
   2e3e8:	429a      	cmp	r2, r3
   2e3ea:	d201      	bcs.n	2e3f0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e3ec:	230d      	movs	r3, #13
   2e3ee:	e0a5      	b.n	2e53c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f2:	2201      	movs	r2, #1
   2e3f4:	4252      	negs	r2, r2
   2e3f6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3fa:	2200      	movs	r2, #0
   2e3fc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e3fe:	2347      	movs	r3, #71	; 0x47
   2e400:	18fb      	adds	r3, r7, r3
   2e402:	781b      	ldrb	r3, [r3, #0]
   2e404:	2b03      	cmp	r3, #3
   2e406:	d000      	beq.n	2e40a <chk_mounted+0x476>
   2e408:	e082      	b.n	2e510 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e40c:	2200      	movs	r2, #0
   2e40e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e412:	2261      	movs	r2, #97	; 0x61
   2e414:	5c9b      	ldrb	r3, [r3, r2]
   2e416:	021b      	lsls	r3, r3, #8
   2e418:	b21a      	sxth	r2, r3
   2e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e41c:	2160      	movs	r1, #96	; 0x60
   2e41e:	5c5b      	ldrb	r3, [r3, r1]
   2e420:	b21b      	sxth	r3, r3
   2e422:	4313      	orrs	r3, r2
   2e424:	b21b      	sxth	r3, r3
   2e426:	b29b      	uxth	r3, r3
   2e428:	001a      	movs	r2, r3
   2e42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e42c:	18d2      	adds	r2, r2, r3
   2e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e430:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e434:	7858      	ldrb	r0, [r3, #1]
   2e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e438:	3330      	adds	r3, #48	; 0x30
   2e43a:	0019      	movs	r1, r3
   2e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e43e:	695a      	ldr	r2, [r3, #20]
   2e440:	2301      	movs	r3, #1
   2e442:	4c43      	ldr	r4, [pc, #268]	; (2e550 <chk_mounted+0x5bc>)
   2e444:	47a0      	blx	r4
   2e446:	1e03      	subs	r3, r0, #0
   2e448:	d162      	bne.n	2e510 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e44c:	4a41      	ldr	r2, [pc, #260]	; (2e554 <chk_mounted+0x5c0>)
   2e44e:	5c9b      	ldrb	r3, [r3, r2]
   2e450:	021b      	lsls	r3, r3, #8
   2e452:	b21a      	sxth	r2, r3
   2e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e456:	4940      	ldr	r1, [pc, #256]	; (2e558 <chk_mounted+0x5c4>)
   2e458:	5c5b      	ldrb	r3, [r3, r1]
   2e45a:	b21b      	sxth	r3, r3
   2e45c:	4313      	orrs	r3, r2
   2e45e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e460:	4a3e      	ldr	r2, [pc, #248]	; (2e55c <chk_mounted+0x5c8>)
   2e462:	4293      	cmp	r3, r2
   2e464:	d154      	bne.n	2e510 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e468:	2233      	movs	r2, #51	; 0x33
   2e46a:	5c9b      	ldrb	r3, [r3, r2]
   2e46c:	061a      	lsls	r2, r3, #24
   2e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e470:	2132      	movs	r1, #50	; 0x32
   2e472:	5c5b      	ldrb	r3, [r3, r1]
   2e474:	041b      	lsls	r3, r3, #16
   2e476:	4313      	orrs	r3, r2
   2e478:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e47a:	2131      	movs	r1, #49	; 0x31
   2e47c:	5c52      	ldrb	r2, [r2, r1]
   2e47e:	0212      	lsls	r2, r2, #8
   2e480:	4313      	orrs	r3, r2
   2e482:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e484:	2130      	movs	r1, #48	; 0x30
   2e486:	5c52      	ldrb	r2, [r2, r1]
   2e488:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e48a:	4a35      	ldr	r2, [pc, #212]	; (2e560 <chk_mounted+0x5cc>)
   2e48c:	4293      	cmp	r3, r2
   2e48e:	d13f      	bne.n	2e510 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e492:	4a34      	ldr	r2, [pc, #208]	; (2e564 <chk_mounted+0x5d0>)
   2e494:	5c9b      	ldrb	r3, [r3, r2]
   2e496:	061a      	lsls	r2, r3, #24
   2e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e49a:	4933      	ldr	r1, [pc, #204]	; (2e568 <chk_mounted+0x5d4>)
   2e49c:	5c5b      	ldrb	r3, [r3, r1]
   2e49e:	041b      	lsls	r3, r3, #16
   2e4a0:	4313      	orrs	r3, r2
   2e4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4a4:	4931      	ldr	r1, [pc, #196]	; (2e56c <chk_mounted+0x5d8>)
   2e4a6:	5c52      	ldrb	r2, [r2, r1]
   2e4a8:	0212      	lsls	r2, r2, #8
   2e4aa:	4313      	orrs	r3, r2
   2e4ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e4ae:	2285      	movs	r2, #133	; 0x85
   2e4b0:	0092      	lsls	r2, r2, #2
   2e4b2:	5c8a      	ldrb	r2, [r1, r2]
   2e4b4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e4b6:	4a2e      	ldr	r2, [pc, #184]	; (2e570 <chk_mounted+0x5dc>)
   2e4b8:	4293      	cmp	r3, r2
   2e4ba:	d129      	bne.n	2e510 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4be:	4a2d      	ldr	r2, [pc, #180]	; (2e574 <chk_mounted+0x5e0>)
   2e4c0:	5c9b      	ldrb	r3, [r3, r2]
   2e4c2:	061a      	lsls	r2, r3, #24
   2e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4c6:	492c      	ldr	r1, [pc, #176]	; (2e578 <chk_mounted+0x5e4>)
   2e4c8:	5c5b      	ldrb	r3, [r3, r1]
   2e4ca:	041b      	lsls	r3, r3, #16
   2e4cc:	4313      	orrs	r3, r2
   2e4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4d0:	492a      	ldr	r1, [pc, #168]	; (2e57c <chk_mounted+0x5e8>)
   2e4d2:	5c52      	ldrb	r2, [r2, r1]
   2e4d4:	0212      	lsls	r2, r2, #8
   2e4d6:	4313      	orrs	r3, r2
   2e4d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e4da:	2287      	movs	r2, #135	; 0x87
   2e4dc:	0092      	lsls	r2, r2, #2
   2e4de:	5c8a      	ldrb	r2, [r1, r2]
   2e4e0:	431a      	orrs	r2, r3
   2e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e8:	4a25      	ldr	r2, [pc, #148]	; (2e580 <chk_mounted+0x5ec>)
   2e4ea:	5c9b      	ldrb	r3, [r3, r2]
   2e4ec:	061a      	lsls	r2, r3, #24
   2e4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4f0:	4924      	ldr	r1, [pc, #144]	; (2e584 <chk_mounted+0x5f0>)
   2e4f2:	5c5b      	ldrb	r3, [r3, r1]
   2e4f4:	041b      	lsls	r3, r3, #16
   2e4f6:	4313      	orrs	r3, r2
   2e4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4fa:	4923      	ldr	r1, [pc, #140]	; (2e588 <chk_mounted+0x5f4>)
   2e4fc:	5c52      	ldrb	r2, [r2, r1]
   2e4fe:	0212      	lsls	r2, r2, #8
   2e500:	4313      	orrs	r3, r2
   2e502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e504:	2286      	movs	r2, #134	; 0x86
   2e506:	0092      	lsls	r2, r2, #2
   2e508:	5c8a      	ldrb	r2, [r1, r2]
   2e50a:	431a      	orrs	r2, r3
   2e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e50e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e510:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e512:	2247      	movs	r2, #71	; 0x47
   2e514:	18ba      	adds	r2, r7, r2
   2e516:	7812      	ldrb	r2, [r2, #0]
   2e518:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e51a:	4b1c      	ldr	r3, [pc, #112]	; (2e58c <chk_mounted+0x5f8>)
   2e51c:	881b      	ldrh	r3, [r3, #0]
   2e51e:	3301      	adds	r3, #1
   2e520:	b29a      	uxth	r2, r3
   2e522:	4b1a      	ldr	r3, [pc, #104]	; (2e58c <chk_mounted+0x5f8>)
   2e524:	801a      	strh	r2, [r3, #0]
   2e526:	4b19      	ldr	r3, [pc, #100]	; (2e58c <chk_mounted+0x5f8>)
   2e528:	881a      	ldrh	r2, [r3, #0]
   2e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e52c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e530:	2200      	movs	r2, #0
   2e532:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e536:	2200      	movs	r2, #0
   2e538:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e53a:	2300      	movs	r3, #0
}
   2e53c:	0018      	movs	r0, r3
   2e53e:	46bd      	mov	sp, r7
   2e540:	b013      	add	sp, #76	; 0x4c
   2e542:	bd90      	pop	{r4, r7, pc}
   2e544:	00000ff5 	.word	0x00000ff5
   2e548:	0000fff5 	.word	0x0000fff5
   2e54c:	000001ff 	.word	0x000001ff
   2e550:	0002c129 	.word	0x0002c129
   2e554:	0000022f 	.word	0x0000022f
   2e558:	0000022e 	.word	0x0000022e
   2e55c:	ffffaa55 	.word	0xffffaa55
   2e560:	41615252 	.word	0x41615252
   2e564:	00000217 	.word	0x00000217
   2e568:	00000216 	.word	0x00000216
   2e56c:	00000215 	.word	0x00000215
   2e570:	61417272 	.word	0x61417272
   2e574:	0000021f 	.word	0x0000021f
   2e578:	0000021e 	.word	0x0000021e
   2e57c:	0000021d 	.word	0x0000021d
   2e580:	0000021b 	.word	0x0000021b
   2e584:	0000021a 	.word	0x0000021a
   2e588:	00000219 	.word	0x00000219
   2e58c:	2000431c 	.word	0x2000431c

0002e590 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e590:	b580      	push	{r7, lr}
   2e592:	b082      	sub	sp, #8
   2e594:	af00      	add	r7, sp, #0
   2e596:	6078      	str	r0, [r7, #4]
   2e598:	000a      	movs	r2, r1
   2e59a:	1cbb      	adds	r3, r7, #2
   2e59c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e59e:	687b      	ldr	r3, [r7, #4]
   2e5a0:	2b00      	cmp	r3, #0
   2e5a2:	d009      	beq.n	2e5b8 <validate+0x28>
   2e5a4:	687b      	ldr	r3, [r7, #4]
   2e5a6:	781b      	ldrb	r3, [r3, #0]
   2e5a8:	2b00      	cmp	r3, #0
   2e5aa:	d005      	beq.n	2e5b8 <validate+0x28>
   2e5ac:	687b      	ldr	r3, [r7, #4]
   2e5ae:	88db      	ldrh	r3, [r3, #6]
   2e5b0:	1cba      	adds	r2, r7, #2
   2e5b2:	8812      	ldrh	r2, [r2, #0]
   2e5b4:	429a      	cmp	r2, r3
   2e5b6:	d001      	beq.n	2e5bc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e5b8:	2309      	movs	r3, #9
   2e5ba:	e00c      	b.n	2e5d6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e5bc:	687b      	ldr	r3, [r7, #4]
   2e5be:	785b      	ldrb	r3, [r3, #1]
   2e5c0:	0018      	movs	r0, r3
   2e5c2:	4b07      	ldr	r3, [pc, #28]	; (2e5e0 <validate+0x50>)
   2e5c4:	4798      	blx	r3
   2e5c6:	0003      	movs	r3, r0
   2e5c8:	001a      	movs	r2, r3
   2e5ca:	2301      	movs	r3, #1
   2e5cc:	4013      	ands	r3, r2
   2e5ce:	d001      	beq.n	2e5d4 <validate+0x44>
		return FR_NOT_READY;
   2e5d0:	2303      	movs	r3, #3
   2e5d2:	e000      	b.n	2e5d6 <validate+0x46>

	return FR_OK;
   2e5d4:	2300      	movs	r3, #0
}
   2e5d6:	0018      	movs	r0, r3
   2e5d8:	46bd      	mov	sp, r7
   2e5da:	b002      	add	sp, #8
   2e5dc:	bd80      	pop	{r7, pc}
   2e5de:	46c0      	nop			; (mov r8, r8)
   2e5e0:	0002c0f1 	.word	0x0002c0f1

0002e5e4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e5e4:	b580      	push	{r7, lr}
   2e5e6:	b084      	sub	sp, #16
   2e5e8:	af00      	add	r7, sp, #0
   2e5ea:	0002      	movs	r2, r0
   2e5ec:	6039      	str	r1, [r7, #0]
   2e5ee:	1dfb      	adds	r3, r7, #7
   2e5f0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e5f2:	1dfb      	adds	r3, r7, #7
   2e5f4:	781b      	ldrb	r3, [r3, #0]
   2e5f6:	2b07      	cmp	r3, #7
   2e5f8:	d901      	bls.n	2e5fe <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e5fa:	230b      	movs	r3, #11
   2e5fc:	e018      	b.n	2e630 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e5fe:	1dfb      	adds	r3, r7, #7
   2e600:	781a      	ldrb	r2, [r3, #0]
   2e602:	4b0d      	ldr	r3, [pc, #52]	; (2e638 <f_mount+0x54>)
   2e604:	0092      	lsls	r2, r2, #2
   2e606:	58d3      	ldr	r3, [r2, r3]
   2e608:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e60a:	68fb      	ldr	r3, [r7, #12]
   2e60c:	2b00      	cmp	r3, #0
   2e60e:	d002      	beq.n	2e616 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e610:	68fb      	ldr	r3, [r7, #12]
   2e612:	2200      	movs	r2, #0
   2e614:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e616:	683b      	ldr	r3, [r7, #0]
   2e618:	2b00      	cmp	r3, #0
   2e61a:	d002      	beq.n	2e622 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e61c:	683b      	ldr	r3, [r7, #0]
   2e61e:	2200      	movs	r2, #0
   2e620:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e622:	1dfb      	adds	r3, r7, #7
   2e624:	781a      	ldrb	r2, [r3, #0]
   2e626:	4b04      	ldr	r3, [pc, #16]	; (2e638 <f_mount+0x54>)
   2e628:	0092      	lsls	r2, r2, #2
   2e62a:	6839      	ldr	r1, [r7, #0]
   2e62c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e62e:	2300      	movs	r3, #0
}
   2e630:	0018      	movs	r0, r3
   2e632:	46bd      	mov	sp, r7
   2e634:	b004      	add	sp, #16
   2e636:	bd80      	pop	{r7, pc}
   2e638:	200042fc 	.word	0x200042fc

0002e63c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e63c:	b590      	push	{r4, r7, lr}
   2e63e:	4ce5      	ldr	r4, [pc, #916]	; (2e9d4 <f_open+0x398>)
   2e640:	44a5      	add	sp, r4
   2e642:	af00      	add	r7, sp, #0
   2e644:	60f8      	str	r0, [r7, #12]
   2e646:	60b9      	str	r1, [r7, #8]
   2e648:	4be3      	ldr	r3, [pc, #908]	; (2e9d8 <f_open+0x39c>)
   2e64a:	2194      	movs	r1, #148	; 0x94
   2e64c:	0089      	lsls	r1, r1, #2
   2e64e:	468c      	mov	ip, r1
   2e650:	44bc      	add	ip, r7
   2e652:	4463      	add	r3, ip
   2e654:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e656:	68fb      	ldr	r3, [r7, #12]
   2e658:	2200      	movs	r2, #0
   2e65a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e65c:	4bde      	ldr	r3, [pc, #888]	; (2e9d8 <f_open+0x39c>)
   2e65e:	2294      	movs	r2, #148	; 0x94
   2e660:	0092      	lsls	r2, r2, #2
   2e662:	4694      	mov	ip, r2
   2e664:	44bc      	add	ip, r7
   2e666:	4463      	add	r3, ip
   2e668:	4adb      	ldr	r2, [pc, #876]	; (2e9d8 <f_open+0x39c>)
   2e66a:	2194      	movs	r1, #148	; 0x94
   2e66c:	0089      	lsls	r1, r1, #2
   2e66e:	468c      	mov	ip, r1
   2e670:	44bc      	add	ip, r7
   2e672:	4462      	add	r2, ip
   2e674:	7812      	ldrb	r2, [r2, #0]
   2e676:	211f      	movs	r1, #31
   2e678:	400a      	ands	r2, r1
   2e67a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e67c:	4bd6      	ldr	r3, [pc, #856]	; (2e9d8 <f_open+0x39c>)
   2e67e:	2294      	movs	r2, #148	; 0x94
   2e680:	0092      	lsls	r2, r2, #2
   2e682:	4694      	mov	ip, r2
   2e684:	44bc      	add	ip, r7
   2e686:	4463      	add	r3, ip
   2e688:	781b      	ldrb	r3, [r3, #0]
   2e68a:	2201      	movs	r2, #1
   2e68c:	4393      	bics	r3, r2
   2e68e:	b2da      	uxtb	r2, r3
   2e690:	4bd2      	ldr	r3, [pc, #840]	; (2e9dc <f_open+0x3a0>)
   2e692:	18fc      	adds	r4, r7, r3
   2e694:	2387      	movs	r3, #135	; 0x87
   2e696:	009b      	lsls	r3, r3, #2
   2e698:	18f9      	adds	r1, r7, r3
   2e69a:	2308      	movs	r3, #8
   2e69c:	18fb      	adds	r3, r7, r3
   2e69e:	0018      	movs	r0, r3
   2e6a0:	4bcf      	ldr	r3, [pc, #828]	; (2e9e0 <f_open+0x3a4>)
   2e6a2:	4798      	blx	r3
   2e6a4:	0003      	movs	r3, r0
   2e6a6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e6a8:	2387      	movs	r3, #135	; 0x87
   2e6aa:	009b      	lsls	r3, r3, #2
   2e6ac:	18fb      	adds	r3, r7, r3
   2e6ae:	2284      	movs	r2, #132	; 0x84
   2e6b0:	0092      	lsls	r2, r2, #2
   2e6b2:	18ba      	adds	r2, r7, r2
   2e6b4:	619a      	str	r2, [r3, #24]
   2e6b6:	2387      	movs	r3, #135	; 0x87
   2e6b8:	009b      	lsls	r3, r3, #2
   2e6ba:	18fb      	adds	r3, r7, r3
   2e6bc:	2210      	movs	r2, #16
   2e6be:	18ba      	adds	r2, r7, r2
   2e6c0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e6c2:	4bc6      	ldr	r3, [pc, #792]	; (2e9dc <f_open+0x3a0>)
   2e6c4:	18fb      	adds	r3, r7, r3
   2e6c6:	781b      	ldrb	r3, [r3, #0]
   2e6c8:	2b00      	cmp	r3, #0
   2e6ca:	d10b      	bne.n	2e6e4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e6cc:	68ba      	ldr	r2, [r7, #8]
   2e6ce:	4bc3      	ldr	r3, [pc, #780]	; (2e9dc <f_open+0x3a0>)
   2e6d0:	18fc      	adds	r4, r7, r3
   2e6d2:	2387      	movs	r3, #135	; 0x87
   2e6d4:	009b      	lsls	r3, r3, #2
   2e6d6:	18fb      	adds	r3, r7, r3
   2e6d8:	0011      	movs	r1, r2
   2e6da:	0018      	movs	r0, r3
   2e6dc:	4bc1      	ldr	r3, [pc, #772]	; (2e9e4 <f_open+0x3a8>)
   2e6de:	4798      	blx	r3
   2e6e0:	0003      	movs	r3, r0
   2e6e2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e6e4:	2387      	movs	r3, #135	; 0x87
   2e6e6:	009b      	lsls	r3, r3, #2
   2e6e8:	18fb      	adds	r3, r7, r3
   2e6ea:	695b      	ldr	r3, [r3, #20]
   2e6ec:	2292      	movs	r2, #146	; 0x92
   2e6ee:	0092      	lsls	r2, r2, #2
   2e6f0:	18ba      	adds	r2, r7, r2
   2e6f2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e6f4:	4bb9      	ldr	r3, [pc, #740]	; (2e9dc <f_open+0x3a0>)
   2e6f6:	18fb      	adds	r3, r7, r3
   2e6f8:	781b      	ldrb	r3, [r3, #0]
   2e6fa:	2b00      	cmp	r3, #0
   2e6fc:	d109      	bne.n	2e712 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e6fe:	2392      	movs	r3, #146	; 0x92
   2e700:	009b      	lsls	r3, r3, #2
   2e702:	18fb      	adds	r3, r7, r3
   2e704:	681b      	ldr	r3, [r3, #0]
   2e706:	2b00      	cmp	r3, #0
   2e708:	d103      	bne.n	2e712 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e70a:	4bb4      	ldr	r3, [pc, #720]	; (2e9dc <f_open+0x3a0>)
   2e70c:	18fb      	adds	r3, r7, r3
   2e70e:	2206      	movs	r2, #6
   2e710:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e712:	4bb1      	ldr	r3, [pc, #708]	; (2e9d8 <f_open+0x39c>)
   2e714:	2294      	movs	r2, #148	; 0x94
   2e716:	0092      	lsls	r2, r2, #2
   2e718:	4694      	mov	ip, r2
   2e71a:	44bc      	add	ip, r7
   2e71c:	4463      	add	r3, ip
   2e71e:	781b      	ldrb	r3, [r3, #0]
   2e720:	221c      	movs	r2, #28
   2e722:	4013      	ands	r3, r2
   2e724:	d100      	bne.n	2e728 <f_open+0xec>
   2e726:	e141      	b.n	2e9ac <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e728:	4bac      	ldr	r3, [pc, #688]	; (2e9dc <f_open+0x3a0>)
   2e72a:	18fb      	adds	r3, r7, r3
   2e72c:	781b      	ldrb	r3, [r3, #0]
   2e72e:	2b00      	cmp	r3, #0
   2e730:	d027      	beq.n	2e782 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e732:	4baa      	ldr	r3, [pc, #680]	; (2e9dc <f_open+0x3a0>)
   2e734:	18fb      	adds	r3, r7, r3
   2e736:	781b      	ldrb	r3, [r3, #0]
   2e738:	2b04      	cmp	r3, #4
   2e73a:	d109      	bne.n	2e750 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e73c:	4ba7      	ldr	r3, [pc, #668]	; (2e9dc <f_open+0x3a0>)
   2e73e:	18fc      	adds	r4, r7, r3
   2e740:	2387      	movs	r3, #135	; 0x87
   2e742:	009b      	lsls	r3, r3, #2
   2e744:	18fb      	adds	r3, r7, r3
   2e746:	0018      	movs	r0, r3
   2e748:	4ba7      	ldr	r3, [pc, #668]	; (2e9e8 <f_open+0x3ac>)
   2e74a:	4798      	blx	r3
   2e74c:	0003      	movs	r3, r0
   2e74e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e750:	4ba1      	ldr	r3, [pc, #644]	; (2e9d8 <f_open+0x39c>)
   2e752:	2294      	movs	r2, #148	; 0x94
   2e754:	0092      	lsls	r2, r2, #2
   2e756:	4694      	mov	ip, r2
   2e758:	44bc      	add	ip, r7
   2e75a:	4463      	add	r3, ip
   2e75c:	4a9e      	ldr	r2, [pc, #632]	; (2e9d8 <f_open+0x39c>)
   2e75e:	2194      	movs	r1, #148	; 0x94
   2e760:	0089      	lsls	r1, r1, #2
   2e762:	468c      	mov	ip, r1
   2e764:	44bc      	add	ip, r7
   2e766:	4462      	add	r2, ip
   2e768:	7812      	ldrb	r2, [r2, #0]
   2e76a:	2108      	movs	r1, #8
   2e76c:	430a      	orrs	r2, r1
   2e76e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e770:	2387      	movs	r3, #135	; 0x87
   2e772:	009b      	lsls	r3, r3, #2
   2e774:	18fb      	adds	r3, r7, r3
   2e776:	695b      	ldr	r3, [r3, #20]
   2e778:	2292      	movs	r2, #146	; 0x92
   2e77a:	0092      	lsls	r2, r2, #2
   2e77c:	18ba      	adds	r2, r7, r2
   2e77e:	6013      	str	r3, [r2, #0]
   2e780:	e01c      	b.n	2e7bc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e782:	2392      	movs	r3, #146	; 0x92
   2e784:	009b      	lsls	r3, r3, #2
   2e786:	18fb      	adds	r3, r7, r3
   2e788:	681b      	ldr	r3, [r3, #0]
   2e78a:	330b      	adds	r3, #11
   2e78c:	781b      	ldrb	r3, [r3, #0]
   2e78e:	001a      	movs	r2, r3
   2e790:	2311      	movs	r3, #17
   2e792:	4013      	ands	r3, r2
   2e794:	d004      	beq.n	2e7a0 <f_open+0x164>
				res = FR_DENIED;
   2e796:	4b91      	ldr	r3, [pc, #580]	; (2e9dc <f_open+0x3a0>)
   2e798:	18fb      	adds	r3, r7, r3
   2e79a:	2207      	movs	r2, #7
   2e79c:	701a      	strb	r2, [r3, #0]
   2e79e:	e00d      	b.n	2e7bc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e7a0:	4b8d      	ldr	r3, [pc, #564]	; (2e9d8 <f_open+0x39c>)
   2e7a2:	2294      	movs	r2, #148	; 0x94
   2e7a4:	0092      	lsls	r2, r2, #2
   2e7a6:	4694      	mov	ip, r2
   2e7a8:	44bc      	add	ip, r7
   2e7aa:	4463      	add	r3, ip
   2e7ac:	781b      	ldrb	r3, [r3, #0]
   2e7ae:	2204      	movs	r2, #4
   2e7b0:	4013      	ands	r3, r2
   2e7b2:	d003      	beq.n	2e7bc <f_open+0x180>
					res = FR_EXIST;
   2e7b4:	4b89      	ldr	r3, [pc, #548]	; (2e9dc <f_open+0x3a0>)
   2e7b6:	18fb      	adds	r3, r7, r3
   2e7b8:	2208      	movs	r2, #8
   2e7ba:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e7bc:	4b87      	ldr	r3, [pc, #540]	; (2e9dc <f_open+0x3a0>)
   2e7be:	18fb      	adds	r3, r7, r3
   2e7c0:	781b      	ldrb	r3, [r3, #0]
   2e7c2:	2b00      	cmp	r3, #0
   2e7c4:	d000      	beq.n	2e7c8 <f_open+0x18c>
   2e7c6:	e12f      	b.n	2ea28 <f_open+0x3ec>
   2e7c8:	4b83      	ldr	r3, [pc, #524]	; (2e9d8 <f_open+0x39c>)
   2e7ca:	2294      	movs	r2, #148	; 0x94
   2e7cc:	0092      	lsls	r2, r2, #2
   2e7ce:	4694      	mov	ip, r2
   2e7d0:	44bc      	add	ip, r7
   2e7d2:	4463      	add	r3, ip
   2e7d4:	781b      	ldrb	r3, [r3, #0]
   2e7d6:	2208      	movs	r2, #8
   2e7d8:	4013      	ands	r3, r2
   2e7da:	d100      	bne.n	2e7de <f_open+0x1a2>
   2e7dc:	e124      	b.n	2ea28 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e7de:	4b83      	ldr	r3, [pc, #524]	; (2e9ec <f_open+0x3b0>)
   2e7e0:	4798      	blx	r3
   2e7e2:	0003      	movs	r3, r0
   2e7e4:	2291      	movs	r2, #145	; 0x91
   2e7e6:	0092      	lsls	r2, r2, #2
   2e7e8:	18ba      	adds	r2, r7, r2
   2e7ea:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e7ec:	2392      	movs	r3, #146	; 0x92
   2e7ee:	009b      	lsls	r3, r3, #2
   2e7f0:	18fb      	adds	r3, r7, r3
   2e7f2:	681b      	ldr	r3, [r3, #0]
   2e7f4:	330e      	adds	r3, #14
   2e7f6:	2291      	movs	r2, #145	; 0x91
   2e7f8:	0092      	lsls	r2, r2, #2
   2e7fa:	18ba      	adds	r2, r7, r2
   2e7fc:	6812      	ldr	r2, [r2, #0]
   2e7fe:	b2d2      	uxtb	r2, r2
   2e800:	701a      	strb	r2, [r3, #0]
   2e802:	2392      	movs	r3, #146	; 0x92
   2e804:	009b      	lsls	r3, r3, #2
   2e806:	18fb      	adds	r3, r7, r3
   2e808:	681b      	ldr	r3, [r3, #0]
   2e80a:	330f      	adds	r3, #15
   2e80c:	2291      	movs	r2, #145	; 0x91
   2e80e:	0092      	lsls	r2, r2, #2
   2e810:	18ba      	adds	r2, r7, r2
   2e812:	6812      	ldr	r2, [r2, #0]
   2e814:	b292      	uxth	r2, r2
   2e816:	0a12      	lsrs	r2, r2, #8
   2e818:	b292      	uxth	r2, r2
   2e81a:	b2d2      	uxtb	r2, r2
   2e81c:	701a      	strb	r2, [r3, #0]
   2e81e:	2392      	movs	r3, #146	; 0x92
   2e820:	009b      	lsls	r3, r3, #2
   2e822:	18fb      	adds	r3, r7, r3
   2e824:	681b      	ldr	r3, [r3, #0]
   2e826:	3310      	adds	r3, #16
   2e828:	2291      	movs	r2, #145	; 0x91
   2e82a:	0092      	lsls	r2, r2, #2
   2e82c:	18ba      	adds	r2, r7, r2
   2e82e:	6812      	ldr	r2, [r2, #0]
   2e830:	0c12      	lsrs	r2, r2, #16
   2e832:	b2d2      	uxtb	r2, r2
   2e834:	701a      	strb	r2, [r3, #0]
   2e836:	2392      	movs	r3, #146	; 0x92
   2e838:	009b      	lsls	r3, r3, #2
   2e83a:	18fb      	adds	r3, r7, r3
   2e83c:	681b      	ldr	r3, [r3, #0]
   2e83e:	3311      	adds	r3, #17
   2e840:	2291      	movs	r2, #145	; 0x91
   2e842:	0092      	lsls	r2, r2, #2
   2e844:	18ba      	adds	r2, r7, r2
   2e846:	6812      	ldr	r2, [r2, #0]
   2e848:	0e12      	lsrs	r2, r2, #24
   2e84a:	b2d2      	uxtb	r2, r2
   2e84c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e84e:	2392      	movs	r3, #146	; 0x92
   2e850:	009b      	lsls	r3, r3, #2
   2e852:	18fb      	adds	r3, r7, r3
   2e854:	681b      	ldr	r3, [r3, #0]
   2e856:	330b      	adds	r3, #11
   2e858:	2200      	movs	r2, #0
   2e85a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e85c:	2392      	movs	r3, #146	; 0x92
   2e85e:	009b      	lsls	r3, r3, #2
   2e860:	18fb      	adds	r3, r7, r3
   2e862:	681b      	ldr	r3, [r3, #0]
   2e864:	331c      	adds	r3, #28
   2e866:	2200      	movs	r2, #0
   2e868:	701a      	strb	r2, [r3, #0]
   2e86a:	2392      	movs	r3, #146	; 0x92
   2e86c:	009b      	lsls	r3, r3, #2
   2e86e:	18fb      	adds	r3, r7, r3
   2e870:	681b      	ldr	r3, [r3, #0]
   2e872:	331d      	adds	r3, #29
   2e874:	2200      	movs	r2, #0
   2e876:	701a      	strb	r2, [r3, #0]
   2e878:	2392      	movs	r3, #146	; 0x92
   2e87a:	009b      	lsls	r3, r3, #2
   2e87c:	18fb      	adds	r3, r7, r3
   2e87e:	681b      	ldr	r3, [r3, #0]
   2e880:	331e      	adds	r3, #30
   2e882:	2200      	movs	r2, #0
   2e884:	701a      	strb	r2, [r3, #0]
   2e886:	2392      	movs	r3, #146	; 0x92
   2e888:	009b      	lsls	r3, r3, #2
   2e88a:	18fb      	adds	r3, r7, r3
   2e88c:	681b      	ldr	r3, [r3, #0]
   2e88e:	331f      	adds	r3, #31
   2e890:	2200      	movs	r2, #0
   2e892:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e894:	2392      	movs	r3, #146	; 0x92
   2e896:	009b      	lsls	r3, r3, #2
   2e898:	18fb      	adds	r3, r7, r3
   2e89a:	681b      	ldr	r3, [r3, #0]
   2e89c:	3315      	adds	r3, #21
   2e89e:	781b      	ldrb	r3, [r3, #0]
   2e8a0:	021b      	lsls	r3, r3, #8
   2e8a2:	b21a      	sxth	r2, r3
   2e8a4:	2392      	movs	r3, #146	; 0x92
   2e8a6:	009b      	lsls	r3, r3, #2
   2e8a8:	18fb      	adds	r3, r7, r3
   2e8aa:	681b      	ldr	r3, [r3, #0]
   2e8ac:	3314      	adds	r3, #20
   2e8ae:	781b      	ldrb	r3, [r3, #0]
   2e8b0:	b21b      	sxth	r3, r3
   2e8b2:	4313      	orrs	r3, r2
   2e8b4:	b21b      	sxth	r3, r3
   2e8b6:	b29b      	uxth	r3, r3
   2e8b8:	041b      	lsls	r3, r3, #16
   2e8ba:	2292      	movs	r2, #146	; 0x92
   2e8bc:	0092      	lsls	r2, r2, #2
   2e8be:	18ba      	adds	r2, r7, r2
   2e8c0:	6812      	ldr	r2, [r2, #0]
   2e8c2:	321b      	adds	r2, #27
   2e8c4:	7812      	ldrb	r2, [r2, #0]
   2e8c6:	0212      	lsls	r2, r2, #8
   2e8c8:	b211      	sxth	r1, r2
   2e8ca:	2292      	movs	r2, #146	; 0x92
   2e8cc:	0092      	lsls	r2, r2, #2
   2e8ce:	18ba      	adds	r2, r7, r2
   2e8d0:	6812      	ldr	r2, [r2, #0]
   2e8d2:	321a      	adds	r2, #26
   2e8d4:	7812      	ldrb	r2, [r2, #0]
   2e8d6:	b212      	sxth	r2, r2
   2e8d8:	430a      	orrs	r2, r1
   2e8da:	b212      	sxth	r2, r2
   2e8dc:	b292      	uxth	r2, r2
   2e8de:	4313      	orrs	r3, r2
   2e8e0:	2290      	movs	r2, #144	; 0x90
   2e8e2:	0092      	lsls	r2, r2, #2
   2e8e4:	18ba      	adds	r2, r7, r2
   2e8e6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e8e8:	2392      	movs	r3, #146	; 0x92
   2e8ea:	009b      	lsls	r3, r3, #2
   2e8ec:	18fb      	adds	r3, r7, r3
   2e8ee:	681b      	ldr	r3, [r3, #0]
   2e8f0:	331a      	adds	r3, #26
   2e8f2:	2200      	movs	r2, #0
   2e8f4:	701a      	strb	r2, [r3, #0]
   2e8f6:	2392      	movs	r3, #146	; 0x92
   2e8f8:	009b      	lsls	r3, r3, #2
   2e8fa:	18fb      	adds	r3, r7, r3
   2e8fc:	681b      	ldr	r3, [r3, #0]
   2e8fe:	331b      	adds	r3, #27
   2e900:	2200      	movs	r2, #0
   2e902:	701a      	strb	r2, [r3, #0]
   2e904:	2392      	movs	r3, #146	; 0x92
   2e906:	009b      	lsls	r3, r3, #2
   2e908:	18fb      	adds	r3, r7, r3
   2e90a:	681b      	ldr	r3, [r3, #0]
   2e90c:	3314      	adds	r3, #20
   2e90e:	2200      	movs	r2, #0
   2e910:	701a      	strb	r2, [r3, #0]
   2e912:	2392      	movs	r3, #146	; 0x92
   2e914:	009b      	lsls	r3, r3, #2
   2e916:	18fb      	adds	r3, r7, r3
   2e918:	681b      	ldr	r3, [r3, #0]
   2e91a:	3315      	adds	r3, #21
   2e91c:	2200      	movs	r2, #0
   2e91e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e920:	2387      	movs	r3, #135	; 0x87
   2e922:	009b      	lsls	r3, r3, #2
   2e924:	18fb      	adds	r3, r7, r3
   2e926:	681b      	ldr	r3, [r3, #0]
   2e928:	2201      	movs	r2, #1
   2e92a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e92c:	2390      	movs	r3, #144	; 0x90
   2e92e:	009b      	lsls	r3, r3, #2
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	681b      	ldr	r3, [r3, #0]
   2e934:	2b00      	cmp	r3, #0
   2e936:	d100      	bne.n	2e93a <f_open+0x2fe>
   2e938:	e076      	b.n	2ea28 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e93a:	2387      	movs	r3, #135	; 0x87
   2e93c:	009b      	lsls	r3, r3, #2
   2e93e:	18fb      	adds	r3, r7, r3
   2e940:	681b      	ldr	r3, [r3, #0]
   2e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e944:	2291      	movs	r2, #145	; 0x91
   2e946:	0092      	lsls	r2, r2, #2
   2e948:	18ba      	adds	r2, r7, r2
   2e94a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e94c:	2387      	movs	r3, #135	; 0x87
   2e94e:	009b      	lsls	r3, r3, #2
   2e950:	18fb      	adds	r3, r7, r3
   2e952:	681b      	ldr	r3, [r3, #0]
   2e954:	4a21      	ldr	r2, [pc, #132]	; (2e9dc <f_open+0x3a0>)
   2e956:	18bc      	adds	r4, r7, r2
   2e958:	2290      	movs	r2, #144	; 0x90
   2e95a:	0092      	lsls	r2, r2, #2
   2e95c:	18ba      	adds	r2, r7, r2
   2e95e:	6812      	ldr	r2, [r2, #0]
   2e960:	0011      	movs	r1, r2
   2e962:	0018      	movs	r0, r3
   2e964:	4b22      	ldr	r3, [pc, #136]	; (2e9f0 <f_open+0x3b4>)
   2e966:	4798      	blx	r3
   2e968:	0003      	movs	r3, r0
   2e96a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e96c:	4b1b      	ldr	r3, [pc, #108]	; (2e9dc <f_open+0x3a0>)
   2e96e:	18fb      	adds	r3, r7, r3
   2e970:	781b      	ldrb	r3, [r3, #0]
   2e972:	2b00      	cmp	r3, #0
   2e974:	d158      	bne.n	2ea28 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e976:	2387      	movs	r3, #135	; 0x87
   2e978:	009b      	lsls	r3, r3, #2
   2e97a:	18fb      	adds	r3, r7, r3
   2e97c:	681b      	ldr	r3, [r3, #0]
   2e97e:	2290      	movs	r2, #144	; 0x90
   2e980:	0092      	lsls	r2, r2, #2
   2e982:	18ba      	adds	r2, r7, r2
   2e984:	6812      	ldr	r2, [r2, #0]
   2e986:	3a01      	subs	r2, #1
   2e988:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e98a:	2387      	movs	r3, #135	; 0x87
   2e98c:	009b      	lsls	r3, r3, #2
   2e98e:	18fb      	adds	r3, r7, r3
   2e990:	681b      	ldr	r3, [r3, #0]
   2e992:	4a12      	ldr	r2, [pc, #72]	; (2e9dc <f_open+0x3a0>)
   2e994:	18bc      	adds	r4, r7, r2
   2e996:	2291      	movs	r2, #145	; 0x91
   2e998:	0092      	lsls	r2, r2, #2
   2e99a:	18ba      	adds	r2, r7, r2
   2e99c:	6812      	ldr	r2, [r2, #0]
   2e99e:	0011      	movs	r1, r2
   2e9a0:	0018      	movs	r0, r3
   2e9a2:	4b14      	ldr	r3, [pc, #80]	; (2e9f4 <f_open+0x3b8>)
   2e9a4:	4798      	blx	r3
   2e9a6:	0003      	movs	r3, r0
   2e9a8:	7023      	strb	r3, [r4, #0]
   2e9aa:	e03d      	b.n	2ea28 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e9ac:	4b0b      	ldr	r3, [pc, #44]	; (2e9dc <f_open+0x3a0>)
   2e9ae:	18fb      	adds	r3, r7, r3
   2e9b0:	781b      	ldrb	r3, [r3, #0]
   2e9b2:	2b00      	cmp	r3, #0
   2e9b4:	d138      	bne.n	2ea28 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e9b6:	2392      	movs	r3, #146	; 0x92
   2e9b8:	009b      	lsls	r3, r3, #2
   2e9ba:	18fb      	adds	r3, r7, r3
   2e9bc:	681b      	ldr	r3, [r3, #0]
   2e9be:	330b      	adds	r3, #11
   2e9c0:	781b      	ldrb	r3, [r3, #0]
   2e9c2:	001a      	movs	r2, r3
   2e9c4:	2310      	movs	r3, #16
   2e9c6:	4013      	ands	r3, r2
   2e9c8:	d016      	beq.n	2e9f8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e9ca:	4b04      	ldr	r3, [pc, #16]	; (2e9dc <f_open+0x3a0>)
   2e9cc:	18fb      	adds	r3, r7, r3
   2e9ce:	2204      	movs	r2, #4
   2e9d0:	701a      	strb	r2, [r3, #0]
   2e9d2:	e029      	b.n	2ea28 <f_open+0x3ec>
   2e9d4:	fffffdac 	.word	0xfffffdac
   2e9d8:	fffffdb7 	.word	0xfffffdb7
   2e9dc:	0000024f 	.word	0x0000024f
   2e9e0:	0002df95 	.word	0x0002df95
   2e9e4:	0002dd89 	.word	0x0002dd89
   2e9e8:	0002d5d9 	.word	0x0002d5d9
   2e9ec:	0002c3d1 	.word	0x0002c3d1
   2e9f0:	0002cb55 	.word	0x0002cb55
   2e9f4:	0002c515 	.word	0x0002c515
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e9f8:	4b5a      	ldr	r3, [pc, #360]	; (2eb64 <f_open+0x528>)
   2e9fa:	2294      	movs	r2, #148	; 0x94
   2e9fc:	0092      	lsls	r2, r2, #2
   2e9fe:	4694      	mov	ip, r2
   2ea00:	44bc      	add	ip, r7
   2ea02:	4463      	add	r3, ip
   2ea04:	781b      	ldrb	r3, [r3, #0]
   2ea06:	2202      	movs	r2, #2
   2ea08:	4013      	ands	r3, r2
   2ea0a:	d00d      	beq.n	2ea28 <f_open+0x3ec>
   2ea0c:	2392      	movs	r3, #146	; 0x92
   2ea0e:	009b      	lsls	r3, r3, #2
   2ea10:	18fb      	adds	r3, r7, r3
   2ea12:	681b      	ldr	r3, [r3, #0]
   2ea14:	330b      	adds	r3, #11
   2ea16:	781b      	ldrb	r3, [r3, #0]
   2ea18:	001a      	movs	r2, r3
   2ea1a:	2301      	movs	r3, #1
   2ea1c:	4013      	ands	r3, r2
   2ea1e:	d003      	beq.n	2ea28 <f_open+0x3ec>
					res = FR_DENIED;
   2ea20:	4b51      	ldr	r3, [pc, #324]	; (2eb68 <f_open+0x52c>)
   2ea22:	18fb      	adds	r3, r7, r3
   2ea24:	2207      	movs	r2, #7
   2ea26:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2ea28:	4b4f      	ldr	r3, [pc, #316]	; (2eb68 <f_open+0x52c>)
   2ea2a:	18fb      	adds	r3, r7, r3
   2ea2c:	781b      	ldrb	r3, [r3, #0]
   2ea2e:	2b00      	cmp	r3, #0
   2ea30:	d126      	bne.n	2ea80 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2ea32:	4b4c      	ldr	r3, [pc, #304]	; (2eb64 <f_open+0x528>)
   2ea34:	2294      	movs	r2, #148	; 0x94
   2ea36:	0092      	lsls	r2, r2, #2
   2ea38:	4694      	mov	ip, r2
   2ea3a:	44bc      	add	ip, r7
   2ea3c:	4463      	add	r3, ip
   2ea3e:	781b      	ldrb	r3, [r3, #0]
   2ea40:	2208      	movs	r2, #8
   2ea42:	4013      	ands	r3, r2
   2ea44:	d00f      	beq.n	2ea66 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2ea46:	4b47      	ldr	r3, [pc, #284]	; (2eb64 <f_open+0x528>)
   2ea48:	2294      	movs	r2, #148	; 0x94
   2ea4a:	0092      	lsls	r2, r2, #2
   2ea4c:	4694      	mov	ip, r2
   2ea4e:	44bc      	add	ip, r7
   2ea50:	4463      	add	r3, ip
   2ea52:	4a44      	ldr	r2, [pc, #272]	; (2eb64 <f_open+0x528>)
   2ea54:	2194      	movs	r1, #148	; 0x94
   2ea56:	0089      	lsls	r1, r1, #2
   2ea58:	468c      	mov	ip, r1
   2ea5a:	44bc      	add	ip, r7
   2ea5c:	4462      	add	r2, ip
   2ea5e:	7812      	ldrb	r2, [r2, #0]
   2ea60:	2120      	movs	r1, #32
   2ea62:	430a      	orrs	r2, r1
   2ea64:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2ea66:	2387      	movs	r3, #135	; 0x87
   2ea68:	009b      	lsls	r3, r3, #2
   2ea6a:	18fb      	adds	r3, r7, r3
   2ea6c:	681b      	ldr	r3, [r3, #0]
   2ea6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ea70:	68fb      	ldr	r3, [r7, #12]
   2ea72:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ea74:	68fb      	ldr	r3, [r7, #12]
   2ea76:	2292      	movs	r2, #146	; 0x92
   2ea78:	0092      	lsls	r2, r2, #2
   2ea7a:	18ba      	adds	r2, r7, r2
   2ea7c:	6812      	ldr	r2, [r2, #0]
   2ea7e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ea80:	4b39      	ldr	r3, [pc, #228]	; (2eb68 <f_open+0x52c>)
   2ea82:	18fb      	adds	r3, r7, r3
   2ea84:	781b      	ldrb	r3, [r3, #0]
   2ea86:	2b00      	cmp	r3, #0
   2ea88:	d163      	bne.n	2eb52 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ea8a:	68fb      	ldr	r3, [r7, #12]
   2ea8c:	4a35      	ldr	r2, [pc, #212]	; (2eb64 <f_open+0x528>)
   2ea8e:	2194      	movs	r1, #148	; 0x94
   2ea90:	0089      	lsls	r1, r1, #2
   2ea92:	468c      	mov	ip, r1
   2ea94:	44bc      	add	ip, r7
   2ea96:	4462      	add	r2, ip
   2ea98:	7812      	ldrb	r2, [r2, #0]
   2ea9a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ea9c:	2392      	movs	r3, #146	; 0x92
   2ea9e:	009b      	lsls	r3, r3, #2
   2eaa0:	18fb      	adds	r3, r7, r3
   2eaa2:	681b      	ldr	r3, [r3, #0]
   2eaa4:	3315      	adds	r3, #21
   2eaa6:	781b      	ldrb	r3, [r3, #0]
   2eaa8:	021b      	lsls	r3, r3, #8
   2eaaa:	b21a      	sxth	r2, r3
   2eaac:	2392      	movs	r3, #146	; 0x92
   2eaae:	009b      	lsls	r3, r3, #2
   2eab0:	18fb      	adds	r3, r7, r3
   2eab2:	681b      	ldr	r3, [r3, #0]
   2eab4:	3314      	adds	r3, #20
   2eab6:	781b      	ldrb	r3, [r3, #0]
   2eab8:	b21b      	sxth	r3, r3
   2eaba:	4313      	orrs	r3, r2
   2eabc:	b21b      	sxth	r3, r3
   2eabe:	b29b      	uxth	r3, r3
   2eac0:	041b      	lsls	r3, r3, #16
   2eac2:	2292      	movs	r2, #146	; 0x92
   2eac4:	0092      	lsls	r2, r2, #2
   2eac6:	18ba      	adds	r2, r7, r2
   2eac8:	6812      	ldr	r2, [r2, #0]
   2eaca:	321b      	adds	r2, #27
   2eacc:	7812      	ldrb	r2, [r2, #0]
   2eace:	0212      	lsls	r2, r2, #8
   2ead0:	b211      	sxth	r1, r2
   2ead2:	2292      	movs	r2, #146	; 0x92
   2ead4:	0092      	lsls	r2, r2, #2
   2ead6:	18ba      	adds	r2, r7, r2
   2ead8:	6812      	ldr	r2, [r2, #0]
   2eada:	321a      	adds	r2, #26
   2eadc:	7812      	ldrb	r2, [r2, #0]
   2eade:	b212      	sxth	r2, r2
   2eae0:	430a      	orrs	r2, r1
   2eae2:	b212      	sxth	r2, r2
   2eae4:	b292      	uxth	r2, r2
   2eae6:	431a      	orrs	r2, r3
   2eae8:	68fb      	ldr	r3, [r7, #12]
   2eaea:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2eaec:	2392      	movs	r3, #146	; 0x92
   2eaee:	009b      	lsls	r3, r3, #2
   2eaf0:	18fb      	adds	r3, r7, r3
   2eaf2:	681b      	ldr	r3, [r3, #0]
   2eaf4:	331f      	adds	r3, #31
   2eaf6:	781b      	ldrb	r3, [r3, #0]
   2eaf8:	061a      	lsls	r2, r3, #24
   2eafa:	2392      	movs	r3, #146	; 0x92
   2eafc:	009b      	lsls	r3, r3, #2
   2eafe:	18fb      	adds	r3, r7, r3
   2eb00:	681b      	ldr	r3, [r3, #0]
   2eb02:	331e      	adds	r3, #30
   2eb04:	781b      	ldrb	r3, [r3, #0]
   2eb06:	041b      	lsls	r3, r3, #16
   2eb08:	4313      	orrs	r3, r2
   2eb0a:	2292      	movs	r2, #146	; 0x92
   2eb0c:	0092      	lsls	r2, r2, #2
   2eb0e:	18ba      	adds	r2, r7, r2
   2eb10:	6812      	ldr	r2, [r2, #0]
   2eb12:	321d      	adds	r2, #29
   2eb14:	7812      	ldrb	r2, [r2, #0]
   2eb16:	0212      	lsls	r2, r2, #8
   2eb18:	4313      	orrs	r3, r2
   2eb1a:	2292      	movs	r2, #146	; 0x92
   2eb1c:	0092      	lsls	r2, r2, #2
   2eb1e:	18ba      	adds	r2, r7, r2
   2eb20:	6812      	ldr	r2, [r2, #0]
   2eb22:	321c      	adds	r2, #28
   2eb24:	7812      	ldrb	r2, [r2, #0]
   2eb26:	431a      	orrs	r2, r3
   2eb28:	68fb      	ldr	r3, [r7, #12]
   2eb2a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2eb2c:	68fb      	ldr	r3, [r7, #12]
   2eb2e:	2200      	movs	r2, #0
   2eb30:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2eb32:	68fb      	ldr	r3, [r7, #12]
   2eb34:	2200      	movs	r2, #0
   2eb36:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2eb38:	2387      	movs	r3, #135	; 0x87
   2eb3a:	009b      	lsls	r3, r3, #2
   2eb3c:	18fb      	adds	r3, r7, r3
   2eb3e:	681a      	ldr	r2, [r3, #0]
   2eb40:	68fb      	ldr	r3, [r7, #12]
   2eb42:	601a      	str	r2, [r3, #0]
   2eb44:	2387      	movs	r3, #135	; 0x87
   2eb46:	009b      	lsls	r3, r3, #2
   2eb48:	18fb      	adds	r3, r7, r3
   2eb4a:	681b      	ldr	r3, [r3, #0]
   2eb4c:	88da      	ldrh	r2, [r3, #6]
   2eb4e:	68fb      	ldr	r3, [r7, #12]
   2eb50:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2eb52:	4b05      	ldr	r3, [pc, #20]	; (2eb68 <f_open+0x52c>)
   2eb54:	18fb      	adds	r3, r7, r3
   2eb56:	781b      	ldrb	r3, [r3, #0]
}
   2eb58:	0018      	movs	r0, r3
   2eb5a:	46bd      	mov	sp, r7
   2eb5c:	2395      	movs	r3, #149	; 0x95
   2eb5e:	009b      	lsls	r3, r3, #2
   2eb60:	449d      	add	sp, r3
   2eb62:	bd90      	pop	{r4, r7, pc}
   2eb64:	fffffdb7 	.word	0xfffffdb7
   2eb68:	0000024f 	.word	0x0000024f

0002eb6c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2eb6c:	b590      	push	{r4, r7, lr}
   2eb6e:	b08b      	sub	sp, #44	; 0x2c
   2eb70:	af00      	add	r7, sp, #0
   2eb72:	60f8      	str	r0, [r7, #12]
   2eb74:	60b9      	str	r1, [r7, #8]
   2eb76:	607a      	str	r2, [r7, #4]
   2eb78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2eb7a:	68bb      	ldr	r3, [r7, #8]
   2eb7c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2eb7e:	683b      	ldr	r3, [r7, #0]
   2eb80:	2200      	movs	r2, #0
   2eb82:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2eb84:	68fb      	ldr	r3, [r7, #12]
   2eb86:	681a      	ldr	r2, [r3, #0]
   2eb88:	68fb      	ldr	r3, [r7, #12]
   2eb8a:	889b      	ldrh	r3, [r3, #4]
   2eb8c:	2117      	movs	r1, #23
   2eb8e:	187c      	adds	r4, r7, r1
   2eb90:	0019      	movs	r1, r3
   2eb92:	0010      	movs	r0, r2
   2eb94:	4bc3      	ldr	r3, [pc, #780]	; (2eea4 <f_write+0x338>)
   2eb96:	4798      	blx	r3
   2eb98:	0003      	movs	r3, r0
   2eb9a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2eb9c:	2317      	movs	r3, #23
   2eb9e:	18fb      	adds	r3, r7, r3
   2eba0:	781b      	ldrb	r3, [r3, #0]
   2eba2:	2b00      	cmp	r3, #0
   2eba4:	d003      	beq.n	2ebae <f_write+0x42>
   2eba6:	2317      	movs	r3, #23
   2eba8:	18fb      	adds	r3, r7, r3
   2ebaa:	781b      	ldrb	r3, [r3, #0]
   2ebac:	e176      	b.n	2ee9c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2ebae:	68fb      	ldr	r3, [r7, #12]
   2ebb0:	799b      	ldrb	r3, [r3, #6]
   2ebb2:	b25b      	sxtb	r3, r3
   2ebb4:	2b00      	cmp	r3, #0
   2ebb6:	da01      	bge.n	2ebbc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ebb8:	2302      	movs	r3, #2
   2ebba:	e16f      	b.n	2ee9c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2ebbc:	68fb      	ldr	r3, [r7, #12]
   2ebbe:	799b      	ldrb	r3, [r3, #6]
   2ebc0:	001a      	movs	r2, r3
   2ebc2:	2302      	movs	r3, #2
   2ebc4:	4013      	ands	r3, r2
   2ebc6:	d101      	bne.n	2ebcc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ebc8:	2307      	movs	r3, #7
   2ebca:	e167      	b.n	2ee9c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ebcc:	68fb      	ldr	r3, [r7, #12]
   2ebce:	68da      	ldr	r2, [r3, #12]
   2ebd0:	687b      	ldr	r3, [r7, #4]
   2ebd2:	18d2      	adds	r2, r2, r3
   2ebd4:	68fb      	ldr	r3, [r7, #12]
   2ebd6:	68db      	ldr	r3, [r3, #12]
   2ebd8:	429a      	cmp	r2, r3
   2ebda:	d300      	bcc.n	2ebde <f_write+0x72>
   2ebdc:	e146      	b.n	2ee6c <f_write+0x300>
   2ebde:	2300      	movs	r3, #0
   2ebe0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2ebe2:	e143      	b.n	2ee6c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2ebe4:	68fb      	ldr	r3, [r7, #12]
   2ebe6:	689b      	ldr	r3, [r3, #8]
   2ebe8:	05db      	lsls	r3, r3, #23
   2ebea:	0ddb      	lsrs	r3, r3, #23
   2ebec:	d000      	beq.n	2ebf0 <f_write+0x84>
   2ebee:	e0f6      	b.n	2edde <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2ebf0:	68fb      	ldr	r3, [r7, #12]
   2ebf2:	689b      	ldr	r3, [r3, #8]
   2ebf4:	0a5b      	lsrs	r3, r3, #9
   2ebf6:	b2da      	uxtb	r2, r3
   2ebf8:	68fb      	ldr	r3, [r7, #12]
   2ebfa:	681b      	ldr	r3, [r3, #0]
   2ebfc:	789b      	ldrb	r3, [r3, #2]
   2ebfe:	3b01      	subs	r3, #1
   2ec00:	b2d9      	uxtb	r1, r3
   2ec02:	2316      	movs	r3, #22
   2ec04:	18fb      	adds	r3, r7, r3
   2ec06:	400a      	ands	r2, r1
   2ec08:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2ec0a:	2316      	movs	r3, #22
   2ec0c:	18fb      	adds	r3, r7, r3
   2ec0e:	781b      	ldrb	r3, [r3, #0]
   2ec10:	2b00      	cmp	r3, #0
   2ec12:	d140      	bne.n	2ec96 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2ec14:	68fb      	ldr	r3, [r7, #12]
   2ec16:	689b      	ldr	r3, [r3, #8]
   2ec18:	2b00      	cmp	r3, #0
   2ec1a:	d111      	bne.n	2ec40 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2ec1c:	68fb      	ldr	r3, [r7, #12]
   2ec1e:	691b      	ldr	r3, [r3, #16]
   2ec20:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec24:	2b00      	cmp	r3, #0
   2ec26:	d115      	bne.n	2ec54 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ec28:	68fb      	ldr	r3, [r7, #12]
   2ec2a:	681b      	ldr	r3, [r3, #0]
   2ec2c:	2100      	movs	r1, #0
   2ec2e:	0018      	movs	r0, r3
   2ec30:	4b9d      	ldr	r3, [pc, #628]	; (2eea8 <f_write+0x33c>)
   2ec32:	4798      	blx	r3
   2ec34:	0003      	movs	r3, r0
   2ec36:	627b      	str	r3, [r7, #36]	; 0x24
   2ec38:	68fb      	ldr	r3, [r7, #12]
   2ec3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec3c:	611a      	str	r2, [r3, #16]
   2ec3e:	e009      	b.n	2ec54 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ec40:	68fb      	ldr	r3, [r7, #12]
   2ec42:	681a      	ldr	r2, [r3, #0]
   2ec44:	68fb      	ldr	r3, [r7, #12]
   2ec46:	695b      	ldr	r3, [r3, #20]
   2ec48:	0019      	movs	r1, r3
   2ec4a:	0010      	movs	r0, r2
   2ec4c:	4b96      	ldr	r3, [pc, #600]	; (2eea8 <f_write+0x33c>)
   2ec4e:	4798      	blx	r3
   2ec50:	0003      	movs	r3, r0
   2ec52:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec56:	2b00      	cmp	r3, #0
   2ec58:	d100      	bne.n	2ec5c <f_write+0xf0>
   2ec5a:	e10c      	b.n	2ee76 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec5e:	2b01      	cmp	r3, #1
   2ec60:	d109      	bne.n	2ec76 <f_write+0x10a>
   2ec62:	68fb      	ldr	r3, [r7, #12]
   2ec64:	799b      	ldrb	r3, [r3, #6]
   2ec66:	2280      	movs	r2, #128	; 0x80
   2ec68:	4252      	negs	r2, r2
   2ec6a:	4313      	orrs	r3, r2
   2ec6c:	b2da      	uxtb	r2, r3
   2ec6e:	68fb      	ldr	r3, [r7, #12]
   2ec70:	719a      	strb	r2, [r3, #6]
   2ec72:	2302      	movs	r3, #2
   2ec74:	e112      	b.n	2ee9c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec78:	3301      	adds	r3, #1
   2ec7a:	d109      	bne.n	2ec90 <f_write+0x124>
   2ec7c:	68fb      	ldr	r3, [r7, #12]
   2ec7e:	799b      	ldrb	r3, [r3, #6]
   2ec80:	2280      	movs	r2, #128	; 0x80
   2ec82:	4252      	negs	r2, r2
   2ec84:	4313      	orrs	r3, r2
   2ec86:	b2da      	uxtb	r2, r3
   2ec88:	68fb      	ldr	r3, [r7, #12]
   2ec8a:	719a      	strb	r2, [r3, #6]
   2ec8c:	2301      	movs	r3, #1
   2ec8e:	e105      	b.n	2ee9c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2ec90:	68fb      	ldr	r3, [r7, #12]
   2ec92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec94:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2ec96:	68fb      	ldr	r3, [r7, #12]
   2ec98:	681b      	ldr	r3, [r3, #0]
   2ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec9c:	68fb      	ldr	r3, [r7, #12]
   2ec9e:	699b      	ldr	r3, [r3, #24]
   2eca0:	429a      	cmp	r2, r3
   2eca2:	d111      	bne.n	2ecc8 <f_write+0x15c>
   2eca4:	68fb      	ldr	r3, [r7, #12]
   2eca6:	681b      	ldr	r3, [r3, #0]
   2eca8:	2100      	movs	r1, #0
   2ecaa:	0018      	movs	r0, r3
   2ecac:	4b7f      	ldr	r3, [pc, #508]	; (2eeac <f_write+0x340>)
   2ecae:	4798      	blx	r3
   2ecb0:	1e03      	subs	r3, r0, #0
   2ecb2:	d009      	beq.n	2ecc8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	799b      	ldrb	r3, [r3, #6]
   2ecb8:	2280      	movs	r2, #128	; 0x80
   2ecba:	4252      	negs	r2, r2
   2ecbc:	4313      	orrs	r3, r2
   2ecbe:	b2da      	uxtb	r2, r3
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	719a      	strb	r2, [r3, #6]
   2ecc4:	2301      	movs	r3, #1
   2ecc6:	e0e9      	b.n	2ee9c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ecc8:	68fb      	ldr	r3, [r7, #12]
   2ecca:	681a      	ldr	r2, [r3, #0]
   2eccc:	68fb      	ldr	r3, [r7, #12]
   2ecce:	695b      	ldr	r3, [r3, #20]
   2ecd0:	0019      	movs	r1, r3
   2ecd2:	0010      	movs	r0, r2
   2ecd4:	4b76      	ldr	r3, [pc, #472]	; (2eeb0 <f_write+0x344>)
   2ecd6:	4798      	blx	r3
   2ecd8:	0003      	movs	r3, r0
   2ecda:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ecdc:	693b      	ldr	r3, [r7, #16]
   2ecde:	2b00      	cmp	r3, #0
   2ece0:	d109      	bne.n	2ecf6 <f_write+0x18a>
   2ece2:	68fb      	ldr	r3, [r7, #12]
   2ece4:	799b      	ldrb	r3, [r3, #6]
   2ece6:	2280      	movs	r2, #128	; 0x80
   2ece8:	4252      	negs	r2, r2
   2ecea:	4313      	orrs	r3, r2
   2ecec:	b2da      	uxtb	r2, r3
   2ecee:	68fb      	ldr	r3, [r7, #12]
   2ecf0:	719a      	strb	r2, [r3, #6]
   2ecf2:	2302      	movs	r3, #2
   2ecf4:	e0d2      	b.n	2ee9c <f_write+0x330>
			sect += csect;
   2ecf6:	2316      	movs	r3, #22
   2ecf8:	18fb      	adds	r3, r7, r3
   2ecfa:	781b      	ldrb	r3, [r3, #0]
   2ecfc:	693a      	ldr	r2, [r7, #16]
   2ecfe:	18d3      	adds	r3, r2, r3
   2ed00:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ed02:	687b      	ldr	r3, [r7, #4]
   2ed04:	0a5b      	lsrs	r3, r3, #9
   2ed06:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2ed08:	69fb      	ldr	r3, [r7, #28]
   2ed0a:	2b00      	cmp	r3, #0
   2ed0c:	d048      	beq.n	2eda0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ed0e:	2316      	movs	r3, #22
   2ed10:	18fb      	adds	r3, r7, r3
   2ed12:	781a      	ldrb	r2, [r3, #0]
   2ed14:	69fb      	ldr	r3, [r7, #28]
   2ed16:	18d2      	adds	r2, r2, r3
   2ed18:	68fb      	ldr	r3, [r7, #12]
   2ed1a:	681b      	ldr	r3, [r3, #0]
   2ed1c:	789b      	ldrb	r3, [r3, #2]
   2ed1e:	429a      	cmp	r2, r3
   2ed20:	d908      	bls.n	2ed34 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2ed22:	68fb      	ldr	r3, [r7, #12]
   2ed24:	681b      	ldr	r3, [r3, #0]
   2ed26:	789b      	ldrb	r3, [r3, #2]
   2ed28:	001a      	movs	r2, r3
   2ed2a:	2316      	movs	r3, #22
   2ed2c:	18fb      	adds	r3, r7, r3
   2ed2e:	781b      	ldrb	r3, [r3, #0]
   2ed30:	1ad3      	subs	r3, r2, r3
   2ed32:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2ed34:	68fb      	ldr	r3, [r7, #12]
   2ed36:	681b      	ldr	r3, [r3, #0]
   2ed38:	7858      	ldrb	r0, [r3, #1]
   2ed3a:	69fb      	ldr	r3, [r7, #28]
   2ed3c:	b2db      	uxtb	r3, r3
   2ed3e:	693a      	ldr	r2, [r7, #16]
   2ed40:	69b9      	ldr	r1, [r7, #24]
   2ed42:	4c5c      	ldr	r4, [pc, #368]	; (2eeb4 <f_write+0x348>)
   2ed44:	47a0      	blx	r4
   2ed46:	1e03      	subs	r3, r0, #0
   2ed48:	d009      	beq.n	2ed5e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ed4a:	68fb      	ldr	r3, [r7, #12]
   2ed4c:	799b      	ldrb	r3, [r3, #6]
   2ed4e:	2280      	movs	r2, #128	; 0x80
   2ed50:	4252      	negs	r2, r2
   2ed52:	4313      	orrs	r3, r2
   2ed54:	b2da      	uxtb	r2, r3
   2ed56:	68fb      	ldr	r3, [r7, #12]
   2ed58:	719a      	strb	r2, [r3, #6]
   2ed5a:	2301      	movs	r3, #1
   2ed5c:	e09e      	b.n	2ee9c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2ed5e:	68fb      	ldr	r3, [r7, #12]
   2ed60:	681b      	ldr	r3, [r3, #0]
   2ed62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed64:	693b      	ldr	r3, [r7, #16]
   2ed66:	1ad2      	subs	r2, r2, r3
   2ed68:	69fb      	ldr	r3, [r7, #28]
   2ed6a:	429a      	cmp	r2, r3
   2ed6c:	d214      	bcs.n	2ed98 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ed6e:	68fb      	ldr	r3, [r7, #12]
   2ed70:	681b      	ldr	r3, [r3, #0]
   2ed72:	3330      	adds	r3, #48	; 0x30
   2ed74:	0018      	movs	r0, r3
   2ed76:	68fb      	ldr	r3, [r7, #12]
   2ed78:	681b      	ldr	r3, [r3, #0]
   2ed7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed7c:	693b      	ldr	r3, [r7, #16]
   2ed7e:	1ad3      	subs	r3, r2, r3
   2ed80:	025b      	lsls	r3, r3, #9
   2ed82:	69ba      	ldr	r2, [r7, #24]
   2ed84:	18d1      	adds	r1, r2, r3
   2ed86:	2380      	movs	r3, #128	; 0x80
   2ed88:	009b      	lsls	r3, r3, #2
   2ed8a:	001a      	movs	r2, r3
   2ed8c:	4b4a      	ldr	r3, [pc, #296]	; (2eeb8 <f_write+0x34c>)
   2ed8e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ed90:	68fb      	ldr	r3, [r7, #12]
   2ed92:	681b      	ldr	r3, [r3, #0]
   2ed94:	2200      	movs	r2, #0
   2ed96:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2ed98:	69fb      	ldr	r3, [r7, #28]
   2ed9a:	025b      	lsls	r3, r3, #9
   2ed9c:	623b      	str	r3, [r7, #32]
				continue;
   2ed9e:	e051      	b.n	2ee44 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2eda0:	68fb      	ldr	r3, [r7, #12]
   2eda2:	689a      	ldr	r2, [r3, #8]
   2eda4:	68fb      	ldr	r3, [r7, #12]
   2eda6:	68db      	ldr	r3, [r3, #12]
   2eda8:	429a      	cmp	r2, r3
   2edaa:	d315      	bcc.n	2edd8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2edac:	68fb      	ldr	r3, [r7, #12]
   2edae:	681b      	ldr	r3, [r3, #0]
   2edb0:	2100      	movs	r1, #0
   2edb2:	0018      	movs	r0, r3
   2edb4:	4b3d      	ldr	r3, [pc, #244]	; (2eeac <f_write+0x340>)
   2edb6:	4798      	blx	r3
   2edb8:	1e03      	subs	r3, r0, #0
   2edba:	d009      	beq.n	2edd0 <f_write+0x264>
   2edbc:	68fb      	ldr	r3, [r7, #12]
   2edbe:	799b      	ldrb	r3, [r3, #6]
   2edc0:	2280      	movs	r2, #128	; 0x80
   2edc2:	4252      	negs	r2, r2
   2edc4:	4313      	orrs	r3, r2
   2edc6:	b2da      	uxtb	r2, r3
   2edc8:	68fb      	ldr	r3, [r7, #12]
   2edca:	719a      	strb	r2, [r3, #6]
   2edcc:	2301      	movs	r3, #1
   2edce:	e065      	b.n	2ee9c <f_write+0x330>
				fp->fs->winsect = sect;
   2edd0:	68fb      	ldr	r3, [r7, #12]
   2edd2:	681b      	ldr	r3, [r3, #0]
   2edd4:	693a      	ldr	r2, [r7, #16]
   2edd6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2edd8:	68fb      	ldr	r3, [r7, #12]
   2edda:	693a      	ldr	r2, [r7, #16]
   2eddc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2edde:	68fb      	ldr	r3, [r7, #12]
   2ede0:	689b      	ldr	r3, [r3, #8]
   2ede2:	05db      	lsls	r3, r3, #23
   2ede4:	0ddb      	lsrs	r3, r3, #23
   2ede6:	2280      	movs	r2, #128	; 0x80
   2ede8:	0092      	lsls	r2, r2, #2
   2edea:	1ad3      	subs	r3, r2, r3
   2edec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2edee:	6a3a      	ldr	r2, [r7, #32]
   2edf0:	687b      	ldr	r3, [r7, #4]
   2edf2:	429a      	cmp	r2, r3
   2edf4:	d901      	bls.n	2edfa <f_write+0x28e>
   2edf6:	687b      	ldr	r3, [r7, #4]
   2edf8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2edfa:	68fb      	ldr	r3, [r7, #12]
   2edfc:	681a      	ldr	r2, [r3, #0]
   2edfe:	68fb      	ldr	r3, [r7, #12]
   2ee00:	699b      	ldr	r3, [r3, #24]
   2ee02:	0019      	movs	r1, r3
   2ee04:	0010      	movs	r0, r2
   2ee06:	4b29      	ldr	r3, [pc, #164]	; (2eeac <f_write+0x340>)
   2ee08:	4798      	blx	r3
   2ee0a:	1e03      	subs	r3, r0, #0
   2ee0c:	d009      	beq.n	2ee22 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ee0e:	68fb      	ldr	r3, [r7, #12]
   2ee10:	799b      	ldrb	r3, [r3, #6]
   2ee12:	2280      	movs	r2, #128	; 0x80
   2ee14:	4252      	negs	r2, r2
   2ee16:	4313      	orrs	r3, r2
   2ee18:	b2da      	uxtb	r2, r3
   2ee1a:	68fb      	ldr	r3, [r7, #12]
   2ee1c:	719a      	strb	r2, [r3, #6]
   2ee1e:	2301      	movs	r3, #1
   2ee20:	e03c      	b.n	2ee9c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ee22:	68fb      	ldr	r3, [r7, #12]
   2ee24:	681a      	ldr	r2, [r3, #0]
   2ee26:	68fb      	ldr	r3, [r7, #12]
   2ee28:	689b      	ldr	r3, [r3, #8]
   2ee2a:	05db      	lsls	r3, r3, #23
   2ee2c:	0ddb      	lsrs	r3, r3, #23
   2ee2e:	3330      	adds	r3, #48	; 0x30
   2ee30:	18d3      	adds	r3, r2, r3
   2ee32:	6a3a      	ldr	r2, [r7, #32]
   2ee34:	69b9      	ldr	r1, [r7, #24]
   2ee36:	0018      	movs	r0, r3
   2ee38:	4b1f      	ldr	r3, [pc, #124]	; (2eeb8 <f_write+0x34c>)
   2ee3a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ee3c:	68fb      	ldr	r3, [r7, #12]
   2ee3e:	681b      	ldr	r3, [r3, #0]
   2ee40:	2201      	movs	r2, #1
   2ee42:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ee44:	69ba      	ldr	r2, [r7, #24]
   2ee46:	6a3b      	ldr	r3, [r7, #32]
   2ee48:	18d3      	adds	r3, r2, r3
   2ee4a:	61bb      	str	r3, [r7, #24]
   2ee4c:	68fb      	ldr	r3, [r7, #12]
   2ee4e:	689a      	ldr	r2, [r3, #8]
   2ee50:	6a3b      	ldr	r3, [r7, #32]
   2ee52:	18d2      	adds	r2, r2, r3
   2ee54:	68fb      	ldr	r3, [r7, #12]
   2ee56:	609a      	str	r2, [r3, #8]
   2ee58:	683b      	ldr	r3, [r7, #0]
   2ee5a:	681a      	ldr	r2, [r3, #0]
   2ee5c:	6a3b      	ldr	r3, [r7, #32]
   2ee5e:	18d2      	adds	r2, r2, r3
   2ee60:	683b      	ldr	r3, [r7, #0]
   2ee62:	601a      	str	r2, [r3, #0]
   2ee64:	687a      	ldr	r2, [r7, #4]
   2ee66:	6a3b      	ldr	r3, [r7, #32]
   2ee68:	1ad3      	subs	r3, r2, r3
   2ee6a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2ee6c:	687b      	ldr	r3, [r7, #4]
   2ee6e:	2b00      	cmp	r3, #0
   2ee70:	d000      	beq.n	2ee74 <f_write+0x308>
   2ee72:	e6b7      	b.n	2ebe4 <f_write+0x78>
   2ee74:	e000      	b.n	2ee78 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ee76:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ee78:	68fb      	ldr	r3, [r7, #12]
   2ee7a:	689a      	ldr	r2, [r3, #8]
   2ee7c:	68fb      	ldr	r3, [r7, #12]
   2ee7e:	68db      	ldr	r3, [r3, #12]
   2ee80:	429a      	cmp	r2, r3
   2ee82:	d903      	bls.n	2ee8c <f_write+0x320>
   2ee84:	68fb      	ldr	r3, [r7, #12]
   2ee86:	689a      	ldr	r2, [r3, #8]
   2ee88:	68fb      	ldr	r3, [r7, #12]
   2ee8a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ee8c:	68fb      	ldr	r3, [r7, #12]
   2ee8e:	799b      	ldrb	r3, [r3, #6]
   2ee90:	2220      	movs	r2, #32
   2ee92:	4313      	orrs	r3, r2
   2ee94:	b2da      	uxtb	r2, r3
   2ee96:	68fb      	ldr	r3, [r7, #12]
   2ee98:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ee9a:	2300      	movs	r3, #0
}
   2ee9c:	0018      	movs	r0, r3
   2ee9e:	46bd      	mov	sp, r7
   2eea0:	b00b      	add	sp, #44	; 0x2c
   2eea2:	bd90      	pop	{r4, r7, pc}
   2eea4:	0002e591 	.word	0x0002e591
   2eea8:	0002cc1d 	.word	0x0002cc1d
   2eeac:	0002c515 	.word	0x0002c515
   2eeb0:	0002c775 	.word	0x0002c775
   2eeb4:	0002c201 	.word	0x0002c201
   2eeb8:	0002c431 	.word	0x0002c431

0002eebc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2eebc:	b590      	push	{r4, r7, lr}
   2eebe:	b087      	sub	sp, #28
   2eec0:	af00      	add	r7, sp, #0
   2eec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2eec4:	687b      	ldr	r3, [r7, #4]
   2eec6:	681a      	ldr	r2, [r3, #0]
   2eec8:	687b      	ldr	r3, [r7, #4]
   2eeca:	889b      	ldrh	r3, [r3, #4]
   2eecc:	2117      	movs	r1, #23
   2eece:	187c      	adds	r4, r7, r1
   2eed0:	0019      	movs	r1, r3
   2eed2:	0010      	movs	r0, r2
   2eed4:	4b55      	ldr	r3, [pc, #340]	; (2f02c <f_sync+0x170>)
   2eed6:	4798      	blx	r3
   2eed8:	0003      	movs	r3, r0
   2eeda:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2eedc:	2317      	movs	r3, #23
   2eede:	18fb      	adds	r3, r7, r3
   2eee0:	781b      	ldrb	r3, [r3, #0]
   2eee2:	2b00      	cmp	r3, #0
   2eee4:	d000      	beq.n	2eee8 <f_sync+0x2c>
   2eee6:	e09a      	b.n	2f01e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2eee8:	687b      	ldr	r3, [r7, #4]
   2eeea:	799b      	ldrb	r3, [r3, #6]
   2eeec:	001a      	movs	r2, r3
   2eeee:	2320      	movs	r3, #32
   2eef0:	4013      	ands	r3, r2
   2eef2:	d100      	bne.n	2eef6 <f_sync+0x3a>
   2eef4:	e093      	b.n	2f01e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2eef6:	687b      	ldr	r3, [r7, #4]
   2eef8:	681a      	ldr	r2, [r3, #0]
   2eefa:	687b      	ldr	r3, [r7, #4]
   2eefc:	69db      	ldr	r3, [r3, #28]
   2eefe:	2117      	movs	r1, #23
   2ef00:	187c      	adds	r4, r7, r1
   2ef02:	0019      	movs	r1, r3
   2ef04:	0010      	movs	r0, r2
   2ef06:	4b4a      	ldr	r3, [pc, #296]	; (2f030 <f_sync+0x174>)
   2ef08:	4798      	blx	r3
   2ef0a:	0003      	movs	r3, r0
   2ef0c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ef0e:	2317      	movs	r3, #23
   2ef10:	18fb      	adds	r3, r7, r3
   2ef12:	781b      	ldrb	r3, [r3, #0]
   2ef14:	2b00      	cmp	r3, #0
   2ef16:	d000      	beq.n	2ef1a <f_sync+0x5e>
   2ef18:	e081      	b.n	2f01e <f_sync+0x162>
				dir = fp->dir_ptr;
   2ef1a:	687b      	ldr	r3, [r7, #4]
   2ef1c:	6a1b      	ldr	r3, [r3, #32]
   2ef1e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ef20:	693b      	ldr	r3, [r7, #16]
   2ef22:	330b      	adds	r3, #11
   2ef24:	693a      	ldr	r2, [r7, #16]
   2ef26:	320b      	adds	r2, #11
   2ef28:	7812      	ldrb	r2, [r2, #0]
   2ef2a:	2120      	movs	r1, #32
   2ef2c:	430a      	orrs	r2, r1
   2ef2e:	b2d2      	uxtb	r2, r2
   2ef30:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ef32:	693b      	ldr	r3, [r7, #16]
   2ef34:	331c      	adds	r3, #28
   2ef36:	001a      	movs	r2, r3
   2ef38:	687b      	ldr	r3, [r7, #4]
   2ef3a:	68db      	ldr	r3, [r3, #12]
   2ef3c:	b2db      	uxtb	r3, r3
   2ef3e:	7013      	strb	r3, [r2, #0]
   2ef40:	693b      	ldr	r3, [r7, #16]
   2ef42:	331d      	adds	r3, #29
   2ef44:	001a      	movs	r2, r3
   2ef46:	687b      	ldr	r3, [r7, #4]
   2ef48:	68db      	ldr	r3, [r3, #12]
   2ef4a:	b29b      	uxth	r3, r3
   2ef4c:	0a1b      	lsrs	r3, r3, #8
   2ef4e:	b29b      	uxth	r3, r3
   2ef50:	b2db      	uxtb	r3, r3
   2ef52:	7013      	strb	r3, [r2, #0]
   2ef54:	693b      	ldr	r3, [r7, #16]
   2ef56:	331e      	adds	r3, #30
   2ef58:	001a      	movs	r2, r3
   2ef5a:	687b      	ldr	r3, [r7, #4]
   2ef5c:	68db      	ldr	r3, [r3, #12]
   2ef5e:	0c1b      	lsrs	r3, r3, #16
   2ef60:	b2db      	uxtb	r3, r3
   2ef62:	7013      	strb	r3, [r2, #0]
   2ef64:	693b      	ldr	r3, [r7, #16]
   2ef66:	331f      	adds	r3, #31
   2ef68:	001a      	movs	r2, r3
   2ef6a:	687b      	ldr	r3, [r7, #4]
   2ef6c:	68db      	ldr	r3, [r3, #12]
   2ef6e:	0e1b      	lsrs	r3, r3, #24
   2ef70:	b2db      	uxtb	r3, r3
   2ef72:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ef74:	693b      	ldr	r3, [r7, #16]
   2ef76:	331a      	adds	r3, #26
   2ef78:	001a      	movs	r2, r3
   2ef7a:	687b      	ldr	r3, [r7, #4]
   2ef7c:	691b      	ldr	r3, [r3, #16]
   2ef7e:	b2db      	uxtb	r3, r3
   2ef80:	7013      	strb	r3, [r2, #0]
   2ef82:	693b      	ldr	r3, [r7, #16]
   2ef84:	331b      	adds	r3, #27
   2ef86:	001a      	movs	r2, r3
   2ef88:	687b      	ldr	r3, [r7, #4]
   2ef8a:	691b      	ldr	r3, [r3, #16]
   2ef8c:	b29b      	uxth	r3, r3
   2ef8e:	0a1b      	lsrs	r3, r3, #8
   2ef90:	b29b      	uxth	r3, r3
   2ef92:	b2db      	uxtb	r3, r3
   2ef94:	7013      	strb	r3, [r2, #0]
   2ef96:	693b      	ldr	r3, [r7, #16]
   2ef98:	3314      	adds	r3, #20
   2ef9a:	001a      	movs	r2, r3
   2ef9c:	687b      	ldr	r3, [r7, #4]
   2ef9e:	691b      	ldr	r3, [r3, #16]
   2efa0:	0c1b      	lsrs	r3, r3, #16
   2efa2:	b2db      	uxtb	r3, r3
   2efa4:	7013      	strb	r3, [r2, #0]
   2efa6:	693b      	ldr	r3, [r7, #16]
   2efa8:	3315      	adds	r3, #21
   2efaa:	001a      	movs	r2, r3
   2efac:	687b      	ldr	r3, [r7, #4]
   2efae:	691b      	ldr	r3, [r3, #16]
   2efb0:	0c1b      	lsrs	r3, r3, #16
   2efb2:	b29b      	uxth	r3, r3
   2efb4:	0a1b      	lsrs	r3, r3, #8
   2efb6:	b29b      	uxth	r3, r3
   2efb8:	b2db      	uxtb	r3, r3
   2efba:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2efbc:	4b1d      	ldr	r3, [pc, #116]	; (2f034 <f_sync+0x178>)
   2efbe:	4798      	blx	r3
   2efc0:	0003      	movs	r3, r0
   2efc2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2efc4:	693b      	ldr	r3, [r7, #16]
   2efc6:	3316      	adds	r3, #22
   2efc8:	68fa      	ldr	r2, [r7, #12]
   2efca:	b2d2      	uxtb	r2, r2
   2efcc:	701a      	strb	r2, [r3, #0]
   2efce:	693b      	ldr	r3, [r7, #16]
   2efd0:	3317      	adds	r3, #23
   2efd2:	68fa      	ldr	r2, [r7, #12]
   2efd4:	b292      	uxth	r2, r2
   2efd6:	0a12      	lsrs	r2, r2, #8
   2efd8:	b292      	uxth	r2, r2
   2efda:	b2d2      	uxtb	r2, r2
   2efdc:	701a      	strb	r2, [r3, #0]
   2efde:	693b      	ldr	r3, [r7, #16]
   2efe0:	3318      	adds	r3, #24
   2efe2:	68fa      	ldr	r2, [r7, #12]
   2efe4:	0c12      	lsrs	r2, r2, #16
   2efe6:	b2d2      	uxtb	r2, r2
   2efe8:	701a      	strb	r2, [r3, #0]
   2efea:	693b      	ldr	r3, [r7, #16]
   2efec:	3319      	adds	r3, #25
   2efee:	68fa      	ldr	r2, [r7, #12]
   2eff0:	0e12      	lsrs	r2, r2, #24
   2eff2:	b2d2      	uxtb	r2, r2
   2eff4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2eff6:	687b      	ldr	r3, [r7, #4]
   2eff8:	799b      	ldrb	r3, [r3, #6]
   2effa:	2220      	movs	r2, #32
   2effc:	4393      	bics	r3, r2
   2effe:	b2da      	uxtb	r2, r3
   2f000:	687b      	ldr	r3, [r7, #4]
   2f002:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2f004:	687b      	ldr	r3, [r7, #4]
   2f006:	681b      	ldr	r3, [r3, #0]
   2f008:	2201      	movs	r2, #1
   2f00a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2f00c:	687b      	ldr	r3, [r7, #4]
   2f00e:	681b      	ldr	r3, [r3, #0]
   2f010:	2217      	movs	r2, #23
   2f012:	18bc      	adds	r4, r7, r2
   2f014:	0018      	movs	r0, r3
   2f016:	4b08      	ldr	r3, [pc, #32]	; (2f038 <f_sync+0x17c>)
   2f018:	4798      	blx	r3
   2f01a:	0003      	movs	r3, r0
   2f01c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2f01e:	2317      	movs	r3, #23
   2f020:	18fb      	adds	r3, r7, r3
   2f022:	781b      	ldrb	r3, [r3, #0]
}
   2f024:	0018      	movs	r0, r3
   2f026:	46bd      	mov	sp, r7
   2f028:	b007      	add	sp, #28
   2f02a:	bd90      	pop	{r4, r7, pc}
   2f02c:	0002e591 	.word	0x0002e591
   2f030:	0002c515 	.word	0x0002c515
   2f034:	0002c3d1 	.word	0x0002c3d1
   2f038:	0002c5dd 	.word	0x0002c5dd

0002f03c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2f03c:	b590      	push	{r4, r7, lr}
   2f03e:	b085      	sub	sp, #20
   2f040:	af00      	add	r7, sp, #0
   2f042:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2f044:	230f      	movs	r3, #15
   2f046:	18fc      	adds	r4, r7, r3
   2f048:	687b      	ldr	r3, [r7, #4]
   2f04a:	0018      	movs	r0, r3
   2f04c:	4b09      	ldr	r3, [pc, #36]	; (2f074 <f_close+0x38>)
   2f04e:	4798      	blx	r3
   2f050:	0003      	movs	r3, r0
   2f052:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2f054:	230f      	movs	r3, #15
   2f056:	18fb      	adds	r3, r7, r3
   2f058:	781b      	ldrb	r3, [r3, #0]
   2f05a:	2b00      	cmp	r3, #0
   2f05c:	d102      	bne.n	2f064 <f_close+0x28>
   2f05e:	687b      	ldr	r3, [r7, #4]
   2f060:	2200      	movs	r2, #0
   2f062:	601a      	str	r2, [r3, #0]
	return res;
   2f064:	230f      	movs	r3, #15
   2f066:	18fb      	adds	r3, r7, r3
   2f068:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2f06a:	0018      	movs	r0, r3
   2f06c:	46bd      	mov	sp, r7
   2f06e:	b005      	add	sp, #20
   2f070:	bd90      	pop	{r4, r7, pc}
   2f072:	46c0      	nop			; (mov r8, r8)
   2f074:	0002eebd 	.word	0x0002eebd

0002f078 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2f078:	b580      	push	{r7, lr}
   2f07a:	b084      	sub	sp, #16
   2f07c:	af00      	add	r7, sp, #0
   2f07e:	0002      	movs	r2, r0
   2f080:	6039      	str	r1, [r7, #0]
   2f082:	1dbb      	adds	r3, r7, #6
   2f084:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2f086:	1dbb      	adds	r3, r7, #6
   2f088:	881b      	ldrh	r3, [r3, #0]
   2f08a:	2b7f      	cmp	r3, #127	; 0x7f
   2f08c:	d805      	bhi.n	2f09a <ff_convert+0x22>
		c = src;
   2f08e:	230e      	movs	r3, #14
   2f090:	18fb      	adds	r3, r7, r3
   2f092:	1dba      	adds	r2, r7, #6
   2f094:	8812      	ldrh	r2, [r2, #0]
   2f096:	801a      	strh	r2, [r3, #0]
   2f098:	e03a      	b.n	2f110 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2f09a:	683b      	ldr	r3, [r7, #0]
   2f09c:	2b00      	cmp	r3, #0
   2f09e:	d010      	beq.n	2f0c2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2f0a0:	1dbb      	adds	r3, r7, #6
   2f0a2:	881b      	ldrh	r3, [r3, #0]
   2f0a4:	2bff      	cmp	r3, #255	; 0xff
   2f0a6:	d807      	bhi.n	2f0b8 <ff_convert+0x40>
   2f0a8:	1dbb      	adds	r3, r7, #6
   2f0aa:	881b      	ldrh	r3, [r3, #0]
   2f0ac:	3b80      	subs	r3, #128	; 0x80
   2f0ae:	001a      	movs	r2, r3
   2f0b0:	4b1b      	ldr	r3, [pc, #108]	; (2f120 <ff_convert+0xa8>)
   2f0b2:	0052      	lsls	r2, r2, #1
   2f0b4:	5ad2      	ldrh	r2, [r2, r3]
   2f0b6:	e000      	b.n	2f0ba <ff_convert+0x42>
   2f0b8:	2200      	movs	r2, #0
   2f0ba:	230e      	movs	r3, #14
   2f0bc:	18fb      	adds	r3, r7, r3
   2f0be:	801a      	strh	r2, [r3, #0]
   2f0c0:	e026      	b.n	2f110 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2f0c2:	230e      	movs	r3, #14
   2f0c4:	18fb      	adds	r3, r7, r3
   2f0c6:	2200      	movs	r2, #0
   2f0c8:	801a      	strh	r2, [r3, #0]
   2f0ca:	e010      	b.n	2f0ee <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2f0cc:	230e      	movs	r3, #14
   2f0ce:	18fb      	adds	r3, r7, r3
   2f0d0:	881a      	ldrh	r2, [r3, #0]
   2f0d2:	4b13      	ldr	r3, [pc, #76]	; (2f120 <ff_convert+0xa8>)
   2f0d4:	0052      	lsls	r2, r2, #1
   2f0d6:	5ad3      	ldrh	r3, [r2, r3]
   2f0d8:	1dba      	adds	r2, r7, #6
   2f0da:	8812      	ldrh	r2, [r2, #0]
   2f0dc:	429a      	cmp	r2, r3
   2f0de:	d00c      	beq.n	2f0fa <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2f0e0:	230e      	movs	r3, #14
   2f0e2:	18fb      	adds	r3, r7, r3
   2f0e4:	881a      	ldrh	r2, [r3, #0]
   2f0e6:	230e      	movs	r3, #14
   2f0e8:	18fb      	adds	r3, r7, r3
   2f0ea:	3201      	adds	r2, #1
   2f0ec:	801a      	strh	r2, [r3, #0]
   2f0ee:	230e      	movs	r3, #14
   2f0f0:	18fb      	adds	r3, r7, r3
   2f0f2:	881b      	ldrh	r3, [r3, #0]
   2f0f4:	2b7f      	cmp	r3, #127	; 0x7f
   2f0f6:	d9e9      	bls.n	2f0cc <ff_convert+0x54>
   2f0f8:	e000      	b.n	2f0fc <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2f0fa:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2f0fc:	230e      	movs	r3, #14
   2f0fe:	18fb      	adds	r3, r7, r3
   2f100:	881b      	ldrh	r3, [r3, #0]
   2f102:	3380      	adds	r3, #128	; 0x80
   2f104:	b29a      	uxth	r2, r3
   2f106:	230e      	movs	r3, #14
   2f108:	18fb      	adds	r3, r7, r3
   2f10a:	21ff      	movs	r1, #255	; 0xff
   2f10c:	400a      	ands	r2, r1
   2f10e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2f110:	230e      	movs	r3, #14
   2f112:	18fb      	adds	r3, r7, r3
   2f114:	881b      	ldrh	r3, [r3, #0]
}
   2f116:	0018      	movs	r0, r3
   2f118:	46bd      	mov	sp, r7
   2f11a:	b004      	add	sp, #16
   2f11c:	bd80      	pop	{r7, pc}
   2f11e:	46c0      	nop			; (mov r8, r8)
   2f120:	0003a744 	.word	0x0003a744

0002f124 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2f124:	b580      	push	{r7, lr}
   2f126:	b084      	sub	sp, #16
   2f128:	af00      	add	r7, sp, #0
   2f12a:	0002      	movs	r2, r0
   2f12c:	1dbb      	adds	r3, r7, #6
   2f12e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2f130:	2300      	movs	r3, #0
   2f132:	60fb      	str	r3, [r7, #12]
   2f134:	e002      	b.n	2f13c <ff_wtoupper+0x18>
   2f136:	68fb      	ldr	r3, [r7, #12]
   2f138:	3301      	adds	r3, #1
   2f13a:	60fb      	str	r3, [r7, #12]
   2f13c:	4b0f      	ldr	r3, [pc, #60]	; (2f17c <ff_wtoupper+0x58>)
   2f13e:	68fa      	ldr	r2, [r7, #12]
   2f140:	0052      	lsls	r2, r2, #1
   2f142:	5ad3      	ldrh	r3, [r2, r3]
   2f144:	2b00      	cmp	r3, #0
   2f146:	d007      	beq.n	2f158 <ff_wtoupper+0x34>
   2f148:	4b0c      	ldr	r3, [pc, #48]	; (2f17c <ff_wtoupper+0x58>)
   2f14a:	68fa      	ldr	r2, [r7, #12]
   2f14c:	0052      	lsls	r2, r2, #1
   2f14e:	5ad3      	ldrh	r3, [r2, r3]
   2f150:	1dba      	adds	r2, r7, #6
   2f152:	8812      	ldrh	r2, [r2, #0]
   2f154:	429a      	cmp	r2, r3
   2f156:	d1ee      	bne.n	2f136 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2f158:	4b08      	ldr	r3, [pc, #32]	; (2f17c <ff_wtoupper+0x58>)
   2f15a:	68fa      	ldr	r2, [r7, #12]
   2f15c:	0052      	lsls	r2, r2, #1
   2f15e:	5ad3      	ldrh	r3, [r2, r3]
   2f160:	2b00      	cmp	r3, #0
   2f162:	d004      	beq.n	2f16e <ff_wtoupper+0x4a>
   2f164:	4b06      	ldr	r3, [pc, #24]	; (2f180 <ff_wtoupper+0x5c>)
   2f166:	68fa      	ldr	r2, [r7, #12]
   2f168:	0052      	lsls	r2, r2, #1
   2f16a:	5ad3      	ldrh	r3, [r2, r3]
   2f16c:	e001      	b.n	2f172 <ff_wtoupper+0x4e>
   2f16e:	1dbb      	adds	r3, r7, #6
   2f170:	881b      	ldrh	r3, [r3, #0]
}
   2f172:	0018      	movs	r0, r3
   2f174:	46bd      	mov	sp, r7
   2f176:	b004      	add	sp, #16
   2f178:	bd80      	pop	{r7, pc}
   2f17a:	46c0      	nop			; (mov r8, r8)
   2f17c:	0003a844 	.word	0x0003a844
   2f180:	0003aa24 	.word	0x0003aa24

0002f184 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f184:	b580      	push	{r7, lr}
   2f186:	b084      	sub	sp, #16
   2f188:	af00      	add	r7, sp, #0
   2f18a:	60f8      	str	r0, [r7, #12]
   2f18c:	60b9      	str	r1, [r7, #8]
   2f18e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f190:	68fb      	ldr	r3, [r7, #12]
   2f192:	68ba      	ldr	r2, [r7, #8]
   2f194:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f196:	68fb      	ldr	r3, [r7, #12]
   2f198:	687a      	ldr	r2, [r7, #4]
   2f19a:	601a      	str	r2, [r3, #0]
}
   2f19c:	46c0      	nop			; (mov r8, r8)
   2f19e:	46bd      	mov	sp, r7
   2f1a0:	b004      	add	sp, #16
   2f1a2:	bd80      	pop	{r7, pc}

0002f1a4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f1a4:	b580      	push	{r7, lr}
   2f1a6:	b082      	sub	sp, #8
   2f1a8:	af00      	add	r7, sp, #0
   2f1aa:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f1ac:	687b      	ldr	r3, [r7, #4]
   2f1ae:	681b      	ldr	r3, [r3, #0]
   2f1b0:	4a07      	ldr	r2, [pc, #28]	; (2f1d0 <getNextPacketId+0x2c>)
   2f1b2:	4293      	cmp	r3, r2
   2f1b4:	d003      	beq.n	2f1be <getNextPacketId+0x1a>
   2f1b6:	687b      	ldr	r3, [r7, #4]
   2f1b8:	681b      	ldr	r3, [r3, #0]
   2f1ba:	1c5a      	adds	r2, r3, #1
   2f1bc:	e000      	b.n	2f1c0 <getNextPacketId+0x1c>
   2f1be:	2201      	movs	r2, #1
   2f1c0:	687b      	ldr	r3, [r7, #4]
   2f1c2:	601a      	str	r2, [r3, #0]
   2f1c4:	687b      	ldr	r3, [r7, #4]
   2f1c6:	681b      	ldr	r3, [r3, #0]
}
   2f1c8:	0018      	movs	r0, r3
   2f1ca:	46bd      	mov	sp, r7
   2f1cc:	b002      	add	sp, #8
   2f1ce:	bd80      	pop	{r7, pc}
   2f1d0:	0000ffff 	.word	0x0000ffff

0002f1d4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f1d6:	b087      	sub	sp, #28
   2f1d8:	af00      	add	r7, sp, #0
   2f1da:	60f8      	str	r0, [r7, #12]
   2f1dc:	60b9      	str	r1, [r7, #8]
   2f1de:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f1e0:	2301      	movs	r3, #1
   2f1e2:	425b      	negs	r3, r3
   2f1e4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f1e6:	2300      	movs	r3, #0
   2f1e8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f1ea:	e01a      	b.n	2f222 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f1ec:	68fb      	ldr	r3, [r7, #12]
   2f1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f1f0:	68dc      	ldr	r4, [r3, #12]
   2f1f2:	68fb      	ldr	r3, [r7, #12]
   2f1f4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f1f6:	68fb      	ldr	r3, [r7, #12]
   2f1f8:	691a      	ldr	r2, [r3, #16]
   2f1fa:	693b      	ldr	r3, [r7, #16]
   2f1fc:	18d6      	adds	r6, r2, r3
   2f1fe:	687b      	ldr	r3, [r7, #4]
   2f200:	0018      	movs	r0, r3
   2f202:	4b1a      	ldr	r3, [pc, #104]	; (2f26c <sendPacket+0x98>)
   2f204:	4798      	blx	r3
   2f206:	0003      	movs	r3, r0
   2f208:	68ba      	ldr	r2, [r7, #8]
   2f20a:	0031      	movs	r1, r6
   2f20c:	0028      	movs	r0, r5
   2f20e:	47a0      	blx	r4
   2f210:	0003      	movs	r3, r0
   2f212:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f214:	697b      	ldr	r3, [r7, #20]
   2f216:	2b00      	cmp	r3, #0
   2f218:	db0e      	blt.n	2f238 <sendPacket+0x64>
            break;
        sent += rc;
   2f21a:	693a      	ldr	r2, [r7, #16]
   2f21c:	697b      	ldr	r3, [r7, #20]
   2f21e:	18d3      	adds	r3, r2, r3
   2f220:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f222:	693a      	ldr	r2, [r7, #16]
   2f224:	68bb      	ldr	r3, [r7, #8]
   2f226:	429a      	cmp	r2, r3
   2f228:	da07      	bge.n	2f23a <sendPacket+0x66>
   2f22a:	687b      	ldr	r3, [r7, #4]
   2f22c:	0018      	movs	r0, r3
   2f22e:	4b10      	ldr	r3, [pc, #64]	; (2f270 <sendPacket+0x9c>)
   2f230:	4798      	blx	r3
   2f232:	1e03      	subs	r3, r0, #0
   2f234:	d0da      	beq.n	2f1ec <sendPacket+0x18>
   2f236:	e000      	b.n	2f23a <sendPacket+0x66>
            break;
   2f238:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f23a:	693a      	ldr	r2, [r7, #16]
   2f23c:	68bb      	ldr	r3, [r7, #8]
   2f23e:	429a      	cmp	r2, r3
   2f240:	d10b      	bne.n	2f25a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f242:	68fb      	ldr	r3, [r7, #12]
   2f244:	3354      	adds	r3, #84	; 0x54
   2f246:	001a      	movs	r2, r3
   2f248:	68fb      	ldr	r3, [r7, #12]
   2f24a:	699b      	ldr	r3, [r3, #24]
   2f24c:	0019      	movs	r1, r3
   2f24e:	0010      	movs	r0, r2
   2f250:	4b08      	ldr	r3, [pc, #32]	; (2f274 <sendPacket+0xa0>)
   2f252:	4798      	blx	r3
        rc = SUCCESS;
   2f254:	2300      	movs	r3, #0
   2f256:	617b      	str	r3, [r7, #20]
   2f258:	e002      	b.n	2f260 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f25a:	2301      	movs	r3, #1
   2f25c:	425b      	negs	r3, r3
   2f25e:	617b      	str	r3, [r7, #20]
    return rc;
   2f260:	697b      	ldr	r3, [r7, #20]
}
   2f262:	0018      	movs	r0, r3
   2f264:	46bd      	mov	sp, r7
   2f266:	b007      	add	sp, #28
   2f268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f26a:	46c0      	nop			; (mov r8, r8)
   2f26c:	00030035 	.word	0x00030035
   2f270:	0002ffb9 	.word	0x0002ffb9
   2f274:	0003000d 	.word	0x0003000d

0002f278 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f278:	b580      	push	{r7, lr}
   2f27a:	b086      	sub	sp, #24
   2f27c:	af00      	add	r7, sp, #0
   2f27e:	60f8      	str	r0, [r7, #12]
   2f280:	60b9      	str	r1, [r7, #8]
   2f282:	607a      	str	r2, [r7, #4]
   2f284:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f286:	68fb      	ldr	r3, [r7, #12]
   2f288:	68ba      	ldr	r2, [r7, #8]
   2f28a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f28c:	2300      	movs	r3, #0
   2f28e:	617b      	str	r3, [r7, #20]
   2f290:	e00a      	b.n	2f2a8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f292:	68fa      	ldr	r2, [r7, #12]
   2f294:	697b      	ldr	r3, [r7, #20]
   2f296:	3304      	adds	r3, #4
   2f298:	00db      	lsls	r3, r3, #3
   2f29a:	18d3      	adds	r3, r2, r3
   2f29c:	3304      	adds	r3, #4
   2f29e:	2200      	movs	r2, #0
   2f2a0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f2a2:	697b      	ldr	r3, [r7, #20]
   2f2a4:	3301      	adds	r3, #1
   2f2a6:	617b      	str	r3, [r7, #20]
   2f2a8:	697b      	ldr	r3, [r7, #20]
   2f2aa:	2b04      	cmp	r3, #4
   2f2ac:	ddf1      	ble.n	2f292 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f2ae:	68fb      	ldr	r3, [r7, #12]
   2f2b0:	687a      	ldr	r2, [r7, #4]
   2f2b2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f2b4:	68fb      	ldr	r3, [r7, #12]
   2f2b6:	683a      	ldr	r2, [r7, #0]
   2f2b8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f2ba:	68fb      	ldr	r3, [r7, #12]
   2f2bc:	6a3a      	ldr	r2, [r7, #32]
   2f2be:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f2c0:	68fb      	ldr	r3, [r7, #12]
   2f2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f2c4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f2c6:	68fb      	ldr	r3, [r7, #12]
   2f2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f2ca:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f2cc:	68fb      	ldr	r3, [r7, #12]
   2f2ce:	2200      	movs	r2, #0
   2f2d0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f2d2:	68fb      	ldr	r3, [r7, #12]
   2f2d4:	2200      	movs	r2, #0
   2f2d6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f2d8:	68fb      	ldr	r3, [r7, #12]
   2f2da:	2200      	movs	r2, #0
   2f2dc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f2de:	68fb      	ldr	r3, [r7, #12]
   2f2e0:	2201      	movs	r2, #1
   2f2e2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f2e4:	68fb      	ldr	r3, [r7, #12]
   2f2e6:	3354      	adds	r3, #84	; 0x54
   2f2e8:	0018      	movs	r0, r3
   2f2ea:	4b03      	ldr	r3, [pc, #12]	; (2f2f8 <MQTTClientInit+0x80>)
   2f2ec:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f2ee:	46c0      	nop			; (mov r8, r8)
   2f2f0:	46bd      	mov	sp, r7
   2f2f2:	b006      	add	sp, #24
   2f2f4:	bd80      	pop	{r7, pc}
   2f2f6:	46c0      	nop			; (mov r8, r8)
   2f2f8:	0003005d 	.word	0x0003005d

0002f2fc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f2fc:	b590      	push	{r4, r7, lr}
   2f2fe:	b08b      	sub	sp, #44	; 0x2c
   2f300:	af00      	add	r7, sp, #0
   2f302:	60f8      	str	r0, [r7, #12]
   2f304:	60b9      	str	r1, [r7, #8]
   2f306:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f308:	2301      	movs	r3, #1
   2f30a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f30c:	2300      	movs	r3, #0
   2f30e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f310:	2304      	movs	r3, #4
   2f312:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f314:	68bb      	ldr	r3, [r7, #8]
   2f316:	2200      	movs	r2, #0
   2f318:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f31a:	2301      	movs	r3, #1
   2f31c:	425b      	negs	r3, r3
   2f31e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f320:	6a3b      	ldr	r3, [r7, #32]
   2f322:	3301      	adds	r3, #1
   2f324:	623b      	str	r3, [r7, #32]
   2f326:	6a3a      	ldr	r2, [r7, #32]
   2f328:	69fb      	ldr	r3, [r7, #28]
   2f32a:	429a      	cmp	r2, r3
   2f32c:	dd03      	ble.n	2f336 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f32e:	2301      	movs	r3, #1
   2f330:	425b      	negs	r3, r3
   2f332:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f334:	e026      	b.n	2f384 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f336:	68fb      	ldr	r3, [r7, #12]
   2f338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f33a:	689c      	ldr	r4, [r3, #8]
   2f33c:	68fb      	ldr	r3, [r7, #12]
   2f33e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f340:	687b      	ldr	r3, [r7, #4]
   2f342:	2217      	movs	r2, #23
   2f344:	18b9      	adds	r1, r7, r2
   2f346:	2201      	movs	r2, #1
   2f348:	47a0      	blx	r4
   2f34a:	0003      	movs	r3, r0
   2f34c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f34e:	69bb      	ldr	r3, [r7, #24]
   2f350:	2b01      	cmp	r3, #1
   2f352:	d116      	bne.n	2f382 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f354:	68bb      	ldr	r3, [r7, #8]
   2f356:	681a      	ldr	r2, [r3, #0]
   2f358:	2317      	movs	r3, #23
   2f35a:	18fb      	adds	r3, r7, r3
   2f35c:	781b      	ldrb	r3, [r3, #0]
   2f35e:	0019      	movs	r1, r3
   2f360:	237f      	movs	r3, #127	; 0x7f
   2f362:	400b      	ands	r3, r1
   2f364:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f366:	434b      	muls	r3, r1
   2f368:	18d2      	adds	r2, r2, r3
   2f36a:	68bb      	ldr	r3, [r7, #8]
   2f36c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f370:	01db      	lsls	r3, r3, #7
   2f372:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f374:	2317      	movs	r3, #23
   2f376:	18fb      	adds	r3, r7, r3
   2f378:	781b      	ldrb	r3, [r3, #0]
   2f37a:	b25b      	sxtb	r3, r3
   2f37c:	2b00      	cmp	r3, #0
   2f37e:	dbcc      	blt.n	2f31a <decodePacket+0x1e>
   2f380:	e000      	b.n	2f384 <decodePacket+0x88>
            goto exit;
   2f382:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f384:	6a3b      	ldr	r3, [r7, #32]
}
   2f386:	0018      	movs	r0, r3
   2f388:	46bd      	mov	sp, r7
   2f38a:	b00b      	add	sp, #44	; 0x2c
   2f38c:	bd90      	pop	{r4, r7, pc}
	...

0002f390 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f390:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f392:	46c6      	mov	lr, r8
   2f394:	b500      	push	{lr}
   2f396:	b086      	sub	sp, #24
   2f398:	af00      	add	r7, sp, #0
   2f39a:	6078      	str	r0, [r7, #4]
   2f39c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f39e:	2301      	movs	r3, #1
   2f3a0:	425b      	negs	r3, r3
   2f3a2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f3a4:	2300      	movs	r3, #0
   2f3a6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f3a8:	2300      	movs	r3, #0
   2f3aa:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f3ac:	2300      	movs	r3, #0
   2f3ae:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f3b0:	687b      	ldr	r3, [r7, #4]
   2f3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f3b4:	689c      	ldr	r4, [r3, #8]
   2f3b6:	687b      	ldr	r3, [r7, #4]
   2f3b8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f3ba:	687b      	ldr	r3, [r7, #4]
   2f3bc:	695e      	ldr	r6, [r3, #20]
   2f3be:	683b      	ldr	r3, [r7, #0]
   2f3c0:	0018      	movs	r0, r3
   2f3c2:	4b2b      	ldr	r3, [pc, #172]	; (2f470 <readPacket+0xe0>)
   2f3c4:	4798      	blx	r3
   2f3c6:	0003      	movs	r3, r0
   2f3c8:	2201      	movs	r2, #1
   2f3ca:	0031      	movs	r1, r6
   2f3cc:	0028      	movs	r0, r5
   2f3ce:	47a0      	blx	r4
   2f3d0:	0003      	movs	r3, r0
   2f3d2:	2b01      	cmp	r3, #1
   2f3d4:	d141      	bne.n	2f45a <readPacket+0xca>
        goto exit;

    len = 1;
   2f3d6:	2301      	movs	r3, #1
   2f3d8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f3da:	683b      	ldr	r3, [r7, #0]
   2f3dc:	0018      	movs	r0, r3
   2f3de:	4b24      	ldr	r3, [pc, #144]	; (2f470 <readPacket+0xe0>)
   2f3e0:	4798      	blx	r3
   2f3e2:	0002      	movs	r2, r0
   2f3e4:	2308      	movs	r3, #8
   2f3e6:	18f9      	adds	r1, r7, r3
   2f3e8:	687b      	ldr	r3, [r7, #4]
   2f3ea:	0018      	movs	r0, r3
   2f3ec:	4b21      	ldr	r3, [pc, #132]	; (2f474 <readPacket+0xe4>)
   2f3ee:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f3f0:	687b      	ldr	r3, [r7, #4]
   2f3f2:	695b      	ldr	r3, [r3, #20]
   2f3f4:	3301      	adds	r3, #1
   2f3f6:	68ba      	ldr	r2, [r7, #8]
   2f3f8:	0011      	movs	r1, r2
   2f3fa:	0018      	movs	r0, r3
   2f3fc:	4b1e      	ldr	r3, [pc, #120]	; (2f478 <readPacket+0xe8>)
   2f3fe:	4798      	blx	r3
   2f400:	0002      	movs	r2, r0
   2f402:	693b      	ldr	r3, [r7, #16]
   2f404:	189b      	adds	r3, r3, r2
   2f406:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f408:	68bb      	ldr	r3, [r7, #8]
   2f40a:	2b00      	cmp	r3, #0
   2f40c:	dd17      	ble.n	2f43e <readPacket+0xae>
   2f40e:	687b      	ldr	r3, [r7, #4]
   2f410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f412:	689c      	ldr	r4, [r3, #8]
   2f414:	687b      	ldr	r3, [r7, #4]
   2f416:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f418:	687b      	ldr	r3, [r7, #4]
   2f41a:	695a      	ldr	r2, [r3, #20]
   2f41c:	693b      	ldr	r3, [r7, #16]
   2f41e:	18d6      	adds	r6, r2, r3
   2f420:	68bb      	ldr	r3, [r7, #8]
   2f422:	4698      	mov	r8, r3
   2f424:	683b      	ldr	r3, [r7, #0]
   2f426:	0018      	movs	r0, r3
   2f428:	4b11      	ldr	r3, [pc, #68]	; (2f470 <readPacket+0xe0>)
   2f42a:	4798      	blx	r3
   2f42c:	0003      	movs	r3, r0
   2f42e:	4642      	mov	r2, r8
   2f430:	0031      	movs	r1, r6
   2f432:	0028      	movs	r0, r5
   2f434:	47a0      	blx	r4
   2f436:	0002      	movs	r2, r0
   2f438:	68bb      	ldr	r3, [r7, #8]
   2f43a:	429a      	cmp	r2, r3
   2f43c:	d10f      	bne.n	2f45e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f43e:	687b      	ldr	r3, [r7, #4]
   2f440:	695b      	ldr	r3, [r3, #20]
   2f442:	781a      	ldrb	r2, [r3, #0]
   2f444:	230c      	movs	r3, #12
   2f446:	18fb      	adds	r3, r7, r3
   2f448:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f44a:	230c      	movs	r3, #12
   2f44c:	18fb      	adds	r3, r7, r3
   2f44e:	781b      	ldrb	r3, [r3, #0]
   2f450:	061b      	lsls	r3, r3, #24
   2f452:	0f1b      	lsrs	r3, r3, #28
   2f454:	b2db      	uxtb	r3, r3
   2f456:	617b      	str	r3, [r7, #20]
   2f458:	e002      	b.n	2f460 <readPacket+0xd0>
        goto exit;
   2f45a:	46c0      	nop			; (mov r8, r8)
   2f45c:	e000      	b.n	2f460 <readPacket+0xd0>
        goto exit;
   2f45e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f460:	697b      	ldr	r3, [r7, #20]
}
   2f462:	0018      	movs	r0, r3
   2f464:	46bd      	mov	sp, r7
   2f466:	b006      	add	sp, #24
   2f468:	bc04      	pop	{r2}
   2f46a:	4690      	mov	r8, r2
   2f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f46e:	46c0      	nop			; (mov r8, r8)
   2f470:	00030035 	.word	0x00030035
   2f474:	0002f2fd 	.word	0x0002f2fd
   2f478:	00030e0d 	.word	0x00030e0d

0002f47c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f47c:	b580      	push	{r7, lr}
   2f47e:	b086      	sub	sp, #24
   2f480:	af00      	add	r7, sp, #0
   2f482:	6078      	str	r0, [r7, #4]
   2f484:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f486:	687b      	ldr	r3, [r7, #4]
   2f488:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f48a:	683b      	ldr	r3, [r7, #0]
   2f48c:	689b      	ldr	r3, [r3, #8]
   2f48e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f490:	683b      	ldr	r3, [r7, #0]
   2f492:	685b      	ldr	r3, [r3, #4]
   2f494:	001a      	movs	r2, r3
   2f496:	693b      	ldr	r3, [r7, #16]
   2f498:	189b      	adds	r3, r3, r2
   2f49a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f49c:	e039      	b.n	2f512 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f49e:	693b      	ldr	r3, [r7, #16]
   2f4a0:	781b      	ldrb	r3, [r3, #0]
   2f4a2:	2b2f      	cmp	r3, #47	; 0x2f
   2f4a4:	d103      	bne.n	2f4ae <isTopicMatched+0x32>
   2f4a6:	697b      	ldr	r3, [r7, #20]
   2f4a8:	781b      	ldrb	r3, [r3, #0]
   2f4aa:	2b2f      	cmp	r3, #47	; 0x2f
   2f4ac:	d13a      	bne.n	2f524 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f4ae:	697b      	ldr	r3, [r7, #20]
   2f4b0:	781b      	ldrb	r3, [r3, #0]
   2f4b2:	2b2b      	cmp	r3, #43	; 0x2b
   2f4b4:	d009      	beq.n	2f4ca <isTopicMatched+0x4e>
   2f4b6:	697b      	ldr	r3, [r7, #20]
   2f4b8:	781b      	ldrb	r3, [r3, #0]
   2f4ba:	2b23      	cmp	r3, #35	; 0x23
   2f4bc:	d005      	beq.n	2f4ca <isTopicMatched+0x4e>
   2f4be:	697b      	ldr	r3, [r7, #20]
   2f4c0:	781a      	ldrb	r2, [r3, #0]
   2f4c2:	693b      	ldr	r3, [r7, #16]
   2f4c4:	781b      	ldrb	r3, [r3, #0]
   2f4c6:	429a      	cmp	r2, r3
   2f4c8:	d12e      	bne.n	2f528 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f4ca:	697b      	ldr	r3, [r7, #20]
   2f4cc:	781b      	ldrb	r3, [r3, #0]
   2f4ce:	2b2b      	cmp	r3, #43	; 0x2b
   2f4d0:	d112      	bne.n	2f4f8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f4d2:	693b      	ldr	r3, [r7, #16]
   2f4d4:	3301      	adds	r3, #1
   2f4d6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f4d8:	e005      	b.n	2f4e6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f4da:	693b      	ldr	r3, [r7, #16]
   2f4dc:	3301      	adds	r3, #1
   2f4de:	613b      	str	r3, [r7, #16]
   2f4e0:	693b      	ldr	r3, [r7, #16]
   2f4e2:	3301      	adds	r3, #1
   2f4e4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f4e6:	68fa      	ldr	r2, [r7, #12]
   2f4e8:	68bb      	ldr	r3, [r7, #8]
   2f4ea:	429a      	cmp	r2, r3
   2f4ec:	d20b      	bcs.n	2f506 <isTopicMatched+0x8a>
   2f4ee:	68fb      	ldr	r3, [r7, #12]
   2f4f0:	781b      	ldrb	r3, [r3, #0]
   2f4f2:	2b2f      	cmp	r3, #47	; 0x2f
   2f4f4:	d1f1      	bne.n	2f4da <isTopicMatched+0x5e>
   2f4f6:	e006      	b.n	2f506 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f4f8:	697b      	ldr	r3, [r7, #20]
   2f4fa:	781b      	ldrb	r3, [r3, #0]
   2f4fc:	2b23      	cmp	r3, #35	; 0x23
   2f4fe:	d102      	bne.n	2f506 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f500:	68bb      	ldr	r3, [r7, #8]
   2f502:	3b01      	subs	r3, #1
   2f504:	613b      	str	r3, [r7, #16]
        curf++;
   2f506:	697b      	ldr	r3, [r7, #20]
   2f508:	3301      	adds	r3, #1
   2f50a:	617b      	str	r3, [r7, #20]
        curn++;
   2f50c:	693b      	ldr	r3, [r7, #16]
   2f50e:	3301      	adds	r3, #1
   2f510:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f512:	697b      	ldr	r3, [r7, #20]
   2f514:	781b      	ldrb	r3, [r3, #0]
   2f516:	2b00      	cmp	r3, #0
   2f518:	d007      	beq.n	2f52a <isTopicMatched+0xae>
   2f51a:	693a      	ldr	r2, [r7, #16]
   2f51c:	68bb      	ldr	r3, [r7, #8]
   2f51e:	429a      	cmp	r2, r3
   2f520:	d3bd      	bcc.n	2f49e <isTopicMatched+0x22>
   2f522:	e002      	b.n	2f52a <isTopicMatched+0xae>
            break;
   2f524:	46c0      	nop			; (mov r8, r8)
   2f526:	e000      	b.n	2f52a <isTopicMatched+0xae>
            break;
   2f528:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f52a:	693a      	ldr	r2, [r7, #16]
   2f52c:	68bb      	ldr	r3, [r7, #8]
   2f52e:	429a      	cmp	r2, r3
   2f530:	d105      	bne.n	2f53e <isTopicMatched+0xc2>
   2f532:	697b      	ldr	r3, [r7, #20]
   2f534:	781b      	ldrb	r3, [r3, #0]
   2f536:	2b00      	cmp	r3, #0
   2f538:	d101      	bne.n	2f53e <isTopicMatched+0xc2>
   2f53a:	2301      	movs	r3, #1
   2f53c:	e000      	b.n	2f540 <isTopicMatched+0xc4>
   2f53e:	2300      	movs	r3, #0
   2f540:	b2db      	uxtb	r3, r3
}
   2f542:	0018      	movs	r0, r3
   2f544:	46bd      	mov	sp, r7
   2f546:	b006      	add	sp, #24
   2f548:	bd80      	pop	{r7, pc}
	...

0002f54c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f54c:	b580      	push	{r7, lr}
   2f54e:	b08a      	sub	sp, #40	; 0x28
   2f550:	af00      	add	r7, sp, #0
   2f552:	60f8      	str	r0, [r7, #12]
   2f554:	60b9      	str	r1, [r7, #8]
   2f556:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f558:	2301      	movs	r3, #1
   2f55a:	425b      	negs	r3, r3
   2f55c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f55e:	2300      	movs	r3, #0
   2f560:	627b      	str	r3, [r7, #36]	; 0x24
   2f562:	e044      	b.n	2f5ee <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f564:	68fa      	ldr	r2, [r7, #12]
   2f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f568:	3304      	adds	r3, #4
   2f56a:	00db      	lsls	r3, r3, #3
   2f56c:	18d3      	adds	r3, r2, r3
   2f56e:	3304      	adds	r3, #4
   2f570:	681b      	ldr	r3, [r3, #0]
   2f572:	2b00      	cmp	r3, #0
   2f574:	d038      	beq.n	2f5e8 <deliverMessage+0x9c>
   2f576:	68fa      	ldr	r2, [r7, #12]
   2f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f57a:	3304      	adds	r3, #4
   2f57c:	00db      	lsls	r3, r3, #3
   2f57e:	18d3      	adds	r3, r2, r3
   2f580:	3304      	adds	r3, #4
   2f582:	681a      	ldr	r2, [r3, #0]
   2f584:	68bb      	ldr	r3, [r7, #8]
   2f586:	0011      	movs	r1, r2
   2f588:	0018      	movs	r0, r3
   2f58a:	4b28      	ldr	r3, [pc, #160]	; (2f62c <deliverMessage+0xe0>)
   2f58c:	4798      	blx	r3
   2f58e:	1e03      	subs	r3, r0, #0
   2f590:	d10d      	bne.n	2f5ae <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f592:	68fa      	ldr	r2, [r7, #12]
   2f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f596:	3304      	adds	r3, #4
   2f598:	00db      	lsls	r3, r3, #3
   2f59a:	18d3      	adds	r3, r2, r3
   2f59c:	3304      	adds	r3, #4
   2f59e:	681b      	ldr	r3, [r3, #0]
   2f5a0:	68ba      	ldr	r2, [r7, #8]
   2f5a2:	0011      	movs	r1, r2
   2f5a4:	0018      	movs	r0, r3
   2f5a6:	4b22      	ldr	r3, [pc, #136]	; (2f630 <deliverMessage+0xe4>)
   2f5a8:	4798      	blx	r3
   2f5aa:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f5ac:	d01c      	beq.n	2f5e8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f5ae:	68fa      	ldr	r2, [r7, #12]
   2f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5b2:	3304      	adds	r3, #4
   2f5b4:	00db      	lsls	r3, r3, #3
   2f5b6:	18d3      	adds	r3, r2, r3
   2f5b8:	3308      	adds	r3, #8
   2f5ba:	681b      	ldr	r3, [r3, #0]
   2f5bc:	2b00      	cmp	r3, #0
   2f5be:	d013      	beq.n	2f5e8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f5c0:	687a      	ldr	r2, [r7, #4]
   2f5c2:	68b9      	ldr	r1, [r7, #8]
   2f5c4:	2318      	movs	r3, #24
   2f5c6:	18fb      	adds	r3, r7, r3
   2f5c8:	0018      	movs	r0, r3
   2f5ca:	4b1a      	ldr	r3, [pc, #104]	; (2f634 <deliverMessage+0xe8>)
   2f5cc:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f5ce:	68fa      	ldr	r2, [r7, #12]
   2f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5d2:	3304      	adds	r3, #4
   2f5d4:	00db      	lsls	r3, r3, #3
   2f5d6:	18d3      	adds	r3, r2, r3
   2f5d8:	3308      	adds	r3, #8
   2f5da:	681b      	ldr	r3, [r3, #0]
   2f5dc:	2218      	movs	r2, #24
   2f5de:	18ba      	adds	r2, r7, r2
   2f5e0:	0010      	movs	r0, r2
   2f5e2:	4798      	blx	r3
                rc = SUCCESS;
   2f5e4:	2300      	movs	r3, #0
   2f5e6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5ea:	3301      	adds	r3, #1
   2f5ec:	627b      	str	r3, [r7, #36]	; 0x24
   2f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5f0:	2b04      	cmp	r3, #4
   2f5f2:	ddb7      	ble.n	2f564 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f5f4:	6a3b      	ldr	r3, [r7, #32]
   2f5f6:	3301      	adds	r3, #1
   2f5f8:	d112      	bne.n	2f620 <deliverMessage+0xd4>
   2f5fa:	68fb      	ldr	r3, [r7, #12]
   2f5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5fe:	2b00      	cmp	r3, #0
   2f600:	d00e      	beq.n	2f620 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f602:	687a      	ldr	r2, [r7, #4]
   2f604:	68b9      	ldr	r1, [r7, #8]
   2f606:	2310      	movs	r3, #16
   2f608:	18fb      	adds	r3, r7, r3
   2f60a:	0018      	movs	r0, r3
   2f60c:	4b09      	ldr	r3, [pc, #36]	; (2f634 <deliverMessage+0xe8>)
   2f60e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f610:	68fb      	ldr	r3, [r7, #12]
   2f612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f614:	2210      	movs	r2, #16
   2f616:	18ba      	adds	r2, r7, r2
   2f618:	0010      	movs	r0, r2
   2f61a:	4798      	blx	r3
        rc = SUCCESS;
   2f61c:	2300      	movs	r3, #0
   2f61e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f620:	6a3b      	ldr	r3, [r7, #32]
}
   2f622:	0018      	movs	r0, r3
   2f624:	46bd      	mov	sp, r7
   2f626:	b00a      	add	sp, #40	; 0x28
   2f628:	bd80      	pop	{r7, pc}
   2f62a:	46c0      	nop			; (mov r8, r8)
   2f62c:	00031221 	.word	0x00031221
   2f630:	0002f47d 	.word	0x0002f47d
   2f634:	0002f185 	.word	0x0002f185

0002f638 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f638:	b580      	push	{r7, lr}
   2f63a:	b088      	sub	sp, #32
   2f63c:	af00      	add	r7, sp, #0
   2f63e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f640:	2301      	movs	r3, #1
   2f642:	425b      	negs	r3, r3
   2f644:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f646:	687b      	ldr	r3, [r7, #4]
   2f648:	699b      	ldr	r3, [r3, #24]
   2f64a:	2b00      	cmp	r3, #0
   2f64c:	d102      	bne.n	2f654 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f64e:	2300      	movs	r3, #0
   2f650:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f652:	e033      	b.n	2f6bc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f654:	687b      	ldr	r3, [r7, #4]
   2f656:	3354      	adds	r3, #84	; 0x54
   2f658:	0018      	movs	r0, r3
   2f65a:	4b1b      	ldr	r3, [pc, #108]	; (2f6c8 <keepalive+0x90>)
   2f65c:	4798      	blx	r3
   2f65e:	1e03      	subs	r3, r0, #0
   2f660:	d02c      	beq.n	2f6bc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f662:	687b      	ldr	r3, [r7, #4]
   2f664:	7f1b      	ldrb	r3, [r3, #28]
   2f666:	2b00      	cmp	r3, #0
   2f668:	d128      	bne.n	2f6bc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f66a:	230c      	movs	r3, #12
   2f66c:	18fb      	adds	r3, r7, r3
   2f66e:	0018      	movs	r0, r3
   2f670:	4b16      	ldr	r3, [pc, #88]	; (2f6cc <keepalive+0x94>)
   2f672:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f674:	23fa      	movs	r3, #250	; 0xfa
   2f676:	009a      	lsls	r2, r3, #2
   2f678:	230c      	movs	r3, #12
   2f67a:	18fb      	adds	r3, r7, r3
   2f67c:	0011      	movs	r1, r2
   2f67e:	0018      	movs	r0, r3
   2f680:	4b13      	ldr	r3, [pc, #76]	; (2f6d0 <keepalive+0x98>)
   2f682:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f684:	687b      	ldr	r3, [r7, #4]
   2f686:	691a      	ldr	r2, [r3, #16]
   2f688:	687b      	ldr	r3, [r7, #4]
   2f68a:	689b      	ldr	r3, [r3, #8]
   2f68c:	0019      	movs	r1, r3
   2f68e:	0010      	movs	r0, r2
   2f690:	4b10      	ldr	r3, [pc, #64]	; (2f6d4 <keepalive+0x9c>)
   2f692:	4798      	blx	r3
   2f694:	0003      	movs	r3, r0
   2f696:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f698:	69bb      	ldr	r3, [r7, #24]
   2f69a:	2b00      	cmp	r3, #0
   2f69c:	dd0e      	ble.n	2f6bc <keepalive+0x84>
   2f69e:	230c      	movs	r3, #12
   2f6a0:	18fa      	adds	r2, r7, r3
   2f6a2:	69b9      	ldr	r1, [r7, #24]
   2f6a4:	687b      	ldr	r3, [r7, #4]
   2f6a6:	0018      	movs	r0, r3
   2f6a8:	4b0b      	ldr	r3, [pc, #44]	; (2f6d8 <keepalive+0xa0>)
   2f6aa:	4798      	blx	r3
   2f6ac:	0003      	movs	r3, r0
   2f6ae:	61fb      	str	r3, [r7, #28]
   2f6b0:	69fb      	ldr	r3, [r7, #28]
   2f6b2:	2b00      	cmp	r3, #0
   2f6b4:	d102      	bne.n	2f6bc <keepalive+0x84>
                c->ping_outstanding = 1;
   2f6b6:	687b      	ldr	r3, [r7, #4]
   2f6b8:	2201      	movs	r2, #1
   2f6ba:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f6bc:	69fb      	ldr	r3, [r7, #28]
}
   2f6be:	0018      	movs	r0, r3
   2f6c0:	46bd      	mov	sp, r7
   2f6c2:	b008      	add	sp, #32
   2f6c4:	bd80      	pop	{r7, pc}
   2f6c6:	46c0      	nop			; (mov r8, r8)
   2f6c8:	0002ffb9 	.word	0x0002ffb9
   2f6cc:	0003005d 	.word	0x0003005d
   2f6d0:	0002ffe5 	.word	0x0002ffe5
   2f6d4:	00030c31 	.word	0x00030c31
   2f6d8:	0002f1d5 	.word	0x0002f1d5

0002f6dc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f6de:	b095      	sub	sp, #84	; 0x54
   2f6e0:	af06      	add	r7, sp, #24
   2f6e2:	6078      	str	r0, [r7, #4]
   2f6e4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f6e6:	683a      	ldr	r2, [r7, #0]
   2f6e8:	687b      	ldr	r3, [r7, #4]
   2f6ea:	0011      	movs	r1, r2
   2f6ec:	0018      	movs	r0, r3
   2f6ee:	4b70      	ldr	r3, [pc, #448]	; (2f8b0 <cycle+0x1d4>)
   2f6f0:	4798      	blx	r3
   2f6f2:	0002      	movs	r2, r0
   2f6f4:	232e      	movs	r3, #46	; 0x2e
   2f6f6:	18fb      	adds	r3, r7, r3
   2f6f8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f6fa:	2300      	movs	r3, #0
   2f6fc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f6fe:	2300      	movs	r3, #0
   2f700:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f702:	232e      	movs	r3, #46	; 0x2e
   2f704:	18fb      	adds	r3, r7, r3
   2f706:	881b      	ldrh	r3, [r3, #0]
   2f708:	2b0d      	cmp	r3, #13
   2f70a:	d900      	bls.n	2f70e <cycle+0x32>
   2f70c:	e0bd      	b.n	2f88a <cycle+0x1ae>
   2f70e:	009a      	lsls	r2, r3, #2
   2f710:	4b68      	ldr	r3, [pc, #416]	; (2f8b4 <cycle+0x1d8>)
   2f712:	18d3      	adds	r3, r2, r3
   2f714:	681b      	ldr	r3, [r3, #0]
   2f716:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f718:	687b      	ldr	r3, [r7, #4]
   2f71a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f71c:	687b      	ldr	r3, [r7, #4]
   2f71e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f720:	001e      	movs	r6, r3
   2f722:	2310      	movs	r3, #16
   2f724:	18fb      	adds	r3, r7, r3
   2f726:	1d1d      	adds	r5, r3, #4
   2f728:	2310      	movs	r3, #16
   2f72a:	18fb      	adds	r3, r7, r3
   2f72c:	1c5c      	adds	r4, r3, #1
   2f72e:	230c      	movs	r3, #12
   2f730:	18f9      	adds	r1, r7, r3
   2f732:	2310      	movs	r3, #16
   2f734:	18fb      	adds	r3, r7, r3
   2f736:	1c98      	adds	r0, r3, #2
   2f738:	9604      	str	r6, [sp, #16]
   2f73a:	9203      	str	r2, [sp, #12]
   2f73c:	2310      	movs	r3, #16
   2f73e:	18fb      	adds	r3, r7, r3
   2f740:	330c      	adds	r3, #12
   2f742:	9302      	str	r3, [sp, #8]
   2f744:	2310      	movs	r3, #16
   2f746:	18fb      	adds	r3, r7, r3
   2f748:	3308      	adds	r3, #8
   2f74a:	9301      	str	r3, [sp, #4]
   2f74c:	2320      	movs	r3, #32
   2f74e:	18fb      	adds	r3, r7, r3
   2f750:	9300      	str	r3, [sp, #0]
   2f752:	002b      	movs	r3, r5
   2f754:	0022      	movs	r2, r4
   2f756:	4c58      	ldr	r4, [pc, #352]	; (2f8b8 <cycle+0x1dc>)
   2f758:	47a0      	blx	r4
   2f75a:	0003      	movs	r3, r0
   2f75c:	2b01      	cmp	r3, #1
   2f75e:	d000      	beq.n	2f762 <cycle+0x86>
   2f760:	e098      	b.n	2f894 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f762:	68fb      	ldr	r3, [r7, #12]
   2f764:	b2da      	uxtb	r2, r3
   2f766:	2310      	movs	r3, #16
   2f768:	18fb      	adds	r3, r7, r3
   2f76a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f76c:	2310      	movs	r3, #16
   2f76e:	18fa      	adds	r2, r7, r3
   2f770:	2320      	movs	r3, #32
   2f772:	18f9      	adds	r1, r7, r3
   2f774:	687b      	ldr	r3, [r7, #4]
   2f776:	0018      	movs	r0, r3
   2f778:	4b50      	ldr	r3, [pc, #320]	; (2f8bc <cycle+0x1e0>)
   2f77a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f77c:	2310      	movs	r3, #16
   2f77e:	18fb      	adds	r3, r7, r3
   2f780:	781b      	ldrb	r3, [r3, #0]
   2f782:	2b00      	cmp	r3, #0
   2f784:	d100      	bne.n	2f788 <cycle+0xac>
   2f786:	e07d      	b.n	2f884 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f788:	2310      	movs	r3, #16
   2f78a:	18fb      	adds	r3, r7, r3
   2f78c:	781b      	ldrb	r3, [r3, #0]
   2f78e:	2b01      	cmp	r3, #1
   2f790:	d10f      	bne.n	2f7b2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f792:	687b      	ldr	r3, [r7, #4]
   2f794:	6918      	ldr	r0, [r3, #16]
   2f796:	687b      	ldr	r3, [r7, #4]
   2f798:	689b      	ldr	r3, [r3, #8]
   2f79a:	0019      	movs	r1, r3
   2f79c:	2310      	movs	r3, #16
   2f79e:	18fb      	adds	r3, r7, r3
   2f7a0:	889b      	ldrh	r3, [r3, #4]
   2f7a2:	9300      	str	r3, [sp, #0]
   2f7a4:	2300      	movs	r3, #0
   2f7a6:	2204      	movs	r2, #4
   2f7a8:	4c45      	ldr	r4, [pc, #276]	; (2f8c0 <cycle+0x1e4>)
   2f7aa:	47a0      	blx	r4
   2f7ac:	0003      	movs	r3, r0
   2f7ae:	637b      	str	r3, [r7, #52]	; 0x34
   2f7b0:	e013      	b.n	2f7da <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f7b2:	2310      	movs	r3, #16
   2f7b4:	18fb      	adds	r3, r7, r3
   2f7b6:	781b      	ldrb	r3, [r3, #0]
   2f7b8:	2b02      	cmp	r3, #2
   2f7ba:	d10e      	bne.n	2f7da <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f7bc:	687b      	ldr	r3, [r7, #4]
   2f7be:	6918      	ldr	r0, [r3, #16]
   2f7c0:	687b      	ldr	r3, [r7, #4]
   2f7c2:	689b      	ldr	r3, [r3, #8]
   2f7c4:	0019      	movs	r1, r3
   2f7c6:	2310      	movs	r3, #16
   2f7c8:	18fb      	adds	r3, r7, r3
   2f7ca:	889b      	ldrh	r3, [r3, #4]
   2f7cc:	9300      	str	r3, [sp, #0]
   2f7ce:	2300      	movs	r3, #0
   2f7d0:	2205      	movs	r2, #5
   2f7d2:	4c3b      	ldr	r4, [pc, #236]	; (2f8c0 <cycle+0x1e4>)
   2f7d4:	47a0      	blx	r4
   2f7d6:	0003      	movs	r3, r0
   2f7d8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f7dc:	2b00      	cmp	r3, #0
   2f7de:	dc03      	bgt.n	2f7e8 <cycle+0x10c>
                    rc = FAILURE;
   2f7e0:	2301      	movs	r3, #1
   2f7e2:	425b      	negs	r3, r3
   2f7e4:	633b      	str	r3, [r7, #48]	; 0x30
   2f7e6:	e007      	b.n	2f7f8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f7e8:	683a      	ldr	r2, [r7, #0]
   2f7ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f7ec:	687b      	ldr	r3, [r7, #4]
   2f7ee:	0018      	movs	r0, r3
   2f7f0:	4b34      	ldr	r3, [pc, #208]	; (2f8c4 <cycle+0x1e8>)
   2f7f2:	4798      	blx	r3
   2f7f4:	0003      	movs	r3, r0
   2f7f6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f7fa:	3301      	adds	r3, #1
   2f7fc:	d142      	bne.n	2f884 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f7fe:	46c0      	nop			; (mov r8, r8)
   2f800:	e049      	b.n	2f896 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f802:	687b      	ldr	r3, [r7, #4]
   2f804:	695c      	ldr	r4, [r3, #20]
   2f806:	687b      	ldr	r3, [r7, #4]
   2f808:	68db      	ldr	r3, [r3, #12]
   2f80a:	220a      	movs	r2, #10
   2f80c:	18ba      	adds	r2, r7, r2
   2f80e:	2109      	movs	r1, #9
   2f810:	1879      	adds	r1, r7, r1
   2f812:	2008      	movs	r0, #8
   2f814:	1838      	adds	r0, r7, r0
   2f816:	9300      	str	r3, [sp, #0]
   2f818:	0023      	movs	r3, r4
   2f81a:	4c2b      	ldr	r4, [pc, #172]	; (2f8c8 <cycle+0x1ec>)
   2f81c:	47a0      	blx	r4
   2f81e:	0003      	movs	r3, r0
   2f820:	2b01      	cmp	r3, #1
   2f822:	d003      	beq.n	2f82c <cycle+0x150>
                rc = FAILURE;
   2f824:	2301      	movs	r3, #1
   2f826:	425b      	negs	r3, r3
   2f828:	633b      	str	r3, [r7, #48]	; 0x30
   2f82a:	e023      	b.n	2f874 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f82c:	687b      	ldr	r3, [r7, #4]
   2f82e:	6918      	ldr	r0, [r3, #16]
   2f830:	687b      	ldr	r3, [r7, #4]
   2f832:	689b      	ldr	r3, [r3, #8]
   2f834:	0019      	movs	r1, r3
   2f836:	230a      	movs	r3, #10
   2f838:	18fb      	adds	r3, r7, r3
   2f83a:	881b      	ldrh	r3, [r3, #0]
   2f83c:	9300      	str	r3, [sp, #0]
   2f83e:	2300      	movs	r3, #0
   2f840:	2206      	movs	r2, #6
   2f842:	4c1f      	ldr	r4, [pc, #124]	; (2f8c0 <cycle+0x1e4>)
   2f844:	47a0      	blx	r4
   2f846:	0003      	movs	r3, r0
   2f848:	637b      	str	r3, [r7, #52]	; 0x34
   2f84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f84c:	2b00      	cmp	r3, #0
   2f84e:	dc03      	bgt.n	2f858 <cycle+0x17c>
                rc = FAILURE;
   2f850:	2301      	movs	r3, #1
   2f852:	425b      	negs	r3, r3
   2f854:	633b      	str	r3, [r7, #48]	; 0x30
   2f856:	e00d      	b.n	2f874 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f858:	683a      	ldr	r2, [r7, #0]
   2f85a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f85c:	687b      	ldr	r3, [r7, #4]
   2f85e:	0018      	movs	r0, r3
   2f860:	4b18      	ldr	r3, [pc, #96]	; (2f8c4 <cycle+0x1e8>)
   2f862:	4798      	blx	r3
   2f864:	0003      	movs	r3, r0
   2f866:	633b      	str	r3, [r7, #48]	; 0x30
   2f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f86a:	2b00      	cmp	r3, #0
   2f86c:	d002      	beq.n	2f874 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f86e:	2301      	movs	r3, #1
   2f870:	425b      	negs	r3, r3
   2f872:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f876:	3301      	adds	r3, #1
   2f878:	d106      	bne.n	2f888 <cycle+0x1ac>
                goto exit; // there was a problem
   2f87a:	e00c      	b.n	2f896 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f87c:	687b      	ldr	r3, [r7, #4]
   2f87e:	2200      	movs	r2, #0
   2f880:	771a      	strb	r2, [r3, #28]
            break;
   2f882:	e002      	b.n	2f88a <cycle+0x1ae>
            break;
   2f884:	46c0      	nop			; (mov r8, r8)
   2f886:	e000      	b.n	2f88a <cycle+0x1ae>
            break;
   2f888:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f88a:	687b      	ldr	r3, [r7, #4]
   2f88c:	0018      	movs	r0, r3
   2f88e:	4b0f      	ldr	r3, [pc, #60]	; (2f8cc <cycle+0x1f0>)
   2f890:	4798      	blx	r3
   2f892:	e000      	b.n	2f896 <cycle+0x1ba>
                goto exit;
   2f894:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f898:	2b00      	cmp	r3, #0
   2f89a:	d103      	bne.n	2f8a4 <cycle+0x1c8>
        rc = packet_type;
   2f89c:	232e      	movs	r3, #46	; 0x2e
   2f89e:	18fb      	adds	r3, r7, r3
   2f8a0:	881b      	ldrh	r3, [r3, #0]
   2f8a2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f8a6:	0018      	movs	r0, r3
   2f8a8:	46bd      	mov	sp, r7
   2f8aa:	b00f      	add	sp, #60	; 0x3c
   2f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f8ae:	46c0      	nop			; (mov r8, r8)
   2f8b0:	0002f391 	.word	0x0002f391
   2f8b4:	0003ac04 	.word	0x0003ac04
   2f8b8:	00030c55 	.word	0x00030c55
   2f8bc:	0002f54d 	.word	0x0002f54d
   2f8c0:	0003144d 	.word	0x0003144d
   2f8c4:	0002f1d5 	.word	0x0002f1d5
   2f8c8:	00030d59 	.word	0x00030d59
   2f8cc:	0002f639 	.word	0x0002f639

0002f8d0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f8d0:	b580      	push	{r7, lr}
   2f8d2:	b086      	sub	sp, #24
   2f8d4:	af00      	add	r7, sp, #0
   2f8d6:	6078      	str	r0, [r7, #4]
   2f8d8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f8da:	2300      	movs	r3, #0
   2f8dc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f8de:	2308      	movs	r3, #8
   2f8e0:	18fb      	adds	r3, r7, r3
   2f8e2:	0018      	movs	r0, r3
   2f8e4:	4b11      	ldr	r3, [pc, #68]	; (2f92c <MQTTYield+0x5c>)
   2f8e6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f8e8:	683a      	ldr	r2, [r7, #0]
   2f8ea:	2308      	movs	r3, #8
   2f8ec:	18fb      	adds	r3, r7, r3
   2f8ee:	0011      	movs	r1, r2
   2f8f0:	0018      	movs	r0, r3
   2f8f2:	4b0f      	ldr	r3, [pc, #60]	; (2f930 <MQTTYield+0x60>)
   2f8f4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f8f6:	2308      	movs	r3, #8
   2f8f8:	18fa      	adds	r2, r7, r3
   2f8fa:	687b      	ldr	r3, [r7, #4]
   2f8fc:	0011      	movs	r1, r2
   2f8fe:	0018      	movs	r0, r3
   2f900:	4b0c      	ldr	r3, [pc, #48]	; (2f934 <MQTTYield+0x64>)
   2f902:	4798      	blx	r3
   2f904:	0003      	movs	r3, r0
   2f906:	3301      	adds	r3, #1
   2f908:	d103      	bne.n	2f912 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f90a:	2301      	movs	r3, #1
   2f90c:	425b      	negs	r3, r3
   2f90e:	617b      	str	r3, [r7, #20]
            break;
   2f910:	e006      	b.n	2f920 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f912:	2308      	movs	r3, #8
   2f914:	18fb      	adds	r3, r7, r3
   2f916:	0018      	movs	r0, r3
   2f918:	4b07      	ldr	r3, [pc, #28]	; (2f938 <MQTTYield+0x68>)
   2f91a:	4798      	blx	r3
   2f91c:	1e03      	subs	r3, r0, #0
   2f91e:	d0ea      	beq.n	2f8f6 <MQTTYield+0x26>
        
    return rc;
   2f920:	697b      	ldr	r3, [r7, #20]
}
   2f922:	0018      	movs	r0, r3
   2f924:	46bd      	mov	sp, r7
   2f926:	b006      	add	sp, #24
   2f928:	bd80      	pop	{r7, pc}
   2f92a:	46c0      	nop			; (mov r8, r8)
   2f92c:	0003005d 	.word	0x0003005d
   2f930:	0002ffe5 	.word	0x0002ffe5
   2f934:	0002f6dd 	.word	0x0002f6dd
   2f938:	0002ffb9 	.word	0x0002ffb9

0002f93c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f93c:	b580      	push	{r7, lr}
   2f93e:	b086      	sub	sp, #24
   2f940:	af00      	add	r7, sp, #0
   2f942:	60f8      	str	r0, [r7, #12]
   2f944:	60b9      	str	r1, [r7, #8]
   2f946:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f948:	2301      	movs	r3, #1
   2f94a:	425b      	negs	r3, r3
   2f94c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f94e:	687b      	ldr	r3, [r7, #4]
   2f950:	0018      	movs	r0, r3
   2f952:	4b0b      	ldr	r3, [pc, #44]	; (2f980 <waitfor+0x44>)
   2f954:	4798      	blx	r3
   2f956:	1e03      	subs	r3, r0, #0
   2f958:	d10c      	bne.n	2f974 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f95a:	687a      	ldr	r2, [r7, #4]
   2f95c:	68fb      	ldr	r3, [r7, #12]
   2f95e:	0011      	movs	r1, r2
   2f960:	0018      	movs	r0, r3
   2f962:	4b08      	ldr	r3, [pc, #32]	; (2f984 <waitfor+0x48>)
   2f964:	4798      	blx	r3
   2f966:	0003      	movs	r3, r0
   2f968:	617b      	str	r3, [r7, #20]
   2f96a:	697a      	ldr	r2, [r7, #20]
   2f96c:	68bb      	ldr	r3, [r7, #8]
   2f96e:	429a      	cmp	r2, r3
   2f970:	d1ed      	bne.n	2f94e <waitfor+0x12>
   2f972:	e000      	b.n	2f976 <waitfor+0x3a>
            break; // we timed out
   2f974:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f976:	697b      	ldr	r3, [r7, #20]
}
   2f978:	0018      	movs	r0, r3
   2f97a:	46bd      	mov	sp, r7
   2f97c:	b006      	add	sp, #24
   2f97e:	bd80      	pop	{r7, pc}
   2f980:	0002ffb9 	.word	0x0002ffb9
   2f984:	0002f6dd 	.word	0x0002f6dd

0002f988 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f988:	b590      	push	{r4, r7, lr}
   2f98a:	b09f      	sub	sp, #124	; 0x7c
   2f98c:	af00      	add	r7, sp, #0
   2f98e:	6078      	str	r0, [r7, #4]
   2f990:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f992:	2301      	movs	r3, #1
   2f994:	425b      	negs	r3, r3
   2f996:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f998:	230c      	movs	r3, #12
   2f99a:	18fa      	adds	r2, r7, r3
   2f99c:	4b41      	ldr	r3, [pc, #260]	; (2faa4 <MQTTConnect+0x11c>)
   2f99e:	0010      	movs	r0, r2
   2f9a0:	0019      	movs	r1, r3
   2f9a2:	2358      	movs	r3, #88	; 0x58
   2f9a4:	001a      	movs	r2, r3
   2f9a6:	4b40      	ldr	r3, [pc, #256]	; (2faa8 <MQTTConnect+0x120>)
   2f9a8:	4798      	blx	r3
    int len = 0;
   2f9aa:	2300      	movs	r3, #0
   2f9ac:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f9ae:	687b      	ldr	r3, [r7, #4]
   2f9b0:	6a1b      	ldr	r3, [r3, #32]
   2f9b2:	2b00      	cmp	r3, #0
   2f9b4:	d166      	bne.n	2fa84 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f9b6:	2364      	movs	r3, #100	; 0x64
   2f9b8:	18fb      	adds	r3, r7, r3
   2f9ba:	0018      	movs	r0, r3
   2f9bc:	4b3b      	ldr	r3, [pc, #236]	; (2faac <MQTTConnect+0x124>)
   2f9be:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f9c0:	687b      	ldr	r3, [r7, #4]
   2f9c2:	685a      	ldr	r2, [r3, #4]
   2f9c4:	2364      	movs	r3, #100	; 0x64
   2f9c6:	18fb      	adds	r3, r7, r3
   2f9c8:	0011      	movs	r1, r2
   2f9ca:	0018      	movs	r0, r3
   2f9cc:	4b38      	ldr	r3, [pc, #224]	; (2fab0 <MQTTConnect+0x128>)
   2f9ce:	4798      	blx	r3

    if (options == 0)
   2f9d0:	683b      	ldr	r3, [r7, #0]
   2f9d2:	2b00      	cmp	r3, #0
   2f9d4:	d102      	bne.n	2f9dc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f9d6:	230c      	movs	r3, #12
   2f9d8:	18fb      	adds	r3, r7, r3
   2f9da:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f9dc:	683b      	ldr	r3, [r7, #0]
   2f9de:	8b1b      	ldrh	r3, [r3, #24]
   2f9e0:	001a      	movs	r2, r3
   2f9e2:	687b      	ldr	r3, [r7, #4]
   2f9e4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f9e6:	687b      	ldr	r3, [r7, #4]
   2f9e8:	3354      	adds	r3, #84	; 0x54
   2f9ea:	001a      	movs	r2, r3
   2f9ec:	687b      	ldr	r3, [r7, #4]
   2f9ee:	699b      	ldr	r3, [r3, #24]
   2f9f0:	0019      	movs	r1, r3
   2f9f2:	0010      	movs	r0, r2
   2f9f4:	4b2f      	ldr	r3, [pc, #188]	; (2fab4 <MQTTConnect+0x12c>)
   2f9f6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f9f8:	687b      	ldr	r3, [r7, #4]
   2f9fa:	6918      	ldr	r0, [r3, #16]
   2f9fc:	687b      	ldr	r3, [r7, #4]
   2f9fe:	689b      	ldr	r3, [r3, #8]
   2fa00:	0019      	movs	r1, r3
   2fa02:	683b      	ldr	r3, [r7, #0]
   2fa04:	001a      	movs	r2, r3
   2fa06:	4b2c      	ldr	r3, [pc, #176]	; (2fab8 <MQTTConnect+0x130>)
   2fa08:	4798      	blx	r3
   2fa0a:	0003      	movs	r3, r0
   2fa0c:	673b      	str	r3, [r7, #112]	; 0x70
   2fa0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2fa10:	2b00      	cmp	r3, #0
   2fa12:	dd39      	ble.n	2fa88 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2fa14:	2364      	movs	r3, #100	; 0x64
   2fa16:	18fa      	adds	r2, r7, r3
   2fa18:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2fa1a:	687b      	ldr	r3, [r7, #4]
   2fa1c:	0018      	movs	r0, r3
   2fa1e:	4b27      	ldr	r3, [pc, #156]	; (2fabc <MQTTConnect+0x134>)
   2fa20:	4798      	blx	r3
   2fa22:	0003      	movs	r3, r0
   2fa24:	677b      	str	r3, [r7, #116]	; 0x74
   2fa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fa28:	2b00      	cmp	r3, #0
   2fa2a:	d12f      	bne.n	2fa8c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2fa2c:	2364      	movs	r3, #100	; 0x64
   2fa2e:	18fa      	adds	r2, r7, r3
   2fa30:	687b      	ldr	r3, [r7, #4]
   2fa32:	2102      	movs	r1, #2
   2fa34:	0018      	movs	r0, r3
   2fa36:	4b22      	ldr	r3, [pc, #136]	; (2fac0 <MQTTConnect+0x138>)
   2fa38:	4798      	blx	r3
   2fa3a:	0003      	movs	r3, r0
   2fa3c:	2b02      	cmp	r3, #2
   2fa3e:	d11d      	bne.n	2fa7c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2fa40:	230b      	movs	r3, #11
   2fa42:	18fb      	adds	r3, r7, r3
   2fa44:	22ff      	movs	r2, #255	; 0xff
   2fa46:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2fa48:	230a      	movs	r3, #10
   2fa4a:	18fb      	adds	r3, r7, r3
   2fa4c:	2200      	movs	r2, #0
   2fa4e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2fa50:	687b      	ldr	r3, [r7, #4]
   2fa52:	695a      	ldr	r2, [r3, #20]
   2fa54:	687b      	ldr	r3, [r7, #4]
   2fa56:	68db      	ldr	r3, [r3, #12]
   2fa58:	210b      	movs	r1, #11
   2fa5a:	1879      	adds	r1, r7, r1
   2fa5c:	200a      	movs	r0, #10
   2fa5e:	1838      	adds	r0, r7, r0
   2fa60:	4c18      	ldr	r4, [pc, #96]	; (2fac4 <MQTTConnect+0x13c>)
   2fa62:	47a0      	blx	r4
   2fa64:	0003      	movs	r3, r0
   2fa66:	2b01      	cmp	r3, #1
   2fa68:	d104      	bne.n	2fa74 <MQTTConnect+0xec>
            rc = connack_rc;
   2fa6a:	230b      	movs	r3, #11
   2fa6c:	18fb      	adds	r3, r7, r3
   2fa6e:	781b      	ldrb	r3, [r3, #0]
   2fa70:	677b      	str	r3, [r7, #116]	; 0x74
   2fa72:	e00c      	b.n	2fa8e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fa74:	2301      	movs	r3, #1
   2fa76:	425b      	negs	r3, r3
   2fa78:	677b      	str	r3, [r7, #116]	; 0x74
   2fa7a:	e008      	b.n	2fa8e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fa7c:	2301      	movs	r3, #1
   2fa7e:	425b      	negs	r3, r3
   2fa80:	677b      	str	r3, [r7, #116]	; 0x74
   2fa82:	e004      	b.n	2fa8e <MQTTConnect+0x106>
		goto exit;
   2fa84:	46c0      	nop			; (mov r8, r8)
   2fa86:	e002      	b.n	2fa8e <MQTTConnect+0x106>
        goto exit;
   2fa88:	46c0      	nop			; (mov r8, r8)
   2fa8a:	e000      	b.n	2fa8e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fa8c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fa8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fa90:	2b00      	cmp	r3, #0
   2fa92:	d102      	bne.n	2fa9a <MQTTConnect+0x112>
        c->isconnected = 1;
   2fa94:	687b      	ldr	r3, [r7, #4]
   2fa96:	2201      	movs	r2, #1
   2fa98:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fa9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fa9c:	0018      	movs	r0, r3
   2fa9e:	46bd      	mov	sp, r7
   2faa0:	b01f      	add	sp, #124	; 0x7c
   2faa2:	bd90      	pop	{r4, r7, pc}
   2faa4:	0003ac3c 	.word	0x0003ac3c
   2faa8:	000356b9 	.word	0x000356b9
   2faac:	0003005d 	.word	0x0003005d
   2fab0:	0002ffe5 	.word	0x0002ffe5
   2fab4:	0003000d 	.word	0x0003000d
   2fab8:	00030839 	.word	0x00030839
   2fabc:	0002f1d5 	.word	0x0002f1d5
   2fac0:	0002f93d 	.word	0x0002f93d
   2fac4:	00030ab5 	.word	0x00030ab5

0002fac8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fac8:	b5b0      	push	{r4, r5, r7, lr}
   2faca:	b096      	sub	sp, #88	; 0x58
   2facc:	af04      	add	r7, sp, #16
   2face:	60f8      	str	r0, [r7, #12]
   2fad0:	60b9      	str	r1, [r7, #8]
   2fad2:	603b      	str	r3, [r7, #0]
   2fad4:	1dfb      	adds	r3, r7, #7
   2fad6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fad8:	2301      	movs	r3, #1
   2fada:	425b      	negs	r3, r3
   2fadc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fade:	2300      	movs	r3, #0
   2fae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fae2:	2324      	movs	r3, #36	; 0x24
   2fae4:	18fb      	adds	r3, r7, r3
   2fae6:	2200      	movs	r2, #0
   2fae8:	601a      	str	r2, [r3, #0]
   2faea:	2324      	movs	r3, #36	; 0x24
   2faec:	18fb      	adds	r3, r7, r3
   2faee:	2200      	movs	r2, #0
   2faf0:	605a      	str	r2, [r3, #4]
   2faf2:	2324      	movs	r3, #36	; 0x24
   2faf4:	18fb      	adds	r3, r7, r3
   2faf6:	2200      	movs	r2, #0
   2faf8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fafa:	1dfb      	adds	r3, r7, #7
   2fafc:	781b      	ldrb	r3, [r3, #0]
   2fafe:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fb00:	2324      	movs	r3, #36	; 0x24
   2fb02:	18fb      	adds	r3, r7, r3
   2fb04:	68ba      	ldr	r2, [r7, #8]
   2fb06:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fb08:	68fb      	ldr	r3, [r7, #12]
   2fb0a:	6a1b      	ldr	r3, [r3, #32]
   2fb0c:	2b00      	cmp	r3, #0
   2fb0e:	d100      	bne.n	2fb12 <MQTTSubscribe+0x4a>
   2fb10:	e088      	b.n	2fc24 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fb12:	2330      	movs	r3, #48	; 0x30
   2fb14:	18fb      	adds	r3, r7, r3
   2fb16:	0018      	movs	r0, r3
   2fb18:	4b47      	ldr	r3, [pc, #284]	; (2fc38 <MQTTSubscribe+0x170>)
   2fb1a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fb1c:	68fb      	ldr	r3, [r7, #12]
   2fb1e:	685a      	ldr	r2, [r3, #4]
   2fb20:	2330      	movs	r3, #48	; 0x30
   2fb22:	18fb      	adds	r3, r7, r3
   2fb24:	0011      	movs	r1, r2
   2fb26:	0018      	movs	r0, r3
   2fb28:	4b44      	ldr	r3, [pc, #272]	; (2fc3c <MQTTSubscribe+0x174>)
   2fb2a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fb2c:	68fb      	ldr	r3, [r7, #12]
   2fb2e:	691c      	ldr	r4, [r3, #16]
   2fb30:	68fb      	ldr	r3, [r7, #12]
   2fb32:	689b      	ldr	r3, [r3, #8]
   2fb34:	001d      	movs	r5, r3
   2fb36:	68fb      	ldr	r3, [r7, #12]
   2fb38:	0018      	movs	r0, r3
   2fb3a:	4b41      	ldr	r3, [pc, #260]	; (2fc40 <MQTTSubscribe+0x178>)
   2fb3c:	4798      	blx	r3
   2fb3e:	0003      	movs	r3, r0
   2fb40:	b29a      	uxth	r2, r3
   2fb42:	2320      	movs	r3, #32
   2fb44:	18fb      	adds	r3, r7, r3
   2fb46:	9302      	str	r3, [sp, #8]
   2fb48:	2324      	movs	r3, #36	; 0x24
   2fb4a:	18fb      	adds	r3, r7, r3
   2fb4c:	9301      	str	r3, [sp, #4]
   2fb4e:	2301      	movs	r3, #1
   2fb50:	9300      	str	r3, [sp, #0]
   2fb52:	0013      	movs	r3, r2
   2fb54:	2200      	movs	r2, #0
   2fb56:	0029      	movs	r1, r5
   2fb58:	0020      	movs	r0, r4
   2fb5a:	4c3a      	ldr	r4, [pc, #232]	; (2fc44 <MQTTSubscribe+0x17c>)
   2fb5c:	47a0      	blx	r4
   2fb5e:	0003      	movs	r3, r0
   2fb60:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb64:	2b00      	cmp	r3, #0
   2fb66:	dd5f      	ble.n	2fc28 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fb68:	2330      	movs	r3, #48	; 0x30
   2fb6a:	18fa      	adds	r2, r7, r3
   2fb6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fb6e:	68fb      	ldr	r3, [r7, #12]
   2fb70:	0018      	movs	r0, r3
   2fb72:	4b35      	ldr	r3, [pc, #212]	; (2fc48 <MQTTSubscribe+0x180>)
   2fb74:	4798      	blx	r3
   2fb76:	0003      	movs	r3, r0
   2fb78:	647b      	str	r3, [r7, #68]	; 0x44
   2fb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fb7c:	2b00      	cmp	r3, #0
   2fb7e:	d155      	bne.n	2fc2c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fb80:	2330      	movs	r3, #48	; 0x30
   2fb82:	18fa      	adds	r2, r7, r3
   2fb84:	68fb      	ldr	r3, [r7, #12]
   2fb86:	2109      	movs	r1, #9
   2fb88:	0018      	movs	r0, r3
   2fb8a:	4b30      	ldr	r3, [pc, #192]	; (2fc4c <MQTTSubscribe+0x184>)
   2fb8c:	4798      	blx	r3
   2fb8e:	0003      	movs	r3, r0
   2fb90:	2b09      	cmp	r3, #9
   2fb92:	d143      	bne.n	2fc1c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fb94:	2300      	movs	r3, #0
   2fb96:	61fb      	str	r3, [r7, #28]
   2fb98:	2301      	movs	r3, #1
   2fb9a:	425b      	negs	r3, r3
   2fb9c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fb9e:	68fb      	ldr	r3, [r7, #12]
   2fba0:	695a      	ldr	r2, [r3, #20]
   2fba2:	68fb      	ldr	r3, [r7, #12]
   2fba4:	68db      	ldr	r3, [r3, #12]
   2fba6:	001c      	movs	r4, r3
   2fba8:	2318      	movs	r3, #24
   2fbaa:	18fb      	adds	r3, r7, r3
   2fbac:	211c      	movs	r1, #28
   2fbae:	1879      	adds	r1, r7, r1
   2fbb0:	2016      	movs	r0, #22
   2fbb2:	1838      	adds	r0, r7, r0
   2fbb4:	9401      	str	r4, [sp, #4]
   2fbb6:	9200      	str	r2, [sp, #0]
   2fbb8:	000a      	movs	r2, r1
   2fbba:	2101      	movs	r1, #1
   2fbbc:	4c24      	ldr	r4, [pc, #144]	; (2fc50 <MQTTSubscribe+0x188>)
   2fbbe:	47a0      	blx	r4
   2fbc0:	0003      	movs	r3, r0
   2fbc2:	2b01      	cmp	r3, #1
   2fbc4:	d101      	bne.n	2fbca <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fbc6:	69bb      	ldr	r3, [r7, #24]
   2fbc8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fbcc:	2b80      	cmp	r3, #128	; 0x80
   2fbce:	d02e      	beq.n	2fc2e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fbd0:	2300      	movs	r3, #0
   2fbd2:	643b      	str	r3, [r7, #64]	; 0x40
   2fbd4:	e01e      	b.n	2fc14 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fbd6:	68fa      	ldr	r2, [r7, #12]
   2fbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbda:	3304      	adds	r3, #4
   2fbdc:	00db      	lsls	r3, r3, #3
   2fbde:	18d3      	adds	r3, r2, r3
   2fbe0:	3304      	adds	r3, #4
   2fbe2:	681b      	ldr	r3, [r3, #0]
   2fbe4:	2b00      	cmp	r3, #0
   2fbe6:	d112      	bne.n	2fc0e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fbe8:	68fa      	ldr	r2, [r7, #12]
   2fbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbec:	3304      	adds	r3, #4
   2fbee:	00db      	lsls	r3, r3, #3
   2fbf0:	18d3      	adds	r3, r2, r3
   2fbf2:	3304      	adds	r3, #4
   2fbf4:	68ba      	ldr	r2, [r7, #8]
   2fbf6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fbf8:	68fa      	ldr	r2, [r7, #12]
   2fbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbfc:	3304      	adds	r3, #4
   2fbfe:	00db      	lsls	r3, r3, #3
   2fc00:	18d3      	adds	r3, r2, r3
   2fc02:	3308      	adds	r3, #8
   2fc04:	683a      	ldr	r2, [r7, #0]
   2fc06:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fc08:	2300      	movs	r3, #0
   2fc0a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fc0c:	e00f      	b.n	2fc2e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc10:	3301      	adds	r3, #1
   2fc12:	643b      	str	r3, [r7, #64]	; 0x40
   2fc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc16:	2b04      	cmp	r3, #4
   2fc18:	dddd      	ble.n	2fbd6 <MQTTSubscribe+0x10e>
   2fc1a:	e008      	b.n	2fc2e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fc1c:	2301      	movs	r3, #1
   2fc1e:	425b      	negs	r3, r3
   2fc20:	647b      	str	r3, [r7, #68]	; 0x44
   2fc22:	e004      	b.n	2fc2e <MQTTSubscribe+0x166>
		goto exit;
   2fc24:	46c0      	nop			; (mov r8, r8)
   2fc26:	e002      	b.n	2fc2e <MQTTSubscribe+0x166>
        goto exit;
   2fc28:	46c0      	nop			; (mov r8, r8)
   2fc2a:	e000      	b.n	2fc2e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fc2c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fc30:	0018      	movs	r0, r3
   2fc32:	46bd      	mov	sp, r7
   2fc34:	b012      	add	sp, #72	; 0x48
   2fc36:	bdb0      	pop	{r4, r5, r7, pc}
   2fc38:	0003005d 	.word	0x0003005d
   2fc3c:	0002ffe5 	.word	0x0002ffe5
   2fc40:	0002f1a5 	.word	0x0002f1a5
   2fc44:	00031595 	.word	0x00031595
   2fc48:	0002f1d5 	.word	0x0002f1d5
   2fc4c:	0002f93d 	.word	0x0002f93d
   2fc50:	000316e5 	.word	0x000316e5

0002fc54 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fc54:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc56:	46ce      	mov	lr, r9
   2fc58:	4647      	mov	r7, r8
   2fc5a:	b580      	push	{r7, lr}
   2fc5c:	b097      	sub	sp, #92	; 0x5c
   2fc5e:	af08      	add	r7, sp, #32
   2fc60:	60f8      	str	r0, [r7, #12]
   2fc62:	60b9      	str	r1, [r7, #8]
   2fc64:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fc66:	2301      	movs	r3, #1
   2fc68:	425b      	negs	r3, r3
   2fc6a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fc6c:	2318      	movs	r3, #24
   2fc6e:	18fb      	adds	r3, r7, r3
   2fc70:	2200      	movs	r2, #0
   2fc72:	601a      	str	r2, [r3, #0]
   2fc74:	2318      	movs	r3, #24
   2fc76:	18fb      	adds	r3, r7, r3
   2fc78:	2200      	movs	r2, #0
   2fc7a:	605a      	str	r2, [r3, #4]
   2fc7c:	2318      	movs	r3, #24
   2fc7e:	18fb      	adds	r3, r7, r3
   2fc80:	2200      	movs	r2, #0
   2fc82:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fc84:	2318      	movs	r3, #24
   2fc86:	18fb      	adds	r3, r7, r3
   2fc88:	68ba      	ldr	r2, [r7, #8]
   2fc8a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fc8c:	2300      	movs	r3, #0
   2fc8e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fc90:	68fb      	ldr	r3, [r7, #12]
   2fc92:	6a1b      	ldr	r3, [r3, #32]
   2fc94:	2b00      	cmp	r3, #0
   2fc96:	d100      	bne.n	2fc9a <MQTTPublish+0x46>
   2fc98:	e0a0      	b.n	2fddc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fc9a:	2324      	movs	r3, #36	; 0x24
   2fc9c:	18fb      	adds	r3, r7, r3
   2fc9e:	0018      	movs	r0, r3
   2fca0:	4b55      	ldr	r3, [pc, #340]	; (2fdf8 <MQTTPublish+0x1a4>)
   2fca2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fca4:	68fb      	ldr	r3, [r7, #12]
   2fca6:	685a      	ldr	r2, [r3, #4]
   2fca8:	2324      	movs	r3, #36	; 0x24
   2fcaa:	18fb      	adds	r3, r7, r3
   2fcac:	0011      	movs	r1, r2
   2fcae:	0018      	movs	r0, r3
   2fcb0:	4b52      	ldr	r3, [pc, #328]	; (2fdfc <MQTTPublish+0x1a8>)
   2fcb2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fcb4:	687b      	ldr	r3, [r7, #4]
   2fcb6:	781b      	ldrb	r3, [r3, #0]
   2fcb8:	2b01      	cmp	r3, #1
   2fcba:	d003      	beq.n	2fcc4 <MQTTPublish+0x70>
   2fcbc:	687b      	ldr	r3, [r7, #4]
   2fcbe:	781b      	ldrb	r3, [r3, #0]
   2fcc0:	2b02      	cmp	r3, #2
   2fcc2:	d107      	bne.n	2fcd4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fcc4:	68fb      	ldr	r3, [r7, #12]
   2fcc6:	0018      	movs	r0, r3
   2fcc8:	4b4d      	ldr	r3, [pc, #308]	; (2fe00 <MQTTPublish+0x1ac>)
   2fcca:	4798      	blx	r3
   2fccc:	0003      	movs	r3, r0
   2fcce:	b29a      	uxth	r2, r3
   2fcd0:	687b      	ldr	r3, [r7, #4]
   2fcd2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fcd4:	68fb      	ldr	r3, [r7, #12]
   2fcd6:	691b      	ldr	r3, [r3, #16]
   2fcd8:	469c      	mov	ip, r3
   2fcda:	68fb      	ldr	r3, [r7, #12]
   2fcdc:	689b      	ldr	r3, [r3, #8]
   2fcde:	001d      	movs	r5, r3
   2fce0:	687b      	ldr	r3, [r7, #4]
   2fce2:	781b      	ldrb	r3, [r3, #0]
   2fce4:	001e      	movs	r6, r3
   2fce6:	687b      	ldr	r3, [r7, #4]
   2fce8:	785b      	ldrb	r3, [r3, #1]
   2fcea:	4698      	mov	r8, r3
   2fcec:	687b      	ldr	r3, [r7, #4]
   2fcee:	889b      	ldrh	r3, [r3, #4]
   2fcf0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fcf2:	687b      	ldr	r3, [r7, #4]
   2fcf4:	689a      	ldr	r2, [r3, #8]
   2fcf6:	687b      	ldr	r3, [r7, #4]
   2fcf8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fcfa:	9306      	str	r3, [sp, #24]
   2fcfc:	9205      	str	r2, [sp, #20]
   2fcfe:	2318      	movs	r3, #24
   2fd00:	18fa      	adds	r2, r7, r3
   2fd02:	2308      	movs	r3, #8
   2fd04:	446b      	add	r3, sp
   2fd06:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fd08:	c313      	stmia	r3!, {r0, r1, r4}
   2fd0a:	464b      	mov	r3, r9
   2fd0c:	9301      	str	r3, [sp, #4]
   2fd0e:	4643      	mov	r3, r8
   2fd10:	9300      	str	r3, [sp, #0]
   2fd12:	0033      	movs	r3, r6
   2fd14:	2200      	movs	r2, #0
   2fd16:	0029      	movs	r1, r5
   2fd18:	4660      	mov	r0, ip
   2fd1a:	4c3a      	ldr	r4, [pc, #232]	; (2fe04 <MQTTPublish+0x1b0>)
   2fd1c:	47a0      	blx	r4
   2fd1e:	0003      	movs	r3, r0
   2fd20:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fd24:	2b00      	cmp	r3, #0
   2fd26:	dd5b      	ble.n	2fde0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fd28:	2324      	movs	r3, #36	; 0x24
   2fd2a:	18fa      	adds	r2, r7, r3
   2fd2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fd2e:	68fb      	ldr	r3, [r7, #12]
   2fd30:	0018      	movs	r0, r3
   2fd32:	4b35      	ldr	r3, [pc, #212]	; (2fe08 <MQTTPublish+0x1b4>)
   2fd34:	4798      	blx	r3
   2fd36:	0003      	movs	r3, r0
   2fd38:	637b      	str	r3, [r7, #52]	; 0x34
   2fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fd3c:	2b00      	cmp	r3, #0
   2fd3e:	d151      	bne.n	2fde4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fd40:	687b      	ldr	r3, [r7, #4]
   2fd42:	781b      	ldrb	r3, [r3, #0]
   2fd44:	2b01      	cmp	r3, #1
   2fd46:	d122      	bne.n	2fd8e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fd48:	2324      	movs	r3, #36	; 0x24
   2fd4a:	18fa      	adds	r2, r7, r3
   2fd4c:	68fb      	ldr	r3, [r7, #12]
   2fd4e:	2104      	movs	r1, #4
   2fd50:	0018      	movs	r0, r3
   2fd52:	4b2e      	ldr	r3, [pc, #184]	; (2fe0c <MQTTPublish+0x1b8>)
   2fd54:	4798      	blx	r3
   2fd56:	0003      	movs	r3, r0
   2fd58:	2b04      	cmp	r3, #4
   2fd5a:	d114      	bne.n	2fd86 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fd5c:	68fb      	ldr	r3, [r7, #12]
   2fd5e:	695c      	ldr	r4, [r3, #20]
   2fd60:	68fb      	ldr	r3, [r7, #12]
   2fd62:	68db      	ldr	r3, [r3, #12]
   2fd64:	2216      	movs	r2, #22
   2fd66:	18ba      	adds	r2, r7, r2
   2fd68:	2115      	movs	r1, #21
   2fd6a:	1879      	adds	r1, r7, r1
   2fd6c:	2014      	movs	r0, #20
   2fd6e:	1838      	adds	r0, r7, r0
   2fd70:	9300      	str	r3, [sp, #0]
   2fd72:	0023      	movs	r3, r4
   2fd74:	4c26      	ldr	r4, [pc, #152]	; (2fe10 <MQTTPublish+0x1bc>)
   2fd76:	47a0      	blx	r4
   2fd78:	0003      	movs	r3, r0
   2fd7a:	2b01      	cmp	r3, #1
   2fd7c:	d033      	beq.n	2fde6 <MQTTPublish+0x192>
                rc = FAILURE;
   2fd7e:	2301      	movs	r3, #1
   2fd80:	425b      	negs	r3, r3
   2fd82:	637b      	str	r3, [r7, #52]	; 0x34
   2fd84:	e02f      	b.n	2fde6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fd86:	2301      	movs	r3, #1
   2fd88:	425b      	negs	r3, r3
   2fd8a:	637b      	str	r3, [r7, #52]	; 0x34
   2fd8c:	e02b      	b.n	2fde6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fd8e:	687b      	ldr	r3, [r7, #4]
   2fd90:	781b      	ldrb	r3, [r3, #0]
   2fd92:	2b02      	cmp	r3, #2
   2fd94:	d127      	bne.n	2fde6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fd96:	2324      	movs	r3, #36	; 0x24
   2fd98:	18fa      	adds	r2, r7, r3
   2fd9a:	68fb      	ldr	r3, [r7, #12]
   2fd9c:	2107      	movs	r1, #7
   2fd9e:	0018      	movs	r0, r3
   2fda0:	4b1a      	ldr	r3, [pc, #104]	; (2fe0c <MQTTPublish+0x1b8>)
   2fda2:	4798      	blx	r3
   2fda4:	0003      	movs	r3, r0
   2fda6:	2b07      	cmp	r3, #7
   2fda8:	d114      	bne.n	2fdd4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fdaa:	68fb      	ldr	r3, [r7, #12]
   2fdac:	695c      	ldr	r4, [r3, #20]
   2fdae:	68fb      	ldr	r3, [r7, #12]
   2fdb0:	68db      	ldr	r3, [r3, #12]
   2fdb2:	2212      	movs	r2, #18
   2fdb4:	18ba      	adds	r2, r7, r2
   2fdb6:	2111      	movs	r1, #17
   2fdb8:	1879      	adds	r1, r7, r1
   2fdba:	2010      	movs	r0, #16
   2fdbc:	1838      	adds	r0, r7, r0
   2fdbe:	9300      	str	r3, [sp, #0]
   2fdc0:	0023      	movs	r3, r4
   2fdc2:	4c13      	ldr	r4, [pc, #76]	; (2fe10 <MQTTPublish+0x1bc>)
   2fdc4:	47a0      	blx	r4
   2fdc6:	0003      	movs	r3, r0
   2fdc8:	2b01      	cmp	r3, #1
   2fdca:	d00c      	beq.n	2fde6 <MQTTPublish+0x192>
                rc = FAILURE;
   2fdcc:	2301      	movs	r3, #1
   2fdce:	425b      	negs	r3, r3
   2fdd0:	637b      	str	r3, [r7, #52]	; 0x34
   2fdd2:	e008      	b.n	2fde6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fdd4:	2301      	movs	r3, #1
   2fdd6:	425b      	negs	r3, r3
   2fdd8:	637b      	str	r3, [r7, #52]	; 0x34
   2fdda:	e004      	b.n	2fde6 <MQTTPublish+0x192>
		goto exit;
   2fddc:	46c0      	nop			; (mov r8, r8)
   2fdde:	e002      	b.n	2fde6 <MQTTPublish+0x192>
        goto exit;
   2fde0:	46c0      	nop			; (mov r8, r8)
   2fde2:	e000      	b.n	2fde6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fde4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fde8:	0018      	movs	r0, r3
   2fdea:	46bd      	mov	sp, r7
   2fdec:	b00f      	add	sp, #60	; 0x3c
   2fdee:	bc0c      	pop	{r2, r3}
   2fdf0:	4690      	mov	r8, r2
   2fdf2:	4699      	mov	r9, r3
   2fdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fdf6:	46c0      	nop			; (mov r8, r8)
   2fdf8:	0003005d 	.word	0x0003005d
   2fdfc:	0002ffe5 	.word	0x0002ffe5
   2fe00:	0002f1a5 	.word	0x0002f1a5
   2fe04:	000312e1 	.word	0x000312e1
   2fe08:	0002f1d5 	.word	0x0002f1d5
   2fe0c:	0002f93d 	.word	0x0002f93d
   2fe10:	00030d59 	.word	0x00030d59

0002fe14 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fe14:	b580      	push	{r7, lr}
   2fe16:	b088      	sub	sp, #32
   2fe18:	af00      	add	r7, sp, #0
   2fe1a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fe1c:	2301      	movs	r3, #1
   2fe1e:	425b      	negs	r3, r3
   2fe20:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fe22:	2300      	movs	r3, #0
   2fe24:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fe26:	230c      	movs	r3, #12
   2fe28:	18fb      	adds	r3, r7, r3
   2fe2a:	0018      	movs	r0, r3
   2fe2c:	4b13      	ldr	r3, [pc, #76]	; (2fe7c <MQTTDisconnect+0x68>)
   2fe2e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fe30:	687b      	ldr	r3, [r7, #4]
   2fe32:	685a      	ldr	r2, [r3, #4]
   2fe34:	230c      	movs	r3, #12
   2fe36:	18fb      	adds	r3, r7, r3
   2fe38:	0011      	movs	r1, r2
   2fe3a:	0018      	movs	r0, r3
   2fe3c:	4b10      	ldr	r3, [pc, #64]	; (2fe80 <MQTTDisconnect+0x6c>)
   2fe3e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fe40:	687b      	ldr	r3, [r7, #4]
   2fe42:	691a      	ldr	r2, [r3, #16]
   2fe44:	687b      	ldr	r3, [r7, #4]
   2fe46:	689b      	ldr	r3, [r3, #8]
   2fe48:	0019      	movs	r1, r3
   2fe4a:	0010      	movs	r0, r2
   2fe4c:	4b0d      	ldr	r3, [pc, #52]	; (2fe84 <MQTTDisconnect+0x70>)
   2fe4e:	4798      	blx	r3
   2fe50:	0003      	movs	r3, r0
   2fe52:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fe54:	69bb      	ldr	r3, [r7, #24]
   2fe56:	2b00      	cmp	r3, #0
   2fe58:	dd08      	ble.n	2fe6c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fe5a:	230c      	movs	r3, #12
   2fe5c:	18fa      	adds	r2, r7, r3
   2fe5e:	69b9      	ldr	r1, [r7, #24]
   2fe60:	687b      	ldr	r3, [r7, #4]
   2fe62:	0018      	movs	r0, r3
   2fe64:	4b08      	ldr	r3, [pc, #32]	; (2fe88 <MQTTDisconnect+0x74>)
   2fe66:	4798      	blx	r3
   2fe68:	0003      	movs	r3, r0
   2fe6a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fe6c:	687b      	ldr	r3, [r7, #4]
   2fe6e:	2200      	movs	r2, #0
   2fe70:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fe72:	69fb      	ldr	r3, [r7, #28]
}
   2fe74:	0018      	movs	r0, r3
   2fe76:	46bd      	mov	sp, r7
   2fe78:	b008      	add	sp, #32
   2fe7a:	bd80      	pop	{r7, pc}
   2fe7c:	0003005d 	.word	0x0003005d
   2fe80:	0002ffe5 	.word	0x0002ffe5
   2fe84:	00030c0d 	.word	0x00030c0d
   2fe88:	0002f1d5 	.word	0x0002f1d5

0002fe8c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fe8c:	b580      	push	{r7, lr}
   2fe8e:	b084      	sub	sp, #16
   2fe90:	af00      	add	r7, sp, #0
   2fe92:	0002      	movs	r2, r0
   2fe94:	1dfb      	adds	r3, r7, #7
   2fe96:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fe98:	2300      	movs	r3, #0
   2fe9a:	60fb      	str	r3, [r7, #12]
   2fe9c:	e01c      	b.n	2fed8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fe9e:	4a12      	ldr	r2, [pc, #72]	; (2fee8 <isMQTTSocket+0x5c>)
   2fea0:	68fb      	ldr	r3, [r7, #12]
   2fea2:	2164      	movs	r1, #100	; 0x64
   2fea4:	434b      	muls	r3, r1
   2fea6:	18d3      	adds	r3, r2, r3
   2fea8:	3360      	adds	r3, #96	; 0x60
   2feaa:	681b      	ldr	r3, [r3, #0]
   2feac:	2b00      	cmp	r3, #0
   2feae:	d010      	beq.n	2fed2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2feb0:	4a0d      	ldr	r2, [pc, #52]	; (2fee8 <isMQTTSocket+0x5c>)
   2feb2:	68fb      	ldr	r3, [r7, #12]
   2feb4:	2164      	movs	r1, #100	; 0x64
   2feb6:	434b      	muls	r3, r1
   2feb8:	18d3      	adds	r3, r2, r3
   2feba:	3360      	adds	r3, #96	; 0x60
   2febc:	681b      	ldr	r3, [r3, #0]
   2febe:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2fec0:	68bb      	ldr	r3, [r7, #8]
   2fec2:	6a1a      	ldr	r2, [r3, #32]
   2fec4:	1dfb      	adds	r3, r7, #7
   2fec6:	781b      	ldrb	r3, [r3, #0]
   2fec8:	b25b      	sxtb	r3, r3
   2feca:	429a      	cmp	r2, r3
   2fecc:	d101      	bne.n	2fed2 <isMQTTSocket+0x46>
				return true;
   2fece:	2301      	movs	r3, #1
   2fed0:	e006      	b.n	2fee0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fed2:	68fb      	ldr	r3, [r7, #12]
   2fed4:	3301      	adds	r3, #1
   2fed6:	60fb      	str	r3, [r7, #12]
   2fed8:	68fb      	ldr	r3, [r7, #12]
   2feda:	2b06      	cmp	r3, #6
   2fedc:	d9df      	bls.n	2fe9e <isMQTTSocket+0x12>
		}
	}
	return false;
   2fede:	2300      	movs	r3, #0
}
   2fee0:	0018      	movs	r0, r3
   2fee2:	46bd      	mov	sp, r7
   2fee4:	b004      	add	sp, #16
   2fee6:	bd80      	pop	{r7, pc}
   2fee8:	20004438 	.word	0x20004438

0002feec <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2feec:	b580      	push	{r7, lr}
   2feee:	b082      	sub	sp, #8
   2fef0:	af00      	add	r7, sp, #0
   2fef2:	6078      	str	r0, [r7, #4]
   2fef4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2fef6:	4b0d      	ldr	r3, [pc, #52]	; (2ff2c <dnsResolveCallback+0x40>)
   2fef8:	781b      	ldrb	r3, [r3, #0]
   2fefa:	2201      	movs	r2, #1
   2fefc:	4053      	eors	r3, r2
   2fefe:	b2db      	uxtb	r3, r3
   2ff00:	2b00      	cmp	r3, #0
   2ff02:	d00e      	beq.n	2ff22 <dnsResolveCallback+0x36>
   2ff04:	4b0a      	ldr	r3, [pc, #40]	; (2ff30 <dnsResolveCallback+0x44>)
   2ff06:	681b      	ldr	r3, [r3, #0]
   2ff08:	687a      	ldr	r2, [r7, #4]
   2ff0a:	0011      	movs	r1, r2
   2ff0c:	0018      	movs	r0, r3
   2ff0e:	4b09      	ldr	r3, [pc, #36]	; (2ff34 <dnsResolveCallback+0x48>)
   2ff10:	4798      	blx	r3
   2ff12:	1e03      	subs	r3, r0, #0
   2ff14:	d105      	bne.n	2ff22 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ff16:	683a      	ldr	r2, [r7, #0]
   2ff18:	4b07      	ldr	r3, [pc, #28]	; (2ff38 <dnsResolveCallback+0x4c>)
   2ff1a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ff1c:	4b03      	ldr	r3, [pc, #12]	; (2ff2c <dnsResolveCallback+0x40>)
   2ff1e:	2201      	movs	r2, #1
   2ff20:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ff22:	46c0      	nop			; (mov r8, r8)
   2ff24:	46bd      	mov	sp, r7
   2ff26:	b002      	add	sp, #8
   2ff28:	bd80      	pop	{r7, pc}
   2ff2a:	46c0      	nop			; (mov r8, r8)
   2ff2c:	20004328 	.word	0x20004328
   2ff30:	20004434 	.word	0x20004434
   2ff34:	00035a47 	.word	0x00035a47
   2ff38:	20004320 	.word	0x20004320

0002ff3c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ff3c:	b580      	push	{r7, lr}
   2ff3e:	b084      	sub	sp, #16
   2ff40:	af00      	add	r7, sp, #0
   2ff42:	603a      	str	r2, [r7, #0]
   2ff44:	1dfb      	adds	r3, r7, #7
   2ff46:	1c02      	adds	r2, r0, #0
   2ff48:	701a      	strb	r2, [r3, #0]
   2ff4a:	1dbb      	adds	r3, r7, #6
   2ff4c:	1c0a      	adds	r2, r1, #0
   2ff4e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ff50:	1dfb      	adds	r3, r7, #7
   2ff52:	781b      	ldrb	r3, [r3, #0]
   2ff54:	b25b      	sxtb	r3, r3
   2ff56:	0018      	movs	r0, r3
   2ff58:	4b12      	ldr	r3, [pc, #72]	; (2ffa4 <tcpClientSocketEventHandler+0x68>)
   2ff5a:	4798      	blx	r3
   2ff5c:	1e03      	subs	r3, r0, #0
   2ff5e:	d01c      	beq.n	2ff9a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ff60:	1dbb      	adds	r3, r7, #6
   2ff62:	781b      	ldrb	r3, [r3, #0]
   2ff64:	2b06      	cmp	r3, #6
   2ff66:	d00c      	beq.n	2ff82 <tcpClientSocketEventHandler+0x46>
   2ff68:	2b07      	cmp	r3, #7
   2ff6a:	d006      	beq.n	2ff7a <tcpClientSocketEventHandler+0x3e>
   2ff6c:	2b05      	cmp	r3, #5
   2ff6e:	d000      	beq.n	2ff72 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ff70:	e013      	b.n	2ff9a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ff72:	4b0d      	ldr	r3, [pc, #52]	; (2ffa8 <tcpClientSocketEventHandler+0x6c>)
   2ff74:	2201      	movs	r2, #1
   2ff76:	701a      	strb	r2, [r3, #0]
			break;
   2ff78:	e00f      	b.n	2ff9a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ff7a:	4b0c      	ldr	r3, [pc, #48]	; (2ffac <tcpClientSocketEventHandler+0x70>)
   2ff7c:	2201      	movs	r2, #1
   2ff7e:	701a      	strb	r2, [r3, #0]
			break;
   2ff80:	e00b      	b.n	2ff9a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ff82:	683b      	ldr	r3, [r7, #0]
   2ff84:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ff86:	68fb      	ldr	r3, [r7, #12]
   2ff88:	2204      	movs	r2, #4
   2ff8a:	5e9b      	ldrsh	r3, [r3, r2]
   2ff8c:	001a      	movs	r2, r3
   2ff8e:	4b08      	ldr	r3, [pc, #32]	; (2ffb0 <tcpClientSocketEventHandler+0x74>)
   2ff90:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ff92:	4b08      	ldr	r3, [pc, #32]	; (2ffb4 <tcpClientSocketEventHandler+0x78>)
   2ff94:	2201      	movs	r2, #1
   2ff96:	701a      	strb	r2, [r3, #0]
			break;
   2ff98:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ff9a:	46c0      	nop			; (mov r8, r8)
   2ff9c:	46bd      	mov	sp, r7
   2ff9e:	b004      	add	sp, #16
   2ffa0:	bd80      	pop	{r7, pc}
   2ffa2:	46c0      	nop			; (mov r8, r8)
   2ffa4:	0002fe8d 	.word	0x0002fe8d
   2ffa8:	20004329 	.word	0x20004329
   2ffac:	2000432a 	.word	0x2000432a
   2ffb0:	20004324 	.word	0x20004324
   2ffb4:	2000432b 	.word	0x2000432b

0002ffb8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ffb8:	b580      	push	{r7, lr}
   2ffba:	b082      	sub	sp, #8
   2ffbc:	af00      	add	r7, sp, #0
   2ffbe:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ffc0:	687b      	ldr	r3, [r7, #4]
   2ffc2:	3304      	adds	r3, #4
   2ffc4:	687a      	ldr	r2, [r7, #4]
   2ffc6:	0011      	movs	r1, r2
   2ffc8:	0018      	movs	r0, r3
   2ffca:	4b05      	ldr	r3, [pc, #20]	; (2ffe0 <TimerIsExpired+0x28>)
   2ffcc:	4798      	blx	r3
   2ffce:	0003      	movs	r3, r0
   2ffd0:	3b01      	subs	r3, #1
   2ffd2:	425a      	negs	r2, r3
   2ffd4:	4153      	adcs	r3, r2
   2ffd6:	b2db      	uxtb	r3, r3
}
   2ffd8:	0018      	movs	r0, r3
   2ffda:	46bd      	mov	sp, r7
   2ffdc:	b002      	add	sp, #8
   2ffde:	bd80      	pop	{r7, pc}
   2ffe0:	0001d6c1 	.word	0x0001d6c1

0002ffe4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ffe4:	b580      	push	{r7, lr}
   2ffe6:	b082      	sub	sp, #8
   2ffe8:	af00      	add	r7, sp, #0
   2ffea:	6078      	str	r0, [r7, #4]
   2ffec:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ffee:	687b      	ldr	r3, [r7, #4]
   2fff0:	683a      	ldr	r2, [r7, #0]
   2fff2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2fff4:	687b      	ldr	r3, [r7, #4]
   2fff6:	3304      	adds	r3, #4
   2fff8:	0018      	movs	r0, r3
   2fffa:	4b03      	ldr	r3, [pc, #12]	; (30008 <TimerCountdownMS+0x24>)
   2fffc:	4798      	blx	r3
}
   2fffe:	46c0      	nop			; (mov r8, r8)
   30000:	46bd      	mov	sp, r7
   30002:	b002      	add	sp, #8
   30004:	bd80      	pop	{r7, pc}
   30006:	46c0      	nop			; (mov r8, r8)
   30008:	0001d655 	.word	0x0001d655

0003000c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   3000c:	b580      	push	{r7, lr}
   3000e:	b082      	sub	sp, #8
   30010:	af00      	add	r7, sp, #0
   30012:	6078      	str	r0, [r7, #4]
   30014:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   30016:	683b      	ldr	r3, [r7, #0]
   30018:	22fa      	movs	r2, #250	; 0xfa
   3001a:	0092      	lsls	r2, r2, #2
   3001c:	435a      	muls	r2, r3
   3001e:	687b      	ldr	r3, [r7, #4]
   30020:	0011      	movs	r1, r2
   30022:	0018      	movs	r0, r3
   30024:	4b02      	ldr	r3, [pc, #8]	; (30030 <TimerCountdown+0x24>)
   30026:	4798      	blx	r3
}
   30028:	46c0      	nop			; (mov r8, r8)
   3002a:	46bd      	mov	sp, r7
   3002c:	b002      	add	sp, #8
   3002e:	bd80      	pop	{r7, pc}
   30030:	0002ffe5 	.word	0x0002ffe5

00030034 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   30034:	b580      	push	{r7, lr}
   30036:	b082      	sub	sp, #8
   30038:	af00      	add	r7, sp, #0
   3003a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   3003c:	687b      	ldr	r3, [r7, #4]
   3003e:	3304      	adds	r3, #4
   30040:	687a      	ldr	r2, [r7, #4]
   30042:	0011      	movs	r1, r2
   30044:	0018      	movs	r0, r3
   30046:	4b04      	ldr	r3, [pc, #16]	; (30058 <TimerLeftMS+0x24>)
   30048:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   3004a:	687b      	ldr	r3, [r7, #4]
   3004c:	681b      	ldr	r3, [r3, #0]
}
   3004e:	0018      	movs	r0, r3
   30050:	46bd      	mov	sp, r7
   30052:	b002      	add	sp, #8
   30054:	bd80      	pop	{r7, pc}
   30056:	46c0      	nop			; (mov r8, r8)
   30058:	0001d6c1 	.word	0x0001d6c1

0003005c <TimerInit>:


void TimerInit(Timer* timer) {
   3005c:	b580      	push	{r7, lr}
   3005e:	b082      	sub	sp, #8
   30060:	af00      	add	r7, sp, #0
   30062:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   30064:	687b      	ldr	r3, [r7, #4]
   30066:	2200      	movs	r2, #0
   30068:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   3006a:	687b      	ldr	r3, [r7, #4]
   3006c:	3304      	adds	r3, #4
   3006e:	2208      	movs	r2, #8
   30070:	2100      	movs	r1, #0
   30072:	0018      	movs	r0, r3
   30074:	4b02      	ldr	r3, [pc, #8]	; (30080 <TimerInit+0x24>)
   30076:	4798      	blx	r3
}
   30078:	46c0      	nop			; (mov r8, r8)
   3007a:	46bd      	mov	sp, r7
   3007c:	b002      	add	sp, #8
   3007e:	bd80      	pop	{r7, pc}
   30080:	000356ef 	.word	0x000356ef

00030084 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   30084:	b590      	push	{r4, r7, lr}
   30086:	b085      	sub	sp, #20
   30088:	af00      	add	r7, sp, #0
   3008a:	60f8      	str	r0, [r7, #12]
   3008c:	60b9      	str	r1, [r7, #8]
   3008e:	607a      	str	r2, [r7, #4]
   30090:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   30092:	683b      	ldr	r3, [r7, #0]
   30094:	2b00      	cmp	r3, #0
   30096:	d101      	bne.n	3009c <WINC1500_read+0x18>
   30098:	230a      	movs	r3, #10
   3009a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   3009c:	4b2c      	ldr	r3, [pc, #176]	; (30150 <WINC1500_read+0xcc>)
   3009e:	681b      	ldr	r3, [r3, #0]
   300a0:	2b00      	cmp	r3, #0
   300a2:	d131      	bne.n	30108 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   300a4:	4b2b      	ldr	r3, [pc, #172]	; (30154 <WINC1500_read+0xd0>)
   300a6:	2200      	movs	r2, #0
   300a8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   300aa:	68fb      	ldr	r3, [r7, #12]
   300ac:	681b      	ldr	r3, [r3, #0]
   300ae:	b258      	sxtb	r0, r3
   300b0:	683c      	ldr	r4, [r7, #0]
   300b2:	2380      	movs	r3, #128	; 0x80
   300b4:	005a      	lsls	r2, r3, #1
   300b6:	4928      	ldr	r1, [pc, #160]	; (30158 <WINC1500_read+0xd4>)
   300b8:	0023      	movs	r3, r4
   300ba:	4c28      	ldr	r4, [pc, #160]	; (3015c <WINC1500_read+0xd8>)
   300bc:	47a0      	blx	r4
   300be:	1e03      	subs	r3, r0, #0
   300c0:	d005      	beq.n	300ce <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   300c2:	2301      	movs	r3, #1
   300c4:	425b      	negs	r3, r3
   300c6:	e03e      	b.n	30146 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   300c8:	2000      	movs	r0, #0
   300ca:	4b25      	ldr	r3, [pc, #148]	; (30160 <WINC1500_read+0xdc>)
   300cc:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   300ce:	4b21      	ldr	r3, [pc, #132]	; (30154 <WINC1500_read+0xd0>)
   300d0:	781b      	ldrb	r3, [r3, #0]
   300d2:	2201      	movs	r2, #1
   300d4:	4053      	eors	r3, r2
   300d6:	b2db      	uxtb	r3, r3
   300d8:	2b00      	cmp	r3, #0
   300da:	d1f5      	bne.n	300c8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   300dc:	4b21      	ldr	r3, [pc, #132]	; (30164 <WINC1500_read+0xe0>)
   300de:	681b      	ldr	r3, [r3, #0]
   300e0:	2b00      	cmp	r3, #0
   300e2:	dd08      	ble.n	300f6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   300e4:	4b1f      	ldr	r3, [pc, #124]	; (30164 <WINC1500_read+0xe0>)
   300e6:	681b      	ldr	r3, [r3, #0]
   300e8:	001a      	movs	r2, r3
   300ea:	4b19      	ldr	r3, [pc, #100]	; (30150 <WINC1500_read+0xcc>)
   300ec:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   300ee:	4b1e      	ldr	r3, [pc, #120]	; (30168 <WINC1500_read+0xe4>)
   300f0:	2200      	movs	r2, #0
   300f2:	601a      	str	r2, [r3, #0]
   300f4:	e008      	b.n	30108 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   300f6:	4b16      	ldr	r3, [pc, #88]	; (30150 <WINC1500_read+0xcc>)
   300f8:	2200      	movs	r2, #0
   300fa:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   300fc:	4b1a      	ldr	r3, [pc, #104]	; (30168 <WINC1500_read+0xe4>)
   300fe:	2200      	movs	r2, #0
   30100:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   30102:	4b18      	ldr	r3, [pc, #96]	; (30164 <WINC1500_read+0xe0>)
   30104:	681b      	ldr	r3, [r3, #0]
   30106:	e01e      	b.n	30146 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30108:	4b11      	ldr	r3, [pc, #68]	; (30150 <WINC1500_read+0xcc>)
   3010a:	681b      	ldr	r3, [r3, #0]
   3010c:	001a      	movs	r2, r3
   3010e:	687b      	ldr	r3, [r7, #4]
   30110:	4293      	cmp	r3, r2
   30112:	dd02      	ble.n	3011a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   30114:	2301      	movs	r3, #1
   30116:	425b      	negs	r3, r3
   30118:	e015      	b.n	30146 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   3011a:	4b13      	ldr	r3, [pc, #76]	; (30168 <WINC1500_read+0xe4>)
   3011c:	681a      	ldr	r2, [r3, #0]
   3011e:	4b0e      	ldr	r3, [pc, #56]	; (30158 <WINC1500_read+0xd4>)
   30120:	18d1      	adds	r1, r2, r3
   30122:	687a      	ldr	r2, [r7, #4]
   30124:	68bb      	ldr	r3, [r7, #8]
   30126:	0018      	movs	r0, r3
   30128:	4b10      	ldr	r3, [pc, #64]	; (3016c <WINC1500_read+0xe8>)
   3012a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   3012c:	4b08      	ldr	r3, [pc, #32]	; (30150 <WINC1500_read+0xcc>)
   3012e:	681a      	ldr	r2, [r3, #0]
   30130:	687b      	ldr	r3, [r7, #4]
   30132:	1ad2      	subs	r2, r2, r3
   30134:	4b06      	ldr	r3, [pc, #24]	; (30150 <WINC1500_read+0xcc>)
   30136:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   30138:	4b0b      	ldr	r3, [pc, #44]	; (30168 <WINC1500_read+0xe4>)
   3013a:	681a      	ldr	r2, [r3, #0]
   3013c:	687b      	ldr	r3, [r7, #4]
   3013e:	18d2      	adds	r2, r2, r3
   30140:	4b09      	ldr	r3, [pc, #36]	; (30168 <WINC1500_read+0xe4>)
   30142:	601a      	str	r2, [r3, #0]
  
  return len;
   30144:	687b      	ldr	r3, [r7, #4]
}
   30146:	0018      	movs	r0, r3
   30148:	46bd      	mov	sp, r7
   3014a:	b005      	add	sp, #20
   3014c:	bd90      	pop	{r4, r7, pc}
   3014e:	46c0      	nop			; (mov r8, r8)
   30150:	20004430 	.word	0x20004430
   30154:	2000432b 	.word	0x2000432b
   30158:	2000432c 	.word	0x2000432c
   3015c:	0002660d 	.word	0x0002660d
   30160:	00022b55 	.word	0x00022b55
   30164:	20004324 	.word	0x20004324
   30168:	2000442c 	.word	0x2000442c
   3016c:	000356b9 	.word	0x000356b9

00030170 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30170:	b590      	push	{r4, r7, lr}
   30172:	b085      	sub	sp, #20
   30174:	af00      	add	r7, sp, #0
   30176:	60f8      	str	r0, [r7, #12]
   30178:	60b9      	str	r1, [r7, #8]
   3017a:	607a      	str	r2, [r7, #4]
   3017c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   3017e:	4b10      	ldr	r3, [pc, #64]	; (301c0 <WINC1500_write+0x50>)
   30180:	2200      	movs	r2, #0
   30182:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   30184:	68fb      	ldr	r3, [r7, #12]
   30186:	681b      	ldr	r3, [r3, #0]
   30188:	b258      	sxtb	r0, r3
   3018a:	687b      	ldr	r3, [r7, #4]
   3018c:	b29a      	uxth	r2, r3
   3018e:	68b9      	ldr	r1, [r7, #8]
   30190:	2300      	movs	r3, #0
   30192:	4c0c      	ldr	r4, [pc, #48]	; (301c4 <WINC1500_write+0x54>)
   30194:	47a0      	blx	r4
   30196:	1e03      	subs	r3, r0, #0
   30198:	d005      	beq.n	301a6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   3019a:	2301      	movs	r3, #1
   3019c:	425b      	negs	r3, r3
   3019e:	e00a      	b.n	301b6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   301a0:	2000      	movs	r0, #0
   301a2:	4b09      	ldr	r3, [pc, #36]	; (301c8 <WINC1500_write+0x58>)
   301a4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   301a6:	4b06      	ldr	r3, [pc, #24]	; (301c0 <WINC1500_write+0x50>)
   301a8:	781b      	ldrb	r3, [r3, #0]
   301aa:	2201      	movs	r2, #1
   301ac:	4053      	eors	r3, r2
   301ae:	b2db      	uxtb	r3, r3
   301b0:	2b00      	cmp	r3, #0
   301b2:	d1f5      	bne.n	301a0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   301b4:	687b      	ldr	r3, [r7, #4]
}
   301b6:	0018      	movs	r0, r3
   301b8:	46bd      	mov	sp, r7
   301ba:	b005      	add	sp, #20
   301bc:	bd90      	pop	{r4, r7, pc}
   301be:	46c0      	nop			; (mov r8, r8)
   301c0:	2000432a 	.word	0x2000432a
   301c4:	000264a9 	.word	0x000264a9
   301c8:	00022b55 	.word	0x00022b55

000301cc <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   301cc:	b580      	push	{r7, lr}
   301ce:	b082      	sub	sp, #8
   301d0:	af00      	add	r7, sp, #0
   301d2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   301d4:	687b      	ldr	r3, [r7, #4]
   301d6:	681b      	ldr	r3, [r3, #0]
   301d8:	b25b      	sxtb	r3, r3
   301da:	0018      	movs	r0, r3
   301dc:	4b06      	ldr	r3, [pc, #24]	; (301f8 <WINC1500_disconnect+0x2c>)
   301de:	4798      	blx	r3
	n->socket=-1;
   301e0:	687b      	ldr	r3, [r7, #4]
   301e2:	2201      	movs	r2, #1
   301e4:	4252      	negs	r2, r2
   301e6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   301e8:	4b04      	ldr	r3, [pc, #16]	; (301fc <WINC1500_disconnect+0x30>)
   301ea:	2200      	movs	r2, #0
   301ec:	701a      	strb	r2, [r3, #0]
}
   301ee:	46c0      	nop			; (mov r8, r8)
   301f0:	46bd      	mov	sp, r7
   301f2:	b002      	add	sp, #8
   301f4:	bd80      	pop	{r7, pc}
   301f6:	46c0      	nop			; (mov r8, r8)
   301f8:	0002678d 	.word	0x0002678d
   301fc:	20004329 	.word	0x20004329

00030200 <NetworkInit>:


void NetworkInit(Network* n) {
   30200:	b580      	push	{r7, lr}
   30202:	b082      	sub	sp, #8
   30204:	af00      	add	r7, sp, #0
   30206:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30208:	687b      	ldr	r3, [r7, #4]
   3020a:	2201      	movs	r2, #1
   3020c:	4252      	negs	r2, r2
   3020e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30210:	687b      	ldr	r3, [r7, #4]
   30212:	4a06      	ldr	r2, [pc, #24]	; (3022c <NetworkInit+0x2c>)
   30214:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   30216:	687b      	ldr	r3, [r7, #4]
   30218:	4a05      	ldr	r2, [pc, #20]	; (30230 <NetworkInit+0x30>)
   3021a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   3021c:	687b      	ldr	r3, [r7, #4]
   3021e:	4a05      	ldr	r2, [pc, #20]	; (30234 <NetworkInit+0x34>)
   30220:	611a      	str	r2, [r3, #16]
}
   30222:	46c0      	nop			; (mov r8, r8)
   30224:	46bd      	mov	sp, r7
   30226:	b002      	add	sp, #8
   30228:	bd80      	pop	{r7, pc}
   3022a:	46c0      	nop			; (mov r8, r8)
   3022c:	00030085 	.word	0x00030085
   30230:	00030171 	.word	0x00030171
   30234:	000301cd 	.word	0x000301cd

00030238 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   30238:	b580      	push	{r7, lr}
   3023a:	b088      	sub	sp, #32
   3023c:	af00      	add	r7, sp, #0
   3023e:	60f8      	str	r0, [r7, #12]
   30240:	60b9      	str	r1, [r7, #8]
   30242:	607a      	str	r2, [r7, #4]
   30244:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   30246:	4b37      	ldr	r3, [pc, #220]	; (30324 <ConnectNetwork+0xec>)
   30248:	2200      	movs	r2, #0
   3024a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   3024c:	4b36      	ldr	r3, [pc, #216]	; (30328 <ConnectNetwork+0xf0>)
   3024e:	68ba      	ldr	r2, [r7, #8]
   30250:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   30252:	68bb      	ldr	r3, [r7, #8]
   30254:	0018      	movs	r0, r3
   30256:	4b35      	ldr	r3, [pc, #212]	; (3032c <ConnectNetwork+0xf4>)
   30258:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   3025a:	e002      	b.n	30262 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   3025c:	2000      	movs	r0, #0
   3025e:	4b34      	ldr	r3, [pc, #208]	; (30330 <ConnectNetwork+0xf8>)
   30260:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   30262:	4b30      	ldr	r3, [pc, #192]	; (30324 <ConnectNetwork+0xec>)
   30264:	781b      	ldrb	r3, [r3, #0]
   30266:	2201      	movs	r2, #1
   30268:	4053      	eors	r3, r2
   3026a:	b2db      	uxtb	r3, r3
   3026c:	2b00      	cmp	r3, #0
   3026e:	d1f5      	bne.n	3025c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30270:	4b30      	ldr	r3, [pc, #192]	; (30334 <ConnectNetwork+0xfc>)
   30272:	681a      	ldr	r2, [r3, #0]
   30274:	68fb      	ldr	r3, [r7, #12]
   30276:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30278:	2310      	movs	r3, #16
   3027a:	18fb      	adds	r3, r7, r3
   3027c:	2202      	movs	r2, #2
   3027e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30280:	687b      	ldr	r3, [r7, #4]
   30282:	b29b      	uxth	r3, r3
   30284:	021b      	lsls	r3, r3, #8
   30286:	b21a      	sxth	r2, r3
   30288:	687b      	ldr	r3, [r7, #4]
   3028a:	b29b      	uxth	r3, r3
   3028c:	0a1b      	lsrs	r3, r3, #8
   3028e:	b29b      	uxth	r3, r3
   30290:	b21b      	sxth	r3, r3
   30292:	4313      	orrs	r3, r2
   30294:	b21b      	sxth	r3, r3
   30296:	b29a      	uxth	r2, r3
   30298:	2310      	movs	r3, #16
   3029a:	18fb      	adds	r3, r7, r3
   3029c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   3029e:	4b25      	ldr	r3, [pc, #148]	; (30334 <ConnectNetwork+0xfc>)
   302a0:	681b      	ldr	r3, [r3, #0]
   302a2:	001a      	movs	r2, r3
   302a4:	2310      	movs	r3, #16
   302a6:	18fb      	adds	r3, r7, r3
   302a8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   302aa:	68fb      	ldr	r3, [r7, #12]
   302ac:	681b      	ldr	r3, [r3, #0]
   302ae:	2b00      	cmp	r3, #0
   302b0:	da0a      	bge.n	302c8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   302b2:	683b      	ldr	r3, [r7, #0]
   302b4:	b2db      	uxtb	r3, r3
   302b6:	001a      	movs	r2, r3
   302b8:	2101      	movs	r1, #1
   302ba:	2002      	movs	r0, #2
   302bc:	4b1e      	ldr	r3, [pc, #120]	; (30338 <ConnectNetwork+0x100>)
   302be:	4798      	blx	r3
   302c0:	0003      	movs	r3, r0
   302c2:	001a      	movs	r2, r3
   302c4:	68fb      	ldr	r3, [r7, #12]
   302c6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   302c8:	68fb      	ldr	r3, [r7, #12]
   302ca:	681b      	ldr	r3, [r3, #0]
   302cc:	3301      	adds	r3, #1
   302ce:	d108      	bne.n	302e2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   302d0:	68fb      	ldr	r3, [r7, #12]
   302d2:	681b      	ldr	r3, [r3, #0]
   302d4:	b25b      	sxtb	r3, r3
   302d6:	0018      	movs	r0, r3
   302d8:	4b18      	ldr	r3, [pc, #96]	; (3033c <ConnectNetwork+0x104>)
   302da:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   302dc:	2309      	movs	r3, #9
   302de:	425b      	negs	r3, r3
   302e0:	e01c      	b.n	3031c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   302e2:	68fb      	ldr	r3, [r7, #12]
   302e4:	681b      	ldr	r3, [r3, #0]
   302e6:	b25b      	sxtb	r3, r3
   302e8:	2210      	movs	r2, #16
   302ea:	18b9      	adds	r1, r7, r2
   302ec:	2210      	movs	r2, #16
   302ee:	0018      	movs	r0, r3
   302f0:	4b13      	ldr	r3, [pc, #76]	; (30340 <ConnectNetwork+0x108>)
   302f2:	4798      	blx	r3
   302f4:	1e03      	subs	r3, r0, #0
   302f6:	d002      	beq.n	302fe <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   302f8:	2309      	movs	r3, #9
   302fa:	425b      	negs	r3, r3
   302fc:	e00e      	b.n	3031c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   302fe:	4b11      	ldr	r3, [pc, #68]	; (30344 <ConnectNetwork+0x10c>)
   30300:	2200      	movs	r2, #0
   30302:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   30304:	e002      	b.n	3030c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   30306:	2000      	movs	r0, #0
   30308:	4b09      	ldr	r3, [pc, #36]	; (30330 <ConnectNetwork+0xf8>)
   3030a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   3030c:	4b0d      	ldr	r3, [pc, #52]	; (30344 <ConnectNetwork+0x10c>)
   3030e:	781b      	ldrb	r3, [r3, #0]
   30310:	2201      	movs	r2, #1
   30312:	4053      	eors	r3, r2
   30314:	b2db      	uxtb	r3, r3
   30316:	2b00      	cmp	r3, #0
   30318:	d1f5      	bne.n	30306 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   3031a:	2300      	movs	r3, #0
   3031c:	0018      	movs	r0, r3
   3031e:	46bd      	mov	sp, r7
   30320:	b008      	add	sp, #32
   30322:	bd80      	pop	{r7, pc}
   30324:	20004328 	.word	0x20004328
   30328:	20004434 	.word	0x20004434
   3032c:	000269d5 	.word	0x000269d5
   30330:	00022b55 	.word	0x00022b55
   30334:	20004320 	.word	0x20004320
   30338:	00026181 	.word	0x00026181
   3033c:	0002678d 	.word	0x0002678d
   30340:	00026395 	.word	0x00026395
   30344:	20004329 	.word	0x20004329

00030348 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30348:	b580      	push	{r7, lr}
   3034a:	b084      	sub	sp, #16
   3034c:	af00      	add	r7, sp, #0
   3034e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30350:	687b      	ldr	r3, [r7, #4]
   30352:	2b00      	cmp	r3, #0
   30354:	d022      	beq.n	3039c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30356:	2300      	movs	r3, #0
   30358:	60fb      	str	r3, [r7, #12]
   3035a:	e01b      	b.n	30394 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   3035c:	4a11      	ldr	r2, [pc, #68]	; (303a4 <allocateClient+0x5c>)
   3035e:	68fb      	ldr	r3, [r7, #12]
   30360:	2164      	movs	r1, #100	; 0x64
   30362:	434b      	muls	r3, r1
   30364:	18d3      	adds	r3, r2, r3
   30366:	3360      	adds	r3, #96	; 0x60
   30368:	681b      	ldr	r3, [r3, #0]
   3036a:	2b00      	cmp	r3, #0
   3036c:	d10f      	bne.n	3038e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   3036e:	4a0d      	ldr	r2, [pc, #52]	; (303a4 <allocateClient+0x5c>)
   30370:	68fb      	ldr	r3, [r7, #12]
   30372:	2164      	movs	r1, #100	; 0x64
   30374:	434b      	muls	r3, r1
   30376:	18d3      	adds	r3, r2, r3
   30378:	3360      	adds	r3, #96	; 0x60
   3037a:	687a      	ldr	r2, [r7, #4]
   3037c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   3037e:	68fb      	ldr	r3, [r7, #12]
   30380:	2264      	movs	r2, #100	; 0x64
   30382:	435a      	muls	r2, r3
   30384:	4b07      	ldr	r3, [pc, #28]	; (303a4 <allocateClient+0x5c>)
   30386:	18d2      	adds	r2, r2, r3
   30388:	687b      	ldr	r3, [r7, #4]
   3038a:	61da      	str	r2, [r3, #28]
			return;
   3038c:	e007      	b.n	3039e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3038e:	68fb      	ldr	r3, [r7, #12]
   30390:	3301      	adds	r3, #1
   30392:	60fb      	str	r3, [r7, #12]
   30394:	68fb      	ldr	r3, [r7, #12]
   30396:	2b06      	cmp	r3, #6
   30398:	d9e0      	bls.n	3035c <allocateClient+0x14>
   3039a:	e000      	b.n	3039e <allocateClient+0x56>
		return;
   3039c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   3039e:	46bd      	mov	sp, r7
   303a0:	b004      	add	sp, #16
   303a2:	bd80      	pop	{r7, pc}
   303a4:	20004438 	.word	0x20004438

000303a8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   303a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   303aa:	b089      	sub	sp, #36	; 0x24
   303ac:	af04      	add	r7, sp, #16
   303ae:	6078      	str	r0, [r7, #4]
   303b0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   303b2:	687b      	ldr	r3, [r7, #4]
   303b4:	2b00      	cmp	r3, #0
   303b6:	d00a      	beq.n	303ce <mqtt_init+0x26>
   303b8:	683b      	ldr	r3, [r7, #0]
   303ba:	2b00      	cmp	r3, #0
   303bc:	d007      	beq.n	303ce <mqtt_init+0x26>
   303be:	683b      	ldr	r3, [r7, #0]
   303c0:	691b      	ldr	r3, [r3, #16]
   303c2:	2b00      	cmp	r3, #0
   303c4:	d003      	beq.n	303ce <mqtt_init+0x26>
   303c6:	683b      	ldr	r3, [r7, #0]
   303c8:	689b      	ldr	r3, [r3, #8]
   303ca:	2b00      	cmp	r3, #0
   303cc:	d102      	bne.n	303d4 <mqtt_init+0x2c>
		return FAILURE;
   303ce:	2301      	movs	r3, #1
   303d0:	425b      	negs	r3, r3
   303d2:	e034      	b.n	3043e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   303d4:	683b      	ldr	r3, [r7, #0]
   303d6:	889b      	ldrh	r3, [r3, #4]
   303d8:	001a      	movs	r2, r3
   303da:	23fa      	movs	r3, #250	; 0xfa
   303dc:	009b      	lsls	r3, r3, #2
   303de:	4353      	muls	r3, r2
   303e0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   303e2:	687b      	ldr	r3, [r7, #4]
   303e4:	3320      	adds	r3, #32
   303e6:	0018      	movs	r0, r3
   303e8:	4b17      	ldr	r3, [pc, #92]	; (30448 <mqtt_init+0xa0>)
   303ea:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   303ec:	687b      	ldr	r3, [r7, #4]
   303ee:	3304      	adds	r3, #4
   303f0:	6839      	ldr	r1, [r7, #0]
   303f2:	2218      	movs	r2, #24
   303f4:	0018      	movs	r0, r3
   303f6:	4b15      	ldr	r3, [pc, #84]	; (3044c <mqtt_init+0xa4>)
   303f8:	4798      	blx	r3
	allocateClient(module);
   303fa:	687b      	ldr	r3, [r7, #4]
   303fc:	0018      	movs	r0, r3
   303fe:	4b14      	ldr	r3, [pc, #80]	; (30450 <mqtt_init+0xa8>)
   30400:	4798      	blx	r3
	
	if(module->client)
   30402:	687b      	ldr	r3, [r7, #4]
   30404:	69db      	ldr	r3, [r3, #28]
   30406:	2b00      	cmp	r3, #0
   30408:	d017      	beq.n	3043a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3040a:	687b      	ldr	r3, [r7, #4]
   3040c:	69d8      	ldr	r0, [r3, #28]
   3040e:	687b      	ldr	r3, [r7, #4]
   30410:	3320      	adds	r3, #32
   30412:	001c      	movs	r4, r3
   30414:	683b      	ldr	r3, [r7, #0]
   30416:	691e      	ldr	r6, [r3, #16]
   30418:	683b      	ldr	r3, [r7, #0]
   3041a:	695a      	ldr	r2, [r3, #20]
   3041c:	683b      	ldr	r3, [r7, #0]
   3041e:	6899      	ldr	r1, [r3, #8]
   30420:	683b      	ldr	r3, [r7, #0]
   30422:	68db      	ldr	r3, [r3, #12]
   30424:	68fd      	ldr	r5, [r7, #12]
   30426:	9302      	str	r3, [sp, #8]
   30428:	9101      	str	r1, [sp, #4]
   3042a:	9200      	str	r2, [sp, #0]
   3042c:	0033      	movs	r3, r6
   3042e:	002a      	movs	r2, r5
   30430:	0021      	movs	r1, r4
   30432:	4c08      	ldr	r4, [pc, #32]	; (30454 <mqtt_init+0xac>)
   30434:	47a0      	blx	r4
		return SUCCESS;
   30436:	2300      	movs	r3, #0
   30438:	e001      	b.n	3043e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   3043a:	2301      	movs	r3, #1
   3043c:	425b      	negs	r3, r3
}
   3043e:	0018      	movs	r0, r3
   30440:	46bd      	mov	sp, r7
   30442:	b005      	add	sp, #20
   30444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30446:	46c0      	nop			; (mov r8, r8)
   30448:	00030201 	.word	0x00030201
   3044c:	000356b9 	.word	0x000356b9
   30450:	00030349 	.word	0x00030349
   30454:	0002f279 	.word	0x0002f279

00030458 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30458:	b580      	push	{r7, lr}
   3045a:	b082      	sub	sp, #8
   3045c:	af00      	add	r7, sp, #0
   3045e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30460:	687b      	ldr	r3, [r7, #4]
   30462:	4a0c      	ldr	r2, [pc, #48]	; (30494 <mqtt_get_config_defaults+0x3c>)
   30464:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30466:	687b      	ldr	r3, [r7, #4]
   30468:	2200      	movs	r2, #0
   3046a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   3046c:	687b      	ldr	r3, [r7, #4]
   3046e:	223c      	movs	r2, #60	; 0x3c
   30470:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   30472:	687b      	ldr	r3, [r7, #4]
   30474:	2200      	movs	r2, #0
   30476:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30478:	687b      	ldr	r3, [r7, #4]
   3047a:	2200      	movs	r2, #0
   3047c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   3047e:	687b      	ldr	r3, [r7, #4]
   30480:	2200      	movs	r2, #0
   30482:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	2200      	movs	r2, #0
   30488:	615a      	str	r2, [r3, #20]
}
   3048a:	46c0      	nop			; (mov r8, r8)
   3048c:	46bd      	mov	sp, r7
   3048e:	b002      	add	sp, #8
   30490:	bd80      	pop	{r7, pc}
   30492:	46c0      	nop			; (mov r8, r8)
   30494:	0000075b 	.word	0x0000075b

00030498 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   30498:	b580      	push	{r7, lr}
   3049a:	b082      	sub	sp, #8
   3049c:	af00      	add	r7, sp, #0
   3049e:	6078      	str	r0, [r7, #4]
   304a0:	6039      	str	r1, [r7, #0]
	if(module)
   304a2:	687b      	ldr	r3, [r7, #4]
   304a4:	2b00      	cmp	r3, #0
   304a6:	d004      	beq.n	304b2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   304a8:	687b      	ldr	r3, [r7, #4]
   304aa:	683a      	ldr	r2, [r7, #0]
   304ac:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   304ae:	2300      	movs	r3, #0
   304b0:	e001      	b.n	304b6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   304b2:	2301      	movs	r3, #1
   304b4:	425b      	negs	r3, r3
}
   304b6:	0018      	movs	r0, r3
   304b8:	46bd      	mov	sp, r7
   304ba:	b002      	add	sp, #8
   304bc:	bd80      	pop	{r7, pc}
	...

000304c0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   304c0:	b580      	push	{r7, lr}
   304c2:	b082      	sub	sp, #8
   304c4:	af00      	add	r7, sp, #0
   304c6:	603a      	str	r2, [r7, #0]
   304c8:	1dfb      	adds	r3, r7, #7
   304ca:	1c02      	adds	r2, r0, #0
   304cc:	701a      	strb	r2, [r3, #0]
   304ce:	1dbb      	adds	r3, r7, #6
   304d0:	1c0a      	adds	r2, r1, #0
   304d2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   304d4:	683a      	ldr	r2, [r7, #0]
   304d6:	1dbb      	adds	r3, r7, #6
   304d8:	7819      	ldrb	r1, [r3, #0]
   304da:	1dfb      	adds	r3, r7, #7
   304dc:	781b      	ldrb	r3, [r3, #0]
   304de:	b25b      	sxtb	r3, r3
   304e0:	0018      	movs	r0, r3
   304e2:	4b03      	ldr	r3, [pc, #12]	; (304f0 <mqtt_socket_event_handler+0x30>)
   304e4:	4798      	blx	r3
}
   304e6:	46c0      	nop			; (mov r8, r8)
   304e8:	46bd      	mov	sp, r7
   304ea:	b002      	add	sp, #8
   304ec:	bd80      	pop	{r7, pc}
   304ee:	46c0      	nop			; (mov r8, r8)
   304f0:	0002ff3d 	.word	0x0002ff3d

000304f4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   304f4:	b580      	push	{r7, lr}
   304f6:	b082      	sub	sp, #8
   304f8:	af00      	add	r7, sp, #0
   304fa:	6078      	str	r0, [r7, #4]
   304fc:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   304fe:	683a      	ldr	r2, [r7, #0]
   30500:	687b      	ldr	r3, [r7, #4]
   30502:	0011      	movs	r1, r2
   30504:	0018      	movs	r0, r3
   30506:	4b03      	ldr	r3, [pc, #12]	; (30514 <mqtt_socket_resolve_handler+0x20>)
   30508:	4798      	blx	r3
}
   3050a:	46c0      	nop			; (mov r8, r8)
   3050c:	46bd      	mov	sp, r7
   3050e:	b002      	add	sp, #8
   30510:	bd80      	pop	{r7, pc}
   30512:	46c0      	nop			; (mov r8, r8)
   30514:	0002feed 	.word	0x0002feed

00030518 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   30518:	b590      	push	{r4, r7, lr}
   3051a:	b085      	sub	sp, #20
   3051c:	af00      	add	r7, sp, #0
   3051e:	6078      	str	r0, [r7, #4]
   30520:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   30522:	687b      	ldr	r3, [r7, #4]
   30524:	3320      	adds	r3, #32
   30526:	0018      	movs	r0, r3
   30528:	687b      	ldr	r3, [r7, #4]
   3052a:	889b      	ldrh	r3, [r3, #4]
   3052c:	001a      	movs	r2, r3
   3052e:	687b      	ldr	r3, [r7, #4]
   30530:	799b      	ldrb	r3, [r3, #6]
   30532:	6839      	ldr	r1, [r7, #0]
   30534:	4c09      	ldr	r4, [pc, #36]	; (3055c <mqtt_connect+0x44>)
   30536:	47a0      	blx	r4
   30538:	0003      	movs	r3, r0
   3053a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   3053c:	687b      	ldr	r3, [r7, #4]
   3053e:	681b      	ldr	r3, [r3, #0]
   30540:	2b00      	cmp	r3, #0
   30542:	d006      	beq.n	30552 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   30544:	687b      	ldr	r3, [r7, #4]
   30546:	681b      	ldr	r3, [r3, #0]
   30548:	220c      	movs	r2, #12
   3054a:	18ba      	adds	r2, r7, r2
   3054c:	6878      	ldr	r0, [r7, #4]
   3054e:	2100      	movs	r1, #0
   30550:	4798      	blx	r3
	return connResult.sock_connected.result;
   30552:	68fb      	ldr	r3, [r7, #12]
}
   30554:	0018      	movs	r0, r3
   30556:	46bd      	mov	sp, r7
   30558:	b005      	add	sp, #20
   3055a:	bd90      	pop	{r4, r7, pc}
   3055c:	00030239 	.word	0x00030239

00030560 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30560:	b580      	push	{r7, lr}
   30562:	b09c      	sub	sp, #112	; 0x70
   30564:	af00      	add	r7, sp, #0
   30566:	60f8      	str	r0, [r7, #12]
   30568:	607a      	str	r2, [r7, #4]
   3056a:	603b      	str	r3, [r7, #0]
   3056c:	230b      	movs	r3, #11
   3056e:	18fb      	adds	r3, r7, r3
   30570:	1c0a      	adds	r2, r1, #0
   30572:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   30574:	2310      	movs	r3, #16
   30576:	18fa      	adds	r2, r7, r3
   30578:	4b31      	ldr	r3, [pc, #196]	; (30640 <mqtt_connect_broker+0xe0>)
   3057a:	0010      	movs	r0, r2
   3057c:	0019      	movs	r1, r3
   3057e:	2358      	movs	r3, #88	; 0x58
   30580:	001a      	movs	r2, r3
   30582:	4b30      	ldr	r3, [pc, #192]	; (30644 <mqtt_connect_broker+0xe4>)
   30584:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   30586:	2310      	movs	r3, #16
   30588:	18fb      	adds	r3, r7, r3
   3058a:	2204      	movs	r2, #4
   3058c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   3058e:	2310      	movs	r3, #16
   30590:	18fb      	adds	r3, r7, r3
   30592:	6fba      	ldr	r2, [r7, #120]	; 0x78
   30594:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   30596:	2310      	movs	r3, #16
   30598:	18fb      	adds	r3, r7, r3
   3059a:	687a      	ldr	r2, [r7, #4]
   3059c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   3059e:	2310      	movs	r3, #16
   305a0:	18fb      	adds	r3, r7, r3
   305a2:	683a      	ldr	r2, [r7, #0]
   305a4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   305a6:	2310      	movs	r3, #16
   305a8:	18fb      	adds	r3, r7, r3
   305aa:	220b      	movs	r2, #11
   305ac:	18ba      	adds	r2, r7, r2
   305ae:	7812      	ldrb	r2, [r2, #0]
   305b0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   305b2:	2310      	movs	r3, #16
   305b4:	18fb      	adds	r3, r7, r3
   305b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   305b8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   305ba:	2310      	movs	r3, #16
   305bc:	18fb      	adds	r3, r7, r3
   305be:	2280      	movs	r2, #128	; 0x80
   305c0:	18ba      	adds	r2, r7, r2
   305c2:	6812      	ldr	r2, [r2, #0]
   305c4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   305c6:	2310      	movs	r3, #16
   305c8:	18fb      	adds	r3, r7, r3
   305ca:	228c      	movs	r2, #140	; 0x8c
   305cc:	18ba      	adds	r2, r7, r2
   305ce:	213c      	movs	r1, #60	; 0x3c
   305d0:	7812      	ldrb	r2, [r2, #0]
   305d2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   305d4:	2310      	movs	r3, #16
   305d6:	18fb      	adds	r3, r7, r3
   305d8:	2288      	movs	r2, #136	; 0x88
   305da:	18ba      	adds	r2, r7, r2
   305dc:	213d      	movs	r1, #61	; 0x3d
   305de:	7812      	ldrb	r2, [r2, #0]
   305e0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   305e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   305e4:	2b00      	cmp	r3, #0
   305e6:	d008      	beq.n	305fa <mqtt_connect_broker+0x9a>
   305e8:	2380      	movs	r3, #128	; 0x80
   305ea:	18fb      	adds	r3, r7, r3
   305ec:	681b      	ldr	r3, [r3, #0]
   305ee:	2b00      	cmp	r3, #0
   305f0:	d003      	beq.n	305fa <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   305f2:	2310      	movs	r3, #16
   305f4:	18fb      	adds	r3, r7, r3
   305f6:	2201      	movs	r2, #1
   305f8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   305fa:	68fb      	ldr	r3, [r7, #12]
   305fc:	69db      	ldr	r3, [r3, #28]
   305fe:	2210      	movs	r2, #16
   30600:	18ba      	adds	r2, r7, r2
   30602:	0011      	movs	r1, r2
   30604:	0018      	movs	r0, r3
   30606:	4b10      	ldr	r3, [pc, #64]	; (30648 <mqtt_connect_broker+0xe8>)
   30608:	4798      	blx	r3
   3060a:	0003      	movs	r3, r0
   3060c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   3060e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30610:	b2da      	uxtb	r2, r3
   30612:	2368      	movs	r3, #104	; 0x68
   30614:	18fb      	adds	r3, r7, r3
   30616:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   30618:	68fb      	ldr	r3, [r7, #12]
   3061a:	681b      	ldr	r3, [r3, #0]
   3061c:	2b00      	cmp	r3, #0
   3061e:	d006      	beq.n	3062e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30620:	68fb      	ldr	r3, [r7, #12]
   30622:	681b      	ldr	r3, [r3, #0]
   30624:	2268      	movs	r2, #104	; 0x68
   30626:	18ba      	adds	r2, r7, r2
   30628:	68f8      	ldr	r0, [r7, #12]
   3062a:	2101      	movs	r1, #1
   3062c:	4798      	blx	r3
	
	module->isConnected = true;
   3062e:	68fb      	ldr	r3, [r7, #12]
   30630:	2234      	movs	r2, #52	; 0x34
   30632:	2101      	movs	r1, #1
   30634:	5499      	strb	r1, [r3, r2]
	return rc;
   30636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   30638:	0018      	movs	r0, r3
   3063a:	46bd      	mov	sp, r7
   3063c:	b01c      	add	sp, #112	; 0x70
   3063e:	bd80      	pop	{r7, pc}
   30640:	0003ac94 	.word	0x0003ac94
   30644:	000356b9 	.word	0x000356b9
   30648:	0002f989 	.word	0x0002f989

0003064c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   3064c:	b580      	push	{r7, lr}
   3064e:	b084      	sub	sp, #16
   30650:	af00      	add	r7, sp, #0
   30652:	6078      	str	r0, [r7, #4]
   30654:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   30656:	687b      	ldr	r3, [r7, #4]
   30658:	69db      	ldr	r3, [r3, #28]
   3065a:	0018      	movs	r0, r3
   3065c:	4b0c      	ldr	r3, [pc, #48]	; (30690 <mqtt_disconnect+0x44>)
   3065e:	4798      	blx	r3
   30660:	0003      	movs	r3, r0
   30662:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   30664:	68fb      	ldr	r3, [r7, #12]
   30666:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30668:	687b      	ldr	r3, [r7, #4]
   3066a:	681b      	ldr	r3, [r3, #0]
   3066c:	2b00      	cmp	r3, #0
   3066e:	d006      	beq.n	3067e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30670:	687b      	ldr	r3, [r7, #4]
   30672:	681b      	ldr	r3, [r3, #0]
   30674:	2208      	movs	r2, #8
   30676:	18ba      	adds	r2, r7, r2
   30678:	6878      	ldr	r0, [r7, #4]
   3067a:	2105      	movs	r1, #5
   3067c:	4798      	blx	r3
	
	module->isConnected = false;
   3067e:	687b      	ldr	r3, [r7, #4]
   30680:	2234      	movs	r2, #52	; 0x34
   30682:	2100      	movs	r1, #0
   30684:	5499      	strb	r1, [r3, r2]
	return rc;
   30686:	68fb      	ldr	r3, [r7, #12]
}
   30688:	0018      	movs	r0, r3
   3068a:	46bd      	mov	sp, r7
   3068c:	b004      	add	sp, #16
   3068e:	bd80      	pop	{r7, pc}
   30690:	0002fe15 	.word	0x0002fe15

00030694 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   30694:	b580      	push	{r7, lr}
   30696:	b08a      	sub	sp, #40	; 0x28
   30698:	af00      	add	r7, sp, #0
   3069a:	60f8      	str	r0, [r7, #12]
   3069c:	60b9      	str	r1, [r7, #8]
   3069e:	607a      	str	r2, [r7, #4]
   306a0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   306a2:	2314      	movs	r3, #20
   306a4:	18fb      	adds	r3, r7, r3
   306a6:	2230      	movs	r2, #48	; 0x30
   306a8:	18ba      	adds	r2, r7, r2
   306aa:	7812      	ldrb	r2, [r2, #0]
   306ac:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   306ae:	2314      	movs	r3, #20
   306b0:	18fb      	adds	r3, r7, r3
   306b2:	687a      	ldr	r2, [r7, #4]
   306b4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   306b6:	2314      	movs	r3, #20
   306b8:	18fb      	adds	r3, r7, r3
   306ba:	683a      	ldr	r2, [r7, #0]
   306bc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   306be:	2314      	movs	r3, #20
   306c0:	18fb      	adds	r3, r7, r3
   306c2:	2234      	movs	r2, #52	; 0x34
   306c4:	18ba      	adds	r2, r7, r2
   306c6:	7812      	ldrb	r2, [r2, #0]
   306c8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   306ca:	68fb      	ldr	r3, [r7, #12]
   306cc:	69db      	ldr	r3, [r3, #28]
   306ce:	2214      	movs	r2, #20
   306d0:	18ba      	adds	r2, r7, r2
   306d2:	68b9      	ldr	r1, [r7, #8]
   306d4:	0018      	movs	r0, r3
   306d6:	4b09      	ldr	r3, [pc, #36]	; (306fc <mqtt_publish+0x68>)
   306d8:	4798      	blx	r3
   306da:	0003      	movs	r3, r0
   306dc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   306de:	68fb      	ldr	r3, [r7, #12]
   306e0:	681b      	ldr	r3, [r3, #0]
   306e2:	2b00      	cmp	r3, #0
   306e4:	d005      	beq.n	306f2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   306e6:	68fb      	ldr	r3, [r7, #12]
   306e8:	681b      	ldr	r3, [r3, #0]
   306ea:	68f8      	ldr	r0, [r7, #12]
   306ec:	2200      	movs	r2, #0
   306ee:	2102      	movs	r1, #2
   306f0:	4798      	blx	r3
	
	return rc;
   306f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   306f4:	0018      	movs	r0, r3
   306f6:	46bd      	mov	sp, r7
   306f8:	b00a      	add	sp, #40	; 0x28
   306fa:	bd80      	pop	{r7, pc}
   306fc:	0002fc55 	.word	0x0002fc55

00030700 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30700:	b590      	push	{r4, r7, lr}
   30702:	b087      	sub	sp, #28
   30704:	af00      	add	r7, sp, #0
   30706:	60f8      	str	r0, [r7, #12]
   30708:	60b9      	str	r1, [r7, #8]
   3070a:	603b      	str	r3, [r7, #0]
   3070c:	1dfb      	adds	r3, r7, #7
   3070e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30710:	68fb      	ldr	r3, [r7, #12]
   30712:	69d8      	ldr	r0, [r3, #28]
   30714:	683c      	ldr	r4, [r7, #0]
   30716:	1dfb      	adds	r3, r7, #7
   30718:	781a      	ldrb	r2, [r3, #0]
   3071a:	68b9      	ldr	r1, [r7, #8]
   3071c:	0023      	movs	r3, r4
   3071e:	4c09      	ldr	r4, [pc, #36]	; (30744 <mqtt_subscribe+0x44>)
   30720:	47a0      	blx	r4
   30722:	0003      	movs	r3, r0
   30724:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   30726:	68fb      	ldr	r3, [r7, #12]
   30728:	681b      	ldr	r3, [r3, #0]
   3072a:	2b00      	cmp	r3, #0
   3072c:	d005      	beq.n	3073a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   3072e:	68fb      	ldr	r3, [r7, #12]
   30730:	681b      	ldr	r3, [r3, #0]
   30732:	68f8      	ldr	r0, [r7, #12]
   30734:	2200      	movs	r2, #0
   30736:	2103      	movs	r1, #3
   30738:	4798      	blx	r3
	
	return rc;
   3073a:	697b      	ldr	r3, [r7, #20]
}
   3073c:	0018      	movs	r0, r3
   3073e:	46bd      	mov	sp, r7
   30740:	b007      	add	sp, #28
   30742:	bd90      	pop	{r4, r7, pc}
   30744:	0002fac9 	.word	0x0002fac9

00030748 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30748:	b580      	push	{r7, lr}
   3074a:	b082      	sub	sp, #8
   3074c:	af00      	add	r7, sp, #0
   3074e:	6078      	str	r0, [r7, #4]
   30750:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   30752:	687b      	ldr	r3, [r7, #4]
   30754:	69db      	ldr	r3, [r3, #28]
   30756:	683a      	ldr	r2, [r7, #0]
   30758:	0011      	movs	r1, r2
   3075a:	0018      	movs	r0, r3
   3075c:	4b03      	ldr	r3, [pc, #12]	; (3076c <mqtt_yield+0x24>)
   3075e:	4798      	blx	r3
   30760:	0003      	movs	r3, r0
   30762:	0018      	movs	r0, r3
   30764:	46bd      	mov	sp, r7
   30766:	b002      	add	sp, #8
   30768:	bd80      	pop	{r7, pc}
   3076a:	46c0      	nop			; (mov r8, r8)
   3076c:	0002f8d1 	.word	0x0002f8d1

00030770 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30770:	b590      	push	{r4, r7, lr}
   30772:	b085      	sub	sp, #20
   30774:	af00      	add	r7, sp, #0
   30776:	6078      	str	r0, [r7, #4]
	int len = 0;
   30778:	2300      	movs	r3, #0
   3077a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   3077c:	687b      	ldr	r3, [r7, #4]
   3077e:	7a1b      	ldrb	r3, [r3, #8]
   30780:	2b03      	cmp	r3, #3
   30782:	d102      	bne.n	3078a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   30784:	230c      	movs	r3, #12
   30786:	60fb      	str	r3, [r7, #12]
   30788:	e005      	b.n	30796 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   3078a:	687b      	ldr	r3, [r7, #4]
   3078c:	7a1b      	ldrb	r3, [r3, #8]
   3078e:	2b04      	cmp	r3, #4
   30790:	d101      	bne.n	30796 <MQTTSerialize_connectLength+0x26>
		len = 10;
   30792:	230a      	movs	r3, #10
   30794:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   30796:	687b      	ldr	r3, [r7, #4]
   30798:	68d8      	ldr	r0, [r3, #12]
   3079a:	6919      	ldr	r1, [r3, #16]
   3079c:	695a      	ldr	r2, [r3, #20]
   3079e:	4b25      	ldr	r3, [pc, #148]	; (30834 <MQTTSerialize_connectLength+0xc4>)
   307a0:	4798      	blx	r3
   307a2:	0003      	movs	r3, r0
   307a4:	3302      	adds	r3, #2
   307a6:	68fa      	ldr	r2, [r7, #12]
   307a8:	18d3      	adds	r3, r2, r3
   307aa:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   307ac:	687b      	ldr	r3, [r7, #4]
   307ae:	7edb      	ldrb	r3, [r3, #27]
   307b0:	2b00      	cmp	r3, #0
   307b2:	d013      	beq.n	307dc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   307b4:	687b      	ldr	r3, [r7, #4]
   307b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   307b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   307ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   307bc:	4b1d      	ldr	r3, [pc, #116]	; (30834 <MQTTSerialize_connectLength+0xc4>)
   307be:	4798      	blx	r3
   307c0:	0003      	movs	r3, r0
   307c2:	1c9c      	adds	r4, r3, #2
   307c4:	687b      	ldr	r3, [r7, #4]
   307c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   307c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   307ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   307cc:	4b19      	ldr	r3, [pc, #100]	; (30834 <MQTTSerialize_connectLength+0xc4>)
   307ce:	4798      	blx	r3
   307d0:	0003      	movs	r3, r0
   307d2:	18e3      	adds	r3, r4, r3
   307d4:	3302      	adds	r3, #2
   307d6:	68fa      	ldr	r2, [r7, #12]
   307d8:	18d3      	adds	r3, r2, r3
   307da:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   307dc:	687b      	ldr	r3, [r7, #4]
   307de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   307e0:	2b00      	cmp	r3, #0
   307e2:	d103      	bne.n	307ec <MQTTSerialize_connectLength+0x7c>
   307e4:	687b      	ldr	r3, [r7, #4]
   307e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   307e8:	2b00      	cmp	r3, #0
   307ea:	d00a      	beq.n	30802 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   307ec:	687b      	ldr	r3, [r7, #4]
   307ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
   307f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   307f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   307f4:	4b0f      	ldr	r3, [pc, #60]	; (30834 <MQTTSerialize_connectLength+0xc4>)
   307f6:	4798      	blx	r3
   307f8:	0003      	movs	r3, r0
   307fa:	3302      	adds	r3, #2
   307fc:	68fa      	ldr	r2, [r7, #12]
   307fe:	18d3      	adds	r3, r2, r3
   30800:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30802:	687b      	ldr	r3, [r7, #4]
   30804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30806:	2b00      	cmp	r3, #0
   30808:	d103      	bne.n	30812 <MQTTSerialize_connectLength+0xa2>
   3080a:	687b      	ldr	r3, [r7, #4]
   3080c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3080e:	2b00      	cmp	r3, #0
   30810:	d00a      	beq.n	30828 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30812:	687b      	ldr	r3, [r7, #4]
   30814:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   30816:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3081a:	4b06      	ldr	r3, [pc, #24]	; (30834 <MQTTSerialize_connectLength+0xc4>)
   3081c:	4798      	blx	r3
   3081e:	0003      	movs	r3, r0
   30820:	3302      	adds	r3, #2
   30822:	68fa      	ldr	r2, [r7, #12]
   30824:	18d3      	adds	r3, r2, r3
   30826:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   30828:	68fb      	ldr	r3, [r7, #12]
}
   3082a:	0018      	movs	r0, r3
   3082c:	46bd      	mov	sp, r7
   3082e:	b005      	add	sp, #20
   30830:	bd90      	pop	{r4, r7, pc}
   30832:	46c0      	nop			; (mov r8, r8)
   30834:	000311e1 	.word	0x000311e1

00030838 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   30838:	b590      	push	{r4, r7, lr}
   3083a:	b08b      	sub	sp, #44	; 0x2c
   3083c:	af00      	add	r7, sp, #0
   3083e:	60f8      	str	r0, [r7, #12]
   30840:	60b9      	str	r1, [r7, #8]
   30842:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   30844:	68fb      	ldr	r3, [r7, #12]
   30846:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   30848:	2300      	movs	r3, #0
   3084a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   3084c:	2300      	movs	r3, #0
   3084e:	617b      	str	r3, [r7, #20]
	int len = 0;
   30850:	2300      	movs	r3, #0
   30852:	623b      	str	r3, [r7, #32]
	int rc = -1;
   30854:	2301      	movs	r3, #1
   30856:	425b      	negs	r3, r3
   30858:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   3085a:	687b      	ldr	r3, [r7, #4]
   3085c:	0018      	movs	r0, r3
   3085e:	4b8c      	ldr	r3, [pc, #560]	; (30a90 <MQTTSerialize_connect+0x258>)
   30860:	4798      	blx	r3
   30862:	0003      	movs	r3, r0
   30864:	623b      	str	r3, [r7, #32]
   30866:	6a3b      	ldr	r3, [r7, #32]
   30868:	0018      	movs	r0, r3
   3086a:	4b8a      	ldr	r3, [pc, #552]	; (30a94 <MQTTSerialize_connect+0x25c>)
   3086c:	4798      	blx	r3
   3086e:	0002      	movs	r2, r0
   30870:	68bb      	ldr	r3, [r7, #8]
   30872:	429a      	cmp	r2, r3
   30874:	dd03      	ble.n	3087e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30876:	2302      	movs	r3, #2
   30878:	425b      	negs	r3, r3
   3087a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3087c:	e103      	b.n	30a86 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   3087e:	2318      	movs	r3, #24
   30880:	18fb      	adds	r3, r7, r3
   30882:	2200      	movs	r2, #0
   30884:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   30886:	2318      	movs	r3, #24
   30888:	18fb      	adds	r3, r7, r3
   3088a:	781a      	ldrb	r2, [r3, #0]
   3088c:	210f      	movs	r1, #15
   3088e:	400a      	ands	r2, r1
   30890:	1c11      	adds	r1, r2, #0
   30892:	2210      	movs	r2, #16
   30894:	430a      	orrs	r2, r1
   30896:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30898:	2318      	movs	r3, #24
   3089a:	18fb      	adds	r3, r7, r3
   3089c:	781a      	ldrb	r2, [r3, #0]
   3089e:	231c      	movs	r3, #28
   308a0:	18fb      	adds	r3, r7, r3
   308a2:	0011      	movs	r1, r2
   308a4:	0018      	movs	r0, r3
   308a6:	4b7c      	ldr	r3, [pc, #496]	; (30a98 <MQTTSerialize_connect+0x260>)
   308a8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   308aa:	69fb      	ldr	r3, [r7, #28]
   308ac:	6a3a      	ldr	r2, [r7, #32]
   308ae:	0011      	movs	r1, r2
   308b0:	0018      	movs	r0, r3
   308b2:	4b7a      	ldr	r3, [pc, #488]	; (30a9c <MQTTSerialize_connect+0x264>)
   308b4:	4798      	blx	r3
   308b6:	0002      	movs	r2, r0
   308b8:	69fb      	ldr	r3, [r7, #28]
   308ba:	189b      	adds	r3, r3, r2
   308bc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   308be:	687b      	ldr	r3, [r7, #4]
   308c0:	7a1b      	ldrb	r3, [r3, #8]
   308c2:	2b04      	cmp	r3, #4
   308c4:	d10d      	bne.n	308e2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   308c6:	4a76      	ldr	r2, [pc, #472]	; (30aa0 <MQTTSerialize_connect+0x268>)
   308c8:	231c      	movs	r3, #28
   308ca:	18fb      	adds	r3, r7, r3
   308cc:	0011      	movs	r1, r2
   308ce:	0018      	movs	r0, r3
   308d0:	4b74      	ldr	r3, [pc, #464]	; (30aa4 <MQTTSerialize_connect+0x26c>)
   308d2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   308d4:	231c      	movs	r3, #28
   308d6:	18fb      	adds	r3, r7, r3
   308d8:	2104      	movs	r1, #4
   308da:	0018      	movs	r0, r3
   308dc:	4b6e      	ldr	r3, [pc, #440]	; (30a98 <MQTTSerialize_connect+0x260>)
   308de:	4798      	blx	r3
   308e0:	e00c      	b.n	308fc <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   308e2:	4a71      	ldr	r2, [pc, #452]	; (30aa8 <MQTTSerialize_connect+0x270>)
   308e4:	231c      	movs	r3, #28
   308e6:	18fb      	adds	r3, r7, r3
   308e8:	0011      	movs	r1, r2
   308ea:	0018      	movs	r0, r3
   308ec:	4b6d      	ldr	r3, [pc, #436]	; (30aa4 <MQTTSerialize_connect+0x26c>)
   308ee:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   308f0:	231c      	movs	r3, #28
   308f2:	18fb      	adds	r3, r7, r3
   308f4:	2103      	movs	r1, #3
   308f6:	0018      	movs	r0, r3
   308f8:	4b67      	ldr	r3, [pc, #412]	; (30a98 <MQTTSerialize_connect+0x260>)
   308fa:	4798      	blx	r3
	}

	flags.all = 0;
   308fc:	2314      	movs	r3, #20
   308fe:	18fb      	adds	r3, r7, r3
   30900:	2200      	movs	r2, #0
   30902:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30904:	687b      	ldr	r3, [r7, #4]
   30906:	7e9b      	ldrb	r3, [r3, #26]
   30908:	1c1a      	adds	r2, r3, #0
   3090a:	2301      	movs	r3, #1
   3090c:	4013      	ands	r3, r2
   3090e:	b2da      	uxtb	r2, r3
   30910:	2314      	movs	r3, #20
   30912:	18fb      	adds	r3, r7, r3
   30914:	2101      	movs	r1, #1
   30916:	400a      	ands	r2, r1
   30918:	1890      	adds	r0, r2, r2
   3091a:	781a      	ldrb	r2, [r3, #0]
   3091c:	2102      	movs	r1, #2
   3091e:	438a      	bics	r2, r1
   30920:	1c11      	adds	r1, r2, #0
   30922:	1c02      	adds	r2, r0, #0
   30924:	430a      	orrs	r2, r1
   30926:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30928:	687b      	ldr	r3, [r7, #4]
   3092a:	7edb      	ldrb	r3, [r3, #27]
   3092c:	1e5a      	subs	r2, r3, #1
   3092e:	4193      	sbcs	r3, r2
   30930:	b2da      	uxtb	r2, r3
   30932:	2314      	movs	r3, #20
   30934:	18fb      	adds	r3, r7, r3
   30936:	2101      	movs	r1, #1
   30938:	400a      	ands	r2, r1
   3093a:	0090      	lsls	r0, r2, #2
   3093c:	781a      	ldrb	r2, [r3, #0]
   3093e:	2104      	movs	r1, #4
   30940:	438a      	bics	r2, r1
   30942:	1c11      	adds	r1, r2, #0
   30944:	1c02      	adds	r2, r0, #0
   30946:	430a      	orrs	r2, r1
   30948:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   3094a:	2314      	movs	r3, #20
   3094c:	18fb      	adds	r3, r7, r3
   3094e:	781b      	ldrb	r3, [r3, #0]
   30950:	2204      	movs	r2, #4
   30952:	4013      	ands	r3, r2
   30954:	b2db      	uxtb	r3, r3
   30956:	2b00      	cmp	r3, #0
   30958:	d025      	beq.n	309a6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   3095a:	687b      	ldr	r3, [r7, #4]
   3095c:	223d      	movs	r2, #61	; 0x3d
   3095e:	5c9b      	ldrb	r3, [r3, r2]
   30960:	1c1a      	adds	r2, r3, #0
   30962:	2303      	movs	r3, #3
   30964:	4013      	ands	r3, r2
   30966:	b2da      	uxtb	r2, r3
   30968:	2314      	movs	r3, #20
   3096a:	18fb      	adds	r3, r7, r3
   3096c:	2103      	movs	r1, #3
   3096e:	400a      	ands	r2, r1
   30970:	00d0      	lsls	r0, r2, #3
   30972:	781a      	ldrb	r2, [r3, #0]
   30974:	2118      	movs	r1, #24
   30976:	438a      	bics	r2, r1
   30978:	1c11      	adds	r1, r2, #0
   3097a:	1c02      	adds	r2, r0, #0
   3097c:	430a      	orrs	r2, r1
   3097e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30980:	687b      	ldr	r3, [r7, #4]
   30982:	223c      	movs	r2, #60	; 0x3c
   30984:	5c9b      	ldrb	r3, [r3, r2]
   30986:	1c1a      	adds	r2, r3, #0
   30988:	2301      	movs	r3, #1
   3098a:	4013      	ands	r3, r2
   3098c:	b2da      	uxtb	r2, r3
   3098e:	2314      	movs	r3, #20
   30990:	18fb      	adds	r3, r7, r3
   30992:	2101      	movs	r1, #1
   30994:	400a      	ands	r2, r1
   30996:	0150      	lsls	r0, r2, #5
   30998:	781a      	ldrb	r2, [r3, #0]
   3099a:	2120      	movs	r1, #32
   3099c:	438a      	bics	r2, r1
   3099e:	1c11      	adds	r1, r2, #0
   309a0:	1c02      	adds	r2, r0, #0
   309a2:	430a      	orrs	r2, r1
   309a4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   309a6:	687b      	ldr	r3, [r7, #4]
   309a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   309aa:	2b00      	cmp	r3, #0
   309ac:	d103      	bne.n	309b6 <MQTTSerialize_connect+0x17e>
   309ae:	687b      	ldr	r3, [r7, #4]
   309b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   309b2:	2b00      	cmp	r3, #0
   309b4:	d006      	beq.n	309c4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   309b6:	2314      	movs	r3, #20
   309b8:	18fb      	adds	r3, r7, r3
   309ba:	781a      	ldrb	r2, [r3, #0]
   309bc:	2180      	movs	r1, #128	; 0x80
   309be:	4249      	negs	r1, r1
   309c0:	430a      	orrs	r2, r1
   309c2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   309c4:	687b      	ldr	r3, [r7, #4]
   309c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   309c8:	2b00      	cmp	r3, #0
   309ca:	d103      	bne.n	309d4 <MQTTSerialize_connect+0x19c>
   309cc:	687b      	ldr	r3, [r7, #4]
   309ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   309d0:	2b00      	cmp	r3, #0
   309d2:	d005      	beq.n	309e0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   309d4:	2314      	movs	r3, #20
   309d6:	18fb      	adds	r3, r7, r3
   309d8:	781a      	ldrb	r2, [r3, #0]
   309da:	2140      	movs	r1, #64	; 0x40
   309dc:	430a      	orrs	r2, r1
   309de:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   309e0:	2314      	movs	r3, #20
   309e2:	18fb      	adds	r3, r7, r3
   309e4:	781a      	ldrb	r2, [r3, #0]
   309e6:	231c      	movs	r3, #28
   309e8:	18fb      	adds	r3, r7, r3
   309ea:	0011      	movs	r1, r2
   309ec:	0018      	movs	r0, r3
   309ee:	4b2a      	ldr	r3, [pc, #168]	; (30a98 <MQTTSerialize_connect+0x260>)
   309f0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   309f2:	687b      	ldr	r3, [r7, #4]
   309f4:	8b1b      	ldrh	r3, [r3, #24]
   309f6:	001a      	movs	r2, r3
   309f8:	231c      	movs	r3, #28
   309fa:	18fb      	adds	r3, r7, r3
   309fc:	0011      	movs	r1, r2
   309fe:	0018      	movs	r0, r3
   30a00:	4b2a      	ldr	r3, [pc, #168]	; (30aac <MQTTSerialize_connect+0x274>)
   30a02:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30a04:	687b      	ldr	r3, [r7, #4]
   30a06:	221c      	movs	r2, #28
   30a08:	18b8      	adds	r0, r7, r2
   30a0a:	68d9      	ldr	r1, [r3, #12]
   30a0c:	691a      	ldr	r2, [r3, #16]
   30a0e:	695b      	ldr	r3, [r3, #20]
   30a10:	4c27      	ldr	r4, [pc, #156]	; (30ab0 <MQTTSerialize_connect+0x278>)
   30a12:	47a0      	blx	r4
	if (options->willFlag)
   30a14:	687b      	ldr	r3, [r7, #4]
   30a16:	7edb      	ldrb	r3, [r3, #27]
   30a18:	2b00      	cmp	r3, #0
   30a1a:	d00f      	beq.n	30a3c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30a1c:	687b      	ldr	r3, [r7, #4]
   30a1e:	221c      	movs	r2, #28
   30a20:	18b8      	adds	r0, r7, r2
   30a22:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30a28:	4c21      	ldr	r4, [pc, #132]	; (30ab0 <MQTTSerialize_connect+0x278>)
   30a2a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30a2c:	687b      	ldr	r3, [r7, #4]
   30a2e:	221c      	movs	r2, #28
   30a30:	18b8      	adds	r0, r7, r2
   30a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30a38:	4c1d      	ldr	r4, [pc, #116]	; (30ab0 <MQTTSerialize_connect+0x278>)
   30a3a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30a3c:	2314      	movs	r3, #20
   30a3e:	18fb      	adds	r3, r7, r3
   30a40:	781b      	ldrb	r3, [r3, #0]
   30a42:	227f      	movs	r2, #127	; 0x7f
   30a44:	4393      	bics	r3, r2
   30a46:	b2db      	uxtb	r3, r3
   30a48:	2b00      	cmp	r3, #0
   30a4a:	d007      	beq.n	30a5c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30a4c:	687b      	ldr	r3, [r7, #4]
   30a4e:	221c      	movs	r2, #28
   30a50:	18b8      	adds	r0, r7, r2
   30a52:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30a58:	4c15      	ldr	r4, [pc, #84]	; (30ab0 <MQTTSerialize_connect+0x278>)
   30a5a:	47a0      	blx	r4
	if (flags.bits.password)
   30a5c:	2314      	movs	r3, #20
   30a5e:	18fb      	adds	r3, r7, r3
   30a60:	781b      	ldrb	r3, [r3, #0]
   30a62:	2240      	movs	r2, #64	; 0x40
   30a64:	4013      	ands	r3, r2
   30a66:	b2db      	uxtb	r3, r3
   30a68:	2b00      	cmp	r3, #0
   30a6a:	d007      	beq.n	30a7c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30a6c:	687b      	ldr	r3, [r7, #4]
   30a6e:	221c      	movs	r2, #28
   30a70:	18b8      	adds	r0, r7, r2
   30a72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30a78:	4c0d      	ldr	r4, [pc, #52]	; (30ab0 <MQTTSerialize_connect+0x278>)
   30a7a:	47a0      	blx	r4

	rc = ptr - buf;
   30a7c:	69fb      	ldr	r3, [r7, #28]
   30a7e:	001a      	movs	r2, r3
   30a80:	68fb      	ldr	r3, [r7, #12]
   30a82:	1ad3      	subs	r3, r2, r3
   30a84:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   30a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30a88:	0018      	movs	r0, r3
   30a8a:	46bd      	mov	sp, r7
   30a8c:	b00b      	add	sp, #44	; 0x2c
   30a8e:	bd90      	pop	{r4, r7, pc}
   30a90:	00030771 	.word	0x00030771
   30a94:	00030f05 	.word	0x00030f05
   30a98:	00031027 	.word	0x00031027
   30a9c:	00030e0d 	.word	0x00030e0d
   30aa0:	0003acec 	.word	0x0003acec
   30aa4:	000310a9 	.word	0x000310a9
   30aa8:	0003acf4 	.word	0x0003acf4
   30aac:	00031051 	.word	0x00031051
   30ab0:	000310f9 	.word	0x000310f9

00030ab4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30ab4:	b580      	push	{r7, lr}
   30ab6:	b08a      	sub	sp, #40	; 0x28
   30ab8:	af00      	add	r7, sp, #0
   30aba:	60f8      	str	r0, [r7, #12]
   30abc:	60b9      	str	r1, [r7, #8]
   30abe:	607a      	str	r2, [r7, #4]
   30ac0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30ac2:	2300      	movs	r3, #0
   30ac4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30ac6:	687b      	ldr	r3, [r7, #4]
   30ac8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30aca:	2300      	movs	r3, #0
   30acc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30ace:	2300      	movs	r3, #0
   30ad0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30ad2:	2300      	movs	r3, #0
   30ad4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30ad6:	2318      	movs	r3, #24
   30ad8:	18fb      	adds	r3, r7, r3
   30ada:	0018      	movs	r0, r3
   30adc:	4b25      	ldr	r3, [pc, #148]	; (30b74 <MQTTDeserialize_connack+0xc0>)
   30ade:	4798      	blx	r3
   30ae0:	0003      	movs	r3, r0
   30ae2:	001a      	movs	r2, r3
   30ae4:	231c      	movs	r3, #28
   30ae6:	18fb      	adds	r3, r7, r3
   30ae8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30aea:	231c      	movs	r3, #28
   30aec:	18fb      	adds	r3, r7, r3
   30aee:	781b      	ldrb	r3, [r3, #0]
   30af0:	220f      	movs	r2, #15
   30af2:	4393      	bics	r3, r2
   30af4:	b2db      	uxtb	r3, r3
   30af6:	2b20      	cmp	r3, #32
   30af8:	d134      	bne.n	30b64 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30afa:	69bb      	ldr	r3, [r7, #24]
   30afc:	2214      	movs	r2, #20
   30afe:	18ba      	adds	r2, r7, r2
   30b00:	0011      	movs	r1, r2
   30b02:	0018      	movs	r0, r3
   30b04:	4b1c      	ldr	r3, [pc, #112]	; (30b78 <MQTTDeserialize_connack+0xc4>)
   30b06:	4798      	blx	r3
   30b08:	0003      	movs	r3, r0
   30b0a:	627b      	str	r3, [r7, #36]	; 0x24
   30b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30b0e:	69bb      	ldr	r3, [r7, #24]
   30b10:	189b      	adds	r3, r3, r2
   30b12:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30b14:	69bb      	ldr	r3, [r7, #24]
   30b16:	697a      	ldr	r2, [r7, #20]
   30b18:	189b      	adds	r3, r3, r2
   30b1a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30b1c:	6a3b      	ldr	r3, [r7, #32]
   30b1e:	69ba      	ldr	r2, [r7, #24]
   30b20:	1a9b      	subs	r3, r3, r2
   30b22:	2b01      	cmp	r3, #1
   30b24:	dd20      	ble.n	30b68 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30b26:	2318      	movs	r3, #24
   30b28:	18fb      	adds	r3, r7, r3
   30b2a:	0018      	movs	r0, r3
   30b2c:	4b11      	ldr	r3, [pc, #68]	; (30b74 <MQTTDeserialize_connack+0xc0>)
   30b2e:	4798      	blx	r3
   30b30:	0003      	movs	r3, r0
   30b32:	001a      	movs	r2, r3
   30b34:	2310      	movs	r3, #16
   30b36:	18fb      	adds	r3, r7, r3
   30b38:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30b3a:	2310      	movs	r3, #16
   30b3c:	18fb      	adds	r3, r7, r3
   30b3e:	781b      	ldrb	r3, [r3, #0]
   30b40:	061b      	lsls	r3, r3, #24
   30b42:	0fdb      	lsrs	r3, r3, #31
   30b44:	b2db      	uxtb	r3, r3
   30b46:	001a      	movs	r2, r3
   30b48:	68fb      	ldr	r3, [r7, #12]
   30b4a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30b4c:	2318      	movs	r3, #24
   30b4e:	18fb      	adds	r3, r7, r3
   30b50:	0018      	movs	r0, r3
   30b52:	4b08      	ldr	r3, [pc, #32]	; (30b74 <MQTTDeserialize_connack+0xc0>)
   30b54:	4798      	blx	r3
   30b56:	0003      	movs	r3, r0
   30b58:	001a      	movs	r2, r3
   30b5a:	68bb      	ldr	r3, [r7, #8]
   30b5c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30b5e:	2301      	movs	r3, #1
   30b60:	627b      	str	r3, [r7, #36]	; 0x24
   30b62:	e002      	b.n	30b6a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30b64:	46c0      	nop			; (mov r8, r8)
   30b66:	e000      	b.n	30b6a <MQTTDeserialize_connack+0xb6>
		goto exit;
   30b68:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30b6c:	0018      	movs	r0, r3
   30b6e:	46bd      	mov	sp, r7
   30b70:	b00a      	add	sp, #40	; 0x28
   30b72:	bd80      	pop	{r7, pc}
   30b74:	00030ffb 	.word	0x00030ffb
   30b78:	00030f95 	.word	0x00030f95

00030b7c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30b7c:	b580      	push	{r7, lr}
   30b7e:	b088      	sub	sp, #32
   30b80:	af00      	add	r7, sp, #0
   30b82:	60f8      	str	r0, [r7, #12]
   30b84:	60b9      	str	r1, [r7, #8]
   30b86:	1dfb      	adds	r3, r7, #7
   30b88:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30b8a:	2300      	movs	r3, #0
   30b8c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30b8e:	2301      	movs	r3, #1
   30b90:	425b      	negs	r3, r3
   30b92:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30b94:	68fb      	ldr	r3, [r7, #12]
   30b96:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30b98:	68bb      	ldr	r3, [r7, #8]
   30b9a:	2b01      	cmp	r3, #1
   30b9c:	dc03      	bgt.n	30ba6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30b9e:	2302      	movs	r3, #2
   30ba0:	425b      	negs	r3, r3
   30ba2:	61fb      	str	r3, [r7, #28]
		goto exit;
   30ba4:	e029      	b.n	30bfa <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30ba6:	2318      	movs	r3, #24
   30ba8:	18fb      	adds	r3, r7, r3
   30baa:	2200      	movs	r2, #0
   30bac:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30bae:	1dfb      	adds	r3, r7, #7
   30bb0:	781b      	ldrb	r3, [r3, #0]
   30bb2:	220f      	movs	r2, #15
   30bb4:	4013      	ands	r3, r2
   30bb6:	b2da      	uxtb	r2, r3
   30bb8:	2318      	movs	r3, #24
   30bba:	18fb      	adds	r3, r7, r3
   30bbc:	0110      	lsls	r0, r2, #4
   30bbe:	781a      	ldrb	r2, [r3, #0]
   30bc0:	210f      	movs	r1, #15
   30bc2:	400a      	ands	r2, r1
   30bc4:	1c11      	adds	r1, r2, #0
   30bc6:	1c02      	adds	r2, r0, #0
   30bc8:	430a      	orrs	r2, r1
   30bca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30bcc:	2318      	movs	r3, #24
   30bce:	18fb      	adds	r3, r7, r3
   30bd0:	781a      	ldrb	r2, [r3, #0]
   30bd2:	2314      	movs	r3, #20
   30bd4:	18fb      	adds	r3, r7, r3
   30bd6:	0011      	movs	r1, r2
   30bd8:	0018      	movs	r0, r3
   30bda:	4b0a      	ldr	r3, [pc, #40]	; (30c04 <MQTTSerialize_zero+0x88>)
   30bdc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30bde:	697b      	ldr	r3, [r7, #20]
   30be0:	2100      	movs	r1, #0
   30be2:	0018      	movs	r0, r3
   30be4:	4b08      	ldr	r3, [pc, #32]	; (30c08 <MQTTSerialize_zero+0x8c>)
   30be6:	4798      	blx	r3
   30be8:	0002      	movs	r2, r0
   30bea:	697b      	ldr	r3, [r7, #20]
   30bec:	189b      	adds	r3, r3, r2
   30bee:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30bf0:	697b      	ldr	r3, [r7, #20]
   30bf2:	001a      	movs	r2, r3
   30bf4:	68fb      	ldr	r3, [r7, #12]
   30bf6:	1ad3      	subs	r3, r2, r3
   30bf8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30bfa:	69fb      	ldr	r3, [r7, #28]
}
   30bfc:	0018      	movs	r0, r3
   30bfe:	46bd      	mov	sp, r7
   30c00:	b008      	add	sp, #32
   30c02:	bd80      	pop	{r7, pc}
   30c04:	00031027 	.word	0x00031027
   30c08:	00030e0d 	.word	0x00030e0d

00030c0c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30c0c:	b580      	push	{r7, lr}
   30c0e:	b082      	sub	sp, #8
   30c10:	af00      	add	r7, sp, #0
   30c12:	6078      	str	r0, [r7, #4]
   30c14:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30c16:	6839      	ldr	r1, [r7, #0]
   30c18:	687b      	ldr	r3, [r7, #4]
   30c1a:	220e      	movs	r2, #14
   30c1c:	0018      	movs	r0, r3
   30c1e:	4b03      	ldr	r3, [pc, #12]	; (30c2c <MQTTSerialize_disconnect+0x20>)
   30c20:	4798      	blx	r3
   30c22:	0003      	movs	r3, r0
}
   30c24:	0018      	movs	r0, r3
   30c26:	46bd      	mov	sp, r7
   30c28:	b002      	add	sp, #8
   30c2a:	bd80      	pop	{r7, pc}
   30c2c:	00030b7d 	.word	0x00030b7d

00030c30 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30c30:	b580      	push	{r7, lr}
   30c32:	b082      	sub	sp, #8
   30c34:	af00      	add	r7, sp, #0
   30c36:	6078      	str	r0, [r7, #4]
   30c38:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30c3a:	6839      	ldr	r1, [r7, #0]
   30c3c:	687b      	ldr	r3, [r7, #4]
   30c3e:	220c      	movs	r2, #12
   30c40:	0018      	movs	r0, r3
   30c42:	4b03      	ldr	r3, [pc, #12]	; (30c50 <MQTTSerialize_pingreq+0x20>)
   30c44:	4798      	blx	r3
   30c46:	0003      	movs	r3, r0
}
   30c48:	0018      	movs	r0, r3
   30c4a:	46bd      	mov	sp, r7
   30c4c:	b002      	add	sp, #8
   30c4e:	bd80      	pop	{r7, pc}
   30c50:	00030b7d 	.word	0x00030b7d

00030c54 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30c54:	b580      	push	{r7, lr}
   30c56:	b08a      	sub	sp, #40	; 0x28
   30c58:	af00      	add	r7, sp, #0
   30c5a:	60f8      	str	r0, [r7, #12]
   30c5c:	60b9      	str	r1, [r7, #8]
   30c5e:	607a      	str	r2, [r7, #4]
   30c60:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30c62:	2300      	movs	r3, #0
   30c64:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30c68:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30c6a:	2300      	movs	r3, #0
   30c6c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30c6e:	2300      	movs	r3, #0
   30c70:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30c72:	2300      	movs	r3, #0
   30c74:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c76:	2318      	movs	r3, #24
   30c78:	18fb      	adds	r3, r7, r3
   30c7a:	0018      	movs	r0, r3
   30c7c:	4b32      	ldr	r3, [pc, #200]	; (30d48 <MQTTDeserialize_publish+0xf4>)
   30c7e:	4798      	blx	r3
   30c80:	0003      	movs	r3, r0
   30c82:	001a      	movs	r2, r3
   30c84:	231c      	movs	r3, #28
   30c86:	18fb      	adds	r3, r7, r3
   30c88:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30c8a:	231c      	movs	r3, #28
   30c8c:	18fb      	adds	r3, r7, r3
   30c8e:	781b      	ldrb	r3, [r3, #0]
   30c90:	220f      	movs	r2, #15
   30c92:	4393      	bics	r3, r2
   30c94:	b2db      	uxtb	r3, r3
   30c96:	2b30      	cmp	r3, #48	; 0x30
   30c98:	d150      	bne.n	30d3c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30c9a:	231c      	movs	r3, #28
   30c9c:	18fb      	adds	r3, r7, r3
   30c9e:	781b      	ldrb	r3, [r3, #0]
   30ca0:	071b      	lsls	r3, r3, #28
   30ca2:	0fdb      	lsrs	r3, r3, #31
   30ca4:	b2db      	uxtb	r3, r3
   30ca6:	001a      	movs	r2, r3
   30ca8:	68fb      	ldr	r3, [r7, #12]
   30caa:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30cac:	231c      	movs	r3, #28
   30cae:	18fb      	adds	r3, r7, r3
   30cb0:	781b      	ldrb	r3, [r3, #0]
   30cb2:	075b      	lsls	r3, r3, #29
   30cb4:	0f9b      	lsrs	r3, r3, #30
   30cb6:	b2db      	uxtb	r3, r3
   30cb8:	001a      	movs	r2, r3
   30cba:	68bb      	ldr	r3, [r7, #8]
   30cbc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30cbe:	231c      	movs	r3, #28
   30cc0:	18fb      	adds	r3, r7, r3
   30cc2:	781b      	ldrb	r3, [r3, #0]
   30cc4:	07db      	lsls	r3, r3, #31
   30cc6:	0fdb      	lsrs	r3, r3, #31
   30cc8:	b2db      	uxtb	r3, r3
   30cca:	001a      	movs	r2, r3
   30ccc:	687b      	ldr	r3, [r7, #4]
   30cce:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30cd0:	69bb      	ldr	r3, [r7, #24]
   30cd2:	2214      	movs	r2, #20
   30cd4:	18ba      	adds	r2, r7, r2
   30cd6:	0011      	movs	r1, r2
   30cd8:	0018      	movs	r0, r3
   30cda:	4b1c      	ldr	r3, [pc, #112]	; (30d4c <MQTTDeserialize_publish+0xf8>)
   30cdc:	4798      	blx	r3
   30cde:	0003      	movs	r3, r0
   30ce0:	627b      	str	r3, [r7, #36]	; 0x24
   30ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ce4:	69bb      	ldr	r3, [r7, #24]
   30ce6:	189b      	adds	r3, r3, r2
   30ce8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30cea:	69bb      	ldr	r3, [r7, #24]
   30cec:	697a      	ldr	r2, [r7, #20]
   30cee:	189b      	adds	r3, r3, r2
   30cf0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30cf2:	6a3a      	ldr	r2, [r7, #32]
   30cf4:	2318      	movs	r3, #24
   30cf6:	18f9      	adds	r1, r7, r3
   30cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30cfa:	0018      	movs	r0, r3
   30cfc:	4b14      	ldr	r3, [pc, #80]	; (30d50 <MQTTDeserialize_publish+0xfc>)
   30cfe:	4798      	blx	r3
   30d00:	1e03      	subs	r3, r0, #0
   30d02:	d01c      	beq.n	30d3e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30d04:	6a3b      	ldr	r3, [r7, #32]
   30d06:	69ba      	ldr	r2, [r7, #24]
   30d08:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30d0a:	d418      	bmi.n	30d3e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30d0c:	68bb      	ldr	r3, [r7, #8]
   30d0e:	681b      	ldr	r3, [r3, #0]
   30d10:	2b00      	cmp	r3, #0
   30d12:	dd08      	ble.n	30d26 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30d14:	2318      	movs	r3, #24
   30d16:	18fb      	adds	r3, r7, r3
   30d18:	0018      	movs	r0, r3
   30d1a:	4b0e      	ldr	r3, [pc, #56]	; (30d54 <MQTTDeserialize_publish+0x100>)
   30d1c:	4798      	blx	r3
   30d1e:	0003      	movs	r3, r0
   30d20:	b29a      	uxth	r2, r3
   30d22:	683b      	ldr	r3, [r7, #0]
   30d24:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30d26:	6a3b      	ldr	r3, [r7, #32]
   30d28:	69ba      	ldr	r2, [r7, #24]
   30d2a:	1a9a      	subs	r2, r3, r2
   30d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30d2e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30d30:	69ba      	ldr	r2, [r7, #24]
   30d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30d34:	601a      	str	r2, [r3, #0]
	rc = 1;
   30d36:	2301      	movs	r3, #1
   30d38:	627b      	str	r3, [r7, #36]	; 0x24
   30d3a:	e000      	b.n	30d3e <MQTTDeserialize_publish+0xea>
		goto exit;
   30d3c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30d40:	0018      	movs	r0, r3
   30d42:	46bd      	mov	sp, r7
   30d44:	b00a      	add	sp, #40	; 0x28
   30d46:	bd80      	pop	{r7, pc}
   30d48:	00030ffb 	.word	0x00030ffb
   30d4c:	00030f95 	.word	0x00030f95
   30d50:	00031179 	.word	0x00031179
   30d54:	00030fc9 	.word	0x00030fc9

00030d58 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30d58:	b580      	push	{r7, lr}
   30d5a:	b08a      	sub	sp, #40	; 0x28
   30d5c:	af00      	add	r7, sp, #0
   30d5e:	60f8      	str	r0, [r7, #12]
   30d60:	60b9      	str	r1, [r7, #8]
   30d62:	607a      	str	r2, [r7, #4]
   30d64:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30d66:	2300      	movs	r3, #0
   30d68:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30d6a:	683b      	ldr	r3, [r7, #0]
   30d6c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30d6e:	2300      	movs	r3, #0
   30d70:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30d72:	2300      	movs	r3, #0
   30d74:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30d76:	2318      	movs	r3, #24
   30d78:	18fb      	adds	r3, r7, r3
   30d7a:	0018      	movs	r0, r3
   30d7c:	4b20      	ldr	r3, [pc, #128]	; (30e00 <MQTTDeserialize_ack+0xa8>)
   30d7e:	4798      	blx	r3
   30d80:	0003      	movs	r3, r0
   30d82:	001a      	movs	r2, r3
   30d84:	231c      	movs	r3, #28
   30d86:	18fb      	adds	r3, r7, r3
   30d88:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30d8a:	231c      	movs	r3, #28
   30d8c:	18fb      	adds	r3, r7, r3
   30d8e:	781b      	ldrb	r3, [r3, #0]
   30d90:	071b      	lsls	r3, r3, #28
   30d92:	0fdb      	lsrs	r3, r3, #31
   30d94:	b2db      	uxtb	r3, r3
   30d96:	001a      	movs	r2, r3
   30d98:	68bb      	ldr	r3, [r7, #8]
   30d9a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30d9c:	231c      	movs	r3, #28
   30d9e:	18fb      	adds	r3, r7, r3
   30da0:	781b      	ldrb	r3, [r3, #0]
   30da2:	061b      	lsls	r3, r3, #24
   30da4:	0f1b      	lsrs	r3, r3, #28
   30da6:	b2db      	uxtb	r3, r3
   30da8:	001a      	movs	r2, r3
   30daa:	68fb      	ldr	r3, [r7, #12]
   30dac:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30dae:	69bb      	ldr	r3, [r7, #24]
   30db0:	2214      	movs	r2, #20
   30db2:	18ba      	adds	r2, r7, r2
   30db4:	0011      	movs	r1, r2
   30db6:	0018      	movs	r0, r3
   30db8:	4b12      	ldr	r3, [pc, #72]	; (30e04 <MQTTDeserialize_ack+0xac>)
   30dba:	4798      	blx	r3
   30dbc:	0003      	movs	r3, r0
   30dbe:	627b      	str	r3, [r7, #36]	; 0x24
   30dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30dc2:	69bb      	ldr	r3, [r7, #24]
   30dc4:	189b      	adds	r3, r3, r2
   30dc6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30dc8:	69bb      	ldr	r3, [r7, #24]
   30dca:	697a      	ldr	r2, [r7, #20]
   30dcc:	189b      	adds	r3, r3, r2
   30dce:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30dd0:	6a3b      	ldr	r3, [r7, #32]
   30dd2:	69ba      	ldr	r2, [r7, #24]
   30dd4:	1a9b      	subs	r3, r3, r2
   30dd6:	2b01      	cmp	r3, #1
   30dd8:	dd0b      	ble.n	30df2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30dda:	2318      	movs	r3, #24
   30ddc:	18fb      	adds	r3, r7, r3
   30dde:	0018      	movs	r0, r3
   30de0:	4b09      	ldr	r3, [pc, #36]	; (30e08 <MQTTDeserialize_ack+0xb0>)
   30de2:	4798      	blx	r3
   30de4:	0003      	movs	r3, r0
   30de6:	b29a      	uxth	r2, r3
   30de8:	687b      	ldr	r3, [r7, #4]
   30dea:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30dec:	2301      	movs	r3, #1
   30dee:	627b      	str	r3, [r7, #36]	; 0x24
   30df0:	e000      	b.n	30df4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30df2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30df6:	0018      	movs	r0, r3
   30df8:	46bd      	mov	sp, r7
   30dfa:	b00a      	add	sp, #40	; 0x28
   30dfc:	bd80      	pop	{r7, pc}
   30dfe:	46c0      	nop			; (mov r8, r8)
   30e00:	00030ffb 	.word	0x00030ffb
   30e04:	00030f95 	.word	0x00030f95
   30e08:	00030fc9 	.word	0x00030fc9

00030e0c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30e0c:	b580      	push	{r7, lr}
   30e0e:	b084      	sub	sp, #16
   30e10:	af00      	add	r7, sp, #0
   30e12:	6078      	str	r0, [r7, #4]
   30e14:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30e16:	2300      	movs	r3, #0
   30e18:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30e1a:	683b      	ldr	r3, [r7, #0]
   30e1c:	4a17      	ldr	r2, [pc, #92]	; (30e7c <MQTTPacket_encode+0x70>)
   30e1e:	4013      	ands	r3, r2
   30e20:	d504      	bpl.n	30e2c <MQTTPacket_encode+0x20>
   30e22:	3b01      	subs	r3, #1
   30e24:	2280      	movs	r2, #128	; 0x80
   30e26:	4252      	negs	r2, r2
   30e28:	4313      	orrs	r3, r2
   30e2a:	3301      	adds	r3, #1
   30e2c:	001a      	movs	r2, r3
   30e2e:	230b      	movs	r3, #11
   30e30:	18fb      	adds	r3, r7, r3
   30e32:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30e34:	683b      	ldr	r3, [r7, #0]
   30e36:	2b00      	cmp	r3, #0
   30e38:	da00      	bge.n	30e3c <MQTTPacket_encode+0x30>
   30e3a:	337f      	adds	r3, #127	; 0x7f
   30e3c:	11db      	asrs	r3, r3, #7
   30e3e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30e40:	683b      	ldr	r3, [r7, #0]
   30e42:	2b00      	cmp	r3, #0
   30e44:	dd08      	ble.n	30e58 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30e46:	230b      	movs	r3, #11
   30e48:	18fb      	adds	r3, r7, r3
   30e4a:	220b      	movs	r2, #11
   30e4c:	18ba      	adds	r2, r7, r2
   30e4e:	7812      	ldrb	r2, [r2, #0]
   30e50:	2180      	movs	r1, #128	; 0x80
   30e52:	4249      	negs	r1, r1
   30e54:	430a      	orrs	r2, r1
   30e56:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30e58:	68fb      	ldr	r3, [r7, #12]
   30e5a:	1c5a      	adds	r2, r3, #1
   30e5c:	60fa      	str	r2, [r7, #12]
   30e5e:	001a      	movs	r2, r3
   30e60:	687b      	ldr	r3, [r7, #4]
   30e62:	189b      	adds	r3, r3, r2
   30e64:	220b      	movs	r2, #11
   30e66:	18ba      	adds	r2, r7, r2
   30e68:	7812      	ldrb	r2, [r2, #0]
   30e6a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30e6c:	683b      	ldr	r3, [r7, #0]
   30e6e:	2b00      	cmp	r3, #0
   30e70:	dcd3      	bgt.n	30e1a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30e72:	68fb      	ldr	r3, [r7, #12]
}
   30e74:	0018      	movs	r0, r3
   30e76:	46bd      	mov	sp, r7
   30e78:	b004      	add	sp, #16
   30e7a:	bd80      	pop	{r7, pc}
   30e7c:	8000007f 	.word	0x8000007f

00030e80 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30e80:	b580      	push	{r7, lr}
   30e82:	b086      	sub	sp, #24
   30e84:	af00      	add	r7, sp, #0
   30e86:	6078      	str	r0, [r7, #4]
   30e88:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30e8a:	2301      	movs	r3, #1
   30e8c:	617b      	str	r3, [r7, #20]
	int len = 0;
   30e8e:	2300      	movs	r3, #0
   30e90:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30e92:	683b      	ldr	r3, [r7, #0]
   30e94:	2200      	movs	r2, #0
   30e96:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30e98:	2301      	movs	r3, #1
   30e9a:	425b      	negs	r3, r3
   30e9c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30e9e:	693b      	ldr	r3, [r7, #16]
   30ea0:	3301      	adds	r3, #1
   30ea2:	613b      	str	r3, [r7, #16]
   30ea4:	693b      	ldr	r3, [r7, #16]
   30ea6:	2b04      	cmp	r3, #4
   30ea8:	dd03      	ble.n	30eb2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30eaa:	2301      	movs	r3, #1
   30eac:	425b      	negs	r3, r3
   30eae:	60fb      	str	r3, [r7, #12]
			goto exit;
   30eb0:	e022      	b.n	30ef8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30eb2:	230b      	movs	r3, #11
   30eb4:	18fa      	adds	r2, r7, r3
   30eb6:	687b      	ldr	r3, [r7, #4]
   30eb8:	2101      	movs	r1, #1
   30eba:	0010      	movs	r0, r2
   30ebc:	4798      	blx	r3
   30ebe:	0003      	movs	r3, r0
   30ec0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30ec2:	68fb      	ldr	r3, [r7, #12]
   30ec4:	2b01      	cmp	r3, #1
   30ec6:	d116      	bne.n	30ef6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30ec8:	683b      	ldr	r3, [r7, #0]
   30eca:	681a      	ldr	r2, [r3, #0]
   30ecc:	230b      	movs	r3, #11
   30ece:	18fb      	adds	r3, r7, r3
   30ed0:	781b      	ldrb	r3, [r3, #0]
   30ed2:	0019      	movs	r1, r3
   30ed4:	237f      	movs	r3, #127	; 0x7f
   30ed6:	400b      	ands	r3, r1
   30ed8:	6979      	ldr	r1, [r7, #20]
   30eda:	434b      	muls	r3, r1
   30edc:	18d2      	adds	r2, r2, r3
   30ede:	683b      	ldr	r3, [r7, #0]
   30ee0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30ee2:	697b      	ldr	r3, [r7, #20]
   30ee4:	01db      	lsls	r3, r3, #7
   30ee6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30ee8:	230b      	movs	r3, #11
   30eea:	18fb      	adds	r3, r7, r3
   30eec:	781b      	ldrb	r3, [r3, #0]
   30eee:	b25b      	sxtb	r3, r3
   30ef0:	2b00      	cmp	r3, #0
   30ef2:	dbd1      	blt.n	30e98 <MQTTPacket_decode+0x18>
   30ef4:	e000      	b.n	30ef8 <MQTTPacket_decode+0x78>
			goto exit;
   30ef6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30ef8:	693b      	ldr	r3, [r7, #16]
}
   30efa:	0018      	movs	r0, r3
   30efc:	46bd      	mov	sp, r7
   30efe:	b006      	add	sp, #24
   30f00:	bd80      	pop	{r7, pc}
	...

00030f04 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30f04:	b580      	push	{r7, lr}
   30f06:	b082      	sub	sp, #8
   30f08:	af00      	add	r7, sp, #0
   30f0a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30f0c:	687b      	ldr	r3, [r7, #4]
   30f0e:	3301      	adds	r3, #1
   30f10:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30f12:	687b      	ldr	r3, [r7, #4]
   30f14:	2b7f      	cmp	r3, #127	; 0x7f
   30f16:	dc03      	bgt.n	30f20 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30f18:	687b      	ldr	r3, [r7, #4]
   30f1a:	3301      	adds	r3, #1
   30f1c:	607b      	str	r3, [r7, #4]
   30f1e:	e012      	b.n	30f46 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30f20:	687b      	ldr	r3, [r7, #4]
   30f22:	4a0b      	ldr	r2, [pc, #44]	; (30f50 <MQTTPacket_len+0x4c>)
   30f24:	4293      	cmp	r3, r2
   30f26:	dc03      	bgt.n	30f30 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30f28:	687b      	ldr	r3, [r7, #4]
   30f2a:	3302      	adds	r3, #2
   30f2c:	607b      	str	r3, [r7, #4]
   30f2e:	e00a      	b.n	30f46 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30f30:	687b      	ldr	r3, [r7, #4]
   30f32:	4a08      	ldr	r2, [pc, #32]	; (30f54 <MQTTPacket_len+0x50>)
   30f34:	4293      	cmp	r3, r2
   30f36:	dc03      	bgt.n	30f40 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30f38:	687b      	ldr	r3, [r7, #4]
   30f3a:	3303      	adds	r3, #3
   30f3c:	607b      	str	r3, [r7, #4]
   30f3e:	e002      	b.n	30f46 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30f40:	687b      	ldr	r3, [r7, #4]
   30f42:	3304      	adds	r3, #4
   30f44:	607b      	str	r3, [r7, #4]
	return rem_len;
   30f46:	687b      	ldr	r3, [r7, #4]
}
   30f48:	0018      	movs	r0, r3
   30f4a:	46bd      	mov	sp, r7
   30f4c:	b002      	add	sp, #8
   30f4e:	bd80      	pop	{r7, pc}
   30f50:	00003fff 	.word	0x00003fff
   30f54:	001ffffe 	.word	0x001ffffe

00030f58 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30f58:	b580      	push	{r7, lr}
   30f5a:	b084      	sub	sp, #16
   30f5c:	af00      	add	r7, sp, #0
   30f5e:	6078      	str	r0, [r7, #4]
   30f60:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30f62:	2300      	movs	r3, #0
   30f64:	60fb      	str	r3, [r7, #12]
   30f66:	e00a      	b.n	30f7e <bufchar+0x26>
		*c = *bufptr++;
   30f68:	4b09      	ldr	r3, [pc, #36]	; (30f90 <bufchar+0x38>)
   30f6a:	681b      	ldr	r3, [r3, #0]
   30f6c:	1c59      	adds	r1, r3, #1
   30f6e:	4a08      	ldr	r2, [pc, #32]	; (30f90 <bufchar+0x38>)
   30f70:	6011      	str	r1, [r2, #0]
   30f72:	781a      	ldrb	r2, [r3, #0]
   30f74:	687b      	ldr	r3, [r7, #4]
   30f76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30f78:	68fb      	ldr	r3, [r7, #12]
   30f7a:	3301      	adds	r3, #1
   30f7c:	60fb      	str	r3, [r7, #12]
   30f7e:	68fa      	ldr	r2, [r7, #12]
   30f80:	683b      	ldr	r3, [r7, #0]
   30f82:	429a      	cmp	r2, r3
   30f84:	dbf0      	blt.n	30f68 <bufchar+0x10>
	return count;
   30f86:	683b      	ldr	r3, [r7, #0]
}
   30f88:	0018      	movs	r0, r3
   30f8a:	46bd      	mov	sp, r7
   30f8c:	b004      	add	sp, #16
   30f8e:	bd80      	pop	{r7, pc}
   30f90:	200046f4 	.word	0x200046f4

00030f94 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30f94:	b580      	push	{r7, lr}
   30f96:	b082      	sub	sp, #8
   30f98:	af00      	add	r7, sp, #0
   30f9a:	6078      	str	r0, [r7, #4]
   30f9c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30f9e:	4b07      	ldr	r3, [pc, #28]	; (30fbc <MQTTPacket_decodeBuf+0x28>)
   30fa0:	687a      	ldr	r2, [r7, #4]
   30fa2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30fa4:	683a      	ldr	r2, [r7, #0]
   30fa6:	4b06      	ldr	r3, [pc, #24]	; (30fc0 <MQTTPacket_decodeBuf+0x2c>)
   30fa8:	0011      	movs	r1, r2
   30faa:	0018      	movs	r0, r3
   30fac:	4b05      	ldr	r3, [pc, #20]	; (30fc4 <MQTTPacket_decodeBuf+0x30>)
   30fae:	4798      	blx	r3
   30fb0:	0003      	movs	r3, r0
}
   30fb2:	0018      	movs	r0, r3
   30fb4:	46bd      	mov	sp, r7
   30fb6:	b002      	add	sp, #8
   30fb8:	bd80      	pop	{r7, pc}
   30fba:	46c0      	nop			; (mov r8, r8)
   30fbc:	200046f4 	.word	0x200046f4
   30fc0:	00030f59 	.word	0x00030f59
   30fc4:	00030e81 	.word	0x00030e81

00030fc8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30fc8:	b580      	push	{r7, lr}
   30fca:	b084      	sub	sp, #16
   30fcc:	af00      	add	r7, sp, #0
   30fce:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30fd0:	687b      	ldr	r3, [r7, #4]
   30fd2:	681b      	ldr	r3, [r3, #0]
   30fd4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30fd6:	68fb      	ldr	r3, [r7, #12]
   30fd8:	781b      	ldrb	r3, [r3, #0]
   30fda:	021b      	lsls	r3, r3, #8
   30fdc:	68fa      	ldr	r2, [r7, #12]
   30fde:	3201      	adds	r2, #1
   30fe0:	7812      	ldrb	r2, [r2, #0]
   30fe2:	189b      	adds	r3, r3, r2
   30fe4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30fe6:	687b      	ldr	r3, [r7, #4]
   30fe8:	681b      	ldr	r3, [r3, #0]
   30fea:	1c9a      	adds	r2, r3, #2
   30fec:	687b      	ldr	r3, [r7, #4]
   30fee:	601a      	str	r2, [r3, #0]
	return len;
   30ff0:	68bb      	ldr	r3, [r7, #8]
}
   30ff2:	0018      	movs	r0, r3
   30ff4:	46bd      	mov	sp, r7
   30ff6:	b004      	add	sp, #16
   30ff8:	bd80      	pop	{r7, pc}

00030ffa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30ffa:	b580      	push	{r7, lr}
   30ffc:	b084      	sub	sp, #16
   30ffe:	af00      	add	r7, sp, #0
   31000:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   31002:	687b      	ldr	r3, [r7, #4]
   31004:	681a      	ldr	r2, [r3, #0]
   31006:	230f      	movs	r3, #15
   31008:	18fb      	adds	r3, r7, r3
   3100a:	7812      	ldrb	r2, [r2, #0]
   3100c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3100e:	687b      	ldr	r3, [r7, #4]
   31010:	681b      	ldr	r3, [r3, #0]
   31012:	1c5a      	adds	r2, r3, #1
   31014:	687b      	ldr	r3, [r7, #4]
   31016:	601a      	str	r2, [r3, #0]
	return c;
   31018:	230f      	movs	r3, #15
   3101a:	18fb      	adds	r3, r7, r3
   3101c:	781b      	ldrb	r3, [r3, #0]
}
   3101e:	0018      	movs	r0, r3
   31020:	46bd      	mov	sp, r7
   31022:	b004      	add	sp, #16
   31024:	bd80      	pop	{r7, pc}

00031026 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   31026:	b580      	push	{r7, lr}
   31028:	b082      	sub	sp, #8
   3102a:	af00      	add	r7, sp, #0
   3102c:	6078      	str	r0, [r7, #4]
   3102e:	000a      	movs	r2, r1
   31030:	1cfb      	adds	r3, r7, #3
   31032:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   31034:	687b      	ldr	r3, [r7, #4]
   31036:	681b      	ldr	r3, [r3, #0]
   31038:	1cfa      	adds	r2, r7, #3
   3103a:	7812      	ldrb	r2, [r2, #0]
   3103c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3103e:	687b      	ldr	r3, [r7, #4]
   31040:	681b      	ldr	r3, [r3, #0]
   31042:	1c5a      	adds	r2, r3, #1
   31044:	687b      	ldr	r3, [r7, #4]
   31046:	601a      	str	r2, [r3, #0]
}
   31048:	46c0      	nop			; (mov r8, r8)
   3104a:	46bd      	mov	sp, r7
   3104c:	b002      	add	sp, #8
   3104e:	bd80      	pop	{r7, pc}

00031050 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   31050:	b580      	push	{r7, lr}
   31052:	b082      	sub	sp, #8
   31054:	af00      	add	r7, sp, #0
   31056:	6078      	str	r0, [r7, #4]
   31058:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   3105a:	687b      	ldr	r3, [r7, #4]
   3105c:	681a      	ldr	r2, [r3, #0]
   3105e:	683b      	ldr	r3, [r7, #0]
   31060:	2b00      	cmp	r3, #0
   31062:	da00      	bge.n	31066 <writeInt+0x16>
   31064:	33ff      	adds	r3, #255	; 0xff
   31066:	121b      	asrs	r3, r3, #8
   31068:	b2db      	uxtb	r3, r3
   3106a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3106c:	687b      	ldr	r3, [r7, #4]
   3106e:	681b      	ldr	r3, [r3, #0]
   31070:	1c5a      	adds	r2, r3, #1
   31072:	687b      	ldr	r3, [r7, #4]
   31074:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   31076:	687b      	ldr	r3, [r7, #4]
   31078:	681a      	ldr	r2, [r3, #0]
   3107a:	683b      	ldr	r3, [r7, #0]
   3107c:	4908      	ldr	r1, [pc, #32]	; (310a0 <writeInt+0x50>)
   3107e:	400b      	ands	r3, r1
   31080:	d503      	bpl.n	3108a <writeInt+0x3a>
   31082:	3b01      	subs	r3, #1
   31084:	4907      	ldr	r1, [pc, #28]	; (310a4 <writeInt+0x54>)
   31086:	430b      	orrs	r3, r1
   31088:	3301      	adds	r3, #1
   3108a:	b2db      	uxtb	r3, r3
   3108c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   3108e:	687b      	ldr	r3, [r7, #4]
   31090:	681b      	ldr	r3, [r3, #0]
   31092:	1c5a      	adds	r2, r3, #1
   31094:	687b      	ldr	r3, [r7, #4]
   31096:	601a      	str	r2, [r3, #0]
}
   31098:	46c0      	nop			; (mov r8, r8)
   3109a:	46bd      	mov	sp, r7
   3109c:	b002      	add	sp, #8
   3109e:	bd80      	pop	{r7, pc}
   310a0:	800000ff 	.word	0x800000ff
   310a4:	ffffff00 	.word	0xffffff00

000310a8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   310a8:	b580      	push	{r7, lr}
   310aa:	b084      	sub	sp, #16
   310ac:	af00      	add	r7, sp, #0
   310ae:	6078      	str	r0, [r7, #4]
   310b0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   310b2:	683b      	ldr	r3, [r7, #0]
   310b4:	0018      	movs	r0, r3
   310b6:	4b0d      	ldr	r3, [pc, #52]	; (310ec <writeCString+0x44>)
   310b8:	4798      	blx	r3
   310ba:	0003      	movs	r3, r0
   310bc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   310be:	68fa      	ldr	r2, [r7, #12]
   310c0:	687b      	ldr	r3, [r7, #4]
   310c2:	0011      	movs	r1, r2
   310c4:	0018      	movs	r0, r3
   310c6:	4b0a      	ldr	r3, [pc, #40]	; (310f0 <writeCString+0x48>)
   310c8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   310ca:	687b      	ldr	r3, [r7, #4]
   310cc:	681b      	ldr	r3, [r3, #0]
   310ce:	68fa      	ldr	r2, [r7, #12]
   310d0:	6839      	ldr	r1, [r7, #0]
   310d2:	0018      	movs	r0, r3
   310d4:	4b07      	ldr	r3, [pc, #28]	; (310f4 <writeCString+0x4c>)
   310d6:	4798      	blx	r3
	*pptr += len;
   310d8:	687b      	ldr	r3, [r7, #4]
   310da:	681a      	ldr	r2, [r3, #0]
   310dc:	68fb      	ldr	r3, [r7, #12]
   310de:	18d2      	adds	r2, r2, r3
   310e0:	687b      	ldr	r3, [r7, #4]
   310e2:	601a      	str	r2, [r3, #0]
}
   310e4:	46c0      	nop			; (mov r8, r8)
   310e6:	46bd      	mov	sp, r7
   310e8:	b004      	add	sp, #16
   310ea:	bd80      	pop	{r7, pc}
   310ec:	00035aa7 	.word	0x00035aa7
   310f0:	00031051 	.word	0x00031051
   310f4:	000356b9 	.word	0x000356b9

000310f8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   310f8:	b580      	push	{r7, lr}
   310fa:	b084      	sub	sp, #16
   310fc:	af00      	add	r7, sp, #0
   310fe:	60f8      	str	r0, [r7, #12]
   31100:	0038      	movs	r0, r7
   31102:	6001      	str	r1, [r0, #0]
   31104:	6042      	str	r2, [r0, #4]
   31106:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   31108:	003b      	movs	r3, r7
   3110a:	685b      	ldr	r3, [r3, #4]
   3110c:	2b00      	cmp	r3, #0
   3110e:	dd17      	ble.n	31140 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   31110:	003b      	movs	r3, r7
   31112:	685a      	ldr	r2, [r3, #4]
   31114:	68fb      	ldr	r3, [r7, #12]
   31116:	0011      	movs	r1, r2
   31118:	0018      	movs	r0, r3
   3111a:	4b14      	ldr	r3, [pc, #80]	; (3116c <writeMQTTString+0x74>)
   3111c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3111e:	68fb      	ldr	r3, [r7, #12]
   31120:	6818      	ldr	r0, [r3, #0]
   31122:	003b      	movs	r3, r7
   31124:	6899      	ldr	r1, [r3, #8]
   31126:	003b      	movs	r3, r7
   31128:	685b      	ldr	r3, [r3, #4]
   3112a:	001a      	movs	r2, r3
   3112c:	4b10      	ldr	r3, [pc, #64]	; (31170 <writeMQTTString+0x78>)
   3112e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   31130:	68fb      	ldr	r3, [r7, #12]
   31132:	681a      	ldr	r2, [r3, #0]
   31134:	003b      	movs	r3, r7
   31136:	685b      	ldr	r3, [r3, #4]
   31138:	18d2      	adds	r2, r2, r3
   3113a:	68fb      	ldr	r3, [r7, #12]
   3113c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3113e:	e010      	b.n	31162 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   31140:	003b      	movs	r3, r7
   31142:	681b      	ldr	r3, [r3, #0]
   31144:	2b00      	cmp	r3, #0
   31146:	d007      	beq.n	31158 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   31148:	003b      	movs	r3, r7
   3114a:	681a      	ldr	r2, [r3, #0]
   3114c:	68fb      	ldr	r3, [r7, #12]
   3114e:	0011      	movs	r1, r2
   31150:	0018      	movs	r0, r3
   31152:	4b08      	ldr	r3, [pc, #32]	; (31174 <writeMQTTString+0x7c>)
   31154:	4798      	blx	r3
}
   31156:	e004      	b.n	31162 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   31158:	68fb      	ldr	r3, [r7, #12]
   3115a:	2100      	movs	r1, #0
   3115c:	0018      	movs	r0, r3
   3115e:	4b03      	ldr	r3, [pc, #12]	; (3116c <writeMQTTString+0x74>)
   31160:	4798      	blx	r3
}
   31162:	46c0      	nop			; (mov r8, r8)
   31164:	46bd      	mov	sp, r7
   31166:	b004      	add	sp, #16
   31168:	bd80      	pop	{r7, pc}
   3116a:	46c0      	nop			; (mov r8, r8)
   3116c:	00031051 	.word	0x00031051
   31170:	000356b9 	.word	0x000356b9
   31174:	000310a9 	.word	0x000310a9

00031178 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31178:	b580      	push	{r7, lr}
   3117a:	b086      	sub	sp, #24
   3117c:	af00      	add	r7, sp, #0
   3117e:	60f8      	str	r0, [r7, #12]
   31180:	60b9      	str	r1, [r7, #8]
   31182:	607a      	str	r2, [r7, #4]
	int rc = 0;
   31184:	2300      	movs	r3, #0
   31186:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   31188:	687a      	ldr	r2, [r7, #4]
   3118a:	68bb      	ldr	r3, [r7, #8]
   3118c:	681b      	ldr	r3, [r3, #0]
   3118e:	1ad3      	subs	r3, r2, r3
   31190:	2b01      	cmp	r3, #1
   31192:	dd1b      	ble.n	311cc <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   31194:	68bb      	ldr	r3, [r7, #8]
   31196:	0018      	movs	r0, r3
   31198:	4b10      	ldr	r3, [pc, #64]	; (311dc <readMQTTLenString+0x64>)
   3119a:	4798      	blx	r3
   3119c:	0002      	movs	r2, r0
   3119e:	68fb      	ldr	r3, [r7, #12]
   311a0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   311a2:	68bb      	ldr	r3, [r7, #8]
   311a4:	681a      	ldr	r2, [r3, #0]
   311a6:	68fb      	ldr	r3, [r7, #12]
   311a8:	685b      	ldr	r3, [r3, #4]
   311aa:	18d2      	adds	r2, r2, r3
   311ac:	687b      	ldr	r3, [r7, #4]
   311ae:	429a      	cmp	r2, r3
   311b0:	d80c      	bhi.n	311cc <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   311b2:	68bb      	ldr	r3, [r7, #8]
   311b4:	681a      	ldr	r2, [r3, #0]
   311b6:	68fb      	ldr	r3, [r7, #12]
   311b8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   311ba:	68bb      	ldr	r3, [r7, #8]
   311bc:	681a      	ldr	r2, [r3, #0]
   311be:	68fb      	ldr	r3, [r7, #12]
   311c0:	685b      	ldr	r3, [r3, #4]
   311c2:	18d2      	adds	r2, r2, r3
   311c4:	68bb      	ldr	r3, [r7, #8]
   311c6:	601a      	str	r2, [r3, #0]
			rc = 1;
   311c8:	2301      	movs	r3, #1
   311ca:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   311cc:	68fb      	ldr	r3, [r7, #12]
   311ce:	2200      	movs	r2, #0
   311d0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   311d2:	697b      	ldr	r3, [r7, #20]
}
   311d4:	0018      	movs	r0, r3
   311d6:	46bd      	mov	sp, r7
   311d8:	b006      	add	sp, #24
   311da:	bd80      	pop	{r7, pc}
   311dc:	00030fc9 	.word	0x00030fc9

000311e0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   311e0:	b580      	push	{r7, lr}
   311e2:	b086      	sub	sp, #24
   311e4:	af00      	add	r7, sp, #0
   311e6:	1d3b      	adds	r3, r7, #4
   311e8:	6018      	str	r0, [r3, #0]
   311ea:	6059      	str	r1, [r3, #4]
   311ec:	609a      	str	r2, [r3, #8]
	int rc = 0;
   311ee:	2300      	movs	r3, #0
   311f0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   311f2:	1d3b      	adds	r3, r7, #4
   311f4:	681b      	ldr	r3, [r3, #0]
   311f6:	2b00      	cmp	r3, #0
   311f8:	d007      	beq.n	3120a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   311fa:	1d3b      	adds	r3, r7, #4
   311fc:	681b      	ldr	r3, [r3, #0]
   311fe:	0018      	movs	r0, r3
   31200:	4b06      	ldr	r3, [pc, #24]	; (3121c <MQTTstrlen+0x3c>)
   31202:	4798      	blx	r3
   31204:	0003      	movs	r3, r0
   31206:	617b      	str	r3, [r7, #20]
   31208:	e002      	b.n	31210 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3120a:	1d3b      	adds	r3, r7, #4
   3120c:	685b      	ldr	r3, [r3, #4]
   3120e:	617b      	str	r3, [r7, #20]
	return rc;
   31210:	697b      	ldr	r3, [r7, #20]
}
   31212:	0018      	movs	r0, r3
   31214:	46bd      	mov	sp, r7
   31216:	b006      	add	sp, #24
   31218:	bd80      	pop	{r7, pc}
   3121a:	46c0      	nop			; (mov r8, r8)
   3121c:	00035aa7 	.word	0x00035aa7

00031220 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   31220:	b580      	push	{r7, lr}
   31222:	b086      	sub	sp, #24
   31224:	af00      	add	r7, sp, #0
   31226:	6078      	str	r0, [r7, #4]
   31228:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3122a:	2300      	movs	r3, #0
   3122c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3122e:	2300      	movs	r3, #0
   31230:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   31232:	687b      	ldr	r3, [r7, #4]
   31234:	681b      	ldr	r3, [r3, #0]
   31236:	2b00      	cmp	r3, #0
   31238:	d00a      	beq.n	31250 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3123a:	687b      	ldr	r3, [r7, #4]
   3123c:	681b      	ldr	r3, [r3, #0]
   3123e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31240:	687b      	ldr	r3, [r7, #4]
   31242:	681b      	ldr	r3, [r3, #0]
   31244:	0018      	movs	r0, r3
   31246:	4b12      	ldr	r3, [pc, #72]	; (31290 <MQTTPacket_equals+0x70>)
   31248:	4798      	blx	r3
   3124a:	0003      	movs	r3, r0
   3124c:	617b      	str	r3, [r7, #20]
   3124e:	e005      	b.n	3125c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31250:	687b      	ldr	r3, [r7, #4]
   31252:	689b      	ldr	r3, [r3, #8]
   31254:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   31256:	687b      	ldr	r3, [r7, #4]
   31258:	685b      	ldr	r3, [r3, #4]
   3125a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3125c:	683b      	ldr	r3, [r7, #0]
   3125e:	0018      	movs	r0, r3
   31260:	4b0b      	ldr	r3, [pc, #44]	; (31290 <MQTTPacket_equals+0x70>)
   31262:	4798      	blx	r3
   31264:	0003      	movs	r3, r0
   31266:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   31268:	697a      	ldr	r2, [r7, #20]
   3126a:	68fb      	ldr	r3, [r7, #12]
   3126c:	429a      	cmp	r2, r3
   3126e:	d109      	bne.n	31284 <MQTTPacket_equals+0x64>
   31270:	697a      	ldr	r2, [r7, #20]
   31272:	6839      	ldr	r1, [r7, #0]
   31274:	693b      	ldr	r3, [r7, #16]
   31276:	0018      	movs	r0, r3
   31278:	4b06      	ldr	r3, [pc, #24]	; (31294 <MQTTPacket_equals+0x74>)
   3127a:	4798      	blx	r3
   3127c:	1e03      	subs	r3, r0, #0
   3127e:	d101      	bne.n	31284 <MQTTPacket_equals+0x64>
   31280:	2301      	movs	r3, #1
   31282:	e000      	b.n	31286 <MQTTPacket_equals+0x66>
   31284:	2300      	movs	r3, #0
}
   31286:	0018      	movs	r0, r3
   31288:	46bd      	mov	sp, r7
   3128a:	b006      	add	sp, #24
   3128c:	bd80      	pop	{r7, pc}
   3128e:	46c0      	nop			; (mov r8, r8)
   31290:	00035aa7 	.word	0x00035aa7
   31294:	00035ab5 	.word	0x00035ab5

00031298 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   31298:	b580      	push	{r7, lr}
   3129a:	b086      	sub	sp, #24
   3129c:	af00      	add	r7, sp, #0
   3129e:	60f8      	str	r0, [r7, #12]
   312a0:	0038      	movs	r0, r7
   312a2:	6001      	str	r1, [r0, #0]
   312a4:	6042      	str	r2, [r0, #4]
   312a6:	6083      	str	r3, [r0, #8]
	int len = 0;
   312a8:	2300      	movs	r3, #0
   312aa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   312ac:	003b      	movs	r3, r7
   312ae:	6818      	ldr	r0, [r3, #0]
   312b0:	6859      	ldr	r1, [r3, #4]
   312b2:	689a      	ldr	r2, [r3, #8]
   312b4:	4b09      	ldr	r3, [pc, #36]	; (312dc <MQTTSerialize_publishLength+0x44>)
   312b6:	4798      	blx	r3
   312b8:	0003      	movs	r3, r0
   312ba:	1c9a      	adds	r2, r3, #2
   312bc:	6a3b      	ldr	r3, [r7, #32]
   312be:	18d3      	adds	r3, r2, r3
   312c0:	697a      	ldr	r2, [r7, #20]
   312c2:	18d3      	adds	r3, r2, r3
   312c4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   312c6:	68fb      	ldr	r3, [r7, #12]
   312c8:	2b00      	cmp	r3, #0
   312ca:	dd02      	ble.n	312d2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   312cc:	697b      	ldr	r3, [r7, #20]
   312ce:	3302      	adds	r3, #2
   312d0:	617b      	str	r3, [r7, #20]
	return len;
   312d2:	697b      	ldr	r3, [r7, #20]
}
   312d4:	0018      	movs	r0, r3
   312d6:	46bd      	mov	sp, r7
   312d8:	b006      	add	sp, #24
   312da:	bd80      	pop	{r7, pc}
   312dc:	000311e1 	.word	0x000311e1

000312e0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   312e0:	b590      	push	{r4, r7, lr}
   312e2:	b08b      	sub	sp, #44	; 0x2c
   312e4:	af02      	add	r7, sp, #8
   312e6:	60f8      	str	r0, [r7, #12]
   312e8:	60b9      	str	r1, [r7, #8]
   312ea:	603b      	str	r3, [r7, #0]
   312ec:	1dfb      	adds	r3, r7, #7
   312ee:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   312f0:	68fb      	ldr	r3, [r7, #12]
   312f2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   312f4:	2300      	movs	r3, #0
   312f6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   312f8:	2300      	movs	r3, #0
   312fa:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   312fc:	2300      	movs	r3, #0
   312fe:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31300:	2308      	movs	r3, #8
   31302:	2230      	movs	r2, #48	; 0x30
   31304:	4694      	mov	ip, r2
   31306:	44bc      	add	ip, r7
   31308:	4463      	add	r3, ip
   3130a:	6838      	ldr	r0, [r7, #0]
   3130c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3130e:	9200      	str	r2, [sp, #0]
   31310:	6819      	ldr	r1, [r3, #0]
   31312:	685a      	ldr	r2, [r3, #4]
   31314:	689b      	ldr	r3, [r3, #8]
   31316:	4c46      	ldr	r4, [pc, #280]	; (31430 <MQTTSerialize_publish+0x150>)
   31318:	47a0      	blx	r4
   3131a:	0003      	movs	r3, r0
   3131c:	61bb      	str	r3, [r7, #24]
   3131e:	69bb      	ldr	r3, [r7, #24]
   31320:	0018      	movs	r0, r3
   31322:	4b44      	ldr	r3, [pc, #272]	; (31434 <MQTTSerialize_publish+0x154>)
   31324:	4798      	blx	r3
   31326:	0002      	movs	r2, r0
   31328:	68bb      	ldr	r3, [r7, #8]
   3132a:	429a      	cmp	r2, r3
   3132c:	dd03      	ble.n	31336 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3132e:	2302      	movs	r3, #2
   31330:	425b      	negs	r3, r3
   31332:	61fb      	str	r3, [r7, #28]
		goto exit;
   31334:	e077      	b.n	31426 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   31336:	2310      	movs	r3, #16
   31338:	18fb      	adds	r3, r7, r3
   3133a:	781a      	ldrb	r2, [r3, #0]
   3133c:	210f      	movs	r1, #15
   3133e:	400a      	ands	r2, r1
   31340:	1c11      	adds	r1, r2, #0
   31342:	2230      	movs	r2, #48	; 0x30
   31344:	430a      	orrs	r2, r1
   31346:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31348:	1dfb      	adds	r3, r7, #7
   3134a:	781b      	ldrb	r3, [r3, #0]
   3134c:	2201      	movs	r2, #1
   3134e:	4013      	ands	r3, r2
   31350:	b2da      	uxtb	r2, r3
   31352:	2310      	movs	r3, #16
   31354:	18fb      	adds	r3, r7, r3
   31356:	2101      	movs	r1, #1
   31358:	400a      	ands	r2, r1
   3135a:	00d0      	lsls	r0, r2, #3
   3135c:	781a      	ldrb	r2, [r3, #0]
   3135e:	2108      	movs	r1, #8
   31360:	438a      	bics	r2, r1
   31362:	1c11      	adds	r1, r2, #0
   31364:	1c02      	adds	r2, r0, #0
   31366:	430a      	orrs	r2, r1
   31368:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   3136a:	683b      	ldr	r3, [r7, #0]
   3136c:	b2db      	uxtb	r3, r3
   3136e:	1c1a      	adds	r2, r3, #0
   31370:	2303      	movs	r3, #3
   31372:	4013      	ands	r3, r2
   31374:	b2da      	uxtb	r2, r3
   31376:	2310      	movs	r3, #16
   31378:	18fb      	adds	r3, r7, r3
   3137a:	2103      	movs	r1, #3
   3137c:	400a      	ands	r2, r1
   3137e:	1890      	adds	r0, r2, r2
   31380:	781a      	ldrb	r2, [r3, #0]
   31382:	2106      	movs	r1, #6
   31384:	438a      	bics	r2, r1
   31386:	1c11      	adds	r1, r2, #0
   31388:	1c02      	adds	r2, r0, #0
   3138a:	430a      	orrs	r2, r1
   3138c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3138e:	2330      	movs	r3, #48	; 0x30
   31390:	18fb      	adds	r3, r7, r3
   31392:	781b      	ldrb	r3, [r3, #0]
   31394:	2201      	movs	r2, #1
   31396:	4013      	ands	r3, r2
   31398:	b2da      	uxtb	r2, r3
   3139a:	2310      	movs	r3, #16
   3139c:	18fb      	adds	r3, r7, r3
   3139e:	2101      	movs	r1, #1
   313a0:	400a      	ands	r2, r1
   313a2:	0010      	movs	r0, r2
   313a4:	781a      	ldrb	r2, [r3, #0]
   313a6:	2101      	movs	r1, #1
   313a8:	438a      	bics	r2, r1
   313aa:	1c11      	adds	r1, r2, #0
   313ac:	1c02      	adds	r2, r0, #0
   313ae:	430a      	orrs	r2, r1
   313b0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   313b2:	2310      	movs	r3, #16
   313b4:	18fb      	adds	r3, r7, r3
   313b6:	781a      	ldrb	r2, [r3, #0]
   313b8:	2314      	movs	r3, #20
   313ba:	18fb      	adds	r3, r7, r3
   313bc:	0011      	movs	r1, r2
   313be:	0018      	movs	r0, r3
   313c0:	4b1d      	ldr	r3, [pc, #116]	; (31438 <MQTTSerialize_publish+0x158>)
   313c2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   313c4:	697b      	ldr	r3, [r7, #20]
   313c6:	69ba      	ldr	r2, [r7, #24]
   313c8:	0011      	movs	r1, r2
   313ca:	0018      	movs	r0, r3
   313cc:	4b1b      	ldr	r3, [pc, #108]	; (3143c <MQTTSerialize_publish+0x15c>)
   313ce:	4798      	blx	r3
   313d0:	0002      	movs	r2, r0
   313d2:	697b      	ldr	r3, [r7, #20]
   313d4:	189b      	adds	r3, r3, r2
   313d6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   313d8:	2308      	movs	r3, #8
   313da:	2230      	movs	r2, #48	; 0x30
   313dc:	4694      	mov	ip, r2
   313de:	44bc      	add	ip, r7
   313e0:	4463      	add	r3, ip
   313e2:	2214      	movs	r2, #20
   313e4:	18b8      	adds	r0, r7, r2
   313e6:	6819      	ldr	r1, [r3, #0]
   313e8:	685a      	ldr	r2, [r3, #4]
   313ea:	689b      	ldr	r3, [r3, #8]
   313ec:	4c14      	ldr	r4, [pc, #80]	; (31440 <MQTTSerialize_publish+0x160>)
   313ee:	47a0      	blx	r4

	if (qos > 0)
   313f0:	683b      	ldr	r3, [r7, #0]
   313f2:	2b00      	cmp	r3, #0
   313f4:	dd08      	ble.n	31408 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   313f6:	2334      	movs	r3, #52	; 0x34
   313f8:	18fb      	adds	r3, r7, r3
   313fa:	881a      	ldrh	r2, [r3, #0]
   313fc:	2314      	movs	r3, #20
   313fe:	18fb      	adds	r3, r7, r3
   31400:	0011      	movs	r1, r2
   31402:	0018      	movs	r0, r3
   31404:	4b0f      	ldr	r3, [pc, #60]	; (31444 <MQTTSerialize_publish+0x164>)
   31406:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   31408:	697b      	ldr	r3, [r7, #20]
   3140a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3140c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3140e:	0018      	movs	r0, r3
   31410:	4b0d      	ldr	r3, [pc, #52]	; (31448 <MQTTSerialize_publish+0x168>)
   31412:	4798      	blx	r3
	ptr += payloadlen;
   31414:	697a      	ldr	r2, [r7, #20]
   31416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31418:	18d3      	adds	r3, r2, r3
   3141a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3141c:	697b      	ldr	r3, [r7, #20]
   3141e:	001a      	movs	r2, r3
   31420:	68fb      	ldr	r3, [r7, #12]
   31422:	1ad3      	subs	r3, r2, r3
   31424:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31426:	69fb      	ldr	r3, [r7, #28]
}
   31428:	0018      	movs	r0, r3
   3142a:	46bd      	mov	sp, r7
   3142c:	b009      	add	sp, #36	; 0x24
   3142e:	bd90      	pop	{r4, r7, pc}
   31430:	00031299 	.word	0x00031299
   31434:	00030f05 	.word	0x00030f05
   31438:	00031027 	.word	0x00031027
   3143c:	00030e0d 	.word	0x00030e0d
   31440:	000310f9 	.word	0x000310f9
   31444:	00031051 	.word	0x00031051
   31448:	000356b9 	.word	0x000356b9

0003144c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3144c:	b580      	push	{r7, lr}
   3144e:	b088      	sub	sp, #32
   31450:	af00      	add	r7, sp, #0
   31452:	60f8      	str	r0, [r7, #12]
   31454:	60b9      	str	r1, [r7, #8]
   31456:	0019      	movs	r1, r3
   31458:	1dfb      	adds	r3, r7, #7
   3145a:	701a      	strb	r2, [r3, #0]
   3145c:	1dbb      	adds	r3, r7, #6
   3145e:	1c0a      	adds	r2, r1, #0
   31460:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   31462:	2300      	movs	r3, #0
   31464:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31466:	2300      	movs	r3, #0
   31468:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   3146a:	68fb      	ldr	r3, [r7, #12]
   3146c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3146e:	68bb      	ldr	r3, [r7, #8]
   31470:	2b03      	cmp	r3, #3
   31472:	dc03      	bgt.n	3147c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31474:	2302      	movs	r3, #2
   31476:	425b      	negs	r3, r3
   31478:	61fb      	str	r3, [r7, #28]
		goto exit;
   3147a:	e055      	b.n	31528 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   3147c:	1dfb      	adds	r3, r7, #7
   3147e:	781b      	ldrb	r3, [r3, #0]
   31480:	220f      	movs	r2, #15
   31482:	4013      	ands	r3, r2
   31484:	b2da      	uxtb	r2, r3
   31486:	2318      	movs	r3, #24
   31488:	18fb      	adds	r3, r7, r3
   3148a:	0110      	lsls	r0, r2, #4
   3148c:	781a      	ldrb	r2, [r3, #0]
   3148e:	210f      	movs	r1, #15
   31490:	400a      	ands	r2, r1
   31492:	1c11      	adds	r1, r2, #0
   31494:	1c02      	adds	r2, r0, #0
   31496:	430a      	orrs	r2, r1
   31498:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3149a:	1dbb      	adds	r3, r7, #6
   3149c:	781b      	ldrb	r3, [r3, #0]
   3149e:	2201      	movs	r2, #1
   314a0:	4013      	ands	r3, r2
   314a2:	b2da      	uxtb	r2, r3
   314a4:	2318      	movs	r3, #24
   314a6:	18fb      	adds	r3, r7, r3
   314a8:	2101      	movs	r1, #1
   314aa:	400a      	ands	r2, r1
   314ac:	00d0      	lsls	r0, r2, #3
   314ae:	781a      	ldrb	r2, [r3, #0]
   314b0:	2108      	movs	r1, #8
   314b2:	438a      	bics	r2, r1
   314b4:	1c11      	adds	r1, r2, #0
   314b6:	1c02      	adds	r2, r0, #0
   314b8:	430a      	orrs	r2, r1
   314ba:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   314bc:	1dfb      	adds	r3, r7, #7
   314be:	781b      	ldrb	r3, [r3, #0]
   314c0:	3b06      	subs	r3, #6
   314c2:	425a      	negs	r2, r3
   314c4:	4153      	adcs	r3, r2
   314c6:	b2db      	uxtb	r3, r3
   314c8:	1c1a      	adds	r2, r3, #0
   314ca:	2303      	movs	r3, #3
   314cc:	4013      	ands	r3, r2
   314ce:	b2da      	uxtb	r2, r3
   314d0:	2318      	movs	r3, #24
   314d2:	18fb      	adds	r3, r7, r3
   314d4:	2103      	movs	r1, #3
   314d6:	400a      	ands	r2, r1
   314d8:	1890      	adds	r0, r2, r2
   314da:	781a      	ldrb	r2, [r3, #0]
   314dc:	2106      	movs	r1, #6
   314de:	438a      	bics	r2, r1
   314e0:	1c11      	adds	r1, r2, #0
   314e2:	1c02      	adds	r2, r0, #0
   314e4:	430a      	orrs	r2, r1
   314e6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   314e8:	2318      	movs	r3, #24
   314ea:	18fb      	adds	r3, r7, r3
   314ec:	781a      	ldrb	r2, [r3, #0]
   314ee:	2314      	movs	r3, #20
   314f0:	18fb      	adds	r3, r7, r3
   314f2:	0011      	movs	r1, r2
   314f4:	0018      	movs	r0, r3
   314f6:	4b0f      	ldr	r3, [pc, #60]	; (31534 <MQTTSerialize_ack+0xe8>)
   314f8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   314fa:	697b      	ldr	r3, [r7, #20]
   314fc:	2102      	movs	r1, #2
   314fe:	0018      	movs	r0, r3
   31500:	4b0d      	ldr	r3, [pc, #52]	; (31538 <MQTTSerialize_ack+0xec>)
   31502:	4798      	blx	r3
   31504:	0002      	movs	r2, r0
   31506:	697b      	ldr	r3, [r7, #20]
   31508:	189b      	adds	r3, r3, r2
   3150a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3150c:	2328      	movs	r3, #40	; 0x28
   3150e:	18fb      	adds	r3, r7, r3
   31510:	881a      	ldrh	r2, [r3, #0]
   31512:	2314      	movs	r3, #20
   31514:	18fb      	adds	r3, r7, r3
   31516:	0011      	movs	r1, r2
   31518:	0018      	movs	r0, r3
   3151a:	4b08      	ldr	r3, [pc, #32]	; (3153c <MQTTSerialize_ack+0xf0>)
   3151c:	4798      	blx	r3
	rc = ptr - buf;
   3151e:	697b      	ldr	r3, [r7, #20]
   31520:	001a      	movs	r2, r3
   31522:	68fb      	ldr	r3, [r7, #12]
   31524:	1ad3      	subs	r3, r2, r3
   31526:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31528:	69fb      	ldr	r3, [r7, #28]
}
   3152a:	0018      	movs	r0, r3
   3152c:	46bd      	mov	sp, r7
   3152e:	b008      	add	sp, #32
   31530:	bd80      	pop	{r7, pc}
   31532:	46c0      	nop			; (mov r8, r8)
   31534:	00031027 	.word	0x00031027
   31538:	00030e0d 	.word	0x00030e0d
   3153c:	00031051 	.word	0x00031051

00031540 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31540:	b580      	push	{r7, lr}
   31542:	b084      	sub	sp, #16
   31544:	af00      	add	r7, sp, #0
   31546:	6078      	str	r0, [r7, #4]
   31548:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3154a:	2302      	movs	r3, #2
   3154c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3154e:	2300      	movs	r3, #0
   31550:	60fb      	str	r3, [r7, #12]
   31552:	e014      	b.n	3157e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   31554:	68fa      	ldr	r2, [r7, #12]
   31556:	0013      	movs	r3, r2
   31558:	005b      	lsls	r3, r3, #1
   3155a:	189b      	adds	r3, r3, r2
   3155c:	009b      	lsls	r3, r3, #2
   3155e:	001a      	movs	r2, r3
   31560:	683b      	ldr	r3, [r7, #0]
   31562:	189b      	adds	r3, r3, r2
   31564:	6818      	ldr	r0, [r3, #0]
   31566:	6859      	ldr	r1, [r3, #4]
   31568:	689a      	ldr	r2, [r3, #8]
   3156a:	4b09      	ldr	r3, [pc, #36]	; (31590 <MQTTSerialize_subscribeLength+0x50>)
   3156c:	4798      	blx	r3
   3156e:	0003      	movs	r3, r0
   31570:	3303      	adds	r3, #3
   31572:	68ba      	ldr	r2, [r7, #8]
   31574:	18d3      	adds	r3, r2, r3
   31576:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31578:	68fb      	ldr	r3, [r7, #12]
   3157a:	3301      	adds	r3, #1
   3157c:	60fb      	str	r3, [r7, #12]
   3157e:	68fa      	ldr	r2, [r7, #12]
   31580:	687b      	ldr	r3, [r7, #4]
   31582:	429a      	cmp	r2, r3
   31584:	dbe6      	blt.n	31554 <MQTTSerialize_subscribeLength+0x14>
	return len;
   31586:	68bb      	ldr	r3, [r7, #8]
}
   31588:	0018      	movs	r0, r3
   3158a:	46bd      	mov	sp, r7
   3158c:	b004      	add	sp, #16
   3158e:	bd80      	pop	{r7, pc}
   31590:	000311e1 	.word	0x000311e1

00031594 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   31594:	b590      	push	{r4, r7, lr}
   31596:	b08b      	sub	sp, #44	; 0x2c
   31598:	af00      	add	r7, sp, #0
   3159a:	60f8      	str	r0, [r7, #12]
   3159c:	60b9      	str	r1, [r7, #8]
   3159e:	0019      	movs	r1, r3
   315a0:	1dfb      	adds	r3, r7, #7
   315a2:	701a      	strb	r2, [r3, #0]
   315a4:	1d3b      	adds	r3, r7, #4
   315a6:	1c0a      	adds	r2, r1, #0
   315a8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   315aa:	68fb      	ldr	r3, [r7, #12]
   315ac:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   315ae:	2300      	movs	r3, #0
   315b0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   315b2:	2300      	movs	r3, #0
   315b4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   315b6:	2300      	movs	r3, #0
   315b8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   315ba:	2300      	movs	r3, #0
   315bc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   315be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   315c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   315c2:	0011      	movs	r1, r2
   315c4:	0018      	movs	r0, r3
   315c6:	4b41      	ldr	r3, [pc, #260]	; (316cc <MQTTSerialize_subscribe+0x138>)
   315c8:	4798      	blx	r3
   315ca:	0003      	movs	r3, r0
   315cc:	61fb      	str	r3, [r7, #28]
   315ce:	69fb      	ldr	r3, [r7, #28]
   315d0:	0018      	movs	r0, r3
   315d2:	4b3f      	ldr	r3, [pc, #252]	; (316d0 <MQTTSerialize_subscribe+0x13c>)
   315d4:	4798      	blx	r3
   315d6:	0002      	movs	r2, r0
   315d8:	68bb      	ldr	r3, [r7, #8]
   315da:	429a      	cmp	r2, r3
   315dc:	dd03      	ble.n	315e6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   315de:	2302      	movs	r3, #2
   315e0:	425b      	negs	r3, r3
   315e2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   315e4:	e06c      	b.n	316c0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   315e6:	2314      	movs	r3, #20
   315e8:	18fb      	adds	r3, r7, r3
   315ea:	2200      	movs	r2, #0
   315ec:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   315ee:	2314      	movs	r3, #20
   315f0:	18fb      	adds	r3, r7, r3
   315f2:	781a      	ldrb	r2, [r3, #0]
   315f4:	210f      	movs	r1, #15
   315f6:	400a      	ands	r2, r1
   315f8:	1c11      	adds	r1, r2, #0
   315fa:	2280      	movs	r2, #128	; 0x80
   315fc:	4252      	negs	r2, r2
   315fe:	430a      	orrs	r2, r1
   31600:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31602:	1dfb      	adds	r3, r7, #7
   31604:	781b      	ldrb	r3, [r3, #0]
   31606:	2201      	movs	r2, #1
   31608:	4013      	ands	r3, r2
   3160a:	b2da      	uxtb	r2, r3
   3160c:	2314      	movs	r3, #20
   3160e:	18fb      	adds	r3, r7, r3
   31610:	2101      	movs	r1, #1
   31612:	400a      	ands	r2, r1
   31614:	00d0      	lsls	r0, r2, #3
   31616:	781a      	ldrb	r2, [r3, #0]
   31618:	2108      	movs	r1, #8
   3161a:	438a      	bics	r2, r1
   3161c:	1c11      	adds	r1, r2, #0
   3161e:	1c02      	adds	r2, r0, #0
   31620:	430a      	orrs	r2, r1
   31622:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   31624:	2314      	movs	r3, #20
   31626:	18fb      	adds	r3, r7, r3
   31628:	781a      	ldrb	r2, [r3, #0]
   3162a:	2106      	movs	r1, #6
   3162c:	438a      	bics	r2, r1
   3162e:	1c11      	adds	r1, r2, #0
   31630:	2202      	movs	r2, #2
   31632:	430a      	orrs	r2, r1
   31634:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31636:	2314      	movs	r3, #20
   31638:	18fb      	adds	r3, r7, r3
   3163a:	781a      	ldrb	r2, [r3, #0]
   3163c:	2318      	movs	r3, #24
   3163e:	18fb      	adds	r3, r7, r3
   31640:	0011      	movs	r1, r2
   31642:	0018      	movs	r0, r3
   31644:	4b23      	ldr	r3, [pc, #140]	; (316d4 <MQTTSerialize_subscribe+0x140>)
   31646:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31648:	69bb      	ldr	r3, [r7, #24]
   3164a:	69fa      	ldr	r2, [r7, #28]
   3164c:	0011      	movs	r1, r2
   3164e:	0018      	movs	r0, r3
   31650:	4b21      	ldr	r3, [pc, #132]	; (316d8 <MQTTSerialize_subscribe+0x144>)
   31652:	4798      	blx	r3
   31654:	0002      	movs	r2, r0
   31656:	69bb      	ldr	r3, [r7, #24]
   31658:	189b      	adds	r3, r3, r2
   3165a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3165c:	1d3b      	adds	r3, r7, #4
   3165e:	881a      	ldrh	r2, [r3, #0]
   31660:	2318      	movs	r3, #24
   31662:	18fb      	adds	r3, r7, r3
   31664:	0011      	movs	r1, r2
   31666:	0018      	movs	r0, r3
   31668:	4b1c      	ldr	r3, [pc, #112]	; (316dc <MQTTSerialize_subscribe+0x148>)
   3166a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   3166c:	2300      	movs	r3, #0
   3166e:	623b      	str	r3, [r7, #32]
   31670:	e01d      	b.n	316ae <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   31672:	6a3a      	ldr	r2, [r7, #32]
   31674:	0013      	movs	r3, r2
   31676:	005b      	lsls	r3, r3, #1
   31678:	189b      	adds	r3, r3, r2
   3167a:	009b      	lsls	r3, r3, #2
   3167c:	001a      	movs	r2, r3
   3167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31680:	189b      	adds	r3, r3, r2
   31682:	2218      	movs	r2, #24
   31684:	18b8      	adds	r0, r7, r2
   31686:	6819      	ldr	r1, [r3, #0]
   31688:	685a      	ldr	r2, [r3, #4]
   3168a:	689b      	ldr	r3, [r3, #8]
   3168c:	4c14      	ldr	r4, [pc, #80]	; (316e0 <MQTTSerialize_subscribe+0x14c>)
   3168e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31690:	6a3b      	ldr	r3, [r7, #32]
   31692:	009b      	lsls	r3, r3, #2
   31694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   31696:	18d3      	adds	r3, r2, r3
   31698:	681b      	ldr	r3, [r3, #0]
   3169a:	b2da      	uxtb	r2, r3
   3169c:	2318      	movs	r3, #24
   3169e:	18fb      	adds	r3, r7, r3
   316a0:	0011      	movs	r1, r2
   316a2:	0018      	movs	r0, r3
   316a4:	4b0b      	ldr	r3, [pc, #44]	; (316d4 <MQTTSerialize_subscribe+0x140>)
   316a6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   316a8:	6a3b      	ldr	r3, [r7, #32]
   316aa:	3301      	adds	r3, #1
   316ac:	623b      	str	r3, [r7, #32]
   316ae:	6a3a      	ldr	r2, [r7, #32]
   316b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   316b2:	429a      	cmp	r2, r3
   316b4:	dbdd      	blt.n	31672 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   316b6:	69bb      	ldr	r3, [r7, #24]
   316b8:	001a      	movs	r2, r3
   316ba:	68fb      	ldr	r3, [r7, #12]
   316bc:	1ad3      	subs	r3, r2, r3
   316be:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   316c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   316c2:	0018      	movs	r0, r3
   316c4:	46bd      	mov	sp, r7
   316c6:	b00b      	add	sp, #44	; 0x2c
   316c8:	bd90      	pop	{r4, r7, pc}
   316ca:	46c0      	nop			; (mov r8, r8)
   316cc:	00031541 	.word	0x00031541
   316d0:	00030f05 	.word	0x00030f05
   316d4:	00031027 	.word	0x00031027
   316d8:	00030e0d 	.word	0x00030e0d
   316dc:	00031051 	.word	0x00031051
   316e0:	000310f9 	.word	0x000310f9

000316e4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   316e4:	b590      	push	{r4, r7, lr}
   316e6:	b08b      	sub	sp, #44	; 0x2c
   316e8:	af00      	add	r7, sp, #0
   316ea:	60f8      	str	r0, [r7, #12]
   316ec:	60b9      	str	r1, [r7, #8]
   316ee:	607a      	str	r2, [r7, #4]
   316f0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   316f2:	2300      	movs	r3, #0
   316f4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   316f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   316f8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   316fa:	2300      	movs	r3, #0
   316fc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   316fe:	2300      	movs	r3, #0
   31700:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31702:	2318      	movs	r3, #24
   31704:	18fb      	adds	r3, r7, r3
   31706:	0018      	movs	r0, r3
   31708:	4b2c      	ldr	r3, [pc, #176]	; (317bc <MQTTDeserialize_suback+0xd8>)
   3170a:	4798      	blx	r3
   3170c:	0003      	movs	r3, r0
   3170e:	001a      	movs	r2, r3
   31710:	231c      	movs	r3, #28
   31712:	18fb      	adds	r3, r7, r3
   31714:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   31716:	231c      	movs	r3, #28
   31718:	18fb      	adds	r3, r7, r3
   3171a:	781b      	ldrb	r3, [r3, #0]
   3171c:	220f      	movs	r2, #15
   3171e:	4393      	bics	r3, r2
   31720:	b2db      	uxtb	r3, r3
   31722:	2b90      	cmp	r3, #144	; 0x90
   31724:	d142      	bne.n	317ac <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31726:	69bb      	ldr	r3, [r7, #24]
   31728:	2214      	movs	r2, #20
   3172a:	18ba      	adds	r2, r7, r2
   3172c:	0011      	movs	r1, r2
   3172e:	0018      	movs	r0, r3
   31730:	4b23      	ldr	r3, [pc, #140]	; (317c0 <MQTTDeserialize_suback+0xdc>)
   31732:	4798      	blx	r3
   31734:	0003      	movs	r3, r0
   31736:	627b      	str	r3, [r7, #36]	; 0x24
   31738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3173a:	69bb      	ldr	r3, [r7, #24]
   3173c:	189b      	adds	r3, r3, r2
   3173e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31740:	69bb      	ldr	r3, [r7, #24]
   31742:	697a      	ldr	r2, [r7, #20]
   31744:	189b      	adds	r3, r3, r2
   31746:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31748:	6a3b      	ldr	r3, [r7, #32]
   3174a:	69ba      	ldr	r2, [r7, #24]
   3174c:	1a9b      	subs	r3, r3, r2
   3174e:	2b01      	cmp	r3, #1
   31750:	dd2e      	ble.n	317b0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   31752:	2318      	movs	r3, #24
   31754:	18fb      	adds	r3, r7, r3
   31756:	0018      	movs	r0, r3
   31758:	4b1a      	ldr	r3, [pc, #104]	; (317c4 <MQTTDeserialize_suback+0xe0>)
   3175a:	4798      	blx	r3
   3175c:	0003      	movs	r3, r0
   3175e:	b29a      	uxth	r2, r3
   31760:	68fb      	ldr	r3, [r7, #12]
   31762:	801a      	strh	r2, [r3, #0]

	*count = 0;
   31764:	687b      	ldr	r3, [r7, #4]
   31766:	2200      	movs	r2, #0
   31768:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   3176a:	e018      	b.n	3179e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   3176c:	687b      	ldr	r3, [r7, #4]
   3176e:	681a      	ldr	r2, [r3, #0]
   31770:	68bb      	ldr	r3, [r7, #8]
   31772:	429a      	cmp	r2, r3
   31774:	dd03      	ble.n	3177e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   31776:	2301      	movs	r3, #1
   31778:	425b      	negs	r3, r3
   3177a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   3177c:	e019      	b.n	317b2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3177e:	687b      	ldr	r3, [r7, #4]
   31780:	681a      	ldr	r2, [r3, #0]
   31782:	1c51      	adds	r1, r2, #1
   31784:	687b      	ldr	r3, [r7, #4]
   31786:	6019      	str	r1, [r3, #0]
   31788:	0013      	movs	r3, r2
   3178a:	009b      	lsls	r3, r3, #2
   3178c:	683a      	ldr	r2, [r7, #0]
   3178e:	18d4      	adds	r4, r2, r3
   31790:	2318      	movs	r3, #24
   31792:	18fb      	adds	r3, r7, r3
   31794:	0018      	movs	r0, r3
   31796:	4b09      	ldr	r3, [pc, #36]	; (317bc <MQTTDeserialize_suback+0xd8>)
   31798:	4798      	blx	r3
   3179a:	0003      	movs	r3, r0
   3179c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3179e:	69ba      	ldr	r2, [r7, #24]
   317a0:	6a3b      	ldr	r3, [r7, #32]
   317a2:	429a      	cmp	r2, r3
   317a4:	d3e2      	bcc.n	3176c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   317a6:	2301      	movs	r3, #1
   317a8:	627b      	str	r3, [r7, #36]	; 0x24
   317aa:	e002      	b.n	317b2 <MQTTDeserialize_suback+0xce>
		goto exit;
   317ac:	46c0      	nop			; (mov r8, r8)
   317ae:	e000      	b.n	317b2 <MQTTDeserialize_suback+0xce>
		goto exit;
   317b0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   317b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   317b4:	0018      	movs	r0, r3
   317b6:	46bd      	mov	sp, r7
   317b8:	b00b      	add	sp, #44	; 0x2c
   317ba:	bd90      	pop	{r4, r7, pc}
   317bc:	00030ffb 	.word	0x00030ffb
   317c0:	00030f95 	.word	0x00030f95
   317c4:	00030fc9 	.word	0x00030fc9

000317c8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   317c8:	b580      	push	{r7, lr}
   317ca:	b082      	sub	sp, #8
   317cc:	af00      	add	r7, sp, #0
   317ce:	6078      	str	r0, [r7, #4]
	config->port = 80;
   317d0:	687b      	ldr	r3, [r7, #4]
   317d2:	2250      	movs	r2, #80	; 0x50
   317d4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   317d6:	687b      	ldr	r3, [r7, #4]
   317d8:	2200      	movs	r2, #0
   317da:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   317dc:	687b      	ldr	r3, [r7, #4]
   317de:	4a0b      	ldr	r2, [pc, #44]	; (3180c <http_client_get_config_defaults+0x44>)
   317e0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   317e2:	687b      	ldr	r3, [r7, #4]
   317e4:	2200      	movs	r2, #0
   317e6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   317e8:	687b      	ldr	r3, [r7, #4]
   317ea:	2200      	movs	r2, #0
   317ec:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   317ee:	687b      	ldr	r3, [r7, #4]
   317f0:	2280      	movs	r2, #128	; 0x80
   317f2:	0052      	lsls	r2, r2, #1
   317f4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   317f6:	687b      	ldr	r3, [r7, #4]
   317f8:	2252      	movs	r2, #82	; 0x52
   317fa:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   317fc:	687b      	ldr	r3, [r7, #4]
   317fe:	4a04      	ldr	r2, [pc, #16]	; (31810 <http_client_get_config_defaults+0x48>)
   31800:	619a      	str	r2, [r3, #24]
}
   31802:	46c0      	nop			; (mov r8, r8)
   31804:	46bd      	mov	sp, r7
   31806:	b002      	add	sp, #8
   31808:	bd80      	pop	{r7, pc}
   3180a:	46c0      	nop			; (mov r8, r8)
   3180c:	00004e20 	.word	0x00004e20
   31810:	0003acfc 	.word	0x0003acfc

00031814 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31814:	b590      	push	{r4, r7, lr}
   31816:	b083      	sub	sp, #12
   31818:	af00      	add	r7, sp, #0
   3181a:	6078      	str	r0, [r7, #4]
   3181c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3181e:	687b      	ldr	r3, [r7, #4]
   31820:	2b00      	cmp	r3, #0
   31822:	d002      	beq.n	3182a <http_client_init+0x16>
   31824:	683b      	ldr	r3, [r7, #0]
   31826:	2b00      	cmp	r3, #0
   31828:	d102      	bne.n	31830 <http_client_init+0x1c>
		return -EINVAL;
   3182a:	2316      	movs	r3, #22
   3182c:	425b      	negs	r3, r3
   3182e:	e058      	b.n	318e2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31830:	683b      	ldr	r3, [r7, #0]
   31832:	691b      	ldr	r3, [r3, #16]
   31834:	2b00      	cmp	r3, #0
   31836:	d102      	bne.n	3183e <http_client_init+0x2a>
		return -EINVAL;
   31838:	2316      	movs	r3, #22
   3183a:	425b      	negs	r3, r3
   3183c:	e051      	b.n	318e2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   3183e:	683b      	ldr	r3, [r7, #0]
   31840:	685b      	ldr	r3, [r3, #4]
   31842:	2b00      	cmp	r3, #0
   31844:	d102      	bne.n	3184c <http_client_init+0x38>
		return -EINVAL;
   31846:	2316      	movs	r3, #22
   31848:	425b      	negs	r3, r3
   3184a:	e04a      	b.n	318e2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3184c:	683b      	ldr	r3, [r7, #0]
   3184e:	695b      	ldr	r3, [r3, #20]
   31850:	2b51      	cmp	r3, #81	; 0x51
   31852:	d802      	bhi.n	3185a <http_client_init+0x46>
		return -EINVAL;
   31854:	2316      	movs	r3, #22
   31856:	425b      	negs	r3, r3
   31858:	e043      	b.n	318e2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3185a:	687b      	ldr	r3, [r7, #4]
   3185c:	22e8      	movs	r2, #232	; 0xe8
   3185e:	2100      	movs	r1, #0
   31860:	0018      	movs	r0, r3
   31862:	4b22      	ldr	r3, [pc, #136]	; (318ec <http_client_init+0xd8>)
   31864:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   31866:	687b      	ldr	r3, [r7, #4]
   31868:	3350      	adds	r3, #80	; 0x50
   3186a:	6839      	ldr	r1, [r7, #0]
   3186c:	221c      	movs	r2, #28
   3186e:	0018      	movs	r0, r3
   31870:	4b1f      	ldr	r3, [pc, #124]	; (318f0 <http_client_init+0xdc>)
   31872:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   31874:	687b      	ldr	r3, [r7, #4]
   31876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31878:	2b00      	cmp	r3, #0
   3187a:	d115      	bne.n	318a8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   3187c:	683b      	ldr	r3, [r7, #0]
   3187e:	691b      	ldr	r3, [r3, #16]
   31880:	0018      	movs	r0, r3
   31882:	4b1c      	ldr	r3, [pc, #112]	; (318f4 <http_client_init+0xe0>)
   31884:	4798      	blx	r3
   31886:	0003      	movs	r3, r0
   31888:	001a      	movs	r2, r3
   3188a:	687b      	ldr	r3, [r7, #4]
   3188c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3188e:	687b      	ldr	r3, [r7, #4]
   31890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31892:	2b00      	cmp	r3, #0
   31894:	d102      	bne.n	3189c <http_client_init+0x88>
			return -ENOMEM;
   31896:	230c      	movs	r3, #12
   31898:	425b      	negs	r3, r3
   3189a:	e022      	b.n	318e2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   3189c:	687b      	ldr	r3, [r7, #4]
   3189e:	2241      	movs	r2, #65	; 0x41
   318a0:	5c99      	ldrb	r1, [r3, r2]
   318a2:	2004      	movs	r0, #4
   318a4:	4301      	orrs	r1, r0
   318a6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   318a8:	683b      	ldr	r3, [r7, #0]
   318aa:	891b      	ldrh	r3, [r3, #8]
   318ac:	2b00      	cmp	r3, #0
   318ae:	d010      	beq.n	318d2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   318b0:	683b      	ldr	r3, [r7, #0]
   318b2:	6858      	ldr	r0, [r3, #4]
   318b4:	687a      	ldr	r2, [r7, #4]
   318b6:	4910      	ldr	r1, [pc, #64]	; (318f8 <http_client_init+0xe4>)
   318b8:	2300      	movs	r3, #0
   318ba:	4c10      	ldr	r4, [pc, #64]	; (318fc <http_client_init+0xe8>)
   318bc:	47a0      	blx	r4
   318be:	0002      	movs	r2, r0
   318c0:	687b      	ldr	r3, [r7, #4]
   318c2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   318c4:	687b      	ldr	r3, [r7, #4]
   318c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   318c8:	2b00      	cmp	r3, #0
   318ca:	da02      	bge.n	318d2 <http_client_init+0xbe>
			return -ENOSPC;
   318cc:	231c      	movs	r3, #28
   318ce:	425b      	negs	r3, r3
   318d0:	e007      	b.n	318e2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   318d2:	687b      	ldr	r3, [r7, #4]
   318d4:	2200      	movs	r2, #0
   318d6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   318d8:	687b      	ldr	r3, [r7, #4]
   318da:	22d8      	movs	r2, #216	; 0xd8
   318dc:	2100      	movs	r1, #0
   318de:	5099      	str	r1, [r3, r2]

	return 0;
   318e0:	2300      	movs	r3, #0
}
   318e2:	0018      	movs	r0, r3
   318e4:	46bd      	mov	sp, r7
   318e6:	b003      	add	sp, #12
   318e8:	bd90      	pop	{r4, r7, pc}
   318ea:	46c0      	nop			; (mov r8, r8)
   318ec:	000356ef 	.word	0x000356ef
   318f0:	000356b9 	.word	0x000356b9
   318f4:	00035691 	.word	0x00035691
   318f8:	00031bc5 	.word	0x00031bc5
   318fc:	00033269 	.word	0x00033269

00031900 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31900:	b580      	push	{r7, lr}
   31902:	b082      	sub	sp, #8
   31904:	af00      	add	r7, sp, #0
   31906:	6078      	str	r0, [r7, #4]
   31908:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3190a:	687b      	ldr	r3, [r7, #4]
   3190c:	2b00      	cmp	r3, #0
   3190e:	d102      	bne.n	31916 <http_client_register_callback+0x16>
		return -EINVAL;
   31910:	2316      	movs	r3, #22
   31912:	425b      	negs	r3, r3
   31914:	e003      	b.n	3191e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   31916:	687b      	ldr	r3, [r7, #4]
   31918:	683a      	ldr	r2, [r7, #0]
   3191a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   3191c:	2300      	movs	r3, #0
}
   3191e:	0018      	movs	r0, r3
   31920:	46bd      	mov	sp, r7
   31922:	b002      	add	sp, #8
   31924:	bd80      	pop	{r7, pc}
	...

00031928 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31928:	b580      	push	{r7, lr}
   3192a:	b082      	sub	sp, #8
   3192c:	af00      	add	r7, sp, #0
   3192e:	6078      	str	r0, [r7, #4]
	switch (err) {
   31930:	687b      	ldr	r3, [r7, #4]
   31932:	330e      	adds	r3, #14
   31934:	2b0e      	cmp	r3, #14
   31936:	d825      	bhi.n	31984 <_hwerr_to_stderr+0x5c>
   31938:	009a      	lsls	r2, r3, #2
   3193a:	4b18      	ldr	r3, [pc, #96]	; (3199c <_hwerr_to_stderr+0x74>)
   3193c:	18d3      	adds	r3, r2, r3
   3193e:	681b      	ldr	r3, [r3, #0]
   31940:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   31942:	2305      	movs	r3, #5
   31944:	425b      	negs	r3, r3
   31946:	e024      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31948:	2302      	movs	r3, #2
   3194a:	425b      	negs	r3, r3
   3194c:	e021      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3194e:	2370      	movs	r3, #112	; 0x70
   31950:	425b      	negs	r3, r3
   31952:	e01e      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   31954:	230c      	movs	r3, #12
   31956:	425b      	negs	r3, r3
   31958:	e01b      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3195a:	2316      	movs	r3, #22
   3195c:	425b      	negs	r3, r3
   3195e:	e018      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31960:	230c      	movs	r3, #12
   31962:	425b      	negs	r3, r3
   31964:	e015      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   31966:	2305      	movs	r3, #5
   31968:	425b      	negs	r3, r3
   3196a:	e012      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3196c:	2379      	movs	r3, #121	; 0x79
   3196e:	425b      	negs	r3, r3
   31970:	e00f      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31972:	2368      	movs	r3, #104	; 0x68
   31974:	425b      	negs	r3, r3
   31976:	e00c      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31978:	230b      	movs	r3, #11
   3197a:	425b      	negs	r3, r3
   3197c:	e009      	b.n	31992 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3197e:	2310      	movs	r3, #16
   31980:	425b      	negs	r3, r3
   31982:	e006      	b.n	31992 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   31984:	687b      	ldr	r3, [r7, #4]
   31986:	2b00      	cmp	r3, #0
   31988:	da02      	bge.n	31990 <_hwerr_to_stderr+0x68>
				return -EIO;
   3198a:	2305      	movs	r3, #5
   3198c:	425b      	negs	r3, r3
   3198e:	e000      	b.n	31992 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31990:	2300      	movs	r3, #0
	}
}
   31992:	0018      	movs	r0, r3
   31994:	46bd      	mov	sp, r7
   31996:	b002      	add	sp, #8
   31998:	bd80      	pop	{r7, pc}
   3199a:	46c0      	nop			; (mov r8, r8)
   3199c:	0003ae38 	.word	0x0003ae38

000319a0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   319a0:	b580      	push	{r7, lr}
   319a2:	b08a      	sub	sp, #40	; 0x28
   319a4:	af00      	add	r7, sp, #0
   319a6:	603a      	str	r2, [r7, #0]
   319a8:	1dfb      	adds	r3, r7, #7
   319aa:	1c02      	adds	r2, r0, #0
   319ac:	701a      	strb	r2, [r3, #0]
   319ae:	1dbb      	adds	r3, r7, #6
   319b0:	1c0a      	adds	r2, r1, #0
   319b2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   319b4:	1dfb      	adds	r3, r7, #7
   319b6:	2200      	movs	r2, #0
   319b8:	569a      	ldrsb	r2, [r3, r2]
   319ba:	4b4b      	ldr	r3, [pc, #300]	; (31ae8 <http_client_socket_event_handler+0x148>)
   319bc:	0092      	lsls	r2, r2, #2
   319be:	58d3      	ldr	r3, [r2, r3]
   319c0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   319c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319c4:	2b00      	cmp	r3, #0
   319c6:	d100      	bne.n	319ca <http_client_socket_event_handler+0x2a>
   319c8:	e08a      	b.n	31ae0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   319ca:	1dbb      	adds	r3, r7, #6
   319cc:	781b      	ldrb	r3, [r3, #0]
   319ce:	2b06      	cmp	r3, #6
   319d0:	d040      	beq.n	31a54 <http_client_socket_event_handler+0xb4>
   319d2:	2b07      	cmp	r3, #7
   319d4:	d060      	beq.n	31a98 <http_client_socket_event_handler+0xf8>
   319d6:	2b05      	cmp	r3, #5
   319d8:	d000      	beq.n	319dc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   319da:	e082      	b.n	31ae2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   319dc:	683b      	ldr	r3, [r7, #0]
   319de:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   319e0:	6a3b      	ldr	r3, [r7, #32]
   319e2:	785b      	ldrb	r3, [r3, #1]
   319e4:	b25b      	sxtb	r3, r3
   319e6:	001a      	movs	r2, r3
   319e8:	230c      	movs	r3, #12
   319ea:	18fb      	adds	r3, r7, r3
   319ec:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   319ee:	6a3b      	ldr	r3, [r7, #32]
   319f0:	785b      	ldrb	r3, [r3, #1]
   319f2:	b25b      	sxtb	r3, r3
   319f4:	2b00      	cmp	r3, #0
   319f6:	da0c      	bge.n	31a12 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   319f8:	6a3b      	ldr	r3, [r7, #32]
   319fa:	785b      	ldrb	r3, [r3, #1]
   319fc:	b25b      	sxtb	r3, r3
   319fe:	0018      	movs	r0, r3
   31a00:	4b3a      	ldr	r3, [pc, #232]	; (31aec <http_client_socket_event_handler+0x14c>)
   31a02:	4798      	blx	r3
   31a04:	0002      	movs	r2, r0
   31a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a08:	0011      	movs	r1, r2
   31a0a:	0018      	movs	r0, r3
   31a0c:	4b38      	ldr	r3, [pc, #224]	; (31af0 <http_client_socket_event_handler+0x150>)
   31a0e:	4798      	blx	r3
    	break;
   31a10:	e067      	b.n	31ae2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a16:	2b00      	cmp	r3, #0
   31a18:	d006      	beq.n	31a28 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a1e:	220c      	movs	r2, #12
   31a20:	18ba      	adds	r2, r7, r2
   31a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31a24:	2100      	movs	r1, #0
   31a26:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a2a:	2203      	movs	r2, #3
   31a2c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a30:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a34:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a38:	2258      	movs	r2, #88	; 0x58
   31a3a:	5a9b      	ldrh	r3, [r3, r2]
   31a3c:	001a      	movs	r2, r3
   31a3e:	4b2d      	ldr	r3, [pc, #180]	; (31af4 <http_client_socket_event_handler+0x154>)
   31a40:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a44:	0018      	movs	r0, r3
   31a46:	4b2c      	ldr	r3, [pc, #176]	; (31af8 <http_client_socket_event_handler+0x158>)
   31a48:	4798      	blx	r3
			_http_client_request(module);
   31a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a4c:	0018      	movs	r0, r3
   31a4e:	4b2b      	ldr	r3, [pc, #172]	; (31afc <http_client_socket_event_handler+0x15c>)
   31a50:	4798      	blx	r3
    	break;
   31a52:	e046      	b.n	31ae2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31a54:	683b      	ldr	r3, [r7, #0]
   31a56:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31a58:	69fb      	ldr	r3, [r7, #28]
   31a5a:	2204      	movs	r2, #4
   31a5c:	5e9b      	ldrsh	r3, [r3, r2]
   31a5e:	2b00      	cmp	r3, #0
   31a60:	dd09      	ble.n	31a76 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31a62:	69fb      	ldr	r3, [r7, #28]
   31a64:	2204      	movs	r2, #4
   31a66:	5e9b      	ldrsh	r3, [r3, r2]
   31a68:	001a      	movs	r2, r3
   31a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a6c:	0011      	movs	r1, r2
   31a6e:	0018      	movs	r0, r3
   31a70:	4b23      	ldr	r3, [pc, #140]	; (31b00 <http_client_socket_event_handler+0x160>)
   31a72:	4798      	blx	r3
   31a74:	e00b      	b.n	31a8e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31a76:	69fb      	ldr	r3, [r7, #28]
   31a78:	2204      	movs	r2, #4
   31a7a:	5e9b      	ldrsh	r3, [r3, r2]
   31a7c:	0018      	movs	r0, r3
   31a7e:	4b1b      	ldr	r3, [pc, #108]	; (31aec <http_client_socket_event_handler+0x14c>)
   31a80:	4798      	blx	r3
   31a82:	0002      	movs	r2, r0
   31a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a86:	0011      	movs	r1, r2
   31a88:	0018      	movs	r0, r3
   31a8a:	4b19      	ldr	r3, [pc, #100]	; (31af0 <http_client_socket_event_handler+0x150>)
   31a8c:	4798      	blx	r3
		_http_client_recv_packet(module);
   31a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a90:	0018      	movs	r0, r3
   31a92:	4b19      	ldr	r3, [pc, #100]	; (31af8 <http_client_socket_event_handler+0x158>)
   31a94:	4798      	blx	r3
		break;
   31a96:	e024      	b.n	31ae2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31a98:	231a      	movs	r3, #26
   31a9a:	18fb      	adds	r3, r7, r3
   31a9c:	683a      	ldr	r2, [r7, #0]
   31a9e:	8812      	ldrh	r2, [r2, #0]
   31aa0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31aa2:	231a      	movs	r3, #26
   31aa4:	18fb      	adds	r3, r7, r3
   31aa6:	2200      	movs	r2, #0
   31aa8:	5e9b      	ldrsh	r3, [r3, r2]
   31aaa:	2b00      	cmp	r3, #0
   31aac:	da0d      	bge.n	31aca <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31aae:	231a      	movs	r3, #26
   31ab0:	18fb      	adds	r3, r7, r3
   31ab2:	2200      	movs	r2, #0
   31ab4:	5e9b      	ldrsh	r3, [r3, r2]
   31ab6:	0018      	movs	r0, r3
   31ab8:	4b0c      	ldr	r3, [pc, #48]	; (31aec <http_client_socket_event_handler+0x14c>)
   31aba:	4798      	blx	r3
   31abc:	0002      	movs	r2, r0
   31abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac0:	0011      	movs	r1, r2
   31ac2:	0018      	movs	r0, r3
   31ac4:	4b0a      	ldr	r3, [pc, #40]	; (31af0 <http_client_socket_event_handler+0x150>)
   31ac6:	4798      	blx	r3
   31ac8:	e003      	b.n	31ad2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31acc:	0018      	movs	r0, r3
   31ace:	4b0b      	ldr	r3, [pc, #44]	; (31afc <http_client_socket_event_handler+0x15c>)
   31ad0:	4798      	blx	r3
		module->sending = 0;
   31ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ad4:	2241      	movs	r2, #65	; 0x41
   31ad6:	5c99      	ldrb	r1, [r3, r2]
   31ad8:	2001      	movs	r0, #1
   31ada:	4381      	bics	r1, r0
   31adc:	5499      	strb	r1, [r3, r2]
    	break;
   31ade:	e000      	b.n	31ae2 <http_client_socket_event_handler+0x142>
		return;
   31ae0:	46c0      	nop			; (mov r8, r8)
	}

}
   31ae2:	46bd      	mov	sp, r7
   31ae4:	b00a      	add	sp, #40	; 0x28
   31ae6:	bd80      	pop	{r7, pc}
   31ae8:	200046f8 	.word	0x200046f8
   31aec:	00031929 	.word	0x00031929
   31af0:	00031f9d 	.word	0x00031f9d
   31af4:	000332f9 	.word	0x000332f9
   31af8:	00032829 	.word	0x00032829
   31afc:	000320f1 	.word	0x000320f1
   31b00:	0003288d 	.word	0x0003288d

00031b04 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31b04:	b580      	push	{r7, lr}
   31b06:	b088      	sub	sp, #32
   31b08:	af00      	add	r7, sp, #0
   31b0a:	6078      	str	r0, [r7, #4]
   31b0c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31b0e:	2300      	movs	r3, #0
   31b10:	61fb      	str	r3, [r7, #28]
   31b12:	e048      	b.n	31ba6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31b14:	4b27      	ldr	r3, [pc, #156]	; (31bb4 <http_client_socket_resolve_handler+0xb0>)
   31b16:	69fa      	ldr	r2, [r7, #28]
   31b18:	0092      	lsls	r2, r2, #2
   31b1a:	58d3      	ldr	r3, [r2, r3]
   31b1c:	2b00      	cmp	r3, #0
   31b1e:	d03f      	beq.n	31ba0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31b20:	4b24      	ldr	r3, [pc, #144]	; (31bb4 <http_client_socket_resolve_handler+0xb0>)
   31b22:	69fa      	ldr	r2, [r7, #28]
   31b24:	0092      	lsls	r2, r2, #2
   31b26:	58d3      	ldr	r3, [r2, r3]
   31b28:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31b2a:	69bb      	ldr	r3, [r7, #24]
   31b2c:	1c5a      	adds	r2, r3, #1
   31b2e:	687b      	ldr	r3, [r7, #4]
   31b30:	0011      	movs	r1, r2
   31b32:	0018      	movs	r0, r3
   31b34:	4b20      	ldr	r3, [pc, #128]	; (31bb8 <http_client_socket_resolve_handler+0xb4>)
   31b36:	4798      	blx	r3
   31b38:	1e03      	subs	r3, r0, #0
   31b3a:	d131      	bne.n	31ba0 <http_client_socket_resolve_handler+0x9c>
   31b3c:	69bb      	ldr	r3, [r7, #24]
   31b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31b40:	2b01      	cmp	r3, #1
   31b42:	d12d      	bne.n	31ba0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31b44:	683b      	ldr	r3, [r7, #0]
   31b46:	2b00      	cmp	r3, #0
   31b48:	d107      	bne.n	31b5a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31b4a:	2376      	movs	r3, #118	; 0x76
   31b4c:	425a      	negs	r2, r3
   31b4e:	69bb      	ldr	r3, [r7, #24]
   31b50:	0011      	movs	r1, r2
   31b52:	0018      	movs	r0, r3
   31b54:	4b19      	ldr	r3, [pc, #100]	; (31bbc <http_client_socket_resolve_handler+0xb8>)
   31b56:	4798      	blx	r3
					return;
   31b58:	e028      	b.n	31bac <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31b5a:	2308      	movs	r3, #8
   31b5c:	18fb      	adds	r3, r7, r3
   31b5e:	2202      	movs	r2, #2
   31b60:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31b62:	69bb      	ldr	r3, [r7, #24]
   31b64:	2250      	movs	r2, #80	; 0x50
   31b66:	5a9b      	ldrh	r3, [r3, r2]
   31b68:	021b      	lsls	r3, r3, #8
   31b6a:	b21a      	sxth	r2, r3
   31b6c:	69bb      	ldr	r3, [r7, #24]
   31b6e:	2150      	movs	r1, #80	; 0x50
   31b70:	5a5b      	ldrh	r3, [r3, r1]
   31b72:	0a1b      	lsrs	r3, r3, #8
   31b74:	b29b      	uxth	r3, r3
   31b76:	b21b      	sxth	r3, r3
   31b78:	4313      	orrs	r3, r2
   31b7a:	b21b      	sxth	r3, r3
   31b7c:	b29a      	uxth	r2, r3
   31b7e:	2308      	movs	r3, #8
   31b80:	18fb      	adds	r3, r7, r3
   31b82:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31b84:	2308      	movs	r3, #8
   31b86:	18fb      	adds	r3, r7, r3
   31b88:	683a      	ldr	r2, [r7, #0]
   31b8a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31b8c:	69bb      	ldr	r3, [r7, #24]
   31b8e:	781b      	ldrb	r3, [r3, #0]
   31b90:	b25b      	sxtb	r3, r3
   31b92:	2208      	movs	r2, #8
   31b94:	18b9      	adds	r1, r7, r2
   31b96:	2210      	movs	r2, #16
   31b98:	0018      	movs	r0, r3
   31b9a:	4b09      	ldr	r3, [pc, #36]	; (31bc0 <http_client_socket_resolve_handler+0xbc>)
   31b9c:	4798      	blx	r3
				return;
   31b9e:	e005      	b.n	31bac <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31ba0:	69fb      	ldr	r3, [r7, #28]
   31ba2:	3301      	adds	r3, #1
   31ba4:	61fb      	str	r3, [r7, #28]
   31ba6:	69fb      	ldr	r3, [r7, #28]
   31ba8:	2b06      	cmp	r3, #6
   31baa:	ddb3      	ble.n	31b14 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31bac:	46bd      	mov	sp, r7
   31bae:	b008      	add	sp, #32
   31bb0:	bd80      	pop	{r7, pc}
   31bb2:	46c0      	nop			; (mov r8, r8)
   31bb4:	200046f8 	.word	0x200046f8
   31bb8:	00035a47 	.word	0x00035a47
   31bbc:	00031f9d 	.word	0x00031f9d
   31bc0:	00026395 	.word	0x00026395

00031bc4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31bc4:	b580      	push	{r7, lr}
   31bc6:	b086      	sub	sp, #24
   31bc8:	af00      	add	r7, sp, #0
   31bca:	60f8      	str	r0, [r7, #12]
   31bcc:	60b9      	str	r1, [r7, #8]
   31bce:	607a      	str	r2, [r7, #4]
   31bd0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31bd2:	687b      	ldr	r3, [r7, #4]
   31bd4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31bd6:	697b      	ldr	r3, [r7, #20]
   31bd8:	2b00      	cmp	r3, #0
   31bda:	d007      	beq.n	31bec <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31bdc:	233e      	movs	r3, #62	; 0x3e
   31bde:	425a      	negs	r2, r3
   31be0:	697b      	ldr	r3, [r7, #20]
   31be2:	0011      	movs	r1, r2
   31be4:	0018      	movs	r0, r3
   31be6:	4b03      	ldr	r3, [pc, #12]	; (31bf4 <http_client_timer_callback+0x30>)
   31be8:	4798      	blx	r3
   31bea:	e000      	b.n	31bee <http_client_timer_callback+0x2a>
		return;
   31bec:	46c0      	nop			; (mov r8, r8)
}
   31bee:	46bd      	mov	sp, r7
   31bf0:	b006      	add	sp, #24
   31bf2:	bd80      	pop	{r7, pc}
   31bf4:	00031f9d 	.word	0x00031f9d

00031bf8 <_is_ip>:

static int _is_ip(const char *host)
{
   31bf8:	b580      	push	{r7, lr}
   31bfa:	b084      	sub	sp, #16
   31bfc:	af00      	add	r7, sp, #0
   31bfe:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31c00:	2300      	movs	r3, #0
   31c02:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31c04:	e03a      	b.n	31c7c <_is_ip+0x84>
		ch = *host++;
   31c06:	687b      	ldr	r3, [r7, #4]
   31c08:	1c5a      	adds	r2, r3, #1
   31c0a:	607a      	str	r2, [r7, #4]
   31c0c:	220b      	movs	r2, #11
   31c0e:	18ba      	adds	r2, r7, r2
   31c10:	781b      	ldrb	r3, [r3, #0]
   31c12:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31c14:	230b      	movs	r3, #11
   31c16:	18fb      	adds	r3, r7, r3
   31c18:	781b      	ldrb	r3, [r3, #0]
   31c1a:	2b60      	cmp	r3, #96	; 0x60
   31c1c:	d904      	bls.n	31c28 <_is_ip+0x30>
   31c1e:	230b      	movs	r3, #11
   31c20:	18fb      	adds	r3, r7, r3
   31c22:	781b      	ldrb	r3, [r3, #0]
   31c24:	2b66      	cmp	r3, #102	; 0x66
   31c26:	d913      	bls.n	31c50 <_is_ip+0x58>
   31c28:	230b      	movs	r3, #11
   31c2a:	18fb      	adds	r3, r7, r3
   31c2c:	781b      	ldrb	r3, [r3, #0]
   31c2e:	2b40      	cmp	r3, #64	; 0x40
   31c30:	d904      	bls.n	31c3c <_is_ip+0x44>
   31c32:	230b      	movs	r3, #11
   31c34:	18fb      	adds	r3, r7, r3
   31c36:	781b      	ldrb	r3, [r3, #0]
   31c38:	2b46      	cmp	r3, #70	; 0x46
   31c3a:	d909      	bls.n	31c50 <_is_ip+0x58>
   31c3c:	230b      	movs	r3, #11
   31c3e:	18fb      	adds	r3, r7, r3
   31c40:	781b      	ldrb	r3, [r3, #0]
   31c42:	2b3a      	cmp	r3, #58	; 0x3a
   31c44:	d004      	beq.n	31c50 <_is_ip+0x58>
   31c46:	230b      	movs	r3, #11
   31c48:	18fb      	adds	r3, r7, r3
   31c4a:	781b      	ldrb	r3, [r3, #0]
   31c4c:	2b2f      	cmp	r3, #47	; 0x2f
   31c4e:	d102      	bne.n	31c56 <_is_ip+0x5e>
			isv6 = 1;
   31c50:	2301      	movs	r3, #1
   31c52:	60fb      	str	r3, [r7, #12]
   31c54:	e012      	b.n	31c7c <_is_ip+0x84>
		} else if (ch == '.') {
   31c56:	230b      	movs	r3, #11
   31c58:	18fb      	adds	r3, r7, r3
   31c5a:	781b      	ldrb	r3, [r3, #0]
   31c5c:	2b2e      	cmp	r3, #46	; 0x2e
   31c5e:	d104      	bne.n	31c6a <_is_ip+0x72>
			if (isv6) {
   31c60:	68fb      	ldr	r3, [r7, #12]
   31c62:	2b00      	cmp	r3, #0
   31c64:	d00a      	beq.n	31c7c <_is_ip+0x84>
				return 0;
   31c66:	2300      	movs	r3, #0
   31c68:	e00d      	b.n	31c86 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31c6a:	230b      	movs	r3, #11
   31c6c:	18fb      	adds	r3, r7, r3
   31c6e:	781b      	ldrb	r3, [r3, #0]
   31c70:	2230      	movs	r2, #48	; 0x30
   31c72:	4013      	ands	r3, r2
   31c74:	2b30      	cmp	r3, #48	; 0x30
   31c76:	d001      	beq.n	31c7c <_is_ip+0x84>
			return 0;
   31c78:	2300      	movs	r3, #0
   31c7a:	e004      	b.n	31c86 <_is_ip+0x8e>
	while (*host != '\0') {
   31c7c:	687b      	ldr	r3, [r7, #4]
   31c7e:	781b      	ldrb	r3, [r3, #0]
   31c80:	2b00      	cmp	r3, #0
   31c82:	d1c0      	bne.n	31c06 <_is_ip+0xe>
		}
	}
	return 1;
   31c84:	2301      	movs	r3, #1
}
   31c86:	0018      	movs	r0, r3
   31c88:	46bd      	mov	sp, r7
   31c8a:	b004      	add	sp, #16
   31c8c:	bd80      	pop	{r7, pc}
	...

00031c90 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31c90:	b5b0      	push	{r4, r5, r7, lr}
   31c92:	b08e      	sub	sp, #56	; 0x38
   31c94:	af00      	add	r7, sp, #0
   31c96:	60f8      	str	r0, [r7, #12]
   31c98:	60b9      	str	r1, [r7, #8]
   31c9a:	603b      	str	r3, [r7, #0]
   31c9c:	1dfb      	adds	r3, r7, #7
   31c9e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31ca0:	2337      	movs	r3, #55	; 0x37
   31ca2:	18fb      	adds	r3, r7, r3
   31ca4:	2200      	movs	r2, #0
   31ca6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31ca8:	2300      	movs	r3, #0
   31caa:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31cac:	2300      	movs	r3, #0
   31cae:	633b      	str	r3, [r7, #48]	; 0x30
   31cb0:	2300      	movs	r3, #0
   31cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   31cb4:	2300      	movs	r3, #0
   31cb6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31cb8:	68fb      	ldr	r3, [r7, #12]
   31cba:	2b00      	cmp	r3, #0
   31cbc:	d102      	bne.n	31cc4 <http_client_send_request+0x34>
		return -EINVAL;
   31cbe:	2316      	movs	r3, #22
   31cc0:	425b      	negs	r3, r3
   31cc2:	e145      	b.n	31f50 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31cc4:	68fb      	ldr	r3, [r7, #12]
   31cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31cc8:	2b02      	cmp	r3, #2
   31cca:	d902      	bls.n	31cd2 <http_client_send_request+0x42>
		return -EBUSY;
   31ccc:	2310      	movs	r3, #16
   31cce:	425b      	negs	r3, r3
   31cd0:	e13e      	b.n	31f50 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31cd2:	49a1      	ldr	r1, [pc, #644]	; (31f58 <http_client_send_request+0x2c8>)
   31cd4:	68bb      	ldr	r3, [r7, #8]
   31cd6:	2207      	movs	r2, #7
   31cd8:	0018      	movs	r0, r3
   31cda:	4ba0      	ldr	r3, [pc, #640]	; (31f5c <http_client_send_request+0x2cc>)
   31cdc:	4798      	blx	r3
   31cde:	1e03      	subs	r3, r0, #0
   31ce0:	d102      	bne.n	31ce8 <http_client_send_request+0x58>
		i = 7;
   31ce2:	2307      	movs	r3, #7
   31ce4:	633b      	str	r3, [r7, #48]	; 0x30
   31ce6:	e009      	b.n	31cfc <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31ce8:	499d      	ldr	r1, [pc, #628]	; (31f60 <http_client_send_request+0x2d0>)
   31cea:	68bb      	ldr	r3, [r7, #8]
   31cec:	2208      	movs	r2, #8
   31cee:	0018      	movs	r0, r3
   31cf0:	4b9a      	ldr	r3, [pc, #616]	; (31f5c <http_client_send_request+0x2cc>)
   31cf2:	4798      	blx	r3
   31cf4:	1e03      	subs	r3, r0, #0
   31cf6:	d101      	bne.n	31cfc <http_client_send_request+0x6c>
		i = 8;
   31cf8:	2308      	movs	r3, #8
   31cfa:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31cfc:	68fb      	ldr	r3, [r7, #12]
   31cfe:	1c5c      	adds	r4, r3, #1
   31d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d02:	68ba      	ldr	r2, [r7, #8]
   31d04:	18d5      	adds	r5, r2, r3
   31d06:	68fb      	ldr	r3, [r7, #12]
   31d08:	3301      	adds	r3, #1
   31d0a:	0018      	movs	r0, r3
   31d0c:	4b95      	ldr	r3, [pc, #596]	; (31f64 <http_client_send_request+0x2d4>)
   31d0e:	4798      	blx	r3
   31d10:	0003      	movs	r3, r0
   31d12:	001a      	movs	r2, r3
   31d14:	0029      	movs	r1, r5
   31d16:	0020      	movs	r0, r4
   31d18:	4b90      	ldr	r3, [pc, #576]	; (31f5c <http_client_send_request+0x2cc>)
   31d1a:	4798      	blx	r3
   31d1c:	0003      	movs	r3, r0
   31d1e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31d20:	e00d      	b.n	31d3e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31d24:	1c5a      	adds	r2, r3, #1
   31d26:	62fa      	str	r2, [r7, #44]	; 0x2c
   31d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31d2a:	68b9      	ldr	r1, [r7, #8]
   31d2c:	188a      	adds	r2, r1, r2
   31d2e:	7811      	ldrb	r1, [r2, #0]
   31d30:	68fa      	ldr	r2, [r7, #12]
   31d32:	18d3      	adds	r3, r2, r3
   31d34:	1c0a      	adds	r2, r1, #0
   31d36:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d3a:	3301      	adds	r3, #1
   31d3c:	633b      	str	r3, [r7, #48]	; 0x30
   31d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d40:	68ba      	ldr	r2, [r7, #8]
   31d42:	18d3      	adds	r3, r2, r3
   31d44:	781b      	ldrb	r3, [r3, #0]
   31d46:	2b00      	cmp	r3, #0
   31d48:	d005      	beq.n	31d56 <http_client_send_request+0xc6>
   31d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d4c:	68ba      	ldr	r2, [r7, #8]
   31d4e:	18d3      	adds	r3, r2, r3
   31d50:	781b      	ldrb	r3, [r3, #0]
   31d52:	2b2f      	cmp	r3, #47	; 0x2f
   31d54:	d1e5      	bne.n	31d22 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31d56:	68fa      	ldr	r2, [r7, #12]
   31d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31d5a:	18d3      	adds	r3, r2, r3
   31d5c:	3301      	adds	r3, #1
   31d5e:	2200      	movs	r2, #0
   31d60:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d64:	68ba      	ldr	r2, [r7, #8]
   31d66:	18d3      	adds	r3, r2, r3
   31d68:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31d6a:	68fb      	ldr	r3, [r7, #12]
   31d6c:	3301      	adds	r3, #1
   31d6e:	781b      	ldrb	r3, [r3, #0]
   31d70:	2b00      	cmp	r3, #0
   31d72:	d102      	bne.n	31d7a <http_client_send_request+0xea>
		return -EINVAL;
   31d74:	2316      	movs	r3, #22
   31d76:	425b      	negs	r3, r3
   31d78:	e0ea      	b.n	31f50 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d7c:	0018      	movs	r0, r3
   31d7e:	4b79      	ldr	r3, [pc, #484]	; (31f64 <http_client_send_request+0x2d4>)
   31d80:	4798      	blx	r3
   31d82:	0003      	movs	r3, r0
   31d84:	2b3f      	cmp	r3, #63	; 0x3f
   31d86:	d902      	bls.n	31d8e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31d88:	235b      	movs	r3, #91	; 0x5b
   31d8a:	425b      	negs	r3, r3
   31d8c:	e0e0      	b.n	31f50 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31d8e:	68fb      	ldr	r3, [r7, #12]
   31d90:	22d4      	movs	r2, #212	; 0xd4
   31d92:	589b      	ldr	r3, [r3, r2]
   31d94:	2b00      	cmp	r3, #0
   31d96:	d005      	beq.n	31da4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31d98:	68fb      	ldr	r3, [r7, #12]
   31d9a:	22d4      	movs	r2, #212	; 0xd4
   31d9c:	589b      	ldr	r3, [r3, r2]
   31d9e:	0018      	movs	r0, r3
   31da0:	4b71      	ldr	r3, [pc, #452]	; (31f68 <http_client_send_request+0x2d8>)
   31da2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31da6:	2b00      	cmp	r3, #0
   31da8:	d010      	beq.n	31dcc <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31dac:	0018      	movs	r0, r3
   31dae:	4b6f      	ldr	r3, [pc, #444]	; (31f6c <http_client_send_request+0x2dc>)
   31db0:	4798      	blx	r3
   31db2:	0003      	movs	r3, r0
   31db4:	0019      	movs	r1, r3
   31db6:	68fb      	ldr	r3, [r7, #12]
   31db8:	22d4      	movs	r2, #212	; 0xd4
   31dba:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31dbc:	68fb      	ldr	r3, [r7, #12]
   31dbe:	22d4      	movs	r2, #212	; 0xd4
   31dc0:	589b      	ldr	r3, [r3, r2]
   31dc2:	2b00      	cmp	r3, #0
   31dc4:	d106      	bne.n	31dd4 <http_client_send_request+0x144>
			return -ENOMEM;
   31dc6:	230c      	movs	r3, #12
   31dc8:	425b      	negs	r3, r3
   31dca:	e0c1      	b.n	31f50 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31dcc:	68fb      	ldr	r3, [r7, #12]
   31dce:	22d4      	movs	r2, #212	; 0xd4
   31dd0:	2100      	movs	r1, #0
   31dd2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31dd4:	68fb      	ldr	r3, [r7, #12]
   31dd6:	2241      	movs	r2, #65	; 0x41
   31dd8:	5c99      	ldrb	r1, [r3, r2]
   31dda:	2001      	movs	r0, #1
   31ddc:	4381      	bics	r1, r0
   31dde:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31de0:	68fb      	ldr	r3, [r7, #12]
   31de2:	2200      	movs	r2, #0
   31de4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31de8:	781b      	ldrb	r3, [r3, #0]
   31dea:	2b2f      	cmp	r3, #47	; 0x2f
   31dec:	d107      	bne.n	31dfe <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31dee:	68fb      	ldr	r3, [r7, #12]
   31df0:	3370      	adds	r3, #112	; 0x70
   31df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31df4:	0011      	movs	r1, r2
   31df6:	0018      	movs	r0, r3
   31df8:	4b5d      	ldr	r3, [pc, #372]	; (31f70 <http_client_send_request+0x2e0>)
   31dfa:	4798      	blx	r3
   31dfc:	e00f      	b.n	31e1e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31dfe:	68fb      	ldr	r3, [r7, #12]
   31e00:	2270      	movs	r2, #112	; 0x70
   31e02:	212f      	movs	r1, #47	; 0x2f
   31e04:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31e08:	781b      	ldrb	r3, [r3, #0]
   31e0a:	2b00      	cmp	r3, #0
   31e0c:	d007      	beq.n	31e1e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31e0e:	68fb      	ldr	r3, [r7, #12]
   31e10:	3370      	adds	r3, #112	; 0x70
   31e12:	3301      	adds	r3, #1
   31e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31e16:	0011      	movs	r1, r2
   31e18:	0018      	movs	r0, r3
   31e1a:	4b55      	ldr	r3, [pc, #340]	; (31f70 <http_client_send_request+0x2e0>)
   31e1c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31e1e:	683b      	ldr	r3, [r7, #0]
   31e20:	2b00      	cmp	r3, #0
   31e22:	d007      	beq.n	31e34 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31e24:	68fb      	ldr	r3, [r7, #12]
   31e26:	33b0      	adds	r3, #176	; 0xb0
   31e28:	6839      	ldr	r1, [r7, #0]
   31e2a:	2218      	movs	r2, #24
   31e2c:	0018      	movs	r0, r3
   31e2e:	4b51      	ldr	r3, [pc, #324]	; (31f74 <http_client_send_request+0x2e4>)
   31e30:	4798      	blx	r3
   31e32:	e006      	b.n	31e42 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31e34:	68fb      	ldr	r3, [r7, #12]
   31e36:	33b0      	adds	r3, #176	; 0xb0
   31e38:	2218      	movs	r2, #24
   31e3a:	2100      	movs	r1, #0
   31e3c:	0018      	movs	r0, r3
   31e3e:	4b4e      	ldr	r3, [pc, #312]	; (31f78 <http_client_send_request+0x2e8>)
   31e40:	4798      	blx	r3
	}

	module->req.method = method;
   31e42:	68fb      	ldr	r3, [r7, #12]
   31e44:	1dfa      	adds	r2, r7, #7
   31e46:	21c8      	movs	r1, #200	; 0xc8
   31e48:	7812      	ldrb	r2, [r2, #0]
   31e4a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31e4c:	68fb      	ldr	r3, [r7, #12]
   31e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31e50:	2b01      	cmp	r3, #1
   31e52:	d003      	beq.n	31e5c <http_client_send_request+0x1cc>
   31e54:	d316      	bcc.n	31e84 <http_client_send_request+0x1f4>
   31e56:	2b02      	cmp	r3, #2
   31e58:	d004      	beq.n	31e64 <http_client_send_request+0x1d4>
   31e5a:	e074      	b.n	31f46 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e5e:	2b00      	cmp	r3, #0
   31e60:	d100      	bne.n	31e64 <http_client_send_request+0x1d4>
   31e62:	e073      	b.n	31f4c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e66:	2b00      	cmp	r3, #0
   31e68:	d107      	bne.n	31e7a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31e6a:	68fb      	ldr	r3, [r7, #12]
   31e6c:	2203      	movs	r2, #3
   31e6e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31e70:	68fb      	ldr	r3, [r7, #12]
   31e72:	0018      	movs	r0, r3
   31e74:	4b41      	ldr	r3, [pc, #260]	; (31f7c <http_client_send_request+0x2ec>)
   31e76:	4798      	blx	r3
			break;
   31e78:	e069      	b.n	31f4e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31e7a:	68fb      	ldr	r3, [r7, #12]
   31e7c:	2100      	movs	r1, #0
   31e7e:	0018      	movs	r0, r3
   31e80:	4b3f      	ldr	r3, [pc, #252]	; (31f80 <http_client_send_request+0x2f0>)
   31e82:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31e84:	68fb      	ldr	r3, [r7, #12]
   31e86:	2252      	movs	r2, #82	; 0x52
   31e88:	5c9b      	ldrb	r3, [r3, r2]
   31e8a:	2b00      	cmp	r3, #0
   31e8c:	d007      	beq.n	31e9e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31e8e:	2337      	movs	r3, #55	; 0x37
   31e90:	18fb      	adds	r3, r7, r3
   31e92:	2237      	movs	r2, #55	; 0x37
   31e94:	18ba      	adds	r2, r7, r2
   31e96:	7812      	ldrb	r2, [r2, #0]
   31e98:	2101      	movs	r1, #1
   31e9a:	430a      	orrs	r2, r1
   31e9c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31e9e:	2337      	movs	r3, #55	; 0x37
   31ea0:	18fb      	adds	r3, r7, r3
   31ea2:	781b      	ldrb	r3, [r3, #0]
   31ea4:	001a      	movs	r2, r3
   31ea6:	2101      	movs	r1, #1
   31ea8:	2002      	movs	r0, #2
   31eaa:	4b36      	ldr	r3, [pc, #216]	; (31f84 <http_client_send_request+0x2f4>)
   31eac:	4798      	blx	r3
   31eae:	0003      	movs	r3, r0
   31eb0:	001a      	movs	r2, r3
   31eb2:	68fb      	ldr	r3, [r7, #12]
   31eb4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31eb6:	68fb      	ldr	r3, [r7, #12]
   31eb8:	781b      	ldrb	r3, [r3, #0]
   31eba:	b25b      	sxtb	r3, r3
   31ebc:	2b00      	cmp	r3, #0
   31ebe:	db3f      	blt.n	31f40 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31ec0:	68fb      	ldr	r3, [r7, #12]
   31ec2:	781b      	ldrb	r3, [r3, #0]
   31ec4:	b25b      	sxtb	r3, r3
   31ec6:	001a      	movs	r2, r3
   31ec8:	4b2f      	ldr	r3, [pc, #188]	; (31f88 <http_client_send_request+0x2f8>)
   31eca:	0092      	lsls	r2, r2, #2
   31ecc:	68f9      	ldr	r1, [r7, #12]
   31ece:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31ed0:	68fb      	ldr	r3, [r7, #12]
   31ed2:	3301      	adds	r3, #1
   31ed4:	0018      	movs	r0, r3
   31ed6:	4b2d      	ldr	r3, [pc, #180]	; (31f8c <http_client_send_request+0x2fc>)
   31ed8:	4798      	blx	r3
   31eda:	1e03      	subs	r3, r0, #0
   31edc:	d027      	beq.n	31f2e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31ede:	2314      	movs	r3, #20
   31ee0:	18fb      	adds	r3, r7, r3
   31ee2:	2202      	movs	r2, #2
   31ee4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31ee6:	68fb      	ldr	r3, [r7, #12]
   31ee8:	2250      	movs	r2, #80	; 0x50
   31eea:	5a9b      	ldrh	r3, [r3, r2]
   31eec:	021b      	lsls	r3, r3, #8
   31eee:	b21a      	sxth	r2, r3
   31ef0:	68fb      	ldr	r3, [r7, #12]
   31ef2:	2150      	movs	r1, #80	; 0x50
   31ef4:	5a5b      	ldrh	r3, [r3, r1]
   31ef6:	0a1b      	lsrs	r3, r3, #8
   31ef8:	b29b      	uxth	r3, r3
   31efa:	b21b      	sxth	r3, r3
   31efc:	4313      	orrs	r3, r2
   31efe:	b21b      	sxth	r3, r3
   31f00:	b29a      	uxth	r2, r3
   31f02:	2314      	movs	r3, #20
   31f04:	18fb      	adds	r3, r7, r3
   31f06:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31f08:	68fb      	ldr	r3, [r7, #12]
   31f0a:	3301      	adds	r3, #1
   31f0c:	0018      	movs	r0, r3
   31f0e:	4b20      	ldr	r3, [pc, #128]	; (31f90 <http_client_send_request+0x300>)
   31f10:	4798      	blx	r3
   31f12:	0002      	movs	r2, r0
   31f14:	2314      	movs	r3, #20
   31f16:	18fb      	adds	r3, r7, r3
   31f18:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31f1a:	68fb      	ldr	r3, [r7, #12]
   31f1c:	781b      	ldrb	r3, [r3, #0]
   31f1e:	b25b      	sxtb	r3, r3
   31f20:	2214      	movs	r2, #20
   31f22:	18b9      	adds	r1, r7, r2
   31f24:	2210      	movs	r2, #16
   31f26:	0018      	movs	r0, r3
   31f28:	4b1a      	ldr	r3, [pc, #104]	; (31f94 <http_client_send_request+0x304>)
   31f2a:	4798      	blx	r3
   31f2c:	e004      	b.n	31f38 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31f2e:	68fb      	ldr	r3, [r7, #12]
   31f30:	3301      	adds	r3, #1
   31f32:	0018      	movs	r0, r3
   31f34:	4b18      	ldr	r3, [pc, #96]	; (31f98 <http_client_send_request+0x308>)
   31f36:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31f38:	68fb      	ldr	r3, [r7, #12]
   31f3a:	2201      	movs	r2, #1
   31f3c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31f3e:	e006      	b.n	31f4e <http_client_send_request+0x2be>
			return -ENOSPC;
   31f40:	231c      	movs	r3, #28
   31f42:	425b      	negs	r3, r3
   31f44:	e004      	b.n	31f50 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31f46:	230b      	movs	r3, #11
   31f48:	425b      	negs	r3, r3
   31f4a:	e001      	b.n	31f50 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31f4c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31f4e:	2300      	movs	r3, #0
}
   31f50:	0018      	movs	r0, r3
   31f52:	46bd      	mov	sp, r7
   31f54:	b00e      	add	sp, #56	; 0x38
   31f56:	bdb0      	pop	{r4, r5, r7, pc}
   31f58:	0003ad08 	.word	0x0003ad08
   31f5c:	00035ab5 	.word	0x00035ab5
   31f60:	0003ad10 	.word	0x0003ad10
   31f64:	00035aa7 	.word	0x00035aa7
   31f68:	000356a5 	.word	0x000356a5
   31f6c:	00035a6d 	.word	0x00035a6d
   31f70:	00035a5b 	.word	0x00035a5b
   31f74:	000356b9 	.word	0x000356b9
   31f78:	000356ef 	.word	0x000356ef
   31f7c:	000320f1 	.word	0x000320f1
   31f80:	00031f9d 	.word	0x00031f9d
   31f84:	00026181 	.word	0x00026181
   31f88:	200046f8 	.word	0x200046f8
   31f8c:	00031bf9 	.word	0x00031bf9
   31f90:	000268cd 	.word	0x000268cd
   31f94:	00026395 	.word	0x00026395
   31f98:	000269d5 	.word	0x000269d5

00031f9c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31f9c:	b580      	push	{r7, lr}
   31f9e:	b086      	sub	sp, #24
   31fa0:	af00      	add	r7, sp, #0
   31fa2:	6078      	str	r0, [r7, #4]
   31fa4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31fa6:	687b      	ldr	r3, [r7, #4]
   31fa8:	22c0      	movs	r2, #192	; 0xc0
   31faa:	589b      	ldr	r3, [r3, r2]
   31fac:	2b00      	cmp	r3, #0
   31fae:	d007      	beq.n	31fc0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31fb0:	687b      	ldr	r3, [r7, #4]
   31fb2:	22c0      	movs	r2, #192	; 0xc0
   31fb4:	589b      	ldr	r3, [r3, r2]
   31fb6:	687a      	ldr	r2, [r7, #4]
   31fb8:	21c4      	movs	r1, #196	; 0xc4
   31fba:	5852      	ldr	r2, [r2, r1]
   31fbc:	0010      	movs	r0, r2
   31fbe:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31fc0:	687b      	ldr	r3, [r7, #4]
   31fc2:	33b0      	adds	r3, #176	; 0xb0
   31fc4:	2218      	movs	r2, #24
   31fc6:	2100      	movs	r1, #0
   31fc8:	0018      	movs	r0, r3
   31fca:	4b24      	ldr	r3, [pc, #144]	; (3205c <_http_client_clear_conn+0xc0>)
   31fcc:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31fce:	687b      	ldr	r3, [r7, #4]
   31fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31fd2:	2b00      	cmp	r3, #0
   31fd4:	d005      	beq.n	31fe2 <_http_client_clear_conn+0x46>
		close(module->sock);
   31fd6:	687b      	ldr	r3, [r7, #4]
   31fd8:	781b      	ldrb	r3, [r3, #0]
   31fda:	b25b      	sxtb	r3, r3
   31fdc:	0018      	movs	r0, r3
   31fde:	4b20      	ldr	r3, [pc, #128]	; (32060 <_http_client_clear_conn+0xc4>)
   31fe0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31fe2:	687b      	ldr	r3, [r7, #4]
   31fe4:	781b      	ldrb	r3, [r3, #0]
   31fe6:	b25b      	sxtb	r3, r3
   31fe8:	001a      	movs	r2, r3
   31fea:	4b1e      	ldr	r3, [pc, #120]	; (32064 <_http_client_clear_conn+0xc8>)
   31fec:	0092      	lsls	r2, r2, #2
   31fee:	2100      	movs	r1, #0
   31ff0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31ff2:	687b      	ldr	r3, [r7, #4]
   31ff4:	336c      	adds	r3, #108	; 0x6c
   31ff6:	226c      	movs	r2, #108	; 0x6c
   31ff8:	2100      	movs	r1, #0
   31ffa:	0018      	movs	r0, r3
   31ffc:	4b17      	ldr	r3, [pc, #92]	; (3205c <_http_client_clear_conn+0xc0>)
   31ffe:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   32000:	687b      	ldr	r3, [r7, #4]
   32002:	33d8      	adds	r3, #216	; 0xd8
   32004:	2210      	movs	r2, #16
   32006:	2100      	movs	r1, #0
   32008:	0018      	movs	r0, r3
   3200a:	4b14      	ldr	r3, [pc, #80]	; (3205c <_http_client_clear_conn+0xc0>)
   3200c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3200e:	687b      	ldr	r3, [r7, #4]
   32010:	2200      	movs	r2, #0
   32012:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   32014:	687b      	ldr	r3, [r7, #4]
   32016:	22d8      	movs	r2, #216	; 0xd8
   32018:	2100      	movs	r1, #0
   3201a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3201c:	687b      	ldr	r3, [r7, #4]
   3201e:	2241      	movs	r2, #65	; 0x41
   32020:	5c99      	ldrb	r1, [r3, r2]
   32022:	2001      	movs	r0, #1
   32024:	4381      	bics	r1, r0
   32026:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   32028:	687b      	ldr	r3, [r7, #4]
   3202a:	2241      	movs	r2, #65	; 0x41
   3202c:	5c99      	ldrb	r1, [r3, r2]
   3202e:	2002      	movs	r0, #2
   32030:	4381      	bics	r1, r0
   32032:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   32034:	230c      	movs	r3, #12
   32036:	18fb      	adds	r3, r7, r3
   32038:	683a      	ldr	r2, [r7, #0]
   3203a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3203c:	687b      	ldr	r3, [r7, #4]
   3203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32040:	2b00      	cmp	r3, #0
   32042:	d006      	beq.n	32052 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   32044:	687b      	ldr	r3, [r7, #4]
   32046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32048:	220c      	movs	r2, #12
   3204a:	18ba      	adds	r2, r7, r2
   3204c:	6878      	ldr	r0, [r7, #4]
   3204e:	2104      	movs	r1, #4
   32050:	4798      	blx	r3
	}
}
   32052:	46c0      	nop			; (mov r8, r8)
   32054:	46bd      	mov	sp, r7
   32056:	b006      	add	sp, #24
   32058:	bd80      	pop	{r7, pc}
   3205a:	46c0      	nop			; (mov r8, r8)
   3205c:	000356ef 	.word	0x000356ef
   32060:	0002678d 	.word	0x0002678d
   32064:	200046f8 	.word	0x200046f8

00032068 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   32068:	b590      	push	{r4, r7, lr}
   3206a:	b087      	sub	sp, #28
   3206c:	af00      	add	r7, sp, #0
   3206e:	60f8      	str	r0, [r7, #12]
   32070:	60b9      	str	r1, [r7, #8]
   32072:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   32074:	68fb      	ldr	r3, [r7, #12]
   32076:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   32078:	697b      	ldr	r3, [r7, #20]
   3207a:	2241      	movs	r2, #65	; 0x41
   3207c:	5c99      	ldrb	r1, [r3, r2]
   3207e:	2001      	movs	r0, #1
   32080:	4301      	orrs	r1, r0
   32082:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   32084:	697b      	ldr	r3, [r7, #20]
   32086:	2000      	movs	r0, #0
   32088:	5618      	ldrsb	r0, [r3, r0]
   3208a:	687b      	ldr	r3, [r7, #4]
   3208c:	b29a      	uxth	r2, r3
   3208e:	68b9      	ldr	r1, [r7, #8]
   32090:	2300      	movs	r3, #0
   32092:	4c14      	ldr	r4, [pc, #80]	; (320e4 <_http_client_send_wait+0x7c>)
   32094:	47a0      	blx	r4
   32096:	0003      	movs	r3, r0
   32098:	613b      	str	r3, [r7, #16]
   3209a:	693b      	ldr	r3, [r7, #16]
   3209c:	2b00      	cmp	r3, #0
   3209e:	da0f      	bge.n	320c0 <_http_client_send_wait+0x58>
		module->sending = 0;
   320a0:	697b      	ldr	r3, [r7, #20]
   320a2:	2241      	movs	r2, #65	; 0x41
   320a4:	5c99      	ldrb	r1, [r3, r2]
   320a6:	2001      	movs	r0, #1
   320a8:	4381      	bics	r1, r0
   320aa:	5499      	strb	r1, [r3, r2]
		return result;
   320ac:	693b      	ldr	r3, [r7, #16]
   320ae:	e014      	b.n	320da <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   320b0:	2000      	movs	r0, #0
   320b2:	4b0d      	ldr	r3, [pc, #52]	; (320e8 <_http_client_send_wait+0x80>)
   320b4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   320b6:	697b      	ldr	r3, [r7, #20]
   320b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   320ba:	0018      	movs	r0, r3
   320bc:	4b0b      	ldr	r3, [pc, #44]	; (320ec <_http_client_send_wait+0x84>)
   320be:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   320c0:	697b      	ldr	r3, [r7, #20]
   320c2:	2241      	movs	r2, #65	; 0x41
   320c4:	5c9b      	ldrb	r3, [r3, r2]
   320c6:	2201      	movs	r2, #1
   320c8:	4013      	ands	r3, r2
   320ca:	b2db      	uxtb	r3, r3
   320cc:	2b00      	cmp	r3, #0
   320ce:	d003      	beq.n	320d8 <_http_client_send_wait+0x70>
   320d0:	697b      	ldr	r3, [r7, #20]
   320d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   320d4:	2b02      	cmp	r3, #2
   320d6:	d8eb      	bhi.n	320b0 <_http_client_send_wait+0x48>
	}

	return 0;
   320d8:	2300      	movs	r3, #0
}
   320da:	0018      	movs	r0, r3
   320dc:	46bd      	mov	sp, r7
   320de:	b007      	add	sp, #28
   320e0:	bd90      	pop	{r4, r7, pc}
   320e2:	46c0      	nop			; (mov r8, r8)
   320e4:	000264a9 	.word	0x000264a9
   320e8:	00022b55 	.word	0x00022b55
   320ec:	00033375 	.word	0x00033375

000320f0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   320f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   320f2:	46c6      	mov	lr, r8
   320f4:	b500      	push	{lr}
   320f6:	b0a0      	sub	sp, #128	; 0x80
   320f8:	af02      	add	r7, sp, #8
   320fa:	61f8      	str	r0, [r7, #28]
   320fc:	4668      	mov	r0, sp
   320fe:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32100:	2318      	movs	r3, #24
   32102:	2218      	movs	r2, #24
   32104:	18ba      	adds	r2, r7, r2
   32106:	18d0      	adds	r0, r2, r3
   32108:	4bbd      	ldr	r3, [pc, #756]	; (32400 <_http_client_request+0x310>)
   3210a:	469c      	mov	ip, r3
   3210c:	4663      	mov	r3, ip
   3210e:	cb16      	ldmia	r3!, {r1, r2, r4}
   32110:	c016      	stmia	r0!, {r1, r2, r4}
   32112:	469c      	mov	ip, r3
   32114:	4663      	mov	r3, ip
   32116:	681b      	ldr	r3, [r3, #0]
   32118:	469c      	mov	ip, r3
   3211a:	4663      	mov	r3, ip
   3211c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3211e:	69f8      	ldr	r0, [r7, #28]
   32120:	6e40      	ldr	r0, [r0, #100]	; 0x64
   32122:	4684      	mov	ip, r0
   32124:	2301      	movs	r3, #1
   32126:	425b      	negs	r3, r3
   32128:	4698      	mov	r8, r3
   3212a:	44c4      	add	ip, r8
   3212c:	4663      	mov	r3, ip
   3212e:	66fb      	str	r3, [r7, #108]	; 0x6c
   32130:	6038      	str	r0, [r7, #0]
   32132:	2300      	movs	r3, #0
   32134:	607b      	str	r3, [r7, #4]
   32136:	6839      	ldr	r1, [r7, #0]
   32138:	687a      	ldr	r2, [r7, #4]
   3213a:	000b      	movs	r3, r1
   3213c:	0f5b      	lsrs	r3, r3, #29
   3213e:	469c      	mov	ip, r3
   32140:	0013      	movs	r3, r2
   32142:	00db      	lsls	r3, r3, #3
   32144:	617b      	str	r3, [r7, #20]
   32146:	4663      	mov	r3, ip
   32148:	697c      	ldr	r4, [r7, #20]
   3214a:	431c      	orrs	r4, r3
   3214c:	617c      	str	r4, [r7, #20]
   3214e:	000b      	movs	r3, r1
   32150:	00db      	lsls	r3, r3, #3
   32152:	613b      	str	r3, [r7, #16]
   32154:	0005      	movs	r5, r0
   32156:	2200      	movs	r2, #0
   32158:	0016      	movs	r6, r2
   3215a:	0f6a      	lsrs	r2, r5, #29
   3215c:	00f3      	lsls	r3, r6, #3
   3215e:	60fb      	str	r3, [r7, #12]
   32160:	68fb      	ldr	r3, [r7, #12]
   32162:	4313      	orrs	r3, r2
   32164:	60fb      	str	r3, [r7, #12]
   32166:	00eb      	lsls	r3, r5, #3
   32168:	60bb      	str	r3, [r7, #8]
   3216a:	1dc3      	adds	r3, r0, #7
   3216c:	08db      	lsrs	r3, r3, #3
   3216e:	00db      	lsls	r3, r3, #3
   32170:	466a      	mov	r2, sp
   32172:	1ad3      	subs	r3, r2, r3
   32174:	469d      	mov	sp, r3
   32176:	ab02      	add	r3, sp, #8
   32178:	3300      	adds	r3, #0
   3217a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3217c:	69fb      	ldr	r3, [r7, #28]
   3217e:	2b00      	cmp	r3, #0
   32180:	d100      	bne.n	32184 <_http_client_request+0x94>
   32182:	e346      	b.n	32812 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   32184:	69fb      	ldr	r3, [r7, #28]
   32186:	2241      	movs	r2, #65	; 0x41
   32188:	5c9b      	ldrb	r3, [r3, r2]
   3218a:	2201      	movs	r2, #1
   3218c:	4013      	ands	r3, r2
   3218e:	b2db      	uxtb	r3, r3
   32190:	2b00      	cmp	r3, #0
   32192:	d000      	beq.n	32196 <_http_client_request+0xa6>
   32194:	e33f      	b.n	32816 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   32196:	69fb      	ldr	r3, [r7, #28]
   32198:	33b0      	adds	r3, #176	; 0xb0
   3219a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3219c:	69fb      	ldr	r3, [r7, #28]
   3219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   321a0:	2b03      	cmp	r3, #3
   321a2:	d003      	beq.n	321ac <_http_client_request+0xbc>
   321a4:	2b04      	cmp	r3, #4
   321a6:	d100      	bne.n	321aa <_http_client_request+0xba>
   321a8:	e1b3      	b.n	32512 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   321aa:	e32f      	b.n	3280c <_http_client_request+0x71c>
		module->req.content_length = 0;
   321ac:	69fb      	ldr	r3, [r7, #28]
   321ae:	22cc      	movs	r2, #204	; 0xcc
   321b0:	2100      	movs	r1, #0
   321b2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   321b4:	69fb      	ldr	r3, [r7, #28]
   321b6:	22d0      	movs	r2, #208	; 0xd0
   321b8:	2100      	movs	r1, #0
   321ba:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   321bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   321be:	69fb      	ldr	r3, [r7, #28]
   321c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   321c2:	4c90      	ldr	r4, [pc, #576]	; (32404 <_http_client_request+0x314>)
   321c4:	2334      	movs	r3, #52	; 0x34
   321c6:	2018      	movs	r0, #24
   321c8:	1838      	adds	r0, r7, r0
   321ca:	18c0      	adds	r0, r0, r3
   321cc:	69fb      	ldr	r3, [r7, #28]
   321ce:	9300      	str	r3, [sp, #0]
   321d0:	0023      	movs	r3, r4
   321d2:	4c8d      	ldr	r4, [pc, #564]	; (32408 <_http_client_request+0x318>)
   321d4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   321d6:	69fb      	ldr	r3, [r7, #28]
   321d8:	22c8      	movs	r2, #200	; 0xc8
   321da:	5c9b      	ldrb	r3, [r3, r2]
   321dc:	2b01      	cmp	r3, #1
   321de:	d10a      	bne.n	321f6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   321e0:	498a      	ldr	r1, [pc, #552]	; (3240c <_http_client_request+0x31c>)
   321e2:	2334      	movs	r3, #52	; 0x34
   321e4:	2218      	movs	r2, #24
   321e6:	4694      	mov	ip, r2
   321e8:	44bc      	add	ip, r7
   321ea:	4463      	add	r3, ip
   321ec:	2204      	movs	r2, #4
   321ee:	0018      	movs	r0, r3
   321f0:	4b87      	ldr	r3, [pc, #540]	; (32410 <_http_client_request+0x320>)
   321f2:	4798      	blx	r3
   321f4:	e04e      	b.n	32294 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   321f6:	69fb      	ldr	r3, [r7, #28]
   321f8:	22c8      	movs	r2, #200	; 0xc8
   321fa:	5c9b      	ldrb	r3, [r3, r2]
   321fc:	2b02      	cmp	r3, #2
   321fe:	d10a      	bne.n	32216 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32200:	4984      	ldr	r1, [pc, #528]	; (32414 <_http_client_request+0x324>)
   32202:	2334      	movs	r3, #52	; 0x34
   32204:	2218      	movs	r2, #24
   32206:	4694      	mov	ip, r2
   32208:	44bc      	add	ip, r7
   3220a:	4463      	add	r3, ip
   3220c:	2205      	movs	r2, #5
   3220e:	0018      	movs	r0, r3
   32210:	4b7f      	ldr	r3, [pc, #508]	; (32410 <_http_client_request+0x320>)
   32212:	4798      	blx	r3
   32214:	e03e      	b.n	32294 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   32216:	69fb      	ldr	r3, [r7, #28]
   32218:	22c8      	movs	r2, #200	; 0xc8
   3221a:	5c9b      	ldrb	r3, [r3, r2]
   3221c:	2b03      	cmp	r3, #3
   3221e:	d10a      	bne.n	32236 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32220:	497d      	ldr	r1, [pc, #500]	; (32418 <_http_client_request+0x328>)
   32222:	2334      	movs	r3, #52	; 0x34
   32224:	2218      	movs	r2, #24
   32226:	4694      	mov	ip, r2
   32228:	44bc      	add	ip, r7
   3222a:	4463      	add	r3, ip
   3222c:	2207      	movs	r2, #7
   3222e:	0018      	movs	r0, r3
   32230:	4b77      	ldr	r3, [pc, #476]	; (32410 <_http_client_request+0x320>)
   32232:	4798      	blx	r3
   32234:	e02e      	b.n	32294 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   32236:	69fb      	ldr	r3, [r7, #28]
   32238:	22c8      	movs	r2, #200	; 0xc8
   3223a:	5c9b      	ldrb	r3, [r3, r2]
   3223c:	2b04      	cmp	r3, #4
   3223e:	d10a      	bne.n	32256 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32240:	4976      	ldr	r1, [pc, #472]	; (3241c <_http_client_request+0x32c>)
   32242:	2334      	movs	r3, #52	; 0x34
   32244:	2218      	movs	r2, #24
   32246:	4694      	mov	ip, r2
   32248:	44bc      	add	ip, r7
   3224a:	4463      	add	r3, ip
   3224c:	2204      	movs	r2, #4
   3224e:	0018      	movs	r0, r3
   32250:	4b6f      	ldr	r3, [pc, #444]	; (32410 <_http_client_request+0x320>)
   32252:	4798      	blx	r3
   32254:	e01e      	b.n	32294 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   32256:	69fb      	ldr	r3, [r7, #28]
   32258:	22c8      	movs	r2, #200	; 0xc8
   3225a:	5c9b      	ldrb	r3, [r3, r2]
   3225c:	2b05      	cmp	r3, #5
   3225e:	d10a      	bne.n	32276 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32260:	496f      	ldr	r1, [pc, #444]	; (32420 <_http_client_request+0x330>)
   32262:	2334      	movs	r3, #52	; 0x34
   32264:	2218      	movs	r2, #24
   32266:	4694      	mov	ip, r2
   32268:	44bc      	add	ip, r7
   3226a:	4463      	add	r3, ip
   3226c:	2208      	movs	r2, #8
   3226e:	0018      	movs	r0, r3
   32270:	4b67      	ldr	r3, [pc, #412]	; (32410 <_http_client_request+0x320>)
   32272:	4798      	blx	r3
   32274:	e00e      	b.n	32294 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   32276:	69fb      	ldr	r3, [r7, #28]
   32278:	22c8      	movs	r2, #200	; 0xc8
   3227a:	5c9b      	ldrb	r3, [r3, r2]
   3227c:	2b06      	cmp	r3, #6
   3227e:	d109      	bne.n	32294 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32280:	4968      	ldr	r1, [pc, #416]	; (32424 <_http_client_request+0x334>)
   32282:	2334      	movs	r3, #52	; 0x34
   32284:	2218      	movs	r2, #24
   32286:	4694      	mov	ip, r2
   32288:	44bc      	add	ip, r7
   3228a:	4463      	add	r3, ip
   3228c:	2205      	movs	r2, #5
   3228e:	0018      	movs	r0, r3
   32290:	4b5f      	ldr	r3, [pc, #380]	; (32410 <_http_client_request+0x320>)
   32292:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   32294:	69fb      	ldr	r3, [r7, #28]
   32296:	3370      	adds	r3, #112	; 0x70
   32298:	001c      	movs	r4, r3
   3229a:	69fb      	ldr	r3, [r7, #28]
   3229c:	3370      	adds	r3, #112	; 0x70
   3229e:	0018      	movs	r0, r3
   322a0:	4b61      	ldr	r3, [pc, #388]	; (32428 <_http_client_request+0x338>)
   322a2:	4798      	blx	r3
   322a4:	0002      	movs	r2, r0
   322a6:	2334      	movs	r3, #52	; 0x34
   322a8:	2118      	movs	r1, #24
   322aa:	468c      	mov	ip, r1
   322ac:	44bc      	add	ip, r7
   322ae:	4463      	add	r3, ip
   322b0:	0021      	movs	r1, r4
   322b2:	0018      	movs	r0, r3
   322b4:	4b56      	ldr	r3, [pc, #344]	; (32410 <_http_client_request+0x320>)
   322b6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   322b8:	495c      	ldr	r1, [pc, #368]	; (3242c <_http_client_request+0x33c>)
   322ba:	2334      	movs	r3, #52	; 0x34
   322bc:	2218      	movs	r2, #24
   322be:	4694      	mov	ip, r2
   322c0:	44bc      	add	ip, r7
   322c2:	4463      	add	r3, ip
   322c4:	220b      	movs	r2, #11
   322c6:	0018      	movs	r0, r3
   322c8:	4b51      	ldr	r3, [pc, #324]	; (32410 <_http_client_request+0x320>)
   322ca:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   322cc:	4958      	ldr	r1, [pc, #352]	; (32430 <_http_client_request+0x340>)
   322ce:	2334      	movs	r3, #52	; 0x34
   322d0:	2218      	movs	r2, #24
   322d2:	4694      	mov	ip, r2
   322d4:	44bc      	add	ip, r7
   322d6:	4463      	add	r3, ip
   322d8:	220c      	movs	r2, #12
   322da:	0018      	movs	r0, r3
   322dc:	4b4c      	ldr	r3, [pc, #304]	; (32410 <_http_client_request+0x320>)
   322de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   322e0:	69fb      	ldr	r3, [r7, #28]
   322e2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   322e4:	69fb      	ldr	r3, [r7, #28]
   322e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   322e8:	0018      	movs	r0, r3
   322ea:	4b4f      	ldr	r3, [pc, #316]	; (32428 <_http_client_request+0x338>)
   322ec:	4798      	blx	r3
   322ee:	0002      	movs	r2, r0
   322f0:	2334      	movs	r3, #52	; 0x34
   322f2:	2118      	movs	r1, #24
   322f4:	468c      	mov	ip, r1
   322f6:	44bc      	add	ip, r7
   322f8:	4463      	add	r3, ip
   322fa:	0021      	movs	r1, r4
   322fc:	0018      	movs	r0, r3
   322fe:	4b44      	ldr	r3, [pc, #272]	; (32410 <_http_client_request+0x320>)
   32300:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32302:	494c      	ldr	r1, [pc, #304]	; (32434 <_http_client_request+0x344>)
   32304:	2334      	movs	r3, #52	; 0x34
   32306:	2218      	movs	r2, #24
   32308:	4694      	mov	ip, r2
   3230a:	44bc      	add	ip, r7
   3230c:	4463      	add	r3, ip
   3230e:	2202      	movs	r2, #2
   32310:	0018      	movs	r0, r3
   32312:	4b3f      	ldr	r3, [pc, #252]	; (32410 <_http_client_request+0x320>)
   32314:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   32316:	4948      	ldr	r1, [pc, #288]	; (32438 <_http_client_request+0x348>)
   32318:	2334      	movs	r3, #52	; 0x34
   3231a:	2218      	movs	r2, #24
   3231c:	4694      	mov	ip, r2
   3231e:	44bc      	add	ip, r7
   32320:	4463      	add	r3, ip
   32322:	2206      	movs	r2, #6
   32324:	0018      	movs	r0, r3
   32326:	4b3a      	ldr	r3, [pc, #232]	; (32410 <_http_client_request+0x320>)
   32328:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3232a:	69fb      	ldr	r3, [r7, #28]
   3232c:	1c5c      	adds	r4, r3, #1
   3232e:	69fb      	ldr	r3, [r7, #28]
   32330:	3301      	adds	r3, #1
   32332:	0018      	movs	r0, r3
   32334:	4b3c      	ldr	r3, [pc, #240]	; (32428 <_http_client_request+0x338>)
   32336:	4798      	blx	r3
   32338:	0002      	movs	r2, r0
   3233a:	2334      	movs	r3, #52	; 0x34
   3233c:	2118      	movs	r1, #24
   3233e:	468c      	mov	ip, r1
   32340:	44bc      	add	ip, r7
   32342:	4463      	add	r3, ip
   32344:	0021      	movs	r1, r4
   32346:	0018      	movs	r0, r3
   32348:	4b31      	ldr	r3, [pc, #196]	; (32410 <_http_client_request+0x320>)
   3234a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3234c:	4939      	ldr	r1, [pc, #228]	; (32434 <_http_client_request+0x344>)
   3234e:	2334      	movs	r3, #52	; 0x34
   32350:	2218      	movs	r2, #24
   32352:	4694      	mov	ip, r2
   32354:	44bc      	add	ip, r7
   32356:	4463      	add	r3, ip
   32358:	2202      	movs	r2, #2
   3235a:	0018      	movs	r0, r3
   3235c:	4b2c      	ldr	r3, [pc, #176]	; (32410 <_http_client_request+0x320>)
   3235e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32360:	4936      	ldr	r1, [pc, #216]	; (3243c <_http_client_request+0x34c>)
   32362:	2334      	movs	r3, #52	; 0x34
   32364:	2218      	movs	r2, #24
   32366:	4694      	mov	ip, r2
   32368:	44bc      	add	ip, r7
   3236a:	4463      	add	r3, ip
   3236c:	2218      	movs	r2, #24
   3236e:	0018      	movs	r0, r3
   32370:	4b27      	ldr	r3, [pc, #156]	; (32410 <_http_client_request+0x320>)
   32372:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   32374:	4932      	ldr	r1, [pc, #200]	; (32440 <_http_client_request+0x350>)
   32376:	2334      	movs	r3, #52	; 0x34
   32378:	2218      	movs	r2, #24
   3237a:	4694      	mov	ip, r2
   3237c:	44bc      	add	ip, r7
   3237e:	4463      	add	r3, ip
   32380:	2213      	movs	r2, #19
   32382:	0018      	movs	r0, r3
   32384:	4b22      	ldr	r3, [pc, #136]	; (32410 <_http_client_request+0x320>)
   32386:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32388:	492e      	ldr	r1, [pc, #184]	; (32444 <_http_client_request+0x354>)
   3238a:	2334      	movs	r3, #52	; 0x34
   3238c:	2218      	movs	r2, #24
   3238e:	4694      	mov	ip, r2
   32390:	44bc      	add	ip, r7
   32392:	4463      	add	r3, ip
   32394:	2217      	movs	r2, #23
   32396:	0018      	movs	r0, r3
   32398:	4b1d      	ldr	r3, [pc, #116]	; (32410 <_http_client_request+0x320>)
   3239a:	4798      	blx	r3
		if (entity->read != NULL) {
   3239c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3239e:	68db      	ldr	r3, [r3, #12]
   323a0:	2b00      	cmp	r3, #0
   323a2:	d100      	bne.n	323a6 <_http_client_request+0x2b6>
   323a4:	e088      	b.n	324b8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   323a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323a8:	781b      	ldrb	r3, [r3, #0]
   323aa:	2b00      	cmp	r3, #0
   323ac:	d00f      	beq.n	323ce <_http_client_request+0x2de>
				module->req.content_length = -1;
   323ae:	69fb      	ldr	r3, [r7, #28]
   323b0:	21cc      	movs	r1, #204	; 0xcc
   323b2:	2201      	movs	r2, #1
   323b4:	4252      	negs	r2, r2
   323b6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   323b8:	4923      	ldr	r1, [pc, #140]	; (32448 <_http_client_request+0x358>)
   323ba:	2334      	movs	r3, #52	; 0x34
   323bc:	2218      	movs	r2, #24
   323be:	4694      	mov	ip, r2
   323c0:	44bc      	add	ip, r7
   323c2:	4463      	add	r3, ip
   323c4:	221c      	movs	r2, #28
   323c6:	0018      	movs	r0, r3
   323c8:	4b11      	ldr	r3, [pc, #68]	; (32410 <_http_client_request+0x320>)
   323ca:	4798      	blx	r3
   323cc:	e074      	b.n	324b8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   323ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323d0:	689b      	ldr	r3, [r3, #8]
   323d2:	2b00      	cmp	r3, #0
   323d4:	d070      	beq.n	324b8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   323d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323d8:	689a      	ldr	r2, [r3, #8]
   323da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323dc:	695b      	ldr	r3, [r3, #20]
   323de:	0018      	movs	r0, r3
   323e0:	4790      	blx	r2
   323e2:	0001      	movs	r1, r0
   323e4:	69fb      	ldr	r3, [r7, #28]
   323e6:	22cc      	movs	r2, #204	; 0xcc
   323e8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   323ea:	69fb      	ldr	r3, [r7, #28]
   323ec:	22cc      	movs	r2, #204	; 0xcc
   323ee:	589b      	ldr	r3, [r3, r2]
   323f0:	2b00      	cmp	r3, #0
   323f2:	da2b      	bge.n	3244c <_http_client_request+0x35c>
					module->req.content_length = 0;
   323f4:	69fb      	ldr	r3, [r7, #28]
   323f6:	22cc      	movs	r2, #204	; 0xcc
   323f8:	2100      	movs	r1, #0
   323fa:	5099      	str	r1, [r3, r2]
   323fc:	e05c      	b.n	324b8 <_http_client_request+0x3c8>
   323fe:	46c0      	nop			; (mov r8, r8)
   32400:	0003adf8 	.word	0x0003adf8
   32404:	00032069 	.word	0x00032069
   32408:	00032fd1 	.word	0x00032fd1
   3240c:	0003ad1c 	.word	0x0003ad1c
   32410:	00033051 	.word	0x00033051
   32414:	0003ad24 	.word	0x0003ad24
   32418:	0003ad2c 	.word	0x0003ad2c
   3241c:	0003ad34 	.word	0x0003ad34
   32420:	0003ad3c 	.word	0x0003ad3c
   32424:	0003ad48 	.word	0x0003ad48
   32428:	00035aa7 	.word	0x00035aa7
   3242c:	0003ad50 	.word	0x0003ad50
   32430:	0003ad5c 	.word	0x0003ad5c
   32434:	0003ad6c 	.word	0x0003ad6c
   32438:	0003ad70 	.word	0x0003ad70
   3243c:	0003ad78 	.word	0x0003ad78
   32440:	0003ad94 	.word	0x0003ad94
   32444:	0003ada8 	.word	0x0003ada8
   32448:	0003adc0 	.word	0x0003adc0
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3244c:	69fb      	ldr	r3, [r7, #28]
   3244e:	22cc      	movs	r2, #204	; 0xcc
   32450:	589b      	ldr	r3, [r3, r2]
   32452:	001a      	movs	r2, r3
   32454:	49e0      	ldr	r1, [pc, #896]	; (327d8 <_http_client_request+0x6e8>)
   32456:	2328      	movs	r3, #40	; 0x28
   32458:	2018      	movs	r0, #24
   3245a:	4684      	mov	ip, r0
   3245c:	44bc      	add	ip, r7
   3245e:	4463      	add	r3, ip
   32460:	0018      	movs	r0, r3
   32462:	4bde      	ldr	r3, [pc, #888]	; (327dc <_http_client_request+0x6ec>)
   32464:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   32466:	49de      	ldr	r1, [pc, #888]	; (327e0 <_http_client_request+0x6f0>)
   32468:	2334      	movs	r3, #52	; 0x34
   3246a:	2218      	movs	r2, #24
   3246c:	4694      	mov	ip, r2
   3246e:	44bc      	add	ip, r7
   32470:	4463      	add	r3, ip
   32472:	2210      	movs	r2, #16
   32474:	0018      	movs	r0, r3
   32476:	4bdb      	ldr	r3, [pc, #876]	; (327e4 <_http_client_request+0x6f4>)
   32478:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3247a:	2328      	movs	r3, #40	; 0x28
   3247c:	2218      	movs	r2, #24
   3247e:	4694      	mov	ip, r2
   32480:	44bc      	add	ip, r7
   32482:	4463      	add	r3, ip
   32484:	0018      	movs	r0, r3
   32486:	4bd8      	ldr	r3, [pc, #864]	; (327e8 <_http_client_request+0x6f8>)
   32488:	4798      	blx	r3
   3248a:	0002      	movs	r2, r0
   3248c:	2328      	movs	r3, #40	; 0x28
   3248e:	2118      	movs	r1, #24
   32490:	1879      	adds	r1, r7, r1
   32492:	18c9      	adds	r1, r1, r3
   32494:	2334      	movs	r3, #52	; 0x34
   32496:	2018      	movs	r0, #24
   32498:	4684      	mov	ip, r0
   3249a:	44bc      	add	ip, r7
   3249c:	4463      	add	r3, ip
   3249e:	0018      	movs	r0, r3
   324a0:	4bd0      	ldr	r3, [pc, #832]	; (327e4 <_http_client_request+0x6f4>)
   324a2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   324a4:	49d1      	ldr	r1, [pc, #836]	; (327ec <_http_client_request+0x6fc>)
   324a6:	2334      	movs	r3, #52	; 0x34
   324a8:	2218      	movs	r2, #24
   324aa:	4694      	mov	ip, r2
   324ac:	44bc      	add	ip, r7
   324ae:	4463      	add	r3, ip
   324b0:	2202      	movs	r2, #2
   324b2:	0018      	movs	r0, r3
   324b4:	4bcb      	ldr	r3, [pc, #812]	; (327e4 <_http_client_request+0x6f4>)
   324b6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   324b8:	69fb      	ldr	r3, [r7, #28]
   324ba:	22d4      	movs	r2, #212	; 0xd4
   324bc:	589b      	ldr	r3, [r3, r2]
   324be:	2b00      	cmp	r3, #0
   324c0:	d012      	beq.n	324e8 <_http_client_request+0x3f8>
				module->req.ext_header,
   324c2:	69fb      	ldr	r3, [r7, #28]
   324c4:	22d4      	movs	r2, #212	; 0xd4
   324c6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   324c8:	69fb      	ldr	r3, [r7, #28]
   324ca:	22d4      	movs	r2, #212	; 0xd4
   324cc:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   324ce:	0018      	movs	r0, r3
   324d0:	4bc5      	ldr	r3, [pc, #788]	; (327e8 <_http_client_request+0x6f8>)
   324d2:	4798      	blx	r3
   324d4:	0002      	movs	r2, r0
   324d6:	2334      	movs	r3, #52	; 0x34
   324d8:	2118      	movs	r1, #24
   324da:	468c      	mov	ip, r1
   324dc:	44bc      	add	ip, r7
   324de:	4463      	add	r3, ip
   324e0:	0021      	movs	r1, r4
   324e2:	0018      	movs	r0, r3
   324e4:	4bbf      	ldr	r3, [pc, #764]	; (327e4 <_http_client_request+0x6f4>)
   324e6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   324e8:	49c0      	ldr	r1, [pc, #768]	; (327ec <_http_client_request+0x6fc>)
   324ea:	2334      	movs	r3, #52	; 0x34
   324ec:	2218      	movs	r2, #24
   324ee:	4694      	mov	ip, r2
   324f0:	44bc      	add	ip, r7
   324f2:	4463      	add	r3, ip
   324f4:	2202      	movs	r2, #2
   324f6:	0018      	movs	r0, r3
   324f8:	4bba      	ldr	r3, [pc, #744]	; (327e4 <_http_client_request+0x6f4>)
   324fa:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   324fc:	2334      	movs	r3, #52	; 0x34
   324fe:	2218      	movs	r2, #24
   32500:	4694      	mov	ip, r2
   32502:	44bc      	add	ip, r7
   32504:	4463      	add	r3, ip
   32506:	0018      	movs	r0, r3
   32508:	4bb9      	ldr	r3, [pc, #740]	; (327f0 <_http_client_request+0x700>)
   3250a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3250c:	69fb      	ldr	r3, [r7, #28]
   3250e:	2204      	movs	r2, #4
   32510:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   32512:	69fb      	ldr	r3, [r7, #28]
   32514:	22cc      	movs	r2, #204	; 0xcc
   32516:	589b      	ldr	r3, [r3, r2]
   32518:	2b00      	cmp	r3, #0
   3251a:	db00      	blt.n	3251e <_http_client_request+0x42e>
   3251c:	e0c6      	b.n	326ac <_http_client_request+0x5bc>
   3251e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32520:	68db      	ldr	r3, [r3, #12]
   32522:	2b00      	cmp	r3, #0
   32524:	d100      	bne.n	32528 <_http_client_request+0x438>
   32526:	e0c1      	b.n	326ac <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3252a:	68dc      	ldr	r4, [r3, #12]
   3252c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3252e:	6958      	ldr	r0, [r3, #20]
   32530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32532:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32534:	69fb      	ldr	r3, [r7, #28]
   32536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32538:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3253a:	69fb      	ldr	r3, [r7, #28]
   3253c:	22d0      	movs	r2, #208	; 0xd0
   3253e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32540:	002a      	movs	r2, r5
   32542:	47a0      	blx	r4
   32544:	0003      	movs	r3, r0
   32546:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3254a:	2b00      	cmp	r3, #0
   3254c:	da01      	bge.n	32552 <_http_client_request+0x462>
				size = 0;
   3254e:	2300      	movs	r3, #0
   32550:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   32552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32554:	220a      	movs	r2, #10
   32556:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3255a:	220d      	movs	r2, #13
   3255c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32560:	3305      	adds	r3, #5
   32562:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32564:	210d      	movs	r1, #13
   32566:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3256a:	3306      	adds	r3, #6
   3256c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3256e:	210a      	movs	r1, #10
   32570:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   32572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32574:	2b00      	cmp	r3, #0
   32576:	db14      	blt.n	325a2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3257a:	3302      	adds	r3, #2
   3257c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3257e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32580:	4a9c      	ldr	r2, [pc, #624]	; (327f4 <_http_client_request+0x704>)
   32582:	4013      	ands	r3, r2
   32584:	d504      	bpl.n	32590 <_http_client_request+0x4a0>
   32586:	3b01      	subs	r3, #1
   32588:	2210      	movs	r2, #16
   3258a:	4252      	negs	r2, r2
   3258c:	4313      	orrs	r3, r2
   3258e:	3301      	adds	r3, #1
   32590:	001a      	movs	r2, r3
   32592:	2318      	movs	r3, #24
   32594:	2118      	movs	r1, #24
   32596:	468c      	mov	ip, r1
   32598:	44bc      	add	ip, r7
   3259a:	4463      	add	r3, ip
   3259c:	5c9a      	ldrb	r2, [r3, r2]
   3259e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   325a0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   325a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325a4:	2b0f      	cmp	r3, #15
   325a6:	dd19      	ble.n	325dc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   325a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325aa:	3301      	adds	r3, #1
   325ac:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   325ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325b0:	2b00      	cmp	r3, #0
   325b2:	da00      	bge.n	325b6 <_http_client_request+0x4c6>
   325b4:	330f      	adds	r3, #15
   325b6:	111b      	asrs	r3, r3, #4
   325b8:	001a      	movs	r2, r3
   325ba:	4b8e      	ldr	r3, [pc, #568]	; (327f4 <_http_client_request+0x704>)
   325bc:	4013      	ands	r3, r2
   325be:	d504      	bpl.n	325ca <_http_client_request+0x4da>
   325c0:	3b01      	subs	r3, #1
   325c2:	2210      	movs	r2, #16
   325c4:	4252      	negs	r2, r2
   325c6:	4313      	orrs	r3, r2
   325c8:	3301      	adds	r3, #1
   325ca:	001a      	movs	r2, r3
   325cc:	2318      	movs	r3, #24
   325ce:	2118      	movs	r1, #24
   325d0:	468c      	mov	ip, r1
   325d2:	44bc      	add	ip, r7
   325d4:	4463      	add	r3, ip
   325d6:	5c9a      	ldrb	r2, [r3, r2]
   325d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   325da:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   325dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325de:	2bff      	cmp	r3, #255	; 0xff
   325e0:	dd18      	ble.n	32614 <_http_client_request+0x524>
				ptr = buffer;
   325e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325e4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   325e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325e8:	2b00      	cmp	r3, #0
   325ea:	da00      	bge.n	325ee <_http_client_request+0x4fe>
   325ec:	33ff      	adds	r3, #255	; 0xff
   325ee:	121b      	asrs	r3, r3, #8
   325f0:	001a      	movs	r2, r3
   325f2:	4b80      	ldr	r3, [pc, #512]	; (327f4 <_http_client_request+0x704>)
   325f4:	4013      	ands	r3, r2
   325f6:	d504      	bpl.n	32602 <_http_client_request+0x512>
   325f8:	3b01      	subs	r3, #1
   325fa:	2210      	movs	r2, #16
   325fc:	4252      	negs	r2, r2
   325fe:	4313      	orrs	r3, r2
   32600:	3301      	adds	r3, #1
   32602:	001a      	movs	r2, r3
   32604:	2318      	movs	r3, #24
   32606:	2118      	movs	r1, #24
   32608:	468c      	mov	ip, r1
   3260a:	44bc      	add	ip, r7
   3260c:	4463      	add	r3, ip
   3260e:	5c9a      	ldrb	r2, [r3, r2]
   32610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32612:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   32614:	69fb      	ldr	r3, [r7, #28]
   32616:	2000      	movs	r0, #0
   32618:	5618      	ldrsb	r0, [r3, r0]
   3261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3261c:	3303      	adds	r3, #3
   3261e:	001a      	movs	r2, r3
   32620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32622:	1ad3      	subs	r3, r2, r3
   32624:	b29a      	uxth	r2, r3
   32626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32628:	b29b      	uxth	r3, r3
   3262a:	18d3      	adds	r3, r2, r3
   3262c:	b29b      	uxth	r3, r3
   3262e:	3304      	adds	r3, #4
   32630:	b29a      	uxth	r2, r3
   32632:	6f39      	ldr	r1, [r7, #112]	; 0x70
   32634:	2300      	movs	r3, #0
   32636:	4c70      	ldr	r4, [pc, #448]	; (327f8 <_http_client_request+0x708>)
   32638:	47a0      	blx	r4
   3263a:	0003      	movs	r3, r0
   3263c:	663b      	str	r3, [r7, #96]	; 0x60
   3263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32640:	2b00      	cmp	r3, #0
   32642:	da07      	bge.n	32654 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   32644:	2305      	movs	r3, #5
   32646:	425a      	negs	r2, r3
   32648:	69fb      	ldr	r3, [r7, #28]
   3264a:	0011      	movs	r1, r2
   3264c:	0018      	movs	r0, r3
   3264e:	4b6b      	ldr	r3, [pc, #428]	; (327fc <_http_client_request+0x70c>)
   32650:	4798      	blx	r3
				return;
   32652:	e0e1      	b.n	32818 <_http_client_request+0x728>
			module->req.sent_length += size;
   32654:	69fb      	ldr	r3, [r7, #28]
   32656:	22d0      	movs	r2, #208	; 0xd0
   32658:	589a      	ldr	r2, [r3, r2]
   3265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3265c:	18d2      	adds	r2, r2, r3
   3265e:	69fb      	ldr	r3, [r7, #28]
   32660:	21d0      	movs	r1, #208	; 0xd0
   32662:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   32664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32666:	2b00      	cmp	r3, #0
   32668:	d000      	beq.n	3266c <_http_client_request+0x57c>
   3266a:	e0c9      	b.n	32800 <_http_client_request+0x710>
				if (module->req.entity.close) {
   3266c:	69fb      	ldr	r3, [r7, #28]
   3266e:	22c0      	movs	r2, #192	; 0xc0
   32670:	589b      	ldr	r3, [r3, r2]
   32672:	2b00      	cmp	r3, #0
   32674:	d007      	beq.n	32686 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   32676:	69fb      	ldr	r3, [r7, #28]
   32678:	22c0      	movs	r2, #192	; 0xc0
   3267a:	589b      	ldr	r3, [r3, r2]
   3267c:	69fa      	ldr	r2, [r7, #28]
   3267e:	21c4      	movs	r1, #196	; 0xc4
   32680:	5852      	ldr	r2, [r2, r1]
   32682:	0010      	movs	r0, r2
   32684:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32686:	69fb      	ldr	r3, [r7, #28]
   32688:	2202      	movs	r2, #2
   3268a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3268c:	69fb      	ldr	r3, [r7, #28]
   3268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32690:	2b00      	cmp	r3, #0
   32692:	d100      	bne.n	32696 <_http_client_request+0x5a6>
   32694:	e0b5      	b.n	32802 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32696:	69fb      	ldr	r3, [r7, #28]
   32698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3269a:	220c      	movs	r2, #12
   3269c:	2118      	movs	r1, #24
   3269e:	468c      	mov	ip, r1
   326a0:	44bc      	add	ip, r7
   326a2:	4462      	add	r2, ip
   326a4:	69f8      	ldr	r0, [r7, #28]
   326a6:	2101      	movs	r1, #1
   326a8:	4798      	blx	r3
				break;
   326aa:	e0aa      	b.n	32802 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   326ac:	69fb      	ldr	r3, [r7, #28]
   326ae:	22cc      	movs	r2, #204	; 0xcc
   326b0:	589b      	ldr	r3, [r3, r2]
   326b2:	2b00      	cmp	r3, #0
   326b4:	dc00      	bgt.n	326b8 <_http_client_request+0x5c8>
   326b6:	e07c      	b.n	327b2 <_http_client_request+0x6c2>
   326b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   326ba:	68db      	ldr	r3, [r3, #12]
   326bc:	2b00      	cmp	r3, #0
   326be:	d100      	bne.n	326c2 <_http_client_request+0x5d2>
   326c0:	e077      	b.n	327b2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   326c2:	69fb      	ldr	r3, [r7, #28]
   326c4:	22d0      	movs	r2, #208	; 0xd0
   326c6:	589a      	ldr	r2, [r3, r2]
   326c8:	69fb      	ldr	r3, [r7, #28]
   326ca:	21cc      	movs	r1, #204	; 0xcc
   326cc:	585b      	ldr	r3, [r3, r1]
   326ce:	429a      	cmp	r2, r3
   326d0:	db1f      	blt.n	32712 <_http_client_request+0x622>
				if (module->req.entity.close) {
   326d2:	69fb      	ldr	r3, [r7, #28]
   326d4:	22c0      	movs	r2, #192	; 0xc0
   326d6:	589b      	ldr	r3, [r3, r2]
   326d8:	2b00      	cmp	r3, #0
   326da:	d007      	beq.n	326ec <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   326dc:	69fb      	ldr	r3, [r7, #28]
   326de:	22c0      	movs	r2, #192	; 0xc0
   326e0:	589b      	ldr	r3, [r3, r2]
   326e2:	69fa      	ldr	r2, [r7, #28]
   326e4:	21c4      	movs	r1, #196	; 0xc4
   326e6:	5852      	ldr	r2, [r2, r1]
   326e8:	0010      	movs	r0, r2
   326ea:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   326ec:	69fb      	ldr	r3, [r7, #28]
   326ee:	2202      	movs	r2, #2
   326f0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   326f2:	69fb      	ldr	r3, [r7, #28]
   326f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326f6:	2b00      	cmp	r3, #0
   326f8:	d100      	bne.n	326fc <_http_client_request+0x60c>
   326fa:	e084      	b.n	32806 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   326fc:	69fb      	ldr	r3, [r7, #28]
   326fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32700:	220c      	movs	r2, #12
   32702:	2118      	movs	r1, #24
   32704:	468c      	mov	ip, r1
   32706:	44bc      	add	ip, r7
   32708:	4462      	add	r2, ip
   3270a:	69f8      	ldr	r0, [r7, #28]
   3270c:	2101      	movs	r1, #1
   3270e:	4798      	blx	r3
				break;
   32710:	e079      	b.n	32806 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   32712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32714:	68dc      	ldr	r4, [r3, #12]
   32716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32718:	6958      	ldr	r0, [r3, #20]
   3271a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3271c:	69fb      	ldr	r3, [r7, #28]
   3271e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32720:	69fb      	ldr	r3, [r7, #28]
   32722:	22d0      	movs	r2, #208	; 0xd0
   32724:	589b      	ldr	r3, [r3, r2]
   32726:	002a      	movs	r2, r5
   32728:	47a0      	blx	r4
   3272a:	0003      	movs	r3, r0
   3272c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3272e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32730:	2b00      	cmp	r3, #0
   32732:	da0d      	bge.n	32750 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   32734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32736:	2b00      	cmp	r3, #0
   32738:	d102      	bne.n	32740 <_http_client_request+0x650>
   3273a:	234d      	movs	r3, #77	; 0x4d
   3273c:	425b      	negs	r3, r3
   3273e:	e001      	b.n	32744 <_http_client_request+0x654>
   32740:	2305      	movs	r3, #5
   32742:	425b      	negs	r3, r3
   32744:	69fa      	ldr	r2, [r7, #28]
   32746:	0019      	movs	r1, r3
   32748:	0010      	movs	r0, r2
   3274a:	4b2c      	ldr	r3, [pc, #176]	; (327fc <_http_client_request+0x70c>)
   3274c:	4798      	blx	r3
			if (size < 0) {
   3274e:	e057      	b.n	32800 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32750:	69fb      	ldr	r3, [r7, #28]
   32752:	22cc      	movs	r2, #204	; 0xcc
   32754:	589a      	ldr	r2, [r3, r2]
   32756:	69fb      	ldr	r3, [r7, #28]
   32758:	21d0      	movs	r1, #208	; 0xd0
   3275a:	585b      	ldr	r3, [r3, r1]
   3275c:	1ad2      	subs	r2, r2, r3
   3275e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32760:	429a      	cmp	r2, r3
   32762:	da07      	bge.n	32774 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   32764:	69fb      	ldr	r3, [r7, #28]
   32766:	22cc      	movs	r2, #204	; 0xcc
   32768:	589a      	ldr	r2, [r3, r2]
   3276a:	69fb      	ldr	r3, [r7, #28]
   3276c:	21d0      	movs	r1, #208	; 0xd0
   3276e:	585b      	ldr	r3, [r3, r1]
   32770:	1ad3      	subs	r3, r2, r3
   32772:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   32774:	69fb      	ldr	r3, [r7, #28]
   32776:	2000      	movs	r0, #0
   32778:	5618      	ldrsb	r0, [r3, r0]
   3277a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3277c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3277e:	b29a      	uxth	r2, r3
   32780:	2300      	movs	r3, #0
   32782:	4c1d      	ldr	r4, [pc, #116]	; (327f8 <_http_client_request+0x708>)
   32784:	47a0      	blx	r4
   32786:	0003      	movs	r3, r0
   32788:	663b      	str	r3, [r7, #96]	; 0x60
   3278a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   3278c:	2b00      	cmp	r3, #0
   3278e:	da07      	bge.n	327a0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32790:	2305      	movs	r3, #5
   32792:	425a      	negs	r2, r3
   32794:	69fb      	ldr	r3, [r7, #28]
   32796:	0011      	movs	r1, r2
   32798:	0018      	movs	r0, r3
   3279a:	4b18      	ldr	r3, [pc, #96]	; (327fc <_http_client_request+0x70c>)
   3279c:	4798      	blx	r3
					return;
   3279e:	e03b      	b.n	32818 <_http_client_request+0x728>
				module->req.sent_length += size;
   327a0:	69fb      	ldr	r3, [r7, #28]
   327a2:	22d0      	movs	r2, #208	; 0xd0
   327a4:	589a      	ldr	r2, [r3, r2]
   327a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327a8:	18d2      	adds	r2, r2, r3
   327aa:	69fb      	ldr	r3, [r7, #28]
   327ac:	21d0      	movs	r1, #208	; 0xd0
   327ae:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   327b0:	e026      	b.n	32800 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   327b2:	69fb      	ldr	r3, [r7, #28]
   327b4:	2202      	movs	r2, #2
   327b6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   327b8:	69fb      	ldr	r3, [r7, #28]
   327ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327bc:	2b00      	cmp	r3, #0
   327be:	d024      	beq.n	3280a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   327c0:	69fb      	ldr	r3, [r7, #28]
   327c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327c4:	220c      	movs	r2, #12
   327c6:	2118      	movs	r1, #24
   327c8:	468c      	mov	ip, r1
   327ca:	44bc      	add	ip, r7
   327cc:	4462      	add	r2, ip
   327ce:	69f8      	ldr	r0, [r7, #28]
   327d0:	2101      	movs	r1, #1
   327d2:	4798      	blx	r3
			break;
   327d4:	e019      	b.n	3280a <_http_client_request+0x71a>
   327d6:	46c0      	nop			; (mov r8, r8)
   327d8:	0003ade0 	.word	0x0003ade0
   327dc:	000359ad 	.word	0x000359ad
   327e0:	0003ade4 	.word	0x0003ade4
   327e4:	00033051 	.word	0x00033051
   327e8:	00035aa7 	.word	0x00035aa7
   327ec:	0003ad6c 	.word	0x0003ad6c
   327f0:	0003308d 	.word	0x0003308d
   327f4:	8000000f 	.word	0x8000000f
   327f8:	000264a9 	.word	0x000264a9
   327fc:	00031f9d 	.word	0x00031f9d
		break;
   32800:	e004      	b.n	3280c <_http_client_request+0x71c>
				break;
   32802:	46c0      	nop			; (mov r8, r8)
   32804:	e002      	b.n	3280c <_http_client_request+0x71c>
				break;
   32806:	46c0      	nop			; (mov r8, r8)
   32808:	e000      	b.n	3280c <_http_client_request+0x71c>
			break;
   3280a:	46c0      	nop			; (mov r8, r8)
   3280c:	69bb      	ldr	r3, [r7, #24]
   3280e:	469d      	mov	sp, r3
   32810:	e004      	b.n	3281c <_http_client_request+0x72c>
		return;
   32812:	46c0      	nop			; (mov r8, r8)
   32814:	e000      	b.n	32818 <_http_client_request+0x728>
		return;
   32816:	46c0      	nop			; (mov r8, r8)
   32818:	69bb      	ldr	r3, [r7, #24]
   3281a:	469d      	mov	sp, r3
	}
}
   3281c:	46bd      	mov	sp, r7
   3281e:	b01e      	add	sp, #120	; 0x78
   32820:	bc04      	pop	{r2}
   32822:	4690      	mov	r8, r2
   32824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32826:	46c0      	nop			; (mov r8, r8)

00032828 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32828:	b590      	push	{r4, r7, lr}
   3282a:	b083      	sub	sp, #12
   3282c:	af00      	add	r7, sp, #0
   3282e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32830:	687b      	ldr	r3, [r7, #4]
   32832:	2b00      	cmp	r3, #0
   32834:	d021      	beq.n	3287a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   32836:	687b      	ldr	r3, [r7, #4]
   32838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3283a:	687b      	ldr	r3, [r7, #4]
   3283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3283e:	429a      	cmp	r2, r3
   32840:	d307      	bcc.n	32852 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   32842:	238b      	movs	r3, #139	; 0x8b
   32844:	425a      	negs	r2, r3
   32846:	687b      	ldr	r3, [r7, #4]
   32848:	0011      	movs	r1, r2
   3284a:	0018      	movs	r0, r3
   3284c:	4b0d      	ldr	r3, [pc, #52]	; (32884 <_http_client_recv_packet+0x5c>)
   3284e:	4798      	blx	r3
		return;
   32850:	e014      	b.n	3287c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   32852:	687b      	ldr	r3, [r7, #4]
   32854:	2000      	movs	r0, #0
   32856:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32858:	687b      	ldr	r3, [r7, #4]
   3285a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3285c:	687b      	ldr	r3, [r7, #4]
   3285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32860:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32862:	687b      	ldr	r3, [r7, #4]
   32864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   32866:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32868:	687b      	ldr	r3, [r7, #4]
   3286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   3286c:	b29b      	uxth	r3, r3
   3286e:	1ad3      	subs	r3, r2, r3
   32870:	b29a      	uxth	r2, r3
   32872:	2300      	movs	r3, #0
   32874:	4c04      	ldr	r4, [pc, #16]	; (32888 <_http_client_recv_packet+0x60>)
   32876:	47a0      	blx	r4
   32878:	e000      	b.n	3287c <_http_client_recv_packet+0x54>
		return;
   3287a:	46c0      	nop			; (mov r8, r8)
}
   3287c:	46bd      	mov	sp, r7
   3287e:	b003      	add	sp, #12
   32880:	bd90      	pop	{r4, r7, pc}
   32882:	46c0      	nop			; (mov r8, r8)
   32884:	00031f9d 	.word	0x00031f9d
   32888:	0002660d 	.word	0x0002660d

0003288c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   3288c:	b580      	push	{r7, lr}
   3288e:	b082      	sub	sp, #8
   32890:	af00      	add	r7, sp, #0
   32892:	6078      	str	r0, [r7, #4]
   32894:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   32896:	687b      	ldr	r3, [r7, #4]
   32898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3289a:	683b      	ldr	r3, [r7, #0]
   3289c:	18d2      	adds	r2, r2, r3
   3289e:	687b      	ldr	r3, [r7, #4]
   328a0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   328a2:	687b      	ldr	r3, [r7, #4]
   328a4:	2258      	movs	r2, #88	; 0x58
   328a6:	5a9b      	ldrh	r3, [r3, r2]
   328a8:	2b00      	cmp	r3, #0
   328aa:	d007      	beq.n	328bc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   328ac:	687b      	ldr	r3, [r7, #4]
   328ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   328b0:	687b      	ldr	r3, [r7, #4]
   328b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   328b4:	0019      	movs	r1, r3
   328b6:	0010      	movs	r0, r2
   328b8:	4b06      	ldr	r3, [pc, #24]	; (328d4 <_http_client_recved_packet+0x48>)
   328ba:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   328bc:	46c0      	nop			; (mov r8, r8)
   328be:	687b      	ldr	r3, [r7, #4]
   328c0:	0018      	movs	r0, r3
   328c2:	4b05      	ldr	r3, [pc, #20]	; (328d8 <_http_client_recved_packet+0x4c>)
   328c4:	4798      	blx	r3
   328c6:	1e03      	subs	r3, r0, #0
   328c8:	d1f9      	bne.n	328be <_http_client_recved_packet+0x32>
}
   328ca:	46c0      	nop			; (mov r8, r8)
   328cc:	46bd      	mov	sp, r7
   328ce:	b002      	add	sp, #8
   328d0:	bd80      	pop	{r7, pc}
   328d2:	46c0      	nop			; (mov r8, r8)
   328d4:	00033349 	.word	0x00033349
   328d8:	000328dd 	.word	0x000328dd

000328dc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   328dc:	b580      	push	{r7, lr}
   328de:	b082      	sub	sp, #8
   328e0:	af00      	add	r7, sp, #0
   328e2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   328e4:	687b      	ldr	r3, [r7, #4]
   328e6:	22d8      	movs	r2, #216	; 0xd8
   328e8:	589b      	ldr	r3, [r3, r2]
   328ea:	2b00      	cmp	r3, #0
   328ec:	d002      	beq.n	328f4 <_http_client_handle_response+0x18>
   328ee:	2b01      	cmp	r3, #1
   328f0:	d006      	beq.n	32900 <_http_client_handle_response+0x24>
   328f2:	e00b      	b.n	3290c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   328f4:	687b      	ldr	r3, [r7, #4]
   328f6:	0018      	movs	r0, r3
   328f8:	4b07      	ldr	r3, [pc, #28]	; (32918 <_http_client_handle_response+0x3c>)
   328fa:	4798      	blx	r3
   328fc:	0003      	movs	r3, r0
   328fe:	e006      	b.n	3290e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32900:	687b      	ldr	r3, [r7, #4]
   32902:	0018      	movs	r0, r3
   32904:	4b05      	ldr	r3, [pc, #20]	; (3291c <_http_client_handle_response+0x40>)
   32906:	4798      	blx	r3
   32908:	0003      	movs	r3, r0
   3290a:	e000      	b.n	3290e <_http_client_handle_response+0x32>
	}
	return 0;
   3290c:	2300      	movs	r3, #0
}
   3290e:	0018      	movs	r0, r3
   32910:	46bd      	mov	sp, r7
   32912:	b002      	add	sp, #8
   32914:	bd80      	pop	{r7, pc}
   32916:	46c0      	nop			; (mov r8, r8)
   32918:	00032921 	.word	0x00032921
   3291c:	00032dd9 	.word	0x00032dd9

00032920 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32920:	b590      	push	{r4, r7, lr}
   32922:	b08b      	sub	sp, #44	; 0x2c
   32924:	af00      	add	r7, sp, #0
   32926:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32928:	687b      	ldr	r3, [r7, #4]
   3292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3292c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3292e:	4b9a      	ldr	r3, [pc, #616]	; (32b98 <_http_client_handle_header+0x278>)
   32930:	681a      	ldr	r2, [r3, #0]
   32932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32934:	0011      	movs	r1, r2
   32936:	0018      	movs	r0, r3
   32938:	4b98      	ldr	r3, [pc, #608]	; (32b9c <_http_client_handle_header+0x27c>)
   3293a:	4798      	blx	r3
   3293c:	0003      	movs	r3, r0
   3293e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32940:	69bb      	ldr	r3, [r7, #24]
   32942:	2b00      	cmp	r3, #0
   32944:	d007      	beq.n	32956 <_http_client_handle_header+0x36>
   32946:	687b      	ldr	r3, [r7, #4]
   32948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3294a:	687b      	ldr	r3, [r7, #4]
   3294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3294e:	18d2      	adds	r2, r2, r3
   32950:	69bb      	ldr	r3, [r7, #24]
   32952:	429a      	cmp	r2, r3
   32954:	d807      	bhi.n	32966 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   32956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32958:	687b      	ldr	r3, [r7, #4]
   3295a:	0011      	movs	r1, r2
   3295c:	0018      	movs	r0, r3
   3295e:	4b90      	ldr	r3, [pc, #576]	; (32ba0 <_http_client_handle_header+0x280>)
   32960:	4798      	blx	r3
			return 0;
   32962:	2300      	movs	r3, #0
   32964:	e114      	b.n	32b90 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   32966:	4b8c      	ldr	r3, [pc, #560]	; (32b98 <_http_client_handle_header+0x278>)
   32968:	681c      	ldr	r4, [r3, #0]
   3296a:	4b8b      	ldr	r3, [pc, #556]	; (32b98 <_http_client_handle_header+0x278>)
   3296c:	681b      	ldr	r3, [r3, #0]
   3296e:	0018      	movs	r0, r3
   32970:	4b8c      	ldr	r3, [pc, #560]	; (32ba4 <_http_client_handle_header+0x284>)
   32972:	4798      	blx	r3
   32974:	0002      	movs	r2, r0
   32976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32978:	0021      	movs	r1, r4
   3297a:	0018      	movs	r0, r3
   3297c:	4b8a      	ldr	r3, [pc, #552]	; (32ba8 <_http_client_handle_header+0x288>)
   3297e:	4798      	blx	r3
   32980:	1e03      	subs	r3, r0, #0
   32982:	d15d      	bne.n	32a40 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   32984:	4b84      	ldr	r3, [pc, #528]	; (32b98 <_http_client_handle_header+0x278>)
   32986:	681b      	ldr	r3, [r3, #0]
   32988:	0018      	movs	r0, r3
   3298a:	4b86      	ldr	r3, [pc, #536]	; (32ba4 <_http_client_handle_header+0x284>)
   3298c:	4798      	blx	r3
   3298e:	0002      	movs	r2, r0
   32990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32992:	189a      	adds	r2, r3, r2
   32994:	687b      	ldr	r3, [r7, #4]
   32996:	0011      	movs	r1, r2
   32998:	0018      	movs	r0, r3
   3299a:	4b81      	ldr	r3, [pc, #516]	; (32ba0 <_http_client_handle_header+0x280>)
   3299c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3299e:	687b      	ldr	r3, [r7, #4]
   329a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   329a2:	2b00      	cmp	r3, #0
   329a4:	d046      	beq.n	32a34 <_http_client_handle_header+0x114>
   329a6:	687b      	ldr	r3, [r7, #4]
   329a8:	22e4      	movs	r2, #228	; 0xe4
   329aa:	5a9b      	ldrh	r3, [r3, r2]
   329ac:	2b00      	cmp	r3, #0
   329ae:	d041      	beq.n	32a34 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   329b0:	687b      	ldr	r3, [r7, #4]
   329b2:	22dc      	movs	r2, #220	; 0xdc
   329b4:	589b      	ldr	r3, [r3, r2]
   329b6:	2b00      	cmp	r3, #0
   329b8:	da19      	bge.n	329ee <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   329ba:	687b      	ldr	r3, [r7, #4]
   329bc:	22e4      	movs	r2, #228	; 0xe4
   329be:	5a9a      	ldrh	r2, [r3, r2]
   329c0:	230c      	movs	r3, #12
   329c2:	18fb      	adds	r3, r7, r3
   329c4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   329c6:	230c      	movs	r3, #12
   329c8:	18fb      	adds	r3, r7, r3
   329ca:	2201      	movs	r2, #1
   329cc:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   329ce:	687b      	ldr	r3, [r7, #4]
   329d0:	22e0      	movs	r2, #224	; 0xe0
   329d2:	2100      	movs	r1, #0
   329d4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   329d6:	230c      	movs	r3, #12
   329d8:	18fb      	adds	r3, r7, r3
   329da:	2200      	movs	r2, #0
   329dc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   329de:	687b      	ldr	r3, [r7, #4]
   329e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   329e2:	220c      	movs	r2, #12
   329e4:	18ba      	adds	r2, r7, r2
   329e6:	6878      	ldr	r0, [r7, #4]
   329e8:	2102      	movs	r1, #2
   329ea:	4798      	blx	r3
   329ec:	e022      	b.n	32a34 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   329ee:	687b      	ldr	r3, [r7, #4]
   329f0:	22dc      	movs	r2, #220	; 0xdc
   329f2:	589a      	ldr	r2, [r3, r2]
   329f4:	687b      	ldr	r3, [r7, #4]
   329f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   329f8:	429a      	cmp	r2, r3
   329fa:	dd1b      	ble.n	32a34 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   329fc:	687b      	ldr	r3, [r7, #4]
   329fe:	22e4      	movs	r2, #228	; 0xe4
   32a00:	5a9a      	ldrh	r2, [r3, r2]
   32a02:	230c      	movs	r3, #12
   32a04:	18fb      	adds	r3, r7, r3
   32a06:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32a08:	687b      	ldr	r3, [r7, #4]
   32a0a:	22dc      	movs	r2, #220	; 0xdc
   32a0c:	589b      	ldr	r3, [r3, r2]
   32a0e:	001a      	movs	r2, r3
   32a10:	230c      	movs	r3, #12
   32a12:	18fb      	adds	r3, r7, r3
   32a14:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32a16:	230c      	movs	r3, #12
   32a18:	18fb      	adds	r3, r7, r3
   32a1a:	2200      	movs	r2, #0
   32a1c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32a1e:	687b      	ldr	r3, [r7, #4]
   32a20:	22e0      	movs	r2, #224	; 0xe0
   32a22:	2100      	movs	r1, #0
   32a24:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32a26:	687b      	ldr	r3, [r7, #4]
   32a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a2a:	220c      	movs	r2, #12
   32a2c:	18ba      	adds	r2, r7, r2
   32a2e:	6878      	ldr	r0, [r7, #4]
   32a30:	2102      	movs	r1, #2
   32a32:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32a34:	687b      	ldr	r3, [r7, #4]
   32a36:	22d8      	movs	r2, #216	; 0xd8
   32a38:	2101      	movs	r1, #1
   32a3a:	5099      	str	r1, [r3, r2]
			return 1;
   32a3c:	2301      	movs	r3, #1
   32a3e:	e0a7      	b.n	32b90 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32a40:	495a      	ldr	r1, [pc, #360]	; (32bac <_http_client_handle_header+0x28c>)
   32a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a44:	2210      	movs	r2, #16
   32a46:	0018      	movs	r0, r3
   32a48:	4b57      	ldr	r3, [pc, #348]	; (32ba8 <_http_client_handle_header+0x288>)
   32a4a:	4798      	blx	r3
   32a4c:	1e03      	subs	r3, r0, #0
   32a4e:	d109      	bne.n	32a64 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a52:	3310      	adds	r3, #16
   32a54:	0018      	movs	r0, r3
   32a56:	4b56      	ldr	r3, [pc, #344]	; (32bb0 <_http_client_handle_header+0x290>)
   32a58:	4798      	blx	r3
   32a5a:	0001      	movs	r1, r0
   32a5c:	687b      	ldr	r3, [r7, #4]
   32a5e:	22dc      	movs	r2, #220	; 0xdc
   32a60:	5099      	str	r1, [r3, r2]
   32a62:	e08b      	b.n	32b7c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32a64:	4953      	ldr	r1, [pc, #332]	; (32bb4 <_http_client_handle_header+0x294>)
   32a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a68:	2213      	movs	r2, #19
   32a6a:	0018      	movs	r0, r3
   32a6c:	4b4e      	ldr	r3, [pc, #312]	; (32ba8 <_http_client_handle_header+0x288>)
   32a6e:	4798      	blx	r3
   32a70:	1e03      	subs	r3, r0, #0
   32a72:	d127      	bne.n	32ac4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a76:	3313      	adds	r3, #19
   32a78:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a7a:	e01e      	b.n	32aba <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32a7c:	6a3b      	ldr	r3, [r7, #32]
   32a7e:	781b      	ldrb	r3, [r3, #0]
   32a80:	2b20      	cmp	r3, #32
   32a82:	d103      	bne.n	32a8c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a84:	6a3b      	ldr	r3, [r7, #32]
   32a86:	3301      	adds	r3, #1
   32a88:	623b      	str	r3, [r7, #32]
   32a8a:	e016      	b.n	32aba <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32a8c:	6a3b      	ldr	r3, [r7, #32]
   32a8e:	781b      	ldrb	r3, [r3, #0]
   32a90:	2b43      	cmp	r3, #67	; 0x43
   32a92:	d003      	beq.n	32a9c <_http_client_handle_header+0x17c>
   32a94:	6a3b      	ldr	r3, [r7, #32]
   32a96:	781b      	ldrb	r3, [r3, #0]
   32a98:	2b63      	cmp	r3, #99	; 0x63
   32a9a:	d105      	bne.n	32aa8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32a9c:	687b      	ldr	r3, [r7, #4]
   32a9e:	21cc      	movs	r1, #204	; 0xcc
   32aa0:	2201      	movs	r2, #1
   32aa2:	4252      	negs	r2, r2
   32aa4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32aa6:	e069      	b.n	32b7c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32aa8:	2386      	movs	r3, #134	; 0x86
   32aaa:	425a      	negs	r2, r3
   32aac:	687b      	ldr	r3, [r7, #4]
   32aae:	0011      	movs	r1, r2
   32ab0:	0018      	movs	r0, r3
   32ab2:	4b41      	ldr	r3, [pc, #260]	; (32bb8 <_http_client_handle_header+0x298>)
   32ab4:	4798      	blx	r3
					return 0;
   32ab6:	2300      	movs	r3, #0
   32ab8:	e06a      	b.n	32b90 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32aba:	69ba      	ldr	r2, [r7, #24]
   32abc:	6a3b      	ldr	r3, [r7, #32]
   32abe:	429a      	cmp	r2, r3
   32ac0:	d8dc      	bhi.n	32a7c <_http_client_handle_header+0x15c>
   32ac2:	e05b      	b.n	32b7c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32ac4:	493d      	ldr	r1, [pc, #244]	; (32bbc <_http_client_handle_header+0x29c>)
   32ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ac8:	220c      	movs	r2, #12
   32aca:	0018      	movs	r0, r3
   32acc:	4b36      	ldr	r3, [pc, #216]	; (32ba8 <_http_client_handle_header+0x288>)
   32ace:	4798      	blx	r3
   32ad0:	1e03      	subs	r3, r0, #0
   32ad2:	d126      	bne.n	32b22 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ad6:	330c      	adds	r3, #12
   32ad8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ada:	e01d      	b.n	32b18 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32adc:	69fb      	ldr	r3, [r7, #28]
   32ade:	781b      	ldrb	r3, [r3, #0]
   32ae0:	2b20      	cmp	r3, #32
   32ae2:	d103      	bne.n	32aec <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ae4:	69fb      	ldr	r3, [r7, #28]
   32ae6:	3301      	adds	r3, #1
   32ae8:	61fb      	str	r3, [r7, #28]
   32aea:	e015      	b.n	32b18 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32aec:	69fb      	ldr	r3, [r7, #28]
   32aee:	781b      	ldrb	r3, [r3, #0]
   32af0:	2b4b      	cmp	r3, #75	; 0x4b
   32af2:	d003      	beq.n	32afc <_http_client_handle_header+0x1dc>
   32af4:	69fb      	ldr	r3, [r7, #28]
   32af6:	781b      	ldrb	r3, [r3, #0]
   32af8:	2b6b      	cmp	r3, #107	; 0x6b
   32afa:	d106      	bne.n	32b0a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32afc:	687b      	ldr	r3, [r7, #4]
   32afe:	2241      	movs	r2, #65	; 0x41
   32b00:	5c99      	ldrb	r1, [r3, r2]
   32b02:	2002      	movs	r0, #2
   32b04:	4301      	orrs	r1, r0
   32b06:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32b08:	e038      	b.n	32b7c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32b0a:	687b      	ldr	r3, [r7, #4]
   32b0c:	2241      	movs	r2, #65	; 0x41
   32b0e:	5c99      	ldrb	r1, [r3, r2]
   32b10:	2002      	movs	r0, #2
   32b12:	4381      	bics	r1, r0
   32b14:	5499      	strb	r1, [r3, r2]
				break;
   32b16:	e031      	b.n	32b7c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b18:	69ba      	ldr	r2, [r7, #24]
   32b1a:	69fb      	ldr	r3, [r7, #28]
   32b1c:	429a      	cmp	r2, r3
   32b1e:	d8dd      	bhi.n	32adc <_http_client_handle_header+0x1bc>
   32b20:	e02c      	b.n	32b7c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32b22:	4927      	ldr	r1, [pc, #156]	; (32bc0 <_http_client_handle_header+0x2a0>)
   32b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b26:	2205      	movs	r2, #5
   32b28:	0018      	movs	r0, r3
   32b2a:	4b1f      	ldr	r3, [pc, #124]	; (32ba8 <_http_client_handle_header+0x288>)
   32b2c:	4798      	blx	r3
   32b2e:	1e03      	subs	r3, r0, #0
   32b30:	d124      	bne.n	32b7c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b34:	3309      	adds	r3, #9
   32b36:	0018      	movs	r0, r3
   32b38:	4b1d      	ldr	r3, [pc, #116]	; (32bb0 <_http_client_handle_header+0x290>)
   32b3a:	4798      	blx	r3
   32b3c:	0003      	movs	r3, r0
   32b3e:	b299      	uxth	r1, r3
   32b40:	687b      	ldr	r3, [r7, #4]
   32b42:	22e4      	movs	r2, #228	; 0xe4
   32b44:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32b46:	687b      	ldr	r3, [r7, #4]
   32b48:	22dc      	movs	r2, #220	; 0xdc
   32b4a:	2100      	movs	r1, #0
   32b4c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b50:	3305      	adds	r3, #5
   32b52:	781b      	ldrb	r3, [r3, #0]
   32b54:	2b31      	cmp	r3, #49	; 0x31
   32b56:	d804      	bhi.n	32b62 <_http_client_handle_header+0x242>
   32b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b5a:	3307      	adds	r3, #7
   32b5c:	781b      	ldrb	r3, [r3, #0]
   32b5e:	2b30      	cmp	r3, #48	; 0x30
   32b60:	d906      	bls.n	32b70 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32b62:	687b      	ldr	r3, [r7, #4]
   32b64:	2241      	movs	r2, #65	; 0x41
   32b66:	5c99      	ldrb	r1, [r3, r2]
   32b68:	2002      	movs	r0, #2
   32b6a:	4301      	orrs	r1, r0
   32b6c:	5499      	strb	r1, [r3, r2]
   32b6e:	e005      	b.n	32b7c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32b70:	687b      	ldr	r3, [r7, #4]
   32b72:	2241      	movs	r2, #65	; 0x41
   32b74:	5c99      	ldrb	r1, [r3, r2]
   32b76:	2002      	movs	r0, #2
   32b78:	4381      	bics	r1, r0
   32b7a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32b7c:	4b06      	ldr	r3, [pc, #24]	; (32b98 <_http_client_handle_header+0x278>)
   32b7e:	681b      	ldr	r3, [r3, #0]
   32b80:	0018      	movs	r0, r3
   32b82:	4b08      	ldr	r3, [pc, #32]	; (32ba4 <_http_client_handle_header+0x284>)
   32b84:	4798      	blx	r3
   32b86:	0002      	movs	r2, r0
   32b88:	69bb      	ldr	r3, [r7, #24]
   32b8a:	189b      	adds	r3, r3, r2
   32b8c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32b8e:	e6ce      	b.n	3292e <_http_client_handle_header+0xe>
	}
}
   32b90:	0018      	movs	r0, r3
   32b92:	46bd      	mov	sp, r7
   32b94:	b00b      	add	sp, #44	; 0x2c
   32b96:	bd90      	pop	{r4, r7, pc}
   32b98:	2000012c 	.word	0x2000012c
   32b9c:	00035b25 	.word	0x00035b25
   32ba0:	00032f85 	.word	0x00032f85
   32ba4:	00035aa7 	.word	0x00035aa7
   32ba8:	00035ab5 	.word	0x00035ab5
   32bac:	0003ade4 	.word	0x0003ade4
   32bb0:	0003563d 	.word	0x0003563d
   32bb4:	0003ae08 	.word	0x0003ae08
   32bb8:	00031f9d 	.word	0x00031f9d
   32bbc:	0003ae1c 	.word	0x0003ae1c
   32bc0:	0003ae2c 	.word	0x0003ae2c

00032bc4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32bc4:	b580      	push	{r7, lr}
   32bc6:	b088      	sub	sp, #32
   32bc8:	af00      	add	r7, sp, #0
   32bca:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32bcc:	687b      	ldr	r3, [r7, #4]
   32bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32bd0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32bd2:	2300      	movs	r3, #0
   32bd4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32bd6:	687b      	ldr	r3, [r7, #4]
   32bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32bda:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32bdc:	687b      	ldr	r3, [r7, #4]
   32bde:	22e0      	movs	r2, #224	; 0xe0
   32be0:	589b      	ldr	r3, [r3, r2]
   32be2:	2b00      	cmp	r3, #0
   32be4:	db71      	blt.n	32cca <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32be6:	687b      	ldr	r3, [r7, #4]
   32be8:	22e0      	movs	r2, #224	; 0xe0
   32bea:	589b      	ldr	r3, [r3, r2]
   32bec:	2b00      	cmp	r3, #0
   32bee:	d134      	bne.n	32c5a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32bf0:	687b      	ldr	r3, [r7, #4]
   32bf2:	22d8      	movs	r2, #216	; 0xd8
   32bf4:	2100      	movs	r1, #0
   32bf6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32bf8:	687b      	ldr	r3, [r7, #4]
   32bfa:	22e4      	movs	r2, #228	; 0xe4
   32bfc:	2100      	movs	r1, #0
   32bfe:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32c00:	2308      	movs	r3, #8
   32c02:	18fb      	adds	r3, r7, r3
   32c04:	2201      	movs	r2, #1
   32c06:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32c08:	2308      	movs	r3, #8
   32c0a:	18fb      	adds	r3, r7, r3
   32c0c:	2200      	movs	r2, #0
   32c0e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32c10:	2308      	movs	r3, #8
   32c12:	18fb      	adds	r3, r7, r3
   32c14:	2200      	movs	r2, #0
   32c16:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32c18:	687b      	ldr	r3, [r7, #4]
   32c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c1c:	2b00      	cmp	r3, #0
   32c1e:	d006      	beq.n	32c2e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32c20:	687b      	ldr	r3, [r7, #4]
   32c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c24:	2208      	movs	r2, #8
   32c26:	18ba      	adds	r2, r7, r2
   32c28:	6878      	ldr	r0, [r7, #4]
   32c2a:	2103      	movs	r1, #3
   32c2c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32c2e:	687b      	ldr	r3, [r7, #4]
   32c30:	2241      	movs	r2, #65	; 0x41
   32c32:	5c9b      	ldrb	r3, [r3, r2]
   32c34:	2202      	movs	r2, #2
   32c36:	4013      	ands	r3, r2
   32c38:	b2db      	uxtb	r3, r3
   32c3a:	2b00      	cmp	r3, #0
   32c3c:	d105      	bne.n	32c4a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32c3e:	687b      	ldr	r3, [r7, #4]
   32c40:	2100      	movs	r1, #0
   32c42:	0018      	movs	r0, r3
   32c44:	4b62      	ldr	r3, [pc, #392]	; (32dd0 <_http_client_read_chuked_entity+0x20c>)
   32c46:	4798      	blx	r3
					return;
   32c48:	e0bf      	b.n	32dca <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32c4a:	697b      	ldr	r3, [r7, #20]
   32c4c:	1c9a      	adds	r2, r3, #2
   32c4e:	687b      	ldr	r3, [r7, #4]
   32c50:	0011      	movs	r1, r2
   32c52:	0018      	movs	r0, r3
   32c54:	4b5f      	ldr	r3, [pc, #380]	; (32dd4 <_http_client_read_chuked_entity+0x210>)
   32c56:	4798      	blx	r3
   32c58:	e0b2      	b.n	32dc0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32c5a:	687b      	ldr	r3, [r7, #4]
   32c5c:	22e0      	movs	r2, #224	; 0xe0
   32c5e:	589a      	ldr	r2, [r3, r2]
   32c60:	69fb      	ldr	r3, [r7, #28]
   32c62:	429a      	cmp	r2, r3
   32c64:	dd00      	ble.n	32c68 <_http_client_read_chuked_entity+0xa4>
   32c66:	e0ab      	b.n	32dc0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32c68:	687b      	ldr	r3, [r7, #4]
   32c6a:	22e0      	movs	r2, #224	; 0xe0
   32c6c:	589b      	ldr	r3, [r3, r2]
   32c6e:	001a      	movs	r2, r3
   32c70:	2308      	movs	r3, #8
   32c72:	18fb      	adds	r3, r7, r3
   32c74:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32c76:	2308      	movs	r3, #8
   32c78:	18fb      	adds	r3, r7, r3
   32c7a:	697a      	ldr	r2, [r7, #20]
   32c7c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32c7e:	2308      	movs	r3, #8
   32c80:	18fb      	adds	r3, r7, r3
   32c82:	2200      	movs	r2, #0
   32c84:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32c86:	687b      	ldr	r3, [r7, #4]
   32c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c8a:	2b00      	cmp	r3, #0
   32c8c:	d006      	beq.n	32c9c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32c8e:	687b      	ldr	r3, [r7, #4]
   32c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c92:	2208      	movs	r2, #8
   32c94:	18ba      	adds	r2, r7, r2
   32c96:	6878      	ldr	r0, [r7, #4]
   32c98:	2103      	movs	r1, #3
   32c9a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32c9c:	687b      	ldr	r3, [r7, #4]
   32c9e:	22e0      	movs	r2, #224	; 0xe0
   32ca0:	589b      	ldr	r3, [r3, r2]
   32ca2:	3302      	adds	r3, #2
   32ca4:	697a      	ldr	r2, [r7, #20]
   32ca6:	18d2      	adds	r2, r2, r3
   32ca8:	687b      	ldr	r3, [r7, #4]
   32caa:	0011      	movs	r1, r2
   32cac:	0018      	movs	r0, r3
   32cae:	4b49      	ldr	r3, [pc, #292]	; (32dd4 <_http_client_read_chuked_entity+0x210>)
   32cb0:	4798      	blx	r3
				length = (int)module->recved_size;
   32cb2:	687b      	ldr	r3, [r7, #4]
   32cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32cb6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32cb8:	687b      	ldr	r3, [r7, #4]
   32cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32cbc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32cbe:	687b      	ldr	r3, [r7, #4]
   32cc0:	21e0      	movs	r1, #224	; 0xe0
   32cc2:	2201      	movs	r2, #1
   32cc4:	4252      	negs	r2, r2
   32cc6:	505a      	str	r2, [r3, r1]
   32cc8:	e07a      	b.n	32dc0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32cca:	687b      	ldr	r3, [r7, #4]
   32ccc:	22e0      	movs	r2, #224	; 0xe0
   32cce:	2100      	movs	r1, #0
   32cd0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32cd2:	e05a      	b.n	32d8a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32cd4:	697b      	ldr	r3, [r7, #20]
   32cd6:	781b      	ldrb	r3, [r3, #0]
   32cd8:	2b0a      	cmp	r3, #10
   32cda:	d106      	bne.n	32cea <_http_client_read_chuked_entity+0x126>
					buffer++;
   32cdc:	697b      	ldr	r3, [r7, #20]
   32cde:	3301      	adds	r3, #1
   32ce0:	617b      	str	r3, [r7, #20]
					length--;
   32ce2:	69fb      	ldr	r3, [r7, #28]
   32ce4:	3b01      	subs	r3, #1
   32ce6:	61fb      	str	r3, [r7, #28]
					break;
   32ce8:	e052      	b.n	32d90 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32cea:	69bb      	ldr	r3, [r7, #24]
   32cec:	2b00      	cmp	r3, #0
   32cee:	d145      	bne.n	32d7c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32cf0:	697b      	ldr	r3, [r7, #20]
   32cf2:	781b      	ldrb	r3, [r3, #0]
   32cf4:	2b2f      	cmp	r3, #47	; 0x2f
   32cf6:	d910      	bls.n	32d1a <_http_client_read_chuked_entity+0x156>
   32cf8:	697b      	ldr	r3, [r7, #20]
   32cfa:	781b      	ldrb	r3, [r3, #0]
   32cfc:	2b39      	cmp	r3, #57	; 0x39
   32cfe:	d80c      	bhi.n	32d1a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32d00:	687b      	ldr	r3, [r7, #4]
   32d02:	22e0      	movs	r2, #224	; 0xe0
   32d04:	589b      	ldr	r3, [r3, r2]
   32d06:	011b      	lsls	r3, r3, #4
   32d08:	697a      	ldr	r2, [r7, #20]
   32d0a:	7812      	ldrb	r2, [r2, #0]
   32d0c:	189b      	adds	r3, r3, r2
   32d0e:	3b30      	subs	r3, #48	; 0x30
   32d10:	001a      	movs	r2, r3
   32d12:	687b      	ldr	r3, [r7, #4]
   32d14:	21e0      	movs	r1, #224	; 0xe0
   32d16:	505a      	str	r2, [r3, r1]
   32d18:	e031      	b.n	32d7e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32d1a:	697b      	ldr	r3, [r7, #20]
   32d1c:	781b      	ldrb	r3, [r3, #0]
   32d1e:	2b60      	cmp	r3, #96	; 0x60
   32d20:	d910      	bls.n	32d44 <_http_client_read_chuked_entity+0x180>
   32d22:	697b      	ldr	r3, [r7, #20]
   32d24:	781b      	ldrb	r3, [r3, #0]
   32d26:	2b66      	cmp	r3, #102	; 0x66
   32d28:	d80c      	bhi.n	32d44 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32d2a:	687b      	ldr	r3, [r7, #4]
   32d2c:	22e0      	movs	r2, #224	; 0xe0
   32d2e:	589b      	ldr	r3, [r3, r2]
   32d30:	011b      	lsls	r3, r3, #4
   32d32:	697a      	ldr	r2, [r7, #20]
   32d34:	7812      	ldrb	r2, [r2, #0]
   32d36:	189b      	adds	r3, r3, r2
   32d38:	3b61      	subs	r3, #97	; 0x61
   32d3a:	001a      	movs	r2, r3
   32d3c:	687b      	ldr	r3, [r7, #4]
   32d3e:	21e0      	movs	r1, #224	; 0xe0
   32d40:	505a      	str	r2, [r3, r1]
   32d42:	e01c      	b.n	32d7e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32d44:	697b      	ldr	r3, [r7, #20]
   32d46:	781b      	ldrb	r3, [r3, #0]
   32d48:	2b40      	cmp	r3, #64	; 0x40
   32d4a:	d910      	bls.n	32d6e <_http_client_read_chuked_entity+0x1aa>
   32d4c:	697b      	ldr	r3, [r7, #20]
   32d4e:	781b      	ldrb	r3, [r3, #0]
   32d50:	2b46      	cmp	r3, #70	; 0x46
   32d52:	d80c      	bhi.n	32d6e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32d54:	687b      	ldr	r3, [r7, #4]
   32d56:	22e0      	movs	r2, #224	; 0xe0
   32d58:	589b      	ldr	r3, [r3, r2]
   32d5a:	011b      	lsls	r3, r3, #4
   32d5c:	697a      	ldr	r2, [r7, #20]
   32d5e:	7812      	ldrb	r2, [r2, #0]
   32d60:	189b      	adds	r3, r3, r2
   32d62:	3b41      	subs	r3, #65	; 0x41
   32d64:	001a      	movs	r2, r3
   32d66:	687b      	ldr	r3, [r7, #4]
   32d68:	21e0      	movs	r1, #224	; 0xe0
   32d6a:	505a      	str	r2, [r3, r1]
   32d6c:	e007      	b.n	32d7e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32d6e:	697b      	ldr	r3, [r7, #20]
   32d70:	781b      	ldrb	r3, [r3, #0]
   32d72:	2b3b      	cmp	r3, #59	; 0x3b
   32d74:	d103      	bne.n	32d7e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32d76:	2301      	movs	r3, #1
   32d78:	61bb      	str	r3, [r7, #24]
   32d7a:	e000      	b.n	32d7e <_http_client_read_chuked_entity+0x1ba>
					continue;
   32d7c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32d7e:	697b      	ldr	r3, [r7, #20]
   32d80:	3301      	adds	r3, #1
   32d82:	617b      	str	r3, [r7, #20]
   32d84:	69fb      	ldr	r3, [r7, #28]
   32d86:	3b01      	subs	r3, #1
   32d88:	61fb      	str	r3, [r7, #28]
   32d8a:	69fb      	ldr	r3, [r7, #28]
   32d8c:	2b00      	cmp	r3, #0
   32d8e:	dca1      	bgt.n	32cd4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32d90:	687b      	ldr	r3, [r7, #4]
   32d92:	22e0      	movs	r2, #224	; 0xe0
   32d94:	589a      	ldr	r2, [r3, r2]
   32d96:	687b      	ldr	r3, [r7, #4]
   32d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d9a:	429a      	cmp	r2, r3
   32d9c:	dd07      	ble.n	32dae <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32d9e:	238b      	movs	r3, #139	; 0x8b
   32da0:	425a      	negs	r2, r3
   32da2:	687b      	ldr	r3, [r7, #4]
   32da4:	0011      	movs	r1, r2
   32da6:	0018      	movs	r0, r3
   32da8:	4b09      	ldr	r3, [pc, #36]	; (32dd0 <_http_client_read_chuked_entity+0x20c>)
   32daa:	4798      	blx	r3
				return;
   32dac:	e00d      	b.n	32dca <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32dae:	69fb      	ldr	r3, [r7, #28]
   32db0:	2b00      	cmp	r3, #0
   32db2:	d105      	bne.n	32dc0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32db4:	687b      	ldr	r3, [r7, #4]
   32db6:	21e0      	movs	r1, #224	; 0xe0
   32db8:	2201      	movs	r2, #1
   32dba:	4252      	negs	r2, r2
   32dbc:	505a      	str	r2, [r3, r1]
				return;
   32dbe:	e004      	b.n	32dca <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32dc0:	687b      	ldr	r3, [r7, #4]
   32dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dc4:	2b00      	cmp	r3, #0
   32dc6:	d000      	beq.n	32dca <_http_client_read_chuked_entity+0x206>
   32dc8:	e708      	b.n	32bdc <_http_client_read_chuked_entity+0x18>
}
   32dca:	46bd      	mov	sp, r7
   32dcc:	b008      	add	sp, #32
   32dce:	bd80      	pop	{r7, pc}
   32dd0:	00031f9d 	.word	0x00031f9d
   32dd4:	00032f85 	.word	0x00032f85

00032dd8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32dd8:	b580      	push	{r7, lr}
   32dda:	b086      	sub	sp, #24
   32ddc:	af00      	add	r7, sp, #0
   32dde:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32de0:	687b      	ldr	r3, [r7, #4]
   32de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32de4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32de6:	687b      	ldr	r3, [r7, #4]
   32de8:	22dc      	movs	r2, #220	; 0xdc
   32dea:	589b      	ldr	r3, [r3, r2]
   32dec:	2b00      	cmp	r3, #0
   32dee:	db58      	blt.n	32ea2 <_http_client_handle_entity+0xca>
   32df0:	687b      	ldr	r3, [r7, #4]
   32df2:	22dc      	movs	r2, #220	; 0xdc
   32df4:	589a      	ldr	r2, [r3, r2]
   32df6:	687b      	ldr	r3, [r7, #4]
   32df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32dfa:	429a      	cmp	r2, r3
   32dfc:	dc51      	bgt.n	32ea2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32dfe:	687b      	ldr	r3, [r7, #4]
   32e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e02:	0019      	movs	r1, r3
   32e04:	687b      	ldr	r3, [r7, #4]
   32e06:	22dc      	movs	r2, #220	; 0xdc
   32e08:	589b      	ldr	r3, [r3, r2]
   32e0a:	4299      	cmp	r1, r3
   32e0c:	da00      	bge.n	32e10 <_http_client_handle_entity+0x38>
   32e0e:	e0a9      	b.n	32f64 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32e10:	687b      	ldr	r3, [r7, #4]
   32e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e14:	2b00      	cmp	r3, #0
   32e16:	d020      	beq.n	32e5a <_http_client_handle_entity+0x82>
   32e18:	687b      	ldr	r3, [r7, #4]
   32e1a:	22e4      	movs	r2, #228	; 0xe4
   32e1c:	5a9b      	ldrh	r3, [r3, r2]
   32e1e:	2b00      	cmp	r3, #0
   32e20:	d01b      	beq.n	32e5a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32e22:	687b      	ldr	r3, [r7, #4]
   32e24:	22e4      	movs	r2, #228	; 0xe4
   32e26:	5a9a      	ldrh	r2, [r3, r2]
   32e28:	2308      	movs	r3, #8
   32e2a:	18fb      	adds	r3, r7, r3
   32e2c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32e2e:	2308      	movs	r3, #8
   32e30:	18fb      	adds	r3, r7, r3
   32e32:	2200      	movs	r2, #0
   32e34:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32e36:	687b      	ldr	r3, [r7, #4]
   32e38:	22dc      	movs	r2, #220	; 0xdc
   32e3a:	589b      	ldr	r3, [r3, r2]
   32e3c:	001a      	movs	r2, r3
   32e3e:	2308      	movs	r3, #8
   32e40:	18fb      	adds	r3, r7, r3
   32e42:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32e44:	2308      	movs	r3, #8
   32e46:	18fb      	adds	r3, r7, r3
   32e48:	697a      	ldr	r2, [r7, #20]
   32e4a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32e4c:	687b      	ldr	r3, [r7, #4]
   32e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e50:	2208      	movs	r2, #8
   32e52:	18ba      	adds	r2, r7, r2
   32e54:	6878      	ldr	r0, [r7, #4]
   32e56:	2102      	movs	r1, #2
   32e58:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32e5a:	687b      	ldr	r3, [r7, #4]
   32e5c:	22d8      	movs	r2, #216	; 0xd8
   32e5e:	2100      	movs	r1, #0
   32e60:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32e62:	687b      	ldr	r3, [r7, #4]
   32e64:	22e4      	movs	r2, #228	; 0xe4
   32e66:	2100      	movs	r1, #0
   32e68:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32e6a:	687b      	ldr	r3, [r7, #4]
   32e6c:	2241      	movs	r2, #65	; 0x41
   32e6e:	5c9b      	ldrb	r3, [r3, r2]
   32e70:	2202      	movs	r2, #2
   32e72:	4013      	ands	r3, r2
   32e74:	b2db      	uxtb	r3, r3
   32e76:	2b00      	cmp	r3, #0
   32e78:	d105      	bne.n	32e86 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32e7a:	687b      	ldr	r3, [r7, #4]
   32e7c:	2100      	movs	r1, #0
   32e7e:	0018      	movs	r0, r3
   32e80:	4b3b      	ldr	r3, [pc, #236]	; (32f70 <_http_client_handle_entity+0x198>)
   32e82:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32e84:	e06e      	b.n	32f64 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32e86:	687b      	ldr	r3, [r7, #4]
   32e88:	22dc      	movs	r2, #220	; 0xdc
   32e8a:	589b      	ldr	r3, [r3, r2]
   32e8c:	001a      	movs	r2, r3
   32e8e:	697b      	ldr	r3, [r7, #20]
   32e90:	189a      	adds	r2, r3, r2
   32e92:	687b      	ldr	r3, [r7, #4]
   32e94:	0011      	movs	r1, r2
   32e96:	0018      	movs	r0, r3
   32e98:	4b36      	ldr	r3, [pc, #216]	; (32f74 <_http_client_handle_entity+0x19c>)
   32e9a:	4798      	blx	r3
				return module->recved_size;
   32e9c:	687b      	ldr	r3, [r7, #4]
   32e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ea0:	e061      	b.n	32f66 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32ea2:	687b      	ldr	r3, [r7, #4]
   32ea4:	22dc      	movs	r2, #220	; 0xdc
   32ea6:	589b      	ldr	r3, [r3, r2]
   32ea8:	2b00      	cmp	r3, #0
   32eaa:	db57      	blt.n	32f5c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32eac:	687b      	ldr	r3, [r7, #4]
   32eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32eb0:	2308      	movs	r3, #8
   32eb2:	18fb      	adds	r3, r7, r3
   32eb4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32eb6:	2308      	movs	r3, #8
   32eb8:	18fb      	adds	r3, r7, r3
   32eba:	697a      	ldr	r2, [r7, #20]
   32ebc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32ebe:	687b      	ldr	r3, [r7, #4]
   32ec0:	22e0      	movs	r2, #224	; 0xe0
   32ec2:	589a      	ldr	r2, [r3, r2]
   32ec4:	687b      	ldr	r3, [r7, #4]
   32ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ec8:	18d2      	adds	r2, r2, r3
   32eca:	687b      	ldr	r3, [r7, #4]
   32ecc:	21e0      	movs	r1, #224	; 0xe0
   32ece:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32ed0:	687b      	ldr	r3, [r7, #4]
   32ed2:	22dc      	movs	r2, #220	; 0xdc
   32ed4:	589a      	ldr	r2, [r3, r2]
   32ed6:	687b      	ldr	r3, [r7, #4]
   32ed8:	21e0      	movs	r1, #224	; 0xe0
   32eda:	585b      	ldr	r3, [r3, r1]
   32edc:	429a      	cmp	r2, r3
   32ede:	dc0c      	bgt.n	32efa <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32ee0:	687b      	ldr	r3, [r7, #4]
   32ee2:	22d8      	movs	r2, #216	; 0xd8
   32ee4:	2100      	movs	r1, #0
   32ee6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32ee8:	687b      	ldr	r3, [r7, #4]
   32eea:	22e4      	movs	r2, #228	; 0xe4
   32eec:	2100      	movs	r1, #0
   32eee:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32ef0:	2308      	movs	r3, #8
   32ef2:	18fb      	adds	r3, r7, r3
   32ef4:	2201      	movs	r2, #1
   32ef6:	721a      	strb	r2, [r3, #8]
   32ef8:	e003      	b.n	32f02 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32efa:	2308      	movs	r3, #8
   32efc:	18fb      	adds	r3, r7, r3
   32efe:	2200      	movs	r2, #0
   32f00:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32f02:	687b      	ldr	r3, [r7, #4]
   32f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f06:	2b00      	cmp	r3, #0
   32f08:	d006      	beq.n	32f18 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32f0a:	687b      	ldr	r3, [r7, #4]
   32f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f0e:	2208      	movs	r2, #8
   32f10:	18ba      	adds	r2, r7, r2
   32f12:	6878      	ldr	r0, [r7, #4]
   32f14:	2103      	movs	r1, #3
   32f16:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32f18:	2308      	movs	r3, #8
   32f1a:	18fb      	adds	r3, r7, r3
   32f1c:	7a1b      	ldrb	r3, [r3, #8]
   32f1e:	2b01      	cmp	r3, #1
   32f20:	d112      	bne.n	32f48 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32f22:	687b      	ldr	r3, [r7, #4]
   32f24:	2241      	movs	r2, #65	; 0x41
   32f26:	5c9b      	ldrb	r3, [r3, r2]
   32f28:	2202      	movs	r2, #2
   32f2a:	4013      	ands	r3, r2
   32f2c:	b2db      	uxtb	r3, r3
   32f2e:	2b00      	cmp	r3, #0
   32f30:	d10a      	bne.n	32f48 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32f32:	4b11      	ldr	r3, [pc, #68]	; (32f78 <_http_client_handle_entity+0x1a0>)
   32f34:	0018      	movs	r0, r3
   32f36:	4b11      	ldr	r3, [pc, #68]	; (32f7c <_http_client_handle_entity+0x1a4>)
   32f38:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32f3a:	687b      	ldr	r3, [r7, #4]
   32f3c:	2100      	movs	r1, #0
   32f3e:	0018      	movs	r0, r3
   32f40:	4b0b      	ldr	r3, [pc, #44]	; (32f70 <_http_client_handle_entity+0x198>)
   32f42:	4798      	blx	r3
					return 0;
   32f44:	2300      	movs	r3, #0
   32f46:	e00e      	b.n	32f66 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32f48:	687b      	ldr	r3, [r7, #4]
   32f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f4c:	697a      	ldr	r2, [r7, #20]
   32f4e:	18d2      	adds	r2, r2, r3
   32f50:	687b      	ldr	r3, [r7, #4]
   32f52:	0011      	movs	r1, r2
   32f54:	0018      	movs	r0, r3
   32f56:	4b07      	ldr	r3, [pc, #28]	; (32f74 <_http_client_handle_entity+0x19c>)
   32f58:	4798      	blx	r3
   32f5a:	e003      	b.n	32f64 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32f5c:	687b      	ldr	r3, [r7, #4]
   32f5e:	0018      	movs	r0, r3
   32f60:	4b07      	ldr	r3, [pc, #28]	; (32f80 <_http_client_handle_entity+0x1a8>)
   32f62:	4798      	blx	r3
		}
	}

	return 0;
   32f64:	2300      	movs	r3, #0
}
   32f66:	0018      	movs	r0, r3
   32f68:	46bd      	mov	sp, r7
   32f6a:	b006      	add	sp, #24
   32f6c:	bd80      	pop	{r7, pc}
   32f6e:	46c0      	nop			; (mov r8, r8)
   32f70:	00031f9d 	.word	0x00031f9d
   32f74:	00032f85 	.word	0x00032f85
   32f78:	0003ae34 	.word	0x0003ae34
   32f7c:	00035911 	.word	0x00035911
   32f80:	00032bc5 	.word	0x00032bc5

00032f84 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32f84:	b580      	push	{r7, lr}
   32f86:	b084      	sub	sp, #16
   32f88:	af00      	add	r7, sp, #0
   32f8a:	6078      	str	r0, [r7, #4]
   32f8c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32f8e:	687b      	ldr	r3, [r7, #4]
   32f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32f92:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32f94:	687b      	ldr	r3, [r7, #4]
   32f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f98:	001a      	movs	r2, r3
   32f9a:	683b      	ldr	r3, [r7, #0]
   32f9c:	1ad2      	subs	r2, r2, r3
   32f9e:	68fb      	ldr	r3, [r7, #12]
   32fa0:	18d3      	adds	r3, r2, r3
   32fa2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32fa4:	68bb      	ldr	r3, [r7, #8]
   32fa6:	2b00      	cmp	r3, #0
   32fa8:	dd09      	ble.n	32fbe <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32faa:	68ba      	ldr	r2, [r7, #8]
   32fac:	6839      	ldr	r1, [r7, #0]
   32fae:	68fb      	ldr	r3, [r7, #12]
   32fb0:	0018      	movs	r0, r3
   32fb2:	4b06      	ldr	r3, [pc, #24]	; (32fcc <_http_client_move_buffer+0x48>)
   32fb4:	4798      	blx	r3
		module->recved_size = remain;
   32fb6:	68ba      	ldr	r2, [r7, #8]
   32fb8:	687b      	ldr	r3, [r7, #4]
   32fba:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32fbc:	e002      	b.n	32fc4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32fbe:	687b      	ldr	r3, [r7, #4]
   32fc0:	2200      	movs	r2, #0
   32fc2:	645a      	str	r2, [r3, #68]	; 0x44
}
   32fc4:	46c0      	nop			; (mov r8, r8)
   32fc6:	46bd      	mov	sp, r7
   32fc8:	b004      	add	sp, #16
   32fca:	bd80      	pop	{r7, pc}
   32fcc:	000356cb 	.word	0x000356cb

00032fd0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32fd0:	b580      	push	{r7, lr}
   32fd2:	b084      	sub	sp, #16
   32fd4:	af00      	add	r7, sp, #0
   32fd6:	60f8      	str	r0, [r7, #12]
   32fd8:	60b9      	str	r1, [r7, #8]
   32fda:	607a      	str	r2, [r7, #4]
   32fdc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32fde:	68fb      	ldr	r3, [r7, #12]
   32fe0:	687a      	ldr	r2, [r7, #4]
   32fe2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32fe4:	68fb      	ldr	r3, [r7, #12]
   32fe6:	68ba      	ldr	r2, [r7, #8]
   32fe8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32fea:	68fb      	ldr	r3, [r7, #12]
   32fec:	2200      	movs	r2, #0
   32fee:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32ff0:	68fb      	ldr	r3, [r7, #12]
   32ff2:	683a      	ldr	r2, [r7, #0]
   32ff4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32ff6:	68fb      	ldr	r3, [r7, #12]
   32ff8:	69ba      	ldr	r2, [r7, #24]
   32ffa:	60da      	str	r2, [r3, #12]
}
   32ffc:	46c0      	nop			; (mov r8, r8)
   32ffe:	46bd      	mov	sp, r7
   33000:	b004      	add	sp, #16
   33002:	bd80      	pop	{r7, pc}

00033004 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   33004:	b580      	push	{r7, lr}
   33006:	b084      	sub	sp, #16
   33008:	af00      	add	r7, sp, #0
   3300a:	6078      	str	r0, [r7, #4]
   3300c:	000a      	movs	r2, r1
   3300e:	1cfb      	adds	r3, r7, #3
   33010:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   33012:	687b      	ldr	r3, [r7, #4]
   33014:	681a      	ldr	r2, [r3, #0]
   33016:	687b      	ldr	r3, [r7, #4]
   33018:	685b      	ldr	r3, [r3, #4]
   3301a:	1ad3      	subs	r3, r2, r3
   3301c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3301e:	68fb      	ldr	r3, [r7, #12]
   33020:	2b00      	cmp	r3, #0
   33022:	dc03      	bgt.n	3302c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   33024:	687b      	ldr	r3, [r7, #4]
   33026:	0018      	movs	r0, r3
   33028:	4b08      	ldr	r3, [pc, #32]	; (3304c <stream_writer_send_8+0x48>)
   3302a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3302c:	687b      	ldr	r3, [r7, #4]
   3302e:	6919      	ldr	r1, [r3, #16]
   33030:	687b      	ldr	r3, [r7, #4]
   33032:	685b      	ldr	r3, [r3, #4]
   33034:	1c58      	adds	r0, r3, #1
   33036:	687a      	ldr	r2, [r7, #4]
   33038:	6050      	str	r0, [r2, #4]
   3303a:	18cb      	adds	r3, r1, r3
   3303c:	1cfa      	adds	r2, r7, #3
   3303e:	7812      	ldrb	r2, [r2, #0]
   33040:	701a      	strb	r2, [r3, #0]
}
   33042:	46c0      	nop			; (mov r8, r8)
   33044:	46bd      	mov	sp, r7
   33046:	b004      	add	sp, #16
   33048:	bd80      	pop	{r7, pc}
   3304a:	46c0      	nop			; (mov r8, r8)
   3304c:	0003308d 	.word	0x0003308d

00033050 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   33050:	b580      	push	{r7, lr}
   33052:	b084      	sub	sp, #16
   33054:	af00      	add	r7, sp, #0
   33056:	60f8      	str	r0, [r7, #12]
   33058:	60b9      	str	r1, [r7, #8]
   3305a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3305c:	e00d      	b.n	3307a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3305e:	68bb      	ldr	r3, [r7, #8]
   33060:	781b      	ldrb	r3, [r3, #0]
   33062:	b25a      	sxtb	r2, r3
   33064:	68fb      	ldr	r3, [r7, #12]
   33066:	0011      	movs	r1, r2
   33068:	0018      	movs	r0, r3
   3306a:	4b07      	ldr	r3, [pc, #28]	; (33088 <stream_writer_send_buffer+0x38>)
   3306c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3306e:	687b      	ldr	r3, [r7, #4]
   33070:	3b01      	subs	r3, #1
   33072:	607b      	str	r3, [r7, #4]
   33074:	68bb      	ldr	r3, [r7, #8]
   33076:	3301      	adds	r3, #1
   33078:	60bb      	str	r3, [r7, #8]
   3307a:	687b      	ldr	r3, [r7, #4]
   3307c:	2b00      	cmp	r3, #0
   3307e:	d1ee      	bne.n	3305e <stream_writer_send_buffer+0xe>
	}
}
   33080:	46c0      	nop			; (mov r8, r8)
   33082:	46bd      	mov	sp, r7
   33084:	b004      	add	sp, #16
   33086:	bd80      	pop	{r7, pc}
   33088:	00033005 	.word	0x00033005

0003308c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3308c:	b590      	push	{r4, r7, lr}
   3308e:	b083      	sub	sp, #12
   33090:	af00      	add	r7, sp, #0
   33092:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   33094:	687b      	ldr	r3, [r7, #4]
   33096:	685b      	ldr	r3, [r3, #4]
   33098:	2b00      	cmp	r3, #0
   3309a:	d00c      	beq.n	330b6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3309c:	687b      	ldr	r3, [r7, #4]
   3309e:	689c      	ldr	r4, [r3, #8]
   330a0:	687b      	ldr	r3, [r7, #4]
   330a2:	68d8      	ldr	r0, [r3, #12]
   330a4:	687b      	ldr	r3, [r7, #4]
   330a6:	6919      	ldr	r1, [r3, #16]
   330a8:	687b      	ldr	r3, [r7, #4]
   330aa:	685b      	ldr	r3, [r3, #4]
   330ac:	001a      	movs	r2, r3
   330ae:	47a0      	blx	r4
		writer->written = 0;
   330b0:	687b      	ldr	r3, [r7, #4]
   330b2:	2200      	movs	r2, #0
   330b4:	605a      	str	r2, [r3, #4]
	}
}
   330b6:	46c0      	nop			; (mov r8, r8)
   330b8:	46bd      	mov	sp, r7
   330ba:	b003      	add	sp, #12
   330bc:	bd90      	pop	{r4, r7, pc}
	...

000330c0 <system_cpu_clock_get_hz>:
{
   330c0:	b580      	push	{r7, lr}
   330c2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   330c4:	2000      	movs	r0, #0
   330c6:	4b05      	ldr	r3, [pc, #20]	; (330dc <system_cpu_clock_get_hz+0x1c>)
   330c8:	4798      	blx	r3
   330ca:	0002      	movs	r2, r0
   330cc:	4b04      	ldr	r3, [pc, #16]	; (330e0 <system_cpu_clock_get_hz+0x20>)
   330ce:	7a1b      	ldrb	r3, [r3, #8]
   330d0:	b2db      	uxtb	r3, r3
   330d2:	40da      	lsrs	r2, r3
   330d4:	0013      	movs	r3, r2
}
   330d6:	0018      	movs	r0, r3
   330d8:	46bd      	mov	sp, r7
   330da:	bd80      	pop	{r7, pc}
   330dc:	0002a975 	.word	0x0002a975
   330e0:	40000400 	.word	0x40000400

000330e4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   330e4:	b580      	push	{r7, lr}
   330e6:	b084      	sub	sp, #16
   330e8:	af00      	add	r7, sp, #0
   330ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   330ec:	687b      	ldr	r3, [r7, #4]
   330ee:	681b      	ldr	r3, [r3, #0]
   330f0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   330f2:	46c0      	nop			; (mov r8, r8)
   330f4:	68fb      	ldr	r3, [r7, #12]
   330f6:	689b      	ldr	r3, [r3, #8]
   330f8:	2202      	movs	r2, #2
   330fa:	4013      	ands	r3, r2
   330fc:	d1fa      	bne.n	330f4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   330fe:	68fb      	ldr	r3, [r7, #12]
   33100:	681b      	ldr	r3, [r3, #0]
   33102:	2202      	movs	r2, #2
   33104:	431a      	orrs	r2, r3
   33106:	68fb      	ldr	r3, [r7, #12]
   33108:	601a      	str	r2, [r3, #0]
}
   3310a:	46c0      	nop			; (mov r8, r8)
   3310c:	46bd      	mov	sp, r7
   3310e:	b004      	add	sp, #16
   33110:	bd80      	pop	{r7, pc}
	...

00033114 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   33114:	b580      	push	{r7, lr}
   33116:	b082      	sub	sp, #8
   33118:	af00      	add	r7, sp, #0
   3311a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3311c:	4b04      	ldr	r3, [pc, #16]	; (33130 <sw_timer_tcc_callback+0x1c>)
   3311e:	681b      	ldr	r3, [r3, #0]
   33120:	1c5a      	adds	r2, r3, #1
   33122:	4b03      	ldr	r3, [pc, #12]	; (33130 <sw_timer_tcc_callback+0x1c>)
   33124:	601a      	str	r2, [r3, #0]
}
   33126:	46c0      	nop			; (mov r8, r8)
   33128:	46bd      	mov	sp, r7
   3312a:	b002      	add	sp, #8
   3312c:	bd80      	pop	{r7, pc}
   3312e:	46c0      	nop			; (mov r8, r8)
   33130:	20004714 	.word	0x20004714

00033134 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   33134:	b580      	push	{r7, lr}
   33136:	b082      	sub	sp, #8
   33138:	af00      	add	r7, sp, #0
   3313a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3313c:	687b      	ldr	r3, [r7, #4]
   3313e:	2264      	movs	r2, #100	; 0x64
   33140:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   33142:	687b      	ldr	r3, [r7, #4]
   33144:	2200      	movs	r2, #0
   33146:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33148:	687b      	ldr	r3, [r7, #4]
   3314a:	2200      	movs	r2, #0
   3314c:	705a      	strb	r2, [r3, #1]
}
   3314e:	46c0      	nop			; (mov r8, r8)
   33150:	46bd      	mov	sp, r7
   33152:	b002      	add	sp, #8
   33154:	bd80      	pop	{r7, pc}
	...

00033158 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33158:	b590      	push	{r4, r7, lr}
   3315a:	b0b1      	sub	sp, #196	; 0xc4
   3315c:	af00      	add	r7, sp, #0
   3315e:	6078      	str	r0, [r7, #4]
   33160:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   33162:	230c      	movs	r3, #12
   33164:	18fb      	adds	r3, r7, r3
   33166:	4a2e      	ldr	r2, [pc, #184]	; (33220 <sw_timer_init+0xc8>)
   33168:	ca13      	ldmia	r2!, {r0, r1, r4}
   3316a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3316c:	683b      	ldr	r3, [r7, #0]
   3316e:	885b      	ldrh	r3, [r3, #2]
   33170:	001a      	movs	r2, r3
   33172:	687b      	ldr	r3, [r7, #4]
   33174:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   33176:	687b      	ldr	r3, [r7, #4]
   33178:	3314      	adds	r3, #20
   3317a:	22bc      	movs	r2, #188	; 0xbc
   3317c:	18ba      	adds	r2, r7, r2
   3317e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33180:	683b      	ldr	r3, [r7, #0]
   33182:	781b      	ldrb	r3, [r3, #0]
   33184:	001a      	movs	r2, r3
   33186:	230c      	movs	r3, #12
   33188:	18fb      	adds	r3, r7, r3
   3318a:	0092      	lsls	r2, r2, #2
   3318c:	58d2      	ldr	r2, [r2, r3]
   3318e:	2318      	movs	r3, #24
   33190:	18fb      	adds	r3, r7, r3
   33192:	0011      	movs	r1, r2
   33194:	0018      	movs	r0, r3
   33196:	4b23      	ldr	r3, [pc, #140]	; (33224 <sw_timer_init+0xcc>)
   33198:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3319a:	4b23      	ldr	r3, [pc, #140]	; (33228 <sw_timer_init+0xd0>)
   3319c:	4798      	blx	r3
   3319e:	0004      	movs	r4, r0
   331a0:	683b      	ldr	r3, [r7, #0]
   331a2:	885b      	ldrh	r3, [r3, #2]
   331a4:	001a      	movs	r2, r3
   331a6:	4b21      	ldr	r3, [pc, #132]	; (3322c <sw_timer_init+0xd4>)
   331a8:	0011      	movs	r1, r2
   331aa:	22fa      	movs	r2, #250	; 0xfa
   331ac:	0210      	lsls	r0, r2, #8
   331ae:	4798      	blx	r3
   331b0:	0003      	movs	r3, r0
   331b2:	001a      	movs	r2, r3
   331b4:	4b1e      	ldr	r3, [pc, #120]	; (33230 <sw_timer_init+0xd8>)
   331b6:	0011      	movs	r1, r2
   331b8:	0020      	movs	r0, r4
   331ba:	4798      	blx	r3
   331bc:	0003      	movs	r3, r0
   331be:	001a      	movs	r2, r3
   331c0:	2318      	movs	r3, #24
   331c2:	18fb      	adds	r3, r7, r3
   331c4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   331c6:	2318      	movs	r3, #24
   331c8:	18fb      	adds	r3, r7, r3
   331ca:	2205      	movs	r2, #5
   331cc:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   331ce:	683b      	ldr	r3, [r7, #0]
   331d0:	781b      	ldrb	r3, [r3, #0]
   331d2:	001a      	movs	r2, r3
   331d4:	230c      	movs	r3, #12
   331d6:	18fb      	adds	r3, r7, r3
   331d8:	0092      	lsls	r2, r2, #2
   331da:	58d1      	ldr	r1, [r2, r3]
   331dc:	2318      	movs	r3, #24
   331de:	18fa      	adds	r2, r7, r3
   331e0:	23bc      	movs	r3, #188	; 0xbc
   331e2:	18fb      	adds	r3, r7, r3
   331e4:	681b      	ldr	r3, [r3, #0]
   331e6:	0018      	movs	r0, r3
   331e8:	4b12      	ldr	r3, [pc, #72]	; (33234 <sw_timer_init+0xdc>)
   331ea:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   331ec:	683b      	ldr	r3, [r7, #0]
   331ee:	785b      	ldrb	r3, [r3, #1]
   331f0:	3308      	adds	r3, #8
   331f2:	b2da      	uxtb	r2, r3
   331f4:	4910      	ldr	r1, [pc, #64]	; (33238 <sw_timer_init+0xe0>)
   331f6:	23bc      	movs	r3, #188	; 0xbc
   331f8:	18fb      	adds	r3, r7, r3
   331fa:	681b      	ldr	r3, [r3, #0]
   331fc:	0018      	movs	r0, r3
   331fe:	4b0f      	ldr	r3, [pc, #60]	; (3323c <sw_timer_init+0xe4>)
   33200:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33202:	683b      	ldr	r3, [r7, #0]
   33204:	785b      	ldrb	r3, [r3, #1]
   33206:	3308      	adds	r3, #8
   33208:	b2da      	uxtb	r2, r3
   3320a:	23bc      	movs	r3, #188	; 0xbc
   3320c:	18fb      	adds	r3, r7, r3
   3320e:	681b      	ldr	r3, [r3, #0]
   33210:	0011      	movs	r1, r2
   33212:	0018      	movs	r0, r3
   33214:	4b0a      	ldr	r3, [pc, #40]	; (33240 <sw_timer_init+0xe8>)
   33216:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   33218:	46c0      	nop			; (mov r8, r8)
   3321a:	46bd      	mov	sp, r7
   3321c:	b031      	add	sp, #196	; 0xc4
   3321e:	bd90      	pop	{r4, r7, pc}
   33220:	0003ae74 	.word	0x0003ae74
   33224:	0002af0d 	.word	0x0002af0d
   33228:	000330c1 	.word	0x000330c1
   3322c:	00033829 	.word	0x00033829
   33230:	00033715 	.word	0x00033715
   33234:	0002b569 	.word	0x0002b569
   33238:	00033115 	.word	0x00033115
   3323c:	0002baad 	.word	0x0002baad
   33240:	0002baed 	.word	0x0002baed

00033244 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   33244:	b580      	push	{r7, lr}
   33246:	b084      	sub	sp, #16
   33248:	af00      	add	r7, sp, #0
   3324a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3324c:	687b      	ldr	r3, [r7, #4]
   3324e:	3314      	adds	r3, #20
   33250:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   33252:	68fb      	ldr	r3, [r7, #12]
   33254:	0018      	movs	r0, r3
   33256:	4b03      	ldr	r3, [pc, #12]	; (33264 <sw_timer_enable+0x20>)
   33258:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3325a:	46c0      	nop			; (mov r8, r8)
   3325c:	46bd      	mov	sp, r7
   3325e:	b004      	add	sp, #16
   33260:	bd80      	pop	{r7, pc}
   33262:	46c0      	nop			; (mov r8, r8)
   33264:	000330e5 	.word	0x000330e5

00033268 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33268:	b580      	push	{r7, lr}
   3326a:	b086      	sub	sp, #24
   3326c:	af00      	add	r7, sp, #0
   3326e:	60f8      	str	r0, [r7, #12]
   33270:	60b9      	str	r1, [r7, #8]
   33272:	607a      	str	r2, [r7, #4]
   33274:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33276:	2300      	movs	r3, #0
   33278:	617b      	str	r3, [r7, #20]
   3327a:	e032      	b.n	332e2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3327c:	68f9      	ldr	r1, [r7, #12]
   3327e:	697a      	ldr	r2, [r7, #20]
   33280:	0013      	movs	r3, r2
   33282:	009b      	lsls	r3, r3, #2
   33284:	189b      	adds	r3, r3, r2
   33286:	009b      	lsls	r3, r3, #2
   33288:	5c5b      	ldrb	r3, [r3, r1]
   3328a:	07db      	lsls	r3, r3, #31
   3328c:	0fdb      	lsrs	r3, r3, #31
   3328e:	b2db      	uxtb	r3, r3
   33290:	2b00      	cmp	r3, #0
   33292:	d123      	bne.n	332dc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   33294:	697a      	ldr	r2, [r7, #20]
   33296:	0013      	movs	r3, r2
   33298:	009b      	lsls	r3, r3, #2
   3329a:	189b      	adds	r3, r3, r2
   3329c:	009b      	lsls	r3, r3, #2
   3329e:	68fa      	ldr	r2, [r7, #12]
   332a0:	18d3      	adds	r3, r2, r3
   332a2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   332a4:	693b      	ldr	r3, [r7, #16]
   332a6:	68ba      	ldr	r2, [r7, #8]
   332a8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   332aa:	693b      	ldr	r3, [r7, #16]
   332ac:	781a      	ldrb	r2, [r3, #0]
   332ae:	2102      	movs	r1, #2
   332b0:	438a      	bics	r2, r1
   332b2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   332b4:	693b      	ldr	r3, [r7, #16]
   332b6:	687a      	ldr	r2, [r7, #4]
   332b8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   332ba:	68fb      	ldr	r3, [r7, #12]
   332bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   332be:	4b0d      	ldr	r3, [pc, #52]	; (332f4 <sw_timer_register_callback+0x8c>)
   332c0:	0011      	movs	r1, r2
   332c2:	6838      	ldr	r0, [r7, #0]
   332c4:	4798      	blx	r3
   332c6:	0003      	movs	r3, r0
   332c8:	001a      	movs	r2, r3
   332ca:	693b      	ldr	r3, [r7, #16]
   332cc:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   332ce:	693b      	ldr	r3, [r7, #16]
   332d0:	781a      	ldrb	r2, [r3, #0]
   332d2:	2101      	movs	r1, #1
   332d4:	430a      	orrs	r2, r1
   332d6:	701a      	strb	r2, [r3, #0]
			return index;
   332d8:	697b      	ldr	r3, [r7, #20]
   332da:	e007      	b.n	332ec <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   332dc:	697b      	ldr	r3, [r7, #20]
   332de:	3301      	adds	r3, #1
   332e0:	617b      	str	r3, [r7, #20]
   332e2:	697b      	ldr	r3, [r7, #20]
   332e4:	2b00      	cmp	r3, #0
   332e6:	ddc9      	ble.n	3327c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   332e8:	2301      	movs	r3, #1
   332ea:	425b      	negs	r3, r3
}
   332ec:	0018      	movs	r0, r3
   332ee:	46bd      	mov	sp, r7
   332f0:	b006      	add	sp, #24
   332f2:	bd80      	pop	{r7, pc}
   332f4:	00033715 	.word	0x00033715

000332f8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   332f8:	b580      	push	{r7, lr}
   332fa:	b086      	sub	sp, #24
   332fc:	af00      	add	r7, sp, #0
   332fe:	60f8      	str	r0, [r7, #12]
   33300:	60b9      	str	r1, [r7, #8]
   33302:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33304:	68ba      	ldr	r2, [r7, #8]
   33306:	0013      	movs	r3, r2
   33308:	009b      	lsls	r3, r3, #2
   3330a:	189b      	adds	r3, r3, r2
   3330c:	009b      	lsls	r3, r3, #2
   3330e:	68fa      	ldr	r2, [r7, #12]
   33310:	18d3      	adds	r3, r2, r3
   33312:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   33314:	697b      	ldr	r3, [r7, #20]
   33316:	781a      	ldrb	r2, [r3, #0]
   33318:	2102      	movs	r1, #2
   3331a:	430a      	orrs	r2, r1
   3331c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3331e:	68fb      	ldr	r3, [r7, #12]
   33320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33322:	4b07      	ldr	r3, [pc, #28]	; (33340 <sw_timer_enable_callback+0x48>)
   33324:	0011      	movs	r1, r2
   33326:	6878      	ldr	r0, [r7, #4]
   33328:	4798      	blx	r3
   3332a:	0003      	movs	r3, r0
   3332c:	001a      	movs	r2, r3
   3332e:	4b05      	ldr	r3, [pc, #20]	; (33344 <sw_timer_enable_callback+0x4c>)
   33330:	681b      	ldr	r3, [r3, #0]
   33332:	18d2      	adds	r2, r2, r3
   33334:	697b      	ldr	r3, [r7, #20]
   33336:	611a      	str	r2, [r3, #16]
}
   33338:	46c0      	nop			; (mov r8, r8)
   3333a:	46bd      	mov	sp, r7
   3333c:	b006      	add	sp, #24
   3333e:	bd80      	pop	{r7, pc}
   33340:	00033715 	.word	0x00033715
   33344:	20004714 	.word	0x20004714

00033348 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33348:	b580      	push	{r7, lr}
   3334a:	b084      	sub	sp, #16
   3334c:	af00      	add	r7, sp, #0
   3334e:	6078      	str	r0, [r7, #4]
   33350:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33352:	683a      	ldr	r2, [r7, #0]
   33354:	0013      	movs	r3, r2
   33356:	009b      	lsls	r3, r3, #2
   33358:	189b      	adds	r3, r3, r2
   3335a:	009b      	lsls	r3, r3, #2
   3335c:	687a      	ldr	r2, [r7, #4]
   3335e:	18d3      	adds	r3, r2, r3
   33360:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   33362:	68fb      	ldr	r3, [r7, #12]
   33364:	781a      	ldrb	r2, [r3, #0]
   33366:	2102      	movs	r1, #2
   33368:	438a      	bics	r2, r1
   3336a:	701a      	strb	r2, [r3, #0]
}
   3336c:	46c0      	nop			; (mov r8, r8)
   3336e:	46bd      	mov	sp, r7
   33370:	b004      	add	sp, #16
   33372:	bd80      	pop	{r7, pc}

00033374 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   33374:	b590      	push	{r4, r7, lr}
   33376:	b085      	sub	sp, #20
   33378:	af00      	add	r7, sp, #0
   3337a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3337c:	2300      	movs	r3, #0
   3337e:	60fb      	str	r3, [r7, #12]
   33380:	e053      	b.n	3342a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   33382:	6879      	ldr	r1, [r7, #4]
   33384:	68fa      	ldr	r2, [r7, #12]
   33386:	0013      	movs	r3, r2
   33388:	009b      	lsls	r3, r3, #2
   3338a:	189b      	adds	r3, r3, r2
   3338c:	009b      	lsls	r3, r3, #2
   3338e:	5c5b      	ldrb	r3, [r3, r1]
   33390:	07db      	lsls	r3, r3, #31
   33392:	0fdb      	lsrs	r3, r3, #31
   33394:	b2db      	uxtb	r3, r3
   33396:	2b00      	cmp	r3, #0
   33398:	d044      	beq.n	33424 <sw_timer_task+0xb0>
   3339a:	6879      	ldr	r1, [r7, #4]
   3339c:	68fa      	ldr	r2, [r7, #12]
   3339e:	0013      	movs	r3, r2
   333a0:	009b      	lsls	r3, r3, #2
   333a2:	189b      	adds	r3, r3, r2
   333a4:	009b      	lsls	r3, r3, #2
   333a6:	5c5b      	ldrb	r3, [r3, r1]
   333a8:	079b      	lsls	r3, r3, #30
   333aa:	0fdb      	lsrs	r3, r3, #31
   333ac:	b2db      	uxtb	r3, r3
   333ae:	2b00      	cmp	r3, #0
   333b0:	d038      	beq.n	33424 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   333b2:	68fa      	ldr	r2, [r7, #12]
   333b4:	0013      	movs	r3, r2
   333b6:	009b      	lsls	r3, r3, #2
   333b8:	189b      	adds	r3, r3, r2
   333ba:	009b      	lsls	r3, r3, #2
   333bc:	687a      	ldr	r2, [r7, #4]
   333be:	18d3      	adds	r3, r2, r3
   333c0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   333c2:	68bb      	ldr	r3, [r7, #8]
   333c4:	691a      	ldr	r2, [r3, #16]
   333c6:	4b1c      	ldr	r3, [pc, #112]	; (33438 <sw_timer_task+0xc4>)
   333c8:	681b      	ldr	r3, [r3, #0]
   333ca:	1ad3      	subs	r3, r2, r3
   333cc:	d52a      	bpl.n	33424 <sw_timer_task+0xb0>
   333ce:	68bb      	ldr	r3, [r7, #8]
   333d0:	781b      	ldrb	r3, [r3, #0]
   333d2:	2204      	movs	r2, #4
   333d4:	4013      	ands	r3, r2
   333d6:	b2db      	uxtb	r3, r3
   333d8:	2b00      	cmp	r3, #0
   333da:	d123      	bne.n	33424 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   333dc:	68bb      	ldr	r3, [r7, #8]
   333de:	781a      	ldrb	r2, [r3, #0]
   333e0:	2104      	movs	r1, #4
   333e2:	430a      	orrs	r2, r1
   333e4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   333e6:	68bb      	ldr	r3, [r7, #8]
   333e8:	68db      	ldr	r3, [r3, #12]
   333ea:	2b00      	cmp	r3, #0
   333ec:	d007      	beq.n	333fe <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   333ee:	68bb      	ldr	r3, [r7, #8]
   333f0:	68da      	ldr	r2, [r3, #12]
   333f2:	4b11      	ldr	r3, [pc, #68]	; (33438 <sw_timer_task+0xc4>)
   333f4:	681b      	ldr	r3, [r3, #0]
   333f6:	18d2      	adds	r2, r2, r3
   333f8:	68bb      	ldr	r3, [r7, #8]
   333fa:	611a      	str	r2, [r3, #16]
   333fc:	e004      	b.n	33408 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   333fe:	68bb      	ldr	r3, [r7, #8]
   33400:	781a      	ldrb	r2, [r3, #0]
   33402:	2102      	movs	r1, #2
   33404:	438a      	bics	r2, r1
   33406:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33408:	68bb      	ldr	r3, [r7, #8]
   3340a:	685c      	ldr	r4, [r3, #4]
   3340c:	68bb      	ldr	r3, [r7, #8]
   3340e:	689a      	ldr	r2, [r3, #8]
   33410:	68bb      	ldr	r3, [r7, #8]
   33412:	68db      	ldr	r3, [r3, #12]
   33414:	68f9      	ldr	r1, [r7, #12]
   33416:	6878      	ldr	r0, [r7, #4]
   33418:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3341a:	68bb      	ldr	r3, [r7, #8]
   3341c:	781a      	ldrb	r2, [r3, #0]
   3341e:	2104      	movs	r1, #4
   33420:	438a      	bics	r2, r1
   33422:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33424:	68fb      	ldr	r3, [r7, #12]
   33426:	3301      	adds	r3, #1
   33428:	60fb      	str	r3, [r7, #12]
   3342a:	68fb      	ldr	r3, [r7, #12]
   3342c:	2b00      	cmp	r3, #0
   3342e:	dda8      	ble.n	33382 <sw_timer_task+0xe>
			}
		}
	}
}
   33430:	46c0      	nop			; (mov r8, r8)
   33432:	46bd      	mov	sp, r7
   33434:	b005      	add	sp, #20
   33436:	bd90      	pop	{r4, r7, pc}
   33438:	20004714 	.word	0x20004714

0003343c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3343c:	b580      	push	{r7, lr}
   3343e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33440:	4b06      	ldr	r3, [pc, #24]	; (3345c <main+0x20>)
   33442:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   33444:	4b06      	ldr	r3, [pc, #24]	; (33460 <main+0x24>)
   33446:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33448:	2001      	movs	r0, #1
   3344a:	4b06      	ldr	r3, [pc, #24]	; (33464 <main+0x28>)
   3344c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3344e:	4b06      	ldr	r3, [pc, #24]	; (33468 <main+0x2c>)
   33450:	4798      	blx	r3

    return 0;  // Will not get here
   33452:	2300      	movs	r3, #0
}
   33454:	0018      	movs	r0, r3
   33456:	46bd      	mov	sp, r7
   33458:	bd80      	pop	{r7, pc}
   3345a:	46c0      	nop			; (mov r8, r8)
   3345c:	0002ae01 	.word	0x0002ae01
   33460:	0001e8a5 	.word	0x0001e8a5
   33464:	00018f79 	.word	0x00018f79
   33468:	0001cefd 	.word	0x0001cefd

0003346c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3346c:	b580      	push	{r7, lr}
   3346e:	b082      	sub	sp, #8
   33470:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   33472:	4b29      	ldr	r3, [pc, #164]	; (33518 <vApplicationDaemonTaskStartupHook+0xac>)
   33474:	0018      	movs	r0, r3
   33476:	4b29      	ldr	r3, [pc, #164]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   33478:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   3347a:	4b29      	ldr	r3, [pc, #164]	; (33520 <vApplicationDaemonTaskStartupHook+0xb4>)
   3347c:	0018      	movs	r0, r3
   3347e:	4b27      	ldr	r3, [pc, #156]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   33480:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   33482:	4b28      	ldr	r3, [pc, #160]	; (33524 <vApplicationDaemonTaskStartupHook+0xb8>)
   33484:	4798      	blx	r3
   33486:	1e03      	subs	r3, r0, #0
   33488:	d004      	beq.n	33494 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   3348a:	4b27      	ldr	r3, [pc, #156]	; (33528 <vApplicationDaemonTaskStartupHook+0xbc>)
   3348c:	0018      	movs	r0, r3
   3348e:	4b23      	ldr	r3, [pc, #140]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   33490:	4798      	blx	r3
   33492:	e003      	b.n	3349c <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   33494:	4b25      	ldr	r3, [pc, #148]	; (3352c <vApplicationDaemonTaskStartupHook+0xc0>)
   33496:	0018      	movs	r0, r3
   33498:	4b20      	ldr	r3, [pc, #128]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   3349a:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   3349c:	4b24      	ldr	r3, [pc, #144]	; (33530 <vApplicationDaemonTaskStartupHook+0xc4>)
   3349e:	4798      	blx	r3
   334a0:	1e03      	subs	r3, r0, #0
   334a2:	d004      	beq.n	334ae <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   334a4:	4b23      	ldr	r3, [pc, #140]	; (33534 <vApplicationDaemonTaskStartupHook+0xc8>)
   334a6:	0018      	movs	r0, r3
   334a8:	4b1c      	ldr	r3, [pc, #112]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334aa:	4798      	blx	r3
   334ac:	e003      	b.n	334b6 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   334ae:	4b22      	ldr	r3, [pc, #136]	; (33538 <vApplicationDaemonTaskStartupHook+0xcc>)
   334b0:	0018      	movs	r0, r3
   334b2:	4b1a      	ldr	r3, [pc, #104]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334b4:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   334b6:	1dfb      	adds	r3, r7, #7
   334b8:	2200      	movs	r2, #0
   334ba:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   334bc:	4b1f      	ldr	r3, [pc, #124]	; (3353c <vApplicationDaemonTaskStartupHook+0xd0>)
   334be:	4798      	blx	r3
   334c0:	0002      	movs	r2, r0
   334c2:	1dfb      	adds	r3, r7, #7
   334c4:	0019      	movs	r1, r3
   334c6:	0010      	movs	r0, r2
   334c8:	4b1d      	ldr	r3, [pc, #116]	; (33540 <vApplicationDaemonTaskStartupHook+0xd4>)
   334ca:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   334cc:	1dfb      	adds	r3, r7, #7
   334ce:	781b      	ldrb	r3, [r3, #0]
   334d0:	2b6c      	cmp	r3, #108	; 0x6c
   334d2:	d004      	beq.n	334de <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   334d4:	4b1b      	ldr	r3, [pc, #108]	; (33544 <vApplicationDaemonTaskStartupHook+0xd8>)
   334d6:	0018      	movs	r0, r3
   334d8:	4b10      	ldr	r3, [pc, #64]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334da:	4798      	blx	r3
   334dc:	e010      	b.n	33500 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   334de:	4b1a      	ldr	r3, [pc, #104]	; (33548 <vApplicationDaemonTaskStartupHook+0xdc>)
   334e0:	0018      	movs	r0, r3
   334e2:	4b0e      	ldr	r3, [pc, #56]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334e4:	4798      	blx	r3
        if (InitImu() == 0) {
   334e6:	4b19      	ldr	r3, [pc, #100]	; (3354c <vApplicationDaemonTaskStartupHook+0xe0>)
   334e8:	4798      	blx	r3
   334ea:	1e03      	subs	r3, r0, #0
   334ec:	d104      	bne.n	334f8 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   334ee:	4b18      	ldr	r3, [pc, #96]	; (33550 <vApplicationDaemonTaskStartupHook+0xe4>)
   334f0:	0018      	movs	r0, r3
   334f2:	4b0a      	ldr	r3, [pc, #40]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334f4:	4798      	blx	r3
   334f6:	e003      	b.n	33500 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   334f8:	4b16      	ldr	r3, [pc, #88]	; (33554 <vApplicationDaemonTaskStartupHook+0xe8>)
   334fa:	0018      	movs	r0, r3
   334fc:	4b07      	ldr	r3, [pc, #28]	; (3351c <vApplicationDaemonTaskStartupHook+0xb0>)
   334fe:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   33500:	4b15      	ldr	r3, [pc, #84]	; (33558 <vApplicationDaemonTaskStartupHook+0xec>)
   33502:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33504:	4b15      	ldr	r3, [pc, #84]	; (3355c <vApplicationDaemonTaskStartupHook+0xf0>)
   33506:	681b      	ldr	r3, [r3, #0]
   33508:	0018      	movs	r0, r3
   3350a:	4b15      	ldr	r3, [pc, #84]	; (33560 <vApplicationDaemonTaskStartupHook+0xf4>)
   3350c:	4798      	blx	r3
}
   3350e:	46c0      	nop			; (mov r8, r8)
   33510:	46bd      	mov	sp, r7
   33512:	b002      	add	sp, #8
   33514:	bd80      	pop	{r7, pc}
   33516:	46c0      	nop			; (mov r8, r8)
   33518:	0003ae80 	.word	0x0003ae80
   3351c:	0001e915 	.word	0x0001e915
   33520:	0003aea4 	.word	0x0003aea4
   33524:	00014881 	.word	0x00014881
   33528:	0003aebc 	.word	0x0003aebc
   3352c:	0003aee0 	.word	0x0003aee0
   33530:	00015e65 	.word	0x00015e65
   33534:	0003aefc 	.word	0x0003aefc
   33538:	0003af1c 	.word	0x0003af1c
   3353c:	000159e9 	.word	0x000159e9
   33540:	000155ed 	.word	0x000155ed
   33544:	0003af34 	.word	0x0003af34
   33548:	0003af48 	.word	0x0003af48
   3354c:	000159f9 	.word	0x000159f9
   33550:	0003af58 	.word	0x0003af58
   33554:	0003af6c 	.word	0x0003af6c
   33558:	00033565 	.word	0x00033565
   3355c:	2000471c 	.word	0x2000471c
   33560:	0001cda1 	.word	0x0001cda1

00033564 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   33564:	b590      	push	{r4, r7, lr}
   33566:	b083      	sub	sp, #12
   33568:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3356a:	4b44      	ldr	r3, [pc, #272]	; (3367c <StartTasks+0x118>)
   3356c:	4798      	blx	r3
   3356e:	0003      	movs	r3, r0
   33570:	4a43      	ldr	r2, [pc, #268]	; (33680 <StartTasks+0x11c>)
   33572:	4844      	ldr	r0, [pc, #272]	; (33684 <StartTasks+0x120>)
   33574:	2140      	movs	r1, #64	; 0x40
   33576:	4c44      	ldr	r4, [pc, #272]	; (33688 <StartTasks+0x124>)
   33578:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3357a:	4b42      	ldr	r3, [pc, #264]	; (33684 <StartTasks+0x120>)
   3357c:	0018      	movs	r0, r3
   3357e:	4b43      	ldr	r3, [pc, #268]	; (3368c <StartTasks+0x128>)
   33580:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   33582:	23c8      	movs	r3, #200	; 0xc8
   33584:	005a      	lsls	r2, r3, #1
   33586:	4942      	ldr	r1, [pc, #264]	; (33690 <StartTasks+0x12c>)
   33588:	4842      	ldr	r0, [pc, #264]	; (33694 <StartTasks+0x130>)
   3358a:	4b43      	ldr	r3, [pc, #268]	; (33698 <StartTasks+0x134>)
   3358c:	9301      	str	r3, [sp, #4]
   3358e:	2304      	movs	r3, #4
   33590:	9300      	str	r3, [sp, #0]
   33592:	2300      	movs	r3, #0
   33594:	4c41      	ldr	r4, [pc, #260]	; (3369c <StartTasks+0x138>)
   33596:	47a0      	blx	r4
   33598:	0003      	movs	r3, r0
   3359a:	2b01      	cmp	r3, #1
   3359c:	d003      	beq.n	335a6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3359e:	4b40      	ldr	r3, [pc, #256]	; (336a0 <StartTasks+0x13c>)
   335a0:	0018      	movs	r0, r3
   335a2:	4b3a      	ldr	r3, [pc, #232]	; (3368c <StartTasks+0x128>)
   335a4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   335a6:	4b35      	ldr	r3, [pc, #212]	; (3367c <StartTasks+0x118>)
   335a8:	4798      	blx	r3
   335aa:	0003      	movs	r3, r0
   335ac:	4a3d      	ldr	r2, [pc, #244]	; (336a4 <StartTasks+0x140>)
   335ae:	4835      	ldr	r0, [pc, #212]	; (33684 <StartTasks+0x120>)
   335b0:	2140      	movs	r1, #64	; 0x40
   335b2:	4c35      	ldr	r4, [pc, #212]	; (33688 <StartTasks+0x124>)
   335b4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   335b6:	4b33      	ldr	r3, [pc, #204]	; (33684 <StartTasks+0x120>)
   335b8:	0018      	movs	r0, r3
   335ba:	4b34      	ldr	r3, [pc, #208]	; (3368c <StartTasks+0x128>)
   335bc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   335be:	23fa      	movs	r3, #250	; 0xfa
   335c0:	009a      	lsls	r2, r3, #2
   335c2:	4939      	ldr	r1, [pc, #228]	; (336a8 <StartTasks+0x144>)
   335c4:	4839      	ldr	r0, [pc, #228]	; (336ac <StartTasks+0x148>)
   335c6:	4b3a      	ldr	r3, [pc, #232]	; (336b0 <StartTasks+0x14c>)
   335c8:	9301      	str	r3, [sp, #4]
   335ca:	2303      	movs	r3, #3
   335cc:	9300      	str	r3, [sp, #0]
   335ce:	2300      	movs	r3, #0
   335d0:	4c32      	ldr	r4, [pc, #200]	; (3369c <StartTasks+0x138>)
   335d2:	47a0      	blx	r4
   335d4:	0003      	movs	r3, r0
   335d6:	2b01      	cmp	r3, #1
   335d8:	d003      	beq.n	335e2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   335da:	4b36      	ldr	r3, [pc, #216]	; (336b4 <StartTasks+0x150>)
   335dc:	0018      	movs	r0, r3
   335de:	4b2b      	ldr	r3, [pc, #172]	; (3368c <StartTasks+0x128>)
   335e0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   335e2:	4b26      	ldr	r3, [pc, #152]	; (3367c <StartTasks+0x118>)
   335e4:	4798      	blx	r3
   335e6:	0003      	movs	r3, r0
   335e8:	4a33      	ldr	r2, [pc, #204]	; (336b8 <StartTasks+0x154>)
   335ea:	4826      	ldr	r0, [pc, #152]	; (33684 <StartTasks+0x120>)
   335ec:	2140      	movs	r1, #64	; 0x40
   335ee:	4c26      	ldr	r4, [pc, #152]	; (33688 <StartTasks+0x124>)
   335f0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   335f2:	4b24      	ldr	r3, [pc, #144]	; (33684 <StartTasks+0x120>)
   335f4:	0018      	movs	r0, r3
   335f6:	4b25      	ldr	r3, [pc, #148]	; (3368c <StartTasks+0x128>)
   335f8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   335fa:	23c8      	movs	r3, #200	; 0xc8
   335fc:	005a      	lsls	r2, r3, #1
   335fe:	492f      	ldr	r1, [pc, #188]	; (336bc <StartTasks+0x158>)
   33600:	482f      	ldr	r0, [pc, #188]	; (336c0 <StartTasks+0x15c>)
   33602:	4b30      	ldr	r3, [pc, #192]	; (336c4 <StartTasks+0x160>)
   33604:	9301      	str	r3, [sp, #4]
   33606:	2304      	movs	r3, #4
   33608:	9300      	str	r3, [sp, #0]
   3360a:	2300      	movs	r3, #0
   3360c:	4c23      	ldr	r4, [pc, #140]	; (3369c <StartTasks+0x138>)
   3360e:	47a0      	blx	r4
   33610:	0003      	movs	r3, r0
   33612:	2b01      	cmp	r3, #1
   33614:	d003      	beq.n	3361e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   33616:	4b2c      	ldr	r3, [pc, #176]	; (336c8 <StartTasks+0x164>)
   33618:	0018      	movs	r0, r3
   3361a:	4b1c      	ldr	r3, [pc, #112]	; (3368c <StartTasks+0x128>)
   3361c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3361e:	4b17      	ldr	r3, [pc, #92]	; (3367c <StartTasks+0x118>)
   33620:	4798      	blx	r3
   33622:	0003      	movs	r3, r0
   33624:	4a29      	ldr	r2, [pc, #164]	; (336cc <StartTasks+0x168>)
   33626:	4817      	ldr	r0, [pc, #92]	; (33684 <StartTasks+0x120>)
   33628:	2140      	movs	r1, #64	; 0x40
   3362a:	4c17      	ldr	r4, [pc, #92]	; (33688 <StartTasks+0x124>)
   3362c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3362e:	4b15      	ldr	r3, [pc, #84]	; (33684 <StartTasks+0x120>)
   33630:	0018      	movs	r0, r3
   33632:	4b16      	ldr	r3, [pc, #88]	; (3368c <StartTasks+0x128>)
   33634:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   33636:	2380      	movs	r3, #128	; 0x80
   33638:	005a      	lsls	r2, r3, #1
   3363a:	4925      	ldr	r1, [pc, #148]	; (336d0 <StartTasks+0x16c>)
   3363c:	4825      	ldr	r0, [pc, #148]	; (336d4 <StartTasks+0x170>)
   3363e:	4b26      	ldr	r3, [pc, #152]	; (336d8 <StartTasks+0x174>)
   33640:	9301      	str	r3, [sp, #4]
   33642:	2304      	movs	r3, #4
   33644:	9300      	str	r3, [sp, #0]
   33646:	2300      	movs	r3, #0
   33648:	4c14      	ldr	r4, [pc, #80]	; (3369c <StartTasks+0x138>)
   3364a:	47a0      	blx	r4
   3364c:	0003      	movs	r3, r0
   3364e:	2b01      	cmp	r3, #1
   33650:	d003      	beq.n	3365a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   33652:	4b22      	ldr	r3, [pc, #136]	; (336dc <StartTasks+0x178>)
   33654:	0018      	movs	r0, r3
   33656:	4b0d      	ldr	r3, [pc, #52]	; (3368c <StartTasks+0x128>)
   33658:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3365a:	4b08      	ldr	r3, [pc, #32]	; (3367c <StartTasks+0x118>)
   3365c:	4798      	blx	r3
   3365e:	0003      	movs	r3, r0
   33660:	4a1f      	ldr	r2, [pc, #124]	; (336e0 <StartTasks+0x17c>)
   33662:	4808      	ldr	r0, [pc, #32]	; (33684 <StartTasks+0x120>)
   33664:	2140      	movs	r1, #64	; 0x40
   33666:	4c08      	ldr	r4, [pc, #32]	; (33688 <StartTasks+0x124>)
   33668:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3366a:	4b06      	ldr	r3, [pc, #24]	; (33684 <StartTasks+0x120>)
   3366c:	0018      	movs	r0, r3
   3366e:	4b07      	ldr	r3, [pc, #28]	; (3368c <StartTasks+0x128>)
   33670:	4798      	blx	r3
}
   33672:	46c0      	nop			; (mov r8, r8)
   33674:	46bd      	mov	sp, r7
   33676:	b001      	add	sp, #4
   33678:	bd90      	pop	{r4, r7, pc}
   3367a:	46c0      	nop			; (mov r8, r8)
   3367c:	0001aee1 	.word	0x0001aee1
   33680:	0003af88 	.word	0x0003af88
   33684:	20005ce4 	.word	0x20005ce4
   33688:	00035949 	.word	0x00035949
   3368c:	0001e915 	.word	0x0001e915
   33690:	0003afac 	.word	0x0003afac
   33694:	00013819 	.word	0x00013819
   33698:	20004718 	.word	0x20004718
   3369c:	0001c925 	.word	0x0001c925
   336a0:	0003afb8 	.word	0x0003afb8
   336a4:	0003afe4 	.word	0x0003afe4
   336a8:	0003b004 	.word	0x0003b004
   336ac:	00017cc9 	.word	0x00017cc9
   336b0:	20004720 	.word	0x20004720
   336b4:	0003b010 	.word	0x0003b010
   336b8:	0003b03c 	.word	0x0003b03c
   336bc:	0003b05c 	.word	0x0003b05c
   336c0:	00016459 	.word	0x00016459
   336c4:	20004724 	.word	0x20004724
   336c8:	0003b064 	.word	0x0003b064
   336cc:	0003b090 	.word	0x0003b090
   336d0:	0003b0b4 	.word	0x0003b0b4
   336d4:	00014235 	.word	0x00014235
   336d8:	20004728 	.word	0x20004728
   336dc:	0003b0c4 	.word	0x0003b0c4
   336e0:	0003b0f4 	.word	0x0003b0f4

000336e4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   336e4:	b580      	push	{r7, lr}
   336e6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   336e8:	4b02      	ldr	r3, [pc, #8]	; (336f4 <vApplicationMallocFailedHook+0x10>)
   336ea:	0018      	movs	r0, r3
   336ec:	4b02      	ldr	r3, [pc, #8]	; (336f8 <vApplicationMallocFailedHook+0x14>)
   336ee:	4798      	blx	r3
    while (1)
   336f0:	e7fe      	b.n	336f0 <vApplicationMallocFailedHook+0xc>
   336f2:	46c0      	nop			; (mov r8, r8)
   336f4:	0003b11c 	.word	0x0003b11c
   336f8:	0001e915 	.word	0x0001e915

000336fc <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   336fc:	b580      	push	{r7, lr}
   336fe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33700:	4b02      	ldr	r3, [pc, #8]	; (3370c <vApplicationStackOverflowHook+0x10>)
   33702:	0018      	movs	r0, r3
   33704:	4b02      	ldr	r3, [pc, #8]	; (33710 <vApplicationStackOverflowHook+0x14>)
   33706:	4798      	blx	r3
    while (1)
   33708:	e7fe      	b.n	33708 <vApplicationStackOverflowHook+0xc>
   3370a:	46c0      	nop			; (mov r8, r8)
   3370c:	0003b148 	.word	0x0003b148
   33710:	0001e915 	.word	0x0001e915

00033714 <__udivsi3>:
   33714:	2200      	movs	r2, #0
   33716:	0843      	lsrs	r3, r0, #1
   33718:	428b      	cmp	r3, r1
   3371a:	d374      	bcc.n	33806 <__udivsi3+0xf2>
   3371c:	0903      	lsrs	r3, r0, #4
   3371e:	428b      	cmp	r3, r1
   33720:	d35f      	bcc.n	337e2 <__udivsi3+0xce>
   33722:	0a03      	lsrs	r3, r0, #8
   33724:	428b      	cmp	r3, r1
   33726:	d344      	bcc.n	337b2 <__udivsi3+0x9e>
   33728:	0b03      	lsrs	r3, r0, #12
   3372a:	428b      	cmp	r3, r1
   3372c:	d328      	bcc.n	33780 <__udivsi3+0x6c>
   3372e:	0c03      	lsrs	r3, r0, #16
   33730:	428b      	cmp	r3, r1
   33732:	d30d      	bcc.n	33750 <__udivsi3+0x3c>
   33734:	22ff      	movs	r2, #255	; 0xff
   33736:	0209      	lsls	r1, r1, #8
   33738:	ba12      	rev	r2, r2
   3373a:	0c03      	lsrs	r3, r0, #16
   3373c:	428b      	cmp	r3, r1
   3373e:	d302      	bcc.n	33746 <__udivsi3+0x32>
   33740:	1212      	asrs	r2, r2, #8
   33742:	0209      	lsls	r1, r1, #8
   33744:	d065      	beq.n	33812 <__udivsi3+0xfe>
   33746:	0b03      	lsrs	r3, r0, #12
   33748:	428b      	cmp	r3, r1
   3374a:	d319      	bcc.n	33780 <__udivsi3+0x6c>
   3374c:	e000      	b.n	33750 <__udivsi3+0x3c>
   3374e:	0a09      	lsrs	r1, r1, #8
   33750:	0bc3      	lsrs	r3, r0, #15
   33752:	428b      	cmp	r3, r1
   33754:	d301      	bcc.n	3375a <__udivsi3+0x46>
   33756:	03cb      	lsls	r3, r1, #15
   33758:	1ac0      	subs	r0, r0, r3
   3375a:	4152      	adcs	r2, r2
   3375c:	0b83      	lsrs	r3, r0, #14
   3375e:	428b      	cmp	r3, r1
   33760:	d301      	bcc.n	33766 <__udivsi3+0x52>
   33762:	038b      	lsls	r3, r1, #14
   33764:	1ac0      	subs	r0, r0, r3
   33766:	4152      	adcs	r2, r2
   33768:	0b43      	lsrs	r3, r0, #13
   3376a:	428b      	cmp	r3, r1
   3376c:	d301      	bcc.n	33772 <__udivsi3+0x5e>
   3376e:	034b      	lsls	r3, r1, #13
   33770:	1ac0      	subs	r0, r0, r3
   33772:	4152      	adcs	r2, r2
   33774:	0b03      	lsrs	r3, r0, #12
   33776:	428b      	cmp	r3, r1
   33778:	d301      	bcc.n	3377e <__udivsi3+0x6a>
   3377a:	030b      	lsls	r3, r1, #12
   3377c:	1ac0      	subs	r0, r0, r3
   3377e:	4152      	adcs	r2, r2
   33780:	0ac3      	lsrs	r3, r0, #11
   33782:	428b      	cmp	r3, r1
   33784:	d301      	bcc.n	3378a <__udivsi3+0x76>
   33786:	02cb      	lsls	r3, r1, #11
   33788:	1ac0      	subs	r0, r0, r3
   3378a:	4152      	adcs	r2, r2
   3378c:	0a83      	lsrs	r3, r0, #10
   3378e:	428b      	cmp	r3, r1
   33790:	d301      	bcc.n	33796 <__udivsi3+0x82>
   33792:	028b      	lsls	r3, r1, #10
   33794:	1ac0      	subs	r0, r0, r3
   33796:	4152      	adcs	r2, r2
   33798:	0a43      	lsrs	r3, r0, #9
   3379a:	428b      	cmp	r3, r1
   3379c:	d301      	bcc.n	337a2 <__udivsi3+0x8e>
   3379e:	024b      	lsls	r3, r1, #9
   337a0:	1ac0      	subs	r0, r0, r3
   337a2:	4152      	adcs	r2, r2
   337a4:	0a03      	lsrs	r3, r0, #8
   337a6:	428b      	cmp	r3, r1
   337a8:	d301      	bcc.n	337ae <__udivsi3+0x9a>
   337aa:	020b      	lsls	r3, r1, #8
   337ac:	1ac0      	subs	r0, r0, r3
   337ae:	4152      	adcs	r2, r2
   337b0:	d2cd      	bcs.n	3374e <__udivsi3+0x3a>
   337b2:	09c3      	lsrs	r3, r0, #7
   337b4:	428b      	cmp	r3, r1
   337b6:	d301      	bcc.n	337bc <__udivsi3+0xa8>
   337b8:	01cb      	lsls	r3, r1, #7
   337ba:	1ac0      	subs	r0, r0, r3
   337bc:	4152      	adcs	r2, r2
   337be:	0983      	lsrs	r3, r0, #6
   337c0:	428b      	cmp	r3, r1
   337c2:	d301      	bcc.n	337c8 <__udivsi3+0xb4>
   337c4:	018b      	lsls	r3, r1, #6
   337c6:	1ac0      	subs	r0, r0, r3
   337c8:	4152      	adcs	r2, r2
   337ca:	0943      	lsrs	r3, r0, #5
   337cc:	428b      	cmp	r3, r1
   337ce:	d301      	bcc.n	337d4 <__udivsi3+0xc0>
   337d0:	014b      	lsls	r3, r1, #5
   337d2:	1ac0      	subs	r0, r0, r3
   337d4:	4152      	adcs	r2, r2
   337d6:	0903      	lsrs	r3, r0, #4
   337d8:	428b      	cmp	r3, r1
   337da:	d301      	bcc.n	337e0 <__udivsi3+0xcc>
   337dc:	010b      	lsls	r3, r1, #4
   337de:	1ac0      	subs	r0, r0, r3
   337e0:	4152      	adcs	r2, r2
   337e2:	08c3      	lsrs	r3, r0, #3
   337e4:	428b      	cmp	r3, r1
   337e6:	d301      	bcc.n	337ec <__udivsi3+0xd8>
   337e8:	00cb      	lsls	r3, r1, #3
   337ea:	1ac0      	subs	r0, r0, r3
   337ec:	4152      	adcs	r2, r2
   337ee:	0883      	lsrs	r3, r0, #2
   337f0:	428b      	cmp	r3, r1
   337f2:	d301      	bcc.n	337f8 <__udivsi3+0xe4>
   337f4:	008b      	lsls	r3, r1, #2
   337f6:	1ac0      	subs	r0, r0, r3
   337f8:	4152      	adcs	r2, r2
   337fa:	0843      	lsrs	r3, r0, #1
   337fc:	428b      	cmp	r3, r1
   337fe:	d301      	bcc.n	33804 <__udivsi3+0xf0>
   33800:	004b      	lsls	r3, r1, #1
   33802:	1ac0      	subs	r0, r0, r3
   33804:	4152      	adcs	r2, r2
   33806:	1a41      	subs	r1, r0, r1
   33808:	d200      	bcs.n	3380c <__udivsi3+0xf8>
   3380a:	4601      	mov	r1, r0
   3380c:	4152      	adcs	r2, r2
   3380e:	4610      	mov	r0, r2
   33810:	4770      	bx	lr
   33812:	e7ff      	b.n	33814 <__udivsi3+0x100>
   33814:	b501      	push	{r0, lr}
   33816:	2000      	movs	r0, #0
   33818:	f000 f8f0 	bl	339fc <__aeabi_idiv0>
   3381c:	bd02      	pop	{r1, pc}
   3381e:	46c0      	nop			; (mov r8, r8)

00033820 <__aeabi_uidivmod>:
   33820:	2900      	cmp	r1, #0
   33822:	d0f7      	beq.n	33814 <__udivsi3+0x100>
   33824:	e776      	b.n	33714 <__udivsi3>
   33826:	4770      	bx	lr

00033828 <__divsi3>:
   33828:	4603      	mov	r3, r0
   3382a:	430b      	orrs	r3, r1
   3382c:	d47f      	bmi.n	3392e <__divsi3+0x106>
   3382e:	2200      	movs	r2, #0
   33830:	0843      	lsrs	r3, r0, #1
   33832:	428b      	cmp	r3, r1
   33834:	d374      	bcc.n	33920 <__divsi3+0xf8>
   33836:	0903      	lsrs	r3, r0, #4
   33838:	428b      	cmp	r3, r1
   3383a:	d35f      	bcc.n	338fc <__divsi3+0xd4>
   3383c:	0a03      	lsrs	r3, r0, #8
   3383e:	428b      	cmp	r3, r1
   33840:	d344      	bcc.n	338cc <__divsi3+0xa4>
   33842:	0b03      	lsrs	r3, r0, #12
   33844:	428b      	cmp	r3, r1
   33846:	d328      	bcc.n	3389a <__divsi3+0x72>
   33848:	0c03      	lsrs	r3, r0, #16
   3384a:	428b      	cmp	r3, r1
   3384c:	d30d      	bcc.n	3386a <__divsi3+0x42>
   3384e:	22ff      	movs	r2, #255	; 0xff
   33850:	0209      	lsls	r1, r1, #8
   33852:	ba12      	rev	r2, r2
   33854:	0c03      	lsrs	r3, r0, #16
   33856:	428b      	cmp	r3, r1
   33858:	d302      	bcc.n	33860 <__divsi3+0x38>
   3385a:	1212      	asrs	r2, r2, #8
   3385c:	0209      	lsls	r1, r1, #8
   3385e:	d065      	beq.n	3392c <__divsi3+0x104>
   33860:	0b03      	lsrs	r3, r0, #12
   33862:	428b      	cmp	r3, r1
   33864:	d319      	bcc.n	3389a <__divsi3+0x72>
   33866:	e000      	b.n	3386a <__divsi3+0x42>
   33868:	0a09      	lsrs	r1, r1, #8
   3386a:	0bc3      	lsrs	r3, r0, #15
   3386c:	428b      	cmp	r3, r1
   3386e:	d301      	bcc.n	33874 <__divsi3+0x4c>
   33870:	03cb      	lsls	r3, r1, #15
   33872:	1ac0      	subs	r0, r0, r3
   33874:	4152      	adcs	r2, r2
   33876:	0b83      	lsrs	r3, r0, #14
   33878:	428b      	cmp	r3, r1
   3387a:	d301      	bcc.n	33880 <__divsi3+0x58>
   3387c:	038b      	lsls	r3, r1, #14
   3387e:	1ac0      	subs	r0, r0, r3
   33880:	4152      	adcs	r2, r2
   33882:	0b43      	lsrs	r3, r0, #13
   33884:	428b      	cmp	r3, r1
   33886:	d301      	bcc.n	3388c <__divsi3+0x64>
   33888:	034b      	lsls	r3, r1, #13
   3388a:	1ac0      	subs	r0, r0, r3
   3388c:	4152      	adcs	r2, r2
   3388e:	0b03      	lsrs	r3, r0, #12
   33890:	428b      	cmp	r3, r1
   33892:	d301      	bcc.n	33898 <__divsi3+0x70>
   33894:	030b      	lsls	r3, r1, #12
   33896:	1ac0      	subs	r0, r0, r3
   33898:	4152      	adcs	r2, r2
   3389a:	0ac3      	lsrs	r3, r0, #11
   3389c:	428b      	cmp	r3, r1
   3389e:	d301      	bcc.n	338a4 <__divsi3+0x7c>
   338a0:	02cb      	lsls	r3, r1, #11
   338a2:	1ac0      	subs	r0, r0, r3
   338a4:	4152      	adcs	r2, r2
   338a6:	0a83      	lsrs	r3, r0, #10
   338a8:	428b      	cmp	r3, r1
   338aa:	d301      	bcc.n	338b0 <__divsi3+0x88>
   338ac:	028b      	lsls	r3, r1, #10
   338ae:	1ac0      	subs	r0, r0, r3
   338b0:	4152      	adcs	r2, r2
   338b2:	0a43      	lsrs	r3, r0, #9
   338b4:	428b      	cmp	r3, r1
   338b6:	d301      	bcc.n	338bc <__divsi3+0x94>
   338b8:	024b      	lsls	r3, r1, #9
   338ba:	1ac0      	subs	r0, r0, r3
   338bc:	4152      	adcs	r2, r2
   338be:	0a03      	lsrs	r3, r0, #8
   338c0:	428b      	cmp	r3, r1
   338c2:	d301      	bcc.n	338c8 <__divsi3+0xa0>
   338c4:	020b      	lsls	r3, r1, #8
   338c6:	1ac0      	subs	r0, r0, r3
   338c8:	4152      	adcs	r2, r2
   338ca:	d2cd      	bcs.n	33868 <__divsi3+0x40>
   338cc:	09c3      	lsrs	r3, r0, #7
   338ce:	428b      	cmp	r3, r1
   338d0:	d301      	bcc.n	338d6 <__divsi3+0xae>
   338d2:	01cb      	lsls	r3, r1, #7
   338d4:	1ac0      	subs	r0, r0, r3
   338d6:	4152      	adcs	r2, r2
   338d8:	0983      	lsrs	r3, r0, #6
   338da:	428b      	cmp	r3, r1
   338dc:	d301      	bcc.n	338e2 <__divsi3+0xba>
   338de:	018b      	lsls	r3, r1, #6
   338e0:	1ac0      	subs	r0, r0, r3
   338e2:	4152      	adcs	r2, r2
   338e4:	0943      	lsrs	r3, r0, #5
   338e6:	428b      	cmp	r3, r1
   338e8:	d301      	bcc.n	338ee <__divsi3+0xc6>
   338ea:	014b      	lsls	r3, r1, #5
   338ec:	1ac0      	subs	r0, r0, r3
   338ee:	4152      	adcs	r2, r2
   338f0:	0903      	lsrs	r3, r0, #4
   338f2:	428b      	cmp	r3, r1
   338f4:	d301      	bcc.n	338fa <__divsi3+0xd2>
   338f6:	010b      	lsls	r3, r1, #4
   338f8:	1ac0      	subs	r0, r0, r3
   338fa:	4152      	adcs	r2, r2
   338fc:	08c3      	lsrs	r3, r0, #3
   338fe:	428b      	cmp	r3, r1
   33900:	d301      	bcc.n	33906 <__divsi3+0xde>
   33902:	00cb      	lsls	r3, r1, #3
   33904:	1ac0      	subs	r0, r0, r3
   33906:	4152      	adcs	r2, r2
   33908:	0883      	lsrs	r3, r0, #2
   3390a:	428b      	cmp	r3, r1
   3390c:	d301      	bcc.n	33912 <__divsi3+0xea>
   3390e:	008b      	lsls	r3, r1, #2
   33910:	1ac0      	subs	r0, r0, r3
   33912:	4152      	adcs	r2, r2
   33914:	0843      	lsrs	r3, r0, #1
   33916:	428b      	cmp	r3, r1
   33918:	d301      	bcc.n	3391e <__divsi3+0xf6>
   3391a:	004b      	lsls	r3, r1, #1
   3391c:	1ac0      	subs	r0, r0, r3
   3391e:	4152      	adcs	r2, r2
   33920:	1a41      	subs	r1, r0, r1
   33922:	d200      	bcs.n	33926 <__divsi3+0xfe>
   33924:	4601      	mov	r1, r0
   33926:	4152      	adcs	r2, r2
   33928:	4610      	mov	r0, r2
   3392a:	4770      	bx	lr
   3392c:	e05d      	b.n	339ea <__divsi3+0x1c2>
   3392e:	0fca      	lsrs	r2, r1, #31
   33930:	d000      	beq.n	33934 <__divsi3+0x10c>
   33932:	4249      	negs	r1, r1
   33934:	1003      	asrs	r3, r0, #32
   33936:	d300      	bcc.n	3393a <__divsi3+0x112>
   33938:	4240      	negs	r0, r0
   3393a:	4053      	eors	r3, r2
   3393c:	2200      	movs	r2, #0
   3393e:	469c      	mov	ip, r3
   33940:	0903      	lsrs	r3, r0, #4
   33942:	428b      	cmp	r3, r1
   33944:	d32d      	bcc.n	339a2 <__divsi3+0x17a>
   33946:	0a03      	lsrs	r3, r0, #8
   33948:	428b      	cmp	r3, r1
   3394a:	d312      	bcc.n	33972 <__divsi3+0x14a>
   3394c:	22fc      	movs	r2, #252	; 0xfc
   3394e:	0189      	lsls	r1, r1, #6
   33950:	ba12      	rev	r2, r2
   33952:	0a03      	lsrs	r3, r0, #8
   33954:	428b      	cmp	r3, r1
   33956:	d30c      	bcc.n	33972 <__divsi3+0x14a>
   33958:	0189      	lsls	r1, r1, #6
   3395a:	1192      	asrs	r2, r2, #6
   3395c:	428b      	cmp	r3, r1
   3395e:	d308      	bcc.n	33972 <__divsi3+0x14a>
   33960:	0189      	lsls	r1, r1, #6
   33962:	1192      	asrs	r2, r2, #6
   33964:	428b      	cmp	r3, r1
   33966:	d304      	bcc.n	33972 <__divsi3+0x14a>
   33968:	0189      	lsls	r1, r1, #6
   3396a:	d03a      	beq.n	339e2 <__divsi3+0x1ba>
   3396c:	1192      	asrs	r2, r2, #6
   3396e:	e000      	b.n	33972 <__divsi3+0x14a>
   33970:	0989      	lsrs	r1, r1, #6
   33972:	09c3      	lsrs	r3, r0, #7
   33974:	428b      	cmp	r3, r1
   33976:	d301      	bcc.n	3397c <__divsi3+0x154>
   33978:	01cb      	lsls	r3, r1, #7
   3397a:	1ac0      	subs	r0, r0, r3
   3397c:	4152      	adcs	r2, r2
   3397e:	0983      	lsrs	r3, r0, #6
   33980:	428b      	cmp	r3, r1
   33982:	d301      	bcc.n	33988 <__divsi3+0x160>
   33984:	018b      	lsls	r3, r1, #6
   33986:	1ac0      	subs	r0, r0, r3
   33988:	4152      	adcs	r2, r2
   3398a:	0943      	lsrs	r3, r0, #5
   3398c:	428b      	cmp	r3, r1
   3398e:	d301      	bcc.n	33994 <__divsi3+0x16c>
   33990:	014b      	lsls	r3, r1, #5
   33992:	1ac0      	subs	r0, r0, r3
   33994:	4152      	adcs	r2, r2
   33996:	0903      	lsrs	r3, r0, #4
   33998:	428b      	cmp	r3, r1
   3399a:	d301      	bcc.n	339a0 <__divsi3+0x178>
   3399c:	010b      	lsls	r3, r1, #4
   3399e:	1ac0      	subs	r0, r0, r3
   339a0:	4152      	adcs	r2, r2
   339a2:	08c3      	lsrs	r3, r0, #3
   339a4:	428b      	cmp	r3, r1
   339a6:	d301      	bcc.n	339ac <__divsi3+0x184>
   339a8:	00cb      	lsls	r3, r1, #3
   339aa:	1ac0      	subs	r0, r0, r3
   339ac:	4152      	adcs	r2, r2
   339ae:	0883      	lsrs	r3, r0, #2
   339b0:	428b      	cmp	r3, r1
   339b2:	d301      	bcc.n	339b8 <__divsi3+0x190>
   339b4:	008b      	lsls	r3, r1, #2
   339b6:	1ac0      	subs	r0, r0, r3
   339b8:	4152      	adcs	r2, r2
   339ba:	d2d9      	bcs.n	33970 <__divsi3+0x148>
   339bc:	0843      	lsrs	r3, r0, #1
   339be:	428b      	cmp	r3, r1
   339c0:	d301      	bcc.n	339c6 <__divsi3+0x19e>
   339c2:	004b      	lsls	r3, r1, #1
   339c4:	1ac0      	subs	r0, r0, r3
   339c6:	4152      	adcs	r2, r2
   339c8:	1a41      	subs	r1, r0, r1
   339ca:	d200      	bcs.n	339ce <__divsi3+0x1a6>
   339cc:	4601      	mov	r1, r0
   339ce:	4663      	mov	r3, ip
   339d0:	4152      	adcs	r2, r2
   339d2:	105b      	asrs	r3, r3, #1
   339d4:	4610      	mov	r0, r2
   339d6:	d301      	bcc.n	339dc <__divsi3+0x1b4>
   339d8:	4240      	negs	r0, r0
   339da:	2b00      	cmp	r3, #0
   339dc:	d500      	bpl.n	339e0 <__divsi3+0x1b8>
   339de:	4249      	negs	r1, r1
   339e0:	4770      	bx	lr
   339e2:	4663      	mov	r3, ip
   339e4:	105b      	asrs	r3, r3, #1
   339e6:	d300      	bcc.n	339ea <__divsi3+0x1c2>
   339e8:	4240      	negs	r0, r0
   339ea:	b501      	push	{r0, lr}
   339ec:	2000      	movs	r0, #0
   339ee:	f000 f805 	bl	339fc <__aeabi_idiv0>
   339f2:	bd02      	pop	{r1, pc}

000339f4 <__aeabi_idivmod>:
   339f4:	2900      	cmp	r1, #0
   339f6:	d0f8      	beq.n	339ea <__divsi3+0x1c2>
   339f8:	e716      	b.n	33828 <__divsi3>
   339fa:	4770      	bx	lr

000339fc <__aeabi_idiv0>:
   339fc:	4770      	bx	lr
   339fe:	46c0      	nop			; (mov r8, r8)

00033a00 <__aeabi_lmul>:
   33a00:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a02:	46ce      	mov	lr, r9
   33a04:	4647      	mov	r7, r8
   33a06:	0415      	lsls	r5, r2, #16
   33a08:	0c2d      	lsrs	r5, r5, #16
   33a0a:	002e      	movs	r6, r5
   33a0c:	b580      	push	{r7, lr}
   33a0e:	0407      	lsls	r7, r0, #16
   33a10:	0c14      	lsrs	r4, r2, #16
   33a12:	0c3f      	lsrs	r7, r7, #16
   33a14:	4699      	mov	r9, r3
   33a16:	0c03      	lsrs	r3, r0, #16
   33a18:	437e      	muls	r6, r7
   33a1a:	435d      	muls	r5, r3
   33a1c:	4367      	muls	r7, r4
   33a1e:	4363      	muls	r3, r4
   33a20:	197f      	adds	r7, r7, r5
   33a22:	0c34      	lsrs	r4, r6, #16
   33a24:	19e4      	adds	r4, r4, r7
   33a26:	469c      	mov	ip, r3
   33a28:	42a5      	cmp	r5, r4
   33a2a:	d903      	bls.n	33a34 <__aeabi_lmul+0x34>
   33a2c:	2380      	movs	r3, #128	; 0x80
   33a2e:	025b      	lsls	r3, r3, #9
   33a30:	4698      	mov	r8, r3
   33a32:	44c4      	add	ip, r8
   33a34:	464b      	mov	r3, r9
   33a36:	4351      	muls	r1, r2
   33a38:	4343      	muls	r3, r0
   33a3a:	0436      	lsls	r6, r6, #16
   33a3c:	0c36      	lsrs	r6, r6, #16
   33a3e:	0c25      	lsrs	r5, r4, #16
   33a40:	0424      	lsls	r4, r4, #16
   33a42:	4465      	add	r5, ip
   33a44:	19a4      	adds	r4, r4, r6
   33a46:	1859      	adds	r1, r3, r1
   33a48:	1949      	adds	r1, r1, r5
   33a4a:	0020      	movs	r0, r4
   33a4c:	bc0c      	pop	{r2, r3}
   33a4e:	4690      	mov	r8, r2
   33a50:	4699      	mov	r9, r3
   33a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033a54 <__aeabi_fmul>:
   33a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33a56:	4657      	mov	r7, sl
   33a58:	464e      	mov	r6, r9
   33a5a:	4645      	mov	r5, r8
   33a5c:	46de      	mov	lr, fp
   33a5e:	b5e0      	push	{r5, r6, r7, lr}
   33a60:	0247      	lsls	r7, r0, #9
   33a62:	0046      	lsls	r6, r0, #1
   33a64:	4688      	mov	r8, r1
   33a66:	0a7f      	lsrs	r7, r7, #9
   33a68:	0e36      	lsrs	r6, r6, #24
   33a6a:	0fc4      	lsrs	r4, r0, #31
   33a6c:	2e00      	cmp	r6, #0
   33a6e:	d047      	beq.n	33b00 <__aeabi_fmul+0xac>
   33a70:	2eff      	cmp	r6, #255	; 0xff
   33a72:	d024      	beq.n	33abe <__aeabi_fmul+0x6a>
   33a74:	00fb      	lsls	r3, r7, #3
   33a76:	2780      	movs	r7, #128	; 0x80
   33a78:	04ff      	lsls	r7, r7, #19
   33a7a:	431f      	orrs	r7, r3
   33a7c:	2300      	movs	r3, #0
   33a7e:	4699      	mov	r9, r3
   33a80:	469a      	mov	sl, r3
   33a82:	3e7f      	subs	r6, #127	; 0x7f
   33a84:	4643      	mov	r3, r8
   33a86:	025d      	lsls	r5, r3, #9
   33a88:	0058      	lsls	r0, r3, #1
   33a8a:	0fdb      	lsrs	r3, r3, #31
   33a8c:	0a6d      	lsrs	r5, r5, #9
   33a8e:	0e00      	lsrs	r0, r0, #24
   33a90:	4698      	mov	r8, r3
   33a92:	d043      	beq.n	33b1c <__aeabi_fmul+0xc8>
   33a94:	28ff      	cmp	r0, #255	; 0xff
   33a96:	d03b      	beq.n	33b10 <__aeabi_fmul+0xbc>
   33a98:	00eb      	lsls	r3, r5, #3
   33a9a:	2580      	movs	r5, #128	; 0x80
   33a9c:	2200      	movs	r2, #0
   33a9e:	04ed      	lsls	r5, r5, #19
   33aa0:	431d      	orrs	r5, r3
   33aa2:	387f      	subs	r0, #127	; 0x7f
   33aa4:	1836      	adds	r6, r6, r0
   33aa6:	1c73      	adds	r3, r6, #1
   33aa8:	4641      	mov	r1, r8
   33aaa:	469b      	mov	fp, r3
   33aac:	464b      	mov	r3, r9
   33aae:	4061      	eors	r1, r4
   33ab0:	4313      	orrs	r3, r2
   33ab2:	2b0f      	cmp	r3, #15
   33ab4:	d864      	bhi.n	33b80 <__aeabi_fmul+0x12c>
   33ab6:	4875      	ldr	r0, [pc, #468]	; (33c8c <__aeabi_fmul+0x238>)
   33ab8:	009b      	lsls	r3, r3, #2
   33aba:	58c3      	ldr	r3, [r0, r3]
   33abc:	469f      	mov	pc, r3
   33abe:	2f00      	cmp	r7, #0
   33ac0:	d142      	bne.n	33b48 <__aeabi_fmul+0xf4>
   33ac2:	2308      	movs	r3, #8
   33ac4:	4699      	mov	r9, r3
   33ac6:	3b06      	subs	r3, #6
   33ac8:	26ff      	movs	r6, #255	; 0xff
   33aca:	469a      	mov	sl, r3
   33acc:	e7da      	b.n	33a84 <__aeabi_fmul+0x30>
   33ace:	4641      	mov	r1, r8
   33ad0:	2a02      	cmp	r2, #2
   33ad2:	d028      	beq.n	33b26 <__aeabi_fmul+0xd2>
   33ad4:	2a03      	cmp	r2, #3
   33ad6:	d100      	bne.n	33ada <__aeabi_fmul+0x86>
   33ad8:	e0ce      	b.n	33c78 <__aeabi_fmul+0x224>
   33ada:	2a01      	cmp	r2, #1
   33adc:	d000      	beq.n	33ae0 <__aeabi_fmul+0x8c>
   33ade:	e0ac      	b.n	33c3a <__aeabi_fmul+0x1e6>
   33ae0:	4011      	ands	r1, r2
   33ae2:	2000      	movs	r0, #0
   33ae4:	2200      	movs	r2, #0
   33ae6:	b2cc      	uxtb	r4, r1
   33ae8:	0240      	lsls	r0, r0, #9
   33aea:	05d2      	lsls	r2, r2, #23
   33aec:	0a40      	lsrs	r0, r0, #9
   33aee:	07e4      	lsls	r4, r4, #31
   33af0:	4310      	orrs	r0, r2
   33af2:	4320      	orrs	r0, r4
   33af4:	bc3c      	pop	{r2, r3, r4, r5}
   33af6:	4690      	mov	r8, r2
   33af8:	4699      	mov	r9, r3
   33afa:	46a2      	mov	sl, r4
   33afc:	46ab      	mov	fp, r5
   33afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33b00:	2f00      	cmp	r7, #0
   33b02:	d115      	bne.n	33b30 <__aeabi_fmul+0xdc>
   33b04:	2304      	movs	r3, #4
   33b06:	4699      	mov	r9, r3
   33b08:	3b03      	subs	r3, #3
   33b0a:	2600      	movs	r6, #0
   33b0c:	469a      	mov	sl, r3
   33b0e:	e7b9      	b.n	33a84 <__aeabi_fmul+0x30>
   33b10:	20ff      	movs	r0, #255	; 0xff
   33b12:	2202      	movs	r2, #2
   33b14:	2d00      	cmp	r5, #0
   33b16:	d0c5      	beq.n	33aa4 <__aeabi_fmul+0x50>
   33b18:	2203      	movs	r2, #3
   33b1a:	e7c3      	b.n	33aa4 <__aeabi_fmul+0x50>
   33b1c:	2d00      	cmp	r5, #0
   33b1e:	d119      	bne.n	33b54 <__aeabi_fmul+0x100>
   33b20:	2000      	movs	r0, #0
   33b22:	2201      	movs	r2, #1
   33b24:	e7be      	b.n	33aa4 <__aeabi_fmul+0x50>
   33b26:	2401      	movs	r4, #1
   33b28:	22ff      	movs	r2, #255	; 0xff
   33b2a:	400c      	ands	r4, r1
   33b2c:	2000      	movs	r0, #0
   33b2e:	e7db      	b.n	33ae8 <__aeabi_fmul+0x94>
   33b30:	0038      	movs	r0, r7
   33b32:	f001 fd65 	bl	35600 <__clzsi2>
   33b36:	2676      	movs	r6, #118	; 0x76
   33b38:	1f43      	subs	r3, r0, #5
   33b3a:	409f      	lsls	r7, r3
   33b3c:	2300      	movs	r3, #0
   33b3e:	4276      	negs	r6, r6
   33b40:	1a36      	subs	r6, r6, r0
   33b42:	4699      	mov	r9, r3
   33b44:	469a      	mov	sl, r3
   33b46:	e79d      	b.n	33a84 <__aeabi_fmul+0x30>
   33b48:	230c      	movs	r3, #12
   33b4a:	4699      	mov	r9, r3
   33b4c:	3b09      	subs	r3, #9
   33b4e:	26ff      	movs	r6, #255	; 0xff
   33b50:	469a      	mov	sl, r3
   33b52:	e797      	b.n	33a84 <__aeabi_fmul+0x30>
   33b54:	0028      	movs	r0, r5
   33b56:	f001 fd53 	bl	35600 <__clzsi2>
   33b5a:	1f43      	subs	r3, r0, #5
   33b5c:	409d      	lsls	r5, r3
   33b5e:	2376      	movs	r3, #118	; 0x76
   33b60:	425b      	negs	r3, r3
   33b62:	1a18      	subs	r0, r3, r0
   33b64:	2200      	movs	r2, #0
   33b66:	e79d      	b.n	33aa4 <__aeabi_fmul+0x50>
   33b68:	2080      	movs	r0, #128	; 0x80
   33b6a:	2400      	movs	r4, #0
   33b6c:	03c0      	lsls	r0, r0, #15
   33b6e:	22ff      	movs	r2, #255	; 0xff
   33b70:	e7ba      	b.n	33ae8 <__aeabi_fmul+0x94>
   33b72:	003d      	movs	r5, r7
   33b74:	4652      	mov	r2, sl
   33b76:	e7ab      	b.n	33ad0 <__aeabi_fmul+0x7c>
   33b78:	003d      	movs	r5, r7
   33b7a:	0021      	movs	r1, r4
   33b7c:	4652      	mov	r2, sl
   33b7e:	e7a7      	b.n	33ad0 <__aeabi_fmul+0x7c>
   33b80:	0c3b      	lsrs	r3, r7, #16
   33b82:	469c      	mov	ip, r3
   33b84:	042a      	lsls	r2, r5, #16
   33b86:	0c12      	lsrs	r2, r2, #16
   33b88:	0c2b      	lsrs	r3, r5, #16
   33b8a:	0014      	movs	r4, r2
   33b8c:	4660      	mov	r0, ip
   33b8e:	4665      	mov	r5, ip
   33b90:	043f      	lsls	r7, r7, #16
   33b92:	0c3f      	lsrs	r7, r7, #16
   33b94:	437c      	muls	r4, r7
   33b96:	4342      	muls	r2, r0
   33b98:	435d      	muls	r5, r3
   33b9a:	437b      	muls	r3, r7
   33b9c:	0c27      	lsrs	r7, r4, #16
   33b9e:	189b      	adds	r3, r3, r2
   33ba0:	18ff      	adds	r7, r7, r3
   33ba2:	42ba      	cmp	r2, r7
   33ba4:	d903      	bls.n	33bae <__aeabi_fmul+0x15a>
   33ba6:	2380      	movs	r3, #128	; 0x80
   33ba8:	025b      	lsls	r3, r3, #9
   33baa:	469c      	mov	ip, r3
   33bac:	4465      	add	r5, ip
   33bae:	0424      	lsls	r4, r4, #16
   33bb0:	043a      	lsls	r2, r7, #16
   33bb2:	0c24      	lsrs	r4, r4, #16
   33bb4:	1912      	adds	r2, r2, r4
   33bb6:	0193      	lsls	r3, r2, #6
   33bb8:	1e5c      	subs	r4, r3, #1
   33bba:	41a3      	sbcs	r3, r4
   33bbc:	0c3f      	lsrs	r7, r7, #16
   33bbe:	0e92      	lsrs	r2, r2, #26
   33bc0:	197d      	adds	r5, r7, r5
   33bc2:	431a      	orrs	r2, r3
   33bc4:	01ad      	lsls	r5, r5, #6
   33bc6:	4315      	orrs	r5, r2
   33bc8:	012b      	lsls	r3, r5, #4
   33bca:	d504      	bpl.n	33bd6 <__aeabi_fmul+0x182>
   33bcc:	2301      	movs	r3, #1
   33bce:	465e      	mov	r6, fp
   33bd0:	086a      	lsrs	r2, r5, #1
   33bd2:	401d      	ands	r5, r3
   33bd4:	4315      	orrs	r5, r2
   33bd6:	0032      	movs	r2, r6
   33bd8:	327f      	adds	r2, #127	; 0x7f
   33bda:	2a00      	cmp	r2, #0
   33bdc:	dd25      	ble.n	33c2a <__aeabi_fmul+0x1d6>
   33bde:	076b      	lsls	r3, r5, #29
   33be0:	d004      	beq.n	33bec <__aeabi_fmul+0x198>
   33be2:	230f      	movs	r3, #15
   33be4:	402b      	ands	r3, r5
   33be6:	2b04      	cmp	r3, #4
   33be8:	d000      	beq.n	33bec <__aeabi_fmul+0x198>
   33bea:	3504      	adds	r5, #4
   33bec:	012b      	lsls	r3, r5, #4
   33bee:	d503      	bpl.n	33bf8 <__aeabi_fmul+0x1a4>
   33bf0:	0032      	movs	r2, r6
   33bf2:	4b27      	ldr	r3, [pc, #156]	; (33c90 <__aeabi_fmul+0x23c>)
   33bf4:	3280      	adds	r2, #128	; 0x80
   33bf6:	401d      	ands	r5, r3
   33bf8:	2afe      	cmp	r2, #254	; 0xfe
   33bfa:	dc94      	bgt.n	33b26 <__aeabi_fmul+0xd2>
   33bfc:	2401      	movs	r4, #1
   33bfe:	01a8      	lsls	r0, r5, #6
   33c00:	0a40      	lsrs	r0, r0, #9
   33c02:	b2d2      	uxtb	r2, r2
   33c04:	400c      	ands	r4, r1
   33c06:	e76f      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c08:	2080      	movs	r0, #128	; 0x80
   33c0a:	03c0      	lsls	r0, r0, #15
   33c0c:	4207      	tst	r7, r0
   33c0e:	d007      	beq.n	33c20 <__aeabi_fmul+0x1cc>
   33c10:	4205      	tst	r5, r0
   33c12:	d105      	bne.n	33c20 <__aeabi_fmul+0x1cc>
   33c14:	4328      	orrs	r0, r5
   33c16:	0240      	lsls	r0, r0, #9
   33c18:	0a40      	lsrs	r0, r0, #9
   33c1a:	4644      	mov	r4, r8
   33c1c:	22ff      	movs	r2, #255	; 0xff
   33c1e:	e763      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c20:	4338      	orrs	r0, r7
   33c22:	0240      	lsls	r0, r0, #9
   33c24:	0a40      	lsrs	r0, r0, #9
   33c26:	22ff      	movs	r2, #255	; 0xff
   33c28:	e75e      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c2a:	2401      	movs	r4, #1
   33c2c:	1aa3      	subs	r3, r4, r2
   33c2e:	2b1b      	cmp	r3, #27
   33c30:	dd05      	ble.n	33c3e <__aeabi_fmul+0x1ea>
   33c32:	400c      	ands	r4, r1
   33c34:	2200      	movs	r2, #0
   33c36:	2000      	movs	r0, #0
   33c38:	e756      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c3a:	465e      	mov	r6, fp
   33c3c:	e7cb      	b.n	33bd6 <__aeabi_fmul+0x182>
   33c3e:	002a      	movs	r2, r5
   33c40:	2020      	movs	r0, #32
   33c42:	40da      	lsrs	r2, r3
   33c44:	1ac3      	subs	r3, r0, r3
   33c46:	409d      	lsls	r5, r3
   33c48:	002b      	movs	r3, r5
   33c4a:	1e5d      	subs	r5, r3, #1
   33c4c:	41ab      	sbcs	r3, r5
   33c4e:	4313      	orrs	r3, r2
   33c50:	075a      	lsls	r2, r3, #29
   33c52:	d004      	beq.n	33c5e <__aeabi_fmul+0x20a>
   33c54:	220f      	movs	r2, #15
   33c56:	401a      	ands	r2, r3
   33c58:	2a04      	cmp	r2, #4
   33c5a:	d000      	beq.n	33c5e <__aeabi_fmul+0x20a>
   33c5c:	3304      	adds	r3, #4
   33c5e:	015a      	lsls	r2, r3, #5
   33c60:	d504      	bpl.n	33c6c <__aeabi_fmul+0x218>
   33c62:	2401      	movs	r4, #1
   33c64:	2201      	movs	r2, #1
   33c66:	400c      	ands	r4, r1
   33c68:	2000      	movs	r0, #0
   33c6a:	e73d      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c6c:	2401      	movs	r4, #1
   33c6e:	019b      	lsls	r3, r3, #6
   33c70:	0a58      	lsrs	r0, r3, #9
   33c72:	400c      	ands	r4, r1
   33c74:	2200      	movs	r2, #0
   33c76:	e737      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c78:	2080      	movs	r0, #128	; 0x80
   33c7a:	2401      	movs	r4, #1
   33c7c:	03c0      	lsls	r0, r0, #15
   33c7e:	4328      	orrs	r0, r5
   33c80:	0240      	lsls	r0, r0, #9
   33c82:	0a40      	lsrs	r0, r0, #9
   33c84:	400c      	ands	r4, r1
   33c86:	22ff      	movs	r2, #255	; 0xff
   33c88:	e72e      	b.n	33ae8 <__aeabi_fmul+0x94>
   33c8a:	46c0      	nop			; (mov r8, r8)
   33c8c:	0003b170 	.word	0x0003b170
   33c90:	f7ffffff 	.word	0xf7ffffff

00033c94 <__aeabi_f2iz>:
   33c94:	0241      	lsls	r1, r0, #9
   33c96:	0043      	lsls	r3, r0, #1
   33c98:	0fc2      	lsrs	r2, r0, #31
   33c9a:	0a49      	lsrs	r1, r1, #9
   33c9c:	0e1b      	lsrs	r3, r3, #24
   33c9e:	2000      	movs	r0, #0
   33ca0:	2b7e      	cmp	r3, #126	; 0x7e
   33ca2:	dd0d      	ble.n	33cc0 <__aeabi_f2iz+0x2c>
   33ca4:	2b9d      	cmp	r3, #157	; 0x9d
   33ca6:	dc0c      	bgt.n	33cc2 <__aeabi_f2iz+0x2e>
   33ca8:	2080      	movs	r0, #128	; 0x80
   33caa:	0400      	lsls	r0, r0, #16
   33cac:	4301      	orrs	r1, r0
   33cae:	2b95      	cmp	r3, #149	; 0x95
   33cb0:	dc0a      	bgt.n	33cc8 <__aeabi_f2iz+0x34>
   33cb2:	2096      	movs	r0, #150	; 0x96
   33cb4:	1ac3      	subs	r3, r0, r3
   33cb6:	40d9      	lsrs	r1, r3
   33cb8:	4248      	negs	r0, r1
   33cba:	2a00      	cmp	r2, #0
   33cbc:	d100      	bne.n	33cc0 <__aeabi_f2iz+0x2c>
   33cbe:	0008      	movs	r0, r1
   33cc0:	4770      	bx	lr
   33cc2:	4b03      	ldr	r3, [pc, #12]	; (33cd0 <__aeabi_f2iz+0x3c>)
   33cc4:	18d0      	adds	r0, r2, r3
   33cc6:	e7fb      	b.n	33cc0 <__aeabi_f2iz+0x2c>
   33cc8:	3b96      	subs	r3, #150	; 0x96
   33cca:	4099      	lsls	r1, r3
   33ccc:	e7f4      	b.n	33cb8 <__aeabi_f2iz+0x24>
   33cce:	46c0      	nop			; (mov r8, r8)
   33cd0:	7fffffff 	.word	0x7fffffff

00033cd4 <__aeabi_i2f>:
   33cd4:	b570      	push	{r4, r5, r6, lr}
   33cd6:	2800      	cmp	r0, #0
   33cd8:	d030      	beq.n	33d3c <__aeabi_i2f+0x68>
   33cda:	17c3      	asrs	r3, r0, #31
   33cdc:	18c4      	adds	r4, r0, r3
   33cde:	405c      	eors	r4, r3
   33ce0:	0fc5      	lsrs	r5, r0, #31
   33ce2:	0020      	movs	r0, r4
   33ce4:	f001 fc8c 	bl	35600 <__clzsi2>
   33ce8:	239e      	movs	r3, #158	; 0x9e
   33cea:	1a1b      	subs	r3, r3, r0
   33cec:	2b96      	cmp	r3, #150	; 0x96
   33cee:	dc0d      	bgt.n	33d0c <__aeabi_i2f+0x38>
   33cf0:	2296      	movs	r2, #150	; 0x96
   33cf2:	1ad2      	subs	r2, r2, r3
   33cf4:	4094      	lsls	r4, r2
   33cf6:	002a      	movs	r2, r5
   33cf8:	0264      	lsls	r4, r4, #9
   33cfa:	0a64      	lsrs	r4, r4, #9
   33cfc:	b2db      	uxtb	r3, r3
   33cfe:	0264      	lsls	r4, r4, #9
   33d00:	05db      	lsls	r3, r3, #23
   33d02:	0a60      	lsrs	r0, r4, #9
   33d04:	07d2      	lsls	r2, r2, #31
   33d06:	4318      	orrs	r0, r3
   33d08:	4310      	orrs	r0, r2
   33d0a:	bd70      	pop	{r4, r5, r6, pc}
   33d0c:	2b99      	cmp	r3, #153	; 0x99
   33d0e:	dc19      	bgt.n	33d44 <__aeabi_i2f+0x70>
   33d10:	2299      	movs	r2, #153	; 0x99
   33d12:	1ad2      	subs	r2, r2, r3
   33d14:	2a00      	cmp	r2, #0
   33d16:	dd29      	ble.n	33d6c <__aeabi_i2f+0x98>
   33d18:	4094      	lsls	r4, r2
   33d1a:	0022      	movs	r2, r4
   33d1c:	4c14      	ldr	r4, [pc, #80]	; (33d70 <__aeabi_i2f+0x9c>)
   33d1e:	4014      	ands	r4, r2
   33d20:	0751      	lsls	r1, r2, #29
   33d22:	d004      	beq.n	33d2e <__aeabi_i2f+0x5a>
   33d24:	210f      	movs	r1, #15
   33d26:	400a      	ands	r2, r1
   33d28:	2a04      	cmp	r2, #4
   33d2a:	d000      	beq.n	33d2e <__aeabi_i2f+0x5a>
   33d2c:	3404      	adds	r4, #4
   33d2e:	0162      	lsls	r2, r4, #5
   33d30:	d413      	bmi.n	33d5a <__aeabi_i2f+0x86>
   33d32:	01a4      	lsls	r4, r4, #6
   33d34:	0a64      	lsrs	r4, r4, #9
   33d36:	b2db      	uxtb	r3, r3
   33d38:	002a      	movs	r2, r5
   33d3a:	e7e0      	b.n	33cfe <__aeabi_i2f+0x2a>
   33d3c:	2200      	movs	r2, #0
   33d3e:	2300      	movs	r3, #0
   33d40:	2400      	movs	r4, #0
   33d42:	e7dc      	b.n	33cfe <__aeabi_i2f+0x2a>
   33d44:	2205      	movs	r2, #5
   33d46:	0021      	movs	r1, r4
   33d48:	1a12      	subs	r2, r2, r0
   33d4a:	40d1      	lsrs	r1, r2
   33d4c:	22b9      	movs	r2, #185	; 0xb9
   33d4e:	1ad2      	subs	r2, r2, r3
   33d50:	4094      	lsls	r4, r2
   33d52:	1e62      	subs	r2, r4, #1
   33d54:	4194      	sbcs	r4, r2
   33d56:	430c      	orrs	r4, r1
   33d58:	e7da      	b.n	33d10 <__aeabi_i2f+0x3c>
   33d5a:	4b05      	ldr	r3, [pc, #20]	; (33d70 <__aeabi_i2f+0x9c>)
   33d5c:	002a      	movs	r2, r5
   33d5e:	401c      	ands	r4, r3
   33d60:	239f      	movs	r3, #159	; 0x9f
   33d62:	01a4      	lsls	r4, r4, #6
   33d64:	1a1b      	subs	r3, r3, r0
   33d66:	0a64      	lsrs	r4, r4, #9
   33d68:	b2db      	uxtb	r3, r3
   33d6a:	e7c8      	b.n	33cfe <__aeabi_i2f+0x2a>
   33d6c:	0022      	movs	r2, r4
   33d6e:	e7d5      	b.n	33d1c <__aeabi_i2f+0x48>
   33d70:	fbffffff 	.word	0xfbffffff

00033d74 <__aeabi_dadd>:
   33d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33d76:	4645      	mov	r5, r8
   33d78:	46de      	mov	lr, fp
   33d7a:	4657      	mov	r7, sl
   33d7c:	464e      	mov	r6, r9
   33d7e:	030c      	lsls	r4, r1, #12
   33d80:	b5e0      	push	{r5, r6, r7, lr}
   33d82:	004e      	lsls	r6, r1, #1
   33d84:	0fc9      	lsrs	r1, r1, #31
   33d86:	4688      	mov	r8, r1
   33d88:	000d      	movs	r5, r1
   33d8a:	0a61      	lsrs	r1, r4, #9
   33d8c:	0f44      	lsrs	r4, r0, #29
   33d8e:	430c      	orrs	r4, r1
   33d90:	00c7      	lsls	r7, r0, #3
   33d92:	0319      	lsls	r1, r3, #12
   33d94:	0058      	lsls	r0, r3, #1
   33d96:	0fdb      	lsrs	r3, r3, #31
   33d98:	469b      	mov	fp, r3
   33d9a:	0a4b      	lsrs	r3, r1, #9
   33d9c:	0f51      	lsrs	r1, r2, #29
   33d9e:	430b      	orrs	r3, r1
   33da0:	0d76      	lsrs	r6, r6, #21
   33da2:	0d40      	lsrs	r0, r0, #21
   33da4:	0019      	movs	r1, r3
   33da6:	00d2      	lsls	r2, r2, #3
   33da8:	45d8      	cmp	r8, fp
   33daa:	d100      	bne.n	33dae <__aeabi_dadd+0x3a>
   33dac:	e0ae      	b.n	33f0c <__aeabi_dadd+0x198>
   33dae:	1a35      	subs	r5, r6, r0
   33db0:	2d00      	cmp	r5, #0
   33db2:	dc00      	bgt.n	33db6 <__aeabi_dadd+0x42>
   33db4:	e0f6      	b.n	33fa4 <__aeabi_dadd+0x230>
   33db6:	2800      	cmp	r0, #0
   33db8:	d10f      	bne.n	33dda <__aeabi_dadd+0x66>
   33dba:	4313      	orrs	r3, r2
   33dbc:	d100      	bne.n	33dc0 <__aeabi_dadd+0x4c>
   33dbe:	e0db      	b.n	33f78 <__aeabi_dadd+0x204>
   33dc0:	1e6b      	subs	r3, r5, #1
   33dc2:	2b00      	cmp	r3, #0
   33dc4:	d000      	beq.n	33dc8 <__aeabi_dadd+0x54>
   33dc6:	e137      	b.n	34038 <__aeabi_dadd+0x2c4>
   33dc8:	1aba      	subs	r2, r7, r2
   33dca:	4297      	cmp	r7, r2
   33dcc:	41bf      	sbcs	r7, r7
   33dce:	1a64      	subs	r4, r4, r1
   33dd0:	427f      	negs	r7, r7
   33dd2:	1be4      	subs	r4, r4, r7
   33dd4:	2601      	movs	r6, #1
   33dd6:	0017      	movs	r7, r2
   33dd8:	e024      	b.n	33e24 <__aeabi_dadd+0xb0>
   33dda:	4bc6      	ldr	r3, [pc, #792]	; (340f4 <__aeabi_dadd+0x380>)
   33ddc:	429e      	cmp	r6, r3
   33dde:	d04d      	beq.n	33e7c <__aeabi_dadd+0x108>
   33de0:	2380      	movs	r3, #128	; 0x80
   33de2:	041b      	lsls	r3, r3, #16
   33de4:	4319      	orrs	r1, r3
   33de6:	2d38      	cmp	r5, #56	; 0x38
   33de8:	dd00      	ble.n	33dec <__aeabi_dadd+0x78>
   33dea:	e107      	b.n	33ffc <__aeabi_dadd+0x288>
   33dec:	2d1f      	cmp	r5, #31
   33dee:	dd00      	ble.n	33df2 <__aeabi_dadd+0x7e>
   33df0:	e138      	b.n	34064 <__aeabi_dadd+0x2f0>
   33df2:	2020      	movs	r0, #32
   33df4:	1b43      	subs	r3, r0, r5
   33df6:	469a      	mov	sl, r3
   33df8:	000b      	movs	r3, r1
   33dfa:	4650      	mov	r0, sl
   33dfc:	4083      	lsls	r3, r0
   33dfe:	4699      	mov	r9, r3
   33e00:	0013      	movs	r3, r2
   33e02:	4648      	mov	r0, r9
   33e04:	40eb      	lsrs	r3, r5
   33e06:	4318      	orrs	r0, r3
   33e08:	0003      	movs	r3, r0
   33e0a:	4650      	mov	r0, sl
   33e0c:	4082      	lsls	r2, r0
   33e0e:	1e50      	subs	r0, r2, #1
   33e10:	4182      	sbcs	r2, r0
   33e12:	40e9      	lsrs	r1, r5
   33e14:	431a      	orrs	r2, r3
   33e16:	1aba      	subs	r2, r7, r2
   33e18:	1a61      	subs	r1, r4, r1
   33e1a:	4297      	cmp	r7, r2
   33e1c:	41a4      	sbcs	r4, r4
   33e1e:	0017      	movs	r7, r2
   33e20:	4264      	negs	r4, r4
   33e22:	1b0c      	subs	r4, r1, r4
   33e24:	0223      	lsls	r3, r4, #8
   33e26:	d562      	bpl.n	33eee <__aeabi_dadd+0x17a>
   33e28:	0264      	lsls	r4, r4, #9
   33e2a:	0a65      	lsrs	r5, r4, #9
   33e2c:	2d00      	cmp	r5, #0
   33e2e:	d100      	bne.n	33e32 <__aeabi_dadd+0xbe>
   33e30:	e0df      	b.n	33ff2 <__aeabi_dadd+0x27e>
   33e32:	0028      	movs	r0, r5
   33e34:	f001 fbe4 	bl	35600 <__clzsi2>
   33e38:	0003      	movs	r3, r0
   33e3a:	3b08      	subs	r3, #8
   33e3c:	2b1f      	cmp	r3, #31
   33e3e:	dd00      	ble.n	33e42 <__aeabi_dadd+0xce>
   33e40:	e0d2      	b.n	33fe8 <__aeabi_dadd+0x274>
   33e42:	2220      	movs	r2, #32
   33e44:	003c      	movs	r4, r7
   33e46:	1ad2      	subs	r2, r2, r3
   33e48:	409d      	lsls	r5, r3
   33e4a:	40d4      	lsrs	r4, r2
   33e4c:	409f      	lsls	r7, r3
   33e4e:	4325      	orrs	r5, r4
   33e50:	429e      	cmp	r6, r3
   33e52:	dd00      	ble.n	33e56 <__aeabi_dadd+0xe2>
   33e54:	e0c4      	b.n	33fe0 <__aeabi_dadd+0x26c>
   33e56:	1b9e      	subs	r6, r3, r6
   33e58:	1c73      	adds	r3, r6, #1
   33e5a:	2b1f      	cmp	r3, #31
   33e5c:	dd00      	ble.n	33e60 <__aeabi_dadd+0xec>
   33e5e:	e0f1      	b.n	34044 <__aeabi_dadd+0x2d0>
   33e60:	2220      	movs	r2, #32
   33e62:	0038      	movs	r0, r7
   33e64:	0029      	movs	r1, r5
   33e66:	1ad2      	subs	r2, r2, r3
   33e68:	40d8      	lsrs	r0, r3
   33e6a:	4091      	lsls	r1, r2
   33e6c:	4097      	lsls	r7, r2
   33e6e:	002c      	movs	r4, r5
   33e70:	4301      	orrs	r1, r0
   33e72:	1e78      	subs	r0, r7, #1
   33e74:	4187      	sbcs	r7, r0
   33e76:	40dc      	lsrs	r4, r3
   33e78:	2600      	movs	r6, #0
   33e7a:	430f      	orrs	r7, r1
   33e7c:	077b      	lsls	r3, r7, #29
   33e7e:	d009      	beq.n	33e94 <__aeabi_dadd+0x120>
   33e80:	230f      	movs	r3, #15
   33e82:	403b      	ands	r3, r7
   33e84:	2b04      	cmp	r3, #4
   33e86:	d005      	beq.n	33e94 <__aeabi_dadd+0x120>
   33e88:	1d3b      	adds	r3, r7, #4
   33e8a:	42bb      	cmp	r3, r7
   33e8c:	41bf      	sbcs	r7, r7
   33e8e:	427f      	negs	r7, r7
   33e90:	19e4      	adds	r4, r4, r7
   33e92:	001f      	movs	r7, r3
   33e94:	0223      	lsls	r3, r4, #8
   33e96:	d52c      	bpl.n	33ef2 <__aeabi_dadd+0x17e>
   33e98:	4b96      	ldr	r3, [pc, #600]	; (340f4 <__aeabi_dadd+0x380>)
   33e9a:	3601      	adds	r6, #1
   33e9c:	429e      	cmp	r6, r3
   33e9e:	d100      	bne.n	33ea2 <__aeabi_dadd+0x12e>
   33ea0:	e09a      	b.n	33fd8 <__aeabi_dadd+0x264>
   33ea2:	4645      	mov	r5, r8
   33ea4:	4b94      	ldr	r3, [pc, #592]	; (340f8 <__aeabi_dadd+0x384>)
   33ea6:	08ff      	lsrs	r7, r7, #3
   33ea8:	401c      	ands	r4, r3
   33eaa:	0760      	lsls	r0, r4, #29
   33eac:	0576      	lsls	r6, r6, #21
   33eae:	0264      	lsls	r4, r4, #9
   33eb0:	4307      	orrs	r7, r0
   33eb2:	0b24      	lsrs	r4, r4, #12
   33eb4:	0d76      	lsrs	r6, r6, #21
   33eb6:	2100      	movs	r1, #0
   33eb8:	0324      	lsls	r4, r4, #12
   33eba:	0b23      	lsrs	r3, r4, #12
   33ebc:	0d0c      	lsrs	r4, r1, #20
   33ebe:	4a8f      	ldr	r2, [pc, #572]	; (340fc <__aeabi_dadd+0x388>)
   33ec0:	0524      	lsls	r4, r4, #20
   33ec2:	431c      	orrs	r4, r3
   33ec4:	4014      	ands	r4, r2
   33ec6:	0533      	lsls	r3, r6, #20
   33ec8:	4323      	orrs	r3, r4
   33eca:	005b      	lsls	r3, r3, #1
   33ecc:	07ed      	lsls	r5, r5, #31
   33ece:	085b      	lsrs	r3, r3, #1
   33ed0:	432b      	orrs	r3, r5
   33ed2:	0038      	movs	r0, r7
   33ed4:	0019      	movs	r1, r3
   33ed6:	bc3c      	pop	{r2, r3, r4, r5}
   33ed8:	4690      	mov	r8, r2
   33eda:	4699      	mov	r9, r3
   33edc:	46a2      	mov	sl, r4
   33ede:	46ab      	mov	fp, r5
   33ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33ee2:	4664      	mov	r4, ip
   33ee4:	4304      	orrs	r4, r0
   33ee6:	d100      	bne.n	33eea <__aeabi_dadd+0x176>
   33ee8:	e211      	b.n	3430e <__aeabi_dadd+0x59a>
   33eea:	0004      	movs	r4, r0
   33eec:	4667      	mov	r7, ip
   33eee:	077b      	lsls	r3, r7, #29
   33ef0:	d1c6      	bne.n	33e80 <__aeabi_dadd+0x10c>
   33ef2:	4645      	mov	r5, r8
   33ef4:	0760      	lsls	r0, r4, #29
   33ef6:	08ff      	lsrs	r7, r7, #3
   33ef8:	4307      	orrs	r7, r0
   33efa:	08e4      	lsrs	r4, r4, #3
   33efc:	4b7d      	ldr	r3, [pc, #500]	; (340f4 <__aeabi_dadd+0x380>)
   33efe:	429e      	cmp	r6, r3
   33f00:	d030      	beq.n	33f64 <__aeabi_dadd+0x1f0>
   33f02:	0324      	lsls	r4, r4, #12
   33f04:	0576      	lsls	r6, r6, #21
   33f06:	0b24      	lsrs	r4, r4, #12
   33f08:	0d76      	lsrs	r6, r6, #21
   33f0a:	e7d4      	b.n	33eb6 <__aeabi_dadd+0x142>
   33f0c:	1a33      	subs	r3, r6, r0
   33f0e:	469a      	mov	sl, r3
   33f10:	2b00      	cmp	r3, #0
   33f12:	dd78      	ble.n	34006 <__aeabi_dadd+0x292>
   33f14:	2800      	cmp	r0, #0
   33f16:	d031      	beq.n	33f7c <__aeabi_dadd+0x208>
   33f18:	4876      	ldr	r0, [pc, #472]	; (340f4 <__aeabi_dadd+0x380>)
   33f1a:	4286      	cmp	r6, r0
   33f1c:	d0ae      	beq.n	33e7c <__aeabi_dadd+0x108>
   33f1e:	2080      	movs	r0, #128	; 0x80
   33f20:	0400      	lsls	r0, r0, #16
   33f22:	4301      	orrs	r1, r0
   33f24:	4653      	mov	r3, sl
   33f26:	2b38      	cmp	r3, #56	; 0x38
   33f28:	dc00      	bgt.n	33f2c <__aeabi_dadd+0x1b8>
   33f2a:	e0e9      	b.n	34100 <__aeabi_dadd+0x38c>
   33f2c:	430a      	orrs	r2, r1
   33f2e:	1e51      	subs	r1, r2, #1
   33f30:	418a      	sbcs	r2, r1
   33f32:	2100      	movs	r1, #0
   33f34:	19d2      	adds	r2, r2, r7
   33f36:	42ba      	cmp	r2, r7
   33f38:	41bf      	sbcs	r7, r7
   33f3a:	1909      	adds	r1, r1, r4
   33f3c:	427c      	negs	r4, r7
   33f3e:	0017      	movs	r7, r2
   33f40:	190c      	adds	r4, r1, r4
   33f42:	0223      	lsls	r3, r4, #8
   33f44:	d5d3      	bpl.n	33eee <__aeabi_dadd+0x17a>
   33f46:	4b6b      	ldr	r3, [pc, #428]	; (340f4 <__aeabi_dadd+0x380>)
   33f48:	3601      	adds	r6, #1
   33f4a:	429e      	cmp	r6, r3
   33f4c:	d100      	bne.n	33f50 <__aeabi_dadd+0x1dc>
   33f4e:	e13a      	b.n	341c6 <__aeabi_dadd+0x452>
   33f50:	2001      	movs	r0, #1
   33f52:	4b69      	ldr	r3, [pc, #420]	; (340f8 <__aeabi_dadd+0x384>)
   33f54:	401c      	ands	r4, r3
   33f56:	087b      	lsrs	r3, r7, #1
   33f58:	4007      	ands	r7, r0
   33f5a:	431f      	orrs	r7, r3
   33f5c:	07e0      	lsls	r0, r4, #31
   33f5e:	4307      	orrs	r7, r0
   33f60:	0864      	lsrs	r4, r4, #1
   33f62:	e78b      	b.n	33e7c <__aeabi_dadd+0x108>
   33f64:	0023      	movs	r3, r4
   33f66:	433b      	orrs	r3, r7
   33f68:	d100      	bne.n	33f6c <__aeabi_dadd+0x1f8>
   33f6a:	e1cb      	b.n	34304 <__aeabi_dadd+0x590>
   33f6c:	2280      	movs	r2, #128	; 0x80
   33f6e:	0312      	lsls	r2, r2, #12
   33f70:	4314      	orrs	r4, r2
   33f72:	0324      	lsls	r4, r4, #12
   33f74:	0b24      	lsrs	r4, r4, #12
   33f76:	e79e      	b.n	33eb6 <__aeabi_dadd+0x142>
   33f78:	002e      	movs	r6, r5
   33f7a:	e77f      	b.n	33e7c <__aeabi_dadd+0x108>
   33f7c:	0008      	movs	r0, r1
   33f7e:	4310      	orrs	r0, r2
   33f80:	d100      	bne.n	33f84 <__aeabi_dadd+0x210>
   33f82:	e0b4      	b.n	340ee <__aeabi_dadd+0x37a>
   33f84:	1e58      	subs	r0, r3, #1
   33f86:	2800      	cmp	r0, #0
   33f88:	d000      	beq.n	33f8c <__aeabi_dadd+0x218>
   33f8a:	e0de      	b.n	3414a <__aeabi_dadd+0x3d6>
   33f8c:	18ba      	adds	r2, r7, r2
   33f8e:	42ba      	cmp	r2, r7
   33f90:	419b      	sbcs	r3, r3
   33f92:	1864      	adds	r4, r4, r1
   33f94:	425b      	negs	r3, r3
   33f96:	18e4      	adds	r4, r4, r3
   33f98:	0017      	movs	r7, r2
   33f9a:	2601      	movs	r6, #1
   33f9c:	0223      	lsls	r3, r4, #8
   33f9e:	d5a6      	bpl.n	33eee <__aeabi_dadd+0x17a>
   33fa0:	2602      	movs	r6, #2
   33fa2:	e7d5      	b.n	33f50 <__aeabi_dadd+0x1dc>
   33fa4:	2d00      	cmp	r5, #0
   33fa6:	d16e      	bne.n	34086 <__aeabi_dadd+0x312>
   33fa8:	1c70      	adds	r0, r6, #1
   33faa:	0540      	lsls	r0, r0, #21
   33fac:	0d40      	lsrs	r0, r0, #21
   33fae:	2801      	cmp	r0, #1
   33fb0:	dc00      	bgt.n	33fb4 <__aeabi_dadd+0x240>
   33fb2:	e0f9      	b.n	341a8 <__aeabi_dadd+0x434>
   33fb4:	1ab8      	subs	r0, r7, r2
   33fb6:	4684      	mov	ip, r0
   33fb8:	4287      	cmp	r7, r0
   33fba:	4180      	sbcs	r0, r0
   33fbc:	1ae5      	subs	r5, r4, r3
   33fbe:	4240      	negs	r0, r0
   33fc0:	1a2d      	subs	r5, r5, r0
   33fc2:	0228      	lsls	r0, r5, #8
   33fc4:	d400      	bmi.n	33fc8 <__aeabi_dadd+0x254>
   33fc6:	e089      	b.n	340dc <__aeabi_dadd+0x368>
   33fc8:	1bd7      	subs	r7, r2, r7
   33fca:	42ba      	cmp	r2, r7
   33fcc:	4192      	sbcs	r2, r2
   33fce:	1b1c      	subs	r4, r3, r4
   33fd0:	4252      	negs	r2, r2
   33fd2:	1aa5      	subs	r5, r4, r2
   33fd4:	46d8      	mov	r8, fp
   33fd6:	e729      	b.n	33e2c <__aeabi_dadd+0xb8>
   33fd8:	4645      	mov	r5, r8
   33fda:	2400      	movs	r4, #0
   33fdc:	2700      	movs	r7, #0
   33fde:	e76a      	b.n	33eb6 <__aeabi_dadd+0x142>
   33fe0:	4c45      	ldr	r4, [pc, #276]	; (340f8 <__aeabi_dadd+0x384>)
   33fe2:	1af6      	subs	r6, r6, r3
   33fe4:	402c      	ands	r4, r5
   33fe6:	e749      	b.n	33e7c <__aeabi_dadd+0x108>
   33fe8:	003d      	movs	r5, r7
   33fea:	3828      	subs	r0, #40	; 0x28
   33fec:	4085      	lsls	r5, r0
   33fee:	2700      	movs	r7, #0
   33ff0:	e72e      	b.n	33e50 <__aeabi_dadd+0xdc>
   33ff2:	0038      	movs	r0, r7
   33ff4:	f001 fb04 	bl	35600 <__clzsi2>
   33ff8:	3020      	adds	r0, #32
   33ffa:	e71d      	b.n	33e38 <__aeabi_dadd+0xc4>
   33ffc:	430a      	orrs	r2, r1
   33ffe:	1e51      	subs	r1, r2, #1
   34000:	418a      	sbcs	r2, r1
   34002:	2100      	movs	r1, #0
   34004:	e707      	b.n	33e16 <__aeabi_dadd+0xa2>
   34006:	2b00      	cmp	r3, #0
   34008:	d000      	beq.n	3400c <__aeabi_dadd+0x298>
   3400a:	e0f3      	b.n	341f4 <__aeabi_dadd+0x480>
   3400c:	1c70      	adds	r0, r6, #1
   3400e:	0543      	lsls	r3, r0, #21
   34010:	0d5b      	lsrs	r3, r3, #21
   34012:	2b01      	cmp	r3, #1
   34014:	dc00      	bgt.n	34018 <__aeabi_dadd+0x2a4>
   34016:	e0ad      	b.n	34174 <__aeabi_dadd+0x400>
   34018:	4b36      	ldr	r3, [pc, #216]	; (340f4 <__aeabi_dadd+0x380>)
   3401a:	4298      	cmp	r0, r3
   3401c:	d100      	bne.n	34020 <__aeabi_dadd+0x2ac>
   3401e:	e0d1      	b.n	341c4 <__aeabi_dadd+0x450>
   34020:	18ba      	adds	r2, r7, r2
   34022:	42ba      	cmp	r2, r7
   34024:	41bf      	sbcs	r7, r7
   34026:	1864      	adds	r4, r4, r1
   34028:	427f      	negs	r7, r7
   3402a:	19e4      	adds	r4, r4, r7
   3402c:	07e7      	lsls	r7, r4, #31
   3402e:	0852      	lsrs	r2, r2, #1
   34030:	4317      	orrs	r7, r2
   34032:	0864      	lsrs	r4, r4, #1
   34034:	0006      	movs	r6, r0
   34036:	e721      	b.n	33e7c <__aeabi_dadd+0x108>
   34038:	482e      	ldr	r0, [pc, #184]	; (340f4 <__aeabi_dadd+0x380>)
   3403a:	4285      	cmp	r5, r0
   3403c:	d100      	bne.n	34040 <__aeabi_dadd+0x2cc>
   3403e:	e093      	b.n	34168 <__aeabi_dadd+0x3f4>
   34040:	001d      	movs	r5, r3
   34042:	e6d0      	b.n	33de6 <__aeabi_dadd+0x72>
   34044:	0029      	movs	r1, r5
   34046:	3e1f      	subs	r6, #31
   34048:	40f1      	lsrs	r1, r6
   3404a:	2b20      	cmp	r3, #32
   3404c:	d100      	bne.n	34050 <__aeabi_dadd+0x2dc>
   3404e:	e08d      	b.n	3416c <__aeabi_dadd+0x3f8>
   34050:	2240      	movs	r2, #64	; 0x40
   34052:	1ad3      	subs	r3, r2, r3
   34054:	409d      	lsls	r5, r3
   34056:	432f      	orrs	r7, r5
   34058:	1e7d      	subs	r5, r7, #1
   3405a:	41af      	sbcs	r7, r5
   3405c:	2400      	movs	r4, #0
   3405e:	430f      	orrs	r7, r1
   34060:	2600      	movs	r6, #0
   34062:	e744      	b.n	33eee <__aeabi_dadd+0x17a>
   34064:	002b      	movs	r3, r5
   34066:	0008      	movs	r0, r1
   34068:	3b20      	subs	r3, #32
   3406a:	40d8      	lsrs	r0, r3
   3406c:	0003      	movs	r3, r0
   3406e:	2d20      	cmp	r5, #32
   34070:	d100      	bne.n	34074 <__aeabi_dadd+0x300>
   34072:	e07d      	b.n	34170 <__aeabi_dadd+0x3fc>
   34074:	2040      	movs	r0, #64	; 0x40
   34076:	1b45      	subs	r5, r0, r5
   34078:	40a9      	lsls	r1, r5
   3407a:	430a      	orrs	r2, r1
   3407c:	1e51      	subs	r1, r2, #1
   3407e:	418a      	sbcs	r2, r1
   34080:	2100      	movs	r1, #0
   34082:	431a      	orrs	r2, r3
   34084:	e6c7      	b.n	33e16 <__aeabi_dadd+0xa2>
   34086:	2e00      	cmp	r6, #0
   34088:	d050      	beq.n	3412c <__aeabi_dadd+0x3b8>
   3408a:	4e1a      	ldr	r6, [pc, #104]	; (340f4 <__aeabi_dadd+0x380>)
   3408c:	42b0      	cmp	r0, r6
   3408e:	d057      	beq.n	34140 <__aeabi_dadd+0x3cc>
   34090:	2680      	movs	r6, #128	; 0x80
   34092:	426b      	negs	r3, r5
   34094:	4699      	mov	r9, r3
   34096:	0436      	lsls	r6, r6, #16
   34098:	4334      	orrs	r4, r6
   3409a:	464b      	mov	r3, r9
   3409c:	2b38      	cmp	r3, #56	; 0x38
   3409e:	dd00      	ble.n	340a2 <__aeabi_dadd+0x32e>
   340a0:	e0d6      	b.n	34250 <__aeabi_dadd+0x4dc>
   340a2:	2b1f      	cmp	r3, #31
   340a4:	dd00      	ble.n	340a8 <__aeabi_dadd+0x334>
   340a6:	e135      	b.n	34314 <__aeabi_dadd+0x5a0>
   340a8:	2620      	movs	r6, #32
   340aa:	1af5      	subs	r5, r6, r3
   340ac:	0026      	movs	r6, r4
   340ae:	40ae      	lsls	r6, r5
   340b0:	46b2      	mov	sl, r6
   340b2:	003e      	movs	r6, r7
   340b4:	40de      	lsrs	r6, r3
   340b6:	46ac      	mov	ip, r5
   340b8:	0035      	movs	r5, r6
   340ba:	4656      	mov	r6, sl
   340bc:	432e      	orrs	r6, r5
   340be:	4665      	mov	r5, ip
   340c0:	40af      	lsls	r7, r5
   340c2:	1e7d      	subs	r5, r7, #1
   340c4:	41af      	sbcs	r7, r5
   340c6:	40dc      	lsrs	r4, r3
   340c8:	4337      	orrs	r7, r6
   340ca:	1bd7      	subs	r7, r2, r7
   340cc:	42ba      	cmp	r2, r7
   340ce:	4192      	sbcs	r2, r2
   340d0:	1b0c      	subs	r4, r1, r4
   340d2:	4252      	negs	r2, r2
   340d4:	1aa4      	subs	r4, r4, r2
   340d6:	0006      	movs	r6, r0
   340d8:	46d8      	mov	r8, fp
   340da:	e6a3      	b.n	33e24 <__aeabi_dadd+0xb0>
   340dc:	4664      	mov	r4, ip
   340de:	4667      	mov	r7, ip
   340e0:	432c      	orrs	r4, r5
   340e2:	d000      	beq.n	340e6 <__aeabi_dadd+0x372>
   340e4:	e6a2      	b.n	33e2c <__aeabi_dadd+0xb8>
   340e6:	2500      	movs	r5, #0
   340e8:	2600      	movs	r6, #0
   340ea:	2700      	movs	r7, #0
   340ec:	e706      	b.n	33efc <__aeabi_dadd+0x188>
   340ee:	001e      	movs	r6, r3
   340f0:	e6c4      	b.n	33e7c <__aeabi_dadd+0x108>
   340f2:	46c0      	nop			; (mov r8, r8)
   340f4:	000007ff 	.word	0x000007ff
   340f8:	ff7fffff 	.word	0xff7fffff
   340fc:	800fffff 	.word	0x800fffff
   34100:	2b1f      	cmp	r3, #31
   34102:	dc63      	bgt.n	341cc <__aeabi_dadd+0x458>
   34104:	2020      	movs	r0, #32
   34106:	1ac3      	subs	r3, r0, r3
   34108:	0008      	movs	r0, r1
   3410a:	4098      	lsls	r0, r3
   3410c:	469c      	mov	ip, r3
   3410e:	4683      	mov	fp, r0
   34110:	4653      	mov	r3, sl
   34112:	0010      	movs	r0, r2
   34114:	40d8      	lsrs	r0, r3
   34116:	0003      	movs	r3, r0
   34118:	4658      	mov	r0, fp
   3411a:	4318      	orrs	r0, r3
   3411c:	4663      	mov	r3, ip
   3411e:	409a      	lsls	r2, r3
   34120:	1e53      	subs	r3, r2, #1
   34122:	419a      	sbcs	r2, r3
   34124:	4653      	mov	r3, sl
   34126:	4302      	orrs	r2, r0
   34128:	40d9      	lsrs	r1, r3
   3412a:	e703      	b.n	33f34 <__aeabi_dadd+0x1c0>
   3412c:	0026      	movs	r6, r4
   3412e:	433e      	orrs	r6, r7
   34130:	d006      	beq.n	34140 <__aeabi_dadd+0x3cc>
   34132:	43eb      	mvns	r3, r5
   34134:	4699      	mov	r9, r3
   34136:	2b00      	cmp	r3, #0
   34138:	d0c7      	beq.n	340ca <__aeabi_dadd+0x356>
   3413a:	4e94      	ldr	r6, [pc, #592]	; (3438c <__aeabi_dadd+0x618>)
   3413c:	42b0      	cmp	r0, r6
   3413e:	d1ac      	bne.n	3409a <__aeabi_dadd+0x326>
   34140:	000c      	movs	r4, r1
   34142:	0017      	movs	r7, r2
   34144:	0006      	movs	r6, r0
   34146:	46d8      	mov	r8, fp
   34148:	e698      	b.n	33e7c <__aeabi_dadd+0x108>
   3414a:	4b90      	ldr	r3, [pc, #576]	; (3438c <__aeabi_dadd+0x618>)
   3414c:	459a      	cmp	sl, r3
   3414e:	d00b      	beq.n	34168 <__aeabi_dadd+0x3f4>
   34150:	4682      	mov	sl, r0
   34152:	e6e7      	b.n	33f24 <__aeabi_dadd+0x1b0>
   34154:	2800      	cmp	r0, #0
   34156:	d000      	beq.n	3415a <__aeabi_dadd+0x3e6>
   34158:	e09e      	b.n	34298 <__aeabi_dadd+0x524>
   3415a:	0018      	movs	r0, r3
   3415c:	4310      	orrs	r0, r2
   3415e:	d100      	bne.n	34162 <__aeabi_dadd+0x3ee>
   34160:	e0e9      	b.n	34336 <__aeabi_dadd+0x5c2>
   34162:	001c      	movs	r4, r3
   34164:	0017      	movs	r7, r2
   34166:	46d8      	mov	r8, fp
   34168:	4e88      	ldr	r6, [pc, #544]	; (3438c <__aeabi_dadd+0x618>)
   3416a:	e687      	b.n	33e7c <__aeabi_dadd+0x108>
   3416c:	2500      	movs	r5, #0
   3416e:	e772      	b.n	34056 <__aeabi_dadd+0x2e2>
   34170:	2100      	movs	r1, #0
   34172:	e782      	b.n	3407a <__aeabi_dadd+0x306>
   34174:	0023      	movs	r3, r4
   34176:	433b      	orrs	r3, r7
   34178:	2e00      	cmp	r6, #0
   3417a:	d000      	beq.n	3417e <__aeabi_dadd+0x40a>
   3417c:	e0ab      	b.n	342d6 <__aeabi_dadd+0x562>
   3417e:	2b00      	cmp	r3, #0
   34180:	d100      	bne.n	34184 <__aeabi_dadd+0x410>
   34182:	e0e7      	b.n	34354 <__aeabi_dadd+0x5e0>
   34184:	000b      	movs	r3, r1
   34186:	4313      	orrs	r3, r2
   34188:	d100      	bne.n	3418c <__aeabi_dadd+0x418>
   3418a:	e677      	b.n	33e7c <__aeabi_dadd+0x108>
   3418c:	18ba      	adds	r2, r7, r2
   3418e:	42ba      	cmp	r2, r7
   34190:	41bf      	sbcs	r7, r7
   34192:	1864      	adds	r4, r4, r1
   34194:	427f      	negs	r7, r7
   34196:	19e4      	adds	r4, r4, r7
   34198:	0223      	lsls	r3, r4, #8
   3419a:	d400      	bmi.n	3419e <__aeabi_dadd+0x42a>
   3419c:	e0f2      	b.n	34384 <__aeabi_dadd+0x610>
   3419e:	4b7c      	ldr	r3, [pc, #496]	; (34390 <__aeabi_dadd+0x61c>)
   341a0:	0017      	movs	r7, r2
   341a2:	401c      	ands	r4, r3
   341a4:	0006      	movs	r6, r0
   341a6:	e669      	b.n	33e7c <__aeabi_dadd+0x108>
   341a8:	0020      	movs	r0, r4
   341aa:	4338      	orrs	r0, r7
   341ac:	2e00      	cmp	r6, #0
   341ae:	d1d1      	bne.n	34154 <__aeabi_dadd+0x3e0>
   341b0:	2800      	cmp	r0, #0
   341b2:	d15b      	bne.n	3426c <__aeabi_dadd+0x4f8>
   341b4:	001c      	movs	r4, r3
   341b6:	4314      	orrs	r4, r2
   341b8:	d100      	bne.n	341bc <__aeabi_dadd+0x448>
   341ba:	e0a8      	b.n	3430e <__aeabi_dadd+0x59a>
   341bc:	001c      	movs	r4, r3
   341be:	0017      	movs	r7, r2
   341c0:	46d8      	mov	r8, fp
   341c2:	e65b      	b.n	33e7c <__aeabi_dadd+0x108>
   341c4:	0006      	movs	r6, r0
   341c6:	2400      	movs	r4, #0
   341c8:	2700      	movs	r7, #0
   341ca:	e697      	b.n	33efc <__aeabi_dadd+0x188>
   341cc:	4650      	mov	r0, sl
   341ce:	000b      	movs	r3, r1
   341d0:	3820      	subs	r0, #32
   341d2:	40c3      	lsrs	r3, r0
   341d4:	4699      	mov	r9, r3
   341d6:	4653      	mov	r3, sl
   341d8:	2b20      	cmp	r3, #32
   341da:	d100      	bne.n	341de <__aeabi_dadd+0x46a>
   341dc:	e095      	b.n	3430a <__aeabi_dadd+0x596>
   341de:	2340      	movs	r3, #64	; 0x40
   341e0:	4650      	mov	r0, sl
   341e2:	1a1b      	subs	r3, r3, r0
   341e4:	4099      	lsls	r1, r3
   341e6:	430a      	orrs	r2, r1
   341e8:	1e51      	subs	r1, r2, #1
   341ea:	418a      	sbcs	r2, r1
   341ec:	464b      	mov	r3, r9
   341ee:	2100      	movs	r1, #0
   341f0:	431a      	orrs	r2, r3
   341f2:	e69f      	b.n	33f34 <__aeabi_dadd+0x1c0>
   341f4:	2e00      	cmp	r6, #0
   341f6:	d130      	bne.n	3425a <__aeabi_dadd+0x4e6>
   341f8:	0026      	movs	r6, r4
   341fa:	433e      	orrs	r6, r7
   341fc:	d067      	beq.n	342ce <__aeabi_dadd+0x55a>
   341fe:	43db      	mvns	r3, r3
   34200:	469a      	mov	sl, r3
   34202:	2b00      	cmp	r3, #0
   34204:	d01c      	beq.n	34240 <__aeabi_dadd+0x4cc>
   34206:	4e61      	ldr	r6, [pc, #388]	; (3438c <__aeabi_dadd+0x618>)
   34208:	42b0      	cmp	r0, r6
   3420a:	d060      	beq.n	342ce <__aeabi_dadd+0x55a>
   3420c:	4653      	mov	r3, sl
   3420e:	2b38      	cmp	r3, #56	; 0x38
   34210:	dd00      	ble.n	34214 <__aeabi_dadd+0x4a0>
   34212:	e096      	b.n	34342 <__aeabi_dadd+0x5ce>
   34214:	2b1f      	cmp	r3, #31
   34216:	dd00      	ble.n	3421a <__aeabi_dadd+0x4a6>
   34218:	e09f      	b.n	3435a <__aeabi_dadd+0x5e6>
   3421a:	2620      	movs	r6, #32
   3421c:	1af3      	subs	r3, r6, r3
   3421e:	0026      	movs	r6, r4
   34220:	409e      	lsls	r6, r3
   34222:	469c      	mov	ip, r3
   34224:	46b3      	mov	fp, r6
   34226:	4653      	mov	r3, sl
   34228:	003e      	movs	r6, r7
   3422a:	40de      	lsrs	r6, r3
   3422c:	0033      	movs	r3, r6
   3422e:	465e      	mov	r6, fp
   34230:	431e      	orrs	r6, r3
   34232:	4663      	mov	r3, ip
   34234:	409f      	lsls	r7, r3
   34236:	1e7b      	subs	r3, r7, #1
   34238:	419f      	sbcs	r7, r3
   3423a:	4653      	mov	r3, sl
   3423c:	40dc      	lsrs	r4, r3
   3423e:	4337      	orrs	r7, r6
   34240:	18bf      	adds	r7, r7, r2
   34242:	4297      	cmp	r7, r2
   34244:	4192      	sbcs	r2, r2
   34246:	1864      	adds	r4, r4, r1
   34248:	4252      	negs	r2, r2
   3424a:	18a4      	adds	r4, r4, r2
   3424c:	0006      	movs	r6, r0
   3424e:	e678      	b.n	33f42 <__aeabi_dadd+0x1ce>
   34250:	4327      	orrs	r7, r4
   34252:	1e7c      	subs	r4, r7, #1
   34254:	41a7      	sbcs	r7, r4
   34256:	2400      	movs	r4, #0
   34258:	e737      	b.n	340ca <__aeabi_dadd+0x356>
   3425a:	4e4c      	ldr	r6, [pc, #304]	; (3438c <__aeabi_dadd+0x618>)
   3425c:	42b0      	cmp	r0, r6
   3425e:	d036      	beq.n	342ce <__aeabi_dadd+0x55a>
   34260:	2680      	movs	r6, #128	; 0x80
   34262:	425b      	negs	r3, r3
   34264:	0436      	lsls	r6, r6, #16
   34266:	469a      	mov	sl, r3
   34268:	4334      	orrs	r4, r6
   3426a:	e7cf      	b.n	3420c <__aeabi_dadd+0x498>
   3426c:	0018      	movs	r0, r3
   3426e:	4310      	orrs	r0, r2
   34270:	d100      	bne.n	34274 <__aeabi_dadd+0x500>
   34272:	e603      	b.n	33e7c <__aeabi_dadd+0x108>
   34274:	1ab8      	subs	r0, r7, r2
   34276:	4684      	mov	ip, r0
   34278:	4567      	cmp	r7, ip
   3427a:	41ad      	sbcs	r5, r5
   3427c:	1ae0      	subs	r0, r4, r3
   3427e:	426d      	negs	r5, r5
   34280:	1b40      	subs	r0, r0, r5
   34282:	0205      	lsls	r5, r0, #8
   34284:	d400      	bmi.n	34288 <__aeabi_dadd+0x514>
   34286:	e62c      	b.n	33ee2 <__aeabi_dadd+0x16e>
   34288:	1bd7      	subs	r7, r2, r7
   3428a:	42ba      	cmp	r2, r7
   3428c:	4192      	sbcs	r2, r2
   3428e:	1b1c      	subs	r4, r3, r4
   34290:	4252      	negs	r2, r2
   34292:	1aa4      	subs	r4, r4, r2
   34294:	46d8      	mov	r8, fp
   34296:	e5f1      	b.n	33e7c <__aeabi_dadd+0x108>
   34298:	0018      	movs	r0, r3
   3429a:	4310      	orrs	r0, r2
   3429c:	d100      	bne.n	342a0 <__aeabi_dadd+0x52c>
   3429e:	e763      	b.n	34168 <__aeabi_dadd+0x3f4>
   342a0:	08f8      	lsrs	r0, r7, #3
   342a2:	0767      	lsls	r7, r4, #29
   342a4:	4307      	orrs	r7, r0
   342a6:	2080      	movs	r0, #128	; 0x80
   342a8:	08e4      	lsrs	r4, r4, #3
   342aa:	0300      	lsls	r0, r0, #12
   342ac:	4204      	tst	r4, r0
   342ae:	d008      	beq.n	342c2 <__aeabi_dadd+0x54e>
   342b0:	08dd      	lsrs	r5, r3, #3
   342b2:	4205      	tst	r5, r0
   342b4:	d105      	bne.n	342c2 <__aeabi_dadd+0x54e>
   342b6:	08d2      	lsrs	r2, r2, #3
   342b8:	0759      	lsls	r1, r3, #29
   342ba:	4311      	orrs	r1, r2
   342bc:	000f      	movs	r7, r1
   342be:	002c      	movs	r4, r5
   342c0:	46d8      	mov	r8, fp
   342c2:	0f7b      	lsrs	r3, r7, #29
   342c4:	00e4      	lsls	r4, r4, #3
   342c6:	431c      	orrs	r4, r3
   342c8:	00ff      	lsls	r7, r7, #3
   342ca:	4e30      	ldr	r6, [pc, #192]	; (3438c <__aeabi_dadd+0x618>)
   342cc:	e5d6      	b.n	33e7c <__aeabi_dadd+0x108>
   342ce:	000c      	movs	r4, r1
   342d0:	0017      	movs	r7, r2
   342d2:	0006      	movs	r6, r0
   342d4:	e5d2      	b.n	33e7c <__aeabi_dadd+0x108>
   342d6:	2b00      	cmp	r3, #0
   342d8:	d038      	beq.n	3434c <__aeabi_dadd+0x5d8>
   342da:	000b      	movs	r3, r1
   342dc:	4313      	orrs	r3, r2
   342de:	d100      	bne.n	342e2 <__aeabi_dadd+0x56e>
   342e0:	e742      	b.n	34168 <__aeabi_dadd+0x3f4>
   342e2:	08f8      	lsrs	r0, r7, #3
   342e4:	0767      	lsls	r7, r4, #29
   342e6:	4307      	orrs	r7, r0
   342e8:	2080      	movs	r0, #128	; 0x80
   342ea:	08e4      	lsrs	r4, r4, #3
   342ec:	0300      	lsls	r0, r0, #12
   342ee:	4204      	tst	r4, r0
   342f0:	d0e7      	beq.n	342c2 <__aeabi_dadd+0x54e>
   342f2:	08cb      	lsrs	r3, r1, #3
   342f4:	4203      	tst	r3, r0
   342f6:	d1e4      	bne.n	342c2 <__aeabi_dadd+0x54e>
   342f8:	08d2      	lsrs	r2, r2, #3
   342fa:	0749      	lsls	r1, r1, #29
   342fc:	4311      	orrs	r1, r2
   342fe:	000f      	movs	r7, r1
   34300:	001c      	movs	r4, r3
   34302:	e7de      	b.n	342c2 <__aeabi_dadd+0x54e>
   34304:	2700      	movs	r7, #0
   34306:	2400      	movs	r4, #0
   34308:	e5d5      	b.n	33eb6 <__aeabi_dadd+0x142>
   3430a:	2100      	movs	r1, #0
   3430c:	e76b      	b.n	341e6 <__aeabi_dadd+0x472>
   3430e:	2500      	movs	r5, #0
   34310:	2700      	movs	r7, #0
   34312:	e5f3      	b.n	33efc <__aeabi_dadd+0x188>
   34314:	464e      	mov	r6, r9
   34316:	0025      	movs	r5, r4
   34318:	3e20      	subs	r6, #32
   3431a:	40f5      	lsrs	r5, r6
   3431c:	464b      	mov	r3, r9
   3431e:	002e      	movs	r6, r5
   34320:	2b20      	cmp	r3, #32
   34322:	d02d      	beq.n	34380 <__aeabi_dadd+0x60c>
   34324:	2540      	movs	r5, #64	; 0x40
   34326:	1aed      	subs	r5, r5, r3
   34328:	40ac      	lsls	r4, r5
   3432a:	4327      	orrs	r7, r4
   3432c:	1e7c      	subs	r4, r7, #1
   3432e:	41a7      	sbcs	r7, r4
   34330:	2400      	movs	r4, #0
   34332:	4337      	orrs	r7, r6
   34334:	e6c9      	b.n	340ca <__aeabi_dadd+0x356>
   34336:	2480      	movs	r4, #128	; 0x80
   34338:	2500      	movs	r5, #0
   3433a:	0324      	lsls	r4, r4, #12
   3433c:	4e13      	ldr	r6, [pc, #76]	; (3438c <__aeabi_dadd+0x618>)
   3433e:	2700      	movs	r7, #0
   34340:	e5dc      	b.n	33efc <__aeabi_dadd+0x188>
   34342:	4327      	orrs	r7, r4
   34344:	1e7c      	subs	r4, r7, #1
   34346:	41a7      	sbcs	r7, r4
   34348:	2400      	movs	r4, #0
   3434a:	e779      	b.n	34240 <__aeabi_dadd+0x4cc>
   3434c:	000c      	movs	r4, r1
   3434e:	0017      	movs	r7, r2
   34350:	4e0e      	ldr	r6, [pc, #56]	; (3438c <__aeabi_dadd+0x618>)
   34352:	e593      	b.n	33e7c <__aeabi_dadd+0x108>
   34354:	000c      	movs	r4, r1
   34356:	0017      	movs	r7, r2
   34358:	e590      	b.n	33e7c <__aeabi_dadd+0x108>
   3435a:	4656      	mov	r6, sl
   3435c:	0023      	movs	r3, r4
   3435e:	3e20      	subs	r6, #32
   34360:	40f3      	lsrs	r3, r6
   34362:	4699      	mov	r9, r3
   34364:	4653      	mov	r3, sl
   34366:	2b20      	cmp	r3, #32
   34368:	d00e      	beq.n	34388 <__aeabi_dadd+0x614>
   3436a:	2340      	movs	r3, #64	; 0x40
   3436c:	4656      	mov	r6, sl
   3436e:	1b9b      	subs	r3, r3, r6
   34370:	409c      	lsls	r4, r3
   34372:	4327      	orrs	r7, r4
   34374:	1e7c      	subs	r4, r7, #1
   34376:	41a7      	sbcs	r7, r4
   34378:	464b      	mov	r3, r9
   3437a:	2400      	movs	r4, #0
   3437c:	431f      	orrs	r7, r3
   3437e:	e75f      	b.n	34240 <__aeabi_dadd+0x4cc>
   34380:	2400      	movs	r4, #0
   34382:	e7d2      	b.n	3432a <__aeabi_dadd+0x5b6>
   34384:	0017      	movs	r7, r2
   34386:	e5b2      	b.n	33eee <__aeabi_dadd+0x17a>
   34388:	2400      	movs	r4, #0
   3438a:	e7f2      	b.n	34372 <__aeabi_dadd+0x5fe>
   3438c:	000007ff 	.word	0x000007ff
   34390:	ff7fffff 	.word	0xff7fffff

00034394 <__aeabi_ddiv>:
   34394:	b5f0      	push	{r4, r5, r6, r7, lr}
   34396:	4657      	mov	r7, sl
   34398:	4645      	mov	r5, r8
   3439a:	46de      	mov	lr, fp
   3439c:	464e      	mov	r6, r9
   3439e:	b5e0      	push	{r5, r6, r7, lr}
   343a0:	004c      	lsls	r4, r1, #1
   343a2:	030e      	lsls	r6, r1, #12
   343a4:	b087      	sub	sp, #28
   343a6:	4683      	mov	fp, r0
   343a8:	4692      	mov	sl, r2
   343aa:	001d      	movs	r5, r3
   343ac:	4680      	mov	r8, r0
   343ae:	0b36      	lsrs	r6, r6, #12
   343b0:	0d64      	lsrs	r4, r4, #21
   343b2:	0fcf      	lsrs	r7, r1, #31
   343b4:	2c00      	cmp	r4, #0
   343b6:	d04f      	beq.n	34458 <__aeabi_ddiv+0xc4>
   343b8:	4b6f      	ldr	r3, [pc, #444]	; (34578 <__aeabi_ddiv+0x1e4>)
   343ba:	429c      	cmp	r4, r3
   343bc:	d035      	beq.n	3442a <__aeabi_ddiv+0x96>
   343be:	2380      	movs	r3, #128	; 0x80
   343c0:	0f42      	lsrs	r2, r0, #29
   343c2:	041b      	lsls	r3, r3, #16
   343c4:	00f6      	lsls	r6, r6, #3
   343c6:	4313      	orrs	r3, r2
   343c8:	4333      	orrs	r3, r6
   343ca:	4699      	mov	r9, r3
   343cc:	00c3      	lsls	r3, r0, #3
   343ce:	4698      	mov	r8, r3
   343d0:	4b6a      	ldr	r3, [pc, #424]	; (3457c <__aeabi_ddiv+0x1e8>)
   343d2:	2600      	movs	r6, #0
   343d4:	469c      	mov	ip, r3
   343d6:	2300      	movs	r3, #0
   343d8:	4464      	add	r4, ip
   343da:	9303      	str	r3, [sp, #12]
   343dc:	032b      	lsls	r3, r5, #12
   343de:	0b1b      	lsrs	r3, r3, #12
   343e0:	469b      	mov	fp, r3
   343e2:	006b      	lsls	r3, r5, #1
   343e4:	0fed      	lsrs	r5, r5, #31
   343e6:	4650      	mov	r0, sl
   343e8:	0d5b      	lsrs	r3, r3, #21
   343ea:	9501      	str	r5, [sp, #4]
   343ec:	d05e      	beq.n	344ac <__aeabi_ddiv+0x118>
   343ee:	4a62      	ldr	r2, [pc, #392]	; (34578 <__aeabi_ddiv+0x1e4>)
   343f0:	4293      	cmp	r3, r2
   343f2:	d053      	beq.n	3449c <__aeabi_ddiv+0x108>
   343f4:	465a      	mov	r2, fp
   343f6:	00d1      	lsls	r1, r2, #3
   343f8:	2280      	movs	r2, #128	; 0x80
   343fa:	0f40      	lsrs	r0, r0, #29
   343fc:	0412      	lsls	r2, r2, #16
   343fe:	4302      	orrs	r2, r0
   34400:	430a      	orrs	r2, r1
   34402:	4693      	mov	fp, r2
   34404:	4652      	mov	r2, sl
   34406:	00d1      	lsls	r1, r2, #3
   34408:	4a5c      	ldr	r2, [pc, #368]	; (3457c <__aeabi_ddiv+0x1e8>)
   3440a:	4694      	mov	ip, r2
   3440c:	2200      	movs	r2, #0
   3440e:	4463      	add	r3, ip
   34410:	0038      	movs	r0, r7
   34412:	4068      	eors	r0, r5
   34414:	4684      	mov	ip, r0
   34416:	9002      	str	r0, [sp, #8]
   34418:	1ae4      	subs	r4, r4, r3
   3441a:	4316      	orrs	r6, r2
   3441c:	2e0f      	cmp	r6, #15
   3441e:	d900      	bls.n	34422 <__aeabi_ddiv+0x8e>
   34420:	e0b4      	b.n	3458c <__aeabi_ddiv+0x1f8>
   34422:	4b57      	ldr	r3, [pc, #348]	; (34580 <__aeabi_ddiv+0x1ec>)
   34424:	00b6      	lsls	r6, r6, #2
   34426:	599b      	ldr	r3, [r3, r6]
   34428:	469f      	mov	pc, r3
   3442a:	0003      	movs	r3, r0
   3442c:	4333      	orrs	r3, r6
   3442e:	4699      	mov	r9, r3
   34430:	d16c      	bne.n	3450c <__aeabi_ddiv+0x178>
   34432:	2300      	movs	r3, #0
   34434:	4698      	mov	r8, r3
   34436:	3302      	adds	r3, #2
   34438:	2608      	movs	r6, #8
   3443a:	9303      	str	r3, [sp, #12]
   3443c:	e7ce      	b.n	343dc <__aeabi_ddiv+0x48>
   3443e:	46cb      	mov	fp, r9
   34440:	4641      	mov	r1, r8
   34442:	9a03      	ldr	r2, [sp, #12]
   34444:	9701      	str	r7, [sp, #4]
   34446:	2a02      	cmp	r2, #2
   34448:	d165      	bne.n	34516 <__aeabi_ddiv+0x182>
   3444a:	9b01      	ldr	r3, [sp, #4]
   3444c:	4c4a      	ldr	r4, [pc, #296]	; (34578 <__aeabi_ddiv+0x1e4>)
   3444e:	469c      	mov	ip, r3
   34450:	2300      	movs	r3, #0
   34452:	2200      	movs	r2, #0
   34454:	4698      	mov	r8, r3
   34456:	e06b      	b.n	34530 <__aeabi_ddiv+0x19c>
   34458:	0003      	movs	r3, r0
   3445a:	4333      	orrs	r3, r6
   3445c:	4699      	mov	r9, r3
   3445e:	d04e      	beq.n	344fe <__aeabi_ddiv+0x16a>
   34460:	2e00      	cmp	r6, #0
   34462:	d100      	bne.n	34466 <__aeabi_ddiv+0xd2>
   34464:	e1bc      	b.n	347e0 <__aeabi_ddiv+0x44c>
   34466:	0030      	movs	r0, r6
   34468:	f001 f8ca 	bl	35600 <__clzsi2>
   3446c:	0003      	movs	r3, r0
   3446e:	3b0b      	subs	r3, #11
   34470:	2b1c      	cmp	r3, #28
   34472:	dd00      	ble.n	34476 <__aeabi_ddiv+0xe2>
   34474:	e1ac      	b.n	347d0 <__aeabi_ddiv+0x43c>
   34476:	221d      	movs	r2, #29
   34478:	1ad3      	subs	r3, r2, r3
   3447a:	465a      	mov	r2, fp
   3447c:	0001      	movs	r1, r0
   3447e:	40da      	lsrs	r2, r3
   34480:	3908      	subs	r1, #8
   34482:	408e      	lsls	r6, r1
   34484:	0013      	movs	r3, r2
   34486:	4333      	orrs	r3, r6
   34488:	4699      	mov	r9, r3
   3448a:	465b      	mov	r3, fp
   3448c:	408b      	lsls	r3, r1
   3448e:	4698      	mov	r8, r3
   34490:	2300      	movs	r3, #0
   34492:	4c3c      	ldr	r4, [pc, #240]	; (34584 <__aeabi_ddiv+0x1f0>)
   34494:	2600      	movs	r6, #0
   34496:	1a24      	subs	r4, r4, r0
   34498:	9303      	str	r3, [sp, #12]
   3449a:	e79f      	b.n	343dc <__aeabi_ddiv+0x48>
   3449c:	4651      	mov	r1, sl
   3449e:	465a      	mov	r2, fp
   344a0:	4311      	orrs	r1, r2
   344a2:	d129      	bne.n	344f8 <__aeabi_ddiv+0x164>
   344a4:	2200      	movs	r2, #0
   344a6:	4693      	mov	fp, r2
   344a8:	3202      	adds	r2, #2
   344aa:	e7b1      	b.n	34410 <__aeabi_ddiv+0x7c>
   344ac:	4659      	mov	r1, fp
   344ae:	4301      	orrs	r1, r0
   344b0:	d01e      	beq.n	344f0 <__aeabi_ddiv+0x15c>
   344b2:	465b      	mov	r3, fp
   344b4:	2b00      	cmp	r3, #0
   344b6:	d100      	bne.n	344ba <__aeabi_ddiv+0x126>
   344b8:	e19e      	b.n	347f8 <__aeabi_ddiv+0x464>
   344ba:	4658      	mov	r0, fp
   344bc:	f001 f8a0 	bl	35600 <__clzsi2>
   344c0:	0003      	movs	r3, r0
   344c2:	3b0b      	subs	r3, #11
   344c4:	2b1c      	cmp	r3, #28
   344c6:	dd00      	ble.n	344ca <__aeabi_ddiv+0x136>
   344c8:	e18f      	b.n	347ea <__aeabi_ddiv+0x456>
   344ca:	0002      	movs	r2, r0
   344cc:	4659      	mov	r1, fp
   344ce:	3a08      	subs	r2, #8
   344d0:	4091      	lsls	r1, r2
   344d2:	468b      	mov	fp, r1
   344d4:	211d      	movs	r1, #29
   344d6:	1acb      	subs	r3, r1, r3
   344d8:	4651      	mov	r1, sl
   344da:	40d9      	lsrs	r1, r3
   344dc:	000b      	movs	r3, r1
   344de:	4659      	mov	r1, fp
   344e0:	430b      	orrs	r3, r1
   344e2:	4651      	mov	r1, sl
   344e4:	469b      	mov	fp, r3
   344e6:	4091      	lsls	r1, r2
   344e8:	4b26      	ldr	r3, [pc, #152]	; (34584 <__aeabi_ddiv+0x1f0>)
   344ea:	2200      	movs	r2, #0
   344ec:	1a1b      	subs	r3, r3, r0
   344ee:	e78f      	b.n	34410 <__aeabi_ddiv+0x7c>
   344f0:	2300      	movs	r3, #0
   344f2:	2201      	movs	r2, #1
   344f4:	469b      	mov	fp, r3
   344f6:	e78b      	b.n	34410 <__aeabi_ddiv+0x7c>
   344f8:	4651      	mov	r1, sl
   344fa:	2203      	movs	r2, #3
   344fc:	e788      	b.n	34410 <__aeabi_ddiv+0x7c>
   344fe:	2300      	movs	r3, #0
   34500:	4698      	mov	r8, r3
   34502:	3301      	adds	r3, #1
   34504:	2604      	movs	r6, #4
   34506:	2400      	movs	r4, #0
   34508:	9303      	str	r3, [sp, #12]
   3450a:	e767      	b.n	343dc <__aeabi_ddiv+0x48>
   3450c:	2303      	movs	r3, #3
   3450e:	46b1      	mov	r9, r6
   34510:	9303      	str	r3, [sp, #12]
   34512:	260c      	movs	r6, #12
   34514:	e762      	b.n	343dc <__aeabi_ddiv+0x48>
   34516:	2a03      	cmp	r2, #3
   34518:	d100      	bne.n	3451c <__aeabi_ddiv+0x188>
   3451a:	e25c      	b.n	349d6 <__aeabi_ddiv+0x642>
   3451c:	9b01      	ldr	r3, [sp, #4]
   3451e:	2a01      	cmp	r2, #1
   34520:	d000      	beq.n	34524 <__aeabi_ddiv+0x190>
   34522:	e1e4      	b.n	348ee <__aeabi_ddiv+0x55a>
   34524:	4013      	ands	r3, r2
   34526:	469c      	mov	ip, r3
   34528:	2300      	movs	r3, #0
   3452a:	2400      	movs	r4, #0
   3452c:	2200      	movs	r2, #0
   3452e:	4698      	mov	r8, r3
   34530:	2100      	movs	r1, #0
   34532:	0312      	lsls	r2, r2, #12
   34534:	0b13      	lsrs	r3, r2, #12
   34536:	0d0a      	lsrs	r2, r1, #20
   34538:	0512      	lsls	r2, r2, #20
   3453a:	431a      	orrs	r2, r3
   3453c:	0523      	lsls	r3, r4, #20
   3453e:	4c12      	ldr	r4, [pc, #72]	; (34588 <__aeabi_ddiv+0x1f4>)
   34540:	4640      	mov	r0, r8
   34542:	4022      	ands	r2, r4
   34544:	4313      	orrs	r3, r2
   34546:	4662      	mov	r2, ip
   34548:	005b      	lsls	r3, r3, #1
   3454a:	07d2      	lsls	r2, r2, #31
   3454c:	085b      	lsrs	r3, r3, #1
   3454e:	4313      	orrs	r3, r2
   34550:	0019      	movs	r1, r3
   34552:	b007      	add	sp, #28
   34554:	bc3c      	pop	{r2, r3, r4, r5}
   34556:	4690      	mov	r8, r2
   34558:	4699      	mov	r9, r3
   3455a:	46a2      	mov	sl, r4
   3455c:	46ab      	mov	fp, r5
   3455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34560:	2300      	movs	r3, #0
   34562:	2280      	movs	r2, #128	; 0x80
   34564:	469c      	mov	ip, r3
   34566:	0312      	lsls	r2, r2, #12
   34568:	4698      	mov	r8, r3
   3456a:	4c03      	ldr	r4, [pc, #12]	; (34578 <__aeabi_ddiv+0x1e4>)
   3456c:	e7e0      	b.n	34530 <__aeabi_ddiv+0x19c>
   3456e:	2300      	movs	r3, #0
   34570:	4c01      	ldr	r4, [pc, #4]	; (34578 <__aeabi_ddiv+0x1e4>)
   34572:	2200      	movs	r2, #0
   34574:	4698      	mov	r8, r3
   34576:	e7db      	b.n	34530 <__aeabi_ddiv+0x19c>
   34578:	000007ff 	.word	0x000007ff
   3457c:	fffffc01 	.word	0xfffffc01
   34580:	0003b1b0 	.word	0x0003b1b0
   34584:	fffffc0d 	.word	0xfffffc0d
   34588:	800fffff 	.word	0x800fffff
   3458c:	45d9      	cmp	r9, fp
   3458e:	d900      	bls.n	34592 <__aeabi_ddiv+0x1fe>
   34590:	e139      	b.n	34806 <__aeabi_ddiv+0x472>
   34592:	d100      	bne.n	34596 <__aeabi_ddiv+0x202>
   34594:	e134      	b.n	34800 <__aeabi_ddiv+0x46c>
   34596:	2300      	movs	r3, #0
   34598:	4646      	mov	r6, r8
   3459a:	464d      	mov	r5, r9
   3459c:	469a      	mov	sl, r3
   3459e:	3c01      	subs	r4, #1
   345a0:	465b      	mov	r3, fp
   345a2:	0e0a      	lsrs	r2, r1, #24
   345a4:	021b      	lsls	r3, r3, #8
   345a6:	431a      	orrs	r2, r3
   345a8:	020b      	lsls	r3, r1, #8
   345aa:	0c17      	lsrs	r7, r2, #16
   345ac:	9303      	str	r3, [sp, #12]
   345ae:	0413      	lsls	r3, r2, #16
   345b0:	0c1b      	lsrs	r3, r3, #16
   345b2:	0039      	movs	r1, r7
   345b4:	0028      	movs	r0, r5
   345b6:	4690      	mov	r8, r2
   345b8:	9301      	str	r3, [sp, #4]
   345ba:	f7ff f8ab 	bl	33714 <__udivsi3>
   345be:	0002      	movs	r2, r0
   345c0:	9b01      	ldr	r3, [sp, #4]
   345c2:	4683      	mov	fp, r0
   345c4:	435a      	muls	r2, r3
   345c6:	0028      	movs	r0, r5
   345c8:	0039      	movs	r1, r7
   345ca:	4691      	mov	r9, r2
   345cc:	f7ff f928 	bl	33820 <__aeabi_uidivmod>
   345d0:	0c35      	lsrs	r5, r6, #16
   345d2:	0409      	lsls	r1, r1, #16
   345d4:	430d      	orrs	r5, r1
   345d6:	45a9      	cmp	r9, r5
   345d8:	d90d      	bls.n	345f6 <__aeabi_ddiv+0x262>
   345da:	465b      	mov	r3, fp
   345dc:	4445      	add	r5, r8
   345de:	3b01      	subs	r3, #1
   345e0:	45a8      	cmp	r8, r5
   345e2:	d900      	bls.n	345e6 <__aeabi_ddiv+0x252>
   345e4:	e13a      	b.n	3485c <__aeabi_ddiv+0x4c8>
   345e6:	45a9      	cmp	r9, r5
   345e8:	d800      	bhi.n	345ec <__aeabi_ddiv+0x258>
   345ea:	e137      	b.n	3485c <__aeabi_ddiv+0x4c8>
   345ec:	2302      	movs	r3, #2
   345ee:	425b      	negs	r3, r3
   345f0:	469c      	mov	ip, r3
   345f2:	4445      	add	r5, r8
   345f4:	44e3      	add	fp, ip
   345f6:	464b      	mov	r3, r9
   345f8:	1aeb      	subs	r3, r5, r3
   345fa:	0039      	movs	r1, r7
   345fc:	0018      	movs	r0, r3
   345fe:	9304      	str	r3, [sp, #16]
   34600:	f7ff f888 	bl	33714 <__udivsi3>
   34604:	9b01      	ldr	r3, [sp, #4]
   34606:	0005      	movs	r5, r0
   34608:	4343      	muls	r3, r0
   3460a:	0039      	movs	r1, r7
   3460c:	9804      	ldr	r0, [sp, #16]
   3460e:	4699      	mov	r9, r3
   34610:	f7ff f906 	bl	33820 <__aeabi_uidivmod>
   34614:	0433      	lsls	r3, r6, #16
   34616:	0409      	lsls	r1, r1, #16
   34618:	0c1b      	lsrs	r3, r3, #16
   3461a:	430b      	orrs	r3, r1
   3461c:	4599      	cmp	r9, r3
   3461e:	d909      	bls.n	34634 <__aeabi_ddiv+0x2a0>
   34620:	4443      	add	r3, r8
   34622:	1e6a      	subs	r2, r5, #1
   34624:	4598      	cmp	r8, r3
   34626:	d900      	bls.n	3462a <__aeabi_ddiv+0x296>
   34628:	e11a      	b.n	34860 <__aeabi_ddiv+0x4cc>
   3462a:	4599      	cmp	r9, r3
   3462c:	d800      	bhi.n	34630 <__aeabi_ddiv+0x29c>
   3462e:	e117      	b.n	34860 <__aeabi_ddiv+0x4cc>
   34630:	3d02      	subs	r5, #2
   34632:	4443      	add	r3, r8
   34634:	464a      	mov	r2, r9
   34636:	1a9b      	subs	r3, r3, r2
   34638:	465a      	mov	r2, fp
   3463a:	0412      	lsls	r2, r2, #16
   3463c:	432a      	orrs	r2, r5
   3463e:	9903      	ldr	r1, [sp, #12]
   34640:	4693      	mov	fp, r2
   34642:	0c10      	lsrs	r0, r2, #16
   34644:	0c0a      	lsrs	r2, r1, #16
   34646:	4691      	mov	r9, r2
   34648:	0409      	lsls	r1, r1, #16
   3464a:	465a      	mov	r2, fp
   3464c:	0c09      	lsrs	r1, r1, #16
   3464e:	464e      	mov	r6, r9
   34650:	000d      	movs	r5, r1
   34652:	0412      	lsls	r2, r2, #16
   34654:	0c12      	lsrs	r2, r2, #16
   34656:	4345      	muls	r5, r0
   34658:	9105      	str	r1, [sp, #20]
   3465a:	4351      	muls	r1, r2
   3465c:	4372      	muls	r2, r6
   3465e:	4370      	muls	r0, r6
   34660:	1952      	adds	r2, r2, r5
   34662:	0c0e      	lsrs	r6, r1, #16
   34664:	18b2      	adds	r2, r6, r2
   34666:	4295      	cmp	r5, r2
   34668:	d903      	bls.n	34672 <__aeabi_ddiv+0x2de>
   3466a:	2580      	movs	r5, #128	; 0x80
   3466c:	026d      	lsls	r5, r5, #9
   3466e:	46ac      	mov	ip, r5
   34670:	4460      	add	r0, ip
   34672:	0c15      	lsrs	r5, r2, #16
   34674:	0409      	lsls	r1, r1, #16
   34676:	0412      	lsls	r2, r2, #16
   34678:	0c09      	lsrs	r1, r1, #16
   3467a:	1828      	adds	r0, r5, r0
   3467c:	1852      	adds	r2, r2, r1
   3467e:	4283      	cmp	r3, r0
   34680:	d200      	bcs.n	34684 <__aeabi_ddiv+0x2f0>
   34682:	e0ce      	b.n	34822 <__aeabi_ddiv+0x48e>
   34684:	d100      	bne.n	34688 <__aeabi_ddiv+0x2f4>
   34686:	e0c8      	b.n	3481a <__aeabi_ddiv+0x486>
   34688:	1a1d      	subs	r5, r3, r0
   3468a:	4653      	mov	r3, sl
   3468c:	1a9e      	subs	r6, r3, r2
   3468e:	45b2      	cmp	sl, r6
   34690:	4192      	sbcs	r2, r2
   34692:	4252      	negs	r2, r2
   34694:	1aab      	subs	r3, r5, r2
   34696:	469a      	mov	sl, r3
   34698:	4598      	cmp	r8, r3
   3469a:	d100      	bne.n	3469e <__aeabi_ddiv+0x30a>
   3469c:	e117      	b.n	348ce <__aeabi_ddiv+0x53a>
   3469e:	0039      	movs	r1, r7
   346a0:	0018      	movs	r0, r3
   346a2:	f7ff f837 	bl	33714 <__udivsi3>
   346a6:	9b01      	ldr	r3, [sp, #4]
   346a8:	0005      	movs	r5, r0
   346aa:	4343      	muls	r3, r0
   346ac:	0039      	movs	r1, r7
   346ae:	4650      	mov	r0, sl
   346b0:	9304      	str	r3, [sp, #16]
   346b2:	f7ff f8b5 	bl	33820 <__aeabi_uidivmod>
   346b6:	9804      	ldr	r0, [sp, #16]
   346b8:	040b      	lsls	r3, r1, #16
   346ba:	0c31      	lsrs	r1, r6, #16
   346bc:	4319      	orrs	r1, r3
   346be:	4288      	cmp	r0, r1
   346c0:	d909      	bls.n	346d6 <__aeabi_ddiv+0x342>
   346c2:	4441      	add	r1, r8
   346c4:	1e6b      	subs	r3, r5, #1
   346c6:	4588      	cmp	r8, r1
   346c8:	d900      	bls.n	346cc <__aeabi_ddiv+0x338>
   346ca:	e107      	b.n	348dc <__aeabi_ddiv+0x548>
   346cc:	4288      	cmp	r0, r1
   346ce:	d800      	bhi.n	346d2 <__aeabi_ddiv+0x33e>
   346d0:	e104      	b.n	348dc <__aeabi_ddiv+0x548>
   346d2:	3d02      	subs	r5, #2
   346d4:	4441      	add	r1, r8
   346d6:	9b04      	ldr	r3, [sp, #16]
   346d8:	1acb      	subs	r3, r1, r3
   346da:	0018      	movs	r0, r3
   346dc:	0039      	movs	r1, r7
   346de:	9304      	str	r3, [sp, #16]
   346e0:	f7ff f818 	bl	33714 <__udivsi3>
   346e4:	9b01      	ldr	r3, [sp, #4]
   346e6:	4682      	mov	sl, r0
   346e8:	4343      	muls	r3, r0
   346ea:	0039      	movs	r1, r7
   346ec:	9804      	ldr	r0, [sp, #16]
   346ee:	9301      	str	r3, [sp, #4]
   346f0:	f7ff f896 	bl	33820 <__aeabi_uidivmod>
   346f4:	9801      	ldr	r0, [sp, #4]
   346f6:	040b      	lsls	r3, r1, #16
   346f8:	0431      	lsls	r1, r6, #16
   346fa:	0c09      	lsrs	r1, r1, #16
   346fc:	4319      	orrs	r1, r3
   346fe:	4288      	cmp	r0, r1
   34700:	d90d      	bls.n	3471e <__aeabi_ddiv+0x38a>
   34702:	4653      	mov	r3, sl
   34704:	4441      	add	r1, r8
   34706:	3b01      	subs	r3, #1
   34708:	4588      	cmp	r8, r1
   3470a:	d900      	bls.n	3470e <__aeabi_ddiv+0x37a>
   3470c:	e0e8      	b.n	348e0 <__aeabi_ddiv+0x54c>
   3470e:	4288      	cmp	r0, r1
   34710:	d800      	bhi.n	34714 <__aeabi_ddiv+0x380>
   34712:	e0e5      	b.n	348e0 <__aeabi_ddiv+0x54c>
   34714:	2302      	movs	r3, #2
   34716:	425b      	negs	r3, r3
   34718:	469c      	mov	ip, r3
   3471a:	4441      	add	r1, r8
   3471c:	44e2      	add	sl, ip
   3471e:	9b01      	ldr	r3, [sp, #4]
   34720:	042d      	lsls	r5, r5, #16
   34722:	1ace      	subs	r6, r1, r3
   34724:	4651      	mov	r1, sl
   34726:	4329      	orrs	r1, r5
   34728:	9d05      	ldr	r5, [sp, #20]
   3472a:	464f      	mov	r7, r9
   3472c:	002a      	movs	r2, r5
   3472e:	040b      	lsls	r3, r1, #16
   34730:	0c08      	lsrs	r0, r1, #16
   34732:	0c1b      	lsrs	r3, r3, #16
   34734:	435a      	muls	r2, r3
   34736:	4345      	muls	r5, r0
   34738:	437b      	muls	r3, r7
   3473a:	4378      	muls	r0, r7
   3473c:	195b      	adds	r3, r3, r5
   3473e:	0c17      	lsrs	r7, r2, #16
   34740:	18fb      	adds	r3, r7, r3
   34742:	429d      	cmp	r5, r3
   34744:	d903      	bls.n	3474e <__aeabi_ddiv+0x3ba>
   34746:	2580      	movs	r5, #128	; 0x80
   34748:	026d      	lsls	r5, r5, #9
   3474a:	46ac      	mov	ip, r5
   3474c:	4460      	add	r0, ip
   3474e:	0c1d      	lsrs	r5, r3, #16
   34750:	0412      	lsls	r2, r2, #16
   34752:	041b      	lsls	r3, r3, #16
   34754:	0c12      	lsrs	r2, r2, #16
   34756:	1828      	adds	r0, r5, r0
   34758:	189b      	adds	r3, r3, r2
   3475a:	4286      	cmp	r6, r0
   3475c:	d200      	bcs.n	34760 <__aeabi_ddiv+0x3cc>
   3475e:	e093      	b.n	34888 <__aeabi_ddiv+0x4f4>
   34760:	d100      	bne.n	34764 <__aeabi_ddiv+0x3d0>
   34762:	e08e      	b.n	34882 <__aeabi_ddiv+0x4ee>
   34764:	2301      	movs	r3, #1
   34766:	4319      	orrs	r1, r3
   34768:	4ba0      	ldr	r3, [pc, #640]	; (349ec <__aeabi_ddiv+0x658>)
   3476a:	18e3      	adds	r3, r4, r3
   3476c:	2b00      	cmp	r3, #0
   3476e:	dc00      	bgt.n	34772 <__aeabi_ddiv+0x3de>
   34770:	e099      	b.n	348a6 <__aeabi_ddiv+0x512>
   34772:	074a      	lsls	r2, r1, #29
   34774:	d000      	beq.n	34778 <__aeabi_ddiv+0x3e4>
   34776:	e09e      	b.n	348b6 <__aeabi_ddiv+0x522>
   34778:	465a      	mov	r2, fp
   3477a:	01d2      	lsls	r2, r2, #7
   3477c:	d506      	bpl.n	3478c <__aeabi_ddiv+0x3f8>
   3477e:	465a      	mov	r2, fp
   34780:	4b9b      	ldr	r3, [pc, #620]	; (349f0 <__aeabi_ddiv+0x65c>)
   34782:	401a      	ands	r2, r3
   34784:	2380      	movs	r3, #128	; 0x80
   34786:	4693      	mov	fp, r2
   34788:	00db      	lsls	r3, r3, #3
   3478a:	18e3      	adds	r3, r4, r3
   3478c:	4a99      	ldr	r2, [pc, #612]	; (349f4 <__aeabi_ddiv+0x660>)
   3478e:	4293      	cmp	r3, r2
   34790:	dd68      	ble.n	34864 <__aeabi_ddiv+0x4d0>
   34792:	2301      	movs	r3, #1
   34794:	9a02      	ldr	r2, [sp, #8]
   34796:	4c98      	ldr	r4, [pc, #608]	; (349f8 <__aeabi_ddiv+0x664>)
   34798:	401a      	ands	r2, r3
   3479a:	2300      	movs	r3, #0
   3479c:	4694      	mov	ip, r2
   3479e:	4698      	mov	r8, r3
   347a0:	2200      	movs	r2, #0
   347a2:	e6c5      	b.n	34530 <__aeabi_ddiv+0x19c>
   347a4:	2280      	movs	r2, #128	; 0x80
   347a6:	464b      	mov	r3, r9
   347a8:	0312      	lsls	r2, r2, #12
   347aa:	4213      	tst	r3, r2
   347ac:	d00a      	beq.n	347c4 <__aeabi_ddiv+0x430>
   347ae:	465b      	mov	r3, fp
   347b0:	4213      	tst	r3, r2
   347b2:	d106      	bne.n	347c2 <__aeabi_ddiv+0x42e>
   347b4:	431a      	orrs	r2, r3
   347b6:	0312      	lsls	r2, r2, #12
   347b8:	0b12      	lsrs	r2, r2, #12
   347ba:	46ac      	mov	ip, r5
   347bc:	4688      	mov	r8, r1
   347be:	4c8e      	ldr	r4, [pc, #568]	; (349f8 <__aeabi_ddiv+0x664>)
   347c0:	e6b6      	b.n	34530 <__aeabi_ddiv+0x19c>
   347c2:	464b      	mov	r3, r9
   347c4:	431a      	orrs	r2, r3
   347c6:	0312      	lsls	r2, r2, #12
   347c8:	0b12      	lsrs	r2, r2, #12
   347ca:	46bc      	mov	ip, r7
   347cc:	4c8a      	ldr	r4, [pc, #552]	; (349f8 <__aeabi_ddiv+0x664>)
   347ce:	e6af      	b.n	34530 <__aeabi_ddiv+0x19c>
   347d0:	0003      	movs	r3, r0
   347d2:	465a      	mov	r2, fp
   347d4:	3b28      	subs	r3, #40	; 0x28
   347d6:	409a      	lsls	r2, r3
   347d8:	2300      	movs	r3, #0
   347da:	4691      	mov	r9, r2
   347dc:	4698      	mov	r8, r3
   347de:	e657      	b.n	34490 <__aeabi_ddiv+0xfc>
   347e0:	4658      	mov	r0, fp
   347e2:	f000 ff0d 	bl	35600 <__clzsi2>
   347e6:	3020      	adds	r0, #32
   347e8:	e640      	b.n	3446c <__aeabi_ddiv+0xd8>
   347ea:	0003      	movs	r3, r0
   347ec:	4652      	mov	r2, sl
   347ee:	3b28      	subs	r3, #40	; 0x28
   347f0:	409a      	lsls	r2, r3
   347f2:	2100      	movs	r1, #0
   347f4:	4693      	mov	fp, r2
   347f6:	e677      	b.n	344e8 <__aeabi_ddiv+0x154>
   347f8:	f000 ff02 	bl	35600 <__clzsi2>
   347fc:	3020      	adds	r0, #32
   347fe:	e65f      	b.n	344c0 <__aeabi_ddiv+0x12c>
   34800:	4588      	cmp	r8, r1
   34802:	d200      	bcs.n	34806 <__aeabi_ddiv+0x472>
   34804:	e6c7      	b.n	34596 <__aeabi_ddiv+0x202>
   34806:	464b      	mov	r3, r9
   34808:	07de      	lsls	r6, r3, #31
   3480a:	085d      	lsrs	r5, r3, #1
   3480c:	4643      	mov	r3, r8
   3480e:	085b      	lsrs	r3, r3, #1
   34810:	431e      	orrs	r6, r3
   34812:	4643      	mov	r3, r8
   34814:	07db      	lsls	r3, r3, #31
   34816:	469a      	mov	sl, r3
   34818:	e6c2      	b.n	345a0 <__aeabi_ddiv+0x20c>
   3481a:	2500      	movs	r5, #0
   3481c:	4592      	cmp	sl, r2
   3481e:	d300      	bcc.n	34822 <__aeabi_ddiv+0x48e>
   34820:	e733      	b.n	3468a <__aeabi_ddiv+0x2f6>
   34822:	9e03      	ldr	r6, [sp, #12]
   34824:	4659      	mov	r1, fp
   34826:	46b4      	mov	ip, r6
   34828:	44e2      	add	sl, ip
   3482a:	45b2      	cmp	sl, r6
   3482c:	41ad      	sbcs	r5, r5
   3482e:	426d      	negs	r5, r5
   34830:	4445      	add	r5, r8
   34832:	18eb      	adds	r3, r5, r3
   34834:	3901      	subs	r1, #1
   34836:	4598      	cmp	r8, r3
   34838:	d207      	bcs.n	3484a <__aeabi_ddiv+0x4b6>
   3483a:	4298      	cmp	r0, r3
   3483c:	d900      	bls.n	34840 <__aeabi_ddiv+0x4ac>
   3483e:	e07f      	b.n	34940 <__aeabi_ddiv+0x5ac>
   34840:	d100      	bne.n	34844 <__aeabi_ddiv+0x4b0>
   34842:	e0bc      	b.n	349be <__aeabi_ddiv+0x62a>
   34844:	1a1d      	subs	r5, r3, r0
   34846:	468b      	mov	fp, r1
   34848:	e71f      	b.n	3468a <__aeabi_ddiv+0x2f6>
   3484a:	4598      	cmp	r8, r3
   3484c:	d1fa      	bne.n	34844 <__aeabi_ddiv+0x4b0>
   3484e:	9d03      	ldr	r5, [sp, #12]
   34850:	4555      	cmp	r5, sl
   34852:	d9f2      	bls.n	3483a <__aeabi_ddiv+0x4a6>
   34854:	4643      	mov	r3, r8
   34856:	468b      	mov	fp, r1
   34858:	1a1d      	subs	r5, r3, r0
   3485a:	e716      	b.n	3468a <__aeabi_ddiv+0x2f6>
   3485c:	469b      	mov	fp, r3
   3485e:	e6ca      	b.n	345f6 <__aeabi_ddiv+0x262>
   34860:	0015      	movs	r5, r2
   34862:	e6e7      	b.n	34634 <__aeabi_ddiv+0x2a0>
   34864:	465a      	mov	r2, fp
   34866:	08c9      	lsrs	r1, r1, #3
   34868:	0752      	lsls	r2, r2, #29
   3486a:	430a      	orrs	r2, r1
   3486c:	055b      	lsls	r3, r3, #21
   3486e:	4690      	mov	r8, r2
   34870:	0d5c      	lsrs	r4, r3, #21
   34872:	465a      	mov	r2, fp
   34874:	2301      	movs	r3, #1
   34876:	9902      	ldr	r1, [sp, #8]
   34878:	0252      	lsls	r2, r2, #9
   3487a:	4019      	ands	r1, r3
   3487c:	0b12      	lsrs	r2, r2, #12
   3487e:	468c      	mov	ip, r1
   34880:	e656      	b.n	34530 <__aeabi_ddiv+0x19c>
   34882:	2b00      	cmp	r3, #0
   34884:	d100      	bne.n	34888 <__aeabi_ddiv+0x4f4>
   34886:	e76f      	b.n	34768 <__aeabi_ddiv+0x3d4>
   34888:	4446      	add	r6, r8
   3488a:	1e4a      	subs	r2, r1, #1
   3488c:	45b0      	cmp	r8, r6
   3488e:	d929      	bls.n	348e4 <__aeabi_ddiv+0x550>
   34890:	0011      	movs	r1, r2
   34892:	4286      	cmp	r6, r0
   34894:	d000      	beq.n	34898 <__aeabi_ddiv+0x504>
   34896:	e765      	b.n	34764 <__aeabi_ddiv+0x3d0>
   34898:	9a03      	ldr	r2, [sp, #12]
   3489a:	4293      	cmp	r3, r2
   3489c:	d000      	beq.n	348a0 <__aeabi_ddiv+0x50c>
   3489e:	e761      	b.n	34764 <__aeabi_ddiv+0x3d0>
   348a0:	e762      	b.n	34768 <__aeabi_ddiv+0x3d4>
   348a2:	2101      	movs	r1, #1
   348a4:	4249      	negs	r1, r1
   348a6:	2001      	movs	r0, #1
   348a8:	1ac2      	subs	r2, r0, r3
   348aa:	2a38      	cmp	r2, #56	; 0x38
   348ac:	dd21      	ble.n	348f2 <__aeabi_ddiv+0x55e>
   348ae:	9b02      	ldr	r3, [sp, #8]
   348b0:	4003      	ands	r3, r0
   348b2:	469c      	mov	ip, r3
   348b4:	e638      	b.n	34528 <__aeabi_ddiv+0x194>
   348b6:	220f      	movs	r2, #15
   348b8:	400a      	ands	r2, r1
   348ba:	2a04      	cmp	r2, #4
   348bc:	d100      	bne.n	348c0 <__aeabi_ddiv+0x52c>
   348be:	e75b      	b.n	34778 <__aeabi_ddiv+0x3e4>
   348c0:	000a      	movs	r2, r1
   348c2:	1d11      	adds	r1, r2, #4
   348c4:	4291      	cmp	r1, r2
   348c6:	4192      	sbcs	r2, r2
   348c8:	4252      	negs	r2, r2
   348ca:	4493      	add	fp, r2
   348cc:	e754      	b.n	34778 <__aeabi_ddiv+0x3e4>
   348ce:	4b47      	ldr	r3, [pc, #284]	; (349ec <__aeabi_ddiv+0x658>)
   348d0:	18e3      	adds	r3, r4, r3
   348d2:	2b00      	cmp	r3, #0
   348d4:	dde5      	ble.n	348a2 <__aeabi_ddiv+0x50e>
   348d6:	2201      	movs	r2, #1
   348d8:	4252      	negs	r2, r2
   348da:	e7f2      	b.n	348c2 <__aeabi_ddiv+0x52e>
   348dc:	001d      	movs	r5, r3
   348de:	e6fa      	b.n	346d6 <__aeabi_ddiv+0x342>
   348e0:	469a      	mov	sl, r3
   348e2:	e71c      	b.n	3471e <__aeabi_ddiv+0x38a>
   348e4:	42b0      	cmp	r0, r6
   348e6:	d839      	bhi.n	3495c <__aeabi_ddiv+0x5c8>
   348e8:	d06e      	beq.n	349c8 <__aeabi_ddiv+0x634>
   348ea:	0011      	movs	r1, r2
   348ec:	e73a      	b.n	34764 <__aeabi_ddiv+0x3d0>
   348ee:	9302      	str	r3, [sp, #8]
   348f0:	e73a      	b.n	34768 <__aeabi_ddiv+0x3d4>
   348f2:	2a1f      	cmp	r2, #31
   348f4:	dc3c      	bgt.n	34970 <__aeabi_ddiv+0x5dc>
   348f6:	2320      	movs	r3, #32
   348f8:	1a9b      	subs	r3, r3, r2
   348fa:	000c      	movs	r4, r1
   348fc:	4658      	mov	r0, fp
   348fe:	4099      	lsls	r1, r3
   34900:	4098      	lsls	r0, r3
   34902:	1e4b      	subs	r3, r1, #1
   34904:	4199      	sbcs	r1, r3
   34906:	465b      	mov	r3, fp
   34908:	40d4      	lsrs	r4, r2
   3490a:	40d3      	lsrs	r3, r2
   3490c:	4320      	orrs	r0, r4
   3490e:	4308      	orrs	r0, r1
   34910:	001a      	movs	r2, r3
   34912:	0743      	lsls	r3, r0, #29
   34914:	d009      	beq.n	3492a <__aeabi_ddiv+0x596>
   34916:	230f      	movs	r3, #15
   34918:	4003      	ands	r3, r0
   3491a:	2b04      	cmp	r3, #4
   3491c:	d005      	beq.n	3492a <__aeabi_ddiv+0x596>
   3491e:	0001      	movs	r1, r0
   34920:	1d08      	adds	r0, r1, #4
   34922:	4288      	cmp	r0, r1
   34924:	419b      	sbcs	r3, r3
   34926:	425b      	negs	r3, r3
   34928:	18d2      	adds	r2, r2, r3
   3492a:	0213      	lsls	r3, r2, #8
   3492c:	d53a      	bpl.n	349a4 <__aeabi_ddiv+0x610>
   3492e:	2301      	movs	r3, #1
   34930:	9a02      	ldr	r2, [sp, #8]
   34932:	2401      	movs	r4, #1
   34934:	401a      	ands	r2, r3
   34936:	2300      	movs	r3, #0
   34938:	4694      	mov	ip, r2
   3493a:	4698      	mov	r8, r3
   3493c:	2200      	movs	r2, #0
   3493e:	e5f7      	b.n	34530 <__aeabi_ddiv+0x19c>
   34940:	2102      	movs	r1, #2
   34942:	4249      	negs	r1, r1
   34944:	468c      	mov	ip, r1
   34946:	9d03      	ldr	r5, [sp, #12]
   34948:	44e3      	add	fp, ip
   3494a:	46ac      	mov	ip, r5
   3494c:	44e2      	add	sl, ip
   3494e:	45aa      	cmp	sl, r5
   34950:	41ad      	sbcs	r5, r5
   34952:	426d      	negs	r5, r5
   34954:	4445      	add	r5, r8
   34956:	18ed      	adds	r5, r5, r3
   34958:	1a2d      	subs	r5, r5, r0
   3495a:	e696      	b.n	3468a <__aeabi_ddiv+0x2f6>
   3495c:	1e8a      	subs	r2, r1, #2
   3495e:	9903      	ldr	r1, [sp, #12]
   34960:	004d      	lsls	r5, r1, #1
   34962:	428d      	cmp	r5, r1
   34964:	4189      	sbcs	r1, r1
   34966:	4249      	negs	r1, r1
   34968:	4441      	add	r1, r8
   3496a:	1876      	adds	r6, r6, r1
   3496c:	9503      	str	r5, [sp, #12]
   3496e:	e78f      	b.n	34890 <__aeabi_ddiv+0x4fc>
   34970:	201f      	movs	r0, #31
   34972:	4240      	negs	r0, r0
   34974:	1ac3      	subs	r3, r0, r3
   34976:	4658      	mov	r0, fp
   34978:	40d8      	lsrs	r0, r3
   3497a:	0003      	movs	r3, r0
   3497c:	2a20      	cmp	r2, #32
   3497e:	d028      	beq.n	349d2 <__aeabi_ddiv+0x63e>
   34980:	2040      	movs	r0, #64	; 0x40
   34982:	465d      	mov	r5, fp
   34984:	1a82      	subs	r2, r0, r2
   34986:	4095      	lsls	r5, r2
   34988:	4329      	orrs	r1, r5
   3498a:	1e4a      	subs	r2, r1, #1
   3498c:	4191      	sbcs	r1, r2
   3498e:	4319      	orrs	r1, r3
   34990:	2307      	movs	r3, #7
   34992:	2200      	movs	r2, #0
   34994:	400b      	ands	r3, r1
   34996:	d009      	beq.n	349ac <__aeabi_ddiv+0x618>
   34998:	230f      	movs	r3, #15
   3499a:	2200      	movs	r2, #0
   3499c:	400b      	ands	r3, r1
   3499e:	0008      	movs	r0, r1
   349a0:	2b04      	cmp	r3, #4
   349a2:	d1bd      	bne.n	34920 <__aeabi_ddiv+0x58c>
   349a4:	0001      	movs	r1, r0
   349a6:	0753      	lsls	r3, r2, #29
   349a8:	0252      	lsls	r2, r2, #9
   349aa:	0b12      	lsrs	r2, r2, #12
   349ac:	08c9      	lsrs	r1, r1, #3
   349ae:	4319      	orrs	r1, r3
   349b0:	2301      	movs	r3, #1
   349b2:	4688      	mov	r8, r1
   349b4:	9902      	ldr	r1, [sp, #8]
   349b6:	2400      	movs	r4, #0
   349b8:	4019      	ands	r1, r3
   349ba:	468c      	mov	ip, r1
   349bc:	e5b8      	b.n	34530 <__aeabi_ddiv+0x19c>
   349be:	4552      	cmp	r2, sl
   349c0:	d8be      	bhi.n	34940 <__aeabi_ddiv+0x5ac>
   349c2:	468b      	mov	fp, r1
   349c4:	2500      	movs	r5, #0
   349c6:	e660      	b.n	3468a <__aeabi_ddiv+0x2f6>
   349c8:	9d03      	ldr	r5, [sp, #12]
   349ca:	429d      	cmp	r5, r3
   349cc:	d3c6      	bcc.n	3495c <__aeabi_ddiv+0x5c8>
   349ce:	0011      	movs	r1, r2
   349d0:	e762      	b.n	34898 <__aeabi_ddiv+0x504>
   349d2:	2500      	movs	r5, #0
   349d4:	e7d8      	b.n	34988 <__aeabi_ddiv+0x5f4>
   349d6:	2280      	movs	r2, #128	; 0x80
   349d8:	465b      	mov	r3, fp
   349da:	0312      	lsls	r2, r2, #12
   349dc:	431a      	orrs	r2, r3
   349de:	9b01      	ldr	r3, [sp, #4]
   349e0:	0312      	lsls	r2, r2, #12
   349e2:	0b12      	lsrs	r2, r2, #12
   349e4:	469c      	mov	ip, r3
   349e6:	4688      	mov	r8, r1
   349e8:	4c03      	ldr	r4, [pc, #12]	; (349f8 <__aeabi_ddiv+0x664>)
   349ea:	e5a1      	b.n	34530 <__aeabi_ddiv+0x19c>
   349ec:	000003ff 	.word	0x000003ff
   349f0:	feffffff 	.word	0xfeffffff
   349f4:	000007fe 	.word	0x000007fe
   349f8:	000007ff 	.word	0x000007ff

000349fc <__aeabi_dmul>:
   349fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   349fe:	4657      	mov	r7, sl
   34a00:	4645      	mov	r5, r8
   34a02:	46de      	mov	lr, fp
   34a04:	464e      	mov	r6, r9
   34a06:	b5e0      	push	{r5, r6, r7, lr}
   34a08:	030c      	lsls	r4, r1, #12
   34a0a:	4698      	mov	r8, r3
   34a0c:	004e      	lsls	r6, r1, #1
   34a0e:	0b23      	lsrs	r3, r4, #12
   34a10:	b087      	sub	sp, #28
   34a12:	0007      	movs	r7, r0
   34a14:	4692      	mov	sl, r2
   34a16:	469b      	mov	fp, r3
   34a18:	0d76      	lsrs	r6, r6, #21
   34a1a:	0fcd      	lsrs	r5, r1, #31
   34a1c:	2e00      	cmp	r6, #0
   34a1e:	d06b      	beq.n	34af8 <__aeabi_dmul+0xfc>
   34a20:	4b6d      	ldr	r3, [pc, #436]	; (34bd8 <__aeabi_dmul+0x1dc>)
   34a22:	429e      	cmp	r6, r3
   34a24:	d035      	beq.n	34a92 <__aeabi_dmul+0x96>
   34a26:	2480      	movs	r4, #128	; 0x80
   34a28:	465b      	mov	r3, fp
   34a2a:	0f42      	lsrs	r2, r0, #29
   34a2c:	0424      	lsls	r4, r4, #16
   34a2e:	00db      	lsls	r3, r3, #3
   34a30:	4314      	orrs	r4, r2
   34a32:	431c      	orrs	r4, r3
   34a34:	00c3      	lsls	r3, r0, #3
   34a36:	4699      	mov	r9, r3
   34a38:	4b68      	ldr	r3, [pc, #416]	; (34bdc <__aeabi_dmul+0x1e0>)
   34a3a:	46a3      	mov	fp, r4
   34a3c:	469c      	mov	ip, r3
   34a3e:	2300      	movs	r3, #0
   34a40:	2700      	movs	r7, #0
   34a42:	4466      	add	r6, ip
   34a44:	9302      	str	r3, [sp, #8]
   34a46:	4643      	mov	r3, r8
   34a48:	031c      	lsls	r4, r3, #12
   34a4a:	005a      	lsls	r2, r3, #1
   34a4c:	0fdb      	lsrs	r3, r3, #31
   34a4e:	4650      	mov	r0, sl
   34a50:	0b24      	lsrs	r4, r4, #12
   34a52:	0d52      	lsrs	r2, r2, #21
   34a54:	4698      	mov	r8, r3
   34a56:	d100      	bne.n	34a5a <__aeabi_dmul+0x5e>
   34a58:	e076      	b.n	34b48 <__aeabi_dmul+0x14c>
   34a5a:	4b5f      	ldr	r3, [pc, #380]	; (34bd8 <__aeabi_dmul+0x1dc>)
   34a5c:	429a      	cmp	r2, r3
   34a5e:	d06d      	beq.n	34b3c <__aeabi_dmul+0x140>
   34a60:	2380      	movs	r3, #128	; 0x80
   34a62:	0f41      	lsrs	r1, r0, #29
   34a64:	041b      	lsls	r3, r3, #16
   34a66:	430b      	orrs	r3, r1
   34a68:	495c      	ldr	r1, [pc, #368]	; (34bdc <__aeabi_dmul+0x1e0>)
   34a6a:	00e4      	lsls	r4, r4, #3
   34a6c:	468c      	mov	ip, r1
   34a6e:	431c      	orrs	r4, r3
   34a70:	00c3      	lsls	r3, r0, #3
   34a72:	2000      	movs	r0, #0
   34a74:	4462      	add	r2, ip
   34a76:	4641      	mov	r1, r8
   34a78:	18b6      	adds	r6, r6, r2
   34a7a:	4069      	eors	r1, r5
   34a7c:	1c72      	adds	r2, r6, #1
   34a7e:	9101      	str	r1, [sp, #4]
   34a80:	4694      	mov	ip, r2
   34a82:	4307      	orrs	r7, r0
   34a84:	2f0f      	cmp	r7, #15
   34a86:	d900      	bls.n	34a8a <__aeabi_dmul+0x8e>
   34a88:	e0b0      	b.n	34bec <__aeabi_dmul+0x1f0>
   34a8a:	4a55      	ldr	r2, [pc, #340]	; (34be0 <__aeabi_dmul+0x1e4>)
   34a8c:	00bf      	lsls	r7, r7, #2
   34a8e:	59d2      	ldr	r2, [r2, r7]
   34a90:	4697      	mov	pc, r2
   34a92:	465b      	mov	r3, fp
   34a94:	4303      	orrs	r3, r0
   34a96:	4699      	mov	r9, r3
   34a98:	d000      	beq.n	34a9c <__aeabi_dmul+0xa0>
   34a9a:	e087      	b.n	34bac <__aeabi_dmul+0x1b0>
   34a9c:	2300      	movs	r3, #0
   34a9e:	469b      	mov	fp, r3
   34aa0:	3302      	adds	r3, #2
   34aa2:	2708      	movs	r7, #8
   34aa4:	9302      	str	r3, [sp, #8]
   34aa6:	e7ce      	b.n	34a46 <__aeabi_dmul+0x4a>
   34aa8:	4642      	mov	r2, r8
   34aaa:	9201      	str	r2, [sp, #4]
   34aac:	2802      	cmp	r0, #2
   34aae:	d067      	beq.n	34b80 <__aeabi_dmul+0x184>
   34ab0:	2803      	cmp	r0, #3
   34ab2:	d100      	bne.n	34ab6 <__aeabi_dmul+0xba>
   34ab4:	e20e      	b.n	34ed4 <__aeabi_dmul+0x4d8>
   34ab6:	2801      	cmp	r0, #1
   34ab8:	d000      	beq.n	34abc <__aeabi_dmul+0xc0>
   34aba:	e162      	b.n	34d82 <__aeabi_dmul+0x386>
   34abc:	2300      	movs	r3, #0
   34abe:	2400      	movs	r4, #0
   34ac0:	2200      	movs	r2, #0
   34ac2:	4699      	mov	r9, r3
   34ac4:	9901      	ldr	r1, [sp, #4]
   34ac6:	4001      	ands	r1, r0
   34ac8:	b2cd      	uxtb	r5, r1
   34aca:	2100      	movs	r1, #0
   34acc:	0312      	lsls	r2, r2, #12
   34ace:	0d0b      	lsrs	r3, r1, #20
   34ad0:	0b12      	lsrs	r2, r2, #12
   34ad2:	051b      	lsls	r3, r3, #20
   34ad4:	4313      	orrs	r3, r2
   34ad6:	4a43      	ldr	r2, [pc, #268]	; (34be4 <__aeabi_dmul+0x1e8>)
   34ad8:	0524      	lsls	r4, r4, #20
   34ada:	4013      	ands	r3, r2
   34adc:	431c      	orrs	r4, r3
   34ade:	0064      	lsls	r4, r4, #1
   34ae0:	07ed      	lsls	r5, r5, #31
   34ae2:	0864      	lsrs	r4, r4, #1
   34ae4:	432c      	orrs	r4, r5
   34ae6:	4648      	mov	r0, r9
   34ae8:	0021      	movs	r1, r4
   34aea:	b007      	add	sp, #28
   34aec:	bc3c      	pop	{r2, r3, r4, r5}
   34aee:	4690      	mov	r8, r2
   34af0:	4699      	mov	r9, r3
   34af2:	46a2      	mov	sl, r4
   34af4:	46ab      	mov	fp, r5
   34af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34af8:	4303      	orrs	r3, r0
   34afa:	4699      	mov	r9, r3
   34afc:	d04f      	beq.n	34b9e <__aeabi_dmul+0x1a2>
   34afe:	465b      	mov	r3, fp
   34b00:	2b00      	cmp	r3, #0
   34b02:	d100      	bne.n	34b06 <__aeabi_dmul+0x10a>
   34b04:	e189      	b.n	34e1a <__aeabi_dmul+0x41e>
   34b06:	4658      	mov	r0, fp
   34b08:	f000 fd7a 	bl	35600 <__clzsi2>
   34b0c:	0003      	movs	r3, r0
   34b0e:	3b0b      	subs	r3, #11
   34b10:	2b1c      	cmp	r3, #28
   34b12:	dd00      	ble.n	34b16 <__aeabi_dmul+0x11a>
   34b14:	e17a      	b.n	34e0c <__aeabi_dmul+0x410>
   34b16:	221d      	movs	r2, #29
   34b18:	1ad3      	subs	r3, r2, r3
   34b1a:	003a      	movs	r2, r7
   34b1c:	0001      	movs	r1, r0
   34b1e:	465c      	mov	r4, fp
   34b20:	40da      	lsrs	r2, r3
   34b22:	3908      	subs	r1, #8
   34b24:	408c      	lsls	r4, r1
   34b26:	0013      	movs	r3, r2
   34b28:	408f      	lsls	r7, r1
   34b2a:	4323      	orrs	r3, r4
   34b2c:	469b      	mov	fp, r3
   34b2e:	46b9      	mov	r9, r7
   34b30:	2300      	movs	r3, #0
   34b32:	4e2d      	ldr	r6, [pc, #180]	; (34be8 <__aeabi_dmul+0x1ec>)
   34b34:	2700      	movs	r7, #0
   34b36:	1a36      	subs	r6, r6, r0
   34b38:	9302      	str	r3, [sp, #8]
   34b3a:	e784      	b.n	34a46 <__aeabi_dmul+0x4a>
   34b3c:	4653      	mov	r3, sl
   34b3e:	4323      	orrs	r3, r4
   34b40:	d12a      	bne.n	34b98 <__aeabi_dmul+0x19c>
   34b42:	2400      	movs	r4, #0
   34b44:	2002      	movs	r0, #2
   34b46:	e796      	b.n	34a76 <__aeabi_dmul+0x7a>
   34b48:	4653      	mov	r3, sl
   34b4a:	4323      	orrs	r3, r4
   34b4c:	d020      	beq.n	34b90 <__aeabi_dmul+0x194>
   34b4e:	2c00      	cmp	r4, #0
   34b50:	d100      	bne.n	34b54 <__aeabi_dmul+0x158>
   34b52:	e157      	b.n	34e04 <__aeabi_dmul+0x408>
   34b54:	0020      	movs	r0, r4
   34b56:	f000 fd53 	bl	35600 <__clzsi2>
   34b5a:	0003      	movs	r3, r0
   34b5c:	3b0b      	subs	r3, #11
   34b5e:	2b1c      	cmp	r3, #28
   34b60:	dd00      	ble.n	34b64 <__aeabi_dmul+0x168>
   34b62:	e149      	b.n	34df8 <__aeabi_dmul+0x3fc>
   34b64:	211d      	movs	r1, #29
   34b66:	1acb      	subs	r3, r1, r3
   34b68:	4651      	mov	r1, sl
   34b6a:	0002      	movs	r2, r0
   34b6c:	40d9      	lsrs	r1, r3
   34b6e:	4653      	mov	r3, sl
   34b70:	3a08      	subs	r2, #8
   34b72:	4094      	lsls	r4, r2
   34b74:	4093      	lsls	r3, r2
   34b76:	430c      	orrs	r4, r1
   34b78:	4a1b      	ldr	r2, [pc, #108]	; (34be8 <__aeabi_dmul+0x1ec>)
   34b7a:	1a12      	subs	r2, r2, r0
   34b7c:	2000      	movs	r0, #0
   34b7e:	e77a      	b.n	34a76 <__aeabi_dmul+0x7a>
   34b80:	2501      	movs	r5, #1
   34b82:	9b01      	ldr	r3, [sp, #4]
   34b84:	4c14      	ldr	r4, [pc, #80]	; (34bd8 <__aeabi_dmul+0x1dc>)
   34b86:	401d      	ands	r5, r3
   34b88:	2300      	movs	r3, #0
   34b8a:	2200      	movs	r2, #0
   34b8c:	4699      	mov	r9, r3
   34b8e:	e79c      	b.n	34aca <__aeabi_dmul+0xce>
   34b90:	2400      	movs	r4, #0
   34b92:	2200      	movs	r2, #0
   34b94:	2001      	movs	r0, #1
   34b96:	e76e      	b.n	34a76 <__aeabi_dmul+0x7a>
   34b98:	4653      	mov	r3, sl
   34b9a:	2003      	movs	r0, #3
   34b9c:	e76b      	b.n	34a76 <__aeabi_dmul+0x7a>
   34b9e:	2300      	movs	r3, #0
   34ba0:	469b      	mov	fp, r3
   34ba2:	3301      	adds	r3, #1
   34ba4:	2704      	movs	r7, #4
   34ba6:	2600      	movs	r6, #0
   34ba8:	9302      	str	r3, [sp, #8]
   34baa:	e74c      	b.n	34a46 <__aeabi_dmul+0x4a>
   34bac:	2303      	movs	r3, #3
   34bae:	4681      	mov	r9, r0
   34bb0:	270c      	movs	r7, #12
   34bb2:	9302      	str	r3, [sp, #8]
   34bb4:	e747      	b.n	34a46 <__aeabi_dmul+0x4a>
   34bb6:	2280      	movs	r2, #128	; 0x80
   34bb8:	2300      	movs	r3, #0
   34bba:	2500      	movs	r5, #0
   34bbc:	0312      	lsls	r2, r2, #12
   34bbe:	4699      	mov	r9, r3
   34bc0:	4c05      	ldr	r4, [pc, #20]	; (34bd8 <__aeabi_dmul+0x1dc>)
   34bc2:	e782      	b.n	34aca <__aeabi_dmul+0xce>
   34bc4:	465c      	mov	r4, fp
   34bc6:	464b      	mov	r3, r9
   34bc8:	9802      	ldr	r0, [sp, #8]
   34bca:	e76f      	b.n	34aac <__aeabi_dmul+0xb0>
   34bcc:	465c      	mov	r4, fp
   34bce:	464b      	mov	r3, r9
   34bd0:	9501      	str	r5, [sp, #4]
   34bd2:	9802      	ldr	r0, [sp, #8]
   34bd4:	e76a      	b.n	34aac <__aeabi_dmul+0xb0>
   34bd6:	46c0      	nop			; (mov r8, r8)
   34bd8:	000007ff 	.word	0x000007ff
   34bdc:	fffffc01 	.word	0xfffffc01
   34be0:	0003b1f0 	.word	0x0003b1f0
   34be4:	800fffff 	.word	0x800fffff
   34be8:	fffffc0d 	.word	0xfffffc0d
   34bec:	464a      	mov	r2, r9
   34bee:	4649      	mov	r1, r9
   34bf0:	0c17      	lsrs	r7, r2, #16
   34bf2:	0c1a      	lsrs	r2, r3, #16
   34bf4:	041b      	lsls	r3, r3, #16
   34bf6:	0c1b      	lsrs	r3, r3, #16
   34bf8:	0408      	lsls	r0, r1, #16
   34bfa:	0019      	movs	r1, r3
   34bfc:	0c00      	lsrs	r0, r0, #16
   34bfe:	4341      	muls	r1, r0
   34c00:	0015      	movs	r5, r2
   34c02:	4688      	mov	r8, r1
   34c04:	0019      	movs	r1, r3
   34c06:	437d      	muls	r5, r7
   34c08:	4379      	muls	r1, r7
   34c0a:	9503      	str	r5, [sp, #12]
   34c0c:	4689      	mov	r9, r1
   34c0e:	0029      	movs	r1, r5
   34c10:	0015      	movs	r5, r2
   34c12:	4345      	muls	r5, r0
   34c14:	444d      	add	r5, r9
   34c16:	9502      	str	r5, [sp, #8]
   34c18:	4645      	mov	r5, r8
   34c1a:	0c2d      	lsrs	r5, r5, #16
   34c1c:	46aa      	mov	sl, r5
   34c1e:	9d02      	ldr	r5, [sp, #8]
   34c20:	4455      	add	r5, sl
   34c22:	45a9      	cmp	r9, r5
   34c24:	d906      	bls.n	34c34 <__aeabi_dmul+0x238>
   34c26:	468a      	mov	sl, r1
   34c28:	2180      	movs	r1, #128	; 0x80
   34c2a:	0249      	lsls	r1, r1, #9
   34c2c:	4689      	mov	r9, r1
   34c2e:	44ca      	add	sl, r9
   34c30:	4651      	mov	r1, sl
   34c32:	9103      	str	r1, [sp, #12]
   34c34:	0c29      	lsrs	r1, r5, #16
   34c36:	9104      	str	r1, [sp, #16]
   34c38:	4641      	mov	r1, r8
   34c3a:	0409      	lsls	r1, r1, #16
   34c3c:	042d      	lsls	r5, r5, #16
   34c3e:	0c09      	lsrs	r1, r1, #16
   34c40:	4688      	mov	r8, r1
   34c42:	0029      	movs	r1, r5
   34c44:	0c25      	lsrs	r5, r4, #16
   34c46:	0424      	lsls	r4, r4, #16
   34c48:	4441      	add	r1, r8
   34c4a:	0c24      	lsrs	r4, r4, #16
   34c4c:	9105      	str	r1, [sp, #20]
   34c4e:	0021      	movs	r1, r4
   34c50:	4341      	muls	r1, r0
   34c52:	4688      	mov	r8, r1
   34c54:	0021      	movs	r1, r4
   34c56:	4379      	muls	r1, r7
   34c58:	468a      	mov	sl, r1
   34c5a:	4368      	muls	r0, r5
   34c5c:	4641      	mov	r1, r8
   34c5e:	4450      	add	r0, sl
   34c60:	4681      	mov	r9, r0
   34c62:	0c08      	lsrs	r0, r1, #16
   34c64:	4448      	add	r0, r9
   34c66:	436f      	muls	r7, r5
   34c68:	4582      	cmp	sl, r0
   34c6a:	d903      	bls.n	34c74 <__aeabi_dmul+0x278>
   34c6c:	2180      	movs	r1, #128	; 0x80
   34c6e:	0249      	lsls	r1, r1, #9
   34c70:	4689      	mov	r9, r1
   34c72:	444f      	add	r7, r9
   34c74:	0c01      	lsrs	r1, r0, #16
   34c76:	4689      	mov	r9, r1
   34c78:	0039      	movs	r1, r7
   34c7a:	4449      	add	r1, r9
   34c7c:	9102      	str	r1, [sp, #8]
   34c7e:	4641      	mov	r1, r8
   34c80:	040f      	lsls	r7, r1, #16
   34c82:	9904      	ldr	r1, [sp, #16]
   34c84:	0c3f      	lsrs	r7, r7, #16
   34c86:	4688      	mov	r8, r1
   34c88:	0400      	lsls	r0, r0, #16
   34c8a:	19c0      	adds	r0, r0, r7
   34c8c:	4480      	add	r8, r0
   34c8e:	4641      	mov	r1, r8
   34c90:	9104      	str	r1, [sp, #16]
   34c92:	4659      	mov	r1, fp
   34c94:	0c0f      	lsrs	r7, r1, #16
   34c96:	0409      	lsls	r1, r1, #16
   34c98:	0c09      	lsrs	r1, r1, #16
   34c9a:	4688      	mov	r8, r1
   34c9c:	4359      	muls	r1, r3
   34c9e:	468a      	mov	sl, r1
   34ca0:	0039      	movs	r1, r7
   34ca2:	4351      	muls	r1, r2
   34ca4:	4689      	mov	r9, r1
   34ca6:	4641      	mov	r1, r8
   34ca8:	434a      	muls	r2, r1
   34caa:	4651      	mov	r1, sl
   34cac:	0c09      	lsrs	r1, r1, #16
   34cae:	468b      	mov	fp, r1
   34cb0:	437b      	muls	r3, r7
   34cb2:	18d2      	adds	r2, r2, r3
   34cb4:	445a      	add	r2, fp
   34cb6:	4293      	cmp	r3, r2
   34cb8:	d903      	bls.n	34cc2 <__aeabi_dmul+0x2c6>
   34cba:	2380      	movs	r3, #128	; 0x80
   34cbc:	025b      	lsls	r3, r3, #9
   34cbe:	469b      	mov	fp, r3
   34cc0:	44d9      	add	r9, fp
   34cc2:	4651      	mov	r1, sl
   34cc4:	0409      	lsls	r1, r1, #16
   34cc6:	0c09      	lsrs	r1, r1, #16
   34cc8:	468a      	mov	sl, r1
   34cca:	4641      	mov	r1, r8
   34ccc:	4361      	muls	r1, r4
   34cce:	437c      	muls	r4, r7
   34cd0:	0c13      	lsrs	r3, r2, #16
   34cd2:	0412      	lsls	r2, r2, #16
   34cd4:	444b      	add	r3, r9
   34cd6:	4452      	add	r2, sl
   34cd8:	46a1      	mov	r9, r4
   34cda:	468a      	mov	sl, r1
   34cdc:	003c      	movs	r4, r7
   34cde:	4641      	mov	r1, r8
   34ce0:	436c      	muls	r4, r5
   34ce2:	434d      	muls	r5, r1
   34ce4:	4651      	mov	r1, sl
   34ce6:	444d      	add	r5, r9
   34ce8:	0c0f      	lsrs	r7, r1, #16
   34cea:	197d      	adds	r5, r7, r5
   34cec:	45a9      	cmp	r9, r5
   34cee:	d903      	bls.n	34cf8 <__aeabi_dmul+0x2fc>
   34cf0:	2180      	movs	r1, #128	; 0x80
   34cf2:	0249      	lsls	r1, r1, #9
   34cf4:	4688      	mov	r8, r1
   34cf6:	4444      	add	r4, r8
   34cf8:	9f04      	ldr	r7, [sp, #16]
   34cfa:	9903      	ldr	r1, [sp, #12]
   34cfc:	46b8      	mov	r8, r7
   34cfe:	4441      	add	r1, r8
   34d00:	468b      	mov	fp, r1
   34d02:	4583      	cmp	fp, r0
   34d04:	4180      	sbcs	r0, r0
   34d06:	4241      	negs	r1, r0
   34d08:	4688      	mov	r8, r1
   34d0a:	4651      	mov	r1, sl
   34d0c:	0408      	lsls	r0, r1, #16
   34d0e:	042f      	lsls	r7, r5, #16
   34d10:	0c00      	lsrs	r0, r0, #16
   34d12:	183f      	adds	r7, r7, r0
   34d14:	4658      	mov	r0, fp
   34d16:	9902      	ldr	r1, [sp, #8]
   34d18:	1810      	adds	r0, r2, r0
   34d1a:	4689      	mov	r9, r1
   34d1c:	4290      	cmp	r0, r2
   34d1e:	4192      	sbcs	r2, r2
   34d20:	444f      	add	r7, r9
   34d22:	46ba      	mov	sl, r7
   34d24:	4252      	negs	r2, r2
   34d26:	4699      	mov	r9, r3
   34d28:	4693      	mov	fp, r2
   34d2a:	44c2      	add	sl, r8
   34d2c:	44d1      	add	r9, sl
   34d2e:	44cb      	add	fp, r9
   34d30:	428f      	cmp	r7, r1
   34d32:	41bf      	sbcs	r7, r7
   34d34:	45c2      	cmp	sl, r8
   34d36:	4189      	sbcs	r1, r1
   34d38:	4599      	cmp	r9, r3
   34d3a:	419b      	sbcs	r3, r3
   34d3c:	4593      	cmp	fp, r2
   34d3e:	4192      	sbcs	r2, r2
   34d40:	427f      	negs	r7, r7
   34d42:	4249      	negs	r1, r1
   34d44:	0c2d      	lsrs	r5, r5, #16
   34d46:	4252      	negs	r2, r2
   34d48:	430f      	orrs	r7, r1
   34d4a:	425b      	negs	r3, r3
   34d4c:	4313      	orrs	r3, r2
   34d4e:	197f      	adds	r7, r7, r5
   34d50:	18ff      	adds	r7, r7, r3
   34d52:	465b      	mov	r3, fp
   34d54:	193c      	adds	r4, r7, r4
   34d56:	0ddb      	lsrs	r3, r3, #23
   34d58:	9a05      	ldr	r2, [sp, #20]
   34d5a:	0264      	lsls	r4, r4, #9
   34d5c:	431c      	orrs	r4, r3
   34d5e:	0243      	lsls	r3, r0, #9
   34d60:	4313      	orrs	r3, r2
   34d62:	1e5d      	subs	r5, r3, #1
   34d64:	41ab      	sbcs	r3, r5
   34d66:	465a      	mov	r2, fp
   34d68:	0dc0      	lsrs	r0, r0, #23
   34d6a:	4303      	orrs	r3, r0
   34d6c:	0252      	lsls	r2, r2, #9
   34d6e:	4313      	orrs	r3, r2
   34d70:	01e2      	lsls	r2, r4, #7
   34d72:	d556      	bpl.n	34e22 <__aeabi_dmul+0x426>
   34d74:	2001      	movs	r0, #1
   34d76:	085a      	lsrs	r2, r3, #1
   34d78:	4003      	ands	r3, r0
   34d7a:	4313      	orrs	r3, r2
   34d7c:	07e2      	lsls	r2, r4, #31
   34d7e:	4313      	orrs	r3, r2
   34d80:	0864      	lsrs	r4, r4, #1
   34d82:	485a      	ldr	r0, [pc, #360]	; (34eec <__aeabi_dmul+0x4f0>)
   34d84:	4460      	add	r0, ip
   34d86:	2800      	cmp	r0, #0
   34d88:	dd4d      	ble.n	34e26 <__aeabi_dmul+0x42a>
   34d8a:	075a      	lsls	r2, r3, #29
   34d8c:	d009      	beq.n	34da2 <__aeabi_dmul+0x3a6>
   34d8e:	220f      	movs	r2, #15
   34d90:	401a      	ands	r2, r3
   34d92:	2a04      	cmp	r2, #4
   34d94:	d005      	beq.n	34da2 <__aeabi_dmul+0x3a6>
   34d96:	1d1a      	adds	r2, r3, #4
   34d98:	429a      	cmp	r2, r3
   34d9a:	419b      	sbcs	r3, r3
   34d9c:	425b      	negs	r3, r3
   34d9e:	18e4      	adds	r4, r4, r3
   34da0:	0013      	movs	r3, r2
   34da2:	01e2      	lsls	r2, r4, #7
   34da4:	d504      	bpl.n	34db0 <__aeabi_dmul+0x3b4>
   34da6:	2080      	movs	r0, #128	; 0x80
   34da8:	4a51      	ldr	r2, [pc, #324]	; (34ef0 <__aeabi_dmul+0x4f4>)
   34daa:	00c0      	lsls	r0, r0, #3
   34dac:	4014      	ands	r4, r2
   34dae:	4460      	add	r0, ip
   34db0:	4a50      	ldr	r2, [pc, #320]	; (34ef4 <__aeabi_dmul+0x4f8>)
   34db2:	4290      	cmp	r0, r2
   34db4:	dd00      	ble.n	34db8 <__aeabi_dmul+0x3bc>
   34db6:	e6e3      	b.n	34b80 <__aeabi_dmul+0x184>
   34db8:	2501      	movs	r5, #1
   34dba:	08db      	lsrs	r3, r3, #3
   34dbc:	0762      	lsls	r2, r4, #29
   34dbe:	431a      	orrs	r2, r3
   34dc0:	0264      	lsls	r4, r4, #9
   34dc2:	9b01      	ldr	r3, [sp, #4]
   34dc4:	4691      	mov	r9, r2
   34dc6:	0b22      	lsrs	r2, r4, #12
   34dc8:	0544      	lsls	r4, r0, #21
   34dca:	0d64      	lsrs	r4, r4, #21
   34dcc:	401d      	ands	r5, r3
   34dce:	e67c      	b.n	34aca <__aeabi_dmul+0xce>
   34dd0:	2280      	movs	r2, #128	; 0x80
   34dd2:	4659      	mov	r1, fp
   34dd4:	0312      	lsls	r2, r2, #12
   34dd6:	4211      	tst	r1, r2
   34dd8:	d008      	beq.n	34dec <__aeabi_dmul+0x3f0>
   34dda:	4214      	tst	r4, r2
   34ddc:	d106      	bne.n	34dec <__aeabi_dmul+0x3f0>
   34dde:	4322      	orrs	r2, r4
   34de0:	0312      	lsls	r2, r2, #12
   34de2:	0b12      	lsrs	r2, r2, #12
   34de4:	4645      	mov	r5, r8
   34de6:	4699      	mov	r9, r3
   34de8:	4c43      	ldr	r4, [pc, #268]	; (34ef8 <__aeabi_dmul+0x4fc>)
   34dea:	e66e      	b.n	34aca <__aeabi_dmul+0xce>
   34dec:	465b      	mov	r3, fp
   34dee:	431a      	orrs	r2, r3
   34df0:	0312      	lsls	r2, r2, #12
   34df2:	0b12      	lsrs	r2, r2, #12
   34df4:	4c40      	ldr	r4, [pc, #256]	; (34ef8 <__aeabi_dmul+0x4fc>)
   34df6:	e668      	b.n	34aca <__aeabi_dmul+0xce>
   34df8:	0003      	movs	r3, r0
   34dfa:	4654      	mov	r4, sl
   34dfc:	3b28      	subs	r3, #40	; 0x28
   34dfe:	409c      	lsls	r4, r3
   34e00:	2300      	movs	r3, #0
   34e02:	e6b9      	b.n	34b78 <__aeabi_dmul+0x17c>
   34e04:	f000 fbfc 	bl	35600 <__clzsi2>
   34e08:	3020      	adds	r0, #32
   34e0a:	e6a6      	b.n	34b5a <__aeabi_dmul+0x15e>
   34e0c:	0003      	movs	r3, r0
   34e0e:	3b28      	subs	r3, #40	; 0x28
   34e10:	409f      	lsls	r7, r3
   34e12:	2300      	movs	r3, #0
   34e14:	46bb      	mov	fp, r7
   34e16:	4699      	mov	r9, r3
   34e18:	e68a      	b.n	34b30 <__aeabi_dmul+0x134>
   34e1a:	f000 fbf1 	bl	35600 <__clzsi2>
   34e1e:	3020      	adds	r0, #32
   34e20:	e674      	b.n	34b0c <__aeabi_dmul+0x110>
   34e22:	46b4      	mov	ip, r6
   34e24:	e7ad      	b.n	34d82 <__aeabi_dmul+0x386>
   34e26:	2501      	movs	r5, #1
   34e28:	1a2a      	subs	r2, r5, r0
   34e2a:	2a38      	cmp	r2, #56	; 0x38
   34e2c:	dd06      	ble.n	34e3c <__aeabi_dmul+0x440>
   34e2e:	9b01      	ldr	r3, [sp, #4]
   34e30:	2400      	movs	r4, #0
   34e32:	401d      	ands	r5, r3
   34e34:	2300      	movs	r3, #0
   34e36:	2200      	movs	r2, #0
   34e38:	4699      	mov	r9, r3
   34e3a:	e646      	b.n	34aca <__aeabi_dmul+0xce>
   34e3c:	2a1f      	cmp	r2, #31
   34e3e:	dc21      	bgt.n	34e84 <__aeabi_dmul+0x488>
   34e40:	2520      	movs	r5, #32
   34e42:	0020      	movs	r0, r4
   34e44:	1aad      	subs	r5, r5, r2
   34e46:	001e      	movs	r6, r3
   34e48:	40ab      	lsls	r3, r5
   34e4a:	40a8      	lsls	r0, r5
   34e4c:	40d6      	lsrs	r6, r2
   34e4e:	1e5d      	subs	r5, r3, #1
   34e50:	41ab      	sbcs	r3, r5
   34e52:	4330      	orrs	r0, r6
   34e54:	4318      	orrs	r0, r3
   34e56:	40d4      	lsrs	r4, r2
   34e58:	0743      	lsls	r3, r0, #29
   34e5a:	d009      	beq.n	34e70 <__aeabi_dmul+0x474>
   34e5c:	230f      	movs	r3, #15
   34e5e:	4003      	ands	r3, r0
   34e60:	2b04      	cmp	r3, #4
   34e62:	d005      	beq.n	34e70 <__aeabi_dmul+0x474>
   34e64:	0003      	movs	r3, r0
   34e66:	1d18      	adds	r0, r3, #4
   34e68:	4298      	cmp	r0, r3
   34e6a:	419b      	sbcs	r3, r3
   34e6c:	425b      	negs	r3, r3
   34e6e:	18e4      	adds	r4, r4, r3
   34e70:	0223      	lsls	r3, r4, #8
   34e72:	d521      	bpl.n	34eb8 <__aeabi_dmul+0x4bc>
   34e74:	2501      	movs	r5, #1
   34e76:	9b01      	ldr	r3, [sp, #4]
   34e78:	2401      	movs	r4, #1
   34e7a:	401d      	ands	r5, r3
   34e7c:	2300      	movs	r3, #0
   34e7e:	2200      	movs	r2, #0
   34e80:	4699      	mov	r9, r3
   34e82:	e622      	b.n	34aca <__aeabi_dmul+0xce>
   34e84:	251f      	movs	r5, #31
   34e86:	0021      	movs	r1, r4
   34e88:	426d      	negs	r5, r5
   34e8a:	1a28      	subs	r0, r5, r0
   34e8c:	40c1      	lsrs	r1, r0
   34e8e:	0008      	movs	r0, r1
   34e90:	2a20      	cmp	r2, #32
   34e92:	d01d      	beq.n	34ed0 <__aeabi_dmul+0x4d4>
   34e94:	355f      	adds	r5, #95	; 0x5f
   34e96:	1aaa      	subs	r2, r5, r2
   34e98:	4094      	lsls	r4, r2
   34e9a:	4323      	orrs	r3, r4
   34e9c:	1e5c      	subs	r4, r3, #1
   34e9e:	41a3      	sbcs	r3, r4
   34ea0:	2507      	movs	r5, #7
   34ea2:	4303      	orrs	r3, r0
   34ea4:	401d      	ands	r5, r3
   34ea6:	2200      	movs	r2, #0
   34ea8:	2d00      	cmp	r5, #0
   34eaa:	d009      	beq.n	34ec0 <__aeabi_dmul+0x4c4>
   34eac:	220f      	movs	r2, #15
   34eae:	2400      	movs	r4, #0
   34eb0:	401a      	ands	r2, r3
   34eb2:	0018      	movs	r0, r3
   34eb4:	2a04      	cmp	r2, #4
   34eb6:	d1d6      	bne.n	34e66 <__aeabi_dmul+0x46a>
   34eb8:	0003      	movs	r3, r0
   34eba:	0765      	lsls	r5, r4, #29
   34ebc:	0264      	lsls	r4, r4, #9
   34ebe:	0b22      	lsrs	r2, r4, #12
   34ec0:	08db      	lsrs	r3, r3, #3
   34ec2:	432b      	orrs	r3, r5
   34ec4:	2501      	movs	r5, #1
   34ec6:	4699      	mov	r9, r3
   34ec8:	9b01      	ldr	r3, [sp, #4]
   34eca:	2400      	movs	r4, #0
   34ecc:	401d      	ands	r5, r3
   34ece:	e5fc      	b.n	34aca <__aeabi_dmul+0xce>
   34ed0:	2400      	movs	r4, #0
   34ed2:	e7e2      	b.n	34e9a <__aeabi_dmul+0x49e>
   34ed4:	2280      	movs	r2, #128	; 0x80
   34ed6:	2501      	movs	r5, #1
   34ed8:	0312      	lsls	r2, r2, #12
   34eda:	4322      	orrs	r2, r4
   34edc:	9901      	ldr	r1, [sp, #4]
   34ede:	0312      	lsls	r2, r2, #12
   34ee0:	0b12      	lsrs	r2, r2, #12
   34ee2:	400d      	ands	r5, r1
   34ee4:	4699      	mov	r9, r3
   34ee6:	4c04      	ldr	r4, [pc, #16]	; (34ef8 <__aeabi_dmul+0x4fc>)
   34ee8:	e5ef      	b.n	34aca <__aeabi_dmul+0xce>
   34eea:	46c0      	nop			; (mov r8, r8)
   34eec:	000003ff 	.word	0x000003ff
   34ef0:	feffffff 	.word	0xfeffffff
   34ef4:	000007fe 	.word	0x000007fe
   34ef8:	000007ff 	.word	0x000007ff

00034efc <__aeabi_dsub>:
   34efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   34efe:	4646      	mov	r6, r8
   34f00:	46d6      	mov	lr, sl
   34f02:	464f      	mov	r7, r9
   34f04:	030c      	lsls	r4, r1, #12
   34f06:	b5c0      	push	{r6, r7, lr}
   34f08:	0fcd      	lsrs	r5, r1, #31
   34f0a:	004e      	lsls	r6, r1, #1
   34f0c:	0a61      	lsrs	r1, r4, #9
   34f0e:	0f44      	lsrs	r4, r0, #29
   34f10:	430c      	orrs	r4, r1
   34f12:	00c1      	lsls	r1, r0, #3
   34f14:	0058      	lsls	r0, r3, #1
   34f16:	0d40      	lsrs	r0, r0, #21
   34f18:	4684      	mov	ip, r0
   34f1a:	468a      	mov	sl, r1
   34f1c:	000f      	movs	r7, r1
   34f1e:	0319      	lsls	r1, r3, #12
   34f20:	0f50      	lsrs	r0, r2, #29
   34f22:	0a49      	lsrs	r1, r1, #9
   34f24:	4301      	orrs	r1, r0
   34f26:	48c6      	ldr	r0, [pc, #792]	; (35240 <__aeabi_dsub+0x344>)
   34f28:	0d76      	lsrs	r6, r6, #21
   34f2a:	46a8      	mov	r8, r5
   34f2c:	0fdb      	lsrs	r3, r3, #31
   34f2e:	00d2      	lsls	r2, r2, #3
   34f30:	4584      	cmp	ip, r0
   34f32:	d100      	bne.n	34f36 <__aeabi_dsub+0x3a>
   34f34:	e0d8      	b.n	350e8 <__aeabi_dsub+0x1ec>
   34f36:	2001      	movs	r0, #1
   34f38:	4043      	eors	r3, r0
   34f3a:	42ab      	cmp	r3, r5
   34f3c:	d100      	bne.n	34f40 <__aeabi_dsub+0x44>
   34f3e:	e0a6      	b.n	3508e <__aeabi_dsub+0x192>
   34f40:	4660      	mov	r0, ip
   34f42:	1a35      	subs	r5, r6, r0
   34f44:	2d00      	cmp	r5, #0
   34f46:	dc00      	bgt.n	34f4a <__aeabi_dsub+0x4e>
   34f48:	e105      	b.n	35156 <__aeabi_dsub+0x25a>
   34f4a:	2800      	cmp	r0, #0
   34f4c:	d110      	bne.n	34f70 <__aeabi_dsub+0x74>
   34f4e:	000b      	movs	r3, r1
   34f50:	4313      	orrs	r3, r2
   34f52:	d100      	bne.n	34f56 <__aeabi_dsub+0x5a>
   34f54:	e0d7      	b.n	35106 <__aeabi_dsub+0x20a>
   34f56:	1e6b      	subs	r3, r5, #1
   34f58:	2b00      	cmp	r3, #0
   34f5a:	d000      	beq.n	34f5e <__aeabi_dsub+0x62>
   34f5c:	e14b      	b.n	351f6 <__aeabi_dsub+0x2fa>
   34f5e:	4653      	mov	r3, sl
   34f60:	1a9f      	subs	r7, r3, r2
   34f62:	45ba      	cmp	sl, r7
   34f64:	4180      	sbcs	r0, r0
   34f66:	1a64      	subs	r4, r4, r1
   34f68:	4240      	negs	r0, r0
   34f6a:	1a24      	subs	r4, r4, r0
   34f6c:	2601      	movs	r6, #1
   34f6e:	e01e      	b.n	34fae <__aeabi_dsub+0xb2>
   34f70:	4bb3      	ldr	r3, [pc, #716]	; (35240 <__aeabi_dsub+0x344>)
   34f72:	429e      	cmp	r6, r3
   34f74:	d048      	beq.n	35008 <__aeabi_dsub+0x10c>
   34f76:	2380      	movs	r3, #128	; 0x80
   34f78:	041b      	lsls	r3, r3, #16
   34f7a:	4319      	orrs	r1, r3
   34f7c:	2d38      	cmp	r5, #56	; 0x38
   34f7e:	dd00      	ble.n	34f82 <__aeabi_dsub+0x86>
   34f80:	e119      	b.n	351b6 <__aeabi_dsub+0x2ba>
   34f82:	2d1f      	cmp	r5, #31
   34f84:	dd00      	ble.n	34f88 <__aeabi_dsub+0x8c>
   34f86:	e14c      	b.n	35222 <__aeabi_dsub+0x326>
   34f88:	2320      	movs	r3, #32
   34f8a:	000f      	movs	r7, r1
   34f8c:	1b5b      	subs	r3, r3, r5
   34f8e:	0010      	movs	r0, r2
   34f90:	409a      	lsls	r2, r3
   34f92:	409f      	lsls	r7, r3
   34f94:	40e8      	lsrs	r0, r5
   34f96:	1e53      	subs	r3, r2, #1
   34f98:	419a      	sbcs	r2, r3
   34f9a:	40e9      	lsrs	r1, r5
   34f9c:	4307      	orrs	r7, r0
   34f9e:	4317      	orrs	r7, r2
   34fa0:	4653      	mov	r3, sl
   34fa2:	1bdf      	subs	r7, r3, r7
   34fa4:	1a61      	subs	r1, r4, r1
   34fa6:	45ba      	cmp	sl, r7
   34fa8:	41a4      	sbcs	r4, r4
   34faa:	4264      	negs	r4, r4
   34fac:	1b0c      	subs	r4, r1, r4
   34fae:	0223      	lsls	r3, r4, #8
   34fb0:	d400      	bmi.n	34fb4 <__aeabi_dsub+0xb8>
   34fb2:	e0c5      	b.n	35140 <__aeabi_dsub+0x244>
   34fb4:	0264      	lsls	r4, r4, #9
   34fb6:	0a65      	lsrs	r5, r4, #9
   34fb8:	2d00      	cmp	r5, #0
   34fba:	d100      	bne.n	34fbe <__aeabi_dsub+0xc2>
   34fbc:	e0f6      	b.n	351ac <__aeabi_dsub+0x2b0>
   34fbe:	0028      	movs	r0, r5
   34fc0:	f000 fb1e 	bl	35600 <__clzsi2>
   34fc4:	0003      	movs	r3, r0
   34fc6:	3b08      	subs	r3, #8
   34fc8:	2b1f      	cmp	r3, #31
   34fca:	dd00      	ble.n	34fce <__aeabi_dsub+0xd2>
   34fcc:	e0e9      	b.n	351a2 <__aeabi_dsub+0x2a6>
   34fce:	2220      	movs	r2, #32
   34fd0:	003c      	movs	r4, r7
   34fd2:	1ad2      	subs	r2, r2, r3
   34fd4:	409d      	lsls	r5, r3
   34fd6:	40d4      	lsrs	r4, r2
   34fd8:	409f      	lsls	r7, r3
   34fda:	4325      	orrs	r5, r4
   34fdc:	429e      	cmp	r6, r3
   34fde:	dd00      	ble.n	34fe2 <__aeabi_dsub+0xe6>
   34fe0:	e0db      	b.n	3519a <__aeabi_dsub+0x29e>
   34fe2:	1b9e      	subs	r6, r3, r6
   34fe4:	1c73      	adds	r3, r6, #1
   34fe6:	2b1f      	cmp	r3, #31
   34fe8:	dd00      	ble.n	34fec <__aeabi_dsub+0xf0>
   34fea:	e10a      	b.n	35202 <__aeabi_dsub+0x306>
   34fec:	2220      	movs	r2, #32
   34fee:	0038      	movs	r0, r7
   34ff0:	1ad2      	subs	r2, r2, r3
   34ff2:	0029      	movs	r1, r5
   34ff4:	4097      	lsls	r7, r2
   34ff6:	002c      	movs	r4, r5
   34ff8:	4091      	lsls	r1, r2
   34ffa:	40d8      	lsrs	r0, r3
   34ffc:	1e7a      	subs	r2, r7, #1
   34ffe:	4197      	sbcs	r7, r2
   35000:	40dc      	lsrs	r4, r3
   35002:	2600      	movs	r6, #0
   35004:	4301      	orrs	r1, r0
   35006:	430f      	orrs	r7, r1
   35008:	077b      	lsls	r3, r7, #29
   3500a:	d009      	beq.n	35020 <__aeabi_dsub+0x124>
   3500c:	230f      	movs	r3, #15
   3500e:	403b      	ands	r3, r7
   35010:	2b04      	cmp	r3, #4
   35012:	d005      	beq.n	35020 <__aeabi_dsub+0x124>
   35014:	1d3b      	adds	r3, r7, #4
   35016:	42bb      	cmp	r3, r7
   35018:	41bf      	sbcs	r7, r7
   3501a:	427f      	negs	r7, r7
   3501c:	19e4      	adds	r4, r4, r7
   3501e:	001f      	movs	r7, r3
   35020:	0223      	lsls	r3, r4, #8
   35022:	d525      	bpl.n	35070 <__aeabi_dsub+0x174>
   35024:	4b86      	ldr	r3, [pc, #536]	; (35240 <__aeabi_dsub+0x344>)
   35026:	3601      	adds	r6, #1
   35028:	429e      	cmp	r6, r3
   3502a:	d100      	bne.n	3502e <__aeabi_dsub+0x132>
   3502c:	e0af      	b.n	3518e <__aeabi_dsub+0x292>
   3502e:	4b85      	ldr	r3, [pc, #532]	; (35244 <__aeabi_dsub+0x348>)
   35030:	2501      	movs	r5, #1
   35032:	401c      	ands	r4, r3
   35034:	4643      	mov	r3, r8
   35036:	0762      	lsls	r2, r4, #29
   35038:	08ff      	lsrs	r7, r7, #3
   3503a:	0264      	lsls	r4, r4, #9
   3503c:	0576      	lsls	r6, r6, #21
   3503e:	4317      	orrs	r7, r2
   35040:	0b24      	lsrs	r4, r4, #12
   35042:	0d76      	lsrs	r6, r6, #21
   35044:	401d      	ands	r5, r3
   35046:	2100      	movs	r1, #0
   35048:	0324      	lsls	r4, r4, #12
   3504a:	0b23      	lsrs	r3, r4, #12
   3504c:	0d0c      	lsrs	r4, r1, #20
   3504e:	4a7e      	ldr	r2, [pc, #504]	; (35248 <__aeabi_dsub+0x34c>)
   35050:	0524      	lsls	r4, r4, #20
   35052:	431c      	orrs	r4, r3
   35054:	4014      	ands	r4, r2
   35056:	0533      	lsls	r3, r6, #20
   35058:	4323      	orrs	r3, r4
   3505a:	005b      	lsls	r3, r3, #1
   3505c:	07ed      	lsls	r5, r5, #31
   3505e:	085b      	lsrs	r3, r3, #1
   35060:	432b      	orrs	r3, r5
   35062:	0038      	movs	r0, r7
   35064:	0019      	movs	r1, r3
   35066:	bc1c      	pop	{r2, r3, r4}
   35068:	4690      	mov	r8, r2
   3506a:	4699      	mov	r9, r3
   3506c:	46a2      	mov	sl, r4
   3506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35070:	2501      	movs	r5, #1
   35072:	4643      	mov	r3, r8
   35074:	0762      	lsls	r2, r4, #29
   35076:	08ff      	lsrs	r7, r7, #3
   35078:	4317      	orrs	r7, r2
   3507a:	08e4      	lsrs	r4, r4, #3
   3507c:	401d      	ands	r5, r3
   3507e:	4b70      	ldr	r3, [pc, #448]	; (35240 <__aeabi_dsub+0x344>)
   35080:	429e      	cmp	r6, r3
   35082:	d036      	beq.n	350f2 <__aeabi_dsub+0x1f6>
   35084:	0324      	lsls	r4, r4, #12
   35086:	0576      	lsls	r6, r6, #21
   35088:	0b24      	lsrs	r4, r4, #12
   3508a:	0d76      	lsrs	r6, r6, #21
   3508c:	e7db      	b.n	35046 <__aeabi_dsub+0x14a>
   3508e:	4663      	mov	r3, ip
   35090:	1af3      	subs	r3, r6, r3
   35092:	2b00      	cmp	r3, #0
   35094:	dc00      	bgt.n	35098 <__aeabi_dsub+0x19c>
   35096:	e094      	b.n	351c2 <__aeabi_dsub+0x2c6>
   35098:	4660      	mov	r0, ip
   3509a:	2800      	cmp	r0, #0
   3509c:	d035      	beq.n	3510a <__aeabi_dsub+0x20e>
   3509e:	4868      	ldr	r0, [pc, #416]	; (35240 <__aeabi_dsub+0x344>)
   350a0:	4286      	cmp	r6, r0
   350a2:	d0b1      	beq.n	35008 <__aeabi_dsub+0x10c>
   350a4:	2780      	movs	r7, #128	; 0x80
   350a6:	043f      	lsls	r7, r7, #16
   350a8:	4339      	orrs	r1, r7
   350aa:	2b38      	cmp	r3, #56	; 0x38
   350ac:	dc00      	bgt.n	350b0 <__aeabi_dsub+0x1b4>
   350ae:	e0fd      	b.n	352ac <__aeabi_dsub+0x3b0>
   350b0:	430a      	orrs	r2, r1
   350b2:	0017      	movs	r7, r2
   350b4:	2100      	movs	r1, #0
   350b6:	1e7a      	subs	r2, r7, #1
   350b8:	4197      	sbcs	r7, r2
   350ba:	4457      	add	r7, sl
   350bc:	4557      	cmp	r7, sl
   350be:	4180      	sbcs	r0, r0
   350c0:	1909      	adds	r1, r1, r4
   350c2:	4244      	negs	r4, r0
   350c4:	190c      	adds	r4, r1, r4
   350c6:	0223      	lsls	r3, r4, #8
   350c8:	d53a      	bpl.n	35140 <__aeabi_dsub+0x244>
   350ca:	4b5d      	ldr	r3, [pc, #372]	; (35240 <__aeabi_dsub+0x344>)
   350cc:	3601      	adds	r6, #1
   350ce:	429e      	cmp	r6, r3
   350d0:	d100      	bne.n	350d4 <__aeabi_dsub+0x1d8>
   350d2:	e14b      	b.n	3536c <__aeabi_dsub+0x470>
   350d4:	2201      	movs	r2, #1
   350d6:	4b5b      	ldr	r3, [pc, #364]	; (35244 <__aeabi_dsub+0x348>)
   350d8:	401c      	ands	r4, r3
   350da:	087b      	lsrs	r3, r7, #1
   350dc:	4017      	ands	r7, r2
   350de:	431f      	orrs	r7, r3
   350e0:	07e2      	lsls	r2, r4, #31
   350e2:	4317      	orrs	r7, r2
   350e4:	0864      	lsrs	r4, r4, #1
   350e6:	e78f      	b.n	35008 <__aeabi_dsub+0x10c>
   350e8:	0008      	movs	r0, r1
   350ea:	4310      	orrs	r0, r2
   350ec:	d000      	beq.n	350f0 <__aeabi_dsub+0x1f4>
   350ee:	e724      	b.n	34f3a <__aeabi_dsub+0x3e>
   350f0:	e721      	b.n	34f36 <__aeabi_dsub+0x3a>
   350f2:	0023      	movs	r3, r4
   350f4:	433b      	orrs	r3, r7
   350f6:	d100      	bne.n	350fa <__aeabi_dsub+0x1fe>
   350f8:	e1b9      	b.n	3546e <__aeabi_dsub+0x572>
   350fa:	2280      	movs	r2, #128	; 0x80
   350fc:	0312      	lsls	r2, r2, #12
   350fe:	4314      	orrs	r4, r2
   35100:	0324      	lsls	r4, r4, #12
   35102:	0b24      	lsrs	r4, r4, #12
   35104:	e79f      	b.n	35046 <__aeabi_dsub+0x14a>
   35106:	002e      	movs	r6, r5
   35108:	e77e      	b.n	35008 <__aeabi_dsub+0x10c>
   3510a:	0008      	movs	r0, r1
   3510c:	4310      	orrs	r0, r2
   3510e:	d100      	bne.n	35112 <__aeabi_dsub+0x216>
   35110:	e0ca      	b.n	352a8 <__aeabi_dsub+0x3ac>
   35112:	1e58      	subs	r0, r3, #1
   35114:	4684      	mov	ip, r0
   35116:	2800      	cmp	r0, #0
   35118:	d000      	beq.n	3511c <__aeabi_dsub+0x220>
   3511a:	e0e7      	b.n	352ec <__aeabi_dsub+0x3f0>
   3511c:	4452      	add	r2, sl
   3511e:	4552      	cmp	r2, sl
   35120:	4180      	sbcs	r0, r0
   35122:	1864      	adds	r4, r4, r1
   35124:	4240      	negs	r0, r0
   35126:	1824      	adds	r4, r4, r0
   35128:	0017      	movs	r7, r2
   3512a:	2601      	movs	r6, #1
   3512c:	0223      	lsls	r3, r4, #8
   3512e:	d507      	bpl.n	35140 <__aeabi_dsub+0x244>
   35130:	2602      	movs	r6, #2
   35132:	e7cf      	b.n	350d4 <__aeabi_dsub+0x1d8>
   35134:	4664      	mov	r4, ip
   35136:	432c      	orrs	r4, r5
   35138:	d100      	bne.n	3513c <__aeabi_dsub+0x240>
   3513a:	e1b3      	b.n	354a4 <__aeabi_dsub+0x5a8>
   3513c:	002c      	movs	r4, r5
   3513e:	4667      	mov	r7, ip
   35140:	077b      	lsls	r3, r7, #29
   35142:	d000      	beq.n	35146 <__aeabi_dsub+0x24a>
   35144:	e762      	b.n	3500c <__aeabi_dsub+0x110>
   35146:	0763      	lsls	r3, r4, #29
   35148:	08ff      	lsrs	r7, r7, #3
   3514a:	431f      	orrs	r7, r3
   3514c:	2501      	movs	r5, #1
   3514e:	4643      	mov	r3, r8
   35150:	08e4      	lsrs	r4, r4, #3
   35152:	401d      	ands	r5, r3
   35154:	e793      	b.n	3507e <__aeabi_dsub+0x182>
   35156:	2d00      	cmp	r5, #0
   35158:	d178      	bne.n	3524c <__aeabi_dsub+0x350>
   3515a:	1c75      	adds	r5, r6, #1
   3515c:	056d      	lsls	r5, r5, #21
   3515e:	0d6d      	lsrs	r5, r5, #21
   35160:	2d01      	cmp	r5, #1
   35162:	dc00      	bgt.n	35166 <__aeabi_dsub+0x26a>
   35164:	e0f2      	b.n	3534c <__aeabi_dsub+0x450>
   35166:	4650      	mov	r0, sl
   35168:	1a80      	subs	r0, r0, r2
   3516a:	4582      	cmp	sl, r0
   3516c:	41bf      	sbcs	r7, r7
   3516e:	1a65      	subs	r5, r4, r1
   35170:	427f      	negs	r7, r7
   35172:	1bed      	subs	r5, r5, r7
   35174:	4684      	mov	ip, r0
   35176:	0228      	lsls	r0, r5, #8
   35178:	d400      	bmi.n	3517c <__aeabi_dsub+0x280>
   3517a:	e08c      	b.n	35296 <__aeabi_dsub+0x39a>
   3517c:	4650      	mov	r0, sl
   3517e:	1a17      	subs	r7, r2, r0
   35180:	42ba      	cmp	r2, r7
   35182:	4192      	sbcs	r2, r2
   35184:	1b0c      	subs	r4, r1, r4
   35186:	4255      	negs	r5, r2
   35188:	1b65      	subs	r5, r4, r5
   3518a:	4698      	mov	r8, r3
   3518c:	e714      	b.n	34fb8 <__aeabi_dsub+0xbc>
   3518e:	2501      	movs	r5, #1
   35190:	4643      	mov	r3, r8
   35192:	2400      	movs	r4, #0
   35194:	401d      	ands	r5, r3
   35196:	2700      	movs	r7, #0
   35198:	e755      	b.n	35046 <__aeabi_dsub+0x14a>
   3519a:	4c2a      	ldr	r4, [pc, #168]	; (35244 <__aeabi_dsub+0x348>)
   3519c:	1af6      	subs	r6, r6, r3
   3519e:	402c      	ands	r4, r5
   351a0:	e732      	b.n	35008 <__aeabi_dsub+0x10c>
   351a2:	003d      	movs	r5, r7
   351a4:	3828      	subs	r0, #40	; 0x28
   351a6:	4085      	lsls	r5, r0
   351a8:	2700      	movs	r7, #0
   351aa:	e717      	b.n	34fdc <__aeabi_dsub+0xe0>
   351ac:	0038      	movs	r0, r7
   351ae:	f000 fa27 	bl	35600 <__clzsi2>
   351b2:	3020      	adds	r0, #32
   351b4:	e706      	b.n	34fc4 <__aeabi_dsub+0xc8>
   351b6:	430a      	orrs	r2, r1
   351b8:	0017      	movs	r7, r2
   351ba:	2100      	movs	r1, #0
   351bc:	1e7a      	subs	r2, r7, #1
   351be:	4197      	sbcs	r7, r2
   351c0:	e6ee      	b.n	34fa0 <__aeabi_dsub+0xa4>
   351c2:	2b00      	cmp	r3, #0
   351c4:	d000      	beq.n	351c8 <__aeabi_dsub+0x2cc>
   351c6:	e0e5      	b.n	35394 <__aeabi_dsub+0x498>
   351c8:	1c73      	adds	r3, r6, #1
   351ca:	469c      	mov	ip, r3
   351cc:	055b      	lsls	r3, r3, #21
   351ce:	0d5b      	lsrs	r3, r3, #21
   351d0:	2b01      	cmp	r3, #1
   351d2:	dc00      	bgt.n	351d6 <__aeabi_dsub+0x2da>
   351d4:	e09f      	b.n	35316 <__aeabi_dsub+0x41a>
   351d6:	4b1a      	ldr	r3, [pc, #104]	; (35240 <__aeabi_dsub+0x344>)
   351d8:	459c      	cmp	ip, r3
   351da:	d100      	bne.n	351de <__aeabi_dsub+0x2e2>
   351dc:	e0c5      	b.n	3536a <__aeabi_dsub+0x46e>
   351de:	4452      	add	r2, sl
   351e0:	4552      	cmp	r2, sl
   351e2:	4180      	sbcs	r0, r0
   351e4:	1864      	adds	r4, r4, r1
   351e6:	4240      	negs	r0, r0
   351e8:	1824      	adds	r4, r4, r0
   351ea:	07e7      	lsls	r7, r4, #31
   351ec:	0852      	lsrs	r2, r2, #1
   351ee:	4317      	orrs	r7, r2
   351f0:	0864      	lsrs	r4, r4, #1
   351f2:	4666      	mov	r6, ip
   351f4:	e708      	b.n	35008 <__aeabi_dsub+0x10c>
   351f6:	4812      	ldr	r0, [pc, #72]	; (35240 <__aeabi_dsub+0x344>)
   351f8:	4285      	cmp	r5, r0
   351fa:	d100      	bne.n	351fe <__aeabi_dsub+0x302>
   351fc:	e085      	b.n	3530a <__aeabi_dsub+0x40e>
   351fe:	001d      	movs	r5, r3
   35200:	e6bc      	b.n	34f7c <__aeabi_dsub+0x80>
   35202:	0029      	movs	r1, r5
   35204:	3e1f      	subs	r6, #31
   35206:	40f1      	lsrs	r1, r6
   35208:	2b20      	cmp	r3, #32
   3520a:	d100      	bne.n	3520e <__aeabi_dsub+0x312>
   3520c:	e07f      	b.n	3530e <__aeabi_dsub+0x412>
   3520e:	2240      	movs	r2, #64	; 0x40
   35210:	1ad3      	subs	r3, r2, r3
   35212:	409d      	lsls	r5, r3
   35214:	432f      	orrs	r7, r5
   35216:	1e7d      	subs	r5, r7, #1
   35218:	41af      	sbcs	r7, r5
   3521a:	2400      	movs	r4, #0
   3521c:	430f      	orrs	r7, r1
   3521e:	2600      	movs	r6, #0
   35220:	e78e      	b.n	35140 <__aeabi_dsub+0x244>
   35222:	002b      	movs	r3, r5
   35224:	000f      	movs	r7, r1
   35226:	3b20      	subs	r3, #32
   35228:	40df      	lsrs	r7, r3
   3522a:	2d20      	cmp	r5, #32
   3522c:	d071      	beq.n	35312 <__aeabi_dsub+0x416>
   3522e:	2340      	movs	r3, #64	; 0x40
   35230:	1b5d      	subs	r5, r3, r5
   35232:	40a9      	lsls	r1, r5
   35234:	430a      	orrs	r2, r1
   35236:	1e51      	subs	r1, r2, #1
   35238:	418a      	sbcs	r2, r1
   3523a:	2100      	movs	r1, #0
   3523c:	4317      	orrs	r7, r2
   3523e:	e6af      	b.n	34fa0 <__aeabi_dsub+0xa4>
   35240:	000007ff 	.word	0x000007ff
   35244:	ff7fffff 	.word	0xff7fffff
   35248:	800fffff 	.word	0x800fffff
   3524c:	2e00      	cmp	r6, #0
   3524e:	d03e      	beq.n	352ce <__aeabi_dsub+0x3d2>
   35250:	4eb3      	ldr	r6, [pc, #716]	; (35520 <__aeabi_dsub+0x624>)
   35252:	45b4      	cmp	ip, r6
   35254:	d045      	beq.n	352e2 <__aeabi_dsub+0x3e6>
   35256:	2680      	movs	r6, #128	; 0x80
   35258:	0436      	lsls	r6, r6, #16
   3525a:	426d      	negs	r5, r5
   3525c:	4334      	orrs	r4, r6
   3525e:	2d38      	cmp	r5, #56	; 0x38
   35260:	dd00      	ble.n	35264 <__aeabi_dsub+0x368>
   35262:	e0a8      	b.n	353b6 <__aeabi_dsub+0x4ba>
   35264:	2d1f      	cmp	r5, #31
   35266:	dd00      	ble.n	3526a <__aeabi_dsub+0x36e>
   35268:	e11f      	b.n	354aa <__aeabi_dsub+0x5ae>
   3526a:	2620      	movs	r6, #32
   3526c:	0027      	movs	r7, r4
   3526e:	4650      	mov	r0, sl
   35270:	1b76      	subs	r6, r6, r5
   35272:	40b7      	lsls	r7, r6
   35274:	40e8      	lsrs	r0, r5
   35276:	4307      	orrs	r7, r0
   35278:	4650      	mov	r0, sl
   3527a:	40b0      	lsls	r0, r6
   3527c:	1e46      	subs	r6, r0, #1
   3527e:	41b0      	sbcs	r0, r6
   35280:	40ec      	lsrs	r4, r5
   35282:	4338      	orrs	r0, r7
   35284:	1a17      	subs	r7, r2, r0
   35286:	42ba      	cmp	r2, r7
   35288:	4192      	sbcs	r2, r2
   3528a:	1b0c      	subs	r4, r1, r4
   3528c:	4252      	negs	r2, r2
   3528e:	1aa4      	subs	r4, r4, r2
   35290:	4666      	mov	r6, ip
   35292:	4698      	mov	r8, r3
   35294:	e68b      	b.n	34fae <__aeabi_dsub+0xb2>
   35296:	4664      	mov	r4, ip
   35298:	4667      	mov	r7, ip
   3529a:	432c      	orrs	r4, r5
   3529c:	d000      	beq.n	352a0 <__aeabi_dsub+0x3a4>
   3529e:	e68b      	b.n	34fb8 <__aeabi_dsub+0xbc>
   352a0:	2500      	movs	r5, #0
   352a2:	2600      	movs	r6, #0
   352a4:	2700      	movs	r7, #0
   352a6:	e6ea      	b.n	3507e <__aeabi_dsub+0x182>
   352a8:	001e      	movs	r6, r3
   352aa:	e6ad      	b.n	35008 <__aeabi_dsub+0x10c>
   352ac:	2b1f      	cmp	r3, #31
   352ae:	dc60      	bgt.n	35372 <__aeabi_dsub+0x476>
   352b0:	2720      	movs	r7, #32
   352b2:	1af8      	subs	r0, r7, r3
   352b4:	000f      	movs	r7, r1
   352b6:	4684      	mov	ip, r0
   352b8:	4087      	lsls	r7, r0
   352ba:	0010      	movs	r0, r2
   352bc:	40d8      	lsrs	r0, r3
   352be:	4307      	orrs	r7, r0
   352c0:	4660      	mov	r0, ip
   352c2:	4082      	lsls	r2, r0
   352c4:	1e50      	subs	r0, r2, #1
   352c6:	4182      	sbcs	r2, r0
   352c8:	40d9      	lsrs	r1, r3
   352ca:	4317      	orrs	r7, r2
   352cc:	e6f5      	b.n	350ba <__aeabi_dsub+0x1be>
   352ce:	0026      	movs	r6, r4
   352d0:	4650      	mov	r0, sl
   352d2:	4306      	orrs	r6, r0
   352d4:	d005      	beq.n	352e2 <__aeabi_dsub+0x3e6>
   352d6:	43ed      	mvns	r5, r5
   352d8:	2d00      	cmp	r5, #0
   352da:	d0d3      	beq.n	35284 <__aeabi_dsub+0x388>
   352dc:	4e90      	ldr	r6, [pc, #576]	; (35520 <__aeabi_dsub+0x624>)
   352de:	45b4      	cmp	ip, r6
   352e0:	d1bd      	bne.n	3525e <__aeabi_dsub+0x362>
   352e2:	000c      	movs	r4, r1
   352e4:	0017      	movs	r7, r2
   352e6:	4666      	mov	r6, ip
   352e8:	4698      	mov	r8, r3
   352ea:	e68d      	b.n	35008 <__aeabi_dsub+0x10c>
   352ec:	488c      	ldr	r0, [pc, #560]	; (35520 <__aeabi_dsub+0x624>)
   352ee:	4283      	cmp	r3, r0
   352f0:	d00b      	beq.n	3530a <__aeabi_dsub+0x40e>
   352f2:	4663      	mov	r3, ip
   352f4:	e6d9      	b.n	350aa <__aeabi_dsub+0x1ae>
   352f6:	2d00      	cmp	r5, #0
   352f8:	d000      	beq.n	352fc <__aeabi_dsub+0x400>
   352fa:	e096      	b.n	3542a <__aeabi_dsub+0x52e>
   352fc:	0008      	movs	r0, r1
   352fe:	4310      	orrs	r0, r2
   35300:	d100      	bne.n	35304 <__aeabi_dsub+0x408>
   35302:	e0e2      	b.n	354ca <__aeabi_dsub+0x5ce>
   35304:	000c      	movs	r4, r1
   35306:	0017      	movs	r7, r2
   35308:	4698      	mov	r8, r3
   3530a:	4e85      	ldr	r6, [pc, #532]	; (35520 <__aeabi_dsub+0x624>)
   3530c:	e67c      	b.n	35008 <__aeabi_dsub+0x10c>
   3530e:	2500      	movs	r5, #0
   35310:	e780      	b.n	35214 <__aeabi_dsub+0x318>
   35312:	2100      	movs	r1, #0
   35314:	e78e      	b.n	35234 <__aeabi_dsub+0x338>
   35316:	0023      	movs	r3, r4
   35318:	4650      	mov	r0, sl
   3531a:	4303      	orrs	r3, r0
   3531c:	2e00      	cmp	r6, #0
   3531e:	d000      	beq.n	35322 <__aeabi_dsub+0x426>
   35320:	e0a8      	b.n	35474 <__aeabi_dsub+0x578>
   35322:	2b00      	cmp	r3, #0
   35324:	d100      	bne.n	35328 <__aeabi_dsub+0x42c>
   35326:	e0de      	b.n	354e6 <__aeabi_dsub+0x5ea>
   35328:	000b      	movs	r3, r1
   3532a:	4313      	orrs	r3, r2
   3532c:	d100      	bne.n	35330 <__aeabi_dsub+0x434>
   3532e:	e66b      	b.n	35008 <__aeabi_dsub+0x10c>
   35330:	4452      	add	r2, sl
   35332:	4552      	cmp	r2, sl
   35334:	4180      	sbcs	r0, r0
   35336:	1864      	adds	r4, r4, r1
   35338:	4240      	negs	r0, r0
   3533a:	1824      	adds	r4, r4, r0
   3533c:	0017      	movs	r7, r2
   3533e:	0223      	lsls	r3, r4, #8
   35340:	d400      	bmi.n	35344 <__aeabi_dsub+0x448>
   35342:	e6fd      	b.n	35140 <__aeabi_dsub+0x244>
   35344:	4b77      	ldr	r3, [pc, #476]	; (35524 <__aeabi_dsub+0x628>)
   35346:	4666      	mov	r6, ip
   35348:	401c      	ands	r4, r3
   3534a:	e65d      	b.n	35008 <__aeabi_dsub+0x10c>
   3534c:	0025      	movs	r5, r4
   3534e:	4650      	mov	r0, sl
   35350:	4305      	orrs	r5, r0
   35352:	2e00      	cmp	r6, #0
   35354:	d1cf      	bne.n	352f6 <__aeabi_dsub+0x3fa>
   35356:	2d00      	cmp	r5, #0
   35358:	d14f      	bne.n	353fa <__aeabi_dsub+0x4fe>
   3535a:	000c      	movs	r4, r1
   3535c:	4314      	orrs	r4, r2
   3535e:	d100      	bne.n	35362 <__aeabi_dsub+0x466>
   35360:	e0a0      	b.n	354a4 <__aeabi_dsub+0x5a8>
   35362:	000c      	movs	r4, r1
   35364:	0017      	movs	r7, r2
   35366:	4698      	mov	r8, r3
   35368:	e64e      	b.n	35008 <__aeabi_dsub+0x10c>
   3536a:	4666      	mov	r6, ip
   3536c:	2400      	movs	r4, #0
   3536e:	2700      	movs	r7, #0
   35370:	e685      	b.n	3507e <__aeabi_dsub+0x182>
   35372:	001f      	movs	r7, r3
   35374:	0008      	movs	r0, r1
   35376:	3f20      	subs	r7, #32
   35378:	40f8      	lsrs	r0, r7
   3537a:	0007      	movs	r7, r0
   3537c:	2b20      	cmp	r3, #32
   3537e:	d100      	bne.n	35382 <__aeabi_dsub+0x486>
   35380:	e08e      	b.n	354a0 <__aeabi_dsub+0x5a4>
   35382:	2040      	movs	r0, #64	; 0x40
   35384:	1ac3      	subs	r3, r0, r3
   35386:	4099      	lsls	r1, r3
   35388:	430a      	orrs	r2, r1
   3538a:	1e51      	subs	r1, r2, #1
   3538c:	418a      	sbcs	r2, r1
   3538e:	2100      	movs	r1, #0
   35390:	4317      	orrs	r7, r2
   35392:	e692      	b.n	350ba <__aeabi_dsub+0x1be>
   35394:	2e00      	cmp	r6, #0
   35396:	d114      	bne.n	353c2 <__aeabi_dsub+0x4c6>
   35398:	0026      	movs	r6, r4
   3539a:	4650      	mov	r0, sl
   3539c:	4306      	orrs	r6, r0
   3539e:	d062      	beq.n	35466 <__aeabi_dsub+0x56a>
   353a0:	43db      	mvns	r3, r3
   353a2:	2b00      	cmp	r3, #0
   353a4:	d15c      	bne.n	35460 <__aeabi_dsub+0x564>
   353a6:	1887      	adds	r7, r0, r2
   353a8:	4297      	cmp	r7, r2
   353aa:	4192      	sbcs	r2, r2
   353ac:	1864      	adds	r4, r4, r1
   353ae:	4252      	negs	r2, r2
   353b0:	18a4      	adds	r4, r4, r2
   353b2:	4666      	mov	r6, ip
   353b4:	e687      	b.n	350c6 <__aeabi_dsub+0x1ca>
   353b6:	4650      	mov	r0, sl
   353b8:	4320      	orrs	r0, r4
   353ba:	1e44      	subs	r4, r0, #1
   353bc:	41a0      	sbcs	r0, r4
   353be:	2400      	movs	r4, #0
   353c0:	e760      	b.n	35284 <__aeabi_dsub+0x388>
   353c2:	4e57      	ldr	r6, [pc, #348]	; (35520 <__aeabi_dsub+0x624>)
   353c4:	45b4      	cmp	ip, r6
   353c6:	d04e      	beq.n	35466 <__aeabi_dsub+0x56a>
   353c8:	2680      	movs	r6, #128	; 0x80
   353ca:	0436      	lsls	r6, r6, #16
   353cc:	425b      	negs	r3, r3
   353ce:	4334      	orrs	r4, r6
   353d0:	2b38      	cmp	r3, #56	; 0x38
   353d2:	dd00      	ble.n	353d6 <__aeabi_dsub+0x4da>
   353d4:	e07f      	b.n	354d6 <__aeabi_dsub+0x5da>
   353d6:	2b1f      	cmp	r3, #31
   353d8:	dd00      	ble.n	353dc <__aeabi_dsub+0x4e0>
   353da:	e08b      	b.n	354f4 <__aeabi_dsub+0x5f8>
   353dc:	2620      	movs	r6, #32
   353de:	0027      	movs	r7, r4
   353e0:	4650      	mov	r0, sl
   353e2:	1af6      	subs	r6, r6, r3
   353e4:	40b7      	lsls	r7, r6
   353e6:	40d8      	lsrs	r0, r3
   353e8:	4307      	orrs	r7, r0
   353ea:	4650      	mov	r0, sl
   353ec:	40b0      	lsls	r0, r6
   353ee:	1e46      	subs	r6, r0, #1
   353f0:	41b0      	sbcs	r0, r6
   353f2:	4307      	orrs	r7, r0
   353f4:	40dc      	lsrs	r4, r3
   353f6:	18bf      	adds	r7, r7, r2
   353f8:	e7d6      	b.n	353a8 <__aeabi_dsub+0x4ac>
   353fa:	000d      	movs	r5, r1
   353fc:	4315      	orrs	r5, r2
   353fe:	d100      	bne.n	35402 <__aeabi_dsub+0x506>
   35400:	e602      	b.n	35008 <__aeabi_dsub+0x10c>
   35402:	4650      	mov	r0, sl
   35404:	1a80      	subs	r0, r0, r2
   35406:	4582      	cmp	sl, r0
   35408:	41bf      	sbcs	r7, r7
   3540a:	1a65      	subs	r5, r4, r1
   3540c:	427f      	negs	r7, r7
   3540e:	1bed      	subs	r5, r5, r7
   35410:	4684      	mov	ip, r0
   35412:	0228      	lsls	r0, r5, #8
   35414:	d400      	bmi.n	35418 <__aeabi_dsub+0x51c>
   35416:	e68d      	b.n	35134 <__aeabi_dsub+0x238>
   35418:	4650      	mov	r0, sl
   3541a:	1a17      	subs	r7, r2, r0
   3541c:	42ba      	cmp	r2, r7
   3541e:	4192      	sbcs	r2, r2
   35420:	1b0c      	subs	r4, r1, r4
   35422:	4252      	negs	r2, r2
   35424:	1aa4      	subs	r4, r4, r2
   35426:	4698      	mov	r8, r3
   35428:	e5ee      	b.n	35008 <__aeabi_dsub+0x10c>
   3542a:	000d      	movs	r5, r1
   3542c:	4315      	orrs	r5, r2
   3542e:	d100      	bne.n	35432 <__aeabi_dsub+0x536>
   35430:	e76b      	b.n	3530a <__aeabi_dsub+0x40e>
   35432:	4650      	mov	r0, sl
   35434:	0767      	lsls	r7, r4, #29
   35436:	08c0      	lsrs	r0, r0, #3
   35438:	4307      	orrs	r7, r0
   3543a:	2080      	movs	r0, #128	; 0x80
   3543c:	08e4      	lsrs	r4, r4, #3
   3543e:	0300      	lsls	r0, r0, #12
   35440:	4204      	tst	r4, r0
   35442:	d007      	beq.n	35454 <__aeabi_dsub+0x558>
   35444:	08cd      	lsrs	r5, r1, #3
   35446:	4205      	tst	r5, r0
   35448:	d104      	bne.n	35454 <__aeabi_dsub+0x558>
   3544a:	002c      	movs	r4, r5
   3544c:	4698      	mov	r8, r3
   3544e:	08d7      	lsrs	r7, r2, #3
   35450:	0749      	lsls	r1, r1, #29
   35452:	430f      	orrs	r7, r1
   35454:	0f7b      	lsrs	r3, r7, #29
   35456:	00e4      	lsls	r4, r4, #3
   35458:	431c      	orrs	r4, r3
   3545a:	00ff      	lsls	r7, r7, #3
   3545c:	4e30      	ldr	r6, [pc, #192]	; (35520 <__aeabi_dsub+0x624>)
   3545e:	e5d3      	b.n	35008 <__aeabi_dsub+0x10c>
   35460:	4e2f      	ldr	r6, [pc, #188]	; (35520 <__aeabi_dsub+0x624>)
   35462:	45b4      	cmp	ip, r6
   35464:	d1b4      	bne.n	353d0 <__aeabi_dsub+0x4d4>
   35466:	000c      	movs	r4, r1
   35468:	0017      	movs	r7, r2
   3546a:	4666      	mov	r6, ip
   3546c:	e5cc      	b.n	35008 <__aeabi_dsub+0x10c>
   3546e:	2700      	movs	r7, #0
   35470:	2400      	movs	r4, #0
   35472:	e5e8      	b.n	35046 <__aeabi_dsub+0x14a>
   35474:	2b00      	cmp	r3, #0
   35476:	d039      	beq.n	354ec <__aeabi_dsub+0x5f0>
   35478:	000b      	movs	r3, r1
   3547a:	4313      	orrs	r3, r2
   3547c:	d100      	bne.n	35480 <__aeabi_dsub+0x584>
   3547e:	e744      	b.n	3530a <__aeabi_dsub+0x40e>
   35480:	08c0      	lsrs	r0, r0, #3
   35482:	0767      	lsls	r7, r4, #29
   35484:	4307      	orrs	r7, r0
   35486:	2080      	movs	r0, #128	; 0x80
   35488:	08e4      	lsrs	r4, r4, #3
   3548a:	0300      	lsls	r0, r0, #12
   3548c:	4204      	tst	r4, r0
   3548e:	d0e1      	beq.n	35454 <__aeabi_dsub+0x558>
   35490:	08cb      	lsrs	r3, r1, #3
   35492:	4203      	tst	r3, r0
   35494:	d1de      	bne.n	35454 <__aeabi_dsub+0x558>
   35496:	08d7      	lsrs	r7, r2, #3
   35498:	0749      	lsls	r1, r1, #29
   3549a:	430f      	orrs	r7, r1
   3549c:	001c      	movs	r4, r3
   3549e:	e7d9      	b.n	35454 <__aeabi_dsub+0x558>
   354a0:	2100      	movs	r1, #0
   354a2:	e771      	b.n	35388 <__aeabi_dsub+0x48c>
   354a4:	2500      	movs	r5, #0
   354a6:	2700      	movs	r7, #0
   354a8:	e5e9      	b.n	3507e <__aeabi_dsub+0x182>
   354aa:	002e      	movs	r6, r5
   354ac:	0027      	movs	r7, r4
   354ae:	3e20      	subs	r6, #32
   354b0:	40f7      	lsrs	r7, r6
   354b2:	2d20      	cmp	r5, #32
   354b4:	d02f      	beq.n	35516 <__aeabi_dsub+0x61a>
   354b6:	2640      	movs	r6, #64	; 0x40
   354b8:	1b75      	subs	r5, r6, r5
   354ba:	40ac      	lsls	r4, r5
   354bc:	4650      	mov	r0, sl
   354be:	4320      	orrs	r0, r4
   354c0:	1e44      	subs	r4, r0, #1
   354c2:	41a0      	sbcs	r0, r4
   354c4:	2400      	movs	r4, #0
   354c6:	4338      	orrs	r0, r7
   354c8:	e6dc      	b.n	35284 <__aeabi_dsub+0x388>
   354ca:	2480      	movs	r4, #128	; 0x80
   354cc:	2500      	movs	r5, #0
   354ce:	0324      	lsls	r4, r4, #12
   354d0:	4e13      	ldr	r6, [pc, #76]	; (35520 <__aeabi_dsub+0x624>)
   354d2:	2700      	movs	r7, #0
   354d4:	e5d3      	b.n	3507e <__aeabi_dsub+0x182>
   354d6:	4650      	mov	r0, sl
   354d8:	4320      	orrs	r0, r4
   354da:	0007      	movs	r7, r0
   354dc:	1e78      	subs	r0, r7, #1
   354de:	4187      	sbcs	r7, r0
   354e0:	2400      	movs	r4, #0
   354e2:	18bf      	adds	r7, r7, r2
   354e4:	e760      	b.n	353a8 <__aeabi_dsub+0x4ac>
   354e6:	000c      	movs	r4, r1
   354e8:	0017      	movs	r7, r2
   354ea:	e58d      	b.n	35008 <__aeabi_dsub+0x10c>
   354ec:	000c      	movs	r4, r1
   354ee:	0017      	movs	r7, r2
   354f0:	4e0b      	ldr	r6, [pc, #44]	; (35520 <__aeabi_dsub+0x624>)
   354f2:	e589      	b.n	35008 <__aeabi_dsub+0x10c>
   354f4:	001e      	movs	r6, r3
   354f6:	0027      	movs	r7, r4
   354f8:	3e20      	subs	r6, #32
   354fa:	40f7      	lsrs	r7, r6
   354fc:	2b20      	cmp	r3, #32
   354fe:	d00c      	beq.n	3551a <__aeabi_dsub+0x61e>
   35500:	2640      	movs	r6, #64	; 0x40
   35502:	1af3      	subs	r3, r6, r3
   35504:	409c      	lsls	r4, r3
   35506:	4650      	mov	r0, sl
   35508:	4320      	orrs	r0, r4
   3550a:	1e44      	subs	r4, r0, #1
   3550c:	41a0      	sbcs	r0, r4
   3550e:	4307      	orrs	r7, r0
   35510:	2400      	movs	r4, #0
   35512:	18bf      	adds	r7, r7, r2
   35514:	e748      	b.n	353a8 <__aeabi_dsub+0x4ac>
   35516:	2400      	movs	r4, #0
   35518:	e7d0      	b.n	354bc <__aeabi_dsub+0x5c0>
   3551a:	2400      	movs	r4, #0
   3551c:	e7f3      	b.n	35506 <__aeabi_dsub+0x60a>
   3551e:	46c0      	nop			; (mov r8, r8)
   35520:	000007ff 	.word	0x000007ff
   35524:	ff7fffff 	.word	0xff7fffff

00035528 <__aeabi_d2iz>:
   35528:	b530      	push	{r4, r5, lr}
   3552a:	4d13      	ldr	r5, [pc, #76]	; (35578 <__aeabi_d2iz+0x50>)
   3552c:	030a      	lsls	r2, r1, #12
   3552e:	004b      	lsls	r3, r1, #1
   35530:	0b12      	lsrs	r2, r2, #12
   35532:	0d5b      	lsrs	r3, r3, #21
   35534:	0fc9      	lsrs	r1, r1, #31
   35536:	2400      	movs	r4, #0
   35538:	42ab      	cmp	r3, r5
   3553a:	dd10      	ble.n	3555e <__aeabi_d2iz+0x36>
   3553c:	4c0f      	ldr	r4, [pc, #60]	; (3557c <__aeabi_d2iz+0x54>)
   3553e:	42a3      	cmp	r3, r4
   35540:	dc0f      	bgt.n	35562 <__aeabi_d2iz+0x3a>
   35542:	2480      	movs	r4, #128	; 0x80
   35544:	4d0e      	ldr	r5, [pc, #56]	; (35580 <__aeabi_d2iz+0x58>)
   35546:	0364      	lsls	r4, r4, #13
   35548:	4322      	orrs	r2, r4
   3554a:	1aed      	subs	r5, r5, r3
   3554c:	2d1f      	cmp	r5, #31
   3554e:	dd0b      	ble.n	35568 <__aeabi_d2iz+0x40>
   35550:	480c      	ldr	r0, [pc, #48]	; (35584 <__aeabi_d2iz+0x5c>)
   35552:	1ac3      	subs	r3, r0, r3
   35554:	40da      	lsrs	r2, r3
   35556:	4254      	negs	r4, r2
   35558:	2900      	cmp	r1, #0
   3555a:	d100      	bne.n	3555e <__aeabi_d2iz+0x36>
   3555c:	0014      	movs	r4, r2
   3555e:	0020      	movs	r0, r4
   35560:	bd30      	pop	{r4, r5, pc}
   35562:	4b09      	ldr	r3, [pc, #36]	; (35588 <__aeabi_d2iz+0x60>)
   35564:	18cc      	adds	r4, r1, r3
   35566:	e7fa      	b.n	3555e <__aeabi_d2iz+0x36>
   35568:	4c08      	ldr	r4, [pc, #32]	; (3558c <__aeabi_d2iz+0x64>)
   3556a:	40e8      	lsrs	r0, r5
   3556c:	46a4      	mov	ip, r4
   3556e:	4463      	add	r3, ip
   35570:	409a      	lsls	r2, r3
   35572:	4302      	orrs	r2, r0
   35574:	e7ef      	b.n	35556 <__aeabi_d2iz+0x2e>
   35576:	46c0      	nop			; (mov r8, r8)
   35578:	000003fe 	.word	0x000003fe
   3557c:	0000041d 	.word	0x0000041d
   35580:	00000433 	.word	0x00000433
   35584:	00000413 	.word	0x00000413
   35588:	7fffffff 	.word	0x7fffffff
   3558c:	fffffbed 	.word	0xfffffbed

00035590 <__aeabi_ui2d>:
   35590:	b510      	push	{r4, lr}
   35592:	1e04      	subs	r4, r0, #0
   35594:	d028      	beq.n	355e8 <__aeabi_ui2d+0x58>
   35596:	f000 f833 	bl	35600 <__clzsi2>
   3559a:	4b15      	ldr	r3, [pc, #84]	; (355f0 <__aeabi_ui2d+0x60>)
   3559c:	4a15      	ldr	r2, [pc, #84]	; (355f4 <__aeabi_ui2d+0x64>)
   3559e:	1a1b      	subs	r3, r3, r0
   355a0:	1ad2      	subs	r2, r2, r3
   355a2:	2a1f      	cmp	r2, #31
   355a4:	dd15      	ble.n	355d2 <__aeabi_ui2d+0x42>
   355a6:	4a14      	ldr	r2, [pc, #80]	; (355f8 <__aeabi_ui2d+0x68>)
   355a8:	1ad2      	subs	r2, r2, r3
   355aa:	4094      	lsls	r4, r2
   355ac:	2200      	movs	r2, #0
   355ae:	0324      	lsls	r4, r4, #12
   355b0:	055b      	lsls	r3, r3, #21
   355b2:	0b24      	lsrs	r4, r4, #12
   355b4:	0d5b      	lsrs	r3, r3, #21
   355b6:	2100      	movs	r1, #0
   355b8:	0010      	movs	r0, r2
   355ba:	0324      	lsls	r4, r4, #12
   355bc:	0d0a      	lsrs	r2, r1, #20
   355be:	0b24      	lsrs	r4, r4, #12
   355c0:	0512      	lsls	r2, r2, #20
   355c2:	4322      	orrs	r2, r4
   355c4:	4c0d      	ldr	r4, [pc, #52]	; (355fc <__aeabi_ui2d+0x6c>)
   355c6:	051b      	lsls	r3, r3, #20
   355c8:	4022      	ands	r2, r4
   355ca:	4313      	orrs	r3, r2
   355cc:	005b      	lsls	r3, r3, #1
   355ce:	0859      	lsrs	r1, r3, #1
   355d0:	bd10      	pop	{r4, pc}
   355d2:	0021      	movs	r1, r4
   355d4:	4091      	lsls	r1, r2
   355d6:	000a      	movs	r2, r1
   355d8:	210b      	movs	r1, #11
   355da:	1a08      	subs	r0, r1, r0
   355dc:	40c4      	lsrs	r4, r0
   355de:	055b      	lsls	r3, r3, #21
   355e0:	0324      	lsls	r4, r4, #12
   355e2:	0b24      	lsrs	r4, r4, #12
   355e4:	0d5b      	lsrs	r3, r3, #21
   355e6:	e7e6      	b.n	355b6 <__aeabi_ui2d+0x26>
   355e8:	2300      	movs	r3, #0
   355ea:	2400      	movs	r4, #0
   355ec:	2200      	movs	r2, #0
   355ee:	e7e2      	b.n	355b6 <__aeabi_ui2d+0x26>
   355f0:	0000041e 	.word	0x0000041e
   355f4:	00000433 	.word	0x00000433
   355f8:	00000413 	.word	0x00000413
   355fc:	800fffff 	.word	0x800fffff

00035600 <__clzsi2>:
   35600:	211c      	movs	r1, #28
   35602:	2301      	movs	r3, #1
   35604:	041b      	lsls	r3, r3, #16
   35606:	4298      	cmp	r0, r3
   35608:	d301      	bcc.n	3560e <__clzsi2+0xe>
   3560a:	0c00      	lsrs	r0, r0, #16
   3560c:	3910      	subs	r1, #16
   3560e:	0a1b      	lsrs	r3, r3, #8
   35610:	4298      	cmp	r0, r3
   35612:	d301      	bcc.n	35618 <__clzsi2+0x18>
   35614:	0a00      	lsrs	r0, r0, #8
   35616:	3908      	subs	r1, #8
   35618:	091b      	lsrs	r3, r3, #4
   3561a:	4298      	cmp	r0, r3
   3561c:	d301      	bcc.n	35622 <__clzsi2+0x22>
   3561e:	0900      	lsrs	r0, r0, #4
   35620:	3904      	subs	r1, #4
   35622:	a202      	add	r2, pc, #8	; (adr r2, 3562c <__clzsi2+0x2c>)
   35624:	5c10      	ldrb	r0, [r2, r0]
   35626:	1840      	adds	r0, r0, r1
   35628:	4770      	bx	lr
   3562a:	46c0      	nop			; (mov r8, r8)
   3562c:	02020304 	.word	0x02020304
   35630:	01010101 	.word	0x01010101
	...

0003563c <atoi>:
   3563c:	b510      	push	{r4, lr}
   3563e:	220a      	movs	r2, #10
   35640:	2100      	movs	r1, #0
   35642:	f000 fb0d 	bl	35c60 <strtol>
   35646:	bd10      	pop	{r4, pc}

00035648 <__libc_init_array>:
   35648:	b570      	push	{r4, r5, r6, lr}
   3564a:	2600      	movs	r6, #0
   3564c:	4d0c      	ldr	r5, [pc, #48]	; (35680 <__libc_init_array+0x38>)
   3564e:	4c0d      	ldr	r4, [pc, #52]	; (35684 <__libc_init_array+0x3c>)
   35650:	1b64      	subs	r4, r4, r5
   35652:	10a4      	asrs	r4, r4, #2
   35654:	42a6      	cmp	r6, r4
   35656:	d109      	bne.n	3566c <__libc_init_array+0x24>
   35658:	2600      	movs	r6, #0
   3565a:	f005 febb 	bl	3b3d4 <_init>
   3565e:	4d0a      	ldr	r5, [pc, #40]	; (35688 <__libc_init_array+0x40>)
   35660:	4c0a      	ldr	r4, [pc, #40]	; (3568c <__libc_init_array+0x44>)
   35662:	1b64      	subs	r4, r4, r5
   35664:	10a4      	asrs	r4, r4, #2
   35666:	42a6      	cmp	r6, r4
   35668:	d105      	bne.n	35676 <__libc_init_array+0x2e>
   3566a:	bd70      	pop	{r4, r5, r6, pc}
   3566c:	00b3      	lsls	r3, r6, #2
   3566e:	58eb      	ldr	r3, [r5, r3]
   35670:	4798      	blx	r3
   35672:	3601      	adds	r6, #1
   35674:	e7ee      	b.n	35654 <__libc_init_array+0xc>
   35676:	00b3      	lsls	r3, r6, #2
   35678:	58eb      	ldr	r3, [r5, r3]
   3567a:	4798      	blx	r3
   3567c:	3601      	adds	r6, #1
   3567e:	e7f2      	b.n	35666 <__libc_init_array+0x1e>
   35680:	0003b3e0 	.word	0x0003b3e0
   35684:	0003b3e0 	.word	0x0003b3e0
   35688:	0003b3e0 	.word	0x0003b3e0
   3568c:	0003b3e4 	.word	0x0003b3e4

00035690 <malloc>:
   35690:	b510      	push	{r4, lr}
   35692:	4b03      	ldr	r3, [pc, #12]	; (356a0 <malloc+0x10>)
   35694:	0001      	movs	r1, r0
   35696:	6818      	ldr	r0, [r3, #0]
   35698:	f000 f87c 	bl	35794 <_malloc_r>
   3569c:	bd10      	pop	{r4, pc}
   3569e:	46c0      	nop			; (mov r8, r8)
   356a0:	20000130 	.word	0x20000130

000356a4 <free>:
   356a4:	b510      	push	{r4, lr}
   356a6:	4b03      	ldr	r3, [pc, #12]	; (356b4 <free+0x10>)
   356a8:	0001      	movs	r1, r0
   356aa:	6818      	ldr	r0, [r3, #0]
   356ac:	f000 f828 	bl	35700 <_free_r>
   356b0:	bd10      	pop	{r4, pc}
   356b2:	46c0      	nop			; (mov r8, r8)
   356b4:	20000130 	.word	0x20000130

000356b8 <memcpy>:
   356b8:	2300      	movs	r3, #0
   356ba:	b510      	push	{r4, lr}
   356bc:	429a      	cmp	r2, r3
   356be:	d100      	bne.n	356c2 <memcpy+0xa>
   356c0:	bd10      	pop	{r4, pc}
   356c2:	5ccc      	ldrb	r4, [r1, r3]
   356c4:	54c4      	strb	r4, [r0, r3]
   356c6:	3301      	adds	r3, #1
   356c8:	e7f8      	b.n	356bc <memcpy+0x4>

000356ca <memmove>:
   356ca:	b510      	push	{r4, lr}
   356cc:	4288      	cmp	r0, r1
   356ce:	d902      	bls.n	356d6 <memmove+0xc>
   356d0:	188b      	adds	r3, r1, r2
   356d2:	4298      	cmp	r0, r3
   356d4:	d308      	bcc.n	356e8 <memmove+0x1e>
   356d6:	2300      	movs	r3, #0
   356d8:	429a      	cmp	r2, r3
   356da:	d007      	beq.n	356ec <memmove+0x22>
   356dc:	5ccc      	ldrb	r4, [r1, r3]
   356de:	54c4      	strb	r4, [r0, r3]
   356e0:	3301      	adds	r3, #1
   356e2:	e7f9      	b.n	356d8 <memmove+0xe>
   356e4:	5c8b      	ldrb	r3, [r1, r2]
   356e6:	5483      	strb	r3, [r0, r2]
   356e8:	3a01      	subs	r2, #1
   356ea:	d2fb      	bcs.n	356e4 <memmove+0x1a>
   356ec:	bd10      	pop	{r4, pc}

000356ee <memset>:
   356ee:	0003      	movs	r3, r0
   356f0:	1882      	adds	r2, r0, r2
   356f2:	4293      	cmp	r3, r2
   356f4:	d100      	bne.n	356f8 <memset+0xa>
   356f6:	4770      	bx	lr
   356f8:	7019      	strb	r1, [r3, #0]
   356fa:	3301      	adds	r3, #1
   356fc:	e7f9      	b.n	356f2 <memset+0x4>
	...

00035700 <_free_r>:
   35700:	b570      	push	{r4, r5, r6, lr}
   35702:	0005      	movs	r5, r0
   35704:	2900      	cmp	r1, #0
   35706:	d010      	beq.n	3572a <_free_r+0x2a>
   35708:	1f0c      	subs	r4, r1, #4
   3570a:	6823      	ldr	r3, [r4, #0]
   3570c:	2b00      	cmp	r3, #0
   3570e:	da00      	bge.n	35712 <_free_r+0x12>
   35710:	18e4      	adds	r4, r4, r3
   35712:	0028      	movs	r0, r5
   35714:	f000 fdd8 	bl	362c8 <__malloc_lock>
   35718:	4a1d      	ldr	r2, [pc, #116]	; (35790 <_free_r+0x90>)
   3571a:	6813      	ldr	r3, [r2, #0]
   3571c:	2b00      	cmp	r3, #0
   3571e:	d105      	bne.n	3572c <_free_r+0x2c>
   35720:	6063      	str	r3, [r4, #4]
   35722:	6014      	str	r4, [r2, #0]
   35724:	0028      	movs	r0, r5
   35726:	f000 fdd0 	bl	362ca <__malloc_unlock>
   3572a:	bd70      	pop	{r4, r5, r6, pc}
   3572c:	42a3      	cmp	r3, r4
   3572e:	d909      	bls.n	35744 <_free_r+0x44>
   35730:	6821      	ldr	r1, [r4, #0]
   35732:	1860      	adds	r0, r4, r1
   35734:	4283      	cmp	r3, r0
   35736:	d1f3      	bne.n	35720 <_free_r+0x20>
   35738:	6818      	ldr	r0, [r3, #0]
   3573a:	685b      	ldr	r3, [r3, #4]
   3573c:	1841      	adds	r1, r0, r1
   3573e:	6021      	str	r1, [r4, #0]
   35740:	e7ee      	b.n	35720 <_free_r+0x20>
   35742:	0013      	movs	r3, r2
   35744:	685a      	ldr	r2, [r3, #4]
   35746:	2a00      	cmp	r2, #0
   35748:	d001      	beq.n	3574e <_free_r+0x4e>
   3574a:	42a2      	cmp	r2, r4
   3574c:	d9f9      	bls.n	35742 <_free_r+0x42>
   3574e:	6819      	ldr	r1, [r3, #0]
   35750:	1858      	adds	r0, r3, r1
   35752:	42a0      	cmp	r0, r4
   35754:	d10b      	bne.n	3576e <_free_r+0x6e>
   35756:	6820      	ldr	r0, [r4, #0]
   35758:	1809      	adds	r1, r1, r0
   3575a:	1858      	adds	r0, r3, r1
   3575c:	6019      	str	r1, [r3, #0]
   3575e:	4282      	cmp	r2, r0
   35760:	d1e0      	bne.n	35724 <_free_r+0x24>
   35762:	6810      	ldr	r0, [r2, #0]
   35764:	6852      	ldr	r2, [r2, #4]
   35766:	1841      	adds	r1, r0, r1
   35768:	6019      	str	r1, [r3, #0]
   3576a:	605a      	str	r2, [r3, #4]
   3576c:	e7da      	b.n	35724 <_free_r+0x24>
   3576e:	42a0      	cmp	r0, r4
   35770:	d902      	bls.n	35778 <_free_r+0x78>
   35772:	230c      	movs	r3, #12
   35774:	602b      	str	r3, [r5, #0]
   35776:	e7d5      	b.n	35724 <_free_r+0x24>
   35778:	6821      	ldr	r1, [r4, #0]
   3577a:	1860      	adds	r0, r4, r1
   3577c:	4282      	cmp	r2, r0
   3577e:	d103      	bne.n	35788 <_free_r+0x88>
   35780:	6810      	ldr	r0, [r2, #0]
   35782:	6852      	ldr	r2, [r2, #4]
   35784:	1841      	adds	r1, r0, r1
   35786:	6021      	str	r1, [r4, #0]
   35788:	6062      	str	r2, [r4, #4]
   3578a:	605c      	str	r4, [r3, #4]
   3578c:	e7ca      	b.n	35724 <_free_r+0x24>
   3578e:	46c0      	nop			; (mov r8, r8)
   35790:	2000472c 	.word	0x2000472c

00035794 <_malloc_r>:
   35794:	2303      	movs	r3, #3
   35796:	b570      	push	{r4, r5, r6, lr}
   35798:	1ccd      	adds	r5, r1, #3
   3579a:	439d      	bics	r5, r3
   3579c:	3508      	adds	r5, #8
   3579e:	0006      	movs	r6, r0
   357a0:	2d0c      	cmp	r5, #12
   357a2:	d21e      	bcs.n	357e2 <_malloc_r+0x4e>
   357a4:	250c      	movs	r5, #12
   357a6:	42a9      	cmp	r1, r5
   357a8:	d81d      	bhi.n	357e6 <_malloc_r+0x52>
   357aa:	0030      	movs	r0, r6
   357ac:	f000 fd8c 	bl	362c8 <__malloc_lock>
   357b0:	4a25      	ldr	r2, [pc, #148]	; (35848 <_malloc_r+0xb4>)
   357b2:	6814      	ldr	r4, [r2, #0]
   357b4:	0021      	movs	r1, r4
   357b6:	2900      	cmp	r1, #0
   357b8:	d119      	bne.n	357ee <_malloc_r+0x5a>
   357ba:	4c24      	ldr	r4, [pc, #144]	; (3584c <_malloc_r+0xb8>)
   357bc:	6823      	ldr	r3, [r4, #0]
   357be:	2b00      	cmp	r3, #0
   357c0:	d103      	bne.n	357ca <_malloc_r+0x36>
   357c2:	0030      	movs	r0, r6
   357c4:	f000 f8ae 	bl	35924 <_sbrk_r>
   357c8:	6020      	str	r0, [r4, #0]
   357ca:	0029      	movs	r1, r5
   357cc:	0030      	movs	r0, r6
   357ce:	f000 f8a9 	bl	35924 <_sbrk_r>
   357d2:	1c43      	adds	r3, r0, #1
   357d4:	d12c      	bne.n	35830 <_malloc_r+0x9c>
   357d6:	230c      	movs	r3, #12
   357d8:	0030      	movs	r0, r6
   357da:	6033      	str	r3, [r6, #0]
   357dc:	f000 fd75 	bl	362ca <__malloc_unlock>
   357e0:	e003      	b.n	357ea <_malloc_r+0x56>
   357e2:	2d00      	cmp	r5, #0
   357e4:	dadf      	bge.n	357a6 <_malloc_r+0x12>
   357e6:	230c      	movs	r3, #12
   357e8:	6033      	str	r3, [r6, #0]
   357ea:	2000      	movs	r0, #0
   357ec:	bd70      	pop	{r4, r5, r6, pc}
   357ee:	680b      	ldr	r3, [r1, #0]
   357f0:	1b5b      	subs	r3, r3, r5
   357f2:	d41a      	bmi.n	3582a <_malloc_r+0x96>
   357f4:	2b0b      	cmp	r3, #11
   357f6:	d903      	bls.n	35800 <_malloc_r+0x6c>
   357f8:	600b      	str	r3, [r1, #0]
   357fa:	18cc      	adds	r4, r1, r3
   357fc:	6025      	str	r5, [r4, #0]
   357fe:	e003      	b.n	35808 <_malloc_r+0x74>
   35800:	428c      	cmp	r4, r1
   35802:	d10e      	bne.n	35822 <_malloc_r+0x8e>
   35804:	6863      	ldr	r3, [r4, #4]
   35806:	6013      	str	r3, [r2, #0]
   35808:	0030      	movs	r0, r6
   3580a:	f000 fd5e 	bl	362ca <__malloc_unlock>
   3580e:	0020      	movs	r0, r4
   35810:	2207      	movs	r2, #7
   35812:	300b      	adds	r0, #11
   35814:	1d23      	adds	r3, r4, #4
   35816:	4390      	bics	r0, r2
   35818:	1ac3      	subs	r3, r0, r3
   3581a:	d0e7      	beq.n	357ec <_malloc_r+0x58>
   3581c:	425a      	negs	r2, r3
   3581e:	50e2      	str	r2, [r4, r3]
   35820:	e7e4      	b.n	357ec <_malloc_r+0x58>
   35822:	684b      	ldr	r3, [r1, #4]
   35824:	6063      	str	r3, [r4, #4]
   35826:	000c      	movs	r4, r1
   35828:	e7ee      	b.n	35808 <_malloc_r+0x74>
   3582a:	000c      	movs	r4, r1
   3582c:	6849      	ldr	r1, [r1, #4]
   3582e:	e7c2      	b.n	357b6 <_malloc_r+0x22>
   35830:	2303      	movs	r3, #3
   35832:	1cc4      	adds	r4, r0, #3
   35834:	439c      	bics	r4, r3
   35836:	42a0      	cmp	r0, r4
   35838:	d0e0      	beq.n	357fc <_malloc_r+0x68>
   3583a:	1a21      	subs	r1, r4, r0
   3583c:	0030      	movs	r0, r6
   3583e:	f000 f871 	bl	35924 <_sbrk_r>
   35842:	1c43      	adds	r3, r0, #1
   35844:	d1da      	bne.n	357fc <_malloc_r+0x68>
   35846:	e7c6      	b.n	357d6 <_malloc_r+0x42>
   35848:	2000472c 	.word	0x2000472c
   3584c:	20004730 	.word	0x20004730

00035850 <_puts_r>:
   35850:	b570      	push	{r4, r5, r6, lr}
   35852:	0005      	movs	r5, r0
   35854:	000e      	movs	r6, r1
   35856:	2800      	cmp	r0, #0
   35858:	d004      	beq.n	35864 <_puts_r+0x14>
   3585a:	6983      	ldr	r3, [r0, #24]
   3585c:	2b00      	cmp	r3, #0
   3585e:	d101      	bne.n	35864 <_puts_r+0x14>
   35860:	f000 fc0e 	bl	36080 <__sinit>
   35864:	69ab      	ldr	r3, [r5, #24]
   35866:	68ac      	ldr	r4, [r5, #8]
   35868:	2b00      	cmp	r3, #0
   3586a:	d102      	bne.n	35872 <_puts_r+0x22>
   3586c:	0028      	movs	r0, r5
   3586e:	f000 fc07 	bl	36080 <__sinit>
   35872:	4b24      	ldr	r3, [pc, #144]	; (35904 <_puts_r+0xb4>)
   35874:	429c      	cmp	r4, r3
   35876:	d10f      	bne.n	35898 <_puts_r+0x48>
   35878:	686c      	ldr	r4, [r5, #4]
   3587a:	89a3      	ldrh	r3, [r4, #12]
   3587c:	071b      	lsls	r3, r3, #28
   3587e:	d502      	bpl.n	35886 <_puts_r+0x36>
   35880:	6923      	ldr	r3, [r4, #16]
   35882:	2b00      	cmp	r3, #0
   35884:	d120      	bne.n	358c8 <_puts_r+0x78>
   35886:	0021      	movs	r1, r4
   35888:	0028      	movs	r0, r5
   3588a:	f000 fa8b 	bl	35da4 <__swsetup_r>
   3588e:	2800      	cmp	r0, #0
   35890:	d01a      	beq.n	358c8 <_puts_r+0x78>
   35892:	2001      	movs	r0, #1
   35894:	4240      	negs	r0, r0
   35896:	bd70      	pop	{r4, r5, r6, pc}
   35898:	4b1b      	ldr	r3, [pc, #108]	; (35908 <_puts_r+0xb8>)
   3589a:	429c      	cmp	r4, r3
   3589c:	d101      	bne.n	358a2 <_puts_r+0x52>
   3589e:	68ac      	ldr	r4, [r5, #8]
   358a0:	e7eb      	b.n	3587a <_puts_r+0x2a>
   358a2:	4b1a      	ldr	r3, [pc, #104]	; (3590c <_puts_r+0xbc>)
   358a4:	429c      	cmp	r4, r3
   358a6:	d1e8      	bne.n	3587a <_puts_r+0x2a>
   358a8:	68ec      	ldr	r4, [r5, #12]
   358aa:	e7e6      	b.n	3587a <_puts_r+0x2a>
   358ac:	3b01      	subs	r3, #1
   358ae:	3601      	adds	r6, #1
   358b0:	60a3      	str	r3, [r4, #8]
   358b2:	2b00      	cmp	r3, #0
   358b4:	da04      	bge.n	358c0 <_puts_r+0x70>
   358b6:	69a2      	ldr	r2, [r4, #24]
   358b8:	4293      	cmp	r3, r2
   358ba:	db16      	blt.n	358ea <_puts_r+0x9a>
   358bc:	290a      	cmp	r1, #10
   358be:	d014      	beq.n	358ea <_puts_r+0x9a>
   358c0:	6823      	ldr	r3, [r4, #0]
   358c2:	1c5a      	adds	r2, r3, #1
   358c4:	6022      	str	r2, [r4, #0]
   358c6:	7019      	strb	r1, [r3, #0]
   358c8:	7831      	ldrb	r1, [r6, #0]
   358ca:	68a3      	ldr	r3, [r4, #8]
   358cc:	2900      	cmp	r1, #0
   358ce:	d1ed      	bne.n	358ac <_puts_r+0x5c>
   358d0:	3b01      	subs	r3, #1
   358d2:	60a3      	str	r3, [r4, #8]
   358d4:	2b00      	cmp	r3, #0
   358d6:	da0f      	bge.n	358f8 <_puts_r+0xa8>
   358d8:	0022      	movs	r2, r4
   358da:	310a      	adds	r1, #10
   358dc:	0028      	movs	r0, r5
   358de:	f000 fa0b 	bl	35cf8 <__swbuf_r>
   358e2:	1c43      	adds	r3, r0, #1
   358e4:	d0d5      	beq.n	35892 <_puts_r+0x42>
   358e6:	200a      	movs	r0, #10
   358e8:	e7d5      	b.n	35896 <_puts_r+0x46>
   358ea:	0022      	movs	r2, r4
   358ec:	0028      	movs	r0, r5
   358ee:	f000 fa03 	bl	35cf8 <__swbuf_r>
   358f2:	1c43      	adds	r3, r0, #1
   358f4:	d1e8      	bne.n	358c8 <_puts_r+0x78>
   358f6:	e7cc      	b.n	35892 <_puts_r+0x42>
   358f8:	200a      	movs	r0, #10
   358fa:	6823      	ldr	r3, [r4, #0]
   358fc:	1c5a      	adds	r2, r3, #1
   358fe:	6022      	str	r2, [r4, #0]
   35900:	7018      	strb	r0, [r3, #0]
   35902:	e7c8      	b.n	35896 <_puts_r+0x46>
   35904:	0003b254 	.word	0x0003b254
   35908:	0003b274 	.word	0x0003b274
   3590c:	0003b234 	.word	0x0003b234

00035910 <puts>:
   35910:	b510      	push	{r4, lr}
   35912:	4b03      	ldr	r3, [pc, #12]	; (35920 <puts+0x10>)
   35914:	0001      	movs	r1, r0
   35916:	6818      	ldr	r0, [r3, #0]
   35918:	f7ff ff9a 	bl	35850 <_puts_r>
   3591c:	bd10      	pop	{r4, pc}
   3591e:	46c0      	nop			; (mov r8, r8)
   35920:	20000130 	.word	0x20000130

00035924 <_sbrk_r>:
   35924:	2300      	movs	r3, #0
   35926:	b570      	push	{r4, r5, r6, lr}
   35928:	4c06      	ldr	r4, [pc, #24]	; (35944 <_sbrk_r+0x20>)
   3592a:	0005      	movs	r5, r0
   3592c:	0008      	movs	r0, r1
   3592e:	6023      	str	r3, [r4, #0]
   35930:	f7f6 fa98 	bl	2be64 <_sbrk>
   35934:	1c43      	adds	r3, r0, #1
   35936:	d103      	bne.n	35940 <_sbrk_r+0x1c>
   35938:	6823      	ldr	r3, [r4, #0]
   3593a:	2b00      	cmp	r3, #0
   3593c:	d000      	beq.n	35940 <_sbrk_r+0x1c>
   3593e:	602b      	str	r3, [r5, #0]
   35940:	bd70      	pop	{r4, r5, r6, pc}
   35942:	46c0      	nop			; (mov r8, r8)
   35944:	20005d24 	.word	0x20005d24

00035948 <sniprintf>:
   35948:	b40c      	push	{r2, r3}
   3594a:	b530      	push	{r4, r5, lr}
   3594c:	4b16      	ldr	r3, [pc, #88]	; (359a8 <sniprintf+0x60>)
   3594e:	b09d      	sub	sp, #116	; 0x74
   35950:	1e0c      	subs	r4, r1, #0
   35952:	681d      	ldr	r5, [r3, #0]
   35954:	da08      	bge.n	35968 <sniprintf+0x20>
   35956:	238b      	movs	r3, #139	; 0x8b
   35958:	2001      	movs	r0, #1
   3595a:	602b      	str	r3, [r5, #0]
   3595c:	4240      	negs	r0, r0
   3595e:	b01d      	add	sp, #116	; 0x74
   35960:	bc30      	pop	{r4, r5}
   35962:	bc08      	pop	{r3}
   35964:	b002      	add	sp, #8
   35966:	4718      	bx	r3
   35968:	2382      	movs	r3, #130	; 0x82
   3596a:	a902      	add	r1, sp, #8
   3596c:	009b      	lsls	r3, r3, #2
   3596e:	818b      	strh	r3, [r1, #12]
   35970:	2300      	movs	r3, #0
   35972:	9002      	str	r0, [sp, #8]
   35974:	6108      	str	r0, [r1, #16]
   35976:	429c      	cmp	r4, r3
   35978:	d000      	beq.n	3597c <sniprintf+0x34>
   3597a:	1e63      	subs	r3, r4, #1
   3597c:	608b      	str	r3, [r1, #8]
   3597e:	614b      	str	r3, [r1, #20]
   35980:	2301      	movs	r3, #1
   35982:	425b      	negs	r3, r3
   35984:	81cb      	strh	r3, [r1, #14]
   35986:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35988:	ab21      	add	r3, sp, #132	; 0x84
   3598a:	0028      	movs	r0, r5
   3598c:	9301      	str	r3, [sp, #4]
   3598e:	f000 fcff 	bl	36390 <_svfiprintf_r>
   35992:	1c43      	adds	r3, r0, #1
   35994:	da01      	bge.n	3599a <sniprintf+0x52>
   35996:	238b      	movs	r3, #139	; 0x8b
   35998:	602b      	str	r3, [r5, #0]
   3599a:	2c00      	cmp	r4, #0
   3599c:	d0df      	beq.n	3595e <sniprintf+0x16>
   3599e:	2300      	movs	r3, #0
   359a0:	9a02      	ldr	r2, [sp, #8]
   359a2:	7013      	strb	r3, [r2, #0]
   359a4:	e7db      	b.n	3595e <sniprintf+0x16>
   359a6:	46c0      	nop			; (mov r8, r8)
   359a8:	20000130 	.word	0x20000130

000359ac <siprintf>:
   359ac:	b40e      	push	{r1, r2, r3}
   359ae:	b510      	push	{r4, lr}
   359b0:	b09d      	sub	sp, #116	; 0x74
   359b2:	a902      	add	r1, sp, #8
   359b4:	9002      	str	r0, [sp, #8]
   359b6:	6108      	str	r0, [r1, #16]
   359b8:	480b      	ldr	r0, [pc, #44]	; (359e8 <siprintf+0x3c>)
   359ba:	2482      	movs	r4, #130	; 0x82
   359bc:	6088      	str	r0, [r1, #8]
   359be:	6148      	str	r0, [r1, #20]
   359c0:	2001      	movs	r0, #1
   359c2:	4240      	negs	r0, r0
   359c4:	ab1f      	add	r3, sp, #124	; 0x7c
   359c6:	81c8      	strh	r0, [r1, #14]
   359c8:	4808      	ldr	r0, [pc, #32]	; (359ec <siprintf+0x40>)
   359ca:	cb04      	ldmia	r3!, {r2}
   359cc:	00a4      	lsls	r4, r4, #2
   359ce:	6800      	ldr	r0, [r0, #0]
   359d0:	9301      	str	r3, [sp, #4]
   359d2:	818c      	strh	r4, [r1, #12]
   359d4:	f000 fcdc 	bl	36390 <_svfiprintf_r>
   359d8:	2300      	movs	r3, #0
   359da:	9a02      	ldr	r2, [sp, #8]
   359dc:	7013      	strb	r3, [r2, #0]
   359de:	b01d      	add	sp, #116	; 0x74
   359e0:	bc10      	pop	{r4}
   359e2:	bc08      	pop	{r3}
   359e4:	b003      	add	sp, #12
   359e6:	4718      	bx	r3
   359e8:	7fffffff 	.word	0x7fffffff
   359ec:	20000130 	.word	0x20000130

000359f0 <strcasecmp>:
   359f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   359f2:	0007      	movs	r7, r0
   359f4:	000e      	movs	r6, r1
   359f6:	783c      	ldrb	r4, [r7, #0]
   359f8:	f000 fbda 	bl	361b0 <__locale_ctype_ptr>
   359fc:	2203      	movs	r2, #3
   359fe:	1900      	adds	r0, r0, r4
   35a00:	7843      	ldrb	r3, [r0, #1]
   35a02:	4013      	ands	r3, r2
   35a04:	2b01      	cmp	r3, #1
   35a06:	d100      	bne.n	35a0a <strcasecmp+0x1a>
   35a08:	3420      	adds	r4, #32
   35a0a:	7835      	ldrb	r5, [r6, #0]
   35a0c:	f000 fbd0 	bl	361b0 <__locale_ctype_ptr>
   35a10:	2203      	movs	r2, #3
   35a12:	1940      	adds	r0, r0, r5
   35a14:	7843      	ldrb	r3, [r0, #1]
   35a16:	4013      	ands	r3, r2
   35a18:	2b01      	cmp	r3, #1
   35a1a:	d100      	bne.n	35a1e <strcasecmp+0x2e>
   35a1c:	3520      	adds	r5, #32
   35a1e:	1b60      	subs	r0, r4, r5
   35a20:	d103      	bne.n	35a2a <strcasecmp+0x3a>
   35a22:	3701      	adds	r7, #1
   35a24:	3601      	adds	r6, #1
   35a26:	2d00      	cmp	r5, #0
   35a28:	d1e5      	bne.n	359f6 <strcasecmp+0x6>
   35a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035a2c <strcat>:
   35a2c:	0002      	movs	r2, r0
   35a2e:	b510      	push	{r4, lr}
   35a30:	7813      	ldrb	r3, [r2, #0]
   35a32:	2b00      	cmp	r3, #0
   35a34:	d105      	bne.n	35a42 <strcat+0x16>
   35a36:	5ccc      	ldrb	r4, [r1, r3]
   35a38:	54d4      	strb	r4, [r2, r3]
   35a3a:	3301      	adds	r3, #1
   35a3c:	2c00      	cmp	r4, #0
   35a3e:	d1fa      	bne.n	35a36 <strcat+0xa>
   35a40:	bd10      	pop	{r4, pc}
   35a42:	3201      	adds	r2, #1
   35a44:	e7f4      	b.n	35a30 <strcat+0x4>

00035a46 <strcmp>:
   35a46:	7802      	ldrb	r2, [r0, #0]
   35a48:	780b      	ldrb	r3, [r1, #0]
   35a4a:	2a00      	cmp	r2, #0
   35a4c:	d003      	beq.n	35a56 <strcmp+0x10>
   35a4e:	3001      	adds	r0, #1
   35a50:	3101      	adds	r1, #1
   35a52:	429a      	cmp	r2, r3
   35a54:	d0f7      	beq.n	35a46 <strcmp>
   35a56:	1ad0      	subs	r0, r2, r3
   35a58:	4770      	bx	lr

00035a5a <strcpy>:
   35a5a:	1c03      	adds	r3, r0, #0
   35a5c:	780a      	ldrb	r2, [r1, #0]
   35a5e:	3101      	adds	r1, #1
   35a60:	701a      	strb	r2, [r3, #0]
   35a62:	3301      	adds	r3, #1
   35a64:	2a00      	cmp	r2, #0
   35a66:	d1f9      	bne.n	35a5c <strcpy+0x2>
   35a68:	4770      	bx	lr
	...

00035a6c <strdup>:
   35a6c:	b510      	push	{r4, lr}
   35a6e:	4b03      	ldr	r3, [pc, #12]	; (35a7c <strdup+0x10>)
   35a70:	0001      	movs	r1, r0
   35a72:	6818      	ldr	r0, [r3, #0]
   35a74:	f000 f804 	bl	35a80 <_strdup_r>
   35a78:	bd10      	pop	{r4, pc}
   35a7a:	46c0      	nop			; (mov r8, r8)
   35a7c:	20000130 	.word	0x20000130

00035a80 <_strdup_r>:
   35a80:	b570      	push	{r4, r5, r6, lr}
   35a82:	0005      	movs	r5, r0
   35a84:	0008      	movs	r0, r1
   35a86:	000e      	movs	r6, r1
   35a88:	f000 f80d 	bl	35aa6 <strlen>
   35a8c:	1c44      	adds	r4, r0, #1
   35a8e:	0021      	movs	r1, r4
   35a90:	0028      	movs	r0, r5
   35a92:	f7ff fe7f 	bl	35794 <_malloc_r>
   35a96:	1e05      	subs	r5, r0, #0
   35a98:	d003      	beq.n	35aa2 <_strdup_r+0x22>
   35a9a:	0022      	movs	r2, r4
   35a9c:	0031      	movs	r1, r6
   35a9e:	f7ff fe0b 	bl	356b8 <memcpy>
   35aa2:	0028      	movs	r0, r5
   35aa4:	bd70      	pop	{r4, r5, r6, pc}

00035aa6 <strlen>:
   35aa6:	2300      	movs	r3, #0
   35aa8:	5cc2      	ldrb	r2, [r0, r3]
   35aaa:	3301      	adds	r3, #1
   35aac:	2a00      	cmp	r2, #0
   35aae:	d1fb      	bne.n	35aa8 <strlen+0x2>
   35ab0:	1e58      	subs	r0, r3, #1
   35ab2:	4770      	bx	lr

00035ab4 <strncmp>:
   35ab4:	2300      	movs	r3, #0
   35ab6:	b530      	push	{r4, r5, lr}
   35ab8:	429a      	cmp	r2, r3
   35aba:	d00a      	beq.n	35ad2 <strncmp+0x1e>
   35abc:	3a01      	subs	r2, #1
   35abe:	5cc4      	ldrb	r4, [r0, r3]
   35ac0:	5ccd      	ldrb	r5, [r1, r3]
   35ac2:	42ac      	cmp	r4, r5
   35ac4:	d104      	bne.n	35ad0 <strncmp+0x1c>
   35ac6:	429a      	cmp	r2, r3
   35ac8:	d002      	beq.n	35ad0 <strncmp+0x1c>
   35aca:	3301      	adds	r3, #1
   35acc:	2c00      	cmp	r4, #0
   35ace:	d1f6      	bne.n	35abe <strncmp+0xa>
   35ad0:	1b63      	subs	r3, r4, r5
   35ad2:	0018      	movs	r0, r3
   35ad4:	bd30      	pop	{r4, r5, pc}

00035ad6 <strncpy>:
   35ad6:	b570      	push	{r4, r5, r6, lr}
   35ad8:	0004      	movs	r4, r0
   35ada:	2a00      	cmp	r2, #0
   35adc:	d100      	bne.n	35ae0 <strncpy+0xa>
   35ade:	bd70      	pop	{r4, r5, r6, pc}
   35ae0:	780d      	ldrb	r5, [r1, #0]
   35ae2:	1e56      	subs	r6, r2, #1
   35ae4:	1c63      	adds	r3, r4, #1
   35ae6:	7025      	strb	r5, [r4, #0]
   35ae8:	3101      	adds	r1, #1
   35aea:	2d00      	cmp	r5, #0
   35aec:	d105      	bne.n	35afa <strncpy+0x24>
   35aee:	18a4      	adds	r4, r4, r2
   35af0:	429c      	cmp	r4, r3
   35af2:	d0f4      	beq.n	35ade <strncpy+0x8>
   35af4:	701d      	strb	r5, [r3, #0]
   35af6:	3301      	adds	r3, #1
   35af8:	e7fa      	b.n	35af0 <strncpy+0x1a>
   35afa:	001c      	movs	r4, r3
   35afc:	0032      	movs	r2, r6
   35afe:	e7ec      	b.n	35ada <strncpy+0x4>

00035b00 <strrchr>:
   35b00:	b570      	push	{r4, r5, r6, lr}
   35b02:	000d      	movs	r5, r1
   35b04:	2400      	movs	r4, #0
   35b06:	2900      	cmp	r1, #0
   35b08:	d105      	bne.n	35b16 <strrchr+0x16>
   35b0a:	f000 ff19 	bl	36940 <strchr>
   35b0e:	0004      	movs	r4, r0
   35b10:	e006      	b.n	35b20 <strrchr+0x20>
   35b12:	001c      	movs	r4, r3
   35b14:	1c58      	adds	r0, r3, #1
   35b16:	0029      	movs	r1, r5
   35b18:	f000 ff12 	bl	36940 <strchr>
   35b1c:	1e03      	subs	r3, r0, #0
   35b1e:	d1f8      	bne.n	35b12 <strrchr+0x12>
   35b20:	0020      	movs	r0, r4
   35b22:	bd70      	pop	{r4, r5, r6, pc}

00035b24 <strstr>:
   35b24:	b510      	push	{r4, lr}
   35b26:	0002      	movs	r2, r0
   35b28:	7800      	ldrb	r0, [r0, #0]
   35b2a:	2800      	cmp	r0, #0
   35b2c:	d104      	bne.n	35b38 <strstr+0x14>
   35b2e:	7809      	ldrb	r1, [r1, #0]
   35b30:	2900      	cmp	r1, #0
   35b32:	d00d      	beq.n	35b50 <strstr+0x2c>
   35b34:	bd10      	pop	{r4, pc}
   35b36:	3201      	adds	r2, #1
   35b38:	7810      	ldrb	r0, [r2, #0]
   35b3a:	2800      	cmp	r0, #0
   35b3c:	d0fa      	beq.n	35b34 <strstr+0x10>
   35b3e:	2300      	movs	r3, #0
   35b40:	5cc8      	ldrb	r0, [r1, r3]
   35b42:	2800      	cmp	r0, #0
   35b44:	d004      	beq.n	35b50 <strstr+0x2c>
   35b46:	5cd4      	ldrb	r4, [r2, r3]
   35b48:	4284      	cmp	r4, r0
   35b4a:	d1f4      	bne.n	35b36 <strstr+0x12>
   35b4c:	3301      	adds	r3, #1
   35b4e:	e7f7      	b.n	35b40 <strstr+0x1c>
   35b50:	0010      	movs	r0, r2
   35b52:	e7ef      	b.n	35b34 <strstr+0x10>

00035b54 <_strtol_l.isra.0>:
   35b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   35b56:	001f      	movs	r7, r3
   35b58:	000e      	movs	r6, r1
   35b5a:	b087      	sub	sp, #28
   35b5c:	9005      	str	r0, [sp, #20]
   35b5e:	9103      	str	r1, [sp, #12]
   35b60:	9202      	str	r2, [sp, #8]
   35b62:	980c      	ldr	r0, [sp, #48]	; 0x30
   35b64:	7834      	ldrb	r4, [r6, #0]
   35b66:	f000 fb20 	bl	361aa <__locale_ctype_ptr_l>
   35b6a:	2208      	movs	r2, #8
   35b6c:	1900      	adds	r0, r0, r4
   35b6e:	7843      	ldrb	r3, [r0, #1]
   35b70:	1c75      	adds	r5, r6, #1
   35b72:	4013      	ands	r3, r2
   35b74:	d10c      	bne.n	35b90 <_strtol_l.isra.0+0x3c>
   35b76:	2c2d      	cmp	r4, #45	; 0x2d
   35b78:	d10c      	bne.n	35b94 <_strtol_l.isra.0+0x40>
   35b7a:	3301      	adds	r3, #1
   35b7c:	782c      	ldrb	r4, [r5, #0]
   35b7e:	9301      	str	r3, [sp, #4]
   35b80:	1cb5      	adds	r5, r6, #2
   35b82:	2f00      	cmp	r7, #0
   35b84:	d00c      	beq.n	35ba0 <_strtol_l.isra.0+0x4c>
   35b86:	2f10      	cmp	r7, #16
   35b88:	d114      	bne.n	35bb4 <_strtol_l.isra.0+0x60>
   35b8a:	2c30      	cmp	r4, #48	; 0x30
   35b8c:	d00a      	beq.n	35ba4 <_strtol_l.isra.0+0x50>
   35b8e:	e011      	b.n	35bb4 <_strtol_l.isra.0+0x60>
   35b90:	002e      	movs	r6, r5
   35b92:	e7e6      	b.n	35b62 <_strtol_l.isra.0+0xe>
   35b94:	9301      	str	r3, [sp, #4]
   35b96:	2c2b      	cmp	r4, #43	; 0x2b
   35b98:	d1f3      	bne.n	35b82 <_strtol_l.isra.0+0x2e>
   35b9a:	782c      	ldrb	r4, [r5, #0]
   35b9c:	1cb5      	adds	r5, r6, #2
   35b9e:	e7f0      	b.n	35b82 <_strtol_l.isra.0+0x2e>
   35ba0:	2c30      	cmp	r4, #48	; 0x30
   35ba2:	d12f      	bne.n	35c04 <_strtol_l.isra.0+0xb0>
   35ba4:	2220      	movs	r2, #32
   35ba6:	782b      	ldrb	r3, [r5, #0]
   35ba8:	4393      	bics	r3, r2
   35baa:	2b58      	cmp	r3, #88	; 0x58
   35bac:	d151      	bne.n	35c52 <_strtol_l.isra.0+0xfe>
   35bae:	2710      	movs	r7, #16
   35bb0:	786c      	ldrb	r4, [r5, #1]
   35bb2:	3502      	adds	r5, #2
   35bb4:	9b01      	ldr	r3, [sp, #4]
   35bb6:	4a29      	ldr	r2, [pc, #164]	; (35c5c <_strtol_l.isra.0+0x108>)
   35bb8:	0039      	movs	r1, r7
   35bba:	189e      	adds	r6, r3, r2
   35bbc:	0030      	movs	r0, r6
   35bbe:	f7fd fe2f 	bl	33820 <__aeabi_uidivmod>
   35bc2:	0030      	movs	r0, r6
   35bc4:	9104      	str	r1, [sp, #16]
   35bc6:	0039      	movs	r1, r7
   35bc8:	f7fd fda4 	bl	33714 <__udivsi3>
   35bcc:	2101      	movs	r1, #1
   35bce:	2300      	movs	r3, #0
   35bd0:	4249      	negs	r1, r1
   35bd2:	0002      	movs	r2, r0
   35bd4:	468c      	mov	ip, r1
   35bd6:	0018      	movs	r0, r3
   35bd8:	0021      	movs	r1, r4
   35bda:	3930      	subs	r1, #48	; 0x30
   35bdc:	2909      	cmp	r1, #9
   35bde:	d813      	bhi.n	35c08 <_strtol_l.isra.0+0xb4>
   35be0:	000c      	movs	r4, r1
   35be2:	42a7      	cmp	r7, r4
   35be4:	dd1c      	ble.n	35c20 <_strtol_l.isra.0+0xcc>
   35be6:	1c59      	adds	r1, r3, #1
   35be8:	d009      	beq.n	35bfe <_strtol_l.isra.0+0xaa>
   35bea:	4663      	mov	r3, ip
   35bec:	4282      	cmp	r2, r0
   35bee:	d306      	bcc.n	35bfe <_strtol_l.isra.0+0xaa>
   35bf0:	d102      	bne.n	35bf8 <_strtol_l.isra.0+0xa4>
   35bf2:	9904      	ldr	r1, [sp, #16]
   35bf4:	42a1      	cmp	r1, r4
   35bf6:	db02      	blt.n	35bfe <_strtol_l.isra.0+0xaa>
   35bf8:	2301      	movs	r3, #1
   35bfa:	4378      	muls	r0, r7
   35bfc:	1820      	adds	r0, r4, r0
   35bfe:	782c      	ldrb	r4, [r5, #0]
   35c00:	3501      	adds	r5, #1
   35c02:	e7e9      	b.n	35bd8 <_strtol_l.isra.0+0x84>
   35c04:	270a      	movs	r7, #10
   35c06:	e7d5      	b.n	35bb4 <_strtol_l.isra.0+0x60>
   35c08:	0021      	movs	r1, r4
   35c0a:	3941      	subs	r1, #65	; 0x41
   35c0c:	2919      	cmp	r1, #25
   35c0e:	d801      	bhi.n	35c14 <_strtol_l.isra.0+0xc0>
   35c10:	3c37      	subs	r4, #55	; 0x37
   35c12:	e7e6      	b.n	35be2 <_strtol_l.isra.0+0x8e>
   35c14:	0021      	movs	r1, r4
   35c16:	3961      	subs	r1, #97	; 0x61
   35c18:	2919      	cmp	r1, #25
   35c1a:	d801      	bhi.n	35c20 <_strtol_l.isra.0+0xcc>
   35c1c:	3c57      	subs	r4, #87	; 0x57
   35c1e:	e7e0      	b.n	35be2 <_strtol_l.isra.0+0x8e>
   35c20:	1c5a      	adds	r2, r3, #1
   35c22:	d108      	bne.n	35c36 <_strtol_l.isra.0+0xe2>
   35c24:	9a05      	ldr	r2, [sp, #20]
   35c26:	3323      	adds	r3, #35	; 0x23
   35c28:	6013      	str	r3, [r2, #0]
   35c2a:	9b02      	ldr	r3, [sp, #8]
   35c2c:	0030      	movs	r0, r6
   35c2e:	2b00      	cmp	r3, #0
   35c30:	d10b      	bne.n	35c4a <_strtol_l.isra.0+0xf6>
   35c32:	b007      	add	sp, #28
   35c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35c36:	9a01      	ldr	r2, [sp, #4]
   35c38:	2a00      	cmp	r2, #0
   35c3a:	d000      	beq.n	35c3e <_strtol_l.isra.0+0xea>
   35c3c:	4240      	negs	r0, r0
   35c3e:	9a02      	ldr	r2, [sp, #8]
   35c40:	2a00      	cmp	r2, #0
   35c42:	d0f6      	beq.n	35c32 <_strtol_l.isra.0+0xde>
   35c44:	9a03      	ldr	r2, [sp, #12]
   35c46:	2b00      	cmp	r3, #0
   35c48:	d000      	beq.n	35c4c <_strtol_l.isra.0+0xf8>
   35c4a:	1e6a      	subs	r2, r5, #1
   35c4c:	9b02      	ldr	r3, [sp, #8]
   35c4e:	601a      	str	r2, [r3, #0]
   35c50:	e7ef      	b.n	35c32 <_strtol_l.isra.0+0xde>
   35c52:	2430      	movs	r4, #48	; 0x30
   35c54:	2f00      	cmp	r7, #0
   35c56:	d1ad      	bne.n	35bb4 <_strtol_l.isra.0+0x60>
   35c58:	3708      	adds	r7, #8
   35c5a:	e7ab      	b.n	35bb4 <_strtol_l.isra.0+0x60>
   35c5c:	7fffffff 	.word	0x7fffffff

00035c60 <strtol>:
   35c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35c62:	0013      	movs	r3, r2
   35c64:	4a06      	ldr	r2, [pc, #24]	; (35c80 <strtol+0x20>)
   35c66:	0005      	movs	r5, r0
   35c68:	6810      	ldr	r0, [r2, #0]
   35c6a:	6a04      	ldr	r4, [r0, #32]
   35c6c:	2c00      	cmp	r4, #0
   35c6e:	d100      	bne.n	35c72 <strtol+0x12>
   35c70:	4c04      	ldr	r4, [pc, #16]	; (35c84 <strtol+0x24>)
   35c72:	000a      	movs	r2, r1
   35c74:	9400      	str	r4, [sp, #0]
   35c76:	0029      	movs	r1, r5
   35c78:	f7ff ff6c 	bl	35b54 <_strtol_l.isra.0>
   35c7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35c7e:	46c0      	nop			; (mov r8, r8)
   35c80:	20000130 	.word	0x20000130
   35c84:	20000194 	.word	0x20000194

00035c88 <_vsniprintf_r>:
   35c88:	b530      	push	{r4, r5, lr}
   35c8a:	0014      	movs	r4, r2
   35c8c:	b09b      	sub	sp, #108	; 0x6c
   35c8e:	0005      	movs	r5, r0
   35c90:	001a      	movs	r2, r3
   35c92:	2c00      	cmp	r4, #0
   35c94:	da05      	bge.n	35ca2 <_vsniprintf_r+0x1a>
   35c96:	238b      	movs	r3, #139	; 0x8b
   35c98:	6003      	str	r3, [r0, #0]
   35c9a:	2001      	movs	r0, #1
   35c9c:	4240      	negs	r0, r0
   35c9e:	b01b      	add	sp, #108	; 0x6c
   35ca0:	bd30      	pop	{r4, r5, pc}
   35ca2:	2382      	movs	r3, #130	; 0x82
   35ca4:	4668      	mov	r0, sp
   35ca6:	009b      	lsls	r3, r3, #2
   35ca8:	8183      	strh	r3, [r0, #12]
   35caa:	2300      	movs	r3, #0
   35cac:	9100      	str	r1, [sp, #0]
   35cae:	9104      	str	r1, [sp, #16]
   35cb0:	429c      	cmp	r4, r3
   35cb2:	d000      	beq.n	35cb6 <_vsniprintf_r+0x2e>
   35cb4:	1e63      	subs	r3, r4, #1
   35cb6:	9302      	str	r3, [sp, #8]
   35cb8:	9305      	str	r3, [sp, #20]
   35cba:	2301      	movs	r3, #1
   35cbc:	4669      	mov	r1, sp
   35cbe:	425b      	negs	r3, r3
   35cc0:	81cb      	strh	r3, [r1, #14]
   35cc2:	0028      	movs	r0, r5
   35cc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35cc6:	f000 fb63 	bl	36390 <_svfiprintf_r>
   35cca:	1c43      	adds	r3, r0, #1
   35ccc:	da01      	bge.n	35cd2 <_vsniprintf_r+0x4a>
   35cce:	238b      	movs	r3, #139	; 0x8b
   35cd0:	602b      	str	r3, [r5, #0]
   35cd2:	2c00      	cmp	r4, #0
   35cd4:	d0e3      	beq.n	35c9e <_vsniprintf_r+0x16>
   35cd6:	2300      	movs	r3, #0
   35cd8:	9a00      	ldr	r2, [sp, #0]
   35cda:	7013      	strb	r3, [r2, #0]
   35cdc:	e7df      	b.n	35c9e <_vsniprintf_r+0x16>
	...

00035ce0 <vsniprintf>:
   35ce0:	b507      	push	{r0, r1, r2, lr}
   35ce2:	9300      	str	r3, [sp, #0]
   35ce4:	0013      	movs	r3, r2
   35ce6:	000a      	movs	r2, r1
   35ce8:	0001      	movs	r1, r0
   35cea:	4802      	ldr	r0, [pc, #8]	; (35cf4 <vsniprintf+0x14>)
   35cec:	6800      	ldr	r0, [r0, #0]
   35cee:	f7ff ffcb 	bl	35c88 <_vsniprintf_r>
   35cf2:	bd0e      	pop	{r1, r2, r3, pc}
   35cf4:	20000130 	.word	0x20000130

00035cf8 <__swbuf_r>:
   35cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35cfa:	0005      	movs	r5, r0
   35cfc:	000e      	movs	r6, r1
   35cfe:	0014      	movs	r4, r2
   35d00:	2800      	cmp	r0, #0
   35d02:	d004      	beq.n	35d0e <__swbuf_r+0x16>
   35d04:	6983      	ldr	r3, [r0, #24]
   35d06:	2b00      	cmp	r3, #0
   35d08:	d101      	bne.n	35d0e <__swbuf_r+0x16>
   35d0a:	f000 f9b9 	bl	36080 <__sinit>
   35d0e:	4b22      	ldr	r3, [pc, #136]	; (35d98 <__swbuf_r+0xa0>)
   35d10:	429c      	cmp	r4, r3
   35d12:	d12d      	bne.n	35d70 <__swbuf_r+0x78>
   35d14:	686c      	ldr	r4, [r5, #4]
   35d16:	69a3      	ldr	r3, [r4, #24]
   35d18:	60a3      	str	r3, [r4, #8]
   35d1a:	89a3      	ldrh	r3, [r4, #12]
   35d1c:	071b      	lsls	r3, r3, #28
   35d1e:	d531      	bpl.n	35d84 <__swbuf_r+0x8c>
   35d20:	6923      	ldr	r3, [r4, #16]
   35d22:	2b00      	cmp	r3, #0
   35d24:	d02e      	beq.n	35d84 <__swbuf_r+0x8c>
   35d26:	6823      	ldr	r3, [r4, #0]
   35d28:	6922      	ldr	r2, [r4, #16]
   35d2a:	b2f7      	uxtb	r7, r6
   35d2c:	1a98      	subs	r0, r3, r2
   35d2e:	6963      	ldr	r3, [r4, #20]
   35d30:	b2f6      	uxtb	r6, r6
   35d32:	4298      	cmp	r0, r3
   35d34:	db05      	blt.n	35d42 <__swbuf_r+0x4a>
   35d36:	0021      	movs	r1, r4
   35d38:	0028      	movs	r0, r5
   35d3a:	f000 f933 	bl	35fa4 <_fflush_r>
   35d3e:	2800      	cmp	r0, #0
   35d40:	d126      	bne.n	35d90 <__swbuf_r+0x98>
   35d42:	68a3      	ldr	r3, [r4, #8]
   35d44:	3001      	adds	r0, #1
   35d46:	3b01      	subs	r3, #1
   35d48:	60a3      	str	r3, [r4, #8]
   35d4a:	6823      	ldr	r3, [r4, #0]
   35d4c:	1c5a      	adds	r2, r3, #1
   35d4e:	6022      	str	r2, [r4, #0]
   35d50:	701f      	strb	r7, [r3, #0]
   35d52:	6963      	ldr	r3, [r4, #20]
   35d54:	4298      	cmp	r0, r3
   35d56:	d004      	beq.n	35d62 <__swbuf_r+0x6a>
   35d58:	89a3      	ldrh	r3, [r4, #12]
   35d5a:	07db      	lsls	r3, r3, #31
   35d5c:	d51a      	bpl.n	35d94 <__swbuf_r+0x9c>
   35d5e:	2e0a      	cmp	r6, #10
   35d60:	d118      	bne.n	35d94 <__swbuf_r+0x9c>
   35d62:	0021      	movs	r1, r4
   35d64:	0028      	movs	r0, r5
   35d66:	f000 f91d 	bl	35fa4 <_fflush_r>
   35d6a:	2800      	cmp	r0, #0
   35d6c:	d012      	beq.n	35d94 <__swbuf_r+0x9c>
   35d6e:	e00f      	b.n	35d90 <__swbuf_r+0x98>
   35d70:	4b0a      	ldr	r3, [pc, #40]	; (35d9c <__swbuf_r+0xa4>)
   35d72:	429c      	cmp	r4, r3
   35d74:	d101      	bne.n	35d7a <__swbuf_r+0x82>
   35d76:	68ac      	ldr	r4, [r5, #8]
   35d78:	e7cd      	b.n	35d16 <__swbuf_r+0x1e>
   35d7a:	4b09      	ldr	r3, [pc, #36]	; (35da0 <__swbuf_r+0xa8>)
   35d7c:	429c      	cmp	r4, r3
   35d7e:	d1ca      	bne.n	35d16 <__swbuf_r+0x1e>
   35d80:	68ec      	ldr	r4, [r5, #12]
   35d82:	e7c8      	b.n	35d16 <__swbuf_r+0x1e>
   35d84:	0021      	movs	r1, r4
   35d86:	0028      	movs	r0, r5
   35d88:	f000 f80c 	bl	35da4 <__swsetup_r>
   35d8c:	2800      	cmp	r0, #0
   35d8e:	d0ca      	beq.n	35d26 <__swbuf_r+0x2e>
   35d90:	2601      	movs	r6, #1
   35d92:	4276      	negs	r6, r6
   35d94:	0030      	movs	r0, r6
   35d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35d98:	0003b254 	.word	0x0003b254
   35d9c:	0003b274 	.word	0x0003b274
   35da0:	0003b234 	.word	0x0003b234

00035da4 <__swsetup_r>:
   35da4:	4b36      	ldr	r3, [pc, #216]	; (35e80 <__swsetup_r+0xdc>)
   35da6:	b570      	push	{r4, r5, r6, lr}
   35da8:	681d      	ldr	r5, [r3, #0]
   35daa:	0006      	movs	r6, r0
   35dac:	000c      	movs	r4, r1
   35dae:	2d00      	cmp	r5, #0
   35db0:	d005      	beq.n	35dbe <__swsetup_r+0x1a>
   35db2:	69ab      	ldr	r3, [r5, #24]
   35db4:	2b00      	cmp	r3, #0
   35db6:	d102      	bne.n	35dbe <__swsetup_r+0x1a>
   35db8:	0028      	movs	r0, r5
   35dba:	f000 f961 	bl	36080 <__sinit>
   35dbe:	4b31      	ldr	r3, [pc, #196]	; (35e84 <__swsetup_r+0xe0>)
   35dc0:	429c      	cmp	r4, r3
   35dc2:	d10f      	bne.n	35de4 <__swsetup_r+0x40>
   35dc4:	686c      	ldr	r4, [r5, #4]
   35dc6:	230c      	movs	r3, #12
   35dc8:	5ee2      	ldrsh	r2, [r4, r3]
   35dca:	b293      	uxth	r3, r2
   35dcc:	0719      	lsls	r1, r3, #28
   35dce:	d42d      	bmi.n	35e2c <__swsetup_r+0x88>
   35dd0:	06d9      	lsls	r1, r3, #27
   35dd2:	d411      	bmi.n	35df8 <__swsetup_r+0x54>
   35dd4:	2309      	movs	r3, #9
   35dd6:	2001      	movs	r0, #1
   35dd8:	6033      	str	r3, [r6, #0]
   35dda:	3337      	adds	r3, #55	; 0x37
   35ddc:	4313      	orrs	r3, r2
   35dde:	81a3      	strh	r3, [r4, #12]
   35de0:	4240      	negs	r0, r0
   35de2:	bd70      	pop	{r4, r5, r6, pc}
   35de4:	4b28      	ldr	r3, [pc, #160]	; (35e88 <__swsetup_r+0xe4>)
   35de6:	429c      	cmp	r4, r3
   35de8:	d101      	bne.n	35dee <__swsetup_r+0x4a>
   35dea:	68ac      	ldr	r4, [r5, #8]
   35dec:	e7eb      	b.n	35dc6 <__swsetup_r+0x22>
   35dee:	4b27      	ldr	r3, [pc, #156]	; (35e8c <__swsetup_r+0xe8>)
   35df0:	429c      	cmp	r4, r3
   35df2:	d1e8      	bne.n	35dc6 <__swsetup_r+0x22>
   35df4:	68ec      	ldr	r4, [r5, #12]
   35df6:	e7e6      	b.n	35dc6 <__swsetup_r+0x22>
   35df8:	075b      	lsls	r3, r3, #29
   35dfa:	d513      	bpl.n	35e24 <__swsetup_r+0x80>
   35dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35dfe:	2900      	cmp	r1, #0
   35e00:	d008      	beq.n	35e14 <__swsetup_r+0x70>
   35e02:	0023      	movs	r3, r4
   35e04:	3344      	adds	r3, #68	; 0x44
   35e06:	4299      	cmp	r1, r3
   35e08:	d002      	beq.n	35e10 <__swsetup_r+0x6c>
   35e0a:	0030      	movs	r0, r6
   35e0c:	f7ff fc78 	bl	35700 <_free_r>
   35e10:	2300      	movs	r3, #0
   35e12:	6363      	str	r3, [r4, #52]	; 0x34
   35e14:	2224      	movs	r2, #36	; 0x24
   35e16:	89a3      	ldrh	r3, [r4, #12]
   35e18:	4393      	bics	r3, r2
   35e1a:	81a3      	strh	r3, [r4, #12]
   35e1c:	2300      	movs	r3, #0
   35e1e:	6063      	str	r3, [r4, #4]
   35e20:	6923      	ldr	r3, [r4, #16]
   35e22:	6023      	str	r3, [r4, #0]
   35e24:	2308      	movs	r3, #8
   35e26:	89a2      	ldrh	r2, [r4, #12]
   35e28:	4313      	orrs	r3, r2
   35e2a:	81a3      	strh	r3, [r4, #12]
   35e2c:	6923      	ldr	r3, [r4, #16]
   35e2e:	2b00      	cmp	r3, #0
   35e30:	d10b      	bne.n	35e4a <__swsetup_r+0xa6>
   35e32:	21a0      	movs	r1, #160	; 0xa0
   35e34:	2280      	movs	r2, #128	; 0x80
   35e36:	89a3      	ldrh	r3, [r4, #12]
   35e38:	0089      	lsls	r1, r1, #2
   35e3a:	0092      	lsls	r2, r2, #2
   35e3c:	400b      	ands	r3, r1
   35e3e:	4293      	cmp	r3, r2
   35e40:	d003      	beq.n	35e4a <__swsetup_r+0xa6>
   35e42:	0021      	movs	r1, r4
   35e44:	0030      	movs	r0, r6
   35e46:	f000 f9e9 	bl	3621c <__smakebuf_r>
   35e4a:	2301      	movs	r3, #1
   35e4c:	89a2      	ldrh	r2, [r4, #12]
   35e4e:	4013      	ands	r3, r2
   35e50:	d011      	beq.n	35e76 <__swsetup_r+0xd2>
   35e52:	2300      	movs	r3, #0
   35e54:	60a3      	str	r3, [r4, #8]
   35e56:	6963      	ldr	r3, [r4, #20]
   35e58:	425b      	negs	r3, r3
   35e5a:	61a3      	str	r3, [r4, #24]
   35e5c:	2000      	movs	r0, #0
   35e5e:	6923      	ldr	r3, [r4, #16]
   35e60:	4283      	cmp	r3, r0
   35e62:	d1be      	bne.n	35de2 <__swsetup_r+0x3e>
   35e64:	230c      	movs	r3, #12
   35e66:	5ee2      	ldrsh	r2, [r4, r3]
   35e68:	0613      	lsls	r3, r2, #24
   35e6a:	d5ba      	bpl.n	35de2 <__swsetup_r+0x3e>
   35e6c:	2340      	movs	r3, #64	; 0x40
   35e6e:	4313      	orrs	r3, r2
   35e70:	81a3      	strh	r3, [r4, #12]
   35e72:	3801      	subs	r0, #1
   35e74:	e7b5      	b.n	35de2 <__swsetup_r+0x3e>
   35e76:	0792      	lsls	r2, r2, #30
   35e78:	d400      	bmi.n	35e7c <__swsetup_r+0xd8>
   35e7a:	6963      	ldr	r3, [r4, #20]
   35e7c:	60a3      	str	r3, [r4, #8]
   35e7e:	e7ed      	b.n	35e5c <__swsetup_r+0xb8>
   35e80:	20000130 	.word	0x20000130
   35e84:	0003b254 	.word	0x0003b254
   35e88:	0003b274 	.word	0x0003b274
   35e8c:	0003b234 	.word	0x0003b234

00035e90 <__sflush_r>:
   35e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35e92:	898a      	ldrh	r2, [r1, #12]
   35e94:	0005      	movs	r5, r0
   35e96:	000c      	movs	r4, r1
   35e98:	0713      	lsls	r3, r2, #28
   35e9a:	d460      	bmi.n	35f5e <__sflush_r+0xce>
   35e9c:	684b      	ldr	r3, [r1, #4]
   35e9e:	2b00      	cmp	r3, #0
   35ea0:	dc04      	bgt.n	35eac <__sflush_r+0x1c>
   35ea2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35ea4:	2b00      	cmp	r3, #0
   35ea6:	dc01      	bgt.n	35eac <__sflush_r+0x1c>
   35ea8:	2000      	movs	r0, #0
   35eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35eac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35eae:	2f00      	cmp	r7, #0
   35eb0:	d0fa      	beq.n	35ea8 <__sflush_r+0x18>
   35eb2:	2300      	movs	r3, #0
   35eb4:	682e      	ldr	r6, [r5, #0]
   35eb6:	602b      	str	r3, [r5, #0]
   35eb8:	2380      	movs	r3, #128	; 0x80
   35eba:	015b      	lsls	r3, r3, #5
   35ebc:	401a      	ands	r2, r3
   35ebe:	d034      	beq.n	35f2a <__sflush_r+0x9a>
   35ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35ec2:	89a3      	ldrh	r3, [r4, #12]
   35ec4:	075b      	lsls	r3, r3, #29
   35ec6:	d506      	bpl.n	35ed6 <__sflush_r+0x46>
   35ec8:	6863      	ldr	r3, [r4, #4]
   35eca:	1ac0      	subs	r0, r0, r3
   35ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35ece:	2b00      	cmp	r3, #0
   35ed0:	d001      	beq.n	35ed6 <__sflush_r+0x46>
   35ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35ed4:	1ac0      	subs	r0, r0, r3
   35ed6:	0002      	movs	r2, r0
   35ed8:	6a21      	ldr	r1, [r4, #32]
   35eda:	2300      	movs	r3, #0
   35edc:	0028      	movs	r0, r5
   35ede:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35ee0:	47b8      	blx	r7
   35ee2:	89a1      	ldrh	r1, [r4, #12]
   35ee4:	1c43      	adds	r3, r0, #1
   35ee6:	d106      	bne.n	35ef6 <__sflush_r+0x66>
   35ee8:	682b      	ldr	r3, [r5, #0]
   35eea:	2b1d      	cmp	r3, #29
   35eec:	d831      	bhi.n	35f52 <__sflush_r+0xc2>
   35eee:	4a2c      	ldr	r2, [pc, #176]	; (35fa0 <__sflush_r+0x110>)
   35ef0:	40da      	lsrs	r2, r3
   35ef2:	07d3      	lsls	r3, r2, #31
   35ef4:	d52d      	bpl.n	35f52 <__sflush_r+0xc2>
   35ef6:	2300      	movs	r3, #0
   35ef8:	6063      	str	r3, [r4, #4]
   35efa:	6923      	ldr	r3, [r4, #16]
   35efc:	6023      	str	r3, [r4, #0]
   35efe:	04cb      	lsls	r3, r1, #19
   35f00:	d505      	bpl.n	35f0e <__sflush_r+0x7e>
   35f02:	1c43      	adds	r3, r0, #1
   35f04:	d102      	bne.n	35f0c <__sflush_r+0x7c>
   35f06:	682b      	ldr	r3, [r5, #0]
   35f08:	2b00      	cmp	r3, #0
   35f0a:	d100      	bne.n	35f0e <__sflush_r+0x7e>
   35f0c:	6560      	str	r0, [r4, #84]	; 0x54
   35f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35f10:	602e      	str	r6, [r5, #0]
   35f12:	2900      	cmp	r1, #0
   35f14:	d0c8      	beq.n	35ea8 <__sflush_r+0x18>
   35f16:	0023      	movs	r3, r4
   35f18:	3344      	adds	r3, #68	; 0x44
   35f1a:	4299      	cmp	r1, r3
   35f1c:	d002      	beq.n	35f24 <__sflush_r+0x94>
   35f1e:	0028      	movs	r0, r5
   35f20:	f7ff fbee 	bl	35700 <_free_r>
   35f24:	2000      	movs	r0, #0
   35f26:	6360      	str	r0, [r4, #52]	; 0x34
   35f28:	e7bf      	b.n	35eaa <__sflush_r+0x1a>
   35f2a:	2301      	movs	r3, #1
   35f2c:	6a21      	ldr	r1, [r4, #32]
   35f2e:	0028      	movs	r0, r5
   35f30:	47b8      	blx	r7
   35f32:	1c43      	adds	r3, r0, #1
   35f34:	d1c5      	bne.n	35ec2 <__sflush_r+0x32>
   35f36:	682b      	ldr	r3, [r5, #0]
   35f38:	2b00      	cmp	r3, #0
   35f3a:	d0c2      	beq.n	35ec2 <__sflush_r+0x32>
   35f3c:	2b1d      	cmp	r3, #29
   35f3e:	d001      	beq.n	35f44 <__sflush_r+0xb4>
   35f40:	2b16      	cmp	r3, #22
   35f42:	d101      	bne.n	35f48 <__sflush_r+0xb8>
   35f44:	602e      	str	r6, [r5, #0]
   35f46:	e7af      	b.n	35ea8 <__sflush_r+0x18>
   35f48:	2340      	movs	r3, #64	; 0x40
   35f4a:	89a2      	ldrh	r2, [r4, #12]
   35f4c:	4313      	orrs	r3, r2
   35f4e:	81a3      	strh	r3, [r4, #12]
   35f50:	e7ab      	b.n	35eaa <__sflush_r+0x1a>
   35f52:	2340      	movs	r3, #64	; 0x40
   35f54:	430b      	orrs	r3, r1
   35f56:	2001      	movs	r0, #1
   35f58:	81a3      	strh	r3, [r4, #12]
   35f5a:	4240      	negs	r0, r0
   35f5c:	e7a5      	b.n	35eaa <__sflush_r+0x1a>
   35f5e:	690f      	ldr	r7, [r1, #16]
   35f60:	2f00      	cmp	r7, #0
   35f62:	d0a1      	beq.n	35ea8 <__sflush_r+0x18>
   35f64:	680b      	ldr	r3, [r1, #0]
   35f66:	600f      	str	r7, [r1, #0]
   35f68:	1bdb      	subs	r3, r3, r7
   35f6a:	9301      	str	r3, [sp, #4]
   35f6c:	2300      	movs	r3, #0
   35f6e:	0792      	lsls	r2, r2, #30
   35f70:	d100      	bne.n	35f74 <__sflush_r+0xe4>
   35f72:	694b      	ldr	r3, [r1, #20]
   35f74:	60a3      	str	r3, [r4, #8]
   35f76:	9b01      	ldr	r3, [sp, #4]
   35f78:	2b00      	cmp	r3, #0
   35f7a:	dc00      	bgt.n	35f7e <__sflush_r+0xee>
   35f7c:	e794      	b.n	35ea8 <__sflush_r+0x18>
   35f7e:	9b01      	ldr	r3, [sp, #4]
   35f80:	003a      	movs	r2, r7
   35f82:	6a21      	ldr	r1, [r4, #32]
   35f84:	0028      	movs	r0, r5
   35f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35f88:	47b0      	blx	r6
   35f8a:	2800      	cmp	r0, #0
   35f8c:	dc03      	bgt.n	35f96 <__sflush_r+0x106>
   35f8e:	2340      	movs	r3, #64	; 0x40
   35f90:	89a2      	ldrh	r2, [r4, #12]
   35f92:	4313      	orrs	r3, r2
   35f94:	e7df      	b.n	35f56 <__sflush_r+0xc6>
   35f96:	9b01      	ldr	r3, [sp, #4]
   35f98:	183f      	adds	r7, r7, r0
   35f9a:	1a1b      	subs	r3, r3, r0
   35f9c:	9301      	str	r3, [sp, #4]
   35f9e:	e7ea      	b.n	35f76 <__sflush_r+0xe6>
   35fa0:	20400001 	.word	0x20400001

00035fa4 <_fflush_r>:
   35fa4:	690b      	ldr	r3, [r1, #16]
   35fa6:	b570      	push	{r4, r5, r6, lr}
   35fa8:	0005      	movs	r5, r0
   35faa:	000c      	movs	r4, r1
   35fac:	2b00      	cmp	r3, #0
   35fae:	d101      	bne.n	35fb4 <_fflush_r+0x10>
   35fb0:	2000      	movs	r0, #0
   35fb2:	bd70      	pop	{r4, r5, r6, pc}
   35fb4:	2800      	cmp	r0, #0
   35fb6:	d004      	beq.n	35fc2 <_fflush_r+0x1e>
   35fb8:	6983      	ldr	r3, [r0, #24]
   35fba:	2b00      	cmp	r3, #0
   35fbc:	d101      	bne.n	35fc2 <_fflush_r+0x1e>
   35fbe:	f000 f85f 	bl	36080 <__sinit>
   35fc2:	4b0b      	ldr	r3, [pc, #44]	; (35ff0 <_fflush_r+0x4c>)
   35fc4:	429c      	cmp	r4, r3
   35fc6:	d109      	bne.n	35fdc <_fflush_r+0x38>
   35fc8:	686c      	ldr	r4, [r5, #4]
   35fca:	220c      	movs	r2, #12
   35fcc:	5ea3      	ldrsh	r3, [r4, r2]
   35fce:	2b00      	cmp	r3, #0
   35fd0:	d0ee      	beq.n	35fb0 <_fflush_r+0xc>
   35fd2:	0021      	movs	r1, r4
   35fd4:	0028      	movs	r0, r5
   35fd6:	f7ff ff5b 	bl	35e90 <__sflush_r>
   35fda:	e7ea      	b.n	35fb2 <_fflush_r+0xe>
   35fdc:	4b05      	ldr	r3, [pc, #20]	; (35ff4 <_fflush_r+0x50>)
   35fde:	429c      	cmp	r4, r3
   35fe0:	d101      	bne.n	35fe6 <_fflush_r+0x42>
   35fe2:	68ac      	ldr	r4, [r5, #8]
   35fe4:	e7f1      	b.n	35fca <_fflush_r+0x26>
   35fe6:	4b04      	ldr	r3, [pc, #16]	; (35ff8 <_fflush_r+0x54>)
   35fe8:	429c      	cmp	r4, r3
   35fea:	d1ee      	bne.n	35fca <_fflush_r+0x26>
   35fec:	68ec      	ldr	r4, [r5, #12]
   35fee:	e7ec      	b.n	35fca <_fflush_r+0x26>
   35ff0:	0003b254 	.word	0x0003b254
   35ff4:	0003b274 	.word	0x0003b274
   35ff8:	0003b234 	.word	0x0003b234

00035ffc <_cleanup_r>:
   35ffc:	b510      	push	{r4, lr}
   35ffe:	4902      	ldr	r1, [pc, #8]	; (36008 <_cleanup_r+0xc>)
   36000:	f000 f8b2 	bl	36168 <_fwalk_reent>
   36004:	bd10      	pop	{r4, pc}
   36006:	46c0      	nop			; (mov r8, r8)
   36008:	00035fa5 	.word	0x00035fa5

0003600c <std.isra.0>:
   3600c:	2300      	movs	r3, #0
   3600e:	b510      	push	{r4, lr}
   36010:	0004      	movs	r4, r0
   36012:	6003      	str	r3, [r0, #0]
   36014:	6043      	str	r3, [r0, #4]
   36016:	6083      	str	r3, [r0, #8]
   36018:	8181      	strh	r1, [r0, #12]
   3601a:	6643      	str	r3, [r0, #100]	; 0x64
   3601c:	81c2      	strh	r2, [r0, #14]
   3601e:	6103      	str	r3, [r0, #16]
   36020:	6143      	str	r3, [r0, #20]
   36022:	6183      	str	r3, [r0, #24]
   36024:	0019      	movs	r1, r3
   36026:	2208      	movs	r2, #8
   36028:	305c      	adds	r0, #92	; 0x5c
   3602a:	f7ff fb60 	bl	356ee <memset>
   3602e:	4b05      	ldr	r3, [pc, #20]	; (36044 <std.isra.0+0x38>)
   36030:	6224      	str	r4, [r4, #32]
   36032:	6263      	str	r3, [r4, #36]	; 0x24
   36034:	4b04      	ldr	r3, [pc, #16]	; (36048 <std.isra.0+0x3c>)
   36036:	62a3      	str	r3, [r4, #40]	; 0x28
   36038:	4b04      	ldr	r3, [pc, #16]	; (3604c <std.isra.0+0x40>)
   3603a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3603c:	4b04      	ldr	r3, [pc, #16]	; (36050 <std.isra.0+0x44>)
   3603e:	6323      	str	r3, [r4, #48]	; 0x30
   36040:	bd10      	pop	{r4, pc}
   36042:	46c0      	nop			; (mov r8, r8)
   36044:	000368a9 	.word	0x000368a9
   36048:	000368d1 	.word	0x000368d1
   3604c:	00036909 	.word	0x00036909
   36050:	00036935 	.word	0x00036935

00036054 <__sfmoreglue>:
   36054:	b570      	push	{r4, r5, r6, lr}
   36056:	2568      	movs	r5, #104	; 0x68
   36058:	1e4a      	subs	r2, r1, #1
   3605a:	4355      	muls	r5, r2
   3605c:	000e      	movs	r6, r1
   3605e:	0029      	movs	r1, r5
   36060:	3174      	adds	r1, #116	; 0x74
   36062:	f7ff fb97 	bl	35794 <_malloc_r>
   36066:	1e04      	subs	r4, r0, #0
   36068:	d008      	beq.n	3607c <__sfmoreglue+0x28>
   3606a:	2100      	movs	r1, #0
   3606c:	002a      	movs	r2, r5
   3606e:	6001      	str	r1, [r0, #0]
   36070:	6046      	str	r6, [r0, #4]
   36072:	300c      	adds	r0, #12
   36074:	60a0      	str	r0, [r4, #8]
   36076:	3268      	adds	r2, #104	; 0x68
   36078:	f7ff fb39 	bl	356ee <memset>
   3607c:	0020      	movs	r0, r4
   3607e:	bd70      	pop	{r4, r5, r6, pc}

00036080 <__sinit>:
   36080:	6983      	ldr	r3, [r0, #24]
   36082:	b513      	push	{r0, r1, r4, lr}
   36084:	0004      	movs	r4, r0
   36086:	2b00      	cmp	r3, #0
   36088:	d128      	bne.n	360dc <__sinit+0x5c>
   3608a:	6483      	str	r3, [r0, #72]	; 0x48
   3608c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3608e:	6503      	str	r3, [r0, #80]	; 0x50
   36090:	4b13      	ldr	r3, [pc, #76]	; (360e0 <__sinit+0x60>)
   36092:	4a14      	ldr	r2, [pc, #80]	; (360e4 <__sinit+0x64>)
   36094:	681b      	ldr	r3, [r3, #0]
   36096:	6282      	str	r2, [r0, #40]	; 0x28
   36098:	9301      	str	r3, [sp, #4]
   3609a:	4298      	cmp	r0, r3
   3609c:	d101      	bne.n	360a2 <__sinit+0x22>
   3609e:	2301      	movs	r3, #1
   360a0:	6183      	str	r3, [r0, #24]
   360a2:	0020      	movs	r0, r4
   360a4:	f000 f820 	bl	360e8 <__sfp>
   360a8:	6060      	str	r0, [r4, #4]
   360aa:	0020      	movs	r0, r4
   360ac:	f000 f81c 	bl	360e8 <__sfp>
   360b0:	60a0      	str	r0, [r4, #8]
   360b2:	0020      	movs	r0, r4
   360b4:	f000 f818 	bl	360e8 <__sfp>
   360b8:	2200      	movs	r2, #0
   360ba:	60e0      	str	r0, [r4, #12]
   360bc:	2104      	movs	r1, #4
   360be:	6860      	ldr	r0, [r4, #4]
   360c0:	f7ff ffa4 	bl	3600c <std.isra.0>
   360c4:	2201      	movs	r2, #1
   360c6:	2109      	movs	r1, #9
   360c8:	68a0      	ldr	r0, [r4, #8]
   360ca:	f7ff ff9f 	bl	3600c <std.isra.0>
   360ce:	2202      	movs	r2, #2
   360d0:	2112      	movs	r1, #18
   360d2:	68e0      	ldr	r0, [r4, #12]
   360d4:	f7ff ff9a 	bl	3600c <std.isra.0>
   360d8:	2301      	movs	r3, #1
   360da:	61a3      	str	r3, [r4, #24]
   360dc:	bd13      	pop	{r0, r1, r4, pc}
   360de:	46c0      	nop			; (mov r8, r8)
   360e0:	0003b230 	.word	0x0003b230
   360e4:	00035ffd 	.word	0x00035ffd

000360e8 <__sfp>:
   360e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   360ea:	4b1e      	ldr	r3, [pc, #120]	; (36164 <__sfp+0x7c>)
   360ec:	0007      	movs	r7, r0
   360ee:	681e      	ldr	r6, [r3, #0]
   360f0:	69b3      	ldr	r3, [r6, #24]
   360f2:	2b00      	cmp	r3, #0
   360f4:	d102      	bne.n	360fc <__sfp+0x14>
   360f6:	0030      	movs	r0, r6
   360f8:	f7ff ffc2 	bl	36080 <__sinit>
   360fc:	3648      	adds	r6, #72	; 0x48
   360fe:	68b4      	ldr	r4, [r6, #8]
   36100:	6873      	ldr	r3, [r6, #4]
   36102:	3b01      	subs	r3, #1
   36104:	d504      	bpl.n	36110 <__sfp+0x28>
   36106:	6833      	ldr	r3, [r6, #0]
   36108:	2b00      	cmp	r3, #0
   3610a:	d007      	beq.n	3611c <__sfp+0x34>
   3610c:	6836      	ldr	r6, [r6, #0]
   3610e:	e7f6      	b.n	360fe <__sfp+0x16>
   36110:	220c      	movs	r2, #12
   36112:	5ea5      	ldrsh	r5, [r4, r2]
   36114:	2d00      	cmp	r5, #0
   36116:	d00d      	beq.n	36134 <__sfp+0x4c>
   36118:	3468      	adds	r4, #104	; 0x68
   3611a:	e7f2      	b.n	36102 <__sfp+0x1a>
   3611c:	2104      	movs	r1, #4
   3611e:	0038      	movs	r0, r7
   36120:	f7ff ff98 	bl	36054 <__sfmoreglue>
   36124:	6030      	str	r0, [r6, #0]
   36126:	2800      	cmp	r0, #0
   36128:	d1f0      	bne.n	3610c <__sfp+0x24>
   3612a:	230c      	movs	r3, #12
   3612c:	0004      	movs	r4, r0
   3612e:	603b      	str	r3, [r7, #0]
   36130:	0020      	movs	r0, r4
   36132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36134:	2301      	movs	r3, #1
   36136:	0020      	movs	r0, r4
   36138:	425b      	negs	r3, r3
   3613a:	81e3      	strh	r3, [r4, #14]
   3613c:	3302      	adds	r3, #2
   3613e:	81a3      	strh	r3, [r4, #12]
   36140:	6665      	str	r5, [r4, #100]	; 0x64
   36142:	6025      	str	r5, [r4, #0]
   36144:	60a5      	str	r5, [r4, #8]
   36146:	6065      	str	r5, [r4, #4]
   36148:	6125      	str	r5, [r4, #16]
   3614a:	6165      	str	r5, [r4, #20]
   3614c:	61a5      	str	r5, [r4, #24]
   3614e:	2208      	movs	r2, #8
   36150:	0029      	movs	r1, r5
   36152:	305c      	adds	r0, #92	; 0x5c
   36154:	f7ff facb 	bl	356ee <memset>
   36158:	6365      	str	r5, [r4, #52]	; 0x34
   3615a:	63a5      	str	r5, [r4, #56]	; 0x38
   3615c:	64a5      	str	r5, [r4, #72]	; 0x48
   3615e:	64e5      	str	r5, [r4, #76]	; 0x4c
   36160:	e7e6      	b.n	36130 <__sfp+0x48>
   36162:	46c0      	nop			; (mov r8, r8)
   36164:	0003b230 	.word	0x0003b230

00036168 <_fwalk_reent>:
   36168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3616a:	0004      	movs	r4, r0
   3616c:	0007      	movs	r7, r0
   3616e:	2600      	movs	r6, #0
   36170:	9101      	str	r1, [sp, #4]
   36172:	3448      	adds	r4, #72	; 0x48
   36174:	2c00      	cmp	r4, #0
   36176:	d101      	bne.n	3617c <_fwalk_reent+0x14>
   36178:	0030      	movs	r0, r6
   3617a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3617c:	6863      	ldr	r3, [r4, #4]
   3617e:	68a5      	ldr	r5, [r4, #8]
   36180:	9300      	str	r3, [sp, #0]
   36182:	9b00      	ldr	r3, [sp, #0]
   36184:	3b01      	subs	r3, #1
   36186:	9300      	str	r3, [sp, #0]
   36188:	d501      	bpl.n	3618e <_fwalk_reent+0x26>
   3618a:	6824      	ldr	r4, [r4, #0]
   3618c:	e7f2      	b.n	36174 <_fwalk_reent+0xc>
   3618e:	89ab      	ldrh	r3, [r5, #12]
   36190:	2b01      	cmp	r3, #1
   36192:	d908      	bls.n	361a6 <_fwalk_reent+0x3e>
   36194:	220e      	movs	r2, #14
   36196:	5eab      	ldrsh	r3, [r5, r2]
   36198:	3301      	adds	r3, #1
   3619a:	d004      	beq.n	361a6 <_fwalk_reent+0x3e>
   3619c:	0029      	movs	r1, r5
   3619e:	0038      	movs	r0, r7
   361a0:	9b01      	ldr	r3, [sp, #4]
   361a2:	4798      	blx	r3
   361a4:	4306      	orrs	r6, r0
   361a6:	3568      	adds	r5, #104	; 0x68
   361a8:	e7eb      	b.n	36182 <_fwalk_reent+0x1a>

000361aa <__locale_ctype_ptr_l>:
   361aa:	30ec      	adds	r0, #236	; 0xec
   361ac:	6800      	ldr	r0, [r0, #0]
   361ae:	4770      	bx	lr

000361b0 <__locale_ctype_ptr>:
   361b0:	4b04      	ldr	r3, [pc, #16]	; (361c4 <__locale_ctype_ptr+0x14>)
   361b2:	681b      	ldr	r3, [r3, #0]
   361b4:	6a1b      	ldr	r3, [r3, #32]
   361b6:	2b00      	cmp	r3, #0
   361b8:	d100      	bne.n	361bc <__locale_ctype_ptr+0xc>
   361ba:	4b03      	ldr	r3, [pc, #12]	; (361c8 <__locale_ctype_ptr+0x18>)
   361bc:	33ec      	adds	r3, #236	; 0xec
   361be:	6818      	ldr	r0, [r3, #0]
   361c0:	4770      	bx	lr
   361c2:	46c0      	nop			; (mov r8, r8)
   361c4:	20000130 	.word	0x20000130
   361c8:	20000194 	.word	0x20000194

000361cc <__swhatbuf_r>:
   361cc:	b570      	push	{r4, r5, r6, lr}
   361ce:	000e      	movs	r6, r1
   361d0:	001d      	movs	r5, r3
   361d2:	230e      	movs	r3, #14
   361d4:	5ec9      	ldrsh	r1, [r1, r3]
   361d6:	b090      	sub	sp, #64	; 0x40
   361d8:	0014      	movs	r4, r2
   361da:	2900      	cmp	r1, #0
   361dc:	da07      	bge.n	361ee <__swhatbuf_r+0x22>
   361de:	2300      	movs	r3, #0
   361e0:	602b      	str	r3, [r5, #0]
   361e2:	89b3      	ldrh	r3, [r6, #12]
   361e4:	061b      	lsls	r3, r3, #24
   361e6:	d411      	bmi.n	3620c <__swhatbuf_r+0x40>
   361e8:	2380      	movs	r3, #128	; 0x80
   361ea:	00db      	lsls	r3, r3, #3
   361ec:	e00f      	b.n	3620e <__swhatbuf_r+0x42>
   361ee:	aa01      	add	r2, sp, #4
   361f0:	f000 fbe6 	bl	369c0 <_fstat_r>
   361f4:	2800      	cmp	r0, #0
   361f6:	dbf2      	blt.n	361de <__swhatbuf_r+0x12>
   361f8:	22f0      	movs	r2, #240	; 0xf0
   361fa:	9b02      	ldr	r3, [sp, #8]
   361fc:	0212      	lsls	r2, r2, #8
   361fe:	4013      	ands	r3, r2
   36200:	4a05      	ldr	r2, [pc, #20]	; (36218 <__swhatbuf_r+0x4c>)
   36202:	189b      	adds	r3, r3, r2
   36204:	425a      	negs	r2, r3
   36206:	4153      	adcs	r3, r2
   36208:	602b      	str	r3, [r5, #0]
   3620a:	e7ed      	b.n	361e8 <__swhatbuf_r+0x1c>
   3620c:	2340      	movs	r3, #64	; 0x40
   3620e:	2000      	movs	r0, #0
   36210:	6023      	str	r3, [r4, #0]
   36212:	b010      	add	sp, #64	; 0x40
   36214:	bd70      	pop	{r4, r5, r6, pc}
   36216:	46c0      	nop			; (mov r8, r8)
   36218:	ffffe000 	.word	0xffffe000

0003621c <__smakebuf_r>:
   3621c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3621e:	2602      	movs	r6, #2
   36220:	898b      	ldrh	r3, [r1, #12]
   36222:	0005      	movs	r5, r0
   36224:	000c      	movs	r4, r1
   36226:	4233      	tst	r3, r6
   36228:	d006      	beq.n	36238 <__smakebuf_r+0x1c>
   3622a:	0023      	movs	r3, r4
   3622c:	3347      	adds	r3, #71	; 0x47
   3622e:	6023      	str	r3, [r4, #0]
   36230:	6123      	str	r3, [r4, #16]
   36232:	2301      	movs	r3, #1
   36234:	6163      	str	r3, [r4, #20]
   36236:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36238:	ab01      	add	r3, sp, #4
   3623a:	466a      	mov	r2, sp
   3623c:	f7ff ffc6 	bl	361cc <__swhatbuf_r>
   36240:	9900      	ldr	r1, [sp, #0]
   36242:	0007      	movs	r7, r0
   36244:	0028      	movs	r0, r5
   36246:	f7ff faa5 	bl	35794 <_malloc_r>
   3624a:	2800      	cmp	r0, #0
   3624c:	d108      	bne.n	36260 <__smakebuf_r+0x44>
   3624e:	220c      	movs	r2, #12
   36250:	5ea3      	ldrsh	r3, [r4, r2]
   36252:	059a      	lsls	r2, r3, #22
   36254:	d4ef      	bmi.n	36236 <__smakebuf_r+0x1a>
   36256:	2203      	movs	r2, #3
   36258:	4393      	bics	r3, r2
   3625a:	431e      	orrs	r6, r3
   3625c:	81a6      	strh	r6, [r4, #12]
   3625e:	e7e4      	b.n	3622a <__smakebuf_r+0xe>
   36260:	4b0f      	ldr	r3, [pc, #60]	; (362a0 <__smakebuf_r+0x84>)
   36262:	62ab      	str	r3, [r5, #40]	; 0x28
   36264:	2380      	movs	r3, #128	; 0x80
   36266:	89a2      	ldrh	r2, [r4, #12]
   36268:	6020      	str	r0, [r4, #0]
   3626a:	4313      	orrs	r3, r2
   3626c:	81a3      	strh	r3, [r4, #12]
   3626e:	9b00      	ldr	r3, [sp, #0]
   36270:	6120      	str	r0, [r4, #16]
   36272:	6163      	str	r3, [r4, #20]
   36274:	9b01      	ldr	r3, [sp, #4]
   36276:	2b00      	cmp	r3, #0
   36278:	d00d      	beq.n	36296 <__smakebuf_r+0x7a>
   3627a:	230e      	movs	r3, #14
   3627c:	5ee1      	ldrsh	r1, [r4, r3]
   3627e:	0028      	movs	r0, r5
   36280:	f000 fbb0 	bl	369e4 <_isatty_r>
   36284:	2800      	cmp	r0, #0
   36286:	d006      	beq.n	36296 <__smakebuf_r+0x7a>
   36288:	2203      	movs	r2, #3
   3628a:	89a3      	ldrh	r3, [r4, #12]
   3628c:	4393      	bics	r3, r2
   3628e:	001a      	movs	r2, r3
   36290:	2301      	movs	r3, #1
   36292:	4313      	orrs	r3, r2
   36294:	81a3      	strh	r3, [r4, #12]
   36296:	89a0      	ldrh	r0, [r4, #12]
   36298:	4338      	orrs	r0, r7
   3629a:	81a0      	strh	r0, [r4, #12]
   3629c:	e7cb      	b.n	36236 <__smakebuf_r+0x1a>
   3629e:	46c0      	nop			; (mov r8, r8)
   362a0:	00035ffd 	.word	0x00035ffd

000362a4 <__ascii_mbtowc>:
   362a4:	b082      	sub	sp, #8
   362a6:	2900      	cmp	r1, #0
   362a8:	d100      	bne.n	362ac <__ascii_mbtowc+0x8>
   362aa:	a901      	add	r1, sp, #4
   362ac:	1e10      	subs	r0, r2, #0
   362ae:	d006      	beq.n	362be <__ascii_mbtowc+0x1a>
   362b0:	2b00      	cmp	r3, #0
   362b2:	d006      	beq.n	362c2 <__ascii_mbtowc+0x1e>
   362b4:	7813      	ldrb	r3, [r2, #0]
   362b6:	600b      	str	r3, [r1, #0]
   362b8:	7810      	ldrb	r0, [r2, #0]
   362ba:	1e43      	subs	r3, r0, #1
   362bc:	4198      	sbcs	r0, r3
   362be:	b002      	add	sp, #8
   362c0:	4770      	bx	lr
   362c2:	2002      	movs	r0, #2
   362c4:	4240      	negs	r0, r0
   362c6:	e7fa      	b.n	362be <__ascii_mbtowc+0x1a>

000362c8 <__malloc_lock>:
   362c8:	4770      	bx	lr

000362ca <__malloc_unlock>:
   362ca:	4770      	bx	lr

000362cc <__ssputs_r>:
   362cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   362ce:	688e      	ldr	r6, [r1, #8]
   362d0:	b085      	sub	sp, #20
   362d2:	0007      	movs	r7, r0
   362d4:	000c      	movs	r4, r1
   362d6:	9203      	str	r2, [sp, #12]
   362d8:	9301      	str	r3, [sp, #4]
   362da:	429e      	cmp	r6, r3
   362dc:	d839      	bhi.n	36352 <__ssputs_r+0x86>
   362de:	2390      	movs	r3, #144	; 0x90
   362e0:	898a      	ldrh	r2, [r1, #12]
   362e2:	00db      	lsls	r3, r3, #3
   362e4:	421a      	tst	r2, r3
   362e6:	d034      	beq.n	36352 <__ssputs_r+0x86>
   362e8:	2503      	movs	r5, #3
   362ea:	6909      	ldr	r1, [r1, #16]
   362ec:	6823      	ldr	r3, [r4, #0]
   362ee:	1a5b      	subs	r3, r3, r1
   362f0:	9302      	str	r3, [sp, #8]
   362f2:	6963      	ldr	r3, [r4, #20]
   362f4:	9802      	ldr	r0, [sp, #8]
   362f6:	435d      	muls	r5, r3
   362f8:	0feb      	lsrs	r3, r5, #31
   362fa:	195d      	adds	r5, r3, r5
   362fc:	9b01      	ldr	r3, [sp, #4]
   362fe:	106d      	asrs	r5, r5, #1
   36300:	3301      	adds	r3, #1
   36302:	181b      	adds	r3, r3, r0
   36304:	42ab      	cmp	r3, r5
   36306:	d900      	bls.n	3630a <__ssputs_r+0x3e>
   36308:	001d      	movs	r5, r3
   3630a:	0553      	lsls	r3, r2, #21
   3630c:	d532      	bpl.n	36374 <__ssputs_r+0xa8>
   3630e:	0029      	movs	r1, r5
   36310:	0038      	movs	r0, r7
   36312:	f7ff fa3f 	bl	35794 <_malloc_r>
   36316:	1e06      	subs	r6, r0, #0
   36318:	d109      	bne.n	3632e <__ssputs_r+0x62>
   3631a:	230c      	movs	r3, #12
   3631c:	603b      	str	r3, [r7, #0]
   3631e:	2340      	movs	r3, #64	; 0x40
   36320:	2001      	movs	r0, #1
   36322:	89a2      	ldrh	r2, [r4, #12]
   36324:	4240      	negs	r0, r0
   36326:	4313      	orrs	r3, r2
   36328:	81a3      	strh	r3, [r4, #12]
   3632a:	b005      	add	sp, #20
   3632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3632e:	9a02      	ldr	r2, [sp, #8]
   36330:	6921      	ldr	r1, [r4, #16]
   36332:	f7ff f9c1 	bl	356b8 <memcpy>
   36336:	89a3      	ldrh	r3, [r4, #12]
   36338:	4a14      	ldr	r2, [pc, #80]	; (3638c <__ssputs_r+0xc0>)
   3633a:	401a      	ands	r2, r3
   3633c:	2380      	movs	r3, #128	; 0x80
   3633e:	4313      	orrs	r3, r2
   36340:	81a3      	strh	r3, [r4, #12]
   36342:	9b02      	ldr	r3, [sp, #8]
   36344:	6126      	str	r6, [r4, #16]
   36346:	18f6      	adds	r6, r6, r3
   36348:	6026      	str	r6, [r4, #0]
   3634a:	6165      	str	r5, [r4, #20]
   3634c:	9e01      	ldr	r6, [sp, #4]
   3634e:	1aed      	subs	r5, r5, r3
   36350:	60a5      	str	r5, [r4, #8]
   36352:	9b01      	ldr	r3, [sp, #4]
   36354:	42b3      	cmp	r3, r6
   36356:	d200      	bcs.n	3635a <__ssputs_r+0x8e>
   36358:	001e      	movs	r6, r3
   3635a:	0032      	movs	r2, r6
   3635c:	9903      	ldr	r1, [sp, #12]
   3635e:	6820      	ldr	r0, [r4, #0]
   36360:	f7ff f9b3 	bl	356ca <memmove>
   36364:	68a3      	ldr	r3, [r4, #8]
   36366:	2000      	movs	r0, #0
   36368:	1b9b      	subs	r3, r3, r6
   3636a:	60a3      	str	r3, [r4, #8]
   3636c:	6823      	ldr	r3, [r4, #0]
   3636e:	199e      	adds	r6, r3, r6
   36370:	6026      	str	r6, [r4, #0]
   36372:	e7da      	b.n	3632a <__ssputs_r+0x5e>
   36374:	002a      	movs	r2, r5
   36376:	0038      	movs	r0, r7
   36378:	f000 fb65 	bl	36a46 <_realloc_r>
   3637c:	1e06      	subs	r6, r0, #0
   3637e:	d1e0      	bne.n	36342 <__ssputs_r+0x76>
   36380:	6921      	ldr	r1, [r4, #16]
   36382:	0038      	movs	r0, r7
   36384:	f7ff f9bc 	bl	35700 <_free_r>
   36388:	e7c7      	b.n	3631a <__ssputs_r+0x4e>
   3638a:	46c0      	nop			; (mov r8, r8)
   3638c:	fffffb7f 	.word	0xfffffb7f

00036390 <_svfiprintf_r>:
   36390:	b5f0      	push	{r4, r5, r6, r7, lr}
   36392:	b09f      	sub	sp, #124	; 0x7c
   36394:	9002      	str	r0, [sp, #8]
   36396:	9305      	str	r3, [sp, #20]
   36398:	898b      	ldrh	r3, [r1, #12]
   3639a:	000f      	movs	r7, r1
   3639c:	0016      	movs	r6, r2
   3639e:	061b      	lsls	r3, r3, #24
   363a0:	d511      	bpl.n	363c6 <_svfiprintf_r+0x36>
   363a2:	690b      	ldr	r3, [r1, #16]
   363a4:	2b00      	cmp	r3, #0
   363a6:	d10e      	bne.n	363c6 <_svfiprintf_r+0x36>
   363a8:	2140      	movs	r1, #64	; 0x40
   363aa:	f7ff f9f3 	bl	35794 <_malloc_r>
   363ae:	6038      	str	r0, [r7, #0]
   363b0:	6138      	str	r0, [r7, #16]
   363b2:	2800      	cmp	r0, #0
   363b4:	d105      	bne.n	363c2 <_svfiprintf_r+0x32>
   363b6:	230c      	movs	r3, #12
   363b8:	9a02      	ldr	r2, [sp, #8]
   363ba:	3801      	subs	r0, #1
   363bc:	6013      	str	r3, [r2, #0]
   363be:	b01f      	add	sp, #124	; 0x7c
   363c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363c2:	2340      	movs	r3, #64	; 0x40
   363c4:	617b      	str	r3, [r7, #20]
   363c6:	2300      	movs	r3, #0
   363c8:	ad06      	add	r5, sp, #24
   363ca:	616b      	str	r3, [r5, #20]
   363cc:	3320      	adds	r3, #32
   363ce:	766b      	strb	r3, [r5, #25]
   363d0:	3310      	adds	r3, #16
   363d2:	76ab      	strb	r3, [r5, #26]
   363d4:	0034      	movs	r4, r6
   363d6:	7823      	ldrb	r3, [r4, #0]
   363d8:	2b00      	cmp	r3, #0
   363da:	d147      	bne.n	3646c <_svfiprintf_r+0xdc>
   363dc:	1ba3      	subs	r3, r4, r6
   363de:	9304      	str	r3, [sp, #16]
   363e0:	d00d      	beq.n	363fe <_svfiprintf_r+0x6e>
   363e2:	1ba3      	subs	r3, r4, r6
   363e4:	0032      	movs	r2, r6
   363e6:	0039      	movs	r1, r7
   363e8:	9802      	ldr	r0, [sp, #8]
   363ea:	f7ff ff6f 	bl	362cc <__ssputs_r>
   363ee:	1c43      	adds	r3, r0, #1
   363f0:	d100      	bne.n	363f4 <_svfiprintf_r+0x64>
   363f2:	e0b5      	b.n	36560 <_svfiprintf_r+0x1d0>
   363f4:	696a      	ldr	r2, [r5, #20]
   363f6:	9b04      	ldr	r3, [sp, #16]
   363f8:	4694      	mov	ip, r2
   363fa:	4463      	add	r3, ip
   363fc:	616b      	str	r3, [r5, #20]
   363fe:	7823      	ldrb	r3, [r4, #0]
   36400:	2b00      	cmp	r3, #0
   36402:	d100      	bne.n	36406 <_svfiprintf_r+0x76>
   36404:	e0ac      	b.n	36560 <_svfiprintf_r+0x1d0>
   36406:	2201      	movs	r2, #1
   36408:	2300      	movs	r3, #0
   3640a:	4252      	negs	r2, r2
   3640c:	606a      	str	r2, [r5, #4]
   3640e:	a902      	add	r1, sp, #8
   36410:	3254      	adds	r2, #84	; 0x54
   36412:	1852      	adds	r2, r2, r1
   36414:	3401      	adds	r4, #1
   36416:	602b      	str	r3, [r5, #0]
   36418:	60eb      	str	r3, [r5, #12]
   3641a:	60ab      	str	r3, [r5, #8]
   3641c:	7013      	strb	r3, [r2, #0]
   3641e:	65ab      	str	r3, [r5, #88]	; 0x58
   36420:	4e58      	ldr	r6, [pc, #352]	; (36584 <_svfiprintf_r+0x1f4>)
   36422:	2205      	movs	r2, #5
   36424:	7821      	ldrb	r1, [r4, #0]
   36426:	0030      	movs	r0, r6
   36428:	f000 fb02 	bl	36a30 <memchr>
   3642c:	1c62      	adds	r2, r4, #1
   3642e:	2800      	cmp	r0, #0
   36430:	d120      	bne.n	36474 <_svfiprintf_r+0xe4>
   36432:	6829      	ldr	r1, [r5, #0]
   36434:	06cb      	lsls	r3, r1, #27
   36436:	d504      	bpl.n	36442 <_svfiprintf_r+0xb2>
   36438:	2353      	movs	r3, #83	; 0x53
   3643a:	ae02      	add	r6, sp, #8
   3643c:	3020      	adds	r0, #32
   3643e:	199b      	adds	r3, r3, r6
   36440:	7018      	strb	r0, [r3, #0]
   36442:	070b      	lsls	r3, r1, #28
   36444:	d504      	bpl.n	36450 <_svfiprintf_r+0xc0>
   36446:	2353      	movs	r3, #83	; 0x53
   36448:	202b      	movs	r0, #43	; 0x2b
   3644a:	ae02      	add	r6, sp, #8
   3644c:	199b      	adds	r3, r3, r6
   3644e:	7018      	strb	r0, [r3, #0]
   36450:	7823      	ldrb	r3, [r4, #0]
   36452:	2b2a      	cmp	r3, #42	; 0x2a
   36454:	d016      	beq.n	36484 <_svfiprintf_r+0xf4>
   36456:	2000      	movs	r0, #0
   36458:	210a      	movs	r1, #10
   3645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3645c:	7822      	ldrb	r2, [r4, #0]
   3645e:	3a30      	subs	r2, #48	; 0x30
   36460:	2a09      	cmp	r2, #9
   36462:	d955      	bls.n	36510 <_svfiprintf_r+0x180>
   36464:	2800      	cmp	r0, #0
   36466:	d015      	beq.n	36494 <_svfiprintf_r+0x104>
   36468:	9309      	str	r3, [sp, #36]	; 0x24
   3646a:	e013      	b.n	36494 <_svfiprintf_r+0x104>
   3646c:	2b25      	cmp	r3, #37	; 0x25
   3646e:	d0b5      	beq.n	363dc <_svfiprintf_r+0x4c>
   36470:	3401      	adds	r4, #1
   36472:	e7b0      	b.n	363d6 <_svfiprintf_r+0x46>
   36474:	2301      	movs	r3, #1
   36476:	1b80      	subs	r0, r0, r6
   36478:	4083      	lsls	r3, r0
   3647a:	6829      	ldr	r1, [r5, #0]
   3647c:	0014      	movs	r4, r2
   3647e:	430b      	orrs	r3, r1
   36480:	602b      	str	r3, [r5, #0]
   36482:	e7cd      	b.n	36420 <_svfiprintf_r+0x90>
   36484:	9b05      	ldr	r3, [sp, #20]
   36486:	1d18      	adds	r0, r3, #4
   36488:	681b      	ldr	r3, [r3, #0]
   3648a:	9005      	str	r0, [sp, #20]
   3648c:	2b00      	cmp	r3, #0
   3648e:	db39      	blt.n	36504 <_svfiprintf_r+0x174>
   36490:	9309      	str	r3, [sp, #36]	; 0x24
   36492:	0014      	movs	r4, r2
   36494:	7823      	ldrb	r3, [r4, #0]
   36496:	2b2e      	cmp	r3, #46	; 0x2e
   36498:	d10b      	bne.n	364b2 <_svfiprintf_r+0x122>
   3649a:	7863      	ldrb	r3, [r4, #1]
   3649c:	1c62      	adds	r2, r4, #1
   3649e:	2b2a      	cmp	r3, #42	; 0x2a
   364a0:	d13e      	bne.n	36520 <_svfiprintf_r+0x190>
   364a2:	9b05      	ldr	r3, [sp, #20]
   364a4:	3402      	adds	r4, #2
   364a6:	1d1a      	adds	r2, r3, #4
   364a8:	681b      	ldr	r3, [r3, #0]
   364aa:	9205      	str	r2, [sp, #20]
   364ac:	2b00      	cmp	r3, #0
   364ae:	db34      	blt.n	3651a <_svfiprintf_r+0x18a>
   364b0:	9307      	str	r3, [sp, #28]
   364b2:	4e35      	ldr	r6, [pc, #212]	; (36588 <_svfiprintf_r+0x1f8>)
   364b4:	7821      	ldrb	r1, [r4, #0]
   364b6:	2203      	movs	r2, #3
   364b8:	0030      	movs	r0, r6
   364ba:	f000 fab9 	bl	36a30 <memchr>
   364be:	2800      	cmp	r0, #0
   364c0:	d006      	beq.n	364d0 <_svfiprintf_r+0x140>
   364c2:	2340      	movs	r3, #64	; 0x40
   364c4:	1b80      	subs	r0, r0, r6
   364c6:	4083      	lsls	r3, r0
   364c8:	682a      	ldr	r2, [r5, #0]
   364ca:	3401      	adds	r4, #1
   364cc:	4313      	orrs	r3, r2
   364ce:	602b      	str	r3, [r5, #0]
   364d0:	7821      	ldrb	r1, [r4, #0]
   364d2:	2206      	movs	r2, #6
   364d4:	482d      	ldr	r0, [pc, #180]	; (3658c <_svfiprintf_r+0x1fc>)
   364d6:	1c66      	adds	r6, r4, #1
   364d8:	7629      	strb	r1, [r5, #24]
   364da:	f000 faa9 	bl	36a30 <memchr>
   364de:	2800      	cmp	r0, #0
   364e0:	d046      	beq.n	36570 <_svfiprintf_r+0x1e0>
   364e2:	4b2b      	ldr	r3, [pc, #172]	; (36590 <_svfiprintf_r+0x200>)
   364e4:	2b00      	cmp	r3, #0
   364e6:	d12f      	bne.n	36548 <_svfiprintf_r+0x1b8>
   364e8:	6829      	ldr	r1, [r5, #0]
   364ea:	9b05      	ldr	r3, [sp, #20]
   364ec:	2207      	movs	r2, #7
   364ee:	05c9      	lsls	r1, r1, #23
   364f0:	d528      	bpl.n	36544 <_svfiprintf_r+0x1b4>
   364f2:	189b      	adds	r3, r3, r2
   364f4:	4393      	bics	r3, r2
   364f6:	3308      	adds	r3, #8
   364f8:	9305      	str	r3, [sp, #20]
   364fa:	696b      	ldr	r3, [r5, #20]
   364fc:	9a03      	ldr	r2, [sp, #12]
   364fe:	189b      	adds	r3, r3, r2
   36500:	616b      	str	r3, [r5, #20]
   36502:	e767      	b.n	363d4 <_svfiprintf_r+0x44>
   36504:	425b      	negs	r3, r3
   36506:	60eb      	str	r3, [r5, #12]
   36508:	2302      	movs	r3, #2
   3650a:	430b      	orrs	r3, r1
   3650c:	602b      	str	r3, [r5, #0]
   3650e:	e7c0      	b.n	36492 <_svfiprintf_r+0x102>
   36510:	434b      	muls	r3, r1
   36512:	3401      	adds	r4, #1
   36514:	189b      	adds	r3, r3, r2
   36516:	2001      	movs	r0, #1
   36518:	e7a0      	b.n	3645c <_svfiprintf_r+0xcc>
   3651a:	2301      	movs	r3, #1
   3651c:	425b      	negs	r3, r3
   3651e:	e7c7      	b.n	364b0 <_svfiprintf_r+0x120>
   36520:	2300      	movs	r3, #0
   36522:	0014      	movs	r4, r2
   36524:	200a      	movs	r0, #10
   36526:	001a      	movs	r2, r3
   36528:	606b      	str	r3, [r5, #4]
   3652a:	7821      	ldrb	r1, [r4, #0]
   3652c:	3930      	subs	r1, #48	; 0x30
   3652e:	2909      	cmp	r1, #9
   36530:	d903      	bls.n	3653a <_svfiprintf_r+0x1aa>
   36532:	2b00      	cmp	r3, #0
   36534:	d0bd      	beq.n	364b2 <_svfiprintf_r+0x122>
   36536:	9207      	str	r2, [sp, #28]
   36538:	e7bb      	b.n	364b2 <_svfiprintf_r+0x122>
   3653a:	4342      	muls	r2, r0
   3653c:	3401      	adds	r4, #1
   3653e:	1852      	adds	r2, r2, r1
   36540:	2301      	movs	r3, #1
   36542:	e7f2      	b.n	3652a <_svfiprintf_r+0x19a>
   36544:	3307      	adds	r3, #7
   36546:	e7d5      	b.n	364f4 <_svfiprintf_r+0x164>
   36548:	ab05      	add	r3, sp, #20
   3654a:	9300      	str	r3, [sp, #0]
   3654c:	003a      	movs	r2, r7
   3654e:	4b11      	ldr	r3, [pc, #68]	; (36594 <_svfiprintf_r+0x204>)
   36550:	0029      	movs	r1, r5
   36552:	9802      	ldr	r0, [sp, #8]
   36554:	e000      	b.n	36558 <_svfiprintf_r+0x1c8>
   36556:	bf00      	nop
   36558:	9003      	str	r0, [sp, #12]
   3655a:	9b03      	ldr	r3, [sp, #12]
   3655c:	3301      	adds	r3, #1
   3655e:	d1cc      	bne.n	364fa <_svfiprintf_r+0x16a>
   36560:	89bb      	ldrh	r3, [r7, #12]
   36562:	980b      	ldr	r0, [sp, #44]	; 0x2c
   36564:	065b      	lsls	r3, r3, #25
   36566:	d400      	bmi.n	3656a <_svfiprintf_r+0x1da>
   36568:	e729      	b.n	363be <_svfiprintf_r+0x2e>
   3656a:	2001      	movs	r0, #1
   3656c:	4240      	negs	r0, r0
   3656e:	e726      	b.n	363be <_svfiprintf_r+0x2e>
   36570:	ab05      	add	r3, sp, #20
   36572:	9300      	str	r3, [sp, #0]
   36574:	003a      	movs	r2, r7
   36576:	4b07      	ldr	r3, [pc, #28]	; (36594 <_svfiprintf_r+0x204>)
   36578:	0029      	movs	r1, r5
   3657a:	9802      	ldr	r0, [sp, #8]
   3657c:	f000 f87a 	bl	36674 <_printf_i>
   36580:	e7ea      	b.n	36558 <_svfiprintf_r+0x1c8>
   36582:	46c0      	nop			; (mov r8, r8)
   36584:	0003b29e 	.word	0x0003b29e
   36588:	0003b2a4 	.word	0x0003b2a4
   3658c:	0003b2a8 	.word	0x0003b2a8
   36590:	00000000 	.word	0x00000000
   36594:	000362cd 	.word	0x000362cd

00036598 <_printf_common>:
   36598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3659a:	0015      	movs	r5, r2
   3659c:	9301      	str	r3, [sp, #4]
   3659e:	688a      	ldr	r2, [r1, #8]
   365a0:	690b      	ldr	r3, [r1, #16]
   365a2:	9000      	str	r0, [sp, #0]
   365a4:	000c      	movs	r4, r1
   365a6:	4293      	cmp	r3, r2
   365a8:	da00      	bge.n	365ac <_printf_common+0x14>
   365aa:	0013      	movs	r3, r2
   365ac:	0022      	movs	r2, r4
   365ae:	602b      	str	r3, [r5, #0]
   365b0:	3243      	adds	r2, #67	; 0x43
   365b2:	7812      	ldrb	r2, [r2, #0]
   365b4:	2a00      	cmp	r2, #0
   365b6:	d001      	beq.n	365bc <_printf_common+0x24>
   365b8:	3301      	adds	r3, #1
   365ba:	602b      	str	r3, [r5, #0]
   365bc:	6823      	ldr	r3, [r4, #0]
   365be:	069b      	lsls	r3, r3, #26
   365c0:	d502      	bpl.n	365c8 <_printf_common+0x30>
   365c2:	682b      	ldr	r3, [r5, #0]
   365c4:	3302      	adds	r3, #2
   365c6:	602b      	str	r3, [r5, #0]
   365c8:	2706      	movs	r7, #6
   365ca:	6823      	ldr	r3, [r4, #0]
   365cc:	401f      	ands	r7, r3
   365ce:	d027      	beq.n	36620 <_printf_common+0x88>
   365d0:	0023      	movs	r3, r4
   365d2:	3343      	adds	r3, #67	; 0x43
   365d4:	781b      	ldrb	r3, [r3, #0]
   365d6:	1e5a      	subs	r2, r3, #1
   365d8:	4193      	sbcs	r3, r2
   365da:	6822      	ldr	r2, [r4, #0]
   365dc:	0692      	lsls	r2, r2, #26
   365de:	d430      	bmi.n	36642 <_printf_common+0xaa>
   365e0:	0022      	movs	r2, r4
   365e2:	9901      	ldr	r1, [sp, #4]
   365e4:	3243      	adds	r2, #67	; 0x43
   365e6:	9800      	ldr	r0, [sp, #0]
   365e8:	9e08      	ldr	r6, [sp, #32]
   365ea:	47b0      	blx	r6
   365ec:	1c43      	adds	r3, r0, #1
   365ee:	d025      	beq.n	3663c <_printf_common+0xa4>
   365f0:	2306      	movs	r3, #6
   365f2:	6820      	ldr	r0, [r4, #0]
   365f4:	682a      	ldr	r2, [r5, #0]
   365f6:	68e1      	ldr	r1, [r4, #12]
   365f8:	4003      	ands	r3, r0
   365fa:	2500      	movs	r5, #0
   365fc:	2b04      	cmp	r3, #4
   365fe:	d103      	bne.n	36608 <_printf_common+0x70>
   36600:	1a8d      	subs	r5, r1, r2
   36602:	43eb      	mvns	r3, r5
   36604:	17db      	asrs	r3, r3, #31
   36606:	401d      	ands	r5, r3
   36608:	68a3      	ldr	r3, [r4, #8]
   3660a:	6922      	ldr	r2, [r4, #16]
   3660c:	4293      	cmp	r3, r2
   3660e:	dd01      	ble.n	36614 <_printf_common+0x7c>
   36610:	1a9b      	subs	r3, r3, r2
   36612:	18ed      	adds	r5, r5, r3
   36614:	2700      	movs	r7, #0
   36616:	42bd      	cmp	r5, r7
   36618:	d120      	bne.n	3665c <_printf_common+0xc4>
   3661a:	2000      	movs	r0, #0
   3661c:	e010      	b.n	36640 <_printf_common+0xa8>
   3661e:	3701      	adds	r7, #1
   36620:	68e3      	ldr	r3, [r4, #12]
   36622:	682a      	ldr	r2, [r5, #0]
   36624:	1a9b      	subs	r3, r3, r2
   36626:	429f      	cmp	r7, r3
   36628:	dad2      	bge.n	365d0 <_printf_common+0x38>
   3662a:	0022      	movs	r2, r4
   3662c:	2301      	movs	r3, #1
   3662e:	3219      	adds	r2, #25
   36630:	9901      	ldr	r1, [sp, #4]
   36632:	9800      	ldr	r0, [sp, #0]
   36634:	9e08      	ldr	r6, [sp, #32]
   36636:	47b0      	blx	r6
   36638:	1c43      	adds	r3, r0, #1
   3663a:	d1f0      	bne.n	3661e <_printf_common+0x86>
   3663c:	2001      	movs	r0, #1
   3663e:	4240      	negs	r0, r0
   36640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36642:	2030      	movs	r0, #48	; 0x30
   36644:	18e1      	adds	r1, r4, r3
   36646:	3143      	adds	r1, #67	; 0x43
   36648:	7008      	strb	r0, [r1, #0]
   3664a:	0021      	movs	r1, r4
   3664c:	1c5a      	adds	r2, r3, #1
   3664e:	3145      	adds	r1, #69	; 0x45
   36650:	7809      	ldrb	r1, [r1, #0]
   36652:	18a2      	adds	r2, r4, r2
   36654:	3243      	adds	r2, #67	; 0x43
   36656:	3302      	adds	r3, #2
   36658:	7011      	strb	r1, [r2, #0]
   3665a:	e7c1      	b.n	365e0 <_printf_common+0x48>
   3665c:	0022      	movs	r2, r4
   3665e:	2301      	movs	r3, #1
   36660:	321a      	adds	r2, #26
   36662:	9901      	ldr	r1, [sp, #4]
   36664:	9800      	ldr	r0, [sp, #0]
   36666:	9e08      	ldr	r6, [sp, #32]
   36668:	47b0      	blx	r6
   3666a:	1c43      	adds	r3, r0, #1
   3666c:	d0e6      	beq.n	3663c <_printf_common+0xa4>
   3666e:	3701      	adds	r7, #1
   36670:	e7d1      	b.n	36616 <_printf_common+0x7e>
	...

00036674 <_printf_i>:
   36674:	b5f0      	push	{r4, r5, r6, r7, lr}
   36676:	b08b      	sub	sp, #44	; 0x2c
   36678:	9206      	str	r2, [sp, #24]
   3667a:	000a      	movs	r2, r1
   3667c:	3243      	adds	r2, #67	; 0x43
   3667e:	9307      	str	r3, [sp, #28]
   36680:	9005      	str	r0, [sp, #20]
   36682:	9204      	str	r2, [sp, #16]
   36684:	7e0a      	ldrb	r2, [r1, #24]
   36686:	000c      	movs	r4, r1
   36688:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3668a:	2a6e      	cmp	r2, #110	; 0x6e
   3668c:	d100      	bne.n	36690 <_printf_i+0x1c>
   3668e:	e08f      	b.n	367b0 <_printf_i+0x13c>
   36690:	d817      	bhi.n	366c2 <_printf_i+0x4e>
   36692:	2a63      	cmp	r2, #99	; 0x63
   36694:	d02c      	beq.n	366f0 <_printf_i+0x7c>
   36696:	d808      	bhi.n	366aa <_printf_i+0x36>
   36698:	2a00      	cmp	r2, #0
   3669a:	d100      	bne.n	3669e <_printf_i+0x2a>
   3669c:	e099      	b.n	367d2 <_printf_i+0x15e>
   3669e:	2a58      	cmp	r2, #88	; 0x58
   366a0:	d054      	beq.n	3674c <_printf_i+0xd8>
   366a2:	0026      	movs	r6, r4
   366a4:	3642      	adds	r6, #66	; 0x42
   366a6:	7032      	strb	r2, [r6, #0]
   366a8:	e029      	b.n	366fe <_printf_i+0x8a>
   366aa:	2a64      	cmp	r2, #100	; 0x64
   366ac:	d001      	beq.n	366b2 <_printf_i+0x3e>
   366ae:	2a69      	cmp	r2, #105	; 0x69
   366b0:	d1f7      	bne.n	366a2 <_printf_i+0x2e>
   366b2:	6821      	ldr	r1, [r4, #0]
   366b4:	681a      	ldr	r2, [r3, #0]
   366b6:	0608      	lsls	r0, r1, #24
   366b8:	d523      	bpl.n	36702 <_printf_i+0x8e>
   366ba:	1d11      	adds	r1, r2, #4
   366bc:	6019      	str	r1, [r3, #0]
   366be:	6815      	ldr	r5, [r2, #0]
   366c0:	e025      	b.n	3670e <_printf_i+0x9a>
   366c2:	2a73      	cmp	r2, #115	; 0x73
   366c4:	d100      	bne.n	366c8 <_printf_i+0x54>
   366c6:	e088      	b.n	367da <_printf_i+0x166>
   366c8:	d808      	bhi.n	366dc <_printf_i+0x68>
   366ca:	2a6f      	cmp	r2, #111	; 0x6f
   366cc:	d029      	beq.n	36722 <_printf_i+0xae>
   366ce:	2a70      	cmp	r2, #112	; 0x70
   366d0:	d1e7      	bne.n	366a2 <_printf_i+0x2e>
   366d2:	2220      	movs	r2, #32
   366d4:	6809      	ldr	r1, [r1, #0]
   366d6:	430a      	orrs	r2, r1
   366d8:	6022      	str	r2, [r4, #0]
   366da:	e003      	b.n	366e4 <_printf_i+0x70>
   366dc:	2a75      	cmp	r2, #117	; 0x75
   366de:	d020      	beq.n	36722 <_printf_i+0xae>
   366e0:	2a78      	cmp	r2, #120	; 0x78
   366e2:	d1de      	bne.n	366a2 <_printf_i+0x2e>
   366e4:	0022      	movs	r2, r4
   366e6:	2178      	movs	r1, #120	; 0x78
   366e8:	3245      	adds	r2, #69	; 0x45
   366ea:	7011      	strb	r1, [r2, #0]
   366ec:	4a6c      	ldr	r2, [pc, #432]	; (368a0 <_printf_i+0x22c>)
   366ee:	e030      	b.n	36752 <_printf_i+0xde>
   366f0:	000e      	movs	r6, r1
   366f2:	681a      	ldr	r2, [r3, #0]
   366f4:	3642      	adds	r6, #66	; 0x42
   366f6:	1d11      	adds	r1, r2, #4
   366f8:	6019      	str	r1, [r3, #0]
   366fa:	6813      	ldr	r3, [r2, #0]
   366fc:	7033      	strb	r3, [r6, #0]
   366fe:	2301      	movs	r3, #1
   36700:	e079      	b.n	367f6 <_printf_i+0x182>
   36702:	0649      	lsls	r1, r1, #25
   36704:	d5d9      	bpl.n	366ba <_printf_i+0x46>
   36706:	1d11      	adds	r1, r2, #4
   36708:	6019      	str	r1, [r3, #0]
   3670a:	2300      	movs	r3, #0
   3670c:	5ed5      	ldrsh	r5, [r2, r3]
   3670e:	2d00      	cmp	r5, #0
   36710:	da03      	bge.n	3671a <_printf_i+0xa6>
   36712:	232d      	movs	r3, #45	; 0x2d
   36714:	9a04      	ldr	r2, [sp, #16]
   36716:	426d      	negs	r5, r5
   36718:	7013      	strb	r3, [r2, #0]
   3671a:	4b62      	ldr	r3, [pc, #392]	; (368a4 <_printf_i+0x230>)
   3671c:	270a      	movs	r7, #10
   3671e:	9303      	str	r3, [sp, #12]
   36720:	e02f      	b.n	36782 <_printf_i+0x10e>
   36722:	6820      	ldr	r0, [r4, #0]
   36724:	6819      	ldr	r1, [r3, #0]
   36726:	0605      	lsls	r5, r0, #24
   36728:	d503      	bpl.n	36732 <_printf_i+0xbe>
   3672a:	1d08      	adds	r0, r1, #4
   3672c:	6018      	str	r0, [r3, #0]
   3672e:	680d      	ldr	r5, [r1, #0]
   36730:	e005      	b.n	3673e <_printf_i+0xca>
   36732:	0640      	lsls	r0, r0, #25
   36734:	d5f9      	bpl.n	3672a <_printf_i+0xb6>
   36736:	680d      	ldr	r5, [r1, #0]
   36738:	1d08      	adds	r0, r1, #4
   3673a:	6018      	str	r0, [r3, #0]
   3673c:	b2ad      	uxth	r5, r5
   3673e:	4b59      	ldr	r3, [pc, #356]	; (368a4 <_printf_i+0x230>)
   36740:	2708      	movs	r7, #8
   36742:	9303      	str	r3, [sp, #12]
   36744:	2a6f      	cmp	r2, #111	; 0x6f
   36746:	d018      	beq.n	3677a <_printf_i+0x106>
   36748:	270a      	movs	r7, #10
   3674a:	e016      	b.n	3677a <_printf_i+0x106>
   3674c:	3145      	adds	r1, #69	; 0x45
   3674e:	700a      	strb	r2, [r1, #0]
   36750:	4a54      	ldr	r2, [pc, #336]	; (368a4 <_printf_i+0x230>)
   36752:	9203      	str	r2, [sp, #12]
   36754:	681a      	ldr	r2, [r3, #0]
   36756:	6821      	ldr	r1, [r4, #0]
   36758:	1d10      	adds	r0, r2, #4
   3675a:	6018      	str	r0, [r3, #0]
   3675c:	6815      	ldr	r5, [r2, #0]
   3675e:	0608      	lsls	r0, r1, #24
   36760:	d522      	bpl.n	367a8 <_printf_i+0x134>
   36762:	07cb      	lsls	r3, r1, #31
   36764:	d502      	bpl.n	3676c <_printf_i+0xf8>
   36766:	2320      	movs	r3, #32
   36768:	4319      	orrs	r1, r3
   3676a:	6021      	str	r1, [r4, #0]
   3676c:	2710      	movs	r7, #16
   3676e:	2d00      	cmp	r5, #0
   36770:	d103      	bne.n	3677a <_printf_i+0x106>
   36772:	2320      	movs	r3, #32
   36774:	6822      	ldr	r2, [r4, #0]
   36776:	439a      	bics	r2, r3
   36778:	6022      	str	r2, [r4, #0]
   3677a:	0023      	movs	r3, r4
   3677c:	2200      	movs	r2, #0
   3677e:	3343      	adds	r3, #67	; 0x43
   36780:	701a      	strb	r2, [r3, #0]
   36782:	6863      	ldr	r3, [r4, #4]
   36784:	60a3      	str	r3, [r4, #8]
   36786:	2b00      	cmp	r3, #0
   36788:	db5c      	blt.n	36844 <_printf_i+0x1d0>
   3678a:	2204      	movs	r2, #4
   3678c:	6821      	ldr	r1, [r4, #0]
   3678e:	4391      	bics	r1, r2
   36790:	6021      	str	r1, [r4, #0]
   36792:	2d00      	cmp	r5, #0
   36794:	d158      	bne.n	36848 <_printf_i+0x1d4>
   36796:	9e04      	ldr	r6, [sp, #16]
   36798:	2b00      	cmp	r3, #0
   3679a:	d064      	beq.n	36866 <_printf_i+0x1f2>
   3679c:	0026      	movs	r6, r4
   3679e:	9b03      	ldr	r3, [sp, #12]
   367a0:	3642      	adds	r6, #66	; 0x42
   367a2:	781b      	ldrb	r3, [r3, #0]
   367a4:	7033      	strb	r3, [r6, #0]
   367a6:	e05e      	b.n	36866 <_printf_i+0x1f2>
   367a8:	0648      	lsls	r0, r1, #25
   367aa:	d5da      	bpl.n	36762 <_printf_i+0xee>
   367ac:	b2ad      	uxth	r5, r5
   367ae:	e7d8      	b.n	36762 <_printf_i+0xee>
   367b0:	6809      	ldr	r1, [r1, #0]
   367b2:	681a      	ldr	r2, [r3, #0]
   367b4:	0608      	lsls	r0, r1, #24
   367b6:	d505      	bpl.n	367c4 <_printf_i+0x150>
   367b8:	1d11      	adds	r1, r2, #4
   367ba:	6019      	str	r1, [r3, #0]
   367bc:	6813      	ldr	r3, [r2, #0]
   367be:	6962      	ldr	r2, [r4, #20]
   367c0:	601a      	str	r2, [r3, #0]
   367c2:	e006      	b.n	367d2 <_printf_i+0x15e>
   367c4:	0649      	lsls	r1, r1, #25
   367c6:	d5f7      	bpl.n	367b8 <_printf_i+0x144>
   367c8:	1d11      	adds	r1, r2, #4
   367ca:	6019      	str	r1, [r3, #0]
   367cc:	6813      	ldr	r3, [r2, #0]
   367ce:	8aa2      	ldrh	r2, [r4, #20]
   367d0:	801a      	strh	r2, [r3, #0]
   367d2:	2300      	movs	r3, #0
   367d4:	9e04      	ldr	r6, [sp, #16]
   367d6:	6123      	str	r3, [r4, #16]
   367d8:	e054      	b.n	36884 <_printf_i+0x210>
   367da:	681a      	ldr	r2, [r3, #0]
   367dc:	1d11      	adds	r1, r2, #4
   367de:	6019      	str	r1, [r3, #0]
   367e0:	6816      	ldr	r6, [r2, #0]
   367e2:	2100      	movs	r1, #0
   367e4:	6862      	ldr	r2, [r4, #4]
   367e6:	0030      	movs	r0, r6
   367e8:	f000 f922 	bl	36a30 <memchr>
   367ec:	2800      	cmp	r0, #0
   367ee:	d001      	beq.n	367f4 <_printf_i+0x180>
   367f0:	1b80      	subs	r0, r0, r6
   367f2:	6060      	str	r0, [r4, #4]
   367f4:	6863      	ldr	r3, [r4, #4]
   367f6:	6123      	str	r3, [r4, #16]
   367f8:	2300      	movs	r3, #0
   367fa:	9a04      	ldr	r2, [sp, #16]
   367fc:	7013      	strb	r3, [r2, #0]
   367fe:	e041      	b.n	36884 <_printf_i+0x210>
   36800:	6923      	ldr	r3, [r4, #16]
   36802:	0032      	movs	r2, r6
   36804:	9906      	ldr	r1, [sp, #24]
   36806:	9805      	ldr	r0, [sp, #20]
   36808:	9d07      	ldr	r5, [sp, #28]
   3680a:	47a8      	blx	r5
   3680c:	1c43      	adds	r3, r0, #1
   3680e:	d043      	beq.n	36898 <_printf_i+0x224>
   36810:	6823      	ldr	r3, [r4, #0]
   36812:	2500      	movs	r5, #0
   36814:	079b      	lsls	r3, r3, #30
   36816:	d40f      	bmi.n	36838 <_printf_i+0x1c4>
   36818:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3681a:	68e0      	ldr	r0, [r4, #12]
   3681c:	4298      	cmp	r0, r3
   3681e:	da3d      	bge.n	3689c <_printf_i+0x228>
   36820:	0018      	movs	r0, r3
   36822:	e03b      	b.n	3689c <_printf_i+0x228>
   36824:	0022      	movs	r2, r4
   36826:	2301      	movs	r3, #1
   36828:	3219      	adds	r2, #25
   3682a:	9906      	ldr	r1, [sp, #24]
   3682c:	9805      	ldr	r0, [sp, #20]
   3682e:	9e07      	ldr	r6, [sp, #28]
   36830:	47b0      	blx	r6
   36832:	1c43      	adds	r3, r0, #1
   36834:	d030      	beq.n	36898 <_printf_i+0x224>
   36836:	3501      	adds	r5, #1
   36838:	68e3      	ldr	r3, [r4, #12]
   3683a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3683c:	1a9b      	subs	r3, r3, r2
   3683e:	429d      	cmp	r5, r3
   36840:	dbf0      	blt.n	36824 <_printf_i+0x1b0>
   36842:	e7e9      	b.n	36818 <_printf_i+0x1a4>
   36844:	2d00      	cmp	r5, #0
   36846:	d0a9      	beq.n	3679c <_printf_i+0x128>
   36848:	9e04      	ldr	r6, [sp, #16]
   3684a:	0028      	movs	r0, r5
   3684c:	0039      	movs	r1, r7
   3684e:	f7fc ffe7 	bl	33820 <__aeabi_uidivmod>
   36852:	9b03      	ldr	r3, [sp, #12]
   36854:	3e01      	subs	r6, #1
   36856:	5c5b      	ldrb	r3, [r3, r1]
   36858:	0028      	movs	r0, r5
   3685a:	7033      	strb	r3, [r6, #0]
   3685c:	0039      	movs	r1, r7
   3685e:	f7fc ff59 	bl	33714 <__udivsi3>
   36862:	1e05      	subs	r5, r0, #0
   36864:	d1f1      	bne.n	3684a <_printf_i+0x1d6>
   36866:	2f08      	cmp	r7, #8
   36868:	d109      	bne.n	3687e <_printf_i+0x20a>
   3686a:	6823      	ldr	r3, [r4, #0]
   3686c:	07db      	lsls	r3, r3, #31
   3686e:	d506      	bpl.n	3687e <_printf_i+0x20a>
   36870:	6863      	ldr	r3, [r4, #4]
   36872:	6922      	ldr	r2, [r4, #16]
   36874:	4293      	cmp	r3, r2
   36876:	dc02      	bgt.n	3687e <_printf_i+0x20a>
   36878:	2330      	movs	r3, #48	; 0x30
   3687a:	3e01      	subs	r6, #1
   3687c:	7033      	strb	r3, [r6, #0]
   3687e:	9b04      	ldr	r3, [sp, #16]
   36880:	1b9b      	subs	r3, r3, r6
   36882:	6123      	str	r3, [r4, #16]
   36884:	9b07      	ldr	r3, [sp, #28]
   36886:	aa09      	add	r2, sp, #36	; 0x24
   36888:	9300      	str	r3, [sp, #0]
   3688a:	0021      	movs	r1, r4
   3688c:	9b06      	ldr	r3, [sp, #24]
   3688e:	9805      	ldr	r0, [sp, #20]
   36890:	f7ff fe82 	bl	36598 <_printf_common>
   36894:	1c43      	adds	r3, r0, #1
   36896:	d1b3      	bne.n	36800 <_printf_i+0x18c>
   36898:	2001      	movs	r0, #1
   3689a:	4240      	negs	r0, r0
   3689c:	b00b      	add	sp, #44	; 0x2c
   3689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   368a0:	0003b2c0 	.word	0x0003b2c0
   368a4:	0003b2af 	.word	0x0003b2af

000368a8 <__sread>:
   368a8:	b570      	push	{r4, r5, r6, lr}
   368aa:	000c      	movs	r4, r1
   368ac:	250e      	movs	r5, #14
   368ae:	5f49      	ldrsh	r1, [r1, r5]
   368b0:	f000 f8f0 	bl	36a94 <_read_r>
   368b4:	2800      	cmp	r0, #0
   368b6:	db03      	blt.n	368c0 <__sread+0x18>
   368b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   368ba:	181b      	adds	r3, r3, r0
   368bc:	6563      	str	r3, [r4, #84]	; 0x54
   368be:	bd70      	pop	{r4, r5, r6, pc}
   368c0:	89a3      	ldrh	r3, [r4, #12]
   368c2:	4a02      	ldr	r2, [pc, #8]	; (368cc <__sread+0x24>)
   368c4:	4013      	ands	r3, r2
   368c6:	81a3      	strh	r3, [r4, #12]
   368c8:	e7f9      	b.n	368be <__sread+0x16>
   368ca:	46c0      	nop			; (mov r8, r8)
   368cc:	ffffefff 	.word	0xffffefff

000368d0 <__swrite>:
   368d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   368d2:	001f      	movs	r7, r3
   368d4:	898b      	ldrh	r3, [r1, #12]
   368d6:	0005      	movs	r5, r0
   368d8:	000c      	movs	r4, r1
   368da:	0016      	movs	r6, r2
   368dc:	05db      	lsls	r3, r3, #23
   368de:	d505      	bpl.n	368ec <__swrite+0x1c>
   368e0:	230e      	movs	r3, #14
   368e2:	5ec9      	ldrsh	r1, [r1, r3]
   368e4:	2200      	movs	r2, #0
   368e6:	2302      	movs	r3, #2
   368e8:	f000 f88e 	bl	36a08 <_lseek_r>
   368ec:	89a3      	ldrh	r3, [r4, #12]
   368ee:	4a05      	ldr	r2, [pc, #20]	; (36904 <__swrite+0x34>)
   368f0:	0028      	movs	r0, r5
   368f2:	4013      	ands	r3, r2
   368f4:	81a3      	strh	r3, [r4, #12]
   368f6:	0032      	movs	r2, r6
   368f8:	230e      	movs	r3, #14
   368fa:	5ee1      	ldrsh	r1, [r4, r3]
   368fc:	003b      	movs	r3, r7
   368fe:	f000 f839 	bl	36974 <_write_r>
   36902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36904:	ffffefff 	.word	0xffffefff

00036908 <__sseek>:
   36908:	b570      	push	{r4, r5, r6, lr}
   3690a:	000c      	movs	r4, r1
   3690c:	250e      	movs	r5, #14
   3690e:	5f49      	ldrsh	r1, [r1, r5]
   36910:	f000 f87a 	bl	36a08 <_lseek_r>
   36914:	89a3      	ldrh	r3, [r4, #12]
   36916:	1c42      	adds	r2, r0, #1
   36918:	d103      	bne.n	36922 <__sseek+0x1a>
   3691a:	4a05      	ldr	r2, [pc, #20]	; (36930 <__sseek+0x28>)
   3691c:	4013      	ands	r3, r2
   3691e:	81a3      	strh	r3, [r4, #12]
   36920:	bd70      	pop	{r4, r5, r6, pc}
   36922:	2280      	movs	r2, #128	; 0x80
   36924:	0152      	lsls	r2, r2, #5
   36926:	4313      	orrs	r3, r2
   36928:	81a3      	strh	r3, [r4, #12]
   3692a:	6560      	str	r0, [r4, #84]	; 0x54
   3692c:	e7f8      	b.n	36920 <__sseek+0x18>
   3692e:	46c0      	nop			; (mov r8, r8)
   36930:	ffffefff 	.word	0xffffefff

00036934 <__sclose>:
   36934:	b510      	push	{r4, lr}
   36936:	230e      	movs	r3, #14
   36938:	5ec9      	ldrsh	r1, [r1, r3]
   3693a:	f000 f82f 	bl	3699c <_close_r>
   3693e:	bd10      	pop	{r4, pc}

00036940 <strchr>:
   36940:	b2c9      	uxtb	r1, r1
   36942:	7803      	ldrb	r3, [r0, #0]
   36944:	2b00      	cmp	r3, #0
   36946:	d004      	beq.n	36952 <strchr+0x12>
   36948:	4299      	cmp	r1, r3
   3694a:	d100      	bne.n	3694e <strchr+0xe>
   3694c:	4770      	bx	lr
   3694e:	3001      	adds	r0, #1
   36950:	e7f7      	b.n	36942 <strchr+0x2>
   36952:	424b      	negs	r3, r1
   36954:	4159      	adcs	r1, r3
   36956:	4249      	negs	r1, r1
   36958:	4008      	ands	r0, r1
   3695a:	e7f7      	b.n	3694c <strchr+0xc>

0003695c <__ascii_wctomb>:
   3695c:	1e0b      	subs	r3, r1, #0
   3695e:	d004      	beq.n	3696a <__ascii_wctomb+0xe>
   36960:	2aff      	cmp	r2, #255	; 0xff
   36962:	d904      	bls.n	3696e <__ascii_wctomb+0x12>
   36964:	238a      	movs	r3, #138	; 0x8a
   36966:	6003      	str	r3, [r0, #0]
   36968:	3b8b      	subs	r3, #139	; 0x8b
   3696a:	0018      	movs	r0, r3
   3696c:	4770      	bx	lr
   3696e:	700a      	strb	r2, [r1, #0]
   36970:	2301      	movs	r3, #1
   36972:	e7fa      	b.n	3696a <__ascii_wctomb+0xe>

00036974 <_write_r>:
   36974:	b570      	push	{r4, r5, r6, lr}
   36976:	0005      	movs	r5, r0
   36978:	0008      	movs	r0, r1
   3697a:	0011      	movs	r1, r2
   3697c:	2200      	movs	r2, #0
   3697e:	4c06      	ldr	r4, [pc, #24]	; (36998 <_write_r+0x24>)
   36980:	6022      	str	r2, [r4, #0]
   36982:	001a      	movs	r2, r3
   36984:	f7f5 fa38 	bl	2bdf8 <_write>
   36988:	1c43      	adds	r3, r0, #1
   3698a:	d103      	bne.n	36994 <_write_r+0x20>
   3698c:	6823      	ldr	r3, [r4, #0]
   3698e:	2b00      	cmp	r3, #0
   36990:	d000      	beq.n	36994 <_write_r+0x20>
   36992:	602b      	str	r3, [r5, #0]
   36994:	bd70      	pop	{r4, r5, r6, pc}
   36996:	46c0      	nop			; (mov r8, r8)
   36998:	20005d24 	.word	0x20005d24

0003699c <_close_r>:
   3699c:	2300      	movs	r3, #0
   3699e:	b570      	push	{r4, r5, r6, lr}
   369a0:	4c06      	ldr	r4, [pc, #24]	; (369bc <_close_r+0x20>)
   369a2:	0005      	movs	r5, r0
   369a4:	0008      	movs	r0, r1
   369a6:	6023      	str	r3, [r4, #0]
   369a8:	f7f5 fa7a 	bl	2bea0 <_close>
   369ac:	1c43      	adds	r3, r0, #1
   369ae:	d103      	bne.n	369b8 <_close_r+0x1c>
   369b0:	6823      	ldr	r3, [r4, #0]
   369b2:	2b00      	cmp	r3, #0
   369b4:	d000      	beq.n	369b8 <_close_r+0x1c>
   369b6:	602b      	str	r3, [r5, #0]
   369b8:	bd70      	pop	{r4, r5, r6, pc}
   369ba:	46c0      	nop			; (mov r8, r8)
   369bc:	20005d24 	.word	0x20005d24

000369c0 <_fstat_r>:
   369c0:	2300      	movs	r3, #0
   369c2:	b570      	push	{r4, r5, r6, lr}
   369c4:	4c06      	ldr	r4, [pc, #24]	; (369e0 <_fstat_r+0x20>)
   369c6:	0005      	movs	r5, r0
   369c8:	0008      	movs	r0, r1
   369ca:	0011      	movs	r1, r2
   369cc:	6023      	str	r3, [r4, #0]
   369ce:	f7f5 fa71 	bl	2beb4 <_fstat>
   369d2:	1c43      	adds	r3, r0, #1
   369d4:	d103      	bne.n	369de <_fstat_r+0x1e>
   369d6:	6823      	ldr	r3, [r4, #0]
   369d8:	2b00      	cmp	r3, #0
   369da:	d000      	beq.n	369de <_fstat_r+0x1e>
   369dc:	602b      	str	r3, [r5, #0]
   369de:	bd70      	pop	{r4, r5, r6, pc}
   369e0:	20005d24 	.word	0x20005d24

000369e4 <_isatty_r>:
   369e4:	2300      	movs	r3, #0
   369e6:	b570      	push	{r4, r5, r6, lr}
   369e8:	4c06      	ldr	r4, [pc, #24]	; (36a04 <_isatty_r+0x20>)
   369ea:	0005      	movs	r5, r0
   369ec:	0008      	movs	r0, r1
   369ee:	6023      	str	r3, [r4, #0]
   369f0:	f7f5 fa6e 	bl	2bed0 <_isatty>
   369f4:	1c43      	adds	r3, r0, #1
   369f6:	d103      	bne.n	36a00 <_isatty_r+0x1c>
   369f8:	6823      	ldr	r3, [r4, #0]
   369fa:	2b00      	cmp	r3, #0
   369fc:	d000      	beq.n	36a00 <_isatty_r+0x1c>
   369fe:	602b      	str	r3, [r5, #0]
   36a00:	bd70      	pop	{r4, r5, r6, pc}
   36a02:	46c0      	nop			; (mov r8, r8)
   36a04:	20005d24 	.word	0x20005d24

00036a08 <_lseek_r>:
   36a08:	b570      	push	{r4, r5, r6, lr}
   36a0a:	0005      	movs	r5, r0
   36a0c:	0008      	movs	r0, r1
   36a0e:	0011      	movs	r1, r2
   36a10:	2200      	movs	r2, #0
   36a12:	4c06      	ldr	r4, [pc, #24]	; (36a2c <_lseek_r+0x24>)
   36a14:	6022      	str	r2, [r4, #0]
   36a16:	001a      	movs	r2, r3
   36a18:	f7f5 fa63 	bl	2bee2 <_lseek>
   36a1c:	1c43      	adds	r3, r0, #1
   36a1e:	d103      	bne.n	36a28 <_lseek_r+0x20>
   36a20:	6823      	ldr	r3, [r4, #0]
   36a22:	2b00      	cmp	r3, #0
   36a24:	d000      	beq.n	36a28 <_lseek_r+0x20>
   36a26:	602b      	str	r3, [r5, #0]
   36a28:	bd70      	pop	{r4, r5, r6, pc}
   36a2a:	46c0      	nop			; (mov r8, r8)
   36a2c:	20005d24 	.word	0x20005d24

00036a30 <memchr>:
   36a30:	b2c9      	uxtb	r1, r1
   36a32:	1882      	adds	r2, r0, r2
   36a34:	4290      	cmp	r0, r2
   36a36:	d101      	bne.n	36a3c <memchr+0xc>
   36a38:	2000      	movs	r0, #0
   36a3a:	4770      	bx	lr
   36a3c:	7803      	ldrb	r3, [r0, #0]
   36a3e:	428b      	cmp	r3, r1
   36a40:	d0fb      	beq.n	36a3a <memchr+0xa>
   36a42:	3001      	adds	r0, #1
   36a44:	e7f6      	b.n	36a34 <memchr+0x4>

00036a46 <_realloc_r>:
   36a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a48:	0007      	movs	r7, r0
   36a4a:	000d      	movs	r5, r1
   36a4c:	0016      	movs	r6, r2
   36a4e:	2900      	cmp	r1, #0
   36a50:	d105      	bne.n	36a5e <_realloc_r+0x18>
   36a52:	0011      	movs	r1, r2
   36a54:	f7fe fe9e 	bl	35794 <_malloc_r>
   36a58:	0004      	movs	r4, r0
   36a5a:	0020      	movs	r0, r4
   36a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36a5e:	2a00      	cmp	r2, #0
   36a60:	d103      	bne.n	36a6a <_realloc_r+0x24>
   36a62:	f7fe fe4d 	bl	35700 <_free_r>
   36a66:	0034      	movs	r4, r6
   36a68:	e7f7      	b.n	36a5a <_realloc_r+0x14>
   36a6a:	f000 f827 	bl	36abc <_malloc_usable_size_r>
   36a6e:	002c      	movs	r4, r5
   36a70:	4286      	cmp	r6, r0
   36a72:	d9f2      	bls.n	36a5a <_realloc_r+0x14>
   36a74:	0031      	movs	r1, r6
   36a76:	0038      	movs	r0, r7
   36a78:	f7fe fe8c 	bl	35794 <_malloc_r>
   36a7c:	1e04      	subs	r4, r0, #0
   36a7e:	d0ec      	beq.n	36a5a <_realloc_r+0x14>
   36a80:	0029      	movs	r1, r5
   36a82:	0032      	movs	r2, r6
   36a84:	f7fe fe18 	bl	356b8 <memcpy>
   36a88:	0029      	movs	r1, r5
   36a8a:	0038      	movs	r0, r7
   36a8c:	f7fe fe38 	bl	35700 <_free_r>
   36a90:	e7e3      	b.n	36a5a <_realloc_r+0x14>
	...

00036a94 <_read_r>:
   36a94:	b570      	push	{r4, r5, r6, lr}
   36a96:	0005      	movs	r5, r0
   36a98:	0008      	movs	r0, r1
   36a9a:	0011      	movs	r1, r2
   36a9c:	2200      	movs	r2, #0
   36a9e:	4c06      	ldr	r4, [pc, #24]	; (36ab8 <_read_r+0x24>)
   36aa0:	6022      	str	r2, [r4, #0]
   36aa2:	001a      	movs	r2, r3
   36aa4:	f7f5 f97e 	bl	2bda4 <_read>
   36aa8:	1c43      	adds	r3, r0, #1
   36aaa:	d103      	bne.n	36ab4 <_read_r+0x20>
   36aac:	6823      	ldr	r3, [r4, #0]
   36aae:	2b00      	cmp	r3, #0
   36ab0:	d000      	beq.n	36ab4 <_read_r+0x20>
   36ab2:	602b      	str	r3, [r5, #0]
   36ab4:	bd70      	pop	{r4, r5, r6, pc}
   36ab6:	46c0      	nop			; (mov r8, r8)
   36ab8:	20005d24 	.word	0x20005d24

00036abc <_malloc_usable_size_r>:
   36abc:	1f0b      	subs	r3, r1, #4
   36abe:	681b      	ldr	r3, [r3, #0]
   36ac0:	1f18      	subs	r0, r3, #4
   36ac2:	2b00      	cmp	r3, #0
   36ac4:	da01      	bge.n	36aca <_malloc_usable_size_r+0xe>
   36ac6:	580b      	ldr	r3, [r1, r0]
   36ac8:	18c0      	adds	r0, r0, r3
   36aca:	4770      	bx	lr

00036acc <sysfont_glyphs>:
   36acc:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   36adc:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36aec:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36afc:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36b0c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36b1c:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36b2c:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36b3c:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36b4c:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36b5c:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36b6c:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   36b7c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36b8c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36b9c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36bac:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36bbc:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36bcc:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36bdc:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36bec:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36bfc:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36c0c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36c1c:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36c2c:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36c3c:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36c4c:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36c5c:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36c6c:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   36c7c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36c8c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36c9c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36cac:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36cbc:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36ccc:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36cdc:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36cec:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36cfc:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36d0c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36d1c:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36d2c:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36d3c:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36d4c:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36d5c:	4020 0000                                    @..

00036d60 <pcWelcomeMessage>:
   36d60:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36d70:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36d80:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36d90:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36da0:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36db0:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36dc0:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36dd0:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36de0:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36df0:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36e00:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36e10:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36e20:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   36e30:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   36e40:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   36e50:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   36e60:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   36e70:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   36e80:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36e90:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36ea0:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36eb0:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   36ec0:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   36ed0:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   36ee0:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   36ef0:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   36f00:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   36f10:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   36f20:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   36f30:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   36f40:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   36f50:	0000 0000 6574 7473 0000 0000 6574 7473     ....test....test
   36f60:	203a 6553 646e 2073 6574 7473 6420 7461     : Sends test dat
   36f70:	0d61 000a 616e 0075 616e 3a75 5320 6e65     a...nau.nau: Sen
   36f80:	7364 7720 6965 6867 2074 6164 6174 0a0d     ds weight data..
   36f90:	0000 0000 706f 6e65 0000 0000 6573 7672     ....open....serv
   36fa0:	3a6f 4f20 6570 0d6e 000a 0000 6c63 736f     o: Open.....clos
   36fb0:	0065 0000 6573 7672 3a6f 4320 6f6c 6573     e...servo: Close
   36fc0:	0a0d 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   36fd0:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36fe0:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36ff0:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   37000:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   37010:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   37020:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   37030:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   37040:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   37050:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   37060:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   37070:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   37080:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   37090:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   370a0:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   370b0:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   370c0:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   370d0:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   370e0:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   370f0:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   37100:	514d 5454 5020 736f 0d74 000a 6554 7473     MQTT Post...Test
   37110:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   37120:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   37130:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   37140:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   37150:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   37160:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   37170:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   37180:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   37190:	0000 0000 3025 7832 203a 0000 2058 0000     ....%02x: ..X ..

000371a0 <xImuGetCommand>:
   371a0:	6da4 0003 6da8 0003 3be1 0001 0000 0000     .m...m...;......

000371b0 <xOTAUCommand>:
   371b0:	6dcc 0003 6dd0 0003 3d1d 0001 0000 0000     .m...m...=......

000371c0 <xResetCommand>:
   371c0:	6e00 0003 6e08 0003 3d3d 0001 0000 0000     .n...n..==......

000371d0 <xNeotrellisTurnLEDCommand>:
   371d0:	6e24 0003 6e28 0003 3d5d 0001 0004 0000     $n..(n..]=......

000371e0 <xNeotrellisProcessButtonCommand>:
   371e0:	6e70 0003 6e7c 0003 3d89 0001 0000 0000     pn..|n...=......

000371f0 <xDistanceSensorGetDistance>:
   371f0:	6ec8 0003 6ed4 0003 3e8d 0001 0000 0000     .n...n...>......

00037200 <xSendDummyGameData>:
   37200:	6f10 0003 6f18 0003 3f31 0001 0000 0000     .o...o..1?......

00037210 <xI2cScan>:
   37210:	6f38 0003 6f3c 0003 4109 0001 0000 0000     8o..<o...A......

00037220 <xSendTestData>:
   37220:	6f54 0003 6f5c 0003 3fcd 0001 0000 0000     To..\o...?......

00037230 <xSendWeightData>:
   37230:	6f74 0003 6f78 0003 4059 0001 0000 0000     to..xo..Y@......

00037240 <xServoOpen>:
   37240:	6f94 0003 6f9c 0003 4019 0001 0000 0000     .o...o...@......

00037250 <xServoClose>:
   37250:	6fac 0003 6fb4 0003 4039 0001 0000 0000     .o...o..9@......

00037260 <xClearScreen>:
   37260:	6fc4 0003 6fc8 0003 3cd5 0001 0000 0000     .o...o...<......
   37270:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   37280:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   37290:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   372a0:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   372b0:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   372c0:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   372d0:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   372e0:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   372f0:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   37300:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   37310:	000a 0000                                   ....

00037314 <msgBaseGetHWID>:
   37314:	0100 0000                                   ....

00037318 <msgNeopixelPin>:
   37318:	010e 0003                                   ....

0003731c <msgNeopixelSpeed>:
   3731c:	020e 0001                                   ....

00037320 <msgNeopixelBufLength>:
   37320:	030e 3000                                   ...0

00037324 <msgKeypadEnableInt>:
   37324:	0210 0001                                   ....

00037328 <msgKeypadGetCount>:
   37328:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   37338:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   37348:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   37358:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   37368:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   37378:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   37388:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   37398:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   373a8:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   373b8:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   373c8:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   373d8:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   373e8:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   373f8:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   37408:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   37418:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   37428:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   37438:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   37448:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   37458:	4948 4847 4157 0059                         HIGHWAY.

00037460 <main_mqtt_broker>:
   37460:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   37470:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   37480:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   37490:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   374a0:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   374b0:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   374c0:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   374d0:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   374e0:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   374f0:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   37500:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   37510:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   37520:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37530:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37540:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37550:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37560:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   37570:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   37580:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   37590:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   375a0:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   375b0:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   375c0:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   375d0:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   375e0:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   375f0:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   37600:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   37610:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   37620:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   37630:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   37640:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   37650:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   37660:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   37670:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   37680:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   37690:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   376a0:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   376b0:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   376c0:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   376d0:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   376e0:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   376f0:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   37700:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   37710:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   37720:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   37730:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   37740:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37750:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   37760:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   37770:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   37780:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   37790:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   377a0:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   377b0:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   377c0:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   377d0:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   377e0:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   377f0:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   37800:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   37810:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   37820:	5761 3174 3332 3534 3736 0000 0061 0000     aWt1234567..a...
   37830:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   37840:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   37850:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   37860:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   37870:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   37880:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   37890:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   378a0:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   378b0:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   378c0:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   378d0:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   378e0:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   378f0:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   37900:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   37910:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   37920:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   37930:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37940:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37950:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   37960:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37970:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   37980:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   37990:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   379a0:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   379b0:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   379c0:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   379d0:	0a0d 2520 2a2e 0073 6772 2862 0000 0000     .. %.*s.rgb(....
   379e0:	0a0d 4752 2042 6425 2520 2064 6425 0a0d     ..RGB %d %d %d..
   379f0:	0000 0000 227b 6167 656d 3a22 005b 0000     ....{"game":[...
   37a00:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37a10:	6365 6965 6576 2164 0a0d 0000 2e25 732a     eceived!....%.*s
   37a20:	0000 0000 0a0d 6150 7372 6465 4320 6d6f     ......Parsed Com
   37a30:	616d 646e 203a 0000 6425 002c 0a0d 6553     mand: ..%d,...Se
   37a40:	746e 7020 616c 2079 6f74 6320 6e6f 7274     nt play to contr
   37a50:	6c6f 0d21 000a 0000 0a0d 6147 656d 6d20     ol!.......Game m
   37a60:	7365 6173 6567 7220 6365 6965 6576 2064     essage received 
   37a70:	7562 2074 6f6e 2074 6e75 6564 7372 6f74     but not understo
   37a80:	646f 0d21 000a 0000 3e20 203e 0000 0000     od!..... >> ....
   37a90:	3150 4c5f 4445 455f 4553 3135 5f36 3954     P1_LED_ESE516_T9
   37aa0:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   37ab0:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   37ac0:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   37ad0:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   37ae0:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   37af0:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   37b00:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   37b10:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   37b20:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   37b30:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   37b40:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   37b50:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   37b60:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   37b70:	5345 3545 3631 545f 0039 0000 514d 5454     ESE516_T9...MQTT
   37b80:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   37b90:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   37ba0:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   37bb0:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   37bc0:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   37bd0:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   37be0:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   37bf0:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   37c00:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   37c10:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   37c20:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   37c30:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   37c40:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   37c50:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   37c60:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   37c70:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   37c80:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   37c90:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   37ca0:	227b 6d69 7875 3a22 6425 202c 6922 756d     {"imux":%d, "imu
   37cb0:	2279 203a 6425 202c 6922 756d 227a 203a     y": %d, "imuz": 
   37cc0:	6425 007d 3150 495f 554d 455f 4553 3135     %d}.P1_IMU_ESE51
   37cd0:	5f36 3954 0000 0000 227b 6574 7473 3a22     6_T9....{"test":
   37ce0:	6425 7d20 0000 0000 4554 5453 545f 504f     %d }....TEST_TOP
   37cf0:	4349 355f 3631 545f 0039 0000 414e 5f55     IC_516_T9...NAU_
   37d00:	4f54 4950 5f43 3135 5f36 3954 0000 0000     TOPIC_516_T9....
   37d10:	6425 0000 7d5d 0000 0a0d 0000 3250 475f     %d..]}......P2_G
   37d20:	4d41 5f45 5345 3545 3631 545f 0039 0000     AME_ESE516_T9...
   37d30:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   37d40:	676e 5720 6669 2069 6144 6174 7120 6575     ng Wifi Data que
   37d50:	6575 2173 0a0d 0000 5345 3545 3631 2d20     ues!....ESE516 -
   37d60:	5720 6669 2069 6e49 7469 4320 646f 0d65      Wifi Init Code.
   37d70:	000a 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
   37d80:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
   37d90:	726f 2021 7228 7365 2520 2964 0a0d 0000     or! (res %d)....
   37da0:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
   37db0:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
   37dc0:	0d2e 000a 3150 545f 4d45 4550 4152 5554     ....P1_TEMPERATU
   37dd0:	4552 455f 4553 3135 5f36 3954 0000 0000     RE_ESE516_T9....
   37de0:	514d 5454 7320 6e65 2064 7325 0a0d 0000     MQTT send %s....
   37df0:	6cd4 0001 6ce0 0001 6cf2 0001 6d48 0001     .l...l...l..Hm..
   37e00:	6d68 0001 6568 706c 0000 0000 0a0d 6568     hm..help......he
   37e10:	706c 0d3a 200a 694c 7473 2073 6c61 206c     lp:.. Lists all 
   37e20:	6874 2065 6572 6967 7473 7265 6465 6320     the registered c
   37e30:	6d6f 616d 646e 0d73 0d0a 000a 6e49 6f63     ommands.....Inco
   37e40:	7272 6365 2074 6f63 6d6d 6e61 2064 6170     rrect command pa
   37e50:	6172 656d 6574 2872 2973 202e 4520 746e     rameter(s).  Ent
   37e60:	7265 2220 6568 706c 2022 6f74 7620 6569     er "help" to vie
   37e70:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   37e80:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   37e90:	0d0a 000a 6f43 6d6d 6e61 2064 6f6e 2074     ....Command not 
   37ea0:	6572 6f63 6e67 7369 6465 202e 4520 746e     recognised.  Ent
   37eb0:	7265 2720 6568 706c 2027 6f74 7620 6569     er 'help' to vie
   37ec0:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   37ed0:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   37ee0:	0d0a 000a                                   ....

00037ee4 <xHelpCommand>:
   37ee4:	7e04 0003 7e0c 0003 8b8d 0001 0000 0000     .~...~..........
   37ef4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37f04:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37f14:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37f24:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37f34:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37f44:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37f54:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37f64:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37f74:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37f84:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37f94:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37fa4:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37fb4:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37fc4:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37fd4:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37fe4:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37ff4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38004:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   38014:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38024:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   38034:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   38044:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   38054:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   38064:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38074:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   38084:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   38094:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   380a4:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   380b4:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   380c4:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   380d4:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   380e4:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   380f4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   38104:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38114:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   38124:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   38134:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   38144:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   38154:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   38164:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   38174:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   38184:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   38194:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   381a4:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   381b4:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   381c4:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   381d4:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   381e4:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   381f4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   38204:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38214:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   38224:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   38234:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   38244:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   38254:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   38264:	6365 6374 616c 7373 0021 0000 92b2 0001     ectclass!.......
   38274:	92aa 0001 92ae 0001 92a2 0001 92a6 0001     ................
   38284:	92b6 0001 92ba 0001 92be 0001 92c2 0001     ................
   38294:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   382a4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   382b4:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   382c4:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   382d4:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   382e4:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   382f4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38304:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   38314:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   38324:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   38334:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38344:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   38354:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   38364:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   38374:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38384:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   38394:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   383a4:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   383b4:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   383c4:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   383d4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   383e4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   383f4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38404:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   38414:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38424:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38434:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38444:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   38454:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   38464:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   38474:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   38484:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   38494:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   384a4:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   384b4:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   384c4:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   384d4:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   384e4:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   384f4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   38504:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   38514:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   38524:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   38534:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   38544:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38554:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38564:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38574:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38584:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38594:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   385a4:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   385b4:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   385c4:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   385d4:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   385e4:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   385f4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   38604:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38614:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   38624:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   38634:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   38644:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38654:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   38664:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   38674:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   38684:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38694:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   386a4:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   386b4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   386c4:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   386d4:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   386e4:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   386f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38704:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38714:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   38724:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38734:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   38744:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   38754:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   38764:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38774:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38784:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38794:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   387a4:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   387b4:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   387c4:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   387d4:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   387e4:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   387f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38804:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38814:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   38824:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   38834:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38844:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38854:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38864:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38874:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38884:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38894:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   388a4:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   388b4:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   388c4:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   388d4:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   388e4:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   388f4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   38904:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38914:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   38924:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   38934:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   38944:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38954:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38964:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38974:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38984:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38994:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   389a4:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   389b4:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   389c4:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   389d4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   389e4:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   389f4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   38a04:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   38a14:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   38a24:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38a34:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   38a44:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38a54:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38a64:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38a74:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38a84:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38a94:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38aa4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38ab4:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38ac4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38ad4:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38ae4:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   38af4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   38b04:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   38b14:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38b24:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38b34:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38b44:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38b54:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38b64:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38b74:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38b84:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38b94:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38ba4:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38bb4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38bc4:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38bd4:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38be4:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   38bf4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c04:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   38c14:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   38c24:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38c34:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38c44:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38c54:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38c64:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38c74:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38c84:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38c94:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38ca4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38cb4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38cc4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38cd4:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38ce4:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38cf4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38d04:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38d14:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   38d24:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38d34:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38d44:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38d54:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38d64:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38d74:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38d84:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38d94:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38da4:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38db4:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38dc4:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38dd4:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38de4:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38df4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38e04:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38e14:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38e24:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38e34:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38e44:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38e54:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38e64:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38e74:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38e84:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38e94:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38ea4:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38eb4:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38ec4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38ed4:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38ee4:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38ef4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38f04:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38f14:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38f24:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38f34:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38f44:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38f54:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38f64:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38f74:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38f84:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38f94:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38fa4:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38fb4:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38fc4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38fd4:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38fe4:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38ff4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   39004:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   39014:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   39024:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   39034:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   39044:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   39054:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   39064:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   39074:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   39084:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   39094:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   390a4:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   390b4:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   390c4:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   390d4:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   390e4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   390f4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   39104:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   39114:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   39124:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   39134:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   39144:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   39154:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   39164:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39174:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   39184:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39194:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   391a4:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   391b4:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   391c4:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   391d4:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   391e4:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   391f4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   39204:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   39214:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39224:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   39234:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   39244:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   39254:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   39264:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   39274:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39284:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   39294:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   392a4:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   392b4:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   392c4:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   392d4:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   392e4:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   392f4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   39304:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   39314:	0000 0000 6d54 2072 7653 0063 e348 0001     ....Tmr Svc.H...
   39324:	e348 0001 e348 0001 e3d6 0001 e3a0 0001     H...H...........
   39334:	e3ca 0001 e348 0001 e348 0001 e3d6 0001     ....H...H.......
   39344:	e3a0 0001                                   ....

00039348 <sd_mmc_trans_units>:
   39348:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00039364 <sd_trans_multipliers>:
   39364:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39374:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   39384:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   39394:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000393a4 <mmc_trans_multipliers>:
   393a4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   393b4:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   393c4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   393d4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   393e4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   393f4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   39404:	746c 6320 646d 000a 000d 0000               lt cmd......

00039410 <__FUNCTION__.17099>:
   39410:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   39420:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39430:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   39440:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39450:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   39460:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   39470:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   39480:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   39490:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   394a0:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   394b0:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   394c0:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   394d0:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   394e0:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   394f0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   39500:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   39510:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   39520:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39530:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   39540:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39550:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   39560:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   39570:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   39580:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   39590:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   395a0:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   395b0:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   395c0:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   395d0:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   395e0:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   395f0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   39600:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   39610:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   39620:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39630:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   39640:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39650:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   39660:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   39670:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   39680:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   39690:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   396a0:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   396b0:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   396c0:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   396d0:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   396e0:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   396f0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   39700:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   39710:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   39720:	203f 6425 000a 0000 254c 0002 251c 0002     ? %d....L%...%..
   39730:	2514 0002 252c 0002 2524 0002 2544 0002     .%..,%..$%..D%..
   39740:	2534 0002 253c 0002                         4%..<%..

00039748 <__FUNCTION__.17967>:
   39748:	6968 5f66 6573 646e 0000 0000               hif_send....

00039754 <__FUNCTION__.17977>:
   39754:	6968 5f66 7369 0072                         hif_isr.

0003975c <__FUNCTION__.17986>:
   3975c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003976c <__FUNCTION__.17998>:
   3976c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00039778 <__FUNCTION__.18014>:
   39778:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   39788:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   39798:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   397a8:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   397b8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   397c8:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   397d8:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   397e8:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   397f8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   39808:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   39818:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   39828:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   39838:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   39848:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   39858:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   39868:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   39878:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   39888:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   39898:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   398a8:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   398b8:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   398c8:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   398d8:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   398e8:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   398f8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   39908:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   39918:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   39928:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   39938:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   39948:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   39958:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   39968:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   39978:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   39988:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   39998:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   399a8:	000a 0000 3332 303a 3a32 3130 0000 0000     ....23:02:01....
   399b8:	7041 2072 3931 3220 3230 0033 7244 7669     Apr 19 2023.Driv
   399c8:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   399d8:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   399e8:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   399f8:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   39a08:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   39a18:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   39a28:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   39a38:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   39a48:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   39a58:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   39a68:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   39a78:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   39a88:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   39a98:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   39aa8:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   39ab8:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   39ac8:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   39ad8:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   39ae8:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   39af8:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   39b08:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   39b18:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   39b28:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   39b38:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   39b48:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039b54 <__FUNCTION__.17949>:
   39b54:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039b60 <__FUNCTION__.17978>:
   39b60:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039b70 <__FUNCTION__.18009>:
   39b70:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39b80:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39b90:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   39ba0:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   39bb0:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   39bc0:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   39bd0:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   39be0:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   39bf0:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39c00:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039c10 <__FUNCTION__.17806>:
   39c10:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039c1c <__FUNCTION__.17855>:
   39c1c:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39c2c:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39c3c:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39c4c:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39c5c:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39c6c:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39c7c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39c8c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39c9c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39cac:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39cbc:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39ccc:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39cdc:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39cec:	6920 696e 2074 7562 0a73 0000                init bus...

00039cf8 <__FUNCTION__.17853>:
   39cf8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00039d04 <__FUNCTION__.17860>:
   39d04:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00039d14 <crc7_syndrome_table>:
   39d14:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   39d24:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39d34:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39d44:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39d54:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39d64:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39d74:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39d84:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39d94:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39da4:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39db4:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39dc4:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39dd4:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39de4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39df4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39e04:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39e14:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39e24:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39e34:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39e44:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39e54:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39e64:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39e74:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39e84:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39e94:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39ea4:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39eb4:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39ec4:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39ed4:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39ee4:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39ef4:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39f04:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39f14:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39f24:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39f34:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39f44:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39f54:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39f64:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39f74:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39f84:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39f94:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39fa4:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39fb4:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39fc4:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39fd4:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39fe4:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39ff4:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3a004:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3a014:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3a024:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3a034:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3a044:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3a054:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3a064:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3a074:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a084:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3a094:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3a0a4:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3a0b4:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3a0c4:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3a0d4:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3a0e4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3a0f4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3a104:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3a114:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3a124:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3a134:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3a144:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a154:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3a164:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3a174:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3a184:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a194:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3a1a4:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3a1b4:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3a1c4:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3a1d4:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3a1e4:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3a1f4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a204:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3a214:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3a224:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3a234:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3a244:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3a254:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3a264:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3a274:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3a284:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a294:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3a2a4:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3a2b4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a2c4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a2d4:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3a2e4:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3a2f4:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3a304:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a314:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a324:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a334:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a344:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a354:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a364:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a374:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a384:	2e2e 0a2e 0000 0000 4174 0002 4174 0002     ........tA..tA..
   3a394:	4204 0002 40c8 0002 410e 0002 4130 0002     .B...@...A..0A..
   3a3a4:	41b6 0002 41b6 0002 4270 0002 409c 0002     .A...A..pB...@..
   3a3b4:	42ca 0002 42ca 0002 42ca 0002 42ca 0002     .B...B...B...B..
   3a3c4:	4152 0002 46d4 0002 46d4 0002 475c 0002     RA...F...F..\G..
   3a3d4:	4638 0002 467a 0002 4698 0002 4712 0002     8F..zF...F...G..
   3a3e4:	4712 0002 47be 0002 4610 0002 480e 0002     .G...G...F...H..
   3a3f4:	480e 0002 480e 0002 480e 0002 46b6 0002     .H...H...H...F..

0003a404 <__FUNCTION__.17128>:
   3a404:	7073 5f69 6d63 0064                         spi_cmd.

0003a40c <__FUNCTION__.17135>:
   3a40c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a41c <__FUNCTION__.17144>:
   3a41c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a428 <__FUNCTION__.17177>:
   3a428:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a438:	0000 0000                                   ....

0003a43c <__FUNCTION__.17223>:
   3a43c:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a44c <__FUNCTION__.17235>:
   3a44c:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a45c <__FUNCTION__.17246>:
   3a45c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a46c <__FUNCTION__.17258>:
   3a46c:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a47c <__FUNCTION__.17269>:
   3a47c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a488 <__FUNCTION__.17290>:
   3a488:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a498:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a4a8:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a4b8:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a4c8:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a4d8:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a4e8:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a4f8:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a508:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a518:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a528:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a538:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a548:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a558:	2074 2230 0000 0000                         t 0"....

0003a560 <lun_desc>:
   3a560:	fd6d 0001 fdc5 0001 fe11 0001 fe5d 0001     m...........]...
   3a570:	fe8d 0001 ff11 0001 ffa1 0001 a548 0003     ............H...
   3a580:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a590:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a5a0:	a0f2 0002 a16c 0002 a16c 0002 a110 0002     ....l...l.......
   3a5b0:	a10a 0002 a116 0002 a0f8 0002 a11c 0002     ................
   3a5c0:	a152 0002 a354 0002 a3a4 0002 a3a4 0002     R...T...........
   3a5d0:	a3a0 0002 a346 0002 a366 0002 a336 0002     ....F...f...6...
   3a5e0:	a378 0002 a38a 0002 a3f2 0002 a420 0002     x........... ...
   3a5f0:	a420 0002 a41c 0002 a3ec 0002 a3f8 0002      ...............
   3a600:	a3e6 0002 a3fe 0002 a404 0002               ............

0003a60c <tcc_modules>:
   3a60c:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a618 <_tcc_gclk_ids>:
   3a618:	1a1a 001b                                   ....

0003a61c <_tcc_apbcmasks>:
   3a61c:	0100 0000 0200 0000 0400 0000               ............

0003a628 <_tcc_maxs>:
   3a628:	ffff 00ff ffff 00ff ffff 0000               ............

0003a634 <_tcc_cc_nums>:
   3a634:	0204 0002                                   ....

0003a638 <_tcc_ow_nums>:
   3a638:	0408 0002                                   ....

0003a63c <_tcc_intflag>:
   3a63c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a64c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a65c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a66c <LfnOfs>:
   3a66c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a67c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a68c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a69c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a6ac:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a6bc:	5441 2020 2020 0020                         AT     .

0003a6c4 <excvt.4558>:
   3a6c4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a6d4:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a6e4:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a6f4:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a704:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a714:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a724:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a734:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a744 <Tbl>:
   3a744:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a754:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a764:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a774:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a784:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a794:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a7a4:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a7b4:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a7c4:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a7d4:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a7e4:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a7f4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a804:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a814:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a824:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a834:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a844 <tbl_lower.4308>:
   3a844:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a854:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a864:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a874:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a884:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a894:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a8a4:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a8b4:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a8c4:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a8d4:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a8e4:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a8f4:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a904:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a914:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a924:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a934:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a944:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a954:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a964:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a974:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a984:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a994:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a9a4:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a9b4:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a9c4:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a9d4:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a9e4:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a9f4:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3aa04:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3aa14:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003aa24 <tbl_upper.4309>:
   3aa24:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3aa34:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3aa44:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3aa54:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3aa64:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3aa74:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3aa84:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3aa94:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3aaa4:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3aab4:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3aac4:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3aad4:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3aae4:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3aaf4:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3ab04:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3ab14:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3ab24:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3ab34:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3ab44:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3ab54:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3ab64:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3ab74:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3ab84:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3ab94:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3aba4:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3abb4:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3abc4:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3abd4:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3abe4:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3abf4:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3ac04:	f88a 0002 f88a 0002 f88a 0002 f718 0002     ................
   3ac14:	f88a 0002 f802 0002 f88a 0002 f88a 0002     ................
   3ac24:	f88a 0002 f88a 0002 f88a 0002 f88a 0002     ................
   3ac34:	f88a 0002 f87c 0002 514d 4354 0000 0000     ....|...MQTC....
   3ac44:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3ac54:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ac94:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3acac:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3acec:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3acfc:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3ad0c:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3ad1c:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3ad2c:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3ad3c:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3ad4c:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3ad5c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3ad6c:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3ad7c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3ad8c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3ad9c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3adac:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3adbc:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3adcc:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3addc:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3adec:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3adfc:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3ae0c:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3ae1c:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3ae2c:	5448 5054 002f 0000 0d31 0000 197e 0003     HTTP/...1...~...
   3ae3c:	1978 0003 1972 0003 196c 0003 1984 0003     x...r...l.......
   3ae4c:	1966 0003 1984 0003 1960 0003 195a 0003     f.......`...Z...
   3ae5c:	1984 0003 1954 0003 1954 0003 194e 0003     ....T...T...N...
   3ae6c:	1948 0003 1942 0003 2000 4200 2400 4200     H...B.... .B.$.B
   3ae7c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3ae8c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3ae9c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3aeac:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3aebc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3aecc:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3aedc:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3aeec:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3aefc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3af0c:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3af1c:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3af2c:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3af3c:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3af4c:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3af5c:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3af6c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3af7c:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3af8c:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3af9c:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3afac:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3afbc:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3afcc:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3afdc:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3afec:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3affc:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3b00c:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3b01c:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3b02c:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3b03c:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3b04c:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3b05c:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3b06c:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3b07c:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3b08c:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3b09c:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3b0ac:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3b0bc:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3b0cc:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3b0dc:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3b0ec:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3b0fc:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3b10c:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3b11c:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3b12c:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3b13c:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3b14c:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3b15c:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3b16c:	0a0d 0000 3b80 0003 3ad0 0003 3ad0 0003     .....;...:...:..
   3b17c:	3ace 0003 3b72 0003 3b72 0003 3b68 0003     .:..r;..r;..h;..
   3b18c:	3ace 0003 3b72 0003 3b68 0003 3b72 0003     .:..r;..h;..r;..
   3b19c:	3ace 0003 3b78 0003 3b78 0003 3b78 0003     .:..x;..x;..x;..
   3b1ac:	3c08 0003 458c 0003 456e 0003 4528 0003     .<...E..nE..(E..
   3b1bc:	4446 0003 4528 0003 4560 0003 4528 0003     FD..(E..`E..(E..
   3b1cc:	4446 0003 456e 0003 456e 0003 4560 0003     FD..nE..nE..`E..
   3b1dc:	4446 0003 443e 0003 443e 0003 443e 0003     FD..>D..>D..>D..
   3b1ec:	47a4 0003 4bec 0003 4aac 0003 4aac 0003     .G...K...J...J..
   3b1fc:	4aa8 0003 4bc4 0003 4bc4 0003 4bb6 0003     .J...K...K...K..
   3b20c:	4aa8 0003 4bc4 0003 4bb6 0003 4bc4 0003     .J...K...K...K..
   3b21c:	4aa8 0003 4bcc 0003 4bcc 0003 4bcc 0003     .J...K...K...K..
   3b22c:	4dd0 0003                                   .M..

0003b230 <_global_impure_ptr>:
   3b230:	0134 2000                                   4.. 

0003b234 <__sf_fake_stderr>:
	...

0003b254 <__sf_fake_stdin>:
	...

0003b274 <__sf_fake_stdout>:
	...
   3b294:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3b2a4:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3b2b4:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3b2c4:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003b2d1 <_ctype_>:
   3b2d1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3b2e1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3b2f1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b301:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b311:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b321:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b331:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b341:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b351:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b3d4 <_init>:
   3b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b3d6:	46c0      	nop			; (mov r8, r8)
   3b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b3da:	bc08      	pop	{r3}
   3b3dc:	469e      	mov	lr, r3
   3b3de:	4770      	bx	lr

0003b3e0 <__init_array_start>:
   3b3e0:	000120dd 	.word	0x000120dd

0003b3e4 <_fini>:
   3b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b3e6:	46c0      	nop			; (mov r8, r8)
   3b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b3ea:	bc08      	pop	{r3}
   3b3ec:	469e      	mov	lr, r3
   3b3ee:	4770      	bx	lr

0003b3f0 <__fini_array_start>:
   3b3f0:	000120b5 	.word	0x000120b5
