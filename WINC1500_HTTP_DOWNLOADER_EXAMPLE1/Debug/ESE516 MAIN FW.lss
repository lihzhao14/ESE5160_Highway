
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000128e0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20000000  000248e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004b88  20000220  00024b00  00020218  2**4
                  ALLOC
  3 .stack        00002000  20004da8  00029688  00020218  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
  6 .debug_info   0009ca0d  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a326  00000000  00000000  000bcca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a005  00000000  00000000  000c6fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c98  00000000  00000000  000d0fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001970  00000000  00000000  000d2c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ebb2  00000000  00000000  000d45d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00031faf  00000000  00000000  0010318b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b22ea  00000000  00000000  0013513a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006abc  00000000  00000000  001e7424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	a8 6d 00 20 8d f0 01 00 85 f1 01 00 85 f1 01 00     .m. ............
	...
   1202c:	25 7b 01 00 00 00 00 00 00 00 00 00 41 7c 01 00     %{..........A|..
   1203c:	89 7c 01 00 85 f1 01 00 85 f1 01 00 85 f1 01 00     .|..............
   1204c:	55 c1 01 00 85 bd 01 00 85 f1 01 00 09 2e 01 00     U...............
   1205c:	85 f1 01 00 4d 2f 01 00 f9 c7 01 00 11 c8 01 00     ....M/..........
   1206c:	29 c8 01 00 41 c8 01 00 59 c8 01 00 71 c8 01 00     )...A...Y...q...
   1207c:	d5 ef 01 00 e9 ef 01 00 fd ef 01 00 11 58 01 00     .............X..
   1208c:	25 58 01 00 39 58 01 00 00 00 00 00 00 00 00 00     %X..9X..........
   1209c:	91 2c 01 00 85 f1 01 00 cd 2d 01 00 85 f1 01 00     .,.......-......
   120ac:	85 f1 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000220 	.word	0x20000220
   120d4:	00000000 	.word	0x00000000
   120d8:	000248e0 	.word	0x000248e0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000224 	.word	0x20000224
   12108:	000248e0 	.word	0x000248e0
   1210c:	000248e0 	.word	0x000248e0
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20003b10 	.word	0x20003b10
   12224:	000144f1 	.word	0x000144f1

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20003b10 	.word	0x20003b10
   1227c:	000144f1 	.word	0x000144f1

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000023c 	.word	0x2000023c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000023c 	.word	0x2000023c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000023c 	.word	0x2000023c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000240 	.word	0x20000240
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20003b24 	.word	0x20003b24
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	20003b28 	.word	0x20003b28
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	0001bad9 	.word	0x0001bad9

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	0001bb2d 	.word	0x0001bb2d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	20000410 	.word	0x20000410
   12f40:	20003b30 	.word	0x20003b30
   12f44:	200003c0 	.word	0x200003c0
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	000157bd 	.word	0x000157bd
   13444:	fffbffff 	.word	0xfffbffff
   13448:	0001575f 	.word	0x0001575f
   1344c:	00015701 	.word	0x00015701

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	000157bd 	.word	0x000157bd
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20004d40 	.word	0x20004d40
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9c      	ldr	r3, [pc, #624]	; (13a94 <vCommandConsoleTask+0x27c>)
   13822:	0018      	movs	r0, r3
   13824:	4b9c      	ldr	r3, [pc, #624]	; (13a98 <vCommandConsoleTask+0x280>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13828:	4b9c      	ldr	r3, [pc, #624]	; (13a9c <vCommandConsoleTask+0x284>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b9a      	ldr	r3, [pc, #616]	; (13a98 <vCommandConsoleTask+0x280>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13830:	4b9b      	ldr	r3, [pc, #620]	; (13aa0 <vCommandConsoleTask+0x288>)
   13832:	0018      	movs	r0, r3
   13834:	4b98      	ldr	r3, [pc, #608]	; (13a98 <vCommandConsoleTask+0x280>)
   13836:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13838:	4b9a      	ldr	r3, [pc, #616]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b96      	ldr	r3, [pc, #600]	; (13a98 <vCommandConsoleTask+0x280>)
   1383e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13840:	4b99      	ldr	r3, [pc, #612]	; (13aa8 <vCommandConsoleTask+0x290>)
   13842:	0018      	movs	r0, r3
   13844:	4b94      	ldr	r3, [pc, #592]	; (13a98 <vCommandConsoleTask+0x280>)
   13846:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13848:	4b98      	ldr	r3, [pc, #608]	; (13aac <vCommandConsoleTask+0x294>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b92      	ldr	r3, [pc, #584]	; (13a98 <vCommandConsoleTask+0x280>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13850:	4b97      	ldr	r3, [pc, #604]	; (13ab0 <vCommandConsoleTask+0x298>)
   13852:	0018      	movs	r0, r3
   13854:	4b90      	ldr	r3, [pc, #576]	; (13a98 <vCommandConsoleTask+0x280>)
   13856:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13858:	4b96      	ldr	r3, [pc, #600]	; (13ab4 <vCommandConsoleTask+0x29c>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b8e      	ldr	r3, [pc, #568]	; (13a98 <vCommandConsoleTask+0x280>)
   1385e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13860:	2317      	movs	r3, #23
   13862:	18fb      	adds	r3, r7, r3
   13864:	2200      	movs	r2, #0
   13866:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13868:	4b93      	ldr	r3, [pc, #588]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b93      	ldr	r3, [pc, #588]	; (13abc <vCommandConsoleTask+0x2a4>)
   1386e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13870:	2203      	movs	r2, #3
   13872:	2100      	movs	r1, #0
   13874:	2001      	movs	r0, #1
   13876:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13878:	4798      	blx	r3
   1387a:	0002      	movs	r2, r0
   1387c:	4b91      	ldr	r3, [pc, #580]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1387e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13880:	4b90      	ldr	r3, [pc, #576]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	2b00      	cmp	r3, #0
   13886:	d107      	bne.n	13898 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13888:	4b8f      	ldr	r3, [pc, #572]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   1388a:	0019      	movs	r1, r3
   1388c:	2003      	movs	r0, #3
   1388e:	4b8f      	ldr	r3, [pc, #572]	; (13acc <vCommandConsoleTask+0x2b4>)
   13890:	4798      	blx	r3
        vTaskSuspend(NULL);
   13892:	2000      	movs	r0, #0
   13894:	4b8e      	ldr	r3, [pc, #568]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13896:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13898:	230c      	movs	r3, #12
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	0018      	movs	r0, r3
   1389e:	4b8d      	ldr	r3, [pc, #564]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138a0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138a2:	230c      	movs	r3, #12
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2b0a      	cmp	r3, #10
   138aa:	d004      	beq.n	138b6 <vCommandConsoleTask+0x9e>
   138ac:	230c      	movs	r3, #12
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b0d      	cmp	r3, #13
   138b4:	d137      	bne.n	13926 <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138b6:	4b88      	ldr	r3, [pc, #544]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138b8:	0018      	movs	r0, r3
   138ba:	4b80      	ldr	r3, [pc, #512]	; (13abc <vCommandConsoleTask+0x2a4>)
   138bc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138be:	4b87      	ldr	r3, [pc, #540]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138c4:	4b86      	ldr	r3, [pc, #536]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138c6:	2200      	movs	r2, #0
   138c8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ca:	4986      	ldr	r1, [pc, #536]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138cc:	4b86      	ldr	r3, [pc, #536]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138ce:	2231      	movs	r2, #49	; 0x31
   138d0:	0018      	movs	r0, r3
   138d2:	4b86      	ldr	r3, [pc, #536]	; (13aec <vCommandConsoleTask+0x2d4>)
   138d4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138d6:	4b84      	ldr	r3, [pc, #528]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138d8:	2231      	movs	r2, #49	; 0x31
   138da:	2100      	movs	r1, #0
   138dc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138de:	4984      	ldr	r1, [pc, #528]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138e0:	4b80      	ldr	r3, [pc, #512]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e2:	2264      	movs	r2, #100	; 0x64
   138e4:	0018      	movs	r0, r3
   138e6:	4b83      	ldr	r3, [pc, #524]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138ee:	4b80      	ldr	r3, [pc, #512]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f0:	2263      	movs	r2, #99	; 0x63
   138f2:	2100      	movs	r1, #0
   138f4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138f6:	4b7e      	ldr	r3, [pc, #504]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f8:	0018      	movs	r0, r3
   138fa:	4b70      	ldr	r3, [pc, #448]	; (13abc <vCommandConsoleTask+0x2a4>)
   138fc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138fe:	693b      	ldr	r3, [r7, #16]
   13900:	2b00      	cmp	r3, #0
   13902:	d1ec      	bne.n	138de <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13904:	2317      	movs	r3, #23
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1390c:	4b75      	ldr	r3, [pc, #468]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1390e:	2232      	movs	r2, #50	; 0x32
   13910:	2100      	movs	r1, #0
   13912:	0018      	movs	r0, r3
   13914:	4b78      	ldr	r3, [pc, #480]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13916:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13918:	4b75      	ldr	r3, [pc, #468]	; (13af0 <vCommandConsoleTask+0x2d8>)
   1391a:	2264      	movs	r2, #100	; 0x64
   1391c:	2100      	movs	r1, #0
   1391e:	0018      	movs	r0, r3
   13920:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13922:	4798      	blx	r3
   13924:	e0b5      	b.n	13a92 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13926:	4b6d      	ldr	r3, [pc, #436]	; (13adc <vCommandConsoleTask+0x2c4>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d059      	beq.n	139e2 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1392e:	4b6c      	ldr	r3, [pc, #432]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	2b03      	cmp	r3, #3
   13934:	d80c      	bhi.n	13950 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13936:	4b6a      	ldr	r3, [pc, #424]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	1c5a      	adds	r2, r3, #1
   1393c:	b2d1      	uxtb	r1, r2
   1393e:	4a68      	ldr	r2, [pc, #416]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13940:	7011      	strb	r1, [r2, #0]
   13942:	001a      	movs	r2, r3
   13944:	230c      	movs	r3, #12
   13946:	18fb      	adds	r3, r7, r3
   13948:	7819      	ldrb	r1, [r3, #0]
   1394a:	4b6c      	ldr	r3, [pc, #432]	; (13afc <vCommandConsoleTask+0x2e4>)
   1394c:	5499      	strb	r1, [r3, r2]
   1394e:	e005      	b.n	1395c <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   13950:	4b62      	ldr	r3, [pc, #392]	; (13adc <vCommandConsoleTask+0x2c4>)
   13952:	2200      	movs	r2, #0
   13954:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13956:	4b62      	ldr	r3, [pc, #392]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1395c:	4b60      	ldr	r3, [pc, #384]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	2b01      	cmp	r3, #1
   13962:	d999      	bls.n	13898 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13964:	4a66      	ldr	r2, [pc, #408]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13966:	4b65      	ldr	r3, [pc, #404]	; (13afc <vCommandConsoleTask+0x2e4>)
   13968:	0011      	movs	r1, r2
   1396a:	0018      	movs	r0, r3
   1396c:	4b65      	ldr	r3, [pc, #404]	; (13b04 <vCommandConsoleTask+0x2ec>)
   1396e:	4798      	blx	r3
   13970:	1e03      	subs	r3, r0, #0
   13972:	d02f      	beq.n	139d4 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13974:	4964      	ldr	r1, [pc, #400]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13976:	4b5b      	ldr	r3, [pc, #364]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13978:	221b      	movs	r2, #27
   1397a:	0018      	movs	r0, r3
   1397c:	4b63      	ldr	r3, [pc, #396]	; (13b0c <vCommandConsoleTask+0x2f4>)
   1397e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13980:	4b58      	ldr	r3, [pc, #352]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13982:	0018      	movs	r0, r3
   13984:	4b4d      	ldr	r3, [pc, #308]	; (13abc <vCommandConsoleTask+0x2a4>)
   13986:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13988:	2317      	movs	r3, #23
   1398a:	18fb      	adds	r3, r7, r3
   1398c:	2200      	movs	r2, #0
   1398e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13990:	4b54      	ldr	r3, [pc, #336]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13992:	2232      	movs	r2, #50	; 0x32
   13994:	2100      	movs	r1, #0
   13996:	0018      	movs	r0, r3
   13998:	4b57      	ldr	r3, [pc, #348]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1399a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1399c:	4952      	ldr	r1, [pc, #328]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   1399e:	4b51      	ldr	r3, [pc, #324]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139a0:	2231      	movs	r2, #49	; 0x31
   139a2:	0018      	movs	r0, r3
   139a4:	4b51      	ldr	r3, [pc, #324]	; (13aec <vCommandConsoleTask+0x2d4>)
   139a6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a8:	4b4e      	ldr	r3, [pc, #312]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b58      	ldr	r3, [pc, #352]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139ae:	4798      	blx	r3
   139b0:	0003      	movs	r3, r0
   139b2:	2b30      	cmp	r3, #48	; 0x30
   139b4:	d806      	bhi.n	139c4 <vCommandConsoleTask+0x1ac>
   139b6:	4b4c      	ldr	r3, [pc, #304]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   139b8:	0018      	movs	r0, r3
   139ba:	4b55      	ldr	r3, [pc, #340]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139bc:	4798      	blx	r3
   139be:	0003      	movs	r3, r0
   139c0:	b2da      	uxtb	r2, r3
   139c2:	e000      	b.n	139c6 <vCommandConsoleTask+0x1ae>
   139c4:	2231      	movs	r2, #49	; 0x31
   139c6:	2317      	movs	r3, #23
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139cc:	4b45      	ldr	r3, [pc, #276]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139ce:	0018      	movs	r0, r3
   139d0:	4b3a      	ldr	r3, [pc, #232]	; (13abc <vCommandConsoleTask+0x2a4>)
   139d2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139d4:	4b41      	ldr	r3, [pc, #260]	; (13adc <vCommandConsoleTask+0x2c4>)
   139d6:	2200      	movs	r2, #0
   139d8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139da:	4b41      	ldr	r3, [pc, #260]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   139dc:	2200      	movs	r2, #0
   139de:	701a      	strb	r2, [r3, #0]
   139e0:	e75a      	b.n	13898 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139e2:	230c      	movs	r3, #12
   139e4:	18fb      	adds	r3, r7, r3
   139e6:	781b      	ldrb	r3, [r3, #0]
   139e8:	2b0d      	cmp	r3, #13
   139ea:	d100      	bne.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	e754      	b.n	13898 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139ee:	230c      	movs	r3, #12
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2b08      	cmp	r3, #8
   139f6:	d004      	beq.n	13a02 <vCommandConsoleTask+0x1ea>
   139f8:	230c      	movs	r3, #12
   139fa:	18fb      	adds	r3, r7, r3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b7f      	cmp	r3, #127	; 0x7f
   13a00:	d11c      	bne.n	13a3c <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a02:	2308      	movs	r3, #8
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	4a43      	ldr	r2, [pc, #268]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a08:	6812      	ldr	r2, [r2, #0]
   13a0a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a0c:	2308      	movs	r3, #8
   13a0e:	18fb      	adds	r3, r7, r3
   13a10:	0018      	movs	r0, r3
   13a12:	4b2a      	ldr	r3, [pc, #168]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a14:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a16:	2317      	movs	r3, #23
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d037      	beq.n	13a90 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   13a20:	2317      	movs	r3, #23
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781a      	ldrb	r2, [r3, #0]
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	3a01      	subs	r2, #1
   13a2c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a2e:	2317      	movs	r3, #23
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	4a2b      	ldr	r2, [pc, #172]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a36:	2100      	movs	r1, #0
   13a38:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a3a:	e029      	b.n	13a90 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a3c:	230c      	movs	r3, #12
   13a3e:	18fb      	adds	r3, r7, r3
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	2b1b      	cmp	r3, #27
   13a44:	d106      	bne.n	13a54 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a46:	4b25      	ldr	r3, [pc, #148]	; (13adc <vCommandConsoleTask+0x2c4>)
   13a48:	2201      	movs	r2, #1
   13a4a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a4c:	4b24      	ldr	r3, [pc, #144]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13a4e:	2200      	movs	r2, #0
   13a50:	701a      	strb	r2, [r3, #0]
   13a52:	e721      	b.n	13898 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a54:	2317      	movs	r3, #23
   13a56:	18fb      	adds	r3, r7, r3
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b31      	cmp	r3, #49	; 0x31
   13a5c:	d80e      	bhi.n	13a7c <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a5e:	2317      	movs	r3, #23
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	220c      	movs	r2, #12
   13a66:	18ba      	adds	r2, r7, r2
   13a68:	7811      	ldrb	r1, [r2, #0]
   13a6a:	4a1e      	ldr	r2, [pc, #120]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a6c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a6e:	2317      	movs	r3, #23
   13a70:	18fb      	adds	r3, r7, r3
   13a72:	781a      	ldrb	r2, [r3, #0]
   13a74:	2317      	movs	r3, #23
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	3201      	adds	r2, #1
   13a7a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	2200      	movs	r2, #0
   13a82:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a84:	230c      	movs	r3, #12
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	0018      	movs	r0, r3
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a8c:	4798      	blx	r3
   13a8e:	e703      	b.n	13898 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a90:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a92:	e701      	b.n	13898 <vCommandConsoleTask+0x80>
   13a94:	00022d3c 	.word	0x00022d3c
   13a98:	00015905 	.word	0x00015905
   13a9c:	00022dac 	.word	0x00022dac
   13aa0:	00022d4c 	.word	0x00022d4c
   13aa4:	00022d6c 	.word	0x00022d6c
   13aa8:	00022d5c 	.word	0x00022d5c
   13aac:	00022d7c 	.word	0x00022d7c
   13ab0:	00022d8c 	.word	0x00022d8c
   13ab4:	00022d9c 	.word	0x00022d9c
   13ab8:	00022b18 	.word	0x00022b18
   13abc:	0001b7e1 	.word	0x0001b7e1
   13ac0:	00017ec5 	.word	0x00017ec5
   13ac4:	20003b80 	.word	0x20003b80
   13ac8:	00022c68 	.word	0x00022c68
   13acc:	0001b8cd 	.word	0x0001b8cd
   13ad0:	00019cb1 	.word	0x00019cb1
   13ad4:	00013b19 	.word	0x00013b19
   13ad8:	00022c88 	.word	0x00022c88
   13adc:	20000434 	.word	0x20000434
   13ae0:	20000435 	.word	0x20000435
   13ae4:	2000046c 	.word	0x2000046c
   13ae8:	20000438 	.word	0x20000438
   13aec:	00022141 	.word	0x00022141
   13af0:	200004a0 	.word	0x200004a0
   13af4:	00015975 	.word	0x00015975
   13af8:	00021ea7 	.word	0x00021ea7
   13afc:	20000504 	.word	0x20000504
   13b00:	00022c8c 	.word	0x00022c8c
   13b04:	000220d5 	.word	0x000220d5
   13b08:	00022c90 	.word	0x00022c90
   13b0c:	00022091 	.word	0x00022091
   13b10:	00022111 	.word	0x00022111
   13b14:	00022c98 	.word	0x00022c98

00013b18 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	0018      	movs	r0, r3
   13b24:	4b0c      	ldr	r3, [pc, #48]	; (13b58 <FreeRTOS_read+0x40>)
   13b26:	4798      	blx	r3
   13b28:	0003      	movs	r3, r0
   13b2a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b2c:	e00d      	b.n	13b4a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b2e:	4b0b      	ldr	r3, [pc, #44]	; (13b5c <FreeRTOS_read+0x44>)
   13b30:	681a      	ldr	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	425b      	negs	r3, r3
   13b36:	0019      	movs	r1, r3
   13b38:	0010      	movs	r0, r2
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <FreeRTOS_read+0x48>)
   13b3c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	0018      	movs	r0, r3
   13b42:	4b05      	ldr	r3, [pc, #20]	; (13b58 <FreeRTOS_read+0x40>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b4a:	68fb      	ldr	r3, [r7, #12]
   13b4c:	3301      	adds	r3, #1
   13b4e:	d0ee      	beq.n	13b2e <FreeRTOS_read+0x16>
    }
}
   13b50:	46c0      	nop			; (mov r8, r8)
   13b52:	46bd      	mov	sp, r7
   13b54:	b004      	add	sp, #16
   13b56:	bd80      	pop	{r7, pc}
   13b58:	0001b87d 	.word	0x0001b87d
   13b5c:	20003b80 	.word	0x20003b80
   13b60:	00018e7d 	.word	0x00018e7d

00013b64 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b68:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b6a:	2200      	movs	r2, #0
   13b6c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b6e:	4b0a      	ldr	r3, [pc, #40]	; (13b98 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b70:	681b      	ldr	r3, [r3, #0]
   13b72:	4a08      	ldr	r2, [pc, #32]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b74:	0011      	movs	r1, r2
   13b76:	0018      	movs	r0, r3
   13b78:	4b08      	ldr	r3, [pc, #32]	; (13b9c <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b7a:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b7c:	4b05      	ldr	r3, [pc, #20]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d003      	beq.n	13b8c <CliCharReadySemaphoreGiveFromISR+0x28>
   13b84:	4b06      	ldr	r3, [pc, #24]	; (13ba0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b86:	2280      	movs	r2, #128	; 0x80
   13b88:	0552      	lsls	r2, r2, #21
   13b8a:	601a      	str	r2, [r3, #0]
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	bd80      	pop	{r7, pc}
   13b92:	46c0      	nop			; (mov r8, r8)
   13b94:	20000508 	.word	0x20000508
   13b98:	20003b80 	.word	0x20003b80
   13b9c:	000187f5 	.word	0x000187f5
   13ba0:	e000ed04 	.word	0xe000ed04

00013ba4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ba4:	b590      	push	{r4, r7, lr}
   13ba6:	b087      	sub	sp, #28
   13ba8:	af00      	add	r7, sp, #0
   13baa:	60f8      	str	r0, [r7, #12]
   13bac:	60b9      	str	r1, [r7, #8]
   13bae:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13bb0:	2317      	movs	r3, #23
   13bb2:	18fb      	adds	r3, r7, r3
   13bb4:	221b      	movs	r2, #27
   13bb6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13bb8:	2317      	movs	r3, #23
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	4a08      	ldr	r2, [pc, #32]	; (13be0 <xCliClearTerminalScreen+0x3c>)
   13bc0:	4808      	ldr	r0, [pc, #32]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bc2:	210f      	movs	r1, #15
   13bc4:	4c08      	ldr	r4, [pc, #32]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bc6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13bc8:	4a06      	ldr	r2, [pc, #24]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bca:	68b9      	ldr	r1, [r7, #8]
   13bcc:	68fb      	ldr	r3, [r7, #12]
   13bce:	0018      	movs	r0, r3
   13bd0:	4b05      	ldr	r3, [pc, #20]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bd2:	4798      	blx	r3
    return pdFALSE;
   13bd4:	2300      	movs	r3, #0
}
   13bd6:	0018      	movs	r0, r3
   13bd8:	46bd      	mov	sp, r7
   13bda:	b007      	add	sp, #28
   13bdc:	bd90      	pop	{r4, r7, pc}
   13bde:	46c0      	nop			; (mov r8, r8)
   13be0:	00022c9c 	.word	0x00022c9c
   13be4:	20000424 	.word	0x20000424
   13be8:	0002202d 	.word	0x0002202d

00013bec <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bec:	b580      	push	{r7, lr}
   13bee:	b084      	sub	sp, #16
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	60f8      	str	r0, [r7, #12]
   13bf4:	60b9      	str	r1, [r7, #8]
   13bf6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13bf8:	2002      	movs	r0, #2
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <CLI_OTAU+0x1c>)
   13bfc:	4798      	blx	r3

    return pdFALSE;
   13bfe:	2300      	movs	r3, #0
}
   13c00:	0018      	movs	r0, r3
   13c02:	46bd      	mov	sp, r7
   13c04:	b004      	add	sp, #16
   13c06:	bd80      	pop	{r7, pc}
   13c08:	00014f15 	.word	0x00014f15

00013c0c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b084      	sub	sp, #16
   13c10:	af00      	add	r7, sp, #0
   13c12:	60f8      	str	r0, [r7, #12]
   13c14:	60b9      	str	r1, [r7, #8]
   13c16:	607a      	str	r2, [r7, #4]
    system_reset();
   13c18:	4b03      	ldr	r3, [pc, #12]	; (13c28 <CLI_ResetDevice+0x1c>)
   13c1a:	4798      	blx	r3
    return pdFALSE;
   13c1c:	2300      	movs	r3, #0
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	b004      	add	sp, #16
   13c24:	bd80      	pop	{r7, pc}
   13c26:	46c0      	nop			; (mov r8, r8)
   13c28:	00013805 	.word	0x00013805

00013c2c <CLI_SendTestData>:



BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c2c:	b580      	push	{r7, lr}
   13c2e:	b086      	sub	sp, #24
   13c30:	af00      	add	r7, sp, #0
   13c32:	60f8      	str	r0, [r7, #12]
   13c34:	60b9      	str	r1, [r7, #8]
   13c36:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13c38:	2310      	movs	r3, #16
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	2206      	movs	r2, #6
   13c3e:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13c40:	2310      	movs	r3, #16
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	0018      	movs	r0, r3
   13c46:	4b09      	ldr	r3, [pc, #36]	; (13c6c <CLI_SendTestData+0x40>)
   13c48:	4798      	blx	r3
   13c4a:	0003      	movs	r3, r0
   13c4c:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13c4e:	697b      	ldr	r3, [r7, #20]
   13c50:	2b01      	cmp	r3, #1
   13c52:	d105      	bne.n	13c60 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13c54:	4a06      	ldr	r2, [pc, #24]	; (13c70 <CLI_SendTestData+0x44>)
   13c56:	68b9      	ldr	r1, [r7, #8]
   13c58:	68fb      	ldr	r3, [r7, #12]
   13c5a:	0018      	movs	r0, r3
   13c5c:	4b05      	ldr	r3, [pc, #20]	; (13c74 <CLI_SendTestData+0x48>)
   13c5e:	4798      	blx	r3
	}
	return pdFALSE;
   13c60:	2300      	movs	r3, #0
}
   13c62:	0018      	movs	r0, r3
   13c64:	46bd      	mov	sp, r7
   13c66:	b006      	add	sp, #24
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	00014f49 	.word	0x00014f49
   13c70:	00022ca4 	.word	0x00022ca4
   13c74:	0002202d 	.word	0x0002202d

00013c78 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	b084      	sub	sp, #16
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	60f8      	str	r0, [r7, #12]
   13c80:	60b9      	str	r1, [r7, #8]
   13c82:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   13c84:	2002      	movs	r0, #2
   13c86:	4b03      	ldr	r3, [pc, #12]	; (13c94 <CLI_ServoOpen+0x1c>)
   13c88:	4798      	blx	r3
	return pdFALSE;
   13c8a:	2300      	movs	r3, #0
}
   13c8c:	0018      	movs	r0, r3
   13c8e:	46bd      	mov	sp, r7
   13c90:	b004      	add	sp, #16
   13c92:	bd80      	pop	{r7, pc}
   13c94:	00014da1 	.word	0x00014da1

00013c98 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	60f8      	str	r0, [r7, #12]
   13ca0:	60b9      	str	r1, [r7, #8]
   13ca2:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   13ca4:	2003      	movs	r0, #3
   13ca6:	4b03      	ldr	r3, [pc, #12]	; (13cb4 <CLI_ServoClose+0x1c>)
   13ca8:	4798      	blx	r3
	return pdFALSE;
   13caa:	2300      	movs	r3, #0
}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b004      	add	sp, #16
   13cb2:	bd80      	pop	{r7, pc}
   13cb4:	00014da1 	.word	0x00014da1

00013cb8 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cb8:	b590      	push	{r4, r7, lr}
   13cba:	b0ab      	sub	sp, #172	; 0xac
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	60f8      	str	r0, [r7, #12]
   13cc0:	60b9      	str	r1, [r7, #8]
   13cc2:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	ADCchip_Init();
   13cc4:	4b33      	ldr	r3, [pc, #204]	; (13d94 <CLI_SendWeightData+0xdc>)
   13cc6:	4798      	blx	r3
	ADC_StartConversion();
   13cc8:	4b33      	ldr	r3, [pc, #204]	; (13d98 <CLI_SendWeightData+0xe0>)
   13cca:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   13ccc:	46c0      	nop			; (mov r8, r8)
   13cce:	2000      	movs	r0, #0
   13cd0:	4b32      	ldr	r3, [pc, #200]	; (13d9c <CLI_SendWeightData+0xe4>)
   13cd2:	4798      	blx	r3
   13cd4:	0003      	movs	r3, r0
   13cd6:	001a      	movs	r2, r3
   13cd8:	2320      	movs	r3, #32
   13cda:	4013      	ands	r3, r2
   13cdc:	2b20      	cmp	r3, #32
   13cde:	d1f6      	bne.n	13cce <CLI_SendWeightData+0x16>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   13ce0:	4b2f      	ldr	r3, [pc, #188]	; (13da0 <CLI_SendWeightData+0xe8>)
   13ce2:	4798      	blx	r3
   13ce4:	0003      	movs	r3, r0
   13ce6:	22a4      	movs	r2, #164	; 0xa4
   13ce8:	18ba      	adds	r2, r7, r2
   13cea:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   13cec:	23a4      	movs	r3, #164	; 0xa4
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	681b      	ldr	r3, [r3, #0]
   13cf2:	2290      	movs	r2, #144	; 0x90
   13cf4:	18ba      	adds	r2, r7, r2
   13cf6:	0011      	movs	r1, r2
   13cf8:	0018      	movs	r0, r3
   13cfa:	4b2a      	ldr	r3, [pc, #168]	; (13da4 <CLI_SendWeightData+0xec>)
   13cfc:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   13cfe:	2390      	movs	r3, #144	; 0x90
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	681b      	ldr	r3, [r3, #0]
   13d04:	4a28      	ldr	r2, [pc, #160]	; (13da8 <CLI_SendWeightData+0xf0>)
   13d06:	2150      	movs	r1, #80	; 0x50
   13d08:	1878      	adds	r0, r7, r1
   13d0a:	2140      	movs	r1, #64	; 0x40
   13d0c:	4c27      	ldr	r4, [pc, #156]	; (13dac <CLI_SendWeightData+0xf4>)
   13d0e:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   13d10:	2350      	movs	r3, #80	; 0x50
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	0018      	movs	r0, r3
   13d16:	4b26      	ldr	r3, [pc, #152]	; (13db0 <CLI_SendWeightData+0xf8>)
   13d18:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   13d1a:	2390      	movs	r3, #144	; 0x90
   13d1c:	18fb      	adds	r3, r7, r3
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	b29a      	uxth	r2, r3
   13d22:	2398      	movs	r3, #152	; 0x98
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	801a      	strh	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   13d28:	2390      	movs	r3, #144	; 0x90
   13d2a:	18fb      	adds	r3, r7, r3
   13d2c:	685b      	ldr	r3, [r3, #4]
   13d2e:	b29a      	uxth	r2, r3
   13d30:	2398      	movs	r3, #152	; 0x98
   13d32:	18fb      	adds	r3, r7, r3
   13d34:	805a      	strh	r2, [r3, #2]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   13d36:	2398      	movs	r3, #152	; 0x98
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	0018      	movs	r0, r3
   13d3c:	4b1d      	ldr	r3, [pc, #116]	; (13db4 <CLI_SendWeightData+0xfc>)
   13d3e:	4798      	blx	r3
   13d40:	0003      	movs	r3, r0
   13d42:	22a0      	movs	r2, #160	; 0xa0
   13d44:	18ba      	adds	r2, r7, r2
   13d46:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   13d48:	23a0      	movs	r3, #160	; 0xa0
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	2b01      	cmp	r3, #1
   13d50:	d105      	bne.n	13d5e <CLI_SendWeightData+0xa6>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   13d52:	4a19      	ldr	r2, [pc, #100]	; (13db8 <CLI_SendWeightData+0x100>)
   13d54:	68b9      	ldr	r1, [r7, #8]
   13d56:	68fb      	ldr	r3, [r7, #12]
   13d58:	0018      	movs	r0, r3
   13d5a:	4b14      	ldr	r3, [pc, #80]	; (13dac <CLI_SendWeightData+0xf4>)
   13d5c:	4798      	blx	r3
	}
	gfx_mono_init();
   13d5e:	4b17      	ldr	r3, [pc, #92]	; (13dbc <CLI_SendWeightData+0x104>)
   13d60:	4798      	blx	r3
	uint8_t charge = 100;
   13d62:	239f      	movs	r3, #159	; 0x9f
   13d64:	18fb      	adds	r3, r7, r3
   13d66:	2264      	movs	r2, #100	; 0x64
   13d68:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   13d6a:	239f      	movs	r3, #159	; 0x9f
   13d6c:	18fb      	adds	r3, r7, r3
   13d6e:	781a      	ldrb	r2, [r3, #0]
   13d70:	4913      	ldr	r1, [pc, #76]	; (13dc0 <CLI_SendWeightData+0x108>)
   13d72:	2310      	movs	r3, #16
   13d74:	18fb      	adds	r3, r7, r3
   13d76:	0018      	movs	r0, r3
   13d78:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <CLI_SendWeightData+0x10c>)
   13d7a:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   13d7c:	4b12      	ldr	r3, [pc, #72]	; (13dc8 <CLI_SendWeightData+0x110>)
   13d7e:	2210      	movs	r2, #16
   13d80:	18b8      	adds	r0, r7, r2
   13d82:	2208      	movs	r2, #8
   13d84:	2100      	movs	r1, #0
   13d86:	4c11      	ldr	r4, [pc, #68]	; (13dcc <CLI_SendWeightData+0x114>)
   13d88:	47a0      	blx	r4
	return pdFALSE;
   13d8a:	2300      	movs	r3, #0
}
   13d8c:	0018      	movs	r0, r3
   13d8e:	46bd      	mov	sp, r7
   13d90:	b02b      	add	sp, #172	; 0xac
   13d92:	bd90      	pop	{r4, r7, pc}
   13d94:	00014905 	.word	0x00014905
   13d98:	000149a1 	.word	0x000149a1
   13d9c:	000147ed 	.word	0x000147ed
   13da0:	00014a5d 	.word	0x00014a5d
   13da4:	00014a81 	.word	0x00014a81
   13da8:	00022cbc 	.word	0x00022cbc
   13dac:	0002202d 	.word	0x0002202d
   13db0:	0001b7e1 	.word	0x0001b7e1
   13db4:	00014f75 	.word	0x00014f75
   13db8:	00022ce0 	.word	0x00022ce0
   13dbc:	0001287d 	.word	0x0001287d
   13dc0:	00022cf8 	.word	0x00022cf8
   13dc4:	00022091 	.word	0x00022091
   13dc8:	20000000 	.word	0x20000000
   13dcc:	00012721 	.word	0x00012721

00013dd0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13dd0:	b590      	push	{r4, r7, lr}
   13dd2:	b08f      	sub	sp, #60	; 0x3c
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	60f8      	str	r0, [r7, #12]
   13dd8:	60b9      	str	r1, [r7, #8]
   13dda:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ddc:	2318      	movs	r3, #24
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	2200      	movs	r2, #0
   13de2:	701a      	strb	r2, [r3, #0]
   13de4:	2318      	movs	r3, #24
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	2200      	movs	r2, #0
   13dea:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13dec:	2318      	movs	r3, #24
   13dee:	18fb      	adds	r3, r7, r3
   13df0:	2200      	movs	r2, #0
   13df2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13df4:	2318      	movs	r3, #24
   13df6:	18fb      	adds	r3, r7, r3
   13df8:	2200      	movs	r2, #0
   13dfa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13dfc:	231c      	movs	r3, #28
   13dfe:	18fb      	adds	r3, r7, r3
   13e00:	2200      	movs	r2, #0
   13e02:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e04:	231c      	movs	r3, #28
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	2214      	movs	r2, #20
   13e0a:	18ba      	adds	r2, r7, r2
   13e0c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e0e:	231c      	movs	r3, #28
   13e10:	18fb      	adds	r3, r7, r3
   13e12:	2201      	movs	r2, #1
   13e14:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e16:	231c      	movs	r3, #28
   13e18:	18fb      	adds	r3, r7, r3
   13e1a:	2218      	movs	r2, #24
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e20:	231c      	movs	r3, #28
   13e22:	18fb      	adds	r3, r7, r3
   13e24:	2201      	movs	r2, #1
   13e26:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e28:	4b2c      	ldr	r3, [pc, #176]	; (13edc <CLI_i2cScan+0x10c>)
   13e2a:	0018      	movs	r0, r3
   13e2c:	4b2c      	ldr	r3, [pc, #176]	; (13ee0 <CLI_i2cScan+0x110>)
   13e2e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e30:	2300      	movs	r3, #0
   13e32:	637b      	str	r3, [r7, #52]	; 0x34
   13e34:	e046      	b.n	13ec4 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e38:	4a2a      	ldr	r2, [pc, #168]	; (13ee4 <CLI_i2cScan+0x114>)
   13e3a:	482b      	ldr	r0, [pc, #172]	; (13ee8 <CLI_i2cScan+0x118>)
   13e3c:	210f      	movs	r1, #15
   13e3e:	4c2b      	ldr	r4, [pc, #172]	; (13eec <CLI_i2cScan+0x11c>)
   13e40:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e42:	4b29      	ldr	r3, [pc, #164]	; (13ee8 <CLI_i2cScan+0x118>)
   13e44:	0018      	movs	r0, r3
   13e46:	4b26      	ldr	r3, [pc, #152]	; (13ee0 <CLI_i2cScan+0x110>)
   13e48:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13e4a:	2300      	movs	r3, #0
   13e4c:	633b      	str	r3, [r7, #48]	; 0x30
   13e4e:	e02f      	b.n	13eb0 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   13e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e52:	b2da      	uxtb	r2, r3
   13e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e56:	b2db      	uxtb	r3, r3
   13e58:	18d3      	adds	r3, r2, r3
   13e5a:	b2db      	uxtb	r3, r3
   13e5c:	18db      	adds	r3, r3, r3
   13e5e:	b2da      	uxtb	r2, r3
   13e60:	231c      	movs	r3, #28
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   13e66:	231c      	movs	r3, #28
   13e68:	18fb      	adds	r3, r7, r3
   13e6a:	2164      	movs	r1, #100	; 0x64
   13e6c:	0018      	movs	r0, r3
   13e6e:	4b20      	ldr	r3, [pc, #128]	; (13ef0 <CLI_i2cScan+0x120>)
   13e70:	4798      	blx	r3
   13e72:	0003      	movs	r3, r0
   13e74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d10c      	bne.n	13e96 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   13e7c:	231c      	movs	r3, #28
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	4a18      	ldr	r2, [pc, #96]	; (13ee4 <CLI_i2cScan+0x114>)
   13e84:	4818      	ldr	r0, [pc, #96]	; (13ee8 <CLI_i2cScan+0x118>)
   13e86:	210f      	movs	r1, #15
   13e88:	4c18      	ldr	r4, [pc, #96]	; (13eec <CLI_i2cScan+0x11c>)
   13e8a:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13e8c:	4b16      	ldr	r3, [pc, #88]	; (13ee8 <CLI_i2cScan+0x118>)
   13e8e:	0018      	movs	r0, r3
   13e90:	4b13      	ldr	r3, [pc, #76]	; (13ee0 <CLI_i2cScan+0x110>)
   13e92:	4798      	blx	r3
   13e94:	e009      	b.n	13eaa <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13e96:	4b14      	ldr	r3, [pc, #80]	; (13ee8 <CLI_i2cScan+0x118>)
   13e98:	4a16      	ldr	r2, [pc, #88]	; (13ef4 <CLI_i2cScan+0x124>)
   13e9a:	8811      	ldrh	r1, [r2, #0]
   13e9c:	8019      	strh	r1, [r3, #0]
   13e9e:	7892      	ldrb	r2, [r2, #2]
   13ea0:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   13ea2:	4b11      	ldr	r3, [pc, #68]	; (13ee8 <CLI_i2cScan+0x118>)
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b0e      	ldr	r3, [pc, #56]	; (13ee0 <CLI_i2cScan+0x110>)
   13ea8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eac:	3301      	adds	r3, #1
   13eae:	633b      	str	r3, [r7, #48]	; 0x30
   13eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eb2:	2b0f      	cmp	r3, #15
   13eb4:	ddcc      	ble.n	13e50 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13eb6:	4b10      	ldr	r3, [pc, #64]	; (13ef8 <CLI_i2cScan+0x128>)
   13eb8:	0018      	movs	r0, r3
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <CLI_i2cScan+0x110>)
   13ebc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec0:	3310      	adds	r3, #16
   13ec2:	637b      	str	r3, [r7, #52]	; 0x34
   13ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec6:	2b7f      	cmp	r3, #127	; 0x7f
   13ec8:	ddb5      	ble.n	13e36 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13eca:	4b0b      	ldr	r3, [pc, #44]	; (13ef8 <CLI_i2cScan+0x128>)
   13ecc:	0018      	movs	r0, r3
   13ece:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <CLI_i2cScan+0x110>)
   13ed0:	4798      	blx	r3
			return pdFALSE;
   13ed2:	2300      	movs	r3, #0

}
   13ed4:	0018      	movs	r0, r3
   13ed6:	46bd      	mov	sp, r7
   13ed8:	b00f      	add	sp, #60	; 0x3c
   13eda:	bd90      	pop	{r4, r7, pc}
   13edc:	00022cfc 	.word	0x00022cfc
   13ee0:	0001b7e1 	.word	0x0001b7e1
   13ee4:	00022d30 	.word	0x00022d30
   13ee8:	20000424 	.word	0x20000424
   13eec:	0002202d 	.word	0x0002202d
   13ef0:	000144f1 	.word	0x000144f1
   13ef4:	00022d38 	.word	0x00022d38
   13ef8:	00022c88 	.word	0x00022c88

00013efc <system_interrupt_enable>:
{
   13efc:	b580      	push	{r7, lr}
   13efe:	b082      	sub	sp, #8
   13f00:	af00      	add	r7, sp, #0
   13f02:	0002      	movs	r2, r0
   13f04:	1dfb      	adds	r3, r7, #7
   13f06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f08:	4b06      	ldr	r3, [pc, #24]	; (13f24 <system_interrupt_enable+0x28>)
   13f0a:	1dfa      	adds	r2, r7, #7
   13f0c:	7812      	ldrb	r2, [r2, #0]
   13f0e:	0011      	movs	r1, r2
   13f10:	221f      	movs	r2, #31
   13f12:	400a      	ands	r2, r1
   13f14:	2101      	movs	r1, #1
   13f16:	4091      	lsls	r1, r2
   13f18:	000a      	movs	r2, r1
   13f1a:	601a      	str	r2, [r3, #0]
}
   13f1c:	46c0      	nop			; (mov r8, r8)
   13f1e:	46bd      	mov	sp, r7
   13f20:	b002      	add	sp, #8
   13f22:	bd80      	pop	{r7, pc}
   13f24:	e000e100 	.word	0xe000e100

00013f28 <i2c_master_is_syncing>:
{
   13f28:	b580      	push	{r7, lr}
   13f2a:	b084      	sub	sp, #16
   13f2c:	af00      	add	r7, sp, #0
   13f2e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13f30:	687b      	ldr	r3, [r7, #4]
   13f32:	681b      	ldr	r3, [r3, #0]
   13f34:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13f36:	68fb      	ldr	r3, [r7, #12]
   13f38:	69db      	ldr	r3, [r3, #28]
   13f3a:	2207      	movs	r2, #7
   13f3c:	4013      	ands	r3, r2
   13f3e:	1e5a      	subs	r2, r3, #1
   13f40:	4193      	sbcs	r3, r2
   13f42:	b2db      	uxtb	r3, r3
}
   13f44:	0018      	movs	r0, r3
   13f46:	46bd      	mov	sp, r7
   13f48:	b004      	add	sp, #16
   13f4a:	bd80      	pop	{r7, pc}

00013f4c <_i2c_master_wait_for_sync>:
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b082      	sub	sp, #8
   13f50:	af00      	add	r7, sp, #0
   13f52:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13f54:	46c0      	nop			; (mov r8, r8)
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	0018      	movs	r0, r3
   13f5a:	4b04      	ldr	r3, [pc, #16]	; (13f6c <_i2c_master_wait_for_sync+0x20>)
   13f5c:	4798      	blx	r3
   13f5e:	1e03      	subs	r3, r0, #0
   13f60:	d1f9      	bne.n	13f56 <_i2c_master_wait_for_sync+0xa>
}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	46bd      	mov	sp, r7
   13f66:	b002      	add	sp, #8
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f29 	.word	0x00013f29

00013f70 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b082      	sub	sp, #8
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	2264      	movs	r2, #100	; 0x64
   13f7c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13f7e:	687b      	ldr	r3, [r7, #4]
   13f80:	4a1b      	ldr	r2, [pc, #108]	; (13ff0 <i2c_master_get_config_defaults+0x80>)
   13f82:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	2200      	movs	r2, #0
   13f88:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	2200      	movs	r2, #0
   13f8e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	2200      	movs	r2, #0
   13f94:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	2280      	movs	r2, #128	; 0x80
   13f9a:	0392      	lsls	r2, r2, #14
   13f9c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4252      	negs	r2, r2
   13fa4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	2201      	movs	r2, #1
   13faa:	4252      	negs	r2, r2
   13fac:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	2200      	movs	r2, #0
   13fb2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	2200      	movs	r2, #0
   13fb8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	2224      	movs	r2, #36	; 0x24
   13fbe:	2100      	movs	r1, #0
   13fc0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	2200      	movs	r2, #0
   13fc6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	222c      	movs	r2, #44	; 0x2c
   13fcc:	2100      	movs	r1, #0
   13fce:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	222d      	movs	r2, #45	; 0x2d
   13fd4:	2100      	movs	r1, #0
   13fd6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	222e      	movs	r2, #46	; 0x2e
   13fdc:	2100      	movs	r1, #0
   13fde:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13fe0:	687b      	ldr	r3, [r7, #4]
   13fe2:	22d7      	movs	r2, #215	; 0xd7
   13fe4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	46bd      	mov	sp, r7
   13fea:	b002      	add	sp, #8
   13fec:	bd80      	pop	{r7, pc}
   13fee:	46c0      	nop			; (mov r8, r8)
   13ff0:	00000d48 	.word	0x00000d48

00013ff4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b084      	sub	sp, #16
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	681b      	ldr	r3, [r3, #0]
   14000:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14002:	2300      	movs	r3, #0
   14004:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	0018      	movs	r0, r3
   1400a:	4b14      	ldr	r3, [pc, #80]	; (1405c <i2c_master_enable+0x68>)
   1400c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1400e:	68bb      	ldr	r3, [r7, #8]
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	2202      	movs	r2, #2
   14014:	431a      	orrs	r2, r3
   14016:	68bb      	ldr	r3, [r7, #8]
   14018:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	0018      	movs	r0, r3
   14020:	4b0f      	ldr	r3, [pc, #60]	; (14060 <i2c_master_enable+0x6c>)
   14022:	4798      	blx	r3
   14024:	0003      	movs	r3, r0
   14026:	0018      	movs	r0, r3
   14028:	4b0e      	ldr	r3, [pc, #56]	; (14064 <i2c_master_enable+0x70>)
   1402a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1402c:	e00c      	b.n	14048 <i2c_master_enable+0x54>
		timeout_counter++;
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	3301      	adds	r3, #1
   14032:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	88db      	ldrh	r3, [r3, #6]
   14038:	001a      	movs	r2, r3
   1403a:	68fb      	ldr	r3, [r7, #12]
   1403c:	429a      	cmp	r2, r3
   1403e:	d803      	bhi.n	14048 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	2210      	movs	r2, #16
   14044:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14046:	e006      	b.n	14056 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14048:	68bb      	ldr	r3, [r7, #8]
   1404a:	8b5b      	ldrh	r3, [r3, #26]
   1404c:	b29b      	uxth	r3, r3
   1404e:	001a      	movs	r2, r3
   14050:	2310      	movs	r3, #16
   14052:	4013      	ands	r3, r2
   14054:	d0eb      	beq.n	1402e <i2c_master_enable+0x3a>
		}
	}
}
   14056:	46bd      	mov	sp, r7
   14058:	b004      	add	sp, #16
   1405a:	bd80      	pop	{r7, pc}
   1405c:	00013f4d 	.word	0x00013f4d
   14060:	0001c7b5 	.word	0x0001c7b5
   14064:	00013efd 	.word	0x00013efd

00014068 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14068:	b580      	push	{r7, lr}
   1406a:	b082      	sub	sp, #8
   1406c:	af00      	add	r7, sp, #0
   1406e:	6078      	str	r0, [r7, #4]
   14070:	000a      	movs	r2, r1
   14072:	1cfb      	adds	r3, r7, #3
   14074:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	7e5b      	ldrb	r3, [r3, #25]
   1407a:	b2db      	uxtb	r3, r3
   1407c:	b25a      	sxtb	r2, r3
   1407e:	1cfb      	adds	r3, r7, #3
   14080:	781b      	ldrb	r3, [r3, #0]
   14082:	2101      	movs	r1, #1
   14084:	4099      	lsls	r1, r3
   14086:	000b      	movs	r3, r1
   14088:	b25b      	sxtb	r3, r3
   1408a:	4313      	orrs	r3, r2
   1408c:	b25b      	sxtb	r3, r3
   1408e:	b2da      	uxtb	r2, r3
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	765a      	strb	r2, [r3, #25]
}
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	46bd      	mov	sp, r7
   14098:	b002      	add	sp, #8
   1409a:	bd80      	pop	{r7, pc}

0001409c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1409c:	b590      	push	{r4, r7, lr}
   1409e:	b091      	sub	sp, #68	; 0x44
   140a0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   140a2:	2300      	movs	r3, #0
   140a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   140a6:	233a      	movs	r3, #58	; 0x3a
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	2200      	movs	r2, #0
   140ac:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   140ae:	1d3b      	adds	r3, r7, #4
   140b0:	0018      	movs	r0, r3
   140b2:	4b21      	ldr	r3, [pc, #132]	; (14138 <I2cDriverConfigureSensorBus+0x9c>)
   140b4:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   140b6:	1d3b      	adds	r3, r7, #4
   140b8:	4a20      	ldr	r2, [pc, #128]	; (1413c <I2cDriverConfigureSensorBus+0xa0>)
   140ba:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   140bc:	1d3b      	adds	r3, r7, #4
   140be:	4a20      	ldr	r2, [pc, #128]	; (14140 <I2cDriverConfigureSensorBus+0xa4>)
   140c0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   140c2:	1d3b      	adds	r3, r7, #4
   140c4:	22fa      	movs	r2, #250	; 0xfa
   140c6:	0092      	lsls	r2, r2, #2
   140c8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140ca:	233b      	movs	r3, #59	; 0x3b
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	2203      	movs	r2, #3
   140d0:	701a      	strb	r2, [r3, #0]
   140d2:	e01e      	b.n	14112 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   140d4:	233a      	movs	r3, #58	; 0x3a
   140d6:	18fc      	adds	r4, r7, r3
   140d8:	1d3a      	adds	r2, r7, #4
   140da:	491a      	ldr	r1, [pc, #104]	; (14144 <I2cDriverConfigureSensorBus+0xa8>)
   140dc:	4b1a      	ldr	r3, [pc, #104]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140de:	0018      	movs	r0, r3
   140e0:	4b1a      	ldr	r3, [pc, #104]	; (1414c <I2cDriverConfigureSensorBus+0xb0>)
   140e2:	4798      	blx	r3
   140e4:	0003      	movs	r3, r0
   140e6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   140e8:	233a      	movs	r3, #58	; 0x3a
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	781b      	ldrb	r3, [r3, #0]
   140ee:	2b00      	cmp	r3, #0
   140f0:	d104      	bne.n	140fc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   140f2:	233a      	movs	r3, #58	; 0x3a
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	781b      	ldrb	r3, [r3, #0]
   140f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   140fa:	e00f      	b.n	1411c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   140fc:	4b12      	ldr	r3, [pc, #72]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140fe:	0018      	movs	r0, r3
   14100:	4b13      	ldr	r3, [pc, #76]	; (14150 <I2cDriverConfigureSensorBus+0xb4>)
   14102:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14104:	233b      	movs	r3, #59	; 0x3b
   14106:	18fb      	adds	r3, r7, r3
   14108:	781a      	ldrb	r2, [r3, #0]
   1410a:	233b      	movs	r3, #59	; 0x3b
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	3a01      	subs	r2, #1
   14110:	701a      	strb	r2, [r3, #0]
   14112:	233b      	movs	r3, #59	; 0x3b
   14114:	18fb      	adds	r3, r7, r3
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1db      	bne.n	140d4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1411e:	2b00      	cmp	r3, #0
   14120:	d104      	bne.n	1412c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14122:	4b09      	ldr	r3, [pc, #36]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   14124:	0018      	movs	r0, r3
   14126:	4b0b      	ldr	r3, [pc, #44]	; (14154 <I2cDriverConfigureSensorBus+0xb8>)
   14128:	4798      	blx	r3
   1412a:	e000      	b.n	1412e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1412c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14130:	0018      	movs	r0, r3
   14132:	46bd      	mov	sp, r7
   14134:	b011      	add	sp, #68	; 0x44
   14136:	bd90      	pop	{r4, r7, pc}
   14138:	00013f71 	.word	0x00013f71
   1413c:	00080002 	.word	0x00080002
   14140:	00090002 	.word	0x00090002
   14144:	42000800 	.word	0x42000800
   14148:	20003b88 	.word	0x20003b88
   1414c:	00015565 	.word	0x00015565
   14150:	00015699 	.word	0x00015699
   14154:	00013ff5 	.word	0x00013ff5

00014158 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14158:	b580      	push	{r7, lr}
   1415a:	b084      	sub	sp, #16
   1415c:	af00      	add	r7, sp, #0
   1415e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14160:	4b0e      	ldr	r3, [pc, #56]	; (1419c <I2cSensorsTxComplete+0x44>)
   14162:	2200      	movs	r2, #0
   14164:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14166:	4b0d      	ldr	r3, [pc, #52]	; (1419c <I2cSensorsTxComplete+0x44>)
   14168:	2201      	movs	r2, #1
   1416a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1416c:	2300      	movs	r3, #0
   1416e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14170:	4b0b      	ldr	r3, [pc, #44]	; (141a0 <I2cSensorsTxComplete+0x48>)
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	220c      	movs	r2, #12
   14176:	18ba      	adds	r2, r7, r2
   14178:	0011      	movs	r1, r2
   1417a:	0018      	movs	r0, r3
   1417c:	4b09      	ldr	r3, [pc, #36]	; (141a4 <I2cSensorsTxComplete+0x4c>)
   1417e:	4798      	blx	r3
    sensorTransmitError = false;
   14180:	4b09      	ldr	r3, [pc, #36]	; (141a8 <I2cSensorsTxComplete+0x50>)
   14182:	2200      	movs	r2, #0
   14184:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	2b00      	cmp	r3, #0
   1418a:	d003      	beq.n	14194 <I2cSensorsTxComplete+0x3c>
   1418c:	4b07      	ldr	r3, [pc, #28]	; (141ac <I2cSensorsTxComplete+0x54>)
   1418e:	2280      	movs	r2, #128	; 0x80
   14190:	0552      	lsls	r2, r2, #21
   14192:	601a      	str	r2, [r3, #0]
}
   14194:	46c0      	nop			; (mov r8, r8)
   14196:	46bd      	mov	sp, r7
   14198:	b004      	add	sp, #16
   1419a:	bd80      	pop	{r7, pc}
   1419c:	20000510 	.word	0x20000510
   141a0:	20003bb0 	.word	0x20003bb0
   141a4:	000187f5 	.word	0x000187f5
   141a8:	2000050c 	.word	0x2000050c
   141ac:	e000ed04 	.word	0xe000ed04

000141b0 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   141b0:	b580      	push	{r7, lr}
   141b2:	b084      	sub	sp, #16
   141b4:	af00      	add	r7, sp, #0
   141b6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   141b8:	4b0e      	ldr	r3, [pc, #56]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141ba:	2200      	movs	r2, #0
   141bc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   141be:	4b0d      	ldr	r3, [pc, #52]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141c0:	2201      	movs	r2, #1
   141c2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141c4:	2300      	movs	r3, #0
   141c6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <I2cSensorsRxComplete+0x48>)
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	220c      	movs	r2, #12
   141ce:	18ba      	adds	r2, r7, r2
   141d0:	0011      	movs	r1, r2
   141d2:	0018      	movs	r0, r3
   141d4:	4b09      	ldr	r3, [pc, #36]	; (141fc <I2cSensorsRxComplete+0x4c>)
   141d6:	4798      	blx	r3
    sensorTransmitError = false;
   141d8:	4b09      	ldr	r3, [pc, #36]	; (14200 <I2cSensorsRxComplete+0x50>)
   141da:	2200      	movs	r2, #0
   141dc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141de:	68fb      	ldr	r3, [r7, #12]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d003      	beq.n	141ec <I2cSensorsRxComplete+0x3c>
   141e4:	4b07      	ldr	r3, [pc, #28]	; (14204 <I2cSensorsRxComplete+0x54>)
   141e6:	2280      	movs	r2, #128	; 0x80
   141e8:	0552      	lsls	r2, r2, #21
   141ea:	601a      	str	r2, [r3, #0]
}
   141ec:	46c0      	nop			; (mov r8, r8)
   141ee:	46bd      	mov	sp, r7
   141f0:	b004      	add	sp, #16
   141f2:	bd80      	pop	{r7, pc}
   141f4:	20000510 	.word	0x20000510
   141f8:	20003bb0 	.word	0x20003bb0
   141fc:	000187f5 	.word	0x000187f5
   14200:	2000050c 	.word	0x2000050c
   14204:	e000ed04 	.word	0xe000ed04

00014208 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14210:	4b0e      	ldr	r3, [pc, #56]	; (1424c <I2cSensorsError+0x44>)
   14212:	2200      	movs	r2, #0
   14214:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14216:	4b0d      	ldr	r3, [pc, #52]	; (1424c <I2cSensorsError+0x44>)
   14218:	2201      	movs	r2, #1
   1421a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1421c:	2300      	movs	r3, #0
   1421e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14220:	4b0b      	ldr	r3, [pc, #44]	; (14250 <I2cSensorsError+0x48>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	220c      	movs	r2, #12
   14226:	18ba      	adds	r2, r7, r2
   14228:	0011      	movs	r1, r2
   1422a:	0018      	movs	r0, r3
   1422c:	4b09      	ldr	r3, [pc, #36]	; (14254 <I2cSensorsError+0x4c>)
   1422e:	4798      	blx	r3
    sensorTransmitError = true;
   14230:	4b09      	ldr	r3, [pc, #36]	; (14258 <I2cSensorsError+0x50>)
   14232:	2201      	movs	r2, #1
   14234:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14236:	68fb      	ldr	r3, [r7, #12]
   14238:	2b00      	cmp	r3, #0
   1423a:	d003      	beq.n	14244 <I2cSensorsError+0x3c>
   1423c:	4b07      	ldr	r3, [pc, #28]	; (1425c <I2cSensorsError+0x54>)
   1423e:	2280      	movs	r2, #128	; 0x80
   14240:	0552      	lsls	r2, r2, #21
   14242:	601a      	str	r2, [r3, #0]
}
   14244:	46c0      	nop			; (mov r8, r8)
   14246:	46bd      	mov	sp, r7
   14248:	b004      	add	sp, #16
   1424a:	bd80      	pop	{r7, pc}
   1424c:	20000510 	.word	0x20000510
   14250:	20003bb0 	.word	0x20003bb0
   14254:	000187f5 	.word	0x000187f5
   14258:	2000050c 	.word	0x2000050c
   1425c:	e000ed04 	.word	0xe000ed04

00014260 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14260:	b580      	push	{r7, lr}
   14262:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14264:	4911      	ldr	r1, [pc, #68]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14266:	4b12      	ldr	r3, [pc, #72]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14268:	2200      	movs	r2, #0
   1426a:	0018      	movs	r0, r3
   1426c:	4b11      	ldr	r3, [pc, #68]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1426e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14270:	4b0f      	ldr	r3, [pc, #60]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14272:	2100      	movs	r1, #0
   14274:	0018      	movs	r0, r3
   14276:	4b10      	ldr	r3, [pc, #64]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14278:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1427a:	4910      	ldr	r1, [pc, #64]	; (142bc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1427c:	4b0c      	ldr	r3, [pc, #48]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1427e:	2201      	movs	r2, #1
   14280:	0018      	movs	r0, r3
   14282:	4b0c      	ldr	r3, [pc, #48]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14284:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14286:	4b0a      	ldr	r3, [pc, #40]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14288:	2101      	movs	r1, #1
   1428a:	0018      	movs	r0, r3
   1428c:	4b0a      	ldr	r3, [pc, #40]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1428e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14290:	490b      	ldr	r1, [pc, #44]	; (142c0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14292:	4b07      	ldr	r3, [pc, #28]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14294:	2202      	movs	r2, #2
   14296:	0018      	movs	r0, r3
   14298:	4b06      	ldr	r3, [pc, #24]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1429a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1429c:	4b04      	ldr	r3, [pc, #16]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1429e:	2102      	movs	r1, #2
   142a0:	0018      	movs	r0, r3
   142a2:	4b05      	ldr	r3, [pc, #20]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   142a4:	4798      	blx	r3
}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	46bd      	mov	sp, r7
   142aa:	bd80      	pop	{r7, pc}
   142ac:	00014159 	.word	0x00014159
   142b0:	20003b88 	.word	0x20003b88
   142b4:	000132b1 	.word	0x000132b1
   142b8:	00014069 	.word	0x00014069
   142bc:	000141b1 	.word	0x000141b1
   142c0:	00014209 	.word	0x00014209

000142c4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   142ca:	2300      	movs	r3, #0
   142cc:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   142ce:	4b14      	ldr	r3, [pc, #80]	; (14320 <I2cInitializeDriver+0x5c>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   142d6:	687b      	ldr	r3, [r7, #4]
   142d8:	2b00      	cmp	r3, #0
   142da:	d11a      	bne.n	14312 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   142dc:	4b11      	ldr	r3, [pc, #68]	; (14324 <I2cInitializeDriver+0x60>)
   142de:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   142e0:	2001      	movs	r0, #1
   142e2:	4b11      	ldr	r3, [pc, #68]	; (14328 <I2cInitializeDriver+0x64>)
   142e4:	4798      	blx	r3
   142e6:	0002      	movs	r2, r0
   142e8:	4b10      	ldr	r3, [pc, #64]	; (1432c <I2cInitializeDriver+0x68>)
   142ea:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   142ec:	2203      	movs	r2, #3
   142ee:	2100      	movs	r1, #0
   142f0:	2001      	movs	r0, #1
   142f2:	4b0f      	ldr	r3, [pc, #60]	; (14330 <I2cInitializeDriver+0x6c>)
   142f4:	4798      	blx	r3
   142f6:	0002      	movs	r2, r0
   142f8:	4b0e      	ldr	r3, [pc, #56]	; (14334 <I2cInitializeDriver+0x70>)
   142fa:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   142fc:	4b0b      	ldr	r3, [pc, #44]	; (1432c <I2cInitializeDriver+0x68>)
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d003      	beq.n	1430c <I2cInitializeDriver+0x48>
   14304:	4b0b      	ldr	r3, [pc, #44]	; (14334 <I2cInitializeDriver+0x70>)
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	2b00      	cmp	r3, #0
   1430a:	d103      	bne.n	14314 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1430c:	2306      	movs	r3, #6
   1430e:	607b      	str	r3, [r7, #4]
        goto exit;
   14310:	e000      	b.n	14314 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14312:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14314:	687b      	ldr	r3, [r7, #4]
}
   14316:	0018      	movs	r0, r3
   14318:	46bd      	mov	sp, r7
   1431a:	b002      	add	sp, #8
   1431c:	bd80      	pop	{r7, pc}
   1431e:	46c0      	nop			; (mov r8, r8)
   14320:	0001409d 	.word	0x0001409d
   14324:	00014261 	.word	0x00014261
   14328:	0001812d 	.word	0x0001812d
   1432c:	20003b84 	.word	0x20003b84
   14330:	00017ec5 	.word	0x00017ec5
   14334:	20003bb0 	.word	0x20003bb0

00014338 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14338:	b590      	push	{r4, r7, lr}
   1433a:	b085      	sub	sp, #20
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14340:	2300      	movs	r3, #0
   14342:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	2b00      	cmp	r3, #0
   14348:	d003      	beq.n	14352 <I2cWriteData+0x1a>
   1434a:	687b      	ldr	r3, [r7, #4]
   1434c:	685b      	ldr	r3, [r3, #4]
   1434e:	2b00      	cmp	r3, #0
   14350:	d103      	bne.n	1435a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14352:	2308      	movs	r3, #8
   14354:	425b      	negs	r3, r3
   14356:	60fb      	str	r3, [r7, #12]
        goto exit;
   14358:	e01f      	b.n	1439a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1435a:	687b      	ldr	r3, [r7, #4]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	b29a      	uxth	r2, r3
   14360:	4b10      	ldr	r3, [pc, #64]	; (143a4 <I2cWriteData+0x6c>)
   14362:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	685a      	ldr	r2, [r3, #4]
   14368:	4b0e      	ldr	r3, [pc, #56]	; (143a4 <I2cWriteData+0x6c>)
   1436a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1436c:	687b      	ldr	r3, [r7, #4]
   1436e:	89da      	ldrh	r2, [r3, #14]
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <I2cWriteData+0x6c>)
   14372:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14374:	230b      	movs	r3, #11
   14376:	18fc      	adds	r4, r7, r3
   14378:	4a0a      	ldr	r2, [pc, #40]	; (143a4 <I2cWriteData+0x6c>)
   1437a:	4b0b      	ldr	r3, [pc, #44]	; (143a8 <I2cWriteData+0x70>)
   1437c:	0011      	movs	r1, r2
   1437e:	0018      	movs	r0, r3
   14380:	4b0a      	ldr	r3, [pc, #40]	; (143ac <I2cWriteData+0x74>)
   14382:	4798      	blx	r3
   14384:	0003      	movs	r3, r0
   14386:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14388:	230b      	movs	r3, #11
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	2b00      	cmp	r3, #0
   14390:	d003      	beq.n	1439a <I2cWriteData+0x62>
        error = ERROR_IO;
   14392:	2306      	movs	r3, #6
   14394:	425b      	negs	r3, r3
   14396:	60fb      	str	r3, [r7, #12]
        goto exit;
   14398:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1439a:	68fb      	ldr	r3, [r7, #12]
}
   1439c:	0018      	movs	r0, r3
   1439e:	46bd      	mov	sp, r7
   143a0:	b005      	add	sp, #20
   143a2:	bd90      	pop	{r4, r7, pc}
   143a4:	20003bb4 	.word	0x20003bb4
   143a8:	20003b88 	.word	0x20003b88
   143ac:	00013535 	.word	0x00013535

000143b0 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   143b0:	b590      	push	{r4, r7, lr}
   143b2:	b085      	sub	sp, #20
   143b4:	af00      	add	r7, sp, #0
   143b6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   143b8:	2300      	movs	r3, #0
   143ba:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d003      	beq.n	143ca <I2cReadData+0x1a>
   143c2:	687b      	ldr	r3, [r7, #4]
   143c4:	685b      	ldr	r3, [r3, #4]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d103      	bne.n	143d2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   143ca:	2308      	movs	r3, #8
   143cc:	425b      	negs	r3, r3
   143ce:	60fb      	str	r3, [r7, #12]
        goto exit;
   143d0:	e01f      	b.n	14412 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	781b      	ldrb	r3, [r3, #0]
   143d6:	b29a      	uxth	r2, r3
   143d8:	4b10      	ldr	r3, [pc, #64]	; (1441c <I2cReadData+0x6c>)
   143da:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	689a      	ldr	r2, [r3, #8]
   143e0:	4b0e      	ldr	r3, [pc, #56]	; (1441c <I2cReadData+0x6c>)
   143e2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   143e4:	687b      	ldr	r3, [r7, #4]
   143e6:	899a      	ldrh	r2, [r3, #12]
   143e8:	4b0c      	ldr	r3, [pc, #48]	; (1441c <I2cReadData+0x6c>)
   143ea:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   143ec:	230b      	movs	r3, #11
   143ee:	18fc      	adds	r4, r7, r3
   143f0:	4a0a      	ldr	r2, [pc, #40]	; (1441c <I2cReadData+0x6c>)
   143f2:	4b0b      	ldr	r3, [pc, #44]	; (14420 <I2cReadData+0x70>)
   143f4:	0011      	movs	r1, r2
   143f6:	0018      	movs	r0, r3
   143f8:	4b0a      	ldr	r3, [pc, #40]	; (14424 <I2cReadData+0x74>)
   143fa:	4798      	blx	r3
   143fc:	0003      	movs	r3, r0
   143fe:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14400:	230b      	movs	r3, #11
   14402:	18fb      	adds	r3, r7, r3
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	2b00      	cmp	r3, #0
   14408:	d003      	beq.n	14412 <I2cReadData+0x62>
        error = ERROR_IO;
   1440a:	2306      	movs	r3, #6
   1440c:	425b      	negs	r3, r3
   1440e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14410:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14412:	68fb      	ldr	r3, [r7, #12]
}
   14414:	0018      	movs	r0, r3
   14416:	46bd      	mov	sp, r7
   14418:	b005      	add	sp, #20
   1441a:	bd90      	pop	{r4, r7, pc}
   1441c:	20003bb4 	.word	0x20003bb4
   14420:	20003b88 	.word	0x20003b88
   14424:	00013451 	.word	0x00013451

00014428 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14428:	b590      	push	{r4, r7, lr}
   1442a:	b083      	sub	sp, #12
   1442c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1442e:	2300      	movs	r3, #0
   14430:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14432:	4b09      	ldr	r3, [pc, #36]	; (14458 <I2cFreeMutex+0x30>)
   14434:	6818      	ldr	r0, [r3, #0]
   14436:	2300      	movs	r3, #0
   14438:	2200      	movs	r2, #0
   1443a:	2100      	movs	r1, #0
   1443c:	4c07      	ldr	r4, [pc, #28]	; (1445c <I2cFreeMutex+0x34>)
   1443e:	47a0      	blx	r4
   14440:	0003      	movs	r3, r0
   14442:	2b01      	cmp	r3, #1
   14444:	d002      	beq.n	1444c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14446:	2314      	movs	r3, #20
   14448:	425b      	negs	r3, r3
   1444a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1444c:	687b      	ldr	r3, [r7, #4]
}
   1444e:	0018      	movs	r0, r3
   14450:	46bd      	mov	sp, r7
   14452:	b003      	add	sp, #12
   14454:	bd90      	pop	{r4, r7, pc}
   14456:	46c0      	nop			; (mov r8, r8)
   14458:	20003b84 	.word	0x20003b84
   1445c:	0001816d 	.word	0x0001816d

00014460 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14468:	2300      	movs	r3, #0
   1446a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1446c:	4b08      	ldr	r3, [pc, #32]	; (14490 <I2cGetMutex+0x30>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	687a      	ldr	r2, [r7, #4]
   14472:	0011      	movs	r1, r2
   14474:	0018      	movs	r0, r3
   14476:	4b07      	ldr	r3, [pc, #28]	; (14494 <I2cGetMutex+0x34>)
   14478:	4798      	blx	r3
   1447a:	0003      	movs	r3, r0
   1447c:	2b01      	cmp	r3, #1
   1447e:	d002      	beq.n	14486 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14480:	231d      	movs	r3, #29
   14482:	425b      	negs	r3, r3
   14484:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14486:	68fb      	ldr	r3, [r7, #12]
}
   14488:	0018      	movs	r0, r3
   1448a:	46bd      	mov	sp, r7
   1448c:	b004      	add	sp, #16
   1448e:	bd80      	pop	{r7, pc}
   14490:	20003b84 	.word	0x20003b84
   14494:	00018e7d 	.word	0x00018e7d

00014498 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b084      	sub	sp, #16
   1449c:	af00      	add	r7, sp, #0
   1449e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144a0:	2300      	movs	r3, #0
   144a2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   144a4:	4b04      	ldr	r3, [pc, #16]	; (144b8 <I2cGetSemaphoreHandle+0x20>)
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	687b      	ldr	r3, [r7, #4]
   144aa:	601a      	str	r2, [r3, #0]
    return error;
   144ac:	68fb      	ldr	r3, [r7, #12]
}
   144ae:	0018      	movs	r0, r3
   144b0:	46bd      	mov	sp, r7
   144b2:	b004      	add	sp, #16
   144b4:	bd80      	pop	{r7, pc}
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	20003bb0 	.word	0x20003bb0

000144bc <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   144bc:	b580      	push	{r7, lr}
   144be:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   144c0:	4b02      	ldr	r3, [pc, #8]	; (144cc <I2cGetTaskErrorStatus+0x10>)
   144c2:	781b      	ldrb	r3, [r3, #0]
}
   144c4:	0018      	movs	r0, r3
   144c6:	46bd      	mov	sp, r7
   144c8:	bd80      	pop	{r7, pc}
   144ca:	46c0      	nop			; (mov r8, r8)
   144cc:	2000050c 	.word	0x2000050c

000144d0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   144d0:	b580      	push	{r7, lr}
   144d2:	b082      	sub	sp, #8
   144d4:	af00      	add	r7, sp, #0
   144d6:	0002      	movs	r2, r0
   144d8:	1dfb      	adds	r3, r7, #7
   144da:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   144dc:	4b03      	ldr	r3, [pc, #12]	; (144ec <I2cSetTaskErrorStatus+0x1c>)
   144de:	1dfa      	adds	r2, r7, #7
   144e0:	7812      	ldrb	r2, [r2, #0]
   144e2:	701a      	strb	r2, [r3, #0]
}
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	46bd      	mov	sp, r7
   144e8:	b002      	add	sp, #8
   144ea:	bd80      	pop	{r7, pc}
   144ec:	2000050c 	.word	0x2000050c

000144f0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
   144f8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   144fa:	2300      	movs	r3, #0
   144fc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   144fe:	2300      	movs	r3, #0
   14500:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14502:	2396      	movs	r3, #150	; 0x96
   14504:	005b      	lsls	r3, r3, #1
   14506:	0018      	movs	r0, r3
   14508:	4b28      	ldr	r3, [pc, #160]	; (145ac <I2cWriteDataWait+0xbc>)
   1450a:	4798      	blx	r3
   1450c:	0003      	movs	r3, r0
   1450e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	2b00      	cmp	r3, #0
   14514:	d138      	bne.n	14588 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	0018      	movs	r0, r3
   1451c:	4b24      	ldr	r3, [pc, #144]	; (145b0 <I2cWriteDataWait+0xc0>)
   1451e:	4798      	blx	r3
   14520:	0003      	movs	r3, r0
   14522:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14524:	68fb      	ldr	r3, [r7, #12]
   14526:	2b00      	cmp	r3, #0
   14528:	d130      	bne.n	1458c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	0018      	movs	r0, r3
   1452e:	4b21      	ldr	r3, [pc, #132]	; (145b4 <I2cWriteDataWait+0xc4>)
   14530:	4798      	blx	r3
   14532:	0003      	movs	r3, r0
   14534:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	2b00      	cmp	r3, #0
   1453a:	d12a      	bne.n	14592 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	683a      	ldr	r2, [r7, #0]
   14540:	0011      	movs	r1, r2
   14542:	0018      	movs	r0, r3
   14544:	4b1c      	ldr	r3, [pc, #112]	; (145b8 <I2cWriteDataWait+0xc8>)
   14546:	4798      	blx	r3
   14548:	0003      	movs	r3, r0
   1454a:	2b01      	cmp	r3, #1
   1454c:	d111      	bne.n	14572 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1454e:	4b1b      	ldr	r3, [pc, #108]	; (145bc <I2cWriteDataWait+0xcc>)
   14550:	4798      	blx	r3
   14552:	1e03      	subs	r3, r0, #0
   14554:	d011      	beq.n	1457a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14556:	2000      	movs	r0, #0
   14558:	4b19      	ldr	r3, [pc, #100]	; (145c0 <I2cWriteDataWait+0xd0>)
   1455a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1455c:	68fb      	ldr	r3, [r7, #12]
   1455e:	2b00      	cmp	r3, #0
   14560:	d003      	beq.n	1456a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14562:	2321      	movs	r3, #33	; 0x21
   14564:	425b      	negs	r3, r3
   14566:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14568:	e014      	b.n	14594 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1456a:	2303      	movs	r3, #3
   1456c:	425b      	negs	r3, r3
   1456e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14570:	e010      	b.n	14594 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14572:	2303      	movs	r3, #3
   14574:	425b      	negs	r3, r3
   14576:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14578:	e00c      	b.n	14594 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1457a:	4b12      	ldr	r3, [pc, #72]	; (145c4 <I2cWriteDataWait+0xd4>)
   1457c:	4798      	blx	r3
   1457e:	0002      	movs	r2, r0
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	4313      	orrs	r3, r2
   14584:	60fb      	str	r3, [r7, #12]
   14586:	e002      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14588:	46c0      	nop			; (mov r8, r8)
   1458a:	e000      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1458c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	e007      	b.n	145a2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14592:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14594:	4b0b      	ldr	r3, [pc, #44]	; (145c4 <I2cWriteDataWait+0xd4>)
   14596:	4798      	blx	r3
   14598:	0002      	movs	r2, r0
   1459a:	68fb      	ldr	r3, [r7, #12]
   1459c:	4313      	orrs	r3, r2
   1459e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   145a0:	68fb      	ldr	r3, [r7, #12]
}
   145a2:	0018      	movs	r0, r3
   145a4:	46bd      	mov	sp, r7
   145a6:	b004      	add	sp, #16
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00014461 	.word	0x00014461
   145b0:	00014499 	.word	0x00014499
   145b4:	00014339 	.word	0x00014339
   145b8:	00018e7d 	.word	0x00018e7d
   145bc:	000144bd 	.word	0x000144bd
   145c0:	000144d1 	.word	0x000144d1
   145c4:	00014429 	.word	0x00014429

000145c8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b086      	sub	sp, #24
   145cc:	af00      	add	r7, sp, #0
   145ce:	60f8      	str	r0, [r7, #12]
   145d0:	60b9      	str	r1, [r7, #8]
   145d2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   145d4:	2300      	movs	r3, #0
   145d6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   145d8:	2300      	movs	r3, #0
   145da:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   145dc:	2396      	movs	r3, #150	; 0x96
   145de:	005b      	lsls	r3, r3, #1
   145e0:	0018      	movs	r0, r3
   145e2:	4b35      	ldr	r3, [pc, #212]	; (146b8 <I2cReadDataWait+0xf0>)
   145e4:	4798      	blx	r3
   145e6:	0003      	movs	r3, r0
   145e8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145ea:	697b      	ldr	r3, [r7, #20]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d155      	bne.n	1469c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   145f0:	2310      	movs	r3, #16
   145f2:	18fb      	adds	r3, r7, r3
   145f4:	0018      	movs	r0, r3
   145f6:	4b31      	ldr	r3, [pc, #196]	; (146bc <I2cReadDataWait+0xf4>)
   145f8:	4798      	blx	r3
   145fa:	0003      	movs	r3, r0
   145fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145fe:	697b      	ldr	r3, [r7, #20]
   14600:	2b00      	cmp	r3, #0
   14602:	d14d      	bne.n	146a0 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	0018      	movs	r0, r3
   14608:	4b2d      	ldr	r3, [pc, #180]	; (146c0 <I2cReadDataWait+0xf8>)
   1460a:	4798      	blx	r3
   1460c:	0003      	movs	r3, r0
   1460e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14610:	697b      	ldr	r3, [r7, #20]
   14612:	2b00      	cmp	r3, #0
   14614:	d147      	bne.n	146a6 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14616:	693b      	ldr	r3, [r7, #16]
   14618:	687a      	ldr	r2, [r7, #4]
   1461a:	0011      	movs	r1, r2
   1461c:	0018      	movs	r0, r3
   1461e:	4b29      	ldr	r3, [pc, #164]	; (146c4 <I2cReadDataWait+0xfc>)
   14620:	4798      	blx	r3
   14622:	0003      	movs	r3, r0
   14624:	2b01      	cmp	r3, #1
   14626:	d118      	bne.n	1465a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14628:	4b27      	ldr	r3, [pc, #156]	; (146c8 <I2cReadDataWait+0x100>)
   1462a:	4798      	blx	r3
   1462c:	1e03      	subs	r3, r0, #0
   1462e:	d006      	beq.n	1463e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14630:	2000      	movs	r0, #0
   14632:	4b26      	ldr	r3, [pc, #152]	; (146cc <I2cReadDataWait+0x104>)
   14634:	4798      	blx	r3
            error = ERROR_ABORTED;
   14636:	2303      	movs	r3, #3
   14638:	425b      	negs	r3, r3
   1463a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1463c:	e034      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1463e:	68bb      	ldr	r3, [r7, #8]
   14640:	0018      	movs	r0, r3
   14642:	4b23      	ldr	r3, [pc, #140]	; (146d0 <I2cReadDataWait+0x108>)
   14644:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14646:	68fb      	ldr	r3, [r7, #12]
   14648:	0018      	movs	r0, r3
   1464a:	4b22      	ldr	r3, [pc, #136]	; (146d4 <I2cReadDataWait+0x10c>)
   1464c:	4798      	blx	r3
   1464e:	0003      	movs	r3, r0
   14650:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14652:	697b      	ldr	r3, [r7, #20]
   14654:	2b00      	cmp	r3, #0
   14656:	d004      	beq.n	14662 <I2cReadDataWait+0x9a>
        goto exitError0;
   14658:	e026      	b.n	146a8 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1465a:	2303      	movs	r3, #3
   1465c:	425b      	negs	r3, r3
   1465e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14660:	e022      	b.n	146a8 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14662:	693b      	ldr	r3, [r7, #16]
   14664:	687a      	ldr	r2, [r7, #4]
   14666:	0011      	movs	r1, r2
   14668:	0018      	movs	r0, r3
   1466a:	4b16      	ldr	r3, [pc, #88]	; (146c4 <I2cReadDataWait+0xfc>)
   1466c:	4798      	blx	r3
   1466e:	0003      	movs	r3, r0
   14670:	2b01      	cmp	r3, #1
   14672:	d10a      	bne.n	1468a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14674:	4b14      	ldr	r3, [pc, #80]	; (146c8 <I2cReadDataWait+0x100>)
   14676:	4798      	blx	r3
   14678:	1e03      	subs	r3, r0, #0
   1467a:	d00a      	beq.n	14692 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1467c:	2000      	movs	r0, #0
   1467e:	4b13      	ldr	r3, [pc, #76]	; (146cc <I2cReadDataWait+0x104>)
   14680:	4798      	blx	r3
            error = ERROR_ABORTED;
   14682:	2303      	movs	r3, #3
   14684:	425b      	negs	r3, r3
   14686:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14688:	e00e      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1468a:	2303      	movs	r3, #3
   1468c:	425b      	negs	r3, r3
   1468e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14690:	e00a      	b.n	146a8 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14692:	4b11      	ldr	r3, [pc, #68]	; (146d8 <I2cReadDataWait+0x110>)
   14694:	4798      	blx	r3
   14696:	0003      	movs	r3, r0
   14698:	617b      	str	r3, [r7, #20]
   1469a:	e002      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1469c:	46c0      	nop			; (mov r8, r8)
   1469e:	e000      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   146a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   146a2:	697b      	ldr	r3, [r7, #20]
   146a4:	e003      	b.n	146ae <I2cReadDataWait+0xe6>
        goto exitError0;
   146a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <I2cReadDataWait+0x110>)
   146aa:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   146ac:	697b      	ldr	r3, [r7, #20]
}
   146ae:	0018      	movs	r0, r3
   146b0:	46bd      	mov	sp, r7
   146b2:	b006      	add	sp, #24
   146b4:	bd80      	pop	{r7, pc}
   146b6:	46c0      	nop			; (mov r8, r8)
   146b8:	00014461 	.word	0x00014461
   146bc:	00014499 	.word	0x00014499
   146c0:	00014339 	.word	0x00014339
   146c4:	00018e7d 	.word	0x00018e7d
   146c8:	000144bd 	.word	0x000144bd
   146cc:	000144d1 	.word	0x000144d1
   146d0:	00019bd1 	.word	0x00019bd1
   146d4:	000143b1 	.word	0x000143b1
   146d8:	00014429 	.word	0x00014429

000146dc <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   146dc:	b580      	push	{r7, lr}
   146de:	b096      	sub	sp, #88	; 0x58
   146e0:	af00      	add	r7, sp, #0
   146e2:	60f8      	str	r0, [r7, #12]
   146e4:	0008      	movs	r0, r1
   146e6:	607a      	str	r2, [r7, #4]
   146e8:	0019      	movs	r1, r3
   146ea:	230b      	movs	r3, #11
   146ec:	18fb      	adds	r3, r7, r3
   146ee:	1c02      	adds	r2, r0, #0
   146f0:	701a      	strb	r2, [r3, #0]
   146f2:	2308      	movs	r3, #8
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	1c0a      	adds	r2, r1, #0
   146f8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   146fa:	2300      	movs	r3, #0
   146fc:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   146fe:	4b19      	ldr	r3, [pc, #100]	; (14764 <reg_write+0x88>)
   14700:	220b      	movs	r2, #11
   14702:	18ba      	adds	r2, r7, r2
   14704:	7812      	ldrb	r2, [r2, #0]
   14706:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   14708:	2300      	movs	r3, #0
   1470a:	657b      	str	r3, [r7, #84]	; 0x54
   1470c:	e00a      	b.n	14724 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   1470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14710:	3301      	adds	r3, #1
   14712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14714:	6879      	ldr	r1, [r7, #4]
   14716:	188a      	adds	r2, r1, r2
   14718:	7811      	ldrb	r1, [r2, #0]
   1471a:	4a12      	ldr	r2, [pc, #72]	; (14764 <reg_write+0x88>)
   1471c:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   1471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14720:	3301      	adds	r3, #1
   14722:	657b      	str	r3, [r7, #84]	; 0x54
   14724:	2308      	movs	r3, #8
   14726:	18fb      	adds	r3, r7, r3
   14728:	881a      	ldrh	r2, [r3, #0]
   1472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1472c:	429a      	cmp	r2, r3
   1472e:	dcee      	bgt.n	1470e <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14730:	4b0d      	ldr	r3, [pc, #52]	; (14768 <reg_write+0x8c>)
   14732:	222a      	movs	r2, #42	; 0x2a
   14734:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   14736:	4b0c      	ldr	r3, [pc, #48]	; (14768 <reg_write+0x8c>)
   14738:	4a0a      	ldr	r2, [pc, #40]	; (14764 <reg_write+0x88>)
   1473a:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   1473c:	2308      	movs	r3, #8
   1473e:	18fb      	adds	r3, r7, r3
   14740:	881b      	ldrh	r3, [r3, #0]
   14742:	3301      	adds	r3, #1
   14744:	b29a      	uxth	r2, r3
   14746:	4b08      	ldr	r3, [pc, #32]	; (14768 <reg_write+0x8c>)
   14748:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   1474a:	4b07      	ldr	r3, [pc, #28]	; (14768 <reg_write+0x8c>)
   1474c:	2164      	movs	r1, #100	; 0x64
   1474e:	0018      	movs	r0, r3
   14750:	4b06      	ldr	r3, [pc, #24]	; (1476c <reg_write+0x90>)
   14752:	4798      	blx	r3
   14754:	0003      	movs	r3, r0
   14756:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   14758:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   1475a:	0018      	movs	r0, r3
   1475c:	46bd      	mov	sp, r7
   1475e:	b016      	add	sp, #88	; 0x58
   14760:	bd80      	pop	{r7, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	20003bc4 	.word	0x20003bc4
   14768:	20003c04 	.word	0x20003c04
   1476c:	000144f1 	.word	0x000144f1

00014770 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14770:	b580      	push	{r7, lr}
   14772:	b096      	sub	sp, #88	; 0x58
   14774:	af00      	add	r7, sp, #0
   14776:	60f8      	str	r0, [r7, #12]
   14778:	0008      	movs	r0, r1
   1477a:	607a      	str	r2, [r7, #4]
   1477c:	0019      	movs	r1, r3
   1477e:	230b      	movs	r3, #11
   14780:	18fb      	adds	r3, r7, r3
   14782:	1c02      	adds	r2, r0, #0
   14784:	701a      	strb	r2, [r3, #0]
   14786:	2308      	movs	r3, #8
   14788:	18fb      	adds	r3, r7, r3
   1478a:	1c0a      	adds	r2, r1, #0
   1478c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   1478e:	2300      	movs	r3, #0
   14790:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14792:	4b13      	ldr	r3, [pc, #76]	; (147e0 <reg_read+0x70>)
   14794:	222a      	movs	r2, #42	; 0x2a
   14796:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   14798:	4b11      	ldr	r3, [pc, #68]	; (147e0 <reg_read+0x70>)
   1479a:	2208      	movs	r2, #8
   1479c:	18ba      	adds	r2, r7, r2
   1479e:	8812      	ldrh	r2, [r2, #0]
   147a0:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   147a2:	4b0f      	ldr	r3, [pc, #60]	; (147e0 <reg_read+0x70>)
   147a4:	687a      	ldr	r2, [r7, #4]
   147a6:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   147a8:	4b0e      	ldr	r3, [pc, #56]	; (147e4 <reg_read+0x74>)
   147aa:	220b      	movs	r2, #11
   147ac:	18ba      	adds	r2, r7, r2
   147ae:	7812      	ldrb	r2, [r2, #0]
   147b0:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   147b2:	4b0c      	ldr	r3, [pc, #48]	; (147e4 <reg_read+0x74>)
   147b4:	2200      	movs	r2, #0
   147b6:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   147b8:	4b09      	ldr	r3, [pc, #36]	; (147e0 <reg_read+0x70>)
   147ba:	4a0a      	ldr	r2, [pc, #40]	; (147e4 <reg_read+0x74>)
   147bc:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   147be:	4b08      	ldr	r3, [pc, #32]	; (147e0 <reg_read+0x70>)
   147c0:	2201      	movs	r2, #1
   147c2:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   147c4:	4b06      	ldr	r3, [pc, #24]	; (147e0 <reg_read+0x70>)
   147c6:	2264      	movs	r2, #100	; 0x64
   147c8:	2105      	movs	r1, #5
   147ca:	0018      	movs	r0, r3
   147cc:	4b06      	ldr	r3, [pc, #24]	; (147e8 <reg_read+0x78>)
   147ce:	4798      	blx	r3
   147d0:	0003      	movs	r3, r0
   147d2:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   147d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   147d6:	0018      	movs	r0, r3
   147d8:	46bd      	mov	sp, r7
   147da:	b016      	add	sp, #88	; 0x58
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	20003c04 	.word	0x20003c04
   147e4:	20003bc4 	.word	0x20003bc4
   147e8:	000145c9 	.word	0x000145c9

000147ec <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b085      	sub	sp, #20
   147f0:	af00      	add	r7, sp, #0
   147f2:	0002      	movs	r2, r0
   147f4:	1dfb      	adds	r3, r7, #7
   147f6:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <ADC_ReadReg+0x2c>)
   147fa:	6818      	ldr	r0, [r3, #0]
   147fc:	4a07      	ldr	r2, [pc, #28]	; (1481c <ADC_ReadReg+0x30>)
   147fe:	1dfb      	adds	r3, r7, #7
   14800:	7819      	ldrb	r1, [r3, #0]
   14802:	2301      	movs	r3, #1
   14804:	4c06      	ldr	r4, [pc, #24]	; (14820 <ADC_ReadReg+0x34>)
   14806:	47a0      	blx	r4
   14808:	0003      	movs	r3, r0
   1480a:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   1480c:	4b03      	ldr	r3, [pc, #12]	; (1481c <ADC_ReadReg+0x30>)
   1480e:	781b      	ldrb	r3, [r3, #0]
	
}
   14810:	0018      	movs	r0, r3
   14812:	46bd      	mov	sp, r7
   14814:	b005      	add	sp, #20
   14816:	bd90      	pop	{r4, r7, pc}
   14818:	20003bc0 	.word	0x20003bc0
   1481c:	20000524 	.word	0x20000524
   14820:	00014771 	.word	0x00014771

00014824 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   14824:	b590      	push	{r4, r7, lr}
   14826:	b085      	sub	sp, #20
   14828:	af00      	add	r7, sp, #0
   1482a:	0002      	movs	r2, r0
   1482c:	1dfb      	adds	r3, r7, #7
   1482e:	701a      	strb	r2, [r3, #0]
   14830:	1dbb      	adds	r3, r7, #6
   14832:	1c0a      	adds	r2, r1, #0
   14834:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   14836:	4b08      	ldr	r3, [pc, #32]	; (14858 <ADC_WriteReg+0x34>)
   14838:	6818      	ldr	r0, [r3, #0]
   1483a:	1dba      	adds	r2, r7, #6
   1483c:	1dfb      	adds	r3, r7, #7
   1483e:	7819      	ldrb	r1, [r3, #0]
   14840:	2301      	movs	r3, #1
   14842:	4c06      	ldr	r4, [pc, #24]	; (1485c <ADC_WriteReg+0x38>)
   14844:	47a0      	blx	r4
   14846:	0003      	movs	r3, r0
   14848:	60fb      	str	r3, [r7, #12]
	return err;
   1484a:	68fb      	ldr	r3, [r7, #12]
   1484c:	b2db      	uxtb	r3, r3
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b005      	add	sp, #20
   14854:	bd90      	pop	{r4, r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	20003bc0 	.word	0x20003bc0
   1485c:	000146dd 	.word	0x000146dd

00014860 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   14860:	b590      	push	{r4, r7, lr}
   14862:	b083      	sub	sp, #12
   14864:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   14866:	1dfb      	adds	r3, r7, #7
   14868:	2200      	movs	r2, #0
   1486a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   1486c:	1dfc      	adds	r4, r7, #7
   1486e:	2002      	movs	r0, #2
   14870:	4b21      	ldr	r3, [pc, #132]	; (148f8 <ADC_Calibration+0x98>)
   14872:	4798      	blx	r3
   14874:	0003      	movs	r3, r0
   14876:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   14878:	1dfb      	adds	r3, r7, #7
   1487a:	1dfa      	adds	r2, r7, #7
   1487c:	7812      	ldrb	r2, [r2, #0]
   1487e:	2107      	movs	r1, #7
   14880:	438a      	bics	r2, r1
   14882:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   14884:	1dfb      	adds	r3, r7, #7
   14886:	1dfa      	adds	r2, r7, #7
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   1488c:	1dfb      	adds	r3, r7, #7
   1488e:	781b      	ldrb	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	2002      	movs	r0, #2
   14894:	4b19      	ldr	r3, [pc, #100]	; (148fc <ADC_Calibration+0x9c>)
   14896:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   14898:	1dfb      	adds	r3, r7, #7
   1489a:	1dfa      	adds	r2, r7, #7
   1489c:	7812      	ldrb	r2, [r2, #0]
   1489e:	2104      	movs	r1, #4
   148a0:	430a      	orrs	r2, r1
   148a2:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   148a4:	1dfb      	adds	r3, r7, #7
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	0019      	movs	r1, r3
   148aa:	2002      	movs	r0, #2
   148ac:	4b13      	ldr	r3, [pc, #76]	; (148fc <ADC_Calibration+0x9c>)
   148ae:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   148b0:	2032      	movs	r0, #50	; 0x32
   148b2:	4b13      	ldr	r3, [pc, #76]	; (14900 <ADC_Calibration+0xa0>)
   148b4:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   148b6:	1dfc      	adds	r4, r7, #7
   148b8:	2002      	movs	r0, #2
   148ba:	4b0f      	ldr	r3, [pc, #60]	; (148f8 <ADC_Calibration+0x98>)
   148bc:	4798      	blx	r3
   148be:	0003      	movs	r3, r0
   148c0:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   148c2:	1dfb      	adds	r3, r7, #7
   148c4:	781b      	ldrb	r3, [r3, #0]
   148c6:	2204      	movs	r2, #4
   148c8:	4013      	ands	r3, r2
   148ca:	d000      	beq.n	148ce <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   148cc:	e7f0      	b.n	148b0 <ADC_Calibration+0x50>
			break;
   148ce:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   148d0:	1dfb      	adds	r3, r7, #7
   148d2:	1dfa      	adds	r2, r7, #7
   148d4:	7812      	ldrb	r2, [r2, #0]
   148d6:	2108      	movs	r1, #8
   148d8:	400a      	ands	r2, r1
   148da:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   148dc:	1dfb      	adds	r3, r7, #7
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	2208      	movs	r2, #8
   148e2:	4013      	ands	r3, r2
   148e4:	d000      	beq.n	148e8 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   148e6:	e7c1      	b.n	1486c <ADC_Calibration+0xc>
		break;
   148e8:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   148ea:	2001      	movs	r0, #1
   148ec:	4b04      	ldr	r3, [pc, #16]	; (14900 <ADC_Calibration+0xa0>)
   148ee:	4798      	blx	r3

}
   148f0:	46c0      	nop			; (mov r8, r8)
   148f2:	46bd      	mov	sp, r7
   148f4:	b003      	add	sp, #12
   148f6:	bd90      	pop	{r4, r7, pc}
   148f8:	000147ed 	.word	0x000147ed
   148fc:	00014825 	.word	0x00014825
   14900:	0001baa9 	.word	0x0001baa9

00014904 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   14904:	b580      	push	{r7, lr}
   14906:	b082      	sub	sp, #8
   14908:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   1490a:	1dfb      	adds	r3, r7, #7
   1490c:	2200      	movs	r2, #0
   1490e:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   14910:	1dfb      	adds	r3, r7, #7
   14912:	2201      	movs	r2, #1
   14914:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   14916:	1dfb      	adds	r3, r7, #7
   14918:	781b      	ldrb	r3, [r3, #0]
   1491a:	0019      	movs	r1, r3
   1491c:	2000      	movs	r0, #0
   1491e:	4b1d      	ldr	r3, [pc, #116]	; (14994 <ADCchip_Init+0x90>)
   14920:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   14922:	2001      	movs	r0, #1
   14924:	4b1c      	ldr	r3, [pc, #112]	; (14998 <ADCchip_Init+0x94>)
   14926:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	2202      	movs	r2, #2
   1492c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1492e:	1dfb      	adds	r3, r7, #7
   14930:	781b      	ldrb	r3, [r3, #0]
   14932:	0019      	movs	r1, r3
   14934:	2000      	movs	r0, #0
   14936:	4b17      	ldr	r3, [pc, #92]	; (14994 <ADCchip_Init+0x90>)
   14938:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   1493a:	2032      	movs	r0, #50	; 0x32
   1493c:	4b16      	ldr	r3, [pc, #88]	; (14998 <ADCchip_Init+0x94>)
   1493e:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   14940:	1dfb      	adds	r3, r7, #7
   14942:	2227      	movs	r2, #39	; 0x27
   14944:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   14946:	1dfb      	adds	r3, r7, #7
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	0019      	movs	r1, r3
   1494c:	2001      	movs	r0, #1
   1494e:	4b11      	ldr	r3, [pc, #68]	; (14994 <ADCchip_Init+0x90>)
   14950:	4798      	blx	r3
	delay_ms(1);
   14952:	2001      	movs	r0, #1
   14954:	4b10      	ldr	r3, [pc, #64]	; (14998 <ADCchip_Init+0x94>)
   14956:	4798      	blx	r3
	
	reg=0x86;
   14958:	1dfb      	adds	r3, r7, #7
   1495a:	2286      	movs	r2, #134	; 0x86
   1495c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1495e:	1dfb      	adds	r3, r7, #7
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	0019      	movs	r1, r3
   14964:	2000      	movs	r0, #0
   14966:	4b0b      	ldr	r3, [pc, #44]	; (14994 <ADCchip_Init+0x90>)
   14968:	4798      	blx	r3
	delay_ms(1);
   1496a:	2001      	movs	r0, #1
   1496c:	4b0a      	ldr	r3, [pc, #40]	; (14998 <ADCchip_Init+0x94>)
   1496e:	4798      	blx	r3
	
	reg=0x30;
   14970:	1dfb      	adds	r3, r7, #7
   14972:	2230      	movs	r2, #48	; 0x30
   14974:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   14976:	1dfb      	adds	r3, r7, #7
   14978:	781b      	ldrb	r3, [r3, #0]
   1497a:	0019      	movs	r1, r3
   1497c:	2015      	movs	r0, #21
   1497e:	4b05      	ldr	r3, [pc, #20]	; (14994 <ADCchip_Init+0x90>)
   14980:	4798      	blx	r3
	delay_ms(1);
   14982:	2001      	movs	r0, #1
   14984:	4b04      	ldr	r3, [pc, #16]	; (14998 <ADCchip_Init+0x94>)
   14986:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   14988:	4b04      	ldr	r3, [pc, #16]	; (1499c <ADCchip_Init+0x98>)
   1498a:	4798      	blx	r3
}
   1498c:	46c0      	nop			; (mov r8, r8)
   1498e:	46bd      	mov	sp, r7
   14990:	b002      	add	sp, #8
   14992:	bd80      	pop	{r7, pc}
   14994:	00014825 	.word	0x00014825
   14998:	0001baa9 	.word	0x0001baa9
   1499c:	00014861 	.word	0x00014861

000149a0 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   149a0:	b590      	push	{r4, r7, lr}
   149a2:	b083      	sub	sp, #12
   149a4:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   149a6:	1dfb      	adds	r3, r7, #7
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   149ac:	1dfc      	adds	r4, r7, #7
   149ae:	2000      	movs	r0, #0
   149b0:	4b09      	ldr	r3, [pc, #36]	; (149d8 <ADC_StartConversion+0x38>)
   149b2:	4798      	blx	r3
   149b4:	0003      	movs	r3, r0
   149b6:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   149b8:	1dfb      	adds	r3, r7, #7
   149ba:	1dfa      	adds	r2, r7, #7
   149bc:	7812      	ldrb	r2, [r2, #0]
   149be:	2110      	movs	r1, #16
   149c0:	430a      	orrs	r2, r1
   149c2:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   149c4:	1dfb      	adds	r3, r7, #7
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	0019      	movs	r1, r3
   149ca:	2000      	movs	r0, #0
   149cc:	4b03      	ldr	r3, [pc, #12]	; (149dc <ADC_StartConversion+0x3c>)
   149ce:	4798      	blx	r3
}
   149d0:	46c0      	nop			; (mov r8, r8)
   149d2:	46bd      	mov	sp, r7
   149d4:	b003      	add	sp, #12
   149d6:	bd90      	pop	{r4, r7, pc}
   149d8:	000147ed 	.word	0x000147ed
   149dc:	00014825 	.word	0x00014825

000149e0 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   149e0:	b580      	push	{r7, lr}
   149e2:	b088      	sub	sp, #32
   149e4:	af00      	add	r7, sp, #0
   149e6:	60ba      	str	r2, [r7, #8]
   149e8:	607b      	str	r3, [r7, #4]
   149ea:	230f      	movs	r3, #15
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	1c02      	adds	r2, r0, #0
   149f0:	701a      	strb	r2, [r3, #0]
   149f2:	230e      	movs	r3, #14
   149f4:	18fb      	adds	r3, r7, r3
   149f6:	1c0a      	adds	r2, r1, #0
   149f8:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   149fa:	2002      	movs	r0, #2
   149fc:	4b14      	ldr	r3, [pc, #80]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   149fe:	4798      	blx	r3
   14a00:	0003      	movs	r3, r0
   14a02:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   14a04:	69fb      	ldr	r3, [r7, #28]
   14a06:	b2db      	uxtb	r3, r3
   14a08:	0019      	movs	r1, r3
   14a0a:	2002      	movs	r0, #2
   14a0c:	4b11      	ldr	r3, [pc, #68]	; (14a54 <I2C_ReadMultiBytesOneReg+0x74>)
   14a0e:	4798      	blx	r3
	delay_ms(1);
   14a10:	2001      	movs	r0, #1
   14a12:	4b11      	ldr	r3, [pc, #68]	; (14a58 <I2C_ReadMultiBytesOneReg+0x78>)
   14a14:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   14a16:	2012      	movs	r0, #18
   14a18:	4b0d      	ldr	r3, [pc, #52]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   14a20:	2013      	movs	r0, #19
   14a22:	4b0b      	ldr	r3, [pc, #44]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a24:	4798      	blx	r3
   14a26:	0003      	movs	r3, r0
   14a28:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   14a2a:	2014      	movs	r0, #20
   14a2c:	4b08      	ldr	r3, [pc, #32]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a2e:	4798      	blx	r3
   14a30:	0003      	movs	r3, r0
   14a32:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   14a34:	69fb      	ldr	r3, [r7, #28]
   14a36:	041a      	lsls	r2, r3, #16
   14a38:	69bb      	ldr	r3, [r7, #24]
   14a3a:	021b      	lsls	r3, r3, #8
   14a3c:	431a      	orrs	r2, r3
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	4313      	orrs	r3, r2
   14a42:	613b      	str	r3, [r7, #16]
	return x;
   14a44:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   14a46:	0018      	movs	r0, r3
   14a48:	46bd      	mov	sp, r7
   14a4a:	b008      	add	sp, #32
   14a4c:	bd80      	pop	{r7, pc}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	000147ed 	.word	0x000147ed
   14a54:	00014825 	.word	0x00014825
   14a58:	0001baa9 	.word	0x0001baa9

00014a5c <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   14a5c:	b590      	push	{r4, r7, lr}
   14a5e:	b083      	sub	sp, #12
   14a60:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   14a62:	003a      	movs	r2, r7
   14a64:	2303      	movs	r3, #3
   14a66:	2112      	movs	r1, #18
   14a68:	202a      	movs	r0, #42	; 0x2a
   14a6a:	4c04      	ldr	r4, [pc, #16]	; (14a7c <ADC_Read_Conversion_Data+0x20>)
   14a6c:	47a0      	blx	r4
   14a6e:	0003      	movs	r3, r0
   14a70:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   14a72:	687b      	ldr	r3, [r7, #4]
}
   14a74:	0018      	movs	r0, r3
   14a76:	46bd      	mov	sp, r7
   14a78:	b003      	add	sp, #12
   14a7a:	bd90      	pop	{r4, r7, pc}
   14a7c:	000149e1 	.word	0x000149e1

00014a80 <Value_conversion>:

void Value_conversion(int value,uint16_t final[2]){
   14a80:	b5b0      	push	{r4, r5, r7, lr}
   14a82:	b092      	sub	sp, #72	; 0x48
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   14a8a:	2006      	movs	r0, #6
   14a8c:	4b8b      	ldr	r3, [pc, #556]	; (14cbc <Value_conversion+0x23c>)
   14a8e:	4798      	blx	r3
   14a90:	0003      	movs	r3, r0
   14a92:	001a      	movs	r2, r3
   14a94:	232c      	movs	r3, #44	; 0x2c
   14a96:	18fb      	adds	r3, r7, r3
   14a98:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   14a9a:	2007      	movs	r0, #7
   14a9c:	4b87      	ldr	r3, [pc, #540]	; (14cbc <Value_conversion+0x23c>)
   14a9e:	4798      	blx	r3
   14aa0:	0003      	movs	r3, r0
   14aa2:	001a      	movs	r2, r3
   14aa4:	232c      	movs	r3, #44	; 0x2c
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   14aaa:	2008      	movs	r0, #8
   14aac:	4b83      	ldr	r3, [pc, #524]	; (14cbc <Value_conversion+0x23c>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	001a      	movs	r2, r3
   14ab4:	232c      	movs	r3, #44	; 0x2c
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   14aba:	2009      	movs	r0, #9
   14abc:	4b7f      	ldr	r3, [pc, #508]	; (14cbc <Value_conversion+0x23c>)
   14abe:	4798      	blx	r3
   14ac0:	0003      	movs	r3, r0
   14ac2:	001a      	movs	r2, r3
   14ac4:	232c      	movs	r3, #44	; 0x2c
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   14aca:	2003      	movs	r0, #3
   14acc:	4b7b      	ldr	r3, [pc, #492]	; (14cbc <Value_conversion+0x23c>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	001a      	movs	r2, r3
   14ad4:	2328      	movs	r3, #40	; 0x28
   14ad6:	18fb      	adds	r3, r7, r3
   14ad8:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   14ada:	2004      	movs	r0, #4
   14adc:	4b77      	ldr	r3, [pc, #476]	; (14cbc <Value_conversion+0x23c>)
   14ade:	4798      	blx	r3
   14ae0:	0003      	movs	r3, r0
   14ae2:	001a      	movs	r2, r3
   14ae4:	2328      	movs	r3, #40	; 0x28
   14ae6:	18fb      	adds	r3, r7, r3
   14ae8:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   14aea:	2005      	movs	r0, #5
   14aec:	4b73      	ldr	r3, [pc, #460]	; (14cbc <Value_conversion+0x23c>)
   14aee:	4798      	blx	r3
   14af0:	0003      	movs	r3, r0
   14af2:	001a      	movs	r2, r3
   14af4:	2328      	movs	r3, #40	; 0x28
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	709a      	strb	r2, [r3, #2]
	

	for(int j=0;j<4;j++)
   14afa:	2300      	movs	r3, #0
   14afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   14afe:	e002      	b.n	14b06 <Value_conversion+0x86>
   14b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b02:	3301      	adds	r3, #1
   14b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   14b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b08:	2b03      	cmp	r3, #3
   14b0a:	ddf9      	ble.n	14b00 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   14b0c:	231f      	movs	r3, #31
   14b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   14b10:	e02c      	b.n	14b6c <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b14:	2b00      	cmp	r3, #0
   14b16:	da00      	bge.n	14b1a <Value_conversion+0x9a>
   14b18:	3307      	adds	r3, #7
   14b1a:	10db      	asrs	r3, r3, #3
   14b1c:	425b      	negs	r3, r3
   14b1e:	3303      	adds	r3, #3
   14b20:	222c      	movs	r2, #44	; 0x2c
   14b22:	18ba      	adds	r2, r7, r2
   14b24:	5cd3      	ldrb	r3, [r2, r3]
   14b26:	0019      	movs	r1, r3
   14b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b2a:	4a65      	ldr	r2, [pc, #404]	; (14cc0 <Value_conversion+0x240>)
   14b2c:	4013      	ands	r3, r2
   14b2e:	d504      	bpl.n	14b3a <Value_conversion+0xba>
   14b30:	3b01      	subs	r3, #1
   14b32:	2208      	movs	r2, #8
   14b34:	4252      	negs	r2, r2
   14b36:	4313      	orrs	r3, r2
   14b38:	3301      	adds	r3, #1
   14b3a:	4119      	asrs	r1, r3
   14b3c:	000b      	movs	r3, r1
   14b3e:	2201      	movs	r2, #1
   14b40:	4013      	ands	r3, r2
   14b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b44:	3a17      	subs	r2, #23
   14b46:	495f      	ldr	r1, [pc, #380]	; (14cc4 <Value_conversion+0x244>)
   14b48:	434a      	muls	r2, r1
   14b4a:	2102      	movs	r1, #2
   14b4c:	4091      	lsls	r1, r2
   14b4e:	000a      	movs	r2, r1
   14b50:	435a      	muls	r2, r3
   14b52:	4b5d      	ldr	r3, [pc, #372]	; (14cc8 <Value_conversion+0x248>)
   14b54:	0010      	movs	r0, r2
   14b56:	4798      	blx	r3
   14b58:	1c02      	adds	r2, r0, #0
   14b5a:	4b5c      	ldr	r3, [pc, #368]	; (14ccc <Value_conversion+0x24c>)
   14b5c:	1c11      	adds	r1, r2, #0
   14b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14b60:	4798      	blx	r3
   14b62:	1c03      	adds	r3, r0, #0
   14b64:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   14b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b68:	3b01      	subs	r3, #1
   14b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   14b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b6e:	2b00      	cmp	r3, #0
   14b70:	dacf      	bge.n	14b12 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   14b72:	2316      	movs	r3, #22
   14b74:	637b      	str	r3, [r7, #52]	; 0x34
   14b76:	e02c      	b.n	14bd2 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	da00      	bge.n	14b80 <Value_conversion+0x100>
   14b7e:	3307      	adds	r3, #7
   14b80:	10db      	asrs	r3, r3, #3
   14b82:	425b      	negs	r3, r3
   14b84:	3302      	adds	r3, #2
   14b86:	2228      	movs	r2, #40	; 0x28
   14b88:	18ba      	adds	r2, r7, r2
   14b8a:	5cd3      	ldrb	r3, [r2, r3]
   14b8c:	0019      	movs	r1, r3
   14b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b90:	4a4b      	ldr	r2, [pc, #300]	; (14cc0 <Value_conversion+0x240>)
   14b92:	4013      	ands	r3, r2
   14b94:	d504      	bpl.n	14ba0 <Value_conversion+0x120>
   14b96:	3b01      	subs	r3, #1
   14b98:	2208      	movs	r2, #8
   14b9a:	4252      	negs	r2, r2
   14b9c:	4313      	orrs	r3, r2
   14b9e:	3301      	adds	r3, #1
   14ba0:	4119      	asrs	r1, r3
   14ba2:	000b      	movs	r3, r1
   14ba4:	2201      	movs	r2, #1
   14ba6:	4013      	ands	r3, r2
   14ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14baa:	3a17      	subs	r2, #23
   14bac:	4945      	ldr	r1, [pc, #276]	; (14cc4 <Value_conversion+0x244>)
   14bae:	434a      	muls	r2, r1
   14bb0:	2102      	movs	r1, #2
   14bb2:	4091      	lsls	r1, r2
   14bb4:	000a      	movs	r2, r1
   14bb6:	435a      	muls	r2, r3
   14bb8:	4b43      	ldr	r3, [pc, #268]	; (14cc8 <Value_conversion+0x248>)
   14bba:	0010      	movs	r0, r2
   14bbc:	4798      	blx	r3
   14bbe:	1c02      	adds	r2, r0, #0
   14bc0:	4b42      	ldr	r3, [pc, #264]	; (14ccc <Value_conversion+0x24c>)
   14bc2:	1c11      	adds	r1, r2, #0
   14bc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bc6:	4798      	blx	r3
   14bc8:	1c03      	adds	r3, r0, #0
   14bca:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   14bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bce:	3b01      	subs	r3, #1
   14bd0:	637b      	str	r3, [r7, #52]	; 0x34
   14bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	dacf      	bge.n	14b78 <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   14bd8:	2328      	movs	r3, #40	; 0x28
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	09db      	lsrs	r3, r3, #7
   14be0:	b2db      	uxtb	r3, r3
   14be2:	001a      	movs	r2, r3
   14be4:	2301      	movs	r3, #1
   14be6:	1a9b      	subs	r3, r3, r2
   14be8:	2201      	movs	r2, #1
   14bea:	401a      	ands	r2, r3
   14bec:	4b36      	ldr	r3, [pc, #216]	; (14cc8 <Value_conversion+0x248>)
   14bee:	0010      	movs	r0, r2
   14bf0:	4798      	blx	r3
   14bf2:	1c02      	adds	r2, r0, #0
   14bf4:	4b36      	ldr	r3, [pc, #216]	; (14cd0 <Value_conversion+0x250>)
   14bf6:	1c11      	adds	r1, r2, #0
   14bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bfa:	4798      	blx	r3
   14bfc:	1c03      	adds	r3, r0, #0
   14bfe:	643b      	str	r3, [r7, #64]	; 0x40
	//snprintf(help, 32, " gain= %d\r\n",gain);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   14c00:	4b34      	ldr	r3, [pc, #208]	; (14cd4 <Value_conversion+0x254>)
   14c02:	4935      	ldr	r1, [pc, #212]	; (14cd8 <Value_conversion+0x258>)
   14c04:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14c06:	4798      	blx	r3
   14c08:	1c03      	adds	r3, r0, #0
   14c0a:	1c1c      	adds	r4, r3, #0
   14c0c:	4b2e      	ldr	r3, [pc, #184]	; (14cc8 <Value_conversion+0x248>)
   14c0e:	6878      	ldr	r0, [r7, #4]
   14c10:	4798      	blx	r3
   14c12:	1c05      	adds	r5, r0, #0
   14c14:	4b2f      	ldr	r3, [pc, #188]	; (14cd4 <Value_conversion+0x254>)
   14c16:	4930      	ldr	r1, [pc, #192]	; (14cd8 <Value_conversion+0x258>)
   14c18:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14c1a:	4798      	blx	r3
   14c1c:	1c03      	adds	r3, r0, #0
   14c1e:	1c1a      	adds	r2, r3, #0
   14c20:	4b2e      	ldr	r3, [pc, #184]	; (14cdc <Value_conversion+0x25c>)
   14c22:	1c11      	adds	r1, r2, #0
   14c24:	1c28      	adds	r0, r5, #0
   14c26:	4798      	blx	r3
   14c28:	1c03      	adds	r3, r0, #0
   14c2a:	1c1a      	adds	r2, r3, #0
   14c2c:	4b28      	ldr	r3, [pc, #160]	; (14cd0 <Value_conversion+0x250>)
   14c2e:	1c11      	adds	r1, r2, #0
   14c30:	1c20      	adds	r0, r4, #0
   14c32:	4798      	blx	r3
   14c34:	1c03      	adds	r3, r0, #0
   14c36:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   14c38:	4b29      	ldr	r3, [pc, #164]	; (14ce0 <Value_conversion+0x260>)
   14c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c3c:	4798      	blx	r3
   14c3e:	0003      	movs	r3, r0
   14c40:	b29a      	uxth	r2, r3
   14c42:	683b      	ldr	r3, [r7, #0]
   14c44:	801a      	strh	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   14c46:	683b      	ldr	r3, [r7, #0]
   14c48:	1c9c      	adds	r4, r3, #2
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	881b      	ldrh	r3, [r3, #0]
   14c4e:	001a      	movs	r2, r3
   14c50:	4b1d      	ldr	r3, [pc, #116]	; (14cc8 <Value_conversion+0x248>)
   14c52:	0010      	movs	r0, r2
   14c54:	4798      	blx	r3
   14c56:	1c02      	adds	r2, r0, #0
   14c58:	4b20      	ldr	r3, [pc, #128]	; (14cdc <Value_conversion+0x25c>)
   14c5a:	1c11      	adds	r1, r2, #0
   14c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c5e:	4798      	blx	r3
   14c60:	1c03      	adds	r3, r0, #0
   14c62:	1c1a      	adds	r2, r3, #0
   14c64:	4b1a      	ldr	r3, [pc, #104]	; (14cd0 <Value_conversion+0x250>)
   14c66:	491c      	ldr	r1, [pc, #112]	; (14cd8 <Value_conversion+0x258>)
   14c68:	1c10      	adds	r0, r2, #0
   14c6a:	4798      	blx	r3
   14c6c:	1c03      	adds	r3, r0, #0
   14c6e:	1c1a      	adds	r2, r3, #0
   14c70:	4b1c      	ldr	r3, [pc, #112]	; (14ce4 <Value_conversion+0x264>)
   14c72:	1c10      	adds	r0, r2, #0
   14c74:	4798      	blx	r3
   14c76:	0003      	movs	r3, r0
   14c78:	b29b      	uxth	r3, r3
   14c7a:	8023      	strh	r3, [r4, #0]
	snprintf(help, 32, "final_int= %d\r\n",final[0]);
   14c7c:	683b      	ldr	r3, [r7, #0]
   14c7e:	881b      	ldrh	r3, [r3, #0]
   14c80:	4a19      	ldr	r2, [pc, #100]	; (14ce8 <Value_conversion+0x268>)
   14c82:	2108      	movs	r1, #8
   14c84:	1878      	adds	r0, r7, r1
   14c86:	2120      	movs	r1, #32
   14c88:	4c18      	ldr	r4, [pc, #96]	; (14cec <Value_conversion+0x26c>)
   14c8a:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   14c8c:	2308      	movs	r3, #8
   14c8e:	18fb      	adds	r3, r7, r3
   14c90:	0018      	movs	r0, r3
   14c92:	4b17      	ldr	r3, [pc, #92]	; (14cf0 <Value_conversion+0x270>)
   14c94:	4798      	blx	r3
	snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
   14c96:	683b      	ldr	r3, [r7, #0]
   14c98:	3302      	adds	r3, #2
   14c9a:	881b      	ldrh	r3, [r3, #0]
   14c9c:	4a15      	ldr	r2, [pc, #84]	; (14cf4 <Value_conversion+0x274>)
   14c9e:	2108      	movs	r1, #8
   14ca0:	1878      	adds	r0, r7, r1
   14ca2:	2120      	movs	r1, #32
   14ca4:	4c11      	ldr	r4, [pc, #68]	; (14cec <Value_conversion+0x26c>)
   14ca6:	47a0      	blx	r4
	SerialConsoleWriteString(help);
   14ca8:	2308      	movs	r3, #8
   14caa:	18fb      	adds	r3, r7, r3
   14cac:	0018      	movs	r0, r3
   14cae:	4b10      	ldr	r3, [pc, #64]	; (14cf0 <Value_conversion+0x270>)
   14cb0:	4798      	blx	r3
	return final;
   14cb2:	46c0      	nop			; (mov r8, r8)
	//final=(float)((float)value / 16777216) * (float)(3.14);
   14cb4:	46bd      	mov	sp, r7
   14cb6:	b012      	add	sp, #72	; 0x48
   14cb8:	bdb0      	pop	{r4, r5, r7, pc}
   14cba:	46c0      	nop			; (mov r8, r8)
   14cbc:	000147ed 	.word	0x000147ed
   14cc0:	80000007 	.word	0x80000007
   14cc4:	00002710 	.word	0x00002710
   14cc8:	000202e9 	.word	0x000202e9
   14ccc:	0001f77d 	.word	0x0001f77d
   14cd0:	0001fd31 	.word	0x0001fd31
   14cd4:	0001faa1 	.word	0x0001faa1
   14cd8:	461c4000 	.word	0x461c4000
   14cdc:	0001ff71 	.word	0x0001ff71
   14ce0:	000202a9 	.word	0x000202a9
   14ce4:	0001f74d 	.word	0x0001f74d
   14ce8:	00022dbc 	.word	0x00022dbc
   14cec:	0002202d 	.word	0x0002202d
   14cf0:	0001b7e1 	.word	0x0001b7e1
   14cf4:	00022dcc 	.word	0x00022dcc

00014cf8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   14cf8:	b580      	push	{r7, lr}
   14cfa:	b084      	sub	sp, #16
   14cfc:	af00      	add	r7, sp, #0
   14cfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   14d00:	687b      	ldr	r3, [r7, #4]
   14d02:	681b      	ldr	r3, [r3, #0]
   14d04:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	68fb      	ldr	r3, [r7, #12]
   14d0a:	689b      	ldr	r3, [r3, #8]
   14d0c:	2202      	movs	r2, #2
   14d0e:	4013      	ands	r3, r2
   14d10:	d1fa      	bne.n	14d08 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   14d12:	68fb      	ldr	r3, [r7, #12]
   14d14:	681b      	ldr	r3, [r3, #0]
   14d16:	2202      	movs	r2, #2
   14d18:	431a      	orrs	r2, r3
   14d1a:	68fb      	ldr	r3, [r7, #12]
   14d1c:	601a      	str	r2, [r3, #0]
}
   14d1e:	46c0      	nop			; (mov r8, r8)
   14d20:	46bd      	mov	sp, r7
   14d22:	b004      	add	sp, #16
   14d24:	bd80      	pop	{r7, pc}
	...

00014d28 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   14d28:	b580      	push	{r7, lr}
   14d2a:	b0aa      	sub	sp, #168	; 0xa8
   14d2c:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   14d2e:	4a15      	ldr	r2, [pc, #84]	; (14d84 <configure_tcc+0x5c>)
   14d30:	1d3b      	adds	r3, r7, #4
   14d32:	0011      	movs	r1, r2
   14d34:	0018      	movs	r0, r3
   14d36:	4b14      	ldr	r3, [pc, #80]	; (14d88 <configure_tcc+0x60>)
   14d38:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   14d3a:	1d3b      	adds	r3, r7, #4
   14d3c:	2202      	movs	r2, #2
   14d3e:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   14d40:	1d3b      	adds	r3, r7, #4
   14d42:	4a12      	ldr	r2, [pc, #72]	; (14d8c <configure_tcc+0x64>)
   14d44:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   14d46:	1d3b      	adds	r3, r7, #4
   14d48:	2202      	movs	r2, #2
   14d4a:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   14d4c:	1d3b      	adds	r3, r7, #4
   14d4e:	4a10      	ldr	r2, [pc, #64]	; (14d90 <configure_tcc+0x68>)
   14d50:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   14d52:	1d3b      	adds	r3, r7, #4
   14d54:	229a      	movs	r2, #154	; 0x9a
   14d56:	2101      	movs	r1, #1
   14d58:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   14d5a:	1d3b      	adds	r3, r7, #4
   14d5c:	220a      	movs	r2, #10
   14d5e:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   14d60:	1d3b      	adds	r3, r7, #4
   14d62:	2280      	movs	r2, #128	; 0x80
   14d64:	2105      	movs	r1, #5
   14d66:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   14d68:	1d3a      	adds	r2, r7, #4
   14d6a:	4906      	ldr	r1, [pc, #24]	; (14d84 <configure_tcc+0x5c>)
   14d6c:	4b09      	ldr	r3, [pc, #36]	; (14d94 <configure_tcc+0x6c>)
   14d6e:	0018      	movs	r0, r3
   14d70:	4b09      	ldr	r3, [pc, #36]	; (14d98 <configure_tcc+0x70>)
   14d72:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   14d74:	4b07      	ldr	r3, [pc, #28]	; (14d94 <configure_tcc+0x6c>)
   14d76:	0018      	movs	r0, r3
   14d78:	4b08      	ldr	r3, [pc, #32]	; (14d9c <configure_tcc+0x74>)
   14d7a:	4798      	blx	r3
}
   14d7c:	46c0      	nop			; (mov r8, r8)
   14d7e:	46bd      	mov	sp, r7
   14d80:	b02a      	add	sp, #168	; 0xa8
   14d82:	bd80      	pop	{r7, pc}
   14d84:	42002000 	.word	0x42002000
   14d88:	0001e481 	.word	0x0001e481
   14d8c:	0000ba2e 	.word	0x0000ba2e
   14d90:	00005d17 	.word	0x00005d17
   14d94:	20003c14 	.word	0x20003c14
   14d98:	0001eadd 	.word	0x0001eadd
   14d9c:	00014cf9 	.word	0x00014cf9

00014da0 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   14da0:	b580      	push	{r7, lr}
   14da2:	b084      	sub	sp, #16
   14da4:	af00      	add	r7, sp, #0
   14da6:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   14da8:	4b07      	ldr	r3, [pc, #28]	; (14dc8 <servo_setDuty+0x28>)
   14daa:	6879      	ldr	r1, [r7, #4]
   14dac:	4807      	ldr	r0, [pc, #28]	; (14dcc <servo_setDuty+0x2c>)
   14dae:	4798      	blx	r3
   14db0:	0003      	movs	r3, r0
   14db2:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   14db4:	68fa      	ldr	r2, [r7, #12]
   14db6:	4b06      	ldr	r3, [pc, #24]	; (14dd0 <servo_setDuty+0x30>)
   14db8:	2102      	movs	r1, #2
   14dba:	0018      	movs	r0, r3
   14dbc:	4b05      	ldr	r3, [pc, #20]	; (14dd4 <servo_setDuty+0x34>)
   14dbe:	4798      	blx	r3
   14dc0:	46c0      	nop			; (mov r8, r8)
   14dc2:	46bd      	mov	sp, r7
   14dc4:	b004      	add	sp, #16
   14dc6:	bd80      	pop	{r7, pc}
   14dc8:	0001f521 	.word	0x0001f521
   14dcc:	0000ba2e 	.word	0x0000ba2e
   14dd0:	20003c14 	.word	0x20003c14
   14dd4:	0001ef9d 	.word	0x0001ef9d

00014dd8 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   14dd8:	b590      	push	{r4, r7, lr}
   14dda:	b09f      	sub	sp, #124	; 0x7c
   14ddc:	af00      	add	r7, sp, #0
   14dde:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   14de0:	4b3b      	ldr	r3, [pc, #236]	; (14ed0 <vUiHandlerTask+0xf8>)
   14de2:	0018      	movs	r0, r3
   14de4:	4b3b      	ldr	r3, [pc, #236]	; (14ed4 <vUiHandlerTask+0xfc>)
   14de6:	4798      	blx	r3
	configure_tcc();
   14de8:	4b3b      	ldr	r3, [pc, #236]	; (14ed8 <vUiHandlerTask+0x100>)
   14dea:	4798      	blx	r3
	servo_setDuty(2);
   14dec:	2002      	movs	r0, #2
   14dee:	4b3b      	ldr	r3, [pc, #236]	; (14edc <vUiHandlerTask+0x104>)
   14df0:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   14df2:	4b3b      	ldr	r3, [pc, #236]	; (14ee0 <vUiHandlerTask+0x108>)
   14df4:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   14df6:	4b3b      	ldr	r3, [pc, #236]	; (14ee4 <vUiHandlerTask+0x10c>)
   14df8:	483b      	ldr	r0, [pc, #236]	; (14ee8 <vUiHandlerTask+0x110>)
   14dfa:	2208      	movs	r2, #8
   14dfc:	2100      	movs	r1, #0
   14dfe:	4c3b      	ldr	r4, [pc, #236]	; (14eec <vUiHandlerTask+0x114>)
   14e00:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   14e02:	4b38      	ldr	r3, [pc, #224]	; (14ee4 <vUiHandlerTask+0x10c>)
   14e04:	483a      	ldr	r0, [pc, #232]	; (14ef0 <vUiHandlerTask+0x118>)
   14e06:	2212      	movs	r2, #18
   14e08:	2100      	movs	r1, #0
   14e0a:	4c38      	ldr	r4, [pc, #224]	; (14eec <vUiHandlerTask+0x114>)
   14e0c:	47a0      	blx	r4
	uint8_t count = 0;
   14e0e:	2377      	movs	r3, #119	; 0x77
   14e10:	18fb      	adds	r3, r7, r3
   14e12:	2200      	movs	r2, #0
   14e14:	701a      	strb	r2, [r3, #0]
	uint8_t count_nau = 0;
   14e16:	2376      	movs	r3, #118	; 0x76
   14e18:	18fb      	adds	r3, r7, r3
   14e1a:	2200      	movs	r2, #0
   14e1c:	701a      	strb	r2, [r3, #0]
	uint16_t nau_i_total = 0;
   14e1e:	2374      	movs	r3, #116	; 0x74
   14e20:	18fb      	adds	r3, r7, r3
   14e22:	2200      	movs	r2, #0
   14e24:	801a      	strh	r2, [r3, #0]
	uint16_t nau_f_total = 0;
   14e26:	2372      	movs	r3, #114	; 0x72
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	2200      	movs	r2, #0
   14e2c:	801a      	strh	r2, [r3, #0]
	char oled_display[24];
	bool servo_flag = false;
   14e2e:	2371      	movs	r3, #113	; 0x71
   14e30:	18fb      	adds	r3, r7, r3
   14e32:	2200      	movs	r2, #0
   14e34:	701a      	strb	r2, [r3, #0]
	ADCchip_Init();
   14e36:	4b2f      	ldr	r3, [pc, #188]	; (14ef4 <vUiHandlerTask+0x11c>)
   14e38:	4798      	blx	r3
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   14e3a:	4b2f      	ldr	r3, [pc, #188]	; (14ef8 <vUiHandlerTask+0x120>)
   14e3c:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14e3e:	46c0      	nop			; (mov r8, r8)
   14e40:	2000      	movs	r0, #0
   14e42:	4b2e      	ldr	r3, [pc, #184]	; (14efc <vUiHandlerTask+0x124>)
   14e44:	4798      	blx	r3
   14e46:	0003      	movs	r3, r0
   14e48:	001a      	movs	r2, r3
   14e4a:	2320      	movs	r3, #32
   14e4c:	4013      	ands	r3, r2
   14e4e:	2b20      	cmp	r3, #32
   14e50:	d1f6      	bne.n	14e40 <vUiHandlerTask+0x68>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   14e52:	4b2b      	ldr	r3, [pc, #172]	; (14f00 <vUiHandlerTask+0x128>)
   14e54:	4798      	blx	r3
   14e56:	0003      	movs	r3, r0
   14e58:	66fb      	str	r3, [r7, #108]	; 0x6c
		uint16_t ADC_Array[2];
		//int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   14e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14e5c:	224c      	movs	r2, #76	; 0x4c
   14e5e:	18ba      	adds	r2, r7, r2
   14e60:	0011      	movs	r1, r2
   14e62:	0018      	movs	r0, r3
   14e64:	4b27      	ldr	r3, [pc, #156]	; (14f04 <vUiHandlerTask+0x12c>)
   14e66:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   14e68:	234c      	movs	r3, #76	; 0x4c
   14e6a:	18fb      	adds	r3, r7, r3
   14e6c:	881a      	ldrh	r2, [r3, #0]
   14e6e:	2350      	movs	r3, #80	; 0x50
   14e70:	18fb      	adds	r3, r7, r3
   14e72:	801a      	strh	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   14e74:	234c      	movs	r3, #76	; 0x4c
   14e76:	18fb      	adds	r3, r7, r3
   14e78:	885a      	ldrh	r2, [r3, #2]
   14e7a:	2350      	movs	r3, #80	; 0x50
   14e7c:	18fb      	adds	r3, r7, r3
   14e7e:	805a      	strh	r2, [r3, #2]
			//int error = WifiAddNauDataToQueue(&nauvar);
		//}
		//
		
		
		if(count!=100)
   14e80:	2377      	movs	r3, #119	; 0x77
   14e82:	18fb      	adds	r3, r7, r3
   14e84:	781b      	ldrb	r3, [r3, #0]
   14e86:	2b64      	cmp	r3, #100	; 0x64
   14e88:	d007      	beq.n	14e9a <vUiHandlerTask+0xc2>
		{
			count = count + 1;
   14e8a:	2377      	movs	r3, #119	; 0x77
   14e8c:	18fb      	adds	r3, r7, r3
   14e8e:	2277      	movs	r2, #119	; 0x77
   14e90:	18ba      	adds	r2, r7, r2
   14e92:	7812      	ldrb	r2, [r2, #0]
   14e94:	3201      	adds	r2, #1
   14e96:	701a      	strb	r2, [r3, #0]
   14e98:	e016      	b.n	14ec8 <vUiHandlerTask+0xf0>
		}
		else
		{
			count = 0;
   14e9a:	2377      	movs	r3, #119	; 0x77
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	2200      	movs	r2, #0
   14ea0:	701a      	strb	r2, [r3, #0]
			//gfx_mono_init();
			sprintf(oled_display, "%d.%d", ADC_Array[0], ADC_Array[1]);
   14ea2:	234c      	movs	r3, #76	; 0x4c
   14ea4:	18fb      	adds	r3, r7, r3
   14ea6:	881b      	ldrh	r3, [r3, #0]
   14ea8:	001a      	movs	r2, r3
   14eaa:	234c      	movs	r3, #76	; 0x4c
   14eac:	18fb      	adds	r3, r7, r3
   14eae:	885b      	ldrh	r3, [r3, #2]
   14eb0:	4915      	ldr	r1, [pc, #84]	; (14f08 <vUiHandlerTask+0x130>)
   14eb2:	2054      	movs	r0, #84	; 0x54
   14eb4:	1838      	adds	r0, r7, r0
   14eb6:	4c15      	ldr	r4, [pc, #84]	; (14f0c <vUiHandlerTask+0x134>)
   14eb8:	47a0      	blx	r4
			gfx_mono_draw_string(oled_display, 0, 8, &sysfont);
   14eba:	4b0a      	ldr	r3, [pc, #40]	; (14ee4 <vUiHandlerTask+0x10c>)
   14ebc:	2254      	movs	r2, #84	; 0x54
   14ebe:	18b8      	adds	r0, r7, r2
   14ec0:	2208      	movs	r2, #8
   14ec2:	2100      	movs	r1, #0
   14ec4:	4c09      	ldr	r4, [pc, #36]	; (14eec <vUiHandlerTask+0x114>)
   14ec6:	47a0      	blx	r4
		}
		
		
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   14ec8:	2032      	movs	r0, #50	; 0x32
   14eca:	4b11      	ldr	r3, [pc, #68]	; (14f10 <vUiHandlerTask+0x138>)
   14ecc:	4798      	blx	r3
    while (1) {
   14ece:	e7b4      	b.n	14e3a <vUiHandlerTask+0x62>
   14ed0:	00022de0 	.word	0x00022de0
   14ed4:	0001b7e1 	.word	0x0001b7e1
   14ed8:	00014d29 	.word	0x00014d29
   14edc:	00014da1 	.word	0x00014da1
   14ee0:	0001287d 	.word	0x0001287d
   14ee4:	20000000 	.word	0x20000000
   14ee8:	00022df4 	.word	0x00022df4
   14eec:	00012721 	.word	0x00012721
   14ef0:	00022dfc 	.word	0x00022dfc
   14ef4:	00014905 	.word	0x00014905
   14ef8:	000149a1 	.word	0x000149a1
   14efc:	000147ed 	.word	0x000147ed
   14f00:	00014a5d 	.word	0x00014a5d
   14f04:	00014a81 	.word	0x00014a81
   14f08:	00022e04 	.word	0x00022e04
   14f0c:	00022091 	.word	0x00022091
   14f10:	00019bd1 	.word	0x00019bd1

00014f14 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   14f14:	b590      	push	{r4, r7, lr}
   14f16:	b083      	sub	sp, #12
   14f18:	af00      	add	r7, sp, #0
   14f1a:	0002      	movs	r2, r0
   14f1c:	1dfb      	adds	r3, r7, #7
   14f1e:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   14f20:	1dfb      	adds	r3, r7, #7
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	2b03      	cmp	r3, #3
   14f26:	d806      	bhi.n	14f36 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   14f28:	4b05      	ldr	r3, [pc, #20]	; (14f40 <WifiHandlerSetState+0x2c>)
   14f2a:	6818      	ldr	r0, [r3, #0]
   14f2c:	1df9      	adds	r1, r7, #7
   14f2e:	2300      	movs	r3, #0
   14f30:	220a      	movs	r2, #10
   14f32:	4c04      	ldr	r4, [pc, #16]	; (14f44 <WifiHandlerSetState+0x30>)
   14f34:	47a0      	blx	r4
    }
}
   14f36:	46c0      	nop			; (mov r8, r8)
   14f38:	46bd      	mov	sp, r7
   14f3a:	b003      	add	sp, #12
   14f3c:	bd90      	pop	{r4, r7, pc}
   14f3e:	46c0      	nop			; (mov r8, r8)
   14f40:	20000528 	.word	0x20000528
   14f44:	0001816d 	.word	0x0001816d

00014f48 <WifiAddTestDataToQueue>:


int WifiAddTestDataToQueue(struct TestPacket *test)
{
   14f48:	b590      	push	{r4, r7, lr}
   14f4a:	b085      	sub	sp, #20
   14f4c:	af00      	add	r7, sp, #0
   14f4e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   14f50:	4b06      	ldr	r3, [pc, #24]	; (14f6c <WifiAddTestDataToQueue+0x24>)
   14f52:	6818      	ldr	r0, [r3, #0]
   14f54:	6879      	ldr	r1, [r7, #4]
   14f56:	2300      	movs	r3, #0
   14f58:	220a      	movs	r2, #10
   14f5a:	4c05      	ldr	r4, [pc, #20]	; (14f70 <WifiAddTestDataToQueue+0x28>)
   14f5c:	47a0      	blx	r4
   14f5e:	0003      	movs	r3, r0
   14f60:	60fb      	str	r3, [r7, #12]
	return error;
   14f62:	68fb      	ldr	r3, [r7, #12]
}
   14f64:	0018      	movs	r0, r3
   14f66:	46bd      	mov	sp, r7
   14f68:	b005      	add	sp, #20
   14f6a:	bd90      	pop	{r4, r7, pc}
   14f6c:	2000052c 	.word	0x2000052c
   14f70:	0001816d 	.word	0x0001816d

00014f74 <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *nau)
{
   14f74:	b590      	push	{r4, r7, lr}
   14f76:	b085      	sub	sp, #20
   14f78:	af00      	add	r7, sp, #0
   14f7a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, nau, (TickType_t)10);
   14f7c:	4b06      	ldr	r3, [pc, #24]	; (14f98 <WifiAddNauDataToQueue+0x24>)
   14f7e:	6818      	ldr	r0, [r3, #0]
   14f80:	6879      	ldr	r1, [r7, #4]
   14f82:	2300      	movs	r3, #0
   14f84:	220a      	movs	r2, #10
   14f86:	4c05      	ldr	r4, [pc, #20]	; (14f9c <WifiAddNauDataToQueue+0x28>)
   14f88:	47a0      	blx	r4
   14f8a:	0003      	movs	r3, r0
   14f8c:	60fb      	str	r3, [r7, #12]
	return error;
   14f8e:	68fb      	ldr	r3, [r7, #12]
   14f90:	0018      	movs	r0, r3
   14f92:	46bd      	mov	sp, r7
   14f94:	b005      	add	sp, #20
   14f96:	bd90      	pop	{r4, r7, pc}
   14f98:	20000530 	.word	0x20000530
   14f9c:	0001816d 	.word	0x0001816d

00014fa0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   14fa0:	b580      	push	{r7, lr}
   14fa2:	b082      	sub	sp, #8
   14fa4:	af00      	add	r7, sp, #0
   14fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   14fa8:	687b      	ldr	r3, [r7, #4]
   14faa:	2200      	movs	r2, #0
   14fac:	701a      	strb	r2, [r3, #0]
}
   14fae:	46c0      	nop			; (mov r8, r8)
   14fb0:	46bd      	mov	sp, r7
   14fb2:	b002      	add	sp, #8
   14fb4:	bd80      	pop	{r7, pc}
	...

00014fb8 <system_apb_clock_set_mask>:
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	b082      	sub	sp, #8
   14fbc:	af00      	add	r7, sp, #0
   14fbe:	0002      	movs	r2, r0
   14fc0:	6039      	str	r1, [r7, #0]
   14fc2:	1dfb      	adds	r3, r7, #7
   14fc4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14fc6:	1dfb      	adds	r3, r7, #7
   14fc8:	781b      	ldrb	r3, [r3, #0]
   14fca:	2b01      	cmp	r3, #1
   14fcc:	d00a      	beq.n	14fe4 <system_apb_clock_set_mask+0x2c>
   14fce:	2b02      	cmp	r3, #2
   14fd0:	d00f      	beq.n	14ff2 <system_apb_clock_set_mask+0x3a>
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d114      	bne.n	15000 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   14fd6:	4b0e      	ldr	r3, [pc, #56]	; (15010 <system_apb_clock_set_mask+0x58>)
   14fd8:	4a0d      	ldr	r2, [pc, #52]	; (15010 <system_apb_clock_set_mask+0x58>)
   14fda:	6991      	ldr	r1, [r2, #24]
   14fdc:	683a      	ldr	r2, [r7, #0]
   14fde:	430a      	orrs	r2, r1
   14fe0:	619a      	str	r2, [r3, #24]
			break;
   14fe2:	e00f      	b.n	15004 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14fe4:	4b0a      	ldr	r3, [pc, #40]	; (15010 <system_apb_clock_set_mask+0x58>)
   14fe6:	4a0a      	ldr	r2, [pc, #40]	; (15010 <system_apb_clock_set_mask+0x58>)
   14fe8:	69d1      	ldr	r1, [r2, #28]
   14fea:	683a      	ldr	r2, [r7, #0]
   14fec:	430a      	orrs	r2, r1
   14fee:	61da      	str	r2, [r3, #28]
			break;
   14ff0:	e008      	b.n	15004 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14ff2:	4b07      	ldr	r3, [pc, #28]	; (15010 <system_apb_clock_set_mask+0x58>)
   14ff4:	4a06      	ldr	r2, [pc, #24]	; (15010 <system_apb_clock_set_mask+0x58>)
   14ff6:	6a11      	ldr	r1, [r2, #32]
   14ff8:	683a      	ldr	r2, [r7, #0]
   14ffa:	430a      	orrs	r2, r1
   14ffc:	621a      	str	r2, [r3, #32]
			break;
   14ffe:	e001      	b.n	15004 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15000:	2317      	movs	r3, #23
   15002:	e000      	b.n	15006 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15004:	2300      	movs	r3, #0
}
   15006:	0018      	movs	r0, r3
   15008:	46bd      	mov	sp, r7
   1500a:	b002      	add	sp, #8
   1500c:	bd80      	pop	{r7, pc}
   1500e:	46c0      	nop			; (mov r8, r8)
   15010:	40000400 	.word	0x40000400

00015014 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   15014:	b580      	push	{r7, lr}
   15016:	b082      	sub	sp, #8
   15018:	af00      	add	r7, sp, #0
   1501a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1501c:	687b      	ldr	r3, [r7, #4]
   1501e:	2280      	movs	r2, #128	; 0x80
   15020:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15022:	687b      	ldr	r3, [r7, #4]
   15024:	2200      	movs	r2, #0
   15026:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15028:	687b      	ldr	r3, [r7, #4]
   1502a:	2201      	movs	r2, #1
   1502c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1502e:	687b      	ldr	r3, [r7, #4]
   15030:	2200      	movs	r2, #0
   15032:	70da      	strb	r2, [r3, #3]
}
   15034:	46c0      	nop			; (mov r8, r8)
   15036:	46bd      	mov	sp, r7
   15038:	b002      	add	sp, #8
   1503a:	bd80      	pop	{r7, pc}

0001503c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1503c:	b580      	push	{r7, lr}
   1503e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   15040:	4b05      	ldr	r3, [pc, #20]	; (15058 <system_is_debugger_present+0x1c>)
   15042:	789b      	ldrb	r3, [r3, #2]
   15044:	b2db      	uxtb	r3, r3
   15046:	001a      	movs	r2, r3
   15048:	2302      	movs	r3, #2
   1504a:	4013      	ands	r3, r2
   1504c:	1e5a      	subs	r2, r3, #1
   1504e:	4193      	sbcs	r3, r2
   15050:	b2db      	uxtb	r3, r3
}
   15052:	0018      	movs	r0, r3
   15054:	46bd      	mov	sp, r7
   15056:	bd80      	pop	{r7, pc}
   15058:	41002000 	.word	0x41002000

0001505c <system_interrupt_enter_critical_section>:
{
   1505c:	b580      	push	{r7, lr}
   1505e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15060:	4b02      	ldr	r3, [pc, #8]	; (1506c <system_interrupt_enter_critical_section+0x10>)
   15062:	4798      	blx	r3
}
   15064:	46c0      	nop			; (mov r8, r8)
   15066:	46bd      	mov	sp, r7
   15068:	bd80      	pop	{r7, pc}
   1506a:	46c0      	nop			; (mov r8, r8)
   1506c:	0001bad9 	.word	0x0001bad9

00015070 <system_interrupt_leave_critical_section>:
{
   15070:	b580      	push	{r7, lr}
   15072:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15074:	4b02      	ldr	r3, [pc, #8]	; (15080 <system_interrupt_leave_critical_section+0x10>)
   15076:	4798      	blx	r3
}
   15078:	46c0      	nop			; (mov r8, r8)
   1507a:	46bd      	mov	sp, r7
   1507c:	bd80      	pop	{r7, pc}
   1507e:	46c0      	nop			; (mov r8, r8)
   15080:	0001bb2d 	.word	0x0001bb2d

00015084 <system_interrupt_disable>:
{
   15084:	b580      	push	{r7, lr}
   15086:	b082      	sub	sp, #8
   15088:	af00      	add	r7, sp, #0
   1508a:	0002      	movs	r2, r0
   1508c:	1dfb      	adds	r3, r7, #7
   1508e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15090:	4a07      	ldr	r2, [pc, #28]	; (150b0 <system_interrupt_disable+0x2c>)
   15092:	1dfb      	adds	r3, r7, #7
   15094:	781b      	ldrb	r3, [r3, #0]
   15096:	0019      	movs	r1, r3
   15098:	231f      	movs	r3, #31
   1509a:	400b      	ands	r3, r1
   1509c:	2101      	movs	r1, #1
   1509e:	4099      	lsls	r1, r3
   150a0:	000b      	movs	r3, r1
   150a2:	0019      	movs	r1, r3
   150a4:	2380      	movs	r3, #128	; 0x80
   150a6:	50d1      	str	r1, [r2, r3]
}
   150a8:	46c0      	nop			; (mov r8, r8)
   150aa:	46bd      	mov	sp, r7
   150ac:	b002      	add	sp, #8
   150ae:	bd80      	pop	{r7, pc}
   150b0:	e000e100 	.word	0xe000e100

000150b4 <i2c_master_is_syncing>:
{
   150b4:	b580      	push	{r7, lr}
   150b6:	b084      	sub	sp, #16
   150b8:	af00      	add	r7, sp, #0
   150ba:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   150bc:	687b      	ldr	r3, [r7, #4]
   150be:	681b      	ldr	r3, [r3, #0]
   150c0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	69db      	ldr	r3, [r3, #28]
   150c6:	2207      	movs	r2, #7
   150c8:	4013      	ands	r3, r2
   150ca:	1e5a      	subs	r2, r3, #1
   150cc:	4193      	sbcs	r3, r2
   150ce:	b2db      	uxtb	r3, r3
}
   150d0:	0018      	movs	r0, r3
   150d2:	46bd      	mov	sp, r7
   150d4:	b004      	add	sp, #16
   150d6:	bd80      	pop	{r7, pc}

000150d8 <_i2c_master_wait_for_sync>:
{
   150d8:	b580      	push	{r7, lr}
   150da:	b082      	sub	sp, #8
   150dc:	af00      	add	r7, sp, #0
   150de:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   150e0:	46c0      	nop			; (mov r8, r8)
   150e2:	687b      	ldr	r3, [r7, #4]
   150e4:	0018      	movs	r0, r3
   150e6:	4b04      	ldr	r3, [pc, #16]	; (150f8 <_i2c_master_wait_for_sync+0x20>)
   150e8:	4798      	blx	r3
   150ea:	1e03      	subs	r3, r0, #0
   150ec:	d1f9      	bne.n	150e2 <_i2c_master_wait_for_sync+0xa>
}
   150ee:	46c0      	nop			; (mov r8, r8)
   150f0:	46bd      	mov	sp, r7
   150f2:	b002      	add	sp, #8
   150f4:	bd80      	pop	{r7, pc}
   150f6:	46c0      	nop			; (mov r8, r8)
   150f8:	000150b5 	.word	0x000150b5

000150fc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   150fc:	b580      	push	{r7, lr}
   150fe:	b084      	sub	sp, #16
   15100:	af00      	add	r7, sp, #0
   15102:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15104:	687b      	ldr	r3, [r7, #4]
   15106:	681b      	ldr	r3, [r3, #0]
   15108:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1510a:	687b      	ldr	r3, [r7, #4]
   1510c:	681b      	ldr	r3, [r3, #0]
   1510e:	0018      	movs	r0, r3
   15110:	4b0d      	ldr	r3, [pc, #52]	; (15148 <i2c_master_disable+0x4c>)
   15112:	4798      	blx	r3
   15114:	0003      	movs	r3, r0
   15116:	0018      	movs	r0, r3
   15118:	4b0c      	ldr	r3, [pc, #48]	; (1514c <i2c_master_disable+0x50>)
   1511a:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	0018      	movs	r0, r3
   15120:	4b0b      	ldr	r3, [pc, #44]	; (15150 <i2c_master_disable+0x54>)
   15122:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   15124:	68fb      	ldr	r3, [r7, #12]
   15126:	2283      	movs	r2, #131	; 0x83
   15128:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1512a:	68fb      	ldr	r3, [r7, #12]
   1512c:	2283      	movs	r2, #131	; 0x83
   1512e:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   15130:	68fb      	ldr	r3, [r7, #12]
   15132:	681b      	ldr	r3, [r3, #0]
   15134:	2202      	movs	r2, #2
   15136:	4393      	bics	r3, r2
   15138:	001a      	movs	r2, r3
   1513a:	68fb      	ldr	r3, [r7, #12]
   1513c:	601a      	str	r2, [r3, #0]

}
   1513e:	46c0      	nop			; (mov r8, r8)
   15140:	46bd      	mov	sp, r7
   15142:	b004      	add	sp, #16
   15144:	bd80      	pop	{r7, pc}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	0001c7b5 	.word	0x0001c7b5
   1514c:	00015085 	.word	0x00015085
   15150:	000150d9 	.word	0x000150d9

00015154 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   15154:	b5f0      	push	{r4, r5, r6, r7, lr}
   15156:	b097      	sub	sp, #92	; 0x5c
   15158:	af00      	add	r7, sp, #0
   1515a:	6178      	str	r0, [r7, #20]
   1515c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1515e:	2300      	movs	r3, #0
   15160:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   15162:	2300      	movs	r3, #0
   15164:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   15166:	2300      	movs	r3, #0
   15168:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1516a:	233b      	movs	r3, #59	; 0x3b
   1516c:	2210      	movs	r2, #16
   1516e:	4694      	mov	ip, r2
   15170:	44bc      	add	ip, r7
   15172:	4463      	add	r3, ip
   15174:	2200      	movs	r2, #0
   15176:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15178:	697b      	ldr	r3, [r7, #20]
   1517a:	681b      	ldr	r3, [r3, #0]
   1517c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1517e:	697b      	ldr	r3, [r7, #20]
   15180:	681b      	ldr	r3, [r3, #0]
   15182:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   15184:	2323      	movs	r3, #35	; 0x23
   15186:	2210      	movs	r2, #16
   15188:	18ba      	adds	r2, r7, r2
   1518a:	18d4      	adds	r4, r2, r3
   1518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1518e:	0018      	movs	r0, r3
   15190:	4bc0      	ldr	r3, [pc, #768]	; (15494 <_i2c_master_set_config+0x340>)
   15192:	4798      	blx	r3
   15194:	0003      	movs	r3, r0
   15196:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   15198:	230c      	movs	r3, #12
   1519a:	2210      	movs	r2, #16
   1519c:	4694      	mov	ip, r2
   1519e:	44bc      	add	ip, r7
   151a0:	4463      	add	r3, ip
   151a2:	0018      	movs	r0, r3
   151a4:	4bbc      	ldr	r3, [pc, #752]	; (15498 <_i2c_master_set_config+0x344>)
   151a6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   151a8:	693b      	ldr	r3, [r7, #16]
   151aa:	69db      	ldr	r3, [r3, #28]
   151ac:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   151ae:	693b      	ldr	r3, [r7, #16]
   151b0:	6a1b      	ldr	r3, [r3, #32]
   151b2:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   151b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   151b6:	2b00      	cmp	r3, #0
   151b8:	d106      	bne.n	151c8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   151ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   151bc:	2100      	movs	r1, #0
   151be:	0018      	movs	r0, r3
   151c0:	4bb6      	ldr	r3, [pc, #728]	; (1549c <_i2c_master_set_config+0x348>)
   151c2:	4798      	blx	r3
   151c4:	0003      	movs	r3, r0
   151c6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   151c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   151ca:	b2da      	uxtb	r2, r3
   151cc:	230c      	movs	r3, #12
   151ce:	2110      	movs	r1, #16
   151d0:	468c      	mov	ip, r1
   151d2:	44bc      	add	ip, r7
   151d4:	4463      	add	r3, ip
   151d6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   151d8:	230c      	movs	r3, #12
   151da:	2210      	movs	r2, #16
   151dc:	4694      	mov	ip, r2
   151de:	44bc      	add	ip, r7
   151e0:	4463      	add	r3, ip
   151e2:	2202      	movs	r2, #2
   151e4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   151e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   151e8:	0c1b      	lsrs	r3, r3, #16
   151ea:	b2db      	uxtb	r3, r3
   151ec:	220c      	movs	r2, #12
   151ee:	2110      	movs	r1, #16
   151f0:	468c      	mov	ip, r1
   151f2:	44bc      	add	ip, r7
   151f4:	4462      	add	r2, ip
   151f6:	0011      	movs	r1, r2
   151f8:	0018      	movs	r0, r3
   151fa:	4ba9      	ldr	r3, [pc, #676]	; (154a0 <_i2c_master_set_config+0x34c>)
   151fc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   151fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15200:	2b00      	cmp	r3, #0
   15202:	d106      	bne.n	15212 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   15204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15206:	2101      	movs	r1, #1
   15208:	0018      	movs	r0, r3
   1520a:	4ba4      	ldr	r3, [pc, #656]	; (1549c <_i2c_master_set_config+0x348>)
   1520c:	4798      	blx	r3
   1520e:	0003      	movs	r3, r0
   15210:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   15212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15214:	b2da      	uxtb	r2, r3
   15216:	230c      	movs	r3, #12
   15218:	2110      	movs	r1, #16
   1521a:	468c      	mov	ip, r1
   1521c:	44bc      	add	ip, r7
   1521e:	4463      	add	r3, ip
   15220:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   15222:	230c      	movs	r3, #12
   15224:	2210      	movs	r2, #16
   15226:	4694      	mov	ip, r2
   15228:	44bc      	add	ip, r7
   1522a:	4463      	add	r3, ip
   1522c:	2202      	movs	r2, #2
   1522e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   15230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15232:	0c1b      	lsrs	r3, r3, #16
   15234:	b2db      	uxtb	r3, r3
   15236:	220c      	movs	r2, #12
   15238:	2110      	movs	r1, #16
   1523a:	468c      	mov	ip, r1
   1523c:	44bc      	add	ip, r7
   1523e:	4462      	add	r2, ip
   15240:	0011      	movs	r1, r2
   15242:	0018      	movs	r0, r3
   15244:	4b96      	ldr	r3, [pc, #600]	; (154a0 <_i2c_master_set_config+0x34c>)
   15246:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   15248:	693b      	ldr	r3, [r7, #16]
   1524a:	8a9a      	ldrh	r2, [r3, #20]
   1524c:	697b      	ldr	r3, [r7, #20]
   1524e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   15250:	693b      	ldr	r3, [r7, #16]
   15252:	8ada      	ldrh	r2, [r3, #22]
   15254:	697b      	ldr	r3, [r7, #20]
   15256:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   15258:	693b      	ldr	r3, [r7, #16]
   1525a:	7e1b      	ldrb	r3, [r3, #24]
   1525c:	2b00      	cmp	r3, #0
   1525e:	d103      	bne.n	15268 <_i2c_master_set_config+0x114>
   15260:	4b90      	ldr	r3, [pc, #576]	; (154a4 <_i2c_master_set_config+0x350>)
   15262:	4798      	blx	r3
   15264:	1e03      	subs	r3, r0, #0
   15266:	d002      	beq.n	1526e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   15268:	2380      	movs	r3, #128	; 0x80
   1526a:	657b      	str	r3, [r7, #84]	; 0x54
   1526c:	e001      	b.n	15272 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1526e:	2300      	movs	r3, #0
   15270:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   15272:	693b      	ldr	r3, [r7, #16]
   15274:	691b      	ldr	r3, [r3, #16]
   15276:	2b00      	cmp	r3, #0
   15278:	d004      	beq.n	15284 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1527a:	693b      	ldr	r3, [r7, #16]
   1527c:	691b      	ldr	r3, [r3, #16]
   1527e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15280:	4313      	orrs	r3, r2
   15282:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   15284:	693b      	ldr	r3, [r7, #16]
   15286:	689b      	ldr	r3, [r3, #8]
   15288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1528a:	4313      	orrs	r3, r2
   1528c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1528e:	693b      	ldr	r3, [r7, #16]
   15290:	2224      	movs	r2, #36	; 0x24
   15292:	5c9b      	ldrb	r3, [r3, r2]
   15294:	2b00      	cmp	r3, #0
   15296:	d004      	beq.n	152a2 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   15298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1529a:	2280      	movs	r2, #128	; 0x80
   1529c:	05d2      	lsls	r2, r2, #23
   1529e:	4313      	orrs	r3, r2
   152a0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   152a2:	693b      	ldr	r3, [r7, #16]
   152a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   152a6:	2b00      	cmp	r3, #0
   152a8:	d004      	beq.n	152b4 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   152aa:	693b      	ldr	r3, [r7, #16]
   152ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   152ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   152b0:	4313      	orrs	r3, r2
   152b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   152b4:	693b      	ldr	r3, [r7, #16]
   152b6:	222c      	movs	r2, #44	; 0x2c
   152b8:	5c9b      	ldrb	r3, [r3, r2]
   152ba:	2b00      	cmp	r3, #0
   152bc:	d105      	bne.n	152ca <_i2c_master_set_config+0x176>
   152be:	693b      	ldr	r3, [r7, #16]
   152c0:	689a      	ldr	r2, [r3, #8]
   152c2:	2380      	movs	r3, #128	; 0x80
   152c4:	049b      	lsls	r3, r3, #18
   152c6:	429a      	cmp	r2, r3
   152c8:	d104      	bne.n	152d4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   152ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   152cc:	2280      	movs	r2, #128	; 0x80
   152ce:	0512      	lsls	r2, r2, #20
   152d0:	4313      	orrs	r3, r2
   152d2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   152d4:	693b      	ldr	r3, [r7, #16]
   152d6:	222d      	movs	r2, #45	; 0x2d
   152d8:	5c9b      	ldrb	r3, [r3, r2]
   152da:	2b00      	cmp	r3, #0
   152dc:	d004      	beq.n	152e8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   152de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   152e0:	2280      	movs	r2, #128	; 0x80
   152e2:	0412      	lsls	r2, r2, #16
   152e4:	4313      	orrs	r3, r2
   152e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   152e8:	693b      	ldr	r3, [r7, #16]
   152ea:	222e      	movs	r2, #46	; 0x2e
   152ec:	5c9b      	ldrb	r3, [r3, r2]
   152ee:	2b00      	cmp	r3, #0
   152f0:	d004      	beq.n	152fc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   152f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   152f4:	2280      	movs	r2, #128	; 0x80
   152f6:	03d2      	lsls	r2, r2, #15
   152f8:	4313      	orrs	r3, r2
   152fa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   152fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   152fe:	681a      	ldr	r2, [r3, #0]
   15300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15302:	431a      	orrs	r2, r3
   15304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15306:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   15308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1530a:	2280      	movs	r2, #128	; 0x80
   1530c:	0052      	lsls	r2, r2, #1
   1530e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   15310:	2323      	movs	r3, #35	; 0x23
   15312:	2210      	movs	r2, #16
   15314:	4694      	mov	ip, r2
   15316:	44bc      	add	ip, r7
   15318:	4463      	add	r3, ip
   1531a:	781b      	ldrb	r3, [r3, #0]
   1531c:	3314      	adds	r3, #20
   1531e:	b2db      	uxtb	r3, r3
   15320:	0018      	movs	r0, r3
   15322:	4b61      	ldr	r3, [pc, #388]	; (154a8 <_i2c_master_set_config+0x354>)
   15324:	4798      	blx	r3
   15326:	0003      	movs	r3, r0
   15328:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1532a:	693b      	ldr	r3, [r7, #16]
   1532c:	681b      	ldr	r3, [r3, #0]
   1532e:	22fa      	movs	r2, #250	; 0xfa
   15330:	0092      	lsls	r2, r2, #2
   15332:	4353      	muls	r3, r2
   15334:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   15336:	693b      	ldr	r3, [r7, #16]
   15338:	685b      	ldr	r3, [r3, #4]
   1533a:	22fa      	movs	r2, #250	; 0xfa
   1533c:	0092      	lsls	r2, r2, #2
   1533e:	4353      	muls	r3, r2
   15340:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   15342:	693b      	ldr	r3, [r7, #16]
   15344:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   15346:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   15348:	4b58      	ldr	r3, [pc, #352]	; (154ac <_i2c_master_set_config+0x358>)
   1534a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1534c:	4798      	blx	r3
   1534e:	0005      	movs	r5, r0
   15350:	000e      	movs	r6, r1
   15352:	4b56      	ldr	r3, [pc, #344]	; (154ac <_i2c_master_set_config+0x358>)
   15354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15356:	4798      	blx	r3
   15358:	60b8      	str	r0, [r7, #8]
   1535a:	60f9      	str	r1, [r7, #12]
   1535c:	4b53      	ldr	r3, [pc, #332]	; (154ac <_i2c_master_set_config+0x358>)
   1535e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15360:	4798      	blx	r3
   15362:	4c53      	ldr	r4, [pc, #332]	; (154b0 <_i2c_master_set_config+0x35c>)
   15364:	4a53      	ldr	r2, [pc, #332]	; (154b4 <_i2c_master_set_config+0x360>)
   15366:	4b54      	ldr	r3, [pc, #336]	; (154b8 <_i2c_master_set_config+0x364>)
   15368:	47a0      	blx	r4
   1536a:	0003      	movs	r3, r0
   1536c:	000c      	movs	r4, r1
   1536e:	603b      	str	r3, [r7, #0]
   15370:	607c      	str	r4, [r7, #4]
   15372:	4b4e      	ldr	r3, [pc, #312]	; (154ac <_i2c_master_set_config+0x358>)
   15374:	6a38      	ldr	r0, [r7, #32]
   15376:	4798      	blx	r3
   15378:	0002      	movs	r2, r0
   1537a:	000b      	movs	r3, r1
   1537c:	4c4c      	ldr	r4, [pc, #304]	; (154b0 <_i2c_master_set_config+0x35c>)
   1537e:	6838      	ldr	r0, [r7, #0]
   15380:	6879      	ldr	r1, [r7, #4]
   15382:	47a0      	blx	r4
   15384:	0003      	movs	r3, r0
   15386:	000c      	movs	r4, r1
   15388:	0018      	movs	r0, r3
   1538a:	0021      	movs	r1, r4
   1538c:	4c4b      	ldr	r4, [pc, #300]	; (154bc <_i2c_master_set_config+0x368>)
   1538e:	2200      	movs	r2, #0
   15390:	4b4b      	ldr	r3, [pc, #300]	; (154c0 <_i2c_master_set_config+0x36c>)
   15392:	47a0      	blx	r4
   15394:	0003      	movs	r3, r0
   15396:	000c      	movs	r4, r1
   15398:	001a      	movs	r2, r3
   1539a:	0023      	movs	r3, r4
   1539c:	4c44      	ldr	r4, [pc, #272]	; (154b0 <_i2c_master_set_config+0x35c>)
   1539e:	68b8      	ldr	r0, [r7, #8]
   153a0:	68f9      	ldr	r1, [r7, #12]
   153a2:	47a0      	blx	r4
   153a4:	0003      	movs	r3, r0
   153a6:	000c      	movs	r4, r1
   153a8:	001a      	movs	r2, r3
   153aa:	0023      	movs	r3, r4
   153ac:	4c45      	ldr	r4, [pc, #276]	; (154c4 <_i2c_master_set_config+0x370>)
   153ae:	0028      	movs	r0, r5
   153b0:	0031      	movs	r1, r6
   153b2:	47a0      	blx	r4
   153b4:	0003      	movs	r3, r0
   153b6:	000c      	movs	r4, r1
   153b8:	001d      	movs	r5, r3
   153ba:	0026      	movs	r6, r4
   153bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153be:	005a      	lsls	r2, r3, #1
   153c0:	4b3a      	ldr	r3, [pc, #232]	; (154ac <_i2c_master_set_config+0x358>)
   153c2:	0010      	movs	r0, r2
   153c4:	4798      	blx	r3
   153c6:	0002      	movs	r2, r0
   153c8:	000b      	movs	r3, r1
   153ca:	4c3c      	ldr	r4, [pc, #240]	; (154bc <_i2c_master_set_config+0x368>)
   153cc:	0028      	movs	r0, r5
   153ce:	0031      	movs	r1, r6
   153d0:	47a0      	blx	r4
   153d2:	0003      	movs	r3, r0
   153d4:	000c      	movs	r4, r1
   153d6:	0018      	movs	r0, r3
   153d8:	0021      	movs	r1, r4
   153da:	4c3a      	ldr	r4, [pc, #232]	; (154c4 <_i2c_master_set_config+0x370>)
   153dc:	2200      	movs	r2, #0
   153de:	4b3a      	ldr	r3, [pc, #232]	; (154c8 <_i2c_master_set_config+0x374>)
   153e0:	47a0      	blx	r4
   153e2:	0003      	movs	r3, r0
   153e4:	000c      	movs	r4, r1
   153e6:	001d      	movs	r5, r3
   153e8:	0026      	movs	r6, r4
   153ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153ec:	005a      	lsls	r2, r3, #1
   153ee:	4b2f      	ldr	r3, [pc, #188]	; (154ac <_i2c_master_set_config+0x358>)
   153f0:	0010      	movs	r0, r2
   153f2:	4798      	blx	r3
   153f4:	0002      	movs	r2, r0
   153f6:	000b      	movs	r3, r1
   153f8:	4c34      	ldr	r4, [pc, #208]	; (154cc <_i2c_master_set_config+0x378>)
   153fa:	0028      	movs	r0, r5
   153fc:	0031      	movs	r1, r6
   153fe:	47a0      	blx	r4
   15400:	0003      	movs	r3, r0
   15402:	000c      	movs	r4, r1
   15404:	0019      	movs	r1, r3
   15406:	0022      	movs	r2, r4
   15408:	4b31      	ldr	r3, [pc, #196]	; (154d0 <_i2c_master_set_config+0x37c>)
   1540a:	0008      	movs	r0, r1
   1540c:	0011      	movs	r1, r2
   1540e:	4798      	blx	r3
   15410:	0003      	movs	r3, r0
   15412:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   15414:	693b      	ldr	r3, [r7, #16]
   15416:	689a      	ldr	r2, [r3, #8]
   15418:	2380      	movs	r3, #128	; 0x80
   1541a:	049b      	lsls	r3, r3, #18
   1541c:	429a      	cmp	r2, r3
   1541e:	d16a      	bne.n	154f6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   15420:	4b22      	ldr	r3, [pc, #136]	; (154ac <_i2c_master_set_config+0x358>)
   15422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15424:	4798      	blx	r3
   15426:	4c25      	ldr	r4, [pc, #148]	; (154bc <_i2c_master_set_config+0x368>)
   15428:	0002      	movs	r2, r0
   1542a:	000b      	movs	r3, r1
   1542c:	47a0      	blx	r4
   1542e:	0003      	movs	r3, r0
   15430:	000c      	movs	r4, r1
   15432:	001d      	movs	r5, r3
   15434:	0026      	movs	r6, r4
   15436:	4b1d      	ldr	r3, [pc, #116]	; (154ac <_i2c_master_set_config+0x358>)
   15438:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1543a:	4798      	blx	r3
   1543c:	4c1c      	ldr	r4, [pc, #112]	; (154b0 <_i2c_master_set_config+0x35c>)
   1543e:	2200      	movs	r2, #0
   15440:	4b24      	ldr	r3, [pc, #144]	; (154d4 <_i2c_master_set_config+0x380>)
   15442:	47a0      	blx	r4
   15444:	0003      	movs	r3, r0
   15446:	000c      	movs	r4, r1
   15448:	001a      	movs	r2, r3
   1544a:	0023      	movs	r3, r4
   1544c:	4c1f      	ldr	r4, [pc, #124]	; (154cc <_i2c_master_set_config+0x378>)
   1544e:	0028      	movs	r0, r5
   15450:	0031      	movs	r1, r6
   15452:	47a0      	blx	r4
   15454:	0003      	movs	r3, r0
   15456:	000c      	movs	r4, r1
   15458:	0018      	movs	r0, r3
   1545a:	0021      	movs	r1, r4
   1545c:	4c19      	ldr	r4, [pc, #100]	; (154c4 <_i2c_master_set_config+0x370>)
   1545e:	2200      	movs	r2, #0
   15460:	4b19      	ldr	r3, [pc, #100]	; (154c8 <_i2c_master_set_config+0x374>)
   15462:	47a0      	blx	r4
   15464:	0003      	movs	r3, r0
   15466:	000c      	movs	r4, r1
   15468:	0019      	movs	r1, r3
   1546a:	0022      	movs	r2, r4
   1546c:	4b18      	ldr	r3, [pc, #96]	; (154d0 <_i2c_master_set_config+0x37c>)
   1546e:	0008      	movs	r0, r1
   15470:	0011      	movs	r1, r2
   15472:	4798      	blx	r3
   15474:	0003      	movs	r3, r0
   15476:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   15478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1547a:	2b00      	cmp	r3, #0
   1547c:	d02e      	beq.n	154dc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1547e:	4b16      	ldr	r3, [pc, #88]	; (154d8 <_i2c_master_set_config+0x384>)
   15480:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15484:	4798      	blx	r3
   15486:	0003      	movs	r3, r0
   15488:	1e9a      	subs	r2, r3, #2
   1548a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1548c:	1ad3      	subs	r3, r2, r3
   1548e:	653b      	str	r3, [r7, #80]	; 0x50
   15490:	e031      	b.n	154f6 <_i2c_master_set_config+0x3a2>
   15492:	46c0      	nop			; (mov r8, r8)
   15494:	0001c6e5 	.word	0x0001c6e5
   15498:	00015015 	.word	0x00015015
   1549c:	0001c529 	.word	0x0001c529
   154a0:	0001e321 	.word	0x0001e321
   154a4:	0001503d 	.word	0x0001503d
   154a8:	0001e0e5 	.word	0x0001e0e5
   154ac:	00021ba5 	.word	0x00021ba5
   154b0:	00021011 	.word	0x00021011
   154b4:	e826d695 	.word	0xe826d695
   154b8:	3e112e0b 	.word	0x3e112e0b
   154bc:	00020389 	.word	0x00020389
   154c0:	40240000 	.word	0x40240000
   154c4:	00021511 	.word	0x00021511
   154c8:	3ff00000 	.word	0x3ff00000
   154cc:	000209a9 	.word	0x000209a9
   154d0:	00021b3d 	.word	0x00021b3d
   154d4:	40080000 	.word	0x40080000
   154d8:	0001f40d 	.word	0x0001f40d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   154dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   154de:	005a      	lsls	r2, r3, #1
   154e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   154e2:	18d3      	adds	r3, r2, r3
   154e4:	1e5a      	subs	r2, r3, #1
   154e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   154e8:	0059      	lsls	r1, r3, #1
   154ea:	4b1d      	ldr	r3, [pc, #116]	; (15560 <_i2c_master_set_config+0x40c>)
   154ec:	0010      	movs	r0, r2
   154ee:	4798      	blx	r3
   154f0:	0003      	movs	r3, r0
   154f2:	3b01      	subs	r3, #1
   154f4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   154f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   154f8:	2bff      	cmp	r3, #255	; 0xff
   154fa:	dc08      	bgt.n	1550e <_i2c_master_set_config+0x3ba>
   154fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   154fe:	2b00      	cmp	r3, #0
   15500:	db05      	blt.n	1550e <_i2c_master_set_config+0x3ba>
   15502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15504:	2bff      	cmp	r3, #255	; 0xff
   15506:	dc02      	bgt.n	1550e <_i2c_master_set_config+0x3ba>
   15508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1550a:	2b00      	cmp	r3, #0
   1550c:	da06      	bge.n	1551c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1550e:	233b      	movs	r3, #59	; 0x3b
   15510:	2210      	movs	r2, #16
   15512:	4694      	mov	ip, r2
   15514:	44bc      	add	ip, r7
   15516:	4463      	add	r3, ip
   15518:	2240      	movs	r2, #64	; 0x40
   1551a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   1551c:	233b      	movs	r3, #59	; 0x3b
   1551e:	2210      	movs	r2, #16
   15520:	4694      	mov	ip, r2
   15522:	44bc      	add	ip, r7
   15524:	4463      	add	r3, ip
   15526:	781b      	ldrb	r3, [r3, #0]
   15528:	2b40      	cmp	r3, #64	; 0x40
   1552a:	d00e      	beq.n	1554a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1552e:	22ff      	movs	r2, #255	; 0xff
   15530:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   15532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15534:	041b      	lsls	r3, r3, #16
   15536:	0019      	movs	r1, r3
   15538:	23ff      	movs	r3, #255	; 0xff
   1553a:	041b      	lsls	r3, r3, #16
   1553c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1553e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   15540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   15542:	0612      	lsls	r2, r2, #24
   15544:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   15546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15548:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1554a:	233b      	movs	r3, #59	; 0x3b
   1554c:	2210      	movs	r2, #16
   1554e:	4694      	mov	ip, r2
   15550:	44bc      	add	ip, r7
   15552:	4463      	add	r3, ip
   15554:	781b      	ldrb	r3, [r3, #0]
}
   15556:	0018      	movs	r0, r3
   15558:	46bd      	mov	sp, r7
   1555a:	b017      	add	sp, #92	; 0x5c
   1555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1555e:	46c0      	nop			; (mov r8, r8)
   15560:	0001f40d 	.word	0x0001f40d

00015564 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   15564:	b590      	push	{r4, r7, lr}
   15566:	b08b      	sub	sp, #44	; 0x2c
   15568:	af00      	add	r7, sp, #0
   1556a:	60f8      	str	r0, [r7, #12]
   1556c:	60b9      	str	r1, [r7, #8]
   1556e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   15570:	68fb      	ldr	r3, [r7, #12]
   15572:	68ba      	ldr	r2, [r7, #8]
   15574:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15576:	68fb      	ldr	r3, [r7, #12]
   15578:	681b      	ldr	r3, [r3, #0]
   1557a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1557c:	68fb      	ldr	r3, [r7, #12]
   1557e:	681b      	ldr	r3, [r3, #0]
   15580:	0018      	movs	r0, r3
   15582:	4b3b      	ldr	r3, [pc, #236]	; (15670 <i2c_master_init+0x10c>)
   15584:	4798      	blx	r3
   15586:	0003      	movs	r3, r0
   15588:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1558a:	6a3b      	ldr	r3, [r7, #32]
   1558c:	3302      	adds	r3, #2
   1558e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15590:	6a3b      	ldr	r3, [r7, #32]
   15592:	3314      	adds	r3, #20
   15594:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   15596:	2201      	movs	r2, #1
   15598:	69fb      	ldr	r3, [r7, #28]
   1559a:	409a      	lsls	r2, r3
   1559c:	0013      	movs	r3, r2
   1559e:	0019      	movs	r1, r3
   155a0:	2002      	movs	r0, #2
   155a2:	4b34      	ldr	r3, [pc, #208]	; (15674 <i2c_master_init+0x110>)
   155a4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   155a6:	2314      	movs	r3, #20
   155a8:	18fb      	adds	r3, r7, r3
   155aa:	0018      	movs	r0, r3
   155ac:	4b32      	ldr	r3, [pc, #200]	; (15678 <i2c_master_init+0x114>)
   155ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   155b0:	687b      	ldr	r3, [r7, #4]
   155b2:	7b1a      	ldrb	r2, [r3, #12]
   155b4:	2314      	movs	r3, #20
   155b6:	18fb      	adds	r3, r7, r3
   155b8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   155ba:	69bb      	ldr	r3, [r7, #24]
   155bc:	b2db      	uxtb	r3, r3
   155be:	2214      	movs	r2, #20
   155c0:	18ba      	adds	r2, r7, r2
   155c2:	0011      	movs	r1, r2
   155c4:	0018      	movs	r0, r3
   155c6:	4b2d      	ldr	r3, [pc, #180]	; (1567c <i2c_master_init+0x118>)
   155c8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   155ca:	69bb      	ldr	r3, [r7, #24]
   155cc:	b2db      	uxtb	r3, r3
   155ce:	0018      	movs	r0, r3
   155d0:	4b2b      	ldr	r3, [pc, #172]	; (15680 <i2c_master_init+0x11c>)
   155d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	7b1b      	ldrb	r3, [r3, #12]
   155d8:	2100      	movs	r1, #0
   155da:	0018      	movs	r0, r3
   155dc:	4b29      	ldr	r3, [pc, #164]	; (15684 <i2c_master_init+0x120>)
   155de:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   155e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155e2:	681b      	ldr	r3, [r3, #0]
   155e4:	2202      	movs	r2, #2
   155e6:	4013      	ands	r3, r2
   155e8:	d001      	beq.n	155ee <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   155ea:	231c      	movs	r3, #28
   155ec:	e03b      	b.n	15666 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   155ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155f0:	681b      	ldr	r3, [r3, #0]
   155f2:	2201      	movs	r2, #1
   155f4:	4013      	ands	r3, r2
   155f6:	d001      	beq.n	155fc <i2c_master_init+0x98>
		return STATUS_BUSY;
   155f8:	2305      	movs	r3, #5
   155fa:	e034      	b.n	15666 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   155fc:	68fb      	ldr	r3, [r7, #12]
   155fe:	681b      	ldr	r3, [r3, #0]
   15600:	2217      	movs	r2, #23
   15602:	18bc      	adds	r4, r7, r2
   15604:	0018      	movs	r0, r3
   15606:	4b1a      	ldr	r3, [pc, #104]	; (15670 <i2c_master_init+0x10c>)
   15608:	4798      	blx	r3
   1560a:	0003      	movs	r3, r0
   1560c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1560e:	4a1e      	ldr	r2, [pc, #120]	; (15688 <i2c_master_init+0x124>)
   15610:	2317      	movs	r3, #23
   15612:	18fb      	adds	r3, r7, r3
   15614:	781b      	ldrb	r3, [r3, #0]
   15616:	0011      	movs	r1, r2
   15618:	0018      	movs	r0, r3
   1561a:	4b1c      	ldr	r3, [pc, #112]	; (1568c <i2c_master_init+0x128>)
   1561c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1561e:	2317      	movs	r3, #23
   15620:	18fb      	adds	r3, r7, r3
   15622:	781a      	ldrb	r2, [r3, #0]
   15624:	4b1a      	ldr	r3, [pc, #104]	; (15690 <i2c_master_init+0x12c>)
   15626:	0092      	lsls	r2, r2, #2
   15628:	68f9      	ldr	r1, [r7, #12]
   1562a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1562c:	68fb      	ldr	r3, [r7, #12]
   1562e:	2200      	movs	r2, #0
   15630:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   15632:	68fb      	ldr	r3, [r7, #12]
   15634:	2200      	movs	r2, #0
   15636:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   15638:	68fb      	ldr	r3, [r7, #12]
   1563a:	2200      	movs	r2, #0
   1563c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	2200      	movs	r2, #0
   15642:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   15644:	68fb      	ldr	r3, [r7, #12]
   15646:	2225      	movs	r2, #37	; 0x25
   15648:	2100      	movs	r1, #0
   1564a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1564c:	68fb      	ldr	r3, [r7, #12]
   1564e:	2200      	movs	r2, #0
   15650:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   15652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15654:	2214      	movs	r2, #20
   15656:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   15658:	687a      	ldr	r2, [r7, #4]
   1565a:	68fb      	ldr	r3, [r7, #12]
   1565c:	0011      	movs	r1, r2
   1565e:	0018      	movs	r0, r3
   15660:	4b0c      	ldr	r3, [pc, #48]	; (15694 <i2c_master_init+0x130>)
   15662:	4798      	blx	r3
   15664:	0003      	movs	r3, r0
}
   15666:	0018      	movs	r0, r3
   15668:	46bd      	mov	sp, r7
   1566a:	b00b      	add	sp, #44	; 0x2c
   1566c:	bd90      	pop	{r4, r7, pc}
   1566e:	46c0      	nop			; (mov r8, r8)
   15670:	0001c6e5 	.word	0x0001c6e5
   15674:	00014fb9 	.word	0x00014fb9
   15678:	00014fa1 	.word	0x00014fa1
   1567c:	0001dfc1 	.word	0x0001dfc1
   15680:	0001e005 	.word	0x0001e005
   15684:	0001c49d 	.word	0x0001c49d
   15688:	00013575 	.word	0x00013575
   1568c:	0001c749 	.word	0x0001c749
   15690:	20004d40 	.word	0x20004d40
   15694:	00015155 	.word	0x00015155

00015698 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   15698:	b580      	push	{r7, lr}
   1569a:	b084      	sub	sp, #16
   1569c:	af00      	add	r7, sp, #0
   1569e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   156a0:	687b      	ldr	r3, [r7, #4]
   156a2:	681b      	ldr	r3, [r3, #0]
   156a4:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   156a6:	687b      	ldr	r3, [r7, #4]
   156a8:	0018      	movs	r0, r3
   156aa:	4b0f      	ldr	r3, [pc, #60]	; (156e8 <i2c_master_reset+0x50>)
   156ac:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   156ae:	687b      	ldr	r3, [r7, #4]
   156b0:	0018      	movs	r0, r3
   156b2:	4b0e      	ldr	r3, [pc, #56]	; (156ec <i2c_master_reset+0x54>)
   156b4:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   156b6:	4b0e      	ldr	r3, [pc, #56]	; (156f0 <i2c_master_reset+0x58>)
   156b8:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   156ba:	687b      	ldr	r3, [r7, #4]
   156bc:	681b      	ldr	r3, [r3, #0]
   156be:	0018      	movs	r0, r3
   156c0:	4b0c      	ldr	r3, [pc, #48]	; (156f4 <i2c_master_reset+0x5c>)
   156c2:	4798      	blx	r3
   156c4:	0003      	movs	r3, r0
   156c6:	0018      	movs	r0, r3
   156c8:	4b0b      	ldr	r3, [pc, #44]	; (156f8 <i2c_master_reset+0x60>)
   156ca:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   156cc:	4b0b      	ldr	r3, [pc, #44]	; (156fc <i2c_master_reset+0x64>)
   156ce:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   156d0:	687b      	ldr	r3, [r7, #4]
   156d2:	0018      	movs	r0, r3
   156d4:	4b04      	ldr	r3, [pc, #16]	; (156e8 <i2c_master_reset+0x50>)
   156d6:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   156d8:	68fb      	ldr	r3, [r7, #12]
   156da:	2201      	movs	r2, #1
   156dc:	601a      	str	r2, [r3, #0]
}
   156de:	46c0      	nop			; (mov r8, r8)
   156e0:	46bd      	mov	sp, r7
   156e2:	b004      	add	sp, #16
   156e4:	bd80      	pop	{r7, pc}
   156e6:	46c0      	nop			; (mov r8, r8)
   156e8:	000150d9 	.word	0x000150d9
   156ec:	000150fd 	.word	0x000150fd
   156f0:	0001505d 	.word	0x0001505d
   156f4:	0001c7b5 	.word	0x0001c7b5
   156f8:	0001e13d 	.word	0x0001e13d
   156fc:	00015071 	.word	0x00015071

00015700 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   15700:	b580      	push	{r7, lr}
   15702:	b084      	sub	sp, #16
   15704:	af00      	add	r7, sp, #0
   15706:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15708:	687b      	ldr	r3, [r7, #4]
   1570a:	681b      	ldr	r3, [r3, #0]
   1570c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1570e:	68fb      	ldr	r3, [r7, #12]
   15710:	7e1b      	ldrb	r3, [r3, #24]
   15712:	b2db      	uxtb	r3, r3
   15714:	001a      	movs	r2, r3
   15716:	2302      	movs	r3, #2
   15718:	4013      	ands	r3, r2
   1571a:	d00b      	beq.n	15734 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1571c:	68fb      	ldr	r3, [r7, #12]
   1571e:	2202      	movs	r2, #2
   15720:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   15722:	68fb      	ldr	r3, [r7, #12]
   15724:	8b5b      	ldrh	r3, [r3, #26]
   15726:	b29b      	uxth	r3, r3
   15728:	001a      	movs	r2, r3
   1572a:	2302      	movs	r3, #2
   1572c:	4013      	ands	r3, r2
   1572e:	d011      	beq.n	15754 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   15730:	2341      	movs	r3, #65	; 0x41
   15732:	e010      	b.n	15756 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   15734:	68fb      	ldr	r3, [r7, #12]
   15736:	8b5b      	ldrh	r3, [r3, #26]
   15738:	b29b      	uxth	r3, r3
   1573a:	001a      	movs	r2, r3
   1573c:	2304      	movs	r3, #4
   1573e:	4013      	ands	r3, r2
   15740:	d008      	beq.n	15754 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   15742:	68fb      	ldr	r3, [r7, #12]
   15744:	685b      	ldr	r3, [r3, #4]
   15746:	22c0      	movs	r2, #192	; 0xc0
   15748:	0292      	lsls	r2, r2, #10
   1574a:	431a      	orrs	r2, r3
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   15750:	2318      	movs	r3, #24
   15752:	e000      	b.n	15756 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   15754:	2300      	movs	r3, #0
}
   15756:	0018      	movs	r0, r3
   15758:	46bd      	mov	sp, r7
   1575a:	b004      	add	sp, #16
   1575c:	bd80      	pop	{r7, pc}

0001575e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1575e:	b580      	push	{r7, lr}
   15760:	b084      	sub	sp, #16
   15762:	af00      	add	r7, sp, #0
   15764:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15766:	687b      	ldr	r3, [r7, #4]
   15768:	681b      	ldr	r3, [r3, #0]
   1576a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1576c:	230e      	movs	r3, #14
   1576e:	18fb      	adds	r3, r7, r3
   15770:	2200      	movs	r2, #0
   15772:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   15774:	e00f      	b.n	15796 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   15776:	230e      	movs	r3, #14
   15778:	18fb      	adds	r3, r7, r3
   1577a:	220e      	movs	r2, #14
   1577c:	18ba      	adds	r2, r7, r2
   1577e:	8812      	ldrh	r2, [r2, #0]
   15780:	3201      	adds	r2, #1
   15782:	801a      	strh	r2, [r3, #0]
   15784:	687b      	ldr	r3, [r7, #4]
   15786:	891b      	ldrh	r3, [r3, #8]
   15788:	220e      	movs	r2, #14
   1578a:	18ba      	adds	r2, r7, r2
   1578c:	8812      	ldrh	r2, [r2, #0]
   1578e:	429a      	cmp	r2, r3
   15790:	d301      	bcc.n	15796 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   15792:	2312      	movs	r3, #18
   15794:	e00e      	b.n	157b4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   15796:	68bb      	ldr	r3, [r7, #8]
   15798:	7e1b      	ldrb	r3, [r3, #24]
   1579a:	b2db      	uxtb	r3, r3
   1579c:	001a      	movs	r2, r3
   1579e:	2301      	movs	r3, #1
   157a0:	4013      	ands	r3, r2
   157a2:	d106      	bne.n	157b2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   157a4:	68bb      	ldr	r3, [r7, #8]
   157a6:	7e1b      	ldrb	r3, [r3, #24]
   157a8:	b2db      	uxtb	r3, r3
   157aa:	001a      	movs	r2, r3
   157ac:	2302      	movs	r3, #2
   157ae:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   157b0:	d0e1      	beq.n	15776 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   157b2:	2300      	movs	r3, #0
}
   157b4:	0018      	movs	r0, r3
   157b6:	46bd      	mov	sp, r7
   157b8:	b004      	add	sp, #16
   157ba:	bd80      	pop	{r7, pc}

000157bc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   157bc:	b590      	push	{r4, r7, lr}
   157be:	b085      	sub	sp, #20
   157c0:	af00      	add	r7, sp, #0
   157c2:	6078      	str	r0, [r7, #4]
   157c4:	000a      	movs	r2, r1
   157c6:	1cfb      	adds	r3, r7, #3
   157c8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   157ca:	687b      	ldr	r3, [r7, #4]
   157cc:	681b      	ldr	r3, [r3, #0]
   157ce:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   157d0:	68fb      	ldr	r3, [r7, #12]
   157d2:	685b      	ldr	r3, [r3, #4]
   157d4:	2280      	movs	r2, #128	; 0x80
   157d6:	02d2      	lsls	r2, r2, #11
   157d8:	431a      	orrs	r2, r3
   157da:	68fb      	ldr	r3, [r7, #12]
   157dc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   157de:	1cfb      	adds	r3, r7, #3
   157e0:	781a      	ldrb	r2, [r3, #0]
   157e2:	68fb      	ldr	r3, [r7, #12]
   157e4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   157e6:	230b      	movs	r3, #11
   157e8:	18fc      	adds	r4, r7, r3
   157ea:	687b      	ldr	r3, [r7, #4]
   157ec:	0018      	movs	r0, r3
   157ee:	4b07      	ldr	r3, [pc, #28]	; (1580c <_i2c_master_send_hs_master_code+0x50>)
   157f0:	4798      	blx	r3
   157f2:	0003      	movs	r3, r0
   157f4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   157f6:	68fb      	ldr	r3, [r7, #12]
   157f8:	2201      	movs	r2, #1
   157fa:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   157fc:	230b      	movs	r3, #11
   157fe:	18fb      	adds	r3, r7, r3
   15800:	781b      	ldrb	r3, [r3, #0]
}
   15802:	0018      	movs	r0, r3
   15804:	46bd      	mov	sp, r7
   15806:	b005      	add	sp, #20
   15808:	bd90      	pop	{r4, r7, pc}
   1580a:	46c0      	nop			; (mov r8, r8)
   1580c:	0001575f 	.word	0x0001575f

00015810 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   15810:	b580      	push	{r7, lr}
   15812:	af00      	add	r7, sp, #0
   15814:	2000      	movs	r0, #0
   15816:	4b02      	ldr	r3, [pc, #8]	; (15820 <TC3_Handler+0x10>)
   15818:	4798      	blx	r3
   1581a:	46c0      	nop			; (mov r8, r8)
   1581c:	46bd      	mov	sp, r7
   1581e:	bd80      	pop	{r7, pc}
   15820:	0001584d 	.word	0x0001584d

00015824 <TC4_Handler>:
   15824:	b580      	push	{r7, lr}
   15826:	af00      	add	r7, sp, #0
   15828:	2001      	movs	r0, #1
   1582a:	4b02      	ldr	r3, [pc, #8]	; (15834 <TC4_Handler+0x10>)
   1582c:	4798      	blx	r3
   1582e:	46c0      	nop			; (mov r8, r8)
   15830:	46bd      	mov	sp, r7
   15832:	bd80      	pop	{r7, pc}
   15834:	0001584d 	.word	0x0001584d

00015838 <TC5_Handler>:
   15838:	b580      	push	{r7, lr}
   1583a:	af00      	add	r7, sp, #0
   1583c:	2002      	movs	r0, #2
   1583e:	4b02      	ldr	r3, [pc, #8]	; (15848 <TC5_Handler+0x10>)
   15840:	4798      	blx	r3
   15842:	46c0      	nop			; (mov r8, r8)
   15844:	46bd      	mov	sp, r7
   15846:	bd80      	pop	{r7, pc}
   15848:	0001584d 	.word	0x0001584d

0001584c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1584c:	b580      	push	{r7, lr}
   1584e:	b084      	sub	sp, #16
   15850:	af00      	add	r7, sp, #0
   15852:	0002      	movs	r2, r0
   15854:	1dfb      	adds	r3, r7, #7
   15856:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   15858:	1dfb      	adds	r3, r7, #7
   1585a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1585c:	4b28      	ldr	r3, [pc, #160]	; (15900 <_tc_interrupt_handler+0xb4>)
   1585e:	0092      	lsls	r2, r2, #2
   15860:	58d3      	ldr	r3, [r2, r3]
   15862:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15864:	68fb      	ldr	r3, [r7, #12]
   15866:	681b      	ldr	r3, [r3, #0]
   15868:	7b9b      	ldrb	r3, [r3, #14]
   1586a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1586c:	68fa      	ldr	r2, [r7, #12]
   1586e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15870:	4013      	ands	r3, r2
   15872:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   15874:	68fb      	ldr	r3, [r7, #12]
   15876:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   15878:	230b      	movs	r3, #11
   1587a:	18fb      	adds	r3, r7, r3
   1587c:	400a      	ands	r2, r1
   1587e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   15880:	230b      	movs	r3, #11
   15882:	18fb      	adds	r3, r7, r3
   15884:	781b      	ldrb	r3, [r3, #0]
   15886:	2201      	movs	r2, #1
   15888:	4013      	ands	r3, r2
   1588a:	d008      	beq.n	1589e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1588c:	68fb      	ldr	r3, [r7, #12]
   1588e:	689b      	ldr	r3, [r3, #8]
   15890:	68fa      	ldr	r2, [r7, #12]
   15892:	0010      	movs	r0, r2
   15894:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   15896:	68fb      	ldr	r3, [r7, #12]
   15898:	681b      	ldr	r3, [r3, #0]
   1589a:	2201      	movs	r2, #1
   1589c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1589e:	230b      	movs	r3, #11
   158a0:	18fb      	adds	r3, r7, r3
   158a2:	781b      	ldrb	r3, [r3, #0]
   158a4:	2202      	movs	r2, #2
   158a6:	4013      	ands	r3, r2
   158a8:	d008      	beq.n	158bc <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   158aa:	68fb      	ldr	r3, [r7, #12]
   158ac:	68db      	ldr	r3, [r3, #12]
   158ae:	68fa      	ldr	r2, [r7, #12]
   158b0:	0010      	movs	r0, r2
   158b2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   158b4:	68fb      	ldr	r3, [r7, #12]
   158b6:	681b      	ldr	r3, [r3, #0]
   158b8:	2202      	movs	r2, #2
   158ba:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   158bc:	230b      	movs	r3, #11
   158be:	18fb      	adds	r3, r7, r3
   158c0:	781b      	ldrb	r3, [r3, #0]
   158c2:	2210      	movs	r2, #16
   158c4:	4013      	ands	r3, r2
   158c6:	d008      	beq.n	158da <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   158c8:	68fb      	ldr	r3, [r7, #12]
   158ca:	691b      	ldr	r3, [r3, #16]
   158cc:	68fa      	ldr	r2, [r7, #12]
   158ce:	0010      	movs	r0, r2
   158d0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   158d2:	68fb      	ldr	r3, [r7, #12]
   158d4:	681b      	ldr	r3, [r3, #0]
   158d6:	2210      	movs	r2, #16
   158d8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   158da:	230b      	movs	r3, #11
   158dc:	18fb      	adds	r3, r7, r3
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	2220      	movs	r2, #32
   158e2:	4013      	ands	r3, r2
   158e4:	d008      	beq.n	158f8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   158e6:	68fb      	ldr	r3, [r7, #12]
   158e8:	695b      	ldr	r3, [r3, #20]
   158ea:	68fa      	ldr	r2, [r7, #12]
   158ec:	0010      	movs	r0, r2
   158ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   158f0:	68fb      	ldr	r3, [r7, #12]
   158f2:	681b      	ldr	r3, [r3, #0]
   158f4:	2220      	movs	r2, #32
   158f6:	739a      	strb	r2, [r3, #14]
	}
}
   158f8:	46c0      	nop			; (mov r8, r8)
   158fa:	46bd      	mov	sp, r7
   158fc:	b004      	add	sp, #16
   158fe:	bd80      	pop	{r7, pc}
   15900:	20003c54 	.word	0x20003c54

00015904 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   15904:	b580      	push	{r7, lr}
   15906:	b084      	sub	sp, #16
   15908:	af00      	add	r7, sp, #0
   1590a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1590c:	2300      	movs	r3, #0
   1590e:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   15910:	687b      	ldr	r3, [r7, #4]
   15912:	2b00      	cmp	r3, #0
   15914:	d101      	bne.n	1591a <FreeRTOS_CLIRegisterCommand+0x16>
   15916:	b672      	cpsid	i
   15918:	e7fe      	b.n	15918 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1591a:	2008      	movs	r0, #8
   1591c:	4b11      	ldr	r3, [pc, #68]	; (15964 <FreeRTOS_CLIRegisterCommand+0x60>)
   1591e:	4798      	blx	r3
   15920:	0003      	movs	r3, r0
   15922:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   15924:	68bb      	ldr	r3, [r7, #8]
   15926:	2b00      	cmp	r3, #0
   15928:	d101      	bne.n	1592e <FreeRTOS_CLIRegisterCommand+0x2a>
   1592a:	b672      	cpsid	i
   1592c:	e7fe      	b.n	1592c <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1592e:	68bb      	ldr	r3, [r7, #8]
   15930:	2b00      	cmp	r3, #0
   15932:	d012      	beq.n	1595a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   15934:	4b0c      	ldr	r3, [pc, #48]	; (15968 <FreeRTOS_CLIRegisterCommand+0x64>)
   15936:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   15938:	68bb      	ldr	r3, [r7, #8]
   1593a:	687a      	ldr	r2, [r7, #4]
   1593c:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1593e:	68bb      	ldr	r3, [r7, #8]
   15940:	2200      	movs	r2, #0
   15942:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   15944:	4b09      	ldr	r3, [pc, #36]	; (1596c <FreeRTOS_CLIRegisterCommand+0x68>)
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	68ba      	ldr	r2, [r7, #8]
   1594a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1594c:	4b07      	ldr	r3, [pc, #28]	; (1596c <FreeRTOS_CLIRegisterCommand+0x68>)
   1594e:	68ba      	ldr	r2, [r7, #8]
   15950:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   15952:	4b07      	ldr	r3, [pc, #28]	; (15970 <FreeRTOS_CLIRegisterCommand+0x6c>)
   15954:	4798      	blx	r3

		xReturn = pdPASS;
   15956:	2301      	movs	r3, #1
   15958:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1595a:	68fb      	ldr	r3, [r7, #12]
}
   1595c:	0018      	movs	r0, r3
   1595e:	46bd      	mov	sp, r7
   15960:	b004      	add	sp, #16
   15962:	bd80      	pop	{r7, pc}
   15964:	00017d11 	.word	0x00017d11
   15968:	00017bd9 	.word	0x00017bd9
   1596c:	20000028 	.word	0x20000028
   15970:	00017bfd 	.word	0x00017bfd

00015974 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   15974:	b580      	push	{r7, lr}
   15976:	b088      	sub	sp, #32
   15978:	af00      	add	r7, sp, #0
   1597a:	60f8      	str	r0, [r7, #12]
   1597c:	60b9      	str	r1, [r7, #8]
   1597e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   15980:	2301      	movs	r3, #1
   15982:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   15984:	4b3d      	ldr	r3, [pc, #244]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15986:	681b      	ldr	r3, [r3, #0]
   15988:	2b00      	cmp	r3, #0
   1598a:	d144      	bne.n	15a16 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1598c:	4b3b      	ldr	r3, [pc, #236]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   1598e:	4a3c      	ldr	r2, [pc, #240]	; (15a80 <FreeRTOS_CLIProcessCommand+0x10c>)
   15990:	601a      	str	r2, [r3, #0]
   15992:	e03a      	b.n	15a0a <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   15994:	4b39      	ldr	r3, [pc, #228]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15996:	681b      	ldr	r3, [r3, #0]
   15998:	681b      	ldr	r3, [r3, #0]
   1599a:	681b      	ldr	r3, [r3, #0]
   1599c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1599e:	69bb      	ldr	r3, [r7, #24]
   159a0:	0018      	movs	r0, r3
   159a2:	4b38      	ldr	r3, [pc, #224]	; (15a84 <FreeRTOS_CLIProcessCommand+0x110>)
   159a4:	4798      	blx	r3
   159a6:	0003      	movs	r3, r0
   159a8:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   159aa:	68fa      	ldr	r2, [r7, #12]
   159ac:	697b      	ldr	r3, [r7, #20]
   159ae:	18d3      	adds	r3, r2, r3
   159b0:	781b      	ldrb	r3, [r3, #0]
   159b2:	2b20      	cmp	r3, #32
   159b4:	d005      	beq.n	159c2 <FreeRTOS_CLIProcessCommand+0x4e>
   159b6:	68fa      	ldr	r2, [r7, #12]
   159b8:	697b      	ldr	r3, [r7, #20]
   159ba:	18d3      	adds	r3, r2, r3
   159bc:	781b      	ldrb	r3, [r3, #0]
   159be:	2b00      	cmp	r3, #0
   159c0:	d11e      	bne.n	15a00 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   159c2:	697a      	ldr	r2, [r7, #20]
   159c4:	69b9      	ldr	r1, [r7, #24]
   159c6:	68fb      	ldr	r3, [r7, #12]
   159c8:	0018      	movs	r0, r3
   159ca:	4b2f      	ldr	r3, [pc, #188]	; (15a88 <FreeRTOS_CLIProcessCommand+0x114>)
   159cc:	4798      	blx	r3
   159ce:	1e03      	subs	r3, r0, #0
   159d0:	d116      	bne.n	15a00 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   159d2:	4b2a      	ldr	r3, [pc, #168]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   159d4:	681b      	ldr	r3, [r3, #0]
   159d6:	681b      	ldr	r3, [r3, #0]
   159d8:	7b1b      	ldrb	r3, [r3, #12]
   159da:	b25b      	sxtb	r3, r3
   159dc:	2b00      	cmp	r3, #0
   159de:	db19      	blt.n	15a14 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   159e0:	68fb      	ldr	r3, [r7, #12]
   159e2:	0018      	movs	r0, r3
   159e4:	4b29      	ldr	r3, [pc, #164]	; (15a8c <FreeRTOS_CLIProcessCommand+0x118>)
   159e6:	4798      	blx	r3
   159e8:	0003      	movs	r3, r0
   159ea:	001a      	movs	r2, r3
   159ec:	4b23      	ldr	r3, [pc, #140]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   159ee:	681b      	ldr	r3, [r3, #0]
   159f0:	681b      	ldr	r3, [r3, #0]
   159f2:	7b1b      	ldrb	r3, [r3, #12]
   159f4:	b25b      	sxtb	r3, r3
   159f6:	429a      	cmp	r2, r3
   159f8:	d00c      	beq.n	15a14 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   159fa:	2300      	movs	r3, #0
   159fc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   159fe:	e009      	b.n	15a14 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15a00:	4b1e      	ldr	r3, [pc, #120]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a02:	681b      	ldr	r3, [r3, #0]
   15a04:	685a      	ldr	r2, [r3, #4]
   15a06:	4b1d      	ldr	r3, [pc, #116]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a08:	601a      	str	r2, [r3, #0]
   15a0a:	4b1c      	ldr	r3, [pc, #112]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a0c:	681b      	ldr	r3, [r3, #0]
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d1c0      	bne.n	15994 <FreeRTOS_CLIProcessCommand+0x20>
   15a12:	e000      	b.n	15a16 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   15a14:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   15a16:	4b19      	ldr	r3, [pc, #100]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a18:	681b      	ldr	r3, [r3, #0]
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	d00c      	beq.n	15a38 <FreeRTOS_CLIProcessCommand+0xc4>
   15a1e:	69fb      	ldr	r3, [r7, #28]
   15a20:	2b00      	cmp	r3, #0
   15a22:	d109      	bne.n	15a38 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   15a24:	687a      	ldr	r2, [r7, #4]
   15a26:	491a      	ldr	r1, [pc, #104]	; (15a90 <FreeRTOS_CLIProcessCommand+0x11c>)
   15a28:	68bb      	ldr	r3, [r7, #8]
   15a2a:	0018      	movs	r0, r3
   15a2c:	4b19      	ldr	r3, [pc, #100]	; (15a94 <FreeRTOS_CLIProcessCommand+0x120>)
   15a2e:	4798      	blx	r3
		pxCommand = NULL;
   15a30:	4b12      	ldr	r3, [pc, #72]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a32:	2200      	movs	r2, #0
   15a34:	601a      	str	r2, [r3, #0]
   15a36:	e01c      	b.n	15a72 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   15a38:	4b10      	ldr	r3, [pc, #64]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a3a:	681b      	ldr	r3, [r3, #0]
   15a3c:	2b00      	cmp	r3, #0
   15a3e:	d010      	beq.n	15a62 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   15a40:	4b0e      	ldr	r3, [pc, #56]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a42:	681b      	ldr	r3, [r3, #0]
   15a44:	681b      	ldr	r3, [r3, #0]
   15a46:	689b      	ldr	r3, [r3, #8]
   15a48:	68fa      	ldr	r2, [r7, #12]
   15a4a:	6879      	ldr	r1, [r7, #4]
   15a4c:	68b8      	ldr	r0, [r7, #8]
   15a4e:	4798      	blx	r3
   15a50:	0003      	movs	r3, r0
   15a52:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   15a54:	69fb      	ldr	r3, [r7, #28]
   15a56:	2b00      	cmp	r3, #0
   15a58:	d10b      	bne.n	15a72 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   15a5a:	4b08      	ldr	r3, [pc, #32]	; (15a7c <FreeRTOS_CLIProcessCommand+0x108>)
   15a5c:	2200      	movs	r2, #0
   15a5e:	601a      	str	r2, [r3, #0]
   15a60:	e007      	b.n	15a72 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   15a62:	687a      	ldr	r2, [r7, #4]
   15a64:	490c      	ldr	r1, [pc, #48]	; (15a98 <FreeRTOS_CLIProcessCommand+0x124>)
   15a66:	68bb      	ldr	r3, [r7, #8]
   15a68:	0018      	movs	r0, r3
   15a6a:	4b0a      	ldr	r3, [pc, #40]	; (15a94 <FreeRTOS_CLIProcessCommand+0x120>)
   15a6c:	4798      	blx	r3
		xReturn = pdFALSE;
   15a6e:	2300      	movs	r3, #0
   15a70:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   15a72:	69fb      	ldr	r3, [r7, #28]
}
   15a74:	0018      	movs	r0, r3
   15a76:	46bd      	mov	sp, r7
   15a78:	b008      	add	sp, #32
   15a7a:	bd80      	pop	{r7, pc}
   15a7c:	20000534 	.word	0x20000534
   15a80:	20000020 	.word	0x20000020
   15a84:	00022111 	.word	0x00022111
   15a88:	0002211f 	.word	0x0002211f
   15a8c:	00015afd 	.word	0x00015afd
   15a90:	00022e44 	.word	0x00022e44
   15a94:	00022141 	.word	0x00022141
   15a98:	00022e9c 	.word	0x00022e9c

00015a9c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   15a9c:	b580      	push	{r7, lr}
   15a9e:	b086      	sub	sp, #24
   15aa0:	af00      	add	r7, sp, #0
   15aa2:	60f8      	str	r0, [r7, #12]
   15aa4:	60b9      	str	r1, [r7, #8]
   15aa6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   15aa8:	4b11      	ldr	r3, [pc, #68]	; (15af0 <prvHelpCommand+0x54>)
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	2b00      	cmp	r3, #0
   15aae:	d102      	bne.n	15ab6 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   15ab0:	4b0f      	ldr	r3, [pc, #60]	; (15af0 <prvHelpCommand+0x54>)
   15ab2:	4a10      	ldr	r2, [pc, #64]	; (15af4 <prvHelpCommand+0x58>)
   15ab4:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   15ab6:	4b0e      	ldr	r3, [pc, #56]	; (15af0 <prvHelpCommand+0x54>)
   15ab8:	681b      	ldr	r3, [r3, #0]
   15aba:	681b      	ldr	r3, [r3, #0]
   15abc:	6859      	ldr	r1, [r3, #4]
   15abe:	68ba      	ldr	r2, [r7, #8]
   15ac0:	68fb      	ldr	r3, [r7, #12]
   15ac2:	0018      	movs	r0, r3
   15ac4:	4b0c      	ldr	r3, [pc, #48]	; (15af8 <prvHelpCommand+0x5c>)
   15ac6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   15ac8:	4b09      	ldr	r3, [pc, #36]	; (15af0 <prvHelpCommand+0x54>)
   15aca:	681b      	ldr	r3, [r3, #0]
   15acc:	685a      	ldr	r2, [r3, #4]
   15ace:	4b08      	ldr	r3, [pc, #32]	; (15af0 <prvHelpCommand+0x54>)
   15ad0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   15ad2:	4b07      	ldr	r3, [pc, #28]	; (15af0 <prvHelpCommand+0x54>)
   15ad4:	681b      	ldr	r3, [r3, #0]
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	d102      	bne.n	15ae0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   15ada:	2300      	movs	r3, #0
   15adc:	617b      	str	r3, [r7, #20]
   15ade:	e001      	b.n	15ae4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   15ae0:	2301      	movs	r3, #1
   15ae2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   15ae4:	697b      	ldr	r3, [r7, #20]
}
   15ae6:	0018      	movs	r0, r3
   15ae8:	46bd      	mov	sp, r7
   15aea:	b006      	add	sp, #24
   15aec:	bd80      	pop	{r7, pc}
   15aee:	46c0      	nop			; (mov r8, r8)
   15af0:	20000538 	.word	0x20000538
   15af4:	20000020 	.word	0x20000020
   15af8:	00022141 	.word	0x00022141

00015afc <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   15afc:	b580      	push	{r7, lr}
   15afe:	b084      	sub	sp, #16
   15b00:	af00      	add	r7, sp, #0
   15b02:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   15b04:	230f      	movs	r3, #15
   15b06:	18fb      	adds	r3, r7, r3
   15b08:	2200      	movs	r2, #0
   15b0a:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   15b0c:	2300      	movs	r3, #0
   15b0e:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   15b10:	e018      	b.n	15b44 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   15b12:	687b      	ldr	r3, [r7, #4]
   15b14:	781b      	ldrb	r3, [r3, #0]
   15b16:	2b20      	cmp	r3, #32
   15b18:	d10f      	bne.n	15b3a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   15b1a:	68bb      	ldr	r3, [r7, #8]
   15b1c:	2b01      	cmp	r3, #1
   15b1e:	d00e      	beq.n	15b3e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   15b20:	230f      	movs	r3, #15
   15b22:	18fb      	adds	r3, r7, r3
   15b24:	781b      	ldrb	r3, [r3, #0]
   15b26:	b25b      	sxtb	r3, r3
   15b28:	b2db      	uxtb	r3, r3
   15b2a:	3301      	adds	r3, #1
   15b2c:	b2da      	uxtb	r2, r3
   15b2e:	230f      	movs	r3, #15
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   15b34:	2301      	movs	r3, #1
   15b36:	60bb      	str	r3, [r7, #8]
   15b38:	e001      	b.n	15b3e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   15b3a:	2300      	movs	r3, #0
   15b3c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   15b3e:	687b      	ldr	r3, [r7, #4]
   15b40:	3301      	adds	r3, #1
   15b42:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   15b44:	687b      	ldr	r3, [r7, #4]
   15b46:	781b      	ldrb	r3, [r3, #0]
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d1e2      	bne.n	15b12 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   15b4c:	68bb      	ldr	r3, [r7, #8]
   15b4e:	2b01      	cmp	r3, #1
   15b50:	d109      	bne.n	15b66 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   15b52:	230f      	movs	r3, #15
   15b54:	18fb      	adds	r3, r7, r3
   15b56:	781b      	ldrb	r3, [r3, #0]
   15b58:	b25b      	sxtb	r3, r3
   15b5a:	b2db      	uxtb	r3, r3
   15b5c:	3b01      	subs	r3, #1
   15b5e:	b2da      	uxtb	r2, r3
   15b60:	230f      	movs	r3, #15
   15b62:	18fb      	adds	r3, r7, r3
   15b64:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   15b66:	230f      	movs	r3, #15
   15b68:	18fb      	adds	r3, r7, r3
   15b6a:	781b      	ldrb	r3, [r3, #0]
   15b6c:	b25b      	sxtb	r3, r3
}
   15b6e:	0018      	movs	r0, r3
   15b70:	46bd      	mov	sp, r7
   15b72:	b004      	add	sp, #16
   15b74:	bd80      	pop	{r7, pc}
	...

00015b78 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   15b78:	b580      	push	{r7, lr}
   15b7a:	b082      	sub	sp, #8
   15b7c:	af00      	add	r7, sp, #0
   15b7e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   15b80:	687b      	ldr	r3, [r7, #4]
   15b82:	0018      	movs	r0, r3
   15b84:	4b03      	ldr	r3, [pc, #12]	; (15b94 <prvTraceGetQueueNumber+0x1c>)
   15b86:	4798      	blx	r3
   15b88:	0003      	movs	r3, r0
}
   15b8a:	0018      	movs	r0, r3
   15b8c:	46bd      	mov	sp, r7
   15b8e:	b002      	add	sp, #8
   15b90:	bd80      	pop	{r7, pc}
   15b92:	46c0      	nop			; (mov r8, r8)
   15b94:	00019335 	.word	0x00019335

00015b98 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   15b98:	b580      	push	{r7, lr}
   15b9a:	b082      	sub	sp, #8
   15b9c:	af00      	add	r7, sp, #0
   15b9e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   15ba0:	687b      	ldr	r3, [r7, #4]
   15ba2:	0018      	movs	r0, r3
   15ba4:	4b03      	ldr	r3, [pc, #12]	; (15bb4 <prvTraceGetQueueType+0x1c>)
   15ba6:	4798      	blx	r3
   15ba8:	0003      	movs	r3, r0
}
   15baa:	0018      	movs	r0, r3
   15bac:	46bd      	mov	sp, r7
   15bae:	b002      	add	sp, #8
   15bb0:	bd80      	pop	{r7, pc}
   15bb2:	46c0      	nop			; (mov r8, r8)
   15bb4:	00019361 	.word	0x00019361

00015bb8 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   15bb8:	b580      	push	{r7, lr}
   15bba:	b082      	sub	sp, #8
   15bbc:	af00      	add	r7, sp, #0
   15bbe:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   15bc0:	687b      	ldr	r3, [r7, #4]
   15bc2:	0018      	movs	r0, r3
   15bc4:	4b03      	ldr	r3, [pc, #12]	; (15bd4 <prvTraceGetTaskNumberLow16+0x1c>)
   15bc6:	4798      	blx	r3
   15bc8:	0003      	movs	r3, r0
   15bca:	b29b      	uxth	r3, r3
}
   15bcc:	0018      	movs	r0, r3
   15bce:	46bd      	mov	sp, r7
   15bd0:	b002      	add	sp, #8
   15bd2:	bd80      	pop	{r7, pc}
   15bd4:	0001a64d 	.word	0x0001a64d

00015bd8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   15bd8:	b580      	push	{r7, lr}
   15bda:	b082      	sub	sp, #8
   15bdc:	af00      	add	r7, sp, #0
   15bde:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   15be0:	687b      	ldr	r3, [r7, #4]
   15be2:	0018      	movs	r0, r3
   15be4:	4b04      	ldr	r3, [pc, #16]	; (15bf8 <prvTraceGetTaskNumberHigh16+0x20>)
   15be6:	4798      	blx	r3
   15be8:	0003      	movs	r3, r0
   15bea:	0c1b      	lsrs	r3, r3, #16
   15bec:	b29b      	uxth	r3, r3
}
   15bee:	0018      	movs	r0, r3
   15bf0:	46bd      	mov	sp, r7
   15bf2:	b002      	add	sp, #8
   15bf4:	bd80      	pop	{r7, pc}
   15bf6:	46c0      	nop			; (mov r8, r8)
   15bf8:	0001a64d 	.word	0x0001a64d

00015bfc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   15bfc:	b580      	push	{r7, lr}
   15bfe:	b082      	sub	sp, #8
   15c00:	af00      	add	r7, sp, #0
   15c02:	6078      	str	r0, [r7, #4]
   15c04:	000a      	movs	r2, r1
   15c06:	1cbb      	adds	r3, r7, #2
   15c08:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   15c0a:	687b      	ldr	r3, [r7, #4]
   15c0c:	0018      	movs	r0, r3
   15c0e:	4b08      	ldr	r3, [pc, #32]	; (15c30 <prvTraceSetTaskNumberLow16+0x34>)
   15c10:	4798      	blx	r3
   15c12:	0003      	movs	r3, r0
   15c14:	0c1b      	lsrs	r3, r3, #16
   15c16:	041a      	lsls	r2, r3, #16
   15c18:	1cbb      	adds	r3, r7, #2
   15c1a:	881b      	ldrh	r3, [r3, #0]
   15c1c:	431a      	orrs	r2, r3
   15c1e:	687b      	ldr	r3, [r7, #4]
   15c20:	0011      	movs	r1, r2
   15c22:	0018      	movs	r0, r3
   15c24:	4b03      	ldr	r3, [pc, #12]	; (15c34 <prvTraceSetTaskNumberLow16+0x38>)
   15c26:	4798      	blx	r3
}
   15c28:	46c0      	nop			; (mov r8, r8)
   15c2a:	46bd      	mov	sp, r7
   15c2c:	b002      	add	sp, #8
   15c2e:	bd80      	pop	{r7, pc}
   15c30:	0001a64d 	.word	0x0001a64d
   15c34:	0001a675 	.word	0x0001a675

00015c38 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   15c38:	b580      	push	{r7, lr}
   15c3a:	b082      	sub	sp, #8
   15c3c:	af00      	add	r7, sp, #0
   15c3e:	6078      	str	r0, [r7, #4]
   15c40:	000a      	movs	r2, r1
   15c42:	1cbb      	adds	r3, r7, #2
   15c44:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   15c46:	687b      	ldr	r3, [r7, #4]
   15c48:	0018      	movs	r0, r3
   15c4a:	4b09      	ldr	r3, [pc, #36]	; (15c70 <prvTraceSetTaskNumberHigh16+0x38>)
   15c4c:	4798      	blx	r3
   15c4e:	0003      	movs	r3, r0
   15c50:	041b      	lsls	r3, r3, #16
   15c52:	0c1a      	lsrs	r2, r3, #16
   15c54:	1cbb      	adds	r3, r7, #2
   15c56:	881b      	ldrh	r3, [r3, #0]
   15c58:	041b      	lsls	r3, r3, #16
   15c5a:	431a      	orrs	r2, r3
   15c5c:	687b      	ldr	r3, [r7, #4]
   15c5e:	0011      	movs	r1, r2
   15c60:	0018      	movs	r0, r3
   15c62:	4b04      	ldr	r3, [pc, #16]	; (15c74 <prvTraceSetTaskNumberHigh16+0x3c>)
   15c64:	4798      	blx	r3
}
   15c66:	46c0      	nop			; (mov r8, r8)
   15c68:	46bd      	mov	sp, r7
   15c6a:	b002      	add	sp, #8
   15c6c:	bd80      	pop	{r7, pc}
   15c6e:	46c0      	nop			; (mov r8, r8)
   15c70:	0001a64d 	.word	0x0001a64d
   15c74:	0001a675 	.word	0x0001a675

00015c78 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   15c78:	b580      	push	{r7, lr}
   15c7a:	b082      	sub	sp, #8
   15c7c:	af00      	add	r7, sp, #0
   15c7e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   15c80:	687b      	ldr	r3, [r7, #4]
   15c82:	0018      	movs	r0, r3
   15c84:	4b03      	ldr	r3, [pc, #12]	; (15c94 <prvTraceGetQueueNumberLow16+0x1c>)
   15c86:	4798      	blx	r3
   15c88:	0003      	movs	r3, r0
   15c8a:	b29b      	uxth	r3, r3
}
   15c8c:	0018      	movs	r0, r3
   15c8e:	46bd      	mov	sp, r7
   15c90:	b002      	add	sp, #8
   15c92:	bd80      	pop	{r7, pc}
   15c94:	00015b79 	.word	0x00015b79

00015c98 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   15c98:	b580      	push	{r7, lr}
   15c9a:	b082      	sub	sp, #8
   15c9c:	af00      	add	r7, sp, #0
   15c9e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   15ca0:	687b      	ldr	r3, [r7, #4]
   15ca2:	0018      	movs	r0, r3
   15ca4:	4b04      	ldr	r3, [pc, #16]	; (15cb8 <prvTraceGetQueueNumberHigh16+0x20>)
   15ca6:	4798      	blx	r3
   15ca8:	0003      	movs	r3, r0
   15caa:	0c1b      	lsrs	r3, r3, #16
   15cac:	b29b      	uxth	r3, r3
}
   15cae:	0018      	movs	r0, r3
   15cb0:	46bd      	mov	sp, r7
   15cb2:	b002      	add	sp, #8
   15cb4:	bd80      	pop	{r7, pc}
   15cb6:	46c0      	nop			; (mov r8, r8)
   15cb8:	00015b79 	.word	0x00015b79

00015cbc <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   15cbc:	b580      	push	{r7, lr}
   15cbe:	b082      	sub	sp, #8
   15cc0:	af00      	add	r7, sp, #0
   15cc2:	6078      	str	r0, [r7, #4]
   15cc4:	000a      	movs	r2, r1
   15cc6:	1cbb      	adds	r3, r7, #2
   15cc8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   15cca:	687b      	ldr	r3, [r7, #4]
   15ccc:	0018      	movs	r0, r3
   15cce:	4b08      	ldr	r3, [pc, #32]	; (15cf0 <prvTraceSetQueueNumberLow16+0x34>)
   15cd0:	4798      	blx	r3
   15cd2:	0003      	movs	r3, r0
   15cd4:	0c1b      	lsrs	r3, r3, #16
   15cd6:	041a      	lsls	r2, r3, #16
   15cd8:	1cbb      	adds	r3, r7, #2
   15cda:	881b      	ldrh	r3, [r3, #0]
   15cdc:	431a      	orrs	r2, r3
   15cde:	687b      	ldr	r3, [r7, #4]
   15ce0:	0011      	movs	r1, r2
   15ce2:	0018      	movs	r0, r3
   15ce4:	4b03      	ldr	r3, [pc, #12]	; (15cf4 <prvTraceSetQueueNumberLow16+0x38>)
   15ce6:	4798      	blx	r3
}
   15ce8:	46c0      	nop			; (mov r8, r8)
   15cea:	46bd      	mov	sp, r7
   15cec:	b002      	add	sp, #8
   15cee:	bd80      	pop	{r7, pc}
   15cf0:	00015b79 	.word	0x00015b79
   15cf4:	00019349 	.word	0x00019349

00015cf8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   15cf8:	b580      	push	{r7, lr}
   15cfa:	b082      	sub	sp, #8
   15cfc:	af00      	add	r7, sp, #0
   15cfe:	6078      	str	r0, [r7, #4]
   15d00:	000a      	movs	r2, r1
   15d02:	1cbb      	adds	r3, r7, #2
   15d04:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   15d06:	687b      	ldr	r3, [r7, #4]
   15d08:	0018      	movs	r0, r3
   15d0a:	4b09      	ldr	r3, [pc, #36]	; (15d30 <prvTraceSetQueueNumberHigh16+0x38>)
   15d0c:	4798      	blx	r3
   15d0e:	0003      	movs	r3, r0
   15d10:	041b      	lsls	r3, r3, #16
   15d12:	0c1a      	lsrs	r2, r3, #16
   15d14:	1cbb      	adds	r3, r7, #2
   15d16:	881b      	ldrh	r3, [r3, #0]
   15d18:	041b      	lsls	r3, r3, #16
   15d1a:	431a      	orrs	r2, r3
   15d1c:	687b      	ldr	r3, [r7, #4]
   15d1e:	0011      	movs	r1, r2
   15d20:	0018      	movs	r0, r3
   15d22:	4b04      	ldr	r3, [pc, #16]	; (15d34 <prvTraceSetQueueNumberHigh16+0x3c>)
   15d24:	4798      	blx	r3
}
   15d26:	46c0      	nop			; (mov r8, r8)
   15d28:	46bd      	mov	sp, r7
   15d2a:	b002      	add	sp, #8
   15d2c:	bd80      	pop	{r7, pc}
   15d2e:	46c0      	nop			; (mov r8, r8)
   15d30:	00015b79 	.word	0x00015b79
   15d34:	00019349 	.word	0x00019349

00015d38 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   15d38:	b580      	push	{r7, lr}
   15d3a:	b084      	sub	sp, #16
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   15d40:	2300      	movs	r3, #0
   15d42:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   15d44:	2300      	movs	r3, #0
   15d46:	60bb      	str	r3, [r7, #8]
   15d48:	e018      	b.n	15d7c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   15d4a:	4b14      	ldr	r3, [pc, #80]	; (15d9c <prvAddTaskToStackMonitor+0x64>)
   15d4c:	68ba      	ldr	r2, [r7, #8]
   15d4e:	00d2      	lsls	r2, r2, #3
   15d50:	58d3      	ldr	r3, [r2, r3]
   15d52:	2b00      	cmp	r3, #0
   15d54:	d10f      	bne.n	15d76 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   15d56:	4b11      	ldr	r3, [pc, #68]	; (15d9c <prvAddTaskToStackMonitor+0x64>)
   15d58:	68ba      	ldr	r2, [r7, #8]
   15d5a:	00d2      	lsls	r2, r2, #3
   15d5c:	6879      	ldr	r1, [r7, #4]
   15d5e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   15d60:	4a0e      	ldr	r2, [pc, #56]	; (15d9c <prvAddTaskToStackMonitor+0x64>)
   15d62:	68bb      	ldr	r3, [r7, #8]
   15d64:	00db      	lsls	r3, r3, #3
   15d66:	18d3      	adds	r3, r2, r3
   15d68:	3304      	adds	r3, #4
   15d6a:	2201      	movs	r2, #1
   15d6c:	4252      	negs	r2, r2
   15d6e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   15d70:	2301      	movs	r3, #1
   15d72:	60fb      	str	r3, [r7, #12]
			break;
   15d74:	e005      	b.n	15d82 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   15d76:	68bb      	ldr	r3, [r7, #8]
   15d78:	3301      	adds	r3, #1
   15d7a:	60bb      	str	r3, [r7, #8]
   15d7c:	68bb      	ldr	r3, [r7, #8]
   15d7e:	2b09      	cmp	r3, #9
   15d80:	dde3      	ble.n	15d4a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   15d82:	68fb      	ldr	r3, [r7, #12]
   15d84:	2b00      	cmp	r3, #0
   15d86:	d104      	bne.n	15d92 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   15d88:	4b05      	ldr	r3, [pc, #20]	; (15da0 <prvAddTaskToStackMonitor+0x68>)
   15d8a:	681b      	ldr	r3, [r3, #0]
   15d8c:	1c5a      	adds	r2, r3, #1
   15d8e:	4b04      	ldr	r3, [pc, #16]	; (15da0 <prvAddTaskToStackMonitor+0x68>)
   15d90:	601a      	str	r2, [r3, #0]
	}
}
   15d92:	46c0      	nop			; (mov r8, r8)
   15d94:	46bd      	mov	sp, r7
   15d96:	b004      	add	sp, #16
   15d98:	bd80      	pop	{r7, pc}
   15d9a:	46c0      	nop			; (mov r8, r8)
   15d9c:	20000540 	.word	0x20000540
   15da0:	20000590 	.word	0x20000590

00015da4 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   15da4:	b590      	push	{r4, r7, lr}
   15da6:	b085      	sub	sp, #20
   15da8:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   15daa:	2300      	movs	r3, #0
   15dac:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   15dae:	4b2b      	ldr	r3, [pc, #172]	; (15e5c <prvReportStackUsage+0xb8>)
   15db0:	681b      	ldr	r3, [r3, #0]
   15db2:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   15db4:	4b29      	ldr	r3, [pc, #164]	; (15e5c <prvReportStackUsage+0xb8>)
   15db6:	681a      	ldr	r2, [r3, #0]
   15db8:	4b29      	ldr	r3, [pc, #164]	; (15e60 <prvReportStackUsage+0xbc>)
   15dba:	00d2      	lsls	r2, r2, #3
   15dbc:	58d3      	ldr	r3, [r2, r3]
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d035      	beq.n	15e2e <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   15dc2:	4b26      	ldr	r3, [pc, #152]	; (15e5c <prvReportStackUsage+0xb8>)
   15dc4:	681a      	ldr	r2, [r3, #0]
   15dc6:	4b26      	ldr	r3, [pc, #152]	; (15e60 <prvReportStackUsage+0xbc>)
   15dc8:	00d2      	lsls	r2, r2, #3
   15dca:	58d3      	ldr	r3, [r2, r3]
   15dcc:	0018      	movs	r0, r3
   15dce:	4b25      	ldr	r3, [pc, #148]	; (15e64 <prvReportStackUsage+0xc0>)
   15dd0:	4798      	blx	r3
   15dd2:	0003      	movs	r3, r0
   15dd4:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   15dd6:	4b21      	ldr	r3, [pc, #132]	; (15e5c <prvReportStackUsage+0xb8>)
   15dd8:	681b      	ldr	r3, [r3, #0]
   15dda:	4a21      	ldr	r2, [pc, #132]	; (15e60 <prvReportStackUsage+0xbc>)
   15ddc:	00db      	lsls	r3, r3, #3
   15dde:	18d3      	adds	r3, r2, r3
   15de0:	3304      	adds	r3, #4
   15de2:	681a      	ldr	r2, [r3, #0]
   15de4:	687b      	ldr	r3, [r7, #4]
   15de6:	429a      	cmp	r2, r3
   15de8:	d907      	bls.n	15dfa <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   15dea:	4b1c      	ldr	r3, [pc, #112]	; (15e5c <prvReportStackUsage+0xb8>)
   15dec:	681b      	ldr	r3, [r3, #0]
   15dee:	4a1c      	ldr	r2, [pc, #112]	; (15e60 <prvReportStackUsage+0xbc>)
   15df0:	00db      	lsls	r3, r3, #3
   15df2:	18d3      	adds	r3, r2, r3
   15df4:	3304      	adds	r3, #4
   15df6:	687a      	ldr	r2, [r7, #4]
   15df8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15dfa:	4b18      	ldr	r3, [pc, #96]	; (15e5c <prvReportStackUsage+0xb8>)
   15dfc:	681a      	ldr	r2, [r3, #0]
   15dfe:	4b18      	ldr	r3, [pc, #96]	; (15e60 <prvReportStackUsage+0xbc>)
   15e00:	00d2      	lsls	r2, r2, #3
   15e02:	58d3      	ldr	r3, [r2, r3]
   15e04:	0018      	movs	r0, r3
   15e06:	4b18      	ldr	r3, [pc, #96]	; (15e68 <prvReportStackUsage+0xc4>)
   15e08:	4798      	blx	r3
   15e0a:	0003      	movs	r3, r0
   15e0c:	b2db      	uxtb	r3, r3
   15e0e:	0019      	movs	r1, r3
   15e10:	4b12      	ldr	r3, [pc, #72]	; (15e5c <prvReportStackUsage+0xb8>)
   15e12:	681b      	ldr	r3, [r3, #0]
   15e14:	4a12      	ldr	r2, [pc, #72]	; (15e60 <prvReportStackUsage+0xbc>)
   15e16:	00db      	lsls	r3, r3, #3
   15e18:	18d3      	adds	r3, r2, r3
   15e1a:	3304      	adds	r3, #4
   15e1c:	681b      	ldr	r3, [r3, #0]
   15e1e:	000a      	movs	r2, r1
   15e20:	2103      	movs	r1, #3
   15e22:	20ea      	movs	r0, #234	; 0xea
   15e24:	4c11      	ldr	r4, [pc, #68]	; (15e6c <prvReportStackUsage+0xc8>)
   15e26:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   15e28:	68fb      	ldr	r3, [r7, #12]
   15e2a:	3301      	adds	r3, #1
   15e2c:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   15e2e:	4b0b      	ldr	r3, [pc, #44]	; (15e5c <prvReportStackUsage+0xb8>)
   15e30:	681b      	ldr	r3, [r3, #0]
   15e32:	1c5a      	adds	r2, r3, #1
   15e34:	4b0e      	ldr	r3, [pc, #56]	; (15e70 <prvReportStackUsage+0xcc>)
   15e36:	210a      	movs	r1, #10
   15e38:	0010      	movs	r0, r2
   15e3a:	4798      	blx	r3
   15e3c:	000b      	movs	r3, r1
   15e3e:	001a      	movs	r2, r3
   15e40:	4b06      	ldr	r3, [pc, #24]	; (15e5c <prvReportStackUsage+0xb8>)
   15e42:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   15e44:	68fb      	ldr	r3, [r7, #12]
   15e46:	2b00      	cmp	r3, #0
   15e48:	dc04      	bgt.n	15e54 <prvReportStackUsage+0xb0>
   15e4a:	4b04      	ldr	r3, [pc, #16]	; (15e5c <prvReportStackUsage+0xb8>)
   15e4c:	681a      	ldr	r2, [r3, #0]
   15e4e:	68bb      	ldr	r3, [r7, #8]
   15e50:	429a      	cmp	r2, r3
   15e52:	d1af      	bne.n	15db4 <prvReportStackUsage+0x10>
}
   15e54:	46c0      	nop			; (mov r8, r8)
   15e56:	46bd      	mov	sp, r7
   15e58:	b005      	add	sp, #20
   15e5a:	bd90      	pop	{r4, r7, pc}
   15e5c:	20000594 	.word	0x20000594
   15e60:	20000540 	.word	0x20000540
   15e64:	0001a7ed 	.word	0x0001a7ed
   15e68:	00015bb9 	.word	0x00015bb9
   15e6c:	00016701 	.word	0x00016701
   15e70:	0001f6ed 	.word	0x0001f6ed

00015e74 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   15e74:	b580      	push	{r7, lr}
   15e76:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   15e78:	4b02      	ldr	r3, [pc, #8]	; (15e84 <prvTraceGetCurrentTaskHandle+0x10>)
   15e7a:	4798      	blx	r3
   15e7c:	0003      	movs	r3, r0
}
   15e7e:	0018      	movs	r0, r3
   15e80:	46bd      	mov	sp, r7
   15e82:	bd80      	pop	{r7, pc}
   15e84:	0001a899 	.word	0x0001a899

00015e88 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   15e88:	b590      	push	{r4, r7, lr}
   15e8a:	b085      	sub	sp, #20
   15e8c:	af02      	add	r7, sp, #8
   15e8e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   15e90:	4b14      	ldr	r3, [pc, #80]	; (15ee4 <vTraceEnable+0x5c>)
   15e92:	4798      	blx	r3

	if (startOption == TRC_START)
   15e94:	687b      	ldr	r3, [r7, #4]
   15e96:	2b01      	cmp	r3, #1
   15e98:	d102      	bne.n	15ea0 <vTraceEnable+0x18>
	{
		vTraceStart();
   15e9a:	4b13      	ldr	r3, [pc, #76]	; (15ee8 <vTraceEnable+0x60>)
   15e9c:	4798      	blx	r3
   15e9e:	e00e      	b.n	15ebe <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   15ea0:	687b      	ldr	r3, [r7, #4]
   15ea2:	2b02      	cmp	r3, #2
   15ea4:	d104      	bne.n	15eb0 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   15ea6:	4b11      	ldr	r3, [pc, #68]	; (15eec <vTraceEnable+0x64>)
   15ea8:	0018      	movs	r0, r3
   15eaa:	4b11      	ldr	r3, [pc, #68]	; (15ef0 <vTraceEnable+0x68>)
   15eac:	4798      	blx	r3
   15eae:	e006      	b.n	15ebe <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   15eb0:	687b      	ldr	r3, [r7, #4]
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d003      	beq.n	15ebe <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   15eb6:	4b0f      	ldr	r3, [pc, #60]	; (15ef4 <vTraceEnable+0x6c>)
   15eb8:	0018      	movs	r0, r3
   15eba:	4b0d      	ldr	r3, [pc, #52]	; (15ef0 <vTraceEnable+0x68>)
   15ebc:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   15ebe:	4b0e      	ldr	r3, [pc, #56]	; (15ef8 <vTraceEnable+0x70>)
   15ec0:	681b      	ldr	r3, [r3, #0]
   15ec2:	2b00      	cmp	r3, #0
   15ec4:	d10a      	bne.n	15edc <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   15ec6:	2396      	movs	r3, #150	; 0x96
   15ec8:	005a      	lsls	r2, r3, #1
   15eca:	490c      	ldr	r1, [pc, #48]	; (15efc <vTraceEnable+0x74>)
   15ecc:	480c      	ldr	r0, [pc, #48]	; (15f00 <vTraceEnable+0x78>)
   15ece:	4b0a      	ldr	r3, [pc, #40]	; (15ef8 <vTraceEnable+0x70>)
   15ed0:	9301      	str	r3, [sp, #4]
   15ed2:	2304      	movs	r3, #4
   15ed4:	9300      	str	r3, [sp, #0]
   15ed6:	2300      	movs	r3, #0
   15ed8:	4c0a      	ldr	r4, [pc, #40]	; (15f04 <vTraceEnable+0x7c>)
   15eda:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   15edc:	46c0      	nop			; (mov r8, r8)
   15ede:	46bd      	mov	sp, r7
   15ee0:	b003      	add	sp, #12
   15ee2:	bd90      	pop	{r4, r7, pc}
   15ee4:	00016dcd 	.word	0x00016dcd
   15ee8:	00016325 	.word	0x00016325
   15eec:	00022efc 	.word	0x00022efc
   15ef0:	00017475 	.word	0x00017475
   15ef4:	00022f3c 	.word	0x00022f3c
   15ef8:	2000053c 	.word	0x2000053c
   15efc:	00022f70 	.word	0x00022f70
   15f00:	00015f09 	.word	0x00015f09
   15f04:	00019835 	.word	0x00019835

00015f08 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   15f08:	b580      	push	{r7, lr}
   15f0a:	b082      	sub	sp, #8
   15f0c:	af00      	add	r7, sp, #0
   15f0e:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   15f10:	4b04      	ldr	r3, [pc, #16]	; (15f24 <TzCtrl+0x1c>)
   15f12:	4798      	blx	r3
   15f14:	1e03      	subs	r3, r0, #0
   15f16:	d001      	beq.n	15f1c <TzCtrl+0x14>
		{
			prvReportStackUsage();
   15f18:	4b03      	ldr	r3, [pc, #12]	; (15f28 <TzCtrl+0x20>)
   15f1a:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   15f1c:	2004      	movs	r0, #4
   15f1e:	4b03      	ldr	r3, [pc, #12]	; (15f2c <TzCtrl+0x24>)
   15f20:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   15f22:	e7f5      	b.n	15f10 <TzCtrl+0x8>
   15f24:	00016369 	.word	0x00016369
   15f28:	00015da5 	.word	0x00015da5
   15f2c:	00019bd1 	.word	0x00019bd1

00015f30 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   15f30:	b580      	push	{r7, lr}
   15f32:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   15f34:	4b60      	ldr	r3, [pc, #384]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f36:	681b      	ldr	r3, [r3, #0]
   15f38:	2209      	movs	r2, #9
   15f3a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   15f3c:	4b5e      	ldr	r3, [pc, #376]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f3e:	681b      	ldr	r3, [r3, #0]
   15f40:	2264      	movs	r2, #100	; 0x64
   15f42:	210a      	movs	r1, #10
   15f44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   15f46:	4b5c      	ldr	r3, [pc, #368]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f48:	681b      	ldr	r3, [r3, #0]
   15f4a:	2265      	movs	r2, #101	; 0x65
   15f4c:	210a      	movs	r1, #10
   15f4e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   15f50:	4b59      	ldr	r3, [pc, #356]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f52:	681b      	ldr	r3, [r3, #0]
   15f54:	2266      	movs	r2, #102	; 0x66
   15f56:	210a      	movs	r1, #10
   15f58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   15f5a:	4b57      	ldr	r3, [pc, #348]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f5c:	681b      	ldr	r3, [r3, #0]
   15f5e:	2267      	movs	r2, #103	; 0x67
   15f60:	210f      	movs	r1, #15
   15f62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   15f64:	4b54      	ldr	r3, [pc, #336]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f66:	681b      	ldr	r3, [r3, #0]
   15f68:	2268      	movs	r2, #104	; 0x68
   15f6a:	2105      	movs	r1, #5
   15f6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   15f6e:	4b52      	ldr	r3, [pc, #328]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f70:	681b      	ldr	r3, [r3, #0]
   15f72:	2269      	movs	r2, #105	; 0x69
   15f74:	2105      	movs	r1, #5
   15f76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   15f78:	4b4f      	ldr	r3, [pc, #316]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f7a:	681b      	ldr	r3, [r3, #0]
   15f7c:	226a      	movs	r2, #106	; 0x6a
   15f7e:	2105      	movs	r1, #5
   15f80:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   15f82:	4b4d      	ldr	r3, [pc, #308]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f84:	681b      	ldr	r3, [r3, #0]
   15f86:	226b      	movs	r2, #107	; 0x6b
   15f88:	2105      	movs	r1, #5
   15f8a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   15f8c:	4b4a      	ldr	r3, [pc, #296]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f8e:	681b      	ldr	r3, [r3, #0]
   15f90:	226c      	movs	r2, #108	; 0x6c
   15f92:	2105      	movs	r1, #5
   15f94:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   15f96:	4b48      	ldr	r3, [pc, #288]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15f98:	681b      	ldr	r3, [r3, #0]
   15f9a:	2270      	movs	r2, #112	; 0x70
   15f9c:	210f      	movs	r1, #15
   15f9e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   15fa0:	4b45      	ldr	r3, [pc, #276]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	2271      	movs	r2, #113	; 0x71
   15fa6:	210f      	movs	r1, #15
   15fa8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   15faa:	4b43      	ldr	r3, [pc, #268]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fac:	681b      	ldr	r3, [r3, #0]
   15fae:	2272      	movs	r2, #114	; 0x72
   15fb0:	210f      	movs	r1, #15
   15fb2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   15fb4:	4b40      	ldr	r3, [pc, #256]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fb6:	681b      	ldr	r3, [r3, #0]
   15fb8:	2273      	movs	r2, #115	; 0x73
   15fba:	210f      	movs	r1, #15
   15fbc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   15fbe:	4b3e      	ldr	r3, [pc, #248]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fc0:	681b      	ldr	r3, [r3, #0]
   15fc2:	2274      	movs	r2, #116	; 0x74
   15fc4:	210f      	movs	r1, #15
   15fc6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   15fc8:	4b3b      	ldr	r3, [pc, #236]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fca:	681b      	ldr	r3, [r3, #0]
   15fcc:	2275      	movs	r2, #117	; 0x75
   15fce:	210f      	movs	r1, #15
   15fd0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   15fd2:	4b39      	ldr	r3, [pc, #228]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fd4:	681b      	ldr	r3, [r3, #0]
   15fd6:	2276      	movs	r2, #118	; 0x76
   15fd8:	210f      	movs	r1, #15
   15fda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   15fdc:	4b36      	ldr	r3, [pc, #216]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fde:	681b      	ldr	r3, [r3, #0]
   15fe0:	2277      	movs	r2, #119	; 0x77
   15fe2:	210f      	movs	r1, #15
   15fe4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   15fe6:	4b34      	ldr	r3, [pc, #208]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15fe8:	681b      	ldr	r3, [r3, #0]
   15fea:	2278      	movs	r2, #120	; 0x78
   15fec:	210f      	movs	r1, #15
   15fee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   15ff0:	4b31      	ldr	r3, [pc, #196]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15ff2:	681b      	ldr	r3, [r3, #0]
   15ff4:	227c      	movs	r2, #124	; 0x7c
   15ff6:	2110      	movs	r1, #16
   15ff8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   15ffa:	4b2f      	ldr	r3, [pc, #188]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   15ffc:	681b      	ldr	r3, [r3, #0]
   15ffe:	227d      	movs	r2, #125	; 0x7d
   16000:	2110      	movs	r1, #16
   16002:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   16004:	4b2c      	ldr	r3, [pc, #176]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16006:	681b      	ldr	r3, [r3, #0]
   16008:	227e      	movs	r2, #126	; 0x7e
   1600a:	2110      	movs	r1, #16
   1600c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1600e:	4b2a      	ldr	r3, [pc, #168]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16010:	681b      	ldr	r3, [r3, #0]
   16012:	227f      	movs	r2, #127	; 0x7f
   16014:	2113      	movs	r1, #19
   16016:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   16018:	4b27      	ldr	r3, [pc, #156]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   1601a:	681b      	ldr	r3, [r3, #0]
   1601c:	2280      	movs	r2, #128	; 0x80
   1601e:	2111      	movs	r1, #17
   16020:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   16022:	4b25      	ldr	r3, [pc, #148]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16024:	681b      	ldr	r3, [r3, #0]
   16026:	2281      	movs	r2, #129	; 0x81
   16028:	2110      	movs	r1, #16
   1602a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1602c:	4b22      	ldr	r3, [pc, #136]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   1602e:	681b      	ldr	r3, [r3, #0]
   16030:	2282      	movs	r2, #130	; 0x82
   16032:	2113      	movs	r1, #19
   16034:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   16036:	4b20      	ldr	r3, [pc, #128]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16038:	681b      	ldr	r3, [r3, #0]
   1603a:	2283      	movs	r2, #131	; 0x83
   1603c:	2113      	movs	r1, #19
   1603e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   16040:	4b1d      	ldr	r3, [pc, #116]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16042:	681b      	ldr	r3, [r3, #0]
   16044:	2284      	movs	r2, #132	; 0x84
   16046:	2113      	movs	r1, #19
   16048:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1604a:	4b1b      	ldr	r3, [pc, #108]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   1604c:	681b      	ldr	r3, [r3, #0]
   1604e:	2288      	movs	r2, #136	; 0x88
   16050:	2100      	movs	r1, #0
   16052:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   16054:	4b18      	ldr	r3, [pc, #96]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16056:	681b      	ldr	r3, [r3, #0]
   16058:	228a      	movs	r2, #138	; 0x8a
   1605a:	21a0      	movs	r1, #160	; 0xa0
   1605c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1605e:	4b16      	ldr	r3, [pc, #88]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16060:	681b      	ldr	r3, [r3, #0]
   16062:	228c      	movs	r2, #140	; 0x8c
   16064:	21a0      	movs	r1, #160	; 0xa0
   16066:	0049      	lsls	r1, r1, #1
   16068:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1606a:	4b13      	ldr	r3, [pc, #76]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   1606c:	681b      	ldr	r3, [r3, #0]
   1606e:	228e      	movs	r2, #142	; 0x8e
   16070:	21f0      	movs	r1, #240	; 0xf0
   16072:	0049      	lsls	r1, r1, #1
   16074:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   16076:	4b10      	ldr	r3, [pc, #64]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16078:	681b      	ldr	r3, [r3, #0]
   1607a:	2290      	movs	r2, #144	; 0x90
   1607c:	490f      	ldr	r1, [pc, #60]	; (160bc <vTraceInitObjectPropertyTable+0x18c>)
   1607e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   16080:	4b0d      	ldr	r3, [pc, #52]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	2292      	movs	r2, #146	; 0x92
   16086:	490e      	ldr	r1, [pc, #56]	; (160c0 <vTraceInitObjectPropertyTable+0x190>)
   16088:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1608a:	4b0b      	ldr	r3, [pc, #44]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   1608c:	681b      	ldr	r3, [r3, #0]
   1608e:	2294      	movs	r2, #148	; 0x94
   16090:	490c      	ldr	r1, [pc, #48]	; (160c4 <vTraceInitObjectPropertyTable+0x194>)
   16092:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   16094:	4b08      	ldr	r3, [pc, #32]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   16096:	681b      	ldr	r3, [r3, #0]
   16098:	2296      	movs	r2, #150	; 0x96
   1609a:	490b      	ldr	r1, [pc, #44]	; (160c8 <vTraceInitObjectPropertyTable+0x198>)
   1609c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1609e:	4b06      	ldr	r3, [pc, #24]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   160a0:	681b      	ldr	r3, [r3, #0]
   160a2:	2298      	movs	r2, #152	; 0x98
   160a4:	218c      	movs	r1, #140	; 0x8c
   160a6:	00c9      	lsls	r1, r1, #3
   160a8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   160aa:	4b03      	ldr	r3, [pc, #12]	; (160b8 <vTraceInitObjectPropertyTable+0x188>)
   160ac:	681b      	ldr	r3, [r3, #0]
   160ae:	4a07      	ldr	r2, [pc, #28]	; (160cc <vTraceInitObjectPropertyTable+0x19c>)
   160b0:	661a      	str	r2, [r3, #96]	; 0x60
}
   160b2:	46c0      	nop			; (mov r8, r8)
   160b4:	46bd      	mov	sp, r7
   160b6:	bd80      	pop	{r7, pc}
   160b8:	20000654 	.word	0x20000654
   160bc:	000002fd 	.word	0x000002fd
   160c0:	00000352 	.word	0x00000352
   160c4:	000003a2 	.word	0x000003a2
   160c8:	00000401 	.word	0x00000401
   160cc:	000004bf 	.word	0x000004bf

000160d0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   160d0:	b580      	push	{r7, lr}
   160d2:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   160d4:	4b2e      	ldr	r3, [pc, #184]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160d6:	2200      	movs	r2, #0
   160d8:	825a      	strh	r2, [r3, #18]
   160da:	4b2d      	ldr	r3, [pc, #180]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160dc:	8a5a      	ldrh	r2, [r3, #18]
   160de:	4b2c      	ldr	r3, [pc, #176]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160e0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   160e2:	4b2b      	ldr	r3, [pc, #172]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160e4:	220a      	movs	r2, #10
   160e6:	829a      	strh	r2, [r3, #20]
   160e8:	4b29      	ldr	r3, [pc, #164]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160ea:	8a9a      	ldrh	r2, [r3, #20]
   160ec:	4b28      	ldr	r3, [pc, #160]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160ee:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   160f0:	4b27      	ldr	r3, [pc, #156]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160f2:	2214      	movs	r2, #20
   160f4:	82da      	strh	r2, [r3, #22]
   160f6:	4b26      	ldr	r3, [pc, #152]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160f8:	8ada      	ldrh	r2, [r3, #22]
   160fa:	4b25      	ldr	r3, [pc, #148]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   160fc:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   160fe:	4b24      	ldr	r3, [pc, #144]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16100:	221e      	movs	r2, #30
   16102:	831a      	strh	r2, [r3, #24]
   16104:	4b22      	ldr	r3, [pc, #136]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16106:	8b1a      	ldrh	r2, [r3, #24]
   16108:	4b21      	ldr	r3, [pc, #132]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1610a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1610c:	4b20      	ldr	r3, [pc, #128]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1610e:	222d      	movs	r2, #45	; 0x2d
   16110:	835a      	strh	r2, [r3, #26]
   16112:	4b1f      	ldr	r3, [pc, #124]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16114:	8b5a      	ldrh	r2, [r3, #26]
   16116:	4b1e      	ldr	r3, [pc, #120]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16118:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1611a:	4b1d      	ldr	r3, [pc, #116]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1611c:	2232      	movs	r2, #50	; 0x32
   1611e:	839a      	strh	r2, [r3, #28]
   16120:	4b1b      	ldr	r3, [pc, #108]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16122:	8b9a      	ldrh	r2, [r3, #28]
   16124:	4b1a      	ldr	r3, [pc, #104]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16126:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   16128:	4b19      	ldr	r3, [pc, #100]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1612a:	2237      	movs	r2, #55	; 0x37
   1612c:	83da      	strh	r2, [r3, #30]
   1612e:	4b18      	ldr	r3, [pc, #96]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16130:	8bda      	ldrh	r2, [r3, #30]
   16132:	4b17      	ldr	r3, [pc, #92]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16134:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   16136:	4b16      	ldr	r3, [pc, #88]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16138:	223c      	movs	r2, #60	; 0x3c
   1613a:	841a      	strh	r2, [r3, #32]
   1613c:	4b14      	ldr	r3, [pc, #80]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1613e:	8c1a      	ldrh	r2, [r3, #32]
   16140:	4b13      	ldr	r3, [pc, #76]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16142:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   16144:	4b12      	ldr	r3, [pc, #72]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16146:	2241      	movs	r2, #65	; 0x41
   16148:	845a      	strh	r2, [r3, #34]	; 0x22
   1614a:	4b11      	ldr	r3, [pc, #68]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1614c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1614e:	4b10      	ldr	r3, [pc, #64]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16150:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   16152:	4b0f      	ldr	r3, [pc, #60]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16154:	2209      	movs	r2, #9
   16156:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   16158:	4b0d      	ldr	r3, [pc, #52]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1615a:	2213      	movs	r2, #19
   1615c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1615e:	4b0c      	ldr	r3, [pc, #48]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16160:	221d      	movs	r2, #29
   16162:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   16164:	4b0a      	ldr	r3, [pc, #40]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16166:	222c      	movs	r2, #44	; 0x2c
   16168:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1616a:	4b09      	ldr	r3, [pc, #36]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1616c:	2231      	movs	r2, #49	; 0x31
   1616e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   16170:	4b07      	ldr	r3, [pc, #28]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16172:	2236      	movs	r2, #54	; 0x36
   16174:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   16176:	4b06      	ldr	r3, [pc, #24]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16178:	223b      	movs	r2, #59	; 0x3b
   1617a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1617c:	4b04      	ldr	r3, [pc, #16]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   1617e:	2240      	movs	r2, #64	; 0x40
   16180:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   16182:	4b03      	ldr	r3, [pc, #12]	; (16190 <vTraceInitObjectHandleStack+0xc0>)
   16184:	2245      	movs	r2, #69	; 0x45
   16186:	869a      	strh	r2, [r3, #52]	; 0x34
}
   16188:	46c0      	nop			; (mov r8, r8)
   1618a:	46bd      	mov	sp, r7
   1618c:	bd80      	pop	{r7, pc}
   1618e:	46c0      	nop			; (mov r8, r8)
   16190:	200005c4 	.word	0x200005c4

00016194 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   16194:	b580      	push	{r7, lr}
   16196:	b082      	sub	sp, #8
   16198:	af00      	add	r7, sp, #0
   1619a:	0002      	movs	r2, r0
   1619c:	1dfb      	adds	r3, r7, #7
   1619e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   161a0:	1dfb      	adds	r3, r7, #7
   161a2:	781b      	ldrb	r3, [r3, #0]
   161a4:	2b08      	cmp	r3, #8
   161a6:	d816      	bhi.n	161d6 <pszTraceGetErrorNotEnoughHandles+0x42>
   161a8:	009a      	lsls	r2, r3, #2
   161aa:	4b0d      	ldr	r3, [pc, #52]	; (161e0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   161ac:	18d3      	adds	r3, r2, r3
   161ae:	681b      	ldr	r3, [r3, #0]
   161b0:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   161b2:	4b0c      	ldr	r3, [pc, #48]	; (161e4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   161b4:	e010      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   161b6:	4b0c      	ldr	r3, [pc, #48]	; (161e8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   161b8:	e00e      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   161ba:	4b0c      	ldr	r3, [pc, #48]	; (161ec <pszTraceGetErrorNotEnoughHandles+0x58>)
   161bc:	e00c      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   161be:	4b0c      	ldr	r3, [pc, #48]	; (161f0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   161c0:	e00a      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   161c2:	4b0c      	ldr	r3, [pc, #48]	; (161f4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   161c4:	e008      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   161c6:	4b0c      	ldr	r3, [pc, #48]	; (161f8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   161c8:	e006      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   161ca:	4b0c      	ldr	r3, [pc, #48]	; (161fc <pszTraceGetErrorNotEnoughHandles+0x68>)
   161cc:	e004      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   161ce:	4b0c      	ldr	r3, [pc, #48]	; (16200 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   161d0:	e002      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   161d2:	4b0c      	ldr	r3, [pc, #48]	; (16204 <pszTraceGetErrorNotEnoughHandles+0x70>)
   161d4:	e000      	b.n	161d8 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   161d6:	4b0c      	ldr	r3, [pc, #48]	; (16208 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   161d8:	0018      	movs	r0, r3
   161da:	46bd      	mov	sp, r7
   161dc:	b002      	add	sp, #8
   161de:	bd80      	pop	{r7, pc}
   161e0:	00023278 	.word	0x00023278
   161e4:	00022f78 	.word	0x00022f78
   161e8:	00022fc0 	.word	0x00022fc0
   161ec:	00023008 	.word	0x00023008
   161f0:	0002305c 	.word	0x0002305c
   161f4:	000230a8 	.word	0x000230a8
   161f8:	000230f4 	.word	0x000230f4
   161fc:	00023140 	.word	0x00023140
   16200:	00023194 	.word	0x00023194
   16204:	000231ec 	.word	0x000231ec
   16208:	00023248 	.word	0x00023248

0001620c <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1620c:	b590      	push	{r4, r7, lr}
   1620e:	b087      	sub	sp, #28
   16210:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   16212:	2317      	movs	r3, #23
   16214:	18fb      	adds	r3, r7, r3
   16216:	2200      	movs	r2, #0
   16218:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1621a:	4b36      	ldr	r3, [pc, #216]	; (162f4 <uiTraceStart+0xe8>)
   1621c:	681b      	ldr	r3, [r3, #0]
   1621e:	2b00      	cmp	r3, #0
   16220:	d10b      	bne.n	1623a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   16222:	4b34      	ldr	r3, [pc, #208]	; (162f4 <uiTraceStart+0xe8>)
   16224:	681b      	ldr	r3, [r3, #0]
   16226:	2b00      	cmp	r3, #0
   16228:	d105      	bne.n	16236 <uiTraceStart+0x2a>
   1622a:	4b33      	ldr	r3, [pc, #204]	; (162f8 <uiTraceStart+0xec>)
   1622c:	0018      	movs	r0, r3
   1622e:	4b33      	ldr	r3, [pc, #204]	; (162fc <uiTraceStart+0xf0>)
   16230:	4798      	blx	r3
   16232:	2300      	movs	r3, #0
   16234:	e059      	b.n	162ea <uiTraceStart+0xde>
		return 0;
   16236:	2300      	movs	r3, #0
   16238:	e057      	b.n	162ea <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1623a:	4b2e      	ldr	r3, [pc, #184]	; (162f4 <uiTraceStart+0xe8>)
   1623c:	681b      	ldr	r3, [r3, #0]
   1623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16240:	2b01      	cmp	r3, #1
   16242:	d101      	bne.n	16248 <uiTraceStart+0x3c>
		return 1; /* Already running */
   16244:	2301      	movs	r3, #1
   16246:	e050      	b.n	162ea <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   16248:	4b2d      	ldr	r3, [pc, #180]	; (16300 <uiTraceStart+0xf4>)
   1624a:	681b      	ldr	r3, [r3, #0]
   1624c:	2b00      	cmp	r3, #0
   1624e:	d149      	bne.n	162e4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16250:	f3ef 8310 	mrs	r3, PRIMASK
   16254:	60bb      	str	r3, [r7, #8]
  return(result);
   16256:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   16258:	613b      	str	r3, [r7, #16]
   1625a:	2301      	movs	r3, #1
   1625c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1625e:	68fb      	ldr	r3, [r7, #12]
   16260:	f383 8810 	msr	PRIMASK, r3
   16264:	4b27      	ldr	r3, [pc, #156]	; (16304 <uiTraceStart+0xf8>)
   16266:	681b      	ldr	r3, [r3, #0]
   16268:	1c5a      	adds	r2, r3, #1
   1626a:	4b26      	ldr	r3, [pc, #152]	; (16304 <uiTraceStart+0xf8>)
   1626c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1626e:	4b21      	ldr	r3, [pc, #132]	; (162f4 <uiTraceStart+0xe8>)
   16270:	681b      	ldr	r3, [r3, #0]
   16272:	2201      	movs	r2, #1
   16274:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   16276:	4b24      	ldr	r3, [pc, #144]	; (16308 <uiTraceStart+0xfc>)
   16278:	4798      	blx	r3
   1627a:	0003      	movs	r3, r0
   1627c:	0018      	movs	r0, r3
   1627e:	4b23      	ldr	r3, [pc, #140]	; (1630c <uiTraceStart+0x100>)
   16280:	4798      	blx	r3
   16282:	0003      	movs	r3, r0
   16284:	001a      	movs	r2, r3
   16286:	2317      	movs	r3, #23
   16288:	18fb      	adds	r3, r7, r3
   1628a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1628c:	2317      	movs	r3, #23
   1628e:	18fb      	adds	r3, r7, r3
   16290:	781b      	ldrb	r3, [r3, #0]
   16292:	2b00      	cmp	r3, #0
   16294:	d116      	bne.n	162c4 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   16296:	2317      	movs	r3, #23
   16298:	18fc      	adds	r4, r7, r3
   1629a:	2003      	movs	r0, #3
   1629c:	4b1c      	ldr	r3, [pc, #112]	; (16310 <uiTraceStart+0x104>)
   1629e:	4798      	blx	r3
   162a0:	0003      	movs	r3, r0
   162a2:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   162a4:	4a1b      	ldr	r2, [pc, #108]	; (16314 <uiTraceStart+0x108>)
   162a6:	2317      	movs	r3, #23
   162a8:	18fb      	adds	r3, r7, r3
   162aa:	781b      	ldrb	r3, [r3, #0]
   162ac:	0019      	movs	r1, r3
   162ae:	2003      	movs	r0, #3
   162b0:	4b19      	ldr	r3, [pc, #100]	; (16318 <uiTraceStart+0x10c>)
   162b2:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   162b4:	2317      	movs	r3, #23
   162b6:	18fb      	adds	r3, r7, r3
   162b8:	781b      	ldrb	r3, [r3, #0]
   162ba:	2200      	movs	r2, #0
   162bc:	0019      	movs	r1, r3
   162be:	2003      	movs	r0, #3
   162c0:	4b16      	ldr	r3, [pc, #88]	; (1631c <uiTraceStart+0x110>)
   162c2:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   162c4:	2317      	movs	r3, #23
   162c6:	18fb      	adds	r3, r7, r3
   162c8:	781b      	ldrb	r3, [r3, #0]
   162ca:	0018      	movs	r0, r3
   162cc:	4b14      	ldr	r3, [pc, #80]	; (16320 <uiTraceStart+0x114>)
   162ce:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   162d0:	4b0c      	ldr	r3, [pc, #48]	; (16304 <uiTraceStart+0xf8>)
   162d2:	681b      	ldr	r3, [r3, #0]
   162d4:	1e5a      	subs	r2, r3, #1
   162d6:	4b0b      	ldr	r3, [pc, #44]	; (16304 <uiTraceStart+0xf8>)
   162d8:	601a      	str	r2, [r3, #0]
   162da:	693b      	ldr	r3, [r7, #16]
   162dc:	607b      	str	r3, [r7, #4]
   162de:	687b      	ldr	r3, [r7, #4]
   162e0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   162e4:	4b03      	ldr	r3, [pc, #12]	; (162f4 <uiTraceStart+0xe8>)
   162e6:	681b      	ldr	r3, [r3, #0]
   162e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   162ea:	0018      	movs	r0, r3
   162ec:	46bd      	mov	sp, r7
   162ee:	b007      	add	sp, #28
   162f0:	bd90      	pop	{r4, r7, pc}
   162f2:	46c0      	nop			; (mov r8, r8)
   162f4:	20000654 	.word	0x20000654
   162f8:	0002329c 	.word	0x0002329c
   162fc:	00017475 	.word	0x00017475
   16300:	200005b4 	.word	0x200005b4
   16304:	200005ac 	.word	0x200005ac
   16308:	00015e75 	.word	0x00015e75
   1630c:	00015bb9 	.word	0x00015bb9
   16310:	00017159 	.word	0x00017159
   16314:	000232e0 	.word	0x000232e0
   16318:	00017389 	.word	0x00017389
   1631c:	00016aed 	.word	0x00016aed
   16320:	000169d5 	.word	0x000169d5

00016324 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   16324:	b580      	push	{r7, lr}
   16326:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   16328:	4b02      	ldr	r3, [pc, #8]	; (16334 <vTraceStart+0x10>)
   1632a:	4798      	blx	r3
}
   1632c:	46c0      	nop			; (mov r8, r8)
   1632e:	46bd      	mov	sp, r7
   16330:	bd80      	pop	{r7, pc}
   16332:	46c0      	nop			; (mov r8, r8)
   16334:	0001620d 	.word	0x0001620d

00016338 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   16338:	b580      	push	{r7, lr}
   1633a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1633c:	4b08      	ldr	r3, [pc, #32]	; (16360 <vTraceStop+0x28>)
   1633e:	681b      	ldr	r3, [r3, #0]
   16340:	2b00      	cmp	r3, #0
   16342:	d003      	beq.n	1634c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   16344:	4b06      	ldr	r3, [pc, #24]	; (16360 <vTraceStop+0x28>)
   16346:	681b      	ldr	r3, [r3, #0]
   16348:	2200      	movs	r2, #0
   1634a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1634c:	4b05      	ldr	r3, [pc, #20]	; (16364 <vTraceStop+0x2c>)
   1634e:	681b      	ldr	r3, [r3, #0]
   16350:	2b00      	cmp	r3, #0
   16352:	d002      	beq.n	1635a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   16354:	4b03      	ldr	r3, [pc, #12]	; (16364 <vTraceStop+0x2c>)
   16356:	681b      	ldr	r3, [r3, #0]
   16358:	4798      	blx	r3
	}
}
   1635a:	46c0      	nop			; (mov r8, r8)
   1635c:	46bd      	mov	sp, r7
   1635e:	bd80      	pop	{r7, pc}
   16360:	20000654 	.word	0x20000654
   16364:	200005bc 	.word	0x200005bc

00016368 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   16368:	b580      	push	{r7, lr}
   1636a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1636c:	4b05      	ldr	r3, [pc, #20]	; (16384 <xTraceIsRecordingEnabled+0x1c>)
   1636e:	681b      	ldr	r3, [r3, #0]
   16370:	2b00      	cmp	r3, #0
   16372:	d003      	beq.n	1637c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   16374:	4b03      	ldr	r3, [pc, #12]	; (16384 <xTraceIsRecordingEnabled+0x1c>)
   16376:	681b      	ldr	r3, [r3, #0]
   16378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1637a:	e000      	b.n	1637e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1637c:	2300      	movs	r3, #0
	}
}
   1637e:	0018      	movs	r0, r3
   16380:	46bd      	mov	sp, r7
   16382:	bd80      	pop	{r7, pc}
   16384:	20000654 	.word	0x20000654

00016388 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   16388:	b590      	push	{r4, r7, lr}
   1638a:	b089      	sub	sp, #36	; 0x24
   1638c:	af00      	add	r7, sp, #0
   1638e:	0002      	movs	r2, r0
   16390:	1dfb      	adds	r3, r7, #7
   16392:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   16394:	1dfb      	adds	r3, r7, #7
   16396:	781b      	ldrb	r3, [r3, #0]
   16398:	2b00      	cmp	r3, #0
   1639a:	d057      	beq.n	1644c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1639c:	4b2e      	ldr	r3, [pc, #184]	; (16458 <prvTraceStoreTaskReady+0xd0>)
   1639e:	681b      	ldr	r3, [r3, #0]
   163a0:	2b00      	cmp	r3, #0
   163a2:	d055      	beq.n	16450 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   163a4:	1dfb      	adds	r3, r7, #7
   163a6:	781b      	ldrb	r3, [r3, #0]
   163a8:	2b0f      	cmp	r3, #15
   163aa:	d904      	bls.n	163b6 <prvTraceStoreTaskReady+0x2e>
   163ac:	4b2b      	ldr	r3, [pc, #172]	; (1645c <prvTraceStoreTaskReady+0xd4>)
   163ae:	0018      	movs	r0, r3
   163b0:	4b2b      	ldr	r3, [pc, #172]	; (16460 <prvTraceStoreTaskReady+0xd8>)
   163b2:	4798      	blx	r3
   163b4:	e04d      	b.n	16452 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   163b6:	4b2b      	ldr	r3, [pc, #172]	; (16464 <prvTraceStoreTaskReady+0xdc>)
   163b8:	681b      	ldr	r3, [r3, #0]
   163ba:	2b00      	cmp	r3, #0
   163bc:	d004      	beq.n	163c8 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   163be:	4b2a      	ldr	r3, [pc, #168]	; (16468 <prvTraceStoreTaskReady+0xe0>)
   163c0:	0018      	movs	r0, r3
   163c2:	4b27      	ldr	r3, [pc, #156]	; (16460 <prvTraceStoreTaskReady+0xd8>)
   163c4:	4798      	blx	r3
		return;
   163c6:	e044      	b.n	16452 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   163c8:	f3ef 8310 	mrs	r3, PRIMASK
   163cc:	60fb      	str	r3, [r7, #12]
  return(result);
   163ce:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   163d0:	61fb      	str	r3, [r7, #28]
   163d2:	2301      	movs	r3, #1
   163d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   163d6:	693b      	ldr	r3, [r7, #16]
   163d8:	f383 8810 	msr	PRIMASK, r3
   163dc:	4b21      	ldr	r3, [pc, #132]	; (16464 <prvTraceStoreTaskReady+0xdc>)
   163de:	681b      	ldr	r3, [r3, #0]
   163e0:	1c5a      	adds	r2, r3, #1
   163e2:	4b20      	ldr	r3, [pc, #128]	; (16464 <prvTraceStoreTaskReady+0xdc>)
   163e4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   163e6:	4b21      	ldr	r3, [pc, #132]	; (1646c <prvTraceStoreTaskReady+0xe4>)
   163e8:	681b      	ldr	r3, [r3, #0]
   163ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   163ec:	2b00      	cmp	r3, #0
   163ee:	d022      	beq.n	16436 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   163f0:	231a      	movs	r3, #26
   163f2:	18fc      	adds	r4, r7, r3
   163f4:	4b1e      	ldr	r3, [pc, #120]	; (16470 <prvTraceStoreTaskReady+0xe8>)
   163f6:	0018      	movs	r0, r3
   163f8:	4b1e      	ldr	r3, [pc, #120]	; (16474 <prvTraceStoreTaskReady+0xec>)
   163fa:	4798      	blx	r3
   163fc:	0003      	movs	r3, r0
   163fe:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   16400:	2319      	movs	r3, #25
   16402:	18fb      	adds	r3, r7, r3
   16404:	1dfa      	adds	r2, r7, #7
   16406:	7812      	ldrb	r2, [r2, #0]
   16408:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1640a:	4b1b      	ldr	r3, [pc, #108]	; (16478 <prvTraceStoreTaskReady+0xf0>)
   1640c:	4798      	blx	r3
   1640e:	0003      	movs	r3, r0
   16410:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   16412:	697b      	ldr	r3, [r7, #20]
   16414:	2b00      	cmp	r3, #0
   16416:	d00e      	beq.n	16436 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   16418:	697b      	ldr	r3, [r7, #20]
   1641a:	2202      	movs	r2, #2
   1641c:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1641e:	697b      	ldr	r3, [r7, #20]
   16420:	221a      	movs	r2, #26
   16422:	18ba      	adds	r2, r7, r2
   16424:	8812      	ldrh	r2, [r2, #0]
   16426:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   16428:	697b      	ldr	r3, [r7, #20]
   1642a:	2219      	movs	r2, #25
   1642c:	18ba      	adds	r2, r7, r2
   1642e:	7812      	ldrb	r2, [r2, #0]
   16430:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   16432:	4b12      	ldr	r3, [pc, #72]	; (1647c <prvTraceStoreTaskReady+0xf4>)
   16434:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   16436:	4b0b      	ldr	r3, [pc, #44]	; (16464 <prvTraceStoreTaskReady+0xdc>)
   16438:	681b      	ldr	r3, [r3, #0]
   1643a:	1e5a      	subs	r2, r3, #1
   1643c:	4b09      	ldr	r3, [pc, #36]	; (16464 <prvTraceStoreTaskReady+0xdc>)
   1643e:	601a      	str	r2, [r3, #0]
   16440:	69fb      	ldr	r3, [r7, #28]
   16442:	60bb      	str	r3, [r7, #8]
   16444:	68bb      	ldr	r3, [r7, #8]
   16446:	f383 8810 	msr	PRIMASK, r3
   1644a:	e002      	b.n	16452 <prvTraceStoreTaskReady+0xca>
		return;
   1644c:	46c0      	nop			; (mov r8, r8)
   1644e:	e000      	b.n	16452 <prvTraceStoreTaskReady+0xca>
		return;
   16450:	46c0      	nop			; (mov r8, r8)
}
   16452:	46bd      	mov	sp, r7
   16454:	b009      	add	sp, #36	; 0x24
   16456:	bd90      	pop	{r4, r7, pc}
   16458:	20000034 	.word	0x20000034
   1645c:	00023648 	.word	0x00023648
   16460:	00017475 	.word	0x00017475
   16464:	200005ac 	.word	0x200005ac
   16468:	00023688 	.word	0x00023688
   1646c:	20000654 	.word	0x20000654
   16470:	0000ffff 	.word	0x0000ffff
   16474:	00017689 	.word	0x00017689
   16478:	0001702d 	.word	0x0001702d
   1647c:	00017631 	.word	0x00017631

00016480 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   16480:	b580      	push	{r7, lr}
   16482:	b08e      	sub	sp, #56	; 0x38
   16484:	af00      	add	r7, sp, #0
   16486:	60f8      	str	r0, [r7, #12]
   16488:	60b9      	str	r1, [r7, #8]
   1648a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1648c:	4b48      	ldr	r3, [pc, #288]	; (165b0 <vTraceStoreMemMangEvent+0x130>)
   1648e:	681b      	ldr	r3, [r3, #0]
   16490:	2b00      	cmp	r3, #0
   16492:	d100      	bne.n	16496 <vTraceStoreMemMangEvent+0x16>
   16494:	e088      	b.n	165a8 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   16496:	687b      	ldr	r3, [r7, #4]
   16498:	2b00      	cmp	r3, #0
   1649a:	da03      	bge.n	164a4 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1649c:	687b      	ldr	r3, [r7, #4]
   1649e:	425b      	negs	r3, r3
   164a0:	637b      	str	r3, [r7, #52]	; 0x34
   164a2:	e001      	b.n	164a8 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   164a4:	687b      	ldr	r3, [r7, #4]
   164a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   164a8:	f3ef 8310 	mrs	r3, PRIMASK
   164ac:	61bb      	str	r3, [r7, #24]
  return(result);
   164ae:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   164b0:	633b      	str	r3, [r7, #48]	; 0x30
   164b2:	2301      	movs	r3, #1
   164b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   164b6:	69fb      	ldr	r3, [r7, #28]
   164b8:	f383 8810 	msr	PRIMASK, r3
   164bc:	4b3d      	ldr	r3, [pc, #244]	; (165b4 <vTraceStoreMemMangEvent+0x134>)
   164be:	681b      	ldr	r3, [r3, #0]
   164c0:	1c5a      	adds	r2, r3, #1
   164c2:	4b3c      	ldr	r3, [pc, #240]	; (165b4 <vTraceStoreMemMangEvent+0x134>)
   164c4:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   164c6:	68bb      	ldr	r3, [r7, #8]
   164c8:	2b00      	cmp	r3, #0
   164ca:	d005      	beq.n	164d8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   164cc:	4b3a      	ldr	r3, [pc, #232]	; (165b8 <vTraceStoreMemMangEvent+0x138>)
   164ce:	681a      	ldr	r2, [r3, #0]
   164d0:	687b      	ldr	r3, [r7, #4]
   164d2:	18d2      	adds	r2, r2, r3
   164d4:	4b38      	ldr	r3, [pc, #224]	; (165b8 <vTraceStoreMemMangEvent+0x138>)
   164d6:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   164d8:	4b35      	ldr	r3, [pc, #212]	; (165b0 <vTraceStoreMemMangEvent+0x130>)
   164da:	681b      	ldr	r3, [r3, #0]
   164dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   164de:	2b00      	cmp	r3, #0
   164e0:	d057      	beq.n	16592 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   164e2:	20ff      	movs	r0, #255	; 0xff
   164e4:	4b35      	ldr	r3, [pc, #212]	; (165bc <vTraceStoreMemMangEvent+0x13c>)
   164e6:	4798      	blx	r3
   164e8:	0003      	movs	r3, r0
   164ea:	001a      	movs	r2, r3
   164ec:	232f      	movs	r3, #47	; 0x2f
   164ee:	18fb      	adds	r3, r7, r3
   164f0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   164f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   164f4:	4a32      	ldr	r2, [pc, #200]	; (165c0 <vTraceStoreMemMangEvent+0x140>)
   164f6:	0019      	movs	r1, r3
   164f8:	0010      	movs	r0, r2
   164fa:	4b32      	ldr	r3, [pc, #200]	; (165c4 <vTraceStoreMemMangEvent+0x144>)
   164fc:	4798      	blx	r3
   164fe:	0002      	movs	r2, r0
   16500:	232c      	movs	r3, #44	; 0x2c
   16502:	18fb      	adds	r3, r7, r3
   16504:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   16506:	4b30      	ldr	r3, [pc, #192]	; (165c8 <vTraceStoreMemMangEvent+0x148>)
   16508:	4798      	blx	r3
   1650a:	0003      	movs	r3, r0
   1650c:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16510:	2b00      	cmp	r3, #0
   16512:	d03e      	beq.n	16592 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   16514:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16516:	222f      	movs	r2, #47	; 0x2f
   16518:	18ba      	adds	r2, r7, r2
   1651a:	7812      	ldrb	r2, [r2, #0]
   1651c:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16520:	2200      	movs	r2, #0
   16522:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   16524:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16526:	222c      	movs	r2, #44	; 0x2c
   16528:	18ba      	adds	r2, r7, r2
   1652a:	8812      	ldrh	r2, [r2, #0]
   1652c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1652e:	4b27      	ldr	r3, [pc, #156]	; (165cc <vTraceStoreMemMangEvent+0x14c>)
   16530:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   16532:	68bb      	ldr	r3, [r7, #8]
   16534:	4a22      	ldr	r2, [pc, #136]	; (165c0 <vTraceStoreMemMangEvent+0x140>)
   16536:	0019      	movs	r1, r3
   16538:	0010      	movs	r0, r2
   1653a:	4b22      	ldr	r3, [pc, #136]	; (165c4 <vTraceStoreMemMangEvent+0x144>)
   1653c:	4798      	blx	r3
   1653e:	0002      	movs	r2, r0
   16540:	2326      	movs	r3, #38	; 0x26
   16542:	18fb      	adds	r3, r7, r3
   16544:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   16546:	2325      	movs	r3, #37	; 0x25
   16548:	18fb      	adds	r3, r7, r3
   1654a:	2200      	movs	r2, #0
   1654c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1654e:	4b1e      	ldr	r3, [pc, #120]	; (165c8 <vTraceStoreMemMangEvent+0x148>)
   16550:	4798      	blx	r3
   16552:	0003      	movs	r3, r0
   16554:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   16556:	6a3b      	ldr	r3, [r7, #32]
   16558:	2b00      	cmp	r3, #0
   1655a:	d01a      	beq.n	16592 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1655c:	6a3b      	ldr	r3, [r7, #32]
   1655e:	2226      	movs	r2, #38	; 0x26
   16560:	18ba      	adds	r2, r7, r2
   16562:	8812      	ldrh	r2, [r2, #0]
   16564:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   16566:	6a3b      	ldr	r3, [r7, #32]
   16568:	2225      	movs	r2, #37	; 0x25
   1656a:	18ba      	adds	r2, r7, r2
   1656c:	7812      	ldrb	r2, [r2, #0]
   1656e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   16570:	68fb      	ldr	r3, [r7, #12]
   16572:	b2db      	uxtb	r3, r3
   16574:	3301      	adds	r3, #1
   16576:	b2da      	uxtb	r2, r3
   16578:	6a3b      	ldr	r3, [r7, #32]
   1657a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1657c:	68fb      	ldr	r3, [r7, #12]
   1657e:	b2da      	uxtb	r2, r3
   16580:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16582:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   16584:	4b11      	ldr	r3, [pc, #68]	; (165cc <vTraceStoreMemMangEvent+0x14c>)
   16586:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   16588:	4b09      	ldr	r3, [pc, #36]	; (165b0 <vTraceStoreMemMangEvent+0x130>)
   1658a:	681b      	ldr	r3, [r3, #0]
   1658c:	4a0a      	ldr	r2, [pc, #40]	; (165b8 <vTraceStoreMemMangEvent+0x138>)
   1658e:	6812      	ldr	r2, [r2, #0]
   16590:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   16592:	4b08      	ldr	r3, [pc, #32]	; (165b4 <vTraceStoreMemMangEvent+0x134>)
   16594:	681b      	ldr	r3, [r3, #0]
   16596:	1e5a      	subs	r2, r3, #1
   16598:	4b06      	ldr	r3, [pc, #24]	; (165b4 <vTraceStoreMemMangEvent+0x134>)
   1659a:	601a      	str	r2, [r3, #0]
   1659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1659e:	617b      	str	r3, [r7, #20]
   165a0:	697b      	ldr	r3, [r7, #20]
   165a2:	f383 8810 	msr	PRIMASK, r3
   165a6:	e000      	b.n	165aa <vTraceStoreMemMangEvent+0x12a>
		return;
   165a8:	46c0      	nop			; (mov r8, r8)
}
   165aa:	46bd      	mov	sp, r7
   165ac:	b00e      	add	sp, #56	; 0x38
   165ae:	bd80      	pop	{r7, pc}
   165b0:	20000654 	.word	0x20000654
   165b4:	200005ac 	.word	0x200005ac
   165b8:	200005c0 	.word	0x200005c0
   165bc:	00017689 	.word	0x00017689
   165c0:	0000ffff 	.word	0x0000ffff
   165c4:	0001684d 	.word	0x0001684d
   165c8:	0001702d 	.word	0x0001702d
   165cc:	00017631 	.word	0x00017631

000165d0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   165d0:	b590      	push	{r4, r7, lr}
   165d2:	b08b      	sub	sp, #44	; 0x2c
   165d4:	af00      	add	r7, sp, #0
   165d6:	60f8      	str	r0, [r7, #12]
   165d8:	607a      	str	r2, [r7, #4]
   165da:	230b      	movs	r3, #11
   165dc:	18fb      	adds	r3, r7, r3
   165de:	1c0a      	adds	r2, r1, #0
   165e0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   165e2:	68fb      	ldr	r3, [r7, #12]
   165e4:	2bfe      	cmp	r3, #254	; 0xfe
   165e6:	d904      	bls.n	165f2 <prvTraceStoreKernelCall+0x22>
   165e8:	4b39      	ldr	r3, [pc, #228]	; (166d0 <prvTraceStoreKernelCall+0x100>)
   165ea:	0018      	movs	r0, r3
   165ec:	4b39      	ldr	r3, [pc, #228]	; (166d4 <prvTraceStoreKernelCall+0x104>)
   165ee:	4798      	blx	r3
   165f0:	e06b      	b.n	166ca <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   165f2:	230b      	movs	r3, #11
   165f4:	18fb      	adds	r3, r7, r3
   165f6:	781b      	ldrb	r3, [r3, #0]
   165f8:	2b08      	cmp	r3, #8
   165fa:	d904      	bls.n	16606 <prvTraceStoreKernelCall+0x36>
   165fc:	4b36      	ldr	r3, [pc, #216]	; (166d8 <prvTraceStoreKernelCall+0x108>)
   165fe:	0018      	movs	r0, r3
   16600:	4b34      	ldr	r3, [pc, #208]	; (166d4 <prvTraceStoreKernelCall+0x104>)
   16602:	4798      	blx	r3
   16604:	e061      	b.n	166ca <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   16606:	4b35      	ldr	r3, [pc, #212]	; (166dc <prvTraceStoreKernelCall+0x10c>)
   16608:	681a      	ldr	r2, [r3, #0]
   1660a:	230b      	movs	r3, #11
   1660c:	18fb      	adds	r3, r7, r3
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	2164      	movs	r1, #100	; 0x64
   16612:	18d3      	adds	r3, r2, r3
   16614:	185b      	adds	r3, r3, r1
   16616:	781b      	ldrb	r3, [r3, #0]
   16618:	001a      	movs	r2, r3
   1661a:	687b      	ldr	r3, [r7, #4]
   1661c:	429a      	cmp	r2, r3
   1661e:	d204      	bcs.n	1662a <prvTraceStoreKernelCall+0x5a>
   16620:	4b2f      	ldr	r3, [pc, #188]	; (166e0 <prvTraceStoreKernelCall+0x110>)
   16622:	0018      	movs	r0, r3
   16624:	4b2b      	ldr	r3, [pc, #172]	; (166d4 <prvTraceStoreKernelCall+0x104>)
   16626:	4798      	blx	r3
   16628:	e04f      	b.n	166ca <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1662a:	4b2e      	ldr	r3, [pc, #184]	; (166e4 <prvTraceStoreKernelCall+0x114>)
   1662c:	681b      	ldr	r3, [r3, #0]
   1662e:	2b00      	cmp	r3, #0
   16630:	d004      	beq.n	1663c <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   16632:	4b2d      	ldr	r3, [pc, #180]	; (166e8 <prvTraceStoreKernelCall+0x118>)
   16634:	0018      	movs	r0, r3
   16636:	4b27      	ldr	r3, [pc, #156]	; (166d4 <prvTraceStoreKernelCall+0x104>)
   16638:	4798      	blx	r3
		return;
   1663a:	e046      	b.n	166ca <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1663c:	4b2b      	ldr	r3, [pc, #172]	; (166ec <prvTraceStoreKernelCall+0x11c>)
   1663e:	781b      	ldrb	r3, [r3, #0]
   16640:	2b00      	cmp	r3, #0
   16642:	d041      	beq.n	166c8 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16644:	f3ef 8310 	mrs	r3, PRIMASK
   16648:	617b      	str	r3, [r7, #20]
  return(result);
   1664a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1664c:	627b      	str	r3, [r7, #36]	; 0x24
   1664e:	2301      	movs	r3, #1
   16650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16652:	69bb      	ldr	r3, [r7, #24]
   16654:	f383 8810 	msr	PRIMASK, r3
   16658:	4b22      	ldr	r3, [pc, #136]	; (166e4 <prvTraceStoreKernelCall+0x114>)
   1665a:	681b      	ldr	r3, [r3, #0]
   1665c:	1c5a      	adds	r2, r3, #1
   1665e:	4b21      	ldr	r3, [pc, #132]	; (166e4 <prvTraceStoreKernelCall+0x114>)
   16660:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   16662:	4b1e      	ldr	r3, [pc, #120]	; (166dc <prvTraceStoreKernelCall+0x10c>)
   16664:	681b      	ldr	r3, [r3, #0]
   16666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16668:	2b00      	cmp	r3, #0
   1666a:	d022      	beq.n	166b2 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1666c:	2322      	movs	r3, #34	; 0x22
   1666e:	18fc      	adds	r4, r7, r3
   16670:	4b1f      	ldr	r3, [pc, #124]	; (166f0 <prvTraceStoreKernelCall+0x120>)
   16672:	0018      	movs	r0, r3
   16674:	4b1f      	ldr	r3, [pc, #124]	; (166f4 <prvTraceStoreKernelCall+0x124>)
   16676:	4798      	blx	r3
   16678:	0003      	movs	r3, r0
   1667a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1667c:	2321      	movs	r3, #33	; 0x21
   1667e:	18fb      	adds	r3, r7, r3
   16680:	687a      	ldr	r2, [r7, #4]
   16682:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   16684:	4b1c      	ldr	r3, [pc, #112]	; (166f8 <prvTraceStoreKernelCall+0x128>)
   16686:	4798      	blx	r3
   16688:	0003      	movs	r3, r0
   1668a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1668c:	69fb      	ldr	r3, [r7, #28]
   1668e:	2b00      	cmp	r3, #0
   16690:	d00f      	beq.n	166b2 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   16692:	69fb      	ldr	r3, [r7, #28]
   16694:	2222      	movs	r2, #34	; 0x22
   16696:	18ba      	adds	r2, r7, r2
   16698:	8812      	ldrh	r2, [r2, #0]
   1669a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1669c:	68fb      	ldr	r3, [r7, #12]
   1669e:	b2da      	uxtb	r2, r3
   166a0:	69fb      	ldr	r3, [r7, #28]
   166a2:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   166a4:	69fb      	ldr	r3, [r7, #28]
   166a6:	2221      	movs	r2, #33	; 0x21
   166a8:	18ba      	adds	r2, r7, r2
   166aa:	7812      	ldrb	r2, [r2, #0]
   166ac:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   166ae:	4b13      	ldr	r3, [pc, #76]	; (166fc <prvTraceStoreKernelCall+0x12c>)
   166b0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   166b2:	4b0c      	ldr	r3, [pc, #48]	; (166e4 <prvTraceStoreKernelCall+0x114>)
   166b4:	681b      	ldr	r3, [r3, #0]
   166b6:	1e5a      	subs	r2, r3, #1
   166b8:	4b0a      	ldr	r3, [pc, #40]	; (166e4 <prvTraceStoreKernelCall+0x114>)
   166ba:	601a      	str	r2, [r3, #0]
   166bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   166be:	613b      	str	r3, [r7, #16]
   166c0:	693b      	ldr	r3, [r7, #16]
   166c2:	f383 8810 	msr	PRIMASK, r3
   166c6:	e000      	b.n	166ca <prvTraceStoreKernelCall+0xfa>
		return;
   166c8:	46c0      	nop			; (mov r8, r8)
}
   166ca:	46bd      	mov	sp, r7
   166cc:	b00b      	add	sp, #44	; 0x2c
   166ce:	bd90      	pop	{r4, r7, pc}
   166d0:	000236f8 	.word	0x000236f8
   166d4:	00017475 	.word	0x00017475
   166d8:	00023730 	.word	0x00023730
   166dc:	20000654 	.word	0x20000654
   166e0:	00023778 	.word	0x00023778
   166e4:	200005ac 	.word	0x200005ac
   166e8:	000237c0 	.word	0x000237c0
   166ec:	200005b8 	.word	0x200005b8
   166f0:	0000ffff 	.word	0x0000ffff
   166f4:	00017689 	.word	0x00017689
   166f8:	0001702d 	.word	0x0001702d
   166fc:	00017631 	.word	0x00017631

00016700 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   16700:	b580      	push	{r7, lr}
   16702:	b08a      	sub	sp, #40	; 0x28
   16704:	af00      	add	r7, sp, #0
   16706:	60f8      	str	r0, [r7, #12]
   16708:	607a      	str	r2, [r7, #4]
   1670a:	603b      	str	r3, [r7, #0]
   1670c:	230b      	movs	r3, #11
   1670e:	18fb      	adds	r3, r7, r3
   16710:	1c0a      	adds	r2, r1, #0
   16712:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   16714:	68fb      	ldr	r3, [r7, #12]
   16716:	2bfe      	cmp	r3, #254	; 0xfe
   16718:	d904      	bls.n	16724 <prvTraceStoreKernelCallWithParam+0x24>
   1671a:	4b40      	ldr	r3, [pc, #256]	; (1681c <prvTraceStoreKernelCallWithParam+0x11c>)
   1671c:	0018      	movs	r0, r3
   1671e:	4b40      	ldr	r3, [pc, #256]	; (16820 <prvTraceStoreKernelCallWithParam+0x120>)
   16720:	4798      	blx	r3
   16722:	e077      	b.n	16814 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16724:	230b      	movs	r3, #11
   16726:	18fb      	adds	r3, r7, r3
   16728:	781b      	ldrb	r3, [r3, #0]
   1672a:	2b08      	cmp	r3, #8
   1672c:	d904      	bls.n	16738 <prvTraceStoreKernelCallWithParam+0x38>
   1672e:	4b3d      	ldr	r3, [pc, #244]	; (16824 <prvTraceStoreKernelCallWithParam+0x124>)
   16730:	0018      	movs	r0, r3
   16732:	4b3b      	ldr	r3, [pc, #236]	; (16820 <prvTraceStoreKernelCallWithParam+0x120>)
   16734:	4798      	blx	r3
   16736:	e06d      	b.n	16814 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   16738:	4b3b      	ldr	r3, [pc, #236]	; (16828 <prvTraceStoreKernelCallWithParam+0x128>)
   1673a:	681a      	ldr	r2, [r3, #0]
   1673c:	230b      	movs	r3, #11
   1673e:	18fb      	adds	r3, r7, r3
   16740:	781b      	ldrb	r3, [r3, #0]
   16742:	2164      	movs	r1, #100	; 0x64
   16744:	18d3      	adds	r3, r2, r3
   16746:	185b      	adds	r3, r3, r1
   16748:	781b      	ldrb	r3, [r3, #0]
   1674a:	001a      	movs	r2, r3
   1674c:	687b      	ldr	r3, [r7, #4]
   1674e:	429a      	cmp	r2, r3
   16750:	d204      	bcs.n	1675c <prvTraceStoreKernelCallWithParam+0x5c>
   16752:	4b36      	ldr	r3, [pc, #216]	; (1682c <prvTraceStoreKernelCallWithParam+0x12c>)
   16754:	0018      	movs	r0, r3
   16756:	4b32      	ldr	r3, [pc, #200]	; (16820 <prvTraceStoreKernelCallWithParam+0x120>)
   16758:	4798      	blx	r3
   1675a:	e05b      	b.n	16814 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1675c:	4b34      	ldr	r3, [pc, #208]	; (16830 <prvTraceStoreKernelCallWithParam+0x130>)
   1675e:	681b      	ldr	r3, [r3, #0]
   16760:	2b00      	cmp	r3, #0
   16762:	d004      	beq.n	1676e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   16764:	4b33      	ldr	r3, [pc, #204]	; (16834 <prvTraceStoreKernelCallWithParam+0x134>)
   16766:	0018      	movs	r0, r3
   16768:	4b2d      	ldr	r3, [pc, #180]	; (16820 <prvTraceStoreKernelCallWithParam+0x120>)
   1676a:	4798      	blx	r3
		return;
   1676c:	e052      	b.n	16814 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1676e:	f3ef 8310 	mrs	r3, PRIMASK
   16772:	617b      	str	r3, [r7, #20]
  return(result);
   16774:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   16776:	627b      	str	r3, [r7, #36]	; 0x24
   16778:	2301      	movs	r3, #1
   1677a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1677c:	69bb      	ldr	r3, [r7, #24]
   1677e:	f383 8810 	msr	PRIMASK, r3
   16782:	4b2b      	ldr	r3, [pc, #172]	; (16830 <prvTraceStoreKernelCallWithParam+0x130>)
   16784:	681b      	ldr	r3, [r3, #0]
   16786:	1c5a      	adds	r2, r3, #1
   16788:	4b29      	ldr	r3, [pc, #164]	; (16830 <prvTraceStoreKernelCallWithParam+0x130>)
   1678a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1678c:	4b26      	ldr	r3, [pc, #152]	; (16828 <prvTraceStoreKernelCallWithParam+0x128>)
   1678e:	681b      	ldr	r3, [r3, #0]
   16790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16792:	2b00      	cmp	r3, #0
   16794:	d034      	beq.n	16800 <prvTraceStoreKernelCallWithParam+0x100>
   16796:	4b28      	ldr	r3, [pc, #160]	; (16838 <prvTraceStoreKernelCallWithParam+0x138>)
   16798:	781b      	ldrb	r3, [r3, #0]
   1679a:	2b00      	cmp	r3, #0
   1679c:	d030      	beq.n	16800 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1679e:	20ff      	movs	r0, #255	; 0xff
   167a0:	4b26      	ldr	r3, [pc, #152]	; (1683c <prvTraceStoreKernelCallWithParam+0x13c>)
   167a2:	4798      	blx	r3
   167a4:	0003      	movs	r3, r0
   167a6:	001a      	movs	r2, r3
   167a8:	2323      	movs	r3, #35	; 0x23
   167aa:	18fb      	adds	r3, r7, r3
   167ac:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   167ae:	683b      	ldr	r3, [r7, #0]
   167b0:	0019      	movs	r1, r3
   167b2:	20ff      	movs	r0, #255	; 0xff
   167b4:	4b22      	ldr	r3, [pc, #136]	; (16840 <prvTraceStoreKernelCallWithParam+0x140>)
   167b6:	4798      	blx	r3
   167b8:	0002      	movs	r2, r0
   167ba:	2322      	movs	r3, #34	; 0x22
   167bc:	18fb      	adds	r3, r7, r3
   167be:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   167c0:	2321      	movs	r3, #33	; 0x21
   167c2:	18fb      	adds	r3, r7, r3
   167c4:	687a      	ldr	r2, [r7, #4]
   167c6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   167c8:	4b1e      	ldr	r3, [pc, #120]	; (16844 <prvTraceStoreKernelCallWithParam+0x144>)
   167ca:	4798      	blx	r3
   167cc:	0003      	movs	r3, r0
   167ce:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   167d0:	69fb      	ldr	r3, [r7, #28]
   167d2:	2b00      	cmp	r3, #0
   167d4:	d014      	beq.n	16800 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   167d6:	69fb      	ldr	r3, [r7, #28]
   167d8:	2223      	movs	r2, #35	; 0x23
   167da:	18ba      	adds	r2, r7, r2
   167dc:	7812      	ldrb	r2, [r2, #0]
   167de:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   167e0:	68fb      	ldr	r3, [r7, #12]
   167e2:	b2da      	uxtb	r2, r3
   167e4:	69fb      	ldr	r3, [r7, #28]
   167e6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   167e8:	69fb      	ldr	r3, [r7, #28]
   167ea:	2221      	movs	r2, #33	; 0x21
   167ec:	18ba      	adds	r2, r7, r2
   167ee:	7812      	ldrb	r2, [r2, #0]
   167f0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   167f2:	69fb      	ldr	r3, [r7, #28]
   167f4:	2222      	movs	r2, #34	; 0x22
   167f6:	18ba      	adds	r2, r7, r2
   167f8:	7812      	ldrb	r2, [r2, #0]
   167fa:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   167fc:	4b12      	ldr	r3, [pc, #72]	; (16848 <prvTraceStoreKernelCallWithParam+0x148>)
   167fe:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   16800:	4b0b      	ldr	r3, [pc, #44]	; (16830 <prvTraceStoreKernelCallWithParam+0x130>)
   16802:	681b      	ldr	r3, [r3, #0]
   16804:	1e5a      	subs	r2, r3, #1
   16806:	4b0a      	ldr	r3, [pc, #40]	; (16830 <prvTraceStoreKernelCallWithParam+0x130>)
   16808:	601a      	str	r2, [r3, #0]
   1680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1680c:	613b      	str	r3, [r7, #16]
   1680e:	693b      	ldr	r3, [r7, #16]
   16810:	f383 8810 	msr	PRIMASK, r3
}
   16814:	46bd      	mov	sp, r7
   16816:	b00a      	add	sp, #40	; 0x28
   16818:	bd80      	pop	{r7, pc}
   1681a:	46c0      	nop			; (mov r8, r8)
   1681c:	000237f8 	.word	0x000237f8
   16820:	00017475 	.word	0x00017475
   16824:	00023838 	.word	0x00023838
   16828:	20000654 	.word	0x20000654
   1682c:	00023888 	.word	0x00023888
   16830:	200005ac 	.word	0x200005ac
   16834:	000238d8 	.word	0x000238d8
   16838:	200005b8 	.word	0x200005b8
   1683c:	00017689 	.word	0x00017689
   16840:	0001684d 	.word	0x0001684d
   16844:	0001702d 	.word	0x0001702d
   16848:	00017631 	.word	0x00017631

0001684c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1684c:	b580      	push	{r7, lr}
   1684e:	b084      	sub	sp, #16
   16850:	af00      	add	r7, sp, #0
   16852:	6078      	str	r0, [r7, #4]
   16854:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   16856:	687b      	ldr	r3, [r7, #4]
   16858:	2bff      	cmp	r3, #255	; 0xff
   1685a:	d009      	beq.n	16870 <prvTraceGetParam+0x24>
   1685c:	687b      	ldr	r3, [r7, #4]
   1685e:	4a19      	ldr	r2, [pc, #100]	; (168c4 <prvTraceGetParam+0x78>)
   16860:	4293      	cmp	r3, r2
   16862:	d005      	beq.n	16870 <prvTraceGetParam+0x24>
   16864:	4b18      	ldr	r3, [pc, #96]	; (168c8 <prvTraceGetParam+0x7c>)
   16866:	0018      	movs	r0, r3
   16868:	4b18      	ldr	r3, [pc, #96]	; (168cc <prvTraceGetParam+0x80>)
   1686a:	4798      	blx	r3
   1686c:	683b      	ldr	r3, [r7, #0]
   1686e:	e024      	b.n	168ba <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   16870:	683a      	ldr	r2, [r7, #0]
   16872:	687b      	ldr	r3, [r7, #4]
   16874:	429a      	cmp	r2, r3
   16876:	d801      	bhi.n	1687c <prvTraceGetParam+0x30>
	{
		return param;
   16878:	683b      	ldr	r3, [r7, #0]
   1687a:	e01e      	b.n	168ba <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1687c:	4b14      	ldr	r3, [pc, #80]	; (168d0 <prvTraceGetParam+0x84>)
   1687e:	4798      	blx	r3
   16880:	0003      	movs	r3, r0
   16882:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   16884:	68fb      	ldr	r3, [r7, #12]
   16886:	2b00      	cmp	r3, #0
   16888:	d014      	beq.n	168b4 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1688a:	68fb      	ldr	r3, [r7, #12]
   1688c:	2201      	movs	r2, #1
   1688e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   16890:	687b      	ldr	r3, [r7, #4]
   16892:	43db      	mvns	r3, r3
   16894:	683a      	ldr	r2, [r7, #0]
   16896:	4013      	ands	r3, r2
   16898:	0a1b      	lsrs	r3, r3, #8
   1689a:	b2da      	uxtb	r2, r3
   1689c:	68fb      	ldr	r3, [r7, #12]
   1689e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   168a0:	687b      	ldr	r3, [r7, #4]
   168a2:	43db      	mvns	r3, r3
   168a4:	683a      	ldr	r2, [r7, #0]
   168a6:	4013      	ands	r3, r2
   168a8:	0c1b      	lsrs	r3, r3, #16
   168aa:	b29a      	uxth	r2, r3
   168ac:	68fb      	ldr	r3, [r7, #12]
   168ae:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   168b0:	4b08      	ldr	r3, [pc, #32]	; (168d4 <prvTraceGetParam+0x88>)
   168b2:	4798      	blx	r3
		}

		return param & param_max;
   168b4:	683b      	ldr	r3, [r7, #0]
   168b6:	687a      	ldr	r2, [r7, #4]
   168b8:	4013      	ands	r3, r2
	}
}
   168ba:	0018      	movs	r0, r3
   168bc:	46bd      	mov	sp, r7
   168be:	b004      	add	sp, #16
   168c0:	bd80      	pop	{r7, pc}
   168c2:	46c0      	nop			; (mov r8, r8)
   168c4:	0000ffff 	.word	0x0000ffff
   168c8:	00023910 	.word	0x00023910
   168cc:	00017475 	.word	0x00017475
   168d0:	0001702d 	.word	0x0001702d
   168d4:	00017631 	.word	0x00017631

000168d8 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   168d8:	b580      	push	{r7, lr}
   168da:	b08a      	sub	sp, #40	; 0x28
   168dc:	af00      	add	r7, sp, #0
   168de:	6078      	str	r0, [r7, #4]
   168e0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   168e2:	2326      	movs	r3, #38	; 0x26
   168e4:	18fb      	adds	r3, r7, r3
   168e6:	2200      	movs	r2, #0
   168e8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   168ea:	687b      	ldr	r3, [r7, #4]
   168ec:	2bfe      	cmp	r3, #254	; 0xfe
   168ee:	d904      	bls.n	168fa <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   168f0:	4b2d      	ldr	r3, [pc, #180]	; (169a8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   168f2:	0018      	movs	r0, r3
   168f4:	4b2d      	ldr	r3, [pc, #180]	; (169ac <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   168f6:	4798      	blx	r3
   168f8:	e053      	b.n	169a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   168fa:	4b2d      	ldr	r3, [pc, #180]	; (169b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   168fc:	681b      	ldr	r3, [r3, #0]
   168fe:	2b00      	cmp	r3, #0
   16900:	d004      	beq.n	1690c <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   16902:	4b2c      	ldr	r3, [pc, #176]	; (169b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   16904:	0018      	movs	r0, r3
   16906:	4b29      	ldr	r3, [pc, #164]	; (169ac <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   16908:	4798      	blx	r3
		return;
   1690a:	e04a      	b.n	169a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1690c:	f3ef 8310 	mrs	r3, PRIMASK
   16910:	613b      	str	r3, [r7, #16]
  return(result);
   16912:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   16914:	623b      	str	r3, [r7, #32]
   16916:	2301      	movs	r3, #1
   16918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1691a:	697b      	ldr	r3, [r7, #20]
   1691c:	f383 8810 	msr	PRIMASK, r3
   16920:	4b23      	ldr	r3, [pc, #140]	; (169b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16922:	681b      	ldr	r3, [r3, #0]
   16924:	1c5a      	adds	r2, r3, #1
   16926:	4b22      	ldr	r3, [pc, #136]	; (169b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16928:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1692a:	4b23      	ldr	r3, [pc, #140]	; (169b8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1692c:	681b      	ldr	r3, [r3, #0]
   1692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16930:	2b00      	cmp	r3, #0
   16932:	d02c      	beq.n	1698e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   16934:	4b21      	ldr	r3, [pc, #132]	; (169bc <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   16936:	781b      	ldrb	r3, [r3, #0]
   16938:	2b00      	cmp	r3, #0
   1693a:	d028      	beq.n	1698e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1693c:	20ff      	movs	r0, #255	; 0xff
   1693e:	4b20      	ldr	r3, [pc, #128]	; (169c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   16940:	4798      	blx	r3
   16942:	0003      	movs	r3, r0
   16944:	001a      	movs	r2, r3
   16946:	231f      	movs	r3, #31
   16948:	18fb      	adds	r3, r7, r3
   1694a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1694c:	683b      	ldr	r3, [r7, #0]
   1694e:	4a1d      	ldr	r2, [pc, #116]	; (169c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   16950:	0019      	movs	r1, r3
   16952:	0010      	movs	r0, r2
   16954:	4b1c      	ldr	r3, [pc, #112]	; (169c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   16956:	4798      	blx	r3
   16958:	0002      	movs	r2, r0
   1695a:	2326      	movs	r3, #38	; 0x26
   1695c:	18fb      	adds	r3, r7, r3
   1695e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   16960:	4b1a      	ldr	r3, [pc, #104]	; (169cc <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   16962:	4798      	blx	r3
   16964:	0003      	movs	r3, r0
   16966:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   16968:	69bb      	ldr	r3, [r7, #24]
   1696a:	2b00      	cmp	r3, #0
   1696c:	d00f      	beq.n	1698e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1696e:	69bb      	ldr	r3, [r7, #24]
   16970:	221f      	movs	r2, #31
   16972:	18ba      	adds	r2, r7, r2
   16974:	7812      	ldrb	r2, [r2, #0]
   16976:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   16978:	687b      	ldr	r3, [r7, #4]
   1697a:	b2da      	uxtb	r2, r3
   1697c:	69bb      	ldr	r3, [r7, #24]
   1697e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   16980:	69bb      	ldr	r3, [r7, #24]
   16982:	2226      	movs	r2, #38	; 0x26
   16984:	18ba      	adds	r2, r7, r2
   16986:	8812      	ldrh	r2, [r2, #0]
   16988:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1698a:	4b11      	ldr	r3, [pc, #68]	; (169d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1698c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1698e:	4b08      	ldr	r3, [pc, #32]	; (169b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16990:	681b      	ldr	r3, [r3, #0]
   16992:	1e5a      	subs	r2, r3, #1
   16994:	4b06      	ldr	r3, [pc, #24]	; (169b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   16996:	601a      	str	r2, [r3, #0]
   16998:	6a3b      	ldr	r3, [r7, #32]
   1699a:	60fb      	str	r3, [r7, #12]
   1699c:	68fb      	ldr	r3, [r7, #12]
   1699e:	f383 8810 	msr	PRIMASK, r3
}
   169a2:	46bd      	mov	sp, r7
   169a4:	b00a      	add	sp, #40	; 0x28
   169a6:	bd80      	pop	{r7, pc}
   169a8:	0002394c 	.word	0x0002394c
   169ac:	00017475 	.word	0x00017475
   169b0:	200005ac 	.word	0x200005ac
   169b4:	000239a4 	.word	0x000239a4
   169b8:	20000654 	.word	0x20000654
   169bc:	200005b8 	.word	0x200005b8
   169c0:	00017689 	.word	0x00017689
   169c4:	0000ffff 	.word	0x0000ffff
   169c8:	0001684d 	.word	0x0001684d
   169cc:	0001702d 	.word	0x0001702d
   169d0:	00017631 	.word	0x00017631

000169d4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   169d4:	b590      	push	{r4, r7, lr}
   169d6:	b089      	sub	sp, #36	; 0x24
   169d8:	af00      	add	r7, sp, #0
   169da:	0002      	movs	r2, r0
   169dc:	1dfb      	adds	r3, r7, #7
   169de:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   169e0:	1dfb      	adds	r3, r7, #7
   169e2:	781b      	ldrb	r3, [r3, #0]
   169e4:	2b0f      	cmp	r3, #15
   169e6:	d904      	bls.n	169f2 <prvTraceStoreTaskswitch+0x1e>
   169e8:	4b34      	ldr	r3, [pc, #208]	; (16abc <prvTraceStoreTaskswitch+0xe8>)
   169ea:	0018      	movs	r0, r3
   169ec:	4b34      	ldr	r3, [pc, #208]	; (16ac0 <prvTraceStoreTaskswitch+0xec>)
   169ee:	4798      	blx	r3
   169f0:	e061      	b.n	16ab6 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   169f2:	f3ef 8310 	mrs	r3, PRIMASK
   169f6:	60fb      	str	r3, [r7, #12]
  return(result);
   169f8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   169fa:	61fb      	str	r3, [r7, #28]
   169fc:	2301      	movs	r3, #1
   169fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16a00:	693b      	ldr	r3, [r7, #16]
   16a02:	f383 8810 	msr	PRIMASK, r3
   16a06:	4b2f      	ldr	r3, [pc, #188]	; (16ac4 <prvTraceStoreTaskswitch+0xf0>)
   16a08:	681b      	ldr	r3, [r3, #0]
   16a0a:	1c5a      	adds	r2, r3, #1
   16a0c:	4b2d      	ldr	r3, [pc, #180]	; (16ac4 <prvTraceStoreTaskswitch+0xf0>)
   16a0e:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   16a10:	4b2d      	ldr	r3, [pc, #180]	; (16ac8 <prvTraceStoreTaskswitch+0xf4>)
   16a12:	781b      	ldrb	r3, [r3, #0]
   16a14:	1dfa      	adds	r2, r7, #7
   16a16:	7812      	ldrb	r2, [r2, #0]
   16a18:	429a      	cmp	r2, r3
   16a1a:	d042      	beq.n	16aa2 <prvTraceStoreTaskswitch+0xce>
   16a1c:	4b2b      	ldr	r3, [pc, #172]	; (16acc <prvTraceStoreTaskswitch+0xf8>)
   16a1e:	681b      	ldr	r3, [r3, #0]
   16a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16a22:	2b00      	cmp	r3, #0
   16a24:	d03d      	beq.n	16aa2 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   16a26:	4b2a      	ldr	r3, [pc, #168]	; (16ad0 <prvTraceStoreTaskswitch+0xfc>)
   16a28:	2200      	movs	r2, #0
   16a2a:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16a2c:	231a      	movs	r3, #26
   16a2e:	18fc      	adds	r4, r7, r3
   16a30:	4b28      	ldr	r3, [pc, #160]	; (16ad4 <prvTraceStoreTaskswitch+0x100>)
   16a32:	0018      	movs	r0, r3
   16a34:	4b28      	ldr	r3, [pc, #160]	; (16ad8 <prvTraceStoreTaskswitch+0x104>)
   16a36:	4798      	blx	r3
   16a38:	0003      	movs	r3, r0
   16a3a:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   16a3c:	4b22      	ldr	r3, [pc, #136]	; (16ac8 <prvTraceStoreTaskswitch+0xf4>)
   16a3e:	1dfa      	adds	r2, r7, #7
   16a40:	7812      	ldrb	r2, [r2, #0]
   16a42:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   16a44:	2319      	movs	r3, #25
   16a46:	18fb      	adds	r3, r7, r3
   16a48:	4a1f      	ldr	r2, [pc, #124]	; (16ac8 <prvTraceStoreTaskswitch+0xf4>)
   16a4a:	7812      	ldrb	r2, [r2, #0]
   16a4c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   16a4e:	4b23      	ldr	r3, [pc, #140]	; (16adc <prvTraceStoreTaskswitch+0x108>)
   16a50:	4798      	blx	r3
   16a52:	0003      	movs	r3, r0
   16a54:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   16a56:	697b      	ldr	r3, [r7, #20]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d022      	beq.n	16aa2 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   16a5c:	4b1a      	ldr	r3, [pc, #104]	; (16ac8 <prvTraceStoreTaskswitch+0xf4>)
   16a5e:	781b      	ldrb	r3, [r3, #0]
   16a60:	0019      	movs	r1, r3
   16a62:	2003      	movs	r0, #3
   16a64:	4b1e      	ldr	r3, [pc, #120]	; (16ae0 <prvTraceStoreTaskswitch+0x10c>)
   16a66:	4798      	blx	r3
   16a68:	0003      	movs	r3, r0
   16a6a:	2b01      	cmp	r3, #1
   16a6c:	d103      	bne.n	16a76 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   16a6e:	697b      	ldr	r3, [r7, #20]
   16a70:	2207      	movs	r2, #7
   16a72:	701a      	strb	r2, [r3, #0]
   16a74:	e002      	b.n	16a7c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   16a76:	697b      	ldr	r3, [r7, #20]
   16a78:	2206      	movs	r2, #6
   16a7a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   16a7c:	697b      	ldr	r3, [r7, #20]
   16a7e:	221a      	movs	r2, #26
   16a80:	18ba      	adds	r2, r7, r2
   16a82:	8812      	ldrh	r2, [r2, #0]
   16a84:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   16a86:	697b      	ldr	r3, [r7, #20]
   16a88:	2219      	movs	r2, #25
   16a8a:	18ba      	adds	r2, r7, r2
   16a8c:	7812      	ldrb	r2, [r2, #0]
   16a8e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   16a90:	4b0d      	ldr	r3, [pc, #52]	; (16ac8 <prvTraceStoreTaskswitch+0xf4>)
   16a92:	781b      	ldrb	r3, [r3, #0]
   16a94:	2201      	movs	r2, #1
   16a96:	0019      	movs	r1, r3
   16a98:	2003      	movs	r0, #3
   16a9a:	4b12      	ldr	r3, [pc, #72]	; (16ae4 <prvTraceStoreTaskswitch+0x110>)
   16a9c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   16a9e:	4b12      	ldr	r3, [pc, #72]	; (16ae8 <prvTraceStoreTaskswitch+0x114>)
   16aa0:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   16aa2:	4b08      	ldr	r3, [pc, #32]	; (16ac4 <prvTraceStoreTaskswitch+0xf0>)
   16aa4:	681b      	ldr	r3, [r3, #0]
   16aa6:	1e5a      	subs	r2, r3, #1
   16aa8:	4b06      	ldr	r3, [pc, #24]	; (16ac4 <prvTraceStoreTaskswitch+0xf0>)
   16aaa:	601a      	str	r2, [r3, #0]
   16aac:	69fb      	ldr	r3, [r7, #28]
   16aae:	60bb      	str	r3, [r7, #8]
   16ab0:	68bb      	ldr	r3, [r7, #8]
   16ab2:	f383 8810 	msr	PRIMASK, r3
}
   16ab6:	46bd      	mov	sp, r7
   16ab8:	b009      	add	sp, #36	; 0x24
   16aba:	bd90      	pop	{r4, r7, pc}
   16abc:	000239dc 	.word	0x000239dc
   16ac0:	00017475 	.word	0x00017475
   16ac4:	200005ac 	.word	0x200005ac
   16ac8:	200005b8 	.word	0x200005b8
   16acc:	20000654 	.word	0x20000654
   16ad0:	20000598 	.word	0x20000598
   16ad4:	0000ffff 	.word	0x0000ffff
   16ad8:	00017689 	.word	0x00017689
   16adc:	0001702d 	.word	0x0001702d
   16ae0:	00016cd1 	.word	0x00016cd1
   16ae4:	00016c2d 	.word	0x00016c2d
   16ae8:	00017631 	.word	0x00017631

00016aec <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   16aec:	b590      	push	{r4, r7, lr}
   16aee:	b083      	sub	sp, #12
   16af0:	af00      	add	r7, sp, #0
   16af2:	0004      	movs	r4, r0
   16af4:	0008      	movs	r0, r1
   16af6:	0011      	movs	r1, r2
   16af8:	1dfb      	adds	r3, r7, #7
   16afa:	1c22      	adds	r2, r4, #0
   16afc:	701a      	strb	r2, [r3, #0]
   16afe:	1dbb      	adds	r3, r7, #6
   16b00:	1c02      	adds	r2, r0, #0
   16b02:	701a      	strb	r2, [r3, #0]
   16b04:	1d7b      	adds	r3, r7, #5
   16b06:	1c0a      	adds	r2, r1, #0
   16b08:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   16b0a:	1dfb      	adds	r3, r7, #7
   16b0c:	781b      	ldrb	r3, [r3, #0]
   16b0e:	2b08      	cmp	r3, #8
   16b10:	d904      	bls.n	16b1c <prvTraceSetPriorityProperty+0x30>
   16b12:	4b1a      	ldr	r3, [pc, #104]	; (16b7c <prvTraceSetPriorityProperty+0x90>)
   16b14:	0018      	movs	r0, r3
   16b16:	4b1a      	ldr	r3, [pc, #104]	; (16b80 <prvTraceSetPriorityProperty+0x94>)
   16b18:	4798      	blx	r3
   16b1a:	e02c      	b.n	16b76 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16b1c:	4b19      	ldr	r3, [pc, #100]	; (16b84 <prvTraceSetPriorityProperty+0x98>)
   16b1e:	681a      	ldr	r2, [r3, #0]
   16b20:	1dfb      	adds	r3, r7, #7
   16b22:	781b      	ldrb	r3, [r3, #0]
   16b24:	2164      	movs	r1, #100	; 0x64
   16b26:	18d3      	adds	r3, r2, r3
   16b28:	185b      	adds	r3, r3, r1
   16b2a:	781b      	ldrb	r3, [r3, #0]
   16b2c:	1dba      	adds	r2, r7, #6
   16b2e:	7812      	ldrb	r2, [r2, #0]
   16b30:	429a      	cmp	r2, r3
   16b32:	d904      	bls.n	16b3e <prvTraceSetPriorityProperty+0x52>
   16b34:	4b14      	ldr	r3, [pc, #80]	; (16b88 <prvTraceSetPriorityProperty+0x9c>)
   16b36:	0018      	movs	r0, r3
   16b38:	4b11      	ldr	r3, [pc, #68]	; (16b80 <prvTraceSetPriorityProperty+0x94>)
   16b3a:	4798      	blx	r3
   16b3c:	e01b      	b.n	16b76 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   16b3e:	4b11      	ldr	r3, [pc, #68]	; (16b84 <prvTraceSetPriorityProperty+0x98>)
   16b40:	681c      	ldr	r4, [r3, #0]
   16b42:	1dfb      	adds	r3, r7, #7
   16b44:	781a      	ldrb	r2, [r3, #0]
   16b46:	1dbb      	adds	r3, r7, #6
   16b48:	781b      	ldrb	r3, [r3, #0]
   16b4a:	0011      	movs	r1, r2
   16b4c:	0018      	movs	r0, r3
   16b4e:	4b0f      	ldr	r3, [pc, #60]	; (16b8c <prvTraceSetPriorityProperty+0xa0>)
   16b50:	4798      	blx	r3
   16b52:	0003      	movs	r3, r0
   16b54:	0018      	movs	r0, r3
   16b56:	4b0b      	ldr	r3, [pc, #44]	; (16b84 <prvTraceSetPriorityProperty+0x98>)
   16b58:	681a      	ldr	r2, [r3, #0]
   16b5a:	1dfb      	adds	r3, r7, #7
   16b5c:	781b      	ldrb	r3, [r3, #0]
   16b5e:	2170      	movs	r1, #112	; 0x70
   16b60:	18d3      	adds	r3, r2, r3
   16b62:	185b      	adds	r3, r3, r1
   16b64:	781b      	ldrb	r3, [r3, #0]
   16b66:	18c3      	adds	r3, r0, r3
   16b68:	3301      	adds	r3, #1
   16b6a:	229c      	movs	r2, #156	; 0x9c
   16b6c:	18e3      	adds	r3, r4, r3
   16b6e:	189b      	adds	r3, r3, r2
   16b70:	1d7a      	adds	r2, r7, #5
   16b72:	7812      	ldrb	r2, [r2, #0]
   16b74:	701a      	strb	r2, [r3, #0]
}
   16b76:	46bd      	mov	sp, r7
   16b78:	b003      	add	sp, #12
   16b7a:	bd90      	pop	{r4, r7, pc}
   16b7c:	00023b70 	.word	0x00023b70
   16b80:	00017475 	.word	0x00017475
   16b84:	20000654 	.word	0x20000654
   16b88:	00023bbc 	.word	0x00023bbc
   16b8c:	00017081 	.word	0x00017081

00016b90 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   16b90:	b590      	push	{r4, r7, lr}
   16b92:	b083      	sub	sp, #12
   16b94:	af00      	add	r7, sp, #0
   16b96:	0002      	movs	r2, r0
   16b98:	1dfb      	adds	r3, r7, #7
   16b9a:	701a      	strb	r2, [r3, #0]
   16b9c:	1dbb      	adds	r3, r7, #6
   16b9e:	1c0a      	adds	r2, r1, #0
   16ba0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   16ba2:	1dfb      	adds	r3, r7, #7
   16ba4:	781b      	ldrb	r3, [r3, #0]
   16ba6:	2b08      	cmp	r3, #8
   16ba8:	d905      	bls.n	16bb6 <prvTraceGetPriorityProperty+0x26>
   16baa:	4b1b      	ldr	r3, [pc, #108]	; (16c18 <prvTraceGetPriorityProperty+0x88>)
   16bac:	0018      	movs	r0, r3
   16bae:	4b1b      	ldr	r3, [pc, #108]	; (16c1c <prvTraceGetPriorityProperty+0x8c>)
   16bb0:	4798      	blx	r3
   16bb2:	2300      	movs	r3, #0
   16bb4:	e02b      	b.n	16c0e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16bb6:	4b1a      	ldr	r3, [pc, #104]	; (16c20 <prvTraceGetPriorityProperty+0x90>)
   16bb8:	681a      	ldr	r2, [r3, #0]
   16bba:	1dfb      	adds	r3, r7, #7
   16bbc:	781b      	ldrb	r3, [r3, #0]
   16bbe:	2164      	movs	r1, #100	; 0x64
   16bc0:	18d3      	adds	r3, r2, r3
   16bc2:	185b      	adds	r3, r3, r1
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	1dba      	adds	r2, r7, #6
   16bc8:	7812      	ldrb	r2, [r2, #0]
   16bca:	429a      	cmp	r2, r3
   16bcc:	d905      	bls.n	16bda <prvTraceGetPriorityProperty+0x4a>
   16bce:	4b15      	ldr	r3, [pc, #84]	; (16c24 <prvTraceGetPriorityProperty+0x94>)
   16bd0:	0018      	movs	r0, r3
   16bd2:	4b12      	ldr	r3, [pc, #72]	; (16c1c <prvTraceGetPriorityProperty+0x8c>)
   16bd4:	4798      	blx	r3
   16bd6:	2300      	movs	r3, #0
   16bd8:	e019      	b.n	16c0e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   16bda:	4b11      	ldr	r3, [pc, #68]	; (16c20 <prvTraceGetPriorityProperty+0x90>)
   16bdc:	681c      	ldr	r4, [r3, #0]
   16bde:	1dfb      	adds	r3, r7, #7
   16be0:	781a      	ldrb	r2, [r3, #0]
   16be2:	1dbb      	adds	r3, r7, #6
   16be4:	781b      	ldrb	r3, [r3, #0]
   16be6:	0011      	movs	r1, r2
   16be8:	0018      	movs	r0, r3
   16bea:	4b0f      	ldr	r3, [pc, #60]	; (16c28 <prvTraceGetPriorityProperty+0x98>)
   16bec:	4798      	blx	r3
   16bee:	0003      	movs	r3, r0
   16bf0:	0018      	movs	r0, r3
   16bf2:	4b0b      	ldr	r3, [pc, #44]	; (16c20 <prvTraceGetPriorityProperty+0x90>)
   16bf4:	681a      	ldr	r2, [r3, #0]
   16bf6:	1dfb      	adds	r3, r7, #7
   16bf8:	781b      	ldrb	r3, [r3, #0]
   16bfa:	2170      	movs	r1, #112	; 0x70
   16bfc:	18d3      	adds	r3, r2, r3
   16bfe:	185b      	adds	r3, r3, r1
   16c00:	781b      	ldrb	r3, [r3, #0]
   16c02:	18c3      	adds	r3, r0, r3
   16c04:	3301      	adds	r3, #1
   16c06:	229c      	movs	r2, #156	; 0x9c
   16c08:	18e3      	adds	r3, r4, r3
   16c0a:	189b      	adds	r3, r3, r2
   16c0c:	781b      	ldrb	r3, [r3, #0]
}
   16c0e:	0018      	movs	r0, r3
   16c10:	46bd      	mov	sp, r7
   16c12:	b003      	add	sp, #12
   16c14:	bd90      	pop	{r4, r7, pc}
   16c16:	46c0      	nop			; (mov r8, r8)
   16c18:	00023bfc 	.word	0x00023bfc
   16c1c:	00017475 	.word	0x00017475
   16c20:	20000654 	.word	0x20000654
   16c24:	00023c48 	.word	0x00023c48
   16c28:	00017081 	.word	0x00017081

00016c2c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   16c2c:	b590      	push	{r4, r7, lr}
   16c2e:	b083      	sub	sp, #12
   16c30:	af00      	add	r7, sp, #0
   16c32:	0004      	movs	r4, r0
   16c34:	0008      	movs	r0, r1
   16c36:	0011      	movs	r1, r2
   16c38:	1dfb      	adds	r3, r7, #7
   16c3a:	1c22      	adds	r2, r4, #0
   16c3c:	701a      	strb	r2, [r3, #0]
   16c3e:	1dbb      	adds	r3, r7, #6
   16c40:	1c02      	adds	r2, r0, #0
   16c42:	701a      	strb	r2, [r3, #0]
   16c44:	1d7b      	adds	r3, r7, #5
   16c46:	1c0a      	adds	r2, r1, #0
   16c48:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   16c4a:	1dfb      	adds	r3, r7, #7
   16c4c:	781b      	ldrb	r3, [r3, #0]
   16c4e:	2b08      	cmp	r3, #8
   16c50:	d904      	bls.n	16c5c <prvTraceSetObjectState+0x30>
   16c52:	4b1a      	ldr	r3, [pc, #104]	; (16cbc <prvTraceSetObjectState+0x90>)
   16c54:	0018      	movs	r0, r3
   16c56:	4b1a      	ldr	r3, [pc, #104]	; (16cc0 <prvTraceSetObjectState+0x94>)
   16c58:	4798      	blx	r3
   16c5a:	e02b      	b.n	16cb4 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16c5c:	4b19      	ldr	r3, [pc, #100]	; (16cc4 <prvTraceSetObjectState+0x98>)
   16c5e:	681a      	ldr	r2, [r3, #0]
   16c60:	1dfb      	adds	r3, r7, #7
   16c62:	781b      	ldrb	r3, [r3, #0]
   16c64:	2164      	movs	r1, #100	; 0x64
   16c66:	18d3      	adds	r3, r2, r3
   16c68:	185b      	adds	r3, r3, r1
   16c6a:	781b      	ldrb	r3, [r3, #0]
   16c6c:	1dba      	adds	r2, r7, #6
   16c6e:	7812      	ldrb	r2, [r2, #0]
   16c70:	429a      	cmp	r2, r3
   16c72:	d904      	bls.n	16c7e <prvTraceSetObjectState+0x52>
   16c74:	4b14      	ldr	r3, [pc, #80]	; (16cc8 <prvTraceSetObjectState+0x9c>)
   16c76:	0018      	movs	r0, r3
   16c78:	4b11      	ldr	r3, [pc, #68]	; (16cc0 <prvTraceSetObjectState+0x94>)
   16c7a:	4798      	blx	r3
   16c7c:	e01a      	b.n	16cb4 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   16c7e:	4b11      	ldr	r3, [pc, #68]	; (16cc4 <prvTraceSetObjectState+0x98>)
   16c80:	681c      	ldr	r4, [r3, #0]
   16c82:	1dfb      	adds	r3, r7, #7
   16c84:	781a      	ldrb	r2, [r3, #0]
   16c86:	1dbb      	adds	r3, r7, #6
   16c88:	781b      	ldrb	r3, [r3, #0]
   16c8a:	0011      	movs	r1, r2
   16c8c:	0018      	movs	r0, r3
   16c8e:	4b0f      	ldr	r3, [pc, #60]	; (16ccc <prvTraceSetObjectState+0xa0>)
   16c90:	4798      	blx	r3
   16c92:	0003      	movs	r3, r0
   16c94:	0018      	movs	r0, r3
   16c96:	4b0b      	ldr	r3, [pc, #44]	; (16cc4 <prvTraceSetObjectState+0x98>)
   16c98:	681a      	ldr	r2, [r3, #0]
   16c9a:	1dfb      	adds	r3, r7, #7
   16c9c:	781b      	ldrb	r3, [r3, #0]
   16c9e:	2170      	movs	r1, #112	; 0x70
   16ca0:	18d3      	adds	r3, r2, r3
   16ca2:	185b      	adds	r3, r3, r1
   16ca4:	781b      	ldrb	r3, [r3, #0]
   16ca6:	18c3      	adds	r3, r0, r3
   16ca8:	229c      	movs	r2, #156	; 0x9c
   16caa:	18e3      	adds	r3, r4, r3
   16cac:	189b      	adds	r3, r3, r2
   16cae:	1d7a      	adds	r2, r7, #5
   16cb0:	7812      	ldrb	r2, [r2, #0]
   16cb2:	701a      	strb	r2, [r3, #0]
}
   16cb4:	46bd      	mov	sp, r7
   16cb6:	b003      	add	sp, #12
   16cb8:	bd90      	pop	{r4, r7, pc}
   16cba:	46c0      	nop			; (mov r8, r8)
   16cbc:	00023c88 	.word	0x00023c88
   16cc0:	00017475 	.word	0x00017475
   16cc4:	20000654 	.word	0x20000654
   16cc8:	00023ccc 	.word	0x00023ccc
   16ccc:	00017081 	.word	0x00017081

00016cd0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   16cd0:	b590      	push	{r4, r7, lr}
   16cd2:	b083      	sub	sp, #12
   16cd4:	af00      	add	r7, sp, #0
   16cd6:	0002      	movs	r2, r0
   16cd8:	1dfb      	adds	r3, r7, #7
   16cda:	701a      	strb	r2, [r3, #0]
   16cdc:	1dbb      	adds	r3, r7, #6
   16cde:	1c0a      	adds	r2, r1, #0
   16ce0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   16ce2:	1dfb      	adds	r3, r7, #7
   16ce4:	781b      	ldrb	r3, [r3, #0]
   16ce6:	2b08      	cmp	r3, #8
   16ce8:	d905      	bls.n	16cf6 <prvTraceGetObjectState+0x26>
   16cea:	4b1a      	ldr	r3, [pc, #104]	; (16d54 <prvTraceGetObjectState+0x84>)
   16cec:	0018      	movs	r0, r3
   16cee:	4b1a      	ldr	r3, [pc, #104]	; (16d58 <prvTraceGetObjectState+0x88>)
   16cf0:	4798      	blx	r3
   16cf2:	2300      	movs	r3, #0
   16cf4:	e02a      	b.n	16d4c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16cf6:	4b19      	ldr	r3, [pc, #100]	; (16d5c <prvTraceGetObjectState+0x8c>)
   16cf8:	681a      	ldr	r2, [r3, #0]
   16cfa:	1dfb      	adds	r3, r7, #7
   16cfc:	781b      	ldrb	r3, [r3, #0]
   16cfe:	2164      	movs	r1, #100	; 0x64
   16d00:	18d3      	adds	r3, r2, r3
   16d02:	185b      	adds	r3, r3, r1
   16d04:	781b      	ldrb	r3, [r3, #0]
   16d06:	1dba      	adds	r2, r7, #6
   16d08:	7812      	ldrb	r2, [r2, #0]
   16d0a:	429a      	cmp	r2, r3
   16d0c:	d905      	bls.n	16d1a <prvTraceGetObjectState+0x4a>
   16d0e:	4b14      	ldr	r3, [pc, #80]	; (16d60 <prvTraceGetObjectState+0x90>)
   16d10:	0018      	movs	r0, r3
   16d12:	4b11      	ldr	r3, [pc, #68]	; (16d58 <prvTraceGetObjectState+0x88>)
   16d14:	4798      	blx	r3
   16d16:	2300      	movs	r3, #0
   16d18:	e018      	b.n	16d4c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   16d1a:	4b10      	ldr	r3, [pc, #64]	; (16d5c <prvTraceGetObjectState+0x8c>)
   16d1c:	681c      	ldr	r4, [r3, #0]
   16d1e:	1dfb      	adds	r3, r7, #7
   16d20:	781a      	ldrb	r2, [r3, #0]
   16d22:	1dbb      	adds	r3, r7, #6
   16d24:	781b      	ldrb	r3, [r3, #0]
   16d26:	0011      	movs	r1, r2
   16d28:	0018      	movs	r0, r3
   16d2a:	4b0e      	ldr	r3, [pc, #56]	; (16d64 <prvTraceGetObjectState+0x94>)
   16d2c:	4798      	blx	r3
   16d2e:	0003      	movs	r3, r0
   16d30:	0018      	movs	r0, r3
   16d32:	4b0a      	ldr	r3, [pc, #40]	; (16d5c <prvTraceGetObjectState+0x8c>)
   16d34:	681a      	ldr	r2, [r3, #0]
   16d36:	1dfb      	adds	r3, r7, #7
   16d38:	781b      	ldrb	r3, [r3, #0]
   16d3a:	2170      	movs	r1, #112	; 0x70
   16d3c:	18d3      	adds	r3, r2, r3
   16d3e:	185b      	adds	r3, r3, r1
   16d40:	781b      	ldrb	r3, [r3, #0]
   16d42:	18c3      	adds	r3, r0, r3
   16d44:	229c      	movs	r2, #156	; 0x9c
   16d46:	18e3      	adds	r3, r4, r3
   16d48:	189b      	adds	r3, r3, r2
   16d4a:	781b      	ldrb	r3, [r3, #0]
}
   16d4c:	0018      	movs	r0, r3
   16d4e:	46bd      	mov	sp, r7
   16d50:	b003      	add	sp, #12
   16d52:	bd90      	pop	{r4, r7, pc}
   16d54:	00023d08 	.word	0x00023d08
   16d58:	00017475 	.word	0x00017475
   16d5c:	20000654 	.word	0x20000654
   16d60:	00023d4c 	.word	0x00023d4c
   16d64:	00017081 	.word	0x00017081

00016d68 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   16d68:	b590      	push	{r4, r7, lr}
   16d6a:	b083      	sub	sp, #12
   16d6c:	af00      	add	r7, sp, #0
   16d6e:	0002      	movs	r2, r0
   16d70:	1dfb      	adds	r3, r7, #7
   16d72:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   16d74:	4b11      	ldr	r3, [pc, #68]	; (16dbc <prvTraceSetTaskInstanceFinished+0x54>)
   16d76:	681b      	ldr	r3, [r3, #0]
   16d78:	2267      	movs	r2, #103	; 0x67
   16d7a:	5c9b      	ldrb	r3, [r3, r2]
   16d7c:	1dfa      	adds	r2, r7, #7
   16d7e:	7812      	ldrb	r2, [r2, #0]
   16d80:	429a      	cmp	r2, r3
   16d82:	d904      	bls.n	16d8e <prvTraceSetTaskInstanceFinished+0x26>
   16d84:	4b0e      	ldr	r3, [pc, #56]	; (16dc0 <prvTraceSetTaskInstanceFinished+0x58>)
   16d86:	0018      	movs	r0, r3
   16d88:	4b0e      	ldr	r3, [pc, #56]	; (16dc4 <prvTraceSetTaskInstanceFinished+0x5c>)
   16d8a:	4798      	blx	r3
   16d8c:	e013      	b.n	16db6 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   16d8e:	4b0b      	ldr	r3, [pc, #44]	; (16dbc <prvTraceSetTaskInstanceFinished+0x54>)
   16d90:	681c      	ldr	r4, [r3, #0]
   16d92:	1dfb      	adds	r3, r7, #7
   16d94:	781b      	ldrb	r3, [r3, #0]
   16d96:	2103      	movs	r1, #3
   16d98:	0018      	movs	r0, r3
   16d9a:	4b0b      	ldr	r3, [pc, #44]	; (16dc8 <prvTraceSetTaskInstanceFinished+0x60>)
   16d9c:	4798      	blx	r3
   16d9e:	0003      	movs	r3, r0
   16da0:	0019      	movs	r1, r3
   16da2:	4b06      	ldr	r3, [pc, #24]	; (16dbc <prvTraceSetTaskInstanceFinished+0x54>)
   16da4:	681b      	ldr	r3, [r3, #0]
   16da6:	2273      	movs	r2, #115	; 0x73
   16da8:	5c9b      	ldrb	r3, [r3, r2]
   16daa:	18cb      	adds	r3, r1, r3
   16dac:	229c      	movs	r2, #156	; 0x9c
   16dae:	18e3      	adds	r3, r4, r3
   16db0:	189b      	adds	r3, r3, r2
   16db2:	2200      	movs	r2, #0
   16db4:	701a      	strb	r2, [r3, #0]
#endif
}
   16db6:	46bd      	mov	sp, r7
   16db8:	b003      	add	sp, #12
   16dba:	bd90      	pop	{r4, r7, pc}
   16dbc:	20000654 	.word	0x20000654
   16dc0:	00023d88 	.word	0x00023d88
   16dc4:	00017475 	.word	0x00017475
   16dc8:	00017081 	.word	0x00017081

00016dcc <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   16dcc:	b580      	push	{r7, lr}
   16dce:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   16dd0:	4b75      	ldr	r3, [pc, #468]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16dd2:	681b      	ldr	r3, [r3, #0]
   16dd4:	2b00      	cmp	r3, #0
   16dd6:	d103      	bne.n	16de0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   16dd8:	4b73      	ldr	r3, [pc, #460]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16dda:	4a74      	ldr	r2, [pc, #464]	; (16fac <prvTraceInitTraceData+0x1e0>)
   16ddc:	601a      	str	r2, [r3, #0]
   16dde:	e006      	b.n	16dee <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   16de0:	4b71      	ldr	r3, [pc, #452]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16de2:	681b      	ldr	r3, [r3, #0]
   16de4:	781b      	ldrb	r3, [r3, #0]
   16de6:	b2db      	uxtb	r3, r3
   16de8:	2b01      	cmp	r3, #1
   16dea:	d100      	bne.n	16dee <prvTraceInitTraceData+0x22>
   16dec:	e0d8      	b.n	16fa0 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   16dee:	4b70      	ldr	r3, [pc, #448]	; (16fb0 <prvTraceInitTraceData+0x1e4>)
   16df0:	681a      	ldr	r2, [r3, #0]
   16df2:	4b70      	ldr	r3, [pc, #448]	; (16fb4 <prvTraceInitTraceData+0x1e8>)
   16df4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   16df6:	4b6c      	ldr	r3, [pc, #432]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16df8:	6818      	ldr	r0, [r3, #0]
   16dfa:	23bd      	movs	r3, #189	; 0xbd
   16dfc:	011b      	lsls	r3, r3, #4
   16dfe:	001a      	movs	r2, r3
   16e00:	2100      	movs	r1, #0
   16e02:	4b6d      	ldr	r3, [pc, #436]	; (16fb8 <prvTraceInitTraceData+0x1ec>)
   16e04:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   16e06:	4b68      	ldr	r3, [pc, #416]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e08:	681b      	ldr	r3, [r3, #0]
   16e0a:	4a6c      	ldr	r2, [pc, #432]	; (16fbc <prvTraceInitTraceData+0x1f0>)
   16e0c:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   16e0e:	4b66      	ldr	r3, [pc, #408]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e10:	681b      	ldr	r3, [r3, #0]
   16e12:	2205      	movs	r2, #5
   16e14:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   16e16:	4b64      	ldr	r3, [pc, #400]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e18:	681b      	ldr	r3, [r3, #0]
   16e1a:	2200      	movs	r2, #0
   16e1c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   16e1e:	4b62      	ldr	r3, [pc, #392]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e20:	681b      	ldr	r3, [r3, #0]
   16e22:	22bd      	movs	r2, #189	; 0xbd
   16e24:	0112      	lsls	r2, r2, #4
   16e26:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   16e28:	4b5f      	ldr	r3, [pc, #380]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e2a:	681b      	ldr	r3, [r3, #0]
   16e2c:	2296      	movs	r2, #150	; 0x96
   16e2e:	0052      	lsls	r2, r2, #1
   16e30:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   16e32:	4b5d      	ldr	r3, [pc, #372]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e34:	681b      	ldr	r3, [r3, #0]
   16e36:	4a62      	ldr	r2, [pc, #392]	; (16fc0 <prvTraceInitTraceData+0x1f4>)
   16e38:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   16e3a:	4b5b      	ldr	r3, [pc, #364]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e3c:	681b      	ldr	r3, [r3, #0]
   16e3e:	2200      	movs	r2, #0
   16e40:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   16e42:	4b59      	ldr	r3, [pc, #356]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	2200      	movs	r2, #0
   16e48:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   16e4a:	4b5e      	ldr	r3, [pc, #376]	; (16fc4 <prvTraceInitTraceData+0x1f8>)
   16e4c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   16e4e:	4b56      	ldr	r3, [pc, #344]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e50:	681b      	ldr	r3, [r3, #0]
   16e52:	4a5d      	ldr	r2, [pc, #372]	; (16fc8 <prvTraceInitTraceData+0x1fc>)
   16e54:	495d      	ldr	r1, [pc, #372]	; (16fcc <prvTraceInitTraceData+0x200>)
   16e56:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   16e58:	4b53      	ldr	r3, [pc, #332]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e5a:	681a      	ldr	r2, [r3, #0]
   16e5c:	23ac      	movs	r3, #172	; 0xac
   16e5e:	00db      	lsls	r3, r3, #3
   16e60:	21c8      	movs	r1, #200	; 0xc8
   16e62:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   16e64:	4b50      	ldr	r3, [pc, #320]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e66:	681b      	ldr	r3, [r3, #0]
   16e68:	4a59      	ldr	r2, [pc, #356]	; (16fd0 <prvTraceInitTraceData+0x204>)
   16e6a:	2101      	movs	r1, #1
   16e6c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   16e6e:	4b4e      	ldr	r3, [pc, #312]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e70:	681a      	ldr	r2, [r3, #0]
   16e72:	23d7      	movs	r3, #215	; 0xd7
   16e74:	00db      	lsls	r3, r3, #3
   16e76:	4957      	ldr	r1, [pc, #348]	; (16fd4 <prvTraceInitTraceData+0x208>)
   16e78:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   16e7a:	4b4b      	ldr	r3, [pc, #300]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e7c:	681b      	ldr	r3, [r3, #0]
   16e7e:	4a56      	ldr	r2, [pc, #344]	; (16fd8 <prvTraceInitTraceData+0x20c>)
   16e80:	4694      	mov	ip, r2
   16e82:	4463      	add	r3, ip
   16e84:	4955      	ldr	r1, [pc, #340]	; (16fdc <prvTraceInitTraceData+0x210>)
   16e86:	2250      	movs	r2, #80	; 0x50
   16e88:	0018      	movs	r0, r3
   16e8a:	4b55      	ldr	r3, [pc, #340]	; (16fe0 <prvTraceInitTraceData+0x214>)
   16e8c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   16e8e:	4b46      	ldr	r3, [pc, #280]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e90:	681b      	ldr	r3, [r3, #0]
   16e92:	4a54      	ldr	r2, [pc, #336]	; (16fe4 <prvTraceInitTraceData+0x218>)
   16e94:	4954      	ldr	r1, [pc, #336]	; (16fe8 <prvTraceInitTraceData+0x21c>)
   16e96:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   16e98:	4b43      	ldr	r3, [pc, #268]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16e9a:	681b      	ldr	r3, [r3, #0]
   16e9c:	4a53      	ldr	r2, [pc, #332]	; (16fec <prvTraceInitTraceData+0x220>)
   16e9e:	210a      	movs	r1, #10
   16ea0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   16ea2:	4b41      	ldr	r3, [pc, #260]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ea4:	681b      	ldr	r3, [r3, #0]
   16ea6:	4a52      	ldr	r2, [pc, #328]	; (16ff0 <prvTraceInitTraceData+0x224>)
   16ea8:	210b      	movs	r1, #11
   16eaa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   16eac:	4b3e      	ldr	r3, [pc, #248]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16eae:	681b      	ldr	r3, [r3, #0]
   16eb0:	4a50      	ldr	r2, [pc, #320]	; (16ff4 <prvTraceInitTraceData+0x228>)
   16eb2:	210c      	movs	r1, #12
   16eb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   16eb6:	4b3c      	ldr	r3, [pc, #240]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16eb8:	681b      	ldr	r3, [r3, #0]
   16eba:	4a4f      	ldr	r2, [pc, #316]	; (16ff8 <prvTraceInitTraceData+0x22c>)
   16ebc:	210d      	movs	r1, #13
   16ebe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   16ec0:	4b39      	ldr	r3, [pc, #228]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ec2:	681b      	ldr	r3, [r3, #0]
   16ec4:	4a4d      	ldr	r2, [pc, #308]	; (16ffc <prvTraceInitTraceData+0x230>)
   16ec6:	2171      	movs	r1, #113	; 0x71
   16ec8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   16eca:	4b37      	ldr	r3, [pc, #220]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ecc:	681b      	ldr	r3, [r3, #0]
   16ece:	4a4c      	ldr	r2, [pc, #304]	; (17000 <prvTraceInitTraceData+0x234>)
   16ed0:	2172      	movs	r1, #114	; 0x72
   16ed2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   16ed4:	4b34      	ldr	r3, [pc, #208]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ed6:	681b      	ldr	r3, [r3, #0]
   16ed8:	4a4a      	ldr	r2, [pc, #296]	; (17004 <prvTraceInitTraceData+0x238>)
   16eda:	2173      	movs	r1, #115	; 0x73
   16edc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   16ede:	4b32      	ldr	r3, [pc, #200]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ee0:	681b      	ldr	r3, [r3, #0]
   16ee2:	4a49      	ldr	r2, [pc, #292]	; (17008 <prvTraceInitTraceData+0x23c>)
   16ee4:	2174      	movs	r1, #116	; 0x74
   16ee6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   16ee8:	4b2f      	ldr	r3, [pc, #188]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16eea:	681b      	ldr	r3, [r3, #0]
   16eec:	4a47      	ldr	r2, [pc, #284]	; (1700c <prvTraceInitTraceData+0x240>)
   16eee:	21f1      	movs	r1, #241	; 0xf1
   16ef0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   16ef2:	4b2d      	ldr	r3, [pc, #180]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16ef4:	681b      	ldr	r3, [r3, #0]
   16ef6:	4a46      	ldr	r2, [pc, #280]	; (17010 <prvTraceInitTraceData+0x244>)
   16ef8:	21f2      	movs	r1, #242	; 0xf2
   16efa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   16efc:	4b2a      	ldr	r3, [pc, #168]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16efe:	681b      	ldr	r3, [r3, #0]
   16f00:	4a44      	ldr	r2, [pc, #272]	; (17014 <prvTraceInitTraceData+0x248>)
   16f02:	21f3      	movs	r1, #243	; 0xf3
   16f04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   16f06:	4b28      	ldr	r3, [pc, #160]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	4a43      	ldr	r2, [pc, #268]	; (17018 <prvTraceInitTraceData+0x24c>)
   16f0c:	21f4      	movs	r1, #244	; 0xf4
   16f0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   16f10:	4b42      	ldr	r3, [pc, #264]	; (1701c <prvTraceInitTraceData+0x250>)
   16f12:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   16f14:	4b24      	ldr	r3, [pc, #144]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f16:	681b      	ldr	r3, [r3, #0]
   16f18:	22f4      	movs	r2, #244	; 0xf4
   16f1a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   16f1c:	4b22      	ldr	r3, [pc, #136]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f1e:	681b      	ldr	r3, [r3, #0]
   16f20:	22f3      	movs	r2, #243	; 0xf3
   16f22:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   16f24:	4b20      	ldr	r3, [pc, #128]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f26:	681b      	ldr	r3, [r3, #0]
   16f28:	22f2      	movs	r2, #242	; 0xf2
   16f2a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   16f2c:	4b1e      	ldr	r3, [pc, #120]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f2e:	681b      	ldr	r3, [r3, #0]
   16f30:	22f1      	movs	r2, #241	; 0xf1
   16f32:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   16f34:	4b1c      	ldr	r3, [pc, #112]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f36:	681b      	ldr	r3, [r3, #0]
   16f38:	2274      	movs	r2, #116	; 0x74
   16f3a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   16f3c:	4b1a      	ldr	r3, [pc, #104]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f3e:	681b      	ldr	r3, [r3, #0]
   16f40:	2273      	movs	r2, #115	; 0x73
   16f42:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   16f44:	4b18      	ldr	r3, [pc, #96]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f46:	681b      	ldr	r3, [r3, #0]
   16f48:	2272      	movs	r2, #114	; 0x72
   16f4a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   16f4c:	4b16      	ldr	r3, [pc, #88]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f4e:	681b      	ldr	r3, [r3, #0]
   16f50:	2271      	movs	r2, #113	; 0x71
   16f52:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   16f54:	4b14      	ldr	r3, [pc, #80]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	2204      	movs	r2, #4
   16f5a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   16f5c:	4b12      	ldr	r3, [pc, #72]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f5e:	681b      	ldr	r3, [r3, #0]
   16f60:	2203      	movs	r2, #3
   16f62:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   16f64:	4b10      	ldr	r3, [pc, #64]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f66:	681b      	ldr	r3, [r3, #0]
   16f68:	2202      	movs	r2, #2
   16f6a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   16f6c:	4b0e      	ldr	r3, [pc, #56]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f6e:	681b      	ldr	r3, [r3, #0]
   16f70:	2201      	movs	r2, #1
   16f72:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   16f74:	4b2a      	ldr	r3, [pc, #168]	; (17020 <prvTraceInitTraceData+0x254>)
   16f76:	681b      	ldr	r3, [r3, #0]
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d012      	beq.n	16fa2 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   16f7c:	4b0a      	ldr	r3, [pc, #40]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f7e:	681b      	ldr	r3, [r3, #0]
   16f80:	4a15      	ldr	r2, [pc, #84]	; (16fd8 <prvTraceInitTraceData+0x20c>)
   16f82:	1898      	adds	r0, r3, r2
   16f84:	4b26      	ldr	r3, [pc, #152]	; (17020 <prvTraceInitTraceData+0x254>)
   16f86:	681b      	ldr	r3, [r3, #0]
   16f88:	2250      	movs	r2, #80	; 0x50
   16f8a:	0019      	movs	r1, r3
   16f8c:	4b14      	ldr	r3, [pc, #80]	; (16fe0 <prvTraceInitTraceData+0x214>)
   16f8e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   16f90:	4b05      	ldr	r3, [pc, #20]	; (16fa8 <prvTraceInitTraceData+0x1dc>)
   16f92:	681b      	ldr	r3, [r3, #0]
   16f94:	4a23      	ldr	r2, [pc, #140]	; (17024 <prvTraceInitTraceData+0x258>)
   16f96:	2101      	movs	r1, #1
   16f98:	5099      	str	r1, [r3, r2]
		vTraceStop();
   16f9a:	4b23      	ldr	r3, [pc, #140]	; (17028 <prvTraceInitTraceData+0x25c>)
   16f9c:	4798      	blx	r3
   16f9e:	e000      	b.n	16fa2 <prvTraceInitTraceData+0x1d6>
			return;
   16fa0:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   16fa2:	46bd      	mov	sp, r7
   16fa4:	bd80      	pop	{r7, pc}
   16fa6:	46c0      	nop			; (mov r8, r8)
   16fa8:	20000654 	.word	0x20000654
   16fac:	20003c60 	.word	0x20003c60
   16fb0:	e000e018 	.word	0xe000e018
   16fb4:	20004830 	.word	0x20004830
   16fb8:	00021ea7 	.word	0x00021ea7
   16fbc:	00001aa1 	.word	0x00001aa1
   16fc0:	f0f0f0f0 	.word	0xf0f0f0f0
   16fc4:	00015f31 	.word	0x00015f31
   16fc8:	0000055c 	.word	0x0000055c
   16fcc:	f1f1f1f1 	.word	0xf1f1f1f1
   16fd0:	00000564 	.word	0x00000564
   16fd4:	f2f2f2f2 	.word	0xf2f2f2f2
   16fd8:	000006bc 	.word	0x000006bc
   16fdc:	00023dd0 	.word	0x00023dd0
   16fe0:	00017341 	.word	0x00017341
   16fe4:	0000070c 	.word	0x0000070c
   16fe8:	f3f3f3f3 	.word	0xf3f3f3f3
   16fec:	00000bc4 	.word	0x00000bc4
   16ff0:	00000bc5 	.word	0x00000bc5
   16ff4:	00000bc6 	.word	0x00000bc6
   16ff8:	00000bc7 	.word	0x00000bc7
   16ffc:	00000bc8 	.word	0x00000bc8
   17000:	00000bc9 	.word	0x00000bc9
   17004:	00000bca 	.word	0x00000bca
   17008:	00000bcb 	.word	0x00000bcb
   1700c:	00000bcc 	.word	0x00000bcc
   17010:	00000bcd 	.word	0x00000bcd
   17014:	00000bce 	.word	0x00000bce
   17018:	00000bcf 	.word	0x00000bcf
   1701c:	000160d1 	.word	0x000160d1
   17020:	200005b4 	.word	0x200005b4
   17024:	000006b4 	.word	0x000006b4
   17028:	00016339 	.word	0x00016339

0001702c <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1702c:	b580      	push	{r7, lr}
   1702e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   17030:	4b10      	ldr	r3, [pc, #64]	; (17074 <prvTraceNextFreeEventBufferSlot+0x48>)
   17032:	681b      	ldr	r3, [r3, #0]
   17034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17036:	2b00      	cmp	r3, #0
   17038:	d101      	bne.n	1703e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1703a:	2300      	movs	r3, #0
   1703c:	e017      	b.n	1706e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1703e:	4b0d      	ldr	r3, [pc, #52]	; (17074 <prvTraceNextFreeEventBufferSlot+0x48>)
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	69da      	ldr	r2, [r3, #28]
   17044:	232c      	movs	r3, #44	; 0x2c
   17046:	33ff      	adds	r3, #255	; 0xff
   17048:	429a      	cmp	r2, r3
   1704a:	d905      	bls.n	17058 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1704c:	4b0a      	ldr	r3, [pc, #40]	; (17078 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1704e:	0018      	movs	r0, r3
   17050:	4b0a      	ldr	r3, [pc, #40]	; (1707c <prvTraceNextFreeEventBufferSlot+0x50>)
   17052:	4798      	blx	r3
		return NULL;
   17054:	2300      	movs	r3, #0
   17056:	e00a      	b.n	1706e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   17058:	4b06      	ldr	r3, [pc, #24]	; (17074 <prvTraceNextFreeEventBufferSlot+0x48>)
   1705a:	681a      	ldr	r2, [r3, #0]
   1705c:	4b05      	ldr	r3, [pc, #20]	; (17074 <prvTraceNextFreeEventBufferSlot+0x48>)
   1705e:	681b      	ldr	r3, [r3, #0]
   17060:	69db      	ldr	r3, [r3, #28]
   17062:	009b      	lsls	r3, r3, #2
   17064:	21e2      	movs	r1, #226	; 0xe2
   17066:	00c9      	lsls	r1, r1, #3
   17068:	468c      	mov	ip, r1
   1706a:	4463      	add	r3, ip
   1706c:	18d3      	adds	r3, r2, r3
}
   1706e:	0018      	movs	r0, r3
   17070:	46bd      	mov	sp, r7
   17072:	bd80      	pop	{r7, pc}
   17074:	20000654 	.word	0x20000654
   17078:	00023de4 	.word	0x00023de4
   1707c:	00017475 	.word	0x00017475

00017080 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   17080:	b580      	push	{r7, lr}
   17082:	b082      	sub	sp, #8
   17084:	af00      	add	r7, sp, #0
   17086:	0002      	movs	r2, r0
   17088:	1dfb      	adds	r3, r7, #7
   1708a:	701a      	strb	r2, [r3, #0]
   1708c:	1dbb      	adds	r3, r7, #6
   1708e:	1c0a      	adds	r2, r1, #0
   17090:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17092:	1dbb      	adds	r3, r7, #6
   17094:	781b      	ldrb	r3, [r3, #0]
   17096:	2b08      	cmp	r3, #8
   17098:	d905      	bls.n	170a6 <uiIndexOfObject+0x26>
   1709a:	4b2a      	ldr	r3, [pc, #168]	; (17144 <uiIndexOfObject+0xc4>)
   1709c:	0018      	movs	r0, r3
   1709e:	4b2a      	ldr	r3, [pc, #168]	; (17148 <uiIndexOfObject+0xc8>)
   170a0:	4798      	blx	r3
   170a2:	2300      	movs	r3, #0
   170a4:	e049      	b.n	1713a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   170a6:	1dfb      	adds	r3, r7, #7
   170a8:	781b      	ldrb	r3, [r3, #0]
   170aa:	2b00      	cmp	r3, #0
   170ac:	d00b      	beq.n	170c6 <uiIndexOfObject+0x46>
   170ae:	4b27      	ldr	r3, [pc, #156]	; (1714c <uiIndexOfObject+0xcc>)
   170b0:	681a      	ldr	r2, [r3, #0]
   170b2:	1dbb      	adds	r3, r7, #6
   170b4:	781b      	ldrb	r3, [r3, #0]
   170b6:	2164      	movs	r1, #100	; 0x64
   170b8:	18d3      	adds	r3, r2, r3
   170ba:	185b      	adds	r3, r3, r1
   170bc:	781b      	ldrb	r3, [r3, #0]
   170be:	1dfa      	adds	r2, r7, #7
   170c0:	7812      	ldrb	r2, [r2, #0]
   170c2:	429a      	cmp	r2, r3
   170c4:	d905      	bls.n	170d2 <uiIndexOfObject+0x52>
   170c6:	4b22      	ldr	r3, [pc, #136]	; (17150 <uiIndexOfObject+0xd0>)
   170c8:	0018      	movs	r0, r3
   170ca:	4b1f      	ldr	r3, [pc, #124]	; (17148 <uiIndexOfObject+0xc8>)
   170cc:	4798      	blx	r3
   170ce:	2300      	movs	r3, #0
   170d0:	e033      	b.n	1713a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   170d2:	1dbb      	adds	r3, r7, #6
   170d4:	781b      	ldrb	r3, [r3, #0]
   170d6:	2b08      	cmp	r3, #8
   170d8:	d82a      	bhi.n	17130 <uiIndexOfObject+0xb0>
   170da:	1dfb      	adds	r3, r7, #7
   170dc:	781b      	ldrb	r3, [r3, #0]
   170de:	2b00      	cmp	r3, #0
   170e0:	d026      	beq.n	17130 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   170e2:	4b1a      	ldr	r3, [pc, #104]	; (1714c <uiIndexOfObject+0xcc>)
   170e4:	681a      	ldr	r2, [r3, #0]
   170e6:	1dbb      	adds	r3, r7, #6
   170e8:	781b      	ldrb	r3, [r3, #0]
   170ea:	2164      	movs	r1, #100	; 0x64
   170ec:	18d3      	adds	r3, r2, r3
   170ee:	185b      	adds	r3, r3, r1
   170f0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   170f2:	1dfa      	adds	r2, r7, #7
   170f4:	7812      	ldrb	r2, [r2, #0]
   170f6:	429a      	cmp	r2, r3
   170f8:	d81a      	bhi.n	17130 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   170fa:	4b14      	ldr	r3, [pc, #80]	; (1714c <uiIndexOfObject+0xcc>)
   170fc:	681a      	ldr	r2, [r3, #0]
   170fe:	1dbb      	adds	r3, r7, #6
   17100:	781b      	ldrb	r3, [r3, #0]
   17102:	3340      	adds	r3, #64	; 0x40
   17104:	005b      	lsls	r3, r3, #1
   17106:	18d3      	adds	r3, r2, r3
   17108:	3308      	adds	r3, #8
   1710a:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1710c:	4b0f      	ldr	r3, [pc, #60]	; (1714c <uiIndexOfObject+0xcc>)
   1710e:	6819      	ldr	r1, [r3, #0]
   17110:	1dbb      	adds	r3, r7, #6
   17112:	781b      	ldrb	r3, [r3, #0]
   17114:	207c      	movs	r0, #124	; 0x7c
   17116:	18cb      	adds	r3, r1, r3
   17118:	181b      	adds	r3, r3, r0
   1711a:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1711c:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1711e:	1df9      	adds	r1, r7, #7
   17120:	7809      	ldrb	r1, [r1, #0]
   17122:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17124:	b289      	uxth	r1, r1
   17126:	434b      	muls	r3, r1
   17128:	b29b      	uxth	r3, r3
   1712a:	18d3      	adds	r3, r2, r3
   1712c:	b29b      	uxth	r3, r3
   1712e:	e004      	b.n	1713a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   17130:	4b08      	ldr	r3, [pc, #32]	; (17154 <uiIndexOfObject+0xd4>)
   17132:	0018      	movs	r0, r3
   17134:	4b04      	ldr	r3, [pc, #16]	; (17148 <uiIndexOfObject+0xc8>)
   17136:	4798      	blx	r3
	return 0;
   17138:	2300      	movs	r3, #0
}
   1713a:	0018      	movs	r0, r3
   1713c:	46bd      	mov	sp, r7
   1713e:	b002      	add	sp, #8
   17140:	bd80      	pop	{r7, pc}
   17142:	46c0      	nop			; (mov r8, r8)
   17144:	00023e0c 	.word	0x00023e0c
   17148:	00017475 	.word	0x00017475
   1714c:	20000654 	.word	0x20000654
   17150:	00023e4c 	.word	0x00023e4c
   17154:	00023e8c 	.word	0x00023e8c

00017158 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   17158:	b580      	push	{r7, lr}
   1715a:	b088      	sub	sp, #32
   1715c:	af00      	add	r7, sp, #0
   1715e:	0002      	movs	r2, r0
   17160:	1dfb      	adds	r3, r7, #7
   17162:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   17164:	4b5a      	ldr	r3, [pc, #360]	; (172d0 <prvTraceGetObjectHandle+0x178>)
   17166:	681b      	ldr	r3, [r3, #0]
   17168:	2b00      	cmp	r3, #0
   1716a:	d105      	bne.n	17178 <prvTraceGetObjectHandle+0x20>
   1716c:	4b59      	ldr	r3, [pc, #356]	; (172d4 <prvTraceGetObjectHandle+0x17c>)
   1716e:	0018      	movs	r0, r3
   17170:	4b59      	ldr	r3, [pc, #356]	; (172d8 <prvTraceGetObjectHandle+0x180>)
   17172:	4798      	blx	r3
   17174:	2300      	movs	r3, #0
   17176:	e0a7      	b.n	172c8 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17178:	1dfb      	adds	r3, r7, #7
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	2b08      	cmp	r3, #8
   1717e:	d905      	bls.n	1718c <prvTraceGetObjectHandle+0x34>
   17180:	4b56      	ldr	r3, [pc, #344]	; (172dc <prvTraceGetObjectHandle+0x184>)
   17182:	0018      	movs	r0, r3
   17184:	4b54      	ldr	r3, [pc, #336]	; (172d8 <prvTraceGetObjectHandle+0x180>)
   17186:	4798      	blx	r3
   17188:	2300      	movs	r3, #0
   1718a:	e09d      	b.n	172c8 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1718c:	f3ef 8310 	mrs	r3, PRIMASK
   17190:	60fb      	str	r3, [r7, #12]
  return(result);
   17192:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   17194:	61bb      	str	r3, [r7, #24]
   17196:	2301      	movs	r3, #1
   17198:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1719a:	693b      	ldr	r3, [r7, #16]
   1719c:	f383 8810 	msr	PRIMASK, r3
   171a0:	4b4f      	ldr	r3, [pc, #316]	; (172e0 <prvTraceGetObjectHandle+0x188>)
   171a2:	681b      	ldr	r3, [r3, #0]
   171a4:	1c5a      	adds	r2, r3, #1
   171a6:	4b4e      	ldr	r3, [pc, #312]	; (172e0 <prvTraceGetObjectHandle+0x188>)
   171a8:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   171aa:	1dfb      	adds	r3, r7, #7
   171ac:	781a      	ldrb	r2, [r3, #0]
   171ae:	4b4d      	ldr	r3, [pc, #308]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   171b0:	0052      	lsls	r2, r2, #1
   171b2:	5ad3      	ldrh	r3, [r2, r3]
   171b4:	001a      	movs	r2, r3
   171b6:	4b4c      	ldr	r3, [pc, #304]	; (172e8 <prvTraceGetObjectHandle+0x190>)
   171b8:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   171ba:	4b4b      	ldr	r3, [pc, #300]	; (172e8 <prvTraceGetObjectHandle+0x190>)
   171bc:	681b      	ldr	r3, [r3, #0]
   171be:	4a49      	ldr	r2, [pc, #292]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   171c0:	2148      	movs	r1, #72	; 0x48
   171c2:	18d3      	adds	r3, r2, r3
   171c4:	185b      	adds	r3, r3, r1
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	2b00      	cmp	r3, #0
   171ca:	d117      	bne.n	171fc <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   171cc:	4b46      	ldr	r3, [pc, #280]	; (172e8 <prvTraceGetObjectHandle+0x190>)
   171ce:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   171d0:	4b45      	ldr	r3, [pc, #276]	; (172e8 <prvTraceGetObjectHandle+0x190>)
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   171d6:	1dfb      	adds	r3, r7, #7
   171d8:	781b      	ldrb	r3, [r3, #0]
   171da:	4842      	ldr	r0, [pc, #264]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   171dc:	3308      	adds	r3, #8
   171de:	005b      	lsls	r3, r3, #1
   171e0:	18c3      	adds	r3, r0, r3
   171e2:	3302      	adds	r3, #2
   171e4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   171e6:	b2db      	uxtb	r3, r3
   171e8:	1acb      	subs	r3, r1, r3
   171ea:	b2db      	uxtb	r3, r3
   171ec:	3301      	adds	r3, #1
   171ee:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   171f0:	4b3c      	ldr	r3, [pc, #240]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   171f2:	2148      	movs	r1, #72	; 0x48
   171f4:	189b      	adds	r3, r3, r2
   171f6:	185b      	adds	r3, r3, r1
   171f8:	1c02      	adds	r2, r0, #0
   171fa:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   171fc:	4b3a      	ldr	r3, [pc, #232]	; (172e8 <prvTraceGetObjectHandle+0x190>)
   171fe:	681a      	ldr	r2, [r3, #0]
   17200:	231f      	movs	r3, #31
   17202:	18fb      	adds	r3, r7, r3
   17204:	4937      	ldr	r1, [pc, #220]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17206:	2048      	movs	r0, #72	; 0x48
   17208:	188a      	adds	r2, r1, r2
   1720a:	1812      	adds	r2, r2, r0
   1720c:	7812      	ldrb	r2, [r2, #0]
   1720e:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   17210:	1dfb      	adds	r3, r7, #7
   17212:	781a      	ldrb	r2, [r3, #0]
   17214:	4b33      	ldr	r3, [pc, #204]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17216:	0052      	lsls	r2, r2, #1
   17218:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1721a:	1dfb      	adds	r3, r7, #7
   1721c:	781b      	ldrb	r3, [r3, #0]
   1721e:	4931      	ldr	r1, [pc, #196]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17220:	3310      	adds	r3, #16
   17222:	005b      	lsls	r3, r3, #1
   17224:	18cb      	adds	r3, r1, r3
   17226:	3304      	adds	r3, #4
   17228:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1722a:	429a      	cmp	r2, r3
   1722c:	d90d      	bls.n	1724a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1722e:	1dfb      	adds	r3, r7, #7
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	0018      	movs	r0, r3
   17234:	4b2d      	ldr	r3, [pc, #180]	; (172ec <prvTraceGetObjectHandle+0x194>)
   17236:	4798      	blx	r3
   17238:	0003      	movs	r3, r0
   1723a:	0018      	movs	r0, r3
   1723c:	4b26      	ldr	r3, [pc, #152]	; (172d8 <prvTraceGetObjectHandle+0x180>)
   1723e:	4798      	blx	r3
		handle = 0;
   17240:	231f      	movs	r3, #31
   17242:	18fb      	adds	r3, r7, r3
   17244:	2200      	movs	r2, #0
   17246:	701a      	strb	r2, [r3, #0]
   17248:	e031      	b.n	172ae <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1724a:	1dfb      	adds	r3, r7, #7
   1724c:	781b      	ldrb	r3, [r3, #0]
   1724e:	4a25      	ldr	r2, [pc, #148]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17250:	0059      	lsls	r1, r3, #1
   17252:	5a8a      	ldrh	r2, [r1, r2]
   17254:	3201      	adds	r2, #1
   17256:	b291      	uxth	r1, r2
   17258:	4a22      	ldr	r2, [pc, #136]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   1725a:	005b      	lsls	r3, r3, #1
   1725c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1725e:	1dfb      	adds	r3, r7, #7
   17260:	781a      	ldrb	r2, [r3, #0]
   17262:	4b20      	ldr	r3, [pc, #128]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17264:	0052      	lsls	r2, r2, #1
   17266:	5ad3      	ldrh	r3, [r2, r3]
   17268:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1726a:	1dfb      	adds	r3, r7, #7
   1726c:	781b      	ldrb	r3, [r3, #0]
   1726e:	4a1d      	ldr	r2, [pc, #116]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17270:	3308      	adds	r3, #8
   17272:	005b      	lsls	r3, r3, #1
   17274:	18d3      	adds	r3, r2, r3
   17276:	3302      	adds	r3, #2
   17278:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1727a:	1acb      	subs	r3, r1, r3
   1727c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1727e:	1dfb      	adds	r3, r7, #7
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	4a18      	ldr	r2, [pc, #96]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   17284:	3318      	adds	r3, #24
   17286:	005b      	lsls	r3, r3, #1
   17288:	18d3      	adds	r3, r2, r3
   1728a:	3306      	adds	r3, #6
   1728c:	881b      	ldrh	r3, [r3, #0]
   1728e:	001a      	movs	r2, r3
		if (hndCount >
   17290:	697b      	ldr	r3, [r7, #20]
   17292:	429a      	cmp	r2, r3
   17294:	da0b      	bge.n	172ae <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   17296:	1dfb      	adds	r3, r7, #7
   17298:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1729a:	697a      	ldr	r2, [r7, #20]
   1729c:	b2d2      	uxtb	r2, r2
   1729e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   172a0:	4a10      	ldr	r2, [pc, #64]	; (172e4 <prvTraceGetObjectHandle+0x18c>)
   172a2:	3318      	adds	r3, #24
   172a4:	005b      	lsls	r3, r3, #1
   172a6:	18d3      	adds	r3, r2, r3
   172a8:	3306      	adds	r3, #6
   172aa:	1c0a      	adds	r2, r1, #0
   172ac:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   172ae:	4b0c      	ldr	r3, [pc, #48]	; (172e0 <prvTraceGetObjectHandle+0x188>)
   172b0:	681b      	ldr	r3, [r3, #0]
   172b2:	1e5a      	subs	r2, r3, #1
   172b4:	4b0a      	ldr	r3, [pc, #40]	; (172e0 <prvTraceGetObjectHandle+0x188>)
   172b6:	601a      	str	r2, [r3, #0]
   172b8:	69bb      	ldr	r3, [r7, #24]
   172ba:	60bb      	str	r3, [r7, #8]
   172bc:	68bb      	ldr	r3, [r7, #8]
   172be:	f383 8810 	msr	PRIMASK, r3

	return handle;
   172c2:	231f      	movs	r3, #31
   172c4:	18fb      	adds	r3, r7, r3
   172c6:	781b      	ldrb	r3, [r3, #0]
}
   172c8:	0018      	movs	r0, r3
   172ca:	46bd      	mov	sp, r7
   172cc:	b008      	add	sp, #32
   172ce:	bd80      	pop	{r7, pc}
   172d0:	20000654 	.word	0x20000654
   172d4:	000232ec 	.word	0x000232ec
   172d8:	00017475 	.word	0x00017475
   172dc:	00023ecc 	.word	0x00023ecc
   172e0:	200005ac 	.word	0x200005ac
   172e4:	200005c4 	.word	0x200005c4
   172e8:	20000658 	.word	0x20000658
   172ec:	00016195 	.word	0x00016195

000172f0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   172f0:	b590      	push	{r4, r7, lr}
   172f2:	b085      	sub	sp, #20
   172f4:	af00      	add	r7, sp, #0
   172f6:	0002      	movs	r2, r0
   172f8:	1dfb      	adds	r3, r7, #7
   172fa:	701a      	strb	r2, [r3, #0]
   172fc:	1dbb      	adds	r3, r7, #6
   172fe:	1c0a      	adds	r2, r1, #0
   17300:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   17302:	230e      	movs	r3, #14
   17304:	18fc      	adds	r4, r7, r3
   17306:	1dfb      	adds	r3, r7, #7
   17308:	781a      	ldrb	r2, [r3, #0]
   1730a:	1dbb      	adds	r3, r7, #6
   1730c:	781b      	ldrb	r3, [r3, #0]
   1730e:	0011      	movs	r1, r2
   17310:	0018      	movs	r0, r3
   17312:	4b09      	ldr	r3, [pc, #36]	; (17338 <prvMarkObjectAsUsed+0x48>)
   17314:	4798      	blx	r3
   17316:	0003      	movs	r3, r0
   17318:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1731a:	4b08      	ldr	r3, [pc, #32]	; (1733c <prvMarkObjectAsUsed+0x4c>)
   1731c:	681a      	ldr	r2, [r3, #0]
   1731e:	230e      	movs	r3, #14
   17320:	18fb      	adds	r3, r7, r3
   17322:	881b      	ldrh	r3, [r3, #0]
   17324:	219c      	movs	r1, #156	; 0x9c
   17326:	18d3      	adds	r3, r2, r3
   17328:	185b      	adds	r3, r3, r1
   1732a:	2201      	movs	r2, #1
   1732c:	701a      	strb	r2, [r3, #0]
}
   1732e:	46c0      	nop			; (mov r8, r8)
   17330:	46bd      	mov	sp, r7
   17332:	b005      	add	sp, #20
   17334:	bd90      	pop	{r4, r7, pc}
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	00017081 	.word	0x00017081
   1733c:	20000654 	.word	0x20000654

00017340 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   17340:	b580      	push	{r7, lr}
   17342:	b086      	sub	sp, #24
   17344:	af00      	add	r7, sp, #0
   17346:	60f8      	str	r0, [r7, #12]
   17348:	60b9      	str	r1, [r7, #8]
   1734a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1734c:	2300      	movs	r3, #0
   1734e:	617b      	str	r3, [r7, #20]
   17350:	e010      	b.n	17374 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   17352:	68fa      	ldr	r2, [r7, #12]
   17354:	697b      	ldr	r3, [r7, #20]
   17356:	18d3      	adds	r3, r2, r3
   17358:	68b9      	ldr	r1, [r7, #8]
   1735a:	697a      	ldr	r2, [r7, #20]
   1735c:	188a      	adds	r2, r1, r2
   1735e:	7812      	ldrb	r2, [r2, #0]
   17360:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   17362:	68ba      	ldr	r2, [r7, #8]
   17364:	697b      	ldr	r3, [r7, #20]
   17366:	18d3      	adds	r3, r2, r3
   17368:	781b      	ldrb	r3, [r3, #0]
   1736a:	2b00      	cmp	r3, #0
   1736c:	d007      	beq.n	1737e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1736e:	697b      	ldr	r3, [r7, #20]
   17370:	3301      	adds	r3, #1
   17372:	617b      	str	r3, [r7, #20]
   17374:	697a      	ldr	r2, [r7, #20]
   17376:	687b      	ldr	r3, [r7, #4]
   17378:	429a      	cmp	r2, r3
   1737a:	d3ea      	bcc.n	17352 <prvStrncpy+0x12>
			break;
	}
}
   1737c:	e000      	b.n	17380 <prvStrncpy+0x40>
			break;
   1737e:	46c0      	nop			; (mov r8, r8)
}
   17380:	46c0      	nop			; (mov r8, r8)
   17382:	46bd      	mov	sp, r7
   17384:	b006      	add	sp, #24
   17386:	bd80      	pop	{r7, pc}

00017388 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   17388:	b580      	push	{r7, lr}
   1738a:	b082      	sub	sp, #8
   1738c:	af00      	add	r7, sp, #0
   1738e:	603a      	str	r2, [r7, #0]
   17390:	1dfb      	adds	r3, r7, #7
   17392:	1c02      	adds	r2, r0, #0
   17394:	701a      	strb	r2, [r3, #0]
   17396:	1dbb      	adds	r3, r7, #6
   17398:	1c0a      	adds	r2, r1, #0
   1739a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1739c:	683b      	ldr	r3, [r7, #0]
   1739e:	2b00      	cmp	r3, #0
   173a0:	d104      	bne.n	173ac <prvTraceSetObjectName+0x24>
   173a2:	4b2a      	ldr	r3, [pc, #168]	; (1744c <prvTraceSetObjectName+0xc4>)
   173a4:	0018      	movs	r0, r3
   173a6:	4b2a      	ldr	r3, [pc, #168]	; (17450 <prvTraceSetObjectName+0xc8>)
   173a8:	4798      	blx	r3
   173aa:	e04b      	b.n	17444 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   173ac:	1dfb      	adds	r3, r7, #7
   173ae:	781b      	ldrb	r3, [r3, #0]
   173b0:	2b08      	cmp	r3, #8
   173b2:	d904      	bls.n	173be <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   173b4:	4b27      	ldr	r3, [pc, #156]	; (17454 <prvTraceSetObjectName+0xcc>)
   173b6:	0018      	movs	r0, r3
   173b8:	4b25      	ldr	r3, [pc, #148]	; (17450 <prvTraceSetObjectName+0xc8>)
   173ba:	4798      	blx	r3
		return;
   173bc:	e042      	b.n	17444 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   173be:	1dbb      	adds	r3, r7, #6
   173c0:	781b      	ldrb	r3, [r3, #0]
   173c2:	2b00      	cmp	r3, #0
   173c4:	d104      	bne.n	173d0 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   173c6:	4b24      	ldr	r3, [pc, #144]	; (17458 <prvTraceSetObjectName+0xd0>)
   173c8:	0018      	movs	r0, r3
   173ca:	4b21      	ldr	r3, [pc, #132]	; (17450 <prvTraceSetObjectName+0xc8>)
   173cc:	4798      	blx	r3
		return;
   173ce:	e039      	b.n	17444 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   173d0:	4b22      	ldr	r3, [pc, #136]	; (1745c <prvTraceSetObjectName+0xd4>)
   173d2:	681a      	ldr	r2, [r3, #0]
   173d4:	1dfb      	adds	r3, r7, #7
   173d6:	781b      	ldrb	r3, [r3, #0]
   173d8:	2164      	movs	r1, #100	; 0x64
   173da:	18d3      	adds	r3, r2, r3
   173dc:	185b      	adds	r3, r3, r1
   173de:	781b      	ldrb	r3, [r3, #0]
   173e0:	1dba      	adds	r2, r7, #6
   173e2:	7812      	ldrb	r2, [r2, #0]
   173e4:	429a      	cmp	r2, r3
   173e6:	d909      	bls.n	173fc <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   173e8:	1dfb      	adds	r3, r7, #7
   173ea:	781b      	ldrb	r3, [r3, #0]
   173ec:	0018      	movs	r0, r3
   173ee:	4b1c      	ldr	r3, [pc, #112]	; (17460 <prvTraceSetObjectName+0xd8>)
   173f0:	4798      	blx	r3
   173f2:	0003      	movs	r3, r0
   173f4:	0018      	movs	r0, r3
   173f6:	4b16      	ldr	r3, [pc, #88]	; (17450 <prvTraceSetObjectName+0xc8>)
   173f8:	4798      	blx	r3
   173fa:	e023      	b.n	17444 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   173fc:	1dfb      	adds	r3, r7, #7
   173fe:	781a      	ldrb	r2, [r3, #0]
   17400:	1dbb      	adds	r3, r7, #6
   17402:	781b      	ldrb	r3, [r3, #0]
   17404:	0011      	movs	r1, r2
   17406:	0018      	movs	r0, r3
   17408:	4b16      	ldr	r3, [pc, #88]	; (17464 <prvTraceSetObjectName+0xdc>)
   1740a:	4798      	blx	r3
   1740c:	0003      	movs	r3, r0
   1740e:	001a      	movs	r2, r3
   17410:	4b15      	ldr	r3, [pc, #84]	; (17468 <prvTraceSetObjectName+0xe0>)
   17412:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   17414:	4b15      	ldr	r3, [pc, #84]	; (1746c <prvTraceSetObjectName+0xe4>)
   17416:	681b      	ldr	r3, [r3, #0]
   17418:	2b00      	cmp	r3, #0
   1741a:	d113      	bne.n	17444 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1741c:	4b0f      	ldr	r3, [pc, #60]	; (1745c <prvTraceSetObjectName+0xd4>)
   1741e:	681a      	ldr	r2, [r3, #0]
   17420:	4b11      	ldr	r3, [pc, #68]	; (17468 <prvTraceSetObjectName+0xe0>)
   17422:	881b      	ldrh	r3, [r3, #0]
   17424:	3398      	adds	r3, #152	; 0x98
   17426:	18d3      	adds	r3, r2, r3
   17428:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1742a:	4b0c      	ldr	r3, [pc, #48]	; (1745c <prvTraceSetObjectName+0xd4>)
   1742c:	681a      	ldr	r2, [r3, #0]
   1742e:	1dfb      	adds	r3, r7, #7
   17430:	781b      	ldrb	r3, [r3, #0]
   17432:	2170      	movs	r1, #112	; 0x70
   17434:	18d3      	adds	r3, r2, r3
   17436:	185b      	adds	r3, r3, r1
   17438:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1743a:	001a      	movs	r2, r3
   1743c:	683b      	ldr	r3, [r7, #0]
   1743e:	0019      	movs	r1, r3
   17440:	4b0b      	ldr	r3, [pc, #44]	; (17470 <prvTraceSetObjectName+0xe8>)
   17442:	4798      	blx	r3
		}
	}
}
   17444:	46bd      	mov	sp, r7
   17446:	b002      	add	sp, #8
   17448:	bd80      	pop	{r7, pc}
   1744a:	46c0      	nop			; (mov r8, r8)
   1744c:	00023fd0 	.word	0x00023fd0
   17450:	00017475 	.word	0x00017475
   17454:	00024004 	.word	0x00024004
   17458:	00024034 	.word	0x00024034
   1745c:	20000654 	.word	0x20000654
   17460:	00016195 	.word	0x00016195
   17464:	00017081 	.word	0x00017081
   17468:	2000065c 	.word	0x2000065c
   1746c:	200005b4 	.word	0x200005b4
   17470:	00017341 	.word	0x00017341

00017474 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   17474:	b580      	push	{r7, lr}
   17476:	b082      	sub	sp, #8
   17478:	af00      	add	r7, sp, #0
   1747a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1747c:	4b11      	ldr	r3, [pc, #68]	; (174c4 <prvTraceError+0x50>)
   1747e:	681b      	ldr	r3, [r3, #0]
   17480:	2b00      	cmp	r3, #0
   17482:	d001      	beq.n	17488 <prvTraceError+0x14>
	{
		vTraceStop();
   17484:	4b10      	ldr	r3, [pc, #64]	; (174c8 <prvTraceError+0x54>)
   17486:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   17488:	4b10      	ldr	r3, [pc, #64]	; (174cc <prvTraceError+0x58>)
   1748a:	681b      	ldr	r3, [r3, #0]
   1748c:	2b00      	cmp	r3, #0
   1748e:	d115      	bne.n	174bc <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   17490:	4b0e      	ldr	r3, [pc, #56]	; (174cc <prvTraceError+0x58>)
   17492:	687a      	ldr	r2, [r7, #4]
   17494:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   17496:	4b0b      	ldr	r3, [pc, #44]	; (174c4 <prvTraceError+0x50>)
   17498:	681b      	ldr	r3, [r3, #0]
   1749a:	2b00      	cmp	r3, #0
   1749c:	d00e      	beq.n	174bc <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1749e:	4b09      	ldr	r3, [pc, #36]	; (174c4 <prvTraceError+0x50>)
   174a0:	681b      	ldr	r3, [r3, #0]
   174a2:	4a0b      	ldr	r2, [pc, #44]	; (174d0 <prvTraceError+0x5c>)
   174a4:	1898      	adds	r0, r3, r2
   174a6:	4b09      	ldr	r3, [pc, #36]	; (174cc <prvTraceError+0x58>)
   174a8:	681b      	ldr	r3, [r3, #0]
   174aa:	2250      	movs	r2, #80	; 0x50
   174ac:	0019      	movs	r1, r3
   174ae:	4b09      	ldr	r3, [pc, #36]	; (174d4 <prvTraceError+0x60>)
   174b0:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   174b2:	4b04      	ldr	r3, [pc, #16]	; (174c4 <prvTraceError+0x50>)
   174b4:	681b      	ldr	r3, [r3, #0]
   174b6:	4a08      	ldr	r2, [pc, #32]	; (174d8 <prvTraceError+0x64>)
   174b8:	2101      	movs	r1, #1
   174ba:	5099      	str	r1, [r3, r2]
		}
	}
}
   174bc:	46c0      	nop			; (mov r8, r8)
   174be:	46bd      	mov	sp, r7
   174c0:	b002      	add	sp, #8
   174c2:	bd80      	pop	{r7, pc}
   174c4:	20000654 	.word	0x20000654
   174c8:	00016339 	.word	0x00016339
   174cc:	200005b4 	.word	0x200005b4
   174d0:	000006bc 	.word	0x000006bc
   174d4:	00017341 	.word	0x00017341
   174d8:	000006b4 	.word	0x000006b4

000174dc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   174dc:	b580      	push	{r7, lr}
   174de:	b086      	sub	sp, #24
   174e0:	af00      	add	r7, sp, #0
   174e2:	0002      	movs	r2, r0
   174e4:	1dfb      	adds	r3, r7, #7
   174e6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   174e8:	2300      	movs	r3, #0
   174ea:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   174ec:	2300      	movs	r3, #0
   174ee:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   174f0:	1dfb      	adds	r3, r7, #7
   174f2:	781b      	ldrb	r3, [r3, #0]
   174f4:	2b00      	cmp	r3, #0
   174f6:	d000      	beq.n	174fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   174f8:	e089      	b.n	1760e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   174fa:	4b49      	ldr	r3, [pc, #292]	; (17620 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   174fc:	0018      	movs	r0, r3
   174fe:	4b49      	ldr	r3, [pc, #292]	; (17624 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   17500:	4798      	blx	r3
   17502:	e08a      	b.n	1761a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   17504:	4b48      	ldr	r3, [pc, #288]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17506:	681b      	ldr	r3, [r3, #0]
   17508:	69da      	ldr	r2, [r3, #28]
   1750a:	697b      	ldr	r3, [r7, #20]
   1750c:	18d3      	adds	r3, r2, r3
   1750e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   17510:	4b45      	ldr	r3, [pc, #276]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17512:	6819      	ldr	r1, [r3, #0]
   17514:	693b      	ldr	r3, [r7, #16]
   17516:	009a      	lsls	r2, r3, #2
   17518:	23e2      	movs	r3, #226	; 0xe2
   1751a:	00db      	lsls	r3, r3, #3
   1751c:	188a      	adds	r2, r1, r2
   1751e:	18d3      	adds	r3, r2, r3
   17520:	781b      	ldrb	r3, [r3, #0]
   17522:	2b98      	cmp	r3, #152	; 0x98
   17524:	d934      	bls.n	17590 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   17526:	4b40      	ldr	r3, [pc, #256]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17528:	6819      	ldr	r1, [r3, #0]
   1752a:	693b      	ldr	r3, [r7, #16]
   1752c:	009a      	lsls	r2, r3, #2
   1752e:	23e2      	movs	r3, #226	; 0xe2
   17530:	00db      	lsls	r3, r3, #3
   17532:	188a      	adds	r2, r1, r2
   17534:	18d3      	adds	r3, r2, r3
   17536:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   17538:	2ba7      	cmp	r3, #167	; 0xa7
   1753a:	d829      	bhi.n	17590 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1753c:	4b3a      	ldr	r3, [pc, #232]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1753e:	6819      	ldr	r1, [r3, #0]
   17540:	693b      	ldr	r3, [r7, #16]
   17542:	009a      	lsls	r2, r3, #2
   17544:	23e2      	movs	r3, #226	; 0xe2
   17546:	00db      	lsls	r3, r3, #3
   17548:	188a      	adds	r2, r1, r2
   1754a:	18d3      	adds	r3, r2, r3
   1754c:	781a      	ldrb	r2, [r3, #0]
   1754e:	230f      	movs	r3, #15
   17550:	18fb      	adds	r3, r7, r3
   17552:	3268      	adds	r2, #104	; 0x68
   17554:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   17556:	230f      	movs	r3, #15
   17558:	18fb      	adds	r3, r7, r3
   1755a:	781a      	ldrb	r2, [r3, #0]
   1755c:	693b      	ldr	r3, [r7, #16]
   1755e:	18d2      	adds	r2, r2, r3
   17560:	4b31      	ldr	r3, [pc, #196]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17562:	681b      	ldr	r3, [r3, #0]
   17564:	699b      	ldr	r3, [r3, #24]
   17566:	429a      	cmp	r2, r3
   17568:	d24d      	bcs.n	17606 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1756a:	4b2f      	ldr	r3, [pc, #188]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1756c:	681a      	ldr	r2, [r3, #0]
   1756e:	693b      	ldr	r3, [r7, #16]
   17570:	009b      	lsls	r3, r3, #2
   17572:	21e2      	movs	r1, #226	; 0xe2
   17574:	00c9      	lsls	r1, r1, #3
   17576:	468c      	mov	ip, r1
   17578:	4463      	add	r3, ip
   1757a:	18d0      	adds	r0, r2, r3
   1757c:	230f      	movs	r3, #15
   1757e:	18fb      	adds	r3, r7, r3
   17580:	781b      	ldrb	r3, [r3, #0]
   17582:	3301      	adds	r3, #1
   17584:	009b      	lsls	r3, r3, #2
   17586:	001a      	movs	r2, r3
   17588:	2100      	movs	r1, #0
   1758a:	4b28      	ldr	r3, [pc, #160]	; (1762c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1758c:	4798      	blx	r3
		{
   1758e:	e03a      	b.n	17606 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   17590:	4b25      	ldr	r3, [pc, #148]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   17592:	6819      	ldr	r1, [r3, #0]
   17594:	693b      	ldr	r3, [r7, #16]
   17596:	009a      	lsls	r2, r3, #2
   17598:	23e2      	movs	r3, #226	; 0xe2
   1759a:	00db      	lsls	r3, r3, #3
   1759c:	188a      	adds	r2, r1, r2
   1759e:	18d3      	adds	r3, r2, r3
   175a0:	781b      	ldrb	r3, [r3, #0]
   175a2:	2b01      	cmp	r3, #1
   175a4:	d130      	bne.n	17608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   175a6:	693b      	ldr	r3, [r7, #16]
   175a8:	1c5a      	adds	r2, r3, #1
   175aa:	4b1f      	ldr	r3, [pc, #124]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   175ac:	681b      	ldr	r3, [r3, #0]
   175ae:	699b      	ldr	r3, [r3, #24]
   175b0:	429a      	cmp	r2, r3
   175b2:	d20e      	bcs.n	175d2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   175b4:	4b1c      	ldr	r3, [pc, #112]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   175b6:	681a      	ldr	r2, [r3, #0]
   175b8:	693b      	ldr	r3, [r7, #16]
   175ba:	009b      	lsls	r3, r3, #2
   175bc:	21e2      	movs	r1, #226	; 0xe2
   175be:	00c9      	lsls	r1, r1, #3
   175c0:	468c      	mov	ip, r1
   175c2:	4463      	add	r3, ip
   175c4:	18d3      	adds	r3, r2, r3
   175c6:	2208      	movs	r2, #8
   175c8:	2100      	movs	r1, #0
   175ca:	0018      	movs	r0, r3
   175cc:	4b17      	ldr	r3, [pc, #92]	; (1762c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   175ce:	4798      	blx	r3
   175d0:	e01a      	b.n	17608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   175d2:	4b15      	ldr	r3, [pc, #84]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   175d4:	681b      	ldr	r3, [r3, #0]
   175d6:	22e2      	movs	r2, #226	; 0xe2
   175d8:	00d2      	lsls	r2, r2, #3
   175da:	4694      	mov	ip, r2
   175dc:	4463      	add	r3, ip
   175de:	2204      	movs	r2, #4
   175e0:	2100      	movs	r1, #0
   175e2:	0018      	movs	r0, r3
   175e4:	4b11      	ldr	r3, [pc, #68]	; (1762c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   175e6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   175e8:	4b0f      	ldr	r3, [pc, #60]	; (17628 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   175ea:	681a      	ldr	r2, [r3, #0]
   175ec:	693b      	ldr	r3, [r7, #16]
   175ee:	009b      	lsls	r3, r3, #2
   175f0:	21e2      	movs	r1, #226	; 0xe2
   175f2:	00c9      	lsls	r1, r1, #3
   175f4:	468c      	mov	ip, r1
   175f6:	4463      	add	r3, ip
   175f8:	18d3      	adds	r3, r2, r3
   175fa:	2204      	movs	r2, #4
   175fc:	2100      	movs	r1, #0
   175fe:	0018      	movs	r0, r3
   17600:	4b0a      	ldr	r3, [pc, #40]	; (1762c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   17602:	4798      	blx	r3
   17604:	e000      	b.n	17608 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   17606:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   17608:	697b      	ldr	r3, [r7, #20]
   1760a:	3301      	adds	r3, #1
   1760c:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1760e:	1dfb      	adds	r3, r7, #7
   17610:	781a      	ldrb	r2, [r3, #0]
   17612:	697b      	ldr	r3, [r7, #20]
   17614:	429a      	cmp	r2, r3
   17616:	d900      	bls.n	1761a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   17618:	e774      	b.n	17504 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1761a:	46bd      	mov	sp, r7
   1761c:	b006      	add	sp, #24
   1761e:	bd80      	pop	{r7, pc}
   17620:	00024094 	.word	0x00024094
   17624:	00017475 	.word	0x00017475
   17628:	20000654 	.word	0x20000654
   1762c:	00021ea7 	.word	0x00021ea7

00017630 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   17630:	b580      	push	{r7, lr}
   17632:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   17634:	4b12      	ldr	r3, [pc, #72]	; (17680 <prvTraceUpdateCounters+0x50>)
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1763a:	2b00      	cmp	r3, #0
   1763c:	d01c      	beq.n	17678 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1763e:	4b10      	ldr	r3, [pc, #64]	; (17680 <prvTraceUpdateCounters+0x50>)
   17640:	681b      	ldr	r3, [r3, #0]
   17642:	695a      	ldr	r2, [r3, #20]
   17644:	3201      	adds	r2, #1
   17646:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   17648:	4b0d      	ldr	r3, [pc, #52]	; (17680 <prvTraceUpdateCounters+0x50>)
   1764a:	681b      	ldr	r3, [r3, #0]
   1764c:	69da      	ldr	r2, [r3, #28]
   1764e:	3201      	adds	r2, #1
   17650:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   17652:	4b0b      	ldr	r3, [pc, #44]	; (17680 <prvTraceUpdateCounters+0x50>)
   17654:	681b      	ldr	r3, [r3, #0]
   17656:	69da      	ldr	r2, [r3, #28]
   17658:	232c      	movs	r3, #44	; 0x2c
   1765a:	33ff      	adds	r3, #255	; 0xff
   1765c:	429a      	cmp	r2, r3
   1765e:	d907      	bls.n	17670 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   17660:	4b07      	ldr	r3, [pc, #28]	; (17680 <prvTraceUpdateCounters+0x50>)
   17662:	681b      	ldr	r3, [r3, #0]
   17664:	2201      	movs	r2, #1
   17666:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   17668:	4b05      	ldr	r3, [pc, #20]	; (17680 <prvTraceUpdateCounters+0x50>)
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	2200      	movs	r2, #0
   1766e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   17670:	2001      	movs	r0, #1
   17672:	4b04      	ldr	r3, [pc, #16]	; (17684 <prvTraceUpdateCounters+0x54>)
   17674:	4798      	blx	r3
   17676:	e000      	b.n	1767a <prvTraceUpdateCounters+0x4a>
		return;
   17678:	46c0      	nop			; (mov r8, r8)
#endif
}
   1767a:	46bd      	mov	sp, r7
   1767c:	bd80      	pop	{r7, pc}
   1767e:	46c0      	nop			; (mov r8, r8)
   17680:	20000654 	.word	0x20000654
   17684:	000174dd 	.word	0x000174dd

00017688 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   17688:	b5b0      	push	{r4, r5, r7, lr}
   1768a:	b086      	sub	sp, #24
   1768c:	af00      	add	r7, sp, #0
   1768e:	0002      	movs	r2, r0
   17690:	1dbb      	adds	r3, r7, #6
   17692:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   17694:	2300      	movs	r3, #0
   17696:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   17698:	2300      	movs	r3, #0
   1769a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1769c:	2300      	movs	r3, #0
   1769e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   176a0:	1dbb      	adds	r3, r7, #6
   176a2:	881b      	ldrh	r3, [r3, #0]
   176a4:	2bff      	cmp	r3, #255	; 0xff
   176a6:	d00a      	beq.n	176be <prvTraceGetDTS+0x36>
   176a8:	1dbb      	adds	r3, r7, #6
   176aa:	881b      	ldrh	r3, [r3, #0]
   176ac:	4a60      	ldr	r2, [pc, #384]	; (17830 <prvTraceGetDTS+0x1a8>)
   176ae:	4293      	cmp	r3, r2
   176b0:	d005      	beq.n	176be <prvTraceGetDTS+0x36>
   176b2:	4b60      	ldr	r3, [pc, #384]	; (17834 <prvTraceGetDTS+0x1ac>)
   176b4:	0018      	movs	r0, r3
   176b6:	4b60      	ldr	r3, [pc, #384]	; (17838 <prvTraceGetDTS+0x1b0>)
   176b8:	4798      	blx	r3
   176ba:	2300      	movs	r3, #0
   176bc:	e0b3      	b.n	17826 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   176be:	4b5f      	ldr	r3, [pc, #380]	; (1783c <prvTraceGetDTS+0x1b4>)
   176c0:	681b      	ldr	r3, [r3, #0]
   176c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   176c4:	2b00      	cmp	r3, #0
   176c6:	d118      	bne.n	176fa <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   176c8:	4b5d      	ldr	r3, [pc, #372]	; (17840 <prvTraceGetDTS+0x1b8>)
   176ca:	681b      	ldr	r3, [r3, #0]
   176cc:	2b00      	cmp	r3, #0
   176ce:	d006      	beq.n	176de <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   176d0:	4b5a      	ldr	r3, [pc, #360]	; (1783c <prvTraceGetDTS+0x1b4>)
   176d2:	681b      	ldr	r3, [r3, #0]
   176d4:	4a5a      	ldr	r2, [pc, #360]	; (17840 <prvTraceGetDTS+0x1b8>)
   176d6:	6812      	ldr	r2, [r2, #0]
   176d8:	0892      	lsrs	r2, r2, #2
   176da:	625a      	str	r2, [r3, #36]	; 0x24
   176dc:	e00d      	b.n	176fa <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   176de:	4b59      	ldr	r3, [pc, #356]	; (17844 <prvTraceGetDTS+0x1bc>)
   176e0:	681a      	ldr	r2, [r3, #0]
   176e2:	4b59      	ldr	r3, [pc, #356]	; (17848 <prvTraceGetDTS+0x1c0>)
   176e4:	681b      	ldr	r3, [r3, #0]
   176e6:	429a      	cmp	r2, r3
   176e8:	d007      	beq.n	176fa <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   176ea:	4b54      	ldr	r3, [pc, #336]	; (1783c <prvTraceGetDTS+0x1b4>)
   176ec:	681c      	ldr	r4, [r3, #0]
   176ee:	2000      	movs	r0, #0
   176f0:	4b56      	ldr	r3, [pc, #344]	; (1784c <prvTraceGetDTS+0x1c4>)
   176f2:	4798      	blx	r3
   176f4:	0003      	movs	r3, r0
   176f6:	089b      	lsrs	r3, r3, #2
   176f8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   176fa:	230c      	movs	r3, #12
   176fc:	18fb      	adds	r3, r7, r3
   176fe:	0018      	movs	r0, r3
   17700:	4b53      	ldr	r3, [pc, #332]	; (17850 <prvTraceGetDTS+0x1c8>)
   17702:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   17704:	68fa      	ldr	r2, [r7, #12]
   17706:	4b53      	ldr	r3, [pc, #332]	; (17854 <prvTraceGetDTS+0x1cc>)
   17708:	681b      	ldr	r3, [r3, #0]
   1770a:	1ad3      	subs	r3, r2, r3
   1770c:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1770e:	68fa      	ldr	r2, [r7, #12]
   17710:	4b50      	ldr	r3, [pc, #320]	; (17854 <prvTraceGetDTS+0x1cc>)
   17712:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   17714:	4b49      	ldr	r3, [pc, #292]	; (1783c <prvTraceGetDTS+0x1b4>)
   17716:	681b      	ldr	r3, [r3, #0]
   17718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1771a:	2b00      	cmp	r3, #0
   1771c:	d044      	beq.n	177a8 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1771e:	4b47      	ldr	r3, [pc, #284]	; (1783c <prvTraceGetDTS+0x1b4>)
   17720:	681b      	ldr	r3, [r3, #0]
   17722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17724:	693b      	ldr	r3, [r7, #16]
   17726:	429a      	cmp	r2, r3
   17728:	d21e      	bcs.n	17768 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1772a:	4b44      	ldr	r3, [pc, #272]	; (1783c <prvTraceGetDTS+0x1b4>)
   1772c:	681c      	ldr	r4, [r3, #0]
   1772e:	4b43      	ldr	r3, [pc, #268]	; (1783c <prvTraceGetDTS+0x1b4>)
   17730:	681b      	ldr	r3, [r3, #0]
   17732:	6add      	ldr	r5, [r3, #44]	; 0x2c
   17734:	4b41      	ldr	r3, [pc, #260]	; (1783c <prvTraceGetDTS+0x1b4>)
   17736:	681b      	ldr	r3, [r3, #0]
   17738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1773a:	4b47      	ldr	r3, [pc, #284]	; (17858 <prvTraceGetDTS+0x1d0>)
   1773c:	0011      	movs	r1, r2
   1773e:	6938      	ldr	r0, [r7, #16]
   17740:	4798      	blx	r3
   17742:	0003      	movs	r3, r0
   17744:	18eb      	adds	r3, r5, r3
   17746:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   17748:	4b3c      	ldr	r3, [pc, #240]	; (1783c <prvTraceGetDTS+0x1b4>)
   1774a:	681c      	ldr	r4, [r3, #0]
   1774c:	4b3b      	ldr	r3, [pc, #236]	; (1783c <prvTraceGetDTS+0x1b4>)
   1774e:	681b      	ldr	r3, [r3, #0]
   17750:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   17752:	4b3a      	ldr	r3, [pc, #232]	; (1783c <prvTraceGetDTS+0x1b4>)
   17754:	681b      	ldr	r3, [r3, #0]
   17756:	6a59      	ldr	r1, [r3, #36]	; 0x24
   17758:	693a      	ldr	r2, [r7, #16]
   1775a:	4b40      	ldr	r3, [pc, #256]	; (1785c <prvTraceGetDTS+0x1d4>)
   1775c:	0010      	movs	r0, r2
   1775e:	4798      	blx	r3
   17760:	000b      	movs	r3, r1
   17762:	18eb      	adds	r3, r5, r3
   17764:	62a3      	str	r3, [r4, #40]	; 0x28
   17766:	e007      	b.n	17778 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   17768:	4b34      	ldr	r3, [pc, #208]	; (1783c <prvTraceGetDTS+0x1b4>)
   1776a:	681b      	ldr	r3, [r3, #0]
   1776c:	4a33      	ldr	r2, [pc, #204]	; (1783c <prvTraceGetDTS+0x1b4>)
   1776e:	6812      	ldr	r2, [r2, #0]
   17770:	6a91      	ldr	r1, [r2, #40]	; 0x28
   17772:	693a      	ldr	r2, [r7, #16]
   17774:	188a      	adds	r2, r1, r2
   17776:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   17778:	4b30      	ldr	r3, [pc, #192]	; (1783c <prvTraceGetDTS+0x1b4>)
   1777a:	681b      	ldr	r3, [r3, #0]
   1777c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1777e:	4b2f      	ldr	r3, [pc, #188]	; (1783c <prvTraceGetDTS+0x1b4>)
   17780:	681b      	ldr	r3, [r3, #0]
   17782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17784:	429a      	cmp	r2, r3
   17786:	d313      	bcc.n	177b0 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   17788:	4b2c      	ldr	r3, [pc, #176]	; (1783c <prvTraceGetDTS+0x1b4>)
   1778a:	681b      	ldr	r3, [r3, #0]
   1778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1778e:	3201      	adds	r2, #1
   17790:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   17792:	4b2a      	ldr	r3, [pc, #168]	; (1783c <prvTraceGetDTS+0x1b4>)
   17794:	681b      	ldr	r3, [r3, #0]
   17796:	4a29      	ldr	r2, [pc, #164]	; (1783c <prvTraceGetDTS+0x1b4>)
   17798:	6812      	ldr	r2, [r2, #0]
   1779a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1779c:	4a27      	ldr	r2, [pc, #156]	; (1783c <prvTraceGetDTS+0x1b4>)
   1779e:	6812      	ldr	r2, [r2, #0]
   177a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
   177a2:	1a8a      	subs	r2, r1, r2
   177a4:	629a      	str	r2, [r3, #40]	; 0x28
   177a6:	e003      	b.n	177b0 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   177a8:	4b24      	ldr	r3, [pc, #144]	; (1783c <prvTraceGetDTS+0x1b4>)
   177aa:	681b      	ldr	r3, [r3, #0]
   177ac:	68fa      	ldr	r2, [r7, #12]
   177ae:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   177b0:	1dbb      	adds	r3, r7, #6
   177b2:	881a      	ldrh	r2, [r3, #0]
   177b4:	693b      	ldr	r3, [r7, #16]
   177b6:	429a      	cmp	r2, r3
   177b8:	d22f      	bcs.n	1781a <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   177ba:	4b29      	ldr	r3, [pc, #164]	; (17860 <prvTraceGetDTS+0x1d8>)
   177bc:	4798      	blx	r3
   177be:	0003      	movs	r3, r0
   177c0:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   177c2:	697b      	ldr	r3, [r7, #20]
   177c4:	2b00      	cmp	r3, #0
   177c6:	d028      	beq.n	1781a <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   177c8:	1dbb      	adds	r3, r7, #6
   177ca:	881b      	ldrh	r3, [r3, #0]
   177cc:	4a18      	ldr	r2, [pc, #96]	; (17830 <prvTraceGetDTS+0x1a8>)
   177ce:	4293      	cmp	r3, r2
   177d0:	d10b      	bne.n	177ea <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   177d2:	697b      	ldr	r3, [r7, #20]
   177d4:	22a9      	movs	r2, #169	; 0xa9
   177d6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   177d8:	693b      	ldr	r3, [r7, #16]
   177da:	0c1b      	lsrs	r3, r3, #16
   177dc:	b29a      	uxth	r2, r3
   177de:	697b      	ldr	r3, [r7, #20]
   177e0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   177e2:	697b      	ldr	r3, [r7, #20]
   177e4:	2200      	movs	r2, #0
   177e6:	705a      	strb	r2, [r3, #1]
   177e8:	e015      	b.n	17816 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   177ea:	1dbb      	adds	r3, r7, #6
   177ec:	881b      	ldrh	r3, [r3, #0]
   177ee:	2bff      	cmp	r3, #255	; 0xff
   177f0:	d10d      	bne.n	1780e <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   177f2:	697b      	ldr	r3, [r7, #20]
   177f4:	22a8      	movs	r2, #168	; 0xa8
   177f6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   177f8:	693b      	ldr	r3, [r7, #16]
   177fa:	0a1b      	lsrs	r3, r3, #8
   177fc:	b29a      	uxth	r2, r3
   177fe:	697b      	ldr	r3, [r7, #20]
   17800:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   17802:	693b      	ldr	r3, [r7, #16]
   17804:	0e1b      	lsrs	r3, r3, #24
   17806:	b2da      	uxtb	r2, r3
   17808:	697b      	ldr	r3, [r7, #20]
   1780a:	705a      	strb	r2, [r3, #1]
   1780c:	e003      	b.n	17816 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1780e:	4b15      	ldr	r3, [pc, #84]	; (17864 <prvTraceGetDTS+0x1dc>)
   17810:	0018      	movs	r0, r3
   17812:	4b09      	ldr	r3, [pc, #36]	; (17838 <prvTraceGetDTS+0x1b0>)
   17814:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   17816:	4b14      	ldr	r3, [pc, #80]	; (17868 <prvTraceGetDTS+0x1e0>)
   17818:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1781a:	693b      	ldr	r3, [r7, #16]
   1781c:	b29b      	uxth	r3, r3
   1781e:	1dba      	adds	r2, r7, #6
   17820:	8812      	ldrh	r2, [r2, #0]
   17822:	4013      	ands	r3, r2
   17824:	b29b      	uxth	r3, r3
}
   17826:	0018      	movs	r0, r3
   17828:	46bd      	mov	sp, r7
   1782a:	b006      	add	sp, #24
   1782c:	bdb0      	pop	{r4, r5, r7, pc}
   1782e:	46c0      	nop			; (mov r8, r8)
   17830:	0000ffff 	.word	0x0000ffff
   17834:	000240ec 	.word	0x000240ec
   17838:	00017475 	.word	0x00017475
   1783c:	20000654 	.word	0x20000654
   17840:	200005b0 	.word	0x200005b0
   17844:	e000e018 	.word	0xe000e018
   17848:	20004830 	.word	0x20004830
   1784c:	0001dee9 	.word	0x0001dee9
   17850:	0001786d 	.word	0x0001786d
   17854:	20000660 	.word	0x20000660
   17858:	0001f40d 	.word	0x0001f40d
   1785c:	0001f519 	.word	0x0001f519
   17860:	0001702d 	.word	0x0001702d
   17864:	0002412c 	.word	0x0002412c
   17868:	00017631 	.word	0x00017631

0001786c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1786c:	b580      	push	{r7, lr}
   1786e:	b084      	sub	sp, #16
   17870:	af00      	add	r7, sp, #0
   17872:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   17874:	2300      	movs	r3, #0
   17876:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   17878:	2300      	movs	r3, #0
   1787a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1787c:	4b2d      	ldr	r3, [pc, #180]	; (17934 <prvTracePortGetTimeStamp+0xc8>)
   1787e:	681b      	ldr	r3, [r3, #0]
   17880:	2b01      	cmp	r3, #1
   17882:	d107      	bne.n	17894 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   17884:	687b      	ldr	r3, [r7, #4]
   17886:	2b00      	cmp	r3, #0
   17888:	d04f      	beq.n	1792a <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1788a:	4b2b      	ldr	r3, [pc, #172]	; (17938 <prvTracePortGetTimeStamp+0xcc>)
   1788c:	681a      	ldr	r2, [r3, #0]
   1788e:	687b      	ldr	r3, [r7, #4]
   17890:	601a      	str	r2, [r3, #0]
		return;
   17892:	e04a      	b.n	1792a <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   17894:	4b29      	ldr	r3, [pc, #164]	; (1793c <prvTracePortGetTimeStamp+0xd0>)
   17896:	681a      	ldr	r2, [r3, #0]
   17898:	4b29      	ldr	r3, [pc, #164]	; (17940 <prvTracePortGetTimeStamp+0xd4>)
   1789a:	681b      	ldr	r3, [r3, #0]
   1789c:	1ad3      	subs	r3, r2, r3
   1789e:	3301      	adds	r3, #1
   178a0:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   178a2:	4b28      	ldr	r3, [pc, #160]	; (17944 <prvTracePortGetTimeStamp+0xd8>)
   178a4:	681a      	ldr	r2, [r3, #0]
   178a6:	4b28      	ldr	r3, [pc, #160]	; (17948 <prvTracePortGetTimeStamp+0xdc>)
   178a8:	681b      	ldr	r3, [r3, #0]
   178aa:	1ad3      	subs	r3, r2, r3
   178ac:	3b01      	subs	r3, #1
   178ae:	2b00      	cmp	r3, #0
   178b0:	db03      	blt.n	178ba <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   178b2:	4b24      	ldr	r3, [pc, #144]	; (17944 <prvTracePortGetTimeStamp+0xd8>)
   178b4:	681b      	ldr	r3, [r3, #0]
   178b6:	60fb      	str	r3, [r7, #12]
   178b8:	e002      	b.n	178c0 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   178ba:	4b23      	ldr	r3, [pc, #140]	; (17948 <prvTracePortGetTimeStamp+0xdc>)
   178bc:	681b      	ldr	r3, [r3, #0]
   178be:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   178c0:	4b20      	ldr	r3, [pc, #128]	; (17944 <prvTracePortGetTimeStamp+0xd8>)
   178c2:	681b      	ldr	r3, [r3, #0]
   178c4:	68fa      	ldr	r2, [r7, #12]
   178c6:	429a      	cmp	r2, r3
   178c8:	d107      	bne.n	178da <prvTracePortGetTimeStamp+0x6e>
   178ca:	4b20      	ldr	r3, [pc, #128]	; (1794c <prvTracePortGetTimeStamp+0xe0>)
   178cc:	681b      	ldr	r3, [r3, #0]
   178ce:	68ba      	ldr	r2, [r7, #8]
   178d0:	429a      	cmp	r2, r3
   178d2:	d202      	bcs.n	178da <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   178d4:	68fb      	ldr	r3, [r7, #12]
   178d6:	3301      	adds	r3, #1
   178d8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   178da:	687b      	ldr	r3, [r7, #4]
   178dc:	2b00      	cmp	r3, #0
   178de:	d016      	beq.n	1790e <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   178e0:	4b16      	ldr	r3, [pc, #88]	; (1793c <prvTracePortGetTimeStamp+0xd0>)
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	3301      	adds	r3, #1
   178e6:	089b      	lsrs	r3, r3, #2
   178e8:	68fa      	ldr	r2, [r7, #12]
   178ea:	435a      	muls	r2, r3
   178ec:	4b12      	ldr	r3, [pc, #72]	; (17938 <prvTracePortGetTimeStamp+0xcc>)
   178ee:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   178f0:	4b12      	ldr	r3, [pc, #72]	; (1793c <prvTracePortGetTimeStamp+0xd0>)
   178f2:	681b      	ldr	r3, [r3, #0]
   178f4:	3301      	adds	r3, #1
   178f6:	2203      	movs	r2, #3
   178f8:	4013      	ands	r3, r2
   178fa:	68fa      	ldr	r2, [r7, #12]
   178fc:	435a      	muls	r2, r3
   178fe:	68bb      	ldr	r3, [r7, #8]
   17900:	18d3      	adds	r3, r2, r3
   17902:	089a      	lsrs	r2, r3, #2
   17904:	4b0c      	ldr	r3, [pc, #48]	; (17938 <prvTracePortGetTimeStamp+0xcc>)
   17906:	681b      	ldr	r3, [r3, #0]
   17908:	18d2      	adds	r2, r2, r3
   1790a:	4b0b      	ldr	r3, [pc, #44]	; (17938 <prvTracePortGetTimeStamp+0xcc>)
   1790c:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1790e:	4b0d      	ldr	r3, [pc, #52]	; (17944 <prvTracePortGetTimeStamp+0xd8>)
   17910:	68fa      	ldr	r2, [r7, #12]
   17912:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   17914:	687b      	ldr	r3, [r7, #4]
   17916:	2b00      	cmp	r3, #0
   17918:	d003      	beq.n	17922 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1791a:	4b07      	ldr	r3, [pc, #28]	; (17938 <prvTracePortGetTimeStamp+0xcc>)
   1791c:	681a      	ldr	r2, [r3, #0]
   1791e:	687b      	ldr	r3, [r7, #4]
   17920:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   17922:	4b0a      	ldr	r3, [pc, #40]	; (1794c <prvTracePortGetTimeStamp+0xe0>)
   17924:	68ba      	ldr	r2, [r7, #8]
   17926:	601a      	str	r2, [r3, #0]
   17928:	e000      	b.n	1792c <prvTracePortGetTimeStamp+0xc0>
		return;
   1792a:	46c0      	nop			; (mov r8, r8)
}
   1792c:	46bd      	mov	sp, r7
   1792e:	b004      	add	sp, #16
   17930:	bd80      	pop	{r7, pc}
   17932:	46c0      	nop			; (mov r8, r8)
   17934:	200005a0 	.word	0x200005a0
   17938:	200005a4 	.word	0x200005a4
   1793c:	e000e014 	.word	0xe000e014
   17940:	e000e018 	.word	0xe000e018
   17944:	20000664 	.word	0x20000664
   17948:	2000059c 	.word	0x2000059c
   1794c:	20000668 	.word	0x20000668

00017950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   17950:	b580      	push	{r7, lr}
   17952:	b082      	sub	sp, #8
   17954:	af00      	add	r7, sp, #0
   17956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   17958:	687b      	ldr	r3, [r7, #4]
   1795a:	3308      	adds	r3, #8
   1795c:	001a      	movs	r2, r3
   1795e:	687b      	ldr	r3, [r7, #4]
   17960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   17962:	687b      	ldr	r3, [r7, #4]
   17964:	2201      	movs	r2, #1
   17966:	4252      	negs	r2, r2
   17968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1796a:	687b      	ldr	r3, [r7, #4]
   1796c:	3308      	adds	r3, #8
   1796e:	001a      	movs	r2, r3
   17970:	687b      	ldr	r3, [r7, #4]
   17972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   17974:	687b      	ldr	r3, [r7, #4]
   17976:	3308      	adds	r3, #8
   17978:	001a      	movs	r2, r3
   1797a:	687b      	ldr	r3, [r7, #4]
   1797c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1797e:	687b      	ldr	r3, [r7, #4]
   17980:	2200      	movs	r2, #0
   17982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   17984:	46c0      	nop			; (mov r8, r8)
   17986:	46bd      	mov	sp, r7
   17988:	b002      	add	sp, #8
   1798a:	bd80      	pop	{r7, pc}

0001798c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1798c:	b580      	push	{r7, lr}
   1798e:	b082      	sub	sp, #8
   17990:	af00      	add	r7, sp, #0
   17992:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   17994:	687b      	ldr	r3, [r7, #4]
   17996:	2200      	movs	r2, #0
   17998:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1799a:	46c0      	nop			; (mov r8, r8)
   1799c:	46bd      	mov	sp, r7
   1799e:	b002      	add	sp, #8
   179a0:	bd80      	pop	{r7, pc}

000179a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   179a2:	b580      	push	{r7, lr}
   179a4:	b084      	sub	sp, #16
   179a6:	af00      	add	r7, sp, #0
   179a8:	6078      	str	r0, [r7, #4]
   179aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   179ac:	687b      	ldr	r3, [r7, #4]
   179ae:	685b      	ldr	r3, [r3, #4]
   179b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   179b2:	683b      	ldr	r3, [r7, #0]
   179b4:	68fa      	ldr	r2, [r7, #12]
   179b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   179b8:	68fb      	ldr	r3, [r7, #12]
   179ba:	689a      	ldr	r2, [r3, #8]
   179bc:	683b      	ldr	r3, [r7, #0]
   179be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   179c0:	68fb      	ldr	r3, [r7, #12]
   179c2:	689b      	ldr	r3, [r3, #8]
   179c4:	683a      	ldr	r2, [r7, #0]
   179c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   179c8:	68fb      	ldr	r3, [r7, #12]
   179ca:	683a      	ldr	r2, [r7, #0]
   179cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   179ce:	683b      	ldr	r3, [r7, #0]
   179d0:	687a      	ldr	r2, [r7, #4]
   179d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   179d4:	687b      	ldr	r3, [r7, #4]
   179d6:	681b      	ldr	r3, [r3, #0]
   179d8:	1c5a      	adds	r2, r3, #1
   179da:	687b      	ldr	r3, [r7, #4]
   179dc:	601a      	str	r2, [r3, #0]
}
   179de:	46c0      	nop			; (mov r8, r8)
   179e0:	46bd      	mov	sp, r7
   179e2:	b004      	add	sp, #16
   179e4:	bd80      	pop	{r7, pc}

000179e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   179e6:	b580      	push	{r7, lr}
   179e8:	b084      	sub	sp, #16
   179ea:	af00      	add	r7, sp, #0
   179ec:	6078      	str	r0, [r7, #4]
   179ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   179f0:	683b      	ldr	r3, [r7, #0]
   179f2:	681b      	ldr	r3, [r3, #0]
   179f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   179f6:	68bb      	ldr	r3, [r7, #8]
   179f8:	3301      	adds	r3, #1
   179fa:	d103      	bne.n	17a04 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   179fc:	687b      	ldr	r3, [r7, #4]
   179fe:	691b      	ldr	r3, [r3, #16]
   17a00:	60fb      	str	r3, [r7, #12]
   17a02:	e00c      	b.n	17a1e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   17a04:	687b      	ldr	r3, [r7, #4]
   17a06:	3308      	adds	r3, #8
   17a08:	60fb      	str	r3, [r7, #12]
   17a0a:	e002      	b.n	17a12 <vListInsert+0x2c>
   17a0c:	68fb      	ldr	r3, [r7, #12]
   17a0e:	685b      	ldr	r3, [r3, #4]
   17a10:	60fb      	str	r3, [r7, #12]
   17a12:	68fb      	ldr	r3, [r7, #12]
   17a14:	685b      	ldr	r3, [r3, #4]
   17a16:	681a      	ldr	r2, [r3, #0]
   17a18:	68bb      	ldr	r3, [r7, #8]
   17a1a:	429a      	cmp	r2, r3
   17a1c:	d9f6      	bls.n	17a0c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   17a1e:	68fb      	ldr	r3, [r7, #12]
   17a20:	685a      	ldr	r2, [r3, #4]
   17a22:	683b      	ldr	r3, [r7, #0]
   17a24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   17a26:	683b      	ldr	r3, [r7, #0]
   17a28:	685b      	ldr	r3, [r3, #4]
   17a2a:	683a      	ldr	r2, [r7, #0]
   17a2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   17a2e:	683b      	ldr	r3, [r7, #0]
   17a30:	68fa      	ldr	r2, [r7, #12]
   17a32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   17a34:	68fb      	ldr	r3, [r7, #12]
   17a36:	683a      	ldr	r2, [r7, #0]
   17a38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   17a3a:	683b      	ldr	r3, [r7, #0]
   17a3c:	687a      	ldr	r2, [r7, #4]
   17a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	681b      	ldr	r3, [r3, #0]
   17a44:	1c5a      	adds	r2, r3, #1
   17a46:	687b      	ldr	r3, [r7, #4]
   17a48:	601a      	str	r2, [r3, #0]
}
   17a4a:	46c0      	nop			; (mov r8, r8)
   17a4c:	46bd      	mov	sp, r7
   17a4e:	b004      	add	sp, #16
   17a50:	bd80      	pop	{r7, pc}

00017a52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   17a52:	b580      	push	{r7, lr}
   17a54:	b084      	sub	sp, #16
   17a56:	af00      	add	r7, sp, #0
   17a58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	691b      	ldr	r3, [r3, #16]
   17a5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   17a60:	687b      	ldr	r3, [r7, #4]
   17a62:	685b      	ldr	r3, [r3, #4]
   17a64:	687a      	ldr	r2, [r7, #4]
   17a66:	6892      	ldr	r2, [r2, #8]
   17a68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   17a6a:	687b      	ldr	r3, [r7, #4]
   17a6c:	689b      	ldr	r3, [r3, #8]
   17a6e:	687a      	ldr	r2, [r7, #4]
   17a70:	6852      	ldr	r2, [r2, #4]
   17a72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   17a74:	68fb      	ldr	r3, [r7, #12]
   17a76:	685a      	ldr	r2, [r3, #4]
   17a78:	687b      	ldr	r3, [r7, #4]
   17a7a:	429a      	cmp	r2, r3
   17a7c:	d103      	bne.n	17a86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   17a7e:	687b      	ldr	r3, [r7, #4]
   17a80:	689a      	ldr	r2, [r3, #8]
   17a82:	68fb      	ldr	r3, [r7, #12]
   17a84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   17a86:	687b      	ldr	r3, [r7, #4]
   17a88:	2200      	movs	r2, #0
   17a8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   17a8c:	68fb      	ldr	r3, [r7, #12]
   17a8e:	681b      	ldr	r3, [r3, #0]
   17a90:	1e5a      	subs	r2, r3, #1
   17a92:	68fb      	ldr	r3, [r7, #12]
   17a94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   17a96:	68fb      	ldr	r3, [r7, #12]
   17a98:	681b      	ldr	r3, [r3, #0]
}
   17a9a:	0018      	movs	r0, r3
   17a9c:	46bd      	mov	sp, r7
   17a9e:	b004      	add	sp, #16
   17aa0:	bd80      	pop	{r7, pc}
	...

00017aa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   17aa4:	b580      	push	{r7, lr}
   17aa6:	b084      	sub	sp, #16
   17aa8:	af00      	add	r7, sp, #0
   17aaa:	60f8      	str	r0, [r7, #12]
   17aac:	60b9      	str	r1, [r7, #8]
   17aae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   17ab0:	68fb      	ldr	r3, [r7, #12]
   17ab2:	3b04      	subs	r3, #4
   17ab4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   17ab6:	68fb      	ldr	r3, [r7, #12]
   17ab8:	2280      	movs	r2, #128	; 0x80
   17aba:	0452      	lsls	r2, r2, #17
   17abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   17abe:	68fb      	ldr	r3, [r7, #12]
   17ac0:	3b04      	subs	r3, #4
   17ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   17ac4:	68ba      	ldr	r2, [r7, #8]
   17ac6:	68fb      	ldr	r3, [r7, #12]
   17ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   17aca:	68fb      	ldr	r3, [r7, #12]
   17acc:	3b04      	subs	r3, #4
   17ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   17ad0:	4a08      	ldr	r2, [pc, #32]	; (17af4 <pxPortInitialiseStack+0x50>)
   17ad2:	68fb      	ldr	r3, [r7, #12]
   17ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   17ad6:	68fb      	ldr	r3, [r7, #12]
   17ad8:	3b14      	subs	r3, #20
   17ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   17adc:	687a      	ldr	r2, [r7, #4]
   17ade:	68fb      	ldr	r3, [r7, #12]
   17ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   17ae2:	68fb      	ldr	r3, [r7, #12]
   17ae4:	3b20      	subs	r3, #32
   17ae6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   17ae8:	68fb      	ldr	r3, [r7, #12]
}
   17aea:	0018      	movs	r0, r3
   17aec:	46bd      	mov	sp, r7
   17aee:	b004      	add	sp, #16
   17af0:	bd80      	pop	{r7, pc}
   17af2:	46c0      	nop			; (mov r8, r8)
   17af4:	00017af9 	.word	0x00017af9

00017af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   17af8:	b580      	push	{r7, lr}
   17afa:	b082      	sub	sp, #8
   17afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   17afe:	2300      	movs	r3, #0
   17b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   17b02:	4b07      	ldr	r3, [pc, #28]	; (17b20 <prvTaskExitError+0x28>)
   17b04:	681b      	ldr	r3, [r3, #0]
   17b06:	3301      	adds	r3, #1
   17b08:	d001      	beq.n	17b0e <prvTaskExitError+0x16>
   17b0a:	b672      	cpsid	i
   17b0c:	e7fe      	b.n	17b0c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   17b0e:	b672      	cpsid	i
	while( ulDummy == 0 )
   17b10:	46c0      	nop			; (mov r8, r8)
   17b12:	687b      	ldr	r3, [r7, #4]
   17b14:	2b00      	cmp	r3, #0
   17b16:	d0fc      	beq.n	17b12 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   17b18:	46c0      	nop			; (mov r8, r8)
   17b1a:	46bd      	mov	sp, r7
   17b1c:	b002      	add	sp, #8
   17b1e:	bd80      	pop	{r7, pc}
   17b20:	2000003c 	.word	0x2000003c

00017b24 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   17b24:	b580      	push	{r7, lr}
   17b26:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   17b28:	46c0      	nop			; (mov r8, r8)
   17b2a:	46bd      	mov	sp, r7
   17b2c:	bd80      	pop	{r7, pc}
	...

00017b30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   17b30:	4a0b      	ldr	r2, [pc, #44]	; (17b60 <pxCurrentTCBConst2>)
   17b32:	6813      	ldr	r3, [r2, #0]
   17b34:	6818      	ldr	r0, [r3, #0]
   17b36:	3020      	adds	r0, #32
   17b38:	f380 8809 	msr	PSP, r0
   17b3c:	2002      	movs	r0, #2
   17b3e:	f380 8814 	msr	CONTROL, r0
   17b42:	f3bf 8f6f 	isb	sy
   17b46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   17b48:	46ae      	mov	lr, r5
   17b4a:	bc08      	pop	{r3}
   17b4c:	bc04      	pop	{r2}
   17b4e:	b662      	cpsie	i
   17b50:	4718      	bx	r3
   17b52:	46c0      	nop			; (mov r8, r8)
   17b54:	46c0      	nop			; (mov r8, r8)
   17b56:	46c0      	nop			; (mov r8, r8)
   17b58:	46c0      	nop			; (mov r8, r8)
   17b5a:	46c0      	nop			; (mov r8, r8)
   17b5c:	46c0      	nop			; (mov r8, r8)
   17b5e:	46c0      	nop			; (mov r8, r8)

00017b60 <pxCurrentTCBConst2>:
   17b60:	2000393c 	.word	0x2000393c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   17b64:	46c0      	nop			; (mov r8, r8)
   17b66:	46c0      	nop			; (mov r8, r8)

00017b68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   17b68:	b580      	push	{r7, lr}
   17b6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   17b6c:	4b0e      	ldr	r3, [pc, #56]	; (17ba8 <xPortStartScheduler+0x40>)
   17b6e:	4a0e      	ldr	r2, [pc, #56]	; (17ba8 <xPortStartScheduler+0x40>)
   17b70:	6812      	ldr	r2, [r2, #0]
   17b72:	21ff      	movs	r1, #255	; 0xff
   17b74:	0409      	lsls	r1, r1, #16
   17b76:	430a      	orrs	r2, r1
   17b78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   17b7a:	4b0b      	ldr	r3, [pc, #44]	; (17ba8 <xPortStartScheduler+0x40>)
   17b7c:	4a0a      	ldr	r2, [pc, #40]	; (17ba8 <xPortStartScheduler+0x40>)
   17b7e:	6812      	ldr	r2, [r2, #0]
   17b80:	21ff      	movs	r1, #255	; 0xff
   17b82:	0609      	lsls	r1, r1, #24
   17b84:	430a      	orrs	r2, r1
   17b86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   17b88:	4b08      	ldr	r3, [pc, #32]	; (17bac <xPortStartScheduler+0x44>)
   17b8a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   17b8c:	4b08      	ldr	r3, [pc, #32]	; (17bb0 <xPortStartScheduler+0x48>)
   17b8e:	2200      	movs	r2, #0
   17b90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   17b92:	4b08      	ldr	r3, [pc, #32]	; (17bb4 <xPortStartScheduler+0x4c>)
   17b94:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   17b96:	4b08      	ldr	r3, [pc, #32]	; (17bb8 <xPortStartScheduler+0x50>)
   17b98:	4798      	blx	r3
	prvTaskExitError();
   17b9a:	4b08      	ldr	r3, [pc, #32]	; (17bbc <xPortStartScheduler+0x54>)
   17b9c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   17b9e:	2300      	movs	r3, #0
}
   17ba0:	0018      	movs	r0, r3
   17ba2:	46bd      	mov	sp, r7
   17ba4:	bd80      	pop	{r7, pc}
   17ba6:	46c0      	nop			; (mov r8, r8)
   17ba8:	e000ed20 	.word	0xe000ed20
   17bac:	00017cc9 	.word	0x00017cc9
   17bb0:	2000003c 	.word	0x2000003c
   17bb4:	00017b31 	.word	0x00017b31
   17bb8:	0001a225 	.word	0x0001a225
   17bbc:	00017af9 	.word	0x00017af9

00017bc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   17bc0:	b580      	push	{r7, lr}
   17bc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   17bc4:	4b03      	ldr	r3, [pc, #12]	; (17bd4 <vPortYield+0x14>)
   17bc6:	2280      	movs	r2, #128	; 0x80
   17bc8:	0552      	lsls	r2, r2, #21
   17bca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   17bcc:	46c0      	nop			; (mov r8, r8)
   17bce:	46bd      	mov	sp, r7
   17bd0:	bd80      	pop	{r7, pc}
   17bd2:	46c0      	nop			; (mov r8, r8)
   17bd4:	e000ed04 	.word	0xe000ed04

00017bd8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   17bd8:	b580      	push	{r7, lr}
   17bda:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   17bdc:	b672      	cpsid	i
    uxCriticalNesting++;
   17bde:	4b06      	ldr	r3, [pc, #24]	; (17bf8 <vPortEnterCritical+0x20>)
   17be0:	681b      	ldr	r3, [r3, #0]
   17be2:	1c5a      	adds	r2, r3, #1
   17be4:	4b04      	ldr	r3, [pc, #16]	; (17bf8 <vPortEnterCritical+0x20>)
   17be6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   17be8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   17bec:	f3bf 8f6f 	isb	sy
}
   17bf0:	46c0      	nop			; (mov r8, r8)
   17bf2:	46bd      	mov	sp, r7
   17bf4:	bd80      	pop	{r7, pc}
   17bf6:	46c0      	nop			; (mov r8, r8)
   17bf8:	2000003c 	.word	0x2000003c

00017bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   17bfc:	b580      	push	{r7, lr}
   17bfe:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   17c00:	4b09      	ldr	r3, [pc, #36]	; (17c28 <vPortExitCritical+0x2c>)
   17c02:	681b      	ldr	r3, [r3, #0]
   17c04:	2b00      	cmp	r3, #0
   17c06:	d101      	bne.n	17c0c <vPortExitCritical+0x10>
   17c08:	b672      	cpsid	i
   17c0a:	e7fe      	b.n	17c0a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   17c0c:	4b06      	ldr	r3, [pc, #24]	; (17c28 <vPortExitCritical+0x2c>)
   17c0e:	681b      	ldr	r3, [r3, #0]
   17c10:	1e5a      	subs	r2, r3, #1
   17c12:	4b05      	ldr	r3, [pc, #20]	; (17c28 <vPortExitCritical+0x2c>)
   17c14:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   17c16:	4b04      	ldr	r3, [pc, #16]	; (17c28 <vPortExitCritical+0x2c>)
   17c18:	681b      	ldr	r3, [r3, #0]
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d100      	bne.n	17c20 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   17c1e:	b662      	cpsie	i
    }
}
   17c20:	46c0      	nop			; (mov r8, r8)
   17c22:	46bd      	mov	sp, r7
   17c24:	bd80      	pop	{r7, pc}
   17c26:	46c0      	nop			; (mov r8, r8)
   17c28:	2000003c 	.word	0x2000003c

00017c2c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   17c2c:	f3ef 8010 	mrs	r0, PRIMASK
   17c30:	b672      	cpsid	i
   17c32:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   17c34:	46c0      	nop			; (mov r8, r8)
   17c36:	0018      	movs	r0, r3

00017c38 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   17c38:	f380 8810 	msr	PRIMASK, r0
   17c3c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   17c3e:	46c0      	nop			; (mov r8, r8)

00017c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   17c40:	f3ef 8009 	mrs	r0, PSP
   17c44:	4b0e      	ldr	r3, [pc, #56]	; (17c80 <pxCurrentTCBConst>)
   17c46:	681a      	ldr	r2, [r3, #0]
   17c48:	3820      	subs	r0, #32
   17c4a:	6010      	str	r0, [r2, #0]
   17c4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17c4e:	4644      	mov	r4, r8
   17c50:	464d      	mov	r5, r9
   17c52:	4656      	mov	r6, sl
   17c54:	465f      	mov	r7, fp
   17c56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   17c58:	b508      	push	{r3, lr}
   17c5a:	b672      	cpsid	i
   17c5c:	f002 fae2 	bl	1a224 <vTaskSwitchContext>
   17c60:	b662      	cpsie	i
   17c62:	bc0c      	pop	{r2, r3}
   17c64:	6811      	ldr	r1, [r2, #0]
   17c66:	6808      	ldr	r0, [r1, #0]
   17c68:	3010      	adds	r0, #16
   17c6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17c6c:	46a0      	mov	r8, r4
   17c6e:	46a9      	mov	r9, r5
   17c70:	46b2      	mov	sl, r6
   17c72:	46bb      	mov	fp, r7
   17c74:	f380 8809 	msr	PSP, r0
   17c78:	3820      	subs	r0, #32
   17c7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   17c7c:	4718      	bx	r3
   17c7e:	46c0      	nop			; (mov r8, r8)

00017c80 <pxCurrentTCBConst>:
   17c80:	2000393c 	.word	0x2000393c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   17c84:	46c0      	nop			; (mov r8, r8)
   17c86:	46c0      	nop			; (mov r8, r8)

00017c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   17c88:	b580      	push	{r7, lr}
   17c8a:	b082      	sub	sp, #8
   17c8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   17c8e:	4b0a      	ldr	r3, [pc, #40]	; (17cb8 <SysTick_Handler+0x30>)
   17c90:	4798      	blx	r3
   17c92:	0003      	movs	r3, r0
   17c94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   17c96:	4b09      	ldr	r3, [pc, #36]	; (17cbc <SysTick_Handler+0x34>)
   17c98:	4798      	blx	r3
   17c9a:	1e03      	subs	r3, r0, #0
   17c9c:	d003      	beq.n	17ca6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   17c9e:	4b08      	ldr	r3, [pc, #32]	; (17cc0 <SysTick_Handler+0x38>)
   17ca0:	2280      	movs	r2, #128	; 0x80
   17ca2:	0552      	lsls	r2, r2, #21
   17ca4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   17ca6:	687b      	ldr	r3, [r7, #4]
   17ca8:	0018      	movs	r0, r3
   17caa:	4b06      	ldr	r3, [pc, #24]	; (17cc4 <SysTick_Handler+0x3c>)
   17cac:	4798      	blx	r3
}
   17cae:	46c0      	nop			; (mov r8, r8)
   17cb0:	46bd      	mov	sp, r7
   17cb2:	b002      	add	sp, #8
   17cb4:	bd80      	pop	{r7, pc}
   17cb6:	46c0      	nop			; (mov r8, r8)
   17cb8:	00017c2d 	.word	0x00017c2d
   17cbc:	0001a035 	.word	0x0001a035
   17cc0:	e000ed04 	.word	0xe000ed04
   17cc4:	00017c39 	.word	0x00017c39

00017cc8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   17cc8:	b5b0      	push	{r4, r5, r7, lr}
   17cca:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   17ccc:	4b0b      	ldr	r3, [pc, #44]	; (17cfc <prvSetupTimerInterrupt+0x34>)
   17cce:	2200      	movs	r2, #0
   17cd0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   17cd2:	4b0b      	ldr	r3, [pc, #44]	; (17d00 <prvSetupTimerInterrupt+0x38>)
   17cd4:	2200      	movs	r2, #0
   17cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   17cd8:	4c0a      	ldr	r4, [pc, #40]	; (17d04 <prvSetupTimerInterrupt+0x3c>)
   17cda:	2000      	movs	r0, #0
   17cdc:	4b0a      	ldr	r3, [pc, #40]	; (17d08 <prvSetupTimerInterrupt+0x40>)
   17cde:	4798      	blx	r3
   17ce0:	4b0a      	ldr	r3, [pc, #40]	; (17d0c <prvSetupTimerInterrupt+0x44>)
   17ce2:	22fa      	movs	r2, #250	; 0xfa
   17ce4:	0091      	lsls	r1, r2, #2
   17ce6:	4798      	blx	r3
   17ce8:	0003      	movs	r3, r0
   17cea:	3b01      	subs	r3, #1
   17cec:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   17cee:	4b03      	ldr	r3, [pc, #12]	; (17cfc <prvSetupTimerInterrupt+0x34>)
   17cf0:	2207      	movs	r2, #7
   17cf2:	601a      	str	r2, [r3, #0]
}
   17cf4:	46c0      	nop			; (mov r8, r8)
   17cf6:	46bd      	mov	sp, r7
   17cf8:	bdb0      	pop	{r4, r5, r7, pc}
   17cfa:	46c0      	nop			; (mov r8, r8)
   17cfc:	e000e010 	.word	0xe000e010
   17d00:	e000e018 	.word	0xe000e018
   17d04:	e000e014 	.word	0xe000e014
   17d08:	0001dee9 	.word	0x0001dee9
   17d0c:	0001f40d 	.word	0x0001f40d

00017d10 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   17d10:	b580      	push	{r7, lr}
   17d12:	b084      	sub	sp, #16
   17d14:	af00      	add	r7, sp, #0
   17d16:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   17d18:	2300      	movs	r3, #0
   17d1a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   17d1c:	687b      	ldr	r3, [r7, #4]
   17d1e:	2207      	movs	r2, #7
   17d20:	4013      	ands	r3, r2
   17d22:	d004      	beq.n	17d2e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   17d24:	687b      	ldr	r3, [r7, #4]
   17d26:	2207      	movs	r2, #7
   17d28:	4393      	bics	r3, r2
   17d2a:	3308      	adds	r3, #8
   17d2c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   17d2e:	4b21      	ldr	r3, [pc, #132]	; (17db4 <pvPortMalloc+0xa4>)
   17d30:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   17d32:	4b21      	ldr	r3, [pc, #132]	; (17db8 <pvPortMalloc+0xa8>)
   17d34:	681b      	ldr	r3, [r3, #0]
   17d36:	2b00      	cmp	r3, #0
   17d38:	d105      	bne.n	17d46 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   17d3a:	4b20      	ldr	r3, [pc, #128]	; (17dbc <pvPortMalloc+0xac>)
   17d3c:	2207      	movs	r2, #7
   17d3e:	4393      	bics	r3, r2
   17d40:	001a      	movs	r2, r3
   17d42:	4b1d      	ldr	r3, [pc, #116]	; (17db8 <pvPortMalloc+0xa8>)
   17d44:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   17d46:	4b1e      	ldr	r3, [pc, #120]	; (17dc0 <pvPortMalloc+0xb0>)
   17d48:	681a      	ldr	r2, [r3, #0]
   17d4a:	687b      	ldr	r3, [r7, #4]
   17d4c:	18d3      	adds	r3, r2, r3
   17d4e:	4a1d      	ldr	r2, [pc, #116]	; (17dc4 <pvPortMalloc+0xb4>)
   17d50:	4293      	cmp	r3, r2
   17d52:	d813      	bhi.n	17d7c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   17d54:	4b1a      	ldr	r3, [pc, #104]	; (17dc0 <pvPortMalloc+0xb0>)
   17d56:	681a      	ldr	r2, [r3, #0]
   17d58:	687b      	ldr	r3, [r7, #4]
   17d5a:	18d2      	adds	r2, r2, r3
   17d5c:	4b18      	ldr	r3, [pc, #96]	; (17dc0 <pvPortMalloc+0xb0>)
   17d5e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   17d60:	429a      	cmp	r2, r3
   17d62:	d90b      	bls.n	17d7c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   17d64:	4b14      	ldr	r3, [pc, #80]	; (17db8 <pvPortMalloc+0xa8>)
   17d66:	681a      	ldr	r2, [r3, #0]
   17d68:	4b15      	ldr	r3, [pc, #84]	; (17dc0 <pvPortMalloc+0xb0>)
   17d6a:	681b      	ldr	r3, [r3, #0]
   17d6c:	18d3      	adds	r3, r2, r3
   17d6e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   17d70:	4b13      	ldr	r3, [pc, #76]	; (17dc0 <pvPortMalloc+0xb0>)
   17d72:	681a      	ldr	r2, [r3, #0]
   17d74:	687b      	ldr	r3, [r7, #4]
   17d76:	18d2      	adds	r2, r2, r3
   17d78:	4b11      	ldr	r3, [pc, #68]	; (17dc0 <pvPortMalloc+0xb0>)
   17d7a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   17d7c:	68fb      	ldr	r3, [r7, #12]
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d006      	beq.n	17d90 <pvPortMalloc+0x80>
   17d82:	68fb      	ldr	r3, [r7, #12]
   17d84:	687a      	ldr	r2, [r7, #4]
   17d86:	0019      	movs	r1, r3
   17d88:	2094      	movs	r0, #148	; 0x94
   17d8a:	4b0f      	ldr	r3, [pc, #60]	; (17dc8 <pvPortMalloc+0xb8>)
   17d8c:	4798      	blx	r3
   17d8e:	e005      	b.n	17d9c <pvPortMalloc+0x8c>
   17d90:	68fb      	ldr	r3, [r7, #12]
   17d92:	687a      	ldr	r2, [r7, #4]
   17d94:	0019      	movs	r1, r3
   17d96:	20e8      	movs	r0, #232	; 0xe8
   17d98:	4b0b      	ldr	r3, [pc, #44]	; (17dc8 <pvPortMalloc+0xb8>)
   17d9a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   17d9c:	4b0b      	ldr	r3, [pc, #44]	; (17dcc <pvPortMalloc+0xbc>)
   17d9e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   17da0:	68fb      	ldr	r3, [r7, #12]
   17da2:	2b00      	cmp	r3, #0
   17da4:	d101      	bne.n	17daa <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   17da6:	4b0a      	ldr	r3, [pc, #40]	; (17dd0 <pvPortMalloc+0xc0>)
   17da8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   17daa:	68fb      	ldr	r3, [r7, #12]
}
   17dac:	0018      	movs	r0, r3
   17dae:	46bd      	mov	sp, r7
   17db0:	b004      	add	sp, #16
   17db2:	bd80      	pop	{r7, pc}
   17db4:	00019e91 	.word	0x00019e91
   17db8:	20003938 	.word	0x20003938
   17dbc:	20000674 	.word	0x20000674
   17dc0:	20003934 	.word	0x20003934
   17dc4:	000032bf 	.word	0x000032bf
   17dc8:	00016481 	.word	0x00016481
   17dcc:	00019ea9 	.word	0x00019ea9
   17dd0:	0001f3dd 	.word	0x0001f3dd

00017dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   17dd4:	b580      	push	{r7, lr}
   17dd6:	b082      	sub	sp, #8
   17dd8:	af00      	add	r7, sp, #0
   17dda:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   17ddc:	687b      	ldr	r3, [r7, #4]
   17dde:	2b00      	cmp	r3, #0
   17de0:	d001      	beq.n	17de6 <vPortFree+0x12>
   17de2:	b672      	cpsid	i
   17de4:	e7fe      	b.n	17de4 <vPortFree+0x10>
}
   17de6:	46c0      	nop			; (mov r8, r8)
   17de8:	46bd      	mov	sp, r7
   17dea:	b002      	add	sp, #8
   17dec:	bd80      	pop	{r7, pc}
	...

00017df0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   17df0:	b580      	push	{r7, lr}
   17df2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   17df4:	4b03      	ldr	r3, [pc, #12]	; (17e04 <xPortGetFreeHeapSize+0x14>)
   17df6:	681b      	ldr	r3, [r3, #0]
   17df8:	22cb      	movs	r2, #203	; 0xcb
   17dfa:	0192      	lsls	r2, r2, #6
   17dfc:	1ad3      	subs	r3, r2, r3
}
   17dfe:	0018      	movs	r0, r3
   17e00:	46bd      	mov	sp, r7
   17e02:	bd80      	pop	{r7, pc}
   17e04:	20003934 	.word	0x20003934

00017e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   17e08:	b580      	push	{r7, lr}
   17e0a:	b084      	sub	sp, #16
   17e0c:	af00      	add	r7, sp, #0
   17e0e:	6078      	str	r0, [r7, #4]
   17e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   17e12:	687b      	ldr	r3, [r7, #4]
   17e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   17e16:	68fb      	ldr	r3, [r7, #12]
   17e18:	2b00      	cmp	r3, #0
   17e1a:	d101      	bne.n	17e20 <xQueueGenericReset+0x18>
   17e1c:	b672      	cpsid	i
   17e1e:	e7fe      	b.n	17e1e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   17e20:	4b23      	ldr	r3, [pc, #140]	; (17eb0 <xQueueGenericReset+0xa8>)
   17e22:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   17e24:	68fb      	ldr	r3, [r7, #12]
   17e26:	681a      	ldr	r2, [r3, #0]
   17e28:	68fb      	ldr	r3, [r7, #12]
   17e2a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   17e2c:	68fb      	ldr	r3, [r7, #12]
   17e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17e30:	434b      	muls	r3, r1
   17e32:	18d2      	adds	r2, r2, r3
   17e34:	68fb      	ldr	r3, [r7, #12]
   17e36:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   17e38:	68fb      	ldr	r3, [r7, #12]
   17e3a:	2200      	movs	r2, #0
   17e3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   17e3e:	68fb      	ldr	r3, [r7, #12]
   17e40:	681a      	ldr	r2, [r3, #0]
   17e42:	68fb      	ldr	r3, [r7, #12]
   17e44:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   17e46:	68fb      	ldr	r3, [r7, #12]
   17e48:	681a      	ldr	r2, [r3, #0]
   17e4a:	68fb      	ldr	r3, [r7, #12]
   17e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17e4e:	1e59      	subs	r1, r3, #1
   17e50:	68fb      	ldr	r3, [r7, #12]
   17e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17e54:	434b      	muls	r3, r1
   17e56:	18d2      	adds	r2, r2, r3
   17e58:	68fb      	ldr	r3, [r7, #12]
   17e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   17e5c:	68fb      	ldr	r3, [r7, #12]
   17e5e:	2244      	movs	r2, #68	; 0x44
   17e60:	21ff      	movs	r1, #255	; 0xff
   17e62:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   17e64:	68fb      	ldr	r3, [r7, #12]
   17e66:	2245      	movs	r2, #69	; 0x45
   17e68:	21ff      	movs	r1, #255	; 0xff
   17e6a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   17e6c:	683b      	ldr	r3, [r7, #0]
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d10d      	bne.n	17e8e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   17e72:	68fb      	ldr	r3, [r7, #12]
   17e74:	691b      	ldr	r3, [r3, #16]
   17e76:	2b00      	cmp	r3, #0
   17e78:	d013      	beq.n	17ea2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   17e7a:	68fb      	ldr	r3, [r7, #12]
   17e7c:	3310      	adds	r3, #16
   17e7e:	0018      	movs	r0, r3
   17e80:	4b0c      	ldr	r3, [pc, #48]	; (17eb4 <xQueueGenericReset+0xac>)
   17e82:	4798      	blx	r3
   17e84:	1e03      	subs	r3, r0, #0
   17e86:	d00c      	beq.n	17ea2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   17e88:	4b0b      	ldr	r3, [pc, #44]	; (17eb8 <xQueueGenericReset+0xb0>)
   17e8a:	4798      	blx	r3
   17e8c:	e009      	b.n	17ea2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   17e8e:	68fb      	ldr	r3, [r7, #12]
   17e90:	3310      	adds	r3, #16
   17e92:	0018      	movs	r0, r3
   17e94:	4b09      	ldr	r3, [pc, #36]	; (17ebc <xQueueGenericReset+0xb4>)
   17e96:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   17e98:	68fb      	ldr	r3, [r7, #12]
   17e9a:	3324      	adds	r3, #36	; 0x24
   17e9c:	0018      	movs	r0, r3
   17e9e:	4b07      	ldr	r3, [pc, #28]	; (17ebc <xQueueGenericReset+0xb4>)
   17ea0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   17ea2:	4b07      	ldr	r3, [pc, #28]	; (17ec0 <xQueueGenericReset+0xb8>)
   17ea4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   17ea6:	2301      	movs	r3, #1
}
   17ea8:	0018      	movs	r0, r3
   17eaa:	46bd      	mov	sp, r7
   17eac:	b004      	add	sp, #16
   17eae:	bd80      	pop	{r7, pc}
   17eb0:	00017bd9 	.word	0x00017bd9
   17eb4:	0001a469 	.word	0x0001a469
   17eb8:	00017bc1 	.word	0x00017bc1
   17ebc:	00017951 	.word	0x00017951
   17ec0:	00017bfd 	.word	0x00017bfd

00017ec4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   17ec4:	b590      	push	{r4, r7, lr}
   17ec6:	b08b      	sub	sp, #44	; 0x2c
   17ec8:	af02      	add	r7, sp, #8
   17eca:	60f8      	str	r0, [r7, #12]
   17ecc:	60b9      	str	r1, [r7, #8]
   17ece:	1dfb      	adds	r3, r7, #7
   17ed0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   17ed2:	68fb      	ldr	r3, [r7, #12]
   17ed4:	2b00      	cmp	r3, #0
   17ed6:	d101      	bne.n	17edc <xQueueGenericCreate+0x18>
   17ed8:	b672      	cpsid	i
   17eda:	e7fe      	b.n	17eda <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   17edc:	68bb      	ldr	r3, [r7, #8]
   17ede:	2b00      	cmp	r3, #0
   17ee0:	d102      	bne.n	17ee8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   17ee2:	2300      	movs	r3, #0
   17ee4:	61fb      	str	r3, [r7, #28]
   17ee6:	e003      	b.n	17ef0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17ee8:	68fb      	ldr	r3, [r7, #12]
   17eea:	68ba      	ldr	r2, [r7, #8]
   17eec:	4353      	muls	r3, r2
   17eee:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   17ef0:	69fb      	ldr	r3, [r7, #28]
   17ef2:	3354      	adds	r3, #84	; 0x54
   17ef4:	0018      	movs	r0, r3
   17ef6:	4b19      	ldr	r3, [pc, #100]	; (17f5c <xQueueGenericCreate+0x98>)
   17ef8:	4798      	blx	r3
   17efa:	0003      	movs	r3, r0
   17efc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   17efe:	69bb      	ldr	r3, [r7, #24]
   17f00:	2b00      	cmp	r3, #0
   17f02:	d00d      	beq.n	17f20 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   17f04:	69bb      	ldr	r3, [r7, #24]
   17f06:	3354      	adds	r3, #84	; 0x54
   17f08:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   17f0a:	1dfb      	adds	r3, r7, #7
   17f0c:	781c      	ldrb	r4, [r3, #0]
   17f0e:	697a      	ldr	r2, [r7, #20]
   17f10:	68b9      	ldr	r1, [r7, #8]
   17f12:	68f8      	ldr	r0, [r7, #12]
   17f14:	69bb      	ldr	r3, [r7, #24]
   17f16:	9300      	str	r3, [sp, #0]
   17f18:	0023      	movs	r3, r4
   17f1a:	4c11      	ldr	r4, [pc, #68]	; (17f60 <xQueueGenericCreate+0x9c>)
   17f1c:	47a0      	blx	r4
   17f1e:	e017      	b.n	17f50 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   17f20:	4b10      	ldr	r3, [pc, #64]	; (17f64 <xQueueGenericCreate+0xa0>)
   17f22:	4798      	blx	r3
   17f24:	0003      	movs	r3, r0
   17f26:	0018      	movs	r0, r3
   17f28:	4b0f      	ldr	r3, [pc, #60]	; (17f68 <xQueueGenericCreate+0xa4>)
   17f2a:	4798      	blx	r3
   17f2c:	0003      	movs	r3, r0
   17f2e:	001a      	movs	r2, r3
   17f30:	4b0e      	ldr	r3, [pc, #56]	; (17f6c <xQueueGenericCreate+0xa8>)
   17f32:	881b      	ldrh	r3, [r3, #0]
   17f34:	4013      	ands	r3, r2
   17f36:	b29b      	uxth	r3, r3
   17f38:	2b00      	cmp	r3, #0
   17f3a:	d009      	beq.n	17f50 <xQueueGenericCreate+0x8c>
   17f3c:	1dfb      	adds	r3, r7, #7
   17f3e:	781b      	ldrb	r3, [r3, #0]
   17f40:	4a0b      	ldr	r2, [pc, #44]	; (17f70 <xQueueGenericCreate+0xac>)
   17f42:	5cd3      	ldrb	r3, [r2, r3]
   17f44:	3340      	adds	r3, #64	; 0x40
   17f46:	b2db      	uxtb	r3, r3
   17f48:	2100      	movs	r1, #0
   17f4a:	0018      	movs	r0, r3
   17f4c:	4b09      	ldr	r3, [pc, #36]	; (17f74 <xQueueGenericCreate+0xb0>)
   17f4e:	4798      	blx	r3
		}

		return pxNewQueue;
   17f50:	69bb      	ldr	r3, [r7, #24]
	}
   17f52:	0018      	movs	r0, r3
   17f54:	46bd      	mov	sp, r7
   17f56:	b009      	add	sp, #36	; 0x24
   17f58:	bd90      	pop	{r4, r7, pc}
   17f5a:	46c0      	nop			; (mov r8, r8)
   17f5c:	00017d11 	.word	0x00017d11
   17f60:	00017f79 	.word	0x00017f79
   17f64:	00015e75 	.word	0x00015e75
   17f68:	00015bd9 	.word	0x00015bd9
   17f6c:	20000038 	.word	0x20000038
   17f70:	2000002c 	.word	0x2000002c
   17f74:	000168d9 	.word	0x000168d9

00017f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   17f78:	b5b0      	push	{r4, r5, r7, lr}
   17f7a:	b084      	sub	sp, #16
   17f7c:	af00      	add	r7, sp, #0
   17f7e:	60f8      	str	r0, [r7, #12]
   17f80:	60b9      	str	r1, [r7, #8]
   17f82:	607a      	str	r2, [r7, #4]
   17f84:	001a      	movs	r2, r3
   17f86:	1cfb      	adds	r3, r7, #3
   17f88:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   17f8a:	68bb      	ldr	r3, [r7, #8]
   17f8c:	2b00      	cmp	r3, #0
   17f8e:	d103      	bne.n	17f98 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   17f90:	6a3b      	ldr	r3, [r7, #32]
   17f92:	6a3a      	ldr	r2, [r7, #32]
   17f94:	601a      	str	r2, [r3, #0]
   17f96:	e002      	b.n	17f9e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   17f98:	6a3b      	ldr	r3, [r7, #32]
   17f9a:	687a      	ldr	r2, [r7, #4]
   17f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   17f9e:	6a3b      	ldr	r3, [r7, #32]
   17fa0:	68fa      	ldr	r2, [r7, #12]
   17fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   17fa4:	6a3b      	ldr	r3, [r7, #32]
   17fa6:	68ba      	ldr	r2, [r7, #8]
   17fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   17faa:	6a3b      	ldr	r3, [r7, #32]
   17fac:	2101      	movs	r1, #1
   17fae:	0018      	movs	r0, r3
   17fb0:	4b41      	ldr	r3, [pc, #260]	; (180b8 <prvInitialiseNewQueue+0x140>)
   17fb2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   17fb4:	6a3b      	ldr	r3, [r7, #32]
   17fb6:	1cfa      	adds	r2, r7, #3
   17fb8:	2150      	movs	r1, #80	; 0x50
   17fba:	7812      	ldrb	r2, [r2, #0]
   17fbc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   17fbe:	6a3b      	ldr	r3, [r7, #32]
   17fc0:	2200      	movs	r2, #0
   17fc2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   17fc4:	6a3b      	ldr	r3, [r7, #32]
   17fc6:	0018      	movs	r0, r3
   17fc8:	4b3c      	ldr	r3, [pc, #240]	; (180bc <prvInitialiseNewQueue+0x144>)
   17fca:	4798      	blx	r3
   17fcc:	0003      	movs	r3, r0
   17fce:	001a      	movs	r2, r3
   17fd0:	4b3b      	ldr	r3, [pc, #236]	; (180c0 <prvInitialiseNewQueue+0x148>)
   17fd2:	5c9b      	ldrb	r3, [r3, r2]
   17fd4:	0018      	movs	r0, r3
   17fd6:	4b3b      	ldr	r3, [pc, #236]	; (180c4 <prvInitialiseNewQueue+0x14c>)
   17fd8:	4798      	blx	r3
   17fda:	0003      	movs	r3, r0
   17fdc:	b29a      	uxth	r2, r3
   17fde:	6a3b      	ldr	r3, [r7, #32]
   17fe0:	0011      	movs	r1, r2
   17fe2:	0018      	movs	r0, r3
   17fe4:	4b38      	ldr	r3, [pc, #224]	; (180c8 <prvInitialiseNewQueue+0x150>)
   17fe6:	4798      	blx	r3
   17fe8:	4b38      	ldr	r3, [pc, #224]	; (180cc <prvInitialiseNewQueue+0x154>)
   17fea:	881a      	ldrh	r2, [r3, #0]
   17fec:	6a3b      	ldr	r3, [r7, #32]
   17fee:	0011      	movs	r1, r2
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b37      	ldr	r3, [pc, #220]	; (180d0 <prvInitialiseNewQueue+0x158>)
   17ff4:	4798      	blx	r3
   17ff6:	6a3b      	ldr	r3, [r7, #32]
   17ff8:	0018      	movs	r0, r3
   17ffa:	4b30      	ldr	r3, [pc, #192]	; (180bc <prvInitialiseNewQueue+0x144>)
   17ffc:	4798      	blx	r3
   17ffe:	0003      	movs	r3, r0
   18000:	001a      	movs	r2, r3
   18002:	4b2f      	ldr	r3, [pc, #188]	; (180c0 <prvInitialiseNewQueue+0x148>)
   18004:	5c9c      	ldrb	r4, [r3, r2]
   18006:	6a3b      	ldr	r3, [r7, #32]
   18008:	0018      	movs	r0, r3
   1800a:	4b32      	ldr	r3, [pc, #200]	; (180d4 <prvInitialiseNewQueue+0x15c>)
   1800c:	4798      	blx	r3
   1800e:	0003      	movs	r3, r0
   18010:	b2db      	uxtb	r3, r3
   18012:	0019      	movs	r1, r3
   18014:	0020      	movs	r0, r4
   18016:	4b30      	ldr	r3, [pc, #192]	; (180d8 <prvInitialiseNewQueue+0x160>)
   18018:	4798      	blx	r3
   1801a:	4b30      	ldr	r3, [pc, #192]	; (180dc <prvInitialiseNewQueue+0x164>)
   1801c:	4798      	blx	r3
   1801e:	0003      	movs	r3, r0
   18020:	0018      	movs	r0, r3
   18022:	4b2f      	ldr	r3, [pc, #188]	; (180e0 <prvInitialiseNewQueue+0x168>)
   18024:	4798      	blx	r3
   18026:	0003      	movs	r3, r0
   18028:	001a      	movs	r2, r3
   1802a:	4b2e      	ldr	r3, [pc, #184]	; (180e4 <prvInitialiseNewQueue+0x16c>)
   1802c:	881b      	ldrh	r3, [r3, #0]
   1802e:	4013      	ands	r3, r2
   18030:	b29b      	uxth	r3, r3
   18032:	2b00      	cmp	r3, #0
   18034:	d029      	beq.n	1808a <prvInitialiseNewQueue+0x112>
   18036:	6a3b      	ldr	r3, [r7, #32]
   18038:	0018      	movs	r0, r3
   1803a:	4b2b      	ldr	r3, [pc, #172]	; (180e8 <prvInitialiseNewQueue+0x170>)
   1803c:	4798      	blx	r3
   1803e:	0003      	movs	r3, r0
   18040:	001a      	movs	r2, r3
   18042:	4b28      	ldr	r3, [pc, #160]	; (180e4 <prvInitialiseNewQueue+0x16c>)
   18044:	881b      	ldrh	r3, [r3, #0]
   18046:	4013      	ands	r3, r2
   18048:	b29b      	uxth	r3, r3
   1804a:	2b00      	cmp	r3, #0
   1804c:	d01d      	beq.n	1808a <prvInitialiseNewQueue+0x112>
   1804e:	6a3b      	ldr	r3, [r7, #32]
   18050:	0018      	movs	r0, r3
   18052:	4b1a      	ldr	r3, [pc, #104]	; (180bc <prvInitialiseNewQueue+0x144>)
   18054:	4798      	blx	r3
   18056:	0003      	movs	r3, r0
   18058:	001a      	movs	r2, r3
   1805a:	4b19      	ldr	r3, [pc, #100]	; (180c0 <prvInitialiseNewQueue+0x148>)
   1805c:	5c9b      	ldrb	r3, [r3, r2]
   1805e:	3318      	adds	r3, #24
   18060:	b2db      	uxtb	r3, r3
   18062:	001d      	movs	r5, r3
   18064:	6a3b      	ldr	r3, [r7, #32]
   18066:	0018      	movs	r0, r3
   18068:	4b14      	ldr	r3, [pc, #80]	; (180bc <prvInitialiseNewQueue+0x144>)
   1806a:	4798      	blx	r3
   1806c:	0003      	movs	r3, r0
   1806e:	001a      	movs	r2, r3
   18070:	4b13      	ldr	r3, [pc, #76]	; (180c0 <prvInitialiseNewQueue+0x148>)
   18072:	5c9c      	ldrb	r4, [r3, r2]
   18074:	6a3b      	ldr	r3, [r7, #32]
   18076:	0018      	movs	r0, r3
   18078:	4b16      	ldr	r3, [pc, #88]	; (180d4 <prvInitialiseNewQueue+0x15c>)
   1807a:	4798      	blx	r3
   1807c:	0003      	movs	r3, r0
   1807e:	b2db      	uxtb	r3, r3
   18080:	001a      	movs	r2, r3
   18082:	0021      	movs	r1, r4
   18084:	0028      	movs	r0, r5
   18086:	4b19      	ldr	r3, [pc, #100]	; (180ec <prvInitialiseNewQueue+0x174>)
   18088:	4798      	blx	r3
   1808a:	6a3b      	ldr	r3, [r7, #32]
   1808c:	0018      	movs	r0, r3
   1808e:	4b0b      	ldr	r3, [pc, #44]	; (180bc <prvInitialiseNewQueue+0x144>)
   18090:	4798      	blx	r3
   18092:	0003      	movs	r3, r0
   18094:	001a      	movs	r2, r3
   18096:	4b0a      	ldr	r3, [pc, #40]	; (180c0 <prvInitialiseNewQueue+0x148>)
   18098:	5c9c      	ldrb	r4, [r3, r2]
   1809a:	6a3b      	ldr	r3, [r7, #32]
   1809c:	0018      	movs	r0, r3
   1809e:	4b0d      	ldr	r3, [pc, #52]	; (180d4 <prvInitialiseNewQueue+0x15c>)
   180a0:	4798      	blx	r3
   180a2:	0003      	movs	r3, r0
   180a4:	b2db      	uxtb	r3, r3
   180a6:	2200      	movs	r2, #0
   180a8:	0019      	movs	r1, r3
   180aa:	0020      	movs	r0, r4
   180ac:	4b10      	ldr	r3, [pc, #64]	; (180f0 <prvInitialiseNewQueue+0x178>)
   180ae:	4798      	blx	r3
}
   180b0:	46c0      	nop			; (mov r8, r8)
   180b2:	46bd      	mov	sp, r7
   180b4:	b004      	add	sp, #16
   180b6:	bdb0      	pop	{r4, r5, r7, pc}
   180b8:	00017e09 	.word	0x00017e09
   180bc:	00015b99 	.word	0x00015b99
   180c0:	2000002c 	.word	0x2000002c
   180c4:	00017159 	.word	0x00017159
   180c8:	00015cbd 	.word	0x00015cbd
   180cc:	2000003a 	.word	0x2000003a
   180d0:	00015cf9 	.word	0x00015cf9
   180d4:	00015c79 	.word	0x00015c79
   180d8:	000172f1 	.word	0x000172f1
   180dc:	00015e75 	.word	0x00015e75
   180e0:	00015bd9 	.word	0x00015bd9
   180e4:	20000038 	.word	0x20000038
   180e8:	00015c99 	.word	0x00015c99
   180ec:	000165d1 	.word	0x000165d1
   180f0:	00016c2d 	.word	0x00016c2d

000180f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   180f4:	b590      	push	{r4, r7, lr}
   180f6:	b083      	sub	sp, #12
   180f8:	af00      	add	r7, sp, #0
   180fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   180fc:	687b      	ldr	r3, [r7, #4]
   180fe:	2b00      	cmp	r3, #0
   18100:	d00e      	beq.n	18120 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   18102:	687b      	ldr	r3, [r7, #4]
   18104:	2200      	movs	r2, #0
   18106:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   18108:	687b      	ldr	r3, [r7, #4]
   1810a:	2200      	movs	r2, #0
   1810c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1810e:	687b      	ldr	r3, [r7, #4]
   18110:	2200      	movs	r2, #0
   18112:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   18114:	6878      	ldr	r0, [r7, #4]
   18116:	2300      	movs	r3, #0
   18118:	2200      	movs	r2, #0
   1811a:	2100      	movs	r1, #0
   1811c:	4c02      	ldr	r4, [pc, #8]	; (18128 <prvInitialiseMutex+0x34>)
   1811e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   18120:	46c0      	nop			; (mov r8, r8)
   18122:	46bd      	mov	sp, r7
   18124:	b003      	add	sp, #12
   18126:	bd90      	pop	{r4, r7, pc}
   18128:	0001816d 	.word	0x0001816d

0001812c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1812c:	b580      	push	{r7, lr}
   1812e:	b086      	sub	sp, #24
   18130:	af00      	add	r7, sp, #0
   18132:	0002      	movs	r2, r0
   18134:	1dfb      	adds	r3, r7, #7
   18136:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   18138:	2301      	movs	r3, #1
   1813a:	617b      	str	r3, [r7, #20]
   1813c:	2300      	movs	r3, #0
   1813e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   18140:	1dfb      	adds	r3, r7, #7
   18142:	781a      	ldrb	r2, [r3, #0]
   18144:	6939      	ldr	r1, [r7, #16]
   18146:	697b      	ldr	r3, [r7, #20]
   18148:	0018      	movs	r0, r3
   1814a:	4b06      	ldr	r3, [pc, #24]	; (18164 <xQueueCreateMutex+0x38>)
   1814c:	4798      	blx	r3
   1814e:	0003      	movs	r3, r0
   18150:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   18152:	68fb      	ldr	r3, [r7, #12]
   18154:	0018      	movs	r0, r3
   18156:	4b04      	ldr	r3, [pc, #16]	; (18168 <xQueueCreateMutex+0x3c>)
   18158:	4798      	blx	r3

		return pxNewQueue;
   1815a:	68fb      	ldr	r3, [r7, #12]
	}
   1815c:	0018      	movs	r0, r3
   1815e:	46bd      	mov	sp, r7
   18160:	b006      	add	sp, #24
   18162:	bd80      	pop	{r7, pc}
   18164:	00017ec5 	.word	0x00017ec5
   18168:	000180f5 	.word	0x000180f5

0001816c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1816c:	b5b0      	push	{r4, r5, r7, lr}
   1816e:	b08a      	sub	sp, #40	; 0x28
   18170:	af00      	add	r7, sp, #0
   18172:	60f8      	str	r0, [r7, #12]
   18174:	60b9      	str	r1, [r7, #8]
   18176:	607a      	str	r2, [r7, #4]
   18178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1817a:	2300      	movs	r3, #0
   1817c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1817e:	68fb      	ldr	r3, [r7, #12]
   18180:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   18182:	6a3b      	ldr	r3, [r7, #32]
   18184:	2b00      	cmp	r3, #0
   18186:	d101      	bne.n	1818c <xQueueGenericSend+0x20>
   18188:	b672      	cpsid	i
   1818a:	e7fe      	b.n	1818a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1818c:	68bb      	ldr	r3, [r7, #8]
   1818e:	2b00      	cmp	r3, #0
   18190:	d103      	bne.n	1819a <xQueueGenericSend+0x2e>
   18192:	6a3b      	ldr	r3, [r7, #32]
   18194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18196:	2b00      	cmp	r3, #0
   18198:	d101      	bne.n	1819e <xQueueGenericSend+0x32>
   1819a:	2301      	movs	r3, #1
   1819c:	e000      	b.n	181a0 <xQueueGenericSend+0x34>
   1819e:	2300      	movs	r3, #0
   181a0:	2b00      	cmp	r3, #0
   181a2:	d101      	bne.n	181a8 <xQueueGenericSend+0x3c>
   181a4:	b672      	cpsid	i
   181a6:	e7fe      	b.n	181a6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   181a8:	683b      	ldr	r3, [r7, #0]
   181aa:	2b02      	cmp	r3, #2
   181ac:	d103      	bne.n	181b6 <xQueueGenericSend+0x4a>
   181ae:	6a3b      	ldr	r3, [r7, #32]
   181b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   181b2:	2b01      	cmp	r3, #1
   181b4:	d101      	bne.n	181ba <xQueueGenericSend+0x4e>
   181b6:	2301      	movs	r3, #1
   181b8:	e000      	b.n	181bc <xQueueGenericSend+0x50>
   181ba:	2300      	movs	r3, #0
   181bc:	2b00      	cmp	r3, #0
   181be:	d101      	bne.n	181c4 <xQueueGenericSend+0x58>
   181c0:	b672      	cpsid	i
   181c2:	e7fe      	b.n	181c2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   181c4:	4bbc      	ldr	r3, [pc, #752]	; (184b8 <xQueueGenericSend+0x34c>)
   181c6:	4798      	blx	r3
   181c8:	1e03      	subs	r3, r0, #0
   181ca:	d102      	bne.n	181d2 <xQueueGenericSend+0x66>
   181cc:	687b      	ldr	r3, [r7, #4]
   181ce:	2b00      	cmp	r3, #0
   181d0:	d101      	bne.n	181d6 <xQueueGenericSend+0x6a>
   181d2:	2301      	movs	r3, #1
   181d4:	e000      	b.n	181d8 <xQueueGenericSend+0x6c>
   181d6:	2300      	movs	r3, #0
   181d8:	2b00      	cmp	r3, #0
   181da:	d101      	bne.n	181e0 <xQueueGenericSend+0x74>
   181dc:	b672      	cpsid	i
   181de:	e7fe      	b.n	181de <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   181e0:	4bb6      	ldr	r3, [pc, #728]	; (184bc <xQueueGenericSend+0x350>)
   181e2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   181e4:	6a3b      	ldr	r3, [r7, #32]
   181e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   181e8:	6a3b      	ldr	r3, [r7, #32]
   181ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   181ec:	429a      	cmp	r2, r3
   181ee:	d303      	bcc.n	181f8 <xQueueGenericSend+0x8c>
   181f0:	683b      	ldr	r3, [r7, #0]
   181f2:	2b02      	cmp	r3, #2
   181f4:	d000      	beq.n	181f8 <xQueueGenericSend+0x8c>
   181f6:	e08e      	b.n	18316 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   181f8:	4bb1      	ldr	r3, [pc, #708]	; (184c0 <xQueueGenericSend+0x354>)
   181fa:	4798      	blx	r3
   181fc:	0003      	movs	r3, r0
   181fe:	0018      	movs	r0, r3
   18200:	4bb0      	ldr	r3, [pc, #704]	; (184c4 <xQueueGenericSend+0x358>)
   18202:	4798      	blx	r3
   18204:	0003      	movs	r3, r0
   18206:	001a      	movs	r2, r3
   18208:	4baf      	ldr	r3, [pc, #700]	; (184c8 <xQueueGenericSend+0x35c>)
   1820a:	881b      	ldrh	r3, [r3, #0]
   1820c:	4013      	ands	r3, r2
   1820e:	b29b      	uxth	r3, r3
   18210:	2b00      	cmp	r3, #0
   18212:	d02e      	beq.n	18272 <xQueueGenericSend+0x106>
   18214:	6a3b      	ldr	r3, [r7, #32]
   18216:	0018      	movs	r0, r3
   18218:	4bac      	ldr	r3, [pc, #688]	; (184cc <xQueueGenericSend+0x360>)
   1821a:	4798      	blx	r3
   1821c:	0003      	movs	r3, r0
   1821e:	001a      	movs	r2, r3
   18220:	4ba9      	ldr	r3, [pc, #676]	; (184c8 <xQueueGenericSend+0x35c>)
   18222:	881b      	ldrh	r3, [r3, #0]
   18224:	4013      	ands	r3, r2
   18226:	b29b      	uxth	r3, r3
   18228:	2b00      	cmp	r3, #0
   1822a:	d022      	beq.n	18272 <xQueueGenericSend+0x106>
   1822c:	683b      	ldr	r3, [r7, #0]
   1822e:	2b00      	cmp	r3, #0
   18230:	d10b      	bne.n	1824a <xQueueGenericSend+0xde>
   18232:	6a3b      	ldr	r3, [r7, #32]
   18234:	0018      	movs	r0, r3
   18236:	4ba6      	ldr	r3, [pc, #664]	; (184d0 <xQueueGenericSend+0x364>)
   18238:	4798      	blx	r3
   1823a:	0003      	movs	r3, r0
   1823c:	001a      	movs	r2, r3
   1823e:	4ba5      	ldr	r3, [pc, #660]	; (184d4 <xQueueGenericSend+0x368>)
   18240:	5c9b      	ldrb	r3, [r3, r2]
   18242:	3320      	adds	r3, #32
   18244:	b2db      	uxtb	r3, r3
   18246:	001d      	movs	r5, r3
   18248:	e000      	b.n	1824c <xQueueGenericSend+0xe0>
   1824a:	2525      	movs	r5, #37	; 0x25
   1824c:	6a3b      	ldr	r3, [r7, #32]
   1824e:	0018      	movs	r0, r3
   18250:	4b9f      	ldr	r3, [pc, #636]	; (184d0 <xQueueGenericSend+0x364>)
   18252:	4798      	blx	r3
   18254:	0003      	movs	r3, r0
   18256:	001a      	movs	r2, r3
   18258:	4b9e      	ldr	r3, [pc, #632]	; (184d4 <xQueueGenericSend+0x368>)
   1825a:	5c9c      	ldrb	r4, [r3, r2]
   1825c:	6a3b      	ldr	r3, [r7, #32]
   1825e:	0018      	movs	r0, r3
   18260:	4b9d      	ldr	r3, [pc, #628]	; (184d8 <xQueueGenericSend+0x36c>)
   18262:	4798      	blx	r3
   18264:	0003      	movs	r3, r0
   18266:	b2db      	uxtb	r3, r3
   18268:	001a      	movs	r2, r3
   1826a:	0021      	movs	r1, r4
   1826c:	0028      	movs	r0, r5
   1826e:	4b9b      	ldr	r3, [pc, #620]	; (184dc <xQueueGenericSend+0x370>)
   18270:	4798      	blx	r3
   18272:	6a3b      	ldr	r3, [r7, #32]
   18274:	0018      	movs	r0, r3
   18276:	4b96      	ldr	r3, [pc, #600]	; (184d0 <xQueueGenericSend+0x364>)
   18278:	4798      	blx	r3
   1827a:	0003      	movs	r3, r0
   1827c:	001a      	movs	r2, r3
   1827e:	4b95      	ldr	r3, [pc, #596]	; (184d4 <xQueueGenericSend+0x368>)
   18280:	5c9c      	ldrb	r4, [r3, r2]
   18282:	6a3b      	ldr	r3, [r7, #32]
   18284:	0018      	movs	r0, r3
   18286:	4b94      	ldr	r3, [pc, #592]	; (184d8 <xQueueGenericSend+0x36c>)
   18288:	4798      	blx	r3
   1828a:	0003      	movs	r3, r0
   1828c:	b2dd      	uxtb	r5, r3
   1828e:	6a3b      	ldr	r3, [r7, #32]
   18290:	0018      	movs	r0, r3
   18292:	4b8f      	ldr	r3, [pc, #572]	; (184d0 <xQueueGenericSend+0x364>)
   18294:	4798      	blx	r3
   18296:	0003      	movs	r3, r0
   18298:	001a      	movs	r2, r3
   1829a:	4b8e      	ldr	r3, [pc, #568]	; (184d4 <xQueueGenericSend+0x368>)
   1829c:	5c9b      	ldrb	r3, [r3, r2]
   1829e:	2b02      	cmp	r3, #2
   182a0:	d005      	beq.n	182ae <xQueueGenericSend+0x142>
   182a2:	6a3b      	ldr	r3, [r7, #32]
   182a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   182a6:	b2db      	uxtb	r3, r3
   182a8:	3301      	adds	r3, #1
   182aa:	b2db      	uxtb	r3, r3
   182ac:	e000      	b.n	182b0 <xQueueGenericSend+0x144>
   182ae:	2300      	movs	r3, #0
   182b0:	001a      	movs	r2, r3
   182b2:	0029      	movs	r1, r5
   182b4:	0020      	movs	r0, r4
   182b6:	4b8a      	ldr	r3, [pc, #552]	; (184e0 <xQueueGenericSend+0x374>)
   182b8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   182ba:	683a      	ldr	r2, [r7, #0]
   182bc:	68b9      	ldr	r1, [r7, #8]
   182be:	6a3b      	ldr	r3, [r7, #32]
   182c0:	0018      	movs	r0, r3
   182c2:	4b88      	ldr	r3, [pc, #544]	; (184e4 <xQueueGenericSend+0x378>)
   182c4:	4798      	blx	r3
   182c6:	0003      	movs	r3, r0
   182c8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   182ca:	6a3b      	ldr	r3, [r7, #32]
   182cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   182ce:	2b00      	cmp	r3, #0
   182d0:	d00a      	beq.n	182e8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   182d2:	683a      	ldr	r2, [r7, #0]
   182d4:	6a3b      	ldr	r3, [r7, #32]
   182d6:	0011      	movs	r1, r2
   182d8:	0018      	movs	r0, r3
   182da:	4b83      	ldr	r3, [pc, #524]	; (184e8 <xQueueGenericSend+0x37c>)
   182dc:	4798      	blx	r3
   182de:	1e03      	subs	r3, r0, #0
   182e0:	d015      	beq.n	1830e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   182e2:	4b82      	ldr	r3, [pc, #520]	; (184ec <xQueueGenericSend+0x380>)
   182e4:	4798      	blx	r3
   182e6:	e012      	b.n	1830e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   182e8:	6a3b      	ldr	r3, [r7, #32]
   182ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   182ec:	2b00      	cmp	r3, #0
   182ee:	d009      	beq.n	18304 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   182f0:	6a3b      	ldr	r3, [r7, #32]
   182f2:	3324      	adds	r3, #36	; 0x24
   182f4:	0018      	movs	r0, r3
   182f6:	4b7e      	ldr	r3, [pc, #504]	; (184f0 <xQueueGenericSend+0x384>)
   182f8:	4798      	blx	r3
   182fa:	1e03      	subs	r3, r0, #0
   182fc:	d007      	beq.n	1830e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   182fe:	4b7b      	ldr	r3, [pc, #492]	; (184ec <xQueueGenericSend+0x380>)
   18300:	4798      	blx	r3
   18302:	e004      	b.n	1830e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   18304:	69fb      	ldr	r3, [r7, #28]
   18306:	2b00      	cmp	r3, #0
   18308:	d001      	beq.n	1830e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1830a:	4b78      	ldr	r3, [pc, #480]	; (184ec <xQueueGenericSend+0x380>)
   1830c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1830e:	4b79      	ldr	r3, [pc, #484]	; (184f4 <xQueueGenericSend+0x388>)
   18310:	4798      	blx	r3
				return pdPASS;
   18312:	2301      	movs	r3, #1
   18314:	e142      	b.n	1859c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   18316:	687b      	ldr	r3, [r7, #4]
   18318:	2b00      	cmp	r3, #0
   1831a:	d140      	bne.n	1839e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1831c:	4b75      	ldr	r3, [pc, #468]	; (184f4 <xQueueGenericSend+0x388>)
   1831e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   18320:	4b67      	ldr	r3, [pc, #412]	; (184c0 <xQueueGenericSend+0x354>)
   18322:	4798      	blx	r3
   18324:	0003      	movs	r3, r0
   18326:	0018      	movs	r0, r3
   18328:	4b66      	ldr	r3, [pc, #408]	; (184c4 <xQueueGenericSend+0x358>)
   1832a:	4798      	blx	r3
   1832c:	0003      	movs	r3, r0
   1832e:	001a      	movs	r2, r3
   18330:	4b65      	ldr	r3, [pc, #404]	; (184c8 <xQueueGenericSend+0x35c>)
   18332:	881b      	ldrh	r3, [r3, #0]
   18334:	4013      	ands	r3, r2
   18336:	b29b      	uxth	r3, r3
   18338:	2b00      	cmp	r3, #0
   1833a:	d02e      	beq.n	1839a <xQueueGenericSend+0x22e>
   1833c:	6a3b      	ldr	r3, [r7, #32]
   1833e:	0018      	movs	r0, r3
   18340:	4b62      	ldr	r3, [pc, #392]	; (184cc <xQueueGenericSend+0x360>)
   18342:	4798      	blx	r3
   18344:	0003      	movs	r3, r0
   18346:	001a      	movs	r2, r3
   18348:	4b5f      	ldr	r3, [pc, #380]	; (184c8 <xQueueGenericSend+0x35c>)
   1834a:	881b      	ldrh	r3, [r3, #0]
   1834c:	4013      	ands	r3, r2
   1834e:	b29b      	uxth	r3, r3
   18350:	2b00      	cmp	r3, #0
   18352:	d022      	beq.n	1839a <xQueueGenericSend+0x22e>
   18354:	683b      	ldr	r3, [r7, #0]
   18356:	2b00      	cmp	r3, #0
   18358:	d10b      	bne.n	18372 <xQueueGenericSend+0x206>
   1835a:	6a3b      	ldr	r3, [r7, #32]
   1835c:	0018      	movs	r0, r3
   1835e:	4b5c      	ldr	r3, [pc, #368]	; (184d0 <xQueueGenericSend+0x364>)
   18360:	4798      	blx	r3
   18362:	0003      	movs	r3, r0
   18364:	001a      	movs	r2, r3
   18366:	4b5b      	ldr	r3, [pc, #364]	; (184d4 <xQueueGenericSend+0x368>)
   18368:	5c9b      	ldrb	r3, [r3, r2]
   1836a:	3348      	adds	r3, #72	; 0x48
   1836c:	b2db      	uxtb	r3, r3
   1836e:	001d      	movs	r5, r3
   18370:	e000      	b.n	18374 <xQueueGenericSend+0x208>
   18372:	254d      	movs	r5, #77	; 0x4d
   18374:	6a3b      	ldr	r3, [r7, #32]
   18376:	0018      	movs	r0, r3
   18378:	4b55      	ldr	r3, [pc, #340]	; (184d0 <xQueueGenericSend+0x364>)
   1837a:	4798      	blx	r3
   1837c:	0003      	movs	r3, r0
   1837e:	001a      	movs	r2, r3
   18380:	4b54      	ldr	r3, [pc, #336]	; (184d4 <xQueueGenericSend+0x368>)
   18382:	5c9c      	ldrb	r4, [r3, r2]
   18384:	6a3b      	ldr	r3, [r7, #32]
   18386:	0018      	movs	r0, r3
   18388:	4b53      	ldr	r3, [pc, #332]	; (184d8 <xQueueGenericSend+0x36c>)
   1838a:	4798      	blx	r3
   1838c:	0003      	movs	r3, r0
   1838e:	b2db      	uxtb	r3, r3
   18390:	001a      	movs	r2, r3
   18392:	0021      	movs	r1, r4
   18394:	0028      	movs	r0, r5
   18396:	4b51      	ldr	r3, [pc, #324]	; (184dc <xQueueGenericSend+0x370>)
   18398:	4798      	blx	r3
					return errQUEUE_FULL;
   1839a:	2300      	movs	r3, #0
   1839c:	e0fe      	b.n	1859c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183a0:	2b00      	cmp	r3, #0
   183a2:	d106      	bne.n	183b2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   183a4:	2314      	movs	r3, #20
   183a6:	18fb      	adds	r3, r7, r3
   183a8:	0018      	movs	r0, r3
   183aa:	4b53      	ldr	r3, [pc, #332]	; (184f8 <xQueueGenericSend+0x38c>)
   183ac:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   183ae:	2301      	movs	r3, #1
   183b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   183b2:	4b50      	ldr	r3, [pc, #320]	; (184f4 <xQueueGenericSend+0x388>)
   183b4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   183b6:	4b51      	ldr	r3, [pc, #324]	; (184fc <xQueueGenericSend+0x390>)
   183b8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   183ba:	4b40      	ldr	r3, [pc, #256]	; (184bc <xQueueGenericSend+0x350>)
   183bc:	4798      	blx	r3
   183be:	6a3b      	ldr	r3, [r7, #32]
   183c0:	2244      	movs	r2, #68	; 0x44
   183c2:	5c9b      	ldrb	r3, [r3, r2]
   183c4:	b25b      	sxtb	r3, r3
   183c6:	3301      	adds	r3, #1
   183c8:	d103      	bne.n	183d2 <xQueueGenericSend+0x266>
   183ca:	6a3b      	ldr	r3, [r7, #32]
   183cc:	2244      	movs	r2, #68	; 0x44
   183ce:	2100      	movs	r1, #0
   183d0:	5499      	strb	r1, [r3, r2]
   183d2:	6a3b      	ldr	r3, [r7, #32]
   183d4:	2245      	movs	r2, #69	; 0x45
   183d6:	5c9b      	ldrb	r3, [r3, r2]
   183d8:	b25b      	sxtb	r3, r3
   183da:	3301      	adds	r3, #1
   183dc:	d103      	bne.n	183e6 <xQueueGenericSend+0x27a>
   183de:	6a3b      	ldr	r3, [r7, #32]
   183e0:	2245      	movs	r2, #69	; 0x45
   183e2:	2100      	movs	r1, #0
   183e4:	5499      	strb	r1, [r3, r2]
   183e6:	4b43      	ldr	r3, [pc, #268]	; (184f4 <xQueueGenericSend+0x388>)
   183e8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   183ea:	1d3a      	adds	r2, r7, #4
   183ec:	2314      	movs	r3, #20
   183ee:	18fb      	adds	r3, r7, r3
   183f0:	0011      	movs	r1, r2
   183f2:	0018      	movs	r0, r3
   183f4:	4b42      	ldr	r3, [pc, #264]	; (18500 <xQueueGenericSend+0x394>)
   183f6:	4798      	blx	r3
   183f8:	1e03      	subs	r3, r0, #0
   183fa:	d000      	beq.n	183fe <xQueueGenericSend+0x292>
   183fc:	e08a      	b.n	18514 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   183fe:	6a3b      	ldr	r3, [r7, #32]
   18400:	0018      	movs	r0, r3
   18402:	4b40      	ldr	r3, [pc, #256]	; (18504 <xQueueGenericSend+0x398>)
   18404:	4798      	blx	r3
   18406:	1e03      	subs	r3, r0, #0
   18408:	d04f      	beq.n	184aa <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1840a:	4b2d      	ldr	r3, [pc, #180]	; (184c0 <xQueueGenericSend+0x354>)
   1840c:	4798      	blx	r3
   1840e:	0003      	movs	r3, r0
   18410:	0018      	movs	r0, r3
   18412:	4b2c      	ldr	r3, [pc, #176]	; (184c4 <xQueueGenericSend+0x358>)
   18414:	4798      	blx	r3
   18416:	0003      	movs	r3, r0
   18418:	001a      	movs	r2, r3
   1841a:	4b2b      	ldr	r3, [pc, #172]	; (184c8 <xQueueGenericSend+0x35c>)
   1841c:	881b      	ldrh	r3, [r3, #0]
   1841e:	4013      	ands	r3, r2
   18420:	b29b      	uxth	r3, r3
   18422:	2b00      	cmp	r3, #0
   18424:	d02e      	beq.n	18484 <xQueueGenericSend+0x318>
   18426:	6a3b      	ldr	r3, [r7, #32]
   18428:	0018      	movs	r0, r3
   1842a:	4b28      	ldr	r3, [pc, #160]	; (184cc <xQueueGenericSend+0x360>)
   1842c:	4798      	blx	r3
   1842e:	0003      	movs	r3, r0
   18430:	001a      	movs	r2, r3
   18432:	4b25      	ldr	r3, [pc, #148]	; (184c8 <xQueueGenericSend+0x35c>)
   18434:	881b      	ldrh	r3, [r3, #0]
   18436:	4013      	ands	r3, r2
   18438:	b29b      	uxth	r3, r3
   1843a:	2b00      	cmp	r3, #0
   1843c:	d022      	beq.n	18484 <xQueueGenericSend+0x318>
   1843e:	683b      	ldr	r3, [r7, #0]
   18440:	2b00      	cmp	r3, #0
   18442:	d10b      	bne.n	1845c <xQueueGenericSend+0x2f0>
   18444:	6a3b      	ldr	r3, [r7, #32]
   18446:	0018      	movs	r0, r3
   18448:	4b21      	ldr	r3, [pc, #132]	; (184d0 <xQueueGenericSend+0x364>)
   1844a:	4798      	blx	r3
   1844c:	0003      	movs	r3, r0
   1844e:	001a      	movs	r2, r3
   18450:	4b20      	ldr	r3, [pc, #128]	; (184d4 <xQueueGenericSend+0x368>)
   18452:	5c9b      	ldrb	r3, [r3, r2]
   18454:	3370      	adds	r3, #112	; 0x70
   18456:	b2db      	uxtb	r3, r3
   18458:	001d      	movs	r5, r3
   1845a:	e000      	b.n	1845e <xQueueGenericSend+0x2f2>
   1845c:	2575      	movs	r5, #117	; 0x75
   1845e:	6a3b      	ldr	r3, [r7, #32]
   18460:	0018      	movs	r0, r3
   18462:	4b1b      	ldr	r3, [pc, #108]	; (184d0 <xQueueGenericSend+0x364>)
   18464:	4798      	blx	r3
   18466:	0003      	movs	r3, r0
   18468:	001a      	movs	r2, r3
   1846a:	4b1a      	ldr	r3, [pc, #104]	; (184d4 <xQueueGenericSend+0x368>)
   1846c:	5c9c      	ldrb	r4, [r3, r2]
   1846e:	6a3b      	ldr	r3, [r7, #32]
   18470:	0018      	movs	r0, r3
   18472:	4b19      	ldr	r3, [pc, #100]	; (184d8 <xQueueGenericSend+0x36c>)
   18474:	4798      	blx	r3
   18476:	0003      	movs	r3, r0
   18478:	b2db      	uxtb	r3, r3
   1847a:	001a      	movs	r2, r3
   1847c:	0021      	movs	r1, r4
   1847e:	0028      	movs	r0, r5
   18480:	4b16      	ldr	r3, [pc, #88]	; (184dc <xQueueGenericSend+0x370>)
   18482:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   18484:	6a3b      	ldr	r3, [r7, #32]
   18486:	3310      	adds	r3, #16
   18488:	687a      	ldr	r2, [r7, #4]
   1848a:	0011      	movs	r1, r2
   1848c:	0018      	movs	r0, r3
   1848e:	4b1e      	ldr	r3, [pc, #120]	; (18508 <xQueueGenericSend+0x39c>)
   18490:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   18492:	6a3b      	ldr	r3, [r7, #32]
   18494:	0018      	movs	r0, r3
   18496:	4b1d      	ldr	r3, [pc, #116]	; (1850c <xQueueGenericSend+0x3a0>)
   18498:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1849a:	4b1d      	ldr	r3, [pc, #116]	; (18510 <xQueueGenericSend+0x3a4>)
   1849c:	4798      	blx	r3
   1849e:	1e03      	subs	r3, r0, #0
   184a0:	d000      	beq.n	184a4 <xQueueGenericSend+0x338>
   184a2:	e69d      	b.n	181e0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   184a4:	4b11      	ldr	r3, [pc, #68]	; (184ec <xQueueGenericSend+0x380>)
   184a6:	4798      	blx	r3
   184a8:	e69a      	b.n	181e0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   184aa:	6a3b      	ldr	r3, [r7, #32]
   184ac:	0018      	movs	r0, r3
   184ae:	4b17      	ldr	r3, [pc, #92]	; (1850c <xQueueGenericSend+0x3a0>)
   184b0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   184b2:	4b17      	ldr	r3, [pc, #92]	; (18510 <xQueueGenericSend+0x3a4>)
   184b4:	4798      	blx	r3
   184b6:	e693      	b.n	181e0 <xQueueGenericSend+0x74>
   184b8:	0001a8b5 	.word	0x0001a8b5
   184bc:	00017bd9 	.word	0x00017bd9
   184c0:	00015e75 	.word	0x00015e75
   184c4:	00015bd9 	.word	0x00015bd9
   184c8:	20000038 	.word	0x20000038
   184cc:	00015c99 	.word	0x00015c99
   184d0:	00015b99 	.word	0x00015b99
   184d4:	2000002c 	.word	0x2000002c
   184d8:	00015c79 	.word	0x00015c79
   184dc:	000165d1 	.word	0x000165d1
   184e0:	00016c2d 	.word	0x00016c2d
   184e4:	000193a5 	.word	0x000193a5
   184e8:	000196a9 	.word	0x000196a9
   184ec:	00017bc1 	.word	0x00017bc1
   184f0:	0001a469 	.word	0x0001a469
   184f4:	00017bfd 	.word	0x00017bfd
   184f8:	0001a565 	.word	0x0001a565
   184fc:	00019e91 	.word	0x00019e91
   18500:	0001a58d 	.word	0x0001a58d
   18504:	000195f9 	.word	0x000195f9
   18508:	0001a345 	.word	0x0001a345
   1850c:	000194d5 	.word	0x000194d5
   18510:	00019ea9 	.word	0x00019ea9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   18514:	6a3b      	ldr	r3, [r7, #32]
   18516:	0018      	movs	r0, r3
   18518:	4b22      	ldr	r3, [pc, #136]	; (185a4 <xQueueGenericSend+0x438>)
   1851a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1851c:	4b22      	ldr	r3, [pc, #136]	; (185a8 <xQueueGenericSend+0x43c>)
   1851e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   18520:	4b22      	ldr	r3, [pc, #136]	; (185ac <xQueueGenericSend+0x440>)
   18522:	4798      	blx	r3
   18524:	0003      	movs	r3, r0
   18526:	0018      	movs	r0, r3
   18528:	4b21      	ldr	r3, [pc, #132]	; (185b0 <xQueueGenericSend+0x444>)
   1852a:	4798      	blx	r3
   1852c:	0003      	movs	r3, r0
   1852e:	001a      	movs	r2, r3
   18530:	4b20      	ldr	r3, [pc, #128]	; (185b4 <xQueueGenericSend+0x448>)
   18532:	881b      	ldrh	r3, [r3, #0]
   18534:	4013      	ands	r3, r2
   18536:	b29b      	uxth	r3, r3
   18538:	2b00      	cmp	r3, #0
   1853a:	d02e      	beq.n	1859a <xQueueGenericSend+0x42e>
   1853c:	6a3b      	ldr	r3, [r7, #32]
   1853e:	0018      	movs	r0, r3
   18540:	4b1d      	ldr	r3, [pc, #116]	; (185b8 <xQueueGenericSend+0x44c>)
   18542:	4798      	blx	r3
   18544:	0003      	movs	r3, r0
   18546:	001a      	movs	r2, r3
   18548:	4b1a      	ldr	r3, [pc, #104]	; (185b4 <xQueueGenericSend+0x448>)
   1854a:	881b      	ldrh	r3, [r3, #0]
   1854c:	4013      	ands	r3, r2
   1854e:	b29b      	uxth	r3, r3
   18550:	2b00      	cmp	r3, #0
   18552:	d022      	beq.n	1859a <xQueueGenericSend+0x42e>
   18554:	683b      	ldr	r3, [r7, #0]
   18556:	2b00      	cmp	r3, #0
   18558:	d10b      	bne.n	18572 <xQueueGenericSend+0x406>
   1855a:	6a3b      	ldr	r3, [r7, #32]
   1855c:	0018      	movs	r0, r3
   1855e:	4b17      	ldr	r3, [pc, #92]	; (185bc <xQueueGenericSend+0x450>)
   18560:	4798      	blx	r3
   18562:	0003      	movs	r3, r0
   18564:	001a      	movs	r2, r3
   18566:	4b16      	ldr	r3, [pc, #88]	; (185c0 <xQueueGenericSend+0x454>)
   18568:	5c9b      	ldrb	r3, [r3, r2]
   1856a:	3348      	adds	r3, #72	; 0x48
   1856c:	b2db      	uxtb	r3, r3
   1856e:	001d      	movs	r5, r3
   18570:	e000      	b.n	18574 <xQueueGenericSend+0x408>
   18572:	254d      	movs	r5, #77	; 0x4d
   18574:	6a3b      	ldr	r3, [r7, #32]
   18576:	0018      	movs	r0, r3
   18578:	4b10      	ldr	r3, [pc, #64]	; (185bc <xQueueGenericSend+0x450>)
   1857a:	4798      	blx	r3
   1857c:	0003      	movs	r3, r0
   1857e:	001a      	movs	r2, r3
   18580:	4b0f      	ldr	r3, [pc, #60]	; (185c0 <xQueueGenericSend+0x454>)
   18582:	5c9c      	ldrb	r4, [r3, r2]
   18584:	6a3b      	ldr	r3, [r7, #32]
   18586:	0018      	movs	r0, r3
   18588:	4b0e      	ldr	r3, [pc, #56]	; (185c4 <xQueueGenericSend+0x458>)
   1858a:	4798      	blx	r3
   1858c:	0003      	movs	r3, r0
   1858e:	b2db      	uxtb	r3, r3
   18590:	001a      	movs	r2, r3
   18592:	0021      	movs	r1, r4
   18594:	0028      	movs	r0, r5
   18596:	4b0c      	ldr	r3, [pc, #48]	; (185c8 <xQueueGenericSend+0x45c>)
   18598:	4798      	blx	r3
			return errQUEUE_FULL;
   1859a:	2300      	movs	r3, #0
		}
	}
}
   1859c:	0018      	movs	r0, r3
   1859e:	46bd      	mov	sp, r7
   185a0:	b00a      	add	sp, #40	; 0x28
   185a2:	bdb0      	pop	{r4, r5, r7, pc}
   185a4:	000194d5 	.word	0x000194d5
   185a8:	00019ea9 	.word	0x00019ea9
   185ac:	00015e75 	.word	0x00015e75
   185b0:	00015bd9 	.word	0x00015bd9
   185b4:	20000038 	.word	0x20000038
   185b8:	00015c99 	.word	0x00015c99
   185bc:	00015b99 	.word	0x00015b99
   185c0:	2000002c 	.word	0x2000002c
   185c4:	00015c79 	.word	0x00015c79
   185c8:	000165d1 	.word	0x000165d1

000185cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   185cc:	b5b0      	push	{r4, r5, r7, lr}
   185ce:	b088      	sub	sp, #32
   185d0:	af00      	add	r7, sp, #0
   185d2:	60f8      	str	r0, [r7, #12]
   185d4:	60b9      	str	r1, [r7, #8]
   185d6:	607a      	str	r2, [r7, #4]
   185d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   185da:	68fb      	ldr	r3, [r7, #12]
   185dc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   185de:	69bb      	ldr	r3, [r7, #24]
   185e0:	2b00      	cmp	r3, #0
   185e2:	d101      	bne.n	185e8 <xQueueGenericSendFromISR+0x1c>
   185e4:	b672      	cpsid	i
   185e6:	e7fe      	b.n	185e6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   185e8:	68bb      	ldr	r3, [r7, #8]
   185ea:	2b00      	cmp	r3, #0
   185ec:	d103      	bne.n	185f6 <xQueueGenericSendFromISR+0x2a>
   185ee:	69bb      	ldr	r3, [r7, #24]
   185f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   185f2:	2b00      	cmp	r3, #0
   185f4:	d101      	bne.n	185fa <xQueueGenericSendFromISR+0x2e>
   185f6:	2301      	movs	r3, #1
   185f8:	e000      	b.n	185fc <xQueueGenericSendFromISR+0x30>
   185fa:	2300      	movs	r3, #0
   185fc:	2b00      	cmp	r3, #0
   185fe:	d101      	bne.n	18604 <xQueueGenericSendFromISR+0x38>
   18600:	b672      	cpsid	i
   18602:	e7fe      	b.n	18602 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   18604:	683b      	ldr	r3, [r7, #0]
   18606:	2b02      	cmp	r3, #2
   18608:	d103      	bne.n	18612 <xQueueGenericSendFromISR+0x46>
   1860a:	69bb      	ldr	r3, [r7, #24]
   1860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1860e:	2b01      	cmp	r3, #1
   18610:	d101      	bne.n	18616 <xQueueGenericSendFromISR+0x4a>
   18612:	2301      	movs	r3, #1
   18614:	e000      	b.n	18618 <xQueueGenericSendFromISR+0x4c>
   18616:	2300      	movs	r3, #0
   18618:	2b00      	cmp	r3, #0
   1861a:	d101      	bne.n	18620 <xQueueGenericSendFromISR+0x54>
   1861c:	b672      	cpsid	i
   1861e:	e7fe      	b.n	1861e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   18620:	4b68      	ldr	r3, [pc, #416]	; (187c4 <xQueueGenericSendFromISR+0x1f8>)
   18622:	4798      	blx	r3
   18624:	0003      	movs	r3, r0
   18626:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   18628:	69bb      	ldr	r3, [r7, #24]
   1862a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1862c:	69bb      	ldr	r3, [r7, #24]
   1862e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18630:	429a      	cmp	r2, r3
   18632:	d303      	bcc.n	1863c <xQueueGenericSendFromISR+0x70>
   18634:	683b      	ldr	r3, [r7, #0]
   18636:	2b02      	cmp	r3, #2
   18638:	d000      	beq.n	1863c <xQueueGenericSendFromISR+0x70>
   1863a:	e088      	b.n	1874e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1863c:	2313      	movs	r3, #19
   1863e:	18fb      	adds	r3, r7, r3
   18640:	69ba      	ldr	r2, [r7, #24]
   18642:	2145      	movs	r1, #69	; 0x45
   18644:	5c52      	ldrb	r2, [r2, r1]
   18646:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   18648:	69bb      	ldr	r3, [r7, #24]
   1864a:	0018      	movs	r0, r3
   1864c:	4b5e      	ldr	r3, [pc, #376]	; (187c8 <xQueueGenericSendFromISR+0x1fc>)
   1864e:	4798      	blx	r3
   18650:	0003      	movs	r3, r0
   18652:	001a      	movs	r2, r3
   18654:	4b5d      	ldr	r3, [pc, #372]	; (187cc <xQueueGenericSendFromISR+0x200>)
   18656:	881b      	ldrh	r3, [r3, #0]
   18658:	4013      	ands	r3, r2
   1865a:	b29b      	uxth	r3, r3
   1865c:	2b00      	cmp	r3, #0
   1865e:	d022      	beq.n	186a6 <xQueueGenericSendFromISR+0xda>
   18660:	683b      	ldr	r3, [r7, #0]
   18662:	2b00      	cmp	r3, #0
   18664:	d10b      	bne.n	1867e <xQueueGenericSendFromISR+0xb2>
   18666:	69bb      	ldr	r3, [r7, #24]
   18668:	0018      	movs	r0, r3
   1866a:	4b59      	ldr	r3, [pc, #356]	; (187d0 <xQueueGenericSendFromISR+0x204>)
   1866c:	4798      	blx	r3
   1866e:	0003      	movs	r3, r0
   18670:	001a      	movs	r2, r3
   18672:	4b58      	ldr	r3, [pc, #352]	; (187d4 <xQueueGenericSendFromISR+0x208>)
   18674:	5c9b      	ldrb	r3, [r3, r2]
   18676:	3330      	adds	r3, #48	; 0x30
   18678:	b2db      	uxtb	r3, r3
   1867a:	001d      	movs	r5, r3
   1867c:	e000      	b.n	18680 <xQueueGenericSendFromISR+0xb4>
   1867e:	2535      	movs	r5, #53	; 0x35
   18680:	69bb      	ldr	r3, [r7, #24]
   18682:	0018      	movs	r0, r3
   18684:	4b52      	ldr	r3, [pc, #328]	; (187d0 <xQueueGenericSendFromISR+0x204>)
   18686:	4798      	blx	r3
   18688:	0003      	movs	r3, r0
   1868a:	001a      	movs	r2, r3
   1868c:	4b51      	ldr	r3, [pc, #324]	; (187d4 <xQueueGenericSendFromISR+0x208>)
   1868e:	5c9c      	ldrb	r4, [r3, r2]
   18690:	69bb      	ldr	r3, [r7, #24]
   18692:	0018      	movs	r0, r3
   18694:	4b50      	ldr	r3, [pc, #320]	; (187d8 <xQueueGenericSendFromISR+0x20c>)
   18696:	4798      	blx	r3
   18698:	0003      	movs	r3, r0
   1869a:	b2db      	uxtb	r3, r3
   1869c:	001a      	movs	r2, r3
   1869e:	0021      	movs	r1, r4
   186a0:	0028      	movs	r0, r5
   186a2:	4b4e      	ldr	r3, [pc, #312]	; (187dc <xQueueGenericSendFromISR+0x210>)
   186a4:	4798      	blx	r3
   186a6:	69bb      	ldr	r3, [r7, #24]
   186a8:	0018      	movs	r0, r3
   186aa:	4b49      	ldr	r3, [pc, #292]	; (187d0 <xQueueGenericSendFromISR+0x204>)
   186ac:	4798      	blx	r3
   186ae:	0003      	movs	r3, r0
   186b0:	001a      	movs	r2, r3
   186b2:	4b48      	ldr	r3, [pc, #288]	; (187d4 <xQueueGenericSendFromISR+0x208>)
   186b4:	5c9c      	ldrb	r4, [r3, r2]
   186b6:	69bb      	ldr	r3, [r7, #24]
   186b8:	0018      	movs	r0, r3
   186ba:	4b47      	ldr	r3, [pc, #284]	; (187d8 <xQueueGenericSendFromISR+0x20c>)
   186bc:	4798      	blx	r3
   186be:	0003      	movs	r3, r0
   186c0:	b2d9      	uxtb	r1, r3
   186c2:	69bb      	ldr	r3, [r7, #24]
   186c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   186c6:	b2db      	uxtb	r3, r3
   186c8:	3301      	adds	r3, #1
   186ca:	b2db      	uxtb	r3, r3
   186cc:	001a      	movs	r2, r3
   186ce:	0020      	movs	r0, r4
   186d0:	4b43      	ldr	r3, [pc, #268]	; (187e0 <xQueueGenericSendFromISR+0x214>)
   186d2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   186d4:	683a      	ldr	r2, [r7, #0]
   186d6:	68b9      	ldr	r1, [r7, #8]
   186d8:	69bb      	ldr	r3, [r7, #24]
   186da:	0018      	movs	r0, r3
   186dc:	4b41      	ldr	r3, [pc, #260]	; (187e4 <xQueueGenericSendFromISR+0x218>)
   186de:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   186e0:	2313      	movs	r3, #19
   186e2:	18fb      	adds	r3, r7, r3
   186e4:	781b      	ldrb	r3, [r3, #0]
   186e6:	b25b      	sxtb	r3, r3
   186e8:	3301      	adds	r3, #1
   186ea:	d124      	bne.n	18736 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   186ec:	69bb      	ldr	r3, [r7, #24]
   186ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   186f0:	2b00      	cmp	r3, #0
   186f2:	d00e      	beq.n	18712 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   186f4:	683a      	ldr	r2, [r7, #0]
   186f6:	69bb      	ldr	r3, [r7, #24]
   186f8:	0011      	movs	r1, r2
   186fa:	0018      	movs	r0, r3
   186fc:	4b3a      	ldr	r3, [pc, #232]	; (187e8 <xQueueGenericSendFromISR+0x21c>)
   186fe:	4798      	blx	r3
   18700:	1e03      	subs	r3, r0, #0
   18702:	d021      	beq.n	18748 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   18704:	687b      	ldr	r3, [r7, #4]
   18706:	2b00      	cmp	r3, #0
   18708:	d01e      	beq.n	18748 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1870a:	687b      	ldr	r3, [r7, #4]
   1870c:	2201      	movs	r2, #1
   1870e:	601a      	str	r2, [r3, #0]
   18710:	e01a      	b.n	18748 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   18712:	69bb      	ldr	r3, [r7, #24]
   18714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18716:	2b00      	cmp	r3, #0
   18718:	d016      	beq.n	18748 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1871a:	69bb      	ldr	r3, [r7, #24]
   1871c:	3324      	adds	r3, #36	; 0x24
   1871e:	0018      	movs	r0, r3
   18720:	4b32      	ldr	r3, [pc, #200]	; (187ec <xQueueGenericSendFromISR+0x220>)
   18722:	4798      	blx	r3
   18724:	1e03      	subs	r3, r0, #0
   18726:	d00f      	beq.n	18748 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	2b00      	cmp	r3, #0
   1872c:	d00c      	beq.n	18748 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	2201      	movs	r2, #1
   18732:	601a      	str	r2, [r3, #0]
   18734:	e008      	b.n	18748 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   18736:	2313      	movs	r3, #19
   18738:	18fb      	adds	r3, r7, r3
   1873a:	781b      	ldrb	r3, [r3, #0]
   1873c:	3301      	adds	r3, #1
   1873e:	b2db      	uxtb	r3, r3
   18740:	b259      	sxtb	r1, r3
   18742:	69bb      	ldr	r3, [r7, #24]
   18744:	2245      	movs	r2, #69	; 0x45
   18746:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   18748:	2301      	movs	r3, #1
   1874a:	61fb      	str	r3, [r7, #28]
		{
   1874c:	e030      	b.n	187b0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1874e:	69bb      	ldr	r3, [r7, #24]
   18750:	0018      	movs	r0, r3
   18752:	4b1d      	ldr	r3, [pc, #116]	; (187c8 <xQueueGenericSendFromISR+0x1fc>)
   18754:	4798      	blx	r3
   18756:	0003      	movs	r3, r0
   18758:	001a      	movs	r2, r3
   1875a:	4b1c      	ldr	r3, [pc, #112]	; (187cc <xQueueGenericSendFromISR+0x200>)
   1875c:	881b      	ldrh	r3, [r3, #0]
   1875e:	4013      	ands	r3, r2
   18760:	b29b      	uxth	r3, r3
   18762:	2b00      	cmp	r3, #0
   18764:	d022      	beq.n	187ac <xQueueGenericSendFromISR+0x1e0>
   18766:	683b      	ldr	r3, [r7, #0]
   18768:	2b00      	cmp	r3, #0
   1876a:	d10b      	bne.n	18784 <xQueueGenericSendFromISR+0x1b8>
   1876c:	69bb      	ldr	r3, [r7, #24]
   1876e:	0018      	movs	r0, r3
   18770:	4b17      	ldr	r3, [pc, #92]	; (187d0 <xQueueGenericSendFromISR+0x204>)
   18772:	4798      	blx	r3
   18774:	0003      	movs	r3, r0
   18776:	001a      	movs	r2, r3
   18778:	4b16      	ldr	r3, [pc, #88]	; (187d4 <xQueueGenericSendFromISR+0x208>)
   1877a:	5c9b      	ldrb	r3, [r3, r2]
   1877c:	3358      	adds	r3, #88	; 0x58
   1877e:	b2db      	uxtb	r3, r3
   18780:	001d      	movs	r5, r3
   18782:	e000      	b.n	18786 <xQueueGenericSendFromISR+0x1ba>
   18784:	255d      	movs	r5, #93	; 0x5d
   18786:	69bb      	ldr	r3, [r7, #24]
   18788:	0018      	movs	r0, r3
   1878a:	4b11      	ldr	r3, [pc, #68]	; (187d0 <xQueueGenericSendFromISR+0x204>)
   1878c:	4798      	blx	r3
   1878e:	0003      	movs	r3, r0
   18790:	001a      	movs	r2, r3
   18792:	4b10      	ldr	r3, [pc, #64]	; (187d4 <xQueueGenericSendFromISR+0x208>)
   18794:	5c9c      	ldrb	r4, [r3, r2]
   18796:	69bb      	ldr	r3, [r7, #24]
   18798:	0018      	movs	r0, r3
   1879a:	4b0f      	ldr	r3, [pc, #60]	; (187d8 <xQueueGenericSendFromISR+0x20c>)
   1879c:	4798      	blx	r3
   1879e:	0003      	movs	r3, r0
   187a0:	b2db      	uxtb	r3, r3
   187a2:	001a      	movs	r2, r3
   187a4:	0021      	movs	r1, r4
   187a6:	0028      	movs	r0, r5
   187a8:	4b0c      	ldr	r3, [pc, #48]	; (187dc <xQueueGenericSendFromISR+0x210>)
   187aa:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   187ac:	2300      	movs	r3, #0
   187ae:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   187b0:	697b      	ldr	r3, [r7, #20]
   187b2:	0018      	movs	r0, r3
   187b4:	4b0e      	ldr	r3, [pc, #56]	; (187f0 <xQueueGenericSendFromISR+0x224>)
   187b6:	4798      	blx	r3

	return xReturn;
   187b8:	69fb      	ldr	r3, [r7, #28]
}
   187ba:	0018      	movs	r0, r3
   187bc:	46bd      	mov	sp, r7
   187be:	b008      	add	sp, #32
   187c0:	bdb0      	pop	{r4, r5, r7, pc}
   187c2:	46c0      	nop			; (mov r8, r8)
   187c4:	00017c2d 	.word	0x00017c2d
   187c8:	00015c99 	.word	0x00015c99
   187cc:	20000038 	.word	0x20000038
   187d0:	00015b99 	.word	0x00015b99
   187d4:	2000002c 	.word	0x2000002c
   187d8:	00015c79 	.word	0x00015c79
   187dc:	000165d1 	.word	0x000165d1
   187e0:	00016c2d 	.word	0x00016c2d
   187e4:	000193a5 	.word	0x000193a5
   187e8:	000196a9 	.word	0x000196a9
   187ec:	0001a469 	.word	0x0001a469
   187f0:	00017c39 	.word	0x00017c39

000187f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   187f4:	b580      	push	{r7, lr}
   187f6:	b082      	sub	sp, #8
   187f8:	af00      	add	r7, sp, #0
   187fa:	6078      	str	r0, [r7, #4]
   187fc:	6039      	str	r1, [r7, #0]
   187fe:	6839      	ldr	r1, [r7, #0]
   18800:	687b      	ldr	r3, [r7, #4]
   18802:	2200      	movs	r2, #0
   18804:	0018      	movs	r0, r3
   18806:	4b03      	ldr	r3, [pc, #12]	; (18814 <xQueueGiveFromISR+0x20>)
   18808:	4798      	blx	r3
   1880a:	0003      	movs	r3, r0
   1880c:	0018      	movs	r0, r3
   1880e:	46bd      	mov	sp, r7
   18810:	b002      	add	sp, #8
   18812:	bd80      	pop	{r7, pc}
   18814:	00018819 	.word	0x00018819

00018818 <MyWrapper>:
{
   18818:	b5b0      	push	{r4, r5, r7, lr}
   1881a:	b08a      	sub	sp, #40	; 0x28
   1881c:	af00      	add	r7, sp, #0
   1881e:	60f8      	str	r0, [r7, #12]
   18820:	60b9      	str	r1, [r7, #8]
   18822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18824:	68fb      	ldr	r3, [r7, #12]
   18826:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   18828:	6a3b      	ldr	r3, [r7, #32]
   1882a:	2b00      	cmp	r3, #0
   1882c:	d101      	bne.n	18832 <MyWrapper+0x1a>
   1882e:	b672      	cpsid	i
   18830:	e7fe      	b.n	18830 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   18832:	6a3b      	ldr	r3, [r7, #32]
   18834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18836:	2b00      	cmp	r3, #0
   18838:	d001      	beq.n	1883e <MyWrapper+0x26>
   1883a:	b672      	cpsid	i
   1883c:	e7fe      	b.n	1883c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1883e:	6a3b      	ldr	r3, [r7, #32]
   18840:	681b      	ldr	r3, [r3, #0]
   18842:	2b00      	cmp	r3, #0
   18844:	d103      	bne.n	1884e <MyWrapper+0x36>
   18846:	6a3b      	ldr	r3, [r7, #32]
   18848:	685b      	ldr	r3, [r3, #4]
   1884a:	2b00      	cmp	r3, #0
   1884c:	d101      	bne.n	18852 <MyWrapper+0x3a>
   1884e:	2301      	movs	r3, #1
   18850:	e000      	b.n	18854 <MyWrapper+0x3c>
   18852:	2300      	movs	r3, #0
   18854:	2b00      	cmp	r3, #0
   18856:	d101      	bne.n	1885c <MyWrapper+0x44>
   18858:	b672      	cpsid	i
   1885a:	e7fe      	b.n	1885a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1885c:	4b66      	ldr	r3, [pc, #408]	; (189f8 <MyWrapper+0x1e0>)
   1885e:	4798      	blx	r3
   18860:	0003      	movs	r3, r0
   18862:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   18864:	6a3b      	ldr	r3, [r7, #32]
   18866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18868:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1886a:	6a3b      	ldr	r3, [r7, #32]
   1886c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1886e:	69bb      	ldr	r3, [r7, #24]
   18870:	429a      	cmp	r2, r3
   18872:	d800      	bhi.n	18876 <MyWrapper+0x5e>
   18874:	e085      	b.n	18982 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   18876:	2317      	movs	r3, #23
   18878:	18fb      	adds	r3, r7, r3
   1887a:	6a3a      	ldr	r2, [r7, #32]
   1887c:	2145      	movs	r1, #69	; 0x45
   1887e:	5c52      	ldrb	r2, [r2, r1]
   18880:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   18882:	6a3b      	ldr	r3, [r7, #32]
   18884:	0018      	movs	r0, r3
   18886:	4b5d      	ldr	r3, [pc, #372]	; (189fc <MyWrapper+0x1e4>)
   18888:	4798      	blx	r3
   1888a:	0003      	movs	r3, r0
   1888c:	001a      	movs	r2, r3
   1888e:	4b5c      	ldr	r3, [pc, #368]	; (18a00 <MyWrapper+0x1e8>)
   18890:	881b      	ldrh	r3, [r3, #0]
   18892:	4013      	ands	r3, r2
   18894:	b29b      	uxth	r3, r3
   18896:	2b00      	cmp	r3, #0
   18898:	d022      	beq.n	188e0 <MyWrapper+0xc8>
   1889a:	687b      	ldr	r3, [r7, #4]
   1889c:	2b00      	cmp	r3, #0
   1889e:	d10b      	bne.n	188b8 <MyWrapper+0xa0>
   188a0:	6a3b      	ldr	r3, [r7, #32]
   188a2:	0018      	movs	r0, r3
   188a4:	4b57      	ldr	r3, [pc, #348]	; (18a04 <MyWrapper+0x1ec>)
   188a6:	4798      	blx	r3
   188a8:	0003      	movs	r3, r0
   188aa:	001a      	movs	r2, r3
   188ac:	4b56      	ldr	r3, [pc, #344]	; (18a08 <MyWrapper+0x1f0>)
   188ae:	5c9b      	ldrb	r3, [r3, r2]
   188b0:	3330      	adds	r3, #48	; 0x30
   188b2:	b2db      	uxtb	r3, r3
   188b4:	001d      	movs	r5, r3
   188b6:	e000      	b.n	188ba <MyWrapper+0xa2>
   188b8:	2535      	movs	r5, #53	; 0x35
   188ba:	6a3b      	ldr	r3, [r7, #32]
   188bc:	0018      	movs	r0, r3
   188be:	4b51      	ldr	r3, [pc, #324]	; (18a04 <MyWrapper+0x1ec>)
   188c0:	4798      	blx	r3
   188c2:	0003      	movs	r3, r0
   188c4:	001a      	movs	r2, r3
   188c6:	4b50      	ldr	r3, [pc, #320]	; (18a08 <MyWrapper+0x1f0>)
   188c8:	5c9c      	ldrb	r4, [r3, r2]
   188ca:	6a3b      	ldr	r3, [r7, #32]
   188cc:	0018      	movs	r0, r3
   188ce:	4b4f      	ldr	r3, [pc, #316]	; (18a0c <MyWrapper+0x1f4>)
   188d0:	4798      	blx	r3
   188d2:	0003      	movs	r3, r0
   188d4:	b2db      	uxtb	r3, r3
   188d6:	001a      	movs	r2, r3
   188d8:	0021      	movs	r1, r4
   188da:	0028      	movs	r0, r5
   188dc:	4b4c      	ldr	r3, [pc, #304]	; (18a10 <MyWrapper+0x1f8>)
   188de:	4798      	blx	r3
   188e0:	6a3b      	ldr	r3, [r7, #32]
   188e2:	0018      	movs	r0, r3
   188e4:	4b47      	ldr	r3, [pc, #284]	; (18a04 <MyWrapper+0x1ec>)
   188e6:	4798      	blx	r3
   188e8:	0003      	movs	r3, r0
   188ea:	001a      	movs	r2, r3
   188ec:	4b46      	ldr	r3, [pc, #280]	; (18a08 <MyWrapper+0x1f0>)
   188ee:	5c9c      	ldrb	r4, [r3, r2]
   188f0:	6a3b      	ldr	r3, [r7, #32]
   188f2:	0018      	movs	r0, r3
   188f4:	4b45      	ldr	r3, [pc, #276]	; (18a0c <MyWrapper+0x1f4>)
   188f6:	4798      	blx	r3
   188f8:	0003      	movs	r3, r0
   188fa:	b2d9      	uxtb	r1, r3
   188fc:	6a3b      	ldr	r3, [r7, #32]
   188fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18900:	b2db      	uxtb	r3, r3
   18902:	3301      	adds	r3, #1
   18904:	b2db      	uxtb	r3, r3
   18906:	001a      	movs	r2, r3
   18908:	0020      	movs	r0, r4
   1890a:	4b42      	ldr	r3, [pc, #264]	; (18a14 <MyWrapper+0x1fc>)
   1890c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1890e:	69bb      	ldr	r3, [r7, #24]
   18910:	1c5a      	adds	r2, r3, #1
   18912:	6a3b      	ldr	r3, [r7, #32]
   18914:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   18916:	2317      	movs	r3, #23
   18918:	18fb      	adds	r3, r7, r3
   1891a:	781b      	ldrb	r3, [r3, #0]
   1891c:	b25b      	sxtb	r3, r3
   1891e:	3301      	adds	r3, #1
   18920:	d123      	bne.n	1896a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   18922:	6a3b      	ldr	r3, [r7, #32]
   18924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18926:	2b00      	cmp	r3, #0
   18928:	d00d      	beq.n	18946 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1892a:	6a3b      	ldr	r3, [r7, #32]
   1892c:	2100      	movs	r1, #0
   1892e:	0018      	movs	r0, r3
   18930:	4b39      	ldr	r3, [pc, #228]	; (18a18 <MyWrapper+0x200>)
   18932:	4798      	blx	r3
   18934:	1e03      	subs	r3, r0, #0
   18936:	d021      	beq.n	1897c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   18938:	68bb      	ldr	r3, [r7, #8]
   1893a:	2b00      	cmp	r3, #0
   1893c:	d01e      	beq.n	1897c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1893e:	68bb      	ldr	r3, [r7, #8]
   18940:	2201      	movs	r2, #1
   18942:	601a      	str	r2, [r3, #0]
   18944:	e01a      	b.n	1897c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   18946:	6a3b      	ldr	r3, [r7, #32]
   18948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1894a:	2b00      	cmp	r3, #0
   1894c:	d016      	beq.n	1897c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1894e:	6a3b      	ldr	r3, [r7, #32]
   18950:	3324      	adds	r3, #36	; 0x24
   18952:	0018      	movs	r0, r3
   18954:	4b31      	ldr	r3, [pc, #196]	; (18a1c <MyWrapper+0x204>)
   18956:	4798      	blx	r3
   18958:	1e03      	subs	r3, r0, #0
   1895a:	d00f      	beq.n	1897c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1895c:	68bb      	ldr	r3, [r7, #8]
   1895e:	2b00      	cmp	r3, #0
   18960:	d00c      	beq.n	1897c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   18962:	68bb      	ldr	r3, [r7, #8]
   18964:	2201      	movs	r2, #1
   18966:	601a      	str	r2, [r3, #0]
   18968:	e008      	b.n	1897c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1896a:	2317      	movs	r3, #23
   1896c:	18fb      	adds	r3, r7, r3
   1896e:	781b      	ldrb	r3, [r3, #0]
   18970:	3301      	adds	r3, #1
   18972:	b2db      	uxtb	r3, r3
   18974:	b259      	sxtb	r1, r3
   18976:	6a3b      	ldr	r3, [r7, #32]
   18978:	2245      	movs	r2, #69	; 0x45
   1897a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1897c:	2301      	movs	r3, #1
   1897e:	627b      	str	r3, [r7, #36]	; 0x24
   18980:	e030      	b.n	189e4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   18982:	6a3b      	ldr	r3, [r7, #32]
   18984:	0018      	movs	r0, r3
   18986:	4b1d      	ldr	r3, [pc, #116]	; (189fc <MyWrapper+0x1e4>)
   18988:	4798      	blx	r3
   1898a:	0003      	movs	r3, r0
   1898c:	001a      	movs	r2, r3
   1898e:	4b1c      	ldr	r3, [pc, #112]	; (18a00 <MyWrapper+0x1e8>)
   18990:	881b      	ldrh	r3, [r3, #0]
   18992:	4013      	ands	r3, r2
   18994:	b29b      	uxth	r3, r3
   18996:	2b00      	cmp	r3, #0
   18998:	d022      	beq.n	189e0 <MyWrapper+0x1c8>
   1899a:	687b      	ldr	r3, [r7, #4]
   1899c:	2b00      	cmp	r3, #0
   1899e:	d10b      	bne.n	189b8 <MyWrapper+0x1a0>
   189a0:	6a3b      	ldr	r3, [r7, #32]
   189a2:	0018      	movs	r0, r3
   189a4:	4b17      	ldr	r3, [pc, #92]	; (18a04 <MyWrapper+0x1ec>)
   189a6:	4798      	blx	r3
   189a8:	0003      	movs	r3, r0
   189aa:	001a      	movs	r2, r3
   189ac:	4b16      	ldr	r3, [pc, #88]	; (18a08 <MyWrapper+0x1f0>)
   189ae:	5c9b      	ldrb	r3, [r3, r2]
   189b0:	3358      	adds	r3, #88	; 0x58
   189b2:	b2db      	uxtb	r3, r3
   189b4:	001d      	movs	r5, r3
   189b6:	e000      	b.n	189ba <MyWrapper+0x1a2>
   189b8:	255d      	movs	r5, #93	; 0x5d
   189ba:	6a3b      	ldr	r3, [r7, #32]
   189bc:	0018      	movs	r0, r3
   189be:	4b11      	ldr	r3, [pc, #68]	; (18a04 <MyWrapper+0x1ec>)
   189c0:	4798      	blx	r3
   189c2:	0003      	movs	r3, r0
   189c4:	001a      	movs	r2, r3
   189c6:	4b10      	ldr	r3, [pc, #64]	; (18a08 <MyWrapper+0x1f0>)
   189c8:	5c9c      	ldrb	r4, [r3, r2]
   189ca:	6a3b      	ldr	r3, [r7, #32]
   189cc:	0018      	movs	r0, r3
   189ce:	4b0f      	ldr	r3, [pc, #60]	; (18a0c <MyWrapper+0x1f4>)
   189d0:	4798      	blx	r3
   189d2:	0003      	movs	r3, r0
   189d4:	b2db      	uxtb	r3, r3
   189d6:	001a      	movs	r2, r3
   189d8:	0021      	movs	r1, r4
   189da:	0028      	movs	r0, r5
   189dc:	4b0c      	ldr	r3, [pc, #48]	; (18a10 <MyWrapper+0x1f8>)
   189de:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   189e0:	2300      	movs	r3, #0
   189e2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   189e4:	69fb      	ldr	r3, [r7, #28]
   189e6:	0018      	movs	r0, r3
   189e8:	4b0d      	ldr	r3, [pc, #52]	; (18a20 <MyWrapper+0x208>)
   189ea:	4798      	blx	r3

	return xReturn;
   189ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   189ee:	0018      	movs	r0, r3
   189f0:	46bd      	mov	sp, r7
   189f2:	b00a      	add	sp, #40	; 0x28
   189f4:	bdb0      	pop	{r4, r5, r7, pc}
   189f6:	46c0      	nop			; (mov r8, r8)
   189f8:	00017c2d 	.word	0x00017c2d
   189fc:	00015c99 	.word	0x00015c99
   18a00:	20000038 	.word	0x20000038
   18a04:	00015b99 	.word	0x00015b99
   18a08:	2000002c 	.word	0x2000002c
   18a0c:	00015c79 	.word	0x00015c79
   18a10:	000165d1 	.word	0x000165d1
   18a14:	00016c2d 	.word	0x00016c2d
   18a18:	000196a9 	.word	0x000196a9
   18a1c:	0001a469 	.word	0x0001a469
   18a20:	00017c39 	.word	0x00017c39

00018a24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   18a24:	b5b0      	push	{r4, r5, r7, lr}
   18a26:	b08a      	sub	sp, #40	; 0x28
   18a28:	af00      	add	r7, sp, #0
   18a2a:	60f8      	str	r0, [r7, #12]
   18a2c:	60b9      	str	r1, [r7, #8]
   18a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   18a30:	2300      	movs	r3, #0
   18a32:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18a34:	68fb      	ldr	r3, [r7, #12]
   18a36:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   18a38:	6a3b      	ldr	r3, [r7, #32]
   18a3a:	2b00      	cmp	r3, #0
   18a3c:	d101      	bne.n	18a42 <xQueueReceive+0x1e>
   18a3e:	b672      	cpsid	i
   18a40:	e7fe      	b.n	18a40 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   18a42:	68bb      	ldr	r3, [r7, #8]
   18a44:	2b00      	cmp	r3, #0
   18a46:	d103      	bne.n	18a50 <xQueueReceive+0x2c>
   18a48:	6a3b      	ldr	r3, [r7, #32]
   18a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18a4c:	2b00      	cmp	r3, #0
   18a4e:	d101      	bne.n	18a54 <xQueueReceive+0x30>
   18a50:	2301      	movs	r3, #1
   18a52:	e000      	b.n	18a56 <xQueueReceive+0x32>
   18a54:	2300      	movs	r3, #0
   18a56:	2b00      	cmp	r3, #0
   18a58:	d101      	bne.n	18a5e <xQueueReceive+0x3a>
   18a5a:	b672      	cpsid	i
   18a5c:	e7fe      	b.n	18a5c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   18a5e:	4bbf      	ldr	r3, [pc, #764]	; (18d5c <xQueueReceive+0x338>)
   18a60:	4798      	blx	r3
   18a62:	1e03      	subs	r3, r0, #0
   18a64:	d102      	bne.n	18a6c <xQueueReceive+0x48>
   18a66:	687b      	ldr	r3, [r7, #4]
   18a68:	2b00      	cmp	r3, #0
   18a6a:	d101      	bne.n	18a70 <xQueueReceive+0x4c>
   18a6c:	2301      	movs	r3, #1
   18a6e:	e000      	b.n	18a72 <xQueueReceive+0x4e>
   18a70:	2300      	movs	r3, #0
   18a72:	2b00      	cmp	r3, #0
   18a74:	d101      	bne.n	18a7a <xQueueReceive+0x56>
   18a76:	b672      	cpsid	i
   18a78:	e7fe      	b.n	18a78 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   18a7a:	4bb9      	ldr	r3, [pc, #740]	; (18d60 <xQueueReceive+0x33c>)
   18a7c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   18a7e:	6a3b      	ldr	r3, [r7, #32]
   18a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18a82:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   18a84:	69fb      	ldr	r3, [r7, #28]
   18a86:	2b00      	cmp	r3, #0
   18a88:	d100      	bne.n	18a8c <xQueueReceive+0x68>
   18a8a:	e07d      	b.n	18b88 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   18a8c:	68ba      	ldr	r2, [r7, #8]
   18a8e:	6a3b      	ldr	r3, [r7, #32]
   18a90:	0011      	movs	r1, r2
   18a92:	0018      	movs	r0, r3
   18a94:	4bb3      	ldr	r3, [pc, #716]	; (18d64 <xQueueReceive+0x340>)
   18a96:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   18a98:	4bb3      	ldr	r3, [pc, #716]	; (18d68 <xQueueReceive+0x344>)
   18a9a:	4798      	blx	r3
   18a9c:	0003      	movs	r3, r0
   18a9e:	0018      	movs	r0, r3
   18aa0:	4bb2      	ldr	r3, [pc, #712]	; (18d6c <xQueueReceive+0x348>)
   18aa2:	4798      	blx	r3
   18aa4:	0003      	movs	r3, r0
   18aa6:	001a      	movs	r2, r3
   18aa8:	4bb1      	ldr	r3, [pc, #708]	; (18d70 <xQueueReceive+0x34c>)
   18aaa:	881b      	ldrh	r3, [r3, #0]
   18aac:	4013      	ands	r3, r2
   18aae:	b29b      	uxth	r3, r3
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	d029      	beq.n	18b08 <xQueueReceive+0xe4>
   18ab4:	6a3b      	ldr	r3, [r7, #32]
   18ab6:	0018      	movs	r0, r3
   18ab8:	4bae      	ldr	r3, [pc, #696]	; (18d74 <xQueueReceive+0x350>)
   18aba:	4798      	blx	r3
   18abc:	0003      	movs	r3, r0
   18abe:	001a      	movs	r2, r3
   18ac0:	4bab      	ldr	r3, [pc, #684]	; (18d70 <xQueueReceive+0x34c>)
   18ac2:	881b      	ldrh	r3, [r3, #0]
   18ac4:	4013      	ands	r3, r2
   18ac6:	b29b      	uxth	r3, r3
   18ac8:	2b00      	cmp	r3, #0
   18aca:	d01d      	beq.n	18b08 <xQueueReceive+0xe4>
   18acc:	6a3b      	ldr	r3, [r7, #32]
   18ace:	0018      	movs	r0, r3
   18ad0:	4ba9      	ldr	r3, [pc, #676]	; (18d78 <xQueueReceive+0x354>)
   18ad2:	4798      	blx	r3
   18ad4:	0003      	movs	r3, r0
   18ad6:	001a      	movs	r2, r3
   18ad8:	4ba8      	ldr	r3, [pc, #672]	; (18d7c <xQueueReceive+0x358>)
   18ada:	5c9b      	ldrb	r3, [r3, r2]
   18adc:	3328      	adds	r3, #40	; 0x28
   18ade:	b2db      	uxtb	r3, r3
   18ae0:	001d      	movs	r5, r3
   18ae2:	6a3b      	ldr	r3, [r7, #32]
   18ae4:	0018      	movs	r0, r3
   18ae6:	4ba4      	ldr	r3, [pc, #656]	; (18d78 <xQueueReceive+0x354>)
   18ae8:	4798      	blx	r3
   18aea:	0003      	movs	r3, r0
   18aec:	001a      	movs	r2, r3
   18aee:	4ba3      	ldr	r3, [pc, #652]	; (18d7c <xQueueReceive+0x358>)
   18af0:	5c9c      	ldrb	r4, [r3, r2]
   18af2:	6a3b      	ldr	r3, [r7, #32]
   18af4:	0018      	movs	r0, r3
   18af6:	4ba2      	ldr	r3, [pc, #648]	; (18d80 <xQueueReceive+0x35c>)
   18af8:	4798      	blx	r3
   18afa:	0003      	movs	r3, r0
   18afc:	b2db      	uxtb	r3, r3
   18afe:	001a      	movs	r2, r3
   18b00:	0021      	movs	r1, r4
   18b02:	0028      	movs	r0, r5
   18b04:	4b9f      	ldr	r3, [pc, #636]	; (18d84 <xQueueReceive+0x360>)
   18b06:	4798      	blx	r3
   18b08:	6a3b      	ldr	r3, [r7, #32]
   18b0a:	0018      	movs	r0, r3
   18b0c:	4b9a      	ldr	r3, [pc, #616]	; (18d78 <xQueueReceive+0x354>)
   18b0e:	4798      	blx	r3
   18b10:	0003      	movs	r3, r0
   18b12:	001a      	movs	r2, r3
   18b14:	4b99      	ldr	r3, [pc, #612]	; (18d7c <xQueueReceive+0x358>)
   18b16:	5c9c      	ldrb	r4, [r3, r2]
   18b18:	6a3b      	ldr	r3, [r7, #32]
   18b1a:	0018      	movs	r0, r3
   18b1c:	4b98      	ldr	r3, [pc, #608]	; (18d80 <xQueueReceive+0x35c>)
   18b1e:	4798      	blx	r3
   18b20:	0003      	movs	r3, r0
   18b22:	b2dd      	uxtb	r5, r3
   18b24:	6a3b      	ldr	r3, [r7, #32]
   18b26:	0018      	movs	r0, r3
   18b28:	4b93      	ldr	r3, [pc, #588]	; (18d78 <xQueueReceive+0x354>)
   18b2a:	4798      	blx	r3
   18b2c:	0003      	movs	r3, r0
   18b2e:	001a      	movs	r2, r3
   18b30:	4b92      	ldr	r3, [pc, #584]	; (18d7c <xQueueReceive+0x358>)
   18b32:	5c9b      	ldrb	r3, [r3, r2]
   18b34:	2b02      	cmp	r3, #2
   18b36:	d108      	bne.n	18b4a <xQueueReceive+0x126>
   18b38:	4b8b      	ldr	r3, [pc, #556]	; (18d68 <xQueueReceive+0x344>)
   18b3a:	4798      	blx	r3
   18b3c:	0003      	movs	r3, r0
   18b3e:	0018      	movs	r0, r3
   18b40:	4b91      	ldr	r3, [pc, #580]	; (18d88 <xQueueReceive+0x364>)
   18b42:	4798      	blx	r3
   18b44:	0003      	movs	r3, r0
   18b46:	b2db      	uxtb	r3, r3
   18b48:	e004      	b.n	18b54 <xQueueReceive+0x130>
   18b4a:	6a3b      	ldr	r3, [r7, #32]
   18b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18b4e:	b2db      	uxtb	r3, r3
   18b50:	3b01      	subs	r3, #1
   18b52:	b2db      	uxtb	r3, r3
   18b54:	001a      	movs	r2, r3
   18b56:	0029      	movs	r1, r5
   18b58:	0020      	movs	r0, r4
   18b5a:	4b8c      	ldr	r3, [pc, #560]	; (18d8c <xQueueReceive+0x368>)
   18b5c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   18b5e:	69fb      	ldr	r3, [r7, #28]
   18b60:	1e5a      	subs	r2, r3, #1
   18b62:	6a3b      	ldr	r3, [r7, #32]
   18b64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   18b66:	6a3b      	ldr	r3, [r7, #32]
   18b68:	691b      	ldr	r3, [r3, #16]
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d008      	beq.n	18b80 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   18b6e:	6a3b      	ldr	r3, [r7, #32]
   18b70:	3310      	adds	r3, #16
   18b72:	0018      	movs	r0, r3
   18b74:	4b86      	ldr	r3, [pc, #536]	; (18d90 <xQueueReceive+0x36c>)
   18b76:	4798      	blx	r3
   18b78:	1e03      	subs	r3, r0, #0
   18b7a:	d001      	beq.n	18b80 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   18b7c:	4b85      	ldr	r3, [pc, #532]	; (18d94 <xQueueReceive+0x370>)
   18b7e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   18b80:	4b85      	ldr	r3, [pc, #532]	; (18d98 <xQueueReceive+0x374>)
   18b82:	4798      	blx	r3
				return pdPASS;
   18b84:	2301      	movs	r3, #1
   18b86:	e15f      	b.n	18e48 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   18b88:	687b      	ldr	r3, [r7, #4]
   18b8a:	2b00      	cmp	r3, #0
   18b8c:	d13b      	bne.n	18c06 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   18b8e:	4b82      	ldr	r3, [pc, #520]	; (18d98 <xQueueReceive+0x374>)
   18b90:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   18b92:	4b75      	ldr	r3, [pc, #468]	; (18d68 <xQueueReceive+0x344>)
   18b94:	4798      	blx	r3
   18b96:	0003      	movs	r3, r0
   18b98:	0018      	movs	r0, r3
   18b9a:	4b74      	ldr	r3, [pc, #464]	; (18d6c <xQueueReceive+0x348>)
   18b9c:	4798      	blx	r3
   18b9e:	0003      	movs	r3, r0
   18ba0:	001a      	movs	r2, r3
   18ba2:	4b73      	ldr	r3, [pc, #460]	; (18d70 <xQueueReceive+0x34c>)
   18ba4:	881b      	ldrh	r3, [r3, #0]
   18ba6:	4013      	ands	r3, r2
   18ba8:	b29b      	uxth	r3, r3
   18baa:	2b00      	cmp	r3, #0
   18bac:	d029      	beq.n	18c02 <xQueueReceive+0x1de>
   18bae:	6a3b      	ldr	r3, [r7, #32]
   18bb0:	0018      	movs	r0, r3
   18bb2:	4b70      	ldr	r3, [pc, #448]	; (18d74 <xQueueReceive+0x350>)
   18bb4:	4798      	blx	r3
   18bb6:	0003      	movs	r3, r0
   18bb8:	001a      	movs	r2, r3
   18bba:	4b6d      	ldr	r3, [pc, #436]	; (18d70 <xQueueReceive+0x34c>)
   18bbc:	881b      	ldrh	r3, [r3, #0]
   18bbe:	4013      	ands	r3, r2
   18bc0:	b29b      	uxth	r3, r3
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d01d      	beq.n	18c02 <xQueueReceive+0x1de>
   18bc6:	6a3b      	ldr	r3, [r7, #32]
   18bc8:	0018      	movs	r0, r3
   18bca:	4b6b      	ldr	r3, [pc, #428]	; (18d78 <xQueueReceive+0x354>)
   18bcc:	4798      	blx	r3
   18bce:	0003      	movs	r3, r0
   18bd0:	001a      	movs	r2, r3
   18bd2:	4b6a      	ldr	r3, [pc, #424]	; (18d7c <xQueueReceive+0x358>)
   18bd4:	5c9b      	ldrb	r3, [r3, r2]
   18bd6:	3350      	adds	r3, #80	; 0x50
   18bd8:	b2db      	uxtb	r3, r3
   18bda:	001d      	movs	r5, r3
   18bdc:	6a3b      	ldr	r3, [r7, #32]
   18bde:	0018      	movs	r0, r3
   18be0:	4b65      	ldr	r3, [pc, #404]	; (18d78 <xQueueReceive+0x354>)
   18be2:	4798      	blx	r3
   18be4:	0003      	movs	r3, r0
   18be6:	001a      	movs	r2, r3
   18be8:	4b64      	ldr	r3, [pc, #400]	; (18d7c <xQueueReceive+0x358>)
   18bea:	5c9c      	ldrb	r4, [r3, r2]
   18bec:	6a3b      	ldr	r3, [r7, #32]
   18bee:	0018      	movs	r0, r3
   18bf0:	4b63      	ldr	r3, [pc, #396]	; (18d80 <xQueueReceive+0x35c>)
   18bf2:	4798      	blx	r3
   18bf4:	0003      	movs	r3, r0
   18bf6:	b2db      	uxtb	r3, r3
   18bf8:	001a      	movs	r2, r3
   18bfa:	0021      	movs	r1, r4
   18bfc:	0028      	movs	r0, r5
   18bfe:	4b61      	ldr	r3, [pc, #388]	; (18d84 <xQueueReceive+0x360>)
   18c00:	4798      	blx	r3
					return errQUEUE_EMPTY;
   18c02:	2300      	movs	r3, #0
   18c04:	e120      	b.n	18e48 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   18c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18c08:	2b00      	cmp	r3, #0
   18c0a:	d106      	bne.n	18c1a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   18c0c:	2314      	movs	r3, #20
   18c0e:	18fb      	adds	r3, r7, r3
   18c10:	0018      	movs	r0, r3
   18c12:	4b62      	ldr	r3, [pc, #392]	; (18d9c <xQueueReceive+0x378>)
   18c14:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   18c16:	2301      	movs	r3, #1
   18c18:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   18c1a:	4b5f      	ldr	r3, [pc, #380]	; (18d98 <xQueueReceive+0x374>)
   18c1c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   18c1e:	4b60      	ldr	r3, [pc, #384]	; (18da0 <xQueueReceive+0x37c>)
   18c20:	4798      	blx	r3
		prvLockQueue( pxQueue );
   18c22:	4b4f      	ldr	r3, [pc, #316]	; (18d60 <xQueueReceive+0x33c>)
   18c24:	4798      	blx	r3
   18c26:	6a3b      	ldr	r3, [r7, #32]
   18c28:	2244      	movs	r2, #68	; 0x44
   18c2a:	5c9b      	ldrb	r3, [r3, r2]
   18c2c:	b25b      	sxtb	r3, r3
   18c2e:	3301      	adds	r3, #1
   18c30:	d103      	bne.n	18c3a <xQueueReceive+0x216>
   18c32:	6a3b      	ldr	r3, [r7, #32]
   18c34:	2244      	movs	r2, #68	; 0x44
   18c36:	2100      	movs	r1, #0
   18c38:	5499      	strb	r1, [r3, r2]
   18c3a:	6a3b      	ldr	r3, [r7, #32]
   18c3c:	2245      	movs	r2, #69	; 0x45
   18c3e:	5c9b      	ldrb	r3, [r3, r2]
   18c40:	b25b      	sxtb	r3, r3
   18c42:	3301      	adds	r3, #1
   18c44:	d103      	bne.n	18c4e <xQueueReceive+0x22a>
   18c46:	6a3b      	ldr	r3, [r7, #32]
   18c48:	2245      	movs	r2, #69	; 0x45
   18c4a:	2100      	movs	r1, #0
   18c4c:	5499      	strb	r1, [r3, r2]
   18c4e:	4b52      	ldr	r3, [pc, #328]	; (18d98 <xQueueReceive+0x374>)
   18c50:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   18c52:	1d3a      	adds	r2, r7, #4
   18c54:	2314      	movs	r3, #20
   18c56:	18fb      	adds	r3, r7, r3
   18c58:	0011      	movs	r1, r2
   18c5a:	0018      	movs	r0, r3
   18c5c:	4b51      	ldr	r3, [pc, #324]	; (18da4 <xQueueReceive+0x380>)
   18c5e:	4798      	blx	r3
   18c60:	1e03      	subs	r3, r0, #0
   18c62:	d000      	beq.n	18c66 <xQueueReceive+0x242>
   18c64:	e0aa      	b.n	18dbc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   18c66:	6a3b      	ldr	r3, [r7, #32]
   18c68:	0018      	movs	r0, r3
   18c6a:	4b4f      	ldr	r3, [pc, #316]	; (18da8 <xQueueReceive+0x384>)
   18c6c:	4798      	blx	r3
   18c6e:	1e03      	subs	r3, r0, #0
   18c70:	d06d      	beq.n	18d4e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   18c72:	4b3d      	ldr	r3, [pc, #244]	; (18d68 <xQueueReceive+0x344>)
   18c74:	4798      	blx	r3
   18c76:	0003      	movs	r3, r0
   18c78:	0018      	movs	r0, r3
   18c7a:	4b3c      	ldr	r3, [pc, #240]	; (18d6c <xQueueReceive+0x348>)
   18c7c:	4798      	blx	r3
   18c7e:	0003      	movs	r3, r0
   18c80:	001a      	movs	r2, r3
   18c82:	4b3b      	ldr	r3, [pc, #236]	; (18d70 <xQueueReceive+0x34c>)
   18c84:	881b      	ldrh	r3, [r3, #0]
   18c86:	4013      	ands	r3, r2
   18c88:	b29b      	uxth	r3, r3
   18c8a:	2b00      	cmp	r3, #0
   18c8c:	d029      	beq.n	18ce2 <xQueueReceive+0x2be>
   18c8e:	6a3b      	ldr	r3, [r7, #32]
   18c90:	0018      	movs	r0, r3
   18c92:	4b38      	ldr	r3, [pc, #224]	; (18d74 <xQueueReceive+0x350>)
   18c94:	4798      	blx	r3
   18c96:	0003      	movs	r3, r0
   18c98:	001a      	movs	r2, r3
   18c9a:	4b35      	ldr	r3, [pc, #212]	; (18d70 <xQueueReceive+0x34c>)
   18c9c:	881b      	ldrh	r3, [r3, #0]
   18c9e:	4013      	ands	r3, r2
   18ca0:	b29b      	uxth	r3, r3
   18ca2:	2b00      	cmp	r3, #0
   18ca4:	d01d      	beq.n	18ce2 <xQueueReceive+0x2be>
   18ca6:	6a3b      	ldr	r3, [r7, #32]
   18ca8:	0018      	movs	r0, r3
   18caa:	4b33      	ldr	r3, [pc, #204]	; (18d78 <xQueueReceive+0x354>)
   18cac:	4798      	blx	r3
   18cae:	0003      	movs	r3, r0
   18cb0:	001a      	movs	r2, r3
   18cb2:	4b32      	ldr	r3, [pc, #200]	; (18d7c <xQueueReceive+0x358>)
   18cb4:	5c9b      	ldrb	r3, [r3, r2]
   18cb6:	3368      	adds	r3, #104	; 0x68
   18cb8:	b2db      	uxtb	r3, r3
   18cba:	001d      	movs	r5, r3
   18cbc:	6a3b      	ldr	r3, [r7, #32]
   18cbe:	0018      	movs	r0, r3
   18cc0:	4b2d      	ldr	r3, [pc, #180]	; (18d78 <xQueueReceive+0x354>)
   18cc2:	4798      	blx	r3
   18cc4:	0003      	movs	r3, r0
   18cc6:	001a      	movs	r2, r3
   18cc8:	4b2c      	ldr	r3, [pc, #176]	; (18d7c <xQueueReceive+0x358>)
   18cca:	5c9c      	ldrb	r4, [r3, r2]
   18ccc:	6a3b      	ldr	r3, [r7, #32]
   18cce:	0018      	movs	r0, r3
   18cd0:	4b2b      	ldr	r3, [pc, #172]	; (18d80 <xQueueReceive+0x35c>)
   18cd2:	4798      	blx	r3
   18cd4:	0003      	movs	r3, r0
   18cd6:	b2db      	uxtb	r3, r3
   18cd8:	001a      	movs	r2, r3
   18cda:	0021      	movs	r1, r4
   18cdc:	0028      	movs	r0, r5
   18cde:	4b29      	ldr	r3, [pc, #164]	; (18d84 <xQueueReceive+0x360>)
   18ce0:	4798      	blx	r3
   18ce2:	6a3b      	ldr	r3, [r7, #32]
   18ce4:	0018      	movs	r0, r3
   18ce6:	4b24      	ldr	r3, [pc, #144]	; (18d78 <xQueueReceive+0x354>)
   18ce8:	4798      	blx	r3
   18cea:	0003      	movs	r3, r0
   18cec:	001a      	movs	r2, r3
   18cee:	4b23      	ldr	r3, [pc, #140]	; (18d7c <xQueueReceive+0x358>)
   18cf0:	5c9b      	ldrb	r3, [r3, r2]
   18cf2:	2b02      	cmp	r3, #2
   18cf4:	d018      	beq.n	18d28 <xQueueReceive+0x304>
   18cf6:	4b1c      	ldr	r3, [pc, #112]	; (18d68 <xQueueReceive+0x344>)
   18cf8:	4798      	blx	r3
   18cfa:	0003      	movs	r3, r0
   18cfc:	0018      	movs	r0, r3
   18cfe:	4b1b      	ldr	r3, [pc, #108]	; (18d6c <xQueueReceive+0x348>)
   18d00:	4798      	blx	r3
   18d02:	0003      	movs	r3, r0
   18d04:	001a      	movs	r2, r3
   18d06:	4b1a      	ldr	r3, [pc, #104]	; (18d70 <xQueueReceive+0x34c>)
   18d08:	881b      	ldrh	r3, [r3, #0]
   18d0a:	4013      	ands	r3, r2
   18d0c:	b29b      	uxth	r3, r3
   18d0e:	2b00      	cmp	r3, #0
   18d10:	d00a      	beq.n	18d28 <xQueueReceive+0x304>
   18d12:	4b15      	ldr	r3, [pc, #84]	; (18d68 <xQueueReceive+0x344>)
   18d14:	4798      	blx	r3
   18d16:	0003      	movs	r3, r0
   18d18:	0018      	movs	r0, r3
   18d1a:	4b1b      	ldr	r3, [pc, #108]	; (18d88 <xQueueReceive+0x364>)
   18d1c:	4798      	blx	r3
   18d1e:	0003      	movs	r3, r0
   18d20:	b2db      	uxtb	r3, r3
   18d22:	0018      	movs	r0, r3
   18d24:	4b21      	ldr	r3, [pc, #132]	; (18dac <xQueueReceive+0x388>)
   18d26:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   18d28:	6a3b      	ldr	r3, [r7, #32]
   18d2a:	3324      	adds	r3, #36	; 0x24
   18d2c:	687a      	ldr	r2, [r7, #4]
   18d2e:	0011      	movs	r1, r2
   18d30:	0018      	movs	r0, r3
   18d32:	4b1f      	ldr	r3, [pc, #124]	; (18db0 <xQueueReceive+0x38c>)
   18d34:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   18d36:	6a3b      	ldr	r3, [r7, #32]
   18d38:	0018      	movs	r0, r3
   18d3a:	4b1e      	ldr	r3, [pc, #120]	; (18db4 <xQueueReceive+0x390>)
   18d3c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   18d3e:	4b1e      	ldr	r3, [pc, #120]	; (18db8 <xQueueReceive+0x394>)
   18d40:	4798      	blx	r3
   18d42:	1e03      	subs	r3, r0, #0
   18d44:	d000      	beq.n	18d48 <xQueueReceive+0x324>
   18d46:	e698      	b.n	18a7a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   18d48:	4b12      	ldr	r3, [pc, #72]	; (18d94 <xQueueReceive+0x370>)
   18d4a:	4798      	blx	r3
   18d4c:	e695      	b.n	18a7a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   18d4e:	6a3b      	ldr	r3, [r7, #32]
   18d50:	0018      	movs	r0, r3
   18d52:	4b18      	ldr	r3, [pc, #96]	; (18db4 <xQueueReceive+0x390>)
   18d54:	4798      	blx	r3
				( void ) xTaskResumeAll();
   18d56:	4b18      	ldr	r3, [pc, #96]	; (18db8 <xQueueReceive+0x394>)
   18d58:	4798      	blx	r3
   18d5a:	e68e      	b.n	18a7a <xQueueReceive+0x56>
   18d5c:	0001a8b5 	.word	0x0001a8b5
   18d60:	00017bd9 	.word	0x00017bd9
   18d64:	00019485 	.word	0x00019485
   18d68:	00015e75 	.word	0x00015e75
   18d6c:	00015bd9 	.word	0x00015bd9
   18d70:	20000038 	.word	0x20000038
   18d74:	00015c99 	.word	0x00015c99
   18d78:	00015b99 	.word	0x00015b99
   18d7c:	2000002c 	.word	0x2000002c
   18d80:	00015c79 	.word	0x00015c79
   18d84:	000165d1 	.word	0x000165d1
   18d88:	00015bb9 	.word	0x00015bb9
   18d8c:	00016c2d 	.word	0x00016c2d
   18d90:	0001a469 	.word	0x0001a469
   18d94:	00017bc1 	.word	0x00017bc1
   18d98:	00017bfd 	.word	0x00017bfd
   18d9c:	0001a565 	.word	0x0001a565
   18da0:	00019e91 	.word	0x00019e91
   18da4:	0001a58d 	.word	0x0001a58d
   18da8:	000195c5 	.word	0x000195c5
   18dac:	00016d69 	.word	0x00016d69
   18db0:	0001a345 	.word	0x0001a345
   18db4:	000194d5 	.word	0x000194d5
   18db8:	00019ea9 	.word	0x00019ea9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   18dbc:	6a3b      	ldr	r3, [r7, #32]
   18dbe:	0018      	movs	r0, r3
   18dc0:	4b23      	ldr	r3, [pc, #140]	; (18e50 <xQueueReceive+0x42c>)
   18dc2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   18dc4:	4b23      	ldr	r3, [pc, #140]	; (18e54 <xQueueReceive+0x430>)
   18dc6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   18dc8:	6a3b      	ldr	r3, [r7, #32]
   18dca:	0018      	movs	r0, r3
   18dcc:	4b22      	ldr	r3, [pc, #136]	; (18e58 <xQueueReceive+0x434>)
   18dce:	4798      	blx	r3
   18dd0:	1e03      	subs	r3, r0, #0
   18dd2:	d100      	bne.n	18dd6 <xQueueReceive+0x3b2>
   18dd4:	e651      	b.n	18a7a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   18dd6:	4b21      	ldr	r3, [pc, #132]	; (18e5c <xQueueReceive+0x438>)
   18dd8:	4798      	blx	r3
   18dda:	0003      	movs	r3, r0
   18ddc:	0018      	movs	r0, r3
   18dde:	4b20      	ldr	r3, [pc, #128]	; (18e60 <xQueueReceive+0x43c>)
   18de0:	4798      	blx	r3
   18de2:	0003      	movs	r3, r0
   18de4:	001a      	movs	r2, r3
   18de6:	4b1f      	ldr	r3, [pc, #124]	; (18e64 <xQueueReceive+0x440>)
   18de8:	881b      	ldrh	r3, [r3, #0]
   18dea:	4013      	ands	r3, r2
   18dec:	b29b      	uxth	r3, r3
   18dee:	2b00      	cmp	r3, #0
   18df0:	d029      	beq.n	18e46 <xQueueReceive+0x422>
   18df2:	6a3b      	ldr	r3, [r7, #32]
   18df4:	0018      	movs	r0, r3
   18df6:	4b1c      	ldr	r3, [pc, #112]	; (18e68 <xQueueReceive+0x444>)
   18df8:	4798      	blx	r3
   18dfa:	0003      	movs	r3, r0
   18dfc:	001a      	movs	r2, r3
   18dfe:	4b19      	ldr	r3, [pc, #100]	; (18e64 <xQueueReceive+0x440>)
   18e00:	881b      	ldrh	r3, [r3, #0]
   18e02:	4013      	ands	r3, r2
   18e04:	b29b      	uxth	r3, r3
   18e06:	2b00      	cmp	r3, #0
   18e08:	d01d      	beq.n	18e46 <xQueueReceive+0x422>
   18e0a:	6a3b      	ldr	r3, [r7, #32]
   18e0c:	0018      	movs	r0, r3
   18e0e:	4b17      	ldr	r3, [pc, #92]	; (18e6c <xQueueReceive+0x448>)
   18e10:	4798      	blx	r3
   18e12:	0003      	movs	r3, r0
   18e14:	001a      	movs	r2, r3
   18e16:	4b16      	ldr	r3, [pc, #88]	; (18e70 <xQueueReceive+0x44c>)
   18e18:	5c9b      	ldrb	r3, [r3, r2]
   18e1a:	3350      	adds	r3, #80	; 0x50
   18e1c:	b2db      	uxtb	r3, r3
   18e1e:	001d      	movs	r5, r3
   18e20:	6a3b      	ldr	r3, [r7, #32]
   18e22:	0018      	movs	r0, r3
   18e24:	4b11      	ldr	r3, [pc, #68]	; (18e6c <xQueueReceive+0x448>)
   18e26:	4798      	blx	r3
   18e28:	0003      	movs	r3, r0
   18e2a:	001a      	movs	r2, r3
   18e2c:	4b10      	ldr	r3, [pc, #64]	; (18e70 <xQueueReceive+0x44c>)
   18e2e:	5c9c      	ldrb	r4, [r3, r2]
   18e30:	6a3b      	ldr	r3, [r7, #32]
   18e32:	0018      	movs	r0, r3
   18e34:	4b0f      	ldr	r3, [pc, #60]	; (18e74 <xQueueReceive+0x450>)
   18e36:	4798      	blx	r3
   18e38:	0003      	movs	r3, r0
   18e3a:	b2db      	uxtb	r3, r3
   18e3c:	001a      	movs	r2, r3
   18e3e:	0021      	movs	r1, r4
   18e40:	0028      	movs	r0, r5
   18e42:	4b0d      	ldr	r3, [pc, #52]	; (18e78 <xQueueReceive+0x454>)
   18e44:	4798      	blx	r3
				return errQUEUE_EMPTY;
   18e46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   18e48:	0018      	movs	r0, r3
   18e4a:	46bd      	mov	sp, r7
   18e4c:	b00a      	add	sp, #40	; 0x28
   18e4e:	bdb0      	pop	{r4, r5, r7, pc}
   18e50:	000194d5 	.word	0x000194d5
   18e54:	00019ea9 	.word	0x00019ea9
   18e58:	000195c5 	.word	0x000195c5
   18e5c:	00015e75 	.word	0x00015e75
   18e60:	00015bd9 	.word	0x00015bd9
   18e64:	20000038 	.word	0x20000038
   18e68:	00015c99 	.word	0x00015c99
   18e6c:	00015b99 	.word	0x00015b99
   18e70:	2000002c 	.word	0x2000002c
   18e74:	00015c79 	.word	0x00015c79
   18e78:	000165d1 	.word	0x000165d1

00018e7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   18e7c:	b5b0      	push	{r4, r5, r7, lr}
   18e7e:	b08a      	sub	sp, #40	; 0x28
   18e80:	af00      	add	r7, sp, #0
   18e82:	6078      	str	r0, [r7, #4]
   18e84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   18e86:	2300      	movs	r3, #0
   18e88:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18e8a:	687b      	ldr	r3, [r7, #4]
   18e8c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   18e8e:	2300      	movs	r3, #0
   18e90:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   18e92:	69fb      	ldr	r3, [r7, #28]
   18e94:	2b00      	cmp	r3, #0
   18e96:	d101      	bne.n	18e9c <xQueueSemaphoreTake+0x20>
   18e98:	b672      	cpsid	i
   18e9a:	e7fe      	b.n	18e9a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   18e9c:	69fb      	ldr	r3, [r7, #28]
   18e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18ea0:	2b00      	cmp	r3, #0
   18ea2:	d001      	beq.n	18ea8 <xQueueSemaphoreTake+0x2c>
   18ea4:	b672      	cpsid	i
   18ea6:	e7fe      	b.n	18ea6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   18ea8:	4bcb      	ldr	r3, [pc, #812]	; (191d8 <xQueueSemaphoreTake+0x35c>)
   18eaa:	4798      	blx	r3
   18eac:	1e03      	subs	r3, r0, #0
   18eae:	d102      	bne.n	18eb6 <xQueueSemaphoreTake+0x3a>
   18eb0:	683b      	ldr	r3, [r7, #0]
   18eb2:	2b00      	cmp	r3, #0
   18eb4:	d101      	bne.n	18eba <xQueueSemaphoreTake+0x3e>
   18eb6:	2301      	movs	r3, #1
   18eb8:	e000      	b.n	18ebc <xQueueSemaphoreTake+0x40>
   18eba:	2300      	movs	r3, #0
   18ebc:	2b00      	cmp	r3, #0
   18ebe:	d101      	bne.n	18ec4 <xQueueSemaphoreTake+0x48>
   18ec0:	b672      	cpsid	i
   18ec2:	e7fe      	b.n	18ec2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   18ec4:	4bc5      	ldr	r3, [pc, #788]	; (191dc <xQueueSemaphoreTake+0x360>)
   18ec6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   18ec8:	69fb      	ldr	r3, [r7, #28]
   18eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18ecc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   18ece:	69bb      	ldr	r3, [r7, #24]
   18ed0:	2b00      	cmp	r3, #0
   18ed2:	d100      	bne.n	18ed6 <xQueueSemaphoreTake+0x5a>
   18ed4:	e080      	b.n	18fd8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   18ed6:	4bc2      	ldr	r3, [pc, #776]	; (191e0 <xQueueSemaphoreTake+0x364>)
   18ed8:	4798      	blx	r3
   18eda:	0003      	movs	r3, r0
   18edc:	0018      	movs	r0, r3
   18ede:	4bc1      	ldr	r3, [pc, #772]	; (191e4 <xQueueSemaphoreTake+0x368>)
   18ee0:	4798      	blx	r3
   18ee2:	0003      	movs	r3, r0
   18ee4:	001a      	movs	r2, r3
   18ee6:	4bc0      	ldr	r3, [pc, #768]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   18ee8:	881b      	ldrh	r3, [r3, #0]
   18eea:	4013      	ands	r3, r2
   18eec:	b29b      	uxth	r3, r3
   18eee:	2b00      	cmp	r3, #0
   18ef0:	d029      	beq.n	18f46 <xQueueSemaphoreTake+0xca>
   18ef2:	69fb      	ldr	r3, [r7, #28]
   18ef4:	0018      	movs	r0, r3
   18ef6:	4bbd      	ldr	r3, [pc, #756]	; (191ec <xQueueSemaphoreTake+0x370>)
   18ef8:	4798      	blx	r3
   18efa:	0003      	movs	r3, r0
   18efc:	001a      	movs	r2, r3
   18efe:	4bba      	ldr	r3, [pc, #744]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   18f00:	881b      	ldrh	r3, [r3, #0]
   18f02:	4013      	ands	r3, r2
   18f04:	b29b      	uxth	r3, r3
   18f06:	2b00      	cmp	r3, #0
   18f08:	d01d      	beq.n	18f46 <xQueueSemaphoreTake+0xca>
   18f0a:	69fb      	ldr	r3, [r7, #28]
   18f0c:	0018      	movs	r0, r3
   18f0e:	4bb8      	ldr	r3, [pc, #736]	; (191f0 <xQueueSemaphoreTake+0x374>)
   18f10:	4798      	blx	r3
   18f12:	0003      	movs	r3, r0
   18f14:	001a      	movs	r2, r3
   18f16:	4bb7      	ldr	r3, [pc, #732]	; (191f4 <xQueueSemaphoreTake+0x378>)
   18f18:	5c9b      	ldrb	r3, [r3, r2]
   18f1a:	3328      	adds	r3, #40	; 0x28
   18f1c:	b2db      	uxtb	r3, r3
   18f1e:	001d      	movs	r5, r3
   18f20:	69fb      	ldr	r3, [r7, #28]
   18f22:	0018      	movs	r0, r3
   18f24:	4bb2      	ldr	r3, [pc, #712]	; (191f0 <xQueueSemaphoreTake+0x374>)
   18f26:	4798      	blx	r3
   18f28:	0003      	movs	r3, r0
   18f2a:	001a      	movs	r2, r3
   18f2c:	4bb1      	ldr	r3, [pc, #708]	; (191f4 <xQueueSemaphoreTake+0x378>)
   18f2e:	5c9c      	ldrb	r4, [r3, r2]
   18f30:	69fb      	ldr	r3, [r7, #28]
   18f32:	0018      	movs	r0, r3
   18f34:	4bb0      	ldr	r3, [pc, #704]	; (191f8 <xQueueSemaphoreTake+0x37c>)
   18f36:	4798      	blx	r3
   18f38:	0003      	movs	r3, r0
   18f3a:	b2db      	uxtb	r3, r3
   18f3c:	001a      	movs	r2, r3
   18f3e:	0021      	movs	r1, r4
   18f40:	0028      	movs	r0, r5
   18f42:	4bae      	ldr	r3, [pc, #696]	; (191fc <xQueueSemaphoreTake+0x380>)
   18f44:	4798      	blx	r3
   18f46:	69fb      	ldr	r3, [r7, #28]
   18f48:	0018      	movs	r0, r3
   18f4a:	4ba9      	ldr	r3, [pc, #676]	; (191f0 <xQueueSemaphoreTake+0x374>)
   18f4c:	4798      	blx	r3
   18f4e:	0003      	movs	r3, r0
   18f50:	001a      	movs	r2, r3
   18f52:	4ba8      	ldr	r3, [pc, #672]	; (191f4 <xQueueSemaphoreTake+0x378>)
   18f54:	5c9c      	ldrb	r4, [r3, r2]
   18f56:	69fb      	ldr	r3, [r7, #28]
   18f58:	0018      	movs	r0, r3
   18f5a:	4ba7      	ldr	r3, [pc, #668]	; (191f8 <xQueueSemaphoreTake+0x37c>)
   18f5c:	4798      	blx	r3
   18f5e:	0003      	movs	r3, r0
   18f60:	b2dd      	uxtb	r5, r3
   18f62:	69fb      	ldr	r3, [r7, #28]
   18f64:	0018      	movs	r0, r3
   18f66:	4ba2      	ldr	r3, [pc, #648]	; (191f0 <xQueueSemaphoreTake+0x374>)
   18f68:	4798      	blx	r3
   18f6a:	0003      	movs	r3, r0
   18f6c:	001a      	movs	r2, r3
   18f6e:	4ba1      	ldr	r3, [pc, #644]	; (191f4 <xQueueSemaphoreTake+0x378>)
   18f70:	5c9b      	ldrb	r3, [r3, r2]
   18f72:	2b02      	cmp	r3, #2
   18f74:	d108      	bne.n	18f88 <xQueueSemaphoreTake+0x10c>
   18f76:	4b9a      	ldr	r3, [pc, #616]	; (191e0 <xQueueSemaphoreTake+0x364>)
   18f78:	4798      	blx	r3
   18f7a:	0003      	movs	r3, r0
   18f7c:	0018      	movs	r0, r3
   18f7e:	4ba0      	ldr	r3, [pc, #640]	; (19200 <xQueueSemaphoreTake+0x384>)
   18f80:	4798      	blx	r3
   18f82:	0003      	movs	r3, r0
   18f84:	b2db      	uxtb	r3, r3
   18f86:	e004      	b.n	18f92 <xQueueSemaphoreTake+0x116>
   18f88:	69fb      	ldr	r3, [r7, #28]
   18f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18f8c:	b2db      	uxtb	r3, r3
   18f8e:	3b01      	subs	r3, #1
   18f90:	b2db      	uxtb	r3, r3
   18f92:	001a      	movs	r2, r3
   18f94:	0029      	movs	r1, r5
   18f96:	0020      	movs	r0, r4
   18f98:	4b9a      	ldr	r3, [pc, #616]	; (19204 <xQueueSemaphoreTake+0x388>)
   18f9a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   18f9c:	69bb      	ldr	r3, [r7, #24]
   18f9e:	1e5a      	subs	r2, r3, #1
   18fa0:	69fb      	ldr	r3, [r7, #28]
   18fa2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   18fa4:	69fb      	ldr	r3, [r7, #28]
   18fa6:	681b      	ldr	r3, [r3, #0]
   18fa8:	2b00      	cmp	r3, #0
   18faa:	d104      	bne.n	18fb6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   18fac:	4b96      	ldr	r3, [pc, #600]	; (19208 <xQueueSemaphoreTake+0x38c>)
   18fae:	4798      	blx	r3
   18fb0:	0002      	movs	r2, r0
   18fb2:	69fb      	ldr	r3, [r7, #28]
   18fb4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   18fb6:	69fb      	ldr	r3, [r7, #28]
   18fb8:	691b      	ldr	r3, [r3, #16]
   18fba:	2b00      	cmp	r3, #0
   18fbc:	d008      	beq.n	18fd0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   18fbe:	69fb      	ldr	r3, [r7, #28]
   18fc0:	3310      	adds	r3, #16
   18fc2:	0018      	movs	r0, r3
   18fc4:	4b91      	ldr	r3, [pc, #580]	; (1920c <xQueueSemaphoreTake+0x390>)
   18fc6:	4798      	blx	r3
   18fc8:	1e03      	subs	r3, r0, #0
   18fca:	d001      	beq.n	18fd0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   18fcc:	4b90      	ldr	r3, [pc, #576]	; (19210 <xQueueSemaphoreTake+0x394>)
   18fce:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   18fd0:	4b90      	ldr	r3, [pc, #576]	; (19214 <xQueueSemaphoreTake+0x398>)
   18fd2:	4798      	blx	r3
				return pdPASS;
   18fd4:	2301      	movs	r3, #1
   18fd6:	e18b      	b.n	192f0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   18fd8:	683b      	ldr	r3, [r7, #0]
   18fda:	2b00      	cmp	r3, #0
   18fdc:	d140      	bne.n	19060 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   18fde:	6a3b      	ldr	r3, [r7, #32]
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	d001      	beq.n	18fe8 <xQueueSemaphoreTake+0x16c>
   18fe4:	b672      	cpsid	i
   18fe6:	e7fe      	b.n	18fe6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   18fe8:	4b8a      	ldr	r3, [pc, #552]	; (19214 <xQueueSemaphoreTake+0x398>)
   18fea:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   18fec:	4b7c      	ldr	r3, [pc, #496]	; (191e0 <xQueueSemaphoreTake+0x364>)
   18fee:	4798      	blx	r3
   18ff0:	0003      	movs	r3, r0
   18ff2:	0018      	movs	r0, r3
   18ff4:	4b7b      	ldr	r3, [pc, #492]	; (191e4 <xQueueSemaphoreTake+0x368>)
   18ff6:	4798      	blx	r3
   18ff8:	0003      	movs	r3, r0
   18ffa:	001a      	movs	r2, r3
   18ffc:	4b7a      	ldr	r3, [pc, #488]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   18ffe:	881b      	ldrh	r3, [r3, #0]
   19000:	4013      	ands	r3, r2
   19002:	b29b      	uxth	r3, r3
   19004:	2b00      	cmp	r3, #0
   19006:	d029      	beq.n	1905c <xQueueSemaphoreTake+0x1e0>
   19008:	69fb      	ldr	r3, [r7, #28]
   1900a:	0018      	movs	r0, r3
   1900c:	4b77      	ldr	r3, [pc, #476]	; (191ec <xQueueSemaphoreTake+0x370>)
   1900e:	4798      	blx	r3
   19010:	0003      	movs	r3, r0
   19012:	001a      	movs	r2, r3
   19014:	4b74      	ldr	r3, [pc, #464]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   19016:	881b      	ldrh	r3, [r3, #0]
   19018:	4013      	ands	r3, r2
   1901a:	b29b      	uxth	r3, r3
   1901c:	2b00      	cmp	r3, #0
   1901e:	d01d      	beq.n	1905c <xQueueSemaphoreTake+0x1e0>
   19020:	69fb      	ldr	r3, [r7, #28]
   19022:	0018      	movs	r0, r3
   19024:	4b72      	ldr	r3, [pc, #456]	; (191f0 <xQueueSemaphoreTake+0x374>)
   19026:	4798      	blx	r3
   19028:	0003      	movs	r3, r0
   1902a:	001a      	movs	r2, r3
   1902c:	4b71      	ldr	r3, [pc, #452]	; (191f4 <xQueueSemaphoreTake+0x378>)
   1902e:	5c9b      	ldrb	r3, [r3, r2]
   19030:	3350      	adds	r3, #80	; 0x50
   19032:	b2db      	uxtb	r3, r3
   19034:	001d      	movs	r5, r3
   19036:	69fb      	ldr	r3, [r7, #28]
   19038:	0018      	movs	r0, r3
   1903a:	4b6d      	ldr	r3, [pc, #436]	; (191f0 <xQueueSemaphoreTake+0x374>)
   1903c:	4798      	blx	r3
   1903e:	0003      	movs	r3, r0
   19040:	001a      	movs	r2, r3
   19042:	4b6c      	ldr	r3, [pc, #432]	; (191f4 <xQueueSemaphoreTake+0x378>)
   19044:	5c9c      	ldrb	r4, [r3, r2]
   19046:	69fb      	ldr	r3, [r7, #28]
   19048:	0018      	movs	r0, r3
   1904a:	4b6b      	ldr	r3, [pc, #428]	; (191f8 <xQueueSemaphoreTake+0x37c>)
   1904c:	4798      	blx	r3
   1904e:	0003      	movs	r3, r0
   19050:	b2db      	uxtb	r3, r3
   19052:	001a      	movs	r2, r3
   19054:	0021      	movs	r1, r4
   19056:	0028      	movs	r0, r5
   19058:	4b68      	ldr	r3, [pc, #416]	; (191fc <xQueueSemaphoreTake+0x380>)
   1905a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1905c:	2300      	movs	r3, #0
   1905e:	e147      	b.n	192f0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   19060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19062:	2b00      	cmp	r3, #0
   19064:	d106      	bne.n	19074 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19066:	230c      	movs	r3, #12
   19068:	18fb      	adds	r3, r7, r3
   1906a:	0018      	movs	r0, r3
   1906c:	4b6a      	ldr	r3, [pc, #424]	; (19218 <xQueueSemaphoreTake+0x39c>)
   1906e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19070:	2301      	movs	r3, #1
   19072:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19074:	4b67      	ldr	r3, [pc, #412]	; (19214 <xQueueSemaphoreTake+0x398>)
   19076:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   19078:	4b68      	ldr	r3, [pc, #416]	; (1921c <xQueueSemaphoreTake+0x3a0>)
   1907a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1907c:	4b57      	ldr	r3, [pc, #348]	; (191dc <xQueueSemaphoreTake+0x360>)
   1907e:	4798      	blx	r3
   19080:	69fb      	ldr	r3, [r7, #28]
   19082:	2244      	movs	r2, #68	; 0x44
   19084:	5c9b      	ldrb	r3, [r3, r2]
   19086:	b25b      	sxtb	r3, r3
   19088:	3301      	adds	r3, #1
   1908a:	d103      	bne.n	19094 <xQueueSemaphoreTake+0x218>
   1908c:	69fb      	ldr	r3, [r7, #28]
   1908e:	2244      	movs	r2, #68	; 0x44
   19090:	2100      	movs	r1, #0
   19092:	5499      	strb	r1, [r3, r2]
   19094:	69fb      	ldr	r3, [r7, #28]
   19096:	2245      	movs	r2, #69	; 0x45
   19098:	5c9b      	ldrb	r3, [r3, r2]
   1909a:	b25b      	sxtb	r3, r3
   1909c:	3301      	adds	r3, #1
   1909e:	d103      	bne.n	190a8 <xQueueSemaphoreTake+0x22c>
   190a0:	69fb      	ldr	r3, [r7, #28]
   190a2:	2245      	movs	r2, #69	; 0x45
   190a4:	2100      	movs	r1, #0
   190a6:	5499      	strb	r1, [r3, r2]
   190a8:	4b5a      	ldr	r3, [pc, #360]	; (19214 <xQueueSemaphoreTake+0x398>)
   190aa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   190ac:	003a      	movs	r2, r7
   190ae:	230c      	movs	r3, #12
   190b0:	18fb      	adds	r3, r7, r3
   190b2:	0011      	movs	r1, r2
   190b4:	0018      	movs	r0, r3
   190b6:	4b5a      	ldr	r3, [pc, #360]	; (19220 <xQueueSemaphoreTake+0x3a4>)
   190b8:	4798      	blx	r3
   190ba:	1e03      	subs	r3, r0, #0
   190bc:	d000      	beq.n	190c0 <xQueueSemaphoreTake+0x244>
   190be:	e0bd      	b.n	1923c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   190c0:	69fb      	ldr	r3, [r7, #28]
   190c2:	0018      	movs	r0, r3
   190c4:	4b57      	ldr	r3, [pc, #348]	; (19224 <xQueueSemaphoreTake+0x3a8>)
   190c6:	4798      	blx	r3
   190c8:	1e03      	subs	r3, r0, #0
   190ca:	d100      	bne.n	190ce <xQueueSemaphoreTake+0x252>
   190cc:	e07c      	b.n	191c8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   190ce:	4b44      	ldr	r3, [pc, #272]	; (191e0 <xQueueSemaphoreTake+0x364>)
   190d0:	4798      	blx	r3
   190d2:	0003      	movs	r3, r0
   190d4:	0018      	movs	r0, r3
   190d6:	4b43      	ldr	r3, [pc, #268]	; (191e4 <xQueueSemaphoreTake+0x368>)
   190d8:	4798      	blx	r3
   190da:	0003      	movs	r3, r0
   190dc:	001a      	movs	r2, r3
   190de:	4b42      	ldr	r3, [pc, #264]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   190e0:	881b      	ldrh	r3, [r3, #0]
   190e2:	4013      	ands	r3, r2
   190e4:	b29b      	uxth	r3, r3
   190e6:	2b00      	cmp	r3, #0
   190e8:	d029      	beq.n	1913e <xQueueSemaphoreTake+0x2c2>
   190ea:	69fb      	ldr	r3, [r7, #28]
   190ec:	0018      	movs	r0, r3
   190ee:	4b3f      	ldr	r3, [pc, #252]	; (191ec <xQueueSemaphoreTake+0x370>)
   190f0:	4798      	blx	r3
   190f2:	0003      	movs	r3, r0
   190f4:	001a      	movs	r2, r3
   190f6:	4b3c      	ldr	r3, [pc, #240]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   190f8:	881b      	ldrh	r3, [r3, #0]
   190fa:	4013      	ands	r3, r2
   190fc:	b29b      	uxth	r3, r3
   190fe:	2b00      	cmp	r3, #0
   19100:	d01d      	beq.n	1913e <xQueueSemaphoreTake+0x2c2>
   19102:	69fb      	ldr	r3, [r7, #28]
   19104:	0018      	movs	r0, r3
   19106:	4b3a      	ldr	r3, [pc, #232]	; (191f0 <xQueueSemaphoreTake+0x374>)
   19108:	4798      	blx	r3
   1910a:	0003      	movs	r3, r0
   1910c:	001a      	movs	r2, r3
   1910e:	4b39      	ldr	r3, [pc, #228]	; (191f4 <xQueueSemaphoreTake+0x378>)
   19110:	5c9b      	ldrb	r3, [r3, r2]
   19112:	3368      	adds	r3, #104	; 0x68
   19114:	b2db      	uxtb	r3, r3
   19116:	001d      	movs	r5, r3
   19118:	69fb      	ldr	r3, [r7, #28]
   1911a:	0018      	movs	r0, r3
   1911c:	4b34      	ldr	r3, [pc, #208]	; (191f0 <xQueueSemaphoreTake+0x374>)
   1911e:	4798      	blx	r3
   19120:	0003      	movs	r3, r0
   19122:	001a      	movs	r2, r3
   19124:	4b33      	ldr	r3, [pc, #204]	; (191f4 <xQueueSemaphoreTake+0x378>)
   19126:	5c9c      	ldrb	r4, [r3, r2]
   19128:	69fb      	ldr	r3, [r7, #28]
   1912a:	0018      	movs	r0, r3
   1912c:	4b32      	ldr	r3, [pc, #200]	; (191f8 <xQueueSemaphoreTake+0x37c>)
   1912e:	4798      	blx	r3
   19130:	0003      	movs	r3, r0
   19132:	b2db      	uxtb	r3, r3
   19134:	001a      	movs	r2, r3
   19136:	0021      	movs	r1, r4
   19138:	0028      	movs	r0, r5
   1913a:	4b30      	ldr	r3, [pc, #192]	; (191fc <xQueueSemaphoreTake+0x380>)
   1913c:	4798      	blx	r3
   1913e:	69fb      	ldr	r3, [r7, #28]
   19140:	0018      	movs	r0, r3
   19142:	4b2b      	ldr	r3, [pc, #172]	; (191f0 <xQueueSemaphoreTake+0x374>)
   19144:	4798      	blx	r3
   19146:	0003      	movs	r3, r0
   19148:	001a      	movs	r2, r3
   1914a:	4b2a      	ldr	r3, [pc, #168]	; (191f4 <xQueueSemaphoreTake+0x378>)
   1914c:	5c9b      	ldrb	r3, [r3, r2]
   1914e:	2b02      	cmp	r3, #2
   19150:	d018      	beq.n	19184 <xQueueSemaphoreTake+0x308>
   19152:	4b23      	ldr	r3, [pc, #140]	; (191e0 <xQueueSemaphoreTake+0x364>)
   19154:	4798      	blx	r3
   19156:	0003      	movs	r3, r0
   19158:	0018      	movs	r0, r3
   1915a:	4b22      	ldr	r3, [pc, #136]	; (191e4 <xQueueSemaphoreTake+0x368>)
   1915c:	4798      	blx	r3
   1915e:	0003      	movs	r3, r0
   19160:	001a      	movs	r2, r3
   19162:	4b21      	ldr	r3, [pc, #132]	; (191e8 <xQueueSemaphoreTake+0x36c>)
   19164:	881b      	ldrh	r3, [r3, #0]
   19166:	4013      	ands	r3, r2
   19168:	b29b      	uxth	r3, r3
   1916a:	2b00      	cmp	r3, #0
   1916c:	d00a      	beq.n	19184 <xQueueSemaphoreTake+0x308>
   1916e:	4b1c      	ldr	r3, [pc, #112]	; (191e0 <xQueueSemaphoreTake+0x364>)
   19170:	4798      	blx	r3
   19172:	0003      	movs	r3, r0
   19174:	0018      	movs	r0, r3
   19176:	4b22      	ldr	r3, [pc, #136]	; (19200 <xQueueSemaphoreTake+0x384>)
   19178:	4798      	blx	r3
   1917a:	0003      	movs	r3, r0
   1917c:	b2db      	uxtb	r3, r3
   1917e:	0018      	movs	r0, r3
   19180:	4b29      	ldr	r3, [pc, #164]	; (19228 <xQueueSemaphoreTake+0x3ac>)
   19182:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   19184:	69fb      	ldr	r3, [r7, #28]
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	2b00      	cmp	r3, #0
   1918a:	d10a      	bne.n	191a2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1918c:	4b13      	ldr	r3, [pc, #76]	; (191dc <xQueueSemaphoreTake+0x360>)
   1918e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   19190:	69fb      	ldr	r3, [r7, #28]
   19192:	685b      	ldr	r3, [r3, #4]
   19194:	0018      	movs	r0, r3
   19196:	4b25      	ldr	r3, [pc, #148]	; (1922c <xQueueSemaphoreTake+0x3b0>)
   19198:	4798      	blx	r3
   1919a:	0003      	movs	r3, r0
   1919c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1919e:	4b1d      	ldr	r3, [pc, #116]	; (19214 <xQueueSemaphoreTake+0x398>)
   191a0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   191a2:	69fb      	ldr	r3, [r7, #28]
   191a4:	3324      	adds	r3, #36	; 0x24
   191a6:	683a      	ldr	r2, [r7, #0]
   191a8:	0011      	movs	r1, r2
   191aa:	0018      	movs	r0, r3
   191ac:	4b20      	ldr	r3, [pc, #128]	; (19230 <xQueueSemaphoreTake+0x3b4>)
   191ae:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   191b0:	69fb      	ldr	r3, [r7, #28]
   191b2:	0018      	movs	r0, r3
   191b4:	4b1f      	ldr	r3, [pc, #124]	; (19234 <xQueueSemaphoreTake+0x3b8>)
   191b6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   191b8:	4b1f      	ldr	r3, [pc, #124]	; (19238 <xQueueSemaphoreTake+0x3bc>)
   191ba:	4798      	blx	r3
   191bc:	1e03      	subs	r3, r0, #0
   191be:	d000      	beq.n	191c2 <xQueueSemaphoreTake+0x346>
   191c0:	e680      	b.n	18ec4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   191c2:	4b13      	ldr	r3, [pc, #76]	; (19210 <xQueueSemaphoreTake+0x394>)
   191c4:	4798      	blx	r3
   191c6:	e67d      	b.n	18ec4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   191c8:	69fb      	ldr	r3, [r7, #28]
   191ca:	0018      	movs	r0, r3
   191cc:	4b19      	ldr	r3, [pc, #100]	; (19234 <xQueueSemaphoreTake+0x3b8>)
   191ce:	4798      	blx	r3
				( void ) xTaskResumeAll();
   191d0:	4b19      	ldr	r3, [pc, #100]	; (19238 <xQueueSemaphoreTake+0x3bc>)
   191d2:	4798      	blx	r3
   191d4:	e676      	b.n	18ec4 <xQueueSemaphoreTake+0x48>
   191d6:	46c0      	nop			; (mov r8, r8)
   191d8:	0001a8b5 	.word	0x0001a8b5
   191dc:	00017bd9 	.word	0x00017bd9
   191e0:	00015e75 	.word	0x00015e75
   191e4:	00015bd9 	.word	0x00015bd9
   191e8:	20000038 	.word	0x20000038
   191ec:	00015c99 	.word	0x00015c99
   191f0:	00015b99 	.word	0x00015b99
   191f4:	2000002c 	.word	0x2000002c
   191f8:	00015c79 	.word	0x00015c79
   191fc:	000165d1 	.word	0x000165d1
   19200:	00015bb9 	.word	0x00015bb9
   19204:	00016c2d 	.word	0x00016c2d
   19208:	0001ad81 	.word	0x0001ad81
   1920c:	0001a469 	.word	0x0001a469
   19210:	00017bc1 	.word	0x00017bc1
   19214:	00017bfd 	.word	0x00017bfd
   19218:	0001a565 	.word	0x0001a565
   1921c:	00019e91 	.word	0x00019e91
   19220:	0001a58d 	.word	0x0001a58d
   19224:	000195c5 	.word	0x000195c5
   19228:	00016d69 	.word	0x00016d69
   1922c:	0001a8ed 	.word	0x0001a8ed
   19230:	0001a345 	.word	0x0001a345
   19234:	000194d5 	.word	0x000194d5
   19238:	00019ea9 	.word	0x00019ea9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1923c:	69fb      	ldr	r3, [r7, #28]
   1923e:	0018      	movs	r0, r3
   19240:	4b2d      	ldr	r3, [pc, #180]	; (192f8 <xQueueSemaphoreTake+0x47c>)
   19242:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19244:	4b2d      	ldr	r3, [pc, #180]	; (192fc <xQueueSemaphoreTake+0x480>)
   19246:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19248:	69fb      	ldr	r3, [r7, #28]
   1924a:	0018      	movs	r0, r3
   1924c:	4b2c      	ldr	r3, [pc, #176]	; (19300 <xQueueSemaphoreTake+0x484>)
   1924e:	4798      	blx	r3
   19250:	1e03      	subs	r3, r0, #0
   19252:	d100      	bne.n	19256 <xQueueSemaphoreTake+0x3da>
   19254:	e636      	b.n	18ec4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   19256:	6a3b      	ldr	r3, [r7, #32]
   19258:	2b00      	cmp	r3, #0
   1925a:	d010      	beq.n	1927e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1925c:	4b29      	ldr	r3, [pc, #164]	; (19304 <xQueueSemaphoreTake+0x488>)
   1925e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   19260:	69fb      	ldr	r3, [r7, #28]
   19262:	0018      	movs	r0, r3
   19264:	4b28      	ldr	r3, [pc, #160]	; (19308 <xQueueSemaphoreTake+0x48c>)
   19266:	4798      	blx	r3
   19268:	0003      	movs	r3, r0
   1926a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1926c:	69fb      	ldr	r3, [r7, #28]
   1926e:	685b      	ldr	r3, [r3, #4]
   19270:	697a      	ldr	r2, [r7, #20]
   19272:	0011      	movs	r1, r2
   19274:	0018      	movs	r0, r3
   19276:	4b25      	ldr	r3, [pc, #148]	; (1930c <xQueueSemaphoreTake+0x490>)
   19278:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1927a:	4b25      	ldr	r3, [pc, #148]	; (19310 <xQueueSemaphoreTake+0x494>)
   1927c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1927e:	4b25      	ldr	r3, [pc, #148]	; (19314 <xQueueSemaphoreTake+0x498>)
   19280:	4798      	blx	r3
   19282:	0003      	movs	r3, r0
   19284:	0018      	movs	r0, r3
   19286:	4b24      	ldr	r3, [pc, #144]	; (19318 <xQueueSemaphoreTake+0x49c>)
   19288:	4798      	blx	r3
   1928a:	0003      	movs	r3, r0
   1928c:	001a      	movs	r2, r3
   1928e:	4b23      	ldr	r3, [pc, #140]	; (1931c <xQueueSemaphoreTake+0x4a0>)
   19290:	881b      	ldrh	r3, [r3, #0]
   19292:	4013      	ands	r3, r2
   19294:	b29b      	uxth	r3, r3
   19296:	2b00      	cmp	r3, #0
   19298:	d029      	beq.n	192ee <xQueueSemaphoreTake+0x472>
   1929a:	69fb      	ldr	r3, [r7, #28]
   1929c:	0018      	movs	r0, r3
   1929e:	4b20      	ldr	r3, [pc, #128]	; (19320 <xQueueSemaphoreTake+0x4a4>)
   192a0:	4798      	blx	r3
   192a2:	0003      	movs	r3, r0
   192a4:	001a      	movs	r2, r3
   192a6:	4b1d      	ldr	r3, [pc, #116]	; (1931c <xQueueSemaphoreTake+0x4a0>)
   192a8:	881b      	ldrh	r3, [r3, #0]
   192aa:	4013      	ands	r3, r2
   192ac:	b29b      	uxth	r3, r3
   192ae:	2b00      	cmp	r3, #0
   192b0:	d01d      	beq.n	192ee <xQueueSemaphoreTake+0x472>
   192b2:	69fb      	ldr	r3, [r7, #28]
   192b4:	0018      	movs	r0, r3
   192b6:	4b1b      	ldr	r3, [pc, #108]	; (19324 <xQueueSemaphoreTake+0x4a8>)
   192b8:	4798      	blx	r3
   192ba:	0003      	movs	r3, r0
   192bc:	001a      	movs	r2, r3
   192be:	4b1a      	ldr	r3, [pc, #104]	; (19328 <xQueueSemaphoreTake+0x4ac>)
   192c0:	5c9b      	ldrb	r3, [r3, r2]
   192c2:	3350      	adds	r3, #80	; 0x50
   192c4:	b2db      	uxtb	r3, r3
   192c6:	001d      	movs	r5, r3
   192c8:	69fb      	ldr	r3, [r7, #28]
   192ca:	0018      	movs	r0, r3
   192cc:	4b15      	ldr	r3, [pc, #84]	; (19324 <xQueueSemaphoreTake+0x4a8>)
   192ce:	4798      	blx	r3
   192d0:	0003      	movs	r3, r0
   192d2:	001a      	movs	r2, r3
   192d4:	4b14      	ldr	r3, [pc, #80]	; (19328 <xQueueSemaphoreTake+0x4ac>)
   192d6:	5c9c      	ldrb	r4, [r3, r2]
   192d8:	69fb      	ldr	r3, [r7, #28]
   192da:	0018      	movs	r0, r3
   192dc:	4b13      	ldr	r3, [pc, #76]	; (1932c <xQueueSemaphoreTake+0x4b0>)
   192de:	4798      	blx	r3
   192e0:	0003      	movs	r3, r0
   192e2:	b2db      	uxtb	r3, r3
   192e4:	001a      	movs	r2, r3
   192e6:	0021      	movs	r1, r4
   192e8:	0028      	movs	r0, r5
   192ea:	4b11      	ldr	r3, [pc, #68]	; (19330 <xQueueSemaphoreTake+0x4b4>)
   192ec:	4798      	blx	r3
				return errQUEUE_EMPTY;
   192ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   192f0:	0018      	movs	r0, r3
   192f2:	46bd      	mov	sp, r7
   192f4:	b00a      	add	sp, #40	; 0x28
   192f6:	bdb0      	pop	{r4, r5, r7, pc}
   192f8:	000194d5 	.word	0x000194d5
   192fc:	00019ea9 	.word	0x00019ea9
   19300:	000195c5 	.word	0x000195c5
   19304:	00017bd9 	.word	0x00017bd9
   19308:	00019377 	.word	0x00019377
   1930c:	0001abe5 	.word	0x0001abe5
   19310:	00017bfd 	.word	0x00017bfd
   19314:	00015e75 	.word	0x00015e75
   19318:	00015bd9 	.word	0x00015bd9
   1931c:	20000038 	.word	0x20000038
   19320:	00015c99 	.word	0x00015c99
   19324:	00015b99 	.word	0x00015b99
   19328:	2000002c 	.word	0x2000002c
   1932c:	00015c79 	.word	0x00015c79
   19330:	000165d1 	.word	0x000165d1

00019334 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   19334:	b580      	push	{r7, lr}
   19336:	b082      	sub	sp, #8
   19338:	af00      	add	r7, sp, #0
   1933a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1933c:	687b      	ldr	r3, [r7, #4]
   1933e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   19340:	0018      	movs	r0, r3
   19342:	46bd      	mov	sp, r7
   19344:	b002      	add	sp, #8
   19346:	bd80      	pop	{r7, pc}

00019348 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   19348:	b580      	push	{r7, lr}
   1934a:	b082      	sub	sp, #8
   1934c:	af00      	add	r7, sp, #0
   1934e:	6078      	str	r0, [r7, #4]
   19350:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   19352:	687b      	ldr	r3, [r7, #4]
   19354:	683a      	ldr	r2, [r7, #0]
   19356:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   19358:	46c0      	nop			; (mov r8, r8)
   1935a:	46bd      	mov	sp, r7
   1935c:	b002      	add	sp, #8
   1935e:	bd80      	pop	{r7, pc}

00019360 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   19360:	b580      	push	{r7, lr}
   19362:	b082      	sub	sp, #8
   19364:	af00      	add	r7, sp, #0
   19366:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	2250      	movs	r2, #80	; 0x50
   1936c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1936e:	0018      	movs	r0, r3
   19370:	46bd      	mov	sp, r7
   19372:	b002      	add	sp, #8
   19374:	bd80      	pop	{r7, pc}

00019376 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   19376:	b580      	push	{r7, lr}
   19378:	b084      	sub	sp, #16
   1937a:	af00      	add	r7, sp, #0
   1937c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1937e:	687b      	ldr	r3, [r7, #4]
   19380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19382:	2b00      	cmp	r3, #0
   19384:	d006      	beq.n	19394 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   19386:	687b      	ldr	r3, [r7, #4]
   19388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1938a:	681b      	ldr	r3, [r3, #0]
   1938c:	2205      	movs	r2, #5
   1938e:	1ad3      	subs	r3, r2, r3
   19390:	60fb      	str	r3, [r7, #12]
   19392:	e001      	b.n	19398 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   19394:	2300      	movs	r3, #0
   19396:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   19398:	68fb      	ldr	r3, [r7, #12]
	}
   1939a:	0018      	movs	r0, r3
   1939c:	46bd      	mov	sp, r7
   1939e:	b004      	add	sp, #16
   193a0:	bd80      	pop	{r7, pc}
	...

000193a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   193a4:	b580      	push	{r7, lr}
   193a6:	b086      	sub	sp, #24
   193a8:	af00      	add	r7, sp, #0
   193aa:	60f8      	str	r0, [r7, #12]
   193ac:	60b9      	str	r1, [r7, #8]
   193ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   193b0:	2300      	movs	r3, #0
   193b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   193b4:	68fb      	ldr	r3, [r7, #12]
   193b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   193b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   193ba:	68fb      	ldr	r3, [r7, #12]
   193bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   193be:	2b00      	cmp	r3, #0
   193c0:	d10e      	bne.n	193e0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   193c2:	68fb      	ldr	r3, [r7, #12]
   193c4:	681b      	ldr	r3, [r3, #0]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d14e      	bne.n	19468 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   193ca:	68fb      	ldr	r3, [r7, #12]
   193cc:	685b      	ldr	r3, [r3, #4]
   193ce:	0018      	movs	r0, r3
   193d0:	4b2a      	ldr	r3, [pc, #168]	; (1947c <prvCopyDataToQueue+0xd8>)
   193d2:	4798      	blx	r3
   193d4:	0003      	movs	r3, r0
   193d6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   193d8:	68fb      	ldr	r3, [r7, #12]
   193da:	2200      	movs	r2, #0
   193dc:	605a      	str	r2, [r3, #4]
   193de:	e043      	b.n	19468 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   193e0:	687b      	ldr	r3, [r7, #4]
   193e2:	2b00      	cmp	r3, #0
   193e4:	d119      	bne.n	1941a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   193e6:	68fb      	ldr	r3, [r7, #12]
   193e8:	6898      	ldr	r0, [r3, #8]
   193ea:	68fb      	ldr	r3, [r7, #12]
   193ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   193ee:	68bb      	ldr	r3, [r7, #8]
   193f0:	0019      	movs	r1, r3
   193f2:	4b23      	ldr	r3, [pc, #140]	; (19480 <prvCopyDataToQueue+0xdc>)
   193f4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   193f6:	68fb      	ldr	r3, [r7, #12]
   193f8:	689a      	ldr	r2, [r3, #8]
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   193fe:	18d2      	adds	r2, r2, r3
   19400:	68fb      	ldr	r3, [r7, #12]
   19402:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   19404:	68fb      	ldr	r3, [r7, #12]
   19406:	689a      	ldr	r2, [r3, #8]
   19408:	68fb      	ldr	r3, [r7, #12]
   1940a:	685b      	ldr	r3, [r3, #4]
   1940c:	429a      	cmp	r2, r3
   1940e:	d32b      	bcc.n	19468 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   19410:	68fb      	ldr	r3, [r7, #12]
   19412:	681a      	ldr	r2, [r3, #0]
   19414:	68fb      	ldr	r3, [r7, #12]
   19416:	609a      	str	r2, [r3, #8]
   19418:	e026      	b.n	19468 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1941a:	68fb      	ldr	r3, [r7, #12]
   1941c:	68d8      	ldr	r0, [r3, #12]
   1941e:	68fb      	ldr	r3, [r7, #12]
   19420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19422:	68bb      	ldr	r3, [r7, #8]
   19424:	0019      	movs	r1, r3
   19426:	4b16      	ldr	r3, [pc, #88]	; (19480 <prvCopyDataToQueue+0xdc>)
   19428:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1942a:	68fb      	ldr	r3, [r7, #12]
   1942c:	68da      	ldr	r2, [r3, #12]
   1942e:	68fb      	ldr	r3, [r7, #12]
   19430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19432:	425b      	negs	r3, r3
   19434:	18d2      	adds	r2, r2, r3
   19436:	68fb      	ldr	r3, [r7, #12]
   19438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1943a:	68fb      	ldr	r3, [r7, #12]
   1943c:	68da      	ldr	r2, [r3, #12]
   1943e:	68fb      	ldr	r3, [r7, #12]
   19440:	681b      	ldr	r3, [r3, #0]
   19442:	429a      	cmp	r2, r3
   19444:	d207      	bcs.n	19456 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   19446:	68fb      	ldr	r3, [r7, #12]
   19448:	685a      	ldr	r2, [r3, #4]
   1944a:	68fb      	ldr	r3, [r7, #12]
   1944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1944e:	425b      	negs	r3, r3
   19450:	18d2      	adds	r2, r2, r3
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   19456:	687b      	ldr	r3, [r7, #4]
   19458:	2b02      	cmp	r3, #2
   1945a:	d105      	bne.n	19468 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1945c:	693b      	ldr	r3, [r7, #16]
   1945e:	2b00      	cmp	r3, #0
   19460:	d002      	beq.n	19468 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   19462:	693b      	ldr	r3, [r7, #16]
   19464:	3b01      	subs	r3, #1
   19466:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   19468:	693b      	ldr	r3, [r7, #16]
   1946a:	1c5a      	adds	r2, r3, #1
   1946c:	68fb      	ldr	r3, [r7, #12]
   1946e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   19470:	697b      	ldr	r3, [r7, #20]
}
   19472:	0018      	movs	r0, r3
   19474:	46bd      	mov	sp, r7
   19476:	b006      	add	sp, #24
   19478:	bd80      	pop	{r7, pc}
   1947a:	46c0      	nop			; (mov r8, r8)
   1947c:	0001aa7d 	.word	0x0001aa7d
   19480:	00021e71 	.word	0x00021e71

00019484 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   19484:	b580      	push	{r7, lr}
   19486:	b082      	sub	sp, #8
   19488:	af00      	add	r7, sp, #0
   1948a:	6078      	str	r0, [r7, #4]
   1948c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1948e:	687b      	ldr	r3, [r7, #4]
   19490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19492:	2b00      	cmp	r3, #0
   19494:	d018      	beq.n	194c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   19496:	687b      	ldr	r3, [r7, #4]
   19498:	68da      	ldr	r2, [r3, #12]
   1949a:	687b      	ldr	r3, [r7, #4]
   1949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1949e:	18d2      	adds	r2, r2, r3
   194a0:	687b      	ldr	r3, [r7, #4]
   194a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   194a4:	687b      	ldr	r3, [r7, #4]
   194a6:	68da      	ldr	r2, [r3, #12]
   194a8:	687b      	ldr	r3, [r7, #4]
   194aa:	685b      	ldr	r3, [r3, #4]
   194ac:	429a      	cmp	r2, r3
   194ae:	d303      	bcc.n	194b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   194b0:	687b      	ldr	r3, [r7, #4]
   194b2:	681a      	ldr	r2, [r3, #0]
   194b4:	687b      	ldr	r3, [r7, #4]
   194b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   194b8:	687b      	ldr	r3, [r7, #4]
   194ba:	68d9      	ldr	r1, [r3, #12]
   194bc:	687b      	ldr	r3, [r7, #4]
   194be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   194c0:	683b      	ldr	r3, [r7, #0]
   194c2:	0018      	movs	r0, r3
   194c4:	4b02      	ldr	r3, [pc, #8]	; (194d0 <prvCopyDataFromQueue+0x4c>)
   194c6:	4798      	blx	r3
	}
}
   194c8:	46c0      	nop			; (mov r8, r8)
   194ca:	46bd      	mov	sp, r7
   194cc:	b002      	add	sp, #8
   194ce:	bd80      	pop	{r7, pc}
   194d0:	00021e71 	.word	0x00021e71

000194d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   194d4:	b580      	push	{r7, lr}
   194d6:	b084      	sub	sp, #16
   194d8:	af00      	add	r7, sp, #0
   194da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   194dc:	4b34      	ldr	r3, [pc, #208]	; (195b0 <prvUnlockQueue+0xdc>)
   194de:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   194e0:	230f      	movs	r3, #15
   194e2:	18fb      	adds	r3, r7, r3
   194e4:	687a      	ldr	r2, [r7, #4]
   194e6:	2145      	movs	r1, #69	; 0x45
   194e8:	5c52      	ldrb	r2, [r2, r1]
   194ea:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   194ec:	e022      	b.n	19534 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   194ee:	687b      	ldr	r3, [r7, #4]
   194f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   194f2:	2b00      	cmp	r3, #0
   194f4:	d009      	beq.n	1950a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   194f6:	687b      	ldr	r3, [r7, #4]
   194f8:	2100      	movs	r1, #0
   194fa:	0018      	movs	r0, r3
   194fc:	4b2d      	ldr	r3, [pc, #180]	; (195b4 <prvUnlockQueue+0xe0>)
   194fe:	4798      	blx	r3
   19500:	1e03      	subs	r3, r0, #0
   19502:	d00f      	beq.n	19524 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   19504:	4b2c      	ldr	r3, [pc, #176]	; (195b8 <prvUnlockQueue+0xe4>)
   19506:	4798      	blx	r3
   19508:	e00c      	b.n	19524 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1950a:	687b      	ldr	r3, [r7, #4]
   1950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1950e:	2b00      	cmp	r3, #0
   19510:	d017      	beq.n	19542 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19512:	687b      	ldr	r3, [r7, #4]
   19514:	3324      	adds	r3, #36	; 0x24
   19516:	0018      	movs	r0, r3
   19518:	4b28      	ldr	r3, [pc, #160]	; (195bc <prvUnlockQueue+0xe8>)
   1951a:	4798      	blx	r3
   1951c:	1e03      	subs	r3, r0, #0
   1951e:	d001      	beq.n	19524 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   19520:	4b25      	ldr	r3, [pc, #148]	; (195b8 <prvUnlockQueue+0xe4>)
   19522:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   19524:	230f      	movs	r3, #15
   19526:	18fb      	adds	r3, r7, r3
   19528:	781b      	ldrb	r3, [r3, #0]
   1952a:	3b01      	subs	r3, #1
   1952c:	b2da      	uxtb	r2, r3
   1952e:	230f      	movs	r3, #15
   19530:	18fb      	adds	r3, r7, r3
   19532:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   19534:	230f      	movs	r3, #15
   19536:	18fb      	adds	r3, r7, r3
   19538:	781b      	ldrb	r3, [r3, #0]
   1953a:	b25b      	sxtb	r3, r3
   1953c:	2b00      	cmp	r3, #0
   1953e:	dcd6      	bgt.n	194ee <prvUnlockQueue+0x1a>
   19540:	e000      	b.n	19544 <prvUnlockQueue+0x70>
						break;
   19542:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   19544:	687b      	ldr	r3, [r7, #4]
   19546:	2245      	movs	r2, #69	; 0x45
   19548:	21ff      	movs	r1, #255	; 0xff
   1954a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1954c:	4b1c      	ldr	r3, [pc, #112]	; (195c0 <prvUnlockQueue+0xec>)
   1954e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   19550:	4b17      	ldr	r3, [pc, #92]	; (195b0 <prvUnlockQueue+0xdc>)
   19552:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   19554:	230e      	movs	r3, #14
   19556:	18fb      	adds	r3, r7, r3
   19558:	687a      	ldr	r2, [r7, #4]
   1955a:	2144      	movs	r1, #68	; 0x44
   1955c:	5c52      	ldrb	r2, [r2, r1]
   1955e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   19560:	e014      	b.n	1958c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19562:	687b      	ldr	r3, [r7, #4]
   19564:	691b      	ldr	r3, [r3, #16]
   19566:	2b00      	cmp	r3, #0
   19568:	d017      	beq.n	1959a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1956a:	687b      	ldr	r3, [r7, #4]
   1956c:	3310      	adds	r3, #16
   1956e:	0018      	movs	r0, r3
   19570:	4b12      	ldr	r3, [pc, #72]	; (195bc <prvUnlockQueue+0xe8>)
   19572:	4798      	blx	r3
   19574:	1e03      	subs	r3, r0, #0
   19576:	d001      	beq.n	1957c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   19578:	4b0f      	ldr	r3, [pc, #60]	; (195b8 <prvUnlockQueue+0xe4>)
   1957a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1957c:	230e      	movs	r3, #14
   1957e:	18fb      	adds	r3, r7, r3
   19580:	781b      	ldrb	r3, [r3, #0]
   19582:	3b01      	subs	r3, #1
   19584:	b2da      	uxtb	r2, r3
   19586:	230e      	movs	r3, #14
   19588:	18fb      	adds	r3, r7, r3
   1958a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1958c:	230e      	movs	r3, #14
   1958e:	18fb      	adds	r3, r7, r3
   19590:	781b      	ldrb	r3, [r3, #0]
   19592:	b25b      	sxtb	r3, r3
   19594:	2b00      	cmp	r3, #0
   19596:	dce4      	bgt.n	19562 <prvUnlockQueue+0x8e>
   19598:	e000      	b.n	1959c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1959a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1959c:	687b      	ldr	r3, [r7, #4]
   1959e:	2244      	movs	r2, #68	; 0x44
   195a0:	21ff      	movs	r1, #255	; 0xff
   195a2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   195a4:	4b06      	ldr	r3, [pc, #24]	; (195c0 <prvUnlockQueue+0xec>)
   195a6:	4798      	blx	r3
}
   195a8:	46c0      	nop			; (mov r8, r8)
   195aa:	46bd      	mov	sp, r7
   195ac:	b004      	add	sp, #16
   195ae:	bd80      	pop	{r7, pc}
   195b0:	00017bd9 	.word	0x00017bd9
   195b4:	000196a9 	.word	0x000196a9
   195b8:	0001a639 	.word	0x0001a639
   195bc:	0001a469 	.word	0x0001a469
   195c0:	00017bfd 	.word	0x00017bfd

000195c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   195c4:	b580      	push	{r7, lr}
   195c6:	b084      	sub	sp, #16
   195c8:	af00      	add	r7, sp, #0
   195ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   195cc:	4b08      	ldr	r3, [pc, #32]	; (195f0 <prvIsQueueEmpty+0x2c>)
   195ce:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   195d0:	687b      	ldr	r3, [r7, #4]
   195d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   195d4:	2b00      	cmp	r3, #0
   195d6:	d102      	bne.n	195de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   195d8:	2301      	movs	r3, #1
   195da:	60fb      	str	r3, [r7, #12]
   195dc:	e001      	b.n	195e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   195de:	2300      	movs	r3, #0
   195e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   195e2:	4b04      	ldr	r3, [pc, #16]	; (195f4 <prvIsQueueEmpty+0x30>)
   195e4:	4798      	blx	r3

	return xReturn;
   195e6:	68fb      	ldr	r3, [r7, #12]
}
   195e8:	0018      	movs	r0, r3
   195ea:	46bd      	mov	sp, r7
   195ec:	b004      	add	sp, #16
   195ee:	bd80      	pop	{r7, pc}
   195f0:	00017bd9 	.word	0x00017bd9
   195f4:	00017bfd 	.word	0x00017bfd

000195f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   195f8:	b580      	push	{r7, lr}
   195fa:	b084      	sub	sp, #16
   195fc:	af00      	add	r7, sp, #0
   195fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   19600:	4b09      	ldr	r3, [pc, #36]	; (19628 <prvIsQueueFull+0x30>)
   19602:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   19604:	687b      	ldr	r3, [r7, #4]
   19606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19608:	687b      	ldr	r3, [r7, #4]
   1960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1960c:	429a      	cmp	r2, r3
   1960e:	d102      	bne.n	19616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   19610:	2301      	movs	r3, #1
   19612:	60fb      	str	r3, [r7, #12]
   19614:	e001      	b.n	1961a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   19616:	2300      	movs	r3, #0
   19618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1961a:	4b04      	ldr	r3, [pc, #16]	; (1962c <prvIsQueueFull+0x34>)
   1961c:	4798      	blx	r3

	return xReturn;
   1961e:	68fb      	ldr	r3, [r7, #12]
}
   19620:	0018      	movs	r0, r3
   19622:	46bd      	mov	sp, r7
   19624:	b004      	add	sp, #16
   19626:	bd80      	pop	{r7, pc}
   19628:	00017bd9 	.word	0x00017bd9
   1962c:	00017bfd 	.word	0x00017bfd

00019630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   19630:	b580      	push	{r7, lr}
   19632:	b086      	sub	sp, #24
   19634:	af00      	add	r7, sp, #0
   19636:	60f8      	str	r0, [r7, #12]
   19638:	60b9      	str	r1, [r7, #8]
   1963a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1963c:	68fb      	ldr	r3, [r7, #12]
   1963e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   19640:	4b15      	ldr	r3, [pc, #84]	; (19698 <vQueueWaitForMessageRestricted+0x68>)
   19642:	4798      	blx	r3
   19644:	697b      	ldr	r3, [r7, #20]
   19646:	2244      	movs	r2, #68	; 0x44
   19648:	5c9b      	ldrb	r3, [r3, r2]
   1964a:	b25b      	sxtb	r3, r3
   1964c:	3301      	adds	r3, #1
   1964e:	d103      	bne.n	19658 <vQueueWaitForMessageRestricted+0x28>
   19650:	697b      	ldr	r3, [r7, #20]
   19652:	2244      	movs	r2, #68	; 0x44
   19654:	2100      	movs	r1, #0
   19656:	5499      	strb	r1, [r3, r2]
   19658:	697b      	ldr	r3, [r7, #20]
   1965a:	2245      	movs	r2, #69	; 0x45
   1965c:	5c9b      	ldrb	r3, [r3, r2]
   1965e:	b25b      	sxtb	r3, r3
   19660:	3301      	adds	r3, #1
   19662:	d103      	bne.n	1966c <vQueueWaitForMessageRestricted+0x3c>
   19664:	697b      	ldr	r3, [r7, #20]
   19666:	2245      	movs	r2, #69	; 0x45
   19668:	2100      	movs	r1, #0
   1966a:	5499      	strb	r1, [r3, r2]
   1966c:	4b0b      	ldr	r3, [pc, #44]	; (1969c <vQueueWaitForMessageRestricted+0x6c>)
   1966e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   19670:	697b      	ldr	r3, [r7, #20]
   19672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19674:	2b00      	cmp	r3, #0
   19676:	d106      	bne.n	19686 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   19678:	697b      	ldr	r3, [r7, #20]
   1967a:	3324      	adds	r3, #36	; 0x24
   1967c:	687a      	ldr	r2, [r7, #4]
   1967e:	68b9      	ldr	r1, [r7, #8]
   19680:	0018      	movs	r0, r3
   19682:	4b07      	ldr	r3, [pc, #28]	; (196a0 <vQueueWaitForMessageRestricted+0x70>)
   19684:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   19686:	697b      	ldr	r3, [r7, #20]
   19688:	0018      	movs	r0, r3
   1968a:	4b06      	ldr	r3, [pc, #24]	; (196a4 <vQueueWaitForMessageRestricted+0x74>)
   1968c:	4798      	blx	r3
	}
   1968e:	46c0      	nop			; (mov r8, r8)
   19690:	46bd      	mov	sp, r7
   19692:	b006      	add	sp, #24
   19694:	bd80      	pop	{r7, pc}
   19696:	46c0      	nop			; (mov r8, r8)
   19698:	00017bd9 	.word	0x00017bd9
   1969c:	00017bfd 	.word	0x00017bfd
   196a0:	0001a389 	.word	0x0001a389
   196a4:	000194d5 	.word	0x000194d5

000196a8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   196a8:	b5b0      	push	{r4, r5, r7, lr}
   196aa:	b086      	sub	sp, #24
   196ac:	af00      	add	r7, sp, #0
   196ae:	6078      	str	r0, [r7, #4]
   196b0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   196b2:	687b      	ldr	r3, [r7, #4]
   196b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   196b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   196b8:	2300      	movs	r3, #0
   196ba:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   196bc:	693b      	ldr	r3, [r7, #16]
   196be:	2b00      	cmp	r3, #0
   196c0:	d101      	bne.n	196c6 <prvNotifyQueueSetContainer+0x1e>
   196c2:	b672      	cpsid	i
   196c4:	e7fe      	b.n	196c4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   196c6:	693b      	ldr	r3, [r7, #16]
   196c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   196ca:	693b      	ldr	r3, [r7, #16]
   196cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   196ce:	429a      	cmp	r2, r3
   196d0:	d301      	bcc.n	196d6 <prvNotifyQueueSetContainer+0x2e>
   196d2:	b672      	cpsid	i
   196d4:	e7fe      	b.n	196d4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   196d6:	693b      	ldr	r3, [r7, #16]
   196d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   196da:	693b      	ldr	r3, [r7, #16]
   196dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   196de:	429a      	cmp	r2, r3
   196e0:	d300      	bcc.n	196e4 <prvNotifyQueueSetContainer+0x3c>
   196e2:	e08b      	b.n	197fc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   196e4:	230f      	movs	r3, #15
   196e6:	18fb      	adds	r3, r7, r3
   196e8:	693a      	ldr	r2, [r7, #16]
   196ea:	2145      	movs	r1, #69	; 0x45
   196ec:	5c52      	ldrb	r2, [r2, r1]
   196ee:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   196f0:	4b45      	ldr	r3, [pc, #276]	; (19808 <prvNotifyQueueSetContainer+0x160>)
   196f2:	4798      	blx	r3
   196f4:	0003      	movs	r3, r0
   196f6:	0018      	movs	r0, r3
   196f8:	4b44      	ldr	r3, [pc, #272]	; (1980c <prvNotifyQueueSetContainer+0x164>)
   196fa:	4798      	blx	r3
   196fc:	0003      	movs	r3, r0
   196fe:	001a      	movs	r2, r3
   19700:	4b43      	ldr	r3, [pc, #268]	; (19810 <prvNotifyQueueSetContainer+0x168>)
   19702:	881b      	ldrh	r3, [r3, #0]
   19704:	4013      	ands	r3, r2
   19706:	b29b      	uxth	r3, r3
   19708:	2b00      	cmp	r3, #0
   1970a:	d02e      	beq.n	1976a <prvNotifyQueueSetContainer+0xc2>
   1970c:	693b      	ldr	r3, [r7, #16]
   1970e:	0018      	movs	r0, r3
   19710:	4b40      	ldr	r3, [pc, #256]	; (19814 <prvNotifyQueueSetContainer+0x16c>)
   19712:	4798      	blx	r3
   19714:	0003      	movs	r3, r0
   19716:	001a      	movs	r2, r3
   19718:	4b3d      	ldr	r3, [pc, #244]	; (19810 <prvNotifyQueueSetContainer+0x168>)
   1971a:	881b      	ldrh	r3, [r3, #0]
   1971c:	4013      	ands	r3, r2
   1971e:	b29b      	uxth	r3, r3
   19720:	2b00      	cmp	r3, #0
   19722:	d022      	beq.n	1976a <prvNotifyQueueSetContainer+0xc2>
   19724:	683b      	ldr	r3, [r7, #0]
   19726:	2b00      	cmp	r3, #0
   19728:	d10b      	bne.n	19742 <prvNotifyQueueSetContainer+0x9a>
   1972a:	693b      	ldr	r3, [r7, #16]
   1972c:	0018      	movs	r0, r3
   1972e:	4b3a      	ldr	r3, [pc, #232]	; (19818 <prvNotifyQueueSetContainer+0x170>)
   19730:	4798      	blx	r3
   19732:	0003      	movs	r3, r0
   19734:	001a      	movs	r2, r3
   19736:	4b39      	ldr	r3, [pc, #228]	; (1981c <prvNotifyQueueSetContainer+0x174>)
   19738:	5c9b      	ldrb	r3, [r3, r2]
   1973a:	3320      	adds	r3, #32
   1973c:	b2db      	uxtb	r3, r3
   1973e:	001d      	movs	r5, r3
   19740:	e000      	b.n	19744 <prvNotifyQueueSetContainer+0x9c>
   19742:	2525      	movs	r5, #37	; 0x25
   19744:	693b      	ldr	r3, [r7, #16]
   19746:	0018      	movs	r0, r3
   19748:	4b33      	ldr	r3, [pc, #204]	; (19818 <prvNotifyQueueSetContainer+0x170>)
   1974a:	4798      	blx	r3
   1974c:	0003      	movs	r3, r0
   1974e:	001a      	movs	r2, r3
   19750:	4b32      	ldr	r3, [pc, #200]	; (1981c <prvNotifyQueueSetContainer+0x174>)
   19752:	5c9c      	ldrb	r4, [r3, r2]
   19754:	693b      	ldr	r3, [r7, #16]
   19756:	0018      	movs	r0, r3
   19758:	4b31      	ldr	r3, [pc, #196]	; (19820 <prvNotifyQueueSetContainer+0x178>)
   1975a:	4798      	blx	r3
   1975c:	0003      	movs	r3, r0
   1975e:	b2db      	uxtb	r3, r3
   19760:	001a      	movs	r2, r3
   19762:	0021      	movs	r1, r4
   19764:	0028      	movs	r0, r5
   19766:	4b2f      	ldr	r3, [pc, #188]	; (19824 <prvNotifyQueueSetContainer+0x17c>)
   19768:	4798      	blx	r3
   1976a:	693b      	ldr	r3, [r7, #16]
   1976c:	0018      	movs	r0, r3
   1976e:	4b2a      	ldr	r3, [pc, #168]	; (19818 <prvNotifyQueueSetContainer+0x170>)
   19770:	4798      	blx	r3
   19772:	0003      	movs	r3, r0
   19774:	001a      	movs	r2, r3
   19776:	4b29      	ldr	r3, [pc, #164]	; (1981c <prvNotifyQueueSetContainer+0x174>)
   19778:	5c9c      	ldrb	r4, [r3, r2]
   1977a:	693b      	ldr	r3, [r7, #16]
   1977c:	0018      	movs	r0, r3
   1977e:	4b28      	ldr	r3, [pc, #160]	; (19820 <prvNotifyQueueSetContainer+0x178>)
   19780:	4798      	blx	r3
   19782:	0003      	movs	r3, r0
   19784:	b2dd      	uxtb	r5, r3
   19786:	693b      	ldr	r3, [r7, #16]
   19788:	0018      	movs	r0, r3
   1978a:	4b23      	ldr	r3, [pc, #140]	; (19818 <prvNotifyQueueSetContainer+0x170>)
   1978c:	4798      	blx	r3
   1978e:	0003      	movs	r3, r0
   19790:	001a      	movs	r2, r3
   19792:	4b22      	ldr	r3, [pc, #136]	; (1981c <prvNotifyQueueSetContainer+0x174>)
   19794:	5c9b      	ldrb	r3, [r3, r2]
   19796:	2b02      	cmp	r3, #2
   19798:	d005      	beq.n	197a6 <prvNotifyQueueSetContainer+0xfe>
   1979a:	693b      	ldr	r3, [r7, #16]
   1979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1979e:	b2db      	uxtb	r3, r3
   197a0:	3301      	adds	r3, #1
   197a2:	b2db      	uxtb	r3, r3
   197a4:	e000      	b.n	197a8 <prvNotifyQueueSetContainer+0x100>
   197a6:	2300      	movs	r3, #0
   197a8:	001a      	movs	r2, r3
   197aa:	0029      	movs	r1, r5
   197ac:	0020      	movs	r0, r4
   197ae:	4b1e      	ldr	r3, [pc, #120]	; (19828 <prvNotifyQueueSetContainer+0x180>)
   197b0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   197b2:	683a      	ldr	r2, [r7, #0]
   197b4:	1d39      	adds	r1, r7, #4
   197b6:	693b      	ldr	r3, [r7, #16]
   197b8:	0018      	movs	r0, r3
   197ba:	4b1c      	ldr	r3, [pc, #112]	; (1982c <prvNotifyQueueSetContainer+0x184>)
   197bc:	4798      	blx	r3
   197be:	0003      	movs	r3, r0
   197c0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   197c2:	230f      	movs	r3, #15
   197c4:	18fb      	adds	r3, r7, r3
   197c6:	781b      	ldrb	r3, [r3, #0]
   197c8:	b25b      	sxtb	r3, r3
   197ca:	3301      	adds	r3, #1
   197cc:	d10d      	bne.n	197ea <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   197ce:	693b      	ldr	r3, [r7, #16]
   197d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   197d2:	2b00      	cmp	r3, #0
   197d4:	d012      	beq.n	197fc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   197d6:	693b      	ldr	r3, [r7, #16]
   197d8:	3324      	adds	r3, #36	; 0x24
   197da:	0018      	movs	r0, r3
   197dc:	4b14      	ldr	r3, [pc, #80]	; (19830 <prvNotifyQueueSetContainer+0x188>)
   197de:	4798      	blx	r3
   197e0:	1e03      	subs	r3, r0, #0
   197e2:	d00b      	beq.n	197fc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   197e4:	2301      	movs	r3, #1
   197e6:	617b      	str	r3, [r7, #20]
   197e8:	e008      	b.n	197fc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   197ea:	230f      	movs	r3, #15
   197ec:	18fb      	adds	r3, r7, r3
   197ee:	781b      	ldrb	r3, [r3, #0]
   197f0:	3301      	adds	r3, #1
   197f2:	b2db      	uxtb	r3, r3
   197f4:	b259      	sxtb	r1, r3
   197f6:	693b      	ldr	r3, [r7, #16]
   197f8:	2245      	movs	r2, #69	; 0x45
   197fa:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   197fc:	697b      	ldr	r3, [r7, #20]
	}
   197fe:	0018      	movs	r0, r3
   19800:	46bd      	mov	sp, r7
   19802:	b006      	add	sp, #24
   19804:	bdb0      	pop	{r4, r5, r7, pc}
   19806:	46c0      	nop			; (mov r8, r8)
   19808:	00015e75 	.word	0x00015e75
   1980c:	00015bd9 	.word	0x00015bd9
   19810:	20000038 	.word	0x20000038
   19814:	00015c99 	.word	0x00015c99
   19818:	00015b99 	.word	0x00015b99
   1981c:	2000002c 	.word	0x2000002c
   19820:	00015c79 	.word	0x00015c79
   19824:	000165d1 	.word	0x000165d1
   19828:	00016c2d 	.word	0x00016c2d
   1982c:	000193a5 	.word	0x000193a5
   19830:	0001a469 	.word	0x0001a469

00019834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   19834:	b590      	push	{r4, r7, lr}
   19836:	b08d      	sub	sp, #52	; 0x34
   19838:	af04      	add	r7, sp, #16
   1983a:	60f8      	str	r0, [r7, #12]
   1983c:	60b9      	str	r1, [r7, #8]
   1983e:	603b      	str	r3, [r7, #0]
   19840:	1dbb      	adds	r3, r7, #6
   19842:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19844:	1dbb      	adds	r3, r7, #6
   19846:	881b      	ldrh	r3, [r3, #0]
   19848:	009b      	lsls	r3, r3, #2
   1984a:	0018      	movs	r0, r3
   1984c:	4b1d      	ldr	r3, [pc, #116]	; (198c4 <xTaskCreate+0x90>)
   1984e:	4798      	blx	r3
   19850:	0003      	movs	r3, r0
   19852:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   19854:	697b      	ldr	r3, [r7, #20]
   19856:	2b00      	cmp	r3, #0
   19858:	d010      	beq.n	1987c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1985a:	2054      	movs	r0, #84	; 0x54
   1985c:	4b19      	ldr	r3, [pc, #100]	; (198c4 <xTaskCreate+0x90>)
   1985e:	4798      	blx	r3
   19860:	0003      	movs	r3, r0
   19862:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   19864:	69fb      	ldr	r3, [r7, #28]
   19866:	2b00      	cmp	r3, #0
   19868:	d003      	beq.n	19872 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1986a:	69fb      	ldr	r3, [r7, #28]
   1986c:	697a      	ldr	r2, [r7, #20]
   1986e:	631a      	str	r2, [r3, #48]	; 0x30
   19870:	e006      	b.n	19880 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   19872:	697b      	ldr	r3, [r7, #20]
   19874:	0018      	movs	r0, r3
   19876:	4b14      	ldr	r3, [pc, #80]	; (198c8 <xTaskCreate+0x94>)
   19878:	4798      	blx	r3
   1987a:	e001      	b.n	19880 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1987c:	2300      	movs	r3, #0
   1987e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   19880:	69fb      	ldr	r3, [r7, #28]
   19882:	2b00      	cmp	r3, #0
   19884:	d016      	beq.n	198b4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   19886:	1dbb      	adds	r3, r7, #6
   19888:	881a      	ldrh	r2, [r3, #0]
   1988a:	683c      	ldr	r4, [r7, #0]
   1988c:	68b9      	ldr	r1, [r7, #8]
   1988e:	68f8      	ldr	r0, [r7, #12]
   19890:	2300      	movs	r3, #0
   19892:	9303      	str	r3, [sp, #12]
   19894:	69fb      	ldr	r3, [r7, #28]
   19896:	9302      	str	r3, [sp, #8]
   19898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1989a:	9301      	str	r3, [sp, #4]
   1989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1989e:	9300      	str	r3, [sp, #0]
   198a0:	0023      	movs	r3, r4
   198a2:	4c0a      	ldr	r4, [pc, #40]	; (198cc <xTaskCreate+0x98>)
   198a4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   198a6:	69fb      	ldr	r3, [r7, #28]
   198a8:	0018      	movs	r0, r3
   198aa:	4b09      	ldr	r3, [pc, #36]	; (198d0 <xTaskCreate+0x9c>)
   198ac:	4798      	blx	r3
			xReturn = pdPASS;
   198ae:	2301      	movs	r3, #1
   198b0:	61bb      	str	r3, [r7, #24]
   198b2:	e002      	b.n	198ba <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   198b4:	2301      	movs	r3, #1
   198b6:	425b      	negs	r3, r3
   198b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   198ba:	69bb      	ldr	r3, [r7, #24]
	}
   198bc:	0018      	movs	r0, r3
   198be:	46bd      	mov	sp, r7
   198c0:	b009      	add	sp, #36	; 0x24
   198c2:	bd90      	pop	{r4, r7, pc}
   198c4:	00017d11 	.word	0x00017d11
   198c8:	00017dd5 	.word	0x00017dd5
   198cc:	000198d5 	.word	0x000198d5
   198d0:	000199e5 	.word	0x000199e5

000198d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   198d4:	b580      	push	{r7, lr}
   198d6:	b086      	sub	sp, #24
   198d8:	af00      	add	r7, sp, #0
   198da:	60f8      	str	r0, [r7, #12]
   198dc:	60b9      	str	r1, [r7, #8]
   198de:	607a      	str	r2, [r7, #4]
   198e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   198e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   198e6:	687b      	ldr	r3, [r7, #4]
   198e8:	009b      	lsls	r3, r3, #2
   198ea:	001a      	movs	r2, r3
   198ec:	21a5      	movs	r1, #165	; 0xa5
   198ee:	4b39      	ldr	r3, [pc, #228]	; (199d4 <prvInitialiseNewTask+0x100>)
   198f0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   198f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   198f6:	687b      	ldr	r3, [r7, #4]
   198f8:	4937      	ldr	r1, [pc, #220]	; (199d8 <prvInitialiseNewTask+0x104>)
   198fa:	468c      	mov	ip, r1
   198fc:	4463      	add	r3, ip
   198fe:	009b      	lsls	r3, r3, #2
   19900:	18d3      	adds	r3, r2, r3
   19902:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   19904:	693b      	ldr	r3, [r7, #16]
   19906:	2207      	movs	r2, #7
   19908:	4393      	bics	r3, r2
   1990a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1990c:	693b      	ldr	r3, [r7, #16]
   1990e:	2207      	movs	r2, #7
   19910:	4013      	ands	r3, r2
   19912:	d001      	beq.n	19918 <prvInitialiseNewTask+0x44>
   19914:	b672      	cpsid	i
   19916:	e7fe      	b.n	19916 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   19918:	2300      	movs	r3, #0
   1991a:	617b      	str	r3, [r7, #20]
   1991c:	e013      	b.n	19946 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1991e:	68ba      	ldr	r2, [r7, #8]
   19920:	697b      	ldr	r3, [r7, #20]
   19922:	18d3      	adds	r3, r2, r3
   19924:	7818      	ldrb	r0, [r3, #0]
   19926:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19928:	2134      	movs	r1, #52	; 0x34
   1992a:	697b      	ldr	r3, [r7, #20]
   1992c:	18d3      	adds	r3, r2, r3
   1992e:	185b      	adds	r3, r3, r1
   19930:	1c02      	adds	r2, r0, #0
   19932:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   19934:	68ba      	ldr	r2, [r7, #8]
   19936:	697b      	ldr	r3, [r7, #20]
   19938:	18d3      	adds	r3, r2, r3
   1993a:	781b      	ldrb	r3, [r3, #0]
   1993c:	2b00      	cmp	r3, #0
   1993e:	d006      	beq.n	1994e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   19940:	697b      	ldr	r3, [r7, #20]
   19942:	3301      	adds	r3, #1
   19944:	617b      	str	r3, [r7, #20]
   19946:	697b      	ldr	r3, [r7, #20]
   19948:	2b07      	cmp	r3, #7
   1994a:	d9e8      	bls.n	1991e <prvInitialiseNewTask+0x4a>
   1994c:	e000      	b.n	19950 <prvInitialiseNewTask+0x7c>
		{
			break;
   1994e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   19950:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19952:	223b      	movs	r2, #59	; 0x3b
   19954:	2100      	movs	r1, #0
   19956:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   19958:	6a3b      	ldr	r3, [r7, #32]
   1995a:	2b04      	cmp	r3, #4
   1995c:	d901      	bls.n	19962 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1995e:	2304      	movs	r3, #4
   19960:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   19962:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19964:	6a3a      	ldr	r2, [r7, #32]
   19966:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   19968:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1996a:	6a3a      	ldr	r2, [r7, #32]
   1996c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19970:	2200      	movs	r2, #0
   19972:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   19974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19976:	3304      	adds	r3, #4
   19978:	0018      	movs	r0, r3
   1997a:	4b18      	ldr	r3, [pc, #96]	; (199dc <prvInitialiseNewTask+0x108>)
   1997c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19980:	3318      	adds	r3, #24
   19982:	0018      	movs	r0, r3
   19984:	4b15      	ldr	r3, [pc, #84]	; (199dc <prvInitialiseNewTask+0x108>)
   19986:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   19988:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1998a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1998c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1998e:	6a3b      	ldr	r3, [r7, #32]
   19990:	2205      	movs	r2, #5
   19992:	1ad2      	subs	r2, r2, r3
   19994:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19996:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   19998:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1999a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1999c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199a0:	2200      	movs	r2, #0
   199a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   199a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199a6:	2250      	movs	r2, #80	; 0x50
   199a8:	2100      	movs	r1, #0
   199aa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   199ac:	683a      	ldr	r2, [r7, #0]
   199ae:	68f9      	ldr	r1, [r7, #12]
   199b0:	693b      	ldr	r3, [r7, #16]
   199b2:	0018      	movs	r0, r3
   199b4:	4b0a      	ldr	r3, [pc, #40]	; (199e0 <prvInitialiseNewTask+0x10c>)
   199b6:	4798      	blx	r3
   199b8:	0002      	movs	r2, r0
   199ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   199bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   199be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199c0:	2b00      	cmp	r3, #0
   199c2:	d002      	beq.n	199ca <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   199c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   199c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   199ca:	46c0      	nop			; (mov r8, r8)
   199cc:	46bd      	mov	sp, r7
   199ce:	b006      	add	sp, #24
   199d0:	bd80      	pop	{r7, pc}
   199d2:	46c0      	nop			; (mov r8, r8)
   199d4:	00021ea7 	.word	0x00021ea7
   199d8:	3fffffff 	.word	0x3fffffff
   199dc:	0001798d 	.word	0x0001798d
   199e0:	00017aa5 	.word	0x00017aa5

000199e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   199e4:	b580      	push	{r7, lr}
   199e6:	b082      	sub	sp, #8
   199e8:	af00      	add	r7, sp, #0
   199ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   199ec:	4b60      	ldr	r3, [pc, #384]	; (19b70 <prvAddNewTaskToReadyList+0x18c>)
   199ee:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   199f0:	4b60      	ldr	r3, [pc, #384]	; (19b74 <prvAddNewTaskToReadyList+0x190>)
   199f2:	681b      	ldr	r3, [r3, #0]
   199f4:	1c5a      	adds	r2, r3, #1
   199f6:	4b5f      	ldr	r3, [pc, #380]	; (19b74 <prvAddNewTaskToReadyList+0x190>)
   199f8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   199fa:	4b5f      	ldr	r3, [pc, #380]	; (19b78 <prvAddNewTaskToReadyList+0x194>)
   199fc:	681b      	ldr	r3, [r3, #0]
   199fe:	2b00      	cmp	r3, #0
   19a00:	d109      	bne.n	19a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   19a02:	4b5d      	ldr	r3, [pc, #372]	; (19b78 <prvAddNewTaskToReadyList+0x194>)
   19a04:	687a      	ldr	r2, [r7, #4]
   19a06:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   19a08:	4b5a      	ldr	r3, [pc, #360]	; (19b74 <prvAddNewTaskToReadyList+0x190>)
   19a0a:	681b      	ldr	r3, [r3, #0]
   19a0c:	2b01      	cmp	r3, #1
   19a0e:	d110      	bne.n	19a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   19a10:	4b5a      	ldr	r3, [pc, #360]	; (19b7c <prvAddNewTaskToReadyList+0x198>)
   19a12:	4798      	blx	r3
   19a14:	e00d      	b.n	19a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   19a16:	4b5a      	ldr	r3, [pc, #360]	; (19b80 <prvAddNewTaskToReadyList+0x19c>)
   19a18:	681b      	ldr	r3, [r3, #0]
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	d109      	bne.n	19a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   19a1e:	4b56      	ldr	r3, [pc, #344]	; (19b78 <prvAddNewTaskToReadyList+0x194>)
   19a20:	681b      	ldr	r3, [r3, #0]
   19a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19a24:	687b      	ldr	r3, [r7, #4]
   19a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19a28:	429a      	cmp	r2, r3
   19a2a:	d802      	bhi.n	19a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   19a2c:	4b52      	ldr	r3, [pc, #328]	; (19b78 <prvAddNewTaskToReadyList+0x194>)
   19a2e:	687a      	ldr	r2, [r7, #4]
   19a30:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   19a32:	4b54      	ldr	r3, [pc, #336]	; (19b84 <prvAddNewTaskToReadyList+0x1a0>)
   19a34:	681b      	ldr	r3, [r3, #0]
   19a36:	1c5a      	adds	r2, r3, #1
   19a38:	4b52      	ldr	r3, [pc, #328]	; (19b84 <prvAddNewTaskToReadyList+0x1a0>)
   19a3a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   19a3c:	4b51      	ldr	r3, [pc, #324]	; (19b84 <prvAddNewTaskToReadyList+0x1a0>)
   19a3e:	681a      	ldr	r2, [r3, #0]
   19a40:	687b      	ldr	r3, [r7, #4]
   19a42:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   19a44:	687b      	ldr	r3, [r7, #4]
   19a46:	2b00      	cmp	r3, #0
   19a48:	d052      	beq.n	19af0 <prvAddNewTaskToReadyList+0x10c>
   19a4a:	2003      	movs	r0, #3
   19a4c:	4b4e      	ldr	r3, [pc, #312]	; (19b88 <prvAddNewTaskToReadyList+0x1a4>)
   19a4e:	4798      	blx	r3
   19a50:	0003      	movs	r3, r0
   19a52:	b29a      	uxth	r2, r3
   19a54:	687b      	ldr	r3, [r7, #4]
   19a56:	0011      	movs	r1, r2
   19a58:	0018      	movs	r0, r3
   19a5a:	4b4c      	ldr	r3, [pc, #304]	; (19b8c <prvAddNewTaskToReadyList+0x1a8>)
   19a5c:	4798      	blx	r3
   19a5e:	4b4c      	ldr	r3, [pc, #304]	; (19b90 <prvAddNewTaskToReadyList+0x1ac>)
   19a60:	881a      	ldrh	r2, [r3, #0]
   19a62:	687b      	ldr	r3, [r7, #4]
   19a64:	0011      	movs	r1, r2
   19a66:	0018      	movs	r0, r3
   19a68:	4b4a      	ldr	r3, [pc, #296]	; (19b94 <prvAddNewTaskToReadyList+0x1b0>)
   19a6a:	4798      	blx	r3
   19a6c:	687b      	ldr	r3, [r7, #4]
   19a6e:	0018      	movs	r0, r3
   19a70:	4b49      	ldr	r3, [pc, #292]	; (19b98 <prvAddNewTaskToReadyList+0x1b4>)
   19a72:	4798      	blx	r3
   19a74:	0003      	movs	r3, r0
   19a76:	b2d9      	uxtb	r1, r3
   19a78:	687b      	ldr	r3, [r7, #4]
   19a7a:	3334      	adds	r3, #52	; 0x34
   19a7c:	001a      	movs	r2, r3
   19a7e:	2003      	movs	r0, #3
   19a80:	4b46      	ldr	r3, [pc, #280]	; (19b9c <prvAddNewTaskToReadyList+0x1b8>)
   19a82:	4798      	blx	r3
   19a84:	687b      	ldr	r3, [r7, #4]
   19a86:	0018      	movs	r0, r3
   19a88:	4b43      	ldr	r3, [pc, #268]	; (19b98 <prvAddNewTaskToReadyList+0x1b4>)
   19a8a:	4798      	blx	r3
   19a8c:	0003      	movs	r3, r0
   19a8e:	b2d9      	uxtb	r1, r3
   19a90:	687b      	ldr	r3, [r7, #4]
   19a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19a94:	b2db      	uxtb	r3, r3
   19a96:	001a      	movs	r2, r3
   19a98:	2003      	movs	r0, #3
   19a9a:	4b41      	ldr	r3, [pc, #260]	; (19ba0 <prvAddNewTaskToReadyList+0x1bc>)
   19a9c:	4798      	blx	r3
   19a9e:	4b41      	ldr	r3, [pc, #260]	; (19ba4 <prvAddNewTaskToReadyList+0x1c0>)
   19aa0:	4798      	blx	r3
   19aa2:	0003      	movs	r3, r0
   19aa4:	0018      	movs	r0, r3
   19aa6:	4b40      	ldr	r3, [pc, #256]	; (19ba8 <prvAddNewTaskToReadyList+0x1c4>)
   19aa8:	4798      	blx	r3
   19aaa:	0003      	movs	r3, r0
   19aac:	001a      	movs	r2, r3
   19aae:	4b3f      	ldr	r3, [pc, #252]	; (19bac <prvAddNewTaskToReadyList+0x1c8>)
   19ab0:	881b      	ldrh	r3, [r3, #0]
   19ab2:	4013      	ands	r3, r2
   19ab4:	b29b      	uxth	r3, r3
   19ab6:	2b00      	cmp	r3, #0
   19ab8:	d016      	beq.n	19ae8 <prvAddNewTaskToReadyList+0x104>
   19aba:	687b      	ldr	r3, [r7, #4]
   19abc:	0018      	movs	r0, r3
   19abe:	4b3a      	ldr	r3, [pc, #232]	; (19ba8 <prvAddNewTaskToReadyList+0x1c4>)
   19ac0:	4798      	blx	r3
   19ac2:	0003      	movs	r3, r0
   19ac4:	001a      	movs	r2, r3
   19ac6:	4b39      	ldr	r3, [pc, #228]	; (19bac <prvAddNewTaskToReadyList+0x1c8>)
   19ac8:	881b      	ldrh	r3, [r3, #0]
   19aca:	4013      	ands	r3, r2
   19acc:	b29b      	uxth	r3, r3
   19ace:	2b00      	cmp	r3, #0
   19ad0:	d00a      	beq.n	19ae8 <prvAddNewTaskToReadyList+0x104>
   19ad2:	687b      	ldr	r3, [r7, #4]
   19ad4:	0018      	movs	r0, r3
   19ad6:	4b30      	ldr	r3, [pc, #192]	; (19b98 <prvAddNewTaskToReadyList+0x1b4>)
   19ad8:	4798      	blx	r3
   19ada:	0003      	movs	r3, r0
   19adc:	b2db      	uxtb	r3, r3
   19ade:	001a      	movs	r2, r3
   19ae0:	2103      	movs	r1, #3
   19ae2:	201b      	movs	r0, #27
   19ae4:	4b32      	ldr	r3, [pc, #200]	; (19bb0 <prvAddNewTaskToReadyList+0x1cc>)
   19ae6:	4798      	blx	r3
   19ae8:	687b      	ldr	r3, [r7, #4]
   19aea:	0018      	movs	r0, r3
   19aec:	4b31      	ldr	r3, [pc, #196]	; (19bb4 <prvAddNewTaskToReadyList+0x1d0>)
   19aee:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   19af0:	687b      	ldr	r3, [r7, #4]
   19af2:	0018      	movs	r0, r3
   19af4:	4b2c      	ldr	r3, [pc, #176]	; (19ba8 <prvAddNewTaskToReadyList+0x1c4>)
   19af6:	4798      	blx	r3
   19af8:	0003      	movs	r3, r0
   19afa:	001a      	movs	r2, r3
   19afc:	4b2b      	ldr	r3, [pc, #172]	; (19bac <prvAddNewTaskToReadyList+0x1c8>)
   19afe:	881b      	ldrh	r3, [r3, #0]
   19b00:	4013      	ands	r3, r2
   19b02:	b29b      	uxth	r3, r3
   19b04:	2b00      	cmp	r3, #0
   19b06:	d008      	beq.n	19b1a <prvAddNewTaskToReadyList+0x136>
   19b08:	687b      	ldr	r3, [r7, #4]
   19b0a:	0018      	movs	r0, r3
   19b0c:	4b22      	ldr	r3, [pc, #136]	; (19b98 <prvAddNewTaskToReadyList+0x1b4>)
   19b0e:	4798      	blx	r3
   19b10:	0003      	movs	r3, r0
   19b12:	b2db      	uxtb	r3, r3
   19b14:	0018      	movs	r0, r3
   19b16:	4b28      	ldr	r3, [pc, #160]	; (19bb8 <prvAddNewTaskToReadyList+0x1d4>)
   19b18:	4798      	blx	r3
   19b1a:	687b      	ldr	r3, [r7, #4]
   19b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b1e:	4b27      	ldr	r3, [pc, #156]	; (19bbc <prvAddNewTaskToReadyList+0x1d8>)
   19b20:	681b      	ldr	r3, [r3, #0]
   19b22:	429a      	cmp	r2, r3
   19b24:	d903      	bls.n	19b2e <prvAddNewTaskToReadyList+0x14a>
   19b26:	687b      	ldr	r3, [r7, #4]
   19b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b2a:	4b24      	ldr	r3, [pc, #144]	; (19bbc <prvAddNewTaskToReadyList+0x1d8>)
   19b2c:	601a      	str	r2, [r3, #0]
   19b2e:	687b      	ldr	r3, [r7, #4]
   19b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b32:	0013      	movs	r3, r2
   19b34:	009b      	lsls	r3, r3, #2
   19b36:	189b      	adds	r3, r3, r2
   19b38:	009b      	lsls	r3, r3, #2
   19b3a:	4a21      	ldr	r2, [pc, #132]	; (19bc0 <prvAddNewTaskToReadyList+0x1dc>)
   19b3c:	189a      	adds	r2, r3, r2
   19b3e:	687b      	ldr	r3, [r7, #4]
   19b40:	3304      	adds	r3, #4
   19b42:	0019      	movs	r1, r3
   19b44:	0010      	movs	r0, r2
   19b46:	4b1f      	ldr	r3, [pc, #124]	; (19bc4 <prvAddNewTaskToReadyList+0x1e0>)
   19b48:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   19b4a:	4b1f      	ldr	r3, [pc, #124]	; (19bc8 <prvAddNewTaskToReadyList+0x1e4>)
   19b4c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   19b4e:	4b0c      	ldr	r3, [pc, #48]	; (19b80 <prvAddNewTaskToReadyList+0x19c>)
   19b50:	681b      	ldr	r3, [r3, #0]
   19b52:	2b00      	cmp	r3, #0
   19b54:	d008      	beq.n	19b68 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   19b56:	4b08      	ldr	r3, [pc, #32]	; (19b78 <prvAddNewTaskToReadyList+0x194>)
   19b58:	681b      	ldr	r3, [r3, #0]
   19b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b5c:	687b      	ldr	r3, [r7, #4]
   19b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19b60:	429a      	cmp	r2, r3
   19b62:	d201      	bcs.n	19b68 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   19b64:	4b19      	ldr	r3, [pc, #100]	; (19bcc <prvAddNewTaskToReadyList+0x1e8>)
   19b66:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   19b68:	46c0      	nop			; (mov r8, r8)
   19b6a:	46bd      	mov	sp, r7
   19b6c:	b002      	add	sp, #8
   19b6e:	bd80      	pop	{r7, pc}
   19b70:	00017bd9 	.word	0x00017bd9
   19b74:	20003a14 	.word	0x20003a14
   19b78:	2000393c 	.word	0x2000393c
   19b7c:	0001a6c1 	.word	0x0001a6c1
   19b80:	20003a20 	.word	0x20003a20
   19b84:	20003a30 	.word	0x20003a30
   19b88:	00017159 	.word	0x00017159
   19b8c:	00015bfd 	.word	0x00015bfd
   19b90:	2000003a 	.word	0x2000003a
   19b94:	00015c39 	.word	0x00015c39
   19b98:	00015bb9 	.word	0x00015bb9
   19b9c:	00017389 	.word	0x00017389
   19ba0:	00016aed 	.word	0x00016aed
   19ba4:	00015e75 	.word	0x00015e75
   19ba8:	00015bd9 	.word	0x00015bd9
   19bac:	20000038 	.word	0x20000038
   19bb0:	000165d1 	.word	0x000165d1
   19bb4:	00015d39 	.word	0x00015d39
   19bb8:	00016389 	.word	0x00016389
   19bbc:	20003a1c 	.word	0x20003a1c
   19bc0:	20003940 	.word	0x20003940
   19bc4:	000179a3 	.word	0x000179a3
   19bc8:	00017bfd 	.word	0x00017bfd
   19bcc:	00017bc1 	.word	0x00017bc1

00019bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   19bd0:	b580      	push	{r7, lr}
   19bd2:	b084      	sub	sp, #16
   19bd4:	af00      	add	r7, sp, #0
   19bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   19bd8:	2300      	movs	r3, #0
   19bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   19bdc:	687b      	ldr	r3, [r7, #4]
   19bde:	2b00      	cmp	r3, #0
   19be0:	d045      	beq.n	19c6e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   19be2:	4b27      	ldr	r3, [pc, #156]	; (19c80 <vTaskDelay+0xb0>)
   19be4:	681b      	ldr	r3, [r3, #0]
   19be6:	2b00      	cmp	r3, #0
   19be8:	d001      	beq.n	19bee <vTaskDelay+0x1e>
   19bea:	b672      	cpsid	i
   19bec:	e7fe      	b.n	19bec <vTaskDelay+0x1c>
			vTaskSuspendAll();
   19bee:	4b25      	ldr	r3, [pc, #148]	; (19c84 <vTaskDelay+0xb4>)
   19bf0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   19bf2:	4b25      	ldr	r3, [pc, #148]	; (19c88 <vTaskDelay+0xb8>)
   19bf4:	681b      	ldr	r3, [r3, #0]
   19bf6:	0018      	movs	r0, r3
   19bf8:	4b24      	ldr	r3, [pc, #144]	; (19c8c <vTaskDelay+0xbc>)
   19bfa:	4798      	blx	r3
   19bfc:	0003      	movs	r3, r0
   19bfe:	001a      	movs	r2, r3
   19c00:	4b23      	ldr	r3, [pc, #140]	; (19c90 <vTaskDelay+0xc0>)
   19c02:	881b      	ldrh	r3, [r3, #0]
   19c04:	4013      	ands	r3, r2
   19c06:	b29b      	uxth	r3, r3
   19c08:	2b00      	cmp	r3, #0
   19c0a:	d00e      	beq.n	19c2a <vTaskDelay+0x5a>
   19c0c:	687b      	ldr	r3, [r7, #4]
   19c0e:	0019      	movs	r1, r3
   19c10:	2089      	movs	r0, #137	; 0x89
   19c12:	4b20      	ldr	r3, [pc, #128]	; (19c94 <vTaskDelay+0xc4>)
   19c14:	4798      	blx	r3
   19c16:	4b1c      	ldr	r3, [pc, #112]	; (19c88 <vTaskDelay+0xb8>)
   19c18:	681b      	ldr	r3, [r3, #0]
   19c1a:	0018      	movs	r0, r3
   19c1c:	4b1e      	ldr	r3, [pc, #120]	; (19c98 <vTaskDelay+0xc8>)
   19c1e:	4798      	blx	r3
   19c20:	0003      	movs	r3, r0
   19c22:	b2db      	uxtb	r3, r3
   19c24:	0018      	movs	r0, r3
   19c26:	4b1d      	ldr	r3, [pc, #116]	; (19c9c <vTaskDelay+0xcc>)
   19c28:	4798      	blx	r3
   19c2a:	4b1d      	ldr	r3, [pc, #116]	; (19ca0 <vTaskDelay+0xd0>)
   19c2c:	4798      	blx	r3
   19c2e:	0003      	movs	r3, r0
   19c30:	0018      	movs	r0, r3
   19c32:	4b16      	ldr	r3, [pc, #88]	; (19c8c <vTaskDelay+0xbc>)
   19c34:	4798      	blx	r3
   19c36:	0003      	movs	r3, r0
   19c38:	001a      	movs	r2, r3
   19c3a:	4b15      	ldr	r3, [pc, #84]	; (19c90 <vTaskDelay+0xc0>)
   19c3c:	881b      	ldrh	r3, [r3, #0]
   19c3e:	4013      	ands	r3, r2
   19c40:	b29b      	uxth	r3, r3
   19c42:	2b00      	cmp	r3, #0
   19c44:	d00a      	beq.n	19c5c <vTaskDelay+0x8c>
   19c46:	4b16      	ldr	r3, [pc, #88]	; (19ca0 <vTaskDelay+0xd0>)
   19c48:	4798      	blx	r3
   19c4a:	0003      	movs	r3, r0
   19c4c:	0018      	movs	r0, r3
   19c4e:	4b12      	ldr	r3, [pc, #72]	; (19c98 <vTaskDelay+0xc8>)
   19c50:	4798      	blx	r3
   19c52:	0003      	movs	r3, r0
   19c54:	b2db      	uxtb	r3, r3
   19c56:	0018      	movs	r0, r3
   19c58:	4b10      	ldr	r3, [pc, #64]	; (19c9c <vTaskDelay+0xcc>)
   19c5a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   19c5c:	687b      	ldr	r3, [r7, #4]
   19c5e:	2100      	movs	r1, #0
   19c60:	0018      	movs	r0, r3
   19c62:	4b10      	ldr	r3, [pc, #64]	; (19ca4 <vTaskDelay+0xd4>)
   19c64:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   19c66:	4b10      	ldr	r3, [pc, #64]	; (19ca8 <vTaskDelay+0xd8>)
   19c68:	4798      	blx	r3
   19c6a:	0003      	movs	r3, r0
   19c6c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   19c6e:	68fb      	ldr	r3, [r7, #12]
   19c70:	2b00      	cmp	r3, #0
   19c72:	d101      	bne.n	19c78 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   19c74:	4b0d      	ldr	r3, [pc, #52]	; (19cac <vTaskDelay+0xdc>)
   19c76:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   19c78:	46c0      	nop			; (mov r8, r8)
   19c7a:	46bd      	mov	sp, r7
   19c7c:	b004      	add	sp, #16
   19c7e:	bd80      	pop	{r7, pc}
   19c80:	20003a3c 	.word	0x20003a3c
   19c84:	00019e91 	.word	0x00019e91
   19c88:	2000393c 	.word	0x2000393c
   19c8c:	00015bd9 	.word	0x00015bd9
   19c90:	20000038 	.word	0x20000038
   19c94:	000168d9 	.word	0x000168d9
   19c98:	00015bb9 	.word	0x00015bb9
   19c9c:	00016d69 	.word	0x00016d69
   19ca0:	00015e75 	.word	0x00015e75
   19ca4:	0001ada5 	.word	0x0001ada5
   19ca8:	00019ea9 	.word	0x00019ea9
   19cac:	00017bc1 	.word	0x00017bc1

00019cb0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   19cb0:	b580      	push	{r7, lr}
   19cb2:	b084      	sub	sp, #16
   19cb4:	af00      	add	r7, sp, #0
   19cb6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   19cb8:	4b42      	ldr	r3, [pc, #264]	; (19dc4 <vTaskSuspend+0x114>)
   19cba:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   19cbc:	687b      	ldr	r3, [r7, #4]
   19cbe:	2b00      	cmp	r3, #0
   19cc0:	d102      	bne.n	19cc8 <vTaskSuspend+0x18>
   19cc2:	4b41      	ldr	r3, [pc, #260]	; (19dc8 <vTaskSuspend+0x118>)
   19cc4:	681b      	ldr	r3, [r3, #0]
   19cc6:	e000      	b.n	19cca <vTaskSuspend+0x1a>
   19cc8:	687b      	ldr	r3, [r7, #4]
   19cca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   19ccc:	4b3f      	ldr	r3, [pc, #252]	; (19dcc <vTaskSuspend+0x11c>)
   19cce:	4798      	blx	r3
   19cd0:	0003      	movs	r3, r0
   19cd2:	0018      	movs	r0, r3
   19cd4:	4b3e      	ldr	r3, [pc, #248]	; (19dd0 <vTaskSuspend+0x120>)
   19cd6:	4798      	blx	r3
   19cd8:	0003      	movs	r3, r0
   19cda:	001a      	movs	r2, r3
   19cdc:	4b3d      	ldr	r3, [pc, #244]	; (19dd4 <vTaskSuspend+0x124>)
   19cde:	881b      	ldrh	r3, [r3, #0]
   19ce0:	4013      	ands	r3, r2
   19ce2:	b29b      	uxth	r3, r3
   19ce4:	2b00      	cmp	r3, #0
   19ce6:	d016      	beq.n	19d16 <vTaskSuspend+0x66>
   19ce8:	68fb      	ldr	r3, [r7, #12]
   19cea:	0018      	movs	r0, r3
   19cec:	4b38      	ldr	r3, [pc, #224]	; (19dd0 <vTaskSuspend+0x120>)
   19cee:	4798      	blx	r3
   19cf0:	0003      	movs	r3, r0
   19cf2:	001a      	movs	r2, r3
   19cf4:	4b37      	ldr	r3, [pc, #220]	; (19dd4 <vTaskSuspend+0x124>)
   19cf6:	881b      	ldrh	r3, [r3, #0]
   19cf8:	4013      	ands	r3, r2
   19cfa:	b29b      	uxth	r3, r3
   19cfc:	2b00      	cmp	r3, #0
   19cfe:	d00a      	beq.n	19d16 <vTaskSuspend+0x66>
   19d00:	68fb      	ldr	r3, [r7, #12]
   19d02:	0018      	movs	r0, r3
   19d04:	4b34      	ldr	r3, [pc, #208]	; (19dd8 <vTaskSuspend+0x128>)
   19d06:	4798      	blx	r3
   19d08:	0003      	movs	r3, r0
   19d0a:	b2db      	uxtb	r3, r3
   19d0c:	001a      	movs	r2, r3
   19d0e:	2103      	movs	r1, #3
   19d10:	208a      	movs	r0, #138	; 0x8a
   19d12:	4b32      	ldr	r3, [pc, #200]	; (19ddc <vTaskSuspend+0x12c>)
   19d14:	4798      	blx	r3
   19d16:	68fb      	ldr	r3, [r7, #12]
   19d18:	0018      	movs	r0, r3
   19d1a:	4b2f      	ldr	r3, [pc, #188]	; (19dd8 <vTaskSuspend+0x128>)
   19d1c:	4798      	blx	r3
   19d1e:	0003      	movs	r3, r0
   19d20:	b2db      	uxtb	r3, r3
   19d22:	0018      	movs	r0, r3
   19d24:	4b2e      	ldr	r3, [pc, #184]	; (19de0 <vTaskSuspend+0x130>)
   19d26:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   19d28:	68fb      	ldr	r3, [r7, #12]
   19d2a:	3304      	adds	r3, #4
   19d2c:	0018      	movs	r0, r3
   19d2e:	4b2d      	ldr	r3, [pc, #180]	; (19de4 <vTaskSuspend+0x134>)
   19d30:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   19d32:	68fb      	ldr	r3, [r7, #12]
   19d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d36:	2b00      	cmp	r3, #0
   19d38:	d004      	beq.n	19d44 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   19d3a:	68fb      	ldr	r3, [r7, #12]
   19d3c:	3318      	adds	r3, #24
   19d3e:	0018      	movs	r0, r3
   19d40:	4b28      	ldr	r3, [pc, #160]	; (19de4 <vTaskSuspend+0x134>)
   19d42:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   19d44:	68fb      	ldr	r3, [r7, #12]
   19d46:	1d1a      	adds	r2, r3, #4
   19d48:	4b27      	ldr	r3, [pc, #156]	; (19de8 <vTaskSuspend+0x138>)
   19d4a:	0011      	movs	r1, r2
   19d4c:	0018      	movs	r0, r3
   19d4e:	4b27      	ldr	r3, [pc, #156]	; (19dec <vTaskSuspend+0x13c>)
   19d50:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   19d52:	68fb      	ldr	r3, [r7, #12]
   19d54:	2250      	movs	r2, #80	; 0x50
   19d56:	5c9b      	ldrb	r3, [r3, r2]
   19d58:	b2db      	uxtb	r3, r3
   19d5a:	2b01      	cmp	r3, #1
   19d5c:	d103      	bne.n	19d66 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   19d5e:	68fb      	ldr	r3, [r7, #12]
   19d60:	2250      	movs	r2, #80	; 0x50
   19d62:	2100      	movs	r1, #0
   19d64:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   19d66:	4b22      	ldr	r3, [pc, #136]	; (19df0 <vTaskSuspend+0x140>)
   19d68:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   19d6a:	4b22      	ldr	r3, [pc, #136]	; (19df4 <vTaskSuspend+0x144>)
   19d6c:	681b      	ldr	r3, [r3, #0]
   19d6e:	2b00      	cmp	r3, #0
   19d70:	d005      	beq.n	19d7e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   19d72:	4b14      	ldr	r3, [pc, #80]	; (19dc4 <vTaskSuspend+0x114>)
   19d74:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   19d76:	4b20      	ldr	r3, [pc, #128]	; (19df8 <vTaskSuspend+0x148>)
   19d78:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   19d7a:	4b1d      	ldr	r3, [pc, #116]	; (19df0 <vTaskSuspend+0x140>)
   19d7c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   19d7e:	4b12      	ldr	r3, [pc, #72]	; (19dc8 <vTaskSuspend+0x118>)
   19d80:	681b      	ldr	r3, [r3, #0]
   19d82:	68fa      	ldr	r2, [r7, #12]
   19d84:	429a      	cmp	r2, r3
   19d86:	d118      	bne.n	19dba <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   19d88:	4b1a      	ldr	r3, [pc, #104]	; (19df4 <vTaskSuspend+0x144>)
   19d8a:	681b      	ldr	r3, [r3, #0]
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d008      	beq.n	19da2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   19d90:	4b1a      	ldr	r3, [pc, #104]	; (19dfc <vTaskSuspend+0x14c>)
   19d92:	681b      	ldr	r3, [r3, #0]
   19d94:	2b00      	cmp	r3, #0
   19d96:	d001      	beq.n	19d9c <vTaskSuspend+0xec>
   19d98:	b672      	cpsid	i
   19d9a:	e7fe      	b.n	19d9a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   19d9c:	4b18      	ldr	r3, [pc, #96]	; (19e00 <vTaskSuspend+0x150>)
   19d9e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   19da0:	e00b      	b.n	19dba <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   19da2:	4b11      	ldr	r3, [pc, #68]	; (19de8 <vTaskSuspend+0x138>)
   19da4:	681a      	ldr	r2, [r3, #0]
   19da6:	4b17      	ldr	r3, [pc, #92]	; (19e04 <vTaskSuspend+0x154>)
   19da8:	681b      	ldr	r3, [r3, #0]
   19daa:	429a      	cmp	r2, r3
   19dac:	d103      	bne.n	19db6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   19dae:	4b06      	ldr	r3, [pc, #24]	; (19dc8 <vTaskSuspend+0x118>)
   19db0:	2200      	movs	r2, #0
   19db2:	601a      	str	r2, [r3, #0]
	}
   19db4:	e001      	b.n	19dba <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   19db6:	4b14      	ldr	r3, [pc, #80]	; (19e08 <vTaskSuspend+0x158>)
   19db8:	4798      	blx	r3
	}
   19dba:	46c0      	nop			; (mov r8, r8)
   19dbc:	46bd      	mov	sp, r7
   19dbe:	b004      	add	sp, #16
   19dc0:	bd80      	pop	{r7, pc}
   19dc2:	46c0      	nop			; (mov r8, r8)
   19dc4:	00017bd9 	.word	0x00017bd9
   19dc8:	2000393c 	.word	0x2000393c
   19dcc:	00015e75 	.word	0x00015e75
   19dd0:	00015bd9 	.word	0x00015bd9
   19dd4:	20000038 	.word	0x20000038
   19dd8:	00015bb9 	.word	0x00015bb9
   19ddc:	000165d1 	.word	0x000165d1
   19de0:	00016d69 	.word	0x00016d69
   19de4:	00017a53 	.word	0x00017a53
   19de8:	20003a00 	.word	0x20003a00
   19dec:	000179a3 	.word	0x000179a3
   19df0:	00017bfd 	.word	0x00017bfd
   19df4:	20003a20 	.word	0x20003a20
   19df8:	0001a851 	.word	0x0001a851
   19dfc:	20003a3c 	.word	0x20003a3c
   19e00:	00017bc1 	.word	0x00017bc1
   19e04:	20003a14 	.word	0x20003a14
   19e08:	0001a225 	.word	0x0001a225

00019e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   19e0c:	b590      	push	{r4, r7, lr}
   19e0e:	b085      	sub	sp, #20
   19e10:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   19e12:	4916      	ldr	r1, [pc, #88]	; (19e6c <vTaskStartScheduler+0x60>)
   19e14:	4816      	ldr	r0, [pc, #88]	; (19e70 <vTaskStartScheduler+0x64>)
   19e16:	4b17      	ldr	r3, [pc, #92]	; (19e74 <vTaskStartScheduler+0x68>)
   19e18:	9301      	str	r3, [sp, #4]
   19e1a:	2300      	movs	r3, #0
   19e1c:	9300      	str	r3, [sp, #0]
   19e1e:	2300      	movs	r3, #0
   19e20:	2296      	movs	r2, #150	; 0x96
   19e22:	4c15      	ldr	r4, [pc, #84]	; (19e78 <vTaskStartScheduler+0x6c>)
   19e24:	47a0      	blx	r4
   19e26:	0003      	movs	r3, r0
   19e28:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   19e2a:	687b      	ldr	r3, [r7, #4]
   19e2c:	2b01      	cmp	r3, #1
   19e2e:	d103      	bne.n	19e38 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   19e30:	4b12      	ldr	r3, [pc, #72]	; (19e7c <vTaskStartScheduler+0x70>)
   19e32:	4798      	blx	r3
   19e34:	0003      	movs	r3, r0
   19e36:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   19e38:	687b      	ldr	r3, [r7, #4]
   19e3a:	2b01      	cmp	r3, #1
   19e3c:	d10d      	bne.n	19e5a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   19e3e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   19e40:	4b0f      	ldr	r3, [pc, #60]	; (19e80 <vTaskStartScheduler+0x74>)
   19e42:	2201      	movs	r2, #1
   19e44:	4252      	negs	r2, r2
   19e46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   19e48:	4b0e      	ldr	r3, [pc, #56]	; (19e84 <vTaskStartScheduler+0x78>)
   19e4a:	2201      	movs	r2, #1
   19e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   19e4e:	4b0e      	ldr	r3, [pc, #56]	; (19e88 <vTaskStartScheduler+0x7c>)
   19e50:	2200      	movs	r2, #0
   19e52:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   19e54:	4b0d      	ldr	r3, [pc, #52]	; (19e8c <vTaskStartScheduler+0x80>)
   19e56:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   19e58:	e004      	b.n	19e64 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   19e5a:	687b      	ldr	r3, [r7, #4]
   19e5c:	3301      	adds	r3, #1
   19e5e:	d101      	bne.n	19e64 <vTaskStartScheduler+0x58>
   19e60:	b672      	cpsid	i
   19e62:	e7fe      	b.n	19e62 <vTaskStartScheduler+0x56>
}
   19e64:	46c0      	nop			; (mov r8, r8)
   19e66:	46bd      	mov	sp, r7
   19e68:	b003      	add	sp, #12
   19e6a:	bd90      	pop	{r4, r7, pc}
   19e6c:	00024318 	.word	0x00024318
   19e70:	0001a699 	.word	0x0001a699
   19e74:	20003a38 	.word	0x20003a38
   19e78:	00019835 	.word	0x00019835
   19e7c:	0001ae59 	.word	0x0001ae59
   19e80:	20003a34 	.word	0x20003a34
   19e84:	20003a20 	.word	0x20003a20
   19e88:	20003a18 	.word	0x20003a18
   19e8c:	00017b69 	.word	0x00017b69

00019e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   19e90:	b580      	push	{r7, lr}
   19e92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   19e94:	4b03      	ldr	r3, [pc, #12]	; (19ea4 <vTaskSuspendAll+0x14>)
   19e96:	681b      	ldr	r3, [r3, #0]
   19e98:	1c5a      	adds	r2, r3, #1
   19e9a:	4b02      	ldr	r3, [pc, #8]	; (19ea4 <vTaskSuspendAll+0x14>)
   19e9c:	601a      	str	r2, [r3, #0]
}
   19e9e:	46c0      	nop			; (mov r8, r8)
   19ea0:	46bd      	mov	sp, r7
   19ea2:	bd80      	pop	{r7, pc}
   19ea4:	20003a3c 	.word	0x20003a3c

00019ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   19ea8:	b580      	push	{r7, lr}
   19eaa:	b084      	sub	sp, #16
   19eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   19eae:	2300      	movs	r3, #0
   19eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   19eb2:	2300      	movs	r3, #0
   19eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   19eb6:	4b45      	ldr	r3, [pc, #276]	; (19fcc <xTaskResumeAll+0x124>)
   19eb8:	681b      	ldr	r3, [r3, #0]
   19eba:	2b00      	cmp	r3, #0
   19ebc:	d101      	bne.n	19ec2 <xTaskResumeAll+0x1a>
   19ebe:	b672      	cpsid	i
   19ec0:	e7fe      	b.n	19ec0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   19ec2:	4b43      	ldr	r3, [pc, #268]	; (19fd0 <xTaskResumeAll+0x128>)
   19ec4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   19ec6:	4b41      	ldr	r3, [pc, #260]	; (19fcc <xTaskResumeAll+0x124>)
   19ec8:	681b      	ldr	r3, [r3, #0]
   19eca:	1e5a      	subs	r2, r3, #1
   19ecc:	4b3f      	ldr	r3, [pc, #252]	; (19fcc <xTaskResumeAll+0x124>)
   19ece:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   19ed0:	4b3e      	ldr	r3, [pc, #248]	; (19fcc <xTaskResumeAll+0x124>)
   19ed2:	681b      	ldr	r3, [r3, #0]
   19ed4:	2b00      	cmp	r3, #0
   19ed6:	d000      	beq.n	19eda <xTaskResumeAll+0x32>
   19ed8:	e071      	b.n	19fbe <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   19eda:	4b3e      	ldr	r3, [pc, #248]	; (19fd4 <xTaskResumeAll+0x12c>)
   19edc:	681b      	ldr	r3, [r3, #0]
   19ede:	2b00      	cmp	r3, #0
   19ee0:	d100      	bne.n	19ee4 <xTaskResumeAll+0x3c>
   19ee2:	e06c      	b.n	19fbe <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   19ee4:	e044      	b.n	19f70 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   19ee6:	4b3c      	ldr	r3, [pc, #240]	; (19fd8 <xTaskResumeAll+0x130>)
   19ee8:	68db      	ldr	r3, [r3, #12]
   19eea:	68db      	ldr	r3, [r3, #12]
   19eec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   19eee:	68fb      	ldr	r3, [r7, #12]
   19ef0:	3318      	adds	r3, #24
   19ef2:	0018      	movs	r0, r3
   19ef4:	4b39      	ldr	r3, [pc, #228]	; (19fdc <xTaskResumeAll+0x134>)
   19ef6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   19ef8:	68fb      	ldr	r3, [r7, #12]
   19efa:	3304      	adds	r3, #4
   19efc:	0018      	movs	r0, r3
   19efe:	4b37      	ldr	r3, [pc, #220]	; (19fdc <xTaskResumeAll+0x134>)
   19f00:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   19f02:	68fb      	ldr	r3, [r7, #12]
   19f04:	0018      	movs	r0, r3
   19f06:	4b36      	ldr	r3, [pc, #216]	; (19fe0 <xTaskResumeAll+0x138>)
   19f08:	4798      	blx	r3
   19f0a:	0003      	movs	r3, r0
   19f0c:	001a      	movs	r2, r3
   19f0e:	4b35      	ldr	r3, [pc, #212]	; (19fe4 <xTaskResumeAll+0x13c>)
   19f10:	881b      	ldrh	r3, [r3, #0]
   19f12:	4013      	ands	r3, r2
   19f14:	b29b      	uxth	r3, r3
   19f16:	2b00      	cmp	r3, #0
   19f18:	d008      	beq.n	19f2c <xTaskResumeAll+0x84>
   19f1a:	68fb      	ldr	r3, [r7, #12]
   19f1c:	0018      	movs	r0, r3
   19f1e:	4b32      	ldr	r3, [pc, #200]	; (19fe8 <xTaskResumeAll+0x140>)
   19f20:	4798      	blx	r3
   19f22:	0003      	movs	r3, r0
   19f24:	b2db      	uxtb	r3, r3
   19f26:	0018      	movs	r0, r3
   19f28:	4b30      	ldr	r3, [pc, #192]	; (19fec <xTaskResumeAll+0x144>)
   19f2a:	4798      	blx	r3
   19f2c:	68fb      	ldr	r3, [r7, #12]
   19f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19f30:	4b2f      	ldr	r3, [pc, #188]	; (19ff0 <xTaskResumeAll+0x148>)
   19f32:	681b      	ldr	r3, [r3, #0]
   19f34:	429a      	cmp	r2, r3
   19f36:	d903      	bls.n	19f40 <xTaskResumeAll+0x98>
   19f38:	68fb      	ldr	r3, [r7, #12]
   19f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19f3c:	4b2c      	ldr	r3, [pc, #176]	; (19ff0 <xTaskResumeAll+0x148>)
   19f3e:	601a      	str	r2, [r3, #0]
   19f40:	68fb      	ldr	r3, [r7, #12]
   19f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19f44:	0013      	movs	r3, r2
   19f46:	009b      	lsls	r3, r3, #2
   19f48:	189b      	adds	r3, r3, r2
   19f4a:	009b      	lsls	r3, r3, #2
   19f4c:	4a29      	ldr	r2, [pc, #164]	; (19ff4 <xTaskResumeAll+0x14c>)
   19f4e:	189a      	adds	r2, r3, r2
   19f50:	68fb      	ldr	r3, [r7, #12]
   19f52:	3304      	adds	r3, #4
   19f54:	0019      	movs	r1, r3
   19f56:	0010      	movs	r0, r2
   19f58:	4b27      	ldr	r3, [pc, #156]	; (19ff8 <xTaskResumeAll+0x150>)
   19f5a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   19f5c:	68fb      	ldr	r3, [r7, #12]
   19f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19f60:	4b26      	ldr	r3, [pc, #152]	; (19ffc <xTaskResumeAll+0x154>)
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   19f66:	429a      	cmp	r2, r3
   19f68:	d302      	bcc.n	19f70 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   19f6a:	4b25      	ldr	r3, [pc, #148]	; (1a000 <xTaskResumeAll+0x158>)
   19f6c:	2201      	movs	r2, #1
   19f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   19f70:	4b19      	ldr	r3, [pc, #100]	; (19fd8 <xTaskResumeAll+0x130>)
   19f72:	681b      	ldr	r3, [r3, #0]
   19f74:	2b00      	cmp	r3, #0
   19f76:	d1b6      	bne.n	19ee6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   19f78:	68fb      	ldr	r3, [r7, #12]
   19f7a:	2b00      	cmp	r3, #0
   19f7c:	d001      	beq.n	19f82 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   19f7e:	4b21      	ldr	r3, [pc, #132]	; (1a004 <xTaskResumeAll+0x15c>)
   19f80:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   19f82:	4b21      	ldr	r3, [pc, #132]	; (1a008 <xTaskResumeAll+0x160>)
   19f84:	681b      	ldr	r3, [r3, #0]
   19f86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   19f88:	687b      	ldr	r3, [r7, #4]
   19f8a:	2b00      	cmp	r3, #0
   19f8c:	d00f      	beq.n	19fae <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   19f8e:	4b1f      	ldr	r3, [pc, #124]	; (1a00c <xTaskResumeAll+0x164>)
   19f90:	4798      	blx	r3
   19f92:	1e03      	subs	r3, r0, #0
   19f94:	d002      	beq.n	19f9c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   19f96:	4b1a      	ldr	r3, [pc, #104]	; (1a000 <xTaskResumeAll+0x158>)
   19f98:	2201      	movs	r2, #1
   19f9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   19f9c:	687b      	ldr	r3, [r7, #4]
   19f9e:	3b01      	subs	r3, #1
   19fa0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   19fa2:	687b      	ldr	r3, [r7, #4]
   19fa4:	2b00      	cmp	r3, #0
   19fa6:	d1f2      	bne.n	19f8e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   19fa8:	4b17      	ldr	r3, [pc, #92]	; (1a008 <xTaskResumeAll+0x160>)
   19faa:	2200      	movs	r2, #0
   19fac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   19fae:	4b14      	ldr	r3, [pc, #80]	; (1a000 <xTaskResumeAll+0x158>)
   19fb0:	681b      	ldr	r3, [r3, #0]
   19fb2:	2b00      	cmp	r3, #0
   19fb4:	d003      	beq.n	19fbe <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   19fb6:	2301      	movs	r3, #1
   19fb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   19fba:	4b15      	ldr	r3, [pc, #84]	; (1a010 <xTaskResumeAll+0x168>)
   19fbc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   19fbe:	4b15      	ldr	r3, [pc, #84]	; (1a014 <xTaskResumeAll+0x16c>)
   19fc0:	4798      	blx	r3

	return xAlreadyYielded;
   19fc2:	68bb      	ldr	r3, [r7, #8]
}
   19fc4:	0018      	movs	r0, r3
   19fc6:	46bd      	mov	sp, r7
   19fc8:	b004      	add	sp, #16
   19fca:	bd80      	pop	{r7, pc}
   19fcc:	20003a3c 	.word	0x20003a3c
   19fd0:	00017bd9 	.word	0x00017bd9
   19fd4:	20003a14 	.word	0x20003a14
   19fd8:	200039d4 	.word	0x200039d4
   19fdc:	00017a53 	.word	0x00017a53
   19fe0:	00015bd9 	.word	0x00015bd9
   19fe4:	20000038 	.word	0x20000038
   19fe8:	00015bb9 	.word	0x00015bb9
   19fec:	00016389 	.word	0x00016389
   19ff0:	20003a1c 	.word	0x20003a1c
   19ff4:	20003940 	.word	0x20003940
   19ff8:	000179a3 	.word	0x000179a3
   19ffc:	2000393c 	.word	0x2000393c
   1a000:	20003a28 	.word	0x20003a28
   1a004:	0001a851 	.word	0x0001a851
   1a008:	20003a24 	.word	0x20003a24
   1a00c:	0001a035 	.word	0x0001a035
   1a010:	00017bc1 	.word	0x00017bc1
   1a014:	00017bfd 	.word	0x00017bfd

0001a018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1a018:	b580      	push	{r7, lr}
   1a01a:	b082      	sub	sp, #8
   1a01c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1a01e:	4b04      	ldr	r3, [pc, #16]	; (1a030 <xTaskGetTickCount+0x18>)
   1a020:	681b      	ldr	r3, [r3, #0]
   1a022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1a024:	687b      	ldr	r3, [r7, #4]
}
   1a026:	0018      	movs	r0, r3
   1a028:	46bd      	mov	sp, r7
   1a02a:	b002      	add	sp, #8
   1a02c:	bd80      	pop	{r7, pc}
   1a02e:	46c0      	nop			; (mov r8, r8)
   1a030:	20003a18 	.word	0x20003a18

0001a034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1a034:	b580      	push	{r7, lr}
   1a036:	b086      	sub	sp, #24
   1a038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1a03a:	2300      	movs	r3, #0
   1a03c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1a03e:	4b64      	ldr	r3, [pc, #400]	; (1a1d0 <xTaskIncrementTick+0x19c>)
   1a040:	681b      	ldr	r3, [r3, #0]
   1a042:	2b01      	cmp	r3, #1
   1a044:	d003      	beq.n	1a04e <xTaskIncrementTick+0x1a>
   1a046:	4b63      	ldr	r3, [pc, #396]	; (1a1d4 <xTaskIncrementTick+0x1a0>)
   1a048:	681b      	ldr	r3, [r3, #0]
   1a04a:	2b00      	cmp	r3, #0
   1a04c:	d107      	bne.n	1a05e <xTaskIncrementTick+0x2a>
   1a04e:	4b62      	ldr	r3, [pc, #392]	; (1a1d8 <xTaskIncrementTick+0x1a4>)
   1a050:	681b      	ldr	r3, [r3, #0]
   1a052:	1c5a      	adds	r2, r3, #1
   1a054:	4b60      	ldr	r3, [pc, #384]	; (1a1d8 <xTaskIncrementTick+0x1a4>)
   1a056:	601a      	str	r2, [r3, #0]
   1a058:	2000      	movs	r0, #0
   1a05a:	4b60      	ldr	r3, [pc, #384]	; (1a1dc <xTaskIncrementTick+0x1a8>)
   1a05c:	4798      	blx	r3
   1a05e:	4b5c      	ldr	r3, [pc, #368]	; (1a1d0 <xTaskIncrementTick+0x19c>)
   1a060:	681b      	ldr	r3, [r3, #0]
   1a062:	2b00      	cmp	r3, #0
   1a064:	d106      	bne.n	1a074 <xTaskIncrementTick+0x40>
   1a066:	4b5e      	ldr	r3, [pc, #376]	; (1a1e0 <xTaskIncrementTick+0x1ac>)
   1a068:	681b      	ldr	r3, [r3, #0]
   1a06a:	3301      	adds	r3, #1
   1a06c:	0019      	movs	r1, r3
   1a06e:	2003      	movs	r0, #3
   1a070:	4b5c      	ldr	r3, [pc, #368]	; (1a1e4 <xTaskIncrementTick+0x1b0>)
   1a072:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1a074:	4b56      	ldr	r3, [pc, #344]	; (1a1d0 <xTaskIncrementTick+0x19c>)
   1a076:	681b      	ldr	r3, [r3, #0]
   1a078:	2b00      	cmp	r3, #0
   1a07a:	d000      	beq.n	1a07e <xTaskIncrementTick+0x4a>
   1a07c:	e098      	b.n	1a1b0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1a07e:	4b58      	ldr	r3, [pc, #352]	; (1a1e0 <xTaskIncrementTick+0x1ac>)
   1a080:	681b      	ldr	r3, [r3, #0]
   1a082:	3301      	adds	r3, #1
   1a084:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1a086:	4b56      	ldr	r3, [pc, #344]	; (1a1e0 <xTaskIncrementTick+0x1ac>)
   1a088:	693a      	ldr	r2, [r7, #16]
   1a08a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1a08c:	693b      	ldr	r3, [r7, #16]
   1a08e:	2b00      	cmp	r3, #0
   1a090:	d117      	bne.n	1a0c2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1a092:	4b55      	ldr	r3, [pc, #340]	; (1a1e8 <xTaskIncrementTick+0x1b4>)
   1a094:	681b      	ldr	r3, [r3, #0]
   1a096:	681b      	ldr	r3, [r3, #0]
   1a098:	2b00      	cmp	r3, #0
   1a09a:	d001      	beq.n	1a0a0 <xTaskIncrementTick+0x6c>
   1a09c:	b672      	cpsid	i
   1a09e:	e7fe      	b.n	1a09e <xTaskIncrementTick+0x6a>
   1a0a0:	4b51      	ldr	r3, [pc, #324]	; (1a1e8 <xTaskIncrementTick+0x1b4>)
   1a0a2:	681b      	ldr	r3, [r3, #0]
   1a0a4:	60fb      	str	r3, [r7, #12]
   1a0a6:	4b51      	ldr	r3, [pc, #324]	; (1a1ec <xTaskIncrementTick+0x1b8>)
   1a0a8:	681a      	ldr	r2, [r3, #0]
   1a0aa:	4b4f      	ldr	r3, [pc, #316]	; (1a1e8 <xTaskIncrementTick+0x1b4>)
   1a0ac:	601a      	str	r2, [r3, #0]
   1a0ae:	4b4f      	ldr	r3, [pc, #316]	; (1a1ec <xTaskIncrementTick+0x1b8>)
   1a0b0:	68fa      	ldr	r2, [r7, #12]
   1a0b2:	601a      	str	r2, [r3, #0]
   1a0b4:	4b4e      	ldr	r3, [pc, #312]	; (1a1f0 <xTaskIncrementTick+0x1bc>)
   1a0b6:	681b      	ldr	r3, [r3, #0]
   1a0b8:	1c5a      	adds	r2, r3, #1
   1a0ba:	4b4d      	ldr	r3, [pc, #308]	; (1a1f0 <xTaskIncrementTick+0x1bc>)
   1a0bc:	601a      	str	r2, [r3, #0]
   1a0be:	4b4d      	ldr	r3, [pc, #308]	; (1a1f4 <xTaskIncrementTick+0x1c0>)
   1a0c0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1a0c2:	4b4d      	ldr	r3, [pc, #308]	; (1a1f8 <xTaskIncrementTick+0x1c4>)
   1a0c4:	681b      	ldr	r3, [r3, #0]
   1a0c6:	693a      	ldr	r2, [r7, #16]
   1a0c8:	429a      	cmp	r2, r3
   1a0ca:	d363      	bcc.n	1a194 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1a0cc:	4b46      	ldr	r3, [pc, #280]	; (1a1e8 <xTaskIncrementTick+0x1b4>)
   1a0ce:	681b      	ldr	r3, [r3, #0]
   1a0d0:	681b      	ldr	r3, [r3, #0]
   1a0d2:	2b00      	cmp	r3, #0
   1a0d4:	d101      	bne.n	1a0da <xTaskIncrementTick+0xa6>
   1a0d6:	2301      	movs	r3, #1
   1a0d8:	e000      	b.n	1a0dc <xTaskIncrementTick+0xa8>
   1a0da:	2300      	movs	r3, #0
   1a0dc:	2b00      	cmp	r3, #0
   1a0de:	d004      	beq.n	1a0ea <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a0e0:	4b45      	ldr	r3, [pc, #276]	; (1a1f8 <xTaskIncrementTick+0x1c4>)
   1a0e2:	2201      	movs	r2, #1
   1a0e4:	4252      	negs	r2, r2
   1a0e6:	601a      	str	r2, [r3, #0]
					break;
   1a0e8:	e054      	b.n	1a194 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1a0ea:	4b3f      	ldr	r3, [pc, #252]	; (1a1e8 <xTaskIncrementTick+0x1b4>)
   1a0ec:	681b      	ldr	r3, [r3, #0]
   1a0ee:	68db      	ldr	r3, [r3, #12]
   1a0f0:	68db      	ldr	r3, [r3, #12]
   1a0f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1a0f4:	68bb      	ldr	r3, [r7, #8]
   1a0f6:	685b      	ldr	r3, [r3, #4]
   1a0f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1a0fa:	693a      	ldr	r2, [r7, #16]
   1a0fc:	687b      	ldr	r3, [r7, #4]
   1a0fe:	429a      	cmp	r2, r3
   1a100:	d203      	bcs.n	1a10a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1a102:	4b3d      	ldr	r3, [pc, #244]	; (1a1f8 <xTaskIncrementTick+0x1c4>)
   1a104:	687a      	ldr	r2, [r7, #4]
   1a106:	601a      	str	r2, [r3, #0]
						break;
   1a108:	e044      	b.n	1a194 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1a10a:	68bb      	ldr	r3, [r7, #8]
   1a10c:	3304      	adds	r3, #4
   1a10e:	0018      	movs	r0, r3
   1a110:	4b3a      	ldr	r3, [pc, #232]	; (1a1fc <xTaskIncrementTick+0x1c8>)
   1a112:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1a114:	68bb      	ldr	r3, [r7, #8]
   1a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a118:	2b00      	cmp	r3, #0
   1a11a:	d004      	beq.n	1a126 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1a11c:	68bb      	ldr	r3, [r7, #8]
   1a11e:	3318      	adds	r3, #24
   1a120:	0018      	movs	r0, r3
   1a122:	4b36      	ldr	r3, [pc, #216]	; (1a1fc <xTaskIncrementTick+0x1c8>)
   1a124:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1a126:	68bb      	ldr	r3, [r7, #8]
   1a128:	0018      	movs	r0, r3
   1a12a:	4b35      	ldr	r3, [pc, #212]	; (1a200 <xTaskIncrementTick+0x1cc>)
   1a12c:	4798      	blx	r3
   1a12e:	0003      	movs	r3, r0
   1a130:	001a      	movs	r2, r3
   1a132:	4b34      	ldr	r3, [pc, #208]	; (1a204 <xTaskIncrementTick+0x1d0>)
   1a134:	881b      	ldrh	r3, [r3, #0]
   1a136:	4013      	ands	r3, r2
   1a138:	b29b      	uxth	r3, r3
   1a13a:	2b00      	cmp	r3, #0
   1a13c:	d008      	beq.n	1a150 <xTaskIncrementTick+0x11c>
   1a13e:	68bb      	ldr	r3, [r7, #8]
   1a140:	0018      	movs	r0, r3
   1a142:	4b31      	ldr	r3, [pc, #196]	; (1a208 <xTaskIncrementTick+0x1d4>)
   1a144:	4798      	blx	r3
   1a146:	0003      	movs	r3, r0
   1a148:	b2db      	uxtb	r3, r3
   1a14a:	0018      	movs	r0, r3
   1a14c:	4b2f      	ldr	r3, [pc, #188]	; (1a20c <xTaskIncrementTick+0x1d8>)
   1a14e:	4798      	blx	r3
   1a150:	68bb      	ldr	r3, [r7, #8]
   1a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a154:	4b2e      	ldr	r3, [pc, #184]	; (1a210 <xTaskIncrementTick+0x1dc>)
   1a156:	681b      	ldr	r3, [r3, #0]
   1a158:	429a      	cmp	r2, r3
   1a15a:	d903      	bls.n	1a164 <xTaskIncrementTick+0x130>
   1a15c:	68bb      	ldr	r3, [r7, #8]
   1a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a160:	4b2b      	ldr	r3, [pc, #172]	; (1a210 <xTaskIncrementTick+0x1dc>)
   1a162:	601a      	str	r2, [r3, #0]
   1a164:	68bb      	ldr	r3, [r7, #8]
   1a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a168:	0013      	movs	r3, r2
   1a16a:	009b      	lsls	r3, r3, #2
   1a16c:	189b      	adds	r3, r3, r2
   1a16e:	009b      	lsls	r3, r3, #2
   1a170:	4a28      	ldr	r2, [pc, #160]	; (1a214 <xTaskIncrementTick+0x1e0>)
   1a172:	189a      	adds	r2, r3, r2
   1a174:	68bb      	ldr	r3, [r7, #8]
   1a176:	3304      	adds	r3, #4
   1a178:	0019      	movs	r1, r3
   1a17a:	0010      	movs	r0, r2
   1a17c:	4b26      	ldr	r3, [pc, #152]	; (1a218 <xTaskIncrementTick+0x1e4>)
   1a17e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1a180:	68bb      	ldr	r3, [r7, #8]
   1a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a184:	4b25      	ldr	r3, [pc, #148]	; (1a21c <xTaskIncrementTick+0x1e8>)
   1a186:	681b      	ldr	r3, [r3, #0]
   1a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a18a:	429a      	cmp	r2, r3
   1a18c:	d39e      	bcc.n	1a0cc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1a18e:	2301      	movs	r3, #1
   1a190:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1a192:	e79b      	b.n	1a0cc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1a194:	4b21      	ldr	r3, [pc, #132]	; (1a21c <xTaskIncrementTick+0x1e8>)
   1a196:	681b      	ldr	r3, [r3, #0]
   1a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a19a:	491e      	ldr	r1, [pc, #120]	; (1a214 <xTaskIncrementTick+0x1e0>)
   1a19c:	0013      	movs	r3, r2
   1a19e:	009b      	lsls	r3, r3, #2
   1a1a0:	189b      	adds	r3, r3, r2
   1a1a2:	009b      	lsls	r3, r3, #2
   1a1a4:	585b      	ldr	r3, [r3, r1]
   1a1a6:	2b01      	cmp	r3, #1
   1a1a8:	d907      	bls.n	1a1ba <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1a1aa:	2301      	movs	r3, #1
   1a1ac:	617b      	str	r3, [r7, #20]
   1a1ae:	e004      	b.n	1a1ba <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1a1b0:	4b08      	ldr	r3, [pc, #32]	; (1a1d4 <xTaskIncrementTick+0x1a0>)
   1a1b2:	681b      	ldr	r3, [r3, #0]
   1a1b4:	1c5a      	adds	r2, r3, #1
   1a1b6:	4b07      	ldr	r3, [pc, #28]	; (1a1d4 <xTaskIncrementTick+0x1a0>)
   1a1b8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1a1ba:	4b19      	ldr	r3, [pc, #100]	; (1a220 <xTaskIncrementTick+0x1ec>)
   1a1bc:	681b      	ldr	r3, [r3, #0]
   1a1be:	2b00      	cmp	r3, #0
   1a1c0:	d001      	beq.n	1a1c6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1a1c2:	2301      	movs	r3, #1
   1a1c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1a1c6:	697b      	ldr	r3, [r7, #20]
}
   1a1c8:	0018      	movs	r0, r3
   1a1ca:	46bd      	mov	sp, r7
   1a1cc:	b006      	add	sp, #24
   1a1ce:	bd80      	pop	{r7, pc}
   1a1d0:	20003a3c 	.word	0x20003a3c
   1a1d4:	20003a24 	.word	0x20003a24
   1a1d8:	2000059c 	.word	0x2000059c
   1a1dc:	0001786d 	.word	0x0001786d
   1a1e0:	20003a18 	.word	0x20003a18
   1a1e4:	000168d9 	.word	0x000168d9
   1a1e8:	200039cc 	.word	0x200039cc
   1a1ec:	200039d0 	.word	0x200039d0
   1a1f0:	20003a2c 	.word	0x20003a2c
   1a1f4:	0001a851 	.word	0x0001a851
   1a1f8:	20003a34 	.word	0x20003a34
   1a1fc:	00017a53 	.word	0x00017a53
   1a200:	00015bd9 	.word	0x00015bd9
   1a204:	20000038 	.word	0x20000038
   1a208:	00015bb9 	.word	0x00015bb9
   1a20c:	00016389 	.word	0x00016389
   1a210:	20003a1c 	.word	0x20003a1c
   1a214:	20003940 	.word	0x20003940
   1a218:	000179a3 	.word	0x000179a3
   1a21c:	2000393c 	.word	0x2000393c
   1a220:	20003a28 	.word	0x20003a28

0001a224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1a224:	b580      	push	{r7, lr}
   1a226:	b082      	sub	sp, #8
   1a228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1a22a:	4b3a      	ldr	r3, [pc, #232]	; (1a314 <vTaskSwitchContext+0xf0>)
   1a22c:	681b      	ldr	r3, [r3, #0]
   1a22e:	2b00      	cmp	r3, #0
   1a230:	d003      	beq.n	1a23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1a232:	4b39      	ldr	r3, [pc, #228]	; (1a318 <vTaskSwitchContext+0xf4>)
   1a234:	2201      	movs	r2, #1
   1a236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1a238:	e067      	b.n	1a30a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1a23a:	4b37      	ldr	r3, [pc, #220]	; (1a318 <vTaskSwitchContext+0xf4>)
   1a23c:	2200      	movs	r2, #0
   1a23e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1a240:	4b36      	ldr	r3, [pc, #216]	; (1a31c <vTaskSwitchContext+0xf8>)
   1a242:	681b      	ldr	r3, [r3, #0]
   1a244:	681a      	ldr	r2, [r3, #0]
   1a246:	4b35      	ldr	r3, [pc, #212]	; (1a31c <vTaskSwitchContext+0xf8>)
   1a248:	681b      	ldr	r3, [r3, #0]
   1a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a24c:	429a      	cmp	r2, r3
   1a24e:	d808      	bhi.n	1a262 <vTaskSwitchContext+0x3e>
   1a250:	4b32      	ldr	r3, [pc, #200]	; (1a31c <vTaskSwitchContext+0xf8>)
   1a252:	681a      	ldr	r2, [r3, #0]
   1a254:	4b31      	ldr	r3, [pc, #196]	; (1a31c <vTaskSwitchContext+0xf8>)
   1a256:	681b      	ldr	r3, [r3, #0]
   1a258:	3334      	adds	r3, #52	; 0x34
   1a25a:	0019      	movs	r1, r3
   1a25c:	0010      	movs	r0, r2
   1a25e:	4b30      	ldr	r3, [pc, #192]	; (1a320 <vTaskSwitchContext+0xfc>)
   1a260:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1a262:	4b30      	ldr	r3, [pc, #192]	; (1a324 <vTaskSwitchContext+0x100>)
   1a264:	681b      	ldr	r3, [r3, #0]
   1a266:	607b      	str	r3, [r7, #4]
   1a268:	e007      	b.n	1a27a <vTaskSwitchContext+0x56>
   1a26a:	687b      	ldr	r3, [r7, #4]
   1a26c:	2b00      	cmp	r3, #0
   1a26e:	d101      	bne.n	1a274 <vTaskSwitchContext+0x50>
   1a270:	b672      	cpsid	i
   1a272:	e7fe      	b.n	1a272 <vTaskSwitchContext+0x4e>
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	3b01      	subs	r3, #1
   1a278:	607b      	str	r3, [r7, #4]
   1a27a:	492b      	ldr	r1, [pc, #172]	; (1a328 <vTaskSwitchContext+0x104>)
   1a27c:	687a      	ldr	r2, [r7, #4]
   1a27e:	0013      	movs	r3, r2
   1a280:	009b      	lsls	r3, r3, #2
   1a282:	189b      	adds	r3, r3, r2
   1a284:	009b      	lsls	r3, r3, #2
   1a286:	585b      	ldr	r3, [r3, r1]
   1a288:	2b00      	cmp	r3, #0
   1a28a:	d0ee      	beq.n	1a26a <vTaskSwitchContext+0x46>
   1a28c:	687a      	ldr	r2, [r7, #4]
   1a28e:	0013      	movs	r3, r2
   1a290:	009b      	lsls	r3, r3, #2
   1a292:	189b      	adds	r3, r3, r2
   1a294:	009b      	lsls	r3, r3, #2
   1a296:	4a24      	ldr	r2, [pc, #144]	; (1a328 <vTaskSwitchContext+0x104>)
   1a298:	189b      	adds	r3, r3, r2
   1a29a:	603b      	str	r3, [r7, #0]
   1a29c:	683b      	ldr	r3, [r7, #0]
   1a29e:	685b      	ldr	r3, [r3, #4]
   1a2a0:	685a      	ldr	r2, [r3, #4]
   1a2a2:	683b      	ldr	r3, [r7, #0]
   1a2a4:	605a      	str	r2, [r3, #4]
   1a2a6:	683b      	ldr	r3, [r7, #0]
   1a2a8:	685a      	ldr	r2, [r3, #4]
   1a2aa:	683b      	ldr	r3, [r7, #0]
   1a2ac:	3308      	adds	r3, #8
   1a2ae:	429a      	cmp	r2, r3
   1a2b0:	d104      	bne.n	1a2bc <vTaskSwitchContext+0x98>
   1a2b2:	683b      	ldr	r3, [r7, #0]
   1a2b4:	685b      	ldr	r3, [r3, #4]
   1a2b6:	685a      	ldr	r2, [r3, #4]
   1a2b8:	683b      	ldr	r3, [r7, #0]
   1a2ba:	605a      	str	r2, [r3, #4]
   1a2bc:	683b      	ldr	r3, [r7, #0]
   1a2be:	685b      	ldr	r3, [r3, #4]
   1a2c0:	68da      	ldr	r2, [r3, #12]
   1a2c2:	4b16      	ldr	r3, [pc, #88]	; (1a31c <vTaskSwitchContext+0xf8>)
   1a2c4:	601a      	str	r2, [r3, #0]
   1a2c6:	4b17      	ldr	r3, [pc, #92]	; (1a324 <vTaskSwitchContext+0x100>)
   1a2c8:	687a      	ldr	r2, [r7, #4]
   1a2ca:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1a2cc:	4b17      	ldr	r3, [pc, #92]	; (1a32c <vTaskSwitchContext+0x108>)
   1a2ce:	2201      	movs	r2, #1
   1a2d0:	601a      	str	r2, [r3, #0]
   1a2d2:	4b17      	ldr	r3, [pc, #92]	; (1a330 <vTaskSwitchContext+0x10c>)
   1a2d4:	4798      	blx	r3
   1a2d6:	0003      	movs	r3, r0
   1a2d8:	0018      	movs	r0, r3
   1a2da:	4b16      	ldr	r3, [pc, #88]	; (1a334 <vTaskSwitchContext+0x110>)
   1a2dc:	4798      	blx	r3
   1a2de:	0003      	movs	r3, r0
   1a2e0:	001a      	movs	r2, r3
   1a2e2:	4b15      	ldr	r3, [pc, #84]	; (1a338 <vTaskSwitchContext+0x114>)
   1a2e4:	881b      	ldrh	r3, [r3, #0]
   1a2e6:	4013      	ands	r3, r2
   1a2e8:	b29b      	uxth	r3, r3
   1a2ea:	2b00      	cmp	r3, #0
   1a2ec:	d00a      	beq.n	1a304 <vTaskSwitchContext+0xe0>
   1a2ee:	4b10      	ldr	r3, [pc, #64]	; (1a330 <vTaskSwitchContext+0x10c>)
   1a2f0:	4798      	blx	r3
   1a2f2:	0003      	movs	r3, r0
   1a2f4:	0018      	movs	r0, r3
   1a2f6:	4b11      	ldr	r3, [pc, #68]	; (1a33c <vTaskSwitchContext+0x118>)
   1a2f8:	4798      	blx	r3
   1a2fa:	0003      	movs	r3, r0
   1a2fc:	b2db      	uxtb	r3, r3
   1a2fe:	0018      	movs	r0, r3
   1a300:	4b0f      	ldr	r3, [pc, #60]	; (1a340 <vTaskSwitchContext+0x11c>)
   1a302:	4798      	blx	r3
   1a304:	4b09      	ldr	r3, [pc, #36]	; (1a32c <vTaskSwitchContext+0x108>)
   1a306:	2202      	movs	r2, #2
   1a308:	601a      	str	r2, [r3, #0]
}
   1a30a:	46c0      	nop			; (mov r8, r8)
   1a30c:	46bd      	mov	sp, r7
   1a30e:	b002      	add	sp, #8
   1a310:	bd80      	pop	{r7, pc}
   1a312:	46c0      	nop			; (mov r8, r8)
   1a314:	20003a3c 	.word	0x20003a3c
   1a318:	20003a28 	.word	0x20003a28
   1a31c:	2000393c 	.word	0x2000393c
   1a320:	0001f3f5 	.word	0x0001f3f5
   1a324:	20003a1c 	.word	0x20003a1c
   1a328:	20003940 	.word	0x20003940
   1a32c:	200005a8 	.word	0x200005a8
   1a330:	00015e75 	.word	0x00015e75
   1a334:	00015bd9 	.word	0x00015bd9
   1a338:	20000038 	.word	0x20000038
   1a33c:	00015bb9 	.word	0x00015bb9
   1a340:	000169d5 	.word	0x000169d5

0001a344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1a344:	b580      	push	{r7, lr}
   1a346:	b082      	sub	sp, #8
   1a348:	af00      	add	r7, sp, #0
   1a34a:	6078      	str	r0, [r7, #4]
   1a34c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1a34e:	687b      	ldr	r3, [r7, #4]
   1a350:	2b00      	cmp	r3, #0
   1a352:	d101      	bne.n	1a358 <vTaskPlaceOnEventList+0x14>
   1a354:	b672      	cpsid	i
   1a356:	e7fe      	b.n	1a356 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1a358:	4b08      	ldr	r3, [pc, #32]	; (1a37c <vTaskPlaceOnEventList+0x38>)
   1a35a:	681b      	ldr	r3, [r3, #0]
   1a35c:	3318      	adds	r3, #24
   1a35e:	001a      	movs	r2, r3
   1a360:	687b      	ldr	r3, [r7, #4]
   1a362:	0011      	movs	r1, r2
   1a364:	0018      	movs	r0, r3
   1a366:	4b06      	ldr	r3, [pc, #24]	; (1a380 <vTaskPlaceOnEventList+0x3c>)
   1a368:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1a36a:	683b      	ldr	r3, [r7, #0]
   1a36c:	2101      	movs	r1, #1
   1a36e:	0018      	movs	r0, r3
   1a370:	4b04      	ldr	r3, [pc, #16]	; (1a384 <vTaskPlaceOnEventList+0x40>)
   1a372:	4798      	blx	r3
}
   1a374:	46c0      	nop			; (mov r8, r8)
   1a376:	46bd      	mov	sp, r7
   1a378:	b002      	add	sp, #8
   1a37a:	bd80      	pop	{r7, pc}
   1a37c:	2000393c 	.word	0x2000393c
   1a380:	000179e7 	.word	0x000179e7
   1a384:	0001ada5 	.word	0x0001ada5

0001a388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1a388:	b580      	push	{r7, lr}
   1a38a:	b084      	sub	sp, #16
   1a38c:	af00      	add	r7, sp, #0
   1a38e:	60f8      	str	r0, [r7, #12]
   1a390:	60b9      	str	r1, [r7, #8]
   1a392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1a394:	68fb      	ldr	r3, [r7, #12]
   1a396:	2b00      	cmp	r3, #0
   1a398:	d101      	bne.n	1a39e <vTaskPlaceOnEventListRestricted+0x16>
   1a39a:	b672      	cpsid	i
   1a39c:	e7fe      	b.n	1a39c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1a39e:	4b28      	ldr	r3, [pc, #160]	; (1a440 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a3a0:	681b      	ldr	r3, [r3, #0]
   1a3a2:	3318      	adds	r3, #24
   1a3a4:	001a      	movs	r2, r3
   1a3a6:	68fb      	ldr	r3, [r7, #12]
   1a3a8:	0011      	movs	r1, r2
   1a3aa:	0018      	movs	r0, r3
   1a3ac:	4b25      	ldr	r3, [pc, #148]	; (1a444 <vTaskPlaceOnEventListRestricted+0xbc>)
   1a3ae:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1a3b0:	687b      	ldr	r3, [r7, #4]
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	d002      	beq.n	1a3bc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1a3b6:	2301      	movs	r3, #1
   1a3b8:	425b      	negs	r3, r3
   1a3ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1a3bc:	4b20      	ldr	r3, [pc, #128]	; (1a440 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a3be:	681b      	ldr	r3, [r3, #0]
   1a3c0:	0018      	movs	r0, r3
   1a3c2:	4b21      	ldr	r3, [pc, #132]	; (1a448 <vTaskPlaceOnEventListRestricted+0xc0>)
   1a3c4:	4798      	blx	r3
   1a3c6:	0003      	movs	r3, r0
   1a3c8:	001a      	movs	r2, r3
   1a3ca:	4b20      	ldr	r3, [pc, #128]	; (1a44c <vTaskPlaceOnEventListRestricted+0xc4>)
   1a3cc:	881b      	ldrh	r3, [r3, #0]
   1a3ce:	4013      	ands	r3, r2
   1a3d0:	b29b      	uxth	r3, r3
   1a3d2:	2b00      	cmp	r3, #0
   1a3d4:	d011      	beq.n	1a3fa <vTaskPlaceOnEventListRestricted+0x72>
   1a3d6:	4b1e      	ldr	r3, [pc, #120]	; (1a450 <vTaskPlaceOnEventListRestricted+0xc8>)
   1a3d8:	681a      	ldr	r2, [r3, #0]
   1a3da:	68bb      	ldr	r3, [r7, #8]
   1a3dc:	18d3      	adds	r3, r2, r3
   1a3de:	0019      	movs	r1, r3
   1a3e0:	2088      	movs	r0, #136	; 0x88
   1a3e2:	4b1c      	ldr	r3, [pc, #112]	; (1a454 <vTaskPlaceOnEventListRestricted+0xcc>)
   1a3e4:	4798      	blx	r3
   1a3e6:	4b16      	ldr	r3, [pc, #88]	; (1a440 <vTaskPlaceOnEventListRestricted+0xb8>)
   1a3e8:	681b      	ldr	r3, [r3, #0]
   1a3ea:	0018      	movs	r0, r3
   1a3ec:	4b1a      	ldr	r3, [pc, #104]	; (1a458 <vTaskPlaceOnEventListRestricted+0xd0>)
   1a3ee:	4798      	blx	r3
   1a3f0:	0003      	movs	r3, r0
   1a3f2:	b2db      	uxtb	r3, r3
   1a3f4:	0018      	movs	r0, r3
   1a3f6:	4b19      	ldr	r3, [pc, #100]	; (1a45c <vTaskPlaceOnEventListRestricted+0xd4>)
   1a3f8:	4798      	blx	r3
   1a3fa:	4b19      	ldr	r3, [pc, #100]	; (1a460 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a3fc:	4798      	blx	r3
   1a3fe:	0003      	movs	r3, r0
   1a400:	0018      	movs	r0, r3
   1a402:	4b11      	ldr	r3, [pc, #68]	; (1a448 <vTaskPlaceOnEventListRestricted+0xc0>)
   1a404:	4798      	blx	r3
   1a406:	0003      	movs	r3, r0
   1a408:	001a      	movs	r2, r3
   1a40a:	4b10      	ldr	r3, [pc, #64]	; (1a44c <vTaskPlaceOnEventListRestricted+0xc4>)
   1a40c:	881b      	ldrh	r3, [r3, #0]
   1a40e:	4013      	ands	r3, r2
   1a410:	b29b      	uxth	r3, r3
   1a412:	2b00      	cmp	r3, #0
   1a414:	d00a      	beq.n	1a42c <vTaskPlaceOnEventListRestricted+0xa4>
   1a416:	4b12      	ldr	r3, [pc, #72]	; (1a460 <vTaskPlaceOnEventListRestricted+0xd8>)
   1a418:	4798      	blx	r3
   1a41a:	0003      	movs	r3, r0
   1a41c:	0018      	movs	r0, r3
   1a41e:	4b0e      	ldr	r3, [pc, #56]	; (1a458 <vTaskPlaceOnEventListRestricted+0xd0>)
   1a420:	4798      	blx	r3
   1a422:	0003      	movs	r3, r0
   1a424:	b2db      	uxtb	r3, r3
   1a426:	0018      	movs	r0, r3
   1a428:	4b0c      	ldr	r3, [pc, #48]	; (1a45c <vTaskPlaceOnEventListRestricted+0xd4>)
   1a42a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1a42c:	687a      	ldr	r2, [r7, #4]
   1a42e:	68bb      	ldr	r3, [r7, #8]
   1a430:	0011      	movs	r1, r2
   1a432:	0018      	movs	r0, r3
   1a434:	4b0b      	ldr	r3, [pc, #44]	; (1a464 <vTaskPlaceOnEventListRestricted+0xdc>)
   1a436:	4798      	blx	r3
	}
   1a438:	46c0      	nop			; (mov r8, r8)
   1a43a:	46bd      	mov	sp, r7
   1a43c:	b004      	add	sp, #16
   1a43e:	bd80      	pop	{r7, pc}
   1a440:	2000393c 	.word	0x2000393c
   1a444:	000179a3 	.word	0x000179a3
   1a448:	00015bd9 	.word	0x00015bd9
   1a44c:	20000038 	.word	0x20000038
   1a450:	20003a18 	.word	0x20003a18
   1a454:	000168d9 	.word	0x000168d9
   1a458:	00015bb9 	.word	0x00015bb9
   1a45c:	00016d69 	.word	0x00016d69
   1a460:	00015e75 	.word	0x00015e75
   1a464:	0001ada5 	.word	0x0001ada5

0001a468 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1a468:	b580      	push	{r7, lr}
   1a46a:	b084      	sub	sp, #16
   1a46c:	af00      	add	r7, sp, #0
   1a46e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1a470:	687b      	ldr	r3, [r7, #4]
   1a472:	68db      	ldr	r3, [r3, #12]
   1a474:	68db      	ldr	r3, [r3, #12]
   1a476:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1a478:	68bb      	ldr	r3, [r7, #8]
   1a47a:	2b00      	cmp	r3, #0
   1a47c:	d101      	bne.n	1a482 <xTaskRemoveFromEventList+0x1a>
   1a47e:	b672      	cpsid	i
   1a480:	e7fe      	b.n	1a480 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1a482:	68bb      	ldr	r3, [r7, #8]
   1a484:	3318      	adds	r3, #24
   1a486:	0018      	movs	r0, r3
   1a488:	4b2a      	ldr	r3, [pc, #168]	; (1a534 <xTaskRemoveFromEventList+0xcc>)
   1a48a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1a48c:	4b2a      	ldr	r3, [pc, #168]	; (1a538 <xTaskRemoveFromEventList+0xd0>)
   1a48e:	681b      	ldr	r3, [r3, #0]
   1a490:	2b00      	cmp	r3, #0
   1a492:	d132      	bne.n	1a4fa <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1a494:	68bb      	ldr	r3, [r7, #8]
   1a496:	3304      	adds	r3, #4
   1a498:	0018      	movs	r0, r3
   1a49a:	4b26      	ldr	r3, [pc, #152]	; (1a534 <xTaskRemoveFromEventList+0xcc>)
   1a49c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1a49e:	68bb      	ldr	r3, [r7, #8]
   1a4a0:	0018      	movs	r0, r3
   1a4a2:	4b26      	ldr	r3, [pc, #152]	; (1a53c <xTaskRemoveFromEventList+0xd4>)
   1a4a4:	4798      	blx	r3
   1a4a6:	0003      	movs	r3, r0
   1a4a8:	001a      	movs	r2, r3
   1a4aa:	4b25      	ldr	r3, [pc, #148]	; (1a540 <xTaskRemoveFromEventList+0xd8>)
   1a4ac:	881b      	ldrh	r3, [r3, #0]
   1a4ae:	4013      	ands	r3, r2
   1a4b0:	b29b      	uxth	r3, r3
   1a4b2:	2b00      	cmp	r3, #0
   1a4b4:	d008      	beq.n	1a4c8 <xTaskRemoveFromEventList+0x60>
   1a4b6:	68bb      	ldr	r3, [r7, #8]
   1a4b8:	0018      	movs	r0, r3
   1a4ba:	4b22      	ldr	r3, [pc, #136]	; (1a544 <xTaskRemoveFromEventList+0xdc>)
   1a4bc:	4798      	blx	r3
   1a4be:	0003      	movs	r3, r0
   1a4c0:	b2db      	uxtb	r3, r3
   1a4c2:	0018      	movs	r0, r3
   1a4c4:	4b20      	ldr	r3, [pc, #128]	; (1a548 <xTaskRemoveFromEventList+0xe0>)
   1a4c6:	4798      	blx	r3
   1a4c8:	68bb      	ldr	r3, [r7, #8]
   1a4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a4cc:	4b1f      	ldr	r3, [pc, #124]	; (1a54c <xTaskRemoveFromEventList+0xe4>)
   1a4ce:	681b      	ldr	r3, [r3, #0]
   1a4d0:	429a      	cmp	r2, r3
   1a4d2:	d903      	bls.n	1a4dc <xTaskRemoveFromEventList+0x74>
   1a4d4:	68bb      	ldr	r3, [r7, #8]
   1a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a4d8:	4b1c      	ldr	r3, [pc, #112]	; (1a54c <xTaskRemoveFromEventList+0xe4>)
   1a4da:	601a      	str	r2, [r3, #0]
   1a4dc:	68bb      	ldr	r3, [r7, #8]
   1a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a4e0:	0013      	movs	r3, r2
   1a4e2:	009b      	lsls	r3, r3, #2
   1a4e4:	189b      	adds	r3, r3, r2
   1a4e6:	009b      	lsls	r3, r3, #2
   1a4e8:	4a19      	ldr	r2, [pc, #100]	; (1a550 <xTaskRemoveFromEventList+0xe8>)
   1a4ea:	189a      	adds	r2, r3, r2
   1a4ec:	68bb      	ldr	r3, [r7, #8]
   1a4ee:	3304      	adds	r3, #4
   1a4f0:	0019      	movs	r1, r3
   1a4f2:	0010      	movs	r0, r2
   1a4f4:	4b17      	ldr	r3, [pc, #92]	; (1a554 <xTaskRemoveFromEventList+0xec>)
   1a4f6:	4798      	blx	r3
   1a4f8:	e007      	b.n	1a50a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1a4fa:	68bb      	ldr	r3, [r7, #8]
   1a4fc:	3318      	adds	r3, #24
   1a4fe:	001a      	movs	r2, r3
   1a500:	4b15      	ldr	r3, [pc, #84]	; (1a558 <xTaskRemoveFromEventList+0xf0>)
   1a502:	0011      	movs	r1, r2
   1a504:	0018      	movs	r0, r3
   1a506:	4b13      	ldr	r3, [pc, #76]	; (1a554 <xTaskRemoveFromEventList+0xec>)
   1a508:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1a50a:	68bb      	ldr	r3, [r7, #8]
   1a50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a50e:	4b13      	ldr	r3, [pc, #76]	; (1a55c <xTaskRemoveFromEventList+0xf4>)
   1a510:	681b      	ldr	r3, [r3, #0]
   1a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a514:	429a      	cmp	r2, r3
   1a516:	d905      	bls.n	1a524 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1a518:	2301      	movs	r3, #1
   1a51a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1a51c:	4b10      	ldr	r3, [pc, #64]	; (1a560 <xTaskRemoveFromEventList+0xf8>)
   1a51e:	2201      	movs	r2, #1
   1a520:	601a      	str	r2, [r3, #0]
   1a522:	e001      	b.n	1a528 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1a524:	2300      	movs	r3, #0
   1a526:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1a528:	68fb      	ldr	r3, [r7, #12]
}
   1a52a:	0018      	movs	r0, r3
   1a52c:	46bd      	mov	sp, r7
   1a52e:	b004      	add	sp, #16
   1a530:	bd80      	pop	{r7, pc}
   1a532:	46c0      	nop			; (mov r8, r8)
   1a534:	00017a53 	.word	0x00017a53
   1a538:	20003a3c 	.word	0x20003a3c
   1a53c:	00015bd9 	.word	0x00015bd9
   1a540:	20000038 	.word	0x20000038
   1a544:	00015bb9 	.word	0x00015bb9
   1a548:	00016389 	.word	0x00016389
   1a54c:	20003a1c 	.word	0x20003a1c
   1a550:	20003940 	.word	0x20003940
   1a554:	000179a3 	.word	0x000179a3
   1a558:	200039d4 	.word	0x200039d4
   1a55c:	2000393c 	.word	0x2000393c
   1a560:	20003a28 	.word	0x20003a28

0001a564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1a564:	b580      	push	{r7, lr}
   1a566:	b082      	sub	sp, #8
   1a568:	af00      	add	r7, sp, #0
   1a56a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1a56c:	4b05      	ldr	r3, [pc, #20]	; (1a584 <vTaskInternalSetTimeOutState+0x20>)
   1a56e:	681a      	ldr	r2, [r3, #0]
   1a570:	687b      	ldr	r3, [r7, #4]
   1a572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1a574:	4b04      	ldr	r3, [pc, #16]	; (1a588 <vTaskInternalSetTimeOutState+0x24>)
   1a576:	681a      	ldr	r2, [r3, #0]
   1a578:	687b      	ldr	r3, [r7, #4]
   1a57a:	605a      	str	r2, [r3, #4]
}
   1a57c:	46c0      	nop			; (mov r8, r8)
   1a57e:	46bd      	mov	sp, r7
   1a580:	b002      	add	sp, #8
   1a582:	bd80      	pop	{r7, pc}
   1a584:	20003a2c 	.word	0x20003a2c
   1a588:	20003a18 	.word	0x20003a18

0001a58c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1a58c:	b580      	push	{r7, lr}
   1a58e:	b086      	sub	sp, #24
   1a590:	af00      	add	r7, sp, #0
   1a592:	6078      	str	r0, [r7, #4]
   1a594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1a596:	687b      	ldr	r3, [r7, #4]
   1a598:	2b00      	cmp	r3, #0
   1a59a:	d101      	bne.n	1a5a0 <xTaskCheckForTimeOut+0x14>
   1a59c:	b672      	cpsid	i
   1a59e:	e7fe      	b.n	1a59e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1a5a0:	683b      	ldr	r3, [r7, #0]
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d101      	bne.n	1a5aa <xTaskCheckForTimeOut+0x1e>
   1a5a6:	b672      	cpsid	i
   1a5a8:	e7fe      	b.n	1a5a8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1a5aa:	4b1e      	ldr	r3, [pc, #120]	; (1a624 <xTaskCheckForTimeOut+0x98>)
   1a5ac:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1a5ae:	4b1e      	ldr	r3, [pc, #120]	; (1a628 <xTaskCheckForTimeOut+0x9c>)
   1a5b0:	681b      	ldr	r3, [r3, #0]
   1a5b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1a5b4:	687b      	ldr	r3, [r7, #4]
   1a5b6:	685b      	ldr	r3, [r3, #4]
   1a5b8:	693a      	ldr	r2, [r7, #16]
   1a5ba:	1ad3      	subs	r3, r2, r3
   1a5bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1a5be:	683b      	ldr	r3, [r7, #0]
   1a5c0:	681b      	ldr	r3, [r3, #0]
   1a5c2:	3301      	adds	r3, #1
   1a5c4:	d102      	bne.n	1a5cc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1a5c6:	2300      	movs	r3, #0
   1a5c8:	617b      	str	r3, [r7, #20]
   1a5ca:	e024      	b.n	1a616 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1a5cc:	687b      	ldr	r3, [r7, #4]
   1a5ce:	681a      	ldr	r2, [r3, #0]
   1a5d0:	4b16      	ldr	r3, [pc, #88]	; (1a62c <xTaskCheckForTimeOut+0xa0>)
   1a5d2:	681b      	ldr	r3, [r3, #0]
   1a5d4:	429a      	cmp	r2, r3
   1a5d6:	d007      	beq.n	1a5e8 <xTaskCheckForTimeOut+0x5c>
   1a5d8:	687b      	ldr	r3, [r7, #4]
   1a5da:	685a      	ldr	r2, [r3, #4]
   1a5dc:	693b      	ldr	r3, [r7, #16]
   1a5de:	429a      	cmp	r2, r3
   1a5e0:	d802      	bhi.n	1a5e8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1a5e2:	2301      	movs	r3, #1
   1a5e4:	617b      	str	r3, [r7, #20]
   1a5e6:	e016      	b.n	1a616 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1a5e8:	683b      	ldr	r3, [r7, #0]
   1a5ea:	681a      	ldr	r2, [r3, #0]
   1a5ec:	68fb      	ldr	r3, [r7, #12]
   1a5ee:	429a      	cmp	r2, r3
   1a5f0:	d90c      	bls.n	1a60c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1a5f2:	683b      	ldr	r3, [r7, #0]
   1a5f4:	681a      	ldr	r2, [r3, #0]
   1a5f6:	68fb      	ldr	r3, [r7, #12]
   1a5f8:	1ad2      	subs	r2, r2, r3
   1a5fa:	683b      	ldr	r3, [r7, #0]
   1a5fc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1a5fe:	687b      	ldr	r3, [r7, #4]
   1a600:	0018      	movs	r0, r3
   1a602:	4b0b      	ldr	r3, [pc, #44]	; (1a630 <xTaskCheckForTimeOut+0xa4>)
   1a604:	4798      	blx	r3
			xReturn = pdFALSE;
   1a606:	2300      	movs	r3, #0
   1a608:	617b      	str	r3, [r7, #20]
   1a60a:	e004      	b.n	1a616 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1a60c:	683b      	ldr	r3, [r7, #0]
   1a60e:	2200      	movs	r2, #0
   1a610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1a612:	2301      	movs	r3, #1
   1a614:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1a616:	4b07      	ldr	r3, [pc, #28]	; (1a634 <xTaskCheckForTimeOut+0xa8>)
   1a618:	4798      	blx	r3

	return xReturn;
   1a61a:	697b      	ldr	r3, [r7, #20]
}
   1a61c:	0018      	movs	r0, r3
   1a61e:	46bd      	mov	sp, r7
   1a620:	b006      	add	sp, #24
   1a622:	bd80      	pop	{r7, pc}
   1a624:	00017bd9 	.word	0x00017bd9
   1a628:	20003a18 	.word	0x20003a18
   1a62c:	20003a2c 	.word	0x20003a2c
   1a630:	0001a565 	.word	0x0001a565
   1a634:	00017bfd 	.word	0x00017bfd

0001a638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1a638:	b580      	push	{r7, lr}
   1a63a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1a63c:	4b02      	ldr	r3, [pc, #8]	; (1a648 <vTaskMissedYield+0x10>)
   1a63e:	2201      	movs	r2, #1
   1a640:	601a      	str	r2, [r3, #0]
}
   1a642:	46c0      	nop			; (mov r8, r8)
   1a644:	46bd      	mov	sp, r7
   1a646:	bd80      	pop	{r7, pc}
   1a648:	20003a28 	.word	0x20003a28

0001a64c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1a64c:	b580      	push	{r7, lr}
   1a64e:	b084      	sub	sp, #16
   1a650:	af00      	add	r7, sp, #0
   1a652:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1a654:	687b      	ldr	r3, [r7, #4]
   1a656:	2b00      	cmp	r3, #0
   1a658:	d005      	beq.n	1a666 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1a65a:	687b      	ldr	r3, [r7, #4]
   1a65c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1a65e:	68bb      	ldr	r3, [r7, #8]
   1a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a662:	60fb      	str	r3, [r7, #12]
   1a664:	e001      	b.n	1a66a <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1a666:	2300      	movs	r3, #0
   1a668:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1a66a:	68fb      	ldr	r3, [r7, #12]
	}
   1a66c:	0018      	movs	r0, r3
   1a66e:	46bd      	mov	sp, r7
   1a670:	b004      	add	sp, #16
   1a672:	bd80      	pop	{r7, pc}

0001a674 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1a674:	b580      	push	{r7, lr}
   1a676:	b084      	sub	sp, #16
   1a678:	af00      	add	r7, sp, #0
   1a67a:	6078      	str	r0, [r7, #4]
   1a67c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1a67e:	687b      	ldr	r3, [r7, #4]
   1a680:	2b00      	cmp	r3, #0
   1a682:	d004      	beq.n	1a68e <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1a684:	687b      	ldr	r3, [r7, #4]
   1a686:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1a688:	68fb      	ldr	r3, [r7, #12]
   1a68a:	683a      	ldr	r2, [r7, #0]
   1a68c:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1a68e:	46c0      	nop			; (mov r8, r8)
   1a690:	46bd      	mov	sp, r7
   1a692:	b004      	add	sp, #16
   1a694:	bd80      	pop	{r7, pc}
	...

0001a698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1a698:	b580      	push	{r7, lr}
   1a69a:	b082      	sub	sp, #8
   1a69c:	af00      	add	r7, sp, #0
   1a69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1a6a0:	4b04      	ldr	r3, [pc, #16]	; (1a6b4 <prvIdleTask+0x1c>)
   1a6a2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1a6a4:	4b04      	ldr	r3, [pc, #16]	; (1a6b8 <prvIdleTask+0x20>)
   1a6a6:	681b      	ldr	r3, [r3, #0]
   1a6a8:	2b01      	cmp	r3, #1
   1a6aa:	d9f9      	bls.n	1a6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
   1a6ac:	4b03      	ldr	r3, [pc, #12]	; (1a6bc <prvIdleTask+0x24>)
   1a6ae:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1a6b0:	e7f6      	b.n	1a6a0 <prvIdleTask+0x8>
   1a6b2:	46c0      	nop			; (mov r8, r8)
   1a6b4:	0001a74d 	.word	0x0001a74d
   1a6b8:	20003940 	.word	0x20003940
   1a6bc:	00017bc1 	.word	0x00017bc1

0001a6c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1a6c0:	b580      	push	{r7, lr}
   1a6c2:	b082      	sub	sp, #8
   1a6c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1a6c6:	2300      	movs	r3, #0
   1a6c8:	607b      	str	r3, [r7, #4]
   1a6ca:	e00c      	b.n	1a6e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1a6cc:	687a      	ldr	r2, [r7, #4]
   1a6ce:	0013      	movs	r3, r2
   1a6d0:	009b      	lsls	r3, r3, #2
   1a6d2:	189b      	adds	r3, r3, r2
   1a6d4:	009b      	lsls	r3, r3, #2
   1a6d6:	4a14      	ldr	r2, [pc, #80]	; (1a728 <prvInitialiseTaskLists+0x68>)
   1a6d8:	189b      	adds	r3, r3, r2
   1a6da:	0018      	movs	r0, r3
   1a6dc:	4b13      	ldr	r3, [pc, #76]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a6de:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1a6e0:	687b      	ldr	r3, [r7, #4]
   1a6e2:	3301      	adds	r3, #1
   1a6e4:	607b      	str	r3, [r7, #4]
   1a6e6:	687b      	ldr	r3, [r7, #4]
   1a6e8:	2b04      	cmp	r3, #4
   1a6ea:	d9ef      	bls.n	1a6cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1a6ec:	4b10      	ldr	r3, [pc, #64]	; (1a730 <prvInitialiseTaskLists+0x70>)
   1a6ee:	0018      	movs	r0, r3
   1a6f0:	4b0e      	ldr	r3, [pc, #56]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a6f2:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1a6f4:	4b0f      	ldr	r3, [pc, #60]	; (1a734 <prvInitialiseTaskLists+0x74>)
   1a6f6:	0018      	movs	r0, r3
   1a6f8:	4b0c      	ldr	r3, [pc, #48]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a6fa:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1a6fc:	4b0e      	ldr	r3, [pc, #56]	; (1a738 <prvInitialiseTaskLists+0x78>)
   1a6fe:	0018      	movs	r0, r3
   1a700:	4b0a      	ldr	r3, [pc, #40]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a702:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1a704:	4b0d      	ldr	r3, [pc, #52]	; (1a73c <prvInitialiseTaskLists+0x7c>)
   1a706:	0018      	movs	r0, r3
   1a708:	4b08      	ldr	r3, [pc, #32]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a70a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1a70c:	4b0c      	ldr	r3, [pc, #48]	; (1a740 <prvInitialiseTaskLists+0x80>)
   1a70e:	0018      	movs	r0, r3
   1a710:	4b06      	ldr	r3, [pc, #24]	; (1a72c <prvInitialiseTaskLists+0x6c>)
   1a712:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1a714:	4b0b      	ldr	r3, [pc, #44]	; (1a744 <prvInitialiseTaskLists+0x84>)
   1a716:	4a06      	ldr	r2, [pc, #24]	; (1a730 <prvInitialiseTaskLists+0x70>)
   1a718:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1a71a:	4b0b      	ldr	r3, [pc, #44]	; (1a748 <prvInitialiseTaskLists+0x88>)
   1a71c:	4a05      	ldr	r2, [pc, #20]	; (1a734 <prvInitialiseTaskLists+0x74>)
   1a71e:	601a      	str	r2, [r3, #0]
}
   1a720:	46c0      	nop			; (mov r8, r8)
   1a722:	46bd      	mov	sp, r7
   1a724:	b002      	add	sp, #8
   1a726:	bd80      	pop	{r7, pc}
   1a728:	20003940 	.word	0x20003940
   1a72c:	00017951 	.word	0x00017951
   1a730:	200039a4 	.word	0x200039a4
   1a734:	200039b8 	.word	0x200039b8
   1a738:	200039d4 	.word	0x200039d4
   1a73c:	200039e8 	.word	0x200039e8
   1a740:	20003a00 	.word	0x20003a00
   1a744:	200039cc 	.word	0x200039cc
   1a748:	200039d0 	.word	0x200039d0

0001a74c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1a74c:	b580      	push	{r7, lr}
   1a74e:	b082      	sub	sp, #8
   1a750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1a752:	e01a      	b.n	1a78a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1a754:	4b11      	ldr	r3, [pc, #68]	; (1a79c <prvCheckTasksWaitingTermination+0x50>)
   1a756:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1a758:	4b11      	ldr	r3, [pc, #68]	; (1a7a0 <prvCheckTasksWaitingTermination+0x54>)
   1a75a:	68db      	ldr	r3, [r3, #12]
   1a75c:	68db      	ldr	r3, [r3, #12]
   1a75e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1a760:	687b      	ldr	r3, [r7, #4]
   1a762:	3304      	adds	r3, #4
   1a764:	0018      	movs	r0, r3
   1a766:	4b0f      	ldr	r3, [pc, #60]	; (1a7a4 <prvCheckTasksWaitingTermination+0x58>)
   1a768:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1a76a:	4b0f      	ldr	r3, [pc, #60]	; (1a7a8 <prvCheckTasksWaitingTermination+0x5c>)
   1a76c:	681b      	ldr	r3, [r3, #0]
   1a76e:	1e5a      	subs	r2, r3, #1
   1a770:	4b0d      	ldr	r3, [pc, #52]	; (1a7a8 <prvCheckTasksWaitingTermination+0x5c>)
   1a772:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1a774:	4b0d      	ldr	r3, [pc, #52]	; (1a7ac <prvCheckTasksWaitingTermination+0x60>)
   1a776:	681b      	ldr	r3, [r3, #0]
   1a778:	1e5a      	subs	r2, r3, #1
   1a77a:	4b0c      	ldr	r3, [pc, #48]	; (1a7ac <prvCheckTasksWaitingTermination+0x60>)
   1a77c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1a77e:	4b0c      	ldr	r3, [pc, #48]	; (1a7b0 <prvCheckTasksWaitingTermination+0x64>)
   1a780:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1a782:	687b      	ldr	r3, [r7, #4]
   1a784:	0018      	movs	r0, r3
   1a786:	4b0b      	ldr	r3, [pc, #44]	; (1a7b4 <prvCheckTasksWaitingTermination+0x68>)
   1a788:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1a78a:	4b08      	ldr	r3, [pc, #32]	; (1a7ac <prvCheckTasksWaitingTermination+0x60>)
   1a78c:	681b      	ldr	r3, [r3, #0]
   1a78e:	2b00      	cmp	r3, #0
   1a790:	d1e0      	bne.n	1a754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1a792:	46c0      	nop			; (mov r8, r8)
   1a794:	46bd      	mov	sp, r7
   1a796:	b002      	add	sp, #8
   1a798:	bd80      	pop	{r7, pc}
   1a79a:	46c0      	nop			; (mov r8, r8)
   1a79c:	00017bd9 	.word	0x00017bd9
   1a7a0:	200039e8 	.word	0x200039e8
   1a7a4:	00017a53 	.word	0x00017a53
   1a7a8:	20003a14 	.word	0x20003a14
   1a7ac:	200039fc 	.word	0x200039fc
   1a7b0:	00017bfd 	.word	0x00017bfd
   1a7b4:	0001a829 	.word	0x0001a829

0001a7b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1a7b8:	b580      	push	{r7, lr}
   1a7ba:	b084      	sub	sp, #16
   1a7bc:	af00      	add	r7, sp, #0
   1a7be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1a7c0:	2300      	movs	r3, #0
   1a7c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1a7c4:	e005      	b.n	1a7d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	3301      	adds	r3, #1
   1a7ca:	607b      	str	r3, [r7, #4]
			ulCount++;
   1a7cc:	68fb      	ldr	r3, [r7, #12]
   1a7ce:	3301      	adds	r3, #1
   1a7d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1a7d2:	687b      	ldr	r3, [r7, #4]
   1a7d4:	781b      	ldrb	r3, [r3, #0]
   1a7d6:	2ba5      	cmp	r3, #165	; 0xa5
   1a7d8:	d0f5      	beq.n	1a7c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1a7da:	68fb      	ldr	r3, [r7, #12]
   1a7dc:	089b      	lsrs	r3, r3, #2
   1a7de:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1a7e0:	68fb      	ldr	r3, [r7, #12]
   1a7e2:	b29b      	uxth	r3, r3
	}
   1a7e4:	0018      	movs	r0, r3
   1a7e6:	46bd      	mov	sp, r7
   1a7e8:	b004      	add	sp, #16
   1a7ea:	bd80      	pop	{r7, pc}

0001a7ec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1a7ec:	b580      	push	{r7, lr}
   1a7ee:	b086      	sub	sp, #24
   1a7f0:	af00      	add	r7, sp, #0
   1a7f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1a7f4:	687b      	ldr	r3, [r7, #4]
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d102      	bne.n	1a800 <uxTaskGetStackHighWaterMark+0x14>
   1a7fa:	4b09      	ldr	r3, [pc, #36]	; (1a820 <uxTaskGetStackHighWaterMark+0x34>)
   1a7fc:	681b      	ldr	r3, [r3, #0]
   1a7fe:	e000      	b.n	1a802 <uxTaskGetStackHighWaterMark+0x16>
   1a800:	687b      	ldr	r3, [r7, #4]
   1a802:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1a804:	697b      	ldr	r3, [r7, #20]
   1a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a808:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1a80a:	693b      	ldr	r3, [r7, #16]
   1a80c:	0018      	movs	r0, r3
   1a80e:	4b05      	ldr	r3, [pc, #20]	; (1a824 <uxTaskGetStackHighWaterMark+0x38>)
   1a810:	4798      	blx	r3
   1a812:	0003      	movs	r3, r0
   1a814:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1a816:	68fb      	ldr	r3, [r7, #12]
	}
   1a818:	0018      	movs	r0, r3
   1a81a:	46bd      	mov	sp, r7
   1a81c:	b006      	add	sp, #24
   1a81e:	bd80      	pop	{r7, pc}
   1a820:	2000393c 	.word	0x2000393c
   1a824:	0001a7b9 	.word	0x0001a7b9

0001a828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1a828:	b580      	push	{r7, lr}
   1a82a:	b082      	sub	sp, #8
   1a82c:	af00      	add	r7, sp, #0
   1a82e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1a830:	687b      	ldr	r3, [r7, #4]
   1a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a834:	0018      	movs	r0, r3
   1a836:	4b05      	ldr	r3, [pc, #20]	; (1a84c <prvDeleteTCB+0x24>)
   1a838:	4798      	blx	r3
			vPortFree( pxTCB );
   1a83a:	687b      	ldr	r3, [r7, #4]
   1a83c:	0018      	movs	r0, r3
   1a83e:	4b03      	ldr	r3, [pc, #12]	; (1a84c <prvDeleteTCB+0x24>)
   1a840:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1a842:	46c0      	nop			; (mov r8, r8)
   1a844:	46bd      	mov	sp, r7
   1a846:	b002      	add	sp, #8
   1a848:	bd80      	pop	{r7, pc}
   1a84a:	46c0      	nop			; (mov r8, r8)
   1a84c:	00017dd5 	.word	0x00017dd5

0001a850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1a850:	b580      	push	{r7, lr}
   1a852:	b082      	sub	sp, #8
   1a854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1a856:	4b0e      	ldr	r3, [pc, #56]	; (1a890 <prvResetNextTaskUnblockTime+0x40>)
   1a858:	681b      	ldr	r3, [r3, #0]
   1a85a:	681b      	ldr	r3, [r3, #0]
   1a85c:	2b00      	cmp	r3, #0
   1a85e:	d101      	bne.n	1a864 <prvResetNextTaskUnblockTime+0x14>
   1a860:	2301      	movs	r3, #1
   1a862:	e000      	b.n	1a866 <prvResetNextTaskUnblockTime+0x16>
   1a864:	2300      	movs	r3, #0
   1a866:	2b00      	cmp	r3, #0
   1a868:	d004      	beq.n	1a874 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1a86a:	4b0a      	ldr	r3, [pc, #40]	; (1a894 <prvResetNextTaskUnblockTime+0x44>)
   1a86c:	2201      	movs	r2, #1
   1a86e:	4252      	negs	r2, r2
   1a870:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1a872:	e008      	b.n	1a886 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1a874:	4b06      	ldr	r3, [pc, #24]	; (1a890 <prvResetNextTaskUnblockTime+0x40>)
   1a876:	681b      	ldr	r3, [r3, #0]
   1a878:	68db      	ldr	r3, [r3, #12]
   1a87a:	68db      	ldr	r3, [r3, #12]
   1a87c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1a87e:	687b      	ldr	r3, [r7, #4]
   1a880:	685a      	ldr	r2, [r3, #4]
   1a882:	4b04      	ldr	r3, [pc, #16]	; (1a894 <prvResetNextTaskUnblockTime+0x44>)
   1a884:	601a      	str	r2, [r3, #0]
}
   1a886:	46c0      	nop			; (mov r8, r8)
   1a888:	46bd      	mov	sp, r7
   1a88a:	b002      	add	sp, #8
   1a88c:	bd80      	pop	{r7, pc}
   1a88e:	46c0      	nop			; (mov r8, r8)
   1a890:	200039cc 	.word	0x200039cc
   1a894:	20003a34 	.word	0x20003a34

0001a898 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1a898:	b580      	push	{r7, lr}
   1a89a:	b082      	sub	sp, #8
   1a89c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1a89e:	4b04      	ldr	r3, [pc, #16]	; (1a8b0 <xTaskGetCurrentTaskHandle+0x18>)
   1a8a0:	681b      	ldr	r3, [r3, #0]
   1a8a2:	607b      	str	r3, [r7, #4]

		return xReturn;
   1a8a4:	687b      	ldr	r3, [r7, #4]
	}
   1a8a6:	0018      	movs	r0, r3
   1a8a8:	46bd      	mov	sp, r7
   1a8aa:	b002      	add	sp, #8
   1a8ac:	bd80      	pop	{r7, pc}
   1a8ae:	46c0      	nop			; (mov r8, r8)
   1a8b0:	2000393c 	.word	0x2000393c

0001a8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1a8b4:	b580      	push	{r7, lr}
   1a8b6:	b082      	sub	sp, #8
   1a8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1a8ba:	4b0a      	ldr	r3, [pc, #40]	; (1a8e4 <xTaskGetSchedulerState+0x30>)
   1a8bc:	681b      	ldr	r3, [r3, #0]
   1a8be:	2b00      	cmp	r3, #0
   1a8c0:	d102      	bne.n	1a8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1a8c2:	2301      	movs	r3, #1
   1a8c4:	607b      	str	r3, [r7, #4]
   1a8c6:	e008      	b.n	1a8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1a8c8:	4b07      	ldr	r3, [pc, #28]	; (1a8e8 <xTaskGetSchedulerState+0x34>)
   1a8ca:	681b      	ldr	r3, [r3, #0]
   1a8cc:	2b00      	cmp	r3, #0
   1a8ce:	d102      	bne.n	1a8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1a8d0:	2302      	movs	r3, #2
   1a8d2:	607b      	str	r3, [r7, #4]
   1a8d4:	e001      	b.n	1a8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1a8d6:	2300      	movs	r3, #0
   1a8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1a8da:	687b      	ldr	r3, [r7, #4]
	}
   1a8dc:	0018      	movs	r0, r3
   1a8de:	46bd      	mov	sp, r7
   1a8e0:	b002      	add	sp, #8
   1a8e2:	bd80      	pop	{r7, pc}
   1a8e4:	20003a20 	.word	0x20003a20
   1a8e8:	20003a3c 	.word	0x20003a3c

0001a8ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1a8ec:	b590      	push	{r4, r7, lr}
   1a8ee:	b085      	sub	sp, #20
   1a8f0:	af00      	add	r7, sp, #0
   1a8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1a8f4:	687b      	ldr	r3, [r7, #4]
   1a8f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1a8f8:	2300      	movs	r3, #0
   1a8fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1a8fc:	687b      	ldr	r3, [r7, #4]
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d100      	bne.n	1a904 <xTaskPriorityInherit+0x18>
   1a902:	e09d      	b.n	1aa40 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1a904:	68bb      	ldr	r3, [r7, #8]
   1a906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a908:	4b50      	ldr	r3, [pc, #320]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1a90a:	681b      	ldr	r3, [r3, #0]
   1a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a90e:	429a      	cmp	r2, r3
   1a910:	d300      	bcc.n	1a914 <xTaskPriorityInherit+0x28>
   1a912:	e08c      	b.n	1aa2e <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1a914:	68bb      	ldr	r3, [r7, #8]
   1a916:	699b      	ldr	r3, [r3, #24]
   1a918:	2b00      	cmp	r3, #0
   1a91a:	db06      	blt.n	1a92a <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a91c:	4b4b      	ldr	r3, [pc, #300]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1a91e:	681b      	ldr	r3, [r3, #0]
   1a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a922:	2205      	movs	r2, #5
   1a924:	1ad2      	subs	r2, r2, r3
   1a926:	68bb      	ldr	r3, [r7, #8]
   1a928:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1a92a:	68bb      	ldr	r3, [r7, #8]
   1a92c:	6959      	ldr	r1, [r3, #20]
   1a92e:	68bb      	ldr	r3, [r7, #8]
   1a930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a932:	0013      	movs	r3, r2
   1a934:	009b      	lsls	r3, r3, #2
   1a936:	189b      	adds	r3, r3, r2
   1a938:	009b      	lsls	r3, r3, #2
   1a93a:	4a45      	ldr	r2, [pc, #276]	; (1aa50 <xTaskPriorityInherit+0x164>)
   1a93c:	189b      	adds	r3, r3, r2
   1a93e:	4299      	cmp	r1, r3
   1a940:	d101      	bne.n	1a946 <xTaskPriorityInherit+0x5a>
   1a942:	2301      	movs	r3, #1
   1a944:	e000      	b.n	1a948 <xTaskPriorityInherit+0x5c>
   1a946:	2300      	movs	r3, #0
   1a948:	2b00      	cmp	r3, #0
   1a94a:	d037      	beq.n	1a9bc <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1a94c:	68bb      	ldr	r3, [r7, #8]
   1a94e:	3304      	adds	r3, #4
   1a950:	0018      	movs	r0, r3
   1a952:	4b40      	ldr	r3, [pc, #256]	; (1aa54 <xTaskPriorityInherit+0x168>)
   1a954:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1a956:	4b3d      	ldr	r3, [pc, #244]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1a958:	681b      	ldr	r3, [r3, #0]
   1a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a95c:	68bb      	ldr	r3, [r7, #8]
   1a95e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1a960:	68bb      	ldr	r3, [r7, #8]
   1a962:	0018      	movs	r0, r3
   1a964:	4b3c      	ldr	r3, [pc, #240]	; (1aa58 <xTaskPriorityInherit+0x16c>)
   1a966:	4798      	blx	r3
   1a968:	0003      	movs	r3, r0
   1a96a:	001a      	movs	r2, r3
   1a96c:	4b3b      	ldr	r3, [pc, #236]	; (1aa5c <xTaskPriorityInherit+0x170>)
   1a96e:	881b      	ldrh	r3, [r3, #0]
   1a970:	4013      	ands	r3, r2
   1a972:	b29b      	uxth	r3, r3
   1a974:	2b00      	cmp	r3, #0
   1a976:	d008      	beq.n	1a98a <xTaskPriorityInherit+0x9e>
   1a978:	68bb      	ldr	r3, [r7, #8]
   1a97a:	0018      	movs	r0, r3
   1a97c:	4b38      	ldr	r3, [pc, #224]	; (1aa60 <xTaskPriorityInherit+0x174>)
   1a97e:	4798      	blx	r3
   1a980:	0003      	movs	r3, r0
   1a982:	b2db      	uxtb	r3, r3
   1a984:	0018      	movs	r0, r3
   1a986:	4b37      	ldr	r3, [pc, #220]	; (1aa64 <xTaskPriorityInherit+0x178>)
   1a988:	4798      	blx	r3
   1a98a:	68bb      	ldr	r3, [r7, #8]
   1a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a98e:	4b36      	ldr	r3, [pc, #216]	; (1aa68 <xTaskPriorityInherit+0x17c>)
   1a990:	681b      	ldr	r3, [r3, #0]
   1a992:	429a      	cmp	r2, r3
   1a994:	d903      	bls.n	1a99e <xTaskPriorityInherit+0xb2>
   1a996:	68bb      	ldr	r3, [r7, #8]
   1a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a99a:	4b33      	ldr	r3, [pc, #204]	; (1aa68 <xTaskPriorityInherit+0x17c>)
   1a99c:	601a      	str	r2, [r3, #0]
   1a99e:	68bb      	ldr	r3, [r7, #8]
   1a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a9a2:	0013      	movs	r3, r2
   1a9a4:	009b      	lsls	r3, r3, #2
   1a9a6:	189b      	adds	r3, r3, r2
   1a9a8:	009b      	lsls	r3, r3, #2
   1a9aa:	4a29      	ldr	r2, [pc, #164]	; (1aa50 <xTaskPriorityInherit+0x164>)
   1a9ac:	189a      	adds	r2, r3, r2
   1a9ae:	68bb      	ldr	r3, [r7, #8]
   1a9b0:	3304      	adds	r3, #4
   1a9b2:	0019      	movs	r1, r3
   1a9b4:	0010      	movs	r0, r2
   1a9b6:	4b2d      	ldr	r3, [pc, #180]	; (1aa6c <xTaskPriorityInherit+0x180>)
   1a9b8:	4798      	blx	r3
   1a9ba:	e004      	b.n	1a9c6 <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1a9bc:	4b23      	ldr	r3, [pc, #140]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1a9be:	681b      	ldr	r3, [r3, #0]
   1a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a9c2:	68bb      	ldr	r3, [r7, #8]
   1a9c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1a9c6:	68bb      	ldr	r3, [r7, #8]
   1a9c8:	0018      	movs	r0, r3
   1a9ca:	4b23      	ldr	r3, [pc, #140]	; (1aa58 <xTaskPriorityInherit+0x16c>)
   1a9cc:	4798      	blx	r3
   1a9ce:	0003      	movs	r3, r0
   1a9d0:	001a      	movs	r2, r3
   1a9d2:	4b22      	ldr	r3, [pc, #136]	; (1aa5c <xTaskPriorityInherit+0x170>)
   1a9d4:	881b      	ldrh	r3, [r3, #0]
   1a9d6:	4013      	ands	r3, r2
   1a9d8:	b29b      	uxth	r3, r3
   1a9da:	2b00      	cmp	r3, #0
   1a9dc:	d024      	beq.n	1aa28 <xTaskPriorityInherit+0x13c>
   1a9de:	68bb      	ldr	r3, [r7, #8]
   1a9e0:	0018      	movs	r0, r3
   1a9e2:	4b1f      	ldr	r3, [pc, #124]	; (1aa60 <xTaskPriorityInherit+0x174>)
   1a9e4:	4798      	blx	r3
   1a9e6:	0003      	movs	r3, r0
   1a9e8:	b2db      	uxtb	r3, r3
   1a9ea:	001c      	movs	r4, r3
   1a9ec:	68bb      	ldr	r3, [r7, #8]
   1a9ee:	0018      	movs	r0, r3
   1a9f0:	4b1b      	ldr	r3, [pc, #108]	; (1aa60 <xTaskPriorityInherit+0x174>)
   1a9f2:	4798      	blx	r3
   1a9f4:	0003      	movs	r3, r0
   1a9f6:	b2db      	uxtb	r3, r3
   1a9f8:	0019      	movs	r1, r3
   1a9fa:	2003      	movs	r0, #3
   1a9fc:	4b1c      	ldr	r3, [pc, #112]	; (1aa70 <xTaskPriorityInherit+0x184>)
   1a9fe:	4798      	blx	r3
   1aa00:	0003      	movs	r3, r0
   1aa02:	0022      	movs	r2, r4
   1aa04:	2103      	movs	r1, #3
   1aa06:	208e      	movs	r0, #142	; 0x8e
   1aa08:	4c1a      	ldr	r4, [pc, #104]	; (1aa74 <xTaskPriorityInherit+0x188>)
   1aa0a:	47a0      	blx	r4
   1aa0c:	68bb      	ldr	r3, [r7, #8]
   1aa0e:	0018      	movs	r0, r3
   1aa10:	4b13      	ldr	r3, [pc, #76]	; (1aa60 <xTaskPriorityInherit+0x174>)
   1aa12:	4798      	blx	r3
   1aa14:	0003      	movs	r3, r0
   1aa16:	b2d9      	uxtb	r1, r3
   1aa18:	4b0c      	ldr	r3, [pc, #48]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1aa1a:	681b      	ldr	r3, [r3, #0]
   1aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aa1e:	b2db      	uxtb	r3, r3
   1aa20:	001a      	movs	r2, r3
   1aa22:	2003      	movs	r0, #3
   1aa24:	4b14      	ldr	r3, [pc, #80]	; (1aa78 <xTaskPriorityInherit+0x18c>)
   1aa26:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1aa28:	2301      	movs	r3, #1
   1aa2a:	60fb      	str	r3, [r7, #12]
   1aa2c:	e008      	b.n	1aa40 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1aa2e:	68bb      	ldr	r3, [r7, #8]
   1aa30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1aa32:	4b06      	ldr	r3, [pc, #24]	; (1aa4c <xTaskPriorityInherit+0x160>)
   1aa34:	681b      	ldr	r3, [r3, #0]
   1aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aa38:	429a      	cmp	r2, r3
   1aa3a:	d201      	bcs.n	1aa40 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1aa3c:	2301      	movs	r3, #1
   1aa3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1aa40:	68fb      	ldr	r3, [r7, #12]
	}
   1aa42:	0018      	movs	r0, r3
   1aa44:	46bd      	mov	sp, r7
   1aa46:	b005      	add	sp, #20
   1aa48:	bd90      	pop	{r4, r7, pc}
   1aa4a:	46c0      	nop			; (mov r8, r8)
   1aa4c:	2000393c 	.word	0x2000393c
   1aa50:	20003940 	.word	0x20003940
   1aa54:	00017a53 	.word	0x00017a53
   1aa58:	00015bd9 	.word	0x00015bd9
   1aa5c:	20000038 	.word	0x20000038
   1aa60:	00015bb9 	.word	0x00015bb9
   1aa64:	00016389 	.word	0x00016389
   1aa68:	20003a1c 	.word	0x20003a1c
   1aa6c:	000179a3 	.word	0x000179a3
   1aa70:	00016b91 	.word	0x00016b91
   1aa74:	00016701 	.word	0x00016701
   1aa78:	00016aed 	.word	0x00016aed

0001aa7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1aa7c:	b590      	push	{r4, r7, lr}
   1aa7e:	b085      	sub	sp, #20
   1aa80:	af00      	add	r7, sp, #0
   1aa82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1aa84:	687b      	ldr	r3, [r7, #4]
   1aa86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1aa88:	2300      	movs	r3, #0
   1aa8a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1aa8c:	687b      	ldr	r3, [r7, #4]
   1aa8e:	2b00      	cmp	r3, #0
   1aa90:	d100      	bne.n	1aa94 <xTaskPriorityDisinherit+0x18>
   1aa92:	e089      	b.n	1aba8 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1aa94:	4b47      	ldr	r3, [pc, #284]	; (1abb4 <xTaskPriorityDisinherit+0x138>)
   1aa96:	681b      	ldr	r3, [r3, #0]
   1aa98:	68ba      	ldr	r2, [r7, #8]
   1aa9a:	429a      	cmp	r2, r3
   1aa9c:	d001      	beq.n	1aaa2 <xTaskPriorityDisinherit+0x26>
   1aa9e:	b672      	cpsid	i
   1aaa0:	e7fe      	b.n	1aaa0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1aaa2:	68bb      	ldr	r3, [r7, #8]
   1aaa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aaa6:	2b00      	cmp	r3, #0
   1aaa8:	d101      	bne.n	1aaae <xTaskPriorityDisinherit+0x32>
   1aaaa:	b672      	cpsid	i
   1aaac:	e7fe      	b.n	1aaac <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1aaae:	68bb      	ldr	r3, [r7, #8]
   1aab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aab2:	1e5a      	subs	r2, r3, #1
   1aab4:	68bb      	ldr	r3, [r7, #8]
   1aab6:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1aab8:	68bb      	ldr	r3, [r7, #8]
   1aaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aabc:	68bb      	ldr	r3, [r7, #8]
   1aabe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1aac0:	429a      	cmp	r2, r3
   1aac2:	d071      	beq.n	1aba8 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1aac4:	68bb      	ldr	r3, [r7, #8]
   1aac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aac8:	2b00      	cmp	r3, #0
   1aaca:	d16d      	bne.n	1aba8 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1aacc:	68bb      	ldr	r3, [r7, #8]
   1aace:	3304      	adds	r3, #4
   1aad0:	0018      	movs	r0, r3
   1aad2:	4b39      	ldr	r3, [pc, #228]	; (1abb8 <xTaskPriorityDisinherit+0x13c>)
   1aad4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1aad6:	68bb      	ldr	r3, [r7, #8]
   1aad8:	0018      	movs	r0, r3
   1aada:	4b38      	ldr	r3, [pc, #224]	; (1abbc <xTaskPriorityDisinherit+0x140>)
   1aadc:	4798      	blx	r3
   1aade:	0003      	movs	r3, r0
   1aae0:	001a      	movs	r2, r3
   1aae2:	4b37      	ldr	r3, [pc, #220]	; (1abc0 <xTaskPriorityDisinherit+0x144>)
   1aae4:	881b      	ldrh	r3, [r3, #0]
   1aae6:	4013      	ands	r3, r2
   1aae8:	b29b      	uxth	r3, r3
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	d023      	beq.n	1ab36 <xTaskPriorityDisinherit+0xba>
   1aaee:	68bb      	ldr	r3, [r7, #8]
   1aaf0:	0018      	movs	r0, r3
   1aaf2:	4b34      	ldr	r3, [pc, #208]	; (1abc4 <xTaskPriorityDisinherit+0x148>)
   1aaf4:	4798      	blx	r3
   1aaf6:	0003      	movs	r3, r0
   1aaf8:	b2db      	uxtb	r3, r3
   1aafa:	001c      	movs	r4, r3
   1aafc:	68bb      	ldr	r3, [r7, #8]
   1aafe:	0018      	movs	r0, r3
   1ab00:	4b30      	ldr	r3, [pc, #192]	; (1abc4 <xTaskPriorityDisinherit+0x148>)
   1ab02:	4798      	blx	r3
   1ab04:	0003      	movs	r3, r0
   1ab06:	b2db      	uxtb	r3, r3
   1ab08:	0019      	movs	r1, r3
   1ab0a:	2003      	movs	r0, #3
   1ab0c:	4b2e      	ldr	r3, [pc, #184]	; (1abc8 <xTaskPriorityDisinherit+0x14c>)
   1ab0e:	4798      	blx	r3
   1ab10:	0003      	movs	r3, r0
   1ab12:	0022      	movs	r2, r4
   1ab14:	2103      	movs	r1, #3
   1ab16:	208f      	movs	r0, #143	; 0x8f
   1ab18:	4c2c      	ldr	r4, [pc, #176]	; (1abcc <xTaskPriorityDisinherit+0x150>)
   1ab1a:	47a0      	blx	r4
   1ab1c:	68bb      	ldr	r3, [r7, #8]
   1ab1e:	0018      	movs	r0, r3
   1ab20:	4b28      	ldr	r3, [pc, #160]	; (1abc4 <xTaskPriorityDisinherit+0x148>)
   1ab22:	4798      	blx	r3
   1ab24:	0003      	movs	r3, r0
   1ab26:	b2d9      	uxtb	r1, r3
   1ab28:	68bb      	ldr	r3, [r7, #8]
   1ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ab2c:	b2db      	uxtb	r3, r3
   1ab2e:	001a      	movs	r2, r3
   1ab30:	2003      	movs	r0, #3
   1ab32:	4b27      	ldr	r3, [pc, #156]	; (1abd0 <xTaskPriorityDisinherit+0x154>)
   1ab34:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1ab36:	68bb      	ldr	r3, [r7, #8]
   1ab38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ab3a:	68bb      	ldr	r3, [r7, #8]
   1ab3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ab3e:	68bb      	ldr	r3, [r7, #8]
   1ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ab42:	2205      	movs	r2, #5
   1ab44:	1ad2      	subs	r2, r2, r3
   1ab46:	68bb      	ldr	r3, [r7, #8]
   1ab48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1ab4a:	68bb      	ldr	r3, [r7, #8]
   1ab4c:	0018      	movs	r0, r3
   1ab4e:	4b1b      	ldr	r3, [pc, #108]	; (1abbc <xTaskPriorityDisinherit+0x140>)
   1ab50:	4798      	blx	r3
   1ab52:	0003      	movs	r3, r0
   1ab54:	001a      	movs	r2, r3
   1ab56:	4b1a      	ldr	r3, [pc, #104]	; (1abc0 <xTaskPriorityDisinherit+0x144>)
   1ab58:	881b      	ldrh	r3, [r3, #0]
   1ab5a:	4013      	ands	r3, r2
   1ab5c:	b29b      	uxth	r3, r3
   1ab5e:	2b00      	cmp	r3, #0
   1ab60:	d008      	beq.n	1ab74 <xTaskPriorityDisinherit+0xf8>
   1ab62:	68bb      	ldr	r3, [r7, #8]
   1ab64:	0018      	movs	r0, r3
   1ab66:	4b17      	ldr	r3, [pc, #92]	; (1abc4 <xTaskPriorityDisinherit+0x148>)
   1ab68:	4798      	blx	r3
   1ab6a:	0003      	movs	r3, r0
   1ab6c:	b2db      	uxtb	r3, r3
   1ab6e:	0018      	movs	r0, r3
   1ab70:	4b18      	ldr	r3, [pc, #96]	; (1abd4 <xTaskPriorityDisinherit+0x158>)
   1ab72:	4798      	blx	r3
   1ab74:	68bb      	ldr	r3, [r7, #8]
   1ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab78:	4b17      	ldr	r3, [pc, #92]	; (1abd8 <xTaskPriorityDisinherit+0x15c>)
   1ab7a:	681b      	ldr	r3, [r3, #0]
   1ab7c:	429a      	cmp	r2, r3
   1ab7e:	d903      	bls.n	1ab88 <xTaskPriorityDisinherit+0x10c>
   1ab80:	68bb      	ldr	r3, [r7, #8]
   1ab82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab84:	4b14      	ldr	r3, [pc, #80]	; (1abd8 <xTaskPriorityDisinherit+0x15c>)
   1ab86:	601a      	str	r2, [r3, #0]
   1ab88:	68bb      	ldr	r3, [r7, #8]
   1ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab8c:	0013      	movs	r3, r2
   1ab8e:	009b      	lsls	r3, r3, #2
   1ab90:	189b      	adds	r3, r3, r2
   1ab92:	009b      	lsls	r3, r3, #2
   1ab94:	4a11      	ldr	r2, [pc, #68]	; (1abdc <xTaskPriorityDisinherit+0x160>)
   1ab96:	189a      	adds	r2, r3, r2
   1ab98:	68bb      	ldr	r3, [r7, #8]
   1ab9a:	3304      	adds	r3, #4
   1ab9c:	0019      	movs	r1, r3
   1ab9e:	0010      	movs	r0, r2
   1aba0:	4b0f      	ldr	r3, [pc, #60]	; (1abe0 <xTaskPriorityDisinherit+0x164>)
   1aba2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1aba4:	2301      	movs	r3, #1
   1aba6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1aba8:	68fb      	ldr	r3, [r7, #12]
	}
   1abaa:	0018      	movs	r0, r3
   1abac:	46bd      	mov	sp, r7
   1abae:	b005      	add	sp, #20
   1abb0:	bd90      	pop	{r4, r7, pc}
   1abb2:	46c0      	nop			; (mov r8, r8)
   1abb4:	2000393c 	.word	0x2000393c
   1abb8:	00017a53 	.word	0x00017a53
   1abbc:	00015bd9 	.word	0x00015bd9
   1abc0:	20000038 	.word	0x20000038
   1abc4:	00015bb9 	.word	0x00015bb9
   1abc8:	00016b91 	.word	0x00016b91
   1abcc:	00016701 	.word	0x00016701
   1abd0:	00016aed 	.word	0x00016aed
   1abd4:	00016389 	.word	0x00016389
   1abd8:	20003a1c 	.word	0x20003a1c
   1abdc:	20003940 	.word	0x20003940
   1abe0:	000179a3 	.word	0x000179a3

0001abe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1abe4:	b590      	push	{r4, r7, lr}
   1abe6:	b087      	sub	sp, #28
   1abe8:	af00      	add	r7, sp, #0
   1abea:	6078      	str	r0, [r7, #4]
   1abec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1abee:	687b      	ldr	r3, [r7, #4]
   1abf0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1abf2:	2301      	movs	r3, #1
   1abf4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1abf6:	687b      	ldr	r3, [r7, #4]
   1abf8:	2b00      	cmp	r3, #0
   1abfa:	d100      	bne.n	1abfe <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1abfc:	e0a4      	b.n	1ad48 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1abfe:	693b      	ldr	r3, [r7, #16]
   1ac00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac02:	2b00      	cmp	r3, #0
   1ac04:	d101      	bne.n	1ac0a <vTaskPriorityDisinheritAfterTimeout+0x26>
   1ac06:	b672      	cpsid	i
   1ac08:	e7fe      	b.n	1ac08 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1ac0a:	693b      	ldr	r3, [r7, #16]
   1ac0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ac0e:	683b      	ldr	r3, [r7, #0]
   1ac10:	429a      	cmp	r2, r3
   1ac12:	d202      	bcs.n	1ac1a <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1ac14:	683b      	ldr	r3, [r7, #0]
   1ac16:	617b      	str	r3, [r7, #20]
   1ac18:	e002      	b.n	1ac20 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1ac1a:	693b      	ldr	r3, [r7, #16]
   1ac1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ac1e:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1ac20:	693b      	ldr	r3, [r7, #16]
   1ac22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac24:	697b      	ldr	r3, [r7, #20]
   1ac26:	429a      	cmp	r2, r3
   1ac28:	d100      	bne.n	1ac2c <vTaskPriorityDisinheritAfterTimeout+0x48>
   1ac2a:	e08d      	b.n	1ad48 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1ac2c:	693b      	ldr	r3, [r7, #16]
   1ac2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ac30:	68fb      	ldr	r3, [r7, #12]
   1ac32:	429a      	cmp	r2, r3
   1ac34:	d000      	beq.n	1ac38 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1ac36:	e087      	b.n	1ad48 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1ac38:	4b45      	ldr	r3, [pc, #276]	; (1ad50 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1ac3a:	681b      	ldr	r3, [r3, #0]
   1ac3c:	693a      	ldr	r2, [r7, #16]
   1ac3e:	429a      	cmp	r2, r3
   1ac40:	d101      	bne.n	1ac46 <vTaskPriorityDisinheritAfterTimeout+0x62>
   1ac42:	b672      	cpsid	i
   1ac44:	e7fe      	b.n	1ac44 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1ac46:	693b      	ldr	r3, [r7, #16]
   1ac48:	0018      	movs	r0, r3
   1ac4a:	4b42      	ldr	r3, [pc, #264]	; (1ad54 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ac4c:	4798      	blx	r3
   1ac4e:	0003      	movs	r3, r0
   1ac50:	001a      	movs	r2, r3
   1ac52:	4b41      	ldr	r3, [pc, #260]	; (1ad58 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ac54:	881b      	ldrh	r3, [r3, #0]
   1ac56:	4013      	ands	r3, r2
   1ac58:	b29b      	uxth	r3, r3
   1ac5a:	2b00      	cmp	r3, #0
   1ac5c:	d023      	beq.n	1aca6 <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1ac5e:	693b      	ldr	r3, [r7, #16]
   1ac60:	0018      	movs	r0, r3
   1ac62:	4b3e      	ldr	r3, [pc, #248]	; (1ad5c <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ac64:	4798      	blx	r3
   1ac66:	0003      	movs	r3, r0
   1ac68:	b2db      	uxtb	r3, r3
   1ac6a:	001c      	movs	r4, r3
   1ac6c:	693b      	ldr	r3, [r7, #16]
   1ac6e:	0018      	movs	r0, r3
   1ac70:	4b3a      	ldr	r3, [pc, #232]	; (1ad5c <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ac72:	4798      	blx	r3
   1ac74:	0003      	movs	r3, r0
   1ac76:	b2db      	uxtb	r3, r3
   1ac78:	0019      	movs	r1, r3
   1ac7a:	2003      	movs	r0, #3
   1ac7c:	4b38      	ldr	r3, [pc, #224]	; (1ad60 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ac7e:	4798      	blx	r3
   1ac80:	0003      	movs	r3, r0
   1ac82:	0022      	movs	r2, r4
   1ac84:	2103      	movs	r1, #3
   1ac86:	208f      	movs	r0, #143	; 0x8f
   1ac88:	4c36      	ldr	r4, [pc, #216]	; (1ad64 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1ac8a:	47a0      	blx	r4
   1ac8c:	693b      	ldr	r3, [r7, #16]
   1ac8e:	0018      	movs	r0, r3
   1ac90:	4b32      	ldr	r3, [pc, #200]	; (1ad5c <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ac92:	4798      	blx	r3
   1ac94:	0003      	movs	r3, r0
   1ac96:	b2d9      	uxtb	r1, r3
   1ac98:	693b      	ldr	r3, [r7, #16]
   1ac9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ac9c:	b2db      	uxtb	r3, r3
   1ac9e:	001a      	movs	r2, r3
   1aca0:	2003      	movs	r0, #3
   1aca2:	4b31      	ldr	r3, [pc, #196]	; (1ad68 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1aca4:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1aca6:	693b      	ldr	r3, [r7, #16]
   1aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1acaa:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1acac:	693b      	ldr	r3, [r7, #16]
   1acae:	697a      	ldr	r2, [r7, #20]
   1acb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1acb2:	693b      	ldr	r3, [r7, #16]
   1acb4:	699b      	ldr	r3, [r3, #24]
   1acb6:	2b00      	cmp	r3, #0
   1acb8:	db04      	blt.n	1acc4 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1acba:	697b      	ldr	r3, [r7, #20]
   1acbc:	2205      	movs	r2, #5
   1acbe:	1ad2      	subs	r2, r2, r3
   1acc0:	693b      	ldr	r3, [r7, #16]
   1acc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1acc4:	693b      	ldr	r3, [r7, #16]
   1acc6:	6959      	ldr	r1, [r3, #20]
   1acc8:	68ba      	ldr	r2, [r7, #8]
   1acca:	0013      	movs	r3, r2
   1accc:	009b      	lsls	r3, r3, #2
   1acce:	189b      	adds	r3, r3, r2
   1acd0:	009b      	lsls	r3, r3, #2
   1acd2:	4a26      	ldr	r2, [pc, #152]	; (1ad6c <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1acd4:	189b      	adds	r3, r3, r2
   1acd6:	4299      	cmp	r1, r3
   1acd8:	d101      	bne.n	1acde <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1acda:	2301      	movs	r3, #1
   1acdc:	e000      	b.n	1ace0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1acde:	2300      	movs	r3, #0
   1ace0:	2b00      	cmp	r3, #0
   1ace2:	d031      	beq.n	1ad48 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ace4:	693b      	ldr	r3, [r7, #16]
   1ace6:	3304      	adds	r3, #4
   1ace8:	0018      	movs	r0, r3
   1acea:	4b21      	ldr	r3, [pc, #132]	; (1ad70 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1acec:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1acee:	693b      	ldr	r3, [r7, #16]
   1acf0:	0018      	movs	r0, r3
   1acf2:	4b18      	ldr	r3, [pc, #96]	; (1ad54 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1acf4:	4798      	blx	r3
   1acf6:	0003      	movs	r3, r0
   1acf8:	001a      	movs	r2, r3
   1acfa:	4b17      	ldr	r3, [pc, #92]	; (1ad58 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1acfc:	881b      	ldrh	r3, [r3, #0]
   1acfe:	4013      	ands	r3, r2
   1ad00:	b29b      	uxth	r3, r3
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d008      	beq.n	1ad18 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1ad06:	693b      	ldr	r3, [r7, #16]
   1ad08:	0018      	movs	r0, r3
   1ad0a:	4b14      	ldr	r3, [pc, #80]	; (1ad5c <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ad0c:	4798      	blx	r3
   1ad0e:	0003      	movs	r3, r0
   1ad10:	b2db      	uxtb	r3, r3
   1ad12:	0018      	movs	r0, r3
   1ad14:	4b17      	ldr	r3, [pc, #92]	; (1ad74 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1ad16:	4798      	blx	r3
   1ad18:	693b      	ldr	r3, [r7, #16]
   1ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad1c:	4b16      	ldr	r3, [pc, #88]	; (1ad78 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ad1e:	681b      	ldr	r3, [r3, #0]
   1ad20:	429a      	cmp	r2, r3
   1ad22:	d903      	bls.n	1ad2c <vTaskPriorityDisinheritAfterTimeout+0x148>
   1ad24:	693b      	ldr	r3, [r7, #16]
   1ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad28:	4b13      	ldr	r3, [pc, #76]	; (1ad78 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ad2a:	601a      	str	r2, [r3, #0]
   1ad2c:	693b      	ldr	r3, [r7, #16]
   1ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ad30:	0013      	movs	r3, r2
   1ad32:	009b      	lsls	r3, r3, #2
   1ad34:	189b      	adds	r3, r3, r2
   1ad36:	009b      	lsls	r3, r3, #2
   1ad38:	4a0c      	ldr	r2, [pc, #48]	; (1ad6c <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ad3a:	189a      	adds	r2, r3, r2
   1ad3c:	693b      	ldr	r3, [r7, #16]
   1ad3e:	3304      	adds	r3, #4
   1ad40:	0019      	movs	r1, r3
   1ad42:	0010      	movs	r0, r2
   1ad44:	4b0d      	ldr	r3, [pc, #52]	; (1ad7c <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1ad46:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ad48:	46c0      	nop			; (mov r8, r8)
   1ad4a:	46bd      	mov	sp, r7
   1ad4c:	b007      	add	sp, #28
   1ad4e:	bd90      	pop	{r4, r7, pc}
   1ad50:	2000393c 	.word	0x2000393c
   1ad54:	00015bd9 	.word	0x00015bd9
   1ad58:	20000038 	.word	0x20000038
   1ad5c:	00015bb9 	.word	0x00015bb9
   1ad60:	00016b91 	.word	0x00016b91
   1ad64:	00016701 	.word	0x00016701
   1ad68:	00016aed 	.word	0x00016aed
   1ad6c:	20003940 	.word	0x20003940
   1ad70:	00017a53 	.word	0x00017a53
   1ad74:	00016389 	.word	0x00016389
   1ad78:	20003a1c 	.word	0x20003a1c
   1ad7c:	000179a3 	.word	0x000179a3

0001ad80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1ad80:	b580      	push	{r7, lr}
   1ad82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1ad84:	4b06      	ldr	r3, [pc, #24]	; (1ada0 <pvTaskIncrementMutexHeldCount+0x20>)
   1ad86:	681b      	ldr	r3, [r3, #0]
   1ad88:	2b00      	cmp	r3, #0
   1ad8a:	d004      	beq.n	1ad96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1ad8c:	4b04      	ldr	r3, [pc, #16]	; (1ada0 <pvTaskIncrementMutexHeldCount+0x20>)
   1ad8e:	681b      	ldr	r3, [r3, #0]
   1ad90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ad92:	3201      	adds	r2, #1
   1ad94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1ad96:	4b02      	ldr	r3, [pc, #8]	; (1ada0 <pvTaskIncrementMutexHeldCount+0x20>)
   1ad98:	681b      	ldr	r3, [r3, #0]
	}
   1ad9a:	0018      	movs	r0, r3
   1ad9c:	46bd      	mov	sp, r7
   1ad9e:	bd80      	pop	{r7, pc}
   1ada0:	2000393c 	.word	0x2000393c

0001ada4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1ada4:	b580      	push	{r7, lr}
   1ada6:	b084      	sub	sp, #16
   1ada8:	af00      	add	r7, sp, #0
   1adaa:	6078      	str	r0, [r7, #4]
   1adac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1adae:	4b21      	ldr	r3, [pc, #132]	; (1ae34 <prvAddCurrentTaskToDelayedList+0x90>)
   1adb0:	681b      	ldr	r3, [r3, #0]
   1adb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1adb4:	4b20      	ldr	r3, [pc, #128]	; (1ae38 <prvAddCurrentTaskToDelayedList+0x94>)
   1adb6:	681b      	ldr	r3, [r3, #0]
   1adb8:	3304      	adds	r3, #4
   1adba:	0018      	movs	r0, r3
   1adbc:	4b1f      	ldr	r3, [pc, #124]	; (1ae3c <prvAddCurrentTaskToDelayedList+0x98>)
   1adbe:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1adc0:	687b      	ldr	r3, [r7, #4]
   1adc2:	3301      	adds	r3, #1
   1adc4:	d10b      	bne.n	1adde <prvAddCurrentTaskToDelayedList+0x3a>
   1adc6:	683b      	ldr	r3, [r7, #0]
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d008      	beq.n	1adde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1adcc:	4b1a      	ldr	r3, [pc, #104]	; (1ae38 <prvAddCurrentTaskToDelayedList+0x94>)
   1adce:	681b      	ldr	r3, [r3, #0]
   1add0:	1d1a      	adds	r2, r3, #4
   1add2:	4b1b      	ldr	r3, [pc, #108]	; (1ae40 <prvAddCurrentTaskToDelayedList+0x9c>)
   1add4:	0011      	movs	r1, r2
   1add6:	0018      	movs	r0, r3
   1add8:	4b1a      	ldr	r3, [pc, #104]	; (1ae44 <prvAddCurrentTaskToDelayedList+0xa0>)
   1adda:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1addc:	e026      	b.n	1ae2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1adde:	68fa      	ldr	r2, [r7, #12]
   1ade0:	687b      	ldr	r3, [r7, #4]
   1ade2:	18d3      	adds	r3, r2, r3
   1ade4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1ade6:	4b14      	ldr	r3, [pc, #80]	; (1ae38 <prvAddCurrentTaskToDelayedList+0x94>)
   1ade8:	681b      	ldr	r3, [r3, #0]
   1adea:	68ba      	ldr	r2, [r7, #8]
   1adec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1adee:	68ba      	ldr	r2, [r7, #8]
   1adf0:	68fb      	ldr	r3, [r7, #12]
   1adf2:	429a      	cmp	r2, r3
   1adf4:	d209      	bcs.n	1ae0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1adf6:	4b14      	ldr	r3, [pc, #80]	; (1ae48 <prvAddCurrentTaskToDelayedList+0xa4>)
   1adf8:	681a      	ldr	r2, [r3, #0]
   1adfa:	4b0f      	ldr	r3, [pc, #60]	; (1ae38 <prvAddCurrentTaskToDelayedList+0x94>)
   1adfc:	681b      	ldr	r3, [r3, #0]
   1adfe:	3304      	adds	r3, #4
   1ae00:	0019      	movs	r1, r3
   1ae02:	0010      	movs	r0, r2
   1ae04:	4b11      	ldr	r3, [pc, #68]	; (1ae4c <prvAddCurrentTaskToDelayedList+0xa8>)
   1ae06:	4798      	blx	r3
}
   1ae08:	e010      	b.n	1ae2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ae0a:	4b11      	ldr	r3, [pc, #68]	; (1ae50 <prvAddCurrentTaskToDelayedList+0xac>)
   1ae0c:	681a      	ldr	r2, [r3, #0]
   1ae0e:	4b0a      	ldr	r3, [pc, #40]	; (1ae38 <prvAddCurrentTaskToDelayedList+0x94>)
   1ae10:	681b      	ldr	r3, [r3, #0]
   1ae12:	3304      	adds	r3, #4
   1ae14:	0019      	movs	r1, r3
   1ae16:	0010      	movs	r0, r2
   1ae18:	4b0c      	ldr	r3, [pc, #48]	; (1ae4c <prvAddCurrentTaskToDelayedList+0xa8>)
   1ae1a:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1ae1c:	4b0d      	ldr	r3, [pc, #52]	; (1ae54 <prvAddCurrentTaskToDelayedList+0xb0>)
   1ae1e:	681b      	ldr	r3, [r3, #0]
   1ae20:	68ba      	ldr	r2, [r7, #8]
   1ae22:	429a      	cmp	r2, r3
   1ae24:	d202      	bcs.n	1ae2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1ae26:	4b0b      	ldr	r3, [pc, #44]	; (1ae54 <prvAddCurrentTaskToDelayedList+0xb0>)
   1ae28:	68ba      	ldr	r2, [r7, #8]
   1ae2a:	601a      	str	r2, [r3, #0]
}
   1ae2c:	46c0      	nop			; (mov r8, r8)
   1ae2e:	46bd      	mov	sp, r7
   1ae30:	b004      	add	sp, #16
   1ae32:	bd80      	pop	{r7, pc}
   1ae34:	20003a18 	.word	0x20003a18
   1ae38:	2000393c 	.word	0x2000393c
   1ae3c:	00017a53 	.word	0x00017a53
   1ae40:	20003a00 	.word	0x20003a00
   1ae44:	000179a3 	.word	0x000179a3
   1ae48:	200039d0 	.word	0x200039d0
   1ae4c:	000179e7 	.word	0x000179e7
   1ae50:	200039cc 	.word	0x200039cc
   1ae54:	20003a34 	.word	0x20003a34

0001ae58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1ae58:	b590      	push	{r4, r7, lr}
   1ae5a:	b085      	sub	sp, #20
   1ae5c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1ae5e:	2300      	movs	r3, #0
   1ae60:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1ae62:	4b0e      	ldr	r3, [pc, #56]	; (1ae9c <xTimerCreateTimerTask+0x44>)
   1ae64:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1ae66:	4b0e      	ldr	r3, [pc, #56]	; (1aea0 <xTimerCreateTimerTask+0x48>)
   1ae68:	681b      	ldr	r3, [r3, #0]
   1ae6a:	2b00      	cmp	r3, #0
   1ae6c:	d00b      	beq.n	1ae86 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1ae6e:	490d      	ldr	r1, [pc, #52]	; (1aea4 <xTimerCreateTimerTask+0x4c>)
   1ae70:	480d      	ldr	r0, [pc, #52]	; (1aea8 <xTimerCreateTimerTask+0x50>)
   1ae72:	4b0e      	ldr	r3, [pc, #56]	; (1aeac <xTimerCreateTimerTask+0x54>)
   1ae74:	9301      	str	r3, [sp, #4]
   1ae76:	2302      	movs	r3, #2
   1ae78:	9300      	str	r3, [sp, #0]
   1ae7a:	2300      	movs	r3, #0
   1ae7c:	2280      	movs	r2, #128	; 0x80
   1ae7e:	4c0c      	ldr	r4, [pc, #48]	; (1aeb0 <xTimerCreateTimerTask+0x58>)
   1ae80:	47a0      	blx	r4
   1ae82:	0003      	movs	r3, r0
   1ae84:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1ae86:	687b      	ldr	r3, [r7, #4]
   1ae88:	2b00      	cmp	r3, #0
   1ae8a:	d101      	bne.n	1ae90 <xTimerCreateTimerTask+0x38>
   1ae8c:	b672      	cpsid	i
   1ae8e:	e7fe      	b.n	1ae8e <xTimerCreateTimerTask+0x36>
	return xReturn;
   1ae90:	687b      	ldr	r3, [r7, #4]
}
   1ae92:	0018      	movs	r0, r3
   1ae94:	46bd      	mov	sp, r7
   1ae96:	b003      	add	sp, #12
   1ae98:	bd90      	pop	{r4, r7, pc}
   1ae9a:	46c0      	nop			; (mov r8, r8)
   1ae9c:	0001b3a1 	.word	0x0001b3a1
   1aea0:	20003a70 	.word	0x20003a70
   1aea4:	00024320 	.word	0x00024320
   1aea8:	0001afd9 	.word	0x0001afd9
   1aeac:	20003a74 	.word	0x20003a74
   1aeb0:	00019835 	.word	0x00019835

0001aeb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1aeb4:	b590      	push	{r4, r7, lr}
   1aeb6:	b089      	sub	sp, #36	; 0x24
   1aeb8:	af00      	add	r7, sp, #0
   1aeba:	60f8      	str	r0, [r7, #12]
   1aebc:	60b9      	str	r1, [r7, #8]
   1aebe:	607a      	str	r2, [r7, #4]
   1aec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1aec2:	2300      	movs	r3, #0
   1aec4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1aec6:	68fb      	ldr	r3, [r7, #12]
   1aec8:	2b00      	cmp	r3, #0
   1aeca:	d101      	bne.n	1aed0 <xTimerGenericCommand+0x1c>
   1aecc:	b672      	cpsid	i
   1aece:	e7fe      	b.n	1aece <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1aed0:	4b1e      	ldr	r3, [pc, #120]	; (1af4c <xTimerGenericCommand+0x98>)
   1aed2:	681b      	ldr	r3, [r3, #0]
   1aed4:	2b00      	cmp	r3, #0
   1aed6:	d033      	beq.n	1af40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1aed8:	2310      	movs	r3, #16
   1aeda:	18fb      	adds	r3, r7, r3
   1aedc:	68ba      	ldr	r2, [r7, #8]
   1aede:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1aee0:	2310      	movs	r3, #16
   1aee2:	18fb      	adds	r3, r7, r3
   1aee4:	687a      	ldr	r2, [r7, #4]
   1aee6:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1aee8:	2310      	movs	r3, #16
   1aeea:	18fb      	adds	r3, r7, r3
   1aeec:	68fa      	ldr	r2, [r7, #12]
   1aeee:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1aef0:	68bb      	ldr	r3, [r7, #8]
   1aef2:	2b05      	cmp	r3, #5
   1aef4:	dc1a      	bgt.n	1af2c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1aef6:	4b16      	ldr	r3, [pc, #88]	; (1af50 <xTimerGenericCommand+0x9c>)
   1aef8:	4798      	blx	r3
   1aefa:	0003      	movs	r3, r0
   1aefc:	2b02      	cmp	r3, #2
   1aefe:	d10a      	bne.n	1af16 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1af00:	4b12      	ldr	r3, [pc, #72]	; (1af4c <xTimerGenericCommand+0x98>)
   1af02:	6818      	ldr	r0, [r3, #0]
   1af04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1af06:	2310      	movs	r3, #16
   1af08:	18f9      	adds	r1, r7, r3
   1af0a:	2300      	movs	r3, #0
   1af0c:	4c11      	ldr	r4, [pc, #68]	; (1af54 <xTimerGenericCommand+0xa0>)
   1af0e:	47a0      	blx	r4
   1af10:	0003      	movs	r3, r0
   1af12:	61fb      	str	r3, [r7, #28]
   1af14:	e014      	b.n	1af40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1af16:	4b0d      	ldr	r3, [pc, #52]	; (1af4c <xTimerGenericCommand+0x98>)
   1af18:	6818      	ldr	r0, [r3, #0]
   1af1a:	2310      	movs	r3, #16
   1af1c:	18f9      	adds	r1, r7, r3
   1af1e:	2300      	movs	r3, #0
   1af20:	2200      	movs	r2, #0
   1af22:	4c0c      	ldr	r4, [pc, #48]	; (1af54 <xTimerGenericCommand+0xa0>)
   1af24:	47a0      	blx	r4
   1af26:	0003      	movs	r3, r0
   1af28:	61fb      	str	r3, [r7, #28]
   1af2a:	e009      	b.n	1af40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1af2c:	4b07      	ldr	r3, [pc, #28]	; (1af4c <xTimerGenericCommand+0x98>)
   1af2e:	6818      	ldr	r0, [r3, #0]
   1af30:	683a      	ldr	r2, [r7, #0]
   1af32:	2310      	movs	r3, #16
   1af34:	18f9      	adds	r1, r7, r3
   1af36:	2300      	movs	r3, #0
   1af38:	4c07      	ldr	r4, [pc, #28]	; (1af58 <xTimerGenericCommand+0xa4>)
   1af3a:	47a0      	blx	r4
   1af3c:	0003      	movs	r3, r0
   1af3e:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1af40:	69fb      	ldr	r3, [r7, #28]
}
   1af42:	0018      	movs	r0, r3
   1af44:	46bd      	mov	sp, r7
   1af46:	b009      	add	sp, #36	; 0x24
   1af48:	bd90      	pop	{r4, r7, pc}
   1af4a:	46c0      	nop			; (mov r8, r8)
   1af4c:	20003a70 	.word	0x20003a70
   1af50:	0001a8b5 	.word	0x0001a8b5
   1af54:	0001816d 	.word	0x0001816d
   1af58:	000185cd 	.word	0x000185cd

0001af5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1af5c:	b590      	push	{r4, r7, lr}
   1af5e:	b087      	sub	sp, #28
   1af60:	af02      	add	r7, sp, #8
   1af62:	6078      	str	r0, [r7, #4]
   1af64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1af66:	4b18      	ldr	r3, [pc, #96]	; (1afc8 <prvProcessExpiredTimer+0x6c>)
   1af68:	681b      	ldr	r3, [r3, #0]
   1af6a:	68db      	ldr	r3, [r3, #12]
   1af6c:	68db      	ldr	r3, [r3, #12]
   1af6e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1af70:	68fb      	ldr	r3, [r7, #12]
   1af72:	3304      	adds	r3, #4
   1af74:	0018      	movs	r0, r3
   1af76:	4b15      	ldr	r3, [pc, #84]	; (1afcc <prvProcessExpiredTimer+0x70>)
   1af78:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1af7a:	68fb      	ldr	r3, [r7, #12]
   1af7c:	69db      	ldr	r3, [r3, #28]
   1af7e:	2b01      	cmp	r3, #1
   1af80:	d119      	bne.n	1afb6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1af82:	68fb      	ldr	r3, [r7, #12]
   1af84:	699a      	ldr	r2, [r3, #24]
   1af86:	687b      	ldr	r3, [r7, #4]
   1af88:	18d1      	adds	r1, r2, r3
   1af8a:	687b      	ldr	r3, [r7, #4]
   1af8c:	683a      	ldr	r2, [r7, #0]
   1af8e:	68f8      	ldr	r0, [r7, #12]
   1af90:	4c0f      	ldr	r4, [pc, #60]	; (1afd0 <prvProcessExpiredTimer+0x74>)
   1af92:	47a0      	blx	r4
   1af94:	1e03      	subs	r3, r0, #0
   1af96:	d00e      	beq.n	1afb6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1af98:	687a      	ldr	r2, [r7, #4]
   1af9a:	68f8      	ldr	r0, [r7, #12]
   1af9c:	2300      	movs	r3, #0
   1af9e:	9300      	str	r3, [sp, #0]
   1afa0:	2300      	movs	r3, #0
   1afa2:	2100      	movs	r1, #0
   1afa4:	4c0b      	ldr	r4, [pc, #44]	; (1afd4 <prvProcessExpiredTimer+0x78>)
   1afa6:	47a0      	blx	r4
   1afa8:	0003      	movs	r3, r0
   1afaa:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1afac:	68bb      	ldr	r3, [r7, #8]
   1afae:	2b00      	cmp	r3, #0
   1afb0:	d101      	bne.n	1afb6 <prvProcessExpiredTimer+0x5a>
   1afb2:	b672      	cpsid	i
   1afb4:	e7fe      	b.n	1afb4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1afb6:	68fb      	ldr	r3, [r7, #12]
   1afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1afba:	68fa      	ldr	r2, [r7, #12]
   1afbc:	0010      	movs	r0, r2
   1afbe:	4798      	blx	r3
}
   1afc0:	46c0      	nop			; (mov r8, r8)
   1afc2:	46bd      	mov	sp, r7
   1afc4:	b005      	add	sp, #20
   1afc6:	bd90      	pop	{r4, r7, pc}
   1afc8:	20003a68 	.word	0x20003a68
   1afcc:	00017a53 	.word	0x00017a53
   1afd0:	0001b141 	.word	0x0001b141
   1afd4:	0001aeb5 	.word	0x0001aeb5

0001afd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1afd8:	b580      	push	{r7, lr}
   1afda:	b084      	sub	sp, #16
   1afdc:	af00      	add	r7, sp, #0
   1afde:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1afe0:	4b08      	ldr	r3, [pc, #32]	; (1b004 <prvTimerTask+0x2c>)
   1afe2:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1afe4:	2308      	movs	r3, #8
   1afe6:	18fb      	adds	r3, r7, r3
   1afe8:	0018      	movs	r0, r3
   1afea:	4b07      	ldr	r3, [pc, #28]	; (1b008 <prvTimerTask+0x30>)
   1afec:	4798      	blx	r3
   1afee:	0003      	movs	r3, r0
   1aff0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1aff2:	68ba      	ldr	r2, [r7, #8]
   1aff4:	68fb      	ldr	r3, [r7, #12]
   1aff6:	0011      	movs	r1, r2
   1aff8:	0018      	movs	r0, r3
   1affa:	4b04      	ldr	r3, [pc, #16]	; (1b00c <prvTimerTask+0x34>)
   1affc:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1affe:	4b04      	ldr	r3, [pc, #16]	; (1b010 <prvTimerTask+0x38>)
   1b000:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1b002:	e7ef      	b.n	1afe4 <prvTimerTask+0xc>
   1b004:	0001f295 	.word	0x0001f295
   1b008:	0001b0b9 	.word	0x0001b0b9
   1b00c:	0001b015 	.word	0x0001b015
   1b010:	0001b1c9 	.word	0x0001b1c9

0001b014 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1b014:	b580      	push	{r7, lr}
   1b016:	b084      	sub	sp, #16
   1b018:	af00      	add	r7, sp, #0
   1b01a:	6078      	str	r0, [r7, #4]
   1b01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1b01e:	4b1e      	ldr	r3, [pc, #120]	; (1b098 <prvProcessTimerOrBlockTask+0x84>)
   1b020:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1b022:	2308      	movs	r3, #8
   1b024:	18fb      	adds	r3, r7, r3
   1b026:	0018      	movs	r0, r3
   1b028:	4b1c      	ldr	r3, [pc, #112]	; (1b09c <prvProcessTimerOrBlockTask+0x88>)
   1b02a:	4798      	blx	r3
   1b02c:	0003      	movs	r3, r0
   1b02e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1b030:	68bb      	ldr	r3, [r7, #8]
   1b032:	2b00      	cmp	r3, #0
   1b034:	d129      	bne.n	1b08a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1b036:	683b      	ldr	r3, [r7, #0]
   1b038:	2b00      	cmp	r3, #0
   1b03a:	d10c      	bne.n	1b056 <prvProcessTimerOrBlockTask+0x42>
   1b03c:	687a      	ldr	r2, [r7, #4]
   1b03e:	68fb      	ldr	r3, [r7, #12]
   1b040:	429a      	cmp	r2, r3
   1b042:	d808      	bhi.n	1b056 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1b044:	4b16      	ldr	r3, [pc, #88]	; (1b0a0 <prvProcessTimerOrBlockTask+0x8c>)
   1b046:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1b048:	68fa      	ldr	r2, [r7, #12]
   1b04a:	687b      	ldr	r3, [r7, #4]
   1b04c:	0011      	movs	r1, r2
   1b04e:	0018      	movs	r0, r3
   1b050:	4b14      	ldr	r3, [pc, #80]	; (1b0a4 <prvProcessTimerOrBlockTask+0x90>)
   1b052:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1b054:	e01b      	b.n	1b08e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1b056:	683b      	ldr	r3, [r7, #0]
   1b058:	2b00      	cmp	r3, #0
   1b05a:	d006      	beq.n	1b06a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1b05c:	4b12      	ldr	r3, [pc, #72]	; (1b0a8 <prvProcessTimerOrBlockTask+0x94>)
   1b05e:	681b      	ldr	r3, [r3, #0]
   1b060:	681b      	ldr	r3, [r3, #0]
   1b062:	425a      	negs	r2, r3
   1b064:	4153      	adcs	r3, r2
   1b066:	b2db      	uxtb	r3, r3
   1b068:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1b06a:	4b10      	ldr	r3, [pc, #64]	; (1b0ac <prvProcessTimerOrBlockTask+0x98>)
   1b06c:	6818      	ldr	r0, [r3, #0]
   1b06e:	687a      	ldr	r2, [r7, #4]
   1b070:	68fb      	ldr	r3, [r7, #12]
   1b072:	1ad3      	subs	r3, r2, r3
   1b074:	683a      	ldr	r2, [r7, #0]
   1b076:	0019      	movs	r1, r3
   1b078:	4b0d      	ldr	r3, [pc, #52]	; (1b0b0 <prvProcessTimerOrBlockTask+0x9c>)
   1b07a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b07c:	4b08      	ldr	r3, [pc, #32]	; (1b0a0 <prvProcessTimerOrBlockTask+0x8c>)
   1b07e:	4798      	blx	r3
   1b080:	1e03      	subs	r3, r0, #0
   1b082:	d104      	bne.n	1b08e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1b084:	4b0b      	ldr	r3, [pc, #44]	; (1b0b4 <prvProcessTimerOrBlockTask+0xa0>)
   1b086:	4798      	blx	r3
}
   1b088:	e001      	b.n	1b08e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1b08a:	4b05      	ldr	r3, [pc, #20]	; (1b0a0 <prvProcessTimerOrBlockTask+0x8c>)
   1b08c:	4798      	blx	r3
}
   1b08e:	46c0      	nop			; (mov r8, r8)
   1b090:	46bd      	mov	sp, r7
   1b092:	b004      	add	sp, #16
   1b094:	bd80      	pop	{r7, pc}
   1b096:	46c0      	nop			; (mov r8, r8)
   1b098:	00019e91 	.word	0x00019e91
   1b09c:	0001b0f9 	.word	0x0001b0f9
   1b0a0:	00019ea9 	.word	0x00019ea9
   1b0a4:	0001af5d 	.word	0x0001af5d
   1b0a8:	20003a6c 	.word	0x20003a6c
   1b0ac:	20003a70 	.word	0x20003a70
   1b0b0:	00019631 	.word	0x00019631
   1b0b4:	00017bc1 	.word	0x00017bc1

0001b0b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1b0b8:	b580      	push	{r7, lr}
   1b0ba:	b084      	sub	sp, #16
   1b0bc:	af00      	add	r7, sp, #0
   1b0be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1b0c0:	4b0c      	ldr	r3, [pc, #48]	; (1b0f4 <prvGetNextExpireTime+0x3c>)
   1b0c2:	681b      	ldr	r3, [r3, #0]
   1b0c4:	681b      	ldr	r3, [r3, #0]
   1b0c6:	425a      	negs	r2, r3
   1b0c8:	4153      	adcs	r3, r2
   1b0ca:	b2db      	uxtb	r3, r3
   1b0cc:	001a      	movs	r2, r3
   1b0ce:	687b      	ldr	r3, [r7, #4]
   1b0d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1b0d2:	687b      	ldr	r3, [r7, #4]
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d105      	bne.n	1b0e6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b0da:	4b06      	ldr	r3, [pc, #24]	; (1b0f4 <prvGetNextExpireTime+0x3c>)
   1b0dc:	681b      	ldr	r3, [r3, #0]
   1b0de:	68db      	ldr	r3, [r3, #12]
   1b0e0:	681b      	ldr	r3, [r3, #0]
   1b0e2:	60fb      	str	r3, [r7, #12]
   1b0e4:	e001      	b.n	1b0ea <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1b0e6:	2300      	movs	r3, #0
   1b0e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1b0ea:	68fb      	ldr	r3, [r7, #12]
}
   1b0ec:	0018      	movs	r0, r3
   1b0ee:	46bd      	mov	sp, r7
   1b0f0:	b004      	add	sp, #16
   1b0f2:	bd80      	pop	{r7, pc}
   1b0f4:	20003a68 	.word	0x20003a68

0001b0f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1b0f8:	b580      	push	{r7, lr}
   1b0fa:	b084      	sub	sp, #16
   1b0fc:	af00      	add	r7, sp, #0
   1b0fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1b100:	4b0c      	ldr	r3, [pc, #48]	; (1b134 <prvSampleTimeNow+0x3c>)
   1b102:	4798      	blx	r3
   1b104:	0003      	movs	r3, r0
   1b106:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1b108:	4b0b      	ldr	r3, [pc, #44]	; (1b138 <prvSampleTimeNow+0x40>)
   1b10a:	681b      	ldr	r3, [r3, #0]
   1b10c:	68fa      	ldr	r2, [r7, #12]
   1b10e:	429a      	cmp	r2, r3
   1b110:	d205      	bcs.n	1b11e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1b112:	4b0a      	ldr	r3, [pc, #40]	; (1b13c <prvSampleTimeNow+0x44>)
   1b114:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1b116:	687b      	ldr	r3, [r7, #4]
   1b118:	2201      	movs	r2, #1
   1b11a:	601a      	str	r2, [r3, #0]
   1b11c:	e002      	b.n	1b124 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1b11e:	687b      	ldr	r3, [r7, #4]
   1b120:	2200      	movs	r2, #0
   1b122:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1b124:	4b04      	ldr	r3, [pc, #16]	; (1b138 <prvSampleTimeNow+0x40>)
   1b126:	68fa      	ldr	r2, [r7, #12]
   1b128:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1b12a:	68fb      	ldr	r3, [r7, #12]
}
   1b12c:	0018      	movs	r0, r3
   1b12e:	46bd      	mov	sp, r7
   1b130:	b004      	add	sp, #16
   1b132:	bd80      	pop	{r7, pc}
   1b134:	0001a019 	.word	0x0001a019
   1b138:	20003a78 	.word	0x20003a78
   1b13c:	0001b2e1 	.word	0x0001b2e1

0001b140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1b140:	b580      	push	{r7, lr}
   1b142:	b086      	sub	sp, #24
   1b144:	af00      	add	r7, sp, #0
   1b146:	60f8      	str	r0, [r7, #12]
   1b148:	60b9      	str	r1, [r7, #8]
   1b14a:	607a      	str	r2, [r7, #4]
   1b14c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1b14e:	2300      	movs	r3, #0
   1b150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1b152:	68fb      	ldr	r3, [r7, #12]
   1b154:	68ba      	ldr	r2, [r7, #8]
   1b156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1b158:	68fb      	ldr	r3, [r7, #12]
   1b15a:	68fa      	ldr	r2, [r7, #12]
   1b15c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1b15e:	68ba      	ldr	r2, [r7, #8]
   1b160:	687b      	ldr	r3, [r7, #4]
   1b162:	429a      	cmp	r2, r3
   1b164:	d812      	bhi.n	1b18c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b166:	687a      	ldr	r2, [r7, #4]
   1b168:	683b      	ldr	r3, [r7, #0]
   1b16a:	1ad2      	subs	r2, r2, r3
   1b16c:	68fb      	ldr	r3, [r7, #12]
   1b16e:	699b      	ldr	r3, [r3, #24]
   1b170:	429a      	cmp	r2, r3
   1b172:	d302      	bcc.n	1b17a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1b174:	2301      	movs	r3, #1
   1b176:	617b      	str	r3, [r7, #20]
   1b178:	e01b      	b.n	1b1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1b17a:	4b10      	ldr	r3, [pc, #64]	; (1b1bc <prvInsertTimerInActiveList+0x7c>)
   1b17c:	681a      	ldr	r2, [r3, #0]
   1b17e:	68fb      	ldr	r3, [r7, #12]
   1b180:	3304      	adds	r3, #4
   1b182:	0019      	movs	r1, r3
   1b184:	0010      	movs	r0, r2
   1b186:	4b0e      	ldr	r3, [pc, #56]	; (1b1c0 <prvInsertTimerInActiveList+0x80>)
   1b188:	4798      	blx	r3
   1b18a:	e012      	b.n	1b1b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1b18c:	687a      	ldr	r2, [r7, #4]
   1b18e:	683b      	ldr	r3, [r7, #0]
   1b190:	429a      	cmp	r2, r3
   1b192:	d206      	bcs.n	1b1a2 <prvInsertTimerInActiveList+0x62>
   1b194:	68ba      	ldr	r2, [r7, #8]
   1b196:	683b      	ldr	r3, [r7, #0]
   1b198:	429a      	cmp	r2, r3
   1b19a:	d302      	bcc.n	1b1a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1b19c:	2301      	movs	r3, #1
   1b19e:	617b      	str	r3, [r7, #20]
   1b1a0:	e007      	b.n	1b1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b1a2:	4b08      	ldr	r3, [pc, #32]	; (1b1c4 <prvInsertTimerInActiveList+0x84>)
   1b1a4:	681a      	ldr	r2, [r3, #0]
   1b1a6:	68fb      	ldr	r3, [r7, #12]
   1b1a8:	3304      	adds	r3, #4
   1b1aa:	0019      	movs	r1, r3
   1b1ac:	0010      	movs	r0, r2
   1b1ae:	4b04      	ldr	r3, [pc, #16]	; (1b1c0 <prvInsertTimerInActiveList+0x80>)
   1b1b0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1b1b2:	697b      	ldr	r3, [r7, #20]
}
   1b1b4:	0018      	movs	r0, r3
   1b1b6:	46bd      	mov	sp, r7
   1b1b8:	b006      	add	sp, #24
   1b1ba:	bd80      	pop	{r7, pc}
   1b1bc:	20003a6c 	.word	0x20003a6c
   1b1c0:	000179e7 	.word	0x000179e7
   1b1c4:	20003a68 	.word	0x20003a68

0001b1c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1b1c8:	b590      	push	{r4, r7, lr}
   1b1ca:	b08b      	sub	sp, #44	; 0x2c
   1b1cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1b1ce:	e068      	b.n	1b2a2 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1b1d0:	2308      	movs	r3, #8
   1b1d2:	18fb      	adds	r3, r7, r3
   1b1d4:	681b      	ldr	r3, [r3, #0]
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	db63      	blt.n	1b2a2 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1b1da:	2308      	movs	r3, #8
   1b1dc:	18fb      	adds	r3, r7, r3
   1b1de:	689b      	ldr	r3, [r3, #8]
   1b1e0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1b1e2:	69fb      	ldr	r3, [r7, #28]
   1b1e4:	695b      	ldr	r3, [r3, #20]
   1b1e6:	2b00      	cmp	r3, #0
   1b1e8:	d004      	beq.n	1b1f4 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1b1ea:	69fb      	ldr	r3, [r7, #28]
   1b1ec:	3304      	adds	r3, #4
   1b1ee:	0018      	movs	r0, r3
   1b1f0:	4b33      	ldr	r3, [pc, #204]	; (1b2c0 <prvProcessReceivedCommands+0xf8>)
   1b1f2:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1b1f4:	1d3b      	adds	r3, r7, #4
   1b1f6:	0018      	movs	r0, r3
   1b1f8:	4b32      	ldr	r3, [pc, #200]	; (1b2c4 <prvProcessReceivedCommands+0xfc>)
   1b1fa:	4798      	blx	r3
   1b1fc:	0003      	movs	r3, r0
   1b1fe:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1b200:	2308      	movs	r3, #8
   1b202:	18fb      	adds	r3, r7, r3
   1b204:	681b      	ldr	r3, [r3, #0]
   1b206:	2b09      	cmp	r3, #9
   1b208:	d84a      	bhi.n	1b2a0 <prvProcessReceivedCommands+0xd8>
   1b20a:	009a      	lsls	r2, r3, #2
   1b20c:	4b2e      	ldr	r3, [pc, #184]	; (1b2c8 <prvProcessReceivedCommands+0x100>)
   1b20e:	18d3      	adds	r3, r2, r3
   1b210:	681b      	ldr	r3, [r3, #0]
   1b212:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1b214:	2308      	movs	r3, #8
   1b216:	18fb      	adds	r3, r7, r3
   1b218:	685a      	ldr	r2, [r3, #4]
   1b21a:	69fb      	ldr	r3, [r7, #28]
   1b21c:	699b      	ldr	r3, [r3, #24]
   1b21e:	18d1      	adds	r1, r2, r3
   1b220:	2308      	movs	r3, #8
   1b222:	18fb      	adds	r3, r7, r3
   1b224:	685b      	ldr	r3, [r3, #4]
   1b226:	69ba      	ldr	r2, [r7, #24]
   1b228:	69f8      	ldr	r0, [r7, #28]
   1b22a:	4c28      	ldr	r4, [pc, #160]	; (1b2cc <prvProcessReceivedCommands+0x104>)
   1b22c:	47a0      	blx	r4
   1b22e:	1e03      	subs	r3, r0, #0
   1b230:	d037      	beq.n	1b2a2 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1b232:	69fb      	ldr	r3, [r7, #28]
   1b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b236:	69fa      	ldr	r2, [r7, #28]
   1b238:	0010      	movs	r0, r2
   1b23a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1b23c:	69fb      	ldr	r3, [r7, #28]
   1b23e:	69db      	ldr	r3, [r3, #28]
   1b240:	2b01      	cmp	r3, #1
   1b242:	d12e      	bne.n	1b2a2 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1b244:	2308      	movs	r3, #8
   1b246:	18fb      	adds	r3, r7, r3
   1b248:	685a      	ldr	r2, [r3, #4]
   1b24a:	69fb      	ldr	r3, [r7, #28]
   1b24c:	699b      	ldr	r3, [r3, #24]
   1b24e:	18d2      	adds	r2, r2, r3
   1b250:	69f8      	ldr	r0, [r7, #28]
   1b252:	2300      	movs	r3, #0
   1b254:	9300      	str	r3, [sp, #0]
   1b256:	2300      	movs	r3, #0
   1b258:	2100      	movs	r1, #0
   1b25a:	4c1d      	ldr	r4, [pc, #116]	; (1b2d0 <prvProcessReceivedCommands+0x108>)
   1b25c:	47a0      	blx	r4
   1b25e:	0003      	movs	r3, r0
   1b260:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1b262:	697b      	ldr	r3, [r7, #20]
   1b264:	2b00      	cmp	r3, #0
   1b266:	d11c      	bne.n	1b2a2 <prvProcessReceivedCommands+0xda>
   1b268:	b672      	cpsid	i
   1b26a:	e7fe      	b.n	1b26a <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1b26c:	2308      	movs	r3, #8
   1b26e:	18fb      	adds	r3, r7, r3
   1b270:	685a      	ldr	r2, [r3, #4]
   1b272:	69fb      	ldr	r3, [r7, #28]
   1b274:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1b276:	69fb      	ldr	r3, [r7, #28]
   1b278:	699b      	ldr	r3, [r3, #24]
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d101      	bne.n	1b282 <prvProcessReceivedCommands+0xba>
   1b27e:	b672      	cpsid	i
   1b280:	e7fe      	b.n	1b280 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1b282:	69fb      	ldr	r3, [r7, #28]
   1b284:	699a      	ldr	r2, [r3, #24]
   1b286:	69bb      	ldr	r3, [r7, #24]
   1b288:	18d1      	adds	r1, r2, r3
   1b28a:	69bb      	ldr	r3, [r7, #24]
   1b28c:	69ba      	ldr	r2, [r7, #24]
   1b28e:	69f8      	ldr	r0, [r7, #28]
   1b290:	4c0e      	ldr	r4, [pc, #56]	; (1b2cc <prvProcessReceivedCommands+0x104>)
   1b292:	47a0      	blx	r4
					break;
   1b294:	e005      	b.n	1b2a2 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1b296:	69fb      	ldr	r3, [r7, #28]
   1b298:	0018      	movs	r0, r3
   1b29a:	4b0e      	ldr	r3, [pc, #56]	; (1b2d4 <prvProcessReceivedCommands+0x10c>)
   1b29c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1b29e:	e000      	b.n	1b2a2 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1b2a0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1b2a2:	4b0d      	ldr	r3, [pc, #52]	; (1b2d8 <prvProcessReceivedCommands+0x110>)
   1b2a4:	681b      	ldr	r3, [r3, #0]
   1b2a6:	2208      	movs	r2, #8
   1b2a8:	18b9      	adds	r1, r7, r2
   1b2aa:	2200      	movs	r2, #0
   1b2ac:	0018      	movs	r0, r3
   1b2ae:	4b0b      	ldr	r3, [pc, #44]	; (1b2dc <prvProcessReceivedCommands+0x114>)
   1b2b0:	4798      	blx	r3
   1b2b2:	1e03      	subs	r3, r0, #0
   1b2b4:	d18c      	bne.n	1b1d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1b2b6:	46c0      	nop			; (mov r8, r8)
   1b2b8:	46bd      	mov	sp, r7
   1b2ba:	b009      	add	sp, #36	; 0x24
   1b2bc:	bd90      	pop	{r4, r7, pc}
   1b2be:	46c0      	nop			; (mov r8, r8)
   1b2c0:	00017a53 	.word	0x00017a53
   1b2c4:	0001b0f9 	.word	0x0001b0f9
   1b2c8:	00024328 	.word	0x00024328
   1b2cc:	0001b141 	.word	0x0001b141
   1b2d0:	0001aeb5 	.word	0x0001aeb5
   1b2d4:	00017dd5 	.word	0x00017dd5
   1b2d8:	20003a70 	.word	0x20003a70
   1b2dc:	00018a25 	.word	0x00018a25

0001b2e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1b2e0:	b590      	push	{r4, r7, lr}
   1b2e2:	b089      	sub	sp, #36	; 0x24
   1b2e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1b2e6:	e03e      	b.n	1b366 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b2e8:	4b28      	ldr	r3, [pc, #160]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b2ea:	681b      	ldr	r3, [r3, #0]
   1b2ec:	68db      	ldr	r3, [r3, #12]
   1b2ee:	681b      	ldr	r3, [r3, #0]
   1b2f0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1b2f2:	4b26      	ldr	r3, [pc, #152]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b2f4:	681b      	ldr	r3, [r3, #0]
   1b2f6:	68db      	ldr	r3, [r3, #12]
   1b2f8:	68db      	ldr	r3, [r3, #12]
   1b2fa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1b2fc:	693b      	ldr	r3, [r7, #16]
   1b2fe:	3304      	adds	r3, #4
   1b300:	0018      	movs	r0, r3
   1b302:	4b23      	ldr	r3, [pc, #140]	; (1b390 <prvSwitchTimerLists+0xb0>)
   1b304:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1b306:	693b      	ldr	r3, [r7, #16]
   1b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b30a:	693a      	ldr	r2, [r7, #16]
   1b30c:	0010      	movs	r0, r2
   1b30e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1b310:	693b      	ldr	r3, [r7, #16]
   1b312:	69db      	ldr	r3, [r3, #28]
   1b314:	2b01      	cmp	r3, #1
   1b316:	d126      	bne.n	1b366 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1b318:	693b      	ldr	r3, [r7, #16]
   1b31a:	699a      	ldr	r2, [r3, #24]
   1b31c:	697b      	ldr	r3, [r7, #20]
   1b31e:	18d3      	adds	r3, r2, r3
   1b320:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1b322:	68fa      	ldr	r2, [r7, #12]
   1b324:	697b      	ldr	r3, [r7, #20]
   1b326:	429a      	cmp	r2, r3
   1b328:	d90e      	bls.n	1b348 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1b32a:	693b      	ldr	r3, [r7, #16]
   1b32c:	68fa      	ldr	r2, [r7, #12]
   1b32e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1b330:	693b      	ldr	r3, [r7, #16]
   1b332:	693a      	ldr	r2, [r7, #16]
   1b334:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1b336:	4b15      	ldr	r3, [pc, #84]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b338:	681a      	ldr	r2, [r3, #0]
   1b33a:	693b      	ldr	r3, [r7, #16]
   1b33c:	3304      	adds	r3, #4
   1b33e:	0019      	movs	r1, r3
   1b340:	0010      	movs	r0, r2
   1b342:	4b14      	ldr	r3, [pc, #80]	; (1b394 <prvSwitchTimerLists+0xb4>)
   1b344:	4798      	blx	r3
   1b346:	e00e      	b.n	1b366 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1b348:	697a      	ldr	r2, [r7, #20]
   1b34a:	6938      	ldr	r0, [r7, #16]
   1b34c:	2300      	movs	r3, #0
   1b34e:	9300      	str	r3, [sp, #0]
   1b350:	2300      	movs	r3, #0
   1b352:	2100      	movs	r1, #0
   1b354:	4c10      	ldr	r4, [pc, #64]	; (1b398 <prvSwitchTimerLists+0xb8>)
   1b356:	47a0      	blx	r4
   1b358:	0003      	movs	r3, r0
   1b35a:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1b35c:	68bb      	ldr	r3, [r7, #8]
   1b35e:	2b00      	cmp	r3, #0
   1b360:	d101      	bne.n	1b366 <prvSwitchTimerLists+0x86>
   1b362:	b672      	cpsid	i
   1b364:	e7fe      	b.n	1b364 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1b366:	4b09      	ldr	r3, [pc, #36]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b368:	681b      	ldr	r3, [r3, #0]
   1b36a:	681b      	ldr	r3, [r3, #0]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d1bb      	bne.n	1b2e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1b370:	4b06      	ldr	r3, [pc, #24]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b372:	681b      	ldr	r3, [r3, #0]
   1b374:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1b376:	4b09      	ldr	r3, [pc, #36]	; (1b39c <prvSwitchTimerLists+0xbc>)
   1b378:	681a      	ldr	r2, [r3, #0]
   1b37a:	4b04      	ldr	r3, [pc, #16]	; (1b38c <prvSwitchTimerLists+0xac>)
   1b37c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1b37e:	4b07      	ldr	r3, [pc, #28]	; (1b39c <prvSwitchTimerLists+0xbc>)
   1b380:	687a      	ldr	r2, [r7, #4]
   1b382:	601a      	str	r2, [r3, #0]
}
   1b384:	46c0      	nop			; (mov r8, r8)
   1b386:	46bd      	mov	sp, r7
   1b388:	b007      	add	sp, #28
   1b38a:	bd90      	pop	{r4, r7, pc}
   1b38c:	20003a68 	.word	0x20003a68
   1b390:	00017a53 	.word	0x00017a53
   1b394:	000179e7 	.word	0x000179e7
   1b398:	0001aeb5 	.word	0x0001aeb5
   1b39c:	20003a6c 	.word	0x20003a6c

0001b3a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1b3a0:	b580      	push	{r7, lr}
   1b3a2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1b3a4:	4b10      	ldr	r3, [pc, #64]	; (1b3e8 <prvCheckForValidListAndQueue+0x48>)
   1b3a6:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1b3a8:	4b10      	ldr	r3, [pc, #64]	; (1b3ec <prvCheckForValidListAndQueue+0x4c>)
   1b3aa:	681b      	ldr	r3, [r3, #0]
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d115      	bne.n	1b3dc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1b3b0:	4b0f      	ldr	r3, [pc, #60]	; (1b3f0 <prvCheckForValidListAndQueue+0x50>)
   1b3b2:	0018      	movs	r0, r3
   1b3b4:	4b0f      	ldr	r3, [pc, #60]	; (1b3f4 <prvCheckForValidListAndQueue+0x54>)
   1b3b6:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1b3b8:	4b0f      	ldr	r3, [pc, #60]	; (1b3f8 <prvCheckForValidListAndQueue+0x58>)
   1b3ba:	0018      	movs	r0, r3
   1b3bc:	4b0d      	ldr	r3, [pc, #52]	; (1b3f4 <prvCheckForValidListAndQueue+0x54>)
   1b3be:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1b3c0:	4b0e      	ldr	r3, [pc, #56]	; (1b3fc <prvCheckForValidListAndQueue+0x5c>)
   1b3c2:	4a0b      	ldr	r2, [pc, #44]	; (1b3f0 <prvCheckForValidListAndQueue+0x50>)
   1b3c4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1b3c6:	4b0e      	ldr	r3, [pc, #56]	; (1b400 <prvCheckForValidListAndQueue+0x60>)
   1b3c8:	4a0b      	ldr	r2, [pc, #44]	; (1b3f8 <prvCheckForValidListAndQueue+0x58>)
   1b3ca:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1b3cc:	2200      	movs	r2, #0
   1b3ce:	210c      	movs	r1, #12
   1b3d0:	2005      	movs	r0, #5
   1b3d2:	4b0c      	ldr	r3, [pc, #48]	; (1b404 <prvCheckForValidListAndQueue+0x64>)
   1b3d4:	4798      	blx	r3
   1b3d6:	0002      	movs	r2, r0
   1b3d8:	4b04      	ldr	r3, [pc, #16]	; (1b3ec <prvCheckForValidListAndQueue+0x4c>)
   1b3da:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b3dc:	4b0a      	ldr	r3, [pc, #40]	; (1b408 <prvCheckForValidListAndQueue+0x68>)
   1b3de:	4798      	blx	r3
}
   1b3e0:	46c0      	nop			; (mov r8, r8)
   1b3e2:	46bd      	mov	sp, r7
   1b3e4:	bd80      	pop	{r7, pc}
   1b3e6:	46c0      	nop			; (mov r8, r8)
   1b3e8:	00017bd9 	.word	0x00017bd9
   1b3ec:	20003a70 	.word	0x20003a70
   1b3f0:	20003a40 	.word	0x20003a40
   1b3f4:	00017951 	.word	0x00017951
   1b3f8:	20003a54 	.word	0x20003a54
   1b3fc:	20003a68 	.word	0x20003a68
   1b400:	20003a6c 	.word	0x20003a6c
   1b404:	00017ec5 	.word	0x00017ec5
   1b408:	00017bfd 	.word	0x00017bfd

0001b40c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1b40c:	b580      	push	{r7, lr}
   1b40e:	b082      	sub	sp, #8
   1b410:	af00      	add	r7, sp, #0
   1b412:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1b414:	687b      	ldr	r3, [r7, #4]
   1b416:	7c1b      	ldrb	r3, [r3, #16]
   1b418:	2b00      	cmp	r3, #0
   1b41a:	d00b      	beq.n	1b434 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1b41c:	687b      	ldr	r3, [r7, #4]
   1b41e:	689b      	ldr	r3, [r3, #8]
   1b420:	1c5a      	adds	r2, r3, #1
   1b422:	687b      	ldr	r3, [r7, #4]
   1b424:	68d9      	ldr	r1, [r3, #12]
   1b426:	4b10      	ldr	r3, [pc, #64]	; (1b468 <advance_pointer+0x5c>)
   1b428:	0010      	movs	r0, r2
   1b42a:	4798      	blx	r3
   1b42c:	000b      	movs	r3, r1
   1b42e:	001a      	movs	r2, r3
   1b430:	687b      	ldr	r3, [r7, #4]
   1b432:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1b434:	687b      	ldr	r3, [r7, #4]
   1b436:	685b      	ldr	r3, [r3, #4]
   1b438:	1c5a      	adds	r2, r3, #1
   1b43a:	687b      	ldr	r3, [r7, #4]
   1b43c:	68d9      	ldr	r1, [r3, #12]
   1b43e:	4b0a      	ldr	r3, [pc, #40]	; (1b468 <advance_pointer+0x5c>)
   1b440:	0010      	movs	r0, r2
   1b442:	4798      	blx	r3
   1b444:	000b      	movs	r3, r1
   1b446:	001a      	movs	r2, r3
   1b448:	687b      	ldr	r3, [r7, #4]
   1b44a:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1b44c:	687b      	ldr	r3, [r7, #4]
   1b44e:	685a      	ldr	r2, [r3, #4]
   1b450:	687b      	ldr	r3, [r7, #4]
   1b452:	689b      	ldr	r3, [r3, #8]
   1b454:	1ad3      	subs	r3, r2, r3
   1b456:	425a      	negs	r2, r3
   1b458:	4153      	adcs	r3, r2
   1b45a:	b2da      	uxtb	r2, r3
   1b45c:	687b      	ldr	r3, [r7, #4]
   1b45e:	741a      	strb	r2, [r3, #16]
 }
   1b460:	46c0      	nop			; (mov r8, r8)
   1b462:	46bd      	mov	sp, r7
   1b464:	b002      	add	sp, #8
   1b466:	bd80      	pop	{r7, pc}
   1b468:	0001f519 	.word	0x0001f519

0001b46c <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1b46c:	b580      	push	{r7, lr}
   1b46e:	b082      	sub	sp, #8
   1b470:	af00      	add	r7, sp, #0
   1b472:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1b474:	687b      	ldr	r3, [r7, #4]
   1b476:	2200      	movs	r2, #0
   1b478:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1b47a:	687b      	ldr	r3, [r7, #4]
   1b47c:	689b      	ldr	r3, [r3, #8]
   1b47e:	1c5a      	adds	r2, r3, #1
   1b480:	687b      	ldr	r3, [r7, #4]
   1b482:	68d9      	ldr	r1, [r3, #12]
   1b484:	4b05      	ldr	r3, [pc, #20]	; (1b49c <retreat_pointer+0x30>)
   1b486:	0010      	movs	r0, r2
   1b488:	4798      	blx	r3
   1b48a:	000b      	movs	r3, r1
   1b48c:	001a      	movs	r2, r3
   1b48e:	687b      	ldr	r3, [r7, #4]
   1b490:	609a      	str	r2, [r3, #8]
 }
   1b492:	46c0      	nop			; (mov r8, r8)
   1b494:	46bd      	mov	sp, r7
   1b496:	b002      	add	sp, #8
   1b498:	bd80      	pop	{r7, pc}
   1b49a:	46c0      	nop			; (mov r8, r8)
   1b49c:	0001f519 	.word	0x0001f519

0001b4a0 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1b4a0:	b580      	push	{r7, lr}
   1b4a2:	b084      	sub	sp, #16
   1b4a4:	af00      	add	r7, sp, #0
   1b4a6:	6078      	str	r0, [r7, #4]
   1b4a8:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1b4aa:	2014      	movs	r0, #20
   1b4ac:	4b09      	ldr	r3, [pc, #36]	; (1b4d4 <circular_buf_init+0x34>)
   1b4ae:	4798      	blx	r3
   1b4b0:	0003      	movs	r3, r0
   1b4b2:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1b4b4:	68fb      	ldr	r3, [r7, #12]
   1b4b6:	687a      	ldr	r2, [r7, #4]
   1b4b8:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1b4ba:	68fb      	ldr	r3, [r7, #12]
   1b4bc:	683a      	ldr	r2, [r7, #0]
   1b4be:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1b4c0:	68fb      	ldr	r3, [r7, #12]
   1b4c2:	0018      	movs	r0, r3
   1b4c4:	4b04      	ldr	r3, [pc, #16]	; (1b4d8 <circular_buf_init+0x38>)
   1b4c6:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1b4c8:	68fb      	ldr	r3, [r7, #12]
 }
   1b4ca:	0018      	movs	r0, r3
   1b4cc:	46bd      	mov	sp, r7
   1b4ce:	b004      	add	sp, #16
   1b4d0:	bd80      	pop	{r7, pc}
   1b4d2:	46c0      	nop			; (mov r8, r8)
   1b4d4:	00021e5d 	.word	0x00021e5d
   1b4d8:	0001b4dd 	.word	0x0001b4dd

0001b4dc <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1b4dc:	b580      	push	{r7, lr}
   1b4de:	b082      	sub	sp, #8
   1b4e0:	af00      	add	r7, sp, #0
   1b4e2:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1b4e4:	687b      	ldr	r3, [r7, #4]
   1b4e6:	2200      	movs	r2, #0
   1b4e8:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1b4ea:	687b      	ldr	r3, [r7, #4]
   1b4ec:	2200      	movs	r2, #0
   1b4ee:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1b4f0:	687b      	ldr	r3, [r7, #4]
   1b4f2:	2200      	movs	r2, #0
   1b4f4:	741a      	strb	r2, [r3, #16]
 }
   1b4f6:	46c0      	nop			; (mov r8, r8)
   1b4f8:	46bd      	mov	sp, r7
   1b4fa:	b002      	add	sp, #8
   1b4fc:	bd80      	pop	{r7, pc}
	...

0001b500 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1b500:	b580      	push	{r7, lr}
   1b502:	b082      	sub	sp, #8
   1b504:	af00      	add	r7, sp, #0
   1b506:	6078      	str	r0, [r7, #4]
   1b508:	000a      	movs	r2, r1
   1b50a:	1cfb      	adds	r3, r7, #3
   1b50c:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1b50e:	687b      	ldr	r3, [r7, #4]
   1b510:	681a      	ldr	r2, [r3, #0]
   1b512:	687b      	ldr	r3, [r7, #4]
   1b514:	685b      	ldr	r3, [r3, #4]
   1b516:	18d3      	adds	r3, r2, r3
   1b518:	1cfa      	adds	r2, r7, #3
   1b51a:	7812      	ldrb	r2, [r2, #0]
   1b51c:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1b51e:	687b      	ldr	r3, [r7, #4]
   1b520:	0018      	movs	r0, r3
   1b522:	4b03      	ldr	r3, [pc, #12]	; (1b530 <circular_buf_put+0x30>)
   1b524:	4798      	blx	r3
 }
   1b526:	46c0      	nop			; (mov r8, r8)
   1b528:	46bd      	mov	sp, r7
   1b52a:	b002      	add	sp, #8
   1b52c:	bd80      	pop	{r7, pc}
   1b52e:	46c0      	nop			; (mov r8, r8)
   1b530:	0001b40d 	.word	0x0001b40d

0001b534 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1b534:	b580      	push	{r7, lr}
   1b536:	b084      	sub	sp, #16
   1b538:	af00      	add	r7, sp, #0
   1b53a:	6078      	str	r0, [r7, #4]
   1b53c:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1b53e:	2301      	movs	r3, #1
   1b540:	425b      	negs	r3, r3
   1b542:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1b544:	687b      	ldr	r3, [r7, #4]
   1b546:	0018      	movs	r0, r3
   1b548:	4b0d      	ldr	r3, [pc, #52]	; (1b580 <circular_buf_get+0x4c>)
   1b54a:	4798      	blx	r3
   1b54c:	0003      	movs	r3, r0
   1b54e:	001a      	movs	r2, r3
   1b550:	2301      	movs	r3, #1
   1b552:	4053      	eors	r3, r2
   1b554:	b2db      	uxtb	r3, r3
   1b556:	2b00      	cmp	r3, #0
   1b558:	d00d      	beq.n	1b576 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1b55a:	687b      	ldr	r3, [r7, #4]
   1b55c:	681a      	ldr	r2, [r3, #0]
   1b55e:	687b      	ldr	r3, [r7, #4]
   1b560:	689b      	ldr	r3, [r3, #8]
   1b562:	18d3      	adds	r3, r2, r3
   1b564:	781a      	ldrb	r2, [r3, #0]
   1b566:	683b      	ldr	r3, [r7, #0]
   1b568:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1b56a:	687b      	ldr	r3, [r7, #4]
   1b56c:	0018      	movs	r0, r3
   1b56e:	4b05      	ldr	r3, [pc, #20]	; (1b584 <circular_buf_get+0x50>)
   1b570:	4798      	blx	r3

		 r = 0;
   1b572:	2300      	movs	r3, #0
   1b574:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1b576:	68fb      	ldr	r3, [r7, #12]
 }
   1b578:	0018      	movs	r0, r3
   1b57a:	46bd      	mov	sp, r7
   1b57c:	b004      	add	sp, #16
   1b57e:	bd80      	pop	{r7, pc}
   1b580:	0001b589 	.word	0x0001b589
   1b584:	0001b46d 	.word	0x0001b46d

0001b588 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1b588:	b580      	push	{r7, lr}
   1b58a:	b082      	sub	sp, #8
   1b58c:	af00      	add	r7, sp, #0
   1b58e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1b590:	687b      	ldr	r3, [r7, #4]
   1b592:	7c1b      	ldrb	r3, [r3, #16]
   1b594:	2201      	movs	r2, #1
   1b596:	4053      	eors	r3, r2
   1b598:	b2db      	uxtb	r3, r3
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	d007      	beq.n	1b5ae <circular_buf_empty+0x26>
   1b59e:	687b      	ldr	r3, [r7, #4]
   1b5a0:	685a      	ldr	r2, [r3, #4]
   1b5a2:	687b      	ldr	r3, [r7, #4]
   1b5a4:	689b      	ldr	r3, [r3, #8]
   1b5a6:	429a      	cmp	r2, r3
   1b5a8:	d101      	bne.n	1b5ae <circular_buf_empty+0x26>
   1b5aa:	2301      	movs	r3, #1
   1b5ac:	e000      	b.n	1b5b0 <circular_buf_empty+0x28>
   1b5ae:	2300      	movs	r3, #0
   1b5b0:	1c1a      	adds	r2, r3, #0
   1b5b2:	2301      	movs	r3, #1
   1b5b4:	4013      	ands	r3, r2
   1b5b6:	b2db      	uxtb	r3, r3
 }
   1b5b8:	0018      	movs	r0, r3
   1b5ba:	46bd      	mov	sp, r7
   1b5bc:	b002      	add	sp, #8
   1b5be:	bd80      	pop	{r7, pc}

0001b5c0 <system_interrupt_enable>:
{
   1b5c0:	b580      	push	{r7, lr}
   1b5c2:	b082      	sub	sp, #8
   1b5c4:	af00      	add	r7, sp, #0
   1b5c6:	0002      	movs	r2, r0
   1b5c8:	1dfb      	adds	r3, r7, #7
   1b5ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1b5cc:	4b06      	ldr	r3, [pc, #24]	; (1b5e8 <system_interrupt_enable+0x28>)
   1b5ce:	1dfa      	adds	r2, r7, #7
   1b5d0:	7812      	ldrb	r2, [r2, #0]
   1b5d2:	0011      	movs	r1, r2
   1b5d4:	221f      	movs	r2, #31
   1b5d6:	400a      	ands	r2, r1
   1b5d8:	2101      	movs	r1, #1
   1b5da:	4091      	lsls	r1, r2
   1b5dc:	000a      	movs	r2, r1
   1b5de:	601a      	str	r2, [r3, #0]
}
   1b5e0:	46c0      	nop			; (mov r8, r8)
   1b5e2:	46bd      	mov	sp, r7
   1b5e4:	b002      	add	sp, #8
   1b5e6:	bd80      	pop	{r7, pc}
   1b5e8:	e000e100 	.word	0xe000e100

0001b5ec <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1b5ec:	b580      	push	{r7, lr}
   1b5ee:	b084      	sub	sp, #16
   1b5f0:	af00      	add	r7, sp, #0
   1b5f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1b5f4:	687b      	ldr	r3, [r7, #4]
   1b5f6:	681b      	ldr	r3, [r3, #0]
   1b5f8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1b5fa:	68fb      	ldr	r3, [r7, #12]
   1b5fc:	69db      	ldr	r3, [r3, #28]
   1b5fe:	1e5a      	subs	r2, r3, #1
   1b600:	4193      	sbcs	r3, r2
   1b602:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1b604:	0018      	movs	r0, r3
   1b606:	46bd      	mov	sp, r7
   1b608:	b004      	add	sp, #16
   1b60a:	bd80      	pop	{r7, pc}

0001b60c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1b60c:	b580      	push	{r7, lr}
   1b60e:	b082      	sub	sp, #8
   1b610:	af00      	add	r7, sp, #0
   1b612:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1b614:	46c0      	nop			; (mov r8, r8)
   1b616:	687b      	ldr	r3, [r7, #4]
   1b618:	0018      	movs	r0, r3
   1b61a:	4b04      	ldr	r3, [pc, #16]	; (1b62c <_usart_wait_for_sync+0x20>)
   1b61c:	4798      	blx	r3
   1b61e:	1e03      	subs	r3, r0, #0
   1b620:	d1f9      	bne.n	1b616 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1b622:	46c0      	nop			; (mov r8, r8)
   1b624:	46bd      	mov	sp, r7
   1b626:	b002      	add	sp, #8
   1b628:	bd80      	pop	{r7, pc}
   1b62a:	46c0      	nop			; (mov r8, r8)
   1b62c:	0001b5ed 	.word	0x0001b5ed

0001b630 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1b630:	b580      	push	{r7, lr}
   1b632:	b082      	sub	sp, #8
   1b634:	af00      	add	r7, sp, #0
   1b636:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1b638:	687b      	ldr	r3, [r7, #4]
   1b63a:	2280      	movs	r2, #128	; 0x80
   1b63c:	05d2      	lsls	r2, r2, #23
   1b63e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1b640:	687b      	ldr	r3, [r7, #4]
   1b642:	2200      	movs	r2, #0
   1b644:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1b646:	687b      	ldr	r3, [r7, #4]
   1b648:	22ff      	movs	r2, #255	; 0xff
   1b64a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1b64c:	687b      	ldr	r3, [r7, #4]
   1b64e:	2200      	movs	r2, #0
   1b650:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1b652:	687b      	ldr	r3, [r7, #4]
   1b654:	2200      	movs	r2, #0
   1b656:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1b658:	687b      	ldr	r3, [r7, #4]
   1b65a:	2296      	movs	r2, #150	; 0x96
   1b65c:	0192      	lsls	r2, r2, #6
   1b65e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1b660:	687b      	ldr	r3, [r7, #4]
   1b662:	2224      	movs	r2, #36	; 0x24
   1b664:	2101      	movs	r1, #1
   1b666:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1b668:	687b      	ldr	r3, [r7, #4]
   1b66a:	2225      	movs	r2, #37	; 0x25
   1b66c:	2101      	movs	r1, #1
   1b66e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1b670:	687b      	ldr	r3, [r7, #4]
   1b672:	2226      	movs	r2, #38	; 0x26
   1b674:	2100      	movs	r1, #0
   1b676:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1b678:	687b      	ldr	r3, [r7, #4]
   1b67a:	2227      	movs	r2, #39	; 0x27
   1b67c:	2100      	movs	r1, #0
   1b67e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1b680:	687b      	ldr	r3, [r7, #4]
   1b682:	2200      	movs	r2, #0
   1b684:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1b686:	687b      	ldr	r3, [r7, #4]
   1b688:	2288      	movs	r2, #136	; 0x88
   1b68a:	0352      	lsls	r2, r2, #13
   1b68c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1b68e:	687b      	ldr	r3, [r7, #4]
   1b690:	222c      	movs	r2, #44	; 0x2c
   1b692:	2100      	movs	r1, #0
   1b694:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1b696:	687b      	ldr	r3, [r7, #4]
   1b698:	222d      	movs	r2, #45	; 0x2d
   1b69a:	2100      	movs	r1, #0
   1b69c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1b69e:	687b      	ldr	r3, [r7, #4]
   1b6a0:	2200      	movs	r2, #0
   1b6a2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1b6a4:	687b      	ldr	r3, [r7, #4]
   1b6a6:	2200      	movs	r2, #0
   1b6a8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1b6aa:	687b      	ldr	r3, [r7, #4]
   1b6ac:	2200      	movs	r2, #0
   1b6ae:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1b6b0:	687b      	ldr	r3, [r7, #4]
   1b6b2:	2200      	movs	r2, #0
   1b6b4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1b6b6:	687b      	ldr	r3, [r7, #4]
   1b6b8:	2200      	movs	r2, #0
   1b6ba:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1b6bc:	687b      	ldr	r3, [r7, #4]
   1b6be:	2200      	movs	r2, #0
   1b6c0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1b6c2:	687b      	ldr	r3, [r7, #4]
   1b6c4:	2200      	movs	r2, #0
   1b6c6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1b6c8:	687b      	ldr	r3, [r7, #4]
   1b6ca:	2200      	movs	r2, #0
   1b6cc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1b6ce:	687b      	ldr	r3, [r7, #4]
   1b6d0:	2200      	movs	r2, #0
   1b6d2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1b6d4:	687b      	ldr	r3, [r7, #4]
   1b6d6:	2200      	movs	r2, #0
   1b6d8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1b6da:	687b      	ldr	r3, [r7, #4]
   1b6dc:	2213      	movs	r2, #19
   1b6de:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1b6e0:	687b      	ldr	r3, [r7, #4]
   1b6e2:	2200      	movs	r2, #0
   1b6e4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1b6e6:	46c0      	nop			; (mov r8, r8)
   1b6e8:	46bd      	mov	sp, r7
   1b6ea:	b002      	add	sp, #8
   1b6ec:	bd80      	pop	{r7, pc}
	...

0001b6f0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1b6f0:	b580      	push	{r7, lr}
   1b6f2:	b084      	sub	sp, #16
   1b6f4:	af00      	add	r7, sp, #0
   1b6f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1b6f8:	687b      	ldr	r3, [r7, #4]
   1b6fa:	681b      	ldr	r3, [r3, #0]
   1b6fc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1b6fe:	687b      	ldr	r3, [r7, #4]
   1b700:	681b      	ldr	r3, [r3, #0]
   1b702:	0018      	movs	r0, r3
   1b704:	4b09      	ldr	r3, [pc, #36]	; (1b72c <usart_enable+0x3c>)
   1b706:	4798      	blx	r3
   1b708:	0003      	movs	r3, r0
   1b70a:	0018      	movs	r0, r3
   1b70c:	4b08      	ldr	r3, [pc, #32]	; (1b730 <usart_enable+0x40>)
   1b70e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1b710:	687b      	ldr	r3, [r7, #4]
   1b712:	0018      	movs	r0, r3
   1b714:	4b07      	ldr	r3, [pc, #28]	; (1b734 <usart_enable+0x44>)
   1b716:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1b718:	68fb      	ldr	r3, [r7, #12]
   1b71a:	681b      	ldr	r3, [r3, #0]
   1b71c:	2202      	movs	r2, #2
   1b71e:	431a      	orrs	r2, r3
   1b720:	68fb      	ldr	r3, [r7, #12]
   1b722:	601a      	str	r2, [r3, #0]
}
   1b724:	46c0      	nop			; (mov r8, r8)
   1b726:	46bd      	mov	sp, r7
   1b728:	b004      	add	sp, #16
   1b72a:	bd80      	pop	{r7, pc}
   1b72c:	0001c7b5 	.word	0x0001c7b5
   1b730:	0001b5c1 	.word	0x0001b5c1
   1b734:	0001b60d 	.word	0x0001b60d

0001b738 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1b738:	b580      	push	{r7, lr}
   1b73a:	b082      	sub	sp, #8
   1b73c:	af00      	add	r7, sp, #0
   1b73e:	6078      	str	r0, [r7, #4]
   1b740:	000a      	movs	r2, r1
   1b742:	1cfb      	adds	r3, r7, #3
   1b744:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1b746:	687b      	ldr	r3, [r7, #4]
   1b748:	2231      	movs	r2, #49	; 0x31
   1b74a:	5c9b      	ldrb	r3, [r3, r2]
   1b74c:	b25a      	sxtb	r2, r3
   1b74e:	1cfb      	adds	r3, r7, #3
   1b750:	781b      	ldrb	r3, [r3, #0]
   1b752:	2101      	movs	r1, #1
   1b754:	4099      	lsls	r1, r3
   1b756:	000b      	movs	r3, r1
   1b758:	b25b      	sxtb	r3, r3
   1b75a:	4313      	orrs	r3, r2
   1b75c:	b25b      	sxtb	r3, r3
   1b75e:	b2d9      	uxtb	r1, r3
   1b760:	687b      	ldr	r3, [r7, #4]
   1b762:	2231      	movs	r2, #49	; 0x31
   1b764:	5499      	strb	r1, [r3, r2]

}
   1b766:	46c0      	nop			; (mov r8, r8)
   1b768:	46bd      	mov	sp, r7
   1b76a:	b002      	add	sp, #8
   1b76c:	bd80      	pop	{r7, pc}
	...

0001b770 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1b770:	b580      	push	{r7, lr}
   1b772:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1b774:	2380      	movs	r3, #128	; 0x80
   1b776:	009a      	lsls	r2, r3, #2
   1b778:	4b0f      	ldr	r3, [pc, #60]	; (1b7b8 <InitializeSerialConsole+0x48>)
   1b77a:	0011      	movs	r1, r2
   1b77c:	0018      	movs	r0, r3
   1b77e:	4b0f      	ldr	r3, [pc, #60]	; (1b7bc <InitializeSerialConsole+0x4c>)
   1b780:	4798      	blx	r3
   1b782:	0002      	movs	r2, r0
   1b784:	4b0e      	ldr	r3, [pc, #56]	; (1b7c0 <InitializeSerialConsole+0x50>)
   1b786:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1b788:	2380      	movs	r3, #128	; 0x80
   1b78a:	009a      	lsls	r2, r3, #2
   1b78c:	4b0d      	ldr	r3, [pc, #52]	; (1b7c4 <InitializeSerialConsole+0x54>)
   1b78e:	0011      	movs	r1, r2
   1b790:	0018      	movs	r0, r3
   1b792:	4b0a      	ldr	r3, [pc, #40]	; (1b7bc <InitializeSerialConsole+0x4c>)
   1b794:	4798      	blx	r3
   1b796:	0002      	movs	r2, r0
   1b798:	4b0b      	ldr	r3, [pc, #44]	; (1b7c8 <InitializeSerialConsole+0x58>)
   1b79a:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1b79c:	4b0b      	ldr	r3, [pc, #44]	; (1b7cc <InitializeSerialConsole+0x5c>)
   1b79e:	4798      	blx	r3
    configure_usart_callbacks();
   1b7a0:	4b0b      	ldr	r3, [pc, #44]	; (1b7d0 <InitializeSerialConsole+0x60>)
   1b7a2:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1b7a4:	490b      	ldr	r1, [pc, #44]	; (1b7d4 <InitializeSerialConsole+0x64>)
   1b7a6:	4b0c      	ldr	r3, [pc, #48]	; (1b7d8 <InitializeSerialConsole+0x68>)
   1b7a8:	2201      	movs	r2, #1
   1b7aa:	0018      	movs	r0, r3
   1b7ac:	4b0b      	ldr	r3, [pc, #44]	; (1b7dc <InitializeSerialConsole+0x6c>)
   1b7ae:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1b7b0:	46c0      	nop			; (mov r8, r8)
   1b7b2:	46bd      	mov	sp, r7
   1b7b4:	bd80      	pop	{r7, pc}
   1b7b6:	46c0      	nop			; (mov r8, r8)
   1b7b8:	20004af0 	.word	0x20004af0
   1b7bc:	0001b4a1 	.word	0x0001b4a1
   1b7c0:	200048e8 	.word	0x200048e8
   1b7c4:	200048f0 	.word	0x200048f0
   1b7c8:	20004cf4 	.word	0x20004cf4
   1b7cc:	0001b925 	.word	0x0001b925
   1b7d0:	0001b99d 	.word	0x0001b99d
   1b7d4:	200048ec 	.word	0x200048ec
   1b7d8:	200048b4 	.word	0x200048b4
   1b7dc:	0001d0a9 	.word	0x0001d0a9

0001b7e0 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1b7e0:	b580      	push	{r7, lr}
   1b7e2:	b084      	sub	sp, #16
   1b7e4:	af00      	add	r7, sp, #0
   1b7e6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1b7e8:	4b1a      	ldr	r3, [pc, #104]	; (1b854 <SerialConsoleWriteString+0x74>)
   1b7ea:	4798      	blx	r3
    if (string != NULL) {
   1b7ec:	687b      	ldr	r3, [r7, #4]
   1b7ee:	2b00      	cmp	r3, #0
   1b7f0:	d02a      	beq.n	1b848 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b7f2:	2300      	movs	r3, #0
   1b7f4:	60fb      	str	r3, [r7, #12]
   1b7f6:	e00b      	b.n	1b810 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1b7f8:	4b17      	ldr	r3, [pc, #92]	; (1b858 <SerialConsoleWriteString+0x78>)
   1b7fa:	6818      	ldr	r0, [r3, #0]
   1b7fc:	687a      	ldr	r2, [r7, #4]
   1b7fe:	68fb      	ldr	r3, [r7, #12]
   1b800:	18d3      	adds	r3, r2, r3
   1b802:	781b      	ldrb	r3, [r3, #0]
   1b804:	0019      	movs	r1, r3
   1b806:	4b15      	ldr	r3, [pc, #84]	; (1b85c <SerialConsoleWriteString+0x7c>)
   1b808:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1b80a:	68fb      	ldr	r3, [r7, #12]
   1b80c:	3301      	adds	r3, #1
   1b80e:	60fb      	str	r3, [r7, #12]
   1b810:	687b      	ldr	r3, [r7, #4]
   1b812:	0018      	movs	r0, r3
   1b814:	4b12      	ldr	r3, [pc, #72]	; (1b860 <SerialConsoleWriteString+0x80>)
   1b816:	4798      	blx	r3
   1b818:	0002      	movs	r2, r0
   1b81a:	68fb      	ldr	r3, [r7, #12]
   1b81c:	429a      	cmp	r2, r3
   1b81e:	d8eb      	bhi.n	1b7f8 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1b820:	4b10      	ldr	r3, [pc, #64]	; (1b864 <SerialConsoleWriteString+0x84>)
   1b822:	2101      	movs	r1, #1
   1b824:	0018      	movs	r0, r3
   1b826:	4b10      	ldr	r3, [pc, #64]	; (1b868 <SerialConsoleWriteString+0x88>)
   1b828:	4798      	blx	r3
   1b82a:	1e03      	subs	r3, r0, #0
   1b82c:	d10c      	bne.n	1b848 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1b82e:	4b0a      	ldr	r3, [pc, #40]	; (1b858 <SerialConsoleWriteString+0x78>)
   1b830:	681b      	ldr	r3, [r3, #0]
   1b832:	4a0e      	ldr	r2, [pc, #56]	; (1b86c <SerialConsoleWriteString+0x8c>)
   1b834:	0011      	movs	r1, r2
   1b836:	0018      	movs	r0, r3
   1b838:	4b0d      	ldr	r3, [pc, #52]	; (1b870 <SerialConsoleWriteString+0x90>)
   1b83a:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1b83c:	490b      	ldr	r1, [pc, #44]	; (1b86c <SerialConsoleWriteString+0x8c>)
   1b83e:	4b09      	ldr	r3, [pc, #36]	; (1b864 <SerialConsoleWriteString+0x84>)
   1b840:	2201      	movs	r2, #1
   1b842:	0018      	movs	r0, r3
   1b844:	4b0b      	ldr	r3, [pc, #44]	; (1b874 <SerialConsoleWriteString+0x94>)
   1b846:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1b848:	4b0b      	ldr	r3, [pc, #44]	; (1b878 <SerialConsoleWriteString+0x98>)
   1b84a:	4798      	blx	r3
}
   1b84c:	46c0      	nop			; (mov r8, r8)
   1b84e:	46bd      	mov	sp, r7
   1b850:	b004      	add	sp, #16
   1b852:	bd80      	pop	{r7, pc}
   1b854:	00019e91 	.word	0x00019e91
   1b858:	20004cf4 	.word	0x20004cf4
   1b85c:	0001b501 	.word	0x0001b501
   1b860:	00022111 	.word	0x00022111
   1b864:	200048b4 	.word	0x200048b4
   1b868:	0001d0f1 	.word	0x0001d0f1
   1b86c:	20004cf0 	.word	0x20004cf0
   1b870:	0001b535 	.word	0x0001b535
   1b874:	0001d061 	.word	0x0001d061
   1b878:	00019ea9 	.word	0x00019ea9

0001b87c <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1b87c:	b580      	push	{r7, lr}
   1b87e:	b084      	sub	sp, #16
   1b880:	af00      	add	r7, sp, #0
   1b882:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1b884:	4b08      	ldr	r3, [pc, #32]	; (1b8a8 <SerialConsoleReadCharacter+0x2c>)
   1b886:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1b888:	4b08      	ldr	r3, [pc, #32]	; (1b8ac <SerialConsoleReadCharacter+0x30>)
   1b88a:	681b      	ldr	r3, [r3, #0]
   1b88c:	687a      	ldr	r2, [r7, #4]
   1b88e:	0011      	movs	r1, r2
   1b890:	0018      	movs	r0, r3
   1b892:	4b07      	ldr	r3, [pc, #28]	; (1b8b0 <SerialConsoleReadCharacter+0x34>)
   1b894:	4798      	blx	r3
   1b896:	0003      	movs	r3, r0
   1b898:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1b89a:	4b06      	ldr	r3, [pc, #24]	; (1b8b4 <SerialConsoleReadCharacter+0x38>)
   1b89c:	4798      	blx	r3
    return a;
   1b89e:	68fb      	ldr	r3, [r7, #12]
}
   1b8a0:	0018      	movs	r0, r3
   1b8a2:	46bd      	mov	sp, r7
   1b8a4:	b004      	add	sp, #16
   1b8a6:	bd80      	pop	{r7, pc}
   1b8a8:	00019e91 	.word	0x00019e91
   1b8ac:	200048e8 	.word	0x200048e8
   1b8b0:	0001b535 	.word	0x0001b535
   1b8b4:	00019ea9 	.word	0x00019ea9

0001b8b8 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1b8b8:	b580      	push	{r7, lr}
   1b8ba:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1b8bc:	4b02      	ldr	r3, [pc, #8]	; (1b8c8 <getLogLevel+0x10>)
   1b8be:	781b      	ldrb	r3, [r3, #0]
}
   1b8c0:	0018      	movs	r0, r3
   1b8c2:	46bd      	mov	sp, r7
   1b8c4:	bd80      	pop	{r7, pc}
   1b8c6:	46c0      	nop			; (mov r8, r8)
   1b8c8:	20003a7c 	.word	0x20003a7c

0001b8cc <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1b8cc:	b40e      	push	{r1, r2, r3}
   1b8ce:	b590      	push	{r4, r7, lr}
   1b8d0:	b084      	sub	sp, #16
   1b8d2:	af00      	add	r7, sp, #0
   1b8d4:	0002      	movs	r2, r0
   1b8d6:	1dfb      	adds	r3, r7, #7
   1b8d8:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1b8da:	4b0e      	ldr	r3, [pc, #56]	; (1b914 <LogMessage+0x48>)
   1b8dc:	4798      	blx	r3
   1b8de:	0003      	movs	r3, r0
   1b8e0:	001a      	movs	r2, r3
   1b8e2:	1dfb      	adds	r3, r7, #7
   1b8e4:	781b      	ldrb	r3, [r3, #0]
   1b8e6:	4293      	cmp	r3, r2
   1b8e8:	d30c      	bcc.n	1b904 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1b8ea:	2320      	movs	r3, #32
   1b8ec:	18fb      	adds	r3, r7, r3
   1b8ee:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1b8f0:	68fb      	ldr	r3, [r7, #12]
   1b8f2:	69fa      	ldr	r2, [r7, #28]
   1b8f4:	4808      	ldr	r0, [pc, #32]	; (1b918 <LogMessage+0x4c>)
   1b8f6:	217f      	movs	r1, #127	; 0x7f
   1b8f8:	4c08      	ldr	r4, [pc, #32]	; (1b91c <LogMessage+0x50>)
   1b8fa:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1b8fc:	4b06      	ldr	r3, [pc, #24]	; (1b918 <LogMessage+0x4c>)
   1b8fe:	0018      	movs	r0, r3
   1b900:	4b07      	ldr	r3, [pc, #28]	; (1b920 <LogMessage+0x54>)
   1b902:	4798      	blx	r3
        va_end(ap);
    }
};
   1b904:	46c0      	nop			; (mov r8, r8)
   1b906:	46bd      	mov	sp, r7
   1b908:	b004      	add	sp, #16
   1b90a:	bc90      	pop	{r4, r7}
   1b90c:	bc08      	pop	{r3}
   1b90e:	b003      	add	sp, #12
   1b910:	4718      	bx	r3
   1b912:	46c0      	nop			; (mov r8, r8)
   1b914:	0001b8b9 	.word	0x0001b8b9
   1b918:	20004834 	.word	0x20004834
   1b91c:	000221c1 	.word	0x000221c1
   1b920:	0001b7e1 	.word	0x0001b7e1

0001b924 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1b924:	b580      	push	{r7, lr}
   1b926:	b090      	sub	sp, #64	; 0x40
   1b928:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1b92a:	003b      	movs	r3, r7
   1b92c:	0018      	movs	r0, r3
   1b92e:	4b14      	ldr	r3, [pc, #80]	; (1b980 <configure_usart+0x5c>)
   1b930:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1b932:	003b      	movs	r3, r7
   1b934:	22e1      	movs	r2, #225	; 0xe1
   1b936:	0252      	lsls	r2, r2, #9
   1b938:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1b93a:	003b      	movs	r3, r7
   1b93c:	22c4      	movs	r2, #196	; 0xc4
   1b93e:	0392      	lsls	r2, r2, #14
   1b940:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1b942:	003b      	movs	r3, r7
   1b944:	2201      	movs	r2, #1
   1b946:	4252      	negs	r2, r2
   1b948:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1b94a:	003b      	movs	r3, r7
   1b94c:	2201      	movs	r2, #1
   1b94e:	4252      	negs	r2, r2
   1b950:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1b952:	003b      	movs	r3, r7
   1b954:	4a0b      	ldr	r2, [pc, #44]	; (1b984 <configure_usart+0x60>)
   1b956:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1b958:	003b      	movs	r3, r7
   1b95a:	4a0b      	ldr	r2, [pc, #44]	; (1b988 <configure_usart+0x64>)
   1b95c:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1b95e:	46c0      	nop			; (mov r8, r8)
   1b960:	003a      	movs	r2, r7
   1b962:	490a      	ldr	r1, [pc, #40]	; (1b98c <configure_usart+0x68>)
   1b964:	4b0a      	ldr	r3, [pc, #40]	; (1b990 <configure_usart+0x6c>)
   1b966:	0018      	movs	r0, r3
   1b968:	4b0a      	ldr	r3, [pc, #40]	; (1b994 <configure_usart+0x70>)
   1b96a:	4798      	blx	r3
   1b96c:	1e03      	subs	r3, r0, #0
   1b96e:	d1f7      	bne.n	1b960 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1b970:	4b07      	ldr	r3, [pc, #28]	; (1b990 <configure_usart+0x6c>)
   1b972:	0018      	movs	r0, r3
   1b974:	4b08      	ldr	r3, [pc, #32]	; (1b998 <configure_usart+0x74>)
   1b976:	4798      	blx	r3
}
   1b978:	46c0      	nop			; (mov r8, r8)
   1b97a:	46bd      	mov	sp, r7
   1b97c:	b010      	add	sp, #64	; 0x40
   1b97e:	bd80      	pop	{r7, pc}
   1b980:	0001b631 	.word	0x0001b631
   1b984:	002a0003 	.word	0x002a0003
   1b988:	002b0003 	.word	0x002b0003
   1b98c:	42001800 	.word	0x42001800
   1b990:	200048b4 	.word	0x200048b4
   1b994:	0001cc65 	.word	0x0001cc65
   1b998:	0001b6f1 	.word	0x0001b6f1

0001b99c <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1b99c:	b580      	push	{r7, lr}
   1b99e:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1b9a0:	490c      	ldr	r1, [pc, #48]	; (1b9d4 <configure_usart_callbacks+0x38>)
   1b9a2:	4b0d      	ldr	r3, [pc, #52]	; (1b9d8 <configure_usart_callbacks+0x3c>)
   1b9a4:	2200      	movs	r2, #0
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	4b0c      	ldr	r3, [pc, #48]	; (1b9dc <configure_usart_callbacks+0x40>)
   1b9aa:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1b9ac:	490c      	ldr	r1, [pc, #48]	; (1b9e0 <configure_usart_callbacks+0x44>)
   1b9ae:	4b0a      	ldr	r3, [pc, #40]	; (1b9d8 <configure_usart_callbacks+0x3c>)
   1b9b0:	2201      	movs	r2, #1
   1b9b2:	0018      	movs	r0, r3
   1b9b4:	4b09      	ldr	r3, [pc, #36]	; (1b9dc <configure_usart_callbacks+0x40>)
   1b9b6:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1b9b8:	4b07      	ldr	r3, [pc, #28]	; (1b9d8 <configure_usart_callbacks+0x3c>)
   1b9ba:	2100      	movs	r1, #0
   1b9bc:	0018      	movs	r0, r3
   1b9be:	4b09      	ldr	r3, [pc, #36]	; (1b9e4 <configure_usart_callbacks+0x48>)
   1b9c0:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1b9c2:	4b05      	ldr	r3, [pc, #20]	; (1b9d8 <configure_usart_callbacks+0x3c>)
   1b9c4:	2101      	movs	r1, #1
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b06      	ldr	r3, [pc, #24]	; (1b9e4 <configure_usart_callbacks+0x48>)
   1b9ca:	4798      	blx	r3
}
   1b9cc:	46c0      	nop			; (mov r8, r8)
   1b9ce:	46bd      	mov	sp, r7
   1b9d0:	bd80      	pop	{r7, pc}
   1b9d2:	46c0      	nop			; (mov r8, r8)
   1b9d4:	0001ba31 	.word	0x0001ba31
   1b9d8:	200048b4 	.word	0x200048b4
   1b9dc:	0001d019 	.word	0x0001d019
   1b9e0:	0001b9e9 	.word	0x0001b9e9
   1b9e4:	0001b739 	.word	0x0001b739

0001b9e8 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1b9e8:	b580      	push	{r7, lr}
   1b9ea:	b082      	sub	sp, #8
   1b9ec:	af00      	add	r7, sp, #0
   1b9ee:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1b9f0:	4b09      	ldr	r3, [pc, #36]	; (1ba18 <usart_read_callback+0x30>)
   1b9f2:	681a      	ldr	r2, [r3, #0]
   1b9f4:	4b09      	ldr	r3, [pc, #36]	; (1ba1c <usart_read_callback+0x34>)
   1b9f6:	781b      	ldrb	r3, [r3, #0]
   1b9f8:	0019      	movs	r1, r3
   1b9fa:	0010      	movs	r0, r2
   1b9fc:	4b08      	ldr	r3, [pc, #32]	; (1ba20 <usart_read_callback+0x38>)
   1b9fe:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ba00:	4906      	ldr	r1, [pc, #24]	; (1ba1c <usart_read_callback+0x34>)
   1ba02:	4b08      	ldr	r3, [pc, #32]	; (1ba24 <usart_read_callback+0x3c>)
   1ba04:	2201      	movs	r2, #1
   1ba06:	0018      	movs	r0, r3
   1ba08:	4b07      	ldr	r3, [pc, #28]	; (1ba28 <usart_read_callback+0x40>)
   1ba0a:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ba0c:	4b07      	ldr	r3, [pc, #28]	; (1ba2c <usart_read_callback+0x44>)
   1ba0e:	4798      	blx	r3
}
   1ba10:	46c0      	nop			; (mov r8, r8)
   1ba12:	46bd      	mov	sp, r7
   1ba14:	b002      	add	sp, #8
   1ba16:	bd80      	pop	{r7, pc}
   1ba18:	200048e8 	.word	0x200048e8
   1ba1c:	200048ec 	.word	0x200048ec
   1ba20:	0001b501 	.word	0x0001b501
   1ba24:	200048b4 	.word	0x200048b4
   1ba28:	0001d0a9 	.word	0x0001d0a9
   1ba2c:	00013b65 	.word	0x00013b65

0001ba30 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ba30:	b580      	push	{r7, lr}
   1ba32:	b082      	sub	sp, #8
   1ba34:	af00      	add	r7, sp, #0
   1ba36:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ba38:	4b09      	ldr	r3, [pc, #36]	; (1ba60 <usart_write_callback+0x30>)
   1ba3a:	681b      	ldr	r3, [r3, #0]
   1ba3c:	4a09      	ldr	r2, [pc, #36]	; (1ba64 <usart_write_callback+0x34>)
   1ba3e:	0011      	movs	r1, r2
   1ba40:	0018      	movs	r0, r3
   1ba42:	4b09      	ldr	r3, [pc, #36]	; (1ba68 <usart_write_callback+0x38>)
   1ba44:	4798      	blx	r3
   1ba46:	0003      	movs	r3, r0
   1ba48:	3301      	adds	r3, #1
   1ba4a:	d005      	beq.n	1ba58 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ba4c:	4905      	ldr	r1, [pc, #20]	; (1ba64 <usart_write_callback+0x34>)
   1ba4e:	4b07      	ldr	r3, [pc, #28]	; (1ba6c <usart_write_callback+0x3c>)
   1ba50:	2201      	movs	r2, #1
   1ba52:	0018      	movs	r0, r3
   1ba54:	4b06      	ldr	r3, [pc, #24]	; (1ba70 <usart_write_callback+0x40>)
   1ba56:	4798      	blx	r3
    }
}
   1ba58:	46c0      	nop			; (mov r8, r8)
   1ba5a:	46bd      	mov	sp, r7
   1ba5c:	b002      	add	sp, #8
   1ba5e:	bd80      	pop	{r7, pc}
   1ba60:	20004cf4 	.word	0x20004cf4
   1ba64:	20004cf0 	.word	0x20004cf0
   1ba68:	0001b535 	.word	0x0001b535
   1ba6c:	200048b4 	.word	0x200048b4
   1ba70:	0001d061 	.word	0x0001d061

0001ba74 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1ba74:	b580      	push	{r7, lr}
   1ba76:	b082      	sub	sp, #8
   1ba78:	af00      	add	r7, sp, #0
   1ba7a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1ba7c:	687b      	ldr	r3, [r7, #4]
   1ba7e:	2b00      	cmp	r3, #0
   1ba80:	d00c      	beq.n	1ba9c <delay_cycles+0x28>
		SysTick->LOAD = n;
   1ba82:	4b08      	ldr	r3, [pc, #32]	; (1baa4 <delay_cycles+0x30>)
   1ba84:	687a      	ldr	r2, [r7, #4]
   1ba86:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1ba88:	4b06      	ldr	r3, [pc, #24]	; (1baa4 <delay_cycles+0x30>)
   1ba8a:	2200      	movs	r2, #0
   1ba8c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1ba8e:	46c0      	nop			; (mov r8, r8)
   1ba90:	4b04      	ldr	r3, [pc, #16]	; (1baa4 <delay_cycles+0x30>)
   1ba92:	681a      	ldr	r2, [r3, #0]
   1ba94:	2380      	movs	r3, #128	; 0x80
   1ba96:	025b      	lsls	r3, r3, #9
   1ba98:	4013      	ands	r3, r2
   1ba9a:	d0f9      	beq.n	1ba90 <delay_cycles+0x1c>
		};
	}
}
   1ba9c:	46c0      	nop			; (mov r8, r8)
   1ba9e:	46bd      	mov	sp, r7
   1baa0:	b002      	add	sp, #8
   1baa2:	bd80      	pop	{r7, pc}
   1baa4:	e000e010 	.word	0xe000e010

0001baa8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1baa8:	b580      	push	{r7, lr}
   1baaa:	b082      	sub	sp, #8
   1baac:	af00      	add	r7, sp, #0
   1baae:	6078      	str	r0, [r7, #4]
	while (n--) {
   1bab0:	e004      	b.n	1babc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1bab2:	4b07      	ldr	r3, [pc, #28]	; (1bad0 <delay_cycles_ms+0x28>)
   1bab4:	681b      	ldr	r3, [r3, #0]
   1bab6:	0018      	movs	r0, r3
   1bab8:	4b06      	ldr	r3, [pc, #24]	; (1bad4 <delay_cycles_ms+0x2c>)
   1baba:	4798      	blx	r3
	while (n--) {
   1babc:	687b      	ldr	r3, [r7, #4]
   1babe:	1e5a      	subs	r2, r3, #1
   1bac0:	607a      	str	r2, [r7, #4]
   1bac2:	2b00      	cmp	r3, #0
   1bac4:	d1f5      	bne.n	1bab2 <delay_cycles_ms+0xa>
	}
}
   1bac6:	46c0      	nop			; (mov r8, r8)
   1bac8:	46bd      	mov	sp, r7
   1baca:	b002      	add	sp, #8
   1bacc:	bd80      	pop	{r7, pc}
   1bace:	46c0      	nop			; (mov r8, r8)
   1bad0:	20000040 	.word	0x20000040
   1bad4:	0001ba75 	.word	0x0001ba75

0001bad8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   1bad8:	b580      	push	{r7, lr}
   1bada:	b082      	sub	sp, #8
   1badc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   1bade:	4b10      	ldr	r3, [pc, #64]	; (1bb20 <cpu_irq_enter_critical+0x48>)
   1bae0:	681b      	ldr	r3, [r3, #0]
   1bae2:	2b00      	cmp	r3, #0
   1bae4:	d112      	bne.n	1bb0c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bae6:	f3ef 8310 	mrs	r3, PRIMASK
   1baea:	607b      	str	r3, [r7, #4]
  return(result);
   1baec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d109      	bne.n	1bb06 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   1baf2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1baf4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1baf8:	4b0a      	ldr	r3, [pc, #40]	; (1bb24 <cpu_irq_enter_critical+0x4c>)
   1bafa:	2200      	movs	r2, #0
   1bafc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1bafe:	4b0a      	ldr	r3, [pc, #40]	; (1bb28 <cpu_irq_enter_critical+0x50>)
   1bb00:	2201      	movs	r2, #1
   1bb02:	701a      	strb	r2, [r3, #0]
   1bb04:	e002      	b.n	1bb0c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1bb06:	4b08      	ldr	r3, [pc, #32]	; (1bb28 <cpu_irq_enter_critical+0x50>)
   1bb08:	2200      	movs	r2, #0
   1bb0a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1bb0c:	4b04      	ldr	r3, [pc, #16]	; (1bb20 <cpu_irq_enter_critical+0x48>)
   1bb0e:	681b      	ldr	r3, [r3, #0]
   1bb10:	1c5a      	adds	r2, r3, #1
   1bb12:	4b03      	ldr	r3, [pc, #12]	; (1bb20 <cpu_irq_enter_critical+0x48>)
   1bb14:	601a      	str	r2, [r3, #0]
}
   1bb16:	46c0      	nop			; (mov r8, r8)
   1bb18:	46bd      	mov	sp, r7
   1bb1a:	b002      	add	sp, #8
   1bb1c:	bd80      	pop	{r7, pc}
   1bb1e:	46c0      	nop			; (mov r8, r8)
   1bb20:	20003a80 	.word	0x20003a80
   1bb24:	20000044 	.word	0x20000044
   1bb28:	20003a84 	.word	0x20003a84

0001bb2c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   1bb2c:	b580      	push	{r7, lr}
   1bb2e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1bb30:	4b0b      	ldr	r3, [pc, #44]	; (1bb60 <cpu_irq_leave_critical+0x34>)
   1bb32:	681b      	ldr	r3, [r3, #0]
   1bb34:	1e5a      	subs	r2, r3, #1
   1bb36:	4b0a      	ldr	r3, [pc, #40]	; (1bb60 <cpu_irq_leave_critical+0x34>)
   1bb38:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1bb3a:	4b09      	ldr	r3, [pc, #36]	; (1bb60 <cpu_irq_leave_critical+0x34>)
   1bb3c:	681b      	ldr	r3, [r3, #0]
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d10a      	bne.n	1bb58 <cpu_irq_leave_critical+0x2c>
   1bb42:	4b08      	ldr	r3, [pc, #32]	; (1bb64 <cpu_irq_leave_critical+0x38>)
   1bb44:	781b      	ldrb	r3, [r3, #0]
   1bb46:	b2db      	uxtb	r3, r3
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	d005      	beq.n	1bb58 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   1bb4c:	4b06      	ldr	r3, [pc, #24]	; (1bb68 <cpu_irq_leave_critical+0x3c>)
   1bb4e:	2201      	movs	r2, #1
   1bb50:	701a      	strb	r2, [r3, #0]
   1bb52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1bb56:	b662      	cpsie	i
	}
}
   1bb58:	46c0      	nop			; (mov r8, r8)
   1bb5a:	46bd      	mov	sp, r7
   1bb5c:	bd80      	pop	{r7, pc}
   1bb5e:	46c0      	nop			; (mov r8, r8)
   1bb60:	20003a80 	.word	0x20003a80
   1bb64:	20003a84 	.word	0x20003a84
   1bb68:	20000044 	.word	0x20000044

0001bb6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1bb6c:	b580      	push	{r7, lr}
   1bb6e:	b084      	sub	sp, #16
   1bb70:	af00      	add	r7, sp, #0
   1bb72:	0002      	movs	r2, r0
   1bb74:	1dfb      	adds	r3, r7, #7
   1bb76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1bb78:	230f      	movs	r3, #15
   1bb7a:	18fb      	adds	r3, r7, r3
   1bb7c:	1dfa      	adds	r2, r7, #7
   1bb7e:	7812      	ldrb	r2, [r2, #0]
   1bb80:	09d2      	lsrs	r2, r2, #7
   1bb82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1bb84:	230e      	movs	r3, #14
   1bb86:	18fb      	adds	r3, r7, r3
   1bb88:	1dfa      	adds	r2, r7, #7
   1bb8a:	7812      	ldrb	r2, [r2, #0]
   1bb8c:	0952      	lsrs	r2, r2, #5
   1bb8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1bb90:	4b0d      	ldr	r3, [pc, #52]	; (1bbc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1bb92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1bb94:	230f      	movs	r3, #15
   1bb96:	18fb      	adds	r3, r7, r3
   1bb98:	781b      	ldrb	r3, [r3, #0]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	d10f      	bne.n	1bbbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1bb9e:	230f      	movs	r3, #15
   1bba0:	18fb      	adds	r3, r7, r3
   1bba2:	781b      	ldrb	r3, [r3, #0]
   1bba4:	009b      	lsls	r3, r3, #2
   1bba6:	2210      	movs	r2, #16
   1bba8:	4694      	mov	ip, r2
   1bbaa:	44bc      	add	ip, r7
   1bbac:	4463      	add	r3, ip
   1bbae:	3b08      	subs	r3, #8
   1bbb0:	681a      	ldr	r2, [r3, #0]
   1bbb2:	230e      	movs	r3, #14
   1bbb4:	18fb      	adds	r3, r7, r3
   1bbb6:	781b      	ldrb	r3, [r3, #0]
   1bbb8:	01db      	lsls	r3, r3, #7
   1bbba:	18d3      	adds	r3, r2, r3
   1bbbc:	e000      	b.n	1bbc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1bbbe:	2300      	movs	r3, #0
	}
}
   1bbc0:	0018      	movs	r0, r3
   1bbc2:	46bd      	mov	sp, r7
   1bbc4:	b004      	add	sp, #16
   1bbc6:	bd80      	pop	{r7, pc}
   1bbc8:	41004400 	.word	0x41004400

0001bbcc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1bbcc:	b580      	push	{r7, lr}
   1bbce:	b082      	sub	sp, #8
   1bbd0:	af00      	add	r7, sp, #0
   1bbd2:	0002      	movs	r2, r0
   1bbd4:	1dfb      	adds	r3, r7, #7
   1bbd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1bbd8:	1dfb      	adds	r3, r7, #7
   1bbda:	781b      	ldrb	r3, [r3, #0]
   1bbdc:	0018      	movs	r0, r3
   1bbde:	4b03      	ldr	r3, [pc, #12]	; (1bbec <port_get_group_from_gpio_pin+0x20>)
   1bbe0:	4798      	blx	r3
   1bbe2:	0003      	movs	r3, r0
}
   1bbe4:	0018      	movs	r0, r3
   1bbe6:	46bd      	mov	sp, r7
   1bbe8:	b002      	add	sp, #8
   1bbea:	bd80      	pop	{r7, pc}
   1bbec:	0001bb6d 	.word	0x0001bb6d

0001bbf0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   1bbf0:	b580      	push	{r7, lr}
   1bbf2:	b082      	sub	sp, #8
   1bbf4:	af00      	add	r7, sp, #0
   1bbf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   1bbf8:	687b      	ldr	r3, [r7, #4]
   1bbfa:	2200      	movs	r2, #0
   1bbfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1bbfe:	687b      	ldr	r3, [r7, #4]
   1bc00:	2201      	movs	r2, #1
   1bc02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1bc04:	687b      	ldr	r3, [r7, #4]
   1bc06:	2200      	movs	r2, #0
   1bc08:	709a      	strb	r2, [r3, #2]
}
   1bc0a:	46c0      	nop			; (mov r8, r8)
   1bc0c:	46bd      	mov	sp, r7
   1bc0e:	b002      	add	sp, #8
   1bc10:	bd80      	pop	{r7, pc}
	...

0001bc14 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1bc14:	b580      	push	{r7, lr}
   1bc16:	b084      	sub	sp, #16
   1bc18:	af00      	add	r7, sp, #0
   1bc1a:	0002      	movs	r2, r0
   1bc1c:	1dfb      	adds	r3, r7, #7
   1bc1e:	701a      	strb	r2, [r3, #0]
   1bc20:	1dbb      	adds	r3, r7, #6
   1bc22:	1c0a      	adds	r2, r1, #0
   1bc24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1bc26:	1dfb      	adds	r3, r7, #7
   1bc28:	781b      	ldrb	r3, [r3, #0]
   1bc2a:	0018      	movs	r0, r3
   1bc2c:	4b0d      	ldr	r3, [pc, #52]	; (1bc64 <port_pin_set_output_level+0x50>)
   1bc2e:	4798      	blx	r3
   1bc30:	0003      	movs	r3, r0
   1bc32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1bc34:	1dfb      	adds	r3, r7, #7
   1bc36:	781b      	ldrb	r3, [r3, #0]
   1bc38:	221f      	movs	r2, #31
   1bc3a:	4013      	ands	r3, r2
   1bc3c:	2201      	movs	r2, #1
   1bc3e:	409a      	lsls	r2, r3
   1bc40:	0013      	movs	r3, r2
   1bc42:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1bc44:	1dbb      	adds	r3, r7, #6
   1bc46:	781b      	ldrb	r3, [r3, #0]
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	d003      	beq.n	1bc54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1bc4c:	68fb      	ldr	r3, [r7, #12]
   1bc4e:	68ba      	ldr	r2, [r7, #8]
   1bc50:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1bc52:	e002      	b.n	1bc5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1bc54:	68fb      	ldr	r3, [r7, #12]
   1bc56:	68ba      	ldr	r2, [r7, #8]
   1bc58:	615a      	str	r2, [r3, #20]
}
   1bc5a:	46c0      	nop			; (mov r8, r8)
   1bc5c:	46bd      	mov	sp, r7
   1bc5e:	b004      	add	sp, #16
   1bc60:	bd80      	pop	{r7, pc}
   1bc62:	46c0      	nop			; (mov r8, r8)
   1bc64:	0001bbcd 	.word	0x0001bbcd

0001bc68 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1bc68:	b580      	push	{r7, lr}
   1bc6a:	b082      	sub	sp, #8
   1bc6c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1bc6e:	1d3b      	adds	r3, r7, #4
   1bc70:	0018      	movs	r0, r3
   1bc72:	4b0e      	ldr	r3, [pc, #56]	; (1bcac <system_board_init+0x44>)
   1bc74:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1bc76:	1d3b      	adds	r3, r7, #4
   1bc78:	2201      	movs	r2, #1
   1bc7a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1bc7c:	1d3b      	adds	r3, r7, #4
   1bc7e:	0019      	movs	r1, r3
   1bc80:	2017      	movs	r0, #23
   1bc82:	4b0b      	ldr	r3, [pc, #44]	; (1bcb0 <system_board_init+0x48>)
   1bc84:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   1bc86:	2101      	movs	r1, #1
   1bc88:	2017      	movs	r0, #23
   1bc8a:	4b0a      	ldr	r3, [pc, #40]	; (1bcb4 <system_board_init+0x4c>)
   1bc8c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1bc8e:	1d3b      	adds	r3, r7, #4
   1bc90:	2200      	movs	r2, #0
   1bc92:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   1bc94:	1d3b      	adds	r3, r7, #4
   1bc96:	2201      	movs	r2, #1
   1bc98:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1bc9a:	1d3b      	adds	r3, r7, #4
   1bc9c:	0019      	movs	r1, r3
   1bc9e:	2037      	movs	r0, #55	; 0x37
   1bca0:	4b03      	ldr	r3, [pc, #12]	; (1bcb0 <system_board_init+0x48>)
   1bca2:	4798      	blx	r3
}
   1bca4:	46c0      	nop			; (mov r8, r8)
   1bca6:	46bd      	mov	sp, r7
   1bca8:	b002      	add	sp, #8
   1bcaa:	bd80      	pop	{r7, pc}
   1bcac:	0001bbf1 	.word	0x0001bbf1
   1bcb0:	0001c045 	.word	0x0001c045
   1bcb4:	0001bc15 	.word	0x0001bc15

0001bcb8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   1bcb8:	b580      	push	{r7, lr}
   1bcba:	b084      	sub	sp, #16
   1bcbc:	af00      	add	r7, sp, #0
   1bcbe:	0002      	movs	r2, r0
   1bcc0:	1dfb      	adds	r3, r7, #7
   1bcc2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1bcc4:	230f      	movs	r3, #15
   1bcc6:	18fb      	adds	r3, r7, r3
   1bcc8:	1dfa      	adds	r2, r7, #7
   1bcca:	7812      	ldrb	r2, [r2, #0]
   1bccc:	0952      	lsrs	r2, r2, #5
   1bcce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   1bcd0:	230f      	movs	r3, #15
   1bcd2:	18fb      	adds	r3, r7, r3
   1bcd4:	781b      	ldrb	r3, [r3, #0]
   1bcd6:	2b00      	cmp	r3, #0
   1bcd8:	d10c      	bne.n	1bcf4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1bcda:	4b09      	ldr	r3, [pc, #36]	; (1bd00 <_extint_get_eic_from_channel+0x48>)
   1bcdc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1bcde:	230f      	movs	r3, #15
   1bce0:	18fb      	adds	r3, r7, r3
   1bce2:	781b      	ldrb	r3, [r3, #0]
   1bce4:	009b      	lsls	r3, r3, #2
   1bce6:	2210      	movs	r2, #16
   1bce8:	4694      	mov	ip, r2
   1bcea:	44bc      	add	ip, r7
   1bcec:	4463      	add	r3, ip
   1bcee:	3b08      	subs	r3, #8
   1bcf0:	681b      	ldr	r3, [r3, #0]
   1bcf2:	e000      	b.n	1bcf6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   1bcf4:	2300      	movs	r3, #0
	}
}
   1bcf6:	0018      	movs	r0, r3
   1bcf8:	46bd      	mov	sp, r7
   1bcfa:	b004      	add	sp, #16
   1bcfc:	bd80      	pop	{r7, pc}
   1bcfe:	46c0      	nop			; (mov r8, r8)
   1bd00:	40001800 	.word	0x40001800

0001bd04 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   1bd04:	b580      	push	{r7, lr}
   1bd06:	b084      	sub	sp, #16
   1bd08:	af00      	add	r7, sp, #0
   1bd0a:	0002      	movs	r2, r0
   1bd0c:	1dfb      	adds	r3, r7, #7
   1bd0e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   1bd10:	1dfb      	adds	r3, r7, #7
   1bd12:	781b      	ldrb	r3, [r3, #0]
   1bd14:	0018      	movs	r0, r3
   1bd16:	4b0b      	ldr	r3, [pc, #44]	; (1bd44 <extint_chan_is_detected+0x40>)
   1bd18:	4798      	blx	r3
   1bd1a:	0003      	movs	r3, r0
   1bd1c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1bd1e:	1dfb      	adds	r3, r7, #7
   1bd20:	781b      	ldrb	r3, [r3, #0]
   1bd22:	221f      	movs	r2, #31
   1bd24:	4013      	ands	r3, r2
   1bd26:	2201      	movs	r2, #1
   1bd28:	409a      	lsls	r2, r3
   1bd2a:	0013      	movs	r3, r2
   1bd2c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1bd2e:	68fb      	ldr	r3, [r7, #12]
   1bd30:	691b      	ldr	r3, [r3, #16]
   1bd32:	68ba      	ldr	r2, [r7, #8]
   1bd34:	4013      	ands	r3, r2
   1bd36:	1e5a      	subs	r2, r3, #1
   1bd38:	4193      	sbcs	r3, r2
   1bd3a:	b2db      	uxtb	r3, r3
}
   1bd3c:	0018      	movs	r0, r3
   1bd3e:	46bd      	mov	sp, r7
   1bd40:	b004      	add	sp, #16
   1bd42:	bd80      	pop	{r7, pc}
   1bd44:	0001bcb9 	.word	0x0001bcb9

0001bd48 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1bd48:	b580      	push	{r7, lr}
   1bd4a:	b084      	sub	sp, #16
   1bd4c:	af00      	add	r7, sp, #0
   1bd4e:	0002      	movs	r2, r0
   1bd50:	1dfb      	adds	r3, r7, #7
   1bd52:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   1bd54:	1dfb      	adds	r3, r7, #7
   1bd56:	781b      	ldrb	r3, [r3, #0]
   1bd58:	0018      	movs	r0, r3
   1bd5a:	4b09      	ldr	r3, [pc, #36]	; (1bd80 <extint_chan_clear_detected+0x38>)
   1bd5c:	4798      	blx	r3
   1bd5e:	0003      	movs	r3, r0
   1bd60:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1bd62:	1dfb      	adds	r3, r7, #7
   1bd64:	781b      	ldrb	r3, [r3, #0]
   1bd66:	221f      	movs	r2, #31
   1bd68:	4013      	ands	r3, r2
   1bd6a:	2201      	movs	r2, #1
   1bd6c:	409a      	lsls	r2, r3
   1bd6e:	0013      	movs	r3, r2
   1bd70:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   1bd72:	68fb      	ldr	r3, [r7, #12]
   1bd74:	68ba      	ldr	r2, [r7, #8]
   1bd76:	611a      	str	r2, [r3, #16]
}
   1bd78:	46c0      	nop			; (mov r8, r8)
   1bd7a:	46bd      	mov	sp, r7
   1bd7c:	b004      	add	sp, #16
   1bd7e:	bd80      	pop	{r7, pc}
   1bd80:	0001bcb9 	.word	0x0001bcb9

0001bd84 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1bd84:	b580      	push	{r7, lr}
   1bd86:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1bd88:	4b15      	ldr	r3, [pc, #84]	; (1bde0 <EIC_Handler+0x5c>)
   1bd8a:	2200      	movs	r2, #0
   1bd8c:	701a      	strb	r2, [r3, #0]
   1bd8e:	e020      	b.n	1bdd2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   1bd90:	4b13      	ldr	r3, [pc, #76]	; (1bde0 <EIC_Handler+0x5c>)
   1bd92:	781b      	ldrb	r3, [r3, #0]
   1bd94:	0018      	movs	r0, r3
   1bd96:	4b13      	ldr	r3, [pc, #76]	; (1bde4 <EIC_Handler+0x60>)
   1bd98:	4798      	blx	r3
   1bd9a:	1e03      	subs	r3, r0, #0
   1bd9c:	d013      	beq.n	1bdc6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   1bd9e:	4b10      	ldr	r3, [pc, #64]	; (1bde0 <EIC_Handler+0x5c>)
   1bda0:	781b      	ldrb	r3, [r3, #0]
   1bda2:	0018      	movs	r0, r3
   1bda4:	4b10      	ldr	r3, [pc, #64]	; (1bde8 <EIC_Handler+0x64>)
   1bda6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1bda8:	4b0d      	ldr	r3, [pc, #52]	; (1bde0 <EIC_Handler+0x5c>)
   1bdaa:	781b      	ldrb	r3, [r3, #0]
   1bdac:	001a      	movs	r2, r3
   1bdae:	4b0f      	ldr	r3, [pc, #60]	; (1bdec <EIC_Handler+0x68>)
   1bdb0:	0092      	lsls	r2, r2, #2
   1bdb2:	58d3      	ldr	r3, [r2, r3]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d006      	beq.n	1bdc6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1bdb8:	4b09      	ldr	r3, [pc, #36]	; (1bde0 <EIC_Handler+0x5c>)
   1bdba:	781b      	ldrb	r3, [r3, #0]
   1bdbc:	001a      	movs	r2, r3
   1bdbe:	4b0b      	ldr	r3, [pc, #44]	; (1bdec <EIC_Handler+0x68>)
   1bdc0:	0092      	lsls	r2, r2, #2
   1bdc2:	58d3      	ldr	r3, [r2, r3]
   1bdc4:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1bdc6:	4b06      	ldr	r3, [pc, #24]	; (1bde0 <EIC_Handler+0x5c>)
   1bdc8:	781b      	ldrb	r3, [r3, #0]
   1bdca:	3301      	adds	r3, #1
   1bdcc:	b2da      	uxtb	r2, r3
   1bdce:	4b04      	ldr	r3, [pc, #16]	; (1bde0 <EIC_Handler+0x5c>)
   1bdd0:	701a      	strb	r2, [r3, #0]
   1bdd2:	4b03      	ldr	r3, [pc, #12]	; (1bde0 <EIC_Handler+0x5c>)
   1bdd4:	781b      	ldrb	r3, [r3, #0]
   1bdd6:	2b0f      	cmp	r3, #15
   1bdd8:	d9da      	bls.n	1bd90 <EIC_Handler+0xc>
			}
		}
	}
}
   1bdda:	46c0      	nop			; (mov r8, r8)
   1bddc:	46bd      	mov	sp, r7
   1bdde:	bd80      	pop	{r7, pc}
   1bde0:	20004cf8 	.word	0x20004cf8
   1bde4:	0001bd05 	.word	0x0001bd05
   1bde8:	0001bd49 	.word	0x0001bd49
   1bdec:	20004cfc 	.word	0x20004cfc

0001bdf0 <system_gclk_chan_get_config_defaults>:
{
   1bdf0:	b580      	push	{r7, lr}
   1bdf2:	b082      	sub	sp, #8
   1bdf4:	af00      	add	r7, sp, #0
   1bdf6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1bdf8:	687b      	ldr	r3, [r7, #4]
   1bdfa:	2200      	movs	r2, #0
   1bdfc:	701a      	strb	r2, [r3, #0]
}
   1bdfe:	46c0      	nop			; (mov r8, r8)
   1be00:	46bd      	mov	sp, r7
   1be02:	b002      	add	sp, #8
   1be04:	bd80      	pop	{r7, pc}
	...

0001be08 <system_apb_clock_set_mask>:
{
   1be08:	b580      	push	{r7, lr}
   1be0a:	b082      	sub	sp, #8
   1be0c:	af00      	add	r7, sp, #0
   1be0e:	0002      	movs	r2, r0
   1be10:	6039      	str	r1, [r7, #0]
   1be12:	1dfb      	adds	r3, r7, #7
   1be14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1be16:	1dfb      	adds	r3, r7, #7
   1be18:	781b      	ldrb	r3, [r3, #0]
   1be1a:	2b01      	cmp	r3, #1
   1be1c:	d00a      	beq.n	1be34 <system_apb_clock_set_mask+0x2c>
   1be1e:	2b02      	cmp	r3, #2
   1be20:	d00f      	beq.n	1be42 <system_apb_clock_set_mask+0x3a>
   1be22:	2b00      	cmp	r3, #0
   1be24:	d114      	bne.n	1be50 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1be26:	4b0e      	ldr	r3, [pc, #56]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be28:	4a0d      	ldr	r2, [pc, #52]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be2a:	6991      	ldr	r1, [r2, #24]
   1be2c:	683a      	ldr	r2, [r7, #0]
   1be2e:	430a      	orrs	r2, r1
   1be30:	619a      	str	r2, [r3, #24]
			break;
   1be32:	e00f      	b.n	1be54 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1be34:	4b0a      	ldr	r3, [pc, #40]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be36:	4a0a      	ldr	r2, [pc, #40]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be38:	69d1      	ldr	r1, [r2, #28]
   1be3a:	683a      	ldr	r2, [r7, #0]
   1be3c:	430a      	orrs	r2, r1
   1be3e:	61da      	str	r2, [r3, #28]
			break;
   1be40:	e008      	b.n	1be54 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1be42:	4b07      	ldr	r3, [pc, #28]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be44:	4a06      	ldr	r2, [pc, #24]	; (1be60 <system_apb_clock_set_mask+0x58>)
   1be46:	6a11      	ldr	r1, [r2, #32]
   1be48:	683a      	ldr	r2, [r7, #0]
   1be4a:	430a      	orrs	r2, r1
   1be4c:	621a      	str	r2, [r3, #32]
			break;
   1be4e:	e001      	b.n	1be54 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1be50:	2317      	movs	r3, #23
   1be52:	e000      	b.n	1be56 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1be54:	2300      	movs	r3, #0
}
   1be56:	0018      	movs	r0, r3
   1be58:	46bd      	mov	sp, r7
   1be5a:	b002      	add	sp, #8
   1be5c:	bd80      	pop	{r7, pc}
   1be5e:	46c0      	nop			; (mov r8, r8)
   1be60:	40000400 	.word	0x40000400

0001be64 <system_interrupt_enable>:
{
   1be64:	b580      	push	{r7, lr}
   1be66:	b082      	sub	sp, #8
   1be68:	af00      	add	r7, sp, #0
   1be6a:	0002      	movs	r2, r0
   1be6c:	1dfb      	adds	r3, r7, #7
   1be6e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1be70:	4b06      	ldr	r3, [pc, #24]	; (1be8c <system_interrupt_enable+0x28>)
   1be72:	1dfa      	adds	r2, r7, #7
   1be74:	7812      	ldrb	r2, [r2, #0]
   1be76:	0011      	movs	r1, r2
   1be78:	221f      	movs	r2, #31
   1be7a:	400a      	ands	r2, r1
   1be7c:	2101      	movs	r1, #1
   1be7e:	4091      	lsls	r1, r2
   1be80:	000a      	movs	r2, r1
   1be82:	601a      	str	r2, [r3, #0]
}
   1be84:	46c0      	nop			; (mov r8, r8)
   1be86:	46bd      	mov	sp, r7
   1be88:	b002      	add	sp, #8
   1be8a:	bd80      	pop	{r7, pc}
   1be8c:	e000e100 	.word	0xe000e100

0001be90 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1be90:	b580      	push	{r7, lr}
   1be92:	b082      	sub	sp, #8
   1be94:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1be96:	4b0f      	ldr	r3, [pc, #60]	; (1bed4 <extint_is_syncing+0x44>)
   1be98:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1be9a:	2300      	movs	r3, #0
   1be9c:	607b      	str	r3, [r7, #4]
   1be9e:	e011      	b.n	1bec4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1bea0:	687b      	ldr	r3, [r7, #4]
   1bea2:	009b      	lsls	r3, r3, #2
   1bea4:	2208      	movs	r2, #8
   1bea6:	4694      	mov	ip, r2
   1bea8:	44bc      	add	ip, r7
   1beaa:	4463      	add	r3, ip
   1beac:	3b08      	subs	r3, #8
   1beae:	681b      	ldr	r3, [r3, #0]
   1beb0:	785b      	ldrb	r3, [r3, #1]
   1beb2:	b2db      	uxtb	r3, r3
   1beb4:	b25b      	sxtb	r3, r3
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	da01      	bge.n	1bebe <extint_is_syncing+0x2e>
			return true;
   1beba:	2301      	movs	r3, #1
   1bebc:	e006      	b.n	1becc <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1bebe:	687b      	ldr	r3, [r7, #4]
   1bec0:	3301      	adds	r3, #1
   1bec2:	607b      	str	r3, [r7, #4]
   1bec4:	687b      	ldr	r3, [r7, #4]
   1bec6:	2b00      	cmp	r3, #0
   1bec8:	d0ea      	beq.n	1bea0 <extint_is_syncing+0x10>
		}
	}
	return false;
   1beca:	2300      	movs	r3, #0
}
   1becc:	0018      	movs	r0, r3
   1bece:	46bd      	mov	sp, r7
   1bed0:	b002      	add	sp, #8
   1bed2:	bd80      	pop	{r7, pc}
   1bed4:	40001800 	.word	0x40001800

0001bed8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1bed8:	b580      	push	{r7, lr}
   1beda:	b084      	sub	sp, #16
   1bedc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1bede:	4b2d      	ldr	r3, [pc, #180]	; (1bf94 <_system_extint_init+0xbc>)
   1bee0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1bee2:	2140      	movs	r1, #64	; 0x40
   1bee4:	2000      	movs	r0, #0
   1bee6:	4b2c      	ldr	r3, [pc, #176]	; (1bf98 <_system_extint_init+0xc0>)
   1bee8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1beea:	003b      	movs	r3, r7
   1beec:	0018      	movs	r0, r3
   1beee:	4b2b      	ldr	r3, [pc, #172]	; (1bf9c <_system_extint_init+0xc4>)
   1bef0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1bef2:	003b      	movs	r3, r7
   1bef4:	2200      	movs	r2, #0
   1bef6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1bef8:	003b      	movs	r3, r7
   1befa:	0019      	movs	r1, r3
   1befc:	2005      	movs	r0, #5
   1befe:	4b28      	ldr	r3, [pc, #160]	; (1bfa0 <_system_extint_init+0xc8>)
   1bf00:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1bf02:	2005      	movs	r0, #5
   1bf04:	4b27      	ldr	r3, [pc, #156]	; (1bfa4 <_system_extint_init+0xcc>)
   1bf06:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1bf08:	2300      	movs	r3, #0
   1bf0a:	60fb      	str	r3, [r7, #12]
   1bf0c:	e018      	b.n	1bf40 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1bf0e:	68fb      	ldr	r3, [r7, #12]
   1bf10:	009b      	lsls	r3, r3, #2
   1bf12:	2210      	movs	r2, #16
   1bf14:	4694      	mov	ip, r2
   1bf16:	44bc      	add	ip, r7
   1bf18:	4463      	add	r3, ip
   1bf1a:	3b0c      	subs	r3, #12
   1bf1c:	681a      	ldr	r2, [r3, #0]
   1bf1e:	68fb      	ldr	r3, [r7, #12]
   1bf20:	009b      	lsls	r3, r3, #2
   1bf22:	2110      	movs	r1, #16
   1bf24:	468c      	mov	ip, r1
   1bf26:	44bc      	add	ip, r7
   1bf28:	4463      	add	r3, ip
   1bf2a:	3b0c      	subs	r3, #12
   1bf2c:	681b      	ldr	r3, [r3, #0]
   1bf2e:	781b      	ldrb	r3, [r3, #0]
   1bf30:	b2db      	uxtb	r3, r3
   1bf32:	2101      	movs	r1, #1
   1bf34:	430b      	orrs	r3, r1
   1bf36:	b2db      	uxtb	r3, r3
   1bf38:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1bf3a:	68fb      	ldr	r3, [r7, #12]
   1bf3c:	3301      	adds	r3, #1
   1bf3e:	60fb      	str	r3, [r7, #12]
   1bf40:	68fb      	ldr	r3, [r7, #12]
   1bf42:	2b00      	cmp	r3, #0
   1bf44:	d0e3      	beq.n	1bf0e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1bf46:	46c0      	nop			; (mov r8, r8)
   1bf48:	4b17      	ldr	r3, [pc, #92]	; (1bfa8 <_system_extint_init+0xd0>)
   1bf4a:	4798      	blx	r3
   1bf4c:	1e03      	subs	r3, r0, #0
   1bf4e:	d1fb      	bne.n	1bf48 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1bf50:	230b      	movs	r3, #11
   1bf52:	18fb      	adds	r3, r7, r3
   1bf54:	2200      	movs	r2, #0
   1bf56:	701a      	strb	r2, [r3, #0]
   1bf58:	e00d      	b.n	1bf76 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1bf5a:	230b      	movs	r3, #11
   1bf5c:	18fb      	adds	r3, r7, r3
   1bf5e:	781a      	ldrb	r2, [r3, #0]
   1bf60:	4b12      	ldr	r3, [pc, #72]	; (1bfac <_system_extint_init+0xd4>)
   1bf62:	0092      	lsls	r2, r2, #2
   1bf64:	2100      	movs	r1, #0
   1bf66:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1bf68:	230b      	movs	r3, #11
   1bf6a:	18fb      	adds	r3, r7, r3
   1bf6c:	781a      	ldrb	r2, [r3, #0]
   1bf6e:	230b      	movs	r3, #11
   1bf70:	18fb      	adds	r3, r7, r3
   1bf72:	3201      	adds	r2, #1
   1bf74:	701a      	strb	r2, [r3, #0]
   1bf76:	230b      	movs	r3, #11
   1bf78:	18fb      	adds	r3, r7, r3
   1bf7a:	781b      	ldrb	r3, [r3, #0]
   1bf7c:	2b0f      	cmp	r3, #15
   1bf7e:	d9ec      	bls.n	1bf5a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1bf80:	2004      	movs	r0, #4
   1bf82:	4b0b      	ldr	r3, [pc, #44]	; (1bfb0 <_system_extint_init+0xd8>)
   1bf84:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1bf86:	4b0b      	ldr	r3, [pc, #44]	; (1bfb4 <_system_extint_init+0xdc>)
   1bf88:	4798      	blx	r3
}
   1bf8a:	46c0      	nop			; (mov r8, r8)
   1bf8c:	46bd      	mov	sp, r7
   1bf8e:	b004      	add	sp, #16
   1bf90:	bd80      	pop	{r7, pc}
   1bf92:	46c0      	nop			; (mov r8, r8)
   1bf94:	40001800 	.word	0x40001800
   1bf98:	0001be09 	.word	0x0001be09
   1bf9c:	0001bdf1 	.word	0x0001bdf1
   1bfa0:	0001dfc1 	.word	0x0001dfc1
   1bfa4:	0001e005 	.word	0x0001e005
   1bfa8:	0001be91 	.word	0x0001be91
   1bfac:	20004cfc 	.word	0x20004cfc
   1bfb0:	0001be65 	.word	0x0001be65
   1bfb4:	0001bfb9 	.word	0x0001bfb9

0001bfb8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1bfb8:	b580      	push	{r7, lr}
   1bfba:	b082      	sub	sp, #8
   1bfbc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1bfbe:	4b15      	ldr	r3, [pc, #84]	; (1c014 <_extint_enable+0x5c>)
   1bfc0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1bfc2:	2300      	movs	r3, #0
   1bfc4:	607b      	str	r3, [r7, #4]
   1bfc6:	e018      	b.n	1bffa <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	009b      	lsls	r3, r3, #2
   1bfcc:	2208      	movs	r2, #8
   1bfce:	4694      	mov	ip, r2
   1bfd0:	44bc      	add	ip, r7
   1bfd2:	4463      	add	r3, ip
   1bfd4:	3b08      	subs	r3, #8
   1bfd6:	681a      	ldr	r2, [r3, #0]
   1bfd8:	687b      	ldr	r3, [r7, #4]
   1bfda:	009b      	lsls	r3, r3, #2
   1bfdc:	2108      	movs	r1, #8
   1bfde:	468c      	mov	ip, r1
   1bfe0:	44bc      	add	ip, r7
   1bfe2:	4463      	add	r3, ip
   1bfe4:	3b08      	subs	r3, #8
   1bfe6:	681b      	ldr	r3, [r3, #0]
   1bfe8:	781b      	ldrb	r3, [r3, #0]
   1bfea:	b2db      	uxtb	r3, r3
   1bfec:	2102      	movs	r1, #2
   1bfee:	430b      	orrs	r3, r1
   1bff0:	b2db      	uxtb	r3, r3
   1bff2:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1bff4:	687b      	ldr	r3, [r7, #4]
   1bff6:	3301      	adds	r3, #1
   1bff8:	607b      	str	r3, [r7, #4]
   1bffa:	687b      	ldr	r3, [r7, #4]
   1bffc:	2b00      	cmp	r3, #0
   1bffe:	d0e3      	beq.n	1bfc8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1c000:	46c0      	nop			; (mov r8, r8)
   1c002:	4b05      	ldr	r3, [pc, #20]	; (1c018 <_extint_enable+0x60>)
   1c004:	4798      	blx	r3
   1c006:	1e03      	subs	r3, r0, #0
   1c008:	d1fb      	bne.n	1c002 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1c00a:	46c0      	nop			; (mov r8, r8)
   1c00c:	46bd      	mov	sp, r7
   1c00e:	b002      	add	sp, #8
   1c010:	bd80      	pop	{r7, pc}
   1c012:	46c0      	nop			; (mov r8, r8)
   1c014:	40001800 	.word	0x40001800
   1c018:	0001be91 	.word	0x0001be91

0001c01c <system_pinmux_get_config_defaults>:
{
   1c01c:	b580      	push	{r7, lr}
   1c01e:	b082      	sub	sp, #8
   1c020:	af00      	add	r7, sp, #0
   1c022:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1c024:	687b      	ldr	r3, [r7, #4]
   1c026:	2280      	movs	r2, #128	; 0x80
   1c028:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1c02a:	687b      	ldr	r3, [r7, #4]
   1c02c:	2200      	movs	r2, #0
   1c02e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1c030:	687b      	ldr	r3, [r7, #4]
   1c032:	2201      	movs	r2, #1
   1c034:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1c036:	687b      	ldr	r3, [r7, #4]
   1c038:	2200      	movs	r2, #0
   1c03a:	70da      	strb	r2, [r3, #3]
}
   1c03c:	46c0      	nop			; (mov r8, r8)
   1c03e:	46bd      	mov	sp, r7
   1c040:	b002      	add	sp, #8
   1c042:	bd80      	pop	{r7, pc}

0001c044 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1c044:	b580      	push	{r7, lr}
   1c046:	b084      	sub	sp, #16
   1c048:	af00      	add	r7, sp, #0
   1c04a:	0002      	movs	r2, r0
   1c04c:	6039      	str	r1, [r7, #0]
   1c04e:	1dfb      	adds	r3, r7, #7
   1c050:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1c052:	230c      	movs	r3, #12
   1c054:	18fb      	adds	r3, r7, r3
   1c056:	0018      	movs	r0, r3
   1c058:	4b10      	ldr	r3, [pc, #64]	; (1c09c <port_pin_set_config+0x58>)
   1c05a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   1c05c:	230c      	movs	r3, #12
   1c05e:	18fb      	adds	r3, r7, r3
   1c060:	2280      	movs	r2, #128	; 0x80
   1c062:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1c064:	683b      	ldr	r3, [r7, #0]
   1c066:	781a      	ldrb	r2, [r3, #0]
   1c068:	230c      	movs	r3, #12
   1c06a:	18fb      	adds	r3, r7, r3
   1c06c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1c06e:	683b      	ldr	r3, [r7, #0]
   1c070:	785a      	ldrb	r2, [r3, #1]
   1c072:	230c      	movs	r3, #12
   1c074:	18fb      	adds	r3, r7, r3
   1c076:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1c078:	683b      	ldr	r3, [r7, #0]
   1c07a:	789a      	ldrb	r2, [r3, #2]
   1c07c:	230c      	movs	r3, #12
   1c07e:	18fb      	adds	r3, r7, r3
   1c080:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1c082:	230c      	movs	r3, #12
   1c084:	18fa      	adds	r2, r7, r3
   1c086:	1dfb      	adds	r3, r7, #7
   1c088:	781b      	ldrb	r3, [r3, #0]
   1c08a:	0011      	movs	r1, r2
   1c08c:	0018      	movs	r0, r3
   1c08e:	4b04      	ldr	r3, [pc, #16]	; (1c0a0 <port_pin_set_config+0x5c>)
   1c090:	4798      	blx	r3
}
   1c092:	46c0      	nop			; (mov r8, r8)
   1c094:	46bd      	mov	sp, r7
   1c096:	b004      	add	sp, #16
   1c098:	bd80      	pop	{r7, pc}
   1c09a:	46c0      	nop			; (mov r8, r8)
   1c09c:	0001c01d 	.word	0x0001c01d
   1c0a0:	0001e321 	.word	0x0001e321

0001c0a4 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1c0a4:	b580      	push	{r7, lr}
   1c0a6:	b086      	sub	sp, #24
   1c0a8:	af00      	add	r7, sp, #0
   1c0aa:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1c0ac:	4b28      	ldr	r3, [pc, #160]	; (1c150 <_rtc_interrupt_handler+0xac>)
   1c0ae:	687a      	ldr	r2, [r7, #4]
   1c0b0:	0092      	lsls	r2, r2, #2
   1c0b2:	58d3      	ldr	r3, [r2, r3]
   1c0b4:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1c0b6:	697b      	ldr	r3, [r7, #20]
   1c0b8:	681b      	ldr	r3, [r3, #0]
   1c0ba:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1c0bc:	230e      	movs	r3, #14
   1c0be:	18fb      	adds	r3, r7, r3
   1c0c0:	697a      	ldr	r2, [r7, #20]
   1c0c2:	8a52      	ldrh	r2, [r2, #18]
   1c0c4:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1c0c6:	697b      	ldr	r3, [r7, #20]
   1c0c8:	8a1b      	ldrh	r3, [r3, #16]
   1c0ca:	b29a      	uxth	r2, r3
   1c0cc:	230e      	movs	r3, #14
   1c0ce:	18fb      	adds	r3, r7, r3
   1c0d0:	210e      	movs	r1, #14
   1c0d2:	1879      	adds	r1, r7, r1
   1c0d4:	8809      	ldrh	r1, [r1, #0]
   1c0d6:	400a      	ands	r2, r1
   1c0d8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1c0da:	693b      	ldr	r3, [r7, #16]
   1c0dc:	7a1b      	ldrb	r3, [r3, #8]
   1c0de:	b2da      	uxtb	r2, r3
   1c0e0:	230c      	movs	r3, #12
   1c0e2:	18fb      	adds	r3, r7, r3
   1c0e4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   1c0e6:	693b      	ldr	r3, [r7, #16]
   1c0e8:	79db      	ldrb	r3, [r3, #7]
   1c0ea:	b2db      	uxtb	r3, r3
   1c0ec:	b29a      	uxth	r2, r3
   1c0ee:	230c      	movs	r3, #12
   1c0f0:	18fb      	adds	r3, r7, r3
   1c0f2:	210c      	movs	r1, #12
   1c0f4:	1879      	adds	r1, r7, r1
   1c0f6:	8809      	ldrh	r1, [r1, #0]
   1c0f8:	400a      	ands	r2, r1
   1c0fa:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1c0fc:	230c      	movs	r3, #12
   1c0fe:	18fb      	adds	r3, r7, r3
   1c100:	881b      	ldrh	r3, [r3, #0]
   1c102:	2280      	movs	r2, #128	; 0x80
   1c104:	4013      	ands	r3, r2
   1c106:	d00c      	beq.n	1c122 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1c108:	230e      	movs	r3, #14
   1c10a:	18fb      	adds	r3, r7, r3
   1c10c:	881b      	ldrh	r3, [r3, #0]
   1c10e:	2202      	movs	r2, #2
   1c110:	4013      	ands	r3, r2
   1c112:	d002      	beq.n	1c11a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1c114:	697b      	ldr	r3, [r7, #20]
   1c116:	68db      	ldr	r3, [r3, #12]
   1c118:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1c11a:	693b      	ldr	r3, [r7, #16]
   1c11c:	2280      	movs	r2, #128	; 0x80
   1c11e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   1c120:	e011      	b.n	1c146 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1c122:	230c      	movs	r3, #12
   1c124:	18fb      	adds	r3, r7, r3
   1c126:	881b      	ldrh	r3, [r3, #0]
   1c128:	2201      	movs	r2, #1
   1c12a:	4013      	ands	r3, r2
   1c12c:	d00b      	beq.n	1c146 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1c12e:	230e      	movs	r3, #14
   1c130:	18fb      	adds	r3, r7, r3
   1c132:	881b      	ldrh	r3, [r3, #0]
   1c134:	2201      	movs	r2, #1
   1c136:	4013      	ands	r3, r2
   1c138:	d002      	beq.n	1c140 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1c13a:	697b      	ldr	r3, [r7, #20]
   1c13c:	689b      	ldr	r3, [r3, #8]
   1c13e:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1c140:	693b      	ldr	r3, [r7, #16]
   1c142:	2201      	movs	r2, #1
   1c144:	721a      	strb	r2, [r3, #8]
}
   1c146:	46c0      	nop			; (mov r8, r8)
   1c148:	46bd      	mov	sp, r7
   1c14a:	b006      	add	sp, #24
   1c14c:	bd80      	pop	{r7, pc}
   1c14e:	46c0      	nop			; (mov r8, r8)
   1c150:	20004d3c 	.word	0x20004d3c

0001c154 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1c154:	b580      	push	{r7, lr}
   1c156:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1c158:	2000      	movs	r0, #0
   1c15a:	4b02      	ldr	r3, [pc, #8]	; (1c164 <RTC_Handler+0x10>)
   1c15c:	4798      	blx	r3
}
   1c15e:	46c0      	nop			; (mov r8, r8)
   1c160:	46bd      	mov	sp, r7
   1c162:	bd80      	pop	{r7, pc}
   1c164:	0001c0a5 	.word	0x0001c0a5

0001c168 <system_gclk_chan_get_config_defaults>:
{
   1c168:	b580      	push	{r7, lr}
   1c16a:	b082      	sub	sp, #8
   1c16c:	af00      	add	r7, sp, #0
   1c16e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1c170:	687b      	ldr	r3, [r7, #4]
   1c172:	2200      	movs	r2, #0
   1c174:	701a      	strb	r2, [r3, #0]
}
   1c176:	46c0      	nop			; (mov r8, r8)
   1c178:	46bd      	mov	sp, r7
   1c17a:	b002      	add	sp, #8
   1c17c:	bd80      	pop	{r7, pc}

0001c17e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1c17e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c180:	b08d      	sub	sp, #52	; 0x34
   1c182:	af00      	add	r7, sp, #0
   1c184:	60b8      	str	r0, [r7, #8]
   1c186:	60f9      	str	r1, [r7, #12]
   1c188:	603a      	str	r2, [r7, #0]
   1c18a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1c18c:	2300      	movs	r3, #0
   1c18e:	2400      	movs	r4, #0
   1c190:	623b      	str	r3, [r7, #32]
   1c192:	627c      	str	r4, [r7, #36]	; 0x24
   1c194:	2300      	movs	r3, #0
   1c196:	2400      	movs	r4, #0
   1c198:	61bb      	str	r3, [r7, #24]
   1c19a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1c19c:	233f      	movs	r3, #63	; 0x3f
   1c19e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c1a0:	e053      	b.n	1c24a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c1a4:	3b20      	subs	r3, #32
   1c1a6:	2b00      	cmp	r3, #0
   1c1a8:	db04      	blt.n	1c1b4 <long_division+0x36>
   1c1aa:	2201      	movs	r2, #1
   1c1ac:	409a      	lsls	r2, r3
   1c1ae:	0013      	movs	r3, r2
   1c1b0:	617b      	str	r3, [r7, #20]
   1c1b2:	e00b      	b.n	1c1cc <long_division+0x4e>
   1c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c1b6:	2220      	movs	r2, #32
   1c1b8:	1ad3      	subs	r3, r2, r3
   1c1ba:	2201      	movs	r2, #1
   1c1bc:	40da      	lsrs	r2, r3
   1c1be:	0013      	movs	r3, r2
   1c1c0:	2100      	movs	r1, #0
   1c1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c1c4:	4091      	lsls	r1, r2
   1c1c6:	000a      	movs	r2, r1
   1c1c8:	4313      	orrs	r3, r2
   1c1ca:	617b      	str	r3, [r7, #20]
   1c1cc:	2201      	movs	r2, #1
   1c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c1d0:	409a      	lsls	r2, r3
   1c1d2:	0013      	movs	r3, r2
   1c1d4:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1c1d6:	69bb      	ldr	r3, [r7, #24]
   1c1d8:	69fc      	ldr	r4, [r7, #28]
   1c1da:	18db      	adds	r3, r3, r3
   1c1dc:	4164      	adcs	r4, r4
   1c1de:	61bb      	str	r3, [r7, #24]
   1c1e0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1c1e2:	68bb      	ldr	r3, [r7, #8]
   1c1e4:	693a      	ldr	r2, [r7, #16]
   1c1e6:	401a      	ands	r2, r3
   1c1e8:	0015      	movs	r5, r2
   1c1ea:	68fb      	ldr	r3, [r7, #12]
   1c1ec:	697a      	ldr	r2, [r7, #20]
   1c1ee:	401a      	ands	r2, r3
   1c1f0:	0016      	movs	r6, r2
   1c1f2:	002b      	movs	r3, r5
   1c1f4:	4333      	orrs	r3, r6
   1c1f6:	d007      	beq.n	1c208 <long_division+0x8a>
			r |= 0x01;
   1c1f8:	69bb      	ldr	r3, [r7, #24]
   1c1fa:	2201      	movs	r2, #1
   1c1fc:	4313      	orrs	r3, r2
   1c1fe:	61bb      	str	r3, [r7, #24]
   1c200:	69fb      	ldr	r3, [r7, #28]
   1c202:	2200      	movs	r2, #0
   1c204:	4313      	orrs	r3, r2
   1c206:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1c208:	687a      	ldr	r2, [r7, #4]
   1c20a:	69fb      	ldr	r3, [r7, #28]
   1c20c:	429a      	cmp	r2, r3
   1c20e:	d819      	bhi.n	1c244 <long_division+0xc6>
   1c210:	687a      	ldr	r2, [r7, #4]
   1c212:	69fb      	ldr	r3, [r7, #28]
   1c214:	429a      	cmp	r2, r3
   1c216:	d103      	bne.n	1c220 <long_division+0xa2>
   1c218:	683a      	ldr	r2, [r7, #0]
   1c21a:	69bb      	ldr	r3, [r7, #24]
   1c21c:	429a      	cmp	r2, r3
   1c21e:	d811      	bhi.n	1c244 <long_division+0xc6>
			r = r - d;
   1c220:	69b9      	ldr	r1, [r7, #24]
   1c222:	69fa      	ldr	r2, [r7, #28]
   1c224:	683b      	ldr	r3, [r7, #0]
   1c226:	687c      	ldr	r4, [r7, #4]
   1c228:	1ac9      	subs	r1, r1, r3
   1c22a:	41a2      	sbcs	r2, r4
   1c22c:	000b      	movs	r3, r1
   1c22e:	0014      	movs	r4, r2
   1c230:	61bb      	str	r3, [r7, #24]
   1c232:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1c234:	6a3a      	ldr	r2, [r7, #32]
   1c236:	693b      	ldr	r3, [r7, #16]
   1c238:	4313      	orrs	r3, r2
   1c23a:	623b      	str	r3, [r7, #32]
   1c23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c23e:	697b      	ldr	r3, [r7, #20]
   1c240:	4313      	orrs	r3, r2
   1c242:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c246:	3b01      	subs	r3, #1
   1c248:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	daa8      	bge.n	1c1a2 <long_division+0x24>
		}
	}

	return q;
   1c250:	6a3b      	ldr	r3, [r7, #32]
   1c252:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1c254:	0018      	movs	r0, r3
   1c256:	0021      	movs	r1, r4
   1c258:	46bd      	mov	sp, r7
   1c25a:	b00d      	add	sp, #52	; 0x34
   1c25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c25e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1c25e:	b580      	push	{r7, lr}
   1c260:	b086      	sub	sp, #24
   1c262:	af00      	add	r7, sp, #0
   1c264:	60f8      	str	r0, [r7, #12]
   1c266:	60b9      	str	r1, [r7, #8]
   1c268:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1c26a:	2316      	movs	r3, #22
   1c26c:	18fb      	adds	r3, r7, r3
   1c26e:	2200      	movs	r2, #0
   1c270:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1c272:	68bb      	ldr	r3, [r7, #8]
   1c274:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1c276:	68bb      	ldr	r3, [r7, #8]
   1c278:	085a      	lsrs	r2, r3, #1
   1c27a:	68fb      	ldr	r3, [r7, #12]
   1c27c:	429a      	cmp	r2, r3
   1c27e:	d201      	bcs.n	1c284 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1c280:	2340      	movs	r3, #64	; 0x40
   1c282:	e026      	b.n	1c2d2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1c284:	68bb      	ldr	r3, [r7, #8]
   1c286:	085b      	lsrs	r3, r3, #1
   1c288:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1c28a:	e00a      	b.n	1c2a2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1c28c:	693a      	ldr	r2, [r7, #16]
   1c28e:	68fb      	ldr	r3, [r7, #12]
   1c290:	1ad3      	subs	r3, r2, r3
   1c292:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1c294:	2316      	movs	r3, #22
   1c296:	18fb      	adds	r3, r7, r3
   1c298:	881a      	ldrh	r2, [r3, #0]
   1c29a:	2316      	movs	r3, #22
   1c29c:	18fb      	adds	r3, r7, r3
   1c29e:	3201      	adds	r2, #1
   1c2a0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1c2a2:	693a      	ldr	r2, [r7, #16]
   1c2a4:	68fb      	ldr	r3, [r7, #12]
   1c2a6:	429a      	cmp	r2, r3
   1c2a8:	d2f0      	bcs.n	1c28c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1c2aa:	2316      	movs	r3, #22
   1c2ac:	18fb      	adds	r3, r7, r3
   1c2ae:	2216      	movs	r2, #22
   1c2b0:	18ba      	adds	r2, r7, r2
   1c2b2:	8812      	ldrh	r2, [r2, #0]
   1c2b4:	3a01      	subs	r2, #1
   1c2b6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1c2b8:	2316      	movs	r3, #22
   1c2ba:	18fb      	adds	r3, r7, r3
   1c2bc:	881b      	ldrh	r3, [r3, #0]
   1c2be:	2bff      	cmp	r3, #255	; 0xff
   1c2c0:	d901      	bls.n	1c2c6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1c2c2:	2340      	movs	r3, #64	; 0x40
   1c2c4:	e005      	b.n	1c2d2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1c2c6:	687b      	ldr	r3, [r7, #4]
   1c2c8:	2216      	movs	r2, #22
   1c2ca:	18ba      	adds	r2, r7, r2
   1c2cc:	8812      	ldrh	r2, [r2, #0]
   1c2ce:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1c2d0:	2300      	movs	r3, #0
	}
}
   1c2d2:	0018      	movs	r0, r3
   1c2d4:	46bd      	mov	sp, r7
   1c2d6:	b006      	add	sp, #24
   1c2d8:	bd80      	pop	{r7, pc}
	...

0001c2dc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2de:	b0a1      	sub	sp, #132	; 0x84
   1c2e0:	af00      	add	r7, sp, #0
   1c2e2:	64f8      	str	r0, [r7, #76]	; 0x4c
   1c2e4:	64b9      	str	r1, [r7, #72]	; 0x48
   1c2e6:	647a      	str	r2, [r7, #68]	; 0x44
   1c2e8:	2243      	movs	r2, #67	; 0x43
   1c2ea:	18ba      	adds	r2, r7, r2
   1c2ec:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1c2ee:	2300      	movs	r3, #0
   1c2f0:	2400      	movs	r4, #0
   1c2f2:	673b      	str	r3, [r7, #112]	; 0x70
   1c2f4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	2400      	movs	r4, #0
   1c2fa:	66bb      	str	r3, [r7, #104]	; 0x68
   1c2fc:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1c2fe:	2300      	movs	r3, #0
   1c300:	2400      	movs	r4, #0
   1c302:	67bb      	str	r3, [r7, #120]	; 0x78
   1c304:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1c306:	2300      	movs	r3, #0
   1c308:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1c30a:	2358      	movs	r3, #88	; 0x58
   1c30c:	2240      	movs	r2, #64	; 0x40
   1c30e:	4694      	mov	ip, r2
   1c310:	44bc      	add	ip, r7
   1c312:	4463      	add	r3, ip
   1c314:	781a      	ldrb	r2, [r3, #0]
   1c316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c318:	435a      	muls	r2, r3
   1c31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c31c:	429a      	cmp	r2, r3
   1c31e:	d901      	bls.n	1c324 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1c320:	2340      	movs	r3, #64	; 0x40
   1c322:	e0b3      	b.n	1c48c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1c324:	2343      	movs	r3, #67	; 0x43
   1c326:	18fb      	adds	r3, r7, r3
   1c328:	781b      	ldrb	r3, [r3, #0]
   1c32a:	2b00      	cmp	r3, #0
   1c32c:	d13d      	bne.n	1c3aa <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1c32e:	2358      	movs	r3, #88	; 0x58
   1c330:	2240      	movs	r2, #64	; 0x40
   1c332:	4694      	mov	ip, r2
   1c334:	44bc      	add	ip, r7
   1c336:	4463      	add	r3, ip
   1c338:	781b      	ldrb	r3, [r3, #0]
   1c33a:	b2db      	uxtb	r3, r3
   1c33c:	613b      	str	r3, [r7, #16]
   1c33e:	2300      	movs	r3, #0
   1c340:	617b      	str	r3, [r7, #20]
   1c342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c344:	60bb      	str	r3, [r7, #8]
   1c346:	2300      	movs	r3, #0
   1c348:	60fb      	str	r3, [r7, #12]
   1c34a:	4c52      	ldr	r4, [pc, #328]	; (1c494 <_sercom_get_async_baud_val+0x1b8>)
   1c34c:	68ba      	ldr	r2, [r7, #8]
   1c34e:	68fb      	ldr	r3, [r7, #12]
   1c350:	6938      	ldr	r0, [r7, #16]
   1c352:	6979      	ldr	r1, [r7, #20]
   1c354:	47a0      	blx	r4
   1c356:	0003      	movs	r3, r0
   1c358:	000c      	movs	r4, r1
   1c35a:	001b      	movs	r3, r3
   1c35c:	65fb      	str	r3, [r7, #92]	; 0x5c
   1c35e:	2300      	movs	r3, #0
   1c360:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1c362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c364:	603b      	str	r3, [r7, #0]
   1c366:	2300      	movs	r3, #0
   1c368:	607b      	str	r3, [r7, #4]
   1c36a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1c36c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1c36e:	683a      	ldr	r2, [r7, #0]
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	4c49      	ldr	r4, [pc, #292]	; (1c498 <_sercom_get_async_baud_val+0x1bc>)
   1c374:	47a0      	blx	r4
   1c376:	0003      	movs	r3, r0
   1c378:	000c      	movs	r4, r1
   1c37a:	673b      	str	r3, [r7, #112]	; 0x70
   1c37c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1c37e:	2100      	movs	r1, #0
   1c380:	2201      	movs	r2, #1
   1c382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1c384:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1c386:	1ac9      	subs	r1, r1, r3
   1c388:	41a2      	sbcs	r2, r4
   1c38a:	000b      	movs	r3, r1
   1c38c:	0014      	movs	r4, r2
   1c38e:	66bb      	str	r3, [r7, #104]	; 0x68
   1c390:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1c392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c394:	0c1b      	lsrs	r3, r3, #16
   1c396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1c398:	0416      	lsls	r6, r2, #16
   1c39a:	431e      	orrs	r6, r3
   1c39c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c39e:	041d      	lsls	r5, r3, #16
   1c3a0:	0033      	movs	r3, r6
   1c3a2:	67bb      	str	r3, [r7, #120]	; 0x78
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   1c3a8:	e06a      	b.n	1c480 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1c3aa:	2343      	movs	r3, #67	; 0x43
   1c3ac:	18fb      	adds	r3, r7, r3
   1c3ae:	781b      	ldrb	r3, [r3, #0]
   1c3b0:	2b01      	cmp	r3, #1
   1c3b2:	d165      	bne.n	1c480 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c3b6:	633b      	str	r3, [r7, #48]	; 0x30
   1c3b8:	2300      	movs	r3, #0
   1c3ba:	637b      	str	r3, [r7, #52]	; 0x34
   1c3bc:	2358      	movs	r3, #88	; 0x58
   1c3be:	2240      	movs	r2, #64	; 0x40
   1c3c0:	4694      	mov	ip, r2
   1c3c2:	44bc      	add	ip, r7
   1c3c4:	4463      	add	r3, ip
   1c3c6:	781b      	ldrb	r3, [r3, #0]
   1c3c8:	b2db      	uxtb	r3, r3
   1c3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   1c3cc:	2300      	movs	r3, #0
   1c3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c3d0:	4c30      	ldr	r4, [pc, #192]	; (1c494 <_sercom_get_async_baud_val+0x1b8>)
   1c3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c3d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1c3da:	47a0      	blx	r4
   1c3dc:	0003      	movs	r3, r0
   1c3de:	000c      	movs	r4, r1
   1c3e0:	65bb      	str	r3, [r7, #88]	; 0x58
   1c3e2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1c3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c3e6:	623b      	str	r3, [r7, #32]
   1c3e8:	2300      	movs	r3, #0
   1c3ea:	627b      	str	r3, [r7, #36]	; 0x24
   1c3ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c3ee:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1c3f0:	001a      	movs	r2, r3
   1c3f2:	0023      	movs	r3, r4
   1c3f4:	6a38      	ldr	r0, [r7, #32]
   1c3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1c3f8:	4c27      	ldr	r4, [pc, #156]	; (1c498 <_sercom_get_async_baud_val+0x1bc>)
   1c3fa:	47a0      	blx	r4
   1c3fc:	0003      	movs	r3, r0
   1c3fe:	000c      	movs	r4, r1
   1c400:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1c402:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1c404:	2380      	movs	r3, #128	; 0x80
   1c406:	019b      	lsls	r3, r3, #6
   1c408:	429a      	cmp	r2, r3
   1c40a:	d901      	bls.n	1c410 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1c40c:	2340      	movs	r3, #64	; 0x40
   1c40e:	e03d      	b.n	1c48c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1c410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c412:	61bb      	str	r3, [r7, #24]
   1c414:	2300      	movs	r3, #0
   1c416:	61fb      	str	r3, [r7, #28]
   1c418:	69b9      	ldr	r1, [r7, #24]
   1c41a:	69fa      	ldr	r2, [r7, #28]
   1c41c:	000b      	movs	r3, r1
   1c41e:	0f5b      	lsrs	r3, r3, #29
   1c420:	0010      	movs	r0, r2
   1c422:	00c0      	lsls	r0, r0, #3
   1c424:	63f8      	str	r0, [r7, #60]	; 0x3c
   1c426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1c428:	4318      	orrs	r0, r3
   1c42a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1c42c:	000b      	movs	r3, r1
   1c42e:	00db      	lsls	r3, r3, #3
   1c430:	63bb      	str	r3, [r7, #56]	; 0x38
   1c432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c434:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1c436:	001a      	movs	r2, r3
   1c438:	0023      	movs	r3, r4
   1c43a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c43c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c43e:	4c16      	ldr	r4, [pc, #88]	; (1c498 <_sercom_get_async_baud_val+0x1bc>)
   1c440:	47a0      	blx	r4
   1c442:	0003      	movs	r3, r0
   1c444:	000c      	movs	r4, r1
   1c446:	65bb      	str	r3, [r7, #88]	; 0x58
   1c448:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1c44a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1c44c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1c44e:	b2d9      	uxtb	r1, r3
   1c450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c452:	b2db      	uxtb	r3, r3
   1c454:	00db      	lsls	r3, r3, #3
   1c456:	b2da      	uxtb	r2, r3
   1c458:	2317      	movs	r3, #23
   1c45a:	2040      	movs	r0, #64	; 0x40
   1c45c:	4684      	mov	ip, r0
   1c45e:	44bc      	add	ip, r7
   1c460:	4463      	add	r3, ip
   1c462:	1a8a      	subs	r2, r1, r2
   1c464:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1c466:	2317      	movs	r3, #23
   1c468:	2240      	movs	r2, #64	; 0x40
   1c46a:	4694      	mov	ip, r2
   1c46c:	44bc      	add	ip, r7
   1c46e:	4463      	add	r3, ip
   1c470:	781b      	ldrb	r3, [r3, #0]
   1c472:	035b      	lsls	r3, r3, #13
   1c474:	001a      	movs	r2, r3
   1c476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c478:	4313      	orrs	r3, r2
   1c47a:	67bb      	str	r3, [r7, #120]	; 0x78
   1c47c:	2300      	movs	r3, #0
   1c47e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1c480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1c482:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1c484:	b29a      	uxth	r2, r3
   1c486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c488:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1c48a:	2300      	movs	r3, #0
}
   1c48c:	0018      	movs	r0, r3
   1c48e:	46bd      	mov	sp, r7
   1c490:	b021      	add	sp, #132	; 0x84
   1c492:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c494:	0001f6f9 	.word	0x0001f6f9
   1c498:	0001c17f 	.word	0x0001c17f

0001c49c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1c49c:	b580      	push	{r7, lr}
   1c49e:	b084      	sub	sp, #16
   1c4a0:	af00      	add	r7, sp, #0
   1c4a2:	0002      	movs	r2, r0
   1c4a4:	1dfb      	adds	r3, r7, #7
   1c4a6:	701a      	strb	r2, [r3, #0]
   1c4a8:	1dbb      	adds	r3, r7, #6
   1c4aa:	1c0a      	adds	r2, r1, #0
   1c4ac:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1c4ae:	4b1a      	ldr	r3, [pc, #104]	; (1c518 <sercom_set_gclk_generator+0x7c>)
   1c4b0:	781b      	ldrb	r3, [r3, #0]
   1c4b2:	2201      	movs	r2, #1
   1c4b4:	4053      	eors	r3, r2
   1c4b6:	b2db      	uxtb	r3, r3
   1c4b8:	2b00      	cmp	r3, #0
   1c4ba:	d103      	bne.n	1c4c4 <sercom_set_gclk_generator+0x28>
   1c4bc:	1dbb      	adds	r3, r7, #6
   1c4be:	781b      	ldrb	r3, [r3, #0]
   1c4c0:	2b00      	cmp	r3, #0
   1c4c2:	d01b      	beq.n	1c4fc <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1c4c4:	230c      	movs	r3, #12
   1c4c6:	18fb      	adds	r3, r7, r3
   1c4c8:	0018      	movs	r0, r3
   1c4ca:	4b14      	ldr	r3, [pc, #80]	; (1c51c <sercom_set_gclk_generator+0x80>)
   1c4cc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1c4ce:	230c      	movs	r3, #12
   1c4d0:	18fb      	adds	r3, r7, r3
   1c4d2:	1dfa      	adds	r2, r7, #7
   1c4d4:	7812      	ldrb	r2, [r2, #0]
   1c4d6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1c4d8:	230c      	movs	r3, #12
   1c4da:	18fb      	adds	r3, r7, r3
   1c4dc:	0019      	movs	r1, r3
   1c4de:	2013      	movs	r0, #19
   1c4e0:	4b0f      	ldr	r3, [pc, #60]	; (1c520 <sercom_set_gclk_generator+0x84>)
   1c4e2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1c4e4:	2013      	movs	r0, #19
   1c4e6:	4b0f      	ldr	r3, [pc, #60]	; (1c524 <sercom_set_gclk_generator+0x88>)
   1c4e8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1c4ea:	4b0b      	ldr	r3, [pc, #44]	; (1c518 <sercom_set_gclk_generator+0x7c>)
   1c4ec:	1dfa      	adds	r2, r7, #7
   1c4ee:	7812      	ldrb	r2, [r2, #0]
   1c4f0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1c4f2:	4b09      	ldr	r3, [pc, #36]	; (1c518 <sercom_set_gclk_generator+0x7c>)
   1c4f4:	2201      	movs	r2, #1
   1c4f6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1c4f8:	2300      	movs	r3, #0
   1c4fa:	e008      	b.n	1c50e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1c4fc:	4b06      	ldr	r3, [pc, #24]	; (1c518 <sercom_set_gclk_generator+0x7c>)
   1c4fe:	785b      	ldrb	r3, [r3, #1]
   1c500:	1dfa      	adds	r2, r7, #7
   1c502:	7812      	ldrb	r2, [r2, #0]
   1c504:	429a      	cmp	r2, r3
   1c506:	d101      	bne.n	1c50c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1c508:	2300      	movs	r3, #0
   1c50a:	e000      	b.n	1c50e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1c50c:	231d      	movs	r3, #29
}
   1c50e:	0018      	movs	r0, r3
   1c510:	46bd      	mov	sp, r7
   1c512:	b004      	add	sp, #16
   1c514:	bd80      	pop	{r7, pc}
   1c516:	46c0      	nop			; (mov r8, r8)
   1c518:	20003a88 	.word	0x20003a88
   1c51c:	0001c169 	.word	0x0001c169
   1c520:	0001dfc1 	.word	0x0001dfc1
   1c524:	0001e005 	.word	0x0001e005

0001c528 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1c528:	b580      	push	{r7, lr}
   1c52a:	b082      	sub	sp, #8
   1c52c:	af00      	add	r7, sp, #0
   1c52e:	6078      	str	r0, [r7, #4]
   1c530:	000a      	movs	r2, r1
   1c532:	1cfb      	adds	r3, r7, #3
   1c534:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1c536:	687b      	ldr	r3, [r7, #4]
   1c538:	4a4d      	ldr	r2, [pc, #308]	; (1c670 <_sercom_get_default_pad+0x148>)
   1c53a:	4293      	cmp	r3, r2
   1c53c:	d03f      	beq.n	1c5be <_sercom_get_default_pad+0x96>
   1c53e:	4a4c      	ldr	r2, [pc, #304]	; (1c670 <_sercom_get_default_pad+0x148>)
   1c540:	4293      	cmp	r3, r2
   1c542:	d806      	bhi.n	1c552 <_sercom_get_default_pad+0x2a>
   1c544:	4a4b      	ldr	r2, [pc, #300]	; (1c674 <_sercom_get_default_pad+0x14c>)
   1c546:	4293      	cmp	r3, r2
   1c548:	d00f      	beq.n	1c56a <_sercom_get_default_pad+0x42>
   1c54a:	4a4b      	ldr	r2, [pc, #300]	; (1c678 <_sercom_get_default_pad+0x150>)
   1c54c:	4293      	cmp	r3, r2
   1c54e:	d021      	beq.n	1c594 <_sercom_get_default_pad+0x6c>
   1c550:	e089      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c552:	4a4a      	ldr	r2, [pc, #296]	; (1c67c <_sercom_get_default_pad+0x154>)
   1c554:	4293      	cmp	r3, r2
   1c556:	d100      	bne.n	1c55a <_sercom_get_default_pad+0x32>
   1c558:	e05b      	b.n	1c612 <_sercom_get_default_pad+0xea>
   1c55a:	4a49      	ldr	r2, [pc, #292]	; (1c680 <_sercom_get_default_pad+0x158>)
   1c55c:	4293      	cmp	r3, r2
   1c55e:	d100      	bne.n	1c562 <_sercom_get_default_pad+0x3a>
   1c560:	e06c      	b.n	1c63c <_sercom_get_default_pad+0x114>
   1c562:	4a48      	ldr	r2, [pc, #288]	; (1c684 <_sercom_get_default_pad+0x15c>)
   1c564:	4293      	cmp	r3, r2
   1c566:	d03f      	beq.n	1c5e8 <_sercom_get_default_pad+0xc0>
   1c568:	e07d      	b.n	1c666 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1c56a:	1cfb      	adds	r3, r7, #3
   1c56c:	781b      	ldrb	r3, [r3, #0]
   1c56e:	2b01      	cmp	r3, #1
   1c570:	d00a      	beq.n	1c588 <_sercom_get_default_pad+0x60>
   1c572:	dc02      	bgt.n	1c57a <_sercom_get_default_pad+0x52>
   1c574:	2b00      	cmp	r3, #0
   1c576:	d005      	beq.n	1c584 <_sercom_get_default_pad+0x5c>
   1c578:	e075      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c57a:	2b02      	cmp	r3, #2
   1c57c:	d006      	beq.n	1c58c <_sercom_get_default_pad+0x64>
   1c57e:	2b03      	cmp	r3, #3
   1c580:	d006      	beq.n	1c590 <_sercom_get_default_pad+0x68>
   1c582:	e070      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c584:	4b40      	ldr	r3, [pc, #256]	; (1c688 <_sercom_get_default_pad+0x160>)
   1c586:	e06f      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c588:	4b40      	ldr	r3, [pc, #256]	; (1c68c <_sercom_get_default_pad+0x164>)
   1c58a:	e06d      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c58c:	4b40      	ldr	r3, [pc, #256]	; (1c690 <_sercom_get_default_pad+0x168>)
   1c58e:	e06b      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c590:	4b40      	ldr	r3, [pc, #256]	; (1c694 <_sercom_get_default_pad+0x16c>)
   1c592:	e069      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c594:	1cfb      	adds	r3, r7, #3
   1c596:	781b      	ldrb	r3, [r3, #0]
   1c598:	2b01      	cmp	r3, #1
   1c59a:	d00a      	beq.n	1c5b2 <_sercom_get_default_pad+0x8a>
   1c59c:	dc02      	bgt.n	1c5a4 <_sercom_get_default_pad+0x7c>
   1c59e:	2b00      	cmp	r3, #0
   1c5a0:	d005      	beq.n	1c5ae <_sercom_get_default_pad+0x86>
   1c5a2:	e060      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c5a4:	2b02      	cmp	r3, #2
   1c5a6:	d006      	beq.n	1c5b6 <_sercom_get_default_pad+0x8e>
   1c5a8:	2b03      	cmp	r3, #3
   1c5aa:	d006      	beq.n	1c5ba <_sercom_get_default_pad+0x92>
   1c5ac:	e05b      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c5ae:	2303      	movs	r3, #3
   1c5b0:	e05a      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5b2:	4b39      	ldr	r3, [pc, #228]	; (1c698 <_sercom_get_default_pad+0x170>)
   1c5b4:	e058      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5b6:	4b39      	ldr	r3, [pc, #228]	; (1c69c <_sercom_get_default_pad+0x174>)
   1c5b8:	e056      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5ba:	4b39      	ldr	r3, [pc, #228]	; (1c6a0 <_sercom_get_default_pad+0x178>)
   1c5bc:	e054      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5be:	1cfb      	adds	r3, r7, #3
   1c5c0:	781b      	ldrb	r3, [r3, #0]
   1c5c2:	2b01      	cmp	r3, #1
   1c5c4:	d00a      	beq.n	1c5dc <_sercom_get_default_pad+0xb4>
   1c5c6:	dc02      	bgt.n	1c5ce <_sercom_get_default_pad+0xa6>
   1c5c8:	2b00      	cmp	r3, #0
   1c5ca:	d005      	beq.n	1c5d8 <_sercom_get_default_pad+0xb0>
   1c5cc:	e04b      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c5ce:	2b02      	cmp	r3, #2
   1c5d0:	d006      	beq.n	1c5e0 <_sercom_get_default_pad+0xb8>
   1c5d2:	2b03      	cmp	r3, #3
   1c5d4:	d006      	beq.n	1c5e4 <_sercom_get_default_pad+0xbc>
   1c5d6:	e046      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c5d8:	4b32      	ldr	r3, [pc, #200]	; (1c6a4 <_sercom_get_default_pad+0x17c>)
   1c5da:	e045      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5dc:	4b32      	ldr	r3, [pc, #200]	; (1c6a8 <_sercom_get_default_pad+0x180>)
   1c5de:	e043      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5e0:	4b32      	ldr	r3, [pc, #200]	; (1c6ac <_sercom_get_default_pad+0x184>)
   1c5e2:	e041      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5e4:	4b32      	ldr	r3, [pc, #200]	; (1c6b0 <_sercom_get_default_pad+0x188>)
   1c5e6:	e03f      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c5e8:	1cfb      	adds	r3, r7, #3
   1c5ea:	781b      	ldrb	r3, [r3, #0]
   1c5ec:	2b01      	cmp	r3, #1
   1c5ee:	d00a      	beq.n	1c606 <_sercom_get_default_pad+0xde>
   1c5f0:	dc02      	bgt.n	1c5f8 <_sercom_get_default_pad+0xd0>
   1c5f2:	2b00      	cmp	r3, #0
   1c5f4:	d005      	beq.n	1c602 <_sercom_get_default_pad+0xda>
   1c5f6:	e036      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c5f8:	2b02      	cmp	r3, #2
   1c5fa:	d006      	beq.n	1c60a <_sercom_get_default_pad+0xe2>
   1c5fc:	2b03      	cmp	r3, #3
   1c5fe:	d006      	beq.n	1c60e <_sercom_get_default_pad+0xe6>
   1c600:	e031      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c602:	4b2c      	ldr	r3, [pc, #176]	; (1c6b4 <_sercom_get_default_pad+0x18c>)
   1c604:	e030      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c606:	4b2c      	ldr	r3, [pc, #176]	; (1c6b8 <_sercom_get_default_pad+0x190>)
   1c608:	e02e      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c60a:	4b2c      	ldr	r3, [pc, #176]	; (1c6bc <_sercom_get_default_pad+0x194>)
   1c60c:	e02c      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c60e:	4b2c      	ldr	r3, [pc, #176]	; (1c6c0 <_sercom_get_default_pad+0x198>)
   1c610:	e02a      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c612:	1cfb      	adds	r3, r7, #3
   1c614:	781b      	ldrb	r3, [r3, #0]
   1c616:	2b01      	cmp	r3, #1
   1c618:	d00a      	beq.n	1c630 <_sercom_get_default_pad+0x108>
   1c61a:	dc02      	bgt.n	1c622 <_sercom_get_default_pad+0xfa>
   1c61c:	2b00      	cmp	r3, #0
   1c61e:	d005      	beq.n	1c62c <_sercom_get_default_pad+0x104>
   1c620:	e021      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c622:	2b02      	cmp	r3, #2
   1c624:	d006      	beq.n	1c634 <_sercom_get_default_pad+0x10c>
   1c626:	2b03      	cmp	r3, #3
   1c628:	d006      	beq.n	1c638 <_sercom_get_default_pad+0x110>
   1c62a:	e01c      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c62c:	4b25      	ldr	r3, [pc, #148]	; (1c6c4 <_sercom_get_default_pad+0x19c>)
   1c62e:	e01b      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c630:	4b25      	ldr	r3, [pc, #148]	; (1c6c8 <_sercom_get_default_pad+0x1a0>)
   1c632:	e019      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c634:	4b25      	ldr	r3, [pc, #148]	; (1c6cc <_sercom_get_default_pad+0x1a4>)
   1c636:	e017      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c638:	4b25      	ldr	r3, [pc, #148]	; (1c6d0 <_sercom_get_default_pad+0x1a8>)
   1c63a:	e015      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c63c:	1cfb      	adds	r3, r7, #3
   1c63e:	781b      	ldrb	r3, [r3, #0]
   1c640:	2b01      	cmp	r3, #1
   1c642:	d00a      	beq.n	1c65a <_sercom_get_default_pad+0x132>
   1c644:	dc02      	bgt.n	1c64c <_sercom_get_default_pad+0x124>
   1c646:	2b00      	cmp	r3, #0
   1c648:	d005      	beq.n	1c656 <_sercom_get_default_pad+0x12e>
   1c64a:	e00c      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c64c:	2b02      	cmp	r3, #2
   1c64e:	d006      	beq.n	1c65e <_sercom_get_default_pad+0x136>
   1c650:	2b03      	cmp	r3, #3
   1c652:	d006      	beq.n	1c662 <_sercom_get_default_pad+0x13a>
   1c654:	e007      	b.n	1c666 <_sercom_get_default_pad+0x13e>
   1c656:	4b1f      	ldr	r3, [pc, #124]	; (1c6d4 <_sercom_get_default_pad+0x1ac>)
   1c658:	e006      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c65a:	4b1f      	ldr	r3, [pc, #124]	; (1c6d8 <_sercom_get_default_pad+0x1b0>)
   1c65c:	e004      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c65e:	4b1f      	ldr	r3, [pc, #124]	; (1c6dc <_sercom_get_default_pad+0x1b4>)
   1c660:	e002      	b.n	1c668 <_sercom_get_default_pad+0x140>
   1c662:	4b1f      	ldr	r3, [pc, #124]	; (1c6e0 <_sercom_get_default_pad+0x1b8>)
   1c664:	e000      	b.n	1c668 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1c666:	2300      	movs	r3, #0
}
   1c668:	0018      	movs	r0, r3
   1c66a:	46bd      	mov	sp, r7
   1c66c:	b002      	add	sp, #8
   1c66e:	bd80      	pop	{r7, pc}
   1c670:	42001000 	.word	0x42001000
   1c674:	42000800 	.word	0x42000800
   1c678:	42000c00 	.word	0x42000c00
   1c67c:	42001800 	.word	0x42001800
   1c680:	42001c00 	.word	0x42001c00
   1c684:	42001400 	.word	0x42001400
   1c688:	00040003 	.word	0x00040003
   1c68c:	00050003 	.word	0x00050003
   1c690:	00060003 	.word	0x00060003
   1c694:	00070003 	.word	0x00070003
   1c698:	00010003 	.word	0x00010003
   1c69c:	001e0003 	.word	0x001e0003
   1c6a0:	001f0003 	.word	0x001f0003
   1c6a4:	00080003 	.word	0x00080003
   1c6a8:	00090003 	.word	0x00090003
   1c6ac:	000a0003 	.word	0x000a0003
   1c6b0:	000b0003 	.word	0x000b0003
   1c6b4:	00100003 	.word	0x00100003
   1c6b8:	00110003 	.word	0x00110003
   1c6bc:	00120003 	.word	0x00120003
   1c6c0:	00130003 	.word	0x00130003
   1c6c4:	000c0003 	.word	0x000c0003
   1c6c8:	000d0003 	.word	0x000d0003
   1c6cc:	000e0003 	.word	0x000e0003
   1c6d0:	000f0003 	.word	0x000f0003
   1c6d4:	00160003 	.word	0x00160003
   1c6d8:	00170003 	.word	0x00170003
   1c6dc:	00180003 	.word	0x00180003
   1c6e0:	00190003 	.word	0x00190003

0001c6e4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1c6e4:	b590      	push	{r4, r7, lr}
   1c6e6:	b08b      	sub	sp, #44	; 0x2c
   1c6e8:	af00      	add	r7, sp, #0
   1c6ea:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1c6ec:	230c      	movs	r3, #12
   1c6ee:	18fb      	adds	r3, r7, r3
   1c6f0:	4a0f      	ldr	r2, [pc, #60]	; (1c730 <_sercom_get_sercom_inst_index+0x4c>)
   1c6f2:	ca13      	ldmia	r2!, {r0, r1, r4}
   1c6f4:	c313      	stmia	r3!, {r0, r1, r4}
   1c6f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   1c6f8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1c6fa:	2300      	movs	r3, #0
   1c6fc:	627b      	str	r3, [r7, #36]	; 0x24
   1c6fe:	e00e      	b.n	1c71e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1c700:	230c      	movs	r3, #12
   1c702:	18fb      	adds	r3, r7, r3
   1c704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c706:	0092      	lsls	r2, r2, #2
   1c708:	58d3      	ldr	r3, [r2, r3]
   1c70a:	001a      	movs	r2, r3
   1c70c:	687b      	ldr	r3, [r7, #4]
   1c70e:	429a      	cmp	r2, r3
   1c710:	d102      	bne.n	1c718 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c714:	b2db      	uxtb	r3, r3
   1c716:	e006      	b.n	1c726 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c71a:	3301      	adds	r3, #1
   1c71c:	627b      	str	r3, [r7, #36]	; 0x24
   1c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c720:	2b05      	cmp	r3, #5
   1c722:	d9ed      	bls.n	1c700 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1c724:	2300      	movs	r3, #0
}
   1c726:	0018      	movs	r0, r3
   1c728:	46bd      	mov	sp, r7
   1c72a:	b00b      	add	sp, #44	; 0x2c
   1c72c:	bd90      	pop	{r4, r7, pc}
   1c72e:	46c0      	nop			; (mov r8, r8)
   1c730:	00024350 	.word	0x00024350

0001c734 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   1c734:	b580      	push	{r7, lr}
   1c736:	b082      	sub	sp, #8
   1c738:	af00      	add	r7, sp, #0
   1c73a:	0002      	movs	r2, r0
   1c73c:	1dfb      	adds	r3, r7, #7
   1c73e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   1c740:	46c0      	nop			; (mov r8, r8)
   1c742:	46bd      	mov	sp, r7
   1c744:	b002      	add	sp, #8
   1c746:	bd80      	pop	{r7, pc}

0001c748 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1c748:	b580      	push	{r7, lr}
   1c74a:	b084      	sub	sp, #16
   1c74c:	af00      	add	r7, sp, #0
   1c74e:	0002      	movs	r2, r0
   1c750:	6039      	str	r1, [r7, #0]
   1c752:	1dfb      	adds	r3, r7, #7
   1c754:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1c756:	4b13      	ldr	r3, [pc, #76]	; (1c7a4 <_sercom_set_handler+0x5c>)
   1c758:	781b      	ldrb	r3, [r3, #0]
   1c75a:	2201      	movs	r2, #1
   1c75c:	4053      	eors	r3, r2
   1c75e:	b2db      	uxtb	r3, r3
   1c760:	2b00      	cmp	r3, #0
   1c762:	d015      	beq.n	1c790 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1c764:	2300      	movs	r3, #0
   1c766:	60fb      	str	r3, [r7, #12]
   1c768:	e00c      	b.n	1c784 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1c76a:	4b0f      	ldr	r3, [pc, #60]	; (1c7a8 <_sercom_set_handler+0x60>)
   1c76c:	68fa      	ldr	r2, [r7, #12]
   1c76e:	0092      	lsls	r2, r2, #2
   1c770:	490e      	ldr	r1, [pc, #56]	; (1c7ac <_sercom_set_handler+0x64>)
   1c772:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   1c774:	4b0e      	ldr	r3, [pc, #56]	; (1c7b0 <_sercom_set_handler+0x68>)
   1c776:	68fa      	ldr	r2, [r7, #12]
   1c778:	0092      	lsls	r2, r2, #2
   1c77a:	2100      	movs	r1, #0
   1c77c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1c77e:	68fb      	ldr	r3, [r7, #12]
   1c780:	3301      	adds	r3, #1
   1c782:	60fb      	str	r3, [r7, #12]
   1c784:	68fb      	ldr	r3, [r7, #12]
   1c786:	2b05      	cmp	r3, #5
   1c788:	d9ef      	bls.n	1c76a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   1c78a:	4b06      	ldr	r3, [pc, #24]	; (1c7a4 <_sercom_set_handler+0x5c>)
   1c78c:	2201      	movs	r2, #1
   1c78e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1c790:	1dfb      	adds	r3, r7, #7
   1c792:	781a      	ldrb	r2, [r3, #0]
   1c794:	4b04      	ldr	r3, [pc, #16]	; (1c7a8 <_sercom_set_handler+0x60>)
   1c796:	0092      	lsls	r2, r2, #2
   1c798:	6839      	ldr	r1, [r7, #0]
   1c79a:	50d1      	str	r1, [r2, r3]
}
   1c79c:	46c0      	nop			; (mov r8, r8)
   1c79e:	46bd      	mov	sp, r7
   1c7a0:	b004      	add	sp, #16
   1c7a2:	bd80      	pop	{r7, pc}
   1c7a4:	20003a8a 	.word	0x20003a8a
   1c7a8:	20003a8c 	.word	0x20003a8c
   1c7ac:	0001c735 	.word	0x0001c735
   1c7b0:	20004d40 	.word	0x20004d40

0001c7b4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1c7b4:	b590      	push	{r4, r7, lr}
   1c7b6:	b085      	sub	sp, #20
   1c7b8:	af00      	add	r7, sp, #0
   1c7ba:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1c7bc:	2308      	movs	r3, #8
   1c7be:	18fb      	adds	r3, r7, r3
   1c7c0:	4a0b      	ldr	r2, [pc, #44]	; (1c7f0 <_sercom_get_interrupt_vector+0x3c>)
   1c7c2:	6811      	ldr	r1, [r2, #0]
   1c7c4:	6019      	str	r1, [r3, #0]
   1c7c6:	8892      	ldrh	r2, [r2, #4]
   1c7c8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1c7ca:	230f      	movs	r3, #15
   1c7cc:	18fc      	adds	r4, r7, r3
   1c7ce:	687b      	ldr	r3, [r7, #4]
   1c7d0:	0018      	movs	r0, r3
   1c7d2:	4b08      	ldr	r3, [pc, #32]	; (1c7f4 <_sercom_get_interrupt_vector+0x40>)
   1c7d4:	4798      	blx	r3
   1c7d6:	0003      	movs	r3, r0
   1c7d8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1c7da:	230f      	movs	r3, #15
   1c7dc:	18fb      	adds	r3, r7, r3
   1c7de:	781b      	ldrb	r3, [r3, #0]
   1c7e0:	2208      	movs	r2, #8
   1c7e2:	18ba      	adds	r2, r7, r2
   1c7e4:	5cd3      	ldrb	r3, [r2, r3]
   1c7e6:	b25b      	sxtb	r3, r3
}
   1c7e8:	0018      	movs	r0, r3
   1c7ea:	46bd      	mov	sp, r7
   1c7ec:	b005      	add	sp, #20
   1c7ee:	bd90      	pop	{r4, r7, pc}
   1c7f0:	00024368 	.word	0x00024368
   1c7f4:	0001c6e5 	.word	0x0001c6e5

0001c7f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1c7f8:	b580      	push	{r7, lr}
   1c7fa:	af00      	add	r7, sp, #0
   1c7fc:	4b03      	ldr	r3, [pc, #12]	; (1c80c <SERCOM0_Handler+0x14>)
   1c7fe:	681b      	ldr	r3, [r3, #0]
   1c800:	2000      	movs	r0, #0
   1c802:	4798      	blx	r3
   1c804:	46c0      	nop			; (mov r8, r8)
   1c806:	46bd      	mov	sp, r7
   1c808:	bd80      	pop	{r7, pc}
   1c80a:	46c0      	nop			; (mov r8, r8)
   1c80c:	20003a8c 	.word	0x20003a8c

0001c810 <SERCOM1_Handler>:
   1c810:	b580      	push	{r7, lr}
   1c812:	af00      	add	r7, sp, #0
   1c814:	4b03      	ldr	r3, [pc, #12]	; (1c824 <SERCOM1_Handler+0x14>)
   1c816:	685b      	ldr	r3, [r3, #4]
   1c818:	2001      	movs	r0, #1
   1c81a:	4798      	blx	r3
   1c81c:	46c0      	nop			; (mov r8, r8)
   1c81e:	46bd      	mov	sp, r7
   1c820:	bd80      	pop	{r7, pc}
   1c822:	46c0      	nop			; (mov r8, r8)
   1c824:	20003a8c 	.word	0x20003a8c

0001c828 <SERCOM2_Handler>:
   1c828:	b580      	push	{r7, lr}
   1c82a:	af00      	add	r7, sp, #0
   1c82c:	4b03      	ldr	r3, [pc, #12]	; (1c83c <SERCOM2_Handler+0x14>)
   1c82e:	689b      	ldr	r3, [r3, #8]
   1c830:	2002      	movs	r0, #2
   1c832:	4798      	blx	r3
   1c834:	46c0      	nop			; (mov r8, r8)
   1c836:	46bd      	mov	sp, r7
   1c838:	bd80      	pop	{r7, pc}
   1c83a:	46c0      	nop			; (mov r8, r8)
   1c83c:	20003a8c 	.word	0x20003a8c

0001c840 <SERCOM3_Handler>:
   1c840:	b580      	push	{r7, lr}
   1c842:	af00      	add	r7, sp, #0
   1c844:	4b03      	ldr	r3, [pc, #12]	; (1c854 <SERCOM3_Handler+0x14>)
   1c846:	68db      	ldr	r3, [r3, #12]
   1c848:	2003      	movs	r0, #3
   1c84a:	4798      	blx	r3
   1c84c:	46c0      	nop			; (mov r8, r8)
   1c84e:	46bd      	mov	sp, r7
   1c850:	bd80      	pop	{r7, pc}
   1c852:	46c0      	nop			; (mov r8, r8)
   1c854:	20003a8c 	.word	0x20003a8c

0001c858 <SERCOM4_Handler>:
   1c858:	b580      	push	{r7, lr}
   1c85a:	af00      	add	r7, sp, #0
   1c85c:	4b03      	ldr	r3, [pc, #12]	; (1c86c <SERCOM4_Handler+0x14>)
   1c85e:	691b      	ldr	r3, [r3, #16]
   1c860:	2004      	movs	r0, #4
   1c862:	4798      	blx	r3
   1c864:	46c0      	nop			; (mov r8, r8)
   1c866:	46bd      	mov	sp, r7
   1c868:	bd80      	pop	{r7, pc}
   1c86a:	46c0      	nop			; (mov r8, r8)
   1c86c:	20003a8c 	.word	0x20003a8c

0001c870 <SERCOM5_Handler>:
   1c870:	b580      	push	{r7, lr}
   1c872:	af00      	add	r7, sp, #0
   1c874:	4b03      	ldr	r3, [pc, #12]	; (1c884 <SERCOM5_Handler+0x14>)
   1c876:	695b      	ldr	r3, [r3, #20]
   1c878:	2005      	movs	r0, #5
   1c87a:	4798      	blx	r3
   1c87c:	46c0      	nop			; (mov r8, r8)
   1c87e:	46bd      	mov	sp, r7
   1c880:	bd80      	pop	{r7, pc}
   1c882:	46c0      	nop			; (mov r8, r8)
   1c884:	20003a8c 	.word	0x20003a8c

0001c888 <system_gclk_chan_get_config_defaults>:
{
   1c888:	b580      	push	{r7, lr}
   1c88a:	b082      	sub	sp, #8
   1c88c:	af00      	add	r7, sp, #0
   1c88e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1c890:	687b      	ldr	r3, [r7, #4]
   1c892:	2200      	movs	r2, #0
   1c894:	701a      	strb	r2, [r3, #0]
}
   1c896:	46c0      	nop			; (mov r8, r8)
   1c898:	46bd      	mov	sp, r7
   1c89a:	b002      	add	sp, #8
   1c89c:	bd80      	pop	{r7, pc}
	...

0001c8a0 <system_apb_clock_set_mask>:
{
   1c8a0:	b580      	push	{r7, lr}
   1c8a2:	b082      	sub	sp, #8
   1c8a4:	af00      	add	r7, sp, #0
   1c8a6:	0002      	movs	r2, r0
   1c8a8:	6039      	str	r1, [r7, #0]
   1c8aa:	1dfb      	adds	r3, r7, #7
   1c8ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1c8ae:	1dfb      	adds	r3, r7, #7
   1c8b0:	781b      	ldrb	r3, [r3, #0]
   1c8b2:	2b01      	cmp	r3, #1
   1c8b4:	d00a      	beq.n	1c8cc <system_apb_clock_set_mask+0x2c>
   1c8b6:	2b02      	cmp	r3, #2
   1c8b8:	d00f      	beq.n	1c8da <system_apb_clock_set_mask+0x3a>
   1c8ba:	2b00      	cmp	r3, #0
   1c8bc:	d114      	bne.n	1c8e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1c8be:	4b0e      	ldr	r3, [pc, #56]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8c0:	4a0d      	ldr	r2, [pc, #52]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8c2:	6991      	ldr	r1, [r2, #24]
   1c8c4:	683a      	ldr	r2, [r7, #0]
   1c8c6:	430a      	orrs	r2, r1
   1c8c8:	619a      	str	r2, [r3, #24]
			break;
   1c8ca:	e00f      	b.n	1c8ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1c8cc:	4b0a      	ldr	r3, [pc, #40]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8ce:	4a0a      	ldr	r2, [pc, #40]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8d0:	69d1      	ldr	r1, [r2, #28]
   1c8d2:	683a      	ldr	r2, [r7, #0]
   1c8d4:	430a      	orrs	r2, r1
   1c8d6:	61da      	str	r2, [r3, #28]
			break;
   1c8d8:	e008      	b.n	1c8ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1c8da:	4b07      	ldr	r3, [pc, #28]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8dc:	4a06      	ldr	r2, [pc, #24]	; (1c8f8 <system_apb_clock_set_mask+0x58>)
   1c8de:	6a11      	ldr	r1, [r2, #32]
   1c8e0:	683a      	ldr	r2, [r7, #0]
   1c8e2:	430a      	orrs	r2, r1
   1c8e4:	621a      	str	r2, [r3, #32]
			break;
   1c8e6:	e001      	b.n	1c8ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1c8e8:	2317      	movs	r3, #23
   1c8ea:	e000      	b.n	1c8ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1c8ec:	2300      	movs	r3, #0
}
   1c8ee:	0018      	movs	r0, r3
   1c8f0:	46bd      	mov	sp, r7
   1c8f2:	b002      	add	sp, #8
   1c8f4:	bd80      	pop	{r7, pc}
   1c8f6:	46c0      	nop			; (mov r8, r8)
   1c8f8:	40000400 	.word	0x40000400

0001c8fc <system_pinmux_get_config_defaults>:
{
   1c8fc:	b580      	push	{r7, lr}
   1c8fe:	b082      	sub	sp, #8
   1c900:	af00      	add	r7, sp, #0
   1c902:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1c904:	687b      	ldr	r3, [r7, #4]
   1c906:	2280      	movs	r2, #128	; 0x80
   1c908:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1c90a:	687b      	ldr	r3, [r7, #4]
   1c90c:	2200      	movs	r2, #0
   1c90e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1c910:	687b      	ldr	r3, [r7, #4]
   1c912:	2201      	movs	r2, #1
   1c914:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1c916:	687b      	ldr	r3, [r7, #4]
   1c918:	2200      	movs	r2, #0
   1c91a:	70da      	strb	r2, [r3, #3]
}
   1c91c:	46c0      	nop			; (mov r8, r8)
   1c91e:	46bd      	mov	sp, r7
   1c920:	b002      	add	sp, #8
   1c922:	bd80      	pop	{r7, pc}

0001c924 <system_is_debugger_present>:
{
   1c924:	b580      	push	{r7, lr}
   1c926:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1c928:	4b05      	ldr	r3, [pc, #20]	; (1c940 <system_is_debugger_present+0x1c>)
   1c92a:	789b      	ldrb	r3, [r3, #2]
   1c92c:	b2db      	uxtb	r3, r3
   1c92e:	001a      	movs	r2, r3
   1c930:	2302      	movs	r3, #2
   1c932:	4013      	ands	r3, r2
   1c934:	1e5a      	subs	r2, r3, #1
   1c936:	4193      	sbcs	r3, r2
   1c938:	b2db      	uxtb	r3, r3
}
   1c93a:	0018      	movs	r0, r3
   1c93c:	46bd      	mov	sp, r7
   1c93e:	bd80      	pop	{r7, pc}
   1c940:	41002000 	.word	0x41002000

0001c944 <usart_is_syncing>:
{
   1c944:	b580      	push	{r7, lr}
   1c946:	b084      	sub	sp, #16
   1c948:	af00      	add	r7, sp, #0
   1c94a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c94c:	687b      	ldr	r3, [r7, #4]
   1c94e:	681b      	ldr	r3, [r3, #0]
   1c950:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1c952:	68fb      	ldr	r3, [r7, #12]
   1c954:	69db      	ldr	r3, [r3, #28]
   1c956:	1e5a      	subs	r2, r3, #1
   1c958:	4193      	sbcs	r3, r2
   1c95a:	b2db      	uxtb	r3, r3
}
   1c95c:	0018      	movs	r0, r3
   1c95e:	46bd      	mov	sp, r7
   1c960:	b004      	add	sp, #16
   1c962:	bd80      	pop	{r7, pc}

0001c964 <_usart_wait_for_sync>:
{
   1c964:	b580      	push	{r7, lr}
   1c966:	b082      	sub	sp, #8
   1c968:	af00      	add	r7, sp, #0
   1c96a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1c96c:	46c0      	nop			; (mov r8, r8)
   1c96e:	687b      	ldr	r3, [r7, #4]
   1c970:	0018      	movs	r0, r3
   1c972:	4b04      	ldr	r3, [pc, #16]	; (1c984 <_usart_wait_for_sync+0x20>)
   1c974:	4798      	blx	r3
   1c976:	1e03      	subs	r3, r0, #0
   1c978:	d1f9      	bne.n	1c96e <_usart_wait_for_sync+0xa>
}
   1c97a:	46c0      	nop			; (mov r8, r8)
   1c97c:	46bd      	mov	sp, r7
   1c97e:	b002      	add	sp, #8
   1c980:	bd80      	pop	{r7, pc}
   1c982:	46c0      	nop			; (mov r8, r8)
   1c984:	0001c945 	.word	0x0001c945

0001c988 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   1c988:	b5b0      	push	{r4, r5, r7, lr}
   1c98a:	b08c      	sub	sp, #48	; 0x30
   1c98c:	af02      	add	r7, sp, #8
   1c98e:	6078      	str	r0, [r7, #4]
   1c990:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c992:	687b      	ldr	r3, [r7, #4]
   1c994:	681b      	ldr	r3, [r3, #0]
   1c996:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1c998:	687b      	ldr	r3, [r7, #4]
   1c99a:	681b      	ldr	r3, [r3, #0]
   1c99c:	0018      	movs	r0, r3
   1c99e:	4bab      	ldr	r3, [pc, #684]	; (1cc4c <_usart_set_config+0x2c4>)
   1c9a0:	4798      	blx	r3
   1c9a2:	0003      	movs	r3, r0
   1c9a4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1c9a6:	697b      	ldr	r3, [r7, #20]
   1c9a8:	3314      	adds	r3, #20
   1c9aa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   1c9ac:	2300      	movs	r3, #0
   1c9ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   1c9b0:	2300      	movs	r3, #0
   1c9b2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   1c9b4:	230a      	movs	r3, #10
   1c9b6:	18fb      	adds	r3, r7, r3
   1c9b8:	2200      	movs	r2, #0
   1c9ba:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1c9bc:	231f      	movs	r3, #31
   1c9be:	18fb      	adds	r3, r7, r3
   1c9c0:	2200      	movs	r2, #0
   1c9c2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1c9c4:	231e      	movs	r3, #30
   1c9c6:	18fb      	adds	r3, r7, r3
   1c9c8:	2210      	movs	r2, #16
   1c9ca:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   1c9cc:	683b      	ldr	r3, [r7, #0]
   1c9ce:	8a1b      	ldrh	r3, [r3, #16]
   1c9d0:	2280      	movs	r2, #128	; 0x80
   1c9d2:	01d2      	lsls	r2, r2, #7
   1c9d4:	4293      	cmp	r3, r2
   1c9d6:	d01c      	beq.n	1ca12 <_usart_set_config+0x8a>
   1c9d8:	2280      	movs	r2, #128	; 0x80
   1c9da:	01d2      	lsls	r2, r2, #7
   1c9dc:	4293      	cmp	r3, r2
   1c9de:	dc06      	bgt.n	1c9ee <_usart_set_config+0x66>
   1c9e0:	2b00      	cmp	r3, #0
   1c9e2:	d00d      	beq.n	1ca00 <_usart_set_config+0x78>
   1c9e4:	2280      	movs	r2, #128	; 0x80
   1c9e6:	0192      	lsls	r2, r2, #6
   1c9e8:	4293      	cmp	r3, r2
   1c9ea:	d024      	beq.n	1ca36 <_usart_set_config+0xae>
   1c9ec:	e035      	b.n	1ca5a <_usart_set_config+0xd2>
   1c9ee:	22c0      	movs	r2, #192	; 0xc0
   1c9f0:	01d2      	lsls	r2, r2, #7
   1c9f2:	4293      	cmp	r3, r2
   1c9f4:	d028      	beq.n	1ca48 <_usart_set_config+0xc0>
   1c9f6:	2280      	movs	r2, #128	; 0x80
   1c9f8:	0212      	lsls	r2, r2, #8
   1c9fa:	4293      	cmp	r3, r2
   1c9fc:	d012      	beq.n	1ca24 <_usart_set_config+0x9c>
   1c9fe:	e02c      	b.n	1ca5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1ca00:	231f      	movs	r3, #31
   1ca02:	18fb      	adds	r3, r7, r3
   1ca04:	2200      	movs	r2, #0
   1ca06:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1ca08:	231e      	movs	r3, #30
   1ca0a:	18fb      	adds	r3, r7, r3
   1ca0c:	2210      	movs	r2, #16
   1ca0e:	701a      	strb	r2, [r3, #0]
			break;
   1ca10:	e023      	b.n	1ca5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1ca12:	231f      	movs	r3, #31
   1ca14:	18fb      	adds	r3, r7, r3
   1ca16:	2200      	movs	r2, #0
   1ca18:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1ca1a:	231e      	movs	r3, #30
   1ca1c:	18fb      	adds	r3, r7, r3
   1ca1e:	2208      	movs	r2, #8
   1ca20:	701a      	strb	r2, [r3, #0]
			break;
   1ca22:	e01a      	b.n	1ca5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1ca24:	231f      	movs	r3, #31
   1ca26:	18fb      	adds	r3, r7, r3
   1ca28:	2200      	movs	r2, #0
   1ca2a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1ca2c:	231e      	movs	r3, #30
   1ca2e:	18fb      	adds	r3, r7, r3
   1ca30:	2203      	movs	r2, #3
   1ca32:	701a      	strb	r2, [r3, #0]
			break;
   1ca34:	e011      	b.n	1ca5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1ca36:	231f      	movs	r3, #31
   1ca38:	18fb      	adds	r3, r7, r3
   1ca3a:	2201      	movs	r2, #1
   1ca3c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1ca3e:	231e      	movs	r3, #30
   1ca40:	18fb      	adds	r3, r7, r3
   1ca42:	2210      	movs	r2, #16
   1ca44:	701a      	strb	r2, [r3, #0]
			break;
   1ca46:	e008      	b.n	1ca5a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1ca48:	231f      	movs	r3, #31
   1ca4a:	18fb      	adds	r3, r7, r3
   1ca4c:	2201      	movs	r2, #1
   1ca4e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1ca50:	231e      	movs	r3, #30
   1ca52:	18fb      	adds	r3, r7, r3
   1ca54:	2208      	movs	r2, #8
   1ca56:	701a      	strb	r2, [r3, #0]
			break;
   1ca58:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   1ca5a:	683b      	ldr	r3, [r7, #0]
   1ca5c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   1ca5e:	683b      	ldr	r3, [r7, #0]
   1ca60:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1ca62:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   1ca64:	683b      	ldr	r3, [r7, #0]
   1ca66:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   1ca68:	4313      	orrs	r3, r2
		config->sample_rate |
   1ca6a:	683a      	ldr	r2, [r7, #0]
   1ca6c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   1ca6e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1ca70:	683a      	ldr	r2, [r7, #0]
   1ca72:	7e12      	ldrb	r2, [r2, #24]
   1ca74:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   1ca76:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1ca78:	683a      	ldr	r2, [r7, #0]
   1ca7a:	2126      	movs	r1, #38	; 0x26
   1ca7c:	5c52      	ldrb	r2, [r2, r1]
   1ca7e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   1ca80:	4313      	orrs	r3, r2
   1ca82:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   1ca84:	231d      	movs	r3, #29
   1ca86:	18fb      	adds	r3, r7, r3
   1ca88:	2200      	movs	r2, #0
   1ca8a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   1ca8c:	683b      	ldr	r3, [r7, #0]
   1ca8e:	685b      	ldr	r3, [r3, #4]
   1ca90:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1ca92:	68fb      	ldr	r3, [r7, #12]
   1ca94:	2b00      	cmp	r3, #0
   1ca96:	d01e      	beq.n	1cad6 <_usart_set_config+0x14e>
   1ca98:	2280      	movs	r2, #128	; 0x80
   1ca9a:	0552      	lsls	r2, r2, #21
   1ca9c:	4293      	cmp	r3, r2
   1ca9e:	d14f      	bne.n	1cb40 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   1caa0:	683b      	ldr	r3, [r7, #0]
   1caa2:	2227      	movs	r2, #39	; 0x27
   1caa4:	5c9b      	ldrb	r3, [r3, r2]
   1caa6:	2201      	movs	r2, #1
   1caa8:	4053      	eors	r3, r2
   1caaa:	b2db      	uxtb	r3, r3
   1caac:	2b00      	cmp	r3, #0
   1caae:	d046      	beq.n	1cb3e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1cab0:	683b      	ldr	r3, [r7, #0]
   1cab2:	6a1d      	ldr	r5, [r3, #32]
   1cab4:	693b      	ldr	r3, [r7, #16]
   1cab6:	b2db      	uxtb	r3, r3
   1cab8:	0018      	movs	r0, r3
   1caba:	4b65      	ldr	r3, [pc, #404]	; (1cc50 <_usart_set_config+0x2c8>)
   1cabc:	4798      	blx	r3
   1cabe:	0001      	movs	r1, r0
   1cac0:	231d      	movs	r3, #29
   1cac2:	18fc      	adds	r4, r7, r3
   1cac4:	230a      	movs	r3, #10
   1cac6:	18fb      	adds	r3, r7, r3
   1cac8:	001a      	movs	r2, r3
   1caca:	0028      	movs	r0, r5
   1cacc:	4b61      	ldr	r3, [pc, #388]	; (1cc54 <_usart_set_config+0x2cc>)
   1cace:	4798      	blx	r3
   1cad0:	0003      	movs	r3, r0
   1cad2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   1cad4:	e033      	b.n	1cb3e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1cad6:	683b      	ldr	r3, [r7, #0]
   1cad8:	2227      	movs	r2, #39	; 0x27
   1cada:	5c9b      	ldrb	r3, [r3, r2]
   1cadc:	2b00      	cmp	r3, #0
   1cade:	d014      	beq.n	1cb0a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   1cae0:	683b      	ldr	r3, [r7, #0]
   1cae2:	6a18      	ldr	r0, [r3, #32]
   1cae4:	683b      	ldr	r3, [r7, #0]
   1cae6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   1cae8:	231d      	movs	r3, #29
   1caea:	18fc      	adds	r4, r7, r3
   1caec:	231f      	movs	r3, #31
   1caee:	18fb      	adds	r3, r7, r3
   1caf0:	781d      	ldrb	r5, [r3, #0]
   1caf2:	230a      	movs	r3, #10
   1caf4:	18fa      	adds	r2, r7, r3
   1caf6:	231e      	movs	r3, #30
   1caf8:	18fb      	adds	r3, r7, r3
   1cafa:	781b      	ldrb	r3, [r3, #0]
   1cafc:	9300      	str	r3, [sp, #0]
   1cafe:	002b      	movs	r3, r5
   1cb00:	4d55      	ldr	r5, [pc, #340]	; (1cc58 <_usart_set_config+0x2d0>)
   1cb02:	47a8      	blx	r5
   1cb04:	0003      	movs	r3, r0
   1cb06:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   1cb08:	e01a      	b.n	1cb40 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   1cb0a:	683b      	ldr	r3, [r7, #0]
   1cb0c:	6a1d      	ldr	r5, [r3, #32]
   1cb0e:	693b      	ldr	r3, [r7, #16]
   1cb10:	b2db      	uxtb	r3, r3
   1cb12:	0018      	movs	r0, r3
   1cb14:	4b4e      	ldr	r3, [pc, #312]	; (1cc50 <_usart_set_config+0x2c8>)
   1cb16:	4798      	blx	r3
				status_code =
   1cb18:	231d      	movs	r3, #29
   1cb1a:	18fc      	adds	r4, r7, r3
   1cb1c:	231f      	movs	r3, #31
   1cb1e:	18fb      	adds	r3, r7, r3
   1cb20:	7819      	ldrb	r1, [r3, #0]
   1cb22:	230a      	movs	r3, #10
   1cb24:	18fa      	adds	r2, r7, r3
   1cb26:	231e      	movs	r3, #30
   1cb28:	18fb      	adds	r3, r7, r3
   1cb2a:	781b      	ldrb	r3, [r3, #0]
   1cb2c:	9300      	str	r3, [sp, #0]
   1cb2e:	000b      	movs	r3, r1
   1cb30:	0001      	movs	r1, r0
   1cb32:	0028      	movs	r0, r5
   1cb34:	4d48      	ldr	r5, [pc, #288]	; (1cc58 <_usart_set_config+0x2d0>)
   1cb36:	47a8      	blx	r5
   1cb38:	0003      	movs	r3, r0
   1cb3a:	7023      	strb	r3, [r4, #0]
			break;
   1cb3c:	e000      	b.n	1cb40 <_usart_set_config+0x1b8>
			break;
   1cb3e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   1cb40:	231d      	movs	r3, #29
   1cb42:	18fb      	adds	r3, r7, r3
   1cb44:	781b      	ldrb	r3, [r3, #0]
   1cb46:	2b00      	cmp	r3, #0
   1cb48:	d003      	beq.n	1cb52 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   1cb4a:	231d      	movs	r3, #29
   1cb4c:	18fb      	adds	r3, r7, r3
   1cb4e:	781b      	ldrb	r3, [r3, #0]
   1cb50:	e077      	b.n	1cc42 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1cb52:	683b      	ldr	r3, [r7, #0]
   1cb54:	7e5b      	ldrb	r3, [r3, #25]
   1cb56:	2b00      	cmp	r3, #0
   1cb58:	d003      	beq.n	1cb62 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1cb5a:	683b      	ldr	r3, [r7, #0]
   1cb5c:	7e9a      	ldrb	r2, [r3, #26]
   1cb5e:	69bb      	ldr	r3, [r7, #24]
   1cb60:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	0018      	movs	r0, r3
   1cb66:	4b3d      	ldr	r3, [pc, #244]	; (1cc5c <_usart_set_config+0x2d4>)
   1cb68:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   1cb6a:	230a      	movs	r3, #10
   1cb6c:	18fb      	adds	r3, r7, r3
   1cb6e:	881a      	ldrh	r2, [r3, #0]
   1cb70:	69bb      	ldr	r3, [r7, #24]
   1cb72:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   1cb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cb76:	68fb      	ldr	r3, [r7, #12]
   1cb78:	4313      	orrs	r3, r2
   1cb7a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   1cb7c:	683b      	ldr	r3, [r7, #0]
   1cb7e:	2227      	movs	r2, #39	; 0x27
   1cb80:	5c9b      	ldrb	r3, [r3, r2]
   1cb82:	2201      	movs	r2, #1
   1cb84:	4053      	eors	r3, r2
   1cb86:	b2db      	uxtb	r3, r3
   1cb88:	2b00      	cmp	r3, #0
   1cb8a:	d003      	beq.n	1cb94 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb8e:	2204      	movs	r2, #4
   1cb90:	4313      	orrs	r3, r2
   1cb92:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1cb94:	683b      	ldr	r3, [r7, #0]
   1cb96:	7e5b      	ldrb	r3, [r3, #25]
   1cb98:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1cb9a:	683b      	ldr	r3, [r7, #0]
   1cb9c:	7f1b      	ldrb	r3, [r3, #28]
   1cb9e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1cba0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1cba2:	683b      	ldr	r3, [r7, #0]
   1cba4:	7f5b      	ldrb	r3, [r3, #29]
   1cba6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1cba8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1cbaa:	683b      	ldr	r3, [r7, #0]
   1cbac:	2124      	movs	r1, #36	; 0x24
   1cbae:	5c5b      	ldrb	r3, [r3, r1]
   1cbb0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1cbb2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1cbb4:	683b      	ldr	r3, [r7, #0]
   1cbb6:	2125      	movs	r1, #37	; 0x25
   1cbb8:	5c5b      	ldrb	r3, [r3, r1]
   1cbba:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1cbbc:	4313      	orrs	r3, r2
	ctrlb =  
   1cbbe:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   1cbc0:	683b      	ldr	r3, [r7, #0]
   1cbc2:	7a9b      	ldrb	r3, [r3, #10]
   1cbc4:	001a      	movs	r2, r3
   1cbc6:	6a3b      	ldr	r3, [r7, #32]
   1cbc8:	4313      	orrs	r3, r2
   1cbca:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   1cbcc:	683b      	ldr	r3, [r7, #0]
   1cbce:	7adb      	ldrb	r3, [r3, #11]
   1cbd0:	001a      	movs	r2, r3
   1cbd2:	6a3b      	ldr	r3, [r7, #32]
   1cbd4:	4313      	orrs	r3, r2
   1cbd6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   1cbd8:	683b      	ldr	r3, [r7, #0]
   1cbda:	891b      	ldrh	r3, [r3, #8]
   1cbdc:	2bff      	cmp	r3, #255	; 0xff
   1cbde:	d00b      	beq.n	1cbf8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cbe2:	2280      	movs	r2, #128	; 0x80
   1cbe4:	0452      	lsls	r2, r2, #17
   1cbe6:	4313      	orrs	r3, r2
   1cbe8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   1cbea:	683b      	ldr	r3, [r7, #0]
   1cbec:	891b      	ldrh	r3, [r3, #8]
   1cbee:	001a      	movs	r2, r3
   1cbf0:	6a3b      	ldr	r3, [r7, #32]
   1cbf2:	4313      	orrs	r3, r2
   1cbf4:	623b      	str	r3, [r7, #32]
   1cbf6:	e008      	b.n	1cc0a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   1cbf8:	683b      	ldr	r3, [r7, #0]
   1cbfa:	7edb      	ldrb	r3, [r3, #27]
   1cbfc:	2b00      	cmp	r3, #0
   1cbfe:	d004      	beq.n	1cc0a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc02:	2280      	movs	r2, #128	; 0x80
   1cc04:	04d2      	lsls	r2, r2, #19
   1cc06:	4313      	orrs	r3, r2
   1cc08:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1cc0a:	683b      	ldr	r3, [r7, #0]
   1cc0c:	222c      	movs	r2, #44	; 0x2c
   1cc0e:	5c9b      	ldrb	r3, [r3, r2]
   1cc10:	2b00      	cmp	r3, #0
   1cc12:	d103      	bne.n	1cc1c <_usart_set_config+0x294>
   1cc14:	4b12      	ldr	r3, [pc, #72]	; (1cc60 <_usart_set_config+0x2d8>)
   1cc16:	4798      	blx	r3
   1cc18:	1e03      	subs	r3, r0, #0
   1cc1a:	d003      	beq.n	1cc24 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc1e:	2280      	movs	r2, #128	; 0x80
   1cc20:	4313      	orrs	r3, r2
   1cc22:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1cc24:	687b      	ldr	r3, [r7, #4]
   1cc26:	0018      	movs	r0, r3
   1cc28:	4b0c      	ldr	r3, [pc, #48]	; (1cc5c <_usart_set_config+0x2d4>)
   1cc2a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   1cc2c:	69bb      	ldr	r3, [r7, #24]
   1cc2e:	6a3a      	ldr	r2, [r7, #32]
   1cc30:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1cc32:	687b      	ldr	r3, [r7, #4]
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b09      	ldr	r3, [pc, #36]	; (1cc5c <_usart_set_config+0x2d4>)
   1cc38:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   1cc3a:	69bb      	ldr	r3, [r7, #24]
   1cc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cc3e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   1cc40:	2300      	movs	r3, #0
}
   1cc42:	0018      	movs	r0, r3
   1cc44:	46bd      	mov	sp, r7
   1cc46:	b00a      	add	sp, #40	; 0x28
   1cc48:	bdb0      	pop	{r4, r5, r7, pc}
   1cc4a:	46c0      	nop			; (mov r8, r8)
   1cc4c:	0001c6e5 	.word	0x0001c6e5
   1cc50:	0001e0e5 	.word	0x0001e0e5
   1cc54:	0001c25f 	.word	0x0001c25f
   1cc58:	0001c2dd 	.word	0x0001c2dd
   1cc5c:	0001c965 	.word	0x0001c965
   1cc60:	0001c925 	.word	0x0001c925

0001cc64 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1cc64:	b590      	push	{r4, r7, lr}
   1cc66:	b093      	sub	sp, #76	; 0x4c
   1cc68:	af00      	add	r7, sp, #0
   1cc6a:	60f8      	str	r0, [r7, #12]
   1cc6c:	60b9      	str	r1, [r7, #8]
   1cc6e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   1cc70:	233b      	movs	r3, #59	; 0x3b
   1cc72:	18fb      	adds	r3, r7, r3
   1cc74:	2200      	movs	r2, #0
   1cc76:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1cc78:	68fb      	ldr	r3, [r7, #12]
   1cc7a:	68ba      	ldr	r2, [r7, #8]
   1cc7c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cc7e:	68fb      	ldr	r3, [r7, #12]
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1cc84:	68fb      	ldr	r3, [r7, #12]
   1cc86:	681b      	ldr	r3, [r3, #0]
   1cc88:	0018      	movs	r0, r3
   1cc8a:	4b86      	ldr	r3, [pc, #536]	; (1cea4 <usart_init+0x240>)
   1cc8c:	4798      	blx	r3
   1cc8e:	0003      	movs	r3, r0
   1cc90:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc94:	3302      	adds	r3, #2
   1cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc9a:	3314      	adds	r3, #20
   1cc9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1cc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cca0:	681b      	ldr	r3, [r3, #0]
   1cca2:	2201      	movs	r2, #1
   1cca4:	4013      	ands	r3, r2
   1cca6:	d001      	beq.n	1ccac <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1cca8:	2305      	movs	r3, #5
   1ccaa:	e0f6      	b.n	1ce9a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ccae:	681b      	ldr	r3, [r3, #0]
   1ccb0:	2202      	movs	r2, #2
   1ccb2:	4013      	ands	r3, r2
   1ccb4:	d001      	beq.n	1ccba <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   1ccb6:	231c      	movs	r3, #28
   1ccb8:	e0ef      	b.n	1ce9a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1ccba:	2201      	movs	r2, #1
   1ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ccbe:	409a      	lsls	r2, r3
   1ccc0:	0013      	movs	r3, r2
   1ccc2:	0019      	movs	r1, r3
   1ccc4:	2002      	movs	r0, #2
   1ccc6:	4b78      	ldr	r3, [pc, #480]	; (1cea8 <usart_init+0x244>)
   1ccc8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1ccca:	2324      	movs	r3, #36	; 0x24
   1cccc:	18fb      	adds	r3, r7, r3
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b76      	ldr	r3, [pc, #472]	; (1ceac <usart_init+0x248>)
   1ccd2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1ccd4:	687b      	ldr	r3, [r7, #4]
   1ccd6:	222d      	movs	r2, #45	; 0x2d
   1ccd8:	5c9a      	ldrb	r2, [r3, r2]
   1ccda:	2324      	movs	r3, #36	; 0x24
   1ccdc:	18fb      	adds	r3, r7, r3
   1ccde:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cce2:	b2db      	uxtb	r3, r3
   1cce4:	2224      	movs	r2, #36	; 0x24
   1cce6:	18ba      	adds	r2, r7, r2
   1cce8:	0011      	movs	r1, r2
   1ccea:	0018      	movs	r0, r3
   1ccec:	4b70      	ldr	r3, [pc, #448]	; (1ceb0 <usart_init+0x24c>)
   1ccee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ccf2:	b2db      	uxtb	r3, r3
   1ccf4:	0018      	movs	r0, r3
   1ccf6:	4b6f      	ldr	r3, [pc, #444]	; (1ceb4 <usart_init+0x250>)
   1ccf8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1ccfa:	687b      	ldr	r3, [r7, #4]
   1ccfc:	222d      	movs	r2, #45	; 0x2d
   1ccfe:	5c9b      	ldrb	r3, [r3, r2]
   1cd00:	2100      	movs	r1, #0
   1cd02:	0018      	movs	r0, r3
   1cd04:	4b6c      	ldr	r3, [pc, #432]	; (1ceb8 <usart_init+0x254>)
   1cd06:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   1cd08:	687b      	ldr	r3, [r7, #4]
   1cd0a:	7ada      	ldrb	r2, [r3, #11]
   1cd0c:	68fb      	ldr	r3, [r7, #12]
   1cd0e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   1cd10:	687b      	ldr	r3, [r7, #4]
   1cd12:	2224      	movs	r2, #36	; 0x24
   1cd14:	5c9a      	ldrb	r2, [r3, r2]
   1cd16:	68fb      	ldr	r3, [r7, #12]
   1cd18:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1cd1a:	687b      	ldr	r3, [r7, #4]
   1cd1c:	2225      	movs	r2, #37	; 0x25
   1cd1e:	5c9a      	ldrb	r2, [r3, r2]
   1cd20:	68fb      	ldr	r3, [r7, #12]
   1cd22:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   1cd24:	687b      	ldr	r3, [r7, #4]
   1cd26:	7eda      	ldrb	r2, [r3, #27]
   1cd28:	68fb      	ldr	r3, [r7, #12]
   1cd2a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1cd2c:	687b      	ldr	r3, [r7, #4]
   1cd2e:	7f1a      	ldrb	r2, [r3, #28]
   1cd30:	68fb      	ldr	r3, [r7, #12]
   1cd32:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   1cd34:	233b      	movs	r3, #59	; 0x3b
   1cd36:	18fc      	adds	r4, r7, r3
   1cd38:	687a      	ldr	r2, [r7, #4]
   1cd3a:	68fb      	ldr	r3, [r7, #12]
   1cd3c:	0011      	movs	r1, r2
   1cd3e:	0018      	movs	r0, r3
   1cd40:	4b5e      	ldr	r3, [pc, #376]	; (1cebc <usart_init+0x258>)
   1cd42:	4798      	blx	r3
   1cd44:	0003      	movs	r3, r0
   1cd46:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   1cd48:	233b      	movs	r3, #59	; 0x3b
   1cd4a:	18fb      	adds	r3, r7, r3
   1cd4c:	781b      	ldrb	r3, [r3, #0]
   1cd4e:	2b00      	cmp	r3, #0
   1cd50:	d003      	beq.n	1cd5a <usart_init+0xf6>
		return status_code;
   1cd52:	233b      	movs	r3, #59	; 0x3b
   1cd54:	18fb      	adds	r3, r7, r3
   1cd56:	781b      	ldrb	r3, [r3, #0]
   1cd58:	e09f      	b.n	1ce9a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1cd5a:	2320      	movs	r3, #32
   1cd5c:	18fb      	adds	r3, r7, r3
   1cd5e:	0018      	movs	r0, r3
   1cd60:	4b57      	ldr	r3, [pc, #348]	; (1cec0 <usart_init+0x25c>)
   1cd62:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1cd64:	2320      	movs	r3, #32
   1cd66:	18fb      	adds	r3, r7, r3
   1cd68:	2200      	movs	r2, #0
   1cd6a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1cd6c:	2320      	movs	r3, #32
   1cd6e:	18fb      	adds	r3, r7, r3
   1cd70:	2200      	movs	r2, #0
   1cd72:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   1cd74:	687b      	ldr	r3, [r7, #4]
   1cd76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   1cd78:	2310      	movs	r3, #16
   1cd7a:	18fb      	adds	r3, r7, r3
   1cd7c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1cd7e:	687b      	ldr	r3, [r7, #4]
   1cd80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   1cd82:	2310      	movs	r3, #16
   1cd84:	18fb      	adds	r3, r7, r3
   1cd86:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   1cd88:	687b      	ldr	r3, [r7, #4]
   1cd8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   1cd8c:	2310      	movs	r3, #16
   1cd8e:	18fb      	adds	r3, r7, r3
   1cd90:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   1cd92:	687b      	ldr	r3, [r7, #4]
   1cd94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   1cd96:	2310      	movs	r3, #16
   1cd98:	18fb      	adds	r3, r7, r3
   1cd9a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1cd9c:	2347      	movs	r3, #71	; 0x47
   1cd9e:	18fb      	adds	r3, r7, r3
   1cda0:	2200      	movs	r2, #0
   1cda2:	701a      	strb	r2, [r3, #0]
   1cda4:	e02c      	b.n	1ce00 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1cda6:	2347      	movs	r3, #71	; 0x47
   1cda8:	18fb      	adds	r3, r7, r3
   1cdaa:	781a      	ldrb	r2, [r3, #0]
   1cdac:	2310      	movs	r3, #16
   1cdae:	18fb      	adds	r3, r7, r3
   1cdb0:	0092      	lsls	r2, r2, #2
   1cdb2:	58d3      	ldr	r3, [r2, r3]
   1cdb4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   1cdb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cdb8:	2b00      	cmp	r3, #0
   1cdba:	d109      	bne.n	1cdd0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1cdbc:	2347      	movs	r3, #71	; 0x47
   1cdbe:	18fb      	adds	r3, r7, r3
   1cdc0:	781a      	ldrb	r2, [r3, #0]
   1cdc2:	68bb      	ldr	r3, [r7, #8]
   1cdc4:	0011      	movs	r1, r2
   1cdc6:	0018      	movs	r0, r3
   1cdc8:	4b3e      	ldr	r3, [pc, #248]	; (1cec4 <usart_init+0x260>)
   1cdca:	4798      	blx	r3
   1cdcc:	0003      	movs	r3, r0
   1cdce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1cdd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cdd2:	3301      	adds	r3, #1
   1cdd4:	d00d      	beq.n	1cdf2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1cdd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cdd8:	b2da      	uxtb	r2, r3
   1cdda:	2320      	movs	r3, #32
   1cddc:	18fb      	adds	r3, r7, r3
   1cdde:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1cde0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cde2:	0c1b      	lsrs	r3, r3, #16
   1cde4:	b2db      	uxtb	r3, r3
   1cde6:	2220      	movs	r2, #32
   1cde8:	18ba      	adds	r2, r7, r2
   1cdea:	0011      	movs	r1, r2
   1cdec:	0018      	movs	r0, r3
   1cdee:	4b36      	ldr	r3, [pc, #216]	; (1cec8 <usart_init+0x264>)
   1cdf0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1cdf2:	2347      	movs	r3, #71	; 0x47
   1cdf4:	18fb      	adds	r3, r7, r3
   1cdf6:	781a      	ldrb	r2, [r3, #0]
   1cdf8:	2347      	movs	r3, #71	; 0x47
   1cdfa:	18fb      	adds	r3, r7, r3
   1cdfc:	3201      	adds	r2, #1
   1cdfe:	701a      	strb	r2, [r3, #0]
   1ce00:	2347      	movs	r3, #71	; 0x47
   1ce02:	18fb      	adds	r3, r7, r3
   1ce04:	781b      	ldrb	r3, [r3, #0]
   1ce06:	2b03      	cmp	r3, #3
   1ce08:	d9cd      	bls.n	1cda6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1ce0a:	2300      	movs	r3, #0
   1ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ce0e:	e00a      	b.n	1ce26 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   1ce10:	68fa      	ldr	r2, [r7, #12]
   1ce12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce14:	3302      	adds	r3, #2
   1ce16:	009b      	lsls	r3, r3, #2
   1ce18:	18d3      	adds	r3, r2, r3
   1ce1a:	3304      	adds	r3, #4
   1ce1c:	2200      	movs	r2, #0
   1ce1e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1ce20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce22:	3301      	adds	r3, #1
   1ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ce26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce28:	2b05      	cmp	r3, #5
   1ce2a:	d9f1      	bls.n	1ce10 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   1ce2c:	68fb      	ldr	r3, [r7, #12]
   1ce2e:	2200      	movs	r2, #0
   1ce30:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1ce32:	68fb      	ldr	r3, [r7, #12]
   1ce34:	2200      	movs	r2, #0
   1ce36:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1ce38:	68fb      	ldr	r3, [r7, #12]
   1ce3a:	2200      	movs	r2, #0
   1ce3c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1ce3e:	68fb      	ldr	r3, [r7, #12]
   1ce40:	2200      	movs	r2, #0
   1ce42:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1ce44:	68fb      	ldr	r3, [r7, #12]
   1ce46:	2230      	movs	r2, #48	; 0x30
   1ce48:	2100      	movs	r1, #0
   1ce4a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   1ce4c:	68fb      	ldr	r3, [r7, #12]
   1ce4e:	2231      	movs	r2, #49	; 0x31
   1ce50:	2100      	movs	r1, #0
   1ce52:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   1ce54:	68fb      	ldr	r3, [r7, #12]
   1ce56:	2232      	movs	r2, #50	; 0x32
   1ce58:	2100      	movs	r1, #0
   1ce5a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   1ce5c:	68fb      	ldr	r3, [r7, #12]
   1ce5e:	2233      	movs	r2, #51	; 0x33
   1ce60:	2100      	movs	r1, #0
   1ce62:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1ce64:	68fb      	ldr	r3, [r7, #12]
   1ce66:	681b      	ldr	r3, [r3, #0]
   1ce68:	2227      	movs	r2, #39	; 0x27
   1ce6a:	18bc      	adds	r4, r7, r2
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	4b0d      	ldr	r3, [pc, #52]	; (1cea4 <usart_init+0x240>)
   1ce70:	4798      	blx	r3
   1ce72:	0003      	movs	r3, r0
   1ce74:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1ce76:	4a15      	ldr	r2, [pc, #84]	; (1cecc <usart_init+0x268>)
   1ce78:	2327      	movs	r3, #39	; 0x27
   1ce7a:	18fb      	adds	r3, r7, r3
   1ce7c:	781b      	ldrb	r3, [r3, #0]
   1ce7e:	0011      	movs	r1, r2
   1ce80:	0018      	movs	r0, r3
   1ce82:	4b13      	ldr	r3, [pc, #76]	; (1ced0 <usart_init+0x26c>)
   1ce84:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1ce86:	2327      	movs	r3, #39	; 0x27
   1ce88:	18fb      	adds	r3, r7, r3
   1ce8a:	781a      	ldrb	r2, [r3, #0]
   1ce8c:	4b11      	ldr	r3, [pc, #68]	; (1ced4 <usart_init+0x270>)
   1ce8e:	0092      	lsls	r2, r2, #2
   1ce90:	68f9      	ldr	r1, [r7, #12]
   1ce92:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   1ce94:	233b      	movs	r3, #59	; 0x3b
   1ce96:	18fb      	adds	r3, r7, r3
   1ce98:	781b      	ldrb	r3, [r3, #0]
}
   1ce9a:	0018      	movs	r0, r3
   1ce9c:	46bd      	mov	sp, r7
   1ce9e:	b013      	add	sp, #76	; 0x4c
   1cea0:	bd90      	pop	{r4, r7, pc}
   1cea2:	46c0      	nop			; (mov r8, r8)
   1cea4:	0001c6e5 	.word	0x0001c6e5
   1cea8:	0001c8a1 	.word	0x0001c8a1
   1ceac:	0001c889 	.word	0x0001c889
   1ceb0:	0001dfc1 	.word	0x0001dfc1
   1ceb4:	0001e005 	.word	0x0001e005
   1ceb8:	0001c49d 	.word	0x0001c49d
   1cebc:	0001c989 	.word	0x0001c989
   1cec0:	0001c8fd 	.word	0x0001c8fd
   1cec4:	0001c529 	.word	0x0001c529
   1cec8:	0001e321 	.word	0x0001e321
   1cecc:	0001d141 	.word	0x0001d141
   1ced0:	0001c749 	.word	0x0001c749
   1ced4:	20004d40 	.word	0x20004d40

0001ced8 <system_interrupt_enter_critical_section>:
{
   1ced8:	b580      	push	{r7, lr}
   1ceda:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1cedc:	4b02      	ldr	r3, [pc, #8]	; (1cee8 <system_interrupt_enter_critical_section+0x10>)
   1cede:	4798      	blx	r3
}
   1cee0:	46c0      	nop			; (mov r8, r8)
   1cee2:	46bd      	mov	sp, r7
   1cee4:	bd80      	pop	{r7, pc}
   1cee6:	46c0      	nop			; (mov r8, r8)
   1cee8:	0001bad9 	.word	0x0001bad9

0001ceec <system_interrupt_leave_critical_section>:
{
   1ceec:	b580      	push	{r7, lr}
   1ceee:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1cef0:	4b02      	ldr	r3, [pc, #8]	; (1cefc <system_interrupt_leave_critical_section+0x10>)
   1cef2:	4798      	blx	r3
}
   1cef4:	46c0      	nop			; (mov r8, r8)
   1cef6:	46bd      	mov	sp, r7
   1cef8:	bd80      	pop	{r7, pc}
   1cefa:	46c0      	nop			; (mov r8, r8)
   1cefc:	0001bb2d 	.word	0x0001bb2d

0001cf00 <usart_is_syncing>:
{
   1cf00:	b580      	push	{r7, lr}
   1cf02:	b084      	sub	sp, #16
   1cf04:	af00      	add	r7, sp, #0
   1cf06:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cf08:	687b      	ldr	r3, [r7, #4]
   1cf0a:	681b      	ldr	r3, [r3, #0]
   1cf0c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1cf0e:	68fb      	ldr	r3, [r7, #12]
   1cf10:	69db      	ldr	r3, [r3, #28]
   1cf12:	1e5a      	subs	r2, r3, #1
   1cf14:	4193      	sbcs	r3, r2
   1cf16:	b2db      	uxtb	r3, r3
}
   1cf18:	0018      	movs	r0, r3
   1cf1a:	46bd      	mov	sp, r7
   1cf1c:	b004      	add	sp, #16
   1cf1e:	bd80      	pop	{r7, pc}

0001cf20 <_usart_wait_for_sync>:
{
   1cf20:	b580      	push	{r7, lr}
   1cf22:	b082      	sub	sp, #8
   1cf24:	af00      	add	r7, sp, #0
   1cf26:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1cf28:	46c0      	nop			; (mov r8, r8)
   1cf2a:	687b      	ldr	r3, [r7, #4]
   1cf2c:	0018      	movs	r0, r3
   1cf2e:	4b04      	ldr	r3, [pc, #16]	; (1cf40 <_usart_wait_for_sync+0x20>)
   1cf30:	4798      	blx	r3
   1cf32:	1e03      	subs	r3, r0, #0
   1cf34:	d1f9      	bne.n	1cf2a <_usart_wait_for_sync+0xa>
}
   1cf36:	46c0      	nop			; (mov r8, r8)
   1cf38:	46bd      	mov	sp, r7
   1cf3a:	b002      	add	sp, #8
   1cf3c:	bd80      	pop	{r7, pc}
   1cf3e:	46c0      	nop			; (mov r8, r8)
   1cf40:	0001cf01 	.word	0x0001cf01

0001cf44 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1cf44:	b580      	push	{r7, lr}
   1cf46:	b086      	sub	sp, #24
   1cf48:	af00      	add	r7, sp, #0
   1cf4a:	60f8      	str	r0, [r7, #12]
   1cf4c:	60b9      	str	r1, [r7, #8]
   1cf4e:	1dbb      	adds	r3, r7, #6
   1cf50:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cf52:	68fb      	ldr	r3, [r7, #12]
   1cf54:	681b      	ldr	r3, [r3, #0]
   1cf56:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   1cf58:	4b0f      	ldr	r3, [pc, #60]	; (1cf98 <_usart_write_buffer+0x54>)
   1cf5a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1cf5c:	68fb      	ldr	r3, [r7, #12]
   1cf5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1cf60:	b29b      	uxth	r3, r3
   1cf62:	2b00      	cmp	r3, #0
   1cf64:	d003      	beq.n	1cf6e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   1cf66:	4b0d      	ldr	r3, [pc, #52]	; (1cf9c <_usart_write_buffer+0x58>)
   1cf68:	4798      	blx	r3
		return STATUS_BUSY;
   1cf6a:	2305      	movs	r3, #5
   1cf6c:	e010      	b.n	1cf90 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   1cf6e:	68fb      	ldr	r3, [r7, #12]
   1cf70:	1dba      	adds	r2, r7, #6
   1cf72:	8812      	ldrh	r2, [r2, #0]
   1cf74:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   1cf76:	4b09      	ldr	r3, [pc, #36]	; (1cf9c <_usart_write_buffer+0x58>)
   1cf78:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   1cf7a:	68fb      	ldr	r3, [r7, #12]
   1cf7c:	68ba      	ldr	r2, [r7, #8]
   1cf7e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1cf80:	68fb      	ldr	r3, [r7, #12]
   1cf82:	2233      	movs	r2, #51	; 0x33
   1cf84:	2105      	movs	r1, #5
   1cf86:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1cf88:	697b      	ldr	r3, [r7, #20]
   1cf8a:	2201      	movs	r2, #1
   1cf8c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1cf8e:	2300      	movs	r3, #0
}
   1cf90:	0018      	movs	r0, r3
   1cf92:	46bd      	mov	sp, r7
   1cf94:	b006      	add	sp, #24
   1cf96:	bd80      	pop	{r7, pc}
   1cf98:	0001ced9 	.word	0x0001ced9
   1cf9c:	0001ceed 	.word	0x0001ceed

0001cfa0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1cfa0:	b580      	push	{r7, lr}
   1cfa2:	b086      	sub	sp, #24
   1cfa4:	af00      	add	r7, sp, #0
   1cfa6:	60f8      	str	r0, [r7, #12]
   1cfa8:	60b9      	str	r1, [r7, #8]
   1cfaa:	1dbb      	adds	r3, r7, #6
   1cfac:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cfae:	68fb      	ldr	r3, [r7, #12]
   1cfb0:	681b      	ldr	r3, [r3, #0]
   1cfb2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   1cfb4:	4b16      	ldr	r3, [pc, #88]	; (1d010 <_usart_read_buffer+0x70>)
   1cfb6:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1cfb8:	68fb      	ldr	r3, [r7, #12]
   1cfba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1cfbc:	b29b      	uxth	r3, r3
   1cfbe:	2b00      	cmp	r3, #0
   1cfc0:	d003      	beq.n	1cfca <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   1cfc2:	4b14      	ldr	r3, [pc, #80]	; (1d014 <_usart_read_buffer+0x74>)
   1cfc4:	4798      	blx	r3
		return STATUS_BUSY;
   1cfc6:	2305      	movs	r3, #5
   1cfc8:	e01e      	b.n	1d008 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   1cfca:	68fb      	ldr	r3, [r7, #12]
   1cfcc:	1dba      	adds	r2, r7, #6
   1cfce:	8812      	ldrh	r2, [r2, #0]
   1cfd0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   1cfd2:	4b10      	ldr	r3, [pc, #64]	; (1d014 <_usart_read_buffer+0x74>)
   1cfd4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   1cfd6:	68fb      	ldr	r3, [r7, #12]
   1cfd8:	68ba      	ldr	r2, [r7, #8]
   1cfda:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1cfdc:	68fb      	ldr	r3, [r7, #12]
   1cfde:	2232      	movs	r2, #50	; 0x32
   1cfe0:	2105      	movs	r1, #5
   1cfe2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1cfe4:	697b      	ldr	r3, [r7, #20]
   1cfe6:	2204      	movs	r2, #4
   1cfe8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   1cfea:	68fb      	ldr	r3, [r7, #12]
   1cfec:	7a1b      	ldrb	r3, [r3, #8]
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	d002      	beq.n	1cff8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1cff2:	697b      	ldr	r3, [r7, #20]
   1cff4:	2220      	movs	r2, #32
   1cff6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   1cff8:	68fb      	ldr	r3, [r7, #12]
   1cffa:	7a5b      	ldrb	r3, [r3, #9]
   1cffc:	2b00      	cmp	r3, #0
   1cffe:	d002      	beq.n	1d006 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1d000:	697b      	ldr	r3, [r7, #20]
   1d002:	2208      	movs	r2, #8
   1d004:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   1d006:	2300      	movs	r3, #0
}
   1d008:	0018      	movs	r0, r3
   1d00a:	46bd      	mov	sp, r7
   1d00c:	b006      	add	sp, #24
   1d00e:	bd80      	pop	{r7, pc}
   1d010:	0001ced9 	.word	0x0001ced9
   1d014:	0001ceed 	.word	0x0001ceed

0001d018 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   1d018:	b580      	push	{r7, lr}
   1d01a:	b084      	sub	sp, #16
   1d01c:	af00      	add	r7, sp, #0
   1d01e:	60f8      	str	r0, [r7, #12]
   1d020:	60b9      	str	r1, [r7, #8]
   1d022:	1dfb      	adds	r3, r7, #7
   1d024:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1d026:	1dfb      	adds	r3, r7, #7
   1d028:	781b      	ldrb	r3, [r3, #0]
   1d02a:	68fa      	ldr	r2, [r7, #12]
   1d02c:	3302      	adds	r3, #2
   1d02e:	009b      	lsls	r3, r3, #2
   1d030:	18d3      	adds	r3, r2, r3
   1d032:	3304      	adds	r3, #4
   1d034:	68ba      	ldr	r2, [r7, #8]
   1d036:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1d038:	68fb      	ldr	r3, [r7, #12]
   1d03a:	2230      	movs	r2, #48	; 0x30
   1d03c:	5c9b      	ldrb	r3, [r3, r2]
   1d03e:	b25a      	sxtb	r2, r3
   1d040:	1dfb      	adds	r3, r7, #7
   1d042:	781b      	ldrb	r3, [r3, #0]
   1d044:	2101      	movs	r1, #1
   1d046:	4099      	lsls	r1, r3
   1d048:	000b      	movs	r3, r1
   1d04a:	b25b      	sxtb	r3, r3
   1d04c:	4313      	orrs	r3, r2
   1d04e:	b25b      	sxtb	r3, r3
   1d050:	b2d9      	uxtb	r1, r3
   1d052:	68fb      	ldr	r3, [r7, #12]
   1d054:	2230      	movs	r2, #48	; 0x30
   1d056:	5499      	strb	r1, [r3, r2]
}
   1d058:	46c0      	nop			; (mov r8, r8)
   1d05a:	46bd      	mov	sp, r7
   1d05c:	b004      	add	sp, #16
   1d05e:	bd80      	pop	{r7, pc}

0001d060 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1d060:	b580      	push	{r7, lr}
   1d062:	b084      	sub	sp, #16
   1d064:	af00      	add	r7, sp, #0
   1d066:	60f8      	str	r0, [r7, #12]
   1d068:	60b9      	str	r1, [r7, #8]
   1d06a:	1dbb      	adds	r3, r7, #6
   1d06c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   1d06e:	1dbb      	adds	r3, r7, #6
   1d070:	881b      	ldrh	r3, [r3, #0]
   1d072:	2b00      	cmp	r3, #0
   1d074:	d101      	bne.n	1d07a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1d076:	2317      	movs	r3, #23
   1d078:	e010      	b.n	1d09c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   1d07a:	68fb      	ldr	r3, [r7, #12]
   1d07c:	79db      	ldrb	r3, [r3, #7]
   1d07e:	2201      	movs	r2, #1
   1d080:	4053      	eors	r3, r2
   1d082:	b2db      	uxtb	r3, r3
   1d084:	2b00      	cmp	r3, #0
   1d086:	d001      	beq.n	1d08c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   1d088:	231c      	movs	r3, #28
   1d08a:	e007      	b.n	1d09c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   1d08c:	1dbb      	adds	r3, r7, #6
   1d08e:	881a      	ldrh	r2, [r3, #0]
   1d090:	68b9      	ldr	r1, [r7, #8]
   1d092:	68fb      	ldr	r3, [r7, #12]
   1d094:	0018      	movs	r0, r3
   1d096:	4b03      	ldr	r3, [pc, #12]	; (1d0a4 <usart_write_buffer_job+0x44>)
   1d098:	4798      	blx	r3
   1d09a:	0003      	movs	r3, r0
}
   1d09c:	0018      	movs	r0, r3
   1d09e:	46bd      	mov	sp, r7
   1d0a0:	b004      	add	sp, #16
   1d0a2:	bd80      	pop	{r7, pc}
   1d0a4:	0001cf45 	.word	0x0001cf45

0001d0a8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1d0a8:	b580      	push	{r7, lr}
   1d0aa:	b084      	sub	sp, #16
   1d0ac:	af00      	add	r7, sp, #0
   1d0ae:	60f8      	str	r0, [r7, #12]
   1d0b0:	60b9      	str	r1, [r7, #8]
   1d0b2:	1dbb      	adds	r3, r7, #6
   1d0b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   1d0b6:	1dbb      	adds	r3, r7, #6
   1d0b8:	881b      	ldrh	r3, [r3, #0]
   1d0ba:	2b00      	cmp	r3, #0
   1d0bc:	d101      	bne.n	1d0c2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1d0be:	2317      	movs	r3, #23
   1d0c0:	e010      	b.n	1d0e4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   1d0c2:	68fb      	ldr	r3, [r7, #12]
   1d0c4:	799b      	ldrb	r3, [r3, #6]
   1d0c6:	2201      	movs	r2, #1
   1d0c8:	4053      	eors	r3, r2
   1d0ca:	b2db      	uxtb	r3, r3
   1d0cc:	2b00      	cmp	r3, #0
   1d0ce:	d001      	beq.n	1d0d4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   1d0d0:	231c      	movs	r3, #28
   1d0d2:	e007      	b.n	1d0e4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   1d0d4:	1dbb      	adds	r3, r7, #6
   1d0d6:	881a      	ldrh	r2, [r3, #0]
   1d0d8:	68b9      	ldr	r1, [r7, #8]
   1d0da:	68fb      	ldr	r3, [r7, #12]
   1d0dc:	0018      	movs	r0, r3
   1d0de:	4b03      	ldr	r3, [pc, #12]	; (1d0ec <usart_read_buffer_job+0x44>)
   1d0e0:	4798      	blx	r3
   1d0e2:	0003      	movs	r3, r0
}
   1d0e4:	0018      	movs	r0, r3
   1d0e6:	46bd      	mov	sp, r7
   1d0e8:	b004      	add	sp, #16
   1d0ea:	bd80      	pop	{r7, pc}
   1d0ec:	0001cfa1 	.word	0x0001cfa1

0001d0f0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   1d0f0:	b580      	push	{r7, lr}
   1d0f2:	b084      	sub	sp, #16
   1d0f4:	af00      	add	r7, sp, #0
   1d0f6:	6078      	str	r0, [r7, #4]
   1d0f8:	000a      	movs	r2, r1
   1d0fa:	1cfb      	adds	r3, r7, #3
   1d0fc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1d0fe:	1cfb      	adds	r3, r7, #3
   1d100:	781b      	ldrb	r3, [r3, #0]
   1d102:	2b00      	cmp	r3, #0
   1d104:	d002      	beq.n	1d10c <usart_get_job_status+0x1c>
   1d106:	2b01      	cmp	r3, #1
   1d108:	d007      	beq.n	1d11a <usart_get_job_status+0x2a>
   1d10a:	e00d      	b.n	1d128 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   1d10c:	230f      	movs	r3, #15
   1d10e:	18fb      	adds	r3, r7, r3
   1d110:	687a      	ldr	r2, [r7, #4]
   1d112:	2132      	movs	r1, #50	; 0x32
   1d114:	5c52      	ldrb	r2, [r2, r1]
   1d116:	701a      	strb	r2, [r3, #0]
			break;
   1d118:	e00b      	b.n	1d132 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   1d11a:	230f      	movs	r3, #15
   1d11c:	18fb      	adds	r3, r7, r3
   1d11e:	687a      	ldr	r2, [r7, #4]
   1d120:	2133      	movs	r1, #51	; 0x33
   1d122:	5c52      	ldrb	r2, [r2, r1]
   1d124:	701a      	strb	r2, [r3, #0]
			break;
   1d126:	e004      	b.n	1d132 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1d128:	230f      	movs	r3, #15
   1d12a:	18fb      	adds	r3, r7, r3
   1d12c:	2217      	movs	r2, #23
   1d12e:	701a      	strb	r2, [r3, #0]
			break;
   1d130:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   1d132:	230f      	movs	r3, #15
   1d134:	18fb      	adds	r3, r7, r3
   1d136:	781b      	ldrb	r3, [r3, #0]
}
   1d138:	0018      	movs	r0, r3
   1d13a:	46bd      	mov	sp, r7
   1d13c:	b004      	add	sp, #16
   1d13e:	bd80      	pop	{r7, pc}

0001d140 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1d140:	b580      	push	{r7, lr}
   1d142:	b088      	sub	sp, #32
   1d144:	af00      	add	r7, sp, #0
   1d146:	0002      	movs	r2, r0
   1d148:	1dfb      	adds	r3, r7, #7
   1d14a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   1d14c:	1dfb      	adds	r3, r7, #7
   1d14e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   1d150:	4ba3      	ldr	r3, [pc, #652]	; (1d3e0 <_usart_interrupt_handler+0x2a0>)
   1d152:	0092      	lsls	r2, r2, #2
   1d154:	58d3      	ldr	r3, [r2, r3]
   1d156:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1d158:	69bb      	ldr	r3, [r7, #24]
   1d15a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   1d15c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   1d15e:	69bb      	ldr	r3, [r7, #24]
   1d160:	0018      	movs	r0, r3
   1d162:	4ba0      	ldr	r3, [pc, #640]	; (1d3e4 <_usart_interrupt_handler+0x2a4>)
   1d164:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1d166:	697b      	ldr	r3, [r7, #20]
   1d168:	7e1b      	ldrb	r3, [r3, #24]
   1d16a:	b2da      	uxtb	r2, r3
   1d16c:	2312      	movs	r3, #18
   1d16e:	18fb      	adds	r3, r7, r3
   1d170:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1d172:	697b      	ldr	r3, [r7, #20]
   1d174:	7d9b      	ldrb	r3, [r3, #22]
   1d176:	b2db      	uxtb	r3, r3
   1d178:	b29a      	uxth	r2, r3
   1d17a:	2312      	movs	r3, #18
   1d17c:	18fb      	adds	r3, r7, r3
   1d17e:	2112      	movs	r1, #18
   1d180:	1879      	adds	r1, r7, r1
   1d182:	8809      	ldrh	r1, [r1, #0]
   1d184:	400a      	ands	r2, r1
   1d186:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   1d188:	69bb      	ldr	r3, [r7, #24]
   1d18a:	2230      	movs	r2, #48	; 0x30
   1d18c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1d18e:	69ba      	ldr	r2, [r7, #24]
   1d190:	2131      	movs	r1, #49	; 0x31
   1d192:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   1d194:	4013      	ands	r3, r2
   1d196:	b2da      	uxtb	r2, r3
   1d198:	2310      	movs	r3, #16
   1d19a:	18fb      	adds	r3, r7, r3
   1d19c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1d19e:	2312      	movs	r3, #18
   1d1a0:	18fb      	adds	r3, r7, r3
   1d1a2:	881b      	ldrh	r3, [r3, #0]
   1d1a4:	2201      	movs	r2, #1
   1d1a6:	4013      	ands	r3, r2
   1d1a8:	d044      	beq.n	1d234 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   1d1aa:	69bb      	ldr	r3, [r7, #24]
   1d1ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1d1ae:	b29b      	uxth	r3, r3
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d03c      	beq.n	1d22e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1d1b4:	69bb      	ldr	r3, [r7, #24]
   1d1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1b8:	781b      	ldrb	r3, [r3, #0]
   1d1ba:	b2da      	uxtb	r2, r3
   1d1bc:	231c      	movs	r3, #28
   1d1be:	18fb      	adds	r3, r7, r3
   1d1c0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1d1c2:	69bb      	ldr	r3, [r7, #24]
   1d1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1c6:	1c5a      	adds	r2, r3, #1
   1d1c8:	69bb      	ldr	r3, [r7, #24]
   1d1ca:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1d1cc:	69bb      	ldr	r3, [r7, #24]
   1d1ce:	795b      	ldrb	r3, [r3, #5]
   1d1d0:	2b01      	cmp	r3, #1
   1d1d2:	d113      	bne.n	1d1fc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1d1d4:	69bb      	ldr	r3, [r7, #24]
   1d1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1d8:	781b      	ldrb	r3, [r3, #0]
   1d1da:	b2db      	uxtb	r3, r3
   1d1dc:	021b      	lsls	r3, r3, #8
   1d1de:	b21a      	sxth	r2, r3
   1d1e0:	231c      	movs	r3, #28
   1d1e2:	18fb      	adds	r3, r7, r3
   1d1e4:	2100      	movs	r1, #0
   1d1e6:	5e5b      	ldrsh	r3, [r3, r1]
   1d1e8:	4313      	orrs	r3, r2
   1d1ea:	b21a      	sxth	r2, r3
   1d1ec:	231c      	movs	r3, #28
   1d1ee:	18fb      	adds	r3, r7, r3
   1d1f0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1d1f2:	69bb      	ldr	r3, [r7, #24]
   1d1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d1f6:	1c5a      	adds	r2, r3, #1
   1d1f8:	69bb      	ldr	r3, [r7, #24]
   1d1fa:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1d1fc:	231c      	movs	r3, #28
   1d1fe:	18fb      	adds	r3, r7, r3
   1d200:	881b      	ldrh	r3, [r3, #0]
   1d202:	05db      	lsls	r3, r3, #23
   1d204:	0ddb      	lsrs	r3, r3, #23
   1d206:	b29a      	uxth	r2, r3
   1d208:	697b      	ldr	r3, [r7, #20]
   1d20a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1d20c:	69bb      	ldr	r3, [r7, #24]
   1d20e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1d210:	b29b      	uxth	r3, r3
   1d212:	3b01      	subs	r3, #1
   1d214:	b29b      	uxth	r3, r3
   1d216:	69ba      	ldr	r2, [r7, #24]
   1d218:	1c19      	adds	r1, r3, #0
   1d21a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   1d21c:	2b00      	cmp	r3, #0
   1d21e:	d109      	bne.n	1d234 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1d220:	697b      	ldr	r3, [r7, #20]
   1d222:	2201      	movs	r2, #1
   1d224:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1d226:	697b      	ldr	r3, [r7, #20]
   1d228:	2202      	movs	r2, #2
   1d22a:	759a      	strb	r2, [r3, #22]
   1d22c:	e002      	b.n	1d234 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1d22e:	697b      	ldr	r3, [r7, #20]
   1d230:	2201      	movs	r2, #1
   1d232:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1d234:	2312      	movs	r3, #18
   1d236:	18fb      	adds	r3, r7, r3
   1d238:	881b      	ldrh	r3, [r3, #0]
   1d23a:	2202      	movs	r2, #2
   1d23c:	4013      	ands	r3, r2
   1d23e:	d011      	beq.n	1d264 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1d240:	697b      	ldr	r3, [r7, #20]
   1d242:	2202      	movs	r2, #2
   1d244:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   1d246:	69bb      	ldr	r3, [r7, #24]
   1d248:	2233      	movs	r2, #51	; 0x33
   1d24a:	2100      	movs	r1, #0
   1d24c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1d24e:	2310      	movs	r3, #16
   1d250:	18fb      	adds	r3, r7, r3
   1d252:	881b      	ldrh	r3, [r3, #0]
   1d254:	2201      	movs	r2, #1
   1d256:	4013      	ands	r3, r2
   1d258:	d004      	beq.n	1d264 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1d25a:	69bb      	ldr	r3, [r7, #24]
   1d25c:	68db      	ldr	r3, [r3, #12]
   1d25e:	69ba      	ldr	r2, [r7, #24]
   1d260:	0010      	movs	r0, r2
   1d262:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1d264:	2312      	movs	r3, #18
   1d266:	18fb      	adds	r3, r7, r3
   1d268:	881b      	ldrh	r3, [r3, #0]
   1d26a:	2204      	movs	r2, #4
   1d26c:	4013      	ands	r3, r2
   1d26e:	d100      	bne.n	1d272 <_usart_interrupt_handler+0x132>
   1d270:	e0bd      	b.n	1d3ee <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1d272:	69bb      	ldr	r3, [r7, #24]
   1d274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1d276:	b29b      	uxth	r3, r3
   1d278:	2b00      	cmp	r3, #0
   1d27a:	d100      	bne.n	1d27e <_usart_interrupt_handler+0x13e>
   1d27c:	e0b4      	b.n	1d3e8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1d27e:	697b      	ldr	r3, [r7, #20]
   1d280:	8b5b      	ldrh	r3, [r3, #26]
   1d282:	b29b      	uxth	r3, r3
   1d284:	b2da      	uxtb	r2, r3
   1d286:	231f      	movs	r3, #31
   1d288:	18fb      	adds	r3, r7, r3
   1d28a:	213f      	movs	r1, #63	; 0x3f
   1d28c:	400a      	ands	r2, r1
   1d28e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1d290:	231f      	movs	r3, #31
   1d292:	18fb      	adds	r3, r7, r3
   1d294:	781b      	ldrb	r3, [r3, #0]
   1d296:	2208      	movs	r2, #8
   1d298:	4013      	ands	r3, r2
   1d29a:	d007      	beq.n	1d2ac <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1d29c:	231f      	movs	r3, #31
   1d29e:	18fb      	adds	r3, r7, r3
   1d2a0:	221f      	movs	r2, #31
   1d2a2:	18ba      	adds	r2, r7, r2
   1d2a4:	7812      	ldrb	r2, [r2, #0]
   1d2a6:	2108      	movs	r1, #8
   1d2a8:	438a      	bics	r2, r1
   1d2aa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1d2ac:	231f      	movs	r3, #31
   1d2ae:	18fb      	adds	r3, r7, r3
   1d2b0:	781b      	ldrb	r3, [r3, #0]
   1d2b2:	2b00      	cmp	r3, #0
   1d2b4:	d050      	beq.n	1d358 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1d2b6:	231f      	movs	r3, #31
   1d2b8:	18fb      	adds	r3, r7, r3
   1d2ba:	781b      	ldrb	r3, [r3, #0]
   1d2bc:	2202      	movs	r2, #2
   1d2be:	4013      	ands	r3, r2
   1d2c0:	d007      	beq.n	1d2d2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1d2c2:	69bb      	ldr	r3, [r7, #24]
   1d2c4:	2232      	movs	r2, #50	; 0x32
   1d2c6:	211a      	movs	r1, #26
   1d2c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1d2ca:	697b      	ldr	r3, [r7, #20]
   1d2cc:	2202      	movs	r2, #2
   1d2ce:	835a      	strh	r2, [r3, #26]
   1d2d0:	e036      	b.n	1d340 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1d2d2:	231f      	movs	r3, #31
   1d2d4:	18fb      	adds	r3, r7, r3
   1d2d6:	781b      	ldrb	r3, [r3, #0]
   1d2d8:	2204      	movs	r2, #4
   1d2da:	4013      	ands	r3, r2
   1d2dc:	d007      	beq.n	1d2ee <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1d2de:	69bb      	ldr	r3, [r7, #24]
   1d2e0:	2232      	movs	r2, #50	; 0x32
   1d2e2:	211e      	movs	r1, #30
   1d2e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1d2e6:	697b      	ldr	r3, [r7, #20]
   1d2e8:	2204      	movs	r2, #4
   1d2ea:	835a      	strh	r2, [r3, #26]
   1d2ec:	e028      	b.n	1d340 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1d2ee:	231f      	movs	r3, #31
   1d2f0:	18fb      	adds	r3, r7, r3
   1d2f2:	781b      	ldrb	r3, [r3, #0]
   1d2f4:	2201      	movs	r2, #1
   1d2f6:	4013      	ands	r3, r2
   1d2f8:	d007      	beq.n	1d30a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   1d2fa:	69bb      	ldr	r3, [r7, #24]
   1d2fc:	2232      	movs	r2, #50	; 0x32
   1d2fe:	2113      	movs	r1, #19
   1d300:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1d302:	697b      	ldr	r3, [r7, #20]
   1d304:	2201      	movs	r2, #1
   1d306:	835a      	strh	r2, [r3, #26]
   1d308:	e01a      	b.n	1d340 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1d30a:	231f      	movs	r3, #31
   1d30c:	18fb      	adds	r3, r7, r3
   1d30e:	781b      	ldrb	r3, [r3, #0]
   1d310:	2210      	movs	r2, #16
   1d312:	4013      	ands	r3, r2
   1d314:	d007      	beq.n	1d326 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   1d316:	69bb      	ldr	r3, [r7, #24]
   1d318:	2232      	movs	r2, #50	; 0x32
   1d31a:	2142      	movs	r1, #66	; 0x42
   1d31c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1d31e:	697b      	ldr	r3, [r7, #20]
   1d320:	2210      	movs	r2, #16
   1d322:	835a      	strh	r2, [r3, #26]
   1d324:	e00c      	b.n	1d340 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1d326:	231f      	movs	r3, #31
   1d328:	18fb      	adds	r3, r7, r3
   1d32a:	781b      	ldrb	r3, [r3, #0]
   1d32c:	2220      	movs	r2, #32
   1d32e:	4013      	ands	r3, r2
   1d330:	d006      	beq.n	1d340 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1d332:	69bb      	ldr	r3, [r7, #24]
   1d334:	2232      	movs	r2, #50	; 0x32
   1d336:	2141      	movs	r1, #65	; 0x41
   1d338:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1d33a:	697b      	ldr	r3, [r7, #20]
   1d33c:	2220      	movs	r2, #32
   1d33e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   1d340:	2310      	movs	r3, #16
   1d342:	18fb      	adds	r3, r7, r3
   1d344:	881b      	ldrh	r3, [r3, #0]
   1d346:	2204      	movs	r2, #4
   1d348:	4013      	ands	r3, r2
				if (callback_status
   1d34a:	d050      	beq.n	1d3ee <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1d34c:	69bb      	ldr	r3, [r7, #24]
   1d34e:	695b      	ldr	r3, [r3, #20]
   1d350:	69ba      	ldr	r2, [r7, #24]
   1d352:	0010      	movs	r0, r2
   1d354:	4798      	blx	r3
   1d356:	e04a      	b.n	1d3ee <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1d358:	697b      	ldr	r3, [r7, #20]
   1d35a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   1d35c:	b29a      	uxth	r2, r3
   1d35e:	230e      	movs	r3, #14
   1d360:	18fb      	adds	r3, r7, r3
   1d362:	05d2      	lsls	r2, r2, #23
   1d364:	0dd2      	lsrs	r2, r2, #23
   1d366:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1d368:	69bb      	ldr	r3, [r7, #24]
   1d36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d36c:	220e      	movs	r2, #14
   1d36e:	18ba      	adds	r2, r7, r2
   1d370:	8812      	ldrh	r2, [r2, #0]
   1d372:	b2d2      	uxtb	r2, r2
   1d374:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1d376:	69bb      	ldr	r3, [r7, #24]
   1d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d37a:	1c5a      	adds	r2, r3, #1
   1d37c:	69bb      	ldr	r3, [r7, #24]
   1d37e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1d380:	69bb      	ldr	r3, [r7, #24]
   1d382:	795b      	ldrb	r3, [r3, #5]
   1d384:	2b01      	cmp	r3, #1
   1d386:	d10d      	bne.n	1d3a4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1d388:	69bb      	ldr	r3, [r7, #24]
   1d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d38c:	220e      	movs	r2, #14
   1d38e:	18ba      	adds	r2, r7, r2
   1d390:	8812      	ldrh	r2, [r2, #0]
   1d392:	0a12      	lsrs	r2, r2, #8
   1d394:	b292      	uxth	r2, r2
   1d396:	b2d2      	uxtb	r2, r2
   1d398:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   1d39a:	69bb      	ldr	r3, [r7, #24]
   1d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d39e:	1c5a      	adds	r2, r3, #1
   1d3a0:	69bb      	ldr	r3, [r7, #24]
   1d3a2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1d3a4:	69bb      	ldr	r3, [r7, #24]
   1d3a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1d3a8:	b29b      	uxth	r3, r3
   1d3aa:	3b01      	subs	r3, #1
   1d3ac:	b29b      	uxth	r3, r3
   1d3ae:	69ba      	ldr	r2, [r7, #24]
   1d3b0:	1c19      	adds	r1, r3, #0
   1d3b2:	8591      	strh	r1, [r2, #44]	; 0x2c
   1d3b4:	2b00      	cmp	r3, #0
   1d3b6:	d11a      	bne.n	1d3ee <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1d3b8:	697b      	ldr	r3, [r7, #20]
   1d3ba:	2204      	movs	r2, #4
   1d3bc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1d3be:	69bb      	ldr	r3, [r7, #24]
   1d3c0:	2232      	movs	r2, #50	; 0x32
   1d3c2:	2100      	movs	r1, #0
   1d3c4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   1d3c6:	2310      	movs	r3, #16
   1d3c8:	18fb      	adds	r3, r7, r3
   1d3ca:	881b      	ldrh	r3, [r3, #0]
   1d3cc:	2202      	movs	r2, #2
   1d3ce:	4013      	ands	r3, r2
					if (callback_status
   1d3d0:	d00d      	beq.n	1d3ee <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1d3d2:	69bb      	ldr	r3, [r7, #24]
   1d3d4:	691b      	ldr	r3, [r3, #16]
   1d3d6:	69ba      	ldr	r2, [r7, #24]
   1d3d8:	0010      	movs	r0, r2
   1d3da:	4798      	blx	r3
   1d3dc:	e007      	b.n	1d3ee <_usart_interrupt_handler+0x2ae>
   1d3de:	46c0      	nop			; (mov r8, r8)
   1d3e0:	20004d40 	.word	0x20004d40
   1d3e4:	0001cf21 	.word	0x0001cf21
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1d3e8:	697b      	ldr	r3, [r7, #20]
   1d3ea:	2204      	movs	r2, #4
   1d3ec:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1d3ee:	2312      	movs	r3, #18
   1d3f0:	18fb      	adds	r3, r7, r3
   1d3f2:	881b      	ldrh	r3, [r3, #0]
   1d3f4:	2210      	movs	r2, #16
   1d3f6:	4013      	ands	r3, r2
   1d3f8:	d010      	beq.n	1d41c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1d3fa:	697b      	ldr	r3, [r7, #20]
   1d3fc:	2210      	movs	r2, #16
   1d3fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1d400:	697b      	ldr	r3, [r7, #20]
   1d402:	2210      	movs	r2, #16
   1d404:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1d406:	2310      	movs	r3, #16
   1d408:	18fb      	adds	r3, r7, r3
   1d40a:	881b      	ldrh	r3, [r3, #0]
   1d40c:	2210      	movs	r2, #16
   1d40e:	4013      	ands	r3, r2
   1d410:	d004      	beq.n	1d41c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1d412:	69bb      	ldr	r3, [r7, #24]
   1d414:	69db      	ldr	r3, [r3, #28]
   1d416:	69ba      	ldr	r2, [r7, #24]
   1d418:	0010      	movs	r0, r2
   1d41a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1d41c:	2312      	movs	r3, #18
   1d41e:	18fb      	adds	r3, r7, r3
   1d420:	881b      	ldrh	r3, [r3, #0]
   1d422:	2220      	movs	r2, #32
   1d424:	4013      	ands	r3, r2
   1d426:	d010      	beq.n	1d44a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1d428:	697b      	ldr	r3, [r7, #20]
   1d42a:	2220      	movs	r2, #32
   1d42c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1d42e:	697b      	ldr	r3, [r7, #20]
   1d430:	2220      	movs	r2, #32
   1d432:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1d434:	2310      	movs	r3, #16
   1d436:	18fb      	adds	r3, r7, r3
   1d438:	881b      	ldrh	r3, [r3, #0]
   1d43a:	2208      	movs	r2, #8
   1d43c:	4013      	ands	r3, r2
   1d43e:	d004      	beq.n	1d44a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1d440:	69bb      	ldr	r3, [r7, #24]
   1d442:	699b      	ldr	r3, [r3, #24]
   1d444:	69ba      	ldr	r2, [r7, #24]
   1d446:	0010      	movs	r0, r2
   1d448:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1d44a:	2312      	movs	r3, #18
   1d44c:	18fb      	adds	r3, r7, r3
   1d44e:	881b      	ldrh	r3, [r3, #0]
   1d450:	2208      	movs	r2, #8
   1d452:	4013      	ands	r3, r2
   1d454:	d010      	beq.n	1d478 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1d456:	697b      	ldr	r3, [r7, #20]
   1d458:	2208      	movs	r2, #8
   1d45a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1d45c:	697b      	ldr	r3, [r7, #20]
   1d45e:	2208      	movs	r2, #8
   1d460:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1d462:	2310      	movs	r3, #16
   1d464:	18fb      	adds	r3, r7, r3
   1d466:	881b      	ldrh	r3, [r3, #0]
   1d468:	2220      	movs	r2, #32
   1d46a:	4013      	ands	r3, r2
   1d46c:	d004      	beq.n	1d478 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1d46e:	69bb      	ldr	r3, [r7, #24]
   1d470:	6a1b      	ldr	r3, [r3, #32]
   1d472:	69ba      	ldr	r2, [r7, #24]
   1d474:	0010      	movs	r0, r2
   1d476:	4798      	blx	r3
		}
	}
#endif
}
   1d478:	46c0      	nop			; (mov r8, r8)
   1d47a:	46bd      	mov	sp, r7
   1d47c:	b008      	add	sp, #32
   1d47e:	bd80      	pop	{r7, pc}

0001d480 <system_gclk_gen_get_config_defaults>:
{
   1d480:	b580      	push	{r7, lr}
   1d482:	b082      	sub	sp, #8
   1d484:	af00      	add	r7, sp, #0
   1d486:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   1d488:	687b      	ldr	r3, [r7, #4]
   1d48a:	2201      	movs	r2, #1
   1d48c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1d48e:	687b      	ldr	r3, [r7, #4]
   1d490:	2200      	movs	r2, #0
   1d492:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1d494:	687b      	ldr	r3, [r7, #4]
   1d496:	2206      	movs	r2, #6
   1d498:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1d49a:	687b      	ldr	r3, [r7, #4]
   1d49c:	2200      	movs	r2, #0
   1d49e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1d4a0:	687b      	ldr	r3, [r7, #4]
   1d4a2:	2200      	movs	r2, #0
   1d4a4:	725a      	strb	r2, [r3, #9]
}
   1d4a6:	46c0      	nop			; (mov r8, r8)
   1d4a8:	46bd      	mov	sp, r7
   1d4aa:	b002      	add	sp, #8
   1d4ac:	bd80      	pop	{r7, pc}

0001d4ae <system_gclk_chan_get_config_defaults>:
{
   1d4ae:	b580      	push	{r7, lr}
   1d4b0:	b082      	sub	sp, #8
   1d4b2:	af00      	add	r7, sp, #0
   1d4b4:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1d4b6:	687b      	ldr	r3, [r7, #4]
   1d4b8:	2200      	movs	r2, #0
   1d4ba:	701a      	strb	r2, [r3, #0]
}
   1d4bc:	46c0      	nop			; (mov r8, r8)
   1d4be:	46bd      	mov	sp, r7
   1d4c0:	b002      	add	sp, #8
   1d4c2:	bd80      	pop	{r7, pc}

0001d4c4 <system_clock_source_osc8m_get_config_defaults>:
{
   1d4c4:	b580      	push	{r7, lr}
   1d4c6:	b082      	sub	sp, #8
   1d4c8:	af00      	add	r7, sp, #0
   1d4ca:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   1d4cc:	687b      	ldr	r3, [r7, #4]
   1d4ce:	2203      	movs	r2, #3
   1d4d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   1d4d2:	687b      	ldr	r3, [r7, #4]
   1d4d4:	2200      	movs	r2, #0
   1d4d6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   1d4d8:	687b      	ldr	r3, [r7, #4]
   1d4da:	2201      	movs	r2, #1
   1d4dc:	709a      	strb	r2, [r3, #2]
}
   1d4de:	46c0      	nop			; (mov r8, r8)
   1d4e0:	46bd      	mov	sp, r7
   1d4e2:	b002      	add	sp, #8
   1d4e4:	bd80      	pop	{r7, pc}
	...

0001d4e8 <system_cpu_clock_set_divider>:
{
   1d4e8:	b580      	push	{r7, lr}
   1d4ea:	b082      	sub	sp, #8
   1d4ec:	af00      	add	r7, sp, #0
   1d4ee:	0002      	movs	r2, r0
   1d4f0:	1dfb      	adds	r3, r7, #7
   1d4f2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   1d4f4:	4a03      	ldr	r2, [pc, #12]	; (1d504 <system_cpu_clock_set_divider+0x1c>)
   1d4f6:	1dfb      	adds	r3, r7, #7
   1d4f8:	781b      	ldrb	r3, [r3, #0]
   1d4fa:	7213      	strb	r3, [r2, #8]
}
   1d4fc:	46c0      	nop			; (mov r8, r8)
   1d4fe:	46bd      	mov	sp, r7
   1d500:	b002      	add	sp, #8
   1d502:	bd80      	pop	{r7, pc}
   1d504:	40000400 	.word	0x40000400

0001d508 <system_apb_clock_set_divider>:
{
   1d508:	b580      	push	{r7, lr}
   1d50a:	b082      	sub	sp, #8
   1d50c:	af00      	add	r7, sp, #0
   1d50e:	0002      	movs	r2, r0
   1d510:	1dfb      	adds	r3, r7, #7
   1d512:	701a      	strb	r2, [r3, #0]
   1d514:	1dbb      	adds	r3, r7, #6
   1d516:	1c0a      	adds	r2, r1, #0
   1d518:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1d51a:	1dfb      	adds	r3, r7, #7
   1d51c:	781b      	ldrb	r3, [r3, #0]
   1d51e:	2b01      	cmp	r3, #1
   1d520:	d008      	beq.n	1d534 <system_apb_clock_set_divider+0x2c>
   1d522:	2b02      	cmp	r3, #2
   1d524:	d00b      	beq.n	1d53e <system_apb_clock_set_divider+0x36>
   1d526:	2b00      	cmp	r3, #0
   1d528:	d10e      	bne.n	1d548 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   1d52a:	4a0b      	ldr	r2, [pc, #44]	; (1d558 <system_apb_clock_set_divider+0x50>)
   1d52c:	1dbb      	adds	r3, r7, #6
   1d52e:	781b      	ldrb	r3, [r3, #0]
   1d530:	7253      	strb	r3, [r2, #9]
			break;
   1d532:	e00b      	b.n	1d54c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   1d534:	4a08      	ldr	r2, [pc, #32]	; (1d558 <system_apb_clock_set_divider+0x50>)
   1d536:	1dbb      	adds	r3, r7, #6
   1d538:	781b      	ldrb	r3, [r3, #0]
   1d53a:	7293      	strb	r3, [r2, #10]
			break;
   1d53c:	e006      	b.n	1d54c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   1d53e:	4a06      	ldr	r2, [pc, #24]	; (1d558 <system_apb_clock_set_divider+0x50>)
   1d540:	1dbb      	adds	r3, r7, #6
   1d542:	781b      	ldrb	r3, [r3, #0]
   1d544:	72d3      	strb	r3, [r2, #11]
			break;
   1d546:	e001      	b.n	1d54c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   1d548:	2317      	movs	r3, #23
   1d54a:	e000      	b.n	1d54e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   1d54c:	2300      	movs	r3, #0
}
   1d54e:	0018      	movs	r0, r3
   1d550:	46bd      	mov	sp, r7
   1d552:	b002      	add	sp, #8
   1d554:	bd80      	pop	{r7, pc}
   1d556:	46c0      	nop			; (mov r8, r8)
   1d558:	40000400 	.word	0x40000400

0001d55c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   1d55c:	b580      	push	{r7, lr}
   1d55e:	b082      	sub	sp, #8
   1d560:	af00      	add	r7, sp, #0
   1d562:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   1d564:	687b      	ldr	r3, [r7, #4]
   1d566:	2201      	movs	r2, #1
   1d568:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   1d56a:	687b      	ldr	r3, [r7, #4]
   1d56c:	2200      	movs	r2, #0
   1d56e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   1d570:	687b      	ldr	r3, [r7, #4]
   1d572:	2200      	movs	r2, #0
   1d574:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   1d576:	687b      	ldr	r3, [r7, #4]
   1d578:	2200      	movs	r2, #0
   1d57a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   1d57c:	687b      	ldr	r3, [r7, #4]
   1d57e:	2200      	movs	r2, #0
   1d580:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   1d582:	687b      	ldr	r3, [r7, #4]
   1d584:	4a0a      	ldr	r2, [pc, #40]	; (1d5b0 <system_clock_source_dpll_get_config_defaults+0x54>)
   1d586:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   1d588:	687b      	ldr	r3, [r7, #4]
   1d58a:	2280      	movs	r2, #128	; 0x80
   1d58c:	0212      	lsls	r2, r2, #8
   1d58e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   1d590:	687b      	ldr	r3, [r7, #4]
   1d592:	2201      	movs	r2, #1
   1d594:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   1d596:	687b      	ldr	r3, [r7, #4]
   1d598:	2200      	movs	r2, #0
   1d59a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1d59c:	687b      	ldr	r3, [r7, #4]
   1d59e:	2200      	movs	r2, #0
   1d5a0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1d5a2:	687b      	ldr	r3, [r7, #4]
   1d5a4:	2200      	movs	r2, #0
   1d5a6:	749a      	strb	r2, [r3, #18]
};
   1d5a8:	46c0      	nop			; (mov r8, r8)
   1d5aa:	46bd      	mov	sp, r7
   1d5ac:	b002      	add	sp, #8
   1d5ae:	bd80      	pop	{r7, pc}
   1d5b0:	02dc6c00 	.word	0x02dc6c00

0001d5b4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   1d5b4:	b580      	push	{r7, lr}
   1d5b6:	b082      	sub	sp, #8
   1d5b8:	af00      	add	r7, sp, #0
   1d5ba:	0002      	movs	r2, r0
   1d5bc:	1dfb      	adds	r3, r7, #7
   1d5be:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1d5c0:	4a08      	ldr	r2, [pc, #32]	; (1d5e4 <system_flash_set_waitstates+0x30>)
   1d5c2:	1dfb      	adds	r3, r7, #7
   1d5c4:	781b      	ldrb	r3, [r3, #0]
   1d5c6:	210f      	movs	r1, #15
   1d5c8:	400b      	ands	r3, r1
   1d5ca:	b2d9      	uxtb	r1, r3
   1d5cc:	6853      	ldr	r3, [r2, #4]
   1d5ce:	200f      	movs	r0, #15
   1d5d0:	4001      	ands	r1, r0
   1d5d2:	0049      	lsls	r1, r1, #1
   1d5d4:	201e      	movs	r0, #30
   1d5d6:	4383      	bics	r3, r0
   1d5d8:	430b      	orrs	r3, r1
   1d5da:	6053      	str	r3, [r2, #4]
}
   1d5dc:	46c0      	nop			; (mov r8, r8)
   1d5de:	46bd      	mov	sp, r7
   1d5e0:	b002      	add	sp, #8
   1d5e2:	bd80      	pop	{r7, pc}
   1d5e4:	41004000 	.word	0x41004000

0001d5e8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   1d5e8:	b580      	push	{r7, lr}
   1d5ea:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1d5ec:	46c0      	nop			; (mov r8, r8)
   1d5ee:	4b04      	ldr	r3, [pc, #16]	; (1d600 <_system_dfll_wait_for_sync+0x18>)
   1d5f0:	68db      	ldr	r3, [r3, #12]
   1d5f2:	2210      	movs	r2, #16
   1d5f4:	4013      	ands	r3, r2
   1d5f6:	d0fa      	beq.n	1d5ee <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   1d5f8:	46c0      	nop			; (mov r8, r8)
   1d5fa:	46bd      	mov	sp, r7
   1d5fc:	bd80      	pop	{r7, pc}
   1d5fe:	46c0      	nop			; (mov r8, r8)
   1d600:	40000800 	.word	0x40000800

0001d604 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   1d604:	b580      	push	{r7, lr}
   1d606:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1d608:	4b0c      	ldr	r3, [pc, #48]	; (1d63c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1d60a:	2202      	movs	r2, #2
   1d60c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1d60e:	4b0c      	ldr	r3, [pc, #48]	; (1d640 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1d610:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1d612:	4a0a      	ldr	r2, [pc, #40]	; (1d63c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1d614:	4b0b      	ldr	r3, [pc, #44]	; (1d644 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1d616:	689b      	ldr	r3, [r3, #8]
   1d618:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1d61a:	4a08      	ldr	r2, [pc, #32]	; (1d63c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1d61c:	4b09      	ldr	r3, [pc, #36]	; (1d644 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1d61e:	685b      	ldr	r3, [r3, #4]
   1d620:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   1d622:	4b06      	ldr	r3, [pc, #24]	; (1d63c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1d624:	2200      	movs	r2, #0
   1d626:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1d628:	4b05      	ldr	r3, [pc, #20]	; (1d640 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1d62a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1d62c:	4a03      	ldr	r2, [pc, #12]	; (1d63c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1d62e:	4b05      	ldr	r3, [pc, #20]	; (1d644 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1d630:	681b      	ldr	r3, [r3, #0]
   1d632:	b29b      	uxth	r3, r3
   1d634:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1d636:	46c0      	nop			; (mov r8, r8)
   1d638:	46bd      	mov	sp, r7
   1d63a:	bd80      	pop	{r7, pc}
   1d63c:	40000800 	.word	0x40000800
   1d640:	0001d5e9 	.word	0x0001d5e9
   1d644:	20003aa4 	.word	0x20003aa4

0001d648 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1d648:	b580      	push	{r7, lr}
   1d64a:	b082      	sub	sp, #8
   1d64c:	af00      	add	r7, sp, #0
   1d64e:	0002      	movs	r2, r0
   1d650:	1dfb      	adds	r3, r7, #7
   1d652:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1d654:	1dfb      	adds	r3, r7, #7
   1d656:	781b      	ldrb	r3, [r3, #0]
   1d658:	2b08      	cmp	r3, #8
   1d65a:	d841      	bhi.n	1d6e0 <system_clock_source_get_hz+0x98>
   1d65c:	009a      	lsls	r2, r3, #2
   1d65e:	4b23      	ldr	r3, [pc, #140]	; (1d6ec <system_clock_source_get_hz+0xa4>)
   1d660:	18d3      	adds	r3, r2, r3
   1d662:	681b      	ldr	r3, [r3, #0]
   1d664:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1d666:	4b22      	ldr	r3, [pc, #136]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d668:	691b      	ldr	r3, [r3, #16]
   1d66a:	e03a      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1d66c:	4b21      	ldr	r3, [pc, #132]	; (1d6f4 <system_clock_source_get_hz+0xac>)
   1d66e:	6a1b      	ldr	r3, [r3, #32]
   1d670:	059b      	lsls	r3, r3, #22
   1d672:	0f9b      	lsrs	r3, r3, #30
   1d674:	b2db      	uxtb	r3, r3
   1d676:	001a      	movs	r2, r3
   1d678:	4b1f      	ldr	r3, [pc, #124]	; (1d6f8 <system_clock_source_get_hz+0xb0>)
   1d67a:	40d3      	lsrs	r3, r2
   1d67c:	e031      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1d67e:	2380      	movs	r3, #128	; 0x80
   1d680:	021b      	lsls	r3, r3, #8
   1d682:	e02e      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   1d684:	2380      	movs	r3, #128	; 0x80
   1d686:	021b      	lsls	r3, r3, #8
   1d688:	e02b      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   1d68a:	4b19      	ldr	r3, [pc, #100]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d68c:	695b      	ldr	r3, [r3, #20]
   1d68e:	e028      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1d690:	4b17      	ldr	r3, [pc, #92]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d692:	681b      	ldr	r3, [r3, #0]
   1d694:	2202      	movs	r2, #2
   1d696:	4013      	ands	r3, r2
   1d698:	d101      	bne.n	1d69e <system_clock_source_get_hz+0x56>
			return 0;
   1d69a:	2300      	movs	r3, #0
   1d69c:	e021      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1d69e:	4b17      	ldr	r3, [pc, #92]	; (1d6fc <system_clock_source_get_hz+0xb4>)
   1d6a0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   1d6a2:	4b13      	ldr	r3, [pc, #76]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d6a4:	681b      	ldr	r3, [r3, #0]
   1d6a6:	2224      	movs	r2, #36	; 0x24
   1d6a8:	4013      	ands	r3, r2
   1d6aa:	2b04      	cmp	r3, #4
   1d6ac:	d109      	bne.n	1d6c2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1d6ae:	2000      	movs	r0, #0
   1d6b0:	4b13      	ldr	r3, [pc, #76]	; (1d700 <system_clock_source_get_hz+0xb8>)
   1d6b2:	4798      	blx	r3
   1d6b4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   1d6b6:	4b0e      	ldr	r3, [pc, #56]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d6b8:	689b      	ldr	r3, [r3, #8]
   1d6ba:	041b      	lsls	r3, r3, #16
   1d6bc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1d6be:	4353      	muls	r3, r2
   1d6c0:	e00f      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   1d6c2:	4b10      	ldr	r3, [pc, #64]	; (1d704 <system_clock_source_get_hz+0xbc>)
   1d6c4:	e00d      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1d6c6:	4a0b      	ldr	r2, [pc, #44]	; (1d6f4 <system_clock_source_get_hz+0xac>)
   1d6c8:	2350      	movs	r3, #80	; 0x50
   1d6ca:	5cd3      	ldrb	r3, [r2, r3]
   1d6cc:	b2db      	uxtb	r3, r3
   1d6ce:	001a      	movs	r2, r3
   1d6d0:	2304      	movs	r3, #4
   1d6d2:	4013      	ands	r3, r2
   1d6d4:	d101      	bne.n	1d6da <system_clock_source_get_hz+0x92>
			return 0;
   1d6d6:	2300      	movs	r3, #0
   1d6d8:	e003      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   1d6da:	4b05      	ldr	r3, [pc, #20]	; (1d6f0 <system_clock_source_get_hz+0xa8>)
   1d6dc:	68db      	ldr	r3, [r3, #12]
   1d6de:	e000      	b.n	1d6e2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   1d6e0:	2300      	movs	r3, #0
	}
}
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	46bd      	mov	sp, r7
   1d6e6:	b002      	add	sp, #8
   1d6e8:	bd80      	pop	{r7, pc}
   1d6ea:	46c0      	nop			; (mov r8, r8)
   1d6ec:	00024370 	.word	0x00024370
   1d6f0:	20003aa4 	.word	0x20003aa4
   1d6f4:	40000800 	.word	0x40000800
   1d6f8:	007a1200 	.word	0x007a1200
   1d6fc:	0001d5e9 	.word	0x0001d5e9
   1d700:	0001e0e5 	.word	0x0001e0e5
   1d704:	02dc6c00 	.word	0x02dc6c00

0001d708 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1d708:	b580      	push	{r7, lr}
   1d70a:	b084      	sub	sp, #16
   1d70c:	af00      	add	r7, sp, #0
   1d70e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1d710:	4b1a      	ldr	r3, [pc, #104]	; (1d77c <system_clock_source_osc8m_set_config+0x74>)
   1d712:	6a1b      	ldr	r3, [r3, #32]
   1d714:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1d716:	687b      	ldr	r3, [r7, #4]
   1d718:	781b      	ldrb	r3, [r3, #0]
   1d71a:	1c1a      	adds	r2, r3, #0
   1d71c:	2303      	movs	r3, #3
   1d71e:	4013      	ands	r3, r2
   1d720:	b2da      	uxtb	r2, r3
   1d722:	230d      	movs	r3, #13
   1d724:	18fb      	adds	r3, r7, r3
   1d726:	2103      	movs	r1, #3
   1d728:	400a      	ands	r2, r1
   1d72a:	0010      	movs	r0, r2
   1d72c:	781a      	ldrb	r2, [r3, #0]
   1d72e:	2103      	movs	r1, #3
   1d730:	438a      	bics	r2, r1
   1d732:	1c11      	adds	r1, r2, #0
   1d734:	1c02      	adds	r2, r0, #0
   1d736:	430a      	orrs	r2, r1
   1d738:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1d73a:	687b      	ldr	r3, [r7, #4]
   1d73c:	789a      	ldrb	r2, [r3, #2]
   1d73e:	230c      	movs	r3, #12
   1d740:	18fb      	adds	r3, r7, r3
   1d742:	01d0      	lsls	r0, r2, #7
   1d744:	781a      	ldrb	r2, [r3, #0]
   1d746:	217f      	movs	r1, #127	; 0x7f
   1d748:	400a      	ands	r2, r1
   1d74a:	1c11      	adds	r1, r2, #0
   1d74c:	1c02      	adds	r2, r0, #0
   1d74e:	430a      	orrs	r2, r1
   1d750:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1d752:	687b      	ldr	r3, [r7, #4]
   1d754:	785a      	ldrb	r2, [r3, #1]
   1d756:	230c      	movs	r3, #12
   1d758:	18fb      	adds	r3, r7, r3
   1d75a:	2101      	movs	r1, #1
   1d75c:	400a      	ands	r2, r1
   1d75e:	0190      	lsls	r0, r2, #6
   1d760:	781a      	ldrb	r2, [r3, #0]
   1d762:	2140      	movs	r1, #64	; 0x40
   1d764:	438a      	bics	r2, r1
   1d766:	1c11      	adds	r1, r2, #0
   1d768:	1c02      	adds	r2, r0, #0
   1d76a:	430a      	orrs	r2, r1
   1d76c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   1d76e:	4b03      	ldr	r3, [pc, #12]	; (1d77c <system_clock_source_osc8m_set_config+0x74>)
   1d770:	68fa      	ldr	r2, [r7, #12]
   1d772:	621a      	str	r2, [r3, #32]
}
   1d774:	46c0      	nop			; (mov r8, r8)
   1d776:	46bd      	mov	sp, r7
   1d778:	b004      	add	sp, #16
   1d77a:	bd80      	pop	{r7, pc}
   1d77c:	40000800 	.word	0x40000800

0001d780 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1d780:	b580      	push	{r7, lr}
   1d782:	b086      	sub	sp, #24
   1d784:	af00      	add	r7, sp, #0
   1d786:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1d788:	687b      	ldr	r3, [r7, #4]
   1d78a:	68db      	ldr	r3, [r3, #12]
   1d78c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1d78e:	687b      	ldr	r3, [r7, #4]
   1d790:	7d1b      	ldrb	r3, [r3, #20]
   1d792:	2b01      	cmp	r3, #1
   1d794:	d10a      	bne.n	1d7ac <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   1d796:	687b      	ldr	r3, [r7, #4]
   1d798:	8a1b      	ldrh	r3, [r3, #16]
   1d79a:	3301      	adds	r3, #1
   1d79c:	005b      	lsls	r3, r3, #1
   1d79e:	001a      	movs	r2, r3
   1d7a0:	4b36      	ldr	r3, [pc, #216]	; (1d87c <system_clock_source_dpll_set_config+0xfc>)
   1d7a2:	0011      	movs	r1, r2
   1d7a4:	6978      	ldr	r0, [r7, #20]
   1d7a6:	4798      	blx	r3
   1d7a8:	0003      	movs	r3, r0
   1d7aa:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1d7ac:	687b      	ldr	r3, [r7, #4]
   1d7ae:	689b      	ldr	r3, [r3, #8]
   1d7b0:	011a      	lsls	r2, r3, #4
   1d7b2:	4b32      	ldr	r3, [pc, #200]	; (1d87c <system_clock_source_dpll_set_config+0xfc>)
   1d7b4:	6979      	ldr	r1, [r7, #20]
   1d7b6:	0010      	movs	r0, r2
   1d7b8:	4798      	blx	r3
   1d7ba:	0003      	movs	r3, r0
   1d7bc:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   1d7be:	693b      	ldr	r3, [r7, #16]
   1d7c0:	b2da      	uxtb	r2, r3
   1d7c2:	230f      	movs	r3, #15
   1d7c4:	18fb      	adds	r3, r7, r3
   1d7c6:	210f      	movs	r1, #15
   1d7c8:	400a      	ands	r2, r1
   1d7ca:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   1d7cc:	693b      	ldr	r3, [r7, #16]
   1d7ce:	091b      	lsrs	r3, r3, #4
   1d7d0:	3b01      	subs	r3, #1
   1d7d2:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   1d7d4:	492a      	ldr	r1, [pc, #168]	; (1d880 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1d7d6:	687b      	ldr	r3, [r7, #4]
   1d7d8:	781b      	ldrb	r3, [r3, #0]
   1d7da:	01db      	lsls	r3, r3, #7
   1d7dc:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1d7de:	687b      	ldr	r3, [r7, #4]
   1d7e0:	785b      	ldrb	r3, [r3, #1]
   1d7e2:	019b      	lsls	r3, r3, #6
   1d7e4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1d7e6:	4313      	orrs	r3, r2
   1d7e8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   1d7ea:	2344      	movs	r3, #68	; 0x44
   1d7ec:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   1d7ee:	4b24      	ldr	r3, [pc, #144]	; (1d880 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1d7f0:	220f      	movs	r2, #15
   1d7f2:	18ba      	adds	r2, r7, r2
   1d7f4:	7812      	ldrb	r2, [r2, #0]
   1d7f6:	0412      	lsls	r2, r2, #16
   1d7f8:	0011      	movs	r1, r2
   1d7fa:	22f0      	movs	r2, #240	; 0xf0
   1d7fc:	0312      	lsls	r2, r2, #12
   1d7fe:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1d800:	693a      	ldr	r2, [r7, #16]
   1d802:	0512      	lsls	r2, r2, #20
   1d804:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1d806:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   1d808:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   1d80a:	4b1d      	ldr	r3, [pc, #116]	; (1d880 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1d80c:	687a      	ldr	r2, [r7, #4]
   1d80e:	8a12      	ldrh	r2, [r2, #16]
   1d810:	0412      	lsls	r2, r2, #16
   1d812:	0011      	movs	r1, r2
   1d814:	4a1b      	ldr	r2, [pc, #108]	; (1d884 <system_clock_source_dpll_set_config+0x104>)
   1d816:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1d818:	687a      	ldr	r2, [r7, #4]
   1d81a:	7892      	ldrb	r2, [r2, #2]
   1d81c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1d81e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1d820:	687a      	ldr	r2, [r7, #4]
   1d822:	7cd2      	ldrb	r2, [r2, #19]
   1d824:	0212      	lsls	r2, r2, #8
   1d826:	0010      	movs	r0, r2
   1d828:	22e0      	movs	r2, #224	; 0xe0
   1d82a:	00d2      	lsls	r2, r2, #3
   1d82c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1d82e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1d830:	687a      	ldr	r2, [r7, #4]
   1d832:	7d12      	ldrb	r2, [r2, #20]
   1d834:	0112      	lsls	r2, r2, #4
   1d836:	0010      	movs	r0, r2
   1d838:	2230      	movs	r2, #48	; 0x30
   1d83a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1d83c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1d83e:	687a      	ldr	r2, [r7, #4]
   1d840:	78d2      	ldrb	r2, [r2, #3]
   1d842:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1d844:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1d846:	687a      	ldr	r2, [r7, #4]
   1d848:	7912      	ldrb	r2, [r2, #4]
   1d84a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1d84c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1d84e:	687a      	ldr	r2, [r7, #4]
   1d850:	7c92      	ldrb	r2, [r2, #18]
   1d852:	0010      	movs	r0, r2
   1d854:	2203      	movs	r2, #3
   1d856:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1d858:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   1d85a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1d85c:	693b      	ldr	r3, [r7, #16]
   1d85e:	3301      	adds	r3, #1
   1d860:	011a      	lsls	r2, r3, #4
   1d862:	230f      	movs	r3, #15
   1d864:	18fb      	adds	r3, r7, r3
   1d866:	781b      	ldrb	r3, [r3, #0]
   1d868:	18d3      	adds	r3, r2, r3
   1d86a:	697a      	ldr	r2, [r7, #20]
   1d86c:	4353      	muls	r3, r2
   1d86e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   1d870:	4b05      	ldr	r3, [pc, #20]	; (1d888 <system_clock_source_dpll_set_config+0x108>)
   1d872:	60da      	str	r2, [r3, #12]
}
   1d874:	46c0      	nop			; (mov r8, r8)
   1d876:	46bd      	mov	sp, r7
   1d878:	b006      	add	sp, #24
   1d87a:	bd80      	pop	{r7, pc}
   1d87c:	0001f40d 	.word	0x0001f40d
   1d880:	40000800 	.word	0x40000800
   1d884:	07ff0000 	.word	0x07ff0000
   1d888:	20003aa4 	.word	0x20003aa4

0001d88c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   1d88c:	b580      	push	{r7, lr}
   1d88e:	b082      	sub	sp, #8
   1d890:	af00      	add	r7, sp, #0
   1d892:	0002      	movs	r2, r0
   1d894:	1dfb      	adds	r3, r7, #7
   1d896:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1d898:	1dfb      	adds	r3, r7, #7
   1d89a:	781b      	ldrb	r3, [r3, #0]
   1d89c:	2b08      	cmp	r3, #8
   1d89e:	d83b      	bhi.n	1d918 <system_clock_source_enable+0x8c>
   1d8a0:	009a      	lsls	r2, r3, #2
   1d8a2:	4b21      	ldr	r3, [pc, #132]	; (1d928 <system_clock_source_enable+0x9c>)
   1d8a4:	18d3      	adds	r3, r2, r3
   1d8a6:	681b      	ldr	r3, [r3, #0]
   1d8a8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1d8aa:	4b20      	ldr	r3, [pc, #128]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8ac:	4a1f      	ldr	r2, [pc, #124]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8ae:	6a12      	ldr	r2, [r2, #32]
   1d8b0:	2102      	movs	r1, #2
   1d8b2:	430a      	orrs	r2, r1
   1d8b4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   1d8b6:	2300      	movs	r3, #0
   1d8b8:	e031      	b.n	1d91e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1d8ba:	4b1c      	ldr	r3, [pc, #112]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8bc:	4a1b      	ldr	r2, [pc, #108]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8be:	6992      	ldr	r2, [r2, #24]
   1d8c0:	2102      	movs	r1, #2
   1d8c2:	430a      	orrs	r2, r1
   1d8c4:	619a      	str	r2, [r3, #24]
		break;
   1d8c6:	e029      	b.n	1d91c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1d8c8:	4a18      	ldr	r2, [pc, #96]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8ca:	4b18      	ldr	r3, [pc, #96]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8cc:	8a1b      	ldrh	r3, [r3, #16]
   1d8ce:	b29b      	uxth	r3, r3
   1d8d0:	2102      	movs	r1, #2
   1d8d2:	430b      	orrs	r3, r1
   1d8d4:	b29b      	uxth	r3, r3
   1d8d6:	8213      	strh	r3, [r2, #16]
		break;
   1d8d8:	e020      	b.n	1d91c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1d8da:	4a14      	ldr	r2, [pc, #80]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8dc:	4b13      	ldr	r3, [pc, #76]	; (1d92c <system_clock_source_enable+0xa0>)
   1d8de:	8a9b      	ldrh	r3, [r3, #20]
   1d8e0:	b29b      	uxth	r3, r3
   1d8e2:	2102      	movs	r1, #2
   1d8e4:	430b      	orrs	r3, r1
   1d8e6:	b29b      	uxth	r3, r3
   1d8e8:	8293      	strh	r3, [r2, #20]
		break;
   1d8ea:	e017      	b.n	1d91c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1d8ec:	4b10      	ldr	r3, [pc, #64]	; (1d930 <system_clock_source_enable+0xa4>)
   1d8ee:	681b      	ldr	r3, [r3, #0]
   1d8f0:	2202      	movs	r2, #2
   1d8f2:	431a      	orrs	r2, r3
   1d8f4:	4b0e      	ldr	r3, [pc, #56]	; (1d930 <system_clock_source_enable+0xa4>)
   1d8f6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   1d8f8:	4b0e      	ldr	r3, [pc, #56]	; (1d934 <system_clock_source_enable+0xa8>)
   1d8fa:	4798      	blx	r3
		break;
   1d8fc:	e00e      	b.n	1d91c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1d8fe:	4a0b      	ldr	r2, [pc, #44]	; (1d92c <system_clock_source_enable+0xa0>)
   1d900:	490a      	ldr	r1, [pc, #40]	; (1d92c <system_clock_source_enable+0xa0>)
   1d902:	2344      	movs	r3, #68	; 0x44
   1d904:	5ccb      	ldrb	r3, [r1, r3]
   1d906:	b2db      	uxtb	r3, r3
   1d908:	2102      	movs	r1, #2
   1d90a:	430b      	orrs	r3, r1
   1d90c:	b2d9      	uxtb	r1, r3
   1d90e:	2344      	movs	r3, #68	; 0x44
   1d910:	54d1      	strb	r1, [r2, r3]
		break;
   1d912:	e003      	b.n	1d91c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   1d914:	2300      	movs	r3, #0
   1d916:	e002      	b.n	1d91e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d918:	2317      	movs	r3, #23
   1d91a:	e000      	b.n	1d91e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   1d91c:	2300      	movs	r3, #0
}
   1d91e:	0018      	movs	r0, r3
   1d920:	46bd      	mov	sp, r7
   1d922:	b002      	add	sp, #8
   1d924:	bd80      	pop	{r7, pc}
   1d926:	46c0      	nop			; (mov r8, r8)
   1d928:	00024394 	.word	0x00024394
   1d92c:	40000800 	.word	0x40000800
   1d930:	20003aa4 	.word	0x20003aa4
   1d934:	0001d605 	.word	0x0001d605

0001d938 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   1d938:	b580      	push	{r7, lr}
   1d93a:	b084      	sub	sp, #16
   1d93c:	af00      	add	r7, sp, #0
   1d93e:	0002      	movs	r2, r0
   1d940:	1dfb      	adds	r3, r7, #7
   1d942:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   1d944:	2300      	movs	r3, #0
   1d946:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   1d948:	1dfb      	adds	r3, r7, #7
   1d94a:	781b      	ldrb	r3, [r3, #0]
   1d94c:	2b08      	cmp	r3, #8
   1d94e:	d821      	bhi.n	1d994 <system_clock_source_is_ready+0x5c>
   1d950:	009a      	lsls	r2, r3, #2
   1d952:	4b18      	ldr	r3, [pc, #96]	; (1d9b4 <system_clock_source_is_ready+0x7c>)
   1d954:	18d3      	adds	r3, r2, r3
   1d956:	681b      	ldr	r3, [r3, #0]
   1d958:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   1d95a:	2308      	movs	r3, #8
   1d95c:	60fb      	str	r3, [r7, #12]
		break;
   1d95e:	e01b      	b.n	1d998 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1d960:	2304      	movs	r3, #4
   1d962:	60fb      	str	r3, [r7, #12]
		break;
   1d964:	e018      	b.n	1d998 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   1d966:	2301      	movs	r3, #1
   1d968:	60fb      	str	r3, [r7, #12]
		break;
   1d96a:	e015      	b.n	1d998 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   1d96c:	2302      	movs	r3, #2
   1d96e:	60fb      	str	r3, [r7, #12]
		break;
   1d970:	e012      	b.n	1d998 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   1d972:	2310      	movs	r3, #16
   1d974:	60fb      	str	r3, [r7, #12]
		}
		break;
   1d976:	e00f      	b.n	1d998 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   1d978:	4a0f      	ldr	r2, [pc, #60]	; (1d9b8 <system_clock_source_is_ready+0x80>)
   1d97a:	2350      	movs	r3, #80	; 0x50
   1d97c:	5cd3      	ldrb	r3, [r2, r3]
   1d97e:	b2db      	uxtb	r3, r3
   1d980:	001a      	movs	r2, r3
   1d982:	2303      	movs	r3, #3
   1d984:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   1d986:	3b03      	subs	r3, #3
   1d988:	425a      	negs	r2, r3
   1d98a:	4153      	adcs	r3, r2
   1d98c:	b2db      	uxtb	r3, r3
   1d98e:	e00c      	b.n	1d9aa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1d990:	2301      	movs	r3, #1
   1d992:	e00a      	b.n	1d9aa <system_clock_source_is_ready+0x72>

	default:
		return false;
   1d994:	2300      	movs	r3, #0
   1d996:	e008      	b.n	1d9aa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1d998:	4b07      	ldr	r3, [pc, #28]	; (1d9b8 <system_clock_source_is_ready+0x80>)
   1d99a:	68db      	ldr	r3, [r3, #12]
   1d99c:	68fa      	ldr	r2, [r7, #12]
   1d99e:	401a      	ands	r2, r3
   1d9a0:	68fb      	ldr	r3, [r7, #12]
   1d9a2:	1ad3      	subs	r3, r2, r3
   1d9a4:	425a      	negs	r2, r3
   1d9a6:	4153      	adcs	r3, r2
   1d9a8:	b2db      	uxtb	r3, r3
}
   1d9aa:	0018      	movs	r0, r3
   1d9ac:	46bd      	mov	sp, r7
   1d9ae:	b004      	add	sp, #16
   1d9b0:	bd80      	pop	{r7, pc}
   1d9b2:	46c0      	nop			; (mov r8, r8)
   1d9b4:	000243b8 	.word	0x000243b8
   1d9b8:	40000800 	.word	0x40000800

0001d9bc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   1d9bc:	b580      	push	{r7, lr}
   1d9be:	b082      	sub	sp, #8
   1d9c0:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1d9c2:	003b      	movs	r3, r7
   1d9c4:	2203      	movs	r2, #3
   1d9c6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1d9c8:	2300      	movs	r3, #0
   1d9ca:	607b      	str	r3, [r7, #4]
   1d9cc:	e009      	b.n	1d9e2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1d9ce:	687b      	ldr	r3, [r7, #4]
   1d9d0:	b2db      	uxtb	r3, r3
   1d9d2:	003a      	movs	r2, r7
   1d9d4:	0011      	movs	r1, r2
   1d9d6:	0018      	movs	r0, r3
   1d9d8:	4b05      	ldr	r3, [pc, #20]	; (1d9f0 <_switch_peripheral_gclk+0x34>)
   1d9da:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1d9dc:	687b      	ldr	r3, [r7, #4]
   1d9de:	3301      	adds	r3, #1
   1d9e0:	607b      	str	r3, [r7, #4]
   1d9e2:	687b      	ldr	r3, [r7, #4]
   1d9e4:	2b24      	cmp	r3, #36	; 0x24
   1d9e6:	d9f2      	bls.n	1d9ce <_switch_peripheral_gclk+0x12>
	}
}
   1d9e8:	46c0      	nop			; (mov r8, r8)
   1d9ea:	46bd      	mov	sp, r7
   1d9ec:	b002      	add	sp, #8
   1d9ee:	bd80      	pop	{r7, pc}
   1d9f0:	0001dfc1 	.word	0x0001dfc1

0001d9f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1d9f4:	b580      	push	{r7, lr}
   1d9f6:	b0a6      	sub	sp, #152	; 0x98
   1d9f8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1d9fa:	4b92      	ldr	r3, [pc, #584]	; (1dc44 <system_clock_init+0x250>)
   1d9fc:	22c2      	movs	r2, #194	; 0xc2
   1d9fe:	00d2      	lsls	r2, r2, #3
   1da00:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   1da02:	2003      	movs	r0, #3
   1da04:	4b90      	ldr	r3, [pc, #576]	; (1dc48 <system_clock_init+0x254>)
   1da06:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   1da08:	4b90      	ldr	r3, [pc, #576]	; (1dc4c <system_clock_init+0x258>)
   1da0a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   1da0c:	2394      	movs	r3, #148	; 0x94
   1da0e:	18fb      	adds	r3, r7, r3
   1da10:	0018      	movs	r0, r3
   1da12:	4b8f      	ldr	r3, [pc, #572]	; (1dc50 <system_clock_init+0x25c>)
   1da14:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1da16:	2394      	movs	r3, #148	; 0x94
   1da18:	18fb      	adds	r3, r7, r3
   1da1a:	2200      	movs	r2, #0
   1da1c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   1da1e:	2394      	movs	r3, #148	; 0x94
   1da20:	18fb      	adds	r3, r7, r3
   1da22:	2201      	movs	r2, #1
   1da24:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   1da26:	2394      	movs	r3, #148	; 0x94
   1da28:	18fb      	adds	r3, r7, r3
   1da2a:	2200      	movs	r2, #0
   1da2c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1da2e:	2394      	movs	r3, #148	; 0x94
   1da30:	18fb      	adds	r3, r7, r3
   1da32:	0018      	movs	r0, r3
   1da34:	4b87      	ldr	r3, [pc, #540]	; (1dc54 <system_clock_init+0x260>)
   1da36:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1da38:	2006      	movs	r0, #6
   1da3a:	4b87      	ldr	r3, [pc, #540]	; (1dc58 <system_clock_init+0x264>)
   1da3c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1da3e:	4b87      	ldr	r3, [pc, #540]	; (1dc5c <system_clock_init+0x268>)
   1da40:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1da42:	2360      	movs	r3, #96	; 0x60
   1da44:	18fb      	adds	r3, r7, r3
   1da46:	0018      	movs	r0, r3
   1da48:	4b85      	ldr	r3, [pc, #532]	; (1dc60 <system_clock_init+0x26c>)
   1da4a:	4798      	blx	r3
   1da4c:	2360      	movs	r3, #96	; 0x60
   1da4e:	18fb      	adds	r3, r7, r3
   1da50:	2206      	movs	r2, #6
   1da52:	701a      	strb	r2, [r3, #0]
   1da54:	2360      	movs	r3, #96	; 0x60
   1da56:	18fb      	adds	r3, r7, r3
   1da58:	2208      	movs	r2, #8
   1da5a:	605a      	str	r2, [r3, #4]
   1da5c:	2360      	movs	r3, #96	; 0x60
   1da5e:	18fb      	adds	r3, r7, r3
   1da60:	2200      	movs	r2, #0
   1da62:	721a      	strb	r2, [r3, #8]
   1da64:	2360      	movs	r3, #96	; 0x60
   1da66:	18fb      	adds	r3, r7, r3
   1da68:	2200      	movs	r2, #0
   1da6a:	725a      	strb	r2, [r3, #9]
   1da6c:	2360      	movs	r3, #96	; 0x60
   1da6e:	18fb      	adds	r3, r7, r3
   1da70:	0019      	movs	r1, r3
   1da72:	2001      	movs	r0, #1
   1da74:	4b7b      	ldr	r3, [pc, #492]	; (1dc64 <system_clock_init+0x270>)
   1da76:	4798      	blx	r3
   1da78:	2001      	movs	r0, #1
   1da7a:	4b7b      	ldr	r3, [pc, #492]	; (1dc68 <system_clock_init+0x274>)
   1da7c:	4798      	blx	r3
   1da7e:	2354      	movs	r3, #84	; 0x54
   1da80:	18fb      	adds	r3, r7, r3
   1da82:	0018      	movs	r0, r3
   1da84:	4b76      	ldr	r3, [pc, #472]	; (1dc60 <system_clock_init+0x26c>)
   1da86:	4798      	blx	r3
   1da88:	2354      	movs	r3, #84	; 0x54
   1da8a:	18fb      	adds	r3, r7, r3
   1da8c:	2203      	movs	r2, #3
   1da8e:	701a      	strb	r2, [r3, #0]
   1da90:	2354      	movs	r3, #84	; 0x54
   1da92:	18fb      	adds	r3, r7, r3
   1da94:	2201      	movs	r2, #1
   1da96:	605a      	str	r2, [r3, #4]
   1da98:	2354      	movs	r3, #84	; 0x54
   1da9a:	18fb      	adds	r3, r7, r3
   1da9c:	2201      	movs	r2, #1
   1da9e:	721a      	strb	r2, [r3, #8]
   1daa0:	2354      	movs	r3, #84	; 0x54
   1daa2:	18fb      	adds	r3, r7, r3
   1daa4:	2200      	movs	r2, #0
   1daa6:	725a      	strb	r2, [r3, #9]
   1daa8:	2354      	movs	r3, #84	; 0x54
   1daaa:	18fb      	adds	r3, r7, r3
   1daac:	0019      	movs	r1, r3
   1daae:	2002      	movs	r0, #2
   1dab0:	4b6c      	ldr	r3, [pc, #432]	; (1dc64 <system_clock_init+0x270>)
   1dab2:	4798      	blx	r3
   1dab4:	2002      	movs	r0, #2
   1dab6:	4b6c      	ldr	r3, [pc, #432]	; (1dc68 <system_clock_init+0x274>)
   1dab8:	4798      	blx	r3
   1daba:	233c      	movs	r3, #60	; 0x3c
   1dabc:	18fb      	adds	r3, r7, r3
   1dabe:	0018      	movs	r0, r3
   1dac0:	4b67      	ldr	r3, [pc, #412]	; (1dc60 <system_clock_init+0x26c>)
   1dac2:	4798      	blx	r3
   1dac4:	233c      	movs	r3, #60	; 0x3c
   1dac6:	18fb      	adds	r3, r7, r3
   1dac8:	2203      	movs	r2, #3
   1daca:	701a      	strb	r2, [r3, #0]
   1dacc:	233c      	movs	r3, #60	; 0x3c
   1dace:	18fb      	adds	r3, r7, r3
   1dad0:	2220      	movs	r2, #32
   1dad2:	605a      	str	r2, [r3, #4]
   1dad4:	233c      	movs	r3, #60	; 0x3c
   1dad6:	18fb      	adds	r3, r7, r3
   1dad8:	2200      	movs	r2, #0
   1dada:	721a      	strb	r2, [r3, #8]
   1dadc:	233c      	movs	r3, #60	; 0x3c
   1dade:	18fb      	adds	r3, r7, r3
   1dae0:	2200      	movs	r2, #0
   1dae2:	725a      	strb	r2, [r3, #9]
   1dae4:	233c      	movs	r3, #60	; 0x3c
   1dae6:	18fb      	adds	r3, r7, r3
   1dae8:	0019      	movs	r1, r3
   1daea:	2004      	movs	r0, #4
   1daec:	4b5d      	ldr	r3, [pc, #372]	; (1dc64 <system_clock_init+0x270>)
   1daee:	4798      	blx	r3
   1daf0:	2004      	movs	r0, #4
   1daf2:	4b5d      	ldr	r3, [pc, #372]	; (1dc68 <system_clock_init+0x274>)
   1daf4:	4798      	blx	r3
   1daf6:	2330      	movs	r3, #48	; 0x30
   1daf8:	18fb      	adds	r3, r7, r3
   1dafa:	0018      	movs	r0, r3
   1dafc:	4b58      	ldr	r3, [pc, #352]	; (1dc60 <system_clock_init+0x26c>)
   1dafe:	4798      	blx	r3
   1db00:	2330      	movs	r3, #48	; 0x30
   1db02:	18fb      	adds	r3, r7, r3
   1db04:	2206      	movs	r2, #6
   1db06:	701a      	strb	r2, [r3, #0]
   1db08:	2330      	movs	r3, #48	; 0x30
   1db0a:	18fb      	adds	r3, r7, r3
   1db0c:	2201      	movs	r2, #1
   1db0e:	605a      	str	r2, [r3, #4]
   1db10:	2330      	movs	r3, #48	; 0x30
   1db12:	18fb      	adds	r3, r7, r3
   1db14:	2200      	movs	r2, #0
   1db16:	721a      	strb	r2, [r3, #8]
   1db18:	2330      	movs	r3, #48	; 0x30
   1db1a:	18fb      	adds	r3, r7, r3
   1db1c:	2200      	movs	r2, #0
   1db1e:	725a      	strb	r2, [r3, #9]
   1db20:	2330      	movs	r3, #48	; 0x30
   1db22:	18fb      	adds	r3, r7, r3
   1db24:	0019      	movs	r1, r3
   1db26:	2005      	movs	r0, #5
   1db28:	4b4e      	ldr	r3, [pc, #312]	; (1dc64 <system_clock_init+0x270>)
   1db2a:	4798      	blx	r3
   1db2c:	2005      	movs	r0, #5
   1db2e:	4b4e      	ldr	r3, [pc, #312]	; (1dc68 <system_clock_init+0x274>)
   1db30:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   1db32:	2390      	movs	r3, #144	; 0x90
   1db34:	18fb      	adds	r3, r7, r3
   1db36:	0018      	movs	r0, r3
   1db38:	4b4c      	ldr	r3, [pc, #304]	; (1dc6c <system_clock_init+0x278>)
   1db3a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1db3c:	2390      	movs	r3, #144	; 0x90
   1db3e:	18fb      	adds	r3, r7, r3
   1db40:	2201      	movs	r2, #1
   1db42:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1db44:	2390      	movs	r3, #144	; 0x90
   1db46:	18fb      	adds	r3, r7, r3
   1db48:	0019      	movs	r1, r3
   1db4a:	2001      	movs	r0, #1
   1db4c:	4b48      	ldr	r3, [pc, #288]	; (1dc70 <system_clock_init+0x27c>)
   1db4e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1db50:	2001      	movs	r0, #1
   1db52:	4b48      	ldr	r3, [pc, #288]	; (1dc74 <system_clock_init+0x280>)
   1db54:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   1db56:	2378      	movs	r3, #120	; 0x78
   1db58:	18fb      	adds	r3, r7, r3
   1db5a:	0018      	movs	r0, r3
   1db5c:	4b46      	ldr	r3, [pc, #280]	; (1dc78 <system_clock_init+0x284>)
   1db5e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   1db60:	2378      	movs	r3, #120	; 0x78
   1db62:	18fb      	adds	r3, r7, r3
   1db64:	2200      	movs	r2, #0
   1db66:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   1db68:	2378      	movs	r3, #120	; 0x78
   1db6a:	18fb      	adds	r3, r7, r3
   1db6c:	2200      	movs	r2, #0
   1db6e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   1db70:	2378      	movs	r3, #120	; 0x78
   1db72:	18fb      	adds	r3, r7, r3
   1db74:	2200      	movs	r2, #0
   1db76:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   1db78:	2378      	movs	r3, #120	; 0x78
   1db7a:	18fb      	adds	r3, r7, r3
   1db7c:	2200      	movs	r2, #0
   1db7e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   1db80:	2378      	movs	r3, #120	; 0x78
   1db82:	18fb      	adds	r3, r7, r3
   1db84:	2200      	movs	r2, #0
   1db86:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   1db88:	2378      	movs	r3, #120	; 0x78
   1db8a:	18fb      	adds	r3, r7, r3
   1db8c:	2200      	movs	r2, #0
   1db8e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   1db90:	2378      	movs	r3, #120	; 0x78
   1db92:	18fb      	adds	r3, r7, r3
   1db94:	2200      	movs	r2, #0
   1db96:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1db98:	2378      	movs	r3, #120	; 0x78
   1db9a:	18fb      	adds	r3, r7, r3
   1db9c:	2202      	movs	r2, #2
   1db9e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1dba0:	2378      	movs	r3, #120	; 0x78
   1dba2:	18fb      	adds	r3, r7, r3
   1dba4:	4a35      	ldr	r2, [pc, #212]	; (1dc7c <system_clock_init+0x288>)
   1dba6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   1dba8:	2378      	movs	r3, #120	; 0x78
   1dbaa:	18fb      	adds	r3, r7, r3
   1dbac:	2201      	movs	r2, #1
   1dbae:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   1dbb0:	2378      	movs	r3, #120	; 0x78
   1dbb2:	18fb      	adds	r3, r7, r3
   1dbb4:	4a32      	ldr	r2, [pc, #200]	; (1dc80 <system_clock_init+0x28c>)
   1dbb6:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   1dbb8:	2378      	movs	r3, #120	; 0x78
   1dbba:	18fb      	adds	r3, r7, r3
   1dbbc:	0018      	movs	r0, r3
   1dbbe:	4b31      	ldr	r3, [pc, #196]	; (1dc84 <system_clock_init+0x290>)
   1dbc0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1dbc2:	2008      	movs	r0, #8
   1dbc4:	4b24      	ldr	r3, [pc, #144]	; (1dc58 <system_clock_init+0x264>)
   1dbc6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1dbc8:	46c0      	nop			; (mov r8, r8)
   1dbca:	2008      	movs	r0, #8
   1dbcc:	4b2e      	ldr	r3, [pc, #184]	; (1dc88 <system_clock_init+0x294>)
   1dbce:	4798      	blx	r3
   1dbd0:	0003      	movs	r3, r0
   1dbd2:	001a      	movs	r2, r3
   1dbd4:	2301      	movs	r3, #1
   1dbd6:	4053      	eors	r3, r2
   1dbd8:	b2db      	uxtb	r3, r3
   1dbda:	2b00      	cmp	r3, #0
   1dbdc:	d1f5      	bne.n	1dbca <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1dbde:	4919      	ldr	r1, [pc, #100]	; (1dc44 <system_clock_init+0x250>)
   1dbe0:	2244      	movs	r2, #68	; 0x44
   1dbe2:	5c8b      	ldrb	r3, [r1, r2]
   1dbe4:	2080      	movs	r0, #128	; 0x80
   1dbe6:	4240      	negs	r0, r0
   1dbe8:	4303      	orrs	r3, r0
   1dbea:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   1dbec:	2000      	movs	r0, #0
   1dbee:	4b27      	ldr	r3, [pc, #156]	; (1dc8c <system_clock_init+0x298>)
   1dbf0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1dbf2:	2100      	movs	r1, #0
   1dbf4:	2000      	movs	r0, #0
   1dbf6:	4b26      	ldr	r3, [pc, #152]	; (1dc90 <system_clock_init+0x29c>)
   1dbf8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   1dbfa:	2100      	movs	r1, #0
   1dbfc:	2001      	movs	r0, #1
   1dbfe:	4b24      	ldr	r3, [pc, #144]	; (1dc90 <system_clock_init+0x29c>)
   1dc00:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   1dc02:	2100      	movs	r1, #0
   1dc04:	2002      	movs	r0, #2
   1dc06:	4b22      	ldr	r3, [pc, #136]	; (1dc90 <system_clock_init+0x29c>)
   1dc08:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1dc0a:	003b      	movs	r3, r7
   1dc0c:	0018      	movs	r0, r3
   1dc0e:	4b14      	ldr	r3, [pc, #80]	; (1dc60 <system_clock_init+0x26c>)
   1dc10:	4798      	blx	r3
   1dc12:	003b      	movs	r3, r7
   1dc14:	2208      	movs	r2, #8
   1dc16:	701a      	strb	r2, [r3, #0]
   1dc18:	003b      	movs	r3, r7
   1dc1a:	2201      	movs	r2, #1
   1dc1c:	605a      	str	r2, [r3, #4]
   1dc1e:	003b      	movs	r3, r7
   1dc20:	2200      	movs	r2, #0
   1dc22:	721a      	strb	r2, [r3, #8]
   1dc24:	003b      	movs	r3, r7
   1dc26:	2201      	movs	r2, #1
   1dc28:	725a      	strb	r2, [r3, #9]
   1dc2a:	003b      	movs	r3, r7
   1dc2c:	0019      	movs	r1, r3
   1dc2e:	2000      	movs	r0, #0
   1dc30:	4b0c      	ldr	r3, [pc, #48]	; (1dc64 <system_clock_init+0x270>)
   1dc32:	4798      	blx	r3
   1dc34:	2000      	movs	r0, #0
   1dc36:	4b0c      	ldr	r3, [pc, #48]	; (1dc68 <system_clock_init+0x274>)
   1dc38:	4798      	blx	r3
#endif
}
   1dc3a:	46c0      	nop			; (mov r8, r8)
   1dc3c:	46bd      	mov	sp, r7
   1dc3e:	b026      	add	sp, #152	; 0x98
   1dc40:	bd80      	pop	{r7, pc}
   1dc42:	46c0      	nop			; (mov r8, r8)
   1dc44:	40000800 	.word	0x40000800
   1dc48:	0001d5b5 	.word	0x0001d5b5
   1dc4c:	0001d9bd 	.word	0x0001d9bd
   1dc50:	0001d4c5 	.word	0x0001d4c5
   1dc54:	0001d709 	.word	0x0001d709
   1dc58:	0001d88d 	.word	0x0001d88d
   1dc5c:	0001dd39 	.word	0x0001dd39
   1dc60:	0001d481 	.word	0x0001d481
   1dc64:	0001dd69 	.word	0x0001dd69
   1dc68:	0001de8d 	.word	0x0001de8d
   1dc6c:	0001d4af 	.word	0x0001d4af
   1dc70:	0001dfc1 	.word	0x0001dfc1
   1dc74:	0001e005 	.word	0x0001e005
   1dc78:	0001d55d 	.word	0x0001d55d
   1dc7c:	000f4240 	.word	0x000f4240
   1dc80:	02dc6c00 	.word	0x02dc6c00
   1dc84:	0001d781 	.word	0x0001d781
   1dc88:	0001d939 	.word	0x0001d939
   1dc8c:	0001d4e9 	.word	0x0001d4e9
   1dc90:	0001d509 	.word	0x0001d509

0001dc94 <system_apb_clock_set_mask>:
{
   1dc94:	b580      	push	{r7, lr}
   1dc96:	b082      	sub	sp, #8
   1dc98:	af00      	add	r7, sp, #0
   1dc9a:	0002      	movs	r2, r0
   1dc9c:	6039      	str	r1, [r7, #0]
   1dc9e:	1dfb      	adds	r3, r7, #7
   1dca0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dca2:	1dfb      	adds	r3, r7, #7
   1dca4:	781b      	ldrb	r3, [r3, #0]
   1dca6:	2b01      	cmp	r3, #1
   1dca8:	d00a      	beq.n	1dcc0 <system_apb_clock_set_mask+0x2c>
   1dcaa:	2b02      	cmp	r3, #2
   1dcac:	d00f      	beq.n	1dcce <system_apb_clock_set_mask+0x3a>
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d114      	bne.n	1dcdc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dcb2:	4b0e      	ldr	r3, [pc, #56]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcb4:	4a0d      	ldr	r2, [pc, #52]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcb6:	6991      	ldr	r1, [r2, #24]
   1dcb8:	683a      	ldr	r2, [r7, #0]
   1dcba:	430a      	orrs	r2, r1
   1dcbc:	619a      	str	r2, [r3, #24]
			break;
   1dcbe:	e00f      	b.n	1dce0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1dcc0:	4b0a      	ldr	r3, [pc, #40]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcc2:	4a0a      	ldr	r2, [pc, #40]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcc4:	69d1      	ldr	r1, [r2, #28]
   1dcc6:	683a      	ldr	r2, [r7, #0]
   1dcc8:	430a      	orrs	r2, r1
   1dcca:	61da      	str	r2, [r3, #28]
			break;
   1dccc:	e008      	b.n	1dce0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1dcce:	4b07      	ldr	r3, [pc, #28]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcd0:	4a06      	ldr	r2, [pc, #24]	; (1dcec <system_apb_clock_set_mask+0x58>)
   1dcd2:	6a11      	ldr	r1, [r2, #32]
   1dcd4:	683a      	ldr	r2, [r7, #0]
   1dcd6:	430a      	orrs	r2, r1
   1dcd8:	621a      	str	r2, [r3, #32]
			break;
   1dcda:	e001      	b.n	1dce0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1dcdc:	2317      	movs	r3, #23
   1dcde:	e000      	b.n	1dce2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1dce0:	2300      	movs	r3, #0
}
   1dce2:	0018      	movs	r0, r3
   1dce4:	46bd      	mov	sp, r7
   1dce6:	b002      	add	sp, #8
   1dce8:	bd80      	pop	{r7, pc}
   1dcea:	46c0      	nop			; (mov r8, r8)
   1dcec:	40000400 	.word	0x40000400

0001dcf0 <system_interrupt_enter_critical_section>:
{
   1dcf0:	b580      	push	{r7, lr}
   1dcf2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1dcf4:	4b02      	ldr	r3, [pc, #8]	; (1dd00 <system_interrupt_enter_critical_section+0x10>)
   1dcf6:	4798      	blx	r3
}
   1dcf8:	46c0      	nop			; (mov r8, r8)
   1dcfa:	46bd      	mov	sp, r7
   1dcfc:	bd80      	pop	{r7, pc}
   1dcfe:	46c0      	nop			; (mov r8, r8)
   1dd00:	0001bad9 	.word	0x0001bad9

0001dd04 <system_interrupt_leave_critical_section>:
{
   1dd04:	b580      	push	{r7, lr}
   1dd06:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1dd08:	4b02      	ldr	r3, [pc, #8]	; (1dd14 <system_interrupt_leave_critical_section+0x10>)
   1dd0a:	4798      	blx	r3
}
   1dd0c:	46c0      	nop			; (mov r8, r8)
   1dd0e:	46bd      	mov	sp, r7
   1dd10:	bd80      	pop	{r7, pc}
   1dd12:	46c0      	nop			; (mov r8, r8)
   1dd14:	0001bb2d 	.word	0x0001bb2d

0001dd18 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   1dd18:	b580      	push	{r7, lr}
   1dd1a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1dd1c:	4b05      	ldr	r3, [pc, #20]	; (1dd34 <system_gclk_is_syncing+0x1c>)
   1dd1e:	785b      	ldrb	r3, [r3, #1]
   1dd20:	b2db      	uxtb	r3, r3
   1dd22:	b25b      	sxtb	r3, r3
   1dd24:	2b00      	cmp	r3, #0
   1dd26:	da01      	bge.n	1dd2c <system_gclk_is_syncing+0x14>
		return true;
   1dd28:	2301      	movs	r3, #1
   1dd2a:	e000      	b.n	1dd2e <system_gclk_is_syncing+0x16>
	}

	return false;
   1dd2c:	2300      	movs	r3, #0
}
   1dd2e:	0018      	movs	r0, r3
   1dd30:	46bd      	mov	sp, r7
   1dd32:	bd80      	pop	{r7, pc}
   1dd34:	40000c00 	.word	0x40000c00

0001dd38 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   1dd38:	b580      	push	{r7, lr}
   1dd3a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   1dd3c:	2108      	movs	r1, #8
   1dd3e:	2000      	movs	r0, #0
   1dd40:	4b07      	ldr	r3, [pc, #28]	; (1dd60 <system_gclk_init+0x28>)
   1dd42:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1dd44:	4b07      	ldr	r3, [pc, #28]	; (1dd64 <system_gclk_init+0x2c>)
   1dd46:	2201      	movs	r2, #1
   1dd48:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1dd4a:	46c0      	nop			; (mov r8, r8)
   1dd4c:	4b05      	ldr	r3, [pc, #20]	; (1dd64 <system_gclk_init+0x2c>)
   1dd4e:	781b      	ldrb	r3, [r3, #0]
   1dd50:	b2db      	uxtb	r3, r3
   1dd52:	001a      	movs	r2, r3
   1dd54:	2301      	movs	r3, #1
   1dd56:	4013      	ands	r3, r2
   1dd58:	d1f8      	bne.n	1dd4c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1dd5a:	46c0      	nop			; (mov r8, r8)
   1dd5c:	46bd      	mov	sp, r7
   1dd5e:	bd80      	pop	{r7, pc}
   1dd60:	0001dc95 	.word	0x0001dc95
   1dd64:	40000c00 	.word	0x40000c00

0001dd68 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1dd68:	b580      	push	{r7, lr}
   1dd6a:	b086      	sub	sp, #24
   1dd6c:	af00      	add	r7, sp, #0
   1dd6e:	0002      	movs	r2, r0
   1dd70:	6039      	str	r1, [r7, #0]
   1dd72:	1dfb      	adds	r3, r7, #7
   1dd74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1dd76:	1dfb      	adds	r3, r7, #7
   1dd78:	781b      	ldrb	r3, [r3, #0]
   1dd7a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   1dd7c:	1dfb      	adds	r3, r7, #7
   1dd7e:	781b      	ldrb	r3, [r3, #0]
   1dd80:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1dd82:	683b      	ldr	r3, [r7, #0]
   1dd84:	781b      	ldrb	r3, [r3, #0]
   1dd86:	021b      	lsls	r3, r3, #8
   1dd88:	001a      	movs	r2, r3
   1dd8a:	697b      	ldr	r3, [r7, #20]
   1dd8c:	4313      	orrs	r3, r2
   1dd8e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1dd90:	683b      	ldr	r3, [r7, #0]
   1dd92:	785b      	ldrb	r3, [r3, #1]
   1dd94:	2b00      	cmp	r3, #0
   1dd96:	d004      	beq.n	1dda2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1dd98:	697b      	ldr	r3, [r7, #20]
   1dd9a:	2280      	movs	r2, #128	; 0x80
   1dd9c:	02d2      	lsls	r2, r2, #11
   1dd9e:	4313      	orrs	r3, r2
   1dda0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1dda2:	683b      	ldr	r3, [r7, #0]
   1dda4:	7a5b      	ldrb	r3, [r3, #9]
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	d004      	beq.n	1ddb4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1ddaa:	697b      	ldr	r3, [r7, #20]
   1ddac:	2280      	movs	r2, #128	; 0x80
   1ddae:	0312      	lsls	r2, r2, #12
   1ddb0:	4313      	orrs	r3, r2
   1ddb2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1ddb4:	683b      	ldr	r3, [r7, #0]
   1ddb6:	685b      	ldr	r3, [r3, #4]
   1ddb8:	2b01      	cmp	r3, #1
   1ddba:	d92c      	bls.n	1de16 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1ddbc:	683b      	ldr	r3, [r7, #0]
   1ddbe:	685a      	ldr	r2, [r3, #4]
   1ddc0:	683b      	ldr	r3, [r7, #0]
   1ddc2:	685b      	ldr	r3, [r3, #4]
   1ddc4:	3b01      	subs	r3, #1
   1ddc6:	4013      	ands	r3, r2
   1ddc8:	d11a      	bne.n	1de00 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   1ddca:	2300      	movs	r3, #0
   1ddcc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1ddce:	2302      	movs	r3, #2
   1ddd0:	60bb      	str	r3, [r7, #8]
   1ddd2:	e005      	b.n	1dde0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   1ddd4:	68fb      	ldr	r3, [r7, #12]
   1ddd6:	3301      	adds	r3, #1
   1ddd8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   1ddda:	68bb      	ldr	r3, [r7, #8]
   1dddc:	005b      	lsls	r3, r3, #1
   1ddde:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1dde0:	683b      	ldr	r3, [r7, #0]
   1dde2:	685a      	ldr	r2, [r3, #4]
   1dde4:	68bb      	ldr	r3, [r7, #8]
   1dde6:	429a      	cmp	r2, r3
   1dde8:	d8f4      	bhi.n	1ddd4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1ddea:	68fb      	ldr	r3, [r7, #12]
   1ddec:	021b      	lsls	r3, r3, #8
   1ddee:	693a      	ldr	r2, [r7, #16]
   1ddf0:	4313      	orrs	r3, r2
   1ddf2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1ddf4:	697b      	ldr	r3, [r7, #20]
   1ddf6:	2280      	movs	r2, #128	; 0x80
   1ddf8:	0352      	lsls	r2, r2, #13
   1ddfa:	4313      	orrs	r3, r2
   1ddfc:	617b      	str	r3, [r7, #20]
   1ddfe:	e00a      	b.n	1de16 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1de00:	683b      	ldr	r3, [r7, #0]
   1de02:	685b      	ldr	r3, [r3, #4]
   1de04:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   1de06:	693a      	ldr	r2, [r7, #16]
   1de08:	4313      	orrs	r3, r2
   1de0a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1de0c:	697b      	ldr	r3, [r7, #20]
   1de0e:	2280      	movs	r2, #128	; 0x80
   1de10:	0292      	lsls	r2, r2, #10
   1de12:	4313      	orrs	r3, r2
   1de14:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1de16:	683b      	ldr	r3, [r7, #0]
   1de18:	7a1b      	ldrb	r3, [r3, #8]
   1de1a:	2b00      	cmp	r3, #0
   1de1c:	d004      	beq.n	1de28 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1de1e:	697b      	ldr	r3, [r7, #20]
   1de20:	2280      	movs	r2, #128	; 0x80
   1de22:	0392      	lsls	r2, r2, #14
   1de24:	4313      	orrs	r3, r2
   1de26:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   1de28:	46c0      	nop			; (mov r8, r8)
   1de2a:	4b13      	ldr	r3, [pc, #76]	; (1de78 <system_gclk_gen_set_config+0x110>)
   1de2c:	4798      	blx	r3
   1de2e:	1e03      	subs	r3, r0, #0
   1de30:	d1fb      	bne.n	1de2a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1de32:	4b12      	ldr	r3, [pc, #72]	; (1de7c <system_gclk_gen_set_config+0x114>)
   1de34:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1de36:	4a12      	ldr	r2, [pc, #72]	; (1de80 <system_gclk_gen_set_config+0x118>)
   1de38:	1dfb      	adds	r3, r7, #7
   1de3a:	781b      	ldrb	r3, [r3, #0]
   1de3c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1de3e:	46c0      	nop			; (mov r8, r8)
   1de40:	4b0d      	ldr	r3, [pc, #52]	; (1de78 <system_gclk_gen_set_config+0x110>)
   1de42:	4798      	blx	r3
   1de44:	1e03      	subs	r3, r0, #0
   1de46:	d1fb      	bne.n	1de40 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1de48:	4b0e      	ldr	r3, [pc, #56]	; (1de84 <system_gclk_gen_set_config+0x11c>)
   1de4a:	693a      	ldr	r2, [r7, #16]
   1de4c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1de4e:	46c0      	nop			; (mov r8, r8)
   1de50:	4b09      	ldr	r3, [pc, #36]	; (1de78 <system_gclk_gen_set_config+0x110>)
   1de52:	4798      	blx	r3
   1de54:	1e03      	subs	r3, r0, #0
   1de56:	d1fb      	bne.n	1de50 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1de58:	4b0a      	ldr	r3, [pc, #40]	; (1de84 <system_gclk_gen_set_config+0x11c>)
   1de5a:	4a0a      	ldr	r2, [pc, #40]	; (1de84 <system_gclk_gen_set_config+0x11c>)
   1de5c:	6851      	ldr	r1, [r2, #4]
   1de5e:	2280      	movs	r2, #128	; 0x80
   1de60:	0252      	lsls	r2, r2, #9
   1de62:	4011      	ands	r1, r2
   1de64:	697a      	ldr	r2, [r7, #20]
   1de66:	430a      	orrs	r2, r1
   1de68:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1de6a:	4b07      	ldr	r3, [pc, #28]	; (1de88 <system_gclk_gen_set_config+0x120>)
   1de6c:	4798      	blx	r3
}
   1de6e:	46c0      	nop			; (mov r8, r8)
   1de70:	46bd      	mov	sp, r7
   1de72:	b006      	add	sp, #24
   1de74:	bd80      	pop	{r7, pc}
   1de76:	46c0      	nop			; (mov r8, r8)
   1de78:	0001dd19 	.word	0x0001dd19
   1de7c:	0001dcf1 	.word	0x0001dcf1
   1de80:	40000c08 	.word	0x40000c08
   1de84:	40000c00 	.word	0x40000c00
   1de88:	0001dd05 	.word	0x0001dd05

0001de8c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1de8c:	b580      	push	{r7, lr}
   1de8e:	b082      	sub	sp, #8
   1de90:	af00      	add	r7, sp, #0
   1de92:	0002      	movs	r2, r0
   1de94:	1dfb      	adds	r3, r7, #7
   1de96:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   1de98:	46c0      	nop			; (mov r8, r8)
   1de9a:	4b0e      	ldr	r3, [pc, #56]	; (1ded4 <system_gclk_gen_enable+0x48>)
   1de9c:	4798      	blx	r3
   1de9e:	1e03      	subs	r3, r0, #0
   1dea0:	d1fb      	bne.n	1de9a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1dea2:	4b0d      	ldr	r3, [pc, #52]	; (1ded8 <system_gclk_gen_enable+0x4c>)
   1dea4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1dea6:	4a0d      	ldr	r2, [pc, #52]	; (1dedc <system_gclk_gen_enable+0x50>)
   1dea8:	1dfb      	adds	r3, r7, #7
   1deaa:	781b      	ldrb	r3, [r3, #0]
   1deac:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1deae:	46c0      	nop			; (mov r8, r8)
   1deb0:	4b08      	ldr	r3, [pc, #32]	; (1ded4 <system_gclk_gen_enable+0x48>)
   1deb2:	4798      	blx	r3
   1deb4:	1e03      	subs	r3, r0, #0
   1deb6:	d1fb      	bne.n	1deb0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1deb8:	4b09      	ldr	r3, [pc, #36]	; (1dee0 <system_gclk_gen_enable+0x54>)
   1deba:	4a09      	ldr	r2, [pc, #36]	; (1dee0 <system_gclk_gen_enable+0x54>)
   1debc:	6852      	ldr	r2, [r2, #4]
   1debe:	2180      	movs	r1, #128	; 0x80
   1dec0:	0249      	lsls	r1, r1, #9
   1dec2:	430a      	orrs	r2, r1
   1dec4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1dec6:	4b07      	ldr	r3, [pc, #28]	; (1dee4 <system_gclk_gen_enable+0x58>)
   1dec8:	4798      	blx	r3
}
   1deca:	46c0      	nop			; (mov r8, r8)
   1decc:	46bd      	mov	sp, r7
   1dece:	b002      	add	sp, #8
   1ded0:	bd80      	pop	{r7, pc}
   1ded2:	46c0      	nop			; (mov r8, r8)
   1ded4:	0001dd19 	.word	0x0001dd19
   1ded8:	0001dcf1 	.word	0x0001dcf1
   1dedc:	40000c04 	.word	0x40000c04
   1dee0:	40000c00 	.word	0x40000c00
   1dee4:	0001dd05 	.word	0x0001dd05

0001dee8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1dee8:	b580      	push	{r7, lr}
   1deea:	b086      	sub	sp, #24
   1deec:	af00      	add	r7, sp, #0
   1deee:	0002      	movs	r2, r0
   1def0:	1dfb      	adds	r3, r7, #7
   1def2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   1def4:	46c0      	nop			; (mov r8, r8)
   1def6:	4b2a      	ldr	r3, [pc, #168]	; (1dfa0 <system_gclk_gen_get_hz+0xb8>)
   1def8:	4798      	blx	r3
   1defa:	1e03      	subs	r3, r0, #0
   1defc:	d1fb      	bne.n	1def6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1defe:	4b29      	ldr	r3, [pc, #164]	; (1dfa4 <system_gclk_gen_get_hz+0xbc>)
   1df00:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1df02:	4a29      	ldr	r2, [pc, #164]	; (1dfa8 <system_gclk_gen_get_hz+0xc0>)
   1df04:	1dfb      	adds	r3, r7, #7
   1df06:	781b      	ldrb	r3, [r3, #0]
   1df08:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1df0a:	46c0      	nop			; (mov r8, r8)
   1df0c:	4b24      	ldr	r3, [pc, #144]	; (1dfa0 <system_gclk_gen_get_hz+0xb8>)
   1df0e:	4798      	blx	r3
   1df10:	1e03      	subs	r3, r0, #0
   1df12:	d1fb      	bne.n	1df0c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1df14:	4b25      	ldr	r3, [pc, #148]	; (1dfac <system_gclk_gen_get_hz+0xc4>)
   1df16:	685b      	ldr	r3, [r3, #4]
   1df18:	04db      	lsls	r3, r3, #19
   1df1a:	0edb      	lsrs	r3, r3, #27
   1df1c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1df1e:	0018      	movs	r0, r3
   1df20:	4b23      	ldr	r3, [pc, #140]	; (1dfb0 <system_gclk_gen_get_hz+0xc8>)
   1df22:	4798      	blx	r3
   1df24:	0003      	movs	r3, r0
   1df26:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1df28:	4a1f      	ldr	r2, [pc, #124]	; (1dfa8 <system_gclk_gen_get_hz+0xc0>)
   1df2a:	1dfb      	adds	r3, r7, #7
   1df2c:	781b      	ldrb	r3, [r3, #0]
   1df2e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1df30:	4b1e      	ldr	r3, [pc, #120]	; (1dfac <system_gclk_gen_get_hz+0xc4>)
   1df32:	685b      	ldr	r3, [r3, #4]
   1df34:	02db      	lsls	r3, r3, #11
   1df36:	0fdb      	lsrs	r3, r3, #31
   1df38:	b2da      	uxtb	r2, r3
   1df3a:	2313      	movs	r3, #19
   1df3c:	18fb      	adds	r3, r7, r3
   1df3e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1df40:	4a1c      	ldr	r2, [pc, #112]	; (1dfb4 <system_gclk_gen_get_hz+0xcc>)
   1df42:	1dfb      	adds	r3, r7, #7
   1df44:	781b      	ldrb	r3, [r3, #0]
   1df46:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1df48:	46c0      	nop			; (mov r8, r8)
   1df4a:	4b15      	ldr	r3, [pc, #84]	; (1dfa0 <system_gclk_gen_get_hz+0xb8>)
   1df4c:	4798      	blx	r3
   1df4e:	1e03      	subs	r3, r0, #0
   1df50:	d1fb      	bne.n	1df4a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1df52:	4b16      	ldr	r3, [pc, #88]	; (1dfac <system_gclk_gen_get_hz+0xc4>)
   1df54:	689b      	ldr	r3, [r3, #8]
   1df56:	021b      	lsls	r3, r3, #8
   1df58:	0c1b      	lsrs	r3, r3, #16
   1df5a:	b29b      	uxth	r3, r3
   1df5c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1df5e:	4b16      	ldr	r3, [pc, #88]	; (1dfb8 <system_gclk_gen_get_hz+0xd0>)
   1df60:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1df62:	2313      	movs	r3, #19
   1df64:	18fb      	adds	r3, r7, r3
   1df66:	781b      	ldrb	r3, [r3, #0]
   1df68:	2b00      	cmp	r3, #0
   1df6a:	d109      	bne.n	1df80 <system_gclk_gen_get_hz+0x98>
   1df6c:	68fb      	ldr	r3, [r7, #12]
   1df6e:	2b01      	cmp	r3, #1
   1df70:	d906      	bls.n	1df80 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1df72:	4b12      	ldr	r3, [pc, #72]	; (1dfbc <system_gclk_gen_get_hz+0xd4>)
   1df74:	68f9      	ldr	r1, [r7, #12]
   1df76:	6978      	ldr	r0, [r7, #20]
   1df78:	4798      	blx	r3
   1df7a:	0003      	movs	r3, r0
   1df7c:	617b      	str	r3, [r7, #20]
   1df7e:	e00a      	b.n	1df96 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1df80:	2313      	movs	r3, #19
   1df82:	18fb      	adds	r3, r7, r3
   1df84:	781b      	ldrb	r3, [r3, #0]
   1df86:	2b00      	cmp	r3, #0
   1df88:	d005      	beq.n	1df96 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1df8a:	68fb      	ldr	r3, [r7, #12]
   1df8c:	3301      	adds	r3, #1
   1df8e:	697a      	ldr	r2, [r7, #20]
   1df90:	40da      	lsrs	r2, r3
   1df92:	0013      	movs	r3, r2
   1df94:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   1df96:	697b      	ldr	r3, [r7, #20]
}
   1df98:	0018      	movs	r0, r3
   1df9a:	46bd      	mov	sp, r7
   1df9c:	b006      	add	sp, #24
   1df9e:	bd80      	pop	{r7, pc}
   1dfa0:	0001dd19 	.word	0x0001dd19
   1dfa4:	0001dcf1 	.word	0x0001dcf1
   1dfa8:	40000c04 	.word	0x40000c04
   1dfac:	40000c00 	.word	0x40000c00
   1dfb0:	0001d649 	.word	0x0001d649
   1dfb4:	40000c08 	.word	0x40000c08
   1dfb8:	0001dd05 	.word	0x0001dd05
   1dfbc:	0001f40d 	.word	0x0001f40d

0001dfc0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1dfc0:	b580      	push	{r7, lr}
   1dfc2:	b084      	sub	sp, #16
   1dfc4:	af00      	add	r7, sp, #0
   1dfc6:	0002      	movs	r2, r0
   1dfc8:	6039      	str	r1, [r7, #0]
   1dfca:	1dfb      	adds	r3, r7, #7
   1dfcc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1dfce:	1dfb      	adds	r3, r7, #7
   1dfd0:	781b      	ldrb	r3, [r3, #0]
   1dfd2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1dfd4:	683b      	ldr	r3, [r7, #0]
   1dfd6:	781b      	ldrb	r3, [r3, #0]
   1dfd8:	021b      	lsls	r3, r3, #8
   1dfda:	001a      	movs	r2, r3
   1dfdc:	68fb      	ldr	r3, [r7, #12]
   1dfde:	4313      	orrs	r3, r2
   1dfe0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1dfe2:	1dfb      	adds	r3, r7, #7
   1dfe4:	781b      	ldrb	r3, [r3, #0]
   1dfe6:	0018      	movs	r0, r3
   1dfe8:	4b04      	ldr	r3, [pc, #16]	; (1dffc <system_gclk_chan_set_config+0x3c>)
   1dfea:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1dfec:	4b04      	ldr	r3, [pc, #16]	; (1e000 <system_gclk_chan_set_config+0x40>)
   1dfee:	68fa      	ldr	r2, [r7, #12]
   1dff0:	b292      	uxth	r2, r2
   1dff2:	805a      	strh	r2, [r3, #2]
}
   1dff4:	46c0      	nop			; (mov r8, r8)
   1dff6:	46bd      	mov	sp, r7
   1dff8:	b004      	add	sp, #16
   1dffa:	bd80      	pop	{r7, pc}
   1dffc:	0001e04d 	.word	0x0001e04d
   1e000:	40000c00 	.word	0x40000c00

0001e004 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1e004:	b580      	push	{r7, lr}
   1e006:	b082      	sub	sp, #8
   1e008:	af00      	add	r7, sp, #0
   1e00a:	0002      	movs	r2, r0
   1e00c:	1dfb      	adds	r3, r7, #7
   1e00e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1e010:	4b0a      	ldr	r3, [pc, #40]	; (1e03c <system_gclk_chan_enable+0x38>)
   1e012:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1e014:	4a0a      	ldr	r2, [pc, #40]	; (1e040 <system_gclk_chan_enable+0x3c>)
   1e016:	1dfb      	adds	r3, r7, #7
   1e018:	781b      	ldrb	r3, [r3, #0]
   1e01a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1e01c:	4909      	ldr	r1, [pc, #36]	; (1e044 <system_gclk_chan_enable+0x40>)
   1e01e:	4b09      	ldr	r3, [pc, #36]	; (1e044 <system_gclk_chan_enable+0x40>)
   1e020:	885b      	ldrh	r3, [r3, #2]
   1e022:	b29b      	uxth	r3, r3
   1e024:	2280      	movs	r2, #128	; 0x80
   1e026:	01d2      	lsls	r2, r2, #7
   1e028:	4313      	orrs	r3, r2
   1e02a:	b29b      	uxth	r3, r3
   1e02c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1e02e:	4b06      	ldr	r3, [pc, #24]	; (1e048 <system_gclk_chan_enable+0x44>)
   1e030:	4798      	blx	r3
}
   1e032:	46c0      	nop			; (mov r8, r8)
   1e034:	46bd      	mov	sp, r7
   1e036:	b002      	add	sp, #8
   1e038:	bd80      	pop	{r7, pc}
   1e03a:	46c0      	nop			; (mov r8, r8)
   1e03c:	0001dcf1 	.word	0x0001dcf1
   1e040:	40000c02 	.word	0x40000c02
   1e044:	40000c00 	.word	0x40000c00
   1e048:	0001dd05 	.word	0x0001dd05

0001e04c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1e04c:	b580      	push	{r7, lr}
   1e04e:	b084      	sub	sp, #16
   1e050:	af00      	add	r7, sp, #0
   1e052:	0002      	movs	r2, r0
   1e054:	1dfb      	adds	r3, r7, #7
   1e056:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1e058:	4b1c      	ldr	r3, [pc, #112]	; (1e0cc <system_gclk_chan_disable+0x80>)
   1e05a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1e05c:	4a1c      	ldr	r2, [pc, #112]	; (1e0d0 <system_gclk_chan_disable+0x84>)
   1e05e:	1dfb      	adds	r3, r7, #7
   1e060:	781b      	ldrb	r3, [r3, #0]
   1e062:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1e064:	4b1b      	ldr	r3, [pc, #108]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e066:	885b      	ldrh	r3, [r3, #2]
   1e068:	051b      	lsls	r3, r3, #20
   1e06a:	0f1b      	lsrs	r3, r3, #28
   1e06c:	b2db      	uxtb	r3, r3
   1e06e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1e070:	4a18      	ldr	r2, [pc, #96]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e072:	8853      	ldrh	r3, [r2, #2]
   1e074:	4918      	ldr	r1, [pc, #96]	; (1e0d8 <system_gclk_chan_disable+0x8c>)
   1e076:	400b      	ands	r3, r1
   1e078:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1e07a:	4a16      	ldr	r2, [pc, #88]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e07c:	4b15      	ldr	r3, [pc, #84]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e07e:	885b      	ldrh	r3, [r3, #2]
   1e080:	b29b      	uxth	r3, r3
   1e082:	4916      	ldr	r1, [pc, #88]	; (1e0dc <system_gclk_chan_disable+0x90>)
   1e084:	400b      	ands	r3, r1
   1e086:	b29b      	uxth	r3, r3
   1e088:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1e08a:	46c0      	nop			; (mov r8, r8)
   1e08c:	4b11      	ldr	r3, [pc, #68]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e08e:	885b      	ldrh	r3, [r3, #2]
   1e090:	b29b      	uxth	r3, r3
   1e092:	001a      	movs	r2, r3
   1e094:	2380      	movs	r3, #128	; 0x80
   1e096:	01db      	lsls	r3, r3, #7
   1e098:	4013      	ands	r3, r2
   1e09a:	d1f7      	bne.n	1e08c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1e09c:	4a0d      	ldr	r2, [pc, #52]	; (1e0d4 <system_gclk_chan_disable+0x88>)
   1e09e:	68fb      	ldr	r3, [r7, #12]
   1e0a0:	b2db      	uxtb	r3, r3
   1e0a2:	1c19      	adds	r1, r3, #0
   1e0a4:	230f      	movs	r3, #15
   1e0a6:	400b      	ands	r3, r1
   1e0a8:	b2d9      	uxtb	r1, r3
   1e0aa:	8853      	ldrh	r3, [r2, #2]
   1e0ac:	1c08      	adds	r0, r1, #0
   1e0ae:	210f      	movs	r1, #15
   1e0b0:	4001      	ands	r1, r0
   1e0b2:	0208      	lsls	r0, r1, #8
   1e0b4:	4908      	ldr	r1, [pc, #32]	; (1e0d8 <system_gclk_chan_disable+0x8c>)
   1e0b6:	400b      	ands	r3, r1
   1e0b8:	1c19      	adds	r1, r3, #0
   1e0ba:	1c03      	adds	r3, r0, #0
   1e0bc:	430b      	orrs	r3, r1
   1e0be:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   1e0c0:	4b07      	ldr	r3, [pc, #28]	; (1e0e0 <system_gclk_chan_disable+0x94>)
   1e0c2:	4798      	blx	r3
}
   1e0c4:	46c0      	nop			; (mov r8, r8)
   1e0c6:	46bd      	mov	sp, r7
   1e0c8:	b004      	add	sp, #16
   1e0ca:	bd80      	pop	{r7, pc}
   1e0cc:	0001dcf1 	.word	0x0001dcf1
   1e0d0:	40000c02 	.word	0x40000c02
   1e0d4:	40000c00 	.word	0x40000c00
   1e0d8:	fffff0ff 	.word	0xfffff0ff
   1e0dc:	ffffbfff 	.word	0xffffbfff
   1e0e0:	0001dd05 	.word	0x0001dd05

0001e0e4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1e0e4:	b580      	push	{r7, lr}
   1e0e6:	b084      	sub	sp, #16
   1e0e8:	af00      	add	r7, sp, #0
   1e0ea:	0002      	movs	r2, r0
   1e0ec:	1dfb      	adds	r3, r7, #7
   1e0ee:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1e0f0:	4b0d      	ldr	r3, [pc, #52]	; (1e128 <system_gclk_chan_get_hz+0x44>)
   1e0f2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1e0f4:	4a0d      	ldr	r2, [pc, #52]	; (1e12c <system_gclk_chan_get_hz+0x48>)
   1e0f6:	1dfb      	adds	r3, r7, #7
   1e0f8:	781b      	ldrb	r3, [r3, #0]
   1e0fa:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1e0fc:	4b0c      	ldr	r3, [pc, #48]	; (1e130 <system_gclk_chan_get_hz+0x4c>)
   1e0fe:	885b      	ldrh	r3, [r3, #2]
   1e100:	051b      	lsls	r3, r3, #20
   1e102:	0f1b      	lsrs	r3, r3, #28
   1e104:	b2da      	uxtb	r2, r3
   1e106:	230f      	movs	r3, #15
   1e108:	18fb      	adds	r3, r7, r3
   1e10a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   1e10c:	4b09      	ldr	r3, [pc, #36]	; (1e134 <system_gclk_chan_get_hz+0x50>)
   1e10e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1e110:	230f      	movs	r3, #15
   1e112:	18fb      	adds	r3, r7, r3
   1e114:	781b      	ldrb	r3, [r3, #0]
   1e116:	0018      	movs	r0, r3
   1e118:	4b07      	ldr	r3, [pc, #28]	; (1e138 <system_gclk_chan_get_hz+0x54>)
   1e11a:	4798      	blx	r3
   1e11c:	0003      	movs	r3, r0
}
   1e11e:	0018      	movs	r0, r3
   1e120:	46bd      	mov	sp, r7
   1e122:	b004      	add	sp, #16
   1e124:	bd80      	pop	{r7, pc}
   1e126:	46c0      	nop			; (mov r8, r8)
   1e128:	0001dcf1 	.word	0x0001dcf1
   1e12c:	40000c02 	.word	0x40000c02
   1e130:	40000c00 	.word	0x40000c00
   1e134:	0001dd05 	.word	0x0001dd05
   1e138:	0001dee9 	.word	0x0001dee9

0001e13c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   1e13c:	b580      	push	{r7, lr}
   1e13e:	b084      	sub	sp, #16
   1e140:	af00      	add	r7, sp, #0
   1e142:	0002      	movs	r2, r0
   1e144:	1dfb      	adds	r3, r7, #7
   1e146:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   1e148:	230f      	movs	r3, #15
   1e14a:	18fb      	adds	r3, r7, r3
   1e14c:	2200      	movs	r2, #0
   1e14e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1e150:	1dfb      	adds	r3, r7, #7
   1e152:	781b      	ldrb	r3, [r3, #0]
   1e154:	2b7f      	cmp	r3, #127	; 0x7f
   1e156:	d80b      	bhi.n	1e170 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   1e158:	4a13      	ldr	r2, [pc, #76]	; (1e1a8 <system_interrupt_clear_pending+0x6c>)
   1e15a:	1dfb      	adds	r3, r7, #7
   1e15c:	781b      	ldrb	r3, [r3, #0]
   1e15e:	b25b      	sxtb	r3, r3
   1e160:	2101      	movs	r1, #1
   1e162:	4099      	lsls	r1, r3
   1e164:	000b      	movs	r3, r1
   1e166:	0019      	movs	r1, r3
   1e168:	23c0      	movs	r3, #192	; 0xc0
   1e16a:	005b      	lsls	r3, r3, #1
   1e16c:	50d1      	str	r1, [r2, r3]
   1e16e:	e014      	b.n	1e19a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   1e170:	1dfb      	adds	r3, r7, #7
   1e172:	781b      	ldrb	r3, [r3, #0]
   1e174:	b25b      	sxtb	r3, r3
   1e176:	330e      	adds	r3, #14
   1e178:	d101      	bne.n	1e17e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   1e17a:	2317      	movs	r3, #23
   1e17c:	e010      	b.n	1e1a0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1e17e:	1dfb      	adds	r3, r7, #7
   1e180:	781b      	ldrb	r3, [r3, #0]
   1e182:	b25b      	sxtb	r3, r3
   1e184:	3301      	adds	r3, #1
   1e186:	d104      	bne.n	1e192 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1e188:	4b08      	ldr	r3, [pc, #32]	; (1e1ac <system_interrupt_clear_pending+0x70>)
   1e18a:	2280      	movs	r2, #128	; 0x80
   1e18c:	0492      	lsls	r2, r2, #18
   1e18e:	605a      	str	r2, [r3, #4]
   1e190:	e003      	b.n	1e19a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   1e192:	230f      	movs	r3, #15
   1e194:	18fb      	adds	r3, r7, r3
   1e196:	2217      	movs	r2, #23
   1e198:	701a      	strb	r2, [r3, #0]
	}

	return status;
   1e19a:	230f      	movs	r3, #15
   1e19c:	18fb      	adds	r3, r7, r3
   1e19e:	781b      	ldrb	r3, [r3, #0]
}
   1e1a0:	0018      	movs	r0, r3
   1e1a2:	46bd      	mov	sp, r7
   1e1a4:	b004      	add	sp, #16
   1e1a6:	bd80      	pop	{r7, pc}
   1e1a8:	e000e100 	.word	0xe000e100
   1e1ac:	e000ed00 	.word	0xe000ed00

0001e1b0 <system_pinmux_get_group_from_gpio_pin>:
{
   1e1b0:	b580      	push	{r7, lr}
   1e1b2:	b084      	sub	sp, #16
   1e1b4:	af00      	add	r7, sp, #0
   1e1b6:	0002      	movs	r2, r0
   1e1b8:	1dfb      	adds	r3, r7, #7
   1e1ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e1bc:	230f      	movs	r3, #15
   1e1be:	18fb      	adds	r3, r7, r3
   1e1c0:	1dfa      	adds	r2, r7, #7
   1e1c2:	7812      	ldrb	r2, [r2, #0]
   1e1c4:	09d2      	lsrs	r2, r2, #7
   1e1c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e1c8:	230e      	movs	r3, #14
   1e1ca:	18fb      	adds	r3, r7, r3
   1e1cc:	1dfa      	adds	r2, r7, #7
   1e1ce:	7812      	ldrb	r2, [r2, #0]
   1e1d0:	0952      	lsrs	r2, r2, #5
   1e1d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e1d4:	4b0d      	ldr	r3, [pc, #52]	; (1e20c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e1d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e1d8:	230f      	movs	r3, #15
   1e1da:	18fb      	adds	r3, r7, r3
   1e1dc:	781b      	ldrb	r3, [r3, #0]
   1e1de:	2b00      	cmp	r3, #0
   1e1e0:	d10f      	bne.n	1e202 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e1e2:	230f      	movs	r3, #15
   1e1e4:	18fb      	adds	r3, r7, r3
   1e1e6:	781b      	ldrb	r3, [r3, #0]
   1e1e8:	009b      	lsls	r3, r3, #2
   1e1ea:	2210      	movs	r2, #16
   1e1ec:	4694      	mov	ip, r2
   1e1ee:	44bc      	add	ip, r7
   1e1f0:	4463      	add	r3, ip
   1e1f2:	3b08      	subs	r3, #8
   1e1f4:	681a      	ldr	r2, [r3, #0]
   1e1f6:	230e      	movs	r3, #14
   1e1f8:	18fb      	adds	r3, r7, r3
   1e1fa:	781b      	ldrb	r3, [r3, #0]
   1e1fc:	01db      	lsls	r3, r3, #7
   1e1fe:	18d3      	adds	r3, r2, r3
   1e200:	e000      	b.n	1e204 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e202:	2300      	movs	r3, #0
}
   1e204:	0018      	movs	r0, r3
   1e206:	46bd      	mov	sp, r7
   1e208:	b004      	add	sp, #16
   1e20a:	bd80      	pop	{r7, pc}
   1e20c:	41004400 	.word	0x41004400

0001e210 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1e210:	b580      	push	{r7, lr}
   1e212:	b088      	sub	sp, #32
   1e214:	af00      	add	r7, sp, #0
   1e216:	60f8      	str	r0, [r7, #12]
   1e218:	60b9      	str	r1, [r7, #8]
   1e21a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   1e21c:	2300      	movs	r3, #0
   1e21e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1e220:	687b      	ldr	r3, [r7, #4]
   1e222:	78db      	ldrb	r3, [r3, #3]
   1e224:	2201      	movs	r2, #1
   1e226:	4053      	eors	r3, r2
   1e228:	b2db      	uxtb	r3, r3
   1e22a:	2b00      	cmp	r3, #0
   1e22c:	d035      	beq.n	1e29a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1e22e:	687b      	ldr	r3, [r7, #4]
   1e230:	781b      	ldrb	r3, [r3, #0]
   1e232:	2b80      	cmp	r3, #128	; 0x80
   1e234:	d00b      	beq.n	1e24e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1e236:	69fb      	ldr	r3, [r7, #28]
   1e238:	2280      	movs	r2, #128	; 0x80
   1e23a:	0252      	lsls	r2, r2, #9
   1e23c:	4313      	orrs	r3, r2
   1e23e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1e240:	687b      	ldr	r3, [r7, #4]
   1e242:	781b      	ldrb	r3, [r3, #0]
   1e244:	061b      	lsls	r3, r3, #24
   1e246:	001a      	movs	r2, r3
   1e248:	69fb      	ldr	r3, [r7, #28]
   1e24a:	4313      	orrs	r3, r2
   1e24c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1e24e:	687b      	ldr	r3, [r7, #4]
   1e250:	785b      	ldrb	r3, [r3, #1]
   1e252:	2b00      	cmp	r3, #0
   1e254:	d003      	beq.n	1e25e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1e256:	687b      	ldr	r3, [r7, #4]
   1e258:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1e25a:	2b02      	cmp	r3, #2
   1e25c:	d110      	bne.n	1e280 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1e25e:	69fb      	ldr	r3, [r7, #28]
   1e260:	2280      	movs	r2, #128	; 0x80
   1e262:	0292      	lsls	r2, r2, #10
   1e264:	4313      	orrs	r3, r2
   1e266:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1e268:	687b      	ldr	r3, [r7, #4]
   1e26a:	789b      	ldrb	r3, [r3, #2]
   1e26c:	2b00      	cmp	r3, #0
   1e26e:	d004      	beq.n	1e27a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1e270:	69fb      	ldr	r3, [r7, #28]
   1e272:	2280      	movs	r2, #128	; 0x80
   1e274:	02d2      	lsls	r2, r2, #11
   1e276:	4313      	orrs	r3, r2
   1e278:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1e27a:	68fb      	ldr	r3, [r7, #12]
   1e27c:	68ba      	ldr	r2, [r7, #8]
   1e27e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1e280:	687b      	ldr	r3, [r7, #4]
   1e282:	785b      	ldrb	r3, [r3, #1]
   1e284:	2b01      	cmp	r3, #1
   1e286:	d003      	beq.n	1e290 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1e288:	687b      	ldr	r3, [r7, #4]
   1e28a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1e28c:	2b02      	cmp	r3, #2
   1e28e:	d107      	bne.n	1e2a0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1e290:	69fb      	ldr	r3, [r7, #28]
   1e292:	4a22      	ldr	r2, [pc, #136]	; (1e31c <_system_pinmux_config+0x10c>)
   1e294:	4013      	ands	r3, r2
   1e296:	61fb      	str	r3, [r7, #28]
   1e298:	e002      	b.n	1e2a0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   1e29a:	68fb      	ldr	r3, [r7, #12]
   1e29c:	68ba      	ldr	r2, [r7, #8]
   1e29e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1e2a0:	68bb      	ldr	r3, [r7, #8]
   1e2a2:	041b      	lsls	r3, r3, #16
   1e2a4:	0c1b      	lsrs	r3, r3, #16
   1e2a6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1e2a8:	68bb      	ldr	r3, [r7, #8]
   1e2aa:	0c1b      	lsrs	r3, r3, #16
   1e2ac:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1e2ae:	69ba      	ldr	r2, [r7, #24]
   1e2b0:	69fb      	ldr	r3, [r7, #28]
   1e2b2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1e2b4:	22a0      	movs	r2, #160	; 0xa0
   1e2b6:	05d2      	lsls	r2, r2, #23
   1e2b8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1e2ba:	68fb      	ldr	r3, [r7, #12]
   1e2bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1e2be:	697a      	ldr	r2, [r7, #20]
   1e2c0:	69fb      	ldr	r3, [r7, #28]
   1e2c2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1e2c4:	22d0      	movs	r2, #208	; 0xd0
   1e2c6:	0612      	lsls	r2, r2, #24
   1e2c8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1e2ca:	68fb      	ldr	r3, [r7, #12]
   1e2cc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1e2ce:	687b      	ldr	r3, [r7, #4]
   1e2d0:	78db      	ldrb	r3, [r3, #3]
   1e2d2:	2201      	movs	r2, #1
   1e2d4:	4053      	eors	r3, r2
   1e2d6:	b2db      	uxtb	r3, r3
   1e2d8:	2b00      	cmp	r3, #0
   1e2da:	d01a      	beq.n	1e312 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1e2dc:	69fa      	ldr	r2, [r7, #28]
   1e2de:	2380      	movs	r3, #128	; 0x80
   1e2e0:	02db      	lsls	r3, r3, #11
   1e2e2:	4013      	ands	r3, r2
   1e2e4:	d00a      	beq.n	1e2fc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1e2e6:	687b      	ldr	r3, [r7, #4]
   1e2e8:	789b      	ldrb	r3, [r3, #2]
   1e2ea:	2b01      	cmp	r3, #1
   1e2ec:	d103      	bne.n	1e2f6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1e2ee:	68fb      	ldr	r3, [r7, #12]
   1e2f0:	68ba      	ldr	r2, [r7, #8]
   1e2f2:	619a      	str	r2, [r3, #24]
   1e2f4:	e002      	b.n	1e2fc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1e2f6:	68fb      	ldr	r3, [r7, #12]
   1e2f8:	68ba      	ldr	r2, [r7, #8]
   1e2fa:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1e2fc:	687b      	ldr	r3, [r7, #4]
   1e2fe:	785b      	ldrb	r3, [r3, #1]
   1e300:	2b01      	cmp	r3, #1
   1e302:	d003      	beq.n	1e30c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1e304:	687b      	ldr	r3, [r7, #4]
   1e306:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1e308:	2b02      	cmp	r3, #2
   1e30a:	d102      	bne.n	1e312 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1e30c:	68fb      	ldr	r3, [r7, #12]
   1e30e:	68ba      	ldr	r2, [r7, #8]
   1e310:	609a      	str	r2, [r3, #8]
		}
	}
}
   1e312:	46c0      	nop			; (mov r8, r8)
   1e314:	46bd      	mov	sp, r7
   1e316:	b008      	add	sp, #32
   1e318:	bd80      	pop	{r7, pc}
   1e31a:	46c0      	nop			; (mov r8, r8)
   1e31c:	fffbffff 	.word	0xfffbffff

0001e320 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1e320:	b580      	push	{r7, lr}
   1e322:	b084      	sub	sp, #16
   1e324:	af00      	add	r7, sp, #0
   1e326:	0002      	movs	r2, r0
   1e328:	6039      	str	r1, [r7, #0]
   1e32a:	1dfb      	adds	r3, r7, #7
   1e32c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e32e:	1dfb      	adds	r3, r7, #7
   1e330:	781b      	ldrb	r3, [r3, #0]
   1e332:	0018      	movs	r0, r3
   1e334:	4b0a      	ldr	r3, [pc, #40]	; (1e360 <system_pinmux_pin_set_config+0x40>)
   1e336:	4798      	blx	r3
   1e338:	0003      	movs	r3, r0
   1e33a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1e33c:	1dfb      	adds	r3, r7, #7
   1e33e:	781b      	ldrb	r3, [r3, #0]
   1e340:	221f      	movs	r2, #31
   1e342:	4013      	ands	r3, r2
   1e344:	2201      	movs	r2, #1
   1e346:	409a      	lsls	r2, r3
   1e348:	0013      	movs	r3, r2
   1e34a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   1e34c:	683a      	ldr	r2, [r7, #0]
   1e34e:	68b9      	ldr	r1, [r7, #8]
   1e350:	68fb      	ldr	r3, [r7, #12]
   1e352:	0018      	movs	r0, r3
   1e354:	4b03      	ldr	r3, [pc, #12]	; (1e364 <system_pinmux_pin_set_config+0x44>)
   1e356:	4798      	blx	r3
}
   1e358:	46c0      	nop			; (mov r8, r8)
   1e35a:	46bd      	mov	sp, r7
   1e35c:	b004      	add	sp, #16
   1e35e:	bd80      	pop	{r7, pc}
   1e360:	0001e1b1 	.word	0x0001e1b1
   1e364:	0001e211 	.word	0x0001e211

0001e368 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   1e368:	b580      	push	{r7, lr}
   1e36a:	af00      	add	r7, sp, #0
	return;
   1e36c:	46c0      	nop			; (mov r8, r8)
}
   1e36e:	46bd      	mov	sp, r7
   1e370:	bd80      	pop	{r7, pc}
	...

0001e374 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1e374:	b580      	push	{r7, lr}
   1e376:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1e378:	4b06      	ldr	r3, [pc, #24]	; (1e394 <system_init+0x20>)
   1e37a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1e37c:	4b06      	ldr	r3, [pc, #24]	; (1e398 <system_init+0x24>)
   1e37e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1e380:	4b06      	ldr	r3, [pc, #24]	; (1e39c <system_init+0x28>)
   1e382:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1e384:	4b06      	ldr	r3, [pc, #24]	; (1e3a0 <system_init+0x2c>)
   1e386:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1e388:	4b06      	ldr	r3, [pc, #24]	; (1e3a4 <system_init+0x30>)
   1e38a:	4798      	blx	r3
}
   1e38c:	46c0      	nop			; (mov r8, r8)
   1e38e:	46bd      	mov	sp, r7
   1e390:	bd80      	pop	{r7, pc}
   1e392:	46c0      	nop			; (mov r8, r8)
   1e394:	0001d9f5 	.word	0x0001d9f5
   1e398:	0001bc69 	.word	0x0001bc69
   1e39c:	00013011 	.word	0x00013011
   1e3a0:	0001bed9 	.word	0x0001bed9
   1e3a4:	0001e369 	.word	0x0001e369

0001e3a8 <system_gclk_chan_get_config_defaults>:
{
   1e3a8:	b580      	push	{r7, lr}
   1e3aa:	b082      	sub	sp, #8
   1e3ac:	af00      	add	r7, sp, #0
   1e3ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1e3b0:	687b      	ldr	r3, [r7, #4]
   1e3b2:	2200      	movs	r2, #0
   1e3b4:	701a      	strb	r2, [r3, #0]
}
   1e3b6:	46c0      	nop			; (mov r8, r8)
   1e3b8:	46bd      	mov	sp, r7
   1e3ba:	b002      	add	sp, #8
   1e3bc:	bd80      	pop	{r7, pc}
	...

0001e3c0 <system_apb_clock_set_mask>:
{
   1e3c0:	b580      	push	{r7, lr}
   1e3c2:	b082      	sub	sp, #8
   1e3c4:	af00      	add	r7, sp, #0
   1e3c6:	0002      	movs	r2, r0
   1e3c8:	6039      	str	r1, [r7, #0]
   1e3ca:	1dfb      	adds	r3, r7, #7
   1e3cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1e3ce:	1dfb      	adds	r3, r7, #7
   1e3d0:	781b      	ldrb	r3, [r3, #0]
   1e3d2:	2b01      	cmp	r3, #1
   1e3d4:	d00a      	beq.n	1e3ec <system_apb_clock_set_mask+0x2c>
   1e3d6:	2b02      	cmp	r3, #2
   1e3d8:	d00f      	beq.n	1e3fa <system_apb_clock_set_mask+0x3a>
   1e3da:	2b00      	cmp	r3, #0
   1e3dc:	d114      	bne.n	1e408 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1e3de:	4b0e      	ldr	r3, [pc, #56]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3e0:	4a0d      	ldr	r2, [pc, #52]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3e2:	6991      	ldr	r1, [r2, #24]
   1e3e4:	683a      	ldr	r2, [r7, #0]
   1e3e6:	430a      	orrs	r2, r1
   1e3e8:	619a      	str	r2, [r3, #24]
			break;
   1e3ea:	e00f      	b.n	1e40c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1e3ec:	4b0a      	ldr	r3, [pc, #40]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3ee:	4a0a      	ldr	r2, [pc, #40]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3f0:	69d1      	ldr	r1, [r2, #28]
   1e3f2:	683a      	ldr	r2, [r7, #0]
   1e3f4:	430a      	orrs	r2, r1
   1e3f6:	61da      	str	r2, [r3, #28]
			break;
   1e3f8:	e008      	b.n	1e40c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1e3fa:	4b07      	ldr	r3, [pc, #28]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3fc:	4a06      	ldr	r2, [pc, #24]	; (1e418 <system_apb_clock_set_mask+0x58>)
   1e3fe:	6a11      	ldr	r1, [r2, #32]
   1e400:	683a      	ldr	r2, [r7, #0]
   1e402:	430a      	orrs	r2, r1
   1e404:	621a      	str	r2, [r3, #32]
			break;
   1e406:	e001      	b.n	1e40c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1e408:	2317      	movs	r3, #23
   1e40a:	e000      	b.n	1e40e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1e40c:	2300      	movs	r3, #0
}
   1e40e:	0018      	movs	r0, r3
   1e410:	46bd      	mov	sp, r7
   1e412:	b002      	add	sp, #8
   1e414:	bd80      	pop	{r7, pc}
   1e416:	46c0      	nop			; (mov r8, r8)
   1e418:	40000400 	.word	0x40000400

0001e41c <system_pinmux_get_config_defaults>:
{
   1e41c:	b580      	push	{r7, lr}
   1e41e:	b082      	sub	sp, #8
   1e420:	af00      	add	r7, sp, #0
   1e422:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e424:	687b      	ldr	r3, [r7, #4]
   1e426:	2280      	movs	r2, #128	; 0x80
   1e428:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e42a:	687b      	ldr	r3, [r7, #4]
   1e42c:	2200      	movs	r2, #0
   1e42e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1e430:	687b      	ldr	r3, [r7, #4]
   1e432:	2201      	movs	r2, #1
   1e434:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1e436:	687b      	ldr	r3, [r7, #4]
   1e438:	2200      	movs	r2, #0
   1e43a:	70da      	strb	r2, [r3, #3]
}
   1e43c:	46c0      	nop			; (mov r8, r8)
   1e43e:	46bd      	mov	sp, r7
   1e440:	b002      	add	sp, #8
   1e442:	bd80      	pop	{r7, pc}

0001e444 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   1e444:	b580      	push	{r7, lr}
   1e446:	b084      	sub	sp, #16
   1e448:	af00      	add	r7, sp, #0
   1e44a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1e44c:	2300      	movs	r3, #0
   1e44e:	60fb      	str	r3, [r7, #12]
   1e450:	e00c      	b.n	1e46c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   1e452:	4b0a      	ldr	r3, [pc, #40]	; (1e47c <_tcc_get_inst_index+0x38>)
   1e454:	68fa      	ldr	r2, [r7, #12]
   1e456:	0092      	lsls	r2, r2, #2
   1e458:	58d2      	ldr	r2, [r2, r3]
   1e45a:	687b      	ldr	r3, [r7, #4]
   1e45c:	429a      	cmp	r2, r3
   1e45e:	d102      	bne.n	1e466 <_tcc_get_inst_index+0x22>
			return i;
   1e460:	68fb      	ldr	r3, [r7, #12]
   1e462:	b2db      	uxtb	r3, r3
   1e464:	e006      	b.n	1e474 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1e466:	68fb      	ldr	r3, [r7, #12]
   1e468:	3301      	adds	r3, #1
   1e46a:	60fb      	str	r3, [r7, #12]
   1e46c:	68fb      	ldr	r3, [r7, #12]
   1e46e:	2b02      	cmp	r3, #2
   1e470:	d9ef      	bls.n	1e452 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1e472:	2300      	movs	r3, #0
}
   1e474:	0018      	movs	r0, r3
   1e476:	46bd      	mov	sp, r7
   1e478:	b004      	add	sp, #16
   1e47a:	bd80      	pop	{r7, pc}
   1e47c:	000243dc 	.word	0x000243dc

0001e480 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1e480:	b590      	push	{r4, r7, lr}
   1e482:	b085      	sub	sp, #20
   1e484:	af00      	add	r7, sp, #0
   1e486:	6078      	str	r0, [r7, #4]
   1e488:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1e48a:	230f      	movs	r3, #15
   1e48c:	18fc      	adds	r4, r7, r3
   1e48e:	683b      	ldr	r3, [r7, #0]
   1e490:	0018      	movs	r0, r3
   1e492:	4bad      	ldr	r3, [pc, #692]	; (1e748 <tcc_get_config_defaults+0x2c8>)
   1e494:	4798      	blx	r3
   1e496:	0003      	movs	r3, r0
   1e498:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   1e49a:	687b      	ldr	r3, [r7, #4]
   1e49c:	2200      	movs	r2, #0
   1e49e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1e4a0:	230f      	movs	r3, #15
   1e4a2:	18fb      	adds	r3, r7, r3
   1e4a4:	781a      	ldrb	r2, [r3, #0]
   1e4a6:	4ba9      	ldr	r3, [pc, #676]	; (1e74c <tcc_get_config_defaults+0x2cc>)
   1e4a8:	0092      	lsls	r2, r2, #2
   1e4aa:	58d2      	ldr	r2, [r2, r3]
   1e4ac:	687b      	ldr	r3, [r7, #4]
   1e4ae:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1e4b0:	687b      	ldr	r3, [r7, #4]
   1e4b2:	2200      	movs	r2, #0
   1e4b4:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1e4b6:	687b      	ldr	r3, [r7, #4]
   1e4b8:	2200      	movs	r2, #0
   1e4ba:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1e4bc:	687b      	ldr	r3, [r7, #4]
   1e4be:	2200      	movs	r2, #0
   1e4c0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1e4c2:	687b      	ldr	r3, [r7, #4]
   1e4c4:	2200      	movs	r2, #0
   1e4c6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   1e4c8:	687b      	ldr	r3, [r7, #4]
   1e4ca:	2200      	movs	r2, #0
   1e4cc:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1e4ce:	687b      	ldr	r3, [r7, #4]
   1e4d0:	2200      	movs	r2, #0
   1e4d2:	61da      	str	r2, [r3, #28]
   1e4d4:	687b      	ldr	r3, [r7, #4]
   1e4d6:	2200      	movs	r2, #0
   1e4d8:	621a      	str	r2, [r3, #32]
   1e4da:	687b      	ldr	r3, [r7, #4]
   1e4dc:	2200      	movs	r2, #0
   1e4de:	625a      	str	r2, [r3, #36]	; 0x24
   1e4e0:	687b      	ldr	r3, [r7, #4]
   1e4e2:	2200      	movs	r2, #0
   1e4e4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1e4e6:	687b      	ldr	r3, [r7, #4]
   1e4e8:	2200      	movs	r2, #0
   1e4ea:	751a      	strb	r2, [r3, #20]
   1e4ec:	687b      	ldr	r3, [r7, #4]
   1e4ee:	2200      	movs	r2, #0
   1e4f0:	755a      	strb	r2, [r3, #21]
   1e4f2:	687b      	ldr	r3, [r7, #4]
   1e4f4:	2200      	movs	r2, #0
   1e4f6:	759a      	strb	r2, [r3, #22]
   1e4f8:	687b      	ldr	r3, [r7, #4]
   1e4fa:	2200      	movs	r2, #0
   1e4fc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1e4fe:	687b      	ldr	r3, [r7, #4]
   1e500:	2200      	movs	r2, #0
   1e502:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1e504:	687b      	ldr	r3, [r7, #4]
   1e506:	2200      	movs	r2, #0
   1e508:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1e50a:	687b      	ldr	r3, [r7, #4]
   1e50c:	2200      	movs	r2, #0
   1e50e:	741a      	strb	r2, [r3, #16]
   1e510:	687b      	ldr	r3, [r7, #4]
   1e512:	2200      	movs	r2, #0
   1e514:	745a      	strb	r2, [r3, #17]
   1e516:	687b      	ldr	r3, [r7, #4]
   1e518:	2200      	movs	r2, #0
   1e51a:	749a      	strb	r2, [r3, #18]
   1e51c:	687b      	ldr	r3, [r7, #4]
   1e51e:	2200      	movs	r2, #0
   1e520:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1e522:	687b      	ldr	r3, [r7, #4]
   1e524:	222c      	movs	r2, #44	; 0x2c
   1e526:	2100      	movs	r1, #0
   1e528:	5499      	strb	r1, [r3, r2]
   1e52a:	687b      	ldr	r3, [r7, #4]
   1e52c:	222d      	movs	r2, #45	; 0x2d
   1e52e:	2100      	movs	r1, #0
   1e530:	5499      	strb	r1, [r3, r2]
   1e532:	687b      	ldr	r3, [r7, #4]
   1e534:	222e      	movs	r2, #46	; 0x2e
   1e536:	2100      	movs	r1, #0
   1e538:	5499      	strb	r1, [r3, r2]
   1e53a:	687b      	ldr	r3, [r7, #4]
   1e53c:	222f      	movs	r2, #47	; 0x2f
   1e53e:	2100      	movs	r1, #0
   1e540:	5499      	strb	r1, [r3, r2]
   1e542:	687b      	ldr	r3, [r7, #4]
   1e544:	2230      	movs	r2, #48	; 0x30
   1e546:	2100      	movs	r1, #0
   1e548:	5499      	strb	r1, [r3, r2]
   1e54a:	687b      	ldr	r3, [r7, #4]
   1e54c:	2231      	movs	r2, #49	; 0x31
   1e54e:	2100      	movs	r1, #0
   1e550:	5499      	strb	r1, [r3, r2]
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	2232      	movs	r2, #50	; 0x32
   1e556:	2100      	movs	r1, #0
   1e558:	5499      	strb	r1, [r3, r2]
   1e55a:	687b      	ldr	r3, [r7, #4]
   1e55c:	2233      	movs	r2, #51	; 0x33
   1e55e:	2100      	movs	r1, #0
   1e560:	5499      	strb	r1, [r3, r2]
   1e562:	687b      	ldr	r3, [r7, #4]
   1e564:	2234      	movs	r2, #52	; 0x34
   1e566:	2100      	movs	r1, #0
   1e568:	5499      	strb	r1, [r3, r2]
   1e56a:	687b      	ldr	r3, [r7, #4]
   1e56c:	2235      	movs	r2, #53	; 0x35
   1e56e:	2100      	movs	r1, #0
   1e570:	5499      	strb	r1, [r3, r2]
   1e572:	687b      	ldr	r3, [r7, #4]
   1e574:	2236      	movs	r2, #54	; 0x36
   1e576:	2100      	movs	r1, #0
   1e578:	5499      	strb	r1, [r3, r2]
   1e57a:	687b      	ldr	r3, [r7, #4]
   1e57c:	2237      	movs	r2, #55	; 0x37
   1e57e:	2100      	movs	r1, #0
   1e580:	5499      	strb	r1, [r3, r2]
   1e582:	687b      	ldr	r3, [r7, #4]
   1e584:	2238      	movs	r2, #56	; 0x38
   1e586:	2100      	movs	r1, #0
   1e588:	5499      	strb	r1, [r3, r2]
   1e58a:	687b      	ldr	r3, [r7, #4]
   1e58c:	2239      	movs	r2, #57	; 0x39
   1e58e:	2100      	movs	r1, #0
   1e590:	5499      	strb	r1, [r3, r2]
   1e592:	687b      	ldr	r3, [r7, #4]
   1e594:	223a      	movs	r2, #58	; 0x3a
   1e596:	2100      	movs	r1, #0
   1e598:	5499      	strb	r1, [r3, r2]
   1e59a:	687b      	ldr	r3, [r7, #4]
   1e59c:	223b      	movs	r2, #59	; 0x3b
   1e59e:	2100      	movs	r1, #0
   1e5a0:	5499      	strb	r1, [r3, r2]
   1e5a2:	687b      	ldr	r3, [r7, #4]
   1e5a4:	223c      	movs	r2, #60	; 0x3c
   1e5a6:	2100      	movs	r1, #0
   1e5a8:	5499      	strb	r1, [r3, r2]
   1e5aa:	687b      	ldr	r3, [r7, #4]
   1e5ac:	223d      	movs	r2, #61	; 0x3d
   1e5ae:	2100      	movs	r1, #0
   1e5b0:	5499      	strb	r1, [r3, r2]
   1e5b2:	687b      	ldr	r3, [r7, #4]
   1e5b4:	223e      	movs	r2, #62	; 0x3e
   1e5b6:	2100      	movs	r1, #0
   1e5b8:	5499      	strb	r1, [r3, r2]
   1e5ba:	687b      	ldr	r3, [r7, #4]
   1e5bc:	223f      	movs	r2, #63	; 0x3f
   1e5be:	2100      	movs	r1, #0
   1e5c0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1e5c2:	687b      	ldr	r3, [r7, #4]
   1e5c4:	2240      	movs	r2, #64	; 0x40
   1e5c6:	2100      	movs	r1, #0
   1e5c8:	5499      	strb	r1, [r3, r2]
   1e5ca:	687b      	ldr	r3, [r7, #4]
   1e5cc:	2241      	movs	r2, #65	; 0x41
   1e5ce:	2100      	movs	r1, #0
   1e5d0:	5499      	strb	r1, [r3, r2]
   1e5d2:	687b      	ldr	r3, [r7, #4]
   1e5d4:	2242      	movs	r2, #66	; 0x42
   1e5d6:	2100      	movs	r1, #0
   1e5d8:	5499      	strb	r1, [r3, r2]
   1e5da:	687b      	ldr	r3, [r7, #4]
   1e5dc:	2243      	movs	r2, #67	; 0x43
   1e5de:	2100      	movs	r1, #0
   1e5e0:	5499      	strb	r1, [r3, r2]
   1e5e2:	687b      	ldr	r3, [r7, #4]
   1e5e4:	2244      	movs	r2, #68	; 0x44
   1e5e6:	2100      	movs	r1, #0
   1e5e8:	5499      	strb	r1, [r3, r2]
   1e5ea:	687b      	ldr	r3, [r7, #4]
   1e5ec:	2245      	movs	r2, #69	; 0x45
   1e5ee:	2100      	movs	r1, #0
   1e5f0:	5499      	strb	r1, [r3, r2]
   1e5f2:	687b      	ldr	r3, [r7, #4]
   1e5f4:	2246      	movs	r2, #70	; 0x46
   1e5f6:	2100      	movs	r1, #0
   1e5f8:	5499      	strb	r1, [r3, r2]
   1e5fa:	687b      	ldr	r3, [r7, #4]
   1e5fc:	2247      	movs	r2, #71	; 0x47
   1e5fe:	2100      	movs	r1, #0
   1e600:	5499      	strb	r1, [r3, r2]
   1e602:	687b      	ldr	r3, [r7, #4]
   1e604:	2248      	movs	r2, #72	; 0x48
   1e606:	2100      	movs	r1, #0
   1e608:	5499      	strb	r1, [r3, r2]
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	2249      	movs	r2, #73	; 0x49
   1e60e:	2100      	movs	r1, #0
   1e610:	5499      	strb	r1, [r3, r2]
   1e612:	687b      	ldr	r3, [r7, #4]
   1e614:	224a      	movs	r2, #74	; 0x4a
   1e616:	2100      	movs	r1, #0
   1e618:	5499      	strb	r1, [r3, r2]
   1e61a:	687b      	ldr	r3, [r7, #4]
   1e61c:	224b      	movs	r2, #75	; 0x4b
   1e61e:	2100      	movs	r1, #0
   1e620:	5499      	strb	r1, [r3, r2]
   1e622:	687b      	ldr	r3, [r7, #4]
   1e624:	224c      	movs	r2, #76	; 0x4c
   1e626:	2100      	movs	r1, #0
   1e628:	5499      	strb	r1, [r3, r2]
   1e62a:	687b      	ldr	r3, [r7, #4]
   1e62c:	224d      	movs	r2, #77	; 0x4d
   1e62e:	2100      	movs	r1, #0
   1e630:	5499      	strb	r1, [r3, r2]
   1e632:	687b      	ldr	r3, [r7, #4]
   1e634:	224e      	movs	r2, #78	; 0x4e
   1e636:	2100      	movs	r1, #0
   1e638:	5499      	strb	r1, [r3, r2]
   1e63a:	687b      	ldr	r3, [r7, #4]
   1e63c:	224f      	movs	r2, #79	; 0x4f
   1e63e:	2100      	movs	r1, #0
   1e640:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1e642:	687b      	ldr	r3, [r7, #4]
   1e644:	2250      	movs	r2, #80	; 0x50
   1e646:	2100      	movs	r1, #0
   1e648:	5499      	strb	r1, [r3, r2]
   1e64a:	687b      	ldr	r3, [r7, #4]
   1e64c:	2251      	movs	r2, #81	; 0x51
   1e64e:	2100      	movs	r1, #0
   1e650:	5499      	strb	r1, [r3, r2]
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	2252      	movs	r2, #82	; 0x52
   1e656:	2100      	movs	r1, #0
   1e658:	5499      	strb	r1, [r3, r2]
   1e65a:	687b      	ldr	r3, [r7, #4]
   1e65c:	2253      	movs	r2, #83	; 0x53
   1e65e:	2100      	movs	r1, #0
   1e660:	5499      	strb	r1, [r3, r2]
   1e662:	687b      	ldr	r3, [r7, #4]
   1e664:	2254      	movs	r2, #84	; 0x54
   1e666:	2100      	movs	r1, #0
   1e668:	5499      	strb	r1, [r3, r2]
   1e66a:	687b      	ldr	r3, [r7, #4]
   1e66c:	2255      	movs	r2, #85	; 0x55
   1e66e:	2100      	movs	r1, #0
   1e670:	5499      	strb	r1, [r3, r2]
   1e672:	687b      	ldr	r3, [r7, #4]
   1e674:	2256      	movs	r2, #86	; 0x56
   1e676:	2100      	movs	r1, #0
   1e678:	5499      	strb	r1, [r3, r2]
   1e67a:	687b      	ldr	r3, [r7, #4]
   1e67c:	2257      	movs	r2, #87	; 0x57
   1e67e:	2100      	movs	r1, #0
   1e680:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1e682:	687b      	ldr	r3, [r7, #4]
   1e684:	2298      	movs	r2, #152	; 0x98
   1e686:	2100      	movs	r1, #0
   1e688:	5499      	strb	r1, [r3, r2]
   1e68a:	687b      	ldr	r3, [r7, #4]
   1e68c:	2200      	movs	r2, #0
   1e68e:	659a      	str	r2, [r3, #88]	; 0x58
   1e690:	687b      	ldr	r3, [r7, #4]
   1e692:	2200      	movs	r2, #0
   1e694:	679a      	str	r2, [r3, #120]	; 0x78
   1e696:	687b      	ldr	r3, [r7, #4]
   1e698:	2299      	movs	r2, #153	; 0x99
   1e69a:	2100      	movs	r1, #0
   1e69c:	5499      	strb	r1, [r3, r2]
   1e69e:	687b      	ldr	r3, [r7, #4]
   1e6a0:	2200      	movs	r2, #0
   1e6a2:	65da      	str	r2, [r3, #92]	; 0x5c
   1e6a4:	687b      	ldr	r3, [r7, #4]
   1e6a6:	2200      	movs	r2, #0
   1e6a8:	67da      	str	r2, [r3, #124]	; 0x7c
   1e6aa:	687b      	ldr	r3, [r7, #4]
   1e6ac:	229a      	movs	r2, #154	; 0x9a
   1e6ae:	2100      	movs	r1, #0
   1e6b0:	5499      	strb	r1, [r3, r2]
   1e6b2:	687b      	ldr	r3, [r7, #4]
   1e6b4:	2200      	movs	r2, #0
   1e6b6:	661a      	str	r2, [r3, #96]	; 0x60
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	2280      	movs	r2, #128	; 0x80
   1e6bc:	2100      	movs	r1, #0
   1e6be:	5099      	str	r1, [r3, r2]
   1e6c0:	687b      	ldr	r3, [r7, #4]
   1e6c2:	229b      	movs	r2, #155	; 0x9b
   1e6c4:	2100      	movs	r1, #0
   1e6c6:	5499      	strb	r1, [r3, r2]
   1e6c8:	687b      	ldr	r3, [r7, #4]
   1e6ca:	2200      	movs	r2, #0
   1e6cc:	665a      	str	r2, [r3, #100]	; 0x64
   1e6ce:	687b      	ldr	r3, [r7, #4]
   1e6d0:	2284      	movs	r2, #132	; 0x84
   1e6d2:	2100      	movs	r1, #0
   1e6d4:	5099      	str	r1, [r3, r2]
   1e6d6:	687b      	ldr	r3, [r7, #4]
   1e6d8:	229c      	movs	r2, #156	; 0x9c
   1e6da:	2100      	movs	r1, #0
   1e6dc:	5499      	strb	r1, [r3, r2]
   1e6de:	687b      	ldr	r3, [r7, #4]
   1e6e0:	2200      	movs	r2, #0
   1e6e2:	669a      	str	r2, [r3, #104]	; 0x68
   1e6e4:	687b      	ldr	r3, [r7, #4]
   1e6e6:	2288      	movs	r2, #136	; 0x88
   1e6e8:	2100      	movs	r1, #0
   1e6ea:	5099      	str	r1, [r3, r2]
   1e6ec:	687b      	ldr	r3, [r7, #4]
   1e6ee:	229d      	movs	r2, #157	; 0x9d
   1e6f0:	2100      	movs	r1, #0
   1e6f2:	5499      	strb	r1, [r3, r2]
   1e6f4:	687b      	ldr	r3, [r7, #4]
   1e6f6:	2200      	movs	r2, #0
   1e6f8:	66da      	str	r2, [r3, #108]	; 0x6c
   1e6fa:	687b      	ldr	r3, [r7, #4]
   1e6fc:	228c      	movs	r2, #140	; 0x8c
   1e6fe:	2100      	movs	r1, #0
   1e700:	5099      	str	r1, [r3, r2]
   1e702:	687b      	ldr	r3, [r7, #4]
   1e704:	229e      	movs	r2, #158	; 0x9e
   1e706:	2100      	movs	r1, #0
   1e708:	5499      	strb	r1, [r3, r2]
   1e70a:	687b      	ldr	r3, [r7, #4]
   1e70c:	2200      	movs	r2, #0
   1e70e:	671a      	str	r2, [r3, #112]	; 0x70
   1e710:	687b      	ldr	r3, [r7, #4]
   1e712:	2290      	movs	r2, #144	; 0x90
   1e714:	2100      	movs	r1, #0
   1e716:	5099      	str	r1, [r3, r2]
   1e718:	687b      	ldr	r3, [r7, #4]
   1e71a:	229f      	movs	r2, #159	; 0x9f
   1e71c:	2100      	movs	r1, #0
   1e71e:	5499      	strb	r1, [r3, r2]
   1e720:	687b      	ldr	r3, [r7, #4]
   1e722:	2200      	movs	r2, #0
   1e724:	675a      	str	r2, [r3, #116]	; 0x74
   1e726:	687b      	ldr	r3, [r7, #4]
   1e728:	2294      	movs	r2, #148	; 0x94
   1e72a:	2100      	movs	r1, #0
   1e72c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1e72e:	687b      	ldr	r3, [r7, #4]
   1e730:	22a0      	movs	r2, #160	; 0xa0
   1e732:	2101      	movs	r1, #1
   1e734:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   1e736:	687b      	ldr	r3, [r7, #4]
   1e738:	22a1      	movs	r2, #161	; 0xa1
   1e73a:	2100      	movs	r1, #0
   1e73c:	5499      	strb	r1, [r3, r2]
}
   1e73e:	46c0      	nop			; (mov r8, r8)
   1e740:	46bd      	mov	sp, r7
   1e742:	b005      	add	sp, #20
   1e744:	bd90      	pop	{r4, r7, pc}
   1e746:	46c0      	nop			; (mov r8, r8)
   1e748:	0001e445 	.word	0x0001e445
   1e74c:	000243f8 	.word	0x000243f8

0001e750 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1e750:	b580      	push	{r7, lr}
   1e752:	b086      	sub	sp, #24
   1e754:	af00      	add	r7, sp, #0
   1e756:	60b9      	str	r1, [r7, #8]
   1e758:	607a      	str	r2, [r7, #4]
   1e75a:	230f      	movs	r3, #15
   1e75c:	18fb      	adds	r3, r7, r3
   1e75e:	1c02      	adds	r2, r0, #0
   1e760:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   1e762:	2300      	movs	r3, #0
   1e764:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1e766:	2300      	movs	r3, #0
   1e768:	613b      	str	r3, [r7, #16]
   1e76a:	e01d      	b.n	1e7a8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   1e76c:	68ba      	ldr	r2, [r7, #8]
   1e76e:	693b      	ldr	r3, [r7, #16]
   1e770:	18d3      	adds	r3, r2, r3
   1e772:	3310      	adds	r3, #16
   1e774:	781b      	ldrb	r3, [r3, #0]
   1e776:	2b01      	cmp	r3, #1
   1e778:	d113      	bne.n	1e7a2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   1e77a:	230f      	movs	r3, #15
   1e77c:	18fb      	adds	r3, r7, r3
   1e77e:	781b      	ldrb	r3, [r3, #0]
   1e780:	4a1b      	ldr	r2, [pc, #108]	; (1e7f0 <_tcc_build_ctrla+0xa0>)
   1e782:	5cd3      	ldrb	r3, [r2, r3]
   1e784:	001a      	movs	r2, r3
   1e786:	693b      	ldr	r3, [r7, #16]
   1e788:	429a      	cmp	r2, r3
   1e78a:	da01      	bge.n	1e790 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   1e78c:	2317      	movs	r3, #23
   1e78e:	e02a      	b.n	1e7e6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1e790:	2380      	movs	r3, #128	; 0x80
   1e792:	045a      	lsls	r2, r3, #17
   1e794:	693b      	ldr	r3, [r7, #16]
   1e796:	409a      	lsls	r2, r3
   1e798:	0013      	movs	r3, r2
   1e79a:	001a      	movs	r2, r3
   1e79c:	697b      	ldr	r3, [r7, #20]
   1e79e:	4313      	orrs	r3, r2
   1e7a0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1e7a2:	693b      	ldr	r3, [r7, #16]
   1e7a4:	3301      	adds	r3, #1
   1e7a6:	613b      	str	r3, [r7, #16]
   1e7a8:	693b      	ldr	r3, [r7, #16]
   1e7aa:	2b03      	cmp	r3, #3
   1e7ac:	ddde      	ble.n	1e76c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   1e7ae:	68bb      	ldr	r3, [r7, #8]
   1e7b0:	22a1      	movs	r2, #161	; 0xa1
   1e7b2:	5c9b      	ldrb	r3, [r3, r2]
   1e7b4:	2b00      	cmp	r3, #0
   1e7b6:	d004      	beq.n	1e7c2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1e7b8:	697b      	ldr	r3, [r7, #20]
   1e7ba:	2280      	movs	r2, #128	; 0x80
   1e7bc:	0112      	lsls	r2, r2, #4
   1e7be:	4313      	orrs	r3, r2
   1e7c0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1e7c2:	68bb      	ldr	r3, [r7, #8]
   1e7c4:	7b1b      	ldrb	r3, [r3, #12]
   1e7c6:	031b      	lsls	r3, r3, #12
   1e7c8:	001a      	movs	r2, r3
   1e7ca:	697b      	ldr	r3, [r7, #20]
   1e7cc:	4313      	orrs	r3, r2
   1e7ce:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1e7d0:	68bb      	ldr	r3, [r7, #8]
   1e7d2:	7adb      	ldrb	r3, [r3, #11]
   1e7d4:	021b      	lsls	r3, r3, #8
   1e7d6:	001a      	movs	r2, r3
   1e7d8:	697b      	ldr	r3, [r7, #20]
   1e7da:	4313      	orrs	r3, r2
   1e7dc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   1e7de:	687b      	ldr	r3, [r7, #4]
   1e7e0:	697a      	ldr	r2, [r7, #20]
   1e7e2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   1e7e4:	2300      	movs	r3, #0
}
   1e7e6:	0018      	movs	r0, r3
   1e7e8:	46bd      	mov	sp, r7
   1e7ea:	b006      	add	sp, #24
   1e7ec:	bd80      	pop	{r7, pc}
   1e7ee:	46c0      	nop			; (mov r8, r8)
   1e7f0:	00024404 	.word	0x00024404

0001e7f4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   1e7f4:	b580      	push	{r7, lr}
   1e7f6:	b086      	sub	sp, #24
   1e7f8:	af00      	add	r7, sp, #0
   1e7fa:	60b9      	str	r1, [r7, #8]
   1e7fc:	607a      	str	r2, [r7, #4]
   1e7fe:	230f      	movs	r3, #15
   1e800:	18fb      	adds	r3, r7, r3
   1e802:	1c02      	adds	r2, r0, #0
   1e804:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   1e806:	2317      	movs	r3, #23
   1e808:	18fb      	adds	r3, r7, r3
   1e80a:	2200      	movs	r2, #0
   1e80c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   1e80e:	68bb      	ldr	r3, [r7, #8]
   1e810:	7a1b      	ldrb	r3, [r3, #8]
   1e812:	2b00      	cmp	r3, #0
   1e814:	d007      	beq.n	1e826 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1e816:	2317      	movs	r3, #23
   1e818:	18fb      	adds	r3, r7, r3
   1e81a:	2217      	movs	r2, #23
   1e81c:	18ba      	adds	r2, r7, r2
   1e81e:	7812      	ldrb	r2, [r2, #0]
   1e820:	2104      	movs	r1, #4
   1e822:	430a      	orrs	r2, r1
   1e824:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1e826:	68bb      	ldr	r3, [r7, #8]
   1e828:	7a5b      	ldrb	r3, [r3, #9]
   1e82a:	2b01      	cmp	r3, #1
   1e82c:	d107      	bne.n	1e83e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   1e82e:	2317      	movs	r3, #23
   1e830:	18fb      	adds	r3, r7, r3
   1e832:	2217      	movs	r2, #23
   1e834:	18ba      	adds	r2, r7, r2
   1e836:	7812      	ldrb	r2, [r2, #0]
   1e838:	2101      	movs	r1, #1
   1e83a:	430a      	orrs	r2, r1
   1e83c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   1e83e:	687b      	ldr	r3, [r7, #4]
   1e840:	2217      	movs	r2, #23
   1e842:	18ba      	adds	r2, r7, r2
   1e844:	7812      	ldrb	r2, [r2, #0]
   1e846:	701a      	strb	r2, [r3, #0]
}
   1e848:	46c0      	nop			; (mov r8, r8)
   1e84a:	46bd      	mov	sp, r7
   1e84c:	b006      	add	sp, #24
   1e84e:	bd80      	pop	{r7, pc}

0001e850 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1e850:	b580      	push	{r7, lr}
   1e852:	b088      	sub	sp, #32
   1e854:	af00      	add	r7, sp, #0
   1e856:	60b9      	str	r1, [r7, #8]
   1e858:	607a      	str	r2, [r7, #4]
   1e85a:	230f      	movs	r3, #15
   1e85c:	18fb      	adds	r3, r7, r3
   1e85e:	1c02      	adds	r2, r0, #0
   1e860:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1e862:	230f      	movs	r3, #15
   1e864:	18fb      	adds	r3, r7, r3
   1e866:	781a      	ldrb	r2, [r3, #0]
   1e868:	231b      	movs	r3, #27
   1e86a:	18fb      	adds	r3, r7, r3
   1e86c:	493e      	ldr	r1, [pc, #248]	; (1e968 <_tcc_build_faults+0x118>)
   1e86e:	5c8a      	ldrb	r2, [r1, r2]
   1e870:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1e872:	2300      	movs	r3, #0
   1e874:	61fb      	str	r3, [r7, #28]
   1e876:	e06e      	b.n	1e956 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   1e878:	69fa      	ldr	r2, [r7, #28]
   1e87a:	0013      	movs	r3, r2
   1e87c:	009b      	lsls	r3, r3, #2
   1e87e:	189b      	adds	r3, r3, r2
   1e880:	005b      	lsls	r3, r3, #1
   1e882:	3328      	adds	r3, #40	; 0x28
   1e884:	68ba      	ldr	r2, [r7, #8]
   1e886:	18d3      	adds	r3, r2, r3
   1e888:	3304      	adds	r3, #4
   1e88a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   1e88c:	697b      	ldr	r3, [r7, #20]
   1e88e:	7a5b      	ldrb	r3, [r3, #9]
   1e890:	221b      	movs	r2, #27
   1e892:	18ba      	adds	r2, r7, r2
   1e894:	7812      	ldrb	r2, [r2, #0]
   1e896:	429a      	cmp	r2, r3
   1e898:	d801      	bhi.n	1e89e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   1e89a:	2317      	movs	r3, #23
   1e89c:	e05f      	b.n	1e95e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   1e89e:	697b      	ldr	r3, [r7, #20]
   1e8a0:	781b      	ldrb	r3, [r3, #0]
   1e8a2:	2b0f      	cmp	r3, #15
   1e8a4:	d901      	bls.n	1e8aa <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   1e8a6:	2317      	movs	r3, #23
   1e8a8:	e059      	b.n	1e95e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1e8aa:	697b      	ldr	r3, [r7, #20]
   1e8ac:	781b      	ldrb	r3, [r3, #0]
   1e8ae:	061b      	lsls	r3, r3, #24
   1e8b0:	001a      	movs	r2, r3
   1e8b2:	23f0      	movs	r3, #240	; 0xf0
   1e8b4:	051b      	lsls	r3, r3, #20
   1e8b6:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1e8b8:	697b      	ldr	r3, [r7, #20]
   1e8ba:	785b      	ldrb	r3, [r3, #1]
   1e8bc:	041b      	lsls	r3, r3, #16
   1e8be:	0019      	movs	r1, r3
   1e8c0:	23ff      	movs	r3, #255	; 0xff
   1e8c2:	041b      	lsls	r3, r3, #16
   1e8c4:	400b      	ands	r3, r1
   1e8c6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1e8c8:	697b      	ldr	r3, [r7, #20]
   1e8ca:	789b      	ldrb	r3, [r3, #2]
   1e8cc:	2b00      	cmp	r3, #0
   1e8ce:	d001      	beq.n	1e8d4 <_tcc_build_faults+0x84>
   1e8d0:	2380      	movs	r3, #128	; 0x80
   1e8d2:	e000      	b.n	1e8d6 <_tcc_build_faults+0x86>
   1e8d4:	2300      	movs	r3, #0
   1e8d6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1e8d8:	697b      	ldr	r3, [r7, #20]
   1e8da:	78db      	ldrb	r3, [r3, #3]
   1e8dc:	2b00      	cmp	r3, #0
   1e8de:	d001      	beq.n	1e8e4 <_tcc_build_faults+0x94>
   1e8e0:	2308      	movs	r3, #8
   1e8e2:	e000      	b.n	1e8e6 <_tcc_build_faults+0x96>
   1e8e4:	2300      	movs	r3, #0
   1e8e6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1e8e8:	697b      	ldr	r3, [r7, #20]
   1e8ea:	791b      	ldrb	r3, [r3, #4]
   1e8ec:	2b00      	cmp	r3, #0
   1e8ee:	d001      	beq.n	1e8f4 <_tcc_build_faults+0xa4>
   1e8f0:	2310      	movs	r3, #16
   1e8f2:	e000      	b.n	1e8f6 <_tcc_build_faults+0xa6>
   1e8f4:	2300      	movs	r3, #0
   1e8f6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   1e8f8:	697b      	ldr	r3, [r7, #20]
   1e8fa:	795b      	ldrb	r3, [r3, #5]
   1e8fc:	0019      	movs	r1, r3
   1e8fe:	2303      	movs	r3, #3
   1e900:	400b      	ands	r3, r1
   1e902:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1e904:	697b      	ldr	r3, [r7, #20]
   1e906:	799b      	ldrb	r3, [r3, #6]
   1e908:	015b      	lsls	r3, r3, #5
   1e90a:	0019      	movs	r1, r3
   1e90c:	2360      	movs	r3, #96	; 0x60
   1e90e:	400b      	ands	r3, r1
   1e910:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1e912:	697b      	ldr	r3, [r7, #20]
   1e914:	79db      	ldrb	r3, [r3, #7]
   1e916:	021b      	lsls	r3, r3, #8
   1e918:	0019      	movs	r1, r3
   1e91a:	23c0      	movs	r3, #192	; 0xc0
   1e91c:	009b      	lsls	r3, r3, #2
   1e91e:	400b      	ands	r3, r1
   1e920:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1e922:	697b      	ldr	r3, [r7, #20]
   1e924:	7a1b      	ldrb	r3, [r3, #8]
   1e926:	031b      	lsls	r3, r3, #12
   1e928:	0019      	movs	r1, r3
   1e92a:	23e0      	movs	r3, #224	; 0xe0
   1e92c:	01db      	lsls	r3, r3, #7
   1e92e:	400b      	ands	r3, r1
   1e930:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1e932:	697b      	ldr	r3, [r7, #20]
   1e934:	7a5b      	ldrb	r3, [r3, #9]
   1e936:	029b      	lsls	r3, r3, #10
   1e938:	0019      	movs	r1, r3
   1e93a:	23c0      	movs	r3, #192	; 0xc0
   1e93c:	011b      	lsls	r3, r3, #4
   1e93e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1e940:	4313      	orrs	r3, r2
   1e942:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   1e944:	69fb      	ldr	r3, [r7, #28]
   1e946:	009b      	lsls	r3, r3, #2
   1e948:	687a      	ldr	r2, [r7, #4]
   1e94a:	18d3      	adds	r3, r2, r3
   1e94c:	693a      	ldr	r2, [r7, #16]
   1e94e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1e950:	69fb      	ldr	r3, [r7, #28]
   1e952:	3301      	adds	r3, #1
   1e954:	61fb      	str	r3, [r7, #28]
   1e956:	69fb      	ldr	r3, [r7, #28]
   1e958:	2b01      	cmp	r3, #1
   1e95a:	dd8d      	ble.n	1e878 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   1e95c:	2300      	movs	r3, #0
}
   1e95e:	0018      	movs	r0, r3
   1e960:	46bd      	mov	sp, r7
   1e962:	b008      	add	sp, #32
   1e964:	bd80      	pop	{r7, pc}
   1e966:	46c0      	nop			; (mov r8, r8)
   1e968:	00024404 	.word	0x00024404

0001e96c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1e96c:	b580      	push	{r7, lr}
   1e96e:	b088      	sub	sp, #32
   1e970:	af00      	add	r7, sp, #0
   1e972:	60b9      	str	r1, [r7, #8]
   1e974:	607a      	str	r2, [r7, #4]
   1e976:	230f      	movs	r3, #15
   1e978:	18fb      	adds	r3, r7, r3
   1e97a:	1c02      	adds	r2, r0, #0
   1e97c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1e97e:	230f      	movs	r3, #15
   1e980:	18fb      	adds	r3, r7, r3
   1e982:	781a      	ldrb	r2, [r3, #0]
   1e984:	2317      	movs	r3, #23
   1e986:	18fb      	adds	r3, r7, r3
   1e988:	492d      	ldr	r1, [pc, #180]	; (1ea40 <_tcc_build_drvctrl+0xd4>)
   1e98a:	5c8a      	ldrb	r2, [r1, r2]
   1e98c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   1e98e:	2300      	movs	r3, #0
   1e990:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1e992:	2300      	movs	r3, #0
   1e994:	61fb      	str	r3, [r7, #28]
   1e996:	e048      	b.n	1ea2a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   1e998:	68ba      	ldr	r2, [r7, #8]
   1e99a:	2150      	movs	r1, #80	; 0x50
   1e99c:	69fb      	ldr	r3, [r7, #28]
   1e99e:	18d3      	adds	r3, r2, r3
   1e9a0:	185b      	adds	r3, r3, r1
   1e9a2:	781b      	ldrb	r3, [r3, #0]
   1e9a4:	2b00      	cmp	r3, #0
   1e9a6:	d010      	beq.n	1e9ca <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   1e9a8:	2317      	movs	r3, #23
   1e9aa:	18fb      	adds	r3, r7, r3
   1e9ac:	781a      	ldrb	r2, [r3, #0]
   1e9ae:	69fb      	ldr	r3, [r7, #28]
   1e9b0:	429a      	cmp	r2, r3
   1e9b2:	d801      	bhi.n	1e9b8 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   1e9b4:	2317      	movs	r3, #23
   1e9b6:	e03f      	b.n	1ea38 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1e9b8:	2380      	movs	r3, #128	; 0x80
   1e9ba:	025a      	lsls	r2, r3, #9
   1e9bc:	69fb      	ldr	r3, [r7, #28]
   1e9be:	409a      	lsls	r2, r3
   1e9c0:	0013      	movs	r3, r2
   1e9c2:	001a      	movs	r2, r3
   1e9c4:	69bb      	ldr	r3, [r7, #24]
   1e9c6:	4313      	orrs	r3, r2
   1e9c8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1e9ca:	68ba      	ldr	r2, [r7, #8]
   1e9cc:	69fb      	ldr	r3, [r7, #28]
   1e9ce:	331c      	adds	r3, #28
   1e9d0:	005b      	lsls	r3, r3, #1
   1e9d2:	18d3      	adds	r3, r2, r3
   1e9d4:	3309      	adds	r3, #9
   1e9d6:	781b      	ldrb	r3, [r3, #0]
   1e9d8:	2b00      	cmp	r3, #0
   1e9da:	d023      	beq.n	1ea24 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   1e9dc:	2317      	movs	r3, #23
   1e9de:	18fb      	adds	r3, r7, r3
   1e9e0:	781a      	ldrb	r2, [r3, #0]
   1e9e2:	69fb      	ldr	r3, [r7, #28]
   1e9e4:	429a      	cmp	r2, r3
   1e9e6:	d801      	bhi.n	1e9ec <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   1e9e8:	2317      	movs	r3, #23
   1e9ea:	e025      	b.n	1ea38 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1e9ec:	68ba      	ldr	r2, [r7, #8]
   1e9ee:	69fb      	ldr	r3, [r7, #28]
   1e9f0:	331c      	adds	r3, #28
   1e9f2:	005b      	lsls	r3, r3, #1
   1e9f4:	18d3      	adds	r3, r2, r3
   1e9f6:	3309      	adds	r3, #9
   1e9f8:	781b      	ldrb	r3, [r3, #0]
   1e9fa:	2b02      	cmp	r3, #2
   1e9fc:	d10a      	bne.n	1ea14 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1e9fe:	2302      	movs	r3, #2
   1ea00:	33ff      	adds	r3, #255	; 0xff
   1ea02:	001a      	movs	r2, r3
   1ea04:	69fb      	ldr	r3, [r7, #28]
   1ea06:	409a      	lsls	r2, r3
   1ea08:	0013      	movs	r3, r2
   1ea0a:	001a      	movs	r2, r3
   1ea0c:	69bb      	ldr	r3, [r7, #24]
   1ea0e:	4313      	orrs	r3, r2
   1ea10:	61bb      	str	r3, [r7, #24]
   1ea12:	e007      	b.n	1ea24 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1ea14:	2201      	movs	r2, #1
   1ea16:	69fb      	ldr	r3, [r7, #28]
   1ea18:	409a      	lsls	r2, r3
   1ea1a:	0013      	movs	r3, r2
   1ea1c:	001a      	movs	r2, r3
   1ea1e:	69bb      	ldr	r3, [r7, #24]
   1ea20:	4313      	orrs	r3, r2
   1ea22:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1ea24:	69fb      	ldr	r3, [r7, #28]
   1ea26:	3301      	adds	r3, #1
   1ea28:	61fb      	str	r3, [r7, #28]
   1ea2a:	69fb      	ldr	r3, [r7, #28]
   1ea2c:	2b07      	cmp	r3, #7
   1ea2e:	d9b3      	bls.n	1e998 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   1ea30:	687b      	ldr	r3, [r7, #4]
   1ea32:	69ba      	ldr	r2, [r7, #24]
   1ea34:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   1ea36:	2300      	movs	r3, #0
}
   1ea38:	0018      	movs	r0, r3
   1ea3a:	46bd      	mov	sp, r7
   1ea3c:	b008      	add	sp, #32
   1ea3e:	bd80      	pop	{r7, pc}
   1ea40:	00024408 	.word	0x00024408

0001ea44 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1ea44:	b580      	push	{r7, lr}
   1ea46:	b088      	sub	sp, #32
   1ea48:	af00      	add	r7, sp, #0
   1ea4a:	60b9      	str	r1, [r7, #8]
   1ea4c:	607a      	str	r2, [r7, #4]
   1ea4e:	230f      	movs	r3, #15
   1ea50:	18fb      	adds	r3, r7, r3
   1ea52:	1c02      	adds	r2, r0, #0
   1ea54:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   1ea56:	230f      	movs	r3, #15
   1ea58:	18fb      	adds	r3, r7, r3
   1ea5a:	781a      	ldrb	r2, [r3, #0]
   1ea5c:	2317      	movs	r3, #23
   1ea5e:	18fb      	adds	r3, r7, r3
   1ea60:	491d      	ldr	r1, [pc, #116]	; (1ead8 <_tcc_build_waves+0x94>)
   1ea62:	5c8a      	ldrb	r2, [r1, r2]
   1ea64:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   1ea66:	68bb      	ldr	r3, [r7, #8]
   1ea68:	3310      	adds	r3, #16
   1ea6a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1ea6c:	693b      	ldr	r3, [r7, #16]
   1ea6e:	7a5b      	ldrb	r3, [r3, #9]
   1ea70:	011b      	lsls	r3, r3, #4
   1ea72:	001a      	movs	r2, r3
   1ea74:	2330      	movs	r3, #48	; 0x30
   1ea76:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1ea78:	693b      	ldr	r3, [r7, #16]
   1ea7a:	7a1b      	ldrb	r3, [r3, #8]
   1ea7c:	0019      	movs	r1, r3
   1ea7e:	2307      	movs	r3, #7
   1ea80:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1ea82:	4313      	orrs	r3, r2
   1ea84:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1ea86:	2300      	movs	r3, #0
   1ea88:	61fb      	str	r3, [r7, #28]
   1ea8a:	e01a      	b.n	1eac2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   1ea8c:	693a      	ldr	r2, [r7, #16]
   1ea8e:	69fb      	ldr	r3, [r7, #28]
   1ea90:	18d3      	adds	r3, r2, r3
   1ea92:	3304      	adds	r3, #4
   1ea94:	781b      	ldrb	r3, [r3, #0]
   1ea96:	2b00      	cmp	r3, #0
   1ea98:	d010      	beq.n	1eabc <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   1ea9a:	2317      	movs	r3, #23
   1ea9c:	18fb      	adds	r3, r7, r3
   1ea9e:	781a      	ldrb	r2, [r3, #0]
   1eaa0:	69fb      	ldr	r3, [r7, #28]
   1eaa2:	429a      	cmp	r2, r3
   1eaa4:	dc01      	bgt.n	1eaaa <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   1eaa6:	2317      	movs	r3, #23
   1eaa8:	e012      	b.n	1ead0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   1eaaa:	2380      	movs	r3, #128	; 0x80
   1eaac:	025a      	lsls	r2, r3, #9
   1eaae:	69fb      	ldr	r3, [r7, #28]
   1eab0:	409a      	lsls	r2, r3
   1eab2:	0013      	movs	r3, r2
   1eab4:	001a      	movs	r2, r3
   1eab6:	69bb      	ldr	r3, [r7, #24]
   1eab8:	4313      	orrs	r3, r2
   1eaba:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1eabc:	69fb      	ldr	r3, [r7, #28]
   1eabe:	3301      	adds	r3, #1
   1eac0:	61fb      	str	r3, [r7, #28]
   1eac2:	69fb      	ldr	r3, [r7, #28]
   1eac4:	2b03      	cmp	r3, #3
   1eac6:	dde1      	ble.n	1ea8c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   1eac8:	687b      	ldr	r3, [r7, #4]
   1eaca:	69ba      	ldr	r2, [r7, #24]
   1eacc:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   1eace:	2300      	movs	r3, #0
}
   1ead0:	0018      	movs	r0, r3
   1ead2:	46bd      	mov	sp, r7
   1ead4:	b008      	add	sp, #32
   1ead6:	bd80      	pop	{r7, pc}
   1ead8:	00024404 	.word	0x00024404

0001eadc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1eadc:	b590      	push	{r4, r7, lr}
   1eade:	b091      	sub	sp, #68	; 0x44
   1eae0:	af00      	add	r7, sp, #0
   1eae2:	60f8      	str	r0, [r7, #12]
   1eae4:	60b9      	str	r1, [r7, #8]
   1eae6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1eae8:	233b      	movs	r3, #59	; 0x3b
   1eaea:	18fc      	adds	r4, r7, r3
   1eaec:	68bb      	ldr	r3, [r7, #8]
   1eaee:	0018      	movs	r0, r3
   1eaf0:	4bc4      	ldr	r3, [pc, #784]	; (1ee04 <tcc_init+0x328>)
   1eaf2:	4798      	blx	r3
   1eaf4:	0003      	movs	r3, r0
   1eaf6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1eaf8:	233b      	movs	r3, #59	; 0x3b
   1eafa:	18fb      	adds	r3, r7, r3
   1eafc:	781a      	ldrb	r2, [r3, #0]
   1eafe:	4bc2      	ldr	r3, [pc, #776]	; (1ee08 <tcc_init+0x32c>)
   1eb00:	0092      	lsls	r2, r2, #2
   1eb02:	58d3      	ldr	r3, [r2, r3]
   1eb04:	0019      	movs	r1, r3
   1eb06:	2002      	movs	r0, #2
   1eb08:	4bc0      	ldr	r3, [pc, #768]	; (1ee0c <tcc_init+0x330>)
   1eb0a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1eb0c:	68bb      	ldr	r3, [r7, #8]
   1eb0e:	681b      	ldr	r3, [r3, #0]
   1eb10:	2202      	movs	r2, #2
   1eb12:	4013      	ands	r3, r2
   1eb14:	d001      	beq.n	1eb1a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   1eb16:	231c      	movs	r3, #28
   1eb18:	e1be      	b.n	1ee98 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1eb1a:	68bb      	ldr	r3, [r7, #8]
   1eb1c:	681b      	ldr	r3, [r3, #0]
   1eb1e:	2201      	movs	r2, #1
   1eb20:	4013      	ands	r3, r2
   1eb22:	d001      	beq.n	1eb28 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   1eb24:	231c      	movs	r3, #28
   1eb26:	e1b7      	b.n	1ee98 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   1eb28:	233b      	movs	r3, #59	; 0x3b
   1eb2a:	18fb      	adds	r3, r7, r3
   1eb2c:	781a      	ldrb	r2, [r3, #0]
   1eb2e:	4bb8      	ldr	r3, [pc, #736]	; (1ee10 <tcc_init+0x334>)
   1eb30:	0092      	lsls	r2, r2, #2
   1eb32:	58d3      	ldr	r3, [r2, r3]
   1eb34:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   1eb36:	687b      	ldr	r3, [r7, #4]
   1eb38:	681a      	ldr	r2, [r3, #0]
   1eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eb3c:	429a      	cmp	r2, r3
   1eb3e:	d804      	bhi.n	1eb4a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   1eb40:	687b      	ldr	r3, [r7, #4]
   1eb42:	685a      	ldr	r2, [r3, #4]
   1eb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eb46:	429a      	cmp	r2, r3
   1eb48:	d901      	bls.n	1eb4e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   1eb4a:	2317      	movs	r3, #23
   1eb4c:	e1a4      	b.n	1ee98 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1eb4e:	2300      	movs	r3, #0
   1eb50:	63fb      	str	r3, [r7, #60]	; 0x3c
   1eb52:	e00e      	b.n	1eb72 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   1eb54:	687a      	ldr	r2, [r7, #4]
   1eb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb58:	3306      	adds	r3, #6
   1eb5a:	009b      	lsls	r3, r3, #2
   1eb5c:	18d3      	adds	r3, r2, r3
   1eb5e:	3304      	adds	r3, #4
   1eb60:	681a      	ldr	r2, [r3, #0]
   1eb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eb64:	429a      	cmp	r2, r3
   1eb66:	d901      	bls.n	1eb6c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   1eb68:	2317      	movs	r3, #23
   1eb6a:	e195      	b.n	1ee98 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1eb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb6e:	3301      	adds	r3, #1
   1eb70:	63fb      	str	r3, [r7, #60]	; 0x3c
   1eb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb74:	2b03      	cmp	r3, #3
   1eb76:	dded      	ble.n	1eb54 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1eb78:	2300      	movs	r3, #0
   1eb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1eb7c:	e019      	b.n	1ebb2 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   1eb7e:	687a      	ldr	r2, [r7, #4]
   1eb80:	2198      	movs	r1, #152	; 0x98
   1eb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb84:	18d3      	adds	r3, r2, r3
   1eb86:	185b      	adds	r3, r3, r1
   1eb88:	781b      	ldrb	r3, [r3, #0]
   1eb8a:	2201      	movs	r2, #1
   1eb8c:	4053      	eors	r3, r2
   1eb8e:	b2db      	uxtb	r3, r3
   1eb90:	2b00      	cmp	r3, #0
   1eb92:	d10a      	bne.n	1ebaa <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   1eb94:	233b      	movs	r3, #59	; 0x3b
   1eb96:	18fb      	adds	r3, r7, r3
   1eb98:	781b      	ldrb	r3, [r3, #0]
   1eb9a:	4a9e      	ldr	r2, [pc, #632]	; (1ee14 <tcc_init+0x338>)
   1eb9c:	5cd3      	ldrb	r3, [r2, r3]
   1eb9e:	001a      	movs	r2, r3
   1eba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eba2:	429a      	cmp	r2, r3
   1eba4:	dc02      	bgt.n	1ebac <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   1eba6:	2317      	movs	r3, #23
   1eba8:	e176      	b.n	1ee98 <tcc_init+0x3bc>
			continue;
   1ebaa:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1ebac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ebae:	3301      	adds	r3, #1
   1ebb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ebb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ebb4:	2b07      	cmp	r3, #7
   1ebb6:	dde2      	ble.n	1eb7e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   1ebb8:	2300      	movs	r3, #0
   1ebba:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   1ebbc:	2333      	movs	r3, #51	; 0x33
   1ebbe:	18fc      	adds	r4, r7, r3
   1ebc0:	232c      	movs	r3, #44	; 0x2c
   1ebc2:	18fa      	adds	r2, r7, r3
   1ebc4:	6879      	ldr	r1, [r7, #4]
   1ebc6:	233b      	movs	r3, #59	; 0x3b
   1ebc8:	18fb      	adds	r3, r7, r3
   1ebca:	781b      	ldrb	r3, [r3, #0]
   1ebcc:	0018      	movs	r0, r3
   1ebce:	4b92      	ldr	r3, [pc, #584]	; (1ee18 <tcc_init+0x33c>)
   1ebd0:	4798      	blx	r3
   1ebd2:	0003      	movs	r3, r0
   1ebd4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1ebd6:	2333      	movs	r3, #51	; 0x33
   1ebd8:	18fb      	adds	r3, r7, r3
   1ebda:	781b      	ldrb	r3, [r3, #0]
   1ebdc:	2b00      	cmp	r3, #0
   1ebde:	d003      	beq.n	1ebe8 <tcc_init+0x10c>
		return status;
   1ebe0:	2333      	movs	r3, #51	; 0x33
   1ebe2:	18fb      	adds	r3, r7, r3
   1ebe4:	781b      	ldrb	r3, [r3, #0]
   1ebe6:	e157      	b.n	1ee98 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   1ebe8:	232b      	movs	r3, #43	; 0x2b
   1ebea:	18fa      	adds	r2, r7, r3
   1ebec:	6879      	ldr	r1, [r7, #4]
   1ebee:	233b      	movs	r3, #59	; 0x3b
   1ebf0:	18fb      	adds	r3, r7, r3
   1ebf2:	781b      	ldrb	r3, [r3, #0]
   1ebf4:	0018      	movs	r0, r3
   1ebf6:	4b89      	ldr	r3, [pc, #548]	; (1ee1c <tcc_init+0x340>)
   1ebf8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   1ebfa:	2333      	movs	r3, #51	; 0x33
   1ebfc:	18fc      	adds	r4, r7, r3
   1ebfe:	2320      	movs	r3, #32
   1ec00:	18fa      	adds	r2, r7, r3
   1ec02:	6879      	ldr	r1, [r7, #4]
   1ec04:	233b      	movs	r3, #59	; 0x3b
   1ec06:	18fb      	adds	r3, r7, r3
   1ec08:	781b      	ldrb	r3, [r3, #0]
   1ec0a:	0018      	movs	r0, r3
   1ec0c:	4b84      	ldr	r3, [pc, #528]	; (1ee20 <tcc_init+0x344>)
   1ec0e:	4798      	blx	r3
   1ec10:	0003      	movs	r3, r0
   1ec12:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1ec14:	2333      	movs	r3, #51	; 0x33
   1ec16:	18fb      	adds	r3, r7, r3
   1ec18:	781b      	ldrb	r3, [r3, #0]
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d003      	beq.n	1ec26 <tcc_init+0x14a>
		return status;
   1ec1e:	2333      	movs	r3, #51	; 0x33
   1ec20:	18fb      	adds	r3, r7, r3
   1ec22:	781b      	ldrb	r3, [r3, #0]
   1ec24:	e138      	b.n	1ee98 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   1ec26:	2300      	movs	r3, #0
   1ec28:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   1ec2a:	2333      	movs	r3, #51	; 0x33
   1ec2c:	18fc      	adds	r4, r7, r3
   1ec2e:	231c      	movs	r3, #28
   1ec30:	18fa      	adds	r2, r7, r3
   1ec32:	6879      	ldr	r1, [r7, #4]
   1ec34:	233b      	movs	r3, #59	; 0x3b
   1ec36:	18fb      	adds	r3, r7, r3
   1ec38:	781b      	ldrb	r3, [r3, #0]
   1ec3a:	0018      	movs	r0, r3
   1ec3c:	4b79      	ldr	r3, [pc, #484]	; (1ee24 <tcc_init+0x348>)
   1ec3e:	4798      	blx	r3
   1ec40:	0003      	movs	r3, r0
   1ec42:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1ec44:	2333      	movs	r3, #51	; 0x33
   1ec46:	18fb      	adds	r3, r7, r3
   1ec48:	781b      	ldrb	r3, [r3, #0]
   1ec4a:	2b00      	cmp	r3, #0
   1ec4c:	d003      	beq.n	1ec56 <tcc_init+0x17a>
		return status;
   1ec4e:	2333      	movs	r3, #51	; 0x33
   1ec50:	18fb      	adds	r3, r7, r3
   1ec52:	781b      	ldrb	r3, [r3, #0]
   1ec54:	e120      	b.n	1ee98 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   1ec56:	2333      	movs	r3, #51	; 0x33
   1ec58:	18fc      	adds	r4, r7, r3
   1ec5a:	2318      	movs	r3, #24
   1ec5c:	18fa      	adds	r2, r7, r3
   1ec5e:	6879      	ldr	r1, [r7, #4]
   1ec60:	233b      	movs	r3, #59	; 0x3b
   1ec62:	18fb      	adds	r3, r7, r3
   1ec64:	781b      	ldrb	r3, [r3, #0]
   1ec66:	0018      	movs	r0, r3
   1ec68:	4b6f      	ldr	r3, [pc, #444]	; (1ee28 <tcc_init+0x34c>)
   1ec6a:	4798      	blx	r3
   1ec6c:	0003      	movs	r3, r0
   1ec6e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   1ec70:	2333      	movs	r3, #51	; 0x33
   1ec72:	18fb      	adds	r3, r7, r3
   1ec74:	781b      	ldrb	r3, [r3, #0]
   1ec76:	2b00      	cmp	r3, #0
   1ec78:	d003      	beq.n	1ec82 <tcc_init+0x1a6>
		return status;
   1ec7a:	2333      	movs	r3, #51	; 0x33
   1ec7c:	18fb      	adds	r3, r7, r3
   1ec7e:	781b      	ldrb	r3, [r3, #0]
   1ec80:	e10a      	b.n	1ee98 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1ec82:	2300      	movs	r3, #0
   1ec84:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ec86:	e009      	b.n	1ec9c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   1ec88:	68fa      	ldr	r2, [r7, #12]
   1ec8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ec8c:	009b      	lsls	r3, r3, #2
   1ec8e:	18d3      	adds	r3, r2, r3
   1ec90:	3304      	adds	r3, #4
   1ec92:	2200      	movs	r2, #0
   1ec94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1ec96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ec98:	3301      	adds	r3, #1
   1ec9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ec9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ec9e:	2b0b      	cmp	r3, #11
   1eca0:	ddf2      	ble.n	1ec88 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   1eca2:	68fb      	ldr	r3, [r7, #12]
   1eca4:	2200      	movs	r2, #0
   1eca6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1eca8:	68fb      	ldr	r3, [r7, #12]
   1ecaa:	2200      	movs	r2, #0
   1ecac:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1ecae:	233b      	movs	r3, #59	; 0x3b
   1ecb0:	18fb      	adds	r3, r7, r3
   1ecb2:	781a      	ldrb	r2, [r3, #0]
   1ecb4:	4b5d      	ldr	r3, [pc, #372]	; (1ee2c <tcc_init+0x350>)
   1ecb6:	0092      	lsls	r2, r2, #2
   1ecb8:	68f9      	ldr	r1, [r7, #12]
   1ecba:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   1ecbc:	68fb      	ldr	r3, [r7, #12]
   1ecbe:	68ba      	ldr	r2, [r7, #8]
   1ecc0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1ecc2:	687b      	ldr	r3, [r7, #4]
   1ecc4:	22a0      	movs	r2, #160	; 0xa0
   1ecc6:	5c99      	ldrb	r1, [r3, r2]
   1ecc8:	68fb      	ldr	r3, [r7, #12]
   1ecca:	223c      	movs	r2, #60	; 0x3c
   1eccc:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   1ecce:	2314      	movs	r3, #20
   1ecd0:	18fb      	adds	r3, r7, r3
   1ecd2:	0018      	movs	r0, r3
   1ecd4:	4b56      	ldr	r3, [pc, #344]	; (1ee30 <tcc_init+0x354>)
   1ecd6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   1ecd8:	687b      	ldr	r3, [r7, #4]
   1ecda:	7a9a      	ldrb	r2, [r3, #10]
   1ecdc:	2314      	movs	r3, #20
   1ecde:	18fb      	adds	r3, r7, r3
   1ece0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1ece2:	233b      	movs	r3, #59	; 0x3b
   1ece4:	18fb      	adds	r3, r7, r3
   1ece6:	781b      	ldrb	r3, [r3, #0]
   1ece8:	4a52      	ldr	r2, [pc, #328]	; (1ee34 <tcc_init+0x358>)
   1ecea:	5cd3      	ldrb	r3, [r2, r3]
   1ecec:	2214      	movs	r2, #20
   1ecee:	18ba      	adds	r2, r7, r2
   1ecf0:	0011      	movs	r1, r2
   1ecf2:	0018      	movs	r0, r3
   1ecf4:	4b50      	ldr	r3, [pc, #320]	; (1ee38 <tcc_init+0x35c>)
   1ecf6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1ecf8:	233b      	movs	r3, #59	; 0x3b
   1ecfa:	18fb      	adds	r3, r7, r3
   1ecfc:	781b      	ldrb	r3, [r3, #0]
   1ecfe:	4a4d      	ldr	r2, [pc, #308]	; (1ee34 <tcc_init+0x358>)
   1ed00:	5cd3      	ldrb	r3, [r2, r3]
   1ed02:	0018      	movs	r0, r3
   1ed04:	4b4d      	ldr	r3, [pc, #308]	; (1ee3c <tcc_init+0x360>)
   1ed06:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1ed08:	2300      	movs	r3, #0
   1ed0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ed0c:	e02d      	b.n	1ed6a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   1ed0e:	687a      	ldr	r2, [r7, #4]
   1ed10:	2198      	movs	r1, #152	; 0x98
   1ed12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed14:	18d3      	adds	r3, r2, r3
   1ed16:	185b      	adds	r3, r3, r1
   1ed18:	781b      	ldrb	r3, [r3, #0]
   1ed1a:	2201      	movs	r2, #1
   1ed1c:	4053      	eors	r3, r2
   1ed1e:	b2db      	uxtb	r3, r3
   1ed20:	2b00      	cmp	r3, #0
   1ed22:	d11e      	bne.n	1ed62 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   1ed24:	2310      	movs	r3, #16
   1ed26:	18fb      	adds	r3, r7, r3
   1ed28:	0018      	movs	r0, r3
   1ed2a:	4b45      	ldr	r3, [pc, #276]	; (1ee40 <tcc_init+0x364>)
   1ed2c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1ed2e:	687b      	ldr	r3, [r7, #4]
   1ed30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1ed32:	321e      	adds	r2, #30
   1ed34:	0092      	lsls	r2, r2, #2
   1ed36:	58d3      	ldr	r3, [r2, r3]
   1ed38:	b2da      	uxtb	r2, r3
   1ed3a:	2310      	movs	r3, #16
   1ed3c:	18fb      	adds	r3, r7, r3
   1ed3e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1ed40:	2310      	movs	r3, #16
   1ed42:	18fb      	adds	r3, r7, r3
   1ed44:	2201      	movs	r2, #1
   1ed46:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   1ed48:	687b      	ldr	r3, [r7, #4]
   1ed4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1ed4c:	3216      	adds	r2, #22
   1ed4e:	0092      	lsls	r2, r2, #2
   1ed50:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   1ed52:	b2db      	uxtb	r3, r3
   1ed54:	2210      	movs	r2, #16
   1ed56:	18ba      	adds	r2, r7, r2
   1ed58:	0011      	movs	r1, r2
   1ed5a:	0018      	movs	r0, r3
   1ed5c:	4b39      	ldr	r3, [pc, #228]	; (1ee44 <tcc_init+0x368>)
   1ed5e:	4798      	blx	r3
   1ed60:	e000      	b.n	1ed64 <tcc_init+0x288>
			continue;
   1ed62:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1ed64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed66:	3301      	adds	r3, #1
   1ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ed6a:	233b      	movs	r3, #59	; 0x3b
   1ed6c:	18fb      	adds	r3, r7, r3
   1ed6e:	781b      	ldrb	r3, [r3, #0]
   1ed70:	4a28      	ldr	r2, [pc, #160]	; (1ee14 <tcc_init+0x338>)
   1ed72:	5cd3      	ldrb	r3, [r2, r3]
   1ed74:	001a      	movs	r2, r3
   1ed76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed78:	429a      	cmp	r2, r3
   1ed7a:	dcc8      	bgt.n	1ed0e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   1ed7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ed7e:	68bb      	ldr	r3, [r7, #8]
   1ed80:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1ed82:	46c0      	nop			; (mov r8, r8)
   1ed84:	68bb      	ldr	r3, [r7, #8]
   1ed86:	689b      	ldr	r3, [r3, #8]
   1ed88:	2204      	movs	r2, #4
   1ed8a:	4013      	ands	r3, r2
   1ed8c:	d1fa      	bne.n	1ed84 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   1ed8e:	68bb      	ldr	r3, [r7, #8]
   1ed90:	22ff      	movs	r2, #255	; 0xff
   1ed92:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1ed94:	46c0      	nop			; (mov r8, r8)
   1ed96:	68bb      	ldr	r3, [r7, #8]
   1ed98:	689b      	ldr	r3, [r3, #8]
   1ed9a:	2204      	movs	r2, #4
   1ed9c:	4013      	ands	r3, r2
   1ed9e:	d1fa      	bne.n	1ed96 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   1eda0:	232b      	movs	r3, #43	; 0x2b
   1eda2:	18fb      	adds	r3, r7, r3
   1eda4:	781a      	ldrb	r2, [r3, #0]
   1eda6:	68bb      	ldr	r3, [r7, #8]
   1eda8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   1edaa:	2320      	movs	r3, #32
   1edac:	18fb      	adds	r3, r7, r3
   1edae:	681a      	ldr	r2, [r3, #0]
   1edb0:	68bb      	ldr	r3, [r7, #8]
   1edb2:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   1edb4:	2320      	movs	r3, #32
   1edb6:	18fb      	adds	r3, r7, r3
   1edb8:	685a      	ldr	r2, [r3, #4]
   1edba:	68bb      	ldr	r3, [r7, #8]
   1edbc:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   1edbe:	69fa      	ldr	r2, [r7, #28]
   1edc0:	68bb      	ldr	r3, [r7, #8]
   1edc2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1edc4:	46c0      	nop			; (mov r8, r8)
   1edc6:	68bb      	ldr	r3, [r7, #8]
   1edc8:	689b      	ldr	r3, [r3, #8]
   1edca:	4a1f      	ldr	r2, [pc, #124]	; (1ee48 <tcc_init+0x36c>)
   1edcc:	4013      	ands	r3, r2
   1edce:	d1fa      	bne.n	1edc6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   1edd0:	69ba      	ldr	r2, [r7, #24]
   1edd2:	68bb      	ldr	r3, [r7, #8]
   1edd4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1edd6:	46c0      	nop			; (mov r8, r8)
   1edd8:	68bb      	ldr	r3, [r7, #8]
   1edda:	689b      	ldr	r3, [r3, #8]
   1eddc:	2210      	movs	r2, #16
   1edde:	4013      	ands	r3, r2
   1ede0:	d1fa      	bne.n	1edd8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   1ede2:	687b      	ldr	r3, [r7, #4]
   1ede4:	681a      	ldr	r2, [r3, #0]
   1ede6:	68bb      	ldr	r3, [r7, #8]
   1ede8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1edea:	46c0      	nop			; (mov r8, r8)
   1edec:	68bb      	ldr	r3, [r7, #8]
   1edee:	689b      	ldr	r3, [r3, #8]
   1edf0:	4a16      	ldr	r2, [pc, #88]	; (1ee4c <tcc_init+0x370>)
   1edf2:	4013      	ands	r3, r2
   1edf4:	d1fa      	bne.n	1edec <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   1edf6:	687b      	ldr	r3, [r7, #4]
   1edf8:	685a      	ldr	r2, [r3, #4]
   1edfa:	68bb      	ldr	r3, [r7, #8]
   1edfc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1edfe:	2300      	movs	r3, #0
   1ee00:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ee02:	e03f      	b.n	1ee84 <tcc_init+0x3a8>
   1ee04:	0001e445 	.word	0x0001e445
   1ee08:	000243ec 	.word	0x000243ec
   1ee0c:	0001e3c1 	.word	0x0001e3c1
   1ee10:	000243f8 	.word	0x000243f8
   1ee14:	00024408 	.word	0x00024408
   1ee18:	0001e751 	.word	0x0001e751
   1ee1c:	0001e7f5 	.word	0x0001e7f5
   1ee20:	0001e851 	.word	0x0001e851
   1ee24:	0001e96d 	.word	0x0001e96d
   1ee28:	0001ea45 	.word	0x0001ea45
   1ee2c:	20004d58 	.word	0x20004d58
   1ee30:	0001e3a9 	.word	0x0001e3a9
   1ee34:	000243e8 	.word	0x000243e8
   1ee38:	0001dfc1 	.word	0x0001dfc1
   1ee3c:	0001e005 	.word	0x0001e005
   1ee40:	0001e41d 	.word	0x0001e41d
   1ee44:	0001e321 	.word	0x0001e321
   1ee48:	00020040 	.word	0x00020040
   1ee4c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   1ee50:	46c0      	nop			; (mov r8, r8)
   1ee52:	68bb      	ldr	r3, [r7, #8]
   1ee54:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1ee56:	4912      	ldr	r1, [pc, #72]	; (1eea0 <tcc_init+0x3c4>)
   1ee58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1ee5a:	4091      	lsls	r1, r2
   1ee5c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   1ee5e:	4013      	ands	r3, r2
   1ee60:	d1f7      	bne.n	1ee52 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   1ee62:	687a      	ldr	r2, [r7, #4]
   1ee64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee66:	3306      	adds	r3, #6
   1ee68:	009b      	lsls	r3, r3, #2
   1ee6a:	18d3      	adds	r3, r2, r3
   1ee6c:	3304      	adds	r3, #4
   1ee6e:	681a      	ldr	r2, [r3, #0]
   1ee70:	68b9      	ldr	r1, [r7, #8]
   1ee72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee74:	3310      	adds	r3, #16
   1ee76:	009b      	lsls	r3, r3, #2
   1ee78:	18cb      	adds	r3, r1, r3
   1ee7a:	3304      	adds	r3, #4
   1ee7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee80:	3301      	adds	r3, #1
   1ee82:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ee84:	233b      	movs	r3, #59	; 0x3b
   1ee86:	18fb      	adds	r3, r7, r3
   1ee88:	781b      	ldrb	r3, [r3, #0]
   1ee8a:	4a06      	ldr	r2, [pc, #24]	; (1eea4 <tcc_init+0x3c8>)
   1ee8c:	5cd3      	ldrb	r3, [r2, r3]
   1ee8e:	001a      	movs	r2, r3
   1ee90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee92:	429a      	cmp	r2, r3
   1ee94:	dcdc      	bgt.n	1ee50 <tcc_init+0x374>
	}

	return STATUS_OK;
   1ee96:	2300      	movs	r3, #0
}
   1ee98:	0018      	movs	r0, r3
   1ee9a:	46bd      	mov	sp, r7
   1ee9c:	b011      	add	sp, #68	; 0x44
   1ee9e:	bd90      	pop	{r4, r7, pc}
   1eea0:	00080100 	.word	0x00080100
   1eea4:	00024404 	.word	0x00024404

0001eea8 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   1eea8:	b590      	push	{r4, r7, lr}
   1eeaa:	b089      	sub	sp, #36	; 0x24
   1eeac:	af00      	add	r7, sp, #0
   1eeae:	60f8      	str	r0, [r7, #12]
   1eeb0:	0008      	movs	r0, r1
   1eeb2:	607a      	str	r2, [r7, #4]
   1eeb4:	0019      	movs	r1, r3
   1eeb6:	230b      	movs	r3, #11
   1eeb8:	18fb      	adds	r3, r7, r3
   1eeba:	1c02      	adds	r2, r0, #0
   1eebc:	701a      	strb	r2, [r3, #0]
   1eebe:	230a      	movs	r3, #10
   1eec0:	18fb      	adds	r3, r7, r3
   1eec2:	1c0a      	adds	r2, r1, #0
   1eec4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1eec6:	68fb      	ldr	r3, [r7, #12]
   1eec8:	681b      	ldr	r3, [r3, #0]
   1eeca:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   1eecc:	231b      	movs	r3, #27
   1eece:	18fc      	adds	r4, r7, r3
   1eed0:	69fb      	ldr	r3, [r7, #28]
   1eed2:	0018      	movs	r0, r3
   1eed4:	4b2e      	ldr	r3, [pc, #184]	; (1ef90 <_tcc_set_compare_value+0xe8>)
   1eed6:	4798      	blx	r3
   1eed8:	0003      	movs	r3, r0
   1eeda:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   1eedc:	231b      	movs	r3, #27
   1eede:	18fb      	adds	r3, r7, r3
   1eee0:	781b      	ldrb	r3, [r3, #0]
   1eee2:	4a2c      	ldr	r2, [pc, #176]	; (1ef94 <_tcc_set_compare_value+0xec>)
   1eee4:	5cd3      	ldrb	r3, [r2, r3]
   1eee6:	220b      	movs	r2, #11
   1eee8:	18ba      	adds	r2, r7, r2
   1eeea:	7812      	ldrb	r2, [r2, #0]
   1eeec:	429a      	cmp	r2, r3
   1eeee:	d301      	bcc.n	1eef4 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   1eef0:	2317      	movs	r3, #23
   1eef2:	e049      	b.n	1ef88 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   1eef4:	231b      	movs	r3, #27
   1eef6:	18fb      	adds	r3, r7, r3
   1eef8:	781a      	ldrb	r2, [r3, #0]
   1eefa:	4b27      	ldr	r3, [pc, #156]	; (1ef98 <_tcc_set_compare_value+0xf0>)
   1eefc:	0092      	lsls	r2, r2, #2
   1eefe:	58d3      	ldr	r3, [r2, r3]
   1ef00:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   1ef02:	687a      	ldr	r2, [r7, #4]
   1ef04:	697b      	ldr	r3, [r7, #20]
   1ef06:	429a      	cmp	r2, r3
   1ef08:	d901      	bls.n	1ef0e <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   1ef0a:	2317      	movs	r3, #23
   1ef0c:	e03c      	b.n	1ef88 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   1ef0e:	230a      	movs	r3, #10
   1ef10:	18fb      	adds	r3, r7, r3
   1ef12:	781b      	ldrb	r3, [r3, #0]
   1ef14:	2b00      	cmp	r3, #0
   1ef16:	d020      	beq.n	1ef5a <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   1ef18:	46c0      	nop			; (mov r8, r8)
   1ef1a:	69fb      	ldr	r3, [r7, #28]
   1ef1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   1ef1e:	220b      	movs	r2, #11
   1ef20:	18ba      	adds	r2, r7, r2
   1ef22:	7812      	ldrb	r2, [r2, #0]
   1ef24:	2180      	movs	r1, #128	; 0x80
   1ef26:	0249      	lsls	r1, r1, #9
   1ef28:	4091      	lsls	r1, r2
   1ef2a:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   1ef2c:	4013      	ands	r3, r2
   1ef2e:	d1f4      	bne.n	1ef1a <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   1ef30:	46c0      	nop			; (mov r8, r8)
   1ef32:	69fb      	ldr	r3, [r7, #28]
   1ef34:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   1ef36:	220b      	movs	r2, #11
   1ef38:	18ba      	adds	r2, r7, r2
   1ef3a:	7812      	ldrb	r2, [r2, #0]
   1ef3c:	2180      	movs	r1, #128	; 0x80
   1ef3e:	0309      	lsls	r1, r1, #12
   1ef40:	4091      	lsls	r1, r2
   1ef42:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   1ef44:	4013      	ands	r3, r2
   1ef46:	d1f4      	bne.n	1ef32 <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   1ef48:	230b      	movs	r3, #11
   1ef4a:	18fb      	adds	r3, r7, r3
   1ef4c:	781a      	ldrb	r2, [r3, #0]
   1ef4e:	69fb      	ldr	r3, [r7, #28]
   1ef50:	321c      	adds	r2, #28
   1ef52:	0092      	lsls	r2, r2, #2
   1ef54:	6879      	ldr	r1, [r7, #4]
   1ef56:	50d1      	str	r1, [r2, r3]
   1ef58:	e015      	b.n	1ef86 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   1ef5a:	46c0      	nop			; (mov r8, r8)
   1ef5c:	69fb      	ldr	r3, [r7, #28]
   1ef5e:	689b      	ldr	r3, [r3, #8]
   1ef60:	220b      	movs	r2, #11
   1ef62:	18ba      	adds	r2, r7, r2
   1ef64:	7812      	ldrb	r2, [r2, #0]
   1ef66:	2180      	movs	r1, #128	; 0x80
   1ef68:	0049      	lsls	r1, r1, #1
   1ef6a:	4091      	lsls	r1, r2
   1ef6c:	000a      	movs	r2, r1
   1ef6e:	4013      	ands	r3, r2
   1ef70:	d1f4      	bne.n	1ef5c <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   1ef72:	230b      	movs	r3, #11
   1ef74:	18fb      	adds	r3, r7, r3
   1ef76:	781b      	ldrb	r3, [r3, #0]
   1ef78:	69fa      	ldr	r2, [r7, #28]
   1ef7a:	3310      	adds	r3, #16
   1ef7c:	009b      	lsls	r3, r3, #2
   1ef7e:	18d3      	adds	r3, r2, r3
   1ef80:	3304      	adds	r3, #4
   1ef82:	687a      	ldr	r2, [r7, #4]
   1ef84:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   1ef86:	2300      	movs	r3, #0
}
   1ef88:	0018      	movs	r0, r3
   1ef8a:	46bd      	mov	sp, r7
   1ef8c:	b009      	add	sp, #36	; 0x24
   1ef8e:	bd90      	pop	{r4, r7, pc}
   1ef90:	0001e445 	.word	0x0001e445
   1ef94:	00024404 	.word	0x00024404
   1ef98:	000243f8 	.word	0x000243f8

0001ef9c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   1ef9c:	b590      	push	{r4, r7, lr}
   1ef9e:	b085      	sub	sp, #20
   1efa0:	af00      	add	r7, sp, #0
   1efa2:	60f8      	str	r0, [r7, #12]
   1efa4:	607a      	str	r2, [r7, #4]
   1efa6:	230b      	movs	r3, #11
   1efa8:	18fb      	adds	r3, r7, r3
   1efaa:	1c0a      	adds	r2, r1, #0
   1efac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   1efae:	68fb      	ldr	r3, [r7, #12]
   1efb0:	223c      	movs	r2, #60	; 0x3c
   1efb2:	5c9c      	ldrb	r4, [r3, r2]
   1efb4:	687a      	ldr	r2, [r7, #4]
   1efb6:	230b      	movs	r3, #11
   1efb8:	18fb      	adds	r3, r7, r3
   1efba:	7819      	ldrb	r1, [r3, #0]
   1efbc:	68f8      	ldr	r0, [r7, #12]
   1efbe:	0023      	movs	r3, r4
   1efc0:	4c03      	ldr	r4, [pc, #12]	; (1efd0 <tcc_set_compare_value+0x34>)
   1efc2:	47a0      	blx	r4
   1efc4:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   1efc6:	0018      	movs	r0, r3
   1efc8:	46bd      	mov	sp, r7
   1efca:	b005      	add	sp, #20
   1efcc:	bd90      	pop	{r4, r7, pc}
   1efce:	46c0      	nop			; (mov r8, r8)
   1efd0:	0001eea9 	.word	0x0001eea9

0001efd4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1efd4:	b580      	push	{r7, lr}
   1efd6:	af00      	add	r7, sp, #0
   1efd8:	2000      	movs	r0, #0
   1efda:	4b02      	ldr	r3, [pc, #8]	; (1efe4 <TCC0_Handler+0x10>)
   1efdc:	4798      	blx	r3
   1efde:	46c0      	nop			; (mov r8, r8)
   1efe0:	46bd      	mov	sp, r7
   1efe2:	bd80      	pop	{r7, pc}
   1efe4:	0001f011 	.word	0x0001f011

0001efe8 <TCC1_Handler>:
   1efe8:	b580      	push	{r7, lr}
   1efea:	af00      	add	r7, sp, #0
   1efec:	2001      	movs	r0, #1
   1efee:	4b02      	ldr	r3, [pc, #8]	; (1eff8 <TCC1_Handler+0x10>)
   1eff0:	4798      	blx	r3
   1eff2:	46c0      	nop			; (mov r8, r8)
   1eff4:	46bd      	mov	sp, r7
   1eff6:	bd80      	pop	{r7, pc}
   1eff8:	0001f011 	.word	0x0001f011

0001effc <TCC2_Handler>:
   1effc:	b580      	push	{r7, lr}
   1effe:	af00      	add	r7, sp, #0
   1f000:	2002      	movs	r0, #2
   1f002:	4b02      	ldr	r3, [pc, #8]	; (1f00c <TCC2_Handler+0x10>)
   1f004:	4798      	blx	r3
   1f006:	46c0      	nop			; (mov r8, r8)
   1f008:	46bd      	mov	sp, r7
   1f00a:	bd80      	pop	{r7, pc}
   1f00c:	0001f011 	.word	0x0001f011

0001f010 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1f010:	b580      	push	{r7, lr}
   1f012:	b086      	sub	sp, #24
   1f014:	af00      	add	r7, sp, #0
   1f016:	0002      	movs	r2, r0
   1f018:	1dfb      	adds	r3, r7, #7
   1f01a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   1f01c:	1dfb      	adds	r3, r7, #7
   1f01e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   1f020:	4b18      	ldr	r3, [pc, #96]	; (1f084 <_tcc_interrupt_handler+0x74>)
   1f022:	0092      	lsls	r2, r2, #2
   1f024:	58d3      	ldr	r3, [r2, r3]
   1f026:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f028:	693b      	ldr	r3, [r7, #16]
   1f02a:	681b      	ldr	r3, [r3, #0]
   1f02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   1f02e:	693b      	ldr	r3, [r7, #16]
   1f030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f032:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1f034:	693b      	ldr	r3, [r7, #16]
   1f036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f038:	4013      	ands	r3, r2
   1f03a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f03c:	2300      	movs	r3, #0
   1f03e:	617b      	str	r3, [r7, #20]
   1f040:	e019      	b.n	1f076 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f042:	4b11      	ldr	r3, [pc, #68]	; (1f088 <_tcc_interrupt_handler+0x78>)
   1f044:	697a      	ldr	r2, [r7, #20]
   1f046:	0092      	lsls	r2, r2, #2
   1f048:	58d3      	ldr	r3, [r2, r3]
   1f04a:	68fa      	ldr	r2, [r7, #12]
   1f04c:	4013      	ands	r3, r2
   1f04e:	d00f      	beq.n	1f070 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1f050:	693a      	ldr	r2, [r7, #16]
   1f052:	697b      	ldr	r3, [r7, #20]
   1f054:	009b      	lsls	r3, r3, #2
   1f056:	18d3      	adds	r3, r2, r3
   1f058:	3304      	adds	r3, #4
   1f05a:	681b      	ldr	r3, [r3, #0]
   1f05c:	693a      	ldr	r2, [r7, #16]
   1f05e:	0010      	movs	r0, r2
   1f060:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1f062:	693b      	ldr	r3, [r7, #16]
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	4a08      	ldr	r2, [pc, #32]	; (1f088 <_tcc_interrupt_handler+0x78>)
   1f068:	6979      	ldr	r1, [r7, #20]
   1f06a:	0089      	lsls	r1, r1, #2
   1f06c:	588a      	ldr	r2, [r1, r2]
   1f06e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f070:	697b      	ldr	r3, [r7, #20]
   1f072:	3301      	adds	r3, #1
   1f074:	617b      	str	r3, [r7, #20]
   1f076:	697b      	ldr	r3, [r7, #20]
   1f078:	2b0b      	cmp	r3, #11
   1f07a:	dde2      	ble.n	1f042 <_tcc_interrupt_handler+0x32>
		}
	}
}
   1f07c:	46c0      	nop			; (mov r8, r8)
   1f07e:	46bd      	mov	sp, r7
   1f080:	b006      	add	sp, #24
   1f082:	bd80      	pop	{r7, pc}
   1f084:	20004d58 	.word	0x20004d58
   1f088:	0002440c 	.word	0x0002440c

0001f08c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   1f08c:	b580      	push	{r7, lr}
   1f08e:	b082      	sub	sp, #8
   1f090:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1f092:	4b2f      	ldr	r3, [pc, #188]	; (1f150 <Reset_Handler+0xc4>)
   1f094:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1f096:	4b2f      	ldr	r3, [pc, #188]	; (1f154 <Reset_Handler+0xc8>)
   1f098:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1f09a:	687a      	ldr	r2, [r7, #4]
   1f09c:	683b      	ldr	r3, [r7, #0]
   1f09e:	429a      	cmp	r2, r3
   1f0a0:	d00c      	beq.n	1f0bc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   1f0a2:	e007      	b.n	1f0b4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   1f0a4:	683b      	ldr	r3, [r7, #0]
   1f0a6:	1d1a      	adds	r2, r3, #4
   1f0a8:	603a      	str	r2, [r7, #0]
   1f0aa:	687a      	ldr	r2, [r7, #4]
   1f0ac:	1d11      	adds	r1, r2, #4
   1f0ae:	6079      	str	r1, [r7, #4]
   1f0b0:	6812      	ldr	r2, [r2, #0]
   1f0b2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   1f0b4:	683a      	ldr	r2, [r7, #0]
   1f0b6:	4b28      	ldr	r3, [pc, #160]	; (1f158 <Reset_Handler+0xcc>)
   1f0b8:	429a      	cmp	r2, r3
   1f0ba:	d3f3      	bcc.n	1f0a4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1f0bc:	4b27      	ldr	r3, [pc, #156]	; (1f15c <Reset_Handler+0xd0>)
   1f0be:	603b      	str	r3, [r7, #0]
   1f0c0:	e004      	b.n	1f0cc <Reset_Handler+0x40>
                *pDest++ = 0;
   1f0c2:	683b      	ldr	r3, [r7, #0]
   1f0c4:	1d1a      	adds	r2, r3, #4
   1f0c6:	603a      	str	r2, [r7, #0]
   1f0c8:	2200      	movs	r2, #0
   1f0ca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1f0cc:	683a      	ldr	r2, [r7, #0]
   1f0ce:	4b24      	ldr	r3, [pc, #144]	; (1f160 <Reset_Handler+0xd4>)
   1f0d0:	429a      	cmp	r2, r3
   1f0d2:	d3f6      	bcc.n	1f0c2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   1f0d4:	4b23      	ldr	r3, [pc, #140]	; (1f164 <Reset_Handler+0xd8>)
   1f0d6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1f0d8:	4b23      	ldr	r3, [pc, #140]	; (1f168 <Reset_Handler+0xdc>)
   1f0da:	687a      	ldr	r2, [r7, #4]
   1f0dc:	21ff      	movs	r1, #255	; 0xff
   1f0de:	438a      	bics	r2, r1
   1f0e0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1f0e2:	4a22      	ldr	r2, [pc, #136]	; (1f16c <Reset_Handler+0xe0>)
   1f0e4:	2390      	movs	r3, #144	; 0x90
   1f0e6:	005b      	lsls	r3, r3, #1
   1f0e8:	2102      	movs	r1, #2
   1f0ea:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1f0ec:	4a20      	ldr	r2, [pc, #128]	; (1f170 <Reset_Handler+0xe4>)
   1f0ee:	78d3      	ldrb	r3, [r2, #3]
   1f0f0:	2103      	movs	r1, #3
   1f0f2:	438b      	bics	r3, r1
   1f0f4:	1c19      	adds	r1, r3, #0
   1f0f6:	2302      	movs	r3, #2
   1f0f8:	430b      	orrs	r3, r1
   1f0fa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1f0fc:	4a1c      	ldr	r2, [pc, #112]	; (1f170 <Reset_Handler+0xe4>)
   1f0fe:	78d3      	ldrb	r3, [r2, #3]
   1f100:	210c      	movs	r1, #12
   1f102:	438b      	bics	r3, r1
   1f104:	1c19      	adds	r1, r3, #0
   1f106:	2308      	movs	r3, #8
   1f108:	430b      	orrs	r3, r1
   1f10a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1f10c:	4a19      	ldr	r2, [pc, #100]	; (1f174 <Reset_Handler+0xe8>)
   1f10e:	7b93      	ldrb	r3, [r2, #14]
   1f110:	2130      	movs	r1, #48	; 0x30
   1f112:	438b      	bics	r3, r1
   1f114:	1c19      	adds	r1, r3, #0
   1f116:	2320      	movs	r3, #32
   1f118:	430b      	orrs	r3, r1
   1f11a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1f11c:	4a15      	ldr	r2, [pc, #84]	; (1f174 <Reset_Handler+0xe8>)
   1f11e:	7b93      	ldrb	r3, [r2, #14]
   1f120:	210c      	movs	r1, #12
   1f122:	438b      	bics	r3, r1
   1f124:	1c19      	adds	r1, r3, #0
   1f126:	2308      	movs	r3, #8
   1f128:	430b      	orrs	r3, r1
   1f12a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1f12c:	4a11      	ldr	r2, [pc, #68]	; (1f174 <Reset_Handler+0xe8>)
   1f12e:	7b93      	ldrb	r3, [r2, #14]
   1f130:	2103      	movs	r1, #3
   1f132:	438b      	bics	r3, r1
   1f134:	1c19      	adds	r1, r3, #0
   1f136:	2302      	movs	r3, #2
   1f138:	430b      	orrs	r3, r1
   1f13a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1f13c:	4a0e      	ldr	r2, [pc, #56]	; (1f178 <Reset_Handler+0xec>)
   1f13e:	6853      	ldr	r3, [r2, #4]
   1f140:	2180      	movs	r1, #128	; 0x80
   1f142:	430b      	orrs	r3, r1
   1f144:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1f146:	4b0d      	ldr	r3, [pc, #52]	; (1f17c <Reset_Handler+0xf0>)
   1f148:	4798      	blx	r3

        /* Branch to main function */
        main();
   1f14a:	4b0d      	ldr	r3, [pc, #52]	; (1f180 <Reset_Handler+0xf4>)
   1f14c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1f14e:	e7fe      	b.n	1f14e <Reset_Handler+0xc2>
   1f150:	000248e0 	.word	0x000248e0
   1f154:	20000000 	.word	0x20000000
   1f158:	20000218 	.word	0x20000218
   1f15c:	20000220 	.word	0x20000220
   1f160:	20004da8 	.word	0x20004da8
   1f164:	00012000 	.word	0x00012000
   1f168:	e000ed00 	.word	0xe000ed00
   1f16c:	41007000 	.word	0x41007000
   1f170:	41005000 	.word	0x41005000
   1f174:	41004800 	.word	0x41004800
   1f178:	41004000 	.word	0x41004000
   1f17c:	00021e15 	.word	0x00021e15
   1f180:	0001f265 	.word	0x0001f265

0001f184 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   1f184:	b580      	push	{r7, lr}
   1f186:	af00      	add	r7, sp, #0
  __asm volatile (
   1f188:	2004      	movs	r0, #4
   1f18a:	4671      	mov	r1, lr
   1f18c:	4208      	tst	r0, r1
   1f18e:	d002      	beq.n	1f196 <_MSP>
   1f190:	f3ef 8009 	mrs	r0, PSP
   1f194:	e001      	b.n	1f19a <_HALT>

0001f196 <_MSP>:
   1f196:	f3ef 8008 	mrs	r0, MSP

0001f19a <_HALT>:
   1f19a:	6941      	ldr	r1, [r0, #20]
   1f19c:	e004      	b.n	1f1a8 <HardFault_HandlerC>
   1f19e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1f1a0:	46c0      	nop			; (mov r8, r8)
   1f1a2:	46bd      	mov	sp, r7
   1f1a4:	bd80      	pop	{r7, pc}
	...

0001f1a8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1f1a8:	b580      	push	{r7, lr}
   1f1aa:	b090      	sub	sp, #64	; 0x40
   1f1ac:	af00      	add	r7, sp, #0
   1f1ae:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1f1b0:	687b      	ldr	r3, [r7, #4]
   1f1b2:	681b      	ldr	r3, [r3, #0]
   1f1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1f1b6:	687b      	ldr	r3, [r7, #4]
   1f1b8:	685b      	ldr	r3, [r3, #4]
   1f1ba:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1f1bc:	687b      	ldr	r3, [r7, #4]
   1f1be:	689b      	ldr	r3, [r3, #8]
   1f1c0:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1f1c2:	687b      	ldr	r3, [r7, #4]
   1f1c4:	68db      	ldr	r3, [r3, #12]
   1f1c6:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1f1c8:	687b      	ldr	r3, [r7, #4]
   1f1ca:	691b      	ldr	r3, [r3, #16]
   1f1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1f1ce:	687b      	ldr	r3, [r7, #4]
   1f1d0:	695b      	ldr	r3, [r3, #20]
   1f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1f1d4:	687b      	ldr	r3, [r7, #4]
   1f1d6:	699b      	ldr	r3, [r3, #24]
   1f1d8:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1f1da:	687b      	ldr	r3, [r7, #4]
   1f1dc:	69db      	ldr	r3, [r3, #28]
   1f1de:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1f1e0:	4b0b      	ldr	r3, [pc, #44]	; (1f210 <HardFault_HandlerC+0x68>)
   1f1e2:	681b      	ldr	r3, [r3, #0]
   1f1e4:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1f1e6:	4b0b      	ldr	r3, [pc, #44]	; (1f214 <HardFault_HandlerC+0x6c>)
   1f1e8:	681b      	ldr	r3, [r3, #0]
   1f1ea:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1f1ec:	4b0a      	ldr	r3, [pc, #40]	; (1f218 <HardFault_HandlerC+0x70>)
   1f1ee:	681b      	ldr	r3, [r3, #0]
   1f1f0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1f1f2:	4b0a      	ldr	r3, [pc, #40]	; (1f21c <HardFault_HandlerC+0x74>)
   1f1f4:	681b      	ldr	r3, [r3, #0]
   1f1f6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1f1f8:	4b09      	ldr	r3, [pc, #36]	; (1f220 <HardFault_HandlerC+0x78>)
   1f1fa:	681b      	ldr	r3, [r3, #0]
   1f1fc:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1f1fe:	4b09      	ldr	r3, [pc, #36]	; (1f224 <HardFault_HandlerC+0x7c>)
   1f200:	681b      	ldr	r3, [r3, #0]
   1f202:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1f204:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1f206:	46c0      	nop			; (mov r8, r8)
   1f208:	46bd      	mov	sp, r7
   1f20a:	b010      	add	sp, #64	; 0x40
   1f20c:	bd80      	pop	{r7, pc}
   1f20e:	46c0      	nop			; (mov r8, r8)
   1f210:	e000ed28 	.word	0xe000ed28
   1f214:	e000ed2c 	.word	0xe000ed2c
   1f218:	e000ed30 	.word	0xe000ed30
   1f21c:	e000ed3c 	.word	0xe000ed3c
   1f220:	e000ed34 	.word	0xe000ed34
   1f224:	e000ed38 	.word	0xe000ed38

0001f228 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1f228:	b580      	push	{r7, lr}
   1f22a:	b084      	sub	sp, #16
   1f22c:	af00      	add	r7, sp, #0
   1f22e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1f230:	4b0a      	ldr	r3, [pc, #40]	; (1f25c <_sbrk+0x34>)
   1f232:	681b      	ldr	r3, [r3, #0]
   1f234:	2b00      	cmp	r3, #0
   1f236:	d102      	bne.n	1f23e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   1f238:	4b08      	ldr	r3, [pc, #32]	; (1f25c <_sbrk+0x34>)
   1f23a:	4a09      	ldr	r2, [pc, #36]	; (1f260 <_sbrk+0x38>)
   1f23c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1f23e:	4b07      	ldr	r3, [pc, #28]	; (1f25c <_sbrk+0x34>)
   1f240:	681b      	ldr	r3, [r3, #0]
   1f242:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1f244:	4b05      	ldr	r3, [pc, #20]	; (1f25c <_sbrk+0x34>)
   1f246:	681a      	ldr	r2, [r3, #0]
   1f248:	687b      	ldr	r3, [r7, #4]
   1f24a:	18d2      	adds	r2, r2, r3
   1f24c:	4b03      	ldr	r3, [pc, #12]	; (1f25c <_sbrk+0x34>)
   1f24e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   1f250:	68fb      	ldr	r3, [r7, #12]
}
   1f252:	0018      	movs	r0, r3
   1f254:	46bd      	mov	sp, r7
   1f256:	b004      	add	sp, #16
   1f258:	bd80      	pop	{r7, pc}
   1f25a:	46c0      	nop			; (mov r8, r8)
   1f25c:	20003abc 	.word	0x20003abc
   1f260:	20006da8 	.word	0x20006da8

0001f264 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   1f264:	b580      	push	{r7, lr}
   1f266:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   1f268:	4b06      	ldr	r3, [pc, #24]	; (1f284 <main+0x20>)
   1f26a:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   1f26c:	4b06      	ldr	r3, [pc, #24]	; (1f288 <main+0x24>)
   1f26e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   1f270:	2001      	movs	r0, #1
   1f272:	4b06      	ldr	r3, [pc, #24]	; (1f28c <main+0x28>)
   1f274:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1f276:	4b06      	ldr	r3, [pc, #24]	; (1f290 <main+0x2c>)
   1f278:	4798      	blx	r3

    return 0;  // Will not get here
   1f27a:	2300      	movs	r3, #0
}
   1f27c:	0018      	movs	r0, r3
   1f27e:	46bd      	mov	sp, r7
   1f280:	bd80      	pop	{r7, pc}
   1f282:	46c0      	nop			; (mov r8, r8)
   1f284:	0001e375 	.word	0x0001e375
   1f288:	0001b771 	.word	0x0001b771
   1f28c:	00015e89 	.word	0x00015e89
   1f290:	00019e0d 	.word	0x00019e0d

0001f294 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   1f294:	b580      	push	{r7, lr}
   1f296:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   1f298:	4b0f      	ldr	r3, [pc, #60]	; (1f2d8 <vApplicationDaemonTaskStartupHook+0x44>)
   1f29a:	0018      	movs	r0, r3
   1f29c:	4b0f      	ldr	r3, [pc, #60]	; (1f2dc <vApplicationDaemonTaskStartupHook+0x48>)
   1f29e:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   1f2a0:	4b0f      	ldr	r3, [pc, #60]	; (1f2e0 <vApplicationDaemonTaskStartupHook+0x4c>)
   1f2a2:	0018      	movs	r0, r3
   1f2a4:	4b0d      	ldr	r3, [pc, #52]	; (1f2dc <vApplicationDaemonTaskStartupHook+0x48>)
   1f2a6:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   1f2a8:	4b0e      	ldr	r3, [pc, #56]	; (1f2e4 <vApplicationDaemonTaskStartupHook+0x50>)
   1f2aa:	4798      	blx	r3
   1f2ac:	1e03      	subs	r3, r0, #0
   1f2ae:	d004      	beq.n	1f2ba <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   1f2b0:	4b0d      	ldr	r3, [pc, #52]	; (1f2e8 <vApplicationDaemonTaskStartupHook+0x54>)
   1f2b2:	0018      	movs	r0, r3
   1f2b4:	4b09      	ldr	r3, [pc, #36]	; (1f2dc <vApplicationDaemonTaskStartupHook+0x48>)
   1f2b6:	4798      	blx	r3
   1f2b8:	e003      	b.n	1f2c2 <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   1f2ba:	4b0c      	ldr	r3, [pc, #48]	; (1f2ec <vApplicationDaemonTaskStartupHook+0x58>)
   1f2bc:	0018      	movs	r0, r3
   1f2be:	4b07      	ldr	r3, [pc, #28]	; (1f2dc <vApplicationDaemonTaskStartupHook+0x48>)
   1f2c0:	4798      	blx	r3
    }

    StartTasks();
   1f2c2:	4b0b      	ldr	r3, [pc, #44]	; (1f2f0 <vApplicationDaemonTaskStartupHook+0x5c>)
   1f2c4:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   1f2c6:	4b0b      	ldr	r3, [pc, #44]	; (1f2f4 <vApplicationDaemonTaskStartupHook+0x60>)
   1f2c8:	681b      	ldr	r3, [r3, #0]
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	4b0a      	ldr	r3, [pc, #40]	; (1f2f8 <vApplicationDaemonTaskStartupHook+0x64>)
   1f2ce:	4798      	blx	r3
}
   1f2d0:	46c0      	nop			; (mov r8, r8)
   1f2d2:	46bd      	mov	sp, r7
   1f2d4:	bd80      	pop	{r7, pc}
   1f2d6:	46c0      	nop			; (mov r8, r8)
   1f2d8:	0002443c 	.word	0x0002443c
   1f2dc:	0001b7e1 	.word	0x0001b7e1
   1f2e0:	00024460 	.word	0x00024460
   1f2e4:	000142c5 	.word	0x000142c5
   1f2e8:	00024478 	.word	0x00024478
   1f2ec:	0002449c 	.word	0x0002449c
   1f2f0:	0001f2fd 	.word	0x0001f2fd
   1f2f4:	20003ac4 	.word	0x20003ac4
   1f2f8:	00019cb1 	.word	0x00019cb1

0001f2fc <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   1f2fc:	b590      	push	{r4, r7, lr}
   1f2fe:	b083      	sub	sp, #12
   1f300:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1f302:	4b26      	ldr	r3, [pc, #152]	; (1f39c <StartTasks+0xa0>)
   1f304:	4798      	blx	r3
   1f306:	0003      	movs	r3, r0
   1f308:	4a25      	ldr	r2, [pc, #148]	; (1f3a0 <StartTasks+0xa4>)
   1f30a:	4826      	ldr	r0, [pc, #152]	; (1f3a4 <StartTasks+0xa8>)
   1f30c:	2140      	movs	r1, #64	; 0x40
   1f30e:	4c26      	ldr	r4, [pc, #152]	; (1f3a8 <StartTasks+0xac>)
   1f310:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f312:	4b24      	ldr	r3, [pc, #144]	; (1f3a4 <StartTasks+0xa8>)
   1f314:	0018      	movs	r0, r3
   1f316:	4b25      	ldr	r3, [pc, #148]	; (1f3ac <StartTasks+0xb0>)
   1f318:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1f31a:	23c8      	movs	r3, #200	; 0xc8
   1f31c:	005a      	lsls	r2, r3, #1
   1f31e:	4924      	ldr	r1, [pc, #144]	; (1f3b0 <StartTasks+0xb4>)
   1f320:	4824      	ldr	r0, [pc, #144]	; (1f3b4 <StartTasks+0xb8>)
   1f322:	4b25      	ldr	r3, [pc, #148]	; (1f3b8 <StartTasks+0xbc>)
   1f324:	9301      	str	r3, [sp, #4]
   1f326:	2304      	movs	r3, #4
   1f328:	9300      	str	r3, [sp, #0]
   1f32a:	2300      	movs	r3, #0
   1f32c:	4c23      	ldr	r4, [pc, #140]	; (1f3bc <StartTasks+0xc0>)
   1f32e:	47a0      	blx	r4
   1f330:	0003      	movs	r3, r0
   1f332:	2b01      	cmp	r3, #1
   1f334:	d003      	beq.n	1f33e <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1f336:	4b22      	ldr	r3, [pc, #136]	; (1f3c0 <StartTasks+0xc4>)
   1f338:	0018      	movs	r0, r3
   1f33a:	4b1c      	ldr	r3, [pc, #112]	; (1f3ac <StartTasks+0xb0>)
   1f33c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1f33e:	4b17      	ldr	r3, [pc, #92]	; (1f39c <StartTasks+0xa0>)
   1f340:	4798      	blx	r3
   1f342:	0003      	movs	r3, r0
   1f344:	4a1f      	ldr	r2, [pc, #124]	; (1f3c4 <StartTasks+0xc8>)
   1f346:	4817      	ldr	r0, [pc, #92]	; (1f3a4 <StartTasks+0xa8>)
   1f348:	2140      	movs	r1, #64	; 0x40
   1f34a:	4c17      	ldr	r4, [pc, #92]	; (1f3a8 <StartTasks+0xac>)
   1f34c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f34e:	4b15      	ldr	r3, [pc, #84]	; (1f3a4 <StartTasks+0xa8>)
   1f350:	0018      	movs	r0, r3
   1f352:	4b16      	ldr	r3, [pc, #88]	; (1f3ac <StartTasks+0xb0>)
   1f354:	4798      	blx	r3
        //SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   1f356:	23c8      	movs	r3, #200	; 0xc8
   1f358:	005a      	lsls	r2, r3, #1
   1f35a:	491b      	ldr	r1, [pc, #108]	; (1f3c8 <StartTasks+0xcc>)
   1f35c:	481b      	ldr	r0, [pc, #108]	; (1f3cc <StartTasks+0xd0>)
   1f35e:	4b1c      	ldr	r3, [pc, #112]	; (1f3d0 <StartTasks+0xd4>)
   1f360:	9301      	str	r3, [sp, #4]
   1f362:	2304      	movs	r3, #4
   1f364:	9300      	str	r3, [sp, #0]
   1f366:	2300      	movs	r3, #0
   1f368:	4c14      	ldr	r4, [pc, #80]	; (1f3bc <StartTasks+0xc0>)
   1f36a:	47a0      	blx	r4
   1f36c:	0003      	movs	r3, r0
   1f36e:	2b01      	cmp	r3, #1
   1f370:	d003      	beq.n	1f37a <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   1f372:	4b18      	ldr	r3, [pc, #96]	; (1f3d4 <StartTasks+0xd8>)
   1f374:	0018      	movs	r0, r3
   1f376:	4b0d      	ldr	r3, [pc, #52]	; (1f3ac <StartTasks+0xb0>)
   1f378:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   1f37a:	4b08      	ldr	r3, [pc, #32]	; (1f39c <StartTasks+0xa0>)
   1f37c:	4798      	blx	r3
   1f37e:	0003      	movs	r3, r0
   1f380:	4a15      	ldr	r2, [pc, #84]	; (1f3d8 <StartTasks+0xdc>)
   1f382:	4808      	ldr	r0, [pc, #32]	; (1f3a4 <StartTasks+0xa8>)
   1f384:	2140      	movs	r1, #64	; 0x40
   1f386:	4c08      	ldr	r4, [pc, #32]	; (1f3a8 <StartTasks+0xac>)
   1f388:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f38a:	4b06      	ldr	r3, [pc, #24]	; (1f3a4 <StartTasks+0xa8>)
   1f38c:	0018      	movs	r0, r3
   1f38e:	4b07      	ldr	r3, [pc, #28]	; (1f3ac <StartTasks+0xb0>)
   1f390:	4798      	blx	r3
    //if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
}
   1f392:	46c0      	nop			; (mov r8, r8)
   1f394:	46bd      	mov	sp, r7
   1f396:	b001      	add	sp, #4
   1f398:	bd90      	pop	{r4, r7, pc}
   1f39a:	46c0      	nop			; (mov r8, r8)
   1f39c:	00017df1 	.word	0x00017df1
   1f3a0:	000244b8 	.word	0x000244b8
   1f3a4:	20004d64 	.word	0x20004d64
   1f3a8:	0002202d 	.word	0x0002202d
   1f3ac:	0001b7e1 	.word	0x0001b7e1
   1f3b0:	000244dc 	.word	0x000244dc
   1f3b4:	00013819 	.word	0x00013819
   1f3b8:	20003ac0 	.word	0x20003ac0
   1f3bc:	00019835 	.word	0x00019835
   1f3c0:	000244e8 	.word	0x000244e8
   1f3c4:	00024514 	.word	0x00024514
   1f3c8:	00024534 	.word	0x00024534
   1f3cc:	00014dd9 	.word	0x00014dd9
   1f3d0:	20003ac8 	.word	0x20003ac8
   1f3d4:	0002453c 	.word	0x0002453c
   1f3d8:	00024568 	.word	0x00024568

0001f3dc <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   1f3dc:	b580      	push	{r7, lr}
   1f3de:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1f3e0:	4b02      	ldr	r3, [pc, #8]	; (1f3ec <vApplicationMallocFailedHook+0x10>)
   1f3e2:	0018      	movs	r0, r3
   1f3e4:	4b02      	ldr	r3, [pc, #8]	; (1f3f0 <vApplicationMallocFailedHook+0x14>)
   1f3e6:	4798      	blx	r3
    while (1)
   1f3e8:	e7fe      	b.n	1f3e8 <vApplicationMallocFailedHook+0xc>
   1f3ea:	46c0      	nop			; (mov r8, r8)
   1f3ec:	0002458c 	.word	0x0002458c
   1f3f0:	0001b7e1 	.word	0x0001b7e1

0001f3f4 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   1f3f4:	b580      	push	{r7, lr}
   1f3f6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1f3f8:	4b02      	ldr	r3, [pc, #8]	; (1f404 <vApplicationStackOverflowHook+0x10>)
   1f3fa:	0018      	movs	r0, r3
   1f3fc:	4b02      	ldr	r3, [pc, #8]	; (1f408 <vApplicationStackOverflowHook+0x14>)
   1f3fe:	4798      	blx	r3
    while (1)
   1f400:	e7fe      	b.n	1f400 <vApplicationStackOverflowHook+0xc>
   1f402:	46c0      	nop			; (mov r8, r8)
   1f404:	000245b8 	.word	0x000245b8
   1f408:	0001b7e1 	.word	0x0001b7e1

0001f40c <__udivsi3>:
   1f40c:	2200      	movs	r2, #0
   1f40e:	0843      	lsrs	r3, r0, #1
   1f410:	428b      	cmp	r3, r1
   1f412:	d374      	bcc.n	1f4fe <__udivsi3+0xf2>
   1f414:	0903      	lsrs	r3, r0, #4
   1f416:	428b      	cmp	r3, r1
   1f418:	d35f      	bcc.n	1f4da <__udivsi3+0xce>
   1f41a:	0a03      	lsrs	r3, r0, #8
   1f41c:	428b      	cmp	r3, r1
   1f41e:	d344      	bcc.n	1f4aa <__udivsi3+0x9e>
   1f420:	0b03      	lsrs	r3, r0, #12
   1f422:	428b      	cmp	r3, r1
   1f424:	d328      	bcc.n	1f478 <__udivsi3+0x6c>
   1f426:	0c03      	lsrs	r3, r0, #16
   1f428:	428b      	cmp	r3, r1
   1f42a:	d30d      	bcc.n	1f448 <__udivsi3+0x3c>
   1f42c:	22ff      	movs	r2, #255	; 0xff
   1f42e:	0209      	lsls	r1, r1, #8
   1f430:	ba12      	rev	r2, r2
   1f432:	0c03      	lsrs	r3, r0, #16
   1f434:	428b      	cmp	r3, r1
   1f436:	d302      	bcc.n	1f43e <__udivsi3+0x32>
   1f438:	1212      	asrs	r2, r2, #8
   1f43a:	0209      	lsls	r1, r1, #8
   1f43c:	d065      	beq.n	1f50a <__udivsi3+0xfe>
   1f43e:	0b03      	lsrs	r3, r0, #12
   1f440:	428b      	cmp	r3, r1
   1f442:	d319      	bcc.n	1f478 <__udivsi3+0x6c>
   1f444:	e000      	b.n	1f448 <__udivsi3+0x3c>
   1f446:	0a09      	lsrs	r1, r1, #8
   1f448:	0bc3      	lsrs	r3, r0, #15
   1f44a:	428b      	cmp	r3, r1
   1f44c:	d301      	bcc.n	1f452 <__udivsi3+0x46>
   1f44e:	03cb      	lsls	r3, r1, #15
   1f450:	1ac0      	subs	r0, r0, r3
   1f452:	4152      	adcs	r2, r2
   1f454:	0b83      	lsrs	r3, r0, #14
   1f456:	428b      	cmp	r3, r1
   1f458:	d301      	bcc.n	1f45e <__udivsi3+0x52>
   1f45a:	038b      	lsls	r3, r1, #14
   1f45c:	1ac0      	subs	r0, r0, r3
   1f45e:	4152      	adcs	r2, r2
   1f460:	0b43      	lsrs	r3, r0, #13
   1f462:	428b      	cmp	r3, r1
   1f464:	d301      	bcc.n	1f46a <__udivsi3+0x5e>
   1f466:	034b      	lsls	r3, r1, #13
   1f468:	1ac0      	subs	r0, r0, r3
   1f46a:	4152      	adcs	r2, r2
   1f46c:	0b03      	lsrs	r3, r0, #12
   1f46e:	428b      	cmp	r3, r1
   1f470:	d301      	bcc.n	1f476 <__udivsi3+0x6a>
   1f472:	030b      	lsls	r3, r1, #12
   1f474:	1ac0      	subs	r0, r0, r3
   1f476:	4152      	adcs	r2, r2
   1f478:	0ac3      	lsrs	r3, r0, #11
   1f47a:	428b      	cmp	r3, r1
   1f47c:	d301      	bcc.n	1f482 <__udivsi3+0x76>
   1f47e:	02cb      	lsls	r3, r1, #11
   1f480:	1ac0      	subs	r0, r0, r3
   1f482:	4152      	adcs	r2, r2
   1f484:	0a83      	lsrs	r3, r0, #10
   1f486:	428b      	cmp	r3, r1
   1f488:	d301      	bcc.n	1f48e <__udivsi3+0x82>
   1f48a:	028b      	lsls	r3, r1, #10
   1f48c:	1ac0      	subs	r0, r0, r3
   1f48e:	4152      	adcs	r2, r2
   1f490:	0a43      	lsrs	r3, r0, #9
   1f492:	428b      	cmp	r3, r1
   1f494:	d301      	bcc.n	1f49a <__udivsi3+0x8e>
   1f496:	024b      	lsls	r3, r1, #9
   1f498:	1ac0      	subs	r0, r0, r3
   1f49a:	4152      	adcs	r2, r2
   1f49c:	0a03      	lsrs	r3, r0, #8
   1f49e:	428b      	cmp	r3, r1
   1f4a0:	d301      	bcc.n	1f4a6 <__udivsi3+0x9a>
   1f4a2:	020b      	lsls	r3, r1, #8
   1f4a4:	1ac0      	subs	r0, r0, r3
   1f4a6:	4152      	adcs	r2, r2
   1f4a8:	d2cd      	bcs.n	1f446 <__udivsi3+0x3a>
   1f4aa:	09c3      	lsrs	r3, r0, #7
   1f4ac:	428b      	cmp	r3, r1
   1f4ae:	d301      	bcc.n	1f4b4 <__udivsi3+0xa8>
   1f4b0:	01cb      	lsls	r3, r1, #7
   1f4b2:	1ac0      	subs	r0, r0, r3
   1f4b4:	4152      	adcs	r2, r2
   1f4b6:	0983      	lsrs	r3, r0, #6
   1f4b8:	428b      	cmp	r3, r1
   1f4ba:	d301      	bcc.n	1f4c0 <__udivsi3+0xb4>
   1f4bc:	018b      	lsls	r3, r1, #6
   1f4be:	1ac0      	subs	r0, r0, r3
   1f4c0:	4152      	adcs	r2, r2
   1f4c2:	0943      	lsrs	r3, r0, #5
   1f4c4:	428b      	cmp	r3, r1
   1f4c6:	d301      	bcc.n	1f4cc <__udivsi3+0xc0>
   1f4c8:	014b      	lsls	r3, r1, #5
   1f4ca:	1ac0      	subs	r0, r0, r3
   1f4cc:	4152      	adcs	r2, r2
   1f4ce:	0903      	lsrs	r3, r0, #4
   1f4d0:	428b      	cmp	r3, r1
   1f4d2:	d301      	bcc.n	1f4d8 <__udivsi3+0xcc>
   1f4d4:	010b      	lsls	r3, r1, #4
   1f4d6:	1ac0      	subs	r0, r0, r3
   1f4d8:	4152      	adcs	r2, r2
   1f4da:	08c3      	lsrs	r3, r0, #3
   1f4dc:	428b      	cmp	r3, r1
   1f4de:	d301      	bcc.n	1f4e4 <__udivsi3+0xd8>
   1f4e0:	00cb      	lsls	r3, r1, #3
   1f4e2:	1ac0      	subs	r0, r0, r3
   1f4e4:	4152      	adcs	r2, r2
   1f4e6:	0883      	lsrs	r3, r0, #2
   1f4e8:	428b      	cmp	r3, r1
   1f4ea:	d301      	bcc.n	1f4f0 <__udivsi3+0xe4>
   1f4ec:	008b      	lsls	r3, r1, #2
   1f4ee:	1ac0      	subs	r0, r0, r3
   1f4f0:	4152      	adcs	r2, r2
   1f4f2:	0843      	lsrs	r3, r0, #1
   1f4f4:	428b      	cmp	r3, r1
   1f4f6:	d301      	bcc.n	1f4fc <__udivsi3+0xf0>
   1f4f8:	004b      	lsls	r3, r1, #1
   1f4fa:	1ac0      	subs	r0, r0, r3
   1f4fc:	4152      	adcs	r2, r2
   1f4fe:	1a41      	subs	r1, r0, r1
   1f500:	d200      	bcs.n	1f504 <__udivsi3+0xf8>
   1f502:	4601      	mov	r1, r0
   1f504:	4152      	adcs	r2, r2
   1f506:	4610      	mov	r0, r2
   1f508:	4770      	bx	lr
   1f50a:	e7ff      	b.n	1f50c <__udivsi3+0x100>
   1f50c:	b501      	push	{r0, lr}
   1f50e:	2000      	movs	r0, #0
   1f510:	f000 f8f0 	bl	1f6f4 <__aeabi_idiv0>
   1f514:	bd02      	pop	{r1, pc}
   1f516:	46c0      	nop			; (mov r8, r8)

0001f518 <__aeabi_uidivmod>:
   1f518:	2900      	cmp	r1, #0
   1f51a:	d0f7      	beq.n	1f50c <__udivsi3+0x100>
   1f51c:	e776      	b.n	1f40c <__udivsi3>
   1f51e:	4770      	bx	lr

0001f520 <__divsi3>:
   1f520:	4603      	mov	r3, r0
   1f522:	430b      	orrs	r3, r1
   1f524:	d47f      	bmi.n	1f626 <__divsi3+0x106>
   1f526:	2200      	movs	r2, #0
   1f528:	0843      	lsrs	r3, r0, #1
   1f52a:	428b      	cmp	r3, r1
   1f52c:	d374      	bcc.n	1f618 <__divsi3+0xf8>
   1f52e:	0903      	lsrs	r3, r0, #4
   1f530:	428b      	cmp	r3, r1
   1f532:	d35f      	bcc.n	1f5f4 <__divsi3+0xd4>
   1f534:	0a03      	lsrs	r3, r0, #8
   1f536:	428b      	cmp	r3, r1
   1f538:	d344      	bcc.n	1f5c4 <__divsi3+0xa4>
   1f53a:	0b03      	lsrs	r3, r0, #12
   1f53c:	428b      	cmp	r3, r1
   1f53e:	d328      	bcc.n	1f592 <__divsi3+0x72>
   1f540:	0c03      	lsrs	r3, r0, #16
   1f542:	428b      	cmp	r3, r1
   1f544:	d30d      	bcc.n	1f562 <__divsi3+0x42>
   1f546:	22ff      	movs	r2, #255	; 0xff
   1f548:	0209      	lsls	r1, r1, #8
   1f54a:	ba12      	rev	r2, r2
   1f54c:	0c03      	lsrs	r3, r0, #16
   1f54e:	428b      	cmp	r3, r1
   1f550:	d302      	bcc.n	1f558 <__divsi3+0x38>
   1f552:	1212      	asrs	r2, r2, #8
   1f554:	0209      	lsls	r1, r1, #8
   1f556:	d065      	beq.n	1f624 <__divsi3+0x104>
   1f558:	0b03      	lsrs	r3, r0, #12
   1f55a:	428b      	cmp	r3, r1
   1f55c:	d319      	bcc.n	1f592 <__divsi3+0x72>
   1f55e:	e000      	b.n	1f562 <__divsi3+0x42>
   1f560:	0a09      	lsrs	r1, r1, #8
   1f562:	0bc3      	lsrs	r3, r0, #15
   1f564:	428b      	cmp	r3, r1
   1f566:	d301      	bcc.n	1f56c <__divsi3+0x4c>
   1f568:	03cb      	lsls	r3, r1, #15
   1f56a:	1ac0      	subs	r0, r0, r3
   1f56c:	4152      	adcs	r2, r2
   1f56e:	0b83      	lsrs	r3, r0, #14
   1f570:	428b      	cmp	r3, r1
   1f572:	d301      	bcc.n	1f578 <__divsi3+0x58>
   1f574:	038b      	lsls	r3, r1, #14
   1f576:	1ac0      	subs	r0, r0, r3
   1f578:	4152      	adcs	r2, r2
   1f57a:	0b43      	lsrs	r3, r0, #13
   1f57c:	428b      	cmp	r3, r1
   1f57e:	d301      	bcc.n	1f584 <__divsi3+0x64>
   1f580:	034b      	lsls	r3, r1, #13
   1f582:	1ac0      	subs	r0, r0, r3
   1f584:	4152      	adcs	r2, r2
   1f586:	0b03      	lsrs	r3, r0, #12
   1f588:	428b      	cmp	r3, r1
   1f58a:	d301      	bcc.n	1f590 <__divsi3+0x70>
   1f58c:	030b      	lsls	r3, r1, #12
   1f58e:	1ac0      	subs	r0, r0, r3
   1f590:	4152      	adcs	r2, r2
   1f592:	0ac3      	lsrs	r3, r0, #11
   1f594:	428b      	cmp	r3, r1
   1f596:	d301      	bcc.n	1f59c <__divsi3+0x7c>
   1f598:	02cb      	lsls	r3, r1, #11
   1f59a:	1ac0      	subs	r0, r0, r3
   1f59c:	4152      	adcs	r2, r2
   1f59e:	0a83      	lsrs	r3, r0, #10
   1f5a0:	428b      	cmp	r3, r1
   1f5a2:	d301      	bcc.n	1f5a8 <__divsi3+0x88>
   1f5a4:	028b      	lsls	r3, r1, #10
   1f5a6:	1ac0      	subs	r0, r0, r3
   1f5a8:	4152      	adcs	r2, r2
   1f5aa:	0a43      	lsrs	r3, r0, #9
   1f5ac:	428b      	cmp	r3, r1
   1f5ae:	d301      	bcc.n	1f5b4 <__divsi3+0x94>
   1f5b0:	024b      	lsls	r3, r1, #9
   1f5b2:	1ac0      	subs	r0, r0, r3
   1f5b4:	4152      	adcs	r2, r2
   1f5b6:	0a03      	lsrs	r3, r0, #8
   1f5b8:	428b      	cmp	r3, r1
   1f5ba:	d301      	bcc.n	1f5c0 <__divsi3+0xa0>
   1f5bc:	020b      	lsls	r3, r1, #8
   1f5be:	1ac0      	subs	r0, r0, r3
   1f5c0:	4152      	adcs	r2, r2
   1f5c2:	d2cd      	bcs.n	1f560 <__divsi3+0x40>
   1f5c4:	09c3      	lsrs	r3, r0, #7
   1f5c6:	428b      	cmp	r3, r1
   1f5c8:	d301      	bcc.n	1f5ce <__divsi3+0xae>
   1f5ca:	01cb      	lsls	r3, r1, #7
   1f5cc:	1ac0      	subs	r0, r0, r3
   1f5ce:	4152      	adcs	r2, r2
   1f5d0:	0983      	lsrs	r3, r0, #6
   1f5d2:	428b      	cmp	r3, r1
   1f5d4:	d301      	bcc.n	1f5da <__divsi3+0xba>
   1f5d6:	018b      	lsls	r3, r1, #6
   1f5d8:	1ac0      	subs	r0, r0, r3
   1f5da:	4152      	adcs	r2, r2
   1f5dc:	0943      	lsrs	r3, r0, #5
   1f5de:	428b      	cmp	r3, r1
   1f5e0:	d301      	bcc.n	1f5e6 <__divsi3+0xc6>
   1f5e2:	014b      	lsls	r3, r1, #5
   1f5e4:	1ac0      	subs	r0, r0, r3
   1f5e6:	4152      	adcs	r2, r2
   1f5e8:	0903      	lsrs	r3, r0, #4
   1f5ea:	428b      	cmp	r3, r1
   1f5ec:	d301      	bcc.n	1f5f2 <__divsi3+0xd2>
   1f5ee:	010b      	lsls	r3, r1, #4
   1f5f0:	1ac0      	subs	r0, r0, r3
   1f5f2:	4152      	adcs	r2, r2
   1f5f4:	08c3      	lsrs	r3, r0, #3
   1f5f6:	428b      	cmp	r3, r1
   1f5f8:	d301      	bcc.n	1f5fe <__divsi3+0xde>
   1f5fa:	00cb      	lsls	r3, r1, #3
   1f5fc:	1ac0      	subs	r0, r0, r3
   1f5fe:	4152      	adcs	r2, r2
   1f600:	0883      	lsrs	r3, r0, #2
   1f602:	428b      	cmp	r3, r1
   1f604:	d301      	bcc.n	1f60a <__divsi3+0xea>
   1f606:	008b      	lsls	r3, r1, #2
   1f608:	1ac0      	subs	r0, r0, r3
   1f60a:	4152      	adcs	r2, r2
   1f60c:	0843      	lsrs	r3, r0, #1
   1f60e:	428b      	cmp	r3, r1
   1f610:	d301      	bcc.n	1f616 <__divsi3+0xf6>
   1f612:	004b      	lsls	r3, r1, #1
   1f614:	1ac0      	subs	r0, r0, r3
   1f616:	4152      	adcs	r2, r2
   1f618:	1a41      	subs	r1, r0, r1
   1f61a:	d200      	bcs.n	1f61e <__divsi3+0xfe>
   1f61c:	4601      	mov	r1, r0
   1f61e:	4152      	adcs	r2, r2
   1f620:	4610      	mov	r0, r2
   1f622:	4770      	bx	lr
   1f624:	e05d      	b.n	1f6e2 <__divsi3+0x1c2>
   1f626:	0fca      	lsrs	r2, r1, #31
   1f628:	d000      	beq.n	1f62c <__divsi3+0x10c>
   1f62a:	4249      	negs	r1, r1
   1f62c:	1003      	asrs	r3, r0, #32
   1f62e:	d300      	bcc.n	1f632 <__divsi3+0x112>
   1f630:	4240      	negs	r0, r0
   1f632:	4053      	eors	r3, r2
   1f634:	2200      	movs	r2, #0
   1f636:	469c      	mov	ip, r3
   1f638:	0903      	lsrs	r3, r0, #4
   1f63a:	428b      	cmp	r3, r1
   1f63c:	d32d      	bcc.n	1f69a <__divsi3+0x17a>
   1f63e:	0a03      	lsrs	r3, r0, #8
   1f640:	428b      	cmp	r3, r1
   1f642:	d312      	bcc.n	1f66a <__divsi3+0x14a>
   1f644:	22fc      	movs	r2, #252	; 0xfc
   1f646:	0189      	lsls	r1, r1, #6
   1f648:	ba12      	rev	r2, r2
   1f64a:	0a03      	lsrs	r3, r0, #8
   1f64c:	428b      	cmp	r3, r1
   1f64e:	d30c      	bcc.n	1f66a <__divsi3+0x14a>
   1f650:	0189      	lsls	r1, r1, #6
   1f652:	1192      	asrs	r2, r2, #6
   1f654:	428b      	cmp	r3, r1
   1f656:	d308      	bcc.n	1f66a <__divsi3+0x14a>
   1f658:	0189      	lsls	r1, r1, #6
   1f65a:	1192      	asrs	r2, r2, #6
   1f65c:	428b      	cmp	r3, r1
   1f65e:	d304      	bcc.n	1f66a <__divsi3+0x14a>
   1f660:	0189      	lsls	r1, r1, #6
   1f662:	d03a      	beq.n	1f6da <__divsi3+0x1ba>
   1f664:	1192      	asrs	r2, r2, #6
   1f666:	e000      	b.n	1f66a <__divsi3+0x14a>
   1f668:	0989      	lsrs	r1, r1, #6
   1f66a:	09c3      	lsrs	r3, r0, #7
   1f66c:	428b      	cmp	r3, r1
   1f66e:	d301      	bcc.n	1f674 <__divsi3+0x154>
   1f670:	01cb      	lsls	r3, r1, #7
   1f672:	1ac0      	subs	r0, r0, r3
   1f674:	4152      	adcs	r2, r2
   1f676:	0983      	lsrs	r3, r0, #6
   1f678:	428b      	cmp	r3, r1
   1f67a:	d301      	bcc.n	1f680 <__divsi3+0x160>
   1f67c:	018b      	lsls	r3, r1, #6
   1f67e:	1ac0      	subs	r0, r0, r3
   1f680:	4152      	adcs	r2, r2
   1f682:	0943      	lsrs	r3, r0, #5
   1f684:	428b      	cmp	r3, r1
   1f686:	d301      	bcc.n	1f68c <__divsi3+0x16c>
   1f688:	014b      	lsls	r3, r1, #5
   1f68a:	1ac0      	subs	r0, r0, r3
   1f68c:	4152      	adcs	r2, r2
   1f68e:	0903      	lsrs	r3, r0, #4
   1f690:	428b      	cmp	r3, r1
   1f692:	d301      	bcc.n	1f698 <__divsi3+0x178>
   1f694:	010b      	lsls	r3, r1, #4
   1f696:	1ac0      	subs	r0, r0, r3
   1f698:	4152      	adcs	r2, r2
   1f69a:	08c3      	lsrs	r3, r0, #3
   1f69c:	428b      	cmp	r3, r1
   1f69e:	d301      	bcc.n	1f6a4 <__divsi3+0x184>
   1f6a0:	00cb      	lsls	r3, r1, #3
   1f6a2:	1ac0      	subs	r0, r0, r3
   1f6a4:	4152      	adcs	r2, r2
   1f6a6:	0883      	lsrs	r3, r0, #2
   1f6a8:	428b      	cmp	r3, r1
   1f6aa:	d301      	bcc.n	1f6b0 <__divsi3+0x190>
   1f6ac:	008b      	lsls	r3, r1, #2
   1f6ae:	1ac0      	subs	r0, r0, r3
   1f6b0:	4152      	adcs	r2, r2
   1f6b2:	d2d9      	bcs.n	1f668 <__divsi3+0x148>
   1f6b4:	0843      	lsrs	r3, r0, #1
   1f6b6:	428b      	cmp	r3, r1
   1f6b8:	d301      	bcc.n	1f6be <__divsi3+0x19e>
   1f6ba:	004b      	lsls	r3, r1, #1
   1f6bc:	1ac0      	subs	r0, r0, r3
   1f6be:	4152      	adcs	r2, r2
   1f6c0:	1a41      	subs	r1, r0, r1
   1f6c2:	d200      	bcs.n	1f6c6 <__divsi3+0x1a6>
   1f6c4:	4601      	mov	r1, r0
   1f6c6:	4663      	mov	r3, ip
   1f6c8:	4152      	adcs	r2, r2
   1f6ca:	105b      	asrs	r3, r3, #1
   1f6cc:	4610      	mov	r0, r2
   1f6ce:	d301      	bcc.n	1f6d4 <__divsi3+0x1b4>
   1f6d0:	4240      	negs	r0, r0
   1f6d2:	2b00      	cmp	r3, #0
   1f6d4:	d500      	bpl.n	1f6d8 <__divsi3+0x1b8>
   1f6d6:	4249      	negs	r1, r1
   1f6d8:	4770      	bx	lr
   1f6da:	4663      	mov	r3, ip
   1f6dc:	105b      	asrs	r3, r3, #1
   1f6de:	d300      	bcc.n	1f6e2 <__divsi3+0x1c2>
   1f6e0:	4240      	negs	r0, r0
   1f6e2:	b501      	push	{r0, lr}
   1f6e4:	2000      	movs	r0, #0
   1f6e6:	f000 f805 	bl	1f6f4 <__aeabi_idiv0>
   1f6ea:	bd02      	pop	{r1, pc}

0001f6ec <__aeabi_idivmod>:
   1f6ec:	2900      	cmp	r1, #0
   1f6ee:	d0f8      	beq.n	1f6e2 <__divsi3+0x1c2>
   1f6f0:	e716      	b.n	1f520 <__divsi3>
   1f6f2:	4770      	bx	lr

0001f6f4 <__aeabi_idiv0>:
   1f6f4:	4770      	bx	lr
   1f6f6:	46c0      	nop			; (mov r8, r8)

0001f6f8 <__aeabi_lmul>:
   1f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6fa:	46ce      	mov	lr, r9
   1f6fc:	4647      	mov	r7, r8
   1f6fe:	0415      	lsls	r5, r2, #16
   1f700:	0c2d      	lsrs	r5, r5, #16
   1f702:	002e      	movs	r6, r5
   1f704:	b580      	push	{r7, lr}
   1f706:	0407      	lsls	r7, r0, #16
   1f708:	0c14      	lsrs	r4, r2, #16
   1f70a:	0c3f      	lsrs	r7, r7, #16
   1f70c:	4699      	mov	r9, r3
   1f70e:	0c03      	lsrs	r3, r0, #16
   1f710:	437e      	muls	r6, r7
   1f712:	435d      	muls	r5, r3
   1f714:	4367      	muls	r7, r4
   1f716:	4363      	muls	r3, r4
   1f718:	197f      	adds	r7, r7, r5
   1f71a:	0c34      	lsrs	r4, r6, #16
   1f71c:	19e4      	adds	r4, r4, r7
   1f71e:	469c      	mov	ip, r3
   1f720:	42a5      	cmp	r5, r4
   1f722:	d903      	bls.n	1f72c <__aeabi_lmul+0x34>
   1f724:	2380      	movs	r3, #128	; 0x80
   1f726:	025b      	lsls	r3, r3, #9
   1f728:	4698      	mov	r8, r3
   1f72a:	44c4      	add	ip, r8
   1f72c:	464b      	mov	r3, r9
   1f72e:	4351      	muls	r1, r2
   1f730:	4343      	muls	r3, r0
   1f732:	0436      	lsls	r6, r6, #16
   1f734:	0c36      	lsrs	r6, r6, #16
   1f736:	0c25      	lsrs	r5, r4, #16
   1f738:	0424      	lsls	r4, r4, #16
   1f73a:	4465      	add	r5, ip
   1f73c:	19a4      	adds	r4, r4, r6
   1f73e:	1859      	adds	r1, r3, r1
   1f740:	1949      	adds	r1, r1, r5
   1f742:	0020      	movs	r0, r4
   1f744:	bc0c      	pop	{r2, r3}
   1f746:	4690      	mov	r8, r2
   1f748:	4699      	mov	r9, r3
   1f74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f74c <__aeabi_f2uiz>:
   1f74c:	219e      	movs	r1, #158	; 0x9e
   1f74e:	b510      	push	{r4, lr}
   1f750:	05c9      	lsls	r1, r1, #23
   1f752:	1c04      	adds	r4, r0, #0
   1f754:	f002 fa8e 	bl	21c74 <__aeabi_fcmpge>
   1f758:	2800      	cmp	r0, #0
   1f75a:	d103      	bne.n	1f764 <__aeabi_f2uiz+0x18>
   1f75c:	1c20      	adds	r0, r4, #0
   1f75e:	f000 fda3 	bl	202a8 <__aeabi_f2iz>
   1f762:	bd10      	pop	{r4, pc}
   1f764:	219e      	movs	r1, #158	; 0x9e
   1f766:	1c20      	adds	r0, r4, #0
   1f768:	05c9      	lsls	r1, r1, #23
   1f76a:	f000 fc01 	bl	1ff70 <__aeabi_fsub>
   1f76e:	f000 fd9b 	bl	202a8 <__aeabi_f2iz>
   1f772:	2380      	movs	r3, #128	; 0x80
   1f774:	061b      	lsls	r3, r3, #24
   1f776:	469c      	mov	ip, r3
   1f778:	4460      	add	r0, ip
   1f77a:	e7f2      	b.n	1f762 <__aeabi_f2uiz+0x16>

0001f77c <__aeabi_fadd>:
   1f77c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f77e:	46c6      	mov	lr, r8
   1f780:	024e      	lsls	r6, r1, #9
   1f782:	0247      	lsls	r7, r0, #9
   1f784:	0a76      	lsrs	r6, r6, #9
   1f786:	0a7b      	lsrs	r3, r7, #9
   1f788:	0044      	lsls	r4, r0, #1
   1f78a:	0fc5      	lsrs	r5, r0, #31
   1f78c:	00f7      	lsls	r7, r6, #3
   1f78e:	0048      	lsls	r0, r1, #1
   1f790:	4698      	mov	r8, r3
   1f792:	b500      	push	{lr}
   1f794:	0e24      	lsrs	r4, r4, #24
   1f796:	002a      	movs	r2, r5
   1f798:	00db      	lsls	r3, r3, #3
   1f79a:	0e00      	lsrs	r0, r0, #24
   1f79c:	0fc9      	lsrs	r1, r1, #31
   1f79e:	46bc      	mov	ip, r7
   1f7a0:	428d      	cmp	r5, r1
   1f7a2:	d067      	beq.n	1f874 <__aeabi_fadd+0xf8>
   1f7a4:	1a22      	subs	r2, r4, r0
   1f7a6:	2a00      	cmp	r2, #0
   1f7a8:	dc00      	bgt.n	1f7ac <__aeabi_fadd+0x30>
   1f7aa:	e0a5      	b.n	1f8f8 <__aeabi_fadd+0x17c>
   1f7ac:	2800      	cmp	r0, #0
   1f7ae:	d13a      	bne.n	1f826 <__aeabi_fadd+0xaa>
   1f7b0:	2f00      	cmp	r7, #0
   1f7b2:	d100      	bne.n	1f7b6 <__aeabi_fadd+0x3a>
   1f7b4:	e093      	b.n	1f8de <__aeabi_fadd+0x162>
   1f7b6:	1e51      	subs	r1, r2, #1
   1f7b8:	2900      	cmp	r1, #0
   1f7ba:	d000      	beq.n	1f7be <__aeabi_fadd+0x42>
   1f7bc:	e0bc      	b.n	1f938 <__aeabi_fadd+0x1bc>
   1f7be:	2401      	movs	r4, #1
   1f7c0:	1bdb      	subs	r3, r3, r7
   1f7c2:	015a      	lsls	r2, r3, #5
   1f7c4:	d546      	bpl.n	1f854 <__aeabi_fadd+0xd8>
   1f7c6:	019b      	lsls	r3, r3, #6
   1f7c8:	099e      	lsrs	r6, r3, #6
   1f7ca:	0030      	movs	r0, r6
   1f7cc:	f002 fa5c 	bl	21c88 <__clzsi2>
   1f7d0:	3805      	subs	r0, #5
   1f7d2:	4086      	lsls	r6, r0
   1f7d4:	4284      	cmp	r4, r0
   1f7d6:	dd00      	ble.n	1f7da <__aeabi_fadd+0x5e>
   1f7d8:	e09d      	b.n	1f916 <__aeabi_fadd+0x19a>
   1f7da:	1b04      	subs	r4, r0, r4
   1f7dc:	0032      	movs	r2, r6
   1f7de:	2020      	movs	r0, #32
   1f7e0:	3401      	adds	r4, #1
   1f7e2:	40e2      	lsrs	r2, r4
   1f7e4:	1b04      	subs	r4, r0, r4
   1f7e6:	40a6      	lsls	r6, r4
   1f7e8:	0033      	movs	r3, r6
   1f7ea:	1e5e      	subs	r6, r3, #1
   1f7ec:	41b3      	sbcs	r3, r6
   1f7ee:	2400      	movs	r4, #0
   1f7f0:	4313      	orrs	r3, r2
   1f7f2:	075a      	lsls	r2, r3, #29
   1f7f4:	d004      	beq.n	1f800 <__aeabi_fadd+0x84>
   1f7f6:	220f      	movs	r2, #15
   1f7f8:	401a      	ands	r2, r3
   1f7fa:	2a04      	cmp	r2, #4
   1f7fc:	d000      	beq.n	1f800 <__aeabi_fadd+0x84>
   1f7fe:	3304      	adds	r3, #4
   1f800:	015a      	lsls	r2, r3, #5
   1f802:	d529      	bpl.n	1f858 <__aeabi_fadd+0xdc>
   1f804:	3401      	adds	r4, #1
   1f806:	2cff      	cmp	r4, #255	; 0xff
   1f808:	d100      	bne.n	1f80c <__aeabi_fadd+0x90>
   1f80a:	e081      	b.n	1f910 <__aeabi_fadd+0x194>
   1f80c:	002a      	movs	r2, r5
   1f80e:	019b      	lsls	r3, r3, #6
   1f810:	0a5b      	lsrs	r3, r3, #9
   1f812:	b2e4      	uxtb	r4, r4
   1f814:	025b      	lsls	r3, r3, #9
   1f816:	05e4      	lsls	r4, r4, #23
   1f818:	0a58      	lsrs	r0, r3, #9
   1f81a:	07d2      	lsls	r2, r2, #31
   1f81c:	4320      	orrs	r0, r4
   1f81e:	4310      	orrs	r0, r2
   1f820:	bc04      	pop	{r2}
   1f822:	4690      	mov	r8, r2
   1f824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f826:	2cff      	cmp	r4, #255	; 0xff
   1f828:	d0e3      	beq.n	1f7f2 <__aeabi_fadd+0x76>
   1f82a:	2180      	movs	r1, #128	; 0x80
   1f82c:	0038      	movs	r0, r7
   1f82e:	04c9      	lsls	r1, r1, #19
   1f830:	4308      	orrs	r0, r1
   1f832:	4684      	mov	ip, r0
   1f834:	2a1b      	cmp	r2, #27
   1f836:	dd00      	ble.n	1f83a <__aeabi_fadd+0xbe>
   1f838:	e082      	b.n	1f940 <__aeabi_fadd+0x1c4>
   1f83a:	2020      	movs	r0, #32
   1f83c:	4661      	mov	r1, ip
   1f83e:	40d1      	lsrs	r1, r2
   1f840:	1a82      	subs	r2, r0, r2
   1f842:	4660      	mov	r0, ip
   1f844:	4090      	lsls	r0, r2
   1f846:	0002      	movs	r2, r0
   1f848:	1e50      	subs	r0, r2, #1
   1f84a:	4182      	sbcs	r2, r0
   1f84c:	430a      	orrs	r2, r1
   1f84e:	1a9b      	subs	r3, r3, r2
   1f850:	015a      	lsls	r2, r3, #5
   1f852:	d4b8      	bmi.n	1f7c6 <__aeabi_fadd+0x4a>
   1f854:	075a      	lsls	r2, r3, #29
   1f856:	d1ce      	bne.n	1f7f6 <__aeabi_fadd+0x7a>
   1f858:	08de      	lsrs	r6, r3, #3
   1f85a:	002a      	movs	r2, r5
   1f85c:	2cff      	cmp	r4, #255	; 0xff
   1f85e:	d13a      	bne.n	1f8d6 <__aeabi_fadd+0x15a>
   1f860:	2e00      	cmp	r6, #0
   1f862:	d100      	bne.n	1f866 <__aeabi_fadd+0xea>
   1f864:	e0ae      	b.n	1f9c4 <__aeabi_fadd+0x248>
   1f866:	2380      	movs	r3, #128	; 0x80
   1f868:	03db      	lsls	r3, r3, #15
   1f86a:	4333      	orrs	r3, r6
   1f86c:	025b      	lsls	r3, r3, #9
   1f86e:	0a5b      	lsrs	r3, r3, #9
   1f870:	24ff      	movs	r4, #255	; 0xff
   1f872:	e7cf      	b.n	1f814 <__aeabi_fadd+0x98>
   1f874:	1a21      	subs	r1, r4, r0
   1f876:	2900      	cmp	r1, #0
   1f878:	dd52      	ble.n	1f920 <__aeabi_fadd+0x1a4>
   1f87a:	2800      	cmp	r0, #0
   1f87c:	d031      	beq.n	1f8e2 <__aeabi_fadd+0x166>
   1f87e:	2cff      	cmp	r4, #255	; 0xff
   1f880:	d0b7      	beq.n	1f7f2 <__aeabi_fadd+0x76>
   1f882:	2080      	movs	r0, #128	; 0x80
   1f884:	003e      	movs	r6, r7
   1f886:	04c0      	lsls	r0, r0, #19
   1f888:	4306      	orrs	r6, r0
   1f88a:	46b4      	mov	ip, r6
   1f88c:	291b      	cmp	r1, #27
   1f88e:	dd00      	ble.n	1f892 <__aeabi_fadd+0x116>
   1f890:	e0aa      	b.n	1f9e8 <__aeabi_fadd+0x26c>
   1f892:	2620      	movs	r6, #32
   1f894:	4660      	mov	r0, ip
   1f896:	40c8      	lsrs	r0, r1
   1f898:	1a71      	subs	r1, r6, r1
   1f89a:	4666      	mov	r6, ip
   1f89c:	408e      	lsls	r6, r1
   1f89e:	0031      	movs	r1, r6
   1f8a0:	1e4e      	subs	r6, r1, #1
   1f8a2:	41b1      	sbcs	r1, r6
   1f8a4:	4301      	orrs	r1, r0
   1f8a6:	185b      	adds	r3, r3, r1
   1f8a8:	0159      	lsls	r1, r3, #5
   1f8aa:	d5d3      	bpl.n	1f854 <__aeabi_fadd+0xd8>
   1f8ac:	3401      	adds	r4, #1
   1f8ae:	2cff      	cmp	r4, #255	; 0xff
   1f8b0:	d100      	bne.n	1f8b4 <__aeabi_fadd+0x138>
   1f8b2:	e087      	b.n	1f9c4 <__aeabi_fadd+0x248>
   1f8b4:	2201      	movs	r2, #1
   1f8b6:	4978      	ldr	r1, [pc, #480]	; (1fa98 <__aeabi_fadd+0x31c>)
   1f8b8:	401a      	ands	r2, r3
   1f8ba:	085b      	lsrs	r3, r3, #1
   1f8bc:	400b      	ands	r3, r1
   1f8be:	4313      	orrs	r3, r2
   1f8c0:	e797      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f8c2:	2c00      	cmp	r4, #0
   1f8c4:	d000      	beq.n	1f8c8 <__aeabi_fadd+0x14c>
   1f8c6:	e0a7      	b.n	1fa18 <__aeabi_fadd+0x29c>
   1f8c8:	2b00      	cmp	r3, #0
   1f8ca:	d000      	beq.n	1f8ce <__aeabi_fadd+0x152>
   1f8cc:	e0b6      	b.n	1fa3c <__aeabi_fadd+0x2c0>
   1f8ce:	1e3b      	subs	r3, r7, #0
   1f8d0:	d162      	bne.n	1f998 <__aeabi_fadd+0x21c>
   1f8d2:	2600      	movs	r6, #0
   1f8d4:	2200      	movs	r2, #0
   1f8d6:	0273      	lsls	r3, r6, #9
   1f8d8:	0a5b      	lsrs	r3, r3, #9
   1f8da:	b2e4      	uxtb	r4, r4
   1f8dc:	e79a      	b.n	1f814 <__aeabi_fadd+0x98>
   1f8de:	0014      	movs	r4, r2
   1f8e0:	e787      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f8e2:	2f00      	cmp	r7, #0
   1f8e4:	d04d      	beq.n	1f982 <__aeabi_fadd+0x206>
   1f8e6:	1e48      	subs	r0, r1, #1
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	d157      	bne.n	1f99c <__aeabi_fadd+0x220>
   1f8ec:	4463      	add	r3, ip
   1f8ee:	2401      	movs	r4, #1
   1f8f0:	015a      	lsls	r2, r3, #5
   1f8f2:	d5af      	bpl.n	1f854 <__aeabi_fadd+0xd8>
   1f8f4:	2402      	movs	r4, #2
   1f8f6:	e7dd      	b.n	1f8b4 <__aeabi_fadd+0x138>
   1f8f8:	2a00      	cmp	r2, #0
   1f8fa:	d124      	bne.n	1f946 <__aeabi_fadd+0x1ca>
   1f8fc:	1c62      	adds	r2, r4, #1
   1f8fe:	b2d2      	uxtb	r2, r2
   1f900:	2a01      	cmp	r2, #1
   1f902:	ddde      	ble.n	1f8c2 <__aeabi_fadd+0x146>
   1f904:	1bde      	subs	r6, r3, r7
   1f906:	0172      	lsls	r2, r6, #5
   1f908:	d535      	bpl.n	1f976 <__aeabi_fadd+0x1fa>
   1f90a:	1afe      	subs	r6, r7, r3
   1f90c:	000d      	movs	r5, r1
   1f90e:	e75c      	b.n	1f7ca <__aeabi_fadd+0x4e>
   1f910:	002a      	movs	r2, r5
   1f912:	2300      	movs	r3, #0
   1f914:	e77e      	b.n	1f814 <__aeabi_fadd+0x98>
   1f916:	0033      	movs	r3, r6
   1f918:	4a60      	ldr	r2, [pc, #384]	; (1fa9c <__aeabi_fadd+0x320>)
   1f91a:	1a24      	subs	r4, r4, r0
   1f91c:	4013      	ands	r3, r2
   1f91e:	e768      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f920:	2900      	cmp	r1, #0
   1f922:	d163      	bne.n	1f9ec <__aeabi_fadd+0x270>
   1f924:	1c61      	adds	r1, r4, #1
   1f926:	b2c8      	uxtb	r0, r1
   1f928:	2801      	cmp	r0, #1
   1f92a:	dd4e      	ble.n	1f9ca <__aeabi_fadd+0x24e>
   1f92c:	29ff      	cmp	r1, #255	; 0xff
   1f92e:	d049      	beq.n	1f9c4 <__aeabi_fadd+0x248>
   1f930:	4463      	add	r3, ip
   1f932:	085b      	lsrs	r3, r3, #1
   1f934:	000c      	movs	r4, r1
   1f936:	e75c      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f938:	2aff      	cmp	r2, #255	; 0xff
   1f93a:	d041      	beq.n	1f9c0 <__aeabi_fadd+0x244>
   1f93c:	000a      	movs	r2, r1
   1f93e:	e779      	b.n	1f834 <__aeabi_fadd+0xb8>
   1f940:	2201      	movs	r2, #1
   1f942:	1a9b      	subs	r3, r3, r2
   1f944:	e784      	b.n	1f850 <__aeabi_fadd+0xd4>
   1f946:	2c00      	cmp	r4, #0
   1f948:	d01d      	beq.n	1f986 <__aeabi_fadd+0x20a>
   1f94a:	28ff      	cmp	r0, #255	; 0xff
   1f94c:	d022      	beq.n	1f994 <__aeabi_fadd+0x218>
   1f94e:	2480      	movs	r4, #128	; 0x80
   1f950:	04e4      	lsls	r4, r4, #19
   1f952:	4252      	negs	r2, r2
   1f954:	4323      	orrs	r3, r4
   1f956:	2a1b      	cmp	r2, #27
   1f958:	dd00      	ble.n	1f95c <__aeabi_fadd+0x1e0>
   1f95a:	e08a      	b.n	1fa72 <__aeabi_fadd+0x2f6>
   1f95c:	001c      	movs	r4, r3
   1f95e:	2520      	movs	r5, #32
   1f960:	40d4      	lsrs	r4, r2
   1f962:	1aaa      	subs	r2, r5, r2
   1f964:	4093      	lsls	r3, r2
   1f966:	1e5a      	subs	r2, r3, #1
   1f968:	4193      	sbcs	r3, r2
   1f96a:	4323      	orrs	r3, r4
   1f96c:	4662      	mov	r2, ip
   1f96e:	0004      	movs	r4, r0
   1f970:	1ad3      	subs	r3, r2, r3
   1f972:	000d      	movs	r5, r1
   1f974:	e725      	b.n	1f7c2 <__aeabi_fadd+0x46>
   1f976:	2e00      	cmp	r6, #0
   1f978:	d000      	beq.n	1f97c <__aeabi_fadd+0x200>
   1f97a:	e726      	b.n	1f7ca <__aeabi_fadd+0x4e>
   1f97c:	2200      	movs	r2, #0
   1f97e:	2400      	movs	r4, #0
   1f980:	e7a9      	b.n	1f8d6 <__aeabi_fadd+0x15a>
   1f982:	000c      	movs	r4, r1
   1f984:	e735      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f986:	2b00      	cmp	r3, #0
   1f988:	d04d      	beq.n	1fa26 <__aeabi_fadd+0x2aa>
   1f98a:	43d2      	mvns	r2, r2
   1f98c:	2a00      	cmp	r2, #0
   1f98e:	d0ed      	beq.n	1f96c <__aeabi_fadd+0x1f0>
   1f990:	28ff      	cmp	r0, #255	; 0xff
   1f992:	d1e0      	bne.n	1f956 <__aeabi_fadd+0x1da>
   1f994:	4663      	mov	r3, ip
   1f996:	24ff      	movs	r4, #255	; 0xff
   1f998:	000d      	movs	r5, r1
   1f99a:	e72a      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f99c:	29ff      	cmp	r1, #255	; 0xff
   1f99e:	d00f      	beq.n	1f9c0 <__aeabi_fadd+0x244>
   1f9a0:	0001      	movs	r1, r0
   1f9a2:	e773      	b.n	1f88c <__aeabi_fadd+0x110>
   1f9a4:	2b00      	cmp	r3, #0
   1f9a6:	d061      	beq.n	1fa6c <__aeabi_fadd+0x2f0>
   1f9a8:	24ff      	movs	r4, #255	; 0xff
   1f9aa:	2f00      	cmp	r7, #0
   1f9ac:	d100      	bne.n	1f9b0 <__aeabi_fadd+0x234>
   1f9ae:	e720      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f9b0:	2280      	movs	r2, #128	; 0x80
   1f9b2:	4641      	mov	r1, r8
   1f9b4:	03d2      	lsls	r2, r2, #15
   1f9b6:	4211      	tst	r1, r2
   1f9b8:	d002      	beq.n	1f9c0 <__aeabi_fadd+0x244>
   1f9ba:	4216      	tst	r6, r2
   1f9bc:	d100      	bne.n	1f9c0 <__aeabi_fadd+0x244>
   1f9be:	003b      	movs	r3, r7
   1f9c0:	24ff      	movs	r4, #255	; 0xff
   1f9c2:	e716      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f9c4:	24ff      	movs	r4, #255	; 0xff
   1f9c6:	2300      	movs	r3, #0
   1f9c8:	e724      	b.n	1f814 <__aeabi_fadd+0x98>
   1f9ca:	2c00      	cmp	r4, #0
   1f9cc:	d1ea      	bne.n	1f9a4 <__aeabi_fadd+0x228>
   1f9ce:	2b00      	cmp	r3, #0
   1f9d0:	d058      	beq.n	1fa84 <__aeabi_fadd+0x308>
   1f9d2:	2f00      	cmp	r7, #0
   1f9d4:	d100      	bne.n	1f9d8 <__aeabi_fadd+0x25c>
   1f9d6:	e70c      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f9d8:	4463      	add	r3, ip
   1f9da:	015a      	lsls	r2, r3, #5
   1f9dc:	d400      	bmi.n	1f9e0 <__aeabi_fadd+0x264>
   1f9de:	e739      	b.n	1f854 <__aeabi_fadd+0xd8>
   1f9e0:	4a2e      	ldr	r2, [pc, #184]	; (1fa9c <__aeabi_fadd+0x320>)
   1f9e2:	000c      	movs	r4, r1
   1f9e4:	4013      	ands	r3, r2
   1f9e6:	e704      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1f9e8:	2101      	movs	r1, #1
   1f9ea:	e75c      	b.n	1f8a6 <__aeabi_fadd+0x12a>
   1f9ec:	2c00      	cmp	r4, #0
   1f9ee:	d11e      	bne.n	1fa2e <__aeabi_fadd+0x2b2>
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	d040      	beq.n	1fa76 <__aeabi_fadd+0x2fa>
   1f9f4:	43c9      	mvns	r1, r1
   1f9f6:	2900      	cmp	r1, #0
   1f9f8:	d00b      	beq.n	1fa12 <__aeabi_fadd+0x296>
   1f9fa:	28ff      	cmp	r0, #255	; 0xff
   1f9fc:	d036      	beq.n	1fa6c <__aeabi_fadd+0x2f0>
   1f9fe:	291b      	cmp	r1, #27
   1fa00:	dc47      	bgt.n	1fa92 <__aeabi_fadd+0x316>
   1fa02:	001c      	movs	r4, r3
   1fa04:	2620      	movs	r6, #32
   1fa06:	40cc      	lsrs	r4, r1
   1fa08:	1a71      	subs	r1, r6, r1
   1fa0a:	408b      	lsls	r3, r1
   1fa0c:	1e59      	subs	r1, r3, #1
   1fa0e:	418b      	sbcs	r3, r1
   1fa10:	4323      	orrs	r3, r4
   1fa12:	4463      	add	r3, ip
   1fa14:	0004      	movs	r4, r0
   1fa16:	e747      	b.n	1f8a8 <__aeabi_fadd+0x12c>
   1fa18:	2b00      	cmp	r3, #0
   1fa1a:	d118      	bne.n	1fa4e <__aeabi_fadd+0x2d2>
   1fa1c:	1e3b      	subs	r3, r7, #0
   1fa1e:	d02d      	beq.n	1fa7c <__aeabi_fadd+0x300>
   1fa20:	000d      	movs	r5, r1
   1fa22:	24ff      	movs	r4, #255	; 0xff
   1fa24:	e6e5      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa26:	003b      	movs	r3, r7
   1fa28:	0004      	movs	r4, r0
   1fa2a:	000d      	movs	r5, r1
   1fa2c:	e6e1      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa2e:	28ff      	cmp	r0, #255	; 0xff
   1fa30:	d01c      	beq.n	1fa6c <__aeabi_fadd+0x2f0>
   1fa32:	2480      	movs	r4, #128	; 0x80
   1fa34:	04e4      	lsls	r4, r4, #19
   1fa36:	4249      	negs	r1, r1
   1fa38:	4323      	orrs	r3, r4
   1fa3a:	e7e0      	b.n	1f9fe <__aeabi_fadd+0x282>
   1fa3c:	2f00      	cmp	r7, #0
   1fa3e:	d100      	bne.n	1fa42 <__aeabi_fadd+0x2c6>
   1fa40:	e6d7      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa42:	1bde      	subs	r6, r3, r7
   1fa44:	0172      	lsls	r2, r6, #5
   1fa46:	d51f      	bpl.n	1fa88 <__aeabi_fadd+0x30c>
   1fa48:	1afb      	subs	r3, r7, r3
   1fa4a:	000d      	movs	r5, r1
   1fa4c:	e6d1      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa4e:	24ff      	movs	r4, #255	; 0xff
   1fa50:	2f00      	cmp	r7, #0
   1fa52:	d100      	bne.n	1fa56 <__aeabi_fadd+0x2da>
   1fa54:	e6cd      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa56:	2280      	movs	r2, #128	; 0x80
   1fa58:	4640      	mov	r0, r8
   1fa5a:	03d2      	lsls	r2, r2, #15
   1fa5c:	4210      	tst	r0, r2
   1fa5e:	d0af      	beq.n	1f9c0 <__aeabi_fadd+0x244>
   1fa60:	4216      	tst	r6, r2
   1fa62:	d1ad      	bne.n	1f9c0 <__aeabi_fadd+0x244>
   1fa64:	003b      	movs	r3, r7
   1fa66:	000d      	movs	r5, r1
   1fa68:	24ff      	movs	r4, #255	; 0xff
   1fa6a:	e6c2      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa6c:	4663      	mov	r3, ip
   1fa6e:	24ff      	movs	r4, #255	; 0xff
   1fa70:	e6bf      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa72:	2301      	movs	r3, #1
   1fa74:	e77a      	b.n	1f96c <__aeabi_fadd+0x1f0>
   1fa76:	003b      	movs	r3, r7
   1fa78:	0004      	movs	r4, r0
   1fa7a:	e6ba      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa7c:	2680      	movs	r6, #128	; 0x80
   1fa7e:	2200      	movs	r2, #0
   1fa80:	03f6      	lsls	r6, r6, #15
   1fa82:	e6f0      	b.n	1f866 <__aeabi_fadd+0xea>
   1fa84:	003b      	movs	r3, r7
   1fa86:	e6b4      	b.n	1f7f2 <__aeabi_fadd+0x76>
   1fa88:	1e33      	subs	r3, r6, #0
   1fa8a:	d000      	beq.n	1fa8e <__aeabi_fadd+0x312>
   1fa8c:	e6e2      	b.n	1f854 <__aeabi_fadd+0xd8>
   1fa8e:	2200      	movs	r2, #0
   1fa90:	e721      	b.n	1f8d6 <__aeabi_fadd+0x15a>
   1fa92:	2301      	movs	r3, #1
   1fa94:	e7bd      	b.n	1fa12 <__aeabi_fadd+0x296>
   1fa96:	46c0      	nop			; (mov r8, r8)
   1fa98:	7dffffff 	.word	0x7dffffff
   1fa9c:	fbffffff 	.word	0xfbffffff

0001faa0 <__aeabi_fdiv>:
   1faa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1faa2:	4657      	mov	r7, sl
   1faa4:	464e      	mov	r6, r9
   1faa6:	46de      	mov	lr, fp
   1faa8:	4645      	mov	r5, r8
   1faaa:	b5e0      	push	{r5, r6, r7, lr}
   1faac:	0244      	lsls	r4, r0, #9
   1faae:	0043      	lsls	r3, r0, #1
   1fab0:	0fc6      	lsrs	r6, r0, #31
   1fab2:	b083      	sub	sp, #12
   1fab4:	1c0f      	adds	r7, r1, #0
   1fab6:	0a64      	lsrs	r4, r4, #9
   1fab8:	0e1b      	lsrs	r3, r3, #24
   1faba:	46b2      	mov	sl, r6
   1fabc:	d053      	beq.n	1fb66 <__aeabi_fdiv+0xc6>
   1fabe:	2bff      	cmp	r3, #255	; 0xff
   1fac0:	d027      	beq.n	1fb12 <__aeabi_fdiv+0x72>
   1fac2:	2280      	movs	r2, #128	; 0x80
   1fac4:	00e4      	lsls	r4, r4, #3
   1fac6:	04d2      	lsls	r2, r2, #19
   1fac8:	4314      	orrs	r4, r2
   1faca:	227f      	movs	r2, #127	; 0x7f
   1facc:	4252      	negs	r2, r2
   1face:	4690      	mov	r8, r2
   1fad0:	4498      	add	r8, r3
   1fad2:	2300      	movs	r3, #0
   1fad4:	4699      	mov	r9, r3
   1fad6:	469b      	mov	fp, r3
   1fad8:	027d      	lsls	r5, r7, #9
   1fada:	0078      	lsls	r0, r7, #1
   1fadc:	0ffb      	lsrs	r3, r7, #31
   1fade:	0a6d      	lsrs	r5, r5, #9
   1fae0:	0e00      	lsrs	r0, r0, #24
   1fae2:	9300      	str	r3, [sp, #0]
   1fae4:	d024      	beq.n	1fb30 <__aeabi_fdiv+0x90>
   1fae6:	28ff      	cmp	r0, #255	; 0xff
   1fae8:	d046      	beq.n	1fb78 <__aeabi_fdiv+0xd8>
   1faea:	2380      	movs	r3, #128	; 0x80
   1faec:	2100      	movs	r1, #0
   1faee:	00ed      	lsls	r5, r5, #3
   1faf0:	04db      	lsls	r3, r3, #19
   1faf2:	431d      	orrs	r5, r3
   1faf4:	387f      	subs	r0, #127	; 0x7f
   1faf6:	4647      	mov	r7, r8
   1faf8:	1a38      	subs	r0, r7, r0
   1fafa:	464f      	mov	r7, r9
   1fafc:	430f      	orrs	r7, r1
   1fafe:	00bf      	lsls	r7, r7, #2
   1fb00:	46b9      	mov	r9, r7
   1fb02:	0033      	movs	r3, r6
   1fb04:	9a00      	ldr	r2, [sp, #0]
   1fb06:	4f87      	ldr	r7, [pc, #540]	; (1fd24 <__aeabi_fdiv+0x284>)
   1fb08:	4053      	eors	r3, r2
   1fb0a:	464a      	mov	r2, r9
   1fb0c:	58ba      	ldr	r2, [r7, r2]
   1fb0e:	9301      	str	r3, [sp, #4]
   1fb10:	4697      	mov	pc, r2
   1fb12:	2c00      	cmp	r4, #0
   1fb14:	d14e      	bne.n	1fbb4 <__aeabi_fdiv+0x114>
   1fb16:	2308      	movs	r3, #8
   1fb18:	4699      	mov	r9, r3
   1fb1a:	33f7      	adds	r3, #247	; 0xf7
   1fb1c:	4698      	mov	r8, r3
   1fb1e:	3bfd      	subs	r3, #253	; 0xfd
   1fb20:	469b      	mov	fp, r3
   1fb22:	027d      	lsls	r5, r7, #9
   1fb24:	0078      	lsls	r0, r7, #1
   1fb26:	0ffb      	lsrs	r3, r7, #31
   1fb28:	0a6d      	lsrs	r5, r5, #9
   1fb2a:	0e00      	lsrs	r0, r0, #24
   1fb2c:	9300      	str	r3, [sp, #0]
   1fb2e:	d1da      	bne.n	1fae6 <__aeabi_fdiv+0x46>
   1fb30:	2d00      	cmp	r5, #0
   1fb32:	d126      	bne.n	1fb82 <__aeabi_fdiv+0xe2>
   1fb34:	2000      	movs	r0, #0
   1fb36:	2101      	movs	r1, #1
   1fb38:	0033      	movs	r3, r6
   1fb3a:	9a00      	ldr	r2, [sp, #0]
   1fb3c:	4f7a      	ldr	r7, [pc, #488]	; (1fd28 <__aeabi_fdiv+0x288>)
   1fb3e:	4053      	eors	r3, r2
   1fb40:	4642      	mov	r2, r8
   1fb42:	1a10      	subs	r0, r2, r0
   1fb44:	464a      	mov	r2, r9
   1fb46:	430a      	orrs	r2, r1
   1fb48:	0092      	lsls	r2, r2, #2
   1fb4a:	58ba      	ldr	r2, [r7, r2]
   1fb4c:	001d      	movs	r5, r3
   1fb4e:	4697      	mov	pc, r2
   1fb50:	9b00      	ldr	r3, [sp, #0]
   1fb52:	002c      	movs	r4, r5
   1fb54:	469a      	mov	sl, r3
   1fb56:	468b      	mov	fp, r1
   1fb58:	465b      	mov	r3, fp
   1fb5a:	2b02      	cmp	r3, #2
   1fb5c:	d131      	bne.n	1fbc2 <__aeabi_fdiv+0x122>
   1fb5e:	4653      	mov	r3, sl
   1fb60:	21ff      	movs	r1, #255	; 0xff
   1fb62:	2400      	movs	r4, #0
   1fb64:	e038      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fb66:	2c00      	cmp	r4, #0
   1fb68:	d117      	bne.n	1fb9a <__aeabi_fdiv+0xfa>
   1fb6a:	2304      	movs	r3, #4
   1fb6c:	4699      	mov	r9, r3
   1fb6e:	2300      	movs	r3, #0
   1fb70:	4698      	mov	r8, r3
   1fb72:	3301      	adds	r3, #1
   1fb74:	469b      	mov	fp, r3
   1fb76:	e7af      	b.n	1fad8 <__aeabi_fdiv+0x38>
   1fb78:	20ff      	movs	r0, #255	; 0xff
   1fb7a:	2d00      	cmp	r5, #0
   1fb7c:	d10b      	bne.n	1fb96 <__aeabi_fdiv+0xf6>
   1fb7e:	2102      	movs	r1, #2
   1fb80:	e7da      	b.n	1fb38 <__aeabi_fdiv+0x98>
   1fb82:	0028      	movs	r0, r5
   1fb84:	f002 f880 	bl	21c88 <__clzsi2>
   1fb88:	1f43      	subs	r3, r0, #5
   1fb8a:	409d      	lsls	r5, r3
   1fb8c:	2376      	movs	r3, #118	; 0x76
   1fb8e:	425b      	negs	r3, r3
   1fb90:	1a18      	subs	r0, r3, r0
   1fb92:	2100      	movs	r1, #0
   1fb94:	e7af      	b.n	1faf6 <__aeabi_fdiv+0x56>
   1fb96:	2103      	movs	r1, #3
   1fb98:	e7ad      	b.n	1faf6 <__aeabi_fdiv+0x56>
   1fb9a:	0020      	movs	r0, r4
   1fb9c:	f002 f874 	bl	21c88 <__clzsi2>
   1fba0:	1f43      	subs	r3, r0, #5
   1fba2:	409c      	lsls	r4, r3
   1fba4:	2376      	movs	r3, #118	; 0x76
   1fba6:	425b      	negs	r3, r3
   1fba8:	1a1b      	subs	r3, r3, r0
   1fbaa:	4698      	mov	r8, r3
   1fbac:	2300      	movs	r3, #0
   1fbae:	4699      	mov	r9, r3
   1fbb0:	469b      	mov	fp, r3
   1fbb2:	e791      	b.n	1fad8 <__aeabi_fdiv+0x38>
   1fbb4:	230c      	movs	r3, #12
   1fbb6:	4699      	mov	r9, r3
   1fbb8:	33f3      	adds	r3, #243	; 0xf3
   1fbba:	4698      	mov	r8, r3
   1fbbc:	3bfc      	subs	r3, #252	; 0xfc
   1fbbe:	469b      	mov	fp, r3
   1fbc0:	e78a      	b.n	1fad8 <__aeabi_fdiv+0x38>
   1fbc2:	2b03      	cmp	r3, #3
   1fbc4:	d100      	bne.n	1fbc8 <__aeabi_fdiv+0x128>
   1fbc6:	e0a5      	b.n	1fd14 <__aeabi_fdiv+0x274>
   1fbc8:	4655      	mov	r5, sl
   1fbca:	2b01      	cmp	r3, #1
   1fbcc:	d000      	beq.n	1fbd0 <__aeabi_fdiv+0x130>
   1fbce:	e081      	b.n	1fcd4 <__aeabi_fdiv+0x234>
   1fbd0:	2301      	movs	r3, #1
   1fbd2:	2100      	movs	r1, #0
   1fbd4:	2400      	movs	r4, #0
   1fbd6:	402b      	ands	r3, r5
   1fbd8:	0264      	lsls	r4, r4, #9
   1fbda:	05c9      	lsls	r1, r1, #23
   1fbdc:	0a60      	lsrs	r0, r4, #9
   1fbde:	07db      	lsls	r3, r3, #31
   1fbe0:	4308      	orrs	r0, r1
   1fbe2:	4318      	orrs	r0, r3
   1fbe4:	b003      	add	sp, #12
   1fbe6:	bc3c      	pop	{r2, r3, r4, r5}
   1fbe8:	4690      	mov	r8, r2
   1fbea:	4699      	mov	r9, r3
   1fbec:	46a2      	mov	sl, r4
   1fbee:	46ab      	mov	fp, r5
   1fbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fbf2:	2480      	movs	r4, #128	; 0x80
   1fbf4:	2300      	movs	r3, #0
   1fbf6:	03e4      	lsls	r4, r4, #15
   1fbf8:	21ff      	movs	r1, #255	; 0xff
   1fbfa:	e7ed      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fbfc:	21ff      	movs	r1, #255	; 0xff
   1fbfe:	2400      	movs	r4, #0
   1fc00:	e7ea      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fc02:	2301      	movs	r3, #1
   1fc04:	1a59      	subs	r1, r3, r1
   1fc06:	291b      	cmp	r1, #27
   1fc08:	dd66      	ble.n	1fcd8 <__aeabi_fdiv+0x238>
   1fc0a:	9a01      	ldr	r2, [sp, #4]
   1fc0c:	4013      	ands	r3, r2
   1fc0e:	2100      	movs	r1, #0
   1fc10:	2400      	movs	r4, #0
   1fc12:	e7e1      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fc14:	2380      	movs	r3, #128	; 0x80
   1fc16:	03db      	lsls	r3, r3, #15
   1fc18:	421c      	tst	r4, r3
   1fc1a:	d038      	beq.n	1fc8e <__aeabi_fdiv+0x1ee>
   1fc1c:	421d      	tst	r5, r3
   1fc1e:	d051      	beq.n	1fcc4 <__aeabi_fdiv+0x224>
   1fc20:	431c      	orrs	r4, r3
   1fc22:	0264      	lsls	r4, r4, #9
   1fc24:	0a64      	lsrs	r4, r4, #9
   1fc26:	0033      	movs	r3, r6
   1fc28:	21ff      	movs	r1, #255	; 0xff
   1fc2a:	e7d5      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fc2c:	0163      	lsls	r3, r4, #5
   1fc2e:	016c      	lsls	r4, r5, #5
   1fc30:	42a3      	cmp	r3, r4
   1fc32:	d23b      	bcs.n	1fcac <__aeabi_fdiv+0x20c>
   1fc34:	261b      	movs	r6, #27
   1fc36:	2100      	movs	r1, #0
   1fc38:	3801      	subs	r0, #1
   1fc3a:	2501      	movs	r5, #1
   1fc3c:	001f      	movs	r7, r3
   1fc3e:	0049      	lsls	r1, r1, #1
   1fc40:	005b      	lsls	r3, r3, #1
   1fc42:	2f00      	cmp	r7, #0
   1fc44:	db01      	blt.n	1fc4a <__aeabi_fdiv+0x1aa>
   1fc46:	429c      	cmp	r4, r3
   1fc48:	d801      	bhi.n	1fc4e <__aeabi_fdiv+0x1ae>
   1fc4a:	1b1b      	subs	r3, r3, r4
   1fc4c:	4329      	orrs	r1, r5
   1fc4e:	3e01      	subs	r6, #1
   1fc50:	2e00      	cmp	r6, #0
   1fc52:	d1f3      	bne.n	1fc3c <__aeabi_fdiv+0x19c>
   1fc54:	001c      	movs	r4, r3
   1fc56:	1e63      	subs	r3, r4, #1
   1fc58:	419c      	sbcs	r4, r3
   1fc5a:	430c      	orrs	r4, r1
   1fc5c:	0001      	movs	r1, r0
   1fc5e:	317f      	adds	r1, #127	; 0x7f
   1fc60:	2900      	cmp	r1, #0
   1fc62:	ddce      	ble.n	1fc02 <__aeabi_fdiv+0x162>
   1fc64:	0763      	lsls	r3, r4, #29
   1fc66:	d004      	beq.n	1fc72 <__aeabi_fdiv+0x1d2>
   1fc68:	230f      	movs	r3, #15
   1fc6a:	4023      	ands	r3, r4
   1fc6c:	2b04      	cmp	r3, #4
   1fc6e:	d000      	beq.n	1fc72 <__aeabi_fdiv+0x1d2>
   1fc70:	3404      	adds	r4, #4
   1fc72:	0123      	lsls	r3, r4, #4
   1fc74:	d503      	bpl.n	1fc7e <__aeabi_fdiv+0x1de>
   1fc76:	0001      	movs	r1, r0
   1fc78:	4b2c      	ldr	r3, [pc, #176]	; (1fd2c <__aeabi_fdiv+0x28c>)
   1fc7a:	3180      	adds	r1, #128	; 0x80
   1fc7c:	401c      	ands	r4, r3
   1fc7e:	29fe      	cmp	r1, #254	; 0xfe
   1fc80:	dd0d      	ble.n	1fc9e <__aeabi_fdiv+0x1fe>
   1fc82:	2301      	movs	r3, #1
   1fc84:	9a01      	ldr	r2, [sp, #4]
   1fc86:	21ff      	movs	r1, #255	; 0xff
   1fc88:	4013      	ands	r3, r2
   1fc8a:	2400      	movs	r4, #0
   1fc8c:	e7a4      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fc8e:	2380      	movs	r3, #128	; 0x80
   1fc90:	03db      	lsls	r3, r3, #15
   1fc92:	431c      	orrs	r4, r3
   1fc94:	0264      	lsls	r4, r4, #9
   1fc96:	0a64      	lsrs	r4, r4, #9
   1fc98:	0033      	movs	r3, r6
   1fc9a:	21ff      	movs	r1, #255	; 0xff
   1fc9c:	e79c      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fc9e:	2301      	movs	r3, #1
   1fca0:	9a01      	ldr	r2, [sp, #4]
   1fca2:	01a4      	lsls	r4, r4, #6
   1fca4:	0a64      	lsrs	r4, r4, #9
   1fca6:	b2c9      	uxtb	r1, r1
   1fca8:	4013      	ands	r3, r2
   1fcaa:	e795      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fcac:	1b1b      	subs	r3, r3, r4
   1fcae:	261a      	movs	r6, #26
   1fcb0:	2101      	movs	r1, #1
   1fcb2:	e7c2      	b.n	1fc3a <__aeabi_fdiv+0x19a>
   1fcb4:	9b00      	ldr	r3, [sp, #0]
   1fcb6:	468b      	mov	fp, r1
   1fcb8:	469a      	mov	sl, r3
   1fcba:	2400      	movs	r4, #0
   1fcbc:	e74c      	b.n	1fb58 <__aeabi_fdiv+0xb8>
   1fcbe:	0263      	lsls	r3, r4, #9
   1fcc0:	d5e5      	bpl.n	1fc8e <__aeabi_fdiv+0x1ee>
   1fcc2:	2500      	movs	r5, #0
   1fcc4:	2480      	movs	r4, #128	; 0x80
   1fcc6:	03e4      	lsls	r4, r4, #15
   1fcc8:	432c      	orrs	r4, r5
   1fcca:	0264      	lsls	r4, r4, #9
   1fccc:	0a64      	lsrs	r4, r4, #9
   1fcce:	9b00      	ldr	r3, [sp, #0]
   1fcd0:	21ff      	movs	r1, #255	; 0xff
   1fcd2:	e781      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fcd4:	9501      	str	r5, [sp, #4]
   1fcd6:	e7c1      	b.n	1fc5c <__aeabi_fdiv+0x1bc>
   1fcd8:	0023      	movs	r3, r4
   1fcda:	2020      	movs	r0, #32
   1fcdc:	40cb      	lsrs	r3, r1
   1fcde:	1a41      	subs	r1, r0, r1
   1fce0:	408c      	lsls	r4, r1
   1fce2:	1e61      	subs	r1, r4, #1
   1fce4:	418c      	sbcs	r4, r1
   1fce6:	431c      	orrs	r4, r3
   1fce8:	0763      	lsls	r3, r4, #29
   1fcea:	d004      	beq.n	1fcf6 <__aeabi_fdiv+0x256>
   1fcec:	230f      	movs	r3, #15
   1fcee:	4023      	ands	r3, r4
   1fcf0:	2b04      	cmp	r3, #4
   1fcf2:	d000      	beq.n	1fcf6 <__aeabi_fdiv+0x256>
   1fcf4:	3404      	adds	r4, #4
   1fcf6:	0163      	lsls	r3, r4, #5
   1fcf8:	d505      	bpl.n	1fd06 <__aeabi_fdiv+0x266>
   1fcfa:	2301      	movs	r3, #1
   1fcfc:	9a01      	ldr	r2, [sp, #4]
   1fcfe:	2101      	movs	r1, #1
   1fd00:	4013      	ands	r3, r2
   1fd02:	2400      	movs	r4, #0
   1fd04:	e768      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fd06:	2301      	movs	r3, #1
   1fd08:	9a01      	ldr	r2, [sp, #4]
   1fd0a:	01a4      	lsls	r4, r4, #6
   1fd0c:	0a64      	lsrs	r4, r4, #9
   1fd0e:	4013      	ands	r3, r2
   1fd10:	2100      	movs	r1, #0
   1fd12:	e761      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fd14:	2380      	movs	r3, #128	; 0x80
   1fd16:	03db      	lsls	r3, r3, #15
   1fd18:	431c      	orrs	r4, r3
   1fd1a:	0264      	lsls	r4, r4, #9
   1fd1c:	0a64      	lsrs	r4, r4, #9
   1fd1e:	4653      	mov	r3, sl
   1fd20:	21ff      	movs	r1, #255	; 0xff
   1fd22:	e759      	b.n	1fbd8 <__aeabi_fdiv+0x138>
   1fd24:	000245e0 	.word	0x000245e0
   1fd28:	00024620 	.word	0x00024620
   1fd2c:	f7ffffff 	.word	0xf7ffffff

0001fd30 <__aeabi_fmul>:
   1fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd32:	4657      	mov	r7, sl
   1fd34:	464e      	mov	r6, r9
   1fd36:	4645      	mov	r5, r8
   1fd38:	46de      	mov	lr, fp
   1fd3a:	b5e0      	push	{r5, r6, r7, lr}
   1fd3c:	0247      	lsls	r7, r0, #9
   1fd3e:	0046      	lsls	r6, r0, #1
   1fd40:	4688      	mov	r8, r1
   1fd42:	0a7f      	lsrs	r7, r7, #9
   1fd44:	0e36      	lsrs	r6, r6, #24
   1fd46:	0fc4      	lsrs	r4, r0, #31
   1fd48:	2e00      	cmp	r6, #0
   1fd4a:	d047      	beq.n	1fddc <__aeabi_fmul+0xac>
   1fd4c:	2eff      	cmp	r6, #255	; 0xff
   1fd4e:	d024      	beq.n	1fd9a <__aeabi_fmul+0x6a>
   1fd50:	00fb      	lsls	r3, r7, #3
   1fd52:	2780      	movs	r7, #128	; 0x80
   1fd54:	04ff      	lsls	r7, r7, #19
   1fd56:	431f      	orrs	r7, r3
   1fd58:	2300      	movs	r3, #0
   1fd5a:	4699      	mov	r9, r3
   1fd5c:	469a      	mov	sl, r3
   1fd5e:	3e7f      	subs	r6, #127	; 0x7f
   1fd60:	4643      	mov	r3, r8
   1fd62:	025d      	lsls	r5, r3, #9
   1fd64:	0058      	lsls	r0, r3, #1
   1fd66:	0fdb      	lsrs	r3, r3, #31
   1fd68:	0a6d      	lsrs	r5, r5, #9
   1fd6a:	0e00      	lsrs	r0, r0, #24
   1fd6c:	4698      	mov	r8, r3
   1fd6e:	d043      	beq.n	1fdf8 <__aeabi_fmul+0xc8>
   1fd70:	28ff      	cmp	r0, #255	; 0xff
   1fd72:	d03b      	beq.n	1fdec <__aeabi_fmul+0xbc>
   1fd74:	00eb      	lsls	r3, r5, #3
   1fd76:	2580      	movs	r5, #128	; 0x80
   1fd78:	2200      	movs	r2, #0
   1fd7a:	04ed      	lsls	r5, r5, #19
   1fd7c:	431d      	orrs	r5, r3
   1fd7e:	387f      	subs	r0, #127	; 0x7f
   1fd80:	1836      	adds	r6, r6, r0
   1fd82:	1c73      	adds	r3, r6, #1
   1fd84:	4641      	mov	r1, r8
   1fd86:	469b      	mov	fp, r3
   1fd88:	464b      	mov	r3, r9
   1fd8a:	4061      	eors	r1, r4
   1fd8c:	4313      	orrs	r3, r2
   1fd8e:	2b0f      	cmp	r3, #15
   1fd90:	d864      	bhi.n	1fe5c <__aeabi_fmul+0x12c>
   1fd92:	4875      	ldr	r0, [pc, #468]	; (1ff68 <__aeabi_fmul+0x238>)
   1fd94:	009b      	lsls	r3, r3, #2
   1fd96:	58c3      	ldr	r3, [r0, r3]
   1fd98:	469f      	mov	pc, r3
   1fd9a:	2f00      	cmp	r7, #0
   1fd9c:	d142      	bne.n	1fe24 <__aeabi_fmul+0xf4>
   1fd9e:	2308      	movs	r3, #8
   1fda0:	4699      	mov	r9, r3
   1fda2:	3b06      	subs	r3, #6
   1fda4:	26ff      	movs	r6, #255	; 0xff
   1fda6:	469a      	mov	sl, r3
   1fda8:	e7da      	b.n	1fd60 <__aeabi_fmul+0x30>
   1fdaa:	4641      	mov	r1, r8
   1fdac:	2a02      	cmp	r2, #2
   1fdae:	d028      	beq.n	1fe02 <__aeabi_fmul+0xd2>
   1fdb0:	2a03      	cmp	r2, #3
   1fdb2:	d100      	bne.n	1fdb6 <__aeabi_fmul+0x86>
   1fdb4:	e0ce      	b.n	1ff54 <__aeabi_fmul+0x224>
   1fdb6:	2a01      	cmp	r2, #1
   1fdb8:	d000      	beq.n	1fdbc <__aeabi_fmul+0x8c>
   1fdba:	e0ac      	b.n	1ff16 <__aeabi_fmul+0x1e6>
   1fdbc:	4011      	ands	r1, r2
   1fdbe:	2000      	movs	r0, #0
   1fdc0:	2200      	movs	r2, #0
   1fdc2:	b2cc      	uxtb	r4, r1
   1fdc4:	0240      	lsls	r0, r0, #9
   1fdc6:	05d2      	lsls	r2, r2, #23
   1fdc8:	0a40      	lsrs	r0, r0, #9
   1fdca:	07e4      	lsls	r4, r4, #31
   1fdcc:	4310      	orrs	r0, r2
   1fdce:	4320      	orrs	r0, r4
   1fdd0:	bc3c      	pop	{r2, r3, r4, r5}
   1fdd2:	4690      	mov	r8, r2
   1fdd4:	4699      	mov	r9, r3
   1fdd6:	46a2      	mov	sl, r4
   1fdd8:	46ab      	mov	fp, r5
   1fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fddc:	2f00      	cmp	r7, #0
   1fdde:	d115      	bne.n	1fe0c <__aeabi_fmul+0xdc>
   1fde0:	2304      	movs	r3, #4
   1fde2:	4699      	mov	r9, r3
   1fde4:	3b03      	subs	r3, #3
   1fde6:	2600      	movs	r6, #0
   1fde8:	469a      	mov	sl, r3
   1fdea:	e7b9      	b.n	1fd60 <__aeabi_fmul+0x30>
   1fdec:	20ff      	movs	r0, #255	; 0xff
   1fdee:	2202      	movs	r2, #2
   1fdf0:	2d00      	cmp	r5, #0
   1fdf2:	d0c5      	beq.n	1fd80 <__aeabi_fmul+0x50>
   1fdf4:	2203      	movs	r2, #3
   1fdf6:	e7c3      	b.n	1fd80 <__aeabi_fmul+0x50>
   1fdf8:	2d00      	cmp	r5, #0
   1fdfa:	d119      	bne.n	1fe30 <__aeabi_fmul+0x100>
   1fdfc:	2000      	movs	r0, #0
   1fdfe:	2201      	movs	r2, #1
   1fe00:	e7be      	b.n	1fd80 <__aeabi_fmul+0x50>
   1fe02:	2401      	movs	r4, #1
   1fe04:	22ff      	movs	r2, #255	; 0xff
   1fe06:	400c      	ands	r4, r1
   1fe08:	2000      	movs	r0, #0
   1fe0a:	e7db      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1fe0c:	0038      	movs	r0, r7
   1fe0e:	f001 ff3b 	bl	21c88 <__clzsi2>
   1fe12:	2676      	movs	r6, #118	; 0x76
   1fe14:	1f43      	subs	r3, r0, #5
   1fe16:	409f      	lsls	r7, r3
   1fe18:	2300      	movs	r3, #0
   1fe1a:	4276      	negs	r6, r6
   1fe1c:	1a36      	subs	r6, r6, r0
   1fe1e:	4699      	mov	r9, r3
   1fe20:	469a      	mov	sl, r3
   1fe22:	e79d      	b.n	1fd60 <__aeabi_fmul+0x30>
   1fe24:	230c      	movs	r3, #12
   1fe26:	4699      	mov	r9, r3
   1fe28:	3b09      	subs	r3, #9
   1fe2a:	26ff      	movs	r6, #255	; 0xff
   1fe2c:	469a      	mov	sl, r3
   1fe2e:	e797      	b.n	1fd60 <__aeabi_fmul+0x30>
   1fe30:	0028      	movs	r0, r5
   1fe32:	f001 ff29 	bl	21c88 <__clzsi2>
   1fe36:	1f43      	subs	r3, r0, #5
   1fe38:	409d      	lsls	r5, r3
   1fe3a:	2376      	movs	r3, #118	; 0x76
   1fe3c:	425b      	negs	r3, r3
   1fe3e:	1a18      	subs	r0, r3, r0
   1fe40:	2200      	movs	r2, #0
   1fe42:	e79d      	b.n	1fd80 <__aeabi_fmul+0x50>
   1fe44:	2080      	movs	r0, #128	; 0x80
   1fe46:	2400      	movs	r4, #0
   1fe48:	03c0      	lsls	r0, r0, #15
   1fe4a:	22ff      	movs	r2, #255	; 0xff
   1fe4c:	e7ba      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1fe4e:	003d      	movs	r5, r7
   1fe50:	4652      	mov	r2, sl
   1fe52:	e7ab      	b.n	1fdac <__aeabi_fmul+0x7c>
   1fe54:	003d      	movs	r5, r7
   1fe56:	0021      	movs	r1, r4
   1fe58:	4652      	mov	r2, sl
   1fe5a:	e7a7      	b.n	1fdac <__aeabi_fmul+0x7c>
   1fe5c:	0c3b      	lsrs	r3, r7, #16
   1fe5e:	469c      	mov	ip, r3
   1fe60:	042a      	lsls	r2, r5, #16
   1fe62:	0c12      	lsrs	r2, r2, #16
   1fe64:	0c2b      	lsrs	r3, r5, #16
   1fe66:	0014      	movs	r4, r2
   1fe68:	4660      	mov	r0, ip
   1fe6a:	4665      	mov	r5, ip
   1fe6c:	043f      	lsls	r7, r7, #16
   1fe6e:	0c3f      	lsrs	r7, r7, #16
   1fe70:	437c      	muls	r4, r7
   1fe72:	4342      	muls	r2, r0
   1fe74:	435d      	muls	r5, r3
   1fe76:	437b      	muls	r3, r7
   1fe78:	0c27      	lsrs	r7, r4, #16
   1fe7a:	189b      	adds	r3, r3, r2
   1fe7c:	18ff      	adds	r7, r7, r3
   1fe7e:	42ba      	cmp	r2, r7
   1fe80:	d903      	bls.n	1fe8a <__aeabi_fmul+0x15a>
   1fe82:	2380      	movs	r3, #128	; 0x80
   1fe84:	025b      	lsls	r3, r3, #9
   1fe86:	469c      	mov	ip, r3
   1fe88:	4465      	add	r5, ip
   1fe8a:	0424      	lsls	r4, r4, #16
   1fe8c:	043a      	lsls	r2, r7, #16
   1fe8e:	0c24      	lsrs	r4, r4, #16
   1fe90:	1912      	adds	r2, r2, r4
   1fe92:	0193      	lsls	r3, r2, #6
   1fe94:	1e5c      	subs	r4, r3, #1
   1fe96:	41a3      	sbcs	r3, r4
   1fe98:	0c3f      	lsrs	r7, r7, #16
   1fe9a:	0e92      	lsrs	r2, r2, #26
   1fe9c:	197d      	adds	r5, r7, r5
   1fe9e:	431a      	orrs	r2, r3
   1fea0:	01ad      	lsls	r5, r5, #6
   1fea2:	4315      	orrs	r5, r2
   1fea4:	012b      	lsls	r3, r5, #4
   1fea6:	d504      	bpl.n	1feb2 <__aeabi_fmul+0x182>
   1fea8:	2301      	movs	r3, #1
   1feaa:	465e      	mov	r6, fp
   1feac:	086a      	lsrs	r2, r5, #1
   1feae:	401d      	ands	r5, r3
   1feb0:	4315      	orrs	r5, r2
   1feb2:	0032      	movs	r2, r6
   1feb4:	327f      	adds	r2, #127	; 0x7f
   1feb6:	2a00      	cmp	r2, #0
   1feb8:	dd25      	ble.n	1ff06 <__aeabi_fmul+0x1d6>
   1feba:	076b      	lsls	r3, r5, #29
   1febc:	d004      	beq.n	1fec8 <__aeabi_fmul+0x198>
   1febe:	230f      	movs	r3, #15
   1fec0:	402b      	ands	r3, r5
   1fec2:	2b04      	cmp	r3, #4
   1fec4:	d000      	beq.n	1fec8 <__aeabi_fmul+0x198>
   1fec6:	3504      	adds	r5, #4
   1fec8:	012b      	lsls	r3, r5, #4
   1feca:	d503      	bpl.n	1fed4 <__aeabi_fmul+0x1a4>
   1fecc:	0032      	movs	r2, r6
   1fece:	4b27      	ldr	r3, [pc, #156]	; (1ff6c <__aeabi_fmul+0x23c>)
   1fed0:	3280      	adds	r2, #128	; 0x80
   1fed2:	401d      	ands	r5, r3
   1fed4:	2afe      	cmp	r2, #254	; 0xfe
   1fed6:	dc94      	bgt.n	1fe02 <__aeabi_fmul+0xd2>
   1fed8:	2401      	movs	r4, #1
   1feda:	01a8      	lsls	r0, r5, #6
   1fedc:	0a40      	lsrs	r0, r0, #9
   1fede:	b2d2      	uxtb	r2, r2
   1fee0:	400c      	ands	r4, r1
   1fee2:	e76f      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1fee4:	2080      	movs	r0, #128	; 0x80
   1fee6:	03c0      	lsls	r0, r0, #15
   1fee8:	4207      	tst	r7, r0
   1feea:	d007      	beq.n	1fefc <__aeabi_fmul+0x1cc>
   1feec:	4205      	tst	r5, r0
   1feee:	d105      	bne.n	1fefc <__aeabi_fmul+0x1cc>
   1fef0:	4328      	orrs	r0, r5
   1fef2:	0240      	lsls	r0, r0, #9
   1fef4:	0a40      	lsrs	r0, r0, #9
   1fef6:	4644      	mov	r4, r8
   1fef8:	22ff      	movs	r2, #255	; 0xff
   1fefa:	e763      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1fefc:	4338      	orrs	r0, r7
   1fefe:	0240      	lsls	r0, r0, #9
   1ff00:	0a40      	lsrs	r0, r0, #9
   1ff02:	22ff      	movs	r2, #255	; 0xff
   1ff04:	e75e      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1ff06:	2401      	movs	r4, #1
   1ff08:	1aa3      	subs	r3, r4, r2
   1ff0a:	2b1b      	cmp	r3, #27
   1ff0c:	dd05      	ble.n	1ff1a <__aeabi_fmul+0x1ea>
   1ff0e:	400c      	ands	r4, r1
   1ff10:	2200      	movs	r2, #0
   1ff12:	2000      	movs	r0, #0
   1ff14:	e756      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1ff16:	465e      	mov	r6, fp
   1ff18:	e7cb      	b.n	1feb2 <__aeabi_fmul+0x182>
   1ff1a:	002a      	movs	r2, r5
   1ff1c:	2020      	movs	r0, #32
   1ff1e:	40da      	lsrs	r2, r3
   1ff20:	1ac3      	subs	r3, r0, r3
   1ff22:	409d      	lsls	r5, r3
   1ff24:	002b      	movs	r3, r5
   1ff26:	1e5d      	subs	r5, r3, #1
   1ff28:	41ab      	sbcs	r3, r5
   1ff2a:	4313      	orrs	r3, r2
   1ff2c:	075a      	lsls	r2, r3, #29
   1ff2e:	d004      	beq.n	1ff3a <__aeabi_fmul+0x20a>
   1ff30:	220f      	movs	r2, #15
   1ff32:	401a      	ands	r2, r3
   1ff34:	2a04      	cmp	r2, #4
   1ff36:	d000      	beq.n	1ff3a <__aeabi_fmul+0x20a>
   1ff38:	3304      	adds	r3, #4
   1ff3a:	015a      	lsls	r2, r3, #5
   1ff3c:	d504      	bpl.n	1ff48 <__aeabi_fmul+0x218>
   1ff3e:	2401      	movs	r4, #1
   1ff40:	2201      	movs	r2, #1
   1ff42:	400c      	ands	r4, r1
   1ff44:	2000      	movs	r0, #0
   1ff46:	e73d      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1ff48:	2401      	movs	r4, #1
   1ff4a:	019b      	lsls	r3, r3, #6
   1ff4c:	0a58      	lsrs	r0, r3, #9
   1ff4e:	400c      	ands	r4, r1
   1ff50:	2200      	movs	r2, #0
   1ff52:	e737      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1ff54:	2080      	movs	r0, #128	; 0x80
   1ff56:	2401      	movs	r4, #1
   1ff58:	03c0      	lsls	r0, r0, #15
   1ff5a:	4328      	orrs	r0, r5
   1ff5c:	0240      	lsls	r0, r0, #9
   1ff5e:	0a40      	lsrs	r0, r0, #9
   1ff60:	400c      	ands	r4, r1
   1ff62:	22ff      	movs	r2, #255	; 0xff
   1ff64:	e72e      	b.n	1fdc4 <__aeabi_fmul+0x94>
   1ff66:	46c0      	nop			; (mov r8, r8)
   1ff68:	00024660 	.word	0x00024660
   1ff6c:	f7ffffff 	.word	0xf7ffffff

0001ff70 <__aeabi_fsub>:
   1ff70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff72:	464f      	mov	r7, r9
   1ff74:	46d6      	mov	lr, sl
   1ff76:	4646      	mov	r6, r8
   1ff78:	0044      	lsls	r4, r0, #1
   1ff7a:	b5c0      	push	{r6, r7, lr}
   1ff7c:	0fc2      	lsrs	r2, r0, #31
   1ff7e:	0247      	lsls	r7, r0, #9
   1ff80:	0248      	lsls	r0, r1, #9
   1ff82:	0a40      	lsrs	r0, r0, #9
   1ff84:	4684      	mov	ip, r0
   1ff86:	4666      	mov	r6, ip
   1ff88:	0a7b      	lsrs	r3, r7, #9
   1ff8a:	0048      	lsls	r0, r1, #1
   1ff8c:	0fc9      	lsrs	r1, r1, #31
   1ff8e:	469a      	mov	sl, r3
   1ff90:	0e24      	lsrs	r4, r4, #24
   1ff92:	0015      	movs	r5, r2
   1ff94:	00db      	lsls	r3, r3, #3
   1ff96:	0e00      	lsrs	r0, r0, #24
   1ff98:	4689      	mov	r9, r1
   1ff9a:	00f6      	lsls	r6, r6, #3
   1ff9c:	28ff      	cmp	r0, #255	; 0xff
   1ff9e:	d100      	bne.n	1ffa2 <__aeabi_fsub+0x32>
   1ffa0:	e08f      	b.n	200c2 <__aeabi_fsub+0x152>
   1ffa2:	2101      	movs	r1, #1
   1ffa4:	464f      	mov	r7, r9
   1ffa6:	404f      	eors	r7, r1
   1ffa8:	0039      	movs	r1, r7
   1ffaa:	4291      	cmp	r1, r2
   1ffac:	d066      	beq.n	2007c <__aeabi_fsub+0x10c>
   1ffae:	1a22      	subs	r2, r4, r0
   1ffb0:	2a00      	cmp	r2, #0
   1ffb2:	dc00      	bgt.n	1ffb6 <__aeabi_fsub+0x46>
   1ffb4:	e09d      	b.n	200f2 <__aeabi_fsub+0x182>
   1ffb6:	2800      	cmp	r0, #0
   1ffb8:	d13d      	bne.n	20036 <__aeabi_fsub+0xc6>
   1ffba:	2e00      	cmp	r6, #0
   1ffbc:	d100      	bne.n	1ffc0 <__aeabi_fsub+0x50>
   1ffbe:	e08b      	b.n	200d8 <__aeabi_fsub+0x168>
   1ffc0:	1e51      	subs	r1, r2, #1
   1ffc2:	2900      	cmp	r1, #0
   1ffc4:	d000      	beq.n	1ffc8 <__aeabi_fsub+0x58>
   1ffc6:	e0b5      	b.n	20134 <__aeabi_fsub+0x1c4>
   1ffc8:	2401      	movs	r4, #1
   1ffca:	1b9b      	subs	r3, r3, r6
   1ffcc:	015a      	lsls	r2, r3, #5
   1ffce:	d544      	bpl.n	2005a <__aeabi_fsub+0xea>
   1ffd0:	019b      	lsls	r3, r3, #6
   1ffd2:	099f      	lsrs	r7, r3, #6
   1ffd4:	0038      	movs	r0, r7
   1ffd6:	f001 fe57 	bl	21c88 <__clzsi2>
   1ffda:	3805      	subs	r0, #5
   1ffdc:	4087      	lsls	r7, r0
   1ffde:	4284      	cmp	r4, r0
   1ffe0:	dd00      	ble.n	1ffe4 <__aeabi_fsub+0x74>
   1ffe2:	e096      	b.n	20112 <__aeabi_fsub+0x1a2>
   1ffe4:	1b04      	subs	r4, r0, r4
   1ffe6:	003a      	movs	r2, r7
   1ffe8:	2020      	movs	r0, #32
   1ffea:	3401      	adds	r4, #1
   1ffec:	40e2      	lsrs	r2, r4
   1ffee:	1b04      	subs	r4, r0, r4
   1fff0:	40a7      	lsls	r7, r4
   1fff2:	003b      	movs	r3, r7
   1fff4:	1e5f      	subs	r7, r3, #1
   1fff6:	41bb      	sbcs	r3, r7
   1fff8:	2400      	movs	r4, #0
   1fffa:	4313      	orrs	r3, r2
   1fffc:	075a      	lsls	r2, r3, #29
   1fffe:	d004      	beq.n	2000a <__aeabi_fsub+0x9a>
   20000:	220f      	movs	r2, #15
   20002:	401a      	ands	r2, r3
   20004:	2a04      	cmp	r2, #4
   20006:	d000      	beq.n	2000a <__aeabi_fsub+0x9a>
   20008:	3304      	adds	r3, #4
   2000a:	015a      	lsls	r2, r3, #5
   2000c:	d527      	bpl.n	2005e <__aeabi_fsub+0xee>
   2000e:	3401      	adds	r4, #1
   20010:	2cff      	cmp	r4, #255	; 0xff
   20012:	d100      	bne.n	20016 <__aeabi_fsub+0xa6>
   20014:	e079      	b.n	2010a <__aeabi_fsub+0x19a>
   20016:	2201      	movs	r2, #1
   20018:	019b      	lsls	r3, r3, #6
   2001a:	0a5b      	lsrs	r3, r3, #9
   2001c:	b2e4      	uxtb	r4, r4
   2001e:	402a      	ands	r2, r5
   20020:	025b      	lsls	r3, r3, #9
   20022:	05e4      	lsls	r4, r4, #23
   20024:	0a58      	lsrs	r0, r3, #9
   20026:	07d2      	lsls	r2, r2, #31
   20028:	4320      	orrs	r0, r4
   2002a:	4310      	orrs	r0, r2
   2002c:	bc1c      	pop	{r2, r3, r4}
   2002e:	4690      	mov	r8, r2
   20030:	4699      	mov	r9, r3
   20032:	46a2      	mov	sl, r4
   20034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20036:	2cff      	cmp	r4, #255	; 0xff
   20038:	d0e0      	beq.n	1fffc <__aeabi_fsub+0x8c>
   2003a:	2180      	movs	r1, #128	; 0x80
   2003c:	04c9      	lsls	r1, r1, #19
   2003e:	430e      	orrs	r6, r1
   20040:	2a1b      	cmp	r2, #27
   20042:	dc7b      	bgt.n	2013c <__aeabi_fsub+0x1cc>
   20044:	0031      	movs	r1, r6
   20046:	2020      	movs	r0, #32
   20048:	40d1      	lsrs	r1, r2
   2004a:	1a82      	subs	r2, r0, r2
   2004c:	4096      	lsls	r6, r2
   2004e:	1e72      	subs	r2, r6, #1
   20050:	4196      	sbcs	r6, r2
   20052:	430e      	orrs	r6, r1
   20054:	1b9b      	subs	r3, r3, r6
   20056:	015a      	lsls	r2, r3, #5
   20058:	d4ba      	bmi.n	1ffd0 <__aeabi_fsub+0x60>
   2005a:	075a      	lsls	r2, r3, #29
   2005c:	d1d0      	bne.n	20000 <__aeabi_fsub+0x90>
   2005e:	2201      	movs	r2, #1
   20060:	08df      	lsrs	r7, r3, #3
   20062:	402a      	ands	r2, r5
   20064:	2cff      	cmp	r4, #255	; 0xff
   20066:	d133      	bne.n	200d0 <__aeabi_fsub+0x160>
   20068:	2f00      	cmp	r7, #0
   2006a:	d100      	bne.n	2006e <__aeabi_fsub+0xfe>
   2006c:	e0a8      	b.n	201c0 <__aeabi_fsub+0x250>
   2006e:	2380      	movs	r3, #128	; 0x80
   20070:	03db      	lsls	r3, r3, #15
   20072:	433b      	orrs	r3, r7
   20074:	025b      	lsls	r3, r3, #9
   20076:	0a5b      	lsrs	r3, r3, #9
   20078:	24ff      	movs	r4, #255	; 0xff
   2007a:	e7d1      	b.n	20020 <__aeabi_fsub+0xb0>
   2007c:	1a21      	subs	r1, r4, r0
   2007e:	2900      	cmp	r1, #0
   20080:	dd4c      	ble.n	2011c <__aeabi_fsub+0x1ac>
   20082:	2800      	cmp	r0, #0
   20084:	d02a      	beq.n	200dc <__aeabi_fsub+0x16c>
   20086:	2cff      	cmp	r4, #255	; 0xff
   20088:	d0b8      	beq.n	1fffc <__aeabi_fsub+0x8c>
   2008a:	2080      	movs	r0, #128	; 0x80
   2008c:	04c0      	lsls	r0, r0, #19
   2008e:	4306      	orrs	r6, r0
   20090:	291b      	cmp	r1, #27
   20092:	dd00      	ble.n	20096 <__aeabi_fsub+0x126>
   20094:	e0af      	b.n	201f6 <__aeabi_fsub+0x286>
   20096:	0030      	movs	r0, r6
   20098:	2720      	movs	r7, #32
   2009a:	40c8      	lsrs	r0, r1
   2009c:	1a79      	subs	r1, r7, r1
   2009e:	408e      	lsls	r6, r1
   200a0:	1e71      	subs	r1, r6, #1
   200a2:	418e      	sbcs	r6, r1
   200a4:	4306      	orrs	r6, r0
   200a6:	199b      	adds	r3, r3, r6
   200a8:	0159      	lsls	r1, r3, #5
   200aa:	d5d6      	bpl.n	2005a <__aeabi_fsub+0xea>
   200ac:	3401      	adds	r4, #1
   200ae:	2cff      	cmp	r4, #255	; 0xff
   200b0:	d100      	bne.n	200b4 <__aeabi_fsub+0x144>
   200b2:	e085      	b.n	201c0 <__aeabi_fsub+0x250>
   200b4:	2201      	movs	r2, #1
   200b6:	497a      	ldr	r1, [pc, #488]	; (202a0 <__aeabi_fsub+0x330>)
   200b8:	401a      	ands	r2, r3
   200ba:	085b      	lsrs	r3, r3, #1
   200bc:	400b      	ands	r3, r1
   200be:	4313      	orrs	r3, r2
   200c0:	e79c      	b.n	1fffc <__aeabi_fsub+0x8c>
   200c2:	2e00      	cmp	r6, #0
   200c4:	d000      	beq.n	200c8 <__aeabi_fsub+0x158>
   200c6:	e770      	b.n	1ffaa <__aeabi_fsub+0x3a>
   200c8:	e76b      	b.n	1ffa2 <__aeabi_fsub+0x32>
   200ca:	1e3b      	subs	r3, r7, #0
   200cc:	d1c5      	bne.n	2005a <__aeabi_fsub+0xea>
   200ce:	2200      	movs	r2, #0
   200d0:	027b      	lsls	r3, r7, #9
   200d2:	0a5b      	lsrs	r3, r3, #9
   200d4:	b2e4      	uxtb	r4, r4
   200d6:	e7a3      	b.n	20020 <__aeabi_fsub+0xb0>
   200d8:	0014      	movs	r4, r2
   200da:	e78f      	b.n	1fffc <__aeabi_fsub+0x8c>
   200dc:	2e00      	cmp	r6, #0
   200de:	d04d      	beq.n	2017c <__aeabi_fsub+0x20c>
   200e0:	1e48      	subs	r0, r1, #1
   200e2:	2800      	cmp	r0, #0
   200e4:	d157      	bne.n	20196 <__aeabi_fsub+0x226>
   200e6:	199b      	adds	r3, r3, r6
   200e8:	2401      	movs	r4, #1
   200ea:	015a      	lsls	r2, r3, #5
   200ec:	d5b5      	bpl.n	2005a <__aeabi_fsub+0xea>
   200ee:	2402      	movs	r4, #2
   200f0:	e7e0      	b.n	200b4 <__aeabi_fsub+0x144>
   200f2:	2a00      	cmp	r2, #0
   200f4:	d125      	bne.n	20142 <__aeabi_fsub+0x1d2>
   200f6:	1c62      	adds	r2, r4, #1
   200f8:	b2d2      	uxtb	r2, r2
   200fa:	2a01      	cmp	r2, #1
   200fc:	dd72      	ble.n	201e4 <__aeabi_fsub+0x274>
   200fe:	1b9f      	subs	r7, r3, r6
   20100:	017a      	lsls	r2, r7, #5
   20102:	d535      	bpl.n	20170 <__aeabi_fsub+0x200>
   20104:	1af7      	subs	r7, r6, r3
   20106:	000d      	movs	r5, r1
   20108:	e764      	b.n	1ffd4 <__aeabi_fsub+0x64>
   2010a:	2201      	movs	r2, #1
   2010c:	2300      	movs	r3, #0
   2010e:	402a      	ands	r2, r5
   20110:	e786      	b.n	20020 <__aeabi_fsub+0xb0>
   20112:	003b      	movs	r3, r7
   20114:	4a63      	ldr	r2, [pc, #396]	; (202a4 <__aeabi_fsub+0x334>)
   20116:	1a24      	subs	r4, r4, r0
   20118:	4013      	ands	r3, r2
   2011a:	e76f      	b.n	1fffc <__aeabi_fsub+0x8c>
   2011c:	2900      	cmp	r1, #0
   2011e:	d16c      	bne.n	201fa <__aeabi_fsub+0x28a>
   20120:	1c61      	adds	r1, r4, #1
   20122:	b2c8      	uxtb	r0, r1
   20124:	2801      	cmp	r0, #1
   20126:	dd4e      	ble.n	201c6 <__aeabi_fsub+0x256>
   20128:	29ff      	cmp	r1, #255	; 0xff
   2012a:	d049      	beq.n	201c0 <__aeabi_fsub+0x250>
   2012c:	199b      	adds	r3, r3, r6
   2012e:	085b      	lsrs	r3, r3, #1
   20130:	000c      	movs	r4, r1
   20132:	e763      	b.n	1fffc <__aeabi_fsub+0x8c>
   20134:	2aff      	cmp	r2, #255	; 0xff
   20136:	d041      	beq.n	201bc <__aeabi_fsub+0x24c>
   20138:	000a      	movs	r2, r1
   2013a:	e781      	b.n	20040 <__aeabi_fsub+0xd0>
   2013c:	2601      	movs	r6, #1
   2013e:	1b9b      	subs	r3, r3, r6
   20140:	e789      	b.n	20056 <__aeabi_fsub+0xe6>
   20142:	2c00      	cmp	r4, #0
   20144:	d01c      	beq.n	20180 <__aeabi_fsub+0x210>
   20146:	28ff      	cmp	r0, #255	; 0xff
   20148:	d021      	beq.n	2018e <__aeabi_fsub+0x21e>
   2014a:	2480      	movs	r4, #128	; 0x80
   2014c:	04e4      	lsls	r4, r4, #19
   2014e:	4252      	negs	r2, r2
   20150:	4323      	orrs	r3, r4
   20152:	2a1b      	cmp	r2, #27
   20154:	dd00      	ble.n	20158 <__aeabi_fsub+0x1e8>
   20156:	e096      	b.n	20286 <__aeabi_fsub+0x316>
   20158:	001c      	movs	r4, r3
   2015a:	2520      	movs	r5, #32
   2015c:	40d4      	lsrs	r4, r2
   2015e:	1aaa      	subs	r2, r5, r2
   20160:	4093      	lsls	r3, r2
   20162:	1e5a      	subs	r2, r3, #1
   20164:	4193      	sbcs	r3, r2
   20166:	4323      	orrs	r3, r4
   20168:	1af3      	subs	r3, r6, r3
   2016a:	0004      	movs	r4, r0
   2016c:	000d      	movs	r5, r1
   2016e:	e72d      	b.n	1ffcc <__aeabi_fsub+0x5c>
   20170:	2f00      	cmp	r7, #0
   20172:	d000      	beq.n	20176 <__aeabi_fsub+0x206>
   20174:	e72e      	b.n	1ffd4 <__aeabi_fsub+0x64>
   20176:	2200      	movs	r2, #0
   20178:	2400      	movs	r4, #0
   2017a:	e7a9      	b.n	200d0 <__aeabi_fsub+0x160>
   2017c:	000c      	movs	r4, r1
   2017e:	e73d      	b.n	1fffc <__aeabi_fsub+0x8c>
   20180:	2b00      	cmp	r3, #0
   20182:	d058      	beq.n	20236 <__aeabi_fsub+0x2c6>
   20184:	43d2      	mvns	r2, r2
   20186:	2a00      	cmp	r2, #0
   20188:	d0ee      	beq.n	20168 <__aeabi_fsub+0x1f8>
   2018a:	28ff      	cmp	r0, #255	; 0xff
   2018c:	d1e1      	bne.n	20152 <__aeabi_fsub+0x1e2>
   2018e:	0033      	movs	r3, r6
   20190:	24ff      	movs	r4, #255	; 0xff
   20192:	000d      	movs	r5, r1
   20194:	e732      	b.n	1fffc <__aeabi_fsub+0x8c>
   20196:	29ff      	cmp	r1, #255	; 0xff
   20198:	d010      	beq.n	201bc <__aeabi_fsub+0x24c>
   2019a:	0001      	movs	r1, r0
   2019c:	e778      	b.n	20090 <__aeabi_fsub+0x120>
   2019e:	2b00      	cmp	r3, #0
   201a0:	d06e      	beq.n	20280 <__aeabi_fsub+0x310>
   201a2:	24ff      	movs	r4, #255	; 0xff
   201a4:	2e00      	cmp	r6, #0
   201a6:	d100      	bne.n	201aa <__aeabi_fsub+0x23a>
   201a8:	e728      	b.n	1fffc <__aeabi_fsub+0x8c>
   201aa:	2280      	movs	r2, #128	; 0x80
   201ac:	4651      	mov	r1, sl
   201ae:	03d2      	lsls	r2, r2, #15
   201b0:	4211      	tst	r1, r2
   201b2:	d003      	beq.n	201bc <__aeabi_fsub+0x24c>
   201b4:	4661      	mov	r1, ip
   201b6:	4211      	tst	r1, r2
   201b8:	d100      	bne.n	201bc <__aeabi_fsub+0x24c>
   201ba:	0033      	movs	r3, r6
   201bc:	24ff      	movs	r4, #255	; 0xff
   201be:	e71d      	b.n	1fffc <__aeabi_fsub+0x8c>
   201c0:	24ff      	movs	r4, #255	; 0xff
   201c2:	2300      	movs	r3, #0
   201c4:	e72c      	b.n	20020 <__aeabi_fsub+0xb0>
   201c6:	2c00      	cmp	r4, #0
   201c8:	d1e9      	bne.n	2019e <__aeabi_fsub+0x22e>
   201ca:	2b00      	cmp	r3, #0
   201cc:	d063      	beq.n	20296 <__aeabi_fsub+0x326>
   201ce:	2e00      	cmp	r6, #0
   201d0:	d100      	bne.n	201d4 <__aeabi_fsub+0x264>
   201d2:	e713      	b.n	1fffc <__aeabi_fsub+0x8c>
   201d4:	199b      	adds	r3, r3, r6
   201d6:	015a      	lsls	r2, r3, #5
   201d8:	d400      	bmi.n	201dc <__aeabi_fsub+0x26c>
   201da:	e73e      	b.n	2005a <__aeabi_fsub+0xea>
   201dc:	4a31      	ldr	r2, [pc, #196]	; (202a4 <__aeabi_fsub+0x334>)
   201de:	000c      	movs	r4, r1
   201e0:	4013      	ands	r3, r2
   201e2:	e70b      	b.n	1fffc <__aeabi_fsub+0x8c>
   201e4:	2c00      	cmp	r4, #0
   201e6:	d11e      	bne.n	20226 <__aeabi_fsub+0x2b6>
   201e8:	2b00      	cmp	r3, #0
   201ea:	d12f      	bne.n	2024c <__aeabi_fsub+0x2dc>
   201ec:	2e00      	cmp	r6, #0
   201ee:	d04f      	beq.n	20290 <__aeabi_fsub+0x320>
   201f0:	0033      	movs	r3, r6
   201f2:	000d      	movs	r5, r1
   201f4:	e702      	b.n	1fffc <__aeabi_fsub+0x8c>
   201f6:	2601      	movs	r6, #1
   201f8:	e755      	b.n	200a6 <__aeabi_fsub+0x136>
   201fa:	2c00      	cmp	r4, #0
   201fc:	d11f      	bne.n	2023e <__aeabi_fsub+0x2ce>
   201fe:	2b00      	cmp	r3, #0
   20200:	d043      	beq.n	2028a <__aeabi_fsub+0x31a>
   20202:	43c9      	mvns	r1, r1
   20204:	2900      	cmp	r1, #0
   20206:	d00b      	beq.n	20220 <__aeabi_fsub+0x2b0>
   20208:	28ff      	cmp	r0, #255	; 0xff
   2020a:	d039      	beq.n	20280 <__aeabi_fsub+0x310>
   2020c:	291b      	cmp	r1, #27
   2020e:	dc44      	bgt.n	2029a <__aeabi_fsub+0x32a>
   20210:	001c      	movs	r4, r3
   20212:	2720      	movs	r7, #32
   20214:	40cc      	lsrs	r4, r1
   20216:	1a79      	subs	r1, r7, r1
   20218:	408b      	lsls	r3, r1
   2021a:	1e59      	subs	r1, r3, #1
   2021c:	418b      	sbcs	r3, r1
   2021e:	4323      	orrs	r3, r4
   20220:	199b      	adds	r3, r3, r6
   20222:	0004      	movs	r4, r0
   20224:	e740      	b.n	200a8 <__aeabi_fsub+0x138>
   20226:	2b00      	cmp	r3, #0
   20228:	d11a      	bne.n	20260 <__aeabi_fsub+0x2f0>
   2022a:	2e00      	cmp	r6, #0
   2022c:	d124      	bne.n	20278 <__aeabi_fsub+0x308>
   2022e:	2780      	movs	r7, #128	; 0x80
   20230:	2200      	movs	r2, #0
   20232:	03ff      	lsls	r7, r7, #15
   20234:	e71b      	b.n	2006e <__aeabi_fsub+0xfe>
   20236:	0033      	movs	r3, r6
   20238:	0004      	movs	r4, r0
   2023a:	000d      	movs	r5, r1
   2023c:	e6de      	b.n	1fffc <__aeabi_fsub+0x8c>
   2023e:	28ff      	cmp	r0, #255	; 0xff
   20240:	d01e      	beq.n	20280 <__aeabi_fsub+0x310>
   20242:	2480      	movs	r4, #128	; 0x80
   20244:	04e4      	lsls	r4, r4, #19
   20246:	4249      	negs	r1, r1
   20248:	4323      	orrs	r3, r4
   2024a:	e7df      	b.n	2020c <__aeabi_fsub+0x29c>
   2024c:	2e00      	cmp	r6, #0
   2024e:	d100      	bne.n	20252 <__aeabi_fsub+0x2e2>
   20250:	e6d4      	b.n	1fffc <__aeabi_fsub+0x8c>
   20252:	1b9f      	subs	r7, r3, r6
   20254:	017a      	lsls	r2, r7, #5
   20256:	d400      	bmi.n	2025a <__aeabi_fsub+0x2ea>
   20258:	e737      	b.n	200ca <__aeabi_fsub+0x15a>
   2025a:	1af3      	subs	r3, r6, r3
   2025c:	000d      	movs	r5, r1
   2025e:	e6cd      	b.n	1fffc <__aeabi_fsub+0x8c>
   20260:	24ff      	movs	r4, #255	; 0xff
   20262:	2e00      	cmp	r6, #0
   20264:	d100      	bne.n	20268 <__aeabi_fsub+0x2f8>
   20266:	e6c9      	b.n	1fffc <__aeabi_fsub+0x8c>
   20268:	2280      	movs	r2, #128	; 0x80
   2026a:	4650      	mov	r0, sl
   2026c:	03d2      	lsls	r2, r2, #15
   2026e:	4210      	tst	r0, r2
   20270:	d0a4      	beq.n	201bc <__aeabi_fsub+0x24c>
   20272:	4660      	mov	r0, ip
   20274:	4210      	tst	r0, r2
   20276:	d1a1      	bne.n	201bc <__aeabi_fsub+0x24c>
   20278:	0033      	movs	r3, r6
   2027a:	000d      	movs	r5, r1
   2027c:	24ff      	movs	r4, #255	; 0xff
   2027e:	e6bd      	b.n	1fffc <__aeabi_fsub+0x8c>
   20280:	0033      	movs	r3, r6
   20282:	24ff      	movs	r4, #255	; 0xff
   20284:	e6ba      	b.n	1fffc <__aeabi_fsub+0x8c>
   20286:	2301      	movs	r3, #1
   20288:	e76e      	b.n	20168 <__aeabi_fsub+0x1f8>
   2028a:	0033      	movs	r3, r6
   2028c:	0004      	movs	r4, r0
   2028e:	e6b5      	b.n	1fffc <__aeabi_fsub+0x8c>
   20290:	2700      	movs	r7, #0
   20292:	2200      	movs	r2, #0
   20294:	e71c      	b.n	200d0 <__aeabi_fsub+0x160>
   20296:	0033      	movs	r3, r6
   20298:	e6b0      	b.n	1fffc <__aeabi_fsub+0x8c>
   2029a:	2301      	movs	r3, #1
   2029c:	e7c0      	b.n	20220 <__aeabi_fsub+0x2b0>
   2029e:	46c0      	nop			; (mov r8, r8)
   202a0:	7dffffff 	.word	0x7dffffff
   202a4:	fbffffff 	.word	0xfbffffff

000202a8 <__aeabi_f2iz>:
   202a8:	0241      	lsls	r1, r0, #9
   202aa:	0043      	lsls	r3, r0, #1
   202ac:	0fc2      	lsrs	r2, r0, #31
   202ae:	0a49      	lsrs	r1, r1, #9
   202b0:	0e1b      	lsrs	r3, r3, #24
   202b2:	2000      	movs	r0, #0
   202b4:	2b7e      	cmp	r3, #126	; 0x7e
   202b6:	dd0d      	ble.n	202d4 <__aeabi_f2iz+0x2c>
   202b8:	2b9d      	cmp	r3, #157	; 0x9d
   202ba:	dc0c      	bgt.n	202d6 <__aeabi_f2iz+0x2e>
   202bc:	2080      	movs	r0, #128	; 0x80
   202be:	0400      	lsls	r0, r0, #16
   202c0:	4301      	orrs	r1, r0
   202c2:	2b95      	cmp	r3, #149	; 0x95
   202c4:	dc0a      	bgt.n	202dc <__aeabi_f2iz+0x34>
   202c6:	2096      	movs	r0, #150	; 0x96
   202c8:	1ac3      	subs	r3, r0, r3
   202ca:	40d9      	lsrs	r1, r3
   202cc:	4248      	negs	r0, r1
   202ce:	2a00      	cmp	r2, #0
   202d0:	d100      	bne.n	202d4 <__aeabi_f2iz+0x2c>
   202d2:	0008      	movs	r0, r1
   202d4:	4770      	bx	lr
   202d6:	4b03      	ldr	r3, [pc, #12]	; (202e4 <__aeabi_f2iz+0x3c>)
   202d8:	18d0      	adds	r0, r2, r3
   202da:	e7fb      	b.n	202d4 <__aeabi_f2iz+0x2c>
   202dc:	3b96      	subs	r3, #150	; 0x96
   202de:	4099      	lsls	r1, r3
   202e0:	e7f4      	b.n	202cc <__aeabi_f2iz+0x24>
   202e2:	46c0      	nop			; (mov r8, r8)
   202e4:	7fffffff 	.word	0x7fffffff

000202e8 <__aeabi_i2f>:
   202e8:	b570      	push	{r4, r5, r6, lr}
   202ea:	2800      	cmp	r0, #0
   202ec:	d030      	beq.n	20350 <__aeabi_i2f+0x68>
   202ee:	17c3      	asrs	r3, r0, #31
   202f0:	18c4      	adds	r4, r0, r3
   202f2:	405c      	eors	r4, r3
   202f4:	0fc5      	lsrs	r5, r0, #31
   202f6:	0020      	movs	r0, r4
   202f8:	f001 fcc6 	bl	21c88 <__clzsi2>
   202fc:	239e      	movs	r3, #158	; 0x9e
   202fe:	1a1b      	subs	r3, r3, r0
   20300:	2b96      	cmp	r3, #150	; 0x96
   20302:	dc0d      	bgt.n	20320 <__aeabi_i2f+0x38>
   20304:	2296      	movs	r2, #150	; 0x96
   20306:	1ad2      	subs	r2, r2, r3
   20308:	4094      	lsls	r4, r2
   2030a:	002a      	movs	r2, r5
   2030c:	0264      	lsls	r4, r4, #9
   2030e:	0a64      	lsrs	r4, r4, #9
   20310:	b2db      	uxtb	r3, r3
   20312:	0264      	lsls	r4, r4, #9
   20314:	05db      	lsls	r3, r3, #23
   20316:	0a60      	lsrs	r0, r4, #9
   20318:	07d2      	lsls	r2, r2, #31
   2031a:	4318      	orrs	r0, r3
   2031c:	4310      	orrs	r0, r2
   2031e:	bd70      	pop	{r4, r5, r6, pc}
   20320:	2b99      	cmp	r3, #153	; 0x99
   20322:	dc19      	bgt.n	20358 <__aeabi_i2f+0x70>
   20324:	2299      	movs	r2, #153	; 0x99
   20326:	1ad2      	subs	r2, r2, r3
   20328:	2a00      	cmp	r2, #0
   2032a:	dd29      	ble.n	20380 <__aeabi_i2f+0x98>
   2032c:	4094      	lsls	r4, r2
   2032e:	0022      	movs	r2, r4
   20330:	4c14      	ldr	r4, [pc, #80]	; (20384 <__aeabi_i2f+0x9c>)
   20332:	4014      	ands	r4, r2
   20334:	0751      	lsls	r1, r2, #29
   20336:	d004      	beq.n	20342 <__aeabi_i2f+0x5a>
   20338:	210f      	movs	r1, #15
   2033a:	400a      	ands	r2, r1
   2033c:	2a04      	cmp	r2, #4
   2033e:	d000      	beq.n	20342 <__aeabi_i2f+0x5a>
   20340:	3404      	adds	r4, #4
   20342:	0162      	lsls	r2, r4, #5
   20344:	d413      	bmi.n	2036e <__aeabi_i2f+0x86>
   20346:	01a4      	lsls	r4, r4, #6
   20348:	0a64      	lsrs	r4, r4, #9
   2034a:	b2db      	uxtb	r3, r3
   2034c:	002a      	movs	r2, r5
   2034e:	e7e0      	b.n	20312 <__aeabi_i2f+0x2a>
   20350:	2200      	movs	r2, #0
   20352:	2300      	movs	r3, #0
   20354:	2400      	movs	r4, #0
   20356:	e7dc      	b.n	20312 <__aeabi_i2f+0x2a>
   20358:	2205      	movs	r2, #5
   2035a:	0021      	movs	r1, r4
   2035c:	1a12      	subs	r2, r2, r0
   2035e:	40d1      	lsrs	r1, r2
   20360:	22b9      	movs	r2, #185	; 0xb9
   20362:	1ad2      	subs	r2, r2, r3
   20364:	4094      	lsls	r4, r2
   20366:	1e62      	subs	r2, r4, #1
   20368:	4194      	sbcs	r4, r2
   2036a:	430c      	orrs	r4, r1
   2036c:	e7da      	b.n	20324 <__aeabi_i2f+0x3c>
   2036e:	4b05      	ldr	r3, [pc, #20]	; (20384 <__aeabi_i2f+0x9c>)
   20370:	002a      	movs	r2, r5
   20372:	401c      	ands	r4, r3
   20374:	239f      	movs	r3, #159	; 0x9f
   20376:	01a4      	lsls	r4, r4, #6
   20378:	1a1b      	subs	r3, r3, r0
   2037a:	0a64      	lsrs	r4, r4, #9
   2037c:	b2db      	uxtb	r3, r3
   2037e:	e7c8      	b.n	20312 <__aeabi_i2f+0x2a>
   20380:	0022      	movs	r2, r4
   20382:	e7d5      	b.n	20330 <__aeabi_i2f+0x48>
   20384:	fbffffff 	.word	0xfbffffff

00020388 <__aeabi_dadd>:
   20388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2038a:	4645      	mov	r5, r8
   2038c:	46de      	mov	lr, fp
   2038e:	4657      	mov	r7, sl
   20390:	464e      	mov	r6, r9
   20392:	030c      	lsls	r4, r1, #12
   20394:	b5e0      	push	{r5, r6, r7, lr}
   20396:	004e      	lsls	r6, r1, #1
   20398:	0fc9      	lsrs	r1, r1, #31
   2039a:	4688      	mov	r8, r1
   2039c:	000d      	movs	r5, r1
   2039e:	0a61      	lsrs	r1, r4, #9
   203a0:	0f44      	lsrs	r4, r0, #29
   203a2:	430c      	orrs	r4, r1
   203a4:	00c7      	lsls	r7, r0, #3
   203a6:	0319      	lsls	r1, r3, #12
   203a8:	0058      	lsls	r0, r3, #1
   203aa:	0fdb      	lsrs	r3, r3, #31
   203ac:	469b      	mov	fp, r3
   203ae:	0a4b      	lsrs	r3, r1, #9
   203b0:	0f51      	lsrs	r1, r2, #29
   203b2:	430b      	orrs	r3, r1
   203b4:	0d76      	lsrs	r6, r6, #21
   203b6:	0d40      	lsrs	r0, r0, #21
   203b8:	0019      	movs	r1, r3
   203ba:	00d2      	lsls	r2, r2, #3
   203bc:	45d8      	cmp	r8, fp
   203be:	d100      	bne.n	203c2 <__aeabi_dadd+0x3a>
   203c0:	e0ae      	b.n	20520 <__aeabi_dadd+0x198>
   203c2:	1a35      	subs	r5, r6, r0
   203c4:	2d00      	cmp	r5, #0
   203c6:	dc00      	bgt.n	203ca <__aeabi_dadd+0x42>
   203c8:	e0f6      	b.n	205b8 <__aeabi_dadd+0x230>
   203ca:	2800      	cmp	r0, #0
   203cc:	d10f      	bne.n	203ee <__aeabi_dadd+0x66>
   203ce:	4313      	orrs	r3, r2
   203d0:	d100      	bne.n	203d4 <__aeabi_dadd+0x4c>
   203d2:	e0db      	b.n	2058c <__aeabi_dadd+0x204>
   203d4:	1e6b      	subs	r3, r5, #1
   203d6:	2b00      	cmp	r3, #0
   203d8:	d000      	beq.n	203dc <__aeabi_dadd+0x54>
   203da:	e137      	b.n	2064c <__aeabi_dadd+0x2c4>
   203dc:	1aba      	subs	r2, r7, r2
   203de:	4297      	cmp	r7, r2
   203e0:	41bf      	sbcs	r7, r7
   203e2:	1a64      	subs	r4, r4, r1
   203e4:	427f      	negs	r7, r7
   203e6:	1be4      	subs	r4, r4, r7
   203e8:	2601      	movs	r6, #1
   203ea:	0017      	movs	r7, r2
   203ec:	e024      	b.n	20438 <__aeabi_dadd+0xb0>
   203ee:	4bc6      	ldr	r3, [pc, #792]	; (20708 <__aeabi_dadd+0x380>)
   203f0:	429e      	cmp	r6, r3
   203f2:	d04d      	beq.n	20490 <__aeabi_dadd+0x108>
   203f4:	2380      	movs	r3, #128	; 0x80
   203f6:	041b      	lsls	r3, r3, #16
   203f8:	4319      	orrs	r1, r3
   203fa:	2d38      	cmp	r5, #56	; 0x38
   203fc:	dd00      	ble.n	20400 <__aeabi_dadd+0x78>
   203fe:	e107      	b.n	20610 <__aeabi_dadd+0x288>
   20400:	2d1f      	cmp	r5, #31
   20402:	dd00      	ble.n	20406 <__aeabi_dadd+0x7e>
   20404:	e138      	b.n	20678 <__aeabi_dadd+0x2f0>
   20406:	2020      	movs	r0, #32
   20408:	1b43      	subs	r3, r0, r5
   2040a:	469a      	mov	sl, r3
   2040c:	000b      	movs	r3, r1
   2040e:	4650      	mov	r0, sl
   20410:	4083      	lsls	r3, r0
   20412:	4699      	mov	r9, r3
   20414:	0013      	movs	r3, r2
   20416:	4648      	mov	r0, r9
   20418:	40eb      	lsrs	r3, r5
   2041a:	4318      	orrs	r0, r3
   2041c:	0003      	movs	r3, r0
   2041e:	4650      	mov	r0, sl
   20420:	4082      	lsls	r2, r0
   20422:	1e50      	subs	r0, r2, #1
   20424:	4182      	sbcs	r2, r0
   20426:	40e9      	lsrs	r1, r5
   20428:	431a      	orrs	r2, r3
   2042a:	1aba      	subs	r2, r7, r2
   2042c:	1a61      	subs	r1, r4, r1
   2042e:	4297      	cmp	r7, r2
   20430:	41a4      	sbcs	r4, r4
   20432:	0017      	movs	r7, r2
   20434:	4264      	negs	r4, r4
   20436:	1b0c      	subs	r4, r1, r4
   20438:	0223      	lsls	r3, r4, #8
   2043a:	d562      	bpl.n	20502 <__aeabi_dadd+0x17a>
   2043c:	0264      	lsls	r4, r4, #9
   2043e:	0a65      	lsrs	r5, r4, #9
   20440:	2d00      	cmp	r5, #0
   20442:	d100      	bne.n	20446 <__aeabi_dadd+0xbe>
   20444:	e0df      	b.n	20606 <__aeabi_dadd+0x27e>
   20446:	0028      	movs	r0, r5
   20448:	f001 fc1e 	bl	21c88 <__clzsi2>
   2044c:	0003      	movs	r3, r0
   2044e:	3b08      	subs	r3, #8
   20450:	2b1f      	cmp	r3, #31
   20452:	dd00      	ble.n	20456 <__aeabi_dadd+0xce>
   20454:	e0d2      	b.n	205fc <__aeabi_dadd+0x274>
   20456:	2220      	movs	r2, #32
   20458:	003c      	movs	r4, r7
   2045a:	1ad2      	subs	r2, r2, r3
   2045c:	409d      	lsls	r5, r3
   2045e:	40d4      	lsrs	r4, r2
   20460:	409f      	lsls	r7, r3
   20462:	4325      	orrs	r5, r4
   20464:	429e      	cmp	r6, r3
   20466:	dd00      	ble.n	2046a <__aeabi_dadd+0xe2>
   20468:	e0c4      	b.n	205f4 <__aeabi_dadd+0x26c>
   2046a:	1b9e      	subs	r6, r3, r6
   2046c:	1c73      	adds	r3, r6, #1
   2046e:	2b1f      	cmp	r3, #31
   20470:	dd00      	ble.n	20474 <__aeabi_dadd+0xec>
   20472:	e0f1      	b.n	20658 <__aeabi_dadd+0x2d0>
   20474:	2220      	movs	r2, #32
   20476:	0038      	movs	r0, r7
   20478:	0029      	movs	r1, r5
   2047a:	1ad2      	subs	r2, r2, r3
   2047c:	40d8      	lsrs	r0, r3
   2047e:	4091      	lsls	r1, r2
   20480:	4097      	lsls	r7, r2
   20482:	002c      	movs	r4, r5
   20484:	4301      	orrs	r1, r0
   20486:	1e78      	subs	r0, r7, #1
   20488:	4187      	sbcs	r7, r0
   2048a:	40dc      	lsrs	r4, r3
   2048c:	2600      	movs	r6, #0
   2048e:	430f      	orrs	r7, r1
   20490:	077b      	lsls	r3, r7, #29
   20492:	d009      	beq.n	204a8 <__aeabi_dadd+0x120>
   20494:	230f      	movs	r3, #15
   20496:	403b      	ands	r3, r7
   20498:	2b04      	cmp	r3, #4
   2049a:	d005      	beq.n	204a8 <__aeabi_dadd+0x120>
   2049c:	1d3b      	adds	r3, r7, #4
   2049e:	42bb      	cmp	r3, r7
   204a0:	41bf      	sbcs	r7, r7
   204a2:	427f      	negs	r7, r7
   204a4:	19e4      	adds	r4, r4, r7
   204a6:	001f      	movs	r7, r3
   204a8:	0223      	lsls	r3, r4, #8
   204aa:	d52c      	bpl.n	20506 <__aeabi_dadd+0x17e>
   204ac:	4b96      	ldr	r3, [pc, #600]	; (20708 <__aeabi_dadd+0x380>)
   204ae:	3601      	adds	r6, #1
   204b0:	429e      	cmp	r6, r3
   204b2:	d100      	bne.n	204b6 <__aeabi_dadd+0x12e>
   204b4:	e09a      	b.n	205ec <__aeabi_dadd+0x264>
   204b6:	4645      	mov	r5, r8
   204b8:	4b94      	ldr	r3, [pc, #592]	; (2070c <__aeabi_dadd+0x384>)
   204ba:	08ff      	lsrs	r7, r7, #3
   204bc:	401c      	ands	r4, r3
   204be:	0760      	lsls	r0, r4, #29
   204c0:	0576      	lsls	r6, r6, #21
   204c2:	0264      	lsls	r4, r4, #9
   204c4:	4307      	orrs	r7, r0
   204c6:	0b24      	lsrs	r4, r4, #12
   204c8:	0d76      	lsrs	r6, r6, #21
   204ca:	2100      	movs	r1, #0
   204cc:	0324      	lsls	r4, r4, #12
   204ce:	0b23      	lsrs	r3, r4, #12
   204d0:	0d0c      	lsrs	r4, r1, #20
   204d2:	4a8f      	ldr	r2, [pc, #572]	; (20710 <__aeabi_dadd+0x388>)
   204d4:	0524      	lsls	r4, r4, #20
   204d6:	431c      	orrs	r4, r3
   204d8:	4014      	ands	r4, r2
   204da:	0533      	lsls	r3, r6, #20
   204dc:	4323      	orrs	r3, r4
   204de:	005b      	lsls	r3, r3, #1
   204e0:	07ed      	lsls	r5, r5, #31
   204e2:	085b      	lsrs	r3, r3, #1
   204e4:	432b      	orrs	r3, r5
   204e6:	0038      	movs	r0, r7
   204e8:	0019      	movs	r1, r3
   204ea:	bc3c      	pop	{r2, r3, r4, r5}
   204ec:	4690      	mov	r8, r2
   204ee:	4699      	mov	r9, r3
   204f0:	46a2      	mov	sl, r4
   204f2:	46ab      	mov	fp, r5
   204f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204f6:	4664      	mov	r4, ip
   204f8:	4304      	orrs	r4, r0
   204fa:	d100      	bne.n	204fe <__aeabi_dadd+0x176>
   204fc:	e211      	b.n	20922 <__aeabi_dadd+0x59a>
   204fe:	0004      	movs	r4, r0
   20500:	4667      	mov	r7, ip
   20502:	077b      	lsls	r3, r7, #29
   20504:	d1c6      	bne.n	20494 <__aeabi_dadd+0x10c>
   20506:	4645      	mov	r5, r8
   20508:	0760      	lsls	r0, r4, #29
   2050a:	08ff      	lsrs	r7, r7, #3
   2050c:	4307      	orrs	r7, r0
   2050e:	08e4      	lsrs	r4, r4, #3
   20510:	4b7d      	ldr	r3, [pc, #500]	; (20708 <__aeabi_dadd+0x380>)
   20512:	429e      	cmp	r6, r3
   20514:	d030      	beq.n	20578 <__aeabi_dadd+0x1f0>
   20516:	0324      	lsls	r4, r4, #12
   20518:	0576      	lsls	r6, r6, #21
   2051a:	0b24      	lsrs	r4, r4, #12
   2051c:	0d76      	lsrs	r6, r6, #21
   2051e:	e7d4      	b.n	204ca <__aeabi_dadd+0x142>
   20520:	1a33      	subs	r3, r6, r0
   20522:	469a      	mov	sl, r3
   20524:	2b00      	cmp	r3, #0
   20526:	dd78      	ble.n	2061a <__aeabi_dadd+0x292>
   20528:	2800      	cmp	r0, #0
   2052a:	d031      	beq.n	20590 <__aeabi_dadd+0x208>
   2052c:	4876      	ldr	r0, [pc, #472]	; (20708 <__aeabi_dadd+0x380>)
   2052e:	4286      	cmp	r6, r0
   20530:	d0ae      	beq.n	20490 <__aeabi_dadd+0x108>
   20532:	2080      	movs	r0, #128	; 0x80
   20534:	0400      	lsls	r0, r0, #16
   20536:	4301      	orrs	r1, r0
   20538:	4653      	mov	r3, sl
   2053a:	2b38      	cmp	r3, #56	; 0x38
   2053c:	dc00      	bgt.n	20540 <__aeabi_dadd+0x1b8>
   2053e:	e0e9      	b.n	20714 <__aeabi_dadd+0x38c>
   20540:	430a      	orrs	r2, r1
   20542:	1e51      	subs	r1, r2, #1
   20544:	418a      	sbcs	r2, r1
   20546:	2100      	movs	r1, #0
   20548:	19d2      	adds	r2, r2, r7
   2054a:	42ba      	cmp	r2, r7
   2054c:	41bf      	sbcs	r7, r7
   2054e:	1909      	adds	r1, r1, r4
   20550:	427c      	negs	r4, r7
   20552:	0017      	movs	r7, r2
   20554:	190c      	adds	r4, r1, r4
   20556:	0223      	lsls	r3, r4, #8
   20558:	d5d3      	bpl.n	20502 <__aeabi_dadd+0x17a>
   2055a:	4b6b      	ldr	r3, [pc, #428]	; (20708 <__aeabi_dadd+0x380>)
   2055c:	3601      	adds	r6, #1
   2055e:	429e      	cmp	r6, r3
   20560:	d100      	bne.n	20564 <__aeabi_dadd+0x1dc>
   20562:	e13a      	b.n	207da <__aeabi_dadd+0x452>
   20564:	2001      	movs	r0, #1
   20566:	4b69      	ldr	r3, [pc, #420]	; (2070c <__aeabi_dadd+0x384>)
   20568:	401c      	ands	r4, r3
   2056a:	087b      	lsrs	r3, r7, #1
   2056c:	4007      	ands	r7, r0
   2056e:	431f      	orrs	r7, r3
   20570:	07e0      	lsls	r0, r4, #31
   20572:	4307      	orrs	r7, r0
   20574:	0864      	lsrs	r4, r4, #1
   20576:	e78b      	b.n	20490 <__aeabi_dadd+0x108>
   20578:	0023      	movs	r3, r4
   2057a:	433b      	orrs	r3, r7
   2057c:	d100      	bne.n	20580 <__aeabi_dadd+0x1f8>
   2057e:	e1cb      	b.n	20918 <__aeabi_dadd+0x590>
   20580:	2280      	movs	r2, #128	; 0x80
   20582:	0312      	lsls	r2, r2, #12
   20584:	4314      	orrs	r4, r2
   20586:	0324      	lsls	r4, r4, #12
   20588:	0b24      	lsrs	r4, r4, #12
   2058a:	e79e      	b.n	204ca <__aeabi_dadd+0x142>
   2058c:	002e      	movs	r6, r5
   2058e:	e77f      	b.n	20490 <__aeabi_dadd+0x108>
   20590:	0008      	movs	r0, r1
   20592:	4310      	orrs	r0, r2
   20594:	d100      	bne.n	20598 <__aeabi_dadd+0x210>
   20596:	e0b4      	b.n	20702 <__aeabi_dadd+0x37a>
   20598:	1e58      	subs	r0, r3, #1
   2059a:	2800      	cmp	r0, #0
   2059c:	d000      	beq.n	205a0 <__aeabi_dadd+0x218>
   2059e:	e0de      	b.n	2075e <__aeabi_dadd+0x3d6>
   205a0:	18ba      	adds	r2, r7, r2
   205a2:	42ba      	cmp	r2, r7
   205a4:	419b      	sbcs	r3, r3
   205a6:	1864      	adds	r4, r4, r1
   205a8:	425b      	negs	r3, r3
   205aa:	18e4      	adds	r4, r4, r3
   205ac:	0017      	movs	r7, r2
   205ae:	2601      	movs	r6, #1
   205b0:	0223      	lsls	r3, r4, #8
   205b2:	d5a6      	bpl.n	20502 <__aeabi_dadd+0x17a>
   205b4:	2602      	movs	r6, #2
   205b6:	e7d5      	b.n	20564 <__aeabi_dadd+0x1dc>
   205b8:	2d00      	cmp	r5, #0
   205ba:	d16e      	bne.n	2069a <__aeabi_dadd+0x312>
   205bc:	1c70      	adds	r0, r6, #1
   205be:	0540      	lsls	r0, r0, #21
   205c0:	0d40      	lsrs	r0, r0, #21
   205c2:	2801      	cmp	r0, #1
   205c4:	dc00      	bgt.n	205c8 <__aeabi_dadd+0x240>
   205c6:	e0f9      	b.n	207bc <__aeabi_dadd+0x434>
   205c8:	1ab8      	subs	r0, r7, r2
   205ca:	4684      	mov	ip, r0
   205cc:	4287      	cmp	r7, r0
   205ce:	4180      	sbcs	r0, r0
   205d0:	1ae5      	subs	r5, r4, r3
   205d2:	4240      	negs	r0, r0
   205d4:	1a2d      	subs	r5, r5, r0
   205d6:	0228      	lsls	r0, r5, #8
   205d8:	d400      	bmi.n	205dc <__aeabi_dadd+0x254>
   205da:	e089      	b.n	206f0 <__aeabi_dadd+0x368>
   205dc:	1bd7      	subs	r7, r2, r7
   205de:	42ba      	cmp	r2, r7
   205e0:	4192      	sbcs	r2, r2
   205e2:	1b1c      	subs	r4, r3, r4
   205e4:	4252      	negs	r2, r2
   205e6:	1aa5      	subs	r5, r4, r2
   205e8:	46d8      	mov	r8, fp
   205ea:	e729      	b.n	20440 <__aeabi_dadd+0xb8>
   205ec:	4645      	mov	r5, r8
   205ee:	2400      	movs	r4, #0
   205f0:	2700      	movs	r7, #0
   205f2:	e76a      	b.n	204ca <__aeabi_dadd+0x142>
   205f4:	4c45      	ldr	r4, [pc, #276]	; (2070c <__aeabi_dadd+0x384>)
   205f6:	1af6      	subs	r6, r6, r3
   205f8:	402c      	ands	r4, r5
   205fa:	e749      	b.n	20490 <__aeabi_dadd+0x108>
   205fc:	003d      	movs	r5, r7
   205fe:	3828      	subs	r0, #40	; 0x28
   20600:	4085      	lsls	r5, r0
   20602:	2700      	movs	r7, #0
   20604:	e72e      	b.n	20464 <__aeabi_dadd+0xdc>
   20606:	0038      	movs	r0, r7
   20608:	f001 fb3e 	bl	21c88 <__clzsi2>
   2060c:	3020      	adds	r0, #32
   2060e:	e71d      	b.n	2044c <__aeabi_dadd+0xc4>
   20610:	430a      	orrs	r2, r1
   20612:	1e51      	subs	r1, r2, #1
   20614:	418a      	sbcs	r2, r1
   20616:	2100      	movs	r1, #0
   20618:	e707      	b.n	2042a <__aeabi_dadd+0xa2>
   2061a:	2b00      	cmp	r3, #0
   2061c:	d000      	beq.n	20620 <__aeabi_dadd+0x298>
   2061e:	e0f3      	b.n	20808 <__aeabi_dadd+0x480>
   20620:	1c70      	adds	r0, r6, #1
   20622:	0543      	lsls	r3, r0, #21
   20624:	0d5b      	lsrs	r3, r3, #21
   20626:	2b01      	cmp	r3, #1
   20628:	dc00      	bgt.n	2062c <__aeabi_dadd+0x2a4>
   2062a:	e0ad      	b.n	20788 <__aeabi_dadd+0x400>
   2062c:	4b36      	ldr	r3, [pc, #216]	; (20708 <__aeabi_dadd+0x380>)
   2062e:	4298      	cmp	r0, r3
   20630:	d100      	bne.n	20634 <__aeabi_dadd+0x2ac>
   20632:	e0d1      	b.n	207d8 <__aeabi_dadd+0x450>
   20634:	18ba      	adds	r2, r7, r2
   20636:	42ba      	cmp	r2, r7
   20638:	41bf      	sbcs	r7, r7
   2063a:	1864      	adds	r4, r4, r1
   2063c:	427f      	negs	r7, r7
   2063e:	19e4      	adds	r4, r4, r7
   20640:	07e7      	lsls	r7, r4, #31
   20642:	0852      	lsrs	r2, r2, #1
   20644:	4317      	orrs	r7, r2
   20646:	0864      	lsrs	r4, r4, #1
   20648:	0006      	movs	r6, r0
   2064a:	e721      	b.n	20490 <__aeabi_dadd+0x108>
   2064c:	482e      	ldr	r0, [pc, #184]	; (20708 <__aeabi_dadd+0x380>)
   2064e:	4285      	cmp	r5, r0
   20650:	d100      	bne.n	20654 <__aeabi_dadd+0x2cc>
   20652:	e093      	b.n	2077c <__aeabi_dadd+0x3f4>
   20654:	001d      	movs	r5, r3
   20656:	e6d0      	b.n	203fa <__aeabi_dadd+0x72>
   20658:	0029      	movs	r1, r5
   2065a:	3e1f      	subs	r6, #31
   2065c:	40f1      	lsrs	r1, r6
   2065e:	2b20      	cmp	r3, #32
   20660:	d100      	bne.n	20664 <__aeabi_dadd+0x2dc>
   20662:	e08d      	b.n	20780 <__aeabi_dadd+0x3f8>
   20664:	2240      	movs	r2, #64	; 0x40
   20666:	1ad3      	subs	r3, r2, r3
   20668:	409d      	lsls	r5, r3
   2066a:	432f      	orrs	r7, r5
   2066c:	1e7d      	subs	r5, r7, #1
   2066e:	41af      	sbcs	r7, r5
   20670:	2400      	movs	r4, #0
   20672:	430f      	orrs	r7, r1
   20674:	2600      	movs	r6, #0
   20676:	e744      	b.n	20502 <__aeabi_dadd+0x17a>
   20678:	002b      	movs	r3, r5
   2067a:	0008      	movs	r0, r1
   2067c:	3b20      	subs	r3, #32
   2067e:	40d8      	lsrs	r0, r3
   20680:	0003      	movs	r3, r0
   20682:	2d20      	cmp	r5, #32
   20684:	d100      	bne.n	20688 <__aeabi_dadd+0x300>
   20686:	e07d      	b.n	20784 <__aeabi_dadd+0x3fc>
   20688:	2040      	movs	r0, #64	; 0x40
   2068a:	1b45      	subs	r5, r0, r5
   2068c:	40a9      	lsls	r1, r5
   2068e:	430a      	orrs	r2, r1
   20690:	1e51      	subs	r1, r2, #1
   20692:	418a      	sbcs	r2, r1
   20694:	2100      	movs	r1, #0
   20696:	431a      	orrs	r2, r3
   20698:	e6c7      	b.n	2042a <__aeabi_dadd+0xa2>
   2069a:	2e00      	cmp	r6, #0
   2069c:	d050      	beq.n	20740 <__aeabi_dadd+0x3b8>
   2069e:	4e1a      	ldr	r6, [pc, #104]	; (20708 <__aeabi_dadd+0x380>)
   206a0:	42b0      	cmp	r0, r6
   206a2:	d057      	beq.n	20754 <__aeabi_dadd+0x3cc>
   206a4:	2680      	movs	r6, #128	; 0x80
   206a6:	426b      	negs	r3, r5
   206a8:	4699      	mov	r9, r3
   206aa:	0436      	lsls	r6, r6, #16
   206ac:	4334      	orrs	r4, r6
   206ae:	464b      	mov	r3, r9
   206b0:	2b38      	cmp	r3, #56	; 0x38
   206b2:	dd00      	ble.n	206b6 <__aeabi_dadd+0x32e>
   206b4:	e0d6      	b.n	20864 <__aeabi_dadd+0x4dc>
   206b6:	2b1f      	cmp	r3, #31
   206b8:	dd00      	ble.n	206bc <__aeabi_dadd+0x334>
   206ba:	e135      	b.n	20928 <__aeabi_dadd+0x5a0>
   206bc:	2620      	movs	r6, #32
   206be:	1af5      	subs	r5, r6, r3
   206c0:	0026      	movs	r6, r4
   206c2:	40ae      	lsls	r6, r5
   206c4:	46b2      	mov	sl, r6
   206c6:	003e      	movs	r6, r7
   206c8:	40de      	lsrs	r6, r3
   206ca:	46ac      	mov	ip, r5
   206cc:	0035      	movs	r5, r6
   206ce:	4656      	mov	r6, sl
   206d0:	432e      	orrs	r6, r5
   206d2:	4665      	mov	r5, ip
   206d4:	40af      	lsls	r7, r5
   206d6:	1e7d      	subs	r5, r7, #1
   206d8:	41af      	sbcs	r7, r5
   206da:	40dc      	lsrs	r4, r3
   206dc:	4337      	orrs	r7, r6
   206de:	1bd7      	subs	r7, r2, r7
   206e0:	42ba      	cmp	r2, r7
   206e2:	4192      	sbcs	r2, r2
   206e4:	1b0c      	subs	r4, r1, r4
   206e6:	4252      	negs	r2, r2
   206e8:	1aa4      	subs	r4, r4, r2
   206ea:	0006      	movs	r6, r0
   206ec:	46d8      	mov	r8, fp
   206ee:	e6a3      	b.n	20438 <__aeabi_dadd+0xb0>
   206f0:	4664      	mov	r4, ip
   206f2:	4667      	mov	r7, ip
   206f4:	432c      	orrs	r4, r5
   206f6:	d000      	beq.n	206fa <__aeabi_dadd+0x372>
   206f8:	e6a2      	b.n	20440 <__aeabi_dadd+0xb8>
   206fa:	2500      	movs	r5, #0
   206fc:	2600      	movs	r6, #0
   206fe:	2700      	movs	r7, #0
   20700:	e706      	b.n	20510 <__aeabi_dadd+0x188>
   20702:	001e      	movs	r6, r3
   20704:	e6c4      	b.n	20490 <__aeabi_dadd+0x108>
   20706:	46c0      	nop			; (mov r8, r8)
   20708:	000007ff 	.word	0x000007ff
   2070c:	ff7fffff 	.word	0xff7fffff
   20710:	800fffff 	.word	0x800fffff
   20714:	2b1f      	cmp	r3, #31
   20716:	dc63      	bgt.n	207e0 <__aeabi_dadd+0x458>
   20718:	2020      	movs	r0, #32
   2071a:	1ac3      	subs	r3, r0, r3
   2071c:	0008      	movs	r0, r1
   2071e:	4098      	lsls	r0, r3
   20720:	469c      	mov	ip, r3
   20722:	4683      	mov	fp, r0
   20724:	4653      	mov	r3, sl
   20726:	0010      	movs	r0, r2
   20728:	40d8      	lsrs	r0, r3
   2072a:	0003      	movs	r3, r0
   2072c:	4658      	mov	r0, fp
   2072e:	4318      	orrs	r0, r3
   20730:	4663      	mov	r3, ip
   20732:	409a      	lsls	r2, r3
   20734:	1e53      	subs	r3, r2, #1
   20736:	419a      	sbcs	r2, r3
   20738:	4653      	mov	r3, sl
   2073a:	4302      	orrs	r2, r0
   2073c:	40d9      	lsrs	r1, r3
   2073e:	e703      	b.n	20548 <__aeabi_dadd+0x1c0>
   20740:	0026      	movs	r6, r4
   20742:	433e      	orrs	r6, r7
   20744:	d006      	beq.n	20754 <__aeabi_dadd+0x3cc>
   20746:	43eb      	mvns	r3, r5
   20748:	4699      	mov	r9, r3
   2074a:	2b00      	cmp	r3, #0
   2074c:	d0c7      	beq.n	206de <__aeabi_dadd+0x356>
   2074e:	4e94      	ldr	r6, [pc, #592]	; (209a0 <__aeabi_dadd+0x618>)
   20750:	42b0      	cmp	r0, r6
   20752:	d1ac      	bne.n	206ae <__aeabi_dadd+0x326>
   20754:	000c      	movs	r4, r1
   20756:	0017      	movs	r7, r2
   20758:	0006      	movs	r6, r0
   2075a:	46d8      	mov	r8, fp
   2075c:	e698      	b.n	20490 <__aeabi_dadd+0x108>
   2075e:	4b90      	ldr	r3, [pc, #576]	; (209a0 <__aeabi_dadd+0x618>)
   20760:	459a      	cmp	sl, r3
   20762:	d00b      	beq.n	2077c <__aeabi_dadd+0x3f4>
   20764:	4682      	mov	sl, r0
   20766:	e6e7      	b.n	20538 <__aeabi_dadd+0x1b0>
   20768:	2800      	cmp	r0, #0
   2076a:	d000      	beq.n	2076e <__aeabi_dadd+0x3e6>
   2076c:	e09e      	b.n	208ac <__aeabi_dadd+0x524>
   2076e:	0018      	movs	r0, r3
   20770:	4310      	orrs	r0, r2
   20772:	d100      	bne.n	20776 <__aeabi_dadd+0x3ee>
   20774:	e0e9      	b.n	2094a <__aeabi_dadd+0x5c2>
   20776:	001c      	movs	r4, r3
   20778:	0017      	movs	r7, r2
   2077a:	46d8      	mov	r8, fp
   2077c:	4e88      	ldr	r6, [pc, #544]	; (209a0 <__aeabi_dadd+0x618>)
   2077e:	e687      	b.n	20490 <__aeabi_dadd+0x108>
   20780:	2500      	movs	r5, #0
   20782:	e772      	b.n	2066a <__aeabi_dadd+0x2e2>
   20784:	2100      	movs	r1, #0
   20786:	e782      	b.n	2068e <__aeabi_dadd+0x306>
   20788:	0023      	movs	r3, r4
   2078a:	433b      	orrs	r3, r7
   2078c:	2e00      	cmp	r6, #0
   2078e:	d000      	beq.n	20792 <__aeabi_dadd+0x40a>
   20790:	e0ab      	b.n	208ea <__aeabi_dadd+0x562>
   20792:	2b00      	cmp	r3, #0
   20794:	d100      	bne.n	20798 <__aeabi_dadd+0x410>
   20796:	e0e7      	b.n	20968 <__aeabi_dadd+0x5e0>
   20798:	000b      	movs	r3, r1
   2079a:	4313      	orrs	r3, r2
   2079c:	d100      	bne.n	207a0 <__aeabi_dadd+0x418>
   2079e:	e677      	b.n	20490 <__aeabi_dadd+0x108>
   207a0:	18ba      	adds	r2, r7, r2
   207a2:	42ba      	cmp	r2, r7
   207a4:	41bf      	sbcs	r7, r7
   207a6:	1864      	adds	r4, r4, r1
   207a8:	427f      	negs	r7, r7
   207aa:	19e4      	adds	r4, r4, r7
   207ac:	0223      	lsls	r3, r4, #8
   207ae:	d400      	bmi.n	207b2 <__aeabi_dadd+0x42a>
   207b0:	e0f2      	b.n	20998 <__aeabi_dadd+0x610>
   207b2:	4b7c      	ldr	r3, [pc, #496]	; (209a4 <__aeabi_dadd+0x61c>)
   207b4:	0017      	movs	r7, r2
   207b6:	401c      	ands	r4, r3
   207b8:	0006      	movs	r6, r0
   207ba:	e669      	b.n	20490 <__aeabi_dadd+0x108>
   207bc:	0020      	movs	r0, r4
   207be:	4338      	orrs	r0, r7
   207c0:	2e00      	cmp	r6, #0
   207c2:	d1d1      	bne.n	20768 <__aeabi_dadd+0x3e0>
   207c4:	2800      	cmp	r0, #0
   207c6:	d15b      	bne.n	20880 <__aeabi_dadd+0x4f8>
   207c8:	001c      	movs	r4, r3
   207ca:	4314      	orrs	r4, r2
   207cc:	d100      	bne.n	207d0 <__aeabi_dadd+0x448>
   207ce:	e0a8      	b.n	20922 <__aeabi_dadd+0x59a>
   207d0:	001c      	movs	r4, r3
   207d2:	0017      	movs	r7, r2
   207d4:	46d8      	mov	r8, fp
   207d6:	e65b      	b.n	20490 <__aeabi_dadd+0x108>
   207d8:	0006      	movs	r6, r0
   207da:	2400      	movs	r4, #0
   207dc:	2700      	movs	r7, #0
   207de:	e697      	b.n	20510 <__aeabi_dadd+0x188>
   207e0:	4650      	mov	r0, sl
   207e2:	000b      	movs	r3, r1
   207e4:	3820      	subs	r0, #32
   207e6:	40c3      	lsrs	r3, r0
   207e8:	4699      	mov	r9, r3
   207ea:	4653      	mov	r3, sl
   207ec:	2b20      	cmp	r3, #32
   207ee:	d100      	bne.n	207f2 <__aeabi_dadd+0x46a>
   207f0:	e095      	b.n	2091e <__aeabi_dadd+0x596>
   207f2:	2340      	movs	r3, #64	; 0x40
   207f4:	4650      	mov	r0, sl
   207f6:	1a1b      	subs	r3, r3, r0
   207f8:	4099      	lsls	r1, r3
   207fa:	430a      	orrs	r2, r1
   207fc:	1e51      	subs	r1, r2, #1
   207fe:	418a      	sbcs	r2, r1
   20800:	464b      	mov	r3, r9
   20802:	2100      	movs	r1, #0
   20804:	431a      	orrs	r2, r3
   20806:	e69f      	b.n	20548 <__aeabi_dadd+0x1c0>
   20808:	2e00      	cmp	r6, #0
   2080a:	d130      	bne.n	2086e <__aeabi_dadd+0x4e6>
   2080c:	0026      	movs	r6, r4
   2080e:	433e      	orrs	r6, r7
   20810:	d067      	beq.n	208e2 <__aeabi_dadd+0x55a>
   20812:	43db      	mvns	r3, r3
   20814:	469a      	mov	sl, r3
   20816:	2b00      	cmp	r3, #0
   20818:	d01c      	beq.n	20854 <__aeabi_dadd+0x4cc>
   2081a:	4e61      	ldr	r6, [pc, #388]	; (209a0 <__aeabi_dadd+0x618>)
   2081c:	42b0      	cmp	r0, r6
   2081e:	d060      	beq.n	208e2 <__aeabi_dadd+0x55a>
   20820:	4653      	mov	r3, sl
   20822:	2b38      	cmp	r3, #56	; 0x38
   20824:	dd00      	ble.n	20828 <__aeabi_dadd+0x4a0>
   20826:	e096      	b.n	20956 <__aeabi_dadd+0x5ce>
   20828:	2b1f      	cmp	r3, #31
   2082a:	dd00      	ble.n	2082e <__aeabi_dadd+0x4a6>
   2082c:	e09f      	b.n	2096e <__aeabi_dadd+0x5e6>
   2082e:	2620      	movs	r6, #32
   20830:	1af3      	subs	r3, r6, r3
   20832:	0026      	movs	r6, r4
   20834:	409e      	lsls	r6, r3
   20836:	469c      	mov	ip, r3
   20838:	46b3      	mov	fp, r6
   2083a:	4653      	mov	r3, sl
   2083c:	003e      	movs	r6, r7
   2083e:	40de      	lsrs	r6, r3
   20840:	0033      	movs	r3, r6
   20842:	465e      	mov	r6, fp
   20844:	431e      	orrs	r6, r3
   20846:	4663      	mov	r3, ip
   20848:	409f      	lsls	r7, r3
   2084a:	1e7b      	subs	r3, r7, #1
   2084c:	419f      	sbcs	r7, r3
   2084e:	4653      	mov	r3, sl
   20850:	40dc      	lsrs	r4, r3
   20852:	4337      	orrs	r7, r6
   20854:	18bf      	adds	r7, r7, r2
   20856:	4297      	cmp	r7, r2
   20858:	4192      	sbcs	r2, r2
   2085a:	1864      	adds	r4, r4, r1
   2085c:	4252      	negs	r2, r2
   2085e:	18a4      	adds	r4, r4, r2
   20860:	0006      	movs	r6, r0
   20862:	e678      	b.n	20556 <__aeabi_dadd+0x1ce>
   20864:	4327      	orrs	r7, r4
   20866:	1e7c      	subs	r4, r7, #1
   20868:	41a7      	sbcs	r7, r4
   2086a:	2400      	movs	r4, #0
   2086c:	e737      	b.n	206de <__aeabi_dadd+0x356>
   2086e:	4e4c      	ldr	r6, [pc, #304]	; (209a0 <__aeabi_dadd+0x618>)
   20870:	42b0      	cmp	r0, r6
   20872:	d036      	beq.n	208e2 <__aeabi_dadd+0x55a>
   20874:	2680      	movs	r6, #128	; 0x80
   20876:	425b      	negs	r3, r3
   20878:	0436      	lsls	r6, r6, #16
   2087a:	469a      	mov	sl, r3
   2087c:	4334      	orrs	r4, r6
   2087e:	e7cf      	b.n	20820 <__aeabi_dadd+0x498>
   20880:	0018      	movs	r0, r3
   20882:	4310      	orrs	r0, r2
   20884:	d100      	bne.n	20888 <__aeabi_dadd+0x500>
   20886:	e603      	b.n	20490 <__aeabi_dadd+0x108>
   20888:	1ab8      	subs	r0, r7, r2
   2088a:	4684      	mov	ip, r0
   2088c:	4567      	cmp	r7, ip
   2088e:	41ad      	sbcs	r5, r5
   20890:	1ae0      	subs	r0, r4, r3
   20892:	426d      	negs	r5, r5
   20894:	1b40      	subs	r0, r0, r5
   20896:	0205      	lsls	r5, r0, #8
   20898:	d400      	bmi.n	2089c <__aeabi_dadd+0x514>
   2089a:	e62c      	b.n	204f6 <__aeabi_dadd+0x16e>
   2089c:	1bd7      	subs	r7, r2, r7
   2089e:	42ba      	cmp	r2, r7
   208a0:	4192      	sbcs	r2, r2
   208a2:	1b1c      	subs	r4, r3, r4
   208a4:	4252      	negs	r2, r2
   208a6:	1aa4      	subs	r4, r4, r2
   208a8:	46d8      	mov	r8, fp
   208aa:	e5f1      	b.n	20490 <__aeabi_dadd+0x108>
   208ac:	0018      	movs	r0, r3
   208ae:	4310      	orrs	r0, r2
   208b0:	d100      	bne.n	208b4 <__aeabi_dadd+0x52c>
   208b2:	e763      	b.n	2077c <__aeabi_dadd+0x3f4>
   208b4:	08f8      	lsrs	r0, r7, #3
   208b6:	0767      	lsls	r7, r4, #29
   208b8:	4307      	orrs	r7, r0
   208ba:	2080      	movs	r0, #128	; 0x80
   208bc:	08e4      	lsrs	r4, r4, #3
   208be:	0300      	lsls	r0, r0, #12
   208c0:	4204      	tst	r4, r0
   208c2:	d008      	beq.n	208d6 <__aeabi_dadd+0x54e>
   208c4:	08dd      	lsrs	r5, r3, #3
   208c6:	4205      	tst	r5, r0
   208c8:	d105      	bne.n	208d6 <__aeabi_dadd+0x54e>
   208ca:	08d2      	lsrs	r2, r2, #3
   208cc:	0759      	lsls	r1, r3, #29
   208ce:	4311      	orrs	r1, r2
   208d0:	000f      	movs	r7, r1
   208d2:	002c      	movs	r4, r5
   208d4:	46d8      	mov	r8, fp
   208d6:	0f7b      	lsrs	r3, r7, #29
   208d8:	00e4      	lsls	r4, r4, #3
   208da:	431c      	orrs	r4, r3
   208dc:	00ff      	lsls	r7, r7, #3
   208de:	4e30      	ldr	r6, [pc, #192]	; (209a0 <__aeabi_dadd+0x618>)
   208e0:	e5d6      	b.n	20490 <__aeabi_dadd+0x108>
   208e2:	000c      	movs	r4, r1
   208e4:	0017      	movs	r7, r2
   208e6:	0006      	movs	r6, r0
   208e8:	e5d2      	b.n	20490 <__aeabi_dadd+0x108>
   208ea:	2b00      	cmp	r3, #0
   208ec:	d038      	beq.n	20960 <__aeabi_dadd+0x5d8>
   208ee:	000b      	movs	r3, r1
   208f0:	4313      	orrs	r3, r2
   208f2:	d100      	bne.n	208f6 <__aeabi_dadd+0x56e>
   208f4:	e742      	b.n	2077c <__aeabi_dadd+0x3f4>
   208f6:	08f8      	lsrs	r0, r7, #3
   208f8:	0767      	lsls	r7, r4, #29
   208fa:	4307      	orrs	r7, r0
   208fc:	2080      	movs	r0, #128	; 0x80
   208fe:	08e4      	lsrs	r4, r4, #3
   20900:	0300      	lsls	r0, r0, #12
   20902:	4204      	tst	r4, r0
   20904:	d0e7      	beq.n	208d6 <__aeabi_dadd+0x54e>
   20906:	08cb      	lsrs	r3, r1, #3
   20908:	4203      	tst	r3, r0
   2090a:	d1e4      	bne.n	208d6 <__aeabi_dadd+0x54e>
   2090c:	08d2      	lsrs	r2, r2, #3
   2090e:	0749      	lsls	r1, r1, #29
   20910:	4311      	orrs	r1, r2
   20912:	000f      	movs	r7, r1
   20914:	001c      	movs	r4, r3
   20916:	e7de      	b.n	208d6 <__aeabi_dadd+0x54e>
   20918:	2700      	movs	r7, #0
   2091a:	2400      	movs	r4, #0
   2091c:	e5d5      	b.n	204ca <__aeabi_dadd+0x142>
   2091e:	2100      	movs	r1, #0
   20920:	e76b      	b.n	207fa <__aeabi_dadd+0x472>
   20922:	2500      	movs	r5, #0
   20924:	2700      	movs	r7, #0
   20926:	e5f3      	b.n	20510 <__aeabi_dadd+0x188>
   20928:	464e      	mov	r6, r9
   2092a:	0025      	movs	r5, r4
   2092c:	3e20      	subs	r6, #32
   2092e:	40f5      	lsrs	r5, r6
   20930:	464b      	mov	r3, r9
   20932:	002e      	movs	r6, r5
   20934:	2b20      	cmp	r3, #32
   20936:	d02d      	beq.n	20994 <__aeabi_dadd+0x60c>
   20938:	2540      	movs	r5, #64	; 0x40
   2093a:	1aed      	subs	r5, r5, r3
   2093c:	40ac      	lsls	r4, r5
   2093e:	4327      	orrs	r7, r4
   20940:	1e7c      	subs	r4, r7, #1
   20942:	41a7      	sbcs	r7, r4
   20944:	2400      	movs	r4, #0
   20946:	4337      	orrs	r7, r6
   20948:	e6c9      	b.n	206de <__aeabi_dadd+0x356>
   2094a:	2480      	movs	r4, #128	; 0x80
   2094c:	2500      	movs	r5, #0
   2094e:	0324      	lsls	r4, r4, #12
   20950:	4e13      	ldr	r6, [pc, #76]	; (209a0 <__aeabi_dadd+0x618>)
   20952:	2700      	movs	r7, #0
   20954:	e5dc      	b.n	20510 <__aeabi_dadd+0x188>
   20956:	4327      	orrs	r7, r4
   20958:	1e7c      	subs	r4, r7, #1
   2095a:	41a7      	sbcs	r7, r4
   2095c:	2400      	movs	r4, #0
   2095e:	e779      	b.n	20854 <__aeabi_dadd+0x4cc>
   20960:	000c      	movs	r4, r1
   20962:	0017      	movs	r7, r2
   20964:	4e0e      	ldr	r6, [pc, #56]	; (209a0 <__aeabi_dadd+0x618>)
   20966:	e593      	b.n	20490 <__aeabi_dadd+0x108>
   20968:	000c      	movs	r4, r1
   2096a:	0017      	movs	r7, r2
   2096c:	e590      	b.n	20490 <__aeabi_dadd+0x108>
   2096e:	4656      	mov	r6, sl
   20970:	0023      	movs	r3, r4
   20972:	3e20      	subs	r6, #32
   20974:	40f3      	lsrs	r3, r6
   20976:	4699      	mov	r9, r3
   20978:	4653      	mov	r3, sl
   2097a:	2b20      	cmp	r3, #32
   2097c:	d00e      	beq.n	2099c <__aeabi_dadd+0x614>
   2097e:	2340      	movs	r3, #64	; 0x40
   20980:	4656      	mov	r6, sl
   20982:	1b9b      	subs	r3, r3, r6
   20984:	409c      	lsls	r4, r3
   20986:	4327      	orrs	r7, r4
   20988:	1e7c      	subs	r4, r7, #1
   2098a:	41a7      	sbcs	r7, r4
   2098c:	464b      	mov	r3, r9
   2098e:	2400      	movs	r4, #0
   20990:	431f      	orrs	r7, r3
   20992:	e75f      	b.n	20854 <__aeabi_dadd+0x4cc>
   20994:	2400      	movs	r4, #0
   20996:	e7d2      	b.n	2093e <__aeabi_dadd+0x5b6>
   20998:	0017      	movs	r7, r2
   2099a:	e5b2      	b.n	20502 <__aeabi_dadd+0x17a>
   2099c:	2400      	movs	r4, #0
   2099e:	e7f2      	b.n	20986 <__aeabi_dadd+0x5fe>
   209a0:	000007ff 	.word	0x000007ff
   209a4:	ff7fffff 	.word	0xff7fffff

000209a8 <__aeabi_ddiv>:
   209a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   209aa:	4657      	mov	r7, sl
   209ac:	4645      	mov	r5, r8
   209ae:	46de      	mov	lr, fp
   209b0:	464e      	mov	r6, r9
   209b2:	b5e0      	push	{r5, r6, r7, lr}
   209b4:	004c      	lsls	r4, r1, #1
   209b6:	030e      	lsls	r6, r1, #12
   209b8:	b087      	sub	sp, #28
   209ba:	4683      	mov	fp, r0
   209bc:	4692      	mov	sl, r2
   209be:	001d      	movs	r5, r3
   209c0:	4680      	mov	r8, r0
   209c2:	0b36      	lsrs	r6, r6, #12
   209c4:	0d64      	lsrs	r4, r4, #21
   209c6:	0fcf      	lsrs	r7, r1, #31
   209c8:	2c00      	cmp	r4, #0
   209ca:	d04f      	beq.n	20a6c <__aeabi_ddiv+0xc4>
   209cc:	4b6f      	ldr	r3, [pc, #444]	; (20b8c <__aeabi_ddiv+0x1e4>)
   209ce:	429c      	cmp	r4, r3
   209d0:	d035      	beq.n	20a3e <__aeabi_ddiv+0x96>
   209d2:	2380      	movs	r3, #128	; 0x80
   209d4:	0f42      	lsrs	r2, r0, #29
   209d6:	041b      	lsls	r3, r3, #16
   209d8:	00f6      	lsls	r6, r6, #3
   209da:	4313      	orrs	r3, r2
   209dc:	4333      	orrs	r3, r6
   209de:	4699      	mov	r9, r3
   209e0:	00c3      	lsls	r3, r0, #3
   209e2:	4698      	mov	r8, r3
   209e4:	4b6a      	ldr	r3, [pc, #424]	; (20b90 <__aeabi_ddiv+0x1e8>)
   209e6:	2600      	movs	r6, #0
   209e8:	469c      	mov	ip, r3
   209ea:	2300      	movs	r3, #0
   209ec:	4464      	add	r4, ip
   209ee:	9303      	str	r3, [sp, #12]
   209f0:	032b      	lsls	r3, r5, #12
   209f2:	0b1b      	lsrs	r3, r3, #12
   209f4:	469b      	mov	fp, r3
   209f6:	006b      	lsls	r3, r5, #1
   209f8:	0fed      	lsrs	r5, r5, #31
   209fa:	4650      	mov	r0, sl
   209fc:	0d5b      	lsrs	r3, r3, #21
   209fe:	9501      	str	r5, [sp, #4]
   20a00:	d05e      	beq.n	20ac0 <__aeabi_ddiv+0x118>
   20a02:	4a62      	ldr	r2, [pc, #392]	; (20b8c <__aeabi_ddiv+0x1e4>)
   20a04:	4293      	cmp	r3, r2
   20a06:	d053      	beq.n	20ab0 <__aeabi_ddiv+0x108>
   20a08:	465a      	mov	r2, fp
   20a0a:	00d1      	lsls	r1, r2, #3
   20a0c:	2280      	movs	r2, #128	; 0x80
   20a0e:	0f40      	lsrs	r0, r0, #29
   20a10:	0412      	lsls	r2, r2, #16
   20a12:	4302      	orrs	r2, r0
   20a14:	430a      	orrs	r2, r1
   20a16:	4693      	mov	fp, r2
   20a18:	4652      	mov	r2, sl
   20a1a:	00d1      	lsls	r1, r2, #3
   20a1c:	4a5c      	ldr	r2, [pc, #368]	; (20b90 <__aeabi_ddiv+0x1e8>)
   20a1e:	4694      	mov	ip, r2
   20a20:	2200      	movs	r2, #0
   20a22:	4463      	add	r3, ip
   20a24:	0038      	movs	r0, r7
   20a26:	4068      	eors	r0, r5
   20a28:	4684      	mov	ip, r0
   20a2a:	9002      	str	r0, [sp, #8]
   20a2c:	1ae4      	subs	r4, r4, r3
   20a2e:	4316      	orrs	r6, r2
   20a30:	2e0f      	cmp	r6, #15
   20a32:	d900      	bls.n	20a36 <__aeabi_ddiv+0x8e>
   20a34:	e0b4      	b.n	20ba0 <__aeabi_ddiv+0x1f8>
   20a36:	4b57      	ldr	r3, [pc, #348]	; (20b94 <__aeabi_ddiv+0x1ec>)
   20a38:	00b6      	lsls	r6, r6, #2
   20a3a:	599b      	ldr	r3, [r3, r6]
   20a3c:	469f      	mov	pc, r3
   20a3e:	0003      	movs	r3, r0
   20a40:	4333      	orrs	r3, r6
   20a42:	4699      	mov	r9, r3
   20a44:	d16c      	bne.n	20b20 <__aeabi_ddiv+0x178>
   20a46:	2300      	movs	r3, #0
   20a48:	4698      	mov	r8, r3
   20a4a:	3302      	adds	r3, #2
   20a4c:	2608      	movs	r6, #8
   20a4e:	9303      	str	r3, [sp, #12]
   20a50:	e7ce      	b.n	209f0 <__aeabi_ddiv+0x48>
   20a52:	46cb      	mov	fp, r9
   20a54:	4641      	mov	r1, r8
   20a56:	9a03      	ldr	r2, [sp, #12]
   20a58:	9701      	str	r7, [sp, #4]
   20a5a:	2a02      	cmp	r2, #2
   20a5c:	d165      	bne.n	20b2a <__aeabi_ddiv+0x182>
   20a5e:	9b01      	ldr	r3, [sp, #4]
   20a60:	4c4a      	ldr	r4, [pc, #296]	; (20b8c <__aeabi_ddiv+0x1e4>)
   20a62:	469c      	mov	ip, r3
   20a64:	2300      	movs	r3, #0
   20a66:	2200      	movs	r2, #0
   20a68:	4698      	mov	r8, r3
   20a6a:	e06b      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20a6c:	0003      	movs	r3, r0
   20a6e:	4333      	orrs	r3, r6
   20a70:	4699      	mov	r9, r3
   20a72:	d04e      	beq.n	20b12 <__aeabi_ddiv+0x16a>
   20a74:	2e00      	cmp	r6, #0
   20a76:	d100      	bne.n	20a7a <__aeabi_ddiv+0xd2>
   20a78:	e1bc      	b.n	20df4 <__aeabi_ddiv+0x44c>
   20a7a:	0030      	movs	r0, r6
   20a7c:	f001 f904 	bl	21c88 <__clzsi2>
   20a80:	0003      	movs	r3, r0
   20a82:	3b0b      	subs	r3, #11
   20a84:	2b1c      	cmp	r3, #28
   20a86:	dd00      	ble.n	20a8a <__aeabi_ddiv+0xe2>
   20a88:	e1ac      	b.n	20de4 <__aeabi_ddiv+0x43c>
   20a8a:	221d      	movs	r2, #29
   20a8c:	1ad3      	subs	r3, r2, r3
   20a8e:	465a      	mov	r2, fp
   20a90:	0001      	movs	r1, r0
   20a92:	40da      	lsrs	r2, r3
   20a94:	3908      	subs	r1, #8
   20a96:	408e      	lsls	r6, r1
   20a98:	0013      	movs	r3, r2
   20a9a:	4333      	orrs	r3, r6
   20a9c:	4699      	mov	r9, r3
   20a9e:	465b      	mov	r3, fp
   20aa0:	408b      	lsls	r3, r1
   20aa2:	4698      	mov	r8, r3
   20aa4:	2300      	movs	r3, #0
   20aa6:	4c3c      	ldr	r4, [pc, #240]	; (20b98 <__aeabi_ddiv+0x1f0>)
   20aa8:	2600      	movs	r6, #0
   20aaa:	1a24      	subs	r4, r4, r0
   20aac:	9303      	str	r3, [sp, #12]
   20aae:	e79f      	b.n	209f0 <__aeabi_ddiv+0x48>
   20ab0:	4651      	mov	r1, sl
   20ab2:	465a      	mov	r2, fp
   20ab4:	4311      	orrs	r1, r2
   20ab6:	d129      	bne.n	20b0c <__aeabi_ddiv+0x164>
   20ab8:	2200      	movs	r2, #0
   20aba:	4693      	mov	fp, r2
   20abc:	3202      	adds	r2, #2
   20abe:	e7b1      	b.n	20a24 <__aeabi_ddiv+0x7c>
   20ac0:	4659      	mov	r1, fp
   20ac2:	4301      	orrs	r1, r0
   20ac4:	d01e      	beq.n	20b04 <__aeabi_ddiv+0x15c>
   20ac6:	465b      	mov	r3, fp
   20ac8:	2b00      	cmp	r3, #0
   20aca:	d100      	bne.n	20ace <__aeabi_ddiv+0x126>
   20acc:	e19e      	b.n	20e0c <__aeabi_ddiv+0x464>
   20ace:	4658      	mov	r0, fp
   20ad0:	f001 f8da 	bl	21c88 <__clzsi2>
   20ad4:	0003      	movs	r3, r0
   20ad6:	3b0b      	subs	r3, #11
   20ad8:	2b1c      	cmp	r3, #28
   20ada:	dd00      	ble.n	20ade <__aeabi_ddiv+0x136>
   20adc:	e18f      	b.n	20dfe <__aeabi_ddiv+0x456>
   20ade:	0002      	movs	r2, r0
   20ae0:	4659      	mov	r1, fp
   20ae2:	3a08      	subs	r2, #8
   20ae4:	4091      	lsls	r1, r2
   20ae6:	468b      	mov	fp, r1
   20ae8:	211d      	movs	r1, #29
   20aea:	1acb      	subs	r3, r1, r3
   20aec:	4651      	mov	r1, sl
   20aee:	40d9      	lsrs	r1, r3
   20af0:	000b      	movs	r3, r1
   20af2:	4659      	mov	r1, fp
   20af4:	430b      	orrs	r3, r1
   20af6:	4651      	mov	r1, sl
   20af8:	469b      	mov	fp, r3
   20afa:	4091      	lsls	r1, r2
   20afc:	4b26      	ldr	r3, [pc, #152]	; (20b98 <__aeabi_ddiv+0x1f0>)
   20afe:	2200      	movs	r2, #0
   20b00:	1a1b      	subs	r3, r3, r0
   20b02:	e78f      	b.n	20a24 <__aeabi_ddiv+0x7c>
   20b04:	2300      	movs	r3, #0
   20b06:	2201      	movs	r2, #1
   20b08:	469b      	mov	fp, r3
   20b0a:	e78b      	b.n	20a24 <__aeabi_ddiv+0x7c>
   20b0c:	4651      	mov	r1, sl
   20b0e:	2203      	movs	r2, #3
   20b10:	e788      	b.n	20a24 <__aeabi_ddiv+0x7c>
   20b12:	2300      	movs	r3, #0
   20b14:	4698      	mov	r8, r3
   20b16:	3301      	adds	r3, #1
   20b18:	2604      	movs	r6, #4
   20b1a:	2400      	movs	r4, #0
   20b1c:	9303      	str	r3, [sp, #12]
   20b1e:	e767      	b.n	209f0 <__aeabi_ddiv+0x48>
   20b20:	2303      	movs	r3, #3
   20b22:	46b1      	mov	r9, r6
   20b24:	9303      	str	r3, [sp, #12]
   20b26:	260c      	movs	r6, #12
   20b28:	e762      	b.n	209f0 <__aeabi_ddiv+0x48>
   20b2a:	2a03      	cmp	r2, #3
   20b2c:	d100      	bne.n	20b30 <__aeabi_ddiv+0x188>
   20b2e:	e25c      	b.n	20fea <__aeabi_ddiv+0x642>
   20b30:	9b01      	ldr	r3, [sp, #4]
   20b32:	2a01      	cmp	r2, #1
   20b34:	d000      	beq.n	20b38 <__aeabi_ddiv+0x190>
   20b36:	e1e4      	b.n	20f02 <__aeabi_ddiv+0x55a>
   20b38:	4013      	ands	r3, r2
   20b3a:	469c      	mov	ip, r3
   20b3c:	2300      	movs	r3, #0
   20b3e:	2400      	movs	r4, #0
   20b40:	2200      	movs	r2, #0
   20b42:	4698      	mov	r8, r3
   20b44:	2100      	movs	r1, #0
   20b46:	0312      	lsls	r2, r2, #12
   20b48:	0b13      	lsrs	r3, r2, #12
   20b4a:	0d0a      	lsrs	r2, r1, #20
   20b4c:	0512      	lsls	r2, r2, #20
   20b4e:	431a      	orrs	r2, r3
   20b50:	0523      	lsls	r3, r4, #20
   20b52:	4c12      	ldr	r4, [pc, #72]	; (20b9c <__aeabi_ddiv+0x1f4>)
   20b54:	4640      	mov	r0, r8
   20b56:	4022      	ands	r2, r4
   20b58:	4313      	orrs	r3, r2
   20b5a:	4662      	mov	r2, ip
   20b5c:	005b      	lsls	r3, r3, #1
   20b5e:	07d2      	lsls	r2, r2, #31
   20b60:	085b      	lsrs	r3, r3, #1
   20b62:	4313      	orrs	r3, r2
   20b64:	0019      	movs	r1, r3
   20b66:	b007      	add	sp, #28
   20b68:	bc3c      	pop	{r2, r3, r4, r5}
   20b6a:	4690      	mov	r8, r2
   20b6c:	4699      	mov	r9, r3
   20b6e:	46a2      	mov	sl, r4
   20b70:	46ab      	mov	fp, r5
   20b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20b74:	2300      	movs	r3, #0
   20b76:	2280      	movs	r2, #128	; 0x80
   20b78:	469c      	mov	ip, r3
   20b7a:	0312      	lsls	r2, r2, #12
   20b7c:	4698      	mov	r8, r3
   20b7e:	4c03      	ldr	r4, [pc, #12]	; (20b8c <__aeabi_ddiv+0x1e4>)
   20b80:	e7e0      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20b82:	2300      	movs	r3, #0
   20b84:	4c01      	ldr	r4, [pc, #4]	; (20b8c <__aeabi_ddiv+0x1e4>)
   20b86:	2200      	movs	r2, #0
   20b88:	4698      	mov	r8, r3
   20b8a:	e7db      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20b8c:	000007ff 	.word	0x000007ff
   20b90:	fffffc01 	.word	0xfffffc01
   20b94:	000246a0 	.word	0x000246a0
   20b98:	fffffc0d 	.word	0xfffffc0d
   20b9c:	800fffff 	.word	0x800fffff
   20ba0:	45d9      	cmp	r9, fp
   20ba2:	d900      	bls.n	20ba6 <__aeabi_ddiv+0x1fe>
   20ba4:	e139      	b.n	20e1a <__aeabi_ddiv+0x472>
   20ba6:	d100      	bne.n	20baa <__aeabi_ddiv+0x202>
   20ba8:	e134      	b.n	20e14 <__aeabi_ddiv+0x46c>
   20baa:	2300      	movs	r3, #0
   20bac:	4646      	mov	r6, r8
   20bae:	464d      	mov	r5, r9
   20bb0:	469a      	mov	sl, r3
   20bb2:	3c01      	subs	r4, #1
   20bb4:	465b      	mov	r3, fp
   20bb6:	0e0a      	lsrs	r2, r1, #24
   20bb8:	021b      	lsls	r3, r3, #8
   20bba:	431a      	orrs	r2, r3
   20bbc:	020b      	lsls	r3, r1, #8
   20bbe:	0c17      	lsrs	r7, r2, #16
   20bc0:	9303      	str	r3, [sp, #12]
   20bc2:	0413      	lsls	r3, r2, #16
   20bc4:	0c1b      	lsrs	r3, r3, #16
   20bc6:	0039      	movs	r1, r7
   20bc8:	0028      	movs	r0, r5
   20bca:	4690      	mov	r8, r2
   20bcc:	9301      	str	r3, [sp, #4]
   20bce:	f7fe fc1d 	bl	1f40c <__udivsi3>
   20bd2:	0002      	movs	r2, r0
   20bd4:	9b01      	ldr	r3, [sp, #4]
   20bd6:	4683      	mov	fp, r0
   20bd8:	435a      	muls	r2, r3
   20bda:	0028      	movs	r0, r5
   20bdc:	0039      	movs	r1, r7
   20bde:	4691      	mov	r9, r2
   20be0:	f7fe fc9a 	bl	1f518 <__aeabi_uidivmod>
   20be4:	0c35      	lsrs	r5, r6, #16
   20be6:	0409      	lsls	r1, r1, #16
   20be8:	430d      	orrs	r5, r1
   20bea:	45a9      	cmp	r9, r5
   20bec:	d90d      	bls.n	20c0a <__aeabi_ddiv+0x262>
   20bee:	465b      	mov	r3, fp
   20bf0:	4445      	add	r5, r8
   20bf2:	3b01      	subs	r3, #1
   20bf4:	45a8      	cmp	r8, r5
   20bf6:	d900      	bls.n	20bfa <__aeabi_ddiv+0x252>
   20bf8:	e13a      	b.n	20e70 <__aeabi_ddiv+0x4c8>
   20bfa:	45a9      	cmp	r9, r5
   20bfc:	d800      	bhi.n	20c00 <__aeabi_ddiv+0x258>
   20bfe:	e137      	b.n	20e70 <__aeabi_ddiv+0x4c8>
   20c00:	2302      	movs	r3, #2
   20c02:	425b      	negs	r3, r3
   20c04:	469c      	mov	ip, r3
   20c06:	4445      	add	r5, r8
   20c08:	44e3      	add	fp, ip
   20c0a:	464b      	mov	r3, r9
   20c0c:	1aeb      	subs	r3, r5, r3
   20c0e:	0039      	movs	r1, r7
   20c10:	0018      	movs	r0, r3
   20c12:	9304      	str	r3, [sp, #16]
   20c14:	f7fe fbfa 	bl	1f40c <__udivsi3>
   20c18:	9b01      	ldr	r3, [sp, #4]
   20c1a:	0005      	movs	r5, r0
   20c1c:	4343      	muls	r3, r0
   20c1e:	0039      	movs	r1, r7
   20c20:	9804      	ldr	r0, [sp, #16]
   20c22:	4699      	mov	r9, r3
   20c24:	f7fe fc78 	bl	1f518 <__aeabi_uidivmod>
   20c28:	0433      	lsls	r3, r6, #16
   20c2a:	0409      	lsls	r1, r1, #16
   20c2c:	0c1b      	lsrs	r3, r3, #16
   20c2e:	430b      	orrs	r3, r1
   20c30:	4599      	cmp	r9, r3
   20c32:	d909      	bls.n	20c48 <__aeabi_ddiv+0x2a0>
   20c34:	4443      	add	r3, r8
   20c36:	1e6a      	subs	r2, r5, #1
   20c38:	4598      	cmp	r8, r3
   20c3a:	d900      	bls.n	20c3e <__aeabi_ddiv+0x296>
   20c3c:	e11a      	b.n	20e74 <__aeabi_ddiv+0x4cc>
   20c3e:	4599      	cmp	r9, r3
   20c40:	d800      	bhi.n	20c44 <__aeabi_ddiv+0x29c>
   20c42:	e117      	b.n	20e74 <__aeabi_ddiv+0x4cc>
   20c44:	3d02      	subs	r5, #2
   20c46:	4443      	add	r3, r8
   20c48:	464a      	mov	r2, r9
   20c4a:	1a9b      	subs	r3, r3, r2
   20c4c:	465a      	mov	r2, fp
   20c4e:	0412      	lsls	r2, r2, #16
   20c50:	432a      	orrs	r2, r5
   20c52:	9903      	ldr	r1, [sp, #12]
   20c54:	4693      	mov	fp, r2
   20c56:	0c10      	lsrs	r0, r2, #16
   20c58:	0c0a      	lsrs	r2, r1, #16
   20c5a:	4691      	mov	r9, r2
   20c5c:	0409      	lsls	r1, r1, #16
   20c5e:	465a      	mov	r2, fp
   20c60:	0c09      	lsrs	r1, r1, #16
   20c62:	464e      	mov	r6, r9
   20c64:	000d      	movs	r5, r1
   20c66:	0412      	lsls	r2, r2, #16
   20c68:	0c12      	lsrs	r2, r2, #16
   20c6a:	4345      	muls	r5, r0
   20c6c:	9105      	str	r1, [sp, #20]
   20c6e:	4351      	muls	r1, r2
   20c70:	4372      	muls	r2, r6
   20c72:	4370      	muls	r0, r6
   20c74:	1952      	adds	r2, r2, r5
   20c76:	0c0e      	lsrs	r6, r1, #16
   20c78:	18b2      	adds	r2, r6, r2
   20c7a:	4295      	cmp	r5, r2
   20c7c:	d903      	bls.n	20c86 <__aeabi_ddiv+0x2de>
   20c7e:	2580      	movs	r5, #128	; 0x80
   20c80:	026d      	lsls	r5, r5, #9
   20c82:	46ac      	mov	ip, r5
   20c84:	4460      	add	r0, ip
   20c86:	0c15      	lsrs	r5, r2, #16
   20c88:	0409      	lsls	r1, r1, #16
   20c8a:	0412      	lsls	r2, r2, #16
   20c8c:	0c09      	lsrs	r1, r1, #16
   20c8e:	1828      	adds	r0, r5, r0
   20c90:	1852      	adds	r2, r2, r1
   20c92:	4283      	cmp	r3, r0
   20c94:	d200      	bcs.n	20c98 <__aeabi_ddiv+0x2f0>
   20c96:	e0ce      	b.n	20e36 <__aeabi_ddiv+0x48e>
   20c98:	d100      	bne.n	20c9c <__aeabi_ddiv+0x2f4>
   20c9a:	e0c8      	b.n	20e2e <__aeabi_ddiv+0x486>
   20c9c:	1a1d      	subs	r5, r3, r0
   20c9e:	4653      	mov	r3, sl
   20ca0:	1a9e      	subs	r6, r3, r2
   20ca2:	45b2      	cmp	sl, r6
   20ca4:	4192      	sbcs	r2, r2
   20ca6:	4252      	negs	r2, r2
   20ca8:	1aab      	subs	r3, r5, r2
   20caa:	469a      	mov	sl, r3
   20cac:	4598      	cmp	r8, r3
   20cae:	d100      	bne.n	20cb2 <__aeabi_ddiv+0x30a>
   20cb0:	e117      	b.n	20ee2 <__aeabi_ddiv+0x53a>
   20cb2:	0039      	movs	r1, r7
   20cb4:	0018      	movs	r0, r3
   20cb6:	f7fe fba9 	bl	1f40c <__udivsi3>
   20cba:	9b01      	ldr	r3, [sp, #4]
   20cbc:	0005      	movs	r5, r0
   20cbe:	4343      	muls	r3, r0
   20cc0:	0039      	movs	r1, r7
   20cc2:	4650      	mov	r0, sl
   20cc4:	9304      	str	r3, [sp, #16]
   20cc6:	f7fe fc27 	bl	1f518 <__aeabi_uidivmod>
   20cca:	9804      	ldr	r0, [sp, #16]
   20ccc:	040b      	lsls	r3, r1, #16
   20cce:	0c31      	lsrs	r1, r6, #16
   20cd0:	4319      	orrs	r1, r3
   20cd2:	4288      	cmp	r0, r1
   20cd4:	d909      	bls.n	20cea <__aeabi_ddiv+0x342>
   20cd6:	4441      	add	r1, r8
   20cd8:	1e6b      	subs	r3, r5, #1
   20cda:	4588      	cmp	r8, r1
   20cdc:	d900      	bls.n	20ce0 <__aeabi_ddiv+0x338>
   20cde:	e107      	b.n	20ef0 <__aeabi_ddiv+0x548>
   20ce0:	4288      	cmp	r0, r1
   20ce2:	d800      	bhi.n	20ce6 <__aeabi_ddiv+0x33e>
   20ce4:	e104      	b.n	20ef0 <__aeabi_ddiv+0x548>
   20ce6:	3d02      	subs	r5, #2
   20ce8:	4441      	add	r1, r8
   20cea:	9b04      	ldr	r3, [sp, #16]
   20cec:	1acb      	subs	r3, r1, r3
   20cee:	0018      	movs	r0, r3
   20cf0:	0039      	movs	r1, r7
   20cf2:	9304      	str	r3, [sp, #16]
   20cf4:	f7fe fb8a 	bl	1f40c <__udivsi3>
   20cf8:	9b01      	ldr	r3, [sp, #4]
   20cfa:	4682      	mov	sl, r0
   20cfc:	4343      	muls	r3, r0
   20cfe:	0039      	movs	r1, r7
   20d00:	9804      	ldr	r0, [sp, #16]
   20d02:	9301      	str	r3, [sp, #4]
   20d04:	f7fe fc08 	bl	1f518 <__aeabi_uidivmod>
   20d08:	9801      	ldr	r0, [sp, #4]
   20d0a:	040b      	lsls	r3, r1, #16
   20d0c:	0431      	lsls	r1, r6, #16
   20d0e:	0c09      	lsrs	r1, r1, #16
   20d10:	4319      	orrs	r1, r3
   20d12:	4288      	cmp	r0, r1
   20d14:	d90d      	bls.n	20d32 <__aeabi_ddiv+0x38a>
   20d16:	4653      	mov	r3, sl
   20d18:	4441      	add	r1, r8
   20d1a:	3b01      	subs	r3, #1
   20d1c:	4588      	cmp	r8, r1
   20d1e:	d900      	bls.n	20d22 <__aeabi_ddiv+0x37a>
   20d20:	e0e8      	b.n	20ef4 <__aeabi_ddiv+0x54c>
   20d22:	4288      	cmp	r0, r1
   20d24:	d800      	bhi.n	20d28 <__aeabi_ddiv+0x380>
   20d26:	e0e5      	b.n	20ef4 <__aeabi_ddiv+0x54c>
   20d28:	2302      	movs	r3, #2
   20d2a:	425b      	negs	r3, r3
   20d2c:	469c      	mov	ip, r3
   20d2e:	4441      	add	r1, r8
   20d30:	44e2      	add	sl, ip
   20d32:	9b01      	ldr	r3, [sp, #4]
   20d34:	042d      	lsls	r5, r5, #16
   20d36:	1ace      	subs	r6, r1, r3
   20d38:	4651      	mov	r1, sl
   20d3a:	4329      	orrs	r1, r5
   20d3c:	9d05      	ldr	r5, [sp, #20]
   20d3e:	464f      	mov	r7, r9
   20d40:	002a      	movs	r2, r5
   20d42:	040b      	lsls	r3, r1, #16
   20d44:	0c08      	lsrs	r0, r1, #16
   20d46:	0c1b      	lsrs	r3, r3, #16
   20d48:	435a      	muls	r2, r3
   20d4a:	4345      	muls	r5, r0
   20d4c:	437b      	muls	r3, r7
   20d4e:	4378      	muls	r0, r7
   20d50:	195b      	adds	r3, r3, r5
   20d52:	0c17      	lsrs	r7, r2, #16
   20d54:	18fb      	adds	r3, r7, r3
   20d56:	429d      	cmp	r5, r3
   20d58:	d903      	bls.n	20d62 <__aeabi_ddiv+0x3ba>
   20d5a:	2580      	movs	r5, #128	; 0x80
   20d5c:	026d      	lsls	r5, r5, #9
   20d5e:	46ac      	mov	ip, r5
   20d60:	4460      	add	r0, ip
   20d62:	0c1d      	lsrs	r5, r3, #16
   20d64:	0412      	lsls	r2, r2, #16
   20d66:	041b      	lsls	r3, r3, #16
   20d68:	0c12      	lsrs	r2, r2, #16
   20d6a:	1828      	adds	r0, r5, r0
   20d6c:	189b      	adds	r3, r3, r2
   20d6e:	4286      	cmp	r6, r0
   20d70:	d200      	bcs.n	20d74 <__aeabi_ddiv+0x3cc>
   20d72:	e093      	b.n	20e9c <__aeabi_ddiv+0x4f4>
   20d74:	d100      	bne.n	20d78 <__aeabi_ddiv+0x3d0>
   20d76:	e08e      	b.n	20e96 <__aeabi_ddiv+0x4ee>
   20d78:	2301      	movs	r3, #1
   20d7a:	4319      	orrs	r1, r3
   20d7c:	4ba0      	ldr	r3, [pc, #640]	; (21000 <__aeabi_ddiv+0x658>)
   20d7e:	18e3      	adds	r3, r4, r3
   20d80:	2b00      	cmp	r3, #0
   20d82:	dc00      	bgt.n	20d86 <__aeabi_ddiv+0x3de>
   20d84:	e099      	b.n	20eba <__aeabi_ddiv+0x512>
   20d86:	074a      	lsls	r2, r1, #29
   20d88:	d000      	beq.n	20d8c <__aeabi_ddiv+0x3e4>
   20d8a:	e09e      	b.n	20eca <__aeabi_ddiv+0x522>
   20d8c:	465a      	mov	r2, fp
   20d8e:	01d2      	lsls	r2, r2, #7
   20d90:	d506      	bpl.n	20da0 <__aeabi_ddiv+0x3f8>
   20d92:	465a      	mov	r2, fp
   20d94:	4b9b      	ldr	r3, [pc, #620]	; (21004 <__aeabi_ddiv+0x65c>)
   20d96:	401a      	ands	r2, r3
   20d98:	2380      	movs	r3, #128	; 0x80
   20d9a:	4693      	mov	fp, r2
   20d9c:	00db      	lsls	r3, r3, #3
   20d9e:	18e3      	adds	r3, r4, r3
   20da0:	4a99      	ldr	r2, [pc, #612]	; (21008 <__aeabi_ddiv+0x660>)
   20da2:	4293      	cmp	r3, r2
   20da4:	dd68      	ble.n	20e78 <__aeabi_ddiv+0x4d0>
   20da6:	2301      	movs	r3, #1
   20da8:	9a02      	ldr	r2, [sp, #8]
   20daa:	4c98      	ldr	r4, [pc, #608]	; (2100c <__aeabi_ddiv+0x664>)
   20dac:	401a      	ands	r2, r3
   20dae:	2300      	movs	r3, #0
   20db0:	4694      	mov	ip, r2
   20db2:	4698      	mov	r8, r3
   20db4:	2200      	movs	r2, #0
   20db6:	e6c5      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20db8:	2280      	movs	r2, #128	; 0x80
   20dba:	464b      	mov	r3, r9
   20dbc:	0312      	lsls	r2, r2, #12
   20dbe:	4213      	tst	r3, r2
   20dc0:	d00a      	beq.n	20dd8 <__aeabi_ddiv+0x430>
   20dc2:	465b      	mov	r3, fp
   20dc4:	4213      	tst	r3, r2
   20dc6:	d106      	bne.n	20dd6 <__aeabi_ddiv+0x42e>
   20dc8:	431a      	orrs	r2, r3
   20dca:	0312      	lsls	r2, r2, #12
   20dcc:	0b12      	lsrs	r2, r2, #12
   20dce:	46ac      	mov	ip, r5
   20dd0:	4688      	mov	r8, r1
   20dd2:	4c8e      	ldr	r4, [pc, #568]	; (2100c <__aeabi_ddiv+0x664>)
   20dd4:	e6b6      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20dd6:	464b      	mov	r3, r9
   20dd8:	431a      	orrs	r2, r3
   20dda:	0312      	lsls	r2, r2, #12
   20ddc:	0b12      	lsrs	r2, r2, #12
   20dde:	46bc      	mov	ip, r7
   20de0:	4c8a      	ldr	r4, [pc, #552]	; (2100c <__aeabi_ddiv+0x664>)
   20de2:	e6af      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20de4:	0003      	movs	r3, r0
   20de6:	465a      	mov	r2, fp
   20de8:	3b28      	subs	r3, #40	; 0x28
   20dea:	409a      	lsls	r2, r3
   20dec:	2300      	movs	r3, #0
   20dee:	4691      	mov	r9, r2
   20df0:	4698      	mov	r8, r3
   20df2:	e657      	b.n	20aa4 <__aeabi_ddiv+0xfc>
   20df4:	4658      	mov	r0, fp
   20df6:	f000 ff47 	bl	21c88 <__clzsi2>
   20dfa:	3020      	adds	r0, #32
   20dfc:	e640      	b.n	20a80 <__aeabi_ddiv+0xd8>
   20dfe:	0003      	movs	r3, r0
   20e00:	4652      	mov	r2, sl
   20e02:	3b28      	subs	r3, #40	; 0x28
   20e04:	409a      	lsls	r2, r3
   20e06:	2100      	movs	r1, #0
   20e08:	4693      	mov	fp, r2
   20e0a:	e677      	b.n	20afc <__aeabi_ddiv+0x154>
   20e0c:	f000 ff3c 	bl	21c88 <__clzsi2>
   20e10:	3020      	adds	r0, #32
   20e12:	e65f      	b.n	20ad4 <__aeabi_ddiv+0x12c>
   20e14:	4588      	cmp	r8, r1
   20e16:	d200      	bcs.n	20e1a <__aeabi_ddiv+0x472>
   20e18:	e6c7      	b.n	20baa <__aeabi_ddiv+0x202>
   20e1a:	464b      	mov	r3, r9
   20e1c:	07de      	lsls	r6, r3, #31
   20e1e:	085d      	lsrs	r5, r3, #1
   20e20:	4643      	mov	r3, r8
   20e22:	085b      	lsrs	r3, r3, #1
   20e24:	431e      	orrs	r6, r3
   20e26:	4643      	mov	r3, r8
   20e28:	07db      	lsls	r3, r3, #31
   20e2a:	469a      	mov	sl, r3
   20e2c:	e6c2      	b.n	20bb4 <__aeabi_ddiv+0x20c>
   20e2e:	2500      	movs	r5, #0
   20e30:	4592      	cmp	sl, r2
   20e32:	d300      	bcc.n	20e36 <__aeabi_ddiv+0x48e>
   20e34:	e733      	b.n	20c9e <__aeabi_ddiv+0x2f6>
   20e36:	9e03      	ldr	r6, [sp, #12]
   20e38:	4659      	mov	r1, fp
   20e3a:	46b4      	mov	ip, r6
   20e3c:	44e2      	add	sl, ip
   20e3e:	45b2      	cmp	sl, r6
   20e40:	41ad      	sbcs	r5, r5
   20e42:	426d      	negs	r5, r5
   20e44:	4445      	add	r5, r8
   20e46:	18eb      	adds	r3, r5, r3
   20e48:	3901      	subs	r1, #1
   20e4a:	4598      	cmp	r8, r3
   20e4c:	d207      	bcs.n	20e5e <__aeabi_ddiv+0x4b6>
   20e4e:	4298      	cmp	r0, r3
   20e50:	d900      	bls.n	20e54 <__aeabi_ddiv+0x4ac>
   20e52:	e07f      	b.n	20f54 <__aeabi_ddiv+0x5ac>
   20e54:	d100      	bne.n	20e58 <__aeabi_ddiv+0x4b0>
   20e56:	e0bc      	b.n	20fd2 <__aeabi_ddiv+0x62a>
   20e58:	1a1d      	subs	r5, r3, r0
   20e5a:	468b      	mov	fp, r1
   20e5c:	e71f      	b.n	20c9e <__aeabi_ddiv+0x2f6>
   20e5e:	4598      	cmp	r8, r3
   20e60:	d1fa      	bne.n	20e58 <__aeabi_ddiv+0x4b0>
   20e62:	9d03      	ldr	r5, [sp, #12]
   20e64:	4555      	cmp	r5, sl
   20e66:	d9f2      	bls.n	20e4e <__aeabi_ddiv+0x4a6>
   20e68:	4643      	mov	r3, r8
   20e6a:	468b      	mov	fp, r1
   20e6c:	1a1d      	subs	r5, r3, r0
   20e6e:	e716      	b.n	20c9e <__aeabi_ddiv+0x2f6>
   20e70:	469b      	mov	fp, r3
   20e72:	e6ca      	b.n	20c0a <__aeabi_ddiv+0x262>
   20e74:	0015      	movs	r5, r2
   20e76:	e6e7      	b.n	20c48 <__aeabi_ddiv+0x2a0>
   20e78:	465a      	mov	r2, fp
   20e7a:	08c9      	lsrs	r1, r1, #3
   20e7c:	0752      	lsls	r2, r2, #29
   20e7e:	430a      	orrs	r2, r1
   20e80:	055b      	lsls	r3, r3, #21
   20e82:	4690      	mov	r8, r2
   20e84:	0d5c      	lsrs	r4, r3, #21
   20e86:	465a      	mov	r2, fp
   20e88:	2301      	movs	r3, #1
   20e8a:	9902      	ldr	r1, [sp, #8]
   20e8c:	0252      	lsls	r2, r2, #9
   20e8e:	4019      	ands	r1, r3
   20e90:	0b12      	lsrs	r2, r2, #12
   20e92:	468c      	mov	ip, r1
   20e94:	e656      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20e96:	2b00      	cmp	r3, #0
   20e98:	d100      	bne.n	20e9c <__aeabi_ddiv+0x4f4>
   20e9a:	e76f      	b.n	20d7c <__aeabi_ddiv+0x3d4>
   20e9c:	4446      	add	r6, r8
   20e9e:	1e4a      	subs	r2, r1, #1
   20ea0:	45b0      	cmp	r8, r6
   20ea2:	d929      	bls.n	20ef8 <__aeabi_ddiv+0x550>
   20ea4:	0011      	movs	r1, r2
   20ea6:	4286      	cmp	r6, r0
   20ea8:	d000      	beq.n	20eac <__aeabi_ddiv+0x504>
   20eaa:	e765      	b.n	20d78 <__aeabi_ddiv+0x3d0>
   20eac:	9a03      	ldr	r2, [sp, #12]
   20eae:	4293      	cmp	r3, r2
   20eb0:	d000      	beq.n	20eb4 <__aeabi_ddiv+0x50c>
   20eb2:	e761      	b.n	20d78 <__aeabi_ddiv+0x3d0>
   20eb4:	e762      	b.n	20d7c <__aeabi_ddiv+0x3d4>
   20eb6:	2101      	movs	r1, #1
   20eb8:	4249      	negs	r1, r1
   20eba:	2001      	movs	r0, #1
   20ebc:	1ac2      	subs	r2, r0, r3
   20ebe:	2a38      	cmp	r2, #56	; 0x38
   20ec0:	dd21      	ble.n	20f06 <__aeabi_ddiv+0x55e>
   20ec2:	9b02      	ldr	r3, [sp, #8]
   20ec4:	4003      	ands	r3, r0
   20ec6:	469c      	mov	ip, r3
   20ec8:	e638      	b.n	20b3c <__aeabi_ddiv+0x194>
   20eca:	220f      	movs	r2, #15
   20ecc:	400a      	ands	r2, r1
   20ece:	2a04      	cmp	r2, #4
   20ed0:	d100      	bne.n	20ed4 <__aeabi_ddiv+0x52c>
   20ed2:	e75b      	b.n	20d8c <__aeabi_ddiv+0x3e4>
   20ed4:	000a      	movs	r2, r1
   20ed6:	1d11      	adds	r1, r2, #4
   20ed8:	4291      	cmp	r1, r2
   20eda:	4192      	sbcs	r2, r2
   20edc:	4252      	negs	r2, r2
   20ede:	4493      	add	fp, r2
   20ee0:	e754      	b.n	20d8c <__aeabi_ddiv+0x3e4>
   20ee2:	4b47      	ldr	r3, [pc, #284]	; (21000 <__aeabi_ddiv+0x658>)
   20ee4:	18e3      	adds	r3, r4, r3
   20ee6:	2b00      	cmp	r3, #0
   20ee8:	dde5      	ble.n	20eb6 <__aeabi_ddiv+0x50e>
   20eea:	2201      	movs	r2, #1
   20eec:	4252      	negs	r2, r2
   20eee:	e7f2      	b.n	20ed6 <__aeabi_ddiv+0x52e>
   20ef0:	001d      	movs	r5, r3
   20ef2:	e6fa      	b.n	20cea <__aeabi_ddiv+0x342>
   20ef4:	469a      	mov	sl, r3
   20ef6:	e71c      	b.n	20d32 <__aeabi_ddiv+0x38a>
   20ef8:	42b0      	cmp	r0, r6
   20efa:	d839      	bhi.n	20f70 <__aeabi_ddiv+0x5c8>
   20efc:	d06e      	beq.n	20fdc <__aeabi_ddiv+0x634>
   20efe:	0011      	movs	r1, r2
   20f00:	e73a      	b.n	20d78 <__aeabi_ddiv+0x3d0>
   20f02:	9302      	str	r3, [sp, #8]
   20f04:	e73a      	b.n	20d7c <__aeabi_ddiv+0x3d4>
   20f06:	2a1f      	cmp	r2, #31
   20f08:	dc3c      	bgt.n	20f84 <__aeabi_ddiv+0x5dc>
   20f0a:	2320      	movs	r3, #32
   20f0c:	1a9b      	subs	r3, r3, r2
   20f0e:	000c      	movs	r4, r1
   20f10:	4658      	mov	r0, fp
   20f12:	4099      	lsls	r1, r3
   20f14:	4098      	lsls	r0, r3
   20f16:	1e4b      	subs	r3, r1, #1
   20f18:	4199      	sbcs	r1, r3
   20f1a:	465b      	mov	r3, fp
   20f1c:	40d4      	lsrs	r4, r2
   20f1e:	40d3      	lsrs	r3, r2
   20f20:	4320      	orrs	r0, r4
   20f22:	4308      	orrs	r0, r1
   20f24:	001a      	movs	r2, r3
   20f26:	0743      	lsls	r3, r0, #29
   20f28:	d009      	beq.n	20f3e <__aeabi_ddiv+0x596>
   20f2a:	230f      	movs	r3, #15
   20f2c:	4003      	ands	r3, r0
   20f2e:	2b04      	cmp	r3, #4
   20f30:	d005      	beq.n	20f3e <__aeabi_ddiv+0x596>
   20f32:	0001      	movs	r1, r0
   20f34:	1d08      	adds	r0, r1, #4
   20f36:	4288      	cmp	r0, r1
   20f38:	419b      	sbcs	r3, r3
   20f3a:	425b      	negs	r3, r3
   20f3c:	18d2      	adds	r2, r2, r3
   20f3e:	0213      	lsls	r3, r2, #8
   20f40:	d53a      	bpl.n	20fb8 <__aeabi_ddiv+0x610>
   20f42:	2301      	movs	r3, #1
   20f44:	9a02      	ldr	r2, [sp, #8]
   20f46:	2401      	movs	r4, #1
   20f48:	401a      	ands	r2, r3
   20f4a:	2300      	movs	r3, #0
   20f4c:	4694      	mov	ip, r2
   20f4e:	4698      	mov	r8, r3
   20f50:	2200      	movs	r2, #0
   20f52:	e5f7      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20f54:	2102      	movs	r1, #2
   20f56:	4249      	negs	r1, r1
   20f58:	468c      	mov	ip, r1
   20f5a:	9d03      	ldr	r5, [sp, #12]
   20f5c:	44e3      	add	fp, ip
   20f5e:	46ac      	mov	ip, r5
   20f60:	44e2      	add	sl, ip
   20f62:	45aa      	cmp	sl, r5
   20f64:	41ad      	sbcs	r5, r5
   20f66:	426d      	negs	r5, r5
   20f68:	4445      	add	r5, r8
   20f6a:	18ed      	adds	r5, r5, r3
   20f6c:	1a2d      	subs	r5, r5, r0
   20f6e:	e696      	b.n	20c9e <__aeabi_ddiv+0x2f6>
   20f70:	1e8a      	subs	r2, r1, #2
   20f72:	9903      	ldr	r1, [sp, #12]
   20f74:	004d      	lsls	r5, r1, #1
   20f76:	428d      	cmp	r5, r1
   20f78:	4189      	sbcs	r1, r1
   20f7a:	4249      	negs	r1, r1
   20f7c:	4441      	add	r1, r8
   20f7e:	1876      	adds	r6, r6, r1
   20f80:	9503      	str	r5, [sp, #12]
   20f82:	e78f      	b.n	20ea4 <__aeabi_ddiv+0x4fc>
   20f84:	201f      	movs	r0, #31
   20f86:	4240      	negs	r0, r0
   20f88:	1ac3      	subs	r3, r0, r3
   20f8a:	4658      	mov	r0, fp
   20f8c:	40d8      	lsrs	r0, r3
   20f8e:	0003      	movs	r3, r0
   20f90:	2a20      	cmp	r2, #32
   20f92:	d028      	beq.n	20fe6 <__aeabi_ddiv+0x63e>
   20f94:	2040      	movs	r0, #64	; 0x40
   20f96:	465d      	mov	r5, fp
   20f98:	1a82      	subs	r2, r0, r2
   20f9a:	4095      	lsls	r5, r2
   20f9c:	4329      	orrs	r1, r5
   20f9e:	1e4a      	subs	r2, r1, #1
   20fa0:	4191      	sbcs	r1, r2
   20fa2:	4319      	orrs	r1, r3
   20fa4:	2307      	movs	r3, #7
   20fa6:	2200      	movs	r2, #0
   20fa8:	400b      	ands	r3, r1
   20faa:	d009      	beq.n	20fc0 <__aeabi_ddiv+0x618>
   20fac:	230f      	movs	r3, #15
   20fae:	2200      	movs	r2, #0
   20fb0:	400b      	ands	r3, r1
   20fb2:	0008      	movs	r0, r1
   20fb4:	2b04      	cmp	r3, #4
   20fb6:	d1bd      	bne.n	20f34 <__aeabi_ddiv+0x58c>
   20fb8:	0001      	movs	r1, r0
   20fba:	0753      	lsls	r3, r2, #29
   20fbc:	0252      	lsls	r2, r2, #9
   20fbe:	0b12      	lsrs	r2, r2, #12
   20fc0:	08c9      	lsrs	r1, r1, #3
   20fc2:	4319      	orrs	r1, r3
   20fc4:	2301      	movs	r3, #1
   20fc6:	4688      	mov	r8, r1
   20fc8:	9902      	ldr	r1, [sp, #8]
   20fca:	2400      	movs	r4, #0
   20fcc:	4019      	ands	r1, r3
   20fce:	468c      	mov	ip, r1
   20fd0:	e5b8      	b.n	20b44 <__aeabi_ddiv+0x19c>
   20fd2:	4552      	cmp	r2, sl
   20fd4:	d8be      	bhi.n	20f54 <__aeabi_ddiv+0x5ac>
   20fd6:	468b      	mov	fp, r1
   20fd8:	2500      	movs	r5, #0
   20fda:	e660      	b.n	20c9e <__aeabi_ddiv+0x2f6>
   20fdc:	9d03      	ldr	r5, [sp, #12]
   20fde:	429d      	cmp	r5, r3
   20fe0:	d3c6      	bcc.n	20f70 <__aeabi_ddiv+0x5c8>
   20fe2:	0011      	movs	r1, r2
   20fe4:	e762      	b.n	20eac <__aeabi_ddiv+0x504>
   20fe6:	2500      	movs	r5, #0
   20fe8:	e7d8      	b.n	20f9c <__aeabi_ddiv+0x5f4>
   20fea:	2280      	movs	r2, #128	; 0x80
   20fec:	465b      	mov	r3, fp
   20fee:	0312      	lsls	r2, r2, #12
   20ff0:	431a      	orrs	r2, r3
   20ff2:	9b01      	ldr	r3, [sp, #4]
   20ff4:	0312      	lsls	r2, r2, #12
   20ff6:	0b12      	lsrs	r2, r2, #12
   20ff8:	469c      	mov	ip, r3
   20ffa:	4688      	mov	r8, r1
   20ffc:	4c03      	ldr	r4, [pc, #12]	; (2100c <__aeabi_ddiv+0x664>)
   20ffe:	e5a1      	b.n	20b44 <__aeabi_ddiv+0x19c>
   21000:	000003ff 	.word	0x000003ff
   21004:	feffffff 	.word	0xfeffffff
   21008:	000007fe 	.word	0x000007fe
   2100c:	000007ff 	.word	0x000007ff

00021010 <__aeabi_dmul>:
   21010:	b5f0      	push	{r4, r5, r6, r7, lr}
   21012:	4657      	mov	r7, sl
   21014:	4645      	mov	r5, r8
   21016:	46de      	mov	lr, fp
   21018:	464e      	mov	r6, r9
   2101a:	b5e0      	push	{r5, r6, r7, lr}
   2101c:	030c      	lsls	r4, r1, #12
   2101e:	4698      	mov	r8, r3
   21020:	004e      	lsls	r6, r1, #1
   21022:	0b23      	lsrs	r3, r4, #12
   21024:	b087      	sub	sp, #28
   21026:	0007      	movs	r7, r0
   21028:	4692      	mov	sl, r2
   2102a:	469b      	mov	fp, r3
   2102c:	0d76      	lsrs	r6, r6, #21
   2102e:	0fcd      	lsrs	r5, r1, #31
   21030:	2e00      	cmp	r6, #0
   21032:	d06b      	beq.n	2110c <__aeabi_dmul+0xfc>
   21034:	4b6d      	ldr	r3, [pc, #436]	; (211ec <__aeabi_dmul+0x1dc>)
   21036:	429e      	cmp	r6, r3
   21038:	d035      	beq.n	210a6 <__aeabi_dmul+0x96>
   2103a:	2480      	movs	r4, #128	; 0x80
   2103c:	465b      	mov	r3, fp
   2103e:	0f42      	lsrs	r2, r0, #29
   21040:	0424      	lsls	r4, r4, #16
   21042:	00db      	lsls	r3, r3, #3
   21044:	4314      	orrs	r4, r2
   21046:	431c      	orrs	r4, r3
   21048:	00c3      	lsls	r3, r0, #3
   2104a:	4699      	mov	r9, r3
   2104c:	4b68      	ldr	r3, [pc, #416]	; (211f0 <__aeabi_dmul+0x1e0>)
   2104e:	46a3      	mov	fp, r4
   21050:	469c      	mov	ip, r3
   21052:	2300      	movs	r3, #0
   21054:	2700      	movs	r7, #0
   21056:	4466      	add	r6, ip
   21058:	9302      	str	r3, [sp, #8]
   2105a:	4643      	mov	r3, r8
   2105c:	031c      	lsls	r4, r3, #12
   2105e:	005a      	lsls	r2, r3, #1
   21060:	0fdb      	lsrs	r3, r3, #31
   21062:	4650      	mov	r0, sl
   21064:	0b24      	lsrs	r4, r4, #12
   21066:	0d52      	lsrs	r2, r2, #21
   21068:	4698      	mov	r8, r3
   2106a:	d100      	bne.n	2106e <__aeabi_dmul+0x5e>
   2106c:	e076      	b.n	2115c <__aeabi_dmul+0x14c>
   2106e:	4b5f      	ldr	r3, [pc, #380]	; (211ec <__aeabi_dmul+0x1dc>)
   21070:	429a      	cmp	r2, r3
   21072:	d06d      	beq.n	21150 <__aeabi_dmul+0x140>
   21074:	2380      	movs	r3, #128	; 0x80
   21076:	0f41      	lsrs	r1, r0, #29
   21078:	041b      	lsls	r3, r3, #16
   2107a:	430b      	orrs	r3, r1
   2107c:	495c      	ldr	r1, [pc, #368]	; (211f0 <__aeabi_dmul+0x1e0>)
   2107e:	00e4      	lsls	r4, r4, #3
   21080:	468c      	mov	ip, r1
   21082:	431c      	orrs	r4, r3
   21084:	00c3      	lsls	r3, r0, #3
   21086:	2000      	movs	r0, #0
   21088:	4462      	add	r2, ip
   2108a:	4641      	mov	r1, r8
   2108c:	18b6      	adds	r6, r6, r2
   2108e:	4069      	eors	r1, r5
   21090:	1c72      	adds	r2, r6, #1
   21092:	9101      	str	r1, [sp, #4]
   21094:	4694      	mov	ip, r2
   21096:	4307      	orrs	r7, r0
   21098:	2f0f      	cmp	r7, #15
   2109a:	d900      	bls.n	2109e <__aeabi_dmul+0x8e>
   2109c:	e0b0      	b.n	21200 <__aeabi_dmul+0x1f0>
   2109e:	4a55      	ldr	r2, [pc, #340]	; (211f4 <__aeabi_dmul+0x1e4>)
   210a0:	00bf      	lsls	r7, r7, #2
   210a2:	59d2      	ldr	r2, [r2, r7]
   210a4:	4697      	mov	pc, r2
   210a6:	465b      	mov	r3, fp
   210a8:	4303      	orrs	r3, r0
   210aa:	4699      	mov	r9, r3
   210ac:	d000      	beq.n	210b0 <__aeabi_dmul+0xa0>
   210ae:	e087      	b.n	211c0 <__aeabi_dmul+0x1b0>
   210b0:	2300      	movs	r3, #0
   210b2:	469b      	mov	fp, r3
   210b4:	3302      	adds	r3, #2
   210b6:	2708      	movs	r7, #8
   210b8:	9302      	str	r3, [sp, #8]
   210ba:	e7ce      	b.n	2105a <__aeabi_dmul+0x4a>
   210bc:	4642      	mov	r2, r8
   210be:	9201      	str	r2, [sp, #4]
   210c0:	2802      	cmp	r0, #2
   210c2:	d067      	beq.n	21194 <__aeabi_dmul+0x184>
   210c4:	2803      	cmp	r0, #3
   210c6:	d100      	bne.n	210ca <__aeabi_dmul+0xba>
   210c8:	e20e      	b.n	214e8 <__aeabi_dmul+0x4d8>
   210ca:	2801      	cmp	r0, #1
   210cc:	d000      	beq.n	210d0 <__aeabi_dmul+0xc0>
   210ce:	e162      	b.n	21396 <__aeabi_dmul+0x386>
   210d0:	2300      	movs	r3, #0
   210d2:	2400      	movs	r4, #0
   210d4:	2200      	movs	r2, #0
   210d6:	4699      	mov	r9, r3
   210d8:	9901      	ldr	r1, [sp, #4]
   210da:	4001      	ands	r1, r0
   210dc:	b2cd      	uxtb	r5, r1
   210de:	2100      	movs	r1, #0
   210e0:	0312      	lsls	r2, r2, #12
   210e2:	0d0b      	lsrs	r3, r1, #20
   210e4:	0b12      	lsrs	r2, r2, #12
   210e6:	051b      	lsls	r3, r3, #20
   210e8:	4313      	orrs	r3, r2
   210ea:	4a43      	ldr	r2, [pc, #268]	; (211f8 <__aeabi_dmul+0x1e8>)
   210ec:	0524      	lsls	r4, r4, #20
   210ee:	4013      	ands	r3, r2
   210f0:	431c      	orrs	r4, r3
   210f2:	0064      	lsls	r4, r4, #1
   210f4:	07ed      	lsls	r5, r5, #31
   210f6:	0864      	lsrs	r4, r4, #1
   210f8:	432c      	orrs	r4, r5
   210fa:	4648      	mov	r0, r9
   210fc:	0021      	movs	r1, r4
   210fe:	b007      	add	sp, #28
   21100:	bc3c      	pop	{r2, r3, r4, r5}
   21102:	4690      	mov	r8, r2
   21104:	4699      	mov	r9, r3
   21106:	46a2      	mov	sl, r4
   21108:	46ab      	mov	fp, r5
   2110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2110c:	4303      	orrs	r3, r0
   2110e:	4699      	mov	r9, r3
   21110:	d04f      	beq.n	211b2 <__aeabi_dmul+0x1a2>
   21112:	465b      	mov	r3, fp
   21114:	2b00      	cmp	r3, #0
   21116:	d100      	bne.n	2111a <__aeabi_dmul+0x10a>
   21118:	e189      	b.n	2142e <__aeabi_dmul+0x41e>
   2111a:	4658      	mov	r0, fp
   2111c:	f000 fdb4 	bl	21c88 <__clzsi2>
   21120:	0003      	movs	r3, r0
   21122:	3b0b      	subs	r3, #11
   21124:	2b1c      	cmp	r3, #28
   21126:	dd00      	ble.n	2112a <__aeabi_dmul+0x11a>
   21128:	e17a      	b.n	21420 <__aeabi_dmul+0x410>
   2112a:	221d      	movs	r2, #29
   2112c:	1ad3      	subs	r3, r2, r3
   2112e:	003a      	movs	r2, r7
   21130:	0001      	movs	r1, r0
   21132:	465c      	mov	r4, fp
   21134:	40da      	lsrs	r2, r3
   21136:	3908      	subs	r1, #8
   21138:	408c      	lsls	r4, r1
   2113a:	0013      	movs	r3, r2
   2113c:	408f      	lsls	r7, r1
   2113e:	4323      	orrs	r3, r4
   21140:	469b      	mov	fp, r3
   21142:	46b9      	mov	r9, r7
   21144:	2300      	movs	r3, #0
   21146:	4e2d      	ldr	r6, [pc, #180]	; (211fc <__aeabi_dmul+0x1ec>)
   21148:	2700      	movs	r7, #0
   2114a:	1a36      	subs	r6, r6, r0
   2114c:	9302      	str	r3, [sp, #8]
   2114e:	e784      	b.n	2105a <__aeabi_dmul+0x4a>
   21150:	4653      	mov	r3, sl
   21152:	4323      	orrs	r3, r4
   21154:	d12a      	bne.n	211ac <__aeabi_dmul+0x19c>
   21156:	2400      	movs	r4, #0
   21158:	2002      	movs	r0, #2
   2115a:	e796      	b.n	2108a <__aeabi_dmul+0x7a>
   2115c:	4653      	mov	r3, sl
   2115e:	4323      	orrs	r3, r4
   21160:	d020      	beq.n	211a4 <__aeabi_dmul+0x194>
   21162:	2c00      	cmp	r4, #0
   21164:	d100      	bne.n	21168 <__aeabi_dmul+0x158>
   21166:	e157      	b.n	21418 <__aeabi_dmul+0x408>
   21168:	0020      	movs	r0, r4
   2116a:	f000 fd8d 	bl	21c88 <__clzsi2>
   2116e:	0003      	movs	r3, r0
   21170:	3b0b      	subs	r3, #11
   21172:	2b1c      	cmp	r3, #28
   21174:	dd00      	ble.n	21178 <__aeabi_dmul+0x168>
   21176:	e149      	b.n	2140c <__aeabi_dmul+0x3fc>
   21178:	211d      	movs	r1, #29
   2117a:	1acb      	subs	r3, r1, r3
   2117c:	4651      	mov	r1, sl
   2117e:	0002      	movs	r2, r0
   21180:	40d9      	lsrs	r1, r3
   21182:	4653      	mov	r3, sl
   21184:	3a08      	subs	r2, #8
   21186:	4094      	lsls	r4, r2
   21188:	4093      	lsls	r3, r2
   2118a:	430c      	orrs	r4, r1
   2118c:	4a1b      	ldr	r2, [pc, #108]	; (211fc <__aeabi_dmul+0x1ec>)
   2118e:	1a12      	subs	r2, r2, r0
   21190:	2000      	movs	r0, #0
   21192:	e77a      	b.n	2108a <__aeabi_dmul+0x7a>
   21194:	2501      	movs	r5, #1
   21196:	9b01      	ldr	r3, [sp, #4]
   21198:	4c14      	ldr	r4, [pc, #80]	; (211ec <__aeabi_dmul+0x1dc>)
   2119a:	401d      	ands	r5, r3
   2119c:	2300      	movs	r3, #0
   2119e:	2200      	movs	r2, #0
   211a0:	4699      	mov	r9, r3
   211a2:	e79c      	b.n	210de <__aeabi_dmul+0xce>
   211a4:	2400      	movs	r4, #0
   211a6:	2200      	movs	r2, #0
   211a8:	2001      	movs	r0, #1
   211aa:	e76e      	b.n	2108a <__aeabi_dmul+0x7a>
   211ac:	4653      	mov	r3, sl
   211ae:	2003      	movs	r0, #3
   211b0:	e76b      	b.n	2108a <__aeabi_dmul+0x7a>
   211b2:	2300      	movs	r3, #0
   211b4:	469b      	mov	fp, r3
   211b6:	3301      	adds	r3, #1
   211b8:	2704      	movs	r7, #4
   211ba:	2600      	movs	r6, #0
   211bc:	9302      	str	r3, [sp, #8]
   211be:	e74c      	b.n	2105a <__aeabi_dmul+0x4a>
   211c0:	2303      	movs	r3, #3
   211c2:	4681      	mov	r9, r0
   211c4:	270c      	movs	r7, #12
   211c6:	9302      	str	r3, [sp, #8]
   211c8:	e747      	b.n	2105a <__aeabi_dmul+0x4a>
   211ca:	2280      	movs	r2, #128	; 0x80
   211cc:	2300      	movs	r3, #0
   211ce:	2500      	movs	r5, #0
   211d0:	0312      	lsls	r2, r2, #12
   211d2:	4699      	mov	r9, r3
   211d4:	4c05      	ldr	r4, [pc, #20]	; (211ec <__aeabi_dmul+0x1dc>)
   211d6:	e782      	b.n	210de <__aeabi_dmul+0xce>
   211d8:	465c      	mov	r4, fp
   211da:	464b      	mov	r3, r9
   211dc:	9802      	ldr	r0, [sp, #8]
   211de:	e76f      	b.n	210c0 <__aeabi_dmul+0xb0>
   211e0:	465c      	mov	r4, fp
   211e2:	464b      	mov	r3, r9
   211e4:	9501      	str	r5, [sp, #4]
   211e6:	9802      	ldr	r0, [sp, #8]
   211e8:	e76a      	b.n	210c0 <__aeabi_dmul+0xb0>
   211ea:	46c0      	nop			; (mov r8, r8)
   211ec:	000007ff 	.word	0x000007ff
   211f0:	fffffc01 	.word	0xfffffc01
   211f4:	000246e0 	.word	0x000246e0
   211f8:	800fffff 	.word	0x800fffff
   211fc:	fffffc0d 	.word	0xfffffc0d
   21200:	464a      	mov	r2, r9
   21202:	4649      	mov	r1, r9
   21204:	0c17      	lsrs	r7, r2, #16
   21206:	0c1a      	lsrs	r2, r3, #16
   21208:	041b      	lsls	r3, r3, #16
   2120a:	0c1b      	lsrs	r3, r3, #16
   2120c:	0408      	lsls	r0, r1, #16
   2120e:	0019      	movs	r1, r3
   21210:	0c00      	lsrs	r0, r0, #16
   21212:	4341      	muls	r1, r0
   21214:	0015      	movs	r5, r2
   21216:	4688      	mov	r8, r1
   21218:	0019      	movs	r1, r3
   2121a:	437d      	muls	r5, r7
   2121c:	4379      	muls	r1, r7
   2121e:	9503      	str	r5, [sp, #12]
   21220:	4689      	mov	r9, r1
   21222:	0029      	movs	r1, r5
   21224:	0015      	movs	r5, r2
   21226:	4345      	muls	r5, r0
   21228:	444d      	add	r5, r9
   2122a:	9502      	str	r5, [sp, #8]
   2122c:	4645      	mov	r5, r8
   2122e:	0c2d      	lsrs	r5, r5, #16
   21230:	46aa      	mov	sl, r5
   21232:	9d02      	ldr	r5, [sp, #8]
   21234:	4455      	add	r5, sl
   21236:	45a9      	cmp	r9, r5
   21238:	d906      	bls.n	21248 <__aeabi_dmul+0x238>
   2123a:	468a      	mov	sl, r1
   2123c:	2180      	movs	r1, #128	; 0x80
   2123e:	0249      	lsls	r1, r1, #9
   21240:	4689      	mov	r9, r1
   21242:	44ca      	add	sl, r9
   21244:	4651      	mov	r1, sl
   21246:	9103      	str	r1, [sp, #12]
   21248:	0c29      	lsrs	r1, r5, #16
   2124a:	9104      	str	r1, [sp, #16]
   2124c:	4641      	mov	r1, r8
   2124e:	0409      	lsls	r1, r1, #16
   21250:	042d      	lsls	r5, r5, #16
   21252:	0c09      	lsrs	r1, r1, #16
   21254:	4688      	mov	r8, r1
   21256:	0029      	movs	r1, r5
   21258:	0c25      	lsrs	r5, r4, #16
   2125a:	0424      	lsls	r4, r4, #16
   2125c:	4441      	add	r1, r8
   2125e:	0c24      	lsrs	r4, r4, #16
   21260:	9105      	str	r1, [sp, #20]
   21262:	0021      	movs	r1, r4
   21264:	4341      	muls	r1, r0
   21266:	4688      	mov	r8, r1
   21268:	0021      	movs	r1, r4
   2126a:	4379      	muls	r1, r7
   2126c:	468a      	mov	sl, r1
   2126e:	4368      	muls	r0, r5
   21270:	4641      	mov	r1, r8
   21272:	4450      	add	r0, sl
   21274:	4681      	mov	r9, r0
   21276:	0c08      	lsrs	r0, r1, #16
   21278:	4448      	add	r0, r9
   2127a:	436f      	muls	r7, r5
   2127c:	4582      	cmp	sl, r0
   2127e:	d903      	bls.n	21288 <__aeabi_dmul+0x278>
   21280:	2180      	movs	r1, #128	; 0x80
   21282:	0249      	lsls	r1, r1, #9
   21284:	4689      	mov	r9, r1
   21286:	444f      	add	r7, r9
   21288:	0c01      	lsrs	r1, r0, #16
   2128a:	4689      	mov	r9, r1
   2128c:	0039      	movs	r1, r7
   2128e:	4449      	add	r1, r9
   21290:	9102      	str	r1, [sp, #8]
   21292:	4641      	mov	r1, r8
   21294:	040f      	lsls	r7, r1, #16
   21296:	9904      	ldr	r1, [sp, #16]
   21298:	0c3f      	lsrs	r7, r7, #16
   2129a:	4688      	mov	r8, r1
   2129c:	0400      	lsls	r0, r0, #16
   2129e:	19c0      	adds	r0, r0, r7
   212a0:	4480      	add	r8, r0
   212a2:	4641      	mov	r1, r8
   212a4:	9104      	str	r1, [sp, #16]
   212a6:	4659      	mov	r1, fp
   212a8:	0c0f      	lsrs	r7, r1, #16
   212aa:	0409      	lsls	r1, r1, #16
   212ac:	0c09      	lsrs	r1, r1, #16
   212ae:	4688      	mov	r8, r1
   212b0:	4359      	muls	r1, r3
   212b2:	468a      	mov	sl, r1
   212b4:	0039      	movs	r1, r7
   212b6:	4351      	muls	r1, r2
   212b8:	4689      	mov	r9, r1
   212ba:	4641      	mov	r1, r8
   212bc:	434a      	muls	r2, r1
   212be:	4651      	mov	r1, sl
   212c0:	0c09      	lsrs	r1, r1, #16
   212c2:	468b      	mov	fp, r1
   212c4:	437b      	muls	r3, r7
   212c6:	18d2      	adds	r2, r2, r3
   212c8:	445a      	add	r2, fp
   212ca:	4293      	cmp	r3, r2
   212cc:	d903      	bls.n	212d6 <__aeabi_dmul+0x2c6>
   212ce:	2380      	movs	r3, #128	; 0x80
   212d0:	025b      	lsls	r3, r3, #9
   212d2:	469b      	mov	fp, r3
   212d4:	44d9      	add	r9, fp
   212d6:	4651      	mov	r1, sl
   212d8:	0409      	lsls	r1, r1, #16
   212da:	0c09      	lsrs	r1, r1, #16
   212dc:	468a      	mov	sl, r1
   212de:	4641      	mov	r1, r8
   212e0:	4361      	muls	r1, r4
   212e2:	437c      	muls	r4, r7
   212e4:	0c13      	lsrs	r3, r2, #16
   212e6:	0412      	lsls	r2, r2, #16
   212e8:	444b      	add	r3, r9
   212ea:	4452      	add	r2, sl
   212ec:	46a1      	mov	r9, r4
   212ee:	468a      	mov	sl, r1
   212f0:	003c      	movs	r4, r7
   212f2:	4641      	mov	r1, r8
   212f4:	436c      	muls	r4, r5
   212f6:	434d      	muls	r5, r1
   212f8:	4651      	mov	r1, sl
   212fa:	444d      	add	r5, r9
   212fc:	0c0f      	lsrs	r7, r1, #16
   212fe:	197d      	adds	r5, r7, r5
   21300:	45a9      	cmp	r9, r5
   21302:	d903      	bls.n	2130c <__aeabi_dmul+0x2fc>
   21304:	2180      	movs	r1, #128	; 0x80
   21306:	0249      	lsls	r1, r1, #9
   21308:	4688      	mov	r8, r1
   2130a:	4444      	add	r4, r8
   2130c:	9f04      	ldr	r7, [sp, #16]
   2130e:	9903      	ldr	r1, [sp, #12]
   21310:	46b8      	mov	r8, r7
   21312:	4441      	add	r1, r8
   21314:	468b      	mov	fp, r1
   21316:	4583      	cmp	fp, r0
   21318:	4180      	sbcs	r0, r0
   2131a:	4241      	negs	r1, r0
   2131c:	4688      	mov	r8, r1
   2131e:	4651      	mov	r1, sl
   21320:	0408      	lsls	r0, r1, #16
   21322:	042f      	lsls	r7, r5, #16
   21324:	0c00      	lsrs	r0, r0, #16
   21326:	183f      	adds	r7, r7, r0
   21328:	4658      	mov	r0, fp
   2132a:	9902      	ldr	r1, [sp, #8]
   2132c:	1810      	adds	r0, r2, r0
   2132e:	4689      	mov	r9, r1
   21330:	4290      	cmp	r0, r2
   21332:	4192      	sbcs	r2, r2
   21334:	444f      	add	r7, r9
   21336:	46ba      	mov	sl, r7
   21338:	4252      	negs	r2, r2
   2133a:	4699      	mov	r9, r3
   2133c:	4693      	mov	fp, r2
   2133e:	44c2      	add	sl, r8
   21340:	44d1      	add	r9, sl
   21342:	44cb      	add	fp, r9
   21344:	428f      	cmp	r7, r1
   21346:	41bf      	sbcs	r7, r7
   21348:	45c2      	cmp	sl, r8
   2134a:	4189      	sbcs	r1, r1
   2134c:	4599      	cmp	r9, r3
   2134e:	419b      	sbcs	r3, r3
   21350:	4593      	cmp	fp, r2
   21352:	4192      	sbcs	r2, r2
   21354:	427f      	negs	r7, r7
   21356:	4249      	negs	r1, r1
   21358:	0c2d      	lsrs	r5, r5, #16
   2135a:	4252      	negs	r2, r2
   2135c:	430f      	orrs	r7, r1
   2135e:	425b      	negs	r3, r3
   21360:	4313      	orrs	r3, r2
   21362:	197f      	adds	r7, r7, r5
   21364:	18ff      	adds	r7, r7, r3
   21366:	465b      	mov	r3, fp
   21368:	193c      	adds	r4, r7, r4
   2136a:	0ddb      	lsrs	r3, r3, #23
   2136c:	9a05      	ldr	r2, [sp, #20]
   2136e:	0264      	lsls	r4, r4, #9
   21370:	431c      	orrs	r4, r3
   21372:	0243      	lsls	r3, r0, #9
   21374:	4313      	orrs	r3, r2
   21376:	1e5d      	subs	r5, r3, #1
   21378:	41ab      	sbcs	r3, r5
   2137a:	465a      	mov	r2, fp
   2137c:	0dc0      	lsrs	r0, r0, #23
   2137e:	4303      	orrs	r3, r0
   21380:	0252      	lsls	r2, r2, #9
   21382:	4313      	orrs	r3, r2
   21384:	01e2      	lsls	r2, r4, #7
   21386:	d556      	bpl.n	21436 <__aeabi_dmul+0x426>
   21388:	2001      	movs	r0, #1
   2138a:	085a      	lsrs	r2, r3, #1
   2138c:	4003      	ands	r3, r0
   2138e:	4313      	orrs	r3, r2
   21390:	07e2      	lsls	r2, r4, #31
   21392:	4313      	orrs	r3, r2
   21394:	0864      	lsrs	r4, r4, #1
   21396:	485a      	ldr	r0, [pc, #360]	; (21500 <__aeabi_dmul+0x4f0>)
   21398:	4460      	add	r0, ip
   2139a:	2800      	cmp	r0, #0
   2139c:	dd4d      	ble.n	2143a <__aeabi_dmul+0x42a>
   2139e:	075a      	lsls	r2, r3, #29
   213a0:	d009      	beq.n	213b6 <__aeabi_dmul+0x3a6>
   213a2:	220f      	movs	r2, #15
   213a4:	401a      	ands	r2, r3
   213a6:	2a04      	cmp	r2, #4
   213a8:	d005      	beq.n	213b6 <__aeabi_dmul+0x3a6>
   213aa:	1d1a      	adds	r2, r3, #4
   213ac:	429a      	cmp	r2, r3
   213ae:	419b      	sbcs	r3, r3
   213b0:	425b      	negs	r3, r3
   213b2:	18e4      	adds	r4, r4, r3
   213b4:	0013      	movs	r3, r2
   213b6:	01e2      	lsls	r2, r4, #7
   213b8:	d504      	bpl.n	213c4 <__aeabi_dmul+0x3b4>
   213ba:	2080      	movs	r0, #128	; 0x80
   213bc:	4a51      	ldr	r2, [pc, #324]	; (21504 <__aeabi_dmul+0x4f4>)
   213be:	00c0      	lsls	r0, r0, #3
   213c0:	4014      	ands	r4, r2
   213c2:	4460      	add	r0, ip
   213c4:	4a50      	ldr	r2, [pc, #320]	; (21508 <__aeabi_dmul+0x4f8>)
   213c6:	4290      	cmp	r0, r2
   213c8:	dd00      	ble.n	213cc <__aeabi_dmul+0x3bc>
   213ca:	e6e3      	b.n	21194 <__aeabi_dmul+0x184>
   213cc:	2501      	movs	r5, #1
   213ce:	08db      	lsrs	r3, r3, #3
   213d0:	0762      	lsls	r2, r4, #29
   213d2:	431a      	orrs	r2, r3
   213d4:	0264      	lsls	r4, r4, #9
   213d6:	9b01      	ldr	r3, [sp, #4]
   213d8:	4691      	mov	r9, r2
   213da:	0b22      	lsrs	r2, r4, #12
   213dc:	0544      	lsls	r4, r0, #21
   213de:	0d64      	lsrs	r4, r4, #21
   213e0:	401d      	ands	r5, r3
   213e2:	e67c      	b.n	210de <__aeabi_dmul+0xce>
   213e4:	2280      	movs	r2, #128	; 0x80
   213e6:	4659      	mov	r1, fp
   213e8:	0312      	lsls	r2, r2, #12
   213ea:	4211      	tst	r1, r2
   213ec:	d008      	beq.n	21400 <__aeabi_dmul+0x3f0>
   213ee:	4214      	tst	r4, r2
   213f0:	d106      	bne.n	21400 <__aeabi_dmul+0x3f0>
   213f2:	4322      	orrs	r2, r4
   213f4:	0312      	lsls	r2, r2, #12
   213f6:	0b12      	lsrs	r2, r2, #12
   213f8:	4645      	mov	r5, r8
   213fa:	4699      	mov	r9, r3
   213fc:	4c43      	ldr	r4, [pc, #268]	; (2150c <__aeabi_dmul+0x4fc>)
   213fe:	e66e      	b.n	210de <__aeabi_dmul+0xce>
   21400:	465b      	mov	r3, fp
   21402:	431a      	orrs	r2, r3
   21404:	0312      	lsls	r2, r2, #12
   21406:	0b12      	lsrs	r2, r2, #12
   21408:	4c40      	ldr	r4, [pc, #256]	; (2150c <__aeabi_dmul+0x4fc>)
   2140a:	e668      	b.n	210de <__aeabi_dmul+0xce>
   2140c:	0003      	movs	r3, r0
   2140e:	4654      	mov	r4, sl
   21410:	3b28      	subs	r3, #40	; 0x28
   21412:	409c      	lsls	r4, r3
   21414:	2300      	movs	r3, #0
   21416:	e6b9      	b.n	2118c <__aeabi_dmul+0x17c>
   21418:	f000 fc36 	bl	21c88 <__clzsi2>
   2141c:	3020      	adds	r0, #32
   2141e:	e6a6      	b.n	2116e <__aeabi_dmul+0x15e>
   21420:	0003      	movs	r3, r0
   21422:	3b28      	subs	r3, #40	; 0x28
   21424:	409f      	lsls	r7, r3
   21426:	2300      	movs	r3, #0
   21428:	46bb      	mov	fp, r7
   2142a:	4699      	mov	r9, r3
   2142c:	e68a      	b.n	21144 <__aeabi_dmul+0x134>
   2142e:	f000 fc2b 	bl	21c88 <__clzsi2>
   21432:	3020      	adds	r0, #32
   21434:	e674      	b.n	21120 <__aeabi_dmul+0x110>
   21436:	46b4      	mov	ip, r6
   21438:	e7ad      	b.n	21396 <__aeabi_dmul+0x386>
   2143a:	2501      	movs	r5, #1
   2143c:	1a2a      	subs	r2, r5, r0
   2143e:	2a38      	cmp	r2, #56	; 0x38
   21440:	dd06      	ble.n	21450 <__aeabi_dmul+0x440>
   21442:	9b01      	ldr	r3, [sp, #4]
   21444:	2400      	movs	r4, #0
   21446:	401d      	ands	r5, r3
   21448:	2300      	movs	r3, #0
   2144a:	2200      	movs	r2, #0
   2144c:	4699      	mov	r9, r3
   2144e:	e646      	b.n	210de <__aeabi_dmul+0xce>
   21450:	2a1f      	cmp	r2, #31
   21452:	dc21      	bgt.n	21498 <__aeabi_dmul+0x488>
   21454:	2520      	movs	r5, #32
   21456:	0020      	movs	r0, r4
   21458:	1aad      	subs	r5, r5, r2
   2145a:	001e      	movs	r6, r3
   2145c:	40ab      	lsls	r3, r5
   2145e:	40a8      	lsls	r0, r5
   21460:	40d6      	lsrs	r6, r2
   21462:	1e5d      	subs	r5, r3, #1
   21464:	41ab      	sbcs	r3, r5
   21466:	4330      	orrs	r0, r6
   21468:	4318      	orrs	r0, r3
   2146a:	40d4      	lsrs	r4, r2
   2146c:	0743      	lsls	r3, r0, #29
   2146e:	d009      	beq.n	21484 <__aeabi_dmul+0x474>
   21470:	230f      	movs	r3, #15
   21472:	4003      	ands	r3, r0
   21474:	2b04      	cmp	r3, #4
   21476:	d005      	beq.n	21484 <__aeabi_dmul+0x474>
   21478:	0003      	movs	r3, r0
   2147a:	1d18      	adds	r0, r3, #4
   2147c:	4298      	cmp	r0, r3
   2147e:	419b      	sbcs	r3, r3
   21480:	425b      	negs	r3, r3
   21482:	18e4      	adds	r4, r4, r3
   21484:	0223      	lsls	r3, r4, #8
   21486:	d521      	bpl.n	214cc <__aeabi_dmul+0x4bc>
   21488:	2501      	movs	r5, #1
   2148a:	9b01      	ldr	r3, [sp, #4]
   2148c:	2401      	movs	r4, #1
   2148e:	401d      	ands	r5, r3
   21490:	2300      	movs	r3, #0
   21492:	2200      	movs	r2, #0
   21494:	4699      	mov	r9, r3
   21496:	e622      	b.n	210de <__aeabi_dmul+0xce>
   21498:	251f      	movs	r5, #31
   2149a:	0021      	movs	r1, r4
   2149c:	426d      	negs	r5, r5
   2149e:	1a28      	subs	r0, r5, r0
   214a0:	40c1      	lsrs	r1, r0
   214a2:	0008      	movs	r0, r1
   214a4:	2a20      	cmp	r2, #32
   214a6:	d01d      	beq.n	214e4 <__aeabi_dmul+0x4d4>
   214a8:	355f      	adds	r5, #95	; 0x5f
   214aa:	1aaa      	subs	r2, r5, r2
   214ac:	4094      	lsls	r4, r2
   214ae:	4323      	orrs	r3, r4
   214b0:	1e5c      	subs	r4, r3, #1
   214b2:	41a3      	sbcs	r3, r4
   214b4:	2507      	movs	r5, #7
   214b6:	4303      	orrs	r3, r0
   214b8:	401d      	ands	r5, r3
   214ba:	2200      	movs	r2, #0
   214bc:	2d00      	cmp	r5, #0
   214be:	d009      	beq.n	214d4 <__aeabi_dmul+0x4c4>
   214c0:	220f      	movs	r2, #15
   214c2:	2400      	movs	r4, #0
   214c4:	401a      	ands	r2, r3
   214c6:	0018      	movs	r0, r3
   214c8:	2a04      	cmp	r2, #4
   214ca:	d1d6      	bne.n	2147a <__aeabi_dmul+0x46a>
   214cc:	0003      	movs	r3, r0
   214ce:	0765      	lsls	r5, r4, #29
   214d0:	0264      	lsls	r4, r4, #9
   214d2:	0b22      	lsrs	r2, r4, #12
   214d4:	08db      	lsrs	r3, r3, #3
   214d6:	432b      	orrs	r3, r5
   214d8:	2501      	movs	r5, #1
   214da:	4699      	mov	r9, r3
   214dc:	9b01      	ldr	r3, [sp, #4]
   214de:	2400      	movs	r4, #0
   214e0:	401d      	ands	r5, r3
   214e2:	e5fc      	b.n	210de <__aeabi_dmul+0xce>
   214e4:	2400      	movs	r4, #0
   214e6:	e7e2      	b.n	214ae <__aeabi_dmul+0x49e>
   214e8:	2280      	movs	r2, #128	; 0x80
   214ea:	2501      	movs	r5, #1
   214ec:	0312      	lsls	r2, r2, #12
   214ee:	4322      	orrs	r2, r4
   214f0:	9901      	ldr	r1, [sp, #4]
   214f2:	0312      	lsls	r2, r2, #12
   214f4:	0b12      	lsrs	r2, r2, #12
   214f6:	400d      	ands	r5, r1
   214f8:	4699      	mov	r9, r3
   214fa:	4c04      	ldr	r4, [pc, #16]	; (2150c <__aeabi_dmul+0x4fc>)
   214fc:	e5ef      	b.n	210de <__aeabi_dmul+0xce>
   214fe:	46c0      	nop			; (mov r8, r8)
   21500:	000003ff 	.word	0x000003ff
   21504:	feffffff 	.word	0xfeffffff
   21508:	000007fe 	.word	0x000007fe
   2150c:	000007ff 	.word	0x000007ff

00021510 <__aeabi_dsub>:
   21510:	b5f0      	push	{r4, r5, r6, r7, lr}
   21512:	4646      	mov	r6, r8
   21514:	46d6      	mov	lr, sl
   21516:	464f      	mov	r7, r9
   21518:	030c      	lsls	r4, r1, #12
   2151a:	b5c0      	push	{r6, r7, lr}
   2151c:	0fcd      	lsrs	r5, r1, #31
   2151e:	004e      	lsls	r6, r1, #1
   21520:	0a61      	lsrs	r1, r4, #9
   21522:	0f44      	lsrs	r4, r0, #29
   21524:	430c      	orrs	r4, r1
   21526:	00c1      	lsls	r1, r0, #3
   21528:	0058      	lsls	r0, r3, #1
   2152a:	0d40      	lsrs	r0, r0, #21
   2152c:	4684      	mov	ip, r0
   2152e:	468a      	mov	sl, r1
   21530:	000f      	movs	r7, r1
   21532:	0319      	lsls	r1, r3, #12
   21534:	0f50      	lsrs	r0, r2, #29
   21536:	0a49      	lsrs	r1, r1, #9
   21538:	4301      	orrs	r1, r0
   2153a:	48c6      	ldr	r0, [pc, #792]	; (21854 <__aeabi_dsub+0x344>)
   2153c:	0d76      	lsrs	r6, r6, #21
   2153e:	46a8      	mov	r8, r5
   21540:	0fdb      	lsrs	r3, r3, #31
   21542:	00d2      	lsls	r2, r2, #3
   21544:	4584      	cmp	ip, r0
   21546:	d100      	bne.n	2154a <__aeabi_dsub+0x3a>
   21548:	e0d8      	b.n	216fc <__aeabi_dsub+0x1ec>
   2154a:	2001      	movs	r0, #1
   2154c:	4043      	eors	r3, r0
   2154e:	42ab      	cmp	r3, r5
   21550:	d100      	bne.n	21554 <__aeabi_dsub+0x44>
   21552:	e0a6      	b.n	216a2 <__aeabi_dsub+0x192>
   21554:	4660      	mov	r0, ip
   21556:	1a35      	subs	r5, r6, r0
   21558:	2d00      	cmp	r5, #0
   2155a:	dc00      	bgt.n	2155e <__aeabi_dsub+0x4e>
   2155c:	e105      	b.n	2176a <__aeabi_dsub+0x25a>
   2155e:	2800      	cmp	r0, #0
   21560:	d110      	bne.n	21584 <__aeabi_dsub+0x74>
   21562:	000b      	movs	r3, r1
   21564:	4313      	orrs	r3, r2
   21566:	d100      	bne.n	2156a <__aeabi_dsub+0x5a>
   21568:	e0d7      	b.n	2171a <__aeabi_dsub+0x20a>
   2156a:	1e6b      	subs	r3, r5, #1
   2156c:	2b00      	cmp	r3, #0
   2156e:	d000      	beq.n	21572 <__aeabi_dsub+0x62>
   21570:	e14b      	b.n	2180a <__aeabi_dsub+0x2fa>
   21572:	4653      	mov	r3, sl
   21574:	1a9f      	subs	r7, r3, r2
   21576:	45ba      	cmp	sl, r7
   21578:	4180      	sbcs	r0, r0
   2157a:	1a64      	subs	r4, r4, r1
   2157c:	4240      	negs	r0, r0
   2157e:	1a24      	subs	r4, r4, r0
   21580:	2601      	movs	r6, #1
   21582:	e01e      	b.n	215c2 <__aeabi_dsub+0xb2>
   21584:	4bb3      	ldr	r3, [pc, #716]	; (21854 <__aeabi_dsub+0x344>)
   21586:	429e      	cmp	r6, r3
   21588:	d048      	beq.n	2161c <__aeabi_dsub+0x10c>
   2158a:	2380      	movs	r3, #128	; 0x80
   2158c:	041b      	lsls	r3, r3, #16
   2158e:	4319      	orrs	r1, r3
   21590:	2d38      	cmp	r5, #56	; 0x38
   21592:	dd00      	ble.n	21596 <__aeabi_dsub+0x86>
   21594:	e119      	b.n	217ca <__aeabi_dsub+0x2ba>
   21596:	2d1f      	cmp	r5, #31
   21598:	dd00      	ble.n	2159c <__aeabi_dsub+0x8c>
   2159a:	e14c      	b.n	21836 <__aeabi_dsub+0x326>
   2159c:	2320      	movs	r3, #32
   2159e:	000f      	movs	r7, r1
   215a0:	1b5b      	subs	r3, r3, r5
   215a2:	0010      	movs	r0, r2
   215a4:	409a      	lsls	r2, r3
   215a6:	409f      	lsls	r7, r3
   215a8:	40e8      	lsrs	r0, r5
   215aa:	1e53      	subs	r3, r2, #1
   215ac:	419a      	sbcs	r2, r3
   215ae:	40e9      	lsrs	r1, r5
   215b0:	4307      	orrs	r7, r0
   215b2:	4317      	orrs	r7, r2
   215b4:	4653      	mov	r3, sl
   215b6:	1bdf      	subs	r7, r3, r7
   215b8:	1a61      	subs	r1, r4, r1
   215ba:	45ba      	cmp	sl, r7
   215bc:	41a4      	sbcs	r4, r4
   215be:	4264      	negs	r4, r4
   215c0:	1b0c      	subs	r4, r1, r4
   215c2:	0223      	lsls	r3, r4, #8
   215c4:	d400      	bmi.n	215c8 <__aeabi_dsub+0xb8>
   215c6:	e0c5      	b.n	21754 <__aeabi_dsub+0x244>
   215c8:	0264      	lsls	r4, r4, #9
   215ca:	0a65      	lsrs	r5, r4, #9
   215cc:	2d00      	cmp	r5, #0
   215ce:	d100      	bne.n	215d2 <__aeabi_dsub+0xc2>
   215d0:	e0f6      	b.n	217c0 <__aeabi_dsub+0x2b0>
   215d2:	0028      	movs	r0, r5
   215d4:	f000 fb58 	bl	21c88 <__clzsi2>
   215d8:	0003      	movs	r3, r0
   215da:	3b08      	subs	r3, #8
   215dc:	2b1f      	cmp	r3, #31
   215de:	dd00      	ble.n	215e2 <__aeabi_dsub+0xd2>
   215e0:	e0e9      	b.n	217b6 <__aeabi_dsub+0x2a6>
   215e2:	2220      	movs	r2, #32
   215e4:	003c      	movs	r4, r7
   215e6:	1ad2      	subs	r2, r2, r3
   215e8:	409d      	lsls	r5, r3
   215ea:	40d4      	lsrs	r4, r2
   215ec:	409f      	lsls	r7, r3
   215ee:	4325      	orrs	r5, r4
   215f0:	429e      	cmp	r6, r3
   215f2:	dd00      	ble.n	215f6 <__aeabi_dsub+0xe6>
   215f4:	e0db      	b.n	217ae <__aeabi_dsub+0x29e>
   215f6:	1b9e      	subs	r6, r3, r6
   215f8:	1c73      	adds	r3, r6, #1
   215fa:	2b1f      	cmp	r3, #31
   215fc:	dd00      	ble.n	21600 <__aeabi_dsub+0xf0>
   215fe:	e10a      	b.n	21816 <__aeabi_dsub+0x306>
   21600:	2220      	movs	r2, #32
   21602:	0038      	movs	r0, r7
   21604:	1ad2      	subs	r2, r2, r3
   21606:	0029      	movs	r1, r5
   21608:	4097      	lsls	r7, r2
   2160a:	002c      	movs	r4, r5
   2160c:	4091      	lsls	r1, r2
   2160e:	40d8      	lsrs	r0, r3
   21610:	1e7a      	subs	r2, r7, #1
   21612:	4197      	sbcs	r7, r2
   21614:	40dc      	lsrs	r4, r3
   21616:	2600      	movs	r6, #0
   21618:	4301      	orrs	r1, r0
   2161a:	430f      	orrs	r7, r1
   2161c:	077b      	lsls	r3, r7, #29
   2161e:	d009      	beq.n	21634 <__aeabi_dsub+0x124>
   21620:	230f      	movs	r3, #15
   21622:	403b      	ands	r3, r7
   21624:	2b04      	cmp	r3, #4
   21626:	d005      	beq.n	21634 <__aeabi_dsub+0x124>
   21628:	1d3b      	adds	r3, r7, #4
   2162a:	42bb      	cmp	r3, r7
   2162c:	41bf      	sbcs	r7, r7
   2162e:	427f      	negs	r7, r7
   21630:	19e4      	adds	r4, r4, r7
   21632:	001f      	movs	r7, r3
   21634:	0223      	lsls	r3, r4, #8
   21636:	d525      	bpl.n	21684 <__aeabi_dsub+0x174>
   21638:	4b86      	ldr	r3, [pc, #536]	; (21854 <__aeabi_dsub+0x344>)
   2163a:	3601      	adds	r6, #1
   2163c:	429e      	cmp	r6, r3
   2163e:	d100      	bne.n	21642 <__aeabi_dsub+0x132>
   21640:	e0af      	b.n	217a2 <__aeabi_dsub+0x292>
   21642:	4b85      	ldr	r3, [pc, #532]	; (21858 <__aeabi_dsub+0x348>)
   21644:	2501      	movs	r5, #1
   21646:	401c      	ands	r4, r3
   21648:	4643      	mov	r3, r8
   2164a:	0762      	lsls	r2, r4, #29
   2164c:	08ff      	lsrs	r7, r7, #3
   2164e:	0264      	lsls	r4, r4, #9
   21650:	0576      	lsls	r6, r6, #21
   21652:	4317      	orrs	r7, r2
   21654:	0b24      	lsrs	r4, r4, #12
   21656:	0d76      	lsrs	r6, r6, #21
   21658:	401d      	ands	r5, r3
   2165a:	2100      	movs	r1, #0
   2165c:	0324      	lsls	r4, r4, #12
   2165e:	0b23      	lsrs	r3, r4, #12
   21660:	0d0c      	lsrs	r4, r1, #20
   21662:	4a7e      	ldr	r2, [pc, #504]	; (2185c <__aeabi_dsub+0x34c>)
   21664:	0524      	lsls	r4, r4, #20
   21666:	431c      	orrs	r4, r3
   21668:	4014      	ands	r4, r2
   2166a:	0533      	lsls	r3, r6, #20
   2166c:	4323      	orrs	r3, r4
   2166e:	005b      	lsls	r3, r3, #1
   21670:	07ed      	lsls	r5, r5, #31
   21672:	085b      	lsrs	r3, r3, #1
   21674:	432b      	orrs	r3, r5
   21676:	0038      	movs	r0, r7
   21678:	0019      	movs	r1, r3
   2167a:	bc1c      	pop	{r2, r3, r4}
   2167c:	4690      	mov	r8, r2
   2167e:	4699      	mov	r9, r3
   21680:	46a2      	mov	sl, r4
   21682:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21684:	2501      	movs	r5, #1
   21686:	4643      	mov	r3, r8
   21688:	0762      	lsls	r2, r4, #29
   2168a:	08ff      	lsrs	r7, r7, #3
   2168c:	4317      	orrs	r7, r2
   2168e:	08e4      	lsrs	r4, r4, #3
   21690:	401d      	ands	r5, r3
   21692:	4b70      	ldr	r3, [pc, #448]	; (21854 <__aeabi_dsub+0x344>)
   21694:	429e      	cmp	r6, r3
   21696:	d036      	beq.n	21706 <__aeabi_dsub+0x1f6>
   21698:	0324      	lsls	r4, r4, #12
   2169a:	0576      	lsls	r6, r6, #21
   2169c:	0b24      	lsrs	r4, r4, #12
   2169e:	0d76      	lsrs	r6, r6, #21
   216a0:	e7db      	b.n	2165a <__aeabi_dsub+0x14a>
   216a2:	4663      	mov	r3, ip
   216a4:	1af3      	subs	r3, r6, r3
   216a6:	2b00      	cmp	r3, #0
   216a8:	dc00      	bgt.n	216ac <__aeabi_dsub+0x19c>
   216aa:	e094      	b.n	217d6 <__aeabi_dsub+0x2c6>
   216ac:	4660      	mov	r0, ip
   216ae:	2800      	cmp	r0, #0
   216b0:	d035      	beq.n	2171e <__aeabi_dsub+0x20e>
   216b2:	4868      	ldr	r0, [pc, #416]	; (21854 <__aeabi_dsub+0x344>)
   216b4:	4286      	cmp	r6, r0
   216b6:	d0b1      	beq.n	2161c <__aeabi_dsub+0x10c>
   216b8:	2780      	movs	r7, #128	; 0x80
   216ba:	043f      	lsls	r7, r7, #16
   216bc:	4339      	orrs	r1, r7
   216be:	2b38      	cmp	r3, #56	; 0x38
   216c0:	dc00      	bgt.n	216c4 <__aeabi_dsub+0x1b4>
   216c2:	e0fd      	b.n	218c0 <__aeabi_dsub+0x3b0>
   216c4:	430a      	orrs	r2, r1
   216c6:	0017      	movs	r7, r2
   216c8:	2100      	movs	r1, #0
   216ca:	1e7a      	subs	r2, r7, #1
   216cc:	4197      	sbcs	r7, r2
   216ce:	4457      	add	r7, sl
   216d0:	4557      	cmp	r7, sl
   216d2:	4180      	sbcs	r0, r0
   216d4:	1909      	adds	r1, r1, r4
   216d6:	4244      	negs	r4, r0
   216d8:	190c      	adds	r4, r1, r4
   216da:	0223      	lsls	r3, r4, #8
   216dc:	d53a      	bpl.n	21754 <__aeabi_dsub+0x244>
   216de:	4b5d      	ldr	r3, [pc, #372]	; (21854 <__aeabi_dsub+0x344>)
   216e0:	3601      	adds	r6, #1
   216e2:	429e      	cmp	r6, r3
   216e4:	d100      	bne.n	216e8 <__aeabi_dsub+0x1d8>
   216e6:	e14b      	b.n	21980 <__aeabi_dsub+0x470>
   216e8:	2201      	movs	r2, #1
   216ea:	4b5b      	ldr	r3, [pc, #364]	; (21858 <__aeabi_dsub+0x348>)
   216ec:	401c      	ands	r4, r3
   216ee:	087b      	lsrs	r3, r7, #1
   216f0:	4017      	ands	r7, r2
   216f2:	431f      	orrs	r7, r3
   216f4:	07e2      	lsls	r2, r4, #31
   216f6:	4317      	orrs	r7, r2
   216f8:	0864      	lsrs	r4, r4, #1
   216fa:	e78f      	b.n	2161c <__aeabi_dsub+0x10c>
   216fc:	0008      	movs	r0, r1
   216fe:	4310      	orrs	r0, r2
   21700:	d000      	beq.n	21704 <__aeabi_dsub+0x1f4>
   21702:	e724      	b.n	2154e <__aeabi_dsub+0x3e>
   21704:	e721      	b.n	2154a <__aeabi_dsub+0x3a>
   21706:	0023      	movs	r3, r4
   21708:	433b      	orrs	r3, r7
   2170a:	d100      	bne.n	2170e <__aeabi_dsub+0x1fe>
   2170c:	e1b9      	b.n	21a82 <__aeabi_dsub+0x572>
   2170e:	2280      	movs	r2, #128	; 0x80
   21710:	0312      	lsls	r2, r2, #12
   21712:	4314      	orrs	r4, r2
   21714:	0324      	lsls	r4, r4, #12
   21716:	0b24      	lsrs	r4, r4, #12
   21718:	e79f      	b.n	2165a <__aeabi_dsub+0x14a>
   2171a:	002e      	movs	r6, r5
   2171c:	e77e      	b.n	2161c <__aeabi_dsub+0x10c>
   2171e:	0008      	movs	r0, r1
   21720:	4310      	orrs	r0, r2
   21722:	d100      	bne.n	21726 <__aeabi_dsub+0x216>
   21724:	e0ca      	b.n	218bc <__aeabi_dsub+0x3ac>
   21726:	1e58      	subs	r0, r3, #1
   21728:	4684      	mov	ip, r0
   2172a:	2800      	cmp	r0, #0
   2172c:	d000      	beq.n	21730 <__aeabi_dsub+0x220>
   2172e:	e0e7      	b.n	21900 <__aeabi_dsub+0x3f0>
   21730:	4452      	add	r2, sl
   21732:	4552      	cmp	r2, sl
   21734:	4180      	sbcs	r0, r0
   21736:	1864      	adds	r4, r4, r1
   21738:	4240      	negs	r0, r0
   2173a:	1824      	adds	r4, r4, r0
   2173c:	0017      	movs	r7, r2
   2173e:	2601      	movs	r6, #1
   21740:	0223      	lsls	r3, r4, #8
   21742:	d507      	bpl.n	21754 <__aeabi_dsub+0x244>
   21744:	2602      	movs	r6, #2
   21746:	e7cf      	b.n	216e8 <__aeabi_dsub+0x1d8>
   21748:	4664      	mov	r4, ip
   2174a:	432c      	orrs	r4, r5
   2174c:	d100      	bne.n	21750 <__aeabi_dsub+0x240>
   2174e:	e1b3      	b.n	21ab8 <__aeabi_dsub+0x5a8>
   21750:	002c      	movs	r4, r5
   21752:	4667      	mov	r7, ip
   21754:	077b      	lsls	r3, r7, #29
   21756:	d000      	beq.n	2175a <__aeabi_dsub+0x24a>
   21758:	e762      	b.n	21620 <__aeabi_dsub+0x110>
   2175a:	0763      	lsls	r3, r4, #29
   2175c:	08ff      	lsrs	r7, r7, #3
   2175e:	431f      	orrs	r7, r3
   21760:	2501      	movs	r5, #1
   21762:	4643      	mov	r3, r8
   21764:	08e4      	lsrs	r4, r4, #3
   21766:	401d      	ands	r5, r3
   21768:	e793      	b.n	21692 <__aeabi_dsub+0x182>
   2176a:	2d00      	cmp	r5, #0
   2176c:	d178      	bne.n	21860 <__aeabi_dsub+0x350>
   2176e:	1c75      	adds	r5, r6, #1
   21770:	056d      	lsls	r5, r5, #21
   21772:	0d6d      	lsrs	r5, r5, #21
   21774:	2d01      	cmp	r5, #1
   21776:	dc00      	bgt.n	2177a <__aeabi_dsub+0x26a>
   21778:	e0f2      	b.n	21960 <__aeabi_dsub+0x450>
   2177a:	4650      	mov	r0, sl
   2177c:	1a80      	subs	r0, r0, r2
   2177e:	4582      	cmp	sl, r0
   21780:	41bf      	sbcs	r7, r7
   21782:	1a65      	subs	r5, r4, r1
   21784:	427f      	negs	r7, r7
   21786:	1bed      	subs	r5, r5, r7
   21788:	4684      	mov	ip, r0
   2178a:	0228      	lsls	r0, r5, #8
   2178c:	d400      	bmi.n	21790 <__aeabi_dsub+0x280>
   2178e:	e08c      	b.n	218aa <__aeabi_dsub+0x39a>
   21790:	4650      	mov	r0, sl
   21792:	1a17      	subs	r7, r2, r0
   21794:	42ba      	cmp	r2, r7
   21796:	4192      	sbcs	r2, r2
   21798:	1b0c      	subs	r4, r1, r4
   2179a:	4255      	negs	r5, r2
   2179c:	1b65      	subs	r5, r4, r5
   2179e:	4698      	mov	r8, r3
   217a0:	e714      	b.n	215cc <__aeabi_dsub+0xbc>
   217a2:	2501      	movs	r5, #1
   217a4:	4643      	mov	r3, r8
   217a6:	2400      	movs	r4, #0
   217a8:	401d      	ands	r5, r3
   217aa:	2700      	movs	r7, #0
   217ac:	e755      	b.n	2165a <__aeabi_dsub+0x14a>
   217ae:	4c2a      	ldr	r4, [pc, #168]	; (21858 <__aeabi_dsub+0x348>)
   217b0:	1af6      	subs	r6, r6, r3
   217b2:	402c      	ands	r4, r5
   217b4:	e732      	b.n	2161c <__aeabi_dsub+0x10c>
   217b6:	003d      	movs	r5, r7
   217b8:	3828      	subs	r0, #40	; 0x28
   217ba:	4085      	lsls	r5, r0
   217bc:	2700      	movs	r7, #0
   217be:	e717      	b.n	215f0 <__aeabi_dsub+0xe0>
   217c0:	0038      	movs	r0, r7
   217c2:	f000 fa61 	bl	21c88 <__clzsi2>
   217c6:	3020      	adds	r0, #32
   217c8:	e706      	b.n	215d8 <__aeabi_dsub+0xc8>
   217ca:	430a      	orrs	r2, r1
   217cc:	0017      	movs	r7, r2
   217ce:	2100      	movs	r1, #0
   217d0:	1e7a      	subs	r2, r7, #1
   217d2:	4197      	sbcs	r7, r2
   217d4:	e6ee      	b.n	215b4 <__aeabi_dsub+0xa4>
   217d6:	2b00      	cmp	r3, #0
   217d8:	d000      	beq.n	217dc <__aeabi_dsub+0x2cc>
   217da:	e0e5      	b.n	219a8 <__aeabi_dsub+0x498>
   217dc:	1c73      	adds	r3, r6, #1
   217de:	469c      	mov	ip, r3
   217e0:	055b      	lsls	r3, r3, #21
   217e2:	0d5b      	lsrs	r3, r3, #21
   217e4:	2b01      	cmp	r3, #1
   217e6:	dc00      	bgt.n	217ea <__aeabi_dsub+0x2da>
   217e8:	e09f      	b.n	2192a <__aeabi_dsub+0x41a>
   217ea:	4b1a      	ldr	r3, [pc, #104]	; (21854 <__aeabi_dsub+0x344>)
   217ec:	459c      	cmp	ip, r3
   217ee:	d100      	bne.n	217f2 <__aeabi_dsub+0x2e2>
   217f0:	e0c5      	b.n	2197e <__aeabi_dsub+0x46e>
   217f2:	4452      	add	r2, sl
   217f4:	4552      	cmp	r2, sl
   217f6:	4180      	sbcs	r0, r0
   217f8:	1864      	adds	r4, r4, r1
   217fa:	4240      	negs	r0, r0
   217fc:	1824      	adds	r4, r4, r0
   217fe:	07e7      	lsls	r7, r4, #31
   21800:	0852      	lsrs	r2, r2, #1
   21802:	4317      	orrs	r7, r2
   21804:	0864      	lsrs	r4, r4, #1
   21806:	4666      	mov	r6, ip
   21808:	e708      	b.n	2161c <__aeabi_dsub+0x10c>
   2180a:	4812      	ldr	r0, [pc, #72]	; (21854 <__aeabi_dsub+0x344>)
   2180c:	4285      	cmp	r5, r0
   2180e:	d100      	bne.n	21812 <__aeabi_dsub+0x302>
   21810:	e085      	b.n	2191e <__aeabi_dsub+0x40e>
   21812:	001d      	movs	r5, r3
   21814:	e6bc      	b.n	21590 <__aeabi_dsub+0x80>
   21816:	0029      	movs	r1, r5
   21818:	3e1f      	subs	r6, #31
   2181a:	40f1      	lsrs	r1, r6
   2181c:	2b20      	cmp	r3, #32
   2181e:	d100      	bne.n	21822 <__aeabi_dsub+0x312>
   21820:	e07f      	b.n	21922 <__aeabi_dsub+0x412>
   21822:	2240      	movs	r2, #64	; 0x40
   21824:	1ad3      	subs	r3, r2, r3
   21826:	409d      	lsls	r5, r3
   21828:	432f      	orrs	r7, r5
   2182a:	1e7d      	subs	r5, r7, #1
   2182c:	41af      	sbcs	r7, r5
   2182e:	2400      	movs	r4, #0
   21830:	430f      	orrs	r7, r1
   21832:	2600      	movs	r6, #0
   21834:	e78e      	b.n	21754 <__aeabi_dsub+0x244>
   21836:	002b      	movs	r3, r5
   21838:	000f      	movs	r7, r1
   2183a:	3b20      	subs	r3, #32
   2183c:	40df      	lsrs	r7, r3
   2183e:	2d20      	cmp	r5, #32
   21840:	d071      	beq.n	21926 <__aeabi_dsub+0x416>
   21842:	2340      	movs	r3, #64	; 0x40
   21844:	1b5d      	subs	r5, r3, r5
   21846:	40a9      	lsls	r1, r5
   21848:	430a      	orrs	r2, r1
   2184a:	1e51      	subs	r1, r2, #1
   2184c:	418a      	sbcs	r2, r1
   2184e:	2100      	movs	r1, #0
   21850:	4317      	orrs	r7, r2
   21852:	e6af      	b.n	215b4 <__aeabi_dsub+0xa4>
   21854:	000007ff 	.word	0x000007ff
   21858:	ff7fffff 	.word	0xff7fffff
   2185c:	800fffff 	.word	0x800fffff
   21860:	2e00      	cmp	r6, #0
   21862:	d03e      	beq.n	218e2 <__aeabi_dsub+0x3d2>
   21864:	4eb3      	ldr	r6, [pc, #716]	; (21b34 <__aeabi_dsub+0x624>)
   21866:	45b4      	cmp	ip, r6
   21868:	d045      	beq.n	218f6 <__aeabi_dsub+0x3e6>
   2186a:	2680      	movs	r6, #128	; 0x80
   2186c:	0436      	lsls	r6, r6, #16
   2186e:	426d      	negs	r5, r5
   21870:	4334      	orrs	r4, r6
   21872:	2d38      	cmp	r5, #56	; 0x38
   21874:	dd00      	ble.n	21878 <__aeabi_dsub+0x368>
   21876:	e0a8      	b.n	219ca <__aeabi_dsub+0x4ba>
   21878:	2d1f      	cmp	r5, #31
   2187a:	dd00      	ble.n	2187e <__aeabi_dsub+0x36e>
   2187c:	e11f      	b.n	21abe <__aeabi_dsub+0x5ae>
   2187e:	2620      	movs	r6, #32
   21880:	0027      	movs	r7, r4
   21882:	4650      	mov	r0, sl
   21884:	1b76      	subs	r6, r6, r5
   21886:	40b7      	lsls	r7, r6
   21888:	40e8      	lsrs	r0, r5
   2188a:	4307      	orrs	r7, r0
   2188c:	4650      	mov	r0, sl
   2188e:	40b0      	lsls	r0, r6
   21890:	1e46      	subs	r6, r0, #1
   21892:	41b0      	sbcs	r0, r6
   21894:	40ec      	lsrs	r4, r5
   21896:	4338      	orrs	r0, r7
   21898:	1a17      	subs	r7, r2, r0
   2189a:	42ba      	cmp	r2, r7
   2189c:	4192      	sbcs	r2, r2
   2189e:	1b0c      	subs	r4, r1, r4
   218a0:	4252      	negs	r2, r2
   218a2:	1aa4      	subs	r4, r4, r2
   218a4:	4666      	mov	r6, ip
   218a6:	4698      	mov	r8, r3
   218a8:	e68b      	b.n	215c2 <__aeabi_dsub+0xb2>
   218aa:	4664      	mov	r4, ip
   218ac:	4667      	mov	r7, ip
   218ae:	432c      	orrs	r4, r5
   218b0:	d000      	beq.n	218b4 <__aeabi_dsub+0x3a4>
   218b2:	e68b      	b.n	215cc <__aeabi_dsub+0xbc>
   218b4:	2500      	movs	r5, #0
   218b6:	2600      	movs	r6, #0
   218b8:	2700      	movs	r7, #0
   218ba:	e6ea      	b.n	21692 <__aeabi_dsub+0x182>
   218bc:	001e      	movs	r6, r3
   218be:	e6ad      	b.n	2161c <__aeabi_dsub+0x10c>
   218c0:	2b1f      	cmp	r3, #31
   218c2:	dc60      	bgt.n	21986 <__aeabi_dsub+0x476>
   218c4:	2720      	movs	r7, #32
   218c6:	1af8      	subs	r0, r7, r3
   218c8:	000f      	movs	r7, r1
   218ca:	4684      	mov	ip, r0
   218cc:	4087      	lsls	r7, r0
   218ce:	0010      	movs	r0, r2
   218d0:	40d8      	lsrs	r0, r3
   218d2:	4307      	orrs	r7, r0
   218d4:	4660      	mov	r0, ip
   218d6:	4082      	lsls	r2, r0
   218d8:	1e50      	subs	r0, r2, #1
   218da:	4182      	sbcs	r2, r0
   218dc:	40d9      	lsrs	r1, r3
   218de:	4317      	orrs	r7, r2
   218e0:	e6f5      	b.n	216ce <__aeabi_dsub+0x1be>
   218e2:	0026      	movs	r6, r4
   218e4:	4650      	mov	r0, sl
   218e6:	4306      	orrs	r6, r0
   218e8:	d005      	beq.n	218f6 <__aeabi_dsub+0x3e6>
   218ea:	43ed      	mvns	r5, r5
   218ec:	2d00      	cmp	r5, #0
   218ee:	d0d3      	beq.n	21898 <__aeabi_dsub+0x388>
   218f0:	4e90      	ldr	r6, [pc, #576]	; (21b34 <__aeabi_dsub+0x624>)
   218f2:	45b4      	cmp	ip, r6
   218f4:	d1bd      	bne.n	21872 <__aeabi_dsub+0x362>
   218f6:	000c      	movs	r4, r1
   218f8:	0017      	movs	r7, r2
   218fa:	4666      	mov	r6, ip
   218fc:	4698      	mov	r8, r3
   218fe:	e68d      	b.n	2161c <__aeabi_dsub+0x10c>
   21900:	488c      	ldr	r0, [pc, #560]	; (21b34 <__aeabi_dsub+0x624>)
   21902:	4283      	cmp	r3, r0
   21904:	d00b      	beq.n	2191e <__aeabi_dsub+0x40e>
   21906:	4663      	mov	r3, ip
   21908:	e6d9      	b.n	216be <__aeabi_dsub+0x1ae>
   2190a:	2d00      	cmp	r5, #0
   2190c:	d000      	beq.n	21910 <__aeabi_dsub+0x400>
   2190e:	e096      	b.n	21a3e <__aeabi_dsub+0x52e>
   21910:	0008      	movs	r0, r1
   21912:	4310      	orrs	r0, r2
   21914:	d100      	bne.n	21918 <__aeabi_dsub+0x408>
   21916:	e0e2      	b.n	21ade <__aeabi_dsub+0x5ce>
   21918:	000c      	movs	r4, r1
   2191a:	0017      	movs	r7, r2
   2191c:	4698      	mov	r8, r3
   2191e:	4e85      	ldr	r6, [pc, #532]	; (21b34 <__aeabi_dsub+0x624>)
   21920:	e67c      	b.n	2161c <__aeabi_dsub+0x10c>
   21922:	2500      	movs	r5, #0
   21924:	e780      	b.n	21828 <__aeabi_dsub+0x318>
   21926:	2100      	movs	r1, #0
   21928:	e78e      	b.n	21848 <__aeabi_dsub+0x338>
   2192a:	0023      	movs	r3, r4
   2192c:	4650      	mov	r0, sl
   2192e:	4303      	orrs	r3, r0
   21930:	2e00      	cmp	r6, #0
   21932:	d000      	beq.n	21936 <__aeabi_dsub+0x426>
   21934:	e0a8      	b.n	21a88 <__aeabi_dsub+0x578>
   21936:	2b00      	cmp	r3, #0
   21938:	d100      	bne.n	2193c <__aeabi_dsub+0x42c>
   2193a:	e0de      	b.n	21afa <__aeabi_dsub+0x5ea>
   2193c:	000b      	movs	r3, r1
   2193e:	4313      	orrs	r3, r2
   21940:	d100      	bne.n	21944 <__aeabi_dsub+0x434>
   21942:	e66b      	b.n	2161c <__aeabi_dsub+0x10c>
   21944:	4452      	add	r2, sl
   21946:	4552      	cmp	r2, sl
   21948:	4180      	sbcs	r0, r0
   2194a:	1864      	adds	r4, r4, r1
   2194c:	4240      	negs	r0, r0
   2194e:	1824      	adds	r4, r4, r0
   21950:	0017      	movs	r7, r2
   21952:	0223      	lsls	r3, r4, #8
   21954:	d400      	bmi.n	21958 <__aeabi_dsub+0x448>
   21956:	e6fd      	b.n	21754 <__aeabi_dsub+0x244>
   21958:	4b77      	ldr	r3, [pc, #476]	; (21b38 <__aeabi_dsub+0x628>)
   2195a:	4666      	mov	r6, ip
   2195c:	401c      	ands	r4, r3
   2195e:	e65d      	b.n	2161c <__aeabi_dsub+0x10c>
   21960:	0025      	movs	r5, r4
   21962:	4650      	mov	r0, sl
   21964:	4305      	orrs	r5, r0
   21966:	2e00      	cmp	r6, #0
   21968:	d1cf      	bne.n	2190a <__aeabi_dsub+0x3fa>
   2196a:	2d00      	cmp	r5, #0
   2196c:	d14f      	bne.n	21a0e <__aeabi_dsub+0x4fe>
   2196e:	000c      	movs	r4, r1
   21970:	4314      	orrs	r4, r2
   21972:	d100      	bne.n	21976 <__aeabi_dsub+0x466>
   21974:	e0a0      	b.n	21ab8 <__aeabi_dsub+0x5a8>
   21976:	000c      	movs	r4, r1
   21978:	0017      	movs	r7, r2
   2197a:	4698      	mov	r8, r3
   2197c:	e64e      	b.n	2161c <__aeabi_dsub+0x10c>
   2197e:	4666      	mov	r6, ip
   21980:	2400      	movs	r4, #0
   21982:	2700      	movs	r7, #0
   21984:	e685      	b.n	21692 <__aeabi_dsub+0x182>
   21986:	001f      	movs	r7, r3
   21988:	0008      	movs	r0, r1
   2198a:	3f20      	subs	r7, #32
   2198c:	40f8      	lsrs	r0, r7
   2198e:	0007      	movs	r7, r0
   21990:	2b20      	cmp	r3, #32
   21992:	d100      	bne.n	21996 <__aeabi_dsub+0x486>
   21994:	e08e      	b.n	21ab4 <__aeabi_dsub+0x5a4>
   21996:	2040      	movs	r0, #64	; 0x40
   21998:	1ac3      	subs	r3, r0, r3
   2199a:	4099      	lsls	r1, r3
   2199c:	430a      	orrs	r2, r1
   2199e:	1e51      	subs	r1, r2, #1
   219a0:	418a      	sbcs	r2, r1
   219a2:	2100      	movs	r1, #0
   219a4:	4317      	orrs	r7, r2
   219a6:	e692      	b.n	216ce <__aeabi_dsub+0x1be>
   219a8:	2e00      	cmp	r6, #0
   219aa:	d114      	bne.n	219d6 <__aeabi_dsub+0x4c6>
   219ac:	0026      	movs	r6, r4
   219ae:	4650      	mov	r0, sl
   219b0:	4306      	orrs	r6, r0
   219b2:	d062      	beq.n	21a7a <__aeabi_dsub+0x56a>
   219b4:	43db      	mvns	r3, r3
   219b6:	2b00      	cmp	r3, #0
   219b8:	d15c      	bne.n	21a74 <__aeabi_dsub+0x564>
   219ba:	1887      	adds	r7, r0, r2
   219bc:	4297      	cmp	r7, r2
   219be:	4192      	sbcs	r2, r2
   219c0:	1864      	adds	r4, r4, r1
   219c2:	4252      	negs	r2, r2
   219c4:	18a4      	adds	r4, r4, r2
   219c6:	4666      	mov	r6, ip
   219c8:	e687      	b.n	216da <__aeabi_dsub+0x1ca>
   219ca:	4650      	mov	r0, sl
   219cc:	4320      	orrs	r0, r4
   219ce:	1e44      	subs	r4, r0, #1
   219d0:	41a0      	sbcs	r0, r4
   219d2:	2400      	movs	r4, #0
   219d4:	e760      	b.n	21898 <__aeabi_dsub+0x388>
   219d6:	4e57      	ldr	r6, [pc, #348]	; (21b34 <__aeabi_dsub+0x624>)
   219d8:	45b4      	cmp	ip, r6
   219da:	d04e      	beq.n	21a7a <__aeabi_dsub+0x56a>
   219dc:	2680      	movs	r6, #128	; 0x80
   219de:	0436      	lsls	r6, r6, #16
   219e0:	425b      	negs	r3, r3
   219e2:	4334      	orrs	r4, r6
   219e4:	2b38      	cmp	r3, #56	; 0x38
   219e6:	dd00      	ble.n	219ea <__aeabi_dsub+0x4da>
   219e8:	e07f      	b.n	21aea <__aeabi_dsub+0x5da>
   219ea:	2b1f      	cmp	r3, #31
   219ec:	dd00      	ble.n	219f0 <__aeabi_dsub+0x4e0>
   219ee:	e08b      	b.n	21b08 <__aeabi_dsub+0x5f8>
   219f0:	2620      	movs	r6, #32
   219f2:	0027      	movs	r7, r4
   219f4:	4650      	mov	r0, sl
   219f6:	1af6      	subs	r6, r6, r3
   219f8:	40b7      	lsls	r7, r6
   219fa:	40d8      	lsrs	r0, r3
   219fc:	4307      	orrs	r7, r0
   219fe:	4650      	mov	r0, sl
   21a00:	40b0      	lsls	r0, r6
   21a02:	1e46      	subs	r6, r0, #1
   21a04:	41b0      	sbcs	r0, r6
   21a06:	4307      	orrs	r7, r0
   21a08:	40dc      	lsrs	r4, r3
   21a0a:	18bf      	adds	r7, r7, r2
   21a0c:	e7d6      	b.n	219bc <__aeabi_dsub+0x4ac>
   21a0e:	000d      	movs	r5, r1
   21a10:	4315      	orrs	r5, r2
   21a12:	d100      	bne.n	21a16 <__aeabi_dsub+0x506>
   21a14:	e602      	b.n	2161c <__aeabi_dsub+0x10c>
   21a16:	4650      	mov	r0, sl
   21a18:	1a80      	subs	r0, r0, r2
   21a1a:	4582      	cmp	sl, r0
   21a1c:	41bf      	sbcs	r7, r7
   21a1e:	1a65      	subs	r5, r4, r1
   21a20:	427f      	negs	r7, r7
   21a22:	1bed      	subs	r5, r5, r7
   21a24:	4684      	mov	ip, r0
   21a26:	0228      	lsls	r0, r5, #8
   21a28:	d400      	bmi.n	21a2c <__aeabi_dsub+0x51c>
   21a2a:	e68d      	b.n	21748 <__aeabi_dsub+0x238>
   21a2c:	4650      	mov	r0, sl
   21a2e:	1a17      	subs	r7, r2, r0
   21a30:	42ba      	cmp	r2, r7
   21a32:	4192      	sbcs	r2, r2
   21a34:	1b0c      	subs	r4, r1, r4
   21a36:	4252      	negs	r2, r2
   21a38:	1aa4      	subs	r4, r4, r2
   21a3a:	4698      	mov	r8, r3
   21a3c:	e5ee      	b.n	2161c <__aeabi_dsub+0x10c>
   21a3e:	000d      	movs	r5, r1
   21a40:	4315      	orrs	r5, r2
   21a42:	d100      	bne.n	21a46 <__aeabi_dsub+0x536>
   21a44:	e76b      	b.n	2191e <__aeabi_dsub+0x40e>
   21a46:	4650      	mov	r0, sl
   21a48:	0767      	lsls	r7, r4, #29
   21a4a:	08c0      	lsrs	r0, r0, #3
   21a4c:	4307      	orrs	r7, r0
   21a4e:	2080      	movs	r0, #128	; 0x80
   21a50:	08e4      	lsrs	r4, r4, #3
   21a52:	0300      	lsls	r0, r0, #12
   21a54:	4204      	tst	r4, r0
   21a56:	d007      	beq.n	21a68 <__aeabi_dsub+0x558>
   21a58:	08cd      	lsrs	r5, r1, #3
   21a5a:	4205      	tst	r5, r0
   21a5c:	d104      	bne.n	21a68 <__aeabi_dsub+0x558>
   21a5e:	002c      	movs	r4, r5
   21a60:	4698      	mov	r8, r3
   21a62:	08d7      	lsrs	r7, r2, #3
   21a64:	0749      	lsls	r1, r1, #29
   21a66:	430f      	orrs	r7, r1
   21a68:	0f7b      	lsrs	r3, r7, #29
   21a6a:	00e4      	lsls	r4, r4, #3
   21a6c:	431c      	orrs	r4, r3
   21a6e:	00ff      	lsls	r7, r7, #3
   21a70:	4e30      	ldr	r6, [pc, #192]	; (21b34 <__aeabi_dsub+0x624>)
   21a72:	e5d3      	b.n	2161c <__aeabi_dsub+0x10c>
   21a74:	4e2f      	ldr	r6, [pc, #188]	; (21b34 <__aeabi_dsub+0x624>)
   21a76:	45b4      	cmp	ip, r6
   21a78:	d1b4      	bne.n	219e4 <__aeabi_dsub+0x4d4>
   21a7a:	000c      	movs	r4, r1
   21a7c:	0017      	movs	r7, r2
   21a7e:	4666      	mov	r6, ip
   21a80:	e5cc      	b.n	2161c <__aeabi_dsub+0x10c>
   21a82:	2700      	movs	r7, #0
   21a84:	2400      	movs	r4, #0
   21a86:	e5e8      	b.n	2165a <__aeabi_dsub+0x14a>
   21a88:	2b00      	cmp	r3, #0
   21a8a:	d039      	beq.n	21b00 <__aeabi_dsub+0x5f0>
   21a8c:	000b      	movs	r3, r1
   21a8e:	4313      	orrs	r3, r2
   21a90:	d100      	bne.n	21a94 <__aeabi_dsub+0x584>
   21a92:	e744      	b.n	2191e <__aeabi_dsub+0x40e>
   21a94:	08c0      	lsrs	r0, r0, #3
   21a96:	0767      	lsls	r7, r4, #29
   21a98:	4307      	orrs	r7, r0
   21a9a:	2080      	movs	r0, #128	; 0x80
   21a9c:	08e4      	lsrs	r4, r4, #3
   21a9e:	0300      	lsls	r0, r0, #12
   21aa0:	4204      	tst	r4, r0
   21aa2:	d0e1      	beq.n	21a68 <__aeabi_dsub+0x558>
   21aa4:	08cb      	lsrs	r3, r1, #3
   21aa6:	4203      	tst	r3, r0
   21aa8:	d1de      	bne.n	21a68 <__aeabi_dsub+0x558>
   21aaa:	08d7      	lsrs	r7, r2, #3
   21aac:	0749      	lsls	r1, r1, #29
   21aae:	430f      	orrs	r7, r1
   21ab0:	001c      	movs	r4, r3
   21ab2:	e7d9      	b.n	21a68 <__aeabi_dsub+0x558>
   21ab4:	2100      	movs	r1, #0
   21ab6:	e771      	b.n	2199c <__aeabi_dsub+0x48c>
   21ab8:	2500      	movs	r5, #0
   21aba:	2700      	movs	r7, #0
   21abc:	e5e9      	b.n	21692 <__aeabi_dsub+0x182>
   21abe:	002e      	movs	r6, r5
   21ac0:	0027      	movs	r7, r4
   21ac2:	3e20      	subs	r6, #32
   21ac4:	40f7      	lsrs	r7, r6
   21ac6:	2d20      	cmp	r5, #32
   21ac8:	d02f      	beq.n	21b2a <__aeabi_dsub+0x61a>
   21aca:	2640      	movs	r6, #64	; 0x40
   21acc:	1b75      	subs	r5, r6, r5
   21ace:	40ac      	lsls	r4, r5
   21ad0:	4650      	mov	r0, sl
   21ad2:	4320      	orrs	r0, r4
   21ad4:	1e44      	subs	r4, r0, #1
   21ad6:	41a0      	sbcs	r0, r4
   21ad8:	2400      	movs	r4, #0
   21ada:	4338      	orrs	r0, r7
   21adc:	e6dc      	b.n	21898 <__aeabi_dsub+0x388>
   21ade:	2480      	movs	r4, #128	; 0x80
   21ae0:	2500      	movs	r5, #0
   21ae2:	0324      	lsls	r4, r4, #12
   21ae4:	4e13      	ldr	r6, [pc, #76]	; (21b34 <__aeabi_dsub+0x624>)
   21ae6:	2700      	movs	r7, #0
   21ae8:	e5d3      	b.n	21692 <__aeabi_dsub+0x182>
   21aea:	4650      	mov	r0, sl
   21aec:	4320      	orrs	r0, r4
   21aee:	0007      	movs	r7, r0
   21af0:	1e78      	subs	r0, r7, #1
   21af2:	4187      	sbcs	r7, r0
   21af4:	2400      	movs	r4, #0
   21af6:	18bf      	adds	r7, r7, r2
   21af8:	e760      	b.n	219bc <__aeabi_dsub+0x4ac>
   21afa:	000c      	movs	r4, r1
   21afc:	0017      	movs	r7, r2
   21afe:	e58d      	b.n	2161c <__aeabi_dsub+0x10c>
   21b00:	000c      	movs	r4, r1
   21b02:	0017      	movs	r7, r2
   21b04:	4e0b      	ldr	r6, [pc, #44]	; (21b34 <__aeabi_dsub+0x624>)
   21b06:	e589      	b.n	2161c <__aeabi_dsub+0x10c>
   21b08:	001e      	movs	r6, r3
   21b0a:	0027      	movs	r7, r4
   21b0c:	3e20      	subs	r6, #32
   21b0e:	40f7      	lsrs	r7, r6
   21b10:	2b20      	cmp	r3, #32
   21b12:	d00c      	beq.n	21b2e <__aeabi_dsub+0x61e>
   21b14:	2640      	movs	r6, #64	; 0x40
   21b16:	1af3      	subs	r3, r6, r3
   21b18:	409c      	lsls	r4, r3
   21b1a:	4650      	mov	r0, sl
   21b1c:	4320      	orrs	r0, r4
   21b1e:	1e44      	subs	r4, r0, #1
   21b20:	41a0      	sbcs	r0, r4
   21b22:	4307      	orrs	r7, r0
   21b24:	2400      	movs	r4, #0
   21b26:	18bf      	adds	r7, r7, r2
   21b28:	e748      	b.n	219bc <__aeabi_dsub+0x4ac>
   21b2a:	2400      	movs	r4, #0
   21b2c:	e7d0      	b.n	21ad0 <__aeabi_dsub+0x5c0>
   21b2e:	2400      	movs	r4, #0
   21b30:	e7f3      	b.n	21b1a <__aeabi_dsub+0x60a>
   21b32:	46c0      	nop			; (mov r8, r8)
   21b34:	000007ff 	.word	0x000007ff
   21b38:	ff7fffff 	.word	0xff7fffff

00021b3c <__aeabi_d2iz>:
   21b3c:	b530      	push	{r4, r5, lr}
   21b3e:	4d13      	ldr	r5, [pc, #76]	; (21b8c <__aeabi_d2iz+0x50>)
   21b40:	030a      	lsls	r2, r1, #12
   21b42:	004b      	lsls	r3, r1, #1
   21b44:	0b12      	lsrs	r2, r2, #12
   21b46:	0d5b      	lsrs	r3, r3, #21
   21b48:	0fc9      	lsrs	r1, r1, #31
   21b4a:	2400      	movs	r4, #0
   21b4c:	42ab      	cmp	r3, r5
   21b4e:	dd10      	ble.n	21b72 <__aeabi_d2iz+0x36>
   21b50:	4c0f      	ldr	r4, [pc, #60]	; (21b90 <__aeabi_d2iz+0x54>)
   21b52:	42a3      	cmp	r3, r4
   21b54:	dc0f      	bgt.n	21b76 <__aeabi_d2iz+0x3a>
   21b56:	2480      	movs	r4, #128	; 0x80
   21b58:	4d0e      	ldr	r5, [pc, #56]	; (21b94 <__aeabi_d2iz+0x58>)
   21b5a:	0364      	lsls	r4, r4, #13
   21b5c:	4322      	orrs	r2, r4
   21b5e:	1aed      	subs	r5, r5, r3
   21b60:	2d1f      	cmp	r5, #31
   21b62:	dd0b      	ble.n	21b7c <__aeabi_d2iz+0x40>
   21b64:	480c      	ldr	r0, [pc, #48]	; (21b98 <__aeabi_d2iz+0x5c>)
   21b66:	1ac3      	subs	r3, r0, r3
   21b68:	40da      	lsrs	r2, r3
   21b6a:	4254      	negs	r4, r2
   21b6c:	2900      	cmp	r1, #0
   21b6e:	d100      	bne.n	21b72 <__aeabi_d2iz+0x36>
   21b70:	0014      	movs	r4, r2
   21b72:	0020      	movs	r0, r4
   21b74:	bd30      	pop	{r4, r5, pc}
   21b76:	4b09      	ldr	r3, [pc, #36]	; (21b9c <__aeabi_d2iz+0x60>)
   21b78:	18cc      	adds	r4, r1, r3
   21b7a:	e7fa      	b.n	21b72 <__aeabi_d2iz+0x36>
   21b7c:	4c08      	ldr	r4, [pc, #32]	; (21ba0 <__aeabi_d2iz+0x64>)
   21b7e:	40e8      	lsrs	r0, r5
   21b80:	46a4      	mov	ip, r4
   21b82:	4463      	add	r3, ip
   21b84:	409a      	lsls	r2, r3
   21b86:	4302      	orrs	r2, r0
   21b88:	e7ef      	b.n	21b6a <__aeabi_d2iz+0x2e>
   21b8a:	46c0      	nop			; (mov r8, r8)
   21b8c:	000003fe 	.word	0x000003fe
   21b90:	0000041d 	.word	0x0000041d
   21b94:	00000433 	.word	0x00000433
   21b98:	00000413 	.word	0x00000413
   21b9c:	7fffffff 	.word	0x7fffffff
   21ba0:	fffffbed 	.word	0xfffffbed

00021ba4 <__aeabi_ui2d>:
   21ba4:	b510      	push	{r4, lr}
   21ba6:	1e04      	subs	r4, r0, #0
   21ba8:	d028      	beq.n	21bfc <__aeabi_ui2d+0x58>
   21baa:	f000 f86d 	bl	21c88 <__clzsi2>
   21bae:	4b15      	ldr	r3, [pc, #84]	; (21c04 <__aeabi_ui2d+0x60>)
   21bb0:	4a15      	ldr	r2, [pc, #84]	; (21c08 <__aeabi_ui2d+0x64>)
   21bb2:	1a1b      	subs	r3, r3, r0
   21bb4:	1ad2      	subs	r2, r2, r3
   21bb6:	2a1f      	cmp	r2, #31
   21bb8:	dd15      	ble.n	21be6 <__aeabi_ui2d+0x42>
   21bba:	4a14      	ldr	r2, [pc, #80]	; (21c0c <__aeabi_ui2d+0x68>)
   21bbc:	1ad2      	subs	r2, r2, r3
   21bbe:	4094      	lsls	r4, r2
   21bc0:	2200      	movs	r2, #0
   21bc2:	0324      	lsls	r4, r4, #12
   21bc4:	055b      	lsls	r3, r3, #21
   21bc6:	0b24      	lsrs	r4, r4, #12
   21bc8:	0d5b      	lsrs	r3, r3, #21
   21bca:	2100      	movs	r1, #0
   21bcc:	0010      	movs	r0, r2
   21bce:	0324      	lsls	r4, r4, #12
   21bd0:	0d0a      	lsrs	r2, r1, #20
   21bd2:	0b24      	lsrs	r4, r4, #12
   21bd4:	0512      	lsls	r2, r2, #20
   21bd6:	4322      	orrs	r2, r4
   21bd8:	4c0d      	ldr	r4, [pc, #52]	; (21c10 <__aeabi_ui2d+0x6c>)
   21bda:	051b      	lsls	r3, r3, #20
   21bdc:	4022      	ands	r2, r4
   21bde:	4313      	orrs	r3, r2
   21be0:	005b      	lsls	r3, r3, #1
   21be2:	0859      	lsrs	r1, r3, #1
   21be4:	bd10      	pop	{r4, pc}
   21be6:	0021      	movs	r1, r4
   21be8:	4091      	lsls	r1, r2
   21bea:	000a      	movs	r2, r1
   21bec:	210b      	movs	r1, #11
   21bee:	1a08      	subs	r0, r1, r0
   21bf0:	40c4      	lsrs	r4, r0
   21bf2:	055b      	lsls	r3, r3, #21
   21bf4:	0324      	lsls	r4, r4, #12
   21bf6:	0b24      	lsrs	r4, r4, #12
   21bf8:	0d5b      	lsrs	r3, r3, #21
   21bfa:	e7e6      	b.n	21bca <__aeabi_ui2d+0x26>
   21bfc:	2300      	movs	r3, #0
   21bfe:	2400      	movs	r4, #0
   21c00:	2200      	movs	r2, #0
   21c02:	e7e2      	b.n	21bca <__aeabi_ui2d+0x26>
   21c04:	0000041e 	.word	0x0000041e
   21c08:	00000433 	.word	0x00000433
   21c0c:	00000413 	.word	0x00000413
   21c10:	800fffff 	.word	0x800fffff

00021c14 <__aeabi_cfrcmple>:
   21c14:	4684      	mov	ip, r0
   21c16:	1c08      	adds	r0, r1, #0
   21c18:	4661      	mov	r1, ip
   21c1a:	e7ff      	b.n	21c1c <__aeabi_cfcmpeq>

00021c1c <__aeabi_cfcmpeq>:
   21c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21c1e:	f000 f8b7 	bl	21d90 <__lesf2>
   21c22:	2800      	cmp	r0, #0
   21c24:	d401      	bmi.n	21c2a <__aeabi_cfcmpeq+0xe>
   21c26:	2100      	movs	r1, #0
   21c28:	42c8      	cmn	r0, r1
   21c2a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00021c2c <__aeabi_fcmpeq>:
   21c2c:	b510      	push	{r4, lr}
   21c2e:	f000 f849 	bl	21cc4 <__eqsf2>
   21c32:	4240      	negs	r0, r0
   21c34:	3001      	adds	r0, #1
   21c36:	bd10      	pop	{r4, pc}

00021c38 <__aeabi_fcmplt>:
   21c38:	b510      	push	{r4, lr}
   21c3a:	f000 f8a9 	bl	21d90 <__lesf2>
   21c3e:	2800      	cmp	r0, #0
   21c40:	db01      	blt.n	21c46 <__aeabi_fcmplt+0xe>
   21c42:	2000      	movs	r0, #0
   21c44:	bd10      	pop	{r4, pc}
   21c46:	2001      	movs	r0, #1
   21c48:	bd10      	pop	{r4, pc}
   21c4a:	46c0      	nop			; (mov r8, r8)

00021c4c <__aeabi_fcmple>:
   21c4c:	b510      	push	{r4, lr}
   21c4e:	f000 f89f 	bl	21d90 <__lesf2>
   21c52:	2800      	cmp	r0, #0
   21c54:	dd01      	ble.n	21c5a <__aeabi_fcmple+0xe>
   21c56:	2000      	movs	r0, #0
   21c58:	bd10      	pop	{r4, pc}
   21c5a:	2001      	movs	r0, #1
   21c5c:	bd10      	pop	{r4, pc}
   21c5e:	46c0      	nop			; (mov r8, r8)

00021c60 <__aeabi_fcmpgt>:
   21c60:	b510      	push	{r4, lr}
   21c62:	f000 f855 	bl	21d10 <__gesf2>
   21c66:	2800      	cmp	r0, #0
   21c68:	dc01      	bgt.n	21c6e <__aeabi_fcmpgt+0xe>
   21c6a:	2000      	movs	r0, #0
   21c6c:	bd10      	pop	{r4, pc}
   21c6e:	2001      	movs	r0, #1
   21c70:	bd10      	pop	{r4, pc}
   21c72:	46c0      	nop			; (mov r8, r8)

00021c74 <__aeabi_fcmpge>:
   21c74:	b510      	push	{r4, lr}
   21c76:	f000 f84b 	bl	21d10 <__gesf2>
   21c7a:	2800      	cmp	r0, #0
   21c7c:	da01      	bge.n	21c82 <__aeabi_fcmpge+0xe>
   21c7e:	2000      	movs	r0, #0
   21c80:	bd10      	pop	{r4, pc}
   21c82:	2001      	movs	r0, #1
   21c84:	bd10      	pop	{r4, pc}
   21c86:	46c0      	nop			; (mov r8, r8)

00021c88 <__clzsi2>:
   21c88:	211c      	movs	r1, #28
   21c8a:	2301      	movs	r3, #1
   21c8c:	041b      	lsls	r3, r3, #16
   21c8e:	4298      	cmp	r0, r3
   21c90:	d301      	bcc.n	21c96 <__clzsi2+0xe>
   21c92:	0c00      	lsrs	r0, r0, #16
   21c94:	3910      	subs	r1, #16
   21c96:	0a1b      	lsrs	r3, r3, #8
   21c98:	4298      	cmp	r0, r3
   21c9a:	d301      	bcc.n	21ca0 <__clzsi2+0x18>
   21c9c:	0a00      	lsrs	r0, r0, #8
   21c9e:	3908      	subs	r1, #8
   21ca0:	091b      	lsrs	r3, r3, #4
   21ca2:	4298      	cmp	r0, r3
   21ca4:	d301      	bcc.n	21caa <__clzsi2+0x22>
   21ca6:	0900      	lsrs	r0, r0, #4
   21ca8:	3904      	subs	r1, #4
   21caa:	a202      	add	r2, pc, #8	; (adr r2, 21cb4 <__clzsi2+0x2c>)
   21cac:	5c10      	ldrb	r0, [r2, r0]
   21cae:	1840      	adds	r0, r0, r1
   21cb0:	4770      	bx	lr
   21cb2:	46c0      	nop			; (mov r8, r8)
   21cb4:	02020304 	.word	0x02020304
   21cb8:	01010101 	.word	0x01010101
	...

00021cc4 <__eqsf2>:
   21cc4:	b570      	push	{r4, r5, r6, lr}
   21cc6:	0042      	lsls	r2, r0, #1
   21cc8:	0245      	lsls	r5, r0, #9
   21cca:	024e      	lsls	r6, r1, #9
   21ccc:	004c      	lsls	r4, r1, #1
   21cce:	0fc3      	lsrs	r3, r0, #31
   21cd0:	0a6d      	lsrs	r5, r5, #9
   21cd2:	0e12      	lsrs	r2, r2, #24
   21cd4:	0a76      	lsrs	r6, r6, #9
   21cd6:	0e24      	lsrs	r4, r4, #24
   21cd8:	0fc9      	lsrs	r1, r1, #31
   21cda:	2001      	movs	r0, #1
   21cdc:	2aff      	cmp	r2, #255	; 0xff
   21cde:	d006      	beq.n	21cee <__eqsf2+0x2a>
   21ce0:	2cff      	cmp	r4, #255	; 0xff
   21ce2:	d003      	beq.n	21cec <__eqsf2+0x28>
   21ce4:	42a2      	cmp	r2, r4
   21ce6:	d101      	bne.n	21cec <__eqsf2+0x28>
   21ce8:	42b5      	cmp	r5, r6
   21cea:	d006      	beq.n	21cfa <__eqsf2+0x36>
   21cec:	bd70      	pop	{r4, r5, r6, pc}
   21cee:	2d00      	cmp	r5, #0
   21cf0:	d1fc      	bne.n	21cec <__eqsf2+0x28>
   21cf2:	2cff      	cmp	r4, #255	; 0xff
   21cf4:	d1fa      	bne.n	21cec <__eqsf2+0x28>
   21cf6:	2e00      	cmp	r6, #0
   21cf8:	d1f8      	bne.n	21cec <__eqsf2+0x28>
   21cfa:	428b      	cmp	r3, r1
   21cfc:	d006      	beq.n	21d0c <__eqsf2+0x48>
   21cfe:	2001      	movs	r0, #1
   21d00:	2a00      	cmp	r2, #0
   21d02:	d1f3      	bne.n	21cec <__eqsf2+0x28>
   21d04:	0028      	movs	r0, r5
   21d06:	1e45      	subs	r5, r0, #1
   21d08:	41a8      	sbcs	r0, r5
   21d0a:	e7ef      	b.n	21cec <__eqsf2+0x28>
   21d0c:	2000      	movs	r0, #0
   21d0e:	e7ed      	b.n	21cec <__eqsf2+0x28>

00021d10 <__gesf2>:
   21d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d12:	0042      	lsls	r2, r0, #1
   21d14:	0245      	lsls	r5, r0, #9
   21d16:	024c      	lsls	r4, r1, #9
   21d18:	0fc3      	lsrs	r3, r0, #31
   21d1a:	0048      	lsls	r0, r1, #1
   21d1c:	0a6d      	lsrs	r5, r5, #9
   21d1e:	0e12      	lsrs	r2, r2, #24
   21d20:	0a64      	lsrs	r4, r4, #9
   21d22:	0e00      	lsrs	r0, r0, #24
   21d24:	0fc9      	lsrs	r1, r1, #31
   21d26:	2aff      	cmp	r2, #255	; 0xff
   21d28:	d01e      	beq.n	21d68 <__gesf2+0x58>
   21d2a:	28ff      	cmp	r0, #255	; 0xff
   21d2c:	d021      	beq.n	21d72 <__gesf2+0x62>
   21d2e:	2a00      	cmp	r2, #0
   21d30:	d10a      	bne.n	21d48 <__gesf2+0x38>
   21d32:	426e      	negs	r6, r5
   21d34:	416e      	adcs	r6, r5
   21d36:	b2f6      	uxtb	r6, r6
   21d38:	2800      	cmp	r0, #0
   21d3a:	d10f      	bne.n	21d5c <__gesf2+0x4c>
   21d3c:	2c00      	cmp	r4, #0
   21d3e:	d10d      	bne.n	21d5c <__gesf2+0x4c>
   21d40:	2000      	movs	r0, #0
   21d42:	2d00      	cmp	r5, #0
   21d44:	d009      	beq.n	21d5a <__gesf2+0x4a>
   21d46:	e005      	b.n	21d54 <__gesf2+0x44>
   21d48:	2800      	cmp	r0, #0
   21d4a:	d101      	bne.n	21d50 <__gesf2+0x40>
   21d4c:	2c00      	cmp	r4, #0
   21d4e:	d001      	beq.n	21d54 <__gesf2+0x44>
   21d50:	428b      	cmp	r3, r1
   21d52:	d011      	beq.n	21d78 <__gesf2+0x68>
   21d54:	2101      	movs	r1, #1
   21d56:	4258      	negs	r0, r3
   21d58:	4308      	orrs	r0, r1
   21d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d5c:	2e00      	cmp	r6, #0
   21d5e:	d0f7      	beq.n	21d50 <__gesf2+0x40>
   21d60:	2001      	movs	r0, #1
   21d62:	3901      	subs	r1, #1
   21d64:	4308      	orrs	r0, r1
   21d66:	e7f8      	b.n	21d5a <__gesf2+0x4a>
   21d68:	2d00      	cmp	r5, #0
   21d6a:	d0de      	beq.n	21d2a <__gesf2+0x1a>
   21d6c:	2002      	movs	r0, #2
   21d6e:	4240      	negs	r0, r0
   21d70:	e7f3      	b.n	21d5a <__gesf2+0x4a>
   21d72:	2c00      	cmp	r4, #0
   21d74:	d0db      	beq.n	21d2e <__gesf2+0x1e>
   21d76:	e7f9      	b.n	21d6c <__gesf2+0x5c>
   21d78:	4282      	cmp	r2, r0
   21d7a:	dceb      	bgt.n	21d54 <__gesf2+0x44>
   21d7c:	db04      	blt.n	21d88 <__gesf2+0x78>
   21d7e:	42a5      	cmp	r5, r4
   21d80:	d8e8      	bhi.n	21d54 <__gesf2+0x44>
   21d82:	2000      	movs	r0, #0
   21d84:	42a5      	cmp	r5, r4
   21d86:	d2e8      	bcs.n	21d5a <__gesf2+0x4a>
   21d88:	2101      	movs	r1, #1
   21d8a:	1e58      	subs	r0, r3, #1
   21d8c:	4308      	orrs	r0, r1
   21d8e:	e7e4      	b.n	21d5a <__gesf2+0x4a>

00021d90 <__lesf2>:
   21d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d92:	0042      	lsls	r2, r0, #1
   21d94:	024d      	lsls	r5, r1, #9
   21d96:	004c      	lsls	r4, r1, #1
   21d98:	0246      	lsls	r6, r0, #9
   21d9a:	0a76      	lsrs	r6, r6, #9
   21d9c:	0e12      	lsrs	r2, r2, #24
   21d9e:	0fc3      	lsrs	r3, r0, #31
   21da0:	0a6d      	lsrs	r5, r5, #9
   21da2:	0e24      	lsrs	r4, r4, #24
   21da4:	0fc9      	lsrs	r1, r1, #31
   21da6:	2aff      	cmp	r2, #255	; 0xff
   21da8:	d016      	beq.n	21dd8 <__lesf2+0x48>
   21daa:	2cff      	cmp	r4, #255	; 0xff
   21dac:	d018      	beq.n	21de0 <__lesf2+0x50>
   21dae:	2a00      	cmp	r2, #0
   21db0:	d10a      	bne.n	21dc8 <__lesf2+0x38>
   21db2:	4270      	negs	r0, r6
   21db4:	4170      	adcs	r0, r6
   21db6:	b2c0      	uxtb	r0, r0
   21db8:	2c00      	cmp	r4, #0
   21dba:	d015      	beq.n	21de8 <__lesf2+0x58>
   21dbc:	2800      	cmp	r0, #0
   21dbe:	d005      	beq.n	21dcc <__lesf2+0x3c>
   21dc0:	2001      	movs	r0, #1
   21dc2:	3901      	subs	r1, #1
   21dc4:	4308      	orrs	r0, r1
   21dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21dc8:	2c00      	cmp	r4, #0
   21dca:	d013      	beq.n	21df4 <__lesf2+0x64>
   21dcc:	4299      	cmp	r1, r3
   21dce:	d014      	beq.n	21dfa <__lesf2+0x6a>
   21dd0:	2001      	movs	r0, #1
   21dd2:	425b      	negs	r3, r3
   21dd4:	4318      	orrs	r0, r3
   21dd6:	e7f6      	b.n	21dc6 <__lesf2+0x36>
   21dd8:	2002      	movs	r0, #2
   21dda:	2e00      	cmp	r6, #0
   21ddc:	d1f3      	bne.n	21dc6 <__lesf2+0x36>
   21dde:	e7e4      	b.n	21daa <__lesf2+0x1a>
   21de0:	2002      	movs	r0, #2
   21de2:	2d00      	cmp	r5, #0
   21de4:	d1ef      	bne.n	21dc6 <__lesf2+0x36>
   21de6:	e7e2      	b.n	21dae <__lesf2+0x1e>
   21de8:	2d00      	cmp	r5, #0
   21dea:	d1e7      	bne.n	21dbc <__lesf2+0x2c>
   21dec:	2000      	movs	r0, #0
   21dee:	2e00      	cmp	r6, #0
   21df0:	d0e9      	beq.n	21dc6 <__lesf2+0x36>
   21df2:	e7ed      	b.n	21dd0 <__lesf2+0x40>
   21df4:	2d00      	cmp	r5, #0
   21df6:	d1e9      	bne.n	21dcc <__lesf2+0x3c>
   21df8:	e7ea      	b.n	21dd0 <__lesf2+0x40>
   21dfa:	42a2      	cmp	r2, r4
   21dfc:	dc06      	bgt.n	21e0c <__lesf2+0x7c>
   21dfe:	dbdf      	blt.n	21dc0 <__lesf2+0x30>
   21e00:	42ae      	cmp	r6, r5
   21e02:	d803      	bhi.n	21e0c <__lesf2+0x7c>
   21e04:	2000      	movs	r0, #0
   21e06:	42ae      	cmp	r6, r5
   21e08:	d3da      	bcc.n	21dc0 <__lesf2+0x30>
   21e0a:	e7dc      	b.n	21dc6 <__lesf2+0x36>
   21e0c:	2001      	movs	r0, #1
   21e0e:	4249      	negs	r1, r1
   21e10:	4308      	orrs	r0, r1
   21e12:	e7d8      	b.n	21dc6 <__lesf2+0x36>

00021e14 <__libc_init_array>:
   21e14:	b570      	push	{r4, r5, r6, lr}
   21e16:	2600      	movs	r6, #0
   21e18:	4d0c      	ldr	r5, [pc, #48]	; (21e4c <__libc_init_array+0x38>)
   21e1a:	4c0d      	ldr	r4, [pc, #52]	; (21e50 <__libc_init_array+0x3c>)
   21e1c:	1b64      	subs	r4, r4, r5
   21e1e:	10a4      	asrs	r4, r4, #2
   21e20:	42a6      	cmp	r6, r4
   21e22:	d109      	bne.n	21e38 <__libc_init_array+0x24>
   21e24:	2600      	movs	r6, #0
   21e26:	f002 fd4b 	bl	248c0 <_init>
   21e2a:	4d0a      	ldr	r5, [pc, #40]	; (21e54 <__libc_init_array+0x40>)
   21e2c:	4c0a      	ldr	r4, [pc, #40]	; (21e58 <__libc_init_array+0x44>)
   21e2e:	1b64      	subs	r4, r4, r5
   21e30:	10a4      	asrs	r4, r4, #2
   21e32:	42a6      	cmp	r6, r4
   21e34:	d105      	bne.n	21e42 <__libc_init_array+0x2e>
   21e36:	bd70      	pop	{r4, r5, r6, pc}
   21e38:	00b3      	lsls	r3, r6, #2
   21e3a:	58eb      	ldr	r3, [r5, r3]
   21e3c:	4798      	blx	r3
   21e3e:	3601      	adds	r6, #1
   21e40:	e7ee      	b.n	21e20 <__libc_init_array+0xc>
   21e42:	00b3      	lsls	r3, r6, #2
   21e44:	58eb      	ldr	r3, [r5, r3]
   21e46:	4798      	blx	r3
   21e48:	3601      	adds	r6, #1
   21e4a:	e7f2      	b.n	21e32 <__libc_init_array+0x1e>
   21e4c:	000248cc 	.word	0x000248cc
   21e50:	000248cc 	.word	0x000248cc
   21e54:	000248cc 	.word	0x000248cc
   21e58:	000248d0 	.word	0x000248d0

00021e5c <malloc>:
   21e5c:	b510      	push	{r4, lr}
   21e5e:	4b03      	ldr	r3, [pc, #12]	; (21e6c <malloc+0x10>)
   21e60:	0001      	movs	r1, r0
   21e62:	6818      	ldr	r0, [r3, #0]
   21e64:	f000 f872 	bl	21f4c <_malloc_r>
   21e68:	bd10      	pop	{r4, pc}
   21e6a:	46c0      	nop			; (mov r8, r8)
   21e6c:	20000048 	.word	0x20000048

00021e70 <memcpy>:
   21e70:	2300      	movs	r3, #0
   21e72:	b510      	push	{r4, lr}
   21e74:	429a      	cmp	r2, r3
   21e76:	d100      	bne.n	21e7a <memcpy+0xa>
   21e78:	bd10      	pop	{r4, pc}
   21e7a:	5ccc      	ldrb	r4, [r1, r3]
   21e7c:	54c4      	strb	r4, [r0, r3]
   21e7e:	3301      	adds	r3, #1
   21e80:	e7f8      	b.n	21e74 <memcpy+0x4>

00021e82 <memmove>:
   21e82:	b510      	push	{r4, lr}
   21e84:	4288      	cmp	r0, r1
   21e86:	d902      	bls.n	21e8e <memmove+0xc>
   21e88:	188b      	adds	r3, r1, r2
   21e8a:	4298      	cmp	r0, r3
   21e8c:	d308      	bcc.n	21ea0 <memmove+0x1e>
   21e8e:	2300      	movs	r3, #0
   21e90:	429a      	cmp	r2, r3
   21e92:	d007      	beq.n	21ea4 <memmove+0x22>
   21e94:	5ccc      	ldrb	r4, [r1, r3]
   21e96:	54c4      	strb	r4, [r0, r3]
   21e98:	3301      	adds	r3, #1
   21e9a:	e7f9      	b.n	21e90 <memmove+0xe>
   21e9c:	5c8b      	ldrb	r3, [r1, r2]
   21e9e:	5483      	strb	r3, [r0, r2]
   21ea0:	3a01      	subs	r2, #1
   21ea2:	d2fb      	bcs.n	21e9c <memmove+0x1a>
   21ea4:	bd10      	pop	{r4, pc}

00021ea6 <memset>:
   21ea6:	0003      	movs	r3, r0
   21ea8:	1882      	adds	r2, r0, r2
   21eaa:	4293      	cmp	r3, r2
   21eac:	d100      	bne.n	21eb0 <memset+0xa>
   21eae:	4770      	bx	lr
   21eb0:	7019      	strb	r1, [r3, #0]
   21eb2:	3301      	adds	r3, #1
   21eb4:	e7f9      	b.n	21eaa <memset+0x4>
	...

00021eb8 <_free_r>:
   21eb8:	b570      	push	{r4, r5, r6, lr}
   21eba:	0005      	movs	r5, r0
   21ebc:	2900      	cmp	r1, #0
   21ebe:	d010      	beq.n	21ee2 <_free_r+0x2a>
   21ec0:	1f0c      	subs	r4, r1, #4
   21ec2:	6823      	ldr	r3, [r4, #0]
   21ec4:	2b00      	cmp	r3, #0
   21ec6:	da00      	bge.n	21eca <_free_r+0x12>
   21ec8:	18e4      	adds	r4, r4, r3
   21eca:	0028      	movs	r0, r5
   21ecc:	f000 f9a4 	bl	22218 <__malloc_lock>
   21ed0:	4a1d      	ldr	r2, [pc, #116]	; (21f48 <_free_r+0x90>)
   21ed2:	6813      	ldr	r3, [r2, #0]
   21ed4:	2b00      	cmp	r3, #0
   21ed6:	d105      	bne.n	21ee4 <_free_r+0x2c>
   21ed8:	6063      	str	r3, [r4, #4]
   21eda:	6014      	str	r4, [r2, #0]
   21edc:	0028      	movs	r0, r5
   21ede:	f000 f99c 	bl	2221a <__malloc_unlock>
   21ee2:	bd70      	pop	{r4, r5, r6, pc}
   21ee4:	42a3      	cmp	r3, r4
   21ee6:	d909      	bls.n	21efc <_free_r+0x44>
   21ee8:	6821      	ldr	r1, [r4, #0]
   21eea:	1860      	adds	r0, r4, r1
   21eec:	4283      	cmp	r3, r0
   21eee:	d1f3      	bne.n	21ed8 <_free_r+0x20>
   21ef0:	6818      	ldr	r0, [r3, #0]
   21ef2:	685b      	ldr	r3, [r3, #4]
   21ef4:	1841      	adds	r1, r0, r1
   21ef6:	6021      	str	r1, [r4, #0]
   21ef8:	e7ee      	b.n	21ed8 <_free_r+0x20>
   21efa:	0013      	movs	r3, r2
   21efc:	685a      	ldr	r2, [r3, #4]
   21efe:	2a00      	cmp	r2, #0
   21f00:	d001      	beq.n	21f06 <_free_r+0x4e>
   21f02:	42a2      	cmp	r2, r4
   21f04:	d9f9      	bls.n	21efa <_free_r+0x42>
   21f06:	6819      	ldr	r1, [r3, #0]
   21f08:	1858      	adds	r0, r3, r1
   21f0a:	42a0      	cmp	r0, r4
   21f0c:	d10b      	bne.n	21f26 <_free_r+0x6e>
   21f0e:	6820      	ldr	r0, [r4, #0]
   21f10:	1809      	adds	r1, r1, r0
   21f12:	1858      	adds	r0, r3, r1
   21f14:	6019      	str	r1, [r3, #0]
   21f16:	4282      	cmp	r2, r0
   21f18:	d1e0      	bne.n	21edc <_free_r+0x24>
   21f1a:	6810      	ldr	r0, [r2, #0]
   21f1c:	6852      	ldr	r2, [r2, #4]
   21f1e:	1841      	adds	r1, r0, r1
   21f20:	6019      	str	r1, [r3, #0]
   21f22:	605a      	str	r2, [r3, #4]
   21f24:	e7da      	b.n	21edc <_free_r+0x24>
   21f26:	42a0      	cmp	r0, r4
   21f28:	d902      	bls.n	21f30 <_free_r+0x78>
   21f2a:	230c      	movs	r3, #12
   21f2c:	602b      	str	r3, [r5, #0]
   21f2e:	e7d5      	b.n	21edc <_free_r+0x24>
   21f30:	6821      	ldr	r1, [r4, #0]
   21f32:	1860      	adds	r0, r4, r1
   21f34:	4282      	cmp	r2, r0
   21f36:	d103      	bne.n	21f40 <_free_r+0x88>
   21f38:	6810      	ldr	r0, [r2, #0]
   21f3a:	6852      	ldr	r2, [r2, #4]
   21f3c:	1841      	adds	r1, r0, r1
   21f3e:	6021      	str	r1, [r4, #0]
   21f40:	6062      	str	r2, [r4, #4]
   21f42:	605c      	str	r4, [r3, #4]
   21f44:	e7ca      	b.n	21edc <_free_r+0x24>
   21f46:	46c0      	nop			; (mov r8, r8)
   21f48:	20003acc 	.word	0x20003acc

00021f4c <_malloc_r>:
   21f4c:	2303      	movs	r3, #3
   21f4e:	b570      	push	{r4, r5, r6, lr}
   21f50:	1ccd      	adds	r5, r1, #3
   21f52:	439d      	bics	r5, r3
   21f54:	3508      	adds	r5, #8
   21f56:	0006      	movs	r6, r0
   21f58:	2d0c      	cmp	r5, #12
   21f5a:	d21e      	bcs.n	21f9a <_malloc_r+0x4e>
   21f5c:	250c      	movs	r5, #12
   21f5e:	42a9      	cmp	r1, r5
   21f60:	d81d      	bhi.n	21f9e <_malloc_r+0x52>
   21f62:	0030      	movs	r0, r6
   21f64:	f000 f958 	bl	22218 <__malloc_lock>
   21f68:	4a25      	ldr	r2, [pc, #148]	; (22000 <_malloc_r+0xb4>)
   21f6a:	6814      	ldr	r4, [r2, #0]
   21f6c:	0021      	movs	r1, r4
   21f6e:	2900      	cmp	r1, #0
   21f70:	d119      	bne.n	21fa6 <_malloc_r+0x5a>
   21f72:	4c24      	ldr	r4, [pc, #144]	; (22004 <_malloc_r+0xb8>)
   21f74:	6823      	ldr	r3, [r4, #0]
   21f76:	2b00      	cmp	r3, #0
   21f78:	d103      	bne.n	21f82 <_malloc_r+0x36>
   21f7a:	0030      	movs	r0, r6
   21f7c:	f000 f844 	bl	22008 <_sbrk_r>
   21f80:	6020      	str	r0, [r4, #0]
   21f82:	0029      	movs	r1, r5
   21f84:	0030      	movs	r0, r6
   21f86:	f000 f83f 	bl	22008 <_sbrk_r>
   21f8a:	1c43      	adds	r3, r0, #1
   21f8c:	d12c      	bne.n	21fe8 <_malloc_r+0x9c>
   21f8e:	230c      	movs	r3, #12
   21f90:	0030      	movs	r0, r6
   21f92:	6033      	str	r3, [r6, #0]
   21f94:	f000 f941 	bl	2221a <__malloc_unlock>
   21f98:	e003      	b.n	21fa2 <_malloc_r+0x56>
   21f9a:	2d00      	cmp	r5, #0
   21f9c:	dadf      	bge.n	21f5e <_malloc_r+0x12>
   21f9e:	230c      	movs	r3, #12
   21fa0:	6033      	str	r3, [r6, #0]
   21fa2:	2000      	movs	r0, #0
   21fa4:	bd70      	pop	{r4, r5, r6, pc}
   21fa6:	680b      	ldr	r3, [r1, #0]
   21fa8:	1b5b      	subs	r3, r3, r5
   21faa:	d41a      	bmi.n	21fe2 <_malloc_r+0x96>
   21fac:	2b0b      	cmp	r3, #11
   21fae:	d903      	bls.n	21fb8 <_malloc_r+0x6c>
   21fb0:	600b      	str	r3, [r1, #0]
   21fb2:	18cc      	adds	r4, r1, r3
   21fb4:	6025      	str	r5, [r4, #0]
   21fb6:	e003      	b.n	21fc0 <_malloc_r+0x74>
   21fb8:	428c      	cmp	r4, r1
   21fba:	d10e      	bne.n	21fda <_malloc_r+0x8e>
   21fbc:	6863      	ldr	r3, [r4, #4]
   21fbe:	6013      	str	r3, [r2, #0]
   21fc0:	0030      	movs	r0, r6
   21fc2:	f000 f92a 	bl	2221a <__malloc_unlock>
   21fc6:	0020      	movs	r0, r4
   21fc8:	2207      	movs	r2, #7
   21fca:	300b      	adds	r0, #11
   21fcc:	1d23      	adds	r3, r4, #4
   21fce:	4390      	bics	r0, r2
   21fd0:	1ac3      	subs	r3, r0, r3
   21fd2:	d0e7      	beq.n	21fa4 <_malloc_r+0x58>
   21fd4:	425a      	negs	r2, r3
   21fd6:	50e2      	str	r2, [r4, r3]
   21fd8:	e7e4      	b.n	21fa4 <_malloc_r+0x58>
   21fda:	684b      	ldr	r3, [r1, #4]
   21fdc:	6063      	str	r3, [r4, #4]
   21fde:	000c      	movs	r4, r1
   21fe0:	e7ee      	b.n	21fc0 <_malloc_r+0x74>
   21fe2:	000c      	movs	r4, r1
   21fe4:	6849      	ldr	r1, [r1, #4]
   21fe6:	e7c2      	b.n	21f6e <_malloc_r+0x22>
   21fe8:	2303      	movs	r3, #3
   21fea:	1cc4      	adds	r4, r0, #3
   21fec:	439c      	bics	r4, r3
   21fee:	42a0      	cmp	r0, r4
   21ff0:	d0e0      	beq.n	21fb4 <_malloc_r+0x68>
   21ff2:	1a21      	subs	r1, r4, r0
   21ff4:	0030      	movs	r0, r6
   21ff6:	f000 f807 	bl	22008 <_sbrk_r>
   21ffa:	1c43      	adds	r3, r0, #1
   21ffc:	d1da      	bne.n	21fb4 <_malloc_r+0x68>
   21ffe:	e7c6      	b.n	21f8e <_malloc_r+0x42>
   22000:	20003acc 	.word	0x20003acc
   22004:	20003ad0 	.word	0x20003ad0

00022008 <_sbrk_r>:
   22008:	2300      	movs	r3, #0
   2200a:	b570      	push	{r4, r5, r6, lr}
   2200c:	4c06      	ldr	r4, [pc, #24]	; (22028 <_sbrk_r+0x20>)
   2200e:	0005      	movs	r5, r0
   22010:	0008      	movs	r0, r1
   22012:	6023      	str	r3, [r4, #0]
   22014:	f7fd f908 	bl	1f228 <_sbrk>
   22018:	1c43      	adds	r3, r0, #1
   2201a:	d103      	bne.n	22024 <_sbrk_r+0x1c>
   2201c:	6823      	ldr	r3, [r4, #0]
   2201e:	2b00      	cmp	r3, #0
   22020:	d000      	beq.n	22024 <_sbrk_r+0x1c>
   22022:	602b      	str	r3, [r5, #0]
   22024:	bd70      	pop	{r4, r5, r6, pc}
   22026:	46c0      	nop			; (mov r8, r8)
   22028:	20004da4 	.word	0x20004da4

0002202c <sniprintf>:
   2202c:	b40c      	push	{r2, r3}
   2202e:	b530      	push	{r4, r5, lr}
   22030:	4b16      	ldr	r3, [pc, #88]	; (2208c <sniprintf+0x60>)
   22032:	b09d      	sub	sp, #116	; 0x74
   22034:	1e0c      	subs	r4, r1, #0
   22036:	681d      	ldr	r5, [r3, #0]
   22038:	da08      	bge.n	2204c <sniprintf+0x20>
   2203a:	238b      	movs	r3, #139	; 0x8b
   2203c:	2001      	movs	r0, #1
   2203e:	602b      	str	r3, [r5, #0]
   22040:	4240      	negs	r0, r0
   22042:	b01d      	add	sp, #116	; 0x74
   22044:	bc30      	pop	{r4, r5}
   22046:	bc08      	pop	{r3}
   22048:	b002      	add	sp, #8
   2204a:	4718      	bx	r3
   2204c:	2382      	movs	r3, #130	; 0x82
   2204e:	a902      	add	r1, sp, #8
   22050:	009b      	lsls	r3, r3, #2
   22052:	818b      	strh	r3, [r1, #12]
   22054:	2300      	movs	r3, #0
   22056:	9002      	str	r0, [sp, #8]
   22058:	6108      	str	r0, [r1, #16]
   2205a:	429c      	cmp	r4, r3
   2205c:	d000      	beq.n	22060 <sniprintf+0x34>
   2205e:	1e63      	subs	r3, r4, #1
   22060:	608b      	str	r3, [r1, #8]
   22062:	614b      	str	r3, [r1, #20]
   22064:	2301      	movs	r3, #1
   22066:	425b      	negs	r3, r3
   22068:	81cb      	strh	r3, [r1, #14]
   2206a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2206c:	ab21      	add	r3, sp, #132	; 0x84
   2206e:	0028      	movs	r0, r5
   22070:	9301      	str	r3, [sp, #4]
   22072:	f000 f935 	bl	222e0 <_svfiprintf_r>
   22076:	1c43      	adds	r3, r0, #1
   22078:	da01      	bge.n	2207e <sniprintf+0x52>
   2207a:	238b      	movs	r3, #139	; 0x8b
   2207c:	602b      	str	r3, [r5, #0]
   2207e:	2c00      	cmp	r4, #0
   22080:	d0df      	beq.n	22042 <sniprintf+0x16>
   22082:	2300      	movs	r3, #0
   22084:	9a02      	ldr	r2, [sp, #8]
   22086:	7013      	strb	r3, [r2, #0]
   22088:	e7db      	b.n	22042 <sniprintf+0x16>
   2208a:	46c0      	nop			; (mov r8, r8)
   2208c:	20000048 	.word	0x20000048

00022090 <siprintf>:
   22090:	b40e      	push	{r1, r2, r3}
   22092:	b510      	push	{r4, lr}
   22094:	b09d      	sub	sp, #116	; 0x74
   22096:	a902      	add	r1, sp, #8
   22098:	9002      	str	r0, [sp, #8]
   2209a:	6108      	str	r0, [r1, #16]
   2209c:	480b      	ldr	r0, [pc, #44]	; (220cc <siprintf+0x3c>)
   2209e:	2482      	movs	r4, #130	; 0x82
   220a0:	6088      	str	r0, [r1, #8]
   220a2:	6148      	str	r0, [r1, #20]
   220a4:	2001      	movs	r0, #1
   220a6:	4240      	negs	r0, r0
   220a8:	ab1f      	add	r3, sp, #124	; 0x7c
   220aa:	81c8      	strh	r0, [r1, #14]
   220ac:	4808      	ldr	r0, [pc, #32]	; (220d0 <siprintf+0x40>)
   220ae:	cb04      	ldmia	r3!, {r2}
   220b0:	00a4      	lsls	r4, r4, #2
   220b2:	6800      	ldr	r0, [r0, #0]
   220b4:	9301      	str	r3, [sp, #4]
   220b6:	818c      	strh	r4, [r1, #12]
   220b8:	f000 f912 	bl	222e0 <_svfiprintf_r>
   220bc:	2300      	movs	r3, #0
   220be:	9a02      	ldr	r2, [sp, #8]
   220c0:	7013      	strb	r3, [r2, #0]
   220c2:	b01d      	add	sp, #116	; 0x74
   220c4:	bc10      	pop	{r4}
   220c6:	bc08      	pop	{r3}
   220c8:	b003      	add	sp, #12
   220ca:	4718      	bx	r3
   220cc:	7fffffff 	.word	0x7fffffff
   220d0:	20000048 	.word	0x20000048

000220d4 <strcasecmp>:
   220d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220d6:	0007      	movs	r7, r0
   220d8:	000e      	movs	r6, r1
   220da:	783c      	ldrb	r4, [r7, #0]
   220dc:	f000 f87c 	bl	221d8 <__locale_ctype_ptr>
   220e0:	2203      	movs	r2, #3
   220e2:	1900      	adds	r0, r0, r4
   220e4:	7843      	ldrb	r3, [r0, #1]
   220e6:	4013      	ands	r3, r2
   220e8:	2b01      	cmp	r3, #1
   220ea:	d100      	bne.n	220ee <strcasecmp+0x1a>
   220ec:	3420      	adds	r4, #32
   220ee:	7835      	ldrb	r5, [r6, #0]
   220f0:	f000 f872 	bl	221d8 <__locale_ctype_ptr>
   220f4:	2203      	movs	r2, #3
   220f6:	1940      	adds	r0, r0, r5
   220f8:	7843      	ldrb	r3, [r0, #1]
   220fa:	4013      	ands	r3, r2
   220fc:	2b01      	cmp	r3, #1
   220fe:	d100      	bne.n	22102 <strcasecmp+0x2e>
   22100:	3520      	adds	r5, #32
   22102:	1b60      	subs	r0, r4, r5
   22104:	d103      	bne.n	2210e <strcasecmp+0x3a>
   22106:	3701      	adds	r7, #1
   22108:	3601      	adds	r6, #1
   2210a:	2d00      	cmp	r5, #0
   2210c:	d1e5      	bne.n	220da <strcasecmp+0x6>
   2210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022110 <strlen>:
   22110:	2300      	movs	r3, #0
   22112:	5cc2      	ldrb	r2, [r0, r3]
   22114:	3301      	adds	r3, #1
   22116:	2a00      	cmp	r2, #0
   22118:	d1fb      	bne.n	22112 <strlen+0x2>
   2211a:	1e58      	subs	r0, r3, #1
   2211c:	4770      	bx	lr

0002211e <strncmp>:
   2211e:	2300      	movs	r3, #0
   22120:	b530      	push	{r4, r5, lr}
   22122:	429a      	cmp	r2, r3
   22124:	d00a      	beq.n	2213c <strncmp+0x1e>
   22126:	3a01      	subs	r2, #1
   22128:	5cc4      	ldrb	r4, [r0, r3]
   2212a:	5ccd      	ldrb	r5, [r1, r3]
   2212c:	42ac      	cmp	r4, r5
   2212e:	d104      	bne.n	2213a <strncmp+0x1c>
   22130:	429a      	cmp	r2, r3
   22132:	d002      	beq.n	2213a <strncmp+0x1c>
   22134:	3301      	adds	r3, #1
   22136:	2c00      	cmp	r4, #0
   22138:	d1f6      	bne.n	22128 <strncmp+0xa>
   2213a:	1b63      	subs	r3, r4, r5
   2213c:	0018      	movs	r0, r3
   2213e:	bd30      	pop	{r4, r5, pc}

00022140 <strncpy>:
   22140:	b570      	push	{r4, r5, r6, lr}
   22142:	0004      	movs	r4, r0
   22144:	2a00      	cmp	r2, #0
   22146:	d100      	bne.n	2214a <strncpy+0xa>
   22148:	bd70      	pop	{r4, r5, r6, pc}
   2214a:	780d      	ldrb	r5, [r1, #0]
   2214c:	1e56      	subs	r6, r2, #1
   2214e:	1c63      	adds	r3, r4, #1
   22150:	7025      	strb	r5, [r4, #0]
   22152:	3101      	adds	r1, #1
   22154:	2d00      	cmp	r5, #0
   22156:	d105      	bne.n	22164 <strncpy+0x24>
   22158:	18a4      	adds	r4, r4, r2
   2215a:	429c      	cmp	r4, r3
   2215c:	d0f4      	beq.n	22148 <strncpy+0x8>
   2215e:	701d      	strb	r5, [r3, #0]
   22160:	3301      	adds	r3, #1
   22162:	e7fa      	b.n	2215a <strncpy+0x1a>
   22164:	001c      	movs	r4, r3
   22166:	0032      	movs	r2, r6
   22168:	e7ec      	b.n	22144 <strncpy+0x4>

0002216a <_vsniprintf_r>:
   2216a:	b530      	push	{r4, r5, lr}
   2216c:	0014      	movs	r4, r2
   2216e:	b09b      	sub	sp, #108	; 0x6c
   22170:	0005      	movs	r5, r0
   22172:	001a      	movs	r2, r3
   22174:	2c00      	cmp	r4, #0
   22176:	da05      	bge.n	22184 <_vsniprintf_r+0x1a>
   22178:	238b      	movs	r3, #139	; 0x8b
   2217a:	6003      	str	r3, [r0, #0]
   2217c:	2001      	movs	r0, #1
   2217e:	4240      	negs	r0, r0
   22180:	b01b      	add	sp, #108	; 0x6c
   22182:	bd30      	pop	{r4, r5, pc}
   22184:	2382      	movs	r3, #130	; 0x82
   22186:	4668      	mov	r0, sp
   22188:	009b      	lsls	r3, r3, #2
   2218a:	8183      	strh	r3, [r0, #12]
   2218c:	2300      	movs	r3, #0
   2218e:	9100      	str	r1, [sp, #0]
   22190:	9104      	str	r1, [sp, #16]
   22192:	429c      	cmp	r4, r3
   22194:	d000      	beq.n	22198 <_vsniprintf_r+0x2e>
   22196:	1e63      	subs	r3, r4, #1
   22198:	9302      	str	r3, [sp, #8]
   2219a:	9305      	str	r3, [sp, #20]
   2219c:	2301      	movs	r3, #1
   2219e:	4669      	mov	r1, sp
   221a0:	425b      	negs	r3, r3
   221a2:	81cb      	strh	r3, [r1, #14]
   221a4:	0028      	movs	r0, r5
   221a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   221a8:	f000 f89a 	bl	222e0 <_svfiprintf_r>
   221ac:	1c43      	adds	r3, r0, #1
   221ae:	da01      	bge.n	221b4 <_vsniprintf_r+0x4a>
   221b0:	238b      	movs	r3, #139	; 0x8b
   221b2:	602b      	str	r3, [r5, #0]
   221b4:	2c00      	cmp	r4, #0
   221b6:	d0e3      	beq.n	22180 <_vsniprintf_r+0x16>
   221b8:	2300      	movs	r3, #0
   221ba:	9a00      	ldr	r2, [sp, #0]
   221bc:	7013      	strb	r3, [r2, #0]
   221be:	e7df      	b.n	22180 <_vsniprintf_r+0x16>

000221c0 <vsniprintf>:
   221c0:	b507      	push	{r0, r1, r2, lr}
   221c2:	9300      	str	r3, [sp, #0]
   221c4:	0013      	movs	r3, r2
   221c6:	000a      	movs	r2, r1
   221c8:	0001      	movs	r1, r0
   221ca:	4802      	ldr	r0, [pc, #8]	; (221d4 <vsniprintf+0x14>)
   221cc:	6800      	ldr	r0, [r0, #0]
   221ce:	f7ff ffcc 	bl	2216a <_vsniprintf_r>
   221d2:	bd0e      	pop	{r1, r2, r3, pc}
   221d4:	20000048 	.word	0x20000048

000221d8 <__locale_ctype_ptr>:
   221d8:	4b04      	ldr	r3, [pc, #16]	; (221ec <__locale_ctype_ptr+0x14>)
   221da:	681b      	ldr	r3, [r3, #0]
   221dc:	6a1b      	ldr	r3, [r3, #32]
   221de:	2b00      	cmp	r3, #0
   221e0:	d100      	bne.n	221e4 <__locale_ctype_ptr+0xc>
   221e2:	4b03      	ldr	r3, [pc, #12]	; (221f0 <__locale_ctype_ptr+0x18>)
   221e4:	33ec      	adds	r3, #236	; 0xec
   221e6:	6818      	ldr	r0, [r3, #0]
   221e8:	4770      	bx	lr
   221ea:	46c0      	nop			; (mov r8, r8)
   221ec:	20000048 	.word	0x20000048
   221f0:	200000ac 	.word	0x200000ac

000221f4 <__ascii_mbtowc>:
   221f4:	b082      	sub	sp, #8
   221f6:	2900      	cmp	r1, #0
   221f8:	d100      	bne.n	221fc <__ascii_mbtowc+0x8>
   221fa:	a901      	add	r1, sp, #4
   221fc:	1e10      	subs	r0, r2, #0
   221fe:	d006      	beq.n	2220e <__ascii_mbtowc+0x1a>
   22200:	2b00      	cmp	r3, #0
   22202:	d006      	beq.n	22212 <__ascii_mbtowc+0x1e>
   22204:	7813      	ldrb	r3, [r2, #0]
   22206:	600b      	str	r3, [r1, #0]
   22208:	7810      	ldrb	r0, [r2, #0]
   2220a:	1e43      	subs	r3, r0, #1
   2220c:	4198      	sbcs	r0, r3
   2220e:	b002      	add	sp, #8
   22210:	4770      	bx	lr
   22212:	2002      	movs	r0, #2
   22214:	4240      	negs	r0, r0
   22216:	e7fa      	b.n	2220e <__ascii_mbtowc+0x1a>

00022218 <__malloc_lock>:
   22218:	4770      	bx	lr

0002221a <__malloc_unlock>:
   2221a:	4770      	bx	lr

0002221c <__ssputs_r>:
   2221c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2221e:	688e      	ldr	r6, [r1, #8]
   22220:	b085      	sub	sp, #20
   22222:	0007      	movs	r7, r0
   22224:	000c      	movs	r4, r1
   22226:	9203      	str	r2, [sp, #12]
   22228:	9301      	str	r3, [sp, #4]
   2222a:	429e      	cmp	r6, r3
   2222c:	d839      	bhi.n	222a2 <__ssputs_r+0x86>
   2222e:	2390      	movs	r3, #144	; 0x90
   22230:	898a      	ldrh	r2, [r1, #12]
   22232:	00db      	lsls	r3, r3, #3
   22234:	421a      	tst	r2, r3
   22236:	d034      	beq.n	222a2 <__ssputs_r+0x86>
   22238:	2503      	movs	r5, #3
   2223a:	6909      	ldr	r1, [r1, #16]
   2223c:	6823      	ldr	r3, [r4, #0]
   2223e:	1a5b      	subs	r3, r3, r1
   22240:	9302      	str	r3, [sp, #8]
   22242:	6963      	ldr	r3, [r4, #20]
   22244:	9802      	ldr	r0, [sp, #8]
   22246:	435d      	muls	r5, r3
   22248:	0feb      	lsrs	r3, r5, #31
   2224a:	195d      	adds	r5, r3, r5
   2224c:	9b01      	ldr	r3, [sp, #4]
   2224e:	106d      	asrs	r5, r5, #1
   22250:	3301      	adds	r3, #1
   22252:	181b      	adds	r3, r3, r0
   22254:	42ab      	cmp	r3, r5
   22256:	d900      	bls.n	2225a <__ssputs_r+0x3e>
   22258:	001d      	movs	r5, r3
   2225a:	0553      	lsls	r3, r2, #21
   2225c:	d532      	bpl.n	222c4 <__ssputs_r+0xa8>
   2225e:	0029      	movs	r1, r5
   22260:	0038      	movs	r0, r7
   22262:	f7ff fe73 	bl	21f4c <_malloc_r>
   22266:	1e06      	subs	r6, r0, #0
   22268:	d109      	bne.n	2227e <__ssputs_r+0x62>
   2226a:	230c      	movs	r3, #12
   2226c:	603b      	str	r3, [r7, #0]
   2226e:	2340      	movs	r3, #64	; 0x40
   22270:	2001      	movs	r0, #1
   22272:	89a2      	ldrh	r2, [r4, #12]
   22274:	4240      	negs	r0, r0
   22276:	4313      	orrs	r3, r2
   22278:	81a3      	strh	r3, [r4, #12]
   2227a:	b005      	add	sp, #20
   2227c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2227e:	9a02      	ldr	r2, [sp, #8]
   22280:	6921      	ldr	r1, [r4, #16]
   22282:	f7ff fdf5 	bl	21e70 <memcpy>
   22286:	89a3      	ldrh	r3, [r4, #12]
   22288:	4a14      	ldr	r2, [pc, #80]	; (222dc <__ssputs_r+0xc0>)
   2228a:	401a      	ands	r2, r3
   2228c:	2380      	movs	r3, #128	; 0x80
   2228e:	4313      	orrs	r3, r2
   22290:	81a3      	strh	r3, [r4, #12]
   22292:	9b02      	ldr	r3, [sp, #8]
   22294:	6126      	str	r6, [r4, #16]
   22296:	18f6      	adds	r6, r6, r3
   22298:	6026      	str	r6, [r4, #0]
   2229a:	6165      	str	r5, [r4, #20]
   2229c:	9e01      	ldr	r6, [sp, #4]
   2229e:	1aed      	subs	r5, r5, r3
   222a0:	60a5      	str	r5, [r4, #8]
   222a2:	9b01      	ldr	r3, [sp, #4]
   222a4:	42b3      	cmp	r3, r6
   222a6:	d200      	bcs.n	222aa <__ssputs_r+0x8e>
   222a8:	001e      	movs	r6, r3
   222aa:	0032      	movs	r2, r6
   222ac:	9903      	ldr	r1, [sp, #12]
   222ae:	6820      	ldr	r0, [r4, #0]
   222b0:	f7ff fde7 	bl	21e82 <memmove>
   222b4:	68a3      	ldr	r3, [r4, #8]
   222b6:	2000      	movs	r0, #0
   222b8:	1b9b      	subs	r3, r3, r6
   222ba:	60a3      	str	r3, [r4, #8]
   222bc:	6823      	ldr	r3, [r4, #0]
   222be:	199e      	adds	r6, r3, r6
   222c0:	6026      	str	r6, [r4, #0]
   222c2:	e7da      	b.n	2227a <__ssputs_r+0x5e>
   222c4:	002a      	movs	r2, r5
   222c6:	0038      	movs	r0, r7
   222c8:	f000 faad 	bl	22826 <_realloc_r>
   222cc:	1e06      	subs	r6, r0, #0
   222ce:	d1e0      	bne.n	22292 <__ssputs_r+0x76>
   222d0:	6921      	ldr	r1, [r4, #16]
   222d2:	0038      	movs	r0, r7
   222d4:	f7ff fdf0 	bl	21eb8 <_free_r>
   222d8:	e7c7      	b.n	2226a <__ssputs_r+0x4e>
   222da:	46c0      	nop			; (mov r8, r8)
   222dc:	fffffb7f 	.word	0xfffffb7f

000222e0 <_svfiprintf_r>:
   222e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   222e2:	b09f      	sub	sp, #124	; 0x7c
   222e4:	9002      	str	r0, [sp, #8]
   222e6:	9305      	str	r3, [sp, #20]
   222e8:	898b      	ldrh	r3, [r1, #12]
   222ea:	000f      	movs	r7, r1
   222ec:	0016      	movs	r6, r2
   222ee:	061b      	lsls	r3, r3, #24
   222f0:	d511      	bpl.n	22316 <_svfiprintf_r+0x36>
   222f2:	690b      	ldr	r3, [r1, #16]
   222f4:	2b00      	cmp	r3, #0
   222f6:	d10e      	bne.n	22316 <_svfiprintf_r+0x36>
   222f8:	2140      	movs	r1, #64	; 0x40
   222fa:	f7ff fe27 	bl	21f4c <_malloc_r>
   222fe:	6038      	str	r0, [r7, #0]
   22300:	6138      	str	r0, [r7, #16]
   22302:	2800      	cmp	r0, #0
   22304:	d105      	bne.n	22312 <_svfiprintf_r+0x32>
   22306:	230c      	movs	r3, #12
   22308:	9a02      	ldr	r2, [sp, #8]
   2230a:	3801      	subs	r0, #1
   2230c:	6013      	str	r3, [r2, #0]
   2230e:	b01f      	add	sp, #124	; 0x7c
   22310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22312:	2340      	movs	r3, #64	; 0x40
   22314:	617b      	str	r3, [r7, #20]
   22316:	2300      	movs	r3, #0
   22318:	ad06      	add	r5, sp, #24
   2231a:	616b      	str	r3, [r5, #20]
   2231c:	3320      	adds	r3, #32
   2231e:	766b      	strb	r3, [r5, #25]
   22320:	3310      	adds	r3, #16
   22322:	76ab      	strb	r3, [r5, #26]
   22324:	0034      	movs	r4, r6
   22326:	7823      	ldrb	r3, [r4, #0]
   22328:	2b00      	cmp	r3, #0
   2232a:	d147      	bne.n	223bc <_svfiprintf_r+0xdc>
   2232c:	1ba3      	subs	r3, r4, r6
   2232e:	9304      	str	r3, [sp, #16]
   22330:	d00d      	beq.n	2234e <_svfiprintf_r+0x6e>
   22332:	1ba3      	subs	r3, r4, r6
   22334:	0032      	movs	r2, r6
   22336:	0039      	movs	r1, r7
   22338:	9802      	ldr	r0, [sp, #8]
   2233a:	f7ff ff6f 	bl	2221c <__ssputs_r>
   2233e:	1c43      	adds	r3, r0, #1
   22340:	d100      	bne.n	22344 <_svfiprintf_r+0x64>
   22342:	e0b5      	b.n	224b0 <_svfiprintf_r+0x1d0>
   22344:	696a      	ldr	r2, [r5, #20]
   22346:	9b04      	ldr	r3, [sp, #16]
   22348:	4694      	mov	ip, r2
   2234a:	4463      	add	r3, ip
   2234c:	616b      	str	r3, [r5, #20]
   2234e:	7823      	ldrb	r3, [r4, #0]
   22350:	2b00      	cmp	r3, #0
   22352:	d100      	bne.n	22356 <_svfiprintf_r+0x76>
   22354:	e0ac      	b.n	224b0 <_svfiprintf_r+0x1d0>
   22356:	2201      	movs	r2, #1
   22358:	2300      	movs	r3, #0
   2235a:	4252      	negs	r2, r2
   2235c:	606a      	str	r2, [r5, #4]
   2235e:	a902      	add	r1, sp, #8
   22360:	3254      	adds	r2, #84	; 0x54
   22362:	1852      	adds	r2, r2, r1
   22364:	3401      	adds	r4, #1
   22366:	602b      	str	r3, [r5, #0]
   22368:	60eb      	str	r3, [r5, #12]
   2236a:	60ab      	str	r3, [r5, #8]
   2236c:	7013      	strb	r3, [r2, #0]
   2236e:	65ab      	str	r3, [r5, #88]	; 0x58
   22370:	4e58      	ldr	r6, [pc, #352]	; (224d4 <_svfiprintf_r+0x1f4>)
   22372:	2205      	movs	r2, #5
   22374:	7821      	ldrb	r1, [r4, #0]
   22376:	0030      	movs	r0, r6
   22378:	f000 fa4a 	bl	22810 <memchr>
   2237c:	1c62      	adds	r2, r4, #1
   2237e:	2800      	cmp	r0, #0
   22380:	d120      	bne.n	223c4 <_svfiprintf_r+0xe4>
   22382:	6829      	ldr	r1, [r5, #0]
   22384:	06cb      	lsls	r3, r1, #27
   22386:	d504      	bpl.n	22392 <_svfiprintf_r+0xb2>
   22388:	2353      	movs	r3, #83	; 0x53
   2238a:	ae02      	add	r6, sp, #8
   2238c:	3020      	adds	r0, #32
   2238e:	199b      	adds	r3, r3, r6
   22390:	7018      	strb	r0, [r3, #0]
   22392:	070b      	lsls	r3, r1, #28
   22394:	d504      	bpl.n	223a0 <_svfiprintf_r+0xc0>
   22396:	2353      	movs	r3, #83	; 0x53
   22398:	202b      	movs	r0, #43	; 0x2b
   2239a:	ae02      	add	r6, sp, #8
   2239c:	199b      	adds	r3, r3, r6
   2239e:	7018      	strb	r0, [r3, #0]
   223a0:	7823      	ldrb	r3, [r4, #0]
   223a2:	2b2a      	cmp	r3, #42	; 0x2a
   223a4:	d016      	beq.n	223d4 <_svfiprintf_r+0xf4>
   223a6:	2000      	movs	r0, #0
   223a8:	210a      	movs	r1, #10
   223aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   223ac:	7822      	ldrb	r2, [r4, #0]
   223ae:	3a30      	subs	r2, #48	; 0x30
   223b0:	2a09      	cmp	r2, #9
   223b2:	d955      	bls.n	22460 <_svfiprintf_r+0x180>
   223b4:	2800      	cmp	r0, #0
   223b6:	d015      	beq.n	223e4 <_svfiprintf_r+0x104>
   223b8:	9309      	str	r3, [sp, #36]	; 0x24
   223ba:	e013      	b.n	223e4 <_svfiprintf_r+0x104>
   223bc:	2b25      	cmp	r3, #37	; 0x25
   223be:	d0b5      	beq.n	2232c <_svfiprintf_r+0x4c>
   223c0:	3401      	adds	r4, #1
   223c2:	e7b0      	b.n	22326 <_svfiprintf_r+0x46>
   223c4:	2301      	movs	r3, #1
   223c6:	1b80      	subs	r0, r0, r6
   223c8:	4083      	lsls	r3, r0
   223ca:	6829      	ldr	r1, [r5, #0]
   223cc:	0014      	movs	r4, r2
   223ce:	430b      	orrs	r3, r1
   223d0:	602b      	str	r3, [r5, #0]
   223d2:	e7cd      	b.n	22370 <_svfiprintf_r+0x90>
   223d4:	9b05      	ldr	r3, [sp, #20]
   223d6:	1d18      	adds	r0, r3, #4
   223d8:	681b      	ldr	r3, [r3, #0]
   223da:	9005      	str	r0, [sp, #20]
   223dc:	2b00      	cmp	r3, #0
   223de:	db39      	blt.n	22454 <_svfiprintf_r+0x174>
   223e0:	9309      	str	r3, [sp, #36]	; 0x24
   223e2:	0014      	movs	r4, r2
   223e4:	7823      	ldrb	r3, [r4, #0]
   223e6:	2b2e      	cmp	r3, #46	; 0x2e
   223e8:	d10b      	bne.n	22402 <_svfiprintf_r+0x122>
   223ea:	7863      	ldrb	r3, [r4, #1]
   223ec:	1c62      	adds	r2, r4, #1
   223ee:	2b2a      	cmp	r3, #42	; 0x2a
   223f0:	d13e      	bne.n	22470 <_svfiprintf_r+0x190>
   223f2:	9b05      	ldr	r3, [sp, #20]
   223f4:	3402      	adds	r4, #2
   223f6:	1d1a      	adds	r2, r3, #4
   223f8:	681b      	ldr	r3, [r3, #0]
   223fa:	9205      	str	r2, [sp, #20]
   223fc:	2b00      	cmp	r3, #0
   223fe:	db34      	blt.n	2246a <_svfiprintf_r+0x18a>
   22400:	9307      	str	r3, [sp, #28]
   22402:	4e35      	ldr	r6, [pc, #212]	; (224d8 <_svfiprintf_r+0x1f8>)
   22404:	7821      	ldrb	r1, [r4, #0]
   22406:	2203      	movs	r2, #3
   22408:	0030      	movs	r0, r6
   2240a:	f000 fa01 	bl	22810 <memchr>
   2240e:	2800      	cmp	r0, #0
   22410:	d006      	beq.n	22420 <_svfiprintf_r+0x140>
   22412:	2340      	movs	r3, #64	; 0x40
   22414:	1b80      	subs	r0, r0, r6
   22416:	4083      	lsls	r3, r0
   22418:	682a      	ldr	r2, [r5, #0]
   2241a:	3401      	adds	r4, #1
   2241c:	4313      	orrs	r3, r2
   2241e:	602b      	str	r3, [r5, #0]
   22420:	7821      	ldrb	r1, [r4, #0]
   22422:	2206      	movs	r2, #6
   22424:	482d      	ldr	r0, [pc, #180]	; (224dc <_svfiprintf_r+0x1fc>)
   22426:	1c66      	adds	r6, r4, #1
   22428:	7629      	strb	r1, [r5, #24]
   2242a:	f000 f9f1 	bl	22810 <memchr>
   2242e:	2800      	cmp	r0, #0
   22430:	d046      	beq.n	224c0 <_svfiprintf_r+0x1e0>
   22432:	4b2b      	ldr	r3, [pc, #172]	; (224e0 <_svfiprintf_r+0x200>)
   22434:	2b00      	cmp	r3, #0
   22436:	d12f      	bne.n	22498 <_svfiprintf_r+0x1b8>
   22438:	6829      	ldr	r1, [r5, #0]
   2243a:	9b05      	ldr	r3, [sp, #20]
   2243c:	2207      	movs	r2, #7
   2243e:	05c9      	lsls	r1, r1, #23
   22440:	d528      	bpl.n	22494 <_svfiprintf_r+0x1b4>
   22442:	189b      	adds	r3, r3, r2
   22444:	4393      	bics	r3, r2
   22446:	3308      	adds	r3, #8
   22448:	9305      	str	r3, [sp, #20]
   2244a:	696b      	ldr	r3, [r5, #20]
   2244c:	9a03      	ldr	r2, [sp, #12]
   2244e:	189b      	adds	r3, r3, r2
   22450:	616b      	str	r3, [r5, #20]
   22452:	e767      	b.n	22324 <_svfiprintf_r+0x44>
   22454:	425b      	negs	r3, r3
   22456:	60eb      	str	r3, [r5, #12]
   22458:	2302      	movs	r3, #2
   2245a:	430b      	orrs	r3, r1
   2245c:	602b      	str	r3, [r5, #0]
   2245e:	e7c0      	b.n	223e2 <_svfiprintf_r+0x102>
   22460:	434b      	muls	r3, r1
   22462:	3401      	adds	r4, #1
   22464:	189b      	adds	r3, r3, r2
   22466:	2001      	movs	r0, #1
   22468:	e7a0      	b.n	223ac <_svfiprintf_r+0xcc>
   2246a:	2301      	movs	r3, #1
   2246c:	425b      	negs	r3, r3
   2246e:	e7c7      	b.n	22400 <_svfiprintf_r+0x120>
   22470:	2300      	movs	r3, #0
   22472:	0014      	movs	r4, r2
   22474:	200a      	movs	r0, #10
   22476:	001a      	movs	r2, r3
   22478:	606b      	str	r3, [r5, #4]
   2247a:	7821      	ldrb	r1, [r4, #0]
   2247c:	3930      	subs	r1, #48	; 0x30
   2247e:	2909      	cmp	r1, #9
   22480:	d903      	bls.n	2248a <_svfiprintf_r+0x1aa>
   22482:	2b00      	cmp	r3, #0
   22484:	d0bd      	beq.n	22402 <_svfiprintf_r+0x122>
   22486:	9207      	str	r2, [sp, #28]
   22488:	e7bb      	b.n	22402 <_svfiprintf_r+0x122>
   2248a:	4342      	muls	r2, r0
   2248c:	3401      	adds	r4, #1
   2248e:	1852      	adds	r2, r2, r1
   22490:	2301      	movs	r3, #1
   22492:	e7f2      	b.n	2247a <_svfiprintf_r+0x19a>
   22494:	3307      	adds	r3, #7
   22496:	e7d5      	b.n	22444 <_svfiprintf_r+0x164>
   22498:	ab05      	add	r3, sp, #20
   2249a:	9300      	str	r3, [sp, #0]
   2249c:	003a      	movs	r2, r7
   2249e:	4b11      	ldr	r3, [pc, #68]	; (224e4 <_svfiprintf_r+0x204>)
   224a0:	0029      	movs	r1, r5
   224a2:	9802      	ldr	r0, [sp, #8]
   224a4:	e000      	b.n	224a8 <_svfiprintf_r+0x1c8>
   224a6:	bf00      	nop
   224a8:	9003      	str	r0, [sp, #12]
   224aa:	9b03      	ldr	r3, [sp, #12]
   224ac:	3301      	adds	r3, #1
   224ae:	d1cc      	bne.n	2244a <_svfiprintf_r+0x16a>
   224b0:	89bb      	ldrh	r3, [r7, #12]
   224b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   224b4:	065b      	lsls	r3, r3, #25
   224b6:	d400      	bmi.n	224ba <_svfiprintf_r+0x1da>
   224b8:	e729      	b.n	2230e <_svfiprintf_r+0x2e>
   224ba:	2001      	movs	r0, #1
   224bc:	4240      	negs	r0, r0
   224be:	e726      	b.n	2230e <_svfiprintf_r+0x2e>
   224c0:	ab05      	add	r3, sp, #20
   224c2:	9300      	str	r3, [sp, #0]
   224c4:	003a      	movs	r2, r7
   224c6:	4b07      	ldr	r3, [pc, #28]	; (224e4 <_svfiprintf_r+0x204>)
   224c8:	0029      	movs	r1, r5
   224ca:	9802      	ldr	r0, [sp, #8]
   224cc:	f000 f87a 	bl	225c4 <_printf_i>
   224d0:	e7ea      	b.n	224a8 <_svfiprintf_r+0x1c8>
   224d2:	46c0      	nop			; (mov r8, r8)
   224d4:	0002478a 	.word	0x0002478a
   224d8:	00024790 	.word	0x00024790
   224dc:	00024794 	.word	0x00024794
   224e0:	00000000 	.word	0x00000000
   224e4:	0002221d 	.word	0x0002221d

000224e8 <_printf_common>:
   224e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   224ea:	0015      	movs	r5, r2
   224ec:	9301      	str	r3, [sp, #4]
   224ee:	688a      	ldr	r2, [r1, #8]
   224f0:	690b      	ldr	r3, [r1, #16]
   224f2:	9000      	str	r0, [sp, #0]
   224f4:	000c      	movs	r4, r1
   224f6:	4293      	cmp	r3, r2
   224f8:	da00      	bge.n	224fc <_printf_common+0x14>
   224fa:	0013      	movs	r3, r2
   224fc:	0022      	movs	r2, r4
   224fe:	602b      	str	r3, [r5, #0]
   22500:	3243      	adds	r2, #67	; 0x43
   22502:	7812      	ldrb	r2, [r2, #0]
   22504:	2a00      	cmp	r2, #0
   22506:	d001      	beq.n	2250c <_printf_common+0x24>
   22508:	3301      	adds	r3, #1
   2250a:	602b      	str	r3, [r5, #0]
   2250c:	6823      	ldr	r3, [r4, #0]
   2250e:	069b      	lsls	r3, r3, #26
   22510:	d502      	bpl.n	22518 <_printf_common+0x30>
   22512:	682b      	ldr	r3, [r5, #0]
   22514:	3302      	adds	r3, #2
   22516:	602b      	str	r3, [r5, #0]
   22518:	2706      	movs	r7, #6
   2251a:	6823      	ldr	r3, [r4, #0]
   2251c:	401f      	ands	r7, r3
   2251e:	d027      	beq.n	22570 <_printf_common+0x88>
   22520:	0023      	movs	r3, r4
   22522:	3343      	adds	r3, #67	; 0x43
   22524:	781b      	ldrb	r3, [r3, #0]
   22526:	1e5a      	subs	r2, r3, #1
   22528:	4193      	sbcs	r3, r2
   2252a:	6822      	ldr	r2, [r4, #0]
   2252c:	0692      	lsls	r2, r2, #26
   2252e:	d430      	bmi.n	22592 <_printf_common+0xaa>
   22530:	0022      	movs	r2, r4
   22532:	9901      	ldr	r1, [sp, #4]
   22534:	3243      	adds	r2, #67	; 0x43
   22536:	9800      	ldr	r0, [sp, #0]
   22538:	9e08      	ldr	r6, [sp, #32]
   2253a:	47b0      	blx	r6
   2253c:	1c43      	adds	r3, r0, #1
   2253e:	d025      	beq.n	2258c <_printf_common+0xa4>
   22540:	2306      	movs	r3, #6
   22542:	6820      	ldr	r0, [r4, #0]
   22544:	682a      	ldr	r2, [r5, #0]
   22546:	68e1      	ldr	r1, [r4, #12]
   22548:	4003      	ands	r3, r0
   2254a:	2500      	movs	r5, #0
   2254c:	2b04      	cmp	r3, #4
   2254e:	d103      	bne.n	22558 <_printf_common+0x70>
   22550:	1a8d      	subs	r5, r1, r2
   22552:	43eb      	mvns	r3, r5
   22554:	17db      	asrs	r3, r3, #31
   22556:	401d      	ands	r5, r3
   22558:	68a3      	ldr	r3, [r4, #8]
   2255a:	6922      	ldr	r2, [r4, #16]
   2255c:	4293      	cmp	r3, r2
   2255e:	dd01      	ble.n	22564 <_printf_common+0x7c>
   22560:	1a9b      	subs	r3, r3, r2
   22562:	18ed      	adds	r5, r5, r3
   22564:	2700      	movs	r7, #0
   22566:	42bd      	cmp	r5, r7
   22568:	d120      	bne.n	225ac <_printf_common+0xc4>
   2256a:	2000      	movs	r0, #0
   2256c:	e010      	b.n	22590 <_printf_common+0xa8>
   2256e:	3701      	adds	r7, #1
   22570:	68e3      	ldr	r3, [r4, #12]
   22572:	682a      	ldr	r2, [r5, #0]
   22574:	1a9b      	subs	r3, r3, r2
   22576:	429f      	cmp	r7, r3
   22578:	dad2      	bge.n	22520 <_printf_common+0x38>
   2257a:	0022      	movs	r2, r4
   2257c:	2301      	movs	r3, #1
   2257e:	3219      	adds	r2, #25
   22580:	9901      	ldr	r1, [sp, #4]
   22582:	9800      	ldr	r0, [sp, #0]
   22584:	9e08      	ldr	r6, [sp, #32]
   22586:	47b0      	blx	r6
   22588:	1c43      	adds	r3, r0, #1
   2258a:	d1f0      	bne.n	2256e <_printf_common+0x86>
   2258c:	2001      	movs	r0, #1
   2258e:	4240      	negs	r0, r0
   22590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   22592:	2030      	movs	r0, #48	; 0x30
   22594:	18e1      	adds	r1, r4, r3
   22596:	3143      	adds	r1, #67	; 0x43
   22598:	7008      	strb	r0, [r1, #0]
   2259a:	0021      	movs	r1, r4
   2259c:	1c5a      	adds	r2, r3, #1
   2259e:	3145      	adds	r1, #69	; 0x45
   225a0:	7809      	ldrb	r1, [r1, #0]
   225a2:	18a2      	adds	r2, r4, r2
   225a4:	3243      	adds	r2, #67	; 0x43
   225a6:	3302      	adds	r3, #2
   225a8:	7011      	strb	r1, [r2, #0]
   225aa:	e7c1      	b.n	22530 <_printf_common+0x48>
   225ac:	0022      	movs	r2, r4
   225ae:	2301      	movs	r3, #1
   225b0:	321a      	adds	r2, #26
   225b2:	9901      	ldr	r1, [sp, #4]
   225b4:	9800      	ldr	r0, [sp, #0]
   225b6:	9e08      	ldr	r6, [sp, #32]
   225b8:	47b0      	blx	r6
   225ba:	1c43      	adds	r3, r0, #1
   225bc:	d0e6      	beq.n	2258c <_printf_common+0xa4>
   225be:	3701      	adds	r7, #1
   225c0:	e7d1      	b.n	22566 <_printf_common+0x7e>
	...

000225c4 <_printf_i>:
   225c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   225c6:	b08b      	sub	sp, #44	; 0x2c
   225c8:	9206      	str	r2, [sp, #24]
   225ca:	000a      	movs	r2, r1
   225cc:	3243      	adds	r2, #67	; 0x43
   225ce:	9307      	str	r3, [sp, #28]
   225d0:	9005      	str	r0, [sp, #20]
   225d2:	9204      	str	r2, [sp, #16]
   225d4:	7e0a      	ldrb	r2, [r1, #24]
   225d6:	000c      	movs	r4, r1
   225d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   225da:	2a6e      	cmp	r2, #110	; 0x6e
   225dc:	d100      	bne.n	225e0 <_printf_i+0x1c>
   225de:	e08f      	b.n	22700 <_printf_i+0x13c>
   225e0:	d817      	bhi.n	22612 <_printf_i+0x4e>
   225e2:	2a63      	cmp	r2, #99	; 0x63
   225e4:	d02c      	beq.n	22640 <_printf_i+0x7c>
   225e6:	d808      	bhi.n	225fa <_printf_i+0x36>
   225e8:	2a00      	cmp	r2, #0
   225ea:	d100      	bne.n	225ee <_printf_i+0x2a>
   225ec:	e099      	b.n	22722 <_printf_i+0x15e>
   225ee:	2a58      	cmp	r2, #88	; 0x58
   225f0:	d054      	beq.n	2269c <_printf_i+0xd8>
   225f2:	0026      	movs	r6, r4
   225f4:	3642      	adds	r6, #66	; 0x42
   225f6:	7032      	strb	r2, [r6, #0]
   225f8:	e029      	b.n	2264e <_printf_i+0x8a>
   225fa:	2a64      	cmp	r2, #100	; 0x64
   225fc:	d001      	beq.n	22602 <_printf_i+0x3e>
   225fe:	2a69      	cmp	r2, #105	; 0x69
   22600:	d1f7      	bne.n	225f2 <_printf_i+0x2e>
   22602:	6821      	ldr	r1, [r4, #0]
   22604:	681a      	ldr	r2, [r3, #0]
   22606:	0608      	lsls	r0, r1, #24
   22608:	d523      	bpl.n	22652 <_printf_i+0x8e>
   2260a:	1d11      	adds	r1, r2, #4
   2260c:	6019      	str	r1, [r3, #0]
   2260e:	6815      	ldr	r5, [r2, #0]
   22610:	e025      	b.n	2265e <_printf_i+0x9a>
   22612:	2a73      	cmp	r2, #115	; 0x73
   22614:	d100      	bne.n	22618 <_printf_i+0x54>
   22616:	e088      	b.n	2272a <_printf_i+0x166>
   22618:	d808      	bhi.n	2262c <_printf_i+0x68>
   2261a:	2a6f      	cmp	r2, #111	; 0x6f
   2261c:	d029      	beq.n	22672 <_printf_i+0xae>
   2261e:	2a70      	cmp	r2, #112	; 0x70
   22620:	d1e7      	bne.n	225f2 <_printf_i+0x2e>
   22622:	2220      	movs	r2, #32
   22624:	6809      	ldr	r1, [r1, #0]
   22626:	430a      	orrs	r2, r1
   22628:	6022      	str	r2, [r4, #0]
   2262a:	e003      	b.n	22634 <_printf_i+0x70>
   2262c:	2a75      	cmp	r2, #117	; 0x75
   2262e:	d020      	beq.n	22672 <_printf_i+0xae>
   22630:	2a78      	cmp	r2, #120	; 0x78
   22632:	d1de      	bne.n	225f2 <_printf_i+0x2e>
   22634:	0022      	movs	r2, r4
   22636:	2178      	movs	r1, #120	; 0x78
   22638:	3245      	adds	r2, #69	; 0x45
   2263a:	7011      	strb	r1, [r2, #0]
   2263c:	4a6c      	ldr	r2, [pc, #432]	; (227f0 <_printf_i+0x22c>)
   2263e:	e030      	b.n	226a2 <_printf_i+0xde>
   22640:	000e      	movs	r6, r1
   22642:	681a      	ldr	r2, [r3, #0]
   22644:	3642      	adds	r6, #66	; 0x42
   22646:	1d11      	adds	r1, r2, #4
   22648:	6019      	str	r1, [r3, #0]
   2264a:	6813      	ldr	r3, [r2, #0]
   2264c:	7033      	strb	r3, [r6, #0]
   2264e:	2301      	movs	r3, #1
   22650:	e079      	b.n	22746 <_printf_i+0x182>
   22652:	0649      	lsls	r1, r1, #25
   22654:	d5d9      	bpl.n	2260a <_printf_i+0x46>
   22656:	1d11      	adds	r1, r2, #4
   22658:	6019      	str	r1, [r3, #0]
   2265a:	2300      	movs	r3, #0
   2265c:	5ed5      	ldrsh	r5, [r2, r3]
   2265e:	2d00      	cmp	r5, #0
   22660:	da03      	bge.n	2266a <_printf_i+0xa6>
   22662:	232d      	movs	r3, #45	; 0x2d
   22664:	9a04      	ldr	r2, [sp, #16]
   22666:	426d      	negs	r5, r5
   22668:	7013      	strb	r3, [r2, #0]
   2266a:	4b62      	ldr	r3, [pc, #392]	; (227f4 <_printf_i+0x230>)
   2266c:	270a      	movs	r7, #10
   2266e:	9303      	str	r3, [sp, #12]
   22670:	e02f      	b.n	226d2 <_printf_i+0x10e>
   22672:	6820      	ldr	r0, [r4, #0]
   22674:	6819      	ldr	r1, [r3, #0]
   22676:	0605      	lsls	r5, r0, #24
   22678:	d503      	bpl.n	22682 <_printf_i+0xbe>
   2267a:	1d08      	adds	r0, r1, #4
   2267c:	6018      	str	r0, [r3, #0]
   2267e:	680d      	ldr	r5, [r1, #0]
   22680:	e005      	b.n	2268e <_printf_i+0xca>
   22682:	0640      	lsls	r0, r0, #25
   22684:	d5f9      	bpl.n	2267a <_printf_i+0xb6>
   22686:	680d      	ldr	r5, [r1, #0]
   22688:	1d08      	adds	r0, r1, #4
   2268a:	6018      	str	r0, [r3, #0]
   2268c:	b2ad      	uxth	r5, r5
   2268e:	4b59      	ldr	r3, [pc, #356]	; (227f4 <_printf_i+0x230>)
   22690:	2708      	movs	r7, #8
   22692:	9303      	str	r3, [sp, #12]
   22694:	2a6f      	cmp	r2, #111	; 0x6f
   22696:	d018      	beq.n	226ca <_printf_i+0x106>
   22698:	270a      	movs	r7, #10
   2269a:	e016      	b.n	226ca <_printf_i+0x106>
   2269c:	3145      	adds	r1, #69	; 0x45
   2269e:	700a      	strb	r2, [r1, #0]
   226a0:	4a54      	ldr	r2, [pc, #336]	; (227f4 <_printf_i+0x230>)
   226a2:	9203      	str	r2, [sp, #12]
   226a4:	681a      	ldr	r2, [r3, #0]
   226a6:	6821      	ldr	r1, [r4, #0]
   226a8:	1d10      	adds	r0, r2, #4
   226aa:	6018      	str	r0, [r3, #0]
   226ac:	6815      	ldr	r5, [r2, #0]
   226ae:	0608      	lsls	r0, r1, #24
   226b0:	d522      	bpl.n	226f8 <_printf_i+0x134>
   226b2:	07cb      	lsls	r3, r1, #31
   226b4:	d502      	bpl.n	226bc <_printf_i+0xf8>
   226b6:	2320      	movs	r3, #32
   226b8:	4319      	orrs	r1, r3
   226ba:	6021      	str	r1, [r4, #0]
   226bc:	2710      	movs	r7, #16
   226be:	2d00      	cmp	r5, #0
   226c0:	d103      	bne.n	226ca <_printf_i+0x106>
   226c2:	2320      	movs	r3, #32
   226c4:	6822      	ldr	r2, [r4, #0]
   226c6:	439a      	bics	r2, r3
   226c8:	6022      	str	r2, [r4, #0]
   226ca:	0023      	movs	r3, r4
   226cc:	2200      	movs	r2, #0
   226ce:	3343      	adds	r3, #67	; 0x43
   226d0:	701a      	strb	r2, [r3, #0]
   226d2:	6863      	ldr	r3, [r4, #4]
   226d4:	60a3      	str	r3, [r4, #8]
   226d6:	2b00      	cmp	r3, #0
   226d8:	db5c      	blt.n	22794 <_printf_i+0x1d0>
   226da:	2204      	movs	r2, #4
   226dc:	6821      	ldr	r1, [r4, #0]
   226de:	4391      	bics	r1, r2
   226e0:	6021      	str	r1, [r4, #0]
   226e2:	2d00      	cmp	r5, #0
   226e4:	d158      	bne.n	22798 <_printf_i+0x1d4>
   226e6:	9e04      	ldr	r6, [sp, #16]
   226e8:	2b00      	cmp	r3, #0
   226ea:	d064      	beq.n	227b6 <_printf_i+0x1f2>
   226ec:	0026      	movs	r6, r4
   226ee:	9b03      	ldr	r3, [sp, #12]
   226f0:	3642      	adds	r6, #66	; 0x42
   226f2:	781b      	ldrb	r3, [r3, #0]
   226f4:	7033      	strb	r3, [r6, #0]
   226f6:	e05e      	b.n	227b6 <_printf_i+0x1f2>
   226f8:	0648      	lsls	r0, r1, #25
   226fa:	d5da      	bpl.n	226b2 <_printf_i+0xee>
   226fc:	b2ad      	uxth	r5, r5
   226fe:	e7d8      	b.n	226b2 <_printf_i+0xee>
   22700:	6809      	ldr	r1, [r1, #0]
   22702:	681a      	ldr	r2, [r3, #0]
   22704:	0608      	lsls	r0, r1, #24
   22706:	d505      	bpl.n	22714 <_printf_i+0x150>
   22708:	1d11      	adds	r1, r2, #4
   2270a:	6019      	str	r1, [r3, #0]
   2270c:	6813      	ldr	r3, [r2, #0]
   2270e:	6962      	ldr	r2, [r4, #20]
   22710:	601a      	str	r2, [r3, #0]
   22712:	e006      	b.n	22722 <_printf_i+0x15e>
   22714:	0649      	lsls	r1, r1, #25
   22716:	d5f7      	bpl.n	22708 <_printf_i+0x144>
   22718:	1d11      	adds	r1, r2, #4
   2271a:	6019      	str	r1, [r3, #0]
   2271c:	6813      	ldr	r3, [r2, #0]
   2271e:	8aa2      	ldrh	r2, [r4, #20]
   22720:	801a      	strh	r2, [r3, #0]
   22722:	2300      	movs	r3, #0
   22724:	9e04      	ldr	r6, [sp, #16]
   22726:	6123      	str	r3, [r4, #16]
   22728:	e054      	b.n	227d4 <_printf_i+0x210>
   2272a:	681a      	ldr	r2, [r3, #0]
   2272c:	1d11      	adds	r1, r2, #4
   2272e:	6019      	str	r1, [r3, #0]
   22730:	6816      	ldr	r6, [r2, #0]
   22732:	2100      	movs	r1, #0
   22734:	6862      	ldr	r2, [r4, #4]
   22736:	0030      	movs	r0, r6
   22738:	f000 f86a 	bl	22810 <memchr>
   2273c:	2800      	cmp	r0, #0
   2273e:	d001      	beq.n	22744 <_printf_i+0x180>
   22740:	1b80      	subs	r0, r0, r6
   22742:	6060      	str	r0, [r4, #4]
   22744:	6863      	ldr	r3, [r4, #4]
   22746:	6123      	str	r3, [r4, #16]
   22748:	2300      	movs	r3, #0
   2274a:	9a04      	ldr	r2, [sp, #16]
   2274c:	7013      	strb	r3, [r2, #0]
   2274e:	e041      	b.n	227d4 <_printf_i+0x210>
   22750:	6923      	ldr	r3, [r4, #16]
   22752:	0032      	movs	r2, r6
   22754:	9906      	ldr	r1, [sp, #24]
   22756:	9805      	ldr	r0, [sp, #20]
   22758:	9d07      	ldr	r5, [sp, #28]
   2275a:	47a8      	blx	r5
   2275c:	1c43      	adds	r3, r0, #1
   2275e:	d043      	beq.n	227e8 <_printf_i+0x224>
   22760:	6823      	ldr	r3, [r4, #0]
   22762:	2500      	movs	r5, #0
   22764:	079b      	lsls	r3, r3, #30
   22766:	d40f      	bmi.n	22788 <_printf_i+0x1c4>
   22768:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2276a:	68e0      	ldr	r0, [r4, #12]
   2276c:	4298      	cmp	r0, r3
   2276e:	da3d      	bge.n	227ec <_printf_i+0x228>
   22770:	0018      	movs	r0, r3
   22772:	e03b      	b.n	227ec <_printf_i+0x228>
   22774:	0022      	movs	r2, r4
   22776:	2301      	movs	r3, #1
   22778:	3219      	adds	r2, #25
   2277a:	9906      	ldr	r1, [sp, #24]
   2277c:	9805      	ldr	r0, [sp, #20]
   2277e:	9e07      	ldr	r6, [sp, #28]
   22780:	47b0      	blx	r6
   22782:	1c43      	adds	r3, r0, #1
   22784:	d030      	beq.n	227e8 <_printf_i+0x224>
   22786:	3501      	adds	r5, #1
   22788:	68e3      	ldr	r3, [r4, #12]
   2278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2278c:	1a9b      	subs	r3, r3, r2
   2278e:	429d      	cmp	r5, r3
   22790:	dbf0      	blt.n	22774 <_printf_i+0x1b0>
   22792:	e7e9      	b.n	22768 <_printf_i+0x1a4>
   22794:	2d00      	cmp	r5, #0
   22796:	d0a9      	beq.n	226ec <_printf_i+0x128>
   22798:	9e04      	ldr	r6, [sp, #16]
   2279a:	0028      	movs	r0, r5
   2279c:	0039      	movs	r1, r7
   2279e:	f7fc febb 	bl	1f518 <__aeabi_uidivmod>
   227a2:	9b03      	ldr	r3, [sp, #12]
   227a4:	3e01      	subs	r6, #1
   227a6:	5c5b      	ldrb	r3, [r3, r1]
   227a8:	0028      	movs	r0, r5
   227aa:	7033      	strb	r3, [r6, #0]
   227ac:	0039      	movs	r1, r7
   227ae:	f7fc fe2d 	bl	1f40c <__udivsi3>
   227b2:	1e05      	subs	r5, r0, #0
   227b4:	d1f1      	bne.n	2279a <_printf_i+0x1d6>
   227b6:	2f08      	cmp	r7, #8
   227b8:	d109      	bne.n	227ce <_printf_i+0x20a>
   227ba:	6823      	ldr	r3, [r4, #0]
   227bc:	07db      	lsls	r3, r3, #31
   227be:	d506      	bpl.n	227ce <_printf_i+0x20a>
   227c0:	6863      	ldr	r3, [r4, #4]
   227c2:	6922      	ldr	r2, [r4, #16]
   227c4:	4293      	cmp	r3, r2
   227c6:	dc02      	bgt.n	227ce <_printf_i+0x20a>
   227c8:	2330      	movs	r3, #48	; 0x30
   227ca:	3e01      	subs	r6, #1
   227cc:	7033      	strb	r3, [r6, #0]
   227ce:	9b04      	ldr	r3, [sp, #16]
   227d0:	1b9b      	subs	r3, r3, r6
   227d2:	6123      	str	r3, [r4, #16]
   227d4:	9b07      	ldr	r3, [sp, #28]
   227d6:	aa09      	add	r2, sp, #36	; 0x24
   227d8:	9300      	str	r3, [sp, #0]
   227da:	0021      	movs	r1, r4
   227dc:	9b06      	ldr	r3, [sp, #24]
   227de:	9805      	ldr	r0, [sp, #20]
   227e0:	f7ff fe82 	bl	224e8 <_printf_common>
   227e4:	1c43      	adds	r3, r0, #1
   227e6:	d1b3      	bne.n	22750 <_printf_i+0x18c>
   227e8:	2001      	movs	r0, #1
   227ea:	4240      	negs	r0, r0
   227ec:	b00b      	add	sp, #44	; 0x2c
   227ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227f0:	000247ac 	.word	0x000247ac
   227f4:	0002479b 	.word	0x0002479b

000227f8 <__ascii_wctomb>:
   227f8:	1e0b      	subs	r3, r1, #0
   227fa:	d004      	beq.n	22806 <__ascii_wctomb+0xe>
   227fc:	2aff      	cmp	r2, #255	; 0xff
   227fe:	d904      	bls.n	2280a <__ascii_wctomb+0x12>
   22800:	238a      	movs	r3, #138	; 0x8a
   22802:	6003      	str	r3, [r0, #0]
   22804:	3b8b      	subs	r3, #139	; 0x8b
   22806:	0018      	movs	r0, r3
   22808:	4770      	bx	lr
   2280a:	700a      	strb	r2, [r1, #0]
   2280c:	2301      	movs	r3, #1
   2280e:	e7fa      	b.n	22806 <__ascii_wctomb+0xe>

00022810 <memchr>:
   22810:	b2c9      	uxtb	r1, r1
   22812:	1882      	adds	r2, r0, r2
   22814:	4290      	cmp	r0, r2
   22816:	d101      	bne.n	2281c <memchr+0xc>
   22818:	2000      	movs	r0, #0
   2281a:	4770      	bx	lr
   2281c:	7803      	ldrb	r3, [r0, #0]
   2281e:	428b      	cmp	r3, r1
   22820:	d0fb      	beq.n	2281a <memchr+0xa>
   22822:	3001      	adds	r0, #1
   22824:	e7f6      	b.n	22814 <memchr+0x4>

00022826 <_realloc_r>:
   22826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22828:	0007      	movs	r7, r0
   2282a:	000d      	movs	r5, r1
   2282c:	0016      	movs	r6, r2
   2282e:	2900      	cmp	r1, #0
   22830:	d105      	bne.n	2283e <_realloc_r+0x18>
   22832:	0011      	movs	r1, r2
   22834:	f7ff fb8a 	bl	21f4c <_malloc_r>
   22838:	0004      	movs	r4, r0
   2283a:	0020      	movs	r0, r4
   2283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2283e:	2a00      	cmp	r2, #0
   22840:	d103      	bne.n	2284a <_realloc_r+0x24>
   22842:	f7ff fb39 	bl	21eb8 <_free_r>
   22846:	0034      	movs	r4, r6
   22848:	e7f7      	b.n	2283a <_realloc_r+0x14>
   2284a:	f000 f812 	bl	22872 <_malloc_usable_size_r>
   2284e:	002c      	movs	r4, r5
   22850:	4286      	cmp	r6, r0
   22852:	d9f2      	bls.n	2283a <_realloc_r+0x14>
   22854:	0031      	movs	r1, r6
   22856:	0038      	movs	r0, r7
   22858:	f7ff fb78 	bl	21f4c <_malloc_r>
   2285c:	1e04      	subs	r4, r0, #0
   2285e:	d0ec      	beq.n	2283a <_realloc_r+0x14>
   22860:	0029      	movs	r1, r5
   22862:	0032      	movs	r2, r6
   22864:	f7ff fb04 	bl	21e70 <memcpy>
   22868:	0029      	movs	r1, r5
   2286a:	0038      	movs	r0, r7
   2286c:	f7ff fb24 	bl	21eb8 <_free_r>
   22870:	e7e3      	b.n	2283a <_realloc_r+0x14>

00022872 <_malloc_usable_size_r>:
   22872:	1f0b      	subs	r3, r1, #4
   22874:	681b      	ldr	r3, [r3, #0]
   22876:	1f18      	subs	r0, r3, #4
   22878:	2b00      	cmp	r3, #0
   2287a:	da01      	bge.n	22880 <_malloc_usable_size_r+0xe>
   2287c:	580b      	ldr	r3, [r1, r0]
   2287e:	18c0      	adds	r0, r0, r3
   22880:	4770      	bx	lr
	...

00022884 <sysfont_glyphs>:
   22884:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   22894:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   228a4:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   228b4:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   228c4:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   228d4:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   228e4:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   228f4:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   22904:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   22914:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   22924:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   22934:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   22944:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   22954:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   22964:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   22974:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   22984:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   22994:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   229a4:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   229b4:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   229c4:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   229d4:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   229e4:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   229f4:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   22a04:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   22a14:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   22a24:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   22a34:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   22a44:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   22a54:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   22a64:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   22a74:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   22a84:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   22a94:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   22aa4:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   22ab4:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   22ac4:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   22ad4:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   22ae4:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   22af4:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   22b04:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   22b14:	4020 0000                                    @..

00022b18 <pcWelcomeMessage>:
   22b18:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   22b28:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   22b38:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   22b48:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   22b58:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   22b68:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   22b78:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   22b88:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   22b98:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   22ba8:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   22bb8:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   22bc8:	7375 0a0d 0000 0000 6574 7473 0000 0000     us......test....
   22bd8:	6574 7473 203a 6553 646e 2073 6574 7473     test: Sends test
   22be8:	6420 7461 0d61 000a 616e 0075 616e 3a75      data...nau.nau:
   22bf8:	5320 6e65 7364 7720 6965 6867 2074 6164      Sends weight da
   22c08:	6174 0a0d 0000 0000 706f 6e65 0000 0000     ta......open....
   22c18:	6573 7672 3a6f 4f20 6570 0d6e 000a 0000     servo: Open.....
   22c28:	6c63 736f 0065 0000 6573 7672 3a6f 4320     close...servo: C
   22c38:	6f6c 6573 0a0d 0000 6c63 0073 6c63 3a73     lose....cls.cls:
   22c48:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   22c58:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   22c68:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   22c78:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   22c88:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   22c98:	2008 0008 6325 325b 004a 0000 6554 7473     . ..%c[2J...Test
   22ca8:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   22cb8:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   22cc8:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   22cd8:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   22ce8:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   22cf8:	6425 0000 2030 3120 2020 2032 3320 2020     %d..0  1  2  3  
   22d08:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   22d18:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   22d28:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   22d38:	2058 0000                                   X ..

00022d3c <xOTAUCommand>:
   22d3c:	2b5c 0002 2b60 0002 3bed 0001 0000 0000     \+..`+...;......

00022d4c <xResetCommand>:
   22d4c:	2b90 0002 2b98 0002 3c0d 0001 0000 0000     .+...+...<......

00022d5c <xI2cScan>:
   22d5c:	2bb4 0002 2bb8 0002 3dd1 0001 0000 0000     .+...+...=......

00022d6c <xSendTestData>:
   22d6c:	2bd0 0002 2bd8 0002 3c2d 0001 0000 0000     .+...+..-<......

00022d7c <xSendWeightData>:
   22d7c:	2bf0 0002 2bf4 0002 3cb9 0001 0000 0000     .+...+...<......

00022d8c <xServoOpen>:
   22d8c:	2c10 0002 2c18 0002 3c79 0001 0000 0000     .,...,..y<......

00022d9c <xServoClose>:
   22d9c:	2c28 0002 2c30 0002 3c99 0001 0000 0000     (,..0,...<......

00022dac <xClearScreen>:
   22dac:	2c40 0002 2c44 0002 3ba5 0001 0000 0000     @,..D,...;......
   22dbc:	6966 616e 5f6c 6e69 3d74 2520 0d64 000a     final_int= %d...
   22dcc:	6966 616e 5f6c 6564 6963 616d 3d6c 2520     final_decimal= %
   22ddc:	0d64 000a 4955 5420 7361 206b 7453 7261     d...UI Task Star
   22dec:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..
   22dfc:	4948 4847 4157 0059 6425 252e 0064 0000     HIGHWAY.%d.%d...
   22e0c:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   22e1c:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   22e2c:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   22e3c:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   22e4c:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   22e5c:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   22e6c:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   22e7c:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   22e8c:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   22e9c:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   22eac:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   22ebc:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   22ecc:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   22edc:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

00022eec <xHelpCommand>:
   22eec:	2e0c 0002 2e14 0002 5a9d 0001 0000 0000     .........Z......
   22efc:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   22f0c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   22f1c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   22f2c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   22f3c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   22f4c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   22f5c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   22f6c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   22f7c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   22f8c:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   22f9c:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   22fac:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   22fbc:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   22fcc:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   22fdc:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   22fec:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   22ffc:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   2300c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   2301c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   2302c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   2303c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   2304c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   2305c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   2306c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   2307c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   2308c:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   2309c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   230ac:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   230bc:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   230cc:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   230dc:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   230ec:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   230fc:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   2310c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   2311c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   2312c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   2313c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   2314c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   2315c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   2316c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   2317c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   2318c:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   2319c:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   231ac:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   231bc:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   231cc:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   231dc:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   231ec:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   231fc:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   2320c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   2321c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   2322c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   2323c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   2324c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   2325c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   2326c:	6365 6374 616c 7373 0021 0000 61c2 0001     ectclass!....a..
   2327c:	61ba 0001 61be 0001 61b2 0001 61b6 0001     .a...a...a...a..
   2328c:	61c6 0001 61ca 0001 61ce 0001 61d2 0001     .a...a...a...a..
   2329c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   232ac:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   232bc:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   232cc:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   232dc:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   232ec:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   232fc:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   2330c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   2331c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   2332c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   2333c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   2334c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   2335c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   2336c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   2337c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   2338c:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   2339c:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   233ac:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   233bc:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   233cc:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   233dc:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   233ec:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   233fc:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   2340c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   2341c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   2342c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   2343c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   2344c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   2345c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   2346c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   2347c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   2348c:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   2349c:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   234ac:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   234bc:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   234cc:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   234dc:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   234ec:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   234fc:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   2350c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   2351c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   2352c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   2353c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   2354c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   2355c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   2356c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   2357c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   2358c:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   2359c:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   235ac:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   235bc:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   235cc:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   235dc:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   235ec:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   235fc:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   2360c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   2361c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   2362c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   2363c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   2364c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2365c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   2366c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   2367c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   2368c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   2369c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   236ac:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   236bc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   236cc:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   236dc:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   236ec:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   236fc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2370c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   2371c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   2372c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   2373c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   2374c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   2375c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   2376c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   2377c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2378c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   2379c:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   237ac:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   237bc:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   237cc:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   237dc:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   237ec:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   237fc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2380c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   2381c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   2382c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   2383c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2384c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   2385c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   2386c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   2387c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   2388c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   2389c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   238ac:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   238bc:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   238cc:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   238dc:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   238ec:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   238fc:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   2390c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   2391c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   2392c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   2393c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   2394c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   2395c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   2396c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   2397c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   2398c:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   2399c:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   239ac:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   239bc:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   239cc:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   239dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   239ec:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   239fc:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   23a0c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   23a1c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   23a2c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   23a3c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   23a4c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   23a5c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   23a6c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   23a7c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23a8c:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   23a9c:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   23aac:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23abc:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   23acc:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   23adc:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   23aec:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   23afc:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   23b0c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   23b1c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23b2c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   23b3c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   23b4c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   23b5c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   23b6c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   23b7c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   23b8c:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   23b9c:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   23bac:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   23bbc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23bcc:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   23bdc:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   23bec:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   23bfc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23c0c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   23c1c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   23c2c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   23c3c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   23c4c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23c5c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   23c6c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   23c7c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   23c8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23c9c:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   23cac:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   23cbc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   23ccc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23cdc:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   23cec:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23cfc:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23d0c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23d1c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   23d2c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   23d3c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   23d4c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23d5c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   23d6c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23d7c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23d8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23d9c:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   23dac:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   23dbc:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   23dcc:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   23ddc:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   23dec:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   23dfc:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   23e0c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   23e1c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   23e2c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23e3c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   23e4c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   23e5c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   23e6c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23e7c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   23e8c:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   23e9c:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   23eac:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   23ebc:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   23ecc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23edc:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   23eec:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   23efc:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   23f0c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   23f1c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   23f2c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   23f3c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   23f4c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   23f5c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23f6c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   23f7c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   23f8c:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   23f9c:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   23fac:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   23fbc:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   23fcc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   23fdc:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   23fec:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   23ffc:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   2400c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   2401c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   2402c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   2403c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   2404c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   2405c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   2406c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   2407c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   2408c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   2409c:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   240ac:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   240bc:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   240cc:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   240dc:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   240ec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   240fc:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   2410c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   2411c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   2412c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   2413c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   2414c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   2415c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   2416c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   2417c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   2418c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   2419c:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   241ac:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   241bc:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   241cc:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   241dc:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   241ec:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   241fc:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   2420c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   2421c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   2422c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   2423c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   2424c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   2425c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   2426c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   2427c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   2428c:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   2429c:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   242ac:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   242bc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   242cc:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   242dc:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   242ec:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   242fc:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   2430c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   2431c:	0000 0000 6d54 2072 7653 0063 b214 0001     ....Tmr Svc.....
   2432c:	b214 0001 b214 0001 b2a2 0001 b26c 0001     ............l...
   2433c:	b296 0001 b214 0001 b214 0001 b2a2 0001     ................
   2434c:	b26c 0001 0800 4200 0c00 4200 1000 4200     l......B...B...B
   2435c:	1400 4200 1800 4200 1c00 4200 0a09 0c0b     ...B...B...B....
   2436c:	0e0d 0000 d666 0001 d6e0 0001 d6e0 0001     ....f...........
   2437c:	d684 0001 d67e 0001 d68a 0001 d66c 0001     ....~.......l...
   2438c:	d690 0001 d6c6 0001 d8c8 0001 d918 0001     ................
   2439c:	d918 0001 d914 0001 d8ba 0001 d8da 0001     ................
   243ac:	d8aa 0001 d8ec 0001 d8fe 0001 d966 0001     ............f...
   243bc:	d994 0001 d994 0001 d990 0001 d960 0001     ............`...
   243cc:	d96c 0001 d95a 0001 d972 0001 d978 0001     l...Z...r...x...

000243dc <tcc_modules>:
   243dc:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000243e8 <_tcc_gclk_ids>:
   243e8:	1a1a 001b                                   ....

000243ec <_tcc_apbcmasks>:
   243ec:	0100 0000 0200 0000 0400 0000               ............

000243f8 <_tcc_maxs>:
   243f8:	ffff 00ff ffff 00ff ffff 0000               ............

00024404 <_tcc_cc_nums>:
   24404:	0204 0002                                   ....

00024408 <_tcc_ow_nums>:
   24408:	0408 0002                                   ....

0002440c <_tcc_intflag>:
   2440c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   2441c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   2442c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
   2443c:	0a0d 0a0d 2d2d 2d2d 452d 4553 3135 2036     ....-----ESE516 
   2444c:	614d 6e69 5020 6f72 7267 6d61 2d2d 2d2d     Main Program----
   2445c:	0d2d 000a 0a0d 0a0d 6e49 7469 6169 696c     -.......Initiali
   2446c:	657a 4820 2e57 2e2e 0a0d 0000 7245 6f72     ze HW.......Erro
   2447c:	2072 6e69 7469 6169 696c 697a 676e 4920     r initializing I
   2448c:	4332 4420 6972 6576 2172 0a0d 0000 0000     2C Driver!......
   2449c:	6e49 7469 6169 696c 657a 2064 3249 2043     Initialized I2C 
   244ac:	7244 7669 7265 0d21 000a 0000 6548 7061     Driver!.....Heap
   244bc:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   244cc:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   244dc:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   244ec:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   244fc:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   2450c:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   2451c:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   2452c:	2520 0d64 000a 0000 4955 5420 7361 006b      %d.....UI Task.
   2453c:	5245 3a52 5520 2049 6174 6b73 6320 756f     ERR: UI task cou
   2454c:	646c 6e20 746f 6220 2065 6e69 7469 6169     ld not be initia
   2455c:	696c 657a 2164 0a0d 0000 0000 6548 7061     lized!......Heap
   2456c:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   2457c:	4955 5420 7361 3a6b 2520 0d64 000a 0000     UI Task: %d.....
   2458c:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   2459c:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   245ac:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   245bc:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   245cc:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   245dc:	0a0d 0000 fc2c 0001 fbfc 0001 fc0e 0001     ....,...........
   245ec:	fb50 0001 fc0e 0001 fbf2 0001 fc0e 0001     P...............
   245fc:	fb50 0001 fbfc 0001 fbfc 0001 fbf2 0001     P...............
   2460c:	fb50 0001 fb58 0001 fb58 0001 fb58 0001     P...X...X...X...
   2461c:	fc14 0001 fbfc 0001 fbfc 0001 fbd0 0001     ................
   2462c:	fcb4 0001 fbd0 0001 fbf2 0001 fbd0 0001     ................
   2463c:	fcb4 0001 fbfc 0001 fbfc 0001 fbf2 0001     ................
   2464c:	fcb4 0001 fb58 0001 fb58 0001 fb58 0001     ....X...X...X...
   2465c:	fcbe 0001 fe5c 0001 fdac 0001 fdac 0001     ....\...........
   2466c:	fdaa 0001 fe4e 0001 fe4e 0001 fe44 0001     ....N...N...D...
   2467c:	fdaa 0001 fe4e 0001 fe44 0001 fe4e 0001     ....N...D...N...
   2468c:	fdaa 0001 fe54 0001 fe54 0001 fe54 0001     ....T...T...T...
   2469c:	fee4 0001 0ba0 0002 0b82 0002 0b3c 0002     ............<...
   246ac:	0a5a 0002 0b3c 0002 0b74 0002 0b3c 0002     Z...<...t...<...
   246bc:	0a5a 0002 0b82 0002 0b82 0002 0b74 0002     Z...........t...
   246cc:	0a5a 0002 0a52 0002 0a52 0002 0a52 0002     Z...R...R...R...
   246dc:	0db8 0002 1200 0002 10c0 0002 10c0 0002     ................
   246ec:	10bc 0002 11d8 0002 11d8 0002 11ca 0002     ................
   246fc:	10bc 0002 11d8 0002 11ca 0002 11d8 0002     ................
   2470c:	10bc 0002 11e0 0002 11e0 0002 11e0 0002     ................
   2471c:	13e4 0002                                   ....

00024720 <__sf_fake_stderr>:
	...

00024740 <__sf_fake_stdin>:
	...

00024760 <__sf_fake_stdout>:
	...
   24780:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   24790:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   247a0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   247b0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000247bd <_ctype_>:
   247bd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   247cd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   247dd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   247ed:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   247fd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   2480d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   2481d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   2482d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   2483d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000248c0 <_init>:
   248c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248c2:	46c0      	nop			; (mov r8, r8)
   248c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   248c6:	bc08      	pop	{r3}
   248c8:	469e      	mov	lr, r3
   248ca:	4770      	bx	lr

000248cc <__init_array_start>:
   248cc:	000120dd 	.word	0x000120dd

000248d0 <_fini>:
   248d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248d2:	46c0      	nop			; (mov r8, r8)
   248d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   248d6:	bc08      	pop	{r3}
   248d8:	469e      	mov	lr, r3
   248da:	4770      	bx	lr

000248dc <__fini_array_start>:
   248dc:	000120b5 	.word	0x000120b5
